/**********************************************************
* M05_2X_functional.cc: definitions for M05_2X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "M05_2X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

M05_2X_Functional::M05_2X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "M05_2X";
    description_ = "M05-2X Meta-GGA Functional";
    citation_ = "Zhao, Y., Schultz, N. E., Truhlar, D. G., J. Chem. Theory Comput. 2, 364, 2006";

    double X = 5.6000000000000005E-01;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double kp = 8.0400000000000005E-01;
    params_.push_back(make_pair("kp",kp));
    double mu_ = 2.1951497276451709E-01;
    params_.push_back(make_pair("mu_",mu_));
    double a_1 = -5.6833000000000000E-01;
    params_.push_back(make_pair("a_1",a_1));
    double a_2 = -1.3005700000000000E+00;
    params_.push_back(make_pair("a_2",a_2));
    double a_3 = 5.5007000000000001E+00;
    params_.push_back(make_pair("a_3",a_3));
    double a_4 = 9.0640199999999993E+00;
    params_.push_back(make_pair("a_4",a_4));
    double a_5 = -3.2210749999999997E+01;
    params_.push_back(make_pair("a_5",a_5));
    double a_6 = -2.3732980000000001E+01;
    params_.push_back(make_pair("a_6",a_6));
    double a_7 = 7.0229960000000005E+01;
    params_.push_back(make_pair("a_7",a_7));
    double a_8 = 2.9886140000000001E+01;
    params_.push_back(make_pair("a_8",a_8));
    double a_9 = -6.0257779999999997E+01;
    params_.push_back(make_pair("a_9",a_9));
    double a_10 = -1.3222049999999999E+01;
    params_.push_back(make_pair("a_10",a_10));
    double a_11 = 1.5236960000000000E+01;
    params_.push_back(make_pair("a_11",a_11));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 3.0999999999999999E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 5.9999999999999998E-02;
    params_.push_back(make_pair("gcaa",gcaa));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 1.0929700000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -3.7917100000000001E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 2.8281000000000001E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -1.0589090000000001E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -3.0543000000000000E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 7.6185400000000003E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 1.4766500000000000E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = -1.1923650000000000E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
M05_2X_Functional::~M05_2X_Functional()
{
}
void M05_2X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t83737 = 1.0/pow(rho_a[index],1.0/3.0);
            double t83738 = c*t83737;
            double t83739 = sqrt(t83738);
            double t83740 = pow(t83738,3.0/2.0);
            double t83741 = c*c;
            double t83742 = 1.0/pow(rho_a[index],2.0/3.0);
            double t83743 = 1.0/c0p;
            double t83744 = b1p*t83739;
            double t83745 = b3p*t83740;
            double t83746 = b4p*t83741*t83742;
            double t83747 = b2p*c*t83737;
            double t83748 = t83744+t83745+t83746+t83747;
            double t83749 = 1.0/t83748;
            double t83750 = t83743*t83749*(1.0/2.0);
            double t83751 = t83750+1.0;
            double t83752 = log(t83751);
            double t83753 = a1p*c*t83737;
            double t83754 = t83753+1.0;
            double t83755 = rho_a[index]*2.0;
            double t83756 = 1.0/pow(t83755,1.0/3.0);
            double t83757 = c*t83756;
            double t83758 = gamma_aa[index]*gamma_aa[index];
            double t83759 = gcab*gcab;
            double t83760 = t83758*t83758;
            double t83761 = t83759*t83759;
            double t83762 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t83763 = 1.0/pow(rho_a[index],8.0/3.0);
            double t83764 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t83765 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t83766 = 1.0/pow(t83755,2.0/3.0);
            double t83767 = pow(rho_a[index],5.0/3.0);
            double t83768 = 1.0/tau_a[index];
            double t83769 = C_k*t83767*t83768;
            double t83770 = t83769-1.0;
            double t83771 = t83770*t83770;
            double t83772 = t83771*t83771;
            double t83773 = t83772*t83772;
            double t83774 = t83769+1.0;
            double t83775 = pow(2.0,1.0/3.0);
            double t83776 = t83775*2.0;
            double t83777 = t83776-2.0;
            double t83778 = two_13*2.0;
            double t83779 = t83778-2.0;
            double t83780 = 1.0/t83779;
            double t83781 = 1.0/c0f;
            double t83782 = b1f*t83739;
            double t83783 = b3f*t83740;
            double t83784 = b4f*t83741*t83742;
            double t83785 = b2f*c*t83737;
            double t83786 = t83782+t83783+t83784+t83785;
            double t83787 = 1.0/t83786;
            double t83788 = t83781*t83787*(1.0/2.0);
            double t83789 = t83788+1.0;
            double t83790 = log(t83789);
            double t83791 = a1f*c*t83737;
            double t83792 = t83791+1.0;
            double t83793 = c0f*t83790*t83792*2.0;
            double t83794 = c0p*t83752*t83754*2.0;
            double t83795 = gcaa*gcaa;
            double t83796 = t83795*t83795;
            functional_[index] = (rho_a[index]*(t83794+t83780*t83777*(t83793-c0p*t83752*t83754*2.0))*2.0-c0p* \
               rho_a[index]*log((t83743*(1.0/2.0))/(b1p*sqrt(t83757)+b3p*pow(t83757,3.0/2.0)+b2p*c*t83756+b4p*t83741* \
               t83766)+1.0)*(a1p*c*t83756+1.0)*4.0)*(ccab0+(ccab2*t83765*t83758*t83759)/(gamma_aa[index]*gcab*t83763* \
               2.0+t83765*t83758*t83759+1.0)+(ccab1*gamma_aa[index]*gcab*t83763)/(gamma_aa[index]*gcab*t83763+1.0) \
               +(ccab4*t83760*t83761*t83762)/(gamma_aa[index]*gcab*t83763*4.0+t83760*t83761*t83762+t83765*t83758* \
               t83759*6.0+gamma_aa[index]*gcab*t83764*t83758*t83759*4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t83764*t83758* \
               t83759)/(gamma_aa[index]*gcab*t83763*3.0+t83765*t83758*t83759*3.0+gamma_aa[index]*gcab*t83764*t83758* \
               t83759+1.0))-rho_a[index]*( ( (tau_a[index]-1.0/1.0E20 > 0.0) ? 1.0*(t83768*(tau_a[index]*2.0-(gamma_aa[index]* \
               (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(t83794+t83780*t83777*(t83793-t83794))*(ccaa0+ \
               (ccaa2*t83765*t83758*t83795)/(gamma_aa[index]*gcaa*t83763*2.0+t83765*t83758*t83795+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t83763)/(gamma_aa[index]*gcaa*t83763+1.0)+(ccaa4*t83760*t83762*t83796)/(gamma_aa[index]*gcaa* \
               t83763*4.0+t83760*t83762*t83796+t83765*t83758*t83795*6.0+gamma_aa[index]*gcaa*t83764*t83758*t83795* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t83764*t83758*t83795)/(gamma_aa[index]*gcaa*t83763*3.0+t83765* \
               t83758*t83795*3.0+gamma_aa[index]*gcaa*t83764*t83758*t83795+1.0))*2.0-rho_a[index]*(X-1.0)*(kp-kp/ \
               ((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t83766*(1.0/4.0))/kp+1.0)+1.0)*((a_1* \
               t83770)/t83774+a_2*t83771*1.0/(t83774*t83774)+a_4*t83772*1.0/(t83774*t83774*t83774*t83774)+a_8*t83773* \
               1.0/(t83774*t83774*t83774*t83774*t83774*t83774*t83774*t83774)+a_10*t83771*t83773*1.0/pow(t83774,1.0E1) \
               +a_3*t83770*t83771*1.0/(t83774*t83774*t83774)+a_5*t83770*t83772*1.0/(t83774*t83774*t83774*t83774*t83774) \
               +a_6*t83771*t83772*1.0/(t83774*t83774*t83774*t83774*t83774*t83774)+a_9*t83770*t83773*1.0/(t83774*t83774* \
               t83774*t83774*t83774*t83774*t83774*t83774*t83774)+a_11*t83770*t83771*t83773*1.0/pow(t83774,1.1E1)+ \
               a_7*t83770*t83771*t83772*1.0/(t83774*t83774*t83774*t83774*t83774*t83774*t83774)+1.0)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t83798 = gamma_aa[index]*gamma_aa[index];
            double t83799 = gcab*gcab;
            double t83800 = t83798*t83798;
            double t83801 = t83799*t83799;
            double t83802 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t83803 = 1.0/pow(rho_a[index],8.0/3.0);
            double t83804 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t83805 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t83806 = rho_a[index]*2.0;
            double t83807 = 1.0/pow(t83806,1.0/3.0);
            double t83808 = c*t83807;
            double t83809 = sqrt(t83808);
            double t83810 = b1p*t83809;
            double t83811 = pow(t83808,3.0/2.0);
            double t83812 = b3p*t83811;
            double t83813 = b2p*c*t83807;
            double t83814 = c*c;
            double t83815 = 1.0/pow(t83806,2.0/3.0);
            double t83816 = b4p*t83814*t83815;
            double t83817 = t83810+t83812+t83813+t83816;
            double t83818 = 1.0/pow(t83806,4.0/3.0);
            double t83819 = 1.0/c0p;
            double t83820 = 1.0/t83817;
            double t83821 = t83820*t83819*(1.0/2.0);
            double t83822 = t83821+1.0;
            double t83823 = 1.0/pow(rho_a[index],1.0/3.0);
            double t83824 = c*t83823;
            double t83825 = sqrt(t83824);
            double t83826 = b1f*t83825;
            double t83827 = pow(t83824,3.0/2.0);
            double t83828 = b3f*t83827;
            double t83829 = 1.0/pow(rho_a[index],2.0/3.0);
            double t83830 = b4f*t83814*t83829;
            double t83831 = b2f*c*t83823;
            double t83832 = t83830+t83831+t83826+t83828;
            double t83833 = 1.0/pow(rho_a[index],4.0/3.0);
            double t83834 = b1p*t83825;
            double t83835 = b3p*t83827;
            double t83836 = b4p*t83814*t83829;
            double t83837 = b2p*c*t83823;
            double t83838 = t83834+t83835+t83836+t83837;
            double t83839 = 1.0/pow(rho_a[index],5.0/3.0);
            double t83840 = 1.0/sqrt(t83824);
            double t83841 = 1.0/c0f;
            double t83842 = 1.0/t83832;
            double t83843 = t83841*t83842*(1.0/2.0);
            double t83844 = t83843+1.0;
            double t83845 = 1.0/t83838;
            double t83846 = t83845*t83819*(1.0/2.0);
            double t83847 = t83846+1.0;
            double t83848 = a1p*c*t83823;
            double t83849 = t83848+1.0;
            double t83850 = 1.0/t83847;
            double t83851 = 1.0/(t83838*t83838);
            double t83852 = b4p*t83814*t83839*(2.0/3.0);
            double t83853 = b2p*c*t83833*(1.0/3.0);
            double t83854 = b1p*c*t83840*t83833*(1.0/6.0);
            double t83855 = b3p*c*t83833*t83825*(1.0/2.0);
            double t83856 = t83852+t83853+t83854+t83855;
            double t83857 = t83850*t83851*t83856*t83849;
            double t83858 = log(t83847);
            double t83859 = log(t83822);
            double t83860 = a1p*c*t83807;
            double t83861 = t83860+1.0;
            double t83862 = pow(2.0,1.0/3.0);
            double t83863 = t83862*2.0;
            double t83864 = t83863-2.0;
            double t83865 = two_13*2.0;
            double t83866 = t83865-2.0;
            double t83867 = 1.0/t83866;
            double t83868 = log(t83844);
            double t83869 = a1f*c*t83823;
            double t83870 = t83869+1.0;
            double t83871 = c0f*t83870*t83868*2.0;
            double t83873 = c0p*t83849*t83858*2.0;
            double t83872 = t83871-t83873;
            double t83874 = gamma_aa[index]*gcab*t83803*4.0;
            double t83875 = gamma_aa[index]*gcab*t83804*t83798*t83799*4.0;
            double t83876 = t83805*t83798*t83799*6.0;
            double t83877 = t83800*t83801*t83802;
            double t83878 = t83874+t83875+t83876+t83877+1.0;
            double t83879 = 1.0/t83878;
            double t83880 = gamma_aa[index]*gcab*t83803;
            double t83881 = t83880+1.0;
            double t83882 = 1.0/t83881;
            double t83883 = gamma_aa[index]*gcab*t83803*3.0;
            double t83884 = gamma_aa[index]*gcab*t83804*t83798*t83799;
            double t83885 = t83805*t83798*t83799*3.0;
            double t83886 = t83883+t83884+t83885+1.0;
            double t83887 = 1.0/t83886;
            double t83888 = gamma_aa[index]*gcab*t83803*2.0;
            double t83889 = t83805*t83798*t83799;
            double t83890 = t83888+t83889+1.0;
            double t83891 = 1.0/t83890;
            double t83892 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t83893 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t83894 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t83895 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t83896 = pow(rho_a[index],5.0/3.0);
            double t83897 = 1.0/tau_a[index];
            double t83898 = C_k*t83896*t83897;
            double t83899 = t83898-1.0;
            double t83900 = t83899*t83899;
            double t83901 = t83900*t83900;
            double t83902 = t83901*t83901;
            double t83903 = t83898+1.0;
            double t83904 = 1.0/(k*k);
            double t83905 = 1.0/kp;
            double t83906 = 1.0/(rho_a[index]*rho_a[index]);
            double t83907 = gamma_aa[index]*mu_*t83904*t83815*t83905*t83906*(1.0/4.0);
            double t83908 = t83907+1.0;
            double t83909 = 1.0/t83908;
            double t83910 = kp-kp*t83909+1.0;
            double t83911 = 1.0/t83903;
            double t83912 = pow(rho_a[index],2.0/3.0);
            double t83913 = 1.0/(t83903*t83903);
            double t83914 = 1.0/pow(t83903,1.0E1);
            double t83915 = 1.0/pow(t83903,1.1E1);
            double t83916 = 1.0/(t83903*t83903*t83903);
            double t83917 = 1.0/(t83903*t83903*t83903*t83903);
            double t83918 = 1.0/(t83903*t83903*t83903*t83903*t83903);
            double t83919 = 1.0/(t83903*t83903*t83903*t83903*t83903*t83903);
            double t83920 = 1.0/(t83903*t83903*t83903*t83903*t83903*t83903*t83903);
            double t83921 = 1.0/(t83903*t83903*t83903*t83903*t83903*t83903*t83903*t83903);
            double t83922 = 1.0/(t83903*t83903*t83903*t83903*t83903*t83903*t83903*t83903*t83903);
            double t83923 = 1.0/pow(t83806,5.0/3.0);
            double t83924 = a_1*t83911*t83899;
            double t83925 = a_10*t83900*t83902*t83914;
            double t83926 = a_11*t83900*t83902*t83915*t83899;
            double t83927 = a_2*t83900*t83913;
            double t83928 = a_3*t83900*t83916*t83899;
            double t83929 = a_4*t83901*t83917;
            double t83930 = a_5*t83901*t83918*t83899;
            double t83931 = a_6*t83900*t83901*t83919;
            double t83932 = a_7*t83900*t83901*t83920*t83899;
            double t83933 = a_8*t83902*t83921;
            double t83934 = a_9*t83902*t83922*t83899;
            double t83935 = t83930+t83931+t83932+t83924+t83933+t83925+t83934+t83926+t83927+t83928+t83929+1.0;
            double t83936 = t83872*t83864*t83867;
            double t83937 = t83873+t83936;
            double t83938 = gcaa*gcaa;
            double t83939 = t83938*t83938;
            double t83940 = tau_a[index]-1.0/1.0E20;
            double t83941 = ( (t83940 > 0.0) ?  1.0 : 0.0 ) ;
            double t83942 = tau_a[index]*2.0;
            double t83943 = 1.0/rho_a[index];
            double t83967 = gamma_aa[index]*t83943*(1.0/4.0);
            double t83944 = t83942-t83967;
            double t83945 = t83944*t83897*(1.0/2.0);
            double t83946 = t83945-1.0;
            double t83947 = t83941*t83946;
            double t83948 = t83947+1.0;
            double t83949 = gamma_aa[index]*gcaa*t83803*4.0;
            double t83950 = gamma_aa[index]*gcaa*t83804*t83938*t83798*4.0;
            double t83951 = t83805*t83938*t83798*6.0;
            double t83952 = t83800*t83802*t83939;
            double t83953 = t83950+t83951+t83952+t83949+1.0;
            double t83954 = 1.0/t83953;
            double t83955 = gamma_aa[index]*gcaa*t83803;
            double t83956 = t83955+1.0;
            double t83957 = 1.0/t83956;
            double t83958 = gamma_aa[index]*gcaa*t83803*3.0;
            double t83959 = gamma_aa[index]*gcaa*t83804*t83938*t83798;
            double t83960 = t83805*t83938*t83798*3.0;
            double t83961 = t83960+t83958+t83959+1.0;
            double t83962 = 1.0/t83961;
            double t83963 = gamma_aa[index]*gcaa*t83803*2.0;
            double t83964 = t83805*t83938*t83798;
            double t83965 = t83963+t83964+1.0;
            double t83966 = 1.0/t83965;
            double t83968 = 1.0/t83844;
            double t83969 = 1.0/(t83832*t83832);
            double t83970 = b4f*t83814*t83839*(2.0/3.0);
            double t83971 = b2f*c*t83833*(1.0/3.0);
            double t83972 = b1f*c*t83840*t83833*(1.0/6.0);
            double t83973 = b3f*c*t83833*t83825*(1.0/2.0);
            double t83974 = t83970+t83971+t83972+t83973;
            double t83975 = a1f*c*c0f*t83833*t83868*(2.0/3.0);
            double t83976 = a1p*c*c0p*t83833*t83858*(2.0/3.0);
            double t83977 = ccaa4*t83800*t83802*t83954*t83939;
            double t83978 = ccaa1*gamma_aa[index]*gcaa*t83803*t83957;
            double t83979 = ccaa3*gamma_aa[index]*gcaa*t83804*t83962*t83938*t83798;
            double t83980 = ccaa2*t83805*t83938*t83966*t83798;
            double t83981 = ccaa0+t83980+t83977+t83978+t83979;
            v_rho_a_[index] = -(rho_a[index]*t83937*2.0-c0p*rho_a[index]*t83861*t83859*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t83882*t83893*(4.0/3.0)+ccab4*t83800*t83801*t83895*t83879*(1.6E1/3.0)+ccab2*t83891*t83892*t83798* \
               t83799*(8.0/3.0)-ccab1*1.0/(t83881*t83881)*t83892*t83798*t83799*(4.0/3.0)-ccab2*t83805*1.0/(t83890* \
               t83890)*t83798*t83799*(gamma_aa[index]*gcab*t83893*(8.0/3.0)+t83892*t83798*t83799*(8.0/3.0))-ccab4* \
               t83800*t83801*t83802*1.0/(t83878*t83878)*(gamma_aa[index]*gcab*t83893*(1.6E1/3.0)+t83800*t83801*t83895* \
               (1.6E1/3.0)+t83892*t83798*t83799*1.6E1+gamma_aa[index]*gcab*t83894*t83798*t83799*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t83894*t83887*t83798*t83799*4.0-ccab3*gamma_aa[index]*gcab*t83804*1.0/(t83886*t83886)*t83798* \
               t83799*(gamma_aa[index]*gcab*t83893*4.0+t83892*t83798*t83799*8.0+gamma_aa[index]*gcab*t83894*t83798* \
               t83799*4.0))-(X-1.0)*(t83910*t83935+rho_a[index]*t83910*(C_k*a_1*t83911*t83912*t83897*(5.0/3.0)-C_k* \
               a_1*t83912*t83913*t83897*t83899*(5.0/3.0)-C_k*a_2*t83900*t83912*t83916*t83897*(1.0E1/3.0)+C_k*a_2* \
               t83912*t83913*t83897*t83899*(1.0E1/3.0)+C_k*a_3*t83900*t83912*t83916*t83897*5.0-C_k*a_4*t83901*t83912* \
               t83918*t83897*(2.0E1/3.0)+C_k*a_5*t83901*t83912*t83918*t83897*(2.5E1/3.0)-C_k*a_8*t83902*t83912*t83922* \
               t83897*(4.0E1/3.0)+C_k*a_9*t83902*t83912*t83922*t83897*1.5E1-C_k*a_10*t83900*t83902*t83912*t83915* \
               t83897*(5.0E1/3.0)+C_k*a_11*t83900*t83902*t83912*t83915*t83897*(5.5E1/3.0)+C_k*a_10*t83902*t83912* \
               t83914*t83897*t83899*(5.0E1/3.0)-C_k*a_3*t83900*t83912*t83917*t83897*t83899*5.0+C_k*a_4*t83900*t83912* \
               t83917*t83897*t83899*(2.0E1/3.0)-C_k*a_5*t83901*t83912*t83919*t83897*t83899*(2.5E1/3.0)-C_k*a_6*t83900* \
               t83901*t83920*t83912*t83897*1.0E1+C_k*a_6*t83901*t83912*t83919*t83897*t83899*1.0E1+C_k*a_7*t83900* \
               t83901*t83920*t83912*t83897*(3.5E1/3.0)-C_k*a_9*t83902*t83912*t83914*t83897*t83899*1.5E1-C_k*a_11* \
               t83900*t83902*1.0/pow(t83903,1.2E1)*t83912*t83897*t83899*(5.5E1/3.0)-C_k*a_7*t83900*t83901*t83912* \
               t83921*t83897*t83899*(3.5E1/3.0)+C_k*a_8*t83900*t83901*t83912*t83921*t83897*t83899*(4.0E1/3.0))-kp* \
               rho_a[index]*1.0/(t83908*t83908)*t83935*(gamma_aa[index]*mu_*t83904*t83905*t83923*t83906*(1.0/3.0) \
               +gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t83904*t83815*t83905*(1.0/2.0))) \
               -(rho_a[index]*((t83861*1.0/(t83817*t83817)*(b2p*c*t83818*(1.0/3.0)+b4p*t83814*t83923*(2.0/3.0)+b3p* \
               c*t83809*t83818*(1.0/2.0)+b1p*c*1.0/sqrt(t83808)*t83818*(1.0/6.0)))/t83822-a1p*c*c0p*t83818*t83859* \
               (2.0/3.0))*2.0+rho_a[index]*(-t83857+t83976+t83864*t83867*(t83857+t83975-t83870*t83974*t83968*t83969- \
               a1p*c*c0p*t83833*t83858*(2.0/3.0)))+c0p*t83861*t83859*2.0-c0p*t83849*t83858*2.0-t83872*t83864*t83867) \
               *(ccab0+ccab1*gamma_aa[index]*gcab*t83803*t83882+ccab4*t83800*t83801*t83802*t83879+ccab2*t83805*t83891* \
               t83798*t83799+ccab3*gamma_aa[index]*gcab*t83804*t83887*t83798*t83799)-t83981*t83937*t83948+rho_a[index]* \
               t83937*t83948*(ccaa1*gamma_aa[index]*gcaa*t83893*t83957*(8.0/3.0)+ccaa4*t83800*t83954*t83939*t83895* \
               (3.2E1/3.0)+ccaa2*t83892*t83938*t83966*t83798*(1.6E1/3.0)-ccaa1*t83892*t83938*1.0/(t83956*t83956)* \
               t83798*(8.0/3.0)-ccaa2*t83805*t83938*1.0/(t83965*t83965)*t83798*(gamma_aa[index]*gcaa*t83893*(1.6E1/ \
               3.0)+t83892*t83938*t83798*(1.6E1/3.0))-ccaa4*t83800*t83802*1.0/(t83953*t83953)*t83939*(gamma_aa[index]* \
               gcaa*t83893*(3.2E1/3.0)+t83800*t83939*t83895*(3.2E1/3.0)+t83892*t83938*t83798*3.2E1+gamma_aa[index]* \
               gcaa*t83938*t83894*t83798*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t83962*t83938*t83894*t83798*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t83804*1.0/(t83961*t83961)*t83938*t83798*(gamma_aa[index]*gcaa*t83893*8.0+t83892* \
               t83938*t83798*1.6E1+gamma_aa[index]*gcaa*t83938*t83894*t83798*8.0))+rho_a[index]*t83981*t83948*(-t83857+ \
               t83976+t83864*t83867*(t83857+t83975-t83976-t83870*t83974*t83968*t83969))-gamma_aa[index]*t83941*t83943* \
               t83981*t83937*t83897*(1.0/8.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t83983 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83984 = c*t83983;
                double t83985 = sqrt(t83984);
                double t83986 = pow(t83984,3.0/2.0);
                double t83987 = c*c;
                double t83988 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83989 = 1.0/c0p;
                double t83990 = b1p*t83985;
                double t83991 = b3p*t83986;
                double t83992 = b4p*t83987*t83988;
                double t83993 = b2p*c*t83983;
                double t83994 = t83990+t83991+t83992+t83993;
                double t83995 = 1.0/t83994;
                double t83996 = t83995*t83989*(1.0/2.0);
                double t83997 = t83996+1.0;
                double t83998 = log(t83997);
                double t83999 = a1p*c*t83983;
                double t84000 = t83999+1.0;
                double t84001 = rho_a[index]*2.0;
                double t84002 = 1.0/pow(t84001,1.0/3.0);
                double t84003 = c*t84002;
                double t84004 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84005 = gamma_aa[index]*gamma_aa[index];
                double t84006 = gcab*gcab;
                double t84007 = t84006*t84006;
                double t84008 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84009 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t84010 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84011 = gamma_aa[index]*gcab*t84004;
                double t84012 = t84011+1.0;
                double t84013 = gamma_aa[index]*gcab*t84004*3.0;
                double t84014 = gamma_aa[index]*gcab*t84010*t84005*t84006;
                double t84015 = t84005*t84006*t84009*3.0;
                double t84016 = t84013+t84014+t84015+1.0;
                double t84017 = t84005*t84005;
                double t84018 = gamma_aa[index]*gcab*t84004*4.0;
                double t84019 = gamma_aa[index]*gcab*t84010*t84005*t84006*4.0;
                double t84020 = t84005*t84006*t84009*6.0;
                double t84021 = t84007*t84008*t84017;
                double t84022 = t84020+t84021+t84018+t84019+1.0;
                double t84023 = gamma_aa[index]*gcab*t84004*2.0;
                double t84024 = t84005*t84006*t84009;
                double t84025 = t84023+t84024+1.0;
                double t84026 = pow(2.0,1.0/3.0);
                double t84027 = t84026*2.0;
                double t84028 = t84027-2.0;
                double t84029 = two_13*2.0;
                double t84030 = t84029-2.0;
                double t84031 = 1.0/t84030;
                double t84032 = 1.0/c0f;
                double t84033 = b1f*t83985;
                double t84034 = b3f*t83986;
                double t84035 = b4f*t83987*t83988;
                double t84036 = b2f*c*t83983;
                double t84037 = t84033+t84034+t84035+t84036;
                double t84038 = 1.0/t84037;
                double t84039 = t84032*t84038*(1.0/2.0);
                double t84040 = t84039+1.0;
                double t84041 = log(t84040);
                double t84042 = a1f*c*t83983;
                double t84043 = t84042+1.0;
                double t84044 = c0f*t84041*t84043*2.0;
                double t84045 = c0p*t83998*t84000*2.0;
                double t84046 = gcaa*gcaa;
                double t84047 = t84046*t84046;
                double t84048 = t84044-t84045;
                double t84049 = t84031*t84028*t84048;
                double t84050 = t84045+t84049;
                double t84051 = tau_a[index]-1.0/1.0E20;
                double t84052 = ( (t84051 > 0.0) ?  1.0 : 0.0 ) ;
                double t84053 = 1.0/tau_a[index];
                double t84054 = gamma_aa[index]*gcaa*t84004;
                double t84055 = t84054+1.0;
                double t84056 = 1.0/t84055;
                double t84057 = gamma_aa[index]*gcaa*t84004*4.0;
                double t84058 = gamma_aa[index]*gcaa*t84010*t84005*t84046*4.0;
                double t84059 = t84005*t84009*t84046*6.0;
                double t84060 = t84008*t84017*t84047;
                double t84061 = t84060+t84057+t84058+t84059+1.0;
                double t84062 = 1.0/t84061;
                double t84063 = gamma_aa[index]*gcaa*t84004*2.0;
                double t84064 = t84005*t84009*t84046;
                double t84065 = t84063+t84064+1.0;
                double t84066 = 1.0/t84065;
                double t84067 = gamma_aa[index]*gcaa*t84004*3.0;
                double t84068 = gamma_aa[index]*gcaa*t84010*t84005*t84046;
                double t84069 = t84005*t84009*t84046*3.0;
                double t84070 = t84067+t84068+t84069+1.0;
                double t84071 = 1.0/t84070;
                double t84072 = 1.0/rho_a[index];
                double t84073 = 1.0/(k*k);
                double t84074 = 1.0/pow(t84001,2.0/3.0);
                double t84075 = pow(rho_a[index],5.0/3.0);
                double t84076 = C_k*t84053*t84075;
                double t84077 = t84076-1.0;
                double t84078 = t84077*t84077;
                double t84079 = t84078*t84078;
                double t84080 = t84079*t84079;
                double t84081 = t84076+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t84045+t84031*t84028*(t84044-c0p*t83998*t84000*2.0))*2.0-c0p* \
                   rho_a[index]*log((t83989*(1.0/2.0))/(b1p*sqrt(t84003)+b3p*pow(t84003,3.0/2.0)+b2p*c*t84002+b4p*t83987* \
                   t84074)+1.0)*(a1p*c*t84002+1.0)*4.0)*((ccab1*gcab*t84004*(1.0/2.0))/t84012-ccab1*gamma_aa[index]*1.0/ \
                   (t84012*t84012)*t84006*t84009*(1.0/2.0)+(ccab2*gamma_aa[index]*t84006*t84009)/t84025-ccab2*t84005* \
                   t84006*1.0/(t84025*t84025)*t84009*(gcab*t84004+gamma_aa[index]*t84006*t84009)+(ccab4*gamma_aa[index]* \
                   t84005*t84007*t84008*2.0)/t84022+(ccab3*gcab*t84010*t84005*t84006*(3.0/2.0))/t84016-ccab4*1.0/(t84022* \
                   t84022)*t84007*t84008*t84017*(gcab*t84004*2.0+gamma_aa[index]*t84006*t84009*6.0+gamma_aa[index]*t84005* \
                   t84007*t84008*2.0+gcab*t84010*t84005*t84006*6.0)-ccab3*gamma_aa[index]*gcab*t84010*t84005*t84006*1.0/ \
                   (t84016*t84016)*(gcab*t84004*(3.0/2.0)+gamma_aa[index]*t84006*t84009*3.0+gcab*t84010*t84005*t84006* \
                   (3.0/2.0)))*2.0+t84050*t84052*t84053*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t84004*t84056+ccaa2*t84005* \
                   t84009*t84046*t84066+ccaa4*t84008*t84017*t84062*t84047+ccaa3*gamma_aa[index]*gcaa*t84010*t84005*t84071* \
                   t84046)*(1.0/4.0)-rho_a[index]*t84050*(t84052*(t84053*(tau_a[index]*2.0-gamma_aa[index]*t84072*(1.0/ \
                   4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t84004*t84056+ccaa2*gamma_aa[index]*t84009*t84046*t84066*2.0- \
                   ccaa1*gamma_aa[index]*t84009*t84046*1.0/(t84055*t84055)-ccaa2*t84005*t84009*t84046*1.0/(t84065*t84065) \
                   *(gcaa*t84004*2.0+gamma_aa[index]*t84009*t84046*2.0)-ccaa4*1.0/(t84061*t84061)*t84008*t84017*t84047* \
                   (gcaa*t84004*4.0+gamma_aa[index]*t84009*t84046*1.2E1+gamma_aa[index]*t84005*t84008*t84047*4.0+gcaa* \
                   t84010*t84005*t84046*1.2E1)+ccaa4*gamma_aa[index]*t84005*t84008*t84062*t84047*4.0+ccaa3*gcaa*t84010* \
                   t84005*t84071*t84046*3.0-ccaa3*gamma_aa[index]*gcaa*t84010*t84005*1.0/(t84070*t84070)*t84046*(gcaa* \
                   t84004*3.0+gamma_aa[index]*t84009*t84046*6.0+gcaa*t84010*t84005*t84046*3.0))*2.0-mu_*t84072*t84073* \
                   t84074*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t84073*t84074*(1.0/4.0))/kp+1.0,2.0) \
                   *(X-1.0)*((a_1*t84077)/t84081+a_2*1.0/(t84081*t84081)*t84078+a_4*1.0/(t84081*t84081*t84081*t84081) \
                   *t84079+a_8*t84080*1.0/(t84081*t84081*t84081*t84081*t84081*t84081*t84081*t84081)+a_10*t84080*1.0/pow(t84081,1.0E1) \
                   *t84078+a_3*1.0/(t84081*t84081*t84081)*t84077*t84078+a_5*1.0/(t84081*t84081*t84081*t84081*t84081)* \
                   t84077*t84079+a_6*1.0/(t84081*t84081*t84081*t84081*t84081*t84081)*t84078*t84079+a_9*t84080*1.0/(t84081* \
                   t84081*t84081*t84081*t84081*t84081*t84081*t84081*t84081)*t84077+a_11*t84080*1.0/pow(t84081,1.1E1)* \
                   t84077*t84078+a_7*1.0/(t84081*t84081*t84081*t84081*t84081*t84081*t84081)*t84077*t84078*t84079+1.0) \
                   *(1.0/2.0);
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t84083 = pow(rho_a[index],5.0/3.0);
                double t84084 = 1.0/(tau_a[index]*tau_a[index]);
                double t84085 = 1.0/tau_a[index];
                double t84086 = C_k*t84083*t84085;
                double t84087 = t84086+1.0;
                double t84088 = t84086-1.0;
                double t84089 = 1.0/(t84087*t84087);
                double t84090 = t84088*t84088;
                double t84091 = t84090*t84090;
                double t84092 = t84091*t84091;
                double t84093 = 1.0/pow(t84087,1.1E1);
                double t84094 = 1.0/(t84087*t84087*t84087);
                double t84095 = 1.0/(t84087*t84087*t84087*t84087);
                double t84096 = 1.0/(t84087*t84087*t84087*t84087*t84087);
                double t84097 = 1.0/(t84087*t84087*t84087*t84087*t84087*t84087);
                double t84098 = 1.0/(t84087*t84087*t84087*t84087*t84087*t84087*t84087);
                double t84099 = 1.0/(t84087*t84087*t84087*t84087*t84087*t84087*t84087*t84087);
                double t84100 = 1.0/(t84087*t84087*t84087*t84087*t84087*t84087*t84087*t84087*t84087);
                double t84101 = 1.0/pow(t84087,1.0E1);
                double t84102 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84103 = c*t84102;
                double t84104 = sqrt(t84103);
                double t84105 = pow(t84103,3.0/2.0);
                double t84106 = c*c;
                double t84107 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84108 = 1.0/c0p;
                double t84109 = b1p*t84104;
                double t84110 = b3p*t84105;
                double t84111 = b4p*t84106*t84107;
                double t84112 = b2p*c*t84102;
                double t84113 = t84110+t84111+t84112+t84109;
                double t84114 = 1.0/t84113;
                double t84115 = t84114*t84108*(1.0/2.0);
                double t84116 = t84115+1.0;
                double t84117 = log(t84116);
                double t84118 = a1p*c*t84102;
                double t84119 = t84118+1.0;
                double t84120 = tau_a[index]-1.0/1.0E20;
                double t84121 = tau_a[index]*2.0;
                double t84122 = 1.0/rho_a[index];
                double t84123 = t84121-gamma_aa[index]*t84122*(1.0/4.0);
                double t84124 = gamma_aa[index]*gamma_aa[index];
                double t84125 = gcaa*gcaa;
                double t84126 = t84124*t84124;
                double t84127 = t84125*t84125;
                double t84128 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84129 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84130 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84131 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t84104+ \
                   b3f*t84105+b2f*c*t84102+b4f*t84106*t84107))+1.0)*(a1f*c*t84102+1.0)*2.0-c0p*t84117*t84119*2.0))/(two_13* \
                   2.0-2.0)+c0p*t84117*t84119*2.0)*( ( (t84120 > 0.0) ? 1.0*(t84085-t84123*t84084*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t84131*t84124*t84125)/(gamma_aa[index]*gcaa*t84129*2.0+t84131*t84124*t84125+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t84129)/(gamma_aa[index]*gcaa*t84129+1.0)+(ccaa4*t84126*t84127*t84128) \
                   /(gamma_aa[index]*gcaa*t84129*4.0+t84131*t84124*t84125*6.0+t84126*t84127*t84128+gamma_aa[index]*gcaa* \
                   t84130*t84124*t84125*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t84130*t84124*t84125)/(gamma_aa[index]*gcaa* \
                   t84129*3.0+t84131*t84124*t84125*3.0+gamma_aa[index]*gcaa*t84130*t84124*t84125+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t84083*t84084)/t84087-C_k*a_1*t84083*t84084*t84088*t84089-C_k* \
                   a_2*t84090*t84083*t84084*t84094*2.0+C_k*a_2*t84083*t84084*t84088*t84089*2.0+C_k*a_3*t84090*t84083* \
                   t84084*t84094*3.0-C_k*a_4*t84091*t84083*t84084*t84096*4.0+C_k*a_5*t84091*t84083*t84084*t84096*5.0- \
                   C_k*a_8*t84100*t84083*t84092*t84084*8.0+C_k*a_9*t84100*t84083*t84092*t84084*9.0+C_k*a_10*t84101*t84083* \
                   t84092*t84084*t84088*1.0E1-C_k*a_10*t84090*t84083*t84092*t84084*t84093*1.0E1+C_k*a_11*t84090*t84083* \
                   t84092*t84084*t84093*1.1E1-C_k*a_3*t84090*t84083*t84084*t84095*t84088*3.0+C_k*a_4*t84090*t84083*t84084* \
                   t84095*t84088*4.0-C_k*a_5*t84091*t84083*t84084*t84088*t84097*5.0-C_k*a_6*t84090*t84091*t84083*t84084* \
                   t84098*6.0+C_k*a_6*t84091*t84083*t84084*t84088*t84097*6.0+C_k*a_7*t84090*t84091*t84083*t84084*t84098* \
                   7.0-C_k*a_9*t84101*t84083*t84092*t84084*t84088*9.0-C_k*a_11*t84090*t84083*t84092*t84084*1.0/pow(t84087,1.2E1) \
                   *t84088*1.1E1-C_k*a_7*t84090*t84091*t84083*t84084*t84088*t84099*7.0+C_k*a_8*t84090*t84091*t84083*t84084* \
                   t84088*t84099*8.0);
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t84133 = rho_a[index]*2.0;
            double t84134 = 1.0/pow(t84133,1.0/3.0);
            double t84135 = c*t84134;
            double t84136 = sqrt(t84135);
            double t84137 = b1p*t84136;
            double t84138 = pow(t84135,3.0/2.0);
            double t84139 = b3p*t84138;
            double t84140 = b2p*c*t84134;
            double t84141 = c*c;
            double t84142 = 1.0/pow(t84133,2.0/3.0);
            double t84143 = b4p*t84141*t84142;
            double t84144 = t84140+t84143+t84137+t84139;
            double t84145 = 1.0/pow(t84133,8.0/3.0);
            double t84146 = 1.0/pow(t84133,7.0/3.0);
            double t84147 = 1.0/sqrt(t84135);
            double t84148 = 1.0/c0p;
            double t84149 = 1.0/t84144;
            double t84150 = t84148*t84149*(1.0/2.0);
            double t84151 = t84150+1.0;
            double t84152 = 1.0/t84151;
            double t84153 = a1p*c*t84134;
            double t84154 = t84153+1.0;
            double t84155 = 1.0/pow(t84133,4.0/3.0);
            double t84157 = b2p*c*t84155*(1.0/3.0);
            double t84158 = 1.0/pow(t84133,5.0/3.0);
            double t84159 = b4p*t84141*t84158*(2.0/3.0);
            double t84160 = b1p*c*t84155*t84147*(1.0/6.0);
            double t84161 = b3p*c*t84136*t84155*(1.0/2.0);
            double t84156 = t84160+t84161+t84157+t84159;
            double t84162 = t84156*t84156;
            double t84163 = 1.0/(t84144*t84144);
            double t84164 = log(t84151);
            double t84165 = gamma_aa[index]*gamma_aa[index];
            double t84166 = gcab*gcab;
            double t84167 = t84165*t84165;
            double t84168 = t84166*t84166;
            double t84169 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t84170 = 1.0/pow(rho_a[index],8.0/3.0);
            double t84171 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t84172 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t84173 = two_13*2.0;
            double t84174 = t84173-2.0;
            double t84175 = 1.0/t84174;
            double t84176 = 1.0/pow(rho_a[index],1.0/3.0);
            double t84177 = c*t84176;
            double t84178 = sqrt(t84177);
            double t84179 = pow(t84177,3.0/2.0);
            double t84180 = 1.0/pow(rho_a[index],2.0/3.0);
            double t84181 = b1p*t84178;
            double t84182 = b3p*t84179;
            double t84183 = b4p*t84141*t84180;
            double t84184 = b2p*c*t84176;
            double t84185 = t84181+t84182+t84183+t84184;
            double t84186 = 1.0/t84185;
            double t84187 = t84148*t84186*(1.0/2.0);
            double t84188 = t84187+1.0;
            double t84189 = log(t84188);
            double t84190 = a1p*c*t84176;
            double t84191 = t84190+1.0;
            double t84192 = gamma_aa[index]*gcab*t84170*4.0;
            double t84193 = gamma_aa[index]*gcab*t84171*t84165*t84166*4.0;
            double t84194 = t84172*t84165*t84166*6.0;
            double t84195 = t84167*t84168*t84169;
            double t84196 = t84192+t84193+t84194+t84195+1.0;
            double t84197 = 1.0/t84196;
            double t84198 = gamma_aa[index]*gcab*t84170;
            double t84199 = t84198+1.0;
            double t84200 = 1.0/t84199;
            double t84201 = gamma_aa[index]*gcab*t84170*3.0;
            double t84202 = gamma_aa[index]*gcab*t84171*t84165*t84166;
            double t84203 = t84172*t84165*t84166*3.0;
            double t84204 = t84201+t84202+t84203+1.0;
            double t84205 = 1.0/t84204;
            double t84206 = gamma_aa[index]*gcab*t84170*2.0;
            double t84207 = t84172*t84165*t84166;
            double t84208 = t84206+t84207+1.0;
            double t84209 = 1.0/t84208;
            double t84210 = 1.0/pow(rho_a[index],1.0E1);
            double t84211 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t84213 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t84214 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t84216 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t84223 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t84224 = gamma_aa[index]*gcab*t84213*(1.6E1/3.0);
            double t84225 = gamma_aa[index]*gcab*t84216*t84165*t84166*1.6E1;
            double t84226 = t84214*t84165*t84166*1.6E1;
            double t84227 = t84223*t84167*t84168*(1.6E1/3.0);
            double t84212 = t84224+t84225+t84226+t84227;
            double t84230 = gamma_aa[index]*gcab*t84213*(8.0/3.0);
            double t84231 = t84214*t84165*t84166*(8.0/3.0);
            double t84215 = t84230+t84231;
            double t84217 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t84218 = 1.0/(t84204*t84204);
            double t84219 = gamma_aa[index]*gcab*t84213*4.0;
            double t84220 = gamma_aa[index]*gcab*t84216*t84165*t84166*4.0;
            double t84221 = t84214*t84165*t84166*8.0;
            double t84222 = t84220+t84221+t84219;
            double t84228 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t84229 = 1.0/(t84196*t84196);
            double t84232 = 1.0/(t84208*t84208);
            double t84233 = pow(2.0,1.0/3.0);
            double t84234 = t84233*2.0;
            double t84235 = t84234-2.0;
            double t84236 = a1f*c*t84176;
            double t84237 = t84236+1.0;
            double t84238 = 1.0/c0f;
            double t84239 = b1f*t84178;
            double t84240 = b3f*t84179;
            double t84241 = b4f*t84141*t84180;
            double t84242 = b2f*c*t84176;
            double t84243 = t84240+t84241+t84242+t84239;
            double t84244 = 1.0/t84243;
            double t84245 = t84244*t84238*(1.0/2.0);
            double t84246 = t84245+1.0;
            double t84247 = 1.0/pow(rho_a[index],4.0/3.0);
            double t84248 = 1.0/pow(rho_a[index],5.0/3.0);
            double t84249 = 1.0/sqrt(t84177);
            double t84250 = log(t84246);
            double t84251 = 1.0/t84188;
            double t84252 = 1.0/(t84185*t84185);
            double t84253 = b4p*t84141*t84248*(2.0/3.0);
            double t84254 = b2p*c*t84247*(1.0/3.0);
            double t84255 = b1p*c*t84247*t84249*(1.0/6.0);
            double t84256 = b3p*c*t84247*t84178*(1.0/2.0);
            double t84257 = t84253+t84254+t84255+t84256;
            double t84258 = t84251*t84252*t84191*t84257;
            double t84259 = c0f*t84250*t84237*2.0;
            double t84260 = c0p*t84191*t84189*2.0;
            double t84261 = 1.0/(t84199*t84199);
            double t84262 = 1.0/(rho_a[index]*rho_a[index]);
            double t84263 = 1.0/tau_a[index];
            double t84264 = pow(rho_a[index],2.0/3.0);
            double t84265 = pow(rho_a[index],5.0/3.0);
            double t84266 = C_k*t84263*t84265;
            double t84267 = t84266+1.0;
            double t84268 = t84266-1.0;
            double t84269 = 1.0/(t84267*t84267);
            double t84270 = t84268*t84268;
            double t84271 = t84270*t84270;
            double t84272 = t84271*t84271;
            double t84273 = 1.0/pow(t84267,1.1E1);
            double t84274 = 1.0/(t84267*t84267*t84267);
            double t84275 = 1.0/(t84267*t84267*t84267*t84267);
            double t84276 = 1.0/(t84267*t84267*t84267*t84267*t84267);
            double t84277 = 1.0/(t84267*t84267*t84267*t84267*t84267*t84267);
            double t84278 = 1.0/(t84267*t84267*t84267*t84267*t84267*t84267*t84267);
            double t84279 = 1.0/(t84267*t84267*t84267*t84267*t84267*t84267*t84267*t84267);
            double t84280 = 1.0/(t84267*t84267*t84267*t84267*t84267*t84267*t84267*t84267*t84267);
            double t84281 = 1.0/pow(t84267,1.0E1);
            double t84282 = 1.0/(k*k);
            double t84283 = 1.0/kp;
            double t84284 = gamma_aa[index]*mu_*t84142*t84262*t84282*t84283*(1.0/4.0);
            double t84285 = t84284+1.0;
            double t84286 = 1.0/t84285;
            double t84287 = kp-kp*t84286+1.0;
            double t84288 = C_k*C_k;
            double t84289 = pow(rho_a[index],4.0/3.0);
            double t84290 = 1.0/(tau_a[index]*tau_a[index]);
            double t84291 = 1.0/t84267;
            double t84292 = 1.0/pow(t84267,1.2E1);
            double t84293 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t84294 = gamma_aa[index]*mu_*t84142*t84282*t84283*t84293*(1.0/2.0);
            double t84295 = gamma_aa[index]*mu_*t84262*t84282*t84283*t84158*(1.0/3.0);
            double t84296 = t84294+t84295;
            double t84297 = a_1*t84291*t84268;
            double t84298 = a_10*t84270*t84272*t84281;
            double t84299 = a_11*t84270*t84272*t84273*t84268;
            double t84300 = a_2*t84270*t84269;
            double t84301 = a_3*t84270*t84274*t84268;
            double t84302 = a_4*t84271*t84275;
            double t84303 = a_5*t84271*t84276*t84268;
            double t84304 = a_6*t84270*t84271*t84277;
            double t84305 = a_7*t84270*t84271*t84268*t84278;
            double t84306 = a_8*t84272*t84279;
            double t84307 = a_9*t84280*t84272*t84268;
            double t84308 = t84300+t84301+t84302+t84303+t84304+t84305+t84306+t84307+t84297+t84298+t84299+1.0;
            double t84309 = 1.0/(t84285*t84285);
            double t84310 = C_k*a_1*t84263*t84264*t84291*(5.0/3.0);
            double t84311 = C_k*a_2*t84263*t84264*t84268*t84269*(1.0E1/3.0);
            double t84312 = C_k*a_10*t84263*t84272*t84281*t84264*t84268*(5.0E1/3.0);
            double t84313 = C_k*a_11*t84270*t84263*t84272*t84264*t84273*(5.5E1/3.0);
            double t84314 = C_k*a_3*t84270*t84263*t84264*t84274*5.0;
            double t84315 = C_k*a_4*t84270*t84263*t84264*t84275*t84268*(2.0E1/3.0);
            double t84316 = C_k*a_5*t84271*t84263*t84264*t84276*(2.5E1/3.0);
            double t84317 = C_k*a_6*t84271*t84263*t84264*t84268*t84277*1.0E1;
            double t84318 = C_k*a_7*t84270*t84271*t84263*t84264*t84278*(3.5E1/3.0);
            double t84319 = C_k*a_8*t84270*t84271*t84263*t84264*t84268*t84279*(4.0E1/3.0);
            double t84320 = C_k*a_9*t84280*t84263*t84272*t84264*1.5E1;
            double t84321 = t84310+t84311+t84320+t84312+t84313+t84314+t84315+t84316+t84317+t84318+t84319-C_k* \
               a_1*t84263*t84264*t84268*t84269*(5.0/3.0)-C_k*a_2*t84270*t84263*t84264*t84274*(1.0E1/3.0)-C_k*a_4* \
               t84271*t84263*t84264*t84276*(2.0E1/3.0)-C_k*a_8*t84280*t84263*t84272*t84264*(4.0E1/3.0)-C_k*a_10*t84270* \
               t84263*t84272*t84264*t84273*(5.0E1/3.0)-C_k*a_3*t84270*t84263*t84264*t84275*t84268*5.0-C_k*a_5*t84271* \
               t84263*t84264*t84268*t84277*(2.5E1/3.0)-C_k*a_6*t84270*t84271*t84263*t84264*t84278*1.0E1-C_k*a_9*t84263* \
               t84272*t84281*t84264*t84268*1.5E1-C_k*a_11*t84270*t84263*t84272*t84264*t84292*t84268*(5.5E1/3.0)-C_k* \
               a_7*t84270*t84271*t84263*t84264*t84268*t84279*(3.5E1/3.0);
            double t84322 = ccab4*t84167*t84168*t84169*t84197;
            double t84323 = ccab1*gamma_aa[index]*gcab*t84200*t84170;
            double t84324 = ccab3*gamma_aa[index]*gcab*t84205*t84171*t84165*t84166;
            double t84325 = ccab2*t84172*t84209*t84165*t84166;
            double t84326 = ccab0+t84322+t84323+t84324+t84325;
            double t84327 = b2p*c*t84146*(4.0/9.0);
            double t84328 = b4p*t84141*t84145*(1.0E1/9.0);
            double t84329 = 1.0/pow(t84135,3.0/2.0);
            double t84330 = b3p*t84141*t84145*t84147*(1.0/1.2E1);
            double t84331 = b1p*c*t84146*t84147*(2.0/9.0);
            double t84332 = b3p*c*t84136*t84146*(2.0/3.0);
            double t84333 = t84330+t84331+t84332+t84327+t84328-b1p*t84141*t84145*t84329*(1.0/3.6E1);
            double t84334 = t84152*t84333*t84154*t84163;
            double t84335 = 1.0/(t84144*t84144*t84144);
            double t84336 = 1.0/(t84151*t84151);
            double t84337 = 1.0/(t84144*t84144*t84144*t84144);
            double t84338 = t84162*t84154*t84336*t84148*t84337*(1.0/2.0);
            double t84339 = 1.0/d2fz0;
            double t84340 = 1.0/Aa;
            double t84341 = b1a*t84136;
            double t84342 = b3a*t84138;
            double t84343 = b2a*c*t84134;
            double t84344 = b4a*t84141*t84142;
            double t84345 = t84341+t84342+t84343+t84344;
            double t84346 = 1.0/t84345;
            double t84347 = t84340*t84346*(1.0/2.0);
            double t84348 = t84347+1.0;
            double t84349 = log(t84348);
            double t84350 = a1a*c*t84134;
            double t84351 = t84350+1.0;
            double t84352 = a1p*c*t84152*t84163*t84155*t84156*(2.0/3.0);
            double t84353 = 1.0/t84246;
            double t84354 = b4f*t84141*t84248*(2.0/3.0);
            double t84355 = b2f*c*t84247*(1.0/3.0);
            double t84356 = b1f*c*t84247*t84249*(1.0/6.0);
            double t84357 = b3f*c*t84247*t84178*(1.0/2.0);
            double t84358 = t84354+t84355+t84356+t84357;
            double t84359 = 1.0/(t84243*t84243);
            double t84360 = 1.0/pow(rho_a[index],7.0/3.0);
            double t84361 = 1.0/pow(t84177,3.0/2.0);
            double t84362 = t84358*t84358;
            double t84363 = t84257*t84257;
            double t84364 = 1.0/(t84185*t84185*t84185);
            double t84365 = t84251*t84191*t84363*t84364*2.0;
            double t84366 = b4p*t84141*t84170*(1.0E1/9.0);
            double t84367 = b2p*c*t84360*(4.0/9.0);
            double t84368 = b3p*t84141*t84170*t84249*(1.0/1.2E1);
            double t84369 = b1p*c*t84360*t84249*(2.0/9.0);
            double t84370 = b3p*c*t84360*t84178*(2.0/3.0);
            double t84452 = b1p*t84141*t84170*t84361*(1.0/3.6E1);
            double t84371 = t84370-t84452+t84366+t84367+t84368+t84369;
            double t84372 = 1.0/(t84188*t84188);
            double t84373 = 1.0/(t84185*t84185*t84185*t84185);
            double t84374 = a1p*c*c0p*t84360*t84189*(8.0/9.0);
            double t84375 = a1f*c*c0f*t84250*t84247*(2.0/3.0);
            double t84376 = a1p*c*c0p*t84247*t84189*(2.0/3.0);
            double t84377 = a1p*c*c0p*t84155*t84164*(4.0/3.0);
            double t84378 = t84260-t84259;
            double t84379 = t84235*t84175*t84378;
            double t84380 = 1.0/(t84199*t84199*t84199);
            double t84381 = ccab1*gamma_aa[index]*gcab*t84210*t84380*t84165*t84166*(3.2E1/9.0);
            double t84382 = t84212*t84212;
            double t84383 = 1.0/(t84196*t84196*t84196);
            double t84384 = ccab4*t84382*t84167*t84383*t84168*t84169*2.0;
            double t84385 = t84215*t84215;
            double t84386 = 1.0/(t84208*t84208*t84208);
            double t84387 = ccab2*t84172*t84165*t84166*t84385*t84386*2.0;
            double t84388 = t84222*t84222;
            double t84389 = 1.0/(t84204*t84204*t84204);
            double t84390 = ccab3*gamma_aa[index]*gcab*t84171*t84165*t84166*t84388*t84389*2.0;
            double t84460 = t84353*t84237*t84358*t84359;
            double t84391 = -t84460+t84258+t84375-t84376;
            double t84392 = gcaa*gcaa;
            double t84393 = t84392*t84392;
            double t84394 = t84260-t84379;
            double t84395 = tau_a[index]-1.0/1.0E20;
            double t84396 = ( (t84395 > 0.0) ?  1.0 : 0.0 ) ;
            double t84397 = tau_a[index]*2.0;
            double t84398 = 1.0/rho_a[index];
            double t84422 = gamma_aa[index]*t84398*(1.0/4.0);
            double t84399 = -t84422+t84397;
            double t84400 = t84263*t84399*(1.0/2.0);
            double t84401 = t84400-1.0;
            double t84402 = t84401*t84396;
            double t84403 = t84402+1.0;
            double t84404 = gamma_aa[index]*gcaa*t84170*4.0;
            double t84405 = gamma_aa[index]*gcaa*t84171*t84165*t84392*4.0;
            double t84406 = t84172*t84165*t84392*6.0;
            double t84407 = t84167*t84393*t84169;
            double t84408 = t84404+t84405+t84406+t84407+1.0;
            double t84409 = 1.0/t84408;
            double t84410 = gamma_aa[index]*gcaa*t84170;
            double t84411 = t84410+1.0;
            double t84412 = 1.0/t84411;
            double t84413 = gamma_aa[index]*gcaa*t84170*3.0;
            double t84414 = gamma_aa[index]*gcaa*t84171*t84165*t84392;
            double t84415 = t84172*t84165*t84392*3.0;
            double t84416 = t84413+t84414+t84415+1.0;
            double t84417 = 1.0/t84416;
            double t84418 = gamma_aa[index]*gcaa*t84170*2.0;
            double t84419 = t84172*t84165*t84392;
            double t84420 = t84418+t84419+1.0;
            double t84421 = 1.0/t84420;
            double t84423 = 1.0/(t84411*t84411);
            double t84424 = gamma_aa[index]*gcaa*t84213*(3.2E1/3.0);
            double t84425 = gamma_aa[index]*gcaa*t84216*t84165*t84392*3.2E1;
            double t84426 = t84214*t84165*t84392*3.2E1;
            double t84427 = t84223*t84167*t84393*(3.2E1/3.0);
            double t84428 = t84424+t84425+t84426+t84427;
            double t84429 = gamma_aa[index]*gcaa*t84213*(1.6E1/3.0);
            double t84430 = t84214*t84165*t84392*(1.6E1/3.0);
            double t84431 = t84430+t84429;
            double t84432 = gamma_aa[index]*gcaa*t84213*8.0;
            double t84433 = gamma_aa[index]*gcaa*t84216*t84165*t84392*8.0;
            double t84434 = t84214*t84165*t84392*1.6E1;
            double t84435 = t84432+t84433+t84434;
            double t84436 = 1.0/(t84416*t84416);
            double t84437 = 1.0/(t84408*t84408);
            double t84438 = 1.0/(t84420*t84420);
            double t84439 = ccaa4*t84409*t84167*t84393*t84169;
            double t84440 = ccaa1*gamma_aa[index]*gcaa*t84412*t84170;
            double t84441 = ccaa3*gamma_aa[index]*gcaa*t84171*t84165*t84417*t84392;
            double t84442 = ccaa2*t84421*t84172*t84165*t84392;
            double t84443 = ccaa0+t84440+t84441+t84442+t84439;
            double t84444 = 1.0/(t84243*t84243*t84243);
            double t84445 = b4f*t84141*t84170*(1.0E1/9.0);
            double t84446 = b2f*c*t84360*(4.0/9.0);
            double t84447 = b3f*t84141*t84170*t84249*(1.0/1.2E1);
            double t84448 = b1f*c*t84360*t84249*(2.0/9.0);
            double t84449 = b3f*c*t84360*t84178*(2.0/3.0);
            double t84450 = t84445+t84446+t84447+t84448+t84449-b1f*t84141*t84170*t84361*(1.0/3.6E1);
            double t84451 = t84450*t84353*t84237*t84359;
            double t84453 = t84251*t84252*t84191*t84371;
            double t84454 = 1.0/(t84246*t84246);
            double t84455 = 1.0/(t84243*t84243*t84243*t84243);
            double t84456 = t84362*t84237*t84238*t84454*t84455*(1.0/2.0);
            double t84457 = t84191*t84363*t84372*t84148*t84373*(1.0/2.0);
            double t84458 = a1f*c*t84353*t84247*t84358*t84359*(2.0/3.0);
            double t84459 = a1p*c*t84251*t84252*t84247*t84257*(2.0/3.0);
            double t84461 = ccaa4*t84223*t84409*t84167*t84393*(3.2E1/3.0);
            double t84462 = ccaa1*gamma_aa[index]*gcaa*t84213*t84412*(8.0/3.0);
            double t84463 = ccaa3*gamma_aa[index]*gcaa*t84216*t84165*t84417*t84392*8.0;
            double t84464 = ccaa2*t84214*t84421*t84165*t84392*(1.6E1/3.0);
            double t84469 = ccaa1*t84214*t84423*t84165*t84392*(8.0/3.0);
            double t84470 = ccaa3*gamma_aa[index]*gcaa*t84171*t84165*t84435*t84436*t84392;
            double t84471 = ccaa4*t84167*t84428*t84437*t84393*t84169;
            double t84472 = ccaa2*t84431*t84172*t84165*t84392*t84438;
            double t84465 = t84461-t84470+t84462-t84471+t84463-t84472+t84464-t84469;
            double t84466 = t84460-t84258-t84375+t84376;
            double t84467 = t84235*t84175*t84466;
            double t84468 = t84258-t84376+t84467;
            v_rho_a_rho_a_[index] = (-t84260+t84379+rho_a[index]*(-t84258+t84376+t84235*t84175*(t84258+t84375- \
               t84353*t84237*t84358*t84359-a1p*c*c0p*t84247*t84189*(2.0/3.0)))+rho_a[index]*(t84152*t84154*t84163* \
               t84156-a1p*c*c0p*t84155*t84164*(2.0/3.0))*2.0+c0p*t84154*t84164*2.0)*(ccab1*gamma_aa[index]*gcab*t84200* \
               t84213*(4.0/3.0)-ccab1*t84214*t84261*t84165*t84166*(4.0/3.0)+ccab2*t84214*t84209*t84165*t84166*(8.0/ \
               3.0)+ccab4*t84223*t84167*t84168*t84197*(1.6E1/3.0)-ccab2*t84232*t84215*t84172*t84165*t84166-ccab4* \
               t84212*t84229*t84167*t84168*t84169+ccab3*gamma_aa[index]*gcab*t84205*t84216*t84165*t84166*4.0-ccab3* \
               gamma_aa[index]*gcab*t84222*t84171*t84218*t84165*t84166)*4.0-t84326*(-t84377-rho_a[index]*(t84334+ \
               t84352+t84338-t84152*t84162*t84154*t84335*2.0-a1p*c*c0p*t84146*t84164*(8.0/9.0)+Aa*t84351*t84262*t84175* \
               t84339*t84349*(4.0/9.0))*2.0+rho_a[index]*(t84453-t84365-t84374+t84457+t84459+t84235*t84175*(t84451+ \
               t84365+t84374+t84456+t84458-t84251*t84252*t84191*t84371-t84353*t84362*t84237*t84444*2.0-a1f*c*c0f* \
               t84250*t84360*(8.0/9.0)-t84191*t84363*t84372*t84148*t84373*(1.0/2.0)-a1p*c*t84251*t84252*t84247*t84257* \
               (2.0/3.0)))+t84235*t84175*t84391*2.0+t84152*t84154*t84163*t84156*2.0-t84251*t84252*t84191*t84257*2.0+ \
               a1p*c*c0p*t84247*t84189*(4.0/3.0))+(rho_a[index]*(t84260+t84235*t84175*(t84259-c0p*t84191*t84189*2.0) \
               )*2.0-c0p*rho_a[index]*t84154*t84164*4.0)*(t84381+t84390+t84384+t84387+ccab1*gamma_aa[index]*gcab* \
               t84200*t84217*(4.4E1/9.0)-ccab1*t84211*t84261*t84165*t84166*(7.6E1/9.0)+ccab2*t84211*t84209*t84165* \
               t84166*(4.0E1/3.0)+ccab4*t84228*t84167*t84168*t84197*(3.68E2/9.0)-ccab2*t84214*t84232*t84215*t84165* \
               t84166*(1.6E1/3.0)-ccab4*t84212*t84223*t84229*t84167*t84168*(3.2E1/3.0)-ccab2*t84232*t84172*t84165* \
               t84166*(gamma_aa[index]*gcab*t84217*(8.8E1/9.0)+t84211*t84165*t84166*(4.0E1/3.0))-ccab4*t84229*t84167* \
               t84168*t84169*(gamma_aa[index]*gcab*t84217*(1.76E2/9.0)+t84211*t84165*t84166*8.0E1+t84228*t84167*t84168* \
               (3.68E2/9.0)+gamma_aa[index]*gcab*t84210*t84165*t84166*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t84210* \
               t84205*t84165*t84166*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t84171*t84218*t84165*t84166*(gamma_aa[index]* \
               gcab*t84217*(4.4E1/3.0)+t84211*t84165*t84166*4.0E1+gamma_aa[index]*gcab*t84210*t84165*t84166*(7.6E1/ \
               3.0))-ccab3*gamma_aa[index]*gcab*t84222*t84216*t84218*t84165*t84166*8.0)-(X-1.0)*(t84321*t84287*2.0+ \
               rho_a[index]*t84287*(C_k*a_1*t84263*t84291*t84176*(1.0E1/9.0)-a_1*t84290*t84269*t84288*t84289*(5.0E1/ \
               9.0)+a_2*t84290*t84269*t84288*t84289*(5.0E1/9.0)+a_1*t84290*t84274*t84268*t84288*t84289*(5.0E1/9.0) \
               +a_10*t84272*t84281*t84290*t84288*t84289*2.5E2+a_2*t84270*t84290*t84275*t84288*t84289*(5.0E1/3.0)- \
               a_2*t84290*t84274*t84268*t84288*t84289*(2.0E2/9.0)-a_3*t84270*t84290*t84275*t84288*t84289*5.0E1+a_3* \
               t84290*t84274*t84268*t84288*t84289*(5.0E1/3.0)+a_4*t84270*t84290*t84275*t84288*t84289*(1.0E2/3.0)+ \
               a_4*t84271*t84290*t84277*t84288*t84289*(5.0E2/9.0)-a_5*t84271*t84290*t84277*t84288*t84289*(1.25E3/ \
               9.0)+a_6*t84271*t84290*t84277*t84288*t84289*(2.5E2/3.0)+a_8*t84272*t84281*t84290*t84288*t84289*2.0E2- \
               a_9*t84272*t84281*t84290*t84288*t84289*4.5E2-C_k*a_1*t84263*t84176*t84268*t84269*(1.0E1/9.0)-C_k*a_2* \
               t84270*t84263*t84274*t84176*(2.0E1/9.0)+C_k*a_2*t84263*t84176*t84268*t84269*(2.0E1/9.0)+C_k*a_3*t84270* \
               t84263*t84274*t84176*(1.0E1/3.0)-C_k*a_4*t84271*t84263*t84176*t84276*(4.0E1/9.0)+C_k*a_5*t84271*t84263* \
               t84176*t84276*(5.0E1/9.0)-C_k*a_8*t84280*t84263*t84272*t84176*(8.0E1/9.0)+C_k*a_9*t84280*t84263*t84272* \
               t84176*1.0E1-C_k*a_10*t84270*t84263*t84272*t84273*t84176*(1.0E2/9.0)+C_k*a_11*t84270*t84263*t84272* \
               t84273*t84176*(1.1E2/9.0)+C_k*a_10*t84263*t84272*t84281*t84176*t84268*(1.0E2/9.0)-C_k*a_3*t84270*t84263* \
               t84176*t84275*t84268*(1.0E1/3.0)+C_k*a_4*t84270*t84263*t84176*t84275*t84268*(4.0E1/9.0)-C_k*a_5*t84271* \
               t84263*t84176*t84268*t84277*(5.0E1/9.0)-C_k*a_6*t84270*t84271*t84263*t84176*t84278*(2.0E1/3.0)+C_k* \
               a_6*t84271*t84263*t84176*t84268*t84277*(2.0E1/3.0)+C_k*a_7*t84270*t84271*t84263*t84176*t84278*(7.0E1/ \
               9.0)-C_k*a_9*t84263*t84272*t84281*t84176*t84268*1.0E1+a_10*t84270*t84272*t84290*t84292*t84288*t84289* \
               (2.75E3/9.0)-a_11*t84270*t84272*t84290*t84292*t84288*t84289*(6.05E3/9.0)-a_10*t84272*t84290*t84273* \
               t84268*t84288*t84289*(5.0E3/9.0)+a_11*t84272*t84290*t84273*t84268*t84288*t84289*(2.75E3/9.0)+a_3*t84270* \
               t84290*t84276*t84268*t84288*t84289*(1.0E2/3.0)-a_4*t84270*t84290*t84276*t84268*t84288*t84289*(8.0E2/ \
               9.0)+a_5*t84270*t84290*t84276*t84268*t84288*t84289*(5.0E2/9.0)+a_5*t84271*t84290*t84268*t84278*t84288* \
               t84289*(2.5E2/3.0)+a_6*t84270*t84271*t84290*t84279*t84288*t84289*(3.5E2/3.0)-a_6*t84271*t84290*t84268* \
               t84278*t84288*t84289*2.0E2-a_7*t84270*t84271*t84290*t84279*t84288*t84289*(2.45E3/9.0)+a_7*t84271*t84290* \
               t84268*t84278*t84288*t84289*(3.5E2/3.0)+a_8*t84270*t84271*t84290*t84279*t84288*t84289*(1.4E3/9.0)+ \
               a_9*t84272*t84290*t84273*t84268*t84288*t84289*2.5E2+a_11*t84270*t84272*t84290*1.0/pow(t84267,1.3E1) \
               *t84268*t84288*t84289*(1.1E3/3.0)-C_k*a_11*t84270*t84263*t84272*t84292*t84176*t84268*(1.1E2/9.0)-C_k* \
               a_7*t84270*t84271*t84263*t84176*t84268*t84279*(7.0E1/9.0)+C_k*a_8*t84270*t84271*t84263*t84176*t84268* \
               t84279*(8.0E1/9.0)+a_7*t84270*t84271*t84280*t84290*t84268*t84288*t84289*(1.4E3/9.0)-a_8*t84270*t84271* \
               t84280*t84290*t84268*t84288*t84289*(3.2E3/9.0)+a_9*t84270*t84271*t84280*t84290*t84268*t84288*t84289* \
               2.0E2)-kp*t84308*t84309*t84296*2.0-kp*rho_a[index]*t84308*1.0/(t84285*t84285*t84285)*(t84296*t84296) \
               *2.0-kp*rho_a[index]*t84321*t84309*t84296*2.0+kp*rho_a[index]*t84308*t84309*(gamma_aa[index]*mu_*t84145* \
               t84262*t84282*t84283*(1.0E1/9.0)+gamma_aa[index]*mu_*t84282*t84283*t84158*t84293*(4.0/3.0)+gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t84142*t84282*t84283*(3.0/2.0)))+(rho_a[index]* \
               t84394*2.0-c0p*rho_a[index]*t84154*t84164*4.0)*(t84381+t84390+t84384+t84387-ccab1*t84211*t84261*t84165* \
               t84166*(3.2E1/9.0)+ccab2*t84211*t84209*t84165*t84166*(3.2E1/9.0)-ccab2*t84232*t84228*t84167*t84168* \
               (3.2E1/9.0)+ccab4*t84228*t84167*t84168*t84197*(6.4E1/3.0)-ccab2*t84214*t84232*t84215*t84165*t84166* \
               (1.6E1/3.0)-ccab4*t84212*t84223*t84229*t84167*t84168*(3.2E1/3.0)-ccab4*t84229*t84167*t84168*t84169* \
               (t84211*t84165*t84166*(6.4E1/3.0)+t84228*t84167*t84168*(6.4E1/3.0)+gamma_aa[index]*gcab*t84210*t84165* \
               t84166*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t84210*t84205*t84165*t84166*(3.2E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t84171*t84218*t84165*t84166*(t84211*t84165*t84166*(3.2E1/3.0)+gamma_aa[index]*gcab*t84210*t84165* \
               t84166*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t84222*t84216*t84218*t84165*t84166*8.0)+t84326*(t84377+ \
               rho_a[index]*(t84334+t84352+t84338-t84152*t84162*t84154*t84335*2.0-a1p*c*c0p*t84146*t84164*(8.0/9.0) \
               -Aa*t84351*t84262*t84175*t84339*t84349*(4.0/9.0))*2.0-t84152*t84154*t84163*t84156*2.0)+t84403*t84443* \
               (-t84258+t84376+t84235*t84175*t84391)*2.0+t84403*t84465*t84394*2.0-rho_a[index]*t84403*t84394*(ccaa1* \
               gamma_aa[index]*gcaa*t84412*t84217*(8.8E1/9.0)+ccaa2*t84211*t84421*t84165*t84392*(3.04E2/9.0)-ccaa1* \
               t84211*t84423*t84165*t84392*2.4E1+ccaa4*t84228*t84409*t84167*t84393*(1.12E3/9.0)-ccaa2*t84214*t84431* \
               t84165*t84392*t84438*(3.2E1/3.0)-ccaa4*t84223*t84167*t84428*t84437*t84393*(6.4E1/3.0)-ccaa2*t84172* \
               t84165*t84392*t84438*(gamma_aa[index]*gcaa*t84217*(1.76E2/9.0)+t84211*t84165*t84392*(3.04E2/9.0))- \
               ccaa4*t84167*t84437*t84393*t84169*(gamma_aa[index]*gcaa*t84217*(3.52E2/9.0)+t84211*t84165*t84392*(6.08E2/ \
               3.0)+t84228*t84167*t84393*(1.12E3/9.0)+gamma_aa[index]*gcaa*t84210*t84165*t84392*2.88E2)+ccaa2*1.0/ \
               (t84420*t84420*t84420)*(t84431*t84431)*t84172*t84165*t84392*2.0+ccaa4*1.0/(t84408*t84408*t84408)*t84167* \
               (t84428*t84428)*t84393*t84169*2.0+ccaa3*gamma_aa[index]*gcaa*t84210*t84165*t84417*t84392*7.2E1+ccaa1* \
               gamma_aa[index]*gcaa*t84210*1.0/(t84411*t84411*t84411)*t84165*t84392*(1.28E2/9.0)+ccaa3*gamma_aa[index]* \
               gcaa*t84171*1.0/(t84416*t84416*t84416)*t84165*(t84435*t84435)*t84392*2.0-ccaa3*gamma_aa[index]*gcaa* \
               t84171*t84165*t84436*t84392*(gamma_aa[index]*gcaa*t84217*(8.8E1/3.0)+t84211*t84165*t84392*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t84210*t84165*t84392*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t84216*t84165*t84435* \
               t84436*t84392*1.6E1)+rho_a[index]*t84403*t84443*(t84453-t84365-t84374+t84457+t84459+t84235*t84175* \
               (t84451-t84453+t84365+t84374+t84456-t84457+t84458-t84459-t84353*t84362*t84237*t84444*2.0-a1f*c*c0f* \
               t84250*t84360*(8.0/9.0)))+rho_a[index]*t84403*t84465*t84468*2.0-gamma_aa[index]*t84263*t84443*t84396* \
               t84468*t84398*(1.0/4.0)+gamma_aa[index]*t84263*t84465*t84394*t84396*t84398*(1.0/4.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t84474 = 1.0/(k*k);
                double t84475 = 1.0/kp;
                double t84476 = rho_a[index]*2.0;
                double t84477 = 1.0/(rho_a[index]*rho_a[index]);
                double t84478 = 1.0/pow(t84476,2.0/3.0);
                double t84479 = pow(rho_a[index],5.0/3.0);
                double t84480 = 1.0/tau_a[index];
                double t84481 = C_k*t84480*t84479;
                double t84482 = t84481-1.0;
                double t84483 = t84482*t84482;
                double t84484 = t84483*t84483;
                double t84485 = t84484*t84484;
                double t84486 = t84481+1.0;
                double t84487 = gamma_aa[index]*mu_*t84474*t84475*t84477*t84478*(1.0/4.0);
                double t84488 = t84487+1.0;
                double t84489 = 1.0/(t84488*t84488);
                double t84490 = 1.0/t84486;
                double t84491 = a_1*t84490*t84482;
                double t84492 = 1.0/pow(t84486,1.0E1);
                double t84493 = a_10*t84483*t84492*t84485;
                double t84494 = 1.0/pow(t84486,1.1E1);
                double t84495 = a_11*t84482*t84483*t84485*t84494;
                double t84496 = 1.0/(t84486*t84486);
                double t84497 = a_2*t84483*t84496;
                double t84498 = 1.0/(t84486*t84486*t84486);
                double t84499 = a_3*t84482*t84483*t84498;
                double t84500 = 1.0/(t84486*t84486*t84486*t84486);
                double t84501 = a_4*t84500*t84484;
                double t84502 = 1.0/(t84486*t84486*t84486*t84486*t84486);
                double t84503 = a_5*t84502*t84482*t84484;
                double t84504 = 1.0/(t84486*t84486*t84486*t84486*t84486*t84486);
                double t84505 = a_6*t84504*t84483*t84484;
                double t84506 = 1.0/(t84486*t84486*t84486*t84486*t84486*t84486*t84486);
                double t84507 = a_7*t84506*t84482*t84483*t84484;
                double t84508 = 1.0/(t84486*t84486*t84486*t84486*t84486*t84486*t84486*t84486);
                double t84509 = a_8*t84508*t84485;
                double t84510 = 1.0/(t84486*t84486*t84486*t84486*t84486*t84486*t84486*t84486*t84486);
                double t84511 = a_9*t84510*t84482*t84485;
                double t84512 = t84501+t84511+t84503+t84505+t84507+t84491+t84509+t84493+t84495+t84497+t84499+1.0;
                double t84513 = pow(rho_a[index],2.0/3.0);
                double t84514 = 1.0/rho_a[index];
                double t84515 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t84516 = 1.0/pow(t84476,5.0/3.0);
                double t84517 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84518 = c*t84517;
                double t84519 = sqrt(t84518);
                double t84520 = pow(t84518,3.0/2.0);
                double t84521 = c*c;
                double t84522 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84523 = 1.0/c0p;
                double t84524 = b1p*t84519;
                double t84525 = b3p*t84520;
                double t84526 = b4p*t84521*t84522;
                double t84527 = b2p*c*t84517;
                double t84528 = t84524+t84525+t84526+t84527;
                double t84529 = 1.0/t84528;
                double t84530 = t84523*t84529*(1.0/2.0);
                double t84531 = t84530+1.0;
                double t84532 = log(t84531);
                double t84533 = a1p*c*t84517;
                double t84534 = t84533+1.0;
                double t84535 = 1.0/pow(t84476,1.0/3.0);
                double t84536 = c*t84535;
                double t84537 = gamma_aa[index]*gamma_aa[index];
                double t84538 = gcab*gcab;
                double t84539 = t84538*t84538;
                double t84540 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84541 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t84542 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84543 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t84544 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t84545 = gamma_aa[index]*gcab*t84540*2.0;
                double t84546 = t84541*t84537*t84538;
                double t84547 = t84545+t84546+1.0;
                double t84548 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t84549 = gamma_aa[index]*gcab*t84540;
                double t84550 = t84549+1.0;
                double t84551 = gamma_aa[index]*gcab*t84540*3.0;
                double t84552 = gamma_aa[index]*gcab*t84542*t84537*t84538;
                double t84553 = t84541*t84537*t84538*3.0;
                double t84554 = t84551+t84552+t84553+1.0;
                double t84555 = t84537*t84537;
                double t84556 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84557 = gamma_aa[index]*gcab*t84540*4.0;
                double t84558 = gamma_aa[index]*gcab*t84542*t84537*t84538*4.0;
                double t84559 = t84541*t84537*t84538*6.0;
                double t84560 = t84555*t84556*t84539;
                double t84561 = t84560+t84557+t84558+t84559+1.0;
                double t84562 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t84563 = 1.0/(t84547*t84547);
                double t84564 = 1.0/(t84554*t84554);
                double t84565 = 1.0/(t84561*t84561);
                double t84566 = gamma_aa[index]*gcab*t84562*(8.0/3.0);
                double t84567 = t84543*t84537*t84538*(8.0/3.0);
                double t84568 = t84566+t84567;
                double t84569 = gcab*t84540;
                double t84570 = gamma_aa[index]*t84541*t84538;
                double t84571 = t84570+t84569;
                double t84572 = gcab*t84540*(3.0/2.0);
                double t84573 = gamma_aa[index]*t84541*t84538*3.0;
                double t84574 = gcab*t84542*t84537*t84538*(3.0/2.0);
                double t84575 = t84572+t84573+t84574;
                double t84576 = gamma_aa[index]*gcab*t84562*4.0;
                double t84577 = gamma_aa[index]*gcab*t84537*t84538*t84548*4.0;
                double t84578 = t84543*t84537*t84538*8.0;
                double t84579 = t84576+t84577+t84578;
                double t84580 = gamma_aa[index]*gcab*t84562*(1.6E1/3.0);
                double t84581 = gamma_aa[index]*gcab*t84537*t84538*t84548*1.6E1;
                double t84582 = t84543*t84537*t84538*1.6E1;
                double t84583 = t84544*t84555*t84539*(1.6E1/3.0);
                double t84584 = t84580+t84581+t84582+t84583;
                double t84585 = gcab*t84540*2.0;
                double t84586 = gamma_aa[index]*t84541*t84538*6.0;
                double t84587 = gcab*t84542*t84537*t84538*6.0;
                double t84588 = gamma_aa[index]*t84537*t84556*t84539*2.0;
                double t84589 = t84585+t84586+t84587+t84588;
                double t84590 = pow(2.0,1.0/3.0);
                double t84591 = t84590*2.0;
                double t84592 = t84591-2.0;
                double t84593 = two_13*2.0;
                double t84594 = t84593-2.0;
                double t84595 = 1.0/t84594;
                double t84596 = 1.0/c0f;
                double t84597 = b1f*t84519;
                double t84598 = b3f*t84520;
                double t84599 = b4f*t84521*t84522;
                double t84600 = b2f*c*t84517;
                double t84601 = t84600+t84597+t84598+t84599;
                double t84602 = 1.0/t84601;
                double t84603 = t84602*t84596*(1.0/2.0);
                double t84604 = t84603+1.0;
                double t84605 = log(t84604);
                double t84606 = a1f*c*t84517;
                double t84607 = t84606+1.0;
                double t84608 = c0f*t84605*t84607*2.0;
                double t84609 = c0p*t84532*t84534*2.0;
                double t84610 = sqrt(t84536);
                double t84611 = b1p*t84610;
                double t84612 = pow(t84536,3.0/2.0);
                double t84613 = b3p*t84612;
                double t84614 = b2p*c*t84535;
                double t84615 = b4p*t84521*t84478;
                double t84616 = t84611+t84613+t84614+t84615;
                double t84617 = 1.0/t84616;
                double t84618 = t84523*t84617*(1.0/2.0);
                double t84619 = t84618+1.0;
                double t84620 = log(t84619);
                double t84621 = a1p*c*t84535;
                double t84622 = t84621+1.0;
                double t84623 = 1.0/t84561;
                double t84624 = 1.0/t84547;
                double t84625 = 1.0/t84554;
                double t84626 = 1.0/(t84550*t84550);
                double t84627 = 1.0/(t84550*t84550*t84550);
                double t84628 = ccab3*gcab*t84542*t84537*t84564*t84538*t84579*(3.0/2.0);
                double t84629 = ccab2*gamma_aa[index]*t84541*t84563*t84538*t84568;
                double t84630 = ccab3*gamma_aa[index]*gcab*t84537*t84564*t84538*t84548*t84575*4.0;
                double t84631 = ccab4*gamma_aa[index]*t84537*t84556*t84565*t84539*t84584*2.0;
                double t84632 = ccab4*t84544*t84555*t84565*t84539*t84589*(1.6E1/3.0);
                double t84633 = ccab2*t84543*t84571*t84563*t84537*t84538*(8.0/3.0);
                double t84634 = gamma_aa[index]*t84543*t84538*4.0;
                double t84635 = 1.0/(t84547*t84547*t84547);
                double t84636 = 1.0/(t84554*t84554*t84554);
                double t84637 = 1.0/(t84561*t84561*t84561);
                double t84638 = 1.0/pow(t84476,4.0/3.0);
                double t84639 = 1.0/pow(rho_a[index],4.0/3.0);
                double t84640 = 1.0/pow(rho_a[index],5.0/3.0);
                double t84641 = 1.0/sqrt(t84518);
                double t84642 = 1.0/t84531;
                double t84643 = 1.0/(t84528*t84528);
                double t84644 = b4p*t84521*t84640*(2.0/3.0);
                double t84645 = b2p*c*t84639*(1.0/3.0);
                double t84646 = b1p*c*t84641*t84639*(1.0/6.0);
                double t84647 = b3p*c*t84519*t84639*(1.0/2.0);
                double t84648 = t84644+t84645+t84646+t84647;
                double t84649 = t84534*t84642*t84643*t84648;
                double t84650 = t84608-t84609;
                double t84651 = t84650*t84592*t84595;
                double t84652 = 1.0/t84550;
                double t84653 = t84651+t84609;
                double t84654 = gcaa*gcaa;
                double t84655 = t84654*t84654;
                double t84656 = gamma_aa[index]*gcaa*t84540;
                double t84657 = t84656+1.0;
                double t84658 = gamma_aa[index]*gcaa*t84540*3.0;
                double t84659 = gamma_aa[index]*gcaa*t84542*t84537*t84654;
                double t84660 = t84541*t84537*t84654*3.0;
                double t84661 = t84660+t84658+t84659+1.0;
                double t84662 = gamma_aa[index]*gcaa*t84540*4.0;
                double t84663 = gamma_aa[index]*gcaa*t84542*t84537*t84654*4.0;
                double t84664 = t84541*t84537*t84654*6.0;
                double t84665 = t84555*t84556*t84655;
                double t84666 = t84662+t84663+t84664+t84665+1.0;
                double t84667 = gamma_aa[index]*gcaa*t84540*2.0;
                double t84668 = t84541*t84537*t84654;
                double t84669 = t84667+t84668+1.0;
                double t84670 = tau_a[index]-1.0/1.0E20;
                double t84671 = ( (t84670 > 0.0) ?  1.0 : 0.0 ) ;
                double t84672 = tau_a[index]*2.0;
                double t84710 = gamma_aa[index]*t84514*(1.0/4.0);
                double t84673 = -t84710+t84672;
                double t84674 = t84480*t84673*(1.0/2.0);
                double t84675 = t84674-1.0;
                double t84676 = t84671*t84675;
                double t84677 = t84676+1.0;
                double t84678 = 1.0/t84657;
                double t84679 = 1.0/t84666;
                double t84680 = 1.0/t84669;
                double t84681 = 1.0/t84661;
                double t84682 = 1.0/(t84657*t84657);
                double t84683 = 1.0/(t84661*t84661);
                double t84684 = 1.0/(t84669*t84669);
                double t84685 = gcaa*t84540*3.0;
                double t84686 = gamma_aa[index]*t84541*t84654*6.0;
                double t84687 = gcaa*t84542*t84537*t84654*3.0;
                double t84688 = t84685+t84686+t84687;
                double t84689 = 1.0/(t84666*t84666);
                double t84690 = gcaa*t84540*4.0;
                double t84691 = gamma_aa[index]*t84541*t84654*1.2E1;
                double t84692 = gcaa*t84542*t84537*t84654*1.2E1;
                double t84693 = gamma_aa[index]*t84537*t84556*t84655*4.0;
                double t84694 = t84690+t84691+t84692+t84693;
                double t84695 = gcaa*t84540*2.0;
                double t84696 = gamma_aa[index]*t84541*t84654*2.0;
                double t84697 = t84695+t84696;
                double t84698 = gamma_aa[index]*gcaa*t84562*(1.6E1/3.0);
                double t84699 = t84543*t84537*t84654*(1.6E1/3.0);
                double t84700 = t84698+t84699;
                double t84701 = gamma_aa[index]*gcaa*t84562*8.0;
                double t84702 = gamma_aa[index]*gcaa*t84537*t84654*t84548*8.0;
                double t84703 = t84543*t84537*t84654*1.6E1;
                double t84704 = t84701+t84702+t84703;
                double t84705 = gamma_aa[index]*gcaa*t84562*(3.2E1/3.0);
                double t84706 = gamma_aa[index]*gcaa*t84537*t84654*t84548*3.2E1;
                double t84707 = t84543*t84537*t84654*3.2E1;
                double t84708 = t84544*t84555*t84655*(3.2E1/3.0);
                double t84709 = t84705+t84706+t84707+t84708;
                double t84711 = 1.0/t84604;
                double t84712 = 1.0/(t84601*t84601);
                double t84713 = b4f*t84521*t84640*(2.0/3.0);
                double t84714 = b2f*c*t84639*(1.0/3.0);
                double t84715 = b1f*c*t84641*t84639*(1.0/6.0);
                double t84716 = b3f*c*t84519*t84639*(1.0/2.0);
                double t84717 = t84713+t84714+t84715+t84716;
                double t84718 = a1f*c*c0f*t84605*t84639*(2.0/3.0);
                double t84719 = a1p*c*c0p*t84532*t84639*(2.0/3.0);
                double t84720 = ccaa1*gcaa*t84540*t84678;
                double t84721 = ccaa4*gamma_aa[index]*t84537*t84556*t84655*t84679*4.0;
                double t84722 = ccaa2*gamma_aa[index]*t84541*t84680*t84654*2.0;
                double t84723 = ccaa3*gcaa*t84542*t84537*t84654*t84681*3.0;
                double t84728 = ccaa1*gamma_aa[index]*t84541*t84654*t84682;
                double t84729 = ccaa3*gamma_aa[index]*gcaa*t84542*t84537*t84654*t84683*t84688;
                double t84730 = ccaa4*t84555*t84556*t84655*t84694*t84689;
                double t84731 = ccaa2*t84541*t84537*t84654*t84684*t84697;
                double t84724 = t84720+t84721-t84730+t84722-t84731+t84723-t84728-t84729;
                double t84725 = t84718-t84719+t84649-t84711*t84712*t84607*t84717;
                double t84726 = t84725*t84592*t84595;
                double t84727 = t84726+t84719-t84649;
                v_rho_a_gamma_aa_[index] = (rho_a[index]*t84653*2.0-c0p*rho_a[index]*t84620*t84622*4.0)*(t84630+t84631+ \
                   t84632+t84633+t84628+t84629-ccab1*gcab*t84562*t84652*(4.0/3.0)-ccab2*gamma_aa[index]*t84543*t84624* \
                   t84538*4.0+ccab1*gamma_aa[index]*t84543*t84626*t84538*(8.0/3.0)+ccab4*t84555*t84556*t84565*t84539* \
                   (gcab*t84562*(1.6E1/3.0)+gamma_aa[index]*t84543*t84538*2.4E1+gamma_aa[index]*t84544*t84537*t84539* \
                   (4.0E1/3.0)+gcab*t84537*t84538*t84548*3.2E1)+ccab2*t84541*t84563*t84537*t84538*(t84634+gcab*t84562* \
                   (8.0/3.0))-ccab4*gamma_aa[index]*t84623*t84544*t84537*t84539*(4.0E1/3.0)-ccab1*gcab*t84537*t84627* \
                   t84538*t84548*(4.0/3.0)-ccab3*gcab*t84625*t84537*t84538*t84548*8.0-ccab2*t84541*t84571*t84635*t84537* \
                   t84538*t84568*2.0-ccab4*t84555*t84556*t84637*t84539*t84584*t84589*2.0+ccab3*gamma_aa[index]*gcab*t84542* \
                   t84537*t84564*t84538*(gcab*t84562*4.0+gamma_aa[index]*t84543*t84538*1.2E1+gcab*t84537*t84538*t84548* \
                   8.0)-ccab3*gamma_aa[index]*gcab*t84542*t84537*t84636*t84538*t84575*t84579*2.0)-(-t84651-t84609+rho_a[index]* \
                   ((t84622*1.0/(t84616*t84616)*(b2p*c*t84638*(1.0/3.0)+b4p*t84521*t84516*(2.0/3.0)+b3p*c*t84610*t84638* \
                   (1.0/2.0)+b1p*c*1.0/sqrt(t84536)*t84638*(1.0/6.0)))/t84619-a1p*c*c0p*t84620*t84638*(2.0/3.0))*2.0+ \
                   rho_a[index]*(t84719-t84649+t84592*t84595*(t84718+t84649-t84711*t84712*t84607*t84717-a1p*c*c0p*t84532* \
                   t84639*(2.0/3.0)))+c0p*t84620*t84622*2.0)*(ccab1*gcab*t84540*t84652*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t84541*t84624*t84538-ccab1*gamma_aa[index]*t84541*t84626*t84538*(1.0/2.0)-ccab2*t84541*t84571*t84563* \
                   t84537*t84538-ccab4*t84555*t84556*t84565*t84539*t84589+ccab4*gamma_aa[index]*t84623*t84537*t84556* \
                   t84539*2.0+ccab3*gcab*t84542*t84625*t84537*t84538*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t84542*t84537* \
                   t84564*t84538*t84575)*2.0-(X-1.0)*(-kp*rho_a[index]*t84512*t84489*(mu_*t84515*t84474*t84475*t84478* \
                   (1.0/2.0)+mu_*t84516*t84474*t84475*t84477*(1.0/3.0))+mu_*t84512*t84474*t84477*t84478*t84489*(1.0/4.0) \
                   +mu_*t84514*t84474*t84478*t84489*(C_k*a_1*t84513*t84480*t84490*(5.0/3.0)-C_k*a_1*t84513*t84480*t84482* \
                   t84496*(5.0/3.0)+C_k*a_2*t84513*t84480*t84482*t84496*(1.0E1/3.0)-C_k*a_2*t84513*t84480*t84483*t84498* \
                   (1.0E1/3.0)+C_k*a_3*t84513*t84480*t84483*t84498*5.0-C_k*a_4*t84502*t84513*t84480*t84484*(2.0E1/3.0) \
                   +C_k*a_5*t84502*t84513*t84480*t84484*(2.5E1/3.0)-C_k*a_8*t84510*t84513*t84480*t84485*(4.0E1/3.0)+C_k* \
                   a_9*t84510*t84513*t84480*t84485*1.5E1+C_k*a_10*t84513*t84480*t84482*t84492*t84485*(5.0E1/3.0)-C_k* \
                   a_10*t84513*t84480*t84483*t84485*t84494*(5.0E1/3.0)+C_k*a_11*t84513*t84480*t84483*t84485*t84494*(5.5E1/ \
                   3.0)-C_k*a_3*t84500*t84513*t84480*t84482*t84483*5.0+C_k*a_4*t84500*t84513*t84480*t84482*t84483*(2.0E1/ \
                   3.0)-C_k*a_5*t84504*t84513*t84480*t84482*t84484*(2.5E1/3.0)+C_k*a_6*t84504*t84513*t84480*t84482*t84484* \
                   1.0E1-C_k*a_6*t84513*t84506*t84480*t84483*t84484*1.0E1+C_k*a_7*t84513*t84506*t84480*t84483*t84484* \
                   (3.5E1/3.0)-C_k*a_9*t84513*t84480*t84482*t84492*t84485*1.5E1-C_k*a_11*t84513*t84480*t84482*t84483* \
                   t84485*1.0/pow(t84486,1.2E1)*(5.5E1/3.0)-C_k*a_7*t84513*t84480*t84508*t84482*t84483*t84484*(3.5E1/ \
                   3.0)+C_k*a_8*t84513*t84480*t84508*t84482*t84483*t84484*(4.0E1/3.0))*(1.0/4.0)+mu_*t84512*t84514*t84474* \
                   t84478*1.0/(t84488*t84488*t84488)*(gamma_aa[index]*mu_*t84515*t84474*t84475*t84478*(1.0/2.0)+gamma_aa[index]* \
                   mu_*t84516*t84474*t84475*t84477*(1.0/3.0))*(1.0/2.0))+(rho_a[index]*(t84609+t84592*t84595*(t84608- \
                   c0p*t84532*t84534*2.0))*2.0-c0p*rho_a[index]*t84620*t84622*4.0)*(t84630+t84631+t84632+t84633+t84628+ \
                   t84629-ccab2*gamma_aa[index]*t84543*t84624*t84538*(4.0/3.0)+ccab1*gamma_aa[index]*t84543*t84626*t84538* \
                   (4.0/3.0)+ccab4*t84555*t84556*t84565*t84539*(gamma_aa[index]*t84543*t84538*8.0+gamma_aa[index]*t84544* \
                   t84537*t84539*8.0+gcab*t84537*t84538*t84548*1.6E1)-ccab4*gamma_aa[index]*t84623*t84544*t84537*t84539* \
                   8.0+ccab2*gamma_aa[index]*t84544*t84563*t84537*t84539*(4.0/3.0)-ccab1*gcab*t84537*t84627*t84538*t84548* \
                   (4.0/3.0)-ccab3*gcab*t84625*t84537*t84538*t84548*4.0-ccab2*t84541*t84571*t84635*t84537*t84538*t84568* \
                   2.0-ccab4*t84555*t84556*t84637*t84539*t84584*t84589*2.0+ccab3*gamma_aa[index]*gcab*t84542*t84537*t84564* \
                   t84538*(t84634+gcab*t84537*t84538*t84548*4.0)-ccab3*gamma_aa[index]*gcab*t84542*t84537*t84636*t84538* \
                   t84575*t84579*2.0)-t84724*t84653*t84677+rho_a[index]*t84724*t84727*t84677-rho_a[index]*t84653*t84677* \
                   (ccaa1*gcaa*t84562*t84678*(-8.0/3.0)-ccaa2*gamma_aa[index]*t84543*t84680*t84654*(3.2E1/3.0)+ccaa1* \
                   gamma_aa[index]*t84543*t84654*t84682*8.0+ccaa2*t84543*t84537*t84654*t84684*t84697*(1.6E1/3.0)+ccaa4* \
                   t84544*t84555*t84655*t84694*t84689*(3.2E1/3.0)+ccaa4*t84555*t84556*t84655*t84689*(gcaa*t84562*(3.2E1/ \
                   3.0)+gamma_aa[index]*t84543*t84654*6.4E1+gamma_aa[index]*t84544*t84537*t84655*(1.28E2/3.0)+gcaa*t84537* \
                   t84654*t84548*9.6E1)-ccaa1*gcaa*t84537*t84654*t84548*1.0/(t84657*t84657*t84657)*(1.6E1/3.0)+ccaa2* \
                   t84541*t84537*t84654*t84684*(gcaa*t84562*(1.6E1/3.0)+gamma_aa[index]*t84543*t84654*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t84700*t84541*t84654*t84684*2.0-ccaa4*gamma_aa[index]*t84544*t84537*t84655*t84679* \
                   (1.28E2/3.0)-ccaa3*gcaa*t84537*t84654*t84681*t84548*2.4E1+ccaa4*gamma_aa[index]*t84537*t84556*t84655* \
                   t84709*t84689*4.0+ccaa3*gcaa*t84542*t84704*t84537*t84654*t84683*3.0-ccaa2*t84700*t84541*t84537*t84654* \
                   1.0/(t84669*t84669*t84669)*t84697*2.0-ccaa4*t84555*t84556*t84655*t84709*1.0/(t84666*t84666*t84666) \
                   *t84694*2.0+ccaa3*gamma_aa[index]*gcaa*t84542*t84537*t84654*t84683*(gcaa*t84562*8.0+gamma_aa[index]* \
                   t84543*t84654*3.2E1+gcaa*t84537*t84654*t84548*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t84537*t84654*t84548* \
                   t84683*t84688*8.0-ccaa3*gamma_aa[index]*gcaa*t84542*t84704*1.0/(t84661*t84661*t84661)*t84537*t84654* \
                   t84688*2.0)-t84480*t84671*t84727*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t84540*t84678+ccaa2*t84541*t84680* \
                   t84537*t84654+ccaa4*t84555*t84556*t84655*t84679+ccaa3*gamma_aa[index]*gcaa*t84542*t84537*t84654*t84681) \
                   *(1.0/8.0)-t84480*t84653*t84671*(ccaa1*gamma_aa[index]*gcaa*t84562*t84678*(8.0/3.0)+ccaa2*t84543*t84680* \
                   t84537*t84654*(1.6E1/3.0)-ccaa1*t84543*t84537*t84654*t84682*(8.0/3.0)+ccaa4*t84544*t84555*t84655*t84679* \
                   (3.2E1/3.0)-ccaa2*t84700*t84541*t84537*t84654*t84684-ccaa4*t84555*t84556*t84655*t84709*t84689+ccaa3* \
                   gamma_aa[index]*gcaa*t84537*t84654*t84681*t84548*8.0-ccaa3*gamma_aa[index]*gcaa*t84542*t84704*t84537* \
                   t84654*t84683)*(1.0/8.0)-gamma_aa[index]*t84514*t84480*t84724*t84653*t84671*(1.0/8.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t84733 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84734 = c*t84733;
                double t84735 = sqrt(t84734);
                double t84736 = pow(t84734,3.0/2.0);
                double t84737 = c*c;
                double t84738 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84739 = 1.0/c0p;
                double t84740 = b1p*t84735;
                double t84741 = b3p*t84736;
                double t84742 = b4p*t84737*t84738;
                double t84743 = b2p*c*t84733;
                double t84744 = t84740+t84741+t84742+t84743;
                double t84745 = 1.0/t84744;
                double t84746 = t84745*t84739*(1.0/2.0);
                double t84747 = t84746+1.0;
                double t84748 = log(t84747);
                double t84749 = a1p*c*t84733;
                double t84750 = t84749+1.0;
                double t84751 = rho_a[index]*2.0;
                double t84752 = 1.0/pow(t84751,1.0/3.0);
                double t84753 = c*t84752;
                double t84754 = gcab*gcab;
                double t84755 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t84756 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84757 = gamma_aa[index]*gamma_aa[index];
                double t84758 = t84754*t84754;
                double t84759 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84760 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84761 = gamma_aa[index]*gcab*t84756;
                double t84762 = t84761+1.0;
                double t84763 = gamma_aa[index]*gcab*t84756*2.0;
                double t84764 = t84754*t84755*t84757;
                double t84765 = t84763+t84764+1.0;
                double t84766 = gamma_aa[index]*gcab*t84756*3.0;
                double t84767 = gamma_aa[index]*gcab*t84760*t84754*t84757;
                double t84768 = t84754*t84755*t84757*3.0;
                double t84769 = t84766+t84767+t84768+1.0;
                double t84770 = t84757*t84757;
                double t84786 = gcab*t84756*2.0;
                double t84787 = gamma_aa[index]*t84754*t84755*6.0;
                double t84788 = gcab*t84760*t84754*t84757*6.0;
                double t84789 = gamma_aa[index]*t84757*t84758*t84759*2.0;
                double t84771 = t84786+t84787+t84788+t84789;
                double t84772 = gamma_aa[index]*gcab*t84756*4.0;
                double t84773 = gamma_aa[index]*gcab*t84760*t84754*t84757*4.0;
                double t84774 = t84754*t84755*t84757*6.0;
                double t84775 = t84770*t84758*t84759;
                double t84776 = t84772+t84773+t84774+t84775+1.0;
                double t84779 = gcab*t84756;
                double t84780 = gamma_aa[index]*t84754*t84755;
                double t84777 = t84780+t84779;
                double t84778 = 1.0/(t84769*t84769);
                double t84781 = 1.0/(t84765*t84765);
                double t84782 = gcab*t84756*(3.0/2.0);
                double t84783 = gamma_aa[index]*t84754*t84755*3.0;
                double t84784 = gcab*t84760*t84754*t84757*(3.0/2.0);
                double t84785 = t84782+t84783+t84784;
                double t84790 = 1.0/(t84776*t84776);
                double t84791 = pow(2.0,1.0/3.0);
                double t84792 = t84791*2.0;
                double t84793 = t84792-2.0;
                double t84794 = two_13*2.0;
                double t84795 = t84794-2.0;
                double t84796 = 1.0/t84795;
                double t84797 = 1.0/c0f;
                double t84798 = b1f*t84735;
                double t84799 = b3f*t84736;
                double t84800 = b4f*t84737*t84738;
                double t84801 = b2f*c*t84733;
                double t84802 = t84800+t84801+t84798+t84799;
                double t84803 = 1.0/t84802;
                double t84804 = t84803*t84797*(1.0/2.0);
                double t84805 = t84804+1.0;
                double t84806 = log(t84805);
                double t84807 = a1f*c*t84733;
                double t84808 = t84807+1.0;
                double t84809 = c0f*t84806*t84808*2.0;
                double t84810 = c0p*t84750*t84748*2.0;
                double t84811 = gcaa*gcaa;
                double t84812 = t84811*t84811;
                double t84813 = gamma_aa[index]*gcaa*t84756;
                double t84814 = t84813+1.0;
                double t84815 = gamma_aa[index]*gcaa*t84756*2.0;
                double t84816 = t84811*t84755*t84757;
                double t84817 = t84815+t84816+1.0;
                double t84818 = gamma_aa[index]*gcaa*t84756*3.0;
                double t84819 = gamma_aa[index]*gcaa*t84811*t84760*t84757;
                double t84820 = t84811*t84755*t84757*3.0;
                double t84821 = t84820+t84818+t84819+1.0;
                double t84837 = gcaa*t84756*4.0;
                double t84838 = gamma_aa[index]*t84811*t84755*1.2E1;
                double t84839 = gcaa*t84811*t84760*t84757*1.2E1;
                double t84840 = gamma_aa[index]*t84812*t84757*t84759*4.0;
                double t84822 = t84840+t84837+t84838+t84839;
                double t84823 = gamma_aa[index]*gcaa*t84756*4.0;
                double t84824 = gamma_aa[index]*gcaa*t84811*t84760*t84757*4.0;
                double t84825 = t84811*t84755*t84757*6.0;
                double t84826 = t84812*t84770*t84759;
                double t84827 = t84823+t84824+t84825+t84826+1.0;
                double t84830 = gcaa*t84756*2.0;
                double t84831 = gamma_aa[index]*t84811*t84755*2.0;
                double t84828 = t84830+t84831;
                double t84829 = 1.0/(t84821*t84821);
                double t84832 = 1.0/(t84817*t84817);
                double t84833 = gcaa*t84756*3.0;
                double t84834 = gamma_aa[index]*t84811*t84755*6.0;
                double t84835 = gcaa*t84811*t84760*t84757*3.0;
                double t84836 = t84833+t84834+t84835;
                double t84841 = 1.0/(t84827*t84827);
                double t84842 = 1.0/tau_a[index];
                double t84843 = tau_a[index]-1.0/1.0E20;
                double t84844 = ( (t84843 > 0.0) ?  1.0 : 0.0 ) ;
                double t84845 = t84810-t84809;
                double t84846 = t84810-t84845*t84793*t84796;
                double t84847 = 1.0/t84827;
                double t84848 = 1.0/t84817;
                double t84849 = 1.0/t84821;
                double t84850 = 1.0/(t84814*t84814);
                double t84851 = 1.0/kp;
                double t84852 = 1.0/pow(t84751,2.0/3.0);
                double t84853 = pow(rho_a[index],5.0/3.0);
                double t84854 = C_k*t84842*t84853;
                double t84855 = t84854-1.0;
                double t84856 = t84855*t84855;
                double t84857 = t84856*t84856;
                double t84858 = t84857*t84857;
                double t84859 = t84854+1.0;
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t84810+t84793*t84796*(t84809-c0p*t84750*t84748*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t84739*(1.0/2.0))/(b1p*sqrt(t84753)+b3p*pow(t84753,3.0/2.0)+b2p*c*t84752+ \
                   b4p*t84852*t84737)+1.0)*(a1p*c*t84752+1.0)*4.0)*(ccab1*1.0/(t84762*t84762)*t84754*t84755*(1.0/2.0) \
                   -(ccab2*t84754*t84755*(1.0/2.0))/t84765+ccab2*t84781*t84757*t84758*t84759*(1.0/2.0)-(ccab4*t84757* \
                   t84758*t84759*3.0)/t84776+ccab4*t84770*t84790*t84758*t84759*(t84754*t84755*3.0+t84757*t84758*t84759* \
                   3.0+gamma_aa[index]*gcab*t84760*t84754*6.0)-ccab1*gamma_aa[index]*gcab*t84760*1.0/(t84762*t84762*t84762) \
                   *t84754*(1.0/2.0)-(ccab3*gamma_aa[index]*gcab*t84760*t84754*(3.0/2.0))/t84769-ccab2*t84754*t84755* \
                   1.0/(t84765*t84765*t84765)*t84757*(t84777*t84777)*2.0-ccab4*t84770*(t84771*t84771)*t84758*1.0/(t84776* \
                   t84776*t84776)*t84759*2.0+ccab2*gamma_aa[index]*t84754*t84781*t84755*t84777*2.0+ccab4*gamma_aa[index]* \
                   t84771*t84790*t84757*t84758*t84759*4.0+ccab3*gcab*t84760*t84754*t84757*t84785*t84778*3.0+ccab3*gamma_aa[index]* \
                   gcab*t84760*t84754*t84757*t84778*(t84754*t84755*(3.0/2.0)+gamma_aa[index]*gcab*t84760*t84754*(3.0/ \
                   2.0))-ccab3*gamma_aa[index]*gcab*t84760*t84754*t84757*(t84785*t84785)*1.0/(t84769*t84769*t84769)*2.0) \
                   *-4.0+t84842*t84844*t84846*((ccaa1*gcaa*t84756)/t84814-ccaa1*gamma_aa[index]*t84811*t84850*t84755+ \
                   ccaa2*gamma_aa[index]*t84811*t84755*t84848*2.0-ccaa4*t84812*t84822*t84841*t84770*t84759-ccaa2*t84811* \
                   t84832*t84755*t84828*t84757+ccaa4*gamma_aa[index]*t84812*t84757*t84847*t84759*4.0+ccaa3*gcaa*t84811* \
                   t84760*t84757*t84849*3.0-ccaa3*gamma_aa[index]*gcaa*t84811*t84760*t84836*t84757*t84829)*(1.0/2.0)+ \
                   rho_a[index]*t84846*(t84844*(t84842*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/ \
                   2.0)-1.0)+1.0)*(ccaa1*t84811*t84850*t84755*2.0-ccaa2*t84811*t84755*t84848*2.0+ccaa2*t84812*t84832* \
                   t84757*t84759*2.0-ccaa4*t84812*t84757*t84847*t84759*1.2E1+ccaa4*t84812*t84841*t84770*t84759*(t84811* \
                   t84755*1.2E1+t84812*t84757*t84759*1.2E1+gamma_aa[index]*gcaa*t84811*t84760*2.4E1)-ccaa1*gamma_aa[index]* \
                   gcaa*t84811*t84760*1.0/(t84814*t84814*t84814)*2.0-ccaa4*t84812*(t84822*t84822)*t84770*1.0/(t84827* \
                   t84827*t84827)*t84759*2.0-ccaa2*t84811*1.0/(t84817*t84817*t84817)*t84755*(t84828*t84828)*t84757*2.0- \
                   ccaa3*gamma_aa[index]*gcaa*t84811*t84760*t84849*6.0+ccaa2*gamma_aa[index]*t84811*t84832*t84755*t84828* \
                   4.0+ccaa4*gamma_aa[index]*t84812*t84822*t84841*t84757*t84759*8.0+ccaa3*gcaa*t84811*t84760*t84836*t84757* \
                   t84829*6.0+ccaa3*gamma_aa[index]*gcaa*t84811*t84760*t84757*t84829*(t84811*t84755*6.0+gamma_aa[index]* \
                   gcaa*t84811*t84760*6.0)-ccaa3*gamma_aa[index]*gcaa*t84811*1.0/(t84821*t84821*t84821)*t84760*(t84836* \
                   t84836)*t84757*2.0)*2.0+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*1.0/pow(t84751,4.0/ \
                   3.0)*t84851*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t84851*t84852*(1.0/ \
                   4.0)+1.0,3.0)*(X-1.0)*((a_1*t84855)/t84859+a_2*t84856*1.0/(t84859*t84859)+a_4*t84857*1.0/(t84859*t84859* \
                   t84859*t84859)+a_8*t84858*1.0/(t84859*t84859*t84859*t84859*t84859*t84859*t84859*t84859)+a_10*t84856* \
                   t84858*1.0/pow(t84859,1.0E1)+a_3*t84855*t84856*1.0/(t84859*t84859*t84859)+a_5*t84855*t84857*1.0/(t84859* \
                   t84859*t84859*t84859*t84859)+a_6*t84856*t84857*1.0/(t84859*t84859*t84859*t84859*t84859*t84859)+a_9* \
                   t84855*t84858*1.0/(t84859*t84859*t84859*t84859*t84859*t84859*t84859*t84859*t84859)+a_11*t84855*t84856* \
                   t84858*1.0/pow(t84859,1.1E1)+a_7*t84855*t84856*t84857*1.0/(t84859*t84859*t84859*t84859*t84859*t84859* \
                   t84859)+1.0)*(1.0/4.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t84861 = pow(rho_a[index],5.0/3.0);
                double t84862 = 1.0/(tau_a[index]*tau_a[index]);
                double t84863 = 1.0/tau_a[index];
                double t84864 = C_k*t84861*t84863;
                double t84865 = t84864+1.0;
                double t84866 = t84864-1.0;
                double t84867 = 1.0/(t84865*t84865);
                double t84868 = t84866*t84866;
                double t84869 = t84868*t84868;
                double t84870 = t84869*t84869;
                double t84871 = 1.0/pow(t84865,1.1E1);
                double t84872 = 1.0/(t84865*t84865*t84865);
                double t84873 = 1.0/(t84865*t84865*t84865*t84865);
                double t84874 = 1.0/(t84865*t84865*t84865*t84865*t84865);
                double t84875 = 1.0/(t84865*t84865*t84865*t84865*t84865*t84865);
                double t84876 = 1.0/(t84865*t84865*t84865*t84865*t84865*t84865*t84865);
                double t84877 = 1.0/(t84865*t84865*t84865*t84865*t84865*t84865*t84865*t84865);
                double t84878 = 1.0/(t84865*t84865*t84865*t84865*t84865*t84865*t84865*t84865*t84865);
                double t84879 = 1.0/pow(t84865,1.0E1);
                double t84880 = 1.0/(k*k);
                double t84881 = 1.0/kp;
                double t84882 = 1.0/(rho_a[index]*rho_a[index]);
                double t84883 = rho_a[index]*2.0;
                double t84884 = 1.0/pow(t84883,2.0/3.0);
                double t84885 = gamma_aa[index]*mu_*t84880*t84881*t84882*t84884*(1.0/4.0);
                double t84886 = t84885+1.0;
                double t84887 = 1.0/t84886;
                double t84888 = kp-kp*t84887+1.0;
                double t84889 = C_k*C_k;
                double t84890 = pow(rho_a[index],7.0/3.0);
                double t84891 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t84892 = 1.0/t84865;
                double t84893 = 1.0/pow(t84865,1.2E1);
                double t84894 = pow(rho_a[index],2.0/3.0);
                double t84895 = C_k*a_1*t84861*t84862*t84892;
                double t84896 = C_k*a_2*t84861*t84862*t84866*t84867*2.0;
                double t84897 = C_k*a_10*t84861*t84870*t84862*t84866*t84879*1.0E1;
                double t84898 = C_k*a_11*t84861*t84870*t84862*t84871*t84868*1.1E1;
                double t84899 = C_k*a_3*t84861*t84862*t84872*t84868*3.0;
                double t84900 = C_k*a_4*t84861*t84862*t84873*t84866*t84868*4.0;
                double t84901 = C_k*a_5*t84861*t84862*t84874*t84869*5.0;
                double t84902 = C_k*a_6*t84861*t84862*t84866*t84875*t84869*6.0;
                double t84903 = C_k*a_7*t84861*t84862*t84876*t84868*t84869*7.0;
                double t84904 = C_k*a_8*t84861*t84862*t84866*t84868*t84877*t84869*8.0;
                double t84905 = C_k*a_9*t84861*t84870*t84862*t84878*9.0;
                double t84906 = t84900+t84901+t84902+t84903+t84904+t84905+t84895+t84896+t84897+t84898+t84899-C_k* \
                   a_1*t84861*t84862*t84866*t84867-C_k*a_2*t84861*t84862*t84872*t84868*2.0-C_k*a_4*t84861*t84862*t84874* \
                   t84869*4.0-C_k*a_8*t84861*t84870*t84862*t84878*8.0-C_k*a_10*t84861*t84870*t84862*t84871*t84868*1.0E1- \
                   C_k*a_3*t84861*t84862*t84873*t84866*t84868*3.0-C_k*a_5*t84861*t84862*t84866*t84875*t84869*5.0-C_k* \
                   a_6*t84861*t84862*t84876*t84868*t84869*6.0-C_k*a_9*t84861*t84870*t84862*t84866*t84879*9.0-C_k*a_11* \
                   t84861*t84870*t84862*t84866*t84893*t84868*1.1E1-C_k*a_7*t84861*t84862*t84866*t84868*t84877*t84869* \
                   7.0;
                double t84907 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84908 = c*t84907;
                double t84909 = sqrt(t84908);
                double t84910 = pow(t84908,3.0/2.0);
                double t84911 = c*c;
                double t84912 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84913 = 1.0/c0p;
                double t84914 = b1p*t84909;
                double t84915 = b3p*t84910;
                double t84916 = b4p*t84911*t84912;
                double t84917 = b2p*c*t84907;
                double t84918 = t84914+t84915+t84916+t84917;
                double t84919 = 1.0/t84918;
                double t84920 = t84913*t84919*(1.0/2.0);
                double t84921 = t84920+1.0;
                double t84922 = log(t84921);
                double t84923 = a1p*c*t84907;
                double t84924 = t84923+1.0;
                double t84925 = tau_a[index]-1.0/1.0E20;
                double t84926 = tau_a[index]*2.0;
                double t84927 = 1.0/rho_a[index];
                double t84958 = gamma_aa[index]*t84927*(1.0/4.0);
                double t84928 = t84926-t84958;
                double t84929 = gamma_aa[index]*gamma_aa[index];
                double t84930 = gcaa*gcaa;
                double t84931 = t84929*t84929;
                double t84932 = t84930*t84930;
                double t84933 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84934 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84935 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84936 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t84937 = pow(2.0,1.0/3.0);
                double t84938 = t84937*2.0;
                double t84939 = t84938-2.0;
                double t84940 = two_13*2.0;
                double t84941 = t84940-2.0;
                double t84942 = 1.0/t84941;
                double t84943 = 1.0/c0f;
                double t84944 = b1f*t84909;
                double t84945 = b3f*t84910;
                double t84946 = b4f*t84911*t84912;
                double t84947 = b2f*c*t84907;
                double t84948 = t84944+t84945+t84946+t84947;
                double t84949 = 1.0/t84948;
                double t84950 = t84943*t84949*(1.0/2.0);
                double t84951 = t84950+1.0;
                double t84952 = log(t84951);
                double t84953 = a1f*c*t84907;
                double t84954 = t84953+1.0;
                double t84955 = c0f*t84952*t84954*2.0;
                double t84956 = c0p*t84922*t84924*2.0;
                double t84957 = ( (t84925 > 0.0) ?  1.0 : 0.0 ) ;
                double t84988 = t84862*t84928*(1.0/2.0);
                double t84959 = t84863-t84988;
                double t84960 = t84957*t84959;
                double t84961 = 0.0 ;
                double t84962 = t84863*t84928*(1.0/2.0);
                double t84963 = t84962-1.0;
                double t84964 = t84961*t84963;
                double t84965 = t84960+t84964;
                double t84966 = gamma_aa[index]*gcaa*t84934*4.0;
                double t84967 = gamma_aa[index]*gcaa*t84930*t84935*t84929*4.0;
                double t84968 = t84930*t84936*t84929*6.0;
                double t84969 = t84931*t84932*t84933;
                double t84970 = t84966+t84967+t84968+t84969+1.0;
                double t84971 = 1.0/t84970;
                double t84972 = gamma_aa[index]*gcaa*t84934;
                double t84973 = t84972+1.0;
                double t84974 = 1.0/t84973;
                double t84975 = gamma_aa[index]*gcaa*t84934*3.0;
                double t84976 = gamma_aa[index]*gcaa*t84930*t84935*t84929;
                double t84977 = t84930*t84936*t84929*3.0;
                double t84978 = t84975+t84976+t84977+1.0;
                double t84979 = 1.0/t84978;
                double t84980 = gamma_aa[index]*gcaa*t84934*2.0;
                double t84981 = t84930*t84936*t84929;
                double t84982 = t84980+t84981+1.0;
                double t84983 = 1.0/t84982;
                double t84984 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t84985 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t84986 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t84987 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t84989 = 1.0/pow(rho_a[index],4.0/3.0);
                double t84990 = 1.0/pow(rho_a[index],5.0/3.0);
                double t84991 = 1.0/sqrt(t84908);
                double t84992 = 1.0/t84921;
                double t84993 = 1.0/(t84918*t84918);
                double t84994 = b4p*t84911*t84990*(2.0/3.0);
                double t84995 = b2p*c*t84989*(1.0/3.0);
                double t84996 = b1p*c*t84991*t84989*(1.0/6.0);
                double t84997 = b3p*c*t84909*t84989*(1.0/2.0);
                double t84998 = t84994+t84995+t84996+t84997;
                double t84999 = t84924*t84992*t84993*t84998;
                double t85000 = ccaa4*t84931*t84932*t84933*t84971;
                double t85001 = ccaa1*gamma_aa[index]*gcaa*t84934*t84974;
                double t85002 = ccaa3*gamma_aa[index]*gcaa*t84930*t84935*t84929*t84979;
                double t85003 = ccaa2*t84930*t84936*t84929*t84983;
                double t85004 = ccaa0+t85000+t85001+t85002+t85003;
                double t85005 = t84955-t84956;
                double t85006 = t84942*t84939*t85005;
                double t85007 = t84956+t85006;
                v_rho_a_tau_a_[index] = (X-1.0)*(t84906*t84888+rho_a[index]*t84888*(C_k*a_1*t84862*t84892*t84894* \
                   (5.0/3.0)-a_1*t84890*t84891*t84867*t84889*(1.0E1/3.0)+a_2*t84890*t84891*t84867*t84889*(1.0E1/3.0)+ \
                   a_1*t84872*t84890*t84891*t84866*t84889*(1.0E1/3.0)+a_10*t84870*t84890*t84891*t84879*t84889*1.5E2-a_2* \
                   t84872*t84890*t84891*t84866*t84889*(4.0E1/3.0)+a_2*t84890*t84873*t84891*t84868*t84889*1.0E1+a_3*t84872* \
                   t84890*t84891*t84866*t84889*1.0E1-a_3*t84890*t84873*t84891*t84868*t84889*3.0E1+a_4*t84890*t84873*t84891* \
                   t84868*t84889*2.0E1+a_4*t84890*t84891*t84875*t84869*t84889*(1.0E2/3.0)-a_5*t84890*t84891*t84875*t84869* \
                   t84889*(2.5E2/3.0)+a_6*t84890*t84891*t84875*t84869*t84889*5.0E1+a_8*t84870*t84890*t84891*t84879*t84889* \
                   1.2E2-a_9*t84870*t84890*t84891*t84879*t84889*2.7E2-C_k*a_1*t84862*t84866*t84867*t84894*(5.0/3.0)-C_k* \
                   a_2*t84862*t84872*t84894*t84868*(1.0E1/3.0)+C_k*a_2*t84862*t84866*t84867*t84894*(1.0E1/3.0)+C_k*a_3* \
                   t84862*t84872*t84894*t84868*5.0-C_k*a_4*t84862*t84874*t84894*t84869*(2.0E1/3.0)+C_k*a_5*t84862*t84874* \
                   t84894*t84869*(2.5E1/3.0)-C_k*a_8*t84870*t84862*t84894*t84878*(4.0E1/3.0)+C_k*a_9*t84870*t84862*t84894* \
                   t84878*1.5E1-C_k*a_10*t84870*t84862*t84871*t84894*t84868*(5.0E1/3.0)+C_k*a_11*t84870*t84862*t84871* \
                   t84894*t84868*(5.5E1/3.0)+C_k*a_10*t84870*t84862*t84866*t84894*t84879*(5.0E1/3.0)-C_k*a_3*t84862*t84873* \
                   t84866*t84894*t84868*5.0+C_k*a_4*t84862*t84873*t84866*t84894*t84868*(2.0E1/3.0)-C_k*a_5*t84862*t84866* \
                   t84875*t84894*t84869*(2.5E1/3.0)+C_k*a_6*t84862*t84866*t84875*t84894*t84869*1.0E1-C_k*a_6*t84862*t84876* \
                   t84894*t84868*t84869*1.0E1+C_k*a_7*t84862*t84876*t84894*t84868*t84869*(3.5E1/3.0)-C_k*a_9*t84870*t84862* \
                   t84866*t84894*t84879*1.5E1-a_10*t84870*t84871*t84890*t84891*t84866*t84889*(1.0E3/3.0)+a_11*t84870* \
                   t84871*t84890*t84891*t84866*t84889*(5.5E2/3.0)+a_10*t84870*t84890*t84891*t84893*t84868*t84889*(5.5E2/ \
                   3.0)-a_11*t84870*t84890*t84891*t84893*t84868*t84889*(1.21E3/3.0)+a_3*t84890*t84891*t84874*t84866*t84868* \
                   t84889*2.0E1-a_4*t84890*t84891*t84874*t84866*t84868*t84889*(1.6E2/3.0)+a_5*t84890*t84891*t84874*t84866* \
                   t84868*t84889*(1.0E2/3.0)+a_5*t84890*t84891*t84866*t84876*t84869*t84889*5.0E1-a_6*t84890*t84891*t84866* \
                   t84876*t84869*t84889*1.2E2+a_6*t84890*t84891*t84868*t84877*t84869*t84889*7.0E1+a_7*t84890*t84891*t84866* \
                   t84876*t84869*t84889*7.0E1-a_7*t84890*t84891*t84868*t84877*t84869*t84889*(4.9E2/3.0)+a_8*t84890*t84891* \
                   t84868*t84877*t84869*t84889*(2.8E2/3.0)+a_9*t84870*t84871*t84890*t84891*t84866*t84889*1.5E2+a_11*t84870* \
                   t84890*t84891*1.0/pow(t84865,1.3E1)*t84866*t84868*t84889*2.2E2-C_k*a_11*t84870*t84862*t84866*t84893* \
                   t84894*t84868*(5.5E1/3.0)-C_k*a_7*t84862*t84866*t84894*t84868*t84877*t84869*(3.5E1/3.0)+C_k*a_8*t84862* \
                   t84866*t84894*t84868*t84877*t84869*(4.0E1/3.0)+a_7*t84890*t84891*t84866*t84868*t84869*t84878*t84889* \
                   (2.8E2/3.0)-a_8*t84890*t84891*t84866*t84868*t84869*t84878*t84889*(6.4E2/3.0)+a_9*t84890*t84891*t84866* \
                   t84868*t84869*t84878*t84889*1.2E2)-kp*rho_a[index]*t84906*1.0/(t84886*t84886)*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t84880*t84881*t84884*(1.0/2.0)+gamma_aa[index]*mu_*t84880* \
                   t84881*t84882*1.0/pow(t84883,5.0/3.0)*(1.0/3.0)))-t84965*t85004*(t84956+t84942*t84939*(t84955-c0p* \
                   t84922*t84924*2.0))+rho_a[index]*t84965*t85004*(-t84999+t84942*t84939*(t84999-(t84954*1.0/(t84948* \
                   t84948)*(b2f*c*t84989*(1.0/3.0)+b4f*t84911*t84990*(2.0/3.0)+b1f*c*t84991*t84989*(1.0/6.0)+b3f*c*t84909* \
                   t84989*(1.0/2.0)))/t84951+a1f*c*c0f*t84952*t84989*(2.0/3.0)-a1p*c*c0p*t84922*t84989*(2.0/3.0))+a1p* \
                   c*c0p*t84922*t84989*(2.0/3.0))+rho_a[index]*t84965*t85007*(ccaa1*gamma_aa[index]*gcaa*t84974*t84985* \
                   (8.0/3.0)+ccaa4*t84931*t84932*t84971*t84987*(3.2E1/3.0)+ccaa2*t84930*t84929*t84983*t84984*(1.6E1/3.0) \
                   -ccaa1*t84930*1.0/(t84973*t84973)*t84929*t84984*(8.0/3.0)-ccaa2*t84930*t84936*1.0/(t84982*t84982)* \
                   t84929*(gamma_aa[index]*gcaa*t84985*(1.6E1/3.0)+t84930*t84929*t84984*(1.6E1/3.0))-ccaa4*t84931*t84932* \
                   t84933*1.0/(t84970*t84970)*(gamma_aa[index]*gcaa*t84985*(3.2E1/3.0)+t84931*t84932*t84987*(3.2E1/3.0) \
                   +t84930*t84929*t84984*3.2E1+gamma_aa[index]*gcaa*t84930*t84929*t84986*3.2E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t84930*t84929*t84986*t84979*8.0-ccaa3*gamma_aa[index]*gcaa*t84930*t84935*t84929*1.0/(t84978*t84978) \
                   *(gamma_aa[index]*gcaa*t84985*8.0+t84930*t84929*t84984*1.6E1+gamma_aa[index]*gcaa*t84930*t84929*t84986* \
                   8.0))-gamma_aa[index]*t84961*t84863*t84927*t85004*t85007*(1.0/8.0)+gamma_aa[index]*t84862*t84927*t84957* \
                   t85004*t85007*(1.0/8.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t85009 = 1.0/pow(rho_a[index],1.0/3.0);
                double t85010 = c*t85009;
                double t85011 = sqrt(t85010);
                double t85012 = pow(t85010,3.0/2.0);
                double t85013 = c*c;
                double t85014 = 1.0/pow(rho_a[index],2.0/3.0);
                double t85015 = 1.0/c0p;
                double t85016 = b1p*t85011;
                double t85017 = b3p*t85012;
                double t85018 = b4p*t85013*t85014;
                double t85019 = b2p*c*t85009;
                double t85020 = t85016+t85017+t85018+t85019;
                double t85021 = 1.0/t85020;
                double t85022 = t85021*t85015*(1.0/2.0);
                double t85023 = t85022+1.0;
                double t85024 = log(t85023);
                double t85025 = a1p*c*t85009;
                double t85026 = t85025+1.0;
                double t85027 = 1.0/tau_a[index];
                double t85028 = tau_a[index]*2.0;
                double t85029 = 1.0/rho_a[index];
                double t85033 = gamma_aa[index]*t85029*(1.0/4.0);
                double t85030 = -t85033+t85028;
                double t85031 = tau_a[index]-1.0/1.0E20;
                double t85032 = 1.0/(tau_a[index]*tau_a[index]);
                double t85034 = gamma_aa[index]*gamma_aa[index];
                double t85035 = gcaa*gcaa;
                double t85036 = t85034*t85034;
                double t85037 = t85035*t85035;
                double t85038 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t85039 = 1.0/pow(rho_a[index],8.0/3.0);
                double t85040 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t85041 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t85042 = C_k*C_k;
                double t85043 = pow(rho_a[index],1.0E1/3.0);
                double t85044 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t85045 = pow(rho_a[index],5.0/3.0);
                double t85046 = C_k*t85027*t85045;
                double t85047 = t85046+1.0;
                double t85048 = 1.0/(t85047*t85047);
                double t85049 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t85050 = t85046-1.0;
                double t85051 = t85050*t85050;
                double t85052 = t85051*t85051;
                double t85053 = t85052*t85052;
                double t85054 = 1.0/pow(t85047,1.1E1);
                double t85055 = 1.0/pow(t85047,1.2E1);
                double t85056 = 1.0/(t85047*t85047*t85047*t85047);
                double t85057 = 1.0/(t85047*t85047*t85047*t85047*t85047);
                double t85058 = 1.0/(t85047*t85047*t85047*t85047*t85047*t85047);
                double t85059 = 1.0/(t85047*t85047*t85047*t85047*t85047*t85047*t85047);
                double t85060 = 1.0/(t85047*t85047*t85047*t85047*t85047*t85047*t85047*t85047);
                double t85061 = 1.0/(t85047*t85047*t85047*t85047*t85047*t85047*t85047*t85047*t85047);
                double t85062 = 1.0/pow(t85047,1.0E1);
                double t85063 = 1.0/(t85047*t85047*t85047);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t85042*t85043*t85044* \
                   t85048*-2.0+a_2*t85042*t85043*t85044*t85048*2.0+(C_k*a_1*t85045*t85049*2.0)/t85047+a_1*t85050*t85042* \
                   t85043*t85044*t85063*2.0+a_10*t85042*t85043*t85044*t85053*t85062*9.0E1-a_2*t85050*t85042*t85043*t85044* \
                   t85063*8.0+a_2*t85042*t85051*t85043*t85044*t85056*6.0+a_3*t85050*t85042*t85043*t85044*t85063*6.0-a_3* \
                   t85042*t85051*t85043*t85044*t85056*1.8E1+a_4*t85042*t85051*t85043*t85044*t85056*1.2E1+a_4*t85042*t85043* \
                   t85052*t85044*t85058*2.0E1-a_5*t85042*t85043*t85052*t85044*t85058*5.0E1+a_6*t85042*t85043*t85052*t85044* \
                   t85058*3.0E1+a_8*t85042*t85043*t85044*t85053*t85062*7.2E1-a_9*t85042*t85043*t85044*t85053*t85062*1.62E2- \
                   C_k*a_1*t85050*t85045*t85048*t85049*2.0-C_k*a_2*t85051*t85045*t85063*t85049*4.0+C_k*a_2*t85050*t85045* \
                   t85048*t85049*4.0+C_k*a_3*t85051*t85045*t85063*t85049*6.0-C_k*a_4*t85052*t85045*t85057*t85049*8.0+ \
                   C_k*a_5*t85052*t85045*t85057*t85049*1.0E1-C_k*a_8*t85061*t85053*t85045*t85049*1.6E1+C_k*a_9*t85061* \
                   t85053*t85045*t85049*1.8E1+C_k*a_10*t85050*t85053*t85062*t85045*t85049*2.0E1-C_k*a_10*t85051*t85053* \
                   t85045*t85054*t85049*2.0E1+C_k*a_11*t85051*t85053*t85045*t85054*t85049*2.2E1-C_k*a_3*t85050*t85051* \
                   t85045*t85056*t85049*6.0+C_k*a_4*t85050*t85051*t85045*t85056*t85049*8.0-C_k*a_5*t85050*t85052*t85045* \
                   t85049*t85058*1.0E1+C_k*a_6*t85050*t85052*t85045*t85049*t85058*1.2E1-C_k*a_6*t85051*t85052*t85045* \
                   t85049*t85059*1.2E1+C_k*a_7*t85051*t85052*t85045*t85049*t85059*1.4E1-C_k*a_9*t85050*t85053*t85062* \
                   t85045*t85049*1.8E1-a_10*t85050*t85042*t85043*t85044*t85053*t85054*2.0E2+a_11*t85050*t85042*t85043* \
                   t85044*t85053*t85054*1.1E2+a_10*t85042*t85051*t85043*t85044*t85053*t85055*1.1E2-a_11*t85042*t85051* \
                   t85043*t85044*t85053*t85055*2.42E2+a_3*t85050*t85042*t85051*t85043*t85044*t85057*1.2E1-a_4*t85050* \
                   t85042*t85051*t85043*t85044*t85057*3.2E1+a_5*t85050*t85042*t85051*t85043*t85044*t85057*2.0E1+a_5*t85050* \
                   t85042*t85043*t85052*t85044*t85059*3.0E1+a_6*t85042*t85051*t85060*t85043*t85052*t85044*4.2E1-a_6*t85050* \
                   t85042*t85043*t85052*t85044*t85059*7.2E1-a_7*t85042*t85051*t85060*t85043*t85052*t85044*9.8E1+a_7*t85050* \
                   t85042*t85043*t85052*t85044*t85059*4.2E1+a_8*t85042*t85051*t85060*t85043*t85052*t85044*5.6E1+a_9*t85050* \
                   t85042*t85043*t85044*t85053*t85054*9.0E1+a_11*t85050*t85042*t85051*t85043*t85044*t85053*1.0/pow(t85047,1.3E1) \
                   *1.32E2-C_k*a_11*t85050*t85051*t85053*t85045*t85055*t85049*2.2E1-C_k*a_7*t85050*t85051*t85060*t85052* \
                   t85045*t85049*1.4E1+C_k*a_8*t85050*t85051*t85060*t85052*t85045*t85049*1.6E1+a_7*t85050*t85042*t85051* \
                   t85043*t85052*t85061*t85044*5.6E1-a_8*t85050*t85042*t85051*t85043*t85052*t85061*t85044*1.28E2+a_9* \
                   t85050*t85042*t85051*t85043*t85052*t85061*t85044*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t85011+b3f*t85012+b2f*c*t85009+b4f*t85013*t85014))+1.0)*(a1f*c*t85009+ \
                   1.0)*2.0-c0p*t85024*t85026*2.0))/(two_13*2.0-2.0)+c0p*t85024*t85026*2.0)*( 0.0 - ( (t85031 > 0.0)  \
                   ? 1.0*(t85032*2.0-t85030*t85049) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t85041*t85034*t85035)/(gamma_aa[index]* \
                   gcaa*t85039*2.0+t85041*t85034*t85035+1.0)+(ccaa1*gamma_aa[index]*gcaa*t85039)/(gamma_aa[index]*gcaa* \
                   t85039+1.0)+(ccaa4*t85036*t85037*t85038)/(gamma_aa[index]*gcaa*t85039*4.0+t85041*t85034*t85035*6.0+ \
                   t85036*t85037*t85038+gamma_aa[index]*gcaa*t85040*t85034*t85035*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
                   t85040*t85034*t85035)/(gamma_aa[index]*gcaa*t85039*3.0+t85041*t85034*t85035*3.0+gamma_aa[index]*gcaa* \
                   t85040*t85034*t85035+1.0));
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t85065 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t85066 = c*t85065;
                    double t85067 = sqrt(t85066);
                    double t85068 = pow(t85066,3.0/2.0);
                    double t85069 = c*c;
                    double t85070 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t85071 = 1.0/c0p;
                    double t85072 = b1p*t85067;
                    double t85073 = b3p*t85068;
                    double t85074 = b4p*t85070*t85069;
                    double t85075 = b2p*c*t85065;
                    double t85076 = t85072+t85073+t85074+t85075;
                    double t85077 = 1.0/t85076;
                    double t85078 = t85071*t85077*(1.0/2.0);
                    double t85079 = t85078+1.0;
                    double t85080 = log(t85079);
                    double t85081 = a1p*c*t85065;
                    double t85082 = t85081+1.0;
                    double t85083 = tau_a[index]-1.0/1.0E20;
                    double t85084 = 1.0/tau_a[index];
                    double t85085 = tau_a[index]*2.0;
                    double t85086 = 1.0/rho_a[index];
                    double t85087 = t85085-gamma_aa[index]*t85086*(1.0/4.0);
                    double t85088 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t85089 = gamma_aa[index]*gamma_aa[index];
                    double t85090 = gcaa*gcaa;
                    double t85091 = t85090*t85090;
                    double t85092 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t85093 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t85094 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t85095 = gamma_aa[index]*gcaa*t85088;
                    double t85096 = t85095+1.0;
                    double t85097 = gamma_aa[index]*gcaa*t85088*3.0;
                    double t85098 = gamma_aa[index]*gcaa*t85090*t85094*t85089;
                    double t85099 = t85090*t85093*t85089*3.0;
                    double t85100 = t85097+t85098+t85099+1.0;
                    double t85101 = t85089*t85089;
                    double t85102 = gamma_aa[index]*gcaa*t85088*4.0;
                    double t85103 = gamma_aa[index]*gcaa*t85090*t85094*t85089*4.0;
                    double t85104 = t85090*t85093*t85089*6.0;
                    double t85105 = t85101*t85091*t85092;
                    double t85106 = t85102+t85103+t85104+t85105+1.0;
                    double t85107 = gamma_aa[index]*gcaa*t85088*2.0;
                    double t85108 = t85090*t85093*t85089;
                    double t85109 = t85107+t85108+1.0;
                    double t85110 = pow(2.0,1.0/3.0);
                    double t85111 = t85110*2.0;
                    double t85112 = t85111-2.0;
                    double t85113 = two_13*2.0;
                    double t85114 = t85113-2.0;
                    double t85115 = 1.0/t85114;
                    double t85116 = 1.0/c0f;
                    double t85117 = b1f*t85067;
                    double t85118 = b3f*t85068;
                    double t85119 = b4f*t85070*t85069;
                    double t85120 = b2f*c*t85065;
                    double t85121 = t85120+t85117+t85118+t85119;
                    double t85122 = 1.0/t85121;
                    double t85123 = t85122*t85116*(1.0/2.0);
                    double t85124 = t85123+1.0;
                    double t85125 = log(t85124);
                    double t85126 = a1f*c*t85065;
                    double t85127 = t85126+1.0;
                    double t85128 = c0f*t85125*t85127*2.0;
                    double t85129 = c0p*t85080*t85082*2.0;
                    double t85130 = 0.0 ;
                    double t85131 = 1.0/(tau_a[index]*tau_a[index]);
                    double t85132 = ( (t85083 > 0.0) ?  1.0 : 0.0 ) ;
                    double t85133 = 1.0/t85106;
                    double t85134 = 1.0/t85096;
                    double t85135 = 1.0/t85100;
                    double t85136 = 1.0/t85109;
                    double t85137 = 1.0/(k*k);
                    double t85138 = rho_a[index]*2.0;
                    double t85139 = 1.0/pow(t85138,2.0/3.0);
                    double t85140 = pow(rho_a[index],5.0/3.0);
                    double t85141 = C_k*t85140*t85084;
                    double t85142 = t85141+1.0;
                    double t85143 = t85141-1.0;
                    double t85144 = 1.0/(t85142*t85142);
                    double t85145 = t85143*t85143;
                    double t85146 = t85145*t85145;
                    double t85147 = t85146*t85146;
                    double t85148 = 1.0/pow(t85142,1.1E1);
                    double t85149 = 1.0/(t85142*t85142*t85142);
                    double t85150 = 1.0/(t85142*t85142*t85142*t85142);
                    double t85151 = 1.0/(t85142*t85142*t85142*t85142*t85142);
                    double t85152 = 1.0/(t85142*t85142*t85142*t85142*t85142*t85142);
                    double t85153 = 1.0/(t85142*t85142*t85142*t85142*t85142*t85142*t85142);
                    double t85154 = 1.0/(t85142*t85142*t85142*t85142*t85142*t85142*t85142*t85142);
                    double t85155 = 1.0/(t85142*t85142*t85142*t85142*t85142*t85142*t85142*t85142*t85142);
                    double t85156 = 1.0/pow(t85142,1.0E1);
                    v_gamma_aa_tau_a_[index] = -rho_a[index]*(t85129+t85112*t85115*(t85128-t85129))*(t85131*t85132*t85086* \
                       (1.0/8.0)-t85130*t85084*t85086*(1.0/8.0))*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t85134*t85088+ccaa4*t85101* \
                       t85133*t85091*t85092+ccaa2*t85090*t85136*t85093*t85089+ccaa3*gamma_aa[index]*gcaa*t85090*t85135*t85094* \
                       t85089)-rho_a[index]*(t85129+t85112*t85115*(t85128-c0p*t85080*t85082*2.0))*(t85130*(t85084*t85087* \
                       (1.0/2.0)-1.0)+t85132*(t85084-t85131*t85087*(1.0/2.0)))*(ccaa1*gcaa*t85134*t85088+ccaa2*gamma_aa[index]* \
                       t85090*t85136*t85093*2.0-ccaa1*gamma_aa[index]*t85090*t85093*1.0/(t85096*t85096)-ccaa2*t85090*1.0/ \
                       (t85109*t85109)*t85093*t85089*(gcaa*t85088*2.0+gamma_aa[index]*t85090*t85093*2.0)-ccaa4*t85101*1.0/ \
                       (t85106*t85106)*t85091*t85092*(gcaa*t85088*4.0+gamma_aa[index]*t85090*t85093*1.2E1+gamma_aa[index]* \
                       t85091*t85092*t85089*4.0+gcaa*t85090*t85094*t85089*1.2E1)+ccaa4*gamma_aa[index]*t85133*t85091*t85092* \
                       t85089*4.0+ccaa3*gcaa*t85090*t85135*t85094*t85089*3.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t85100*t85100) \
                       *t85090*t85094*t85089*(gcaa*t85088*3.0+gamma_aa[index]*t85090*t85093*6.0+gcaa*t85090*t85094*t85089* \
                       3.0))+mu_*t85137*t85139*t85086*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t85137* \
                       t85139*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t85131*t85140)/t85142-C_k*a_1*t85131*t85140*t85143* \
                       t85144+C_k*a_2*t85131*t85140*t85143*t85144*2.0-C_k*a_2*t85131*t85140*t85145*t85149*2.0+C_k*a_3*t85131* \
                       t85140*t85145*t85149*3.0-C_k*a_4*t85131*t85140*t85151*t85146*4.0+C_k*a_5*t85131*t85140*t85151*t85146* \
                       5.0-C_k*a_8*t85131*t85140*t85155*t85147*8.0+C_k*a_9*t85131*t85140*t85155*t85147*9.0+C_k*a_10*t85131* \
                       t85140*t85143*t85147*t85156*1.0E1-C_k*a_10*t85131*t85140*t85145*t85147*t85148*1.0E1+C_k*a_11*t85131* \
                       t85140*t85145*t85147*t85148*1.1E1-C_k*a_3*t85131*t85140*t85150*t85143*t85145*3.0+C_k*a_4*t85131*t85140* \
                       t85150*t85143*t85145*4.0-C_k*a_5*t85131*t85140*t85143*t85152*t85146*5.0+C_k*a_6*t85131*t85140*t85143* \
                       t85152*t85146*6.0-C_k*a_6*t85131*t85140*t85153*t85145*t85146*6.0+C_k*a_7*t85131*t85140*t85153*t85145* \
                       t85146*7.0-C_k*a_9*t85131*t85140*t85143*t85147*t85156*9.0-C_k*a_11*t85131*t85140*1.0/pow(t85142,1.2E1) \
                       *t85143*t85145*t85147*1.1E1-C_k*a_7*t85131*t85140*t85143*t85145*t85154*t85146*7.0+C_k*a_8*t85131*t85140* \
                       t85143*t85145*t85154*t85146*8.0)*(1.0/4.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void M05_2X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t77072 = pow(rho_a[index],5.0/3.0);
            double t77073 = 1.0/tau_a[index];
            double t77074 = C_k*t77072*t77073;
            double t77075 = t77074-1.0;
            double t77076 = t77075*t77075;
            double t77077 = t77076*t77076;
            double t77078 = t77077*t77077;
            double t77079 = t77074+1.0;
            double t77080 = 1.0/(k*k);
            double t77081 = 1.0/kp;
            double t77082 = pow(rho_b[index],5.0/3.0);
            double t77083 = 1.0/tau_b[index];
            double t77084 = C_k*t77082*t77083;
            double t77085 = t77084-1.0;
            double t77086 = t77085*t77085;
            double t77087 = t77086*t77086;
            double t77088 = t77087*t77087;
            double t77089 = t77084+1.0;
            double t77090 = 1.0/pow(rho_a[index],1.0/3.0);
            double t77091 = c*t77090;
            double t77092 = sqrt(t77091);
            double t77093 = pow(t77091,3.0/2.0);
            double t77094 = c*c;
            double t77095 = 1.0/pow(rho_a[index],2.0/3.0);
            double t77096 = 1.0/c0p;
            double t77097 = b1p*t77092;
            double t77098 = b3p*t77093;
            double t77099 = b4p*t77094*t77095;
            double t77100 = b2p*c*t77090;
            double t77101 = t77100+t77097+t77098+t77099;
            double t77102 = 1.0/t77101;
            double t77103 = t77102*t77096*(1.0/2.0);
            double t77104 = t77103+1.0;
            double t77105 = log(t77104);
            double t77106 = a1p*c*t77090;
            double t77107 = t77106+1.0;
            double t77108 = pow(2.0,1.0/3.0);
            double t77109 = t77108*2.0;
            double t77110 = t77109-2.0;
            double t77111 = two_13*2.0;
            double t77112 = t77111-2.0;
            double t77113 = 1.0/t77112;
            double t77114 = 1.0/c0f;
            double t77115 = 1.0/pow(rho_b[index],1.0/3.0);
            double t77116 = c*t77115;
            double t77117 = sqrt(t77116);
            double t77118 = pow(t77116,3.0/2.0);
            double t77119 = 1.0/pow(rho_b[index],2.0/3.0);
            double t77120 = b1p*t77117;
            double t77121 = b3p*t77118;
            double t77122 = b4p*t77119*t77094;
            double t77123 = b2p*c*t77115;
            double t77124 = t77120+t77121+t77122+t77123;
            double t77125 = 1.0/t77124;
            double t77126 = t77125*t77096*(1.0/2.0);
            double t77127 = t77126+1.0;
            double t77128 = log(t77127);
            double t77129 = a1p*c*t77115;
            double t77130 = t77129+1.0;
            double t77131 = c0p*t77130*t77128*2.0;
            double t77132 = rho_a[index]+rho_b[index];
            double t77133 = 1.0/pow(t77132,1.0/3.0);
            double t77134 = c*t77133;
            double t77135 = sqrt(t77134);
            double t77136 = pow(t77134,3.0/2.0);
            double t77137 = 1.0/pow(t77132,2.0/3.0);
            double t77138 = b1p*t77135;
            double t77139 = b3p*t77136;
            double t77140 = b4p*t77137*t77094;
            double t77141 = b2p*c*t77133;
            double t77142 = t77140+t77141+t77138+t77139;
            double t77143 = 1.0/t77142;
            double t77144 = t77143*t77096*(1.0/2.0);
            double t77145 = t77144+1.0;
            double t77146 = log(t77145);
            double t77147 = a1p*c*t77133;
            double t77148 = t77147+1.0;
            double t77149 = c0p*t77146*t77148*2.0;
            double t77150 = rho_a[index]-rho_b[index];
            double t77151 = t77150*t77150;
            double t77152 = 1.0/t77132;
            double t77153 = t77150*t77152;
            double t77154 = 1.0/(t77132*t77132*t77132*t77132);
            double t77155 = t77151*t77151;
            double t77156 = t77153+1.0;
            double t77157 = pow(t77156,4.0/3.0);
            double t77158 = -t77153+1.0;
            double t77159 = pow(t77158,4.0/3.0);
            double t77160 = t77157+t77159-2.0;
            double t77163 = 1.0/pow(rho_a[index],8.0/3.0);
            double t77164 = gamma_aa[index]*t77163*(1.0/2.0);
            double t77165 = 1.0/pow(rho_b[index],8.0/3.0);
            double t77166 = gamma_bb[index]*t77165*(1.0/2.0);
            double t77161 = t77164+t77166;
            double t77162 = gcab*gcab;
            double t77167 = t77161*t77161;
            double t77168 = t77162*t77162;
            double t77169 = t77167*t77167;
            double t77170 = c0p*t77105*t77107*2.0;
            double t77171 = b1f*t77092;
            double t77172 = b3f*t77093;
            double t77173 = b4f*t77094*t77095;
            double t77174 = b2f*c*t77090;
            double t77175 = t77171+t77172+t77173+t77174;
            double t77176 = 1.0/t77175;
            double t77177 = t77114*t77176*(1.0/2.0);
            double t77178 = t77177+1.0;
            double t77179 = log(t77178);
            double t77180 = a1f*c*t77090;
            double t77181 = t77180+1.0;
            double t77182 = t77170-c0f*t77181*t77179*2.0;
            double t77183 = t77170-t77110*t77113*t77182;
            double t77184 = gamma_aa[index]*gamma_aa[index];
            double t77185 = gcaa*gcaa;
            double t77186 = t77184*t77184;
            double t77187 = t77185*t77185;
            double t77188 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t77189 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t77190 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t77191 = b1f*t77117;
            double t77192 = b3f*t77118;
            double t77193 = b4f*t77119*t77094;
            double t77194 = b2f*c*t77115;
            double t77195 = t77191+t77192+t77193+t77194;
            double t77196 = 1.0/t77195;
            double t77197 = t77114*t77196*(1.0/2.0);
            double t77198 = t77197+1.0;
            double t77199 = log(t77198);
            double t77200 = a1f*c*t77115;
            double t77201 = t77200+1.0;
            double t77202 = t77131-c0f*t77201*t77199*2.0;
            double t77203 = t77131-t77110*t77202*t77113;
            double t77204 = gamma_bb[index]*gamma_bb[index];
            double t77205 = t77204*t77204;
            double t77206 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t77207 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t77208 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = (rho_b[index]*t77203+rho_a[index]*t77183-t77132*(t77149-t77113*t77160*t77154* \
               t77155*(t77149-c0f*log((t77114*(1.0/2.0))/(b1f*t77135+b3f*t77136+b2f*c*t77133+b4f*t77137*t77094)+1.0) \
               *(a1f*c*t77133+1.0)*2.0)+(Aa*t77113*t77160*log((1.0/2.0)/(Aa*(b1a*t77135+b3a*t77136+b2a*c*t77133+b4a* \
               t77137*t77094))+1.0)*(t77154*t77155-1.0)*(a1a*c*t77133+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t77168*t77169) \
               /(gcab*t77161*4.0+t77162*t77167*6.0+t77168*t77169+gcab*t77161*t77162*t77167*4.0+1.0)+(ccab1*gcab*t77161) \
               /(gcab*t77161+1.0)+(ccab2*t77162*t77167)/(gcab*t77161*2.0+t77162*t77167+1.0)+(ccab3*gcab*t77161*t77162* \
               t77167)/(gcab*t77161*3.0+t77162*t77167*3.0+gcab*t77161*t77162*t77167+1.0))-(rho_a[index]*(kp-kp/(gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index])*t77080*t77081*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0)+1.0) \
               +1.0)*((a_1*t77075)/t77079+a_2*t77076*1.0/(t77079*t77079)+a_4*t77077*1.0/(t77079*t77079*t77079*t77079) \
               +a_8*t77078*1.0/(t77079*t77079*t77079*t77079*t77079*t77079*t77079*t77079)+a_10*t77076*t77078*1.0/pow(t77079,1.0E1) \
               +a_3*t77075*t77076*1.0/(t77079*t77079*t77079)+a_5*t77075*t77077*1.0/(t77079*t77079*t77079*t77079*t77079) \
               +a_6*t77076*t77077*1.0/(t77079*t77079*t77079*t77079*t77079*t77079)+a_9*t77075*t77078*1.0/(t77079*t77079* \
               t77079*t77079*t77079*t77079*t77079*t77079*t77079)+a_11*t77075*t77076*t77078*1.0/pow(t77079,1.1E1)+ \
               a_7*t77075*t77076*t77077*1.0/(t77079*t77079*t77079*t77079*t77079*t77079*t77079)+1.0)+rho_b[index]* \
               (kp-kp/(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t77080*t77081*1.0/pow(rho_b[index]*2.0,2.0/ \
               3.0)*(1.0/4.0)+1.0)+1.0)*((a_1*t77085)/t77089+a_2*t77086*1.0/(t77089*t77089)+a_4*t77087*1.0/(t77089* \
               t77089*t77089*t77089)+a_8*t77088*1.0/(t77089*t77089*t77089*t77089*t77089*t77089*t77089*t77089)+a_10* \
               t77086*t77088*1.0/pow(t77089,1.0E1)+a_3*t77085*t77086*1.0/(t77089*t77089*t77089)+a_5*t77085*t77087* \
               1.0/(t77089*t77089*t77089*t77089*t77089)+a_6*t77086*t77087*1.0/(t77089*t77089*t77089*t77089*t77089* \
               t77089)+a_9*t77085*t77088*1.0/(t77089*t77089*t77089*t77089*t77089*t77089*t77089*t77089*t77089)+a_11* \
               t77085*t77086*t77088*1.0/pow(t77089,1.1E1)+a_7*t77085*t77086*t77087*1.0/(t77089*t77089*t77089*t77089* \
               t77089*t77089*t77089)+1.0))*(X-1.0)-rho_b[index]*t77203*( ( (tau_b[index]-1.0/1.0E20 > 0.0) ? 1.0* \
               (t77083*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(ccaa0+ \
               (ccaa2*t77204*t77208*t77185)/(gamma_bb[index]*gcaa*t77165*2.0+t77204*t77208*t77185+1.0)+(ccaa1*gamma_bb[index]* \
               gcaa*t77165)/(gamma_bb[index]*gcaa*t77165+1.0)+(ccaa4*t77205*t77206*t77187)/(gamma_bb[index]*gcaa* \
               t77165*4.0+t77204*t77208*t77185*6.0+t77205*t77206*t77187+gamma_bb[index]*gcaa*t77204*t77207*t77185* \
               4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t77204*t77207*t77185)/(gamma_bb[index]*gcaa*t77165*3.0+t77204* \
               t77208*t77185*3.0+gamma_bb[index]*gcaa*t77204*t77207*t77185+1.0))-rho_a[index]*t77183*( ( (tau_a[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t77073*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t77190*t77184*t77185)/(gamma_aa[index]*gcaa*t77163*2.0+t77190*t77184* \
               t77185+1.0)+(ccaa1*gamma_aa[index]*gcaa*t77163)/(gamma_aa[index]*gcaa*t77163+1.0)+(ccaa4*t77186*t77187* \
               t77188)/(gamma_aa[index]*gcaa*t77163*4.0+t77190*t77184*t77185*6.0+t77186*t77187*t77188+gamma_aa[index]* \
               gcaa*t77184*t77185*t77189*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t77184*t77185*t77189)/(gamma_aa[index]* \
               gcaa*t77163*3.0+t77190*t77184*t77185*3.0+gamma_aa[index]*gcaa*t77184*t77185*t77189+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t82574 = pow(rho_a[index],5.0/3.0);
            double t82575 = 1.0/tau_a[index];
            double t82576 = C_k*t82574*t82575;
            double t82577 = t82576-1.0;
            double t82578 = t82577*t82577;
            double t82579 = t82578*t82578;
            double t82580 = t82579*t82579;
            double t82581 = t82576+1.0;
            double t82582 = 1.0/pow(rho_a[index],1.0/3.0);
            double t82583 = c*t82582;
            double t82584 = sqrt(t82583);
            double t82585 = pow(t82583,3.0/2.0);
            double t82586 = c*c;
            double t82587 = 1.0/pow(rho_a[index],2.0/3.0);
            double t82588 = 1.0/c0p;
            double t82589 = b1p*t82584;
            double t82590 = b3p*t82585;
            double t82591 = b4p*t82586*t82587;
            double t82592 = b2p*c*t82582;
            double t82593 = t82590+t82591+t82592+t82589;
            double t82594 = 1.0/t82593;
            double t82595 = t82594*t82588*(1.0/2.0);
            double t82596 = t82595+1.0;
            double t82597 = log(t82596);
            double t82598 = a1p*c*t82582;
            double t82599 = t82598+1.0;
            double t82600 = gamma_aa[index]*gamma_aa[index];
            double t82601 = gcaa*gcaa;
            double t82602 = t82600*t82600;
            double t82603 = t82601*t82601;
            double t82604 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t82605 = 1.0/pow(rho_a[index],8.0/3.0);
            double t82606 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t82607 = 1.0/pow(rho_a[index],1.6E1/3.0);
            functional_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
               rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t82577)/t82581+a_2*1.0/ \
               (t82581*t82581)*t82578+a_4*1.0/(t82581*t82581*t82581*t82581)*t82579+a_8*t82580*1.0/(t82581*t82581* \
               t82581*t82581*t82581*t82581*t82581*t82581)+a_10*t82580*1.0/pow(t82581,1.0E1)*t82578+a_3*1.0/(t82581* \
               t82581*t82581)*t82577*t82578+a_5*1.0/(t82581*t82581*t82581*t82581*t82581)*t82577*t82579+a_6*1.0/(t82581* \
               t82581*t82581*t82581*t82581*t82581)*t82578*t82579+a_9*t82580*1.0/(t82581*t82581*t82581*t82581*t82581* \
               t82581*t82581*t82581*t82581)*t82577+a_11*t82580*1.0/pow(t82581,1.1E1)*t82577*t82578+a_7*1.0/(t82581* \
               t82581*t82581*t82581*t82581*t82581*t82581)*t82577*t82578*t82579+1.0)-rho_a[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t82584+b3f*t82585+b2f*c*t82582+b4f*t82586*t82587))+1.0)*(a1f* \
               c*t82582+1.0)*2.0-c0p*t82597*t82599*2.0))/(two_13*2.0-2.0)+c0p*t82597*t82599*2.0)*( ( (tau_a[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t82575*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t82600*t82601*t82607)/(gamma_aa[index]*gcaa*t82605*2.0+t82600*t82601* \
               t82607+1.0)+(ccaa1*gamma_aa[index]*gcaa*t82605)/(gamma_aa[index]*gcaa*t82605+1.0)+(ccaa4*t82602*t82603* \
               t82604)/(gamma_aa[index]*gcaa*t82605*4.0+t82600*t82601*t82607*6.0+t82602*t82603*t82604+gamma_aa[index]* \
               gcaa*t82600*t82601*t82606*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t82600*t82601*t82606)/(gamma_aa[index]* \
               gcaa*t82605*3.0+t82600*t82601*t82607*3.0+gamma_aa[index]*gcaa*t82600*t82601*t82606+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t81448 = pow(rho_b[index],5.0/3.0);
            double t81449 = 1.0/tau_b[index];
            double t81450 = C_k*t81448*t81449;
            double t81451 = t81450-1.0;
            double t81452 = t81451*t81451;
            double t81453 = t81452*t81452;
            double t81454 = t81453*t81453;
            double t81455 = t81450+1.0;
            double t81456 = 1.0/pow(rho_b[index],1.0/3.0);
            double t81457 = c*t81456;
            double t81458 = sqrt(t81457);
            double t81459 = pow(t81457,3.0/2.0);
            double t81460 = c*c;
            double t81461 = 1.0/pow(rho_b[index],2.0/3.0);
            double t81462 = 1.0/c0p;
            double t81463 = b1p*t81458;
            double t81464 = b3p*t81459;
            double t81465 = b4p*t81460*t81461;
            double t81466 = b2p*c*t81456;
            double t81467 = t81463+t81464+t81465+t81466;
            double t81468 = 1.0/t81467;
            double t81469 = t81462*t81468*(1.0/2.0);
            double t81470 = t81469+1.0;
            double t81471 = log(t81470);
            double t81472 = a1p*c*t81456;
            double t81473 = t81472+1.0;
            double t81474 = gamma_bb[index]*gamma_bb[index];
            double t81475 = gcaa*gcaa;
            double t81476 = t81474*t81474;
            double t81477 = t81475*t81475;
            double t81478 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t81479 = 1.0/pow(rho_b[index],8.0/3.0);
            double t81480 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t81481 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
               rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t81451)/t81455+a_2*t81452* \
               1.0/(t81455*t81455)+a_4*t81453*1.0/(t81455*t81455*t81455*t81455)+a_8*t81454*1.0/(t81455*t81455*t81455* \
               t81455*t81455*t81455*t81455*t81455)+a_10*t81452*t81454*1.0/pow(t81455,1.0E1)+a_3*t81451*t81452*1.0/ \
               (t81455*t81455*t81455)+a_5*t81451*t81453*1.0/(t81455*t81455*t81455*t81455*t81455)+a_6*t81452*t81453* \
               1.0/(t81455*t81455*t81455*t81455*t81455*t81455)+a_9*t81451*t81454*1.0/(t81455*t81455*t81455*t81455* \
               t81455*t81455*t81455*t81455*t81455)+a_11*t81451*t81452*t81454*1.0/pow(t81455,1.1E1)+a_7*t81451*t81452* \
               t81453*1.0/(t81455*t81455*t81455*t81455*t81455*t81455*t81455)+1.0)-rho_b[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t81458+b3f*t81459+b2f*c*t81456+b4f*t81460*t81461))+1.0)*(a1f* \
               c*t81456+1.0)*2.0-c0p*t81471*t81473*2.0))/(two_13*2.0-2.0)+c0p*t81471*t81473*2.0)*( ( (tau_b[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t81449*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t81481*t81474*t81475)/(gamma_bb[index]*gcaa*t81479*2.0+t81481*t81474* \
               t81475+1.0)+(ccaa1*gamma_bb[index]*gcaa*t81479)/(gamma_bb[index]*gcaa*t81479+1.0)+(ccaa4*t81476*t81477* \
               t81478)/(gamma_bb[index]*gcaa*t81479*4.0+t81481*t81474*t81475*6.0+t81476*t81477*t81478+gamma_bb[index]* \
               gcaa*t81480*t81474*t81475*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t81480*t81474*t81475)/(gamma_bb[index]* \
               gcaa*t81479*3.0+t81481*t81474*t81475*3.0+gamma_bb[index]*gcaa*t81480*t81474*t81475+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t77210 = 1.0/pow(rho_a[index],1.0/3.0);
            double t77211 = c*t77210;
            double t77212 = sqrt(t77211);
            double t77213 = pow(t77211,3.0/2.0);
            double t77214 = c*c;
            double t77215 = 1.0/pow(rho_a[index],2.0/3.0);
            double t77216 = 1.0/c0p;
            double t77217 = b1p*t77212;
            double t77218 = b3p*t77213;
            double t77219 = b4p*t77214*t77215;
            double t77220 = b2p*c*t77210;
            double t77221 = t77220+t77217+t77218+t77219;
            double t77222 = 1.0/t77221;
            double t77223 = t77222*t77216*(1.0/2.0);
            double t77224 = t77223+1.0;
            double t77225 = log(t77224);
            double t77226 = a1p*c*t77210;
            double t77227 = t77226+1.0;
            double t77228 = pow(2.0,1.0/3.0);
            double t77229 = t77228*2.0;
            double t77230 = t77229-2.0;
            double t77231 = two_13*2.0;
            double t77232 = t77231-2.0;
            double t77233 = 1.0/t77232;
            double t77234 = 1.0/c0f;
            double t77235 = 1.0/pow(rho_b[index],1.0/3.0);
            double t77236 = c*t77235;
            double t77237 = sqrt(t77236);
            double t77238 = pow(t77236,3.0/2.0);
            double t77239 = 1.0/pow(rho_b[index],2.0/3.0);
            double t77240 = b1p*t77237;
            double t77241 = b3p*t77238;
            double t77242 = b4p*t77214*t77239;
            double t77243 = b2p*c*t77235;
            double t77244 = t77240+t77241+t77242+t77243;
            double t77245 = 1.0/t77244;
            double t77246 = t77216*t77245*(1.0/2.0);
            double t77247 = t77246+1.0;
            double t77248 = log(t77247);
            double t77249 = a1p*c*t77235;
            double t77250 = t77249+1.0;
            double t77251 = c0p*t77250*t77248*2.0;
            double t77252 = rho_a[index]+rho_b[index];
            double t77253 = 1.0/pow(t77252,1.0/3.0);
            double t77254 = c*t77253;
            double t77255 = sqrt(t77254);
            double t77256 = pow(t77254,3.0/2.0);
            double t77257 = 1.0/pow(t77252,2.0/3.0);
            double t77258 = b1p*t77255;
            double t77259 = b3p*t77256;
            double t77260 = b4p*t77214*t77257;
            double t77261 = b2p*c*t77253;
            double t77262 = t77260+t77261+t77258+t77259;
            double t77263 = 1.0/t77262;
            double t77264 = t77216*t77263*(1.0/2.0);
            double t77265 = t77264+1.0;
            double t77266 = log(t77265);
            double t77267 = a1p*c*t77253;
            double t77268 = t77267+1.0;
            double t77269 = c0p*t77266*t77268*2.0;
            double t77270 = rho_a[index]-rho_b[index];
            double t77271 = t77270*t77270;
            double t77272 = 1.0/t77252;
            double t77273 = t77270*t77272;
            double t77274 = 1.0/(t77252*t77252*t77252*t77252);
            double t77275 = t77271*t77271;
            double t77276 = t77273+1.0;
            double t77277 = pow(t77276,4.0/3.0);
            double t77278 = -t77273+1.0;
            double t77279 = pow(t77278,4.0/3.0);
            double t77280 = t77277+t77279-2.0;
            double t77281 = gcab*gcab;
            double t77285 = 1.0/pow(rho_a[index],8.0/3.0);
            double t77286 = gamma_aa[index]*t77285*(1.0/2.0);
            double t77287 = 1.0/pow(rho_b[index],8.0/3.0);
            double t77288 = gamma_bb[index]*t77287*(1.0/2.0);
            double t77282 = t77286+t77288;
            double t77283 = t77282*t77282;
            double t77284 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t77289 = t77281*t77281;
            double t77290 = t77283*t77283;
            double t77291 = t77281*t77283*6.0;
            double t77292 = gcab*t77281*t77282*t77283*4.0;
            double t77293 = t77290*t77289;
            double t77294 = gcab*t77282*4.0;
            double t77295 = t77291+t77292+t77293+t77294+1.0;
            double t77296 = gcab*t77282;
            double t77297 = t77296+1.0;
            double t77298 = t77281*t77283;
            double t77299 = gcab*t77282*2.0;
            double t77300 = t77298+t77299+1.0;
            double t77301 = t77281*t77283*3.0;
            double t77302 = gcab*t77281*t77282*t77283;
            double t77303 = gcab*t77282*3.0;
            double t77304 = t77301+t77302+t77303+1.0;
            double t77305 = c0p*t77225*t77227*2.0;
            double t77306 = pow(rho_a[index],5.0/3.0);
            double t77307 = 1.0/tau_a[index];
            double t77308 = C_k*t77306*t77307;
            double t77309 = t77308-1.0;
            double t77310 = t77309*t77309;
            double t77311 = t77310*t77310;
            double t77312 = t77311*t77311;
            double t77313 = t77308+1.0;
            double t77314 = 1.0/(k*k);
            double t77315 = 1.0/kp;
            double t77316 = 1.0/(rho_a[index]*rho_a[index]);
            double t77317 = rho_a[index]*2.0;
            double t77318 = 1.0/pow(t77317,2.0/3.0);
            double t77319 = gamma_aa[index]*mu_*t77314*t77315*t77316*t77318*(1.0/4.0);
            double t77320 = t77319+1.0;
            double t77321 = 1.0/t77320;
            double t77322 = kp-kp*t77321+1.0;
            double t77323 = 1.0/t77313;
            double t77324 = pow(rho_a[index],2.0/3.0);
            double t77325 = 1.0/(t77313*t77313);
            double t77326 = 1.0/pow(t77313,1.0E1);
            double t77327 = 1.0/pow(t77313,1.1E1);
            double t77328 = 1.0/(t77313*t77313*t77313);
            double t77329 = 1.0/(t77313*t77313*t77313*t77313);
            double t77330 = 1.0/(t77313*t77313*t77313*t77313*t77313);
            double t77331 = 1.0/(t77313*t77313*t77313*t77313*t77313*t77313);
            double t77332 = 1.0/(t77313*t77313*t77313*t77313*t77313*t77313*t77313);
            double t77333 = 1.0/(t77313*t77313*t77313*t77313*t77313*t77313*t77313*t77313);
            double t77334 = 1.0/(t77313*t77313*t77313*t77313*t77313*t77313*t77313*t77313*t77313);
            double t77335 = a_1*t77323*t77309;
            double t77336 = a_10*t77310*t77312*t77326;
            double t77337 = a_11*t77310*t77312*t77309*t77327;
            double t77338 = a_2*t77310*t77325;
            double t77339 = a_3*t77310*t77309*t77328;
            double t77340 = a_4*t77311*t77329;
            double t77341 = a_5*t77311*t77330*t77309;
            double t77342 = a_6*t77310*t77311*t77331;
            double t77343 = a_7*t77310*t77311*t77332*t77309;
            double t77344 = a_8*t77312*t77333;
            double t77345 = a_9*t77312*t77334*t77309;
            double t77346 = t77340+t77341+t77342+t77343+t77335+t77344+t77336+t77345+t77337+t77338+t77339+1.0;
            double t77347 = 1.0/t77300;
            double t77348 = 1.0/t77304;
            double t77349 = 1.0/t77297;
            double t77350 = 1.0/t77295;
            double t77351 = 1.0/pow(t77252,4.0/3.0);
            double t77352 = b1f*t77255;
            double t77353 = b3f*t77256;
            double t77354 = b4f*t77214*t77257;
            double t77355 = b2f*c*t77253;
            double t77356 = t77352+t77353+t77354+t77355;
            double t77357 = 1.0/t77356;
            double t77358 = t77234*t77357*(1.0/2.0);
            double t77359 = t77358+1.0;
            double t77360 = log(t77359);
            double t77361 = a1f*c*t77253;
            double t77362 = t77361+1.0;
            double t77364 = c0f*t77360*t77362*2.0;
            double t77363 = -t77364+t77269;
            double t77365 = 1.0/(t77252*t77252);
            double t77393 = t77270*t77365;
            double t77366 = t77272-t77393;
            double t77367 = t77364-t77269;
            double t77368 = 1.0/pow(t77252,5.0/3.0);
            double t77369 = 1.0/sqrt(t77254);
            double t77370 = 1.0/t77265;
            double t77371 = 1.0/(t77262*t77262);
            double t77372 = b4p*t77214*t77368*(2.0/3.0);
            double t77373 = b2p*c*t77351*(1.0/3.0);
            double t77374 = b1p*c*t77351*t77369*(1.0/6.0);
            double t77375 = b3p*c*t77351*t77255*(1.0/2.0);
            double t77376 = t77372+t77373+t77374+t77375;
            double t77377 = t77370*t77371*t77268*t77376;
            double t77378 = 1.0/d2fz0;
            double t77379 = 1.0/Aa;
            double t77380 = b1a*t77255;
            double t77381 = b3a*t77256;
            double t77382 = b4a*t77214*t77257;
            double t77383 = b2a*c*t77253;
            double t77384 = t77380+t77381+t77382+t77383;
            double t77385 = 1.0/t77384;
            double t77386 = t77385*t77379*(1.0/2.0);
            double t77387 = t77386+1.0;
            double t77388 = log(t77387);
            double t77389 = a1a*c*t77253;
            double t77390 = t77389+1.0;
            double t77391 = 1.0/(t77252*t77252*t77252*t77252*t77252);
            double t77392 = pow(t77276,1.0/3.0);
            double t77394 = t77392*t77366*(4.0/3.0);
            double t77395 = pow(t77278,1.0/3.0);
            double t77396 = t77394-t77366*t77395*(4.0/3.0);
            double t77397 = t77274*t77275;
            double t77398 = t77397-1.0;
            double t77399 = a1f*c*t77210;
            double t77400 = t77399+1.0;
            double t77401 = b1f*t77212;
            double t77402 = b3f*t77213;
            double t77403 = b4f*t77214*t77215;
            double t77404 = b2f*c*t77210;
            double t77405 = t77401+t77402+t77403+t77404;
            double t77406 = 1.0/t77405;
            double t77407 = t77234*t77406*(1.0/2.0);
            double t77408 = t77407+1.0;
            double t77409 = 1.0/pow(rho_a[index],4.0/3.0);
            double t77410 = 1.0/pow(rho_a[index],5.0/3.0);
            double t77411 = 1.0/sqrt(t77211);
            double t77412 = log(t77408);
            double t77413 = 1.0/t77224;
            double t77414 = 1.0/(t77221*t77221);
            double t77415 = b4p*t77410*t77214*(2.0/3.0);
            double t77416 = b2p*c*t77409*(1.0/3.0);
            double t77417 = b1p*c*t77411*t77409*(1.0/6.0);
            double t77418 = b3p*c*t77212*t77409*(1.0/2.0);
            double t77419 = t77415+t77416+t77417+t77418;
            double t77420 = t77413*t77414*t77227*t77419;
            double t77421 = Aa*t77233*t77280*t77390*t77378*t77388*t77398*2.0;
            double t77423 = c0f*t77400*t77412*2.0;
            double t77422 = t77305-t77423;
            double t77424 = t77230*t77233*t77422;
            double t77425 = gamma_aa[index]*gamma_aa[index];
            double t77426 = gcaa*gcaa;
            double t77427 = t77425*t77425;
            double t77428 = t77426*t77426;
            double t77429 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t77430 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t77431 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t77432 = t77305-t77424;
            double t77433 = tau_a[index]-1.0/1.0E20;
            double t77434 = ( (t77433 > 0.0) ?  1.0 : 0.0 ) ;
            double t77435 = tau_a[index]*2.0;
            double t77436 = 1.0/rho_a[index];
            double t77463 = gamma_aa[index]*t77436*(1.0/4.0);
            double t77437 = t77435-t77463;
            double t77438 = t77307*t77437*(1.0/2.0);
            double t77439 = t77438-1.0;
            double t77440 = t77434*t77439;
            double t77441 = t77440+1.0;
            double t77442 = gamma_aa[index]*gcaa*t77285*4.0;
            double t77443 = gamma_aa[index]*gcaa*t77430*t77425*t77426*4.0;
            double t77444 = t77431*t77425*t77426*6.0;
            double t77445 = t77427*t77428*t77429;
            double t77446 = t77442+t77443+t77444+t77445+1.0;
            double t77447 = 1.0/t77446;
            double t77448 = gamma_aa[index]*gcaa*t77285;
            double t77449 = t77448+1.0;
            double t77450 = 1.0/t77449;
            double t77451 = gamma_aa[index]*gcaa*t77285*3.0;
            double t77452 = gamma_aa[index]*gcaa*t77430*t77425*t77426;
            double t77453 = t77431*t77425*t77426*3.0;
            double t77454 = t77451+t77452+t77453+1.0;
            double t77455 = 1.0/t77454;
            double t77456 = gamma_aa[index]*gcaa*t77285*2.0;
            double t77457 = t77431*t77425*t77426;
            double t77458 = t77456+t77457+1.0;
            double t77459 = 1.0/t77458;
            double t77460 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t77461 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t77462 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t77464 = 1.0/t77408;
            double t77465 = 1.0/(t77405*t77405);
            double t77466 = b4f*t77410*t77214*(2.0/3.0);
            double t77467 = b2f*c*t77409*(1.0/3.0);
            double t77468 = b1f*c*t77411*t77409*(1.0/6.0);
            double t77469 = b3f*c*t77212*t77409*(1.0/2.0);
            double t77470 = t77466+t77467+t77468+t77469;
            double t77471 = a1f*c*c0f*t77412*t77409*(2.0/3.0);
            double t77472 = a1p*c*c0p*t77225*t77409*(2.0/3.0);
            double t77473 = ccaa4*t77427*t77428*t77429*t77447;
            double t77474 = ccaa1*gamma_aa[index]*gcaa*t77450*t77285;
            double t77475 = ccaa3*gamma_aa[index]*gcaa*t77430*t77425*t77426*t77455;
            double t77476 = ccaa2*t77431*t77425*t77426*t77459;
            double t77477 = ccaa0+t77473+t77474+t77475+t77476;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t77282*t77349+ccab2*t77281*t77283*t77347+ccab4*t77350*t77290* \
               t77289+ccab3*gcab*t77281*t77282*t77283*t77348)*(t77421-t77305+t77424+t77269+rho_a[index]*(-t77420+ \
               t77472+t77230*t77233*(t77420+t77471-t77400*t77470*t77464*t77465-a1p*c*c0p*t77225*t77409*(2.0/3.0)) \
               )-t77252*(-t77377+t77233*t77280*t77274*t77275*(t77377-(t77362*1.0/(t77356*t77356)*(b2f*c*t77351*(1.0/ \
               3.0)+b4f*t77214*t77368*(2.0/3.0)+b1f*c*t77351*t77369*(1.0/6.0)+b3f*c*t77351*t77255*(1.0/2.0)))/t77359+ \
               a1f*c*c0f*t77351*t77360*(2.0/3.0)-a1p*c*c0p*t77351*t77266*(2.0/3.0))+a1p*c*c0p*t77351*t77266*(2.0/ \
               3.0)+t77233*t77280*t77391*t77275*t77367*4.0-t77233*t77274*t77275*t77367*t77396+t77233*t77270*t77271* \
               t77280*t77363*t77274*4.0+Aa*t77233*t77280*t77390*t77378*t77388*(t77391*t77275*4.0-t77270*t77271*t77274* \
               4.0)*2.0-Aa*t77233*t77390*t77378*t77396*t77388*t77398*2.0-(t77233*t77280*t77390*1.0/(t77384*t77384) \
               *t77378*t77398*(b2a*c*t77351*(1.0/3.0)+b4a*t77214*t77368*(2.0/3.0)+b1a*c*t77351*t77369*(1.0/6.0)+b3a* \
               c*t77351*t77255*(1.0/2.0)))/t77387+Aa*a1a*c*t77233*t77351*t77280*t77378*t77388*t77398*(2.0/3.0))+t77233* \
               t77280*t77274*t77275*t77367)-(X-1.0)*(t77322*t77346+rho_a[index]*t77322*(C_k*a_1*t77323*t77324*t77307* \
               (5.0/3.0)-C_k*a_1*t77324*t77307*t77325*t77309*(5.0/3.0)-C_k*a_2*t77310*t77324*t77307*t77328*(1.0E1/ \
               3.0)+C_k*a_2*t77324*t77307*t77325*t77309*(1.0E1/3.0)+C_k*a_3*t77310*t77324*t77307*t77328*5.0-C_k*a_4* \
               t77311*t77330*t77324*t77307*(2.0E1/3.0)+C_k*a_5*t77311*t77330*t77324*t77307*(2.5E1/3.0)-C_k*a_8*t77312* \
               t77324*t77307*t77334*(4.0E1/3.0)+C_k*a_9*t77312*t77324*t77307*t77334*1.5E1-C_k*a_10*t77310*t77312* \
               t77324*t77307*t77327*(5.0E1/3.0)+C_k*a_11*t77310*t77312*t77324*t77307*t77327*(5.5E1/3.0)+C_k*a_10* \
               t77312*t77324*t77307*t77326*t77309*(5.0E1/3.0)-C_k*a_3*t77310*t77324*t77307*t77309*t77329*5.0+C_k* \
               a_4*t77310*t77324*t77307*t77309*t77329*(2.0E1/3.0)-C_k*a_5*t77311*t77331*t77324*t77307*t77309*(2.5E1/ \
               3.0)-C_k*a_6*t77310*t77311*t77332*t77324*t77307*1.0E1+C_k*a_6*t77311*t77331*t77324*t77307*t77309*1.0E1+ \
               C_k*a_7*t77310*t77311*t77332*t77324*t77307*(3.5E1/3.0)-C_k*a_9*t77312*t77324*t77307*t77326*t77309* \
               1.5E1-C_k*a_11*t77310*t77312*1.0/pow(t77313,1.2E1)*t77324*t77307*t77309*(5.5E1/3.0)-C_k*a_7*t77310* \
               t77311*t77324*t77333*t77307*t77309*(3.5E1/3.0)+C_k*a_8*t77310*t77311*t77324*t77333*t77307*t77309*(4.0E1/ \
               3.0))-kp*rho_a[index]*1.0/(t77320*t77320)*t77346*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
               rho_a[index])*t77314*t77315*t77318*(1.0/2.0)+gamma_aa[index]*mu_*t77314*t77315*t77316*1.0/pow(t77317,5.0/ \
               3.0)*(1.0/3.0)))-(rho_a[index]*(t77305-t77230*t77233*t77422)+rho_b[index]*(t77251-t77230*t77233*(t77251- \
               c0f*log((t77234*(1.0/2.0))/(b1f*t77237+b3f*t77238+b2f*c*t77235+b4f*t77214*t77239)+1.0)*(a1f*c*t77235+ \
               1.0)*2.0))-t77252*(t77421+t77269-t77233*t77280*t77363*t77274*t77275))*(ccab1*gamma_aa[index]*gcab* \
               t77284*t77349*(4.0/3.0)-ccab2*1.0/(t77300*t77300)*t77281*t77283*(gamma_aa[index]*gcab*t77284*(8.0/ \
               3.0)+gamma_aa[index]*t77281*t77282*t77284*(8.0/3.0))-ccab4*t77290*1.0/(t77295*t77295)*t77289*(gamma_aa[index]* \
               gcab*t77284*(1.6E1/3.0)+gamma_aa[index]*t77281*t77282*t77284*1.6E1+gamma_aa[index]*gcab*t77281*t77283* \
               t77284*1.6E1+gamma_aa[index]*t77282*t77283*t77284*t77289*(1.6E1/3.0))-ccab1*gamma_aa[index]*t77281* \
               t77282*t77284*1.0/(t77297*t77297)*(4.0/3.0)+ccab2*gamma_aa[index]*t77281*t77282*t77284*t77347*(8.0/ \
               3.0)-ccab3*gcab*1.0/(t77304*t77304)*t77281*t77282*t77283*(gamma_aa[index]*gcab*t77284*4.0+gamma_aa[index]* \
               t77281*t77282*t77284*8.0+gamma_aa[index]*gcab*t77281*t77283*t77284*4.0)+ccab3*gamma_aa[index]*gcab* \
               t77281*t77283*t77284*t77348*4.0+ccab4*gamma_aa[index]*t77350*t77282*t77283*t77284*t77289*(1.6E1/3.0) \
               )-t77432*t77441*t77477+rho_a[index]*t77432*t77441*(ccaa1*gamma_aa[index]*gcaa*t77450*t77284*(8.0/3.0) \
               +ccaa2*t77460*t77425*t77426*t77459*(1.6E1/3.0)+ccaa4*t77462*t77427*t77428*t77447*(3.2E1/3.0)-ccaa1* \
               t77460*t77425*t77426*1.0/(t77449*t77449)*(8.0/3.0)-ccaa2*t77431*t77425*t77426*1.0/(t77458*t77458)* \
               (gamma_aa[index]*gcaa*t77284*(1.6E1/3.0)+t77460*t77425*t77426*(1.6E1/3.0))-ccaa4*t77427*t77428*1.0/ \
               (t77446*t77446)*t77429*(gamma_aa[index]*gcaa*t77284*(3.2E1/3.0)+t77460*t77425*t77426*3.2E1+t77462* \
               t77427*t77428*(3.2E1/3.0)+gamma_aa[index]*gcaa*t77425*t77461*t77426*3.2E1)+ccaa3*gamma_aa[index]*gcaa* \
               t77425*t77461*t77426*t77455*8.0-ccaa3*gamma_aa[index]*gcaa*t77430*t77425*t77426*1.0/(t77454*t77454) \
               *(gamma_aa[index]*gcaa*t77284*8.0+t77460*t77425*t77426*1.6E1+gamma_aa[index]*gcaa*t77425*t77461*t77426* \
               8.0))+rho_a[index]*t77441*t77477*(-t77420+t77472+t77230*t77233*(t77420+t77471-t77472-t77400*t77470* \
               t77464*t77465))-gamma_aa[index]*t77432*t77307*t77434*t77436*t77477*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            double t82609 = pow(rho_a[index],5.0/3.0);
            double t82610 = 1.0/tau_a[index];
            double t82611 = C_k*t82610*t82609;
            double t82612 = t82611-1.0;
            double t82613 = t82612*t82612;
            double t82614 = t82613*t82613;
            double t82615 = t82614*t82614;
            double t82616 = t82611+1.0;
            double t82617 = 1.0/pow(rho_a[index],1.0/3.0);
            double t82618 = c*t82617;
            double t82619 = sqrt(t82618);
            double t82620 = pow(t82618,3.0/2.0);
            double t82621 = c*c;
            double t82622 = 1.0/pow(rho_a[index],2.0/3.0);
            double t82623 = 1.0/c0p;
            double t82624 = b1p*t82619;
            double t82625 = b3p*t82620;
            double t82626 = b4p*t82621*t82622;
            double t82627 = b2p*c*t82617;
            double t82628 = t82624+t82625+t82626+t82627;
            double t82629 = 1.0/t82628;
            double t82630 = t82623*t82629*(1.0/2.0);
            double t82631 = t82630+1.0;
            double t82632 = log(t82631);
            double t82633 = a1p*c*t82617;
            double t82634 = t82633+1.0;
            double t82635 = gamma_aa[index]*gamma_aa[index];
            double t82636 = gcaa*gcaa;
            double t82637 = t82635*t82635;
            double t82638 = t82636*t82636;
            double t82639 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t82640 = 1.0/pow(rho_a[index],8.0/3.0);
            double t82641 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t82642 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t82643 = pow(2.0,1.0/3.0);
            double t82644 = t82643*2.0;
            double t82645 = t82644-2.0;
            double t82646 = two_13*2.0;
            double t82647 = t82646-2.0;
            double t82648 = 1.0/t82647;
            double t82649 = 1.0/c0f;
            double t82650 = b1f*t82619;
            double t82651 = b3f*t82620;
            double t82652 = b4f*t82621*t82622;
            double t82653 = b2f*c*t82617;
            double t82654 = t82650+t82651+t82652+t82653;
            double t82655 = 1.0/t82654;
            double t82656 = t82655*t82649*(1.0/2.0);
            double t82657 = t82656+1.0;
            double t82658 = log(t82657);
            double t82659 = a1f*c*t82617;
            double t82660 = t82659+1.0;
            double t82661 = c0f*t82660*t82658*2.0;
            double t82662 = c0p*t82632*t82634*2.0;
            double t82663 = tau_a[index]-1.0/1.0E20;
            double t82664 = ( (t82663 > 0.0) ?  1.0 : 0.0 ) ;
            double t82665 = tau_a[index]*2.0;
            double t82666 = 1.0/rho_a[index];
            double t82716 = gamma_aa[index]*t82666*(1.0/4.0);
            double t82667 = -t82716+t82665;
            double t82668 = t82610*t82667*(1.0/2.0);
            double t82669 = t82668-1.0;
            double t82670 = t82664*t82669;
            double t82671 = t82670+1.0;
            double t82672 = gamma_aa[index]*gcaa*t82640*4.0;
            double t82673 = gamma_aa[index]*gcaa*t82641*t82635*t82636*4.0;
            double t82674 = t82642*t82635*t82636*6.0;
            double t82675 = t82637*t82638*t82639;
            double t82676 = t82672+t82673+t82674+t82675+1.0;
            double t82677 = 1.0/t82676;
            double t82678 = gamma_aa[index]*gcaa*t82640;
            double t82679 = t82678+1.0;
            double t82680 = 1.0/t82679;
            double t82681 = gamma_aa[index]*gcaa*t82640*3.0;
            double t82682 = gamma_aa[index]*gcaa*t82641*t82635*t82636;
            double t82683 = t82642*t82635*t82636*3.0;
            double t82684 = t82681+t82682+t82683+1.0;
            double t82685 = 1.0/t82684;
            double t82686 = gamma_aa[index]*gcaa*t82640*2.0;
            double t82687 = t82642*t82635*t82636;
            double t82688 = t82686+t82687+1.0;
            double t82689 = 1.0/t82688;
            double t82690 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t82691 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t82692 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t82693 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t82694 = X-1.0;
            double t82695 = 1.0/(k*k);
            double t82696 = 1.0/kp;
            double t82697 = 1.0/(rho_a[index]*rho_a[index]);
            double t82698 = rho_a[index]*2.0;
            double t82699 = 1.0/pow(t82698,2.0/3.0);
            double t82700 = gamma_aa[index]*mu_*t82695*t82696*t82697*t82699*(1.0/4.0);
            double t82701 = t82700+1.0;
            double t82702 = 1.0/t82701;
            double t82703 = kp-kp*t82702+1.0;
            double t82704 = 1.0/t82616;
            double t82705 = pow(rho_a[index],2.0/3.0);
            double t82706 = 1.0/(t82616*t82616);
            double t82707 = 1.0/pow(t82616,1.0E1);
            double t82708 = 1.0/pow(t82616,1.1E1);
            double t82709 = 1.0/(t82616*t82616*t82616);
            double t82710 = 1.0/(t82616*t82616*t82616*t82616);
            double t82711 = 1.0/(t82616*t82616*t82616*t82616*t82616);
            double t82712 = 1.0/(t82616*t82616*t82616*t82616*t82616*t82616);
            double t82713 = 1.0/(t82616*t82616*t82616*t82616*t82616*t82616*t82616);
            double t82714 = 1.0/(t82616*t82616*t82616*t82616*t82616*t82616*t82616*t82616);
            double t82715 = 1.0/(t82616*t82616*t82616*t82616*t82616*t82616*t82616*t82616*t82616);
            double t82717 = 1.0/pow(rho_a[index],4.0/3.0);
            double t82718 = 1.0/pow(rho_a[index],5.0/3.0);
            double t82719 = 1.0/sqrt(t82618);
            double t82720 = 1.0/t82631;
            double t82721 = 1.0/(t82628*t82628);
            double t82722 = b4p*t82621*t82718*(2.0/3.0);
            double t82723 = b2p*c*t82717*(1.0/3.0);
            double t82724 = b1p*c*t82717*t82719*(1.0/6.0);
            double t82725 = b3p*c*t82717*t82619*(1.0/2.0);
            double t82726 = t82722+t82723+t82724+t82725;
            double t82727 = t82720*t82721*t82634*t82726;
            double t82728 = ccaa4*t82637*t82638*t82639*t82677;
            double t82729 = ccaa1*gamma_aa[index]*gcaa*t82640*t82680;
            double t82730 = ccaa3*gamma_aa[index]*gcaa*t82641*t82635*t82636*t82685;
            double t82731 = ccaa2*t82642*t82635*t82636*t82689;
            double t82732 = ccaa0+t82730+t82731+t82728+t82729;
            double t82733 = t82661-t82662;
            double t82734 = t82733*t82645*t82648;
            double t82735 = t82662+t82734;
            double t82736 = a_1*t82612*t82704;
            double t82737 = a_10*t82613*t82615*t82707;
            double t82738 = a_11*t82612*t82613*t82615*t82708;
            double t82739 = a_2*t82613*t82706;
            double t82740 = a_3*t82612*t82613*t82709;
            double t82741 = a_4*t82710*t82614;
            double t82742 = a_5*t82612*t82711*t82614;
            double t82743 = a_6*t82613*t82712*t82614;
            double t82744 = a_7*t82612*t82613*t82614*t82713;
            double t82745 = a_8*t82615*t82714;
            double t82746 = a_9*t82612*t82615*t82715;
            double t82747 = t82740+t82741+t82742+t82743+t82744+t82736+t82745+t82737+t82746+t82738+t82739+1.0;
            v_rho_a_[index] = -t82703*t82747*t82694-t82732*t82671*(t82662+t82645*t82648*(t82661-c0p*t82632*t82634* \
               2.0))+rho_a[index]*t82732*t82671*(-t82727+t82645*t82648*(t82727-(t82660*1.0/(t82654*t82654)*(b2f*c* \
               t82717*(1.0/3.0)+b4f*t82621*t82718*(2.0/3.0)+b1f*c*t82717*t82719*(1.0/6.0)+b3f*c*t82717*t82619*(1.0/ \
               2.0)))/t82657+a1f*c*c0f*t82717*t82658*(2.0/3.0)-a1p*c*c0p*t82632*t82717*(2.0/3.0))+a1p*c*c0p*t82632* \
               t82717*(2.0/3.0))-rho_a[index]*t82703*t82694*(C_k*a_1*t82610*t82704*t82705*(5.0/3.0)-C_k*a_1*t82610* \
               t82612*t82705*t82706*(5.0/3.0)+C_k*a_2*t82610*t82612*t82705*t82706*(1.0E1/3.0)-C_k*a_2*t82610*t82613* \
               t82705*t82709*(1.0E1/3.0)+C_k*a_3*t82610*t82613*t82705*t82709*5.0-C_k*a_4*t82610*t82711*t82614*t82705* \
               (2.0E1/3.0)+C_k*a_5*t82610*t82711*t82614*t82705*(2.5E1/3.0)-C_k*a_8*t82610*t82615*t82705*t82715*(4.0E1/ \
               3.0)+C_k*a_9*t82610*t82615*t82705*t82715*1.5E1+C_k*a_10*t82610*t82612*t82615*t82705*t82707*(5.0E1/ \
               3.0)-C_k*a_10*t82610*t82613*t82615*t82705*t82708*(5.0E1/3.0)+C_k*a_11*t82610*t82613*t82615*t82705* \
               t82708*(5.5E1/3.0)-C_k*a_3*t82610*t82710*t82612*t82613*t82705*5.0+C_k*a_4*t82610*t82710*t82612*t82613* \
               t82705*(2.0E1/3.0)-C_k*a_5*t82610*t82612*t82712*t82614*t82705*(2.5E1/3.0)+C_k*a_6*t82610*t82612*t82712* \
               t82614*t82705*1.0E1-C_k*a_6*t82610*t82613*t82614*t82713*t82705*1.0E1+C_k*a_7*t82610*t82613*t82614* \
               t82713*t82705*(3.5E1/3.0)-C_k*a_9*t82610*t82612*t82615*t82705*t82707*1.5E1-C_k*a_11*t82610*t82612* \
               t82613*t82615*t82705*1.0/pow(t82616,1.2E1)*(5.5E1/3.0)-C_k*a_7*t82610*t82612*t82613*t82614*t82705* \
               t82714*(3.5E1/3.0)+C_k*a_8*t82610*t82612*t82613*t82614*t82705*t82714*(4.0E1/3.0))+rho_a[index]*t82671* \
               t82735*(ccaa1*gamma_aa[index]*gcaa*t82680*t82691*(8.0/3.0)+ccaa2*t82635*t82636*t82690*t82689*(1.6E1/ \
               3.0)+ccaa4*t82637*t82638*t82693*t82677*(3.2E1/3.0)-ccaa1*t82635*t82636*t82690*1.0/(t82679*t82679)* \
               (8.0/3.0)-ccaa2*t82642*t82635*t82636*1.0/(t82688*t82688)*(gamma_aa[index]*gcaa*t82691*(1.6E1/3.0)+ \
               t82635*t82636*t82690*(1.6E1/3.0))-ccaa4*t82637*t82638*t82639*1.0/(t82676*t82676)*(gamma_aa[index]* \
               gcaa*t82691*(3.2E1/3.0)+t82635*t82636*t82690*3.2E1+t82637*t82638*t82693*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t82635*t82636*t82692*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t82635*t82636*t82692*t82685*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t82641*t82635*t82636*1.0/(t82684*t82684)*(gamma_aa[index]*gcaa*t82691*8.0+t82635* \
               t82636*t82690*1.6E1+gamma_aa[index]*gcaa*t82635*t82636*t82692*8.0))-gamma_aa[index]*t82610*t82732* \
               t82735*t82664*t82666*(1.0/8.0)+kp*rho_a[index]*1.0/(t82701*t82701)*t82747*t82694*(gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t82695*t82696*t82699*(1.0/2.0)+gamma_aa[index]*mu_* \
               t82695*t82696*t82697*1.0/pow(t82698,5.0/3.0)*(1.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t77479 = 1.0/pow(rho_a[index],1.0/3.0);
            double t77480 = c*t77479;
            double t77481 = sqrt(t77480);
            double t77482 = pow(t77480,3.0/2.0);
            double t77483 = c*c;
            double t77484 = 1.0/pow(rho_a[index],2.0/3.0);
            double t77485 = 1.0/c0p;
            double t77486 = b1p*t77481;
            double t77487 = b3p*t77482;
            double t77488 = b4p*t77483*t77484;
            double t77489 = b2p*c*t77479;
            double t77490 = t77486+t77487+t77488+t77489;
            double t77491 = 1.0/t77490;
            double t77492 = t77491*t77485*(1.0/2.0);
            double t77493 = t77492+1.0;
            double t77494 = log(t77493);
            double t77495 = a1p*c*t77479;
            double t77496 = t77495+1.0;
            double t77497 = pow(2.0,1.0/3.0);
            double t77498 = t77497*2.0;
            double t77499 = t77498-2.0;
            double t77500 = two_13*2.0;
            double t77501 = t77500-2.0;
            double t77502 = 1.0/t77501;
            double t77503 = 1.0/c0f;
            double t77504 = 1.0/pow(rho_b[index],1.0/3.0);
            double t77505 = c*t77504;
            double t77506 = sqrt(t77505);
            double t77507 = pow(t77505,3.0/2.0);
            double t77508 = 1.0/pow(rho_b[index],2.0/3.0);
            double t77509 = b1p*t77506;
            double t77510 = b3p*t77507;
            double t77511 = b4p*t77508*t77483;
            double t77512 = b2p*c*t77504;
            double t77513 = t77510+t77511+t77512+t77509;
            double t77514 = 1.0/t77513;
            double t77515 = t77514*t77485*(1.0/2.0);
            double t77516 = t77515+1.0;
            double t77517 = log(t77516);
            double t77518 = a1p*c*t77504;
            double t77519 = t77518+1.0;
            double t77520 = c0p*t77517*t77519*2.0;
            double t77521 = rho_a[index]+rho_b[index];
            double t77522 = 1.0/pow(t77521,1.0/3.0);
            double t77523 = c*t77522;
            double t77524 = sqrt(t77523);
            double t77525 = pow(t77523,3.0/2.0);
            double t77526 = 1.0/pow(t77521,2.0/3.0);
            double t77527 = b1p*t77524;
            double t77528 = b3p*t77525;
            double t77529 = b4p*t77526*t77483;
            double t77530 = b2p*c*t77522;
            double t77531 = t77530+t77527+t77528+t77529;
            double t77532 = 1.0/t77531;
            double t77533 = t77532*t77485*(1.0/2.0);
            double t77534 = t77533+1.0;
            double t77535 = log(t77534);
            double t77536 = a1p*c*t77522;
            double t77537 = t77536+1.0;
            double t77538 = c0p*t77535*t77537*2.0;
            double t77539 = rho_a[index]-rho_b[index];
            double t77540 = t77539*t77539;
            double t77541 = 1.0/t77521;
            double t77542 = t77541*t77539;
            double t77543 = 1.0/(t77521*t77521*t77521*t77521);
            double t77544 = t77540*t77540;
            double t77545 = t77542+1.0;
            double t77546 = pow(t77545,4.0/3.0);
            double t77547 = -t77542+1.0;
            double t77548 = pow(t77547,4.0/3.0);
            double t77549 = t77546+t77548-2.0;
            double t77550 = gcab*gcab;
            double t77554 = 1.0/pow(rho_a[index],8.0/3.0);
            double t77555 = gamma_aa[index]*t77554*(1.0/2.0);
            double t77556 = 1.0/pow(rho_b[index],8.0/3.0);
            double t77557 = gamma_bb[index]*t77556*(1.0/2.0);
            double t77551 = t77555+t77557;
            double t77552 = t77551*t77551;
            double t77553 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t77558 = t77550*t77550;
            double t77559 = t77552*t77552;
            double t77560 = t77550*t77552*6.0;
            double t77561 = gcab*t77550*t77551*t77552*4.0;
            double t77562 = t77558*t77559;
            double t77563 = gcab*t77551*4.0;
            double t77564 = t77560+t77561+t77562+t77563+1.0;
            double t77565 = gcab*t77551;
            double t77566 = t77565+1.0;
            double t77567 = t77550*t77552;
            double t77568 = gcab*t77551*2.0;
            double t77569 = t77567+t77568+1.0;
            double t77570 = t77550*t77552*3.0;
            double t77571 = gcab*t77550*t77551*t77552;
            double t77572 = gcab*t77551*3.0;
            double t77573 = t77570+t77571+t77572+1.0;
            double t77574 = c0p*t77494*t77496*2.0;
            double t77575 = pow(rho_b[index],5.0/3.0);
            double t77576 = 1.0/tau_b[index];
            double t77577 = C_k*t77575*t77576;
            double t77578 = t77577-1.0;
            double t77579 = t77578*t77578;
            double t77580 = t77579*t77579;
            double t77581 = t77580*t77580;
            double t77582 = t77577+1.0;
            double t77583 = 1.0/(k*k);
            double t77584 = 1.0/kp;
            double t77585 = 1.0/(rho_b[index]*rho_b[index]);
            double t77586 = rho_b[index]*2.0;
            double t77587 = 1.0/pow(t77586,2.0/3.0);
            double t77588 = gamma_bb[index]*mu_*t77583*t77584*t77585*t77587*(1.0/4.0);
            double t77589 = t77588+1.0;
            double t77590 = 1.0/t77589;
            double t77591 = kp-kp*t77590+1.0;
            double t77592 = 1.0/t77582;
            double t77593 = pow(rho_b[index],2.0/3.0);
            double t77594 = 1.0/(t77582*t77582);
            double t77595 = 1.0/pow(t77582,1.0E1);
            double t77596 = 1.0/pow(t77582,1.1E1);
            double t77597 = 1.0/(t77582*t77582*t77582);
            double t77598 = 1.0/(t77582*t77582*t77582*t77582);
            double t77599 = 1.0/(t77582*t77582*t77582*t77582*t77582);
            double t77600 = 1.0/(t77582*t77582*t77582*t77582*t77582*t77582);
            double t77601 = 1.0/(t77582*t77582*t77582*t77582*t77582*t77582*t77582);
            double t77602 = 1.0/(t77582*t77582*t77582*t77582*t77582*t77582*t77582*t77582);
            double t77603 = 1.0/(t77582*t77582*t77582*t77582*t77582*t77582*t77582*t77582*t77582);
            double t77604 = a_1*t77592*t77578;
            double t77605 = a_10*t77581*t77595*t77579;
            double t77606 = a_11*t77581*t77578*t77596*t77579;
            double t77607 = a_2*t77594*t77579;
            double t77608 = a_3*t77578*t77579*t77597;
            double t77609 = a_4*t77580*t77598;
            double t77610 = a_5*t77580*t77578*t77599;
            double t77611 = a_6*t77600*t77580*t77579;
            double t77612 = a_7*t77601*t77580*t77578*t77579;
            double t77613 = a_8*t77602*t77581;
            double t77614 = a_9*t77603*t77581*t77578;
            double t77615 = t77610+t77611+t77612+t77604+t77613+t77605+t77614+t77606+t77607+t77608+t77609+1.0;
            double t77616 = 1.0/t77569;
            double t77617 = 1.0/t77573;
            double t77618 = 1.0/t77566;
            double t77619 = 1.0/t77564;
            double t77620 = 1.0/pow(t77521,4.0/3.0);
            double t77621 = b1f*t77524;
            double t77622 = b3f*t77525;
            double t77623 = b4f*t77526*t77483;
            double t77624 = b2f*c*t77522;
            double t77625 = t77621+t77622+t77623+t77624;
            double t77626 = 1.0/t77625;
            double t77627 = t77503*t77626*(1.0/2.0);
            double t77628 = t77627+1.0;
            double t77629 = log(t77628);
            double t77630 = a1f*c*t77522;
            double t77631 = t77630+1.0;
            double t77633 = c0f*t77631*t77629*2.0;
            double t77632 = -t77633+t77538;
            double t77634 = 1.0/(t77521*t77521);
            double t77635 = t77634*t77539;
            double t77636 = t77541+t77635;
            double t77637 = t77633-t77538;
            double t77638 = 1.0/pow(t77521,5.0/3.0);
            double t77639 = 1.0/sqrt(t77523);
            double t77640 = 1.0/t77534;
            double t77641 = 1.0/(t77531*t77531);
            double t77642 = b4p*t77483*t77638*(2.0/3.0);
            double t77643 = b2p*c*t77620*(1.0/3.0);
            double t77644 = b1p*c*t77620*t77639*(1.0/6.0);
            double t77645 = b3p*c*t77620*t77524*(1.0/2.0);
            double t77646 = t77642+t77643+t77644+t77645;
            double t77647 = 1.0/d2fz0;
            double t77648 = 1.0/Aa;
            double t77649 = b1a*t77524;
            double t77650 = b3a*t77525;
            double t77651 = b4a*t77526*t77483;
            double t77652 = b2a*c*t77522;
            double t77653 = t77650+t77651+t77652+t77649;
            double t77654 = 1.0/t77653;
            double t77655 = t77654*t77648*(1.0/2.0);
            double t77656 = t77655+1.0;
            double t77657 = log(t77656);
            double t77658 = a1a*c*t77522;
            double t77659 = t77658+1.0;
            double t77660 = 1.0/(t77521*t77521*t77521*t77521*t77521);
            double t77661 = pow(t77545,1.0/3.0);
            double t77662 = t77661*t77636*(4.0/3.0);
            double t77663 = pow(t77547,1.0/3.0);
            double t77664 = t77662-t77636*t77663*(4.0/3.0);
            double t77665 = t77543*t77544;
            double t77666 = t77665-1.0;
            double t77667 = a1f*c*t77504;
            double t77668 = t77667+1.0;
            double t77669 = b1f*t77506;
            double t77670 = b3f*t77507;
            double t77671 = b4f*t77508*t77483;
            double t77672 = b2f*c*t77504;
            double t77673 = t77670+t77671+t77672+t77669;
            double t77674 = 1.0/t77673;
            double t77675 = t77503*t77674*(1.0/2.0);
            double t77676 = t77675+1.0;
            double t77677 = 1.0/pow(rho_b[index],4.0/3.0);
            double t77678 = 1.0/pow(rho_b[index],5.0/3.0);
            double t77679 = 1.0/sqrt(t77505);
            double t77680 = log(t77676);
            double t77681 = 1.0/t77516;
            double t77682 = 1.0/(t77513*t77513);
            double t77683 = b4p*t77483*t77678*(2.0/3.0);
            double t77684 = b2p*c*t77677*(1.0/3.0);
            double t77685 = b1p*c*t77677*t77679*(1.0/6.0);
            double t77686 = b3p*c*t77506*t77677*(1.0/2.0);
            double t77687 = t77683+t77684+t77685+t77686;
            double t77688 = t77519*t77681*t77682*t77687;
            double t77692 = c0f*t77680*t77668*2.0;
            double t77689 = t77520-t77692;
            double t77690 = Aa*t77502*t77647*t77549*t77657*t77666*t77659*2.0;
            double t77691 = a1p*c*c0p*t77620*t77535*(2.0/3.0);
            double t77693 = t77502*t77499*t77689;
            double t77694 = gamma_bb[index]*gamma_bb[index];
            double t77695 = gcaa*gcaa;
            double t77696 = t77694*t77694;
            double t77697 = t77695*t77695;
            double t77698 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t77699 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t77700 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t77701 = t77520-t77693;
            double t77702 = tau_b[index]-1.0/1.0E20;
            double t77703 = ( (t77702 > 0.0) ?  1.0 : 0.0 ) ;
            double t77704 = tau_b[index]*2.0;
            double t77705 = 1.0/rho_b[index];
            double t77732 = gamma_bb[index]*t77705*(1.0/4.0);
            double t77706 = t77704-t77732;
            double t77707 = t77706*t77576*(1.0/2.0);
            double t77708 = t77707-1.0;
            double t77709 = t77703*t77708;
            double t77710 = t77709+1.0;
            double t77711 = gamma_bb[index]*gcaa*t77556*4.0;
            double t77712 = gamma_bb[index]*gcaa*t77694*t77695*t77699*4.0;
            double t77713 = t77700*t77694*t77695*6.0;
            double t77714 = t77696*t77697*t77698;
            double t77715 = t77711+t77712+t77713+t77714+1.0;
            double t77716 = 1.0/t77715;
            double t77717 = gamma_bb[index]*gcaa*t77556;
            double t77718 = t77717+1.0;
            double t77719 = 1.0/t77718;
            double t77720 = gamma_bb[index]*gcaa*t77556*3.0;
            double t77721 = gamma_bb[index]*gcaa*t77694*t77695*t77699;
            double t77722 = t77700*t77694*t77695*3.0;
            double t77723 = t77720+t77721+t77722+1.0;
            double t77724 = 1.0/t77723;
            double t77725 = gamma_bb[index]*gcaa*t77556*2.0;
            double t77726 = t77700*t77694*t77695;
            double t77727 = t77725+t77726+1.0;
            double t77728 = 1.0/t77727;
            double t77729 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t77730 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t77731 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t77733 = 1.0/t77676;
            double t77734 = 1.0/(t77673*t77673);
            double t77735 = b4f*t77483*t77678*(2.0/3.0);
            double t77736 = b2f*c*t77677*(1.0/3.0);
            double t77737 = b1f*c*t77677*t77679*(1.0/6.0);
            double t77738 = b3f*c*t77506*t77677*(1.0/2.0);
            double t77739 = t77735+t77736+t77737+t77738;
            double t77740 = a1f*c*c0f*t77680*t77677*(2.0/3.0);
            double t77741 = a1p*c*c0p*t77517*t77677*(2.0/3.0);
            double t77742 = ccaa4*t77716*t77696*t77697*t77698;
            double t77743 = ccaa1*gamma_bb[index]*gcaa*t77556*t77719;
            double t77744 = ccaa3*gamma_bb[index]*gcaa*t77724*t77694*t77695*t77699;
            double t77745 = ccaa2*t77700*t77728*t77694*t77695;
            double t77746 = ccaa0+t77742+t77743+t77744+t77745;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t77551*t77618+ccab2*t77550*t77552*t77616+ccab4*t77619*t77558* \
               t77559+ccab3*gcab*t77550*t77551*t77552*t77617)*(-t77520+t77690+t77538+t77693+rho_b[index]*(t77741- \
               t77688+t77502*t77499*(t77740+t77688-t77733*t77734*t77739*t77668-a1p*c*c0p*t77517*t77677*(2.0/3.0)) \
               )-t77521*(t77691-t77640*t77641*t77537*t77646+t77502*t77543*t77544*t77637*t77664+t77502*t77660*t77544* \
               t77637*t77549*4.0-t77502*t77543*t77544*t77549*(t77691-t77640*t77641*t77537*t77646+(t77631*1.0/(t77625* \
               t77625)*(b2f*c*t77620*(1.0/3.0)+b4f*t77483*t77638*(2.0/3.0)+b1f*c*t77620*t77639*(1.0/6.0)+b3f*c*t77620* \
               t77524*(1.0/2.0)))/t77628-a1f*c*c0f*t77620*t77629*(2.0/3.0))-t77502*t77540*t77632*t77543*t77539*t77549* \
               4.0+Aa*t77502*t77647*t77549*t77657*t77659*(t77660*t77544*4.0+t77540*t77543*t77539*4.0)*2.0+Aa*t77502* \
               t77664*t77647*t77657*t77666*t77659*2.0-(t77502*1.0/(t77653*t77653)*t77647*t77549*t77666*t77659*(b2a* \
               c*t77620*(1.0/3.0)+b4a*t77483*t77638*(2.0/3.0)+b1a*c*t77620*t77639*(1.0/6.0)+b3a*c*t77620*t77524*(1.0/ \
               2.0)))/t77656+Aa*a1a*c*t77502*t77620*t77647*t77549*t77657*t77666*(2.0/3.0))+t77502*t77543*t77544*t77637* \
               t77549)-(X-1.0)*(t77615*t77591+rho_b[index]*t77591*(C_k*a_1*t77592*t77593*t77576*(5.0/3.0)-C_k*a_1* \
               t77593*t77576*t77594*t77578*(5.0/3.0)+C_k*a_2*t77593*t77576*t77594*t77578*(1.0E1/3.0)-C_k*a_2*t77593* \
               t77576*t77579*t77597*(1.0E1/3.0)+C_k*a_3*t77593*t77576*t77579*t77597*5.0-C_k*a_4*t77580*t77593*t77576* \
               t77599*(2.0E1/3.0)+C_k*a_5*t77580*t77593*t77576*t77599*(2.5E1/3.0)-C_k*a_8*t77603*t77581*t77593*t77576* \
               (4.0E1/3.0)+C_k*a_9*t77603*t77581*t77593*t77576*1.5E1+C_k*a_10*t77581*t77593*t77576*t77595*t77578* \
               (5.0E1/3.0)-C_k*a_10*t77581*t77593*t77576*t77596*t77579*(5.0E1/3.0)+C_k*a_11*t77581*t77593*t77576* \
               t77596*t77579*(5.5E1/3.0)-C_k*a_3*t77593*t77576*t77578*t77579*t77598*5.0+C_k*a_4*t77593*t77576*t77578* \
               t77579*t77598*(2.0E1/3.0)-C_k*a_5*t77600*t77580*t77593*t77576*t77578*(2.5E1/3.0)+C_k*a_6*t77600*t77580* \
               t77593*t77576*t77578*1.0E1-C_k*a_6*t77601*t77580*t77593*t77576*t77579*1.0E1+C_k*a_7*t77601*t77580* \
               t77593*t77576*t77579*(3.5E1/3.0)-C_k*a_9*t77581*t77593*t77576*t77595*t77578*1.5E1-C_k*a_11*t77581* \
               1.0/pow(t77582,1.2E1)*t77593*t77576*t77578*t77579*(5.5E1/3.0)-C_k*a_7*t77602*t77580*t77593*t77576* \
               t77578*t77579*(3.5E1/3.0)+C_k*a_8*t77602*t77580*t77593*t77576*t77578*t77579*(4.0E1/3.0))-kp*rho_b[index]* \
               t77615*1.0/(t77589*t77589)*(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t77583* \
               t77584*t77587*(1.0/2.0)+gamma_bb[index]*mu_*t77583*t77584*t77585*1.0/pow(t77586,5.0/3.0)*(1.0/3.0) \
               ))-(rho_b[index]*(t77520-t77502*t77499*t77689)+rho_a[index]*(t77574-t77502*t77499*(t77574-c0f*log((t77503* \
               (1.0/2.0))/(b1f*t77481+b3f*t77482+b2f*c*t77479+b4f*t77483*t77484)+1.0)*(a1f*c*t77479+1.0)*2.0))-t77521* \
               (t77690+t77538-t77502*t77632*t77543*t77544*t77549))*(ccab1*gamma_bb[index]*gcab*t77553*t77618*(4.0/ \
               3.0)-ccab2*t77550*t77552*1.0/(t77569*t77569)*(gamma_bb[index]*gcab*t77553*(8.0/3.0)+gamma_bb[index]* \
               t77550*t77551*t77553*(8.0/3.0))-ccab4*1.0/(t77564*t77564)*t77558*t77559*(gamma_bb[index]*gcab*t77553* \
               (1.6E1/3.0)+gamma_bb[index]*t77550*t77551*t77553*1.6E1+gamma_bb[index]*gcab*t77550*t77552*t77553*1.6E1+ \
               gamma_bb[index]*t77551*t77552*t77553*t77558*(1.6E1/3.0))-ccab1*gamma_bb[index]*t77550*t77551*t77553* \
               1.0/(t77566*t77566)*(4.0/3.0)+ccab2*gamma_bb[index]*t77550*t77551*t77553*t77616*(8.0/3.0)-ccab3*gcab* \
               t77550*t77551*t77552*1.0/(t77573*t77573)*(gamma_bb[index]*gcab*t77553*4.0+gamma_bb[index]*t77550*t77551* \
               t77553*8.0+gamma_bb[index]*gcab*t77550*t77552*t77553*4.0)+ccab3*gamma_bb[index]*gcab*t77550*t77552* \
               t77553*t77617*4.0+ccab4*gamma_bb[index]*t77551*t77552*t77553*t77619*t77558*(1.6E1/3.0))-t77701*t77710* \
               t77746+rho_b[index]*t77701*t77710*(ccaa1*gamma_bb[index]*gcaa*t77553*t77719*(8.0/3.0)+ccaa4*t77731* \
               t77716*t77696*t77697*(3.2E1/3.0)+ccaa2*t77728*t77729*t77694*t77695*(1.6E1/3.0)-ccaa1*1.0/(t77718*t77718) \
               *t77729*t77694*t77695*(8.0/3.0)-ccaa2*t77700*1.0/(t77727*t77727)*t77694*t77695*(gamma_bb[index]*gcaa* \
               t77553*(1.6E1/3.0)+t77729*t77694*t77695*(1.6E1/3.0))-ccaa4*1.0/(t77715*t77715)*t77696*t77697*t77698* \
               (gamma_bb[index]*gcaa*t77553*(3.2E1/3.0)+t77731*t77696*t77697*(3.2E1/3.0)+t77729*t77694*t77695*3.2E1+ \
               gamma_bb[index]*gcaa*t77730*t77694*t77695*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t77730*t77724*t77694*t77695* \
               8.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t77723*t77723)*t77694*t77695*t77699*(gamma_bb[index]*gcaa*t77553* \
               8.0+t77729*t77694*t77695*1.6E1+gamma_bb[index]*gcaa*t77730*t77694*t77695*8.0))+rho_b[index]*t77710* \
               t77746*(t77741-t77688+t77502*t77499*(t77740-t77741+t77688-t77733*t77734*t77739*t77668))-gamma_bb[index]* \
               t77701*t77703*t77705*t77746*t77576*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t81484 = pow(rho_b[index],5.0/3.0);
            double t81485 = 1.0/tau_b[index];
            double t81486 = C_k*t81484*t81485;
            double t81487 = t81486-1.0;
            double t81488 = t81487*t81487;
            double t81489 = t81488*t81488;
            double t81490 = t81489*t81489;
            double t81491 = t81486+1.0;
            double t81492 = 1.0/pow(rho_b[index],1.0/3.0);
            double t81493 = c*t81492;
            double t81494 = sqrt(t81493);
            double t81495 = pow(t81493,3.0/2.0);
            double t81496 = c*c;
            double t81497 = 1.0/pow(rho_b[index],2.0/3.0);
            double t81498 = 1.0/c0p;
            double t81499 = b1p*t81494;
            double t81500 = b3p*t81495;
            double t81501 = b4p*t81496*t81497;
            double t81502 = b2p*c*t81492;
            double t81503 = t81500+t81501+t81502+t81499;
            double t81504 = 1.0/t81503;
            double t81505 = t81504*t81498*(1.0/2.0);
            double t81506 = t81505+1.0;
            double t81507 = log(t81506);
            double t81508 = a1p*c*t81492;
            double t81509 = t81508+1.0;
            double t81510 = gamma_bb[index]*gamma_bb[index];
            double t81511 = gcaa*gcaa;
            double t81512 = t81510*t81510;
            double t81513 = t81511*t81511;
            double t81514 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t81515 = 1.0/pow(rho_b[index],8.0/3.0);
            double t81516 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t81517 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t81518 = pow(2.0,1.0/3.0);
            double t81519 = t81518*2.0;
            double t81520 = t81519-2.0;
            double t81521 = two_13*2.0;
            double t81522 = t81521-2.0;
            double t81523 = 1.0/t81522;
            double t81524 = 1.0/c0f;
            double t81525 = b1f*t81494;
            double t81526 = b3f*t81495;
            double t81527 = b4f*t81496*t81497;
            double t81528 = b2f*c*t81492;
            double t81529 = t81525+t81526+t81527+t81528;
            double t81530 = 1.0/t81529;
            double t81531 = t81530*t81524*(1.0/2.0);
            double t81532 = t81531+1.0;
            double t81533 = log(t81532);
            double t81534 = a1f*c*t81492;
            double t81535 = t81534+1.0;
            double t81536 = c0f*t81533*t81535*2.0;
            double t81537 = c0p*t81507*t81509*2.0;
            double t81538 = tau_b[index]-1.0/1.0E20;
            double t81539 = ( (t81538 > 0.0) ?  1.0 : 0.0 ) ;
            double t81540 = tau_b[index]*2.0;
            double t81541 = 1.0/rho_b[index];
            double t81591 = gamma_bb[index]*t81541*(1.0/4.0);
            double t81542 = t81540-t81591;
            double t81543 = t81542*t81485*(1.0/2.0);
            double t81544 = t81543-1.0;
            double t81545 = t81544*t81539;
            double t81546 = t81545+1.0;
            double t81547 = gamma_bb[index]*gcaa*t81515*4.0;
            double t81548 = gamma_bb[index]*gcaa*t81510*t81511*t81516*4.0;
            double t81549 = t81510*t81511*t81517*6.0;
            double t81550 = t81512*t81513*t81514;
            double t81551 = t81550+t81547+t81548+t81549+1.0;
            double t81552 = 1.0/t81551;
            double t81553 = gamma_bb[index]*gcaa*t81515;
            double t81554 = t81553+1.0;
            double t81555 = 1.0/t81554;
            double t81556 = gamma_bb[index]*gcaa*t81515*3.0;
            double t81557 = gamma_bb[index]*gcaa*t81510*t81511*t81516;
            double t81558 = t81510*t81511*t81517*3.0;
            double t81559 = t81556+t81557+t81558+1.0;
            double t81560 = 1.0/t81559;
            double t81561 = gamma_bb[index]*gcaa*t81515*2.0;
            double t81562 = t81510*t81511*t81517;
            double t81563 = t81561+t81562+1.0;
            double t81564 = 1.0/t81563;
            double t81565 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t81566 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t81567 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t81568 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t81569 = X-1.0;
            double t81570 = 1.0/(k*k);
            double t81571 = 1.0/kp;
            double t81572 = 1.0/(rho_b[index]*rho_b[index]);
            double t81573 = rho_b[index]*2.0;
            double t81574 = 1.0/pow(t81573,2.0/3.0);
            double t81575 = gamma_bb[index]*mu_*t81570*t81571*t81572*t81574*(1.0/4.0);
            double t81576 = t81575+1.0;
            double t81577 = 1.0/t81576;
            double t81578 = kp-kp*t81577+1.0;
            double t81579 = 1.0/t81491;
            double t81580 = pow(rho_b[index],2.0/3.0);
            double t81581 = 1.0/(t81491*t81491);
            double t81582 = 1.0/pow(t81491,1.0E1);
            double t81583 = 1.0/pow(t81491,1.1E1);
            double t81584 = 1.0/(t81491*t81491*t81491);
            double t81585 = 1.0/(t81491*t81491*t81491*t81491);
            double t81586 = 1.0/(t81491*t81491*t81491*t81491*t81491);
            double t81587 = 1.0/(t81491*t81491*t81491*t81491*t81491*t81491);
            double t81588 = 1.0/(t81491*t81491*t81491*t81491*t81491*t81491*t81491);
            double t81589 = 1.0/(t81491*t81491*t81491*t81491*t81491*t81491*t81491*t81491);
            double t81590 = 1.0/(t81491*t81491*t81491*t81491*t81491*t81491*t81491*t81491*t81491);
            double t81592 = 1.0/pow(rho_b[index],4.0/3.0);
            double t81593 = 1.0/pow(rho_b[index],5.0/3.0);
            double t81594 = 1.0/sqrt(t81493);
            double t81595 = 1.0/t81506;
            double t81596 = 1.0/(t81503*t81503);
            double t81597 = b4p*t81593*t81496*(2.0/3.0);
            double t81598 = b2p*c*t81592*(1.0/3.0);
            double t81599 = b1p*c*t81592*t81594*(1.0/6.0);
            double t81600 = b3p*c*t81592*t81494*(1.0/2.0);
            double t81601 = t81600+t81597+t81598+t81599;
            double t81602 = t81601*t81509*t81595*t81596;
            double t81603 = ccaa4*t81512*t81513*t81514*t81552;
            double t81604 = ccaa1*gamma_bb[index]*gcaa*t81515*t81555;
            double t81605 = ccaa3*gamma_bb[index]*gcaa*t81510*t81511*t81560*t81516;
            double t81606 = ccaa2*t81510*t81511*t81517*t81564;
            double t81607 = ccaa0+t81603+t81604+t81605+t81606;
            double t81608 = t81536-t81537;
            double t81609 = t81520*t81523*t81608;
            double t81610 = t81537+t81609;
            double t81611 = a_1*t81487*t81579;
            double t81612 = a_10*t81490*t81582*t81488;
            double t81613 = a_11*t81490*t81583*t81487*t81488;
            double t81614 = a_2*t81581*t81488;
            double t81615 = a_3*t81584*t81487*t81488;
            double t81616 = a_4*t81585*t81489;
            double t81617 = a_5*t81487*t81586*t81489;
            double t81618 = a_6*t81488*t81587*t81489;
            double t81619 = a_7*t81487*t81488*t81489*t81588;
            double t81620 = a_8*t81490*t81589;
            double t81621 = a_9*t81490*t81590*t81487;
            double t81622 = t81611+t81620+t81612+t81621+t81613+t81614+t81615+t81616+t81617+t81618+t81619+1.0;
            v_rho_b_[index] = -t81622*t81569*t81578-t81607*t81546*(t81537+t81520*t81523*(t81536-c0p*t81507*t81509* \
               2.0))+rho_b[index]*t81607*t81546*(-t81602+t81520*t81523*(t81602-(t81535*1.0/(t81529*t81529)*(b2f*c* \
               t81592*(1.0/3.0)+b4f*t81593*t81496*(2.0/3.0)+b1f*c*t81592*t81594*(1.0/6.0)+b3f*c*t81592*t81494*(1.0/ \
               2.0)))/t81532+a1f*c*c0f*t81533*t81592*(2.0/3.0)-a1p*c*c0p*t81507*t81592*(2.0/3.0))+a1p*c*c0p*t81507* \
               t81592*(2.0/3.0))-rho_b[index]*t81569*t81578*(C_k*a_1*t81580*t81485*t81579*(5.0/3.0)-C_k*a_1*t81580* \
               t81581*t81485*t81487*(5.0/3.0)+C_k*a_2*t81580*t81581*t81485*t81487*(1.0E1/3.0)-C_k*a_2*t81580*t81485* \
               t81584*t81488*(1.0E1/3.0)+C_k*a_3*t81580*t81485*t81584*t81488*5.0-C_k*a_4*t81580*t81485*t81586*t81489* \
               (2.0E1/3.0)+C_k*a_5*t81580*t81485*t81586*t81489*(2.5E1/3.0)-C_k*a_8*t81490*t81580*t81590*t81485*(4.0E1/ \
               3.0)+C_k*a_9*t81490*t81580*t81590*t81485*1.5E1+C_k*a_10*t81490*t81580*t81582*t81485*t81487*(5.0E1/ \
               3.0)-C_k*a_10*t81490*t81580*t81583*t81485*t81488*(5.0E1/3.0)+C_k*a_11*t81490*t81580*t81583*t81485* \
               t81488*(5.5E1/3.0)-C_k*a_3*t81580*t81485*t81585*t81487*t81488*5.0+C_k*a_4*t81580*t81485*t81585*t81487* \
               t81488*(2.0E1/3.0)-C_k*a_5*t81580*t81485*t81487*t81587*t81489*(2.5E1/3.0)+C_k*a_6*t81580*t81485*t81487* \
               t81587*t81489*1.0E1-C_k*a_6*t81580*t81485*t81488*t81489*t81588*1.0E1+C_k*a_7*t81580*t81485*t81488* \
               t81489*t81588*(3.5E1/3.0)-C_k*a_9*t81490*t81580*t81582*t81485*t81487*1.5E1-C_k*a_11*t81490*t81580* \
               1.0/pow(t81491,1.2E1)*t81485*t81487*t81488*(5.5E1/3.0)-C_k*a_7*t81580*t81485*t81487*t81488*t81489* \
               t81589*(3.5E1/3.0)+C_k*a_8*t81580*t81485*t81487*t81488*t81489*t81589*(4.0E1/3.0))+rho_b[index]*t81610* \
               t81546*(ccaa1*gamma_bb[index]*gcaa*t81555*t81566*(8.0/3.0)+ccaa2*t81510*t81511*t81564*t81565*(1.6E1/ \
               3.0)+ccaa4*t81512*t81513*t81552*t81568*(3.2E1/3.0)-ccaa1*t81510*t81511*1.0/(t81554*t81554)*t81565* \
               (8.0/3.0)-ccaa2*t81510*t81511*t81517*1.0/(t81563*t81563)*(gamma_bb[index]*gcaa*t81566*(1.6E1/3.0)+ \
               t81510*t81511*t81565*(1.6E1/3.0))-ccaa4*t81512*t81513*t81514*1.0/(t81551*t81551)*(gamma_bb[index]* \
               gcaa*t81566*(3.2E1/3.0)+t81510*t81511*t81565*3.2E1+t81512*t81513*t81568*(3.2E1/3.0)+gamma_bb[index]* \
               gcaa*t81510*t81511*t81567*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t81510*t81511*t81560*t81567*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t81510*t81511*t81516*1.0/(t81559*t81559)*(gamma_bb[index]*gcaa*t81566*8.0+t81510* \
               t81511*t81565*1.6E1+gamma_bb[index]*gcaa*t81510*t81511*t81567*8.0))-gamma_bb[index]*t81610*t81541* \
               t81607*t81485*t81539*(1.0/8.0)+kp*rho_b[index]*t81622*1.0/(t81576*t81576)*t81569*(gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t81570*t81571*t81574*(1.0/2.0)+gamma_bb[index]*mu_* \
               t81570*t81571*t81572*1.0/pow(t81573,5.0/3.0)*(1.0/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t77748 = 1.0/pow(rho_a[index],1.0/3.0);
                double t77749 = c*t77748;
                double t77750 = sqrt(t77749);
                double t77751 = pow(t77749,3.0/2.0);
                double t77752 = c*c;
                double t77753 = 1.0/pow(rho_a[index],2.0/3.0);
                double t77754 = 1.0/c0p;
                double t77755 = b1p*t77750;
                double t77756 = b3p*t77751;
                double t77757 = b4p*t77752*t77753;
                double t77758 = b2p*c*t77748;
                double t77759 = t77755+t77756+t77757+t77758;
                double t77760 = 1.0/t77759;
                double t77761 = t77760*t77754*(1.0/2.0);
                double t77762 = t77761+1.0;
                double t77763 = log(t77762);
                double t77764 = a1p*c*t77748;
                double t77765 = t77764+1.0;
                double t77766 = pow(2.0,1.0/3.0);
                double t77767 = t77766*2.0;
                double t77768 = t77767-2.0;
                double t77769 = two_13*2.0;
                double t77770 = t77769-2.0;
                double t77771 = 1.0/t77770;
                double t77772 = 1.0/c0f;
                double t77773 = 1.0/pow(rho_b[index],1.0/3.0);
                double t77774 = c*t77773;
                double t77775 = sqrt(t77774);
                double t77776 = pow(t77774,3.0/2.0);
                double t77777 = 1.0/pow(rho_b[index],2.0/3.0);
                double t77778 = b1p*t77775;
                double t77779 = b3p*t77776;
                double t77780 = b4p*t77752*t77777;
                double t77781 = b2p*c*t77773;
                double t77782 = t77780+t77781+t77778+t77779;
                double t77783 = 1.0/t77782;
                double t77784 = t77754*t77783*(1.0/2.0);
                double t77785 = t77784+1.0;
                double t77786 = log(t77785);
                double t77787 = a1p*c*t77773;
                double t77788 = t77787+1.0;
                double t77789 = c0p*t77786*t77788*2.0;
                double t77790 = rho_a[index]+rho_b[index];
                double t77791 = 1.0/pow(t77790,1.0/3.0);
                double t77792 = c*t77791;
                double t77793 = sqrt(t77792);
                double t77794 = pow(t77792,3.0/2.0);
                double t77795 = 1.0/pow(t77790,2.0/3.0);
                double t77796 = b1p*t77793;
                double t77797 = b3p*t77794;
                double t77798 = b4p*t77752*t77795;
                double t77799 = b2p*c*t77791;
                double t77800 = t77796+t77797+t77798+t77799;
                double t77801 = 1.0/t77800;
                double t77802 = t77801*t77754*(1.0/2.0);
                double t77803 = t77802+1.0;
                double t77804 = log(t77803);
                double t77805 = a1p*c*t77791;
                double t77806 = t77805+1.0;
                double t77807 = c0p*t77804*t77806*2.0;
                double t77808 = rho_a[index]-rho_b[index];
                double t77809 = t77808*t77808;
                double t77810 = 1.0/t77790;
                double t77811 = t77810*t77808;
                double t77812 = 1.0/(t77790*t77790*t77790*t77790);
                double t77813 = t77809*t77809;
                double t77814 = t77811+1.0;
                double t77815 = pow(t77814,4.0/3.0);
                double t77816 = -t77811+1.0;
                double t77817 = pow(t77816,4.0/3.0);
                double t77818 = t77815+t77817-2.0;
                double t77819 = 1.0/pow(rho_a[index],8.0/3.0);
                double t77820 = gamma_aa[index]*t77819*(1.0/2.0);
                double t77821 = 1.0/pow(rho_b[index],8.0/3.0);
                double t77822 = gamma_bb[index]*t77821*(1.0/2.0);
                double t77823 = t77820+t77822;
                double t77824 = gcab*t77823;
                double t77825 = t77824+1.0;
                double t77826 = gcab*gcab;
                double t77827 = t77823*t77823;
                double t77828 = t77826*t77826;
                double t77829 = t77827*t77827;
                double t77830 = t77826*t77827;
                double t77831 = gcab*t77823*2.0;
                double t77832 = t77830+t77831+1.0;
                double t77833 = t77826*t77827*3.0;
                double t77834 = gcab*t77823*t77826*t77827;
                double t77835 = gcab*t77823*3.0;
                double t77836 = t77833+t77834+t77835+1.0;
                double t77837 = t77826*t77827*6.0;
                double t77838 = gcab*t77823*t77826*t77827*4.0;
                double t77839 = t77828*t77829;
                double t77840 = gcab*t77823*4.0;
                double t77841 = t77840+t77837+t77838+t77839+1.0;
                double t77842 = c0p*t77763*t77765*2.0;
                double t77843 = b1f*t77750;
                double t77844 = b3f*t77751;
                double t77845 = b4f*t77752*t77753;
                double t77846 = b2f*c*t77748;
                double t77847 = t77843+t77844+t77845+t77846;
                double t77848 = 1.0/t77847;
                double t77849 = t77772*t77848*(1.0/2.0);
                double t77850 = t77849+1.0;
                double t77851 = log(t77850);
                double t77852 = a1f*c*t77748;
                double t77853 = t77852+1.0;
                double t77863 = c0f*t77851*t77853*2.0;
                double t77854 = t77842-t77863;
                double t77864 = t77771*t77854*t77768;
                double t77855 = t77842-t77864;
                double t77856 = gamma_aa[index]*gamma_aa[index];
                double t77857 = gcaa*gcaa;
                double t77858 = t77856*t77856;
                double t77859 = t77857*t77857;
                double t77860 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t77861 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t77862 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t77865 = tau_a[index]-1.0/1.0E20;
                double t77866 = ( (t77865 > 0.0) ?  1.0 : 0.0 ) ;
                double t77867 = 1.0/tau_a[index];
                double t77868 = gamma_aa[index]*gcaa*t77819;
                double t77869 = t77868+1.0;
                double t77870 = 1.0/t77869;
                double t77871 = gamma_aa[index]*gcaa*t77819*4.0;
                double t77872 = gamma_aa[index]*gcaa*t77861*t77856*t77857*4.0;
                double t77873 = t77862*t77856*t77857*6.0;
                double t77874 = t77860*t77858*t77859;
                double t77875 = t77871+t77872+t77873+t77874+1.0;
                double t77876 = 1.0/t77875;
                double t77877 = gamma_aa[index]*gcaa*t77819*2.0;
                double t77878 = t77862*t77856*t77857;
                double t77879 = t77877+t77878+1.0;
                double t77880 = 1.0/t77879;
                double t77881 = gamma_aa[index]*gcaa*t77819*3.0;
                double t77882 = gamma_aa[index]*gcaa*t77861*t77856*t77857;
                double t77883 = t77862*t77856*t77857*3.0;
                double t77884 = t77881+t77882+t77883+1.0;
                double t77885 = 1.0/t77884;
                double t77886 = 1.0/rho_a[index];
                double t77887 = 1.0/(k*k);
                double t77888 = rho_a[index]*2.0;
                double t77889 = 1.0/pow(t77888,2.0/3.0);
                double t77890 = pow(rho_a[index],5.0/3.0);
                double t77891 = C_k*t77890*t77867;
                double t77892 = t77891-1.0;
                double t77893 = t77892*t77892;
                double t77894 = t77893*t77893;
                double t77895 = t77894*t77894;
                double t77896 = t77891+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t77855+rho_b[index]*(t77789-t77771*t77768*(t77789-c0f*log((t77772* \
                   (1.0/2.0))/(b1f*t77775+b3f*t77776+b2f*c*t77773+b4f*t77752*t77777)+1.0)*(a1f*c*t77773+1.0)*2.0))-t77790* \
                   (t77807-t77812*t77813*t77771*t77818*(t77807-c0f*log((t77772*(1.0/2.0))/(b1f*t77793+b3f*t77794+b2f* \
                   c*t77791+b4f*t77752*t77795)+1.0)*(a1f*c*t77791+1.0)*2.0)+(Aa*t77771*t77818*log((1.0/2.0)/(Aa*(b1a* \
                   t77793+b3a*t77794+b2a*c*t77791+b4a*t77752*t77795))+1.0)*(t77812*t77813-1.0)*(a1a*c*t77791+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t77819*(1.0/2.0))/t77825-ccab4*1.0/(t77841*t77841)*t77828*t77829*(gcab*t77819* \
                   2.0+t77823*t77826*t77819*6.0+gcab*t77826*t77827*t77819*6.0+t77823*t77827*t77819*t77828*2.0)-ccab2* \
                   1.0/(t77832*t77832)*t77826*t77827*(gcab*t77819+t77823*t77826*t77819)+(ccab2*t77823*t77826*t77819)/ \
                   t77832-ccab1*t77823*1.0/(t77825*t77825)*t77826*t77819*(1.0/2.0)+(ccab3*gcab*t77826*t77827*t77819*(3.0/ \
                   2.0))/t77836+(ccab4*t77823*t77827*t77819*t77828*2.0)/t77841-ccab3*gcab*t77823*t77826*t77827*1.0/(t77836* \
                   t77836)*(gcab*t77819*(3.0/2.0)+t77823*t77826*t77819*3.0+gcab*t77826*t77827*t77819*(3.0/2.0)))+t77855* \
                   t77866*t77867*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t77870*t77819+ccaa2*t77862*t77880*t77856*t77857+ccaa4* \
                   t77860*t77858*t77876*t77859+ccaa3*gamma_aa[index]*gcaa*t77861*t77856*t77857*t77885)*(1.0/8.0)-rho_a[index]* \
                   t77855*(t77866*(t77867*(tau_a[index]*2.0-gamma_aa[index]*t77886*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t77870*t77819+ccaa2*gamma_aa[index]*t77862*t77880*t77857*2.0-ccaa1*gamma_aa[index]*t77862*t77857* \
                   1.0/(t77869*t77869)-ccaa2*t77862*t77856*t77857*1.0/(t77879*t77879)*(gcaa*t77819*2.0+gamma_aa[index]* \
                   t77862*t77857*2.0)-ccaa4*t77860*1.0/(t77875*t77875)*t77858*t77859*(gcaa*t77819*4.0+gamma_aa[index]* \
                   t77862*t77857*1.2E1+gamma_aa[index]*t77860*t77856*t77859*4.0+gcaa*t77861*t77856*t77857*1.2E1)+ccaa4* \
                   gamma_aa[index]*t77860*t77856*t77876*t77859*4.0+ccaa3*gcaa*t77861*t77856*t77857*t77885*3.0-ccaa3*gamma_aa[index]* \
                   gcaa*t77861*t77856*t77857*1.0/(t77884*t77884)*(gcaa*t77819*3.0+gamma_aa[index]*t77862*t77857*6.0+gcaa* \
                   t77861*t77856*t77857*3.0))-mu_*t77886*t77887*t77889*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*t77887*t77889*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t77892)/t77896+a_2*t77893*1.0/(t77896* \
                   t77896)+a_4*t77894*1.0/(t77896*t77896*t77896*t77896)+a_8*t77895*1.0/(t77896*t77896*t77896*t77896*t77896* \
                   t77896*t77896*t77896)+a_10*t77893*t77895*1.0/pow(t77896,1.0E1)+a_3*t77892*t77893*1.0/(t77896*t77896* \
                   t77896)+a_5*t77892*t77894*1.0/(t77896*t77896*t77896*t77896*t77896)+a_6*t77893*t77894*1.0/(t77896*t77896* \
                   t77896*t77896*t77896*t77896)+a_9*t77892*t77895*1.0/(t77896*t77896*t77896*t77896*t77896*t77896*t77896* \
                   t77896*t77896)+a_11*t77892*t77893*t77895*1.0/pow(t77896,1.1E1)+a_7*t77892*t77893*t77894*1.0/(t77896* \
                   t77896*t77896*t77896*t77896*t77896*t77896)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                double t82750 = 1.0/pow(rho_a[index],1.0/3.0);
                double t82751 = c*t82750;
                double t82752 = sqrt(t82751);
                double t82753 = pow(t82751,3.0/2.0);
                double t82754 = c*c;
                double t82755 = 1.0/pow(rho_a[index],2.0/3.0);
                double t82756 = 1.0/c0p;
                double t82757 = b1p*t82752;
                double t82758 = b3p*t82753;
                double t82759 = b4p*t82754*t82755;
                double t82760 = b2p*c*t82750;
                double t82761 = t82760+t82757+t82758+t82759;
                double t82762 = 1.0/t82761;
                double t82763 = t82762*t82756*(1.0/2.0);
                double t82764 = t82763+1.0;
                double t82765 = log(t82764);
                double t82766 = a1p*c*t82750;
                double t82767 = t82766+1.0;
                double t82768 = gamma_aa[index]*gamma_aa[index];
                double t82769 = gcaa*gcaa;
                double t82770 = t82768*t82768;
                double t82771 = t82769*t82769;
                double t82772 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t82773 = 1.0/pow(rho_a[index],8.0/3.0);
                double t82774 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t82775 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t82776 = pow(2.0,1.0/3.0);
                double t82777 = t82776*2.0;
                double t82778 = t82777-2.0;
                double t82779 = two_13*2.0;
                double t82780 = t82779-2.0;
                double t82781 = 1.0/t82780;
                double t82782 = 1.0/c0f;
                double t82783 = b1f*t82752;
                double t82784 = b3f*t82753;
                double t82785 = b4f*t82754*t82755;
                double t82786 = b2f*c*t82750;
                double t82787 = t82783+t82784+t82785+t82786;
                double t82788 = 1.0/t82787;
                double t82789 = t82782*t82788*(1.0/2.0);
                double t82790 = t82789+1.0;
                double t82791 = log(t82790);
                double t82792 = a1f*c*t82750;
                double t82793 = t82792+1.0;
                double t82794 = c0f*t82791*t82793*2.0;
                double t82795 = c0p*t82765*t82767*2.0;
                double t82796 = tau_a[index]-1.0/1.0E20;
                double t82797 = ( (t82796 > 0.0) ?  1.0 : 0.0 ) ;
                double t82798 = 1.0/tau_a[index];
                double t82799 = gamma_aa[index]*gcaa*t82773;
                double t82800 = t82799+1.0;
                double t82801 = 1.0/t82800;
                double t82802 = gamma_aa[index]*gcaa*t82773*4.0;
                double t82803 = gamma_aa[index]*gcaa*t82774*t82768*t82769*4.0;
                double t82804 = t82775*t82768*t82769*6.0;
                double t82805 = t82770*t82771*t82772;
                double t82806 = t82802+t82803+t82804+t82805+1.0;
                double t82807 = 1.0/t82806;
                double t82808 = gamma_aa[index]*gcaa*t82773*2.0;
                double t82809 = t82775*t82768*t82769;
                double t82810 = t82808+t82809+1.0;
                double t82811 = 1.0/t82810;
                double t82812 = gamma_aa[index]*gcaa*t82773*3.0;
                double t82813 = gamma_aa[index]*gcaa*t82774*t82768*t82769;
                double t82814 = t82775*t82768*t82769*3.0;
                double t82815 = t82812+t82813+t82814+1.0;
                double t82816 = 1.0/t82815;
                double t82817 = 1.0/rho_a[index];
                double t82818 = 1.0/(k*k);
                double t82819 = rho_a[index]*2.0;
                double t82820 = 1.0/pow(t82819,2.0/3.0);
                double t82821 = pow(rho_a[index],5.0/3.0);
                double t82822 = C_k*t82821*t82798;
                double t82823 = t82822-1.0;
                double t82824 = t82823*t82823;
                double t82825 = t82824*t82824;
                double t82826 = t82825*t82825;
                double t82827 = t82822+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(t82795+t82781*t82778*(t82794-t82795))*(t82797*(t82798*(tau_a[index]* \
                   2.0-gamma_aa[index]*t82817*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t82801*t82773+ccaa2*gamma_aa[index]* \
                   t82811*t82775*t82769*2.0-ccaa1*gamma_aa[index]*1.0/(t82800*t82800)*t82775*t82769-ccaa2*1.0/(t82810* \
                   t82810)*t82775*t82768*t82769*(gcaa*t82773*2.0+gamma_aa[index]*t82775*t82769*2.0)-ccaa4*t82770*1.0/ \
                   (t82806*t82806)*t82771*t82772*(gcaa*t82773*4.0+gamma_aa[index]*t82775*t82769*1.2E1+gamma_aa[index]* \
                   t82771*t82772*t82768*4.0+gcaa*t82774*t82768*t82769*1.2E1)+ccaa4*gamma_aa[index]*t82771*t82807*t82772* \
                   t82768*4.0+ccaa3*gcaa*t82816*t82774*t82768*t82769*3.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t82815*t82815) \
                   *t82774*t82768*t82769*(gcaa*t82773*3.0+gamma_aa[index]*t82775*t82769*6.0+gcaa*t82774*t82768*t82769* \
                   3.0))+t82797*t82798*(t82795+t82781*t82778*(t82794-c0p*t82765*t82767*2.0))*(ccaa0+ccaa1*gamma_aa[index]* \
                   gcaa*t82801*t82773+ccaa4*t82770*t82771*t82807*t82772+ccaa2*t82811*t82775*t82768*t82769+ccaa3*gamma_aa[index]* \
                   gcaa*t82816*t82774*t82768*t82769)*(1.0/8.0)-mu_*t82820*t82817*t82818*1.0/pow((gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index])*t82820*t82818*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t82823)/t82827+ \
                   a_2*t82824*1.0/(t82827*t82827)+a_4*t82825*1.0/(t82827*t82827*t82827*t82827)+a_8*t82826*1.0/(t82827* \
                   t82827*t82827*t82827*t82827*t82827*t82827*t82827)+a_10*t82824*t82826*1.0/pow(t82827,1.0E1)+a_3*t82823* \
                   t82824*1.0/(t82827*t82827*t82827)+a_5*t82823*t82825*1.0/(t82827*t82827*t82827*t82827*t82827)+a_6*t82824* \
                   t82825*1.0/(t82827*t82827*t82827*t82827*t82827*t82827)+a_9*t82823*t82826*1.0/(t82827*t82827*t82827* \
                   t82827*t82827*t82827*t82827*t82827*t82827)+a_11*t82823*t82824*t82826*1.0/pow(t82827,1.1E1)+a_7*t82823* \
                   t82824*t82825*1.0/(t82827*t82827*t82827*t82827*t82827*t82827*t82827)+1.0)*(1.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t77899 = 1.0/pow(rho_a[index],1.0/3.0);
                double t77900 = c*t77899;
                double t77901 = sqrt(t77900);
                double t77902 = pow(t77900,3.0/2.0);
                double t77903 = c*c;
                double t77904 = 1.0/pow(rho_a[index],2.0/3.0);
                double t77905 = 1.0/c0p;
                double t77906 = b1p*t77901;
                double t77907 = b3p*t77902;
                double t77908 = b4p*t77903*t77904;
                double t77909 = b2p*c*t77899;
                double t77910 = t77906+t77907+t77908+t77909;
                double t77911 = 1.0/t77910;
                double t77912 = t77911*t77905*(1.0/2.0);
                double t77913 = t77912+1.0;
                double t77914 = log(t77913);
                double t77915 = a1p*c*t77899;
                double t77916 = t77915+1.0;
                double t77917 = pow(2.0,1.0/3.0);
                double t77918 = t77917*2.0;
                double t77919 = t77918-2.0;
                double t77920 = two_13*2.0;
                double t77921 = t77920-2.0;
                double t77922 = 1.0/t77921;
                double t77923 = 1.0/c0f;
                double t77924 = 1.0/pow(rho_b[index],1.0/3.0);
                double t77925 = c*t77924;
                double t77926 = sqrt(t77925);
                double t77927 = pow(t77925,3.0/2.0);
                double t77928 = 1.0/pow(rho_b[index],2.0/3.0);
                double t77929 = b1p*t77926;
                double t77930 = b3p*t77927;
                double t77931 = b4p*t77903*t77928;
                double t77932 = b2p*c*t77924;
                double t77933 = t77930+t77931+t77932+t77929;
                double t77934 = 1.0/t77933;
                double t77935 = t77905*t77934*(1.0/2.0);
                double t77936 = t77935+1.0;
                double t77937 = log(t77936);
                double t77938 = a1p*c*t77924;
                double t77939 = t77938+1.0;
                double t77940 = c0p*t77937*t77939*2.0;
                double t77941 = rho_a[index]+rho_b[index];
                double t77942 = 1.0/pow(t77941,1.0/3.0);
                double t77943 = c*t77942;
                double t77944 = sqrt(t77943);
                double t77945 = pow(t77943,3.0/2.0);
                double t77946 = 1.0/pow(t77941,2.0/3.0);
                double t77947 = b1p*t77944;
                double t77948 = b3p*t77945;
                double t77949 = b4p*t77903*t77946;
                double t77950 = b2p*c*t77942;
                double t77951 = t77950+t77947+t77948+t77949;
                double t77952 = 1.0/t77951;
                double t77953 = t77905*t77952*(1.0/2.0);
                double t77954 = t77953+1.0;
                double t77955 = log(t77954);
                double t77956 = a1p*c*t77942;
                double t77957 = t77956+1.0;
                double t77958 = c0p*t77955*t77957*2.0;
                double t77959 = rho_a[index]-rho_b[index];
                double t77960 = t77959*t77959;
                double t77961 = 1.0/t77941;
                double t77962 = t77961*t77959;
                double t77963 = 1.0/(t77941*t77941*t77941*t77941);
                double t77964 = t77960*t77960;
                double t77965 = t77962+1.0;
                double t77966 = pow(t77965,4.0/3.0);
                double t77967 = -t77962+1.0;
                double t77968 = pow(t77967,4.0/3.0);
                double t77969 = t77966+t77968-2.0;
                double t77970 = 1.0/pow(rho_b[index],8.0/3.0);
                double t77971 = 1.0/pow(rho_a[index],8.0/3.0);
                double t77972 = gamma_aa[index]*t77971*(1.0/2.0);
                double t77973 = gamma_bb[index]*t77970*(1.0/2.0);
                double t77974 = t77972+t77973;
                double t77975 = gcab*t77974;
                double t77976 = t77975+1.0;
                double t77977 = gcab*gcab;
                double t77978 = t77974*t77974;
                double t77979 = t77977*t77977;
                double t77980 = t77978*t77978;
                double t77981 = t77977*t77978;
                double t77982 = gcab*t77974*2.0;
                double t77983 = t77981+t77982+1.0;
                double t77984 = t77977*t77978*3.0;
                double t77985 = gcab*t77974*t77977*t77978;
                double t77986 = gcab*t77974*3.0;
                double t77987 = t77984+t77985+t77986+1.0;
                double t77988 = t77977*t77978*6.0;
                double t77989 = gcab*t77974*t77977*t77978*4.0;
                double t77990 = t77980*t77979;
                double t77991 = gcab*t77974*4.0;
                double t77992 = t77990+t77991+t77988+t77989+1.0;
                double t77993 = c0p*t77914*t77916*2.0;
                double t77994 = b1f*t77926;
                double t77995 = b3f*t77927;
                double t77996 = b4f*t77903*t77928;
                double t77997 = b2f*c*t77924;
                double t77998 = t77994+t77995+t77996+t77997;
                double t77999 = 1.0/t77998;
                double t78000 = t77923*t77999*(1.0/2.0);
                double t78001 = t78000+1.0;
                double t78002 = log(t78001);
                double t78003 = a1f*c*t77924;
                double t78004 = t78003+1.0;
                double t78014 = c0f*t78002*t78004*2.0;
                double t78005 = t77940-t78014;
                double t78015 = t77922*t77919*t78005;
                double t78006 = t77940-t78015;
                double t78007 = gamma_bb[index]*gamma_bb[index];
                double t78008 = gcaa*gcaa;
                double t78009 = t78007*t78007;
                double t78010 = t78008*t78008;
                double t78011 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t78012 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t78013 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t78016 = tau_b[index]-1.0/1.0E20;
                double t78017 = ( (t78016 > 0.0) ?  1.0 : 0.0 ) ;
                double t78018 = 1.0/tau_b[index];
                double t78019 = gamma_bb[index]*gcaa*t77970;
                double t78020 = t78019+1.0;
                double t78021 = 1.0/t78020;
                double t78022 = gamma_bb[index]*gcaa*t77970*4.0;
                double t78023 = gamma_bb[index]*gcaa*t78012*t78007*t78008*4.0;
                double t78024 = t78013*t78007*t78008*6.0;
                double t78025 = t78010*t78011*t78009;
                double t78026 = t78022+t78023+t78024+t78025+1.0;
                double t78027 = 1.0/t78026;
                double t78028 = gamma_bb[index]*gcaa*t77970*2.0;
                double t78029 = t78013*t78007*t78008;
                double t78030 = t78028+t78029+1.0;
                double t78031 = 1.0/t78030;
                double t78032 = gamma_bb[index]*gcaa*t77970*3.0;
                double t78033 = gamma_bb[index]*gcaa*t78012*t78007*t78008;
                double t78034 = t78013*t78007*t78008*3.0;
                double t78035 = t78032+t78033+t78034+1.0;
                double t78036 = 1.0/t78035;
                double t78037 = 1.0/rho_b[index];
                double t78038 = 1.0/(k*k);
                double t78039 = rho_b[index]*2.0;
                double t78040 = 1.0/pow(t78039,2.0/3.0);
                double t78041 = pow(rho_b[index],5.0/3.0);
                double t78042 = C_k*t78041*t78018;
                double t78043 = t78042-1.0;
                double t78044 = t78043*t78043;
                double t78045 = t78044*t78044;
                double t78046 = t78045*t78045;
                double t78047 = t78042+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t78006+rho_a[index]*(t77993-t77922*t77919*(t77993-c0f*log((t77923* \
                   (1.0/2.0))/(b1f*t77901+b3f*t77902+b2f*c*t77899+b4f*t77903*t77904)+1.0)*(a1f*c*t77899+1.0)*2.0))-t77941* \
                   (t77958-t77922*t77963*t77964*t77969*(t77958-c0f*log((t77923*(1.0/2.0))/(b1f*t77944+b3f*t77945+b2f* \
                   c*t77942+b4f*t77903*t77946)+1.0)*(a1f*c*t77942+1.0)*2.0)+(Aa*t77922*t77969*log((1.0/2.0)/(Aa*(b1a* \
                   t77944+b3a*t77945+b2a*c*t77942+b4a*t77903*t77946))+1.0)*(t77963*t77964-1.0)*(a1a*c*t77942+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t77970*(1.0/2.0))/t77976-ccab4*t77980*1.0/(t77992*t77992)*t77979*(gcab*t77970* \
                   2.0+t77970*t77974*t77977*6.0+gcab*t77970*t77977*t77978*6.0+t77970*t77974*t77978*t77979*2.0)-ccab2* \
                   1.0/(t77983*t77983)*t77977*t77978*(gcab*t77970+t77970*t77974*t77977)+(ccab2*t77970*t77974*t77977)/ \
                   t77983-ccab1*t77970*t77974*1.0/(t77976*t77976)*t77977*(1.0/2.0)+(ccab3*gcab*t77970*t77977*t77978*(3.0/ \
                   2.0))/t77987+(ccab4*t77970*t77974*t77978*t77979*2.0)/t77992-ccab3*gcab*t77974*t77977*t77978*1.0/(t77987* \
                   t77987)*(gcab*t77970*(3.0/2.0)+t77970*t77974*t77977*3.0+gcab*t77970*t77977*t77978*(3.0/2.0)))+t78006* \
                   t78017*t78018*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t77970*t78021+ccaa2*t78013*t78031*t78007*t78008+ccaa4* \
                   t78010*t78011*t78009*t78027+ccaa3*gamma_bb[index]*gcaa*t78012*t78007*t78008*t78036)*(1.0/8.0)-rho_b[index]* \
                   t78006*(t78017*(t78018*(tau_b[index]*2.0-gamma_bb[index]*t78037*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t77970*t78021+ccaa2*gamma_bb[index]*t78013*t78031*t78008*2.0-ccaa1*gamma_bb[index]*1.0/(t78020* \
                   t78020)*t78013*t78008-ccaa2*1.0/(t78030*t78030)*t78013*t78007*t78008*(gcaa*t77970*2.0+gamma_bb[index]* \
                   t78013*t78008*2.0)-ccaa4*t78010*t78011*1.0/(t78026*t78026)*t78009*(gcaa*t77970*4.0+gamma_bb[index]* \
                   t78013*t78008*1.2E1+gamma_bb[index]*t78010*t78011*t78007*4.0+gcaa*t78012*t78007*t78008*1.2E1)+ccaa4* \
                   gamma_bb[index]*t78010*t78011*t78007*t78027*4.0+ccaa3*gcaa*t78012*t78007*t78008*t78036*3.0-ccaa3*gamma_bb[index]* \
                   gcaa*t78012*t78007*t78008*1.0/(t78035*t78035)*(gcaa*t77970*3.0+gamma_bb[index]*t78013*t78008*6.0+gcaa* \
                   t78012*t78007*t78008*3.0))-mu_*t78040*t78037*t78038*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*t78040*t78038*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t78043)/t78047+a_2*t78044*1.0/(t78047* \
                   t78047)+a_4*t78045*1.0/(t78047*t78047*t78047*t78047)+a_8*t78046*1.0/(t78047*t78047*t78047*t78047*t78047* \
                   t78047*t78047*t78047)+a_10*t78044*t78046*1.0/pow(t78047,1.0E1)+a_3*t78043*t78044*1.0/(t78047*t78047* \
                   t78047)+a_5*t78043*t78045*1.0/(t78047*t78047*t78047*t78047*t78047)+a_6*t78044*t78045*1.0/(t78047*t78047* \
                   t78047*t78047*t78047*t78047)+a_9*t78043*t78046*1.0/(t78047*t78047*t78047*t78047*t78047*t78047*t78047* \
                   t78047*t78047)+a_11*t78043*t78044*t78046*1.0/pow(t78047,1.1E1)+a_7*t78043*t78044*t78045*1.0/(t78047* \
                   t78047*t78047*t78047*t78047*t78047*t78047)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t81626 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81627 = c*t81626;
                double t81628 = sqrt(t81627);
                double t81629 = pow(t81627,3.0/2.0);
                double t81630 = c*c;
                double t81631 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81632 = 1.0/c0p;
                double t81633 = b1p*t81628;
                double t81634 = b3p*t81629;
                double t81635 = b4p*t81630*t81631;
                double t81636 = b2p*c*t81626;
                double t81637 = t81633+t81634+t81635+t81636;
                double t81638 = 1.0/t81637;
                double t81639 = t81632*t81638*(1.0/2.0);
                double t81640 = t81639+1.0;
                double t81641 = log(t81640);
                double t81642 = a1p*c*t81626;
                double t81643 = t81642+1.0;
                double t81644 = gamma_bb[index]*gamma_bb[index];
                double t81645 = gcaa*gcaa;
                double t81646 = t81644*t81644;
                double t81647 = t81645*t81645;
                double t81648 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81649 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81650 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81651 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81652 = pow(2.0,1.0/3.0);
                double t81653 = t81652*2.0;
                double t81654 = t81653-2.0;
                double t81655 = two_13*2.0;
                double t81656 = t81655-2.0;
                double t81657 = 1.0/t81656;
                double t81658 = 1.0/c0f;
                double t81659 = b1f*t81628;
                double t81660 = b3f*t81629;
                double t81661 = b4f*t81630*t81631;
                double t81662 = b2f*c*t81626;
                double t81663 = t81660+t81661+t81662+t81659;
                double t81664 = 1.0/t81663;
                double t81665 = t81664*t81658*(1.0/2.0);
                double t81666 = t81665+1.0;
                double t81667 = log(t81666);
                double t81668 = a1f*c*t81626;
                double t81669 = t81668+1.0;
                double t81670 = c0f*t81667*t81669*2.0;
                double t81671 = c0p*t81641*t81643*2.0;
                double t81672 = tau_b[index]-1.0/1.0E20;
                double t81673 = ( (t81672 > 0.0) ?  1.0 : 0.0 ) ;
                double t81674 = 1.0/tau_b[index];
                double t81675 = gamma_bb[index]*gcaa*t81649;
                double t81676 = t81675+1.0;
                double t81677 = 1.0/t81676;
                double t81678 = gamma_bb[index]*gcaa*t81649*4.0;
                double t81679 = gamma_bb[index]*gcaa*t81650*t81644*t81645*4.0;
                double t81680 = t81651*t81644*t81645*6.0;
                double t81681 = t81646*t81647*t81648;
                double t81682 = t81680+t81681+t81678+t81679+1.0;
                double t81683 = 1.0/t81682;
                double t81684 = gamma_bb[index]*gcaa*t81649*2.0;
                double t81685 = t81651*t81644*t81645;
                double t81686 = t81684+t81685+1.0;
                double t81687 = 1.0/t81686;
                double t81688 = gamma_bb[index]*gcaa*t81649*3.0;
                double t81689 = gamma_bb[index]*gcaa*t81650*t81644*t81645;
                double t81690 = t81651*t81644*t81645*3.0;
                double t81691 = t81690+t81688+t81689+1.0;
                double t81692 = 1.0/t81691;
                double t81693 = 1.0/rho_b[index];
                double t81694 = 1.0/(k*k);
                double t81695 = rho_b[index]*2.0;
                double t81696 = 1.0/pow(t81695,2.0/3.0);
                double t81697 = pow(rho_b[index],5.0/3.0);
                double t81698 = C_k*t81674*t81697;
                double t81699 = t81698-1.0;
                double t81700 = t81699*t81699;
                double t81701 = t81700*t81700;
                double t81702 = t81701*t81701;
                double t81703 = t81698+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(t81671+t81654*t81657*(t81670-t81671))*(t81673*(t81674*(tau_b[index]* \
                   2.0-gamma_bb[index]*t81693*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t81649*t81677+ccaa2*gamma_bb[index]* \
                   t81651*t81645*t81687*2.0-ccaa1*gamma_bb[index]*t81651*t81645*1.0/(t81676*t81676)-ccaa2*t81651*t81644* \
                   t81645*1.0/(t81686*t81686)*(gcaa*t81649*2.0+gamma_bb[index]*t81651*t81645*2.0)-ccaa4*t81646*1.0/(t81682* \
                   t81682)*t81647*t81648*(gcaa*t81649*4.0+gamma_bb[index]*t81651*t81645*1.2E1+gamma_bb[index]*t81644* \
                   t81647*t81648*4.0+gcaa*t81650*t81644*t81645*1.2E1)+ccaa4*gamma_bb[index]*t81644*t81647*t81683*t81648* \
                   4.0+ccaa3*gcaa*t81650*t81644*t81645*t81692*3.0-ccaa3*gamma_bb[index]*gcaa*t81650*t81644*t81645*1.0/ \
                   (t81691*t81691)*(gcaa*t81649*3.0+gamma_bb[index]*t81651*t81645*6.0+gcaa*t81650*t81644*t81645*3.0)) \
                   +t81673*t81674*(t81671+t81654*t81657*(t81670-c0p*t81641*t81643*2.0))*(ccaa0+ccaa1*gamma_bb[index]* \
                   gcaa*t81649*t81677+ccaa2*t81651*t81644*t81645*t81687+ccaa4*t81646*t81647*t81683*t81648+ccaa3*gamma_bb[index]* \
                   gcaa*t81650*t81644*t81645*t81692)*(1.0/8.0)-mu_*t81693*t81694*t81696*1.0/pow((gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index])*t81694*t81696*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t81699)/t81703+ \
                   a_2*t81700*1.0/(t81703*t81703)+a_4*t81701*1.0/(t81703*t81703*t81703*t81703)+a_8*t81702*1.0/(t81703* \
                   t81703*t81703*t81703*t81703*t81703*t81703*t81703)+a_10*t81700*t81702*1.0/pow(t81703,1.0E1)+a_3*t81700* \
                   1.0/(t81703*t81703*t81703)*t81699+a_5*t81701*1.0/(t81703*t81703*t81703*t81703*t81703)*t81699+a_6*t81700* \
                   t81701*1.0/(t81703*t81703*t81703*t81703*t81703*t81703)+a_9*t81702*1.0/(t81703*t81703*t81703*t81703* \
                   t81703*t81703*t81703*t81703*t81703)*t81699+a_11*t81700*t81702*1.0/pow(t81703,1.1E1)*t81699+a_7*t81700* \
                   t81701*1.0/(t81703*t81703*t81703*t81703*t81703*t81703*t81703)*t81699+1.0)*(1.0/4.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t78049 = pow(rho_a[index],5.0/3.0);
                double t78050 = 1.0/(tau_a[index]*tau_a[index]);
                double t78051 = 1.0/tau_a[index];
                double t78052 = C_k*t78051*t78049;
                double t78053 = t78052+1.0;
                double t78054 = t78052-1.0;
                double t78055 = 1.0/(t78053*t78053);
                double t78056 = t78054*t78054;
                double t78057 = t78056*t78056;
                double t78058 = t78057*t78057;
                double t78059 = 1.0/pow(t78053,1.1E1);
                double t78060 = 1.0/(t78053*t78053*t78053);
                double t78061 = 1.0/(t78053*t78053*t78053*t78053);
                double t78062 = 1.0/(t78053*t78053*t78053*t78053*t78053);
                double t78063 = 1.0/(t78053*t78053*t78053*t78053*t78053*t78053);
                double t78064 = 1.0/(t78053*t78053*t78053*t78053*t78053*t78053*t78053);
                double t78065 = 1.0/(t78053*t78053*t78053*t78053*t78053*t78053*t78053*t78053);
                double t78066 = 1.0/(t78053*t78053*t78053*t78053*t78053*t78053*t78053*t78053*t78053);
                double t78067 = 1.0/pow(t78053,1.0E1);
                double t78068 = 1.0/pow(rho_a[index],1.0/3.0);
                double t78069 = c*t78068;
                double t78070 = sqrt(t78069);
                double t78071 = pow(t78069,3.0/2.0);
                double t78072 = c*c;
                double t78073 = 1.0/pow(rho_a[index],2.0/3.0);
                double t78074 = 1.0/c0p;
                double t78075 = b1p*t78070;
                double t78076 = b3p*t78071;
                double t78077 = b4p*t78072*t78073;
                double t78078 = b2p*c*t78068;
                double t78079 = t78075+t78076+t78077+t78078;
                double t78080 = 1.0/t78079;
                double t78081 = t78080*t78074*(1.0/2.0);
                double t78082 = t78081+1.0;
                double t78083 = log(t78082);
                double t78084 = a1p*c*t78068;
                double t78085 = t78084+1.0;
                double t78086 = tau_a[index]-1.0/1.0E20;
                double t78087 = tau_a[index]*2.0;
                double t78088 = 1.0/rho_a[index];
                double t78089 = t78087-gamma_aa[index]*t78088*(1.0/4.0);
                double t78090 = gamma_aa[index]*gamma_aa[index];
                double t78091 = gcaa*gcaa;
                double t78092 = t78090*t78090;
                double t78093 = t78091*t78091;
                double t78094 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t78095 = 1.0/pow(rho_a[index],8.0/3.0);
                double t78096 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t78097 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t78070+ \
                   b3f*t78071+b2f*c*t78068+b4f*t78072*t78073))+1.0)*(a1f*c*t78068+1.0)*2.0-c0p*t78083*t78085*2.0))/(two_13* \
                   2.0-2.0)+c0p*t78083*t78085*2.0)*( ( (t78086 > 0.0) ? 1.0*(t78051-t78050*t78089*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t78090*t78091*t78097)/(gamma_aa[index]*gcaa*t78095*2.0+t78090*t78091*t78097+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t78095)/(gamma_aa[index]*gcaa*t78095+1.0)+(ccaa4*t78092*t78093*t78094) \
                   /(gamma_aa[index]*gcaa*t78095*4.0+t78090*t78091*t78097*6.0+t78092*t78093*t78094+gamma_aa[index]*gcaa* \
                   t78090*t78091*t78096*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t78090*t78091*t78096)/(gamma_aa[index]*gcaa* \
                   t78095*3.0+t78090*t78091*t78097*3.0+gamma_aa[index]*gcaa*t78090*t78091*t78096+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t78050*t78049)/t78053-C_k*a_1*t78050*t78054*t78055*t78049-C_k* \
                   a_2*t78050*t78060*t78056*t78049*2.0+C_k*a_2*t78050*t78054*t78055*t78049*2.0+C_k*a_3*t78050*t78060* \
                   t78056*t78049*3.0-C_k*a_4*t78050*t78062*t78057*t78049*4.0+C_k*a_5*t78050*t78062*t78057*t78049*5.0- \
                   C_k*a_8*t78050*t78066*t78049*t78058*8.0+C_k*a_9*t78050*t78066*t78049*t78058*9.0+C_k*a_10*t78050*t78054* \
                   t78049*t78058*t78067*1.0E1-C_k*a_10*t78050*t78056*t78049*t78058*t78059*1.0E1+C_k*a_11*t78050*t78056* \
                   t78049*t78058*t78059*1.1E1-C_k*a_3*t78050*t78061*t78054*t78056*t78049*3.0+C_k*a_4*t78050*t78061*t78054* \
                   t78056*t78049*4.0-C_k*a_5*t78050*t78054*t78063*t78057*t78049*5.0+C_k*a_6*t78050*t78054*t78063*t78057* \
                   t78049*6.0-C_k*a_6*t78050*t78064*t78056*t78057*t78049*6.0+C_k*a_7*t78050*t78064*t78056*t78057*t78049* \
                   7.0-C_k*a_9*t78050*t78054*t78049*t78058*t78067*9.0-C_k*a_11*t78050*1.0/pow(t78053,1.2E1)*t78054*t78056* \
                   t78049*t78058*1.1E1-C_k*a_7*t78050*t78054*t78056*t78065*t78057*t78049*7.0+C_k*a_8*t78050*t78054*t78056* \
                   t78065*t78057*t78049*8.0);
            } else if (rho_a[index] > cutoff_) {
                double t82831 = pow(rho_a[index],5.0/3.0);
                double t82832 = 1.0/(tau_a[index]*tau_a[index]);
                double t82833 = 1.0/tau_a[index];
                double t82834 = C_k*t82831*t82833;
                double t82835 = t82834+1.0;
                double t82836 = t82834-1.0;
                double t82837 = 1.0/(t82835*t82835);
                double t82838 = t82836*t82836;
                double t82839 = t82838*t82838;
                double t82840 = t82839*t82839;
                double t82841 = 1.0/pow(t82835,1.1E1);
                double t82842 = 1.0/(t82835*t82835*t82835);
                double t82843 = 1.0/(t82835*t82835*t82835*t82835);
                double t82844 = 1.0/(t82835*t82835*t82835*t82835*t82835);
                double t82845 = 1.0/(t82835*t82835*t82835*t82835*t82835*t82835);
                double t82846 = 1.0/(t82835*t82835*t82835*t82835*t82835*t82835*t82835);
                double t82847 = 1.0/(t82835*t82835*t82835*t82835*t82835*t82835*t82835*t82835);
                double t82848 = 1.0/(t82835*t82835*t82835*t82835*t82835*t82835*t82835*t82835*t82835);
                double t82849 = 1.0/pow(t82835,1.0E1);
                double t82850 = 1.0/pow(rho_a[index],1.0/3.0);
                double t82851 = c*t82850;
                double t82852 = sqrt(t82851);
                double t82853 = pow(t82851,3.0/2.0);
                double t82854 = c*c;
                double t82855 = 1.0/pow(rho_a[index],2.0/3.0);
                double t82856 = 1.0/c0p;
                double t82857 = b1p*t82852;
                double t82858 = b3p*t82853;
                double t82859 = b4p*t82854*t82855;
                double t82860 = b2p*c*t82850;
                double t82861 = t82860+t82857+t82858+t82859;
                double t82862 = 1.0/t82861;
                double t82863 = t82862*t82856*(1.0/2.0);
                double t82864 = t82863+1.0;
                double t82865 = log(t82864);
                double t82866 = a1p*c*t82850;
                double t82867 = t82866+1.0;
                double t82868 = tau_a[index]-1.0/1.0E20;
                double t82869 = tau_a[index]*2.0;
                double t82870 = 1.0/rho_a[index];
                double t82871 = t82869-gamma_aa[index]*t82870*(1.0/4.0);
                double t82872 = gamma_aa[index]*gamma_aa[index];
                double t82873 = gcaa*gcaa;
                double t82874 = t82872*t82872;
                double t82875 = t82873*t82873;
                double t82876 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t82877 = 1.0/pow(rho_a[index],8.0/3.0);
                double t82878 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t82879 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t82852+ \
                   b3f*t82853+b2f*c*t82850+b4f*t82854*t82855))+1.0)*(a1f*c*t82850+1.0)*2.0-c0p*t82865*t82867*2.0))/(two_13* \
                   2.0-2.0)+c0p*t82865*t82867*2.0)*( ( (t82868 > 0.0) ? 1.0*(t82833-t82832*t82871*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t82872*t82873*t82879)/(gamma_aa[index]*gcaa*t82877*2.0+t82872*t82873*t82879+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t82877)/(gamma_aa[index]*gcaa*t82877+1.0)+(ccaa4*t82874*t82875*t82876) \
                   /(gamma_aa[index]*gcaa*t82877*4.0+t82872*t82873*t82879*6.0+t82874*t82875*t82876+gamma_aa[index]*gcaa* \
                   t82872*t82873*t82878*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t82872*t82873*t82878)/(gamma_aa[index]*gcaa* \
                   t82877*3.0+t82872*t82873*t82879*3.0+gamma_aa[index]*gcaa*t82872*t82873*t82878+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t82831*t82832)/t82835-C_k*a_1*t82831*t82832*t82836*t82837-C_k* \
                   a_2*t82831*t82832*t82842*t82838*2.0+C_k*a_2*t82831*t82832*t82836*t82837*2.0+C_k*a_3*t82831*t82832* \
                   t82842*t82838*3.0-C_k*a_4*t82831*t82832*t82844*t82839*4.0+C_k*a_5*t82831*t82832*t82844*t82839*5.0- \
                   C_k*a_8*t82831*t82840*t82832*t82848*8.0+C_k*a_9*t82831*t82840*t82832*t82848*9.0-C_k*a_10*t82831*t82840* \
                   t82832*t82841*t82838*1.0E1+C_k*a_11*t82831*t82840*t82832*t82841*t82838*1.1E1+C_k*a_10*t82831*t82840* \
                   t82832*t82836*t82849*1.0E1-C_k*a_3*t82831*t82832*t82843*t82836*t82838*3.0+C_k*a_4*t82831*t82832*t82843* \
                   t82836*t82838*4.0-C_k*a_5*t82831*t82832*t82836*t82845*t82839*5.0+C_k*a_6*t82831*t82832*t82836*t82845* \
                   t82839*6.0-C_k*a_6*t82831*t82832*t82846*t82838*t82839*6.0+C_k*a_7*t82831*t82832*t82846*t82838*t82839* \
                   7.0-C_k*a_9*t82831*t82840*t82832*t82836*t82849*9.0-C_k*a_11*t82831*t82840*t82832*1.0/pow(t82835,1.2E1) \
                   *t82836*t82838*1.1E1-C_k*a_7*t82831*t82832*t82836*t82838*t82847*t82839*7.0+C_k*a_8*t82831*t82832*t82836* \
                   t82838*t82847*t82839*8.0);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t78099 = pow(rho_b[index],5.0/3.0);
                double t78100 = 1.0/(tau_b[index]*tau_b[index]);
                double t78101 = 1.0/tau_b[index];
                double t78102 = C_k*t78101*t78099;
                double t78103 = t78102+1.0;
                double t78104 = t78102-1.0;
                double t78105 = 1.0/(t78103*t78103);
                double t78106 = t78104*t78104;
                double t78107 = t78106*t78106;
                double t78108 = t78107*t78107;
                double t78109 = 1.0/pow(t78103,1.1E1);
                double t78110 = 1.0/(t78103*t78103*t78103);
                double t78111 = 1.0/(t78103*t78103*t78103*t78103);
                double t78112 = 1.0/(t78103*t78103*t78103*t78103*t78103);
                double t78113 = 1.0/(t78103*t78103*t78103*t78103*t78103*t78103);
                double t78114 = 1.0/(t78103*t78103*t78103*t78103*t78103*t78103*t78103);
                double t78115 = 1.0/(t78103*t78103*t78103*t78103*t78103*t78103*t78103*t78103);
                double t78116 = 1.0/(t78103*t78103*t78103*t78103*t78103*t78103*t78103*t78103*t78103);
                double t78117 = 1.0/pow(t78103,1.0E1);
                double t78118 = 1.0/pow(rho_b[index],1.0/3.0);
                double t78119 = c*t78118;
                double t78120 = sqrt(t78119);
                double t78121 = pow(t78119,3.0/2.0);
                double t78122 = c*c;
                double t78123 = 1.0/pow(rho_b[index],2.0/3.0);
                double t78124 = 1.0/c0p;
                double t78125 = b1p*t78120;
                double t78126 = b3p*t78121;
                double t78127 = b4p*t78122*t78123;
                double t78128 = b2p*c*t78118;
                double t78129 = t78125+t78126+t78127+t78128;
                double t78130 = 1.0/t78129;
                double t78131 = t78130*t78124*(1.0/2.0);
                double t78132 = t78131+1.0;
                double t78133 = log(t78132);
                double t78134 = a1p*c*t78118;
                double t78135 = t78134+1.0;
                double t78136 = tau_b[index]-1.0/1.0E20;
                double t78137 = tau_b[index]*2.0;
                double t78138 = 1.0/rho_b[index];
                double t78139 = t78137-gamma_bb[index]*t78138*(1.0/4.0);
                double t78140 = gamma_bb[index]*gamma_bb[index];
                double t78141 = gcaa*gcaa;
                double t78142 = t78140*t78140;
                double t78143 = t78141*t78141;
                double t78144 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t78145 = 1.0/pow(rho_b[index],8.0/3.0);
                double t78146 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t78147 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t78120+ \
                   b3f*t78121+b2f*c*t78118+b4f*t78122*t78123))+1.0)*(a1f*c*t78118+1.0)*2.0-c0p*t78133*t78135*2.0))/(two_13* \
                   2.0-2.0)+c0p*t78133*t78135*2.0)*( ( (t78136 > 0.0) ? 1.0*(t78101-t78100*t78139*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t78140*t78141*t78147)/(gamma_bb[index]*gcaa*t78145*2.0+t78140*t78141*t78147+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t78145)/(gamma_bb[index]*gcaa*t78145+1.0)+(ccaa4*t78142*t78143*t78144) \
                   /(gamma_bb[index]*gcaa*t78145*4.0+t78140*t78141*t78147*6.0+t78142*t78143*t78144+gamma_bb[index]*gcaa* \
                   t78140*t78141*t78146*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t78140*t78141*t78146)/(gamma_bb[index]*gcaa* \
                   t78145*3.0+t78140*t78141*t78147*3.0+gamma_bb[index]*gcaa*t78140*t78141*t78146+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t78100*t78099)/t78103-C_k*a_1*t78100*t78104*t78105*t78099-C_k* \
                   a_2*t78100*t78110*t78106*t78099*2.0+C_k*a_2*t78100*t78104*t78105*t78099*2.0+C_k*a_3*t78100*t78110* \
                   t78106*t78099*3.0-C_k*a_4*t78100*t78112*t78107*t78099*4.0+C_k*a_5*t78100*t78112*t78107*t78099*5.0- \
                   C_k*a_8*t78100*t78116*t78108*t78099*8.0+C_k*a_9*t78100*t78116*t78108*t78099*9.0+C_k*a_10*t78100*t78104* \
                   t78108*t78117*t78099*1.0E1-C_k*a_10*t78100*t78106*t78108*t78109*t78099*1.0E1+C_k*a_11*t78100*t78106* \
                   t78108*t78109*t78099*1.1E1-C_k*a_3*t78100*t78111*t78104*t78106*t78099*3.0+C_k*a_4*t78100*t78111*t78104* \
                   t78106*t78099*4.0-C_k*a_5*t78100*t78104*t78113*t78107*t78099*5.0+C_k*a_6*t78100*t78104*t78113*t78107* \
                   t78099*6.0-C_k*a_6*t78100*t78114*t78106*t78107*t78099*6.0+C_k*a_7*t78100*t78114*t78106*t78107*t78099* \
                   7.0-C_k*a_9*t78100*t78104*t78108*t78117*t78099*9.0-C_k*a_11*t78100*1.0/pow(t78103,1.2E1)*t78104*t78106* \
                   t78108*t78099*1.1E1-C_k*a_7*t78100*t78104*t78106*t78115*t78107*t78099*7.0+C_k*a_8*t78100*t78104*t78106* \
                   t78115*t78107*t78099*8.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t81706 = pow(rho_b[index],5.0/3.0);
                double t81707 = 1.0/(tau_b[index]*tau_b[index]);
                double t81708 = 1.0/tau_b[index];
                double t81709 = C_k*t81706*t81708;
                double t81710 = t81709+1.0;
                double t81711 = t81709-1.0;
                double t81712 = 1.0/(t81710*t81710);
                double t81713 = t81711*t81711;
                double t81714 = t81713*t81713;
                double t81715 = t81714*t81714;
                double t81716 = 1.0/pow(t81710,1.1E1);
                double t81717 = 1.0/(t81710*t81710*t81710);
                double t81718 = 1.0/(t81710*t81710*t81710*t81710);
                double t81719 = 1.0/(t81710*t81710*t81710*t81710*t81710);
                double t81720 = 1.0/(t81710*t81710*t81710*t81710*t81710*t81710);
                double t81721 = 1.0/(t81710*t81710*t81710*t81710*t81710*t81710*t81710);
                double t81722 = 1.0/(t81710*t81710*t81710*t81710*t81710*t81710*t81710*t81710);
                double t81723 = 1.0/(t81710*t81710*t81710*t81710*t81710*t81710*t81710*t81710*t81710);
                double t81724 = 1.0/pow(t81710,1.0E1);
                double t81725 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81726 = c*t81725;
                double t81727 = sqrt(t81726);
                double t81728 = pow(t81726,3.0/2.0);
                double t81729 = c*c;
                double t81730 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81731 = 1.0/c0p;
                double t81732 = b1p*t81727;
                double t81733 = b3p*t81728;
                double t81734 = b4p*t81730*t81729;
                double t81735 = b2p*c*t81725;
                double t81736 = t81732+t81733+t81734+t81735;
                double t81737 = 1.0/t81736;
                double t81738 = t81731*t81737*(1.0/2.0);
                double t81739 = t81738+1.0;
                double t81740 = log(t81739);
                double t81741 = a1p*c*t81725;
                double t81742 = t81741+1.0;
                double t81743 = tau_b[index]-1.0/1.0E20;
                double t81744 = tau_b[index]*2.0;
                double t81745 = 1.0/rho_b[index];
                double t81746 = t81744-gamma_bb[index]*t81745*(1.0/4.0);
                double t81747 = gamma_bb[index]*gamma_bb[index];
                double t81748 = gcaa*gcaa;
                double t81749 = t81747*t81747;
                double t81750 = t81748*t81748;
                double t81751 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81752 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81753 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81754 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t81727+ \
                   b3f*t81728+b2f*c*t81725+b4f*t81730*t81729))+1.0)*(a1f*c*t81725+1.0)*2.0-c0p*t81740*t81742*2.0))/(two_13* \
                   2.0-2.0)+c0p*t81740*t81742*2.0)*( ( (t81743 > 0.0) ? 1.0*(t81708-t81707*t81746*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t81754*t81747*t81748)/(gamma_bb[index]*gcaa*t81752*2.0+t81754*t81747*t81748+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t81752)/(gamma_bb[index]*gcaa*t81752+1.0)+(ccaa4*t81750*t81751*t81749) \
                   /(gamma_bb[index]*gcaa*t81752*4.0+t81750*t81751*t81749+t81754*t81747*t81748*6.0+gamma_bb[index]*gcaa* \
                   t81753*t81747*t81748*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t81753*t81747*t81748)/(gamma_bb[index]*gcaa* \
                   t81752*3.0+t81754*t81747*t81748*3.0+gamma_bb[index]*gcaa*t81753*t81747*t81748+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t81706*t81707)/t81710-C_k*a_1*t81711*t81712*t81706*t81707+C_k* \
                   a_2*t81711*t81712*t81706*t81707*2.0-C_k*a_2*t81713*t81706*t81707*t81717*2.0+C_k*a_3*t81713*t81706* \
                   t81707*t81717*3.0-C_k*a_4*t81714*t81706*t81707*t81719*4.0+C_k*a_5*t81714*t81706*t81707*t81719*5.0- \
                   C_k*a_8*t81723*t81706*t81715*t81707*8.0+C_k*a_9*t81723*t81706*t81715*t81707*9.0+C_k*a_10*t81711*t81706* \
                   t81715*t81724*t81707*1.0E1-C_k*a_10*t81713*t81706*t81715*t81707*t81716*1.0E1+C_k*a_11*t81713*t81706* \
                   t81715*t81707*t81716*1.1E1-C_k*a_3*t81711*t81713*t81706*t81707*t81718*3.0+C_k*a_4*t81711*t81713*t81706* \
                   t81707*t81718*4.0-C_k*a_5*t81711*t81720*t81714*t81706*t81707*5.0+C_k*a_6*t81711*t81720*t81714*t81706* \
                   t81707*6.0-C_k*a_6*t81721*t81713*t81714*t81706*t81707*6.0+C_k*a_7*t81721*t81713*t81714*t81706*t81707* \
                   7.0-C_k*a_9*t81711*t81706*t81715*t81724*t81707*9.0-C_k*a_11*1.0/pow(t81710,1.2E1)*t81711*t81713*t81706* \
                   t81715*t81707*1.1E1-C_k*a_7*t81711*t81713*t81722*t81714*t81706*t81707*7.0+C_k*a_8*t81711*t81713*t81722* \
                   t81714*t81706*t81707*8.0);
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t78149 = rho_a[index]+rho_b[index];
            double t78150 = 1.0/pow(t78149,1.0/3.0);
            double t78151 = c*t78150;
            double t78152 = sqrt(t78151);
            double t78153 = b1p*t78152;
            double t78154 = pow(t78151,3.0/2.0);
            double t78155 = b3p*t78154;
            double t78156 = c*c;
            double t78157 = 1.0/pow(t78149,2.0/3.0);
            double t78158 = b4p*t78156*t78157;
            double t78159 = b2p*c*t78150;
            double t78160 = t78153+t78155+t78158+t78159;
            double t78161 = 1.0/pow(t78149,4.0/3.0);
            double t78162 = 1.0/c0p;
            double t78163 = 1.0/t78160;
            double t78164 = t78162*t78163*(1.0/2.0);
            double t78165 = t78164+1.0;
            double t78166 = a1p*c*t78150;
            double t78167 = t78166+1.0;
            double t78168 = rho_a[index]-rho_b[index];
            double t78169 = t78168*t78168;
            double t78170 = 1.0/t78149;
            double t78171 = t78170*t78168;
            double t78172 = two_13*2.0;
            double t78173 = t78172-2.0;
            double t78174 = 1.0/t78173;
            double t78175 = 1.0/c0f;
            double t78176 = b1f*t78152;
            double t78177 = b3f*t78154;
            double t78178 = b4f*t78156*t78157;
            double t78179 = b2f*c*t78150;
            double t78180 = t78176+t78177+t78178+t78179;
            double t78181 = 1.0/t78180;
            double t78182 = t78181*t78175*(1.0/2.0);
            double t78183 = t78182+1.0;
            double t78184 = log(t78183);
            double t78185 = a1f*c*t78150;
            double t78186 = t78185+1.0;
            double t78187 = log(t78165);
            double t78197 = c0f*t78184*t78186*2.0;
            double t78198 = c0p*t78167*t78187*2.0;
            double t78188 = t78197-t78198;
            double t78189 = t78171+1.0;
            double t78190 = pow(t78189,4.0/3.0);
            double t78191 = -t78171+1.0;
            double t78192 = pow(t78191,4.0/3.0);
            double t78193 = t78190+t78192-2.0;
            double t78194 = 1.0/(t78149*t78149);
            double t78225 = t78194*t78168;
            double t78195 = t78170-t78225;
            double t78196 = 1.0/(t78149*t78149*t78149*t78149);
            double t78199 = t78169*t78169;
            double t78200 = 1.0/pow(t78149,5.0/3.0);
            double t78201 = 1.0/sqrt(t78151);
            double t78202 = 1.0/t78165;
            double t78203 = 1.0/(t78160*t78160);
            double t78204 = b4p*t78200*t78156*(2.0/3.0);
            double t78205 = b2p*c*t78161*(1.0/3.0);
            double t78206 = b1p*c*t78201*t78161*(1.0/6.0);
            double t78207 = b3p*c*t78152*t78161*(1.0/2.0);
            double t78208 = t78204+t78205+t78206+t78207;
            double t78209 = t78202*t78203*t78208*t78167;
            double t78210 = 1.0/(t78149*t78149*t78149*t78149*t78149);
            double t78211 = 1.0/d2fz0;
            double t78212 = 1.0/Aa;
            double t78213 = b1a*t78152;
            double t78214 = b3a*t78154;
            double t78215 = b4a*t78156*t78157;
            double t78216 = b2a*c*t78150;
            double t78217 = t78213+t78214+t78215+t78216;
            double t78218 = 1.0/t78217;
            double t78219 = t78212*t78218*(1.0/2.0);
            double t78220 = t78219+1.0;
            double t78221 = log(t78220);
            double t78222 = a1a*c*t78150;
            double t78223 = t78222+1.0;
            double t78224 = pow(t78189,1.0/3.0);
            double t78226 = t78224*t78195*(4.0/3.0);
            double t78227 = pow(t78191,1.0/3.0);
            double t78302 = t78227*t78195*(4.0/3.0);
            double t78228 = -t78302+t78226;
            double t78229 = t78196*t78199;
            double t78230 = t78229-1.0;
            double t78231 = 1.0/pow(rho_a[index],1.0/3.0);
            double t78232 = c*t78231;
            double t78233 = sqrt(t78232);
            double t78234 = b1f*t78233;
            double t78235 = pow(t78232,3.0/2.0);
            double t78236 = b3f*t78235;
            double t78237 = 1.0/pow(rho_a[index],2.0/3.0);
            double t78238 = b4f*t78156*t78237;
            double t78239 = b2f*c*t78231;
            double t78240 = t78234+t78236+t78238+t78239;
            double t78241 = 1.0/pow(rho_a[index],4.0/3.0);
            double t78242 = b1p*t78233;
            double t78243 = b3p*t78235;
            double t78244 = b4p*t78156*t78237;
            double t78245 = b2p*c*t78231;
            double t78246 = t78242+t78243+t78244+t78245;
            double t78247 = 1.0/pow(rho_a[index],5.0/3.0);
            double t78248 = 1.0/sqrt(t78232);
            double t78249 = 1.0/t78240;
            double t78250 = t78175*t78249*(1.0/2.0);
            double t78251 = t78250+1.0;
            double t78252 = 1.0/t78246;
            double t78253 = t78162*t78252*(1.0/2.0);
            double t78254 = t78253+1.0;
            double t78255 = a1p*c*t78231;
            double t78256 = t78255+1.0;
            double t78257 = 1.0/t78254;
            double t78258 = 1.0/(t78246*t78246);
            double t78259 = b4p*t78156*t78247*(2.0/3.0);
            double t78260 = b2p*c*t78241*(1.0/3.0);
            double t78261 = b1p*c*t78241*t78248*(1.0/6.0);
            double t78262 = b3p*c*t78241*t78233*(1.0/2.0);
            double t78263 = t78260+t78261+t78262+t78259;
            double t78264 = t78263*t78256*t78257*t78258;
            double t78265 = log(t78254);
            double t78266 = pow(2.0,1.0/3.0);
            double t78267 = t78266*2.0;
            double t78268 = t78267-2.0;
            double t78269 = log(t78251);
            double t78270 = a1f*c*t78231;
            double t78271 = t78270+1.0;
            double t78272 = gcab*gcab;
            double t78276 = 1.0/pow(rho_a[index],8.0/3.0);
            double t78277 = gamma_aa[index]*t78276*(1.0/2.0);
            double t78278 = 1.0/pow(rho_b[index],8.0/3.0);
            double t78279 = gamma_bb[index]*t78278*(1.0/2.0);
            double t78273 = t78277+t78279;
            double t78274 = t78273*t78273;
            double t78275 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t78280 = t78272*t78272;
            double t78281 = t78274*t78274;
            double t78282 = t78272*t78274*6.0;
            double t78283 = gcab*t78272*t78273*t78274*4.0;
            double t78284 = t78280*t78281;
            double t78285 = gcab*t78273*4.0;
            double t78286 = t78282+t78283+t78284+t78285+1.0;
            double t78287 = gcab*t78273;
            double t78288 = t78287+1.0;
            double t78289 = t78272*t78274;
            double t78290 = gcab*t78273*2.0;
            double t78291 = t78290+t78289+1.0;
            double t78292 = t78272*t78274*3.0;
            double t78293 = gcab*t78272*t78273*t78274;
            double t78294 = gcab*t78273*3.0;
            double t78295 = t78292+t78293+t78294+1.0;
            double t78296 = 1.0/t78291;
            double t78297 = 1.0/t78295;
            double t78298 = 1.0/t78288;
            double t78299 = 1.0/t78286;
            double t78300 = 1.0/pow(t78149,7.0/3.0);
            double t78301 = 1.0/pow(t78149,8.0/3.0);
            double t78303 = 1.0/t78183;
            double t78304 = 1.0/(t78180*t78180);
            double t78305 = b4f*t78200*t78156*(2.0/3.0);
            double t78306 = b2f*c*t78161*(1.0/3.0);
            double t78307 = b1f*c*t78201*t78161*(1.0/6.0);
            double t78308 = b3f*c*t78152*t78161*(1.0/2.0);
            double t78309 = t78305+t78306+t78307+t78308;
            double t78310 = a1f*c*c0f*t78161*t78184*(2.0/3.0);
            double t78312 = t78303*t78304*t78309*t78186;
            double t78313 = a1p*c*c0p*t78161*t78187*(2.0/3.0);
            double t78311 = t78310-t78312-t78313+t78209;
            double t78314 = t78208*t78208;
            double t78315 = 1.0/pow(t78151,3.0/2.0);
            double t78316 = b4p*t78301*t78156*(1.0E1/9.0);
            double t78317 = b2p*c*t78300*(4.0/9.0);
            double t78318 = b1p*c*t78201*t78300*(2.0/9.0);
            double t78319 = b3p*c*t78300*t78152*(2.0/3.0);
            double t78320 = b3p*t78201*t78301*t78156*(1.0/1.2E1);
            double t78321 = t78320+t78316+t78317+t78318+t78319-b1p*t78301*t78315*t78156*(1.0/3.6E1);
            double t78322 = 1.0/(t78160*t78160*t78160);
            double t78323 = t78202*t78322*t78314*t78167*2.0;
            double t78324 = t78309*t78309;
            double t78325 = 1.0/(t78165*t78165);
            double t78326 = 1.0/(t78160*t78160*t78160*t78160);
            double t78327 = t78194*2.0;
            double t78328 = 1.0/(t78149*t78149*t78149);
            double t78335 = t78328*t78168*2.0;
            double t78329 = -t78335+t78327;
            double t78330 = t78195*t78195;
            double t78331 = a1p*c*c0p*t78300*t78187*(8.0/9.0);
            double t78332 = 1.0/(t78149*t78149*t78149*t78149*t78149*t78149);
            double t78333 = t78210*t78199*4.0;
            double t78343 = t78168*t78169*t78196*4.0;
            double t78334 = t78333-t78343;
            double t78336 = t78227*t78329*(4.0/3.0);
            double t78337 = 1.0/pow(t78189,2.0/3.0);
            double t78338 = t78330*t78337*(4.0/9.0);
            double t78339 = 1.0/pow(t78191,2.0/3.0);
            double t78340 = t78330*t78339*(4.0/9.0);
            double t78341 = t78340+t78336+t78338-t78224*t78329*(4.0/3.0);
            double t78342 = 1.0/t78220;
            double t78344 = 1.0/(t78217*t78217);
            double t78345 = b4a*t78200*t78156*(2.0/3.0);
            double t78346 = b2a*c*t78161*(1.0/3.0);
            double t78347 = b1a*c*t78201*t78161*(1.0/6.0);
            double t78348 = b3a*c*t78152*t78161*(1.0/2.0);
            double t78349 = t78345+t78346+t78347+t78348;
            double t78350 = t78349*t78349;
            double t78351 = t78202*t78203*t78321*t78167;
            double t78352 = 1.0/t78251;
            double t78353 = b4f*t78156*t78247*(2.0/3.0);
            double t78354 = b2f*c*t78241*(1.0/3.0);
            double t78355 = b1f*c*t78241*t78248*(1.0/6.0);
            double t78356 = b3f*c*t78241*t78233*(1.0/2.0);
            double t78357 = t78353+t78354+t78355+t78356;
            double t78358 = 1.0/(t78240*t78240);
            double t78359 = 1.0/pow(rho_a[index],7.0/3.0);
            double t78360 = 1.0/pow(t78232,3.0/2.0);
            double t78361 = t78357*t78357;
            double t78362 = t78263*t78263;
            double t78363 = 1.0/(t78246*t78246*t78246);
            double t78364 = t78362*t78363*t78256*t78257*2.0;
            double t78365 = b4p*t78156*t78276*(1.0E1/9.0);
            double t78366 = b2p*c*t78359*(4.0/9.0);
            double t78367 = b3p*t78156*t78248*t78276*(1.0/1.2E1);
            double t78368 = b1p*c*t78248*t78359*(2.0/9.0);
            double t78369 = b3p*c*t78233*t78359*(2.0/3.0);
            double t78552 = b1p*t78360*t78156*t78276*(1.0/3.6E1);
            double t78370 = -t78552+t78365+t78366+t78367+t78368+t78369;
            double t78371 = 1.0/(t78254*t78254);
            double t78372 = 1.0/(t78246*t78246*t78246*t78246);
            double t78373 = a1p*c*c0p*t78265*t78359*(8.0/9.0);
            double t78374 = a1f*c*c0f*t78241*t78269*(2.0/3.0);
            double t78375 = a1p*c*c0p*t78241*t78265*(2.0/3.0);
            double t78376 = t78314*t78162*t78325*t78326*t78167*(1.0/2.0);
            double t78377 = 1.0/tau_a[index];
            double t78378 = pow(rho_a[index],2.0/3.0);
            double t78379 = pow(rho_a[index],5.0/3.0);
            double t78380 = C_k*t78377*t78379;
            double t78381 = t78380+1.0;
            double t78382 = t78380-1.0;
            double t78383 = 1.0/(t78381*t78381);
            double t78384 = t78382*t78382;
            double t78385 = t78384*t78384;
            double t78386 = t78385*t78385;
            double t78387 = 1.0/pow(t78381,1.1E1);
            double t78388 = 1.0/(t78381*t78381*t78381);
            double t78389 = 1.0/(t78381*t78381*t78381*t78381);
            double t78390 = 1.0/(t78381*t78381*t78381*t78381*t78381);
            double t78391 = 1.0/(t78381*t78381*t78381*t78381*t78381*t78381);
            double t78392 = 1.0/(t78381*t78381*t78381*t78381*t78381*t78381*t78381);
            double t78393 = 1.0/(t78381*t78381*t78381*t78381*t78381*t78381*t78381*t78381);
            double t78394 = 1.0/(t78381*t78381*t78381*t78381*t78381*t78381*t78381*t78381*t78381);
            double t78395 = 1.0/pow(t78381,1.0E1);
            double t78396 = 1.0/(k*k);
            double t78397 = 1.0/kp;
            double t78398 = 1.0/(rho_a[index]*rho_a[index]);
            double t78399 = rho_a[index]*2.0;
            double t78400 = 1.0/pow(t78399,2.0/3.0);
            double t78401 = gamma_aa[index]*mu_*t78400*t78396*t78397*t78398*(1.0/4.0);
            double t78402 = t78401+1.0;
            double t78403 = 1.0/t78402;
            double t78404 = kp-kp*t78403+1.0;
            double t78405 = C_k*C_k;
            double t78406 = pow(rho_a[index],4.0/3.0);
            double t78407 = 1.0/(tau_a[index]*tau_a[index]);
            double t78408 = 1.0/t78381;
            double t78409 = 1.0/pow(t78381,1.2E1);
            double t78410 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t78411 = gamma_aa[index]*mu_*t78400*t78410*t78396*t78397*(1.0/2.0);
            double t78412 = 1.0/pow(t78399,5.0/3.0);
            double t78413 = gamma_aa[index]*mu_*t78412*t78396*t78397*t78398*(1.0/3.0);
            double t78414 = t78411+t78413;
            double t78415 = a_1*t78408*t78382;
            double t78416 = a_10*t78384*t78386*t78395;
            double t78417 = a_11*t78382*t78384*t78386*t78387;
            double t78418 = a_2*t78383*t78384;
            double t78419 = a_3*t78382*t78384*t78388;
            double t78420 = a_4*t78385*t78389;
            double t78421 = a_5*t78390*t78382*t78385;
            double t78422 = a_6*t78391*t78384*t78385;
            double t78423 = a_7*t78382*t78392*t78384*t78385;
            double t78424 = a_8*t78393*t78386;
            double t78425 = a_9*t78382*t78394*t78386;
            double t78426 = t78420+t78421+t78422+t78423+t78415+t78424+t78416+t78425+t78417+t78418+t78419+1.0;
            double t78427 = 1.0/(t78402*t78402);
            double t78428 = C_k*a_1*t78408*t78377*t78378*(5.0/3.0);
            double t78429 = C_k*a_2*t78382*t78383*t78377*t78378*(1.0E1/3.0);
            double t78430 = C_k*a_10*t78382*t78377*t78386*t78395*t78378*(5.0E1/3.0);
            double t78431 = C_k*a_11*t78384*t78377*t78386*t78378*t78387*(5.5E1/3.0);
            double t78432 = C_k*a_3*t78384*t78377*t78378*t78388*5.0;
            double t78433 = C_k*a_4*t78382*t78384*t78377*t78378*t78389*(2.0E1/3.0);
            double t78434 = C_k*a_5*t78390*t78385*t78377*t78378*(2.5E1/3.0);
            double t78435 = C_k*a_6*t78382*t78391*t78385*t78377*t78378*1.0E1;
            double t78436 = C_k*a_7*t78392*t78384*t78385*t78377*t78378*(3.5E1/3.0);
            double t78437 = C_k*a_8*t78382*t78384*t78393*t78385*t78377*t78378*(4.0E1/3.0);
            double t78438 = C_k*a_9*t78394*t78377*t78386*t78378*1.5E1;
            double t78439 = t78430+t78431+t78432+t78433+t78434+t78435+t78436+t78428+t78437+t78429+t78438-C_k* \
               a_1*t78382*t78383*t78377*t78378*(5.0/3.0)-C_k*a_2*t78384*t78377*t78378*t78388*(1.0E1/3.0)-C_k*a_4* \
               t78390*t78385*t78377*t78378*(2.0E1/3.0)-C_k*a_8*t78394*t78377*t78386*t78378*(4.0E1/3.0)-C_k*a_10*t78384* \
               t78377*t78386*t78378*t78387*(5.0E1/3.0)-C_k*a_3*t78382*t78384*t78377*t78378*t78389*5.0-C_k*a_5*t78382* \
               t78391*t78385*t78377*t78378*(2.5E1/3.0)-C_k*a_6*t78392*t78384*t78385*t78377*t78378*1.0E1-C_k*a_9*t78382* \
               t78377*t78386*t78395*t78378*1.5E1-C_k*a_11*t78382*t78409*t78384*t78377*t78386*t78378*(5.5E1/3.0)-C_k* \
               a_7*t78382*t78384*t78393*t78385*t78377*t78378*(3.5E1/3.0);
            double t78440 = c0f*t78271*t78269*2.0;
            double t78442 = c0p*t78256*t78265*2.0;
            double t78441 = t78440-t78442;
            double t78443 = 1.0/pow(rho_b[index],1.0/3.0);
            double t78444 = c*t78443;
            double t78445 = sqrt(t78444);
            double t78446 = pow(t78444,3.0/2.0);
            double t78447 = 1.0/pow(rho_b[index],2.0/3.0);
            double t78448 = b1p*t78445;
            double t78449 = b3p*t78446;
            double t78450 = b4p*t78156*t78447;
            double t78451 = b2p*c*t78443;
            double t78452 = t78450+t78451+t78448+t78449;
            double t78453 = 1.0/t78452;
            double t78454 = t78162*t78453*(1.0/2.0);
            double t78455 = t78454+1.0;
            double t78456 = log(t78455);
            double t78457 = a1p*c*t78443;
            double t78458 = t78457+1.0;
            double t78459 = c0p*t78456*t78458*2.0;
            double t78460 = t78174*t78193*t78196*t78188*t78199;
            double t78461 = Aa*t78211*t78221*t78230*t78223*t78174*t78193*2.0;
            double t78462 = gamma_aa[index]*gcab*t78275*(1.6E1/3.0);
            double t78463 = gamma_aa[index]*gcab*t78272*t78274*t78275*1.6E1;
            double t78464 = gamma_aa[index]*t78280*t78273*t78274*t78275*(1.6E1/3.0);
            double t78465 = gamma_aa[index]*t78272*t78273*t78275*1.6E1;
            double t78466 = t78462+t78463+t78464+t78465;
            double t78467 = 1.0/(t78288*t78288);
            double t78468 = gamma_aa[index]*gamma_aa[index];
            double t78469 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t78470 = gamma_aa[index]*gcab*t78275*(8.0/3.0);
            double t78471 = gamma_aa[index]*t78272*t78273*t78275*(8.0/3.0);
            double t78472 = t78470+t78471;
            double t78473 = 1.0/(t78295*t78295);
            double t78474 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t78475 = 1.0/(t78286*t78286);
            double t78476 = 1.0/(t78291*t78291);
            double t78477 = gamma_aa[index]*gcab*t78275*4.0;
            double t78478 = gamma_aa[index]*gcab*t78272*t78274*t78275*4.0;
            double t78479 = gamma_aa[index]*t78272*t78273*t78275*8.0;
            double t78480 = t78477+t78478+t78479;
            double t78560 = t78271*t78352*t78357*t78358;
            double t78481 = -t78560+t78264+t78374-t78375;
            double t78482 = gcaa*gcaa;
            double t78483 = t78468*t78468;
            double t78484 = t78482*t78482;
            double t78485 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t78486 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t78487 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t78488 = t78441*t78174*t78268;
            double t78489 = t78442+t78488;
            double t78490 = tau_a[index]-1.0/1.0E20;
            double t78491 = ( (t78490 > 0.0) ?  1.0 : 0.0 ) ;
            double t78492 = tau_a[index]*2.0;
            double t78493 = 1.0/rho_a[index];
            double t78520 = gamma_aa[index]*t78493*(1.0/4.0);
            double t78494 = -t78520+t78492;
            double t78495 = t78377*t78494*(1.0/2.0);
            double t78496 = t78495-1.0;
            double t78497 = t78491*t78496;
            double t78498 = t78497+1.0;
            double t78499 = gamma_aa[index]*gcaa*t78276*4.0;
            double t78500 = gamma_aa[index]*gcaa*t78482*t78468*t78486*4.0;
            double t78501 = t78482*t78468*t78487*6.0;
            double t78502 = t78483*t78484*t78485;
            double t78503 = t78500+t78501+t78502+t78499+1.0;
            double t78504 = 1.0/t78503;
            double t78505 = gamma_aa[index]*gcaa*t78276;
            double t78506 = t78505+1.0;
            double t78507 = 1.0/t78506;
            double t78508 = gamma_aa[index]*gcaa*t78276*3.0;
            double t78509 = gamma_aa[index]*gcaa*t78482*t78468*t78486;
            double t78510 = t78482*t78468*t78487*3.0;
            double t78511 = t78510+t78508+t78509+1.0;
            double t78512 = 1.0/t78511;
            double t78513 = gamma_aa[index]*gcaa*t78276*2.0;
            double t78514 = t78482*t78468*t78487;
            double t78515 = t78513+t78514+1.0;
            double t78516 = 1.0/t78515;
            double t78517 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t78518 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t78519 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t78521 = 1.0/pow(rho_a[index],1.0E1);
            double t78522 = 1.0/(t78506*t78506);
            double t78523 = gamma_aa[index]*gcaa*t78275*(3.2E1/3.0);
            double t78524 = gamma_aa[index]*gcaa*t78482*t78518*t78468*3.2E1;
            double t78525 = t78517*t78482*t78468*3.2E1;
            double t78526 = t78483*t78519*t78484*(3.2E1/3.0);
            double t78527 = t78523+t78524+t78525+t78526;
            double t78528 = gamma_aa[index]*gcaa*t78275*(1.6E1/3.0);
            double t78529 = t78517*t78482*t78468*(1.6E1/3.0);
            double t78530 = t78528+t78529;
            double t78531 = gamma_aa[index]*gcaa*t78275*8.0;
            double t78532 = gamma_aa[index]*gcaa*t78482*t78518*t78468*8.0;
            double t78533 = t78517*t78482*t78468*1.6E1;
            double t78534 = t78531+t78532+t78533;
            double t78535 = 1.0/(t78511*t78511);
            double t78536 = 1.0/(t78503*t78503);
            double t78537 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t78538 = 1.0/(t78515*t78515);
            double t78539 = ccaa4*t78504*t78483*t78484*t78485;
            double t78540 = ccaa1*gamma_aa[index]*gcaa*t78507*t78276;
            double t78541 = ccaa3*gamma_aa[index]*gcaa*t78512*t78482*t78468*t78486;
            double t78542 = ccaa2*t78516*t78482*t78468*t78487;
            double t78543 = ccaa0+t78540+t78541+t78542+t78539;
            double t78544 = 1.0/(t78240*t78240*t78240);
            double t78545 = b4f*t78156*t78276*(1.0E1/9.0);
            double t78546 = b2f*c*t78359*(4.0/9.0);
            double t78547 = b3f*t78156*t78248*t78276*(1.0/1.2E1);
            double t78548 = b1f*c*t78248*t78359*(2.0/9.0);
            double t78549 = b3f*c*t78233*t78359*(2.0/3.0);
            double t78550 = t78545+t78546+t78547+t78548+t78549-b1f*t78360*t78156*t78276*(1.0/3.6E1);
            double t78551 = t78271*t78352*t78550*t78358;
            double t78553 = t78370*t78256*t78257*t78258;
            double t78554 = 1.0/(t78251*t78251);
            double t78555 = 1.0/(t78240*t78240*t78240*t78240);
            double t78556 = t78271*t78361*t78175*t78554*t78555*(1.0/2.0);
            double t78557 = t78162*t78362*t78371*t78372*t78256*(1.0/2.0);
            double t78558 = a1f*c*t78241*t78352*t78357*t78358*(2.0/3.0);
            double t78559 = a1p*c*t78241*t78263*t78257*t78258*(2.0/3.0);
            double t78561 = ccaa4*t78504*t78483*t78519*t78484*(3.2E1/3.0);
            double t78562 = ccaa1*gamma_aa[index]*gcaa*t78507*t78275*(8.0/3.0);
            double t78563 = ccaa3*gamma_aa[index]*gcaa*t78512*t78482*t78518*t78468*8.0;
            double t78564 = ccaa2*t78516*t78517*t78482*t78468*(1.6E1/3.0);
            double t78569 = ccaa1*t78522*t78517*t78482*t78468*(8.0/3.0);
            double t78570 = ccaa3*gamma_aa[index]*gcaa*t78534*t78535*t78482*t78468*t78486;
            double t78571 = ccaa4*t78527*t78536*t78483*t78484*t78485;
            double t78572 = ccaa2*t78530*t78482*t78538*t78468*t78487;
            double t78565 = t78561-t78570+t78562-t78571+t78563-t78572+t78564-t78569;
            double t78566 = t78560-t78264-t78374+t78375;
            double t78567 = t78174*t78268*t78566;
            double t78568 = t78264-t78375+t78567;
            v_rho_a_rho_a_[index] = (rho_a[index]*t78489+rho_b[index]*(t78459-t78174*t78268*(t78459-c0f*log((t78175* \
               (1.0/2.0))/(b1f*t78445+b3f*t78446+b2f*c*t78443+b4f*t78156*t78447)+1.0)*(a1f*c*t78443+1.0)*2.0))-t78149* \
               (t78460+t78461+t78198))*(-ccab2*t78272*t78274*t78476*(gamma_aa[index]*gcab*t78474*(8.8E1/9.0)+t78272* \
               t78468*t78469*(3.2E1/9.0)+gamma_aa[index]*t78272*t78273*t78474*(8.8E1/9.0))+ccab2*t78272*1.0/(t78291* \
               t78291*t78291)*t78274*(t78472*t78472)*2.0+ccab4*t78280*t78281*1.0/(t78286*t78286*t78286)*(t78466*t78466) \
               *2.0+ccab1*gamma_aa[index]*gcab*t78474*t78298*(4.4E1/9.0)-ccab1*t78272*t78467*t78468*t78469*(3.2E1/ \
               9.0)+ccab2*t78272*t78296*t78468*t78469*(3.2E1/9.0)-ccab4*t78280*t78281*t78475*(gamma_aa[index]*gcab* \
               t78474*(1.76E2/9.0)+t78272*t78468*t78469*(6.4E1/3.0)+gamma_aa[index]*t78272*t78273*t78474*(1.76E2/ \
               3.0)+t78280*t78274*t78468*t78469*(6.4E1/3.0)+gamma_aa[index]*gcab*t78272*t78274*t78474*(1.76E2/3.0) \
               +gamma_aa[index]*t78280*t78273*t78274*t78474*(1.76E2/9.0)+gcab*t78272*t78273*t78468*t78469*(1.28E2/ \
               3.0))+ccab4*t78280*t78274*t78468*t78469*t78299*(6.4E1/3.0)-ccab1*gamma_aa[index]*t78272*t78273*t78474* \
               t78467*(4.4E1/9.0)+ccab2*gamma_aa[index]*t78272*t78273*t78474*t78296*(8.8E1/9.0)+ccab3*gcab*t78272* \
               t78273*(t78480*t78480)*t78274*1.0/(t78295*t78295*t78295)*2.0+ccab3*gamma_aa[index]*gcab*t78272*t78274* \
               t78474*t78297*(4.4E1/3.0)-ccab2*gamma_aa[index]*t78272*t78273*t78472*t78275*t78476*(1.6E1/3.0)+ccab4* \
               gamma_aa[index]*t78280*t78273*t78274*t78474*t78299*(1.76E2/9.0)+ccab3*gcab*t78272*t78273*t78297*t78468* \
               t78469*(3.2E1/3.0)+ccab1*gcab*t78272*t78273*1.0/(t78288*t78288*t78288)*t78468*t78469*(3.2E1/9.0)-ccab3* \
               gcab*t78272*t78273*t78274*t78473*(gamma_aa[index]*gcab*t78474*(4.4E1/3.0)+t78272*t78468*t78469*(3.2E1/ \
               3.0)+gamma_aa[index]*t78272*t78273*t78474*(8.8E1/3.0)+gamma_aa[index]*gcab*t78272*t78274*t78474*(4.4E1/ \
               3.0)+gcab*t78272*t78273*t78468*t78469*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t78272*t78480*t78274* \
               t78275*t78473*8.0-ccab4*gamma_aa[index]*t78280*t78273*t78274*t78275*t78466*t78475*(3.2E1/3.0))-(X- \
               1.0)*(t78404*t78439*2.0+rho_a[index]*t78404*(C_k*a_1*t78231*t78408*t78377*(1.0E1/9.0)-a_1*t78405*t78406* \
               t78407*t78383*(5.0E1/9.0)+a_2*t78405*t78406*t78407*t78383*(5.0E1/9.0)+a_1*t78405*t78406*t78407*t78382* \
               t78388*(5.0E1/9.0)+a_10*t78405*t78406*t78407*t78386*t78395*2.5E2-a_2*t78405*t78406*t78407*t78382*t78388* \
               (2.0E2/9.0)+a_2*t78405*t78406*t78407*t78384*t78389*(5.0E1/3.0)+a_3*t78405*t78406*t78407*t78382*t78388* \
               (5.0E1/3.0)-a_3*t78405*t78406*t78407*t78384*t78389*5.0E1+a_4*t78405*t78406*t78407*t78391*t78385*(5.0E2/ \
               9.0)+a_4*t78405*t78406*t78407*t78384*t78389*(1.0E2/3.0)-a_5*t78405*t78406*t78407*t78391*t78385*(1.25E3/ \
               9.0)+a_6*t78405*t78406*t78407*t78391*t78385*(2.5E2/3.0)+a_8*t78405*t78406*t78407*t78386*t78395*2.0E2- \
               a_9*t78405*t78406*t78407*t78386*t78395*4.5E2-C_k*a_1*t78231*t78382*t78383*t78377*(1.0E1/9.0)+C_k*a_2* \
               t78231*t78382*t78383*t78377*(2.0E1/9.0)-C_k*a_2*t78231*t78384*t78377*t78388*(2.0E1/9.0)+C_k*a_3*t78231* \
               t78384*t78377*t78388*(1.0E1/3.0)-C_k*a_4*t78231*t78390*t78385*t78377*(4.0E1/9.0)+C_k*a_5*t78231*t78390* \
               t78385*t78377*(5.0E1/9.0)-C_k*a_8*t78231*t78394*t78377*t78386*(8.0E1/9.0)+C_k*a_9*t78231*t78394*t78377* \
               t78386*1.0E1+C_k*a_10*t78231*t78382*t78377*t78386*t78395*(1.0E2/9.0)-C_k*a_10*t78231*t78384*t78377* \
               t78386*t78387*(1.0E2/9.0)+C_k*a_11*t78231*t78384*t78377*t78386*t78387*(1.1E2/9.0)-C_k*a_3*t78231*t78382* \
               t78384*t78377*t78389*(1.0E1/3.0)+C_k*a_4*t78231*t78382*t78384*t78377*t78389*(4.0E1/9.0)-C_k*a_5*t78231* \
               t78382*t78391*t78385*t78377*(5.0E1/9.0)+C_k*a_6*t78231*t78382*t78391*t78385*t78377*(2.0E1/3.0)-C_k* \
               a_6*t78231*t78392*t78384*t78385*t78377*(2.0E1/3.0)+C_k*a_7*t78231*t78392*t78384*t78385*t78377*(7.0E1/ \
               9.0)-C_k*a_9*t78231*t78382*t78377*t78386*t78395*1.0E1+a_10*t78405*t78406*t78407*t78409*t78384*t78386* \
               (2.75E3/9.0)-a_11*t78405*t78406*t78407*t78409*t78384*t78386*(6.05E3/9.0)-a_10*t78405*t78406*t78407* \
               t78382*t78386*t78387*(5.0E3/9.0)+a_11*t78405*t78406*t78407*t78382*t78386*t78387*(2.75E3/9.0)+a_3*t78405* \
               t78406*t78407*t78390*t78382*t78384*(1.0E2/3.0)-a_4*t78405*t78406*t78407*t78390*t78382*t78384*(8.0E2/ \
               9.0)+a_5*t78405*t78406*t78407*t78390*t78382*t78384*(5.0E2/9.0)+a_5*t78405*t78406*t78407*t78382*t78392* \
               t78385*(2.5E2/3.0)-a_6*t78405*t78406*t78407*t78382*t78392*t78385*2.0E2+a_6*t78405*t78406*t78407*t78384* \
               t78393*t78385*(3.5E2/3.0)+a_7*t78405*t78406*t78407*t78382*t78392*t78385*(3.5E2/3.0)-a_7*t78405*t78406* \
               t78407*t78384*t78393*t78385*(2.45E3/9.0)+a_8*t78405*t78406*t78407*t78384*t78393*t78385*(1.4E3/9.0) \
               +a_9*t78405*t78406*t78407*t78382*t78386*t78387*2.5E2+a_11*t78405*t78406*t78407*1.0/pow(t78381,1.3E1) \
               *t78382*t78384*t78386*(1.1E3/3.0)-C_k*a_11*t78231*t78382*t78409*t78384*t78377*t78386*(1.1E2/9.0)-C_k* \
               a_7*t78231*t78382*t78384*t78393*t78385*t78377*(7.0E1/9.0)+C_k*a_8*t78231*t78382*t78384*t78393*t78385* \
               t78377*(8.0E1/9.0)+a_7*t78405*t78406*t78407*t78382*t78384*t78385*t78394*(1.4E3/9.0)-a_8*t78405*t78406* \
               t78407*t78382*t78384*t78385*t78394*(3.2E3/9.0)+a_9*t78405*t78406*t78407*t78382*t78384*t78385*t78394* \
               2.0E2)-kp*t78414*t78426*t78427*2.0+kp*rho_a[index]*t78426*t78427*(gamma_aa[index]*mu_*t78410*t78412* \
               t78396*t78397*(4.0/3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               *t78400*t78396*t78397*(3.0/2.0)+gamma_aa[index]*mu_*t78396*t78397*t78398*1.0/pow(t78399,8.0/3.0)*(1.0E1/ \
               9.0))-kp*rho_a[index]*1.0/(t78402*t78402*t78402)*(t78414*t78414)*t78426*2.0-kp*rho_a[index]*t78414* \
               t78427*t78439*2.0)+(t78460+t78461+t78198+rho_a[index]*(-t78264+t78375+t78174*t78268*(t78264+t78374- \
               t78271*t78352*t78357*t78358-a1p*c*c0p*t78241*t78265*(2.0/3.0)))+t78149*(t78209-a1p*c*c0p*t78161*t78187* \
               (2.0/3.0)-t78210*t78174*t78193*t78188*t78199*4.0-t78311*t78174*t78193*t78196*t78199+t78174*t78228* \
               t78196*t78188*t78199+t78174*t78193*t78168*t78169*t78196*t78188*4.0+Aa*t78211*t78221*t78230*t78223* \
               t78174*t78228*2.0-Aa*t78211*t78221*t78223*t78334*t78174*t78193*2.0+t78211*t78230*t78223*t78342*t78344* \
               t78174*t78193*t78349-Aa*a1a*c*t78211*t78221*t78230*t78161*t78174*t78193*(2.0/3.0))-c0p*t78256*t78265* \
               2.0-t78441*t78174*t78268)*(ccab1*gamma_aa[index]*gcab*t78275*t78298*(4.0/3.0)-ccab2*t78272*t78274* \
               t78472*t78476-ccab4*t78280*t78281*t78466*t78475-ccab1*gamma_aa[index]*t78272*t78273*t78275*t78467* \
               (4.0/3.0)+ccab2*gamma_aa[index]*t78272*t78273*t78275*t78296*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t78272* \
               t78274*t78275*t78297*4.0+ccab4*gamma_aa[index]*t78280*t78273*t78274*t78275*t78299*(1.6E1/3.0)-ccab3* \
               gcab*t78272*t78273*t78480*t78274*t78473)*2.0-(ccab0+ccab1*gcab*t78273*t78298+ccab2*t78272*t78274*t78296+ \
               ccab4*t78280*t78281*t78299+ccab3*gcab*t78272*t78273*t78274*t78297)*(-t78149*(-t78331-t78323+t78351+ \
               t78376+t78174*t78193*t78196*t78199*(t78331+t78323-t78351-t78376-t78303*1.0/(t78180*t78180*t78180)* \
               t78324*t78186*2.0+t78303*t78304*t78186*(b2f*c*t78300*(4.0/9.0)+b4f*t78301*t78156*(1.0E1/9.0)+b1f*c* \
               t78201*t78300*(2.0/9.0)+b3f*c*t78300*t78152*(2.0/3.0)-b1f*t78301*t78315*t78156*(1.0/3.6E1)+b3f*t78201* \
               t78301*t78156*(1.0/1.2E1))+1.0/(t78180*t78180*t78180*t78180)*t78324*1.0/(t78183*t78183)*t78175*t78186* \
               (1.0/2.0)-a1f*c*c0f*t78300*t78184*(8.0/9.0)+a1f*c*t78303*t78304*t78161*t78309*(2.0/3.0)-a1p*c*t78202* \
               t78203*t78161*t78208*(2.0/3.0))-t78210*t78311*t78174*t78193*t78199*8.0+t78210*t78174*t78228*t78188* \
               t78199*8.0+t78311*t78174*t78228*t78196*t78199*2.0-t78332*t78174*t78193*t78188*t78199*2.0E1-t78341* \
               t78174*t78196*t78188*t78199-t78174*t78193*t78169*t78196*t78188*1.2E1+t78210*t78174*t78193*t78168*t78169* \
               t78188*3.2E1+t78311*t78174*t78193*t78168*t78169*t78196*8.0-t78174*t78228*t78168*t78169*t78196*t78188* \
               8.0+a1p*c*t78202*t78203*t78161*t78208*(2.0/3.0)-Aa*t78211*t78221*t78230*t78223*t78341*t78174*2.0+Aa* \
               t78211*t78221*t78223*t78334*t78174*t78228*4.0-Aa*t78211*t78221*t78223*t78174*t78193*(t78332*t78199* \
               2.0E1+t78169*t78196*1.2E1-t78210*t78168*t78169*3.2E1)*2.0-t78211*t78230*t78223*t78342*t78344*t78174* \
               t78228*t78349*2.0+t78211*t78223*t78342*t78334*t78344*t78174*t78193*t78349*2.0-t78211*t78230*t78223* \
               t78350*t78342*1.0/(t78217*t78217*t78217)*t78174*t78193*2.0+t78211*t78230*t78223*t78342*t78344*t78174* \
               t78193*(b2a*c*t78300*(4.0/9.0)+b4a*t78301*t78156*(1.0E1/9.0)+b1a*c*t78201*t78300*(2.0/9.0)+b3a*c*t78300* \
               t78152*(2.0/3.0)-b1a*t78301*t78315*t78156*(1.0/3.6E1)+b3a*t78201*t78301*t78156*(1.0/1.2E1))-Aa*a1a* \
               c*t78300*t78211*t78221*t78230*t78174*t78193*(8.0/9.0)+Aa*a1a*c*t78211*t78221*t78230*t78161*t78174* \
               t78228*(4.0/3.0)-Aa*a1a*c*t78211*t78221*t78161*t78334*t78174*t78193*(4.0/3.0)+t78211*1.0/(t78220*t78220) \
               *t78212*t78230*t78223*t78350*1.0/(t78217*t78217*t78217*t78217)*t78174*t78193*(1.0/2.0)+a1a*c*t78211* \
               t78230*t78161*t78342*t78344*t78174*t78193*t78349*(2.0/3.0))+rho_a[index]*(-t78364-t78373+t78553+t78557+ \
               t78559+t78174*t78268*(t78551+t78364+t78373+t78556+t78558-t78271*t78352*t78361*t78544*2.0-t78370*t78256* \
               t78257*t78258-a1f*c*c0f*t78269*t78359*(8.0/9.0)-t78162*t78362*t78371*t78372*t78256*(1.0/2.0)-a1p*c* \
               t78241*t78263*t78257*t78258*(2.0/3.0)))+t78174*t78481*t78268*2.0+t78202*t78203*t78208*t78167*2.0-t78263* \
               t78256*t78257*t78258*2.0+a1p*c*c0p*t78241*t78265*(4.0/3.0)-a1p*c*c0p*t78161*t78187*(4.0/3.0)-t78210* \
               t78174*t78193*t78188*t78199*8.0-t78311*t78174*t78193*t78196*t78199*2.0+t78174*t78228*t78196*t78188* \
               t78199*2.0+t78174*t78193*t78168*t78169*t78196*t78188*8.0+Aa*t78211*t78221*t78230*t78223*t78174*t78228* \
               4.0-Aa*t78211*t78221*t78223*t78334*t78174*t78193*4.0+t78211*t78230*t78223*t78342*t78344*t78174*t78193* \
               t78349*2.0-Aa*a1a*c*t78211*t78221*t78230*t78161*t78174*t78193*(4.0/3.0))+t78543*t78498*(-t78264+t78375+ \
               t78174*t78481*t78268)*2.0+t78565*t78489*t78498*2.0-rho_a[index]*t78489*t78498*(ccaa1*gamma_aa[index]* \
               gcaa*t78507*t78474*(8.8E1/9.0)+ccaa4*t78504*t78483*t78537*t78484*(1.12E3/9.0)-ccaa1*t78522*t78482* \
               t78468*t78469*2.4E1+ccaa2*t78516*t78482*t78468*t78469*(3.04E2/9.0)-ccaa2*t78530*t78517*t78482*t78538* \
               t78468*(3.2E1/3.0)-ccaa4*t78527*t78536*t78483*t78519*t78484*(6.4E1/3.0)-ccaa2*t78482*t78538*t78468* \
               t78487*(gamma_aa[index]*gcaa*t78474*(1.76E2/9.0)+t78482*t78468*t78469*(3.04E2/9.0))-ccaa4*t78536*t78483* \
               t78484*t78485*(gamma_aa[index]*gcaa*t78474*(3.52E2/9.0)+t78483*t78537*t78484*(1.12E3/9.0)+t78482*t78468* \
               t78469*(6.08E2/3.0)+gamma_aa[index]*gcaa*t78521*t78482*t78468*2.88E2)+ccaa2*(t78530*t78530)*1.0/(t78515* \
               t78515*t78515)*t78482*t78468*t78487*2.0+ccaa4*1.0/(t78503*t78503*t78503)*(t78527*t78527)*t78483*t78484* \
               t78485*2.0+ccaa3*gamma_aa[index]*gcaa*t78512*t78521*t78482*t78468*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t78521*1.0/(t78506*t78506*t78506)*t78482*t78468*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t78511* \
               t78511*t78511)*(t78534*t78534)*t78482*t78468*t78486*2.0-ccaa3*gamma_aa[index]*gcaa*t78535*t78482*t78468* \
               t78486*(gamma_aa[index]*gcaa*t78474*(8.8E1/3.0)+t78482*t78468*t78469*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t78521*t78482*t78468*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t78534*t78535*t78482*t78518*t78468*1.6E1) \
               +rho_a[index]*t78543*t78498*(-t78364-t78373+t78553+t78557+t78559+t78174*t78268*(t78551+t78364+t78373- \
               t78553+t78556-t78557+t78558-t78559-t78271*t78352*t78361*t78544*2.0-a1f*c*c0f*t78269*t78359*(8.0/9.0) \
               ))+rho_a[index]*t78565*t78568*t78498*2.0-gamma_aa[index]*t78543*t78491*t78493*t78377*t78568*(1.0/4.0) \
               +gamma_aa[index]*t78491*t78493*t78565*t78377*t78489*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            double t82882 = 1.0/pow(rho_a[index],1.0/3.0);
            double t82883 = c*t82882;
            double t82884 = sqrt(t82883);
            double t82885 = b1f*t82884;
            double t82886 = pow(t82883,3.0/2.0);
            double t82887 = b3f*t82886;
            double t82888 = c*c;
            double t82889 = 1.0/pow(rho_a[index],2.0/3.0);
            double t82890 = b4f*t82888*t82889;
            double t82891 = b2f*c*t82882;
            double t82892 = t82890+t82891+t82885+t82887;
            double t82893 = 1.0/pow(rho_a[index],4.0/3.0);
            double t82894 = b1p*t82884;
            double t82895 = b3p*t82886;
            double t82896 = b4p*t82888*t82889;
            double t82897 = b2p*c*t82882;
            double t82898 = t82894+t82895+t82896+t82897;
            double t82899 = 1.0/pow(rho_a[index],5.0/3.0);
            double t82900 = 1.0/sqrt(t82883);
            double t82901 = 1.0/c0f;
            double t82902 = 1.0/t82892;
            double t82903 = t82901*t82902*(1.0/2.0);
            double t82904 = t82903+1.0;
            double t82905 = 1.0/c0p;
            double t82906 = 1.0/t82898;
            double t82907 = t82905*t82906*(1.0/2.0);
            double t82908 = t82907+1.0;
            double t82909 = a1p*c*t82882;
            double t82910 = t82909+1.0;
            double t82911 = 1.0/t82908;
            double t82912 = 1.0/(t82898*t82898);
            double t82913 = b4p*t82888*t82899*(2.0/3.0);
            double t82914 = b2p*c*t82893*(1.0/3.0);
            double t82915 = b1p*c*t82900*t82893*(1.0/6.0);
            double t82916 = b3p*c*t82884*t82893*(1.0/2.0);
            double t82917 = t82913+t82914+t82915+t82916;
            double t82918 = t82910*t82911*t82912*t82917;
            double t82919 = log(t82908);
            double t82920 = gamma_aa[index]*gamma_aa[index];
            double t82921 = gcaa*gcaa;
            double t82922 = t82920*t82920;
            double t82923 = t82921*t82921;
            double t82924 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t82925 = 1.0/pow(rho_a[index],8.0/3.0);
            double t82926 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t82927 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t82928 = pow(2.0,1.0/3.0);
            double t82929 = t82928*2.0;
            double t82930 = t82929-2.0;
            double t82931 = two_13*2.0;
            double t82932 = t82931-2.0;
            double t82933 = 1.0/t82932;
            double t82934 = log(t82904);
            double t82935 = a1f*c*t82882;
            double t82936 = t82935+1.0;
            double t82937 = tau_a[index]-1.0/1.0E20;
            double t82938 = ( (t82937 > 0.0) ?  1.0 : 0.0 ) ;
            double t82939 = 1.0/tau_a[index];
            double t82940 = tau_a[index]*2.0;
            double t82941 = 1.0/rho_a[index];
            double t82989 = gamma_aa[index]*t82941*(1.0/4.0);
            double t82942 = t82940-t82989;
            double t82943 = t82942*t82939*(1.0/2.0);
            double t82944 = t82943-1.0;
            double t82945 = t82944*t82938;
            double t82946 = t82945+1.0;
            double t82947 = gamma_aa[index]*gcaa*t82925*4.0;
            double t82948 = gamma_aa[index]*gcaa*t82920*t82921*t82926*4.0;
            double t82949 = t82920*t82921*t82927*6.0;
            double t82950 = t82922*t82923*t82924;
            double t82951 = t82950+t82947+t82948+t82949+1.0;
            double t82952 = 1.0/t82951;
            double t82953 = gamma_aa[index]*gcaa*t82925;
            double t82954 = t82953+1.0;
            double t82955 = 1.0/t82954;
            double t82956 = gamma_aa[index]*gcaa*t82925*3.0;
            double t82957 = gamma_aa[index]*gcaa*t82920*t82921*t82926;
            double t82958 = t82920*t82921*t82927*3.0;
            double t82959 = t82956+t82957+t82958+1.0;
            double t82960 = 1.0/t82959;
            double t82961 = gamma_aa[index]*gcaa*t82925*2.0;
            double t82962 = t82920*t82921*t82927;
            double t82963 = t82961+t82962+1.0;
            double t82964 = 1.0/t82963;
            double t82965 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t82966 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t82967 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t82968 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t82969 = pow(rho_a[index],2.0/3.0);
            double t82970 = pow(rho_a[index],5.0/3.0);
            double t82971 = C_k*t82970*t82939;
            double t82972 = t82971+1.0;
            double t82973 = t82971-1.0;
            double t82974 = 1.0/(t82972*t82972);
            double t82975 = t82973*t82973;
            double t82976 = t82975*t82975;
            double t82977 = t82976*t82976;
            double t82978 = 1.0/pow(t82972,1.1E1);
            double t82979 = 1.0/(t82972*t82972*t82972);
            double t82980 = 1.0/(t82972*t82972*t82972*t82972);
            double t82981 = 1.0/(t82972*t82972*t82972*t82972*t82972);
            double t82982 = 1.0/(t82972*t82972*t82972*t82972*t82972*t82972);
            double t82983 = 1.0/(t82972*t82972*t82972*t82972*t82972*t82972*t82972);
            double t82984 = 1.0/(t82972*t82972*t82972*t82972*t82972*t82972*t82972*t82972);
            double t82985 = 1.0/(t82972*t82972*t82972*t82972*t82972*t82972*t82972*t82972*t82972);
            double t82986 = 1.0/pow(t82972,1.0E1);
            double t82987 = c0f*t82934*t82936*2.0;
            double t82988 = c0p*t82910*t82919*2.0;
            double t82990 = 1.0/pow(rho_a[index],1.0E1);
            double t82991 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t82992 = 1.0/(t82954*t82954);
            double t82993 = gamma_aa[index]*gcaa*t82966*(3.2E1/3.0);
            double t82994 = gamma_aa[index]*gcaa*t82920*t82921*t82967*3.2E1;
            double t82995 = t82920*t82921*t82965*3.2E1;
            double t82996 = t82922*t82923*t82968*(3.2E1/3.0);
            double t82997 = t82993+t82994+t82995+t82996;
            double t82998 = gamma_aa[index]*gcaa*t82966*(1.6E1/3.0);
            double t82999 = t82920*t82921*t82965*(1.6E1/3.0);
            double t83000 = t82998+t82999;
            double t83001 = gamma_aa[index]*gcaa*t82966*8.0;
            double t83002 = gamma_aa[index]*gcaa*t82920*t82921*t82967*8.0;
            double t83003 = t82920*t82921*t82965*1.6E1;
            double t83004 = t83001+t83002+t83003;
            double t83005 = 1.0/(t82959*t82959);
            double t83006 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t83007 = 1.0/(t82951*t82951);
            double t83008 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t83009 = 1.0/(t82963*t82963);
            double t83010 = ccaa4*t82922*t82923*t82924*t82952;
            double t83011 = ccaa1*gamma_aa[index]*gcaa*t82925*t82955;
            double t83012 = ccaa3*gamma_aa[index]*gcaa*t82920*t82921*t82960*t82926;
            double t83013 = ccaa2*t82920*t82921*t82927*t82964;
            double t83014 = ccaa0+t83010+t83011+t83012+t83013;
            double t83015 = 1.0/t82904;
            double t83016 = b4f*t82888*t82899*(2.0/3.0);
            double t83017 = b2f*c*t82893*(1.0/3.0);
            double t83018 = b1f*c*t82900*t82893*(1.0/6.0);
            double t83019 = b3f*c*t82884*t82893*(1.0/2.0);
            double t83020 = t83016+t83017+t83018+t83019;
            double t83021 = 1.0/(t82892*t82892);
            double t83022 = 1.0/pow(rho_a[index],7.0/3.0);
            double t83023 = 1.0/pow(t82883,3.0/2.0);
            double t83024 = t83020*t83020;
            double t83025 = t82917*t82917;
            double t83026 = 1.0/(t82898*t82898*t82898);
            double t83027 = t82910*t82911*t83025*t83026*2.0;
            double t83028 = b4p*t82925*t82888*(1.0E1/9.0);
            double t83029 = b2p*c*t83022*(4.0/9.0);
            double t83030 = b3p*t82900*t82925*t82888*(1.0/1.2E1);
            double t83031 = b1p*c*t82900*t83022*(2.0/9.0);
            double t83032 = b3p*c*t82884*t83022*(2.0/3.0);
            double t83033 = t83030+t83031+t83032+t83028+t83029-b1p*t82925*t82888*t83023*(1.0/3.6E1);
            double t83034 = 1.0/(t82908*t82908);
            double t83035 = 1.0/(t82898*t82898*t82898*t82898);
            double t83036 = a1p*c*c0p*t82919*t83022*(8.0/9.0);
            double t83037 = a1f*c*c0f*t82934*t82893*(2.0/3.0);
            double t83038 = a1p*c*c0p*t82919*t82893*(2.0/3.0);
            double t83039 = ccaa4*t82922*t82923*t82952*t82968*(3.2E1/3.0);
            double t83040 = ccaa1*gamma_aa[index]*gcaa*t82955*t82966*(8.0/3.0);
            double t83041 = ccaa3*gamma_aa[index]*gcaa*t82920*t82921*t82960*t82967*8.0;
            double t83042 = ccaa2*t82920*t82921*t82964*t82965*(1.6E1/3.0);
            double t83079 = ccaa1*t82920*t82921*t82965*t82992*(8.0/3.0);
            double t83080 = ccaa3*gamma_aa[index]*gcaa*t82920*t82921*t82926*t83004*t83005;
            double t83081 = ccaa4*t82922*t82923*t82924*t82997*t83007;
            double t83082 = ccaa2*t82920*t82921*t82927*t83000*t83009;
            double t83043 = t83040+t83041+t83042-t83080-t83081-t83082+t83039-t83079;
            double t83044 = X-1.0;
            double t83045 = 1.0/(k*k);
            double t83046 = 1.0/kp;
            double t83047 = 1.0/(rho_a[index]*rho_a[index]);
            double t83048 = rho_a[index]*2.0;
            double t83049 = 1.0/pow(t83048,2.0/3.0);
            double t83050 = gamma_aa[index]*mu_*t83045*t83046*t83047*t83049*(1.0/4.0);
            double t83051 = t83050+1.0;
            double t83052 = 1.0/t83051;
            double t83053 = kp-kp*t83052+1.0;
            double t83054 = C_k*C_k;
            double t83055 = pow(rho_a[index],4.0/3.0);
            double t83056 = 1.0/(tau_a[index]*tau_a[index]);
            double t83057 = 1.0/t82972;
            double t83058 = 1.0/pow(t82972,1.2E1);
            double t83059 = t82918+t83037-t83038-t82936*t83020*t83021*t83015;
            double t83060 = t82930*t82933*t83059;
            double t83061 = 1.0/(t83051*t83051);
            double t83062 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t83063 = 1.0/pow(t83048,5.0/3.0);
            double t83064 = a_1*t82973*t83057;
            double t83065 = a_10*t82975*t82977*t82986;
            double t83066 = a_11*t82973*t82975*t82977*t82978;
            double t83067 = a_2*t82974*t82975;
            double t83068 = a_3*t82973*t82975*t82979;
            double t83069 = a_4*t82980*t82976;
            double t83070 = a_5*t82981*t82973*t82976;
            double t83071 = a_6*t82982*t82975*t82976;
            double t83072 = a_7*t82973*t82983*t82975*t82976;
            double t83073 = a_8*t82984*t82977;
            double t83074 = a_9*t82973*t82985*t82977;
            double t83075 = t83070+t83071+t83072+t83064+t83073+t83065+t83074+t83066+t83067+t83068+t83069+1.0;
            double t83076 = t82987-t82988;
            double t83077 = t82930*t82933*t83076;
            double t83078 = t82988+t83077;
            double t83083 = gamma_aa[index]*mu_*t83062*t83045*t83046*t83049*(1.0/2.0);
            double t83084 = gamma_aa[index]*mu_*t83045*t83063*t83046*t83047*(1.0/3.0);
            double t83085 = t83083+t83084;
            double t83086 = C_k*a_1*t82939*t82969*t83057*(5.0/3.0);
            double t83087 = C_k*a_2*t82973*t82974*t82939*t82969*(1.0E1/3.0);
            double t83088 = C_k*a_10*t82973*t82939*t82977*t82986*t82969*(5.0E1/3.0);
            double t83089 = C_k*a_11*t82939*t82975*t82977*t82969*t82978*(5.5E1/3.0);
            double t83090 = C_k*a_3*t82939*t82975*t82969*t82979*5.0;
            double t83091 = C_k*a_4*t82980*t82973*t82939*t82975*t82969*(2.0E1/3.0);
            double t83092 = C_k*a_5*t82981*t82939*t82976*t82969*(2.5E1/3.0);
            double t83093 = C_k*a_6*t82973*t82982*t82939*t82976*t82969*1.0E1;
            double t83094 = C_k*a_7*t82983*t82939*t82975*t82976*t82969*(3.5E1/3.0);
            double t83095 = C_k*a_8*t82973*t82939*t82975*t82984*t82976*t82969*(4.0E1/3.0);
            double t83096 = C_k*a_9*t82939*t82985*t82977*t82969*1.5E1;
            double t83097 = t83090+t83091+t83092+t83093+t83094+t83086+t83095+t83087+t83096+t83088+t83089-C_k* \
               a_1*t82973*t82974*t82939*t82969*(5.0/3.0)-C_k*a_2*t82939*t82975*t82969*t82979*(1.0E1/3.0)-C_k*a_4* \
               t82981*t82939*t82976*t82969*(2.0E1/3.0)-C_k*a_8*t82939*t82985*t82977*t82969*(4.0E1/3.0)-C_k*a_10*t82939* \
               t82975*t82977*t82969*t82978*(5.0E1/3.0)-C_k*a_3*t82980*t82973*t82939*t82975*t82969*5.0-C_k*a_5*t82973* \
               t82982*t82939*t82976*t82969*(2.5E1/3.0)-C_k*a_6*t82983*t82939*t82975*t82976*t82969*1.0E1-C_k*a_9*t82973* \
               t82939*t82977*t82986*t82969*1.5E1-C_k*a_11*t82973*t82939*t82975*t82977*t82969*t83058*(5.5E1/3.0)-C_k* \
               a_7*t82973*t82939*t82975*t82984*t82976*t82969*(3.5E1/3.0);
            v_rho_a_rho_a_[index] = t82946*t83014*(-t82918+t83038+t82930*t82933*(t82918+t83037-t82936*t83020* \
               t83021*t83015-a1p*c*c0p*t82919*t82893*(2.0/3.0)))*2.0-t83044*t83053*t83097*2.0+t82946*t83043*(t82988+ \
               t82930*t82933*(t82987-c0p*t82910*t82919*2.0))*2.0-rho_a[index]*t82946*t83078*(ccaa1*gamma_aa[index]* \
               gcaa*t82955*t83006*(8.8E1/9.0)-ccaa1*t82920*t82921*t82991*t82992*2.4E1+ccaa2*t82920*t82921*t82964* \
               t82991*(3.04E2/9.0)+ccaa4*t82922*t82923*t82952*t83008*(1.12E3/9.0)-ccaa4*t82922*t82923*t82968*t82997* \
               t83007*(6.4E1/3.0)-ccaa2*t82920*t82921*t82965*t83000*t83009*(3.2E1/3.0)-ccaa2*t82920*t82921*t82927* \
               t83009*(gamma_aa[index]*gcaa*t83006*(1.76E2/9.0)+t82920*t82921*t82991*(3.04E2/9.0))-ccaa4*t82922*t82923* \
               t82924*t83007*(gamma_aa[index]*gcaa*t83006*(3.52E2/9.0)+t82920*t82921*t82991*(6.08E2/3.0)+t82922*t82923* \
               t83008*(1.12E3/9.0)+gamma_aa[index]*gcaa*t82920*t82921*t82990*2.88E2)+ccaa4*t82922*t82923*t82924*1.0/ \
               (t82951*t82951*t82951)*(t82997*t82997)*2.0+ccaa2*t82920*t82921*t82927*1.0/(t82963*t82963*t82963)*(t83000* \
               t83000)*2.0+ccaa3*gamma_aa[index]*gcaa*t82920*t82921*t82960*t82990*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t82920*t82921*1.0/(t82954*t82954*t82954)*t82990*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t82920*t82921* \
               t82926*1.0/(t82959*t82959*t82959)*(t83004*t83004)*2.0-ccaa3*gamma_aa[index]*gcaa*t82920*t82921*t82926* \
               t83005*(gamma_aa[index]*gcaa*t83006*(8.8E1/3.0)+t82920*t82921*t82991*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t82920*t82921*t82990*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t82920*t82921*t82967*t83004*t83005*1.6E1) \
               -rho_a[index]*t83044*t83053*(C_k*a_1*t82882*t82939*t83057*(1.0E1/9.0)-a_1*t82974*t83054*t83055*t83056* \
               (5.0E1/9.0)+a_2*t82974*t83054*t83055*t83056*(5.0E1/9.0)+a_1*t82973*t82979*t83054*t83055*t83056*(5.0E1/ \
               9.0)+a_10*t82977*t82986*t83054*t83055*t83056*2.5E2+a_2*t82980*t82975*t83054*t83055*t83056*(5.0E1/3.0) \
               -a_2*t82973*t82979*t83054*t83055*t83056*(2.0E2/9.0)-a_3*t82980*t82975*t83054*t83055*t83056*5.0E1+a_3* \
               t82973*t82979*t83054*t83055*t83056*(5.0E1/3.0)+a_4*t82980*t82975*t83054*t83055*t83056*(1.0E2/3.0)+ \
               a_4*t82982*t82976*t83054*t83055*t83056*(5.0E2/9.0)-a_5*t82982*t82976*t83054*t83055*t83056*(1.25E3/ \
               9.0)+a_6*t82982*t82976*t83054*t83055*t83056*(2.5E2/3.0)+a_8*t82977*t82986*t83054*t83055*t83056*2.0E2- \
               a_9*t82977*t82986*t83054*t83055*t83056*4.5E2-C_k*a_1*t82882*t82973*t82974*t82939*(1.0E1/9.0)+C_k*a_2* \
               t82882*t82973*t82974*t82939*(2.0E1/9.0)-C_k*a_2*t82882*t82939*t82975*t82979*(2.0E1/9.0)+C_k*a_3*t82882* \
               t82939*t82975*t82979*(1.0E1/3.0)-C_k*a_4*t82882*t82981*t82939*t82976*(4.0E1/9.0)+C_k*a_5*t82882*t82981* \
               t82939*t82976*(5.0E1/9.0)-C_k*a_8*t82882*t82939*t82985*t82977*(8.0E1/9.0)+C_k*a_9*t82882*t82939*t82985* \
               t82977*1.0E1+C_k*a_10*t82882*t82973*t82939*t82977*t82986*(1.0E2/9.0)-C_k*a_10*t82882*t82939*t82975* \
               t82977*t82978*(1.0E2/9.0)+C_k*a_11*t82882*t82939*t82975*t82977*t82978*(1.1E2/9.0)-C_k*a_3*t82980*t82882* \
               t82973*t82939*t82975*(1.0E1/3.0)+C_k*a_4*t82980*t82882*t82973*t82939*t82975*(4.0E1/9.0)-C_k*a_5*t82882* \
               t82973*t82982*t82939*t82976*(5.0E1/9.0)+C_k*a_6*t82882*t82973*t82982*t82939*t82976*(2.0E1/3.0)-C_k* \
               a_6*t82882*t82983*t82939*t82975*t82976*(2.0E1/3.0)+C_k*a_7*t82882*t82983*t82939*t82975*t82976*(7.0E1/ \
               9.0)-C_k*a_9*t82882*t82973*t82939*t82977*t82986*1.0E1-a_10*t82973*t82977*t82978*t83054*t83055*t83056* \
               (5.0E3/9.0)+a_11*t82973*t82977*t82978*t83054*t83055*t83056*(2.75E3/9.0)+a_10*t82975*t82977*t83054* \
               t83055*t83056*t83058*(2.75E3/9.0)-a_11*t82975*t82977*t83054*t83055*t83056*t83058*(6.05E3/9.0)+a_3* \
               t82981*t82973*t82975*t83054*t83055*t83056*(1.0E2/3.0)-a_4*t82981*t82973*t82975*t83054*t83055*t83056* \
               (8.0E2/9.0)+a_5*t82981*t82973*t82975*t83054*t83055*t83056*(5.0E2/9.0)+a_5*t82973*t82983*t82976*t83054* \
               t83055*t83056*(2.5E2/3.0)-a_6*t82973*t82983*t82976*t83054*t83055*t83056*2.0E2+a_6*t82975*t82984*t82976* \
               t83054*t83055*t83056*(3.5E2/3.0)+a_7*t82973*t82983*t82976*t83054*t83055*t83056*(3.5E2/3.0)-a_7*t82975* \
               t82984*t82976*t83054*t83055*t83056*(2.45E3/9.0)+a_8*t82975*t82984*t82976*t83054*t83055*t83056*(1.4E3/ \
               9.0)+a_9*t82973*t82977*t82978*t83054*t83055*t83056*2.5E2+a_11*1.0/pow(t82972,1.3E1)*t82973*t82975* \
               t82977*t83054*t83055*t83056*(1.1E3/3.0)-C_k*a_11*t82882*t82973*t82939*t82975*t82977*t83058*(1.1E2/ \
               9.0)-C_k*a_7*t82882*t82973*t82939*t82975*t82984*t82976*(7.0E1/9.0)+C_k*a_8*t82882*t82973*t82939*t82975* \
               t82984*t82976*(8.0E1/9.0)+a_7*t82973*t82975*t82976*t82985*t83054*t83055*t83056*(1.4E3/9.0)-a_8*t82973* \
               t82975*t82976*t82985*t83054*t83055*t83056*(3.2E3/9.0)+a_9*t82973*t82975*t82976*t82985*t83054*t83055* \
               t83056*2.0E2)-rho_a[index]*t82946*t83043*(-t82918+t83060+t83038)*2.0+rho_a[index]*t82946*t83014*(- \
               t83027-t83036+t82930*t82933*(t83027+t83036-t82910*t82911*t82912*t83033-t82936*1.0/(t82892*t82892*t82892) \
               *t83015*t83024*2.0+t82936*t83021*t83015*(b2f*c*t83022*(4.0/9.0)+b4f*t82925*t82888*(1.0E1/9.0)+b1f* \
               c*t82900*t83022*(2.0/9.0)+b3f*c*t82884*t83022*(2.0/3.0)-b1f*t82925*t82888*t83023*(1.0/3.6E1)+b3f*t82900* \
               t82925*t82888*(1.0/1.2E1))+t82901*1.0/(t82904*t82904)*t82936*1.0/(t82892*t82892*t82892*t82892)*t83024* \
               (1.0/2.0)-a1f*c*c0f*t82934*t83022*(8.0/9.0)-t82910*t82905*t83025*t83034*t83035*(1.0/2.0)+a1f*c*t82893* \
               t83020*t83021*t83015*(2.0/3.0)-a1p*c*t82911*t82912*t82917*t82893*(2.0/3.0))+t82910*t82911*t82912*t83033+ \
               t82910*t82905*t83025*t83034*t83035*(1.0/2.0)+a1p*c*t82911*t82912*t82917*t82893*(2.0/3.0))+kp*t83061* \
               t83044*t83075*t83085*2.0+gamma_aa[index]*t82941*t82938*t82939*t83043*t83078*(1.0/4.0)+kp*rho_a[index]* \
               t83061*t83044*t83085*t83097*2.0+gamma_aa[index]*t82941*t82938*t82939*t83014*(-t82918+t83060+t83038) \
               *(1.0/4.0)-kp*rho_a[index]*t83061*t83044*t83075*(gamma_aa[index]*mu_*t83062*t83045*t83063*t83046*(4.0/ \
               3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t83045*t83046*t83049* \
               (3.0/2.0)+gamma_aa[index]*mu_*t83045*t83046*t83047*1.0/pow(t83048,8.0/3.0)*(1.0E1/9.0))+kp*rho_a[index]* \
               1.0/(t83051*t83051*t83051)*t83044*t83075*(t83085*t83085)*2.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t78574 = rho_a[index]+rho_b[index];
            double t78575 = 1.0/pow(t78574,1.0/3.0);
            double t78576 = c*t78575;
            double t78577 = sqrt(t78576);
            double t78578 = b1p*t78577;
            double t78579 = pow(t78576,3.0/2.0);
            double t78580 = b3p*t78579;
            double t78581 = c*c;
            double t78582 = 1.0/pow(t78574,2.0/3.0);
            double t78583 = b4p*t78581*t78582;
            double t78584 = b2p*c*t78575;
            double t78585 = t78580+t78583+t78584+t78578;
            double t78586 = 1.0/pow(t78574,4.0/3.0);
            double t78587 = 1.0/c0p;
            double t78588 = 1.0/t78585;
            double t78589 = t78587*t78588*(1.0/2.0);
            double t78590 = t78589+1.0;
            double t78591 = a1p*c*t78575;
            double t78592 = t78591+1.0;
            double t78593 = rho_a[index]-rho_b[index];
            double t78594 = t78593*t78593;
            double t78595 = 1.0/t78574;
            double t78596 = t78593*t78595;
            double t78597 = two_13*2.0;
            double t78598 = t78597-2.0;
            double t78599 = 1.0/t78598;
            double t78600 = 1.0/c0f;
            double t78601 = b1f*t78577;
            double t78602 = b3f*t78579;
            double t78603 = b4f*t78581*t78582;
            double t78604 = b2f*c*t78575;
            double t78605 = t78601+t78602+t78603+t78604;
            double t78606 = 1.0/t78605;
            double t78607 = t78600*t78606*(1.0/2.0);
            double t78608 = t78607+1.0;
            double t78609 = log(t78608);
            double t78610 = a1f*c*t78575;
            double t78611 = t78610+1.0;
            double t78612 = log(t78590);
            double t78622 = c0f*t78611*t78609*2.0;
            double t78623 = c0p*t78612*t78592*2.0;
            double t78613 = t78622-t78623;
            double t78614 = t78596+1.0;
            double t78615 = pow(t78614,4.0/3.0);
            double t78616 = -t78596+1.0;
            double t78617 = pow(t78616,4.0/3.0);
            double t78618 = t78615+t78617-2.0;
            double t78619 = 1.0/(t78574*t78574);
            double t78650 = t78619*t78593;
            double t78620 = -t78650+t78595;
            double t78621 = 1.0/(t78574*t78574*t78574*t78574);
            double t78624 = t78594*t78594;
            double t78625 = 1.0/pow(t78574,5.0/3.0);
            double t78626 = 1.0/sqrt(t78576);
            double t78627 = 1.0/t78590;
            double t78628 = 1.0/(t78585*t78585);
            double t78629 = b4p*t78625*t78581*(2.0/3.0);
            double t78630 = b2p*c*t78586*(1.0/3.0);
            double t78631 = b1p*c*t78626*t78586*(1.0/6.0);
            double t78632 = b3p*c*t78577*t78586*(1.0/2.0);
            double t78633 = t78630+t78631+t78632+t78629;
            double t78634 = t78633*t78627*t78592*t78628;
            double t78635 = 1.0/(t78574*t78574*t78574*t78574*t78574);
            double t78636 = 1.0/d2fz0;
            double t78637 = 1.0/Aa;
            double t78638 = b1a*t78577;
            double t78639 = b3a*t78579;
            double t78640 = b4a*t78581*t78582;
            double t78641 = b2a*c*t78575;
            double t78642 = t78640+t78641+t78638+t78639;
            double t78643 = 1.0/t78642;
            double t78644 = t78643*t78637*(1.0/2.0);
            double t78645 = t78644+1.0;
            double t78646 = log(t78645);
            double t78647 = a1a*c*t78575;
            double t78648 = t78647+1.0;
            double t78649 = pow(t78614,1.0/3.0);
            double t78651 = t78620*t78649*(4.0/3.0);
            double t78652 = pow(t78616,1.0/3.0);
            double t78796 = t78620*t78652*(4.0/3.0);
            double t78653 = t78651-t78796;
            double t78654 = t78621*t78624;
            double t78655 = t78654-1.0;
            double t78656 = 1.0/pow(rho_a[index],1.0/3.0);
            double t78657 = c*t78656;
            double t78658 = sqrt(t78657);
            double t78659 = b1f*t78658;
            double t78660 = pow(t78657,3.0/2.0);
            double t78661 = b3f*t78660;
            double t78662 = 1.0/pow(rho_a[index],2.0/3.0);
            double t78663 = b4f*t78581*t78662;
            double t78664 = b2f*c*t78656;
            double t78665 = t78661+t78663+t78664+t78659;
            double t78666 = 1.0/pow(rho_a[index],4.0/3.0);
            double t78667 = b1p*t78658;
            double t78668 = b3p*t78660;
            double t78669 = b4p*t78581*t78662;
            double t78670 = b2p*c*t78656;
            double t78671 = t78670+t78667+t78668+t78669;
            double t78672 = 1.0/pow(rho_a[index],5.0/3.0);
            double t78673 = 1.0/sqrt(t78657);
            double t78674 = 1.0/t78665;
            double t78675 = t78600*t78674*(1.0/2.0);
            double t78676 = t78675+1.0;
            double t78677 = 1.0/t78671;
            double t78678 = t78587*t78677*(1.0/2.0);
            double t78679 = t78678+1.0;
            double t78680 = a1p*c*t78656;
            double t78681 = t78680+1.0;
            double t78682 = 1.0/t78679;
            double t78683 = 1.0/(t78671*t78671);
            double t78684 = b4p*t78581*t78672*(2.0/3.0);
            double t78685 = b2p*c*t78666*(1.0/3.0);
            double t78686 = b1p*c*t78673*t78666*(1.0/6.0);
            double t78687 = b3p*c*t78666*t78658*(1.0/2.0);
            double t78688 = t78684+t78685+t78686+t78687;
            double t78689 = t78681*t78682*t78683*t78688;
            double t78690 = log(t78679);
            double t78691 = pow(2.0,1.0/3.0);
            double t78692 = t78691*2.0;
            double t78693 = t78692-2.0;
            double t78694 = log(t78676);
            double t78695 = a1f*c*t78656;
            double t78696 = t78695+1.0;
            double t78697 = gcab*gcab;
            double t78701 = 1.0/pow(rho_a[index],8.0/3.0);
            double t78702 = gamma_aa[index]*t78701*(1.0/2.0);
            double t78703 = 1.0/pow(rho_b[index],8.0/3.0);
            double t78704 = gamma_bb[index]*t78703*(1.0/2.0);
            double t78698 = t78702+t78704;
            double t78699 = t78698*t78698;
            double t78700 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t78705 = t78697*t78697;
            double t78706 = t78699*t78699;
            double t78707 = t78697*t78699*6.0;
            double t78708 = gcab*t78697*t78698*t78699*4.0;
            double t78709 = t78705*t78706;
            double t78710 = gcab*t78698*4.0;
            double t78711 = t78710+t78707+t78708+t78709+1.0;
            double t78712 = gcab*t78698;
            double t78713 = t78712+1.0;
            double t78714 = t78697*t78699;
            double t78715 = gcab*t78698*2.0;
            double t78716 = t78714+t78715+1.0;
            double t78717 = t78697*t78699*3.0;
            double t78718 = gcab*t78697*t78698*t78699;
            double t78719 = gcab*t78698*3.0;
            double t78720 = t78717+t78718+t78719+1.0;
            double t78721 = t78621*t78613*t78618*t78593*t78594*t78599*4.0;
            double t78722 = t78650+t78595;
            double t78723 = 1.0/t78608;
            double t78724 = 1.0/(t78605*t78605);
            double t78725 = b4f*t78625*t78581*(2.0/3.0);
            double t78726 = b2f*c*t78586*(1.0/3.0);
            double t78727 = b1f*c*t78626*t78586*(1.0/6.0);
            double t78728 = b3f*c*t78577*t78586*(1.0/2.0);
            double t78729 = t78725+t78726+t78727+t78728;
            double t78730 = a1f*c*c0f*t78609*t78586*(2.0/3.0);
            double t78731 = t78624*t78635*4.0;
            double t78732 = t78722*t78652*(4.0/3.0);
            double t78795 = t78722*t78649*(4.0/3.0);
            double t78733 = t78732-t78795;
            double t78734 = 1.0/t78645;
            double t78735 = 1.0/(t78642*t78642);
            double t78736 = b4a*t78625*t78581*(2.0/3.0);
            double t78737 = b2a*c*t78586*(1.0/3.0);
            double t78738 = b1a*c*t78626*t78586*(1.0/6.0);
            double t78739 = b3a*c*t78577*t78586*(1.0/2.0);
            double t78740 = t78736+t78737+t78738+t78739;
            double t78741 = t78740*t78734*t78618*t78636*t78735*t78655*t78648*t78599;
            double t78742 = 1.0/pow(rho_b[index],1.0/3.0);
            double t78743 = c*t78742;
            double t78744 = sqrt(t78743);
            double t78745 = b1f*t78744;
            double t78746 = pow(t78743,3.0/2.0);
            double t78747 = b3f*t78746;
            double t78748 = 1.0/pow(rho_b[index],2.0/3.0);
            double t78749 = b4f*t78581*t78748;
            double t78750 = b2f*c*t78742;
            double t78751 = t78750+t78745+t78747+t78749;
            double t78752 = 1.0/pow(rho_b[index],4.0/3.0);
            double t78753 = b1p*t78744;
            double t78754 = b3p*t78746;
            double t78755 = b4p*t78581*t78748;
            double t78756 = b2p*c*t78742;
            double t78757 = t78753+t78754+t78755+t78756;
            double t78758 = 1.0/pow(rho_b[index],5.0/3.0);
            double t78759 = 1.0/sqrt(t78743);
            double t78760 = 1.0/t78751;
            double t78761 = t78600*t78760*(1.0/2.0);
            double t78762 = t78761+1.0;
            double t78763 = 1.0/t78757;
            double t78764 = t78763*t78587*(1.0/2.0);
            double t78765 = t78764+1.0;
            double t78766 = a1p*c*t78742;
            double t78767 = t78766+1.0;
            double t78768 = 1.0/t78765;
            double t78769 = 1.0/(t78757*t78757);
            double t78770 = b4p*t78581*t78758*(2.0/3.0);
            double t78771 = b2p*c*t78752*(1.0/3.0);
            double t78772 = b1p*c*t78752*t78759*(1.0/6.0);
            double t78773 = b3p*c*t78752*t78744*(1.0/2.0);
            double t78774 = t78770+t78771+t78772+t78773;
            double t78775 = t78774*t78767*t78768*t78769;
            double t78776 = log(t78765);
            double t78777 = log(t78762);
            double t78778 = a1f*c*t78742;
            double t78779 = t78778+1.0;
            double t78780 = t78621*t78613*t78624*t78618*t78599;
            double t78781 = Aa*t78618*t78636*t78646*t78655*t78648*t78599*2.0;
            double t78782 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t78783 = 1.0/(t78720*t78720);
            double t78784 = 1.0/t78713;
            double t78785 = 1.0/(t78711*t78711);
            double t78786 = 1.0/(t78716*t78716);
            double t78787 = 1.0/t78711;
            double t78788 = 1.0/(t78713*t78713);
            double t78789 = 1.0/t78716;
            double t78790 = 1.0/t78720;
            double t78792 = a1p*c*c0p*t78612*t78586*(2.0/3.0);
            double t78797 = t78611*t78723*t78724*t78729;
            double t78791 = t78730+t78634-t78792-t78797;
            double t78793 = 1.0/pow(t78574,7.0/3.0);
            double t78794 = 1.0/pow(t78574,8.0/3.0);
            double t78798 = t78633*t78633;
            double t78799 = 1.0/pow(t78576,3.0/2.0);
            double t78800 = b4p*t78581*t78794*(1.0E1/9.0);
            double t78801 = b2p*c*t78793*(4.0/9.0);
            double t78802 = b1p*c*t78626*t78793*(2.0/9.0);
            double t78803 = b3p*c*t78577*t78793*(2.0/3.0);
            double t78804 = b3p*t78581*t78626*t78794*(1.0/1.2E1);
            double t78805 = t78800+t78801+t78802+t78803+t78804-b1p*t78581*t78794*t78799*(1.0/3.6E1);
            double t78806 = t78805*t78627*t78592*t78628;
            double t78807 = 1.0/(t78585*t78585*t78585);
            double t78808 = t78729*t78729;
            double t78809 = 1.0/(t78590*t78590);
            double t78810 = 1.0/(t78585*t78585*t78585*t78585);
            double t78811 = t78810*t78592*t78809*t78587*t78798*(1.0/2.0);
            double t78812 = 1.0/(t78574*t78574*t78574);
            double t78813 = a1p*c*t78633*t78627*t78628*t78586*(2.0/3.0);
            double t78814 = 1.0/(t78574*t78574*t78574*t78574*t78574*t78574);
            double t78815 = t78621*t78593*t78594*4.0;
            double t78816 = t78731+t78815;
            double t78817 = t78812*t78652*t78593*(8.0/3.0);
            double t78818 = 1.0/pow(t78614,2.0/3.0);
            double t78819 = t78620*t78722*t78818*(4.0/9.0);
            double t78820 = 1.0/pow(t78616,2.0/3.0);
            double t78821 = t78620*t78820*t78722*(4.0/9.0);
            double t78822 = t78821+t78817+t78819-t78812*t78593*t78649*(8.0/3.0);
            double t78823 = t78740*t78740;
            double t78824 = t78731-t78815;
            double t78825 = t78621*t78613*t78624*t78653*t78599;
            double t78826 = Aa*t78618*t78636*t78816*t78646*t78648*t78599*2.0;
            double t78827 = Aa*t78653*t78636*t78646*t78655*t78648*t78599*2.0;
            double t78828 = c0f*t78694*t78696*2.0;
            double t78830 = c0p*t78681*t78690*2.0;
            double t78829 = -t78830+t78828;
            double t78831 = c0f*t78777*t78779*2.0;
            double t78833 = c0p*t78767*t78776*2.0;
            double t78832 = t78831-t78833;
            double t78834 = gamma_aa[index]*gcab*t78782*(8.0/3.0);
            double t78835 = gamma_aa[index]*t78782*t78697*t78698*(8.0/3.0);
            double t78836 = t78834+t78835;
            double t78837 = gamma_bb[index]*gcab*t78700*(8.0/3.0);
            double t78838 = gamma_bb[index]*t78700*t78697*t78698*(8.0/3.0);
            double t78839 = t78837+t78838;
            double t78840 = gamma_aa[index]*gcab*t78782*(1.6E1/3.0);
            double t78841 = gamma_aa[index]*gcab*t78782*t78697*t78699*1.6E1;
            double t78842 = gamma_aa[index]*t78705*t78782*t78698*t78699*(1.6E1/3.0);
            double t78843 = gamma_aa[index]*t78782*t78697*t78698*1.6E1;
            double t78844 = t78840+t78841+t78842+t78843;
            double t78845 = gamma_bb[index]*gcab*t78700*(1.6E1/3.0);
            double t78846 = gamma_bb[index]*gcab*t78700*t78697*t78699*1.6E1;
            double t78847 = gamma_bb[index]*t78700*t78705*t78698*t78699*(1.6E1/3.0);
            double t78848 = gamma_bb[index]*t78700*t78697*t78698*1.6E1;
            double t78849 = t78845+t78846+t78847+t78848;
            double t78850 = gamma_aa[index]*gcab*t78782*4.0;
            double t78851 = gamma_aa[index]*gcab*t78782*t78697*t78699*4.0;
            double t78852 = gamma_aa[index]*t78782*t78697*t78698*8.0;
            double t78853 = t78850+t78851+t78852;
            double t78854 = gamma_bb[index]*gcab*t78700*4.0;
            double t78855 = gamma_bb[index]*gcab*t78700*t78697*t78699*4.0;
            double t78856 = gamma_bb[index]*t78700*t78697*t78698*8.0;
            double t78857 = t78854+t78855+t78856;
            v_rho_a_rho_b_[index] = (t78623+t78780+t78781+rho_a[index]*(-t78689+t78693*t78599*(t78689-(1.0/(t78665* \
               t78665)*t78696*(b2f*c*t78666*(1.0/3.0)+b4f*t78581*t78672*(2.0/3.0)+b1f*c*t78673*t78666*(1.0/6.0)+b3f* \
               c*t78666*t78658*(1.0/2.0)))/t78676+a1f*c*c0f*t78666*t78694*(2.0/3.0)-a1p*c*c0p*t78690*t78666*(2.0/ \
               3.0))+a1p*c*c0p*t78690*t78666*(2.0/3.0))+t78574*(t78721+t78741+t78634+t78825+t78827-a1p*c*c0p*t78612* \
               t78586*(2.0/3.0)-t78613*t78624*t78635*t78618*t78599*4.0-t78621*t78624*t78618*t78791*t78599-Aa*t78618* \
               t78636*t78646*t78648*t78599*(t78731-t78621*t78593*t78594*4.0)*2.0-Aa*a1a*c*t78618*t78636*t78646*t78655* \
               t78586*t78599*(2.0/3.0))-c0p*t78681*t78690*2.0-t78693*t78829*t78599)*(ccab1*gamma_bb[index]*gcab*t78700* \
               t78784*(4.0/3.0)-ccab4*t78705*t78706*t78785*t78849-ccab2*t78839*t78786*t78697*t78699-ccab1*gamma_bb[index]* \
               t78700*t78697*t78698*t78788*(4.0/3.0)+ccab2*gamma_bb[index]*t78700*t78697*t78698*t78789*(8.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t78700*t78790*t78697*t78699*4.0+ccab4*gamma_bb[index]*t78700*t78705*t78787* \
               t78698*t78699*(1.6E1/3.0)-ccab3*gcab*t78783*t78857*t78697*t78698*t78699)+(ccab0+ccab1*gcab*t78784* \
               t78698+ccab4*t78705*t78706*t78787+ccab2*t78697*t78699*t78789+ccab3*gcab*t78790*t78697*t78698*t78699) \
               *(-t78825+t78826-t78827+t78574*(t78811+t78813+t78806-t78627*t78807*t78592*t78798*2.0+t78621*t78624* \
               t78653*t78599*(t78730+t78634-t78792-t78797)+t78621*t78624*t78599*(t78732-t78795)*(t78730+t78634-t78792- \
               t78797)-a1p*c*c0p*t78612*t78793*(8.0/9.0)-t78621*t78624*t78618*t78599*(t78811+t78813+t78806-t78627* \
               t78807*t78592*t78798*2.0+t78611*1.0/(t78605*t78605*t78605)*t78723*t78808*2.0-t78611*t78723*t78724* \
               (b2f*c*t78793*(4.0/9.0)+b4f*t78581*t78794*(1.0E1/9.0)+b1f*c*t78626*t78793*(2.0/9.0)+b3f*c*t78577*t78793* \
               (2.0/3.0)-b1f*t78581*t78794*t78799*(1.0/3.6E1)+b3f*t78581*t78626*t78794*(1.0/1.2E1))-t78600*t78611* \
               1.0/(t78605*t78605*t78605*t78605)*1.0/(t78608*t78608)*t78808*(1.0/2.0)+a1f*c*c0f*t78609*t78793*(8.0/ \
               9.0)-a1p*c*c0p*t78612*t78793*(8.0/9.0)-a1f*c*t78723*t78724*t78729*t78586*(2.0/3.0))+t78621*t78613* \
               t78624*t78822*t78599-t78613*t78624*t78814*t78618*t78599*2.0E1+t78613*t78624*t78635*t78653*t78599*4.0+ \
               t78621*t78613*t78618*t78594*t78599*1.2E1-t78624*t78635*t78618*t78791*t78599*8.0+t78613*t78624*t78635* \
               t78599*(t78732-t78795)*4.0-t78621*t78613*t78733*t78593*t78594*t78599*4.0+t78621*t78613*t78653*t78593* \
               t78594*t78599*4.0+Aa*t78822*t78636*t78646*t78655*t78648*t78599*2.0+Aa*t78653*t78636*t78816*t78646* \
               t78648*t78599*2.0+Aa*t78824*t78636*t78646*t78648*t78599*(t78732-t78795)*2.0-Aa*t78618*t78636*t78646* \
               t78648*t78599*(t78624*t78814*2.0E1-t78621*t78594*1.2E1)*2.0-t78740*t78733*t78734*t78636*t78735*t78655* \
               t78648*t78599+t78740*t78734*t78824*t78618*t78636*t78735*t78648*t78599-t78740*t78653*t78734*t78636* \
               t78735*t78655*t78648*t78599+t78740*t78734*t78618*t78636*t78735*t78816*t78648*t78599-1.0/(t78642*t78642* \
               t78642)*t78823*t78734*t78618*t78636*t78655*t78648*t78599*2.0+t78734*t78618*t78636*t78735*t78655*t78648* \
               t78599*(b2a*c*t78793*(4.0/9.0)+b4a*t78581*t78794*(1.0E1/9.0)+b1a*c*t78626*t78793*(2.0/9.0)+b3a*c*t78577* \
               t78793*(2.0/3.0)-b1a*t78581*t78794*t78799*(1.0/3.6E1)+b3a*t78581*t78626*t78794*(1.0/1.2E1))-Aa*a1a* \
               c*t78824*t78618*t78636*t78646*t78586*t78599*(2.0/3.0)+Aa*a1a*c*t78653*t78636*t78646*t78655*t78586* \
               t78599*(2.0/3.0)-Aa*a1a*c*t78618*t78636*t78816*t78646*t78586*t78599*(2.0/3.0)-Aa*a1a*c*t78618*t78636* \
               t78646*t78655*t78793*t78599*(8.0/9.0)+1.0/(t78642*t78642*t78642*t78642)*t78823*t78618*t78636*1.0/(t78645* \
               t78645)*t78637*t78655*t78648*t78599*(1.0/2.0)+Aa*a1a*c*t78636*t78646*t78655*t78586*t78599*(t78732- \
               t78795)*(2.0/3.0)+a1a*c*t78740*t78734*t78618*t78636*t78735*t78655*t78586*t78599*(2.0/3.0))-t78633* \
               t78627*t78592*t78628*2.0+t78621*t78624*t78618*t78599*(t78730+t78634-t78792-t78797)*2.0+a1p*c*c0p*t78612* \
               t78586*(4.0/3.0)-t78621*t78613*t78624*t78733*t78599+t78613*t78624*t78635*t78618*t78599*8.0-Aa*t78733* \
               t78636*t78646*t78655*t78648*t78599*2.0+Aa*t78618*t78636*t78646*t78648*t78599*(t78731-t78815)*2.0-t78740* \
               t78734*t78618*t78636*t78735*t78655*t78648*t78599*2.0+Aa*a1a*c*t78618*t78636*t78646*t78655*t78586*t78599* \
               (4.0/3.0))-(rho_b[index]*(t78833+t78832*t78693*t78599)+rho_a[index]*(t78830+t78693*t78829*t78599)- \
               t78574*(t78623+t78780+t78781))*(ccab4*t78705*t78706*t78785*(gamma_aa[index]*gamma_bb[index]*t78700* \
               t78782*t78697*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t78700*t78705*t78782*t78699*(6.4E1/3.0)+ \
               gamma_aa[index]*gamma_bb[index]*gcab*t78700*t78782*t78697*t78698*(1.28E2/3.0))-ccab4*1.0/(t78711*t78711* \
               t78711)*t78705*t78706*t78844*t78849*2.0-ccab2*1.0/(t78716*t78716*t78716)*t78836*t78839*t78697*t78699* \
               2.0+ccab3*gcab*t78783*t78697*t78698*t78699*(gamma_aa[index]*gamma_bb[index]*t78700*t78782*t78697*(3.2E1/ \
               3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t78700*t78782*t78697*t78698*(3.2E1/3.0))+ccab1*gamma_aa[index]* \
               gamma_bb[index]*t78700*t78782*t78697*t78788*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t78700* \
               t78782*t78697*t78789*(3.2E1/9.0)+ccab2*gamma_bb[index]*t78700*t78836*t78786*t78697*t78698*(8.0/3.0) \
               +ccab2*gamma_aa[index]*t78782*t78839*t78786*t78697*t78698*(8.0/3.0)-ccab3*gcab*1.0/(t78720*t78720* \
               t78720)*t78853*t78857*t78697*t78698*t78699*2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t78700*t78705* \
               t78782*t78786*t78699*(3.2E1/9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t78700*t78705*t78782*t78787* \
               t78699*(6.4E1/3.0)+ccab3*gamma_bb[index]*gcab*t78700*t78853*t78783*t78697*t78699*4.0+ccab3*gamma_aa[index]* \
               gcab*t78782*t78783*t78857*t78697*t78699*4.0+ccab4*gamma_bb[index]*t78700*t78705*t78844*t78785*t78698* \
               t78699*(1.6E1/3.0)+ccab4*gamma_aa[index]*t78705*t78782*t78785*t78849*t78698*t78699*(1.6E1/3.0)-ccab3* \
               gamma_aa[index]*gamma_bb[index]*gcab*t78700*t78790*t78782*t78697*t78698*(3.2E1/3.0)-ccab1*gamma_aa[index]* \
               gamma_bb[index]*gcab*t78700*1.0/(t78713*t78713*t78713)*t78782*t78697*t78698*(3.2E1/9.0))+(t78623+t78780+ \
               t78781-t78574*(t78721-t78741-t78634+t78826+t78792-t78621*t78613*t78624*t78733*t78599+t78613*t78624* \
               t78635*t78618*t78599*4.0+t78621*t78624*t78618*t78791*t78599-Aa*t78733*t78636*t78646*t78655*t78648* \
               t78599*2.0+Aa*a1a*c*t78618*t78636*t78646*t78655*t78586*t78599*(2.0/3.0))+rho_b[index]*(-t78775+t78693* \
               t78599*(t78775-(1.0/(t78751*t78751)*t78779*(b2f*c*t78752*(1.0/3.0)+b4f*t78581*t78758*(2.0/3.0)+b1f* \
               c*t78752*t78759*(1.0/6.0)+b3f*c*t78752*t78744*(1.0/2.0)))/t78762+a1f*c*c0f*t78752*t78777*(2.0/3.0) \
               -a1p*c*c0p*t78752*t78776*(2.0/3.0))+a1p*c*c0p*t78752*t78776*(2.0/3.0))-c0p*t78767*t78776*2.0-t78832* \
               t78693*t78599)*(ccab1*gamma_aa[index]*gcab*t78782*t78784*(4.0/3.0)-ccab4*t78705*t78706*t78844*t78785- \
               ccab2*t78836*t78786*t78697*t78699-ccab1*gamma_aa[index]*t78782*t78697*t78698*t78788*(4.0/3.0)+ccab2* \
               gamma_aa[index]*t78782*t78697*t78698*t78789*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t78790*t78782*t78697* \
               t78699*4.0+ccab4*gamma_aa[index]*t78705*t78782*t78787*t78698*t78699*(1.6E1/3.0)-ccab3*gcab*t78853* \
               t78783*t78697*t78698*t78699);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t78859 = rho_a[index]+rho_b[index];
            double t78860 = 1.0/pow(t78859,1.0/3.0);
            double t78861 = c*t78860;
            double t78862 = sqrt(t78861);
            double t78863 = b1p*t78862;
            double t78864 = pow(t78861,3.0/2.0);
            double t78865 = b3p*t78864;
            double t78866 = c*c;
            double t78867 = 1.0/pow(t78859,2.0/3.0);
            double t78868 = b4p*t78866*t78867;
            double t78869 = b2p*c*t78860;
            double t78870 = t78863+t78865+t78868+t78869;
            double t78871 = 1.0/pow(t78859,4.0/3.0);
            double t78872 = 1.0/c0p;
            double t78873 = 1.0/t78870;
            double t78874 = t78872*t78873*(1.0/2.0);
            double t78875 = t78874+1.0;
            double t78876 = a1p*c*t78860;
            double t78877 = t78876+1.0;
            double t78878 = rho_a[index]-rho_b[index];
            double t78879 = t78878*t78878;
            double t78880 = 1.0/t78859;
            double t78881 = t78880*t78878;
            double t78882 = two_13*2.0;
            double t78883 = t78882-2.0;
            double t78884 = 1.0/t78883;
            double t78885 = 1.0/c0f;
            double t78886 = b1f*t78862;
            double t78887 = b3f*t78864;
            double t78888 = b4f*t78866*t78867;
            double t78889 = b2f*c*t78860;
            double t78890 = t78886+t78887+t78888+t78889;
            double t78891 = 1.0/t78890;
            double t78892 = t78891*t78885*(1.0/2.0);
            double t78893 = t78892+1.0;
            double t78894 = log(t78893);
            double t78895 = a1f*c*t78860;
            double t78896 = t78895+1.0;
            double t78897 = log(t78875);
            double t78908 = c0f*t78894*t78896*2.0;
            double t78909 = c0p*t78877*t78897*2.0;
            double t78898 = t78908-t78909;
            double t78899 = t78881+1.0;
            double t78900 = pow(t78899,4.0/3.0);
            double t78901 = -t78881+1.0;
            double t78902 = pow(t78901,4.0/3.0);
            double t78903 = t78900+t78902-2.0;
            double t78904 = 1.0/(t78859*t78859);
            double t78905 = t78904*t78878;
            double t78906 = t78905+t78880;
            double t78907 = 1.0/(t78859*t78859*t78859*t78859);
            double t78910 = t78879*t78879;
            double t78911 = 1.0/pow(t78859,5.0/3.0);
            double t78912 = 1.0/sqrt(t78861);
            double t78913 = 1.0/t78875;
            double t78914 = 1.0/(t78870*t78870);
            double t78915 = b4p*t78911*t78866*(2.0/3.0);
            double t78916 = b2p*c*t78871*(1.0/3.0);
            double t78917 = b1p*c*t78912*t78871*(1.0/6.0);
            double t78918 = b3p*c*t78862*t78871*(1.0/2.0);
            double t78919 = t78915+t78916+t78917+t78918;
            double t78920 = 1.0/(t78859*t78859*t78859*t78859*t78859);
            double t78921 = 1.0/d2fz0;
            double t78922 = 1.0/Aa;
            double t78923 = b1a*t78862;
            double t78924 = b3a*t78864;
            double t78925 = b4a*t78866*t78867;
            double t78926 = b2a*c*t78860;
            double t78927 = t78923+t78924+t78925+t78926;
            double t78928 = 1.0/t78927;
            double t78929 = t78922*t78928*(1.0/2.0);
            double t78930 = t78929+1.0;
            double t78931 = log(t78930);
            double t78932 = a1a*c*t78860;
            double t78933 = t78932+1.0;
            double t78934 = pow(t78899,1.0/3.0);
            double t78935 = t78906*t78934*(4.0/3.0);
            double t78936 = pow(t78901,1.0/3.0);
            double t79012 = t78906*t78936*(4.0/3.0);
            double t78937 = t78935-t79012;
            double t78938 = t78910*t78907;
            double t78939 = t78938-1.0;
            double t78940 = 1.0/pow(rho_b[index],1.0/3.0);
            double t78941 = c*t78940;
            double t78942 = sqrt(t78941);
            double t78943 = b1f*t78942;
            double t78944 = pow(t78941,3.0/2.0);
            double t78945 = b3f*t78944;
            double t78946 = 1.0/pow(rho_b[index],2.0/3.0);
            double t78947 = b4f*t78946*t78866;
            double t78948 = b2f*c*t78940;
            double t78949 = t78943+t78945+t78947+t78948;
            double t78950 = 1.0/pow(rho_b[index],4.0/3.0);
            double t78951 = b1p*t78942;
            double t78952 = b3p*t78944;
            double t78953 = b4p*t78946*t78866;
            double t78954 = b2p*c*t78940;
            double t78955 = t78951+t78952+t78953+t78954;
            double t78956 = 1.0/pow(rho_b[index],5.0/3.0);
            double t78957 = 1.0/sqrt(t78941);
            double t78958 = 1.0/t78949;
            double t78959 = t78885*t78958*(1.0/2.0);
            double t78960 = t78959+1.0;
            double t78961 = 1.0/t78955;
            double t78962 = t78961*t78872*(1.0/2.0);
            double t78963 = t78962+1.0;
            double t78964 = a1p*c*t78940;
            double t78965 = t78964+1.0;
            double t78966 = 1.0/t78963;
            double t78967 = 1.0/(t78955*t78955);
            double t78968 = b4p*t78866*t78956*(2.0/3.0);
            double t78969 = b2p*c*t78950*(1.0/3.0);
            double t78970 = b1p*c*t78950*t78957*(1.0/6.0);
            double t78971 = b3p*c*t78950*t78942*(1.0/2.0);
            double t78972 = t78970+t78971+t78968+t78969;
            double t78973 = t78972*t78965*t78966*t78967;
            double t78974 = log(t78963);
            double t78975 = pow(2.0,1.0/3.0);
            double t78976 = t78975*2.0;
            double t78977 = t78976-2.0;
            double t78978 = log(t78960);
            double t78979 = a1f*c*t78940;
            double t78980 = t78979+1.0;
            double t78981 = gcab*gcab;
            double t78985 = 1.0/pow(rho_a[index],8.0/3.0);
            double t78986 = gamma_aa[index]*t78985*(1.0/2.0);
            double t78987 = 1.0/pow(rho_b[index],8.0/3.0);
            double t78988 = gamma_bb[index]*t78987*(1.0/2.0);
            double t78982 = t78986+t78988;
            double t78983 = t78982*t78982;
            double t78984 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t78989 = t78981*t78981;
            double t78990 = t78983*t78983;
            double t78991 = t78981*t78983*6.0;
            double t78992 = gcab*t78981*t78982*t78983*4.0;
            double t78993 = t78990*t78989;
            double t78994 = gcab*t78982*4.0;
            double t78995 = t78991+t78992+t78993+t78994+1.0;
            double t78996 = gcab*t78982;
            double t78997 = t78996+1.0;
            double t78998 = t78981*t78983;
            double t78999 = gcab*t78982*2.0;
            double t79000 = t78998+t78999+1.0;
            double t79001 = t78981*t78983*3.0;
            double t79002 = gcab*t78981*t78982*t78983;
            double t79003 = gcab*t78982*3.0;
            double t79004 = t79001+t79002+t79003+1.0;
            double t79005 = a1p*c*c0p*t78871*t78897*(2.0/3.0);
            double t79006 = 1.0/t79000;
            double t79007 = 1.0/t79004;
            double t79008 = 1.0/t78997;
            double t79009 = 1.0/t78995;
            double t79010 = 1.0/pow(t78859,7.0/3.0);
            double t79011 = 1.0/pow(t78859,8.0/3.0);
            double t79013 = 1.0/t78893;
            double t79014 = 1.0/(t78890*t78890);
            double t79015 = b4f*t78911*t78866*(2.0/3.0);
            double t79016 = b2f*c*t78871*(1.0/3.0);
            double t79017 = b1f*c*t78912*t78871*(1.0/6.0);
            double t79018 = b3f*c*t78862*t78871*(1.0/2.0);
            double t79019 = t79015+t79016+t79017+t79018;
            double t79020 = t78896*t79013*t79014*t79019;
            double t79022 = t78913*t78914*t78919*t78877;
            double t79023 = a1f*c*c0f*t78871*t78894*(2.0/3.0);
            double t79021 = t79020-t79022+t79005-t79023;
            double t79024 = t78919*t78919;
            double t79025 = 1.0/pow(t78861,3.0/2.0);
            double t79026 = b4p*t78866*t79011*(1.0E1/9.0);
            double t79027 = b2p*c*t79010*(4.0/9.0);
            double t79028 = b1p*c*t78912*t79010*(2.0/9.0);
            double t79029 = b3p*c*t78862*t79010*(2.0/3.0);
            double t79030 = b3p*t78912*t78866*t79011*(1.0/1.2E1);
            double t79031 = t79030+t79026+t79027+t79028+t79029-b1p*t78866*t79011*t79025*(1.0/3.6E1);
            double t79032 = 1.0/(t78870*t78870*t78870);
            double t79033 = t78913*t78877*t79032*t79024*2.0;
            double t79034 = t79019*t79019;
            double t79035 = 1.0/(t78875*t78875);
            double t79036 = 1.0/(t78870*t78870*t78870*t78870);
            double t79037 = t78904*2.0;
            double t79038 = 1.0/(t78859*t78859*t78859);
            double t79039 = t78878*t79038*2.0;
            double t79040 = t79037+t79039;
            double t79041 = t78906*t78906;
            double t79042 = a1p*c*c0p*t78897*t79010*(8.0/9.0);
            double t79043 = 1.0/(t78859*t78859*t78859*t78859*t78859*t78859);
            double t79044 = t78907*t78878*t78879*4.0;
            double t79045 = t78910*t78920*4.0;
            double t79046 = t79044+t79045;
            double t79047 = t78934*t79040*(4.0/3.0);
            double t79048 = 1.0/pow(t78899,2.0/3.0);
            double t79049 = t79041*t79048*(4.0/9.0);
            double t79050 = 1.0/pow(t78901,2.0/3.0);
            double t79051 = t79041*t79050*(4.0/9.0);
            double t79052 = t79051+t79047+t79049-t78936*t79040*(4.0/3.0);
            double t79053 = 1.0/t78930;
            double t79054 = 1.0/(t78927*t78927);
            double t79055 = b4a*t78911*t78866*(2.0/3.0);
            double t79056 = b2a*c*t78871*(1.0/3.0);
            double t79057 = b1a*c*t78912*t78871*(1.0/6.0);
            double t79058 = b3a*c*t78862*t78871*(1.0/2.0);
            double t79059 = t79055+t79056+t79057+t79058;
            double t79060 = t79059*t79059;
            double t79061 = 1.0/t78960;
            double t79062 = b4f*t78866*t78956*(2.0/3.0);
            double t79063 = b2f*c*t78950*(1.0/3.0);
            double t79064 = b1f*c*t78950*t78957*(1.0/6.0);
            double t79065 = b3f*c*t78950*t78942*(1.0/2.0);
            double t79066 = t79062+t79063+t79064+t79065;
            double t79067 = 1.0/(t78949*t78949);
            double t79068 = 1.0/pow(rho_b[index],7.0/3.0);
            double t79069 = 1.0/pow(t78941,3.0/2.0);
            double t79070 = t79066*t79066;
            double t79071 = t78972*t78972;
            double t79072 = 1.0/(t78955*t78955*t78955);
            double t79073 = t78965*t78966*t79071*t79072*2.0;
            double t79074 = b4p*t78866*t78987*(1.0E1/9.0);
            double t79075 = b2p*c*t79068*(4.0/9.0);
            double t79076 = b3p*t78866*t78957*t78987*(1.0/1.2E1);
            double t79077 = b1p*c*t78957*t79068*(2.0/9.0);
            double t79078 = b3p*c*t78942*t79068*(2.0/3.0);
            double t79260 = b1p*t78866*t78987*t79069*(1.0/3.6E1);
            double t79079 = -t79260+t79074+t79075+t79076+t79077+t79078;
            double t79080 = 1.0/(t78963*t78963);
            double t79081 = 1.0/(t78955*t78955*t78955*t78955);
            double t79082 = a1p*c*c0p*t78974*t79068*(8.0/9.0);
            double t79083 = a1f*c*c0f*t78950*t78978*(2.0/3.0);
            double t79084 = a1p*c*c0p*t78950*t78974*(2.0/3.0);
            double t79085 = 1.0/tau_b[index];
            double t79086 = pow(rho_b[index],2.0/3.0);
            double t79087 = pow(rho_b[index],5.0/3.0);
            double t79088 = C_k*t79085*t79087;
            double t79089 = t79088+1.0;
            double t79090 = t79088-1.0;
            double t79091 = 1.0/(t79089*t79089);
            double t79092 = t79090*t79090;
            double t79093 = t79092*t79092;
            double t79094 = t79093*t79093;
            double t79095 = 1.0/pow(t79089,1.1E1);
            double t79096 = 1.0/(t79089*t79089*t79089);
            double t79097 = 1.0/(t79089*t79089*t79089*t79089);
            double t79098 = 1.0/(t79089*t79089*t79089*t79089*t79089);
            double t79099 = 1.0/(t79089*t79089*t79089*t79089*t79089*t79089);
            double t79100 = 1.0/(t79089*t79089*t79089*t79089*t79089*t79089*t79089);
            double t79101 = 1.0/(t79089*t79089*t79089*t79089*t79089*t79089*t79089*t79089);
            double t79102 = 1.0/(t79089*t79089*t79089*t79089*t79089*t79089*t79089*t79089*t79089);
            double t79103 = 1.0/pow(t79089,1.0E1);
            double t79104 = 1.0/(k*k);
            double t79105 = 1.0/kp;
            double t79106 = 1.0/(rho_b[index]*rho_b[index]);
            double t79107 = rho_b[index]*2.0;
            double t79108 = 1.0/pow(t79107,2.0/3.0);
            double t79109 = gamma_bb[index]*mu_*t79104*t79105*t79106*t79108*(1.0/4.0);
            double t79110 = t79109+1.0;
            double t79111 = 1.0/t79110;
            double t79112 = kp-kp*t79111+1.0;
            double t79113 = C_k*C_k;
            double t79114 = pow(rho_b[index],4.0/3.0);
            double t79115 = 1.0/(tau_b[index]*tau_b[index]);
            double t79116 = 1.0/t79089;
            double t79117 = 1.0/pow(t79089,1.2E1);
            double t79118 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t79119 = gamma_bb[index]*mu_*t79104*t79105*t79108*t79118*(1.0/2.0);
            double t79120 = 1.0/pow(t79107,5.0/3.0);
            double t79121 = gamma_bb[index]*mu_*t79120*t79104*t79105*t79106*(1.0/3.0);
            double t79122 = t79121+t79119;
            double t79123 = a_1*t79116*t79090;
            double t79124 = a_10*t79103*t79092*t79094;
            double t79125 = a_11*t79090*t79092*t79094*t79095;
            double t79126 = a_2*t79091*t79092;
            double t79127 = a_3*t79090*t79092*t79096;
            double t79128 = a_4*t79093*t79097;
            double t79129 = a_5*t79090*t79093*t79098;
            double t79130 = a_6*t79092*t79093*t79099;
            double t79131 = a_7*t79100*t79090*t79092*t79093;
            double t79132 = a_8*t79101*t79094;
            double t79133 = a_9*t79102*t79090*t79094;
            double t79134 = t79130+t79131+t79123+t79132+t79124+t79133+t79125+t79126+t79127+t79128+t79129+1.0;
            double t79135 = 1.0/(t79110*t79110);
            double t79136 = C_k*a_1*t79116*t79085*t79086*(5.0/3.0);
            double t79137 = C_k*a_2*t79090*t79091*t79085*t79086*(1.0E1/3.0);
            double t79138 = C_k*a_10*t79103*t79090*t79085*t79094*t79086*(5.0E1/3.0);
            double t79139 = C_k*a_11*t79092*t79085*t79094*t79086*t79095*(5.5E1/3.0);
            double t79140 = C_k*a_3*t79092*t79085*t79086*t79096*5.0;
            double t79141 = C_k*a_4*t79090*t79092*t79085*t79086*t79097*(2.0E1/3.0);
            double t79142 = C_k*a_5*t79093*t79085*t79086*t79098*(2.5E1/3.0);
            double t79143 = C_k*a_6*t79090*t79093*t79085*t79086*t79099*1.0E1;
            double t79144 = C_k*a_7*t79100*t79092*t79093*t79085*t79086*(3.5E1/3.0);
            double t79145 = C_k*a_8*t79101*t79090*t79092*t79093*t79085*t79086*(4.0E1/3.0);
            double t79146 = C_k*a_9*t79102*t79085*t79094*t79086*1.5E1;
            double t79147 = t79140+t79141+t79142+t79143+t79144+t79136+t79145+t79137+t79146+t79138+t79139-C_k* \
               a_1*t79090*t79091*t79085*t79086*(5.0/3.0)-C_k*a_2*t79092*t79085*t79086*t79096*(1.0E1/3.0)-C_k*a_4* \
               t79093*t79085*t79086*t79098*(2.0E1/3.0)-C_k*a_8*t79102*t79085*t79094*t79086*(4.0E1/3.0)-C_k*a_10*t79092* \
               t79085*t79094*t79086*t79095*(5.0E1/3.0)-C_k*a_3*t79090*t79092*t79085*t79086*t79097*5.0-C_k*a_5*t79090* \
               t79093*t79085*t79086*t79099*(2.5E1/3.0)-C_k*a_6*t79100*t79092*t79093*t79085*t79086*1.0E1-C_k*a_9*t79103* \
               t79090*t79085*t79094*t79086*1.5E1-C_k*a_11*t79090*t79117*t79092*t79085*t79094*t79086*(5.5E1/3.0)-C_k* \
               a_7*t79101*t79090*t79092*t79093*t79085*t79086*(3.5E1/3.0);
            double t79148 = 1.0/pow(rho_a[index],1.0/3.0);
            double t79149 = c*t79148;
            double t79150 = sqrt(t79149);
            double t79151 = pow(t79149,3.0/2.0);
            double t79152 = 1.0/pow(rho_a[index],2.0/3.0);
            double t79153 = b1p*t79150;
            double t79154 = b3p*t79151;
            double t79155 = b4p*t78866*t79152;
            double t79156 = b2p*c*t79148;
            double t79157 = t79153+t79154+t79155+t79156;
            double t79158 = 1.0/t79157;
            double t79159 = t78872*t79158*(1.0/2.0);
            double t79160 = t79159+1.0;
            double t79161 = log(t79160);
            double t79162 = a1p*c*t79148;
            double t79163 = t79162+1.0;
            double t79164 = c0p*t79161*t79163*2.0;
            double t79165 = c0f*t78980*t78978*2.0;
            double t79167 = c0p*t78965*t78974*2.0;
            double t79166 = t79165-t79167;
            double t79168 = t78910*t78903*t78907*t78884*t78898;
            double t79169 = Aa*t78903*t78921*t78931*t78933*t78884*t78939*2.0;
            double t79170 = gamma_bb[index]*gcab*t78984*(1.6E1/3.0);
            double t79171 = gamma_bb[index]*gcab*t78981*t78983*t78984*1.6E1;
            double t79172 = gamma_bb[index]*t78982*t78983*t78984*t78989*(1.6E1/3.0);
            double t79173 = gamma_bb[index]*t78981*t78982*t78984*1.6E1;
            double t79174 = t79170+t79171+t79172+t79173;
            double t79175 = 1.0/(t78997*t78997);
            double t79176 = gamma_bb[index]*gamma_bb[index];
            double t79177 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t79178 = gamma_bb[index]*gcab*t78984*(8.0/3.0);
            double t79179 = gamma_bb[index]*t78981*t78982*t78984*(8.0/3.0);
            double t79180 = t79178+t79179;
            double t79181 = 1.0/(t79004*t79004);
            double t79182 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t79183 = 1.0/(t78995*t78995);
            double t79184 = 1.0/(t79000*t79000);
            double t79185 = gamma_bb[index]*gcab*t78984*4.0;
            double t79186 = gamma_bb[index]*gcab*t78981*t78983*t78984*4.0;
            double t79187 = gamma_bb[index]*t78981*t78982*t78984*8.0;
            double t79188 = t79185+t79186+t79187;
            double t79268 = t78980*t79061*t79066*t79067;
            double t79189 = t78973+t79083-t79084-t79268;
            double t79190 = gcaa*gcaa;
            double t79191 = t79176*t79176;
            double t79192 = t79190*t79190;
            double t79193 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t79194 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t79195 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t79196 = t78884*t78977*t79166;
            double t79197 = t79167+t79196;
            double t79198 = tau_b[index]-1.0/1.0E20;
            double t79199 = ( (t79198 > 0.0) ?  1.0 : 0.0 ) ;
            double t79200 = tau_b[index]*2.0;
            double t79201 = 1.0/rho_b[index];
            double t79228 = gamma_bb[index]*t79201*(1.0/4.0);
            double t79202 = t79200-t79228;
            double t79203 = t79202*t79085*(1.0/2.0);
            double t79204 = t79203-1.0;
            double t79205 = t79204*t79199;
            double t79206 = t79205+1.0;
            double t79207 = gamma_bb[index]*gcaa*t78987*4.0;
            double t79208 = gamma_bb[index]*gcaa*t79190*t79176*t79194*4.0;
            double t79209 = t79190*t79176*t79195*6.0;
            double t79210 = t79191*t79192*t79193;
            double t79211 = t79210+t79207+t79208+t79209+1.0;
            double t79212 = 1.0/t79211;
            double t79213 = gamma_bb[index]*gcaa*t78987;
            double t79214 = t79213+1.0;
            double t79215 = 1.0/t79214;
            double t79216 = gamma_bb[index]*gcaa*t78987*3.0;
            double t79217 = gamma_bb[index]*gcaa*t79190*t79176*t79194;
            double t79218 = t79190*t79176*t79195*3.0;
            double t79219 = t79216+t79217+t79218+1.0;
            double t79220 = 1.0/t79219;
            double t79221 = gamma_bb[index]*gcaa*t78987*2.0;
            double t79222 = t79190*t79176*t79195;
            double t79223 = t79221+t79222+1.0;
            double t79224 = 1.0/t79223;
            double t79225 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t79226 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t79227 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t79229 = 1.0/pow(rho_b[index],1.0E1);
            double t79230 = 1.0/(t79214*t79214);
            double t79231 = gamma_bb[index]*gcaa*t78984*(3.2E1/3.0);
            double t79232 = gamma_bb[index]*gcaa*t79190*t79226*t79176*3.2E1;
            double t79233 = t79225*t79190*t79176*3.2E1;
            double t79234 = t79191*t79227*t79192*(3.2E1/3.0);
            double t79235 = t79231+t79232+t79233+t79234;
            double t79236 = gamma_bb[index]*gcaa*t78984*(1.6E1/3.0);
            double t79237 = t79225*t79190*t79176*(1.6E1/3.0);
            double t79238 = t79236+t79237;
            double t79239 = gamma_bb[index]*gcaa*t78984*8.0;
            double t79240 = gamma_bb[index]*gcaa*t79190*t79226*t79176*8.0;
            double t79241 = t79225*t79190*t79176*1.6E1;
            double t79242 = t79240+t79241+t79239;
            double t79243 = 1.0/(t79219*t79219);
            double t79244 = 1.0/(t79211*t79211);
            double t79245 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t79246 = 1.0/(t79223*t79223);
            double t79247 = ccaa4*t79212*t79191*t79192*t79193;
            double t79248 = ccaa1*gamma_bb[index]*gcaa*t78987*t79215;
            double t79249 = ccaa3*gamma_bb[index]*gcaa*t79220*t79190*t79176*t79194;
            double t79250 = ccaa2*t79224*t79190*t79176*t79195;
            double t79251 = ccaa0+t79250+t79247+t79248+t79249;
            double t79252 = 1.0/(t78949*t78949*t78949);
            double t79253 = b4f*t78866*t78987*(1.0E1/9.0);
            double t79254 = b2f*c*t79068*(4.0/9.0);
            double t79255 = b3f*t78866*t78957*t78987*(1.0/1.2E1);
            double t79256 = b1f*c*t78957*t79068*(2.0/9.0);
            double t79257 = b3f*c*t78942*t79068*(2.0/3.0);
            double t79258 = t79253+t79254+t79255+t79256+t79257-b1f*t78866*t78987*t79069*(1.0/3.6E1);
            double t79259 = t78980*t79061*t79067*t79258;
            double t79261 = t78965*t78966*t78967*t79079;
            double t79262 = 1.0/(t78960*t78960);
            double t79263 = 1.0/(t78949*t78949*t78949*t78949);
            double t79264 = t78980*t78885*t79070*t79262*t79263*(1.0/2.0);
            double t79265 = t78872*t78965*t79071*t79080*t79081*(1.0/2.0);
            double t79266 = a1f*c*t78950*t79061*t79066*t79067*(2.0/3.0);
            double t79267 = a1p*c*t78950*t78972*t78966*t78967*(2.0/3.0);
            double t79269 = t78884*t78977*t79189;
            double t79270 = ccaa4*t79212*t79191*t79227*t79192*(3.2E1/3.0);
            double t79271 = ccaa1*gamma_bb[index]*gcaa*t78984*t79215*(8.0/3.0);
            double t79272 = ccaa3*gamma_bb[index]*gcaa*t79220*t79190*t79226*t79176*8.0;
            double t79273 = ccaa2*t79224*t79225*t79190*t79176*(1.6E1/3.0);
            double t79276 = ccaa1*t79230*t79225*t79190*t79176*(8.0/3.0);
            double t79277 = ccaa3*gamma_bb[index]*gcaa*t79242*t79243*t79190*t79176*t79194;
            double t79278 = ccaa4*t79235*t79244*t79191*t79192*t79193;
            double t79279 = ccaa2*t79190*t79246*t79238*t79176*t79195;
            double t79274 = t79270+t79271+t79272+t79273-t79276-t79277-t79278-t79279;
            double t79275 = -t78973+t79084+t79269;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t78982*t79008+ccab2*t78981*t78983*t79006+ccab4*t78990*t78989* \
               t79009+ccab3*gcab*t78981*t78982*t78983*t79007)*(-rho_b[index]*(t79261-t79073-t79082+t79265+t79267+ \
               t78884*t78977*(t79073+t79082+t79264+t79266+t79259-t78965*t78966*t78967*t79079-t78980*t79061*t79070* \
               t79252*2.0-a1f*c*c0f*t78978*t79068*(8.0/9.0)-t78872*t78965*t79071*t79080*t79081*(1.0/2.0)-a1p*c*t78950* \
               t78972*t78966*t78967*(2.0/3.0)))-t78859*(t79033+t79042-t78913*t78914*t78877*t79031-t78910*t78903*t78907* \
               t78884*(t79033+t79042-t78913*t78914*t78877*t79031-1.0/(t78890*t78890*t78890)*t78896*t79013*t79034* \
               2.0+t78896*t79013*t79014*(b2f*c*t79010*(4.0/9.0)+b4f*t78866*t79011*(1.0E1/9.0)+b1f*c*t78912*t79010* \
               (2.0/9.0)+b3f*c*t78862*t79010*(2.0/3.0)-b1f*t78866*t79011*t79025*(1.0/3.6E1)+b3f*t78912*t78866*t79011* \
               (1.0/1.2E1))+1.0/(t78890*t78890*t78890*t78890)*1.0/(t78893*t78893)*t78885*t78896*t79034*(1.0/2.0)- \
               a1f*c*c0f*t78894*t79010*(8.0/9.0)-t78872*t78877*t79024*t79035*t79036*(1.0/2.0)+a1f*c*t78871*t79013* \
               t79014*t79019*(2.0/3.0)-a1p*c*t78913*t78914*t78871*t78919*(2.0/3.0))+t78910*t78920*t78937*t78884*t78898* \
               8.0+t78903*t78907*t78884*t78879*t78898*1.2E1-t78910*t78920*t78903*t78884*t79021*8.0-t78910*t78907* \
               t78937*t78884*t79021*2.0+t78910*t78903*t78884*t78898*t79043*2.0E1+t78910*t78907*t78884*t78898*t79052- \
               t78872*t78877*t79024*t79035*t79036*(1.0/2.0)+t78920*t78903*t78884*t78878*t78879*t78898*3.2E1+t78907* \
               t78937*t78884*t78878*t78879*t78898*8.0-t78903*t78907*t78884*t78878*t78879*t79021*8.0-a1p*c*t78913* \
               t78914*t78871*t78919*(2.0/3.0)+Aa*t78921*t78931*t78933*t78884*t78939*t79052*2.0+Aa*t78921*t78931*t78933* \
               t78937*t78884*t79046*4.0+Aa*t78903*t78921*t78931*t78933*t78884*(t78907*t78879*1.2E1+t78910*t79043* \
               2.0E1+t78920*t78878*t78879*3.2E1)*2.0-t78921*t78933*t78937*t78884*t78939*t79053*t79054*t79059*2.0- \
               t78903*t78921*t78933*t78884*t79053*t79054*t79046*t79059*2.0+t78903*t78921*t78933*1.0/(t78927*t78927* \
               t78927)*t78884*t78939*t79060*t79053*2.0-t78903*t78921*t78933*t78884*t78939*t79053*t79054*(b2a*c*t79010* \
               (4.0/9.0)+b4a*t78866*t79011*(1.0E1/9.0)+b1a*c*t78912*t79010*(2.0/9.0)+b3a*c*t78862*t79010*(2.0/3.0) \
               -b1a*t78866*t79011*t79025*(1.0/3.6E1)+b3a*t78912*t78866*t79011*(1.0/1.2E1))+Aa*a1a*c*t78921*t78931* \
               t78871*t78937*t78884*t78939*(4.0/3.0)+Aa*a1a*c*t78903*t78921*t78931*t78884*t78939*t79010*(8.0/9.0) \
               +Aa*a1a*c*t78903*t78921*t78931*t78871*t78884*t79046*(4.0/3.0)-t78903*t78921*1.0/(t78930*t78930)*t78922* \
               t78933*1.0/(t78927*t78927*t78927*t78927)*t78884*t78939*t79060*(1.0/2.0)-a1a*c*t78903*t78921*t78871* \
               t78884*t78939*t79053*t79054*t79059*(2.0/3.0))-t78884*t78977*t79189*2.0-t78913*t78914*t78919*t78877* \
               2.0+t78972*t78965*t78966*t78967*2.0-a1p*c*c0p*t78950*t78974*(4.0/3.0)+a1p*c*c0p*t78871*t78897*(4.0/ \
               3.0)+t78910*t78920*t78903*t78884*t78898*8.0+t78910*t78907*t78937*t78884*t78898*2.0-t78910*t78903*t78907* \
               t78884*t79021*2.0+t78903*t78907*t78884*t78878*t78879*t78898*8.0+Aa*t78921*t78931*t78933*t78937*t78884* \
               t78939*4.0+Aa*t78903*t78921*t78931*t78933*t78884*t79046*4.0-t78903*t78921*t78933*t78884*t78939*t79053* \
               t79054*t79059*2.0+Aa*a1a*c*t78903*t78921*t78931*t78871*t78884*t78939*(4.0/3.0))+(rho_b[index]*t79197+ \
               rho_a[index]*(t79164-t78884*t78977*(t79164-c0f*log((t78885*(1.0/2.0))/(b1f*t79150+b3f*t79151+b2f*c* \
               t79148+b4f*t78866*t79152)+1.0)*(a1f*c*t79148+1.0)*2.0))-t78859*(t78909+t79168+t79169))*(-ccab2*t78981* \
               t78983*t79184*(gamma_bb[index]*gcab*t79182*(8.8E1/9.0)+t78981*t79176*t79177*(3.2E1/9.0)+gamma_bb[index]* \
               t78981*t78982*t79182*(8.8E1/9.0))+ccab4*t78990*1.0/(t78995*t78995*t78995)*t78989*(t79174*t79174)*2.0+ \
               ccab2*t78981*t78983*1.0/(t79000*t79000*t79000)*(t79180*t79180)*2.0+ccab1*gamma_bb[index]*gcab*t79008* \
               t79182*(4.4E1/9.0)+ccab2*t78981*t79006*t79176*t79177*(3.2E1/9.0)-ccab1*t78981*t79175*t79176*t79177* \
               (3.2E1/9.0)-ccab4*t78990*t78989*t79183*(gamma_bb[index]*gcab*t79182*(1.76E2/9.0)+t78981*t79176*t79177* \
               (6.4E1/3.0)+gamma_bb[index]*t78981*t78982*t79182*(1.76E2/3.0)+t78983*t78989*t79176*t79177*(6.4E1/3.0) \
               +gamma_bb[index]*gcab*t78981*t78983*t79182*(1.76E2/3.0)+gamma_bb[index]*t78982*t78983*t78989*t79182* \
               (1.76E2/9.0)+gcab*t78981*t78982*t79176*t79177*(1.28E2/3.0))+ccab4*t78983*t78989*t79009*t79176*t79177* \
               (6.4E1/3.0)+ccab2*gamma_bb[index]*t78981*t78982*t79006*t79182*(8.8E1/9.0)-ccab1*gamma_bb[index]*t78981* \
               t78982*t79182*t79175*(4.4E1/9.0)+ccab3*gcab*t78981*t78982*t78983*1.0/(t79004*t79004*t79004)*(t79188* \
               t79188)*2.0+ccab3*gamma_bb[index]*gcab*t78981*t78983*t79007*t79182*(4.4E1/3.0)-ccab2*gamma_bb[index]* \
               t78981*t78982*t78984*t79180*t79184*(1.6E1/3.0)+ccab4*gamma_bb[index]*t78982*t78983*t78989*t79009*t79182* \
               (1.76E2/9.0)+ccab3*gcab*t78981*t78982*t79007*t79176*t79177*(3.2E1/3.0)+ccab1*gcab*t78981*t78982*1.0/ \
               (t78997*t78997*t78997)*t79176*t79177*(3.2E1/9.0)-ccab3*gcab*t78981*t78982*t78983*t79181*(gamma_bb[index]* \
               gcab*t79182*(4.4E1/3.0)+t78981*t79176*t79177*(3.2E1/3.0)+gamma_bb[index]*t78981*t78982*t79182*(8.8E1/ \
               3.0)+gamma_bb[index]*gcab*t78981*t78983*t79182*(4.4E1/3.0)+gcab*t78981*t78982*t79176*t79177*(3.2E1/ \
               3.0))-ccab3*gamma_bb[index]*gcab*t78981*t78983*t78984*t79181*t79188*8.0-ccab4*gamma_bb[index]*t78982* \
               t78983*t78984*t78989*t79174*t79183*(3.2E1/3.0))+(t78909+t79168+t79169+rho_b[index]*(-t78973+t79084+ \
               t78884*t78977*(t78973+t79083-t78980*t79061*t79066*t79067-a1p*c*c0p*t78950*t78974*(2.0/3.0)))-t78859* \
               (t79005-t78913*t78914*t78919*t78877+t78910*t78920*t78903*t78884*t78898*4.0+t78910*t78907*t78937*t78884* \
               t78898-t78910*t78903*t78907*t78884*t79021+t78903*t78907*t78884*t78878*t78879*t78898*4.0+Aa*t78921* \
               t78931*t78933*t78937*t78884*t78939*2.0+Aa*t78903*t78921*t78931*t78933*t78884*t79046*2.0-t78903*t78921* \
               t78933*t78884*t78939*t79053*t79054*t79059+Aa*a1a*c*t78903*t78921*t78931*t78871*t78884*t78939*(2.0/ \
               3.0))-c0p*t78965*t78974*2.0-t78884*t78977*t79166)*(ccab1*gamma_bb[index]*gcab*t78984*t79008*(4.0/3.0) \
               -ccab2*t78981*t78983*t79180*t79184-ccab4*t78990*t78989*t79174*t79183+ccab2*gamma_bb[index]*t78981* \
               t78982*t78984*t79006*(8.0/3.0)-ccab1*gamma_bb[index]*t78981*t78982*t78984*t79175*(4.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t78981*t78983*t78984*t79007*4.0+ccab4*gamma_bb[index]*t78982*t78983*t78984*t78989*t79009*(1.6E1/ \
               3.0)-ccab3*gcab*t78981*t78982*t78983*t79181*t79188)*2.0-(X-1.0)*(t79112*t79147*2.0+rho_b[index]*t79112* \
               (C_k*a_1*t78940*t79116*t79085*(1.0E1/9.0)-a_1*t79113*t79114*t79115*t79091*(5.0E1/9.0)+a_2*t79113*t79114* \
               t79115*t79091*(5.0E1/9.0)+a_1*t79113*t79114*t79115*t79090*t79096*(5.0E1/9.0)+a_10*t79103*t79113*t79114* \
               t79115*t79094*2.5E2-a_2*t79113*t79114*t79115*t79090*t79096*(2.0E2/9.0)+a_2*t79113*t79114*t79115*t79092* \
               t79097*(5.0E1/3.0)+a_3*t79113*t79114*t79115*t79090*t79096*(5.0E1/3.0)-a_3*t79113*t79114*t79115*t79092* \
               t79097*5.0E1+a_4*t79113*t79114*t79115*t79092*t79097*(1.0E2/3.0)+a_4*t79113*t79114*t79115*t79093*t79099* \
               (5.0E2/9.0)-a_5*t79113*t79114*t79115*t79093*t79099*(1.25E3/9.0)+a_6*t79113*t79114*t79115*t79093*t79099* \
               (2.5E2/3.0)+a_8*t79103*t79113*t79114*t79115*t79094*2.0E2-a_9*t79103*t79113*t79114*t79115*t79094*4.5E2- \
               C_k*a_1*t78940*t79090*t79091*t79085*(1.0E1/9.0)+C_k*a_2*t78940*t79090*t79091*t79085*(2.0E1/9.0)-C_k* \
               a_2*t78940*t79092*t79085*t79096*(2.0E1/9.0)+C_k*a_3*t78940*t79092*t79085*t79096*(1.0E1/3.0)-C_k*a_4* \
               t78940*t79093*t79085*t79098*(4.0E1/9.0)+C_k*a_5*t78940*t79093*t79085*t79098*(5.0E1/9.0)-C_k*a_8*t78940* \
               t79102*t79085*t79094*(8.0E1/9.0)+C_k*a_9*t78940*t79102*t79085*t79094*1.0E1+C_k*a_10*t78940*t79103* \
               t79090*t79085*t79094*(1.0E2/9.0)-C_k*a_10*t78940*t79092*t79085*t79094*t79095*(1.0E2/9.0)+C_k*a_11* \
               t78940*t79092*t79085*t79094*t79095*(1.1E2/9.0)-C_k*a_3*t78940*t79090*t79092*t79085*t79097*(1.0E1/3.0) \
               +C_k*a_4*t78940*t79090*t79092*t79085*t79097*(4.0E1/9.0)-C_k*a_5*t78940*t79090*t79093*t79085*t79099* \
               (5.0E1/9.0)-C_k*a_6*t78940*t79100*t79092*t79093*t79085*(2.0E1/3.0)+C_k*a_6*t78940*t79090*t79093*t79085* \
               t79099*(2.0E1/3.0)+C_k*a_7*t78940*t79100*t79092*t79093*t79085*(7.0E1/9.0)-C_k*a_9*t78940*t79103*t79090* \
               t79085*t79094*1.0E1+a_10*t79113*t79114*t79115*t79117*t79092*t79094*(2.75E3/9.0)-a_11*t79113*t79114* \
               t79115*t79117*t79092*t79094*(6.05E3/9.0)-a_10*t79113*t79114*t79115*t79090*t79094*t79095*(5.0E3/9.0) \
               +a_11*t79113*t79114*t79115*t79090*t79094*t79095*(2.75E3/9.0)+a_3*t79113*t79114*t79115*t79090*t79092* \
               t79098*(1.0E2/3.0)-a_4*t79113*t79114*t79115*t79090*t79092*t79098*(8.0E2/9.0)+a_5*t79100*t79113*t79114* \
               t79115*t79090*t79093*(2.5E2/3.0)+a_5*t79113*t79114*t79115*t79090*t79092*t79098*(5.0E2/9.0)-a_6*t79100* \
               t79113*t79114*t79115*t79090*t79093*2.0E2+a_6*t79101*t79113*t79114*t79115*t79092*t79093*(3.5E2/3.0) \
               +a_7*t79100*t79113*t79114*t79115*t79090*t79093*(3.5E2/3.0)-a_7*t79101*t79113*t79114*t79115*t79092* \
               t79093*(2.45E3/9.0)+a_8*t79101*t79113*t79114*t79115*t79092*t79093*(1.4E3/9.0)+a_9*t79113*t79114*t79115* \
               t79090*t79094*t79095*2.5E2+a_11*t79113*t79114*t79115*t79090*t79092*t79094*1.0/pow(t79089,1.3E1)*(1.1E3/ \
               3.0)-C_k*a_11*t78940*t79090*t79117*t79092*t79085*t79094*(1.1E2/9.0)-C_k*a_7*t78940*t79101*t79090*t79092* \
               t79093*t79085*(7.0E1/9.0)+C_k*a_8*t78940*t79101*t79090*t79092*t79093*t79085*(8.0E1/9.0)+a_7*t79102* \
               t79113*t79114*t79115*t79090*t79092*t79093*(1.4E3/9.0)-a_8*t79102*t79113*t79114*t79115*t79090*t79092* \
               t79093*(3.2E3/9.0)+a_9*t79102*t79113*t79114*t79115*t79090*t79092*t79093*2.0E2)-kp*t79122*t79134*t79135* \
               2.0+kp*rho_b[index]*t79134*t79135*(gamma_bb[index]*mu_*t79120*t79104*t79105*t79118*(4.0/3.0)+gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t79104*t79105*t79108*(3.0/2.0)+gamma_bb[index]* \
               mu_*t79104*t79105*t79106*1.0/pow(t79107,8.0/3.0)*(1.0E1/9.0))-kp*rho_b[index]*1.0/(t79110*t79110*t79110) \
               *(t79122*t79122)*t79134*2.0-kp*rho_b[index]*t79122*t79135*t79147*2.0)+t79206*t79251*t79275*2.0+t79206* \
               t79274*t79197*2.0-rho_b[index]*t79206*t79197*(ccaa1*gamma_bb[index]*gcaa*t79215*t79182*(8.8E1/9.0) \
               +ccaa4*t79212*t79191*t79245*t79192*(1.12E3/9.0)-ccaa1*t79230*t79190*t79176*t79177*2.4E1+ccaa2*t79224* \
               t79190*t79176*t79177*(3.04E2/9.0)-ccaa4*t79235*t79244*t79191*t79227*t79192*(6.4E1/3.0)-ccaa2*t79225* \
               t79190*t79246*t79238*t79176*(3.2E1/3.0)-ccaa2*t79190*t79246*t79176*t79195*(gamma_bb[index]*gcaa*t79182* \
               (1.76E2/9.0)+t79190*t79176*t79177*(3.04E2/9.0))-ccaa4*t79244*t79191*t79192*t79193*(gamma_bb[index]* \
               gcaa*t79182*(3.52E2/9.0)+t79191*t79245*t79192*(1.12E3/9.0)+t79190*t79176*t79177*(6.08E2/3.0)+gamma_bb[index]* \
               gcaa*t79190*t79229*t79176*2.88E2)+ccaa4*1.0/(t79211*t79211*t79211)*(t79235*t79235)*t79191*t79192*t79193* \
               2.0+ccaa2*1.0/(t79223*t79223*t79223)*t79190*(t79238*t79238)*t79176*t79195*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t79220*t79190*t79229*t79176*7.2E1+ccaa1*gamma_bb[index]*gcaa*1.0/(t79214*t79214*t79214)*t79190* \
               t79229*t79176*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*(t79242*t79242)*t79190*1.0/(t79219*t79219*t79219) \
               *t79176*t79194*2.0-ccaa3*gamma_bb[index]*gcaa*t79243*t79190*t79176*t79194*(gamma_bb[index]*gcaa*t79182* \
               (8.8E1/3.0)+t79190*t79176*t79177*(3.04E2/3.0)+gamma_bb[index]*gcaa*t79190*t79229*t79176*7.2E1)-ccaa3* \
               gamma_bb[index]*gcaa*t79242*t79243*t79190*t79226*t79176*1.6E1)-rho_b[index]*t79206*t79274*t79275*2.0+ \
               rho_b[index]*t79206*t79251*(t79261-t79073-t79082+t79265+t79267-t78884*t78977*(t79261-t79073-t79082- \
               t79264+t79265-t79266+t79267-t79259+t78980*t79061*t79070*t79252*2.0+a1f*c*c0f*t78978*t79068*(8.0/9.0) \
               ))+gamma_bb[index]*t79201*t79085*t79274*t79197*t79199*(1.0/4.0)+gamma_bb[index]*t79201*t79251*t79085* \
               t79199*(-t78973+t79084+t79269)*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t81758 = 1.0/pow(rho_b[index],1.0/3.0);
            double t81759 = c*t81758;
            double t81760 = sqrt(t81759);
            double t81761 = b1f*t81760;
            double t81762 = pow(t81759,3.0/2.0);
            double t81763 = b3f*t81762;
            double t81764 = c*c;
            double t81765 = 1.0/pow(rho_b[index],2.0/3.0);
            double t81766 = b4f*t81764*t81765;
            double t81767 = b2f*c*t81758;
            double t81768 = t81761+t81763+t81766+t81767;
            double t81769 = 1.0/pow(rho_b[index],4.0/3.0);
            double t81770 = b1p*t81760;
            double t81771 = b3p*t81762;
            double t81772 = b4p*t81764*t81765;
            double t81773 = b2p*c*t81758;
            double t81774 = t81770+t81771+t81772+t81773;
            double t81775 = 1.0/pow(rho_b[index],5.0/3.0);
            double t81776 = 1.0/sqrt(t81759);
            double t81777 = 1.0/c0f;
            double t81778 = 1.0/t81768;
            double t81779 = t81777*t81778*(1.0/2.0);
            double t81780 = t81779+1.0;
            double t81781 = 1.0/c0p;
            double t81782 = 1.0/t81774;
            double t81783 = t81781*t81782*(1.0/2.0);
            double t81784 = t81783+1.0;
            double t81785 = a1p*c*t81758;
            double t81786 = t81785+1.0;
            double t81787 = 1.0/t81784;
            double t81788 = 1.0/(t81774*t81774);
            double t81789 = b4p*t81764*t81775*(2.0/3.0);
            double t81790 = b2p*c*t81769*(1.0/3.0);
            double t81791 = b1p*c*t81776*t81769*(1.0/6.0);
            double t81792 = b3p*c*t81760*t81769*(1.0/2.0);
            double t81793 = t81790+t81791+t81792+t81789;
            double t81794 = t81793*t81786*t81787*t81788;
            double t81795 = log(t81784);
            double t81796 = gamma_bb[index]*gamma_bb[index];
            double t81797 = gcaa*gcaa;
            double t81798 = t81796*t81796;
            double t81799 = t81797*t81797;
            double t81800 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t81801 = 1.0/pow(rho_b[index],8.0/3.0);
            double t81802 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t81803 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t81804 = pow(2.0,1.0/3.0);
            double t81805 = t81804*2.0;
            double t81806 = t81805-2.0;
            double t81807 = two_13*2.0;
            double t81808 = t81807-2.0;
            double t81809 = 1.0/t81808;
            double t81810 = log(t81780);
            double t81811 = a1f*c*t81758;
            double t81812 = t81811+1.0;
            double t81813 = tau_b[index]-1.0/1.0E20;
            double t81814 = ( (t81813 > 0.0) ?  1.0 : 0.0 ) ;
            double t81815 = 1.0/tau_b[index];
            double t81816 = tau_b[index]*2.0;
            double t81817 = 1.0/rho_b[index];
            double t81865 = gamma_bb[index]*t81817*(1.0/4.0);
            double t81818 = t81816-t81865;
            double t81819 = t81815*t81818*(1.0/2.0);
            double t81820 = t81819-1.0;
            double t81821 = t81820*t81814;
            double t81822 = t81821+1.0;
            double t81823 = gamma_bb[index]*gcaa*t81801*4.0;
            double t81824 = gamma_bb[index]*gcaa*t81802*t81796*t81797*4.0;
            double t81825 = t81803*t81796*t81797*6.0;
            double t81826 = t81800*t81798*t81799;
            double t81827 = t81823+t81824+t81825+t81826+1.0;
            double t81828 = 1.0/t81827;
            double t81829 = gamma_bb[index]*gcaa*t81801;
            double t81830 = t81829+1.0;
            double t81831 = 1.0/t81830;
            double t81832 = gamma_bb[index]*gcaa*t81801*3.0;
            double t81833 = gamma_bb[index]*gcaa*t81802*t81796*t81797;
            double t81834 = t81803*t81796*t81797*3.0;
            double t81835 = t81832+t81833+t81834+1.0;
            double t81836 = 1.0/t81835;
            double t81837 = gamma_bb[index]*gcaa*t81801*2.0;
            double t81838 = t81803*t81796*t81797;
            double t81839 = t81837+t81838+1.0;
            double t81840 = 1.0/t81839;
            double t81841 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t81842 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t81843 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t81844 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t81845 = pow(rho_b[index],2.0/3.0);
            double t81846 = pow(rho_b[index],5.0/3.0);
            double t81847 = C_k*t81815*t81846;
            double t81848 = t81847+1.0;
            double t81849 = t81847-1.0;
            double t81850 = 1.0/(t81848*t81848);
            double t81851 = t81849*t81849;
            double t81852 = t81851*t81851;
            double t81853 = t81852*t81852;
            double t81854 = 1.0/pow(t81848,1.1E1);
            double t81855 = 1.0/(t81848*t81848*t81848);
            double t81856 = 1.0/(t81848*t81848*t81848*t81848);
            double t81857 = 1.0/(t81848*t81848*t81848*t81848*t81848);
            double t81858 = 1.0/(t81848*t81848*t81848*t81848*t81848*t81848);
            double t81859 = 1.0/(t81848*t81848*t81848*t81848*t81848*t81848*t81848);
            double t81860 = 1.0/(t81848*t81848*t81848*t81848*t81848*t81848*t81848*t81848);
            double t81861 = 1.0/(t81848*t81848*t81848*t81848*t81848*t81848*t81848*t81848*t81848);
            double t81862 = 1.0/pow(t81848,1.0E1);
            double t81863 = c0f*t81810*t81812*2.0;
            double t81864 = c0p*t81786*t81795*2.0;
            double t81866 = 1.0/pow(rho_b[index],1.0E1);
            double t81867 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t81868 = 1.0/(t81830*t81830);
            double t81869 = gamma_bb[index]*gcaa*t81842*(3.2E1/3.0);
            double t81870 = gamma_bb[index]*gcaa*t81843*t81796*t81797*3.2E1;
            double t81871 = t81841*t81796*t81797*3.2E1;
            double t81872 = t81844*t81798*t81799*(3.2E1/3.0);
            double t81873 = t81870+t81871+t81872+t81869;
            double t81874 = gamma_bb[index]*gcaa*t81842*(1.6E1/3.0);
            double t81875 = t81841*t81796*t81797*(1.6E1/3.0);
            double t81876 = t81874+t81875;
            double t81877 = gamma_bb[index]*gcaa*t81842*8.0;
            double t81878 = gamma_bb[index]*gcaa*t81843*t81796*t81797*8.0;
            double t81879 = t81841*t81796*t81797*1.6E1;
            double t81880 = t81877+t81878+t81879;
            double t81881 = 1.0/(t81835*t81835);
            double t81882 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t81883 = 1.0/(t81827*t81827);
            double t81884 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t81885 = 1.0/(t81839*t81839);
            double t81886 = ccaa4*t81800*t81828*t81798*t81799;
            double t81887 = ccaa1*gamma_bb[index]*gcaa*t81801*t81831;
            double t81888 = ccaa3*gamma_bb[index]*gcaa*t81802*t81836*t81796*t81797;
            double t81889 = ccaa2*t81803*t81840*t81796*t81797;
            double t81890 = ccaa0+t81886+t81887+t81888+t81889;
            double t81891 = 1.0/t81780;
            double t81892 = b4f*t81764*t81775*(2.0/3.0);
            double t81893 = b2f*c*t81769*(1.0/3.0);
            double t81894 = b1f*c*t81776*t81769*(1.0/6.0);
            double t81895 = b3f*c*t81760*t81769*(1.0/2.0);
            double t81896 = t81892+t81893+t81894+t81895;
            double t81897 = 1.0/(t81768*t81768);
            double t81898 = 1.0/pow(rho_b[index],7.0/3.0);
            double t81899 = 1.0/pow(t81759,3.0/2.0);
            double t81900 = t81896*t81896;
            double t81901 = t81793*t81793;
            double t81902 = 1.0/(t81774*t81774*t81774);
            double t81903 = t81901*t81902*t81786*t81787*2.0;
            double t81904 = b4p*t81801*t81764*(1.0E1/9.0);
            double t81905 = b2p*c*t81898*(4.0/9.0);
            double t81906 = b3p*t81801*t81764*t81776*(1.0/1.2E1);
            double t81907 = b1p*c*t81776*t81898*(2.0/9.0);
            double t81908 = b3p*c*t81760*t81898*(2.0/3.0);
            double t81909 = t81904+t81905+t81906+t81907+t81908-b1p*t81801*t81764*t81899*(1.0/3.6E1);
            double t81910 = 1.0/(t81784*t81784);
            double t81911 = 1.0/(t81774*t81774*t81774*t81774);
            double t81912 = a1p*c*c0p*t81795*t81898*(8.0/9.0);
            double t81913 = a1f*c*c0f*t81810*t81769*(2.0/3.0);
            double t81914 = a1p*c*c0p*t81795*t81769*(2.0/3.0);
            double t81915 = ccaa4*t81844*t81828*t81798*t81799*(3.2E1/3.0);
            double t81916 = ccaa1*gamma_bb[index]*gcaa*t81831*t81842*(8.0/3.0);
            double t81917 = ccaa3*gamma_bb[index]*gcaa*t81843*t81836*t81796*t81797*8.0;
            double t81918 = ccaa2*t81840*t81841*t81796*t81797*(1.6E1/3.0);
            double t81955 = ccaa1*t81841*t81796*t81868*t81797*(8.0/3.0);
            double t81956 = ccaa3*gamma_bb[index]*gcaa*t81802*t81880*t81881*t81796*t81797;
            double t81957 = ccaa4*t81800*t81873*t81883*t81798*t81799;
            double t81958 = ccaa2*t81803*t81876*t81885*t81796*t81797;
            double t81919 = t81915+t81916+t81917+t81918-t81955-t81956-t81957-t81958;
            double t81920 = X-1.0;
            double t81921 = 1.0/(k*k);
            double t81922 = 1.0/kp;
            double t81923 = 1.0/(rho_b[index]*rho_b[index]);
            double t81924 = rho_b[index]*2.0;
            double t81925 = 1.0/pow(t81924,2.0/3.0);
            double t81926 = gamma_bb[index]*mu_*t81921*t81922*t81923*t81925*(1.0/4.0);
            double t81927 = t81926+1.0;
            double t81928 = 1.0/t81927;
            double t81929 = kp-kp*t81928+1.0;
            double t81930 = C_k*C_k;
            double t81931 = pow(rho_b[index],4.0/3.0);
            double t81932 = 1.0/(tau_b[index]*tau_b[index]);
            double t81933 = 1.0/t81848;
            double t81934 = 1.0/pow(t81848,1.2E1);
            double t81935 = t81913-t81914+t81794-t81812*t81891*t81896*t81897;
            double t81936 = t81806*t81809*t81935;
            double t81937 = 1.0/(t81927*t81927);
            double t81938 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t81939 = 1.0/pow(t81924,5.0/3.0);
            double t81940 = a_1*t81933*t81849;
            double t81941 = a_10*t81851*t81853*t81862;
            double t81942 = a_11*t81851*t81853*t81854*t81849;
            double t81943 = a_2*t81850*t81851;
            double t81944 = a_3*t81851*t81855*t81849;
            double t81945 = a_4*t81852*t81856;
            double t81946 = a_5*t81852*t81857*t81849;
            double t81947 = a_6*t81851*t81852*t81858;
            double t81948 = a_7*t81851*t81852*t81849*t81859;
            double t81949 = a_8*t81860*t81853;
            double t81950 = a_9*t81861*t81853*t81849;
            double t81951 = t81940+t81941+t81950+t81942+t81943+t81944+t81945+t81946+t81947+t81948+t81949+1.0;
            double t81952 = t81863-t81864;
            double t81953 = t81806*t81952*t81809;
            double t81954 = t81953+t81864;
            double t81959 = gamma_bb[index]*mu_*t81921*t81922*t81925*t81938*(1.0/2.0);
            double t81960 = gamma_bb[index]*mu_*t81921*t81922*t81923*t81939*(1.0/3.0);
            double t81961 = t81960+t81959;
            double t81962 = C_k*a_1*t81815*t81933*t81845*(5.0/3.0);
            double t81963 = C_k*a_2*t81850*t81815*t81845*t81849*(1.0E1/3.0);
            double t81964 = C_k*a_10*t81815*t81853*t81862*t81845*t81849*(5.0E1/3.0);
            double t81965 = C_k*a_11*t81815*t81851*t81853*t81845*t81854*(5.5E1/3.0);
            double t81966 = C_k*a_3*t81815*t81851*t81845*t81855*5.0;
            double t81967 = C_k*a_4*t81815*t81851*t81845*t81856*t81849*(2.0E1/3.0);
            double t81968 = C_k*a_5*t81815*t81852*t81845*t81857*(2.5E1/3.0);
            double t81969 = C_k*a_6*t81815*t81852*t81845*t81849*t81858*1.0E1;
            double t81970 = C_k*a_7*t81815*t81851*t81852*t81845*t81859*(3.5E1/3.0);
            double t81971 = C_k*a_8*t81815*t81851*t81860*t81852*t81845*t81849*(4.0E1/3.0);
            double t81972 = C_k*a_9*t81815*t81861*t81853*t81845*1.5E1;
            double t81973 = t81970+t81962+t81971+t81963+t81972+t81964+t81965+t81966+t81967+t81968+t81969-C_k* \
               a_1*t81850*t81815*t81845*t81849*(5.0/3.0)-C_k*a_2*t81815*t81851*t81845*t81855*(1.0E1/3.0)-C_k*a_4* \
               t81815*t81852*t81845*t81857*(2.0E1/3.0)-C_k*a_8*t81815*t81861*t81853*t81845*(4.0E1/3.0)-C_k*a_10*t81815* \
               t81851*t81853*t81845*t81854*(5.0E1/3.0)-C_k*a_3*t81815*t81851*t81845*t81856*t81849*5.0-C_k*a_5*t81815* \
               t81852*t81845*t81849*t81858*(2.5E1/3.0)-C_k*a_6*t81815*t81851*t81852*t81845*t81859*1.0E1-C_k*a_9*t81815* \
               t81853*t81862*t81845*t81849*1.5E1-C_k*a_11*t81815*t81851*t81853*t81934*t81845*t81849*(5.5E1/3.0)-C_k* \
               a_7*t81815*t81851*t81860*t81852*t81845*t81849*(3.5E1/3.0);
            v_rho_b_rho_b_[index] = t81822*t81890*(t81914-t81794+t81806*t81809*(t81913+t81794-t81812*t81891*t81896* \
               t81897-a1p*c*c0p*t81795*t81769*(2.0/3.0)))*2.0-t81920*t81973*t81929*2.0+t81822*t81919*(t81864+t81806* \
               t81809*(t81863-c0p*t81786*t81795*2.0))*2.0-rho_b[index]*t81822*t81954*(ccaa1*gamma_bb[index]*gcaa* \
               t81831*t81882*(8.8E1/9.0)+ccaa2*t81840*t81867*t81796*t81797*(3.04E2/9.0)-ccaa1*t81867*t81796*t81868* \
               t81797*2.4E1+ccaa4*t81828*t81884*t81798*t81799*(1.12E3/9.0)-ccaa2*t81841*t81876*t81885*t81796*t81797* \
               (3.2E1/3.0)-ccaa4*t81844*t81873*t81883*t81798*t81799*(6.4E1/3.0)-ccaa2*t81803*t81885*t81796*t81797* \
               (gamma_bb[index]*gcaa*t81882*(1.76E2/9.0)+t81867*t81796*t81797*(3.04E2/9.0))-ccaa4*t81800*t81883*t81798* \
               t81799*(gamma_bb[index]*gcaa*t81882*(3.52E2/9.0)+t81867*t81796*t81797*(6.08E2/3.0)+t81884*t81798*t81799* \
               (1.12E3/9.0)+gamma_bb[index]*gcaa*t81866*t81796*t81797*2.88E2)+ccaa4*t81800*1.0/(t81827*t81827*t81827) \
               *(t81873*t81873)*t81798*t81799*2.0+ccaa2*t81803*1.0/(t81839*t81839*t81839)*(t81876*t81876)*t81796* \
               t81797*2.0+ccaa3*gamma_bb[index]*gcaa*t81836*t81866*t81796*t81797*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               1.0/(t81830*t81830*t81830)*t81866*t81796*t81797*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t81802*1.0/ \
               (t81835*t81835*t81835)*(t81880*t81880)*t81796*t81797*2.0-ccaa3*gamma_bb[index]*gcaa*t81802*t81881* \
               t81796*t81797*(gamma_bb[index]*gcaa*t81882*(8.8E1/3.0)+t81867*t81796*t81797*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t81866*t81796*t81797*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t81843*t81880*t81881*t81796*t81797*1.6E1) \
               -rho_b[index]*t81920*t81929*(C_k*a_1*t81815*t81933*t81758*(1.0E1/9.0)-a_1*t81930*t81850*t81931*t81932* \
               (5.0E1/9.0)+a_2*t81930*t81850*t81931*t81932*(5.0E1/9.0)+a_1*t81930*t81931*t81932*t81855*t81849*(5.0E1/ \
               9.0)+a_10*t81930*t81931*t81932*t81853*t81862*2.5E2+a_2*t81930*t81931*t81851*t81932*t81856*(5.0E1/3.0) \
               -a_2*t81930*t81931*t81932*t81855*t81849*(2.0E2/9.0)-a_3*t81930*t81931*t81851*t81932*t81856*5.0E1+a_3* \
               t81930*t81931*t81932*t81855*t81849*(5.0E1/3.0)+a_4*t81930*t81931*t81851*t81932*t81856*(1.0E2/3.0)+ \
               a_4*t81930*t81931*t81932*t81852*t81858*(5.0E2/9.0)-a_5*t81930*t81931*t81932*t81852*t81858*(1.25E3/ \
               9.0)+a_6*t81930*t81931*t81932*t81852*t81858*(2.5E2/3.0)+a_8*t81930*t81931*t81932*t81853*t81862*2.0E2- \
               a_9*t81930*t81931*t81932*t81853*t81862*4.5E2-C_k*a_1*t81850*t81815*t81758*t81849*(1.0E1/9.0)-C_k*a_2* \
               t81815*t81851*t81855*t81758*(2.0E1/9.0)+C_k*a_2*t81850*t81815*t81758*t81849*(2.0E1/9.0)+C_k*a_3*t81815* \
               t81851*t81855*t81758*(1.0E1/3.0)-C_k*a_4*t81815*t81852*t81758*t81857*(4.0E1/9.0)+C_k*a_5*t81815*t81852* \
               t81758*t81857*(5.0E1/9.0)-C_k*a_8*t81815*t81861*t81853*t81758*(8.0E1/9.0)+C_k*a_9*t81815*t81861*t81853* \
               t81758*1.0E1-C_k*a_10*t81815*t81851*t81853*t81854*t81758*(1.0E2/9.0)+C_k*a_11*t81815*t81851*t81853* \
               t81854*t81758*(1.1E2/9.0)+C_k*a_10*t81815*t81853*t81862*t81758*t81849*(1.0E2/9.0)-C_k*a_3*t81815*t81851* \
               t81856*t81758*t81849*(1.0E1/3.0)+C_k*a_4*t81815*t81851*t81856*t81758*t81849*(4.0E1/9.0)-C_k*a_5*t81815* \
               t81852*t81758*t81849*t81858*(5.0E1/9.0)-C_k*a_6*t81815*t81851*t81852*t81758*t81859*(2.0E1/3.0)+C_k* \
               a_6*t81815*t81852*t81758*t81849*t81858*(2.0E1/3.0)+C_k*a_7*t81815*t81851*t81852*t81758*t81859*(7.0E1/ \
               9.0)-C_k*a_9*t81815*t81853*t81862*t81758*t81849*1.0E1+a_10*t81930*t81931*t81851*t81932*t81853*t81934* \
               (2.75E3/9.0)-a_11*t81930*t81931*t81851*t81932*t81853*t81934*(6.05E3/9.0)-a_10*t81930*t81931*t81932* \
               t81853*t81854*t81849*(5.0E3/9.0)+a_11*t81930*t81931*t81932*t81853*t81854*t81849*(2.75E3/9.0)+a_3*t81930* \
               t81931*t81851*t81932*t81857*t81849*(1.0E2/3.0)-a_4*t81930*t81931*t81851*t81932*t81857*t81849*(8.0E2/ \
               9.0)+a_5*t81930*t81931*t81851*t81932*t81857*t81849*(5.0E2/9.0)+a_5*t81930*t81931*t81932*t81852*t81849* \
               t81859*(2.5E2/3.0)+a_6*t81930*t81931*t81851*t81860*t81932*t81852*(3.5E2/3.0)-a_6*t81930*t81931*t81932* \
               t81852*t81849*t81859*2.0E2-a_7*t81930*t81931*t81851*t81860*t81932*t81852*(2.45E3/9.0)+a_7*t81930*t81931* \
               t81932*t81852*t81849*t81859*(3.5E2/3.0)+a_8*t81930*t81931*t81851*t81860*t81932*t81852*(1.4E3/9.0)+ \
               a_9*t81930*t81931*t81932*t81853*t81854*t81849*2.5E2+a_11*t81930*t81931*t81851*t81932*t81853*1.0/pow(t81848,1.3E1) \
               *t81849*(1.1E3/3.0)-C_k*a_11*t81815*t81851*t81853*t81934*t81758*t81849*(1.1E2/9.0)-C_k*a_7*t81815* \
               t81851*t81860*t81852*t81758*t81849*(7.0E1/9.0)+C_k*a_8*t81815*t81851*t81860*t81852*t81758*t81849*(8.0E1/ \
               9.0)+a_7*t81930*t81931*t81851*t81932*t81852*t81861*t81849*(1.4E3/9.0)-a_8*t81930*t81931*t81851*t81932* \
               t81852*t81861*t81849*(3.2E3/9.0)+a_9*t81930*t81931*t81851*t81932*t81852*t81861*t81849*2.0E2)-rho_b[index]* \
               t81822*t81919*(t81914+t81936-t81794)*2.0+rho_b[index]*t81822*t81890*(-t81903-t81912+t81806*t81809* \
               (t81903+t81912-t81909*t81786*t81787*t81788-t81900*t81812*t81891*1.0/(t81768*t81768*t81768)*2.0+t81812* \
               t81891*t81897*(b2f*c*t81898*(4.0/9.0)+b4f*t81801*t81764*(1.0E1/9.0)+b1f*c*t81776*t81898*(2.0/9.0)+ \
               b3f*c*t81760*t81898*(2.0/3.0)-b1f*t81801*t81764*t81899*(1.0/3.6E1)+b3f*t81801*t81764*t81776*(1.0/1.2E1) \
               )+t81900*t81812*1.0/(t81780*t81780)*1.0/(t81768*t81768*t81768*t81768)*t81777*(1.0/2.0)-a1f*c*c0f*t81810* \
               t81898*(8.0/9.0)-t81901*t81910*t81911*t81781*t81786*(1.0/2.0)+a1f*c*t81891*t81769*t81896*t81897*(2.0/ \
               3.0)-a1p*c*t81793*t81769*t81787*t81788*(2.0/3.0))+t81909*t81786*t81787*t81788+t81901*t81910*t81911* \
               t81781*t81786*(1.0/2.0)+a1p*c*t81793*t81769*t81787*t81788*(2.0/3.0))+kp*t81920*t81951*t81961*t81937* \
               2.0+gamma_bb[index]*t81814*t81815*t81817*t81954*t81919*(1.0/4.0)+kp*rho_b[index]*t81920*t81961*t81937* \
               t81973*2.0+gamma_bb[index]*t81814*t81815*t81817*t81890*(t81914+t81936-t81794)*(1.0/4.0)-kp*rho_b[index]* \
               t81920*t81951*t81937*(gamma_bb[index]*mu_*t81921*t81922*t81938*t81939*(4.0/3.0)+gamma_bb[index]*mu_* \
               1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t81921*t81922*t81925*(3.0/2.0)+gamma_bb[index]* \
               mu_*t81921*t81922*t81923*1.0/pow(t81924,8.0/3.0)*(1.0E1/9.0))+kp*rho_b[index]*t81920*t81951*(t81961* \
               t81961)*1.0/(t81927*t81927*t81927)*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t79281 = 1.0/(k*k);
                double t79282 = 1.0/kp;
                double t79283 = rho_a[index]*2.0;
                double t79284 = 1.0/(rho_a[index]*rho_a[index]);
                double t79285 = 1.0/pow(t79283,2.0/3.0);
                double t79286 = pow(rho_a[index],5.0/3.0);
                double t79287 = 1.0/tau_a[index];
                double t79288 = C_k*t79286*t79287;
                double t79289 = t79288-1.0;
                double t79290 = t79289*t79289;
                double t79291 = t79290*t79290;
                double t79292 = t79291*t79291;
                double t79293 = t79288+1.0;
                double t79294 = gamma_aa[index]*mu_*t79281*t79282*t79284*t79285*(1.0/4.0);
                double t79295 = t79294+1.0;
                double t79296 = 1.0/(t79295*t79295);
                double t79297 = 1.0/t79293;
                double t79298 = a_1*t79297*t79289;
                double t79299 = 1.0/pow(t79293,1.0E1);
                double t79300 = a_10*t79290*t79292*t79299;
                double t79301 = 1.0/pow(t79293,1.1E1);
                double t79302 = a_11*t79301*t79290*t79292*t79289;
                double t79303 = 1.0/(t79293*t79293);
                double t79304 = a_2*t79303*t79290;
                double t79305 = 1.0/(t79293*t79293*t79293);
                double t79306 = a_3*t79305*t79290*t79289;
                double t79307 = 1.0/(t79293*t79293*t79293*t79293);
                double t79308 = a_4*t79307*t79291;
                double t79309 = 1.0/(t79293*t79293*t79293*t79293*t79293);
                double t79310 = a_5*t79291*t79309*t79289;
                double t79311 = 1.0/(t79293*t79293*t79293*t79293*t79293*t79293);
                double t79312 = a_6*t79311*t79290*t79291;
                double t79313 = 1.0/(t79293*t79293*t79293*t79293*t79293*t79293*t79293);
                double t79314 = a_7*t79313*t79290*t79291*t79289;
                double t79315 = 1.0/(t79293*t79293*t79293*t79293*t79293*t79293*t79293*t79293);
                double t79316 = a_8*t79315*t79292;
                double t79317 = 1.0/(t79293*t79293*t79293*t79293*t79293*t79293*t79293*t79293*t79293);
                double t79318 = a_9*t79317*t79292*t79289;
                double t79319 = t79300+t79310+t79302+t79312+t79304+t79314+t79306+t79316+t79308+t79318+t79298+1.0;
                double t79320 = pow(rho_a[index],2.0/3.0);
                double t79321 = 1.0/rho_a[index];
                double t79322 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t79323 = 1.0/pow(t79283,5.0/3.0);
                double t79324 = rho_a[index]+rho_b[index];
                double t79325 = 1.0/pow(t79324,1.0/3.0);
                double t79326 = c*t79325;
                double t79327 = sqrt(t79326);
                double t79328 = b1p*t79327;
                double t79329 = pow(t79326,3.0/2.0);
                double t79330 = b3p*t79329;
                double t79331 = c*c;
                double t79332 = 1.0/pow(t79324,2.0/3.0);
                double t79333 = b4p*t79331*t79332;
                double t79334 = b2p*c*t79325;
                double t79335 = t79330+t79333+t79334+t79328;
                double t79336 = 1.0/pow(t79324,4.0/3.0);
                double t79337 = 1.0/c0p;
                double t79338 = 1.0/t79335;
                double t79339 = t79337*t79338*(1.0/2.0);
                double t79340 = t79339+1.0;
                double t79341 = a1p*c*t79325;
                double t79342 = t79341+1.0;
                double t79343 = rho_a[index]-rho_b[index];
                double t79344 = t79343*t79343;
                double t79345 = 1.0/t79324;
                double t79346 = t79343*t79345;
                double t79347 = two_13*2.0;
                double t79348 = t79347-2.0;
                double t79349 = 1.0/t79348;
                double t79350 = 1.0/c0f;
                double t79351 = b1f*t79327;
                double t79352 = b3f*t79329;
                double t79353 = b4f*t79331*t79332;
                double t79354 = b2f*c*t79325;
                double t79355 = t79351+t79352+t79353+t79354;
                double t79356 = 1.0/t79355;
                double t79357 = t79350*t79356*(1.0/2.0);
                double t79358 = t79357+1.0;
                double t79359 = log(t79358);
                double t79360 = a1f*c*t79325;
                double t79361 = t79360+1.0;
                double t79362 = log(t79340);
                double t79372 = c0f*t79361*t79359*2.0;
                double t79373 = c0p*t79342*t79362*2.0;
                double t79363 = t79372-t79373;
                double t79364 = t79346+1.0;
                double t79365 = pow(t79364,4.0/3.0);
                double t79366 = -t79346+1.0;
                double t79367 = pow(t79366,4.0/3.0);
                double t79368 = t79365+t79367-2.0;
                double t79369 = 1.0/(t79324*t79324);
                double t79400 = t79343*t79369;
                double t79370 = -t79400+t79345;
                double t79371 = 1.0/(t79324*t79324*t79324*t79324);
                double t79374 = t79344*t79344;
                double t79375 = 1.0/pow(t79324,5.0/3.0);
                double t79376 = 1.0/sqrt(t79326);
                double t79377 = 1.0/t79340;
                double t79378 = 1.0/(t79335*t79335);
                double t79379 = b4p*t79331*t79375*(2.0/3.0);
                double t79380 = b2p*c*t79336*(1.0/3.0);
                double t79381 = b1p*c*t79336*t79376*(1.0/6.0);
                double t79382 = b3p*c*t79327*t79336*(1.0/2.0);
                double t79383 = t79380+t79381+t79382+t79379;
                double t79384 = t79342*t79383*t79377*t79378;
                double t79385 = 1.0/(t79324*t79324*t79324*t79324*t79324);
                double t79386 = 1.0/d2fz0;
                double t79387 = 1.0/Aa;
                double t79388 = b1a*t79327;
                double t79389 = b3a*t79329;
                double t79390 = b4a*t79331*t79332;
                double t79391 = b2a*c*t79325;
                double t79392 = t79390+t79391+t79388+t79389;
                double t79393 = 1.0/t79392;
                double t79394 = t79393*t79387*(1.0/2.0);
                double t79395 = t79394+1.0;
                double t79396 = log(t79395);
                double t79397 = a1a*c*t79325;
                double t79398 = t79397+1.0;
                double t79399 = pow(t79364,1.0/3.0);
                double t79401 = t79370*t79399*(4.0/3.0);
                double t79402 = pow(t79366,1.0/3.0);
                double t79403 = t79401-t79402*t79370*(4.0/3.0);
                double t79404 = t79371*t79374;
                double t79405 = t79404-1.0;
                double t79406 = 1.0/pow(rho_a[index],1.0/3.0);
                double t79407 = c*t79406;
                double t79408 = sqrt(t79407);
                double t79409 = b1f*t79408;
                double t79410 = pow(t79407,3.0/2.0);
                double t79411 = b3f*t79410;
                double t79412 = 1.0/pow(rho_a[index],2.0/3.0);
                double t79413 = b4f*t79331*t79412;
                double t79414 = b2f*c*t79406;
                double t79415 = t79411+t79413+t79414+t79409;
                double t79416 = 1.0/pow(rho_a[index],4.0/3.0);
                double t79417 = b1p*t79408;
                double t79418 = b3p*t79410;
                double t79419 = b4p*t79331*t79412;
                double t79420 = b2p*c*t79406;
                double t79421 = t79420+t79417+t79418+t79419;
                double t79422 = 1.0/pow(rho_a[index],5.0/3.0);
                double t79423 = 1.0/sqrt(t79407);
                double t79424 = 1.0/t79415;
                double t79425 = t79350*t79424*(1.0/2.0);
                double t79426 = t79425+1.0;
                double t79427 = 1.0/t79421;
                double t79428 = t79337*t79427*(1.0/2.0);
                double t79429 = t79428+1.0;
                double t79430 = a1p*c*t79406;
                double t79431 = t79430+1.0;
                double t79432 = 1.0/t79429;
                double t79433 = 1.0/(t79421*t79421);
                double t79434 = b4p*t79331*t79422*(2.0/3.0);
                double t79435 = b2p*c*t79416*(1.0/3.0);
                double t79436 = b1p*c*t79423*t79416*(1.0/6.0);
                double t79437 = b3p*c*t79416*t79408*(1.0/2.0);
                double t79438 = t79434+t79435+t79436+t79437;
                double t79439 = t79431*t79432*t79433*t79438;
                double t79440 = log(t79429);
                double t79441 = pow(2.0,1.0/3.0);
                double t79442 = t79441*2.0;
                double t79443 = t79442-2.0;
                double t79444 = log(t79426);
                double t79445 = a1f*c*t79406;
                double t79446 = t79445+1.0;
                double t79447 = 1.0/pow(rho_a[index],8.0/3.0);
                double t79448 = gamma_aa[index]*t79447*(1.0/2.0);
                double t79449 = 1.0/pow(rho_b[index],8.0/3.0);
                double t79450 = gamma_bb[index]*t79449*(1.0/2.0);
                double t79451 = t79450+t79448;
                double t79452 = gcab*t79451;
                double t79453 = t79452+1.0;
                double t79454 = gcab*gcab;
                double t79455 = t79451*t79451;
                double t79456 = t79454*t79454;
                double t79457 = t79455*t79455;
                double t79458 = t79454*t79455;
                double t79459 = gcab*t79451*2.0;
                double t79460 = t79458+t79459+1.0;
                double t79461 = t79454*t79455*3.0;
                double t79462 = gcab*t79451*t79454*t79455;
                double t79463 = gcab*t79451*3.0;
                double t79464 = t79461+t79462+t79463+1.0;
                double t79465 = t79454*t79455*6.0;
                double t79466 = gcab*t79451*t79454*t79455*4.0;
                double t79467 = t79456*t79457;
                double t79468 = gcab*t79451*4.0;
                double t79469 = t79465+t79466+t79467+t79468+1.0;
                double t79470 = c0f*t79444*t79446*2.0;
                double t79472 = c0p*t79431*t79440*2.0;
                double t79471 = t79470-t79472;
                double t79473 = 1.0/pow(rho_b[index],1.0/3.0);
                double t79474 = c*t79473;
                double t79475 = sqrt(t79474);
                double t79476 = pow(t79474,3.0/2.0);
                double t79477 = 1.0/pow(rho_b[index],2.0/3.0);
                double t79478 = b1p*t79475;
                double t79479 = b3p*t79476;
                double t79480 = b4p*t79331*t79477;
                double t79481 = b2p*c*t79473;
                double t79482 = t79480+t79481+t79478+t79479;
                double t79483 = 1.0/t79482;
                double t79484 = t79337*t79483*(1.0/2.0);
                double t79485 = t79484+1.0;
                double t79486 = log(t79485);
                double t79487 = a1p*c*t79473;
                double t79488 = t79487+1.0;
                double t79489 = c0p*t79486*t79488*2.0;
                double t79490 = t79371*t79363*t79374*t79349*t79368;
                double t79491 = Aa*t79405*t79349*t79368*t79386*t79396*t79398*2.0;
                double t79492 = 1.0/t79453;
                double t79493 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t79494 = 1.0/(t79453*t79453);
                double t79495 = 1.0/t79460;
                double t79496 = 1.0/(t79464*t79464);
                double t79497 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t79498 = 1.0/(t79460*t79460);
                double t79499 = 1.0/t79464;
                double t79500 = 1.0/t79469;
                double t79501 = 1.0/(t79469*t79469);
                double t79502 = gcab*t79447*2.0;
                double t79503 = t79451*t79454*t79447*6.0;
                double t79504 = gcab*t79454*t79455*t79447*6.0;
                double t79505 = t79451*t79455*t79447*t79456*2.0;
                double t79506 = t79502+t79503+t79504+t79505;
                double t79507 = gamma_aa[index]*gcab*t79493*(8.0/3.0);
                double t79508 = gamma_aa[index]*t79451*t79454*t79493*(8.0/3.0);
                double t79509 = t79507+t79508;
                double t79510 = gcab*t79447;
                double t79511 = t79451*t79454*t79447;
                double t79512 = t79510+t79511;
                double t79513 = gamma_aa[index]*gcab*t79493*(1.6E1/3.0);
                double t79514 = gamma_aa[index]*gcab*t79454*t79455*t79493*1.6E1;
                double t79515 = gamma_aa[index]*t79451*t79455*t79456*t79493*(1.6E1/3.0);
                double t79516 = gamma_aa[index]*t79451*t79454*t79493*1.6E1;
                double t79517 = t79513+t79514+t79515+t79516;
                double t79518 = gcab*t79447*(3.0/2.0);
                double t79519 = t79451*t79454*t79447*3.0;
                double t79520 = gcab*t79454*t79455*t79447*(3.0/2.0);
                double t79521 = t79520+t79518+t79519;
                double t79522 = gamma_aa[index]*gcab*t79493*4.0;
                double t79523 = gamma_aa[index]*gcab*t79454*t79455*t79493*4.0;
                double t79524 = gamma_aa[index]*t79451*t79454*t79493*8.0;
                double t79525 = t79522+t79523+t79524;
                double t79526 = t79443*t79471*t79349;
                double t79527 = t79472+t79526;
                double t79528 = gamma_aa[index]*gamma_aa[index];
                double t79529 = gcaa*gcaa;
                double t79530 = t79529*t79529;
                double t79531 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t79532 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t79533 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t79534 = gamma_aa[index]*gcaa*t79447;
                double t79535 = t79534+1.0;
                double t79536 = gamma_aa[index]*gcaa*t79447*3.0;
                double t79537 = gamma_aa[index]*gcaa*t79533*t79528*t79529;
                double t79538 = t79532*t79528*t79529*3.0;
                double t79539 = t79536+t79537+t79538+1.0;
                double t79540 = t79528*t79528;
                double t79541 = gamma_aa[index]*gcaa*t79447*4.0;
                double t79542 = gamma_aa[index]*gcaa*t79533*t79528*t79529*4.0;
                double t79543 = t79532*t79528*t79529*6.0;
                double t79544 = t79530*t79531*t79540;
                double t79545 = t79541+t79542+t79543+t79544+1.0;
                double t79546 = gamma_aa[index]*gcaa*t79447*2.0;
                double t79547 = t79532*t79528*t79529;
                double t79548 = t79546+t79547+1.0;
                double t79549 = tau_a[index]-1.0/1.0E20;
                double t79550 = ( (t79549 > 0.0) ?  1.0 : 0.0 ) ;
                double t79551 = tau_a[index]*2.0;
                double t79591 = gamma_aa[index]*t79321*(1.0/4.0);
                double t79552 = t79551-t79591;
                double t79553 = t79552*t79287*(1.0/2.0);
                double t79554 = t79553-1.0;
                double t79555 = t79550*t79554;
                double t79556 = t79555+1.0;
                double t79557 = 1.0/t79535;
                double t79558 = 1.0/t79545;
                double t79559 = 1.0/t79548;
                double t79560 = 1.0/t79539;
                double t79561 = 1.0/(t79535*t79535);
                double t79562 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t79563 = 1.0/(t79539*t79539);
                double t79564 = 1.0/(t79548*t79548);
                double t79565 = gcaa*t79447*3.0;
                double t79566 = gamma_aa[index]*t79532*t79529*6.0;
                double t79567 = gcaa*t79533*t79528*t79529*3.0;
                double t79568 = t79565+t79566+t79567;
                double t79569 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t79570 = 1.0/(t79545*t79545);
                double t79571 = gcaa*t79447*4.0;
                double t79572 = gamma_aa[index]*t79532*t79529*1.2E1;
                double t79573 = gcaa*t79533*t79528*t79529*1.2E1;
                double t79574 = gamma_aa[index]*t79530*t79531*t79528*4.0;
                double t79575 = t79571+t79572+t79573+t79574;
                double t79576 = gcaa*t79447*2.0;
                double t79577 = gamma_aa[index]*t79532*t79529*2.0;
                double t79578 = t79576+t79577;
                double t79579 = gamma_aa[index]*gcaa*t79493*(1.6E1/3.0);
                double t79580 = t79528*t79529*t79497*(1.6E1/3.0);
                double t79581 = t79580+t79579;
                double t79582 = gamma_aa[index]*gcaa*t79493*8.0;
                double t79583 = gamma_aa[index]*gcaa*t79562*t79528*t79529*8.0;
                double t79584 = t79528*t79529*t79497*1.6E1;
                double t79585 = t79582+t79583+t79584;
                double t79586 = gamma_aa[index]*gcaa*t79493*(3.2E1/3.0);
                double t79587 = gamma_aa[index]*gcaa*t79562*t79528*t79529*3.2E1;
                double t79588 = t79528*t79529*t79497*3.2E1;
                double t79589 = t79530*t79540*t79569*(3.2E1/3.0);
                double t79590 = t79586+t79587+t79588+t79589;
                double t79592 = 1.0/t79426;
                double t79593 = 1.0/(t79415*t79415);
                double t79594 = b4f*t79331*t79422*(2.0/3.0);
                double t79595 = b2f*c*t79416*(1.0/3.0);
                double t79596 = b1f*c*t79423*t79416*(1.0/6.0);
                double t79597 = b3f*c*t79416*t79408*(1.0/2.0);
                double t79598 = t79594+t79595+t79596+t79597;
                double t79599 = a1f*c*c0f*t79416*t79444*(2.0/3.0);
                double t79600 = a1p*c*c0p*t79440*t79416*(2.0/3.0);
                double t79601 = ccaa1*gcaa*t79447*t79557;
                double t79602 = ccaa4*gamma_aa[index]*t79530*t79531*t79528*t79558*4.0;
                double t79603 = ccaa2*gamma_aa[index]*t79532*t79529*t79559*2.0;
                double t79604 = ccaa3*gcaa*t79533*t79560*t79528*t79529*3.0;
                double t79610 = ccaa1*gamma_aa[index]*t79532*t79561*t79529;
                double t79611 = ccaa3*gamma_aa[index]*gcaa*t79533*t79563*t79528*t79529*t79568;
                double t79612 = ccaa4*t79530*t79531*t79540*t79570*t79575;
                double t79613 = ccaa2*t79532*t79528*t79564*t79529*t79578;
                double t79605 = t79601-t79610+t79602-t79611+t79603-t79612+t79604-t79613;
                double t79606 = t79446*t79592*t79593*t79598;
                double t79607 = t79600+t79606-t79439-t79599;
                double t79608 = t79443*t79607*t79349;
                double t79609 = -t79600+t79608+t79439;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t79527+rho_b[index]*(t79489-t79443*t79349*(t79489-c0f*log((t79350* \
                   (1.0/2.0))/(b1f*t79475+b3f*t79476+b2f*c*t79473+b4f*t79331*t79477)+1.0)*(a1f*c*t79473+1.0)*2.0))-t79324* \
                   (t79373+t79490+t79491))*(ccab1*gcab*t79492*t79493*(4.0/3.0)-ccab2*t79454*t79455*t79498*(gcab*t79493* \
                   (8.0/3.0)+gamma_aa[index]*t79454*t79497*(4.0/3.0)+t79451*t79454*t79493*(8.0/3.0))-ccab4*t79501*t79456* \
                   t79457*(gcab*t79493*(1.6E1/3.0)+gamma_aa[index]*t79454*t79497*8.0+t79451*t79454*t79493*1.6E1+gamma_aa[index]* \
                   t79455*t79456*t79497*8.0+gcab*t79454*t79455*t79493*1.6E1+t79451*t79455*t79456*t79493*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t79451*t79454*t79497*1.6E1)-ccab1*gamma_aa[index]*t79454*t79494*t79497*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t79454*t79495*t79497*(4.0/3.0)-ccab1*t79451*t79454*t79493*t79494*(4.0/3.0)+ccab2*t79451*t79454*t79493* \
                   t79495*(8.0/3.0)+ccab4*t79500*t79451*t79455*t79456*t79493*(1.6E1/3.0)-ccab2*t79451*t79454*t79509*t79447* \
                   t79498+ccab2*t79512*1.0/(t79460*t79460*t79460)*t79454*t79455*t79509*2.0+ccab4*t79506*t79517*t79456* \
                   t79457*1.0/(t79469*t79469*t79469)*2.0+ccab4*gamma_aa[index]*t79500*t79455*t79456*t79497*8.0+ccab3* \
                   gcab*t79454*t79455*t79493*t79499*4.0+ccab3*gamma_aa[index]*gcab*t79451*t79454*t79497*t79499*4.0-ccab2* \
                   gamma_aa[index]*t79512*t79451*t79454*t79493*t79498*(8.0/3.0)-ccab3*gcab*t79525*t79454*t79455*t79447* \
                   t79496*(3.0/2.0)-ccab4*t79501*t79451*t79517*t79455*t79447*t79456*2.0-ccab3*gcab*t79451*t79454*t79455* \
                   t79496*(gcab*t79493*4.0+gamma_aa[index]*t79454*t79497*4.0+t79451*t79454*t79493*8.0+gcab*t79454*t79455* \
                   t79493*4.0+gamma_aa[index]*gcab*t79451*t79454*t79497*4.0)+ccab1*gamma_aa[index]*gcab*t79451*1.0/(t79453* \
                   t79453*t79453)*t79454*t79497*(4.0/3.0)+ccab3*gcab*t79521*t79451*t79525*t79454*t79455*1.0/(t79464*t79464* \
                   t79464)*2.0-ccab3*gamma_aa[index]*gcab*t79521*t79454*t79455*t79493*t79496*4.0-ccab4*gamma_aa[index]* \
                   t79501*t79451*t79506*t79455*t79456*t79493*(1.6E1/3.0))-(X-1.0)*(-kp*rho_a[index]*t79319*t79296*(mu_* \
                   t79322*t79281*t79282*t79285*(1.0/2.0)+mu_*t79323*t79281*t79282*t79284*(1.0/3.0))+mu_*t79281*t79319* \
                   t79284*t79285*t79296*(1.0/4.0)+mu_*t79321*t79281*t79285*t79296*(C_k*a_1*t79320*t79287*t79297*(5.0/ \
                   3.0)-C_k*a_1*t79320*t79303*t79287*t79289*(5.0/3.0)-C_k*a_2*t79320*t79305*t79290*t79287*(1.0E1/3.0) \
                   +C_k*a_2*t79320*t79303*t79287*t79289*(1.0E1/3.0)+C_k*a_3*t79320*t79305*t79290*t79287*5.0-C_k*a_4*t79320* \
                   t79291*t79309*t79287*(2.0E1/3.0)+C_k*a_5*t79320*t79291*t79309*t79287*(2.5E1/3.0)-C_k*a_8*t79320*t79317* \
                   t79292*t79287*(4.0E1/3.0)+C_k*a_9*t79320*t79317*t79292*t79287*1.5E1-C_k*a_10*t79301*t79320*t79290* \
                   t79292*t79287*(5.0E1/3.0)+C_k*a_11*t79301*t79320*t79290*t79292*t79287*(5.5E1/3.0)+C_k*a_10*t79320* \
                   t79292*t79287*t79289*t79299*(5.0E1/3.0)-C_k*a_3*t79320*t79307*t79290*t79287*t79289*5.0+C_k*a_4*t79320* \
                   t79307*t79290*t79287*t79289*(2.0E1/3.0)-C_k*a_5*t79311*t79320*t79291*t79287*t79289*(2.5E1/3.0)-C_k* \
                   a_6*t79320*t79313*t79290*t79291*t79287*1.0E1+C_k*a_6*t79311*t79320*t79291*t79287*t79289*1.0E1+C_k* \
                   a_7*t79320*t79313*t79290*t79291*t79287*(3.5E1/3.0)-C_k*a_9*t79320*t79292*t79287*t79289*t79299*1.5E1- \
                   C_k*a_11*t79320*t79290*t79292*1.0/pow(t79293,1.2E1)*t79287*t79289*(5.5E1/3.0)-C_k*a_7*t79320*t79315* \
                   t79290*t79291*t79287*t79289*(3.5E1/3.0)+C_k*a_8*t79320*t79315*t79290*t79291*t79287*t79289*(4.0E1/3.0) \
                   )*(1.0/4.0)+mu_*t79321*t79281*t79319*t79285*1.0/(t79295*t79295*t79295)*(gamma_aa[index]*mu_*t79322* \
                   t79281*t79282*t79285*(1.0/2.0)+gamma_aa[index]*mu_*t79323*t79281*t79282*t79284*(1.0/3.0))*(1.0/2.0) \
                   )-(t79373+t79490+t79491+t79324*(t79384-t79371*t79374*t79349*t79368*(t79384-(t79361*1.0/(t79355*t79355) \
                   *(b2f*c*t79336*(1.0/3.0)+b4f*t79331*t79375*(2.0/3.0)+b1f*c*t79336*t79376*(1.0/6.0)+b3f*c*t79327*t79336* \
                   (1.0/2.0)))/t79358+a1f*c*c0f*t79336*t79359*(2.0/3.0)-a1p*c*c0p*t79362*t79336*(2.0/3.0))-a1p*c*c0p* \
                   t79362*t79336*(2.0/3.0)+t79403*t79371*t79363*t79374*t79349-t79363*t79374*t79349*t79385*t79368*4.0+ \
                   t79343*t79344*t79371*t79363*t79349*t79368*4.0-Aa*t79349*t79368*t79386*t79396*t79398*(t79374*t79385* \
                   4.0-t79343*t79344*t79371*4.0)*2.0+Aa*t79403*t79405*t79349*t79386*t79396*t79398*2.0+(t79405*1.0/(t79392* \
                   t79392)*t79349*t79368*t79386*t79398*(b2a*c*t79336*(1.0/3.0)+b4a*t79331*t79375*(2.0/3.0)+b1a*c*t79336* \
                   t79376*(1.0/6.0)+b3a*c*t79327*t79336*(1.0/2.0)))/t79395-Aa*a1a*c*t79405*t79336*t79349*t79368*t79386* \
                   t79396*(2.0/3.0))+rho_a[index]*(t79600-t79439+t79443*t79349*(t79439+t79599-t79446*t79592*t79593*t79598- \
                   a1p*c*c0p*t79440*t79416*(2.0/3.0)))-c0p*t79431*t79440*2.0-t79443*t79471*t79349)*(ccab1*gcab*t79447* \
                   t79492*(1.0/2.0)-ccab4*t79501*t79506*t79456*t79457-ccab1*t79451*t79454*t79447*t79494*(1.0/2.0)-ccab2* \
                   t79512*t79454*t79455*t79498+ccab2*t79451*t79454*t79447*t79495+ccab4*t79500*t79451*t79455*t79447*t79456* \
                   2.0+ccab3*gcab*t79454*t79455*t79447*t79499*(3.0/2.0)-ccab3*gcab*t79521*t79451*t79454*t79455*t79496) \
                   -t79605*t79527*t79556-rho_a[index]*t79605*t79609*t79556-rho_a[index]*t79527*t79556*(ccaa1*gcaa*t79493* \
                   t79557*(-8.0/3.0)+ccaa1*gamma_aa[index]*t79561*t79529*t79497*8.0-ccaa2*gamma_aa[index]*t79529*t79559* \
                   t79497*(3.2E1/3.0)+ccaa4*t79530*t79540*t79570*t79575*t79569*(3.2E1/3.0)+ccaa2*t79528*t79564*t79529* \
                   t79497*t79578*(1.6E1/3.0)+ccaa4*t79530*t79531*t79540*t79570*(gcaa*t79493*(3.2E1/3.0)+gamma_aa[index]* \
                   t79529*t79497*6.4E1+gamma_aa[index]*t79530*t79528*t79569*(1.28E2/3.0)+gcaa*t79562*t79528*t79529*9.6E1) \
                   -ccaa1*gcaa*1.0/(t79535*t79535*t79535)*t79562*t79528*t79529*(1.6E1/3.0)+ccaa2*t79532*t79528*t79564* \
                   t79529*(gcaa*t79493*(1.6E1/3.0)+gamma_aa[index]*t79529*t79497*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t79532* \
                   t79581*t79564*t79529*2.0-ccaa4*gamma_aa[index]*t79530*t79528*t79558*t79569*(1.28E2/3.0)-ccaa3*gcaa* \
                   t79560*t79562*t79528*t79529*2.4E1+ccaa4*gamma_aa[index]*t79530*t79531*t79570*t79590*t79528*4.0+ccaa3* \
                   gcaa*t79533*t79563*t79528*t79529*t79585*3.0-ccaa4*t79530*t79531*t79540*1.0/(t79545*t79545*t79545)* \
                   t79590*t79575*2.0-ccaa2*t79532*t79581*t79528*t79529*1.0/(t79548*t79548*t79548)*t79578*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t79533*t79563*t79528*t79529*(gcaa*t79493*8.0+gamma_aa[index]*t79529*t79497*3.2E1+gcaa*t79562* \
                   t79528*t79529*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t79562*t79563*t79528*t79529*t79568*8.0-ccaa3*gamma_aa[index]* \
                   gcaa*t79533*t79528*t79529*1.0/(t79539*t79539*t79539)*t79585*t79568*2.0)+t79550*t79609*t79287*(ccaa0+ \
                   ccaa1*gamma_aa[index]*gcaa*t79447*t79557+ccaa4*t79530*t79531*t79540*t79558+ccaa2*t79532*t79528*t79529* \
                   t79559+ccaa3*gamma_aa[index]*gcaa*t79533*t79560*t79528*t79529)*(1.0/8.0)-t79550*t79527*t79287*(ccaa1* \
                   gamma_aa[index]*gcaa*t79493*t79557*(8.0/3.0)+ccaa4*t79530*t79540*t79558*t79569*(3.2E1/3.0)-ccaa1*t79561* \
                   t79528*t79529*t79497*(8.0/3.0)+ccaa2*t79528*t79529*t79559*t79497*(1.6E1/3.0)-ccaa4*t79530*t79531*t79540* \
                   t79570*t79590-ccaa2*t79532*t79581*t79528*t79564*t79529+ccaa3*gamma_aa[index]*gcaa*t79560*t79562*t79528* \
                   t79529*8.0-ccaa3*gamma_aa[index]*gcaa*t79533*t79563*t79528*t79529*t79585)*(1.0/8.0)-gamma_aa[index]* \
                   t79321*t79550*t79605*t79527*t79287*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83101 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83102 = c*t83101;
                double t83103 = sqrt(t83102);
                double t83104 = pow(t83102,3.0/2.0);
                double t83105 = c*c;
                double t83106 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83107 = 1.0/c0p;
                double t83108 = b1p*t83103;
                double t83109 = b3p*t83104;
                double t83110 = b4p*t83105*t83106;
                double t83111 = b2p*c*t83101;
                double t83112 = t83110+t83111+t83108+t83109;
                double t83113 = 1.0/t83112;
                double t83114 = t83113*t83107*(1.0/2.0);
                double t83115 = t83114+1.0;
                double t83116 = log(t83115);
                double t83117 = a1p*c*t83101;
                double t83118 = t83117+1.0;
                double t83119 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83120 = gamma_aa[index]*gamma_aa[index];
                double t83121 = gcaa*gcaa;
                double t83122 = t83121*t83121;
                double t83123 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83124 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83125 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83126 = gamma_aa[index]*gcaa*t83119;
                double t83127 = t83126+1.0;
                double t83128 = gamma_aa[index]*gcaa*t83119*3.0;
                double t83129 = gamma_aa[index]*gcaa*t83120*t83121*t83125;
                double t83130 = t83120*t83121*t83124*3.0;
                double t83131 = t83130+t83128+t83129+1.0;
                double t83132 = t83120*t83120;
                double t83133 = gamma_aa[index]*gcaa*t83119*4.0;
                double t83134 = gamma_aa[index]*gcaa*t83120*t83121*t83125*4.0;
                double t83135 = t83120*t83121*t83124*6.0;
                double t83136 = t83122*t83123*t83132;
                double t83137 = t83133+t83134+t83135+t83136+1.0;
                double t83138 = gamma_aa[index]*gcaa*t83119*2.0;
                double t83139 = t83120*t83121*t83124;
                double t83140 = t83138+t83139+1.0;
                double t83141 = pow(2.0,1.0/3.0);
                double t83142 = t83141*2.0;
                double t83143 = t83142-2.0;
                double t83144 = two_13*2.0;
                double t83145 = t83144-2.0;
                double t83146 = 1.0/t83145;
                double t83147 = 1.0/c0f;
                double t83148 = b1f*t83103;
                double t83149 = b3f*t83104;
                double t83150 = b4f*t83105*t83106;
                double t83151 = b2f*c*t83101;
                double t83152 = t83150+t83151+t83148+t83149;
                double t83153 = 1.0/t83152;
                double t83154 = t83153*t83147*(1.0/2.0);
                double t83155 = t83154+1.0;
                double t83156 = log(t83155);
                double t83157 = a1f*c*t83101;
                double t83158 = t83157+1.0;
                double t83159 = c0f*t83156*t83158*2.0;
                double t83160 = c0p*t83116*t83118*2.0;
                double t83161 = tau_a[index]-1.0/1.0E20;
                double t83162 = ( (t83161 > 0.0) ?  1.0 : 0.0 ) ;
                double t83163 = 1.0/tau_a[index];
                double t83164 = tau_a[index]*2.0;
                double t83165 = 1.0/rho_a[index];
                double t83209 = gamma_aa[index]*t83165*(1.0/4.0);
                double t83166 = t83164-t83209;
                double t83167 = t83163*t83166*(1.0/2.0);
                double t83168 = t83167-1.0;
                double t83169 = t83162*t83168;
                double t83170 = t83169+1.0;
                double t83171 = 1.0/t83127;
                double t83172 = 1.0/t83137;
                double t83173 = 1.0/t83140;
                double t83174 = 1.0/t83131;
                double t83175 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t83176 = 1.0/(t83127*t83127);
                double t83177 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t83178 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t83179 = 1.0/(t83131*t83131);
                double t83180 = 1.0/(t83140*t83140);
                double t83181 = gcaa*t83119*3.0;
                double t83182 = gamma_aa[index]*t83121*t83124*6.0;
                double t83183 = gcaa*t83120*t83121*t83125*3.0;
                double t83184 = t83181+t83182+t83183;
                double t83185 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t83186 = 1.0/(t83137*t83137);
                double t83187 = gcaa*t83119*4.0;
                double t83188 = gamma_aa[index]*t83121*t83124*1.2E1;
                double t83189 = gcaa*t83120*t83121*t83125*1.2E1;
                double t83190 = gamma_aa[index]*t83120*t83122*t83123*4.0;
                double t83191 = t83190+t83187+t83188+t83189;
                double t83192 = gcaa*t83119*2.0;
                double t83193 = gamma_aa[index]*t83121*t83124*2.0;
                double t83194 = t83192+t83193;
                double t83195 = gamma_aa[index]*gcaa*t83178*(1.6E1/3.0);
                double t83196 = t83120*t83121*t83175*(1.6E1/3.0);
                double t83197 = t83195+t83196;
                double t83198 = gamma_aa[index]*gcaa*t83178*8.0;
                double t83199 = gamma_aa[index]*gcaa*t83120*t83121*t83177*8.0;
                double t83200 = t83120*t83121*t83175*1.6E1;
                double t83201 = t83200+t83198+t83199;
                double t83202 = gamma_aa[index]*gcaa*t83178*(3.2E1/3.0);
                double t83203 = gamma_aa[index]*gcaa*t83120*t83121*t83177*3.2E1;
                double t83204 = t83120*t83121*t83175*3.2E1;
                double t83205 = t83122*t83132*t83185*(3.2E1/3.0);
                double t83206 = t83202+t83203+t83204+t83205;
                double t83207 = t83160-t83159;
                double t83235 = t83143*t83207*t83146;
                double t83208 = t83160-t83235;
                double t83210 = 1.0/pow(rho_a[index],4.0/3.0);
                double t83211 = 1.0/pow(rho_a[index],5.0/3.0);
                double t83212 = 1.0/sqrt(t83102);
                double t83213 = 1.0/t83115;
                double t83214 = 1.0/(t83112*t83112);
                double t83215 = b4p*t83211*t83105*(2.0/3.0);
                double t83216 = b2p*c*t83210*(1.0/3.0);
                double t83217 = b1p*c*t83210*t83212*(1.0/6.0);
                double t83218 = b3p*c*t83210*t83103*(1.0/2.0);
                double t83219 = t83215+t83216+t83217+t83218;
                double t83220 = t83213*t83214*t83118*t83219;
                double t83221 = ccaa1*gcaa*t83171*t83119;
                double t83222 = ccaa4*gamma_aa[index]*t83120*t83122*t83123*t83172*4.0;
                double t83223 = ccaa2*gamma_aa[index]*t83121*t83124*t83173*2.0;
                double t83224 = ccaa3*gcaa*t83120*t83121*t83125*t83174*3.0;
                double t83236 = ccaa1*gamma_aa[index]*t83121*t83124*t83176;
                double t83237 = ccaa3*gamma_aa[index]*gcaa*t83120*t83121*t83125*t83184*t83179;
                double t83238 = ccaa4*t83122*t83123*t83132*t83191*t83186;
                double t83239 = ccaa2*t83120*t83121*t83124*t83180*t83194;
                double t83225 = t83221+t83222+t83223+t83224-t83236-t83237-t83238-t83239;
                double t83226 = 1.0/t83155;
                double t83227 = 1.0/(t83152*t83152);
                double t83228 = b4f*t83211*t83105*(2.0/3.0);
                double t83229 = b2f*c*t83210*(1.0/3.0);
                double t83230 = b1f*c*t83210*t83212*(1.0/6.0);
                double t83231 = b3f*c*t83210*t83103*(1.0/2.0);
                double t83232 = t83230+t83231+t83228+t83229;
                double t83233 = a1f*c*c0f*t83210*t83156*(2.0/3.0);
                double t83234 = a1p*c*c0p*t83210*t83116*(2.0/3.0);
                double t83240 = 1.0/(k*k);
                double t83241 = 1.0/kp;
                double t83242 = rho_a[index]*2.0;
                double t83243 = 1.0/(rho_a[index]*rho_a[index]);
                double t83244 = 1.0/pow(t83242,2.0/3.0);
                double t83245 = pow(rho_a[index],5.0/3.0);
                double t83246 = C_k*t83163*t83245;
                double t83247 = t83246-1.0;
                double t83248 = t83247*t83247;
                double t83249 = t83248*t83248;
                double t83250 = t83249*t83249;
                double t83251 = t83246+1.0;
                double t83252 = gamma_aa[index]*mu_*t83240*t83241*t83243*t83244*(1.0/4.0);
                double t83253 = t83252+1.0;
                double t83254 = 1.0/(t83253*t83253);
                double t83255 = X-1.0;
                double t83256 = 1.0/t83251;
                double t83257 = pow(rho_a[index],2.0/3.0);
                double t83258 = 1.0/(t83251*t83251);
                double t83259 = 1.0/pow(t83251,1.0E1);
                double t83260 = 1.0/pow(t83251,1.1E1);
                double t83261 = 1.0/(t83251*t83251*t83251);
                double t83262 = 1.0/(t83251*t83251*t83251*t83251);
                double t83263 = 1.0/(t83251*t83251*t83251*t83251*t83251);
                double t83264 = 1.0/(t83251*t83251*t83251*t83251*t83251*t83251);
                double t83265 = 1.0/(t83251*t83251*t83251*t83251*t83251*t83251*t83251);
                double t83266 = 1.0/(t83251*t83251*t83251*t83251*t83251*t83251*t83251*t83251);
                double t83267 = 1.0/(t83251*t83251*t83251*t83251*t83251*t83251*t83251*t83251*t83251);
                double t83268 = a_1*t83247*t83256;
                double t83269 = a_10*t83250*t83248*t83259;
                double t83270 = a_11*t83250*t83260*t83247*t83248;
                double t83271 = a_2*t83248*t83258;
                double t83272 = a_3*t83261*t83247*t83248;
                double t83273 = a_4*t83262*t83249;
                double t83274 = a_5*t83263*t83247*t83249;
                double t83275 = a_6*t83264*t83248*t83249;
                double t83276 = a_7*t83247*t83265*t83248*t83249;
                double t83277 = a_8*t83250*t83266;
                double t83278 = a_9*t83250*t83247*t83267;
                double t83279 = t83270+t83271+t83272+t83273+t83274+t83275+t83276+t83268+t83277+t83269+t83278+1.0;
                double t83280 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t83281 = 1.0/pow(t83242,5.0/3.0);
                v_rho_a_gamma_aa_[index] = -t83170*t83225*(t83160+t83143*t83146*(t83159-c0p*t83116*t83118*2.0))-t83162* \
                   t83163*(-t83220+t83234+t83143*t83146*(t83220+t83233-t83234-t83232*t83226*t83227*t83158))*(ccaa0+ccaa1* \
                   gamma_aa[index]*gcaa*t83171*t83119+ccaa2*t83120*t83121*t83124*t83173+ccaa4*t83122*t83123*t83132*t83172+ \
                   ccaa3*gamma_aa[index]*gcaa*t83120*t83121*t83125*t83174)*(1.0/8.0)-rho_a[index]*t83170*t83208*(ccaa1* \
                   gcaa*t83171*t83178*(-8.0/3.0)-ccaa2*gamma_aa[index]*t83121*t83173*t83175*(3.2E1/3.0)+ccaa1*gamma_aa[index]* \
                   t83121*t83175*t83176*8.0+ccaa2*t83120*t83121*t83180*t83175*t83194*(1.6E1/3.0)+ccaa4*t83122*t83132* \
                   t83191*t83185*t83186*(3.2E1/3.0)+ccaa4*t83122*t83123*t83132*t83186*(gcaa*t83178*(3.2E1/3.0)+gamma_aa[index]* \
                   t83121*t83175*6.4E1+gamma_aa[index]*t83120*t83122*t83185*(1.28E2/3.0)+gcaa*t83120*t83121*t83177*9.6E1) \
                   -ccaa1*gcaa*t83120*t83121*1.0/(t83127*t83127*t83127)*t83177*(1.6E1/3.0)+ccaa2*t83120*t83121*t83124* \
                   t83180*(gcaa*t83178*(1.6E1/3.0)+gamma_aa[index]*t83121*t83175*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t83120* \
                   t83122*t83172*t83185*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t83121*t83124*t83180*t83197*2.0-ccaa3*gcaa* \
                   t83120*t83121*t83174*t83177*2.4E1+ccaa4*gamma_aa[index]*t83120*t83122*t83123*t83206*t83186*4.0+ccaa3* \
                   gcaa*t83120*t83201*t83121*t83125*t83179*3.0-ccaa4*t83122*t83123*t83132*t83206*1.0/(t83137*t83137*t83137) \
                   *t83191*2.0-ccaa2*t83120*t83121*1.0/(t83140*t83140*t83140)*t83124*t83194*t83197*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t83120*t83121*t83125*t83179*(gcaa*t83178*8.0+gamma_aa[index]*t83121*t83175*3.2E1+gcaa*t83120* \
                   t83121*t83177*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t83120*t83121*t83184*t83177*t83179*8.0-ccaa3*gamma_aa[index]* \
                   gcaa*t83120*t83201*t83121*1.0/(t83131*t83131*t83131)*t83125*t83184*2.0)+rho_a[index]*t83170*t83225* \
                   (-t83220+t83234+t83143*t83146*(t83220+t83233-t83232*t83226*t83227*t83158-a1p*c*c0p*t83210*t83116*(2.0/ \
                   3.0)))-t83162*t83163*t83208*(ccaa1*gamma_aa[index]*gcaa*t83171*t83178*(8.0/3.0)+ccaa2*t83120*t83121* \
                   t83173*t83175*(1.6E1/3.0)-ccaa1*t83120*t83121*t83175*t83176*(8.0/3.0)+ccaa4*t83122*t83132*t83172*t83185* \
                   (3.2E1/3.0)-ccaa2*t83120*t83121*t83124*t83180*t83197-ccaa4*t83122*t83123*t83132*t83206*t83186+ccaa3* \
                   gamma_aa[index]*gcaa*t83120*t83121*t83174*t83177*8.0-ccaa3*gamma_aa[index]*gcaa*t83120*t83201*t83121* \
                   t83125*t83179)*(1.0/8.0)-gamma_aa[index]*t83162*t83225*t83163*t83208*t83165*(1.0/8.0)+kp*rho_a[index]* \
                   t83254*t83255*t83279*(mu_*t83240*t83241*t83243*t83281*(1.0/3.0)+mu_*t83240*t83241*t83244*t83280*(1.0/ \
                   2.0))-mu_*t83240*t83243*t83244*t83254*t83255*t83279*(1.0/4.0)-mu_*t83240*t83244*t83254*t83165*t83255* \
                   (C_k*a_1*t83163*t83256*t83257*(5.0/3.0)-C_k*a_1*t83163*t83247*t83257*t83258*(5.0/3.0)-C_k*a_2*t83261* \
                   t83163*t83248*t83257*(1.0E1/3.0)+C_k*a_2*t83163*t83247*t83257*t83258*(1.0E1/3.0)+C_k*a_3*t83261*t83163* \
                   t83248*t83257*5.0-C_k*a_4*t83163*t83263*t83257*t83249*(2.0E1/3.0)+C_k*a_5*t83163*t83263*t83257*t83249* \
                   (2.5E1/3.0)-C_k*a_8*t83250*t83163*t83257*t83267*(4.0E1/3.0)+C_k*a_9*t83250*t83163*t83257*t83267*1.5E1- \
                   C_k*a_10*t83250*t83260*t83163*t83248*t83257*(5.0E1/3.0)+C_k*a_11*t83250*t83260*t83163*t83248*t83257* \
                   (5.5E1/3.0)+C_k*a_10*t83250*t83163*t83247*t83257*t83259*(5.0E1/3.0)-C_k*a_3*t83163*t83262*t83247*t83248* \
                   t83257*5.0+C_k*a_4*t83163*t83262*t83247*t83248*t83257*(2.0E1/3.0)-C_k*a_5*t83163*t83264*t83247*t83257* \
                   t83249*(2.5E1/3.0)+C_k*a_6*t83163*t83264*t83247*t83257*t83249*1.0E1-C_k*a_6*t83163*t83265*t83248*t83257* \
                   t83249*1.0E1+C_k*a_7*t83163*t83265*t83248*t83257*t83249*(3.5E1/3.0)-C_k*a_9*t83250*t83163*t83247*t83257* \
                   t83259*1.5E1-C_k*a_11*t83250*1.0/pow(t83251,1.2E1)*t83163*t83247*t83248*t83257*(5.5E1/3.0)-C_k*a_7* \
                   t83163*t83247*t83248*t83257*t83266*t83249*(3.5E1/3.0)+C_k*a_8*t83163*t83247*t83248*t83257*t83266*t83249* \
                   (4.0E1/3.0))*(1.0/4.0)-mu_*t83240*t83244*1.0/(t83253*t83253*t83253)*t83165*t83255*t83279*(gamma_aa[index]* \
                   mu_*t83240*t83241*t83243*t83281*(1.0/3.0)+gamma_aa[index]*mu_*t83240*t83241*t83244*t83280*(1.0/2.0) \
                   )*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t79616 = rho_a[index]+rho_b[index];
                double t79617 = 1.0/pow(t79616,1.0/3.0);
                double t79618 = c*t79617;
                double t79619 = sqrt(t79618);
                double t79620 = b1p*t79619;
                double t79621 = pow(t79618,3.0/2.0);
                double t79622 = b3p*t79621;
                double t79623 = c*c;
                double t79624 = 1.0/pow(t79616,2.0/3.0);
                double t79625 = b4p*t79623*t79624;
                double t79626 = b2p*c*t79617;
                double t79627 = t79620+t79622+t79625+t79626;
                double t79628 = 1.0/pow(t79616,4.0/3.0);
                double t79629 = 1.0/c0p;
                double t79630 = 1.0/t79627;
                double t79631 = t79630*t79629*(1.0/2.0);
                double t79632 = t79631+1.0;
                double t79633 = a1p*c*t79617;
                double t79634 = t79633+1.0;
                double t79635 = rho_a[index]-rho_b[index];
                double t79636 = t79635*t79635;
                double t79637 = 1.0/t79616;
                double t79638 = t79635*t79637;
                double t79639 = two_13*2.0;
                double t79640 = t79639-2.0;
                double t79641 = 1.0/t79640;
                double t79642 = 1.0/c0f;
                double t79643 = b1f*t79619;
                double t79644 = b3f*t79621;
                double t79645 = b4f*t79623*t79624;
                double t79646 = b2f*c*t79617;
                double t79647 = t79643+t79644+t79645+t79646;
                double t79648 = 1.0/t79647;
                double t79649 = t79642*t79648*(1.0/2.0);
                double t79650 = t79649+1.0;
                double t79651 = log(t79650);
                double t79652 = a1f*c*t79617;
                double t79653 = t79652+1.0;
                double t79654 = log(t79632);
                double t79664 = c0f*t79651*t79653*2.0;
                double t79665 = c0p*t79634*t79654*2.0;
                double t79655 = t79664-t79665;
                double t79656 = t79638+1.0;
                double t79657 = pow(t79656,4.0/3.0);
                double t79658 = -t79638+1.0;
                double t79659 = pow(t79658,4.0/3.0);
                double t79660 = t79657+t79659-2.0;
                double t79661 = 1.0/(t79616*t79616);
                double t79692 = t79661*t79635;
                double t79662 = t79637-t79692;
                double t79663 = 1.0/(t79616*t79616*t79616*t79616);
                double t79666 = t79636*t79636;
                double t79667 = 1.0/pow(t79616,5.0/3.0);
                double t79668 = 1.0/sqrt(t79618);
                double t79669 = 1.0/t79632;
                double t79670 = 1.0/(t79627*t79627);
                double t79671 = b4p*t79623*t79667*(2.0/3.0);
                double t79672 = b2p*c*t79628*(1.0/3.0);
                double t79673 = b1p*c*t79628*t79668*(1.0/6.0);
                double t79674 = b3p*c*t79619*t79628*(1.0/2.0);
                double t79675 = t79671+t79672+t79673+t79674;
                double t79676 = t79634*t79670*t79675*t79669;
                double t79677 = 1.0/(t79616*t79616*t79616*t79616*t79616);
                double t79678 = 1.0/d2fz0;
                double t79679 = 1.0/Aa;
                double t79680 = b1a*t79619;
                double t79681 = b3a*t79621;
                double t79682 = b4a*t79623*t79624;
                double t79683 = b2a*c*t79617;
                double t79684 = t79680+t79681+t79682+t79683;
                double t79685 = 1.0/t79684;
                double t79686 = t79685*t79679*(1.0/2.0);
                double t79687 = t79686+1.0;
                double t79688 = log(t79687);
                double t79689 = a1a*c*t79617;
                double t79690 = t79689+1.0;
                double t79691 = pow(t79656,1.0/3.0);
                double t79693 = t79662*t79691*(4.0/3.0);
                double t79694 = pow(t79658,1.0/3.0);
                double t79695 = t79693-t79662*t79694*(4.0/3.0);
                double t79696 = t79663*t79666;
                double t79697 = t79696-1.0;
                double t79698 = 1.0/pow(rho_a[index],1.0/3.0);
                double t79699 = c*t79698;
                double t79700 = sqrt(t79699);
                double t79701 = b1f*t79700;
                double t79702 = pow(t79699,3.0/2.0);
                double t79703 = b3f*t79702;
                double t79704 = 1.0/pow(rho_a[index],2.0/3.0);
                double t79705 = b4f*t79623*t79704;
                double t79706 = b2f*c*t79698;
                double t79707 = t79701+t79703+t79705+t79706;
                double t79708 = 1.0/pow(rho_a[index],4.0/3.0);
                double t79709 = b1p*t79700;
                double t79710 = b3p*t79702;
                double t79711 = b4p*t79623*t79704;
                double t79712 = b2p*c*t79698;
                double t79713 = t79710+t79711+t79712+t79709;
                double t79714 = 1.0/pow(rho_a[index],5.0/3.0);
                double t79715 = 1.0/sqrt(t79699);
                double t79716 = 1.0/t79707;
                double t79717 = t79642*t79716*(1.0/2.0);
                double t79718 = t79717+1.0;
                double t79719 = 1.0/t79713;
                double t79720 = t79629*t79719*(1.0/2.0);
                double t79721 = t79720+1.0;
                double t79722 = a1p*c*t79698;
                double t79723 = t79722+1.0;
                double t79724 = 1.0/t79721;
                double t79725 = 1.0/(t79713*t79713);
                double t79726 = b4p*t79623*t79714*(2.0/3.0);
                double t79727 = b2p*c*t79708*(1.0/3.0);
                double t79728 = b1p*c*t79715*t79708*(1.0/6.0);
                double t79729 = b3p*c*t79700*t79708*(1.0/2.0);
                double t79730 = t79726+t79727+t79728+t79729;
                double t79731 = t79730*t79723*t79724*t79725;
                double t79732 = log(t79721);
                double t79733 = pow(2.0,1.0/3.0);
                double t79734 = t79733*2.0;
                double t79735 = t79734-2.0;
                double t79736 = log(t79718);
                double t79737 = a1f*c*t79698;
                double t79738 = t79737+1.0;
                double t79739 = 1.0/pow(rho_b[index],8.0/3.0);
                double t79740 = 1.0/pow(rho_a[index],8.0/3.0);
                double t79741 = gamma_aa[index]*t79740*(1.0/2.0);
                double t79742 = gamma_bb[index]*t79739*(1.0/2.0);
                double t79743 = t79741+t79742;
                double t79744 = gcab*t79743;
                double t79745 = t79744+1.0;
                double t79746 = gcab*gcab;
                double t79747 = t79743*t79743;
                double t79748 = t79746*t79746;
                double t79749 = t79747*t79747;
                double t79750 = t79746*t79747;
                double t79751 = gcab*t79743*2.0;
                double t79752 = t79750+t79751+1.0;
                double t79753 = t79746*t79747*3.0;
                double t79754 = gcab*t79743*t79746*t79747;
                double t79755 = gcab*t79743*3.0;
                double t79756 = t79753+t79754+t79755+1.0;
                double t79757 = t79746*t79747*6.0;
                double t79758 = gcab*t79743*t79746*t79747*4.0;
                double t79759 = t79748*t79749;
                double t79760 = gcab*t79743*4.0;
                double t79761 = t79760+t79757+t79758+t79759+1.0;
                double t79762 = c0f*t79736*t79738*2.0;
                double t79764 = c0p*t79723*t79732*2.0;
                double t79763 = t79762-t79764;
                double t79765 = 1.0/pow(rho_b[index],1.0/3.0);
                double t79766 = c*t79765;
                double t79767 = sqrt(t79766);
                double t79768 = pow(t79766,3.0/2.0);
                double t79769 = 1.0/pow(rho_b[index],2.0/3.0);
                double t79770 = b1p*t79767;
                double t79771 = b3p*t79768;
                double t79772 = b4p*t79623*t79769;
                double t79773 = b2p*c*t79765;
                double t79774 = t79770+t79771+t79772+t79773;
                double t79775 = 1.0/t79774;
                double t79776 = t79629*t79775*(1.0/2.0);
                double t79777 = t79776+1.0;
                double t79778 = log(t79777);
                double t79779 = a1p*c*t79765;
                double t79780 = t79779+1.0;
                double t79781 = c0p*t79780*t79778*2.0;
                double t79782 = t79641*t79660*t79663*t79655*t79666;
                double t79783 = Aa*t79641*t79660*t79690*t79678*t79688*t79697*2.0;
                double t79784 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t79785 = 1.0/(t79756*t79756);
                double t79786 = 1.0/(t79761*t79761);
                double t79787 = gcab*t79739*2.0;
                double t79788 = t79743*t79746*t79739*6.0;
                double t79789 = gcab*t79746*t79747*t79739*6.0;
                double t79790 = t79743*t79747*t79739*t79748*2.0;
                double t79791 = t79790+t79787+t79788+t79789;
                double t79792 = 1.0/(t79752*t79752);
                double t79793 = gamma_aa[index]*gcab*t79784*(8.0/3.0);
                double t79794 = gamma_aa[index]*t79743*t79746*t79784*(8.0/3.0);
                double t79795 = t79793+t79794;
                double t79796 = gcab*t79739;
                double t79797 = t79743*t79746*t79739;
                double t79798 = t79796+t79797;
                double t79799 = gamma_aa[index]*gcab*t79784*(1.6E1/3.0);
                double t79800 = gamma_aa[index]*gcab*t79746*t79747*t79784*1.6E1;
                double t79801 = gamma_aa[index]*t79743*t79747*t79748*t79784*(1.6E1/3.0);
                double t79802 = gamma_aa[index]*t79743*t79746*t79784*1.6E1;
                double t79803 = t79800+t79801+t79802+t79799;
                double t79804 = 1.0/(t79745*t79745);
                double t79805 = 1.0/t79752;
                double t79806 = gcab*t79739*(3.0/2.0);
                double t79807 = t79743*t79746*t79739*3.0;
                double t79808 = gcab*t79746*t79747*t79739*(3.0/2.0);
                double t79809 = t79806+t79807+t79808;
                double t79810 = gamma_aa[index]*gcab*t79784*4.0;
                double t79811 = gamma_aa[index]*gcab*t79746*t79747*t79784*4.0;
                double t79812 = gamma_aa[index]*t79743*t79746*t79784*8.0;
                double t79813 = t79810+t79811+t79812;
                double t79814 = 1.0/t79756;
                double t79815 = 1.0/t79761;
                v_rho_a_gamma_bb_[index] = -(t79665+t79782+t79783+t79616*(t79676-t79641*t79660*t79663*t79666*(t79676- \
                   (t79653*1.0/(t79647*t79647)*(b2f*c*t79628*(1.0/3.0)+b4f*t79623*t79667*(2.0/3.0)+b1f*c*t79628*t79668* \
                   (1.0/6.0)+b3f*c*t79619*t79628*(1.0/2.0)))/t79650+a1f*c*c0f*t79651*t79628*(2.0/3.0)-a1p*c*c0p*t79654* \
                   t79628*(2.0/3.0))-a1p*c*c0p*t79654*t79628*(2.0/3.0)-t79641*t79660*t79655*t79666*t79677*4.0+t79641* \
                   t79663*t79655*t79666*t79695+t79641*t79660*t79635*t79636*t79663*t79655*4.0-Aa*t79641*t79660*t79690* \
                   t79678*t79688*(t79666*t79677*4.0-t79635*t79636*t79663*4.0)*2.0+Aa*t79641*t79690*t79695*t79678*t79688* \
                   t79697*2.0+(t79641*t79660*t79690*1.0/(t79684*t79684)*t79678*t79697*(b2a*c*t79628*(1.0/3.0)+b4a*t79623* \
                   t79667*(2.0/3.0)+b1a*c*t79628*t79668*(1.0/6.0)+b3a*c*t79619*t79628*(1.0/2.0)))/t79687-Aa*a1a*c*t79641* \
                   t79660*t79628*t79678*t79688*t79697*(2.0/3.0))+rho_a[index]*(-t79731+t79641*t79735*(t79731-(1.0/(t79707* \
                   t79707)*t79738*(b2f*c*t79708*(1.0/3.0)+b4f*t79623*t79714*(2.0/3.0)+b1f*c*t79715*t79708*(1.0/6.0)+b3f* \
                   c*t79700*t79708*(1.0/2.0)))/t79718+a1f*c*c0f*t79708*t79736*(2.0/3.0)-a1p*c*c0p*t79732*t79708*(2.0/ \
                   3.0))+a1p*c*c0p*t79732*t79708*(2.0/3.0))-c0p*t79723*t79732*2.0-t79641*t79735*t79763)*((ccab1*gcab* \
                   t79739*(1.0/2.0))/t79745-ccab1*t79804*t79743*t79746*t79739*(1.0/2.0)+ccab2*t79805*t79743*t79746*t79739- \
                   ccab2*t79746*t79747*t79792*t79798-ccab4*t79791*t79748*t79749*t79786+ccab4*t79743*t79815*t79747*t79739* \
                   t79748*2.0+ccab3*gcab*t79814*t79746*t79747*t79739*(3.0/2.0)-ccab3*gcab*t79743*t79746*t79809*t79747* \
                   t79785)+(rho_a[index]*(t79764+t79641*t79735*t79763)+rho_b[index]*(t79781-t79641*t79735*(t79781-c0f* \
                   log((t79642*(1.0/2.0))/(b1f*t79767+b3f*t79768+b2f*c*t79765+b4f*t79623*t79769)+1.0)*(a1f*c*t79765+1.0) \
                   *2.0))-t79616*(t79665+t79782+t79783))*(ccab4*t79748*t79749*t79786*(gamma_aa[index]*t79746*t79739*t79784* \
                   8.0+gamma_aa[index]*t79747*t79739*t79748*t79784*8.0+gamma_aa[index]*gcab*t79743*t79746*t79739*t79784* \
                   1.6E1)+ccab2*t79743*t79746*t79792*t79739*t79795-ccab4*t79803*1.0/(t79761*t79761*t79761)*t79791*t79748* \
                   t79749*2.0-ccab2*1.0/(t79752*t79752*t79752)*t79746*t79747*t79795*t79798*2.0+ccab1*gamma_aa[index]* \
                   t79804*t79746*t79739*t79784*(4.0/3.0)-ccab2*gamma_aa[index]*t79805*t79746*t79739*t79784*(4.0/3.0)- \
                   ccab4*gamma_aa[index]*t79815*t79747*t79739*t79748*t79784*8.0+ccab2*gamma_aa[index]*t79743*t79746*t79792* \
                   t79784*t79798*(8.0/3.0)+ccab2*gamma_aa[index]*t79747*t79792*t79739*t79748*t79784*(4.0/3.0)+ccab3*gcab* \
                   t79813*t79746*t79747*t79739*t79785*(3.0/2.0)+ccab4*t79803*t79743*t79747*t79739*t79748*t79786*2.0+ccab3* \
                   gcab*t79743*t79746*t79747*t79785*(gamma_aa[index]*t79746*t79739*t79784*4.0+gamma_aa[index]*gcab*t79743* \
                   t79746*t79739*t79784*4.0)-ccab1*gamma_aa[index]*gcab*t79743*1.0/(t79745*t79745*t79745)*t79746*t79739* \
                   t79784*(4.0/3.0)-ccab3*gcab*t79813*t79743*t79746*t79809*t79747*1.0/(t79756*t79756*t79756)*2.0-ccab3* \
                   gamma_aa[index]*gcab*t79814*t79743*t79746*t79739*t79784*4.0+ccab3*gamma_aa[index]*gcab*t79746*t79809* \
                   t79747*t79784*t79785*4.0+ccab4*gamma_aa[index]*t79743*t79791*t79747*t79748*t79784*t79786*(1.6E1/3.0) \
                   );
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t79817 = rho_a[index]+rho_b[index];
                double t79818 = 1.0/pow(t79817,1.0/3.0);
                double t79819 = c*t79818;
                double t79820 = sqrt(t79819);
                double t79821 = b1p*t79820;
                double t79822 = pow(t79819,3.0/2.0);
                double t79823 = b3p*t79822;
                double t79824 = c*c;
                double t79825 = 1.0/pow(t79817,2.0/3.0);
                double t79826 = b4p*t79824*t79825;
                double t79827 = b2p*c*t79818;
                double t79828 = t79821+t79823+t79826+t79827;
                double t79829 = 1.0/pow(t79817,4.0/3.0);
                double t79830 = 1.0/c0p;
                double t79831 = 1.0/t79828;
                double t79832 = t79830*t79831*(1.0/2.0);
                double t79833 = t79832+1.0;
                double t79834 = a1p*c*t79818;
                double t79835 = t79834+1.0;
                double t79836 = rho_a[index]-rho_b[index];
                double t79837 = t79836*t79836;
                double t79838 = 1.0/t79817;
                double t79839 = t79836*t79838;
                double t79840 = two_13*2.0;
                double t79841 = t79840-2.0;
                double t79842 = 1.0/t79841;
                double t79843 = 1.0/c0f;
                double t79844 = b1f*t79820;
                double t79845 = b3f*t79822;
                double t79846 = b4f*t79824*t79825;
                double t79847 = b2f*c*t79818;
                double t79848 = t79844+t79845+t79846+t79847;
                double t79849 = 1.0/t79848;
                double t79850 = t79843*t79849*(1.0/2.0);
                double t79851 = t79850+1.0;
                double t79852 = log(t79851);
                double t79853 = a1f*c*t79818;
                double t79854 = t79853+1.0;
                double t79855 = log(t79833);
                double t79866 = c0f*t79852*t79854*2.0;
                double t79867 = c0p*t79835*t79855*2.0;
                double t79856 = t79866-t79867;
                double t79857 = t79839+1.0;
                double t79858 = pow(t79857,4.0/3.0);
                double t79859 = -t79839+1.0;
                double t79860 = pow(t79859,4.0/3.0);
                double t79861 = t79860+t79858-2.0;
                double t79862 = 1.0/(t79817*t79817);
                double t79863 = t79862*t79836;
                double t79864 = t79863+t79838;
                double t79865 = 1.0/(t79817*t79817*t79817*t79817);
                double t79868 = t79837*t79837;
                double t79869 = 1.0/pow(t79817,5.0/3.0);
                double t79870 = 1.0/sqrt(t79819);
                double t79871 = 1.0/t79833;
                double t79872 = 1.0/(t79828*t79828);
                double t79873 = b4p*t79824*t79869*(2.0/3.0);
                double t79874 = b2p*c*t79829*(1.0/3.0);
                double t79875 = b1p*c*t79870*t79829*(1.0/6.0);
                double t79876 = b3p*c*t79820*t79829*(1.0/2.0);
                double t79877 = t79873+t79874+t79875+t79876;
                double t79878 = 1.0/(t79817*t79817*t79817*t79817*t79817);
                double t79879 = 1.0/d2fz0;
                double t79880 = 1.0/Aa;
                double t79881 = b1a*t79820;
                double t79882 = b3a*t79822;
                double t79883 = b4a*t79824*t79825;
                double t79884 = b2a*c*t79818;
                double t79885 = t79881+t79882+t79883+t79884;
                double t79886 = 1.0/t79885;
                double t79887 = t79880*t79886*(1.0/2.0);
                double t79888 = t79887+1.0;
                double t79889 = log(t79888);
                double t79890 = a1a*c*t79818;
                double t79891 = t79890+1.0;
                double t79892 = pow(t79857,1.0/3.0);
                double t79893 = t79864*t79892*(4.0/3.0);
                double t79894 = pow(t79859,1.0/3.0);
                double t79895 = t79893-t79864*t79894*(4.0/3.0);
                double t79896 = t79865*t79868;
                double t79897 = t79896-1.0;
                double t79898 = 1.0/pow(rho_b[index],1.0/3.0);
                double t79899 = c*t79898;
                double t79900 = sqrt(t79899);
                double t79901 = b1f*t79900;
                double t79902 = pow(t79899,3.0/2.0);
                double t79903 = b3f*t79902;
                double t79904 = 1.0/pow(rho_b[index],2.0/3.0);
                double t79905 = b4f*t79904*t79824;
                double t79906 = b2f*c*t79898;
                double t79907 = t79901+t79903+t79905+t79906;
                double t79908 = 1.0/pow(rho_b[index],4.0/3.0);
                double t79909 = b1p*t79900;
                double t79910 = b3p*t79902;
                double t79911 = b4p*t79904*t79824;
                double t79912 = b2p*c*t79898;
                double t79913 = t79910+t79911+t79912+t79909;
                double t79914 = 1.0/pow(rho_b[index],5.0/3.0);
                double t79915 = 1.0/sqrt(t79899);
                double t79916 = 1.0/t79907;
                double t79917 = t79843*t79916*(1.0/2.0);
                double t79918 = t79917+1.0;
                double t79919 = 1.0/t79913;
                double t79920 = t79830*t79919*(1.0/2.0);
                double t79921 = t79920+1.0;
                double t79922 = a1p*c*t79898;
                double t79923 = t79922+1.0;
                double t79924 = 1.0/t79921;
                double t79925 = 1.0/(t79913*t79913);
                double t79926 = b4p*t79824*t79914*(2.0/3.0);
                double t79927 = b2p*c*t79908*(1.0/3.0);
                double t79928 = b1p*c*t79915*t79908*(1.0/6.0);
                double t79929 = b3p*c*t79900*t79908*(1.0/2.0);
                double t79930 = t79926+t79927+t79928+t79929;
                double t79931 = t79930*t79923*t79924*t79925;
                double t79932 = log(t79921);
                double t79933 = pow(2.0,1.0/3.0);
                double t79934 = t79933*2.0;
                double t79935 = t79934-2.0;
                double t79936 = log(t79918);
                double t79937 = a1f*c*t79898;
                double t79938 = t79937+1.0;
                double t79939 = 1.0/pow(rho_a[index],8.0/3.0);
                double t79940 = gamma_aa[index]*t79939*(1.0/2.0);
                double t79941 = 1.0/pow(rho_b[index],8.0/3.0);
                double t79942 = gamma_bb[index]*t79941*(1.0/2.0);
                double t79943 = t79940+t79942;
                double t79944 = gcab*t79943;
                double t79945 = t79944+1.0;
                double t79946 = gcab*gcab;
                double t79947 = t79943*t79943;
                double t79948 = t79946*t79946;
                double t79949 = t79947*t79947;
                double t79950 = t79946*t79947;
                double t79951 = gcab*t79943*2.0;
                double t79952 = t79950+t79951+1.0;
                double t79953 = t79946*t79947*3.0;
                double t79954 = gcab*t79943*t79946*t79947;
                double t79955 = gcab*t79943*3.0;
                double t79956 = t79953+t79954+t79955+1.0;
                double t79957 = t79946*t79947*6.0;
                double t79958 = gcab*t79943*t79946*t79947*4.0;
                double t79959 = t79948*t79949;
                double t79960 = gcab*t79943*4.0;
                double t79961 = t79960+t79957+t79958+t79959+1.0;
                double t79962 = a1p*c*c0p*t79855*t79829*(2.0/3.0);
                double t79963 = 1.0/pow(rho_a[index],1.0/3.0);
                double t79964 = c*t79963;
                double t79965 = sqrt(t79964);
                double t79966 = pow(t79964,3.0/2.0);
                double t79967 = 1.0/pow(rho_a[index],2.0/3.0);
                double t79968 = b1p*t79965;
                double t79969 = b3p*t79966;
                double t79970 = b4p*t79824*t79967;
                double t79971 = b2p*c*t79963;
                double t79972 = t79970+t79971+t79968+t79969;
                double t79973 = 1.0/t79972;
                double t79974 = t79830*t79973*(1.0/2.0);
                double t79975 = t79974+1.0;
                double t79976 = log(t79975);
                double t79977 = a1p*c*t79963;
                double t79978 = t79977+1.0;
                double t79979 = c0p*t79976*t79978*2.0;
                double t79980 = c0f*t79936*t79938*2.0;
                double t79982 = c0p*t79923*t79932*2.0;
                double t79981 = t79980-t79982;
                double t79983 = t79842*t79861*t79856*t79865*t79868;
                double t79984 = Aa*t79842*t79861*t79891*t79879*t79897*t79889*2.0;
                double t79985 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t79986 = 1.0/(t79956*t79956);
                double t79987 = 1.0/(t79961*t79961);
                double t79988 = gcab*t79939*2.0;
                double t79989 = t79943*t79946*t79939*6.0;
                double t79990 = gcab*t79946*t79947*t79939*6.0;
                double t79991 = t79943*t79947*t79939*t79948*2.0;
                double t79992 = t79990+t79991+t79988+t79989;
                double t79993 = 1.0/(t79952*t79952);
                double t79994 = gamma_bb[index]*gcab*t79985*(8.0/3.0);
                double t79995 = gamma_bb[index]*t79943*t79946*t79985*(8.0/3.0);
                double t79996 = t79994+t79995;
                double t79997 = gcab*t79939;
                double t79998 = t79943*t79946*t79939;
                double t79999 = t79997+t79998;
                double t80000 = gamma_bb[index]*gcab*t79985*(1.6E1/3.0);
                double t80001 = gamma_bb[index]*gcab*t79946*t79947*t79985*1.6E1;
                double t80002 = gamma_bb[index]*t79943*t79947*t79948*t79985*(1.6E1/3.0);
                double t80003 = gamma_bb[index]*t79943*t79946*t79985*1.6E1;
                double t80004 = t80000+t80001+t80002+t80003;
                double t80005 = 1.0/(t79945*t79945);
                double t80006 = 1.0/t79952;
                double t80007 = gcab*t79939*(3.0/2.0);
                double t80008 = t79943*t79946*t79939*3.0;
                double t80009 = gcab*t79946*t79947*t79939*(3.0/2.0);
                double t80010 = t80007+t80008+t80009;
                double t80011 = gamma_bb[index]*gcab*t79985*4.0;
                double t80012 = gamma_bb[index]*gcab*t79946*t79947*t79985*4.0;
                double t80013 = gamma_bb[index]*t79943*t79946*t79985*8.0;
                double t80014 = t80011+t80012+t80013;
                double t80015 = 1.0/t79956;
                double t80016 = 1.0/t79961;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t79982+t79842*t79935*t79981)+rho_a[index]*(t79979-t79842* \
                   t79935*(t79979-c0f*log((t79843*(1.0/2.0))/(b1f*t79965+b3f*t79966+b2f*c*t79963+b4f*t79824*t79967)+1.0) \
                   *(a1f*c*t79963+1.0)*2.0))-t79817*(t79983+t79867+t79984))*(ccab4*t79948*t79949*t79987*(gamma_bb[index]* \
                   t79946*t79939*t79985*8.0+gamma_bb[index]*t79947*t79939*t79948*t79985*8.0+gamma_bb[index]*gcab*t79943* \
                   t79946*t79939*t79985*1.6E1)+ccab2*t79943*t79946*t79939*t79993*t79996-ccab2*1.0/(t79952*t79952*t79952) \
                   *t79946*t79947*t79996*t79999*2.0-ccab4*1.0/(t79961*t79961*t79961)*t79992*t79948*t79949*t80004*2.0+ \
                   ccab1*gamma_bb[index]*t79946*t79939*t79985*t80005*(4.0/3.0)-ccab2*gamma_bb[index]*t79946*t79939*t79985* \
                   t80006*(4.0/3.0)+ccab2*gamma_bb[index]*t79943*t79946*t79993*t79985*t79999*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   t79947*t79939*t79948*t79993*t79985*(4.0/3.0)-ccab4*gamma_bb[index]*t79947*t79939*t79948*t79985*t80016* \
                   8.0+ccab3*gcab*t79946*t79947*t79939*t79986*t80014*(3.0/2.0)+ccab4*t79943*t79947*t79939*t79948*t79987* \
                   t80004*2.0+ccab3*gcab*t79943*t79946*t79947*t79986*(gamma_bb[index]*t79946*t79939*t79985*4.0+gamma_bb[index]* \
                   gcab*t79943*t79946*t79939*t79985*4.0)-ccab1*gamma_bb[index]*gcab*t79943*1.0/(t79945*t79945*t79945) \
                   *t79946*t79939*t79985*(4.0/3.0)-ccab3*gcab*t79943*t79946*t79947*1.0/(t79956*t79956*t79956)*t80010* \
                   t80014*2.0-ccab3*gamma_bb[index]*gcab*t79943*t79946*t79939*t79985*t80015*4.0+ccab3*gamma_bb[index]* \
                   gcab*t79946*t79947*t79985*t79986*t80010*4.0+ccab4*gamma_bb[index]*t79943*t79947*t79992*t79948*t79985* \
                   t79987*(1.6E1/3.0))-(t79983+t79867+t79984+rho_b[index]*(-t79931+t79842*t79935*(t79931-(1.0/(t79907* \
                   t79907)*t79938*(b2f*c*t79908*(1.0/3.0)+b4f*t79824*t79914*(2.0/3.0)+b1f*c*t79915*t79908*(1.0/6.0)+b3f* \
                   c*t79900*t79908*(1.0/2.0)))/t79918+a1f*c*c0f*t79908*t79936*(2.0/3.0)-a1p*c*c0p*t79932*t79908*(2.0/ \
                   3.0))+a1p*c*c0p*t79932*t79908*(2.0/3.0))-t79817*(t79962-t79835*t79871*t79872*t79877+t79842*t79861* \
                   t79856*t79868*t79878*4.0+t79842*t79856*t79865*t79868*t79895-t79842*t79861*t79865*t79868*(t79962-t79835* \
                   t79871*t79872*t79877+(t79854*1.0/(t79848*t79848)*(b2f*c*t79829*(1.0/3.0)+b4f*t79824*t79869*(2.0/3.0) \
                   +b1f*c*t79870*t79829*(1.0/6.0)+b3f*c*t79820*t79829*(1.0/2.0)))/t79851-a1f*c*c0f*t79852*t79829*(2.0/ \
                   3.0))+t79842*t79861*t79836*t79837*t79856*t79865*4.0+Aa*t79842*t79861*t79891*t79879*t79889*(t79868* \
                   t79878*4.0+t79836*t79837*t79865*4.0)*2.0+Aa*t79842*t79891*t79895*t79879*t79897*t79889*2.0-(t79842* \
                   t79861*t79891*1.0/(t79885*t79885)*t79879*t79897*(b2a*c*t79829*(1.0/3.0)+b4a*t79824*t79869*(2.0/3.0) \
                   +b1a*c*t79870*t79829*(1.0/6.0)+b3a*c*t79820*t79829*(1.0/2.0)))/t79888+Aa*a1a*c*t79842*t79861*t79829* \
                   t79879*t79897*t79889*(2.0/3.0))-c0p*t79923*t79932*2.0-t79842*t79935*t79981)*((ccab1*gcab*t79939*(1.0/ \
                   2.0))/t79945-ccab2*t79946*t79947*t79993*t79999-ccab4*t79992*t79948*t79949*t79987-ccab1*t79943*t79946* \
                   t79939*t80005*(1.0/2.0)+ccab2*t79943*t79946*t79939*t80006+ccab4*t79943*t79947*t79939*t79948*t80016* \
                   2.0+ccab3*gcab*t79946*t79947*t79939*t80015*(3.0/2.0)-ccab3*gcab*t79943*t79946*t79947*t79986*t80010) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80019 = 1.0/(k*k);
                double t80020 = 1.0/kp;
                double t80021 = rho_b[index]*2.0;
                double t80022 = 1.0/(rho_b[index]*rho_b[index]);
                double t80023 = 1.0/pow(t80021,2.0/3.0);
                double t80024 = pow(rho_b[index],5.0/3.0);
                double t80025 = 1.0/tau_b[index];
                double t80026 = C_k*t80024*t80025;
                double t80027 = t80026-1.0;
                double t80028 = t80027*t80027;
                double t80029 = t80028*t80028;
                double t80030 = t80029*t80029;
                double t80031 = t80026+1.0;
                double t80032 = gamma_bb[index]*mu_*t80020*t80022*t80023*t80019*(1.0/4.0);
                double t80033 = t80032+1.0;
                double t80034 = 1.0/(t80033*t80033);
                double t80035 = 1.0/t80031;
                double t80036 = a_1*t80035*t80027;
                double t80037 = 1.0/pow(t80031,1.0E1);
                double t80038 = a_10*t80030*t80028*t80037;
                double t80039 = 1.0/pow(t80031,1.1E1);
                double t80040 = a_11*t80030*t80027*t80028*t80039;
                double t80041 = 1.0/(t80031*t80031);
                double t80042 = a_2*t80041*t80028;
                double t80043 = 1.0/(t80031*t80031*t80031);
                double t80044 = a_3*t80043*t80027*t80028;
                double t80045 = 1.0/(t80031*t80031*t80031*t80031);
                double t80046 = a_4*t80045*t80029;
                double t80047 = 1.0/(t80031*t80031*t80031*t80031*t80031);
                double t80048 = a_5*t80027*t80029*t80047;
                double t80049 = 1.0/(t80031*t80031*t80031*t80031*t80031*t80031);
                double t80050 = a_6*t80028*t80029*t80049;
                double t80051 = 1.0/(t80031*t80031*t80031*t80031*t80031*t80031*t80031);
                double t80052 = a_7*t80051*t80027*t80028*t80029;
                double t80053 = 1.0/(t80031*t80031*t80031*t80031*t80031*t80031*t80031*t80031);
                double t80054 = a_8*t80030*t80053;
                double t80055 = 1.0/(t80031*t80031*t80031*t80031*t80031*t80031*t80031*t80031*t80031);
                double t80056 = a_9*t80030*t80027*t80055;
                double t80057 = t80040+t80050+t80042+t80052+t80044+t80036+t80054+t80046+t80038+t80056+t80048+1.0;
                double t80058 = pow(rho_b[index],2.0/3.0);
                double t80059 = 1.0/rho_b[index];
                double t80060 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t80061 = 1.0/pow(t80021,5.0/3.0);
                double t80062 = rho_a[index]+rho_b[index];
                double t80063 = 1.0/pow(t80062,1.0/3.0);
                double t80064 = c*t80063;
                double t80065 = sqrt(t80064);
                double t80066 = b1p*t80065;
                double t80067 = pow(t80064,3.0/2.0);
                double t80068 = b3p*t80067;
                double t80069 = c*c;
                double t80070 = 1.0/pow(t80062,2.0/3.0);
                double t80071 = b4p*t80070*t80069;
                double t80072 = b2p*c*t80063;
                double t80073 = t80071+t80072+t80066+t80068;
                double t80074 = 1.0/pow(t80062,4.0/3.0);
                double t80075 = 1.0/c0p;
                double t80076 = 1.0/t80073;
                double t80077 = t80075*t80076*(1.0/2.0);
                double t80078 = t80077+1.0;
                double t80079 = a1p*c*t80063;
                double t80080 = t80079+1.0;
                double t80081 = rho_a[index]-rho_b[index];
                double t80082 = t80081*t80081;
                double t80083 = 1.0/t80062;
                double t80084 = t80081*t80083;
                double t80085 = two_13*2.0;
                double t80086 = t80085-2.0;
                double t80087 = 1.0/t80086;
                double t80088 = 1.0/c0f;
                double t80089 = b1f*t80065;
                double t80090 = b3f*t80067;
                double t80091 = b4f*t80070*t80069;
                double t80092 = b2f*c*t80063;
                double t80093 = t80090+t80091+t80092+t80089;
                double t80094 = 1.0/t80093;
                double t80095 = t80094*t80088*(1.0/2.0);
                double t80096 = t80095+1.0;
                double t80097 = log(t80096);
                double t80098 = a1f*c*t80063;
                double t80099 = t80098+1.0;
                double t80100 = log(t80078);
                double t80111 = c0f*t80097*t80099*2.0;
                double t80112 = c0p*t80100*t80080*2.0;
                double t80101 = t80111-t80112;
                double t80102 = t80084+1.0;
                double t80103 = pow(t80102,4.0/3.0);
                double t80104 = -t80084+1.0;
                double t80105 = pow(t80104,4.0/3.0);
                double t80106 = t80103+t80105-2.0;
                double t80107 = 1.0/(t80062*t80062);
                double t80108 = t80107*t80081;
                double t80109 = t80108+t80083;
                double t80110 = 1.0/(t80062*t80062*t80062*t80062);
                double t80113 = t80082*t80082;
                double t80114 = 1.0/pow(t80062,5.0/3.0);
                double t80115 = 1.0/sqrt(t80064);
                double t80116 = 1.0/t80078;
                double t80117 = 1.0/(t80073*t80073);
                double t80118 = b4p*t80114*t80069*(2.0/3.0);
                double t80119 = b2p*c*t80074*(1.0/3.0);
                double t80120 = b1p*c*t80115*t80074*(1.0/6.0);
                double t80121 = b3p*c*t80065*t80074*(1.0/2.0);
                double t80122 = t80120+t80121+t80118+t80119;
                double t80123 = 1.0/(t80062*t80062*t80062*t80062*t80062);
                double t80124 = 1.0/d2fz0;
                double t80125 = 1.0/Aa;
                double t80126 = b1a*t80065;
                double t80127 = b3a*t80067;
                double t80128 = b4a*t80070*t80069;
                double t80129 = b2a*c*t80063;
                double t80130 = t80126+t80127+t80128+t80129;
                double t80131 = 1.0/t80130;
                double t80132 = t80131*t80125*(1.0/2.0);
                double t80133 = t80132+1.0;
                double t80134 = log(t80133);
                double t80135 = a1a*c*t80063;
                double t80136 = t80135+1.0;
                double t80137 = pow(t80102,1.0/3.0);
                double t80138 = t80109*t80137*(4.0/3.0);
                double t80139 = pow(t80104,1.0/3.0);
                double t80140 = t80138-t80109*t80139*(4.0/3.0);
                double t80141 = t80110*t80113;
                double t80142 = t80141-1.0;
                double t80143 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80144 = c*t80143;
                double t80145 = sqrt(t80144);
                double t80146 = b1f*t80145;
                double t80147 = pow(t80144,3.0/2.0);
                double t80148 = b3f*t80147;
                double t80149 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80150 = b4f*t80149*t80069;
                double t80151 = b2f*c*t80143;
                double t80152 = t80150+t80151+t80146+t80148;
                double t80153 = 1.0/pow(rho_b[index],4.0/3.0);
                double t80154 = b1p*t80145;
                double t80155 = b3p*t80147;
                double t80156 = b4p*t80149*t80069;
                double t80157 = b2p*c*t80143;
                double t80158 = t80154+t80155+t80156+t80157;
                double t80159 = 1.0/pow(rho_b[index],5.0/3.0);
                double t80160 = 1.0/sqrt(t80144);
                double t80161 = 1.0/t80152;
                double t80162 = t80161*t80088*(1.0/2.0);
                double t80163 = t80162+1.0;
                double t80164 = 1.0/t80158;
                double t80165 = t80164*t80075*(1.0/2.0);
                double t80166 = t80165+1.0;
                double t80167 = a1p*c*t80143;
                double t80168 = t80167+1.0;
                double t80169 = 1.0/t80166;
                double t80170 = 1.0/(t80158*t80158);
                double t80171 = b4p*t80069*t80159*(2.0/3.0);
                double t80172 = b2p*c*t80153*(1.0/3.0);
                double t80173 = b1p*c*t80160*t80153*(1.0/6.0);
                double t80174 = b3p*c*t80153*t80145*(1.0/2.0);
                double t80175 = t80171+t80172+t80173+t80174;
                double t80176 = t80170*t80175*t80168*t80169;
                double t80177 = log(t80166);
                double t80178 = pow(2.0,1.0/3.0);
                double t80179 = t80178*2.0;
                double t80180 = t80179-2.0;
                double t80181 = log(t80163);
                double t80182 = a1f*c*t80143;
                double t80183 = t80182+1.0;
                double t80184 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80185 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80186 = gamma_aa[index]*t80185*(1.0/2.0);
                double t80187 = gamma_bb[index]*t80184*(1.0/2.0);
                double t80188 = t80186+t80187;
                double t80189 = gcab*t80188;
                double t80190 = t80189+1.0;
                double t80191 = gcab*gcab;
                double t80192 = t80188*t80188;
                double t80193 = t80191*t80191;
                double t80194 = t80192*t80192;
                double t80195 = t80191*t80192;
                double t80196 = gcab*t80188*2.0;
                double t80197 = t80195+t80196+1.0;
                double t80198 = t80191*t80192*3.0;
                double t80199 = gcab*t80191*t80192*t80188;
                double t80200 = gcab*t80188*3.0;
                double t80201 = t80200+t80198+t80199+1.0;
                double t80202 = t80191*t80192*6.0;
                double t80203 = gcab*t80191*t80192*t80188*4.0;
                double t80204 = t80193*t80194;
                double t80205 = gcab*t80188*4.0;
                double t80206 = t80202+t80203+t80204+t80205+1.0;
                double t80207 = a1p*c*c0p*t80100*t80074*(2.0/3.0);
                double t80208 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80209 = c*t80208;
                double t80210 = sqrt(t80209);
                double t80211 = pow(t80209,3.0/2.0);
                double t80212 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80213 = b1p*t80210;
                double t80214 = b3p*t80211;
                double t80215 = b4p*t80212*t80069;
                double t80216 = b2p*c*t80208;
                double t80217 = t80213+t80214+t80215+t80216;
                double t80218 = 1.0/t80217;
                double t80219 = t80218*t80075*(1.0/2.0);
                double t80220 = t80219+1.0;
                double t80221 = log(t80220);
                double t80222 = a1p*c*t80208;
                double t80223 = t80222+1.0;
                double t80224 = c0p*t80221*t80223*2.0;
                double t80225 = c0f*t80181*t80183*2.0;
                double t80227 = c0p*t80168*t80177*2.0;
                double t80226 = t80225-t80227;
                double t80228 = t80101*t80110*t80113*t80106*t80087;
                double t80229 = Aa*t80106*t80124*t80142*t80134*t80136*t80087*2.0;
                double t80230 = 1.0/t80190;
                double t80231 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t80232 = 1.0/(t80190*t80190);
                double t80233 = 1.0/t80197;
                double t80234 = 1.0/(t80201*t80201);
                double t80235 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t80236 = 1.0/(t80197*t80197);
                double t80237 = 1.0/t80201;
                double t80238 = 1.0/t80206;
                double t80239 = 1.0/(t80206*t80206);
                double t80240 = gcab*t80184*2.0;
                double t80241 = t80191*t80184*t80188*6.0;
                double t80242 = gcab*t80191*t80192*t80184*6.0;
                double t80243 = t80192*t80184*t80193*t80188*2.0;
                double t80244 = t80240+t80241+t80242+t80243;
                double t80245 = gamma_bb[index]*gcab*t80231*(8.0/3.0);
                double t80246 = gamma_bb[index]*t80231*t80191*t80188*(8.0/3.0);
                double t80247 = t80245+t80246;
                double t80248 = gcab*t80184;
                double t80249 = t80191*t80184*t80188;
                double t80250 = t80248+t80249;
                double t80251 = gamma_bb[index]*gcab*t80231*(1.6E1/3.0);
                double t80252 = gamma_bb[index]*gcab*t80231*t80191*t80192*1.6E1;
                double t80253 = gamma_bb[index]*t80231*t80192*t80193*t80188*(1.6E1/3.0);
                double t80254 = gamma_bb[index]*t80231*t80191*t80188*1.6E1;
                double t80255 = t80251+t80252+t80253+t80254;
                double t80256 = gcab*t80184*(3.0/2.0);
                double t80257 = t80191*t80184*t80188*3.0;
                double t80258 = gcab*t80191*t80192*t80184*(3.0/2.0);
                double t80259 = t80256+t80257+t80258;
                double t80260 = gamma_bb[index]*gcab*t80231*4.0;
                double t80261 = gamma_bb[index]*gcab*t80231*t80191*t80192*4.0;
                double t80262 = gamma_bb[index]*t80231*t80191*t80188*8.0;
                double t80263 = t80260+t80261+t80262;
                double t80264 = t80180*t80226*t80087;
                double t80265 = t80227+t80264;
                double t80266 = gamma_bb[index]*gamma_bb[index];
                double t80267 = gcaa*gcaa;
                double t80268 = t80267*t80267;
                double t80269 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t80270 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t80271 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t80272 = gamma_bb[index]*gcaa*t80184;
                double t80273 = t80272+1.0;
                double t80274 = gamma_bb[index]*gcaa*t80184*3.0;
                double t80275 = gamma_bb[index]*gcaa*t80271*t80266*t80267;
                double t80276 = t80270*t80266*t80267*3.0;
                double t80277 = t80274+t80275+t80276+1.0;
                double t80278 = t80266*t80266;
                double t80279 = gamma_bb[index]*gcaa*t80184*4.0;
                double t80280 = gamma_bb[index]*gcaa*t80271*t80266*t80267*4.0;
                double t80281 = t80270*t80266*t80267*6.0;
                double t80282 = t80268*t80269*t80278;
                double t80283 = t80280+t80281+t80282+t80279+1.0;
                double t80284 = gamma_bb[index]*gcaa*t80184*2.0;
                double t80285 = t80270*t80266*t80267;
                double t80286 = t80284+t80285+1.0;
                double t80287 = tau_b[index]-1.0/1.0E20;
                double t80288 = ( (t80287 > 0.0) ?  1.0 : 0.0 ) ;
                double t80289 = tau_b[index]*2.0;
                double t80329 = gamma_bb[index]*t80059*(1.0/4.0);
                double t80290 = -t80329+t80289;
                double t80291 = t80025*t80290*(1.0/2.0);
                double t80292 = t80291-1.0;
                double t80293 = t80292*t80288;
                double t80294 = t80293+1.0;
                double t80295 = 1.0/t80273;
                double t80296 = 1.0/t80283;
                double t80297 = 1.0/t80286;
                double t80298 = 1.0/t80277;
                double t80299 = 1.0/(t80273*t80273);
                double t80300 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t80301 = 1.0/(t80277*t80277);
                double t80302 = 1.0/(t80286*t80286);
                double t80303 = gcaa*t80184*3.0;
                double t80304 = gamma_bb[index]*t80270*t80267*6.0;
                double t80305 = gcaa*t80271*t80266*t80267*3.0;
                double t80306 = t80303+t80304+t80305;
                double t80307 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t80308 = 1.0/(t80283*t80283);
                double t80309 = gcaa*t80184*4.0;
                double t80310 = gamma_bb[index]*t80270*t80267*1.2E1;
                double t80311 = gcaa*t80271*t80266*t80267*1.2E1;
                double t80312 = gamma_bb[index]*t80266*t80268*t80269*4.0;
                double t80313 = t80310+t80311+t80312+t80309;
                double t80314 = gcaa*t80184*2.0;
                double t80315 = gamma_bb[index]*t80270*t80267*2.0;
                double t80316 = t80314+t80315;
                double t80317 = gamma_bb[index]*gcaa*t80231*(1.6E1/3.0);
                double t80318 = t80235*t80266*t80267*(1.6E1/3.0);
                double t80319 = t80317+t80318;
                double t80320 = gamma_bb[index]*gcaa*t80231*8.0;
                double t80321 = gamma_bb[index]*gcaa*t80300*t80266*t80267*8.0;
                double t80322 = t80235*t80266*t80267*1.6E1;
                double t80323 = t80320+t80321+t80322;
                double t80324 = gamma_bb[index]*gcaa*t80231*(3.2E1/3.0);
                double t80325 = gamma_bb[index]*gcaa*t80300*t80266*t80267*3.2E1;
                double t80326 = t80235*t80266*t80267*3.2E1;
                double t80327 = t80307*t80268*t80278*(3.2E1/3.0);
                double t80328 = t80324+t80325+t80326+t80327;
                double t80330 = 1.0/t80163;
                double t80331 = 1.0/(t80152*t80152);
                double t80332 = b4f*t80069*t80159*(2.0/3.0);
                double t80333 = b2f*c*t80153*(1.0/3.0);
                double t80334 = b1f*c*t80160*t80153*(1.0/6.0);
                double t80335 = b3f*c*t80153*t80145*(1.0/2.0);
                double t80336 = t80332+t80333+t80334+t80335;
                double t80337 = a1f*c*c0f*t80153*t80181*(2.0/3.0);
                double t80338 = a1p*c*c0p*t80153*t80177*(2.0/3.0);
                double t80339 = ccaa1*gcaa*t80184*t80295;
                double t80340 = ccaa4*gamma_bb[index]*t80266*t80268*t80269*t80296*4.0;
                double t80341 = ccaa2*gamma_bb[index]*t80270*t80267*t80297*2.0;
                double t80342 = ccaa3*gcaa*t80271*t80266*t80267*t80298*3.0;
                double t80347 = ccaa1*gamma_bb[index]*t80270*t80267*t80299;
                double t80348 = ccaa3*gamma_bb[index]*gcaa*t80301*t80306*t80271*t80266*t80267;
                double t80349 = ccaa4*t80313*t80308*t80268*t80269*t80278;
                double t80350 = ccaa2*t80302*t80270*t80316*t80266*t80267;
                double t80343 = t80340+t80341-t80350+t80342-t80347+t80339-t80348-t80349;
                double t80344 = t80337+t80176-t80338-t80330*t80331*t80183*t80336;
                double t80345 = t80180*t80344*t80087;
                double t80346 = t80345-t80176+t80338;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t80265+rho_a[index]*(t80224-t80180*t80087*(t80224-c0f*log((t80088* \
                   (1.0/2.0))/(b1f*t80210+b3f*t80211+b2f*c*t80208+b4f*t80212*t80069)+1.0)*(a1f*c*t80208+1.0)*2.0))-t80062* \
                   (t80112+t80228+t80229))*(ccab1*gcab*t80230*t80231*(4.0/3.0)-ccab2*t80191*t80236*t80192*(gcab*t80231* \
                   (8.0/3.0)+gamma_bb[index]*t80235*t80191*(4.0/3.0)+t80231*t80191*t80188*(8.0/3.0))-ccab4*t80193*t80194* \
                   t80239*(gcab*t80231*(1.6E1/3.0)+gamma_bb[index]*t80235*t80191*8.0+t80231*t80191*t80188*1.6E1+gamma_bb[index]* \
                   t80235*t80192*t80193*8.0+gcab*t80231*t80191*t80192*1.6E1+t80231*t80192*t80193*t80188*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t80235*t80191*t80188*1.6E1)-ccab1*gamma_bb[index]*t80232*t80235*t80191*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t80233*t80235*t80191*(4.0/3.0)-ccab1*t80231*t80232*t80191*t80188*(4.0/3.0)+ccab2*t80231*t80233*t80191* \
                   t80188*(8.0/3.0)+ccab4*t80231*t80192*t80193*t80238*t80188*(1.6E1/3.0)-ccab2*t80191*t80236*t80184*t80247* \
                   t80188+ccab4*1.0/(t80206*t80206*t80206)*t80244*t80255*t80193*t80194*2.0+ccab2*t80250*t80191*t80192* \
                   t80247*1.0/(t80197*t80197*t80197)*2.0+ccab4*gamma_bb[index]*t80235*t80192*t80193*t80238*8.0+ccab3* \
                   gcab*t80231*t80191*t80192*t80237*4.0+ccab3*gamma_bb[index]*gcab*t80235*t80191*t80237*t80188*4.0-ccab2* \
                   gamma_bb[index]*t80231*t80250*t80191*t80236*t80188*(8.0/3.0)-ccab3*gcab*t80234*t80191*t80263*t80192* \
                   t80184*(3.0/2.0)-ccab4*t80192*t80255*t80184*t80193*t80239*t80188*2.0-ccab3*gcab*t80234*t80191*t80192* \
                   t80188*(gcab*t80231*4.0+gamma_bb[index]*t80235*t80191*4.0+t80231*t80191*t80188*8.0+gcab*t80231*t80191* \
                   t80192*4.0+gamma_bb[index]*gcab*t80235*t80191*t80188*4.0)+ccab1*gamma_bb[index]*gcab*1.0/(t80190*t80190* \
                   t80190)*t80235*t80191*t80188*(4.0/3.0)+ccab3*gcab*1.0/(t80201*t80201*t80201)*t80191*t80263*t80192* \
                   t80259*t80188*2.0-ccab3*gamma_bb[index]*gcab*t80231*t80234*t80191*t80192*t80259*4.0-ccab4*gamma_bb[index]* \
                   t80231*t80244*t80192*t80193*t80239*t80188*(1.6E1/3.0))-(t80112+t80228+t80229+rho_b[index]*(-t80176+ \
                   t80338+t80180*t80087*(t80337+t80176-t80330*t80331*t80183*t80336-a1p*c*c0p*t80153*t80177*(2.0/3.0)) \
                   )-t80062*(t80207-t80122*t80080*t80116*t80117+t80101*t80110*t80113*t80140*t80087+t80101*t80113*t80123* \
                   t80106*t80087*4.0-t80110*t80113*t80106*t80087*(t80207-t80122*t80080*t80116*t80117+(1.0/(t80093*t80093) \
                   *t80099*(b2f*c*t80074*(1.0/3.0)+b4f*t80114*t80069*(2.0/3.0)+b1f*c*t80115*t80074*(1.0/6.0)+b3f*c*t80065* \
                   t80074*(1.0/2.0)))/t80096-a1f*c*c0f*t80074*t80097*(2.0/3.0))+t80101*t80110*t80106*t80081*t80082*t80087* \
                   4.0+Aa*t80106*t80124*t80134*t80136*t80087*(t80113*t80123*4.0+t80110*t80081*t80082*4.0)*2.0+Aa*t80140* \
                   t80124*t80142*t80134*t80136*t80087*2.0-(1.0/(t80130*t80130)*t80106*t80124*t80142*t80136*t80087*(b2a* \
                   c*t80074*(1.0/3.0)+b4a*t80114*t80069*(2.0/3.0)+b1a*c*t80115*t80074*(1.0/6.0)+b3a*c*t80065*t80074*(1.0/ \
                   2.0)))/t80133+Aa*a1a*c*t80106*t80124*t80142*t80134*t80074*t80087*(2.0/3.0))-c0p*t80168*t80177*2.0- \
                   t80180*t80226*t80087)*(ccab1*gcab*t80230*t80184*(1.0/2.0)-ccab2*t80250*t80191*t80236*t80192-ccab1* \
                   t80232*t80191*t80184*t80188*(1.0/2.0)+ccab2*t80233*t80191*t80184*t80188-ccab4*t80244*t80193*t80194* \
                   t80239+ccab4*t80192*t80184*t80193*t80238*t80188*2.0+ccab3*gcab*t80191*t80192*t80237*t80184*(3.0/2.0) \
                   -ccab3*gcab*t80234*t80191*t80192*t80259*t80188)-(X-1.0)*(-kp*rho_b[index]*t80034*t80057*(mu_*t80020* \
                   t80022*t80061*t80019*(1.0/3.0)+mu_*t80020*t80023*t80060*t80019*(1.0/2.0))+mu_*t80022*t80023*t80034* \
                   t80019*t80057*(1.0/4.0)+mu_*t80023*t80034*t80019*t80059*(C_k*a_1*t80025*t80035*t80058*(5.0/3.0)-C_k* \
                   a_1*t80041*t80025*t80027*t80058*(5.0/3.0)+C_k*a_2*t80041*t80025*t80027*t80058*(1.0E1/3.0)-C_k*a_2* \
                   t80025*t80043*t80028*t80058*(1.0E1/3.0)+C_k*a_3*t80025*t80043*t80028*t80058*5.0-C_k*a_4*t80025*t80029* \
                   t80047*t80058*(2.0E1/3.0)+C_k*a_5*t80025*t80029*t80047*t80058*(2.5E1/3.0)-C_k*a_8*t80030*t80025*t80055* \
                   t80058*(4.0E1/3.0)+C_k*a_9*t80030*t80025*t80055*t80058*1.5E1+C_k*a_10*t80030*t80025*t80027*t80037* \
                   t80058*(5.0E1/3.0)-C_k*a_10*t80030*t80025*t80028*t80039*t80058*(5.0E1/3.0)+C_k*a_11*t80030*t80025* \
                   t80028*t80039*t80058*(5.5E1/3.0)-C_k*a_3*t80025*t80027*t80045*t80028*t80058*5.0+C_k*a_4*t80025*t80027* \
                   t80045*t80028*t80058*(2.0E1/3.0)-C_k*a_5*t80025*t80027*t80029*t80049*t80058*(2.5E1/3.0)-C_k*a_6*t80051* \
                   t80025*t80028*t80029*t80058*1.0E1+C_k*a_6*t80025*t80027*t80029*t80049*t80058*1.0E1+C_k*a_7*t80051* \
                   t80025*t80028*t80029*t80058*(3.5E1/3.0)-C_k*a_9*t80030*t80025*t80027*t80037*t80058*1.5E1-C_k*a_11* \
                   t80030*1.0/pow(t80031,1.2E1)*t80025*t80027*t80028*t80058*(5.5E1/3.0)-C_k*a_7*t80025*t80053*t80027* \
                   t80028*t80029*t80058*(3.5E1/3.0)+C_k*a_8*t80025*t80053*t80027*t80028*t80029*t80058*(4.0E1/3.0))*(1.0/ \
                   4.0)+mu_*t80023*1.0/(t80033*t80033*t80033)*t80019*t80057*t80059*(gamma_bb[index]*mu_*t80020*t80022* \
                   t80061*t80019*(1.0/3.0)+gamma_bb[index]*mu_*t80020*t80023*t80060*t80019*(1.0/2.0))*(1.0/2.0))-t80343* \
                   t80265*t80294+rho_b[index]*t80343*t80346*t80294-rho_b[index]*t80265*t80294*(ccaa1*gcaa*t80231*t80295* \
                   (-8.0/3.0)-ccaa2*gamma_bb[index]*t80235*t80267*t80297*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t80235*t80267* \
                   t80299*8.0+ccaa2*t80302*t80235*t80316*t80266*t80267*(1.6E1/3.0)+ccaa4*t80313*t80307*t80308*t80268* \
                   t80278*(3.2E1/3.0)+ccaa4*t80308*t80268*t80269*t80278*(gcaa*t80231*(3.2E1/3.0)+gamma_bb[index]*t80235* \
                   t80267*6.4E1+gamma_bb[index]*t80307*t80266*t80268*(1.28E2/3.0)+gcaa*t80300*t80266*t80267*9.6E1)-ccaa1* \
                   gcaa*t80300*1.0/(t80273*t80273*t80273)*t80266*t80267*(1.6E1/3.0)+ccaa2*t80302*t80270*t80266*t80267* \
                   (gcaa*t80231*(1.6E1/3.0)+gamma_bb[index]*t80235*t80267*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t80302*t80270* \
                   t80319*t80267*2.0-ccaa4*gamma_bb[index]*t80307*t80266*t80268*t80296*(1.28E2/3.0)-ccaa3*gcaa*t80300* \
                   t80266*t80267*t80298*2.4E1+ccaa4*gamma_bb[index]*t80308*t80328*t80266*t80268*t80269*4.0+ccaa3*gcaa* \
                   t80301*t80323*t80271*t80266*t80267*3.0-ccaa2*t80270*t80316*t80319*t80266*t80267*1.0/(t80286*t80286* \
                   t80286)*2.0-ccaa4*t80313*1.0/(t80283*t80283*t80283)*t80328*t80268*t80269*t80278*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t80301*t80271*t80266*t80267*(gcaa*t80231*8.0+gamma_bb[index]*t80235*t80267*3.2E1+gcaa*t80300* \
                   t80266*t80267*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t80300*t80301*t80306*t80266*t80267*8.0-ccaa3*gamma_bb[index]* \
                   gcaa*t80323*t80306*t80271*t80266*t80267*1.0/(t80277*t80277*t80277)*2.0)-t80025*t80346*t80288*(ccaa0+ \
                   ccaa1*gamma_bb[index]*gcaa*t80184*t80295+ccaa2*t80270*t80266*t80267*t80297+ccaa4*t80268*t80269*t80278* \
                   t80296+ccaa3*gamma_bb[index]*gcaa*t80271*t80266*t80267*t80298)*(1.0/8.0)-t80025*t80265*t80288*(ccaa1* \
                   gamma_bb[index]*gcaa*t80231*t80295*(8.0/3.0)+ccaa2*t80235*t80266*t80267*t80297*(1.6E1/3.0)-ccaa1*t80235* \
                   t80266*t80267*t80299*(8.0/3.0)+ccaa4*t80307*t80268*t80278*t80296*(3.2E1/3.0)-ccaa2*t80302*t80270*t80319* \
                   t80266*t80267-ccaa4*t80308*t80328*t80268*t80269*t80278+ccaa3*gamma_bb[index]*gcaa*t80300*t80266*t80267* \
                   t80298*8.0-ccaa3*gamma_bb[index]*gcaa*t80301*t80323*t80271*t80266*t80267)*(1.0/8.0)-gamma_bb[index]* \
                   t80025*t80343*t80265*t80059*t80288*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t81980 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81981 = c*t81980;
                double t81982 = sqrt(t81981);
                double t81983 = pow(t81981,3.0/2.0);
                double t81984 = c*c;
                double t81985 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81986 = 1.0/c0p;
                double t81987 = b1p*t81982;
                double t81988 = b3p*t81983;
                double t81989 = b4p*t81984*t81985;
                double t81990 = b2p*c*t81980;
                double t81991 = t81990+t81987+t81988+t81989;
                double t81992 = 1.0/t81991;
                double t81993 = t81992*t81986*(1.0/2.0);
                double t81994 = t81993+1.0;
                double t81995 = log(t81994);
                double t81996 = a1p*c*t81980;
                double t81997 = t81996+1.0;
                double t81998 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81999 = gamma_bb[index]*gamma_bb[index];
                double t82000 = gcaa*gcaa;
                double t82001 = t82000*t82000;
                double t82002 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82003 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82004 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82005 = gamma_bb[index]*gcaa*t81998;
                double t82006 = t82005+1.0;
                double t82007 = gamma_bb[index]*gcaa*t81998*3.0;
                double t82008 = gamma_bb[index]*gcaa*t81999*t82000*t82004;
                double t82009 = t81999*t82000*t82003*3.0;
                double t82010 = t82007+t82008+t82009+1.0;
                double t82011 = t81999*t81999;
                double t82012 = gamma_bb[index]*gcaa*t81998*4.0;
                double t82013 = gamma_bb[index]*gcaa*t81999*t82000*t82004*4.0;
                double t82014 = t81999*t82000*t82003*6.0;
                double t82015 = t82001*t82002*t82011;
                double t82016 = t82012+t82013+t82014+t82015+1.0;
                double t82017 = gamma_bb[index]*gcaa*t81998*2.0;
                double t82018 = t81999*t82000*t82003;
                double t82019 = t82017+t82018+1.0;
                double t82020 = pow(2.0,1.0/3.0);
                double t82021 = t82020*2.0;
                double t82022 = t82021-2.0;
                double t82023 = two_13*2.0;
                double t82024 = t82023-2.0;
                double t82025 = 1.0/t82024;
                double t82026 = 1.0/c0f;
                double t82027 = b1f*t81982;
                double t82028 = b3f*t81983;
                double t82029 = b4f*t81984*t81985;
                double t82030 = b2f*c*t81980;
                double t82031 = t82030+t82027+t82028+t82029;
                double t82032 = 1.0/t82031;
                double t82033 = t82032*t82026*(1.0/2.0);
                double t82034 = t82033+1.0;
                double t82035 = log(t82034);
                double t82036 = a1f*c*t81980;
                double t82037 = t82036+1.0;
                double t82038 = c0f*t82035*t82037*2.0;
                double t82039 = c0p*t81995*t81997*2.0;
                double t82040 = tau_b[index]-1.0/1.0E20;
                double t82041 = ( (t82040 > 0.0) ?  1.0 : 0.0 ) ;
                double t82042 = 1.0/tau_b[index];
                double t82043 = tau_b[index]*2.0;
                double t82044 = 1.0/rho_b[index];
                double t82089 = gamma_bb[index]*t82044*(1.0/4.0);
                double t82045 = t82043-t82089;
                double t82046 = t82042*t82045*(1.0/2.0);
                double t82047 = t82046-1.0;
                double t82048 = t82041*t82047;
                double t82049 = t82048+1.0;
                double t82050 = 1.0/t82006;
                double t82051 = 1.0/t82016;
                double t82052 = 1.0/t82019;
                double t82053 = 1.0/t82010;
                double t82054 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t82055 = 1.0/(t82006*t82006);
                double t82056 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t82057 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t82058 = 1.0/(t82010*t82010);
                double t82059 = 1.0/(t82019*t82019);
                double t82060 = gcaa*t81998*3.0;
                double t82061 = gamma_bb[index]*t82000*t82003*6.0;
                double t82062 = gcaa*t81999*t82000*t82004*3.0;
                double t82063 = t82060+t82061+t82062;
                double t82064 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t82065 = 1.0/(t82016*t82016);
                double t82066 = gcaa*t81998*4.0;
                double t82067 = gamma_bb[index]*t82000*t82003*1.2E1;
                double t82068 = gcaa*t81999*t82000*t82004*1.2E1;
                double t82069 = gamma_bb[index]*t81999*t82001*t82002*4.0;
                double t82070 = t82066+t82067+t82068+t82069;
                double t82071 = gcaa*t81998*2.0;
                double t82072 = gamma_bb[index]*t82000*t82003*2.0;
                double t82073 = t82071+t82072;
                double t82074 = gamma_bb[index]*gcaa*t82057*(1.6E1/3.0);
                double t82075 = t81999*t82000*t82054*(1.6E1/3.0);
                double t82076 = t82074+t82075;
                double t82077 = gamma_bb[index]*gcaa*t82057*8.0;
                double t82078 = gamma_bb[index]*gcaa*t81999*t82000*t82056*8.0;
                double t82079 = t81999*t82000*t82054*1.6E1;
                double t82080 = t82077+t82078+t82079;
                double t82081 = gamma_bb[index]*gcaa*t82057*(3.2E1/3.0);
                double t82082 = gamma_bb[index]*gcaa*t81999*t82000*t82056*3.2E1;
                double t82083 = t81999*t82000*t82054*3.2E1;
                double t82084 = t82001*t82011*t82064*(3.2E1/3.0);
                double t82085 = t82081+t82082+t82083+t82084;
                double t82086 = t82038-t82039;
                double t82087 = t82022*t82025*t82086;
                double t82088 = t82039+t82087;
                double t82090 = 1.0/pow(rho_b[index],4.0/3.0);
                double t82091 = 1.0/pow(rho_b[index],5.0/3.0);
                double t82092 = 1.0/sqrt(t81981);
                double t82093 = 1.0/t81994;
                double t82094 = 1.0/(t81991*t81991);
                double t82095 = b4p*t81984*t82091*(2.0/3.0);
                double t82096 = b2p*c*t82090*(1.0/3.0);
                double t82097 = b1p*c*t82090*t82092*(1.0/6.0);
                double t82098 = b3p*c*t81982*t82090*(1.0/2.0);
                double t82099 = t82095+t82096+t82097+t82098;
                double t82100 = t81997*t82093*t82094*t82099;
                double t82101 = ccaa1*gcaa*t81998*t82050;
                double t82102 = ccaa4*gamma_bb[index]*t81999*t82001*t82002*t82051*4.0;
                double t82103 = ccaa2*gamma_bb[index]*t82000*t82003*t82052*2.0;
                double t82104 = ccaa3*gcaa*t81999*t82000*t82004*t82053*3.0;
                double t82115 = ccaa1*gamma_bb[index]*t82000*t82003*t82055;
                double t82116 = ccaa3*gamma_bb[index]*gcaa*t81999*t82000*t82004*t82063*t82058;
                double t82117 = ccaa4*t82001*t82002*t82011*t82070*t82065;
                double t82118 = ccaa2*t81999*t82000*t82003*t82073*t82059;
                double t82105 = t82101+t82102+t82103+t82104-t82115-t82116-t82117-t82118;
                double t82106 = 1.0/t82034;
                double t82107 = 1.0/(t82031*t82031);
                double t82108 = b4f*t81984*t82091*(2.0/3.0);
                double t82109 = b2f*c*t82090*(1.0/3.0);
                double t82110 = b1f*c*t82090*t82092*(1.0/6.0);
                double t82111 = b3f*c*t81982*t82090*(1.0/2.0);
                double t82112 = t82110+t82111+t82108+t82109;
                double t82113 = a1f*c*c0f*t82035*t82090*(2.0/3.0);
                double t82114 = a1p*c*c0p*t81995*t82090*(2.0/3.0);
                double t82119 = 1.0/(k*k);
                double t82120 = 1.0/kp;
                double t82121 = rho_b[index]*2.0;
                double t82122 = 1.0/(rho_b[index]*rho_b[index]);
                double t82123 = 1.0/pow(t82121,2.0/3.0);
                double t82124 = pow(rho_b[index],5.0/3.0);
                double t82125 = C_k*t82042*t82124;
                double t82126 = t82125-1.0;
                double t82127 = t82126*t82126;
                double t82128 = t82127*t82127;
                double t82129 = t82128*t82128;
                double t82130 = t82125+1.0;
                double t82131 = gamma_bb[index]*mu_*t82120*t82122*t82123*t82119*(1.0/4.0);
                double t82132 = t82131+1.0;
                double t82133 = 1.0/(t82132*t82132);
                double t82134 = X-1.0;
                double t82135 = 1.0/t82130;
                double t82136 = pow(rho_b[index],2.0/3.0);
                double t82137 = 1.0/(t82130*t82130);
                double t82138 = 1.0/pow(t82130,1.0E1);
                double t82139 = 1.0/pow(t82130,1.1E1);
                double t82140 = 1.0/(t82130*t82130*t82130);
                double t82141 = 1.0/(t82130*t82130*t82130*t82130);
                double t82142 = 1.0/(t82130*t82130*t82130*t82130*t82130);
                double t82143 = 1.0/(t82130*t82130*t82130*t82130*t82130*t82130);
                double t82144 = 1.0/(t82130*t82130*t82130*t82130*t82130*t82130*t82130);
                double t82145 = 1.0/(t82130*t82130*t82130*t82130*t82130*t82130*t82130*t82130);
                double t82146 = 1.0/(t82130*t82130*t82130*t82130*t82130*t82130*t82130*t82130*t82130);
                double t82147 = a_1*t82126*t82135;
                double t82148 = a_10*t82127*t82129*t82138;
                double t82149 = a_11*t82126*t82127*t82129*t82139;
                double t82150 = a_2*t82127*t82137;
                double t82151 = a_3*t82140*t82126*t82127;
                double t82152 = a_4*t82141*t82128;
                double t82153 = a_5*t82142*t82126*t82128;
                double t82154 = a_6*t82143*t82127*t82128;
                double t82155 = a_7*t82126*t82144*t82127*t82128;
                double t82156 = a_8*t82145*t82129;
                double t82157 = a_9*t82126*t82146*t82129;
                double t82158 = t82150+t82151+t82152+t82153+t82154+t82155+t82147+t82156+t82148+t82157+t82149+1.0;
                double t82159 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t82160 = 1.0/pow(t82121,5.0/3.0);
                v_rho_b_gamma_bb_[index] = -t82105*t82049*(t82039+t82022*t82025*(t82038-c0p*t81995*t81997*2.0))-t82041* \
                   t82042*(-t82100+t82114+t82022*t82025*(t82100+t82113-t82114-t82112*t82106*t82107*t82037))*(ccaa0+ccaa1* \
                   gamma_bb[index]*gcaa*t81998*t82050+ccaa2*t81999*t82000*t82003*t82052+ccaa4*t82001*t82002*t82011*t82051+ \
                   ccaa3*gamma_bb[index]*gcaa*t81999*t82000*t82004*t82053)*(1.0/8.0)-rho_b[index]*t82049*t82088*(ccaa1* \
                   gcaa*t82050*t82057*(-8.0/3.0)-ccaa2*gamma_bb[index]*t82000*t82052*t82054*(3.2E1/3.0)+ccaa1*gamma_bb[index]* \
                   t82000*t82054*t82055*8.0+ccaa2*t81999*t82000*t82054*t82073*t82059*(1.6E1/3.0)+ccaa4*t82001*t82011* \
                   t82070*t82064*t82065*(3.2E1/3.0)+ccaa4*t82001*t82002*t82011*t82065*(gcaa*t82057*(3.2E1/3.0)+gamma_bb[index]* \
                   t82000*t82054*6.4E1+gamma_bb[index]*t81999*t82001*t82064*(1.28E2/3.0)+gcaa*t81999*t82000*t82056*9.6E1) \
                   -ccaa1*gcaa*t81999*t82000*1.0/(t82006*t82006*t82006)*t82056*(1.6E1/3.0)+ccaa2*t81999*t82000*t82003* \
                   t82059*(gcaa*t82057*(1.6E1/3.0)+gamma_bb[index]*t82000*t82054*(3.2E1/3.0))-ccaa4*gamma_bb[index]*t81999* \
                   t82001*t82051*t82064*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t82000*t82003*t82076*t82059*2.0-ccaa3*gcaa* \
                   t81999*t82000*t82053*t82056*2.4E1+ccaa4*gamma_bb[index]*t81999*t82001*t82002*t82065*t82085*4.0+ccaa3* \
                   gcaa*t81999*t82000*t82004*t82080*t82058*3.0-ccaa2*t81999*t82000*t82003*1.0/(t82019*t82019*t82019)* \
                   t82073*t82076*2.0-ccaa4*t82001*t82002*t82011*1.0/(t82016*t82016*t82016)*t82070*t82085*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t81999*t82000*t82004*t82058*(gcaa*t82057*8.0+gamma_bb[index]*t82000*t82054*3.2E1+gcaa*t81999* \
                   t82000*t82056*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t81999*t82000*t82063*t82056*t82058*8.0-ccaa3*gamma_bb[index]* \
                   gcaa*t81999*t82000*1.0/(t82010*t82010*t82010)*t82004*t82080*t82063*2.0)+rho_b[index]*t82105*t82049* \
                   (-t82100+t82114+t82022*t82025*(t82100+t82113-t82112*t82106*t82107*t82037-a1p*c*c0p*t81995*t82090*(2.0/ \
                   3.0)))-t82041*t82042*t82088*(ccaa1*gamma_bb[index]*gcaa*t82050*t82057*(8.0/3.0)+ccaa2*t81999*t82000* \
                   t82052*t82054*(1.6E1/3.0)-ccaa1*t81999*t82000*t82054*t82055*(8.0/3.0)+ccaa4*t82001*t82011*t82051*t82064* \
                   (3.2E1/3.0)-ccaa2*t81999*t82000*t82003*t82076*t82059-ccaa4*t82001*t82002*t82011*t82065*t82085+ccaa3* \
                   gamma_bb[index]*gcaa*t81999*t82000*t82053*t82056*8.0-ccaa3*gamma_bb[index]*gcaa*t81999*t82000*t82004* \
                   t82080*t82058)*(1.0/8.0)-gamma_bb[index]*t82041*t82042*t82105*t82044*t82088*(1.0/8.0)+kp*rho_b[index]* \
                   t82133*t82134*t82158*(mu_*t82120*t82122*t82160*t82119*(1.0/3.0)+mu_*t82120*t82123*t82119*t82159*(1.0/ \
                   2.0))-mu_*t82122*t82123*t82133*t82134*t82119*t82158*(1.0/4.0)-mu_*t82123*t82133*t82044*t82134*t82119* \
                   (C_k*a_1*t82042*t82135*t82136*(5.0/3.0)-C_k*a_1*t82042*t82126*t82136*t82137*(5.0/3.0)-C_k*a_2*t82140* \
                   t82042*t82127*t82136*(1.0E1/3.0)+C_k*a_2*t82042*t82126*t82136*t82137*(1.0E1/3.0)+C_k*a_3*t82140*t82042* \
                   t82127*t82136*5.0-C_k*a_4*t82042*t82142*t82136*t82128*(2.0E1/3.0)+C_k*a_5*t82042*t82142*t82136*t82128* \
                   (2.5E1/3.0)-C_k*a_8*t82042*t82136*t82146*t82129*(4.0E1/3.0)+C_k*a_9*t82042*t82136*t82146*t82129*1.5E1+ \
                   C_k*a_10*t82042*t82126*t82136*t82129*t82138*(5.0E1/3.0)-C_k*a_10*t82042*t82127*t82136*t82129*t82139* \
                   (5.0E1/3.0)+C_k*a_11*t82042*t82127*t82136*t82129*t82139*(5.5E1/3.0)-C_k*a_3*t82042*t82141*t82126*t82127* \
                   t82136*5.0+C_k*a_4*t82042*t82141*t82126*t82127*t82136*(2.0E1/3.0)-C_k*a_5*t82042*t82143*t82126*t82136* \
                   t82128*(2.5E1/3.0)+C_k*a_6*t82042*t82143*t82126*t82136*t82128*1.0E1-C_k*a_6*t82042*t82144*t82127*t82136* \
                   t82128*1.0E1+C_k*a_7*t82042*t82144*t82127*t82136*t82128*(3.5E1/3.0)-C_k*a_9*t82042*t82126*t82136*t82129* \
                   t82138*1.5E1-C_k*a_11*1.0/pow(t82130,1.2E1)*t82042*t82126*t82127*t82136*t82129*(5.5E1/3.0)-C_k*a_7* \
                   t82042*t82126*t82127*t82136*t82145*t82128*(3.5E1/3.0)+C_k*a_8*t82042*t82126*t82127*t82136*t82145*t82128* \
                   (4.0E1/3.0))*(1.0/4.0)-mu_*t82123*1.0/(t82132*t82132*t82132)*t82044*t82134*t82119*t82158*(gamma_bb[index]* \
                   mu_*t82120*t82122*t82160*t82119*(1.0/3.0)+gamma_bb[index]*mu_*t82120*t82123*t82119*t82159*(1.0/2.0) \
                   )*(1.0/2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80352 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80353 = c*t80352;
                double t80354 = sqrt(t80353);
                double t80355 = pow(t80353,3.0/2.0);
                double t80356 = c*c;
                double t80357 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80358 = 1.0/c0p;
                double t80359 = b1p*t80354;
                double t80360 = b3p*t80355;
                double t80361 = b4p*t80356*t80357;
                double t80362 = b2p*c*t80352;
                double t80363 = t80360+t80361+t80362+t80359;
                double t80364 = 1.0/t80363;
                double t80365 = t80364*t80358*(1.0/2.0);
                double t80366 = t80365+1.0;
                double t80367 = log(t80366);
                double t80368 = a1p*c*t80352;
                double t80369 = t80368+1.0;
                double t80370 = pow(2.0,1.0/3.0);
                double t80371 = t80370*2.0;
                double t80372 = t80371-2.0;
                double t80373 = two_13*2.0;
                double t80374 = t80373-2.0;
                double t80375 = 1.0/t80374;
                double t80376 = 1.0/c0f;
                double t80377 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80378 = c*t80377;
                double t80379 = sqrt(t80378);
                double t80380 = pow(t80378,3.0/2.0);
                double t80381 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80382 = b1p*t80379;
                double t80383 = b3p*t80380;
                double t80384 = b4p*t80381*t80356;
                double t80385 = b2p*c*t80377;
                double t80386 = t80382+t80383+t80384+t80385;
                double t80387 = 1.0/t80386;
                double t80388 = t80358*t80387*(1.0/2.0);
                double t80389 = t80388+1.0;
                double t80390 = log(t80389);
                double t80391 = a1p*c*t80377;
                double t80392 = t80391+1.0;
                double t80393 = c0p*t80390*t80392*2.0;
                double t80394 = rho_a[index]+rho_b[index];
                double t80395 = 1.0/pow(t80394,1.0/3.0);
                double t80396 = c*t80395;
                double t80397 = sqrt(t80396);
                double t80398 = pow(t80396,3.0/2.0);
                double t80399 = 1.0/pow(t80394,2.0/3.0);
                double t80400 = b1p*t80397;
                double t80401 = b3p*t80398;
                double t80402 = b4p*t80356*t80399;
                double t80403 = b2p*c*t80395;
                double t80404 = t80400+t80401+t80402+t80403;
                double t80405 = 1.0/t80404;
                double t80406 = t80405*t80358*(1.0/2.0);
                double t80407 = t80406+1.0;
                double t80408 = log(t80407);
                double t80409 = a1p*c*t80395;
                double t80410 = t80409+1.0;
                double t80411 = c0p*t80410*t80408*2.0;
                double t80412 = rho_a[index]-rho_b[index];
                double t80413 = t80412*t80412;
                double t80414 = 1.0/t80394;
                double t80415 = t80412*t80414;
                double t80416 = 1.0/(t80394*t80394*t80394*t80394);
                double t80417 = t80413*t80413;
                double t80418 = t80415+1.0;
                double t80419 = pow(t80418,4.0/3.0);
                double t80420 = -t80415+1.0;
                double t80421 = pow(t80420,4.0/3.0);
                double t80422 = t80421+t80419-2.0;
                double t80423 = gcab*gcab;
                double t80424 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t80425 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80426 = gamma_aa[index]*t80425*(1.0/2.0);
                double t80427 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80428 = gamma_bb[index]*t80427*(1.0/2.0);
                double t80429 = t80426+t80428;
                double t80430 = gcab*t80429;
                double t80431 = t80430+1.0;
                double t80432 = t80429*t80429;
                double t80433 = t80423*t80432;
                double t80434 = gcab*t80429*2.0;
                double t80435 = t80433+t80434+1.0;
                double t80436 = t80423*t80423;
                double t80453 = gcab*t80425*2.0;
                double t80454 = t80423*t80425*t80429*6.0;
                double t80455 = gcab*t80423*t80432*t80425*6.0;
                double t80456 = t80432*t80425*t80436*t80429*2.0;
                double t80437 = t80453+t80454+t80455+t80456;
                double t80438 = t80432*t80432;
                double t80458 = gcab*t80425*(3.0/2.0);
                double t80459 = t80423*t80425*t80429*3.0;
                double t80460 = gcab*t80423*t80432*t80425*(3.0/2.0);
                double t80439 = t80460+t80458+t80459;
                double t80440 = t80423*t80432*3.0;
                double t80441 = gcab*t80423*t80432*t80429;
                double t80442 = gcab*t80429*3.0;
                double t80443 = t80440+t80441+t80442+1.0;
                double t80450 = gcab*t80425;
                double t80451 = t80423*t80425*t80429;
                double t80444 = t80450+t80451;
                double t80445 = t80423*t80432*6.0;
                double t80446 = gcab*t80423*t80432*t80429*4.0;
                double t80447 = t80436*t80438;
                double t80448 = gcab*t80429*4.0;
                double t80449 = t80445+t80446+t80447+t80448+1.0;
                double t80452 = 1.0/(t80435*t80435);
                double t80457 = 1.0/(t80449*t80449);
                double t80461 = 1.0/(t80443*t80443);
                double t80462 = b1f*t80354;
                double t80463 = b3f*t80355;
                double t80464 = b4f*t80356*t80357;
                double t80465 = b2f*c*t80352;
                double t80466 = t80462+t80463+t80464+t80465;
                double t80467 = 1.0/t80466;
                double t80468 = t80376*t80467*(1.0/2.0);
                double t80469 = t80468+1.0;
                double t80470 = log(t80469);
                double t80471 = a1f*c*t80352;
                double t80472 = t80471+1.0;
                double t80473 = c0f*t80470*t80472*2.0;
                double t80474 = c0p*t80367*t80369*2.0;
                double t80475 = gcaa*gcaa;
                double t80476 = gamma_aa[index]*gamma_aa[index];
                double t80477 = t80475*t80475;
                double t80478 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t80479 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t80480 = gamma_aa[index]*gcaa*t80425;
                double t80481 = t80480+1.0;
                double t80482 = gamma_aa[index]*gcaa*t80425*2.0;
                double t80483 = t80424*t80475*t80476;
                double t80484 = t80482+t80483+1.0;
                double t80485 = gamma_aa[index]*gcaa*t80425*3.0;
                double t80486 = gamma_aa[index]*gcaa*t80475*t80476*t80479;
                double t80487 = t80424*t80475*t80476*3.0;
                double t80488 = t80485+t80486+t80487+1.0;
                double t80489 = t80476*t80476;
                double t80505 = gcaa*t80425*4.0;
                double t80506 = gamma_aa[index]*t80424*t80475*1.2E1;
                double t80507 = gcaa*t80475*t80476*t80479*1.2E1;
                double t80508 = gamma_aa[index]*t80476*t80477*t80478*4.0;
                double t80490 = t80505+t80506+t80507+t80508;
                double t80491 = gamma_aa[index]*gcaa*t80425*4.0;
                double t80492 = gamma_aa[index]*gcaa*t80475*t80476*t80479*4.0;
                double t80493 = t80424*t80475*t80476*6.0;
                double t80494 = t80477*t80478*t80489;
                double t80495 = t80491+t80492+t80493+t80494+1.0;
                double t80498 = gcaa*t80425*2.0;
                double t80499 = gamma_aa[index]*t80424*t80475*2.0;
                double t80496 = t80498+t80499;
                double t80497 = 1.0/(t80488*t80488);
                double t80500 = 1.0/(t80484*t80484);
                double t80501 = gcaa*t80425*3.0;
                double t80502 = gamma_aa[index]*t80424*t80475*6.0;
                double t80503 = gcaa*t80475*t80476*t80479*3.0;
                double t80504 = t80501+t80502+t80503;
                double t80509 = 1.0/(t80495*t80495);
                double t80510 = 1.0/tau_a[index];
                double t80511 = tau_a[index]-1.0/1.0E20;
                double t80512 = ( (t80511 > 0.0) ?  1.0 : 0.0 ) ;
                double t80513 = t80473-t80474;
                double t80514 = t80513*t80372*t80375;
                double t80515 = t80514+t80474;
                double t80516 = 1.0/t80495;
                double t80517 = 1.0/t80484;
                double t80518 = 1.0/t80488;
                double t80519 = 1.0/(t80481*t80481);
                double t80520 = 1.0/kp;
                double t80521 = rho_a[index]*2.0;
                double t80522 = pow(rho_a[index],5.0/3.0);
                double t80523 = C_k*t80510*t80522;
                double t80524 = t80523-1.0;
                double t80525 = t80524*t80524;
                double t80526 = t80525*t80525;
                double t80527 = t80526*t80526;
                double t80528 = t80523+1.0;
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t80474+t80372*t80375*(t80473-c0p*t80367*t80369*2.0) \
                   )+rho_b[index]*(t80393-t80372*t80375*(t80393-c0f*log((t80376*(1.0/2.0))/(b1f*t80379+b3f*t80380+b2f* \
                   c*t80377+b4f*t80381*t80356)+1.0)*(a1f*c*t80377+1.0)*2.0))-t80394*(t80411-t80422*t80416*t80417*t80375* \
                   (t80411-c0f*log((t80376*(1.0/2.0))/(b1f*t80397+b3f*t80398+b2f*c*t80395+b4f*t80356*t80399)+1.0)*(a1f* \
                   c*t80395+1.0)*2.0)+(Aa*t80422*t80375*log((1.0/2.0)/(Aa*(b1a*t80397+b3a*t80398+b2a*c*t80395+b4a*t80356* \
                   t80399))+1.0)*(t80416*t80417-1.0)*(a1a*c*t80395+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t80431*t80431)*t80423* \
                   t80424*(1.0/2.0)-(ccab2*t80423*t80424*(1.0/2.0))/t80435-ccab2*t80423*t80432*1.0/(t80435*t80435*t80435) \
                   *(t80444*t80444)*2.0-ccab4*t80436*(t80437*t80437)*t80438*1.0/(t80449*t80449*t80449)*2.0+ccab2*t80432* \
                   t80424*t80452*t80436*(1.0/2.0)+ccab4*t80436*t80438*t80457*(t80423*t80424*3.0+t80432*t80424*t80436* \
                   3.0+gcab*t80423*t80424*t80429*6.0)-(ccab4*t80432*t80424*t80436*3.0)/t80449+ccab2*t80423*t80425*t80452* \
                   t80444*t80429*2.0-ccab1*gcab*1.0/(t80431*t80431*t80431)*t80423*t80424*t80429*(1.0/2.0)-(ccab3*gcab* \
                   t80423*t80424*t80429*(3.0/2.0))/t80443-ccab3*gcab*t80423*t80432*1.0/(t80443*t80443*t80443)*t80429* \
                   (t80439*t80439)*2.0+ccab3*gcab*t80423*t80432*t80425*t80461*t80439*3.0+ccab4*t80432*t80425*t80436*t80437* \
                   t80429*t80457*4.0+ccab3*gcab*t80423*t80432*t80461*t80429*(t80423*t80424*(3.0/2.0)+gcab*t80423*t80424* \
                   t80429*(3.0/2.0)))+t80510*t80512*t80515*((ccaa1*gcaa*t80425)/t80481+ccaa2*gamma_aa[index]*t80424*t80517* \
                   t80475*2.0-ccaa1*gamma_aa[index]*t80424*t80519*t80475-ccaa2*t80500*t80424*t80475*t80476*t80496-ccaa4* \
                   t80490*t80509*t80477*t80478*t80489+ccaa4*gamma_aa[index]*t80516*t80476*t80477*t80478*4.0+ccaa3*gcaa* \
                   t80518*t80475*t80476*t80479*3.0-ccaa3*gamma_aa[index]*gcaa*t80504*t80475*t80476*t80479*t80497)*(1.0/ \
                   4.0)-rho_a[index]*t80515*(t80512*(t80510*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index]) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa2*t80424*t80517*t80475*2.0-ccaa1*t80424*t80519*t80475*2.0-ccaa2*t80500*t80476* \
                   t80477*t80478*2.0+ccaa4*t80516*t80476*t80477*t80478*1.2E1-ccaa4*t80509*t80477*t80478*t80489*(t80424* \
                   t80475*1.2E1+t80476*t80477*t80478*1.2E1+gamma_aa[index]*gcaa*t80475*t80479*2.4E1)+ccaa1*gamma_aa[index]* \
                   gcaa*1.0/(t80481*t80481*t80481)*t80475*t80479*2.0+ccaa2*t80424*t80475*1.0/(t80484*t80484*t80484)*t80476* \
                   (t80496*t80496)*2.0+ccaa4*(t80490*t80490)*t80477*1.0/(t80495*t80495*t80495)*t80478*t80489*2.0+ccaa3* \
                   gamma_aa[index]*gcaa*t80518*t80475*t80479*6.0-ccaa2*gamma_aa[index]*t80500*t80424*t80475*t80496*4.0- \
                   ccaa4*gamma_aa[index]*t80490*t80509*t80476*t80477*t80478*8.0-ccaa3*gcaa*t80504*t80475*t80476*t80479* \
                   t80497*6.0-ccaa3*gamma_aa[index]*gcaa*t80475*t80476*t80479*t80497*(t80424*t80475*6.0+gamma_aa[index]* \
                   gcaa*t80475*t80479*6.0)+ccaa3*gamma_aa[index]*gcaa*(t80504*t80504)*t80475*t80476*t80479*1.0/(t80488* \
                   t80488*t80488)*2.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t80520*1.0/ \
                   pow(t80521,4.0/3.0)*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t80520*1.0/ \
                   pow(t80521,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t80524)/t80528+a_2*t80525*1.0/(t80528*t80528) \
                   +a_4*t80526*1.0/(t80528*t80528*t80528*t80528)+a_8*t80527*1.0/(t80528*t80528*t80528*t80528*t80528*t80528* \
                   t80528*t80528)+a_10*t80525*t80527*1.0/pow(t80528,1.0E1)+a_3*t80524*t80525*1.0/(t80528*t80528*t80528) \
                   +a_5*t80524*t80526*1.0/(t80528*t80528*t80528*t80528*t80528)+a_6*t80525*t80526*1.0/(t80528*t80528*t80528* \
                   t80528*t80528*t80528)+a_9*t80524*t80527*1.0/(t80528*t80528*t80528*t80528*t80528*t80528*t80528*t80528* \
                   t80528)+a_11*t80524*t80525*t80527*1.0/pow(t80528,1.1E1)+a_7*t80524*t80525*t80526*1.0/(t80528*t80528* \
                   t80528*t80528*t80528*t80528*t80528)+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83288 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83289 = c*t83288;
                double t83290 = sqrt(t83289);
                double t83291 = pow(t83289,3.0/2.0);
                double t83292 = c*c;
                double t83293 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83294 = 1.0/c0p;
                double t83295 = b1p*t83290;
                double t83296 = b3p*t83291;
                double t83297 = b4p*t83292*t83293;
                double t83298 = b2p*c*t83288;
                double t83299 = t83295+t83296+t83297+t83298;
                double t83300 = 1.0/t83299;
                double t83301 = t83300*t83294*(1.0/2.0);
                double t83302 = t83301+1.0;
                double t83303 = log(t83302);
                double t83304 = a1p*c*t83288;
                double t83305 = t83304+1.0;
                double t83306 = gcaa*gcaa;
                double t83307 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83308 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83309 = gamma_aa[index]*gamma_aa[index];
                double t83310 = t83306*t83306;
                double t83311 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83312 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83313 = gamma_aa[index]*gcaa*t83308;
                double t83314 = t83313+1.0;
                double t83315 = gamma_aa[index]*gcaa*t83308*2.0;
                double t83316 = t83306*t83307*t83309;
                double t83317 = t83315+t83316+1.0;
                double t83318 = gamma_aa[index]*gcaa*t83308*3.0;
                double t83319 = gamma_aa[index]*gcaa*t83312*t83306*t83309;
                double t83320 = t83306*t83307*t83309*3.0;
                double t83321 = t83320+t83318+t83319+1.0;
                double t83322 = t83309*t83309;
                double t83338 = gcaa*t83308*4.0;
                double t83339 = gamma_aa[index]*t83306*t83307*1.2E1;
                double t83340 = gcaa*t83312*t83306*t83309*1.2E1;
                double t83341 = gamma_aa[index]*t83310*t83311*t83309*4.0;
                double t83323 = t83340+t83341+t83338+t83339;
                double t83324 = gamma_aa[index]*gcaa*t83308*4.0;
                double t83325 = gamma_aa[index]*gcaa*t83312*t83306*t83309*4.0;
                double t83326 = t83306*t83307*t83309*6.0;
                double t83327 = t83310*t83311*t83322;
                double t83328 = t83324+t83325+t83326+t83327+1.0;
                double t83331 = gcaa*t83308*2.0;
                double t83332 = gamma_aa[index]*t83306*t83307*2.0;
                double t83329 = t83331+t83332;
                double t83330 = 1.0/(t83321*t83321);
                double t83333 = 1.0/(t83317*t83317);
                double t83334 = gcaa*t83308*3.0;
                double t83335 = gamma_aa[index]*t83306*t83307*6.0;
                double t83336 = gcaa*t83312*t83306*t83309*3.0;
                double t83337 = t83334+t83335+t83336;
                double t83342 = 1.0/(t83328*t83328);
                double t83343 = 1.0/tau_a[index];
                double t83344 = tau_a[index]-1.0/1.0E20;
                double t83345 = ( (t83344 > 0.0) ?  1.0 : 0.0 ) ;
                double t83346 = pow(2.0,1.0/3.0);
                double t83347 = t83346*2.0;
                double t83348 = t83347-2.0;
                double t83349 = two_13*2.0;
                double t83350 = t83349-2.0;
                double t83351 = 1.0/t83350;
                double t83352 = 1.0/c0f;
                double t83353 = b1f*t83290;
                double t83354 = b3f*t83291;
                double t83355 = b4f*t83292*t83293;
                double t83356 = b2f*c*t83288;
                double t83357 = t83353+t83354+t83355+t83356;
                double t83358 = 1.0/t83357;
                double t83359 = t83352*t83358*(1.0/2.0);
                double t83360 = t83359+1.0;
                double t83361 = log(t83360);
                double t83362 = a1f*c*t83288;
                double t83363 = t83362+1.0;
                double t83364 = c0f*t83361*t83363*2.0;
                double t83365 = c0p*t83303*t83305*2.0;
                double t83366 = 1.0/t83328;
                double t83367 = 1.0/t83317;
                double t83368 = 1.0/t83321;
                double t83369 = 1.0/(t83314*t83314);
                double t83370 = 1.0/kp;
                double t83371 = rho_a[index]*2.0;
                double t83372 = pow(rho_a[index],5.0/3.0);
                double t83373 = C_k*t83343*t83372;
                double t83374 = t83373-1.0;
                double t83375 = t83374*t83374;
                double t83376 = t83375*t83375;
                double t83377 = t83376*t83376;
                double t83378 = t83373+1.0;
                v_gamma_aa_gamma_aa_[index] = t83343*t83345*(t83365+t83351*t83348*(t83364-t83365))*((ccaa1*gcaa*t83308) \
                   /t83314+ccaa2*gamma_aa[index]*t83306*t83307*t83367*2.0-ccaa1*gamma_aa[index]*t83306*t83307*t83369- \
                   ccaa4*t83310*t83311*t83322*t83323*t83342-ccaa2*t83306*t83333*t83307*t83309*t83329+ccaa4*gamma_aa[index]* \
                   t83310*t83311*t83309*t83366*4.0+ccaa3*gcaa*t83312*t83306*t83309*t83368*3.0-ccaa3*gamma_aa[index]*gcaa* \
                   t83312*t83330*t83306*t83309*t83337)*(1.0/4.0)-rho_a[index]*(t83345*(t83343*(tau_a[index]*2.0-(gamma_aa[index]* \
                   (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0)+1.0)*(t83365+t83351*t83348*(t83364-c0p*t83303*t83305*2.0)) \
                   *(ccaa2*t83306*t83307*t83367*2.0-ccaa1*t83306*t83307*t83369*2.0-ccaa2*t83310*t83311*t83333*t83309* \
                   2.0+ccaa4*t83310*t83311*t83309*t83366*1.2E1-ccaa4*t83310*t83311*t83322*t83342*(t83306*t83307*1.2E1+ \
                   t83310*t83311*t83309*1.2E1+gamma_aa[index]*gcaa*t83312*t83306*2.4E1)+ccaa1*gamma_aa[index]*gcaa*t83312* \
                   1.0/(t83314*t83314*t83314)*t83306*2.0+ccaa4*t83310*t83311*t83322*(t83323*t83323)*1.0/(t83328*t83328* \
                   t83328)*2.0+ccaa2*t83306*t83307*1.0/(t83317*t83317*t83317)*t83309*(t83329*t83329)*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t83312*t83306*t83368*6.0-ccaa2*gamma_aa[index]*t83306*t83333*t83307*t83329*4.0-ccaa4*gamma_aa[index]* \
                   t83310*t83311*t83323*t83342*t83309*8.0-ccaa3*gcaa*t83312*t83330*t83306*t83309*t83337*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t83312*t83330*t83306*t83309*(t83306*t83307*6.0+gamma_aa[index]*gcaa*t83312*t83306*6.0)+ccaa3* \
                   gamma_aa[index]*gcaa*t83312*1.0/(t83321*t83321*t83321)*t83306*t83309*(t83337*t83337)*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t83370*1.0/pow(t83371,4.0/3.0)*1.0/pow(gamma_aa[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t83370*1.0/pow(t83371,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t83374)/t83378+a_2*t83375*1.0/(t83378*t83378)+a_4*t83376*1.0/(t83378*t83378*t83378*t83378) \
                   +a_8*t83377*1.0/(t83378*t83378*t83378*t83378*t83378*t83378*t83378*t83378)+a_10*t83375*t83377*1.0/pow(t83378,1.0E1) \
                   +a_3*t83374*t83375*1.0/(t83378*t83378*t83378)+a_5*t83374*t83376*1.0/(t83378*t83378*t83378*t83378*t83378) \
                   +a_6*t83375*t83376*1.0/(t83378*t83378*t83378*t83378*t83378*t83378)+a_9*t83374*t83377*1.0/(t83378*t83378* \
                   t83378*t83378*t83378*t83378*t83378*t83378*t83378)+a_11*t83374*t83375*t83377*1.0/pow(t83378,1.1E1)+ \
                   a_7*t83374*t83375*t83376*1.0/(t83378*t83378*t83378*t83378*t83378*t83378*t83378)+1.0)*(1.0/8.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80531 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80532 = c*t80531;
                double t80533 = sqrt(t80532);
                double t80534 = pow(t80532,3.0/2.0);
                double t80535 = c*c;
                double t80536 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80537 = 1.0/c0p;
                double t80538 = b1p*t80533;
                double t80539 = b3p*t80534;
                double t80540 = b4p*t80535*t80536;
                double t80541 = b2p*c*t80531;
                double t80542 = t80540+t80541+t80538+t80539;
                double t80543 = 1.0/t80542;
                double t80544 = t80543*t80537*(1.0/2.0);
                double t80545 = t80544+1.0;
                double t80546 = log(t80545);
                double t80547 = a1p*c*t80531;
                double t80548 = t80547+1.0;
                double t80549 = pow(2.0,1.0/3.0);
                double t80550 = t80549*2.0;
                double t80551 = t80550-2.0;
                double t80552 = two_13*2.0;
                double t80553 = t80552-2.0;
                double t80554 = 1.0/t80553;
                double t80555 = 1.0/c0f;
                double t80556 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80557 = c*t80556;
                double t80558 = sqrt(t80557);
                double t80559 = pow(t80557,3.0/2.0);
                double t80560 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80561 = b1p*t80558;
                double t80562 = b3p*t80559;
                double t80563 = b4p*t80560*t80535;
                double t80564 = b2p*c*t80556;
                double t80565 = t80561+t80562+t80563+t80564;
                double t80566 = 1.0/t80565;
                double t80567 = t80537*t80566*(1.0/2.0);
                double t80568 = t80567+1.0;
                double t80569 = log(t80568);
                double t80570 = a1p*c*t80556;
                double t80571 = t80570+1.0;
                double t80572 = c0p*t80571*t80569*2.0;
                double t80573 = rho_a[index]+rho_b[index];
                double t80574 = 1.0/pow(t80573,1.0/3.0);
                double t80575 = c*t80574;
                double t80576 = sqrt(t80575);
                double t80577 = pow(t80575,3.0/2.0);
                double t80578 = 1.0/pow(t80573,2.0/3.0);
                double t80579 = b1p*t80576;
                double t80580 = b3p*t80577;
                double t80581 = b4p*t80535*t80578;
                double t80582 = b2p*c*t80574;
                double t80583 = t80580+t80581+t80582+t80579;
                double t80584 = 1.0/t80583;
                double t80585 = t80537*t80584*(1.0/2.0);
                double t80586 = t80585+1.0;
                double t80587 = log(t80586);
                double t80588 = a1p*c*t80574;
                double t80589 = t80588+1.0;
                double t80590 = c0p*t80587*t80589*2.0;
                double t80591 = rho_a[index]-rho_b[index];
                double t80592 = t80591*t80591;
                double t80593 = 1.0/t80573;
                double t80594 = t80591*t80593;
                double t80595 = 1.0/(t80573*t80573*t80573*t80573);
                double t80596 = t80592*t80592;
                double t80597 = t80594+1.0;
                double t80598 = pow(t80597,4.0/3.0);
                double t80599 = -t80594+1.0;
                double t80600 = pow(t80599,4.0/3.0);
                double t80601 = t80600+t80598-2.0;
                double t80602 = gcab*gcab;
                double t80605 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80606 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80607 = gamma_aa[index]*t80605*(1.0/2.0);
                double t80608 = gamma_bb[index]*t80606*(1.0/2.0);
                double t80603 = t80607+t80608;
                double t80604 = t80603*t80603;
                double t80609 = t80602*t80602;
                double t80610 = t80604*t80604;
                double t80611 = t80602*t80604*3.0;
                double t80612 = gcab*t80602*t80603*t80604;
                double t80613 = gcab*t80603*3.0;
                double t80614 = t80611+t80612+t80613+1.0;
                double t80615 = t80602*t80604;
                double t80616 = gcab*t80603*2.0;
                double t80617 = t80615+t80616+1.0;
                double t80618 = t80602*t80604*6.0;
                double t80619 = gcab*t80602*t80603*t80604*4.0;
                double t80620 = t80610*t80609;
                double t80621 = gcab*t80603*4.0;
                double t80622 = t80620+t80621+t80618+t80619+1.0;
                double t80623 = 1.0/(t80617*t80617);
                double t80624 = gcab*t80605;
                double t80625 = t80602*t80603*t80605;
                double t80626 = t80624+t80625;
                double t80627 = gcab*t80606;
                double t80628 = t80602*t80603*t80606;
                double t80629 = t80627+t80628;
                double t80630 = gcab*t80603;
                double t80631 = t80630+1.0;
                double t80632 = gcab*t80605*2.0;
                double t80633 = t80602*t80603*t80605*6.0;
                double t80634 = gcab*t80602*t80604*t80605*6.0;
                double t80635 = t80603*t80604*t80605*t80609*2.0;
                double t80636 = t80632+t80633+t80634+t80635;
                double t80637 = 1.0/(t80622*t80622);
                double t80638 = gcab*t80606*2.0;
                double t80639 = t80602*t80603*t80606*6.0;
                double t80640 = gcab*t80602*t80604*t80606*6.0;
                double t80641 = t80603*t80604*t80606*t80609*2.0;
                double t80642 = t80640+t80641+t80638+t80639;
                double t80643 = gcab*t80605*(3.0/2.0);
                double t80644 = t80602*t80603*t80605*3.0;
                double t80645 = gcab*t80602*t80604*t80605*(3.0/2.0);
                double t80646 = t80643+t80644+t80645;
                double t80647 = 1.0/(t80614*t80614);
                double t80648 = gcab*t80606*(3.0/2.0);
                double t80649 = t80602*t80603*t80606*3.0;
                double t80650 = gcab*t80602*t80604*t80606*(3.0/2.0);
                double t80651 = t80650+t80648+t80649;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t80572-t80551*t80554*(t80572-c0f*log((t80555*(1.0/2.0) \
                   )/(b1f*t80558+b3f*t80559+b2f*c*t80556+b4f*t80560*t80535)+1.0)*(a1f*c*t80556+1.0)*2.0))+t80573*(t80590- \
                   t80601*t80554*t80595*t80596*(t80590-c0f*log((t80555*(1.0/2.0))/(b1f*t80576+b3f*t80577+b2f*c*t80574+ \
                   b4f*t80535*t80578)+1.0)*(a1f*c*t80574+1.0)*2.0)+(Aa*t80601*t80554*log((1.0/2.0)/(Aa*(b1a*t80576+b3a* \
                   t80577+b2a*c*t80574+b4a*t80535*t80578))+1.0)*(t80595*t80596-1.0)*(a1a*c*t80574+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t80551*t80554*(c0p*t80546*t80548*2.0-c0f*log((t80555*(1.0/2.0))/(b1f*t80533+b3f*t80534+b2f*c*t80531+ \
                   b4f*t80535*t80536)+1.0)*(a1f*c*t80531+1.0)*2.0)-c0p*t80546*t80548*2.0))*(ccab4*t80610*t80609*t80637* \
                   (t80602*t80605*t80606*3.0+t80604*t80605*t80606*t80609*3.0+gcab*t80602*t80603*t80605*t80606*6.0)+ccab1* \
                   t80602*1.0/(t80631*t80631)*t80605*t80606*(1.0/2.0)-(ccab2*t80602*t80605*t80606*(1.0/2.0))/t80617+ccab2* \
                   t80602*t80603*t80623*t80606*t80626+ccab2*t80602*t80603*t80605*t80623*t80629+ccab2*t80604*t80605*t80623* \
                   t80606*t80609*(1.0/2.0)-(ccab4*t80604*t80605*t80606*t80609*3.0)/t80622-ccab4*t80610*1.0/(t80622*t80622* \
                   t80622)*t80642*t80609*t80636*2.0-ccab2*t80602*t80604*1.0/(t80617*t80617*t80617)*t80626*t80629*2.0+ \
                   ccab3*gcab*t80602*t80604*t80605*t80651*t80647*(3.0/2.0)+ccab3*gcab*t80602*t80604*t80606*t80646*t80647* \
                   (3.0/2.0)+ccab4*t80603*t80604*t80605*t80642*t80609*t80637*2.0+ccab4*t80603*t80604*t80606*t80609*t80636* \
                   t80637*2.0+ccab3*gcab*t80602*t80603*t80604*t80647*(t80602*t80605*t80606*(3.0/2.0)+gcab*t80602*t80603* \
                   t80605*t80606*(3.0/2.0))-ccab1*gcab*t80602*t80603*1.0/(t80631*t80631*t80631)*t80605*t80606*(1.0/2.0) \
                   -(ccab3*gcab*t80602*t80603*t80605*t80606*(3.0/2.0))/t80614-ccab3*gcab*t80602*t80603*t80604*1.0/(t80614* \
                   t80614*t80614)*t80651*t80646*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80655 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80656 = c*t80655;
                double t80657 = sqrt(t80656);
                double t80658 = pow(t80656,3.0/2.0);
                double t80659 = c*c;
                double t80660 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80661 = 1.0/c0p;
                double t80662 = b1p*t80657;
                double t80663 = b3p*t80658;
                double t80664 = b4p*t80660*t80659;
                double t80665 = b2p*c*t80655;
                double t80666 = t80662+t80663+t80664+t80665;
                double t80667 = 1.0/t80666;
                double t80668 = t80661*t80667*(1.0/2.0);
                double t80669 = t80668+1.0;
                double t80670 = log(t80669);
                double t80671 = a1p*c*t80655;
                double t80672 = t80671+1.0;
                double t80673 = pow(2.0,1.0/3.0);
                double t80674 = t80673*2.0;
                double t80675 = t80674-2.0;
                double t80676 = two_13*2.0;
                double t80677 = t80676-2.0;
                double t80678 = 1.0/t80677;
                double t80679 = 1.0/c0f;
                double t80680 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80681 = c*t80680;
                double t80682 = sqrt(t80681);
                double t80683 = pow(t80681,3.0/2.0);
                double t80684 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80685 = b1p*t80682;
                double t80686 = b3p*t80683;
                double t80687 = b4p*t80684*t80659;
                double t80688 = b2p*c*t80680;
                double t80689 = t80685+t80686+t80687+t80688;
                double t80690 = 1.0/t80689;
                double t80691 = t80661*t80690*(1.0/2.0);
                double t80692 = t80691+1.0;
                double t80693 = log(t80692);
                double t80694 = a1p*c*t80680;
                double t80695 = t80694+1.0;
                double t80696 = c0p*t80693*t80695*2.0;
                double t80697 = rho_a[index]+rho_b[index];
                double t80698 = 1.0/pow(t80697,1.0/3.0);
                double t80699 = c*t80698;
                double t80700 = sqrt(t80699);
                double t80701 = pow(t80699,3.0/2.0);
                double t80702 = 1.0/pow(t80697,2.0/3.0);
                double t80703 = b1p*t80700;
                double t80704 = b3p*t80701;
                double t80705 = b4p*t80702*t80659;
                double t80706 = b2p*c*t80698;
                double t80707 = t80703+t80704+t80705+t80706;
                double t80708 = 1.0/t80707;
                double t80709 = t80661*t80708*(1.0/2.0);
                double t80710 = t80709+1.0;
                double t80711 = log(t80710);
                double t80712 = a1p*c*t80698;
                double t80713 = t80712+1.0;
                double t80714 = c0p*t80711*t80713*2.0;
                double t80715 = rho_a[index]-rho_b[index];
                double t80716 = t80715*t80715;
                double t80717 = 1.0/t80697;
                double t80718 = t80715*t80717;
                double t80719 = 1.0/(t80697*t80697*t80697*t80697);
                double t80720 = t80716*t80716;
                double t80721 = t80718+1.0;
                double t80722 = pow(t80721,4.0/3.0);
                double t80723 = -t80718+1.0;
                double t80724 = pow(t80723,4.0/3.0);
                double t80725 = t80722+t80724-2.0;
                double t80726 = gcab*gcab;
                double t80727 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t80728 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80729 = gamma_aa[index]*t80728*(1.0/2.0);
                double t80730 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80731 = gamma_bb[index]*t80730*(1.0/2.0);
                double t80732 = t80731+t80729;
                double t80733 = gcab*t80732;
                double t80734 = t80733+1.0;
                double t80735 = t80732*t80732;
                double t80736 = t80726*t80735;
                double t80737 = gcab*t80732*2.0;
                double t80738 = t80736+t80737+1.0;
                double t80739 = t80726*t80726;
                double t80756 = gcab*t80730*2.0;
                double t80757 = t80730*t80732*t80726*6.0;
                double t80758 = gcab*t80730*t80726*t80735*6.0;
                double t80759 = t80730*t80732*t80735*t80739*2.0;
                double t80740 = t80756+t80757+t80758+t80759;
                double t80741 = t80735*t80735;
                double t80761 = gcab*t80730*(3.0/2.0);
                double t80762 = t80730*t80732*t80726*3.0;
                double t80763 = gcab*t80730*t80726*t80735*(3.0/2.0);
                double t80742 = t80761+t80762+t80763;
                double t80743 = t80726*t80735*3.0;
                double t80744 = gcab*t80732*t80726*t80735;
                double t80745 = gcab*t80732*3.0;
                double t80746 = t80743+t80744+t80745+1.0;
                double t80753 = gcab*t80730;
                double t80754 = t80730*t80732*t80726;
                double t80747 = t80753+t80754;
                double t80748 = t80726*t80735*6.0;
                double t80749 = gcab*t80732*t80726*t80735*4.0;
                double t80750 = t80741*t80739;
                double t80751 = gcab*t80732*4.0;
                double t80752 = t80750+t80751+t80748+t80749+1.0;
                double t80755 = 1.0/(t80738*t80738);
                double t80760 = 1.0/(t80752*t80752);
                double t80764 = 1.0/(t80746*t80746);
                double t80765 = b1f*t80682;
                double t80766 = b3f*t80683;
                double t80767 = b4f*t80684*t80659;
                double t80768 = b2f*c*t80680;
                double t80769 = t80765+t80766+t80767+t80768;
                double t80770 = 1.0/t80769;
                double t80771 = t80770*t80679*(1.0/2.0);
                double t80772 = t80771+1.0;
                double t80773 = log(t80772);
                double t80774 = a1f*c*t80680;
                double t80775 = t80774+1.0;
                double t80816 = c0f*t80773*t80775*2.0;
                double t80776 = -t80816+t80696;
                double t80777 = t80696-t80675*t80776*t80678;
                double t80778 = gcaa*gcaa;
                double t80779 = gamma_bb[index]*gamma_bb[index];
                double t80780 = t80778*t80778;
                double t80781 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t80782 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t80783 = gamma_bb[index]*gcaa*t80730;
                double t80784 = t80783+1.0;
                double t80785 = gamma_bb[index]*gcaa*t80730*2.0;
                double t80786 = t80727*t80778*t80779;
                double t80787 = t80785+t80786+1.0;
                double t80788 = gamma_bb[index]*gcaa*t80730*3.0;
                double t80789 = gamma_bb[index]*gcaa*t80782*t80778*t80779;
                double t80790 = t80727*t80778*t80779*3.0;
                double t80791 = t80790+t80788+t80789+1.0;
                double t80792 = t80779*t80779;
                double t80808 = gcaa*t80730*4.0;
                double t80809 = gamma_bb[index]*t80727*t80778*1.2E1;
                double t80810 = gcaa*t80782*t80778*t80779*1.2E1;
                double t80811 = gamma_bb[index]*t80780*t80781*t80779*4.0;
                double t80793 = t80810+t80811+t80808+t80809;
                double t80794 = gamma_bb[index]*gcaa*t80730*4.0;
                double t80795 = gamma_bb[index]*gcaa*t80782*t80778*t80779*4.0;
                double t80796 = t80727*t80778*t80779*6.0;
                double t80797 = t80780*t80781*t80792;
                double t80798 = t80794+t80795+t80796+t80797+1.0;
                double t80801 = gcaa*t80730*2.0;
                double t80802 = gamma_bb[index]*t80727*t80778*2.0;
                double t80799 = t80801+t80802;
                double t80800 = 1.0/(t80791*t80791);
                double t80803 = 1.0/(t80787*t80787);
                double t80804 = gcaa*t80730*3.0;
                double t80805 = gamma_bb[index]*t80727*t80778*6.0;
                double t80806 = gcaa*t80782*t80778*t80779*3.0;
                double t80807 = t80804+t80805+t80806;
                double t80812 = 1.0/(t80798*t80798);
                double t80813 = 1.0/tau_b[index];
                double t80814 = tau_b[index]-1.0/1.0E20;
                double t80815 = ( (t80814 > 0.0) ?  1.0 : 0.0 ) ;
                double t80817 = 1.0/t80798;
                double t80818 = 1.0/t80787;
                double t80819 = 1.0/t80791;
                double t80820 = 1.0/(t80784*t80784);
                double t80821 = 1.0/kp;
                double t80822 = rho_b[index]*2.0;
                double t80823 = pow(rho_b[index],5.0/3.0);
                double t80824 = C_k*t80813*t80823;
                double t80825 = t80824-1.0;
                double t80826 = t80825*t80825;
                double t80827 = t80826*t80826;
                double t80828 = t80827*t80827;
                double t80829 = t80824+1.0;
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t80777+t80697*(t80714-t80720*t80725*t80719*t80678*(t80714- \
                   c0f*log((t80679*(1.0/2.0))/(b1f*t80700+b3f*t80701+b2f*c*t80698+b4f*t80702*t80659)+1.0)*(a1f*c*t80698+ \
                   1.0)*2.0)+(Aa*t80725*t80678*log((1.0/2.0)/(Aa*(b1a*t80700+b3a*t80701+b2a*c*t80698+b4a*t80702*t80659) \
                   )+1.0)*(t80720*t80719-1.0)*(a1a*c*t80698+1.0)*2.0)/d2fz0)+rho_a[index]*(t80675*t80678*(c0p*t80670* \
                   t80672*2.0-c0f*log((t80679*(1.0/2.0))/(b1f*t80657+b3f*t80658+b2f*c*t80655+b4f*t80660*t80659)+1.0)* \
                   (a1f*c*t80655+1.0)*2.0)-c0p*t80670*t80672*2.0))*(ccab1*1.0/(t80734*t80734)*t80726*t80727*(1.0/2.0) \
                   -(ccab2*t80726*t80727*(1.0/2.0))/t80738-ccab4*(t80740*t80740)*t80741*1.0/(t80752*t80752*t80752)*t80739* \
                   2.0-ccab2*t80726*t80735*1.0/(t80738*t80738*t80738)*(t80747*t80747)*2.0+ccab2*t80735*t80727*t80755* \
                   t80739*(1.0/2.0)+ccab4*t80741*t80760*t80739*(t80726*t80727*3.0+t80735*t80727*t80739*3.0+gcab*t80732* \
                   t80726*t80727*6.0)-(ccab4*t80735*t80727*t80739*3.0)/t80752+ccab2*t80730*t80732*t80726*t80755*t80747* \
                   2.0-ccab1*gcab*t80732*1.0/(t80734*t80734*t80734)*t80726*t80727*(1.0/2.0)-(ccab3*gcab*t80732*t80726* \
                   t80727*(3.0/2.0))/t80746-ccab3*gcab*t80732*(t80742*t80742)*t80726*t80735*1.0/(t80746*t80746*t80746) \
                   *2.0+ccab3*gcab*t80730*t80742*t80726*t80735*t80764*3.0+ccab4*t80730*t80740*t80732*t80760*t80735*t80739* \
                   4.0+ccab3*gcab*t80732*t80726*t80735*t80764*(t80726*t80727*(3.0/2.0)+gcab*t80732*t80726*t80727*(3.0/ \
                   2.0)))+rho_b[index]*t80777*(t80815*(t80813*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index]) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa1*t80820*t80727*t80778*2.0-ccaa2*t80727*t80818*t80778*2.0+ccaa2*t80803*t80780* \
                   t80781*t80779*2.0-ccaa4*t80780*t80781*t80817*t80779*1.2E1+ccaa4*t80812*t80780*t80781*t80792*(t80727* \
                   t80778*1.2E1+t80780*t80781*t80779*1.2E1+gamma_bb[index]*gcaa*t80782*t80778*2.4E1)-ccaa1*gamma_bb[index]* \
                   gcaa*t80782*1.0/(t80784*t80784*t80784)*t80778*2.0-ccaa4*t80780*t80781*t80792*(t80793*t80793)*1.0/(t80798* \
                   t80798*t80798)*2.0-ccaa2*t80727*t80778*1.0/(t80787*t80787*t80787)*t80779*(t80799*t80799)*2.0-ccaa3* \
                   gamma_bb[index]*gcaa*t80782*t80819*t80778*6.0+ccaa2*gamma_bb[index]*t80803*t80727*t80778*t80799*4.0+ \
                   ccaa4*gamma_bb[index]*t80812*t80780*t80781*t80793*t80779*8.0+ccaa3*gcaa*t80800*t80807*t80782*t80778* \
                   t80779*6.0+ccaa3*gamma_bb[index]*gcaa*t80800*t80782*t80778*t80779*(t80727*t80778*6.0+gamma_bb[index]* \
                   gcaa*t80782*t80778*6.0)-ccaa3*gamma_bb[index]*gcaa*(t80807*t80807)*t80782*1.0/(t80791*t80791*t80791) \
                   *t80778*t80779*2.0)+t80813*t80815*(t80696+t80675*t80678*(t80816-t80696))*((ccaa1*gcaa*t80730)/t80784- \
                   ccaa1*gamma_bb[index]*t80820*t80727*t80778+ccaa2*gamma_bb[index]*t80727*t80818*t80778*2.0-ccaa4*t80812* \
                   t80780*t80781*t80792*t80793-ccaa2*t80803*t80727*t80778*t80779*t80799+ccaa4*gamma_bb[index]*t80780* \
                   t80781*t80817*t80779*4.0+ccaa3*gcaa*t80782*t80819*t80778*t80779*3.0-ccaa3*gamma_bb[index]*gcaa*t80800* \
                   t80807*t80782*t80778*t80779)*(1.0/4.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]) \
                   *t80821*1.0/pow(t80822,4.0/3.0)*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index]) \
                   *t80821*1.0/pow(t80822,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t80825)/t80829+a_2*t80826*1.0/(t80829* \
                   t80829)+a_4*t80827*1.0/(t80829*t80829*t80829*t80829)+a_8*t80828*1.0/(t80829*t80829*t80829*t80829*t80829* \
                   t80829*t80829*t80829)+a_10*t80826*t80828*1.0/pow(t80829,1.0E1)+a_3*t80825*t80826*1.0/(t80829*t80829* \
                   t80829)+a_5*t80825*t80827*1.0/(t80829*t80829*t80829*t80829*t80829)+a_6*t80826*t80827*1.0/(t80829*t80829* \
                   t80829*t80829*t80829*t80829)+a_9*t80825*t80828*1.0/(t80829*t80829*t80829*t80829*t80829*t80829*t80829* \
                   t80829*t80829)+a_11*t80825*t80826*t80828*1.0/pow(t80829,1.1E1)+a_7*t80825*t80826*t80827*1.0/(t80829* \
                   t80829*t80829*t80829*t80829*t80829*t80829)+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82167 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82168 = c*t82167;
                double t82169 = sqrt(t82168);
                double t82170 = pow(t82168,3.0/2.0);
                double t82171 = c*c;
                double t82172 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82173 = 1.0/c0p;
                double t82174 = b1p*t82169;
                double t82175 = b3p*t82170;
                double t82176 = b4p*t82171*t82172;
                double t82177 = b2p*c*t82167;
                double t82178 = t82174+t82175+t82176+t82177;
                double t82179 = 1.0/t82178;
                double t82180 = t82173*t82179*(1.0/2.0);
                double t82181 = t82180+1.0;
                double t82182 = log(t82181);
                double t82183 = a1p*c*t82167;
                double t82184 = t82183+1.0;
                double t82185 = gcaa*gcaa;
                double t82186 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82187 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82188 = gamma_bb[index]*gamma_bb[index];
                double t82189 = t82185*t82185;
                double t82190 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82191 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82192 = gamma_bb[index]*gcaa*t82187;
                double t82193 = t82192+1.0;
                double t82194 = gamma_bb[index]*gcaa*t82187*2.0;
                double t82195 = t82185*t82186*t82188;
                double t82196 = t82194+t82195+1.0;
                double t82197 = gamma_bb[index]*gcaa*t82187*3.0;
                double t82198 = gamma_bb[index]*gcaa*t82191*t82185*t82188;
                double t82199 = t82185*t82186*t82188*3.0;
                double t82200 = t82197+t82198+t82199+1.0;
                double t82201 = t82188*t82188;
                double t82217 = gcaa*t82187*4.0;
                double t82218 = gamma_bb[index]*t82185*t82186*1.2E1;
                double t82219 = gcaa*t82191*t82185*t82188*1.2E1;
                double t82220 = gamma_bb[index]*t82190*t82188*t82189*4.0;
                double t82202 = t82220+t82217+t82218+t82219;
                double t82203 = gamma_bb[index]*gcaa*t82187*4.0;
                double t82204 = gamma_bb[index]*gcaa*t82191*t82185*t82188*4.0;
                double t82205 = t82185*t82186*t82188*6.0;
                double t82206 = t82201*t82190*t82189;
                double t82207 = t82203+t82204+t82205+t82206+1.0;
                double t82210 = gcaa*t82187*2.0;
                double t82211 = gamma_bb[index]*t82185*t82186*2.0;
                double t82208 = t82210+t82211;
                double t82209 = 1.0/(t82200*t82200);
                double t82212 = 1.0/(t82196*t82196);
                double t82213 = gcaa*t82187*3.0;
                double t82214 = gamma_bb[index]*t82185*t82186*6.0;
                double t82215 = gcaa*t82191*t82185*t82188*3.0;
                double t82216 = t82213+t82214+t82215;
                double t82221 = 1.0/(t82207*t82207);
                double t82222 = 1.0/tau_b[index];
                double t82223 = tau_b[index]-1.0/1.0E20;
                double t82224 = ( (t82223 > 0.0) ?  1.0 : 0.0 ) ;
                double t82225 = pow(2.0,1.0/3.0);
                double t82226 = t82225*2.0;
                double t82227 = t82226-2.0;
                double t82228 = two_13*2.0;
                double t82229 = t82228-2.0;
                double t82230 = 1.0/t82229;
                double t82231 = 1.0/c0f;
                double t82232 = b1f*t82169;
                double t82233 = b3f*t82170;
                double t82234 = b4f*t82171*t82172;
                double t82235 = b2f*c*t82167;
                double t82236 = t82232+t82233+t82234+t82235;
                double t82237 = 1.0/t82236;
                double t82238 = t82231*t82237*(1.0/2.0);
                double t82239 = t82238+1.0;
                double t82240 = log(t82239);
                double t82241 = a1f*c*t82167;
                double t82242 = t82241+1.0;
                double t82243 = c0f*t82240*t82242*2.0;
                double t82244 = c0p*t82182*t82184*2.0;
                double t82245 = 1.0/t82207;
                double t82246 = 1.0/t82196;
                double t82247 = 1.0/t82200;
                double t82248 = 1.0/(t82193*t82193);
                double t82249 = 1.0/kp;
                double t82250 = rho_b[index]*2.0;
                double t82251 = pow(rho_b[index],5.0/3.0);
                double t82252 = C_k*t82222*t82251;
                double t82253 = t82252-1.0;
                double t82254 = t82253*t82253;
                double t82255 = t82254*t82254;
                double t82256 = t82255*t82255;
                double t82257 = t82252+1.0;
                v_gamma_bb_gamma_bb_[index] = t82222*t82224*(t82244+t82230*t82227*(t82243-t82244))*((ccaa1*gcaa*t82187) \
                   /t82193+ccaa2*gamma_bb[index]*t82246*t82185*t82186*2.0-ccaa1*gamma_bb[index]*t82185*t82248*t82186- \
                   ccaa4*t82201*t82202*t82221*t82190*t82189-ccaa2*t82212*t82208*t82185*t82186*t82188+ccaa4*gamma_bb[index]* \
                   t82190*t82245*t82188*t82189*4.0+ccaa3*gcaa*t82191*t82247*t82185*t82188*3.0-ccaa3*gamma_bb[index]*gcaa* \
                   t82216*t82191*t82209*t82185*t82188)*(1.0/4.0)-rho_b[index]*(t82224*(t82222*(tau_b[index]*2.0-(gamma_bb[index]* \
                   (1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(t82244+t82230*t82227*(t82243-c0p*t82182*t82184*2.0)) \
                   *(ccaa2*t82246*t82185*t82186*2.0-ccaa1*t82185*t82248*t82186*2.0-ccaa2*t82212*t82190*t82188*t82189* \
                   2.0+ccaa4*t82190*t82245*t82188*t82189*1.2E1-ccaa4*t82201*t82221*t82190*t82189*(t82185*t82186*1.2E1+ \
                   t82190*t82188*t82189*1.2E1+gamma_bb[index]*gcaa*t82191*t82185*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t82191* \
                   1.0/(t82193*t82193*t82193)*t82185*2.0+ccaa4*t82201*(t82202*t82202)*1.0/(t82207*t82207*t82207)*t82190* \
                   t82189*2.0+ccaa2*(t82208*t82208)*t82185*t82186*1.0/(t82196*t82196*t82196)*t82188*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t82191*t82247*t82185*6.0-ccaa2*gamma_bb[index]*t82212*t82208*t82185*t82186*4.0-ccaa4*gamma_bb[index]* \
                   t82202*t82221*t82190*t82188*t82189*8.0-ccaa3*gcaa*t82216*t82191*t82209*t82185*t82188*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t82191*t82209*t82185*t82188*(t82185*t82186*6.0+gamma_bb[index]*gcaa*t82191*t82185*6.0)+ccaa3* \
                   gamma_bb[index]*gcaa*1.0/(t82200*t82200*t82200)*(t82216*t82216)*t82191*t82185*t82188*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*1.0/pow(t82250,4.0/3.0)*t82249*1.0/pow(gamma_bb[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(t82250,2.0/3.0)*t82249*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t82253)/t82257+a_2*t82254*1.0/(t82257*t82257)+a_4*t82255*1.0/(t82257*t82257*t82257*t82257) \
                   +a_8*t82256*1.0/(t82257*t82257*t82257*t82257*t82257*t82257*t82257*t82257)+a_10*t82254*t82256*1.0/pow(t82257,1.0E1) \
                   +a_3*t82253*t82254*1.0/(t82257*t82257*t82257)+a_5*t82253*t82255*1.0/(t82257*t82257*t82257*t82257*t82257) \
                   +a_6*t82254*t82255*1.0/(t82257*t82257*t82257*t82257*t82257*t82257)+a_9*t82253*t82256*1.0/(t82257*t82257* \
                   t82257*t82257*t82257*t82257*t82257*t82257*t82257)+a_11*t82253*t82254*t82256*1.0/pow(t82257,1.1E1)+ \
                   a_7*t82253*t82254*t82255*1.0/(t82257*t82257*t82257*t82257*t82257*t82257*t82257)+1.0)*(1.0/8.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80831 = pow(rho_a[index],5.0/3.0);
                double t80832 = 1.0/(tau_a[index]*tau_a[index]);
                double t80833 = 1.0/tau_a[index];
                double t80834 = C_k*t80831*t80833;
                double t80835 = t80834+1.0;
                double t80836 = t80834-1.0;
                double t80837 = 1.0/(t80835*t80835);
                double t80838 = t80836*t80836;
                double t80839 = t80838*t80838;
                double t80840 = t80839*t80839;
                double t80841 = 1.0/pow(t80835,1.1E1);
                double t80842 = 1.0/(t80835*t80835*t80835);
                double t80843 = 1.0/(t80835*t80835*t80835*t80835);
                double t80844 = 1.0/(t80835*t80835*t80835*t80835*t80835);
                double t80845 = 1.0/(t80835*t80835*t80835*t80835*t80835*t80835);
                double t80846 = 1.0/(t80835*t80835*t80835*t80835*t80835*t80835*t80835);
                double t80847 = 1.0/(t80835*t80835*t80835*t80835*t80835*t80835*t80835*t80835);
                double t80848 = 1.0/(t80835*t80835*t80835*t80835*t80835*t80835*t80835*t80835*t80835);
                double t80849 = 1.0/pow(t80835,1.0E1);
                double t80850 = 1.0/(k*k);
                double t80851 = 1.0/kp;
                double t80852 = 1.0/(rho_a[index]*rho_a[index]);
                double t80853 = rho_a[index]*2.0;
                double t80854 = 1.0/pow(t80853,2.0/3.0);
                double t80855 = gamma_aa[index]*mu_*t80850*t80851*t80852*t80854*(1.0/4.0);
                double t80856 = t80855+1.0;
                double t80857 = 1.0/t80856;
                double t80858 = kp-kp*t80857+1.0;
                double t80859 = C_k*C_k;
                double t80860 = pow(rho_a[index],7.0/3.0);
                double t80861 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t80862 = 1.0/t80835;
                double t80863 = 1.0/pow(t80835,1.2E1);
                double t80864 = pow(rho_a[index],2.0/3.0);
                double t80865 = C_k*a_1*t80831*t80832*t80862;
                double t80866 = C_k*a_2*t80831*t80832*t80836*t80837*2.0;
                double t80867 = C_k*a_10*t80831*t80840*t80832*t80836*t80849*1.0E1;
                double t80868 = C_k*a_11*t80831*t80840*t80832*t80841*t80838*1.1E1;
                double t80869 = C_k*a_3*t80831*t80832*t80842*t80838*3.0;
                double t80870 = C_k*a_4*t80831*t80832*t80843*t80836*t80838*4.0;
                double t80871 = C_k*a_5*t80831*t80832*t80844*t80839*5.0;
                double t80872 = C_k*a_6*t80831*t80832*t80836*t80845*t80839*6.0;
                double t80873 = C_k*a_7*t80831*t80832*t80846*t80838*t80839*7.0;
                double t80874 = C_k*a_8*t80831*t80832*t80836*t80838*t80847*t80839*8.0;
                double t80875 = C_k*a_9*t80831*t80840*t80832*t80848*9.0;
                double t80876 = t80870+t80871+t80872+t80873+t80865+t80874+t80866+t80875+t80867+t80868+t80869-C_k* \
                   a_1*t80831*t80832*t80836*t80837-C_k*a_2*t80831*t80832*t80842*t80838*2.0-C_k*a_4*t80831*t80832*t80844* \
                   t80839*4.0-C_k*a_8*t80831*t80840*t80832*t80848*8.0-C_k*a_10*t80831*t80840*t80832*t80841*t80838*1.0E1- \
                   C_k*a_3*t80831*t80832*t80843*t80836*t80838*3.0-C_k*a_5*t80831*t80832*t80836*t80845*t80839*5.0-C_k* \
                   a_6*t80831*t80832*t80846*t80838*t80839*6.0-C_k*a_9*t80831*t80840*t80832*t80836*t80849*9.0-C_k*a_11* \
                   t80831*t80840*t80832*t80836*t80863*t80838*1.1E1-C_k*a_7*t80831*t80832*t80836*t80838*t80847*t80839* \
                   7.0;
                double t80877 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80878 = c*t80877;
                double t80879 = sqrt(t80878);
                double t80880 = pow(t80878,3.0/2.0);
                double t80881 = c*c;
                double t80882 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80883 = 1.0/c0p;
                double t80884 = b1p*t80879;
                double t80885 = b3p*t80880;
                double t80886 = b4p*t80881*t80882;
                double t80887 = b2p*c*t80877;
                double t80888 = t80884+t80885+t80886+t80887;
                double t80889 = 1.0/t80888;
                double t80890 = t80883*t80889*(1.0/2.0);
                double t80891 = t80890+1.0;
                double t80892 = log(t80891);
                double t80893 = a1p*c*t80877;
                double t80894 = t80893+1.0;
                double t80895 = tau_a[index]-1.0/1.0E20;
                double t80896 = tau_a[index]*2.0;
                double t80897 = 1.0/rho_a[index];
                double t80928 = gamma_aa[index]*t80897*(1.0/4.0);
                double t80898 = -t80928+t80896;
                double t80899 = gamma_aa[index]*gamma_aa[index];
                double t80900 = gcaa*gcaa;
                double t80901 = t80899*t80899;
                double t80902 = t80900*t80900;
                double t80903 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t80904 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80905 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t80906 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t80907 = pow(2.0,1.0/3.0);
                double t80908 = t80907*2.0;
                double t80909 = t80908-2.0;
                double t80910 = two_13*2.0;
                double t80911 = t80910-2.0;
                double t80912 = 1.0/t80911;
                double t80913 = 1.0/c0f;
                double t80914 = b1f*t80879;
                double t80915 = b3f*t80880;
                double t80916 = b4f*t80881*t80882;
                double t80917 = b2f*c*t80877;
                double t80918 = t80914+t80915+t80916+t80917;
                double t80919 = 1.0/t80918;
                double t80920 = t80913*t80919*(1.0/2.0);
                double t80921 = t80920+1.0;
                double t80922 = log(t80921);
                double t80923 = a1f*c*t80877;
                double t80924 = t80923+1.0;
                double t80925 = c0f*t80922*t80924*2.0;
                double t80926 = c0p*t80892*t80894*2.0;
                double t80927 = ( (t80895 > 0.0) ?  1.0 : 0.0 ) ;
                double t80958 = t80832*t80898*(1.0/2.0);
                double t80929 = t80833-t80958;
                double t80930 = t80927*t80929;
                double t80931 = 0.0 ;
                double t80932 = t80833*t80898*(1.0/2.0);
                double t80933 = t80932-1.0;
                double t80934 = t80931*t80933;
                double t80935 = t80930+t80934;
                double t80936 = gamma_aa[index]*gcaa*t80904*4.0;
                double t80937 = gamma_aa[index]*gcaa*t80900*t80905*t80899*4.0;
                double t80938 = t80900*t80906*t80899*6.0;
                double t80939 = t80901*t80902*t80903;
                double t80940 = t80936+t80937+t80938+t80939+1.0;
                double t80941 = 1.0/t80940;
                double t80942 = gamma_aa[index]*gcaa*t80904;
                double t80943 = t80942+1.0;
                double t80944 = 1.0/t80943;
                double t80945 = gamma_aa[index]*gcaa*t80904*3.0;
                double t80946 = gamma_aa[index]*gcaa*t80900*t80905*t80899;
                double t80947 = t80900*t80906*t80899*3.0;
                double t80948 = t80945+t80946+t80947+1.0;
                double t80949 = 1.0/t80948;
                double t80950 = gamma_aa[index]*gcaa*t80904*2.0;
                double t80951 = t80900*t80906*t80899;
                double t80952 = t80950+t80951+1.0;
                double t80953 = 1.0/t80952;
                double t80954 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t80955 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t80956 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t80957 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t80959 = 1.0/pow(rho_a[index],4.0/3.0);
                double t80960 = 1.0/pow(rho_a[index],5.0/3.0);
                double t80961 = 1.0/sqrt(t80878);
                double t80962 = 1.0/t80891;
                double t80963 = 1.0/(t80888*t80888);
                double t80964 = b4p*t80960*t80881*(2.0/3.0);
                double t80965 = b2p*c*t80959*(1.0/3.0);
                double t80966 = b1p*c*t80961*t80959*(1.0/6.0);
                double t80967 = b3p*c*t80959*t80879*(1.0/2.0);
                double t80968 = t80964+t80965+t80966+t80967;
                double t80969 = t80962*t80963*t80894*t80968;
                double t80970 = ccaa4*t80901*t80902*t80903*t80941;
                double t80971 = ccaa1*gamma_aa[index]*gcaa*t80904*t80944;
                double t80972 = ccaa3*gamma_aa[index]*gcaa*t80900*t80905*t80949*t80899;
                double t80973 = ccaa2*t80900*t80906*t80953*t80899;
                double t80974 = ccaa0+t80970+t80971+t80972+t80973;
                double t80975 = t80925-t80926;
                double t80976 = t80912*t80909*t80975;
                double t80977 = t80926+t80976;
                v_rho_a_tau_a_[index] = (X-1.0)*(t80858*t80876+rho_a[index]*t80858*(C_k*a_1*t80832*t80862*t80864* \
                   (5.0/3.0)-a_1*t80860*t80861*t80837*t80859*(1.0E1/3.0)+a_2*t80860*t80861*t80837*t80859*(1.0E1/3.0)+ \
                   a_1*t80842*t80860*t80861*t80836*t80859*(1.0E1/3.0)+a_10*t80840*t80860*t80861*t80849*t80859*1.5E2-a_2* \
                   t80842*t80860*t80861*t80836*t80859*(4.0E1/3.0)+a_2*t80860*t80843*t80861*t80838*t80859*1.0E1+a_3*t80842* \
                   t80860*t80861*t80836*t80859*1.0E1-a_3*t80860*t80843*t80861*t80838*t80859*3.0E1+a_4*t80860*t80843*t80861* \
                   t80838*t80859*2.0E1+a_4*t80860*t80861*t80845*t80839*t80859*(1.0E2/3.0)-a_5*t80860*t80861*t80845*t80839* \
                   t80859*(2.5E2/3.0)+a_6*t80860*t80861*t80845*t80839*t80859*5.0E1+a_8*t80840*t80860*t80861*t80849*t80859* \
                   1.2E2-a_9*t80840*t80860*t80861*t80849*t80859*2.7E2-C_k*a_1*t80832*t80836*t80837*t80864*(5.0/3.0)-C_k* \
                   a_2*t80832*t80842*t80864*t80838*(1.0E1/3.0)+C_k*a_2*t80832*t80836*t80837*t80864*(1.0E1/3.0)+C_k*a_3* \
                   t80832*t80842*t80864*t80838*5.0-C_k*a_4*t80832*t80844*t80864*t80839*(2.0E1/3.0)+C_k*a_5*t80832*t80844* \
                   t80864*t80839*(2.5E1/3.0)-C_k*a_8*t80840*t80832*t80864*t80848*(4.0E1/3.0)+C_k*a_9*t80840*t80832*t80864* \
                   t80848*1.5E1-C_k*a_10*t80840*t80832*t80841*t80864*t80838*(5.0E1/3.0)+C_k*a_11*t80840*t80832*t80841* \
                   t80864*t80838*(5.5E1/3.0)+C_k*a_10*t80840*t80832*t80836*t80864*t80849*(5.0E1/3.0)-C_k*a_3*t80832*t80843* \
                   t80836*t80864*t80838*5.0+C_k*a_4*t80832*t80843*t80836*t80864*t80838*(2.0E1/3.0)-C_k*a_5*t80832*t80836* \
                   t80845*t80864*t80839*(2.5E1/3.0)+C_k*a_6*t80832*t80836*t80845*t80864*t80839*1.0E1-C_k*a_6*t80832*t80846* \
                   t80864*t80838*t80839*1.0E1+C_k*a_7*t80832*t80846*t80864*t80838*t80839*(3.5E1/3.0)-C_k*a_9*t80840*t80832* \
                   t80836*t80864*t80849*1.5E1-a_10*t80840*t80841*t80860*t80861*t80836*t80859*(1.0E3/3.0)+a_11*t80840* \
                   t80841*t80860*t80861*t80836*t80859*(5.5E2/3.0)+a_10*t80840*t80860*t80861*t80863*t80838*t80859*(5.5E2/ \
                   3.0)-a_11*t80840*t80860*t80861*t80863*t80838*t80859*(1.21E3/3.0)+a_3*t80860*t80861*t80844*t80836*t80838* \
                   t80859*2.0E1-a_4*t80860*t80861*t80844*t80836*t80838*t80859*(1.6E2/3.0)+a_5*t80860*t80861*t80844*t80836* \
                   t80838*t80859*(1.0E2/3.0)+a_5*t80860*t80861*t80836*t80846*t80839*t80859*5.0E1-a_6*t80860*t80861*t80836* \
                   t80846*t80839*t80859*1.2E2+a_6*t80860*t80861*t80838*t80847*t80839*t80859*7.0E1+a_7*t80860*t80861*t80836* \
                   t80846*t80839*t80859*7.0E1-a_7*t80860*t80861*t80838*t80847*t80839*t80859*(4.9E2/3.0)+a_8*t80860*t80861* \
                   t80838*t80847*t80839*t80859*(2.8E2/3.0)+a_9*t80840*t80841*t80860*t80861*t80836*t80859*1.5E2+a_11*t80840* \
                   t80860*t80861*1.0/pow(t80835,1.3E1)*t80836*t80838*t80859*2.2E2-C_k*a_11*t80840*t80832*t80836*t80863* \
                   t80864*t80838*(5.5E1/3.0)-C_k*a_7*t80832*t80836*t80864*t80838*t80847*t80839*(3.5E1/3.0)+C_k*a_8*t80832* \
                   t80836*t80864*t80838*t80847*t80839*(4.0E1/3.0)+a_7*t80860*t80861*t80836*t80838*t80839*t80848*t80859* \
                   (2.8E2/3.0)-a_8*t80860*t80861*t80836*t80838*t80839*t80848*t80859*(6.4E2/3.0)+a_9*t80860*t80861*t80836* \
                   t80838*t80839*t80848*t80859*1.2E2)-kp*rho_a[index]*1.0/(t80856*t80856)*t80876*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t80850*t80851*t80854*(1.0/2.0)+gamma_aa[index]*mu_*t80850* \
                   t80851*t80852*1.0/pow(t80853,5.0/3.0)*(1.0/3.0)))-t80935*t80974*(t80926+t80912*t80909*(t80925-c0p* \
                   t80892*t80894*2.0))+rho_a[index]*t80935*t80974*(-t80969+t80912*t80909*(t80969-(t80924*1.0/(t80918* \
                   t80918)*(b2f*c*t80959*(1.0/3.0)+b4f*t80960*t80881*(2.0/3.0)+b1f*c*t80961*t80959*(1.0/6.0)+b3f*c*t80959* \
                   t80879*(1.0/2.0)))/t80921+a1f*c*c0f*t80922*t80959*(2.0/3.0)-a1p*c*c0p*t80892*t80959*(2.0/3.0))+a1p* \
                   c*c0p*t80892*t80959*(2.0/3.0))+rho_a[index]*t80935*t80977*(ccaa1*gamma_aa[index]*gcaa*t80944*t80955* \
                   (8.0/3.0)+ccaa4*t80901*t80902*t80941*t80957*(3.2E1/3.0)+ccaa2*t80900*t80953*t80954*t80899*(1.6E1/3.0) \
                   -ccaa1*t80900*1.0/(t80943*t80943)*t80954*t80899*(8.0/3.0)-ccaa2*t80900*t80906*1.0/(t80952*t80952)* \
                   t80899*(gamma_aa[index]*gcaa*t80955*(1.6E1/3.0)+t80900*t80954*t80899*(1.6E1/3.0))-ccaa4*t80901*t80902* \
                   t80903*1.0/(t80940*t80940)*(gamma_aa[index]*gcaa*t80955*(3.2E1/3.0)+t80901*t80902*t80957*(3.2E1/3.0) \
                   +t80900*t80954*t80899*3.2E1+gamma_aa[index]*gcaa*t80900*t80956*t80899*3.2E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t80900*t80956*t80949*t80899*8.0-ccaa3*gamma_aa[index]*gcaa*t80900*t80905*1.0/(t80948*t80948)* \
                   t80899*(gamma_aa[index]*gcaa*t80955*8.0+t80900*t80954*t80899*1.6E1+gamma_aa[index]*gcaa*t80900*t80956* \
                   t80899*8.0))-gamma_aa[index]*t80931*t80833*t80974*t80977*t80897*(1.0/8.0)+gamma_aa[index]*t80832*t80927* \
                   t80974*t80977*t80897*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83385 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83386 = c*t83385;
                double t83387 = sqrt(t83386);
                double t83388 = pow(t83386,3.0/2.0);
                double t83389 = c*c;
                double t83390 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83391 = 1.0/c0p;
                double t83392 = b1p*t83387;
                double t83393 = b3p*t83388;
                double t83394 = b4p*t83390*t83389;
                double t83395 = b2p*c*t83385;
                double t83396 = t83392+t83393+t83394+t83395;
                double t83397 = 1.0/t83396;
                double t83398 = t83391*t83397*(1.0/2.0);
                double t83399 = t83398+1.0;
                double t83400 = log(t83399);
                double t83401 = a1p*c*t83385;
                double t83402 = t83401+1.0;
                double t83403 = tau_a[index]-1.0/1.0E20;
                double t83404 = 1.0/tau_a[index];
                double t83405 = tau_a[index]*2.0;
                double t83406 = 1.0/rho_a[index];
                double t83455 = gamma_aa[index]*t83406*(1.0/4.0);
                double t83407 = t83405-t83455;
                double t83408 = gamma_aa[index]*gamma_aa[index];
                double t83409 = gcaa*gcaa;
                double t83410 = t83408*t83408;
                double t83411 = t83409*t83409;
                double t83412 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83413 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83414 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83415 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83416 = 1.0/(tau_a[index]*tau_a[index]);
                double t83417 = pow(rho_a[index],5.0/3.0);
                double t83418 = C_k*t83404*t83417;
                double t83419 = t83418+1.0;
                double t83420 = t83418-1.0;
                double t83421 = 1.0/(t83419*t83419);
                double t83422 = t83420*t83420;
                double t83423 = t83422*t83422;
                double t83424 = t83423*t83423;
                double t83425 = 1.0/pow(t83419,1.1E1);
                double t83426 = 1.0/(t83419*t83419*t83419);
                double t83427 = 1.0/(t83419*t83419*t83419*t83419);
                double t83428 = 1.0/(t83419*t83419*t83419*t83419*t83419);
                double t83429 = 1.0/(t83419*t83419*t83419*t83419*t83419*t83419);
                double t83430 = 1.0/(t83419*t83419*t83419*t83419*t83419*t83419*t83419);
                double t83431 = 1.0/(t83419*t83419*t83419*t83419*t83419*t83419*t83419*t83419);
                double t83432 = 1.0/(t83419*t83419*t83419*t83419*t83419*t83419*t83419*t83419*t83419);
                double t83433 = 1.0/pow(t83419,1.0E1);
                double t83434 = pow(2.0,1.0/3.0);
                double t83435 = t83434*2.0;
                double t83436 = t83435-2.0;
                double t83437 = two_13*2.0;
                double t83438 = t83437-2.0;
                double t83439 = 1.0/t83438;
                double t83440 = 1.0/c0f;
                double t83441 = b1f*t83387;
                double t83442 = b3f*t83388;
                double t83443 = b4f*t83390*t83389;
                double t83444 = b2f*c*t83385;
                double t83445 = t83441+t83442+t83443+t83444;
                double t83446 = 1.0/t83445;
                double t83447 = t83440*t83446*(1.0/2.0);
                double t83448 = t83447+1.0;
                double t83449 = log(t83448);
                double t83450 = a1f*c*t83385;
                double t83451 = t83450+1.0;
                double t83452 = c0f*t83451*t83449*2.0;
                double t83453 = c0p*t83400*t83402*2.0;
                double t83454 = ( (t83403 > 0.0) ?  1.0 : 0.0 ) ;
                double t83485 = t83407*t83416*(1.0/2.0);
                double t83456 = t83404-t83485;
                double t83457 = t83454*t83456;
                double t83458 = 0.0 ;
                double t83459 = t83404*t83407*(1.0/2.0);
                double t83460 = t83459-1.0;
                double t83461 = t83460*t83458;
                double t83462 = t83461+t83457;
                double t83463 = gamma_aa[index]*gcaa*t83413*4.0;
                double t83464 = gamma_aa[index]*gcaa*t83414*t83408*t83409*4.0;
                double t83465 = t83415*t83408*t83409*6.0;
                double t83466 = t83410*t83411*t83412;
                double t83467 = t83463+t83464+t83465+t83466+1.0;
                double t83468 = 1.0/t83467;
                double t83469 = gamma_aa[index]*gcaa*t83413;
                double t83470 = t83469+1.0;
                double t83471 = 1.0/t83470;
                double t83472 = gamma_aa[index]*gcaa*t83413*3.0;
                double t83473 = gamma_aa[index]*gcaa*t83414*t83408*t83409;
                double t83474 = t83415*t83408*t83409*3.0;
                double t83475 = t83472+t83473+t83474+1.0;
                double t83476 = 1.0/t83475;
                double t83477 = gamma_aa[index]*gcaa*t83413*2.0;
                double t83478 = t83415*t83408*t83409;
                double t83479 = t83477+t83478+1.0;
                double t83480 = 1.0/t83479;
                double t83481 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t83482 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t83483 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t83484 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t83486 = 1.0/pow(rho_a[index],4.0/3.0);
                double t83487 = 1.0/pow(rho_a[index],5.0/3.0);
                double t83488 = 1.0/sqrt(t83386);
                double t83489 = 1.0/t83399;
                double t83490 = 1.0/(t83396*t83396);
                double t83491 = b4p*t83487*t83389*(2.0/3.0);
                double t83492 = b2p*c*t83486*(1.0/3.0);
                double t83493 = b1p*c*t83486*t83488*(1.0/6.0);
                double t83494 = b3p*c*t83387*t83486*(1.0/2.0);
                double t83495 = t83491+t83492+t83493+t83494;
                double t83496 = t83402*t83490*t83495*t83489;
                double t83497 = ccaa4*t83410*t83411*t83412*t83468;
                double t83498 = ccaa1*gamma_aa[index]*gcaa*t83413*t83471;
                double t83499 = ccaa3*gamma_aa[index]*gcaa*t83414*t83408*t83409*t83476;
                double t83500 = ccaa2*t83415*t83408*t83480*t83409;
                double t83501 = ccaa0+t83500+t83497+t83498+t83499;
                double t83502 = X-1.0;
                double t83503 = 1.0/(k*k);
                double t83504 = 1.0/kp;
                double t83505 = 1.0/(rho_a[index]*rho_a[index]);
                double t83506 = rho_a[index]*2.0;
                double t83507 = 1.0/pow(t83506,2.0/3.0);
                double t83508 = gamma_aa[index]*mu_*t83503*t83504*t83505*t83507*(1.0/4.0);
                double t83509 = t83508+1.0;
                double t83510 = 1.0/t83509;
                double t83511 = kp-kp*t83510+1.0;
                double t83512 = C_k*C_k;
                double t83513 = pow(rho_a[index],7.0/3.0);
                double t83514 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t83515 = 1.0/t83419;
                double t83516 = 1.0/pow(t83419,1.2E1);
                double t83517 = pow(rho_a[index],2.0/3.0);
                double t83518 = t83452-t83453;
                double t83519 = t83436*t83518*t83439;
                double t83520 = t83453+t83519;
                double t83521 = C_k*a_1*t83416*t83515*t83417;
                double t83522 = C_k*a_2*t83420*t83421*t83416*t83417*2.0;
                double t83523 = C_k*a_10*t83420*t83424*t83433*t83416*t83417*1.0E1;
                double t83524 = C_k*a_11*t83422*t83424*t83416*t83425*t83417*1.1E1;
                double t83525 = C_k*a_3*t83422*t83416*t83417*t83426*3.0;
                double t83526 = C_k*a_4*t83420*t83422*t83416*t83417*t83427*4.0;
                double t83527 = C_k*a_5*t83423*t83416*t83417*t83428*5.0;
                double t83528 = C_k*a_6*t83420*t83423*t83416*t83417*t83429*6.0;
                double t83529 = C_k*a_7*t83430*t83422*t83423*t83416*t83417*7.0;
                double t83530 = C_k*a_8*t83420*t83422*t83431*t83423*t83416*t83417*8.0;
                double t83531 = C_k*a_9*t83432*t83424*t83416*t83417*9.0;
                double t83532 = t83521+t83530+t83522+t83531+t83523+t83524+t83525+t83526+t83527+t83528+t83529-C_k* \
                   a_1*t83420*t83421*t83416*t83417-C_k*a_2*t83422*t83416*t83417*t83426*2.0-C_k*a_4*t83423*t83416*t83417* \
                   t83428*4.0-C_k*a_8*t83432*t83424*t83416*t83417*8.0-C_k*a_10*t83422*t83424*t83416*t83425*t83417*1.0E1- \
                   C_k*a_3*t83420*t83422*t83416*t83417*t83427*3.0-C_k*a_5*t83420*t83423*t83416*t83417*t83429*5.0-C_k* \
                   a_6*t83430*t83422*t83423*t83416*t83417*6.0-C_k*a_9*t83420*t83424*t83433*t83416*t83417*9.0-C_k*a_11* \
                   t83420*t83422*t83424*t83416*t83417*t83516*1.1E1-C_k*a_7*t83420*t83422*t83431*t83423*t83416*t83417* \
                   7.0;
                v_rho_a_tau_a_[index] = t83502*t83511*t83532-t83501*t83462*(t83453+t83436*t83439*(t83452-c0p*t83400* \
                   t83402*2.0))+rho_a[index]*t83502*t83511*(C_k*a_1*t83416*t83515*t83517*(5.0/3.0)-a_1*t83421*t83512* \
                   t83513*t83514*(1.0E1/3.0)+a_2*t83421*t83512*t83513*t83514*(1.0E1/3.0)+a_1*t83420*t83512*t83513*t83514* \
                   t83426*(1.0E1/3.0)+a_10*t83512*t83513*t83424*t83433*t83514*1.5E2-a_2*t83420*t83512*t83513*t83514*t83426* \
                   (4.0E1/3.0)+a_2*t83422*t83512*t83513*t83514*t83427*1.0E1+a_3*t83420*t83512*t83513*t83514*t83426*1.0E1- \
                   a_3*t83422*t83512*t83513*t83514*t83427*3.0E1+a_4*t83422*t83512*t83513*t83514*t83427*2.0E1+a_4*t83512* \
                   t83423*t83513*t83514*t83429*(1.0E2/3.0)-a_5*t83512*t83423*t83513*t83514*t83429*(2.5E2/3.0)+a_6*t83512* \
                   t83423*t83513*t83514*t83429*5.0E1+a_8*t83512*t83513*t83424*t83433*t83514*1.2E2-a_9*t83512*t83513*t83424* \
                   t83433*t83514*2.7E2-C_k*a_1*t83420*t83421*t83416*t83517*(5.0/3.0)+C_k*a_2*t83420*t83421*t83416*t83517* \
                   (1.0E1/3.0)-C_k*a_2*t83422*t83416*t83426*t83517*(1.0E1/3.0)+C_k*a_3*t83422*t83416*t83426*t83517*5.0- \
                   C_k*a_4*t83423*t83416*t83517*t83428*(2.0E1/3.0)+C_k*a_5*t83423*t83416*t83517*t83428*(2.5E1/3.0)-C_k* \
                   a_8*t83432*t83424*t83416*t83517*(4.0E1/3.0)+C_k*a_9*t83432*t83424*t83416*t83517*1.5E1+C_k*a_10*t83420* \
                   t83424*t83433*t83416*t83517*(5.0E1/3.0)-C_k*a_10*t83422*t83424*t83416*t83425*t83517*(5.0E1/3.0)+C_k* \
                   a_11*t83422*t83424*t83416*t83425*t83517*(5.5E1/3.0)-C_k*a_3*t83420*t83422*t83416*t83427*t83517*5.0+ \
                   C_k*a_4*t83420*t83422*t83416*t83427*t83517*(2.0E1/3.0)-C_k*a_5*t83420*t83423*t83416*t83517*t83429* \
                   (2.5E1/3.0)-C_k*a_6*t83430*t83422*t83423*t83416*t83517*1.0E1+C_k*a_6*t83420*t83423*t83416*t83517*t83429* \
                   1.0E1+C_k*a_7*t83430*t83422*t83423*t83416*t83517*(3.5E1/3.0)-C_k*a_9*t83420*t83424*t83433*t83416*t83517* \
                   1.5E1-a_10*t83420*t83512*t83513*t83424*t83514*t83425*(1.0E3/3.0)+a_11*t83420*t83512*t83513*t83424* \
                   t83514*t83425*(5.5E2/3.0)+a_10*t83422*t83512*t83513*t83424*t83514*t83516*(5.5E2/3.0)-a_11*t83422*t83512* \
                   t83513*t83424*t83514*t83516*(1.21E3/3.0)+a_3*t83420*t83422*t83512*t83513*t83514*t83428*2.0E1-a_4*t83420* \
                   t83422*t83512*t83513*t83514*t83428*(1.6E2/3.0)+a_5*t83420*t83430*t83512*t83423*t83513*t83514*5.0E1+ \
                   a_5*t83420*t83422*t83512*t83513*t83514*t83428*(1.0E2/3.0)-a_6*t83420*t83430*t83512*t83423*t83513*t83514* \
                   1.2E2+a_6*t83422*t83431*t83512*t83423*t83513*t83514*7.0E1+a_7*t83420*t83430*t83512*t83423*t83513*t83514* \
                   7.0E1-a_7*t83422*t83431*t83512*t83423*t83513*t83514*(4.9E2/3.0)+a_8*t83422*t83431*t83512*t83423*t83513* \
                   t83514*(2.8E2/3.0)+a_9*t83420*t83512*t83513*t83424*t83514*t83425*1.5E2+a_11*t83420*t83422*t83512*t83513* \
                   t83424*t83514*1.0/pow(t83419,1.3E1)*2.2E2-C_k*a_11*t83420*t83422*t83424*t83416*t83516*t83517*(5.5E1/ \
                   3.0)-C_k*a_7*t83420*t83422*t83431*t83423*t83416*t83517*(3.5E1/3.0)+C_k*a_8*t83420*t83422*t83431*t83423* \
                   t83416*t83517*(4.0E1/3.0)+a_7*t83420*t83422*t83512*t83423*t83432*t83513*t83514*(2.8E2/3.0)-a_8*t83420* \
                   t83422*t83512*t83423*t83432*t83513*t83514*(6.4E2/3.0)+a_9*t83420*t83422*t83512*t83423*t83432*t83513* \
                   t83514*1.2E2)+rho_a[index]*t83501*t83462*(-t83496+t83436*t83439*(t83496-(t83451*1.0/(t83445*t83445) \
                   *(b2f*c*t83486*(1.0/3.0)+b4f*t83487*t83389*(2.0/3.0)+b1f*c*t83486*t83488*(1.0/6.0)+b3f*c*t83387*t83486* \
                   (1.0/2.0)))/t83448+a1f*c*c0f*t83449*t83486*(2.0/3.0)-a1p*c*c0p*t83400*t83486*(2.0/3.0))+a1p*c*c0p* \
                   t83400*t83486*(2.0/3.0))+rho_a[index]*t83520*t83462*(ccaa1*gamma_aa[index]*gcaa*t83471*t83482*(8.0/ \
                   3.0)+ccaa4*t83410*t83411*t83484*t83468*(3.2E1/3.0)+ccaa2*t83408*t83480*t83409*t83481*(1.6E1/3.0)-ccaa1* \
                   1.0/(t83470*t83470)*t83408*t83409*t83481*(8.0/3.0)-ccaa2*t83415*t83408*t83409*1.0/(t83479*t83479)* \
                   (gamma_aa[index]*gcaa*t83482*(1.6E1/3.0)+t83408*t83409*t83481*(1.6E1/3.0))-ccaa4*t83410*t83411*t83412* \
                   1.0/(t83467*t83467)*(gamma_aa[index]*gcaa*t83482*(3.2E1/3.0)+t83410*t83411*t83484*(3.2E1/3.0)+t83408* \
                   t83409*t83481*3.2E1+gamma_aa[index]*gcaa*t83408*t83409*t83483*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t83408* \
                   t83409*t83483*t83476*8.0-ccaa3*gamma_aa[index]*gcaa*t83414*t83408*t83409*1.0/(t83475*t83475)*(gamma_aa[index]* \
                   gcaa*t83482*8.0+t83408*t83409*t83481*1.6E1+gamma_aa[index]*gcaa*t83408*t83409*t83483*8.0))+gamma_aa[index]* \
                   t83501*t83520*t83406*t83416*t83454*(1.0/8.0)-gamma_aa[index]*t83501*t83520*t83404*t83406*t83458*(1.0/ \
                   8.0)-kp*rho_a[index]*t83502*t83532*1.0/(t83509*t83509)*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index])*t83503*t83504*t83507*(1.0/2.0)+gamma_aa[index]*mu_*t83503*t83504*t83505*1.0/pow(t83506,5.0/ \
                   3.0)*(1.0/3.0));
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80981 = pow(rho_b[index],5.0/3.0);
                double t80982 = 1.0/(tau_b[index]*tau_b[index]);
                double t80983 = 1.0/tau_b[index];
                double t80984 = C_k*t80981*t80983;
                double t80985 = t80984+1.0;
                double t80986 = t80984-1.0;
                double t80987 = 1.0/(t80985*t80985);
                double t80988 = t80986*t80986;
                double t80989 = t80988*t80988;
                double t80990 = t80989*t80989;
                double t80991 = 1.0/pow(t80985,1.1E1);
                double t80992 = 1.0/(t80985*t80985*t80985);
                double t80993 = 1.0/(t80985*t80985*t80985*t80985);
                double t80994 = 1.0/(t80985*t80985*t80985*t80985*t80985);
                double t80995 = 1.0/(t80985*t80985*t80985*t80985*t80985*t80985);
                double t80996 = 1.0/(t80985*t80985*t80985*t80985*t80985*t80985*t80985);
                double t80997 = 1.0/(t80985*t80985*t80985*t80985*t80985*t80985*t80985*t80985);
                double t80998 = 1.0/(t80985*t80985*t80985*t80985*t80985*t80985*t80985*t80985*t80985);
                double t80999 = 1.0/pow(t80985,1.0E1);
                double t81000 = 1.0/(k*k);
                double t81001 = 1.0/kp;
                double t81002 = 1.0/(rho_b[index]*rho_b[index]);
                double t81003 = rho_b[index]*2.0;
                double t81004 = 1.0/pow(t81003,2.0/3.0);
                double t81005 = gamma_bb[index]*mu_*t81000*t81001*t81002*t81004*(1.0/4.0);
                double t81006 = t81005+1.0;
                double t81007 = 1.0/t81006;
                double t81008 = kp-kp*t81007+1.0;
                double t81009 = C_k*C_k;
                double t81010 = pow(rho_b[index],7.0/3.0);
                double t81011 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t81012 = 1.0/t80985;
                double t81013 = 1.0/pow(t80985,1.2E1);
                double t81014 = pow(rho_b[index],2.0/3.0);
                double t81015 = C_k*a_1*t80981*t80982*t81012;
                double t81016 = C_k*a_2*t80981*t80982*t80986*t80987*2.0;
                double t81017 = C_k*a_10*t80981*t80990*t80982*t80986*t80999*1.0E1;
                double t81018 = C_k*a_11*t80981*t80990*t80982*t80991*t80988*1.1E1;
                double t81019 = C_k*a_3*t80981*t80982*t80992*t80988*3.0;
                double t81020 = C_k*a_4*t80981*t80982*t80993*t80986*t80988*4.0;
                double t81021 = C_k*a_5*t80981*t80982*t80994*t80989*5.0;
                double t81022 = C_k*a_6*t80981*t80982*t80986*t80995*t80989*6.0;
                double t81023 = C_k*a_7*t80981*t80982*t80996*t80988*t80989*7.0;
                double t81024 = C_k*a_8*t80981*t80982*t80986*t80988*t80997*t80989*8.0;
                double t81025 = C_k*a_9*t80981*t80990*t80982*t80998*9.0;
                double t81026 = t81020+t81021+t81022+t81023+t81015+t81024+t81016+t81025+t81017+t81018+t81019-C_k* \
                   a_1*t80981*t80982*t80986*t80987-C_k*a_2*t80981*t80982*t80992*t80988*2.0-C_k*a_4*t80981*t80982*t80994* \
                   t80989*4.0-C_k*a_8*t80981*t80990*t80982*t80998*8.0-C_k*a_10*t80981*t80990*t80982*t80991*t80988*1.0E1- \
                   C_k*a_3*t80981*t80982*t80993*t80986*t80988*3.0-C_k*a_5*t80981*t80982*t80986*t80995*t80989*5.0-C_k* \
                   a_6*t80981*t80982*t80996*t80988*t80989*6.0-C_k*a_9*t80981*t80990*t80982*t80986*t80999*9.0-C_k*a_11* \
                   t80981*t80990*t80982*t80986*t80988*t81013*1.1E1-C_k*a_7*t80981*t80982*t80986*t80988*t80997*t80989* \
                   7.0;
                double t81027 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81028 = c*t81027;
                double t81029 = sqrt(t81028);
                double t81030 = pow(t81028,3.0/2.0);
                double t81031 = c*c;
                double t81032 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81033 = 1.0/c0p;
                double t81034 = b1p*t81029;
                double t81035 = b3p*t81030;
                double t81036 = b4p*t81031*t81032;
                double t81037 = b2p*c*t81027;
                double t81038 = t81034+t81035+t81036+t81037;
                double t81039 = 1.0/t81038;
                double t81040 = t81033*t81039*(1.0/2.0);
                double t81041 = t81040+1.0;
                double t81042 = log(t81041);
                double t81043 = a1p*c*t81027;
                double t81044 = t81043+1.0;
                double t81045 = tau_b[index]-1.0/1.0E20;
                double t81046 = tau_b[index]*2.0;
                double t81047 = 1.0/rho_b[index];
                double t81078 = gamma_bb[index]*t81047*(1.0/4.0);
                double t81048 = t81046-t81078;
                double t81049 = gamma_bb[index]*gamma_bb[index];
                double t81050 = gcaa*gcaa;
                double t81051 = t81049*t81049;
                double t81052 = t81050*t81050;
                double t81053 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81054 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81055 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81056 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81057 = pow(2.0,1.0/3.0);
                double t81058 = t81057*2.0;
                double t81059 = t81058-2.0;
                double t81060 = two_13*2.0;
                double t81061 = t81060-2.0;
                double t81062 = 1.0/t81061;
                double t81063 = 1.0/c0f;
                double t81064 = b1f*t81029;
                double t81065 = b3f*t81030;
                double t81066 = b4f*t81031*t81032;
                double t81067 = b2f*c*t81027;
                double t81068 = t81064+t81065+t81066+t81067;
                double t81069 = 1.0/t81068;
                double t81070 = t81063*t81069*(1.0/2.0);
                double t81071 = t81070+1.0;
                double t81072 = log(t81071);
                double t81073 = a1f*c*t81027;
                double t81074 = t81073+1.0;
                double t81075 = c0f*t81072*t81074*2.0;
                double t81076 = c0p*t81042*t81044*2.0;
                double t81077 = ( (t81045 > 0.0) ?  1.0 : 0.0 ) ;
                double t81108 = t80982*t81048*(1.0/2.0);
                double t81079 = t80983-t81108;
                double t81080 = t81077*t81079;
                double t81081 = 0.0 ;
                double t81082 = t80983*t81048*(1.0/2.0);
                double t81083 = t81082-1.0;
                double t81084 = t81081*t81083;
                double t81085 = t81080+t81084;
                double t81086 = gamma_bb[index]*gcaa*t81054*4.0;
                double t81087 = gamma_bb[index]*gcaa*t81050*t81055*t81049*4.0;
                double t81088 = t81050*t81056*t81049*6.0;
                double t81089 = t81051*t81052*t81053;
                double t81090 = t81086+t81087+t81088+t81089+1.0;
                double t81091 = 1.0/t81090;
                double t81092 = gamma_bb[index]*gcaa*t81054;
                double t81093 = t81092+1.0;
                double t81094 = 1.0/t81093;
                double t81095 = gamma_bb[index]*gcaa*t81054*3.0;
                double t81096 = gamma_bb[index]*gcaa*t81050*t81055*t81049;
                double t81097 = t81050*t81056*t81049*3.0;
                double t81098 = t81095+t81096+t81097+1.0;
                double t81099 = 1.0/t81098;
                double t81100 = gamma_bb[index]*gcaa*t81054*2.0;
                double t81101 = t81050*t81056*t81049;
                double t81102 = t81100+t81101+1.0;
                double t81103 = 1.0/t81102;
                double t81104 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t81105 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t81106 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t81107 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t81109 = 1.0/pow(rho_b[index],4.0/3.0);
                double t81110 = 1.0/pow(rho_b[index],5.0/3.0);
                double t81111 = 1.0/sqrt(t81028);
                double t81112 = 1.0/t81041;
                double t81113 = 1.0/(t81038*t81038);
                double t81114 = b4p*t81110*t81031*(2.0/3.0);
                double t81115 = b2p*c*t81109*(1.0/3.0);
                double t81116 = b1p*c*t81111*t81109*(1.0/6.0);
                double t81117 = b3p*c*t81109*t81029*(1.0/2.0);
                double t81118 = t81114+t81115+t81116+t81117;
                double t81119 = t81112*t81113*t81044*t81118;
                double t81120 = ccaa4*t81051*t81052*t81053*t81091;
                double t81121 = ccaa1*gamma_bb[index]*gcaa*t81054*t81094;
                double t81122 = ccaa3*gamma_bb[index]*gcaa*t81050*t81055*t81049*t81099;
                double t81123 = ccaa2*t81103*t81050*t81056*t81049;
                double t81124 = ccaa0+t81120+t81121+t81122+t81123;
                double t81125 = t81075-t81076;
                double t81126 = t81062*t81125*t81059;
                double t81127 = t81126+t81076;
                v_rho_b_tau_b_[index] = (X-1.0)*(t81008*t81026+rho_b[index]*t81008*(C_k*a_1*t80982*t81012*t81014* \
                   (5.0/3.0)-a_1*t80987*t81010*t81011*t81009*(1.0E1/3.0)+a_2*t80987*t81010*t81011*t81009*(1.0E1/3.0)+ \
                   a_1*t80992*t80986*t81010*t81011*t81009*(1.0E1/3.0)+a_10*t80990*t80999*t81010*t81011*t81009*1.5E2-a_2* \
                   t80992*t80986*t81010*t81011*t81009*(4.0E1/3.0)+a_2*t80993*t80988*t81010*t81011*t81009*1.0E1+a_3*t80992* \
                   t80986*t81010*t81011*t81009*1.0E1-a_3*t80993*t80988*t81010*t81011*t81009*3.0E1+a_4*t80993*t80988*t81010* \
                   t81011*t81009*2.0E1+a_4*t80995*t80989*t81010*t81011*t81009*(1.0E2/3.0)-a_5*t80995*t80989*t81010*t81011* \
                   t81009*(2.5E2/3.0)+a_6*t80995*t80989*t81010*t81011*t81009*5.0E1+a_8*t80990*t80999*t81010*t81011*t81009* \
                   1.2E2-a_9*t80990*t80999*t81010*t81011*t81009*2.7E2-C_k*a_1*t80982*t80986*t80987*t81014*(5.0/3.0)-C_k* \
                   a_2*t80982*t80992*t80988*t81014*(1.0E1/3.0)+C_k*a_2*t80982*t80986*t80987*t81014*(1.0E1/3.0)+C_k*a_3* \
                   t80982*t80992*t80988*t81014*5.0-C_k*a_4*t80982*t80994*t80989*t81014*(2.0E1/3.0)+C_k*a_5*t80982*t80994* \
                   t80989*t81014*(2.5E1/3.0)-C_k*a_8*t80990*t80982*t80998*t81014*(4.0E1/3.0)+C_k*a_9*t80990*t80982*t80998* \
                   t81014*1.5E1-C_k*a_10*t80990*t80982*t80991*t80988*t81014*(5.0E1/3.0)+C_k*a_11*t80990*t80982*t80991* \
                   t80988*t81014*(5.5E1/3.0)+C_k*a_10*t80990*t80982*t80986*t80999*t81014*(5.0E1/3.0)-C_k*a_3*t80982*t80993* \
                   t80986*t80988*t81014*5.0+C_k*a_4*t80982*t80993*t80986*t80988*t81014*(2.0E1/3.0)-C_k*a_5*t80982*t80986* \
                   t80995*t80989*t81014*(2.5E1/3.0)+C_k*a_6*t80982*t80986*t80995*t80989*t81014*1.0E1-C_k*a_6*t80982*t80996* \
                   t80988*t80989*t81014*1.0E1+C_k*a_7*t80982*t80996*t80988*t80989*t81014*(3.5E1/3.0)-C_k*a_9*t80990*t80982* \
                   t80986*t80999*t81014*1.5E1-a_10*t80990*t80991*t80986*t81010*t81011*t81009*(1.0E3/3.0)+a_11*t80990* \
                   t80991*t80986*t81010*t81011*t81009*(5.5E2/3.0)+a_10*t80990*t80988*t81010*t81011*t81013*t81009*(5.5E2/ \
                   3.0)-a_11*t80990*t80988*t81010*t81011*t81013*t81009*(1.21E3/3.0)+a_3*t80994*t80986*t80988*t81010*t81011* \
                   t81009*2.0E1-a_4*t80994*t80986*t80988*t81010*t81011*t81009*(1.6E2/3.0)+a_5*t80994*t80986*t80988*t81010* \
                   t81011*t81009*(1.0E2/3.0)+a_5*t80986*t80996*t80989*t81010*t81011*t81009*5.0E1-a_6*t80986*t80996*t80989* \
                   t81010*t81011*t81009*1.2E2+a_6*t80988*t80997*t80989*t81010*t81011*t81009*7.0E1+a_7*t80986*t80996*t80989* \
                   t81010*t81011*t81009*7.0E1-a_7*t80988*t80997*t80989*t81010*t81011*t81009*(4.9E2/3.0)+a_8*t80988*t80997* \
                   t80989*t81010*t81011*t81009*(2.8E2/3.0)+a_9*t80990*t80991*t80986*t81010*t81011*t81009*1.5E2+a_11*t80990* \
                   1.0/pow(t80985,1.3E1)*t80986*t80988*t81010*t81011*t81009*2.2E2-C_k*a_11*t80990*t80982*t80986*t80988* \
                   t81013*t81014*(5.5E1/3.0)-C_k*a_7*t80982*t80986*t80988*t80997*t80989*t81014*(3.5E1/3.0)+C_k*a_8*t80982* \
                   t80986*t80988*t80997*t80989*t81014*(4.0E1/3.0)+a_7*t80986*t80988*t80989*t80998*t81010*t81011*t81009* \
                   (2.8E2/3.0)-a_8*t80986*t80988*t80989*t80998*t81010*t81011*t81009*(6.4E2/3.0)+a_9*t80986*t80988*t80989* \
                   t80998*t81010*t81011*t81009*1.2E2)-kp*rho_b[index]*1.0/(t81006*t81006)*t81026*(gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t81000*t81001*t81004*(1.0/2.0)+gamma_bb[index]*mu_*t81000* \
                   t81001*t81002*1.0/pow(t81003,5.0/3.0)*(1.0/3.0)))-t81124*t81085*(t81076+t81062*t81059*(t81075-c0p* \
                   t81042*t81044*2.0))+rho_b[index]*t81124*t81085*(-t81119+t81062*t81059*(t81119-(t81074*1.0/(t81068* \
                   t81068)*(b2f*c*t81109*(1.0/3.0)+b4f*t81110*t81031*(2.0/3.0)+b1f*c*t81111*t81109*(1.0/6.0)+b3f*c*t81109* \
                   t81029*(1.0/2.0)))/t81071+a1f*c*c0f*t81072*t81109*(2.0/3.0)-a1p*c*c0p*t81042*t81109*(2.0/3.0))+a1p* \
                   c*c0p*t81042*t81109*(2.0/3.0))+rho_b[index]*t81127*t81085*(ccaa1*gamma_bb[index]*gcaa*t81105*t81094* \
                   (8.0/3.0)+ccaa2*t81103*t81050*t81104*t81049*(1.6E1/3.0)+ccaa4*t81051*t81052*t81107*t81091*(3.2E1/3.0) \
                   -ccaa1*t81050*t81104*1.0/(t81093*t81093)*t81049*(8.0/3.0)-ccaa2*1.0/(t81102*t81102)*t81050*t81056* \
                   t81049*(gamma_bb[index]*gcaa*t81105*(1.6E1/3.0)+t81050*t81104*t81049*(1.6E1/3.0))-ccaa4*t81051*t81052* \
                   t81053*1.0/(t81090*t81090)*(gamma_bb[index]*gcaa*t81105*(3.2E1/3.0)+t81051*t81052*t81107*(3.2E1/3.0) \
                   +t81050*t81104*t81049*3.2E1+gamma_bb[index]*gcaa*t81050*t81106*t81049*3.2E1)+ccaa3*gamma_bb[index]* \
                   gcaa*t81050*t81106*t81049*t81099*8.0-ccaa3*gamma_bb[index]*gcaa*t81050*t81055*t81049*1.0/(t81098*t81098) \
                   *(gamma_bb[index]*gcaa*t81105*8.0+t81050*t81104*t81049*1.6E1+gamma_bb[index]*gcaa*t81050*t81106*t81049* \
                   8.0))-gamma_bb[index]*t80983*t81124*t81081*t81127*t81047*(1.0/8.0)+gamma_bb[index]*t80982*t81124*t81127* \
                   t81047*t81077*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82262 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82263 = c*t82262;
                double t82264 = sqrt(t82263);
                double t82265 = pow(t82263,3.0/2.0);
                double t82266 = c*c;
                double t82267 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82268 = 1.0/c0p;
                double t82269 = b1p*t82264;
                double t82270 = b3p*t82265;
                double t82271 = b4p*t82266*t82267;
                double t82272 = b2p*c*t82262;
                double t82273 = t82270+t82271+t82272+t82269;
                double t82274 = 1.0/t82273;
                double t82275 = t82274*t82268*(1.0/2.0);
                double t82276 = t82275+1.0;
                double t82277 = log(t82276);
                double t82278 = a1p*c*t82262;
                double t82279 = t82278+1.0;
                double t82280 = tau_b[index]-1.0/1.0E20;
                double t82281 = 1.0/tau_b[index];
                double t82282 = tau_b[index]*2.0;
                double t82283 = 1.0/rho_b[index];
                double t82332 = gamma_bb[index]*t82283*(1.0/4.0);
                double t82284 = -t82332+t82282;
                double t82285 = gamma_bb[index]*gamma_bb[index];
                double t82286 = gcaa*gcaa;
                double t82287 = t82285*t82285;
                double t82288 = t82286*t82286;
                double t82289 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82290 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82291 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82292 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82293 = 1.0/(tau_b[index]*tau_b[index]);
                double t82294 = pow(rho_b[index],5.0/3.0);
                double t82295 = C_k*t82281*t82294;
                double t82296 = t82295+1.0;
                double t82297 = t82295-1.0;
                double t82298 = 1.0/(t82296*t82296);
                double t82299 = t82297*t82297;
                double t82300 = t82299*t82299;
                double t82301 = t82300*t82300;
                double t82302 = 1.0/pow(t82296,1.1E1);
                double t82303 = 1.0/(t82296*t82296*t82296);
                double t82304 = 1.0/(t82296*t82296*t82296*t82296);
                double t82305 = 1.0/(t82296*t82296*t82296*t82296*t82296);
                double t82306 = 1.0/(t82296*t82296*t82296*t82296*t82296*t82296);
                double t82307 = 1.0/(t82296*t82296*t82296*t82296*t82296*t82296*t82296);
                double t82308 = 1.0/(t82296*t82296*t82296*t82296*t82296*t82296*t82296*t82296);
                double t82309 = 1.0/(t82296*t82296*t82296*t82296*t82296*t82296*t82296*t82296*t82296);
                double t82310 = 1.0/pow(t82296,1.0E1);
                double t82311 = pow(2.0,1.0/3.0);
                double t82312 = t82311*2.0;
                double t82313 = t82312-2.0;
                double t82314 = two_13*2.0;
                double t82315 = t82314-2.0;
                double t82316 = 1.0/t82315;
                double t82317 = 1.0/c0f;
                double t82318 = b1f*t82264;
                double t82319 = b3f*t82265;
                double t82320 = b4f*t82266*t82267;
                double t82321 = b2f*c*t82262;
                double t82322 = t82320+t82321+t82318+t82319;
                double t82323 = 1.0/t82322;
                double t82324 = t82323*t82317*(1.0/2.0);
                double t82325 = t82324+1.0;
                double t82326 = log(t82325);
                double t82327 = a1f*c*t82262;
                double t82328 = t82327+1.0;
                double t82329 = c0f*t82326*t82328*2.0;
                double t82330 = c0p*t82277*t82279*2.0;
                double t82331 = ( (t82280 > 0.0) ?  1.0 : 0.0 ) ;
                double t82362 = t82284*t82293*(1.0/2.0);
                double t82333 = t82281-t82362;
                double t82334 = t82331*t82333;
                double t82335 = 0.0 ;
                double t82336 = t82281*t82284*(1.0/2.0);
                double t82337 = t82336-1.0;
                double t82338 = t82335*t82337;
                double t82339 = t82334+t82338;
                double t82340 = gamma_bb[index]*gcaa*t82290*4.0;
                double t82341 = gamma_bb[index]*gcaa*t82291*t82285*t82286*4.0;
                double t82342 = t82292*t82285*t82286*6.0;
                double t82343 = t82287*t82288*t82289;
                double t82344 = t82340+t82341+t82342+t82343+1.0;
                double t82345 = 1.0/t82344;
                double t82346 = gamma_bb[index]*gcaa*t82290;
                double t82347 = t82346+1.0;
                double t82348 = 1.0/t82347;
                double t82349 = gamma_bb[index]*gcaa*t82290*3.0;
                double t82350 = gamma_bb[index]*gcaa*t82291*t82285*t82286;
                double t82351 = t82292*t82285*t82286*3.0;
                double t82352 = t82350+t82351+t82349+1.0;
                double t82353 = 1.0/t82352;
                double t82354 = gamma_bb[index]*gcaa*t82290*2.0;
                double t82355 = t82292*t82285*t82286;
                double t82356 = t82354+t82355+1.0;
                double t82357 = 1.0/t82356;
                double t82358 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t82359 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t82360 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t82361 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t82363 = 1.0/pow(rho_b[index],4.0/3.0);
                double t82364 = 1.0/pow(rho_b[index],5.0/3.0);
                double t82365 = 1.0/sqrt(t82263);
                double t82366 = 1.0/t82276;
                double t82367 = 1.0/(t82273*t82273);
                double t82368 = b4p*t82364*t82266*(2.0/3.0);
                double t82369 = b2p*c*t82363*(1.0/3.0);
                double t82370 = b1p*c*t82363*t82365*(1.0/6.0);
                double t82371 = b3p*c*t82264*t82363*(1.0/2.0);
                double t82372 = t82370+t82371+t82368+t82369;
                double t82373 = t82372*t82366*t82367*t82279;
                double t82374 = ccaa4*t82345*t82287*t82288*t82289;
                double t82375 = ccaa1*gamma_bb[index]*gcaa*t82290*t82348;
                double t82376 = ccaa3*gamma_bb[index]*gcaa*t82353*t82291*t82285*t82286;
                double t82377 = ccaa2*t82292*t82285*t82357*t82286;
                double t82378 = ccaa0+t82374+t82375+t82376+t82377;
                double t82379 = X-1.0;
                double t82380 = 1.0/(k*k);
                double t82381 = 1.0/kp;
                double t82382 = 1.0/(rho_b[index]*rho_b[index]);
                double t82383 = rho_b[index]*2.0;
                double t82384 = 1.0/pow(t82383,2.0/3.0);
                double t82385 = gamma_bb[index]*mu_*t82380*t82381*t82382*t82384*(1.0/4.0);
                double t82386 = t82385+1.0;
                double t82387 = 1.0/t82386;
                double t82388 = kp-kp*t82387+1.0;
                double t82389 = C_k*C_k;
                double t82390 = pow(rho_b[index],7.0/3.0);
                double t82391 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t82392 = 1.0/t82296;
                double t82393 = 1.0/pow(t82296,1.2E1);
                double t82394 = pow(rho_b[index],2.0/3.0);
                double t82395 = t82330-t82329;
                double t82397 = t82313*t82316*t82395;
                double t82396 = t82330-t82397;
                double t82398 = C_k*a_1*t82293*t82392*t82294;
                double t82399 = C_k*a_2*t82293*t82294*t82297*t82298*2.0;
                double t82400 = C_k*a_10*t82301*t82310*t82293*t82294*t82297*1.0E1;
                double t82401 = C_k*a_11*t82301*t82302*t82293*t82294*t82299*1.1E1;
                double t82402 = C_k*a_3*t82303*t82293*t82294*t82299*3.0;
                double t82403 = C_k*a_4*t82304*t82293*t82294*t82297*t82299*4.0;
                double t82404 = C_k*a_5*t82300*t82305*t82293*t82294*5.0;
                double t82405 = C_k*a_6*t82300*t82306*t82293*t82294*t82297*6.0;
                double t82406 = C_k*a_7*t82300*t82307*t82293*t82294*t82299*7.0;
                double t82407 = C_k*a_8*t82300*t82308*t82293*t82294*t82297*t82299*8.0;
                double t82408 = C_k*a_9*t82301*t82309*t82293*t82294*9.0;
                double t82409 = t82400+t82401+t82402+t82403+t82404+t82405+t82406+t82407+t82408+t82398+t82399-C_k* \
                   a_1*t82293*t82294*t82297*t82298-C_k*a_2*t82303*t82293*t82294*t82299*2.0-C_k*a_4*t82300*t82305*t82293* \
                   t82294*4.0-C_k*a_8*t82301*t82309*t82293*t82294*8.0-C_k*a_10*t82301*t82302*t82293*t82294*t82299*1.0E1- \
                   C_k*a_3*t82304*t82293*t82294*t82297*t82299*3.0-C_k*a_5*t82300*t82306*t82293*t82294*t82297*5.0-C_k* \
                   a_6*t82300*t82307*t82293*t82294*t82299*6.0-C_k*a_9*t82301*t82310*t82293*t82294*t82297*9.0-C_k*a_11* \
                   t82301*t82293*t82294*t82393*t82297*t82299*1.1E1-C_k*a_7*t82300*t82308*t82293*t82294*t82297*t82299* \
                   7.0;
                v_rho_b_tau_b_[index] = t82409*t82379*t82388-t82339*t82378*(t82330+t82313*t82316*(t82329-c0p*t82277* \
                   t82279*2.0))+rho_b[index]*t82379*t82388*(C_k*a_1*t82293*t82392*t82394*(5.0/3.0)-a_1*t82390*t82391* \
                   t82298*t82389*(1.0E1/3.0)+a_2*t82390*t82391*t82298*t82389*(1.0E1/3.0)+a_1*t82303*t82390*t82391*t82297* \
                   t82389*(1.0E1/3.0)+a_10*t82301*t82310*t82390*t82391*t82389*1.5E2-a_2*t82303*t82390*t82391*t82297*t82389* \
                   (4.0E1/3.0)+a_2*t82304*t82390*t82391*t82299*t82389*1.0E1+a_3*t82303*t82390*t82391*t82297*t82389*1.0E1- \
                   a_3*t82304*t82390*t82391*t82299*t82389*3.0E1+a_4*t82300*t82306*t82390*t82391*t82389*(1.0E2/3.0)+a_4* \
                   t82304*t82390*t82391*t82299*t82389*2.0E1-a_5*t82300*t82306*t82390*t82391*t82389*(2.5E2/3.0)+a_6*t82300* \
                   t82306*t82390*t82391*t82389*5.0E1+a_8*t82301*t82310*t82390*t82391*t82389*1.2E2-a_9*t82301*t82310*t82390* \
                   t82391*t82389*2.7E2-C_k*a_1*t82293*t82394*t82297*t82298*(5.0/3.0)-C_k*a_2*t82303*t82293*t82394*t82299* \
                   (1.0E1/3.0)+C_k*a_2*t82293*t82394*t82297*t82298*(1.0E1/3.0)+C_k*a_3*t82303*t82293*t82394*t82299*5.0- \
                   C_k*a_4*t82300*t82305*t82293*t82394*(2.0E1/3.0)+C_k*a_5*t82300*t82305*t82293*t82394*(2.5E1/3.0)-C_k* \
                   a_8*t82301*t82309*t82293*t82394*(4.0E1/3.0)+C_k*a_9*t82301*t82309*t82293*t82394*1.5E1+C_k*a_10*t82301* \
                   t82310*t82293*t82394*t82297*(5.0E1/3.0)-C_k*a_10*t82301*t82302*t82293*t82394*t82299*(5.0E1/3.0)+C_k* \
                   a_11*t82301*t82302*t82293*t82394*t82299*(5.5E1/3.0)-C_k*a_3*t82304*t82293*t82394*t82297*t82299*5.0+ \
                   C_k*a_4*t82304*t82293*t82394*t82297*t82299*(2.0E1/3.0)-C_k*a_5*t82300*t82306*t82293*t82394*t82297* \
                   (2.5E1/3.0)+C_k*a_6*t82300*t82306*t82293*t82394*t82297*1.0E1-C_k*a_6*t82300*t82307*t82293*t82394*t82299* \
                   1.0E1+C_k*a_7*t82300*t82307*t82293*t82394*t82299*(3.5E1/3.0)-C_k*a_9*t82301*t82310*t82293*t82394*t82297* \
                   1.5E1-a_10*t82301*t82302*t82390*t82391*t82297*t82389*(1.0E3/3.0)+a_11*t82301*t82302*t82390*t82391* \
                   t82297*t82389*(5.5E2/3.0)+a_10*t82301*t82390*t82391*t82393*t82299*t82389*(5.5E2/3.0)-a_11*t82301*t82390* \
                   t82391*t82393*t82299*t82389*(1.21E3/3.0)+a_3*t82305*t82390*t82391*t82297*t82299*t82389*2.0E1-a_4*t82305* \
                   t82390*t82391*t82297*t82299*t82389*(1.6E2/3.0)+a_5*t82300*t82307*t82390*t82391*t82297*t82389*5.0E1+ \
                   a_5*t82305*t82390*t82391*t82297*t82299*t82389*(1.0E2/3.0)-a_6*t82300*t82307*t82390*t82391*t82297*t82389* \
                   1.2E2+a_6*t82300*t82308*t82390*t82391*t82299*t82389*7.0E1+a_7*t82300*t82307*t82390*t82391*t82297*t82389* \
                   7.0E1-a_7*t82300*t82308*t82390*t82391*t82299*t82389*(4.9E2/3.0)+a_8*t82300*t82308*t82390*t82391*t82299* \
                   t82389*(2.8E2/3.0)+a_9*t82301*t82302*t82390*t82391*t82297*t82389*1.5E2+a_11*t82301*t82390*t82391*1.0/ \
                   pow(t82296,1.3E1)*t82297*t82299*t82389*2.2E2-C_k*a_11*t82301*t82293*t82393*t82394*t82297*t82299*(5.5E1/ \
                   3.0)-C_k*a_7*t82300*t82308*t82293*t82394*t82297*t82299*(3.5E1/3.0)+C_k*a_8*t82300*t82308*t82293*t82394* \
                   t82297*t82299*(4.0E1/3.0)+a_7*t82300*t82309*t82390*t82391*t82297*t82299*t82389*(2.8E2/3.0)-a_8*t82300* \
                   t82309*t82390*t82391*t82297*t82299*t82389*(6.4E2/3.0)+a_9*t82300*t82309*t82390*t82391*t82297*t82299* \
                   t82389*1.2E2)+rho_b[index]*t82339*t82378*(-t82373+t82313*t82316*(t82373-(1.0/(t82322*t82322)*t82328* \
                   (b2f*c*t82363*(1.0/3.0)+b4f*t82364*t82266*(2.0/3.0)+b1f*c*t82363*t82365*(1.0/6.0)+b3f*c*t82264*t82363* \
                   (1.0/2.0)))/t82325+a1f*c*c0f*t82326*t82363*(2.0/3.0)-a1p*c*c0p*t82363*t82277*(2.0/3.0))+a1p*c*c0p* \
                   t82363*t82277*(2.0/3.0))+rho_b[index]*t82339*t82396*(ccaa1*gamma_bb[index]*gcaa*t82348*t82359*(8.0/ \
                   3.0)+ccaa4*t82361*t82345*t82287*t82288*(3.2E1/3.0)+ccaa2*t82285*t82357*t82286*t82358*(1.6E1/3.0)-ccaa1* \
                   1.0/(t82347*t82347)*t82285*t82286*t82358*(8.0/3.0)-ccaa2*t82292*1.0/(t82356*t82356)*t82285*t82286* \
                   (gamma_bb[index]*gcaa*t82359*(1.6E1/3.0)+t82285*t82286*t82358*(1.6E1/3.0))-ccaa4*1.0/(t82344*t82344) \
                   *t82287*t82288*t82289*(gamma_bb[index]*gcaa*t82359*(3.2E1/3.0)+t82361*t82287*t82288*(3.2E1/3.0)+t82285* \
                   t82286*t82358*3.2E1+gamma_bb[index]*gcaa*t82360*t82285*t82286*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t82360* \
                   t82353*t82285*t82286*8.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t82352*t82352)*t82291*t82285*t82286*(gamma_bb[index]* \
                   gcaa*t82359*8.0+t82285*t82286*t82358*1.6E1+gamma_bb[index]*gcaa*t82360*t82285*t82286*8.0))+gamma_bb[index]* \
                   t82331*t82283*t82293*t82378*t82396*(1.0/8.0)-gamma_bb[index]*t82281*t82335*t82283*t82378*t82396*(1.0/ \
                   8.0)-kp*rho_b[index]*t82409*1.0/(t82386*t82386)*t82379*(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]* \
                   rho_b[index])*t82380*t82381*t82384*(1.0/2.0)+gamma_bb[index]*mu_*t82380*t82381*t82382*1.0/pow(t82383,5.0/ \
                   3.0)*(1.0/3.0));
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t81129 = 1.0/pow(rho_a[index],1.0/3.0);
                double t81130 = c*t81129;
                double t81131 = sqrt(t81130);
                double t81132 = pow(t81130,3.0/2.0);
                double t81133 = c*c;
                double t81134 = 1.0/pow(rho_a[index],2.0/3.0);
                double t81135 = 1.0/c0p;
                double t81136 = b1p*t81131;
                double t81137 = b3p*t81132;
                double t81138 = b4p*t81133*t81134;
                double t81139 = b2p*c*t81129;
                double t81140 = t81136+t81137+t81138+t81139;
                double t81141 = 1.0/t81140;
                double t81142 = t81141*t81135*(1.0/2.0);
                double t81143 = t81142+1.0;
                double t81144 = log(t81143);
                double t81145 = a1p*c*t81129;
                double t81146 = t81145+1.0;
                double t81147 = 1.0/tau_a[index];
                double t81148 = tau_a[index]*2.0;
                double t81149 = 1.0/rho_a[index];
                double t81153 = gamma_aa[index]*t81149*(1.0/4.0);
                double t81150 = -t81153+t81148;
                double t81151 = tau_a[index]-1.0/1.0E20;
                double t81152 = 1.0/(tau_a[index]*tau_a[index]);
                double t81154 = gamma_aa[index]*gamma_aa[index];
                double t81155 = gcaa*gcaa;
                double t81156 = t81154*t81154;
                double t81157 = t81155*t81155;
                double t81158 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t81159 = 1.0/pow(rho_a[index],8.0/3.0);
                double t81160 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t81161 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t81162 = C_k*C_k;
                double t81163 = pow(rho_a[index],1.0E1/3.0);
                double t81164 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t81165 = pow(rho_a[index],5.0/3.0);
                double t81166 = C_k*t81147*t81165;
                double t81167 = t81166+1.0;
                double t81168 = 1.0/(t81167*t81167);
                double t81169 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t81170 = t81166-1.0;
                double t81171 = t81170*t81170;
                double t81172 = t81171*t81171;
                double t81173 = t81172*t81172;
                double t81174 = 1.0/pow(t81167,1.1E1);
                double t81175 = 1.0/pow(t81167,1.2E1);
                double t81176 = 1.0/(t81167*t81167*t81167*t81167);
                double t81177 = 1.0/(t81167*t81167*t81167*t81167*t81167);
                double t81178 = 1.0/(t81167*t81167*t81167*t81167*t81167*t81167);
                double t81179 = 1.0/(t81167*t81167*t81167*t81167*t81167*t81167*t81167);
                double t81180 = 1.0/(t81167*t81167*t81167*t81167*t81167*t81167*t81167*t81167);
                double t81181 = 1.0/(t81167*t81167*t81167*t81167*t81167*t81167*t81167*t81167*t81167);
                double t81182 = 1.0/pow(t81167,1.0E1);
                double t81183 = 1.0/(t81167*t81167*t81167);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t81162*t81163*t81164* \
                   t81168*-2.0+a_2*t81162*t81163*t81164*t81168*2.0+(C_k*a_1*t81165*t81169*2.0)/t81167+a_1*t81170*t81162* \
                   t81163*t81164*t81183*2.0+a_10*t81162*t81163*t81164*t81173*t81182*9.0E1-a_2*t81170*t81162*t81163*t81164* \
                   t81183*8.0+a_2*t81162*t81171*t81163*t81164*t81176*6.0+a_3*t81170*t81162*t81163*t81164*t81183*6.0-a_3* \
                   t81162*t81171*t81163*t81164*t81176*1.8E1+a_4*t81162*t81171*t81163*t81164*t81176*1.2E1+a_4*t81162*t81163* \
                   t81172*t81164*t81178*2.0E1-a_5*t81162*t81163*t81172*t81164*t81178*5.0E1+a_6*t81162*t81163*t81172*t81164* \
                   t81178*3.0E1+a_8*t81162*t81163*t81164*t81173*t81182*7.2E1-a_9*t81162*t81163*t81164*t81173*t81182*1.62E2- \
                   C_k*a_1*t81170*t81165*t81168*t81169*2.0-C_k*a_2*t81171*t81165*t81183*t81169*4.0+C_k*a_2*t81170*t81165* \
                   t81168*t81169*4.0+C_k*a_3*t81171*t81165*t81183*t81169*6.0-C_k*a_4*t81172*t81165*t81177*t81169*8.0+ \
                   C_k*a_5*t81172*t81165*t81177*t81169*1.0E1-C_k*a_8*t81181*t81173*t81165*t81169*1.6E1+C_k*a_9*t81181* \
                   t81173*t81165*t81169*1.8E1+C_k*a_10*t81170*t81173*t81182*t81165*t81169*2.0E1-C_k*a_10*t81171*t81173* \
                   t81165*t81174*t81169*2.0E1+C_k*a_11*t81171*t81173*t81165*t81174*t81169*2.2E1-C_k*a_3*t81170*t81171* \
                   t81165*t81176*t81169*6.0+C_k*a_4*t81170*t81171*t81165*t81176*t81169*8.0-C_k*a_5*t81170*t81172*t81165* \
                   t81169*t81178*1.0E1+C_k*a_6*t81170*t81172*t81165*t81169*t81178*1.2E1-C_k*a_6*t81171*t81172*t81165* \
                   t81169*t81179*1.2E1+C_k*a_7*t81171*t81172*t81165*t81169*t81179*1.4E1-C_k*a_9*t81170*t81173*t81182* \
                   t81165*t81169*1.8E1-a_10*t81170*t81162*t81163*t81164*t81173*t81174*2.0E2+a_11*t81170*t81162*t81163* \
                   t81164*t81173*t81174*1.1E2+a_10*t81162*t81171*t81163*t81164*t81173*t81175*1.1E2-a_11*t81162*t81171* \
                   t81163*t81164*t81173*t81175*2.42E2+a_3*t81170*t81162*t81171*t81163*t81164*t81177*1.2E1-a_4*t81170* \
                   t81162*t81171*t81163*t81164*t81177*3.2E1+a_5*t81170*t81162*t81171*t81163*t81164*t81177*2.0E1+a_5*t81170* \
                   t81162*t81163*t81172*t81164*t81179*3.0E1+a_6*t81162*t81171*t81180*t81163*t81172*t81164*4.2E1-a_6*t81170* \
                   t81162*t81163*t81172*t81164*t81179*7.2E1-a_7*t81162*t81171*t81180*t81163*t81172*t81164*9.8E1+a_7*t81170* \
                   t81162*t81163*t81172*t81164*t81179*4.2E1+a_8*t81162*t81171*t81180*t81163*t81172*t81164*5.6E1+a_9*t81170* \
                   t81162*t81163*t81164*t81173*t81174*9.0E1+a_11*t81170*t81162*t81171*t81163*t81164*t81173*1.0/pow(t81167,1.3E1) \
                   *1.32E2-C_k*a_11*t81170*t81171*t81173*t81165*t81175*t81169*2.2E1-C_k*a_7*t81170*t81171*t81180*t81172* \
                   t81165*t81169*1.4E1+C_k*a_8*t81170*t81171*t81180*t81172*t81165*t81169*1.6E1+a_7*t81170*t81162*t81171* \
                   t81163*t81172*t81181*t81164*5.6E1-a_8*t81170*t81162*t81171*t81163*t81172*t81181*t81164*1.28E2+a_9* \
                   t81170*t81162*t81171*t81163*t81172*t81181*t81164*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t81131+b3f*t81132+b2f*c*t81129+b4f*t81133*t81134))+1.0)*(a1f*c*t81129+ \
                   1.0)*2.0-c0p*t81144*t81146*2.0))/(two_13*2.0-2.0)+c0p*t81144*t81146*2.0)*( 0.0 - ( (t81151 > 0.0)  \
                   ? 1.0*(t81152*2.0-t81150*t81169) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t81161*t81154*t81155)/(gamma_aa[index]* \
                   gcaa*t81159*2.0+t81161*t81154*t81155+1.0)+(ccaa1*gamma_aa[index]*gcaa*t81159)/(gamma_aa[index]*gcaa* \
                   t81159+1.0)+(ccaa4*t81156*t81157*t81158)/(gamma_aa[index]*gcaa*t81159*4.0+t81161*t81154*t81155*6.0+ \
                   t81156*t81157*t81158+gamma_aa[index]*gcaa*t81160*t81154*t81155*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
                   t81160*t81154*t81155)/(gamma_aa[index]*gcaa*t81159*3.0+t81161*t81154*t81155*3.0+gamma_aa[index]*gcaa* \
                   t81160*t81154*t81155+1.0));
            } else if (rho_a[index] > cutoff_) {
                double t83537 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83538 = c*t83537;
                double t83539 = sqrt(t83538);
                double t83540 = pow(t83538,3.0/2.0);
                double t83541 = c*c;
                double t83542 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83543 = 1.0/c0p;
                double t83544 = b1p*t83539;
                double t83545 = b3p*t83540;
                double t83546 = b4p*t83541*t83542;
                double t83547 = b2p*c*t83537;
                double t83548 = t83544+t83545+t83546+t83547;
                double t83549 = 1.0/t83548;
                double t83550 = t83543*t83549*(1.0/2.0);
                double t83551 = t83550+1.0;
                double t83552 = log(t83551);
                double t83553 = a1p*c*t83537;
                double t83554 = t83553+1.0;
                double t83555 = 1.0/tau_a[index];
                double t83556 = tau_a[index]*2.0;
                double t83557 = 1.0/rho_a[index];
                double t83561 = gamma_aa[index]*t83557*(1.0/4.0);
                double t83558 = -t83561+t83556;
                double t83559 = tau_a[index]-1.0/1.0E20;
                double t83560 = 1.0/(tau_a[index]*tau_a[index]);
                double t83562 = gamma_aa[index]*gamma_aa[index];
                double t83563 = gcaa*gcaa;
                double t83564 = t83562*t83562;
                double t83565 = t83563*t83563;
                double t83566 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83567 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83568 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83569 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83570 = C_k*C_k;
                double t83571 = pow(rho_a[index],1.0E1/3.0);
                double t83572 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t83573 = pow(rho_a[index],5.0/3.0);
                double t83574 = C_k*t83555*t83573;
                double t83575 = t83574+1.0;
                double t83576 = 1.0/(t83575*t83575);
                double t83577 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t83578 = t83574-1.0;
                double t83579 = t83578*t83578;
                double t83580 = t83579*t83579;
                double t83581 = t83580*t83580;
                double t83582 = 1.0/pow(t83575,1.1E1);
                double t83583 = 1.0/pow(t83575,1.2E1);
                double t83584 = 1.0/(t83575*t83575*t83575*t83575);
                double t83585 = 1.0/(t83575*t83575*t83575*t83575*t83575);
                double t83586 = 1.0/(t83575*t83575*t83575*t83575*t83575*t83575);
                double t83587 = 1.0/(t83575*t83575*t83575*t83575*t83575*t83575*t83575);
                double t83588 = 1.0/(t83575*t83575*t83575*t83575*t83575*t83575*t83575*t83575);
                double t83589 = 1.0/(t83575*t83575*t83575*t83575*t83575*t83575*t83575*t83575*t83575);
                double t83590 = 1.0/pow(t83575,1.0E1);
                double t83591 = 1.0/(t83575*t83575*t83575);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t83570*t83571*t83572* \
                   t83576*-2.0+a_2*t83570*t83571*t83572*t83576*2.0+(C_k*a_1*t83573*t83577*2.0)/t83575+a_1*t83570*t83571* \
                   t83572*t83591*t83578*2.0+a_10*t83570*t83571*t83572*t83581*t83590*9.0E1-a_2*t83570*t83571*t83572*t83591* \
                   t83578*8.0+a_2*t83570*t83571*t83572*t83584*t83579*6.0+a_3*t83570*t83571*t83572*t83591*t83578*6.0-a_3* \
                   t83570*t83571*t83572*t83584*t83579*1.8E1+a_4*t83570*t83571*t83580*t83572*t83586*2.0E1+a_4*t83570*t83571* \
                   t83572*t83584*t83579*1.2E1-a_5*t83570*t83571*t83580*t83572*t83586*5.0E1+a_6*t83570*t83571*t83580*t83572* \
                   t83586*3.0E1+a_8*t83570*t83571*t83572*t83581*t83590*7.2E1-a_9*t83570*t83571*t83572*t83581*t83590*1.62E2- \
                   C_k*a_1*t83573*t83576*t83577*t83578*2.0-C_k*a_2*t83573*t83591*t83577*t83579*4.0+C_k*a_2*t83573*t83576* \
                   t83577*t83578*4.0+C_k*a_3*t83573*t83591*t83577*t83579*6.0-C_k*a_4*t83580*t83573*t83585*t83577*8.0+ \
                   C_k*a_5*t83580*t83573*t83585*t83577*1.0E1-C_k*a_8*t83581*t83573*t83577*t83589*1.6E1+C_k*a_9*t83581* \
                   t83573*t83577*t83589*1.8E1+C_k*a_10*t83581*t83590*t83573*t83577*t83578*2.0E1-C_k*a_10*t83581*t83573* \
                   t83582*t83577*t83579*2.0E1+C_k*a_11*t83581*t83573*t83582*t83577*t83579*2.2E1-C_k*a_3*t83573*t83584* \
                   t83577*t83578*t83579*6.0+C_k*a_4*t83573*t83584*t83577*t83578*t83579*8.0-C_k*a_5*t83580*t83573*t83577* \
                   t83586*t83578*1.0E1+C_k*a_6*t83580*t83573*t83577*t83586*t83578*1.2E1-C_k*a_6*t83580*t83573*t83577* \
                   t83587*t83579*1.2E1+C_k*a_7*t83580*t83573*t83577*t83587*t83579*1.4E1-C_k*a_9*t83581*t83590*t83573* \
                   t83577*t83578*1.8E1-a_10*t83570*t83571*t83572*t83581*t83582*t83578*2.0E2+a_11*t83570*t83571*t83572* \
                   t83581*t83582*t83578*1.1E2+a_10*t83570*t83571*t83572*t83581*t83583*t83579*1.1E2-a_11*t83570*t83571* \
                   t83572*t83581*t83583*t83579*2.42E2+a_3*t83570*t83571*t83572*t83585*t83578*t83579*1.2E1-a_4*t83570* \
                   t83571*t83572*t83585*t83578*t83579*3.2E1+a_5*t83570*t83571*t83580*t83572*t83578*t83587*3.0E1+a_5*t83570* \
                   t83571*t83572*t83585*t83578*t83579*2.0E1-a_6*t83570*t83571*t83580*t83572*t83578*t83587*7.2E1+a_6*t83570* \
                   t83571*t83580*t83572*t83579*t83588*4.2E1+a_7*t83570*t83571*t83580*t83572*t83578*t83587*4.2E1-a_7*t83570* \
                   t83571*t83580*t83572*t83579*t83588*9.8E1+a_8*t83570*t83571*t83580*t83572*t83579*t83588*5.6E1+a_9*t83570* \
                   t83571*t83572*t83581*t83582*t83578*9.0E1+a_11*t83570*t83571*t83572*t83581*1.0/pow(t83575,1.3E1)*t83578* \
                   t83579*1.32E2-C_k*a_11*t83581*t83573*t83583*t83577*t83578*t83579*2.2E1-C_k*a_7*t83580*t83573*t83577* \
                   t83578*t83579*t83588*1.4E1+C_k*a_8*t83580*t83573*t83577*t83578*t83579*t83588*1.6E1+a_7*t83570*t83571* \
                   t83580*t83572*t83578*t83579*t83589*5.6E1-a_8*t83570*t83571*t83580*t83572*t83578*t83579*t83589*1.28E2+ \
                   a_9*t83570*t83571*t83580*t83572*t83578*t83579*t83589*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t83539+b3f*t83540+b2f*c*t83537+b4f*t83541*t83542))+1.0)*(a1f*c*t83537+ \
                   1.0)*2.0-c0p*t83552*t83554*2.0))/(two_13*2.0-2.0)+c0p*t83552*t83554*2.0)*( 0.0 - ( (t83559 > 0.0)  \
                   ? 1.0*(t83560*2.0-t83558*t83577) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t83562*t83563*t83569)/(gamma_aa[index]* \
                   gcaa*t83567*2.0+t83562*t83563*t83569+1.0)+(ccaa1*gamma_aa[index]*gcaa*t83567)/(gamma_aa[index]*gcaa* \
                   t83567+1.0)+(ccaa4*t83564*t83565*t83566)/(gamma_aa[index]*gcaa*t83567*4.0+t83562*t83563*t83569*6.0+ \
                   t83564*t83565*t83566+gamma_aa[index]*gcaa*t83562*t83563*t83568*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
                   t83562*t83563*t83568)/(gamma_aa[index]*gcaa*t83567*3.0+t83562*t83563*t83569*3.0+gamma_aa[index]*gcaa* \
                   t83562*t83563*t83568+1.0));
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t81186 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81187 = c*t81186;
                double t81188 = sqrt(t81187);
                double t81189 = pow(t81187,3.0/2.0);
                double t81190 = c*c;
                double t81191 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81192 = 1.0/c0p;
                double t81193 = b1p*t81188;
                double t81194 = b3p*t81189;
                double t81195 = b4p*t81190*t81191;
                double t81196 = b2p*c*t81186;
                double t81197 = t81193+t81194+t81195+t81196;
                double t81198 = 1.0/t81197;
                double t81199 = t81192*t81198*(1.0/2.0);
                double t81200 = t81199+1.0;
                double t81201 = log(t81200);
                double t81202 = a1p*c*t81186;
                double t81203 = t81202+1.0;
                double t81204 = 1.0/tau_b[index];
                double t81205 = tau_b[index]*2.0;
                double t81206 = 1.0/rho_b[index];
                double t81210 = gamma_bb[index]*t81206*(1.0/4.0);
                double t81207 = -t81210+t81205;
                double t81208 = tau_b[index]-1.0/1.0E20;
                double t81209 = 1.0/(tau_b[index]*tau_b[index]);
                double t81211 = gamma_bb[index]*gamma_bb[index];
                double t81212 = gcaa*gcaa;
                double t81213 = t81211*t81211;
                double t81214 = t81212*t81212;
                double t81215 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81216 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81217 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81218 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81219 = C_k*C_k;
                double t81220 = pow(rho_b[index],1.0E1/3.0);
                double t81221 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t81222 = pow(rho_b[index],5.0/3.0);
                double t81223 = C_k*t81204*t81222;
                double t81224 = t81223+1.0;
                double t81225 = 1.0/(t81224*t81224);
                double t81226 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t81227 = t81223-1.0;
                double t81228 = t81227*t81227;
                double t81229 = t81228*t81228;
                double t81230 = t81229*t81229;
                double t81231 = 1.0/pow(t81224,1.1E1);
                double t81232 = 1.0/pow(t81224,1.2E1);
                double t81233 = 1.0/(t81224*t81224*t81224*t81224);
                double t81234 = 1.0/(t81224*t81224*t81224*t81224*t81224);
                double t81235 = 1.0/(t81224*t81224*t81224*t81224*t81224*t81224);
                double t81236 = 1.0/(t81224*t81224*t81224*t81224*t81224*t81224*t81224);
                double t81237 = 1.0/(t81224*t81224*t81224*t81224*t81224*t81224*t81224*t81224);
                double t81238 = 1.0/(t81224*t81224*t81224*t81224*t81224*t81224*t81224*t81224*t81224);
                double t81239 = 1.0/pow(t81224,1.0E1);
                double t81240 = 1.0/(t81224*t81224*t81224);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t81220*t81221*t81225* \
                   t81219*-2.0+a_2*t81220*t81221*t81225*t81219*2.0+(C_k*a_1*t81222*t81226*2.0)/t81224+a_1*t81220*t81221* \
                   t81240*t81227*t81219*2.0+a_10*t81220*t81221*t81230*t81219*t81239*9.0E1-a_2*t81220*t81221*t81240*t81227* \
                   t81219*8.0+a_2*t81220*t81221*t81233*t81219*t81228*6.0+a_3*t81220*t81221*t81240*t81227*t81219*6.0-a_3* \
                   t81220*t81221*t81233*t81219*t81228*1.8E1+a_4*t81220*t81221*t81233*t81219*t81228*1.2E1+a_4*t81220*t81221* \
                   t81235*t81219*t81229*2.0E1-a_5*t81220*t81221*t81235*t81219*t81229*5.0E1+a_6*t81220*t81221*t81235*t81219* \
                   t81229*3.0E1+a_8*t81220*t81221*t81230*t81219*t81239*7.2E1-a_9*t81220*t81221*t81230*t81219*t81239*1.62E2- \
                   C_k*a_1*t81222*t81225*t81226*t81227*2.0-C_k*a_2*t81222*t81240*t81226*t81228*4.0+C_k*a_2*t81222*t81225* \
                   t81226*t81227*4.0+C_k*a_3*t81222*t81240*t81226*t81228*6.0-C_k*a_4*t81222*t81234*t81226*t81229*8.0+ \
                   C_k*a_5*t81222*t81234*t81226*t81229*1.0E1-C_k*a_8*t81230*t81222*t81226*t81238*1.6E1+C_k*a_9*t81230* \
                   t81222*t81226*t81238*1.8E1-C_k*a_10*t81230*t81222*t81231*t81226*t81228*2.0E1+C_k*a_11*t81230*t81222* \
                   t81231*t81226*t81228*2.2E1+C_k*a_10*t81230*t81222*t81226*t81227*t81239*2.0E1-C_k*a_3*t81222*t81233* \
                   t81226*t81227*t81228*6.0+C_k*a_4*t81222*t81233*t81226*t81227*t81228*8.0-C_k*a_5*t81222*t81226*t81235* \
                   t81227*t81229*1.0E1+C_k*a_6*t81222*t81226*t81235*t81227*t81229*1.2E1-C_k*a_6*t81222*t81226*t81236* \
                   t81228*t81229*1.2E1+C_k*a_7*t81222*t81226*t81236*t81228*t81229*1.4E1-C_k*a_9*t81230*t81222*t81226* \
                   t81227*t81239*1.8E1-a_10*t81220*t81221*t81230*t81231*t81227*t81219*2.0E2+a_11*t81220*t81221*t81230* \
                   t81231*t81227*t81219*1.1E2+a_10*t81220*t81221*t81230*t81232*t81219*t81228*1.1E2-a_11*t81220*t81221* \
                   t81230*t81232*t81219*t81228*2.42E2+a_3*t81220*t81221*t81234*t81227*t81219*t81228*1.2E1-a_4*t81220* \
                   t81221*t81234*t81227*t81219*t81228*3.2E1+a_5*t81220*t81221*t81234*t81227*t81219*t81228*2.0E1+a_5*t81220* \
                   t81221*t81227*t81236*t81219*t81229*3.0E1-a_6*t81220*t81221*t81227*t81236*t81219*t81229*7.2E1+a_6*t81220* \
                   t81221*t81219*t81228*t81237*t81229*4.2E1+a_7*t81220*t81221*t81227*t81236*t81219*t81229*4.2E1-a_7*t81220* \
                   t81221*t81219*t81228*t81237*t81229*9.8E1+a_8*t81220*t81221*t81219*t81228*t81237*t81229*5.6E1+a_9*t81220* \
                   t81221*t81230*t81231*t81227*t81219*9.0E1+a_11*t81220*t81221*t81230*1.0/pow(t81224,1.3E1)*t81227*t81219* \
                   t81228*1.32E2-C_k*a_11*t81230*t81222*t81232*t81226*t81227*t81228*2.2E1-C_k*a_7*t81222*t81226*t81227* \
                   t81228*t81237*t81229*1.4E1+C_k*a_8*t81222*t81226*t81227*t81228*t81237*t81229*1.6E1+a_7*t81220*t81221* \
                   t81227*t81219*t81228*t81229*t81238*5.6E1-a_8*t81220*t81221*t81227*t81219*t81228*t81229*t81238*1.28E2+ \
                   a_9*t81220*t81221*t81227*t81219*t81228*t81229*t81238*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t81188+b3f*t81189+b2f*c*t81186+b4f*t81190*t81191))+1.0)*(a1f*c*t81186+ \
                   1.0)*2.0-c0p*t81201*t81203*2.0))/(two_13*2.0-2.0)+c0p*t81201*t81203*2.0)*( 0.0 - ( (t81208 > 0.0)  \
                   ? 1.0*(t81209*2.0-t81207*t81226) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t81211*t81212*t81218)/(gamma_bb[index]* \
                   gcaa*t81216*2.0+t81211*t81212*t81218+1.0)+(ccaa1*gamma_bb[index]*gcaa*t81216)/(gamma_bb[index]*gcaa* \
                   t81216+1.0)+(ccaa4*t81213*t81214*t81215)/(gamma_bb[index]*gcaa*t81216*4.0+t81211*t81212*t81218*6.0+ \
                   t81213*t81214*t81215+gamma_bb[index]*gcaa*t81211*t81212*t81217*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t81211*t81212*t81217)/(gamma_bb[index]*gcaa*t81216*3.0+t81211*t81212*t81218*3.0+gamma_bb[index]*gcaa* \
                   t81211*t81212*t81217+1.0));
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82413 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82414 = c*t82413;
                double t82415 = sqrt(t82414);
                double t82416 = pow(t82414,3.0/2.0);
                double t82417 = c*c;
                double t82418 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82419 = 1.0/c0p;
                double t82420 = b1p*t82415;
                double t82421 = b3p*t82416;
                double t82422 = b4p*t82417*t82418;
                double t82423 = b2p*c*t82413;
                double t82424 = t82420+t82421+t82422+t82423;
                double t82425 = 1.0/t82424;
                double t82426 = t82425*t82419*(1.0/2.0);
                double t82427 = t82426+1.0;
                double t82428 = log(t82427);
                double t82429 = a1p*c*t82413;
                double t82430 = t82429+1.0;
                double t82431 = 1.0/tau_b[index];
                double t82432 = tau_b[index]*2.0;
                double t82433 = 1.0/rho_b[index];
                double t82437 = gamma_bb[index]*t82433*(1.0/4.0);
                double t82434 = t82432-t82437;
                double t82435 = tau_b[index]-1.0/1.0E20;
                double t82436 = 1.0/(tau_b[index]*tau_b[index]);
                double t82438 = gamma_bb[index]*gamma_bb[index];
                double t82439 = gcaa*gcaa;
                double t82440 = t82438*t82438;
                double t82441 = t82439*t82439;
                double t82442 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82443 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82444 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82445 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82446 = C_k*C_k;
                double t82447 = pow(rho_b[index],1.0E1/3.0);
                double t82448 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t82449 = pow(rho_b[index],5.0/3.0);
                double t82450 = C_k*t82431*t82449;
                double t82451 = t82450+1.0;
                double t82452 = 1.0/(t82451*t82451);
                double t82453 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t82454 = t82450-1.0;
                double t82455 = t82454*t82454;
                double t82456 = t82455*t82455;
                double t82457 = t82456*t82456;
                double t82458 = 1.0/pow(t82451,1.1E1);
                double t82459 = 1.0/pow(t82451,1.2E1);
                double t82460 = 1.0/(t82451*t82451*t82451*t82451);
                double t82461 = 1.0/(t82451*t82451*t82451*t82451*t82451);
                double t82462 = 1.0/(t82451*t82451*t82451*t82451*t82451*t82451);
                double t82463 = 1.0/(t82451*t82451*t82451*t82451*t82451*t82451*t82451);
                double t82464 = 1.0/(t82451*t82451*t82451*t82451*t82451*t82451*t82451*t82451);
                double t82465 = 1.0/(t82451*t82451*t82451*t82451*t82451*t82451*t82451*t82451*t82451);
                double t82466 = 1.0/pow(t82451,1.0E1);
                double t82467 = 1.0/(t82451*t82451*t82451);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t82452*t82446*t82447* \
                   t82448*-2.0+a_2*t82452*t82446*t82447*t82448*2.0+(C_k*a_1*t82453*t82449*2.0)/t82451+a_1*t82454*t82446* \
                   t82447*t82448*t82467*2.0+a_10*t82446*t82447*t82448*t82457*t82466*9.0E1+a_2*t82460*t82446*t82455*t82447* \
                   t82448*6.0-a_2*t82454*t82446*t82447*t82448*t82467*8.0-a_3*t82460*t82446*t82455*t82447*t82448*1.8E1+ \
                   a_3*t82454*t82446*t82447*t82448*t82467*6.0+a_4*t82460*t82446*t82455*t82447*t82448*1.2E1+a_4*t82462* \
                   t82446*t82447*t82456*t82448*2.0E1-a_5*t82462*t82446*t82447*t82456*t82448*5.0E1+a_6*t82462*t82446*t82447* \
                   t82456*t82448*3.0E1+a_8*t82446*t82447*t82448*t82457*t82466*7.2E1-a_9*t82446*t82447*t82448*t82457*t82466* \
                   1.62E2-C_k*a_1*t82452*t82453*t82454*t82449*2.0+C_k*a_2*t82452*t82453*t82454*t82449*4.0-C_k*a_2*t82453* \
                   t82455*t82449*t82467*4.0+C_k*a_3*t82453*t82455*t82449*t82467*6.0-C_k*a_4*t82461*t82453*t82456*t82449* \
                   8.0+C_k*a_5*t82461*t82453*t82456*t82449*1.0E1-C_k*a_8*t82453*t82465*t82457*t82449*1.6E1+C_k*a_9*t82453* \
                   t82465*t82457*t82449*1.8E1+C_k*a_10*t82453*t82454*t82457*t82466*t82449*2.0E1-C_k*a_10*t82453*t82455* \
                   t82457*t82449*t82458*2.0E1+C_k*a_11*t82453*t82455*t82457*t82449*t82458*2.2E1-C_k*a_3*t82460*t82453* \
                   t82454*t82455*t82449*6.0+C_k*a_4*t82460*t82453*t82454*t82455*t82449*8.0-C_k*a_5*t82453*t82462*t82454* \
                   t82456*t82449*1.0E1+C_k*a_6*t82453*t82462*t82454*t82456*t82449*1.2E1-C_k*a_6*t82453*t82463*t82455* \
                   t82456*t82449*1.2E1+C_k*a_7*t82453*t82463*t82455*t82456*t82449*1.4E1-C_k*a_9*t82453*t82454*t82457* \
                   t82466*t82449*1.8E1-a_10*t82454*t82446*t82447*t82448*t82457*t82458*2.0E2+a_11*t82454*t82446*t82447* \
                   t82448*t82457*t82458*1.1E2+a_10*t82446*t82455*t82447*t82448*t82457*t82459*1.1E2-a_11*t82446*t82455* \
                   t82447*t82448*t82457*t82459*2.42E2+a_3*t82461*t82454*t82446*t82455*t82447*t82448*1.2E1-a_4*t82461* \
                   t82454*t82446*t82455*t82447*t82448*3.2E1+a_5*t82461*t82454*t82446*t82455*t82447*t82448*2.0E1+a_5*t82454* \
                   t82463*t82446*t82447*t82456*t82448*3.0E1-a_6*t82454*t82463*t82446*t82447*t82456*t82448*7.2E1+a_6*t82446* \
                   t82455*t82464*t82447*t82456*t82448*4.2E1+a_7*t82454*t82463*t82446*t82447*t82456*t82448*4.2E1-a_7*t82446* \
                   t82455*t82464*t82447*t82456*t82448*9.8E1+a_8*t82446*t82455*t82464*t82447*t82456*t82448*5.6E1+a_9*t82454* \
                   t82446*t82447*t82448*t82457*t82458*9.0E1+a_11*1.0/pow(t82451,1.3E1)*t82454*t82446*t82455*t82447*t82448* \
                   t82457*1.32E2-C_k*a_11*t82453*t82454*t82455*t82457*t82449*t82459*2.2E1-C_k*a_7*t82453*t82454*t82455* \
                   t82464*t82456*t82449*1.4E1+C_k*a_8*t82453*t82454*t82455*t82464*t82456*t82449*1.6E1+a_7*t82454*t82446* \
                   t82455*t82447*t82456*t82465*t82448*5.6E1-a_8*t82454*t82446*t82455*t82447*t82456*t82465*t82448*1.28E2+ \
                   a_9*t82454*t82446*t82455*t82447*t82456*t82465*t82448*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t82415+b3f*t82416+b2f*c*t82413+b4f*t82417*t82418))+1.0)*(a1f*c*t82413+ \
                   1.0)*2.0-c0p*t82430*t82428*2.0))/(two_13*2.0-2.0)+c0p*t82430*t82428*2.0)*( 0.0 - ( (t82435 > 0.0)  \
                   ? 1.0*(t82436*2.0-t82434*t82453) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t82445*t82438*t82439)/(gamma_bb[index]* \
                   gcaa*t82443*2.0+t82445*t82438*t82439+1.0)+(ccaa1*gamma_bb[index]*gcaa*t82443)/(gamma_bb[index]*gcaa* \
                   t82443+1.0)+(ccaa4*t82440*t82441*t82442)/(gamma_bb[index]*gcaa*t82443*4.0+t82440*t82441*t82442+t82445* \
                   t82438*t82439*6.0+gamma_bb[index]*gcaa*t82444*t82438*t82439*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t82444* \
                   t82438*t82439)/(gamma_bb[index]*gcaa*t82443*3.0+t82445*t82438*t82439*3.0+gamma_bb[index]*gcaa*t82444* \
                   t82438*t82439+1.0));
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t81242 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t81243 = c*t81242;
                    double t81244 = sqrt(t81243);
                    double t81245 = pow(t81243,3.0/2.0);
                    double t81246 = c*c;
                    double t81247 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t81248 = 1.0/c0p;
                    double t81249 = b1p*t81244;
                    double t81250 = b3p*t81245;
                    double t81251 = b4p*t81246*t81247;
                    double t81252 = b2p*c*t81242;
                    double t81253 = t81250+t81251+t81252+t81249;
                    double t81254 = 1.0/t81253;
                    double t81255 = t81254*t81248*(1.0/2.0);
                    double t81256 = t81255+1.0;
                    double t81257 = log(t81256);
                    double t81258 = a1p*c*t81242;
                    double t81259 = t81258+1.0;
                    double t81260 = gamma_aa[index]*gamma_aa[index];
                    double t81261 = gcaa*gcaa;
                    double t81262 = t81260*t81260;
                    double t81263 = t81261*t81261;
                    double t81264 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t81265 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t81266 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t81267 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t81268 = tau_a[index]-1.0/1.0E20;
                    double t81269 = pow(2.0,1.0/3.0);
                    double t81270 = t81269*2.0;
                    double t81271 = t81270-2.0;
                    double t81272 = two_13*2.0;
                    double t81273 = t81272-2.0;
                    double t81274 = 1.0/t81273;
                    double t81275 = 1.0/c0f;
                    double t81276 = b1f*t81244;
                    double t81277 = b3f*t81245;
                    double t81278 = b4f*t81246*t81247;
                    double t81279 = b2f*c*t81242;
                    double t81280 = t81276+t81277+t81278+t81279;
                    double t81281 = 1.0/t81280;
                    double t81282 = t81281*t81275*(1.0/2.0);
                    double t81283 = t81282+1.0;
                    double t81284 = log(t81283);
                    double t81285 = a1f*c*t81242;
                    double t81286 = t81285+1.0;
                    double t81287 = c0f*t81284*t81286*2.0;
                    double t81288 = c0p*t81257*t81259*2.0;
                    double t81289 = gamma_aa[index]*gcaa*t81265*4.0;
                    double t81290 = gamma_aa[index]*gcaa*t81260*t81261*t81266*4.0;
                    double t81291 = t81260*t81261*t81267*6.0;
                    double t81292 = t81262*t81263*t81264;
                    double t81293 = t81290+t81291+t81292+t81289+1.0;
                    double t81294 = 1.0/t81293;
                    double t81295 = ccaa4*t81262*t81263*t81264*t81294;
                    double t81296 = gamma_aa[index]*gcaa*t81265;
                    double t81297 = t81296+1.0;
                    double t81298 = 1.0/t81297;
                    double t81299 = ccaa1*gamma_aa[index]*gcaa*t81265*t81298;
                    double t81300 = gamma_aa[index]*gcaa*t81265*3.0;
                    double t81301 = gamma_aa[index]*gcaa*t81260*t81261*t81266;
                    double t81302 = t81260*t81261*t81267*3.0;
                    double t81303 = t81300+t81301+t81302+1.0;
                    double t81304 = 1.0/t81303;
                    double t81305 = ccaa3*gamma_aa[index]*gcaa*t81304*t81260*t81261*t81266;
                    double t81306 = gamma_aa[index]*gcaa*t81265*2.0;
                    double t81307 = t81260*t81261*t81267;
                    double t81308 = t81306+t81307+1.0;
                    double t81309 = 1.0/t81308;
                    double t81310 = ccaa2*t81260*t81261*t81309*t81267;
                    double t81311 = ccaa0+t81310+t81305+t81295+t81299;
                    double t81312 = t81287-t81288;
                    double t81313 = t81312*t81271*t81274;
                    double t81314 = t81313+t81288;
                    double t81315 = ( (t81268 > 0.0) ?  1.0 : 0.0 ) ;
                    double t81316 = 1.0/tau_a[index];
                    double t81317 = 1.0/(tau_a[index]*tau_a[index]);
                    double t81318 = 0.0 ;
                    double t81319 = tau_a[index]*2.0;
                    double t81320 = 1.0/rho_a[index];
                    double t81321 = t81319-gamma_aa[index]*t81320*(1.0/4.0);
                    double t81322 = 1.0/(k*k);
                    double t81323 = rho_a[index]*2.0;
                    double t81324 = 1.0/pow(t81323,2.0/3.0);
                    double t81325 = pow(rho_a[index],5.0/3.0);
                    double t81326 = C_k*t81316*t81325;
                    double t81327 = t81326+1.0;
                    double t81328 = t81326-1.0;
                    double t81329 = 1.0/(t81327*t81327);
                    double t81330 = t81328*t81328;
                    double t81331 = t81330*t81330;
                    double t81332 = t81331*t81331;
                    double t81333 = 1.0/pow(t81327,1.1E1);
                    double t81334 = 1.0/(t81327*t81327*t81327);
                    double t81335 = 1.0/(t81327*t81327*t81327*t81327);
                    double t81336 = 1.0/(t81327*t81327*t81327*t81327*t81327);
                    double t81337 = 1.0/(t81327*t81327*t81327*t81327*t81327*t81327);
                    double t81338 = 1.0/(t81327*t81327*t81327*t81327*t81327*t81327*t81327);
                    double t81339 = 1.0/(t81327*t81327*t81327*t81327*t81327*t81327*t81327*t81327);
                    double t81340 = 1.0/(t81327*t81327*t81327*t81327*t81327*t81327*t81327*t81327*t81327);
                    double t81341 = 1.0/pow(t81327,1.0E1);
                    v_gamma_aa_tau_a_[index] = t81311*t81314*t81315*t81317*(-1.0/8.0)+t81311*t81316*t81318*(t81288+t81271* \
                       t81274*(t81287-c0p*t81257*t81259*2.0))*(1.0/8.0)-rho_a[index]*t81314*(t81318*(t81321*t81316*(1.0/2.0) \
                       -1.0)+t81315*(t81316-t81321*t81317*(1.0/2.0)))*(ccaa1*gcaa*t81265*t81298+ccaa2*gamma_aa[index]*t81261* \
                       t81309*t81267*2.0-ccaa1*gamma_aa[index]*t81261*t81267*1.0/(t81297*t81297)-ccaa2*t81260*t81261*1.0/ \
                       (t81308*t81308)*t81267*(gcaa*t81265*2.0+gamma_aa[index]*t81261*t81267*2.0)-ccaa4*t81262*t81263*t81264* \
                       1.0/(t81293*t81293)*(gcaa*t81265*4.0+gamma_aa[index]*t81261*t81267*1.2E1+gamma_aa[index]*t81260*t81263* \
                       t81264*4.0+gcaa*t81260*t81261*t81266*1.2E1)+ccaa4*gamma_aa[index]*t81260*t81263*t81264*t81294*4.0+ \
                       ccaa3*gcaa*t81304*t81260*t81261*t81266*3.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t81303*t81303)*t81260*t81261* \
                       t81266*(gcaa*t81265*3.0+gamma_aa[index]*t81261*t81267*6.0+gcaa*t81260*t81261*t81266*3.0))+mu_*t81320* \
                       t81322*t81324*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t81322*t81324*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t81325*t81317)/t81327-C_k*a_1*t81325*t81317*t81328*t81329-C_k*a_2* \
                       t81330*t81325*t81334*t81317*2.0+C_k*a_2*t81325*t81317*t81328*t81329*2.0+C_k*a_3*t81330*t81325*t81334* \
                       t81317*3.0-C_k*a_4*t81331*t81325*t81317*t81336*4.0+C_k*a_5*t81331*t81325*t81317*t81336*5.0-C_k*a_8* \
                       t81340*t81332*t81325*t81317*8.0+C_k*a_9*t81340*t81332*t81325*t81317*9.0-C_k*a_10*t81330*t81332*t81333* \
                       t81325*t81317*1.0E1+C_k*a_11*t81330*t81332*t81333*t81325*t81317*1.1E1+C_k*a_10*t81332*t81341*t81325* \
                       t81317*t81328*1.0E1-C_k*a_3*t81330*t81325*t81317*t81335*t81328*3.0+C_k*a_4*t81330*t81325*t81317*t81335* \
                       t81328*4.0-C_k*a_5*t81331*t81325*t81317*t81328*t81337*5.0-C_k*a_6*t81330*t81331*t81325*t81317*t81338* \
                       6.0+C_k*a_6*t81331*t81325*t81317*t81328*t81337*6.0+C_k*a_7*t81330*t81331*t81325*t81317*t81338*7.0- \
                       C_k*a_9*t81332*t81341*t81325*t81317*t81328*9.0-C_k*a_11*t81330*t81332*t81325*t81317*1.0/pow(t81327,1.2E1) \
                       *t81328*1.1E1-C_k*a_7*t81330*t81331*t81325*t81317*t81328*t81339*7.0+C_k*a_8*t81330*t81331*t81325*t81317* \
                       t81328*t81339*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    double t83595 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t83596 = c*t83595;
                    double t83597 = sqrt(t83596);
                    double t83598 = pow(t83596,3.0/2.0);
                    double t83599 = c*c;
                    double t83600 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t83601 = 1.0/c0p;
                    double t83602 = b1p*t83597;
                    double t83603 = b3p*t83598;
                    double t83604 = b4p*t83600*t83599;
                    double t83605 = b2p*c*t83595;
                    double t83606 = t83602+t83603+t83604+t83605;
                    double t83607 = 1.0/t83606;
                    double t83608 = t83601*t83607*(1.0/2.0);
                    double t83609 = t83608+1.0;
                    double t83610 = log(t83609);
                    double t83611 = a1p*c*t83595;
                    double t83612 = t83611+1.0;
                    double t83613 = gamma_aa[index]*gamma_aa[index];
                    double t83614 = gcaa*gcaa;
                    double t83615 = t83613*t83613;
                    double t83616 = t83614*t83614;
                    double t83617 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t83618 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t83619 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t83620 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t83621 = tau_a[index]-1.0/1.0E20;
                    double t83622 = pow(2.0,1.0/3.0);
                    double t83623 = t83622*2.0;
                    double t83624 = t83623-2.0;
                    double t83625 = two_13*2.0;
                    double t83626 = t83625-2.0;
                    double t83627 = 1.0/t83626;
                    double t83628 = 1.0/c0f;
                    double t83629 = b1f*t83597;
                    double t83630 = b3f*t83598;
                    double t83631 = b4f*t83600*t83599;
                    double t83632 = b2f*c*t83595;
                    double t83633 = t83630+t83631+t83632+t83629;
                    double t83634 = 1.0/t83633;
                    double t83635 = t83634*t83628*(1.0/2.0);
                    double t83636 = t83635+1.0;
                    double t83637 = log(t83636);
                    double t83638 = a1f*c*t83595;
                    double t83639 = t83638+1.0;
                    double t83640 = c0f*t83637*t83639*2.0;
                    double t83641 = c0p*t83610*t83612*2.0;
                    double t83642 = gamma_aa[index]*gcaa*t83618*4.0;
                    double t83643 = gamma_aa[index]*gcaa*t83613*t83614*t83619*4.0;
                    double t83644 = t83620*t83613*t83614*6.0;
                    double t83645 = t83615*t83616*t83617;
                    double t83646 = t83642+t83643+t83644+t83645+1.0;
                    double t83647 = 1.0/t83646;
                    double t83648 = ccaa4*t83615*t83616*t83617*t83647;
                    double t83649 = gamma_aa[index]*gcaa*t83618;
                    double t83650 = t83649+1.0;
                    double t83651 = 1.0/t83650;
                    double t83652 = ccaa1*gamma_aa[index]*gcaa*t83651*t83618;
                    double t83653 = gamma_aa[index]*gcaa*t83618*3.0;
                    double t83654 = gamma_aa[index]*gcaa*t83613*t83614*t83619;
                    double t83655 = t83620*t83613*t83614*3.0;
                    double t83656 = t83653+t83654+t83655+1.0;
                    double t83657 = 1.0/t83656;
                    double t83658 = ccaa3*gamma_aa[index]*gcaa*t83613*t83614*t83619*t83657;
                    double t83659 = gamma_aa[index]*gcaa*t83618*2.0;
                    double t83660 = t83620*t83613*t83614;
                    double t83661 = t83660+t83659+1.0;
                    double t83662 = 1.0/t83661;
                    double t83663 = ccaa2*t83620*t83613*t83614*t83662;
                    double t83664 = ccaa0+t83652+t83663+t83648+t83658;
                    double t83665 = t83640-t83641;
                    double t83666 = t83624*t83627*t83665;
                    double t83667 = t83641+t83666;
                    double t83668 = ( (t83621 > 0.0) ?  1.0 : 0.0 ) ;
                    double t83669 = 1.0/tau_a[index];
                    double t83670 = 1.0/(tau_a[index]*tau_a[index]);
                    double t83671 = 0.0 ;
                    double t83672 = tau_a[index]*2.0;
                    double t83673 = 1.0/rho_a[index];
                    double t83674 = t83672-gamma_aa[index]*t83673*(1.0/4.0);
                    double t83675 = 1.0/(k*k);
                    double t83676 = rho_a[index]*2.0;
                    double t83677 = 1.0/pow(t83676,2.0/3.0);
                    double t83678 = pow(rho_a[index],5.0/3.0);
                    double t83679 = C_k*t83669*t83678;
                    double t83680 = t83679+1.0;
                    double t83681 = t83679-1.0;
                    double t83682 = 1.0/(t83680*t83680);
                    double t83683 = t83681*t83681;
                    double t83684 = t83683*t83683;
                    double t83685 = t83684*t83684;
                    double t83686 = 1.0/pow(t83680,1.1E1);
                    double t83687 = 1.0/(t83680*t83680*t83680);
                    double t83688 = 1.0/(t83680*t83680*t83680*t83680);
                    double t83689 = 1.0/(t83680*t83680*t83680*t83680*t83680);
                    double t83690 = 1.0/(t83680*t83680*t83680*t83680*t83680*t83680);
                    double t83691 = 1.0/(t83680*t83680*t83680*t83680*t83680*t83680*t83680);
                    double t83692 = 1.0/(t83680*t83680*t83680*t83680*t83680*t83680*t83680*t83680);
                    double t83693 = 1.0/(t83680*t83680*t83680*t83680*t83680*t83680*t83680*t83680*t83680);
                    double t83694 = 1.0/pow(t83680,1.0E1);
                    v_gamma_aa_tau_a_[index] = t83670*t83664*t83667*t83668*(-1.0/8.0)+t83671*t83664*t83669*(t83641+t83624* \
                       t83627*(t83640-c0p*t83610*t83612*2.0))*(1.0/8.0)-rho_a[index]*t83667*(t83671*(t83674*t83669*(1.0/2.0) \
                       -1.0)+t83668*(t83669-t83670*t83674*(1.0/2.0)))*(ccaa1*gcaa*t83651*t83618+ccaa2*gamma_aa[index]*t83620* \
                       t83614*t83662*2.0-ccaa1*gamma_aa[index]*t83620*t83614*1.0/(t83650*t83650)-ccaa2*t83620*t83613*t83614* \
                       1.0/(t83661*t83661)*(gcaa*t83618*2.0+gamma_aa[index]*t83620*t83614*2.0)-ccaa4*t83615*t83616*t83617* \
                       1.0/(t83646*t83646)*(gcaa*t83618*4.0+gamma_aa[index]*t83620*t83614*1.2E1+gamma_aa[index]*t83613*t83616* \
                       t83617*4.0+gcaa*t83613*t83614*t83619*1.2E1)+ccaa4*gamma_aa[index]*t83613*t83616*t83617*t83647*4.0+ \
                       ccaa3*gcaa*t83613*t83614*t83619*t83657*3.0-ccaa3*gamma_aa[index]*gcaa*t83613*t83614*t83619*1.0/(t83656* \
                       t83656)*(gcaa*t83618*3.0+gamma_aa[index]*t83620*t83614*6.0+gcaa*t83613*t83614*t83619*3.0))+mu_*t83673* \
                       t83675*t83677*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t83675*t83677*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t83670*t83678)/t83680-C_k*a_1*t83670*t83681*t83682*t83678+C_k*a_2* \
                       t83670*t83681*t83682*t83678*2.0-C_k*a_2*t83670*t83683*t83678*t83687*2.0+C_k*a_3*t83670*t83683*t83678* \
                       t83687*3.0-C_k*a_4*t83670*t83684*t83678*t83689*4.0+C_k*a_5*t83670*t83684*t83678*t83689*5.0-C_k*a_8* \
                       t83670*t83693*t83685*t83678*8.0+C_k*a_9*t83670*t83693*t83685*t83678*9.0+C_k*a_10*t83670*t83681*t83685* \
                       t83694*t83678*1.0E1-C_k*a_10*t83670*t83683*t83685*t83686*t83678*1.0E1+C_k*a_11*t83670*t83683*t83685* \
                       t83686*t83678*1.1E1-C_k*a_3*t83670*t83681*t83683*t83678*t83688*3.0+C_k*a_4*t83670*t83681*t83683*t83678* \
                       t83688*4.0-C_k*a_5*t83670*t83681*t83690*t83684*t83678*5.0+C_k*a_6*t83670*t83681*t83690*t83684*t83678* \
                       6.0-C_k*a_6*t83670*t83691*t83683*t83684*t83678*6.0+C_k*a_7*t83670*t83691*t83683*t83684*t83678*7.0- \
                       C_k*a_9*t83670*t83681*t83685*t83694*t83678*9.0-C_k*a_11*t83670*1.0/pow(t83680,1.2E1)*t83681*t83683* \
                       t83685*t83678*1.1E1-C_k*a_7*t83670*t83681*t83683*t83692*t83684*t83678*7.0+C_k*a_8*t83670*t83681*t83683* \
                       t83692*t83684*t83678*8.0)*(1.0/4.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t81347 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t81348 = c*t81347;
                    double t81349 = sqrt(t81348);
                    double t81350 = pow(t81348,3.0/2.0);
                    double t81351 = c*c;
                    double t81352 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t81353 = 1.0/c0p;
                    double t81354 = b1p*t81349;
                    double t81355 = b3p*t81350;
                    double t81356 = b4p*t81351*t81352;
                    double t81357 = b2p*c*t81347;
                    double t81358 = t81354+t81355+t81356+t81357;
                    double t81359 = 1.0/t81358;
                    double t81360 = t81353*t81359*(1.0/2.0);
                    double t81361 = t81360+1.0;
                    double t81362 = log(t81361);
                    double t81363 = a1p*c*t81347;
                    double t81364 = t81363+1.0;
                    double t81365 = gamma_bb[index]*gamma_bb[index];
                    double t81366 = gcaa*gcaa;
                    double t81367 = t81365*t81365;
                    double t81368 = t81366*t81366;
                    double t81369 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t81370 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t81371 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t81372 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t81373 = tau_b[index]-1.0/1.0E20;
                    double t81374 = pow(2.0,1.0/3.0);
                    double t81375 = t81374*2.0;
                    double t81376 = t81375-2.0;
                    double t81377 = two_13*2.0;
                    double t81378 = t81377-2.0;
                    double t81379 = 1.0/t81378;
                    double t81380 = 1.0/c0f;
                    double t81381 = b1f*t81349;
                    double t81382 = b3f*t81350;
                    double t81383 = b4f*t81351*t81352;
                    double t81384 = b2f*c*t81347;
                    double t81385 = t81381+t81382+t81383+t81384;
                    double t81386 = 1.0/t81385;
                    double t81387 = t81380*t81386*(1.0/2.0);
                    double t81388 = t81387+1.0;
                    double t81389 = log(t81388);
                    double t81390 = a1f*c*t81347;
                    double t81391 = t81390+1.0;
                    double t81392 = c0f*t81391*t81389*2.0;
                    double t81393 = c0p*t81362*t81364*2.0;
                    double t81394 = gamma_bb[index]*gcaa*t81370*4.0;
                    double t81395 = gamma_bb[index]*gcaa*t81371*t81365*t81366*4.0;
                    double t81396 = t81372*t81365*t81366*6.0;
                    double t81397 = t81367*t81368*t81369;
                    double t81398 = t81394+t81395+t81396+t81397+1.0;
                    double t81399 = 1.0/t81398;
                    double t81400 = ccaa4*t81367*t81368*t81369*t81399;
                    double t81401 = gamma_bb[index]*gcaa*t81370;
                    double t81402 = t81401+1.0;
                    double t81403 = 1.0/t81402;
                    double t81404 = ccaa1*gamma_bb[index]*gcaa*t81403*t81370;
                    double t81405 = gamma_bb[index]*gcaa*t81370*3.0;
                    double t81406 = gamma_bb[index]*gcaa*t81371*t81365*t81366;
                    double t81407 = t81372*t81365*t81366*3.0;
                    double t81408 = t81405+t81406+t81407+1.0;
                    double t81409 = 1.0/t81408;
                    double t81410 = ccaa3*gamma_bb[index]*gcaa*t81371*t81409*t81365*t81366;
                    double t81411 = gamma_bb[index]*gcaa*t81370*2.0;
                    double t81412 = t81372*t81365*t81366;
                    double t81413 = t81411+t81412+1.0;
                    double t81414 = 1.0/t81413;
                    double t81415 = ccaa2*t81414*t81372*t81365*t81366;
                    double t81416 = ccaa0+t81400+t81410+t81404+t81415;
                    double t81417 = t81392-t81393;
                    double t81418 = t81417*t81376*t81379;
                    double t81419 = t81418+t81393;
                    double t81420 = ( (t81373 > 0.0) ?  1.0 : 0.0 ) ;
                    double t81421 = 1.0/tau_b[index];
                    double t81422 = 1.0/(tau_b[index]*tau_b[index]);
                    double t81423 = 0.0 ;
                    double t81424 = tau_b[index]*2.0;
                    double t81425 = 1.0/rho_b[index];
                    double t81426 = t81424-gamma_bb[index]*t81425*(1.0/4.0);
                    double t81427 = 1.0/(k*k);
                    double t81428 = rho_b[index]*2.0;
                    double t81429 = 1.0/pow(t81428,2.0/3.0);
                    double t81430 = pow(rho_b[index],5.0/3.0);
                    double t81431 = C_k*t81421*t81430;
                    double t81432 = t81431+1.0;
                    double t81433 = t81431-1.0;
                    double t81434 = 1.0/(t81432*t81432);
                    double t81435 = t81433*t81433;
                    double t81436 = t81435*t81435;
                    double t81437 = t81436*t81436;
                    double t81438 = 1.0/pow(t81432,1.1E1);
                    double t81439 = 1.0/(t81432*t81432*t81432);
                    double t81440 = 1.0/(t81432*t81432*t81432*t81432);
                    double t81441 = 1.0/(t81432*t81432*t81432*t81432*t81432);
                    double t81442 = 1.0/(t81432*t81432*t81432*t81432*t81432*t81432);
                    double t81443 = 1.0/(t81432*t81432*t81432*t81432*t81432*t81432*t81432);
                    double t81444 = 1.0/(t81432*t81432*t81432*t81432*t81432*t81432*t81432*t81432);
                    double t81445 = 1.0/(t81432*t81432*t81432*t81432*t81432*t81432*t81432*t81432*t81432);
                    double t81446 = 1.0/pow(t81432,1.0E1);
                    v_gamma_bb_tau_b_[index] = t81420*t81422*t81416*t81419*(-1.0/8.0)+t81421*t81423*t81416*(t81393+t81376* \
                       t81379*(t81392-c0p*t81362*t81364*2.0))*(1.0/8.0)-rho_b[index]*t81419*(t81423*(t81421*t81426*(1.0/2.0) \
                       -1.0)+t81420*(t81421-t81422*t81426*(1.0/2.0)))*(ccaa1*gcaa*t81403*t81370+ccaa2*gamma_bb[index]*t81414* \
                       t81372*t81366*2.0-ccaa1*gamma_bb[index]*1.0/(t81402*t81402)*t81372*t81366-ccaa2*1.0/(t81413*t81413) \
                       *t81372*t81365*t81366*(gcaa*t81370*2.0+gamma_bb[index]*t81372*t81366*2.0)-ccaa4*t81367*t81368*t81369* \
                       1.0/(t81398*t81398)*(gcaa*t81370*4.0+gamma_bb[index]*t81372*t81366*1.2E1+gamma_bb[index]*t81365*t81368* \
                       t81369*4.0+gcaa*t81371*t81365*t81366*1.2E1)+ccaa4*gamma_bb[index]*t81365*t81368*t81369*t81399*4.0+ \
                       ccaa3*gcaa*t81371*t81409*t81365*t81366*3.0-ccaa3*gamma_bb[index]*gcaa*t81371*1.0/(t81408*t81408)*t81365* \
                       t81366*(gcaa*t81370*3.0+gamma_bb[index]*t81372*t81366*6.0+gcaa*t81371*t81365*t81366*3.0))+mu_*t81425* \
                       t81427*t81429*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t81427*t81429*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t81430*t81422)/t81432-C_k*a_1*t81430*t81422*t81433*t81434+C_k*a_2* \
                       t81430*t81422*t81433*t81434*2.0-C_k*a_2*t81430*t81422*t81435*t81439*2.0+C_k*a_3*t81430*t81422*t81435* \
                       t81439*3.0-C_k*a_4*t81430*t81422*t81441*t81436*4.0+C_k*a_5*t81430*t81422*t81441*t81436*5.0-C_k*a_8* \
                       t81430*t81422*t81445*t81437*8.0+C_k*a_9*t81430*t81422*t81445*t81437*9.0+C_k*a_10*t81430*t81422*t81433* \
                       t81437*t81446*1.0E1-C_k*a_10*t81430*t81422*t81435*t81437*t81438*1.0E1+C_k*a_11*t81430*t81422*t81435* \
                       t81437*t81438*1.1E1-C_k*a_3*t81430*t81422*t81440*t81433*t81435*3.0+C_k*a_4*t81430*t81422*t81440*t81433* \
                       t81435*4.0-C_k*a_5*t81430*t81422*t81433*t81442*t81436*5.0+C_k*a_6*t81430*t81422*t81433*t81442*t81436* \
                       6.0-C_k*a_6*t81430*t81422*t81443*t81435*t81436*6.0+C_k*a_7*t81430*t81422*t81443*t81435*t81436*7.0- \
                       C_k*a_9*t81430*t81422*t81433*t81437*t81446*9.0-C_k*a_11*t81430*t81422*1.0/pow(t81432,1.2E1)*t81433* \
                       t81435*t81437*1.1E1-C_k*a_7*t81430*t81422*t81433*t81435*t81444*t81436*7.0+C_k*a_8*t81430*t81422*t81433* \
                       t81435*t81444*t81436*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t82474 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t82475 = c*t82474;
                    double t82476 = sqrt(t82475);
                    double t82477 = pow(t82475,3.0/2.0);
                    double t82478 = c*c;
                    double t82479 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t82480 = 1.0/c0p;
                    double t82481 = b1p*t82476;
                    double t82482 = b3p*t82477;
                    double t82483 = b4p*t82478*t82479;
                    double t82484 = b2p*c*t82474;
                    double t82485 = t82481+t82482+t82483+t82484;
                    double t82486 = 1.0/t82485;
                    double t82487 = t82480*t82486*(1.0/2.0);
                    double t82488 = t82487+1.0;
                    double t82489 = log(t82488);
                    double t82490 = a1p*c*t82474;
                    double t82491 = t82490+1.0;
                    double t82492 = gamma_bb[index]*gamma_bb[index];
                    double t82493 = gcaa*gcaa;
                    double t82494 = t82492*t82492;
                    double t82495 = t82493*t82493;
                    double t82496 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t82497 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t82498 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t82499 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t82500 = tau_b[index]-1.0/1.0E20;
                    double t82501 = pow(2.0,1.0/3.0);
                    double t82502 = t82501*2.0;
                    double t82503 = t82502-2.0;
                    double t82504 = two_13*2.0;
                    double t82505 = t82504-2.0;
                    double t82506 = 1.0/t82505;
                    double t82507 = 1.0/c0f;
                    double t82508 = b1f*t82476;
                    double t82509 = b3f*t82477;
                    double t82510 = b4f*t82478*t82479;
                    double t82511 = b2f*c*t82474;
                    double t82512 = t82510+t82511+t82508+t82509;
                    double t82513 = 1.0/t82512;
                    double t82514 = t82513*t82507*(1.0/2.0);
                    double t82515 = t82514+1.0;
                    double t82516 = log(t82515);
                    double t82517 = a1f*c*t82474;
                    double t82518 = t82517+1.0;
                    double t82519 = c0f*t82516*t82518*2.0;
                    double t82520 = c0p*t82491*t82489*2.0;
                    double t82521 = gamma_bb[index]*gcaa*t82497*4.0;
                    double t82522 = gamma_bb[index]*gcaa*t82492*t82493*t82498*4.0;
                    double t82523 = t82492*t82493*t82499*6.0;
                    double t82524 = t82494*t82495*t82496;
                    double t82525 = t82521+t82522+t82523+t82524+1.0;
                    double t82526 = 1.0/t82525;
                    double t82527 = ccaa4*t82526*t82494*t82495*t82496;
                    double t82528 = gamma_bb[index]*gcaa*t82497;
                    double t82529 = t82528+1.0;
                    double t82530 = 1.0/t82529;
                    double t82531 = ccaa1*gamma_bb[index]*gcaa*t82530*t82497;
                    double t82532 = gamma_bb[index]*gcaa*t82497*3.0;
                    double t82533 = gamma_bb[index]*gcaa*t82492*t82493*t82498;
                    double t82534 = t82492*t82493*t82499*3.0;
                    double t82535 = t82532+t82533+t82534+1.0;
                    double t82536 = 1.0/t82535;
                    double t82537 = ccaa3*gamma_bb[index]*gcaa*t82536*t82492*t82493*t82498;
                    double t82538 = gamma_bb[index]*gcaa*t82497*2.0;
                    double t82539 = t82492*t82493*t82499;
                    double t82540 = t82538+t82539+1.0;
                    double t82541 = 1.0/t82540;
                    double t82542 = ccaa2*t82541*t82492*t82493*t82499;
                    double t82543 = ccaa0+t82531+t82542+t82527+t82537;
                    double t82544 = t82520-t82519;
                    double t82545 = t82520-t82503*t82506*t82544;
                    double t82546 = ( (t82500 > 0.0) ?  1.0 : 0.0 ) ;
                    double t82547 = 1.0/tau_b[index];
                    double t82548 = 1.0/(tau_b[index]*tau_b[index]);
                    double t82549 = 0.0 ;
                    double t82550 = tau_b[index]*2.0;
                    double t82551 = 1.0/rho_b[index];
                    double t82552 = t82550-gamma_bb[index]*t82551*(1.0/4.0);
                    double t82553 = 1.0/(k*k);
                    double t82554 = rho_b[index]*2.0;
                    double t82555 = 1.0/pow(t82554,2.0/3.0);
                    double t82556 = pow(rho_b[index],5.0/3.0);
                    double t82557 = C_k*t82547*t82556;
                    double t82558 = t82557+1.0;
                    double t82559 = t82557-1.0;
                    double t82560 = 1.0/(t82558*t82558);
                    double t82561 = t82559*t82559;
                    double t82562 = t82561*t82561;
                    double t82563 = t82562*t82562;
                    double t82564 = 1.0/pow(t82558,1.1E1);
                    double t82565 = 1.0/(t82558*t82558*t82558);
                    double t82566 = 1.0/(t82558*t82558*t82558*t82558);
                    double t82567 = 1.0/(t82558*t82558*t82558*t82558*t82558);
                    double t82568 = 1.0/(t82558*t82558*t82558*t82558*t82558*t82558);
                    double t82569 = 1.0/(t82558*t82558*t82558*t82558*t82558*t82558*t82558);
                    double t82570 = 1.0/(t82558*t82558*t82558*t82558*t82558*t82558*t82558*t82558);
                    double t82571 = 1.0/(t82558*t82558*t82558*t82558*t82558*t82558*t82558*t82558*t82558);
                    double t82572 = 1.0/pow(t82558,1.0E1);
                    v_gamma_bb_tau_b_[index] = t82543*t82545*t82546*t82548*(-1.0/8.0)+t82543*t82547*t82549*(t82520+t82503* \
                       t82506*(t82519-c0p*t82491*t82489*2.0))*(1.0/8.0)-rho_b[index]*t82545*(t82549*(t82552*t82547*(1.0/2.0) \
                       -1.0)+t82546*(t82547-t82552*t82548*(1.0/2.0)))*(ccaa1*gcaa*t82530*t82497+ccaa2*gamma_bb[index]*t82541* \
                       t82493*t82499*2.0-ccaa1*gamma_bb[index]*t82493*1.0/(t82529*t82529)*t82499-ccaa2*1.0/(t82540*t82540) \
                       *t82492*t82493*t82499*(gcaa*t82497*2.0+gamma_bb[index]*t82493*t82499*2.0)-ccaa4*1.0/(t82525*t82525) \
                       *t82494*t82495*t82496*(gcaa*t82497*4.0+gamma_bb[index]*t82493*t82499*1.2E1+gamma_bb[index]*t82492* \
                       t82495*t82496*4.0+gcaa*t82492*t82493*t82498*1.2E1)+ccaa4*gamma_bb[index]*t82526*t82492*t82495*t82496* \
                       4.0+ccaa3*gcaa*t82536*t82492*t82493*t82498*3.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t82535*t82535)*t82492* \
                       t82493*t82498*(gcaa*t82497*3.0+gamma_bb[index]*t82493*t82499*6.0+gcaa*t82492*t82493*t82498*3.0))+mu_* \
                       t82551*t82553*t82555*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t82553*t82555*(1.0/ \
                       4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t82556*t82548)/t82558-C_k*a_1*t82560*t82556*t82548*t82559-C_k* \
                       a_2*t82561*t82556*t82565*t82548*2.0+C_k*a_2*t82560*t82556*t82548*t82559*2.0+C_k*a_3*t82561*t82556* \
                       t82565*t82548*3.0-C_k*a_4*t82562*t82556*t82548*t82567*4.0+C_k*a_5*t82562*t82556*t82548*t82567*5.0- \
                       C_k*a_8*t82571*t82563*t82556*t82548*8.0+C_k*a_9*t82571*t82563*t82556*t82548*9.0-C_k*a_10*t82561*t82563* \
                       t82564*t82556*t82548*1.0E1+C_k*a_11*t82561*t82563*t82564*t82556*t82548*1.1E1+C_k*a_10*t82563*t82572* \
                       t82556*t82548*t82559*1.0E1-C_k*a_3*t82561*t82556*t82548*t82566*t82559*3.0+C_k*a_4*t82561*t82556*t82548* \
                       t82566*t82559*4.0-C_k*a_5*t82562*t82556*t82548*t82559*t82568*5.0-C_k*a_6*t82561*t82562*t82556*t82548* \
                       t82569*6.0+C_k*a_6*t82562*t82556*t82548*t82559*t82568*6.0+C_k*a_7*t82561*t82562*t82556*t82548*t82569* \
                       7.0-C_k*a_9*t82563*t82572*t82556*t82548*t82559*9.0-C_k*a_11*t82561*t82563*t82556*t82548*1.0/pow(t82558,1.2E1) \
                       *t82559*1.1E1-C_k*a_7*t82561*t82570*t82562*t82556*t82548*t82559*7.0+C_k*a_8*t82561*t82570*t82562*t82556* \
                       t82548*t82559*8.0)*(1.0/4.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

