/**********************************************************
* wB97_functional.cc: definitions for wB97_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 07-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "wB97_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

wB97_Functional::wB97_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "wB97";
    description_ = "wB97 Range-Corrected Power Series GGA";
    citation_ = "J. Chai and M. Head-Gordon, J. Chem. Phys., 128, pp. 084106, 2008";

    double omega = 4.0000000000000002E-01;
    params_.push_back(make_pair("omega",omega));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 3.9905100000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.7006599999999999E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 1.0729200000000001E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = 8.8821100000000008E+00;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -2.5535199999999998E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.1892600000000000E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -2.6945200000000000E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 1.7092700000000001E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 1.1311599999999999E+00;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = -2.7491500000000002E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = 1.2090000000000000E+01;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = -5.7164200000000003E+00;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
wB97_Functional::~wB97_Functional()
{
}
void wB97_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t117274 = 1.0/pow(rho_a[index],1.0/3.0);
            double t117275 = c*t117274;
            double t117276 = sqrt(t117275);
            double t117277 = pow(t117275,3.0/2.0);
            double t117278 = c*c;
            double t117279 = 1.0/pow(rho_a[index],2.0/3.0);
            double t117280 = 1.0/c0p;
            double t117281 = b1p*t117276;
            double t117282 = b3p*t117277;
            double t117283 = b4p*t117278*t117279;
            double t117284 = b2p*c*t117274;
            double t117285 = t117281+t117282+t117283+t117284;
            double t117286 = 1.0/t117285;
            double t117287 = t117280*t117286*(1.0/2.0);
            double t117288 = t117287+1.0;
            double t117289 = log(t117288);
            double t117290 = a1p*c*t117274;
            double t117291 = t117290+1.0;
            double t117292 = rho_a[index]*2.0;
            double t117293 = 1.0/pow(t117292,1.0/3.0);
            double t117294 = c*t117293;
            double t117295 = gamma_aa[index]*gamma_aa[index];
            double t117296 = gcab*gcab;
            double t117297 = t117295*t117295;
            double t117298 = t117296*t117296;
            double t117299 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t117300 = 1.0/pow(rho_a[index],8.0/3.0);
            double t117301 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t117302 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t117303 = pow(2.0,1.0/3.0);
            double t117304 = t117303*2.0;
            double t117305 = t117304-2.0;
            double t117306 = two_13*2.0;
            double t117307 = t117306-2.0;
            double t117308 = 1.0/t117307;
            double t117309 = 1.0/c0f;
            double t117310 = b1f*t117276;
            double t117311 = b3f*t117277;
            double t117312 = b4f*t117278*t117279;
            double t117313 = b2f*c*t117274;
            double t117314 = t117310+t117311+t117312+t117313;
            double t117315 = 1.0/t117314;
            double t117316 = t117315*t117309*(1.0/2.0);
            double t117317 = t117316+1.0;
            double t117318 = log(t117317);
            double t117319 = a1f*c*t117274;
            double t117320 = t117319+1.0;
            double t117321 = c0f*t117320*t117318*2.0;
            double t117322 = c0p*t117291*t117289*2.0;
            double t117323 = gcaa*gcaa;
            double t117324 = t117323*t117323;
            double t117325 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t117326 = 1.0/pow(t117325,1.0/3.0);
            double t117327 = 1.0/(omega*omega);
            double t117328 = pow(t117325,2.0/3.0);
            double t117329 = exp(-t117327*t117328);
            double t117330 = gx*gx;
            double t117331 = t117330*t117330;
            functional_[index] = (rho_a[index]*(t117322+t117305*t117308*(t117321-c0p*t117291*t117289*2.0))*2.0- \
               c0p*rho_a[index]*log((t117280*(1.0/2.0))/(b1p*sqrt(t117294)+b3p*pow(t117294,3.0/2.0)+b4p*1.0/pow(t117292,2.0/ \
               3.0)*t117278+b2p*c*t117293)+1.0)*(a1p*c*t117293+1.0)*4.0)*(ccab0+(ccab2*t117302*t117295*t117296)/(gamma_aa[index]* \
               gcab*t117300*2.0+t117302*t117295*t117296+1.0)+(ccab1*gamma_aa[index]*gcab*t117300)/(gamma_aa[index]* \
               gcab*t117300+1.0)+(ccab4*t117297*t117298*t117299)/(gamma_aa[index]*gcab*t117300*4.0+t117302*t117295* \
               t117296*6.0+t117297*t117298*t117299+gamma_aa[index]*gcab*t117301*t117295*t117296*4.0+1.0)+(ccab3*gamma_aa[index]* \
               gcab*t117301*t117295*t117296)/(gamma_aa[index]*gcab*t117300*3.0+t117302*t117295*t117296*3.0+gamma_aa[index]* \
               gcab*t117301*t117295*t117296+1.0))-rho_a[index]*(t117322+t117305*t117308*(t117321-t117322))*(ccaa0+ \
               (ccaa2*t117302*t117323*t117295)/(gamma_aa[index]*gcaa*t117300*2.0+t117302*t117323*t117295+1.0)+(ccaa1* \
               gamma_aa[index]*gcaa*t117300)/(gamma_aa[index]*gcaa*t117300+1.0)+(ccaa4*t117324*t117297*t117299)/(gamma_aa[index]* \
               gcaa*t117300*4.0+t117302*t117323*t117295*6.0+t117324*t117297*t117299+gamma_aa[index]*gcaa*t117301* \
               t117323*t117295*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t117301*t117323*t117295)/(gamma_aa[index]*gcaa* \
               t117300*3.0+t117302*t117323*t117295*3.0+gamma_aa[index]*gcaa*t117301*t117323*t117295+1.0))*2.0-c0* \
               pow(rho_a[index],4.0/3.0)*(omega*t117326*(erf(pow(t117325,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
               +omega*t117326*(t117329-(omega*omega)*1.0/pow(t117325,2.0/3.0)*(t117329-1.0)*(1.0/2.0)))*(4.0/3.0) \
               -1.0)*(cx0+(cx2*t117302*t117330*t117295)/(gamma_aa[index]*gx*t117300*2.0+t117302*t117330*t117295+1.0) \
               +(cx1*gamma_aa[index]*gx*t117300)/(gamma_aa[index]*gx*t117300+1.0)+(cx4*t117331*t117297*t117299)/(gamma_aa[index]* \
               gx*t117300*4.0+t117302*t117330*t117295*6.0+t117331*t117297*t117299+gamma_aa[index]*gx*t117301*t117330* \
               t117295*4.0+1.0)+(cx3*gamma_aa[index]*gx*t117301*t117330*t117295)/(gamma_aa[index]*gx*t117300*3.0+ \
               t117302*t117330*t117295*3.0+gamma_aa[index]*gx*t117301*t117330*t117295+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t117333 = gamma_aa[index]*gamma_aa[index];
            double t117334 = gcab*gcab;
            double t117335 = t117333*t117333;
            double t117336 = t117334*t117334;
            double t117337 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t117338 = 1.0/pow(rho_a[index],8.0/3.0);
            double t117339 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t117340 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t117341 = rho_a[index]*2.0;
            double t117342 = 1.0/pow(t117341,1.0/3.0);
            double t117343 = c*t117342;
            double t117344 = sqrt(t117343);
            double t117345 = b1p*t117344;
            double t117346 = pow(t117343,3.0/2.0);
            double t117347 = b3p*t117346;
            double t117348 = b2p*c*t117342;
            double t117349 = c*c;
            double t117350 = 1.0/pow(t117341,2.0/3.0);
            double t117351 = b4p*t117350*t117349;
            double t117352 = t117351+t117345+t117347+t117348;
            double t117353 = 1.0/pow(t117341,4.0/3.0);
            double t117354 = 1.0/c0p;
            double t117355 = 1.0/t117352;
            double t117356 = t117354*t117355*(1.0/2.0);
            double t117357 = t117356+1.0;
            double t117358 = 1.0/pow(rho_a[index],1.0/3.0);
            double t117359 = c*t117358;
            double t117360 = sqrt(t117359);
            double t117361 = b1f*t117360;
            double t117362 = pow(t117359,3.0/2.0);
            double t117363 = b3f*t117362;
            double t117364 = 1.0/pow(rho_a[index],2.0/3.0);
            double t117365 = b4f*t117364*t117349;
            double t117366 = b2f*c*t117358;
            double t117367 = t117361+t117363+t117365+t117366;
            double t117368 = 1.0/pow(rho_a[index],4.0/3.0);
            double t117369 = b1p*t117360;
            double t117370 = b3p*t117362;
            double t117371 = b4p*t117364*t117349;
            double t117372 = b2p*c*t117358;
            double t117373 = t117370+t117371+t117372+t117369;
            double t117374 = 1.0/pow(rho_a[index],5.0/3.0);
            double t117375 = 1.0/sqrt(t117359);
            double t117376 = 1.0/c0f;
            double t117377 = 1.0/t117367;
            double t117378 = t117376*t117377*(1.0/2.0);
            double t117379 = t117378+1.0;
            double t117380 = 1.0/t117373;
            double t117381 = t117380*t117354*(1.0/2.0);
            double t117382 = t117381+1.0;
            double t117383 = a1p*c*t117358;
            double t117384 = t117383+1.0;
            double t117385 = 1.0/t117382;
            double t117386 = 1.0/(t117373*t117373);
            double t117387 = b4p*t117374*t117349*(2.0/3.0);
            double t117388 = b2p*c*t117368*(1.0/3.0);
            double t117389 = b1p*c*t117375*t117368*(1.0/6.0);
            double t117390 = b3p*c*t117360*t117368*(1.0/2.0);
            double t117391 = t117390+t117387+t117388+t117389;
            double t117392 = t117391*t117384*t117385*t117386;
            double t117393 = log(t117382);
            double t117394 = log(t117357);
            double t117395 = a1p*c*t117342;
            double t117396 = t117395+1.0;
            double t117397 = pow(2.0,1.0/3.0);
            double t117398 = t117397*2.0;
            double t117399 = t117398-2.0;
            double t117400 = two_13*2.0;
            double t117401 = t117400-2.0;
            double t117402 = 1.0/t117401;
            double t117403 = log(t117379);
            double t117404 = a1f*c*t117358;
            double t117405 = t117404+1.0;
            double t117406 = c0f*t117403*t117405*2.0;
            double t117408 = c0p*t117384*t117393*2.0;
            double t117407 = t117406-t117408;
            double t117409 = gcaa*gcaa;
            double t117410 = t117409*t117409;
            double t117411 = t117402*t117407*t117399;
            double t117412 = t117411+t117408;
            double t117413 = gamma_aa[index]*gcab*t117338*4.0;
            double t117414 = gamma_aa[index]*gcab*t117333*t117334*t117339*4.0;
            double t117415 = t117340*t117333*t117334*6.0;
            double t117416 = t117335*t117336*t117337;
            double t117417 = t117413+t117414+t117415+t117416+1.0;
            double t117418 = 1.0/t117417;
            double t117419 = gamma_aa[index]*gcab*t117338;
            double t117420 = t117419+1.0;
            double t117421 = 1.0/t117420;
            double t117422 = gamma_aa[index]*gcab*t117338*3.0;
            double t117423 = gamma_aa[index]*gcab*t117333*t117334*t117339;
            double t117424 = t117340*t117333*t117334*3.0;
            double t117425 = t117422+t117423+t117424+1.0;
            double t117426 = 1.0/t117425;
            double t117427 = gamma_aa[index]*gcab*t117338*2.0;
            double t117428 = t117340*t117333*t117334;
            double t117429 = t117427+t117428+1.0;
            double t117430 = 1.0/t117429;
            double t117431 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t117432 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t117433 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t117434 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t117435 = gamma_aa[index]*gcaa*t117338*4.0;
            double t117436 = gamma_aa[index]*gcaa*t117333*t117409*t117339*4.0;
            double t117437 = t117340*t117333*t117409*6.0;
            double t117438 = t117410*t117335*t117337;
            double t117439 = t117435+t117436+t117437+t117438+1.0;
            double t117440 = 1.0/t117439;
            double t117441 = gamma_aa[index]*gcaa*t117338;
            double t117442 = t117441+1.0;
            double t117443 = 1.0/t117442;
            double t117444 = gamma_aa[index]*gcaa*t117338*3.0;
            double t117445 = gamma_aa[index]*gcaa*t117333*t117409*t117339;
            double t117446 = t117340*t117333*t117409*3.0;
            double t117447 = t117444+t117445+t117446+1.0;
            double t117448 = 1.0/t117447;
            double t117449 = gamma_aa[index]*gcaa*t117338*2.0;
            double t117450 = t117340*t117333*t117409;
            double t117451 = t117450+t117449+1.0;
            double t117452 = 1.0/t117451;
            double t117453 = 1.0/t117379;
            double t117454 = 1.0/(t117367*t117367);
            double t117455 = b4f*t117374*t117349*(2.0/3.0);
            double t117456 = b2f*c*t117368*(1.0/3.0);
            double t117457 = b1f*c*t117375*t117368*(1.0/6.0);
            double t117458 = b3f*c*t117360*t117368*(1.0/2.0);
            double t117459 = t117455+t117456+t117457+t117458;
            double t117460 = a1f*c*c0f*t117403*t117368*(2.0/3.0);
            double t117461 = a1p*c*c0p*t117393*t117368*(2.0/3.0);
            double t117462 = ccaa4*t117410*t117440*t117335*t117337;
            double t117463 = ccaa1*gamma_aa[index]*gcaa*t117443*t117338;
            double t117464 = ccaa3*gamma_aa[index]*gcaa*t117333*t117409*t117339*t117448;
            double t117465 = ccaa2*t117340*t117333*t117452*t117409;
            double t117466 = ccaa0+t117462+t117463+t117464+t117465;
            double t117467 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t117468 = 1.0/(omega*omega);
            double t117469 = pow(t117467,2.0/3.0);
            double t117472 = t117468*t117469;
            double t117470 = exp(-t117472);
            double t117471 = 1.0/pow(t117467,1.0/3.0);
            double t117473 = omega*omega;
            double t117474 = t117470-1.0;
            double t117475 = 1.0/pow(t117467,2.0/3.0);
            double t117476 = 1.0/pow(t117467,4.0/3.0);
            double t117477 = 1.0/omega;
            double t117485 = t117473*t117474*t117475*(1.0/2.0);
            double t117478 = t117470-t117485;
            double t117479 = gx*gx;
            double t117480 = t117479*t117479;
            double t117481 = pow(t117467,1.0/3.0);
            double t117482 = t117481*t117477;
            double t117483 = erf(t117482);
            double t117484 = t117483*(3.991211251234741E15/2.251799813685248E15);
            double t117486 = omega*t117471*t117478;
            double t117487 = t117484+t117486;
            double t117488 = gamma_aa[index]*gx*t117338*4.0;
            double t117489 = gamma_aa[index]*gx*t117333*t117339*t117479*4.0;
            double t117490 = t117340*t117333*t117479*6.0;
            double t117491 = t117335*t117480*t117337;
            double t117492 = t117490+t117491+t117488+t117489+1.0;
            double t117493 = 1.0/t117492;
            double t117494 = cx4*t117335*t117480*t117337*t117493;
            double t117495 = gamma_aa[index]*gx*t117338;
            double t117496 = t117495+1.0;
            double t117497 = 1.0/t117496;
            double t117498 = cx1*gamma_aa[index]*gx*t117338*t117497;
            double t117499 = gamma_aa[index]*gx*t117338*3.0;
            double t117500 = gamma_aa[index]*gx*t117333*t117339*t117479;
            double t117501 = t117340*t117333*t117479*3.0;
            double t117502 = t117500+t117501+t117499+1.0;
            double t117503 = 1.0/t117502;
            double t117504 = cx3*gamma_aa[index]*gx*t117503*t117333*t117339*t117479;
            double t117505 = gamma_aa[index]*gx*t117338*2.0;
            double t117506 = t117340*t117333*t117479;
            double t117507 = t117505+t117506+1.0;
            double t117508 = 1.0/t117507;
            double t117509 = cx2*t117340*t117333*t117508*t117479;
            double t117510 = cx0+t117504+t117509+t117494+t117498;
            double t117511 = pow(rho_a[index],4.0/3.0);
            double t117512 = omega*t117471*t117487*(4.0/3.0);
            double t117513 = t117512-1.0;
            v_rho_a_[index] = -(rho_a[index]*t117412*2.0-c0p*rho_a[index]*t117394*t117396*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t117421*t117432*(4.0/3.0)+ccab2*t117430*t117431*t117333*t117334*(8.0/3.0)+ccab4*t117335*t117434* \
               t117336*t117418*(1.6E1/3.0)-ccab1*1.0/(t117420*t117420)*t117431*t117333*t117334*(4.0/3.0)-ccab2*t117340* \
               t117333*t117334*1.0/(t117429*t117429)*(gamma_aa[index]*gcab*t117432*(8.0/3.0)+t117431*t117333*t117334* \
               (8.0/3.0))-ccab4*t117335*t117336*1.0/(t117417*t117417)*t117337*(gamma_aa[index]*gcab*t117432*(1.6E1/ \
               3.0)+t117431*t117333*t117334*1.6E1+t117335*t117434*t117336*(1.6E1/3.0)+gamma_aa[index]*gcab*t117333* \
               t117334*t117433*1.6E1)+ccab3*gamma_aa[index]*gcab*t117333*t117334*t117433*t117426*4.0-ccab3*gamma_aa[index]* \
               gcab*t117333*t117334*1.0/(t117425*t117425)*t117339*(gamma_aa[index]*gcab*t117432*4.0+t117431*t117333* \
               t117334*8.0+gamma_aa[index]*gcab*t117333*t117334*t117433*4.0))-t117412*t117466-(rho_a[index]*((1.0/ \
               (t117352*t117352)*t117396*(b4p*1.0/pow(t117341,5.0/3.0)*t117349*(2.0/3.0)+b2p*c*t117353*(1.0/3.0)+ \
               b3p*c*t117344*t117353*(1.0/2.0)+b1p*c*1.0/sqrt(t117343)*t117353*(1.0/6.0)))/t117357-a1p*c*c0p*t117353* \
               t117394*(2.0/3.0))*2.0+rho_a[index]*(t117461-t117392+t117402*t117399*(t117460+t117392-t117405*t117453* \
               t117454*t117459-a1p*c*c0p*t117393*t117368*(2.0/3.0)))-c0p*t117384*t117393*2.0+c0p*t117394*t117396* \
               2.0-t117402*t117407*t117399)*(ccab0+ccab1*gamma_aa[index]*gcab*t117421*t117338+ccab2*t117340*t117430* \
               t117333*t117334+ccab4*t117335*t117336*t117337*t117418+ccab3*gamma_aa[index]*gcab*t117333*t117334*t117426* \
               t117339)+rho_a[index]*t117412*(ccaa1*gamma_aa[index]*gcaa*t117432*t117443*(8.0/3.0)+ccaa4*t117410* \
               t117440*t117335*t117434*(3.2E1/3.0)+ccaa2*t117431*t117333*t117452*t117409*(1.6E1/3.0)-ccaa1*t117431* \
               t117333*1.0/(t117442*t117442)*t117409*(8.0/3.0)-ccaa2*t117340*t117333*1.0/(t117451*t117451)*t117409* \
               (gamma_aa[index]*gcaa*t117432*(1.6E1/3.0)+t117431*t117333*t117409*(1.6E1/3.0))-ccaa4*t117410*t117335* \
               t117337*1.0/(t117439*t117439)*(gamma_aa[index]*gcaa*t117432*(3.2E1/3.0)+t117410*t117335*t117434*(3.2E1/ \
               3.0)+t117431*t117333*t117409*3.2E1+gamma_aa[index]*gcaa*t117333*t117433*t117409*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t117333*t117433*t117409*t117448*8.0-ccaa3*gamma_aa[index]*gcaa*t117333*t117409*t117339*1.0/(t117447* \
               t117447)*(gamma_aa[index]*gcaa*t117432*8.0+t117431*t117333*t117409*1.6E1+gamma_aa[index]*gcaa*t117333* \
               t117433*t117409*8.0))+rho_a[index]*t117466*(t117461-t117392+t117402*t117399*(t117460-t117461+t117392- \
               t117405*t117453*t117454*t117459))-c0*t117510*t117511*(omega*t117471*(omega*t117476*t117478*(-2.778046668940015E15/ \
               1.40737488355328E14)+omega*t117471*((t117470*(1.0/3.0))/rho_a[index]+t117473*t117474*1.0/pow(t117467,5.0/ \
               3.0)*(2.778046668940015E15/1.40737488355328E14)-t117470*t117471*t117468*(2.778046668940015E15/7.0368744177664E13) \
               )+1.0/sqrt(3.141592653589793)*t117470*t117475*t117477*(1.108777112152858E31/1.584563250285287E29)) \
               *(4.0/3.0)-omega*t117476*t117487*(2.778046668940015E15/1.05553116266496E14))-c0*pow(rho_a[index],1.0/ \
               3.0)*t117510*t117513*(4.0/3.0)+c0*t117511*t117513*(cx1*gamma_aa[index]*gx*t117432*t117497*(8.0/3.0) \
               +cx2*t117431*t117333*t117508*t117479*(1.6E1/3.0)+cx4*t117335*t117434*t117480*t117493*(3.2E1/3.0)-cx1* \
               t117431*t117333*1.0/(t117496*t117496)*t117479*(8.0/3.0)-cx2*t117340*t117333*1.0/(t117507*t117507)* \
               t117479*(gamma_aa[index]*gx*t117432*(1.6E1/3.0)+t117431*t117333*t117479*(1.6E1/3.0))-cx4*t117335*t117480* \
               t117337*1.0/(t117492*t117492)*(gamma_aa[index]*gx*t117432*(3.2E1/3.0)+t117335*t117434*t117480*(3.2E1/ \
               3.0)+t117431*t117333*t117479*3.2E1+gamma_aa[index]*gx*t117333*t117433*t117479*3.2E1)+cx3*gamma_aa[index]* \
               gx*t117503*t117333*t117433*t117479*8.0-cx3*gamma_aa[index]*gx*1.0/(t117502*t117502)*t117333*t117339* \
               t117479*(gamma_aa[index]*gx*t117432*8.0+t117431*t117333*t117479*1.6E1+gamma_aa[index]*gx*t117333*t117433* \
               t117479*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t117515 = 1.0/pow(rho_a[index],1.0/3.0);
                double t117516 = c*t117515;
                double t117517 = sqrt(t117516);
                double t117518 = pow(t117516,3.0/2.0);
                double t117519 = c*c;
                double t117520 = 1.0/pow(rho_a[index],2.0/3.0);
                double t117521 = 1.0/c0p;
                double t117522 = b1p*t117517;
                double t117523 = b3p*t117518;
                double t117524 = b4p*t117520*t117519;
                double t117525 = b2p*c*t117515;
                double t117526 = t117522+t117523+t117524+t117525;
                double t117527 = 1.0/t117526;
                double t117528 = t117521*t117527*(1.0/2.0);
                double t117529 = t117528+1.0;
                double t117530 = log(t117529);
                double t117531 = a1p*c*t117515;
                double t117532 = t117531+1.0;
                double t117533 = rho_a[index]*2.0;
                double t117534 = 1.0/pow(t117533,1.0/3.0);
                double t117535 = c*t117534;
                double t117536 = 1.0/pow(rho_a[index],8.0/3.0);
                double t117537 = gamma_aa[index]*gamma_aa[index];
                double t117538 = gcab*gcab;
                double t117539 = t117538*t117538;
                double t117540 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t117541 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t117542 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t117543 = gamma_aa[index]*gcab*t117536;
                double t117544 = t117543+1.0;
                double t117545 = gamma_aa[index]*gcab*t117536*3.0;
                double t117546 = gamma_aa[index]*gcab*t117542*t117537*t117538;
                double t117547 = t117541*t117537*t117538*3.0;
                double t117548 = t117545+t117546+t117547+1.0;
                double t117549 = t117537*t117537;
                double t117550 = gamma_aa[index]*gcab*t117536*4.0;
                double t117551 = gamma_aa[index]*gcab*t117542*t117537*t117538*4.0;
                double t117552 = t117541*t117537*t117538*6.0;
                double t117553 = t117540*t117539*t117549;
                double t117554 = t117550+t117551+t117552+t117553+1.0;
                double t117555 = gamma_aa[index]*gcab*t117536*2.0;
                double t117556 = t117541*t117537*t117538;
                double t117557 = t117555+t117556+1.0;
                double t117558 = pow(2.0,1.0/3.0);
                double t117559 = t117558*2.0;
                double t117560 = t117559-2.0;
                double t117561 = two_13*2.0;
                double t117562 = t117561-2.0;
                double t117563 = 1.0/t117562;
                double t117564 = 1.0/c0f;
                double t117565 = b1f*t117517;
                double t117566 = b3f*t117518;
                double t117567 = b4f*t117520*t117519;
                double t117568 = b2f*c*t117515;
                double t117569 = t117565+t117566+t117567+t117568;
                double t117570 = 1.0/t117569;
                double t117571 = t117570*t117564*(1.0/2.0);
                double t117572 = t117571+1.0;
                double t117573 = log(t117572);
                double t117574 = a1f*c*t117515;
                double t117575 = t117574+1.0;
                double t117576 = c0f*t117573*t117575*2.0;
                double t117577 = c0p*t117530*t117532*2.0;
                double t117578 = gcaa*gcaa;
                double t117579 = t117578*t117578;
                double t117580 = gamma_aa[index]*gcaa*t117536;
                double t117581 = t117580+1.0;
                double t117582 = gamma_aa[index]*gcaa*t117536*3.0;
                double t117583 = gamma_aa[index]*gcaa*t117542*t117537*t117578;
                double t117584 = t117541*t117537*t117578*3.0;
                double t117585 = t117582+t117583+t117584+1.0;
                double t117586 = gamma_aa[index]*gcaa*t117536*4.0;
                double t117587 = gamma_aa[index]*gcaa*t117542*t117537*t117578*4.0;
                double t117588 = t117541*t117537*t117578*6.0;
                double t117589 = t117540*t117549*t117579;
                double t117590 = t117586+t117587+t117588+t117589+1.0;
                double t117591 = gamma_aa[index]*gcaa*t117536*2.0;
                double t117592 = t117541*t117537*t117578;
                double t117593 = t117591+t117592+1.0;
                double t117594 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t117595 = 1.0/pow(t117594,1.0/3.0);
                double t117596 = 1.0/(omega*omega);
                double t117597 = pow(t117594,2.0/3.0);
                double t117598 = exp(-t117596*t117597);
                double t117599 = gx*gx;
                double t117600 = t117599*t117599;
                double t117601 = gamma_aa[index]*gx*t117536;
                double t117602 = t117601+1.0;
                double t117603 = gamma_aa[index]*gx*t117536*3.0;
                double t117604 = gamma_aa[index]*gx*t117542*t117537*t117599;
                double t117605 = t117541*t117537*t117599*3.0;
                double t117606 = t117603+t117604+t117605+1.0;
                double t117607 = gamma_aa[index]*gx*t117536*4.0;
                double t117608 = gamma_aa[index]*gx*t117542*t117537*t117599*4.0;
                double t117609 = t117541*t117537*t117599*6.0;
                double t117610 = t117600*t117540*t117549;
                double t117611 = t117610+t117607+t117608+t117609+1.0;
                double t117612 = gamma_aa[index]*gx*t117536*2.0;
                double t117613 = t117541*t117537*t117599;
                double t117614 = t117612+t117613+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t117577+t117560*t117563*(t117576-c0p*t117530*t117532*2.0))*2.0- \
                   c0p*rho_a[index]*log((t117521*(1.0/2.0))/(b1p*sqrt(t117535)+b3p*pow(t117535,3.0/2.0)+b4p*1.0/pow(t117533,2.0/ \
                   3.0)*t117519+b2p*c*t117534)+1.0)*(a1p*c*t117534+1.0)*4.0)*((ccab1*gcab*t117536*(1.0/2.0))/t117544- \
                   ccab1*gamma_aa[index]*t117541*1.0/(t117544*t117544)*t117538*(1.0/2.0)+(ccab2*gamma_aa[index]*t117541* \
                   t117538)/t117557-ccab2*t117541*t117537*t117538*1.0/(t117557*t117557)*(gcab*t117536+gamma_aa[index]* \
                   t117541*t117538)+(ccab4*gamma_aa[index]*t117540*t117537*t117539*2.0)/t117554+(ccab3*gcab*t117542*t117537* \
                   t117538*(3.0/2.0))/t117548-ccab4*t117540*1.0/(t117554*t117554)*t117539*t117549*(gcab*t117536*2.0+gamma_aa[index]* \
                   t117541*t117538*6.0+gamma_aa[index]*t117540*t117537*t117539*2.0+gcab*t117542*t117537*t117538*6.0)- \
                   ccab3*gamma_aa[index]*gcab*t117542*t117537*t117538*1.0/(t117548*t117548)*(gcab*t117536*(3.0/2.0)+gamma_aa[index]* \
                   t117541*t117538*3.0+gcab*t117542*t117537*t117538*(3.0/2.0)))*2.0-rho_a[index]*(t117577+t117560*t117563* \
                   (t117576-t117577))*((ccaa1*gcaa*t117536)/t117581-ccaa1*gamma_aa[index]*t117541*1.0/(t117581*t117581) \
                   *t117578+(ccaa2*gamma_aa[index]*t117541*t117578*2.0)/t117593-ccaa2*t117541*t117537*1.0/(t117593*t117593) \
                   *t117578*(gcaa*t117536*2.0+gamma_aa[index]*t117541*t117578*2.0)+(ccaa4*gamma_aa[index]*t117540*t117537* \
                   t117579*4.0)/t117590+(ccaa3*gcaa*t117542*t117537*t117578*3.0)/t117585-ccaa4*t117540*1.0/(t117590*t117590) \
                   *t117549*t117579*(gcaa*t117536*4.0+gamma_aa[index]*t117541*t117578*1.2E1+gamma_aa[index]*t117540*t117537* \
                   t117579*4.0+gcaa*t117542*t117537*t117578*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t117542*t117537*1.0/(t117585* \
                   t117585)*t117578*(gcaa*t117536*3.0+gamma_aa[index]*t117541*t117578*6.0+gcaa*t117542*t117537*t117578* \
                   3.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t117595*(erf(pow(t117594,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)+omega*t117595*(t117598-(omega*omega)*1.0/pow(t117594,2.0/3.0)*(t117598-1.0)* \
                   (1.0/2.0)))*(4.0/3.0)-1.0)*((cx1*gx*t117536)/t117602-cx1*gamma_aa[index]*1.0/(t117602*t117602)*t117541* \
                   t117599+(cx2*gamma_aa[index]*t117541*t117599*2.0)/t117614-cx2*t117541*1.0/(t117614*t117614)*t117537* \
                   t117599*(gx*t117536*2.0+gamma_aa[index]*t117541*t117599*2.0)+(cx4*gamma_aa[index]*t117600*t117540* \
                   t117537*4.0)/t117611+(cx3*gx*t117542*t117537*t117599*3.0)/t117606-cx4*t117600*1.0/(t117611*t117611) \
                   *t117540*t117549*(gx*t117536*4.0+gamma_aa[index]*t117541*t117599*1.2E1+gamma_aa[index]*t117600*t117540* \
                   t117537*4.0+gx*t117542*t117537*t117599*1.2E1)-cx3*gamma_aa[index]*gx*t117542*1.0/(t117606*t117606) \
                   *t117537*t117599*(gx*t117536*3.0+gamma_aa[index]*t117541*t117599*6.0+gx*t117542*t117537*t117599*3.0) \
                   )*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t117617 = rho_a[index]*2.0;
            double t117618 = 1.0/pow(t117617,1.0/3.0);
            double t117619 = c*t117618;
            double t117620 = sqrt(t117619);
            double t117621 = b1p*t117620;
            double t117622 = pow(t117619,3.0/2.0);
            double t117623 = b3p*t117622;
            double t117624 = b2p*c*t117618;
            double t117625 = c*c;
            double t117626 = 1.0/pow(t117617,2.0/3.0);
            double t117627 = b4p*t117625*t117626;
            double t117628 = t117621+t117623+t117624+t117627;
            double t117629 = 1.0/pow(t117617,8.0/3.0);
            double t117630 = 1.0/pow(t117617,7.0/3.0);
            double t117631 = 1.0/sqrt(t117619);
            double t117632 = 1.0/c0p;
            double t117633 = 1.0/t117628;
            double t117634 = t117632*t117633*(1.0/2.0);
            double t117635 = t117634+1.0;
            double t117636 = 1.0/t117635;
            double t117637 = a1p*c*t117618;
            double t117638 = t117637+1.0;
            double t117639 = 1.0/pow(t117617,4.0/3.0);
            double t117641 = b2p*c*t117639*(1.0/3.0);
            double t117642 = 1.0/pow(t117617,5.0/3.0);
            double t117643 = b4p*t117642*t117625*(2.0/3.0);
            double t117644 = b1p*c*t117631*t117639*(1.0/6.0);
            double t117645 = b3p*c*t117620*t117639*(1.0/2.0);
            double t117640 = t117641+t117643+t117644+t117645;
            double t117646 = t117640*t117640;
            double t117647 = 1.0/(t117628*t117628);
            double t117648 = log(t117635);
            double t117649 = gamma_aa[index]*gamma_aa[index];
            double t117650 = gcab*gcab;
            double t117651 = t117649*t117649;
            double t117652 = t117650*t117650;
            double t117653 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t117654 = 1.0/pow(rho_a[index],8.0/3.0);
            double t117655 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t117656 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t117657 = two_13*2.0;
            double t117658 = t117657-2.0;
            double t117659 = 1.0/t117658;
            double t117660 = 1.0/pow(rho_a[index],1.0/3.0);
            double t117661 = c*t117660;
            double t117662 = sqrt(t117661);
            double t117663 = pow(t117661,3.0/2.0);
            double t117664 = 1.0/pow(rho_a[index],2.0/3.0);
            double t117665 = b1p*t117662;
            double t117666 = b3p*t117663;
            double t117667 = b4p*t117625*t117664;
            double t117668 = b2p*c*t117660;
            double t117669 = t117665+t117666+t117667+t117668;
            double t117670 = 1.0/t117669;
            double t117671 = t117632*t117670*(1.0/2.0);
            double t117672 = t117671+1.0;
            double t117673 = log(t117672);
            double t117674 = a1p*c*t117660;
            double t117675 = t117674+1.0;
            double t117676 = gamma_aa[index]*gcab*t117654*4.0;
            double t117677 = gamma_aa[index]*gcab*t117650*t117655*t117649*4.0;
            double t117678 = t117650*t117656*t117649*6.0;
            double t117679 = t117651*t117652*t117653;
            double t117680 = t117676+t117677+t117678+t117679+1.0;
            double t117681 = 1.0/t117680;
            double t117682 = gamma_aa[index]*gcab*t117654;
            double t117683 = t117682+1.0;
            double t117684 = 1.0/t117683;
            double t117685 = gamma_aa[index]*gcab*t117654*3.0;
            double t117686 = gamma_aa[index]*gcab*t117650*t117655*t117649;
            double t117687 = t117650*t117656*t117649*3.0;
            double t117688 = t117685+t117686+t117687+1.0;
            double t117689 = 1.0/t117688;
            double t117690 = gamma_aa[index]*gcab*t117654*2.0;
            double t117691 = t117650*t117656*t117649;
            double t117692 = t117690+t117691+1.0;
            double t117693 = 1.0/t117692;
            double t117694 = 1.0/pow(rho_a[index],1.0E1);
            double t117695 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t117697 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t117698 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t117700 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t117707 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t117708 = gamma_aa[index]*gcab*t117697*(1.6E1/3.0);
            double t117709 = gamma_aa[index]*gcab*t117700*t117650*t117649*1.6E1;
            double t117710 = t117650*t117649*t117698*1.6E1;
            double t117711 = t117651*t117652*t117707*(1.6E1/3.0);
            double t117696 = t117710+t117711+t117708+t117709;
            double t117714 = gamma_aa[index]*gcab*t117697*(8.0/3.0);
            double t117715 = t117650*t117649*t117698*(8.0/3.0);
            double t117699 = t117714+t117715;
            double t117701 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t117702 = 1.0/(t117688*t117688);
            double t117703 = gamma_aa[index]*gcab*t117697*4.0;
            double t117704 = gamma_aa[index]*gcab*t117700*t117650*t117649*4.0;
            double t117705 = t117650*t117649*t117698*8.0;
            double t117706 = t117703+t117704+t117705;
            double t117712 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t117713 = 1.0/(t117680*t117680);
            double t117716 = 1.0/(t117692*t117692);
            double t117717 = pow(2.0,1.0/3.0);
            double t117718 = t117717*2.0;
            double t117719 = t117718-2.0;
            double t117720 = a1f*c*t117660;
            double t117721 = t117720+1.0;
            double t117722 = 1.0/c0f;
            double t117723 = b1f*t117662;
            double t117724 = b3f*t117663;
            double t117725 = b4f*t117625*t117664;
            double t117726 = b2f*c*t117660;
            double t117727 = t117723+t117724+t117725+t117726;
            double t117728 = 1.0/t117727;
            double t117729 = t117722*t117728*(1.0/2.0);
            double t117730 = t117729+1.0;
            double t117731 = 1.0/pow(rho_a[index],4.0/3.0);
            double t117732 = 1.0/pow(rho_a[index],5.0/3.0);
            double t117733 = 1.0/sqrt(t117661);
            double t117734 = log(t117730);
            double t117735 = 1.0/t117672;
            double t117736 = 1.0/(t117669*t117669);
            double t117737 = b4p*t117732*t117625*(2.0/3.0);
            double t117738 = b2p*c*t117731*(1.0/3.0);
            double t117739 = b1p*c*t117731*t117733*(1.0/6.0);
            double t117740 = b3p*c*t117731*t117662*(1.0/2.0);
            double t117741 = t117740+t117737+t117738+t117739;
            double t117742 = t117741*t117735*t117736*t117675;
            double t117743 = gcaa*gcaa;
            double t117744 = t117743*t117743;
            double t117745 = 1.0/t117730;
            double t117746 = 1.0/(t117727*t117727);
            double t117747 = b4f*t117732*t117625*(2.0/3.0);
            double t117748 = b2f*c*t117731*(1.0/3.0);
            double t117749 = b1f*c*t117731*t117733*(1.0/6.0);
            double t117750 = b3f*c*t117731*t117662*(1.0/2.0);
            double t117751 = t117750+t117747+t117748+t117749;
            double t117752 = a1f*c*c0f*t117731*t117734*(2.0/3.0);
            double t117753 = a1p*c*c0p*t117731*t117673*(2.0/3.0);
            double t117754 = c0f*t117721*t117734*2.0;
            double t117755 = c0p*t117673*t117675*2.0;
            double t117756 = 1.0/(t117683*t117683);
            double t117757 = ccab4*t117651*t117652*t117653*t117681;
            double t117758 = ccab1*gamma_aa[index]*gcab*t117654*t117684;
            double t117759 = ccab3*gamma_aa[index]*gcab*t117650*t117655*t117649*t117689;
            double t117760 = ccab2*t117650*t117656*t117693*t117649;
            double t117761 = ccab0+t117760+t117757+t117758+t117759;
            double t117762 = b2p*c*t117630*(4.0/9.0);
            double t117763 = b4p*t117625*t117629*(1.0E1/9.0);
            double t117764 = 1.0/pow(t117619,3.0/2.0);
            double t117765 = b3p*t117631*t117625*t117629*(1.0/1.2E1);
            double t117766 = b1p*c*t117630*t117631*(2.0/9.0);
            double t117767 = b3p*c*t117620*t117630*(2.0/3.0);
            double t117768 = t117762+t117763+t117765+t117766+t117767-b1p*t117625*t117629*t117764*(1.0/3.6E1);
            double t117769 = t117636*t117638*t117647*t117768;
            double t117770 = 1.0/(t117628*t117628*t117628);
            double t117771 = 1.0/(t117635*t117635);
            double t117772 = 1.0/(t117628*t117628*t117628*t117628);
            double t117773 = t117632*t117771*t117646*t117772*t117638*(1.0/2.0);
            double t117774 = 1.0/d2fz0;
            double t117775 = 1.0/(rho_a[index]*rho_a[index]);
            double t117776 = 1.0/Aa;
            double t117777 = b1a*t117620;
            double t117778 = b3a*t117622;
            double t117779 = b2a*c*t117618;
            double t117780 = b4a*t117625*t117626;
            double t117781 = t117780+t117777+t117778+t117779;
            double t117782 = 1.0/t117781;
            double t117783 = t117782*t117776*(1.0/2.0);
            double t117784 = t117783+1.0;
            double t117785 = log(t117784);
            double t117786 = a1a*c*t117618;
            double t117787 = t117786+1.0;
            double t117788 = a1p*c*t117640*t117636*t117647*t117639*(2.0/3.0);
            double t117789 = 1.0/pow(rho_a[index],7.0/3.0);
            double t117790 = 1.0/pow(t117661,3.0/2.0);
            double t117791 = t117751*t117751;
            double t117792 = t117741*t117741;
            double t117793 = 1.0/(t117669*t117669*t117669);
            double t117794 = t117735*t117675*t117792*t117793*2.0;
            double t117795 = b4p*t117625*t117654*(1.0E1/9.0);
            double t117796 = b2p*c*t117789*(4.0/9.0);
            double t117797 = b3p*t117625*t117733*t117654*(1.0/1.2E1);
            double t117798 = b1p*c*t117733*t117789*(2.0/9.0);
            double t117799 = b3p*c*t117662*t117789*(2.0/3.0);
            double t117875 = b1p*t117625*t117654*t117790*(1.0/3.6E1);
            double t117800 = -t117875+t117795+t117796+t117797+t117798+t117799;
            double t117801 = 1.0/(t117672*t117672);
            double t117802 = 1.0/(t117669*t117669*t117669*t117669);
            double t117803 = a1p*c*c0p*t117673*t117789*(8.0/9.0);
            double t117838 = t117721*t117751*t117745*t117746;
            double t117804 = t117742+t117752-t117753-t117838;
            double t117805 = a1p*c*c0p*t117639*t117648*(4.0/3.0);
            double t117806 = t117754-t117755;
            double t117807 = gamma_aa[index]*gcaa*t117654*4.0;
            double t117808 = gamma_aa[index]*gcaa*t117743*t117655*t117649*4.0;
            double t117809 = t117743*t117656*t117649*6.0;
            double t117810 = t117651*t117653*t117744;
            double t117811 = t117810+t117807+t117808+t117809+1.0;
            double t117812 = 1.0/t117811;
            double t117813 = gamma_aa[index]*gcaa*t117654;
            double t117814 = t117813+1.0;
            double t117815 = 1.0/t117814;
            double t117816 = gamma_aa[index]*gcaa*t117654*3.0;
            double t117817 = gamma_aa[index]*gcaa*t117743*t117655*t117649;
            double t117818 = t117743*t117656*t117649*3.0;
            double t117819 = t117816+t117817+t117818+1.0;
            double t117820 = 1.0/t117819;
            double t117821 = gamma_aa[index]*gcaa*t117654*2.0;
            double t117822 = t117743*t117656*t117649;
            double t117823 = t117821+t117822+1.0;
            double t117824 = 1.0/t117823;
            double t117825 = t117806*t117719*t117659;
            double t117826 = t117825+t117755;
            double t117827 = 1.0/(t117683*t117683*t117683);
            double t117828 = ccab1*gamma_aa[index]*gcab*t117650*t117827*t117649*t117694*(3.2E1/9.0);
            double t117829 = t117696*t117696;
            double t117830 = 1.0/(t117680*t117680*t117680);
            double t117831 = ccab4*t117830*t117651*t117652*t117653*t117829*2.0;
            double t117832 = t117699*t117699;
            double t117833 = 1.0/(t117692*t117692*t117692);
            double t117834 = ccab2*t117650*t117832*t117833*t117656*t117649*2.0;
            double t117835 = t117706*t117706;
            double t117836 = 1.0/(t117688*t117688*t117688);
            double t117837 = ccab3*gamma_aa[index]*gcab*t117650*t117655*t117835*t117836*t117649*2.0;
            double t117839 = t117804*t117719*t117659;
            double t117840 = ccaa4*t117812*t117651*t117707*t117744*(3.2E1/3.0);
            double t117841 = ccaa1*gamma_aa[index]*gcaa*t117815*t117697*(8.0/3.0);
            double t117842 = ccaa3*gamma_aa[index]*gcaa*t117700*t117820*t117743*t117649*8.0;
            double t117843 = ccaa2*t117743*t117824*t117649*t117698*(1.6E1/3.0);
            double t117844 = 1.0/(t117814*t117814);
            double t117845 = gamma_aa[index]*gcaa*t117697*8.0;
            double t117846 = gamma_aa[index]*gcaa*t117700*t117743*t117649*8.0;
            double t117847 = t117743*t117649*t117698*1.6E1;
            double t117848 = t117845+t117846+t117847;
            double t117849 = 1.0/(t117819*t117819);
            double t117850 = gamma_aa[index]*gcaa*t117697*(3.2E1/3.0);
            double t117851 = gamma_aa[index]*gcaa*t117700*t117743*t117649*3.2E1;
            double t117852 = t117743*t117649*t117698*3.2E1;
            double t117853 = t117651*t117707*t117744*(3.2E1/3.0);
            double t117854 = t117850+t117851+t117852+t117853;
            double t117855 = 1.0/(t117811*t117811);
            double t117856 = gamma_aa[index]*gcaa*t117697*(1.6E1/3.0);
            double t117857 = t117743*t117649*t117698*(1.6E1/3.0);
            double t117858 = t117856+t117857;
            double t117859 = 1.0/(t117823*t117823);
            double t117860 = t117840+t117841+t117842+t117843-ccaa1*t117743*t117844*t117649*t117698*(8.0/3.0)- \
               ccaa4*t117651*t117653*t117744*t117854*t117855-ccaa2*t117743*t117656*t117649*t117858*t117859-ccaa3* \
               gamma_aa[index]*gcaa*t117743*t117655*t117649*t117848*t117849;
            double t117861 = -t117742+t117753+t117839;
            double t117862 = ccaa4*t117812*t117651*t117653*t117744;
            double t117863 = ccaa1*gamma_aa[index]*gcaa*t117815*t117654;
            double t117864 = ccaa3*gamma_aa[index]*gcaa*t117820*t117743*t117655*t117649;
            double t117865 = ccaa2*t117743*t117824*t117656*t117649;
            double t117866 = ccaa0+t117862+t117863+t117864+t117865;
            double t117867 = 1.0/(t117727*t117727*t117727);
            double t117868 = b4f*t117625*t117654*(1.0E1/9.0);
            double t117869 = b2f*c*t117789*(4.0/9.0);
            double t117870 = b3f*t117625*t117733*t117654*(1.0/1.2E1);
            double t117871 = b1f*c*t117733*t117789*(2.0/9.0);
            double t117872 = b3f*c*t117662*t117789*(2.0/3.0);
            double t117873 = t117870+t117871+t117872+t117868+t117869-b1f*t117625*t117654*t117790*(1.0/3.6E1);
            double t117874 = t117721*t117745*t117746*t117873;
            double t117876 = t117800*t117735*t117736*t117675;
            double t117877 = 1.0/(t117730*t117730);
            double t117878 = 1.0/(t117727*t117727*t117727*t117727);
            double t117879 = t117721*t117722*t117791*t117877*t117878*(1.0/2.0);
            double t117880 = t117801*t117802*t117632*t117675*t117792*(1.0/2.0);
            double t117881 = a1f*c*t117731*t117751*t117745*t117746*(2.0/3.0);
            double t117882 = a1p*c*t117731*t117741*t117735*t117736*(2.0/3.0);
            double t117883 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t117884 = 1.0/(omega*omega);
            double t117885 = pow(t117883,2.0/3.0);
            double t117888 = t117884*t117885;
            double t117886 = exp(-t117888);
            double t117887 = 1.0/pow(t117883,1.0/3.0);
            double t117889 = 1.0/pow(t117883,2.0/3.0);
            double t117890 = omega*omega;
            double t117891 = t117886-1.0;
            double t117892 = 1.0/pow(t117883,4.0/3.0);
            double t117893 = 1.0/rho_a[index];
            double t117894 = 1.0/pow(t117883,5.0/3.0);
            double t117895 = 1.0/sqrt(3.141592653589793);
            double t117902 = t117890*t117891*t117889*(1.0/2.0);
            double t117896 = -t117902+t117886;
            double t117897 = t117893*t117886*(1.0/3.0);
            double t117898 = t117890*t117891*t117894*(2.778046668940015E15/1.40737488355328E14);
            double t117945 = t117884*t117886*t117887*(2.778046668940015E15/7.0368744177664E13);
            double t117899 = -t117945+t117897+t117898;
            double t117900 = 1.0/omega;
            double t117901 = 1.0/pow(t117883,7.0/3.0);
            double t117903 = gx*gx;
            double t117904 = t117903*t117903;
            double t117905 = pow(rho_a[index],4.0/3.0);
            double t117906 = pow(t117883,1.0/3.0);
            double t117907 = t117900*t117906;
            double t117908 = erf(t117907);
            double t117909 = t117908*(3.991211251234741E15/2.251799813685248E15);
            double t117910 = omega*t117887*t117896;
            double t117911 = t117910+t117909;
            double t117912 = gamma_aa[index]*gx*t117654*4.0;
            double t117913 = gamma_aa[index]*gx*t117903*t117655*t117649*4.0;
            double t117914 = t117903*t117656*t117649*6.0;
            double t117915 = t117651*t117904*t117653;
            double t117916 = t117912+t117913+t117914+t117915+1.0;
            double t117917 = 1.0/t117916;
            double t117918 = gamma_aa[index]*gx*t117654;
            double t117919 = t117918+1.0;
            double t117920 = 1.0/t117919;
            double t117921 = gamma_aa[index]*gx*t117654*3.0;
            double t117922 = gamma_aa[index]*gx*t117903*t117655*t117649;
            double t117923 = t117903*t117656*t117649*3.0;
            double t117924 = t117921+t117922+t117923+1.0;
            double t117925 = 1.0/t117924;
            double t117926 = gamma_aa[index]*gx*t117654*2.0;
            double t117927 = t117903*t117656*t117649;
            double t117928 = t117926+t117927+1.0;
            double t117929 = 1.0/t117928;
            double t117937 = gamma_aa[index]*gx*t117697*(3.2E1/3.0);
            double t117938 = gamma_aa[index]*gx*t117700*t117903*t117649*3.2E1;
            double t117939 = t117903*t117649*t117698*3.2E1;
            double t117940 = t117651*t117904*t117707*(3.2E1/3.0);
            double t117930 = t117940+t117937+t117938+t117939;
            double t117942 = gamma_aa[index]*gx*t117697*(1.6E1/3.0);
            double t117943 = t117903*t117649*t117698*(1.6E1/3.0);
            double t117931 = t117942+t117943;
            double t117932 = 1.0/(t117924*t117924);
            double t117933 = gamma_aa[index]*gx*t117697*8.0;
            double t117934 = gamma_aa[index]*gx*t117700*t117903*t117649*8.0;
            double t117935 = t117903*t117649*t117698*1.6E1;
            double t117936 = t117933+t117934+t117935;
            double t117941 = 1.0/(t117916*t117916);
            double t117944 = 1.0/(t117928*t117928);
            double t117946 = omega*t117887*t117899;
            double t117947 = t117900*t117886*t117895*t117889*(1.108777112152858E31/1.584563250285287E29);
            double t117956 = omega*t117892*t117896*(2.778046668940015E15/1.40737488355328E14);
            double t117948 = t117946+t117947-t117956;
            double t117949 = cx4*t117651*t117904*t117653*t117917;
            double t117950 = cx1*gamma_aa[index]*gx*t117920*t117654;
            double t117951 = cx3*gamma_aa[index]*gx*t117903*t117655*t117925*t117649;
            double t117952 = cx2*t117903*t117656*t117649*t117929;
            double t117953 = cx0+t117950+t117951+t117952+t117949;
            double t117954 = omega*t117911*t117887*(4.0/3.0);
            double t117955 = t117954-1.0;
            double t117957 = omega*t117911*t117892*(2.778046668940015E15/1.05553116266496E14);
            double t117958 = 1.0/(t117919*t117919);
            double t117959 = t117957-omega*t117948*t117887*(4.0/3.0);
            double t117960 = pow(rho_a[index],1.0/3.0);
            double t117961 = cx4*t117651*t117904*t117707*t117917*(3.2E1/3.0);
            double t117962 = cx1*gamma_aa[index]*gx*t117920*t117697*(8.0/3.0);
            double t117963 = cx3*gamma_aa[index]*gx*t117700*t117903*t117925*t117649*8.0;
            double t117964 = cx2*t117903*t117649*t117929*t117698*(1.6E1/3.0);
            double t117965 = t117961+t117962+t117963+t117964-cx1*t117903*t117649*t117958*t117698*(8.0/3.0)-cx2* \
               t117903*t117931*t117656*t117944*t117649-cx4*t117651*t117930*t117904*t117653*t117941-cx3*gamma_aa[index]* \
               gx*t117903*t117932*t117655*t117936*t117649;
            v_rho_a_rho_a_[index] = -t117761*(-t117805-rho_a[index]*(t117773+t117769+t117788-t117770*t117636* \
               t117646*t117638*2.0-a1p*c*c0p*t117630*t117648*(8.0/9.0)+Aa*t117774*t117775*t117659*t117785*t117787* \
               (4.0/9.0))*2.0+rho_a[index]*(-t117803+t117880+t117882-t117794+t117876+t117719*t117659*(t117803+t117881+ \
               t117874+t117794+t117879-t117800*t117735*t117736*t117675-t117721*t117745*t117791*t117867*2.0-a1f*c* \
               c0f*t117734*t117789*(8.0/9.0)-t117801*t117802*t117632*t117675*t117792*(1.0/2.0)-a1p*c*t117731*t117741* \
               t117735*t117736*(2.0/3.0)))+t117804*t117719*t117659*2.0+t117640*t117636*t117638*t117647*2.0-t117741* \
               t117735*t117736*t117675*2.0+a1p*c*c0p*t117731*t117673*(4.0/3.0))+t117860*t117826*2.0+(rho_a[index]* \
               (t117755+t117719*t117659*(t117754-c0p*t117673*t117675*2.0))*2.0-c0p*rho_a[index]*t117638*t117648*4.0) \
               *(t117831+t117834+t117828+t117837+ccab1*gamma_aa[index]*gcab*t117701*t117684*(4.4E1/9.0)+ccab4*t117712* \
               t117651*t117652*t117681*(3.68E2/9.0)-ccab1*t117650*t117756*t117649*t117695*(7.6E1/9.0)+ccab2*t117650* \
               t117693*t117649*t117695*(4.0E1/3.0)-ccab4*t117713*t117651*t117652*t117707*t117696*(3.2E1/3.0)-ccab2* \
               t117650*t117716*t117649*t117698*t117699*(1.6E1/3.0)-ccab2*t117650*t117716*t117656*t117649*(gamma_aa[index]* \
               gcab*t117701*(8.8E1/9.0)+t117650*t117649*t117695*(4.0E1/3.0))-ccab4*t117713*t117651*t117652*t117653* \
               (gamma_aa[index]*gcab*t117701*(1.76E2/9.0)+t117712*t117651*t117652*(3.68E2/9.0)+t117650*t117649*t117695* \
               8.0E1+gamma_aa[index]*gcab*t117650*t117649*t117694*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t117650* \
               t117649*t117694*t117689*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t117702*t117650*t117655*t117649*(gamma_aa[index]* \
               gcab*t117701*(4.4E1/3.0)+t117650*t117649*t117695*4.0E1+gamma_aa[index]*gcab*t117650*t117649*t117694* \
               (7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t117700*t117702*t117650*t117706*t117649*8.0)+t117866*(-t117742+ \
               t117753+t117719*t117659*(t117742+t117752-t117721*t117751*t117745*t117746-a1p*c*c0p*t117731*t117673* \
               (2.0/3.0)))*2.0+(rho_a[index]*t117826*2.0-c0p*rho_a[index]*t117638*t117648*4.0)*(t117831+t117834+t117828+ \
               t117837-ccab2*t117712*t117651*t117652*t117716*(3.2E1/9.0)+ccab4*t117712*t117651*t117652*t117681*(6.4E1/ \
               3.0)-ccab1*t117650*t117756*t117649*t117695*(3.2E1/9.0)+ccab2*t117650*t117693*t117649*t117695*(3.2E1/ \
               9.0)-ccab4*t117713*t117651*t117652*t117707*t117696*(3.2E1/3.0)-ccab2*t117650*t117716*t117649*t117698* \
               t117699*(1.6E1/3.0)-ccab4*t117713*t117651*t117652*t117653*(t117712*t117651*t117652*(6.4E1/3.0)+t117650* \
               t117649*t117695*(6.4E1/3.0)+gamma_aa[index]*gcab*t117650*t117649*t117694*(1.28E2/3.0))+ccab3*gamma_aa[index]* \
               gcab*t117650*t117649*t117694*t117689*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t117702*t117650*t117655* \
               t117649*(t117650*t117649*t117695*(3.2E1/3.0)+gamma_aa[index]*gcab*t117650*t117649*t117694*(3.2E1/3.0) \
               )-ccab3*gamma_aa[index]*gcab*t117700*t117702*t117650*t117706*t117649*8.0)+t117761*(t117805+rho_a[index]* \
               (t117773+t117769+t117788-t117770*t117636*t117646*t117638*2.0-a1p*c*c0p*t117630*t117648*(8.0/9.0)-Aa* \
               t117774*t117775*t117659*t117785*t117787*(4.0/9.0))*2.0-t117640*t117636*t117638*t117647*2.0)+(-t117755+ \
               rho_a[index]*t117861+rho_a[index]*(t117640*t117636*t117638*t117647-a1p*c*c0p*t117639*t117648*(2.0/ \
               3.0))*2.0+c0p*t117638*t117648*2.0-t117806*t117719*t117659)*(ccab1*gamma_aa[index]*gcab*t117684*t117697* \
               (4.0/3.0)+ccab4*t117651*t117652*t117707*t117681*(1.6E1/3.0)-ccab1*t117650*t117756*t117649*t117698* \
               (4.0/3.0)+ccab2*t117650*t117693*t117649*t117698*(8.0/3.0)-ccab4*t117713*t117651*t117652*t117653*t117696- \
               ccab2*t117650*t117716*t117656*t117649*t117699+ccab3*gamma_aa[index]*gcab*t117700*t117650*t117649*t117689* \
               4.0-ccab3*gamma_aa[index]*gcab*t117702*t117650*t117706*t117655*t117649)*4.0-rho_a[index]*t117826*(ccaa1* \
               gamma_aa[index]*gcaa*t117701*t117815*(8.8E1/9.0)+ccaa4*t117712*t117812*t117651*t117744*(1.12E3/9.0) \
               +ccaa2*t117743*t117824*t117649*t117695*(3.04E2/9.0)-ccaa1*t117743*t117844*t117649*t117695*2.4E1-ccaa4* \
               t117651*t117707*t117744*t117854*t117855*(6.4E1/3.0)-ccaa2*t117743*t117649*t117858*t117859*t117698* \
               (3.2E1/3.0)-ccaa2*t117743*t117656*t117649*t117859*(gamma_aa[index]*gcaa*t117701*(1.76E2/9.0)+t117743* \
               t117649*t117695*(3.04E2/9.0))-ccaa4*t117651*t117653*t117744*t117855*(gamma_aa[index]*gcaa*t117701* \
               (3.52E2/9.0)+t117712*t117651*t117744*(1.12E3/9.0)+t117743*t117649*t117695*(6.08E2/3.0)+gamma_aa[index]* \
               gcaa*t117743*t117649*t117694*2.88E2)+ccaa4*1.0/(t117811*t117811*t117811)*t117651*t117653*t117744*(t117854* \
               t117854)*2.0+ccaa2*1.0/(t117823*t117823*t117823)*t117743*t117656*t117649*(t117858*t117858)*2.0+ccaa3* \
               gamma_aa[index]*gcaa*t117820*t117743*t117649*t117694*7.2E1+ccaa1*gamma_aa[index]*gcaa*1.0/(t117814* \
               t117814*t117814)*t117743*t117649*t117694*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t117743*t117655*1.0/ \
               (t117819*t117819*t117819)*t117649*(t117848*t117848)*2.0-ccaa3*gamma_aa[index]*gcaa*t117743*t117655* \
               t117649*t117849*(gamma_aa[index]*gcaa*t117701*(8.8E1/3.0)+t117743*t117649*t117695*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t117743*t117649*t117694*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t117700*t117743*t117649*t117848*t117849* \
               1.6E1)+rho_a[index]*t117866*(-t117803+t117880+t117882-t117794+t117876+t117719*t117659*(t117803-t117880+ \
               t117881-t117882+t117874+t117794-t117876+t117879-t117721*t117745*t117791*t117867*2.0-a1f*c*c0f*t117734* \
               t117789*(8.0/9.0)))-rho_a[index]*t117860*t117861*2.0-c0*t117905*t117955*(cx1*gamma_aa[index]*gx*t117701* \
               t117920*(8.8E1/9.0)-cx1*t117903*t117649*t117695*t117958*2.4E1+cx2*t117903*t117649*t117695*t117929* \
               (3.04E2/9.0)+cx4*t117712*t117651*t117904*t117917*(1.12E3/9.0)-cx2*t117903*t117931*t117944*t117649* \
               t117698*(3.2E1/3.0)-cx4*t117651*t117930*t117904*t117707*t117941*(6.4E1/3.0)-cx2*t117903*t117656*t117944* \
               t117649*(gamma_aa[index]*gx*t117701*(1.76E2/9.0)+t117903*t117649*t117695*(3.04E2/9.0))-cx4*t117651* \
               t117904*t117653*t117941*(gamma_aa[index]*gx*t117701*(3.52E2/9.0)+t117712*t117651*t117904*(1.12E3/9.0) \
               +t117903*t117649*t117695*(6.08E2/3.0)+gamma_aa[index]*gx*t117903*t117649*t117694*2.88E2)+cx2*t117903* \
               (t117931*t117931)*t117656*t117649*1.0/(t117928*t117928*t117928)*2.0+cx4*t117651*(t117930*t117930)* \
               t117904*t117653*1.0/(t117916*t117916*t117916)*2.0+cx3*gamma_aa[index]*gx*t117903*t117925*t117649*t117694* \
               7.2E1+cx1*gamma_aa[index]*gx*t117903*t117649*t117694*1.0/(t117919*t117919*t117919)*(1.28E2/9.0)+cx3* \
               gamma_aa[index]*gx*t117903*1.0/(t117924*t117924*t117924)*t117655*(t117936*t117936)*t117649*2.0-cx3* \
               gamma_aa[index]*gx*t117903*t117932*t117655*t117649*(gamma_aa[index]*gx*t117701*(8.8E1/3.0)+t117903* \
               t117649*t117695*(3.04E2/3.0)+gamma_aa[index]*gx*t117903*t117649*t117694*7.2E1)-cx3*gamma_aa[index]* \
               gx*t117700*t117903*t117932*t117936*t117649*1.6E1)-c0*t117664*t117953*t117955*(4.0/9.0)+c0*t117960* \
               t117955*t117965*(8.0/3.0)+c0*t117960*t117953*t117959*(8.0/3.0)-c0*t117905*t117965*t117959*2.0+c0*t117905* \
               t117953*(omega*t117887*(omega*t117887*(t117775*t117886*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t117886* \
               t117889*(7.717543294808713E30/4.951760157141521E27)+t117890*t117891*1.0/pow(t117883,8.0/3.0)*(3.858771647404357E31/ \
               1.980704062856608E28)-t117892*t117884*t117886*(7.717543294808713E30/9.903520314283042E27)+t117884* \
               t117893*t117886*t117887*(2.778046668940015E15/2.11106232532992E14))-omega*t117901*t117896*(7.717543294808713E30/ \
               4.951760157141521E27)+omega*t117892*t117899*(2.778046668940015E15/7.0368744177664E13)+t117900*t117894* \
               t117886*t117895*(3.080234563013177E46/1.115037259926531E43)+1.0/(omega*omega*omega)*t117893*t117886* \
               t117895*(1.108777112152858E31/2.37684487542793E29))*(4.0/3.0)-omega*t117901*t117911*(7.717543294808713E30/ \
               3.713820117856141E27)+omega*t117892*t117948*(2.778046668940015E15/5.2776558133248E13));
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t117967 = 1.0/pow(rho_a[index],1.0/3.0);
                double t117968 = c*t117967;
                double t117969 = sqrt(t117968);
                double t117970 = pow(t117968,3.0/2.0);
                double t117971 = c*c;
                double t117972 = 1.0/pow(rho_a[index],2.0/3.0);
                double t117973 = 1.0/c0p;
                double t117974 = b1p*t117969;
                double t117975 = b3p*t117970;
                double t117976 = b4p*t117971*t117972;
                double t117977 = b2p*c*t117967;
                double t117978 = t117974+t117975+t117976+t117977;
                double t117979 = 1.0/t117978;
                double t117980 = t117973*t117979*(1.0/2.0);
                double t117981 = t117980+1.0;
                double t117982 = log(t117981);
                double t117983 = a1p*c*t117967;
                double t117984 = t117983+1.0;
                double t117985 = 1.0/pow(rho_a[index],8.0/3.0);
                double t117986 = gamma_aa[index]*gamma_aa[index];
                double t117987 = gcaa*gcaa;
                double t117988 = t117987*t117987;
                double t117989 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t117990 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t117991 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t117992 = gamma_aa[index]*gcaa*t117985;
                double t117993 = t117992+1.0;
                double t117994 = gamma_aa[index]*gcaa*t117985*3.0;
                double t117995 = gamma_aa[index]*gcaa*t117991*t117986*t117987;
                double t117996 = t117990*t117986*t117987*3.0;
                double t117997 = t117994+t117995+t117996+1.0;
                double t117998 = t117986*t117986;
                double t117999 = gamma_aa[index]*gcaa*t117985*4.0;
                double t118000 = gamma_aa[index]*gcaa*t117991*t117986*t117987*4.0;
                double t118001 = t117990*t117986*t117987*6.0;
                double t118002 = t117988*t117989*t117998;
                double t118003 = t118000+t118001+t118002+t117999+1.0;
                double t118004 = gamma_aa[index]*gcaa*t117985*2.0;
                double t118005 = t117990*t117986*t117987;
                double t118006 = t118004+t118005+1.0;
                double t118007 = pow(2.0,1.0/3.0);
                double t118008 = t118007*2.0;
                double t118009 = t118008-2.0;
                double t118010 = two_13*2.0;
                double t118011 = t118010-2.0;
                double t118012 = 1.0/t118011;
                double t118013 = 1.0/c0f;
                double t118014 = b1f*t117969;
                double t118015 = b3f*t117970;
                double t118016 = b4f*t117971*t117972;
                double t118017 = b2f*c*t117967;
                double t118018 = t118014+t118015+t118016+t118017;
                double t118019 = 1.0/t118018;
                double t118020 = t118013*t118019*(1.0/2.0);
                double t118021 = t118020+1.0;
                double t118022 = log(t118021);
                double t118023 = a1f*c*t117967;
                double t118024 = t118023+1.0;
                double t118025 = c0f*t118022*t118024*2.0;
                double t118026 = c0p*t117982*t117984*2.0;
                double t118027 = rho_a[index]*2.0;
                double t118028 = 1.0/pow(t118027,1.0/3.0);
                double t118029 = c*t118028;
                double t118030 = gcab*gcab;
                double t118031 = t118030*t118030;
                double t118032 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t118033 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t118034 = gamma_aa[index]*gcab*t117985*2.0;
                double t118035 = t118030*t117990*t117986;
                double t118036 = t118034+t118035+1.0;
                double t118037 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t118038 = gamma_aa[index]*gcab*t117985;
                double t118039 = t118038+1.0;
                double t118040 = gamma_aa[index]*gcab*t117985*3.0;
                double t118041 = gamma_aa[index]*gcab*t118030*t117991*t117986;
                double t118042 = t118030*t117990*t117986*3.0;
                double t118043 = t118040+t118041+t118042+1.0;
                double t118044 = gamma_aa[index]*gcab*t117985*4.0;
                double t118045 = gamma_aa[index]*gcab*t118030*t117991*t117986*4.0;
                double t118046 = t118030*t117990*t117986*6.0;
                double t118047 = t118031*t117989*t117998;
                double t118048 = t118044+t118045+t118046+t118047+1.0;
                double t118049 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t118050 = 1.0/(t118036*t118036);
                double t118051 = 1.0/(t118043*t118043);
                double t118052 = 1.0/(t118048*t118048);
                double t118053 = gamma_aa[index]*gcab*t118049*(8.0/3.0);
                double t118054 = t118030*t118032*t117986*(8.0/3.0);
                double t118055 = t118053+t118054;
                double t118056 = gcab*t117985;
                double t118057 = gamma_aa[index]*t118030*t117990;
                double t118058 = t118056+t118057;
                double t118059 = gcab*t117985*(3.0/2.0);
                double t118060 = gamma_aa[index]*t118030*t117990*3.0;
                double t118061 = gcab*t118030*t117991*t117986*(3.0/2.0);
                double t118062 = t118060+t118061+t118059;
                double t118063 = gamma_aa[index]*gcab*t118049*4.0;
                double t118064 = gamma_aa[index]*gcab*t118030*t118037*t117986*4.0;
                double t118065 = t118030*t118032*t117986*8.0;
                double t118066 = t118063+t118064+t118065;
                double t118067 = gamma_aa[index]*gcab*t118049*(1.6E1/3.0);
                double t118068 = gamma_aa[index]*gcab*t118030*t118037*t117986*1.6E1;
                double t118069 = t118030*t118032*t117986*1.6E1;
                double t118070 = t118031*t118033*t117998*(1.6E1/3.0);
                double t118071 = t118070+t118067+t118068+t118069;
                double t118072 = gcab*t117985*2.0;
                double t118073 = gamma_aa[index]*t118030*t117990*6.0;
                double t118074 = gcab*t118030*t117991*t117986*6.0;
                double t118075 = gamma_aa[index]*t118031*t117986*t117989*2.0;
                double t118076 = t118072+t118073+t118074+t118075;
                double t118077 = t118025-t118026;
                double t118078 = t118012*t118009*t118077;
                double t118079 = t118026+t118078;
                double t118080 = rho_a[index]*t118079*2.0;
                double t118081 = sqrt(t118029);
                double t118082 = b1p*t118081;
                double t118083 = pow(t118029,3.0/2.0);
                double t118084 = b3p*t118083;
                double t118085 = b2p*c*t118028;
                double t118086 = 1.0/pow(t118027,2.0/3.0);
                double t118087 = b4p*t118086*t117971;
                double t118088 = t118082+t118084+t118085+t118087;
                double t118089 = 1.0/t118088;
                double t118090 = t118089*t117973*(1.0/2.0);
                double t118091 = t118090+1.0;
                double t118092 = log(t118091);
                double t118093 = a1p*c*t118028;
                double t118094 = t118093+1.0;
                double t118095 = t118080-c0p*rho_a[index]*t118092*t118094*4.0;
                double t118096 = 1.0/t118048;
                double t118097 = 1.0/t118036;
                double t118098 = 1.0/t118043;
                double t118099 = 1.0/(t118039*t118039);
                double t118100 = 1.0/(t118039*t118039*t118039);
                double t118101 = ccab3*gcab*t118030*t118051*t118066*t117991*t117986*(3.0/2.0);
                double t118102 = ccab2*gamma_aa[index]*t118030*t118050*t118055*t117990;
                double t118103 = ccab3*gamma_aa[index]*gcab*t118030*t118051*t118062*t118037*t117986*4.0;
                double t118104 = ccab4*gamma_aa[index]*t118031*t118052*t118071*t117986*t117989*2.0;
                double t118105 = ccab4*t118031*t118033*t118052*t118076*t117998*(1.6E1/3.0);
                double t118106 = ccab2*t118030*t118032*t118050*t118058*t117986*(8.0/3.0);
                double t118107 = gamma_aa[index]*t118030*t118032*4.0;
                double t118108 = 1.0/(t118036*t118036*t118036);
                double t118109 = 1.0/(t118043*t118043*t118043);
                double t118110 = 1.0/(t118048*t118048*t118048);
                double t118111 = 1.0/pow(t118027,4.0/3.0);
                double t118112 = 1.0/pow(rho_a[index],4.0/3.0);
                double t118113 = 1.0/pow(rho_a[index],5.0/3.0);
                double t118114 = 1.0/sqrt(t117968);
                double t118115 = 1.0/t117981;
                double t118116 = 1.0/(t117978*t117978);
                double t118117 = b4p*t118113*t117971*(2.0/3.0);
                double t118118 = b2p*c*t118112*(1.0/3.0);
                double t118119 = b1p*c*t118112*t118114*(1.0/6.0);
                double t118120 = b3p*c*t118112*t117969*(1.0/2.0);
                double t118121 = t118120+t118117+t118118+t118119;
                double t118122 = t118121*t118115*t118116*t117984;
                double t118123 = 1.0/t118039;
                double t118124 = 1.0/t117993;
                double t118125 = 1.0/t118003;
                double t118126 = 1.0/t118006;
                double t118127 = 1.0/t117997;
                double t118128 = 1.0/(t117993*t117993);
                double t118129 = 1.0/(t117997*t117997);
                double t118130 = 1.0/(t118006*t118006);
                double t118131 = gcaa*t117985*3.0;
                double t118132 = gamma_aa[index]*t117990*t117987*6.0;
                double t118133 = gcaa*t117991*t117986*t117987*3.0;
                double t118134 = t118131+t118132+t118133;
                double t118135 = 1.0/(t118003*t118003);
                double t118136 = gcaa*t117985*4.0;
                double t118137 = gamma_aa[index]*t117990*t117987*1.2E1;
                double t118138 = gcaa*t117991*t117986*t117987*1.2E1;
                double t118139 = gamma_aa[index]*t117986*t117988*t117989*4.0;
                double t118140 = t118136+t118137+t118138+t118139;
                double t118141 = gcaa*t117985*2.0;
                double t118142 = gamma_aa[index]*t117990*t117987*2.0;
                double t118143 = t118141+t118142;
                double t118144 = gamma_aa[index]*gcaa*t118049*(1.6E1/3.0);
                double t118145 = t118032*t117986*t117987*(1.6E1/3.0);
                double t118146 = t118144+t118145;
                double t118147 = gamma_aa[index]*gcaa*t118049*8.0;
                double t118148 = gamma_aa[index]*gcaa*t118037*t117986*t117987*8.0;
                double t118149 = t118032*t117986*t117987*1.6E1;
                double t118150 = t118147+t118148+t118149;
                double t118151 = gamma_aa[index]*gcaa*t118049*(3.2E1/3.0);
                double t118152 = gamma_aa[index]*gcaa*t118037*t117986*t117987*3.2E1;
                double t118153 = t118032*t117986*t117987*3.2E1;
                double t118154 = t118033*t117988*t117998*(3.2E1/3.0);
                double t118155 = t118151+t118152+t118153+t118154;
                double t118156 = 1.0/t118021;
                double t118157 = 1.0/(t118018*t118018);
                double t118158 = b4f*t118113*t117971*(2.0/3.0);
                double t118159 = b2f*c*t118112*(1.0/3.0);
                double t118160 = b1f*c*t118112*t118114*(1.0/6.0);
                double t118161 = b3f*c*t118112*t117969*(1.0/2.0);
                double t118162 = t118160+t118161+t118158+t118159;
                double t118163 = a1f*c*c0f*t118022*t118112*(2.0/3.0);
                double t118164 = a1p*c*c0p*t118112*t117982*(2.0/3.0);
                double t118165 = ccaa1*gcaa*t118124*t117985;
                double t118166 = ccaa4*gamma_aa[index]*t118125*t117986*t117988*t117989*4.0;
                double t118167 = ccaa2*gamma_aa[index]*t118126*t117990*t117987*2.0;
                double t118168 = ccaa3*gcaa*t118127*t117991*t117986*t117987*3.0;
                double t118169 = t118165+t118166+t118167+t118168-ccaa1*gamma_aa[index]*t118128*t117990*t117987-ccaa2* \
                   t118130*t118143*t117990*t117986*t117987-ccaa4*t118140*t118135*t117988*t117989*t117998-ccaa3*gamma_aa[index]* \
                   gcaa*t118134*t118129*t117991*t117986*t117987;
                double t118170 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t118171 = 1.0/(omega*omega);
                double t118172 = pow(t118170,2.0/3.0);
                double t118175 = t118171*t118172;
                double t118173 = exp(-t118175);
                double t118174 = 1.0/pow(t118170,1.0/3.0);
                double t118176 = omega*omega;
                double t118177 = t118173-1.0;
                double t118178 = 1.0/pow(t118170,2.0/3.0);
                double t118179 = 1.0/pow(t118170,4.0/3.0);
                double t118180 = 1.0/omega;
                double t118202 = t118176*t118177*t118178*(1.0/2.0);
                double t118181 = -t118202+t118173;
                double t118182 = gx*gx;
                double t118183 = t118182*t118182;
                double t118184 = gamma_aa[index]*gx*t117985;
                double t118185 = t118184+1.0;
                double t118186 = gamma_aa[index]*gx*t117985*3.0;
                double t118187 = gamma_aa[index]*gx*t118182*t117991*t117986;
                double t118188 = t118182*t117990*t117986*3.0;
                double t118189 = t118186+t118187+t118188+1.0;
                double t118190 = gamma_aa[index]*gx*t117985*4.0;
                double t118191 = gamma_aa[index]*gx*t118182*t117991*t117986*4.0;
                double t118192 = t118182*t117990*t117986*6.0;
                double t118193 = t118183*t117989*t117998;
                double t118194 = t118190+t118191+t118192+t118193+1.0;
                double t118195 = gamma_aa[index]*gx*t117985*2.0;
                double t118196 = t118182*t117990*t117986;
                double t118197 = t118195+t118196+1.0;
                double t118198 = pow(t118170,1.0/3.0);
                double t118199 = t118180*t118198;
                double t118200 = erf(t118199);
                double t118201 = t118200*(3.991211251234741E15/2.251799813685248E15);
                double t118203 = omega*t118181*t118174;
                double t118204 = t118201+t118203;
                double t118205 = 1.0/t118185;
                double t118206 = cx1*gx*t118205*t117985;
                double t118207 = 1.0/t118194;
                double t118208 = cx4*gamma_aa[index]*t118207*t118183*t117986*t117989*4.0;
                double t118209 = 1.0/t118197;
                double t118210 = cx2*gamma_aa[index]*t118182*t118209*t117990*2.0;
                double t118211 = 1.0/t118189;
                double t118212 = cx3*gx*t118211*t118182*t117991*t117986*3.0;
                double t118213 = 1.0/(t118185*t118185);
                double t118214 = gx*t117985*3.0;
                double t118215 = gamma_aa[index]*t118182*t117990*6.0;
                double t118216 = gx*t118182*t117991*t117986*3.0;
                double t118217 = t118214+t118215+t118216;
                double t118218 = 1.0/(t118189*t118189);
                double t118219 = gx*t117985*4.0;
                double t118220 = gamma_aa[index]*t118182*t117990*1.2E1;
                double t118221 = gx*t118182*t117991*t117986*1.2E1;
                double t118222 = gamma_aa[index]*t118183*t117986*t117989*4.0;
                double t118223 = t118220+t118221+t118222+t118219;
                double t118224 = 1.0/(t118194*t118194);
                double t118225 = gx*t117985*2.0;
                double t118226 = gamma_aa[index]*t118182*t117990*2.0;
                double t118227 = t118225+t118226;
                double t118228 = 1.0/(t118197*t118197);
                double t118229 = t118210+t118212+t118206+t118208-cx1*gamma_aa[index]*t118213*t118182*t117990-cx2* \
                   t118182*t118227*t118228*t117990*t117986-cx4*t118223*t118224*t118183*t117989*t117998-cx3*gamma_aa[index]* \
                   gx*t118217*t118182*t118218*t117991*t117986;
                double t118230 = pow(rho_a[index],4.0/3.0);
                double t118231 = omega*t118204*t118174*(4.0/3.0);
                double t118232 = t118231-1.0;
                double t118233 = gamma_aa[index]*gx*t118049*(1.6E1/3.0);
                double t118234 = t118032*t118182*t117986*(1.6E1/3.0);
                double t118235 = t118233+t118234;
                double t118236 = gamma_aa[index]*gx*t118049*8.0;
                double t118237 = gamma_aa[index]*gx*t118037*t118182*t117986*8.0;
                double t118238 = t118032*t118182*t117986*1.6E1;
                double t118239 = t118236+t118237+t118238;
                double t118240 = gamma_aa[index]*gx*t118049*(3.2E1/3.0);
                double t118241 = gamma_aa[index]*gx*t118037*t118182*t117986*3.2E1;
                double t118242 = t118032*t118182*t117986*3.2E1;
                double t118243 = t118033*t118183*t117998*(3.2E1/3.0);
                double t118244 = t118240+t118241+t118242+t118243;
                v_rho_a_gamma_aa_[index] = t118095*(t118101+t118102+t118103+t118104+t118105+t118106-ccab2*gamma_aa[index]* \
                   t118030*t118032*t118097*(4.0/3.0)+ccab1*gamma_aa[index]*t118030*t118032*t118099*(4.0/3.0)+ccab4*t118031* \
                   t118052*t117989*t117998*(gamma_aa[index]*t118030*t118032*8.0+gamma_aa[index]*t118031*t118033*t117986* \
                   8.0+gcab*t118030*t118037*t117986*1.6E1)+ccab2*gamma_aa[index]*t118031*t118050*t118033*t117986*(4.0/ \
                   3.0)-ccab4*gamma_aa[index]*t118031*t118033*t118096*t117986*8.0-ccab1*gcab*t118100*t118030*t118037* \
                   t117986*(4.0/3.0)-ccab3*gcab*t118030*t118037*t118098*t117986*4.0-ccab2*t118030*t118108*t118055*t118058* \
                   t117990*t117986*2.0-ccab4*t118110*t118031*t118071*t118076*t117989*t117998*2.0+ccab3*gamma_aa[index]* \
                   gcab*t118030*t118051*t117991*t117986*(t118107+gcab*t118030*t118037*t117986*4.0)-ccab3*gamma_aa[index]* \
                   gcab*t118030*t118062*t118109*t118066*t117991*t117986*2.0)-t118169*(t118026+t118012*t118009*(t118025- \
                   c0p*t117982*t117984*2.0))-(-t118026-t118078+rho_a[index]*((t118094*1.0/(t118088*t118088)*(b4p*1.0/ \
                   pow(t118027,5.0/3.0)*t117971*(2.0/3.0)+b2p*c*t118111*(1.0/3.0)+b3p*c*t118111*t118081*(1.0/2.0)+b1p* \
                   c*t118111*1.0/sqrt(t118029)*(1.0/6.0)))/t118091-a1p*c*c0p*t118111*t118092*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t118122+t118164+t118012*t118009*(t118122+t118163-t118024*t118162*t118156*t118157-a1p*c*c0p*t118112* \
                   t117982*(2.0/3.0)))+c0p*t118092*t118094*2.0)*(ccab1*gcab*t118123*t117985*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t118030*t118097*t117990-ccab1*gamma_aa[index]*t118030*t117990*t118099*(1.0/2.0)-ccab2*t118030*t118050* \
                   t118058*t117990*t117986-ccab4*t118031*t118052*t118076*t117989*t117998+ccab4*gamma_aa[index]*t118031* \
                   t118096*t117986*t117989*2.0+ccab3*gcab*t118030*t118098*t117991*t117986*(3.0/2.0)-ccab3*gamma_aa[index]* \
                   gcab*t118030*t118051*t118062*t117991*t117986)*2.0+t118095*(t118101+t118102+t118103+t118104+t118105+ \
                   t118106-ccab1*gcab*t118123*t118049*(4.0/3.0)-ccab2*gamma_aa[index]*t118030*t118032*t118097*4.0+ccab1* \
                   gamma_aa[index]*t118030*t118032*t118099*(8.0/3.0)+ccab4*t118031*t118052*t117989*t117998*(gcab*t118049* \
                   (1.6E1/3.0)+gamma_aa[index]*t118030*t118032*2.4E1+gamma_aa[index]*t118031*t118033*t117986*(4.0E1/3.0) \
                   +gcab*t118030*t118037*t117986*3.2E1)+ccab2*t118030*t118050*t117990*t117986*(t118107+gcab*t118049*(8.0/ \
                   3.0))-ccab4*gamma_aa[index]*t118031*t118033*t118096*t117986*(4.0E1/3.0)-ccab1*gcab*t118100*t118030* \
                   t118037*t117986*(4.0/3.0)-ccab3*gcab*t118030*t118037*t118098*t117986*8.0-ccab2*t118030*t118108*t118055* \
                   t118058*t117990*t117986*2.0-ccab4*t118110*t118031*t118071*t118076*t117989*t117998*2.0+ccab3*gamma_aa[index]* \
                   gcab*t118030*t118051*t117991*t117986*(gcab*t118049*4.0+gamma_aa[index]*t118030*t118032*1.2E1+gcab* \
                   t118030*t118037*t117986*8.0)-ccab3*gamma_aa[index]*gcab*t118030*t118062*t118109*t118066*t117991*t117986* \
                   2.0)-rho_a[index]*t118079*(ccaa1*gcaa*t118124*t118049*(-8.0/3.0)-ccaa2*gamma_aa[index]*t118032*t118126* \
                   t117987*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t118032*t118128*t117987*8.0+ccaa2*t118130*t118032*t118143* \
                   t117986*t117987*(1.6E1/3.0)+ccaa4*t118140*t118033*t118135*t117988*t117998*(3.2E1/3.0)+ccaa4*t118135* \
                   t117988*t117989*t117998*(gcaa*t118049*(3.2E1/3.0)+gamma_aa[index]*t118032*t117987*6.4E1+gamma_aa[index]* \
                   t118033*t117986*t117988*(1.28E2/3.0)+gcaa*t118037*t117986*t117987*9.6E1)-ccaa1*gcaa*t118037*1.0/(t117993* \
                   t117993*t117993)*t117986*t117987*(1.6E1/3.0)+ccaa2*t118130*t117990*t117986*t117987*(gcaa*t118049*(1.6E1/ \
                   3.0)+gamma_aa[index]*t118032*t117987*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t118130*t118146*t117990*t117987* \
                   2.0-ccaa4*gamma_aa[index]*t118033*t118125*t117986*t117988*(1.28E2/3.0)-ccaa3*gcaa*t118037*t118127* \
                   t117986*t117987*2.4E1+ccaa4*gamma_aa[index]*t118135*t118155*t117986*t117988*t117989*4.0+ccaa3*gcaa* \
                   t118150*t118129*t117991*t117986*t117987*3.0-ccaa2*1.0/(t118006*t118006*t118006)*t118143*t118146*t117990* \
                   t117986*t117987*2.0-ccaa4*1.0/(t118003*t118003*t118003)*t118140*t118155*t117988*t117989*t117998*2.0+ \
                   ccaa3*gamma_aa[index]*gcaa*t118129*t117991*t117986*t117987*(gcaa*t118049*8.0+gamma_aa[index]*t118032* \
                   t117987*3.2E1+gcaa*t118037*t117986*t117987*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t118134*t118037*t118129* \
                   t117986*t117987*8.0-ccaa3*gamma_aa[index]*gcaa*t118150*t118134*t117991*t117986*t117987*1.0/(t117997* \
                   t117997*t117997)*2.0)+rho_a[index]*t118169*(-t118122+t118164+t118012*t118009*(t118122+t118163-t118164- \
                   t118024*t118162*t118156*t118157))-c0*t118230*t118229*(omega*t118174*(omega*t118181*t118179*(-2.778046668940015E15/ \
                   1.40737488355328E14)+omega*t118174*((t118173*(1.0/3.0))/rho_a[index]+1.0/pow(t118170,5.0/3.0)*t118176* \
                   t118177*(2.778046668940015E15/1.40737488355328E14)-t118171*t118173*t118174*(2.778046668940015E15/7.0368744177664E13) \
                   )+1.0/sqrt(3.141592653589793)*t118180*t118173*t118178*(1.108777112152858E31/1.584563250285287E29)) \
                   *(4.0/3.0)-omega*t118204*t118179*(2.778046668940015E15/1.05553116266496E14))-c0*t118230*t118232*(cx1* \
                   gx*t118205*t118049*(-8.0/3.0)+cx1*gamma_aa[index]*t118032*t118213*t118182*8.0-cx2*gamma_aa[index]* \
                   t118032*t118182*t118209*(3.2E1/3.0)+cx2*t118032*t118182*t118227*t118228*t117986*(1.6E1/3.0)+cx4*t118033* \
                   t118223*t118224*t118183*t117998*(3.2E1/3.0)+cx4*t118224*t118183*t117989*t117998*(gx*t118049*(3.2E1/ \
                   3.0)+gamma_aa[index]*t118032*t118182*6.4E1+gamma_aa[index]*t118033*t118183*t117986*(1.28E2/3.0)+gx* \
                   t118037*t118182*t117986*9.6E1)-cx1*gx*t118037*t118182*1.0/(t118185*t118185*t118185)*t117986*(1.6E1/ \
                   3.0)+cx2*t118182*t118228*t117990*t117986*(gx*t118049*(1.6E1/3.0)+gamma_aa[index]*t118032*t118182*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t118235*t118182*t118228*t117990*2.0-cx4*gamma_aa[index]*t118033*t118207* \
                   t118183*t117986*(1.28E2/3.0)-cx3*gx*t118211*t118037*t118182*t117986*2.4E1+cx4*gamma_aa[index]*t118224* \
                   t118244*t118183*t117986*t117989*4.0+cx3*gx*t118182*t118218*t118239*t117991*t117986*3.0-cx2*t118235* \
                   t118182*t118227*t117990*1.0/(t118197*t118197*t118197)*t117986*2.0-cx4*t118223*t118244*t118183*1.0/ \
                   (t118194*t118194*t118194)*t117989*t117998*2.0+cx3*gamma_aa[index]*gx*t118182*t118218*t117991*t117986* \
                   (gx*t118049*8.0+gamma_aa[index]*t118032*t118182*3.2E1+gx*t118037*t118182*t117986*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t118037*t118217*t118182*t118218*t117986*8.0-cx3*gamma_aa[index]*gx*t118217*t118182*t118239*t117991* \
                   1.0/(t118189*t118189*t118189)*t117986*2.0)-c0*pow(rho_a[index],1.0/3.0)*t118232*t118229*(4.0/3.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t118246 = 1.0/pow(rho_a[index],1.0/3.0);
                double t118247 = c*t118246;
                double t118248 = sqrt(t118247);
                double t118249 = pow(t118247,3.0/2.0);
                double t118250 = c*c;
                double t118251 = 1.0/pow(rho_a[index],2.0/3.0);
                double t118252 = 1.0/c0p;
                double t118253 = b1p*t118248;
                double t118254 = b3p*t118249;
                double t118255 = b4p*t118250*t118251;
                double t118256 = b2p*c*t118246;
                double t118257 = t118253+t118254+t118255+t118256;
                double t118258 = 1.0/t118257;
                double t118259 = t118252*t118258*(1.0/2.0);
                double t118260 = t118259+1.0;
                double t118261 = log(t118260);
                double t118262 = a1p*c*t118246;
                double t118263 = t118262+1.0;
                double t118264 = rho_a[index]*2.0;
                double t118265 = 1.0/pow(t118264,1.0/3.0);
                double t118266 = c*t118265;
                double t118267 = gcab*gcab;
                double t118268 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t118269 = 1.0/pow(rho_a[index],8.0/3.0);
                double t118270 = gamma_aa[index]*gamma_aa[index];
                double t118271 = t118267*t118267;
                double t118272 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t118273 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t118274 = gamma_aa[index]*gcab*t118269;
                double t118275 = t118274+1.0;
                double t118276 = gamma_aa[index]*gcab*t118269*2.0;
                double t118277 = t118270*t118267*t118268;
                double t118278 = t118276+t118277+1.0;
                double t118279 = gamma_aa[index]*gcab*t118269*3.0;
                double t118280 = gamma_aa[index]*gcab*t118270*t118273*t118267;
                double t118281 = t118270*t118267*t118268*3.0;
                double t118282 = t118280+t118281+t118279+1.0;
                double t118283 = t118270*t118270;
                double t118299 = gcab*t118269*2.0;
                double t118300 = gamma_aa[index]*t118267*t118268*6.0;
                double t118301 = gcab*t118270*t118273*t118267*6.0;
                double t118302 = gamma_aa[index]*t118270*t118271*t118272*2.0;
                double t118284 = t118300+t118301+t118302+t118299;
                double t118285 = gamma_aa[index]*gcab*t118269*4.0;
                double t118286 = gamma_aa[index]*gcab*t118270*t118273*t118267*4.0;
                double t118287 = t118270*t118267*t118268*6.0;
                double t118288 = t118271*t118272*t118283;
                double t118289 = t118285+t118286+t118287+t118288+1.0;
                double t118292 = gcab*t118269;
                double t118293 = gamma_aa[index]*t118267*t118268;
                double t118290 = t118292+t118293;
                double t118291 = 1.0/(t118282*t118282);
                double t118294 = 1.0/(t118278*t118278);
                double t118295 = gcab*t118269*(3.0/2.0);
                double t118296 = gamma_aa[index]*t118267*t118268*3.0;
                double t118297 = gcab*t118270*t118273*t118267*(3.0/2.0);
                double t118298 = t118295+t118296+t118297;
                double t118303 = 1.0/(t118289*t118289);
                double t118304 = pow(2.0,1.0/3.0);
                double t118305 = t118304*2.0;
                double t118306 = t118305-2.0;
                double t118307 = two_13*2.0;
                double t118308 = t118307-2.0;
                double t118309 = 1.0/t118308;
                double t118310 = 1.0/c0f;
                double t118311 = b1f*t118248;
                double t118312 = b3f*t118249;
                double t118313 = b4f*t118250*t118251;
                double t118314 = b2f*c*t118246;
                double t118315 = t118311+t118312+t118313+t118314;
                double t118316 = 1.0/t118315;
                double t118317 = t118310*t118316*(1.0/2.0);
                double t118318 = t118317+1.0;
                double t118319 = log(t118318);
                double t118320 = a1f*c*t118246;
                double t118321 = t118320+1.0;
                double t118322 = c0f*t118321*t118319*2.0;
                double t118323 = c0p*t118261*t118263*2.0;
                double t118324 = gcaa*gcaa;
                double t118325 = t118324*t118324;
                double t118326 = gamma_aa[index]*gcaa*t118269;
                double t118327 = t118326+1.0;
                double t118328 = gamma_aa[index]*gcaa*t118269*2.0;
                double t118329 = t118270*t118324*t118268;
                double t118330 = t118328+t118329+1.0;
                double t118331 = gamma_aa[index]*gcaa*t118269*3.0;
                double t118332 = gamma_aa[index]*gcaa*t118270*t118324*t118273;
                double t118333 = t118270*t118324*t118268*3.0;
                double t118334 = t118331+t118332+t118333+1.0;
                double t118350 = gcaa*t118269*4.0;
                double t118351 = gamma_aa[index]*t118324*t118268*1.2E1;
                double t118352 = gcaa*t118270*t118324*t118273*1.2E1;
                double t118353 = gamma_aa[index]*t118270*t118325*t118272*4.0;
                double t118335 = t118350+t118351+t118352+t118353;
                double t118336 = gamma_aa[index]*gcaa*t118269*4.0;
                double t118337 = gamma_aa[index]*gcaa*t118270*t118324*t118273*4.0;
                double t118338 = t118270*t118324*t118268*6.0;
                double t118339 = t118325*t118272*t118283;
                double t118340 = t118336+t118337+t118338+t118339+1.0;
                double t118343 = gcaa*t118269*2.0;
                double t118344 = gamma_aa[index]*t118324*t118268*2.0;
                double t118341 = t118343+t118344;
                double t118342 = 1.0/(t118334*t118334);
                double t118345 = 1.0/(t118330*t118330);
                double t118346 = gcaa*t118269*3.0;
                double t118347 = gamma_aa[index]*t118324*t118268*6.0;
                double t118348 = gcaa*t118270*t118324*t118273*3.0;
                double t118349 = t118346+t118347+t118348;
                double t118354 = 1.0/(t118340*t118340);
                double t118355 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t118356 = 1.0/pow(t118355,1.0/3.0);
                double t118357 = 1.0/(omega*omega);
                double t118358 = pow(t118355,2.0/3.0);
                double t118359 = exp(-t118357*t118358);
                double t118360 = gx*gx;
                double t118361 = t118360*t118360;
                double t118362 = gamma_aa[index]*gx*t118269;
                double t118363 = t118362+1.0;
                double t118364 = gamma_aa[index]*gx*t118269*2.0;
                double t118365 = t118270*t118360*t118268;
                double t118366 = t118364+t118365+1.0;
                double t118367 = gamma_aa[index]*gx*t118269*3.0;
                double t118368 = gamma_aa[index]*gx*t118270*t118360*t118273;
                double t118369 = t118270*t118360*t118268*3.0;
                double t118370 = t118367+t118368+t118369+1.0;
                double t118386 = gx*t118269*4.0;
                double t118387 = gamma_aa[index]*t118360*t118268*1.2E1;
                double t118388 = gx*t118270*t118360*t118273*1.2E1;
                double t118389 = gamma_aa[index]*t118270*t118361*t118272*4.0;
                double t118371 = t118386+t118387+t118388+t118389;
                double t118372 = gamma_aa[index]*gx*t118269*4.0;
                double t118373 = gamma_aa[index]*gx*t118270*t118360*t118273*4.0;
                double t118374 = t118270*t118360*t118268*6.0;
                double t118375 = t118361*t118272*t118283;
                double t118376 = t118372+t118373+t118374+t118375+1.0;
                double t118379 = gx*t118269*2.0;
                double t118380 = gamma_aa[index]*t118360*t118268*2.0;
                double t118377 = t118380+t118379;
                double t118378 = 1.0/(t118370*t118370);
                double t118381 = 1.0/(t118366*t118366);
                double t118382 = gx*t118269*3.0;
                double t118383 = gamma_aa[index]*t118360*t118268*6.0;
                double t118384 = gx*t118270*t118360*t118273*3.0;
                double t118385 = t118382+t118383+t118384;
                double t118390 = 1.0/(t118376*t118376);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t118323+t118306*t118309*(t118322-c0p*t118261*t118263* \
                   2.0))*2.0-c0p*rho_a[index]*log((t118252*(1.0/2.0))/(b1p*sqrt(t118266)+b3p*pow(t118266,3.0/2.0)+b4p* \
                   t118250*1.0/pow(t118264,2.0/3.0)+b2p*c*t118265)+1.0)*(a1p*c*t118265+1.0)*4.0)*(ccab1*1.0/(t118275* \
                   t118275)*t118267*t118268*(1.0/2.0)-(ccab2*t118267*t118268*(1.0/2.0))/t118278+ccab2*t118270*t118271* \
                   t118272*t118294*(1.0/2.0)-(ccab4*t118270*t118271*t118272*3.0)/t118289+ccab4*t118303*t118271*t118272* \
                   t118283*(t118267*t118268*3.0+t118270*t118271*t118272*3.0+gamma_aa[index]*gcab*t118273*t118267*6.0) \
                   -(ccab3*gamma_aa[index]*gcab*t118273*t118267*(3.0/2.0))/t118282-ccab1*gamma_aa[index]*gcab*t118273* \
                   1.0/(t118275*t118275*t118275)*t118267*(1.0/2.0)-ccab2*t118270*(t118290*t118290)*t118267*t118268*1.0/ \
                   (t118278*t118278*t118278)*2.0-ccab4*t118271*t118272*t118283*(t118284*t118284)*1.0/(t118289*t118289* \
                   t118289)*2.0+ccab2*gamma_aa[index]*t118290*t118267*t118294*t118268*2.0+ccab4*gamma_aa[index]*t118303* \
                   t118270*t118271*t118272*t118284*4.0+ccab3*gcab*t118270*t118273*t118291*t118267*t118298*3.0+ccab3*gamma_aa[index]* \
                   gcab*t118270*t118273*t118291*t118267*(t118267*t118268*(3.0/2.0)+gamma_aa[index]*gcab*t118273*t118267* \
                   (3.0/2.0))-ccab3*gamma_aa[index]*gcab*t118270*t118273*1.0/(t118282*t118282*t118282)*t118267*(t118298* \
                   t118298)*2.0)*-4.0-rho_a[index]*(t118323+t118306*t118309*(t118322-t118323))*((ccaa2*t118324*t118268* \
                   2.0)/t118330-ccaa1*t118324*1.0/(t118327*t118327)*t118268*2.0-ccaa2*t118270*t118325*t118272*t118345* \
                   2.0+(ccaa4*t118270*t118325*t118272*1.2E1)/t118340-ccaa4*t118325*t118272*t118354*t118283*(t118324*t118268* \
                   1.2E1+t118270*t118325*t118272*1.2E1+gamma_aa[index]*gcaa*t118324*t118273*2.4E1)+(ccaa3*gamma_aa[index]* \
                   gcaa*t118324*t118273*6.0)/t118334+ccaa1*gamma_aa[index]*gcaa*t118324*t118273*1.0/(t118327*t118327* \
                   t118327)*2.0+ccaa2*1.0/(t118330*t118330*t118330)*(t118341*t118341)*t118270*t118324*t118268*2.0+ccaa4* \
                   1.0/(t118340*t118340*t118340)*t118325*t118272*(t118335*t118335)*t118283*2.0-ccaa2*gamma_aa[index]* \
                   t118341*t118324*t118345*t118268*4.0-ccaa4*gamma_aa[index]*t118270*t118325*t118272*t118335*t118354* \
                   8.0-ccaa3*gcaa*t118270*t118324*t118342*t118273*t118349*6.0-ccaa3*gamma_aa[index]*gcaa*t118270*t118324* \
                   t118342*t118273*(t118324*t118268*6.0+gamma_aa[index]*gcaa*t118324*t118273*6.0)+ccaa3*gamma_aa[index]* \
                   gcaa*t118270*t118324*1.0/(t118334*t118334*t118334)*t118273*(t118349*t118349)*2.0)*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t118356*(erf(pow(t118355,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega* \
                   t118356*(t118359-(omega*omega)*1.0/pow(t118355,2.0/3.0)*(t118359-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx1* \
                   t118360*1.0/(t118363*t118363)*t118268*2.0-(cx2*t118360*t118268*2.0)/t118366+cx2*t118270*t118361*t118272* \
                   t118381*2.0-(cx4*t118270*t118361*t118272*1.2E1)/t118376+cx4*t118361*t118272*t118390*t118283*(t118360* \
                   t118268*1.2E1+t118270*t118361*t118272*1.2E1+gamma_aa[index]*gx*t118360*t118273*2.4E1)-cx1*gamma_aa[index]* \
                   gx*t118360*t118273*1.0/(t118363*t118363*t118363)*2.0-(cx3*gamma_aa[index]*gx*t118360*t118273*6.0)/ \
                   t118370-cx2*t118270*t118360*1.0/(t118366*t118366*t118366)*t118268*(t118377*t118377)*2.0-cx4*t118361* \
                   t118272*(t118371*t118371)*t118283*1.0/(t118376*t118376*t118376)*2.0+cx2*gamma_aa[index]*t118360*t118381* \
                   t118268*t118377*4.0+cx4*gamma_aa[index]*t118270*t118361*t118272*t118371*t118390*8.0+cx3*gx*t118270* \
                   t118360*t118273*t118385*t118378*6.0+cx3*gamma_aa[index]*gx*t118270*t118360*t118273*t118378*(t118360* \
                   t118268*6.0+gamma_aa[index]*gx*t118360*t118273*6.0)-cx3*gamma_aa[index]*gx*t118270*t118360*1.0/(t118370* \
                   t118370*t118370)*t118273*(t118385*t118385)*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void wB97_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t111985 = 1.0/pow(rho_a[index],1.0/3.0);
            double t111986 = c*t111985;
            double t111987 = sqrt(t111986);
            double t111988 = pow(t111986,3.0/2.0);
            double t111989 = c*c;
            double t111990 = 1.0/pow(rho_a[index],2.0/3.0);
            double t111991 = 1.0/c0p;
            double t111992 = b1p*t111987;
            double t111993 = b3p*t111988;
            double t111994 = b4p*t111990*t111989;
            double t111995 = b2p*c*t111985;
            double t111996 = t111992+t111993+t111994+t111995;
            double t111997 = 1.0/t111996;
            double t111998 = t111991*t111997*(1.0/2.0);
            double t111999 = t111998+1.0;
            double t112000 = log(t111999);
            double t112001 = a1p*c*t111985;
            double t112002 = t112001+1.0;
            double t112003 = pow(2.0,1.0/3.0);
            double t112004 = t112003*2.0;
            double t112005 = t112004-2.0;
            double t112006 = two_13*2.0;
            double t112007 = t112006-2.0;
            double t112008 = 1.0/t112007;
            double t112009 = 1.0/c0f;
            double t112010 = 1.0/pow(rho_b[index],1.0/3.0);
            double t112011 = c*t112010;
            double t112012 = sqrt(t112011);
            double t112013 = pow(t112011,3.0/2.0);
            double t112014 = 1.0/pow(rho_b[index],2.0/3.0);
            double t112015 = b1p*t112012;
            double t112016 = b3p*t112013;
            double t112017 = b4p*t112014*t111989;
            double t112018 = b2p*c*t112010;
            double t112019 = t112015+t112016+t112017+t112018;
            double t112020 = 1.0/t112019;
            double t112021 = t112020*t111991*(1.0/2.0);
            double t112022 = t112021+1.0;
            double t112023 = log(t112022);
            double t112024 = a1p*c*t112010;
            double t112025 = t112024+1.0;
            double t112026 = c0p*t112023*t112025*2.0;
            double t112027 = rho_a[index]+rho_b[index];
            double t112028 = 1.0/pow(t112027,1.0/3.0);
            double t112029 = c*t112028;
            double t112030 = sqrt(t112029);
            double t112031 = pow(t112029,3.0/2.0);
            double t112032 = 1.0/pow(t112027,2.0/3.0);
            double t112033 = b1p*t112030;
            double t112034 = b3p*t112031;
            double t112035 = b4p*t112032*t111989;
            double t112036 = b2p*c*t112028;
            double t112037 = t112033+t112034+t112035+t112036;
            double t112038 = 1.0/t112037;
            double t112039 = t112038*t111991*(1.0/2.0);
            double t112040 = t112039+1.0;
            double t112041 = log(t112040);
            double t112042 = a1p*c*t112028;
            double t112043 = t112042+1.0;
            double t112044 = c0p*t112041*t112043*2.0;
            double t112045 = rho_a[index]-rho_b[index];
            double t112046 = t112045*t112045;
            double t112047 = 1.0/t112027;
            double t112048 = t112045*t112047;
            double t112049 = 1.0/(t112027*t112027*t112027*t112027);
            double t112050 = t112046*t112046;
            double t112051 = t112048+1.0;
            double t112052 = pow(t112051,4.0/3.0);
            double t112053 = -t112048+1.0;
            double t112054 = pow(t112053,4.0/3.0);
            double t112055 = t112052+t112054-2.0;
            double t112058 = 1.0/pow(rho_a[index],8.0/3.0);
            double t112059 = gamma_aa[index]*t112058*(1.0/2.0);
            double t112060 = 1.0/pow(rho_b[index],8.0/3.0);
            double t112061 = gamma_bb[index]*t112060*(1.0/2.0);
            double t112056 = t112061+t112059;
            double t112057 = gcab*gcab;
            double t112062 = t112056*t112056;
            double t112063 = t112057*t112057;
            double t112064 = t112062*t112062;
            double t112065 = c0p*t112000*t112002*2.0;
            double t112066 = b1f*t111987;
            double t112067 = b3f*t111988;
            double t112068 = b4f*t111990*t111989;
            double t112069 = b2f*c*t111985;
            double t112070 = t112066+t112067+t112068+t112069;
            double t112071 = 1.0/t112070;
            double t112072 = t112071*t112009*(1.0/2.0);
            double t112073 = t112072+1.0;
            double t112074 = log(t112073);
            double t112075 = a1f*c*t111985;
            double t112076 = t112075+1.0;
            double t112077 = t112065-c0f*t112074*t112076*2.0;
            double t112078 = t112065-t112005*t112008*t112077;
            double t112079 = gamma_aa[index]*gamma_aa[index];
            double t112080 = gcaa*gcaa;
            double t112081 = t112079*t112079;
            double t112082 = t112080*t112080;
            double t112083 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t112084 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t112085 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t112086 = b1f*t112012;
            double t112087 = b3f*t112013;
            double t112088 = b4f*t112014*t111989;
            double t112089 = b2f*c*t112010;
            double t112090 = t112086+t112087+t112088+t112089;
            double t112091 = 1.0/t112090;
            double t112092 = t112009*t112091*(1.0/2.0);
            double t112093 = t112092+1.0;
            double t112094 = log(t112093);
            double t112095 = a1f*c*t112010;
            double t112096 = t112095+1.0;
            double t112097 = t112026-c0f*t112094*t112096*2.0;
            double t112098 = t112026-t112005*t112008*t112097;
            double t112099 = gamma_bb[index]*gamma_bb[index];
            double t112100 = t112099*t112099;
            double t112101 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t112102 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t112103 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t112104 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t112105 = 1.0/pow(t112104,1.0/3.0);
            double t112106 = 1.0/(omega*omega);
            double t112107 = pow(t112104,2.0/3.0);
            double t112108 = exp(-t112106*t112107);
            double t112109 = gx*gx;
            double t112110 = t112109*t112109;
            double t112111 = 1.0/omega;
            double t112112 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t112113 = 1.0/pow(t112112,1.0/3.0);
            double t112114 = omega*omega;
            double t112115 = pow(t112112,2.0/3.0);
            double t112116 = exp(-t112106*t112115);
            functional_[index] = (rho_a[index]*t112078+rho_b[index]*t112098-t112027*(t112044-t112050*t112008* \
               t112055*t112049*(t112044-c0f*log((t112009*(1.0/2.0))/(b1f*t112030+b3f*t112031+b2f*c*t112028+b4f*t112032* \
               t111989)+1.0)*(a1f*c*t112028+1.0)*2.0)+(Aa*t112008*t112055*log((1.0/2.0)/(Aa*(b1a*t112030+b3a*t112031+ \
               b2a*c*t112028+b4a*t112032*t111989))+1.0)*(t112050*t112049-1.0)*(a1a*c*t112028+1.0)*2.0)/d2fz0))*(ccab0+ \
               (ccab4*t112063*t112064)/(gcab*t112056*4.0+t112063*t112064+t112062*t112057*6.0+gcab*t112062*t112056* \
               t112057*4.0+1.0)+(ccab1*gcab*t112056)/(gcab*t112056+1.0)+(ccab2*t112062*t112057)/(gcab*t112056*2.0+ \
               t112062*t112057+1.0)+(ccab3*gcab*t112062*t112056*t112057)/(gcab*t112056*3.0+t112062*t112057*3.0+gcab* \
               t112062*t112056*t112057+1.0))-rho_b[index]*t112098*(ccaa0+(ccaa2*t112103*t112080*t112099)/(gamma_bb[index]* \
               gcaa*t112060*2.0+t112103*t112080*t112099+1.0)+(ccaa1*gamma_bb[index]*gcaa*t112060)/(gamma_bb[index]* \
               gcaa*t112060+1.0)+(ccaa4*t112100*t112101*t112082)/(gamma_bb[index]*gcaa*t112060*4.0+t112100*t112101* \
               t112082+t112103*t112080*t112099*6.0+gamma_bb[index]*gcaa*t112102*t112080*t112099*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t112102*t112080*t112099)/(gamma_bb[index]*gcaa*t112060*3.0+t112103*t112080*t112099*3.0+gamma_bb[index]* \
               gcaa*t112102*t112080*t112099+1.0))-rho_a[index]*t112078*(ccaa0+(ccaa2*t112080*t112085*t112079)/(gamma_aa[index]* \
               gcaa*t112058*2.0+t112080*t112085*t112079+1.0)+(ccaa1*gamma_aa[index]*gcaa*t112058)/(gamma_aa[index]* \
               gcaa*t112058+1.0)+(ccaa4*t112081*t112082*t112083)/(gamma_aa[index]*gcaa*t112058*4.0+t112081*t112082* \
               t112083+t112080*t112085*t112079*6.0+gamma_aa[index]*gcaa*t112080*t112084*t112079*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t112080*t112084*t112079)/(gamma_aa[index]*gcaa*t112058*3.0+t112080*t112085*t112079*3.0+gamma_aa[index]* \
               gcaa*t112080*t112084*t112079+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t112113*(erf(t112111*pow(t112112,1.0/ \
               3.0))*(3.991211251234741E15/2.251799813685248E15)+omega*t112113*(t112116-1.0/pow(t112112,2.0/3.0)* \
               t112114*(t112116-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t112103*t112109*t112099)/(gamma_bb[index]* \
               gx*t112060*2.0+t112103*t112109*t112099+1.0)+(cx1*gamma_bb[index]*gx*t112060)/(gamma_bb[index]*gx*t112060+ \
               1.0)+(cx4*t112100*t112101*t112110)/(gamma_bb[index]*gx*t112060*4.0+t112100*t112101*t112110+t112103* \
               t112109*t112099*6.0+gamma_bb[index]*gx*t112102*t112109*t112099*4.0+1.0)+(cx3*gamma_bb[index]*gx*t112102* \
               t112109*t112099)/(gamma_bb[index]*gx*t112060*3.0+t112103*t112109*t112099*3.0+gamma_bb[index]*gx*t112102* \
               t112109*t112099+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t112105*(erf(t112111*pow(t112104,1.0/3.0) \
               )*(3.991211251234741E15/2.251799813685248E15)+omega*t112105*(t112108-1.0/pow(t112104,2.0/3.0)*t112114* \
               (t112108-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t112109*t112085*t112079)/(gamma_aa[index]*gx*t112058* \
               2.0+t112109*t112085*t112079+1.0)+(cx1*gamma_aa[index]*gx*t112058)/(gamma_aa[index]*gx*t112058+1.0) \
               +(cx4*t112110*t112081*t112083)/(gamma_aa[index]*gx*t112058*4.0+t112110*t112081*t112083+t112109*t112085* \
               t112079*6.0+gamma_aa[index]*gx*t112109*t112084*t112079*4.0+1.0)+(cx3*gamma_aa[index]*gx*t112109*t112084* \
               t112079)/(gamma_aa[index]*gx*t112058*3.0+t112109*t112085*t112079*3.0+gamma_aa[index]*gx*t112109*t112084* \
               t112079+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t116483 = 1.0/pow(rho_a[index],1.0/3.0);
            double t116484 = c*t116483;
            double t116485 = sqrt(t116484);
            double t116486 = pow(t116484,3.0/2.0);
            double t116487 = c*c;
            double t116488 = 1.0/pow(rho_a[index],2.0/3.0);
            double t116489 = 1.0/c0p;
            double t116490 = b1p*t116485;
            double t116491 = b3p*t116486;
            double t116492 = b4p*t116487*t116488;
            double t116493 = b2p*c*t116483;
            double t116494 = t116490+t116491+t116492+t116493;
            double t116495 = 1.0/t116494;
            double t116496 = t116495*t116489*(1.0/2.0);
            double t116497 = t116496+1.0;
            double t116498 = log(t116497);
            double t116499 = a1p*c*t116483;
            double t116500 = t116499+1.0;
            double t116501 = gamma_aa[index]*gamma_aa[index];
            double t116502 = gcaa*gcaa;
            double t116503 = t116501*t116501;
            double t116504 = t116502*t116502;
            double t116505 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t116506 = 1.0/pow(rho_a[index],8.0/3.0);
            double t116507 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t116508 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t116509 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t116510 = 1.0/pow(t116509,1.0/3.0);
            double t116511 = 1.0/(omega*omega);
            double t116512 = pow(t116509,2.0/3.0);
            double t116513 = exp(-t116511*t116512);
            double t116514 = gx*gx;
            double t116515 = t116514*t116514;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t116485+ \
               b3f*t116486+b2f*c*t116483+b4f*t116487*t116488))+1.0)*(a1f*c*t116483+1.0)*2.0-c0p*t116500*t116498*2.0) \
               )/(two_13*2.0-2.0)+c0p*t116500*t116498*2.0)*(ccaa0+(ccaa2*t116501*t116502*t116508)/(gamma_aa[index]* \
               gcaa*t116506*2.0+t116501*t116502*t116508+1.0)+(ccaa1*gamma_aa[index]*gcaa*t116506)/(gamma_aa[index]* \
               gcaa*t116506+1.0)+(ccaa4*t116503*t116504*t116505)/(gamma_aa[index]*gcaa*t116506*4.0+t116501*t116502* \
               t116508*6.0+t116503*t116504*t116505+gamma_aa[index]*gcaa*t116501*t116502*t116507*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t116501*t116502*t116507)/(gamma_aa[index]*gcaa*t116506*3.0+t116501*t116502*t116508*3.0+gamma_aa[index]* \
               gcaa*t116501*t116502*t116507+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t116510*(erf(pow(t116509,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t116510*(t116513-(omega*omega)*1.0/pow(t116509,2.0/ \
               3.0)*(t116513-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t116501*t116514*t116508)/(gamma_aa[index]* \
               gx*t116506*2.0+t116501*t116514*t116508+1.0)+(cx1*gamma_aa[index]*gx*t116506)/(gamma_aa[index]*gx*t116506+ \
               1.0)+(cx4*t116503*t116505*t116515)/(gamma_aa[index]*gx*t116506*4.0+t116501*t116514*t116508*6.0+t116503* \
               t116505*t116515+gamma_aa[index]*gx*t116501*t116514*t116507*4.0+1.0)+(cx3*gamma_aa[index]*gx*t116501* \
               t116514*t116507)/(gamma_aa[index]*gx*t116506*3.0+t116501*t116514*t116508*3.0+gamma_aa[index]*gx*t116501* \
               t116514*t116507+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t115728 = 1.0/pow(rho_b[index],1.0/3.0);
            double t115729 = c*t115728;
            double t115730 = sqrt(t115729);
            double t115731 = pow(t115729,3.0/2.0);
            double t115732 = c*c;
            double t115733 = 1.0/pow(rho_b[index],2.0/3.0);
            double t115734 = 1.0/c0p;
            double t115735 = b1p*t115730;
            double t115736 = b3p*t115731;
            double t115737 = b4p*t115732*t115733;
            double t115738 = b2p*c*t115728;
            double t115739 = t115735+t115736+t115737+t115738;
            double t115740 = 1.0/t115739;
            double t115741 = t115740*t115734*(1.0/2.0);
            double t115742 = t115741+1.0;
            double t115743 = log(t115742);
            double t115744 = a1p*c*t115728;
            double t115745 = t115744+1.0;
            double t115746 = gamma_bb[index]*gamma_bb[index];
            double t115747 = gcaa*gcaa;
            double t115748 = t115746*t115746;
            double t115749 = t115747*t115747;
            double t115750 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t115751 = 1.0/pow(rho_b[index],8.0/3.0);
            double t115752 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t115753 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t115754 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t115755 = 1.0/pow(t115754,1.0/3.0);
            double t115756 = 1.0/(omega*omega);
            double t115757 = pow(t115754,2.0/3.0);
            double t115758 = exp(-t115756*t115757);
            double t115759 = gx*gx;
            double t115760 = t115759*t115759;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t115730+ \
               b3f*t115731+b2f*c*t115728+b4f*t115732*t115733))+1.0)*(a1f*c*t115728+1.0)*2.0-c0p*t115743*t115745*2.0) \
               )/(two_13*2.0-2.0)+c0p*t115743*t115745*2.0)*(ccaa0+(ccaa2*t115753*t115746*t115747)/(gamma_bb[index]* \
               gcaa*t115751*2.0+t115753*t115746*t115747+1.0)+(ccaa1*gamma_bb[index]*gcaa*t115751)/(gamma_bb[index]* \
               gcaa*t115751+1.0)+(ccaa4*t115750*t115748*t115749)/(gamma_bb[index]*gcaa*t115751*4.0+t115753*t115746* \
               t115747*6.0+t115750*t115748*t115749+gamma_bb[index]*gcaa*t115752*t115746*t115747*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t115752*t115746*t115747)/(gamma_bb[index]*gcaa*t115751*3.0+t115753*t115746*t115747*3.0+gamma_bb[index]* \
               gcaa*t115752*t115746*t115747+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t115755*(erf(pow(t115754,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t115755*(t115758-(omega*omega)*1.0/pow(t115754,2.0/ \
               3.0)*(t115758-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t115753*t115746*t115759)/(gamma_bb[index]* \
               gx*t115751*2.0+t115753*t115746*t115759+1.0)+(cx1*gamma_bb[index]*gx*t115751)/(gamma_bb[index]*gx*t115751+ \
               1.0)+(cx4*t115750*t115760*t115748)/(gamma_bb[index]*gx*t115751*4.0+t115750*t115760*t115748+t115753* \
               t115746*t115759*6.0+gamma_bb[index]*gx*t115752*t115746*t115759*4.0+1.0)+(cx3*gamma_bb[index]*gx*t115752* \
               t115746*t115759)/(gamma_bb[index]*gx*t115751*3.0+t115753*t115746*t115759*3.0+gamma_bb[index]*gx*t115752* \
               t115746*t115759+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t112118 = 1.0/pow(rho_a[index],1.0/3.0);
            double t112119 = c*t112118;
            double t112120 = sqrt(t112119);
            double t112121 = pow(t112119,3.0/2.0);
            double t112122 = c*c;
            double t112123 = 1.0/pow(rho_a[index],2.0/3.0);
            double t112124 = 1.0/c0p;
            double t112125 = b1p*t112120;
            double t112126 = b3p*t112121;
            double t112127 = b4p*t112122*t112123;
            double t112128 = b2p*c*t112118;
            double t112129 = t112125+t112126+t112127+t112128;
            double t112130 = 1.0/t112129;
            double t112131 = t112130*t112124*(1.0/2.0);
            double t112132 = t112131+1.0;
            double t112133 = log(t112132);
            double t112134 = a1p*c*t112118;
            double t112135 = t112134+1.0;
            double t112136 = gamma_aa[index]*gamma_aa[index];
            double t112137 = gcaa*gcaa;
            double t112138 = t112136*t112136;
            double t112139 = t112137*t112137;
            double t112140 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t112141 = 1.0/pow(rho_a[index],8.0/3.0);
            double t112142 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t112143 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t112144 = pow(2.0,1.0/3.0);
            double t112145 = t112144*2.0;
            double t112146 = t112145-2.0;
            double t112147 = two_13*2.0;
            double t112148 = t112147-2.0;
            double t112149 = 1.0/t112148;
            double t112150 = 1.0/c0f;
            double t112151 = b1f*t112120;
            double t112152 = b3f*t112121;
            double t112153 = b4f*t112122*t112123;
            double t112154 = b2f*c*t112118;
            double t112155 = t112151+t112152+t112153+t112154;
            double t112156 = 1.0/t112155;
            double t112157 = t112150*t112156*(1.0/2.0);
            double t112158 = t112157+1.0;
            double t112159 = log(t112158);
            double t112160 = a1f*c*t112118;
            double t112161 = t112160+1.0;
            double t112162 = c0f*t112161*t112159*2.0;
            double t112163 = c0p*t112133*t112135*2.0;
            double t112164 = 1.0/pow(rho_b[index],1.0/3.0);
            double t112165 = c*t112164;
            double t112166 = sqrt(t112165);
            double t112167 = pow(t112165,3.0/2.0);
            double t112168 = 1.0/pow(rho_b[index],2.0/3.0);
            double t112169 = b1p*t112166;
            double t112170 = b3p*t112167;
            double t112171 = b4p*t112122*t112168;
            double t112172 = b2p*c*t112164;
            double t112173 = t112170+t112171+t112172+t112169;
            double t112174 = 1.0/t112173;
            double t112175 = t112124*t112174*(1.0/2.0);
            double t112176 = t112175+1.0;
            double t112177 = log(t112176);
            double t112178 = a1p*c*t112164;
            double t112179 = t112178+1.0;
            double t112180 = c0p*t112177*t112179*2.0;
            double t112181 = rho_a[index]+rho_b[index];
            double t112182 = 1.0/pow(t112181,1.0/3.0);
            double t112183 = c*t112182;
            double t112184 = sqrt(t112183);
            double t112185 = pow(t112183,3.0/2.0);
            double t112186 = 1.0/pow(t112181,2.0/3.0);
            double t112187 = b1p*t112184;
            double t112188 = b3p*t112185;
            double t112189 = b4p*t112122*t112186;
            double t112190 = b2p*c*t112182;
            double t112191 = t112190+t112187+t112188+t112189;
            double t112192 = 1.0/t112191;
            double t112193 = t112124*t112192*(1.0/2.0);
            double t112194 = t112193+1.0;
            double t112195 = log(t112194);
            double t112196 = a1p*c*t112182;
            double t112197 = t112196+1.0;
            double t112198 = c0p*t112195*t112197*2.0;
            double t112199 = rho_a[index]-rho_b[index];
            double t112200 = t112199*t112199;
            double t112201 = 1.0/t112181;
            double t112202 = t112201*t112199;
            double t112203 = 1.0/(t112181*t112181*t112181*t112181);
            double t112204 = t112200*t112200;
            double t112205 = t112202+1.0;
            double t112206 = pow(t112205,4.0/3.0);
            double t112207 = -t112202+1.0;
            double t112208 = pow(t112207,4.0/3.0);
            double t112209 = t112206+t112208-2.0;
            double t112210 = gcab*gcab;
            double t112214 = gamma_aa[index]*t112141*(1.0/2.0);
            double t112215 = 1.0/pow(rho_b[index],8.0/3.0);
            double t112216 = gamma_bb[index]*t112215*(1.0/2.0);
            double t112211 = t112214+t112216;
            double t112212 = t112211*t112211;
            double t112213 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t112217 = t112210*t112210;
            double t112218 = t112212*t112212;
            double t112219 = t112210*t112212*6.0;
            double t112220 = gcab*t112210*t112211*t112212*4.0;
            double t112221 = t112217*t112218;
            double t112222 = gcab*t112211*4.0;
            double t112223 = t112220+t112221+t112222+t112219+1.0;
            double t112224 = gcab*t112211;
            double t112225 = t112224+1.0;
            double t112226 = t112210*t112212;
            double t112227 = gcab*t112211*2.0;
            double t112228 = t112226+t112227+1.0;
            double t112229 = t112210*t112212*3.0;
            double t112230 = gcab*t112210*t112211*t112212;
            double t112231 = gcab*t112211*3.0;
            double t112232 = t112230+t112231+t112229+1.0;
            double t112233 = 1.0/t112228;
            double t112234 = 1.0/t112232;
            double t112235 = 1.0/t112225;
            double t112236 = 1.0/t112223;
            double t112237 = 1.0/pow(t112181,4.0/3.0);
            double t112238 = b1f*t112184;
            double t112239 = b3f*t112185;
            double t112240 = b4f*t112122*t112186;
            double t112241 = b2f*c*t112182;
            double t112242 = t112240+t112241+t112238+t112239;
            double t112243 = 1.0/t112242;
            double t112244 = t112150*t112243*(1.0/2.0);
            double t112245 = t112244+1.0;
            double t112246 = log(t112245);
            double t112247 = a1f*c*t112182;
            double t112248 = t112247+1.0;
            double t112250 = c0f*t112246*t112248*2.0;
            double t112249 = -t112250+t112198;
            double t112251 = 1.0/(t112181*t112181);
            double t112279 = t112251*t112199;
            double t112252 = t112201-t112279;
            double t112253 = t112250-t112198;
            double t112254 = 1.0/pow(t112181,5.0/3.0);
            double t112255 = 1.0/sqrt(t112183);
            double t112256 = 1.0/t112194;
            double t112257 = 1.0/(t112191*t112191);
            double t112258 = b4p*t112122*t112254*(2.0/3.0);
            double t112259 = b2p*c*t112237*(1.0/3.0);
            double t112260 = b1p*c*t112237*t112255*(1.0/6.0);
            double t112261 = b3p*c*t112237*t112184*(1.0/2.0);
            double t112262 = t112260+t112261+t112258+t112259;
            double t112263 = t112262*t112256*t112257*t112197;
            double t112264 = 1.0/d2fz0;
            double t112265 = 1.0/Aa;
            double t112266 = b1a*t112184;
            double t112267 = b3a*t112185;
            double t112268 = b4a*t112122*t112186;
            double t112269 = b2a*c*t112182;
            double t112270 = t112266+t112267+t112268+t112269;
            double t112271 = 1.0/t112270;
            double t112272 = t112271*t112265*(1.0/2.0);
            double t112273 = t112272+1.0;
            double t112274 = log(t112273);
            double t112275 = a1a*c*t112182;
            double t112276 = t112275+1.0;
            double t112277 = 1.0/(t112181*t112181*t112181*t112181*t112181);
            double t112278 = pow(t112205,1.0/3.0);
            double t112280 = t112252*t112278*(4.0/3.0);
            double t112281 = pow(t112207,1.0/3.0);
            double t112282 = t112280-t112252*t112281*(4.0/3.0);
            double t112283 = t112203*t112204;
            double t112284 = t112283-1.0;
            double t112285 = 1.0/pow(rho_a[index],4.0/3.0);
            double t112286 = 1.0/pow(rho_a[index],5.0/3.0);
            double t112287 = 1.0/sqrt(t112119);
            double t112288 = 1.0/t112132;
            double t112289 = 1.0/(t112129*t112129);
            double t112290 = b4p*t112122*t112286*(2.0/3.0);
            double t112291 = b2p*c*t112285*(1.0/3.0);
            double t112292 = b1p*c*t112285*t112287*(1.0/6.0);
            double t112293 = b3p*c*t112120*t112285*(1.0/2.0);
            double t112294 = t112290+t112291+t112292+t112293;
            double t112295 = t112135*t112294*t112288*t112289;
            double t112296 = t112162-t112163;
            double t112297 = t112146*t112149*t112296;
            double t112298 = Aa*t112209*t112264*t112274*t112149*t112284*t112276*2.0;
            double t112299 = t112163+t112297;
            double t112300 = gamma_aa[index]*gcaa*t112141*4.0;
            double t112301 = gamma_aa[index]*gcaa*t112142*t112136*t112137*4.0;
            double t112302 = t112143*t112136*t112137*6.0;
            double t112303 = t112140*t112138*t112139;
            double t112304 = t112300+t112301+t112302+t112303+1.0;
            double t112305 = 1.0/t112304;
            double t112306 = gamma_aa[index]*gcaa*t112141;
            double t112307 = t112306+1.0;
            double t112308 = 1.0/t112307;
            double t112309 = gamma_aa[index]*gcaa*t112141*3.0;
            double t112310 = gamma_aa[index]*gcaa*t112142*t112136*t112137;
            double t112311 = t112143*t112136*t112137*3.0;
            double t112312 = t112310+t112311+t112309+1.0;
            double t112313 = 1.0/t112312;
            double t112314 = gamma_aa[index]*gcaa*t112141*2.0;
            double t112315 = t112143*t112136*t112137;
            double t112316 = t112314+t112315+1.0;
            double t112317 = 1.0/t112316;
            double t112318 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t112319 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t112320 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t112321 = 1.0/t112158;
            double t112322 = 1.0/(t112155*t112155);
            double t112323 = b4f*t112122*t112286*(2.0/3.0);
            double t112324 = b2f*c*t112285*(1.0/3.0);
            double t112325 = b1f*c*t112285*t112287*(1.0/6.0);
            double t112326 = b3f*c*t112120*t112285*(1.0/2.0);
            double t112327 = t112323+t112324+t112325+t112326;
            double t112328 = a1f*c*c0f*t112159*t112285*(2.0/3.0);
            double t112329 = a1p*c*c0p*t112133*t112285*(2.0/3.0);
            double t112330 = ccaa4*t112140*t112305*t112138*t112139;
            double t112331 = ccaa1*gamma_aa[index]*gcaa*t112141*t112308;
            double t112332 = ccaa3*gamma_aa[index]*gcaa*t112142*t112313*t112136*t112137;
            double t112333 = ccaa2*t112143*t112136*t112137*t112317;
            double t112334 = ccaa0+t112330+t112331+t112332+t112333;
            double t112335 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t112336 = 1.0/(omega*omega);
            double t112337 = pow(t112335,2.0/3.0);
            double t112340 = t112336*t112337;
            double t112338 = exp(-t112340);
            double t112339 = 1.0/pow(t112335,1.0/3.0);
            double t112341 = omega*omega;
            double t112342 = t112338-1.0;
            double t112343 = 1.0/pow(t112335,2.0/3.0);
            double t112344 = 1.0/pow(t112335,4.0/3.0);
            double t112345 = 1.0/omega;
            double t112353 = t112341*t112342*t112343*(1.0/2.0);
            double t112346 = -t112353+t112338;
            double t112347 = gx*gx;
            double t112348 = t112347*t112347;
            double t112349 = pow(t112335,1.0/3.0);
            double t112350 = t112345*t112349;
            double t112351 = erf(t112350);
            double t112352 = t112351*(3.991211251234741E15/2.251799813685248E15);
            double t112354 = omega*t112346*t112339;
            double t112355 = t112352+t112354;
            double t112356 = gamma_aa[index]*gx*t112141*4.0;
            double t112357 = gamma_aa[index]*gx*t112142*t112136*t112347*4.0;
            double t112358 = t112143*t112136*t112347*6.0;
            double t112359 = t112140*t112138*t112348;
            double t112360 = t112356+t112357+t112358+t112359+1.0;
            double t112361 = 1.0/t112360;
            double t112362 = cx4*t112140*t112361*t112138*t112348;
            double t112363 = gamma_aa[index]*gx*t112141;
            double t112364 = t112363+1.0;
            double t112365 = 1.0/t112364;
            double t112366 = cx1*gamma_aa[index]*gx*t112141*t112365;
            double t112367 = gamma_aa[index]*gx*t112141*3.0;
            double t112368 = gamma_aa[index]*gx*t112142*t112136*t112347;
            double t112369 = t112143*t112136*t112347*3.0;
            double t112370 = t112367+t112368+t112369+1.0;
            double t112371 = 1.0/t112370;
            double t112372 = cx3*gamma_aa[index]*gx*t112142*t112136*t112371*t112347;
            double t112373 = gamma_aa[index]*gx*t112141*2.0;
            double t112374 = t112143*t112136*t112347;
            double t112375 = t112373+t112374+1.0;
            double t112376 = 1.0/t112375;
            double t112377 = cx2*t112143*t112136*t112347*t112376;
            double t112378 = cx0+t112362+t112372+t112366+t112377;
            double t112379 = pow(rho_a[index],4.0/3.0);
            double t112380 = omega*t112355*t112339*(4.0/3.0);
            double t112381 = t112380-1.0;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t112211*t112235+ccab2*t112210*t112212*t112233+ccab4*t112217* \
               t112218*t112236+ccab3*gcab*t112210*t112211*t112212*t112234)*(-t112163+t112198-t112297+t112298+rho_a[index]* \
               (t112329-t112295+t112146*t112149*(t112328+t112295-t112321*t112322*t112161*t112327-a1p*c*c0p*t112133* \
               t112285*(2.0/3.0)))-t112181*(-t112263+t112203*t112204*t112209*t112149*(t112263-(1.0/(t112242*t112242) \
               *t112248*(b2f*c*t112237*(1.0/3.0)+b4f*t112122*t112254*(2.0/3.0)+b1f*c*t112237*t112255*(1.0/6.0)+b3f* \
               c*t112237*t112184*(1.0/2.0)))/t112245+a1f*c*c0f*t112237*t112246*(2.0/3.0)-a1p*c*c0p*t112237*t112195* \
               (2.0/3.0))+a1p*c*c0p*t112237*t112195*(2.0/3.0)-t112203*t112204*t112253*t112282*t112149+t112204*t112253* \
               t112209*t112149*t112277*4.0+t112200*t112203*t112209*t112149*t112249*t112199*4.0+Aa*t112209*t112264* \
               t112274*t112149*t112276*(t112204*t112277*4.0-t112200*t112203*t112199*4.0)*2.0-Aa*t112264*t112282*t112274* \
               t112149*t112284*t112276*2.0-(1.0/(t112270*t112270)*t112209*t112264*t112149*t112284*t112276*(b2a*c* \
               t112237*(1.0/3.0)+b4a*t112122*t112254*(2.0/3.0)+b1a*c*t112237*t112255*(1.0/6.0)+b3a*c*t112237*t112184* \
               (1.0/2.0)))/t112273+Aa*a1a*c*t112209*t112237*t112264*t112274*t112149*t112284*(2.0/3.0))+t112203*t112204* \
               t112253*t112209*t112149)-t112334*(t112163+t112146*t112149*(t112162-c0p*t112133*t112135*2.0))-(rho_a[index]* \
               t112299+rho_b[index]*(t112180-t112146*t112149*(t112180-c0f*log((t112150*(1.0/2.0))/(b1f*t112166+b3f* \
               t112167+b2f*c*t112164+b4f*t112122*t112168)+1.0)*(a1f*c*t112164+1.0)*2.0))-t112181*(t112198+t112298- \
               t112203*t112204*t112209*t112149*t112249))*(ccab1*gamma_aa[index]*gcab*t112213*t112235*(4.0/3.0)-ccab2* \
               t112210*t112212*1.0/(t112228*t112228)*(gamma_aa[index]*gcab*t112213*(8.0/3.0)+gamma_aa[index]*t112210* \
               t112211*t112213*(8.0/3.0))-ccab4*1.0/(t112223*t112223)*t112217*t112218*(gamma_aa[index]*gcab*t112213* \
               (1.6E1/3.0)+gamma_aa[index]*t112210*t112211*t112213*1.6E1+gamma_aa[index]*gcab*t112210*t112212*t112213* \
               1.6E1+gamma_aa[index]*t112211*t112212*t112213*t112217*(1.6E1/3.0))-ccab1*gamma_aa[index]*t112210*t112211* \
               t112213*1.0/(t112225*t112225)*(4.0/3.0)+ccab2*gamma_aa[index]*t112210*t112211*t112213*t112233*(8.0/ \
               3.0)-ccab3*gcab*t112210*t112211*t112212*1.0/(t112232*t112232)*(gamma_aa[index]*gcab*t112213*4.0+gamma_aa[index]* \
               t112210*t112211*t112213*8.0+gamma_aa[index]*gcab*t112210*t112212*t112213*4.0)+ccab3*gamma_aa[index]* \
               gcab*t112210*t112212*t112213*t112234*4.0+ccab4*gamma_aa[index]*t112211*t112212*t112213*t112217*t112236* \
               (1.6E1/3.0))+rho_a[index]*t112299*(ccaa1*gamma_aa[index]*gcaa*t112213*t112308*(8.0/3.0)+ccaa4*t112320* \
               t112305*t112138*t112139*(3.2E1/3.0)+ccaa2*t112136*t112137*t112317*t112318*(1.6E1/3.0)-ccaa1*t112136* \
               1.0/(t112307*t112307)*t112137*t112318*(8.0/3.0)-ccaa2*t112143*t112136*1.0/(t112316*t112316)*t112137* \
               (gamma_aa[index]*gcaa*t112213*(1.6E1/3.0)+t112136*t112137*t112318*(1.6E1/3.0))-ccaa4*t112140*1.0/(t112304* \
               t112304)*t112138*t112139*(gamma_aa[index]*gcaa*t112213*(3.2E1/3.0)+t112320*t112138*t112139*(3.2E1/ \
               3.0)+t112136*t112137*t112318*3.2E1+gamma_aa[index]*gcaa*t112136*t112137*t112319*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t112313*t112136*t112137*t112319*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t112312*t112312)*t112142* \
               t112136*t112137*(gamma_aa[index]*gcaa*t112213*8.0+t112136*t112137*t112318*1.6E1+gamma_aa[index]*gcaa* \
               t112136*t112137*t112319*8.0))+rho_a[index]*t112334*(t112329-t112295+t112146*t112149*(t112328-t112329+ \
               t112295-t112321*t112322*t112161*t112327))-c0*t112378*t112379*(omega*t112339*(omega*t112344*t112346* \
               (-2.778046668940015E15/1.40737488355328E14)+omega*t112339*((t112338*(1.0/3.0))/rho_a[index]+t112341* \
               t112342*1.0/pow(t112335,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14)-t112336*t112338*t112339* \
               (2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t112343*t112345*t112338*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)-omega*t112344*t112355*(2.778046668940015E15/1.05553116266496E14)) \
               -c0*pow(rho_a[index],1.0/3.0)*t112381*t112378*(4.0/3.0)+c0*t112381*t112379*(cx1*gamma_aa[index]*gx* \
               t112213*t112365*(8.0/3.0)+cx2*t112136*t112318*t112347*t112376*(1.6E1/3.0)+cx4*t112320*t112361*t112138* \
               t112348*(3.2E1/3.0)-cx1*t112136*t112318*1.0/(t112364*t112364)*t112347*(8.0/3.0)-cx2*t112143*t112136* \
               t112347*1.0/(t112375*t112375)*(gamma_aa[index]*gx*t112213*(1.6E1/3.0)+t112136*t112318*t112347*(1.6E1/ \
               3.0))-cx4*t112140*1.0/(t112360*t112360)*t112138*t112348*(gamma_aa[index]*gx*t112213*(3.2E1/3.0)+t112320* \
               t112138*t112348*(3.2E1/3.0)+t112136*t112318*t112347*3.2E1+gamma_aa[index]*gx*t112136*t112319*t112347* \
               3.2E1)+cx3*gamma_aa[index]*gx*t112136*t112371*t112319*t112347*8.0-cx3*gamma_aa[index]*gx*t112142*t112136* \
               1.0/(t112370*t112370)*t112347*(gamma_aa[index]*gx*t112213*8.0+t112136*t112318*t112347*1.6E1+gamma_aa[index]* \
               gx*t112136*t112319*t112347*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t116517 = 1.0/pow(rho_a[index],1.0/3.0);
            double t116518 = c*t116517;
            double t116519 = sqrt(t116518);
            double t116520 = pow(t116518,3.0/2.0);
            double t116521 = c*c;
            double t116522 = 1.0/pow(rho_a[index],2.0/3.0);
            double t116523 = 1.0/c0p;
            double t116524 = b1p*t116519;
            double t116525 = b3p*t116520;
            double t116526 = b4p*t116521*t116522;
            double t116527 = b2p*c*t116517;
            double t116528 = t116524+t116525+t116526+t116527;
            double t116529 = 1.0/t116528;
            double t116530 = t116523*t116529*(1.0/2.0);
            double t116531 = t116530+1.0;
            double t116532 = log(t116531);
            double t116533 = a1p*c*t116517;
            double t116534 = t116533+1.0;
            double t116535 = gamma_aa[index]*gamma_aa[index];
            double t116536 = gcaa*gcaa;
            double t116537 = t116535*t116535;
            double t116538 = t116536*t116536;
            double t116539 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t116540 = 1.0/pow(rho_a[index],8.0/3.0);
            double t116541 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t116542 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t116543 = pow(2.0,1.0/3.0);
            double t116544 = t116543*2.0;
            double t116545 = t116544-2.0;
            double t116546 = two_13*2.0;
            double t116547 = t116546-2.0;
            double t116548 = 1.0/t116547;
            double t116549 = 1.0/c0f;
            double t116550 = b1f*t116519;
            double t116551 = b3f*t116520;
            double t116552 = b4f*t116521*t116522;
            double t116553 = b2f*c*t116517;
            double t116554 = t116550+t116551+t116552+t116553;
            double t116555 = 1.0/t116554;
            double t116556 = t116555*t116549*(1.0/2.0);
            double t116557 = t116556+1.0;
            double t116558 = log(t116557);
            double t116559 = a1f*c*t116517;
            double t116560 = t116559+1.0;
            double t116561 = c0f*t116560*t116558*2.0;
            double t116562 = c0p*t116532*t116534*2.0;
            double t116563 = gamma_aa[index]*gcaa*t116540*4.0;
            double t116564 = gamma_aa[index]*gcaa*t116541*t116535*t116536*4.0;
            double t116565 = t116542*t116535*t116536*6.0;
            double t116566 = t116537*t116538*t116539;
            double t116567 = t116563+t116564+t116565+t116566+1.0;
            double t116568 = 1.0/t116567;
            double t116569 = gamma_aa[index]*gcaa*t116540;
            double t116570 = t116569+1.0;
            double t116571 = 1.0/t116570;
            double t116572 = gamma_aa[index]*gcaa*t116540*3.0;
            double t116573 = gamma_aa[index]*gcaa*t116541*t116535*t116536;
            double t116574 = t116542*t116535*t116536*3.0;
            double t116575 = t116572+t116573+t116574+1.0;
            double t116576 = 1.0/t116575;
            double t116577 = gamma_aa[index]*gcaa*t116540*2.0;
            double t116578 = t116542*t116535*t116536;
            double t116579 = t116577+t116578+1.0;
            double t116580 = 1.0/t116579;
            double t116581 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t116582 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t116583 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t116584 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t116585 = 1.0/pow(rho_a[index],4.0/3.0);
            double t116586 = 1.0/pow(rho_a[index],5.0/3.0);
            double t116587 = 1.0/sqrt(t116518);
            double t116588 = 1.0/t116531;
            double t116589 = 1.0/(t116528*t116528);
            double t116590 = b4p*t116521*t116586*(2.0/3.0);
            double t116591 = b2p*c*t116585*(1.0/3.0);
            double t116592 = b1p*c*t116585*t116587*(1.0/6.0);
            double t116593 = b3p*c*t116519*t116585*(1.0/2.0);
            double t116594 = t116590+t116591+t116592+t116593;
            double t116595 = t116534*t116594*t116588*t116589;
            double t116596 = ccaa4*t116537*t116538*t116539*t116568;
            double t116597 = ccaa1*gamma_aa[index]*gcaa*t116540*t116571;
            double t116598 = ccaa3*gamma_aa[index]*gcaa*t116541*t116535*t116536*t116576;
            double t116599 = ccaa2*t116542*t116535*t116580*t116536;
            double t116600 = ccaa0+t116596+t116597+t116598+t116599;
            double t116601 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t116602 = 1.0/(omega*omega);
            double t116603 = pow(t116601,2.0/3.0);
            double t116606 = t116602*t116603;
            double t116604 = exp(-t116606);
            double t116605 = 1.0/pow(t116601,1.0/3.0);
            double t116607 = omega*omega;
            double t116608 = t116604-1.0;
            double t116609 = 1.0/pow(t116601,2.0/3.0);
            double t116610 = 1.0/pow(t116601,4.0/3.0);
            double t116611 = 1.0/omega;
            double t116619 = t116607*t116608*t116609*(1.0/2.0);
            double t116612 = t116604-t116619;
            double t116613 = gx*gx;
            double t116614 = t116613*t116613;
            double t116615 = pow(t116601,1.0/3.0);
            double t116616 = t116611*t116615;
            double t116617 = erf(t116616);
            double t116618 = t116617*(3.991211251234741E15/2.251799813685248E15);
            double t116620 = omega*t116612*t116605;
            double t116621 = t116620+t116618;
            double t116622 = gamma_aa[index]*gx*t116540*4.0;
            double t116623 = gamma_aa[index]*gx*t116541*t116613*t116535*4.0;
            double t116624 = t116613*t116542*t116535*6.0;
            double t116625 = t116614*t116537*t116539;
            double t116626 = t116622+t116623+t116624+t116625+1.0;
            double t116627 = 1.0/t116626;
            double t116628 = cx4*t116614*t116537*t116627*t116539;
            double t116629 = gamma_aa[index]*gx*t116540;
            double t116630 = t116629+1.0;
            double t116631 = 1.0/t116630;
            double t116632 = cx1*gamma_aa[index]*gx*t116540*t116631;
            double t116633 = gamma_aa[index]*gx*t116540*3.0;
            double t116634 = gamma_aa[index]*gx*t116541*t116613*t116535;
            double t116635 = t116613*t116542*t116535*3.0;
            double t116636 = t116633+t116634+t116635+1.0;
            double t116637 = 1.0/t116636;
            double t116638 = cx3*gamma_aa[index]*gx*t116541*t116613*t116535*t116637;
            double t116639 = gamma_aa[index]*gx*t116540*2.0;
            double t116640 = t116613*t116542*t116535;
            double t116641 = t116640+t116639+1.0;
            double t116642 = 1.0/t116641;
            double t116643 = cx2*t116613*t116542*t116642*t116535;
            double t116644 = cx0+t116632+t116643+t116628+t116638;
            double t116645 = pow(rho_a[index],4.0/3.0);
            double t116646 = omega*t116621*t116605*(4.0/3.0);
            double t116647 = t116646-1.0;
            v_rho_a_[index] = -t116600*(t116562+t116545*t116548*(t116561-c0p*t116532*t116534*2.0))+rho_a[index]* \
               t116600*(-t116595+t116545*t116548*(t116595-(t116560*1.0/(t116554*t116554)*(b2f*c*t116585*(1.0/3.0) \
               +b4f*t116521*t116586*(2.0/3.0)+b1f*c*t116585*t116587*(1.0/6.0)+b3f*c*t116519*t116585*(1.0/2.0)))/t116557+ \
               a1f*c*c0f*t116558*t116585*(2.0/3.0)-a1p*c*c0p*t116532*t116585*(2.0/3.0))+a1p*c*c0p*t116532*t116585* \
               (2.0/3.0))+rho_a[index]*(t116562+t116545*t116548*(t116561-t116562))*(ccaa1*gamma_aa[index]*gcaa*t116571* \
               t116582*(8.0/3.0)+ccaa2*t116535*t116580*t116536*t116581*(1.6E1/3.0)+ccaa4*t116537*t116538*t116584* \
               t116568*(3.2E1/3.0)-ccaa1*1.0/(t116570*t116570)*t116535*t116536*t116581*(8.0/3.0)-ccaa2*t116542*t116535* \
               t116536*1.0/(t116579*t116579)*(gamma_aa[index]*gcaa*t116582*(1.6E1/3.0)+t116535*t116536*t116581*(1.6E1/ \
               3.0))-ccaa4*t116537*t116538*t116539*1.0/(t116567*t116567)*(gamma_aa[index]*gcaa*t116582*(3.2E1/3.0) \
               +t116535*t116536*t116581*3.2E1+t116537*t116538*t116584*(3.2E1/3.0)+gamma_aa[index]*gcaa*t116535*t116536* \
               t116583*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t116535*t116536*t116583*t116576*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t116541*t116535*t116536*1.0/(t116575*t116575)*(gamma_aa[index]*gcaa*t116582*8.0+t116535*t116536* \
               t116581*1.6E1+gamma_aa[index]*gcaa*t116535*t116536*t116583*8.0))-c0*t116644*t116645*(omega*t116605* \
               (omega*t116610*t116612*(-2.778046668940015E15/1.40737488355328E14)+omega*t116605*((t116604*(1.0/3.0) \
               )/rho_a[index]+1.0/pow(t116601,5.0/3.0)*t116607*t116608*(2.778046668940015E15/1.40737488355328E14) \
               -t116602*t116604*t116605*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t116611* \
               t116604*t116609*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t116610*t116621*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_a[index],1.0/3.0)*t116644*t116647*(4.0/3.0)+c0*t116645*t116647*(cx1* \
               gamma_aa[index]*gx*t116631*t116582*(8.0/3.0)+cx2*t116613*t116642*t116535*t116581*(1.6E1/3.0)+cx4*t116614* \
               t116537*t116627*t116584*(3.2E1/3.0)-cx1*1.0/(t116630*t116630)*t116613*t116535*t116581*(8.0/3.0)-cx2* \
               t116613*t116542*1.0/(t116641*t116641)*t116535*(gamma_aa[index]*gx*t116582*(1.6E1/3.0)+t116613*t116535* \
               t116581*(1.6E1/3.0))-cx4*t116614*1.0/(t116626*t116626)*t116537*t116539*(gamma_aa[index]*gx*t116582* \
               (3.2E1/3.0)+t116613*t116535*t116581*3.2E1+t116614*t116537*t116584*(3.2E1/3.0)+gamma_aa[index]*gx*t116613* \
               t116535*t116583*3.2E1)+cx3*gamma_aa[index]*gx*t116613*t116535*t116583*t116637*8.0-cx3*gamma_aa[index]* \
               gx*t116541*t116613*t116535*1.0/(t116636*t116636)*(gamma_aa[index]*gx*t116582*8.0+t116613*t116535*t116581* \
               1.6E1+gamma_aa[index]*gx*t116613*t116535*t116583*8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t112383 = 1.0/pow(rho_b[index],1.0/3.0);
            double t112384 = c*t112383;
            double t112385 = sqrt(t112384);
            double t112386 = pow(t112384,3.0/2.0);
            double t112387 = c*c;
            double t112388 = 1.0/pow(rho_b[index],2.0/3.0);
            double t112389 = 1.0/c0p;
            double t112390 = b1p*t112385;
            double t112391 = b3p*t112386;
            double t112392 = b4p*t112387*t112388;
            double t112393 = b2p*c*t112383;
            double t112394 = t112390+t112391+t112392+t112393;
            double t112395 = 1.0/t112394;
            double t112396 = t112395*t112389*(1.0/2.0);
            double t112397 = t112396+1.0;
            double t112398 = log(t112397);
            double t112399 = a1p*c*t112383;
            double t112400 = t112399+1.0;
            double t112401 = gamma_bb[index]*gamma_bb[index];
            double t112402 = gcaa*gcaa;
            double t112403 = t112401*t112401;
            double t112404 = t112402*t112402;
            double t112405 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t112406 = 1.0/pow(rho_b[index],8.0/3.0);
            double t112407 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t112408 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t112409 = pow(2.0,1.0/3.0);
            double t112410 = t112409*2.0;
            double t112411 = t112410-2.0;
            double t112412 = two_13*2.0;
            double t112413 = t112412-2.0;
            double t112414 = 1.0/t112413;
            double t112415 = 1.0/c0f;
            double t112416 = 1.0/pow(rho_a[index],1.0/3.0);
            double t112417 = c*t112416;
            double t112418 = sqrt(t112417);
            double t112419 = pow(t112417,3.0/2.0);
            double t112420 = 1.0/pow(rho_a[index],2.0/3.0);
            double t112421 = b1p*t112418;
            double t112422 = b3p*t112419;
            double t112423 = b4p*t112420*t112387;
            double t112424 = b2p*c*t112416;
            double t112425 = t112421+t112422+t112423+t112424;
            double t112426 = 1.0/t112425;
            double t112427 = t112426*t112389*(1.0/2.0);
            double t112428 = t112427+1.0;
            double t112429 = log(t112428);
            double t112430 = a1p*c*t112416;
            double t112431 = t112430+1.0;
            double t112432 = c0p*t112431*t112429*2.0;
            double t112433 = b1f*t112385;
            double t112434 = b3f*t112386;
            double t112435 = b4f*t112387*t112388;
            double t112436 = b2f*c*t112383;
            double t112437 = t112433+t112434+t112435+t112436;
            double t112438 = 1.0/t112437;
            double t112439 = t112415*t112438*(1.0/2.0);
            double t112440 = t112439+1.0;
            double t112441 = log(t112440);
            double t112442 = a1f*c*t112383;
            double t112443 = t112442+1.0;
            double t112444 = c0f*t112441*t112443*2.0;
            double t112445 = c0p*t112400*t112398*2.0;
            double t112446 = rho_a[index]+rho_b[index];
            double t112447 = 1.0/pow(t112446,1.0/3.0);
            double t112448 = c*t112447;
            double t112449 = sqrt(t112448);
            double t112450 = pow(t112448,3.0/2.0);
            double t112451 = 1.0/pow(t112446,2.0/3.0);
            double t112452 = b1p*t112449;
            double t112453 = b3p*t112450;
            double t112454 = b4p*t112451*t112387;
            double t112455 = b2p*c*t112447;
            double t112456 = t112452+t112453+t112454+t112455;
            double t112457 = 1.0/t112456;
            double t112458 = t112457*t112389*(1.0/2.0);
            double t112459 = t112458+1.0;
            double t112460 = log(t112459);
            double t112461 = a1p*c*t112447;
            double t112462 = t112461+1.0;
            double t112463 = c0p*t112460*t112462*2.0;
            double t112464 = rho_a[index]-rho_b[index];
            double t112465 = t112464*t112464;
            double t112466 = 1.0/t112446;
            double t112467 = t112464*t112466;
            double t112468 = 1.0/(t112446*t112446*t112446*t112446);
            double t112469 = t112465*t112465;
            double t112470 = t112467+1.0;
            double t112471 = pow(t112470,4.0/3.0);
            double t112472 = -t112467+1.0;
            double t112473 = pow(t112472,4.0/3.0);
            double t112474 = t112471+t112473-2.0;
            double t112475 = gcab*gcab;
            double t112479 = 1.0/pow(rho_a[index],8.0/3.0);
            double t112480 = gamma_aa[index]*t112479*(1.0/2.0);
            double t112481 = gamma_bb[index]*t112406*(1.0/2.0);
            double t112476 = t112480+t112481;
            double t112477 = t112476*t112476;
            double t112478 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t112482 = t112475*t112475;
            double t112483 = t112477*t112477;
            double t112484 = t112475*t112477*6.0;
            double t112485 = gcab*t112475*t112476*t112477*4.0;
            double t112486 = t112482*t112483;
            double t112487 = gcab*t112476*4.0;
            double t112488 = t112484+t112485+t112486+t112487+1.0;
            double t112489 = gcab*t112476;
            double t112490 = t112489+1.0;
            double t112491 = t112475*t112477;
            double t112492 = gcab*t112476*2.0;
            double t112493 = t112491+t112492+1.0;
            double t112494 = t112475*t112477*3.0;
            double t112495 = gcab*t112475*t112476*t112477;
            double t112496 = gcab*t112476*3.0;
            double t112497 = t112494+t112495+t112496+1.0;
            double t112498 = 1.0/t112493;
            double t112499 = 1.0/t112497;
            double t112500 = 1.0/t112490;
            double t112501 = 1.0/t112488;
            double t112502 = 1.0/pow(t112446,4.0/3.0);
            double t112503 = b1f*t112449;
            double t112504 = b3f*t112450;
            double t112505 = b4f*t112451*t112387;
            double t112506 = b2f*c*t112447;
            double t112507 = t112503+t112504+t112505+t112506;
            double t112508 = 1.0/t112507;
            double t112509 = t112415*t112508*(1.0/2.0);
            double t112510 = t112509+1.0;
            double t112511 = log(t112510);
            double t112512 = a1f*c*t112447;
            double t112513 = t112512+1.0;
            double t112515 = c0f*t112511*t112513*2.0;
            double t112514 = -t112515+t112463;
            double t112516 = 1.0/(t112446*t112446);
            double t112517 = t112516*t112464;
            double t112518 = t112517+t112466;
            double t112519 = t112515-t112463;
            double t112520 = 1.0/pow(t112446,5.0/3.0);
            double t112521 = 1.0/sqrt(t112448);
            double t112522 = 1.0/t112459;
            double t112523 = 1.0/(t112456*t112456);
            double t112524 = b4p*t112520*t112387*(2.0/3.0);
            double t112525 = b2p*c*t112502*(1.0/3.0);
            double t112526 = b1p*c*t112502*t112521*(1.0/6.0);
            double t112527 = b3p*c*t112502*t112449*(1.0/2.0);
            double t112528 = t112524+t112525+t112526+t112527;
            double t112529 = 1.0/d2fz0;
            double t112530 = 1.0/Aa;
            double t112531 = b1a*t112449;
            double t112532 = b3a*t112450;
            double t112533 = b4a*t112451*t112387;
            double t112534 = b2a*c*t112447;
            double t112535 = t112531+t112532+t112533+t112534;
            double t112536 = 1.0/t112535;
            double t112537 = t112530*t112536*(1.0/2.0);
            double t112538 = t112537+1.0;
            double t112539 = log(t112538);
            double t112540 = a1a*c*t112447;
            double t112541 = t112540+1.0;
            double t112542 = 1.0/(t112446*t112446*t112446*t112446*t112446);
            double t112543 = pow(t112470,1.0/3.0);
            double t112544 = t112543*t112518*(4.0/3.0);
            double t112545 = pow(t112472,1.0/3.0);
            double t112546 = t112544-t112518*t112545*(4.0/3.0);
            double t112547 = t112468*t112469;
            double t112548 = t112547-1.0;
            double t112549 = 1.0/pow(rho_b[index],4.0/3.0);
            double t112550 = 1.0/pow(rho_b[index],5.0/3.0);
            double t112551 = 1.0/sqrt(t112384);
            double t112552 = 1.0/t112397;
            double t112553 = 1.0/(t112394*t112394);
            double t112554 = b4p*t112550*t112387*(2.0/3.0);
            double t112555 = b2p*c*t112549*(1.0/3.0);
            double t112556 = b1p*c*t112551*t112549*(1.0/6.0);
            double t112557 = b3p*c*t112385*t112549*(1.0/2.0);
            double t112558 = t112554+t112555+t112556+t112557;
            double t112559 = t112400*t112552*t112553*t112558;
            double t112560 = t112444-t112445;
            double t112561 = t112411*t112414*t112560;
            double t112562 = Aa*t112414*t112541*t112474*t112529*t112539*t112548*2.0;
            double t112563 = a1p*c*c0p*t112502*t112460*(2.0/3.0);
            double t112564 = t112561+t112445;
            double t112565 = gamma_bb[index]*gcaa*t112406*4.0;
            double t112566 = gamma_bb[index]*gcaa*t112401*t112402*t112407*4.0;
            double t112567 = t112401*t112402*t112408*6.0;
            double t112568 = t112403*t112404*t112405;
            double t112569 = t112565+t112566+t112567+t112568+1.0;
            double t112570 = 1.0/t112569;
            double t112571 = gamma_bb[index]*gcaa*t112406;
            double t112572 = t112571+1.0;
            double t112573 = 1.0/t112572;
            double t112574 = gamma_bb[index]*gcaa*t112406*3.0;
            double t112575 = gamma_bb[index]*gcaa*t112401*t112402*t112407;
            double t112576 = t112401*t112402*t112408*3.0;
            double t112577 = t112574+t112575+t112576+1.0;
            double t112578 = 1.0/t112577;
            double t112579 = gamma_bb[index]*gcaa*t112406*2.0;
            double t112580 = t112401*t112402*t112408;
            double t112581 = t112580+t112579+1.0;
            double t112582 = 1.0/t112581;
            double t112583 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t112584 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t112585 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t112586 = 1.0/t112440;
            double t112587 = 1.0/(t112437*t112437);
            double t112588 = b4f*t112550*t112387*(2.0/3.0);
            double t112589 = b2f*c*t112549*(1.0/3.0);
            double t112590 = b1f*c*t112551*t112549*(1.0/6.0);
            double t112591 = b3f*c*t112385*t112549*(1.0/2.0);
            double t112592 = t112590+t112591+t112588+t112589;
            double t112593 = a1f*c*c0f*t112441*t112549*(2.0/3.0);
            double t112594 = a1p*c*c0p*t112549*t112398*(2.0/3.0);
            double t112595 = ccaa4*t112403*t112404*t112405*t112570;
            double t112596 = ccaa1*gamma_bb[index]*gcaa*t112406*t112573;
            double t112597 = ccaa3*gamma_bb[index]*gcaa*t112401*t112402*t112407*t112578;
            double t112598 = ccaa2*t112401*t112402*t112408*t112582;
            double t112599 = ccaa0+t112595+t112596+t112597+t112598;
            double t112600 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t112601 = 1.0/(omega*omega);
            double t112602 = pow(t112600,2.0/3.0);
            double t112605 = t112601*t112602;
            double t112603 = exp(-t112605);
            double t112604 = 1.0/pow(t112600,1.0/3.0);
            double t112606 = omega*omega;
            double t112607 = t112603-1.0;
            double t112608 = 1.0/pow(t112600,2.0/3.0);
            double t112609 = 1.0/pow(t112600,4.0/3.0);
            double t112610 = 1.0/omega;
            double t112618 = t112606*t112607*t112608*(1.0/2.0);
            double t112611 = t112603-t112618;
            double t112612 = gx*gx;
            double t112613 = t112612*t112612;
            double t112614 = pow(t112600,1.0/3.0);
            double t112615 = t112610*t112614;
            double t112616 = erf(t112615);
            double t112617 = t112616*(3.991211251234741E15/2.251799813685248E15);
            double t112619 = omega*t112611*t112604;
            double t112620 = t112617+t112619;
            double t112621 = gamma_bb[index]*gx*t112406*4.0;
            double t112622 = gamma_bb[index]*gx*t112401*t112612*t112407*4.0;
            double t112623 = t112401*t112612*t112408*6.0;
            double t112624 = t112403*t112405*t112613;
            double t112625 = t112621+t112622+t112623+t112624+1.0;
            double t112626 = 1.0/t112625;
            double t112627 = cx4*t112403*t112405*t112613*t112626;
            double t112628 = gamma_bb[index]*gx*t112406;
            double t112629 = t112628+1.0;
            double t112630 = 1.0/t112629;
            double t112631 = cx1*gamma_bb[index]*gx*t112630*t112406;
            double t112632 = gamma_bb[index]*gx*t112406*3.0;
            double t112633 = gamma_bb[index]*gx*t112401*t112612*t112407;
            double t112634 = t112401*t112612*t112408*3.0;
            double t112635 = t112632+t112633+t112634+1.0;
            double t112636 = 1.0/t112635;
            double t112637 = cx3*gamma_bb[index]*gx*t112401*t112612*t112407*t112636;
            double t112638 = gamma_bb[index]*gx*t112406*2.0;
            double t112639 = t112401*t112612*t112408;
            double t112640 = t112638+t112639+1.0;
            double t112641 = 1.0/t112640;
            double t112642 = cx2*t112401*t112612*t112641*t112408;
            double t112643 = cx0+t112631+t112642+t112627+t112637;
            double t112644 = pow(rho_b[index],4.0/3.0);
            double t112645 = omega*t112620*t112604*(4.0/3.0);
            double t112646 = t112645-1.0;
            v_rho_b_[index] = -t112599*(t112445+t112411*t112414*(t112444-c0p*t112400*t112398*2.0))-(ccab0+ccab1* \
               gcab*t112500*t112476+ccab4*t112501*t112482*t112483+ccab2*t112475*t112477*t112498+ccab3*gcab*t112475* \
               t112476*t112477*t112499)*(-t112561-t112445+t112463+t112562+rho_b[index]*(t112594-t112559+t112411*t112414* \
               (t112593+t112559-t112443*t112592*t112586*t112587-a1p*c*c0p*t112549*t112398*(2.0/3.0)))-t112446*(t112563- \
               t112522*t112523*t112462*t112528+t112414*t112542*t112474*t112519*t112469*4.0+t112414*t112519*t112546* \
               t112468*t112469-t112414*t112474*t112468*t112469*(t112563-t112522*t112523*t112462*t112528+(t112513* \
               1.0/(t112507*t112507)*(b2f*c*t112502*(1.0/3.0)+b4f*t112520*t112387*(2.0/3.0)+b1f*c*t112502*t112521* \
               (1.0/6.0)+b3f*c*t112502*t112449*(1.0/2.0)))/t112510-a1f*c*c0f*t112502*t112511*(2.0/3.0))-t112414*t112514* \
               t112464*t112465*t112474*t112468*4.0+Aa*t112414*t112541*t112474*t112529*t112539*(t112542*t112469*4.0+ \
               t112464*t112465*t112468*4.0)*2.0+Aa*t112414*t112541*t112546*t112529*t112539*t112548*2.0-(t112414*t112541* \
               1.0/(t112535*t112535)*t112474*t112529*t112548*(b2a*c*t112502*(1.0/3.0)+b4a*t112520*t112387*(2.0/3.0) \
               +b1a*c*t112502*t112521*(1.0/6.0)+b3a*c*t112502*t112449*(1.0/2.0)))/t112538+Aa*a1a*c*t112502*t112414* \
               t112474*t112529*t112539*t112548*(2.0/3.0))+t112414*t112474*t112519*t112468*t112469)-(rho_b[index]* \
               t112564+rho_a[index]*(t112432-t112411*t112414*(t112432-c0f*log((t112415*(1.0/2.0))/(b1f*t112418+b3f* \
               t112419+b2f*c*t112416+b4f*t112420*t112387)+1.0)*(a1f*c*t112416+1.0)*2.0))-t112446*(t112463+t112562- \
               t112414*t112514*t112474*t112468*t112469))*(ccab1*gamma_bb[index]*gcab*t112500*t112478*(4.0/3.0)-ccab2* \
               t112475*1.0/(t112493*t112493)*t112477*(gamma_bb[index]*gcab*t112478*(8.0/3.0)+gamma_bb[index]*t112475* \
               t112476*t112478*(8.0/3.0))-ccab4*t112482*t112483*1.0/(t112488*t112488)*(gamma_bb[index]*gcab*t112478* \
               (1.6E1/3.0)+gamma_bb[index]*t112475*t112476*t112478*1.6E1+gamma_bb[index]*gcab*t112475*t112477*t112478* \
               1.6E1+gamma_bb[index]*t112482*t112476*t112477*t112478*(1.6E1/3.0))-ccab1*gamma_bb[index]*1.0/(t112490* \
               t112490)*t112475*t112476*t112478*(4.0/3.0)+ccab2*gamma_bb[index]*t112475*t112476*t112478*t112498*(8.0/ \
               3.0)-ccab3*gcab*t112475*t112476*t112477*1.0/(t112497*t112497)*(gamma_bb[index]*gcab*t112478*4.0+gamma_bb[index]* \
               t112475*t112476*t112478*8.0+gamma_bb[index]*gcab*t112475*t112477*t112478*4.0)+ccab3*gamma_bb[index]* \
               gcab*t112475*t112477*t112478*t112499*4.0+ccab4*gamma_bb[index]*t112501*t112482*t112476*t112477*t112478* \
               (1.6E1/3.0))+rho_b[index]*t112564*(ccaa1*gamma_bb[index]*gcaa*t112573*t112478*(8.0/3.0)+ccaa2*t112401* \
               t112402*t112582*t112583*(1.6E1/3.0)+ccaa4*t112403*t112404*t112570*t112585*(3.2E1/3.0)-ccaa1*t112401* \
               t112402*1.0/(t112572*t112572)*t112583*(8.0/3.0)-ccaa2*t112401*t112402*t112408*1.0/(t112581*t112581) \
               *(gamma_bb[index]*gcaa*t112478*(1.6E1/3.0)+t112401*t112402*t112583*(1.6E1/3.0))-ccaa4*t112403*t112404* \
               t112405*1.0/(t112569*t112569)*(gamma_bb[index]*gcaa*t112478*(3.2E1/3.0)+t112401*t112402*t112583*3.2E1+ \
               t112403*t112404*t112585*(3.2E1/3.0)+gamma_bb[index]*gcaa*t112401*t112402*t112584*3.2E1)+ccaa3*gamma_bb[index]* \
               gcaa*t112401*t112402*t112584*t112578*8.0-ccaa3*gamma_bb[index]*gcaa*t112401*t112402*t112407*1.0/(t112577* \
               t112577)*(gamma_bb[index]*gcaa*t112478*8.0+t112401*t112402*t112583*1.6E1+gamma_bb[index]*gcaa*t112401* \
               t112402*t112584*8.0))+rho_b[index]*t112599*(t112594-t112559+t112411*t112414*(t112593-t112594+t112559- \
               t112443*t112592*t112586*t112587))-c0*t112643*t112644*(omega*t112604*(omega*t112611*t112609*(-2.778046668940015E15/ \
               1.40737488355328E14)+omega*t112604*((t112603*(1.0/3.0))/rho_b[index]+1.0/pow(t112600,5.0/3.0)*t112606* \
               t112607*(2.778046668940015E15/1.40737488355328E14)-t112601*t112603*t112604*(2.778046668940015E15/7.0368744177664E13) \
               )+1.0/sqrt(3.141592653589793)*t112610*t112603*t112608*(1.108777112152858E31/1.584563250285287E29)) \
               *(4.0/3.0)-omega*t112620*t112609*(2.778046668940015E15/1.05553116266496E14))-c0*pow(rho_b[index],1.0/ \
               3.0)*t112643*t112646*(4.0/3.0)+c0*t112644*t112646*(cx1*gamma_bb[index]*gx*t112630*t112478*(8.0/3.0) \
               +cx2*t112401*t112612*t112641*t112583*(1.6E1/3.0)+cx4*t112403*t112613*t112626*t112585*(3.2E1/3.0)-cx1* \
               t112401*t112612*t112583*1.0/(t112629*t112629)*(8.0/3.0)-cx2*t112401*t112612*1.0/(t112640*t112640)* \
               t112408*(gamma_bb[index]*gx*t112478*(1.6E1/3.0)+t112401*t112612*t112583*(1.6E1/3.0))-cx4*t112403*t112405* \
               t112613*1.0/(t112625*t112625)*(gamma_bb[index]*gx*t112478*(3.2E1/3.0)+t112401*t112612*t112583*3.2E1+ \
               t112403*t112613*t112585*(3.2E1/3.0)+gamma_bb[index]*gx*t112401*t112612*t112584*3.2E1)+cx3*gamma_bb[index]* \
               gx*t112401*t112612*t112636*t112584*8.0-cx3*gamma_bb[index]*gx*t112401*t112612*t112407*1.0/(t112635* \
               t112635)*(gamma_bb[index]*gx*t112478*8.0+t112401*t112612*t112583*1.6E1+gamma_bb[index]*gx*t112401* \
               t112612*t112584*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t115763 = 1.0/pow(rho_b[index],1.0/3.0);
            double t115764 = c*t115763;
            double t115765 = sqrt(t115764);
            double t115766 = pow(t115764,3.0/2.0);
            double t115767 = c*c;
            double t115768 = 1.0/pow(rho_b[index],2.0/3.0);
            double t115769 = 1.0/c0p;
            double t115770 = b1p*t115765;
            double t115771 = b3p*t115766;
            double t115772 = b4p*t115767*t115768;
            double t115773 = b2p*c*t115763;
            double t115774 = t115770+t115771+t115772+t115773;
            double t115775 = 1.0/t115774;
            double t115776 = t115775*t115769*(1.0/2.0);
            double t115777 = t115776+1.0;
            double t115778 = log(t115777);
            double t115779 = a1p*c*t115763;
            double t115780 = t115779+1.0;
            double t115781 = gamma_bb[index]*gamma_bb[index];
            double t115782 = gcaa*gcaa;
            double t115783 = t115781*t115781;
            double t115784 = t115782*t115782;
            double t115785 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t115786 = 1.0/pow(rho_b[index],8.0/3.0);
            double t115787 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t115788 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t115789 = pow(2.0,1.0/3.0);
            double t115790 = t115789*2.0;
            double t115791 = t115790-2.0;
            double t115792 = two_13*2.0;
            double t115793 = t115792-2.0;
            double t115794 = 1.0/t115793;
            double t115795 = 1.0/c0f;
            double t115796 = b1f*t115765;
            double t115797 = b3f*t115766;
            double t115798 = b4f*t115767*t115768;
            double t115799 = b2f*c*t115763;
            double t115800 = t115796+t115797+t115798+t115799;
            double t115801 = 1.0/t115800;
            double t115802 = t115801*t115795*(1.0/2.0);
            double t115803 = t115802+1.0;
            double t115804 = log(t115803);
            double t115805 = a1f*c*t115763;
            double t115806 = t115805+1.0;
            double t115807 = c0f*t115804*t115806*2.0;
            double t115808 = c0p*t115780*t115778*2.0;
            double t115809 = gamma_bb[index]*gcaa*t115786*4.0;
            double t115810 = gamma_bb[index]*gcaa*t115781*t115782*t115787*4.0;
            double t115811 = t115781*t115782*t115788*6.0;
            double t115812 = t115783*t115784*t115785;
            double t115813 = t115810+t115811+t115812+t115809+1.0;
            double t115814 = 1.0/t115813;
            double t115815 = gamma_bb[index]*gcaa*t115786;
            double t115816 = t115815+1.0;
            double t115817 = 1.0/t115816;
            double t115818 = gamma_bb[index]*gcaa*t115786*3.0;
            double t115819 = gamma_bb[index]*gcaa*t115781*t115782*t115787;
            double t115820 = t115781*t115782*t115788*3.0;
            double t115821 = t115820+t115818+t115819+1.0;
            double t115822 = 1.0/t115821;
            double t115823 = gamma_bb[index]*gcaa*t115786*2.0;
            double t115824 = t115781*t115782*t115788;
            double t115825 = t115823+t115824+1.0;
            double t115826 = 1.0/t115825;
            double t115827 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t115828 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t115829 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t115830 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t115831 = 1.0/pow(rho_b[index],4.0/3.0);
            double t115832 = 1.0/pow(rho_b[index],5.0/3.0);
            double t115833 = 1.0/sqrt(t115764);
            double t115834 = 1.0/t115777;
            double t115835 = 1.0/(t115774*t115774);
            double t115836 = b4p*t115832*t115767*(2.0/3.0);
            double t115837 = b2p*c*t115831*(1.0/3.0);
            double t115838 = b1p*c*t115831*t115833*(1.0/6.0);
            double t115839 = b3p*c*t115831*t115765*(1.0/2.0);
            double t115840 = t115836+t115837+t115838+t115839;
            double t115841 = t115840*t115780*t115834*t115835;
            double t115842 = ccaa4*t115814*t115783*t115784*t115785;
            double t115843 = ccaa1*gamma_bb[index]*gcaa*t115817*t115786;
            double t115844 = ccaa3*gamma_bb[index]*gcaa*t115822*t115781*t115782*t115787;
            double t115845 = ccaa2*t115781*t115826*t115782*t115788;
            double t115846 = ccaa0+t115842+t115843+t115844+t115845;
            double t115847 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t115848 = 1.0/(omega*omega);
            double t115849 = pow(t115847,2.0/3.0);
            double t115852 = t115848*t115849;
            double t115850 = exp(-t115852);
            double t115851 = 1.0/pow(t115847,1.0/3.0);
            double t115853 = omega*omega;
            double t115854 = t115850-1.0;
            double t115855 = 1.0/pow(t115847,2.0/3.0);
            double t115856 = 1.0/pow(t115847,4.0/3.0);
            double t115857 = 1.0/omega;
            double t115865 = t115853*t115854*t115855*(1.0/2.0);
            double t115858 = t115850-t115865;
            double t115859 = gx*gx;
            double t115860 = t115859*t115859;
            double t115861 = pow(t115847,1.0/3.0);
            double t115862 = t115861*t115857;
            double t115863 = erf(t115862);
            double t115864 = t115863*(3.991211251234741E15/2.251799813685248E15);
            double t115866 = omega*t115851*t115858;
            double t115867 = t115864+t115866;
            double t115868 = gamma_bb[index]*gx*t115786*4.0;
            double t115869 = gamma_bb[index]*gx*t115781*t115787*t115859*4.0;
            double t115870 = t115781*t115859*t115788*6.0;
            double t115871 = t115860*t115783*t115785;
            double t115872 = t115870+t115871+t115868+t115869+1.0;
            double t115873 = 1.0/t115872;
            double t115874 = cx4*t115860*t115783*t115873*t115785;
            double t115875 = gamma_bb[index]*gx*t115786;
            double t115876 = t115875+1.0;
            double t115877 = 1.0/t115876;
            double t115878 = cx1*gamma_bb[index]*gx*t115786*t115877;
            double t115879 = gamma_bb[index]*gx*t115786*3.0;
            double t115880 = gamma_bb[index]*gx*t115781*t115787*t115859;
            double t115881 = t115781*t115859*t115788*3.0;
            double t115882 = t115880+t115881+t115879+1.0;
            double t115883 = 1.0/t115882;
            double t115884 = cx3*gamma_bb[index]*gx*t115781*t115883*t115787*t115859;
            double t115885 = gamma_bb[index]*gx*t115786*2.0;
            double t115886 = t115781*t115859*t115788;
            double t115887 = t115885+t115886+1.0;
            double t115888 = 1.0/t115887;
            double t115889 = cx2*t115781*t115859*t115788*t115888;
            double t115890 = cx0+t115874+t115884+t115878+t115889;
            double t115891 = pow(rho_b[index],4.0/3.0);
            double t115892 = omega*t115851*t115867*(4.0/3.0);
            double t115893 = t115892-1.0;
            v_rho_b_[index] = -t115846*(t115808+t115791*t115794*(t115807-c0p*t115780*t115778*2.0))+rho_b[index]* \
               t115846*(-t115841+t115791*t115794*(t115841-(1.0/(t115800*t115800)*t115806*(b2f*c*t115831*(1.0/3.0) \
               +b4f*t115832*t115767*(2.0/3.0)+b1f*c*t115831*t115833*(1.0/6.0)+b3f*c*t115831*t115765*(1.0/2.0)))/t115803+ \
               a1f*c*c0f*t115804*t115831*(2.0/3.0)-a1p*c*c0p*t115831*t115778*(2.0/3.0))+a1p*c*c0p*t115831*t115778* \
               (2.0/3.0))+rho_b[index]*(t115808+t115791*t115794*(t115807-t115808))*(ccaa1*gamma_bb[index]*gcaa*t115817* \
               t115828*(8.0/3.0)+ccaa4*t115830*t115814*t115783*t115784*(3.2E1/3.0)+ccaa2*t115781*t115826*t115782* \
               t115827*(1.6E1/3.0)-ccaa1*1.0/(t115816*t115816)*t115781*t115782*t115827*(8.0/3.0)-ccaa2*1.0/(t115825* \
               t115825)*t115781*t115782*t115788*(gamma_bb[index]*gcaa*t115828*(1.6E1/3.0)+t115781*t115782*t115827* \
               (1.6E1/3.0))-ccaa4*1.0/(t115813*t115813)*t115783*t115784*t115785*(gamma_bb[index]*gcaa*t115828*(3.2E1/ \
               3.0)+t115830*t115783*t115784*(3.2E1/3.0)+t115781*t115782*t115827*3.2E1+gamma_bb[index]*gcaa*t115781* \
               t115782*t115829*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t115822*t115781*t115782*t115829*8.0-ccaa3*gamma_bb[index]* \
               gcaa*1.0/(t115821*t115821)*t115781*t115782*t115787*(gamma_bb[index]*gcaa*t115828*8.0+t115781*t115782* \
               t115827*1.6E1+gamma_bb[index]*gcaa*t115781*t115782*t115829*8.0))-c0*t115890*t115891*(omega*t115851* \
               (omega*t115856*t115858*(-2.778046668940015E15/1.40737488355328E14)+omega*t115851*((t115850*(1.0/3.0) \
               )/rho_b[index]+t115853*t115854*1.0/pow(t115847,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
               -t115850*t115851*t115848*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t115850* \
               t115855*t115857*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t115856*t115867*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_b[index],1.0/3.0)*t115890*t115893*(4.0/3.0)+c0*t115891*t115893*(cx1* \
               gamma_bb[index]*gx*t115828*t115877*(8.0/3.0)+cx2*t115781*t115827*t115859*t115888*(1.6E1/3.0)+cx4*t115830* \
               t115860*t115783*t115873*(3.2E1/3.0)-cx1*t115781*t115827*1.0/(t115876*t115876)*t115859*(8.0/3.0)-cx2* \
               t115781*t115859*t115788*1.0/(t115887*t115887)*(gamma_bb[index]*gx*t115828*(1.6E1/3.0)+t115781*t115827* \
               t115859*(1.6E1/3.0))-cx4*t115860*1.0/(t115872*t115872)*t115783*t115785*(gamma_bb[index]*gx*t115828* \
               (3.2E1/3.0)+t115830*t115860*t115783*(3.2E1/3.0)+t115781*t115827*t115859*3.2E1+gamma_bb[index]*gx*t115781* \
               t115829*t115859*3.2E1)+cx3*gamma_bb[index]*gx*t115781*t115829*t115883*t115859*8.0-cx3*gamma_bb[index]* \
               gx*t115781*1.0/(t115882*t115882)*t115787*t115859*(gamma_bb[index]*gx*t115828*8.0+t115781*t115827*t115859* \
               1.6E1+gamma_bb[index]*gx*t115781*t115829*t115859*8.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t112648 = 1.0/pow(rho_a[index],1.0/3.0);
                double t112649 = c*t112648;
                double t112650 = sqrt(t112649);
                double t112651 = pow(t112649,3.0/2.0);
                double t112652 = c*c;
                double t112653 = 1.0/pow(rho_a[index],2.0/3.0);
                double t112654 = 1.0/c0p;
                double t112655 = b1p*t112650;
                double t112656 = b3p*t112651;
                double t112657 = b4p*t112652*t112653;
                double t112658 = b2p*c*t112648;
                double t112659 = t112655+t112656+t112657+t112658;
                double t112660 = 1.0/t112659;
                double t112661 = t112660*t112654*(1.0/2.0);
                double t112662 = t112661+1.0;
                double t112663 = log(t112662);
                double t112664 = a1p*c*t112648;
                double t112665 = t112664+1.0;
                double t112666 = pow(2.0,1.0/3.0);
                double t112667 = t112666*2.0;
                double t112668 = t112667-2.0;
                double t112669 = two_13*2.0;
                double t112670 = t112669-2.0;
                double t112671 = 1.0/t112670;
                double t112672 = 1.0/c0f;
                double t112673 = 1.0/pow(rho_b[index],1.0/3.0);
                double t112674 = c*t112673;
                double t112675 = sqrt(t112674);
                double t112676 = pow(t112674,3.0/2.0);
                double t112677 = 1.0/pow(rho_b[index],2.0/3.0);
                double t112678 = b1p*t112675;
                double t112679 = b3p*t112676;
                double t112680 = b4p*t112652*t112677;
                double t112681 = b2p*c*t112673;
                double t112682 = t112680+t112681+t112678+t112679;
                double t112683 = 1.0/t112682;
                double t112684 = t112654*t112683*(1.0/2.0);
                double t112685 = t112684+1.0;
                double t112686 = log(t112685);
                double t112687 = a1p*c*t112673;
                double t112688 = t112687+1.0;
                double t112689 = c0p*t112686*t112688*2.0;
                double t112690 = rho_a[index]+rho_b[index];
                double t112691 = 1.0/pow(t112690,1.0/3.0);
                double t112692 = c*t112691;
                double t112693 = sqrt(t112692);
                double t112694 = pow(t112692,3.0/2.0);
                double t112695 = 1.0/pow(t112690,2.0/3.0);
                double t112696 = b1p*t112693;
                double t112697 = b3p*t112694;
                double t112698 = b4p*t112652*t112695;
                double t112699 = b2p*c*t112691;
                double t112700 = t112696+t112697+t112698+t112699;
                double t112701 = 1.0/t112700;
                double t112702 = t112701*t112654*(1.0/2.0);
                double t112703 = t112702+1.0;
                double t112704 = log(t112703);
                double t112705 = a1p*c*t112691;
                double t112706 = t112705+1.0;
                double t112707 = c0p*t112704*t112706*2.0;
                double t112708 = rho_a[index]-rho_b[index];
                double t112709 = t112708*t112708;
                double t112710 = 1.0/t112690;
                double t112711 = t112710*t112708;
                double t112712 = 1.0/(t112690*t112690*t112690*t112690);
                double t112713 = t112709*t112709;
                double t112714 = t112711+1.0;
                double t112715 = pow(t112714,4.0/3.0);
                double t112716 = -t112711+1.0;
                double t112717 = pow(t112716,4.0/3.0);
                double t112718 = t112715+t112717-2.0;
                double t112719 = 1.0/pow(rho_a[index],8.0/3.0);
                double t112720 = gamma_aa[index]*t112719*(1.0/2.0);
                double t112721 = 1.0/pow(rho_b[index],8.0/3.0);
                double t112722 = gamma_bb[index]*t112721*(1.0/2.0);
                double t112723 = t112720+t112722;
                double t112724 = gcab*t112723;
                double t112725 = t112724+1.0;
                double t112726 = gcab*gcab;
                double t112727 = t112723*t112723;
                double t112728 = t112726*t112726;
                double t112729 = t112727*t112727;
                double t112730 = t112726*t112727;
                double t112731 = gcab*t112723*2.0;
                double t112732 = t112730+t112731+1.0;
                double t112733 = t112726*t112727*3.0;
                double t112734 = gcab*t112723*t112726*t112727;
                double t112735 = gcab*t112723*3.0;
                double t112736 = t112733+t112734+t112735+1.0;
                double t112737 = t112726*t112727*6.0;
                double t112738 = gcab*t112723*t112726*t112727*4.0;
                double t112739 = t112728*t112729;
                double t112740 = gcab*t112723*4.0;
                double t112741 = t112740+t112737+t112738+t112739+1.0;
                double t112742 = c0p*t112663*t112665*2.0;
                double t112743 = b1f*t112650;
                double t112744 = b3f*t112651;
                double t112745 = b4f*t112652*t112653;
                double t112746 = b2f*c*t112648;
                double t112747 = t112743+t112744+t112745+t112746;
                double t112748 = 1.0/t112747;
                double t112749 = t112672*t112748*(1.0/2.0);
                double t112750 = t112749+1.0;
                double t112751 = log(t112750);
                double t112752 = a1f*c*t112648;
                double t112753 = t112752+1.0;
                double t112754 = t112742-c0f*t112751*t112753*2.0;
                double t112755 = t112742-t112671*t112754*t112668;
                double t112756 = gamma_aa[index]*gamma_aa[index];
                double t112757 = gcaa*gcaa;
                double t112758 = t112757*t112757;
                double t112759 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t112760 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t112761 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t112762 = gamma_aa[index]*gcaa*t112719;
                double t112763 = t112762+1.0;
                double t112764 = gamma_aa[index]*gcaa*t112719*3.0;
                double t112765 = gamma_aa[index]*gcaa*t112761*t112756*t112757;
                double t112766 = t112760*t112756*t112757*3.0;
                double t112767 = t112764+t112765+t112766+1.0;
                double t112768 = t112756*t112756;
                double t112769 = gamma_aa[index]*gcaa*t112719*4.0;
                double t112770 = gamma_aa[index]*gcaa*t112761*t112756*t112757*4.0;
                double t112771 = t112760*t112756*t112757*6.0;
                double t112772 = t112758*t112759*t112768;
                double t112773 = t112770+t112771+t112772+t112769+1.0;
                double t112774 = gamma_aa[index]*gcaa*t112719*2.0;
                double t112775 = t112760*t112756*t112757;
                double t112776 = t112774+t112775+1.0;
                double t112777 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t112778 = 1.0/pow(t112777,1.0/3.0);
                double t112779 = 1.0/(omega*omega);
                double t112780 = pow(t112777,2.0/3.0);
                double t112781 = exp(-t112780*t112779);
                double t112782 = gx*gx;
                double t112783 = t112782*t112782;
                double t112784 = gamma_aa[index]*gx*t112719;
                double t112785 = t112784+1.0;
                double t112786 = gamma_aa[index]*gx*t112719*3.0;
                double t112787 = gamma_aa[index]*gx*t112761*t112782*t112756;
                double t112788 = t112760*t112782*t112756*3.0;
                double t112789 = t112786+t112787+t112788+1.0;
                double t112790 = gamma_aa[index]*gx*t112719*4.0;
                double t112791 = gamma_aa[index]*gx*t112761*t112782*t112756*4.0;
                double t112792 = t112760*t112782*t112756*6.0;
                double t112793 = t112783*t112759*t112768;
                double t112794 = t112790+t112791+t112792+t112793+1.0;
                double t112795 = gamma_aa[index]*gx*t112719*2.0;
                double t112796 = t112760*t112782*t112756;
                double t112797 = t112795+t112796+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t112755+rho_b[index]*(t112689-t112671*t112668*(t112689-c0f*log((t112672* \
                   (1.0/2.0))/(b1f*t112675+b3f*t112676+b2f*c*t112673+b4f*t112652*t112677)+1.0)*(a1f*c*t112673+1.0)*2.0) \
                   )-t112690*(t112707-t112712*t112713*t112671*t112718*(t112707-c0f*log((t112672*(1.0/2.0))/(b1f*t112693+ \
                   b3f*t112694+b2f*c*t112691+b4f*t112652*t112695)+1.0)*(a1f*c*t112691+1.0)*2.0)+(Aa*t112671*t112718*log((1.0/ \
                   2.0)/(Aa*(b1a*t112693+b3a*t112694+b2a*c*t112691+b4a*t112652*t112695))+1.0)*(t112712*t112713-1.0)*(a1a* \
                   c*t112691+1.0)*2.0)/d2fz0))*((ccab1*gcab*t112719*(1.0/2.0))/t112725-ccab4*1.0/(t112741*t112741)*t112728* \
                   t112729*(gcab*t112719*2.0+t112723*t112726*t112719*6.0+gcab*t112726*t112727*t112719*6.0+t112723*t112727* \
                   t112719*t112728*2.0)-ccab2*1.0/(t112732*t112732)*t112726*t112727*(gcab*t112719+t112723*t112726*t112719) \
                   +(ccab2*t112723*t112726*t112719)/t112732-ccab1*t112723*1.0/(t112725*t112725)*t112726*t112719*(1.0/ \
                   2.0)+(ccab3*gcab*t112726*t112727*t112719*(3.0/2.0))/t112736+(ccab4*t112723*t112727*t112719*t112728* \
                   2.0)/t112741-ccab3*gcab*t112723*t112726*t112727*1.0/(t112736*t112736)*(gcab*t112719*(3.0/2.0)+t112723* \
                   t112726*t112719*3.0+gcab*t112726*t112727*t112719*(3.0/2.0)))-rho_a[index]*t112755*((ccaa1*gcaa*t112719) \
                   /t112763-ccaa1*gamma_aa[index]*t112760*1.0/(t112763*t112763)*t112757+(ccaa2*gamma_aa[index]*t112760* \
                   t112757*2.0)/t112776-ccaa2*t112760*t112756*t112757*1.0/(t112776*t112776)*(gcaa*t112719*2.0+gamma_aa[index]* \
                   t112760*t112757*2.0)+(ccaa4*gamma_aa[index]*t112756*t112758*t112759*4.0)/t112773+(ccaa3*gcaa*t112761* \
                   t112756*t112757*3.0)/t112767-ccaa4*1.0/(t112773*t112773)*t112758*t112759*t112768*(gcaa*t112719*4.0+ \
                   gamma_aa[index]*t112760*t112757*1.2E1+gamma_aa[index]*t112756*t112758*t112759*4.0+gcaa*t112761*t112756* \
                   t112757*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t112761*t112756*t112757*1.0/(t112767*t112767)*(gcaa*t112719* \
                   3.0+gamma_aa[index]*t112760*t112757*6.0+gcaa*t112761*t112756*t112757*3.0))-c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t112778*(erf(pow(t112777,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega* \
                   t112778*(t112781-(omega*omega)*1.0/pow(t112777,2.0/3.0)*(t112781-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1* \
                   gx*t112719)/t112785-cx1*gamma_aa[index]*t112760*t112782*1.0/(t112785*t112785)+(cx2*gamma_aa[index]* \
                   t112760*t112782*2.0)/t112797-cx2*t112760*t112782*t112756*1.0/(t112797*t112797)*(gx*t112719*2.0+gamma_aa[index]* \
                   t112760*t112782*2.0)+(cx4*gamma_aa[index]*t112756*t112783*t112759*4.0)/t112794+(cx3*gx*t112761*t112782* \
                   t112756*3.0)/t112789-cx4*t112783*1.0/(t112794*t112794)*t112759*t112768*(gx*t112719*4.0+gamma_aa[index]* \
                   t112760*t112782*1.2E1+gamma_aa[index]*t112756*t112783*t112759*4.0+gx*t112761*t112782*t112756*1.2E1) \
                   -cx3*gamma_aa[index]*gx*t112761*t112782*t112756*1.0/(t112789*t112789)*(gx*t112719*3.0+gamma_aa[index]* \
                   t112760*t112782*6.0+gx*t112761*t112782*t112756*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t116650 = 1.0/pow(rho_a[index],1.0/3.0);
                double t116651 = c*t116650;
                double t116652 = sqrt(t116651);
                double t116653 = pow(t116651,3.0/2.0);
                double t116654 = c*c;
                double t116655 = 1.0/pow(rho_a[index],2.0/3.0);
                double t116656 = 1.0/c0p;
                double t116657 = b1p*t116652;
                double t116658 = b3p*t116653;
                double t116659 = b4p*t116654*t116655;
                double t116660 = b2p*c*t116650;
                double t116661 = t116660+t116657+t116658+t116659;
                double t116662 = 1.0/t116661;
                double t116663 = t116662*t116656*(1.0/2.0);
                double t116664 = t116663+1.0;
                double t116665 = log(t116664);
                double t116666 = a1p*c*t116650;
                double t116667 = t116666+1.0;
                double t116668 = 1.0/pow(rho_a[index],8.0/3.0);
                double t116669 = gamma_aa[index]*gamma_aa[index];
                double t116670 = gcaa*gcaa;
                double t116671 = t116670*t116670;
                double t116672 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t116673 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t116674 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t116675 = gamma_aa[index]*gcaa*t116668;
                double t116676 = t116675+1.0;
                double t116677 = gamma_aa[index]*gcaa*t116668*3.0;
                double t116678 = gamma_aa[index]*gcaa*t116670*t116674*t116669;
                double t116679 = t116670*t116673*t116669*3.0;
                double t116680 = t116677+t116678+t116679+1.0;
                double t116681 = t116669*t116669;
                double t116682 = gamma_aa[index]*gcaa*t116668*4.0;
                double t116683 = gamma_aa[index]*gcaa*t116670*t116674*t116669*4.0;
                double t116684 = t116670*t116673*t116669*6.0;
                double t116685 = t116671*t116672*t116681;
                double t116686 = t116682+t116683+t116684+t116685+1.0;
                double t116687 = gamma_aa[index]*gcaa*t116668*2.0;
                double t116688 = t116670*t116673*t116669;
                double t116689 = t116687+t116688+1.0;
                double t116690 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t116691 = 1.0/pow(t116690,1.0/3.0);
                double t116692 = 1.0/(omega*omega);
                double t116693 = pow(t116690,2.0/3.0);
                double t116694 = exp(-t116692*t116693);
                double t116695 = gx*gx;
                double t116696 = t116695*t116695;
                double t116697 = gamma_aa[index]*gx*t116668;
                double t116698 = t116697+1.0;
                double t116699 = gamma_aa[index]*gx*t116668*3.0;
                double t116700 = gamma_aa[index]*gx*t116674*t116695*t116669;
                double t116701 = t116673*t116695*t116669*3.0;
                double t116702 = t116700+t116701+t116699+1.0;
                double t116703 = gamma_aa[index]*gx*t116668*4.0;
                double t116704 = gamma_aa[index]*gx*t116674*t116695*t116669*4.0;
                double t116705 = t116673*t116695*t116669*6.0;
                double t116706 = t116672*t116681*t116696;
                double t116707 = t116703+t116704+t116705+t116706+1.0;
                double t116708 = gamma_aa[index]*gx*t116668*2.0;
                double t116709 = t116673*t116695*t116669;
                double t116710 = t116708+t116709+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t116652+ \
                   b3f*t116653+b2f*c*t116650+b4f*t116654*t116655))+1.0)*(a1f*c*t116650+1.0)*2.0-c0p*t116665*t116667*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t116665*t116667*2.0)*((ccaa1*gcaa*t116668)/t116676-ccaa1*gamma_aa[index]*t116670* \
                   t116673*1.0/(t116676*t116676)+(ccaa2*gamma_aa[index]*t116670*t116673*2.0)/t116689-ccaa2*t116670*t116673* \
                   t116669*1.0/(t116689*t116689)*(gcaa*t116668*2.0+gamma_aa[index]*t116670*t116673*2.0)+(ccaa4*gamma_aa[index]* \
                   t116671*t116672*t116669*4.0)/t116686+(ccaa3*gcaa*t116670*t116674*t116669*3.0)/t116680-ccaa4*t116671* \
                   t116672*t116681*1.0/(t116686*t116686)*(gcaa*t116668*4.0+gamma_aa[index]*t116670*t116673*1.2E1+gamma_aa[index]* \
                   t116671*t116672*t116669*4.0+gcaa*t116670*t116674*t116669*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t116670* \
                   1.0/(t116680*t116680)*t116674*t116669*(gcaa*t116668*3.0+gamma_aa[index]*t116670*t116673*6.0+gcaa*t116670* \
                   t116674*t116669*3.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t116691*(erf(pow(t116690,1.0/3.0)/omega) \
                   *(3.991211251234741E15/2.251799813685248E15)+omega*t116691*(t116694-(omega*omega)*1.0/pow(t116690,2.0/ \
                   3.0)*(t116694-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1*gx*t116668)/t116698-cx1*gamma_aa[index]*t116673* \
                   t116695*1.0/(t116698*t116698)+(cx2*gamma_aa[index]*t116673*t116695*2.0)/t116710-cx2*1.0/(t116710*t116710) \
                   *t116673*t116695*t116669*(gx*t116668*2.0+gamma_aa[index]*t116673*t116695*2.0)+(cx4*gamma_aa[index]* \
                   t116672*t116669*t116696*4.0)/t116707+(cx3*gx*t116674*t116695*t116669*3.0)/t116702-cx4*1.0/(t116707* \
                   t116707)*t116672*t116681*t116696*(gx*t116668*4.0+gamma_aa[index]*t116673*t116695*1.2E1+gamma_aa[index]* \
                   t116672*t116669*t116696*4.0+gx*t116674*t116695*t116669*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t116702* \
                   t116702)*t116674*t116695*t116669*(gx*t116668*3.0+gamma_aa[index]*t116673*t116695*6.0+gx*t116674*t116695* \
                   t116669*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t112800 = 1.0/pow(rho_a[index],1.0/3.0);
                double t112801 = c*t112800;
                double t112802 = sqrt(t112801);
                double t112803 = pow(t112801,3.0/2.0);
                double t112804 = c*c;
                double t112805 = 1.0/pow(rho_a[index],2.0/3.0);
                double t112806 = 1.0/c0p;
                double t112807 = b1p*t112802;
                double t112808 = b3p*t112803;
                double t112809 = b4p*t112804*t112805;
                double t112810 = b2p*c*t112800;
                double t112811 = t112810+t112807+t112808+t112809;
                double t112812 = 1.0/t112811;
                double t112813 = t112812*t112806*(1.0/2.0);
                double t112814 = t112813+1.0;
                double t112815 = log(t112814);
                double t112816 = a1p*c*t112800;
                double t112817 = t112816+1.0;
                double t112818 = pow(2.0,1.0/3.0);
                double t112819 = t112818*2.0;
                double t112820 = t112819-2.0;
                double t112821 = two_13*2.0;
                double t112822 = t112821-2.0;
                double t112823 = 1.0/t112822;
                double t112824 = 1.0/c0f;
                double t112825 = 1.0/pow(rho_b[index],1.0/3.0);
                double t112826 = c*t112825;
                double t112827 = sqrt(t112826);
                double t112828 = pow(t112826,3.0/2.0);
                double t112829 = 1.0/pow(rho_b[index],2.0/3.0);
                double t112830 = b1p*t112827;
                double t112831 = b3p*t112828;
                double t112832 = b4p*t112804*t112829;
                double t112833 = b2p*c*t112825;
                double t112834 = t112830+t112831+t112832+t112833;
                double t112835 = 1.0/t112834;
                double t112836 = t112806*t112835*(1.0/2.0);
                double t112837 = t112836+1.0;
                double t112838 = log(t112837);
                double t112839 = a1p*c*t112825;
                double t112840 = t112839+1.0;
                double t112841 = c0p*t112840*t112838*2.0;
                double t112842 = rho_a[index]+rho_b[index];
                double t112843 = 1.0/pow(t112842,1.0/3.0);
                double t112844 = c*t112843;
                double t112845 = sqrt(t112844);
                double t112846 = pow(t112844,3.0/2.0);
                double t112847 = 1.0/pow(t112842,2.0/3.0);
                double t112848 = b1p*t112845;
                double t112849 = b3p*t112846;
                double t112850 = b4p*t112804*t112847;
                double t112851 = b2p*c*t112843;
                double t112852 = t112850+t112851+t112848+t112849;
                double t112853 = 1.0/t112852;
                double t112854 = t112806*t112853*(1.0/2.0);
                double t112855 = t112854+1.0;
                double t112856 = log(t112855);
                double t112857 = a1p*c*t112843;
                double t112858 = t112857+1.0;
                double t112859 = c0p*t112856*t112858*2.0;
                double t112860 = rho_a[index]-rho_b[index];
                double t112861 = t112860*t112860;
                double t112862 = 1.0/t112842;
                double t112863 = t112860*t112862;
                double t112864 = 1.0/(t112842*t112842*t112842*t112842);
                double t112865 = t112861*t112861;
                double t112866 = t112863+1.0;
                double t112867 = pow(t112866,4.0/3.0);
                double t112868 = -t112863+1.0;
                double t112869 = pow(t112868,4.0/3.0);
                double t112870 = t112867+t112869-2.0;
                double t112871 = 1.0/pow(rho_b[index],8.0/3.0);
                double t112872 = 1.0/pow(rho_a[index],8.0/3.0);
                double t112873 = gamma_aa[index]*t112872*(1.0/2.0);
                double t112874 = gamma_bb[index]*t112871*(1.0/2.0);
                double t112875 = t112873+t112874;
                double t112876 = gcab*t112875;
                double t112877 = t112876+1.0;
                double t112878 = gcab*gcab;
                double t112879 = t112875*t112875;
                double t112880 = t112878*t112878;
                double t112881 = t112879*t112879;
                double t112882 = t112878*t112879;
                double t112883 = gcab*t112875*2.0;
                double t112884 = t112882+t112883+1.0;
                double t112885 = t112878*t112879*3.0;
                double t112886 = gcab*t112875*t112878*t112879;
                double t112887 = gcab*t112875*3.0;
                double t112888 = t112885+t112886+t112887+1.0;
                double t112889 = t112878*t112879*6.0;
                double t112890 = gcab*t112875*t112878*t112879*4.0;
                double t112891 = t112880*t112881;
                double t112892 = gcab*t112875*4.0;
                double t112893 = t112890+t112891+t112892+t112889+1.0;
                double t112894 = c0p*t112815*t112817*2.0;
                double t112895 = b1f*t112827;
                double t112896 = b3f*t112828;
                double t112897 = b4f*t112804*t112829;
                double t112898 = b2f*c*t112825;
                double t112899 = t112895+t112896+t112897+t112898;
                double t112900 = 1.0/t112899;
                double t112901 = t112900*t112824*(1.0/2.0);
                double t112902 = t112901+1.0;
                double t112903 = log(t112902);
                double t112904 = a1f*c*t112825;
                double t112905 = t112904+1.0;
                double t112906 = t112841-c0f*t112903*t112905*2.0;
                double t112907 = t112841-t112820*t112823*t112906;
                double t112908 = gamma_bb[index]*gamma_bb[index];
                double t112909 = gcaa*gcaa;
                double t112910 = t112909*t112909;
                double t112911 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t112912 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t112913 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t112914 = gamma_bb[index]*gcaa*t112871;
                double t112915 = t112914+1.0;
                double t112916 = gamma_bb[index]*gcaa*t112871*3.0;
                double t112917 = gamma_bb[index]*gcaa*t112913*t112908*t112909;
                double t112918 = t112912*t112908*t112909*3.0;
                double t112919 = t112916+t112917+t112918+1.0;
                double t112920 = t112908*t112908;
                double t112921 = gamma_bb[index]*gcaa*t112871*4.0;
                double t112922 = gamma_bb[index]*gcaa*t112913*t112908*t112909*4.0;
                double t112923 = t112912*t112908*t112909*6.0;
                double t112924 = t112910*t112911*t112920;
                double t112925 = t112921+t112922+t112923+t112924+1.0;
                double t112926 = gamma_bb[index]*gcaa*t112871*2.0;
                double t112927 = t112912*t112908*t112909;
                double t112928 = t112926+t112927+1.0;
                double t112929 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t112930 = 1.0/pow(t112929,1.0/3.0);
                double t112931 = 1.0/(omega*omega);
                double t112932 = pow(t112929,2.0/3.0);
                double t112933 = exp(-t112931*t112932);
                double t112934 = gx*gx;
                double t112935 = t112934*t112934;
                double t112936 = gamma_bb[index]*gx*t112871;
                double t112937 = t112936+1.0;
                double t112938 = gamma_bb[index]*gx*t112871*3.0;
                double t112939 = gamma_bb[index]*gx*t112913*t112934*t112908;
                double t112940 = t112912*t112934*t112908*3.0;
                double t112941 = t112940+t112938+t112939+1.0;
                double t112942 = gamma_bb[index]*gx*t112871*4.0;
                double t112943 = gamma_bb[index]*gx*t112913*t112934*t112908*4.0;
                double t112944 = t112912*t112934*t112908*6.0;
                double t112945 = t112911*t112920*t112935;
                double t112946 = t112942+t112943+t112944+t112945+1.0;
                double t112947 = gamma_bb[index]*gx*t112871*2.0;
                double t112948 = t112912*t112934*t112908;
                double t112949 = t112947+t112948+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t112907+rho_a[index]*(t112894-t112820*t112823*(t112894-c0f*log((t112824* \
                   (1.0/2.0))/(b1f*t112802+b3f*t112803+b2f*c*t112800+b4f*t112804*t112805)+1.0)*(a1f*c*t112800+1.0)*2.0) \
                   )-t112842*(t112859-t112823*t112870*t112864*t112865*(t112859-c0f*log((t112824*(1.0/2.0))/(b1f*t112845+ \
                   b3f*t112846+b2f*c*t112843+b4f*t112804*t112847)+1.0)*(a1f*c*t112843+1.0)*2.0)+(Aa*t112823*t112870*log((1.0/ \
                   2.0)/(Aa*(b1a*t112845+b3a*t112846+b2a*c*t112843+b4a*t112804*t112847))+1.0)*(t112864*t112865-1.0)*(a1a* \
                   c*t112843+1.0)*2.0)/d2fz0))*((ccab1*gcab*t112871*(1.0/2.0))/t112877-ccab4*t112880*t112881*1.0/(t112893* \
                   t112893)*(gcab*t112871*2.0+t112871*t112875*t112878*6.0+gcab*t112871*t112878*t112879*6.0+t112871*t112880* \
                   t112875*t112879*2.0)-ccab2*1.0/(t112884*t112884)*t112878*t112879*(gcab*t112871+t112871*t112875*t112878) \
                   +(ccab2*t112871*t112875*t112878)/t112884-ccab1*t112871*t112875*1.0/(t112877*t112877)*t112878*(1.0/ \
                   2.0)+(ccab3*gcab*t112871*t112878*t112879*(3.0/2.0))/t112888+(ccab4*t112871*t112880*t112875*t112879* \
                   2.0)/t112893-ccab3*gcab*t112875*t112878*t112879*1.0/(t112888*t112888)*(gcab*t112871*(3.0/2.0)+t112871* \
                   t112875*t112878*3.0+gcab*t112871*t112878*t112879*(3.0/2.0)))-rho_b[index]*t112907*((ccaa1*gcaa*t112871) \
                   /t112915-ccaa1*gamma_bb[index]*t112912*1.0/(t112915*t112915)*t112909+(ccaa2*gamma_bb[index]*t112912* \
                   t112909*2.0)/t112928-ccaa2*t112912*t112908*t112909*1.0/(t112928*t112928)*(gcaa*t112871*2.0+gamma_bb[index]* \
                   t112912*t112909*2.0)+(ccaa4*gamma_bb[index]*t112910*t112911*t112908*4.0)/t112925+(ccaa3*gcaa*t112913* \
                   t112908*t112909*3.0)/t112919-ccaa4*t112910*t112911*t112920*1.0/(t112925*t112925)*(gcaa*t112871*4.0+ \
                   gamma_bb[index]*t112912*t112909*1.2E1+gamma_bb[index]*t112910*t112911*t112908*4.0+gcaa*t112913*t112908* \
                   t112909*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t112913*t112908*t112909*1.0/(t112919*t112919)*(gcaa*t112871* \
                   3.0+gamma_bb[index]*t112912*t112909*6.0+gcaa*t112913*t112908*t112909*3.0))-c0*pow(rho_b[index],4.0/ \
                   3.0)*(omega*t112930*(erf(pow(t112929,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega* \
                   t112930*(t112933-(omega*omega)*1.0/pow(t112929,2.0/3.0)*(t112933-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1* \
                   gx*t112871)/t112937-cx1*gamma_bb[index]*t112912*t112934*1.0/(t112937*t112937)+(cx2*gamma_bb[index]* \
                   t112912*t112934*2.0)/t112949-cx2*t112912*t112934*t112908*1.0/(t112949*t112949)*(gx*t112871*2.0+gamma_bb[index]* \
                   t112912*t112934*2.0)+(cx4*gamma_bb[index]*t112911*t112908*t112935*4.0)/t112946+(cx3*gx*t112913*t112934* \
                   t112908*3.0)/t112941-cx4*t112911*t112920*t112935*1.0/(t112946*t112946)*(gx*t112871*4.0+gamma_bb[index]* \
                   t112912*t112934*1.2E1+gamma_bb[index]*t112911*t112908*t112935*4.0+gx*t112913*t112934*t112908*1.2E1) \
                   -cx3*gamma_bb[index]*gx*t112913*1.0/(t112941*t112941)*t112934*t112908*(gx*t112871*3.0+gamma_bb[index]* \
                   t112912*t112934*6.0+gx*t112913*t112934*t112908*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t115897 = 1.0/pow(rho_b[index],1.0/3.0);
                double t115898 = c*t115897;
                double t115899 = sqrt(t115898);
                double t115900 = pow(t115898,3.0/2.0);
                double t115901 = c*c;
                double t115902 = 1.0/pow(rho_b[index],2.0/3.0);
                double t115903 = 1.0/c0p;
                double t115904 = b1p*t115899;
                double t115905 = b3p*t115900;
                double t115906 = b4p*t115901*t115902;
                double t115907 = b2p*c*t115897;
                double t115908 = t115904+t115905+t115906+t115907;
                double t115909 = 1.0/t115908;
                double t115910 = t115903*t115909*(1.0/2.0);
                double t115911 = t115910+1.0;
                double t115912 = log(t115911);
                double t115913 = a1p*c*t115897;
                double t115914 = t115913+1.0;
                double t115915 = 1.0/pow(rho_b[index],8.0/3.0);
                double t115916 = gamma_bb[index]*gamma_bb[index];
                double t115917 = gcaa*gcaa;
                double t115918 = t115917*t115917;
                double t115919 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t115920 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t115921 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t115922 = gamma_bb[index]*gcaa*t115915;
                double t115923 = t115922+1.0;
                double t115924 = gamma_bb[index]*gcaa*t115915*3.0;
                double t115925 = gamma_bb[index]*gcaa*t115921*t115916*t115917;
                double t115926 = t115920*t115916*t115917*3.0;
                double t115927 = t115924+t115925+t115926+1.0;
                double t115928 = t115916*t115916;
                double t115929 = gamma_bb[index]*gcaa*t115915*4.0;
                double t115930 = gamma_bb[index]*gcaa*t115921*t115916*t115917*4.0;
                double t115931 = t115920*t115916*t115917*6.0;
                double t115932 = t115918*t115919*t115928;
                double t115933 = t115930+t115931+t115932+t115929+1.0;
                double t115934 = gamma_bb[index]*gcaa*t115915*2.0;
                double t115935 = t115920*t115916*t115917;
                double t115936 = t115934+t115935+1.0;
                double t115937 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t115938 = 1.0/pow(t115937,1.0/3.0);
                double t115939 = 1.0/(omega*omega);
                double t115940 = pow(t115937,2.0/3.0);
                double t115941 = exp(-t115940*t115939);
                double t115942 = gx*gx;
                double t115943 = t115942*t115942;
                double t115944 = gamma_bb[index]*gx*t115915;
                double t115945 = t115944+1.0;
                double t115946 = gamma_bb[index]*gx*t115915*3.0;
                double t115947 = gamma_bb[index]*gx*t115921*t115942*t115916;
                double t115948 = t115920*t115942*t115916*3.0;
                double t115949 = t115946+t115947+t115948+1.0;
                double t115950 = gamma_bb[index]*gx*t115915*4.0;
                double t115951 = gamma_bb[index]*gx*t115921*t115942*t115916*4.0;
                double t115952 = t115920*t115942*t115916*6.0;
                double t115953 = t115943*t115919*t115928;
                double t115954 = t115950+t115951+t115952+t115953+1.0;
                double t115955 = gamma_bb[index]*gx*t115915*2.0;
                double t115956 = t115920*t115942*t115916;
                double t115957 = t115955+t115956+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t115899+ \
                   b3f*t115900+b2f*c*t115897+b4f*t115901*t115902))+1.0)*(a1f*c*t115897+1.0)*2.0-c0p*t115912*t115914*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t115912*t115914*2.0)*((ccaa1*gcaa*t115915)/t115923-ccaa1*gamma_bb[index]*t115920* \
                   1.0/(t115923*t115923)*t115917+(ccaa2*gamma_bb[index]*t115920*t115917*2.0)/t115936-ccaa2*t115920*t115916* \
                   t115917*1.0/(t115936*t115936)*(gcaa*t115915*2.0+gamma_bb[index]*t115920*t115917*2.0)+(ccaa4*gamma_bb[index]* \
                   t115916*t115918*t115919*4.0)/t115933+(ccaa3*gcaa*t115921*t115916*t115917*3.0)/t115927-ccaa4*1.0/(t115933* \
                   t115933)*t115918*t115919*t115928*(gcaa*t115915*4.0+gamma_bb[index]*t115920*t115917*1.2E1+gamma_bb[index]* \
                   t115916*t115918*t115919*4.0+gcaa*t115921*t115916*t115917*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t115921* \
                   t115916*t115917*1.0/(t115927*t115927)*(gcaa*t115915*3.0+gamma_bb[index]*t115920*t115917*6.0+gcaa*t115921* \
                   t115916*t115917*3.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t115938*(erf(pow(t115937,1.0/3.0)/omega) \
                   *(3.991211251234741E15/2.251799813685248E15)+omega*t115938*(t115941-(omega*omega)*1.0/pow(t115937,2.0/ \
                   3.0)*(t115941-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1*gx*t115915)/t115945-cx1*gamma_bb[index]*t115920* \
                   t115942*1.0/(t115945*t115945)+(cx2*gamma_bb[index]*t115920*t115942*2.0)/t115957-cx2*t115920*t115942* \
                   t115916*1.0/(t115957*t115957)*(gx*t115915*2.0+gamma_bb[index]*t115920*t115942*2.0)+(cx4*gamma_bb[index]* \
                   t115916*t115943*t115919*4.0)/t115954+(cx3*gx*t115921*t115942*t115916*3.0)/t115949-cx4*t115943*1.0/ \
                   (t115954*t115954)*t115919*t115928*(gx*t115915*4.0+gamma_bb[index]*t115920*t115942*1.2E1+gamma_bb[index]* \
                   t115916*t115943*t115919*4.0+gx*t115921*t115942*t115916*1.2E1)-cx3*gamma_bb[index]*gx*t115921*t115942* \
                   t115916*1.0/(t115949*t115949)*(gx*t115915*3.0+gamma_bb[index]*t115920*t115942*6.0+gx*t115921*t115942* \
                   t115916*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t112953 = rho_a[index]+rho_b[index];
            double t112954 = 1.0/pow(t112953,1.0/3.0);
            double t112955 = c*t112954;
            double t112956 = sqrt(t112955);
            double t112957 = b1p*t112956;
            double t112958 = pow(t112955,3.0/2.0);
            double t112959 = b3p*t112958;
            double t112960 = c*c;
            double t112961 = 1.0/pow(t112953,2.0/3.0);
            double t112962 = b4p*t112960*t112961;
            double t112963 = b2p*c*t112954;
            double t112964 = t112962+t112963+t112957+t112959;
            double t112965 = 1.0/pow(t112953,4.0/3.0);
            double t112966 = 1.0/c0p;
            double t112967 = 1.0/t112964;
            double t112968 = t112966*t112967*(1.0/2.0);
            double t112969 = t112968+1.0;
            double t112970 = a1p*c*t112954;
            double t112971 = t112970+1.0;
            double t112972 = rho_a[index]-rho_b[index];
            double t112973 = t112972*t112972;
            double t112974 = 1.0/t112953;
            double t112975 = t112972*t112974;
            double t112976 = two_13*2.0;
            double t112977 = t112976-2.0;
            double t112978 = 1.0/t112977;
            double t112979 = 1.0/c0f;
            double t112980 = b1f*t112956;
            double t112981 = b3f*t112958;
            double t112982 = b4f*t112960*t112961;
            double t112983 = b2f*c*t112954;
            double t112984 = t112980+t112981+t112982+t112983;
            double t112985 = 1.0/t112984;
            double t112986 = t112985*t112979*(1.0/2.0);
            double t112987 = t112986+1.0;
            double t112988 = log(t112987);
            double t112989 = a1f*c*t112954;
            double t112990 = t112989+1.0;
            double t112991 = log(t112969);
            double t113001 = c0f*t112990*t112988*2.0;
            double t113002 = c0p*t112971*t112991*2.0;
            double t112992 = t113001-t113002;
            double t112993 = t112975+1.0;
            double t112994 = pow(t112993,4.0/3.0);
            double t112995 = -t112975+1.0;
            double t112996 = pow(t112995,4.0/3.0);
            double t112997 = t112994+t112996-2.0;
            double t112998 = 1.0/(t112953*t112953);
            double t113029 = t112972*t112998;
            double t112999 = -t113029+t112974;
            double t113000 = 1.0/(t112953*t112953*t112953*t112953);
            double t113003 = t112973*t112973;
            double t113004 = 1.0/pow(t112953,5.0/3.0);
            double t113005 = 1.0/sqrt(t112955);
            double t113006 = 1.0/t112969;
            double t113007 = 1.0/(t112964*t112964);
            double t113008 = b4p*t113004*t112960*(2.0/3.0);
            double t113009 = b2p*c*t112965*(1.0/3.0);
            double t113010 = b1p*c*t113005*t112965*(1.0/6.0);
            double t113011 = b3p*c*t112956*t112965*(1.0/2.0);
            double t113012 = t113010+t113011+t113008+t113009;
            double t113013 = t113012*t113006*t113007*t112971;
            double t113014 = 1.0/(t112953*t112953*t112953*t112953*t112953);
            double t113015 = 1.0/d2fz0;
            double t113016 = 1.0/Aa;
            double t113017 = b1a*t112956;
            double t113018 = b3a*t112958;
            double t113019 = b4a*t112960*t112961;
            double t113020 = b2a*c*t112954;
            double t113021 = t113020+t113017+t113018+t113019;
            double t113022 = 1.0/t113021;
            double t113023 = t113022*t113016*(1.0/2.0);
            double t113024 = t113023+1.0;
            double t113025 = log(t113024);
            double t113026 = a1a*c*t112954;
            double t113027 = t113026+1.0;
            double t113028 = pow(t112993,1.0/3.0);
            double t113030 = t113028*t112999*(4.0/3.0);
            double t113031 = pow(t112995,1.0/3.0);
            double t113106 = t113031*t112999*(4.0/3.0);
            double t113032 = t113030-t113106;
            double t113033 = t113000*t113003;
            double t113034 = t113033-1.0;
            double t113035 = 1.0/pow(rho_a[index],1.0/3.0);
            double t113036 = c*t113035;
            double t113037 = sqrt(t113036);
            double t113038 = b1f*t113037;
            double t113039 = pow(t113036,3.0/2.0);
            double t113040 = b3f*t113039;
            double t113041 = 1.0/pow(rho_a[index],2.0/3.0);
            double t113042 = b4f*t113041*t112960;
            double t113043 = b2f*c*t113035;
            double t113044 = t113040+t113042+t113043+t113038;
            double t113045 = 1.0/pow(rho_a[index],4.0/3.0);
            double t113046 = b1p*t113037;
            double t113047 = b3p*t113039;
            double t113048 = b4p*t113041*t112960;
            double t113049 = b2p*c*t113035;
            double t113050 = t113046+t113047+t113048+t113049;
            double t113051 = 1.0/pow(rho_a[index],5.0/3.0);
            double t113052 = 1.0/sqrt(t113036);
            double t113053 = 1.0/t113044;
            double t113054 = t113053*t112979*(1.0/2.0);
            double t113055 = t113054+1.0;
            double t113056 = 1.0/t113050;
            double t113057 = t113056*t112966*(1.0/2.0);
            double t113058 = t113057+1.0;
            double t113059 = a1p*c*t113035;
            double t113060 = t113059+1.0;
            double t113061 = 1.0/t113058;
            double t113062 = 1.0/(t113050*t113050);
            double t113063 = b4p*t113051*t112960*(2.0/3.0);
            double t113064 = b2p*c*t113045*(1.0/3.0);
            double t113065 = b1p*c*t113052*t113045*(1.0/6.0);
            double t113066 = b3p*c*t113045*t113037*(1.0/2.0);
            double t113067 = t113063+t113064+t113065+t113066;
            double t113068 = t113060*t113061*t113062*t113067;
            double t113069 = log(t113058);
            double t113070 = pow(2.0,1.0/3.0);
            double t113071 = t113070*2.0;
            double t113072 = t113071-2.0;
            double t113073 = log(t113055);
            double t113074 = a1f*c*t113035;
            double t113075 = t113074+1.0;
            double t113076 = gcab*gcab;
            double t113080 = 1.0/pow(rho_a[index],8.0/3.0);
            double t113081 = gamma_aa[index]*t113080*(1.0/2.0);
            double t113082 = 1.0/pow(rho_b[index],8.0/3.0);
            double t113083 = gamma_bb[index]*t113082*(1.0/2.0);
            double t113077 = t113081+t113083;
            double t113078 = t113077*t113077;
            double t113079 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t113084 = t113076*t113076;
            double t113085 = t113078*t113078;
            double t113086 = t113076*t113078*6.0;
            double t113087 = gcab*t113076*t113077*t113078*4.0;
            double t113088 = t113084*t113085;
            double t113089 = gcab*t113077*4.0;
            double t113090 = t113086+t113087+t113088+t113089+1.0;
            double t113091 = gcab*t113077;
            double t113092 = t113091+1.0;
            double t113093 = t113076*t113078;
            double t113094 = gcab*t113077*2.0;
            double t113095 = t113093+t113094+1.0;
            double t113096 = t113076*t113078*3.0;
            double t113097 = gcab*t113076*t113077*t113078;
            double t113098 = gcab*t113077*3.0;
            double t113099 = t113096+t113097+t113098+1.0;
            double t113100 = 1.0/t113095;
            double t113101 = 1.0/t113099;
            double t113102 = 1.0/t113092;
            double t113103 = 1.0/t113090;
            double t113104 = 1.0/pow(t112953,7.0/3.0);
            double t113105 = 1.0/pow(t112953,8.0/3.0);
            double t113107 = 1.0/t112987;
            double t113108 = 1.0/(t112984*t112984);
            double t113109 = b4f*t113004*t112960*(2.0/3.0);
            double t113110 = b2f*c*t112965*(1.0/3.0);
            double t113111 = b1f*c*t113005*t112965*(1.0/6.0);
            double t113112 = b3f*c*t112956*t112965*(1.0/2.0);
            double t113113 = t113110+t113111+t113112+t113109;
            double t113114 = a1f*c*c0f*t112965*t112988*(2.0/3.0);
            double t113116 = t113113*t113107*t113108*t112990;
            double t113117 = a1p*c*c0p*t112991*t112965*(2.0/3.0);
            double t113115 = t113013+t113114-t113116-t113117;
            double t113118 = t113012*t113012;
            double t113119 = 1.0/pow(t112955,3.0/2.0);
            double t113120 = b4p*t113105*t112960*(1.0E1/9.0);
            double t113121 = b2p*c*t113104*(4.0/9.0);
            double t113122 = b1p*c*t113005*t113104*(2.0/9.0);
            double t113123 = b3p*c*t113104*t112956*(2.0/3.0);
            double t113124 = b3p*t113005*t113105*t112960*(1.0/1.2E1);
            double t113125 = t113120+t113121+t113122+t113123+t113124-b1p*t113105*t113119*t112960*(1.0/3.6E1);
            double t113126 = 1.0/(t112964*t112964*t112964);
            double t113127 = t113006*t113126*t113118*t112971*2.0;
            double t113128 = t113113*t113113;
            double t113129 = 1.0/(t112969*t112969);
            double t113130 = 1.0/(t112964*t112964*t112964*t112964);
            double t113131 = t112998*2.0;
            double t113132 = 1.0/(t112953*t112953*t112953);
            double t113139 = t113132*t112972*2.0;
            double t113133 = t113131-t113139;
            double t113134 = t112999*t112999;
            double t113135 = a1p*c*c0p*t113104*t112991*(8.0/9.0);
            double t113136 = 1.0/(t112953*t112953*t112953*t112953*t112953*t112953);
            double t113137 = t113003*t113014*4.0;
            double t113147 = t113000*t112972*t112973*4.0;
            double t113138 = t113137-t113147;
            double t113140 = t113031*t113133*(4.0/3.0);
            double t113141 = 1.0/pow(t112993,2.0/3.0);
            double t113142 = t113141*t113134*(4.0/9.0);
            double t113143 = 1.0/pow(t112995,2.0/3.0);
            double t113144 = t113134*t113143*(4.0/9.0);
            double t113145 = t113140+t113142+t113144-t113133*t113028*(4.0/3.0);
            double t113146 = 1.0/t113024;
            double t113148 = 1.0/(t113021*t113021);
            double t113149 = b4a*t113004*t112960*(2.0/3.0);
            double t113150 = b2a*c*t112965*(1.0/3.0);
            double t113151 = b1a*c*t113005*t112965*(1.0/6.0);
            double t113152 = b3a*c*t112956*t112965*(1.0/2.0);
            double t113153 = t113150+t113151+t113152+t113149;
            double t113154 = t113153*t113153;
            double t113155 = t113006*t113007*t113125*t112971;
            double t113156 = 1.0/t113055;
            double t113157 = b4f*t113051*t112960*(2.0/3.0);
            double t113158 = b2f*c*t113045*(1.0/3.0);
            double t113159 = b1f*c*t113052*t113045*(1.0/6.0);
            double t113160 = b3f*c*t113045*t113037*(1.0/2.0);
            double t113161 = t113160+t113157+t113158+t113159;
            double t113162 = 1.0/(t113044*t113044);
            double t113163 = 1.0/pow(rho_a[index],7.0/3.0);
            double t113164 = 1.0/pow(t113036,3.0/2.0);
            double t113165 = t113161*t113161;
            double t113166 = t113067*t113067;
            double t113167 = 1.0/(t113050*t113050*t113050);
            double t113168 = t113060*t113061*t113166*t113167*2.0;
            double t113169 = b4p*t113080*t112960*(1.0E1/9.0);
            double t113170 = b2p*c*t113163*(4.0/9.0);
            double t113171 = b3p*t113052*t113080*t112960*(1.0/1.2E1);
            double t113172 = b1p*c*t113052*t113163*(2.0/9.0);
            double t113173 = b3p*c*t113037*t113163*(2.0/3.0);
            double t113289 = b1p*t113080*t113164*t112960*(1.0/3.6E1);
            double t113174 = t113170+t113171+t113172+t113173+t113169-t113289;
            double t113175 = 1.0/(t113058*t113058);
            double t113176 = 1.0/(t113050*t113050*t113050*t113050);
            double t113177 = a1p*c*c0p*t113163*t113069*(8.0/9.0);
            double t113178 = a1f*c*c0f*t113045*t113073*(2.0/3.0);
            double t113179 = a1p*c*c0p*t113045*t113069*(2.0/3.0);
            double t113180 = t113130*t113118*t113129*t112971*t112966*(1.0/2.0);
            double t113252 = t113161*t113162*t113075*t113156;
            double t113181 = -t113252+t113068+t113178-t113179;
            double t113182 = gamma_aa[index]*gamma_aa[index];
            double t113183 = gcaa*gcaa;
            double t113184 = t113182*t113182;
            double t113185 = t113183*t113183;
            double t113186 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t113187 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t113188 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t113189 = c0f*t113073*t113075*2.0;
            double t113191 = c0p*t113060*t113069*2.0;
            double t113190 = -t113191+t113189;
            double t113192 = 1.0/pow(rho_b[index],1.0/3.0);
            double t113193 = c*t113192;
            double t113194 = sqrt(t113193);
            double t113195 = pow(t113193,3.0/2.0);
            double t113196 = 1.0/pow(rho_b[index],2.0/3.0);
            double t113197 = b1p*t113194;
            double t113198 = b3p*t113195;
            double t113199 = b4p*t112960*t113196;
            double t113200 = b2p*c*t113192;
            double t113201 = t113200+t113197+t113198+t113199;
            double t113202 = 1.0/t113201;
            double t113203 = t113202*t112966*(1.0/2.0);
            double t113204 = t113203+1.0;
            double t113205 = log(t113204);
            double t113206 = a1p*c*t113192;
            double t113207 = t113206+1.0;
            double t113208 = c0p*t113205*t113207*2.0;
            double t113209 = t113000*t113003*t112992*t112978*t112997;
            double t113210 = Aa*t113015*t113025*t113034*t113027*t112978*t112997*2.0;
            double t113211 = gamma_aa[index]*gcab*t113079*(1.6E1/3.0);
            double t113212 = gamma_aa[index]*gcab*t113076*t113078*t113079*1.6E1;
            double t113213 = gamma_aa[index]*t113084*t113077*t113078*t113079*(1.6E1/3.0);
            double t113214 = gamma_aa[index]*t113076*t113077*t113079*1.6E1;
            double t113215 = t113211+t113212+t113213+t113214;
            double t113216 = 1.0/(t113092*t113092);
            double t113217 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t113218 = gamma_aa[index]*gcab*t113079*(8.0/3.0);
            double t113219 = gamma_aa[index]*t113076*t113077*t113079*(8.0/3.0);
            double t113220 = t113218+t113219;
            double t113221 = 1.0/(t113099*t113099);
            double t113222 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t113223 = 1.0/(t113090*t113090);
            double t113224 = 1.0/(t113095*t113095);
            double t113225 = gamma_aa[index]*gcab*t113079*4.0;
            double t113226 = gamma_aa[index]*gcab*t113076*t113078*t113079*4.0;
            double t113227 = gamma_aa[index]*t113076*t113077*t113079*8.0;
            double t113228 = t113225+t113226+t113227;
            double t113229 = t113072*t113190*t112978;
            double t113230 = t113191+t113229;
            double t113231 = gamma_aa[index]*gcaa*t113080*4.0;
            double t113232 = gamma_aa[index]*gcaa*t113182*t113183*t113187*4.0;
            double t113233 = t113182*t113183*t113188*6.0;
            double t113234 = t113184*t113185*t113186;
            double t113235 = t113231+t113232+t113233+t113234+1.0;
            double t113236 = 1.0/t113235;
            double t113237 = gamma_aa[index]*gcaa*t113080;
            double t113238 = t113237+1.0;
            double t113239 = 1.0/t113238;
            double t113240 = gamma_aa[index]*gcaa*t113080*3.0;
            double t113241 = gamma_aa[index]*gcaa*t113182*t113183*t113187;
            double t113242 = t113182*t113183*t113188*3.0;
            double t113243 = t113240+t113241+t113242+1.0;
            double t113244 = 1.0/t113243;
            double t113245 = gamma_aa[index]*gcaa*t113080*2.0;
            double t113246 = t113182*t113183*t113188;
            double t113247 = t113245+t113246+1.0;
            double t113248 = 1.0/t113247;
            double t113249 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t113250 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t113251 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t113253 = ccaa4*t113251*t113236*t113184*t113185*(3.2E1/3.0);
            double t113254 = ccaa1*gamma_aa[index]*gcaa*t113239*t113079*(8.0/3.0);
            double t113255 = ccaa3*gamma_aa[index]*gcaa*t113250*t113244*t113182*t113183*8.0;
            double t113256 = ccaa2*t113182*t113183*t113248*t113249*(1.6E1/3.0);
            double t113257 = 1.0/(t113238*t113238);
            double t113258 = gamma_aa[index]*gcaa*t113079*8.0;
            double t113259 = gamma_aa[index]*gcaa*t113250*t113182*t113183*8.0;
            double t113260 = t113182*t113183*t113249*1.6E1;
            double t113261 = t113260+t113258+t113259;
            double t113262 = 1.0/(t113243*t113243);
            double t113263 = gamma_aa[index]*gcaa*t113079*(3.2E1/3.0);
            double t113264 = gamma_aa[index]*gcaa*t113250*t113182*t113183*3.2E1;
            double t113265 = t113182*t113183*t113249*3.2E1;
            double t113266 = t113251*t113184*t113185*(3.2E1/3.0);
            double t113267 = t113263+t113264+t113265+t113266;
            double t113268 = 1.0/(t113235*t113235);
            double t113269 = gamma_aa[index]*gcaa*t113079*(1.6E1/3.0);
            double t113270 = t113182*t113183*t113249*(1.6E1/3.0);
            double t113271 = t113270+t113269;
            double t113272 = 1.0/(t113247*t113247);
            double t113273 = t113253+t113254+t113255+t113256-ccaa1*t113182*t113183*t113257*t113249*(8.0/3.0)- \
               ccaa2*t113271*t113182*t113272*t113183*t113188-ccaa4*t113184*t113185*t113186*t113267*t113268-ccaa3* \
               gamma_aa[index]*gcaa*t113261*t113262*t113182*t113183*t113187;
            double t113274 = 1.0/pow(rho_a[index],1.0E1);
            double t113275 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t113276 = ccaa4*t113236*t113184*t113185*t113186;
            double t113277 = ccaa1*gamma_aa[index]*gcaa*t113080*t113239;
            double t113278 = ccaa3*gamma_aa[index]*gcaa*t113244*t113182*t113183*t113187;
            double t113279 = ccaa2*t113182*t113183*t113248*t113188;
            double t113280 = ccaa0+t113276+t113277+t113278+t113279;
            double t113281 = 1.0/(t113044*t113044*t113044);
            double t113282 = b4f*t113080*t112960*(1.0E1/9.0);
            double t113283 = b2f*c*t113163*(4.0/9.0);
            double t113284 = b3f*t113052*t113080*t112960*(1.0/1.2E1);
            double t113285 = b1f*c*t113052*t113163*(2.0/9.0);
            double t113286 = b3f*c*t113037*t113163*(2.0/3.0);
            double t113287 = t113282+t113283+t113284+t113285+t113286-b1f*t113080*t113164*t112960*(1.0/3.6E1);
            double t113288 = t113162*t113075*t113156*t113287;
            double t113290 = t113060*t113061*t113062*t113174;
            double t113291 = 1.0/(t113055*t113055);
            double t113292 = 1.0/(t113044*t113044*t113044*t113044);
            double t113293 = t113075*t113165*t113291*t113292*t112979*(1.0/2.0);
            double t113294 = t113060*t113166*t113175*t113176*t112966*(1.0/2.0);
            double t113295 = a1f*c*t113161*t113045*t113162*t113156*(2.0/3.0);
            double t113296 = a1p*c*t113061*t113062*t113045*t113067*(2.0/3.0);
            double t113297 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t113298 = 1.0/(omega*omega);
            double t113299 = pow(t113297,2.0/3.0);
            double t113302 = t113298*t113299;
            double t113300 = exp(-t113302);
            double t113301 = 1.0/pow(t113297,1.0/3.0);
            double t113303 = 1.0/pow(t113297,2.0/3.0);
            double t113304 = omega*omega;
            double t113305 = t113300-1.0;
            double t113306 = 1.0/pow(t113297,4.0/3.0);
            double t113307 = 1.0/rho_a[index];
            double t113308 = 1.0/pow(t113297,5.0/3.0);
            double t113309 = 1.0/sqrt(3.141592653589793);
            double t113316 = t113303*t113304*t113305*(1.0/2.0);
            double t113310 = t113300-t113316;
            double t113311 = t113300*t113307*(1.0/3.0);
            double t113312 = t113304*t113305*t113308*(2.778046668940015E15/1.40737488355328E14);
            double t113359 = t113300*t113301*t113298*(2.778046668940015E15/7.0368744177664E13);
            double t113313 = t113311+t113312-t113359;
            double t113314 = 1.0/omega;
            double t113315 = 1.0/pow(t113297,7.0/3.0);
            double t113317 = gx*gx;
            double t113318 = t113317*t113317;
            double t113319 = pow(rho_a[index],4.0/3.0);
            double t113320 = pow(t113297,1.0/3.0);
            double t113321 = t113320*t113314;
            double t113322 = erf(t113321);
            double t113323 = t113322*(3.991211251234741E15/2.251799813685248E15);
            double t113324 = omega*t113301*t113310;
            double t113325 = t113323+t113324;
            double t113326 = gamma_aa[index]*gx*t113080*4.0;
            double t113327 = gamma_aa[index]*gx*t113182*t113317*t113187*4.0;
            double t113328 = t113182*t113317*t113188*6.0;
            double t113329 = t113318*t113184*t113186;
            double t113330 = t113326+t113327+t113328+t113329+1.0;
            double t113331 = 1.0/t113330;
            double t113332 = gamma_aa[index]*gx*t113080;
            double t113333 = t113332+1.0;
            double t113334 = 1.0/t113333;
            double t113335 = gamma_aa[index]*gx*t113080*3.0;
            double t113336 = gamma_aa[index]*gx*t113182*t113317*t113187;
            double t113337 = t113182*t113317*t113188*3.0;
            double t113338 = t113335+t113336+t113337+1.0;
            double t113339 = 1.0/t113338;
            double t113340 = gamma_aa[index]*gx*t113080*2.0;
            double t113341 = t113182*t113317*t113188;
            double t113342 = t113340+t113341+1.0;
            double t113343 = 1.0/t113342;
            double t113351 = gamma_aa[index]*gx*t113079*(3.2E1/3.0);
            double t113352 = gamma_aa[index]*gx*t113250*t113182*t113317*3.2E1;
            double t113353 = t113182*t113317*t113249*3.2E1;
            double t113354 = t113251*t113318*t113184*(3.2E1/3.0);
            double t113344 = t113351+t113352+t113353+t113354;
            double t113356 = gamma_aa[index]*gx*t113079*(1.6E1/3.0);
            double t113357 = t113182*t113317*t113249*(1.6E1/3.0);
            double t113345 = t113356+t113357;
            double t113346 = 1.0/(t113338*t113338);
            double t113347 = gamma_aa[index]*gx*t113079*8.0;
            double t113348 = gamma_aa[index]*gx*t113250*t113182*t113317*8.0;
            double t113349 = t113182*t113317*t113249*1.6E1;
            double t113350 = t113347+t113348+t113349;
            double t113355 = 1.0/(t113330*t113330);
            double t113358 = 1.0/(t113342*t113342);
            double t113360 = omega*t113301*t113313;
            double t113361 = t113300*t113303*t113314*t113309*(1.108777112152858E31/1.584563250285287E29);
            double t113370 = omega*t113310*t113306*(2.778046668940015E15/1.40737488355328E14);
            double t113362 = t113360+t113361-t113370;
            double t113363 = cx4*t113331*t113318*t113184*t113186;
            double t113364 = cx1*gamma_aa[index]*gx*t113080*t113334;
            double t113365 = cx3*gamma_aa[index]*gx*t113182*t113317*t113339*t113187;
            double t113366 = cx2*t113343*t113182*t113317*t113188;
            double t113367 = cx0+t113363+t113364+t113365+t113366;
            double t113368 = omega*t113301*t113325*(4.0/3.0);
            double t113369 = t113368-1.0;
            double t113371 = omega*t113301*t113362*(4.0/3.0);
            double t113372 = t113371-omega*t113306*t113325*(2.778046668940015E15/1.05553116266496E14);
            double t113373 = 1.0/(t113333*t113333);
            double t113374 = pow(rho_a[index],1.0/3.0);
            double t113375 = cx4*t113331*t113251*t113318*t113184*(3.2E1/3.0);
            double t113376 = cx1*gamma_aa[index]*gx*t113334*t113079*(8.0/3.0);
            double t113377 = cx3*gamma_aa[index]*gx*t113250*t113182*t113317*t113339*8.0;
            double t113378 = cx2*t113343*t113182*t113317*t113249*(1.6E1/3.0);
            double t113379 = t113375+t113376+t113377+t113378-cx1*t113182*t113317*t113373*t113249*(8.0/3.0)-cx2* \
               t113182*t113317*t113345*t113358*t113188-cx4*t113344*t113318*t113184*t113355*t113186-cx3*gamma_aa[index]* \
               gx*t113350*t113182*t113317*t113346*t113187;
            v_rho_a_rho_a_[index] = (rho_a[index]*t113230+rho_b[index]*(t113208-t113072*t112978*(t113208-c0f* \
               log((t112979*(1.0/2.0))/(b1f*t113194+b3f*t113195+b2f*c*t113192+b4f*t112960*t113196)+1.0)*(a1f*c*t113192+ \
               1.0)*2.0))-t112953*(t113002+t113210+t113209))*(-ccab2*t113224*t113076*t113078*(gamma_aa[index]*gcab* \
               t113222*(8.8E1/9.0)+t113217*t113182*t113076*(3.2E1/9.0)+gamma_aa[index]*t113222*t113076*t113077*(8.8E1/ \
               9.0))+ccab4*(t113215*t113215)*1.0/(t113090*t113090*t113090)*t113084*t113085*2.0+ccab2*(t113220*t113220) \
               *t113076*1.0/(t113095*t113095*t113095)*t113078*2.0+ccab1*gamma_aa[index]*gcab*t113102*t113222*(4.4E1/ \
               9.0)+ccab2*t113100*t113217*t113182*t113076*(3.2E1/9.0)-ccab1*t113216*t113217*t113182*t113076*(3.2E1/ \
               9.0)-ccab4*t113223*t113084*t113085*(gamma_aa[index]*gcab*t113222*(1.76E2/9.0)+t113217*t113182*t113076* \
               (6.4E1/3.0)+gamma_aa[index]*t113222*t113076*t113077*(1.76E2/3.0)+t113217*t113182*t113084*t113078*(6.4E1/ \
               3.0)+gamma_aa[index]*gcab*t113222*t113076*t113078*(1.76E2/3.0)+gamma_aa[index]*t113222*t113084*t113077* \
               t113078*(1.76E2/9.0)+gcab*t113217*t113182*t113076*t113077*(1.28E2/3.0))+ccab4*t113103*t113217*t113182* \
               t113084*t113078*(6.4E1/3.0)+ccab2*gamma_aa[index]*t113100*t113222*t113076*t113077*(8.8E1/9.0)-ccab1* \
               gamma_aa[index]*t113222*t113216*t113076*t113077*(4.4E1/9.0)+ccab3*gcab*(t113228*t113228)*t113076*t113077* \
               t113078*1.0/(t113099*t113099*t113099)*2.0+ccab3*gamma_aa[index]*gcab*t113101*t113222*t113076*t113078* \
               (4.4E1/3.0)+ccab4*gamma_aa[index]*t113103*t113222*t113084*t113077*t113078*(1.76E2/9.0)-ccab2*gamma_aa[index]* \
               t113220*t113224*t113076*t113077*t113079*(1.6E1/3.0)+ccab3*gcab*t113101*t113217*t113182*t113076*t113077* \
               (3.2E1/3.0)+ccab1*gcab*t113217*1.0/(t113092*t113092*t113092)*t113182*t113076*t113077*(3.2E1/9.0)-ccab3* \
               gcab*t113221*t113076*t113077*t113078*(gamma_aa[index]*gcab*t113222*(4.4E1/3.0)+t113217*t113182*t113076* \
               (3.2E1/3.0)+gamma_aa[index]*t113222*t113076*t113077*(8.8E1/3.0)+gamma_aa[index]*gcab*t113222*t113076* \
               t113078*(4.4E1/3.0)+gcab*t113217*t113182*t113076*t113077*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t113221* \
               t113228*t113076*t113078*t113079*8.0-ccab4*gamma_aa[index]*t113223*t113215*t113084*t113077*t113078* \
               t113079*(3.2E1/3.0))+t113280*(-t113068+t113179+t113072*t113181*t112978)*2.0+t113230*t113273*2.0+(t113002+ \
               t113210+t113209+rho_a[index]*(-t113068+t113179+t113072*t112978*(t113068+t113178-t113161*t113162*t113075* \
               t113156-a1p*c*c0p*t113045*t113069*(2.0/3.0)))+t112953*(t113013-a1p*c*c0p*t112991*t112965*(2.0/3.0) \
               +t113000*t113003*t113032*t112992*t112978-t113000*t113003*t113115*t112978*t112997-t113003*t113014*t112992* \
               t112978*t112997*4.0+t113000*t112972*t112973*t112992*t112978*t112997*4.0+Aa*t113032*t113015*t113025* \
               t113034*t113027*t112978*2.0-Aa*t113015*t113025*t113027*t113138*t112978*t112997*2.0+t113015*t113034* \
               t113027*t113153*t113146*t113148*t112978*t112997-Aa*a1a*c*t113015*t113025*t113034*t112965*t112978*t112997* \
               (2.0/3.0))-c0p*t113060*t113069*2.0-t113072*t113190*t112978)*(ccab1*gamma_aa[index]*gcab*t113102*t113079* \
               (4.0/3.0)-ccab2*t113220*t113224*t113076*t113078-ccab4*t113223*t113215*t113084*t113085+ccab2*gamma_aa[index]* \
               t113100*t113076*t113077*t113079*(8.0/3.0)-ccab1*gamma_aa[index]*t113216*t113076*t113077*t113079*(4.0/ \
               3.0)+ccab3*gamma_aa[index]*gcab*t113101*t113076*t113078*t113079*4.0+ccab4*gamma_aa[index]*t113103* \
               t113084*t113077*t113078*t113079*(1.6E1/3.0)-ccab3*gcab*t113221*t113228*t113076*t113077*t113078)*2.0- \
               (ccab0+ccab1*gcab*t113102*t113077+ccab2*t113100*t113076*t113078+ccab4*t113103*t113084*t113085+ccab3* \
               gcab*t113101*t113076*t113077*t113078)*(-t112953*(-t113135+t113180-t113127+t113155+t113000*t113003* \
               t112978*t112997*(t113135-t113180+t113127-t113155-t113107*t113128*t112990*1.0/(t112984*t112984*t112984) \
               *2.0+t113107*t113108*t112990*(b2f*c*t113104*(4.0/9.0)+b4f*t113105*t112960*(1.0E1/9.0)+b1f*c*t113005* \
               t113104*(2.0/9.0)+b3f*c*t113104*t112956*(2.0/3.0)-b1f*t113105*t113119*t112960*(1.0/3.6E1)+b3f*t113005* \
               t113105*t112960*(1.0/1.2E1))+t113128*t112990*1.0/(t112984*t112984*t112984*t112984)*1.0/(t112987*t112987) \
               *t112979*(1.0/2.0)-a1f*c*c0f*t113104*t112988*(8.0/9.0)+a1f*c*t113113*t113107*t113108*t112965*(2.0/ \
               3.0)-a1p*c*t113012*t113006*t113007*t112965*(2.0/3.0))+t113000*t113003*t113032*t113115*t112978*2.0- \
               t113000*t113003*t113145*t112992*t112978+t113003*t113014*t113032*t112992*t112978*8.0-t113003*t113014* \
               t113115*t112978*t112997*8.0-t113003*t113136*t112992*t112978*t112997*2.0E1-t113000*t112973*t112992* \
               t112978*t112997*1.2E1-t113000*t113032*t112972*t112973*t112992*t112978*8.0+t113000*t113115*t112972* \
               t112973*t112978*t112997*8.0+t113014*t112972*t112973*t112992*t112978*t112997*3.2E1+a1p*c*t113012*t113006* \
               t113007*t112965*(2.0/3.0)+Aa*t113032*t113015*t113025*t113027*t113138*t112978*4.0-Aa*t113015*t113025* \
               t113034*t113027*t113145*t112978*2.0-Aa*t113015*t113025*t113027*t112978*t112997*(t113003*t113136*2.0E1+ \
               t113000*t112973*1.2E1-t113014*t112972*t112973*3.2E1)*2.0-t113032*t113015*t113034*t113027*t113153*t113146* \
               t113148*t112978*2.0+t113015*t113027*t113153*t113146*t113138*t113148*t112978*t112997*2.0-1.0/(t113021* \
               t113021*t113021)*t113015*t113034*t113027*t113154*t113146*t112978*t112997*2.0+t113015*t113034*t113027* \
               t113146*t113148*t112978*t112997*(b2a*c*t113104*(4.0/9.0)+b4a*t113105*t112960*(1.0E1/9.0)+b1a*c*t113005* \
               t113104*(2.0/9.0)+b3a*c*t113104*t112956*(2.0/3.0)-b1a*t113105*t113119*t112960*(1.0/3.6E1)+b3a*t113005* \
               t113105*t112960*(1.0/1.2E1))+Aa*a1a*c*t113032*t113015*t113025*t113034*t112965*t112978*(4.0/3.0)-Aa* \
               a1a*c*t113104*t113015*t113025*t113034*t112978*t112997*(8.0/9.0)-Aa*a1a*c*t113015*t113025*t113138*t112965* \
               t112978*t112997*(4.0/3.0)+1.0/(t113021*t113021*t113021*t113021)*t113015*1.0/(t113024*t113024)*t113016* \
               t113034*t113027*t113154*t112978*t112997*(1.0/2.0)+a1a*c*t113015*t113034*t113153*t113146*t113148*t112965* \
               t112978*t112997*(2.0/3.0))+rho_a[index]*(t113290-t113168-t113177+t113294+t113296+t113072*t112978*(t113293+ \
               t113168+t113177+t113295+t113288-t113060*t113061*t113062*t113174-t113281*t113075*t113156*t113165*2.0- \
               a1f*c*c0f*t113073*t113163*(8.0/9.0)-t113060*t113166*t113175*t113176*t112966*(1.0/2.0)-a1p*c*t113061* \
               t113062*t113045*t113067*(2.0/3.0)))+t113072*t113181*t112978*2.0+t113012*t113006*t113007*t112971*2.0- \
               t113060*t113061*t113062*t113067*2.0+a1p*c*c0p*t113045*t113069*(4.0/3.0)-a1p*c*c0p*t112991*t112965* \
               (4.0/3.0)+t113000*t113003*t113032*t112992*t112978*2.0-t113000*t113003*t113115*t112978*t112997*2.0- \
               t113003*t113014*t112992*t112978*t112997*8.0+t113000*t112972*t112973*t112992*t112978*t112997*8.0+Aa* \
               t113032*t113015*t113025*t113034*t113027*t112978*4.0-Aa*t113015*t113025*t113027*t113138*t112978*t112997* \
               4.0+t113015*t113034*t113027*t113153*t113146*t113148*t112978*t112997*2.0-Aa*a1a*c*t113015*t113025*t113034* \
               t112965*t112978*t112997*(4.0/3.0))+rho_a[index]*t113273*(t113068-t113179+t113072*t112978*(t113252- \
               t113068-t113178+t113179))*2.0+rho_a[index]*t113280*(t113290-t113168-t113177+t113294+t113296-t113072* \
               t112978*(t113290-t113293-t113168-t113177+t113294-t113295+t113296-t113288+t113281*t113075*t113156*t113165* \
               2.0+a1f*c*c0f*t113073*t113163*(8.0/9.0)))-rho_a[index]*t113230*(ccaa1*gamma_aa[index]*gcaa*t113222* \
               t113239*(8.8E1/9.0)-ccaa1*t113217*t113182*t113183*t113257*2.4E1+ccaa2*t113217*t113182*t113183*t113248* \
               (3.04E2/9.0)+ccaa4*t113236*t113184*t113185*t113275*(1.12E3/9.0)-ccaa2*t113271*t113182*t113272*t113183* \
               t113249*(3.2E1/3.0)-ccaa4*t113251*t113184*t113185*t113267*t113268*(6.4E1/3.0)-ccaa2*t113182*t113272* \
               t113183*t113188*(gamma_aa[index]*gcaa*t113222*(1.76E2/9.0)+t113217*t113182*t113183*(3.04E2/9.0))-ccaa4* \
               t113184*t113185*t113186*t113268*(gamma_aa[index]*gcaa*t113222*(3.52E2/9.0)+t113217*t113182*t113183* \
               (6.08E2/3.0)+t113184*t113185*t113275*(1.12E3/9.0)+gamma_aa[index]*gcaa*t113182*t113183*t113274*2.88E2) \
               +ccaa2*(t113271*t113271)*t113182*t113183*1.0/(t113247*t113247*t113247)*t113188*2.0+ccaa4*1.0/(t113235* \
               t113235*t113235)*t113184*t113185*t113186*(t113267*t113267)*2.0+ccaa3*gamma_aa[index]*gcaa*t113244* \
               t113182*t113183*t113274*7.2E1+ccaa1*gamma_aa[index]*gcaa*t113182*t113183*1.0/(t113238*t113238*t113238) \
               *t113274*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t113243*t113243*t113243)*(t113261*t113261)*t113182* \
               t113183*t113187*2.0-ccaa3*gamma_aa[index]*gcaa*t113262*t113182*t113183*t113187*(gamma_aa[index]*gcaa* \
               t113222*(8.8E1/3.0)+t113217*t113182*t113183*(3.04E2/3.0)+gamma_aa[index]*gcaa*t113182*t113183*t113274* \
               7.2E1)-ccaa3*gamma_aa[index]*gcaa*t113250*t113261*t113262*t113182*t113183*1.6E1)-c0*t113319*t113369* \
               (cx1*gamma_aa[index]*gx*t113222*t113334*(8.8E1/9.0)-cx1*t113217*t113182*t113317*t113373*2.4E1+cx2* \
               t113217*t113343*t113182*t113317*(3.04E2/9.0)+cx4*t113331*t113318*t113184*t113275*(1.12E3/9.0)-cx2* \
               t113182*t113317*t113345*t113249*t113358*(3.2E1/3.0)-cx4*t113251*t113344*t113318*t113184*t113355*(6.4E1/ \
               3.0)-cx2*t113182*t113317*t113358*t113188*(gamma_aa[index]*gx*t113222*(1.76E2/9.0)+t113217*t113182* \
               t113317*(3.04E2/9.0))-cx4*t113318*t113184*t113355*t113186*(gamma_aa[index]*gx*t113222*(3.52E2/9.0) \
               +t113217*t113182*t113317*(6.08E2/3.0)+t113318*t113184*t113275*(1.12E3/9.0)+gamma_aa[index]*gx*t113182* \
               t113317*t113274*2.88E2)+cx2*1.0/(t113342*t113342*t113342)*t113182*t113317*(t113345*t113345)*t113188* \
               2.0+cx4*1.0/(t113330*t113330*t113330)*(t113344*t113344)*t113318*t113184*t113186*2.0+cx3*gamma_aa[index]* \
               gx*t113182*t113317*t113274*t113339*7.2E1+cx1*gamma_aa[index]*gx*1.0/(t113333*t113333*t113333)*t113182* \
               t113317*t113274*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*(t113350*t113350)*t113182*t113317*1.0/(t113338* \
               t113338*t113338)*t113187*2.0-cx3*gamma_aa[index]*gx*t113182*t113317*t113346*t113187*(gamma_aa[index]* \
               gx*t113222*(8.8E1/3.0)+t113217*t113182*t113317*(3.04E2/3.0)+gamma_aa[index]*gx*t113182*t113317*t113274* \
               7.2E1)-cx3*gamma_aa[index]*gx*t113250*t113350*t113182*t113317*t113346*1.6E1)-c0*t113041*t113367*t113369* \
               (4.0/9.0)-c0*t113372*t113374*t113367*(8.0/3.0)+c0*t113372*t113319*t113379*2.0+c0*t113374*t113369*t113379* \
               (8.0/3.0)+c0*t113319*t113367*(omega*t113315*t113325*(-7.717543294808713E30/3.713820117856141E27)+omega* \
               t113306*t113362*(2.778046668940015E15/5.2776558133248E13)+omega*t113301*(omega*t113310*t113315*(-7.717543294808713E30/ \
               4.951760157141521E27)+omega*t113313*t113306*(2.778046668940015E15/7.0368744177664E13)+omega*t113301* \
               (1.0/(rho_a[index]*rho_a[index])*t113300*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t113300*t113303*(7.717543294808713E30/ \
               4.951760157141521E27)+t113304*t113305*1.0/pow(t113297,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t113300*t113306*t113298*(7.717543294808713E30/9.903520314283042E27)+t113300*t113301*t113307*t113298* \
               (2.778046668940015E15/2.11106232532992E14))+t113300*t113314*t113308*t113309*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t113300*t113307*t113309*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            double t116716 = 1.0/pow(rho_a[index],1.0/3.0);
            double t116717 = c*t116716;
            double t116718 = sqrt(t116717);
            double t116719 = b1f*t116718;
            double t116720 = pow(t116717,3.0/2.0);
            double t116721 = b3f*t116720;
            double t116722 = c*c;
            double t116723 = 1.0/pow(rho_a[index],2.0/3.0);
            double t116724 = b4f*t116722*t116723;
            double t116725 = b2f*c*t116716;
            double t116726 = t116721+t116724+t116725+t116719;
            double t116727 = 1.0/pow(rho_a[index],4.0/3.0);
            double t116728 = b1p*t116718;
            double t116729 = b3p*t116720;
            double t116730 = b4p*t116722*t116723;
            double t116731 = b2p*c*t116716;
            double t116732 = t116730+t116731+t116728+t116729;
            double t116733 = 1.0/pow(rho_a[index],5.0/3.0);
            double t116734 = 1.0/sqrt(t116717);
            double t116735 = 1.0/c0f;
            double t116736 = 1.0/t116726;
            double t116737 = t116735*t116736*(1.0/2.0);
            double t116738 = t116737+1.0;
            double t116739 = 1.0/c0p;
            double t116740 = 1.0/t116732;
            double t116741 = t116740*t116739*(1.0/2.0);
            double t116742 = t116741+1.0;
            double t116743 = a1p*c*t116716;
            double t116744 = t116743+1.0;
            double t116745 = 1.0/t116742;
            double t116746 = 1.0/(t116732*t116732);
            double t116747 = b4p*t116722*t116733*(2.0/3.0);
            double t116748 = b2p*c*t116727*(1.0/3.0);
            double t116749 = b1p*c*t116734*t116727*(1.0/6.0);
            double t116750 = b3p*c*t116718*t116727*(1.0/2.0);
            double t116751 = t116750+t116747+t116748+t116749;
            double t116752 = t116751*t116744*t116745*t116746;
            double t116753 = log(t116742);
            double t116754 = gamma_aa[index]*gamma_aa[index];
            double t116755 = gcaa*gcaa;
            double t116756 = t116754*t116754;
            double t116757 = t116755*t116755;
            double t116758 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t116759 = 1.0/pow(rho_a[index],8.0/3.0);
            double t116760 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t116761 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t116762 = pow(2.0,1.0/3.0);
            double t116763 = t116762*2.0;
            double t116764 = t116763-2.0;
            double t116765 = two_13*2.0;
            double t116766 = t116765-2.0;
            double t116767 = 1.0/t116766;
            double t116768 = log(t116738);
            double t116769 = a1f*c*t116716;
            double t116770 = t116769+1.0;
            double t116771 = gamma_aa[index]*gcaa*t116759*4.0;
            double t116772 = gamma_aa[index]*gcaa*t116760*t116754*t116755*4.0;
            double t116773 = t116761*t116754*t116755*6.0;
            double t116774 = t116756*t116757*t116758;
            double t116775 = t116771+t116772+t116773+t116774+1.0;
            double t116776 = 1.0/t116775;
            double t116777 = gamma_aa[index]*gcaa*t116759;
            double t116778 = t116777+1.0;
            double t116779 = 1.0/t116778;
            double t116780 = gamma_aa[index]*gcaa*t116759*3.0;
            double t116781 = gamma_aa[index]*gcaa*t116760*t116754*t116755;
            double t116782 = t116761*t116754*t116755*3.0;
            double t116783 = t116780+t116781+t116782+1.0;
            double t116784 = 1.0/t116783;
            double t116785 = gamma_aa[index]*gcaa*t116759*2.0;
            double t116786 = t116761*t116754*t116755;
            double t116787 = t116785+t116786+1.0;
            double t116788 = 1.0/t116787;
            double t116789 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t116790 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t116791 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t116792 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t116793 = 1.0/t116738;
            double t116794 = 1.0/(t116726*t116726);
            double t116795 = b4f*t116722*t116733*(2.0/3.0);
            double t116796 = b2f*c*t116727*(1.0/3.0);
            double t116797 = b1f*c*t116734*t116727*(1.0/6.0);
            double t116798 = b3f*c*t116718*t116727*(1.0/2.0);
            double t116799 = t116795+t116796+t116797+t116798;
            double t116800 = a1f*c*c0f*t116727*t116768*(2.0/3.0);
            double t116801 = a1p*c*c0p*t116753*t116727*(2.0/3.0);
            double t116802 = ccaa4*t116756*t116792*t116757*t116776*(3.2E1/3.0);
            double t116803 = ccaa1*gamma_aa[index]*gcaa*t116790*t116779*(8.0/3.0);
            double t116804 = ccaa3*gamma_aa[index]*gcaa*t116754*t116755*t116791*t116784*8.0;
            double t116805 = ccaa2*t116754*t116755*t116788*t116789*(1.6E1/3.0);
            double t116806 = 1.0/(t116778*t116778);
            double t116807 = gamma_aa[index]*gcaa*t116790*8.0;
            double t116808 = gamma_aa[index]*gcaa*t116754*t116755*t116791*8.0;
            double t116809 = t116754*t116755*t116789*1.6E1;
            double t116810 = t116807+t116808+t116809;
            double t116811 = 1.0/(t116783*t116783);
            double t116812 = gamma_aa[index]*gcaa*t116790*(3.2E1/3.0);
            double t116813 = gamma_aa[index]*gcaa*t116754*t116755*t116791*3.2E1;
            double t116814 = t116754*t116755*t116789*3.2E1;
            double t116815 = t116756*t116792*t116757*(3.2E1/3.0);
            double t116816 = t116812+t116813+t116814+t116815;
            double t116817 = 1.0/(t116775*t116775);
            double t116818 = gamma_aa[index]*gcaa*t116790*(1.6E1/3.0);
            double t116819 = t116754*t116755*t116789*(1.6E1/3.0);
            double t116820 = t116818+t116819;
            double t116821 = 1.0/(t116787*t116787);
            double t116822 = t116802+t116803+t116804+t116805-ccaa1*t116806*t116754*t116755*t116789*(8.0/3.0)- \
               ccaa2*t116820*t116821*t116761*t116754*t116755-ccaa4*t116816*t116817*t116756*t116757*t116758-ccaa3* \
               gamma_aa[index]*gcaa*t116810*t116811*t116760*t116754*t116755;
            double t116823 = c0f*t116770*t116768*2.0;
            double t116824 = c0p*t116744*t116753*2.0;
            double t116825 = 1.0/pow(rho_a[index],1.0E1);
            double t116826 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t116827 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t116828 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t116829 = ccaa4*t116756*t116757*t116758*t116776;
            double t116830 = ccaa1*gamma_aa[index]*gcaa*t116759*t116779;
            double t116831 = ccaa3*gamma_aa[index]*gcaa*t116760*t116754*t116755*t116784;
            double t116832 = ccaa2*t116761*t116754*t116755*t116788;
            double t116833 = ccaa0+t116830+t116831+t116832+t116829;
            double t116834 = 1.0/pow(rho_a[index],7.0/3.0);
            double t116835 = 1.0/pow(t116717,3.0/2.0);
            double t116836 = t116799*t116799;
            double t116837 = t116751*t116751;
            double t116838 = 1.0/(t116732*t116732*t116732);
            double t116839 = t116744*t116745*t116837*t116838*2.0;
            double t116840 = b4p*t116722*t116759*(1.0E1/9.0);
            double t116841 = b2p*c*t116834*(4.0/9.0);
            double t116842 = b3p*t116722*t116734*t116759*(1.0/1.2E1);
            double t116843 = b1p*c*t116734*t116834*(2.0/9.0);
            double t116844 = b3p*c*t116834*t116718*(2.0/3.0);
            double t116845 = t116840+t116841+t116842+t116843+t116844-b1p*t116722*t116835*t116759*(1.0/3.6E1);
            double t116846 = 1.0/(t116742*t116742);
            double t116847 = 1.0/(t116732*t116732*t116732*t116732);
            double t116848 = a1p*c*c0p*t116753*t116834*(8.0/9.0);
            double t116849 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t116850 = 1.0/(omega*omega);
            double t116851 = pow(t116849,2.0/3.0);
            double t116854 = t116850*t116851;
            double t116852 = exp(-t116854);
            double t116853 = 1.0/pow(t116849,1.0/3.0);
            double t116855 = 1.0/pow(t116849,2.0/3.0);
            double t116856 = omega*omega;
            double t116857 = t116852-1.0;
            double t116858 = 1.0/pow(t116849,4.0/3.0);
            double t116859 = 1.0/rho_a[index];
            double t116860 = 1.0/pow(t116849,5.0/3.0);
            double t116861 = 1.0/sqrt(3.141592653589793);
            double t116868 = t116855*t116856*t116857*(1.0/2.0);
            double t116862 = t116852-t116868;
            double t116863 = t116852*t116859*(1.0/3.0);
            double t116864 = t116860*t116856*t116857*(2.778046668940015E15/1.40737488355328E14);
            double t116911 = t116850*t116852*t116853*(2.778046668940015E15/7.0368744177664E13);
            double t116865 = -t116911+t116863+t116864;
            double t116866 = 1.0/omega;
            double t116867 = 1.0/pow(t116849,7.0/3.0);
            double t116869 = gx*gx;
            double t116870 = t116869*t116869;
            double t116871 = pow(rho_a[index],4.0/3.0);
            double t116872 = pow(t116849,1.0/3.0);
            double t116873 = t116872*t116866;
            double t116874 = erf(t116873);
            double t116875 = t116874*(3.991211251234741E15/2.251799813685248E15);
            double t116876 = omega*t116853*t116862;
            double t116877 = t116875+t116876;
            double t116878 = gamma_aa[index]*gx*t116759*4.0;
            double t116879 = gamma_aa[index]*gx*t116760*t116754*t116869*4.0;
            double t116880 = t116761*t116754*t116869*6.0;
            double t116881 = t116870*t116756*t116758;
            double t116882 = t116880+t116881+t116878+t116879+1.0;
            double t116883 = 1.0/t116882;
            double t116884 = gamma_aa[index]*gx*t116759;
            double t116885 = t116884+1.0;
            double t116886 = 1.0/t116885;
            double t116887 = gamma_aa[index]*gx*t116759*3.0;
            double t116888 = gamma_aa[index]*gx*t116760*t116754*t116869;
            double t116889 = t116761*t116754*t116869*3.0;
            double t116890 = t116887+t116888+t116889+1.0;
            double t116891 = 1.0/t116890;
            double t116892 = gamma_aa[index]*gx*t116759*2.0;
            double t116893 = t116761*t116754*t116869;
            double t116894 = t116892+t116893+1.0;
            double t116895 = 1.0/t116894;
            double t116903 = gamma_aa[index]*gx*t116790*(3.2E1/3.0);
            double t116904 = gamma_aa[index]*gx*t116754*t116791*t116869*3.2E1;
            double t116905 = t116754*t116869*t116789*3.2E1;
            double t116906 = t116870*t116756*t116792*(3.2E1/3.0);
            double t116896 = t116903+t116904+t116905+t116906;
            double t116908 = gamma_aa[index]*gx*t116790*(1.6E1/3.0);
            double t116909 = t116754*t116869*t116789*(1.6E1/3.0);
            double t116897 = t116908+t116909;
            double t116898 = 1.0/(t116890*t116890);
            double t116899 = gamma_aa[index]*gx*t116790*8.0;
            double t116900 = gamma_aa[index]*gx*t116754*t116791*t116869*8.0;
            double t116901 = t116754*t116869*t116789*1.6E1;
            double t116902 = t116900+t116901+t116899;
            double t116907 = 1.0/(t116882*t116882);
            double t116910 = 1.0/(t116894*t116894);
            double t116912 = omega*t116853*t116865;
            double t116913 = t116852*t116861*t116855*t116866*(1.108777112152858E31/1.584563250285287E29);
            double t116922 = omega*t116862*t116858*(2.778046668940015E15/1.40737488355328E14);
            double t116914 = t116912+t116913-t116922;
            double t116915 = cx4*t116870*t116756*t116883*t116758;
            double t116916 = cx1*gamma_aa[index]*gx*t116759*t116886;
            double t116917 = cx3*gamma_aa[index]*gx*t116760*t116754*t116891*t116869;
            double t116918 = cx2*t116761*t116754*t116895*t116869;
            double t116919 = cx0+t116915+t116916+t116917+t116918;
            double t116920 = omega*t116853*t116877*(4.0/3.0);
            double t116921 = t116920-1.0;
            double t116923 = omega*t116914*t116853*(4.0/3.0);
            double t116924 = t116923-omega*t116858*t116877*(2.778046668940015E15/1.05553116266496E14);
            double t116925 = 1.0/(t116885*t116885);
            double t116926 = pow(rho_a[index],1.0/3.0);
            double t116927 = cx4*t116870*t116756*t116792*t116883*(3.2E1/3.0);
            double t116928 = cx1*gamma_aa[index]*gx*t116790*t116886*(8.0/3.0);
            double t116929 = cx3*gamma_aa[index]*gx*t116754*t116791*t116891*t116869*8.0;
            double t116930 = cx2*t116754*t116895*t116869*t116789*(1.6E1/3.0);
            double t116931 = t116930+t116927+t116928+t116929-cx1*t116754*t116925*t116869*t116789*(8.0/3.0)-cx2* \
               t116910*t116761*t116754*t116869*t116897-cx4*t116870*t116907*t116756*t116758*t116896-cx3*gamma_aa[index]* \
               gx*t116902*t116760*t116754*t116869*t116898;
            v_rho_a_rho_a_[index] = t116822*(t116824+t116764*t116767*(t116823-c0p*t116744*t116753*2.0))*2.0+t116833* \
               (t116801-t116752+t116764*t116767*(t116800+t116752-t116770*t116793*t116794*t116799-a1p*c*c0p*t116753* \
               t116727*(2.0/3.0)))*2.0+rho_a[index]*t116833*(-t116839-t116848+t116764*t116767*(t116839+t116848-t116744* \
               t116745*t116746*t116845-t116770*1.0/(t116726*t116726*t116726)*t116836*t116793*2.0+t116770*t116793* \
               t116794*(b2f*c*t116834*(4.0/9.0)+b4f*t116722*t116759*(1.0E1/9.0)+b1f*c*t116734*t116834*(2.0/9.0)+b3f* \
               c*t116834*t116718*(2.0/3.0)-b1f*t116722*t116835*t116759*(1.0/3.6E1)+b3f*t116722*t116734*t116759*(1.0/ \
               1.2E1))+t116770*1.0/(t116726*t116726*t116726*t116726)*t116735*t116836*1.0/(t116738*t116738)*(1.0/2.0) \
               -a1f*c*c0f*t116834*t116768*(8.0/9.0)-t116744*t116837*t116846*t116739*t116847*(1.0/2.0)+a1f*c*t116727* \
               t116793*t116794*t116799*(2.0/3.0)-a1p*c*t116751*t116727*t116745*t116746*(2.0/3.0))+t116744*t116745* \
               t116746*t116845+t116744*t116837*t116846*t116739*t116847*(1.0/2.0)+a1p*c*t116751*t116727*t116745*t116746* \
               (2.0/3.0))-rho_a[index]*t116822*(t116801-t116752+t116764*t116767*(t116800-t116801+t116752-t116770* \
               t116793*t116794*t116799))*2.0-rho_a[index]*(t116824+t116764*t116767*(t116823-t116824))*(ccaa1*gamma_aa[index]* \
               gcaa*t116827*t116779*(8.8E1/9.0)-ccaa1*t116806*t116754*t116826*t116755*2.4E1+ccaa2*t116754*t116826* \
               t116755*t116788*(3.04E2/9.0)+ccaa4*t116756*t116828*t116757*t116776*(1.12E3/9.0)-ccaa2*t116820*t116821* \
               t116754*t116755*t116789*(3.2E1/3.0)-ccaa4*t116816*t116817*t116756*t116792*t116757*(6.4E1/3.0)-ccaa2* \
               t116821*t116761*t116754*t116755*(gamma_aa[index]*gcaa*t116827*(1.76E2/9.0)+t116754*t116826*t116755* \
               (3.04E2/9.0))-ccaa4*t116817*t116756*t116757*t116758*(gamma_aa[index]*gcaa*t116827*(3.52E2/9.0)+t116754* \
               t116826*t116755*(6.08E2/3.0)+t116756*t116828*t116757*(1.12E3/9.0)+gamma_aa[index]*gcaa*t116825*t116754* \
               t116755*2.88E2)+ccaa2*(t116820*t116820)*t116761*t116754*t116755*1.0/(t116787*t116787*t116787)*2.0+ \
               ccaa4*(t116816*t116816)*t116756*t116757*1.0/(t116775*t116775*t116775)*t116758*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t116825*t116754*t116755*t116784*7.2E1+ccaa1*gamma_aa[index]*gcaa*t116825*t116754*t116755*1.0/ \
               (t116778*t116778*t116778)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*(t116810*t116810)*t116760*t116754* \
               t116755*1.0/(t116783*t116783*t116783)*2.0-ccaa3*gamma_aa[index]*gcaa*t116811*t116760*t116754*t116755* \
               (gamma_aa[index]*gcaa*t116827*(8.8E1/3.0)+t116754*t116826*t116755*(3.04E2/3.0)+gamma_aa[index]*gcaa* \
               t116825*t116754*t116755*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t116810*t116811*t116754*t116755*t116791* \
               1.6E1)-c0*t116921*t116871*(cx1*gamma_aa[index]*gx*t116827*t116886*(8.8E1/9.0)-cx1*t116754*t116826* \
               t116925*t116869*2.4E1+cx2*t116754*t116826*t116895*t116869*(3.04E2/9.0)+cx4*t116870*t116756*t116828* \
               t116883*(1.12E3/9.0)-cx2*t116910*t116754*t116869*t116789*t116897*(3.2E1/3.0)-cx4*t116870*t116907*t116756* \
               t116792*t116896*(6.4E1/3.0)-cx2*t116910*t116761*t116754*t116869*(gamma_aa[index]*gx*t116827*(1.76E2/ \
               9.0)+t116754*t116826*t116869*(3.04E2/9.0))-cx4*t116870*t116907*t116756*t116758*(gamma_aa[index]*gx* \
               t116827*(3.52E2/9.0)+t116870*t116756*t116828*(1.12E3/9.0)+t116754*t116826*t116869*(6.08E2/3.0)+gamma_aa[index]* \
               gx*t116825*t116754*t116869*2.88E2)+cx2*t116761*t116754*1.0/(t116894*t116894*t116894)*t116869*(t116897* \
               t116897)*2.0+cx4*t116870*t116756*1.0/(t116882*t116882*t116882)*t116758*(t116896*t116896)*2.0+cx3*gamma_aa[index]* \
               gx*t116825*t116754*t116891*t116869*7.2E1+cx1*gamma_aa[index]*gx*t116825*t116754*1.0/(t116885*t116885* \
               t116885)*t116869*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*(t116902*t116902)*t116760*t116754*1.0/(t116890* \
               t116890*t116890)*t116869*2.0-cx3*gamma_aa[index]*gx*t116760*t116754*t116869*t116898*(gamma_aa[index]* \
               gx*t116827*(8.8E1/3.0)+t116754*t116826*t116869*(3.04E2/3.0)+gamma_aa[index]*gx*t116825*t116754*t116869* \
               7.2E1)-cx3*gamma_aa[index]*gx*t116902*t116754*t116791*t116869*t116898*1.6E1)+c0*t116921*t116931*t116926* \
               (8.0/3.0)-c0*t116723*t116921*t116919*(4.0/9.0)+c0*t116931*t116924*t116871*2.0-c0*t116924*t116926*t116919* \
               (8.0/3.0)+c0*t116871*t116919*(omega*t116914*t116858*(2.778046668940015E15/5.2776558133248E13)-omega* \
               t116867*t116877*(7.717543294808713E30/3.713820117856141E27)+omega*t116853*(omega*t116862*t116867*(- \
               7.717543294808713E30/4.951760157141521E27)+omega*t116865*t116858*(2.778046668940015E15/7.0368744177664E13) \
               +omega*t116853*(1.0/(rho_a[index]*rho_a[index])*t116852*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t116852* \
               t116855*(7.717543294808713E30/4.951760157141521E27)+t116856*t116857*1.0/pow(t116849,8.0/3.0)*(3.858771647404357E31/ \
               1.980704062856608E28)-t116850*t116852*t116858*(7.717543294808713E30/9.903520314283042E27)+t116850* \
               t116852*t116853*t116859*(2.778046668940015E15/2.11106232532992E14))+t116860*t116852*t116861*t116866* \
               (3.080234563013177E46/1.115037259926531E43)+1.0/(omega*omega*omega)*t116852*t116861*t116859*(1.108777112152858E31/ \
               2.37684487542793E29))*(4.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t113381 = rho_a[index]+rho_b[index];
            double t113382 = 1.0/pow(t113381,1.0/3.0);
            double t113383 = c*t113382;
            double t113384 = sqrt(t113383);
            double t113385 = b1p*t113384;
            double t113386 = pow(t113383,3.0/2.0);
            double t113387 = b3p*t113386;
            double t113388 = c*c;
            double t113389 = 1.0/pow(t113381,2.0/3.0);
            double t113390 = b4p*t113388*t113389;
            double t113391 = b2p*c*t113382;
            double t113392 = t113390+t113391+t113385+t113387;
            double t113393 = 1.0/pow(t113381,4.0/3.0);
            double t113394 = 1.0/c0p;
            double t113395 = 1.0/t113392;
            double t113396 = t113394*t113395*(1.0/2.0);
            double t113397 = t113396+1.0;
            double t113398 = a1p*c*t113382;
            double t113399 = t113398+1.0;
            double t113400 = rho_a[index]-rho_b[index];
            double t113401 = t113400*t113400;
            double t113402 = 1.0/t113381;
            double t113403 = t113400*t113402;
            double t113404 = two_13*2.0;
            double t113405 = t113404-2.0;
            double t113406 = 1.0/t113405;
            double t113407 = 1.0/c0f;
            double t113408 = b1f*t113384;
            double t113409 = b3f*t113386;
            double t113410 = b4f*t113388*t113389;
            double t113411 = b2f*c*t113382;
            double t113412 = t113410+t113411+t113408+t113409;
            double t113413 = 1.0/t113412;
            double t113414 = t113413*t113407*(1.0/2.0);
            double t113415 = t113414+1.0;
            double t113416 = log(t113415);
            double t113417 = a1f*c*t113382;
            double t113418 = t113417+1.0;
            double t113419 = log(t113397);
            double t113429 = c0f*t113416*t113418*2.0;
            double t113430 = c0p*t113419*t113399*2.0;
            double t113420 = -t113430+t113429;
            double t113421 = t113403+1.0;
            double t113422 = pow(t113421,4.0/3.0);
            double t113423 = -t113403+1.0;
            double t113424 = pow(t113423,4.0/3.0);
            double t113425 = t113422+t113424-2.0;
            double t113426 = 1.0/(t113381*t113381);
            double t113457 = t113400*t113426;
            double t113427 = t113402-t113457;
            double t113428 = 1.0/(t113381*t113381*t113381*t113381);
            double t113431 = t113401*t113401;
            double t113432 = 1.0/pow(t113381,5.0/3.0);
            double t113433 = 1.0/sqrt(t113383);
            double t113434 = 1.0/t113397;
            double t113435 = 1.0/(t113392*t113392);
            double t113436 = b4p*t113432*t113388*(2.0/3.0);
            double t113437 = b2p*c*t113393*(1.0/3.0);
            double t113438 = b1p*c*t113433*t113393*(1.0/6.0);
            double t113439 = b3p*c*t113384*t113393*(1.0/2.0);
            double t113440 = t113436+t113437+t113438+t113439;
            double t113441 = t113440*t113434*t113435*t113399;
            double t113442 = 1.0/(t113381*t113381*t113381*t113381*t113381);
            double t113443 = 1.0/d2fz0;
            double t113444 = 1.0/Aa;
            double t113445 = b1a*t113384;
            double t113446 = b3a*t113386;
            double t113447 = b4a*t113388*t113389;
            double t113448 = b2a*c*t113382;
            double t113449 = t113445+t113446+t113447+t113448;
            double t113450 = 1.0/t113449;
            double t113451 = t113450*t113444*(1.0/2.0);
            double t113452 = t113451+1.0;
            double t113453 = log(t113452);
            double t113454 = a1a*c*t113382;
            double t113455 = t113454+1.0;
            double t113456 = pow(t113421,1.0/3.0);
            double t113458 = t113427*t113456*(4.0/3.0);
            double t113459 = pow(t113423,1.0/3.0);
            double t113603 = t113427*t113459*(4.0/3.0);
            double t113460 = -t113603+t113458;
            double t113461 = t113431*t113428;
            double t113462 = t113461-1.0;
            double t113463 = 1.0/pow(rho_a[index],1.0/3.0);
            double t113464 = c*t113463;
            double t113465 = sqrt(t113464);
            double t113466 = b1f*t113465;
            double t113467 = pow(t113464,3.0/2.0);
            double t113468 = b3f*t113467;
            double t113469 = 1.0/pow(rho_a[index],2.0/3.0);
            double t113470 = b4f*t113388*t113469;
            double t113471 = b2f*c*t113463;
            double t113472 = t113470+t113471+t113466+t113468;
            double t113473 = 1.0/pow(rho_a[index],4.0/3.0);
            double t113474 = b1p*t113465;
            double t113475 = b3p*t113467;
            double t113476 = b4p*t113388*t113469;
            double t113477 = b2p*c*t113463;
            double t113478 = t113474+t113475+t113476+t113477;
            double t113479 = 1.0/pow(rho_a[index],5.0/3.0);
            double t113480 = 1.0/sqrt(t113464);
            double t113481 = 1.0/t113472;
            double t113482 = t113407*t113481*(1.0/2.0);
            double t113483 = t113482+1.0;
            double t113484 = 1.0/t113478;
            double t113485 = t113394*t113484*(1.0/2.0);
            double t113486 = t113485+1.0;
            double t113487 = a1p*c*t113463;
            double t113488 = t113487+1.0;
            double t113489 = 1.0/t113486;
            double t113490 = 1.0/(t113478*t113478);
            double t113491 = b4p*t113388*t113479*(2.0/3.0);
            double t113492 = b2p*c*t113473*(1.0/3.0);
            double t113493 = b1p*c*t113480*t113473*(1.0/6.0);
            double t113494 = b3p*c*t113473*t113465*(1.0/2.0);
            double t113495 = t113491+t113492+t113493+t113494;
            double t113496 = t113490*t113495*t113488*t113489;
            double t113497 = log(t113486);
            double t113498 = pow(2.0,1.0/3.0);
            double t113499 = t113498*2.0;
            double t113500 = t113499-2.0;
            double t113501 = log(t113483);
            double t113502 = a1f*c*t113463;
            double t113503 = t113502+1.0;
            double t113504 = gcab*gcab;
            double t113508 = 1.0/pow(rho_a[index],8.0/3.0);
            double t113509 = gamma_aa[index]*t113508*(1.0/2.0);
            double t113510 = 1.0/pow(rho_b[index],8.0/3.0);
            double t113511 = gamma_bb[index]*t113510*(1.0/2.0);
            double t113505 = t113511+t113509;
            double t113506 = t113505*t113505;
            double t113507 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t113512 = t113504*t113504;
            double t113513 = t113506*t113506;
            double t113514 = t113504*t113506*6.0;
            double t113515 = gcab*t113504*t113505*t113506*4.0;
            double t113516 = t113512*t113513;
            double t113517 = gcab*t113505*4.0;
            double t113518 = t113514+t113515+t113516+t113517+1.0;
            double t113519 = gcab*t113505;
            double t113520 = t113519+1.0;
            double t113521 = t113504*t113506;
            double t113522 = gcab*t113505*2.0;
            double t113523 = t113521+t113522+1.0;
            double t113524 = t113504*t113506*3.0;
            double t113525 = gcab*t113504*t113505*t113506;
            double t113526 = gcab*t113505*3.0;
            double t113527 = t113524+t113525+t113526+1.0;
            double t113528 = t113400*t113401*t113420*t113406*t113425*t113428*4.0;
            double t113529 = t113402+t113457;
            double t113530 = 1.0/t113415;
            double t113531 = 1.0/(t113412*t113412);
            double t113532 = b4f*t113432*t113388*(2.0/3.0);
            double t113533 = b2f*c*t113393*(1.0/3.0);
            double t113534 = b1f*c*t113433*t113393*(1.0/6.0);
            double t113535 = b3f*c*t113384*t113393*(1.0/2.0);
            double t113536 = t113532+t113533+t113534+t113535;
            double t113537 = a1f*c*c0f*t113416*t113393*(2.0/3.0);
            double t113538 = t113431*t113442*4.0;
            double t113539 = t113456*t113529*(4.0/3.0);
            double t113602 = t113529*t113459*(4.0/3.0);
            double t113540 = -t113602+t113539;
            double t113541 = 1.0/t113452;
            double t113542 = 1.0/(t113449*t113449);
            double t113543 = b4a*t113432*t113388*(2.0/3.0);
            double t113544 = b2a*c*t113393*(1.0/3.0);
            double t113545 = b1a*c*t113433*t113393*(1.0/6.0);
            double t113546 = b3a*c*t113384*t113393*(1.0/2.0);
            double t113547 = t113543+t113544+t113545+t113546;
            double t113548 = t113406*t113541*t113425*t113443*t113542*t113462*t113455*t113547;
            double t113549 = 1.0/pow(rho_b[index],1.0/3.0);
            double t113550 = c*t113549;
            double t113551 = sqrt(t113550);
            double t113552 = b1f*t113551;
            double t113553 = pow(t113550,3.0/2.0);
            double t113554 = b3f*t113553;
            double t113555 = 1.0/pow(rho_b[index],2.0/3.0);
            double t113556 = b4f*t113555*t113388;
            double t113557 = b2f*c*t113549;
            double t113558 = t113552+t113554+t113556+t113557;
            double t113559 = 1.0/pow(rho_b[index],4.0/3.0);
            double t113560 = b1p*t113551;
            double t113561 = b3p*t113553;
            double t113562 = b4p*t113555*t113388;
            double t113563 = b2p*c*t113549;
            double t113564 = t113560+t113561+t113562+t113563;
            double t113565 = 1.0/pow(rho_b[index],5.0/3.0);
            double t113566 = 1.0/sqrt(t113550);
            double t113567 = 1.0/t113558;
            double t113568 = t113407*t113567*(1.0/2.0);
            double t113569 = t113568+1.0;
            double t113570 = 1.0/t113564;
            double t113571 = t113570*t113394*(1.0/2.0);
            double t113572 = t113571+1.0;
            double t113573 = a1p*c*t113549;
            double t113574 = t113573+1.0;
            double t113575 = 1.0/t113572;
            double t113576 = 1.0/(t113564*t113564);
            double t113577 = b4p*t113565*t113388*(2.0/3.0);
            double t113578 = b2p*c*t113559*(1.0/3.0);
            double t113579 = b1p*c*t113566*t113559*(1.0/6.0);
            double t113580 = b3p*c*t113551*t113559*(1.0/2.0);
            double t113581 = t113580+t113577+t113578+t113579;
            double t113582 = t113581*t113574*t113575*t113576;
            double t113583 = log(t113572);
            double t113584 = log(t113569);
            double t113585 = a1f*c*t113549;
            double t113586 = t113585+1.0;
            double t113587 = t113420*t113431*t113406*t113425*t113428;
            double t113588 = Aa*t113406*t113425*t113443*t113453*t113462*t113455*2.0;
            double t113589 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t113590 = 1.0/(t113527*t113527);
            double t113591 = 1.0/t113520;
            double t113592 = 1.0/(t113518*t113518);
            double t113593 = 1.0/(t113523*t113523);
            double t113594 = 1.0/t113518;
            double t113595 = 1.0/(t113520*t113520);
            double t113596 = 1.0/t113523;
            double t113597 = 1.0/t113527;
            double t113599 = a1p*c*c0p*t113419*t113393*(2.0/3.0);
            double t113604 = t113530*t113531*t113418*t113536;
            double t113598 = t113441-t113604+t113537-t113599;
            double t113600 = 1.0/pow(t113381,7.0/3.0);
            double t113601 = 1.0/pow(t113381,8.0/3.0);
            double t113605 = t113440*t113440;
            double t113606 = 1.0/pow(t113383,3.0/2.0);
            double t113607 = b4p*t113601*t113388*(1.0E1/9.0);
            double t113608 = b2p*c*t113600*(4.0/9.0);
            double t113609 = b1p*c*t113600*t113433*(2.0/9.0);
            double t113610 = b3p*c*t113600*t113384*(2.0/3.0);
            double t113611 = b3p*t113601*t113433*t113388*(1.0/1.2E1);
            double t113612 = t113610+t113611+t113607+t113608+t113609-b1p*t113601*t113606*t113388*(1.0/3.6E1);
            double t113613 = t113612*t113434*t113435*t113399;
            double t113614 = 1.0/(t113392*t113392*t113392);
            double t113615 = t113536*t113536;
            double t113616 = 1.0/(t113397*t113397);
            double t113617 = 1.0/(t113392*t113392*t113392*t113392);
            double t113618 = t113605*t113616*t113617*t113394*t113399*(1.0/2.0);
            double t113619 = 1.0/(t113381*t113381*t113381);
            double t113620 = a1p*c*t113440*t113434*t113435*t113393*(2.0/3.0);
            double t113621 = 1.0/(t113381*t113381*t113381*t113381*t113381*t113381);
            double t113622 = t113400*t113401*t113428*4.0;
            double t113623 = t113622+t113538;
            double t113624 = t113400*t113619*t113459*(8.0/3.0);
            double t113625 = 1.0/pow(t113421,2.0/3.0);
            double t113626 = t113427*t113625*t113529*(4.0/9.0);
            double t113627 = 1.0/pow(t113423,2.0/3.0);
            double t113628 = t113427*t113627*t113529*(4.0/9.0);
            double t113629 = t113624+t113626+t113628-t113400*t113456*t113619*(8.0/3.0);
            double t113630 = t113622-t113538;
            double t113631 = t113547*t113547;
            double t113632 = t113420*t113431*t113540*t113406*t113428;
            double t113633 = t113420*t113431*t113406*t113460*t113428;
            double t113634 = Aa*t113406*t113425*t113443*t113623*t113453*t113455*2.0;
            double t113635 = Aa*t113540*t113406*t113443*t113453*t113462*t113455*2.0;
            double t113636 = Aa*t113406*t113460*t113443*t113453*t113462*t113455*2.0;
            double t113637 = c0f*t113501*t113503*2.0;
            double t113639 = c0p*t113488*t113497*2.0;
            double t113638 = t113637-t113639;
            double t113640 = c0f*t113584*t113586*2.0;
            double t113642 = c0p*t113574*t113583*2.0;
            double t113641 = t113640-t113642;
            double t113643 = gamma_aa[index]*gcab*t113589*(8.0/3.0);
            double t113644 = gamma_aa[index]*t113504*t113505*t113589*(8.0/3.0);
            double t113645 = t113643+t113644;
            double t113646 = gamma_bb[index]*gcab*t113507*(8.0/3.0);
            double t113647 = gamma_bb[index]*t113504*t113505*t113507*(8.0/3.0);
            double t113648 = t113646+t113647;
            double t113649 = gamma_aa[index]*gcab*t113589*(1.6E1/3.0);
            double t113650 = gamma_aa[index]*gcab*t113504*t113506*t113589*1.6E1;
            double t113651 = gamma_aa[index]*t113512*t113505*t113506*t113589*(1.6E1/3.0);
            double t113652 = gamma_aa[index]*t113504*t113505*t113589*1.6E1;
            double t113653 = t113650+t113651+t113652+t113649;
            double t113654 = gamma_bb[index]*gcab*t113507*(1.6E1/3.0);
            double t113655 = gamma_bb[index]*gcab*t113504*t113506*t113507*1.6E1;
            double t113656 = gamma_bb[index]*t113512*t113505*t113506*t113507*(1.6E1/3.0);
            double t113657 = gamma_bb[index]*t113504*t113505*t113507*1.6E1;
            double t113658 = t113654+t113655+t113656+t113657;
            double t113659 = gamma_aa[index]*gcab*t113589*4.0;
            double t113660 = gamma_aa[index]*gcab*t113504*t113506*t113589*4.0;
            double t113661 = gamma_aa[index]*t113504*t113505*t113589*8.0;
            double t113662 = t113660+t113661+t113659;
            double t113663 = gamma_bb[index]*gcab*t113507*4.0;
            double t113664 = gamma_bb[index]*gcab*t113504*t113506*t113507*4.0;
            double t113665 = gamma_bb[index]*t113504*t113505*t113507*8.0;
            double t113666 = t113663+t113664+t113665;
            v_rho_a_rho_b_[index] = (t113430+t113587+t113588+rho_a[index]*(-t113496+t113500*t113406*(t113496- \
               (t113503*1.0/(t113472*t113472)*(b2f*c*t113473*(1.0/3.0)+b4f*t113388*t113479*(2.0/3.0)+b1f*c*t113480* \
               t113473*(1.0/6.0)+b3f*c*t113473*t113465*(1.0/2.0)))/t113483+a1f*c*c0f*t113501*t113473*(2.0/3.0)-a1p* \
               c*c0p*t113473*t113497*(2.0/3.0))+a1p*c*c0p*t113473*t113497*(2.0/3.0))+t113381*(t113441+t113633+t113528+ \
               t113636+t113548-a1p*c*c0p*t113419*t113393*(2.0/3.0)-t113420*t113431*t113406*t113442*t113425*4.0-t113431* \
               t113406*t113425*t113428*t113598-Aa*t113406*t113425*t113443*t113453*t113455*(t113538-t113400*t113401* \
               t113428*4.0)*2.0-Aa*a1a*c*t113406*t113425*t113443*t113453*t113462*t113393*(2.0/3.0))-c0p*t113488*t113497* \
               2.0-t113500*t113406*t113638)*(ccab1*gamma_bb[index]*gcab*t113507*t113591*(4.0/3.0)-ccab4*t113512*t113513* \
               t113592*t113658-ccab2*t113504*t113506*t113593*t113648-ccab1*gamma_bb[index]*t113504*t113505*t113507* \
               t113595*(4.0/3.0)+ccab2*gamma_bb[index]*t113504*t113505*t113507*t113596*(8.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t113504*t113506*t113507*t113597*4.0+ccab4*gamma_bb[index]*t113512*t113505*t113506*t113507*t113594* \
               (1.6E1/3.0)-ccab3*gcab*t113504*t113505*t113506*t113590*t113666)+(ccab0+ccab1*gcab*t113505*t113591+ \
               ccab4*t113512*t113513*t113594+ccab2*t113504*t113506*t113596+ccab3*gcab*t113504*t113505*t113506*t113597) \
               *(t113632-t113633+t113634+t113635-t113636+t113381*(t113620+t113613+t113618-t113434*t113605*t113614* \
               t113399*2.0+t113431*t113406*t113460*t113428*(t113441-t113604+t113537-t113599)-a1p*c*c0p*t113600*t113419* \
               (8.0/9.0)-t113431*t113406*t113425*t113428*(t113620+t113613+t113618-t113434*t113605*t113614*t113399* \
               2.0+1.0/(t113412*t113412*t113412)*t113530*t113615*t113418*2.0-t113530*t113531*t113418*(b2f*c*t113600* \
               (4.0/9.0)+b4f*t113601*t113388*(1.0E1/9.0)+b1f*c*t113600*t113433*(2.0/9.0)+b3f*c*t113600*t113384*(2.0/ \
               3.0)-b1f*t113601*t113606*t113388*(1.0/3.6E1)+b3f*t113601*t113433*t113388*(1.0/1.2E1))-1.0/(t113412* \
               t113412*t113412*t113412)*1.0/(t113415*t113415)*t113407*t113615*t113418*(1.0/2.0)+a1f*c*c0f*t113600* \
               t113416*(8.0/9.0)-a1p*c*c0p*t113600*t113419*(8.0/9.0)-a1f*c*t113530*t113531*t113536*t113393*(2.0/3.0) \
               )-t113420*t113431*t113540*t113406*t113442*4.0-t113420*t113431*t113621*t113406*t113425*2.0E1+t113420* \
               t113431*t113406*t113442*t113460*4.0+t113401*t113420*t113406*t113425*t113428*1.2E1+t113420*t113431* \
               t113406*t113428*t113629-t113431*t113406*t113442*t113425*t113598*8.0-t113431*t113540*t113406*t113428* \
               t113598+t113400*t113401*t113420*t113540*t113406*t113428*4.0+t113400*t113401*t113420*t113406*t113460* \
               t113428*4.0+Aa*t113540*t113630*t113406*t113443*t113453*t113455*2.0+Aa*t113406*t113460*t113443*t113623* \
               t113453*t113455*2.0+Aa*t113406*t113443*t113453*t113462*t113455*t113629*2.0-Aa*t113406*t113425*t113443* \
               t113453*t113455*(t113431*t113621*2.0E1-t113401*t113428*1.2E1)*2.0-t113630*t113406*t113541*t113425* \
               t113443*t113542*t113455*t113547+t113540*t113406*t113541*t113443*t113542*t113462*t113455*t113547-t113406* \
               t113460*t113541*t113443*t113542*t113462*t113455*t113547+t113406*t113541*t113425*t113443*t113542*t113623* \
               t113455*t113547-t113406*t113541*t113631*t113425*t113443*t113462*t113455*1.0/(t113449*t113449*t113449) \
               *2.0+t113406*t113541*t113425*t113443*t113542*t113462*t113455*(b2a*c*t113600*(4.0/9.0)+b4a*t113601* \
               t113388*(1.0E1/9.0)+b1a*c*t113600*t113433*(2.0/9.0)+b3a*c*t113600*t113384*(2.0/3.0)-b1a*t113601*t113606* \
               t113388*(1.0/3.6E1)+b3a*t113601*t113433*t113388*(1.0/1.2E1))-Aa*a1a*c*t113600*t113406*t113425*t113443* \
               t113453*t113462*(8.0/9.0)+Aa*a1a*c*t113630*t113406*t113425*t113443*t113453*t113393*(2.0/3.0)-Aa*a1a* \
               c*t113540*t113406*t113443*t113453*t113462*t113393*(2.0/3.0)+Aa*a1a*c*t113406*t113460*t113443*t113453* \
               t113462*t113393*(2.0/3.0)-Aa*a1a*c*t113406*t113425*t113443*t113623*t113453*t113393*(2.0/3.0)+t113406* \
               t113631*t113425*t113443*1.0/(t113452*t113452)*t113444*t113462*t113455*1.0/(t113449*t113449*t113449* \
               t113449)*(1.0/2.0)+a1a*c*t113406*t113541*t113425*t113443*t113542*t113462*t113393*t113547*(2.0/3.0) \
               )-t113440*t113434*t113435*t113399*2.0+t113431*t113406*t113425*t113428*(t113441-t113604+t113537-t113599) \
               *2.0+a1p*c*c0p*t113419*t113393*(4.0/3.0)+t113420*t113431*t113406*t113442*t113425*8.0-Aa*t113630*t113406* \
               t113425*t113443*t113453*t113455*2.0-t113406*t113541*t113425*t113443*t113542*t113462*t113455*t113547* \
               2.0+Aa*a1a*c*t113406*t113425*t113443*t113453*t113462*t113393*(4.0/3.0))-(rho_b[index]*(t113642+t113500* \
               t113406*t113641)+rho_a[index]*(t113639+t113500*t113406*t113638)-t113381*(t113430+t113587+t113588)) \
               *(ccab4*t113512*t113513*t113592*(gamma_aa[index]*gamma_bb[index]*t113504*t113507*t113589*(6.4E1/3.0) \
               +gamma_aa[index]*gamma_bb[index]*t113512*t113506*t113507*t113589*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]* \
               gcab*t113504*t113505*t113507*t113589*(1.28E2/3.0))-ccab2*t113504*1.0/(t113523*t113523*t113523)*t113506* \
               t113645*t113648*2.0-ccab4*t113512*t113513*1.0/(t113518*t113518*t113518)*t113653*t113658*2.0+ccab3* \
               gcab*t113504*t113505*t113506*t113590*(gamma_aa[index]*gamma_bb[index]*t113504*t113507*t113589*(3.2E1/ \
               3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t113504*t113505*t113507*t113589*(3.2E1/3.0))+ccab1*gamma_aa[index]* \
               gamma_bb[index]*t113504*t113507*t113595*t113589*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]* \
               t113504*t113507*t113596*t113589*(3.2E1/9.0)+ccab2*gamma_bb[index]*t113504*t113505*t113507*t113645* \
               t113593*(8.0/3.0)+ccab2*gamma_aa[index]*t113504*t113505*t113593*t113648*t113589*(8.0/3.0)-ccab3*gcab* \
               t113504*t113505*t113506*1.0/(t113527*t113527*t113527)*t113662*t113666*2.0+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t113512*t113506*t113507*t113593*t113589*(3.2E1/9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t113512* \
               t113506*t113507*t113594*t113589*(6.4E1/3.0)+ccab3*gamma_bb[index]*gcab*t113504*t113506*t113507*t113590* \
               t113662*4.0+ccab3*gamma_aa[index]*gcab*t113504*t113506*t113590*t113666*t113589*4.0+ccab4*gamma_bb[index]* \
               t113512*t113505*t113506*t113507*t113653*t113592*(1.6E1/3.0)+ccab4*gamma_aa[index]*t113512*t113505* \
               t113506*t113592*t113658*t113589*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t113504*t113505* \
               t113507*t113597*t113589*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*1.0/(t113520*t113520* \
               t113520)*t113504*t113505*t113507*t113589*(3.2E1/9.0))+(t113430+t113587+t113588-t113381*(-t113441+t113632+ \
               t113634+t113635+t113528-t113548+t113599+t113420*t113431*t113406*t113442*t113425*4.0+t113431*t113406* \
               t113425*t113428*t113598+Aa*a1a*c*t113406*t113425*t113443*t113453*t113462*t113393*(2.0/3.0))+rho_b[index]* \
               (-t113582+t113500*t113406*(t113582-(1.0/(t113558*t113558)*t113586*(b2f*c*t113559*(1.0/3.0)+b4f*t113565* \
               t113388*(2.0/3.0)+b1f*c*t113566*t113559*(1.0/6.0)+b3f*c*t113551*t113559*(1.0/2.0)))/t113569+a1f*c* \
               c0f*t113584*t113559*(2.0/3.0)-a1p*c*c0p*t113583*t113559*(2.0/3.0))+a1p*c*c0p*t113583*t113559*(2.0/ \
               3.0))-c0p*t113574*t113583*2.0-t113500*t113406*t113641)*(ccab1*gamma_aa[index]*gcab*t113591*t113589* \
               (4.0/3.0)-ccab4*t113512*t113513*t113653*t113592-ccab2*t113504*t113506*t113645*t113593-ccab1*gamma_aa[index]* \
               t113504*t113505*t113595*t113589*(4.0/3.0)+ccab2*gamma_aa[index]*t113504*t113505*t113596*t113589*(8.0/ \
               3.0)+ccab3*gamma_aa[index]*gcab*t113504*t113506*t113597*t113589*4.0+ccab4*gamma_aa[index]*t113512* \
               t113505*t113506*t113594*t113589*(1.6E1/3.0)-ccab3*gcab*t113504*t113505*t113506*t113590*t113662);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t113668 = rho_a[index]+rho_b[index];
            double t113669 = 1.0/pow(t113668,1.0/3.0);
            double t113670 = c*t113669;
            double t113671 = sqrt(t113670);
            double t113672 = b1p*t113671;
            double t113673 = pow(t113670,3.0/2.0);
            double t113674 = b3p*t113673;
            double t113675 = c*c;
            double t113676 = 1.0/pow(t113668,2.0/3.0);
            double t113677 = b4p*t113675*t113676;
            double t113678 = b2p*c*t113669;
            double t113679 = t113672+t113674+t113677+t113678;
            double t113680 = 1.0/pow(t113668,4.0/3.0);
            double t113681 = 1.0/c0p;
            double t113682 = 1.0/t113679;
            double t113683 = t113681*t113682*(1.0/2.0);
            double t113684 = t113683+1.0;
            double t113685 = a1p*c*t113669;
            double t113686 = t113685+1.0;
            double t113687 = rho_a[index]-rho_b[index];
            double t113688 = t113687*t113687;
            double t113689 = 1.0/t113668;
            double t113690 = t113687*t113689;
            double t113691 = two_13*2.0;
            double t113692 = t113691-2.0;
            double t113693 = 1.0/t113692;
            double t113694 = 1.0/c0f;
            double t113695 = b1f*t113671;
            double t113696 = b3f*t113673;
            double t113697 = b4f*t113675*t113676;
            double t113698 = b2f*c*t113669;
            double t113699 = t113695+t113696+t113697+t113698;
            double t113700 = 1.0/t113699;
            double t113701 = t113700*t113694*(1.0/2.0);
            double t113702 = t113701+1.0;
            double t113703 = log(t113702);
            double t113704 = a1f*c*t113669;
            double t113705 = t113704+1.0;
            double t113706 = log(t113684);
            double t113717 = c0f*t113703*t113705*2.0;
            double t113718 = c0p*t113706*t113686*2.0;
            double t113707 = t113717-t113718;
            double t113708 = t113690+1.0;
            double t113709 = pow(t113708,4.0/3.0);
            double t113710 = -t113690+1.0;
            double t113711 = pow(t113710,4.0/3.0);
            double t113712 = t113711+t113709-2.0;
            double t113713 = 1.0/(t113668*t113668);
            double t113714 = t113713*t113687;
            double t113715 = t113714+t113689;
            double t113716 = 1.0/(t113668*t113668*t113668*t113668);
            double t113719 = t113688*t113688;
            double t113720 = 1.0/pow(t113668,5.0/3.0);
            double t113721 = 1.0/sqrt(t113670);
            double t113722 = 1.0/t113684;
            double t113723 = 1.0/(t113679*t113679);
            double t113724 = b4p*t113720*t113675*(2.0/3.0);
            double t113725 = b2p*c*t113680*(1.0/3.0);
            double t113726 = b1p*c*t113721*t113680*(1.0/6.0);
            double t113727 = b3p*c*t113671*t113680*(1.0/2.0);
            double t113728 = t113724+t113725+t113726+t113727;
            double t113729 = 1.0/(t113668*t113668*t113668*t113668*t113668);
            double t113730 = 1.0/d2fz0;
            double t113731 = 1.0/Aa;
            double t113732 = b1a*t113671;
            double t113733 = b3a*t113673;
            double t113734 = b4a*t113675*t113676;
            double t113735 = b2a*c*t113669;
            double t113736 = t113732+t113733+t113734+t113735;
            double t113737 = 1.0/t113736;
            double t113738 = t113731*t113737*(1.0/2.0);
            double t113739 = t113738+1.0;
            double t113740 = log(t113739);
            double t113741 = a1a*c*t113669;
            double t113742 = t113741+1.0;
            double t113743 = pow(t113708,1.0/3.0);
            double t113744 = t113715*t113743*(4.0/3.0);
            double t113745 = pow(t113710,1.0/3.0);
            double t113821 = t113715*t113745*(4.0/3.0);
            double t113746 = -t113821+t113744;
            double t113747 = t113716*t113719;
            double t113748 = t113747-1.0;
            double t113749 = 1.0/pow(rho_b[index],1.0/3.0);
            double t113750 = c*t113749;
            double t113751 = sqrt(t113750);
            double t113752 = b1f*t113751;
            double t113753 = pow(t113750,3.0/2.0);
            double t113754 = b3f*t113753;
            double t113755 = 1.0/pow(rho_b[index],2.0/3.0);
            double t113756 = b4f*t113755*t113675;
            double t113757 = b2f*c*t113749;
            double t113758 = t113752+t113754+t113756+t113757;
            double t113759 = 1.0/pow(rho_b[index],4.0/3.0);
            double t113760 = b1p*t113751;
            double t113761 = b3p*t113753;
            double t113762 = b4p*t113755*t113675;
            double t113763 = b2p*c*t113749;
            double t113764 = t113760+t113761+t113762+t113763;
            double t113765 = 1.0/pow(rho_b[index],5.0/3.0);
            double t113766 = 1.0/sqrt(t113750);
            double t113767 = 1.0/t113758;
            double t113768 = t113694*t113767*(1.0/2.0);
            double t113769 = t113768+1.0;
            double t113770 = 1.0/t113764;
            double t113771 = t113770*t113681*(1.0/2.0);
            double t113772 = t113771+1.0;
            double t113773 = a1p*c*t113749;
            double t113774 = t113773+1.0;
            double t113775 = 1.0/t113772;
            double t113776 = 1.0/(t113764*t113764);
            double t113777 = b4p*t113675*t113765*(2.0/3.0);
            double t113778 = b2p*c*t113759*(1.0/3.0);
            double t113779 = b1p*c*t113766*t113759*(1.0/6.0);
            double t113780 = b3p*c*t113751*t113759*(1.0/2.0);
            double t113781 = t113780+t113777+t113778+t113779;
            double t113782 = t113781*t113774*t113775*t113776;
            double t113783 = log(t113772);
            double t113784 = pow(2.0,1.0/3.0);
            double t113785 = t113784*2.0;
            double t113786 = t113785-2.0;
            double t113787 = log(t113769);
            double t113788 = a1f*c*t113749;
            double t113789 = t113788+1.0;
            double t113790 = gcab*gcab;
            double t113794 = 1.0/pow(rho_a[index],8.0/3.0);
            double t113795 = gamma_aa[index]*t113794*(1.0/2.0);
            double t113796 = 1.0/pow(rho_b[index],8.0/3.0);
            double t113797 = gamma_bb[index]*t113796*(1.0/2.0);
            double t113791 = t113795+t113797;
            double t113792 = t113791*t113791;
            double t113793 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t113798 = t113790*t113790;
            double t113799 = t113792*t113792;
            double t113800 = t113790*t113792*6.0;
            double t113801 = gcab*t113790*t113791*t113792*4.0;
            double t113802 = t113798*t113799;
            double t113803 = gcab*t113791*4.0;
            double t113804 = t113800+t113801+t113802+t113803+1.0;
            double t113805 = gcab*t113791;
            double t113806 = t113805+1.0;
            double t113807 = t113790*t113792;
            double t113808 = gcab*t113791*2.0;
            double t113809 = t113807+t113808+1.0;
            double t113810 = t113790*t113792*3.0;
            double t113811 = gcab*t113790*t113791*t113792;
            double t113812 = gcab*t113791*3.0;
            double t113813 = t113810+t113811+t113812+1.0;
            double t113814 = a1p*c*c0p*t113706*t113680*(2.0/3.0);
            double t113815 = 1.0/t113809;
            double t113816 = 1.0/t113813;
            double t113817 = 1.0/t113806;
            double t113818 = 1.0/t113804;
            double t113819 = 1.0/pow(t113668,7.0/3.0);
            double t113820 = 1.0/pow(t113668,8.0/3.0);
            double t113822 = 1.0/t113702;
            double t113823 = 1.0/(t113699*t113699);
            double t113824 = b4f*t113720*t113675*(2.0/3.0);
            double t113825 = b2f*c*t113680*(1.0/3.0);
            double t113826 = b1f*c*t113721*t113680*(1.0/6.0);
            double t113827 = b3f*c*t113671*t113680*(1.0/2.0);
            double t113828 = t113824+t113825+t113826+t113827;
            double t113829 = t113705*t113822*t113823*t113828;
            double t113831 = t113722*t113723*t113728*t113686;
            double t113832 = a1f*c*c0f*t113703*t113680*(2.0/3.0);
            double t113830 = -t113831+t113814-t113832+t113829;
            double t113833 = t113728*t113728;
            double t113834 = 1.0/pow(t113670,3.0/2.0);
            double t113835 = b4p*t113820*t113675*(1.0E1/9.0);
            double t113836 = b2p*c*t113819*(4.0/9.0);
            double t113837 = b1p*c*t113721*t113819*(2.0/9.0);
            double t113838 = b3p*c*t113671*t113819*(2.0/3.0);
            double t113839 = b3p*t113721*t113820*t113675*(1.0/1.2E1);
            double t113840 = t113835+t113836+t113837+t113838+t113839-b1p*t113820*t113834*t113675*(1.0/3.6E1);
            double t113841 = 1.0/(t113679*t113679*t113679);
            double t113842 = t113722*t113841*t113833*t113686*2.0;
            double t113843 = t113828*t113828;
            double t113844 = 1.0/(t113684*t113684);
            double t113845 = 1.0/(t113679*t113679*t113679*t113679);
            double t113846 = t113713*2.0;
            double t113847 = 1.0/(t113668*t113668*t113668);
            double t113848 = t113847*t113687*2.0;
            double t113849 = t113846+t113848;
            double t113850 = t113715*t113715;
            double t113851 = a1p*c*c0p*t113706*t113819*(8.0/9.0);
            double t113852 = 1.0/(t113668*t113668*t113668*t113668*t113668*t113668);
            double t113853 = t113716*t113687*t113688*4.0;
            double t113854 = t113719*t113729*4.0;
            double t113855 = t113853+t113854;
            double t113856 = t113743*t113849*(4.0/3.0);
            double t113857 = 1.0/pow(t113708,2.0/3.0);
            double t113858 = t113850*t113857*(4.0/9.0);
            double t113859 = 1.0/pow(t113710,2.0/3.0);
            double t113860 = t113850*t113859*(4.0/9.0);
            double t113861 = t113860+t113856+t113858-t113745*t113849*(4.0/3.0);
            double t113862 = 1.0/t113739;
            double t113863 = 1.0/(t113736*t113736);
            double t113864 = b4a*t113720*t113675*(2.0/3.0);
            double t113865 = b2a*c*t113680*(1.0/3.0);
            double t113866 = b1a*c*t113721*t113680*(1.0/6.0);
            double t113867 = b3a*c*t113671*t113680*(1.0/2.0);
            double t113868 = t113864+t113865+t113866+t113867;
            double t113869 = t113868*t113868;
            double t113870 = 1.0/t113769;
            double t113871 = b4f*t113675*t113765*(2.0/3.0);
            double t113872 = b2f*c*t113759*(1.0/3.0);
            double t113873 = b1f*c*t113766*t113759*(1.0/6.0);
            double t113874 = b3f*c*t113751*t113759*(1.0/2.0);
            double t113875 = t113871+t113872+t113873+t113874;
            double t113876 = 1.0/(t113758*t113758);
            double t113877 = 1.0/pow(rho_b[index],7.0/3.0);
            double t113878 = 1.0/pow(t113750,3.0/2.0);
            double t113879 = t113875*t113875;
            double t113880 = t113781*t113781;
            double t113881 = 1.0/(t113764*t113764*t113764);
            double t113882 = t113880*t113881*t113774*t113775*2.0;
            double t113883 = b4p*t113675*t113796*(1.0E1/9.0);
            double t113884 = b2p*c*t113877*(4.0/9.0);
            double t113885 = b3p*t113675*t113766*t113796*(1.0/1.2E1);
            double t113886 = b1p*c*t113766*t113877*(2.0/9.0);
            double t113887 = b3p*c*t113751*t113877*(2.0/3.0);
            double t114004 = b1p*t113675*t113796*t113878*(1.0/3.6E1);
            double t113888 = -t114004+t113883+t113884+t113885+t113886+t113887;
            double t113889 = 1.0/(t113772*t113772);
            double t113890 = 1.0/(t113764*t113764*t113764*t113764);
            double t113891 = a1p*c*c0p*t113783*t113877*(8.0/9.0);
            double t113892 = a1f*c*c0f*t113759*t113787*(2.0/3.0);
            double t113893 = a1p*c*c0p*t113783*t113759*(2.0/3.0);
            double t113965 = t113870*t113875*t113876*t113789;
            double t113894 = t113782+t113892-t113893-t113965;
            double t113895 = gamma_bb[index]*gamma_bb[index];
            double t113896 = gcaa*gcaa;
            double t113897 = t113895*t113895;
            double t113898 = t113896*t113896;
            double t113899 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t113900 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t113901 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t113902 = 1.0/pow(rho_a[index],1.0/3.0);
            double t113903 = c*t113902;
            double t113904 = sqrt(t113903);
            double t113905 = pow(t113903,3.0/2.0);
            double t113906 = 1.0/pow(rho_a[index],2.0/3.0);
            double t113907 = b1p*t113904;
            double t113908 = b3p*t113905;
            double t113909 = b4p*t113906*t113675;
            double t113910 = b2p*c*t113902;
            double t113911 = t113910+t113907+t113908+t113909;
            double t113912 = 1.0/t113911;
            double t113913 = t113912*t113681*(1.0/2.0);
            double t113914 = t113913+1.0;
            double t113915 = log(t113914);
            double t113916 = a1p*c*t113902;
            double t113917 = t113916+1.0;
            double t113918 = c0p*t113915*t113917*2.0;
            double t113919 = c0f*t113787*t113789*2.0;
            double t113921 = c0p*t113774*t113783*2.0;
            double t113920 = -t113921+t113919;
            double t113922 = t113712*t113707*t113716*t113719*t113693;
            double t113923 = Aa*t113712*t113730*t113740*t113742*t113693*t113748*2.0;
            double t113924 = gamma_bb[index]*gcab*t113793*(1.6E1/3.0);
            double t113925 = gamma_bb[index]*gcab*t113790*t113792*t113793*1.6E1;
            double t113926 = gamma_bb[index]*t113791*t113792*t113793*t113798*(1.6E1/3.0);
            double t113927 = gamma_bb[index]*t113790*t113791*t113793*1.6E1;
            double t113928 = t113924+t113925+t113926+t113927;
            double t113929 = 1.0/(t113806*t113806);
            double t113930 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t113931 = gamma_bb[index]*gcab*t113793*(8.0/3.0);
            double t113932 = gamma_bb[index]*t113790*t113791*t113793*(8.0/3.0);
            double t113933 = t113931+t113932;
            double t113934 = 1.0/(t113813*t113813);
            double t113935 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t113936 = 1.0/(t113804*t113804);
            double t113937 = 1.0/(t113809*t113809);
            double t113938 = gamma_bb[index]*gcab*t113793*4.0;
            double t113939 = gamma_bb[index]*gcab*t113790*t113792*t113793*4.0;
            double t113940 = gamma_bb[index]*t113790*t113791*t113793*8.0;
            double t113941 = t113940+t113938+t113939;
            double t113942 = t113920*t113693*t113786;
            double t113943 = t113921+t113942;
            double t113944 = gamma_bb[index]*gcaa*t113796*4.0;
            double t113945 = gamma_bb[index]*gcaa*t113900*t113895*t113896*4.0;
            double t113946 = t113901*t113895*t113896*6.0;
            double t113947 = t113897*t113898*t113899;
            double t113948 = t113944+t113945+t113946+t113947+1.0;
            double t113949 = 1.0/t113948;
            double t113950 = gamma_bb[index]*gcaa*t113796;
            double t113951 = t113950+1.0;
            double t113952 = 1.0/t113951;
            double t113953 = gamma_bb[index]*gcaa*t113796*3.0;
            double t113954 = gamma_bb[index]*gcaa*t113900*t113895*t113896;
            double t113955 = t113901*t113895*t113896*3.0;
            double t113956 = t113953+t113954+t113955+1.0;
            double t113957 = 1.0/t113956;
            double t113958 = gamma_bb[index]*gcaa*t113796*2.0;
            double t113959 = t113901*t113895*t113896;
            double t113960 = t113958+t113959+1.0;
            double t113961 = 1.0/t113960;
            double t113962 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t113963 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t113964 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t113966 = t113693*t113786*t113894;
            double t113967 = ccaa4*t113964*t113949*t113897*t113898*(3.2E1/3.0);
            double t113968 = ccaa1*gamma_bb[index]*gcaa*t113952*t113793*(8.0/3.0);
            double t113969 = ccaa3*gamma_bb[index]*gcaa*t113963*t113957*t113895*t113896*8.0;
            double t113970 = ccaa2*t113961*t113962*t113895*t113896*(1.6E1/3.0);
            double t113971 = 1.0/(t113951*t113951);
            double t113972 = gamma_bb[index]*gcaa*t113793*8.0;
            double t113973 = gamma_bb[index]*gcaa*t113963*t113895*t113896*8.0;
            double t113974 = t113962*t113895*t113896*1.6E1;
            double t113975 = t113972+t113973+t113974;
            double t113976 = 1.0/(t113956*t113956);
            double t113977 = gamma_bb[index]*gcaa*t113793*(3.2E1/3.0);
            double t113978 = gamma_bb[index]*gcaa*t113963*t113895*t113896*3.2E1;
            double t113979 = t113962*t113895*t113896*3.2E1;
            double t113980 = t113964*t113897*t113898*(3.2E1/3.0);
            double t113981 = t113980+t113977+t113978+t113979;
            double t113982 = 1.0/(t113948*t113948);
            double t113983 = gamma_bb[index]*gcaa*t113793*(1.6E1/3.0);
            double t113984 = t113962*t113895*t113896*(1.6E1/3.0);
            double t113985 = t113983+t113984;
            double t113986 = 1.0/(t113960*t113960);
            double t113987 = t113970+t113967+t113968+t113969-ccaa1*t113962*t113971*t113895*t113896*(8.0/3.0)- \
               ccaa2*t113901*t113895*t113985*t113896*t113986-ccaa4*t113981*t113982*t113897*t113898*t113899-ccaa3* \
               gamma_bb[index]*gcaa*t113900*t113975*t113895*t113976*t113896;
            double t113988 = -t113782+t113893+t113966;
            double t113989 = 1.0/pow(rho_b[index],1.0E1);
            double t113990 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t113991 = ccaa4*t113949*t113897*t113898*t113899;
            double t113992 = ccaa1*gamma_bb[index]*gcaa*t113952*t113796;
            double t113993 = ccaa3*gamma_bb[index]*gcaa*t113900*t113957*t113895*t113896;
            double t113994 = ccaa2*t113901*t113961*t113895*t113896;
            double t113995 = ccaa0+t113991+t113992+t113993+t113994;
            double t113996 = 1.0/(t113758*t113758*t113758);
            double t113997 = b4f*t113675*t113796*(1.0E1/9.0);
            double t113998 = b2f*c*t113877*(4.0/9.0);
            double t113999 = b3f*t113675*t113766*t113796*(1.0/1.2E1);
            double t114000 = b1f*c*t113766*t113877*(2.0/9.0);
            double t114001 = b3f*c*t113751*t113877*(2.0/3.0);
            double t114002 = t114000+t114001+t113997+t113998+t113999-b1f*t113675*t113796*t113878*(1.0/3.6E1);
            double t114003 = t114002*t113870*t113876*t113789;
            double t114005 = t113774*t113775*t113776*t113888;
            double t114006 = 1.0/(t113769*t113769);
            double t114007 = 1.0/(t113758*t113758*t113758*t113758);
            double t114008 = t114006*t114007*t113694*t113789*t113879*(1.0/2.0);
            double t114009 = t113681*t113880*t113890*t113774*t113889*(1.0/2.0);
            double t114010 = a1f*c*t113870*t113875*t113759*t113876*(2.0/3.0);
            double t114011 = a1p*c*t113781*t113775*t113776*t113759*(2.0/3.0);
            double t114012 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t114013 = 1.0/(omega*omega);
            double t114014 = pow(t114012,2.0/3.0);
            double t114017 = t114013*t114014;
            double t114015 = exp(-t114017);
            double t114016 = 1.0/pow(t114012,1.0/3.0);
            double t114018 = 1.0/pow(t114012,2.0/3.0);
            double t114019 = omega*omega;
            double t114020 = t114015-1.0;
            double t114021 = 1.0/pow(t114012,4.0/3.0);
            double t114022 = 1.0/rho_b[index];
            double t114023 = 1.0/pow(t114012,5.0/3.0);
            double t114024 = 1.0/sqrt(3.141592653589793);
            double t114031 = t114020*t114018*t114019*(1.0/2.0);
            double t114025 = -t114031+t114015;
            double t114026 = t114022*t114015*(1.0/3.0);
            double t114027 = t114020*t114023*t114019*(2.778046668940015E15/1.40737488355328E14);
            double t114074 = t114013*t114015*t114016*(2.778046668940015E15/7.0368744177664E13);
            double t114028 = t114026+t114027-t114074;
            double t114029 = 1.0/omega;
            double t114030 = 1.0/pow(t114012,7.0/3.0);
            double t114032 = gx*gx;
            double t114033 = t114032*t114032;
            double t114034 = pow(rho_b[index],4.0/3.0);
            double t114035 = pow(t114012,1.0/3.0);
            double t114036 = t114035*t114029;
            double t114037 = erf(t114036);
            double t114038 = t114037*(3.991211251234741E15/2.251799813685248E15);
            double t114039 = omega*t114016*t114025;
            double t114040 = t114038+t114039;
            double t114041 = gamma_bb[index]*gx*t113796*4.0;
            double t114042 = gamma_bb[index]*gx*t114032*t113900*t113895*4.0;
            double t114043 = t114032*t113901*t113895*6.0;
            double t114044 = t114033*t113897*t113899;
            double t114045 = t114041+t114042+t114043+t114044+1.0;
            double t114046 = 1.0/t114045;
            double t114047 = gamma_bb[index]*gx*t113796;
            double t114048 = t114047+1.0;
            double t114049 = 1.0/t114048;
            double t114050 = gamma_bb[index]*gx*t113796*3.0;
            double t114051 = gamma_bb[index]*gx*t114032*t113900*t113895;
            double t114052 = t114032*t113901*t113895*3.0;
            double t114053 = t114050+t114051+t114052+1.0;
            double t114054 = 1.0/t114053;
            double t114055 = gamma_bb[index]*gx*t113796*2.0;
            double t114056 = t114032*t113901*t113895;
            double t114057 = t114055+t114056+1.0;
            double t114058 = 1.0/t114057;
            double t114066 = gamma_bb[index]*gx*t113793*(3.2E1/3.0);
            double t114067 = gamma_bb[index]*gx*t114032*t113963*t113895*3.2E1;
            double t114068 = t114032*t113962*t113895*3.2E1;
            double t114069 = t114033*t113964*t113897*(3.2E1/3.0);
            double t114059 = t114066+t114067+t114068+t114069;
            double t114071 = gamma_bb[index]*gx*t113793*(1.6E1/3.0);
            double t114072 = t114032*t113962*t113895*(1.6E1/3.0);
            double t114060 = t114071+t114072;
            double t114061 = 1.0/(t114053*t114053);
            double t114062 = gamma_bb[index]*gx*t113793*8.0;
            double t114063 = gamma_bb[index]*gx*t114032*t113963*t113895*8.0;
            double t114064 = t114032*t113962*t113895*1.6E1;
            double t114065 = t114062+t114063+t114064;
            double t114070 = 1.0/(t114045*t114045);
            double t114073 = 1.0/(t114057*t114057);
            double t114075 = omega*t114016*t114028;
            double t114076 = t114015*t114024*t114018*t114029*(1.108777112152858E31/1.584563250285287E29);
            double t114085 = omega*t114021*t114025*(2.778046668940015E15/1.40737488355328E14);
            double t114077 = t114075+t114076-t114085;
            double t114078 = cx4*t114033*t114046*t113897*t113899;
            double t114079 = cx1*gamma_bb[index]*gx*t114049*t113796;
            double t114080 = cx3*gamma_bb[index]*gx*t114032*t113900*t114054*t113895;
            double t114081 = cx2*t114032*t113901*t114058*t113895;
            double t114082 = cx0+t114080+t114081+t114078+t114079;
            double t114083 = omega*t114040*t114016*(4.0/3.0);
            double t114084 = t114083-1.0;
            double t114086 = omega*t114021*t114040*(2.778046668940015E15/1.05553116266496E14);
            double t114087 = 1.0/(t114048*t114048);
            double t114088 = t114086-omega*t114016*t114077*(4.0/3.0);
            double t114089 = pow(rho_b[index],1.0/3.0);
            double t114090 = cx4*t114033*t114046*t113964*t113897*(3.2E1/3.0);
            double t114091 = cx1*gamma_bb[index]*gx*t114049*t113793*(8.0/3.0);
            double t114092 = cx3*gamma_bb[index]*gx*t114032*t114054*t113963*t113895*8.0;
            double t114093 = cx2*t114032*t114058*t113962*t113895*(1.6E1/3.0);
            double t114094 = t114090+t114091+t114092+t114093-cx1*t114032*t114087*t113962*t113895*(8.0/3.0)-cx2* \
               t114032*t114060*t113901*t114073*t113895-cx4*t114033*t114070*t114059*t113897*t113899-cx3*gamma_bb[index]* \
               gx*t114032*t114061*t113900*t114065*t113895;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t113817*t113791+ccab2*t113815*t113790*t113792+ccab4*t113818* \
               t113798*t113799+ccab3*gcab*t113816*t113790*t113791*t113792)*(-rho_b[index]*(t114011+t114005+t114009- \
               t113882-t113891+t113693*t113786*(t114010+t114003+t114008+t113882+t113891-t113774*t113775*t113776*t113888- \
               t113870*t113789*t113879*t113996*2.0-a1f*c*c0f*t113787*t113877*(8.0/9.0)-t113681*t113880*t113890*t113774* \
               t113889*(1.0/2.0)-a1p*c*t113781*t113775*t113776*t113759*(2.0/3.0)))-t113668*(t113842+t113851-t113722* \
               t113723*t113840*t113686-t113712*t113716*t113719*t113693*(t113842+t113851-t113722*t113723*t113840*t113686- \
               t113705*t113822*t113843*1.0/(t113699*t113699*t113699)*2.0+t113705*t113822*t113823*(b2f*c*t113819*(4.0/ \
               9.0)+b4f*t113820*t113675*(1.0E1/9.0)+b1f*c*t113721*t113819*(2.0/9.0)+b3f*c*t113671*t113819*(2.0/3.0) \
               -b1f*t113820*t113834*t113675*(1.0/3.6E1)+b3f*t113721*t113820*t113675*(1.0/1.2E1))+1.0/(t113702*t113702) \
               *t113705*t113843*t113694*1.0/(t113699*t113699*t113699*t113699)*(1.0/2.0)-a1f*c*c0f*t113703*t113819* \
               (8.0/9.0)-t113833*t113681*t113844*t113845*t113686*(1.0/2.0)+a1f*c*t113822*t113823*t113680*t113828* \
               (2.0/3.0)-a1p*c*t113722*t113723*t113680*t113728*(2.0/3.0))-t113712*t113830*t113719*t113693*t113729* \
               8.0+t113712*t113707*t113852*t113719*t113693*2.0E1-t113830*t113716*t113719*t113746*t113693*2.0+t113712* \
               t113707*t113716*t113693*t113688*1.2E1+t113707*t113716*t113861*t113719*t113693-t113833*t113681*t113844* \
               t113845*t113686*(1.0/2.0)+t113707*t113719*t113746*t113693*t113729*8.0-t113712*t113830*t113716*t113693* \
               t113687*t113688*8.0+t113712*t113707*t113693*t113729*t113687*t113688*3.2E1+t113707*t113716*t113746* \
               t113693*t113687*t113688*8.0-a1p*c*t113722*t113723*t113680*t113728*(2.0/3.0)+Aa*t113730*t113740*t113742* \
               t113861*t113693*t113748*2.0+Aa*t113730*t113740*t113742*t113746*t113693*t113855*4.0+Aa*t113712*t113730* \
               t113740*t113742*t113693*(t113852*t113719*2.0E1+t113716*t113688*1.2E1+t113729*t113687*t113688*3.2E1) \
               *2.0-t113712*t113730*t113742*t113862*t113863*t113693*t113855*t113868*2.0-t113730*t113742*t113862*t113746* \
               t113863*t113693*t113748*t113868*2.0+t113712*t113730*t113742*1.0/(t113736*t113736*t113736)*t113862* \
               t113693*t113748*t113869*2.0-t113712*t113730*t113742*t113862*t113863*t113693*t113748*(b2a*c*t113819* \
               (4.0/9.0)+b4a*t113820*t113675*(1.0E1/9.0)+b1a*c*t113721*t113819*(2.0/9.0)+b3a*c*t113671*t113819*(2.0/ \
               3.0)-b1a*t113820*t113834*t113675*(1.0/3.6E1)+b3a*t113721*t113820*t113675*(1.0/1.2E1))+Aa*a1a*c*t113712* \
               t113730*t113740*t113680*t113693*t113855*(4.0/3.0)+Aa*a1a*c*t113712*t113730*t113740*t113693*t113819* \
               t113748*(8.0/9.0)+Aa*a1a*c*t113730*t113740*t113680*t113746*t113693*t113748*(4.0/3.0)-t113712*t113730* \
               t113731*t113742*1.0/(t113736*t113736*t113736*t113736)*t113693*1.0/(t113739*t113739)*t113748*t113869* \
               (1.0/2.0)-a1a*c*t113712*t113730*t113680*t113862*t113863*t113693*t113748*t113868*(2.0/3.0))-t113693* \
               t113786*t113894*2.0-t113722*t113723*t113728*t113686*2.0+t113781*t113774*t113775*t113776*2.0+a1p*c* \
               c0p*t113706*t113680*(4.0/3.0)-a1p*c*c0p*t113783*t113759*(4.0/3.0)-t113712*t113830*t113716*t113719* \
               t113693*2.0+t113712*t113707*t113719*t113693*t113729*8.0+t113707*t113716*t113719*t113746*t113693*2.0+ \
               t113712*t113707*t113716*t113693*t113687*t113688*8.0+Aa*t113712*t113730*t113740*t113742*t113693*t113855* \
               4.0+Aa*t113730*t113740*t113742*t113746*t113693*t113748*4.0-t113712*t113730*t113742*t113862*t113863* \
               t113693*t113748*t113868*2.0+Aa*a1a*c*t113712*t113730*t113740*t113680*t113693*t113748*(4.0/3.0))+(rho_b[index]* \
               t113943+rho_a[index]*(t113918-t113693*t113786*(t113918-c0f*log((t113694*(1.0/2.0))/(b1f*t113904+b3f* \
               t113905+b2f*c*t113902+b4f*t113906*t113675)+1.0)*(a1f*c*t113902+1.0)*2.0))-t113668*(t113922+t113923+ \
               t113718))*(-ccab2*t113790*t113792*t113937*(gamma_bb[index]*gcab*t113935*(8.8E1/9.0)+t113930*t113790* \
               t113895*(3.2E1/9.0)+gamma_bb[index]*t113790*t113791*t113935*(8.8E1/9.0))+ccab2*(t113933*t113933)*t113790* \
               1.0/(t113809*t113809*t113809)*t113792*2.0+ccab4*1.0/(t113804*t113804*t113804)*(t113928*t113928)*t113798* \
               t113799*2.0+ccab1*gamma_bb[index]*gcab*t113817*t113935*(4.4E1/9.0)+ccab2*t113930*t113815*t113790*t113895* \
               (3.2E1/9.0)-ccab1*t113930*t113790*t113929*t113895*(3.2E1/9.0)-ccab4*t113936*t113798*t113799*(gamma_bb[index]* \
               gcab*t113935*(1.76E2/9.0)+t113930*t113790*t113895*(6.4E1/3.0)+gamma_bb[index]*t113790*t113791*t113935* \
               (1.76E2/3.0)+t113930*t113792*t113895*t113798*(6.4E1/3.0)+gamma_bb[index]*gcab*t113790*t113935*t113792* \
               (1.76E2/3.0)+gamma_bb[index]*t113791*t113935*t113792*t113798*(1.76E2/9.0)+gcab*t113930*t113790*t113791* \
               t113895*(1.28E2/3.0))+ccab4*t113930*t113818*t113792*t113895*t113798*(6.4E1/3.0)+ccab2*gamma_bb[index]* \
               t113815*t113790*t113791*t113935*(8.8E1/9.0)-ccab1*gamma_bb[index]*t113790*t113791*t113935*t113929* \
               (4.4E1/9.0)+ccab3*gcab*1.0/(t113813*t113813*t113813)*(t113941*t113941)*t113790*t113791*t113792*2.0+ \
               ccab3*gamma_bb[index]*gcab*t113816*t113790*t113935*t113792*(4.4E1/3.0)-ccab2*gamma_bb[index]*t113933* \
               t113790*t113791*t113793*t113937*(1.6E1/3.0)+ccab4*gamma_bb[index]*t113791*t113818*t113935*t113792* \
               t113798*(1.76E2/9.0)+ccab3*gcab*t113930*t113816*t113790*t113791*t113895*(3.2E1/3.0)+ccab1*gcab*t113930* \
               1.0/(t113806*t113806*t113806)*t113790*t113791*t113895*(3.2E1/9.0)-ccab3*gcab*t113790*t113934*t113791* \
               t113792*(gamma_bb[index]*gcab*t113935*(4.4E1/3.0)+t113930*t113790*t113895*(3.2E1/3.0)+gamma_bb[index]* \
               t113790*t113791*t113935*(8.8E1/3.0)+gamma_bb[index]*gcab*t113790*t113935*t113792*(4.4E1/3.0)+gcab* \
               t113930*t113790*t113791*t113895*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t113941*t113790*t113934*t113792* \
               t113793*8.0-ccab4*gamma_bb[index]*t113791*t113792*t113936*t113793*t113928*t113798*(3.2E1/3.0))+(t113922+ \
               t113923+t113718+rho_b[index]*(-t113782+t113893+t113693*t113786*(t113782+t113892-t113870*t113875*t113876* \
               t113789-a1p*c*c0p*t113783*t113759*(2.0/3.0)))-t113668*(t113814-t113722*t113723*t113728*t113686-t113712* \
               t113830*t113716*t113719*t113693+t113712*t113707*t113719*t113693*t113729*4.0+t113707*t113716*t113719* \
               t113746*t113693+t113712*t113707*t113716*t113693*t113687*t113688*4.0+Aa*t113712*t113730*t113740*t113742* \
               t113693*t113855*2.0+Aa*t113730*t113740*t113742*t113746*t113693*t113748*2.0-t113712*t113730*t113742* \
               t113862*t113863*t113693*t113748*t113868+Aa*a1a*c*t113712*t113730*t113740*t113680*t113693*t113748*(2.0/ \
               3.0))-c0p*t113774*t113783*2.0-t113920*t113693*t113786)*(ccab1*gamma_bb[index]*gcab*t113817*t113793* \
               (4.0/3.0)-ccab2*t113933*t113790*t113792*t113937-ccab4*t113936*t113928*t113798*t113799+ccab2*gamma_bb[index]* \
               t113815*t113790*t113791*t113793*(8.0/3.0)-ccab1*gamma_bb[index]*t113790*t113791*t113793*t113929*(4.0/ \
               3.0)+ccab3*gamma_bb[index]*gcab*t113816*t113790*t113792*t113793*4.0+ccab4*gamma_bb[index]*t113791* \
               t113818*t113792*t113793*t113798*(1.6E1/3.0)-ccab3*gcab*t113941*t113790*t113934*t113791*t113792)*2.0+ \
               t113943*t113987*2.0+t113995*t113988*2.0-rho_b[index]*t113943*(ccaa1*gamma_bb[index]*gcaa*t113952*t113935* \
               (8.8E1/9.0)-ccaa1*t113930*t113971*t113895*t113896*2.4E1+ccaa2*t113930*t113961*t113895*t113896*(3.04E2/ \
               9.0)+ccaa4*t113990*t113949*t113897*t113898*(1.12E3/9.0)-ccaa2*t113962*t113895*t113985*t113896*t113986* \
               (3.2E1/3.0)-ccaa4*t113981*t113964*t113982*t113897*t113898*(6.4E1/3.0)-ccaa2*t113901*t113895*t113896* \
               t113986*(gamma_bb[index]*gcaa*t113935*(1.76E2/9.0)+t113930*t113895*t113896*(3.04E2/9.0))-ccaa4*t113982* \
               t113897*t113898*t113899*(gamma_bb[index]*gcaa*t113935*(3.52E2/9.0)+t113930*t113895*t113896*(6.08E2/ \
               3.0)+t113990*t113897*t113898*(1.12E3/9.0)+gamma_bb[index]*gcaa*t113895*t113896*t113989*2.88E2)+ccaa2* \
               t113901*1.0/(t113960*t113960*t113960)*t113895*(t113985*t113985)*t113896*2.0+ccaa4*(t113981*t113981) \
               *1.0/(t113948*t113948*t113948)*t113897*t113898*t113899*2.0+ccaa3*gamma_bb[index]*gcaa*t113957*t113895* \
               t113896*t113989*7.2E1+ccaa1*gamma_bb[index]*gcaa*1.0/(t113951*t113951*t113951)*t113895*t113896*t113989* \
               (1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t113900*1.0/(t113956*t113956*t113956)*(t113975*t113975)*t113895* \
               t113896*2.0-ccaa3*gamma_bb[index]*gcaa*t113900*t113895*t113976*t113896*(gamma_bb[index]*gcaa*t113935* \
               (8.8E1/3.0)+t113930*t113895*t113896*(3.04E2/3.0)+gamma_bb[index]*gcaa*t113895*t113896*t113989*7.2E1) \
               -ccaa3*gamma_bb[index]*gcaa*t113963*t113975*t113895*t113976*t113896*1.6E1)+rho_b[index]*t113995*(t114011+ \
               t114005+t114009-t113882-t113891+t113693*t113786*(t114010-t114011+t114003-t114005+t114008-t114009+t113882+ \
               t113891-t113870*t113789*t113879*t113996*2.0-a1f*c*c0f*t113787*t113877*(8.0/9.0)))-rho_b[index]*t113987* \
               t113988*2.0-c0*t114034*t114084*(cx1*gamma_bb[index]*gx*t114049*t113935*(8.8E1/9.0)-cx1*t114032*t113930* \
               t114087*t113895*2.4E1+cx2*t114032*t113930*t114058*t113895*(3.04E2/9.0)+cx4*t114033*t114046*t113990* \
               t113897*(1.12E3/9.0)-cx2*t114032*t114060*t114073*t113962*t113895*(3.2E1/3.0)-cx4*t114033*t114070*t114059* \
               t113964*t113897*(6.4E1/3.0)-cx2*t114032*t113901*t114073*t113895*(gamma_bb[index]*gx*t113935*(1.76E2/ \
               9.0)+t114032*t113930*t113895*(3.04E2/9.0))-cx4*t114033*t114070*t113897*t113899*(gamma_bb[index]*gx* \
               t113935*(3.52E2/9.0)+t114032*t113930*t113895*(6.08E2/3.0)+t114033*t113990*t113897*(1.12E3/9.0)+gamma_bb[index]* \
               gx*t114032*t113895*t113989*2.88E2)+cx2*t114032*(t114060*t114060)*t113901*1.0/(t114057*t114057*t114057) \
               *t113895*2.0+cx4*t114033*1.0/(t114045*t114045*t114045)*(t114059*t114059)*t113897*t113899*2.0+cx3*gamma_bb[index]* \
               gx*t114032*t114054*t113895*t113989*7.2E1+cx1*gamma_bb[index]*gx*t114032*1.0/(t114048*t114048*t114048) \
               *t113895*t113989*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t114032*t113900*1.0/(t114053*t114053*t114053) \
               *(t114065*t114065)*t113895*2.0-cx3*gamma_bb[index]*gx*t114032*t114061*t113900*t113895*(gamma_bb[index]* \
               gx*t113935*(8.8E1/3.0)+t114032*t113930*t113895*(3.04E2/3.0)+gamma_bb[index]*gx*t114032*t113895*t113989* \
               7.2E1)-cx3*gamma_bb[index]*gx*t114032*t114061*t114065*t113963*t113895*1.6E1)-c0*t114034*t114094*t114088* \
               2.0-c0*t114082*t114084*t113755*(4.0/9.0)+c0*t114084*t114094*t114089*(8.0/3.0)+c0*t114082*t114088*t114089* \
               (8.0/3.0)+c0*t114034*t114082*(omega*t114030*t114040*(-7.717543294808713E30/3.713820117856141E27)+omega* \
               t114021*t114077*(2.778046668940015E15/5.2776558133248E13)+omega*t114016*(omega*t114030*t114025*(-7.717543294808713E30/ \
               4.951760157141521E27)+omega*t114021*t114028*(2.778046668940015E15/7.0368744177664E13)+omega*t114016* \
               (1.0/(rho_b[index]*rho_b[index])*t114015*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t114015*t114018*(7.717543294808713E30/ \
               4.951760157141521E27)+t114020*1.0/pow(t114012,8.0/3.0)*t114019*(3.858771647404357E31/1.980704062856608E28) \
               -t114021*t114013*t114015*(7.717543294808713E30/9.903520314283042E27)+t114013*t114022*t114015*t114016* \
               (2.778046668940015E15/2.11106232532992E14))+t114023*t114015*t114024*t114029*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t114022*t114015*t114024*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t115963 = 1.0/pow(rho_b[index],1.0/3.0);
            double t115964 = c*t115963;
            double t115965 = sqrt(t115964);
            double t115966 = b1f*t115965;
            double t115967 = pow(t115964,3.0/2.0);
            double t115968 = b3f*t115967;
            double t115969 = c*c;
            double t115970 = 1.0/pow(rho_b[index],2.0/3.0);
            double t115971 = b4f*t115970*t115969;
            double t115972 = b2f*c*t115963;
            double t115973 = t115971+t115972+t115966+t115968;
            double t115974 = 1.0/pow(rho_b[index],4.0/3.0);
            double t115975 = b1p*t115965;
            double t115976 = b3p*t115967;
            double t115977 = b4p*t115970*t115969;
            double t115978 = b2p*c*t115963;
            double t115979 = t115975+t115976+t115977+t115978;
            double t115980 = 1.0/pow(rho_b[index],5.0/3.0);
            double t115981 = 1.0/sqrt(t115964);
            double t115982 = 1.0/c0f;
            double t115983 = 1.0/t115973;
            double t115984 = t115982*t115983*(1.0/2.0);
            double t115985 = t115984+1.0;
            double t115986 = 1.0/c0p;
            double t115987 = 1.0/t115979;
            double t115988 = t115986*t115987*(1.0/2.0);
            double t115989 = t115988+1.0;
            double t115990 = a1p*c*t115963;
            double t115991 = t115990+1.0;
            double t115992 = 1.0/t115989;
            double t115993 = 1.0/(t115979*t115979);
            double t115994 = b4p*t115980*t115969*(2.0/3.0);
            double t115995 = b2p*c*t115974*(1.0/3.0);
            double t115996 = b1p*c*t115981*t115974*(1.0/6.0);
            double t115997 = b3p*c*t115965*t115974*(1.0/2.0);
            double t115998 = t115994+t115995+t115996+t115997;
            double t115999 = t115991*t115992*t115993*t115998;
            double t116000 = log(t115989);
            double t116001 = gamma_bb[index]*gamma_bb[index];
            double t116002 = gcaa*gcaa;
            double t116003 = t116001*t116001;
            double t116004 = t116002*t116002;
            double t116005 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t116006 = 1.0/pow(rho_b[index],8.0/3.0);
            double t116007 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t116008 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t116009 = pow(2.0,1.0/3.0);
            double t116010 = t116009*2.0;
            double t116011 = t116010-2.0;
            double t116012 = two_13*2.0;
            double t116013 = t116012-2.0;
            double t116014 = 1.0/t116013;
            double t116015 = log(t115985);
            double t116016 = a1f*c*t115963;
            double t116017 = t116016+1.0;
            double t116018 = gamma_bb[index]*gcaa*t116006*4.0;
            double t116019 = gamma_bb[index]*gcaa*t116001*t116002*t116007*4.0;
            double t116020 = t116001*t116002*t116008*6.0;
            double t116021 = t116003*t116004*t116005;
            double t116022 = t116020+t116021+t116018+t116019+1.0;
            double t116023 = 1.0/t116022;
            double t116024 = gamma_bb[index]*gcaa*t116006;
            double t116025 = t116024+1.0;
            double t116026 = 1.0/t116025;
            double t116027 = gamma_bb[index]*gcaa*t116006*3.0;
            double t116028 = gamma_bb[index]*gcaa*t116001*t116002*t116007;
            double t116029 = t116001*t116002*t116008*3.0;
            double t116030 = t116027+t116028+t116029+1.0;
            double t116031 = 1.0/t116030;
            double t116032 = gamma_bb[index]*gcaa*t116006*2.0;
            double t116033 = t116001*t116002*t116008;
            double t116034 = t116032+t116033+1.0;
            double t116035 = 1.0/t116034;
            double t116036 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t116037 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t116038 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t116039 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t116040 = 1.0/t115985;
            double t116041 = 1.0/(t115973*t115973);
            double t116042 = b4f*t115980*t115969*(2.0/3.0);
            double t116043 = b2f*c*t115974*(1.0/3.0);
            double t116044 = b1f*c*t115981*t115974*(1.0/6.0);
            double t116045 = b3f*c*t115965*t115974*(1.0/2.0);
            double t116046 = t116042+t116043+t116044+t116045;
            double t116047 = a1f*c*c0f*t116015*t115974*(2.0/3.0);
            double t116048 = a1p*c*c0p*t116000*t115974*(2.0/3.0);
            double t116049 = ccaa4*t116003*t116004*t116023*t116039*(3.2E1/3.0);
            double t116050 = ccaa1*gamma_bb[index]*gcaa*t116026*t116037*(8.0/3.0);
            double t116051 = ccaa3*gamma_bb[index]*gcaa*t116001*t116002*t116031*t116038*8.0;
            double t116052 = ccaa2*t116001*t116002*t116035*t116036*(1.6E1/3.0);
            double t116053 = 1.0/(t116025*t116025);
            double t116054 = gamma_bb[index]*gcaa*t116037*8.0;
            double t116055 = gamma_bb[index]*gcaa*t116001*t116002*t116038*8.0;
            double t116056 = t116001*t116002*t116036*1.6E1;
            double t116057 = t116054+t116055+t116056;
            double t116058 = 1.0/(t116030*t116030);
            double t116059 = gamma_bb[index]*gcaa*t116037*(3.2E1/3.0);
            double t116060 = gamma_bb[index]*gcaa*t116001*t116002*t116038*3.2E1;
            double t116061 = t116001*t116002*t116036*3.2E1;
            double t116062 = t116003*t116004*t116039*(3.2E1/3.0);
            double t116063 = t116060+t116061+t116062+t116059;
            double t116064 = 1.0/(t116022*t116022);
            double t116065 = gamma_bb[index]*gcaa*t116037*(1.6E1/3.0);
            double t116066 = t116001*t116002*t116036*(1.6E1/3.0);
            double t116067 = t116065+t116066;
            double t116068 = 1.0/(t116034*t116034);
            double t116069 = t116050+t116051+t116052+t116049-ccaa1*t116001*t116002*t116053*t116036*(8.0/3.0)- \
               ccaa4*t116003*t116004*t116005*t116063*t116064-ccaa2*t116001*t116002*t116008*t116067*t116068-ccaa3* \
               gamma_bb[index]*gcaa*t116001*t116002*t116007*t116057*t116058;
            double t116070 = c0f*t116015*t116017*2.0;
            double t116071 = c0p*t116000*t115991*2.0;
            double t116072 = 1.0/pow(rho_b[index],1.0E1);
            double t116073 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t116074 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t116075 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t116076 = ccaa4*t116003*t116004*t116005*t116023;
            double t116077 = ccaa1*gamma_bb[index]*gcaa*t116006*t116026;
            double t116078 = ccaa3*gamma_bb[index]*gcaa*t116001*t116002*t116031*t116007;
            double t116079 = ccaa2*t116001*t116002*t116008*t116035;
            double t116080 = ccaa0+t116076+t116077+t116078+t116079;
            double t116081 = 1.0/pow(rho_b[index],7.0/3.0);
            double t116082 = 1.0/pow(t115964,3.0/2.0);
            double t116083 = t116046*t116046;
            double t116084 = t115998*t115998;
            double t116085 = 1.0/(t115979*t115979*t115979);
            double t116086 = t116084*t116085*t115991*t115992*2.0;
            double t116087 = b4p*t116006*t115969*(1.0E1/9.0);
            double t116088 = b2p*c*t116081*(4.0/9.0);
            double t116089 = b3p*t116006*t115981*t115969*(1.0/1.2E1);
            double t116090 = b1p*c*t116081*t115981*(2.0/9.0);
            double t116091 = b3p*c*t116081*t115965*(2.0/3.0);
            double t116092 = t116090+t116091+t116087+t116088+t116089-b1p*t116006*t116082*t115969*(1.0/3.6E1);
            double t116093 = 1.0/(t115989*t115989);
            double t116094 = 1.0/(t115979*t115979*t115979*t115979);
            double t116095 = a1p*c*c0p*t116000*t116081*(8.0/9.0);
            double t116096 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t116097 = 1.0/(omega*omega);
            double t116098 = pow(t116096,2.0/3.0);
            double t116101 = t116097*t116098;
            double t116099 = exp(-t116101);
            double t116100 = 1.0/pow(t116096,1.0/3.0);
            double t116102 = 1.0/pow(t116096,2.0/3.0);
            double t116103 = omega*omega;
            double t116104 = t116099-1.0;
            double t116105 = 1.0/pow(t116096,4.0/3.0);
            double t116106 = 1.0/rho_b[index];
            double t116107 = 1.0/pow(t116096,5.0/3.0);
            double t116108 = 1.0/sqrt(3.141592653589793);
            double t116115 = t116102*t116103*t116104*(1.0/2.0);
            double t116109 = -t116115+t116099;
            double t116110 = t116106*t116099*(1.0/3.0);
            double t116111 = t116103*t116104*t116107*(2.778046668940015E15/1.40737488355328E14);
            double t116158 = t116100*t116097*t116099*(2.778046668940015E15/7.0368744177664E13);
            double t116112 = t116110+t116111-t116158;
            double t116113 = 1.0/omega;
            double t116114 = 1.0/pow(t116096,7.0/3.0);
            double t116116 = gx*gx;
            double t116117 = t116116*t116116;
            double t116118 = pow(rho_b[index],4.0/3.0);
            double t116119 = pow(t116096,1.0/3.0);
            double t116120 = t116113*t116119;
            double t116121 = erf(t116120);
            double t116122 = t116121*(3.991211251234741E15/2.251799813685248E15);
            double t116123 = omega*t116100*t116109;
            double t116124 = t116122+t116123;
            double t116125 = gamma_bb[index]*gx*t116006*4.0;
            double t116126 = gamma_bb[index]*gx*t116001*t116007*t116116*4.0;
            double t116127 = t116001*t116008*t116116*6.0;
            double t116128 = t116003*t116005*t116117;
            double t116129 = t116125+t116126+t116127+t116128+1.0;
            double t116130 = 1.0/t116129;
            double t116131 = gamma_bb[index]*gx*t116006;
            double t116132 = t116131+1.0;
            double t116133 = 1.0/t116132;
            double t116134 = gamma_bb[index]*gx*t116006*3.0;
            double t116135 = gamma_bb[index]*gx*t116001*t116007*t116116;
            double t116136 = t116001*t116008*t116116*3.0;
            double t116137 = t116134+t116135+t116136+1.0;
            double t116138 = 1.0/t116137;
            double t116139 = gamma_bb[index]*gx*t116006*2.0;
            double t116140 = t116001*t116008*t116116;
            double t116141 = t116140+t116139+1.0;
            double t116142 = 1.0/t116141;
            double t116150 = gamma_bb[index]*gx*t116037*(3.2E1/3.0);
            double t116151 = gamma_bb[index]*gx*t116001*t116116*t116038*3.2E1;
            double t116152 = t116001*t116116*t116036*3.2E1;
            double t116153 = t116003*t116117*t116039*(3.2E1/3.0);
            double t116143 = t116150+t116151+t116152+t116153;
            double t116155 = gamma_bb[index]*gx*t116037*(1.6E1/3.0);
            double t116156 = t116001*t116116*t116036*(1.6E1/3.0);
            double t116144 = t116155+t116156;
            double t116145 = 1.0/(t116137*t116137);
            double t116146 = gamma_bb[index]*gx*t116037*8.0;
            double t116147 = gamma_bb[index]*gx*t116001*t116116*t116038*8.0;
            double t116148 = t116001*t116116*t116036*1.6E1;
            double t116149 = t116146+t116147+t116148;
            double t116154 = 1.0/(t116129*t116129);
            double t116157 = 1.0/(t116141*t116141);
            double t116159 = omega*t116100*t116112;
            double t116160 = t116102*t116113*t116108*t116099*(1.108777112152858E31/1.584563250285287E29);
            double t116169 = omega*t116105*t116109*(2.778046668940015E15/1.40737488355328E14);
            double t116161 = t116160+t116159-t116169;
            double t116162 = cx4*t116003*t116130*t116005*t116117;
            double t116163 = cx1*gamma_bb[index]*gx*t116006*t116133;
            double t116164 = cx3*gamma_bb[index]*gx*t116001*t116007*t116116*t116138;
            double t116165 = cx2*t116001*t116142*t116008*t116116;
            double t116166 = cx0+t116162+t116163+t116164+t116165;
            double t116167 = omega*t116100*t116124*(4.0/3.0);
            double t116168 = t116167-1.0;
            double t116170 = omega*t116100*t116161*(4.0/3.0);
            double t116171 = t116170-omega*t116105*t116124*(2.778046668940015E15/1.05553116266496E14);
            double t116172 = 1.0/(t116132*t116132);
            double t116173 = pow(rho_b[index],1.0/3.0);
            double t116174 = cx4*t116003*t116130*t116117*t116039*(3.2E1/3.0);
            double t116175 = cx1*gamma_bb[index]*gx*t116133*t116037*(8.0/3.0);
            double t116176 = cx3*gamma_bb[index]*gx*t116001*t116116*t116038*t116138*8.0;
            double t116177 = cx2*t116001*t116142*t116116*t116036*(1.6E1/3.0);
            double t116178 = t116174+t116175+t116176+t116177-cx1*t116001*t116116*t116036*t116172*(8.0/3.0)-cx2* \
               t116001*t116008*t116116*t116144*t116157-cx4*t116003*t116005*t116143*t116117*t116154-cx3*gamma_bb[index]* \
               gx*t116001*t116007*t116116*t116145*t116149;
            v_rho_b_rho_b_[index] = t116069*(t116071+t116011*t116014*(t116070-c0p*t116000*t115991*2.0))*2.0+t116080* \
               (t116048-t115999+t116011*t116014*(t116047+t115999-t116040*t116041*t116017*t116046-a1p*c*c0p*t116000* \
               t115974*(2.0/3.0)))*2.0+rho_b[index]*t116080*(-t116086-t116095+t116011*t116014*(t116086+t116095-t116092* \
               t115991*t115992*t115993-t116040*t116017*t116083*1.0/(t115973*t115973*t115973)*2.0+t116040*t116041* \
               t116017*(b2f*c*t116081*(4.0/9.0)+b4f*t116006*t115969*(1.0E1/9.0)+b1f*c*t116081*t115981*(2.0/9.0)+b3f* \
               c*t116081*t115965*(2.0/3.0)-b1f*t116006*t116082*t115969*(1.0/3.6E1)+b3f*t116006*t115981*t115969*(1.0/ \
               1.2E1))+t116017*t116083*1.0/(t115973*t115973*t115973*t115973)*t115982*1.0/(t115985*t115985)*(1.0/2.0) \
               -a1f*c*c0f*t116015*t116081*(8.0/9.0)-t116084*t116093*t116094*t115991*t115986*(1.0/2.0)+a1f*c*t116040* \
               t116041*t116046*t115974*(2.0/3.0)-a1p*c*t115974*t115992*t115993*t115998*(2.0/3.0))+t116092*t115991* \
               t115992*t115993+t116084*t116093*t116094*t115991*t115986*(1.0/2.0)+a1p*c*t115974*t115992*t115993*t115998* \
               (2.0/3.0))-rho_b[index]*t116069*(t116048-t115999+t116011*t116014*(t116047-t116048+t115999-t116040* \
               t116041*t116017*t116046))*2.0-rho_b[index]*(t116071+t116011*t116014*(t116070-t116071))*(ccaa1*gamma_bb[index]* \
               gcaa*t116026*t116074*(8.8E1/9.0)-ccaa1*t116001*t116002*t116053*t116073*2.4E1+ccaa2*t116001*t116002* \
               t116035*t116073*(3.04E2/9.0)+ccaa4*t116003*t116004*t116023*t116075*(1.12E3/9.0)-ccaa2*t116001*t116002* \
               t116036*t116067*t116068*(3.2E1/3.0)-ccaa4*t116003*t116004*t116063*t116064*t116039*(6.4E1/3.0)-ccaa2* \
               t116001*t116002*t116008*t116068*(gamma_bb[index]*gcaa*t116074*(1.76E2/9.0)+t116001*t116002*t116073* \
               (3.04E2/9.0))-ccaa4*t116003*t116004*t116005*t116064*(gamma_bb[index]*gcaa*t116074*(3.52E2/9.0)+t116001* \
               t116002*t116073*(6.08E2/3.0)+t116003*t116004*t116075*(1.12E3/9.0)+gamma_bb[index]*gcaa*t116001*t116002* \
               t116072*2.88E2)+ccaa4*t116003*t116004*1.0/(t116022*t116022*t116022)*t116005*(t116063*t116063)*2.0+ \
               ccaa2*t116001*t116002*1.0/(t116034*t116034*t116034)*t116008*(t116067*t116067)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t116001*t116002*t116031*t116072*7.2E1+ccaa1*gamma_bb[index]*gcaa*t116001*t116002*1.0/(t116025* \
               t116025*t116025)*t116072*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t116001*t116002*1.0/(t116030*t116030* \
               t116030)*t116007*(t116057*t116057)*2.0-ccaa3*gamma_bb[index]*gcaa*t116001*t116002*t116007*t116058* \
               (gamma_bb[index]*gcaa*t116074*(8.8E1/3.0)+t116001*t116002*t116073*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t116001*t116002*t116072*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t116001*t116002*t116038*t116057*t116058* \
               1.6E1)-c0*t116118*t116168*(cx1*gamma_bb[index]*gx*t116133*t116074*(8.8E1/9.0)-cx1*t116001*t116116* \
               t116073*t116172*2.4E1+cx2*t116001*t116142*t116116*t116073*(3.04E2/9.0)+cx4*t116003*t116130*t116117* \
               t116075*(1.12E3/9.0)-cx2*t116001*t116116*t116036*t116144*t116157*(3.2E1/3.0)-cx4*t116003*t116143*t116117* \
               t116154*t116039*(6.4E1/3.0)-cx2*t116001*t116008*t116116*t116157*(gamma_bb[index]*gx*t116074*(1.76E2/ \
               9.0)+t116001*t116116*t116073*(3.04E2/9.0))-cx4*t116003*t116005*t116117*t116154*(gamma_bb[index]*gx* \
               t116074*(3.52E2/9.0)+t116001*t116116*t116073*(6.08E2/3.0)+t116003*t116117*t116075*(1.12E3/9.0)+gamma_bb[index]* \
               gx*t116001*t116116*t116072*2.88E2)+cx2*t116001*1.0/(t116141*t116141*t116141)*t116008*t116116*(t116144* \
               t116144)*2.0+cx4*t116003*t116005*(t116143*t116143)*t116117*1.0/(t116129*t116129*t116129)*2.0+cx3*gamma_bb[index]* \
               gx*t116001*t116116*t116072*t116138*7.2E1+cx1*gamma_bb[index]*gx*t116001*1.0/(t116132*t116132*t116132) \
               *t116116*t116072*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t116001*t116007*t116116*1.0/(t116137*t116137* \
               t116137)*(t116149*t116149)*2.0-cx3*gamma_bb[index]*gx*t116001*t116007*t116116*t116145*(gamma_bb[index]* \
               gx*t116074*(8.8E1/3.0)+t116001*t116116*t116073*(3.04E2/3.0)+gamma_bb[index]*gx*t116001*t116116*t116072* \
               7.2E1)-cx3*gamma_bb[index]*gx*t116001*t116116*t116145*t116038*t116149*1.6E1)-c0*t116171*t116173*t116166* \
               (8.0/3.0)+c0*t116171*t116118*t116178*2.0+c0*t116173*t116168*t116178*(8.0/3.0)-c0*t116166*t115970*t116168* \
               (4.0/9.0)+c0*t116118*t116166*(omega*t116114*t116124*(-7.717543294808713E30/3.713820117856141E27)+omega* \
               t116105*t116161*(2.778046668940015E15/5.2776558133248E13)+omega*t116100*(omega*t116112*t116105*(2.778046668940015E15/ \
               7.0368744177664E13)-omega*t116114*t116109*(7.717543294808713E30/4.951760157141521E27)+omega*t116100* \
               (1.0/(rho_b[index]*rho_b[index])*t116099*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t116102*t116099*(7.717543294808713E30/ \
               4.951760157141521E27)+t116103*t116104*1.0/pow(t116096,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t116105*t116097*t116099*(7.717543294808713E30/9.903520314283042E27)+t116100*t116106*t116097*t116099* \
               (2.778046668940015E15/2.11106232532992E14))+t116113*t116107*t116108*t116099*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t116106*t116108*t116099*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t114096 = 1.0/pow(rho_a[index],1.0/3.0);
                double t114097 = c*t114096;
                double t114098 = sqrt(t114097);
                double t114099 = pow(t114097,3.0/2.0);
                double t114100 = c*c;
                double t114101 = 1.0/pow(rho_a[index],2.0/3.0);
                double t114102 = 1.0/c0p;
                double t114103 = b1p*t114098;
                double t114104 = b3p*t114099;
                double t114105 = b4p*t114100*t114101;
                double t114106 = b2p*c*t114096;
                double t114107 = t114103+t114104+t114105+t114106;
                double t114108 = 1.0/t114107;
                double t114109 = t114102*t114108*(1.0/2.0);
                double t114110 = t114109+1.0;
                double t114111 = log(t114110);
                double t114112 = a1p*c*t114096;
                double t114113 = t114112+1.0;
                double t114114 = 1.0/pow(rho_a[index],8.0/3.0);
                double t114115 = gamma_aa[index]*gamma_aa[index];
                double t114116 = gcaa*gcaa;
                double t114117 = t114116*t114116;
                double t114118 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t114119 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t114120 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t114121 = gamma_aa[index]*gcaa*t114114;
                double t114122 = t114121+1.0;
                double t114123 = gamma_aa[index]*gcaa*t114114*3.0;
                double t114124 = gamma_aa[index]*gcaa*t114120*t114115*t114116;
                double t114125 = t114115*t114116*t114119*3.0;
                double t114126 = t114123+t114124+t114125+1.0;
                double t114127 = t114115*t114115;
                double t114128 = gamma_aa[index]*gcaa*t114114*4.0;
                double t114129 = gamma_aa[index]*gcaa*t114120*t114115*t114116*4.0;
                double t114130 = t114115*t114116*t114119*6.0;
                double t114131 = t114117*t114118*t114127;
                double t114132 = t114130+t114131+t114128+t114129+1.0;
                double t114133 = gamma_aa[index]*gcaa*t114114*2.0;
                double t114134 = t114115*t114116*t114119;
                double t114135 = t114133+t114134+1.0;
                double t114136 = rho_a[index]+rho_b[index];
                double t114137 = 1.0/pow(t114136,1.0/3.0);
                double t114138 = c*t114137;
                double t114139 = sqrt(t114138);
                double t114140 = b1p*t114139;
                double t114141 = pow(t114138,3.0/2.0);
                double t114142 = b3p*t114141;
                double t114143 = 1.0/pow(t114136,2.0/3.0);
                double t114144 = b4p*t114100*t114143;
                double t114145 = b2p*c*t114137;
                double t114146 = t114140+t114142+t114144+t114145;
                double t114147 = 1.0/pow(t114136,4.0/3.0);
                double t114148 = two_13*2.0;
                double t114149 = t114148-2.0;
                double t114150 = 1.0/t114149;
                double t114151 = 1.0/c0f;
                double t114152 = 1.0/t114146;
                double t114153 = t114102*t114152*(1.0/2.0);
                double t114154 = t114153+1.0;
                double t114155 = a1p*c*t114137;
                double t114156 = t114155+1.0;
                double t114157 = rho_a[index]-rho_b[index];
                double t114158 = t114157*t114157;
                double t114159 = 1.0/t114136;
                double t114160 = t114157*t114159;
                double t114161 = b1f*t114139;
                double t114162 = b3f*t114141;
                double t114163 = b4f*t114100*t114143;
                double t114164 = b2f*c*t114137;
                double t114165 = t114161+t114162+t114163+t114164;
                double t114166 = 1.0/t114165;
                double t114167 = t114151*t114166*(1.0/2.0);
                double t114168 = t114167+1.0;
                double t114169 = log(t114168);
                double t114170 = a1f*c*t114137;
                double t114171 = t114170+1.0;
                double t114172 = log(t114154);
                double t114182 = c0f*t114171*t114169*2.0;
                double t114183 = c0p*t114172*t114156*2.0;
                double t114173 = t114182-t114183;
                double t114174 = t114160+1.0;
                double t114175 = pow(t114174,4.0/3.0);
                double t114176 = -t114160+1.0;
                double t114177 = pow(t114176,4.0/3.0);
                double t114178 = t114175+t114177-2.0;
                double t114179 = 1.0/(t114136*t114136);
                double t114210 = t114157*t114179;
                double t114180 = -t114210+t114159;
                double t114181 = 1.0/(t114136*t114136*t114136*t114136);
                double t114184 = t114158*t114158;
                double t114185 = 1.0/pow(t114136,5.0/3.0);
                double t114186 = 1.0/sqrt(t114138);
                double t114187 = 1.0/t114154;
                double t114188 = 1.0/(t114146*t114146);
                double t114189 = b4p*t114100*t114185*(2.0/3.0);
                double t114190 = b2p*c*t114147*(1.0/3.0);
                double t114191 = b1p*c*t114147*t114186*(1.0/6.0);
                double t114192 = b3p*c*t114147*t114139*(1.0/2.0);
                double t114193 = t114190+t114191+t114192+t114189;
                double t114194 = t114156*t114193*t114187*t114188;
                double t114195 = 1.0/(t114136*t114136*t114136*t114136*t114136);
                double t114196 = 1.0/d2fz0;
                double t114197 = 1.0/Aa;
                double t114198 = b1a*t114139;
                double t114199 = b3a*t114141;
                double t114200 = b4a*t114100*t114143;
                double t114201 = b2a*c*t114137;
                double t114202 = t114200+t114201+t114198+t114199;
                double t114203 = 1.0/t114202;
                double t114204 = t114203*t114197*(1.0/2.0);
                double t114205 = t114204+1.0;
                double t114206 = log(t114205);
                double t114207 = a1a*c*t114137;
                double t114208 = t114207+1.0;
                double t114209 = pow(t114174,1.0/3.0);
                double t114211 = t114180*t114209*(4.0/3.0);
                double t114212 = pow(t114176,1.0/3.0);
                double t114213 = t114211-t114212*t114180*(4.0/3.0);
                double t114214 = t114181*t114184;
                double t114215 = t114214-1.0;
                double t114216 = pow(2.0,1.0/3.0);
                double t114217 = t114216*2.0;
                double t114218 = t114217-2.0;
                double t114219 = a1f*c*t114096;
                double t114220 = t114219+1.0;
                double t114221 = b1f*t114098;
                double t114222 = b3f*t114099;
                double t114223 = b4f*t114100*t114101;
                double t114224 = b2f*c*t114096;
                double t114225 = t114221+t114222+t114223+t114224;
                double t114226 = 1.0/t114225;
                double t114227 = t114151*t114226*(1.0/2.0);
                double t114228 = t114227+1.0;
                double t114229 = 1.0/pow(rho_a[index],4.0/3.0);
                double t114230 = 1.0/pow(rho_a[index],5.0/3.0);
                double t114231 = 1.0/sqrt(t114097);
                double t114232 = log(t114228);
                double t114233 = 1.0/t114110;
                double t114234 = 1.0/(t114107*t114107);
                double t114235 = b4p*t114100*t114230*(2.0/3.0);
                double t114236 = b2p*c*t114229*(1.0/3.0);
                double t114237 = b1p*c*t114231*t114229*(1.0/6.0);
                double t114238 = b3p*c*t114229*t114098*(1.0/2.0);
                double t114239 = t114235+t114236+t114237+t114238;
                double t114240 = t114113*t114233*t114234*t114239;
                double t114241 = c0f*t114220*t114232*2.0;
                double t114242 = c0p*t114111*t114113*2.0;
                double t114243 = gamma_aa[index]*t114114*(1.0/2.0);
                double t114244 = 1.0/pow(rho_b[index],8.0/3.0);
                double t114245 = gamma_bb[index]*t114244*(1.0/2.0);
                double t114246 = t114243+t114245;
                double t114247 = gcab*t114246;
                double t114248 = t114247+1.0;
                double t114249 = gcab*gcab;
                double t114250 = t114246*t114246;
                double t114251 = t114249*t114249;
                double t114252 = t114250*t114250;
                double t114253 = t114250*t114249;
                double t114254 = gcab*t114246*2.0;
                double t114255 = t114253+t114254+1.0;
                double t114256 = t114250*t114249*3.0;
                double t114257 = gcab*t114250*t114246*t114249;
                double t114258 = gcab*t114246*3.0;
                double t114259 = t114256+t114257+t114258+1.0;
                double t114260 = t114250*t114249*6.0;
                double t114261 = gcab*t114250*t114246*t114249*4.0;
                double t114262 = t114251*t114252;
                double t114263 = gcab*t114246*4.0;
                double t114264 = t114260+t114261+t114262+t114263+1.0;
                double t114265 = t114241-t114242;
                double t114266 = 1.0/pow(rho_b[index],1.0/3.0);
                double t114267 = c*t114266;
                double t114268 = sqrt(t114267);
                double t114269 = pow(t114267,3.0/2.0);
                double t114270 = 1.0/pow(rho_b[index],2.0/3.0);
                double t114271 = b1p*t114268;
                double t114272 = b3p*t114269;
                double t114273 = b4p*t114100*t114270;
                double t114274 = b2p*c*t114266;
                double t114275 = t114271+t114272+t114273+t114274;
                double t114276 = 1.0/t114275;
                double t114277 = t114102*t114276*(1.0/2.0);
                double t114278 = t114277+1.0;
                double t114279 = log(t114278);
                double t114280 = a1p*c*t114266;
                double t114281 = t114280+1.0;
                double t114282 = c0p*t114281*t114279*2.0;
                double t114283 = t114150*t114181*t114173*t114184*t114178;
                double t114284 = Aa*t114150*t114206*t114215*t114208*t114178*t114196*2.0;
                double t114285 = 1.0/t114248;
                double t114286 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t114287 = 1.0/(t114248*t114248);
                double t114288 = 1.0/t114255;
                double t114289 = 1.0/(t114259*t114259);
                double t114290 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t114291 = 1.0/(t114255*t114255);
                double t114292 = 1.0/t114259;
                double t114293 = 1.0/t114264;
                double t114294 = 1.0/(t114264*t114264);
                double t114295 = gcab*t114114*2.0;
                double t114296 = t114114*t114246*t114249*6.0;
                double t114297 = gcab*t114114*t114250*t114249*6.0;
                double t114298 = t114114*t114250*t114251*t114246*2.0;
                double t114299 = t114295+t114296+t114297+t114298;
                double t114300 = gamma_aa[index]*gcab*t114286*(8.0/3.0);
                double t114301 = gamma_aa[index]*t114246*t114249*t114286*(8.0/3.0);
                double t114302 = t114300+t114301;
                double t114303 = gcab*t114114;
                double t114304 = t114114*t114246*t114249;
                double t114305 = t114303+t114304;
                double t114306 = gamma_aa[index]*gcab*t114286*(1.6E1/3.0);
                double t114307 = gamma_aa[index]*gcab*t114250*t114249*t114286*1.6E1;
                double t114308 = gamma_aa[index]*t114250*t114251*t114246*t114286*(1.6E1/3.0);
                double t114309 = gamma_aa[index]*t114246*t114249*t114286*1.6E1;
                double t114310 = t114306+t114307+t114308+t114309;
                double t114311 = gcab*t114114*(3.0/2.0);
                double t114312 = t114114*t114246*t114249*3.0;
                double t114313 = gcab*t114114*t114250*t114249*(3.0/2.0);
                double t114314 = t114311+t114312+t114313;
                double t114315 = gamma_aa[index]*gcab*t114286*4.0;
                double t114316 = gamma_aa[index]*gcab*t114250*t114249*t114286*4.0;
                double t114317 = gamma_aa[index]*t114246*t114249*t114286*8.0;
                double t114318 = t114315+t114316+t114317;
                double t114319 = t114150*t114218*t114265;
                double t114320 = t114242+t114319;
                double t114321 = 1.0/t114122;
                double t114322 = 1.0/t114132;
                double t114323 = 1.0/t114135;
                double t114324 = 1.0/t114126;
                double t114325 = 1.0/(t114122*t114122);
                double t114326 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t114327 = 1.0/(t114126*t114126);
                double t114328 = 1.0/(t114135*t114135);
                double t114329 = gcaa*t114114*3.0;
                double t114330 = gamma_aa[index]*t114116*t114119*6.0;
                double t114331 = gcaa*t114120*t114115*t114116*3.0;
                double t114332 = t114330+t114331+t114329;
                double t114333 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t114334 = 1.0/(t114132*t114132);
                double t114335 = gcaa*t114114*4.0;
                double t114336 = gamma_aa[index]*t114116*t114119*1.2E1;
                double t114337 = gcaa*t114120*t114115*t114116*1.2E1;
                double t114338 = gamma_aa[index]*t114115*t114117*t114118*4.0;
                double t114339 = t114335+t114336+t114337+t114338;
                double t114340 = gcaa*t114114*2.0;
                double t114341 = gamma_aa[index]*t114116*t114119*2.0;
                double t114342 = t114340+t114341;
                double t114343 = gamma_aa[index]*gcaa*t114286*(1.6E1/3.0);
                double t114344 = t114115*t114116*t114290*(1.6E1/3.0);
                double t114345 = t114343+t114344;
                double t114346 = gamma_aa[index]*gcaa*t114286*8.0;
                double t114347 = gamma_aa[index]*gcaa*t114115*t114116*t114326*8.0;
                double t114348 = t114115*t114116*t114290*1.6E1;
                double t114349 = t114346+t114347+t114348;
                double t114350 = gamma_aa[index]*gcaa*t114286*(3.2E1/3.0);
                double t114351 = gamma_aa[index]*gcaa*t114115*t114116*t114326*3.2E1;
                double t114352 = t114115*t114116*t114290*3.2E1;
                double t114353 = t114117*t114333*t114127*(3.2E1/3.0);
                double t114354 = t114350+t114351+t114352+t114353;
                double t114355 = 1.0/t114228;
                double t114356 = 1.0/(t114225*t114225);
                double t114357 = b4f*t114100*t114230*(2.0/3.0);
                double t114358 = b2f*c*t114229*(1.0/3.0);
                double t114359 = b1f*c*t114231*t114229*(1.0/6.0);
                double t114360 = b3f*c*t114229*t114098*(1.0/2.0);
                double t114361 = t114360+t114357+t114358+t114359;
                double t114362 = a1f*c*c0f*t114232*t114229*(2.0/3.0);
                double t114363 = a1p*c*c0p*t114111*t114229*(2.0/3.0);
                double t114364 = ccaa1*gcaa*t114114*t114321;
                double t114365 = ccaa4*gamma_aa[index]*t114115*t114322*t114117*t114118*4.0;
                double t114366 = ccaa2*gamma_aa[index]*t114116*t114323*t114119*2.0;
                double t114367 = ccaa3*gcaa*t114120*t114115*t114116*t114324*3.0;
                double t114368 = t114364+t114365+t114366+t114367-ccaa1*gamma_aa[index]*t114116*t114325*t114119-ccaa2* \
                   t114115*t114116*t114342*t114119*t114328-ccaa4*t114117*t114118*t114127*t114334*t114339-ccaa3*gamma_aa[index]* \
                   gcaa*t114120*t114115*t114116*t114332*t114327;
                double t114369 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t114370 = 1.0/(omega*omega);
                double t114371 = pow(t114369,2.0/3.0);
                double t114374 = t114370*t114371;
                double t114372 = exp(-t114374);
                double t114373 = 1.0/pow(t114369,1.0/3.0);
                double t114375 = omega*omega;
                double t114376 = t114372-1.0;
                double t114377 = 1.0/pow(t114369,2.0/3.0);
                double t114378 = 1.0/pow(t114369,4.0/3.0);
                double t114379 = 1.0/omega;
                double t114401 = t114375*t114376*t114377*(1.0/2.0);
                double t114380 = -t114401+t114372;
                double t114381 = gx*gx;
                double t114382 = t114381*t114381;
                double t114383 = gamma_aa[index]*gx*t114114;
                double t114384 = t114383+1.0;
                double t114385 = gamma_aa[index]*gx*t114114*3.0;
                double t114386 = gamma_aa[index]*gx*t114120*t114115*t114381;
                double t114387 = t114115*t114119*t114381*3.0;
                double t114388 = t114385+t114386+t114387+1.0;
                double t114389 = gamma_aa[index]*gx*t114114*4.0;
                double t114390 = gamma_aa[index]*gx*t114120*t114115*t114381*4.0;
                double t114391 = t114115*t114119*t114381*6.0;
                double t114392 = t114118*t114127*t114382;
                double t114393 = t114390+t114391+t114392+t114389+1.0;
                double t114394 = gamma_aa[index]*gx*t114114*2.0;
                double t114395 = t114115*t114119*t114381;
                double t114396 = t114394+t114395+1.0;
                double t114397 = pow(t114369,1.0/3.0);
                double t114398 = t114379*t114397;
                double t114399 = erf(t114398);
                double t114400 = t114399*(3.991211251234741E15/2.251799813685248E15);
                double t114402 = omega*t114380*t114373;
                double t114403 = t114400+t114402;
                double t114404 = 1.0/t114384;
                double t114405 = cx1*gx*t114114*t114404;
                double t114406 = 1.0/t114393;
                double t114407 = cx4*gamma_aa[index]*t114115*t114118*t114406*t114382*4.0;
                double t114408 = 1.0/t114396;
                double t114409 = cx2*gamma_aa[index]*t114119*t114381*t114408*2.0;
                double t114410 = 1.0/t114388;
                double t114411 = cx3*gx*t114120*t114410*t114115*t114381*3.0;
                double t114412 = 1.0/(t114384*t114384);
                double t114413 = gx*t114114*3.0;
                double t114414 = gamma_aa[index]*t114119*t114381*6.0;
                double t114415 = gx*t114120*t114115*t114381*3.0;
                double t114416 = t114413+t114414+t114415;
                double t114417 = 1.0/(t114388*t114388);
                double t114418 = gx*t114114*4.0;
                double t114419 = gamma_aa[index]*t114119*t114381*1.2E1;
                double t114420 = gx*t114120*t114115*t114381*1.2E1;
                double t114421 = gamma_aa[index]*t114115*t114118*t114382*4.0;
                double t114422 = t114420+t114421+t114418+t114419;
                double t114423 = 1.0/(t114393*t114393);
                double t114424 = gx*t114114*2.0;
                double t114425 = gamma_aa[index]*t114119*t114381*2.0;
                double t114426 = t114424+t114425;
                double t114427 = 1.0/(t114396*t114396);
                double t114428 = t114411+t114405+t114407+t114409-cx1*gamma_aa[index]*t114412*t114119*t114381-cx2* \
                   t114115*t114119*t114381*t114426*t114427-cx4*t114422*t114423*t114118*t114127*t114382-cx3*gamma_aa[index]* \
                   gx*t114120*t114115*t114416*t114381*t114417;
                double t114429 = pow(rho_a[index],4.0/3.0);
                double t114430 = omega*t114403*t114373*(4.0/3.0);
                double t114431 = t114430-1.0;
                double t114432 = gamma_aa[index]*gx*t114286*(1.6E1/3.0);
                double t114433 = t114115*t114290*t114381*(1.6E1/3.0);
                double t114434 = t114432+t114433;
                double t114435 = gamma_aa[index]*gx*t114286*8.0;
                double t114436 = gamma_aa[index]*gx*t114115*t114326*t114381*8.0;
                double t114437 = t114115*t114290*t114381*1.6E1;
                double t114438 = t114435+t114436+t114437;
                double t114439 = gamma_aa[index]*gx*t114286*(3.2E1/3.0);
                double t114440 = gamma_aa[index]*gx*t114115*t114326*t114381*3.2E1;
                double t114441 = t114115*t114290*t114381*3.2E1;
                double t114442 = t114333*t114127*t114382*(3.2E1/3.0);
                double t114443 = t114440+t114441+t114442+t114439;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t114320+rho_b[index]*(t114282-t114150*t114218*(t114282- \
                   c0f*log((t114151*(1.0/2.0))/(b1f*t114268+b3f*t114269+b2f*c*t114266+b4f*t114100*t114270)+1.0)*(a1f* \
                   c*t114266+1.0)*2.0))-t114136*(t114183+t114283+t114284))*(ccab1*gcab*t114285*t114286*(4.0/3.0)-ccab2* \
                   t114250*t114291*t114249*(gcab*t114286*(8.0/3.0)+gamma_aa[index]*t114290*t114249*(4.0/3.0)+t114246* \
                   t114249*t114286*(8.0/3.0))-ccab4*t114251*t114252*t114294*(gcab*t114286*(1.6E1/3.0)+gamma_aa[index]* \
                   t114290*t114249*8.0+t114246*t114249*t114286*1.6E1+gamma_aa[index]*t114250*t114251*t114290*8.0+gcab* \
                   t114250*t114249*t114286*1.6E1+t114250*t114251*t114246*t114286*(1.6E1/3.0)+gamma_aa[index]*gcab*t114290* \
                   t114246*t114249*1.6E1)-ccab1*gamma_aa[index]*t114290*t114249*t114287*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t114290*t114249*t114288*(4.0/3.0)-ccab1*t114246*t114249*t114286*t114287*(4.0/3.0)+ccab2*t114246*t114249* \
                   t114286*t114288*(8.0/3.0)-ccab2*t114302*t114114*t114246*t114291*t114249+ccab4*t114250*t114251*t114246* \
                   t114293*t114286*(1.6E1/3.0)+ccab2*t114302*t114250*t114305*1.0/(t114255*t114255*t114255)*t114249*2.0+ \
                   ccab4*t114310*t114251*t114252*1.0/(t114264*t114264*t114264)*t114299*2.0+ccab4*gamma_aa[index]*t114250* \
                   t114251*t114290*t114293*8.0+ccab3*gcab*t114250*t114292*t114249*t114286*4.0+ccab3*gamma_aa[index]*gcab* \
                   t114290*t114246*t114292*t114249*4.0-ccab2*gamma_aa[index]*t114305*t114246*t114291*t114249*t114286* \
                   (8.0/3.0)-ccab3*gcab*t114114*t114250*t114318*t114249*t114289*(3.0/2.0)-ccab4*t114310*t114114*t114250* \
                   t114251*t114246*t114294*2.0-ccab3*gcab*t114250*t114246*t114249*t114289*(gcab*t114286*4.0+gamma_aa[index]* \
                   t114290*t114249*4.0+t114246*t114249*t114286*8.0+gcab*t114250*t114249*t114286*4.0+gamma_aa[index]*gcab* \
                   t114290*t114246*t114249*4.0)+ccab1*gamma_aa[index]*gcab*t114290*t114246*1.0/(t114248*t114248*t114248) \
                   *t114249*(4.0/3.0)+ccab3*gcab*t114250*t114314*t114246*t114318*t114249*1.0/(t114259*t114259*t114259) \
                   *2.0-ccab3*gamma_aa[index]*gcab*t114250*t114314*t114249*t114286*t114289*4.0-ccab4*gamma_aa[index]* \
                   t114250*t114251*t114246*t114294*t114286*t114299*(1.6E1/3.0))-t114368*(t114242+t114150*t114218*(t114241- \
                   c0p*t114111*t114113*2.0))-(-t114242+t114183+t114283+t114284+t114136*(t114194-t114150*t114181*t114184* \
                   t114178*(t114194-(t114171*1.0/(t114165*t114165)*(b2f*c*t114147*(1.0/3.0)+b4f*t114100*t114185*(2.0/ \
                   3.0)+b1f*c*t114147*t114186*(1.0/6.0)+b3f*c*t114147*t114139*(1.0/2.0)))/t114168+a1f*c*c0f*t114147*t114169* \
                   (2.0/3.0)-a1p*c*c0p*t114172*t114147*(2.0/3.0))-a1p*c*c0p*t114172*t114147*(2.0/3.0)+t114150*t114213* \
                   t114181*t114173*t114184-t114150*t114173*t114184*t114195*t114178*4.0+t114150*t114181*t114173*t114157* \
                   t114158*t114178*4.0-Aa*t114150*t114206*t114208*t114178*t114196*(t114184*t114195*4.0-t114181*t114157* \
                   t114158*4.0)*2.0+Aa*t114150*t114213*t114206*t114215*t114208*t114196*2.0+(1.0/(t114202*t114202)*t114150* \
                   t114215*t114208*t114178*t114196*(b2a*c*t114147*(1.0/3.0)+b4a*t114100*t114185*(2.0/3.0)+b1a*c*t114147* \
                   t114186*(1.0/6.0)+b3a*c*t114147*t114139*(1.0/2.0)))/t114205-Aa*a1a*c*t114150*t114206*t114215*t114147* \
                   t114178*t114196*(2.0/3.0))+rho_a[index]*(-t114240+t114363+t114150*t114218*(t114240+t114362-t114220* \
                   t114361*t114355*t114356-a1p*c*c0p*t114111*t114229*(2.0/3.0)))-t114150*t114218*t114265)*(ccab1*gcab* \
                   t114114*t114285*(1.0/2.0)-ccab2*t114250*t114305*t114291*t114249-ccab1*t114114*t114246*t114249*t114287* \
                   (1.0/2.0)+ccab2*t114114*t114246*t114249*t114288-ccab4*t114251*t114252*t114294*t114299+ccab4*t114114* \
                   t114250*t114251*t114246*t114293*2.0+ccab3*gcab*t114114*t114250*t114292*t114249*(3.0/2.0)-ccab3*gcab* \
                   t114250*t114314*t114246*t114249*t114289)-rho_a[index]*t114320*(ccaa1*gcaa*t114321*t114286*(-8.0/3.0) \
                   -ccaa2*gamma_aa[index]*t114116*t114323*t114290*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t114116*t114325*t114290* \
                   8.0+ccaa2*t114115*t114116*t114342*t114290*t114328*(1.6E1/3.0)+ccaa4*t114117*t114333*t114127*t114334* \
                   t114339*(3.2E1/3.0)+ccaa4*t114117*t114118*t114127*t114334*(gcaa*t114286*(3.2E1/3.0)+gamma_aa[index]* \
                   t114116*t114290*6.4E1+gamma_aa[index]*t114115*t114117*t114333*(1.28E2/3.0)+gcaa*t114115*t114116*t114326* \
                   9.6E1)-ccaa1*gcaa*1.0/(t114122*t114122*t114122)*t114115*t114116*t114326*(1.6E1/3.0)+ccaa2*t114115* \
                   t114116*t114119*t114328*(gcaa*t114286*(1.6E1/3.0)+gamma_aa[index]*t114116*t114290*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t114115*t114322*t114117*t114333*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t114116*t114119* \
                   t114345*t114328*2.0-ccaa3*gcaa*t114115*t114116*t114324*t114326*2.4E1+ccaa4*gamma_aa[index]*t114115* \
                   t114117*t114118*t114334*t114354*4.0+ccaa3*gcaa*t114120*t114115*t114116*t114327*t114349*3.0-ccaa2*t114115* \
                   t114116*1.0/(t114135*t114135*t114135)*t114342*t114119*t114345*2.0-ccaa4*1.0/(t114132*t114132*t114132) \
                   *t114117*t114118*t114127*t114354*t114339*2.0+ccaa3*gamma_aa[index]*gcaa*t114120*t114115*t114116*t114327* \
                   (gcaa*t114286*8.0+gamma_aa[index]*t114116*t114290*3.2E1+gcaa*t114115*t114116*t114326*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t114115*t114116*t114332*t114326*t114327*8.0-ccaa3*gamma_aa[index]*gcaa*t114120* \
                   t114115*t114116*t114332*1.0/(t114126*t114126*t114126)*t114349*2.0)+rho_a[index]*t114368*(-t114240+ \
                   t114363+t114150*t114218*(t114240+t114362-t114363-t114220*t114361*t114355*t114356))-c0*t114428*t114429* \
                   (omega*t114373*(omega*t114380*t114378*(-2.778046668940015E15/1.40737488355328E14)+omega*t114373*((t114372* \
                   (1.0/3.0))/rho_a[index]+t114375*t114376*1.0/pow(t114369,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t114370*t114372*t114373*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t114372* \
                   t114377*t114379*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t114403*t114378*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t114431*t114429*(cx1*gx*t114404*t114286*(-8.0/3.0)+cx1*gamma_aa[index]*t114412* \
                   t114290*t114381*8.0-cx2*gamma_aa[index]*t114290*t114381*t114408*(3.2E1/3.0)+cx2*t114115*t114290*t114381* \
                   t114426*t114427*(1.6E1/3.0)+cx4*t114422*t114333*t114423*t114127*t114382*(3.2E1/3.0)+cx4*t114423*t114118* \
                   t114127*t114382*(gx*t114286*(3.2E1/3.0)+gamma_aa[index]*t114290*t114381*6.4E1+gamma_aa[index]*t114115* \
                   t114333*t114382*(1.28E2/3.0)+gx*t114115*t114326*t114381*9.6E1)-cx1*gx*t114115*t114326*t114381*1.0/ \
                   (t114384*t114384*t114384)*(1.6E1/3.0)+cx2*t114115*t114119*t114381*t114427*(gx*t114286*(1.6E1/3.0)+ \
                   gamma_aa[index]*t114290*t114381*(3.2E1/3.0))+cx2*gamma_aa[index]*t114119*t114434*t114381*t114427*2.0- \
                   cx4*gamma_aa[index]*t114115*t114333*t114406*t114382*(1.28E2/3.0)-cx3*gx*t114410*t114115*t114326*t114381* \
                   2.4E1+cx4*gamma_aa[index]*t114115*t114423*t114118*t114443*t114382*4.0+cx3*gx*t114120*t114115*t114381* \
                   t114417*t114438*3.0-cx2*t114115*t114119*t114434*t114381*t114426*1.0/(t114396*t114396*t114396)*2.0- \
                   cx4*t114422*t114118*t114127*t114443*t114382*1.0/(t114393*t114393*t114393)*2.0+cx3*gamma_aa[index]* \
                   gx*t114120*t114115*t114381*t114417*(gx*t114286*8.0+gamma_aa[index]*t114290*t114381*3.2E1+gx*t114115* \
                   t114326*t114381*2.4E1)+cx3*gamma_aa[index]*gx*t114115*t114326*t114416*t114381*t114417*8.0-cx3*gamma_aa[index]* \
                   gx*t114120*t114115*t114416*t114381*t114438*1.0/(t114388*t114388*t114388)*2.0)-c0*pow(rho_a[index],1.0/ \
                   3.0)*t114431*t114428*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t116935 = 1.0/pow(rho_a[index],1.0/3.0);
                double t116936 = c*t116935;
                double t116937 = sqrt(t116936);
                double t116938 = pow(t116936,3.0/2.0);
                double t116939 = c*c;
                double t116940 = 1.0/pow(rho_a[index],2.0/3.0);
                double t116941 = 1.0/c0p;
                double t116942 = b1p*t116937;
                double t116943 = b3p*t116938;
                double t116944 = b4p*t116940*t116939;
                double t116945 = b2p*c*t116935;
                double t116946 = t116942+t116943+t116944+t116945;
                double t116947 = 1.0/t116946;
                double t116948 = t116941*t116947*(1.0/2.0);
                double t116949 = t116948+1.0;
                double t116950 = log(t116949);
                double t116951 = a1p*c*t116935;
                double t116952 = t116951+1.0;
                double t116953 = 1.0/pow(rho_a[index],8.0/3.0);
                double t116954 = gamma_aa[index]*gamma_aa[index];
                double t116955 = gcaa*gcaa;
                double t116956 = t116955*t116955;
                double t116957 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t116958 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t116959 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t116960 = gamma_aa[index]*gcaa*t116953;
                double t116961 = t116960+1.0;
                double t116962 = gamma_aa[index]*gcaa*t116953*3.0;
                double t116963 = gamma_aa[index]*gcaa*t116954*t116955*t116959;
                double t116964 = t116954*t116955*t116958*3.0;
                double t116965 = t116962+t116963+t116964+1.0;
                double t116966 = t116954*t116954;
                double t116967 = gamma_aa[index]*gcaa*t116953*4.0;
                double t116968 = gamma_aa[index]*gcaa*t116954*t116955*t116959*4.0;
                double t116969 = t116954*t116955*t116958*6.0;
                double t116970 = t116956*t116957*t116966;
                double t116971 = t116970+t116967+t116968+t116969+1.0;
                double t116972 = gamma_aa[index]*gcaa*t116953*2.0;
                double t116973 = t116954*t116955*t116958;
                double t116974 = t116972+t116973+1.0;
                double t116975 = pow(2.0,1.0/3.0);
                double t116976 = t116975*2.0;
                double t116977 = t116976-2.0;
                double t116978 = two_13*2.0;
                double t116979 = t116978-2.0;
                double t116980 = 1.0/t116979;
                double t116981 = 1.0/c0f;
                double t116982 = b1f*t116937;
                double t116983 = b3f*t116938;
                double t116984 = b4f*t116940*t116939;
                double t116985 = b2f*c*t116935;
                double t116986 = t116982+t116983+t116984+t116985;
                double t116987 = 1.0/t116986;
                double t116988 = t116981*t116987*(1.0/2.0);
                double t116989 = t116988+1.0;
                double t116990 = log(t116989);
                double t116991 = a1f*c*t116935;
                double t116992 = t116991+1.0;
                double t116993 = c0f*t116990*t116992*2.0;
                double t116994 = c0p*t116950*t116952*2.0;
                double t116995 = 1.0/t116961;
                double t116996 = 1.0/t116971;
                double t116997 = 1.0/t116974;
                double t116998 = 1.0/t116965;
                double t116999 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t117000 = 1.0/(t116961*t116961);
                double t117001 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t117002 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t117003 = 1.0/(t116965*t116965);
                double t117004 = 1.0/(t116974*t116974);
                double t117005 = gcaa*t116953*3.0;
                double t117006 = gamma_aa[index]*t116955*t116958*6.0;
                double t117007 = gcaa*t116954*t116955*t116959*3.0;
                double t117008 = t117005+t117006+t117007;
                double t117009 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t117010 = 1.0/(t116971*t116971);
                double t117011 = gcaa*t116953*4.0;
                double t117012 = gamma_aa[index]*t116955*t116958*1.2E1;
                double t117013 = gcaa*t116954*t116955*t116959*1.2E1;
                double t117014 = gamma_aa[index]*t116954*t116956*t116957*4.0;
                double t117015 = t117011+t117012+t117013+t117014;
                double t117016 = gcaa*t116953*2.0;
                double t117017 = gamma_aa[index]*t116955*t116958*2.0;
                double t117018 = t117016+t117017;
                double t117019 = gamma_aa[index]*gcaa*t117002*(1.6E1/3.0);
                double t117020 = t116954*t116955*t116999*(1.6E1/3.0);
                double t117021 = t117020+t117019;
                double t117022 = gamma_aa[index]*gcaa*t117002*8.0;
                double t117023 = gamma_aa[index]*gcaa*t117001*t116954*t116955*8.0;
                double t117024 = t116954*t116955*t116999*1.6E1;
                double t117025 = t117022+t117023+t117024;
                double t117026 = gamma_aa[index]*gcaa*t117002*(3.2E1/3.0);
                double t117027 = gamma_aa[index]*gcaa*t117001*t116954*t116955*3.2E1;
                double t117028 = t116954*t116955*t116999*3.2E1;
                double t117029 = t117009*t116956*t116966*(3.2E1/3.0);
                double t117030 = t117026+t117027+t117028+t117029;
                double t117031 = 1.0/pow(rho_a[index],4.0/3.0);
                double t117032 = 1.0/pow(rho_a[index],5.0/3.0);
                double t117033 = 1.0/sqrt(t116936);
                double t117034 = 1.0/t116949;
                double t117035 = 1.0/(t116946*t116946);
                double t117036 = b4p*t117032*t116939*(2.0/3.0);
                double t117037 = b2p*c*t117031*(1.0/3.0);
                double t117038 = b1p*c*t117031*t117033*(1.0/6.0);
                double t117039 = b3p*c*t117031*t116937*(1.0/2.0);
                double t117040 = t117036+t117037+t117038+t117039;
                double t117041 = t117040*t117034*t117035*t116952;
                double t117042 = ccaa1*gcaa*t116953*t116995;
                double t117043 = ccaa4*gamma_aa[index]*t116954*t116956*t116957*t116996*4.0;
                double t117044 = ccaa2*gamma_aa[index]*t116955*t116958*t116997*2.0;
                double t117045 = ccaa3*gcaa*t116954*t116955*t116959*t116998*3.0;
                double t117046 = t117042+t117043+t117044+t117045-ccaa1*gamma_aa[index]*t117000*t116955*t116958-ccaa4* \
                   t117010*t117015*t116956*t116957*t116966-ccaa2*t117004*t117018*t116954*t116955*t116958-ccaa3*gamma_aa[index]* \
                   gcaa*t117003*t117008*t116954*t116955*t116959;
                double t117047 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t117048 = 1.0/(omega*omega);
                double t117049 = pow(t117047,2.0/3.0);
                double t117052 = t117048*t117049;
                double t117050 = exp(-t117052);
                double t117051 = 1.0/pow(t117047,1.0/3.0);
                double t117053 = omega*omega;
                double t117054 = t117050-1.0;
                double t117055 = 1.0/pow(t117047,2.0/3.0);
                double t117056 = 1.0/pow(t117047,4.0/3.0);
                double t117057 = 1.0/omega;
                double t117079 = t117053*t117054*t117055*(1.0/2.0);
                double t117058 = t117050-t117079;
                double t117059 = gx*gx;
                double t117060 = t117059*t117059;
                double t117061 = gamma_aa[index]*gx*t116953;
                double t117062 = t117061+1.0;
                double t117063 = gamma_aa[index]*gx*t116953*3.0;
                double t117064 = gamma_aa[index]*gx*t117059*t116954*t116959;
                double t117065 = t117059*t116954*t116958*3.0;
                double t117066 = t117063+t117064+t117065+1.0;
                double t117067 = gamma_aa[index]*gx*t116953*4.0;
                double t117068 = gamma_aa[index]*gx*t117059*t116954*t116959*4.0;
                double t117069 = t117059*t116954*t116958*6.0;
                double t117070 = t117060*t116957*t116966;
                double t117071 = t117070+t117067+t117068+t117069+1.0;
                double t117072 = gamma_aa[index]*gx*t116953*2.0;
                double t117073 = t117059*t116954*t116958;
                double t117074 = t117072+t117073+1.0;
                double t117075 = pow(t117047,1.0/3.0);
                double t117076 = t117057*t117075;
                double t117077 = erf(t117076);
                double t117078 = t117077*(3.991211251234741E15/2.251799813685248E15);
                double t117080 = omega*t117051*t117058;
                double t117081 = t117080+t117078;
                double t117082 = 1.0/t117062;
                double t117083 = cx1*gx*t117082*t116953;
                double t117084 = 1.0/t117071;
                double t117085 = cx4*gamma_aa[index]*t117060*t117084*t116954*t116957*4.0;
                double t117086 = 1.0/t117074;
                double t117087 = cx2*gamma_aa[index]*t117059*t117086*t116958*2.0;
                double t117088 = 1.0/t117066;
                double t117089 = cx3*gx*t117059*t117088*t116954*t116959*3.0;
                double t117090 = 1.0/(t117062*t117062);
                double t117091 = gx*t116953*3.0;
                double t117092 = gamma_aa[index]*t117059*t116958*6.0;
                double t117093 = gx*t117059*t116954*t116959*3.0;
                double t117094 = t117091+t117092+t117093;
                double t117095 = 1.0/(t117066*t117066);
                double t117096 = gx*t116953*4.0;
                double t117097 = gamma_aa[index]*t117059*t116958*1.2E1;
                double t117098 = gx*t117059*t116954*t116959*1.2E1;
                double t117099 = gamma_aa[index]*t117060*t116954*t116957*4.0;
                double t117100 = t117096+t117097+t117098+t117099;
                double t117101 = 1.0/(t117071*t117071);
                double t117102 = gx*t116953*2.0;
                double t117103 = gamma_aa[index]*t117059*t116958*2.0;
                double t117104 = t117102+t117103;
                double t117105 = 1.0/(t117074*t117074);
                double t117106 = t117083+t117085+t117087+t117089-cx1*gamma_aa[index]*t117090*t117059*t116958-cx2* \
                   t117104*t117105*t117059*t116954*t116958-cx4*t117100*t117101*t117060*t116957*t116966-cx3*gamma_aa[index]* \
                   gx*t117094*t117059*t117095*t116954*t116959;
                double t117107 = pow(rho_a[index],4.0/3.0);
                double t117108 = omega*t117051*t117081*(4.0/3.0);
                double t117109 = t117108-1.0;
                double t117110 = gamma_aa[index]*gx*t117002*(1.6E1/3.0);
                double t117111 = t117059*t116954*t116999*(1.6E1/3.0);
                double t117112 = t117110+t117111;
                double t117113 = gamma_aa[index]*gx*t117002*8.0;
                double t117114 = gamma_aa[index]*gx*t117001*t117059*t116954*8.0;
                double t117115 = t117059*t116954*t116999*1.6E1;
                double t117116 = t117113+t117114+t117115;
                double t117117 = gamma_aa[index]*gx*t117002*(3.2E1/3.0);
                double t117118 = gamma_aa[index]*gx*t117001*t117059*t116954*3.2E1;
                double t117119 = t117059*t116954*t116999*3.2E1;
                double t117120 = t117060*t117009*t116966*(3.2E1/3.0);
                double t117121 = t117120+t117117+t117118+t117119;
                v_rho_a_gamma_aa_[index] = -t117046*(t116994+t116980*t116977*(t116993-c0p*t116950*t116952*2.0))+rho_a[index]* \
                   t117046*(-t117041+t116980*t116977*(t117041-(t116992*1.0/(t116986*t116986)*(b2f*c*t117031*(1.0/3.0) \
                   +b4f*t117032*t116939*(2.0/3.0)+b1f*c*t117031*t117033*(1.0/6.0)+b3f*c*t117031*t116937*(1.0/2.0)))/t116989+ \
                   a1f*c*c0f*t117031*t116990*(2.0/3.0)-a1p*c*c0p*t117031*t116950*(2.0/3.0))+a1p*c*c0p*t117031*t116950* \
                   (2.0/3.0))-rho_a[index]*(t116994+t116980*t116977*(t116993-t116994))*(ccaa1*gcaa*t117002*t116995*(- \
                   8.0/3.0)+ccaa1*gamma_aa[index]*t117000*t116955*t116999*8.0-ccaa2*gamma_aa[index]*t116955*t116997*t116999* \
                   (3.2E1/3.0)+ccaa4*t117010*t117015*t117009*t116956*t116966*(3.2E1/3.0)+ccaa2*t117004*t117018*t116954* \
                   t116955*t116999*(1.6E1/3.0)+ccaa4*t117010*t116956*t116957*t116966*(gcaa*t117002*(3.2E1/3.0)+gamma_aa[index]* \
                   t116955*t116999*6.4E1+gamma_aa[index]*t117009*t116954*t116956*(1.28E2/3.0)+gcaa*t117001*t116954*t116955* \
                   9.6E1)-ccaa1*gcaa*t117001*1.0/(t116961*t116961*t116961)*t116954*t116955*(1.6E1/3.0)+ccaa2*t117004* \
                   t116954*t116955*t116958*(gcaa*t117002*(1.6E1/3.0)+gamma_aa[index]*t116955*t116999*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t117021*t117004*t116955*t116958*2.0-ccaa4*gamma_aa[index]*t117009*t116954*t116956* \
                   t116996*(1.28E2/3.0)-ccaa3*gcaa*t117001*t116954*t116955*t116998*2.4E1+ccaa4*gamma_aa[index]*t117010* \
                   t117030*t116954*t116956*t116957*4.0+ccaa3*gcaa*t117003*t117025*t116954*t116955*t116959*3.0-ccaa4*t117030* \
                   t117015*1.0/(t116971*t116971*t116971)*t116956*t116957*t116966*2.0-ccaa2*t117021*t117018*t116954*t116955* \
                   1.0/(t116974*t116974*t116974)*t116958*2.0+ccaa3*gamma_aa[index]*gcaa*t117003*t116954*t116955*t116959* \
                   (gcaa*t117002*8.0+gamma_aa[index]*t116955*t116999*3.2E1+gcaa*t117001*t116954*t116955*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t117001*t117003*t117008*t116954*t116955*8.0-ccaa3*gamma_aa[index]*gcaa*t117025* \
                   t117008*t116954*t116955*1.0/(t116965*t116965*t116965)*t116959*2.0)-c0*t117106*t117107*(omega*t117051* \
                   (omega*t117056*t117058*(-2.778046668940015E15/1.40737488355328E14)+omega*t117051*((t117050*(1.0/3.0) \
                   )/rho_a[index]+t117053*t117054*1.0/pow(t117047,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t117050*t117051*t117048*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t117050* \
                   t117055*t117057*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t117081*t117056*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t117107*t117109*(cx1*gx*t117002*t117082*(-8.0/3.0)+cx1*gamma_aa[index]*t117090* \
                   t117059*t116999*8.0-cx2*gamma_aa[index]*t117059*t117086*t116999*(3.2E1/3.0)+cx2*t117104*t117105*t117059* \
                   t116954*t116999*(1.6E1/3.0)+cx4*t117100*t117101*t117060*t117009*t116966*(3.2E1/3.0)+cx4*t117101*t117060* \
                   t116957*t116966*(gx*t117002*(3.2E1/3.0)+gamma_aa[index]*t117059*t116999*6.4E1+gamma_aa[index]*t117060* \
                   t117009*t116954*(1.28E2/3.0)+gx*t117001*t117059*t116954*9.6E1)-cx1*gx*t117001*1.0/(t117062*t117062* \
                   t117062)*t117059*t116954*(1.6E1/3.0)+cx2*t117105*t117059*t116954*t116958*(gx*t117002*(1.6E1/3.0)+gamma_aa[index]* \
                   t117059*t116999*(3.2E1/3.0))+cx2*gamma_aa[index]*t117112*t117105*t117059*t116958*2.0-cx4*gamma_aa[index]* \
                   t117060*t117009*t117084*t116954*(1.28E2/3.0)-cx3*gx*t117001*t117059*t117088*t116954*2.4E1+cx4*gamma_aa[index]* \
                   t117101*t117121*t117060*t116954*t116957*4.0+cx3*gx*t117116*t117059*t117095*t116954*t116959*3.0-cx2* \
                   t117112*t117104*1.0/(t117074*t117074*t117074)*t117059*t116954*t116958*2.0-cx4*t117100*t117121*t117060* \
                   1.0/(t117071*t117071*t117071)*t116957*t116966*2.0+cx3*gamma_aa[index]*gx*t117059*t117095*t116954*t116959* \
                   (gx*t117002*8.0+gamma_aa[index]*t117059*t116999*3.2E1+gx*t117001*t117059*t116954*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t117001*t117094*t117059*t117095*t116954*8.0-cx3*gamma_aa[index]*gx*t117116*1.0/(t117066*t117066* \
                   t117066)*t117094*t117059*t116954*t116959*2.0)-c0*pow(rho_a[index],1.0/3.0)*t117106*t117109*(4.0/3.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t114446 = rho_a[index]+rho_b[index];
                double t114447 = 1.0/pow(t114446,1.0/3.0);
                double t114448 = c*t114447;
                double t114449 = sqrt(t114448);
                double t114450 = b1p*t114449;
                double t114451 = pow(t114448,3.0/2.0);
                double t114452 = b3p*t114451;
                double t114453 = c*c;
                double t114454 = 1.0/pow(t114446,2.0/3.0);
                double t114455 = b4p*t114453*t114454;
                double t114456 = b2p*c*t114447;
                double t114457 = t114450+t114452+t114455+t114456;
                double t114458 = 1.0/pow(t114446,4.0/3.0);
                double t114459 = 1.0/c0p;
                double t114460 = 1.0/t114457;
                double t114461 = t114460*t114459*(1.0/2.0);
                double t114462 = t114461+1.0;
                double t114463 = a1p*c*t114447;
                double t114464 = t114463+1.0;
                double t114465 = rho_a[index]-rho_b[index];
                double t114466 = t114465*t114465;
                double t114467 = 1.0/t114446;
                double t114468 = t114465*t114467;
                double t114469 = two_13*2.0;
                double t114470 = t114469-2.0;
                double t114471 = 1.0/t114470;
                double t114472 = 1.0/c0f;
                double t114473 = b1f*t114449;
                double t114474 = b3f*t114451;
                double t114475 = b4f*t114453*t114454;
                double t114476 = b2f*c*t114447;
                double t114477 = t114473+t114474+t114475+t114476;
                double t114478 = 1.0/t114477;
                double t114479 = t114472*t114478*(1.0/2.0);
                double t114480 = t114479+1.0;
                double t114481 = log(t114480);
                double t114482 = a1f*c*t114447;
                double t114483 = t114482+1.0;
                double t114484 = log(t114462);
                double t114494 = c0f*t114481*t114483*2.0;
                double t114495 = c0p*t114464*t114484*2.0;
                double t114485 = t114494-t114495;
                double t114486 = t114468+1.0;
                double t114487 = pow(t114486,4.0/3.0);
                double t114488 = -t114468+1.0;
                double t114489 = pow(t114488,4.0/3.0);
                double t114490 = t114487+t114489-2.0;
                double t114491 = 1.0/(t114446*t114446);
                double t114522 = t114491*t114465;
                double t114492 = -t114522+t114467;
                double t114493 = 1.0/(t114446*t114446*t114446*t114446);
                double t114496 = t114466*t114466;
                double t114497 = 1.0/pow(t114446,5.0/3.0);
                double t114498 = 1.0/sqrt(t114448);
                double t114499 = 1.0/t114462;
                double t114500 = 1.0/(t114457*t114457);
                double t114501 = b4p*t114453*t114497*(2.0/3.0);
                double t114502 = b2p*c*t114458*(1.0/3.0);
                double t114503 = b1p*c*t114458*t114498*(1.0/6.0);
                double t114504 = b3p*c*t114449*t114458*(1.0/2.0);
                double t114505 = t114501+t114502+t114503+t114504;
                double t114506 = t114500*t114505*t114464*t114499;
                double t114507 = 1.0/(t114446*t114446*t114446*t114446*t114446);
                double t114508 = 1.0/d2fz0;
                double t114509 = 1.0/Aa;
                double t114510 = b1a*t114449;
                double t114511 = b3a*t114451;
                double t114512 = b4a*t114453*t114454;
                double t114513 = b2a*c*t114447;
                double t114514 = t114510+t114511+t114512+t114513;
                double t114515 = 1.0/t114514;
                double t114516 = t114515*t114509*(1.0/2.0);
                double t114517 = t114516+1.0;
                double t114518 = log(t114517);
                double t114519 = a1a*c*t114447;
                double t114520 = t114519+1.0;
                double t114521 = pow(t114486,1.0/3.0);
                double t114523 = t114521*t114492*(4.0/3.0);
                double t114524 = pow(t114488,1.0/3.0);
                double t114525 = t114523-t114524*t114492*(4.0/3.0);
                double t114526 = t114493*t114496;
                double t114527 = t114526-1.0;
                double t114528 = 1.0/pow(rho_a[index],1.0/3.0);
                double t114529 = c*t114528;
                double t114530 = sqrt(t114529);
                double t114531 = b1f*t114530;
                double t114532 = pow(t114529,3.0/2.0);
                double t114533 = b3f*t114532;
                double t114534 = 1.0/pow(rho_a[index],2.0/3.0);
                double t114535 = b4f*t114453*t114534;
                double t114536 = b2f*c*t114528;
                double t114537 = t114531+t114533+t114535+t114536;
                double t114538 = 1.0/pow(rho_a[index],4.0/3.0);
                double t114539 = b1p*t114530;
                double t114540 = b3p*t114532;
                double t114541 = b4p*t114453*t114534;
                double t114542 = b2p*c*t114528;
                double t114543 = t114540+t114541+t114542+t114539;
                double t114544 = 1.0/pow(rho_a[index],5.0/3.0);
                double t114545 = 1.0/sqrt(t114529);
                double t114546 = 1.0/t114537;
                double t114547 = t114472*t114546*(1.0/2.0);
                double t114548 = t114547+1.0;
                double t114549 = 1.0/t114543;
                double t114550 = t114459*t114549*(1.0/2.0);
                double t114551 = t114550+1.0;
                double t114552 = a1p*c*t114528;
                double t114553 = t114552+1.0;
                double t114554 = 1.0/t114551;
                double t114555 = 1.0/(t114543*t114543);
                double t114556 = b4p*t114453*t114544*(2.0/3.0);
                double t114557 = b2p*c*t114538*(1.0/3.0);
                double t114558 = b1p*c*t114545*t114538*(1.0/6.0);
                double t114559 = b3p*c*t114530*t114538*(1.0/2.0);
                double t114560 = t114556+t114557+t114558+t114559;
                double t114561 = t114560*t114553*t114554*t114555;
                double t114562 = log(t114551);
                double t114563 = pow(2.0,1.0/3.0);
                double t114564 = t114563*2.0;
                double t114565 = t114564-2.0;
                double t114566 = log(t114548);
                double t114567 = a1f*c*t114528;
                double t114568 = t114567+1.0;
                double t114569 = 1.0/pow(rho_b[index],8.0/3.0);
                double t114570 = 1.0/pow(rho_a[index],8.0/3.0);
                double t114571 = gamma_aa[index]*t114570*(1.0/2.0);
                double t114572 = gamma_bb[index]*t114569*(1.0/2.0);
                double t114573 = t114571+t114572;
                double t114574 = gcab*t114573;
                double t114575 = t114574+1.0;
                double t114576 = gcab*gcab;
                double t114577 = t114573*t114573;
                double t114578 = t114576*t114576;
                double t114579 = t114577*t114577;
                double t114580 = t114576*t114577;
                double t114581 = gcab*t114573*2.0;
                double t114582 = t114580+t114581+1.0;
                double t114583 = t114576*t114577*3.0;
                double t114584 = gcab*t114573*t114576*t114577;
                double t114585 = gcab*t114573*3.0;
                double t114586 = t114583+t114584+t114585+1.0;
                double t114587 = t114576*t114577*6.0;
                double t114588 = gcab*t114573*t114576*t114577*4.0;
                double t114589 = t114578*t114579;
                double t114590 = gcab*t114573*4.0;
                double t114591 = t114590+t114587+t114588+t114589+1.0;
                double t114592 = c0f*t114566*t114568*2.0;
                double t114594 = c0p*t114553*t114562*2.0;
                double t114593 = t114592-t114594;
                double t114595 = 1.0/pow(rho_b[index],1.0/3.0);
                double t114596 = c*t114595;
                double t114597 = sqrt(t114596);
                double t114598 = pow(t114596,3.0/2.0);
                double t114599 = 1.0/pow(rho_b[index],2.0/3.0);
                double t114600 = b1p*t114597;
                double t114601 = b3p*t114598;
                double t114602 = b4p*t114453*t114599;
                double t114603 = b2p*c*t114595;
                double t114604 = t114600+t114601+t114602+t114603;
                double t114605 = 1.0/t114604;
                double t114606 = t114605*t114459*(1.0/2.0);
                double t114607 = t114606+1.0;
                double t114608 = log(t114607);
                double t114609 = a1p*c*t114595;
                double t114610 = t114609+1.0;
                double t114611 = c0p*t114610*t114608*2.0;
                double t114612 = t114471*t114490*t114493*t114485*t114496;
                double t114613 = Aa*t114520*t114471*t114490*t114508*t114518*t114527*2.0;
                double t114614 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t114615 = 1.0/(t114586*t114586);
                double t114616 = 1.0/(t114591*t114591);
                double t114617 = gcab*t114569*2.0;
                double t114618 = t114573*t114576*t114569*6.0;
                double t114619 = gcab*t114576*t114577*t114569*6.0;
                double t114620 = t114573*t114577*t114569*t114578*2.0;
                double t114621 = t114620+t114617+t114618+t114619;
                double t114622 = 1.0/(t114582*t114582);
                double t114623 = gamma_aa[index]*gcab*t114614*(8.0/3.0);
                double t114624 = gamma_aa[index]*t114614*t114573*t114576*(8.0/3.0);
                double t114625 = t114623+t114624;
                double t114626 = gcab*t114569;
                double t114627 = t114573*t114576*t114569;
                double t114628 = t114626+t114627;
                double t114629 = gamma_aa[index]*gcab*t114614*(1.6E1/3.0);
                double t114630 = gamma_aa[index]*gcab*t114614*t114576*t114577*1.6E1;
                double t114631 = gamma_aa[index]*t114614*t114573*t114577*t114578*(1.6E1/3.0);
                double t114632 = gamma_aa[index]*t114614*t114573*t114576*1.6E1;
                double t114633 = t114630+t114631+t114632+t114629;
                double t114634 = 1.0/(t114575*t114575);
                double t114635 = 1.0/t114582;
                double t114636 = gcab*t114569*(3.0/2.0);
                double t114637 = t114573*t114576*t114569*3.0;
                double t114638 = gcab*t114576*t114577*t114569*(3.0/2.0);
                double t114639 = t114636+t114637+t114638;
                double t114640 = gamma_aa[index]*gcab*t114614*4.0;
                double t114641 = gamma_aa[index]*gcab*t114614*t114576*t114577*4.0;
                double t114642 = gamma_aa[index]*t114614*t114573*t114576*8.0;
                double t114643 = t114640+t114641+t114642;
                double t114644 = 1.0/t114586;
                double t114645 = 1.0/t114591;
                v_rho_a_gamma_bb_[index] = -(t114612+t114613+t114495+t114446*(t114506-t114471*t114490*t114493*t114496* \
                   (t114506-(t114483*1.0/(t114477*t114477)*(b2f*c*t114458*(1.0/3.0)+b4f*t114453*t114497*(2.0/3.0)+b1f* \
                   c*t114458*t114498*(1.0/6.0)+b3f*c*t114449*t114458*(1.0/2.0)))/t114480+a1f*c*c0f*t114481*t114458*(2.0/ \
                   3.0)-a1p*c*c0p*t114484*t114458*(2.0/3.0))-a1p*c*c0p*t114484*t114458*(2.0/3.0)-t114471*t114507*t114490* \
                   t114485*t114496*4.0+t114471*t114525*t114493*t114485*t114496+t114471*t114490*t114465*t114466*t114493* \
                   t114485*4.0-Aa*t114520*t114471*t114490*t114508*t114518*(t114507*t114496*4.0-t114465*t114466*t114493* \
                   4.0)*2.0+Aa*t114520*t114471*t114525*t114508*t114518*t114527*2.0+(t114520*1.0/(t114514*t114514)*t114471* \
                   t114490*t114508*t114527*(b2a*c*t114458*(1.0/3.0)+b4a*t114453*t114497*(2.0/3.0)+b1a*c*t114458*t114498* \
                   (1.0/6.0)+b3a*c*t114449*t114458*(1.0/2.0)))/t114517-Aa*a1a*c*t114471*t114490*t114508*t114518*t114527* \
                   t114458*(2.0/3.0))+rho_a[index]*(-t114561+t114471*t114565*(t114561-(1.0/(t114537*t114537)*t114568* \
                   (b2f*c*t114538*(1.0/3.0)+b4f*t114453*t114544*(2.0/3.0)+b1f*c*t114545*t114538*(1.0/6.0)+b3f*c*t114530* \
                   t114538*(1.0/2.0)))/t114548+a1f*c*c0f*t114538*t114566*(2.0/3.0)-a1p*c*c0p*t114562*t114538*(2.0/3.0) \
                   )+a1p*c*c0p*t114562*t114538*(2.0/3.0))-c0p*t114553*t114562*2.0-t114471*t114565*t114593)*((ccab1*gcab* \
                   t114569*(1.0/2.0))/t114575-ccab2*t114622*t114628*t114576*t114577-ccab1*t114634*t114573*t114576*t114569* \
                   (1.0/2.0)-ccab4*t114621*t114616*t114578*t114579+ccab2*t114635*t114573*t114576*t114569+ccab4*t114573* \
                   t114645*t114577*t114569*t114578*2.0+ccab3*gcab*t114644*t114576*t114577*t114569*(3.0/2.0)-ccab3*gcab* \
                   t114615*t114573*t114576*t114639*t114577)+(rho_a[index]*(t114594+t114471*t114565*t114593)+rho_b[index]* \
                   (t114611-t114471*t114565*(t114611-c0f*log((t114472*(1.0/2.0))/(b1f*t114597+b3f*t114598+b2f*c*t114595+ \
                   b4f*t114453*t114599)+1.0)*(a1f*c*t114595+1.0)*2.0))-t114446*(t114612+t114613+t114495))*(ccab4*t114616* \
                   t114578*t114579*(gamma_aa[index]*t114614*t114576*t114569*8.0+gamma_aa[index]*t114614*t114577*t114569* \
                   t114578*8.0+gamma_aa[index]*gcab*t114614*t114573*t114576*t114569*1.6E1)+ccab2*t114622*t114625*t114573* \
                   t114576*t114569-ccab4*t114621*t114633*1.0/(t114591*t114591*t114591)*t114578*t114579*2.0-ccab2*t114625* \
                   1.0/(t114582*t114582*t114582)*t114628*t114576*t114577*2.0+ccab1*gamma_aa[index]*t114614*t114634*t114576* \
                   t114569*(4.0/3.0)-ccab2*gamma_aa[index]*t114614*t114635*t114576*t114569*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t114622*t114614*t114573*t114628*t114576*(8.0/3.0)+ccab2*gamma_aa[index]*t114622*t114614*t114577*t114569* \
                   t114578*(4.0/3.0)-ccab4*gamma_aa[index]*t114614*t114645*t114577*t114569*t114578*8.0+ccab3*gcab*t114615* \
                   t114643*t114576*t114577*t114569*(3.0/2.0)+ccab4*t114633*t114616*t114573*t114577*t114569*t114578*2.0+ \
                   ccab3*gcab*t114615*t114573*t114576*t114577*(gamma_aa[index]*t114614*t114576*t114569*4.0+gamma_aa[index]* \
                   gcab*t114614*t114573*t114576*t114569*4.0)-ccab1*gamma_aa[index]*gcab*t114614*t114573*1.0/(t114575* \
                   t114575*t114575)*t114576*t114569*(4.0/3.0)-ccab3*gcab*t114643*t114573*t114576*t114639*t114577*1.0/ \
                   (t114586*t114586*t114586)*2.0+ccab3*gamma_aa[index]*gcab*t114614*t114615*t114576*t114639*t114577*4.0- \
                   ccab3*gamma_aa[index]*gcab*t114614*t114644*t114573*t114576*t114569*4.0+ccab4*gamma_aa[index]*t114621* \
                   t114614*t114616*t114573*t114577*t114578*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t114647 = rho_a[index]+rho_b[index];
                double t114648 = 1.0/pow(t114647,1.0/3.0);
                double t114649 = c*t114648;
                double t114650 = sqrt(t114649);
                double t114651 = b1p*t114650;
                double t114652 = pow(t114649,3.0/2.0);
                double t114653 = b3p*t114652;
                double t114654 = c*c;
                double t114655 = 1.0/pow(t114647,2.0/3.0);
                double t114656 = b4p*t114654*t114655;
                double t114657 = b2p*c*t114648;
                double t114658 = t114651+t114653+t114656+t114657;
                double t114659 = 1.0/pow(t114647,4.0/3.0);
                double t114660 = 1.0/c0p;
                double t114661 = 1.0/t114658;
                double t114662 = t114660*t114661*(1.0/2.0);
                double t114663 = t114662+1.0;
                double t114664 = a1p*c*t114648;
                double t114665 = t114664+1.0;
                double t114666 = rho_a[index]-rho_b[index];
                double t114667 = t114666*t114666;
                double t114668 = 1.0/t114647;
                double t114669 = t114666*t114668;
                double t114670 = two_13*2.0;
                double t114671 = t114670-2.0;
                double t114672 = 1.0/t114671;
                double t114673 = 1.0/c0f;
                double t114674 = b1f*t114650;
                double t114675 = b3f*t114652;
                double t114676 = b4f*t114654*t114655;
                double t114677 = b2f*c*t114648;
                double t114678 = t114674+t114675+t114676+t114677;
                double t114679 = 1.0/t114678;
                double t114680 = t114673*t114679*(1.0/2.0);
                double t114681 = t114680+1.0;
                double t114682 = log(t114681);
                double t114683 = a1f*c*t114648;
                double t114684 = t114683+1.0;
                double t114685 = log(t114663);
                double t114696 = c0f*t114682*t114684*2.0;
                double t114697 = c0p*t114665*t114685*2.0;
                double t114686 = t114696-t114697;
                double t114687 = t114669+1.0;
                double t114688 = pow(t114687,4.0/3.0);
                double t114689 = -t114669+1.0;
                double t114690 = pow(t114689,4.0/3.0);
                double t114691 = t114690+t114688-2.0;
                double t114692 = 1.0/(t114647*t114647);
                double t114693 = t114692*t114666;
                double t114694 = t114693+t114668;
                double t114695 = 1.0/(t114647*t114647*t114647*t114647);
                double t114698 = t114667*t114667;
                double t114699 = 1.0/pow(t114647,5.0/3.0);
                double t114700 = 1.0/sqrt(t114649);
                double t114701 = 1.0/t114663;
                double t114702 = 1.0/(t114658*t114658);
                double t114703 = b4p*t114654*t114699*(2.0/3.0);
                double t114704 = b2p*c*t114659*(1.0/3.0);
                double t114705 = b1p*c*t114700*t114659*(1.0/6.0);
                double t114706 = b3p*c*t114650*t114659*(1.0/2.0);
                double t114707 = t114703+t114704+t114705+t114706;
                double t114708 = 1.0/(t114647*t114647*t114647*t114647*t114647);
                double t114709 = 1.0/d2fz0;
                double t114710 = 1.0/Aa;
                double t114711 = b1a*t114650;
                double t114712 = b3a*t114652;
                double t114713 = b4a*t114654*t114655;
                double t114714 = b2a*c*t114648;
                double t114715 = t114711+t114712+t114713+t114714;
                double t114716 = 1.0/t114715;
                double t114717 = t114710*t114716*(1.0/2.0);
                double t114718 = t114717+1.0;
                double t114719 = log(t114718);
                double t114720 = a1a*c*t114648;
                double t114721 = t114720+1.0;
                double t114722 = pow(t114687,1.0/3.0);
                double t114723 = t114722*t114694*(4.0/3.0);
                double t114724 = pow(t114689,1.0/3.0);
                double t114725 = t114723-t114724*t114694*(4.0/3.0);
                double t114726 = t114695*t114698;
                double t114727 = t114726-1.0;
                double t114728 = 1.0/pow(rho_b[index],1.0/3.0);
                double t114729 = c*t114728;
                double t114730 = sqrt(t114729);
                double t114731 = b1f*t114730;
                double t114732 = pow(t114729,3.0/2.0);
                double t114733 = b3f*t114732;
                double t114734 = 1.0/pow(rho_b[index],2.0/3.0);
                double t114735 = b4f*t114734*t114654;
                double t114736 = b2f*c*t114728;
                double t114737 = t114731+t114733+t114735+t114736;
                double t114738 = 1.0/pow(rho_b[index],4.0/3.0);
                double t114739 = b1p*t114730;
                double t114740 = b3p*t114732;
                double t114741 = b4p*t114734*t114654;
                double t114742 = b2p*c*t114728;
                double t114743 = t114740+t114741+t114742+t114739;
                double t114744 = 1.0/pow(rho_b[index],5.0/3.0);
                double t114745 = 1.0/sqrt(t114729);
                double t114746 = 1.0/t114737;
                double t114747 = t114673*t114746*(1.0/2.0);
                double t114748 = t114747+1.0;
                double t114749 = 1.0/t114743;
                double t114750 = t114660*t114749*(1.0/2.0);
                double t114751 = t114750+1.0;
                double t114752 = a1p*c*t114728;
                double t114753 = t114752+1.0;
                double t114754 = 1.0/t114751;
                double t114755 = 1.0/(t114743*t114743);
                double t114756 = b4p*t114654*t114744*(2.0/3.0);
                double t114757 = b2p*c*t114738*(1.0/3.0);
                double t114758 = b1p*c*t114745*t114738*(1.0/6.0);
                double t114759 = b3p*c*t114730*t114738*(1.0/2.0);
                double t114760 = t114756+t114757+t114758+t114759;
                double t114761 = t114760*t114753*t114754*t114755;
                double t114762 = log(t114751);
                double t114763 = pow(2.0,1.0/3.0);
                double t114764 = t114763*2.0;
                double t114765 = t114764-2.0;
                double t114766 = log(t114748);
                double t114767 = a1f*c*t114728;
                double t114768 = t114767+1.0;
                double t114769 = 1.0/pow(rho_a[index],8.0/3.0);
                double t114770 = gamma_aa[index]*t114769*(1.0/2.0);
                double t114771 = 1.0/pow(rho_b[index],8.0/3.0);
                double t114772 = gamma_bb[index]*t114771*(1.0/2.0);
                double t114773 = t114770+t114772;
                double t114774 = gcab*t114773;
                double t114775 = t114774+1.0;
                double t114776 = gcab*gcab;
                double t114777 = t114773*t114773;
                double t114778 = t114776*t114776;
                double t114779 = t114777*t114777;
                double t114780 = t114776*t114777;
                double t114781 = gcab*t114773*2.0;
                double t114782 = t114780+t114781+1.0;
                double t114783 = t114776*t114777*3.0;
                double t114784 = gcab*t114773*t114776*t114777;
                double t114785 = gcab*t114773*3.0;
                double t114786 = t114783+t114784+t114785+1.0;
                double t114787 = t114776*t114777*6.0;
                double t114788 = gcab*t114773*t114776*t114777*4.0;
                double t114789 = t114778*t114779;
                double t114790 = gcab*t114773*4.0;
                double t114791 = t114790+t114787+t114788+t114789+1.0;
                double t114792 = a1p*c*c0p*t114685*t114659*(2.0/3.0);
                double t114793 = 1.0/pow(rho_a[index],1.0/3.0);
                double t114794 = c*t114793;
                double t114795 = sqrt(t114794);
                double t114796 = pow(t114794,3.0/2.0);
                double t114797 = 1.0/pow(rho_a[index],2.0/3.0);
                double t114798 = b1p*t114795;
                double t114799 = b3p*t114796;
                double t114800 = b4p*t114654*t114797;
                double t114801 = b2p*c*t114793;
                double t114802 = t114800+t114801+t114798+t114799;
                double t114803 = 1.0/t114802;
                double t114804 = t114803*t114660*(1.0/2.0);
                double t114805 = t114804+1.0;
                double t114806 = log(t114805);
                double t114807 = a1p*c*t114793;
                double t114808 = t114807+1.0;
                double t114809 = c0p*t114806*t114808*2.0;
                double t114810 = c0f*t114766*t114768*2.0;
                double t114812 = c0p*t114753*t114762*2.0;
                double t114811 = t114810-t114812;
                double t114813 = t114672*t114691*t114686*t114695*t114698;
                double t114814 = Aa*t114721*t114672*t114691*t114709*t114727*t114719*2.0;
                double t114815 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t114816 = 1.0/(t114786*t114786);
                double t114817 = 1.0/(t114791*t114791);
                double t114818 = gcab*t114769*2.0;
                double t114819 = t114773*t114776*t114769*6.0;
                double t114820 = gcab*t114776*t114777*t114769*6.0;
                double t114821 = t114773*t114777*t114769*t114778*2.0;
                double t114822 = t114820+t114821+t114818+t114819;
                double t114823 = 1.0/(t114782*t114782);
                double t114824 = gamma_bb[index]*gcab*t114815*(8.0/3.0);
                double t114825 = gamma_bb[index]*t114815*t114773*t114776*(8.0/3.0);
                double t114826 = t114824+t114825;
                double t114827 = gcab*t114769;
                double t114828 = t114773*t114776*t114769;
                double t114829 = t114827+t114828;
                double t114830 = gamma_bb[index]*gcab*t114815*(1.6E1/3.0);
                double t114831 = gamma_bb[index]*gcab*t114815*t114776*t114777*1.6E1;
                double t114832 = gamma_bb[index]*t114815*t114773*t114777*t114778*(1.6E1/3.0);
                double t114833 = gamma_bb[index]*t114815*t114773*t114776*1.6E1;
                double t114834 = t114830+t114831+t114832+t114833;
                double t114835 = 1.0/(t114775*t114775);
                double t114836 = 1.0/t114782;
                double t114837 = gcab*t114769*(3.0/2.0);
                double t114838 = t114773*t114776*t114769*3.0;
                double t114839 = gcab*t114776*t114777*t114769*(3.0/2.0);
                double t114840 = t114837+t114838+t114839;
                double t114841 = gamma_bb[index]*gcab*t114815*4.0;
                double t114842 = gamma_bb[index]*gcab*t114815*t114776*t114777*4.0;
                double t114843 = gamma_bb[index]*t114815*t114773*t114776*8.0;
                double t114844 = t114841+t114842+t114843;
                double t114845 = 1.0/t114786;
                double t114846 = 1.0/t114791;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t114812+t114811*t114672*t114765)+rho_a[index]*(t114809- \
                   t114672*t114765*(t114809-c0f*log((t114673*(1.0/2.0))/(b1f*t114795+b3f*t114796+b2f*c*t114793+b4f*t114654* \
                   t114797)+1.0)*(a1f*c*t114793+1.0)*2.0))-t114647*(t114813+t114814+t114697))*(ccab4*t114817*t114778* \
                   t114779*(gamma_bb[index]*t114815*t114776*t114769*8.0+gamma_bb[index]*t114815*t114777*t114769*t114778* \
                   8.0+gamma_bb[index]*gcab*t114815*t114773*t114776*t114769*1.6E1)+ccab2*t114823*t114826*t114773*t114776* \
                   t114769-ccab4*t114822*t114834*1.0/(t114791*t114791*t114791)*t114778*t114779*2.0-ccab2*t114826*1.0/ \
                   (t114782*t114782*t114782)*t114829*t114776*t114777*2.0+ccab1*gamma_bb[index]*t114815*t114835*t114776* \
                   t114769*(4.0/3.0)-ccab2*gamma_bb[index]*t114815*t114836*t114776*t114769*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t114823*t114815*t114773*t114829*t114776*(8.0/3.0)+ccab2*gamma_bb[index]*t114823*t114815*t114777*t114769* \
                   t114778*(4.0/3.0)-ccab4*gamma_bb[index]*t114815*t114846*t114777*t114769*t114778*8.0+ccab3*gcab*t114816* \
                   t114844*t114776*t114777*t114769*(3.0/2.0)+ccab4*t114834*t114817*t114773*t114777*t114769*t114778*2.0+ \
                   ccab3*gcab*t114816*t114773*t114776*t114777*(gamma_bb[index]*t114815*t114776*t114769*4.0+gamma_bb[index]* \
                   gcab*t114815*t114773*t114776*t114769*4.0)-ccab1*gamma_bb[index]*gcab*t114815*t114773*1.0/(t114775* \
                   t114775*t114775)*t114776*t114769*(4.0/3.0)-ccab3*gcab*t114840*t114844*t114773*t114776*t114777*1.0/ \
                   (t114786*t114786*t114786)*2.0+ccab3*gamma_bb[index]*gcab*t114840*t114815*t114816*t114776*t114777*4.0- \
                   ccab3*gamma_bb[index]*gcab*t114815*t114773*t114845*t114776*t114769*4.0+ccab4*gamma_bb[index]*t114822* \
                   t114815*t114817*t114773*t114777*t114778*(1.6E1/3.0))-(t114813+t114814+t114697+rho_b[index]*(-t114761+ \
                   t114672*t114765*(t114761-(1.0/(t114737*t114737)*t114768*(b2f*c*t114738*(1.0/3.0)+b4f*t114654*t114744* \
                   (2.0/3.0)+b1f*c*t114745*t114738*(1.0/6.0)+b3f*c*t114730*t114738*(1.0/2.0)))/t114748+a1f*c*c0f*t114738* \
                   t114766*(2.0/3.0)-a1p*c*c0p*t114762*t114738*(2.0/3.0))+a1p*c*c0p*t114762*t114738*(2.0/3.0))-t114647* \
                   (t114792-t114701*t114702*t114707*t114665+t114672*t114708*t114691*t114686*t114698*4.0+t114725*t114672* \
                   t114686*t114695*t114698-t114672*t114691*t114695*t114698*(t114792-t114701*t114702*t114707*t114665+(t114684* \
                   1.0/(t114678*t114678)*(b2f*c*t114659*(1.0/3.0)+b4f*t114654*t114699*(2.0/3.0)+b1f*c*t114700*t114659* \
                   (1.0/6.0)+b3f*c*t114650*t114659*(1.0/2.0)))/t114681-a1f*c*c0f*t114682*t114659*(2.0/3.0))+t114672*t114691* \
                   t114666*t114667*t114686*t114695*4.0+Aa*t114721*t114672*t114691*t114709*t114719*(t114708*t114698*4.0+ \
                   t114666*t114667*t114695*4.0)*2.0+Aa*t114721*t114725*t114672*t114709*t114727*t114719*2.0-(t114721*1.0/ \
                   (t114715*t114715)*t114672*t114691*t114709*t114727*(b2a*c*t114659*(1.0/3.0)+b4a*t114654*t114699*(2.0/ \
                   3.0)+b1a*c*t114700*t114659*(1.0/6.0)+b3a*c*t114650*t114659*(1.0/2.0)))/t114718+Aa*a1a*c*t114672*t114691* \
                   t114709*t114727*t114719*t114659*(2.0/3.0))-c0p*t114753*t114762*2.0-t114811*t114672*t114765)*((ccab1* \
                   gcab*t114769*(1.0/2.0))/t114775-ccab2*t114823*t114829*t114776*t114777-ccab1*t114835*t114773*t114776* \
                   t114769*(1.0/2.0)-ccab4*t114822*t114817*t114778*t114779+ccab2*t114773*t114836*t114776*t114769+ccab4* \
                   t114773*t114846*t114777*t114769*t114778*2.0+ccab3*gcab*t114845*t114776*t114777*t114769*(3.0/2.0)-ccab3* \
                   gcab*t114840*t114816*t114773*t114776*t114777);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t114849 = 1.0/pow(rho_b[index],1.0/3.0);
                double t114850 = c*t114849;
                double t114851 = sqrt(t114850);
                double t114852 = pow(t114850,3.0/2.0);
                double t114853 = c*c;
                double t114854 = 1.0/pow(rho_b[index],2.0/3.0);
                double t114855 = 1.0/c0p;
                double t114856 = b1p*t114851;
                double t114857 = b3p*t114852;
                double t114858 = b4p*t114853*t114854;
                double t114859 = b2p*c*t114849;
                double t114860 = t114856+t114857+t114858+t114859;
                double t114861 = 1.0/t114860;
                double t114862 = t114861*t114855*(1.0/2.0);
                double t114863 = t114862+1.0;
                double t114864 = log(t114863);
                double t114865 = a1p*c*t114849;
                double t114866 = t114865+1.0;
                double t114867 = 1.0/pow(rho_b[index],8.0/3.0);
                double t114868 = gamma_bb[index]*gamma_bb[index];
                double t114869 = gcaa*gcaa;
                double t114870 = t114869*t114869;
                double t114871 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t114872 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t114873 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t114874 = gamma_bb[index]*gcaa*t114867;
                double t114875 = t114874+1.0;
                double t114876 = gamma_bb[index]*gcaa*t114867*3.0;
                double t114877 = gamma_bb[index]*gcaa*t114873*t114868*t114869;
                double t114878 = t114872*t114868*t114869*3.0;
                double t114879 = t114876+t114877+t114878+1.0;
                double t114880 = t114868*t114868;
                double t114881 = gamma_bb[index]*gcaa*t114867*4.0;
                double t114882 = gamma_bb[index]*gcaa*t114873*t114868*t114869*4.0;
                double t114883 = t114872*t114868*t114869*6.0;
                double t114884 = t114870*t114871*t114880;
                double t114885 = t114881+t114882+t114883+t114884+1.0;
                double t114886 = gamma_bb[index]*gcaa*t114867*2.0;
                double t114887 = t114872*t114868*t114869;
                double t114888 = t114886+t114887+1.0;
                double t114889 = rho_a[index]+rho_b[index];
                double t114890 = 1.0/pow(t114889,1.0/3.0);
                double t114891 = c*t114890;
                double t114892 = sqrt(t114891);
                double t114893 = b1p*t114892;
                double t114894 = pow(t114891,3.0/2.0);
                double t114895 = b3p*t114894;
                double t114896 = 1.0/pow(t114889,2.0/3.0);
                double t114897 = b4p*t114853*t114896;
                double t114898 = b2p*c*t114890;
                double t114899 = t114893+t114895+t114897+t114898;
                double t114900 = 1.0/pow(t114889,4.0/3.0);
                double t114901 = two_13*2.0;
                double t114902 = t114901-2.0;
                double t114903 = 1.0/t114902;
                double t114904 = 1.0/c0f;
                double t114905 = 1.0/t114899;
                double t114906 = t114905*t114855*(1.0/2.0);
                double t114907 = t114906+1.0;
                double t114908 = a1p*c*t114890;
                double t114909 = t114908+1.0;
                double t114910 = rho_a[index]-rho_b[index];
                double t114911 = t114910*t114910;
                double t114912 = 1.0/t114889;
                double t114913 = t114910*t114912;
                double t114914 = b1f*t114892;
                double t114915 = b3f*t114894;
                double t114916 = b4f*t114853*t114896;
                double t114917 = b2f*c*t114890;
                double t114918 = t114914+t114915+t114916+t114917;
                double t114919 = 1.0/t114918;
                double t114920 = t114904*t114919*(1.0/2.0);
                double t114921 = t114920+1.0;
                double t114922 = log(t114921);
                double t114923 = a1f*c*t114890;
                double t114924 = t114923+1.0;
                double t114925 = log(t114907);
                double t114936 = c0f*t114922*t114924*2.0;
                double t114937 = c0p*t114925*t114909*2.0;
                double t114926 = t114936-t114937;
                double t114927 = t114913+1.0;
                double t114928 = pow(t114927,4.0/3.0);
                double t114929 = -t114913+1.0;
                double t114930 = pow(t114929,4.0/3.0);
                double t114931 = t114930+t114928-2.0;
                double t114932 = 1.0/(t114889*t114889);
                double t114933 = t114910*t114932;
                double t114934 = t114912+t114933;
                double t114935 = 1.0/(t114889*t114889*t114889*t114889);
                double t114938 = t114911*t114911;
                double t114939 = 1.0/pow(t114889,5.0/3.0);
                double t114940 = 1.0/sqrt(t114891);
                double t114941 = 1.0/t114907;
                double t114942 = 1.0/(t114899*t114899);
                double t114943 = b4p*t114853*t114939*(2.0/3.0);
                double t114944 = b2p*c*t114900*(1.0/3.0);
                double t114945 = b1p*c*t114900*t114940*(1.0/6.0);
                double t114946 = b3p*c*t114900*t114892*(1.0/2.0);
                double t114947 = t114943+t114944+t114945+t114946;
                double t114948 = 1.0/(t114889*t114889*t114889*t114889*t114889);
                double t114949 = 1.0/d2fz0;
                double t114950 = 1.0/Aa;
                double t114951 = b1a*t114892;
                double t114952 = b3a*t114894;
                double t114953 = b4a*t114853*t114896;
                double t114954 = b2a*c*t114890;
                double t114955 = t114951+t114952+t114953+t114954;
                double t114956 = 1.0/t114955;
                double t114957 = t114950*t114956*(1.0/2.0);
                double t114958 = t114957+1.0;
                double t114959 = log(t114958);
                double t114960 = a1a*c*t114890;
                double t114961 = t114960+1.0;
                double t114962 = pow(t114927,1.0/3.0);
                double t114963 = t114934*t114962*(4.0/3.0);
                double t114964 = pow(t114929,1.0/3.0);
                double t114965 = t114963-t114934*t114964*(4.0/3.0);
                double t114966 = t114935*t114938;
                double t114967 = t114966-1.0;
                double t114968 = pow(2.0,1.0/3.0);
                double t114969 = t114968*2.0;
                double t114970 = t114969-2.0;
                double t114971 = a1f*c*t114849;
                double t114972 = t114971+1.0;
                double t114973 = b1f*t114851;
                double t114974 = b3f*t114852;
                double t114975 = b4f*t114853*t114854;
                double t114976 = b2f*c*t114849;
                double t114977 = t114973+t114974+t114975+t114976;
                double t114978 = 1.0/t114977;
                double t114979 = t114904*t114978*(1.0/2.0);
                double t114980 = t114979+1.0;
                double t114981 = 1.0/pow(rho_b[index],4.0/3.0);
                double t114982 = 1.0/pow(rho_b[index],5.0/3.0);
                double t114983 = 1.0/sqrt(t114850);
                double t114984 = log(t114980);
                double t114985 = 1.0/t114863;
                double t114986 = 1.0/(t114860*t114860);
                double t114987 = b4p*t114853*t114982*(2.0/3.0);
                double t114988 = b2p*c*t114981*(1.0/3.0);
                double t114989 = b1p*c*t114981*t114983*(1.0/6.0);
                double t114990 = b3p*c*t114851*t114981*(1.0/2.0);
                double t114991 = t114990+t114987+t114988+t114989;
                double t114992 = t114991*t114866*t114985*t114986;
                double t114993 = c0f*t114972*t114984*2.0;
                double t114994 = c0p*t114864*t114866*2.0;
                double t114995 = 1.0/pow(rho_a[index],8.0/3.0);
                double t114996 = gamma_aa[index]*t114995*(1.0/2.0);
                double t114997 = gamma_bb[index]*t114867*(1.0/2.0);
                double t114998 = t114996+t114997;
                double t114999 = gcab*t114998;
                double t115000 = t114999+1.0;
                double t115001 = gcab*gcab;
                double t115002 = t114998*t114998;
                double t115003 = t115001*t115001;
                double t115004 = t115002*t115002;
                double t115005 = t115001*t115002;
                double t115006 = gcab*t114998*2.0;
                double t115007 = t115005+t115006+1.0;
                double t115008 = t115001*t115002*3.0;
                double t115009 = gcab*t115001*t115002*t114998;
                double t115010 = gcab*t114998*3.0;
                double t115011 = t115010+t115008+t115009+1.0;
                double t115012 = t115001*t115002*6.0;
                double t115013 = gcab*t115001*t115002*t114998*4.0;
                double t115014 = t115003*t115004;
                double t115015 = gcab*t114998*4.0;
                double t115016 = t115012+t115013+t115014+t115015+1.0;
                double t115017 = a1p*c*c0p*t114900*t114925*(2.0/3.0);
                double t115018 = 1.0/pow(rho_a[index],1.0/3.0);
                double t115019 = c*t115018;
                double t115020 = sqrt(t115019);
                double t115021 = pow(t115019,3.0/2.0);
                double t115022 = 1.0/pow(rho_a[index],2.0/3.0);
                double t115023 = b1p*t115020;
                double t115024 = b3p*t115021;
                double t115025 = b4p*t115022*t114853;
                double t115026 = b2p*c*t115018;
                double t115027 = t115023+t115024+t115025+t115026;
                double t115028 = 1.0/t115027;
                double t115029 = t115028*t114855*(1.0/2.0);
                double t115030 = t115029+1.0;
                double t115031 = log(t115030);
                double t115032 = a1p*c*t115018;
                double t115033 = t115032+1.0;
                double t115034 = c0p*t115031*t115033*2.0;
                double t115035 = t114993-t114994;
                double t115036 = t114903*t114931*t114926*t114935*t114938;
                double t115037 = Aa*t114903*t114931*t114961*t114949*t114967*t114959*2.0;
                double t115038 = 1.0/t115000;
                double t115039 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t115040 = 1.0/(t115000*t115000);
                double t115041 = 1.0/t115007;
                double t115042 = 1.0/(t115011*t115011);
                double t115043 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t115044 = 1.0/(t115007*t115007);
                double t115045 = 1.0/t115011;
                double t115046 = 1.0/t115016;
                double t115047 = 1.0/(t115016*t115016);
                double t115048 = gcab*t114867*2.0;
                double t115049 = t115001*t114867*t114998*6.0;
                double t115050 = gcab*t115001*t115002*t114867*6.0;
                double t115051 = t115002*t115003*t114867*t114998*2.0;
                double t115052 = t115050+t115051+t115048+t115049;
                double t115053 = gamma_bb[index]*gcab*t115039*(8.0/3.0);
                double t115054 = gamma_bb[index]*t115001*t115039*t114998*(8.0/3.0);
                double t115055 = t115053+t115054;
                double t115056 = gcab*t114867;
                double t115057 = t115001*t114867*t114998;
                double t115058 = t115056+t115057;
                double t115059 = gamma_bb[index]*gcab*t115039*(1.6E1/3.0);
                double t115060 = gamma_bb[index]*gcab*t115001*t115002*t115039*1.6E1;
                double t115061 = gamma_bb[index]*t115002*t115003*t115039*t114998*(1.6E1/3.0);
                double t115062 = gamma_bb[index]*t115001*t115039*t114998*1.6E1;
                double t115063 = t115060+t115061+t115062+t115059;
                double t115064 = gcab*t114867*(3.0/2.0);
                double t115065 = t115001*t114867*t114998*3.0;
                double t115066 = gcab*t115001*t115002*t114867*(3.0/2.0);
                double t115067 = t115064+t115065+t115066;
                double t115068 = gamma_bb[index]*gcab*t115039*4.0;
                double t115069 = gamma_bb[index]*gcab*t115001*t115002*t115039*4.0;
                double t115070 = gamma_bb[index]*t115001*t115039*t114998*8.0;
                double t115071 = t115070+t115068+t115069;
                double t115072 = t115035*t114903*t114970;
                double t115073 = t115072+t114994;
                double t115074 = 1.0/t114875;
                double t115075 = 1.0/t114885;
                double t115076 = 1.0/t114888;
                double t115077 = 1.0/t114879;
                double t115078 = 1.0/(t114875*t114875);
                double t115079 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t115080 = 1.0/(t114879*t114879);
                double t115081 = 1.0/(t114888*t114888);
                double t115082 = gcaa*t114867*3.0;
                double t115083 = gamma_bb[index]*t114872*t114869*6.0;
                double t115084 = gcaa*t114873*t114868*t114869*3.0;
                double t115085 = t115082+t115083+t115084;
                double t115086 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t115087 = 1.0/(t114885*t114885);
                double t115088 = gcaa*t114867*4.0;
                double t115089 = gamma_bb[index]*t114872*t114869*1.2E1;
                double t115090 = gcaa*t114873*t114868*t114869*1.2E1;
                double t115091 = gamma_bb[index]*t114870*t114871*t114868*4.0;
                double t115092 = t115090+t115091+t115088+t115089;
                double t115093 = gcaa*t114867*2.0;
                double t115094 = gamma_bb[index]*t114872*t114869*2.0;
                double t115095 = t115093+t115094;
                double t115096 = gamma_bb[index]*gcaa*t115039*(1.6E1/3.0);
                double t115097 = t115043*t114868*t114869*(1.6E1/3.0);
                double t115098 = t115096+t115097;
                double t115099 = gamma_bb[index]*gcaa*t115039*8.0;
                double t115100 = gamma_bb[index]*gcaa*t115079*t114868*t114869*8.0;
                double t115101 = t115043*t114868*t114869*1.6E1;
                double t115102 = t115100+t115101+t115099;
                double t115103 = gamma_bb[index]*gcaa*t115039*(3.2E1/3.0);
                double t115104 = gamma_bb[index]*gcaa*t115079*t114868*t114869*3.2E1;
                double t115105 = t115043*t114868*t114869*3.2E1;
                double t115106 = t114870*t115086*t114880*(3.2E1/3.0);
                double t115107 = t115103+t115104+t115105+t115106;
                double t115108 = 1.0/t114980;
                double t115109 = 1.0/(t114977*t114977);
                double t115110 = b4f*t114853*t114982*(2.0/3.0);
                double t115111 = b2f*c*t114981*(1.0/3.0);
                double t115112 = b1f*c*t114981*t114983*(1.0/6.0);
                double t115113 = b3f*c*t114851*t114981*(1.0/2.0);
                double t115114 = t115110+t115111+t115112+t115113;
                double t115115 = a1f*c*c0f*t114981*t114984*(2.0/3.0);
                double t115116 = a1p*c*c0p*t114864*t114981*(2.0/3.0);
                double t115117 = ccaa1*gcaa*t115074*t114867;
                double t115118 = ccaa4*gamma_bb[index]*t115075*t114870*t114871*t114868*4.0;
                double t115119 = ccaa2*gamma_bb[index]*t115076*t114872*t114869*2.0;
                double t115120 = ccaa3*gcaa*t115077*t114873*t114868*t114869*3.0;
                double t115121 = t115120+t115117+t115118+t115119-ccaa1*gamma_bb[index]*t115078*t114872*t114869-ccaa4* \
                   t115092*t114870*t114871*t114880*t115087-ccaa2*t115081*t115095*t114872*t114868*t114869-ccaa3*gamma_bb[index]* \
                   gcaa*t115080*t115085*t114873*t114868*t114869;
                double t115122 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t115123 = 1.0/(omega*omega);
                double t115124 = pow(t115122,2.0/3.0);
                double t115127 = t115123*t115124;
                double t115125 = exp(-t115127);
                double t115126 = 1.0/pow(t115122,1.0/3.0);
                double t115128 = omega*omega;
                double t115129 = t115125-1.0;
                double t115130 = 1.0/pow(t115122,2.0/3.0);
                double t115131 = 1.0/pow(t115122,4.0/3.0);
                double t115132 = 1.0/omega;
                double t115154 = t115130*t115128*t115129*(1.0/2.0);
                double t115133 = t115125-t115154;
                double t115134 = gx*gx;
                double t115135 = t115134*t115134;
                double t115136 = gamma_bb[index]*gx*t114867;
                double t115137 = t115136+1.0;
                double t115138 = gamma_bb[index]*gx*t114867*3.0;
                double t115139 = gamma_bb[index]*gx*t115134*t114873*t114868;
                double t115140 = t115134*t114872*t114868*3.0;
                double t115141 = t115140+t115138+t115139+1.0;
                double t115142 = gamma_bb[index]*gx*t114867*4.0;
                double t115143 = gamma_bb[index]*gx*t115134*t114873*t114868*4.0;
                double t115144 = t115134*t114872*t114868*6.0;
                double t115145 = t115135*t114871*t114880;
                double t115146 = t115142+t115143+t115144+t115145+1.0;
                double t115147 = gamma_bb[index]*gx*t114867*2.0;
                double t115148 = t115134*t114872*t114868;
                double t115149 = t115147+t115148+1.0;
                double t115150 = pow(t115122,1.0/3.0);
                double t115151 = t115132*t115150;
                double t115152 = erf(t115151);
                double t115153 = t115152*(3.991211251234741E15/2.251799813685248E15);
                double t115155 = omega*t115133*t115126;
                double t115156 = t115153+t115155;
                double t115157 = 1.0/t115137;
                double t115158 = cx1*gx*t115157*t114867;
                double t115159 = 1.0/t115146;
                double t115160 = cx4*gamma_bb[index]*t115135*t114871*t115159*t114868*4.0;
                double t115161 = 1.0/t115149;
                double t115162 = cx2*gamma_bb[index]*t115134*t115161*t114872*2.0;
                double t115163 = 1.0/t115141;
                double t115164 = cx3*gx*t115134*t115163*t114873*t114868*3.0;
                double t115165 = 1.0/(t115137*t115137);
                double t115166 = gx*t114867*3.0;
                double t115167 = gamma_bb[index]*t115134*t114872*6.0;
                double t115168 = gx*t115134*t114873*t114868*3.0;
                double t115169 = t115166+t115167+t115168;
                double t115170 = 1.0/(t115141*t115141);
                double t115171 = gx*t114867*4.0;
                double t115172 = gamma_bb[index]*t115134*t114872*1.2E1;
                double t115173 = gx*t115134*t114873*t114868*1.2E1;
                double t115174 = gamma_bb[index]*t115135*t114871*t114868*4.0;
                double t115175 = t115171+t115172+t115173+t115174;
                double t115176 = 1.0/(t115146*t115146);
                double t115177 = gx*t114867*2.0;
                double t115178 = gamma_bb[index]*t115134*t114872*2.0;
                double t115179 = t115177+t115178;
                double t115180 = 1.0/(t115149*t115149);
                double t115181 = t115160+t115162+t115164+t115158-cx1*gamma_bb[index]*t115134*t115165*t114872-cx2* \
                   t115134*t115180*t114872*t115179*t114868-cx4*t115135*t115175*t115176*t114871*t114880-cx3*gamma_bb[index]* \
                   gx*t115134*t115170*t115169*t114873*t114868;
                double t115182 = pow(rho_b[index],4.0/3.0);
                double t115183 = omega*t115126*t115156*(4.0/3.0);
                double t115184 = t115183-1.0;
                double t115185 = gamma_bb[index]*gx*t115039*(1.6E1/3.0);
                double t115186 = t115043*t115134*t114868*(1.6E1/3.0);
                double t115187 = t115185+t115186;
                double t115188 = gamma_bb[index]*gx*t115039*8.0;
                double t115189 = gamma_bb[index]*gx*t115134*t115079*t114868*8.0;
                double t115190 = t115043*t115134*t114868*1.6E1;
                double t115191 = t115190+t115188+t115189;
                double t115192 = gamma_bb[index]*gx*t115039*(3.2E1/3.0);
                double t115193 = gamma_bb[index]*gx*t115134*t115079*t114868*3.2E1;
                double t115194 = t115043*t115134*t114868*3.2E1;
                double t115195 = t115135*t115086*t114880*(3.2E1/3.0);
                double t115196 = t115192+t115193+t115194+t115195;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t115073+rho_a[index]*(t115034-t114903*t114970*(t115034- \
                   c0f*log((t114904*(1.0/2.0))/(b1f*t115020+b3f*t115021+b2f*c*t115018+b4f*t115022*t114853)+1.0)*(a1f* \
                   c*t115018+1.0)*2.0))-t114889*(t115036+t115037+t114937))*(ccab1*gcab*t115038*t115039*(4.0/3.0)-ccab2* \
                   t115001*t115002*t115044*(gcab*t115039*(8.0/3.0)+gamma_bb[index]*t115001*t115043*(4.0/3.0)+t115001* \
                   t115039*t114998*(8.0/3.0))-ccab4*t115003*t115004*t115047*(gcab*t115039*(1.6E1/3.0)+gamma_bb[index]* \
                   t115001*t115043*8.0+t115001*t115039*t114998*1.6E1+gamma_bb[index]*t115002*t115003*t115043*8.0+gcab* \
                   t115001*t115002*t115039*1.6E1+t115002*t115003*t115039*t114998*(1.6E1/3.0)+gamma_bb[index]*gcab*t115001* \
                   t115043*t114998*1.6E1)-ccab1*gamma_bb[index]*t115001*t115040*t115043*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t115001*t115041*t115043*(4.0/3.0)-ccab1*t115001*t115040*t115039*t114998*(4.0/3.0)+ccab2*t115001*t115041* \
                   t115039*t114998*(8.0/3.0)+ccab4*t115002*t115003*t115046*t115039*t114998*(1.6E1/3.0)-ccab2*t115001* \
                   t115044*t115055*t114867*t114998+ccab4*t115003*t115004*1.0/(t115016*t115016*t115016)*t115052*t115063* \
                   2.0+ccab2*t115001*t115002*1.0/(t115007*t115007*t115007)*t115055*t115058*2.0+ccab4*gamma_bb[index]* \
                   t115002*t115003*t115043*t115046*8.0+ccab3*gcab*t115001*t115002*t115045*t115039*4.0+ccab3*gamma_bb[index]* \
                   gcab*t115001*t115043*t115045*t114998*4.0-ccab2*gamma_bb[index]*t115001*t115044*t115039*t115058*t114998* \
                   (8.0/3.0)-ccab3*gcab*t115001*t115002*t115042*t115071*t114867*(3.0/2.0)-ccab4*t115002*t115003*t115063* \
                   t115047*t114867*t114998*2.0-ccab3*gcab*t115001*t115002*t115042*t114998*(gcab*t115039*4.0+gamma_bb[index]* \
                   t115001*t115043*4.0+t115001*t115039*t114998*8.0+gcab*t115001*t115002*t115039*4.0+gamma_bb[index]*gcab* \
                   t115001*t115043*t114998*4.0)+ccab1*gamma_bb[index]*gcab*1.0/(t115000*t115000*t115000)*t115001*t115043* \
                   t114998*(4.0/3.0)+ccab3*gcab*t115001*t115002*1.0/(t115011*t115011*t115011)*t115071*t115067*t114998* \
                   2.0-ccab3*gamma_bb[index]*gcab*t115001*t115002*t115042*t115039*t115067*4.0-ccab4*gamma_bb[index]*t115002* \
                   t115003*t115052*t115047*t115039*t114998*(1.6E1/3.0))-(t115036+t115037+t114937-t114994+rho_b[index]* \
                   (t115116-t114992+t114903*t114970*(t115115+t114992-t115114*t115108*t115109*t114972-a1p*c*c0p*t114864* \
                   t114981*(2.0/3.0)))-t114889*(t115017-t114941*t114942*t114909*t114947+t114903*t114931*t114926*t114938* \
                   t114948*4.0+t114903*t114926*t114935*t114938*t114965-t114903*t114931*t114935*t114938*(t115017-t114941* \
                   t114942*t114909*t114947+(t114924*1.0/(t114918*t114918)*(b2f*c*t114900*(1.0/3.0)+b4f*t114853*t114939* \
                   (2.0/3.0)+b1f*c*t114900*t114940*(1.0/6.0)+b3f*c*t114900*t114892*(1.0/2.0)))/t114921-a1f*c*c0f*t114900* \
                   t114922*(2.0/3.0))+t114910*t114911*t114903*t114931*t114926*t114935*4.0+Aa*t114903*t114931*t114961* \
                   t114949*t114959*(t114938*t114948*4.0+t114910*t114911*t114935*4.0)*2.0+Aa*t114903*t114961*t114965*t114949* \
                   t114967*t114959*2.0-(t114903*t114931*t114961*1.0/(t114955*t114955)*t114949*t114967*(b2a*c*t114900* \
                   (1.0/3.0)+b4a*t114853*t114939*(2.0/3.0)+b1a*c*t114900*t114940*(1.0/6.0)+b3a*c*t114900*t114892*(1.0/ \
                   2.0)))/t114958+Aa*a1a*c*t114900*t114903*t114931*t114949*t114967*t114959*(2.0/3.0))-t115035*t114903* \
                   t114970)*(ccab1*gcab*t115038*t114867*(1.0/2.0)-ccab2*t115001*t115002*t115044*t115058-ccab4*t115003* \
                   t115004*t115052*t115047-ccab1*t115001*t115040*t114867*t114998*(1.0/2.0)+ccab2*t115001*t115041*t114867* \
                   t114998+ccab4*t115002*t115003*t115046*t114867*t114998*2.0+ccab3*gcab*t115001*t115002*t115045*t114867* \
                   (3.0/2.0)-ccab3*gcab*t115001*t115002*t115042*t115067*t114998)-t115121*(t114994+t114903*t114970*(t114993- \
                   c0p*t114864*t114866*2.0))-rho_b[index]*t115073*(ccaa1*gcaa*t115074*t115039*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t115043*t115076*t114869*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t115043*t115078*t114869*8.0+ccaa4*t115092* \
                   t114870*t115086*t114880*t115087*(3.2E1/3.0)+ccaa2*t115043*t115081*t115095*t114868*t114869*(1.6E1/3.0) \
                   +ccaa4*t114870*t114871*t114880*t115087*(gcaa*t115039*(3.2E1/3.0)+gamma_bb[index]*t115043*t114869*6.4E1+ \
                   gamma_bb[index]*t114870*t115086*t114868*(1.28E2/3.0)+gcaa*t115079*t114868*t114869*9.6E1)-ccaa1*gcaa* \
                   t115079*1.0/(t114875*t114875*t114875)*t114868*t114869*(1.6E1/3.0)+ccaa2*t115081*t114872*t114868*t114869* \
                   (gcaa*t115039*(1.6E1/3.0)+gamma_bb[index]*t115043*t114869*(3.2E1/3.0))-ccaa4*gamma_bb[index]*t115075* \
                   t114870*t115086*t114868*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t115081*t114872*t115098*t114869*2.0-ccaa3* \
                   gcaa*t115077*t115079*t114868*t114869*2.4E1+ccaa4*gamma_bb[index]*t115107*t114870*t114871*t115087*t114868* \
                   4.0+ccaa3*gcaa*t115102*t115080*t114873*t114868*t114869*3.0-ccaa4*t115107*t115092*t114870*t114871*t114880* \
                   1.0/(t114885*t114885*t114885)*2.0-ccaa2*t115095*t114872*t115098*t114868*t114869*1.0/(t114888*t114888* \
                   t114888)*2.0+ccaa3*gamma_bb[index]*gcaa*t115080*t114873*t114868*t114869*(gcaa*t115039*8.0+gamma_bb[index]* \
                   t115043*t114869*3.2E1+gcaa*t115079*t114868*t114869*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t115080*t115085* \
                   t115079*t114868*t114869*8.0-ccaa3*gamma_bb[index]*gcaa*t115102*t115085*t114873*t114868*t114869*1.0/ \
                   (t114879*t114879*t114879)*2.0)+rho_b[index]*t115121*(t115116-t114992+t114903*t114970*(t115115-t115116+ \
                   t114992-t115114*t115108*t115109*t114972))-c0*t115181*t115182*(omega*t115126*(omega*t115131*t115133* \
                   (-2.778046668940015E15/1.40737488355328E14)+omega*t115126*((t115125*(1.0/3.0))/rho_b[index]+1.0/pow(t115122,5.0/ \
                   3.0)*t115128*t115129*(2.778046668940015E15/1.40737488355328E14)-t115123*t115125*t115126*(2.778046668940015E15/ \
                   7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t115130*t115132*t115125*(1.108777112152858E31/1.584563250285287E29) \
                   )*(4.0/3.0)-omega*t115131*t115156*(2.778046668940015E15/1.05553116266496E14))-c0*t115182*t115184*(cx1* \
                   gx*t115039*t115157*(-8.0/3.0)+cx1*gamma_bb[index]*t115043*t115134*t115165*8.0-cx2*gamma_bb[index]* \
                   t115043*t115134*t115161*(3.2E1/3.0)+cx2*t115043*t115134*t115180*t115179*t114868*(1.6E1/3.0)+cx4*t115135* \
                   t115175*t115086*t115176*t114880*(3.2E1/3.0)+cx4*t115135*t115176*t114871*t114880*(gx*t115039*(3.2E1/ \
                   3.0)+gamma_bb[index]*t115043*t115134*6.4E1+gamma_bb[index]*t115135*t115086*t114868*(1.28E2/3.0)+gx* \
                   t115134*t115079*t114868*9.6E1)-cx1*gx*t115134*1.0/(t115137*t115137*t115137)*t115079*t114868*(1.6E1/ \
                   3.0)+cx2*t115134*t115180*t114872*t114868*(gx*t115039*(1.6E1/3.0)+gamma_bb[index]*t115043*t115134*(3.2E1/ \
                   3.0))+cx2*gamma_bb[index]*t115134*t115180*t114872*t115187*2.0-cx4*gamma_bb[index]*t115135*t115086* \
                   t115159*t114868*(1.28E2/3.0)-cx3*gx*t115134*t115163*t115079*t114868*2.4E1+cx4*gamma_bb[index]*t115135* \
                   t115176*t114871*t115196*t114868*4.0+cx3*gx*t115134*t115170*t115191*t114873*t114868*3.0-cx2*t115134* \
                   1.0/(t115149*t115149*t115149)*t114872*t115187*t115179*t114868*2.0-cx4*t115135*1.0/(t115146*t115146* \
                   t115146)*t115175*t114871*t114880*t115196*2.0+cx3*gamma_bb[index]*gx*t115134*t115170*t114873*t114868* \
                   (gx*t115039*8.0+gamma_bb[index]*t115043*t115134*3.2E1+gx*t115134*t115079*t114868*2.4E1)+cx3*gamma_bb[index]* \
                   gx*t115134*t115170*t115079*t115169*t114868*8.0-cx3*gamma_bb[index]*gx*1.0/(t115141*t115141*t115141) \
                   *t115134*t115191*t115169*t114873*t114868*2.0)-c0*pow(rho_b[index],1.0/3.0)*t115181*t115184*(4.0/3.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t116185 = 1.0/pow(rho_b[index],1.0/3.0);
                double t116186 = c*t116185;
                double t116187 = sqrt(t116186);
                double t116188 = pow(t116186,3.0/2.0);
                double t116189 = c*c;
                double t116190 = 1.0/pow(rho_b[index],2.0/3.0);
                double t116191 = 1.0/c0p;
                double t116192 = b1p*t116187;
                double t116193 = b3p*t116188;
                double t116194 = b4p*t116190*t116189;
                double t116195 = b2p*c*t116185;
                double t116196 = t116192+t116193+t116194+t116195;
                double t116197 = 1.0/t116196;
                double t116198 = t116191*t116197*(1.0/2.0);
                double t116199 = t116198+1.0;
                double t116200 = log(t116199);
                double t116201 = a1p*c*t116185;
                double t116202 = t116201+1.0;
                double t116203 = 1.0/pow(rho_b[index],8.0/3.0);
                double t116204 = gamma_bb[index]*gamma_bb[index];
                double t116205 = gcaa*gcaa;
                double t116206 = t116205*t116205;
                double t116207 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t116208 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t116209 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t116210 = gamma_bb[index]*gcaa*t116203;
                double t116211 = t116210+1.0;
                double t116212 = gamma_bb[index]*gcaa*t116203*3.0;
                double t116213 = gamma_bb[index]*gcaa*t116204*t116205*t116209;
                double t116214 = t116204*t116205*t116208*3.0;
                double t116215 = t116212+t116213+t116214+1.0;
                double t116216 = t116204*t116204;
                double t116217 = gamma_bb[index]*gcaa*t116203*4.0;
                double t116218 = gamma_bb[index]*gcaa*t116204*t116205*t116209*4.0;
                double t116219 = t116204*t116205*t116208*6.0;
                double t116220 = t116206*t116207*t116216;
                double t116221 = t116220+t116217+t116218+t116219+1.0;
                double t116222 = gamma_bb[index]*gcaa*t116203*2.0;
                double t116223 = t116204*t116205*t116208;
                double t116224 = t116222+t116223+1.0;
                double t116225 = pow(2.0,1.0/3.0);
                double t116226 = t116225*2.0;
                double t116227 = t116226-2.0;
                double t116228 = two_13*2.0;
                double t116229 = t116228-2.0;
                double t116230 = 1.0/t116229;
                double t116231 = 1.0/c0f;
                double t116232 = b1f*t116187;
                double t116233 = b3f*t116188;
                double t116234 = b4f*t116190*t116189;
                double t116235 = b2f*c*t116185;
                double t116236 = t116232+t116233+t116234+t116235;
                double t116237 = 1.0/t116236;
                double t116238 = t116231*t116237*(1.0/2.0);
                double t116239 = t116238+1.0;
                double t116240 = log(t116239);
                double t116241 = a1f*c*t116185;
                double t116242 = t116241+1.0;
                double t116243 = c0f*t116240*t116242*2.0;
                double t116244 = c0p*t116200*t116202*2.0;
                double t116245 = 1.0/t116211;
                double t116246 = 1.0/t116221;
                double t116247 = 1.0/t116224;
                double t116248 = 1.0/t116215;
                double t116249 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t116250 = 1.0/(t116211*t116211);
                double t116251 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t116252 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t116253 = 1.0/(t116215*t116215);
                double t116254 = 1.0/(t116224*t116224);
                double t116255 = gcaa*t116203*3.0;
                double t116256 = gamma_bb[index]*t116205*t116208*6.0;
                double t116257 = gcaa*t116204*t116205*t116209*3.0;
                double t116258 = t116255+t116256+t116257;
                double t116259 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t116260 = 1.0/(t116221*t116221);
                double t116261 = gcaa*t116203*4.0;
                double t116262 = gamma_bb[index]*t116205*t116208*1.2E1;
                double t116263 = gcaa*t116204*t116205*t116209*1.2E1;
                double t116264 = gamma_bb[index]*t116204*t116206*t116207*4.0;
                double t116265 = t116261+t116262+t116263+t116264;
                double t116266 = gcaa*t116203*2.0;
                double t116267 = gamma_bb[index]*t116205*t116208*2.0;
                double t116268 = t116266+t116267;
                double t116269 = gamma_bb[index]*gcaa*t116252*(1.6E1/3.0);
                double t116270 = t116204*t116205*t116249*(1.6E1/3.0);
                double t116271 = t116270+t116269;
                double t116272 = gamma_bb[index]*gcaa*t116252*8.0;
                double t116273 = gamma_bb[index]*gcaa*t116204*t116205*t116251*8.0;
                double t116274 = t116204*t116205*t116249*1.6E1;
                double t116275 = t116272+t116273+t116274;
                double t116276 = gamma_bb[index]*gcaa*t116252*(3.2E1/3.0);
                double t116277 = gamma_bb[index]*gcaa*t116204*t116205*t116251*3.2E1;
                double t116278 = t116204*t116205*t116249*3.2E1;
                double t116279 = t116206*t116216*t116259*(3.2E1/3.0);
                double t116280 = t116276+t116277+t116278+t116279;
                double t116281 = 1.0/pow(rho_b[index],4.0/3.0);
                double t116282 = 1.0/pow(rho_b[index],5.0/3.0);
                double t116283 = 1.0/sqrt(t116186);
                double t116284 = 1.0/t116199;
                double t116285 = 1.0/(t116196*t116196);
                double t116286 = b4p*t116282*t116189*(2.0/3.0);
                double t116287 = b2p*c*t116281*(1.0/3.0);
                double t116288 = b1p*c*t116281*t116283*(1.0/6.0);
                double t116289 = b3p*c*t116281*t116187*(1.0/2.0);
                double t116290 = t116286+t116287+t116288+t116289;
                double t116291 = t116202*t116290*t116284*t116285;
                double t116292 = ccaa1*gcaa*t116203*t116245;
                double t116293 = ccaa4*gamma_bb[index]*t116204*t116206*t116207*t116246*4.0;
                double t116294 = ccaa2*gamma_bb[index]*t116205*t116208*t116247*2.0;
                double t116295 = ccaa3*gcaa*t116204*t116205*t116209*t116248*3.0;
                double t116296 = t116292+t116293+t116294+t116295-ccaa1*gamma_bb[index]*t116205*t116250*t116208-ccaa4* \
                   t116206*t116260*t116207*t116216*t116265-ccaa2*t116204*t116205*t116208*t116254*t116268-ccaa3*gamma_bb[index]* \
                   gcaa*t116204*t116205*t116253*t116209*t116258;
                double t116297 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t116298 = 1.0/(omega*omega);
                double t116299 = pow(t116297,2.0/3.0);
                double t116302 = t116298*t116299;
                double t116300 = exp(-t116302);
                double t116301 = 1.0/pow(t116297,1.0/3.0);
                double t116303 = omega*omega;
                double t116304 = t116300-1.0;
                double t116305 = 1.0/pow(t116297,2.0/3.0);
                double t116306 = 1.0/pow(t116297,4.0/3.0);
                double t116307 = 1.0/omega;
                double t116329 = t116303*t116304*t116305*(1.0/2.0);
                double t116308 = t116300-t116329;
                double t116309 = gx*gx;
                double t116310 = t116309*t116309;
                double t116311 = gamma_bb[index]*gx*t116203;
                double t116312 = t116311+1.0;
                double t116313 = gamma_bb[index]*gx*t116203*3.0;
                double t116314 = gamma_bb[index]*gx*t116204*t116209*t116309;
                double t116315 = t116204*t116208*t116309*3.0;
                double t116316 = t116313+t116314+t116315+1.0;
                double t116317 = gamma_bb[index]*gx*t116203*4.0;
                double t116318 = gamma_bb[index]*gx*t116204*t116209*t116309*4.0;
                double t116319 = t116204*t116208*t116309*6.0;
                double t116320 = t116310*t116207*t116216;
                double t116321 = t116320+t116317+t116318+t116319+1.0;
                double t116322 = gamma_bb[index]*gx*t116203*2.0;
                double t116323 = t116204*t116208*t116309;
                double t116324 = t116322+t116323+1.0;
                double t116325 = pow(t116297,1.0/3.0);
                double t116326 = t116307*t116325;
                double t116327 = erf(t116326);
                double t116328 = t116327*(3.991211251234741E15/2.251799813685248E15);
                double t116330 = omega*t116301*t116308;
                double t116331 = t116330+t116328;
                double t116332 = 1.0/t116312;
                double t116333 = cx1*gx*t116203*t116332;
                double t116334 = 1.0/t116321;
                double t116335 = cx4*gamma_bb[index]*t116310*t116204*t116207*t116334*4.0;
                double t116336 = 1.0/t116324;
                double t116337 = cx2*gamma_bb[index]*t116208*t116309*t116336*2.0;
                double t116338 = 1.0/t116316;
                double t116339 = cx3*gx*t116204*t116209*t116309*t116338*3.0;
                double t116340 = 1.0/(t116312*t116312);
                double t116341 = gx*t116203*3.0;
                double t116342 = gamma_bb[index]*t116208*t116309*6.0;
                double t116343 = gx*t116204*t116209*t116309*3.0;
                double t116344 = t116341+t116342+t116343;
                double t116345 = 1.0/(t116316*t116316);
                double t116346 = gx*t116203*4.0;
                double t116347 = gamma_bb[index]*t116208*t116309*1.2E1;
                double t116348 = gx*t116204*t116209*t116309*1.2E1;
                double t116349 = gamma_bb[index]*t116310*t116204*t116207*4.0;
                double t116350 = t116346+t116347+t116348+t116349;
                double t116351 = 1.0/(t116321*t116321);
                double t116352 = gx*t116203*2.0;
                double t116353 = gamma_bb[index]*t116208*t116309*2.0;
                double t116354 = t116352+t116353;
                double t116355 = 1.0/(t116324*t116324);
                double t116356 = t116333+t116335+t116337+t116339-cx1*gamma_bb[index]*t116340*t116208*t116309-cx2* \
                   t116204*t116208*t116309*t116354*t116355-cx4*t116310*t116350*t116207*t116216*t116351-cx3*gamma_bb[index]* \
                   gx*t116204*t116209*t116344*t116309*t116345;
                double t116357 = pow(rho_b[index],4.0/3.0);
                double t116358 = omega*t116301*t116331*(4.0/3.0);
                double t116359 = t116358-1.0;
                double t116360 = gamma_bb[index]*gx*t116252*(1.6E1/3.0);
                double t116361 = t116204*t116309*t116249*(1.6E1/3.0);
                double t116362 = t116360+t116361;
                double t116363 = gamma_bb[index]*gx*t116252*8.0;
                double t116364 = gamma_bb[index]*gx*t116204*t116251*t116309*8.0;
                double t116365 = t116204*t116309*t116249*1.6E1;
                double t116366 = t116363+t116364+t116365;
                double t116367 = gamma_bb[index]*gx*t116252*(3.2E1/3.0);
                double t116368 = gamma_bb[index]*gx*t116204*t116251*t116309*3.2E1;
                double t116369 = t116204*t116309*t116249*3.2E1;
                double t116370 = t116310*t116216*t116259*(3.2E1/3.0);
                double t116371 = t116370+t116367+t116368+t116369;
                v_rho_b_gamma_bb_[index] = -t116296*(t116244+t116230*t116227*(t116243-c0p*t116200*t116202*2.0))+rho_b[index]* \
                   t116296*(-t116291+t116230*t116227*(t116291-(t116242*1.0/(t116236*t116236)*(b2f*c*t116281*(1.0/3.0) \
                   +b4f*t116282*t116189*(2.0/3.0)+b1f*c*t116281*t116283*(1.0/6.0)+b3f*c*t116281*t116187*(1.0/2.0)))/t116239+ \
                   a1f*c*c0f*t116240*t116281*(2.0/3.0)-a1p*c*c0p*t116200*t116281*(2.0/3.0))+a1p*c*c0p*t116200*t116281* \
                   (2.0/3.0))-rho_b[index]*(t116244+t116230*t116227*(t116243-t116244))*(ccaa1*gcaa*t116252*t116245*(- \
                   8.0/3.0)+ccaa1*gamma_bb[index]*t116205*t116250*t116249*8.0-ccaa2*gamma_bb[index]*t116205*t116247*t116249* \
                   (3.2E1/3.0)+ccaa2*t116204*t116205*t116254*t116249*t116268*(1.6E1/3.0)+ccaa4*t116206*t116260*t116216* \
                   t116265*t116259*(3.2E1/3.0)+ccaa4*t116206*t116260*t116207*t116216*(gcaa*t116252*(3.2E1/3.0)+gamma_bb[index]* \
                   t116205*t116249*6.4E1+gamma_bb[index]*t116204*t116206*t116259*(1.28E2/3.0)+gcaa*t116204*t116205*t116251* \
                   9.6E1)-ccaa1*gcaa*1.0/(t116211*t116211*t116211)*t116204*t116205*t116251*(1.6E1/3.0)+ccaa2*t116204* \
                   t116205*t116208*t116254*(gcaa*t116252*(1.6E1/3.0)+gamma_bb[index]*t116205*t116249*(3.2E1/3.0))+ccaa2* \
                   gamma_bb[index]*t116205*t116208*t116271*t116254*2.0-ccaa4*gamma_bb[index]*t116204*t116206*t116246* \
                   t116259*(1.28E2/3.0)-ccaa3*gcaa*t116204*t116205*t116251*t116248*2.4E1+ccaa4*gamma_bb[index]*t116204* \
                   t116206*t116260*t116207*t116280*4.0+ccaa3*gcaa*t116204*t116205*t116253*t116209*t116275*3.0-ccaa4*1.0/ \
                   (t116221*t116221*t116221)*t116206*t116207*t116216*t116280*t116265*2.0-ccaa2*t116204*t116205*1.0/(t116224* \
                   t116224*t116224)*t116208*t116271*t116268*2.0+ccaa3*gamma_bb[index]*gcaa*t116204*t116205*t116253*t116209* \
                   (gcaa*t116252*8.0+gamma_bb[index]*t116205*t116249*3.2E1+gcaa*t116204*t116205*t116251*2.4E1)+ccaa3* \
                   gamma_bb[index]*gcaa*t116204*t116205*t116251*t116253*t116258*8.0-ccaa3*gamma_bb[index]*gcaa*t116204* \
                   t116205*1.0/(t116215*t116215*t116215)*t116209*t116275*t116258*2.0)-c0*t116356*t116357*(omega*t116301* \
                   (omega*t116306*t116308*(-2.778046668940015E15/1.40737488355328E14)+omega*t116301*((t116300*(1.0/3.0) \
                   )/rho_b[index]+t116303*t116304*1.0/pow(t116297,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t116300*t116301*t116298*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t116300* \
                   t116305*t116307*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t116331*t116306*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t116357*t116359*(cx1*gx*t116332*t116252*(-8.0/3.0)+cx1*gamma_bb[index]*t116340* \
                   t116309*t116249*8.0-cx2*gamma_bb[index]*t116309*t116336*t116249*(3.2E1/3.0)+cx2*t116204*t116309*t116354* \
                   t116355*t116249*(1.6E1/3.0)+cx4*t116310*t116350*t116216*t116351*t116259*(3.2E1/3.0)+cx4*t116310*t116207* \
                   t116216*t116351*(gx*t116252*(3.2E1/3.0)+gamma_bb[index]*t116309*t116249*6.4E1+gamma_bb[index]*t116310* \
                   t116204*t116259*(1.28E2/3.0)+gx*t116204*t116251*t116309*9.6E1)-cx1*gx*t116204*1.0/(t116312*t116312* \
                   t116312)*t116251*t116309*(1.6E1/3.0)+cx2*t116204*t116208*t116309*t116355*(gx*t116252*(1.6E1/3.0)+gamma_bb[index]* \
                   t116309*t116249*(3.2E1/3.0))+cx2*gamma_bb[index]*t116208*t116362*t116309*t116355*2.0-cx4*gamma_bb[index]* \
                   t116310*t116204*t116334*t116259*(1.28E2/3.0)-cx3*gx*t116204*t116251*t116309*t116338*2.4E1+cx4*gamma_bb[index]* \
                   t116310*t116204*t116207*t116351*t116371*4.0+cx3*gx*t116204*t116209*t116309*t116345*t116366*3.0-cx2* \
                   t116204*1.0/(t116324*t116324*t116324)*t116208*t116362*t116309*t116354*2.0-cx4*t116310*1.0/(t116321* \
                   t116321*t116321)*t116350*t116207*t116216*t116371*2.0+cx3*gamma_bb[index]*gx*t116204*t116209*t116309* \
                   t116345*(gx*t116252*8.0+gamma_bb[index]*t116309*t116249*3.2E1+gx*t116204*t116251*t116309*2.4E1)+cx3* \
                   gamma_bb[index]*gx*t116204*t116251*t116344*t116309*t116345*8.0-cx3*gamma_bb[index]*gx*t116204*1.0/ \
                   (t116316*t116316*t116316)*t116209*t116344*t116309*t116366*2.0)-c0*pow(rho_b[index],1.0/3.0)*t116356* \
                   t116359*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t115198 = 1.0/pow(rho_a[index],1.0/3.0);
                double t115199 = c*t115198;
                double t115200 = sqrt(t115199);
                double t115201 = pow(t115199,3.0/2.0);
                double t115202 = c*c;
                double t115203 = 1.0/pow(rho_a[index],2.0/3.0);
                double t115204 = 1.0/c0p;
                double t115205 = b1p*t115200;
                double t115206 = b3p*t115201;
                double t115207 = b4p*t115202*t115203;
                double t115208 = b2p*c*t115198;
                double t115209 = t115205+t115206+t115207+t115208;
                double t115210 = 1.0/t115209;
                double t115211 = t115210*t115204*(1.0/2.0);
                double t115212 = t115211+1.0;
                double t115213 = log(t115212);
                double t115214 = a1p*c*t115198;
                double t115215 = t115214+1.0;
                double t115216 = pow(2.0,1.0/3.0);
                double t115217 = t115216*2.0;
                double t115218 = t115217-2.0;
                double t115219 = two_13*2.0;
                double t115220 = t115219-2.0;
                double t115221 = 1.0/t115220;
                double t115222 = 1.0/c0f;
                double t115223 = 1.0/pow(rho_b[index],1.0/3.0);
                double t115224 = c*t115223;
                double t115225 = sqrt(t115224);
                double t115226 = pow(t115224,3.0/2.0);
                double t115227 = 1.0/pow(rho_b[index],2.0/3.0);
                double t115228 = b1p*t115225;
                double t115229 = b3p*t115226;
                double t115230 = b4p*t115202*t115227;
                double t115231 = b2p*c*t115223;
                double t115232 = t115230+t115231+t115228+t115229;
                double t115233 = 1.0/t115232;
                double t115234 = t115204*t115233*(1.0/2.0);
                double t115235 = t115234+1.0;
                double t115236 = log(t115235);
                double t115237 = a1p*c*t115223;
                double t115238 = t115237+1.0;
                double t115239 = c0p*t115236*t115238*2.0;
                double t115240 = rho_a[index]+rho_b[index];
                double t115241 = 1.0/pow(t115240,1.0/3.0);
                double t115242 = c*t115241;
                double t115243 = sqrt(t115242);
                double t115244 = pow(t115242,3.0/2.0);
                double t115245 = 1.0/pow(t115240,2.0/3.0);
                double t115246 = b1p*t115243;
                double t115247 = b3p*t115244;
                double t115248 = b4p*t115202*t115245;
                double t115249 = b2p*c*t115241;
                double t115250 = t115246+t115247+t115248+t115249;
                double t115251 = 1.0/t115250;
                double t115252 = t115204*t115251*(1.0/2.0);
                double t115253 = t115252+1.0;
                double t115254 = log(t115253);
                double t115255 = a1p*c*t115241;
                double t115256 = t115255+1.0;
                double t115257 = c0p*t115254*t115256*2.0;
                double t115258 = rho_a[index]-rho_b[index];
                double t115259 = t115258*t115258;
                double t115260 = 1.0/t115240;
                double t115261 = t115260*t115258;
                double t115262 = 1.0/(t115240*t115240*t115240*t115240);
                double t115263 = t115259*t115259;
                double t115264 = t115261+1.0;
                double t115265 = pow(t115264,4.0/3.0);
                double t115266 = -t115261+1.0;
                double t115267 = pow(t115266,4.0/3.0);
                double t115268 = t115265+t115267-2.0;
                double t115269 = gcab*gcab;
                double t115270 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t115271 = 1.0/pow(rho_a[index],8.0/3.0);
                double t115272 = gamma_aa[index]*t115271*(1.0/2.0);
                double t115273 = 1.0/pow(rho_b[index],8.0/3.0);
                double t115274 = gamma_bb[index]*t115273*(1.0/2.0);
                double t115275 = t115272+t115274;
                double t115276 = gcab*t115275;
                double t115277 = t115276+1.0;
                double t115278 = t115275*t115275;
                double t115279 = t115269*t115278;
                double t115280 = gcab*t115275*2.0;
                double t115281 = t115280+t115279+1.0;
                double t115282 = t115269*t115269;
                double t115299 = gcab*t115271*2.0;
                double t115300 = t115271*t115275*t115269*6.0;
                double t115301 = gcab*t115271*t115269*t115278*6.0;
                double t115302 = t115271*t115282*t115275*t115278*2.0;
                double t115283 = t115300+t115301+t115302+t115299;
                double t115284 = t115278*t115278;
                double t115304 = gcab*t115271*(3.0/2.0);
                double t115305 = t115271*t115275*t115269*3.0;
                double t115306 = gcab*t115271*t115269*t115278*(3.0/2.0);
                double t115285 = t115304+t115305+t115306;
                double t115286 = t115269*t115278*3.0;
                double t115287 = gcab*t115275*t115269*t115278;
                double t115288 = gcab*t115275*3.0;
                double t115289 = t115286+t115287+t115288+1.0;
                double t115296 = gcab*t115271;
                double t115297 = t115271*t115275*t115269;
                double t115290 = t115296+t115297;
                double t115291 = t115269*t115278*6.0;
                double t115292 = gcab*t115275*t115269*t115278*4.0;
                double t115293 = t115282*t115284;
                double t115294 = gcab*t115275*4.0;
                double t115295 = t115291+t115292+t115293+t115294+1.0;
                double t115298 = 1.0/(t115281*t115281);
                double t115303 = 1.0/(t115295*t115295);
                double t115307 = 1.0/(t115289*t115289);
                double t115308 = c0p*t115213*t115215*2.0;
                double t115309 = b1f*t115200;
                double t115310 = b3f*t115201;
                double t115311 = b4f*t115202*t115203;
                double t115312 = b2f*c*t115198;
                double t115313 = t115310+t115311+t115312+t115309;
                double t115314 = 1.0/t115313;
                double t115315 = t115222*t115314*(1.0/2.0);
                double t115316 = t115315+1.0;
                double t115317 = log(t115316);
                double t115318 = a1f*c*t115198;
                double t115319 = t115318+1.0;
                double t115320 = t115308-c0f*t115317*t115319*2.0;
                double t115321 = t115308-t115221*t115320*t115218;
                double t115322 = gcaa*gcaa;
                double t115323 = gamma_aa[index]*gamma_aa[index];
                double t115324 = t115322*t115322;
                double t115325 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t115326 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t115327 = gamma_aa[index]*gcaa*t115271;
                double t115328 = t115327+1.0;
                double t115329 = gamma_aa[index]*gcaa*t115271*2.0;
                double t115330 = t115322*t115323*t115270;
                double t115331 = t115330+t115329+1.0;
                double t115332 = gamma_aa[index]*gcaa*t115271*3.0;
                double t115333 = gamma_aa[index]*gcaa*t115322*t115323*t115326;
                double t115334 = t115322*t115323*t115270*3.0;
                double t115335 = t115332+t115333+t115334+1.0;
                double t115336 = t115323*t115323;
                double t115352 = gcaa*t115271*4.0;
                double t115353 = gamma_aa[index]*t115322*t115270*1.2E1;
                double t115354 = gcaa*t115322*t115323*t115326*1.2E1;
                double t115355 = gamma_aa[index]*t115323*t115324*t115325*4.0;
                double t115337 = t115352+t115353+t115354+t115355;
                double t115338 = gamma_aa[index]*gcaa*t115271*4.0;
                double t115339 = gamma_aa[index]*gcaa*t115322*t115323*t115326*4.0;
                double t115340 = t115322*t115323*t115270*6.0;
                double t115341 = t115324*t115325*t115336;
                double t115342 = t115340+t115341+t115338+t115339+1.0;
                double t115345 = gcaa*t115271*2.0;
                double t115346 = gamma_aa[index]*t115322*t115270*2.0;
                double t115343 = t115345+t115346;
                double t115344 = 1.0/(t115335*t115335);
                double t115347 = 1.0/(t115331*t115331);
                double t115348 = gcaa*t115271*3.0;
                double t115349 = gamma_aa[index]*t115322*t115270*6.0;
                double t115350 = gcaa*t115322*t115323*t115326*3.0;
                double t115351 = t115350+t115348+t115349;
                double t115356 = 1.0/(t115342*t115342);
                double t115357 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t115358 = 1.0/pow(t115357,1.0/3.0);
                double t115359 = 1.0/(omega*omega);
                double t115360 = pow(t115357,2.0/3.0);
                double t115361 = exp(-t115360*t115359);
                double t115362 = gx*gx;
                double t115363 = t115362*t115362;
                double t115364 = gamma_aa[index]*gx*t115271;
                double t115365 = t115364+1.0;
                double t115366 = gamma_aa[index]*gx*t115271*2.0;
                double t115367 = t115323*t115270*t115362;
                double t115368 = t115366+t115367+1.0;
                double t115369 = gamma_aa[index]*gx*t115271*3.0;
                double t115370 = gamma_aa[index]*gx*t115323*t115326*t115362;
                double t115371 = t115323*t115270*t115362*3.0;
                double t115372 = t115370+t115371+t115369+1.0;
                double t115388 = gx*t115271*4.0;
                double t115389 = gamma_aa[index]*t115270*t115362*1.2E1;
                double t115390 = gx*t115323*t115326*t115362*1.2E1;
                double t115391 = gamma_aa[index]*t115323*t115325*t115363*4.0;
                double t115373 = t115390+t115391+t115388+t115389;
                double t115374 = gamma_aa[index]*gx*t115271*4.0;
                double t115375 = gamma_aa[index]*gx*t115323*t115326*t115362*4.0;
                double t115376 = t115323*t115270*t115362*6.0;
                double t115377 = t115325*t115336*t115363;
                double t115378 = t115374+t115375+t115376+t115377+1.0;
                double t115381 = gx*t115271*2.0;
                double t115382 = gamma_aa[index]*t115270*t115362*2.0;
                double t115379 = t115381+t115382;
                double t115380 = 1.0/(t115372*t115372);
                double t115383 = 1.0/(t115368*t115368);
                double t115384 = gx*t115271*3.0;
                double t115385 = gamma_aa[index]*t115270*t115362*6.0;
                double t115386 = gx*t115323*t115326*t115362*3.0;
                double t115387 = t115384+t115385+t115386;
                double t115392 = 1.0/(t115378*t115378);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t115321+rho_b[index]*(t115239-t115221*t115218*(t115239- \
                   c0f*log((t115222*(1.0/2.0))/(b1f*t115225+b3f*t115226+b2f*c*t115223+b4f*t115202*t115227)+1.0)*(a1f* \
                   c*t115223+1.0)*2.0))-t115240*(t115257-t115221*t115262*t115263*t115268*(t115257-c0f*log((t115222*(1.0/ \
                   2.0))/(b1f*t115243+b3f*t115244+b2f*c*t115241+b4f*t115202*t115245)+1.0)*(a1f*c*t115241+1.0)*2.0)+(Aa* \
                   t115221*t115268*log((1.0/2.0)/(Aa*(b1a*t115243+b3a*t115244+b2a*c*t115241+b4a*t115202*t115245))+1.0) \
                   *(t115262*t115263-1.0)*(a1a*c*t115241+1.0)*2.0)/d2fz0))*((ccab2*t115270*t115269*(1.0/2.0))/t115281- \
                   ccab1*t115270*1.0/(t115277*t115277)*t115269*(1.0/2.0)+ccab2*1.0/(t115281*t115281*t115281)*(t115290* \
                   t115290)*t115269*t115278*2.0+ccab4*t115282*(t115283*t115283)*t115284*1.0/(t115295*t115295*t115295) \
                   *2.0-ccab2*t115270*t115282*t115278*t115298*(1.0/2.0)-ccab4*t115303*t115282*t115284*(t115270*t115269* \
                   3.0+t115270*t115282*t115278*3.0+gcab*t115270*t115275*t115269*6.0)+(ccab4*t115270*t115282*t115278*3.0) \
                   /t115295-ccab2*t115271*t115290*t115275*t115269*t115298*2.0+ccab1*gcab*t115270*t115275*1.0/(t115277* \
                   t115277*t115277)*t115269*(1.0/2.0)+(ccab3*gcab*t115270*t115275*t115269*(3.0/2.0))/t115289+ccab3*gcab* \
                   t115275*(t115285*t115285)*t115269*t115278*1.0/(t115289*t115289*t115289)*2.0-ccab3*gcab*t115271*t115307* \
                   t115285*t115269*t115278*3.0-ccab4*t115303*t115271*t115282*t115283*t115275*t115278*4.0-ccab3*gcab*t115307* \
                   t115275*t115269*t115278*(t115270*t115269*(3.0/2.0)+gcab*t115270*t115275*t115269*(3.0/2.0)))-rho_a[index]* \
                   t115321*((ccaa2*t115322*t115270*2.0)/t115331-ccaa1*t115322*t115270*1.0/(t115328*t115328)*2.0-ccaa2* \
                   t115323*t115324*t115325*t115347*2.0+(ccaa4*t115323*t115324*t115325*1.2E1)/t115342-ccaa4*t115324*t115325* \
                   t115336*t115356*(t115322*t115270*1.2E1+t115323*t115324*t115325*1.2E1+gamma_aa[index]*gcaa*t115322* \
                   t115326*2.4E1)+(ccaa3*gamma_aa[index]*gcaa*t115322*t115326*6.0)/t115335+ccaa1*gamma_aa[index]*gcaa* \
                   t115322*t115326*1.0/(t115328*t115328*t115328)*2.0+ccaa2*t115322*1.0/(t115331*t115331*t115331)*t115323* \
                   t115270*(t115343*t115343)*2.0+ccaa4*t115324*1.0/(t115342*t115342*t115342)*t115325*t115336*(t115337* \
                   t115337)*2.0-ccaa2*gamma_aa[index]*t115322*t115270*t115343*t115347*4.0-ccaa4*gamma_aa[index]*t115323* \
                   t115324*t115325*t115337*t115356*8.0-ccaa3*gcaa*t115322*t115323*t115351*t115326*t115344*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t115322*t115323*t115326*t115344*(t115322*t115270*6.0+gamma_aa[index]*gcaa*t115322*t115326*6.0) \
                   +ccaa3*gamma_aa[index]*gcaa*t115322*t115323*(t115351*t115351)*t115326*1.0/(t115335*t115335*t115335) \
                   *2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t115358*(erf(pow(t115357,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)+omega*t115358*(t115361-(omega*omega)*1.0/pow(t115357,2.0/3.0)*(t115361-1.0)* \
                   (1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*t115270*t115362*1.0/(t115365*t115365)*2.0-(cx2*t115270*t115362*2.0) \
                   /t115368+cx2*t115323*t115325*t115363*t115383*2.0-(cx4*t115323*t115325*t115363*1.2E1)/t115378+cx4*t115325* \
                   t115336*t115363*t115392*(t115270*t115362*1.2E1+t115323*t115325*t115363*1.2E1+gamma_aa[index]*gx*t115326* \
                   t115362*2.4E1)-cx1*gamma_aa[index]*gx*t115326*t115362*1.0/(t115365*t115365*t115365)*2.0-(cx3*gamma_aa[index]* \
                   gx*t115326*t115362*6.0)/t115372-cx2*t115323*t115270*t115362*1.0/(t115368*t115368*t115368)*(t115379* \
                   t115379)*2.0-cx4*t115325*t115336*t115363*(t115373*t115373)*1.0/(t115378*t115378*t115378)*2.0+cx2*gamma_aa[index]* \
                   t115270*t115362*t115383*t115379*4.0+cx4*gamma_aa[index]*t115323*t115325*t115363*t115373*t115392*8.0+ \
                   cx3*gx*t115323*t115326*t115362*t115380*t115387*6.0+cx3*gamma_aa[index]*gx*t115323*t115326*t115362* \
                   t115380*(t115270*t115362*6.0+gamma_aa[index]*gx*t115326*t115362*6.0)-cx3*gamma_aa[index]*gx*t115323* \
                   t115326*t115362*1.0/(t115372*t115372*t115372)*(t115387*t115387)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t117128 = 1.0/pow(rho_a[index],1.0/3.0);
                double t117129 = c*t117128;
                double t117130 = sqrt(t117129);
                double t117131 = pow(t117129,3.0/2.0);
                double t117132 = c*c;
                double t117133 = 1.0/pow(rho_a[index],2.0/3.0);
                double t117134 = 1.0/c0p;
                double t117135 = b1p*t117130;
                double t117136 = b3p*t117131;
                double t117137 = b4p*t117132*t117133;
                double t117138 = b2p*c*t117128;
                double t117139 = t117135+t117136+t117137+t117138;
                double t117140 = 1.0/t117139;
                double t117141 = t117140*t117134*(1.0/2.0);
                double t117142 = t117141+1.0;
                double t117143 = log(t117142);
                double t117144 = a1p*c*t117128;
                double t117145 = t117144+1.0;
                double t117146 = gcaa*gcaa;
                double t117147 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t117148 = 1.0/pow(rho_a[index],8.0/3.0);
                double t117149 = gamma_aa[index]*gamma_aa[index];
                double t117150 = t117146*t117146;
                double t117151 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t117152 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t117153 = gamma_aa[index]*gcaa*t117148;
                double t117154 = t117153+1.0;
                double t117155 = gamma_aa[index]*gcaa*t117148*2.0;
                double t117156 = t117146*t117147*t117149;
                double t117157 = t117155+t117156+1.0;
                double t117158 = gamma_aa[index]*gcaa*t117148*3.0;
                double t117159 = gamma_aa[index]*gcaa*t117152*t117146*t117149;
                double t117160 = t117146*t117147*t117149*3.0;
                double t117161 = t117160+t117158+t117159+1.0;
                double t117162 = t117149*t117149;
                double t117178 = gcaa*t117148*4.0;
                double t117179 = gamma_aa[index]*t117146*t117147*1.2E1;
                double t117180 = gcaa*t117152*t117146*t117149*1.2E1;
                double t117181 = gamma_aa[index]*t117150*t117151*t117149*4.0;
                double t117163 = t117180+t117181+t117178+t117179;
                double t117164 = gamma_aa[index]*gcaa*t117148*4.0;
                double t117165 = gamma_aa[index]*gcaa*t117152*t117146*t117149*4.0;
                double t117166 = t117146*t117147*t117149*6.0;
                double t117167 = t117150*t117151*t117162;
                double t117168 = t117164+t117165+t117166+t117167+1.0;
                double t117171 = gcaa*t117148*2.0;
                double t117172 = gamma_aa[index]*t117146*t117147*2.0;
                double t117169 = t117171+t117172;
                double t117170 = 1.0/(t117161*t117161);
                double t117173 = 1.0/(t117157*t117157);
                double t117174 = gcaa*t117148*3.0;
                double t117175 = gamma_aa[index]*t117146*t117147*6.0;
                double t117176 = gcaa*t117152*t117146*t117149*3.0;
                double t117177 = t117174+t117175+t117176;
                double t117182 = 1.0/(t117168*t117168);
                double t117183 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t117184 = 1.0/pow(t117183,1.0/3.0);
                double t117185 = 1.0/(omega*omega);
                double t117186 = pow(t117183,2.0/3.0);
                double t117187 = exp(-t117185*t117186);
                double t117188 = gx*gx;
                double t117189 = t117188*t117188;
                double t117190 = gamma_aa[index]*gx*t117148;
                double t117191 = t117190+1.0;
                double t117192 = gamma_aa[index]*gx*t117148*2.0;
                double t117193 = t117147*t117149*t117188;
                double t117194 = t117192+t117193+1.0;
                double t117195 = gamma_aa[index]*gx*t117148*3.0;
                double t117196 = gamma_aa[index]*gx*t117152*t117149*t117188;
                double t117197 = t117147*t117149*t117188*3.0;
                double t117198 = t117195+t117196+t117197+1.0;
                double t117214 = gx*t117148*4.0;
                double t117215 = gamma_aa[index]*t117147*t117188*1.2E1;
                double t117216 = gx*t117152*t117149*t117188*1.2E1;
                double t117217 = gamma_aa[index]*t117151*t117149*t117189*4.0;
                double t117199 = t117214+t117215+t117216+t117217;
                double t117200 = gamma_aa[index]*gx*t117148*4.0;
                double t117201 = gamma_aa[index]*gx*t117152*t117149*t117188*4.0;
                double t117202 = t117147*t117149*t117188*6.0;
                double t117203 = t117151*t117162*t117189;
                double t117204 = t117200+t117201+t117202+t117203+1.0;
                double t117207 = gx*t117148*2.0;
                double t117208 = gamma_aa[index]*t117147*t117188*2.0;
                double t117205 = t117207+t117208;
                double t117206 = 1.0/(t117198*t117198);
                double t117209 = 1.0/(t117194*t117194);
                double t117210 = gx*t117148*3.0;
                double t117211 = gamma_aa[index]*t117147*t117188*6.0;
                double t117212 = gx*t117152*t117149*t117188*3.0;
                double t117213 = t117210+t117211+t117212;
                double t117218 = 1.0/(t117204*t117204);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t117130+b3f*t117131+b2f*c*t117128+b4f*t117132*t117133))+1.0)*(a1f*c*t117128+1.0)*2.0-c0p*t117143*t117145* \
                   2.0))/(two_13*2.0-2.0)+c0p*t117143*t117145*2.0)*(ccaa1*1.0/(t117154*t117154)*t117146*t117147*2.0-(ccaa2* \
                   t117146*t117147*2.0)/t117157+ccaa2*t117150*t117151*t117173*t117149*2.0-(ccaa4*t117150*t117151*t117149* \
                   1.2E1)/t117168+ccaa4*t117150*t117151*t117162*t117182*(t117146*t117147*1.2E1+t117150*t117151*t117149* \
                   1.2E1+gamma_aa[index]*gcaa*t117152*t117146*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t117152*t117146*6.0) \
                   /t117161-ccaa1*gamma_aa[index]*gcaa*t117152*1.0/(t117154*t117154*t117154)*t117146*2.0-ccaa4*t117150* \
                   t117151*t117162*(t117163*t117163)*1.0/(t117168*t117168*t117168)*2.0-ccaa2*t117146*t117147*1.0/(t117157* \
                   t117157*t117157)*t117149*(t117169*t117169)*2.0+ccaa2*gamma_aa[index]*t117146*t117173*t117147*t117169* \
                   4.0+ccaa4*gamma_aa[index]*t117150*t117151*t117163*t117182*t117149*8.0+ccaa3*gcaa*t117152*t117170*t117146* \
                   t117149*t117177*6.0+ccaa3*gamma_aa[index]*gcaa*t117152*t117170*t117146*t117149*(t117146*t117147*6.0+ \
                   gamma_aa[index]*gcaa*t117152*t117146*6.0)-ccaa3*gamma_aa[index]*gcaa*t117152*1.0/(t117161*t117161* \
                   t117161)*t117146*t117149*(t117177*t117177)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t117184*(erf(pow(t117183,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t117184*(t117187-(omega*omega)*1.0/pow(t117183,2.0/ \
                   3.0)*(t117187-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*1.0/(t117191*t117191)*t117147*t117188*2.0-(cx2* \
                   t117147*t117188*2.0)/t117194+cx2*t117151*t117209*t117149*t117189*2.0-(cx4*t117151*t117149*t117189* \
                   1.2E1)/t117204+cx4*t117151*t117162*t117218*t117189*(t117147*t117188*1.2E1+t117151*t117149*t117189* \
                   1.2E1+gamma_aa[index]*gx*t117152*t117188*2.4E1)-cx1*gamma_aa[index]*gx*t117152*1.0/(t117191*t117191* \
                   t117191)*t117188*2.0-(cx3*gamma_aa[index]*gx*t117152*t117188*6.0)/t117198-cx2*(t117205*t117205)*t117147* \
                   t117149*1.0/(t117194*t117194*t117194)*t117188*2.0-cx4*1.0/(t117204*t117204*t117204)*t117151*t117162* \
                   t117189*(t117199*t117199)*2.0+cx2*gamma_aa[index]*t117205*t117209*t117147*t117188*4.0+cx4*gamma_aa[index]* \
                   t117151*t117218*t117149*t117189*t117199*8.0+cx3*gx*t117213*t117152*t117206*t117149*t117188*6.0+cx3* \
                   gamma_aa[index]*gx*t117152*t117206*t117149*t117188*(t117147*t117188*6.0+gamma_aa[index]*gx*t117152* \
                   t117188*6.0)-cx3*gamma_aa[index]*gx*(t117213*t117213)*t117152*t117149*t117188*1.0/(t117198*t117198* \
                   t117198)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t115395 = 1.0/pow(rho_a[index],1.0/3.0);
                double t115396 = c*t115395;
                double t115397 = sqrt(t115396);
                double t115398 = pow(t115396,3.0/2.0);
                double t115399 = c*c;
                double t115400 = 1.0/pow(rho_a[index],2.0/3.0);
                double t115401 = 1.0/c0p;
                double t115402 = b1p*t115397;
                double t115403 = b3p*t115398;
                double t115404 = b4p*t115400*t115399;
                double t115405 = b2p*c*t115395;
                double t115406 = t115402+t115403+t115404+t115405;
                double t115407 = 1.0/t115406;
                double t115408 = t115401*t115407*(1.0/2.0);
                double t115409 = t115408+1.0;
                double t115410 = log(t115409);
                double t115411 = a1p*c*t115395;
                double t115412 = t115411+1.0;
                double t115413 = pow(2.0,1.0/3.0);
                double t115414 = t115413*2.0;
                double t115415 = t115414-2.0;
                double t115416 = two_13*2.0;
                double t115417 = t115416-2.0;
                double t115418 = 1.0/t115417;
                double t115419 = 1.0/c0f;
                double t115420 = 1.0/pow(rho_b[index],1.0/3.0);
                double t115421 = c*t115420;
                double t115422 = sqrt(t115421);
                double t115423 = pow(t115421,3.0/2.0);
                double t115424 = 1.0/pow(rho_b[index],2.0/3.0);
                double t115425 = b1p*t115422;
                double t115426 = b3p*t115423;
                double t115427 = b4p*t115424*t115399;
                double t115428 = b2p*c*t115420;
                double t115429 = t115425+t115426+t115427+t115428;
                double t115430 = 1.0/t115429;
                double t115431 = t115401*t115430*(1.0/2.0);
                double t115432 = t115431+1.0;
                double t115433 = log(t115432);
                double t115434 = a1p*c*t115420;
                double t115435 = t115434+1.0;
                double t115436 = c0p*t115433*t115435*2.0;
                double t115437 = rho_a[index]+rho_b[index];
                double t115438 = 1.0/pow(t115437,1.0/3.0);
                double t115439 = c*t115438;
                double t115440 = sqrt(t115439);
                double t115441 = pow(t115439,3.0/2.0);
                double t115442 = 1.0/pow(t115437,2.0/3.0);
                double t115443 = b1p*t115440;
                double t115444 = b3p*t115441;
                double t115445 = b4p*t115442*t115399;
                double t115446 = b2p*c*t115438;
                double t115447 = t115443+t115444+t115445+t115446;
                double t115448 = 1.0/t115447;
                double t115449 = t115401*t115448*(1.0/2.0);
                double t115450 = t115449+1.0;
                double t115451 = log(t115450);
                double t115452 = a1p*c*t115438;
                double t115453 = t115452+1.0;
                double t115454 = c0p*t115451*t115453*2.0;
                double t115455 = rho_a[index]-rho_b[index];
                double t115456 = t115455*t115455;
                double t115457 = 1.0/t115437;
                double t115458 = t115455*t115457;
                double t115459 = 1.0/(t115437*t115437*t115437*t115437);
                double t115460 = t115456*t115456;
                double t115461 = t115458+1.0;
                double t115462 = pow(t115461,4.0/3.0);
                double t115463 = -t115458+1.0;
                double t115464 = pow(t115463,4.0/3.0);
                double t115465 = t115462+t115464-2.0;
                double t115466 = gcab*gcab;
                double t115469 = 1.0/pow(rho_a[index],8.0/3.0);
                double t115470 = 1.0/pow(rho_b[index],8.0/3.0);
                double t115471 = gamma_aa[index]*t115469*(1.0/2.0);
                double t115472 = gamma_bb[index]*t115470*(1.0/2.0);
                double t115467 = t115471+t115472;
                double t115468 = t115467*t115467;
                double t115473 = t115466*t115466;
                double t115474 = t115468*t115468;
                double t115475 = t115466*t115468*3.0;
                double t115476 = gcab*t115466*t115467*t115468;
                double t115477 = gcab*t115467*3.0;
                double t115478 = t115475+t115476+t115477+1.0;
                double t115479 = t115466*t115468;
                double t115480 = gcab*t115467*2.0;
                double t115481 = t115480+t115479+1.0;
                double t115482 = t115466*t115468*6.0;
                double t115483 = gcab*t115466*t115467*t115468*4.0;
                double t115484 = t115473*t115474;
                double t115485 = gcab*t115467*4.0;
                double t115486 = t115482+t115483+t115484+t115485+1.0;
                double t115487 = 1.0/(t115481*t115481);
                double t115488 = gcab*t115469;
                double t115489 = t115466*t115467*t115469;
                double t115490 = t115488+t115489;
                double t115491 = gcab*t115470;
                double t115492 = t115470*t115466*t115467;
                double t115493 = t115491+t115492;
                double t115494 = gcab*t115467;
                double t115495 = t115494+1.0;
                double t115496 = gcab*t115469*2.0;
                double t115497 = t115466*t115467*t115469*6.0;
                double t115498 = gcab*t115466*t115468*t115469*6.0;
                double t115499 = t115473*t115467*t115468*t115469*2.0;
                double t115500 = t115496+t115497+t115498+t115499;
                double t115501 = 1.0/(t115486*t115486);
                double t115502 = gcab*t115470*2.0;
                double t115503 = t115470*t115466*t115467*6.0;
                double t115504 = gcab*t115470*t115466*t115468*6.0;
                double t115505 = t115470*t115473*t115467*t115468*2.0;
                double t115506 = t115502+t115503+t115504+t115505;
                double t115507 = gcab*t115469*(3.0/2.0);
                double t115508 = t115466*t115467*t115469*3.0;
                double t115509 = gcab*t115466*t115468*t115469*(3.0/2.0);
                double t115510 = t115507+t115508+t115509;
                double t115511 = 1.0/(t115478*t115478);
                double t115512 = gcab*t115470*(3.0/2.0);
                double t115513 = t115470*t115466*t115467*3.0;
                double t115514 = gcab*t115470*t115466*t115468*(3.0/2.0);
                double t115515 = t115512+t115513+t115514;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t115436-t115415*t115418*(t115436-c0f*log((t115419*(1.0/ \
                   2.0))/(b1f*t115422+b3f*t115423+b2f*c*t115420+b4f*t115424*t115399)+1.0)*(a1f*c*t115420+1.0)*2.0))+t115437* \
                   (t115454-t115460*t115418*t115465*t115459*(t115454-c0f*log((t115419*(1.0/2.0))/(b1f*t115440+b3f*t115441+ \
                   b2f*c*t115438+b4f*t115442*t115399)+1.0)*(a1f*c*t115438+1.0)*2.0)+(Aa*t115418*t115465*log((1.0/2.0) \
                   /(Aa*(b1a*t115440+b3a*t115441+b2a*c*t115438+b4a*t115442*t115399))+1.0)*(t115460*t115459-1.0)*(a1a* \
                   c*t115438+1.0)*2.0)/d2fz0)+rho_a[index]*(t115415*t115418*(c0p*t115410*t115412*2.0-c0f*log((t115419* \
                   (1.0/2.0))/(b1f*t115397+b3f*t115398+b2f*c*t115395+b4f*t115400*t115399)+1.0)*(a1f*c*t115395+1.0)*2.0) \
                   -c0p*t115410*t115412*2.0))*(ccab4*t115501*t115473*t115474*(t115470*t115466*t115469*3.0+t115470*t115473* \
                   t115468*t115469*3.0+gcab*t115470*t115466*t115467*t115469*6.0)-(ccab2*t115470*t115466*t115469*(1.0/ \
                   2.0))/t115481+ccab1*t115470*t115466*1.0/(t115495*t115495)*t115469*(1.0/2.0)+ccab2*t115470*t115490* \
                   t115466*t115467*t115487+ccab2*t115470*t115473*t115468*t115469*t115487*(1.0/2.0)+ccab2*t115466*t115493* \
                   t115467*t115469*t115487-ccab4*t115500*t115506*t115473*t115474*1.0/(t115486*t115486*t115486)*2.0-ccab2* \
                   1.0/(t115481*t115481*t115481)*t115490*t115466*t115493*t115468*2.0-(ccab4*t115470*t115473*t115468*t115469* \
                   3.0)/t115486+ccab3*gcab*t115510*t115511*t115470*t115466*t115468*(3.0/2.0)+ccab3*gcab*t115511*t115515* \
                   t115466*t115468*t115469*(3.0/2.0)+ccab4*t115500*t115501*t115470*t115473*t115467*t115468*2.0+ccab4* \
                   t115501*t115506*t115473*t115467*t115468*t115469*2.0+ccab3*gcab*t115511*t115466*t115467*t115468*(t115470* \
                   t115466*t115469*(3.0/2.0)+gcab*t115470*t115466*t115467*t115469*(3.0/2.0))-ccab1*gcab*t115470*t115466* \
                   t115467*1.0/(t115495*t115495*t115495)*t115469*(1.0/2.0)-(ccab3*gcab*t115470*t115466*t115467*t115469* \
                   (3.0/2.0))/t115478-ccab3*gcab*t115510*t115515*t115466*t115467*t115468*1.0/(t115478*t115478*t115478) \
                   *2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t115519 = 1.0/pow(rho_a[index],1.0/3.0);
                double t115520 = c*t115519;
                double t115521 = sqrt(t115520);
                double t115522 = pow(t115520,3.0/2.0);
                double t115523 = c*c;
                double t115524 = 1.0/pow(rho_a[index],2.0/3.0);
                double t115525 = 1.0/c0p;
                double t115526 = b1p*t115521;
                double t115527 = b3p*t115522;
                double t115528 = b4p*t115523*t115524;
                double t115529 = b2p*c*t115519;
                double t115530 = t115526+t115527+t115528+t115529;
                double t115531 = 1.0/t115530;
                double t115532 = t115531*t115525*(1.0/2.0);
                double t115533 = t115532+1.0;
                double t115534 = log(t115533);
                double t115535 = a1p*c*t115519;
                double t115536 = t115535+1.0;
                double t115537 = pow(2.0,1.0/3.0);
                double t115538 = t115537*2.0;
                double t115539 = t115538-2.0;
                double t115540 = two_13*2.0;
                double t115541 = t115540-2.0;
                double t115542 = 1.0/t115541;
                double t115543 = 1.0/c0f;
                double t115544 = 1.0/pow(rho_b[index],1.0/3.0);
                double t115545 = c*t115544;
                double t115546 = sqrt(t115545);
                double t115547 = pow(t115545,3.0/2.0);
                double t115548 = 1.0/pow(rho_b[index],2.0/3.0);
                double t115549 = b1p*t115546;
                double t115550 = b3p*t115547;
                double t115551 = b4p*t115523*t115548;
                double t115552 = b2p*c*t115544;
                double t115553 = t115550+t115551+t115552+t115549;
                double t115554 = 1.0/t115553;
                double t115555 = t115525*t115554*(1.0/2.0);
                double t115556 = t115555+1.0;
                double t115557 = log(t115556);
                double t115558 = a1p*c*t115544;
                double t115559 = t115558+1.0;
                double t115560 = c0p*t115557*t115559*2.0;
                double t115561 = rho_a[index]+rho_b[index];
                double t115562 = 1.0/pow(t115561,1.0/3.0);
                double t115563 = c*t115562;
                double t115564 = sqrt(t115563);
                double t115565 = pow(t115563,3.0/2.0);
                double t115566 = 1.0/pow(t115561,2.0/3.0);
                double t115567 = b1p*t115564;
                double t115568 = b3p*t115565;
                double t115569 = b4p*t115523*t115566;
                double t115570 = b2p*c*t115562;
                double t115571 = t115570+t115567+t115568+t115569;
                double t115572 = 1.0/t115571;
                double t115573 = t115525*t115572*(1.0/2.0);
                double t115574 = t115573+1.0;
                double t115575 = log(t115574);
                double t115576 = a1p*c*t115562;
                double t115577 = t115576+1.0;
                double t115578 = c0p*t115575*t115577*2.0;
                double t115579 = rho_a[index]-rho_b[index];
                double t115580 = t115579*t115579;
                double t115581 = 1.0/t115561;
                double t115582 = t115581*t115579;
                double t115583 = 1.0/(t115561*t115561*t115561*t115561);
                double t115584 = t115580*t115580;
                double t115585 = t115582+1.0;
                double t115586 = pow(t115585,4.0/3.0);
                double t115587 = -t115582+1.0;
                double t115588 = pow(t115587,4.0/3.0);
                double t115589 = t115586+t115588-2.0;
                double t115590 = gcab*gcab;
                double t115591 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t115592 = 1.0/pow(rho_a[index],8.0/3.0);
                double t115593 = gamma_aa[index]*t115592*(1.0/2.0);
                double t115594 = 1.0/pow(rho_b[index],8.0/3.0);
                double t115595 = gamma_bb[index]*t115594*(1.0/2.0);
                double t115596 = t115593+t115595;
                double t115597 = gcab*t115596;
                double t115598 = t115597+1.0;
                double t115599 = t115596*t115596;
                double t115600 = t115590*t115599;
                double t115601 = gcab*t115596*2.0;
                double t115602 = t115600+t115601+1.0;
                double t115603 = t115590*t115590;
                double t115620 = gcab*t115594*2.0;
                double t115621 = t115590*t115594*t115596*6.0;
                double t115622 = gcab*t115590*t115594*t115599*6.0;
                double t115623 = t115603*t115594*t115596*t115599*2.0;
                double t115604 = t115620+t115621+t115622+t115623;
                double t115605 = t115599*t115599;
                double t115625 = gcab*t115594*(3.0/2.0);
                double t115626 = t115590*t115594*t115596*3.0;
                double t115627 = gcab*t115590*t115594*t115599*(3.0/2.0);
                double t115606 = t115625+t115626+t115627;
                double t115607 = t115590*t115599*3.0;
                double t115608 = gcab*t115590*t115596*t115599;
                double t115609 = gcab*t115596*3.0;
                double t115610 = t115607+t115608+t115609+1.0;
                double t115617 = gcab*t115594;
                double t115618 = t115590*t115594*t115596;
                double t115611 = t115617+t115618;
                double t115612 = t115590*t115599*6.0;
                double t115613 = gcab*t115590*t115596*t115599*4.0;
                double t115614 = t115603*t115605;
                double t115615 = gcab*t115596*4.0;
                double t115616 = t115612+t115613+t115614+t115615+1.0;
                double t115619 = 1.0/(t115602*t115602);
                double t115624 = 1.0/(t115616*t115616);
                double t115628 = 1.0/(t115610*t115610);
                double t115629 = c0p*t115534*t115536*2.0;
                double t115630 = b1f*t115546;
                double t115631 = b3f*t115547;
                double t115632 = b4f*t115523*t115548;
                double t115633 = b2f*c*t115544;
                double t115634 = t115630+t115631+t115632+t115633;
                double t115635 = 1.0/t115634;
                double t115636 = t115543*t115635*(1.0/2.0);
                double t115637 = t115636+1.0;
                double t115638 = log(t115637);
                double t115639 = a1f*c*t115544;
                double t115640 = t115639+1.0;
                double t115641 = t115560-c0f*t115640*t115638*2.0;
                double t115642 = t115560-t115542*t115641*t115539;
                double t115643 = gcaa*gcaa;
                double t115644 = gamma_bb[index]*gamma_bb[index];
                double t115645 = t115643*t115643;
                double t115646 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t115647 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t115648 = gamma_bb[index]*gcaa*t115594;
                double t115649 = t115648+1.0;
                double t115650 = gamma_bb[index]*gcaa*t115594*2.0;
                double t115651 = t115643*t115644*t115591;
                double t115652 = t115650+t115651+1.0;
                double t115653 = gamma_bb[index]*gcaa*t115594*3.0;
                double t115654 = gamma_bb[index]*gcaa*t115643*t115644*t115647;
                double t115655 = t115643*t115644*t115591*3.0;
                double t115656 = t115653+t115654+t115655+1.0;
                double t115657 = t115644*t115644;
                double t115673 = gcaa*t115594*4.0;
                double t115674 = gamma_bb[index]*t115643*t115591*1.2E1;
                double t115675 = gcaa*t115643*t115644*t115647*1.2E1;
                double t115676 = gamma_bb[index]*t115644*t115645*t115646*4.0;
                double t115658 = t115673+t115674+t115675+t115676;
                double t115659 = gamma_bb[index]*gcaa*t115594*4.0;
                double t115660 = gamma_bb[index]*gcaa*t115643*t115644*t115647*4.0;
                double t115661 = t115643*t115644*t115591*6.0;
                double t115662 = t115645*t115646*t115657;
                double t115663 = t115660+t115661+t115662+t115659+1.0;
                double t115666 = gcaa*t115594*2.0;
                double t115667 = gamma_bb[index]*t115643*t115591*2.0;
                double t115664 = t115666+t115667;
                double t115665 = 1.0/(t115656*t115656);
                double t115668 = 1.0/(t115652*t115652);
                double t115669 = gcaa*t115594*3.0;
                double t115670 = gamma_bb[index]*t115643*t115591*6.0;
                double t115671 = gcaa*t115643*t115644*t115647*3.0;
                double t115672 = t115670+t115671+t115669;
                double t115677 = 1.0/(t115663*t115663);
                double t115678 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t115679 = 1.0/pow(t115678,1.0/3.0);
                double t115680 = 1.0/(omega*omega);
                double t115681 = pow(t115678,2.0/3.0);
                double t115682 = exp(-t115680*t115681);
                double t115683 = gx*gx;
                double t115684 = t115683*t115683;
                double t115685 = gamma_bb[index]*gx*t115594;
                double t115686 = t115685+1.0;
                double t115687 = gamma_bb[index]*gx*t115594*2.0;
                double t115688 = t115644*t115591*t115683;
                double t115689 = t115687+t115688+1.0;
                double t115690 = gamma_bb[index]*gx*t115594*3.0;
                double t115691 = gamma_bb[index]*gx*t115644*t115647*t115683;
                double t115692 = t115644*t115591*t115683*3.0;
                double t115693 = t115690+t115691+t115692+1.0;
                double t115709 = gx*t115594*4.0;
                double t115710 = gamma_bb[index]*t115591*t115683*1.2E1;
                double t115711 = gx*t115644*t115647*t115683*1.2E1;
                double t115712 = gamma_bb[index]*t115644*t115646*t115684*4.0;
                double t115694 = t115710+t115711+t115712+t115709;
                double t115695 = gamma_bb[index]*gx*t115594*4.0;
                double t115696 = gamma_bb[index]*gx*t115644*t115647*t115683*4.0;
                double t115697 = t115644*t115591*t115683*6.0;
                double t115698 = t115646*t115657*t115684;
                double t115699 = t115695+t115696+t115697+t115698+1.0;
                double t115702 = gx*t115594*2.0;
                double t115703 = gamma_bb[index]*t115591*t115683*2.0;
                double t115700 = t115702+t115703;
                double t115701 = 1.0/(t115693*t115693);
                double t115704 = 1.0/(t115689*t115689);
                double t115705 = gx*t115594*3.0;
                double t115706 = gamma_bb[index]*t115591*t115683*6.0;
                double t115707 = gx*t115644*t115647*t115683*3.0;
                double t115708 = t115705+t115706+t115707;
                double t115713 = 1.0/(t115699*t115699);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t115642+rho_a[index]*(t115629-t115542*t115539*(t115629- \
                   c0f*log((t115543*(1.0/2.0))/(b1f*t115521+b3f*t115522+b2f*c*t115519+b4f*t115523*t115524)+1.0)*(a1f* \
                   c*t115519+1.0)*2.0))-t115561*(t115578-t115542*t115583*t115584*t115589*(t115578-c0f*log((t115543*(1.0/ \
                   2.0))/(b1f*t115564+b3f*t115565+b2f*c*t115562+b4f*t115523*t115566)+1.0)*(a1f*c*t115562+1.0)*2.0)+(Aa* \
                   t115542*t115589*log((1.0/2.0)/(Aa*(b1a*t115564+b3a*t115565+b2a*c*t115562+b4a*t115523*t115566))+1.0) \
                   *(t115583*t115584-1.0)*(a1a*c*t115562+1.0)*2.0)/d2fz0))*((ccab2*t115590*t115591*(1.0/2.0))/t115602- \
                   ccab1*t115590*t115591*1.0/(t115598*t115598)*(1.0/2.0)+ccab4*t115603*(t115604*t115604)*t115605*1.0/ \
                   (t115616*t115616*t115616)*2.0+ccab2*1.0/(t115602*t115602*t115602)*(t115611*t115611)*t115590*t115599* \
                   2.0-ccab2*t115603*t115591*t115619*t115599*(1.0/2.0)-ccab4*t115603*t115605*t115624*(t115590*t115591* \
                   3.0+t115603*t115591*t115599*3.0+gcab*t115590*t115591*t115596*6.0)+(ccab4*t115603*t115591*t115599*3.0) \
                   /t115616-ccab2*t115611*t115590*t115619*t115594*t115596*2.0+(ccab3*gcab*t115590*t115591*t115596*(3.0/ \
                   2.0))/t115610+ccab1*gcab*t115590*t115591*t115596*1.0/(t115598*t115598*t115598)*(1.0/2.0)+ccab3*gcab* \
                   1.0/(t115610*t115610*t115610)*(t115606*t115606)*t115590*t115596*t115599*2.0-ccab3*gcab*t115606*t115590* \
                   t115628*t115594*t115599*3.0-ccab4*t115603*t115604*t115624*t115594*t115596*t115599*4.0-ccab3*gcab*t115590* \
                   t115628*t115596*t115599*(t115590*t115591*(3.0/2.0)+gcab*t115590*t115591*t115596*(3.0/2.0)))-rho_b[index]* \
                   t115642*((ccaa2*t115643*t115591*2.0)/t115652-ccaa1*t115643*t115591*1.0/(t115649*t115649)*2.0-ccaa2* \
                   t115644*t115645*t115646*t115668*2.0+(ccaa4*t115644*t115645*t115646*1.2E1)/t115663-ccaa4*t115645*t115646* \
                   t115657*t115677*(t115643*t115591*1.2E1+t115644*t115645*t115646*1.2E1+gamma_bb[index]*gcaa*t115643* \
                   t115647*2.4E1)+(ccaa3*gamma_bb[index]*gcaa*t115643*t115647*6.0)/t115656+ccaa1*gamma_bb[index]*gcaa* \
                   t115643*t115647*1.0/(t115649*t115649*t115649)*2.0+ccaa2*t115643*1.0/(t115652*t115652*t115652)*t115644* \
                   t115591*(t115664*t115664)*2.0+ccaa4*t115645*1.0/(t115663*t115663*t115663)*t115646*t115657*(t115658* \
                   t115658)*2.0-ccaa2*gamma_bb[index]*t115643*t115591*t115664*t115668*4.0-ccaa4*gamma_bb[index]*t115644* \
                   t115645*t115646*t115658*t115677*8.0-ccaa3*gcaa*t115643*t115644*t115672*t115647*t115665*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t115643*t115644*t115647*t115665*(t115643*t115591*6.0+gamma_bb[index]*gcaa*t115643*t115647*6.0) \
                   +ccaa3*gamma_bb[index]*gcaa*t115643*t115644*(t115672*t115672)*t115647*1.0/(t115656*t115656*t115656) \
                   *2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t115679*(erf(pow(t115678,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)+omega*t115679*(t115682-(omega*omega)*1.0/pow(t115678,2.0/3.0)*(t115682-1.0)* \
                   (1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*t115591*t115683*1.0/(t115686*t115686)*2.0-(cx2*t115591*t115683*2.0) \
                   /t115689+cx2*t115704*t115644*t115646*t115684*2.0-(cx4*t115644*t115646*t115684*1.2E1)/t115699+cx4*t115713* \
                   t115646*t115657*t115684*(t115591*t115683*1.2E1+t115644*t115646*t115684*1.2E1+gamma_bb[index]*gx*t115647* \
                   t115683*2.4E1)-cx1*gamma_bb[index]*gx*t115647*t115683*1.0/(t115686*t115686*t115686)*2.0-(cx3*gamma_bb[index]* \
                   gx*t115647*t115683*6.0)/t115693-cx2*(t115700*t115700)*t115644*t115591*t115683*1.0/(t115689*t115689* \
                   t115689)*2.0-cx4*t115646*t115657*t115684*(t115694*t115694)*1.0/(t115699*t115699*t115699)*2.0+cx2*gamma_bb[index]* \
                   t115700*t115704*t115591*t115683*4.0+cx4*gamma_bb[index]*t115713*t115644*t115646*t115684*t115694*8.0+ \
                   cx3*gx*t115701*t115644*t115708*t115647*t115683*6.0+cx3*gamma_bb[index]*gx*t115701*t115644*t115647* \
                   t115683*(t115591*t115683*6.0+gamma_bb[index]*gx*t115647*t115683*6.0)-cx3*gamma_bb[index]*gx*t115644* \
                   (t115708*t115708)*t115647*t115683*1.0/(t115693*t115693*t115693)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t116378 = 1.0/pow(rho_b[index],1.0/3.0);
                double t116379 = c*t116378;
                double t116380 = sqrt(t116379);
                double t116381 = pow(t116379,3.0/2.0);
                double t116382 = c*c;
                double t116383 = 1.0/pow(rho_b[index],2.0/3.0);
                double t116384 = 1.0/c0p;
                double t116385 = b1p*t116380;
                double t116386 = b3p*t116381;
                double t116387 = b4p*t116382*t116383;
                double t116388 = b2p*c*t116378;
                double t116389 = t116385+t116386+t116387+t116388;
                double t116390 = 1.0/t116389;
                double t116391 = t116390*t116384*(1.0/2.0);
                double t116392 = t116391+1.0;
                double t116393 = log(t116392);
                double t116394 = a1p*c*t116378;
                double t116395 = t116394+1.0;
                double t116396 = gcaa*gcaa;
                double t116397 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t116398 = 1.0/pow(rho_b[index],8.0/3.0);
                double t116399 = gamma_bb[index]*gamma_bb[index];
                double t116400 = t116396*t116396;
                double t116401 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t116402 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t116403 = gamma_bb[index]*gcaa*t116398;
                double t116404 = t116403+1.0;
                double t116405 = gamma_bb[index]*gcaa*t116398*2.0;
                double t116406 = t116396*t116397*t116399;
                double t116407 = t116405+t116406+1.0;
                double t116408 = gamma_bb[index]*gcaa*t116398*3.0;
                double t116409 = gamma_bb[index]*gcaa*t116402*t116396*t116399;
                double t116410 = t116396*t116397*t116399*3.0;
                double t116411 = t116410+t116408+t116409+1.0;
                double t116412 = t116399*t116399;
                double t116428 = gcaa*t116398*4.0;
                double t116429 = gamma_bb[index]*t116396*t116397*1.2E1;
                double t116430 = gcaa*t116402*t116396*t116399*1.2E1;
                double t116431 = gamma_bb[index]*t116400*t116401*t116399*4.0;
                double t116413 = t116430+t116431+t116428+t116429;
                double t116414 = gamma_bb[index]*gcaa*t116398*4.0;
                double t116415 = gamma_bb[index]*gcaa*t116402*t116396*t116399*4.0;
                double t116416 = t116396*t116397*t116399*6.0;
                double t116417 = t116400*t116401*t116412;
                double t116418 = t116414+t116415+t116416+t116417+1.0;
                double t116421 = gcaa*t116398*2.0;
                double t116422 = gamma_bb[index]*t116396*t116397*2.0;
                double t116419 = t116421+t116422;
                double t116420 = 1.0/(t116411*t116411);
                double t116423 = 1.0/(t116407*t116407);
                double t116424 = gcaa*t116398*3.0;
                double t116425 = gamma_bb[index]*t116396*t116397*6.0;
                double t116426 = gcaa*t116402*t116396*t116399*3.0;
                double t116427 = t116424+t116425+t116426;
                double t116432 = 1.0/(t116418*t116418);
                double t116433 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t116434 = 1.0/pow(t116433,1.0/3.0);
                double t116435 = 1.0/(omega*omega);
                double t116436 = pow(t116433,2.0/3.0);
                double t116437 = exp(-t116435*t116436);
                double t116438 = gx*gx;
                double t116439 = t116438*t116438;
                double t116440 = gamma_bb[index]*gx*t116398;
                double t116441 = t116440+1.0;
                double t116442 = gamma_bb[index]*gx*t116398*2.0;
                double t116443 = t116438*t116397*t116399;
                double t116444 = t116442+t116443+1.0;
                double t116445 = gamma_bb[index]*gx*t116398*3.0;
                double t116446 = gamma_bb[index]*gx*t116402*t116438*t116399;
                double t116447 = t116438*t116397*t116399*3.0;
                double t116448 = t116445+t116446+t116447+1.0;
                double t116464 = gx*t116398*4.0;
                double t116465 = gamma_bb[index]*t116438*t116397*1.2E1;
                double t116466 = gx*t116402*t116438*t116399*1.2E1;
                double t116467 = gamma_bb[index]*t116401*t116439*t116399*4.0;
                double t116449 = t116464+t116465+t116466+t116467;
                double t116450 = gamma_bb[index]*gx*t116398*4.0;
                double t116451 = gamma_bb[index]*gx*t116402*t116438*t116399*4.0;
                double t116452 = t116438*t116397*t116399*6.0;
                double t116453 = t116401*t116412*t116439;
                double t116454 = t116450+t116451+t116452+t116453+1.0;
                double t116457 = gx*t116398*2.0;
                double t116458 = gamma_bb[index]*t116438*t116397*2.0;
                double t116455 = t116457+t116458;
                double t116456 = 1.0/(t116448*t116448);
                double t116459 = 1.0/(t116444*t116444);
                double t116460 = gx*t116398*3.0;
                double t116461 = gamma_bb[index]*t116438*t116397*6.0;
                double t116462 = gx*t116402*t116438*t116399*3.0;
                double t116463 = t116460+t116461+t116462;
                double t116468 = 1.0/(t116454*t116454);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t116380+b3f*t116381+b2f*c*t116378+b4f*t116382*t116383))+1.0)*(a1f*c*t116378+1.0)*2.0-c0p*t116393*t116395* \
                   2.0))/(two_13*2.0-2.0)+c0p*t116393*t116395*2.0)*(ccaa1*1.0/(t116404*t116404)*t116396*t116397*2.0-(ccaa2* \
                   t116396*t116397*2.0)/t116407+ccaa2*t116400*t116401*t116423*t116399*2.0-(ccaa4*t116400*t116401*t116399* \
                   1.2E1)/t116418+ccaa4*t116400*t116401*t116412*t116432*(t116396*t116397*1.2E1+t116400*t116401*t116399* \
                   1.2E1+gamma_bb[index]*gcaa*t116402*t116396*2.4E1)-(ccaa3*gamma_bb[index]*gcaa*t116402*t116396*6.0) \
                   /t116411-ccaa1*gamma_bb[index]*gcaa*t116402*1.0/(t116404*t116404*t116404)*t116396*2.0-ccaa4*t116400* \
                   t116401*t116412*(t116413*t116413)*1.0/(t116418*t116418*t116418)*2.0-ccaa2*1.0/(t116407*t116407*t116407) \
                   *(t116419*t116419)*t116396*t116397*t116399*2.0+ccaa2*gamma_bb[index]*t116423*t116419*t116396*t116397* \
                   4.0+ccaa4*gamma_bb[index]*t116400*t116401*t116413*t116432*t116399*8.0+ccaa3*gcaa*t116402*t116420*t116427* \
                   t116396*t116399*6.0+ccaa3*gamma_bb[index]*gcaa*t116402*t116420*t116396*t116399*(t116396*t116397*6.0+ \
                   gamma_bb[index]*gcaa*t116402*t116396*6.0)-ccaa3*gamma_bb[index]*gcaa*t116402*1.0/(t116411*t116411* \
                   t116411)*(t116427*t116427)*t116396*t116399*2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t116434*(erf(pow(t116433,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t116434*(t116437-(omega*omega)*1.0/pow(t116433,2.0/ \
                   3.0)*(t116437-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*1.0/(t116441*t116441)*t116438*t116397*2.0-(cx2* \
                   t116438*t116397*2.0)/t116444+cx2*t116401*t116439*t116459*t116399*2.0-(cx4*t116401*t116439*t116399* \
                   1.2E1)/t116454+cx4*t116401*t116412*t116439*t116468*(t116438*t116397*1.2E1+t116401*t116439*t116399* \
                   1.2E1+gamma_bb[index]*gx*t116402*t116438*2.4E1)-cx1*gamma_bb[index]*gx*t116402*1.0/(t116441*t116441* \
                   t116441)*t116438*2.0-(cx3*gamma_bb[index]*gx*t116402*t116438*6.0)/t116448-cx2*1.0/(t116444*t116444* \
                   t116444)*(t116455*t116455)*t116438*t116397*t116399*2.0-cx4*t116401*t116412*1.0/(t116454*t116454*t116454) \
                   *t116439*(t116449*t116449)*2.0+cx2*gamma_bb[index]*t116455*t116438*t116459*t116397*4.0+cx4*gamma_bb[index]* \
                   t116401*t116439*t116449*t116468*t116399*8.0+cx3*gx*t116402*t116463*t116438*t116456*t116399*6.0+cx3* \
                   gamma_bb[index]*gx*t116402*t116438*t116456*t116399*(t116438*t116397*6.0+gamma_bb[index]*gx*t116402* \
                   t116438*6.0)-cx3*gamma_bb[index]*gx*t116402*(t116463*t116463)*t116438*1.0/(t116448*t116448*t116448) \
                   *t116399*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

