/**********************************************************
* EDF1_C_functional.cc: definitions for EDF1_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "EDF1_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

EDF1_C_Functional::EDF1_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "EDF1_C";
    description_ = "Empirical Density Function #1 (Correlation only)";
    citation_ = "R.D. Adamson, P.M.W. Gill, and J.A. Pople, Chem. Phys. Lett., 284, 6-11, 1998";
    
    double A = 5.5000000000000000E-02;
    params_.push_back(make_pair("A",A));
    double B = 1.5800000000000000E-01;
    params_.push_back(make_pair("B",B));
    double C = 2.5000000000000000E-01;
    params_.push_back(make_pair("C",C));
    double Dd = 3.5049999999999998E-01;
    params_.push_back(make_pair("Dd",Dd));
    double CFext = 3.6462398978764774E+01;
    params_.push_back(make_pair("CFext",CFext));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
EDF1_C_Functional::~EDF1_C_Functional()
{
}
void EDF1_C_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t28496 = rho_a[index]*2.0;
            double t28497 = 1/pow(t28496,1.0/3.0);
            double t28498 = Dd*t28497;
            double t28499 = t28498+1.0;
            double t28500 = 1/t28499;
            double t28501 = rho_a[index]*rho_a[index];
            functional_[index] = A*rho_a[index]*t28500*-2.0-A*B*t28500*1/pow(t28496,1.1E1/3.0)*exp(-C*t28497) \
               *(t28501*(CFext*pow(rho_a[index],8.0/3.0)*2.0-gamma_aa[index]*(C*t28497*(1.0/9.0)+Dd*t28500*t28497* \
               (1.0/9.0)-1.1E1/9.0)+gamma_aa[index]*(C*t28497*(1.0/1.8E1)+Dd*t28500*t28497*(1.0/1.8E1)-5.0/2.0)*2.0- \
               gamma_aa[index]*(C*t28497*(7.0/1.8E1)+Dd*t28500*t28497*(7.0/1.8E1)-4.7E1/1.8E1)*4.0)-gamma_aa[index]* \
               t28501*(2.2E1/3.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t28503 = rho_a[index]*2.0;
            double t28504 = 1/pow(t28503,1.0/3.0);
            double t28505 = Dd*t28504;
            double t28506 = t28505+1.0;
            double t28507 = rho_a[index]*rho_a[index];
            double t28508 = 1/t28506;
            double t28527 = C*t28504;
            double t28509 = exp(-t28527);
            double t28510 = 1/pow(t28503,4.0/3.0);
            double t28511 = 1/(t28506*t28506);
            double t28512 = Dd*Dd;
            double t28513 = 1/pow(t28503,5.0/3.0);
            double t28514 = C*t28504*(1.0/9.0);
            double t28515 = Dd*t28504*t28508*(1.0/9.0);
            double t28516 = t28514+t28515-1.1E1/9.0;
            double t28517 = gamma_aa[index]*t28516;
            double t28518 = C*t28504*(1.0/1.8E1);
            double t28519 = Dd*t28504*t28508*(1.0/1.8E1);
            double t28520 = t28518+t28519-5.0/2.0;
            double t28521 = C*t28504*(7.0/1.8E1);
            double t28522 = Dd*t28504*t28508*(7.0/1.8E1);
            double t28523 = t28521+t28522-4.7E1/1.8E1;
            double t28524 = gamma_aa[index]*t28523*4.0;
            double t28525 = pow(rho_a[index],8.0/3.0);
            double t28528 = gamma_aa[index]*t28520*2.0;
            double t28529 = CFext*t28525*2.0;
            double t28526 = t28524+t28517-t28528-t28529;
            double t28530 = t28507*t28526;
            double t28531 = gamma_aa[index]*t28507*(2.2E1/3.0);
            double t28532 = t28530+t28531;
            double t28533 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            v_rho_a_[index] = -A*t28508-A*Dd*t28511*1/pow(t28503,7.0/3.0)*t28507*(4.0/3.0)-A*B*1/pow(t28503,1.4E1/ \
               3.0)*t28532*t28508*t28509*(1.1E1/3.0)+A*B*1/pow(t28503,1.1E1/3.0)*t28508*t28509*(-t28507*(CFext*pow(rho_a[index],5.0/ \
               3.0)*(8.0/3.0)+gamma_aa[index]*(C*t28510*(1.0/2.7E1)+Dd*t28510*t28508*(1.0/2.7E1)-t28511*t28512*t28513* \
               (1.0/2.7E1))-gamma_aa[index]*(C*t28510*(1.0/5.4E1)+Dd*t28510*t28508*(1.0/5.4E1)-t28511*t28512*t28513* \
               (1.0/5.4E1))*2.0+gamma_aa[index]*(C*t28510*(7.0/5.4E1)+Dd*t28510*t28508*(7.0/5.4E1)-t28511*t28512* \
               t28513*(7.0/5.4E1))*4.0)+gamma_aa[index]*rho_a[index]*(2.2E1/3.0)+rho_a[index]*t28526)+A*B*C*t28532* \
               t28533*t28508*t28509*(1.0/9.6E1)+A*B*Dd*t28511*t28532*t28533*t28509*(1.0/9.6E1);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t28535 = rho_a[index]*2.0;
                double t28536 = 1/pow(t28535,1.0/3.0);
                double t28537 = Dd*t28536;
                double t28538 = t28537+1.0;
                double t28539 = 1/t28538;
                double t28540 = rho_a[index]*rho_a[index];
                double t28541 = exp(-C*t28536);
                double t28542 = 1/pow(t28535,1.1E1/3.0);
                v_gamma_aa_[index] = A*B*t28541*t28542*t28539*(t28540*(1.6E1/3.0)+t28540*(C*t28536*(7.0/9.0)+Dd*t28536* \
                   t28539*(7.0/9.0)-4.7E1/9.0))+A*B*t28541*t28542*t28539*(t28540+t28540*(C*t28536*(7.0/1.8E1)+Dd*t28536* \
                   t28539*(7.0/1.8E1)-1.3E1/1.8E1))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t28545 = rho_a[index]*2.0;
            double t28546 = 1/pow(t28545,1.0/3.0);
            double t28547 = Dd*t28546;
            double t28548 = t28547+1.0;
            double t28549 = 1/(t28548*t28548);
            double t28550 = rho_a[index]*rho_a[index];
            double t28551 = 1/t28548;
            double t28573 = C*t28546;
            double t28552 = exp(-t28573);
            double t28553 = 1/pow(t28545,1.1E1/3.0);
            double t28554 = 1/pow(t28545,4.0/3.0);
            double t28555 = Dd*Dd;
            double t28556 = 1/pow(t28545,5.0/3.0);
            double t28557 = 1/pow(t28545,7.0/3.0);
            double t28558 = 1/(t28548*t28548*t28548);
            double t28559 = 1/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t28560 = 1/pow(t28545,8.0/3.0);
            double t28561 = C*t28546*(1.0/9.0);
            double t28562 = Dd*t28551*t28546*(1.0/9.0);
            double t28563 = t28561+t28562-1.1E1/9.0;
            double t28564 = gamma_aa[index]*t28563;
            double t28565 = C*t28546*(1.0/1.8E1);
            double t28566 = Dd*t28551*t28546*(1.0/1.8E1);
            double t28567 = t28565+t28566-5.0/2.0;
            double t28568 = C*t28546*(7.0/1.8E1);
            double t28569 = Dd*t28551*t28546*(7.0/1.8E1);
            double t28570 = t28568+t28569-4.7E1/1.8E1;
            double t28571 = gamma_aa[index]*t28570*4.0;
            double t28572 = pow(rho_a[index],8.0/3.0);
            double t28574 = C*t28554*(1.0/2.7E1);
            double t28575 = Dd*t28551*t28554*(1.0/2.7E1);
            double t28589 = t28555*t28556*t28549*(1.0/2.7E1);
            double t28576 = t28574+t28575-t28589;
            double t28577 = gamma_aa[index]*t28576;
            double t28578 = C*t28554*(1.0/5.4E1);
            double t28579 = Dd*t28551*t28554*(1.0/5.4E1);
            double t28590 = t28555*t28556*t28549*(1.0/5.4E1);
            double t28580 = -t28590+t28578+t28579;
            double t28581 = C*t28554*(7.0/5.4E1);
            double t28582 = Dd*t28551*t28554*(7.0/5.4E1);
            double t28592 = t28555*t28556*t28549*(7.0/5.4E1);
            double t28583 = t28581+t28582-t28592;
            double t28584 = gamma_aa[index]*t28583*4.0;
            double t28585 = pow(rho_a[index],5.0/3.0);
            double t28586 = CFext*t28585*(8.0/3.0);
            double t28591 = gamma_aa[index]*t28580*2.0;
            double t28587 = -t28591+t28584+t28577+t28586;
            double t28607 = gamma_aa[index]*t28567*2.0;
            double t28608 = CFext*t28572*2.0;
            double t28588 = t28571-t28607-t28608+t28564;
            double t28593 = C*t28557*(4.0/8.1E1);
            double t28594 = Dd*t28551*t28557*(4.0/8.1E1);
            double t28595 = Dd*t28555*t28558*t28559*(1.0/3.24E2);
            double t28596 = t28593+t28594+t28595-t28560*t28555*t28549*(2.0/2.7E1);
            double t28597 = gamma_aa[index]*t28596;
            double t28598 = C*t28557*(2.0/8.1E1);
            double t28599 = Dd*t28551*t28557*(2.0/8.1E1);
            double t28600 = Dd*t28555*t28558*t28559*(1.0/6.48E2);
            double t28601 = t28600+t28598+t28599-t28560*t28555*t28549*(1.0/2.7E1);
            double t28602 = C*t28557*(1.4E1/8.1E1);
            double t28603 = Dd*t28551*t28557*(1.4E1/8.1E1);
            double t28604 = Dd*t28555*t28558*t28559*(7.0/6.48E2);
            double t28605 = t28602+t28603+t28604-t28560*t28555*t28549*(7.0/2.7E1);
            double t28606 = gamma_aa[index]*t28605*4.0;
            double t28609 = t28550*t28588;
            double t28610 = gamma_aa[index]*t28550*(2.2E1/3.0);
            double t28611 = t28610+t28609;
            double t28612 = 1/pow(t28545,1.9E1/3.0);
            double t28613 = gamma_aa[index]*rho_a[index]*(2.2E1/3.0);
            double t28614 = rho_a[index]*t28588;
            double t28617 = t28550*t28587;
            double t28615 = t28613+t28614-t28617;
            double t28616 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t28618 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            v_rho_a_rho_a_[index] = A*Dd*rho_a[index]*t28557*t28549*(-1.6E1/3.0)-A*t28550*t28553*t28555*t28558* \
               (1.6E1/9.0)+A*Dd*t28550*1/pow(t28545,1.0E1/3.0)*t28549*(8.0E1/9.0)+A*B*t28611*t28551*t28552*1/pow(t28545,1.7E1/ \
               3.0)*(3.08E2/9.0)-A*B*t28551*t28552*t28615*1/pow(t28545,1.4E1/3.0)*(4.4E1/3.0)+A*B*t28551*t28552*t28553* \
               (gamma_aa[index]*(8.0/3.0)+t28571+t28564-CFext*t28572*2.0-gamma_aa[index]*t28567*2.0-rho_a[index]* \
               t28587*2.0+t28550*(t28606+t28597-gamma_aa[index]*t28601*2.0))+A*B*t28551*t28552*t28553*(gamma_aa[index]* \
               (1.4E1/3.0)-rho_a[index]*t28587*2.0+t28550*(t28606+t28597-gamma_aa[index]*t28601*2.0-CFext*pow(rho_a[index],2.0/ \
               3.0)*(4.0E1/9.0)))+A*B*t28611*t28612*t28552*t28555*t28558*(4.0/9.0)+A*B*(C*C)*t28611*t28612*t28551* \
               t28552*(2.0/9.0)-A*B*C*t28611*t28551*t28552*t28618*(1.3E1/1.44E2)+A*B*C*t28551*t28552*t28615*t28616* \
               (1.0/2.4E1)-A*B*Dd*t28611*t28552*t28618*t28549*(1.3E1/1.44E2)+A*B*Dd*t28552*t28615*t28616*t28549*(1.0/ \
               2.4E1)+A*B*C*Dd*t28611*t28612*t28552*t28549*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t28620 = rho_a[index]*2.0;
                double t28621 = 1/pow(t28620,1.0/3.0);
                double t28622 = Dd*t28621;
                double t28623 = t28622+1.0;
                double t28624 = 1/t28623;
                double t28625 = 1/pow(t28620,4.0/3.0);
                double t28632 = C*t28621;
                double t28626 = exp(-t28632);
                double t28627 = 1/pow(t28620,1.1E1/3.0);
                double t28628 = rho_a[index]*rho_a[index];
                double t28629 = Dd*Dd;
                double t28630 = 1/(t28623*t28623);
                double t28631 = 1/pow(t28620,5.0/3.0);
                double t28633 = C*t28621*(7.0/9.0);
                double t28634 = Dd*t28621*t28624*(7.0/9.0);
                double t28635 = t28633+t28634-4.7E1/9.0;
                double t28636 = 1/pow(t28620,1.4E1/3.0);
                double t28637 = C*t28621*(7.0/1.8E1);
                double t28638 = Dd*t28621*t28624*(7.0/1.8E1);
                double t28639 = t28637+t28638-1.3E1/1.8E1;
                double t28640 = 1/rho_a[index];
                double t28641 = C*t28621*(1.0/9.0);
                double t28642 = Dd*t28621*t28624*(1.0/9.0);
                double t28643 = t28641+t28642-1.1E1/9.0;
                double t28644 = C*t28625*(7.0/5.4E1);
                double t28645 = Dd*t28624*t28625*(7.0/5.4E1);
                double t28646 = t28635*t28628;
                double t28647 = t28628*(1.6E1/3.0);
                double t28648 = t28646+t28647;
                double t28649 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t28650 = t28628*t28639;
                double t28651 = t28650+t28628;
                v_rho_a_gamma_aa_[index] = -A*B*t28624*t28626*t28627*(t28628*(t28644+t28645-t28640*t28643*(1.0/4.0) \
                   -t28630*t28631*t28629*(7.0/5.4E1))-rho_a[index]*t28639)+A*B*t28624*t28626*t28627*(rho_a[index]*(1.6E1/ \
                   3.0)+rho_a[index]*t28635-t28628*(C*t28625*(7.0/2.7E1)+Dd*t28624*t28625*(7.0/2.7E1)-t28630*t28631*t28629* \
                   (7.0/2.7E1)))+A*B*t28624*t28626*t28627*(t28620-t28628*(t28644+t28645+t28640*t28643*(1.0/4.0)-t28630* \
                   t28631*t28629*(7.0/5.4E1))+rho_a[index]*t28639)-A*B*t28624*t28651*t28626*t28636*(2.2E1/3.0)-A*B*t28624* \
                   t28626*t28636*t28648*(1.1E1/3.0)+A*B*C*t28624*t28651*t28626*t28649*(1.0/4.8E1)+A*B*C*t28624*t28626* \
                   t28648*t28649*(1.0/9.6E1)+A*B*Dd*t28630*t28651*t28626*t28649*(1.0/4.8E1)+A*B*Dd*t28630*t28626*t28648* \
                   t28649*(1.0/9.6E1);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void EDF1_C_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t27829 = rho_a[index]+rho_b[index];
            double t27830 = 1/pow(t27829,1.0/3.0);
            double t27831 = Dd*t27830;
            double t27832 = t27831+1.0;
            double t27833 = 1/t27832;
            double t27834 = t27829*t27829;
            double t27835 = t27834*(2.0/3.0);
            double t27836 = gamma_ab[index]*2.0;
            double t27837 = gamma_aa[index]+gamma_bb[index]+t27836;
            double t27838 = 1/t27829;
            functional_[index] = A*rho_a[index]*rho_b[index]*t27833*t27838*-4.0-A*B*t27833*1/pow(t27829,1.1E1/ \
               3.0)*exp(-C*t27830)*(t27834*t27837*(-2.0/3.0)+gamma_aa[index]*(t27835-rho_b[index]*rho_b[index])+gamma_bb[index]* \
               (t27835-rho_a[index]*rho_a[index])+rho_a[index]*rho_b[index]*((gamma_aa[index]+gamma_bb[index])*(C* \
               t27830*(1.0/1.8E1)+Dd*t27830*t27833*(1.0/1.8E1)-5.0/2.0)+CFext*(pow(rho_a[index],8.0/3.0)+pow(rho_b[index],8.0/ \
               3.0))-t27837*(C*t27830*(7.0/1.8E1)+Dd*t27830*t27833*(7.0/1.8E1)-4.7E1/1.8E1)-t27838*(gamma_aa[index]* \
               rho_a[index]+gamma_bb[index]*rho_b[index])*(C*t27830*(1.0/9.0)+Dd*t27830*t27833*(1.0/9.0)-1.1E1/9.0) \
               ));
        } else if (rho_a[index] > cutoff_) {
            functional_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            functional_[index] = 0.0;
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t27840 = rho_a[index]+rho_b[index];
            double t27841 = 1/pow(t27840,1.0/3.0);
            double t27842 = Dd*t27841;
            double t27843 = t27842+1.0;
            double t27844 = 1/t27843;
            double t27845 = t27840*t27840;
            double t27846 = t27845*(2.0/3.0);
            double t27847 = gamma_ab[index]*2.0;
            double t27848 = gamma_aa[index]+gamma_bb[index]+t27847;
            double t27849 = 1/t27840;
            double t27876 = C*t27841;
            double t27850 = exp(-t27876);
            double t27851 = C*t27841*(7.0/1.8E1);
            double t27852 = Dd*t27841*t27844*(7.0/1.8E1);
            double t27853 = t27851+t27852-4.7E1/1.8E1;
            double t27854 = t27853*t27848;
            double t27855 = gamma_aa[index]+gamma_bb[index];
            double t27856 = C*t27841*(1.0/1.8E1);
            double t27857 = Dd*t27841*t27844*(1.0/1.8E1);
            double t27858 = t27856+t27857-5.0/2.0;
            double t27859 = pow(rho_a[index],8.0/3.0);
            double t27860 = pow(rho_b[index],8.0/3.0);
            double t27861 = t27860+t27859;
            double t27862 = gamma_aa[index]*rho_a[index];
            double t27863 = gamma_bb[index]*rho_b[index];
            double t27864 = t27862+t27863;
            double t27865 = C*t27841*(1.0/9.0);
            double t27866 = Dd*t27841*t27844*(1.0/9.0);
            double t27867 = t27865+t27866-1.1E1/9.0;
            double t27868 = t27864*t27849*t27867;
            double t27884 = t27855*t27858;
            double t27885 = CFext*t27861;
            double t27869 = t27854-t27884-t27885+t27868;
            double t27870 = rho_b[index]*(4.0/3.0);
            double t27871 = 1/pow(t27840,4.0/3.0);
            double t27872 = 1/(t27843*t27843);
            double t27873 = Dd*Dd;
            double t27874 = 1/pow(t27840,5.0/3.0);
            double t27875 = 1/(t27840*t27840);
            double t27877 = rho_b[index]*rho_b[index];
            double t27878 = t27846-t27877;
            double t27879 = gamma_aa[index]*t27878;
            double t27880 = rho_a[index]*rho_a[index];
            double t27881 = t27880-t27846;
            double t27882 = gamma_bb[index]*t27881;
            double t27883 = t27845*t27848*(2.0/3.0);
            double t27886 = rho_a[index]*rho_b[index]*t27869;
            double t27887 = 1/(t27840*t27840*t27840*t27840*t27840);
            v_rho_a_[index] = A*rho_b[index]*t27844*t27849*-4.0+A*rho_a[index]*rho_b[index]*t27844*t27875*4.0+ \
               A*B*1/pow(t27840,1.1E1/3.0)*t27850*t27844*(rho_b[index]*t27869-gamma_aa[index]*(rho_a[index]*(4.0/ \
               3.0)+t27870)+gamma_bb[index]*(rho_a[index]*(2.0/3.0)-t27870)+t27848*(rho_a[index]*2.0+rho_b[index]* \
               2.0)*(2.0/3.0)-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],5.0/3.0)*(8.0/3.0)-t27855*(C*t27871* \
               (1.0/5.4E1)+Dd*t27844*t27871*(1.0/5.4E1)-t27872*t27873*t27874*(1.0/5.4E1))+t27848*(C*t27871*(7.0/5.4E1) \
               +Dd*t27844*t27871*(7.0/5.4E1)-t27872*t27873*t27874*(7.0/5.4E1))+t27864*t27849*(C*t27871*(1.0/2.7E1) \
               +Dd*t27844*t27871*(1.0/2.7E1)-t27872*t27873*t27874*(1.0/2.7E1))-gamma_aa[index]*t27849*t27867+t27864* \
               t27875*t27867))-A*Dd*rho_a[index]*rho_b[index]*1/pow(t27840,7.0/3.0)*t27872*(4.0/3.0)-A*B*1/pow(t27840,1.4E1/ \
               3.0)*t27850*t27844*(t27882+t27883+t27886-t27879)*(1.1E1/3.0)+A*B*C*t27850*t27844*t27887*(t27882+t27883+ \
               t27886-t27879)*(1.0/3.0)+A*B*Dd*t27850*t27872*t27887*(t27882+t27883+t27886-t27879)*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t27889 = rho_a[index]+rho_b[index];
            double t27890 = 1/pow(t27889,1.0/3.0);
            double t27891 = Dd*t27890;
            double t27892 = t27891+1.0;
            double t27893 = 1/t27892;
            double t27894 = t27889*t27889;
            double t27895 = t27894*(2.0/3.0);
            double t27896 = gamma_ab[index]*2.0;
            double t27897 = gamma_aa[index]+gamma_bb[index]+t27896;
            double t27898 = 1/t27889;
            double t27925 = C*t27890;
            double t27899 = exp(-t27925);
            double t27900 = C*t27890*(7.0/1.8E1);
            double t27901 = Dd*t27890*t27893*(7.0/1.8E1);
            double t27902 = t27900+t27901-4.7E1/1.8E1;
            double t27903 = t27902*t27897;
            double t27904 = gamma_aa[index]+gamma_bb[index];
            double t27905 = C*t27890*(1.0/1.8E1);
            double t27906 = Dd*t27890*t27893*(1.0/1.8E1);
            double t27907 = t27905+t27906-5.0/2.0;
            double t27908 = pow(rho_a[index],8.0/3.0);
            double t27909 = pow(rho_b[index],8.0/3.0);
            double t27910 = t27908+t27909;
            double t27911 = gamma_aa[index]*rho_a[index];
            double t27912 = gamma_bb[index]*rho_b[index];
            double t27913 = t27911+t27912;
            double t27914 = C*t27890*(1.0/9.0);
            double t27915 = Dd*t27890*t27893*(1.0/9.0);
            double t27916 = t27914+t27915-1.1E1/9.0;
            double t27917 = t27913*t27916*t27898;
            double t27933 = t27904*t27907;
            double t27934 = CFext*t27910;
            double t27918 = t27903-t27933-t27934+t27917;
            double t27919 = rho_a[index]*(4.0/3.0);
            double t27920 = 1/pow(t27889,4.0/3.0);
            double t27921 = 1/(t27892*t27892);
            double t27922 = Dd*Dd;
            double t27923 = 1/pow(t27889,5.0/3.0);
            double t27924 = 1/(t27889*t27889);
            double t27926 = rho_b[index]*rho_b[index];
            double t27927 = t27926-t27895;
            double t27928 = gamma_aa[index]*t27927;
            double t27929 = rho_a[index]*rho_a[index];
            double t27930 = t27929-t27895;
            double t27931 = gamma_bb[index]*t27930;
            double t27932 = t27894*t27897*(2.0/3.0);
            double t27935 = rho_a[index]*rho_b[index]*t27918;
            double t27936 = 1/(t27889*t27889*t27889*t27889*t27889);
            v_rho_b_[index] = A*rho_a[index]*t27893*t27898*-4.0+A*rho_a[index]*rho_b[index]*t27924*t27893*4.0+ \
               A*B*t27893*1/pow(t27889,1.1E1/3.0)*t27899*(rho_a[index]*t27918-gamma_bb[index]*(rho_b[index]*(4.0/ \
               3.0)+t27919)+gamma_aa[index]*(rho_b[index]*(2.0/3.0)-t27919)+t27897*(rho_a[index]*2.0+rho_b[index]* \
               2.0)*(2.0/3.0)-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],5.0/3.0)*(8.0/3.0)-t27904*(C*t27920* \
               (1.0/5.4E1)+Dd*t27920*t27893*(1.0/5.4E1)-t27921*t27922*t27923*(1.0/5.4E1))+t27897*(C*t27920*(7.0/5.4E1) \
               +Dd*t27920*t27893*(7.0/5.4E1)-t27921*t27922*t27923*(7.0/5.4E1))+t27913*t27898*(C*t27920*(1.0/2.7E1) \
               +Dd*t27920*t27893*(1.0/2.7E1)-t27921*t27922*t27923*(1.0/2.7E1))-gamma_bb[index]*t27916*t27898+t27913* \
               t27924*t27916))-A*Dd*rho_a[index]*rho_b[index]*t27921*1/pow(t27889,7.0/3.0)*(4.0/3.0)-A*B*t27893*1/ \
               pow(t27889,1.4E1/3.0)*t27899*(t27931+t27932+t27935+t27928)*(1.1E1/3.0)+A*B*C*t27936*t27893*t27899* \
               (t27931+t27932+t27935+t27928)*(1.0/3.0)+A*B*Dd*t27921*t27936*t27899*(t27931+t27932+t27935+t27928)* \
               (1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t27938 = rho_a[index]+rho_b[index];
                double t27939 = 1/pow(t27938,1.0/3.0);
                double t27940 = Dd*t27939;
                double t27941 = t27940+1.0;
                double t27942 = 1/t27941;
                v_gamma_aa_[index] = A*B*t27942*1/pow(t27938,1.1E1/3.0)*exp(-C*t27939)*(rho_b[index]*rho_b[index]+ \
                   rho_a[index]*rho_b[index]*(C*t27939*(1.0/3.0)+Dd*t27942*t27939*(1.0/3.0)+(rho_a[index]*(C*t27939*(1.0/ \
                   9.0)+Dd*t27942*t27939*(1.0/9.0)-1.1E1/9.0))/t27938-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t27944 = rho_a[index]+rho_b[index];
                double t27945 = 1/pow(t27944,1.0/3.0);
                double t27946 = Dd*t27945;
                double t27947 = t27946+1.0;
                double t27948 = 1/t27947;
                v_gamma_ab_[index] = A*B*1/pow(t27944,1.1E1/3.0)*t27948*exp(-C*t27945)*((t27944*t27944)*(4.0/3.0) \
                   +rho_a[index]*rho_b[index]*(C*t27945*(7.0/9.0)+Dd*t27945*t27948*(7.0/9.0)-4.7E1/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t27950 = rho_a[index]+rho_b[index];
                double t27951 = 1/pow(t27950,1.0/3.0);
                double t27952 = Dd*t27951;
                double t27953 = t27952+1.0;
                double t27954 = 1/t27953;
                v_gamma_bb_[index] = A*B*1/pow(t27950,1.1E1/3.0)*t27954*exp(-C*t27951)*(rho_a[index]*rho_a[index]+ \
                   rho_a[index]*rho_b[index]*(C*t27951*(1.0/3.0)+Dd*t27951*t27954*(1.0/3.0)+(rho_b[index]*(C*t27951*(1.0/ \
                   9.0)+Dd*t27951*t27954*(1.0/9.0)-1.1E1/9.0))/t27950-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t27958 = rho_a[index]+rho_b[index];
            double t27959 = 1/pow(t27958,1.0/3.0);
            double t27960 = Dd*t27959;
            double t27961 = t27960+1.0;
            double t27962 = 1/t27961;
            double t27963 = t27958*t27958;
            double t27964 = t27963*(2.0/3.0);
            double t27965 = gamma_ab[index]*2.0;
            double t27966 = gamma_aa[index]+gamma_bb[index]+t27965;
            double t27967 = 1/(t27961*t27961);
            double t27994 = C*t27959;
            double t27968 = exp(-t27994);
            double t27969 = C*t27959*(7.0/1.8E1);
            double t27970 = Dd*t27962*t27959*(7.0/1.8E1);
            double t27971 = t27970+t27969-4.7E1/1.8E1;
            double t27972 = t27971*t27966;
            double t27973 = gamma_aa[index]+gamma_bb[index];
            double t27974 = C*t27959*(1.0/1.8E1);
            double t27975 = Dd*t27962*t27959*(1.0/1.8E1);
            double t27976 = t27974+t27975-5.0/2.0;
            double t27977 = pow(rho_a[index],8.0/3.0);
            double t27978 = pow(rho_b[index],8.0/3.0);
            double t27979 = t27977+t27978;
            double t27980 = 1/t27958;
            double t27981 = gamma_aa[index]*rho_a[index];
            double t27982 = gamma_bb[index]*rho_b[index];
            double t27983 = t27981+t27982;
            double t27984 = C*t27959*(1.0/9.0);
            double t27985 = Dd*t27962*t27959*(1.0/9.0);
            double t27986 = t27984+t27985-1.1E1/9.0;
            double t27987 = t27980*t27983*t27986;
            double t28020 = t27973*t27976;
            double t28021 = CFext*t27979;
            double t27988 = t27972+t27987-t28020-t28021;
            double t27989 = rho_b[index]*(4.0/3.0);
            double t27990 = 1/pow(t27958,4.0/3.0);
            double t27991 = Dd*Dd;
            double t27992 = 1/pow(t27958,5.0/3.0);
            double t27993 = 1/(t27958*t27958);
            double t27995 = 1/pow(t27958,1.1E1/3.0);
            double t27996 = C*t27990*(1.0/5.4E1);
            double t27997 = Dd*t27962*t27990*(1.0/5.4E1);
            double t28028 = t27991*t27992*t27967*(1.0/5.4E1);
            double t27998 = t27996+t27997-t28028;
            double t27999 = pow(rho_a[index],5.0/3.0);
            double t28000 = CFext*t27999*(8.0/3.0);
            double t28001 = C*t27990*(7.0/5.4E1);
            double t28002 = Dd*t27962*t27990*(7.0/5.4E1);
            double t28030 = t27991*t27992*t27967*(7.0/5.4E1);
            double t28003 = t28001+t28002-t28030;
            double t28004 = t27966*t28003;
            double t28005 = C*t27990*(1.0/2.7E1);
            double t28006 = Dd*t27962*t27990*(1.0/2.7E1);
            double t28015 = t27991*t27992*t27967*(1.0/2.7E1);
            double t28007 = t28005+t28006-t28015;
            double t28008 = t27980*t27983*t28007;
            double t28009 = t27983*t27993*t27986;
            double t28029 = t27973*t27998;
            double t28031 = gamma_aa[index]*t27980*t27986;
            double t28010 = t28000+t28004-t28031+t28008+t28009-t28029;
            double t28011 = 1/pow(t27958,7.0/3.0);
            double t28012 = 1/(t27958*t27958*t27958);
            double t28013 = 1/(t27961*t27961*t27961);
            double t28014 = 1/pow(t27958,8.0/3.0);
            double t28016 = rho_a[index]*2.0;
            double t28017 = rho_b[index]*2.0;
            double t28018 = t28016+t28017;
            double t28019 = t27966*t28018*(2.0/3.0);
            double t28022 = rho_b[index]*t27988;
            double t28023 = rho_a[index]*(4.0/3.0);
            double t28024 = t27989+t28023;
            double t28025 = rho_a[index]*(2.0/3.0);
            double t28026 = t27989-t28025;
            double t28027 = gamma_bb[index]*t28026;
            double t28032 = rho_a[index]*rho_b[index]*t28010;
            double t28033 = gamma_aa[index]*t28024;
            double t28034 = -t28022+t28032+t28033+t28027-t28019;
            double t28035 = 1/(t27958*t27958*t27958*t27958*t27958);
            double t28036 = rho_b[index]*rho_b[index];
            double t28037 = t27964-t28036;
            double t28038 = gamma_aa[index]*t28037;
            double t28039 = rho_a[index]*rho_a[index];
            double t28040 = t27964-t28039;
            double t28041 = gamma_bb[index]*t28040;
            double t28044 = t27963*t27966*(2.0/3.0);
            double t28045 = rho_a[index]*rho_b[index]*t27988;
            double t28042 = t28041-t28044-t28045+t28038;
            double t28043 = 1/(t27958*t27958*t27958*t27958*t27958*t27958);
            double t28046 = 1/pow(t27958,1.9E1/3.0);
            v_rho_a_rho_a_[index] = A*rho_b[index]*t27962*t27993*8.0-A*Dd*rho_b[index]*t27967*t28011*(8.0/3.0) \
               -A*rho_a[index]*rho_b[index]*t27962*t28012*8.0+A*Dd*rho_a[index]*rho_b[index]*1/pow(t27958,1.0E1/3.0) \
               *t27967*(4.0E1/9.0)+A*B*t27962*1/pow(t27958,1.4E1/3.0)*t27968*t28034*(2.2E1/3.0)-A*B*t27962*1/pow(t27958,1.7E1/ \
               3.0)*t27968*t28042*(1.54E2/9.0)+A*B*t27962*t27968*t27995*(gamma_ab[index]*(8.0/3.0)+gamma_bb[index]* \
               2.0-rho_b[index]*t28010*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],2.0/3.0)*(4.0E1/9.0) \
               +t27973*(C*t28011*(2.0/8.1E1)+Dd*t27962*t28011*(2.0/8.1E1)-t27991*t27967*t28014*(1.0/2.7E1)+Dd*t27991* \
               t28012*t28013*(1.0/8.1E1))-t27966*(C*t28011*(1.4E1/8.1E1)+Dd*t27962*t28011*(1.4E1/8.1E1)-t27991*t27967* \
               t28014*(7.0/2.7E1)+Dd*t27991*t28012*t28013*(7.0/8.1E1))-t27980*t27983*(C*t28011*(4.0/8.1E1)+Dd*t27962* \
               t28011*(4.0/8.1E1)-t27991*t27967*t28014*(2.0/2.7E1)+Dd*t27991*t28012*t28013*(2.0/8.1E1))+gamma_aa[index]* \
               t27993*t27986*2.0+gamma_aa[index]*t27980*t28007*2.0-t27983*t27986*t28012*2.0-t27983*t27993*t28007* \
               2.0))-A*rho_a[index]*rho_b[index]*t27991*t27995*t28013*(8.0/9.0)-A*B*t27991*t27968*t28013*t28042*t28046* \
               (2.0/9.0)-A*B*(C*C)*t27962*t27968*t28042*t28046*(1.0/9.0)+A*B*C*t27962*t27968*t28042*t28043*(2.6E1/ \
               9.0)-A*B*C*t27962*t27968*t28034*t28035*(2.0/3.0)+A*B*Dd*t27967*t27968*t28042*t28043*(2.6E1/9.0)-A* \
               B*Dd*t27967*t27968*t28034*t28035*(2.0/3.0)-A*B*C*Dd*t27967*t27968*t28042*t28046*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28048 = rho_a[index]+rho_b[index];
            double t28049 = 1/pow(t28048,1.0/3.0);
            double t28050 = Dd*t28049;
            double t28051 = t28050+1.0;
            double t28052 = 1/t28051;
            double t28053 = 1/(t28048*t28048);
            double t28054 = 1/pow(t28048,7.0/3.0);
            double t28055 = 1/(t28051*t28051);
            double t28056 = t28048*t28048;
            double t28057 = t28056*(2.0/3.0);
            double t28058 = gamma_ab[index]*2.0;
            double t28059 = gamma_aa[index]+gamma_bb[index]+t28058;
            double t28060 = 1/t28048;
            double t28099 = C*t28049;
            double t28061 = exp(-t28099);
            double t28062 = C*t28049*(7.0/1.8E1);
            double t28063 = Dd*t28052*t28049*(7.0/1.8E1);
            double t28064 = t28062+t28063-4.7E1/1.8E1;
            double t28065 = t28064*t28059;
            double t28066 = gamma_aa[index]+gamma_bb[index];
            double t28067 = 1/pow(t28048,4.0/3.0);
            double t28068 = Dd*Dd;
            double t28069 = 1/pow(t28048,5.0/3.0);
            double t28070 = C*t28049*(1.0/9.0);
            double t28071 = Dd*t28052*t28049*(1.0/9.0);
            double t28072 = t28070+t28071-1.1E1/9.0;
            double t28073 = gamma_aa[index]*rho_a[index];
            double t28074 = gamma_bb[index]*rho_b[index];
            double t28075 = t28073+t28074;
            double t28076 = C*t28067*(1.0/5.4E1);
            double t28077 = Dd*t28052*t28067*(1.0/5.4E1);
            double t28103 = t28055*t28068*t28069*(1.0/5.4E1);
            double t28078 = -t28103+t28076+t28077;
            double t28079 = C*t28067*(7.0/5.4E1);
            double t28080 = Dd*t28052*t28067*(7.0/5.4E1);
            double t28106 = t28055*t28068*t28069*(7.0/5.4E1);
            double t28081 = -t28106+t28080+t28079;
            double t28082 = t28081*t28059;
            double t28083 = C*t28067*(1.0/2.7E1);
            double t28084 = Dd*t28052*t28067*(1.0/2.7E1);
            double t28097 = t28055*t28068*t28069*(1.0/2.7E1);
            double t28085 = t28083+t28084-t28097;
            double t28086 = t28060*t28075*t28085;
            double t28087 = t28053*t28072*t28075;
            double t28088 = C*t28049*(1.0/1.8E1);
            double t28089 = Dd*t28052*t28049*(1.0/1.8E1);
            double t28090 = t28088+t28089-5.0/2.0;
            double t28091 = pow(rho_a[index],8.0/3.0);
            double t28092 = pow(rho_b[index],8.0/3.0);
            double t28093 = t28091+t28092;
            double t28094 = 1/(t28048*t28048*t28048);
            double t28095 = 1/(t28051*t28051*t28051);
            double t28096 = 1/pow(t28048,8.0/3.0);
            double t28098 = t28060*t28072*t28075;
            double t28100 = t28090*t28066;
            double t28101 = CFext*t28093;
            double t28102 = rho_b[index]*(4.0/3.0);
            double t28104 = pow(rho_a[index],5.0/3.0);
            double t28105 = CFext*t28104*(8.0/3.0);
            double t28114 = t28066*t28078;
            double t28124 = gamma_aa[index]*t28060*t28072;
            double t28107 = t28105-t28114-t28124+t28082+t28086+t28087;
            double t28108 = 1/pow(t28048,1.4E1/3.0);
            double t28109 = rho_a[index]*2.0;
            double t28110 = rho_b[index]*2.0;
            double t28111 = t28110+t28109;
            double t28112 = rho_a[index]*(4.0/3.0);
            double t28113 = t28102+t28112;
            double t28115 = pow(rho_b[index],5.0/3.0);
            double t28116 = CFext*t28115*(8.0/3.0);
            double t28117 = 1/pow(t28048,1.1E1/3.0);
            double t28118 = t28100+t28101-t28065-t28098;
            double t28119 = rho_b[index]*t28118;
            double t28120 = gamma_aa[index]*t28113;
            double t28121 = rho_a[index]*(2.0/3.0);
            double t28122 = t28102-t28121;
            double t28123 = gamma_bb[index]*t28122;
            double t28125 = rho_a[index]*rho_b[index]*t28107;
            double t28128 = t28111*t28059*(2.0/3.0);
            double t28126 = t28120+t28123+t28125+t28119-t28128;
            double t28127 = 1/(t28048*t28048*t28048*t28048*t28048);
            double t28129 = rho_b[index]*(2.0/3.0);
            double t28130 = t28112-t28129;
            double t28131 = gamma_aa[index]*t28130;
            double t28132 = gamma_bb[index]*t28113;
            double t28136 = gamma_bb[index]*t28060*t28072;
            double t28133 = -t28114+t28116+t28082-t28136+t28086+t28087;
            double t28134 = rho_a[index]*rho_b[index]*t28133;
            double t28135 = rho_a[index]*t28118;
            double t28137 = t28131+t28132+t28134+t28135-t28128;
            double t28138 = rho_b[index]*rho_b[index];
            double t28139 = t28057-t28138;
            double t28140 = gamma_aa[index]*t28139;
            double t28141 = rho_a[index]*rho_a[index];
            double t28142 = t28141-t28057;
            double t28143 = gamma_bb[index]*t28142;
            double t28144 = t28056*t28059*(2.0/3.0);
            double t28145 = 1/(t28048*t28048*t28048*t28048*t28048*t28048);
            double t28146 = rho_a[index]*rho_b[index]*(t28100+t28101-t28065-t28098);
            double t28147 = t28140-t28143-t28144+t28146;
            double t28148 = 1/pow(t28048,1.9E1/3.0);
            v_rho_a_rho_b_[index] = A*t28060*t28052*-4.0+A*rho_a[index]*t28052*t28053*4.0+A*rho_b[index]*t28052* \
               t28053*4.0-A*Dd*rho_a[index]*t28054*t28055*(4.0/3.0)-A*Dd*rho_b[index]*t28054*t28055*(4.0/3.0)-A*rho_a[index]* \
               rho_b[index]*t28052*t28094*8.0+A*Dd*rho_a[index]*rho_b[index]*t28055*1/pow(t28048,1.0E1/3.0)*(4.0E1/ \
               9.0)-A*B*t28052*t28061*t28117*(gamma_ab[index]*(-8.0/3.0)+t28100+t28101-t28065-t28098+rho_a[index]* \
               t28107+rho_b[index]*(t28116+t28082+t28086+t28087-t28066*t28078-gamma_bb[index]*t28060*t28072)+rho_a[index]* \
               rho_b[index]*(t28066*(C*t28054*(2.0/8.1E1)+Dd*t28052*t28054*(2.0/8.1E1)-t28055*t28068*t28096*(1.0/ \
               2.7E1)+Dd*t28094*t28068*t28095*(1.0/8.1E1))-t28059*(C*t28054*(1.4E1/8.1E1)+Dd*t28052*t28054*(1.4E1/ \
               8.1E1)-t28055*t28068*t28096*(7.0/2.7E1)+Dd*t28094*t28068*t28095*(7.0/8.1E1))-t28060*t28075*(C*t28054* \
               (4.0/8.1E1)+Dd*t28052*t28054*(4.0/8.1E1)-t28055*t28068*t28096*(2.0/2.7E1)+Dd*t28094*t28068*t28095* \
               (2.0/8.1E1))+gamma_aa[index]*t28053*t28072+gamma_aa[index]*t28060*t28085+gamma_bb[index]*t28053*t28072+ \
               gamma_bb[index]*t28060*t28085-t28053*t28075*t28085*2.0-t28072*t28075*t28094*2.0))+A*B*t28052*t28061* \
               1/pow(t28048,1.7E1/3.0)*(-t28140+t28143+t28144+rho_a[index]*rho_b[index]*(t28065+t28098-CFext*t28093- \
               t28090*t28066))*(1.54E2/9.0)+A*B*t28052*t28061*t28108*t28126*(1.1E1/3.0)+A*B*t28052*t28061*t28108* \
               (t28131+t28132+t28134+t28135-t28111*t28059*(2.0/3.0))*(1.1E1/3.0)-A*rho_a[index]*rho_b[index]*t28117* \
               t28068*t28095*(8.0/9.0)-A*B*t28061*t28147*t28148*t28068*t28095*(2.0/9.0)-A*B*(C*C)*t28052*t28061*t28147* \
               t28148*(1.0/9.0)-A*B*C*t28052*t28061*t28126*t28127*(1.0/3.0)-A*B*C*t28052*t28061*t28127*t28137*(1.0/ \
               3.0)+A*B*C*t28052*t28061*t28145*t28147*(2.6E1/9.0)-A*B*Dd*t28061*t28126*t28055*t28127*(1.0/3.0)-A* \
               B*Dd*t28061*t28055*t28127*t28137*(1.0/3.0)+A*B*Dd*t28061*t28055*t28145*t28147*(2.6E1/9.0)-A*B*C*Dd* \
               t28061*t28055*t28147*t28148*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28150 = rho_a[index]+rho_b[index];
            double t28151 = 1/pow(t28150,1.0/3.0);
            double t28152 = Dd*t28151;
            double t28153 = t28152+1.0;
            double t28154 = 1/t28153;
            double t28155 = t28150*t28150;
            double t28156 = t28155*(2.0/3.0);
            double t28157 = gamma_ab[index]*2.0;
            double t28158 = gamma_aa[index]+gamma_bb[index]+t28157;
            double t28159 = 1/(t28153*t28153);
            double t28186 = C*t28151;
            double t28160 = exp(-t28186);
            double t28161 = C*t28151*(7.0/1.8E1);
            double t28162 = Dd*t28151*t28154*(7.0/1.8E1);
            double t28163 = t28161+t28162-4.7E1/1.8E1;
            double t28164 = t28163*t28158;
            double t28165 = gamma_aa[index]+gamma_bb[index];
            double t28166 = C*t28151*(1.0/1.8E1);
            double t28167 = Dd*t28151*t28154*(1.0/1.8E1);
            double t28168 = t28166+t28167-5.0/2.0;
            double t28169 = pow(rho_a[index],8.0/3.0);
            double t28170 = pow(rho_b[index],8.0/3.0);
            double t28171 = t28170+t28169;
            double t28172 = 1/t28150;
            double t28173 = gamma_aa[index]*rho_a[index];
            double t28174 = gamma_bb[index]*rho_b[index];
            double t28175 = t28173+t28174;
            double t28176 = C*t28151*(1.0/9.0);
            double t28177 = Dd*t28151*t28154*(1.0/9.0);
            double t28178 = t28176+t28177-1.1E1/9.0;
            double t28179 = t28172*t28175*t28178;
            double t28212 = t28165*t28168;
            double t28213 = CFext*t28171;
            double t28180 = -t28212-t28213+t28164+t28179;
            double t28181 = rho_a[index]*(4.0/3.0);
            double t28182 = 1/pow(t28150,4.0/3.0);
            double t28183 = Dd*Dd;
            double t28184 = 1/pow(t28150,5.0/3.0);
            double t28185 = 1/(t28150*t28150);
            double t28187 = 1/pow(t28150,1.1E1/3.0);
            double t28188 = C*t28182*(1.0/5.4E1);
            double t28189 = Dd*t28154*t28182*(1.0/5.4E1);
            double t28220 = t28183*t28184*t28159*(1.0/5.4E1);
            double t28190 = -t28220+t28188+t28189;
            double t28191 = pow(rho_b[index],5.0/3.0);
            double t28192 = CFext*t28191*(8.0/3.0);
            double t28193 = C*t28182*(7.0/5.4E1);
            double t28194 = Dd*t28154*t28182*(7.0/5.4E1);
            double t28222 = t28183*t28184*t28159*(7.0/5.4E1);
            double t28195 = -t28222+t28193+t28194;
            double t28196 = t28158*t28195;
            double t28197 = C*t28182*(1.0/2.7E1);
            double t28198 = Dd*t28154*t28182*(1.0/2.7E1);
            double t28207 = t28183*t28184*t28159*(1.0/2.7E1);
            double t28199 = -t28207+t28197+t28198;
            double t28200 = t28172*t28175*t28199;
            double t28201 = t28175*t28185*t28178;
            double t28221 = t28190*t28165;
            double t28223 = gamma_bb[index]*t28172*t28178;
            double t28202 = t28200+t28201-t28221-t28223+t28192+t28196;
            double t28203 = 1/pow(t28150,7.0/3.0);
            double t28204 = 1/(t28150*t28150*t28150);
            double t28205 = 1/(t28153*t28153*t28153);
            double t28206 = 1/pow(t28150,8.0/3.0);
            double t28208 = rho_a[index]*2.0;
            double t28209 = rho_b[index]*2.0;
            double t28210 = t28208+t28209;
            double t28211 = t28210*t28158*(2.0/3.0);
            double t28214 = rho_a[index]*t28180;
            double t28215 = rho_b[index]*(2.0/3.0);
            double t28216 = t28215-t28181;
            double t28217 = gamma_aa[index]*t28216;
            double t28218 = rho_b[index]*(4.0/3.0);
            double t28219 = t28181+t28218;
            double t28224 = 1/(t28150*t28150*t28150*t28150*t28150);
            double t28225 = rho_b[index]*rho_b[index];
            double t28226 = t28225-t28156;
            double t28227 = gamma_aa[index]*t28226;
            double t28228 = rho_a[index]*rho_a[index];
            double t28229 = t28156-t28228;
            double t28230 = t28155*t28158*(2.0/3.0);
            double t28231 = rho_a[index]*rho_b[index]*t28180;
            double t28234 = gamma_bb[index]*t28229;
            double t28232 = t28230+t28231-t28234+t28227;
            double t28233 = 1/(t28150*t28150*t28150*t28150*t28150*t28150);
            double t28235 = 1/pow(t28150,1.9E1/3.0);
            v_rho_b_rho_b_[index] = A*rho_a[index]*t28154*t28185*8.0-A*Dd*rho_a[index]*t28203*t28159*(8.0/3.0) \
               -A*rho_a[index]*rho_b[index]*t28204*t28154*8.0+A*Dd*rho_a[index]*rho_b[index]*1/pow(t28150,1.0E1/3.0) \
               *t28159*(4.0E1/9.0)+A*B*1/pow(t28150,1.7E1/3.0)*t28160*t28232*t28154*(1.54E2/9.0)-A*B*1/pow(t28150,1.4E1/ \
               3.0)*t28160*t28154*(t28211+t28214+t28217-gamma_bb[index]*t28219-rho_a[index]*rho_b[index]*t28202)* \
               (2.2E1/3.0)+A*B*t28160*t28154*t28187*(gamma_aa[index]*2.0+gamma_ab[index]*(8.0/3.0)-rho_a[index]*t28202* \
               2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],2.0/3.0)*(4.0E1/9.0)+t28165*(C*t28203*(2.0/8.1E1) \
               +Dd*t28203*t28154*(2.0/8.1E1)-t28206*t28183*t28159*(1.0/2.7E1)+Dd*t28204*t28205*t28183*(1.0/8.1E1) \
               )-t28158*(C*t28203*(1.4E1/8.1E1)+Dd*t28203*t28154*(1.4E1/8.1E1)-t28206*t28183*t28159*(7.0/2.7E1)+Dd* \
               t28204*t28205*t28183*(7.0/8.1E1))-t28172*t28175*(C*t28203*(4.0/8.1E1)+Dd*t28203*t28154*(4.0/8.1E1) \
               -t28206*t28183*t28159*(2.0/2.7E1)+Dd*t28204*t28205*t28183*(2.0/8.1E1))+gamma_bb[index]*t28172*t28199* \
               2.0+gamma_bb[index]*t28185*t28178*2.0-t28204*t28175*t28178*2.0-t28175*t28185*t28199*2.0))-A*rho_a[index]* \
               rho_b[index]*t28205*t28183*t28187*(8.0/9.0)+A*B*C*t28160*t28224*t28154*(t28211+t28214+t28217-gamma_bb[index]* \
               t28219-rho_a[index]*rho_b[index]*t28202)*(2.0/3.0)+A*B*Dd*t28160*t28224*t28159*(t28211+t28214+t28217- \
               gamma_bb[index]*t28219-rho_a[index]*rho_b[index]*t28202)*(2.0/3.0)+A*B*t28160*t28205*t28235*t28183* \
               (t28230+t28231-t28234+t28227)*(2.0/9.0)+A*B*(C*C)*t28160*t28154*t28235*(t28230+t28231-t28234+t28227) \
               *(1.0/9.0)-A*B*C*t28160*t28232*t28233*t28154*(2.6E1/9.0)-A*B*Dd*t28160*t28232*t28233*t28159*(2.6E1/ \
               9.0)+A*B*C*Dd*t28160*t28235*t28159*(t28230+t28231-t28234+t28227)*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28237 = rho_a[index]+rho_b[index];
                double t28238 = 1/pow(t28237,1.0/3.0);
                double t28239 = Dd*t28238;
                double t28240 = t28239+1.0;
                double t28241 = 1/t28240;
                double t28255 = C*t28238;
                double t28242 = exp(-t28255);
                double t28243 = C*t28238*(1.0/3.0);
                double t28244 = Dd*t28241*t28238*(1.0/3.0);
                double t28245 = 1/t28237;
                double t28246 = C*t28238*(1.0/9.0);
                double t28247 = Dd*t28241*t28238*(1.0/9.0);
                double t28248 = t28246+t28247-1.1E1/9.0;
                double t28249 = rho_a[index]*t28245*t28248;
                double t28250 = t28243+t28244+t28249-1.0/9.0;
                double t28251 = 1/pow(t28237,4.0/3.0);
                double t28252 = Dd*Dd;
                double t28253 = 1/pow(t28237,5.0/3.0);
                double t28254 = 1/(t28240*t28240);
                double t28256 = rho_b[index]*rho_b[index];
                double t28257 = rho_a[index]*rho_b[index]*t28250;
                double t28258 = t28256+t28257;
                double t28259 = 1/(t28237*t28237*t28237*t28237*t28237);
                v_rho_a_gamma_aa_[index] = A*B*t28241*t28242*1/pow(t28237,1.4E1/3.0)*t28258*(-1.1E1/3.0)+A*B*t28241* \
                   t28242*1/pow(t28237,1.1E1/3.0)*(rho_b[index]*t28250-rho_a[index]*rho_b[index]*(C*t28251*(1.0/9.0)- \
                   t28245*t28248+rho_a[index]*t28245*(C*t28251*(1.0/2.7E1)+Dd*t28241*t28251*(1.0/2.7E1)-t28252*t28253* \
                   t28254*(1.0/2.7E1))+rho_a[index]*1/(t28237*t28237)*t28248+Dd*t28241*t28251*(1.0/9.0)-t28252*t28253* \
                   t28254*(1.0/9.0)))+A*B*C*t28241*t28242*t28258*t28259*(1.0/3.0)+A*B*Dd*t28242*t28254*t28258*t28259* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28261 = rho_a[index]+rho_b[index];
                double t28262 = 1/pow(t28261,1.0/3.0);
                double t28263 = Dd*t28262;
                double t28264 = t28263+1.0;
                double t28265 = 1/t28264;
                double t28271 = C*t28262;
                double t28266 = exp(-t28271);
                double t28267 = C*t28262*(7.0/9.0);
                double t28268 = Dd*t28262*t28265*(7.0/9.0);
                double t28269 = t28267+t28268-4.7E1/9.0;
                double t28270 = 1/pow(t28261,4.0/3.0);
                double t28272 = t28261*t28261;
                double t28273 = t28272*(4.0/3.0);
                double t28274 = rho_a[index]*rho_b[index]*t28269;
                double t28275 = t28273+t28274;
                double t28276 = 1/(t28261*t28261*t28261*t28261*t28261);
                double t28277 = 1/(t28264*t28264);
                v_rho_a_gamma_ab_[index] = A*B*1/pow(t28261,1.4E1/3.0)*t28265*t28266*t28275*(-1.1E1/3.0)+A*B*1/pow(t28261,1.1E1/ \
                   3.0)*t28265*t28266*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_b[index]*t28269-rho_a[index]* \
                   rho_b[index]*(C*t28270*(7.0/2.7E1)-(Dd*Dd)*1/pow(t28261,5.0/3.0)*t28277*(7.0/2.7E1)+Dd*t28270*t28265* \
                   (7.0/2.7E1)))+A*B*C*t28265*t28266*t28275*t28276*(1.0/3.0)+A*B*Dd*t28266*t28275*t28276*t28277*(1.0/ \
                   3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28279 = rho_a[index]+rho_b[index];
                double t28280 = 1/pow(t28279,1.0/3.0);
                double t28281 = Dd*t28280;
                double t28282 = t28281+1.0;
                double t28283 = 1/t28282;
                double t28297 = C*t28280;
                double t28284 = exp(-t28297);
                double t28285 = C*t28280*(1.0/3.0);
                double t28286 = Dd*t28280*t28283*(1.0/3.0);
                double t28287 = 1/t28279;
                double t28288 = C*t28280*(1.0/9.0);
                double t28289 = Dd*t28280*t28283*(1.0/9.0);
                double t28290 = t28288+t28289-1.1E1/9.0;
                double t28291 = rho_b[index]*t28290*t28287;
                double t28292 = t28291+t28285+t28286-1.0/9.0;
                double t28293 = 1/pow(t28279,4.0/3.0);
                double t28294 = Dd*Dd;
                double t28295 = 1/pow(t28279,5.0/3.0);
                double t28296 = 1/(t28282*t28282);
                double t28298 = rho_a[index]*rho_a[index];
                double t28299 = rho_a[index]*rho_b[index]*t28292;
                double t28300 = t28298+t28299;
                double t28301 = 1/(t28279*t28279*t28279*t28279*t28279);
                v_rho_a_gamma_bb_[index] = A*B*t28300*t28283*t28284*1/pow(t28279,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t28283* \
                   t28284*1/pow(t28279,1.1E1/3.0)*(rho_a[index]*2.0+rho_b[index]*t28292-rho_a[index]*rho_b[index]*(C* \
                   t28293*(1.0/9.0)+rho_b[index]*t28287*(C*t28293*(1.0/2.7E1)+Dd*t28283*t28293*(1.0/2.7E1)-t28294*t28295* \
                   t28296*(1.0/2.7E1))+rho_b[index]*t28290*1/(t28279*t28279)+Dd*t28283*t28293*(1.0/9.0)-t28294*t28295* \
                   t28296*(1.0/9.0)))+A*B*C*t28300*t28301*t28283*t28284*(1.0/3.0)+A*B*Dd*t28300*t28301*t28284*t28296* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28303 = rho_a[index]+rho_b[index];
                double t28304 = 1/pow(t28303,1.0/3.0);
                double t28305 = Dd*t28304;
                double t28306 = t28305+1.0;
                double t28307 = 1/t28306;
                double t28321 = C*t28304;
                double t28308 = exp(-t28321);
                double t28309 = C*t28304*(1.0/3.0);
                double t28310 = Dd*t28304*t28307*(1.0/3.0);
                double t28311 = 1/t28303;
                double t28312 = C*t28304*(1.0/9.0);
                double t28313 = Dd*t28304*t28307*(1.0/9.0);
                double t28314 = t28312+t28313-1.1E1/9.0;
                double t28315 = rho_a[index]*t28311*t28314;
                double t28316 = t28310+t28315+t28309-1.0/9.0;
                double t28317 = 1/pow(t28303,4.0/3.0);
                double t28318 = Dd*Dd;
                double t28319 = 1/pow(t28303,5.0/3.0);
                double t28320 = 1/(t28306*t28306);
                double t28322 = rho_b[index]*rho_b[index];
                double t28323 = rho_a[index]*rho_b[index]*t28316;
                double t28324 = t28322+t28323;
                double t28325 = 1/(t28303*t28303*t28303*t28303*t28303);
                v_rho_b_gamma_aa_[index] = A*B*1/pow(t28303,1.4E1/3.0)*t28324*t28307*t28308*(-1.1E1/3.0)+A*B*1/pow(t28303,1.1E1/ \
                   3.0)*t28307*t28308*(rho_b[index]*2.0+rho_a[index]*t28316-rho_a[index]*rho_b[index]*(C*t28317*(1.0/ \
                   9.0)+rho_a[index]*t28311*(C*t28317*(1.0/2.7E1)+Dd*t28307*t28317*(1.0/2.7E1)-t28320*t28318*t28319*(1.0/ \
                   2.7E1))+rho_a[index]*1/(t28303*t28303)*t28314+Dd*t28307*t28317*(1.0/9.0)-t28320*t28318*t28319*(1.0/ \
                   9.0)))+A*B*C*t28324*t28307*t28325*t28308*(1.0/3.0)+A*B*Dd*t28320*t28324*t28325*t28308*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28327 = rho_a[index]+rho_b[index];
                double t28328 = 1/pow(t28327,1.0/3.0);
                double t28329 = Dd*t28328;
                double t28330 = t28329+1.0;
                double t28331 = 1/t28330;
                double t28337 = C*t28328;
                double t28332 = exp(-t28337);
                double t28333 = C*t28328*(7.0/9.0);
                double t28334 = Dd*t28331*t28328*(7.0/9.0);
                double t28335 = t28333+t28334-4.7E1/9.0;
                double t28336 = 1/pow(t28327,4.0/3.0);
                double t28338 = t28327*t28327;
                double t28339 = t28338*(4.0/3.0);
                double t28340 = rho_a[index]*rho_b[index]*t28335;
                double t28341 = t28340+t28339;
                double t28342 = 1/(t28327*t28327*t28327*t28327*t28327);
                double t28343 = 1/(t28330*t28330);
                v_rho_b_gamma_ab_[index] = A*B*t28331*t28332*t28341*1/pow(t28327,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t28331* \
                   t28332*1/pow(t28327,1.1E1/3.0)*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_a[index]*t28335- \
                   rho_a[index]*rho_b[index]*(C*t28336*(7.0/2.7E1)-(Dd*Dd)*t28343*1/pow(t28327,5.0/3.0)*(7.0/2.7E1)+Dd* \
                   t28331*t28336*(7.0/2.7E1)))+A*B*C*t28331*t28332*t28341*t28342*(1.0/3.0)+A*B*Dd*t28332*t28341*t28342* \
                   t28343*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28345 = rho_a[index]+rho_b[index];
                double t28346 = 1/pow(t28345,1.0/3.0);
                double t28347 = Dd*t28346;
                double t28348 = t28347+1.0;
                double t28349 = 1/t28348;
                double t28363 = C*t28346;
                double t28350 = exp(-t28363);
                double t28351 = C*t28346*(1.0/3.0);
                double t28352 = Dd*t28346*t28349*(1.0/3.0);
                double t28353 = 1/t28345;
                double t28354 = C*t28346*(1.0/9.0);
                double t28355 = Dd*t28346*t28349*(1.0/9.0);
                double t28356 = t28354+t28355-1.1E1/9.0;
                double t28357 = rho_b[index]*t28353*t28356;
                double t28358 = t28351+t28352+t28357-1.0/9.0;
                double t28359 = 1/pow(t28345,4.0/3.0);
                double t28360 = Dd*Dd;
                double t28361 = 1/pow(t28345,5.0/3.0);
                double t28362 = 1/(t28348*t28348);
                double t28364 = rho_a[index]*rho_a[index];
                double t28365 = rho_a[index]*rho_b[index]*t28358;
                double t28366 = t28364+t28365;
                double t28367 = 1/(t28345*t28345*t28345*t28345*t28345);
                v_rho_b_gamma_bb_[index] = A*B*t28350*1/pow(t28345,1.4E1/3.0)*t28366*t28349*(-1.1E1/3.0)+A*B*t28350* \
                   1/pow(t28345,1.1E1/3.0)*t28349*(rho_a[index]*t28358-rho_a[index]*rho_b[index]*(C*t28359*(1.0/9.0)- \
                   t28353*t28356+rho_b[index]*t28353*(C*t28359*(1.0/2.7E1)+Dd*t28349*t28359*(1.0/2.7E1)-t28360*t28361* \
                   t28362*(1.0/2.7E1))+rho_b[index]*1/(t28345*t28345)*t28356+Dd*t28349*t28359*(1.0/9.0)-t28360*t28361* \
                   t28362*(1.0/9.0)))+A*B*C*t28350*t28366*t28349*t28367*(1.0/3.0)+A*B*Dd*t28350*t28362*t28366*t28367* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

