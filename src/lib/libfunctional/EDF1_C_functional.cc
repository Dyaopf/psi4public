/**********************************************************
* EDF1_C_functional.cc: definitions for EDF1_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "EDF1_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

EDF1_C_Functional::EDF1_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "EDF1_C";
    description_ = "Empirical Density Function #1 (Correlation only)";
    citation_ = "R.D. Adamson, P.M.W. Gill, and J.A. Pople, Chem. Phys. Lett., 284, 6-11, 1998";
    
    double A = 5.5000000000000000E-02;
    params_.push_back(make_pair("A",A));
    double B = 1.5800000000000000E-01;
    params_.push_back(make_pair("B",B));
    double C = 2.5000000000000000E-01;
    params_.push_back(make_pair("C",C));
    double Dd = 3.5049999999999998E-01;
    params_.push_back(make_pair("Dd",Dd));
    double CFext = 3.6462398978764774E+01;
    params_.push_back(make_pair("CFext",CFext));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
EDF1_C_Functional::~EDF1_C_Functional()
{
}
void EDF1_C_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensityA();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t28768 = rho_a[index]*2.0;
            double t28769 = 1.0/pow(t28768,1.0/3.0);
            double t28770 = Dd*t28769;
            double t28771 = t28770+1.0;
            double t28772 = 1.0/t28771;
            double t28773 = rho_a[index]*rho_a[index];
            functional_[index] = A*rho_a[index]*t28772*-2.0-A*B*t28772*1.0/pow(t28768,1.1E1/3.0)*exp(-C*t28769) \
               *(t28773*(CFext*pow(rho_a[index],8.0/3.0)*2.0-gamma_aa[index]*(C*t28769*(1.0/9.0)+Dd*t28772*t28769* \
               (1.0/9.0)-1.1E1/9.0)+gamma_aa[index]*(C*t28769*(1.0/1.8E1)+Dd*t28772*t28769*(1.0/1.8E1)-5.0/2.0)*2.0- \
               gamma_aa[index]*(C*t28769*(7.0/1.8E1)+Dd*t28772*t28769*(7.0/1.8E1)-4.7E1/1.8E1)*4.0)-gamma_aa[index]* \
               t28773*(2.2E1/3.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t28775 = rho_a[index]*2.0;
            double t28776 = 1.0/pow(t28775,1.0/3.0);
            double t28777 = Dd*t28776;
            double t28778 = t28777+1.0;
            double t28779 = rho_a[index]*rho_a[index];
            double t28780 = 1.0/t28778;
            double t28799 = C*t28776;
            double t28781 = exp(-t28799);
            double t28782 = 1.0/pow(t28775,4.0/3.0);
            double t28783 = 1.0/(t28778*t28778);
            double t28784 = Dd*Dd;
            double t28785 = 1.0/pow(t28775,5.0/3.0);
            double t28786 = C*t28776*(1.0/9.0);
            double t28787 = Dd*t28780*t28776*(1.0/9.0);
            double t28788 = t28786+t28787-1.1E1/9.0;
            double t28789 = gamma_aa[index]*t28788;
            double t28790 = C*t28776*(1.0/1.8E1);
            double t28791 = Dd*t28780*t28776*(1.0/1.8E1);
            double t28792 = t28790+t28791-5.0/2.0;
            double t28793 = C*t28776*(7.0/1.8E1);
            double t28794 = Dd*t28780*t28776*(7.0/1.8E1);
            double t28795 = t28793+t28794-4.7E1/1.8E1;
            double t28796 = gamma_aa[index]*t28795*4.0;
            double t28797 = pow(rho_a[index],8.0/3.0);
            double t28800 = gamma_aa[index]*t28792*2.0;
            double t28801 = CFext*t28797*2.0;
            double t28798 = -t28800-t28801+t28796+t28789;
            double t28802 = t28779*t28798;
            double t28803 = gamma_aa[index]*t28779*(2.2E1/3.0);
            double t28804 = t28802+t28803;
            double t28805 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            v_rho_a_[index] = -A*t28780-A*Dd*t28783*1.0/pow(t28775,7.0/3.0)*t28779*(4.0/3.0)-A*B*t28804*t28780* \
               t28781*1.0/pow(t28775,1.4E1/3.0)*(1.1E1/3.0)+A*B*t28780*t28781*1.0/pow(t28775,1.1E1/3.0)*(-t28779* \
               (CFext*pow(rho_a[index],5.0/3.0)*(8.0/3.0)+gamma_aa[index]*(C*t28782*(1.0/2.7E1)+Dd*t28780*t28782* \
               (1.0/2.7E1)-t28783*t28784*t28785*(1.0/2.7E1))-gamma_aa[index]*(C*t28782*(1.0/5.4E1)+Dd*t28780*t28782* \
               (1.0/5.4E1)-t28783*t28784*t28785*(1.0/5.4E1))*2.0+gamma_aa[index]*(C*t28782*(7.0/5.4E1)+Dd*t28780* \
               t28782*(7.0/5.4E1)-t28783*t28784*t28785*(7.0/5.4E1))*4.0)+gamma_aa[index]*rho_a[index]*(2.2E1/3.0) \
               +rho_a[index]*t28798)+A*B*C*t28804*t28805*t28780*t28781*(1.0/9.6E1)+A*B*Dd*t28804*t28805*t28781*t28783* \
               (1.0/9.6E1);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t28807 = rho_a[index]*2.0;
                double t28808 = 1.0/pow(t28807,1.0/3.0);
                double t28809 = Dd*t28808;
                double t28810 = t28809+1.0;
                double t28811 = 1.0/t28810;
                double t28812 = rho_a[index]*rho_a[index];
                double t28813 = exp(-C*t28808);
                double t28814 = 1.0/pow(t28807,1.1E1/3.0);
                v_gamma_aa_[index] = A*B*t28811*t28813*t28814*(t28812*(1.6E1/3.0)+t28812*(C*t28808*(7.0/9.0)+Dd*t28811* \
                   t28808*(7.0/9.0)-4.7E1/9.0))+A*B*t28811*t28813*t28814*(t28812+t28812*(C*t28808*(7.0/1.8E1)+Dd*t28811* \
                   t28808*(7.0/1.8E1)-1.3E1/1.8E1))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t28817 = rho_a[index]*2.0;
            double t28818 = 1.0/pow(t28817,1.0/3.0);
            double t28819 = Dd*t28818;
            double t28820 = t28819+1.0;
            double t28821 = 1.0/(t28820*t28820);
            double t28822 = rho_a[index]*rho_a[index];
            double t28823 = 1.0/t28820;
            double t28845 = C*t28818;
            double t28824 = exp(-t28845);
            double t28825 = 1.0/pow(t28817,1.1E1/3.0);
            double t28826 = 1.0/pow(t28817,4.0/3.0);
            double t28827 = Dd*Dd;
            double t28828 = 1.0/pow(t28817,5.0/3.0);
            double t28829 = 1.0/pow(t28817,7.0/3.0);
            double t28830 = 1.0/(t28820*t28820*t28820);
            double t28831 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t28832 = 1.0/pow(t28817,8.0/3.0);
            double t28833 = C*t28818*(1.0/9.0);
            double t28834 = Dd*t28823*t28818*(1.0/9.0);
            double t28835 = t28833+t28834-1.1E1/9.0;
            double t28836 = gamma_aa[index]*t28835;
            double t28837 = C*t28818*(1.0/1.8E1);
            double t28838 = Dd*t28823*t28818*(1.0/1.8E1);
            double t28839 = t28837+t28838-5.0/2.0;
            double t28840 = C*t28818*(7.0/1.8E1);
            double t28841 = Dd*t28823*t28818*(7.0/1.8E1);
            double t28842 = t28840+t28841-4.7E1/1.8E1;
            double t28843 = gamma_aa[index]*t28842*4.0;
            double t28844 = pow(rho_a[index],8.0/3.0);
            double t28846 = C*t28826*(1.0/2.7E1);
            double t28847 = Dd*t28823*t28826*(1.0/2.7E1);
            double t28861 = t28821*t28827*t28828*(1.0/2.7E1);
            double t28848 = -t28861+t28846+t28847;
            double t28849 = gamma_aa[index]*t28848;
            double t28850 = C*t28826*(1.0/5.4E1);
            double t28851 = Dd*t28823*t28826*(1.0/5.4E1);
            double t28862 = t28821*t28827*t28828*(1.0/5.4E1);
            double t28852 = t28850+t28851-t28862;
            double t28853 = C*t28826*(7.0/5.4E1);
            double t28854 = Dd*t28823*t28826*(7.0/5.4E1);
            double t28864 = t28821*t28827*t28828*(7.0/5.4E1);
            double t28855 = t28853+t28854-t28864;
            double t28856 = gamma_aa[index]*t28855*4.0;
            double t28857 = pow(rho_a[index],5.0/3.0);
            double t28858 = CFext*t28857*(8.0/3.0);
            double t28863 = gamma_aa[index]*t28852*2.0;
            double t28859 = -t28863+t28856+t28849+t28858;
            double t28879 = gamma_aa[index]*t28839*2.0;
            double t28880 = CFext*t28844*2.0;
            double t28860 = t28843-t28880+t28836-t28879;
            double t28865 = C*t28829*(4.0/8.1E1);
            double t28866 = Dd*t28823*t28829*(4.0/8.1E1);
            double t28867 = Dd*t28830*t28831*t28827*(1.0/3.24E2);
            double t28868 = t28865+t28866+t28867-t28821*t28832*t28827*(2.0/2.7E1);
            double t28869 = gamma_aa[index]*t28868;
            double t28870 = C*t28829*(2.0/8.1E1);
            double t28871 = Dd*t28823*t28829*(2.0/8.1E1);
            double t28872 = Dd*t28830*t28831*t28827*(1.0/6.48E2);
            double t28873 = t28870+t28871+t28872-t28821*t28832*t28827*(1.0/2.7E1);
            double t28874 = C*t28829*(1.4E1/8.1E1);
            double t28875 = Dd*t28823*t28829*(1.4E1/8.1E1);
            double t28876 = Dd*t28830*t28831*t28827*(7.0/6.48E2);
            double t28877 = t28874+t28875+t28876-t28821*t28832*t28827*(7.0/2.7E1);
            double t28878 = gamma_aa[index]*t28877*4.0;
            double t28881 = t28822*t28860;
            double t28882 = gamma_aa[index]*t28822*(2.2E1/3.0);
            double t28883 = t28881+t28882;
            double t28884 = 1.0/pow(t28817,1.9E1/3.0);
            double t28885 = gamma_aa[index]*rho_a[index]*(2.2E1/3.0);
            double t28886 = rho_a[index]*t28860;
            double t28889 = t28822*t28859;
            double t28887 = t28885+t28886-t28889;
            double t28888 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t28890 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            v_rho_a_rho_a_[index] = A*Dd*rho_a[index]*t28821*t28829*(-1.6E1/3.0)-A*t28830*t28822*t28825*t28827* \
               (1.6E1/9.0)+A*Dd*t28821*t28822*1.0/pow(t28817,1.0E1/3.0)*(8.0E1/9.0)+A*B*t28823*t28824*1.0/pow(t28817,1.7E1/ \
               3.0)*t28883*(3.08E2/9.0)-A*B*t28823*t28824*1.0/pow(t28817,1.4E1/3.0)*t28887*(4.4E1/3.0)+A*B*t28823* \
               t28824*t28825*(gamma_aa[index]*(8.0/3.0)+t28843+t28836-CFext*t28844*2.0-gamma_aa[index]*t28839*2.0- \
               rho_a[index]*t28859*2.0+t28822*(t28869+t28878-gamma_aa[index]*t28873*2.0))+A*B*t28823*t28824*t28825* \
               (gamma_aa[index]*(1.4E1/3.0)-rho_a[index]*t28859*2.0+t28822*(t28869+t28878-gamma_aa[index]*t28873* \
               2.0-CFext*pow(rho_a[index],2.0/3.0)*(4.0E1/9.0)))+A*B*t28830*t28824*t28827*t28883*t28884*(4.0/9.0) \
               +A*B*(C*C)*t28823*t28824*t28883*t28884*(2.0/9.0)-A*B*C*t28823*t28824*t28890*t28883*(1.3E1/1.44E2)+ \
               A*B*C*t28823*t28824*t28887*t28888*(1.0/2.4E1)-A*B*Dd*t28821*t28824*t28890*t28883*(1.3E1/1.44E2)+A* \
               B*Dd*t28821*t28824*t28887*t28888*(1.0/2.4E1)+A*B*C*Dd*t28821*t28824*t28883*t28884*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t28892 = rho_a[index]*2.0;
                double t28893 = 1.0/pow(t28892,1.0/3.0);
                double t28894 = Dd*t28893;
                double t28895 = t28894+1.0;
                double t28896 = 1.0/t28895;
                double t28897 = 1.0/pow(t28892,4.0/3.0);
                double t28904 = C*t28893;
                double t28898 = exp(-t28904);
                double t28899 = 1.0/pow(t28892,1.1E1/3.0);
                double t28900 = rho_a[index]*rho_a[index];
                double t28901 = Dd*Dd;
                double t28902 = 1.0/(t28895*t28895);
                double t28903 = 1.0/pow(t28892,5.0/3.0);
                double t28905 = C*t28893*(7.0/9.0);
                double t28906 = Dd*t28893*t28896*(7.0/9.0);
                double t28907 = t28905+t28906-4.7E1/9.0;
                double t28908 = 1.0/pow(t28892,1.4E1/3.0);
                double t28909 = C*t28893*(7.0/1.8E1);
                double t28910 = Dd*t28893*t28896*(7.0/1.8E1);
                double t28911 = t28910+t28909-1.3E1/1.8E1;
                double t28912 = 1.0/rho_a[index];
                double t28913 = C*t28893*(1.0/9.0);
                double t28914 = Dd*t28893*t28896*(1.0/9.0);
                double t28915 = t28913+t28914-1.1E1/9.0;
                double t28916 = C*t28897*(7.0/5.4E1);
                double t28917 = Dd*t28896*t28897*(7.0/5.4E1);
                double t28918 = t28900*t28907;
                double t28919 = t28900*(1.6E1/3.0);
                double t28920 = t28918+t28919;
                double t28921 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t28922 = t28900*t28911;
                double t28923 = t28900+t28922;
                v_rho_a_gamma_aa_[index] = -A*B*t28896*t28898*t28899*(t28900*(t28916+t28917-t28912*t28915*(1.0/4.0) \
                   -t28901*t28902*t28903*(7.0/5.4E1))-rho_a[index]*t28911)+A*B*t28896*t28898*t28899*(rho_a[index]*(1.6E1/ \
                   3.0)+rho_a[index]*t28907-t28900*(C*t28897*(7.0/2.7E1)+Dd*t28896*t28897*(7.0/2.7E1)-t28901*t28902*t28903* \
                   (7.0/2.7E1)))+A*B*t28896*t28898*t28899*(t28892-t28900*(t28916+t28917+t28912*t28915*(1.0/4.0)-t28901* \
                   t28902*t28903*(7.0/5.4E1))+rho_a[index]*t28911)-A*B*t28920*t28908*t28896*t28898*(1.1E1/3.0)-A*B*t28923* \
                   t28908*t28896*t28898*(2.2E1/3.0)+A*B*C*t28920*t28921*t28896*t28898*(1.0/9.6E1)+A*B*C*t28921*t28923* \
                   t28896*t28898*(1.0/4.8E1)+A*B*Dd*t28902*t28920*t28921*t28898*(1.0/9.6E1)+A*B*Dd*t28902*t28921*t28923* \
                   t28898*(1.0/4.8E1);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void EDF1_C_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_b = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28101 = rho_a[index]+rho_b[index];
            double t28102 = 1.0/pow(t28101,1.0/3.0);
            double t28103 = Dd*t28102;
            double t28104 = t28103+1.0;
            double t28105 = 1.0/t28104;
            double t28106 = t28101*t28101;
            double t28107 = t28106*(2.0/3.0);
            double t28108 = gamma_ab[index]*2.0;
            double t28109 = gamma_aa[index]+gamma_bb[index]+t28108;
            double t28110 = 1.0/t28101;
            functional_[index] = A*rho_a[index]*rho_b[index]*t28110*t28105*-4.0-A*B*1.0/pow(t28101,1.1E1/3.0) \
               *t28105*exp(-C*t28102)*(t28106*t28109*(-2.0/3.0)+gamma_aa[index]*(t28107-rho_b[index]*rho_b[index]) \
               +gamma_bb[index]*(t28107-rho_a[index]*rho_a[index])+rho_a[index]*rho_b[index]*((gamma_aa[index]+gamma_bb[index]) \
               *(C*t28102*(1.0/1.8E1)+Dd*t28102*t28105*(1.0/1.8E1)-5.0/2.0)+CFext*(pow(rho_a[index],8.0/3.0)+pow(rho_b[index],8.0/ \
               3.0))-t28109*(C*t28102*(7.0/1.8E1)+Dd*t28102*t28105*(7.0/1.8E1)-4.7E1/1.8E1)-t28110*(gamma_aa[index]* \
               rho_a[index]+gamma_bb[index]*rho_b[index])*(C*t28102*(1.0/9.0)+Dd*t28102*t28105*(1.0/9.0)-1.1E1/9.0) \
               ));
        } else if (rho_a[index] > cutoff_) {
            functional_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            functional_[index] = 0.0;
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28112 = rho_a[index]+rho_b[index];
            double t28113 = 1.0/pow(t28112,1.0/3.0);
            double t28114 = Dd*t28113;
            double t28115 = t28114+1.0;
            double t28116 = 1.0/t28115;
            double t28117 = t28112*t28112;
            double t28118 = t28117*(2.0/3.0);
            double t28119 = gamma_ab[index]*2.0;
            double t28120 = gamma_aa[index]+gamma_bb[index]+t28119;
            double t28121 = 1.0/t28112;
            double t28148 = C*t28113;
            double t28122 = exp(-t28148);
            double t28123 = C*t28113*(7.0/1.8E1);
            double t28124 = Dd*t28113*t28116*(7.0/1.8E1);
            double t28125 = t28123+t28124-4.7E1/1.8E1;
            double t28126 = t28120*t28125;
            double t28127 = gamma_aa[index]+gamma_bb[index];
            double t28128 = C*t28113*(1.0/1.8E1);
            double t28129 = Dd*t28113*t28116*(1.0/1.8E1);
            double t28130 = t28128+t28129-5.0/2.0;
            double t28131 = pow(rho_a[index],8.0/3.0);
            double t28132 = pow(rho_b[index],8.0/3.0);
            double t28133 = t28131+t28132;
            double t28134 = gamma_aa[index]*rho_a[index];
            double t28135 = gamma_bb[index]*rho_b[index];
            double t28136 = t28134+t28135;
            double t28137 = C*t28113*(1.0/9.0);
            double t28138 = Dd*t28113*t28116*(1.0/9.0);
            double t28139 = t28137+t28138-1.1E1/9.0;
            double t28140 = t28121*t28136*t28139;
            double t28156 = t28130*t28127;
            double t28157 = CFext*t28133;
            double t28141 = t28140+t28126-t28156-t28157;
            double t28142 = rho_b[index]*(4.0/3.0);
            double t28143 = 1.0/pow(t28112,4.0/3.0);
            double t28144 = 1.0/(t28115*t28115);
            double t28145 = Dd*Dd;
            double t28146 = 1.0/pow(t28112,5.0/3.0);
            double t28147 = 1.0/(t28112*t28112);
            double t28149 = rho_b[index]*rho_b[index];
            double t28150 = t28118-t28149;
            double t28151 = gamma_aa[index]*t28150;
            double t28152 = rho_a[index]*rho_a[index];
            double t28153 = t28152-t28118;
            double t28154 = gamma_bb[index]*t28153;
            double t28155 = t28120*t28117*(2.0/3.0);
            double t28158 = rho_a[index]*rho_b[index]*t28141;
            double t28159 = 1.0/(t28112*t28112*t28112*t28112*t28112);
            v_rho_a_[index] = A*rho_b[index]*t28121*t28116*-4.0+A*rho_a[index]*rho_b[index]*t28116*t28147*4.0+ \
               A*B*1.0/pow(t28112,1.1E1/3.0)*t28122*t28116*(rho_b[index]*t28141-gamma_aa[index]*(rho_a[index]*(4.0/ \
               3.0)+t28142)+gamma_bb[index]*(rho_a[index]*(2.0/3.0)-t28142)+t28120*(rho_a[index]*2.0+rho_b[index]* \
               2.0)*(2.0/3.0)-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],5.0/3.0)*(8.0/3.0)-t28127*(C*t28143* \
               (1.0/5.4E1)+Dd*t28116*t28143*(1.0/5.4E1)-t28144*t28145*t28146*(1.0/5.4E1))+t28120*(C*t28143*(7.0/5.4E1) \
               +Dd*t28116*t28143*(7.0/5.4E1)-t28144*t28145*t28146*(7.0/5.4E1))+t28121*t28136*(C*t28143*(1.0/2.7E1) \
               +Dd*t28116*t28143*(1.0/2.7E1)-t28144*t28145*t28146*(1.0/2.7E1))-gamma_aa[index]*t28121*t28139+t28136* \
               t28147*t28139))-A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t28112,7.0/3.0)*t28144*(4.0/3.0)-A*B*1.0/pow(t28112,1.4E1/ \
               3.0)*t28122*t28116*(-t28151+t28154+t28155+t28158)*(1.1E1/3.0)+A*B*C*t28122*t28116*t28159*(-t28151+ \
               t28154+t28155+t28158)*(1.0/3.0)+A*B*Dd*t28122*t28144*t28159*(-t28151+t28154+t28155+t28158)*(1.0/3.0) \
               ;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28161 = rho_a[index]+rho_b[index];
            double t28162 = 1.0/pow(t28161,1.0/3.0);
            double t28163 = Dd*t28162;
            double t28164 = t28163+1.0;
            double t28165 = 1.0/t28164;
            double t28166 = t28161*t28161;
            double t28167 = t28166*(2.0/3.0);
            double t28168 = gamma_ab[index]*2.0;
            double t28169 = gamma_aa[index]+gamma_bb[index]+t28168;
            double t28170 = 1.0/t28161;
            double t28197 = C*t28162;
            double t28171 = exp(-t28197);
            double t28172 = C*t28162*(7.0/1.8E1);
            double t28173 = Dd*t28162*t28165*(7.0/1.8E1);
            double t28174 = t28172+t28173-4.7E1/1.8E1;
            double t28175 = t28174*t28169;
            double t28176 = gamma_aa[index]+gamma_bb[index];
            double t28177 = C*t28162*(1.0/1.8E1);
            double t28178 = Dd*t28162*t28165*(1.0/1.8E1);
            double t28179 = t28177+t28178-5.0/2.0;
            double t28180 = pow(rho_a[index],8.0/3.0);
            double t28181 = pow(rho_b[index],8.0/3.0);
            double t28182 = t28180+t28181;
            double t28183 = gamma_aa[index]*rho_a[index];
            double t28184 = gamma_bb[index]*rho_b[index];
            double t28185 = t28183+t28184;
            double t28186 = C*t28162*(1.0/9.0);
            double t28187 = Dd*t28162*t28165*(1.0/9.0);
            double t28188 = t28186+t28187-1.1E1/9.0;
            double t28189 = t28170*t28185*t28188;
            double t28205 = t28176*t28179;
            double t28206 = CFext*t28182;
            double t28190 = -t28205-t28206+t28175+t28189;
            double t28191 = rho_a[index]*(4.0/3.0);
            double t28192 = 1.0/pow(t28161,4.0/3.0);
            double t28193 = 1.0/(t28164*t28164);
            double t28194 = Dd*Dd;
            double t28195 = 1.0/pow(t28161,5.0/3.0);
            double t28196 = 1.0/(t28161*t28161);
            double t28198 = rho_b[index]*rho_b[index];
            double t28199 = t28167-t28198;
            double t28200 = gamma_aa[index]*t28199;
            double t28201 = rho_a[index]*rho_a[index];
            double t28202 = t28201-t28167;
            double t28203 = gamma_bb[index]*t28202;
            double t28204 = t28166*t28169*(2.0/3.0);
            double t28207 = rho_a[index]*rho_b[index]*t28190;
            double t28208 = 1.0/(t28161*t28161*t28161*t28161*t28161);
            v_rho_b_[index] = A*rho_a[index]*t28170*t28165*-4.0+A*rho_a[index]*rho_b[index]*t28165*t28196*4.0+ \
               A*B*1.0/pow(t28161,1.1E1/3.0)*t28171*t28165*(rho_a[index]*t28190-gamma_bb[index]*(rho_b[index]*(4.0/ \
               3.0)+t28191)+gamma_aa[index]*(rho_b[index]*(2.0/3.0)-t28191)+t28169*(rho_a[index]*2.0+rho_b[index]* \
               2.0)*(2.0/3.0)-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],5.0/3.0)*(8.0/3.0)-t28176*(C*t28192* \
               (1.0/5.4E1)+Dd*t28165*t28192*(1.0/5.4E1)-t28193*t28194*t28195*(1.0/5.4E1))+t28169*(C*t28192*(7.0/5.4E1) \
               +Dd*t28165*t28192*(7.0/5.4E1)-t28193*t28194*t28195*(7.0/5.4E1))+t28170*t28185*(C*t28192*(1.0/2.7E1) \
               +Dd*t28165*t28192*(1.0/2.7E1)-t28193*t28194*t28195*(1.0/2.7E1))-gamma_bb[index]*t28170*t28188+t28185* \
               t28196*t28188))-A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t28161,7.0/3.0)*t28193*(4.0/3.0)-A*B*1.0/pow(t28161,1.4E1/ \
               3.0)*t28171*t28165*(-t28200+t28203+t28204+t28207)*(1.1E1/3.0)+A*B*C*t28171*t28208*t28165*(-t28200+ \
               t28203+t28204+t28207)*(1.0/3.0)+A*B*Dd*t28171*t28208*t28193*(-t28200+t28203+t28204+t28207)*(1.0/3.0) \
               ;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28210 = rho_a[index]+rho_b[index];
                double t28211 = 1.0/pow(t28210,1.0/3.0);
                double t28212 = Dd*t28211;
                double t28213 = t28212+1.0;
                double t28214 = 1.0/t28213;
                v_gamma_aa_[index] = A*B*1.0/pow(t28210,1.1E1/3.0)*t28214*exp(-C*t28211)*(rho_b[index]*rho_b[index]+ \
                   rho_a[index]*rho_b[index]*(C*t28211*(1.0/3.0)+Dd*t28211*t28214*(1.0/3.0)+(rho_a[index]*(C*t28211*(1.0/ \
                   9.0)+Dd*t28211*t28214*(1.0/9.0)-1.1E1/9.0))/t28210-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28216 = rho_a[index]+rho_b[index];
                double t28217 = 1.0/pow(t28216,1.0/3.0);
                double t28218 = Dd*t28217;
                double t28219 = t28218+1.0;
                double t28220 = 1.0/t28219;
                v_gamma_ab_[index] = A*B*t28220*1.0/pow(t28216,1.1E1/3.0)*exp(-C*t28217)*((t28216*t28216)*(4.0/3.0) \
                   +rho_a[index]*rho_b[index]*(C*t28217*(7.0/9.0)+Dd*t28220*t28217*(7.0/9.0)-4.7E1/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28222 = rho_a[index]+rho_b[index];
                double t28223 = 1.0/pow(t28222,1.0/3.0);
                double t28224 = Dd*t28223;
                double t28225 = t28224+1.0;
                double t28226 = 1.0/t28225;
                v_gamma_bb_[index] = A*B*1.0/pow(t28222,1.1E1/3.0)*t28226*exp(-C*t28223)*(rho_a[index]*rho_a[index]+ \
                   rho_a[index]*rho_b[index]*(C*t28223*(1.0/3.0)+Dd*t28223*t28226*(1.0/3.0)+(rho_b[index]*(C*t28223*(1.0/ \
                   9.0)+Dd*t28223*t28226*(1.0/9.0)-1.1E1/9.0))/t28222-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28230 = rho_a[index]+rho_b[index];
            double t28231 = 1.0/pow(t28230,1.0/3.0);
            double t28232 = Dd*t28231;
            double t28233 = t28232+1.0;
            double t28234 = 1.0/t28233;
            double t28235 = t28230*t28230;
            double t28236 = t28235*(2.0/3.0);
            double t28237 = gamma_ab[index]*2.0;
            double t28238 = gamma_aa[index]+gamma_bb[index]+t28237;
            double t28239 = 1.0/(t28233*t28233);
            double t28266 = C*t28231;
            double t28240 = exp(-t28266);
            double t28241 = C*t28231*(7.0/1.8E1);
            double t28242 = Dd*t28231*t28234*(7.0/1.8E1);
            double t28243 = t28241+t28242-4.7E1/1.8E1;
            double t28244 = t28243*t28238;
            double t28245 = gamma_aa[index]+gamma_bb[index];
            double t28246 = C*t28231*(1.0/1.8E1);
            double t28247 = Dd*t28231*t28234*(1.0/1.8E1);
            double t28248 = t28246+t28247-5.0/2.0;
            double t28249 = pow(rho_a[index],8.0/3.0);
            double t28250 = pow(rho_b[index],8.0/3.0);
            double t28251 = t28250+t28249;
            double t28252 = 1.0/t28230;
            double t28253 = gamma_aa[index]*rho_a[index];
            double t28254 = gamma_bb[index]*rho_b[index];
            double t28255 = t28253+t28254;
            double t28256 = C*t28231*(1.0/9.0);
            double t28257 = Dd*t28231*t28234*(1.0/9.0);
            double t28258 = t28256+t28257-1.1E1/9.0;
            double t28259 = t28252*t28255*t28258;
            double t28292 = t28245*t28248;
            double t28293 = CFext*t28251;
            double t28260 = t28244-t28292-t28293+t28259;
            double t28261 = rho_b[index]*(4.0/3.0);
            double t28262 = 1.0/pow(t28230,4.0/3.0);
            double t28263 = Dd*Dd;
            double t28264 = 1.0/pow(t28230,5.0/3.0);
            double t28265 = 1.0/(t28230*t28230);
            double t28267 = 1.0/pow(t28230,1.1E1/3.0);
            double t28268 = C*t28262*(1.0/5.4E1);
            double t28269 = Dd*t28234*t28262*(1.0/5.4E1);
            double t28300 = t28263*t28264*t28239*(1.0/5.4E1);
            double t28270 = -t28300+t28268+t28269;
            double t28271 = pow(rho_a[index],5.0/3.0);
            double t28272 = CFext*t28271*(8.0/3.0);
            double t28273 = C*t28262*(7.0/5.4E1);
            double t28274 = Dd*t28234*t28262*(7.0/5.4E1);
            double t28302 = t28263*t28264*t28239*(7.0/5.4E1);
            double t28275 = -t28302+t28273+t28274;
            double t28276 = t28238*t28275;
            double t28277 = C*t28262*(1.0/2.7E1);
            double t28278 = Dd*t28234*t28262*(1.0/2.7E1);
            double t28287 = t28263*t28264*t28239*(1.0/2.7E1);
            double t28279 = t28277+t28278-t28287;
            double t28280 = t28252*t28255*t28279;
            double t28281 = t28255*t28265*t28258;
            double t28301 = t28270*t28245;
            double t28303 = gamma_aa[index]*t28252*t28258;
            double t28282 = -t28301-t28303+t28280+t28272+t28281+t28276;
            double t28283 = 1.0/pow(t28230,7.0/3.0);
            double t28284 = 1.0/(t28230*t28230*t28230);
            double t28285 = 1.0/(t28233*t28233*t28233);
            double t28286 = 1.0/pow(t28230,8.0/3.0);
            double t28288 = rho_a[index]*2.0;
            double t28289 = rho_b[index]*2.0;
            double t28290 = t28288+t28289;
            double t28291 = t28290*t28238*(2.0/3.0);
            double t28294 = rho_b[index]*t28260;
            double t28295 = rho_a[index]*(4.0/3.0);
            double t28296 = t28261+t28295;
            double t28297 = rho_a[index]*(2.0/3.0);
            double t28298 = t28261-t28297;
            double t28299 = gamma_bb[index]*t28298;
            double t28304 = rho_a[index]*rho_b[index]*t28282;
            double t28305 = gamma_aa[index]*t28296;
            double t28306 = t28304+t28305-t28291-t28294+t28299;
            double t28307 = 1.0/(t28230*t28230*t28230*t28230*t28230);
            double t28308 = rho_b[index]*rho_b[index];
            double t28309 = t28236-t28308;
            double t28310 = gamma_aa[index]*t28309;
            double t28311 = rho_a[index]*rho_a[index];
            double t28312 = t28311-t28236;
            double t28313 = gamma_bb[index]*t28312;
            double t28314 = t28235*t28238*(2.0/3.0);
            double t28315 = rho_a[index]*rho_b[index]*t28260;
            double t28316 = -t28310+t28313+t28314+t28315;
            double t28317 = 1.0/(t28230*t28230*t28230*t28230*t28230*t28230);
            double t28318 = 1.0/pow(t28230,1.9E1/3.0);
            v_rho_a_rho_a_[index] = A*rho_b[index]*t28234*t28265*8.0-A*Dd*rho_b[index]*t28283*t28239*(8.0/3.0) \
               -A*rho_a[index]*rho_b[index]*t28234*t28284*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t28230,1.0E1/ \
               3.0)*t28239*(4.0E1/9.0)+A*B*1.0/pow(t28230,1.4E1/3.0)*t28240*t28234*t28306*(2.2E1/3.0)+A*B*1.0/pow(t28230,1.7E1/ \
               3.0)*t28240*t28234*t28316*(1.54E2/9.0)+A*B*t28240*t28234*t28267*(gamma_ab[index]*(8.0/3.0)+gamma_bb[index]* \
               2.0-rho_b[index]*t28282*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],2.0/3.0)*(4.0E1/9.0) \
               +t28245*(C*t28283*(2.0/8.1E1)+Dd*t28234*t28283*(2.0/8.1E1)-t28263*t28239*t28286*(1.0/2.7E1)+Dd*t28263* \
               t28284*t28285*(1.0/8.1E1))-t28238*(C*t28283*(1.4E1/8.1E1)+Dd*t28234*t28283*(1.4E1/8.1E1)-t28263*t28239* \
               t28286*(7.0/2.7E1)+Dd*t28263*t28284*t28285*(7.0/8.1E1))-t28252*t28255*(C*t28283*(4.0/8.1E1)+Dd*t28234* \
               t28283*(4.0/8.1E1)-t28263*t28239*t28286*(2.0/2.7E1)+Dd*t28263*t28284*t28285*(2.0/8.1E1))+gamma_aa[index]* \
               t28252*t28279*2.0+gamma_aa[index]*t28265*t28258*2.0-t28255*t28284*t28258*2.0-t28255*t28265*t28279* \
               2.0))-A*rho_a[index]*rho_b[index]*t28263*t28267*t28285*(8.0/9.0)+A*B*t28240*t28263*t28318*t28285*(- \
               t28310+t28313+t28314+t28315)*(2.0/9.0)+A*B*(C*C)*t28240*t28234*t28318*(-t28310+t28313+t28314+t28315) \
               *(1.0/9.0)-A*B*C*t28240*t28234*t28306*t28307*(2.0/3.0)-A*B*C*t28240*t28234*t28316*t28317*(2.6E1/9.0) \
               -A*B*Dd*t28240*t28306*t28307*t28239*(2.0/3.0)-A*B*Dd*t28240*t28316*t28317*t28239*(2.6E1/9.0)+A*B*C* \
               Dd*t28240*t28318*t28239*(-t28310+t28313+t28314+t28315)*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28320 = rho_a[index]+rho_b[index];
            double t28321 = 1.0/pow(t28320,1.0/3.0);
            double t28322 = Dd*t28321;
            double t28323 = t28322+1.0;
            double t28324 = 1.0/t28323;
            double t28325 = 1.0/(t28320*t28320);
            double t28326 = 1.0/pow(t28320,7.0/3.0);
            double t28327 = 1.0/(t28323*t28323);
            double t28328 = t28320*t28320;
            double t28329 = t28328*(2.0/3.0);
            double t28330 = gamma_ab[index]*2.0;
            double t28331 = gamma_aa[index]+gamma_bb[index]+t28330;
            double t28332 = 1.0/t28320;
            double t28371 = C*t28321;
            double t28333 = exp(-t28371);
            double t28334 = C*t28321*(7.0/1.8E1);
            double t28335 = Dd*t28321*t28324*(7.0/1.8E1);
            double t28336 = t28334+t28335-4.7E1/1.8E1;
            double t28337 = t28331*t28336;
            double t28338 = gamma_aa[index]+gamma_bb[index];
            double t28339 = 1.0/pow(t28320,4.0/3.0);
            double t28340 = Dd*Dd;
            double t28341 = 1.0/pow(t28320,5.0/3.0);
            double t28342 = C*t28321*(1.0/9.0);
            double t28343 = Dd*t28321*t28324*(1.0/9.0);
            double t28344 = t28342+t28343-1.1E1/9.0;
            double t28345 = gamma_aa[index]*rho_a[index];
            double t28346 = gamma_bb[index]*rho_b[index];
            double t28347 = t28345+t28346;
            double t28348 = C*t28339*(1.0/5.4E1);
            double t28349 = Dd*t28324*t28339*(1.0/5.4E1);
            double t28375 = t28340*t28341*t28327*(1.0/5.4E1);
            double t28350 = t28348-t28375+t28349;
            double t28351 = C*t28339*(7.0/5.4E1);
            double t28352 = Dd*t28324*t28339*(7.0/5.4E1);
            double t28378 = t28340*t28341*t28327*(7.0/5.4E1);
            double t28353 = t28351+t28352-t28378;
            double t28354 = t28331*t28353;
            double t28355 = C*t28339*(1.0/2.7E1);
            double t28356 = Dd*t28324*t28339*(1.0/2.7E1);
            double t28369 = t28340*t28341*t28327*(1.0/2.7E1);
            double t28357 = t28355+t28356-t28369;
            double t28358 = t28332*t28347*t28357;
            double t28359 = t28325*t28344*t28347;
            double t28360 = C*t28321*(1.0/1.8E1);
            double t28361 = Dd*t28321*t28324*(1.0/1.8E1);
            double t28362 = t28360+t28361-5.0/2.0;
            double t28363 = pow(rho_a[index],8.0/3.0);
            double t28364 = pow(rho_b[index],8.0/3.0);
            double t28365 = t28363+t28364;
            double t28366 = 1.0/(t28320*t28320*t28320);
            double t28367 = 1.0/(t28323*t28323*t28323);
            double t28368 = 1.0/pow(t28320,8.0/3.0);
            double t28370 = t28332*t28344*t28347;
            double t28372 = t28362*t28338;
            double t28373 = CFext*t28365;
            double t28374 = rho_b[index]*(4.0/3.0);
            double t28376 = pow(rho_a[index],5.0/3.0);
            double t28377 = CFext*t28376*(8.0/3.0);
            double t28388 = t28350*t28338;
            double t28396 = gamma_aa[index]*t28332*t28344;
            double t28379 = t28354+t28358+t28359+t28377-t28396-t28388;
            double t28380 = 1.0/pow(t28320,1.4E1/3.0);
            double t28381 = rho_a[index]*2.0;
            double t28382 = rho_b[index]*2.0;
            double t28383 = t28381+t28382;
            double t28384 = t28331*t28383*(2.0/3.0);
            double t28385 = t28370-t28372+t28337-t28373;
            double t28386 = rho_a[index]*(4.0/3.0);
            double t28387 = t28374+t28386;
            double t28389 = pow(rho_b[index],5.0/3.0);
            double t28390 = CFext*t28389*(8.0/3.0);
            double t28391 = 1.0/pow(t28320,1.1E1/3.0);
            double t28392 = rho_b[index]*t28385;
            double t28393 = rho_a[index]*(2.0/3.0);
            double t28394 = t28374-t28393;
            double t28395 = gamma_bb[index]*t28394;
            double t28397 = rho_a[index]*rho_b[index]*t28379;
            double t28398 = gamma_aa[index]*t28387;
            double t28399 = -t28392-t28384+t28395+t28397+t28398;
            double t28400 = 1.0/(t28320*t28320*t28320*t28320*t28320);
            double t28401 = rho_a[index]*t28385;
            double t28402 = rho_b[index]*(2.0/3.0);
            double t28403 = t28402-t28386;
            double t28404 = gamma_aa[index]*t28403;
            double t28406 = gamma_bb[index]*t28332*t28344;
            double t28405 = -t28406+t28354+t28390+t28358+t28359-t28388;
            double t28407 = rho_b[index]*rho_b[index];
            double t28408 = t28407-t28329;
            double t28409 = gamma_aa[index]*t28408;
            double t28410 = rho_a[index]*rho_a[index];
            double t28411 = t28410-t28329;
            double t28412 = gamma_bb[index]*t28411;
            double t28413 = t28331*t28328*(2.0/3.0);
            double t28414 = 1.0/(t28320*t28320*t28320*t28320*t28320*t28320);
            double t28415 = rho_a[index]*rho_b[index]*t28385;
            double t28416 = t28412+t28413+t28415+t28409;
            double t28417 = 1.0/pow(t28320,1.9E1/3.0);
            v_rho_a_rho_b_[index] = A*t28332*t28324*-4.0+A*rho_a[index]*t28324*t28325*4.0+A*rho_b[index]*t28324* \
               t28325*4.0-A*Dd*rho_a[index]*t28326*t28327*(4.0/3.0)-A*Dd*rho_b[index]*t28326*t28327*(4.0/3.0)-A*rho_a[index]* \
               rho_b[index]*t28324*t28366*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t28320,1.0E1/3.0)*t28327*(4.0E1/ \
               9.0)-A*B*t28324*t28333*t28391*(gamma_ab[index]*(-8.0/3.0)-t28370+t28372-t28337+t28373+rho_a[index]* \
               t28379+rho_b[index]*(t28354+t28390+t28358+t28359-t28350*t28338-gamma_bb[index]*t28332*t28344)+rho_a[index]* \
               rho_b[index]*(t28338*(C*t28326*(2.0/8.1E1)+Dd*t28324*t28326*(2.0/8.1E1)-t28340*t28327*t28368*(1.0/ \
               2.7E1)+Dd*t28340*t28366*t28367*(1.0/8.1E1))-t28331*(C*t28326*(1.4E1/8.1E1)+Dd*t28324*t28326*(1.4E1/ \
               8.1E1)-t28340*t28327*t28368*(7.0/2.7E1)+Dd*t28340*t28366*t28367*(7.0/8.1E1))-t28332*t28347*(C*t28326* \
               (4.0/8.1E1)+Dd*t28324*t28326*(4.0/8.1E1)-t28340*t28327*t28368*(2.0/2.7E1)+Dd*t28340*t28366*t28367* \
               (2.0/8.1E1))+gamma_aa[index]*t28325*t28344+gamma_aa[index]*t28332*t28357+gamma_bb[index]*t28325*t28344+ \
               gamma_bb[index]*t28332*t28357-t28325*t28347*t28357*2.0-t28344*t28347*t28366*2.0))+A*B*1.0/pow(t28320,1.7E1/ \
               3.0)*t28324*t28333*(t28412+t28413+t28409+rho_a[index]*rho_b[index]*(t28370+t28337-CFext*t28365-t28362* \
               t28338))*(1.54E2/9.0)+A*B*t28324*t28333*t28380*t28399*(1.1E1/3.0)-A*rho_a[index]*rho_b[index]*t28340* \
               t28391*t28367*(8.0/9.0)-A*B*t28324*t28333*t28380*(t28401+t28404+t28384-gamma_bb[index]*t28387-rho_a[index]* \
               rho_b[index]*t28405)*(1.1E1/3.0)+A*B*(C*C)*t28324*t28333*t28417*(t28412+t28413+t28415+t28409)*(1.0/ \
               9.0)+A*B*C*t28400*t28324*t28333*(t28401+t28404+t28384-gamma_bb[index]*t28387-rho_a[index]*rho_b[index]* \
               t28405)*(1.0/3.0)+A*B*Dd*t28400*t28333*t28327*(t28401+t28404+t28384-gamma_bb[index]*t28387-rho_a[index]* \
               rho_b[index]*t28405)*(1.0/3.0)+A*B*t28340*t28333*t28417*t28367*(t28412+t28413+t28415+t28409)*(2.0/ \
               9.0)-A*B*C*t28324*t28333*t28414*t28416*(2.6E1/9.0)-A*B*C*t28400*t28324*t28333*t28399*(1.0/3.0)-A*B* \
               Dd*t28333*t28414*t28416*t28327*(2.6E1/9.0)-A*B*Dd*t28400*t28333*t28327*t28399*(1.0/3.0)+A*B*C*Dd*t28333* \
               t28327*t28417*(t28412+t28413+t28415+t28409)*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28419 = rho_a[index]+rho_b[index];
            double t28420 = 1.0/pow(t28419,1.0/3.0);
            double t28421 = Dd*t28420;
            double t28422 = t28421+1.0;
            double t28423 = 1.0/t28422;
            double t28424 = t28419*t28419;
            double t28425 = t28424*(2.0/3.0);
            double t28426 = gamma_ab[index]*2.0;
            double t28427 = gamma_aa[index]+gamma_bb[index]+t28426;
            double t28428 = 1.0/(t28422*t28422);
            double t28455 = C*t28420;
            double t28429 = exp(-t28455);
            double t28430 = C*t28420*(7.0/1.8E1);
            double t28431 = Dd*t28420*t28423*(7.0/1.8E1);
            double t28432 = t28430+t28431-4.7E1/1.8E1;
            double t28433 = t28432*t28427;
            double t28434 = gamma_aa[index]+gamma_bb[index];
            double t28435 = C*t28420*(1.0/1.8E1);
            double t28436 = Dd*t28420*t28423*(1.0/1.8E1);
            double t28437 = t28435+t28436-5.0/2.0;
            double t28438 = pow(rho_a[index],8.0/3.0);
            double t28439 = pow(rho_b[index],8.0/3.0);
            double t28440 = t28438+t28439;
            double t28441 = 1.0/t28419;
            double t28442 = gamma_aa[index]*rho_a[index];
            double t28443 = gamma_bb[index]*rho_b[index];
            double t28444 = t28442+t28443;
            double t28445 = C*t28420*(1.0/9.0);
            double t28446 = Dd*t28420*t28423*(1.0/9.0);
            double t28447 = t28445+t28446-1.1E1/9.0;
            double t28448 = t28441*t28444*t28447;
            double t28481 = t28434*t28437;
            double t28482 = CFext*t28440;
            double t28449 = t28433-t28481-t28482+t28448;
            double t28450 = rho_a[index]*(4.0/3.0);
            double t28451 = 1.0/pow(t28419,4.0/3.0);
            double t28452 = Dd*Dd;
            double t28453 = 1.0/pow(t28419,5.0/3.0);
            double t28454 = 1.0/(t28419*t28419);
            double t28456 = 1.0/pow(t28419,1.1E1/3.0);
            double t28457 = C*t28451*(1.0/5.4E1);
            double t28458 = Dd*t28423*t28451*(1.0/5.4E1);
            double t28490 = t28452*t28453*t28428*(1.0/5.4E1);
            double t28459 = -t28490+t28457+t28458;
            double t28460 = pow(rho_b[index],5.0/3.0);
            double t28461 = CFext*t28460*(8.0/3.0);
            double t28462 = C*t28451*(7.0/5.4E1);
            double t28463 = Dd*t28423*t28451*(7.0/5.4E1);
            double t28492 = t28452*t28453*t28428*(7.0/5.4E1);
            double t28464 = t28462+t28463-t28492;
            double t28465 = t28427*t28464;
            double t28466 = C*t28451*(1.0/2.7E1);
            double t28467 = Dd*t28423*t28451*(1.0/2.7E1);
            double t28476 = t28452*t28453*t28428*(1.0/2.7E1);
            double t28468 = t28466+t28467-t28476;
            double t28469 = t28441*t28444*t28468;
            double t28470 = t28444*t28454*t28447;
            double t28491 = t28434*t28459;
            double t28493 = gamma_bb[index]*t28441*t28447;
            double t28471 = t28461+t28470-t28491+t28465-t28493+t28469;
            double t28472 = 1.0/pow(t28419,7.0/3.0);
            double t28473 = 1.0/(t28419*t28419*t28419);
            double t28474 = 1.0/(t28422*t28422*t28422);
            double t28475 = 1.0/pow(t28419,8.0/3.0);
            double t28477 = rho_a[index]*2.0;
            double t28478 = rho_b[index]*2.0;
            double t28479 = t28477+t28478;
            double t28480 = t28427*t28479*(2.0/3.0);
            double t28483 = rho_a[index]*t28449;
            double t28484 = rho_b[index]*(2.0/3.0);
            double t28485 = t28450-t28484;
            double t28486 = gamma_aa[index]*t28485;
            double t28487 = rho_b[index]*(4.0/3.0);
            double t28488 = t28450+t28487;
            double t28489 = gamma_bb[index]*t28488;
            double t28494 = rho_a[index]*rho_b[index]*t28471;
            double t28495 = -t28480-t28483+t28494+t28486+t28489;
            double t28496 = 1.0/(t28419*t28419*t28419*t28419*t28419);
            double t28497 = rho_b[index]*rho_b[index];
            double t28498 = t28425-t28497;
            double t28499 = gamma_aa[index]*t28498;
            double t28500 = rho_a[index]*rho_a[index];
            double t28501 = t28500-t28425;
            double t28502 = gamma_bb[index]*t28501;
            double t28503 = t28424*t28427*(2.0/3.0);
            double t28504 = rho_a[index]*rho_b[index]*t28449;
            double t28505 = t28502+t28503+t28504-t28499;
            double t28506 = 1.0/(t28419*t28419*t28419*t28419*t28419*t28419);
            double t28507 = 1.0/pow(t28419,1.9E1/3.0);
            v_rho_b_rho_b_[index] = A*rho_a[index]*t28423*t28454*8.0-A*Dd*rho_a[index]*t28472*t28428*(8.0/3.0) \
               -A*rho_a[index]*rho_b[index]*t28423*t28473*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t28419,1.0E1/ \
               3.0)*t28428*(4.0E1/9.0)+A*B*t28423*t28505*1.0/pow(t28419,1.7E1/3.0)*t28429*(1.54E2/9.0)+A*B*t28423* \
               1.0/pow(t28419,1.4E1/3.0)*t28429*t28495*(2.2E1/3.0)+A*B*t28423*t28429*t28456*(gamma_aa[index]*2.0+ \
               gamma_ab[index]*(8.0/3.0)-rho_a[index]*t28471*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],2.0/ \
               3.0)*(4.0E1/9.0)+t28434*(C*t28472*(2.0/8.1E1)+Dd*t28423*t28472*(2.0/8.1E1)-t28452*t28428*t28475*(1.0/ \
               2.7E1)+Dd*t28452*t28473*t28474*(1.0/8.1E1))-t28427*(C*t28472*(1.4E1/8.1E1)+Dd*t28423*t28472*(1.4E1/ \
               8.1E1)-t28452*t28428*t28475*(7.0/2.7E1)+Dd*t28452*t28473*t28474*(7.0/8.1E1))-t28441*t28444*(C*t28472* \
               (4.0/8.1E1)+Dd*t28423*t28472*(4.0/8.1E1)-t28452*t28428*t28475*(2.0/2.7E1)+Dd*t28452*t28473*t28474* \
               (2.0/8.1E1))+gamma_bb[index]*t28441*t28468*2.0+gamma_bb[index]*t28454*t28447*2.0-t28444*t28473*t28447* \
               2.0-t28444*t28454*t28468*2.0))-A*rho_a[index]*rho_b[index]*t28452*t28456*t28474*(8.0/9.0)+A*B*t28452* \
               t28507*t28429*t28474*(t28502+t28503+t28504-t28499)*(2.0/9.0)+A*B*(C*C)*t28423*t28507*t28429*(t28502+ \
               t28503+t28504-t28499)*(1.0/9.0)-A*B*C*t28423*t28505*t28506*t28429*(2.6E1/9.0)-A*B*C*t28423*t28429* \
               t28495*t28496*(2.0/3.0)-A*B*Dd*t28505*t28506*t28428*t28429*(2.6E1/9.0)-A*B*Dd*t28428*t28429*t28495* \
               t28496*(2.0/3.0)+A*B*C*Dd*t28507*t28428*t28429*(t28502+t28503+t28504-t28499)*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28509 = rho_a[index]+rho_b[index];
                double t28510 = 1.0/pow(t28509,1.0/3.0);
                double t28511 = Dd*t28510;
                double t28512 = t28511+1.0;
                double t28513 = 1.0/t28512;
                double t28527 = C*t28510;
                double t28514 = exp(-t28527);
                double t28515 = C*t28510*(1.0/3.0);
                double t28516 = Dd*t28510*t28513*(1.0/3.0);
                double t28517 = 1.0/t28509;
                double t28518 = C*t28510*(1.0/9.0);
                double t28519 = Dd*t28510*t28513*(1.0/9.0);
                double t28520 = t28518+t28519-1.1E1/9.0;
                double t28521 = rho_a[index]*t28520*t28517;
                double t28522 = t28521+t28515+t28516-1.0/9.0;
                double t28523 = 1.0/pow(t28509,4.0/3.0);
                double t28524 = Dd*Dd;
                double t28525 = 1.0/pow(t28509,5.0/3.0);
                double t28526 = 1.0/(t28512*t28512);
                double t28528 = rho_b[index]*rho_b[index];
                double t28529 = rho_a[index]*rho_b[index]*t28522;
                double t28530 = t28528+t28529;
                double t28531 = 1.0/(t28509*t28509*t28509*t28509*t28509);
                v_rho_a_gamma_aa_[index] = A*B*t28530*t28513*t28514*1.0/pow(t28509,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t28513* \
                   t28514*1.0/pow(t28509,1.1E1/3.0)*(rho_b[index]*t28522-rho_a[index]*rho_b[index]*(C*t28523*(1.0/9.0) \
                   -t28520*t28517+rho_a[index]*t28517*(C*t28523*(1.0/2.7E1)+Dd*t28513*t28523*(1.0/2.7E1)-t28524*t28525* \
                   t28526*(1.0/2.7E1))+rho_a[index]*t28520*1.0/(t28509*t28509)+Dd*t28513*t28523*(1.0/9.0)-t28524*t28525* \
                   t28526*(1.0/9.0)))+A*B*C*t28530*t28513*t28531*t28514*(1.0/3.0)+A*B*Dd*t28530*t28531*t28514*t28526* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28533 = rho_a[index]+rho_b[index];
                double t28534 = 1.0/pow(t28533,1.0/3.0);
                double t28535 = Dd*t28534;
                double t28536 = t28535+1.0;
                double t28537 = 1.0/t28536;
                double t28543 = C*t28534;
                double t28538 = exp(-t28543);
                double t28539 = C*t28534*(7.0/9.0);
                double t28540 = Dd*t28534*t28537*(7.0/9.0);
                double t28541 = t28540+t28539-4.7E1/9.0;
                double t28542 = 1.0/pow(t28533,4.0/3.0);
                double t28544 = t28533*t28533;
                double t28545 = t28544*(4.0/3.0);
                double t28546 = rho_a[index]*rho_b[index]*t28541;
                double t28547 = t28545+t28546;
                double t28548 = 1.0/(t28533*t28533*t28533*t28533*t28533);
                double t28549 = 1.0/(t28536*t28536);
                v_rho_a_gamma_ab_[index] = A*B*1.0/pow(t28533,1.4E1/3.0)*t28537*t28538*t28547*(-1.1E1/3.0)+A*B*1.0/ \
                   pow(t28533,1.1E1/3.0)*t28537*t28538*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_b[index]*t28541- \
                   rho_a[index]*rho_b[index]*(C*t28542*(7.0/2.7E1)-(Dd*Dd)*1.0/pow(t28533,5.0/3.0)*t28549*(7.0/2.7E1) \
                   +Dd*t28542*t28537*(7.0/2.7E1)))+A*B*C*t28537*t28538*t28547*t28548*(1.0/3.0)+A*B*Dd*t28538*t28547*t28548* \
                   t28549*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28551 = rho_a[index]+rho_b[index];
                double t28552 = 1.0/pow(t28551,1.0/3.0);
                double t28553 = Dd*t28552;
                double t28554 = t28553+1.0;
                double t28555 = 1.0/t28554;
                double t28569 = C*t28552;
                double t28556 = exp(-t28569);
                double t28557 = C*t28552*(1.0/3.0);
                double t28558 = Dd*t28552*t28555*(1.0/3.0);
                double t28559 = 1.0/t28551;
                double t28560 = C*t28552*(1.0/9.0);
                double t28561 = Dd*t28552*t28555*(1.0/9.0);
                double t28562 = t28560+t28561-1.1E1/9.0;
                double t28563 = rho_b[index]*t28562*t28559;
                double t28564 = t28563+t28557+t28558-1.0/9.0;
                double t28565 = 1.0/pow(t28551,4.0/3.0);
                double t28566 = Dd*Dd;
                double t28567 = 1.0/pow(t28551,5.0/3.0);
                double t28568 = 1.0/(t28554*t28554);
                double t28570 = rho_a[index]*rho_a[index];
                double t28571 = rho_a[index]*rho_b[index]*t28564;
                double t28572 = t28570+t28571;
                double t28573 = 1.0/(t28551*t28551*t28551*t28551*t28551);
                v_rho_a_gamma_bb_[index] = A*B*1.0/pow(t28551,1.4E1/3.0)*t28572*t28555*t28556*(-1.1E1/3.0)+A*B*1.0/ \
                   pow(t28551,1.1E1/3.0)*t28555*t28556*(rho_a[index]*2.0+rho_b[index]*t28564-rho_a[index]*rho_b[index]* \
                   (C*t28565*(1.0/9.0)+rho_b[index]*t28559*(C*t28565*(1.0/2.7E1)+Dd*t28555*t28565*(1.0/2.7E1)-t28566* \
                   t28567*t28568*(1.0/2.7E1))+rho_b[index]*1.0/(t28551*t28551)*t28562+Dd*t28555*t28565*(1.0/9.0)-t28566* \
                   t28567*t28568*(1.0/9.0)))+A*B*C*t28572*t28555*t28573*t28556*(1.0/3.0)+A*B*Dd*t28572*t28573*t28556* \
                   t28568*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28575 = rho_a[index]+rho_b[index];
                double t28576 = 1.0/pow(t28575,1.0/3.0);
                double t28577 = Dd*t28576;
                double t28578 = t28577+1.0;
                double t28579 = 1.0/t28578;
                double t28593 = C*t28576;
                double t28580 = exp(-t28593);
                double t28581 = C*t28576*(1.0/3.0);
                double t28582 = Dd*t28576*t28579*(1.0/3.0);
                double t28583 = 1.0/t28575;
                double t28584 = C*t28576*(1.0/9.0);
                double t28585 = Dd*t28576*t28579*(1.0/9.0);
                double t28586 = t28584+t28585-1.1E1/9.0;
                double t28587 = rho_a[index]*t28583*t28586;
                double t28588 = t28581+t28582+t28587-1.0/9.0;
                double t28589 = 1.0/pow(t28575,4.0/3.0);
                double t28590 = Dd*Dd;
                double t28591 = 1.0/pow(t28575,5.0/3.0);
                double t28592 = 1.0/(t28578*t28578);
                double t28594 = rho_b[index]*rho_b[index];
                double t28595 = rho_a[index]*rho_b[index]*t28588;
                double t28596 = t28594+t28595;
                double t28597 = 1.0/(t28575*t28575*t28575*t28575*t28575);
                v_rho_b_gamma_aa_[index] = A*B*t28580*1.0/pow(t28575,1.4E1/3.0)*t28596*t28579*(-1.1E1/3.0)+A*B*t28580* \
                   1.0/pow(t28575,1.1E1/3.0)*t28579*(rho_b[index]*2.0+rho_a[index]*t28588-rho_a[index]*rho_b[index]*(C* \
                   t28589*(1.0/9.0)+rho_a[index]*t28583*(C*t28589*(1.0/2.7E1)+Dd*t28579*t28589*(1.0/2.7E1)-t28590*t28591* \
                   t28592*(1.0/2.7E1))+rho_a[index]*1.0/(t28575*t28575)*t28586+Dd*t28579*t28589*(1.0/9.0)-t28590*t28591* \
                   t28592*(1.0/9.0)))+A*B*C*t28580*t28596*t28579*t28597*(1.0/3.0)+A*B*Dd*t28580*t28592*t28596*t28597* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28599 = rho_a[index]+rho_b[index];
                double t28600 = 1.0/pow(t28599,1.0/3.0);
                double t28601 = Dd*t28600;
                double t28602 = t28601+1.0;
                double t28603 = 1.0/t28602;
                double t28609 = C*t28600;
                double t28604 = exp(-t28609);
                double t28605 = C*t28600*(7.0/9.0);
                double t28606 = Dd*t28600*t28603*(7.0/9.0);
                double t28607 = t28605+t28606-4.7E1/9.0;
                double t28608 = 1.0/pow(t28599,4.0/3.0);
                double t28610 = t28599*t28599;
                double t28611 = t28610*(4.0/3.0);
                double t28612 = rho_a[index]*rho_b[index]*t28607;
                double t28613 = t28611+t28612;
                double t28614 = 1.0/(t28599*t28599*t28599*t28599*t28599);
                double t28615 = 1.0/(t28602*t28602);
                v_rho_b_gamma_ab_[index] = A*B*t28603*t28604*t28613*1.0/pow(t28599,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t28603* \
                   t28604*1.0/pow(t28599,1.1E1/3.0)*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_a[index]*t28607- \
                   rho_a[index]*rho_b[index]*(C*t28608*(7.0/2.7E1)-(Dd*Dd)*t28615*1.0/pow(t28599,5.0/3.0)*(7.0/2.7E1) \
                   +Dd*t28603*t28608*(7.0/2.7E1)))+A*B*C*t28603*t28604*t28613*t28614*(1.0/3.0)+A*B*Dd*t28604*t28613*t28614* \
                   t28615*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t28617 = rho_a[index]+rho_b[index];
                double t28618 = 1.0/pow(t28617,1.0/3.0);
                double t28619 = Dd*t28618;
                double t28620 = t28619+1.0;
                double t28621 = 1.0/t28620;
                double t28635 = C*t28618;
                double t28622 = exp(-t28635);
                double t28623 = C*t28618*(1.0/3.0);
                double t28624 = Dd*t28621*t28618*(1.0/3.0);
                double t28625 = 1.0/t28617;
                double t28626 = C*t28618*(1.0/9.0);
                double t28627 = Dd*t28621*t28618*(1.0/9.0);
                double t28628 = t28626+t28627-1.1E1/9.0;
                double t28629 = rho_b[index]*t28625*t28628;
                double t28630 = t28623+t28624+t28629-1.0/9.0;
                double t28631 = 1.0/pow(t28617,4.0/3.0);
                double t28632 = Dd*Dd;
                double t28633 = 1.0/pow(t28617,5.0/3.0);
                double t28634 = 1.0/(t28620*t28620);
                double t28636 = rho_a[index]*rho_a[index];
                double t28637 = rho_a[index]*rho_b[index]*t28630;
                double t28638 = t28636+t28637;
                double t28639 = 1.0/(t28617*t28617*t28617*t28617*t28617);
                v_rho_b_gamma_bb_[index] = A*B*t28621*t28622*1.0/pow(t28617,1.4E1/3.0)*t28638*(-1.1E1/3.0)+A*B*t28621* \
                   t28622*1.0/pow(t28617,1.1E1/3.0)*(rho_a[index]*t28630-rho_a[index]*rho_b[index]*(C*t28631*(1.0/9.0) \
                   -t28625*t28628+rho_b[index]*t28625*(C*t28631*(1.0/2.7E1)+Dd*t28621*t28631*(1.0/2.7E1)-t28632*t28633* \
                   t28634*(1.0/2.7E1))+rho_b[index]*1.0/(t28617*t28617)*t28628+Dd*t28621*t28631*(1.0/9.0)-t28632*t28633* \
                   t28634*(1.0/9.0)))+A*B*C*t28621*t28622*t28638*t28639*(1.0/3.0)+A*B*Dd*t28622*t28634*t28638*t28639* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

