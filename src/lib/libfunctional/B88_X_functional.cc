/**********************************************************
* B88_X_functional.cc: definitions for B88_X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "B88_X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B88_X_Functional::B88_X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B88_X";
    description_ = "Becke 88 Exchange (GGA Only)";
    citation_ = "A.D. Becke, Phys. Rev. A, 38(6):3098-3100, 1988";
    
    double d = 4.1999999999999997E-03;
    params_.push_back(make_pair("d",d));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B88_X_Functional::~B88_X_Functional()
{
}
void B88_X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double d = params_[0].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t1086 = 1.0/pow(rho_a[index],4.0/3.0);
            double t1087 = sqrt(gamma_aa[index]);
            functional_[index] = (d*gamma_aa[index]*t1086*-2.0)/(d*t1086*t1087*log(t1086*t1087+sqrt((t1086*t1086) \
               *(t1087*t1087)+1.0))*6.0+1.0);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t1089 = sqrt(gamma_aa[index]);
            double t1090 = 1.0/pow(rho_a[index],4.0/3.0);
            double t1091 = t1090*t1089;
            double t1092 = log(t1091+sqrt(t1091*t1091+1.0));
            double t1093 = d*t1090*t1092*t1089*6.0;
            double t1094 = t1093+1.0;
            double t1095 = 1.0/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = (d*gamma_aa[index]*t1095*(4.0/3.0))/t1094-d*gamma_aa[index]*t1090*1.0/(t1094*t1094) \
               *(d*t1092*t1095*t1089*8.0+d*gamma_aa[index]*1.0/pow(rho_a[index],1.1E1/3.0)*1.0/sqrt(gamma_aa[index]* \
               1.0/pow(rho_a[index],8.0/3.0)+1.0)*8.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t1097 = 1.0/pow(rho_a[index],4.0/3.0);
                double t1098 = sqrt(gamma_aa[index]);
                double t1099 = 1.0/pow(rho_a[index],8.0/3.0);
                double t1100 = t1097*t1098;
                double t1101 = log(t1100+sqrt(t1100*t1100+1.0));
                double t1102 = d*t1097*t1098*t1101*6.0;
                double t1103 = t1102+1.0;
                v_gamma_aa_[index] = (d*t1097*-2.0)/t1103+d*gamma_aa[index]*t1097*1.0/(t1103*t1103)*(d*t1099*1.0/ \
                   sqrt(gamma_aa[index]*t1099+1.0)*3.0+d*1.0/sqrt(gamma_aa[index])*t1097*t1101*3.0)*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t1106 = sqrt(gamma_aa[index]);
            double t1107 = 1.0/pow(rho_a[index],4.0/3.0);
            double t1108 = t1106*t1107;
            double t1109 = log(t1108+sqrt(t1108*t1108+1.0));
            double t1110 = d*t1106*t1107*t1109*6.0;
            double t1111 = t1110+1.0;
            double t1113 = 1.0/pow(rho_a[index],8.0/3.0);
            double t1114 = gamma_aa[index]*t1113;
            double t1115 = t1114+1.0;
            double t1116 = 1.0/sqrt(t1115);
            double t1118 = 1.0/pow(rho_a[index],7.0/3.0);
            double t1120 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t1121 = d*gamma_aa[index]*t1120*t1116*8.0;
            double t1122 = d*t1106*t1109*t1118*8.0;
            double t1112 = t1121+t1122;
            double t1117 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t1119 = 1.0/(t1111*t1111);
            v_rho_a_rho_a_[index] = (d*gamma_aa[index]*t1117*(-2.8E1/9.0))/t1111+d*gamma_aa[index]*t1107*t1119* \
               (d*t1106*t1117*t1109*(5.6E1/3.0)-d*(gamma_aa[index]*gamma_aa[index])*1.0/pow(rho_a[index],2.2E1/3.0) \
               *1.0/pow(t1115,3.0/2.0)*(3.2E1/3.0)+d*gamma_aa[index]*1.0/pow(rho_a[index],1.4E1/3.0)*t1116*4.0E1) \
               -d*gamma_aa[index]*1.0/(t1111*t1111*t1111)*(t1112*t1112)*t1107*2.0+d*gamma_aa[index]*t1112*t1118*t1119* \
               (8.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t1124 = sqrt(gamma_aa[index]);
                double t1125 = 1.0/pow(rho_a[index],4.0/3.0);
                double t1126 = t1124*t1125;
                double t1127 = log(t1126+sqrt(t1126*t1126+1.0));
                double t1128 = d*t1124*t1125*t1127*6.0;
                double t1129 = t1128+1.0;
                double t1130 = 1.0/pow(rho_a[index],7.0/3.0);
                double t1131 = 1.0/pow(rho_a[index],8.0/3.0);
                double t1132 = gamma_aa[index]*t1131;
                double t1133 = t1132+1.0;
                double t1134 = 1.0/sqrt(t1133);
                double t1135 = 1.0/(t1129*t1129);
                double t1136 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t1137 = 1.0/sqrt(gamma_aa[index]);
                double t1138 = d*t1131*t1134*3.0;
                double t1139 = d*t1125*t1127*t1137*3.0;
                double t1140 = t1138+t1139;
                double t1141 = d*gamma_aa[index]*t1134*t1136*8.0;
                double t1142 = d*t1130*t1124*t1127*8.0;
                double t1143 = t1141+t1142;
                v_rho_a_gamma_aa_[index] = (d*t1130*(4.0/3.0))/t1129-d*t1125*t1143*t1135-d*gamma_aa[index]*t1125* \
                   t1135*(d*t1134*t1136*1.2E1+d*t1130*t1127*t1137*4.0-d*gamma_aa[index]*1.0/pow(rho_a[index],1.9E1/3.0) \
                   *1.0/pow(t1133,3.0/2.0)*4.0)-d*gamma_aa[index]*t1130*t1140*t1135*(4.0/3.0)+d*gamma_aa[index]*t1140* \
                   t1125*t1143*1.0/(t1129*t1129*t1129)*2.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t1145 = 1.0/pow(rho_a[index],8.0/3.0);
                double t1146 = 1.0/pow(rho_a[index],4.0/3.0);
                double t1147 = sqrt(gamma_aa[index]);
                double t1148 = t1146*t1147;
                double t1149 = log(t1148+sqrt(t1148*t1148+1.0));
                double t1150 = d*t1146*t1147*t1149*6.0;
                double t1151 = t1150+1.0;
                double t1152 = 1.0/(t1151*t1151);
                double t1153 = gamma_aa[index]*t1145;
                double t1154 = t1153+1.0;
                double t1155 = 1.0/sqrt(t1154);
                double t1156 = d*t1145*t1155*3.0;
                double t1157 = 1.0/sqrt(gamma_aa[index]);
                double t1158 = d*t1146*t1157*t1149*3.0;
                double t1159 = t1156+t1158;
                v_gamma_aa_gamma_aa_[index] = d*t1152*t1146*t1159*4.0-d*gamma_aa[index]*1.0/(t1151*t1151*t1151)*t1146* \
                   (t1159*t1159)*4.0-d*gamma_aa[index]*t1152*t1146*(d*1.0/pow(rho_a[index],1.6E1/3.0)*1.0/pow(t1154,3.0/ \
                   2.0)*(3.0/2.0)-(d*t1145*t1155*(3.0/2.0))/gamma_aa[index]+d*1.0/pow(gamma_aa[index],3.0/2.0)*t1146* \
                   t1149*(3.0/2.0))*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void B88_X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double d = params_[0].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t670 = 1.0/pow(rho_a[index],4.0/3.0);
            double t671 = sqrt(gamma_aa[index]);
            double t672 = 1.0/pow(rho_b[index],4.0/3.0);
            double t673 = sqrt(gamma_bb[index]);
            functional_[index] = -(d*gamma_aa[index]*t670)/(d*t670*t671*log(t670*t671+sqrt((t670*t670)*(t671* \
               t671)+1.0))*6.0+1.0)-(d*gamma_bb[index]*t672)/(d*t672*t673*log(t672*t673+sqrt((t672*t672)*(t673*t673) \
               +1.0))*6.0+1.0);
        } else if (rho_a[index] > cutoff_) {
            double t946 = 1.0/pow(rho_a[index],4.0/3.0);
            double t947 = sqrt(gamma_aa[index]);
            functional_[index] = -(d*gamma_aa[index]*t946)/(d*t946*t947*log(t946*t947+sqrt((t946*t946)*(t947* \
               t947)+1.0))*6.0+1.0);
        } else if (rho_b[index] > cutoff_) {
            double t842 = 1.0/pow(rho_b[index],4.0/3.0);
            double t843 = sqrt(gamma_bb[index]);
            functional_[index] = -(d*gamma_bb[index]*t842)/(d*t842*t843*log(t842*t843+sqrt((t842*t842)*(t843* \
               t843)+1.0))*6.0+1.0);
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t675 = sqrt(gamma_aa[index]);
            double t676 = 1.0/pow(rho_a[index],4.0/3.0);
            double t677 = t675*t676;
            double t678 = log(t677+sqrt(t677*t677+1.0));
            double t679 = d*t675*t676*t678*6.0;
            double t680 = t679+1.0;
            double t681 = 1.0/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = (d*gamma_aa[index]*t681*(4.0/3.0))/t680-d*gamma_aa[index]*t676*1.0/(t680*t680)* \
               (d*t675*t678*t681*8.0+d*gamma_aa[index]*1.0/pow(rho_a[index],1.1E1/3.0)*1.0/sqrt(gamma_aa[index]*1.0/ \
               pow(rho_a[index],8.0/3.0)+1.0)*8.0);
        } else if (rho_a[index] > cutoff_) {
            double t949 = sqrt(gamma_aa[index]);
            double t950 = 1.0/pow(rho_a[index],4.0/3.0);
            double t951 = t949*t950;
            double t952 = log(t951+sqrt(t951*t951+1.0));
            double t953 = d*t949*t950*t952*6.0;
            double t954 = t953+1.0;
            double t955 = 1.0/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = (d*gamma_aa[index]*t955*(4.0/3.0))/t954-d*gamma_aa[index]*t950*1.0/(t954*t954)* \
               (d*t949*t952*t955*8.0+d*gamma_aa[index]*1.0/pow(rho_a[index],1.1E1/3.0)*1.0/sqrt(gamma_aa[index]*1.0/ \
               pow(rho_a[index],8.0/3.0)+1.0)*8.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t683 = sqrt(gamma_bb[index]);
            double t684 = 1.0/pow(rho_b[index],4.0/3.0);
            double t685 = t683*t684;
            double t686 = log(t685+sqrt(t685*t685+1.0));
            double t687 = d*t683*t684*t686*6.0;
            double t688 = t687+1.0;
            double t689 = 1.0/pow(rho_b[index],7.0/3.0);
            v_rho_b_[index] = (d*gamma_bb[index]*t689*(4.0/3.0))/t688-d*gamma_bb[index]*t684*1.0/(t688*t688)* \
               (d*t683*t686*t689*8.0+d*gamma_bb[index]*1.0/pow(rho_b[index],1.1E1/3.0)*1.0/sqrt(gamma_bb[index]*1.0/ \
               pow(rho_b[index],8.0/3.0)+1.0)*8.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t846 = sqrt(gamma_bb[index]);
            double t847 = 1.0/pow(rho_b[index],4.0/3.0);
            double t848 = t846*t847;
            double t849 = log(t848+sqrt(t848*t848+1.0));
            double t850 = d*t846*t847*t849*6.0;
            double t851 = t850+1.0;
            double t852 = 1.0/pow(rho_b[index],7.0/3.0);
            v_rho_b_[index] = (d*gamma_bb[index]*t852*(4.0/3.0))/t851-d*gamma_bb[index]*t847*1.0/(t851*t851)* \
               (d*t846*t849*t852*8.0+d*gamma_bb[index]*1.0/pow(rho_b[index],1.1E1/3.0)*1.0/sqrt(gamma_bb[index]*1.0/ \
               pow(rho_b[index],8.0/3.0)+1.0)*8.0);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t691 = 1.0/pow(rho_a[index],4.0/3.0);
                double t692 = sqrt(gamma_aa[index]);
                double t693 = 1.0/pow(rho_a[index],8.0/3.0);
                double t694 = t691*t692;
                double t695 = log(t694+sqrt(t694*t694+1.0));
                double t696 = d*t691*t692*t695*6.0;
                double t697 = t696+1.0;
                v_gamma_aa_[index] = -(d*t691)/t697+d*gamma_aa[index]*t691*1.0/(t697*t697)*(d*t693*1.0/sqrt(gamma_aa[index]* \
                   t693+1.0)*3.0+d*1.0/sqrt(gamma_aa[index])*t691*t695*3.0);
            } else if (rho_a[index] > cutoff_) {
                double t958 = 1.0/pow(rho_a[index],4.0/3.0);
                double t959 = sqrt(gamma_aa[index]);
                double t960 = 1.0/pow(rho_a[index],8.0/3.0);
                double t961 = t958*t959;
                double t962 = log(t961+sqrt(t961*t961+1.0));
                double t963 = d*t958*t959*t962*6.0;
                double t964 = t963+1.0;
                v_gamma_aa_[index] = -(d*t958)/t964+d*gamma_aa[index]*t958*1.0/(t964*t964)*(d*t960*1.0/sqrt(gamma_aa[index]* \
                   t960+1.0)*3.0+d*1.0/sqrt(gamma_aa[index])*t958*t962*3.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t700 = 1.0/pow(rho_b[index],4.0/3.0);
                double t701 = sqrt(gamma_bb[index]);
                double t702 = 1.0/pow(rho_b[index],8.0/3.0);
                double t703 = t700*t701;
                double t704 = log(t703+sqrt(t703*t703+1.0));
                double t705 = d*t700*t701*t704*6.0;
                double t706 = t705+1.0;
                v_gamma_bb_[index] = -(d*t700)/t706+d*gamma_bb[index]*t700*1.0/(t706*t706)*(d*t702*1.0/sqrt(gamma_bb[index]* \
                   t702+1.0)*3.0+d*1.0/sqrt(gamma_bb[index])*t700*t704*3.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t856 = 1.0/pow(rho_b[index],4.0/3.0);
                double t857 = sqrt(gamma_bb[index]);
                double t858 = 1.0/pow(rho_b[index],8.0/3.0);
                double t859 = t856*t857;
                double t860 = log(t859+sqrt(t859*t859+1.0));
                double t861 = d*t856*t857*t860*6.0;
                double t862 = t861+1.0;
                v_gamma_bb_[index] = -(d*t856)/t862+d*gamma_bb[index]*t856*1.0/(t862*t862)*(d*t858*1.0/sqrt(gamma_bb[index]* \
                   t858+1.0)*3.0+d*1.0/sqrt(gamma_bb[index])*t856*t860*3.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t710 = sqrt(gamma_aa[index]);
            double t711 = 1.0/pow(rho_a[index],4.0/3.0);
            double t712 = t710*t711;
            double t713 = log(t712+sqrt(t712*t712+1.0));
            double t714 = d*t710*t711*t713*6.0;
            double t715 = t714+1.0;
            double t717 = 1.0/pow(rho_a[index],8.0/3.0);
            double t718 = gamma_aa[index]*t717;
            double t719 = t718+1.0;
            double t720 = 1.0/sqrt(t719);
            double t722 = 1.0/pow(rho_a[index],7.0/3.0);
            double t724 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t725 = d*gamma_aa[index]*t720*t724*8.0;
            double t726 = d*t710*t713*t722*8.0;
            double t716 = t725+t726;
            double t721 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t723 = 1.0/(t715*t715);
            v_rho_a_rho_a_[index] = (d*gamma_aa[index]*t721*(-2.8E1/9.0))/t715+d*gamma_aa[index]*t711*t723*(d* \
               t710*t713*t721*(5.6E1/3.0)-d*(gamma_aa[index]*gamma_aa[index])*1.0/pow(rho_a[index],2.2E1/3.0)*1.0/ \
               pow(t719,3.0/2.0)*(3.2E1/3.0)+d*gamma_aa[index]*1.0/pow(rho_a[index],1.4E1/3.0)*t720*4.0E1)-d*gamma_aa[index]* \
               t711*1.0/(t715*t715*t715)*(t716*t716)*2.0+d*gamma_aa[index]*t716*t722*t723*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t970 = sqrt(gamma_aa[index]);
            double t971 = 1.0/pow(rho_a[index],4.0/3.0);
            double t972 = t970*t971;
            double t973 = log(t972+sqrt(t972*t972+1.0));
            double t974 = d*t970*t971*t973*6.0;
            double t975 = t974+1.0;
            double t977 = 1.0/pow(rho_a[index],8.0/3.0);
            double t978 = gamma_aa[index]*t977;
            double t979 = t978+1.0;
            double t980 = 1.0/sqrt(t979);
            double t982 = 1.0/pow(rho_a[index],7.0/3.0);
            double t984 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t985 = d*gamma_aa[index]*t980*t984*8.0;
            double t986 = d*t970*t973*t982*8.0;
            double t976 = t985+t986;
            double t981 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t983 = 1.0/(t975*t975);
            v_rho_a_rho_a_[index] = (d*gamma_aa[index]*t981*(-2.8E1/9.0))/t975+d*gamma_aa[index]*t971*t983*(d* \
               t970*t973*t981*(5.6E1/3.0)-d*(gamma_aa[index]*gamma_aa[index])*1.0/pow(rho_a[index],2.2E1/3.0)*1.0/ \
               pow(t979,3.0/2.0)*(3.2E1/3.0)+d*gamma_aa[index]*1.0/pow(rho_a[index],1.4E1/3.0)*t980*4.0E1)-d*gamma_aa[index]* \
               t971*1.0/(t975*t975*t975)*(t976*t976)*2.0+d*gamma_aa[index]*t976*t982*t983*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t729 = sqrt(gamma_bb[index]);
            double t730 = 1.0/pow(rho_b[index],4.0/3.0);
            double t731 = t729*t730;
            double t732 = log(t731+sqrt(t731*t731+1.0));
            double t733 = d*t729*t730*t732*6.0;
            double t734 = t733+1.0;
            double t736 = 1.0/pow(rho_b[index],8.0/3.0);
            double t737 = gamma_bb[index]*t736;
            double t738 = t737+1.0;
            double t739 = 1.0/sqrt(t738);
            double t741 = 1.0/pow(rho_b[index],7.0/3.0);
            double t743 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t744 = d*gamma_bb[index]*t739*t743*8.0;
            double t745 = d*t729*t732*t741*8.0;
            double t735 = t744+t745;
            double t740 = 1.0/pow(rho_b[index],1.0E1/3.0);
            double t742 = 1.0/(t734*t734);
            v_rho_b_rho_b_[index] = (d*gamma_bb[index]*t740*(-2.8E1/9.0))/t734+d*gamma_bb[index]*t730*t742*(d* \
               t729*t732*t740*(5.6E1/3.0)-d*(gamma_bb[index]*gamma_bb[index])*1.0/pow(rho_b[index],2.2E1/3.0)*1.0/ \
               pow(t738,3.0/2.0)*(3.2E1/3.0)+d*gamma_bb[index]*1.0/pow(rho_b[index],1.4E1/3.0)*t739*4.0E1)-d*gamma_bb[index]* \
               t730*1.0/(t734*t734*t734)*(t735*t735)*2.0+d*gamma_bb[index]*t735*t741*t742*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t868 = sqrt(gamma_bb[index]);
            double t869 = 1.0/pow(rho_b[index],4.0/3.0);
            double t870 = t868*t869;
            double t871 = log(t870+sqrt(t870*t870+1.0));
            double t872 = d*t868*t869*t871*6.0;
            double t873 = t872+1.0;
            double t875 = 1.0/pow(rho_b[index],8.0/3.0);
            double t876 = gamma_bb[index]*t875;
            double t877 = t876+1.0;
            double t878 = 1.0/sqrt(t877);
            double t880 = 1.0/pow(rho_b[index],7.0/3.0);
            double t882 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t883 = d*gamma_bb[index]*t878*t882*8.0;
            double t884 = d*t868*t871*t880*8.0;
            double t874 = t883+t884;
            double t879 = 1.0/pow(rho_b[index],1.0E1/3.0);
            double t881 = 1.0/(t873*t873);
            v_rho_b_rho_b_[index] = (d*gamma_bb[index]*t879*(-2.8E1/9.0))/t873+d*gamma_bb[index]*t869*t881*(d* \
               t868*t871*t879*(5.6E1/3.0)-d*(gamma_bb[index]*gamma_bb[index])*1.0/pow(rho_b[index],2.2E1/3.0)*1.0/ \
               pow(t877,3.0/2.0)*(3.2E1/3.0)+d*gamma_bb[index]*1.0/pow(rho_b[index],1.4E1/3.0)*t878*4.0E1)-d*gamma_bb[index]* \
               t869*1.0/(t873*t873*t873)*(t874*t874)*2.0+d*gamma_bb[index]*t874*t880*t881*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t747 = sqrt(gamma_aa[index]);
                double t748 = 1.0/pow(rho_a[index],4.0/3.0);
                double t749 = t747*t748;
                double t750 = log(t749+sqrt(t749*t749+1.0));
                double t751 = d*t747*t748*t750*6.0;
                double t752 = t751+1.0;
                double t753 = 1.0/pow(rho_a[index],7.0/3.0);
                double t754 = 1.0/pow(rho_a[index],8.0/3.0);
                double t755 = gamma_aa[index]*t754;
                double t756 = t755+1.0;
                double t757 = 1.0/sqrt(t756);
                double t758 = 1.0/(t752*t752);
                double t759 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t760 = 1.0/sqrt(gamma_aa[index]);
                double t761 = d*t754*t757*3.0;
                double t762 = d*t748*t750*t760*3.0;
                double t763 = t761+t762;
                double t764 = d*gamma_aa[index]*t757*t759*8.0;
                double t765 = d*t747*t750*t753*8.0;
                double t766 = t764+t765;
                v_rho_a_gamma_aa_[index] = (d*t753*(4.0/3.0))/t752-d*t748*t758*t766-d*gamma_aa[index]*t748*t758*(d* \
                   t757*t759*1.2E1+d*t750*t753*t760*4.0-d*gamma_aa[index]*1.0/pow(rho_a[index],1.9E1/3.0)*1.0/pow(t756,3.0/ \
                   2.0)*4.0)-d*gamma_aa[index]*t753*t758*t763*(4.0/3.0)+d*gamma_aa[index]*t748*1.0/(t752*t752*t752)*t763* \
                   t766*2.0;
            } else if (rho_a[index] > cutoff_) {
                double t990 = sqrt(gamma_aa[index]);
                double t991 = 1.0/pow(rho_a[index],4.0/3.0);
                double t992 = t990*t991;
                double t993 = log(t992+sqrt(t992*t992+1.0));
                double t994 = d*t990*t991*t993*6.0;
                double t995 = t994+1.0;
                double t996 = 1.0/pow(rho_a[index],7.0/3.0);
                double t997 = 1.0/pow(rho_a[index],8.0/3.0);
                double t998 = gamma_aa[index]*t997;
                double t999 = t998+1.0;
                double t1000 = 1.0/sqrt(t999);
                double t1001 = 1.0/(t995*t995);
                double t1002 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t1003 = 1.0/sqrt(gamma_aa[index]);
                double t1004 = d*t1000*t997*3.0;
                double t1005 = d*t1003*t991*t993*3.0;
                double t1006 = t1004+t1005;
                double t1007 = d*gamma_aa[index]*t1000*t1002*8.0;
                double t1008 = d*t990*t993*t996*8.0;
                double t1009 = t1007+t1008;
                v_rho_a_gamma_aa_[index] = (d*t996*(4.0/3.0))/t995-d*t1001*t1009*t991-d*gamma_aa[index]*t1001*t991* \
                   (d*t1000*t1002*1.2E1+d*t1003*t993*t996*4.0-d*gamma_aa[index]*1.0/pow(rho_a[index],1.9E1/3.0)*1.0/pow(t999,3.0/ \
                   2.0)*4.0)-d*gamma_aa[index]*t1001*t1006*t996*(4.0/3.0)+d*gamma_aa[index]*t1006*t1009*t991*1.0/(t995* \
                   t995*t995)*2.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t772 = sqrt(gamma_bb[index]);
                double t773 = 1.0/pow(rho_b[index],4.0/3.0);
                double t774 = t772*t773;
                double t775 = log(t774+sqrt(t774*t774+1.0));
                double t776 = d*t772*t773*t775*6.0;
                double t777 = t776+1.0;
                double t778 = 1.0/pow(rho_b[index],7.0/3.0);
                double t779 = 1.0/pow(rho_b[index],8.0/3.0);
                double t780 = gamma_bb[index]*t779;
                double t781 = t780+1.0;
                double t782 = 1.0/sqrt(t781);
                double t783 = 1.0/(t777*t777);
                double t784 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t785 = 1.0/sqrt(gamma_bb[index]);
                double t786 = d*t779*t782*3.0;
                double t787 = d*t773*t775*t785*3.0;
                double t788 = t786+t787;
                double t789 = d*gamma_bb[index]*t782*t784*8.0;
                double t790 = d*t772*t775*t778*8.0;
                double t791 = t789+t790;
                v_rho_b_gamma_bb_[index] = (d*t778*(4.0/3.0))/t777-d*t773*t783*t791-d*gamma_bb[index]*t773*t783*(d* \
                   t782*t784*1.2E1+d*t775*t778*t785*4.0-d*gamma_bb[index]*1.0/pow(rho_b[index],1.9E1/3.0)*1.0/pow(t781,3.0/ \
                   2.0)*4.0)-d*gamma_bb[index]*t778*t783*t788*(4.0/3.0)+d*gamma_bb[index]*t773*1.0/(t777*t777*t777)*t788* \
                   t791*2.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t891 = sqrt(gamma_bb[index]);
                double t892 = 1.0/pow(rho_b[index],4.0/3.0);
                double t893 = t891*t892;
                double t894 = log(t893+sqrt(t893*t893+1.0));
                double t895 = d*t891*t892*t894*6.0;
                double t896 = t895+1.0;
                double t897 = 1.0/pow(rho_b[index],7.0/3.0);
                double t898 = 1.0/pow(rho_b[index],8.0/3.0);
                double t899 = gamma_bb[index]*t898;
                double t900 = t899+1.0;
                double t901 = 1.0/sqrt(t900);
                double t902 = 1.0/(t896*t896);
                double t903 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t904 = 1.0/sqrt(gamma_bb[index]);
                double t905 = d*t898*t901*3.0;
                double t906 = d*t892*t894*t904*3.0;
                double t907 = t905+t906;
                double t908 = d*gamma_bb[index]*t901*t903*8.0;
                double t909 = d*t891*t894*t897*8.0;
                double t910 = t908+t909;
                v_rho_b_gamma_bb_[index] = (d*t897*(4.0/3.0))/t896-d*t892*t902*t910-d*gamma_bb[index]*t892*t902*(d* \
                   t901*t903*1.2E1+d*t894*t897*t904*4.0-d*gamma_bb[index]*1.0/pow(rho_b[index],1.9E1/3.0)*1.0/pow(t900,3.0/ \
                   2.0)*4.0)-d*gamma_bb[index]*t897*t902*t907*(4.0/3.0)+d*gamma_bb[index]*t892*1.0/(t896*t896*t896)*t907* \
                   t910*2.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t793 = 1.0/pow(rho_a[index],8.0/3.0);
                double t794 = 1.0/pow(rho_a[index],4.0/3.0);
                double t795 = sqrt(gamma_aa[index]);
                double t796 = t794*t795;
                double t797 = log(t796+sqrt(t796*t796+1.0));
                double t798 = d*t794*t795*t797*6.0;
                double t799 = t798+1.0;
                double t800 = 1.0/(t799*t799);
                double t801 = gamma_aa[index]*t793;
                double t802 = t801+1.0;
                double t803 = 1.0/sqrt(t802);
                double t804 = d*t793*t803*3.0;
                double t805 = 1.0/sqrt(gamma_aa[index]);
                double t806 = d*t794*t797*t805*3.0;
                double t807 = t804+t806;
                v_gamma_aa_gamma_aa_[index] = d*t794*t800*t807*2.0-d*gamma_aa[index]*t794*1.0/(t799*t799*t799)*(t807* \
                   t807)*2.0-d*gamma_aa[index]*t794*t800*(d*1.0/pow(rho_a[index],1.6E1/3.0)*1.0/pow(t802,3.0/2.0)*(3.0/ \
                   2.0)+d*1.0/pow(gamma_aa[index],3.0/2.0)*t794*t797*(3.0/2.0)-(d*t793*t803*(3.0/2.0))/gamma_aa[index]) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t1016 = 1.0/pow(rho_a[index],8.0/3.0);
                double t1017 = 1.0/pow(rho_a[index],4.0/3.0);
                double t1018 = sqrt(gamma_aa[index]);
                double t1019 = t1017*t1018;
                double t1020 = log(t1019+sqrt(t1019*t1019+1.0));
                double t1021 = d*t1020*t1017*t1018*6.0;
                double t1022 = t1021+1.0;
                double t1023 = 1.0/(t1022*t1022);
                double t1024 = gamma_aa[index]*t1016;
                double t1025 = t1024+1.0;
                double t1026 = 1.0/sqrt(t1025);
                double t1027 = d*t1016*t1026*3.0;
                double t1028 = 1.0/sqrt(gamma_aa[index]);
                double t1029 = d*t1020*t1017*t1028*3.0;
                double t1030 = t1027+t1029;
                v_gamma_aa_gamma_aa_[index] = d*t1030*t1023*t1017*2.0-d*gamma_aa[index]*(t1030*t1030)*1.0/(t1022* \
                   t1022*t1022)*t1017*2.0-d*gamma_aa[index]*t1023*t1017*(d*1.0/pow(rho_a[index],1.6E1/3.0)*1.0/pow(t1025,3.0/ \
                   2.0)*(3.0/2.0)+d*1.0/pow(gamma_aa[index],3.0/2.0)*t1020*t1017*(3.0/2.0)-(d*t1016*t1026*(3.0/2.0))/ \
                   gamma_aa[index]);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t813 = 1.0/pow(rho_b[index],8.0/3.0);
                double t814 = 1.0/pow(rho_b[index],4.0/3.0);
                double t815 = sqrt(gamma_bb[index]);
                double t816 = t814*t815;
                double t817 = log(t816+sqrt(t816*t816+1.0));
                double t818 = d*t814*t815*t817*6.0;
                double t819 = t818+1.0;
                double t820 = 1.0/(t819*t819);
                double t821 = gamma_bb[index]*t813;
                double t822 = t821+1.0;
                double t823 = 1.0/sqrt(t822);
                double t824 = d*t813*t823*3.0;
                double t825 = 1.0/sqrt(gamma_bb[index]);
                double t826 = d*t814*t817*t825*3.0;
                double t827 = t824+t826;
                v_gamma_bb_gamma_bb_[index] = d*t814*t820*t827*2.0-d*gamma_bb[index]*t814*1.0/(t819*t819*t819)*(t827* \
                   t827)*2.0-d*gamma_bb[index]*t814*t820*(d*1.0/pow(rho_b[index],1.6E1/3.0)*1.0/pow(t822,3.0/2.0)*(3.0/ \
                   2.0)+d*1.0/pow(gamma_bb[index],3.0/2.0)*t814*t817*(3.0/2.0)-(d*t813*t823*(3.0/2.0))/gamma_bb[index]) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t917 = 1.0/pow(rho_b[index],8.0/3.0);
                double t918 = 1.0/pow(rho_b[index],4.0/3.0);
                double t919 = sqrt(gamma_bb[index]);
                double t920 = t918*t919;
                double t921 = log(t920+sqrt(t920*t920+1.0));
                double t922 = d*t918*t919*t921*6.0;
                double t923 = t922+1.0;
                double t924 = 1.0/(t923*t923);
                double t925 = gamma_bb[index]*t917;
                double t926 = t925+1.0;
                double t927 = 1.0/sqrt(t926);
                double t928 = d*t917*t927*3.0;
                double t929 = 1.0/sqrt(gamma_bb[index]);
                double t930 = d*t918*t921*t929*3.0;
                double t931 = t928+t930;
                v_gamma_bb_gamma_bb_[index] = d*t918*t924*t931*2.0-d*gamma_bb[index]*t918*1.0/(t923*t923*t923)*(t931* \
                   t931)*2.0-d*gamma_bb[index]*t918*t924*(d*1.0/pow(rho_b[index],1.6E1/3.0)*1.0/pow(t926,3.0/2.0)*(3.0/ \
                   2.0)+d*1.0/pow(gamma_bb[index],3.0/2.0)*t918*t921*(3.0/2.0)-(d*t917*t927*(3.0/2.0))/gamma_bb[index]) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

