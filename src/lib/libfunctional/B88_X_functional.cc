/**********************************************************
* B88_X_functional.cc: definitions for B88_X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 31-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "B88_X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B88_X_Functional::B88_X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B88_X";
    description_ = "Becke 88 Exchange (GGA Only)";
    citation_ = "A.D. Becke, Phys. Rev. A, 38(6):3098-3100, 1988";
    
    double d = 4.1999999999999997E-03;
    params_.push_back(make_pair("d",d));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B88_X_Functional::~B88_X_Functional()
{
}
void B88_X_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double d = params_[0].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t30770 = 1/pow(rho_a[index],4.0/3.0);
            double t30771 = sqrt(gamma_aa[index]);
            functional_[index] = (d*gamma_aa[index]*t30770*-2.0)/(d*t30770*t30771*log(t30770*t30771+sqrt((t30770* \
               t30770)*(t30771*t30771)+1.0))*6.0+1.0);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t30773 = sqrt(gamma_aa[index]);
            double t30774 = 1/pow(rho_a[index],4.0/3.0);
            double t30775 = t30773*t30774;
            double t30776 = log(t30775+sqrt(t30775*t30775+1.0));
            double t30777 = d*t30773*t30774*t30776*6.0;
            double t30778 = t30777+1.0;
            double t30779 = 1/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = (d*gamma_aa[index]*t30779*(4.0/3.0))/t30778-d*gamma_aa[index]*t30774*1/(t30778* \
               t30778)*(d*t30773*t30776*t30779*8.0+d*gamma_aa[index]*1/pow(rho_a[index],1.1E1/3.0)*1/sqrt(gamma_aa[index]* \
               1/pow(rho_a[index],8.0/3.0)+1.0)*8.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t30781 = 1/pow(rho_a[index],4.0/3.0);
                double t30782 = sqrt(gamma_aa[index]);
                double t30783 = 1/pow(rho_a[index],8.0/3.0);
                double t30784 = t30781*t30782;
                double t30785 = log(t30784+sqrt(t30784*t30784+1.0));
                double t30786 = d*t30781*t30782*t30785*6.0;
                double t30787 = t30786+1.0;
                v_gamma_aa_[index] = (d*t30781*-2.0)/t30787+d*gamma_aa[index]*t30781*1/(t30787*t30787)*(d*t30783* \
                   1/sqrt(gamma_aa[index]*t30783+1.0)*3.0+d*1/sqrt(gamma_aa[index])*t30781*t30785*3.0)*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t30790 = sqrt(gamma_aa[index]);
            double t30791 = 1/pow(rho_a[index],4.0/3.0);
            double t30792 = t30790*t30791;
            double t30793 = log(t30792+sqrt(t30792*t30792+1.0));
            double t30794 = d*t30790*t30791*t30793*6.0;
            double t30795 = t30794+1.0;
            double t30797 = 1/pow(rho_a[index],8.0/3.0);
            double t30798 = gamma_aa[index]*t30797;
            double t30799 = t30798+1.0;
            double t30800 = 1/sqrt(t30799);
            double t30802 = 1/pow(rho_a[index],7.0/3.0);
            double t30804 = 1/pow(rho_a[index],1.1E1/3.0);
            double t30805 = d*gamma_aa[index]*t30800*t30804*8.0;
            double t30806 = d*t30802*t30790*t30793*8.0;
            double t30796 = t30805+t30806;
            double t30801 = 1/pow(rho_a[index],1.0E1/3.0);
            double t30803 = 1/(t30795*t30795);
            v_rho_a_rho_a_[index] = (d*gamma_aa[index]*t30801*(-2.8E1/9.0))/t30795+d*gamma_aa[index]*t30803*t30791* \
               (d*t30801*t30790*t30793*(5.6E1/3.0)-d*(gamma_aa[index]*gamma_aa[index])*1/pow(rho_a[index],2.2E1/3.0) \
               *1/pow(t30799,3.0/2.0)*(3.2E1/3.0)+d*gamma_aa[index]*1/pow(rho_a[index],1.4E1/3.0)*t30800*4.0E1)-d* \
               gamma_aa[index]*t30791*1/(t30795*t30795*t30795)*(t30796*t30796)*2.0+d*gamma_aa[index]*t30802*t30803* \
               t30796*(8.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t30808 = sqrt(gamma_aa[index]);
                double t30809 = 1/pow(rho_a[index],4.0/3.0);
                double t30810 = t30808*t30809;
                double t30811 = log(t30810+sqrt(t30810*t30810+1.0));
                double t30812 = d*t30811*t30808*t30809*6.0;
                double t30813 = t30812+1.0;
                double t30814 = 1/pow(rho_a[index],7.0/3.0);
                double t30815 = 1/pow(rho_a[index],8.0/3.0);
                double t30816 = gamma_aa[index]*t30815;
                double t30817 = t30816+1.0;
                double t30818 = 1/sqrt(t30817);
                double t30819 = 1/(t30813*t30813);
                double t30820 = 1/pow(rho_a[index],1.1E1/3.0);
                double t30821 = 1/sqrt(gamma_aa[index]);
                double t30822 = d*t30815*t30818*3.0;
                double t30823 = d*t30811*t30821*t30809*3.0;
                double t30824 = t30822+t30823;
                double t30825 = d*gamma_aa[index]*t30820*t30818*8.0;
                double t30826 = d*t30811*t30814*t30808*8.0;
                double t30827 = t30825+t30826;
                v_rho_a_gamma_aa_[index] = (d*t30814*(4.0/3.0))/t30813-d*t30809*t30827*t30819-d*gamma_aa[index]*t30809* \
                   t30819*(d*t30820*t30818*1.2E1+d*t30811*t30821*t30814*4.0-d*gamma_aa[index]*1/pow(rho_a[index],1.9E1/ \
                   3.0)*1/pow(t30817,3.0/2.0)*4.0)-d*gamma_aa[index]*t30814*t30824*t30819*(4.0/3.0)+d*gamma_aa[index]* \
                   1/(t30813*t30813*t30813)*t30824*t30809*t30827*2.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t30829 = 1/pow(rho_a[index],8.0/3.0);
                double t30830 = 1/pow(rho_a[index],4.0/3.0);
                double t30831 = sqrt(gamma_aa[index]);
                double t30832 = t30830*t30831;
                double t30833 = log(t30832+sqrt(t30832*t30832+1.0));
                double t30834 = d*t30830*t30831*t30833*6.0;
                double t30835 = t30834+1.0;
                double t30836 = 1/(t30835*t30835);
                double t30837 = gamma_aa[index]*t30829;
                double t30838 = t30837+1.0;
                double t30839 = 1/sqrt(t30838);
                double t30840 = d*t30829*t30839*3.0;
                double t30841 = 1/sqrt(gamma_aa[index]);
                double t30842 = d*t30830*t30841*t30833*3.0;
                double t30843 = t30840+t30842;
                v_gamma_aa_gamma_aa_[index] = d*t30830*t30843*t30836*4.0-d*gamma_aa[index]*t30830*(t30843*t30843) \
                   *1/(t30835*t30835*t30835)*4.0-d*gamma_aa[index]*t30830*t30836*(d*1/pow(rho_a[index],1.6E1/3.0)*1/pow(t30838,3.0/ \
                   2.0)*(3.0/2.0)+d*1/pow(gamma_aa[index],3.0/2.0)*t30830*t30833*(3.0/2.0)-(d*t30829*t30839*(3.0/2.0) \
                   )/gamma_aa[index])*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void B88_X_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double d = params_[0].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t30354 = 1/pow(rho_a[index],4.0/3.0);
            double t30355 = sqrt(gamma_aa[index]);
            double t30356 = 1/pow(rho_b[index],4.0/3.0);
            double t30357 = sqrt(gamma_bb[index]);
            functional_[index] = -(d*gamma_aa[index]*t30354)/(d*t30354*t30355*log(t30354*t30355+sqrt((t30354* \
               t30354)*(t30355*t30355)+1.0))*6.0+1.0)-(d*gamma_bb[index]*t30356)/(d*t30356*t30357*log(t30356*t30357+ \
               sqrt((t30356*t30356)*(t30357*t30357)+1.0))*6.0+1.0);
        } else if (rho_a[index] > cutoff_) {
            double t30630 = 1/pow(rho_a[index],4.0/3.0);
            double t30631 = sqrt(gamma_aa[index]);
            functional_[index] = -(d*gamma_aa[index]*t30630)/(d*t30630*t30631*log(t30630*t30631+sqrt((t30630* \
               t30630)*(t30631*t30631)+1.0))*6.0+1.0);
        } else if (rho_b[index] > cutoff_) {
            double t30526 = 1/pow(rho_b[index],4.0/3.0);
            double t30527 = sqrt(gamma_bb[index]);
            functional_[index] = -(d*gamma_bb[index]*t30526)/(d*t30526*t30527*log(t30526*t30527+sqrt((t30526* \
               t30526)*(t30527*t30527)+1.0))*6.0+1.0);
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t30359 = sqrt(gamma_aa[index]);
            double t30360 = 1/pow(rho_a[index],4.0/3.0);
            double t30361 = t30360*t30359;
            double t30362 = log(t30361+sqrt(t30361*t30361+1.0));
            double t30363 = d*t30360*t30362*t30359*6.0;
            double t30364 = t30363+1.0;
            double t30365 = 1/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = (d*gamma_aa[index]*t30365*(4.0/3.0))/t30364-d*gamma_aa[index]*t30360*1/(t30364* \
               t30364)*(d*t30362*t30365*t30359*8.0+d*gamma_aa[index]*1/pow(rho_a[index],1.1E1/3.0)*1/sqrt(gamma_aa[index]* \
               1/pow(rho_a[index],8.0/3.0)+1.0)*8.0);
        } else if (rho_a[index] > cutoff_) {
            double t30633 = sqrt(gamma_aa[index]);
            double t30634 = 1/pow(rho_a[index],4.0/3.0);
            double t30635 = t30633*t30634;
            double t30636 = log(t30635+sqrt(t30635*t30635+1.0));
            double t30637 = d*t30633*t30634*t30636*6.0;
            double t30638 = t30637+1.0;
            double t30639 = 1/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = (d*gamma_aa[index]*t30639*(4.0/3.0))/t30638-d*gamma_aa[index]*t30634*1/(t30638* \
               t30638)*(d*t30633*t30636*t30639*8.0+d*gamma_aa[index]*1/pow(rho_a[index],1.1E1/3.0)*1/sqrt(gamma_aa[index]* \
               1/pow(rho_a[index],8.0/3.0)+1.0)*8.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t30367 = sqrt(gamma_bb[index]);
            double t30368 = 1/pow(rho_b[index],4.0/3.0);
            double t30369 = t30367*t30368;
            double t30370 = log(t30369+sqrt(t30369*t30369+1.0));
            double t30371 = d*t30370*t30367*t30368*6.0;
            double t30372 = t30371+1.0;
            double t30373 = 1/pow(rho_b[index],7.0/3.0);
            v_rho_b_[index] = (d*gamma_bb[index]*t30373*(4.0/3.0))/t30372-d*gamma_bb[index]*1/(t30372*t30372) \
               *t30368*(d*t30370*t30373*t30367*8.0+d*gamma_bb[index]*1/pow(rho_b[index],1.1E1/3.0)*1/sqrt(gamma_bb[index]* \
               1/pow(rho_b[index],8.0/3.0)+1.0)*8.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t30530 = sqrt(gamma_bb[index]);
            double t30531 = 1/pow(rho_b[index],4.0/3.0);
            double t30532 = t30530*t30531;
            double t30533 = log(t30532+sqrt(t30532*t30532+1.0));
            double t30534 = d*t30530*t30531*t30533*6.0;
            double t30535 = t30534+1.0;
            double t30536 = 1/pow(rho_b[index],7.0/3.0);
            v_rho_b_[index] = (d*gamma_bb[index]*t30536*(4.0/3.0))/t30535-d*gamma_bb[index]*t30531*1/(t30535* \
               t30535)*(d*t30530*t30533*t30536*8.0+d*gamma_bb[index]*1/pow(rho_b[index],1.1E1/3.0)*1/sqrt(gamma_bb[index]* \
               1/pow(rho_b[index],8.0/3.0)+1.0)*8.0);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30375 = 1/pow(rho_a[index],4.0/3.0);
                double t30376 = sqrt(gamma_aa[index]);
                double t30377 = 1/pow(rho_a[index],8.0/3.0);
                double t30378 = t30375*t30376;
                double t30379 = log(t30378+sqrt(t30378*t30378+1.0));
                double t30380 = d*t30375*t30376*t30379*6.0;
                double t30381 = t30380+1.0;
                v_gamma_aa_[index] = -(d*t30375)/t30381+d*gamma_aa[index]*1/(t30381*t30381)*t30375*(d*t30377*1/sqrt(gamma_aa[index]* \
                   t30377+1.0)*3.0+d*1/sqrt(gamma_aa[index])*t30375*t30379*3.0);
            } else if (rho_a[index] > cutoff_) {
                double t30642 = 1/pow(rho_a[index],4.0/3.0);
                double t30643 = sqrt(gamma_aa[index]);
                double t30644 = 1/pow(rho_a[index],8.0/3.0);
                double t30645 = t30642*t30643;
                double t30646 = log(t30645+sqrt(t30645*t30645+1.0));
                double t30647 = d*t30642*t30643*t30646*6.0;
                double t30648 = t30647+1.0;
                v_gamma_aa_[index] = -(d*t30642)/t30648+d*gamma_aa[index]*t30642*1/(t30648*t30648)*(d*t30644*1/sqrt(gamma_aa[index]* \
                   t30644+1.0)*3.0+d*1/sqrt(gamma_aa[index])*t30642*t30646*3.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30384 = 1/pow(rho_b[index],4.0/3.0);
                double t30385 = sqrt(gamma_bb[index]);
                double t30386 = 1/pow(rho_b[index],8.0/3.0);
                double t30387 = t30384*t30385;
                double t30388 = log(t30387+sqrt(t30387*t30387+1.0));
                double t30389 = d*t30384*t30385*t30388*6.0;
                double t30390 = t30389+1.0;
                v_gamma_bb_[index] = -(d*t30384)/t30390+d*gamma_bb[index]*1/(t30390*t30390)*t30384*(d*t30386*1/sqrt(gamma_bb[index]* \
                   t30386+1.0)*3.0+d*1/sqrt(gamma_bb[index])*t30384*t30388*3.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t30540 = 1/pow(rho_b[index],4.0/3.0);
                double t30541 = sqrt(gamma_bb[index]);
                double t30542 = 1/pow(rho_b[index],8.0/3.0);
                double t30543 = t30540*t30541;
                double t30544 = log(t30543+sqrt(t30543*t30543+1.0));
                double t30545 = d*t30540*t30541*t30544*6.0;
                double t30546 = t30545+1.0;
                v_gamma_bb_[index] = -(d*t30540)/t30546+d*gamma_bb[index]*t30540*1/(t30546*t30546)*(d*t30542*1/sqrt(gamma_bb[index]* \
                   t30542+1.0)*3.0+d*1/sqrt(gamma_bb[index])*t30540*t30544*3.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t30394 = sqrt(gamma_aa[index]);
            double t30395 = 1/pow(rho_a[index],4.0/3.0);
            double t30396 = t30394*t30395;
            double t30397 = log(t30396+sqrt(t30396*t30396+1.0));
            double t30398 = d*t30394*t30395*t30397*6.0;
            double t30399 = t30398+1.0;
            double t30401 = 1/pow(rho_a[index],8.0/3.0);
            double t30402 = gamma_aa[index]*t30401;
            double t30403 = t30402+1.0;
            double t30404 = 1/sqrt(t30403);
            double t30406 = 1/pow(rho_a[index],7.0/3.0);
            double t30408 = 1/pow(rho_a[index],1.1E1/3.0);
            double t30409 = d*gamma_aa[index]*t30404*t30408*8.0;
            double t30410 = d*t30406*t30394*t30397*8.0;
            double t30400 = t30410+t30409;
            double t30405 = 1/pow(rho_a[index],1.0E1/3.0);
            double t30407 = 1/(t30399*t30399);
            v_rho_a_rho_a_[index] = (d*gamma_aa[index]*t30405*(-2.8E1/9.0))/t30399+d*gamma_aa[index]*t30407*t30395* \
               (d*t30405*t30394*t30397*(5.6E1/3.0)-d*(gamma_aa[index]*gamma_aa[index])*1/pow(rho_a[index],2.2E1/3.0) \
               *1/pow(t30403,3.0/2.0)*(3.2E1/3.0)+d*gamma_aa[index]*1/pow(rho_a[index],1.4E1/3.0)*t30404*4.0E1)-d* \
               gamma_aa[index]*(t30400*t30400)*t30395*1/(t30399*t30399*t30399)*2.0+d*gamma_aa[index]*t30400*t30406* \
               t30407*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t30654 = sqrt(gamma_aa[index]);
            double t30655 = 1/pow(rho_a[index],4.0/3.0);
            double t30656 = t30654*t30655;
            double t30657 = log(t30656+sqrt(t30656*t30656+1.0));
            double t30658 = d*t30654*t30655*t30657*6.0;
            double t30659 = t30658+1.0;
            double t30661 = 1/pow(rho_a[index],8.0/3.0);
            double t30662 = gamma_aa[index]*t30661;
            double t30663 = t30662+1.0;
            double t30664 = 1/sqrt(t30663);
            double t30666 = 1/pow(rho_a[index],7.0/3.0);
            double t30668 = 1/pow(rho_a[index],1.1E1/3.0);
            double t30669 = d*gamma_aa[index]*t30664*t30668*8.0;
            double t30670 = d*t30654*t30657*t30666*8.0;
            double t30660 = t30670+t30669;
            double t30665 = 1/pow(rho_a[index],1.0E1/3.0);
            double t30667 = 1/(t30659*t30659);
            v_rho_a_rho_a_[index] = (d*gamma_aa[index]*t30665*(-2.8E1/9.0))/t30659+d*gamma_aa[index]*t30655*t30667* \
               (d*t30654*t30665*t30657*(5.6E1/3.0)-d*(gamma_aa[index]*gamma_aa[index])*1/pow(rho_a[index],2.2E1/3.0) \
               *1/pow(t30663,3.0/2.0)*(3.2E1/3.0)+d*gamma_aa[index]*1/pow(rho_a[index],1.4E1/3.0)*t30664*4.0E1)-d* \
               gamma_aa[index]*(t30660*t30660)*t30655*1/(t30659*t30659*t30659)*2.0+d*gamma_aa[index]*t30660*t30666* \
               t30667*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t30413 = sqrt(gamma_bb[index]);
            double t30414 = 1/pow(rho_b[index],4.0/3.0);
            double t30415 = t30413*t30414;
            double t30416 = log(t30415+sqrt(t30415*t30415+1.0));
            double t30417 = d*t30413*t30414*t30416*6.0;
            double t30418 = t30417+1.0;
            double t30420 = 1/pow(rho_b[index],8.0/3.0);
            double t30421 = gamma_bb[index]*t30420;
            double t30422 = t30421+1.0;
            double t30423 = 1/sqrt(t30422);
            double t30425 = 1/pow(rho_b[index],7.0/3.0);
            double t30427 = 1/pow(rho_b[index],1.1E1/3.0);
            double t30428 = d*gamma_bb[index]*t30423*t30427*8.0;
            double t30429 = d*t30413*t30416*t30425*8.0;
            double t30419 = t30428+t30429;
            double t30424 = 1/pow(rho_b[index],1.0E1/3.0);
            double t30426 = 1/(t30418*t30418);
            v_rho_b_rho_b_[index] = (d*gamma_bb[index]*t30424*(-2.8E1/9.0))/t30418+d*gamma_bb[index]*t30414*t30426* \
               (d*t30413*t30424*t30416*(5.6E1/3.0)-d*(gamma_bb[index]*gamma_bb[index])*1/pow(rho_b[index],2.2E1/3.0) \
               *1/pow(t30422,3.0/2.0)*(3.2E1/3.0)+d*gamma_bb[index]*1/pow(rho_b[index],1.4E1/3.0)*t30423*4.0E1)-d* \
               gamma_bb[index]*t30414*1/(t30418*t30418*t30418)*(t30419*t30419)*2.0+d*gamma_bb[index]*t30425*t30426* \
               t30419*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t30552 = sqrt(gamma_bb[index]);
            double t30553 = 1/pow(rho_b[index],4.0/3.0);
            double t30554 = t30552*t30553;
            double t30555 = log(t30554+sqrt(t30554*t30554+1.0));
            double t30556 = d*t30552*t30553*t30555*6.0;
            double t30557 = t30556+1.0;
            double t30559 = 1/pow(rho_b[index],8.0/3.0);
            double t30560 = gamma_bb[index]*t30559;
            double t30561 = t30560+1.0;
            double t30562 = 1/sqrt(t30561);
            double t30564 = 1/pow(rho_b[index],7.0/3.0);
            double t30566 = 1/pow(rho_b[index],1.1E1/3.0);
            double t30567 = d*gamma_bb[index]*t30562*t30566*8.0;
            double t30568 = d*t30552*t30555*t30564*8.0;
            double t30558 = t30567+t30568;
            double t30563 = 1/pow(rho_b[index],1.0E1/3.0);
            double t30565 = 1/(t30557*t30557);
            v_rho_b_rho_b_[index] = (d*gamma_bb[index]*t30563*(-2.8E1/9.0))/t30557+d*gamma_bb[index]*t30553*t30565* \
               (d*t30552*t30563*t30555*(5.6E1/3.0)-d*(gamma_bb[index]*gamma_bb[index])*1/pow(rho_b[index],2.2E1/3.0) \
               *1/pow(t30561,3.0/2.0)*(3.2E1/3.0)+d*gamma_bb[index]*1/pow(rho_b[index],1.4E1/3.0)*t30562*4.0E1)-d* \
               gamma_bb[index]*t30553*1/(t30557*t30557*t30557)*(t30558*t30558)*2.0+d*gamma_bb[index]*t30564*t30565* \
               t30558*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30431 = sqrt(gamma_aa[index]);
                double t30432 = 1/pow(rho_a[index],4.0/3.0);
                double t30433 = t30431*t30432;
                double t30434 = log(t30433+sqrt(t30433*t30433+1.0));
                double t30435 = d*t30431*t30432*t30434*6.0;
                double t30436 = t30435+1.0;
                double t30437 = 1/pow(rho_a[index],7.0/3.0);
                double t30438 = 1/pow(rho_a[index],8.0/3.0);
                double t30439 = gamma_aa[index]*t30438;
                double t30440 = t30439+1.0;
                double t30441 = 1/sqrt(t30440);
                double t30442 = 1/(t30436*t30436);
                double t30443 = 1/pow(rho_a[index],1.1E1/3.0);
                double t30444 = 1/sqrt(gamma_aa[index]);
                double t30445 = d*t30441*t30438*3.0;
                double t30446 = d*t30432*t30434*t30444*3.0;
                double t30447 = t30445+t30446;
                double t30448 = d*gamma_aa[index]*t30441*t30443*8.0;
                double t30449 = d*t30431*t30434*t30437*8.0;
                double t30450 = t30448+t30449;
                v_rho_a_gamma_aa_[index] = (d*t30437*(4.0/3.0))/t30436-d*t30432*t30450*t30442-d*gamma_aa[index]*t30432* \
                   t30442*(d*t30441*t30443*1.2E1+d*t30434*t30444*t30437*4.0-d*gamma_aa[index]*1/pow(rho_a[index],1.9E1/ \
                   3.0)*1/pow(t30440,3.0/2.0)*4.0)-d*gamma_aa[index]*t30442*t30437*t30447*(4.0/3.0)+d*gamma_aa[index]* \
                   t30432*t30450*1/(t30436*t30436*t30436)*t30447*2.0;
            } else if (rho_a[index] > cutoff_) {
                double t30674 = sqrt(gamma_aa[index]);
                double t30675 = 1/pow(rho_a[index],4.0/3.0);
                double t30676 = t30674*t30675;
                double t30677 = log(t30676+sqrt(t30676*t30676+1.0));
                double t30678 = d*t30674*t30675*t30677*6.0;
                double t30679 = t30678+1.0;
                double t30680 = 1/pow(rho_a[index],7.0/3.0);
                double t30681 = 1/pow(rho_a[index],8.0/3.0);
                double t30682 = gamma_aa[index]*t30681;
                double t30683 = t30682+1.0;
                double t30684 = 1/sqrt(t30683);
                double t30685 = 1/(t30679*t30679);
                double t30686 = 1/pow(rho_a[index],1.1E1/3.0);
                double t30687 = 1/sqrt(gamma_aa[index]);
                double t30688 = d*t30681*t30684*3.0;
                double t30689 = d*t30675*t30677*t30687*3.0;
                double t30690 = t30688+t30689;
                double t30691 = d*gamma_aa[index]*t30684*t30686*8.0;
                double t30692 = d*t30680*t30674*t30677*8.0;
                double t30693 = t30691+t30692;
                v_rho_a_gamma_aa_[index] = (d*t30680*(4.0/3.0))/t30679-d*t30675*t30693*t30685-d*gamma_aa[index]*t30675* \
                   t30685*(d*t30684*t30686*1.2E1+d*t30680*t30677*t30687*4.0-d*gamma_aa[index]*1/pow(rho_a[index],1.9E1/ \
                   3.0)*1/pow(t30683,3.0/2.0)*4.0)-d*gamma_aa[index]*t30680*t30690*t30685*(4.0/3.0)+d*gamma_aa[index]* \
                   t30690*t30675*t30693*1/(t30679*t30679*t30679)*2.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30456 = sqrt(gamma_bb[index]);
                double t30457 = 1/pow(rho_b[index],4.0/3.0);
                double t30458 = t30456*t30457;
                double t30459 = log(t30458+sqrt(t30458*t30458+1.0));
                double t30460 = d*t30456*t30457*t30459*6.0;
                double t30461 = t30460+1.0;
                double t30462 = 1/pow(rho_b[index],7.0/3.0);
                double t30463 = 1/pow(rho_b[index],8.0/3.0);
                double t30464 = gamma_bb[index]*t30463;
                double t30465 = t30464+1.0;
                double t30466 = 1/sqrt(t30465);
                double t30467 = 1/(t30461*t30461);
                double t30468 = 1/pow(rho_b[index],1.1E1/3.0);
                double t30469 = 1/sqrt(gamma_bb[index]);
                double t30470 = d*t30463*t30466*3.0;
                double t30471 = d*t30457*t30459*t30469*3.0;
                double t30472 = t30470+t30471;
                double t30473 = d*gamma_bb[index]*t30466*t30468*8.0;
                double t30474 = d*t30462*t30456*t30459*8.0;
                double t30475 = t30473+t30474;
                v_rho_b_gamma_bb_[index] = (d*t30462*(4.0/3.0))/t30461-d*t30457*t30475*t30467-d*gamma_bb[index]*t30457* \
                   t30467*(d*t30466*t30468*1.2E1+d*t30462*t30459*t30469*4.0-d*gamma_bb[index]*1/pow(rho_b[index],1.9E1/ \
                   3.0)*1/pow(t30465,3.0/2.0)*4.0)-d*gamma_bb[index]*t30462*t30472*t30467*(4.0/3.0)+d*gamma_bb[index]* \
                   1/(t30461*t30461*t30461)*t30472*t30457*t30475*2.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t30575 = sqrt(gamma_bb[index]);
                double t30576 = 1/pow(rho_b[index],4.0/3.0);
                double t30577 = t30575*t30576;
                double t30578 = log(t30577+sqrt(t30577*t30577+1.0));
                double t30579 = d*t30575*t30576*t30578*6.0;
                double t30580 = t30579+1.0;
                double t30581 = 1/pow(rho_b[index],7.0/3.0);
                double t30582 = 1/pow(rho_b[index],8.0/3.0);
                double t30583 = gamma_bb[index]*t30582;
                double t30584 = t30583+1.0;
                double t30585 = 1/sqrt(t30584);
                double t30586 = 1/(t30580*t30580);
                double t30587 = 1/pow(rho_b[index],1.1E1/3.0);
                double t30588 = 1/sqrt(gamma_bb[index]);
                double t30589 = d*t30582*t30585*3.0;
                double t30590 = d*t30576*t30578*t30588*3.0;
                double t30591 = t30590+t30589;
                double t30592 = d*gamma_bb[index]*t30585*t30587*8.0;
                double t30593 = d*t30581*t30575*t30578*8.0;
                double t30594 = t30592+t30593;
                v_rho_b_gamma_bb_[index] = (d*t30581*(4.0/3.0))/t30580-d*t30576*t30594*t30586-d*gamma_bb[index]*t30576* \
                   t30586*(d*t30585*t30587*1.2E1+d*t30581*t30578*t30588*4.0-d*gamma_bb[index]*1/pow(rho_b[index],1.9E1/ \
                   3.0)*1/pow(t30584,3.0/2.0)*4.0)-d*gamma_bb[index]*t30581*t30591*t30586*(4.0/3.0)+d*gamma_bb[index]* \
                   1/(t30580*t30580*t30580)*t30591*t30576*t30594*2.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30477 = 1/pow(rho_a[index],8.0/3.0);
                double t30478 = 1/pow(rho_a[index],4.0/3.0);
                double t30479 = sqrt(gamma_aa[index]);
                double t30480 = t30478*t30479;
                double t30481 = log(t30480+sqrt(t30480*t30480+1.0));
                double t30482 = d*t30481*t30478*t30479*6.0;
                double t30483 = t30482+1.0;
                double t30484 = 1/(t30483*t30483);
                double t30485 = gamma_aa[index]*t30477;
                double t30486 = t30485+1.0;
                double t30487 = 1/sqrt(t30486);
                double t30488 = d*t30477*t30487*3.0;
                double t30489 = 1/sqrt(gamma_aa[index]);
                double t30490 = d*t30481*t30478*t30489*3.0;
                double t30491 = t30490+t30488;
                v_gamma_aa_gamma_aa_[index] = d*t30491*t30484*t30478*2.0-d*gamma_aa[index]*(t30491*t30491)*1/(t30483* \
                   t30483*t30483)*t30478*2.0-d*gamma_aa[index]*t30484*t30478*(d*1/pow(rho_a[index],1.6E1/3.0)*1/pow(t30486,3.0/ \
                   2.0)*(3.0/2.0)+d*1/pow(gamma_aa[index],3.0/2.0)*t30481*t30478*(3.0/2.0)-(d*t30477*t30487*(3.0/2.0) \
                   )/gamma_aa[index]);
            } else if (rho_a[index] > cutoff_) {
                double t30700 = 1/pow(rho_a[index],8.0/3.0);
                double t30701 = 1/pow(rho_a[index],4.0/3.0);
                double t30702 = sqrt(gamma_aa[index]);
                double t30703 = t30701*t30702;
                double t30704 = log(t30703+sqrt(t30703*t30703+1.0));
                double t30705 = d*t30701*t30702*t30704*6.0;
                double t30706 = t30705+1.0;
                double t30707 = 1/(t30706*t30706);
                double t30708 = gamma_aa[index]*t30700;
                double t30709 = t30708+1.0;
                double t30710 = 1/sqrt(t30709);
                double t30711 = d*t30700*t30710*3.0;
                double t30712 = 1/sqrt(gamma_aa[index]);
                double t30713 = d*t30701*t30712*t30704*3.0;
                double t30714 = t30711+t30713;
                v_gamma_aa_gamma_aa_[index] = d*t30701*t30714*t30707*2.0-d*gamma_aa[index]*t30701*(t30714*t30714) \
                   *1/(t30706*t30706*t30706)*2.0-d*gamma_aa[index]*t30701*t30707*(d*1/pow(rho_a[index],1.6E1/3.0)*1/pow(t30709,3.0/ \
                   2.0)*(3.0/2.0)-(d*t30700*t30710*(3.0/2.0))/gamma_aa[index]+d*1/pow(gamma_aa[index],3.0/2.0)*t30701* \
                   t30704*(3.0/2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30497 = 1/pow(rho_b[index],8.0/3.0);
                double t30498 = 1/pow(rho_b[index],4.0/3.0);
                double t30499 = sqrt(gamma_bb[index]);
                double t30500 = t30498*t30499;
                double t30501 = log(t30500+sqrt(t30500*t30500+1.0));
                double t30502 = d*t30501*t30498*t30499*6.0;
                double t30503 = t30502+1.0;
                double t30504 = 1/(t30503*t30503);
                double t30505 = gamma_bb[index]*t30497;
                double t30506 = t30505+1.0;
                double t30507 = 1/sqrt(t30506);
                double t30508 = d*t30507*t30497*3.0;
                double t30509 = 1/sqrt(gamma_bb[index]);
                double t30510 = d*t30501*t30509*t30498*3.0;
                double t30511 = t30510+t30508;
                v_gamma_bb_gamma_bb_[index] = d*t30511*t30504*t30498*2.0-d*gamma_bb[index]*(t30511*t30511)*1/(t30503* \
                   t30503*t30503)*t30498*2.0-d*gamma_bb[index]*t30504*t30498*(d*1/pow(rho_b[index],1.6E1/3.0)*1/pow(t30506,3.0/ \
                   2.0)*(3.0/2.0)+d*1/pow(gamma_bb[index],3.0/2.0)*t30501*t30498*(3.0/2.0)-(d*t30507*t30497*(3.0/2.0) \
                   )/gamma_bb[index]);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t30601 = 1/pow(rho_b[index],8.0/3.0);
                double t30602 = 1/pow(rho_b[index],4.0/3.0);
                double t30603 = sqrt(gamma_bb[index]);
                double t30604 = t30602*t30603;
                double t30605 = log(t30604+sqrt(t30604*t30604+1.0));
                double t30606 = d*t30602*t30603*t30605*6.0;
                double t30607 = t30606+1.0;
                double t30608 = 1/(t30607*t30607);
                double t30609 = gamma_bb[index]*t30601;
                double t30610 = t30609+1.0;
                double t30611 = 1/sqrt(t30610);
                double t30612 = d*t30601*t30611*3.0;
                double t30613 = 1/sqrt(gamma_bb[index]);
                double t30614 = d*t30602*t30613*t30605*3.0;
                double t30615 = t30612+t30614;
                v_gamma_bb_gamma_bb_[index] = d*t30602*t30615*t30608*2.0-d*gamma_bb[index]*t30602*(t30615*t30615) \
                   *1/(t30607*t30607*t30607)*2.0-d*gamma_bb[index]*t30602*t30608*(d*1/pow(rho_b[index],1.6E1/3.0)*1/pow(t30610,3.0/ \
                   2.0)*(3.0/2.0)-(d*t30601*t30611*(3.0/2.0))/gamma_bb[index]+d*1/pow(gamma_bb[index],3.0/2.0)*t30602* \
                   t30605*(3.0/2.0));
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

