/**********************************************************
* M05_functional.cc: definitions for M05_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include "M05_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

M05_Functional::M05_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "M05";
    description_ = "M05 Meta-GGA Functional";
    citation_ = "Yan Zhao, Nathan E. Schultz, and D. G. Truhlar, J. Chem. Phys., 123, 161103, 2005";

    double X = 2.8000000000000003E-01;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double kp = 8.0400000000000005E-01;
    params_.push_back(make_pair("kp",kp));
    double mu_ = 2.1951497276451709E-01;
    params_.push_back(make_pair("mu_",mu_));
    double a_1 = 8.1509999999999999E-02;
    params_.push_back(make_pair("a_1",a_1));
    double a_2 = -4.3956000000000001E-01;
    params_.push_back(make_pair("a_2",a_2));
    double a_3 = -3.2242199999999999E+00;
    params_.push_back(make_pair("a_3",a_3));
    double a_4 = 2.0181900000000002E+00;
    params_.push_back(make_pair("a_4",a_4));
    double a_5 = 8.7943099999999994E+00;
    params_.push_back(make_pair("a_5",a_5));
    double a_6 = -2.9499999999999999E-03;
    params_.push_back(make_pair("a_6",a_6));
    double a_7 = 9.8202900000000000E+00;
    params_.push_back(make_pair("a_7",a_7));
    double a_8 = -4.8235099999999997E+00;
    params_.push_back(make_pair("a_8",a_8));
    double a_9 = -4.8175739999999998E+01;
    params_.push_back(make_pair("a_9",a_9));
    double a_10 = 3.6480199999999998E+00;
    params_.push_back(make_pair("a_10",a_10));
    double a_11 = 3.4022480000000002E+01;
    params_.push_back(make_pair("a_11",a_11));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 3.0999999999999999E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 5.9999999999999998E-02;
    params_.push_back(make_pair("gcaa",gcaa));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 3.7856900000000002E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.4152609999999999E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = -7.4658899999999999E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = 1.7944910000000000E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 3.7734399999999999E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -2.6044630000000002E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 3.0699130000000000E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = -9.2269500000000004E+00;
    params_.push_back(make_pair("ccaa4",ccaa4));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
M05_Functional::~M05_Functional()
{
}
void M05_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t75923 = 1.0/pow(rho_a[index],1.0/3.0);
            double t75924 = c*t75923;
            double t75925 = sqrt(t75924);
            double t75926 = pow(t75924,3.0/2.0);
            double t75927 = c*c;
            double t75928 = 1.0/pow(rho_a[index],2.0/3.0);
            double t75929 = 1.0/c0p;
            double t75930 = b1p*t75925;
            double t75931 = b3p*t75926;
            double t75932 = b4p*t75927*t75928;
            double t75933 = b2p*c*t75923;
            double t75934 = t75930+t75931+t75932+t75933;
            double t75935 = 1.0/t75934;
            double t75936 = t75935*t75929*(1.0/2.0);
            double t75937 = t75936+1.0;
            double t75938 = log(t75937);
            double t75939 = a1p*c*t75923;
            double t75940 = t75939+1.0;
            double t75941 = rho_a[index]*2.0;
            double t75942 = 1.0/pow(t75941,1.0/3.0);
            double t75943 = c*t75942;
            double t75944 = gamma_aa[index]*gamma_aa[index];
            double t75945 = gcab*gcab;
            double t75946 = t75944*t75944;
            double t75947 = t75945*t75945;
            double t75948 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t75949 = 1.0/pow(rho_a[index],8.0/3.0);
            double t75950 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t75951 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t75952 = 1.0/pow(t75941,2.0/3.0);
            double t75953 = pow(rho_a[index],5.0/3.0);
            double t75954 = 1.0/tau_a[index];
            double t75955 = C_k*t75953*t75954;
            double t75956 = t75955-1.0;
            double t75957 = t75956*t75956;
            double t75958 = t75957*t75957;
            double t75959 = t75958*t75958;
            double t75960 = t75955+1.0;
            double t75961 = pow(2.0,1.0/3.0);
            double t75962 = t75961*2.0;
            double t75963 = t75962-2.0;
            double t75964 = two_13*2.0;
            double t75965 = t75964-2.0;
            double t75966 = 1.0/t75965;
            double t75967 = 1.0/c0f;
            double t75968 = b1f*t75925;
            double t75969 = b3f*t75926;
            double t75970 = b4f*t75927*t75928;
            double t75971 = b2f*c*t75923;
            double t75972 = t75970+t75971+t75968+t75969;
            double t75973 = 1.0/t75972;
            double t75974 = t75973*t75967*(1.0/2.0);
            double t75975 = t75974+1.0;
            double t75976 = log(t75975);
            double t75977 = a1f*c*t75923;
            double t75978 = t75977+1.0;
            double t75979 = c0f*t75976*t75978*2.0;
            double t75980 = c0p*t75940*t75938*2.0;
            double t75981 = gcaa*gcaa;
            double t75982 = t75981*t75981;
            functional_[index] = (rho_a[index]*(t75980+t75963*t75966*(t75979-c0p*t75940*t75938*2.0))*2.0-c0p* \
               rho_a[index]*log((t75929*(1.0/2.0))/(b1p*sqrt(t75943)+b3p*pow(t75943,3.0/2.0)+b2p*c*t75942+b4p*t75952* \
               t75927)+1.0)*(a1p*c*t75942+1.0)*4.0)*(ccab0+(ccab2*t75951*t75944*t75945)/(gamma_aa[index]*gcab*t75949* \
               2.0+t75951*t75944*t75945+1.0)+(ccab1*gamma_aa[index]*gcab*t75949)/(gamma_aa[index]*gcab*t75949+1.0) \
               +(ccab4*t75946*t75947*t75948)/(gamma_aa[index]*gcab*t75949*4.0+t75951*t75944*t75945*6.0+t75946*t75947* \
               t75948+gamma_aa[index]*gcab*t75950*t75944*t75945*4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t75950*t75944* \
               t75945)/(gamma_aa[index]*gcab*t75949*3.0+t75951*t75944*t75945*3.0+gamma_aa[index]*gcab*t75950*t75944* \
               t75945+1.0))-rho_a[index]*( ( (tau_a[index]-1.0/1.0E20 > 0.0) ? 1.0*(t75954*(tau_a[index]*2.0-(gamma_aa[index]* \
               (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(t75980-t75963*t75966*(t75980-t75979))*(ccaa0+ \
               (ccaa2*t75951*t75944*t75981)/(gamma_aa[index]*gcaa*t75949*2.0+t75951*t75944*t75981+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t75949)/(gamma_aa[index]*gcaa*t75949+1.0)+(ccaa4*t75946*t75982*t75948)/(gamma_aa[index]*gcaa* \
               t75949*4.0+t75951*t75944*t75981*6.0+t75946*t75982*t75948+gamma_aa[index]*gcaa*t75950*t75944*t75981* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t75950*t75944*t75981)/(gamma_aa[index]*gcaa*t75949*3.0+t75951* \
               t75944*t75981*3.0+gamma_aa[index]*gcaa*t75950*t75944*t75981+1.0))*2.0-rho_a[index]*(X-1.0)*(kp-kp/ \
               ((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t75952*(1.0/4.0))/kp+1.0)+1.0)*((a_1* \
               t75956)/t75960+a_2*1.0/(t75960*t75960)*t75957+a_4*1.0/(t75960*t75960*t75960*t75960)*t75958+a_8*1.0/ \
               (t75960*t75960*t75960*t75960*t75960*t75960*t75960*t75960)*t75959+a_10*1.0/pow(t75960,1.0E1)*t75957* \
               t75959+a_3*1.0/(t75960*t75960*t75960)*t75956*t75957+a_5*1.0/(t75960*t75960*t75960*t75960*t75960)*t75956* \
               t75958+a_6*1.0/(t75960*t75960*t75960*t75960*t75960*t75960)*t75957*t75958+a_9*1.0/(t75960*t75960*t75960* \
               t75960*t75960*t75960*t75960*t75960*t75960)*t75956*t75959+a_11*1.0/pow(t75960,1.1E1)*t75956*t75957* \
               t75959+a_7*1.0/(t75960*t75960*t75960*t75960*t75960*t75960*t75960)*t75956*t75957*t75958+1.0)*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t75984 = gamma_aa[index]*gamma_aa[index];
            double t75985 = gcab*gcab;
            double t75986 = t75984*t75984;
            double t75987 = t75985*t75985;
            double t75988 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t75989 = 1.0/pow(rho_a[index],8.0/3.0);
            double t75990 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t75991 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t75992 = rho_a[index]*2.0;
            double t75993 = 1.0/pow(t75992,1.0/3.0);
            double t75994 = c*t75993;
            double t75995 = sqrt(t75994);
            double t75996 = b1p*t75995;
            double t75997 = pow(t75994,3.0/2.0);
            double t75998 = b3p*t75997;
            double t75999 = b2p*c*t75993;
            double t76000 = c*c;
            double t76001 = 1.0/pow(t75992,2.0/3.0);
            double t76002 = b4p*t76000*t76001;
            double t76003 = t75996+t75998+t75999+t76002;
            double t76004 = 1.0/pow(t75992,4.0/3.0);
            double t76005 = 1.0/c0p;
            double t76006 = 1.0/t76003;
            double t76007 = t76005*t76006*(1.0/2.0);
            double t76008 = t76007+1.0;
            double t76009 = 1.0/pow(rho_a[index],1.0/3.0);
            double t76010 = c*t76009;
            double t76011 = sqrt(t76010);
            double t76012 = b1f*t76011;
            double t76013 = pow(t76010,3.0/2.0);
            double t76014 = b3f*t76013;
            double t76015 = 1.0/pow(rho_a[index],2.0/3.0);
            double t76016 = b4f*t76000*t76015;
            double t76017 = b2f*c*t76009;
            double t76018 = t76012+t76014+t76016+t76017;
            double t76019 = 1.0/pow(rho_a[index],4.0/3.0);
            double t76020 = b1p*t76011;
            double t76021 = b3p*t76013;
            double t76022 = b4p*t76000*t76015;
            double t76023 = b2p*c*t76009;
            double t76024 = t76020+t76021+t76022+t76023;
            double t76025 = 1.0/pow(rho_a[index],5.0/3.0);
            double t76026 = 1.0/sqrt(t76010);
            double t76027 = 1.0/c0f;
            double t76028 = 1.0/t76018;
            double t76029 = t76027*t76028*(1.0/2.0);
            double t76030 = t76029+1.0;
            double t76031 = 1.0/t76024;
            double t76032 = t76031*t76005*(1.0/2.0);
            double t76033 = t76032+1.0;
            double t76034 = a1p*c*t76009;
            double t76035 = t76034+1.0;
            double t76036 = 1.0/t76033;
            double t76037 = 1.0/(t76024*t76024);
            double t76038 = b4p*t76000*t76025*(2.0/3.0);
            double t76039 = b2p*c*t76019*(1.0/3.0);
            double t76040 = b1p*c*t76026*t76019*(1.0/6.0);
            double t76041 = b3p*c*t76011*t76019*(1.0/2.0);
            double t76042 = t76040+t76041+t76038+t76039;
            double t76043 = t76042*t76035*t76036*t76037;
            double t76044 = log(t76033);
            double t76045 = log(t76008);
            double t76046 = a1p*c*t75993;
            double t76047 = t76046+1.0;
            double t76048 = pow(2.0,1.0/3.0);
            double t76049 = t76048*2.0;
            double t76050 = t76049-2.0;
            double t76051 = two_13*2.0;
            double t76052 = t76051-2.0;
            double t76053 = 1.0/t76052;
            double t76054 = log(t76030);
            double t76055 = a1f*c*t76009;
            double t76056 = t76055+1.0;
            double t76057 = c0f*t76054*t76056*2.0;
            double t76059 = c0p*t76035*t76044*2.0;
            double t76058 = t76057-t76059;
            double t76060 = gamma_aa[index]*gcab*t75989*4.0;
            double t76061 = gamma_aa[index]*gcab*t75990*t75984*t75985*4.0;
            double t76062 = t75991*t75984*t75985*6.0;
            double t76063 = t75986*t75987*t75988;
            double t76064 = t76060+t76061+t76062+t76063+1.0;
            double t76065 = 1.0/t76064;
            double t76066 = gamma_aa[index]*gcab*t75989;
            double t76067 = t76066+1.0;
            double t76068 = 1.0/t76067;
            double t76069 = gamma_aa[index]*gcab*t75989*3.0;
            double t76070 = gamma_aa[index]*gcab*t75990*t75984*t75985;
            double t76071 = t75991*t75984*t75985*3.0;
            double t76072 = t76070+t76071+t76069+1.0;
            double t76073 = 1.0/t76072;
            double t76074 = gamma_aa[index]*gcab*t75989*2.0;
            double t76075 = t75991*t75984*t75985;
            double t76076 = t76074+t76075+1.0;
            double t76077 = 1.0/t76076;
            double t76078 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t76079 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t76080 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t76081 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t76082 = pow(rho_a[index],5.0/3.0);
            double t76083 = 1.0/tau_a[index];
            double t76084 = C_k*t76082*t76083;
            double t76085 = t76084-1.0;
            double t76086 = t76085*t76085;
            double t76087 = t76086*t76086;
            double t76088 = t76087*t76087;
            double t76089 = t76084+1.0;
            double t76090 = 1.0/(k*k);
            double t76091 = 1.0/kp;
            double t76092 = 1.0/(rho_a[index]*rho_a[index]);
            double t76093 = gamma_aa[index]*mu_*t76001*t76090*t76091*t76092*(1.0/4.0);
            double t76094 = t76093+1.0;
            double t76095 = 1.0/t76094;
            double t76096 = kp-kp*t76095+1.0;
            double t76097 = 1.0/t76089;
            double t76098 = pow(rho_a[index],2.0/3.0);
            double t76099 = 1.0/(t76089*t76089);
            double t76100 = 1.0/pow(t76089,1.0E1);
            double t76101 = 1.0/pow(t76089,1.1E1);
            double t76102 = 1.0/(t76089*t76089*t76089);
            double t76103 = 1.0/(t76089*t76089*t76089*t76089);
            double t76104 = 1.0/(t76089*t76089*t76089*t76089*t76089);
            double t76105 = 1.0/(t76089*t76089*t76089*t76089*t76089*t76089);
            double t76106 = 1.0/(t76089*t76089*t76089*t76089*t76089*t76089*t76089);
            double t76107 = 1.0/(t76089*t76089*t76089*t76089*t76089*t76089*t76089*t76089);
            double t76108 = 1.0/(t76089*t76089*t76089*t76089*t76089*t76089*t76089*t76089*t76089);
            double t76109 = 1.0/pow(t75992,5.0/3.0);
            double t76110 = a_1*t76085*t76097;
            double t76111 = a_10*t76100*t76086*t76088;
            double t76112 = a_11*t76101*t76085*t76086*t76088;
            double t76113 = a_2*t76086*t76099;
            double t76114 = a_3*t76102*t76085*t76086;
            double t76115 = a_4*t76103*t76087;
            double t76116 = a_5*t76104*t76085*t76087;
            double t76117 = a_6*t76105*t76086*t76087;
            double t76118 = a_7*t76106*t76085*t76086*t76087;
            double t76119 = a_8*t76107*t76088;
            double t76120 = a_9*t76108*t76085*t76088;
            double t76121 = t76110+t76111+t76120+t76112+t76113+t76114+t76115+t76116+t76117+t76118+t76119+1.0;
            double t76122 = t76050*t76053*t76058;
            double t76123 = t76122+t76059;
            double t76124 = gcaa*gcaa;
            double t76125 = t76124*t76124;
            double t76126 = tau_a[index]-1.0/1.0E20;
            double t76127 = ( (t76126 > 0.0) ?  1.0 : 0.0 ) ;
            double t76128 = tau_a[index]*2.0;
            double t76129 = 1.0/rho_a[index];
            double t76153 = gamma_aa[index]*t76129*(1.0/4.0);
            double t76130 = -t76153+t76128;
            double t76131 = t76130*t76083*(1.0/2.0);
            double t76132 = t76131-1.0;
            double t76133 = t76132*t76127;
            double t76134 = t76133+1.0;
            double t76135 = gamma_aa[index]*gcaa*t75989*4.0;
            double t76136 = gamma_aa[index]*gcaa*t75990*t75984*t76124*4.0;
            double t76137 = t75991*t75984*t76124*6.0;
            double t76138 = t75986*t75988*t76125;
            double t76139 = t76135+t76136+t76137+t76138+1.0;
            double t76140 = 1.0/t76139;
            double t76141 = gamma_aa[index]*gcaa*t75989;
            double t76142 = t76141+1.0;
            double t76143 = 1.0/t76142;
            double t76144 = gamma_aa[index]*gcaa*t75989*3.0;
            double t76145 = gamma_aa[index]*gcaa*t75990*t75984*t76124;
            double t76146 = t75991*t75984*t76124*3.0;
            double t76147 = t76144+t76145+t76146+1.0;
            double t76148 = 1.0/t76147;
            double t76149 = gamma_aa[index]*gcaa*t75989*2.0;
            double t76150 = t75991*t75984*t76124;
            double t76151 = t76150+t76149+1.0;
            double t76152 = 1.0/t76151;
            double t76154 = 1.0/t76030;
            double t76155 = 1.0/(t76018*t76018);
            double t76156 = b4f*t76000*t76025*(2.0/3.0);
            double t76157 = b2f*c*t76019*(1.0/3.0);
            double t76158 = b1f*c*t76026*t76019*(1.0/6.0);
            double t76159 = b3f*c*t76011*t76019*(1.0/2.0);
            double t76160 = t76156+t76157+t76158+t76159;
            double t76161 = a1f*c*c0f*t76054*t76019*(2.0/3.0);
            double t76162 = a1p*c*c0p*t76044*t76019*(2.0/3.0);
            double t76163 = ccaa4*t75986*t75988*t76140*t76125;
            double t76164 = ccaa1*gamma_aa[index]*gcaa*t75989*t76143;
            double t76165 = ccaa3*gamma_aa[index]*gcaa*t75990*t75984*t76124*t76148;
            double t76166 = ccaa2*t75991*t75984*t76124*t76152;
            double t76167 = ccaa0+t76163+t76164+t76165+t76166;
            v_rho_a_[index] = -(rho_a[index]*t76123*2.0-c0p*rho_a[index]*t76045*t76047*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t76068*t76079*(4.0/3.0)+ccab4*t75986*t75987*t76081*t76065*(1.6E1/3.0)+ccab2*t75984*t75985*t76077* \
               t76078*(8.0/3.0)-ccab1*t75984*t75985*1.0/(t76067*t76067)*t76078*(4.0/3.0)-ccab2*t75991*t75984*t75985* \
               1.0/(t76076*t76076)*(gamma_aa[index]*gcab*t76079*(8.0/3.0)+t75984*t75985*t76078*(8.0/3.0))-ccab4*t75986* \
               t75987*t75988*1.0/(t76064*t76064)*(gamma_aa[index]*gcab*t76079*(1.6E1/3.0)+t75986*t75987*t76081*(1.6E1/ \
               3.0)+t75984*t75985*t76078*1.6E1+gamma_aa[index]*gcab*t75984*t75985*t76080*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t75984*t75985*t76080*t76073*4.0-ccab3*gamma_aa[index]*gcab*t75990*t75984*t75985*1.0/(t76072*t76072) \
               *(gamma_aa[index]*gcab*t76079*4.0+t75984*t75985*t76078*8.0+gamma_aa[index]*gcab*t75984*t75985*t76080* \
               4.0))-(X-1.0)*(t76121*t76096+rho_a[index]*t76096*(C_k*a_1*t76083*t76097*t76098*(5.0/3.0)-C_k*a_1*t76083* \
               t76085*t76098*t76099*(5.0/3.0)-C_k*a_2*t76102*t76083*t76086*t76098*(1.0E1/3.0)+C_k*a_2*t76083*t76085* \
               t76098*t76099*(1.0E1/3.0)+C_k*a_3*t76102*t76083*t76086*t76098*5.0-C_k*a_4*t76104*t76083*t76087*t76098* \
               (2.0E1/3.0)+C_k*a_5*t76104*t76083*t76087*t76098*(2.5E1/3.0)-C_k*a_8*t76108*t76083*t76088*t76098*(4.0E1/ \
               3.0)+C_k*a_9*t76108*t76083*t76088*t76098*1.5E1+C_k*a_10*t76100*t76083*t76085*t76088*t76098*(5.0E1/ \
               3.0)-C_k*a_10*t76101*t76083*t76086*t76088*t76098*(5.0E1/3.0)+C_k*a_11*t76101*t76083*t76086*t76088* \
               t76098*(5.5E1/3.0)-C_k*a_3*t76103*t76083*t76085*t76086*t76098*5.0+C_k*a_4*t76103*t76083*t76085*t76086* \
               t76098*(2.0E1/3.0)-C_k*a_5*t76105*t76083*t76085*t76087*t76098*(2.5E1/3.0)+C_k*a_6*t76105*t76083*t76085* \
               t76087*t76098*1.0E1-C_k*a_6*t76106*t76083*t76086*t76087*t76098*1.0E1+C_k*a_7*t76106*t76083*t76086* \
               t76087*t76098*(3.5E1/3.0)-C_k*a_9*t76100*t76083*t76085*t76088*t76098*1.5E1-C_k*a_11*t76083*t76085* \
               t76086*t76088*1.0/pow(t76089,1.2E1)*t76098*(5.5E1/3.0)-C_k*a_7*t76107*t76083*t76085*t76086*t76087* \
               t76098*(3.5E1/3.0)+C_k*a_8*t76107*t76083*t76085*t76086*t76087*t76098*(4.0E1/3.0))-kp*rho_a[index]* \
               t76121*1.0/(t76094*t76094)*(gamma_aa[index]*mu_*t76090*t76091*t76109*t76092*(1.0/3.0)+gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t76001*t76090*t76091*(1.0/2.0)))-(rho_a[index]*((1.0/ \
               (t76003*t76003)*t76047*(b2p*c*t76004*(1.0/3.0)+b4p*t76000*t76109*(2.0/3.0)+b3p*c*t75995*t76004*(1.0/ \
               2.0)+b1p*c*1.0/sqrt(t75994)*t76004*(1.0/6.0)))/t76008-a1p*c*c0p*t76004*t76045*(2.0/3.0))*2.0+rho_a[index]* \
               (-t76043+t76162+t76050*t76053*(t76043+t76161-t76160*t76154*t76056*t76155-a1p*c*c0p*t76044*t76019*(2.0/ \
               3.0)))-c0p*t76035*t76044*2.0+c0p*t76045*t76047*2.0-t76050*t76053*t76058)*(ccab0+ccab1*gamma_aa[index]* \
               gcab*t75989*t76068+ccab2*t75991*t75984*t75985*t76077+ccab4*t75986*t75987*t75988*t76065+ccab3*gamma_aa[index]* \
               gcab*t75990*t75984*t75985*t76073)-t76123*t76134*t76167+rho_a[index]*t76123*t76134*(ccaa1*gamma_aa[index]* \
               gcaa*t76143*t76079*(8.0/3.0)+ccaa4*t75986*t76140*t76125*t76081*(3.2E1/3.0)+ccaa2*t75984*t76124*t76152* \
               t76078*(1.6E1/3.0)-ccaa1*t75984*t76124*1.0/(t76142*t76142)*t76078*(8.0/3.0)-ccaa2*t75991*t75984*t76124* \
               1.0/(t76151*t76151)*(gamma_aa[index]*gcaa*t76079*(1.6E1/3.0)+t75984*t76124*t76078*(1.6E1/3.0))-ccaa4* \
               t75986*t75988*t76125*1.0/(t76139*t76139)*(gamma_aa[index]*gcaa*t76079*(3.2E1/3.0)+t75986*t76125*t76081* \
               (3.2E1/3.0)+t75984*t76124*t76078*3.2E1+gamma_aa[index]*gcaa*t75984*t76124*t76080*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t75984*t76124*t76080*t76148*8.0-ccaa3*gamma_aa[index]*gcaa*t75990*t75984*t76124*1.0/(t76147*t76147) \
               *(gamma_aa[index]*gcaa*t76079*8.0+t75984*t76124*t76078*1.6E1+gamma_aa[index]*gcaa*t75984*t76124*t76080* \
               8.0))+rho_a[index]*t76134*t76167*(-t76043+t76162+t76050*t76053*(t76043+t76161-t76162-t76160*t76154* \
               t76056*t76155))-gamma_aa[index]*t76123*t76127*t76083*t76129*t76167*(1.0/8.0);
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t76169 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76170 = c*t76169;
                double t76171 = sqrt(t76170);
                double t76172 = pow(t76170,3.0/2.0);
                double t76173 = c*c;
                double t76174 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76175 = 1.0/c0p;
                double t76176 = b1p*t76171;
                double t76177 = b3p*t76172;
                double t76178 = b4p*t76173*t76174;
                double t76179 = b2p*c*t76169;
                double t76180 = t76176+t76177+t76178+t76179;
                double t76181 = 1.0/t76180;
                double t76182 = t76181*t76175*(1.0/2.0);
                double t76183 = t76182+1.0;
                double t76184 = log(t76183);
                double t76185 = a1p*c*t76169;
                double t76186 = t76185+1.0;
                double t76187 = rho_a[index]*2.0;
                double t76188 = 1.0/pow(t76187,1.0/3.0);
                double t76189 = c*t76188;
                double t76190 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76191 = gamma_aa[index]*gamma_aa[index];
                double t76192 = gcab*gcab;
                double t76193 = t76192*t76192;
                double t76194 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76195 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76196 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76197 = gamma_aa[index]*gcab*t76190;
                double t76198 = t76197+1.0;
                double t76199 = gamma_aa[index]*gcab*t76190*3.0;
                double t76200 = gamma_aa[index]*gcab*t76191*t76192*t76196;
                double t76201 = t76191*t76192*t76195*3.0;
                double t76202 = t76200+t76201+t76199+1.0;
                double t76203 = t76191*t76191;
                double t76204 = gamma_aa[index]*gcab*t76190*4.0;
                double t76205 = gamma_aa[index]*gcab*t76191*t76192*t76196*4.0;
                double t76206 = t76191*t76192*t76195*6.0;
                double t76207 = t76203*t76193*t76194;
                double t76208 = t76204+t76205+t76206+t76207+1.0;
                double t76209 = gamma_aa[index]*gcab*t76190*2.0;
                double t76210 = t76191*t76192*t76195;
                double t76211 = t76210+t76209+1.0;
                double t76212 = pow(2.0,1.0/3.0);
                double t76213 = t76212*2.0;
                double t76214 = t76213-2.0;
                double t76215 = two_13*2.0;
                double t76216 = t76215-2.0;
                double t76217 = 1.0/t76216;
                double t76218 = 1.0/c0f;
                double t76219 = b1f*t76171;
                double t76220 = b3f*t76172;
                double t76221 = b4f*t76173*t76174;
                double t76222 = b2f*c*t76169;
                double t76223 = t76220+t76221+t76222+t76219;
                double t76224 = 1.0/t76223;
                double t76225 = t76224*t76218*(1.0/2.0);
                double t76226 = t76225+1.0;
                double t76227 = log(t76226);
                double t76228 = a1f*c*t76169;
                double t76229 = t76228+1.0;
                double t76230 = c0f*t76227*t76229*2.0;
                double t76231 = c0p*t76184*t76186*2.0;
                double t76232 = gcaa*gcaa;
                double t76233 = t76232*t76232;
                double t76234 = t76230-t76231;
                double t76235 = t76214*t76234*t76217;
                double t76236 = t76231+t76235;
                double t76237 = tau_a[index]-1.0/1.0E20;
                double t76238 = ( (t76237 > 0.0) ?  1.0 : 0.0 ) ;
                double t76239 = 1.0/tau_a[index];
                double t76240 = gamma_aa[index]*gcaa*t76190;
                double t76241 = t76240+1.0;
                double t76242 = 1.0/t76241;
                double t76243 = gamma_aa[index]*gcaa*t76190*4.0;
                double t76244 = gamma_aa[index]*gcaa*t76232*t76191*t76196*4.0;
                double t76245 = t76232*t76191*t76195*6.0;
                double t76246 = t76203*t76233*t76194;
                double t76247 = t76243+t76244+t76245+t76246+1.0;
                double t76248 = 1.0/t76247;
                double t76249 = gamma_aa[index]*gcaa*t76190*2.0;
                double t76250 = t76232*t76191*t76195;
                double t76251 = t76250+t76249+1.0;
                double t76252 = 1.0/t76251;
                double t76253 = gamma_aa[index]*gcaa*t76190*3.0;
                double t76254 = gamma_aa[index]*gcaa*t76232*t76191*t76196;
                double t76255 = t76232*t76191*t76195*3.0;
                double t76256 = t76253+t76254+t76255+1.0;
                double t76257 = 1.0/t76256;
                double t76258 = 1.0/rho_a[index];
                double t76259 = 1.0/(k*k);
                double t76260 = 1.0/pow(t76187,2.0/3.0);
                double t76261 = pow(rho_a[index],5.0/3.0);
                double t76262 = C_k*t76261*t76239;
                double t76263 = t76262-1.0;
                double t76264 = t76263*t76263;
                double t76265 = t76264*t76264;
                double t76266 = t76265*t76265;
                double t76267 = t76262+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t76231+t76214*t76217*(t76230-c0p*t76184*t76186*2.0))*2.0-c0p* \
                   rho_a[index]*log((t76175*(1.0/2.0))/(b1p*sqrt(t76189)+b3p*pow(t76189,3.0/2.0)+b2p*c*t76188+b4p*t76260* \
                   t76173)+1.0)*(a1p*c*t76188+1.0)*4.0)*((ccab1*gcab*t76190*(1.0/2.0))/t76198+(ccab2*gamma_aa[index]* \
                   t76192*t76195)/t76211-ccab1*gamma_aa[index]*t76192*t76195*1.0/(t76198*t76198)*(1.0/2.0)-ccab2*1.0/ \
                   (t76211*t76211)*t76191*t76192*t76195*(gcab*t76190+gamma_aa[index]*t76192*t76195)+(ccab4*gamma_aa[index]* \
                   t76191*t76193*t76194*2.0)/t76208+(ccab3*gcab*t76191*t76192*t76196*(3.0/2.0))/t76202-ccab4*t76203*1.0/ \
                   (t76208*t76208)*t76193*t76194*(gcab*t76190*2.0+gamma_aa[index]*t76192*t76195*6.0+gamma_aa[index]*t76191* \
                   t76193*t76194*2.0+gcab*t76191*t76192*t76196*6.0)-ccab3*gamma_aa[index]*gcab*1.0/(t76202*t76202)*t76191* \
                   t76192*t76196*(gcab*t76190*(3.0/2.0)+gamma_aa[index]*t76192*t76195*3.0+gcab*t76191*t76192*t76196*(3.0/ \
                   2.0)))*2.0+t76236*t76238*t76239*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t76242*t76190+ccaa2*t76232*t76252* \
                   t76191*t76195+ccaa4*t76203*t76233*t76194*t76248+ccaa3*gamma_aa[index]*gcaa*t76232*t76191*t76257*t76196) \
                   *(1.0/4.0)-rho_a[index]*t76236*(t76238*(t76239*(tau_a[index]*2.0-gamma_aa[index]*t76258*(1.0/4.0)) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t76242*t76190+ccaa2*gamma_aa[index]*t76232*t76252*t76195*2.0-ccaa1* \
                   gamma_aa[index]*t76232*1.0/(t76241*t76241)*t76195-ccaa2*t76232*1.0/(t76251*t76251)*t76191*t76195*(gcaa* \
                   t76190*2.0+gamma_aa[index]*t76232*t76195*2.0)-ccaa4*t76203*t76233*1.0/(t76247*t76247)*t76194*(gcaa* \
                   t76190*4.0+gamma_aa[index]*t76232*t76195*1.2E1+gamma_aa[index]*t76233*t76191*t76194*4.0+gcaa*t76232* \
                   t76191*t76196*1.2E1)+ccaa4*gamma_aa[index]*t76233*t76191*t76194*t76248*4.0+ccaa3*gcaa*t76232*t76191* \
                   t76257*t76196*3.0-ccaa3*gamma_aa[index]*gcaa*t76232*t76191*1.0/(t76256*t76256)*t76196*(gcaa*t76190* \
                   3.0+gamma_aa[index]*t76232*t76195*6.0+gcaa*t76232*t76191*t76196*3.0))*2.0-mu_*t76260*t76258*t76259* \
                   1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t76260*t76259*(1.0/4.0))/kp+1.0,2.0)* \
                   (X-1.0)*((a_1*t76263)/t76267+a_2*t76264*1.0/(t76267*t76267)+a_4*t76265*1.0/(t76267*t76267*t76267*t76267) \
                   +a_8*t76266*1.0/(t76267*t76267*t76267*t76267*t76267*t76267*t76267*t76267)+a_10*t76264*t76266*1.0/pow(t76267,1.0E1) \
                   +a_3*t76263*t76264*1.0/(t76267*t76267*t76267)+a_5*t76263*t76265*1.0/(t76267*t76267*t76267*t76267*t76267) \
                   +a_6*t76264*t76265*1.0/(t76267*t76267*t76267*t76267*t76267*t76267)+a_9*t76263*t76266*1.0/(t76267*t76267* \
                   t76267*t76267*t76267*t76267*t76267*t76267*t76267)+a_11*t76263*t76264*t76266*1.0/pow(t76267,1.1E1)+ \
                   a_7*t76263*t76264*t76265*1.0/(t76267*t76267*t76267*t76267*t76267*t76267*t76267)+1.0)*(1.0/2.0);
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t76269 = pow(rho_a[index],5.0/3.0);
                double t76270 = 1.0/(tau_a[index]*tau_a[index]);
                double t76271 = 1.0/tau_a[index];
                double t76272 = C_k*t76271*t76269;
                double t76273 = t76272+1.0;
                double t76274 = t76272-1.0;
                double t76275 = 1.0/(t76273*t76273);
                double t76276 = t76274*t76274;
                double t76277 = t76276*t76276;
                double t76278 = t76277*t76277;
                double t76279 = 1.0/pow(t76273,1.1E1);
                double t76280 = 1.0/(t76273*t76273*t76273);
                double t76281 = 1.0/(t76273*t76273*t76273*t76273);
                double t76282 = 1.0/(t76273*t76273*t76273*t76273*t76273);
                double t76283 = 1.0/(t76273*t76273*t76273*t76273*t76273*t76273);
                double t76284 = 1.0/(t76273*t76273*t76273*t76273*t76273*t76273*t76273);
                double t76285 = 1.0/(t76273*t76273*t76273*t76273*t76273*t76273*t76273*t76273);
                double t76286 = 1.0/(t76273*t76273*t76273*t76273*t76273*t76273*t76273*t76273*t76273);
                double t76287 = 1.0/pow(t76273,1.0E1);
                double t76288 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76289 = c*t76288;
                double t76290 = sqrt(t76289);
                double t76291 = pow(t76289,3.0/2.0);
                double t76292 = c*c;
                double t76293 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76294 = 1.0/c0p;
                double t76295 = b1p*t76290;
                double t76296 = b3p*t76291;
                double t76297 = b4p*t76292*t76293;
                double t76298 = b2p*c*t76288;
                double t76299 = t76295+t76296+t76297+t76298;
                double t76300 = 1.0/t76299;
                double t76301 = t76300*t76294*(1.0/2.0);
                double t76302 = t76301+1.0;
                double t76303 = log(t76302);
                double t76304 = a1p*c*t76288;
                double t76305 = t76304+1.0;
                double t76306 = tau_a[index]-1.0/1.0E20;
                double t76307 = tau_a[index]*2.0;
                double t76308 = 1.0/rho_a[index];
                double t76309 = t76307-gamma_aa[index]*t76308*(1.0/4.0);
                double t76310 = gamma_aa[index]*gamma_aa[index];
                double t76311 = gcaa*gcaa;
                double t76312 = t76310*t76310;
                double t76313 = t76311*t76311;
                double t76314 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76315 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76316 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76317 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t76290+ \
                   b3f*t76291+b2f*c*t76288+b4f*t76292*t76293))+1.0)*(a1f*c*t76288+1.0)*2.0-c0p*t76303*t76305*2.0))/(two_13* \
                   2.0-2.0)+c0p*t76303*t76305*2.0)*( ( (t76306 > 0.0) ? 1.0*(t76271-t76270*t76309*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t76310*t76311*t76317)/(gamma_aa[index]*gcaa*t76315*2.0+t76310*t76311*t76317+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t76315)/(gamma_aa[index]*gcaa*t76315+1.0)+(ccaa4*t76312*t76313*t76314) \
                   /(gamma_aa[index]*gcaa*t76315*4.0+t76310*t76311*t76317*6.0+t76312*t76313*t76314+gamma_aa[index]*gcaa* \
                   t76310*t76311*t76316*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t76310*t76311*t76316)/(gamma_aa[index]*gcaa* \
                   t76315*3.0+t76310*t76311*t76317*3.0+gamma_aa[index]*gcaa*t76310*t76311*t76316+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t76270*t76269)/t76273-C_k*a_1*t76270*t76274*t76275*t76269-C_k* \
                   a_2*t76270*t76280*t76276*t76269*2.0+C_k*a_2*t76270*t76274*t76275*t76269*2.0+C_k*a_3*t76270*t76280* \
                   t76276*t76269*3.0-C_k*a_4*t76270*t76282*t76277*t76269*4.0+C_k*a_5*t76270*t76282*t76277*t76269*5.0- \
                   C_k*a_8*t76270*t76286*t76269*t76278*8.0+C_k*a_9*t76270*t76286*t76269*t76278*9.0+C_k*a_10*t76270*t76274* \
                   t76269*t76278*t76287*1.0E1-C_k*a_10*t76270*t76276*t76269*t76278*t76279*1.0E1+C_k*a_11*t76270*t76276* \
                   t76269*t76278*t76279*1.1E1-C_k*a_3*t76270*t76281*t76274*t76276*t76269*3.0+C_k*a_4*t76270*t76281*t76274* \
                   t76276*t76269*4.0-C_k*a_5*t76270*t76274*t76283*t76277*t76269*5.0+C_k*a_6*t76270*t76274*t76283*t76277* \
                   t76269*6.0-C_k*a_6*t76270*t76284*t76276*t76277*t76269*6.0+C_k*a_7*t76270*t76284*t76276*t76277*t76269* \
                   7.0-C_k*a_9*t76270*t76274*t76269*t76278*t76287*9.0-C_k*a_11*t76270*1.0/pow(t76273,1.2E1)*t76274*t76276* \
                   t76269*t76278*1.1E1-C_k*a_7*t76270*t76274*t76276*t76285*t76277*t76269*7.0+C_k*a_8*t76270*t76274*t76276* \
                   t76285*t76277*t76269*8.0);
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t76319 = rho_a[index]*2.0;
            double t76320 = 1.0/pow(t76319,1.0/3.0);
            double t76321 = c*t76320;
            double t76322 = sqrt(t76321);
            double t76323 = b1p*t76322;
            double t76324 = pow(t76321,3.0/2.0);
            double t76325 = b3p*t76324;
            double t76326 = b2p*c*t76320;
            double t76327 = c*c;
            double t76328 = 1.0/pow(t76319,2.0/3.0);
            double t76329 = b4p*t76327*t76328;
            double t76330 = t76323+t76325+t76326+t76329;
            double t76331 = 1.0/pow(t76319,8.0/3.0);
            double t76332 = 1.0/pow(t76319,7.0/3.0);
            double t76333 = 1.0/sqrt(t76321);
            double t76334 = 1.0/c0p;
            double t76335 = 1.0/t76330;
            double t76336 = t76334*t76335*(1.0/2.0);
            double t76337 = t76336+1.0;
            double t76338 = 1.0/t76337;
            double t76339 = a1p*c*t76320;
            double t76340 = t76339+1.0;
            double t76341 = 1.0/pow(t76319,4.0/3.0);
            double t76343 = b2p*c*t76341*(1.0/3.0);
            double t76344 = 1.0/pow(t76319,5.0/3.0);
            double t76345 = b4p*t76344*t76327*(2.0/3.0);
            double t76346 = b1p*c*t76341*t76333*(1.0/6.0);
            double t76347 = b3p*c*t76322*t76341*(1.0/2.0);
            double t76342 = t76343+t76345+t76346+t76347;
            double t76348 = t76342*t76342;
            double t76349 = 1.0/(t76330*t76330);
            double t76350 = log(t76337);
            double t76351 = gamma_aa[index]*gamma_aa[index];
            double t76352 = gcab*gcab;
            double t76353 = t76351*t76351;
            double t76354 = t76352*t76352;
            double t76355 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t76356 = 1.0/pow(rho_a[index],8.0/3.0);
            double t76357 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t76358 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t76359 = two_13*2.0;
            double t76360 = t76359-2.0;
            double t76361 = 1.0/t76360;
            double t76362 = 1.0/pow(rho_a[index],1.0/3.0);
            double t76363 = c*t76362;
            double t76364 = sqrt(t76363);
            double t76365 = pow(t76363,3.0/2.0);
            double t76366 = 1.0/pow(rho_a[index],2.0/3.0);
            double t76367 = b1p*t76364;
            double t76368 = b3p*t76365;
            double t76369 = b4p*t76327*t76366;
            double t76370 = b2p*c*t76362;
            double t76371 = t76370+t76367+t76368+t76369;
            double t76372 = 1.0/t76371;
            double t76373 = t76334*t76372*(1.0/2.0);
            double t76374 = t76373+1.0;
            double t76375 = log(t76374);
            double t76376 = a1p*c*t76362;
            double t76377 = t76376+1.0;
            double t76378 = gamma_aa[index]*gcab*t76356*4.0;
            double t76379 = gamma_aa[index]*gcab*t76351*t76352*t76357*4.0;
            double t76380 = t76351*t76352*t76358*6.0;
            double t76381 = t76353*t76354*t76355;
            double t76382 = t76380+t76381+t76378+t76379+1.0;
            double t76383 = 1.0/t76382;
            double t76384 = gamma_aa[index]*gcab*t76356;
            double t76385 = t76384+1.0;
            double t76386 = 1.0/t76385;
            double t76387 = gamma_aa[index]*gcab*t76356*3.0;
            double t76388 = gamma_aa[index]*gcab*t76351*t76352*t76357;
            double t76389 = t76351*t76352*t76358*3.0;
            double t76390 = t76387+t76388+t76389+1.0;
            double t76391 = 1.0/t76390;
            double t76392 = gamma_aa[index]*gcab*t76356*2.0;
            double t76393 = t76351*t76352*t76358;
            double t76394 = t76392+t76393+1.0;
            double t76395 = 1.0/t76394;
            double t76396 = 1.0/pow(rho_a[index],1.0E1);
            double t76397 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t76399 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t76400 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t76402 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t76409 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t76410 = gamma_aa[index]*gcab*t76399*(1.6E1/3.0);
            double t76411 = gamma_aa[index]*gcab*t76402*t76351*t76352*1.6E1;
            double t76412 = t76400*t76351*t76352*1.6E1;
            double t76413 = t76353*t76354*t76409*(1.6E1/3.0);
            double t76398 = t76410+t76411+t76412+t76413;
            double t76416 = gamma_aa[index]*gcab*t76399*(8.0/3.0);
            double t76417 = t76400*t76351*t76352*(8.0/3.0);
            double t76401 = t76416+t76417;
            double t76403 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t76404 = 1.0/(t76390*t76390);
            double t76405 = gamma_aa[index]*gcab*t76399*4.0;
            double t76406 = gamma_aa[index]*gcab*t76402*t76351*t76352*4.0;
            double t76407 = t76400*t76351*t76352*8.0;
            double t76408 = t76405+t76406+t76407;
            double t76414 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t76415 = 1.0/(t76382*t76382);
            double t76418 = 1.0/(t76394*t76394);
            double t76419 = pow(2.0,1.0/3.0);
            double t76420 = t76419*2.0;
            double t76421 = t76420-2.0;
            double t76422 = a1f*c*t76362;
            double t76423 = t76422+1.0;
            double t76424 = 1.0/c0f;
            double t76425 = b1f*t76364;
            double t76426 = b3f*t76365;
            double t76427 = b4f*t76327*t76366;
            double t76428 = b2f*c*t76362;
            double t76429 = t76425+t76426+t76427+t76428;
            double t76430 = 1.0/t76429;
            double t76431 = t76430*t76424*(1.0/2.0);
            double t76432 = t76431+1.0;
            double t76433 = 1.0/pow(rho_a[index],4.0/3.0);
            double t76434 = 1.0/pow(rho_a[index],5.0/3.0);
            double t76435 = 1.0/sqrt(t76363);
            double t76436 = log(t76432);
            double t76437 = 1.0/t76374;
            double t76438 = 1.0/(t76371*t76371);
            double t76439 = b4p*t76434*t76327*(2.0/3.0);
            double t76440 = b2p*c*t76433*(1.0/3.0);
            double t76441 = b1p*c*t76433*t76435*(1.0/6.0);
            double t76442 = b3p*c*t76433*t76364*(1.0/2.0);
            double t76443 = t76440+t76441+t76442+t76439;
            double t76444 = t76443*t76437*t76438*t76377;
            double t76445 = c0f*t76423*t76436*2.0;
            double t76446 = c0p*t76375*t76377*2.0;
            double t76447 = 1.0/(t76385*t76385);
            double t76448 = 1.0/(rho_a[index]*rho_a[index]);
            double t76449 = 1.0/tau_a[index];
            double t76450 = pow(rho_a[index],2.0/3.0);
            double t76451 = pow(rho_a[index],5.0/3.0);
            double t76452 = C_k*t76451*t76449;
            double t76453 = t76452+1.0;
            double t76454 = t76452-1.0;
            double t76455 = 1.0/(t76453*t76453);
            double t76456 = t76454*t76454;
            double t76457 = t76456*t76456;
            double t76458 = t76457*t76457;
            double t76459 = 1.0/pow(t76453,1.1E1);
            double t76460 = 1.0/(t76453*t76453*t76453);
            double t76461 = 1.0/(t76453*t76453*t76453*t76453);
            double t76462 = 1.0/(t76453*t76453*t76453*t76453*t76453);
            double t76463 = 1.0/(t76453*t76453*t76453*t76453*t76453*t76453);
            double t76464 = 1.0/(t76453*t76453*t76453*t76453*t76453*t76453*t76453);
            double t76465 = 1.0/(t76453*t76453*t76453*t76453*t76453*t76453*t76453*t76453);
            double t76466 = 1.0/(t76453*t76453*t76453*t76453*t76453*t76453*t76453*t76453*t76453);
            double t76467 = 1.0/pow(t76453,1.0E1);
            double t76468 = 1.0/(k*k);
            double t76469 = 1.0/kp;
            double t76470 = gamma_aa[index]*mu_*t76328*t76448*t76468*t76469*(1.0/4.0);
            double t76471 = t76470+1.0;
            double t76472 = 1.0/t76471;
            double t76473 = kp-kp*t76472+1.0;
            double t76474 = C_k*C_k;
            double t76475 = pow(rho_a[index],4.0/3.0);
            double t76476 = 1.0/(tau_a[index]*tau_a[index]);
            double t76477 = 1.0/t76453;
            double t76478 = 1.0/pow(t76453,1.2E1);
            double t76479 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t76480 = gamma_aa[index]*mu_*t76328*t76468*t76469*t76479*(1.0/2.0);
            double t76481 = gamma_aa[index]*mu_*t76344*t76448*t76468*t76469*(1.0/3.0);
            double t76482 = t76480+t76481;
            double t76483 = a_1*t76454*t76477;
            double t76484 = a_10*t76456*t76458*t76467;
            double t76485 = a_11*t76454*t76456*t76458*t76459;
            double t76486 = a_2*t76455*t76456;
            double t76487 = a_3*t76460*t76454*t76456;
            double t76488 = a_4*t76461*t76457;
            double t76489 = a_5*t76462*t76454*t76457;
            double t76490 = a_6*t76463*t76456*t76457;
            double t76491 = a_7*t76454*t76464*t76456*t76457;
            double t76492 = a_8*t76465*t76458;
            double t76493 = a_9*t76454*t76466*t76458;
            double t76494 = t76490+t76491+t76483+t76492+t76484+t76493+t76485+t76486+t76487+t76488+t76489+1.0;
            double t76495 = 1.0/(t76471*t76471);
            double t76496 = C_k*a_1*t76450*t76449*t76477*(5.0/3.0);
            double t76497 = C_k*a_2*t76450*t76454*t76455*t76449*(1.0E1/3.0);
            double t76498 = C_k*a_10*t76450*t76454*t76449*t76458*t76467*(5.0E1/3.0);
            double t76499 = C_k*a_11*t76450*t76456*t76449*t76458*t76459*(5.5E1/3.0);
            double t76500 = C_k*a_3*t76450*t76460*t76456*t76449*5.0;
            double t76501 = C_k*a_4*t76450*t76461*t76454*t76456*t76449*(2.0E1/3.0);
            double t76502 = C_k*a_5*t76450*t76462*t76457*t76449*(2.5E1/3.0);
            double t76503 = C_k*a_6*t76450*t76454*t76463*t76457*t76449*1.0E1;
            double t76504 = C_k*a_7*t76450*t76464*t76456*t76457*t76449*(3.5E1/3.0);
            double t76505 = C_k*a_8*t76450*t76454*t76456*t76465*t76457*t76449*(4.0E1/3.0);
            double t76506 = C_k*a_9*t76450*t76466*t76449*t76458*1.5E1;
            double t76507 = t76500+t76501+t76502+t76503+t76504+t76505+t76506+t76496+t76497+t76498+t76499-C_k* \
               a_1*t76450*t76454*t76455*t76449*(5.0/3.0)-C_k*a_2*t76450*t76460*t76456*t76449*(1.0E1/3.0)-C_k*a_4* \
               t76450*t76462*t76457*t76449*(2.0E1/3.0)-C_k*a_8*t76450*t76466*t76449*t76458*(4.0E1/3.0)-C_k*a_10*t76450* \
               t76456*t76449*t76458*t76459*(5.0E1/3.0)-C_k*a_3*t76450*t76461*t76454*t76456*t76449*5.0-C_k*a_5*t76450* \
               t76454*t76463*t76457*t76449*(2.5E1/3.0)-C_k*a_6*t76450*t76464*t76456*t76457*t76449*1.0E1-C_k*a_9*t76450* \
               t76454*t76449*t76458*t76467*1.5E1-C_k*a_11*t76450*t76454*t76456*t76449*t76458*t76478*(5.5E1/3.0)-C_k* \
               a_7*t76450*t76454*t76456*t76465*t76457*t76449*(3.5E1/3.0);
            double t76508 = ccab4*t76353*t76354*t76355*t76383;
            double t76509 = ccab1*gamma_aa[index]*gcab*t76356*t76386;
            double t76510 = ccab3*gamma_aa[index]*gcab*t76351*t76352*t76391*t76357;
            double t76511 = ccab2*t76351*t76352*t76358*t76395;
            double t76512 = ccab0+t76510+t76511+t76508+t76509;
            double t76513 = b2p*c*t76332*(4.0/9.0);
            double t76514 = b4p*t76331*t76327*(1.0E1/9.0);
            double t76515 = 1.0/pow(t76321,3.0/2.0);
            double t76516 = b3p*t76331*t76333*t76327*(1.0/1.2E1);
            double t76517 = b1p*c*t76332*t76333*(2.0/9.0);
            double t76518 = b3p*c*t76322*t76332*(2.0/3.0);
            double t76519 = t76513+t76514+t76516+t76517+t76518-b1p*t76331*t76515*t76327*(1.0/3.6E1);
            double t76520 = t76340*t76338*t76519*t76349;
            double t76521 = 1.0/(t76330*t76330*t76330);
            double t76522 = 1.0/(t76337*t76337);
            double t76523 = 1.0/(t76330*t76330*t76330*t76330);
            double t76524 = t76340*t76522*t76334*t76523*t76348*(1.0/2.0);
            double t76525 = 1.0/d2fz0;
            double t76526 = 1.0/Aa;
            double t76527 = b1a*t76322;
            double t76528 = b3a*t76324;
            double t76529 = b2a*c*t76320;
            double t76530 = b4a*t76327*t76328;
            double t76531 = t76530+t76527+t76528+t76529;
            double t76532 = 1.0/t76531;
            double t76533 = t76532*t76526*(1.0/2.0);
            double t76534 = t76533+1.0;
            double t76535 = log(t76534);
            double t76536 = a1a*c*t76320;
            double t76537 = t76536+1.0;
            double t76538 = a1p*c*t76341*t76342*t76338*t76349*(2.0/3.0);
            double t76539 = 1.0/t76432;
            double t76540 = b4f*t76434*t76327*(2.0/3.0);
            double t76541 = b2f*c*t76433*(1.0/3.0);
            double t76542 = b1f*c*t76433*t76435*(1.0/6.0);
            double t76543 = b3f*c*t76433*t76364*(1.0/2.0);
            double t76544 = t76540+t76541+t76542+t76543;
            double t76545 = 1.0/(t76429*t76429);
            double t76546 = 1.0/pow(rho_a[index],7.0/3.0);
            double t76547 = 1.0/pow(t76363,3.0/2.0);
            double t76548 = t76544*t76544;
            double t76549 = t76443*t76443;
            double t76550 = 1.0/(t76371*t76371*t76371);
            double t76551 = t76550*t76437*t76377*t76549*2.0;
            double t76552 = b4p*t76327*t76356*(1.0E1/9.0);
            double t76553 = b2p*c*t76546*(4.0/9.0);
            double t76554 = b3p*t76327*t76435*t76356*(1.0/1.2E1);
            double t76555 = b1p*c*t76435*t76546*(2.0/9.0);
            double t76556 = b3p*c*t76364*t76546*(2.0/3.0);
            double t76638 = b1p*t76327*t76356*t76547*(1.0/3.6E1);
            double t76557 = t76552+t76553+t76554+t76555+t76556-t76638;
            double t76558 = 1.0/(t76374*t76374);
            double t76559 = 1.0/(t76371*t76371*t76371*t76371);
            double t76560 = a1p*c*c0p*t76375*t76546*(8.0/9.0);
            double t76561 = a1f*c*c0f*t76433*t76436*(2.0/3.0);
            double t76562 = a1p*c*c0p*t76433*t76375*(2.0/3.0);
            double t76563 = a1p*c*c0p*t76341*t76350*(4.0/3.0);
            double t76564 = t76445-t76446;
            double t76565 = 1.0/(t76385*t76385*t76385);
            double t76566 = ccab1*gamma_aa[index]*gcab*t76351*t76352*t76565*t76396*(3.2E1/9.0);
            double t76567 = t76398*t76398;
            double t76568 = 1.0/(t76382*t76382*t76382);
            double t76569 = ccab4*t76353*t76354*t76355*t76567*t76568*2.0;
            double t76570 = t76401*t76401;
            double t76571 = 1.0/(t76394*t76394*t76394);
            double t76572 = ccab2*t76351*t76352*t76570*t76571*t76358*2.0;
            double t76573 = t76408*t76408;
            double t76574 = 1.0/(t76390*t76390*t76390);
            double t76575 = ccab3*gamma_aa[index]*gcab*t76351*t76352*t76357*t76573*t76574*2.0;
            double t76646 = t76423*t76544*t76545*t76539;
            double t76576 = t76444+t76561-t76562-t76646;
            double t76577 = gcaa*gcaa;
            double t76578 = t76577*t76577;
            double t76579 = t76421*t76361*t76564;
            double t76580 = t76446+t76579;
            double t76581 = tau_a[index]-1.0/1.0E20;
            double t76582 = ( (t76581 > 0.0) ?  1.0 : 0.0 ) ;
            double t76583 = tau_a[index]*2.0;
            double t76584 = 1.0/rho_a[index];
            double t76608 = gamma_aa[index]*t76584*(1.0/4.0);
            double t76585 = -t76608+t76583;
            double t76586 = t76449*t76585*(1.0/2.0);
            double t76587 = t76586-1.0;
            double t76588 = t76582*t76587;
            double t76589 = t76588+1.0;
            double t76590 = gamma_aa[index]*gcaa*t76356*4.0;
            double t76591 = gamma_aa[index]*gcaa*t76351*t76357*t76577*4.0;
            double t76592 = t76351*t76358*t76577*6.0;
            double t76593 = t76353*t76355*t76578;
            double t76594 = t76590+t76591+t76592+t76593+1.0;
            double t76595 = 1.0/t76594;
            double t76596 = gamma_aa[index]*gcaa*t76356;
            double t76597 = t76596+1.0;
            double t76598 = 1.0/t76597;
            double t76599 = gamma_aa[index]*gcaa*t76356*3.0;
            double t76600 = gamma_aa[index]*gcaa*t76351*t76357*t76577;
            double t76601 = t76351*t76358*t76577*3.0;
            double t76602 = t76600+t76601+t76599+1.0;
            double t76603 = 1.0/t76602;
            double t76604 = gamma_aa[index]*gcaa*t76356*2.0;
            double t76605 = t76351*t76358*t76577;
            double t76606 = t76604+t76605+1.0;
            double t76607 = 1.0/t76606;
            double t76609 = 1.0/(t76597*t76597);
            double t76610 = gamma_aa[index]*gcaa*t76399*(3.2E1/3.0);
            double t76611 = gamma_aa[index]*gcaa*t76402*t76351*t76577*3.2E1;
            double t76612 = t76400*t76351*t76577*3.2E1;
            double t76613 = t76353*t76409*t76578*(3.2E1/3.0);
            double t76614 = t76610+t76611+t76612+t76613;
            double t76615 = gamma_aa[index]*gcaa*t76399*(1.6E1/3.0);
            double t76616 = t76400*t76351*t76577*(1.6E1/3.0);
            double t76617 = t76615+t76616;
            double t76618 = gamma_aa[index]*gcaa*t76399*8.0;
            double t76619 = gamma_aa[index]*gcaa*t76402*t76351*t76577*8.0;
            double t76620 = t76400*t76351*t76577*1.6E1;
            double t76621 = t76620+t76618+t76619;
            double t76622 = 1.0/(t76602*t76602);
            double t76623 = 1.0/(t76594*t76594);
            double t76624 = 1.0/(t76606*t76606);
            double t76625 = ccaa4*t76353*t76355*t76595*t76578;
            double t76626 = ccaa1*gamma_aa[index]*gcaa*t76356*t76598;
            double t76627 = ccaa3*gamma_aa[index]*gcaa*t76351*t76603*t76357*t76577;
            double t76628 = ccaa2*t76351*t76607*t76358*t76577;
            double t76629 = ccaa0+t76625+t76626+t76627+t76628;
            double t76630 = 1.0/(t76429*t76429*t76429);
            double t76631 = b4f*t76327*t76356*(1.0E1/9.0);
            double t76632 = b2f*c*t76546*(4.0/9.0);
            double t76633 = b3f*t76327*t76435*t76356*(1.0/1.2E1);
            double t76634 = b1f*c*t76435*t76546*(2.0/9.0);
            double t76635 = b3f*c*t76364*t76546*(2.0/3.0);
            double t76636 = t76631+t76632+t76633+t76634+t76635-b1f*t76327*t76356*t76547*(1.0/3.6E1);
            double t76637 = t76423*t76545*t76636*t76539;
            double t76639 = t76437*t76438*t76377*t76557;
            double t76640 = 1.0/(t76432*t76432);
            double t76641 = 1.0/(t76429*t76429*t76429*t76429);
            double t76642 = t76423*t76424*t76640*t76641*t76548*(1.0/2.0);
            double t76643 = t76334*t76377*t76549*t76558*t76559*(1.0/2.0);
            double t76644 = a1f*c*t76433*t76544*t76545*t76539*(2.0/3.0);
            double t76645 = a1p*c*t76433*t76443*t76437*t76438*(2.0/3.0);
            double t76647 = t76421*t76361*t76576;
            double t76648 = ccaa4*t76353*t76409*t76595*t76578*(3.2E1/3.0);
            double t76649 = ccaa1*gamma_aa[index]*gcaa*t76399*t76598*(8.0/3.0);
            double t76650 = ccaa3*gamma_aa[index]*gcaa*t76402*t76351*t76603*t76577*8.0;
            double t76651 = ccaa2*t76400*t76351*t76607*t76577*(1.6E1/3.0);
            double t76654 = ccaa1*t76400*t76351*t76609*t76577*(8.0/3.0);
            double t76655 = ccaa3*gamma_aa[index]*gcaa*t76351*t76621*t76622*t76357*t76577;
            double t76656 = ccaa4*t76353*t76614*t76623*t76355*t76578;
            double t76657 = ccaa2*t76351*t76624*t76617*t76358*t76577;
            double t76652 = t76650+t76651-t76654-t76655-t76656+t76648-t76657+t76649;
            double t76653 = -t76444+t76562+t76647;
            v_rho_a_rho_a_[index] = -t76512*(-t76563-rho_a[index]*(t76520+t76524+t76538-t76340*t76521*t76338* \
               t76348*2.0-a1p*c*c0p*t76332*t76350*(8.0/9.0)+Aa*t76361*t76525*t76535*t76537*t76448*(4.0/9.0))*2.0+ \
               rho_a[index]*(-t76551-t76560+t76643+t76645+t76639+t76421*t76361*(t76551+t76560+t76642+t76644+t76637- \
               t76423*t76630*t76539*t76548*2.0-t76437*t76438*t76377*t76557-a1f*c*c0f*t76436*t76546*(8.0/9.0)-t76334* \
               t76377*t76549*t76558*t76559*(1.0/2.0)-a1p*c*t76433*t76443*t76437*t76438*(2.0/3.0)))+t76421*t76361* \
               t76576*2.0+t76340*t76342*t76338*t76349*2.0-t76443*t76437*t76438*t76377*2.0+a1p*c*c0p*t76433*t76375* \
               (4.0/3.0))+(-t76446+rho_a[index]*(-t76444+t76562+t76421*t76361*(t76444+t76561-t76423*t76544*t76545* \
               t76539-a1p*c*c0p*t76433*t76375*(2.0/3.0)))+rho_a[index]*(t76340*t76342*t76338*t76349-a1p*c*c0p*t76341* \
               t76350*(2.0/3.0))*2.0+c0p*t76340*t76350*2.0-t76421*t76361*t76564)*(ccab1*gamma_aa[index]*gcab*t76386* \
               t76399*(4.0/3.0)-ccab1*t76400*t76351*t76352*t76447*(4.0/3.0)+ccab2*t76400*t76351*t76352*t76395*(8.0/ \
               3.0)+ccab4*t76353*t76354*t76409*t76383*(1.6E1/3.0)-ccab2*t76401*t76351*t76352*t76418*t76358-ccab4* \
               t76415*t76353*t76354*t76355*t76398+ccab3*gamma_aa[index]*gcab*t76402*t76351*t76352*t76391*4.0-ccab3* \
               gamma_aa[index]*gcab*t76404*t76351*t76352*t76408*t76357)*4.0+(rho_a[index]*(t76446+t76421*t76361*(t76445- \
               c0p*t76375*t76377*2.0))*2.0-c0p*rho_a[index]*t76340*t76350*4.0)*(t76572+t76566+t76575+t76569+ccab1* \
               gamma_aa[index]*gcab*t76403*t76386*(4.4E1/9.0)+ccab4*t76414*t76353*t76354*t76383*(3.68E2/9.0)-ccab1* \
               t76351*t76352*t76447*t76397*(7.6E1/9.0)+ccab2*t76351*t76352*t76395*t76397*(4.0E1/3.0)-ccab2*t76400* \
               t76401*t76351*t76352*t76418*(1.6E1/3.0)-ccab4*t76415*t76353*t76354*t76409*t76398*(3.2E1/3.0)-ccab2* \
               t76351*t76352*t76418*t76358*(gamma_aa[index]*gcab*t76403*(8.8E1/9.0)+t76351*t76352*t76397*(4.0E1/3.0) \
               )-ccab4*t76415*t76353*t76354*t76355*(gamma_aa[index]*gcab*t76403*(1.76E2/9.0)+t76414*t76353*t76354* \
               (3.68E2/9.0)+t76351*t76352*t76397*8.0E1+gamma_aa[index]*gcab*t76351*t76352*t76396*(3.04E2/3.0))+ccab3* \
               gamma_aa[index]*gcab*t76351*t76352*t76391*t76396*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t76404*t76351* \
               t76352*t76357*(gamma_aa[index]*gcab*t76403*(4.4E1/3.0)+t76351*t76352*t76397*4.0E1+gamma_aa[index]* \
               gcab*t76351*t76352*t76396*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t76402*t76404*t76351*t76352*t76408* \
               8.0)-(X-1.0)*(t76507*t76473*2.0+rho_a[index]*t76473*(C_k*a_1*t76362*t76449*t76477*(1.0E1/9.0)-a_1* \
               t76455*t76474*t76475*t76476*(5.0E1/9.0)+a_2*t76455*t76474*t76475*t76476*(5.0E1/9.0)+a_1*t76460*t76454* \
               t76474*t76475*t76476*(5.0E1/9.0)+a_10*t76474*t76475*t76458*t76467*t76476*2.5E2-a_2*t76460*t76454*t76474* \
               t76475*t76476*(2.0E2/9.0)+a_2*t76461*t76456*t76474*t76475*t76476*(5.0E1/3.0)+a_3*t76460*t76454*t76474* \
               t76475*t76476*(5.0E1/3.0)-a_3*t76461*t76456*t76474*t76475*t76476*5.0E1+a_4*t76461*t76456*t76474*t76475* \
               t76476*(1.0E2/3.0)+a_4*t76463*t76474*t76457*t76475*t76476*(5.0E2/9.0)-a_5*t76463*t76474*t76457*t76475* \
               t76476*(1.25E3/9.0)+a_6*t76463*t76474*t76457*t76475*t76476*(2.5E2/3.0)+a_8*t76474*t76475*t76458*t76467* \
               t76476*2.0E2-a_9*t76474*t76475*t76458*t76467*t76476*4.5E2-C_k*a_1*t76362*t76454*t76455*t76449*(1.0E1/ \
               9.0)-C_k*a_2*t76460*t76362*t76456*t76449*(2.0E1/9.0)+C_k*a_2*t76362*t76454*t76455*t76449*(2.0E1/9.0) \
               +C_k*a_3*t76460*t76362*t76456*t76449*(1.0E1/3.0)-C_k*a_4*t76362*t76462*t76457*t76449*(4.0E1/9.0)+C_k* \
               a_5*t76362*t76462*t76457*t76449*(5.0E1/9.0)-C_k*a_8*t76362*t76466*t76449*t76458*(8.0E1/9.0)+C_k*a_9* \
               t76362*t76466*t76449*t76458*1.0E1+C_k*a_10*t76362*t76454*t76449*t76458*t76467*(1.0E2/9.0)-C_k*a_10* \
               t76362*t76456*t76449*t76458*t76459*(1.0E2/9.0)+C_k*a_11*t76362*t76456*t76449*t76458*t76459*(1.1E2/ \
               9.0)-C_k*a_3*t76362*t76461*t76454*t76456*t76449*(1.0E1/3.0)+C_k*a_4*t76362*t76461*t76454*t76456*t76449* \
               (4.0E1/9.0)-C_k*a_5*t76362*t76454*t76463*t76457*t76449*(5.0E1/9.0)+C_k*a_6*t76362*t76454*t76463*t76457* \
               t76449*(2.0E1/3.0)-C_k*a_6*t76362*t76464*t76456*t76457*t76449*(2.0E1/3.0)+C_k*a_7*t76362*t76464*t76456* \
               t76457*t76449*(7.0E1/9.0)-C_k*a_9*t76362*t76454*t76449*t76458*t76467*1.0E1-a_10*t76454*t76474*t76475* \
               t76458*t76476*t76459*(5.0E3/9.0)+a_11*t76454*t76474*t76475*t76458*t76476*t76459*(2.75E3/9.0)+a_10* \
               t76456*t76474*t76475*t76458*t76476*t76478*(2.75E3/9.0)-a_11*t76456*t76474*t76475*t76458*t76476*t76478* \
               (6.05E3/9.0)+a_3*t76462*t76454*t76456*t76474*t76475*t76476*(1.0E2/3.0)-a_4*t76462*t76454*t76456*t76474* \
               t76475*t76476*(8.0E2/9.0)+a_5*t76462*t76454*t76456*t76474*t76475*t76476*(5.0E2/9.0)+a_5*t76454*t76464* \
               t76474*t76457*t76475*t76476*(2.5E2/3.0)-a_6*t76454*t76464*t76474*t76457*t76475*t76476*2.0E2+a_6*t76456* \
               t76465*t76474*t76457*t76475*t76476*(3.5E2/3.0)+a_7*t76454*t76464*t76474*t76457*t76475*t76476*(3.5E2/ \
               3.0)-a_7*t76456*t76465*t76474*t76457*t76475*t76476*(2.45E3/9.0)+a_8*t76456*t76465*t76474*t76457*t76475* \
               t76476*(1.4E3/9.0)+a_9*t76454*t76474*t76475*t76458*t76476*t76459*2.5E2+a_11*1.0/pow(t76453,1.3E1)* \
               t76454*t76456*t76474*t76475*t76458*t76476*(1.1E3/3.0)-C_k*a_11*t76362*t76454*t76456*t76449*t76458* \
               t76478*(1.1E2/9.0)-C_k*a_7*t76362*t76454*t76456*t76465*t76457*t76449*(7.0E1/9.0)+C_k*a_8*t76362*t76454* \
               t76456*t76465*t76457*t76449*(8.0E1/9.0)+a_7*t76454*t76456*t76474*t76457*t76466*t76475*t76476*(1.4E3/ \
               9.0)-a_8*t76454*t76456*t76474*t76457*t76466*t76475*t76476*(3.2E3/9.0)+a_9*t76454*t76456*t76474*t76457* \
               t76466*t76475*t76476*2.0E2)-kp*t76482*t76494*t76495*2.0-kp*rho_a[index]*1.0/(t76471*t76471*t76471) \
               *(t76482*t76482)*t76494*2.0-kp*rho_a[index]*t76507*t76482*t76495*2.0+kp*rho_a[index]*t76494*t76495* \
               (gamma_aa[index]*mu_*t76331*t76448*t76468*t76469*(1.0E1/9.0)+gamma_aa[index]*mu_*t76344*t76468*t76469* \
               t76479*(4.0/3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t76328* \
               t76468*t76469*(3.0/2.0)))+(rho_a[index]*t76580*2.0-c0p*rho_a[index]*t76340*t76350*4.0)*(t76572+t76566+ \
               t76575+t76569-ccab2*t76414*t76353*t76354*t76418*(3.2E1/9.0)+ccab4*t76414*t76353*t76354*t76383*(6.4E1/ \
               3.0)-ccab1*t76351*t76352*t76447*t76397*(3.2E1/9.0)+ccab2*t76351*t76352*t76395*t76397*(3.2E1/9.0)-ccab2* \
               t76400*t76401*t76351*t76352*t76418*(1.6E1/3.0)-ccab4*t76415*t76353*t76354*t76409*t76398*(3.2E1/3.0) \
               -ccab4*t76415*t76353*t76354*t76355*(t76414*t76353*t76354*(6.4E1/3.0)+t76351*t76352*t76397*(6.4E1/3.0) \
               +gamma_aa[index]*gcab*t76351*t76352*t76396*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t76351*t76352* \
               t76391*t76396*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t76404*t76351*t76352*t76357*(t76351*t76352*t76397* \
               (3.2E1/3.0)+gamma_aa[index]*gcab*t76351*t76352*t76396*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t76402* \
               t76404*t76351*t76352*t76408*8.0)+t76512*(t76563+rho_a[index]*(t76520+t76524+t76538-t76340*t76521*t76338* \
               t76348*2.0-a1p*c*c0p*t76332*t76350*(8.0/9.0)-Aa*t76361*t76525*t76535*t76537*t76448*(4.0/9.0))*2.0- \
               t76340*t76342*t76338*t76349*2.0)+t76580*t76652*t76589*2.0+t76653*t76629*t76589*2.0-rho_a[index]*t76580* \
               t76589*(ccaa1*gamma_aa[index]*gcaa*t76403*t76598*(8.8E1/9.0)+ccaa2*t76351*t76607*t76397*t76577*(3.04E2/ \
               9.0)-ccaa1*t76351*t76609*t76397*t76577*2.4E1+ccaa4*t76414*t76353*t76595*t76578*(1.12E3/9.0)-ccaa2* \
               t76400*t76351*t76624*t76617*t76577*(3.2E1/3.0)-ccaa4*t76353*t76614*t76623*t76409*t76578*(6.4E1/3.0) \
               -ccaa2*t76351*t76624*t76358*t76577*(gamma_aa[index]*gcaa*t76403*(1.76E2/9.0)+t76351*t76397*t76577* \
               (3.04E2/9.0))-ccaa4*t76353*t76623*t76355*t76578*(gamma_aa[index]*gcaa*t76403*(3.52E2/9.0)+t76414*t76353* \
               t76578*(1.12E3/9.0)+t76351*t76397*t76577*(6.08E2/3.0)+gamma_aa[index]*gcaa*t76351*t76396*t76577*2.88E2) \
               +ccaa2*t76351*1.0/(t76606*t76606*t76606)*(t76617*t76617)*t76358*t76577*2.0+ccaa4*t76353*(t76614*t76614) \
               *t76355*1.0/(t76594*t76594*t76594)*t76578*2.0+ccaa3*gamma_aa[index]*gcaa*t76351*t76603*t76396*t76577* \
               7.2E1+ccaa1*gamma_aa[index]*gcaa*t76351*t76396*t76577*1.0/(t76597*t76597*t76597)*(1.28E2/9.0)+ccaa3* \
               gamma_aa[index]*gcaa*1.0/(t76602*t76602*t76602)*t76351*(t76621*t76621)*t76357*t76577*2.0-ccaa3*gamma_aa[index]* \
               gcaa*t76351*t76622*t76357*t76577*(gamma_aa[index]*gcaa*t76403*(8.8E1/3.0)+t76351*t76397*t76577*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t76351*t76396*t76577*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t76402*t76351*t76621* \
               t76622*t76577*1.6E1)+rho_a[index]*t76629*t76589*(-t76551-t76560+t76643+t76645+t76639+t76421*t76361* \
               (t76551+t76560+t76642-t76643+t76644-t76645+t76637-t76639-t76423*t76630*t76539*t76548*2.0-a1f*c*c0f* \
               t76436*t76546*(8.0/9.0)))-rho_a[index]*t76652*t76653*t76589*2.0+gamma_aa[index]*t76580*t76652*t76582* \
               t76449*t76584*(1.0/4.0)+gamma_aa[index]*t76582*t76449*t76584*t76629*(-t76444+t76562+t76647)*(1.0/4.0) \
               ;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t76659 = 1.0/(k*k);
                double t76660 = 1.0/kp;
                double t76661 = rho_a[index]*2.0;
                double t76662 = 1.0/(rho_a[index]*rho_a[index]);
                double t76663 = 1.0/pow(t76661,2.0/3.0);
                double t76664 = pow(rho_a[index],5.0/3.0);
                double t76665 = 1.0/tau_a[index];
                double t76666 = C_k*t76664*t76665;
                double t76667 = t76666-1.0;
                double t76668 = t76667*t76667;
                double t76669 = t76668*t76668;
                double t76670 = t76669*t76669;
                double t76671 = t76666+1.0;
                double t76672 = gamma_aa[index]*mu_*t76660*t76662*t76663*t76659*(1.0/4.0);
                double t76673 = t76672+1.0;
                double t76674 = 1.0/(t76673*t76673);
                double t76675 = 1.0/t76671;
                double t76676 = a_1*t76675*t76667;
                double t76677 = 1.0/pow(t76671,1.0E1);
                double t76678 = a_10*t76670*t76668*t76677;
                double t76679 = 1.0/pow(t76671,1.1E1);
                double t76680 = a_11*t76670*t76667*t76668*t76679;
                double t76681 = 1.0/(t76671*t76671);
                double t76682 = a_2*t76681*t76668;
                double t76683 = 1.0/(t76671*t76671*t76671);
                double t76684 = a_3*t76683*t76667*t76668;
                double t76685 = 1.0/(t76671*t76671*t76671*t76671);
                double t76686 = a_4*t76685*t76669;
                double t76687 = 1.0/(t76671*t76671*t76671*t76671*t76671);
                double t76688 = a_5*t76667*t76669*t76687;
                double t76689 = 1.0/(t76671*t76671*t76671*t76671*t76671*t76671);
                double t76690 = a_6*t76668*t76669*t76689;
                double t76691 = 1.0/(t76671*t76671*t76671*t76671*t76671*t76671*t76671);
                double t76692 = a_7*t76691*t76667*t76668*t76669;
                double t76693 = 1.0/(t76671*t76671*t76671*t76671*t76671*t76671*t76671*t76671);
                double t76694 = a_8*t76670*t76693;
                double t76695 = 1.0/(t76671*t76671*t76671*t76671*t76671*t76671*t76671*t76671*t76671);
                double t76696 = a_9*t76670*t76667*t76695;
                double t76697 = t76680+t76690+t76682+t76692+t76684+t76676+t76694+t76686+t76678+t76696+t76688+1.0;
                double t76698 = pow(rho_a[index],2.0/3.0);
                double t76699 = 1.0/rho_a[index];
                double t76700 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t76701 = 1.0/pow(t76661,5.0/3.0);
                double t76702 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76703 = c*t76702;
                double t76704 = sqrt(t76703);
                double t76705 = pow(t76703,3.0/2.0);
                double t76706 = c*c;
                double t76707 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76708 = 1.0/c0p;
                double t76709 = b1p*t76704;
                double t76710 = b3p*t76705;
                double t76711 = b4p*t76706*t76707;
                double t76712 = b2p*c*t76702;
                double t76713 = t76710+t76711+t76712+t76709;
                double t76714 = 1.0/t76713;
                double t76715 = t76714*t76708*(1.0/2.0);
                double t76716 = t76715+1.0;
                double t76717 = log(t76716);
                double t76718 = a1p*c*t76702;
                double t76719 = t76718+1.0;
                double t76720 = 1.0/pow(t76661,1.0/3.0);
                double t76721 = c*t76720;
                double t76722 = gamma_aa[index]*gamma_aa[index];
                double t76723 = gcab*gcab;
                double t76724 = t76723*t76723;
                double t76725 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76726 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76727 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76728 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t76729 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t76730 = gamma_aa[index]*gcab*t76725*2.0;
                double t76731 = t76722*t76723*t76726;
                double t76732 = t76730+t76731+1.0;
                double t76733 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t76734 = gamma_aa[index]*gcab*t76725;
                double t76735 = t76734+1.0;
                double t76736 = gamma_aa[index]*gcab*t76725*3.0;
                double t76737 = gamma_aa[index]*gcab*t76722*t76723*t76727;
                double t76738 = t76722*t76723*t76726*3.0;
                double t76739 = t76736+t76737+t76738+1.0;
                double t76740 = t76722*t76722;
                double t76741 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76742 = gamma_aa[index]*gcab*t76725*4.0;
                double t76743 = gamma_aa[index]*gcab*t76722*t76723*t76727*4.0;
                double t76744 = t76722*t76723*t76726*6.0;
                double t76745 = t76740*t76741*t76724;
                double t76746 = t76742+t76743+t76744+t76745+1.0;
                double t76747 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t76748 = 1.0/(t76732*t76732);
                double t76749 = 1.0/(t76739*t76739);
                double t76750 = 1.0/(t76746*t76746);
                double t76751 = gamma_aa[index]*gcab*t76747*(8.0/3.0);
                double t76752 = t76722*t76723*t76728*(8.0/3.0);
                double t76753 = t76751+t76752;
                double t76754 = gcab*t76725;
                double t76755 = gamma_aa[index]*t76723*t76726;
                double t76756 = t76754+t76755;
                double t76757 = gcab*t76725*(3.0/2.0);
                double t76758 = gamma_aa[index]*t76723*t76726*3.0;
                double t76759 = gcab*t76722*t76723*t76727*(3.0/2.0);
                double t76760 = t76757+t76758+t76759;
                double t76761 = gamma_aa[index]*gcab*t76747*4.0;
                double t76762 = gamma_aa[index]*gcab*t76722*t76723*t76733*4.0;
                double t76763 = t76722*t76723*t76728*8.0;
                double t76764 = t76761+t76762+t76763;
                double t76765 = gamma_aa[index]*gcab*t76747*(1.6E1/3.0);
                double t76766 = gamma_aa[index]*gcab*t76722*t76723*t76733*1.6E1;
                double t76767 = t76722*t76723*t76728*1.6E1;
                double t76768 = t76740*t76724*t76729*(1.6E1/3.0);
                double t76769 = t76765+t76766+t76767+t76768;
                double t76770 = gcab*t76725*2.0;
                double t76771 = gamma_aa[index]*t76723*t76726*6.0;
                double t76772 = gcab*t76722*t76723*t76727*6.0;
                double t76773 = gamma_aa[index]*t76722*t76741*t76724*2.0;
                double t76774 = t76770+t76771+t76772+t76773;
                double t76775 = pow(2.0,1.0/3.0);
                double t76776 = t76775*2.0;
                double t76777 = t76776-2.0;
                double t76778 = two_13*2.0;
                double t76779 = t76778-2.0;
                double t76780 = 1.0/t76779;
                double t76781 = 1.0/c0f;
                double t76782 = b1f*t76704;
                double t76783 = b3f*t76705;
                double t76784 = b4f*t76706*t76707;
                double t76785 = b2f*c*t76702;
                double t76786 = t76782+t76783+t76784+t76785;
                double t76787 = 1.0/t76786;
                double t76788 = t76781*t76787*(1.0/2.0);
                double t76789 = t76788+1.0;
                double t76790 = log(t76789);
                double t76791 = a1f*c*t76702;
                double t76792 = t76791+1.0;
                double t76793 = c0f*t76790*t76792*2.0;
                double t76794 = c0p*t76717*t76719*2.0;
                double t76795 = sqrt(t76721);
                double t76796 = b1p*t76795;
                double t76797 = pow(t76721,3.0/2.0);
                double t76798 = b3p*t76797;
                double t76799 = b2p*c*t76720;
                double t76800 = b4p*t76706*t76663;
                double t76801 = t76800+t76796+t76798+t76799;
                double t76802 = 1.0/t76801;
                double t76803 = t76802*t76708*(1.0/2.0);
                double t76804 = t76803+1.0;
                double t76805 = log(t76804);
                double t76806 = a1p*c*t76720;
                double t76807 = t76806+1.0;
                double t76808 = 1.0/t76746;
                double t76809 = 1.0/t76732;
                double t76810 = 1.0/t76739;
                double t76811 = 1.0/(t76735*t76735);
                double t76812 = 1.0/(t76735*t76735*t76735);
                double t76813 = ccab3*gcab*t76722*t76723*t76727*t76764*t76749*(3.0/2.0);
                double t76814 = ccab2*gamma_aa[index]*t76723*t76726*t76753*t76748;
                double t76815 = ccab3*gamma_aa[index]*gcab*t76722*t76723*t76733*t76760*t76749*4.0;
                double t76816 = ccab4*gamma_aa[index]*t76722*t76741*t76750*t76724*t76769*2.0;
                double t76817 = ccab4*t76740*t76750*t76724*t76729*t76774*(1.6E1/3.0);
                double t76818 = ccab2*t76722*t76723*t76728*t76756*t76748*(8.0/3.0);
                double t76819 = gamma_aa[index]*t76723*t76728*4.0;
                double t76820 = 1.0/(t76732*t76732*t76732);
                double t76821 = 1.0/(t76739*t76739*t76739);
                double t76822 = 1.0/(t76746*t76746*t76746);
                double t76823 = 1.0/pow(t76661,4.0/3.0);
                double t76824 = 1.0/pow(rho_a[index],4.0/3.0);
                double t76825 = 1.0/pow(rho_a[index],5.0/3.0);
                double t76826 = 1.0/sqrt(t76703);
                double t76827 = 1.0/t76716;
                double t76828 = 1.0/(t76713*t76713);
                double t76829 = b4p*t76706*t76825*(2.0/3.0);
                double t76830 = b2p*c*t76824*(1.0/3.0);
                double t76831 = b1p*c*t76824*t76826*(1.0/6.0);
                double t76832 = b3p*c*t76704*t76824*(1.0/2.0);
                double t76833 = t76830+t76831+t76832+t76829;
                double t76834 = t76833*t76719*t76827*t76828;
                double t76835 = t76793-t76794;
                double t76836 = t76780*t76835*t76777;
                double t76837 = 1.0/t76735;
                double t76838 = t76836+t76794;
                double t76839 = gcaa*gcaa;
                double t76840 = t76839*t76839;
                double t76841 = gamma_aa[index]*gcaa*t76725;
                double t76842 = t76841+1.0;
                double t76843 = gamma_aa[index]*gcaa*t76725*3.0;
                double t76844 = gamma_aa[index]*gcaa*t76722*t76727*t76839;
                double t76845 = t76722*t76726*t76839*3.0;
                double t76846 = t76843+t76844+t76845+1.0;
                double t76847 = gamma_aa[index]*gcaa*t76725*4.0;
                double t76848 = gamma_aa[index]*gcaa*t76722*t76727*t76839*4.0;
                double t76849 = t76722*t76726*t76839*6.0;
                double t76850 = t76740*t76741*t76840;
                double t76851 = t76850+t76847+t76848+t76849+1.0;
                double t76852 = gamma_aa[index]*gcaa*t76725*2.0;
                double t76853 = t76722*t76726*t76839;
                double t76854 = t76852+t76853+1.0;
                double t76855 = tau_a[index]-1.0/1.0E20;
                double t76856 = ( (t76855 > 0.0) ?  1.0 : 0.0 ) ;
                double t76857 = tau_a[index]*2.0;
                double t76895 = gamma_aa[index]*t76699*(1.0/4.0);
                double t76858 = t76857-t76895;
                double t76859 = t76665*t76858*(1.0/2.0);
                double t76860 = t76859-1.0;
                double t76861 = t76860*t76856;
                double t76862 = t76861+1.0;
                double t76863 = 1.0/t76842;
                double t76864 = 1.0/t76851;
                double t76865 = 1.0/t76854;
                double t76866 = 1.0/t76846;
                double t76867 = 1.0/(t76842*t76842);
                double t76868 = 1.0/(t76846*t76846);
                double t76869 = 1.0/(t76854*t76854);
                double t76870 = gcaa*t76725*3.0;
                double t76871 = gamma_aa[index]*t76726*t76839*6.0;
                double t76872 = gcaa*t76722*t76727*t76839*3.0;
                double t76873 = t76870+t76871+t76872;
                double t76874 = 1.0/(t76851*t76851);
                double t76875 = gcaa*t76725*4.0;
                double t76876 = gamma_aa[index]*t76726*t76839*1.2E1;
                double t76877 = gcaa*t76722*t76727*t76839*1.2E1;
                double t76878 = gamma_aa[index]*t76722*t76741*t76840*4.0;
                double t76879 = t76875+t76876+t76877+t76878;
                double t76880 = gcaa*t76725*2.0;
                double t76881 = gamma_aa[index]*t76726*t76839*2.0;
                double t76882 = t76880+t76881;
                double t76883 = gamma_aa[index]*gcaa*t76747*(1.6E1/3.0);
                double t76884 = t76722*t76728*t76839*(1.6E1/3.0);
                double t76885 = t76883+t76884;
                double t76886 = gamma_aa[index]*gcaa*t76747*8.0;
                double t76887 = gamma_aa[index]*gcaa*t76722*t76733*t76839*8.0;
                double t76888 = t76722*t76728*t76839*1.6E1;
                double t76889 = t76886+t76887+t76888;
                double t76890 = gamma_aa[index]*gcaa*t76747*(3.2E1/3.0);
                double t76891 = gamma_aa[index]*gcaa*t76722*t76733*t76839*3.2E1;
                double t76892 = t76722*t76728*t76839*3.2E1;
                double t76893 = t76740*t76840*t76729*(3.2E1/3.0);
                double t76894 = t76890+t76891+t76892+t76893;
                double t76896 = 1.0/t76789;
                double t76897 = 1.0/(t76786*t76786);
                double t76898 = b4f*t76706*t76825*(2.0/3.0);
                double t76899 = b2f*c*t76824*(1.0/3.0);
                double t76900 = b1f*c*t76824*t76826*(1.0/6.0);
                double t76901 = b3f*c*t76704*t76824*(1.0/2.0);
                double t76902 = t76900+t76901+t76898+t76899;
                double t76903 = a1f*c*c0f*t76824*t76790*(2.0/3.0);
                double t76904 = a1p*c*c0p*t76824*t76717*(2.0/3.0);
                double t76905 = ccaa1*gcaa*t76725*t76863;
                double t76906 = ccaa4*gamma_aa[index]*t76722*t76741*t76840*t76864*4.0;
                double t76907 = ccaa2*gamma_aa[index]*t76726*t76865*t76839*2.0;
                double t76908 = ccaa3*gcaa*t76722*t76727*t76839*t76866*3.0;
                double t76913 = ccaa1*gamma_aa[index]*t76726*t76839*t76867;
                double t76914 = ccaa3*gamma_aa[index]*gcaa*t76722*t76727*t76873*t76839*t76868;
                double t76915 = ccaa4*t76740*t76741*t76840*t76874*t76879;
                double t76916 = ccaa2*t76722*t76726*t76882*t76839*t76869;
                double t76909 = -t76913+t76905-t76914+t76906-t76915+t76907-t76916+t76908;
                double t76910 = t76903-t76904+t76834-t76902*t76792*t76896*t76897;
                double t76911 = t76910*t76780*t76777;
                double t76912 = t76911+t76904-t76834;
                v_rho_a_gamma_aa_[index] = (rho_a[index]*t76838*2.0-c0p*rho_a[index]*t76805*t76807*4.0)*(t76813+t76814+ \
                   t76815+t76816+t76817+t76818-ccab1*gcab*t76747*t76837*(4.0/3.0)+ccab1*gamma_aa[index]*t76811*t76723* \
                   t76728*(8.0/3.0)-ccab2*gamma_aa[index]*t76723*t76728*t76809*4.0+ccab4*t76740*t76741*t76750*t76724* \
                   (gcab*t76747*(1.6E1/3.0)+gamma_aa[index]*t76723*t76728*2.4E1+gamma_aa[index]*t76722*t76724*t76729* \
                   (4.0E1/3.0)+gcab*t76722*t76723*t76733*3.2E1)+ccab2*t76722*t76723*t76726*t76748*(t76819+gcab*t76747* \
                   (8.0/3.0))-ccab4*gamma_aa[index]*t76722*t76724*t76808*t76729*(4.0E1/3.0)-ccab1*gcab*t76722*t76812* \
                   t76723*t76733*(4.0/3.0)-ccab3*gcab*t76810*t76722*t76723*t76733*8.0-ccab2*t76820*t76722*t76723*t76726* \
                   t76753*t76756*2.0-ccab4*t76740*t76741*t76822*t76724*t76774*t76769*2.0+ccab3*gamma_aa[index]*gcab*t76722* \
                   t76723*t76727*t76749*(gcab*t76747*4.0+gamma_aa[index]*t76723*t76728*1.2E1+gcab*t76722*t76723*t76733* \
                   8.0)-ccab3*gamma_aa[index]*gcab*t76722*t76821*t76723*t76760*t76727*t76764*2.0)-(-t76836-t76794+rho_a[index]* \
                   ((1.0/(t76801*t76801)*t76807*(b2p*c*t76823*(1.0/3.0)+b4p*t76701*t76706*(2.0/3.0)+b3p*c*t76823*t76795* \
                   (1.0/2.0)+b1p*c*1.0/sqrt(t76721)*t76823*(1.0/6.0)))/t76804-a1p*c*c0p*t76805*t76823*(2.0/3.0))*2.0+ \
                   rho_a[index]*(t76904-t76834+t76780*t76777*(t76903+t76834-t76902*t76792*t76896*t76897-a1p*c*c0p*t76824* \
                   t76717*(2.0/3.0)))+c0p*t76805*t76807*2.0)*(ccab1*gcab*t76725*t76837*(1.0/2.0)-ccab1*gamma_aa[index]* \
                   t76811*t76723*t76726*(1.0/2.0)+ccab2*gamma_aa[index]*t76723*t76726*t76809-ccab4*t76740*t76741*t76750* \
                   t76724*t76774-ccab2*t76722*t76723*t76726*t76756*t76748+ccab4*gamma_aa[index]*t76722*t76741*t76724* \
                   t76808*2.0+ccab3*gcab*t76810*t76722*t76723*t76727*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t76722*t76723* \
                   t76760*t76727*t76749)*2.0-(X-1.0)*(-kp*rho_a[index]*t76674*t76697*(mu_*t76700*t76660*t76663*t76659* \
                   (1.0/2.0)+mu_*t76701*t76660*t76662*t76659*(1.0/3.0))+mu_*t76662*t76663*t76674*t76659*t76697*(1.0/4.0) \
                   +mu_*t76663*t76674*t76659*t76699*(C_k*a_1*t76665*t76675*t76698*(5.0/3.0)-C_k*a_1*t76681*t76665*t76667* \
                   t76698*(5.0/3.0)+C_k*a_2*t76681*t76665*t76667*t76698*(1.0E1/3.0)-C_k*a_2*t76665*t76683*t76668*t76698* \
                   (1.0E1/3.0)+C_k*a_3*t76665*t76683*t76668*t76698*5.0-C_k*a_4*t76665*t76669*t76687*t76698*(2.0E1/3.0) \
                   +C_k*a_5*t76665*t76669*t76687*t76698*(2.5E1/3.0)-C_k*a_8*t76670*t76665*t76695*t76698*(4.0E1/3.0)+C_k* \
                   a_9*t76670*t76665*t76695*t76698*1.5E1+C_k*a_10*t76670*t76665*t76667*t76677*t76698*(5.0E1/3.0)-C_k* \
                   a_10*t76670*t76665*t76668*t76679*t76698*(5.0E1/3.0)+C_k*a_11*t76670*t76665*t76668*t76679*t76698*(5.5E1/ \
                   3.0)-C_k*a_3*t76665*t76667*t76685*t76668*t76698*5.0+C_k*a_4*t76665*t76667*t76685*t76668*t76698*(2.0E1/ \
                   3.0)-C_k*a_5*t76665*t76667*t76669*t76689*t76698*(2.5E1/3.0)-C_k*a_6*t76691*t76665*t76668*t76669*t76698* \
                   1.0E1+C_k*a_6*t76665*t76667*t76669*t76689*t76698*1.0E1+C_k*a_7*t76691*t76665*t76668*t76669*t76698* \
                   (3.5E1/3.0)-C_k*a_9*t76670*t76665*t76667*t76677*t76698*1.5E1-C_k*a_11*t76670*1.0/pow(t76671,1.2E1) \
                   *t76665*t76667*t76668*t76698*(5.5E1/3.0)-C_k*a_7*t76665*t76693*t76667*t76668*t76669*t76698*(3.5E1/ \
                   3.0)+C_k*a_8*t76665*t76693*t76667*t76668*t76669*t76698*(4.0E1/3.0))*(1.0/4.0)+mu_*t76663*1.0/(t76673* \
                   t76673*t76673)*t76659*t76697*t76699*(gamma_aa[index]*mu_*t76700*t76660*t76663*t76659*(1.0/2.0)+gamma_aa[index]* \
                   mu_*t76701*t76660*t76662*t76659*(1.0/3.0))*(1.0/2.0))+(rho_a[index]*(t76794+t76780*t76777*(t76793- \
                   c0p*t76717*t76719*2.0))*2.0-c0p*rho_a[index]*t76805*t76807*4.0)*(t76813+t76814+t76815+t76816+t76817+ \
                   t76818+ccab1*gamma_aa[index]*t76811*t76723*t76728*(4.0/3.0)-ccab2*gamma_aa[index]*t76723*t76728*t76809* \
                   (4.0/3.0)+ccab4*t76740*t76741*t76750*t76724*(gamma_aa[index]*t76723*t76728*8.0+gamma_aa[index]*t76722* \
                   t76724*t76729*8.0+gcab*t76722*t76723*t76733*1.6E1)-ccab4*gamma_aa[index]*t76722*t76724*t76808*t76729* \
                   8.0+ccab2*gamma_aa[index]*t76722*t76724*t76729*t76748*(4.0/3.0)-ccab1*gcab*t76722*t76812*t76723*t76733* \
                   (4.0/3.0)-ccab3*gcab*t76810*t76722*t76723*t76733*4.0-ccab2*t76820*t76722*t76723*t76726*t76753*t76756* \
                   2.0-ccab4*t76740*t76741*t76822*t76724*t76774*t76769*2.0+ccab3*gamma_aa[index]*gcab*t76722*t76723*t76727* \
                   t76749*(t76819+gcab*t76722*t76723*t76733*4.0)-ccab3*gamma_aa[index]*gcab*t76722*t76821*t76723*t76760* \
                   t76727*t76764*2.0)-t76862*t76909*t76838+rho_a[index]*t76912*t76862*t76909-rho_a[index]*t76862*t76838* \
                   (ccaa1*gcaa*t76863*t76747*(-8.0/3.0)-ccaa2*gamma_aa[index]*t76728*t76865*t76839*(3.2E1/3.0)+ccaa1* \
                   gamma_aa[index]*t76728*t76839*t76867*8.0+ccaa4*t76740*t76840*t76729*t76874*t76879*(3.2E1/3.0)+ccaa2* \
                   t76722*t76728*t76882*t76839*t76869*(1.6E1/3.0)+ccaa4*t76740*t76741*t76840*t76874*(gcaa*t76747*(3.2E1/ \
                   3.0)+gamma_aa[index]*t76728*t76839*6.4E1+gamma_aa[index]*t76722*t76840*t76729*(1.28E2/3.0)+gcaa*t76722* \
                   t76733*t76839*9.6E1)-ccaa1*gcaa*t76722*t76733*1.0/(t76842*t76842*t76842)*t76839*(1.6E1/3.0)+ccaa2* \
                   t76722*t76726*t76839*t76869*(gcaa*t76747*(1.6E1/3.0)+gamma_aa[index]*t76728*t76839*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t76722*t76840*t76729*t76864*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t76726*t76839*t76885* \
                   t76869*2.0-ccaa3*gcaa*t76722*t76733*t76839*t76866*2.4E1+ccaa4*gamma_aa[index]*t76722*t76741*t76840* \
                   t76874*t76894*4.0+ccaa3*gcaa*t76722*t76727*t76839*t76868*t76889*3.0-ccaa4*t76740*t76741*t76840*1.0/ \
                   (t76851*t76851*t76851)*t76894*t76879*2.0-ccaa2*t76722*t76726*1.0/(t76854*t76854*t76854)*t76882*t76839* \
                   t76885*2.0+ccaa3*gamma_aa[index]*gcaa*t76722*t76727*t76839*t76868*(gcaa*t76747*8.0+gamma_aa[index]* \
                   t76728*t76839*3.2E1+gcaa*t76722*t76733*t76839*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t76722*t76733*t76873* \
                   t76839*t76868*8.0-ccaa3*gamma_aa[index]*gcaa*t76722*t76727*1.0/(t76846*t76846*t76846)*t76873*t76839* \
                   t76889*2.0)-t76912*t76665*t76856*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t76725*t76863+ccaa4*t76740*t76741* \
                   t76840*t76864+ccaa2*t76722*t76726*t76865*t76839+ccaa3*gamma_aa[index]*gcaa*t76722*t76727*t76839*t76866) \
                   *(1.0/8.0)-t76665*t76838*t76856*(ccaa1*gamma_aa[index]*gcaa*t76863*t76747*(8.0/3.0)+ccaa4*t76740*t76840* \
                   t76729*t76864*(3.2E1/3.0)+ccaa2*t76722*t76728*t76865*t76839*(1.6E1/3.0)-ccaa1*t76722*t76728*t76839* \
                   t76867*(8.0/3.0)-ccaa4*t76740*t76741*t76840*t76874*t76894-ccaa2*t76722*t76726*t76839*t76885*t76869+ \
                   ccaa3*gamma_aa[index]*gcaa*t76722*t76733*t76839*t76866*8.0-ccaa3*gamma_aa[index]*gcaa*t76722*t76727* \
                   t76839*t76868*t76889)*(1.0/8.0)-gamma_aa[index]*t76665*t76909*t76838*t76856*t76699*(1.0/8.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t76918 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76919 = c*t76918;
                double t76920 = sqrt(t76919);
                double t76921 = pow(t76919,3.0/2.0);
                double t76922 = c*c;
                double t76923 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76924 = 1.0/c0p;
                double t76925 = b1p*t76920;
                double t76926 = b3p*t76921;
                double t76927 = b4p*t76922*t76923;
                double t76928 = b2p*c*t76918;
                double t76929 = t76925+t76926+t76927+t76928;
                double t76930 = 1.0/t76929;
                double t76931 = t76930*t76924*(1.0/2.0);
                double t76932 = t76931+1.0;
                double t76933 = log(t76932);
                double t76934 = a1p*c*t76918;
                double t76935 = t76934+1.0;
                double t76936 = rho_a[index]*2.0;
                double t76937 = 1.0/pow(t76936,1.0/3.0);
                double t76938 = c*t76937;
                double t76939 = gcab*gcab;
                double t76940 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76941 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76942 = gamma_aa[index]*gamma_aa[index];
                double t76943 = t76939*t76939;
                double t76944 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76945 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76946 = gamma_aa[index]*gcab*t76941;
                double t76947 = t76946+1.0;
                double t76948 = gamma_aa[index]*gcab*t76941*2.0;
                double t76949 = t76940*t76942*t76939;
                double t76950 = t76948+t76949+1.0;
                double t76951 = gamma_aa[index]*gcab*t76941*3.0;
                double t76952 = gamma_aa[index]*gcab*t76942*t76945*t76939;
                double t76953 = t76940*t76942*t76939*3.0;
                double t76954 = t76951+t76952+t76953+1.0;
                double t76955 = t76942*t76942;
                double t76971 = gcab*t76941*2.0;
                double t76972 = gamma_aa[index]*t76940*t76939*6.0;
                double t76973 = gcab*t76942*t76945*t76939*6.0;
                double t76974 = gamma_aa[index]*t76942*t76943*t76944*2.0;
                double t76956 = t76971+t76972+t76973+t76974;
                double t76957 = gamma_aa[index]*gcab*t76941*4.0;
                double t76958 = gamma_aa[index]*gcab*t76942*t76945*t76939*4.0;
                double t76959 = t76940*t76942*t76939*6.0;
                double t76960 = t76943*t76944*t76955;
                double t76961 = t76960+t76957+t76958+t76959+1.0;
                double t76964 = gcab*t76941;
                double t76965 = gamma_aa[index]*t76940*t76939;
                double t76962 = t76964+t76965;
                double t76963 = 1.0/(t76954*t76954);
                double t76966 = 1.0/(t76950*t76950);
                double t76967 = gcab*t76941*(3.0/2.0);
                double t76968 = gamma_aa[index]*t76940*t76939*3.0;
                double t76969 = gcab*t76942*t76945*t76939*(3.0/2.0);
                double t76970 = t76967+t76968+t76969;
                double t76975 = 1.0/(t76961*t76961);
                double t76976 = pow(2.0,1.0/3.0);
                double t76977 = t76976*2.0;
                double t76978 = t76977-2.0;
                double t76979 = two_13*2.0;
                double t76980 = t76979-2.0;
                double t76981 = 1.0/t76980;
                double t76982 = 1.0/c0f;
                double t76983 = b1f*t76920;
                double t76984 = b3f*t76921;
                double t76985 = b4f*t76922*t76923;
                double t76986 = b2f*c*t76918;
                double t76987 = t76983+t76984+t76985+t76986;
                double t76988 = 1.0/t76987;
                double t76989 = t76982*t76988*(1.0/2.0);
                double t76990 = t76989+1.0;
                double t76991 = log(t76990);
                double t76992 = a1f*c*t76918;
                double t76993 = t76992+1.0;
                double t76994 = c0f*t76991*t76993*2.0;
                double t76995 = c0p*t76933*t76935*2.0;
                double t76996 = gcaa*gcaa;
                double t76997 = t76996*t76996;
                double t76998 = gamma_aa[index]*gcaa*t76941;
                double t76999 = t76998+1.0;
                double t77000 = gamma_aa[index]*gcaa*t76941*2.0;
                double t77001 = t76940*t76942*t76996;
                double t77002 = t77000+t77001+1.0;
                double t77003 = gamma_aa[index]*gcaa*t76941*3.0;
                double t77004 = gamma_aa[index]*gcaa*t76942*t76945*t76996;
                double t77005 = t76940*t76942*t76996*3.0;
                double t77006 = t77003+t77004+t77005+1.0;
                double t77022 = gcaa*t76941*4.0;
                double t77023 = gamma_aa[index]*t76940*t76996*1.2E1;
                double t77024 = gcaa*t76942*t76945*t76996*1.2E1;
                double t77025 = gamma_aa[index]*t76942*t76944*t76997*4.0;
                double t77007 = t77022+t77023+t77024+t77025;
                double t77008 = gamma_aa[index]*gcaa*t76941*4.0;
                double t77009 = gamma_aa[index]*gcaa*t76942*t76945*t76996*4.0;
                double t77010 = t76940*t76942*t76996*6.0;
                double t77011 = t76944*t76955*t76997;
                double t77012 = t77010+t77011+t77008+t77009+1.0;
                double t77015 = gcaa*t76941*2.0;
                double t77016 = gamma_aa[index]*t76940*t76996*2.0;
                double t77013 = t77015+t77016;
                double t77014 = 1.0/(t77006*t77006);
                double t77017 = 1.0/(t77002*t77002);
                double t77018 = gcaa*t76941*3.0;
                double t77019 = gamma_aa[index]*t76940*t76996*6.0;
                double t77020 = gcaa*t76942*t76945*t76996*3.0;
                double t77021 = t77020+t77018+t77019;
                double t77026 = 1.0/(t77012*t77012);
                double t77027 = 1.0/tau_a[index];
                double t77028 = tau_a[index]-1.0/1.0E20;
                double t77029 = ( (t77028 > 0.0) ?  1.0 : 0.0 ) ;
                double t77030 = t76994-t76995;
                double t77031 = t76981*t76978*t77030;
                double t77032 = t76995+t77031;
                double t77033 = 1.0/t77012;
                double t77034 = 1.0/t77002;
                double t77035 = 1.0/t77006;
                double t77036 = 1.0/(t76999*t76999);
                double t77037 = 1.0/kp;
                double t77038 = 1.0/pow(t76936,2.0/3.0);
                double t77039 = pow(rho_a[index],5.0/3.0);
                double t77040 = C_k*t77027*t77039;
                double t77041 = t77040-1.0;
                double t77042 = t77041*t77041;
                double t77043 = t77042*t77042;
                double t77044 = t77043*t77043;
                double t77045 = t77040+1.0;
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t76995+t76981*t76978*(t76994-c0p*t76933*t76935*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t76924*(1.0/2.0))/(b1p*sqrt(t76938)+b3p*pow(t76938,3.0/2.0)+b2p*c*t76937+ \
                   b4p*t76922*t77038)+1.0)*(a1p*c*t76937+1.0)*4.0)*((ccab2*t76940*t76939*(1.0/2.0))/t76950-ccab1*t76940* \
                   1.0/(t76947*t76947)*t76939*(1.0/2.0)-ccab2*t76942*t76943*t76944*t76966*(1.0/2.0)+(ccab4*t76942*t76943* \
                   t76944*3.0)/t76961-ccab4*t76943*t76944*t76955*t76975*(t76940*t76939*3.0+t76942*t76943*t76944*3.0+gamma_aa[index]* \
                   gcab*t76945*t76939*6.0)+(ccab3*gamma_aa[index]*gcab*t76945*t76939*(3.0/2.0))/t76954+ccab1*gamma_aa[index]* \
                   gcab*t76945*1.0/(t76947*t76947*t76947)*t76939*(1.0/2.0)+ccab2*t76940*1.0/(t76950*t76950*t76950)*t76942* \
                   (t76962*t76962)*t76939*2.0+ccab4*t76943*1.0/(t76961*t76961*t76961)*t76944*t76955*(t76956*t76956)*2.0- \
                   ccab2*gamma_aa[index]*t76940*t76962*t76939*t76966*2.0-ccab4*gamma_aa[index]*t76942*t76943*t76944*t76956* \
                   t76975*4.0-ccab3*gcab*t76942*t76970*t76945*t76963*t76939*3.0-ccab3*gamma_aa[index]*gcab*t76942*t76945* \
                   t76963*t76939*(t76940*t76939*(3.0/2.0)+gamma_aa[index]*gcab*t76945*t76939*(3.0/2.0))+ccab3*gamma_aa[index]* \
                   gcab*t76942*(t76970*t76970)*t76945*1.0/(t76954*t76954*t76954)*t76939*2.0)*4.0+t77032*t77027*t77029* \
                   ((ccaa1*gcaa*t76941)/t76999+ccaa2*gamma_aa[index]*t76940*t76996*t77034*2.0-ccaa1*gamma_aa[index]*t76940* \
                   t76996*t77036-ccaa2*t76940*t76942*t76996*t77013*t77017-ccaa4*t76944*t76955*t76997*t77007*t77026+ccaa4* \
                   gamma_aa[index]*t76942*t76944*t76997*t77033*4.0+ccaa3*gcaa*t76942*t76945*t76996*t77035*3.0-ccaa3*gamma_aa[index]* \
                   gcaa*t76942*t76945*t76996*t77021*t77014)*(1.0/2.0)-rho_a[index]*t77032*(t77029*(t77027*(tau_a[index]* \
                   2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0)+1.0)*(ccaa2*t76940*t76996*t77034*2.0- \
                   ccaa1*t76940*t76996*t77036*2.0-ccaa2*t76942*t76944*t76997*t77017*2.0+ccaa4*t76942*t76944*t76997*t77033* \
                   1.2E1-ccaa4*t76944*t76955*t76997*t77026*(t76940*t76996*1.2E1+t76942*t76944*t76997*1.2E1+gamma_aa[index]* \
                   gcaa*t76945*t76996*2.4E1)+ccaa1*gamma_aa[index]*gcaa*t76945*t76996*1.0/(t76999*t76999*t76999)*2.0+ \
                   ccaa2*t76940*t76942*t76996*1.0/(t77002*t77002*t77002)*(t77013*t77013)*2.0+ccaa4*t76944*t76955*t76997* \
                   1.0/(t77012*t77012*t77012)*(t77007*t77007)*2.0+ccaa3*gamma_aa[index]*gcaa*t76945*t76996*t77035*6.0- \
                   ccaa2*gamma_aa[index]*t76940*t76996*t77013*t77017*4.0-ccaa4*gamma_aa[index]*t76942*t76944*t76997*t77007* \
                   t77026*8.0-ccaa3*gcaa*t76942*t76945*t76996*t77021*t77014*6.0-ccaa3*gamma_aa[index]*gcaa*t76942*t76945* \
                   t76996*t77014*(t76940*t76996*6.0+gamma_aa[index]*gcaa*t76945*t76996*6.0)+ccaa3*gamma_aa[index]*gcaa* \
                   t76942*t76945*t76996*(t77021*t77021)*1.0/(t77006*t77006*t77006)*2.0)*2.0+1.0/(k*k*k*k)*(mu_*mu_)*1.0/ \
                   (rho_a[index]*rho_a[index]*rho_a[index])*1.0/pow(t76936,4.0/3.0)*t77037*1.0/pow(gamma_aa[index]*1.0/ \
                   (k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t77037*t77038*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t77041)/t77045+ \
                   a_2*t77042*1.0/(t77045*t77045)+a_4*t77043*1.0/(t77045*t77045*t77045*t77045)+a_8*t77044*1.0/(t77045* \
                   t77045*t77045*t77045*t77045*t77045*t77045*t77045)+a_10*t77042*t77044*1.0/pow(t77045,1.0E1)+a_3*t77041* \
                   t77042*1.0/(t77045*t77045*t77045)+a_5*t77041*t77043*1.0/(t77045*t77045*t77045*t77045*t77045)+a_6*t77042* \
                   t77043*1.0/(t77045*t77045*t77045*t77045*t77045*t77045)+a_9*t77041*t77044*1.0/(t77045*t77045*t77045* \
                   t77045*t77045*t77045*t77045*t77045*t77045)+a_11*t77041*t77042*t77044*1.0/pow(t77045,1.1E1)+a_7*t77041* \
                   t77042*t77043*1.0/(t77045*t77045*t77045*t77045*t77045*t77045*t77045)+1.0)*(1.0/4.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t77047 = pow(rho_a[index],5.0/3.0);
                double t77048 = 1.0/(tau_a[index]*tau_a[index]);
                double t77049 = 1.0/tau_a[index];
                double t77050 = C_k*t77047*t77049;
                double t77051 = t77050+1.0;
                double t77052 = t77050-1.0;
                double t77053 = 1.0/(t77051*t77051);
                double t77054 = t77052*t77052;
                double t77055 = t77054*t77054;
                double t77056 = t77055*t77055;
                double t77057 = 1.0/pow(t77051,1.1E1);
                double t77058 = 1.0/(t77051*t77051*t77051);
                double t77059 = 1.0/(t77051*t77051*t77051*t77051);
                double t77060 = 1.0/(t77051*t77051*t77051*t77051*t77051);
                double t77061 = 1.0/(t77051*t77051*t77051*t77051*t77051*t77051);
                double t77062 = 1.0/(t77051*t77051*t77051*t77051*t77051*t77051*t77051);
                double t77063 = 1.0/(t77051*t77051*t77051*t77051*t77051*t77051*t77051*t77051);
                double t77064 = 1.0/(t77051*t77051*t77051*t77051*t77051*t77051*t77051*t77051*t77051);
                double t77065 = 1.0/pow(t77051,1.0E1);
                double t77066 = 1.0/(k*k);
                double t77067 = 1.0/kp;
                double t77068 = 1.0/(rho_a[index]*rho_a[index]);
                double t77069 = rho_a[index]*2.0;
                double t77070 = 1.0/pow(t77069,2.0/3.0);
                double t77071 = gamma_aa[index]*mu_*t77070*t77066*t77067*t77068*(1.0/4.0);
                double t77072 = t77071+1.0;
                double t77073 = 1.0/t77072;
                double t77074 = kp-kp*t77073+1.0;
                double t77075 = C_k*C_k;
                double t77076 = pow(rho_a[index],7.0/3.0);
                double t77077 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t77078 = 1.0/t77051;
                double t77079 = 1.0/pow(t77051,1.2E1);
                double t77080 = pow(rho_a[index],2.0/3.0);
                double t77081 = C_k*a_1*t77047*t77048*t77078;
                double t77082 = C_k*a_2*t77052*t77053*t77047*t77048*2.0;
                double t77083 = C_k*a_10*t77052*t77047*t77056*t77065*t77048*1.0E1;
                double t77084 = C_k*a_11*t77054*t77047*t77056*t77048*t77057*1.1E1;
                double t77085 = C_k*a_3*t77054*t77047*t77048*t77058*3.0;
                double t77086 = C_k*a_4*t77052*t77054*t77047*t77048*t77059*4.0;
                double t77087 = C_k*a_5*t77060*t77055*t77047*t77048*5.0;
                double t77088 = C_k*a_6*t77052*t77061*t77055*t77047*t77048*6.0;
                double t77089 = C_k*a_7*t77062*t77054*t77055*t77047*t77048*7.0;
                double t77090 = C_k*a_8*t77052*t77054*t77063*t77055*t77047*t77048*8.0;
                double t77091 = C_k*a_9*t77064*t77047*t77056*t77048*9.0;
                double t77092 = t77081+t77090+t77082+t77091+t77083+t77084+t77085+t77086+t77087+t77088+t77089-C_k* \
                   a_1*t77052*t77053*t77047*t77048-C_k*a_2*t77054*t77047*t77048*t77058*2.0-C_k*a_4*t77060*t77055*t77047* \
                   t77048*4.0-C_k*a_8*t77064*t77047*t77056*t77048*8.0-C_k*a_10*t77054*t77047*t77056*t77048*t77057*1.0E1- \
                   C_k*a_3*t77052*t77054*t77047*t77048*t77059*3.0-C_k*a_5*t77052*t77061*t77055*t77047*t77048*5.0-C_k* \
                   a_6*t77062*t77054*t77055*t77047*t77048*6.0-C_k*a_9*t77052*t77047*t77056*t77065*t77048*9.0-C_k*a_11* \
                   t77052*t77054*t77047*t77056*t77048*t77079*1.1E1-C_k*a_7*t77052*t77054*t77063*t77055*t77047*t77048* \
                   7.0;
                double t77093 = 1.0/pow(rho_a[index],1.0/3.0);
                double t77094 = c*t77093;
                double t77095 = sqrt(t77094);
                double t77096 = pow(t77094,3.0/2.0);
                double t77097 = c*c;
                double t77098 = 1.0/pow(rho_a[index],2.0/3.0);
                double t77099 = 1.0/c0p;
                double t77100 = b1p*t77095;
                double t77101 = b3p*t77096;
                double t77102 = b4p*t77097*t77098;
                double t77103 = b2p*c*t77093;
                double t77104 = t77100+t77101+t77102+t77103;
                double t77105 = 1.0/t77104;
                double t77106 = t77105*t77099*(1.0/2.0);
                double t77107 = t77106+1.0;
                double t77108 = log(t77107);
                double t77109 = a1p*c*t77093;
                double t77110 = t77109+1.0;
                double t77111 = tau_a[index]-1.0/1.0E20;
                double t77112 = tau_a[index]*2.0;
                double t77113 = 1.0/rho_a[index];
                double t77144 = gamma_aa[index]*t77113*(1.0/4.0);
                double t77114 = t77112-t77144;
                double t77115 = gamma_aa[index]*gamma_aa[index];
                double t77116 = gcaa*gcaa;
                double t77117 = t77115*t77115;
                double t77118 = t77116*t77116;
                double t77119 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t77120 = 1.0/pow(rho_a[index],8.0/3.0);
                double t77121 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t77122 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t77123 = pow(2.0,1.0/3.0);
                double t77124 = t77123*2.0;
                double t77125 = t77124-2.0;
                double t77126 = two_13*2.0;
                double t77127 = t77126-2.0;
                double t77128 = 1.0/t77127;
                double t77129 = 1.0/c0f;
                double t77130 = b1f*t77095;
                double t77131 = b3f*t77096;
                double t77132 = b4f*t77097*t77098;
                double t77133 = b2f*c*t77093;
                double t77134 = t77130+t77131+t77132+t77133;
                double t77135 = 1.0/t77134;
                double t77136 = t77135*t77129*(1.0/2.0);
                double t77137 = t77136+1.0;
                double t77138 = log(t77137);
                double t77139 = a1f*c*t77093;
                double t77140 = t77139+1.0;
                double t77141 = c0f*t77140*t77138*2.0;
                double t77142 = c0p*t77110*t77108*2.0;
                double t77143 = ( (t77111 > 0.0) ?  1.0 : 0.0 ) ;
                double t77174 = t77114*t77048*(1.0/2.0);
                double t77145 = -t77174+t77049;
                double t77146 = t77143*t77145;
                double t77147 = 0.0 ;
                double t77148 = t77114*t77049*(1.0/2.0);
                double t77149 = t77148-1.0;
                double t77150 = t77147*t77149;
                double t77151 = t77150+t77146;
                double t77152 = gamma_aa[index]*gcaa*t77120*4.0;
                double t77153 = gamma_aa[index]*gcaa*t77121*t77115*t77116*4.0;
                double t77154 = t77122*t77115*t77116*6.0;
                double t77155 = t77117*t77118*t77119;
                double t77156 = t77152+t77153+t77154+t77155+1.0;
                double t77157 = 1.0/t77156;
                double t77158 = gamma_aa[index]*gcaa*t77120;
                double t77159 = t77158+1.0;
                double t77160 = 1.0/t77159;
                double t77161 = gamma_aa[index]*gcaa*t77120*3.0;
                double t77162 = gamma_aa[index]*gcaa*t77121*t77115*t77116;
                double t77163 = t77122*t77115*t77116*3.0;
                double t77164 = t77161+t77162+t77163+1.0;
                double t77165 = 1.0/t77164;
                double t77166 = gamma_aa[index]*gcaa*t77120*2.0;
                double t77167 = t77122*t77115*t77116;
                double t77168 = t77166+t77167+1.0;
                double t77169 = 1.0/t77168;
                double t77170 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t77171 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t77172 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t77173 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t77175 = 1.0/pow(rho_a[index],4.0/3.0);
                double t77176 = 1.0/pow(rho_a[index],5.0/3.0);
                double t77177 = 1.0/sqrt(t77094);
                double t77178 = 1.0/t77107;
                double t77179 = 1.0/(t77104*t77104);
                double t77180 = b4p*t77176*t77097*(2.0/3.0);
                double t77181 = b2p*c*t77175*(1.0/3.0);
                double t77182 = b1p*c*t77175*t77177*(1.0/6.0);
                double t77183 = b3p*c*t77175*t77095*(1.0/2.0);
                double t77184 = t77180+t77181+t77182+t77183;
                double t77185 = t77110*t77184*t77178*t77179;
                double t77186 = ccaa4*t77117*t77118*t77119*t77157;
                double t77187 = ccaa1*gamma_aa[index]*gcaa*t77120*t77160;
                double t77188 = ccaa3*gamma_aa[index]*gcaa*t77121*t77115*t77116*t77165;
                double t77189 = ccaa2*t77122*t77115*t77116*t77169;
                double t77190 = ccaa0+t77186+t77187+t77188+t77189;
                double t77191 = t77141-t77142;
                double t77192 = t77125*t77128*t77191;
                double t77193 = t77142+t77192;
                v_rho_a_tau_a_[index] = (X-1.0)*(t77074*t77092+rho_a[index]*t77074*(C_k*a_1*t77080*t77048*t77078* \
                   (5.0/3.0)-a_1*t77053*t77075*t77076*t77077*(1.0E1/3.0)+a_2*t77053*t77075*t77076*t77077*(1.0E1/3.0)+ \
                   a_1*t77052*t77075*t77058*t77076*t77077*(1.0E1/3.0)+a_10*t77056*t77065*t77075*t77076*t77077*1.5E2-a_2* \
                   t77052*t77075*t77058*t77076*t77077*(4.0E1/3.0)+a_2*t77054*t77075*t77076*t77059*t77077*1.0E1+a_3*t77052* \
                   t77075*t77058*t77076*t77077*1.0E1-a_3*t77054*t77075*t77076*t77059*t77077*3.0E1+a_4*t77061*t77055*t77075* \
                   t77076*t77077*(1.0E2/3.0)+a_4*t77054*t77075*t77076*t77059*t77077*2.0E1-a_5*t77061*t77055*t77075*t77076* \
                   t77077*(2.5E2/3.0)+a_6*t77061*t77055*t77075*t77076*t77077*5.0E1+a_8*t77056*t77065*t77075*t77076*t77077* \
                   1.2E2-a_9*t77056*t77065*t77075*t77076*t77077*2.7E2-C_k*a_1*t77052*t77053*t77080*t77048*(5.0/3.0)+C_k* \
                   a_2*t77052*t77053*t77080*t77048*(1.0E1/3.0)-C_k*a_2*t77080*t77054*t77048*t77058*(1.0E1/3.0)+C_k*a_3* \
                   t77080*t77054*t77048*t77058*5.0-C_k*a_4*t77060*t77080*t77055*t77048*(2.0E1/3.0)+C_k*a_5*t77060*t77080* \
                   t77055*t77048*(2.5E1/3.0)-C_k*a_8*t77080*t77064*t77056*t77048*(4.0E1/3.0)+C_k*a_9*t77080*t77064*t77056* \
                   t77048*1.5E1+C_k*a_10*t77052*t77080*t77056*t77065*t77048*(5.0E1/3.0)-C_k*a_10*t77080*t77054*t77056* \
                   t77048*t77057*(5.0E1/3.0)+C_k*a_11*t77080*t77054*t77056*t77048*t77057*(5.5E1/3.0)-C_k*a_3*t77052*t77080* \
                   t77054*t77048*t77059*5.0+C_k*a_4*t77052*t77080*t77054*t77048*t77059*(2.0E1/3.0)-C_k*a_5*t77052*t77061* \
                   t77080*t77055*t77048*(2.5E1/3.0)+C_k*a_6*t77052*t77061*t77080*t77055*t77048*1.0E1-C_k*a_6*t77062*t77080* \
                   t77054*t77055*t77048*1.0E1+C_k*a_7*t77062*t77080*t77054*t77055*t77048*(3.5E1/3.0)-C_k*a_9*t77052*t77080* \
                   t77056*t77065*t77048*1.5E1-a_10*t77052*t77056*t77057*t77075*t77076*t77077*(1.0E3/3.0)+a_11*t77052* \
                   t77056*t77057*t77075*t77076*t77077*(5.5E2/3.0)+a_10*t77054*t77056*t77075*t77076*t77077*t77079*(5.5E2/ \
                   3.0)-a_11*t77054*t77056*t77075*t77076*t77077*t77079*(1.21E3/3.0)+a_3*t77060*t77052*t77054*t77075*t77076* \
                   t77077*2.0E1-a_4*t77060*t77052*t77054*t77075*t77076*t77077*(1.6E2/3.0)+a_5*t77060*t77052*t77054*t77075* \
                   t77076*t77077*(1.0E2/3.0)+a_5*t77052*t77062*t77055*t77075*t77076*t77077*5.0E1-a_6*t77052*t77062*t77055* \
                   t77075*t77076*t77077*1.2E2+a_6*t77054*t77063*t77055*t77075*t77076*t77077*7.0E1+a_7*t77052*t77062*t77055* \
                   t77075*t77076*t77077*7.0E1-a_7*t77054*t77063*t77055*t77075*t77076*t77077*(4.9E2/3.0)+a_8*t77054*t77063* \
                   t77055*t77075*t77076*t77077*(2.8E2/3.0)+a_9*t77052*t77056*t77057*t77075*t77076*t77077*1.5E2+a_11*1.0/ \
                   pow(t77051,1.3E1)*t77052*t77054*t77056*t77075*t77076*t77077*2.2E2-C_k*a_11*t77052*t77080*t77054*t77056* \
                   t77048*t77079*(5.5E1/3.0)-C_k*a_7*t77052*t77080*t77054*t77063*t77055*t77048*(3.5E1/3.0)+C_k*a_8*t77052* \
                   t77080*t77054*t77063*t77055*t77048*(4.0E1/3.0)+a_7*t77052*t77054*t77055*t77064*t77075*t77076*t77077* \
                   (2.8E2/3.0)-a_8*t77052*t77054*t77055*t77064*t77075*t77076*t77077*(6.4E2/3.0)+a_9*t77052*t77054*t77055* \
                   t77064*t77075*t77076*t77077*1.2E2)-kp*rho_a[index]*1.0/(t77072*t77072)*t77092*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t77070*t77066*t77067*(1.0/2.0)+gamma_aa[index]*mu_*t77066* \
                   t77067*t77068*1.0/pow(t77069,5.0/3.0)*(1.0/3.0)))-t77151*t77190*(t77142+t77125*t77128*(t77141-c0p* \
                   t77110*t77108*2.0))+rho_a[index]*t77151*t77190*(-t77185+t77125*t77128*(t77185-(t77140*1.0/(t77134* \
                   t77134)*(b2f*c*t77175*(1.0/3.0)+b4f*t77176*t77097*(2.0/3.0)+b1f*c*t77175*t77177*(1.0/6.0)+b3f*c*t77175* \
                   t77095*(1.0/2.0)))/t77137+a1f*c*c0f*t77138*t77175*(2.0/3.0)-a1p*c*c0p*t77108*t77175*(2.0/3.0))+a1p* \
                   c*c0p*t77108*t77175*(2.0/3.0))+rho_a[index]*t77151*t77193*(ccaa1*gamma_aa[index]*gcaa*t77160*t77171* \
                   (8.0/3.0)+ccaa2*t77115*t77116*t77170*t77169*(1.6E1/3.0)+ccaa4*t77117*t77118*t77173*t77157*(3.2E1/3.0) \
                   -ccaa1*t77115*t77116*t77170*1.0/(t77159*t77159)*(8.0/3.0)-ccaa2*t77122*t77115*t77116*1.0/(t77168*t77168) \
                   *(gamma_aa[index]*gcaa*t77171*(1.6E1/3.0)+t77115*t77116*t77170*(1.6E1/3.0))-ccaa4*t77117*t77118*t77119* \
                   1.0/(t77156*t77156)*(gamma_aa[index]*gcaa*t77171*(3.2E1/3.0)+t77115*t77116*t77170*3.2E1+t77117*t77118* \
                   t77173*(3.2E1/3.0)+gamma_aa[index]*gcaa*t77115*t77116*t77172*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t77115* \
                   t77116*t77172*t77165*8.0-ccaa3*gamma_aa[index]*gcaa*t77121*t77115*t77116*1.0/(t77164*t77164)*(gamma_aa[index]* \
                   gcaa*t77171*8.0+t77115*t77116*t77170*1.6E1+gamma_aa[index]*gcaa*t77115*t77116*t77172*8.0))+gamma_aa[index]* \
                   t77113*t77143*t77190*t77048*t77193*(1.0/8.0)-gamma_aa[index]*t77113*t77190*t77147*t77049*t77193*(1.0/ \
                   8.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t77195 = 1.0/pow(rho_a[index],1.0/3.0);
                double t77196 = c*t77195;
                double t77197 = sqrt(t77196);
                double t77198 = pow(t77196,3.0/2.0);
                double t77199 = c*c;
                double t77200 = 1.0/pow(rho_a[index],2.0/3.0);
                double t77201 = 1.0/c0p;
                double t77202 = b1p*t77197;
                double t77203 = b3p*t77198;
                double t77204 = b4p*t77200*t77199;
                double t77205 = b2p*c*t77195;
                double t77206 = t77202+t77203+t77204+t77205;
                double t77207 = 1.0/t77206;
                double t77208 = t77201*t77207*(1.0/2.0);
                double t77209 = t77208+1.0;
                double t77210 = log(t77209);
                double t77211 = a1p*c*t77195;
                double t77212 = t77211+1.0;
                double t77213 = 1.0/tau_a[index];
                double t77214 = tau_a[index]*2.0;
                double t77215 = 1.0/rho_a[index];
                double t77219 = gamma_aa[index]*t77215*(1.0/4.0);
                double t77216 = t77214-t77219;
                double t77217 = tau_a[index]-1.0/1.0E20;
                double t77218 = 1.0/(tau_a[index]*tau_a[index]);
                double t77220 = gamma_aa[index]*gamma_aa[index];
                double t77221 = gcaa*gcaa;
                double t77222 = t77220*t77220;
                double t77223 = t77221*t77221;
                double t77224 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t77225 = 1.0/pow(rho_a[index],8.0/3.0);
                double t77226 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t77227 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t77228 = C_k*C_k;
                double t77229 = pow(rho_a[index],1.0E1/3.0);
                double t77230 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t77231 = pow(rho_a[index],5.0/3.0);
                double t77232 = C_k*t77213*t77231;
                double t77233 = t77232+1.0;
                double t77234 = 1.0/(t77233*t77233);
                double t77235 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t77236 = t77232-1.0;
                double t77237 = t77236*t77236;
                double t77238 = t77237*t77237;
                double t77239 = t77238*t77238;
                double t77240 = 1.0/pow(t77233,1.1E1);
                double t77241 = 1.0/pow(t77233,1.2E1);
                double t77242 = 1.0/(t77233*t77233*t77233*t77233);
                double t77243 = 1.0/(t77233*t77233*t77233*t77233*t77233);
                double t77244 = 1.0/(t77233*t77233*t77233*t77233*t77233*t77233);
                double t77245 = 1.0/(t77233*t77233*t77233*t77233*t77233*t77233*t77233);
                double t77246 = 1.0/(t77233*t77233*t77233*t77233*t77233*t77233*t77233*t77233);
                double t77247 = 1.0/(t77233*t77233*t77233*t77233*t77233*t77233*t77233*t77233*t77233);
                double t77248 = 1.0/pow(t77233,1.0E1);
                double t77249 = 1.0/(t77233*t77233*t77233);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t77230*t77234*t77228* \
                   t77229*-2.0+a_2*t77230*t77234*t77228*t77229*2.0+(C_k*a_1*t77231*t77235*2.0)/t77233+a_1*t77230*t77236* \
                   t77228*t77229*t77249*2.0+a_10*t77230*t77228*t77229*t77239*t77248*9.0E1+a_2*t77230*t77242*t77228*t77237* \
                   t77229*6.0-a_2*t77230*t77236*t77228*t77229*t77249*8.0-a_3*t77230*t77242*t77228*t77237*t77229*1.8E1+ \
                   a_3*t77230*t77236*t77228*t77229*t77249*6.0+a_4*t77230*t77242*t77228*t77237*t77229*1.2E1+a_4*t77230* \
                   t77244*t77228*t77229*t77238*2.0E1-a_5*t77230*t77244*t77228*t77229*t77238*5.0E1+a_6*t77230*t77244*t77228* \
                   t77229*t77238*3.0E1+a_8*t77230*t77228*t77229*t77239*t77248*7.2E1-a_9*t77230*t77228*t77229*t77239*t77248* \
                   1.62E2-C_k*a_1*t77231*t77234*t77235*t77236*2.0+C_k*a_2*t77231*t77234*t77235*t77236*4.0-C_k*a_2*t77231* \
                   t77235*t77237*t77249*4.0+C_k*a_3*t77231*t77235*t77237*t77249*6.0-C_k*a_4*t77231*t77243*t77235*t77238* \
                   8.0+C_k*a_5*t77231*t77243*t77235*t77238*1.0E1-C_k*a_8*t77231*t77235*t77247*t77239*1.6E1+C_k*a_9*t77231* \
                   t77235*t77247*t77239*1.8E1-C_k*a_10*t77231*t77240*t77235*t77237*t77239*2.0E1+C_k*a_11*t77231*t77240* \
                   t77235*t77237*t77239*2.2E1+C_k*a_10*t77231*t77235*t77236*t77239*t77248*2.0E1-C_k*a_3*t77231*t77242* \
                   t77235*t77236*t77237*6.0+C_k*a_4*t77231*t77242*t77235*t77236*t77237*8.0-C_k*a_5*t77231*t77235*t77244* \
                   t77236*t77238*1.0E1+C_k*a_6*t77231*t77235*t77244*t77236*t77238*1.2E1-C_k*a_6*t77231*t77235*t77245* \
                   t77237*t77238*1.2E1+C_k*a_7*t77231*t77235*t77245*t77237*t77238*1.4E1-C_k*a_9*t77231*t77235*t77236* \
                   t77239*t77248*1.8E1-a_10*t77230*t77240*t77236*t77228*t77229*t77239*2.0E2+a_11*t77230*t77240*t77236* \
                   t77228*t77229*t77239*1.1E2+a_10*t77230*t77241*t77228*t77237*t77229*t77239*1.1E2-a_11*t77230*t77241* \
                   t77228*t77237*t77229*t77239*2.42E2+a_3*t77230*t77243*t77236*t77228*t77237*t77229*1.2E1-a_4*t77230* \
                   t77243*t77236*t77228*t77237*t77229*3.2E1+a_5*t77230*t77243*t77236*t77228*t77237*t77229*2.0E1+a_5*t77230* \
                   t77236*t77245*t77228*t77229*t77238*3.0E1-a_6*t77230*t77236*t77245*t77228*t77229*t77238*7.2E1+a_6*t77230* \
                   t77228*t77237*t77246*t77229*t77238*4.2E1+a_7*t77230*t77236*t77245*t77228*t77229*t77238*4.2E1-a_7*t77230* \
                   t77228*t77237*t77246*t77229*t77238*9.8E1+a_8*t77230*t77228*t77237*t77246*t77229*t77238*5.6E1+a_9*t77230* \
                   t77240*t77236*t77228*t77229*t77239*9.0E1+a_11*t77230*1.0/pow(t77233,1.3E1)*t77236*t77228*t77237*t77229* \
                   t77239*1.32E2-C_k*a_11*t77231*t77241*t77235*t77236*t77237*t77239*2.2E1-C_k*a_7*t77231*t77235*t77236* \
                   t77237*t77246*t77238*1.4E1+C_k*a_8*t77231*t77235*t77236*t77237*t77246*t77238*1.6E1+a_7*t77230*t77236* \
                   t77228*t77237*t77229*t77238*t77247*5.6E1-a_8*t77230*t77236*t77228*t77237*t77229*t77238*t77247*1.28E2+ \
                   a_9*t77230*t77236*t77228*t77237*t77229*t77238*t77247*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t77197+b3f*t77198+b2f*c*t77195+b4f*t77200*t77199))+1.0)*(a1f*c*t77195+ \
                   1.0)*2.0-c0p*t77210*t77212*2.0))/(two_13*2.0-2.0)+c0p*t77210*t77212*2.0)*( 0.0 - ( (t77217 > 0.0)  \
                   ? 1.0*(t77218*2.0-t77216*t77235) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t77220*t77221*t77227)/(gamma_aa[index]* \
                   gcaa*t77225*2.0+t77220*t77221*t77227+1.0)+(ccaa1*gamma_aa[index]*gcaa*t77225)/(gamma_aa[index]*gcaa* \
                   t77225+1.0)+(ccaa4*t77222*t77223*t77224)/(gamma_aa[index]*gcaa*t77225*4.0+t77220*t77221*t77227*6.0+ \
                   t77222*t77223*t77224+gamma_aa[index]*gcaa*t77220*t77221*t77226*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
                   t77220*t77221*t77226)/(gamma_aa[index]*gcaa*t77225*3.0+t77220*t77221*t77227*3.0+gamma_aa[index]*gcaa* \
                   t77220*t77221*t77226+1.0));
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t77251 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t77252 = c*t77251;
                    double t77253 = sqrt(t77252);
                    double t77254 = pow(t77252,3.0/2.0);
                    double t77255 = c*c;
                    double t77256 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t77257 = 1.0/c0p;
                    double t77258 = b1p*t77253;
                    double t77259 = b3p*t77254;
                    double t77260 = b4p*t77255*t77256;
                    double t77261 = b2p*c*t77251;
                    double t77262 = t77260+t77261+t77258+t77259;
                    double t77263 = 1.0/t77262;
                    double t77264 = t77263*t77257*(1.0/2.0);
                    double t77265 = t77264+1.0;
                    double t77266 = log(t77265);
                    double t77267 = a1p*c*t77251;
                    double t77268 = t77267+1.0;
                    double t77269 = tau_a[index]-1.0/1.0E20;
                    double t77270 = 1.0/tau_a[index];
                    double t77271 = tau_a[index]*2.0;
                    double t77272 = 1.0/rho_a[index];
                    double t77273 = t77271-gamma_aa[index]*t77272*(1.0/4.0);
                    double t77274 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t77275 = gamma_aa[index]*gamma_aa[index];
                    double t77276 = gcaa*gcaa;
                    double t77277 = t77276*t77276;
                    double t77278 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t77279 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t77280 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t77281 = gamma_aa[index]*gcaa*t77274;
                    double t77282 = t77281+1.0;
                    double t77283 = gamma_aa[index]*gcaa*t77274*3.0;
                    double t77284 = gamma_aa[index]*gcaa*t77280*t77275*t77276;
                    double t77285 = t77275*t77276*t77279*3.0;
                    double t77286 = t77283+t77284+t77285+1.0;
                    double t77287 = t77275*t77275;
                    double t77288 = gamma_aa[index]*gcaa*t77274*4.0;
                    double t77289 = gamma_aa[index]*gcaa*t77280*t77275*t77276*4.0;
                    double t77290 = t77275*t77276*t77279*6.0;
                    double t77291 = t77277*t77278*t77287;
                    double t77292 = t77290+t77291+t77288+t77289+1.0;
                    double t77293 = gamma_aa[index]*gcaa*t77274*2.0;
                    double t77294 = t77275*t77276*t77279;
                    double t77295 = t77293+t77294+1.0;
                    double t77296 = pow(2.0,1.0/3.0);
                    double t77297 = t77296*2.0;
                    double t77298 = t77297-2.0;
                    double t77299 = two_13*2.0;
                    double t77300 = t77299-2.0;
                    double t77301 = 1.0/t77300;
                    double t77302 = 1.0/c0f;
                    double t77303 = b1f*t77253;
                    double t77304 = b3f*t77254;
                    double t77305 = b4f*t77255*t77256;
                    double t77306 = b2f*c*t77251;
                    double t77307 = t77303+t77304+t77305+t77306;
                    double t77308 = 1.0/t77307;
                    double t77309 = t77302*t77308*(1.0/2.0);
                    double t77310 = t77309+1.0;
                    double t77311 = log(t77310);
                    double t77312 = a1f*c*t77251;
                    double t77313 = t77312+1.0;
                    double t77314 = c0f*t77311*t77313*2.0;
                    double t77315 = c0p*t77266*t77268*2.0;
                    double t77316 = 0.0 ;
                    double t77317 = 1.0/(tau_a[index]*tau_a[index]);
                    double t77318 = ( (t77269 > 0.0) ?  1.0 : 0.0 ) ;
                    double t77319 = 1.0/t77292;
                    double t77320 = 1.0/t77282;
                    double t77321 = 1.0/t77286;
                    double t77322 = 1.0/t77295;
                    double t77323 = 1.0/(k*k);
                    double t77324 = rho_a[index]*2.0;
                    double t77325 = 1.0/pow(t77324,2.0/3.0);
                    double t77326 = pow(rho_a[index],5.0/3.0);
                    double t77327 = C_k*t77270*t77326;
                    double t77328 = t77327+1.0;
                    double t77329 = t77327-1.0;
                    double t77330 = 1.0/(t77328*t77328);
                    double t77331 = t77329*t77329;
                    double t77332 = t77331*t77331;
                    double t77333 = t77332*t77332;
                    double t77334 = 1.0/pow(t77328,1.1E1);
                    double t77335 = 1.0/(t77328*t77328*t77328);
                    double t77336 = 1.0/(t77328*t77328*t77328*t77328);
                    double t77337 = 1.0/(t77328*t77328*t77328*t77328*t77328);
                    double t77338 = 1.0/(t77328*t77328*t77328*t77328*t77328*t77328);
                    double t77339 = 1.0/(t77328*t77328*t77328*t77328*t77328*t77328*t77328);
                    double t77340 = 1.0/(t77328*t77328*t77328*t77328*t77328*t77328*t77328*t77328);
                    double t77341 = 1.0/(t77328*t77328*t77328*t77328*t77328*t77328*t77328*t77328*t77328);
                    double t77342 = 1.0/pow(t77328,1.0E1);
                    v_gamma_aa_tau_a_[index] = rho_a[index]*(t77315+t77301*t77298*(t77314-t77315))*(t77270*t77316*t77272* \
                       (1.0/8.0)-t77272*t77317*t77318*(1.0/8.0))*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t77320*t77274+ccaa2*t77322* \
                       t77275*t77276*t77279+ccaa4*t77319*t77277*t77278*t77287+ccaa3*gamma_aa[index]*gcaa*t77321*t77280*t77275* \
                       t77276)-rho_a[index]*(t77315+t77301*t77298*(t77314-c0p*t77266*t77268*2.0))*(t77316*(t77270*t77273* \
                       (1.0/2.0)-1.0)+t77318*(t77270-t77317*t77273*(1.0/2.0)))*(ccaa1*gcaa*t77320*t77274+ccaa2*gamma_aa[index]* \
                       t77322*t77276*t77279*2.0-ccaa1*gamma_aa[index]*1.0/(t77282*t77282)*t77276*t77279-ccaa2*t77275*t77276* \
                       1.0/(t77295*t77295)*t77279*(gcaa*t77274*2.0+gamma_aa[index]*t77276*t77279*2.0)-ccaa4*1.0/(t77292*t77292) \
                       *t77277*t77278*t77287*(gcaa*t77274*4.0+gamma_aa[index]*t77276*t77279*1.2E1+gamma_aa[index]*t77275* \
                       t77277*t77278*4.0+gcaa*t77280*t77275*t77276*1.2E1)+ccaa4*gamma_aa[index]*t77319*t77275*t77277*t77278* \
                       4.0+ccaa3*gcaa*t77321*t77280*t77275*t77276*3.0-ccaa3*gamma_aa[index]*gcaa*t77280*t77275*t77276*1.0/ \
                       (t77286*t77286)*(gcaa*t77274*3.0+gamma_aa[index]*t77276*t77279*6.0+gcaa*t77280*t77275*t77276*3.0)) \
                       +mu_*t77323*t77325*t77272*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t77323*t77325* \
                       (1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t77317*t77326)/t77328-C_k*a_1*t77330*t77317*t77326*t77329- \
                       C_k*a_2*t77331*t77317*t77326*t77335*2.0+C_k*a_2*t77330*t77317*t77326*t77329*2.0+C_k*a_3*t77331*t77317* \
                       t77326*t77335*3.0-C_k*a_4*t77332*t77317*t77326*t77337*4.0+C_k*a_5*t77332*t77317*t77326*t77337*5.0- \
                       C_k*a_8*t77341*t77333*t77317*t77326*8.0+C_k*a_9*t77341*t77333*t77317*t77326*9.0-C_k*a_10*t77331*t77333* \
                       t77334*t77317*t77326*1.0E1+C_k*a_11*t77331*t77333*t77334*t77317*t77326*1.1E1+C_k*a_10*t77333*t77342* \
                       t77317*t77326*t77329*1.0E1-C_k*a_3*t77331*t77317*t77326*t77336*t77329*3.0+C_k*a_4*t77331*t77317*t77326* \
                       t77336*t77329*4.0-C_k*a_5*t77332*t77317*t77326*t77329*t77338*5.0-C_k*a_6*t77331*t77332*t77317*t77326* \
                       t77339*6.0+C_k*a_6*t77332*t77317*t77326*t77329*t77338*6.0+C_k*a_7*t77331*t77332*t77317*t77326*t77339* \
                       7.0-C_k*a_9*t77333*t77342*t77317*t77326*t77329*9.0-C_k*a_11*t77331*t77333*t77317*t77326*1.0/pow(t77328,1.2E1) \
                       *t77329*1.1E1-C_k*a_7*t77331*t77340*t77332*t77317*t77326*t77329*7.0+C_k*a_8*t77331*t77340*t77332*t77317* \
                       t77326*t77329*8.0)*(1.0/4.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void M05_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t69253 = pow(rho_a[index],5.0/3.0);
            double t69254 = 1.0/tau_a[index];
            double t69255 = C_k*t69253*t69254;
            double t69256 = t69255-1.0;
            double t69257 = t69256*t69256;
            double t69258 = t69257*t69257;
            double t69259 = t69258*t69258;
            double t69260 = t69255+1.0;
            double t69261 = 1.0/(k*k);
            double t69262 = 1.0/kp;
            double t69263 = pow(rho_b[index],5.0/3.0);
            double t69264 = 1.0/tau_b[index];
            double t69265 = C_k*t69263*t69264;
            double t69266 = t69265-1.0;
            double t69267 = t69266*t69266;
            double t69268 = t69267*t69267;
            double t69269 = t69268*t69268;
            double t69270 = t69265+1.0;
            double t69271 = 1.0/pow(rho_a[index],1.0/3.0);
            double t69272 = c*t69271;
            double t69273 = sqrt(t69272);
            double t69274 = pow(t69272,3.0/2.0);
            double t69275 = c*c;
            double t69276 = 1.0/pow(rho_a[index],2.0/3.0);
            double t69277 = 1.0/c0p;
            double t69278 = b1p*t69273;
            double t69279 = b3p*t69274;
            double t69280 = b4p*t69275*t69276;
            double t69281 = b2p*c*t69271;
            double t69282 = t69280+t69281+t69278+t69279;
            double t69283 = 1.0/t69282;
            double t69284 = t69283*t69277*(1.0/2.0);
            double t69285 = t69284+1.0;
            double t69286 = log(t69285);
            double t69287 = a1p*c*t69271;
            double t69288 = t69287+1.0;
            double t69289 = pow(2.0,1.0/3.0);
            double t69290 = t69289*2.0;
            double t69291 = t69290-2.0;
            double t69292 = two_13*2.0;
            double t69293 = t69292-2.0;
            double t69294 = 1.0/t69293;
            double t69295 = 1.0/c0f;
            double t69296 = 1.0/pow(rho_b[index],1.0/3.0);
            double t69297 = c*t69296;
            double t69298 = sqrt(t69297);
            double t69299 = pow(t69297,3.0/2.0);
            double t69300 = 1.0/pow(rho_b[index],2.0/3.0);
            double t69301 = b1p*t69298;
            double t69302 = b3p*t69299;
            double t69303 = b4p*t69300*t69275;
            double t69304 = b2p*c*t69296;
            double t69305 = t69301+t69302+t69303+t69304;
            double t69306 = 1.0/t69305;
            double t69307 = t69306*t69277*(1.0/2.0);
            double t69308 = t69307+1.0;
            double t69309 = log(t69308);
            double t69310 = a1p*c*t69296;
            double t69311 = t69310+1.0;
            double t69312 = c0p*t69311*t69309*2.0;
            double t69313 = rho_a[index]+rho_b[index];
            double t69314 = 1.0/pow(t69313,1.0/3.0);
            double t69315 = c*t69314;
            double t69316 = sqrt(t69315);
            double t69317 = pow(t69315,3.0/2.0);
            double t69318 = 1.0/pow(t69313,2.0/3.0);
            double t69319 = b1p*t69316;
            double t69320 = b3p*t69317;
            double t69321 = b4p*t69318*t69275;
            double t69322 = b2p*c*t69314;
            double t69323 = t69320+t69321+t69322+t69319;
            double t69324 = 1.0/t69323;
            double t69325 = t69324*t69277*(1.0/2.0);
            double t69326 = t69325+1.0;
            double t69327 = log(t69326);
            double t69328 = a1p*c*t69314;
            double t69329 = t69328+1.0;
            double t69330 = c0p*t69327*t69329*2.0;
            double t69331 = rho_a[index]-rho_b[index];
            double t69332 = t69331*t69331;
            double t69333 = 1.0/t69313;
            double t69334 = t69331*t69333;
            double t69335 = 1.0/(t69313*t69313*t69313*t69313);
            double t69336 = t69332*t69332;
            double t69337 = t69334+1.0;
            double t69338 = pow(t69337,4.0/3.0);
            double t69339 = -t69334+1.0;
            double t69340 = pow(t69339,4.0/3.0);
            double t69341 = t69340+t69338-2.0;
            double t69344 = 1.0/pow(rho_a[index],8.0/3.0);
            double t69345 = gamma_aa[index]*t69344*(1.0/2.0);
            double t69346 = 1.0/pow(rho_b[index],8.0/3.0);
            double t69347 = gamma_bb[index]*t69346*(1.0/2.0);
            double t69342 = t69345+t69347;
            double t69343 = gcab*gcab;
            double t69348 = t69342*t69342;
            double t69349 = t69343*t69343;
            double t69350 = t69348*t69348;
            double t69351 = c0p*t69286*t69288*2.0;
            double t69352 = b1f*t69273;
            double t69353 = b3f*t69274;
            double t69354 = b4f*t69275*t69276;
            double t69355 = b2f*c*t69271;
            double t69356 = t69352+t69353+t69354+t69355;
            double t69357 = 1.0/t69356;
            double t69358 = t69357*t69295*(1.0/2.0);
            double t69359 = t69358+1.0;
            double t69360 = log(t69359);
            double t69361 = a1f*c*t69271;
            double t69362 = t69361+1.0;
            double t69363 = t69351-c0f*t69360*t69362*2.0;
            double t69364 = t69351-t69291*t69363*t69294;
            double t69365 = gamma_aa[index]*gamma_aa[index];
            double t69366 = gcaa*gcaa;
            double t69367 = t69365*t69365;
            double t69368 = t69366*t69366;
            double t69369 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t69370 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t69371 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t69372 = b1f*t69298;
            double t69373 = b3f*t69299;
            double t69374 = b4f*t69300*t69275;
            double t69375 = b2f*c*t69296;
            double t69376 = t69372+t69373+t69374+t69375;
            double t69377 = 1.0/t69376;
            double t69378 = t69295*t69377*(1.0/2.0);
            double t69379 = t69378+1.0;
            double t69380 = log(t69379);
            double t69381 = a1f*c*t69296;
            double t69382 = t69381+1.0;
            double t69383 = t69312-c0f*t69380*t69382*2.0;
            double t69384 = t69312-t69291*t69383*t69294;
            double t69385 = gamma_bb[index]*gamma_bb[index];
            double t69386 = t69385*t69385;
            double t69387 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t69388 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t69389 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = (rho_a[index]*t69364+rho_b[index]*t69384-t69313*(t69330-t69341*t69335*t69336* \
               t69294*(t69330-c0f*log((t69295*(1.0/2.0))/(b1f*t69316+b3f*t69317+b2f*c*t69314+b4f*t69318*t69275)+1.0) \
               *(a1f*c*t69314+1.0)*2.0)+(Aa*t69341*t69294*log((1.0/2.0)/(Aa*(b1a*t69316+b3a*t69317+b2a*c*t69314+b4a* \
               t69318*t69275))+1.0)*(t69335*t69336-1.0)*(a1a*c*t69314+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t69350*t69349) \
               /(gcab*t69342*4.0+t69350*t69349+t69343*t69348*6.0+gcab*t69342*t69343*t69348*4.0+1.0)+(ccab1*gcab*t69342) \
               /(gcab*t69342+1.0)+(ccab2*t69343*t69348)/(gcab*t69342*2.0+t69343*t69348+1.0)+(ccab3*gcab*t69342*t69343* \
               t69348)/(gcab*t69342*3.0+t69343*t69348*3.0+gcab*t69342*t69343*t69348+1.0))-(rho_a[index]*(kp-kp/(gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index])*t69261*t69262*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0)+1.0) \
               +1.0)*((a_1*t69256)/t69260+a_2*1.0/(t69260*t69260)*t69257+a_4*1.0/(t69260*t69260*t69260*t69260)*t69258+ \
               a_8*1.0/(t69260*t69260*t69260*t69260*t69260*t69260*t69260*t69260)*t69259+a_10*1.0/pow(t69260,1.0E1) \
               *t69257*t69259+a_3*1.0/(t69260*t69260*t69260)*t69256*t69257+a_5*1.0/(t69260*t69260*t69260*t69260*t69260) \
               *t69256*t69258+a_6*1.0/(t69260*t69260*t69260*t69260*t69260*t69260)*t69257*t69258+a_9*1.0/(t69260*t69260* \
               t69260*t69260*t69260*t69260*t69260*t69260*t69260)*t69256*t69259+a_11*1.0/pow(t69260,1.1E1)*t69256* \
               t69257*t69259+a_7*1.0/(t69260*t69260*t69260*t69260*t69260*t69260*t69260)*t69256*t69257*t69258+1.0) \
               +rho_b[index]*(kp-kp/(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t69261*t69262*1.0/pow(rho_b[index]* \
               2.0,2.0/3.0)*(1.0/4.0)+1.0)+1.0)*((a_1*t69266)/t69270+a_2*1.0/(t69270*t69270)*t69267+a_4*1.0/(t69270* \
               t69270*t69270*t69270)*t69268+a_8*1.0/(t69270*t69270*t69270*t69270*t69270*t69270*t69270*t69270)*t69269+ \
               a_10*1.0/pow(t69270,1.0E1)*t69267*t69269+a_3*1.0/(t69270*t69270*t69270)*t69266*t69267+a_5*1.0/(t69270* \
               t69270*t69270*t69270*t69270)*t69266*t69268+a_6*1.0/(t69270*t69270*t69270*t69270*t69270*t69270)*t69267* \
               t69268+a_9*1.0/(t69270*t69270*t69270*t69270*t69270*t69270*t69270*t69270*t69270)*t69266*t69269+a_11* \
               1.0/pow(t69270,1.1E1)*t69266*t69267*t69269+a_7*1.0/(t69270*t69270*t69270*t69270*t69270*t69270*t69270) \
               *t69266*t69267*t69268+1.0))*(X-1.0)-rho_a[index]*t69364*( ( (tau_a[index]-1.0/1.0E20 > 0.0) ? 1.0* \
               (t69254*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(ccaa0+ \
               (ccaa2*t69371*t69365*t69366)/(gamma_aa[index]*gcaa*t69344*2.0+t69371*t69365*t69366+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t69344)/(gamma_aa[index]*gcaa*t69344+1.0)+(ccaa4*t69367*t69368*t69369)/(gamma_aa[index]*gcaa* \
               t69344*4.0+t69371*t69365*t69366*6.0+t69367*t69368*t69369+gamma_aa[index]*gcaa*t69370*t69365*t69366* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t69370*t69365*t69366)/(gamma_aa[index]*gcaa*t69344*3.0+t69371* \
               t69365*t69366*3.0+gamma_aa[index]*gcaa*t69370*t69365*t69366+1.0))-rho_b[index]*t69384*( ( (tau_b[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t69264*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t69366*t69385*t69389)/(gamma_bb[index]*gcaa*t69346*2.0+t69366*t69385* \
               t69389+1.0)+(ccaa1*gamma_bb[index]*gcaa*t69346)/(gamma_bb[index]*gcaa*t69346+1.0)+(ccaa4*t69368*t69386* \
               t69387)/(gamma_bb[index]*gcaa*t69346*4.0+t69366*t69385*t69389*6.0+t69368*t69386*t69387+gamma_bb[index]* \
               gcaa*t69366*t69385*t69388*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t69366*t69385*t69388)/(gamma_bb[index]* \
               gcaa*t69346*3.0+t69366*t69385*t69389*3.0+gamma_bb[index]*gcaa*t69366*t69385*t69388+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t74760 = pow(rho_a[index],5.0/3.0);
            double t74761 = 1.0/tau_a[index];
            double t74762 = C_k*t74760*t74761;
            double t74763 = t74762-1.0;
            double t74764 = t74763*t74763;
            double t74765 = t74764*t74764;
            double t74766 = t74765*t74765;
            double t74767 = t74762+1.0;
            double t74768 = 1.0/pow(rho_a[index],1.0/3.0);
            double t74769 = c*t74768;
            double t74770 = sqrt(t74769);
            double t74771 = pow(t74769,3.0/2.0);
            double t74772 = c*c;
            double t74773 = 1.0/pow(rho_a[index],2.0/3.0);
            double t74774 = 1.0/c0p;
            double t74775 = b1p*t74770;
            double t74776 = b3p*t74771;
            double t74777 = b4p*t74772*t74773;
            double t74778 = b2p*c*t74768;
            double t74779 = t74775+t74776+t74777+t74778;
            double t74780 = 1.0/t74779;
            double t74781 = t74780*t74774*(1.0/2.0);
            double t74782 = t74781+1.0;
            double t74783 = log(t74782);
            double t74784 = a1p*c*t74768;
            double t74785 = t74784+1.0;
            double t74786 = gamma_aa[index]*gamma_aa[index];
            double t74787 = gcaa*gcaa;
            double t74788 = t74786*t74786;
            double t74789 = t74787*t74787;
            double t74790 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t74791 = 1.0/pow(rho_a[index],8.0/3.0);
            double t74792 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t74793 = 1.0/pow(rho_a[index],1.6E1/3.0);
            functional_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
               rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t74763)/t74767+a_2*t74764* \
               1.0/(t74767*t74767)+a_4*t74765*1.0/(t74767*t74767*t74767*t74767)+a_8*t74766*1.0/(t74767*t74767*t74767* \
               t74767*t74767*t74767*t74767*t74767)+a_10*t74764*t74766*1.0/pow(t74767,1.0E1)+a_3*t74763*t74764*1.0/ \
               (t74767*t74767*t74767)+a_5*t74763*t74765*1.0/(t74767*t74767*t74767*t74767*t74767)+a_6*t74764*t74765* \
               1.0/(t74767*t74767*t74767*t74767*t74767*t74767)+a_9*t74763*t74766*1.0/(t74767*t74767*t74767*t74767* \
               t74767*t74767*t74767*t74767*t74767)+a_11*t74763*t74764*t74766*1.0/pow(t74767,1.1E1)+a_7*t74763*t74764* \
               t74765*1.0/(t74767*t74767*t74767*t74767*t74767*t74767*t74767)+1.0)-rho_a[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t74770+b3f*t74771+b2f*c*t74768+b4f*t74772*t74773))+1.0)*(a1f* \
               c*t74768+1.0)*2.0-c0p*t74783*t74785*2.0))/(two_13*2.0-2.0)+c0p*t74783*t74785*2.0)*( ( (tau_a[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t74761*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t74793*t74786*t74787)/(gamma_aa[index]*gcaa*t74791*2.0+t74793*t74786* \
               t74787+1.0)+(ccaa1*gamma_aa[index]*gcaa*t74791)/(gamma_aa[index]*gcaa*t74791+1.0)+(ccaa4*t74790*t74788* \
               t74789)/(gamma_aa[index]*gcaa*t74791*4.0+t74793*t74786*t74787*6.0+t74790*t74788*t74789+gamma_aa[index]* \
               gcaa*t74792*t74786*t74787*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t74792*t74786*t74787)/(gamma_aa[index]* \
               gcaa*t74791*3.0+t74793*t74786*t74787*3.0+gamma_aa[index]*gcaa*t74792*t74786*t74787+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t73633 = pow(rho_b[index],5.0/3.0);
            double t73634 = 1.0/tau_b[index];
            double t73635 = C_k*t73633*t73634;
            double t73636 = t73635-1.0;
            double t73637 = t73636*t73636;
            double t73638 = t73637*t73637;
            double t73639 = t73638*t73638;
            double t73640 = t73635+1.0;
            double t73641 = 1.0/pow(rho_b[index],1.0/3.0);
            double t73642 = c*t73641;
            double t73643 = sqrt(t73642);
            double t73644 = pow(t73642,3.0/2.0);
            double t73645 = c*c;
            double t73646 = 1.0/pow(rho_b[index],2.0/3.0);
            double t73647 = 1.0/c0p;
            double t73648 = b1p*t73643;
            double t73649 = b3p*t73644;
            double t73650 = b4p*t73645*t73646;
            double t73651 = b2p*c*t73641;
            double t73652 = t73650+t73651+t73648+t73649;
            double t73653 = 1.0/t73652;
            double t73654 = t73653*t73647*(1.0/2.0);
            double t73655 = t73654+1.0;
            double t73656 = log(t73655);
            double t73657 = a1p*c*t73641;
            double t73658 = t73657+1.0;
            double t73659 = gamma_bb[index]*gamma_bb[index];
            double t73660 = gcaa*gcaa;
            double t73661 = t73659*t73659;
            double t73662 = t73660*t73660;
            double t73663 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t73664 = 1.0/pow(rho_b[index],8.0/3.0);
            double t73665 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t73666 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
               rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t73636)/t73640+a_2*1.0/ \
               (t73640*t73640)*t73637+a_4*1.0/(t73640*t73640*t73640*t73640)*t73638+a_8*1.0/(t73640*t73640*t73640* \
               t73640*t73640*t73640*t73640*t73640)*t73639+a_10*1.0/pow(t73640,1.0E1)*t73637*t73639+a_3*1.0/(t73640* \
               t73640*t73640)*t73636*t73637+a_5*1.0/(t73640*t73640*t73640*t73640*t73640)*t73636*t73638+a_6*1.0/(t73640* \
               t73640*t73640*t73640*t73640*t73640)*t73637*t73638+a_9*1.0/(t73640*t73640*t73640*t73640*t73640*t73640* \
               t73640*t73640*t73640)*t73636*t73639+a_11*1.0/pow(t73640,1.1E1)*t73636*t73637*t73639+a_7*1.0/(t73640* \
               t73640*t73640*t73640*t73640*t73640*t73640)*t73636*t73637*t73638+1.0)-rho_b[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t73643+b3f*t73644+b2f*c*t73641+b4f*t73645*t73646))+1.0)*(a1f* \
               c*t73641+1.0)*2.0-c0p*t73656*t73658*2.0))/(two_13*2.0-2.0)+c0p*t73656*t73658*2.0)*( ( (tau_b[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t73634*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t73660*t73666*t73659)/(gamma_bb[index]*gcaa*t73664*2.0+t73660*t73666* \
               t73659+1.0)+(ccaa1*gamma_bb[index]*gcaa*t73664)/(gamma_bb[index]*gcaa*t73664+1.0)+(ccaa4*t73661*t73662* \
               t73663)/(gamma_bb[index]*gcaa*t73664*4.0+t73661*t73662*t73663+t73660*t73666*t73659*6.0+gamma_bb[index]* \
               gcaa*t73660*t73665*t73659*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t73660*t73665*t73659)/(gamma_bb[index]* \
               gcaa*t73664*3.0+t73660*t73666*t73659*3.0+gamma_bb[index]*gcaa*t73660*t73665*t73659+1.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t69391 = 1.0/pow(rho_a[index],1.0/3.0);
            double t69392 = c*t69391;
            double t69393 = sqrt(t69392);
            double t69394 = pow(t69392,3.0/2.0);
            double t69395 = c*c;
            double t69396 = 1.0/pow(rho_a[index],2.0/3.0);
            double t69397 = 1.0/c0p;
            double t69398 = b1p*t69393;
            double t69399 = b3p*t69394;
            double t69400 = b4p*t69395*t69396;
            double t69401 = b2p*c*t69391;
            double t69402 = t69400+t69401+t69398+t69399;
            double t69403 = 1.0/t69402;
            double t69404 = t69403*t69397*(1.0/2.0);
            double t69405 = t69404+1.0;
            double t69406 = log(t69405);
            double t69407 = a1p*c*t69391;
            double t69408 = t69407+1.0;
            double t69409 = pow(2.0,1.0/3.0);
            double t69410 = t69409*2.0;
            double t69411 = t69410-2.0;
            double t69412 = two_13*2.0;
            double t69413 = t69412-2.0;
            double t69414 = 1.0/t69413;
            double t69415 = 1.0/c0f;
            double t69416 = 1.0/pow(rho_b[index],1.0/3.0);
            double t69417 = c*t69416;
            double t69418 = sqrt(t69417);
            double t69419 = pow(t69417,3.0/2.0);
            double t69420 = 1.0/pow(rho_b[index],2.0/3.0);
            double t69421 = b1p*t69418;
            double t69422 = b3p*t69419;
            double t69423 = b4p*t69420*t69395;
            double t69424 = b2p*c*t69416;
            double t69425 = t69421+t69422+t69423+t69424;
            double t69426 = 1.0/t69425;
            double t69427 = t69426*t69397*(1.0/2.0);
            double t69428 = t69427+1.0;
            double t69429 = log(t69428);
            double t69430 = a1p*c*t69416;
            double t69431 = t69430+1.0;
            double t69432 = c0p*t69431*t69429*2.0;
            double t69433 = rho_a[index]+rho_b[index];
            double t69434 = 1.0/pow(t69433,1.0/3.0);
            double t69435 = c*t69434;
            double t69436 = sqrt(t69435);
            double t69437 = pow(t69435,3.0/2.0);
            double t69438 = 1.0/pow(t69433,2.0/3.0);
            double t69439 = b1p*t69436;
            double t69440 = b3p*t69437;
            double t69441 = b4p*t69438*t69395;
            double t69442 = b2p*c*t69434;
            double t69443 = t69440+t69441+t69442+t69439;
            double t69444 = 1.0/t69443;
            double t69445 = t69444*t69397*(1.0/2.0);
            double t69446 = t69445+1.0;
            double t69447 = log(t69446);
            double t69448 = a1p*c*t69434;
            double t69449 = t69448+1.0;
            double t69450 = c0p*t69447*t69449*2.0;
            double t69451 = rho_a[index]-rho_b[index];
            double t69452 = t69451*t69451;
            double t69453 = 1.0/t69433;
            double t69454 = t69451*t69453;
            double t69455 = 1.0/(t69433*t69433*t69433*t69433);
            double t69456 = t69452*t69452;
            double t69457 = t69454+1.0;
            double t69458 = pow(t69457,4.0/3.0);
            double t69459 = -t69454+1.0;
            double t69460 = pow(t69459,4.0/3.0);
            double t69461 = t69460+t69458-2.0;
            double t69462 = gcab*gcab;
            double t69466 = 1.0/pow(rho_a[index],8.0/3.0);
            double t69467 = gamma_aa[index]*t69466*(1.0/2.0);
            double t69468 = 1.0/pow(rho_b[index],8.0/3.0);
            double t69469 = gamma_bb[index]*t69468*(1.0/2.0);
            double t69463 = t69467+t69469;
            double t69464 = t69463*t69463;
            double t69465 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t69470 = t69462*t69462;
            double t69471 = t69464*t69464;
            double t69472 = t69462*t69464*6.0;
            double t69473 = gcab*t69462*t69463*t69464*4.0;
            double t69474 = t69470*t69471;
            double t69475 = gcab*t69463*4.0;
            double t69476 = t69472+t69473+t69474+t69475+1.0;
            double t69477 = gcab*t69463;
            double t69478 = t69477+1.0;
            double t69479 = t69462*t69464;
            double t69480 = gcab*t69463*2.0;
            double t69481 = t69480+t69479+1.0;
            double t69482 = t69462*t69464*3.0;
            double t69483 = gcab*t69462*t69463*t69464;
            double t69484 = gcab*t69463*3.0;
            double t69485 = t69482+t69483+t69484+1.0;
            double t69486 = c0p*t69406*t69408*2.0;
            double t69487 = pow(rho_a[index],5.0/3.0);
            double t69488 = 1.0/tau_a[index];
            double t69489 = C_k*t69487*t69488;
            double t69490 = t69489-1.0;
            double t69491 = t69490*t69490;
            double t69492 = t69491*t69491;
            double t69493 = t69492*t69492;
            double t69494 = t69489+1.0;
            double t69495 = 1.0/(k*k);
            double t69496 = 1.0/kp;
            double t69497 = 1.0/(rho_a[index]*rho_a[index]);
            double t69498 = rho_a[index]*2.0;
            double t69499 = 1.0/pow(t69498,2.0/3.0);
            double t69500 = gamma_aa[index]*mu_*t69495*t69496*t69497*t69499*(1.0/4.0);
            double t69501 = t69500+1.0;
            double t69502 = 1.0/t69501;
            double t69503 = kp-kp*t69502+1.0;
            double t69504 = 1.0/t69494;
            double t69505 = pow(rho_a[index],2.0/3.0);
            double t69506 = 1.0/(t69494*t69494);
            double t69507 = 1.0/pow(t69494,1.0E1);
            double t69508 = 1.0/pow(t69494,1.1E1);
            double t69509 = 1.0/(t69494*t69494*t69494);
            double t69510 = 1.0/(t69494*t69494*t69494*t69494);
            double t69511 = 1.0/(t69494*t69494*t69494*t69494*t69494);
            double t69512 = 1.0/(t69494*t69494*t69494*t69494*t69494*t69494);
            double t69513 = 1.0/(t69494*t69494*t69494*t69494*t69494*t69494*t69494);
            double t69514 = 1.0/(t69494*t69494*t69494*t69494*t69494*t69494*t69494*t69494);
            double t69515 = 1.0/(t69494*t69494*t69494*t69494*t69494*t69494*t69494*t69494*t69494);
            double t69516 = a_1*t69504*t69490;
            double t69517 = a_10*t69507*t69491*t69493;
            double t69518 = a_11*t69490*t69508*t69491*t69493;
            double t69519 = a_2*t69506*t69491;
            double t69520 = a_3*t69490*t69491*t69509;
            double t69521 = a_4*t69510*t69492;
            double t69522 = a_5*t69511*t69490*t69492;
            double t69523 = a_6*t69512*t69491*t69492;
            double t69524 = a_7*t69513*t69490*t69491*t69492;
            double t69525 = a_8*t69514*t69493;
            double t69526 = a_9*t69515*t69490*t69493;
            double t69527 = t69520+t69521+t69522+t69523+t69524+t69516+t69525+t69517+t69526+t69518+t69519+1.0;
            double t69528 = 1.0/t69481;
            double t69529 = 1.0/t69485;
            double t69530 = 1.0/t69478;
            double t69531 = 1.0/t69476;
            double t69532 = 1.0/pow(t69433,4.0/3.0);
            double t69533 = b1f*t69436;
            double t69534 = b3f*t69437;
            double t69535 = b4f*t69438*t69395;
            double t69536 = b2f*c*t69434;
            double t69537 = t69533+t69534+t69535+t69536;
            double t69538 = 1.0/t69537;
            double t69539 = t69415*t69538*(1.0/2.0);
            double t69540 = t69539+1.0;
            double t69541 = log(t69540);
            double t69542 = a1f*c*t69434;
            double t69543 = t69542+1.0;
            double t69545 = c0f*t69541*t69543*2.0;
            double t69544 = t69450-t69545;
            double t69546 = 1.0/(t69433*t69433);
            double t69573 = t69451*t69546;
            double t69547 = t69453-t69573;
            double t69548 = 1.0/pow(t69433,5.0/3.0);
            double t69549 = 1.0/sqrt(t69435);
            double t69550 = 1.0/t69446;
            double t69551 = 1.0/(t69443*t69443);
            double t69552 = b4p*t69395*t69548*(2.0/3.0);
            double t69553 = b2p*c*t69532*(1.0/3.0);
            double t69554 = b1p*c*t69532*t69549*(1.0/6.0);
            double t69555 = b3p*c*t69532*t69436*(1.0/2.0);
            double t69556 = t69552+t69553+t69554+t69555;
            double t69557 = t69550*t69551*t69556*t69449;
            double t69558 = 1.0/d2fz0;
            double t69559 = 1.0/Aa;
            double t69560 = b1a*t69436;
            double t69561 = b3a*t69437;
            double t69562 = b4a*t69438*t69395;
            double t69563 = b2a*c*t69434;
            double t69564 = t69560+t69561+t69562+t69563;
            double t69565 = 1.0/t69564;
            double t69566 = t69565*t69559*(1.0/2.0);
            double t69567 = t69566+1.0;
            double t69568 = log(t69567);
            double t69569 = a1a*c*t69434;
            double t69570 = t69569+1.0;
            double t69571 = 1.0/(t69433*t69433*t69433*t69433*t69433);
            double t69572 = pow(t69457,1.0/3.0);
            double t69574 = t69572*t69547*(4.0/3.0);
            double t69575 = pow(t69459,1.0/3.0);
            double t69576 = t69574-t69547*t69575*(4.0/3.0);
            double t69577 = t69455*t69456;
            double t69578 = t69577-1.0;
            double t69579 = a1f*c*t69391;
            double t69580 = t69579+1.0;
            double t69581 = b1f*t69393;
            double t69582 = b3f*t69394;
            double t69583 = b4f*t69395*t69396;
            double t69584 = b2f*c*t69391;
            double t69585 = t69581+t69582+t69583+t69584;
            double t69586 = 1.0/t69585;
            double t69587 = t69415*t69586*(1.0/2.0);
            double t69588 = t69587+1.0;
            double t69589 = 1.0/pow(rho_a[index],4.0/3.0);
            double t69590 = 1.0/pow(rho_a[index],5.0/3.0);
            double t69591 = 1.0/sqrt(t69392);
            double t69592 = log(t69588);
            double t69593 = 1.0/t69405;
            double t69594 = 1.0/(t69402*t69402);
            double t69595 = b4p*t69590*t69395*(2.0/3.0);
            double t69596 = b2p*c*t69589*(1.0/3.0);
            double t69597 = b1p*c*t69591*t69589*(1.0/6.0);
            double t69598 = b3p*c*t69393*t69589*(1.0/2.0);
            double t69599 = t69595+t69596+t69597+t69598;
            double t69600 = t69408*t69593*t69594*t69599;
            double t69601 = Aa*t69414*t69461*t69570*t69558*t69568*t69578*2.0;
            double t69603 = c0f*t69580*t69592*2.0;
            double t69602 = -t69603+t69486;
            double t69604 = gamma_aa[index]*gamma_aa[index];
            double t69605 = gcaa*gcaa;
            double t69606 = t69604*t69604;
            double t69607 = t69605*t69605;
            double t69608 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t69609 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t69610 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t69611 = t69603-t69486;
            double t69612 = t69411*t69611*t69414;
            double t69613 = t69612+t69486;
            double t69614 = tau_a[index]-1.0/1.0E20;
            double t69615 = ( (t69614 > 0.0) ?  1.0 : 0.0 ) ;
            double t69616 = tau_a[index]*2.0;
            double t69617 = 1.0/rho_a[index];
            double t69644 = gamma_aa[index]*t69617*(1.0/4.0);
            double t69618 = t69616-t69644;
            double t69619 = t69618*t69488*(1.0/2.0);
            double t69620 = t69619-1.0;
            double t69621 = t69620*t69615;
            double t69622 = t69621+1.0;
            double t69623 = gamma_aa[index]*gcaa*t69466*4.0;
            double t69624 = gamma_aa[index]*gcaa*t69604*t69605*t69609*4.0;
            double t69625 = t69610*t69604*t69605*6.0;
            double t69626 = t69606*t69607*t69608;
            double t69627 = t69623+t69624+t69625+t69626+1.0;
            double t69628 = 1.0/t69627;
            double t69629 = gamma_aa[index]*gcaa*t69466;
            double t69630 = t69629+1.0;
            double t69631 = 1.0/t69630;
            double t69632 = gamma_aa[index]*gcaa*t69466*3.0;
            double t69633 = gamma_aa[index]*gcaa*t69604*t69605*t69609;
            double t69634 = t69610*t69604*t69605*3.0;
            double t69635 = t69632+t69633+t69634+1.0;
            double t69636 = 1.0/t69635;
            double t69637 = gamma_aa[index]*gcaa*t69466*2.0;
            double t69638 = t69610*t69604*t69605;
            double t69639 = t69637+t69638+1.0;
            double t69640 = 1.0/t69639;
            double t69641 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t69642 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t69643 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t69645 = 1.0/t69588;
            double t69646 = 1.0/(t69585*t69585);
            double t69647 = b4f*t69590*t69395*(2.0/3.0);
            double t69648 = b2f*c*t69589*(1.0/3.0);
            double t69649 = b1f*c*t69591*t69589*(1.0/6.0);
            double t69650 = b3f*c*t69393*t69589*(1.0/2.0);
            double t69651 = t69650+t69647+t69648+t69649;
            double t69652 = a1f*c*c0f*t69592*t69589*(2.0/3.0);
            double t69653 = a1p*c*c0p*t69406*t69589*(2.0/3.0);
            double t69654 = ccaa4*t69606*t69607*t69608*t69628;
            double t69655 = ccaa1*gamma_aa[index]*gcaa*t69631*t69466;
            double t69656 = ccaa3*gamma_aa[index]*gcaa*t69604*t69605*t69609*t69636;
            double t69657 = ccaa2*t69610*t69604*t69640*t69605;
            double t69658 = ccaa0+t69654+t69655+t69656+t69657;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t69530*t69463+ccab4*t69531*t69470*t69471+ccab2*t69462*t69464* \
               t69528+ccab3*gcab*t69462*t69463*t69464*t69529)*(t69601+t69450-t69486+rho_a[index]*(-t69600+t69653+ \
               t69411*t69414*(t69600+t69652-t69651*t69580*t69645*t69646-a1p*c*c0p*t69406*t69589*(2.0/3.0)))-t69433* \
               (-t69557+t69414*t69461*t69455*t69456*(t69557-(t69543*1.0/(t69537*t69537)*(b2f*c*t69532*(1.0/3.0)+b4f* \
               t69395*t69548*(2.0/3.0)+b1f*c*t69532*t69549*(1.0/6.0)+b3f*c*t69532*t69436*(1.0/2.0)))/t69540+a1f*c* \
               c0f*t69532*t69541*(2.0/3.0)-a1p*c*c0p*t69532*t69447*(2.0/3.0))+a1p*c*c0p*t69532*t69447*(2.0/3.0)-t69414* \
               t69461*t69544*t69571*t69456*4.0+t69414*t69544*t69455*t69456*t69576+t69414*t69451*t69452*t69461*t69544* \
               t69455*4.0+Aa*t69414*t69461*t69570*t69558*t69568*(t69571*t69456*4.0-t69451*t69452*t69455*4.0)*2.0- \
               Aa*t69414*t69570*t69558*t69576*t69568*t69578*2.0-(t69414*t69461*t69570*1.0/(t69564*t69564)*t69558* \
               t69578*(b2a*c*t69532*(1.0/3.0)+b4a*t69395*t69548*(2.0/3.0)+b1a*c*t69532*t69549*(1.0/6.0)+b3a*c*t69532* \
               t69436*(1.0/2.0)))/t69567+Aa*a1a*c*t69414*t69532*t69461*t69558*t69568*t69578*(2.0/3.0))+t69411*t69602* \
               t69414-t69414*t69461*t69544*t69455*t69456)-(X-1.0)*(t69503*t69527+rho_a[index]*t69503*(C_k*a_1*t69504* \
               t69505*t69488*(5.0/3.0)-C_k*a_1*t69505*t69506*t69490*t69488*(5.0/3.0)+C_k*a_2*t69505*t69506*t69490* \
               t69488*(1.0E1/3.0)-C_k*a_2*t69505*t69491*t69509*t69488*(1.0E1/3.0)+C_k*a_3*t69505*t69491*t69509*t69488* \
               5.0-C_k*a_4*t69511*t69505*t69492*t69488*(2.0E1/3.0)+C_k*a_5*t69511*t69505*t69492*t69488*(2.5E1/3.0) \
               -C_k*a_8*t69505*t69515*t69493*t69488*(4.0E1/3.0)+C_k*a_9*t69505*t69515*t69493*t69488*1.5E1+C_k*a_10* \
               t69505*t69507*t69490*t69493*t69488*(5.0E1/3.0)-C_k*a_10*t69505*t69508*t69491*t69493*t69488*(5.0E1/ \
               3.0)+C_k*a_11*t69505*t69508*t69491*t69493*t69488*(5.5E1/3.0)-C_k*a_3*t69510*t69505*t69490*t69491*t69488* \
               5.0+C_k*a_4*t69510*t69505*t69490*t69491*t69488*(2.0E1/3.0)-C_k*a_5*t69512*t69505*t69490*t69492*t69488* \
               (2.5E1/3.0)+C_k*a_6*t69512*t69505*t69490*t69492*t69488*1.0E1-C_k*a_6*t69513*t69505*t69491*t69492*t69488* \
               1.0E1+C_k*a_7*t69513*t69505*t69491*t69492*t69488*(3.5E1/3.0)-C_k*a_9*t69505*t69507*t69490*t69493*t69488* \
               1.5E1-C_k*a_11*t69505*t69490*t69491*t69493*1.0/pow(t69494,1.2E1)*t69488*(5.5E1/3.0)-C_k*a_7*t69505* \
               t69514*t69490*t69491*t69492*t69488*(3.5E1/3.0)+C_k*a_8*t69505*t69514*t69490*t69491*t69492*t69488*(4.0E1/ \
               3.0))-kp*rho_a[index]*1.0/(t69501*t69501)*t69527*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
               rho_a[index])*t69495*t69496*t69499*(1.0/2.0)+gamma_aa[index]*mu_*t69495*t69496*t69497*1.0/pow(t69498,5.0/ \
               3.0)*(1.0/3.0)))-(rho_a[index]*(t69486-t69411*t69602*t69414)+rho_b[index]*(t69432-t69411*t69414*(t69432- \
               c0f*log((t69415*(1.0/2.0))/(b1f*t69418+b3f*t69419+b2f*c*t69416+b4f*t69420*t69395)+1.0)*(a1f*c*t69416+ \
               1.0)*2.0))-t69433*(t69601+t69450-t69414*t69461*t69544*t69455*t69456))*(ccab1*gamma_aa[index]*gcab* \
               t69530*t69465*(4.0/3.0)-ccab2*t69462*1.0/(t69481*t69481)*t69464*(gamma_aa[index]*gcab*t69465*(8.0/ \
               3.0)+gamma_aa[index]*t69462*t69463*t69465*(8.0/3.0))-ccab4*t69470*t69471*1.0/(t69476*t69476)*(gamma_aa[index]* \
               gcab*t69465*(1.6E1/3.0)+gamma_aa[index]*t69462*t69463*t69465*1.6E1+gamma_aa[index]*gcab*t69462*t69464* \
               t69465*1.6E1+gamma_aa[index]*t69470*t69463*t69464*t69465*(1.6E1/3.0))-ccab1*gamma_aa[index]*t69462* \
               t69463*t69465*1.0/(t69478*t69478)*(4.0/3.0)+ccab2*gamma_aa[index]*t69462*t69463*t69465*t69528*(8.0/ \
               3.0)-ccab3*gcab*t69462*t69463*t69464*1.0/(t69485*t69485)*(gamma_aa[index]*gcab*t69465*4.0+gamma_aa[index]* \
               t69462*t69463*t69465*8.0+gamma_aa[index]*gcab*t69462*t69464*t69465*4.0)+ccab3*gamma_aa[index]*gcab* \
               t69462*t69464*t69465*t69529*4.0+ccab4*gamma_aa[index]*t69531*t69470*t69463*t69464*t69465*(1.6E1/3.0) \
               )-t69613*t69622*t69658+rho_a[index]*t69613*t69622*(ccaa1*gamma_aa[index]*gcaa*t69631*t69465*(8.0/3.0) \
               +ccaa2*t69604*t69640*t69605*t69641*(1.6E1/3.0)+ccaa4*t69606*t69607*t69643*t69628*(3.2E1/3.0)-ccaa1* \
               1.0/(t69630*t69630)*t69604*t69605*t69641*(8.0/3.0)-ccaa2*t69610*t69604*t69605*1.0/(t69639*t69639)* \
               (gamma_aa[index]*gcaa*t69465*(1.6E1/3.0)+t69604*t69605*t69641*(1.6E1/3.0))-ccaa4*t69606*t69607*t69608* \
               1.0/(t69627*t69627)*(gamma_aa[index]*gcaa*t69465*(3.2E1/3.0)+t69604*t69605*t69641*3.2E1+t69606*t69607* \
               t69643*(3.2E1/3.0)+gamma_aa[index]*gcaa*t69604*t69605*t69642*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t69604* \
               t69605*t69642*t69636*8.0-ccaa3*gamma_aa[index]*gcaa*t69604*t69605*1.0/(t69635*t69635)*t69609*(gamma_aa[index]* \
               gcaa*t69465*8.0+t69604*t69605*t69641*1.6E1+gamma_aa[index]*gcaa*t69604*t69605*t69642*8.0))+rho_a[index]* \
               t69622*t69658*(-t69600+t69653+t69411*t69414*(t69600+t69652-t69653-t69651*t69580*t69645*t69646))-gamma_aa[index]* \
               t69613*t69615*t69617*t69658*t69488*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            double t74795 = pow(rho_a[index],5.0/3.0);
            double t74796 = 1.0/tau_a[index];
            double t74797 = C_k*t74795*t74796;
            double t74798 = t74797-1.0;
            double t74799 = t74798*t74798;
            double t74800 = t74799*t74799;
            double t74801 = t74800*t74800;
            double t74802 = t74797+1.0;
            double t74803 = 1.0/pow(rho_a[index],1.0/3.0);
            double t74804 = c*t74803;
            double t74805 = sqrt(t74804);
            double t74806 = pow(t74804,3.0/2.0);
            double t74807 = c*c;
            double t74808 = 1.0/pow(rho_a[index],2.0/3.0);
            double t74809 = 1.0/c0p;
            double t74810 = b1p*t74805;
            double t74811 = b3p*t74806;
            double t74812 = b4p*t74807*t74808;
            double t74813 = b2p*c*t74803;
            double t74814 = t74810+t74811+t74812+t74813;
            double t74815 = 1.0/t74814;
            double t74816 = t74815*t74809*(1.0/2.0);
            double t74817 = t74816+1.0;
            double t74818 = log(t74817);
            double t74819 = a1p*c*t74803;
            double t74820 = t74819+1.0;
            double t74821 = gamma_aa[index]*gamma_aa[index];
            double t74822 = gcaa*gcaa;
            double t74823 = t74821*t74821;
            double t74824 = t74822*t74822;
            double t74825 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t74826 = 1.0/pow(rho_a[index],8.0/3.0);
            double t74827 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t74828 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t74829 = pow(2.0,1.0/3.0);
            double t74830 = t74829*2.0;
            double t74831 = t74830-2.0;
            double t74832 = two_13*2.0;
            double t74833 = t74832-2.0;
            double t74834 = 1.0/t74833;
            double t74835 = 1.0/c0f;
            double t74836 = b1f*t74805;
            double t74837 = b3f*t74806;
            double t74838 = b4f*t74807*t74808;
            double t74839 = b2f*c*t74803;
            double t74840 = t74836+t74837+t74838+t74839;
            double t74841 = 1.0/t74840;
            double t74842 = t74841*t74835*(1.0/2.0);
            double t74843 = t74842+1.0;
            double t74844 = log(t74843);
            double t74845 = a1f*c*t74803;
            double t74846 = t74845+1.0;
            double t74847 = c0f*t74844*t74846*2.0;
            double t74848 = c0p*t74820*t74818*2.0;
            double t74849 = tau_a[index]-1.0/1.0E20;
            double t74850 = ( (t74849 > 0.0) ?  1.0 : 0.0 ) ;
            double t74851 = tau_a[index]*2.0;
            double t74852 = 1.0/rho_a[index];
            double t74902 = gamma_aa[index]*t74852*(1.0/4.0);
            double t74853 = -t74902+t74851;
            double t74854 = t74853*t74796*(1.0/2.0);
            double t74855 = t74854-1.0;
            double t74856 = t74850*t74855;
            double t74857 = t74856+1.0;
            double t74858 = gamma_aa[index]*gcaa*t74826*4.0;
            double t74859 = gamma_aa[index]*gcaa*t74821*t74822*t74827*4.0;
            double t74860 = t74821*t74822*t74828*6.0;
            double t74861 = t74823*t74824*t74825;
            double t74862 = t74860+t74861+t74858+t74859+1.0;
            double t74863 = 1.0/t74862;
            double t74864 = gamma_aa[index]*gcaa*t74826;
            double t74865 = t74864+1.0;
            double t74866 = 1.0/t74865;
            double t74867 = gamma_aa[index]*gcaa*t74826*3.0;
            double t74868 = gamma_aa[index]*gcaa*t74821*t74822*t74827;
            double t74869 = t74821*t74822*t74828*3.0;
            double t74870 = t74867+t74868+t74869+1.0;
            double t74871 = 1.0/t74870;
            double t74872 = gamma_aa[index]*gcaa*t74826*2.0;
            double t74873 = t74821*t74822*t74828;
            double t74874 = t74872+t74873+1.0;
            double t74875 = 1.0/t74874;
            double t74876 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t74877 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t74878 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t74879 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t74880 = X-1.0;
            double t74881 = 1.0/(k*k);
            double t74882 = 1.0/kp;
            double t74883 = 1.0/(rho_a[index]*rho_a[index]);
            double t74884 = rho_a[index]*2.0;
            double t74885 = 1.0/pow(t74884,2.0/3.0);
            double t74886 = gamma_aa[index]*mu_*t74881*t74882*t74883*t74885*(1.0/4.0);
            double t74887 = t74886+1.0;
            double t74888 = 1.0/t74887;
            double t74889 = kp-kp*t74888+1.0;
            double t74890 = 1.0/t74802;
            double t74891 = pow(rho_a[index],2.0/3.0);
            double t74892 = 1.0/(t74802*t74802);
            double t74893 = 1.0/pow(t74802,1.0E1);
            double t74894 = 1.0/pow(t74802,1.1E1);
            double t74895 = 1.0/(t74802*t74802*t74802);
            double t74896 = 1.0/(t74802*t74802*t74802*t74802);
            double t74897 = 1.0/(t74802*t74802*t74802*t74802*t74802);
            double t74898 = 1.0/(t74802*t74802*t74802*t74802*t74802*t74802);
            double t74899 = 1.0/(t74802*t74802*t74802*t74802*t74802*t74802*t74802);
            double t74900 = 1.0/(t74802*t74802*t74802*t74802*t74802*t74802*t74802*t74802);
            double t74901 = 1.0/(t74802*t74802*t74802*t74802*t74802*t74802*t74802*t74802*t74802);
            double t74903 = 1.0/pow(rho_a[index],4.0/3.0);
            double t74904 = 1.0/pow(rho_a[index],5.0/3.0);
            double t74905 = 1.0/sqrt(t74804);
            double t74906 = 1.0/t74817;
            double t74907 = 1.0/(t74814*t74814);
            double t74908 = b4p*t74904*t74807*(2.0/3.0);
            double t74909 = b2p*c*t74903*(1.0/3.0);
            double t74910 = b1p*c*t74903*t74905*(1.0/6.0);
            double t74911 = b3p*c*t74903*t74805*(1.0/2.0);
            double t74912 = t74910+t74911+t74908+t74909;
            double t74913 = t74820*t74912*t74906*t74907;
            double t74914 = ccaa4*t74823*t74824*t74825*t74863;
            double t74915 = ccaa1*gamma_aa[index]*gcaa*t74826*t74866;
            double t74916 = ccaa3*gamma_aa[index]*gcaa*t74821*t74822*t74871*t74827;
            double t74917 = ccaa2*t74821*t74822*t74828*t74875;
            double t74918 = ccaa0+t74914+t74915+t74916+t74917;
            double t74919 = t74847-t74848;
            double t74920 = t74831*t74834*t74919;
            double t74921 = t74920+t74848;
            double t74922 = a_1*t74890*t74798;
            double t74923 = a_10*t74801*t74893*t74799;
            double t74924 = a_11*t74801*t74894*t74798*t74799;
            double t74925 = a_2*t74892*t74799;
            double t74926 = a_3*t74895*t74798*t74799;
            double t74927 = a_4*t74800*t74896;
            double t74928 = a_5*t74800*t74798*t74897;
            double t74929 = a_6*t74800*t74799*t74898;
            double t74930 = a_7*t74800*t74798*t74799*t74899;
            double t74931 = a_8*t74801*t74900;
            double t74932 = a_9*t74801*t74901*t74798;
            double t74933 = t74930+t74922+t74931+t74923+t74932+t74924+t74925+t74926+t74927+t74928+t74929+1.0;
            v_rho_a_[index] = -t74933*t74880*t74889-t74918*t74857*(t74848+t74831*t74834*(t74847-c0p*t74820*t74818* \
               2.0))+rho_a[index]*t74918*t74857*(-t74913+t74831*t74834*(t74913-(1.0/(t74840*t74840)*t74846*(b2f*c* \
               t74903*(1.0/3.0)+b4f*t74904*t74807*(2.0/3.0)+b1f*c*t74903*t74905*(1.0/6.0)+b3f*c*t74903*t74805*(1.0/ \
               2.0)))/t74843+a1f*c*c0f*t74903*t74844*(2.0/3.0)-a1p*c*c0p*t74903*t74818*(2.0/3.0))+a1p*c*c0p*t74903* \
               t74818*(2.0/3.0))-rho_a[index]*t74880*t74889*(C_k*a_1*t74890*t74891*t74796*(5.0/3.0)-C_k*a_1*t74891* \
               t74892*t74796*t74798*(5.0/3.0)+C_k*a_2*t74891*t74892*t74796*t74798*(1.0E1/3.0)-C_k*a_2*t74891*t74796* \
               t74895*t74799*(1.0E1/3.0)+C_k*a_3*t74891*t74796*t74895*t74799*5.0-C_k*a_4*t74800*t74891*t74796*t74897* \
               (2.0E1/3.0)+C_k*a_5*t74800*t74891*t74796*t74897*(2.5E1/3.0)-C_k*a_8*t74801*t74901*t74891*t74796*(4.0E1/ \
               3.0)+C_k*a_9*t74801*t74901*t74891*t74796*1.5E1+C_k*a_10*t74801*t74891*t74893*t74796*t74798*(5.0E1/ \
               3.0)-C_k*a_10*t74801*t74891*t74894*t74796*t74799*(5.0E1/3.0)+C_k*a_11*t74801*t74891*t74894*t74796* \
               t74799*(5.5E1/3.0)-C_k*a_3*t74891*t74796*t74896*t74798*t74799*5.0+C_k*a_4*t74891*t74796*t74896*t74798* \
               t74799*(2.0E1/3.0)-C_k*a_5*t74800*t74891*t74796*t74798*t74898*(2.5E1/3.0)+C_k*a_6*t74800*t74891*t74796* \
               t74798*t74898*1.0E1-C_k*a_6*t74800*t74891*t74796*t74799*t74899*1.0E1+C_k*a_7*t74800*t74891*t74796* \
               t74799*t74899*(3.5E1/3.0)-C_k*a_9*t74801*t74891*t74893*t74796*t74798*1.5E1-C_k*a_11*t74801*1.0/pow(t74802,1.2E1) \
               *t74891*t74796*t74798*t74799*(5.5E1/3.0)-C_k*a_7*t74800*t74900*t74891*t74796*t74798*t74799*(3.5E1/ \
               3.0)+C_k*a_8*t74800*t74900*t74891*t74796*t74798*t74799*(4.0E1/3.0))+rho_a[index]*t74921*t74857*(ccaa1* \
               gamma_aa[index]*gcaa*t74866*t74877*(8.0/3.0)+ccaa2*t74821*t74822*t74875*t74876*(1.6E1/3.0)+ccaa4*t74823* \
               t74824*t74863*t74879*(3.2E1/3.0)-ccaa1*t74821*t74822*1.0/(t74865*t74865)*t74876*(8.0/3.0)-ccaa2*t74821* \
               t74822*t74828*1.0/(t74874*t74874)*(gamma_aa[index]*gcaa*t74877*(1.6E1/3.0)+t74821*t74822*t74876*(1.6E1/ \
               3.0))-ccaa4*t74823*t74824*t74825*1.0/(t74862*t74862)*(gamma_aa[index]*gcaa*t74877*(3.2E1/3.0)+t74821* \
               t74822*t74876*3.2E1+t74823*t74824*t74879*(3.2E1/3.0)+gamma_aa[index]*gcaa*t74821*t74822*t74878*3.2E1) \
               +ccaa3*gamma_aa[index]*gcaa*t74821*t74822*t74871*t74878*8.0-ccaa3*gamma_aa[index]*gcaa*t74821*t74822* \
               1.0/(t74870*t74870)*t74827*(gamma_aa[index]*gcaa*t74877*8.0+t74821*t74822*t74876*1.6E1+gamma_aa[index]* \
               gcaa*t74821*t74822*t74878*8.0))-gamma_aa[index]*t74921*t74850*t74852*t74918*t74796*(1.0/8.0)+kp*rho_a[index]* \
               t74933*t74880*1.0/(t74887*t74887)*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]) \
               *t74881*t74882*t74885*(1.0/2.0)+gamma_aa[index]*mu_*t74881*t74882*t74883*1.0/pow(t74884,5.0/3.0)*(1.0/ \
               3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t69660 = 1.0/pow(rho_a[index],1.0/3.0);
            double t69661 = c*t69660;
            double t69662 = sqrt(t69661);
            double t69663 = pow(t69661,3.0/2.0);
            double t69664 = c*c;
            double t69665 = 1.0/pow(rho_a[index],2.0/3.0);
            double t69666 = 1.0/c0p;
            double t69667 = b1p*t69662;
            double t69668 = b3p*t69663;
            double t69669 = b4p*t69664*t69665;
            double t69670 = b2p*c*t69660;
            double t69671 = t69670+t69667+t69668+t69669;
            double t69672 = 1.0/t69671;
            double t69673 = t69672*t69666*(1.0/2.0);
            double t69674 = t69673+1.0;
            double t69675 = log(t69674);
            double t69676 = a1p*c*t69660;
            double t69677 = t69676+1.0;
            double t69678 = pow(2.0,1.0/3.0);
            double t69679 = t69678*2.0;
            double t69680 = t69679-2.0;
            double t69681 = two_13*2.0;
            double t69682 = t69681-2.0;
            double t69683 = 1.0/t69682;
            double t69684 = 1.0/c0f;
            double t69685 = 1.0/pow(rho_b[index],1.0/3.0);
            double t69686 = c*t69685;
            double t69687 = sqrt(t69686);
            double t69688 = pow(t69686,3.0/2.0);
            double t69689 = 1.0/pow(rho_b[index],2.0/3.0);
            double t69690 = b1p*t69687;
            double t69691 = b3p*t69688;
            double t69692 = b4p*t69664*t69689;
            double t69693 = b2p*c*t69685;
            double t69694 = t69690+t69691+t69692+t69693;
            double t69695 = 1.0/t69694;
            double t69696 = t69666*t69695*(1.0/2.0);
            double t69697 = t69696+1.0;
            double t69698 = log(t69697);
            double t69699 = a1p*c*t69685;
            double t69700 = t69699+1.0;
            double t69701 = c0p*t69700*t69698*2.0;
            double t69702 = rho_a[index]+rho_b[index];
            double t69703 = 1.0/pow(t69702,1.0/3.0);
            double t69704 = c*t69703;
            double t69705 = sqrt(t69704);
            double t69706 = pow(t69704,3.0/2.0);
            double t69707 = 1.0/pow(t69702,2.0/3.0);
            double t69708 = b1p*t69705;
            double t69709 = b3p*t69706;
            double t69710 = b4p*t69707*t69664;
            double t69711 = b2p*c*t69703;
            double t69712 = t69710+t69711+t69708+t69709;
            double t69713 = 1.0/t69712;
            double t69714 = t69713*t69666*(1.0/2.0);
            double t69715 = t69714+1.0;
            double t69716 = log(t69715);
            double t69717 = a1p*c*t69703;
            double t69718 = t69717+1.0;
            double t69719 = c0p*t69716*t69718*2.0;
            double t69720 = rho_a[index]-rho_b[index];
            double t69721 = t69720*t69720;
            double t69722 = 1.0/t69702;
            double t69723 = t69720*t69722;
            double t69724 = 1.0/(t69702*t69702*t69702*t69702);
            double t69725 = t69721*t69721;
            double t69726 = t69723+1.0;
            double t69727 = pow(t69726,4.0/3.0);
            double t69728 = -t69723+1.0;
            double t69729 = pow(t69728,4.0/3.0);
            double t69730 = t69727+t69729-2.0;
            double t69731 = gcab*gcab;
            double t69735 = 1.0/pow(rho_a[index],8.0/3.0);
            double t69736 = gamma_aa[index]*t69735*(1.0/2.0);
            double t69737 = 1.0/pow(rho_b[index],8.0/3.0);
            double t69738 = gamma_bb[index]*t69737*(1.0/2.0);
            double t69732 = t69736+t69738;
            double t69733 = t69732*t69732;
            double t69734 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t69739 = t69731*t69731;
            double t69740 = t69733*t69733;
            double t69741 = t69731*t69733*6.0;
            double t69742 = gcab*t69731*t69732*t69733*4.0;
            double t69743 = t69740*t69739;
            double t69744 = gcab*t69732*4.0;
            double t69745 = t69741+t69742+t69743+t69744+1.0;
            double t69746 = gcab*t69732;
            double t69747 = t69746+1.0;
            double t69748 = t69731*t69733;
            double t69749 = gcab*t69732*2.0;
            double t69750 = t69748+t69749+1.0;
            double t69751 = t69731*t69733*3.0;
            double t69752 = gcab*t69731*t69732*t69733;
            double t69753 = gcab*t69732*3.0;
            double t69754 = t69751+t69752+t69753+1.0;
            double t69755 = c0p*t69675*t69677*2.0;
            double t69756 = pow(rho_b[index],5.0/3.0);
            double t69757 = 1.0/tau_b[index];
            double t69758 = C_k*t69756*t69757;
            double t69759 = t69758-1.0;
            double t69760 = t69759*t69759;
            double t69761 = t69760*t69760;
            double t69762 = t69761*t69761;
            double t69763 = t69758+1.0;
            double t69764 = 1.0/(k*k);
            double t69765 = 1.0/kp;
            double t69766 = 1.0/(rho_b[index]*rho_b[index]);
            double t69767 = rho_b[index]*2.0;
            double t69768 = 1.0/pow(t69767,2.0/3.0);
            double t69769 = gamma_bb[index]*mu_*t69764*t69765*t69766*t69768*(1.0/4.0);
            double t69770 = t69769+1.0;
            double t69771 = 1.0/t69770;
            double t69772 = kp-kp*t69771+1.0;
            double t69773 = 1.0/t69763;
            double t69774 = pow(rho_b[index],2.0/3.0);
            double t69775 = 1.0/(t69763*t69763);
            double t69776 = 1.0/pow(t69763,1.0E1);
            double t69777 = 1.0/pow(t69763,1.1E1);
            double t69778 = 1.0/(t69763*t69763*t69763);
            double t69779 = 1.0/(t69763*t69763*t69763*t69763);
            double t69780 = 1.0/(t69763*t69763*t69763*t69763*t69763);
            double t69781 = 1.0/(t69763*t69763*t69763*t69763*t69763*t69763);
            double t69782 = 1.0/(t69763*t69763*t69763*t69763*t69763*t69763*t69763);
            double t69783 = 1.0/(t69763*t69763*t69763*t69763*t69763*t69763*t69763*t69763);
            double t69784 = 1.0/(t69763*t69763*t69763*t69763*t69763*t69763*t69763*t69763*t69763);
            double t69785 = a_1*t69773*t69759;
            double t69786 = a_10*t69760*t69762*t69776;
            double t69787 = a_11*t69760*t69762*t69759*t69777;
            double t69788 = a_2*t69760*t69775;
            double t69789 = a_3*t69760*t69759*t69778;
            double t69790 = a_4*t69761*t69779;
            double t69791 = a_5*t69761*t69780*t69759;
            double t69792 = a_6*t69760*t69761*t69781;
            double t69793 = a_7*t69760*t69761*t69782*t69759;
            double t69794 = a_8*t69762*t69783;
            double t69795 = a_9*t69762*t69784*t69759;
            double t69796 = t69790+t69791+t69792+t69793+t69785+t69794+t69786+t69795+t69787+t69788+t69789+1.0;
            double t69797 = 1.0/t69750;
            double t69798 = 1.0/t69754;
            double t69799 = 1.0/t69747;
            double t69800 = 1.0/t69745;
            double t69801 = 1.0/pow(t69702,4.0/3.0);
            double t69802 = b1f*t69705;
            double t69803 = b3f*t69706;
            double t69804 = b4f*t69707*t69664;
            double t69805 = b2f*c*t69703;
            double t69806 = t69802+t69803+t69804+t69805;
            double t69807 = 1.0/t69806;
            double t69808 = t69807*t69684*(1.0/2.0);
            double t69809 = t69808+1.0;
            double t69810 = log(t69809);
            double t69811 = a1f*c*t69703;
            double t69812 = t69811+1.0;
            double t69814 = c0f*t69810*t69812*2.0;
            double t69813 = -t69814+t69719;
            double t69815 = 1.0/(t69702*t69702);
            double t69816 = t69720*t69815;
            double t69817 = t69722+t69816;
            double t69818 = t69814-t69719;
            double t69819 = 1.0/pow(t69702,5.0/3.0);
            double t69820 = 1.0/sqrt(t69704);
            double t69821 = 1.0/t69715;
            double t69822 = 1.0/(t69712*t69712);
            double t69823 = b4p*t69664*t69819*(2.0/3.0);
            double t69824 = b2p*c*t69801*(1.0/3.0);
            double t69825 = b1p*c*t69801*t69820*(1.0/6.0);
            double t69826 = b3p*c*t69801*t69705*(1.0/2.0);
            double t69827 = t69823+t69824+t69825+t69826;
            double t69828 = 1.0/d2fz0;
            double t69829 = 1.0/Aa;
            double t69830 = b1a*t69705;
            double t69831 = b3a*t69706;
            double t69832 = b4a*t69707*t69664;
            double t69833 = b2a*c*t69703;
            double t69834 = t69830+t69831+t69832+t69833;
            double t69835 = 1.0/t69834;
            double t69836 = t69835*t69829*(1.0/2.0);
            double t69837 = t69836+1.0;
            double t69838 = log(t69837);
            double t69839 = a1a*c*t69703;
            double t69840 = t69839+1.0;
            double t69841 = 1.0/(t69702*t69702*t69702*t69702*t69702);
            double t69842 = pow(t69726,1.0/3.0);
            double t69843 = t69842*t69817*(4.0/3.0);
            double t69844 = pow(t69728,1.0/3.0);
            double t69845 = t69843-t69817*t69844*(4.0/3.0);
            double t69846 = t69724*t69725;
            double t69847 = t69846-1.0;
            double t69848 = a1f*c*t69685;
            double t69849 = t69848+1.0;
            double t69850 = b1f*t69687;
            double t69851 = b3f*t69688;
            double t69852 = b4f*t69664*t69689;
            double t69853 = b2f*c*t69685;
            double t69854 = t69850+t69851+t69852+t69853;
            double t69855 = 1.0/t69854;
            double t69856 = t69684*t69855*(1.0/2.0);
            double t69857 = t69856+1.0;
            double t69858 = 1.0/pow(rho_b[index],4.0/3.0);
            double t69859 = 1.0/pow(rho_b[index],5.0/3.0);
            double t69860 = 1.0/sqrt(t69686);
            double t69861 = log(t69857);
            double t69862 = 1.0/t69697;
            double t69863 = 1.0/(t69694*t69694);
            double t69864 = b4p*t69664*t69859*(2.0/3.0);
            double t69865 = b2p*c*t69858*(1.0/3.0);
            double t69866 = b1p*c*t69860*t69858*(1.0/6.0);
            double t69867 = b3p*c*t69687*t69858*(1.0/2.0);
            double t69868 = t69864+t69865+t69866+t69867;
            double t69869 = t69700*t69862*t69863*t69868;
            double t69873 = c0f*t69861*t69849*2.0;
            double t69870 = t69701-t69873;
            double t69871 = Aa*t69730*t69840*t69683*t69828*t69838*t69847*2.0;
            double t69872 = a1p*c*c0p*t69801*t69716*(2.0/3.0);
            double t69874 = t69680*t69870*t69683;
            double t69875 = gamma_bb[index]*gamma_bb[index];
            double t69876 = gcaa*gcaa;
            double t69877 = t69875*t69875;
            double t69878 = t69876*t69876;
            double t69879 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t69880 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t69881 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t69882 = t69701-t69874;
            double t69883 = tau_b[index]-1.0/1.0E20;
            double t69884 = ( (t69883 > 0.0) ?  1.0 : 0.0 ) ;
            double t69885 = tau_b[index]*2.0;
            double t69886 = 1.0/rho_b[index];
            double t69913 = gamma_bb[index]*t69886*(1.0/4.0);
            double t69887 = -t69913+t69885;
            double t69888 = t69757*t69887*(1.0/2.0);
            double t69889 = t69888-1.0;
            double t69890 = t69884*t69889;
            double t69891 = t69890+1.0;
            double t69892 = gamma_bb[index]*gcaa*t69737*4.0;
            double t69893 = gamma_bb[index]*gcaa*t69880*t69875*t69876*4.0;
            double t69894 = t69881*t69875*t69876*6.0;
            double t69895 = t69877*t69878*t69879;
            double t69896 = t69892+t69893+t69894+t69895+1.0;
            double t69897 = 1.0/t69896;
            double t69898 = gamma_bb[index]*gcaa*t69737;
            double t69899 = t69898+1.0;
            double t69900 = 1.0/t69899;
            double t69901 = gamma_bb[index]*gcaa*t69737*3.0;
            double t69902 = gamma_bb[index]*gcaa*t69880*t69875*t69876;
            double t69903 = t69881*t69875*t69876*3.0;
            double t69904 = t69901+t69902+t69903+1.0;
            double t69905 = 1.0/t69904;
            double t69906 = gamma_bb[index]*gcaa*t69737*2.0;
            double t69907 = t69881*t69875*t69876;
            double t69908 = t69906+t69907+1.0;
            double t69909 = 1.0/t69908;
            double t69910 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t69911 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t69912 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t69914 = 1.0/t69857;
            double t69915 = 1.0/(t69854*t69854);
            double t69916 = b4f*t69664*t69859*(2.0/3.0);
            double t69917 = b2f*c*t69858*(1.0/3.0);
            double t69918 = b1f*c*t69860*t69858*(1.0/6.0);
            double t69919 = b3f*c*t69687*t69858*(1.0/2.0);
            double t69920 = t69916+t69917+t69918+t69919;
            double t69921 = a1f*c*c0f*t69861*t69858*(2.0/3.0);
            double t69922 = a1p*c*c0p*t69858*t69698*(2.0/3.0);
            double t69923 = ccaa4*t69877*t69878*t69879*t69897;
            double t69924 = ccaa1*gamma_bb[index]*gcaa*t69900*t69737;
            double t69925 = ccaa3*gamma_bb[index]*gcaa*t69905*t69880*t69875*t69876;
            double t69926 = ccaa2*t69881*t69909*t69875*t69876;
            double t69927 = ccaa0+t69923+t69924+t69925+t69926;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t69732*t69799+ccab4*t69800*t69740*t69739+ccab2*t69731*t69733* \
               t69797+ccab3*gcab*t69731*t69732*t69733*t69798)*(-t69701+t69871+t69719+t69874+rho_b[index]*(t69922- \
               t69869+t69680*t69683*(t69921+t69869-t69920*t69914*t69915*t69849-a1p*c*c0p*t69858*t69698*(2.0/3.0)) \
               )-t69702*(t69872-t69821*t69822*t69718*t69827+t69730*t69841*t69725*t69683*t69818*4.0+t69724*t69725* \
               t69683*t69818*t69845-t69730*t69724*t69725*t69683*(t69872-t69821*t69822*t69718*t69827+(t69812*1.0/(t69806* \
               t69806)*(b2f*c*t69801*(1.0/3.0)+b4f*t69664*t69819*(2.0/3.0)+b1f*c*t69801*t69820*(1.0/6.0)+b3f*c*t69801* \
               t69705*(1.0/2.0)))/t69809-a1f*c*c0f*t69801*t69810*(2.0/3.0))-t69720*t69721*t69730*t69813*t69724*t69683* \
               4.0+Aa*t69730*t69840*t69683*t69828*t69838*(t69841*t69725*4.0+t69720*t69721*t69724*4.0)*2.0+Aa*t69840* \
               t69683*t69845*t69828*t69838*t69847*2.0-(t69730*t69840*1.0/(t69834*t69834)*t69683*t69828*t69847*(b2a* \
               c*t69801*(1.0/3.0)+b4a*t69664*t69819*(2.0/3.0)+b1a*c*t69801*t69820*(1.0/6.0)+b3a*c*t69801*t69705*(1.0/ \
               2.0)))/t69837+Aa*a1a*c*t69801*t69730*t69683*t69828*t69838*t69847*(2.0/3.0))+t69730*t69724*t69725*t69683* \
               t69818)-(X-1.0)*(t69772*t69796+rho_b[index]*t69772*(C_k*a_1*t69773*t69774*t69757*(5.0/3.0)-C_k*a_1* \
               t69774*t69757*t69775*t69759*(5.0/3.0)-C_k*a_2*t69760*t69774*t69757*t69778*(1.0E1/3.0)+C_k*a_2*t69774* \
               t69757*t69775*t69759*(1.0E1/3.0)+C_k*a_3*t69760*t69774*t69757*t69778*5.0-C_k*a_4*t69761*t69780*t69774* \
               t69757*(2.0E1/3.0)+C_k*a_5*t69761*t69780*t69774*t69757*(2.5E1/3.0)-C_k*a_8*t69762*t69774*t69757*t69784* \
               (4.0E1/3.0)+C_k*a_9*t69762*t69774*t69757*t69784*1.5E1-C_k*a_10*t69760*t69762*t69774*t69757*t69777* \
               (5.0E1/3.0)+C_k*a_11*t69760*t69762*t69774*t69757*t69777*(5.5E1/3.0)+C_k*a_10*t69762*t69774*t69757* \
               t69776*t69759*(5.0E1/3.0)-C_k*a_3*t69760*t69774*t69757*t69759*t69779*5.0+C_k*a_4*t69760*t69774*t69757* \
               t69759*t69779*(2.0E1/3.0)-C_k*a_5*t69761*t69781*t69774*t69757*t69759*(2.5E1/3.0)-C_k*a_6*t69760*t69761* \
               t69782*t69774*t69757*1.0E1+C_k*a_6*t69761*t69781*t69774*t69757*t69759*1.0E1+C_k*a_7*t69760*t69761* \
               t69782*t69774*t69757*(3.5E1/3.0)-C_k*a_9*t69762*t69774*t69757*t69776*t69759*1.5E1-C_k*a_11*t69760* \
               t69762*1.0/pow(t69763,1.2E1)*t69774*t69757*t69759*(5.5E1/3.0)-C_k*a_7*t69760*t69761*t69774*t69783* \
               t69757*t69759*(3.5E1/3.0)+C_k*a_8*t69760*t69761*t69774*t69783*t69757*t69759*(4.0E1/3.0))-kp*rho_b[index]* \
               1.0/(t69770*t69770)*t69796*(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t69764* \
               t69765*t69768*(1.0/2.0)+gamma_bb[index]*mu_*t69764*t69765*t69766*1.0/pow(t69767,5.0/3.0)*(1.0/3.0) \
               ))-(rho_b[index]*(t69701-t69680*t69870*t69683)+rho_a[index]*(t69755-t69680*t69683*(t69755-c0f*log((t69684* \
               (1.0/2.0))/(b1f*t69662+b3f*t69663+b2f*c*t69660+b4f*t69664*t69665)+1.0)*(a1f*c*t69660+1.0)*2.0))-t69702* \
               (t69871+t69719-t69730*t69813*t69724*t69725*t69683))*(ccab1*gamma_bb[index]*gcab*t69734*t69799*(4.0/ \
               3.0)-ccab2*t69731*1.0/(t69750*t69750)*t69733*(gamma_bb[index]*gcab*t69734*(8.0/3.0)+gamma_bb[index]* \
               t69731*t69732*t69734*(8.0/3.0))-ccab4*t69740*1.0/(t69745*t69745)*t69739*(gamma_bb[index]*gcab*t69734* \
               (1.6E1/3.0)+gamma_bb[index]*t69731*t69732*t69734*1.6E1+gamma_bb[index]*gcab*t69731*t69733*t69734*1.6E1+ \
               gamma_bb[index]*t69732*t69733*t69734*t69739*(1.6E1/3.0))-ccab1*gamma_bb[index]*t69731*t69732*t69734* \
               1.0/(t69747*t69747)*(4.0/3.0)+ccab2*gamma_bb[index]*t69731*t69732*t69734*t69797*(8.0/3.0)-ccab3*gcab* \
               t69731*t69732*t69733*1.0/(t69754*t69754)*(gamma_bb[index]*gcab*t69734*4.0+gamma_bb[index]*t69731*t69732* \
               t69734*8.0+gamma_bb[index]*gcab*t69731*t69733*t69734*4.0)+ccab3*gamma_bb[index]*gcab*t69731*t69733* \
               t69734*t69798*4.0+ccab4*gamma_bb[index]*t69800*t69732*t69733*t69734*t69739*(1.6E1/3.0))-t69882*t69891* \
               t69927+rho_b[index]*t69882*t69891*(ccaa1*gamma_bb[index]*gcaa*t69900*t69734*(8.0/3.0)+ccaa2*t69910* \
               t69909*t69875*t69876*(1.6E1/3.0)+ccaa4*t69912*t69877*t69878*t69897*(3.2E1/3.0)-ccaa1*t69910*t69875* \
               t69876*1.0/(t69899*t69899)*(8.0/3.0)-ccaa2*t69881*1.0/(t69908*t69908)*t69875*t69876*(gamma_bb[index]* \
               gcaa*t69734*(1.6E1/3.0)+t69910*t69875*t69876*(1.6E1/3.0))-ccaa4*t69877*t69878*1.0/(t69896*t69896)* \
               t69879*(gamma_bb[index]*gcaa*t69734*(3.2E1/3.0)+t69910*t69875*t69876*3.2E1+t69912*t69877*t69878*(3.2E1/ \
               3.0)+gamma_bb[index]*gcaa*t69911*t69875*t69876*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t69911*t69905*t69875* \
               t69876*8.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t69904*t69904)*t69880*t69875*t69876*(gamma_bb[index]*gcaa* \
               t69734*8.0+t69910*t69875*t69876*1.6E1+gamma_bb[index]*gcaa*t69911*t69875*t69876*8.0))+rho_b[index]* \
               t69891*t69927*(t69922-t69869+t69680*t69683*(t69921-t69922+t69869-t69920*t69914*t69915*t69849))-gamma_bb[index]* \
               t69882*t69927*t69757*t69884*t69886*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t73669 = pow(rho_b[index],5.0/3.0);
            double t73670 = 1.0/tau_b[index];
            double t73671 = C_k*t73670*t73669;
            double t73672 = t73671-1.0;
            double t73673 = t73672*t73672;
            double t73674 = t73673*t73673;
            double t73675 = t73674*t73674;
            double t73676 = t73671+1.0;
            double t73677 = 1.0/pow(rho_b[index],1.0/3.0);
            double t73678 = c*t73677;
            double t73679 = sqrt(t73678);
            double t73680 = pow(t73678,3.0/2.0);
            double t73681 = c*c;
            double t73682 = 1.0/pow(rho_b[index],2.0/3.0);
            double t73683 = 1.0/c0p;
            double t73684 = b1p*t73679;
            double t73685 = b3p*t73680;
            double t73686 = b4p*t73681*t73682;
            double t73687 = b2p*c*t73677;
            double t73688 = t73684+t73685+t73686+t73687;
            double t73689 = 1.0/t73688;
            double t73690 = t73683*t73689*(1.0/2.0);
            double t73691 = t73690+1.0;
            double t73692 = log(t73691);
            double t73693 = a1p*c*t73677;
            double t73694 = t73693+1.0;
            double t73695 = gamma_bb[index]*gamma_bb[index];
            double t73696 = gcaa*gcaa;
            double t73697 = t73695*t73695;
            double t73698 = t73696*t73696;
            double t73699 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t73700 = 1.0/pow(rho_b[index],8.0/3.0);
            double t73701 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t73702 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t73703 = pow(2.0,1.0/3.0);
            double t73704 = t73703*2.0;
            double t73705 = t73704-2.0;
            double t73706 = two_13*2.0;
            double t73707 = t73706-2.0;
            double t73708 = 1.0/t73707;
            double t73709 = 1.0/c0f;
            double t73710 = b1f*t73679;
            double t73711 = b3f*t73680;
            double t73712 = b4f*t73681*t73682;
            double t73713 = b2f*c*t73677;
            double t73714 = t73710+t73711+t73712+t73713;
            double t73715 = 1.0/t73714;
            double t73716 = t73715*t73709*(1.0/2.0);
            double t73717 = t73716+1.0;
            double t73718 = log(t73717);
            double t73719 = a1f*c*t73677;
            double t73720 = t73719+1.0;
            double t73721 = c0f*t73720*t73718*2.0;
            double t73722 = c0p*t73692*t73694*2.0;
            double t73723 = tau_b[index]-1.0/1.0E20;
            double t73724 = ( (t73723 > 0.0) ?  1.0 : 0.0 ) ;
            double t73725 = tau_b[index]*2.0;
            double t73726 = 1.0/rho_b[index];
            double t73776 = gamma_bb[index]*t73726*(1.0/4.0);
            double t73727 = t73725-t73776;
            double t73728 = t73670*t73727*(1.0/2.0);
            double t73729 = t73728-1.0;
            double t73730 = t73724*t73729;
            double t73731 = t73730+1.0;
            double t73732 = gamma_bb[index]*gcaa*t73700*4.0;
            double t73733 = gamma_bb[index]*gcaa*t73701*t73695*t73696*4.0;
            double t73734 = t73702*t73695*t73696*6.0;
            double t73735 = t73697*t73698*t73699;
            double t73736 = t73732+t73733+t73734+t73735+1.0;
            double t73737 = 1.0/t73736;
            double t73738 = gamma_bb[index]*gcaa*t73700;
            double t73739 = t73738+1.0;
            double t73740 = 1.0/t73739;
            double t73741 = gamma_bb[index]*gcaa*t73700*3.0;
            double t73742 = gamma_bb[index]*gcaa*t73701*t73695*t73696;
            double t73743 = t73702*t73695*t73696*3.0;
            double t73744 = t73741+t73742+t73743+1.0;
            double t73745 = 1.0/t73744;
            double t73746 = gamma_bb[index]*gcaa*t73700*2.0;
            double t73747 = t73702*t73695*t73696;
            double t73748 = t73746+t73747+1.0;
            double t73749 = 1.0/t73748;
            double t73750 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t73751 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t73752 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t73753 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t73754 = X-1.0;
            double t73755 = 1.0/(k*k);
            double t73756 = 1.0/kp;
            double t73757 = 1.0/(rho_b[index]*rho_b[index]);
            double t73758 = rho_b[index]*2.0;
            double t73759 = 1.0/pow(t73758,2.0/3.0);
            double t73760 = gamma_bb[index]*mu_*t73755*t73756*t73757*t73759*(1.0/4.0);
            double t73761 = t73760+1.0;
            double t73762 = 1.0/t73761;
            double t73763 = kp-kp*t73762+1.0;
            double t73764 = 1.0/t73676;
            double t73765 = pow(rho_b[index],2.0/3.0);
            double t73766 = 1.0/(t73676*t73676);
            double t73767 = 1.0/pow(t73676,1.0E1);
            double t73768 = 1.0/pow(t73676,1.1E1);
            double t73769 = 1.0/(t73676*t73676*t73676);
            double t73770 = 1.0/(t73676*t73676*t73676*t73676);
            double t73771 = 1.0/(t73676*t73676*t73676*t73676*t73676);
            double t73772 = 1.0/(t73676*t73676*t73676*t73676*t73676*t73676);
            double t73773 = 1.0/(t73676*t73676*t73676*t73676*t73676*t73676*t73676);
            double t73774 = 1.0/(t73676*t73676*t73676*t73676*t73676*t73676*t73676*t73676);
            double t73775 = 1.0/(t73676*t73676*t73676*t73676*t73676*t73676*t73676*t73676*t73676);
            double t73777 = 1.0/pow(rho_b[index],4.0/3.0);
            double t73778 = 1.0/pow(rho_b[index],5.0/3.0);
            double t73779 = 1.0/sqrt(t73678);
            double t73780 = 1.0/t73691;
            double t73781 = 1.0/(t73688*t73688);
            double t73782 = b4p*t73681*t73778*(2.0/3.0);
            double t73783 = b2p*c*t73777*(1.0/3.0);
            double t73784 = b1p*c*t73777*t73779*(1.0/6.0);
            double t73785 = b3p*c*t73777*t73679*(1.0/2.0);
            double t73786 = t73782+t73783+t73784+t73785;
            double t73787 = t73780*t73781*t73694*t73786;
            double t73788 = ccaa4*t73737*t73697*t73698*t73699;
            double t73789 = ccaa1*gamma_bb[index]*gcaa*t73700*t73740;
            double t73790 = ccaa3*gamma_bb[index]*gcaa*t73701*t73745*t73695*t73696;
            double t73791 = ccaa2*t73702*t73695*t73749*t73696;
            double t73792 = ccaa0+t73790+t73791+t73788+t73789;
            double t73793 = t73721-t73722;
            double t73794 = t73705*t73708*t73793;
            double t73795 = t73722+t73794;
            double t73796 = a_1*t73672*t73764;
            double t73797 = a_10*t73673*t73675*t73767;
            double t73798 = a_11*t73672*t73673*t73675*t73768;
            double t73799 = a_2*t73673*t73766;
            double t73800 = a_3*t73672*t73673*t73769;
            double t73801 = a_4*t73770*t73674;
            double t73802 = a_5*t73672*t73771*t73674;
            double t73803 = a_6*t73673*t73772*t73674;
            double t73804 = a_7*t73672*t73673*t73674*t73773;
            double t73805 = a_8*t73675*t73774;
            double t73806 = a_9*t73672*t73675*t73775;
            double t73807 = t73800+t73801+t73802+t73803+t73804+t73805+t73806+t73796+t73797+t73798+t73799+1.0;
            v_rho_b_[index] = -t73807*t73754*t73763-t73731*t73792*(t73722+t73705*t73708*(t73721-c0p*t73692*t73694* \
               2.0))+rho_b[index]*t73731*t73792*(-t73787+t73705*t73708*(t73787-(t73720*1.0/(t73714*t73714)*(b2f*c* \
               t73777*(1.0/3.0)+b4f*t73681*t73778*(2.0/3.0)+b1f*c*t73777*t73779*(1.0/6.0)+b3f*c*t73777*t73679*(1.0/ \
               2.0)))/t73717+a1f*c*c0f*t73718*t73777*(2.0/3.0)-a1p*c*c0p*t73692*t73777*(2.0/3.0))+a1p*c*c0p*t73692* \
               t73777*(2.0/3.0))-rho_b[index]*t73754*t73763*(C_k*a_1*t73670*t73764*t73765*(5.0/3.0)-C_k*a_1*t73670* \
               t73672*t73765*t73766*(5.0/3.0)+C_k*a_2*t73670*t73672*t73765*t73766*(1.0E1/3.0)-C_k*a_2*t73670*t73673* \
               t73765*t73769*(1.0E1/3.0)+C_k*a_3*t73670*t73673*t73765*t73769*5.0-C_k*a_4*t73670*t73771*t73674*t73765* \
               (2.0E1/3.0)+C_k*a_5*t73670*t73771*t73674*t73765*(2.5E1/3.0)-C_k*a_8*t73670*t73675*t73765*t73775*(4.0E1/ \
               3.0)+C_k*a_9*t73670*t73675*t73765*t73775*1.5E1+C_k*a_10*t73670*t73672*t73675*t73765*t73767*(5.0E1/ \
               3.0)-C_k*a_10*t73670*t73673*t73675*t73765*t73768*(5.0E1/3.0)+C_k*a_11*t73670*t73673*t73675*t73765* \
               t73768*(5.5E1/3.0)-C_k*a_3*t73670*t73770*t73672*t73673*t73765*5.0+C_k*a_4*t73670*t73770*t73672*t73673* \
               t73765*(2.0E1/3.0)-C_k*a_5*t73670*t73672*t73772*t73674*t73765*(2.5E1/3.0)+C_k*a_6*t73670*t73672*t73772* \
               t73674*t73765*1.0E1-C_k*a_6*t73670*t73673*t73674*t73773*t73765*1.0E1+C_k*a_7*t73670*t73673*t73674* \
               t73773*t73765*(3.5E1/3.0)-C_k*a_9*t73670*t73672*t73675*t73765*t73767*1.5E1-C_k*a_11*t73670*t73672* \
               t73673*t73675*t73765*1.0/pow(t73676,1.2E1)*(5.5E1/3.0)-C_k*a_7*t73670*t73672*t73673*t73674*t73765* \
               t73774*(3.5E1/3.0)+C_k*a_8*t73670*t73672*t73673*t73674*t73765*t73774*(4.0E1/3.0))+rho_b[index]*t73731* \
               t73795*(ccaa1*gamma_bb[index]*gcaa*t73740*t73751*(8.0/3.0)+ccaa2*t73750*t73695*t73749*t73696*(1.6E1/ \
               3.0)+ccaa4*t73753*t73737*t73697*t73698*(3.2E1/3.0)-ccaa1*t73750*1.0/(t73739*t73739)*t73695*t73696* \
               (8.0/3.0)-ccaa2*t73702*1.0/(t73748*t73748)*t73695*t73696*(gamma_bb[index]*gcaa*t73751*(1.6E1/3.0)+ \
               t73750*t73695*t73696*(1.6E1/3.0))-ccaa4*1.0/(t73736*t73736)*t73697*t73698*t73699*(gamma_bb[index]* \
               gcaa*t73751*(3.2E1/3.0)+t73750*t73695*t73696*3.2E1+t73753*t73697*t73698*(3.2E1/3.0)+gamma_bb[index]* \
               gcaa*t73752*t73695*t73696*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t73752*t73745*t73695*t73696*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t73701*1.0/(t73744*t73744)*t73695*t73696*(gamma_bb[index]*gcaa*t73751*8.0+t73750* \
               t73695*t73696*1.6E1+gamma_bb[index]*gcaa*t73752*t73695*t73696*8.0))-gamma_bb[index]*t73670*t73724* \
               t73726*t73792*t73795*(1.0/8.0)+kp*rho_b[index]*1.0/(t73761*t73761)*t73807*t73754*(gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t73755*t73756*t73759*(1.0/2.0)+gamma_bb[index]*mu_* \
               t73755*t73756*t73757*1.0/pow(t73758,5.0/3.0)*(1.0/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t69929 = 1.0/pow(rho_a[index],1.0/3.0);
                double t69930 = c*t69929;
                double t69931 = sqrt(t69930);
                double t69932 = pow(t69930,3.0/2.0);
                double t69933 = c*c;
                double t69934 = 1.0/pow(rho_a[index],2.0/3.0);
                double t69935 = 1.0/c0p;
                double t69936 = b1p*t69931;
                double t69937 = b3p*t69932;
                double t69938 = b4p*t69933*t69934;
                double t69939 = b2p*c*t69929;
                double t69940 = t69936+t69937+t69938+t69939;
                double t69941 = 1.0/t69940;
                double t69942 = t69941*t69935*(1.0/2.0);
                double t69943 = t69942+1.0;
                double t69944 = log(t69943);
                double t69945 = a1p*c*t69929;
                double t69946 = t69945+1.0;
                double t69947 = pow(2.0,1.0/3.0);
                double t69948 = t69947*2.0;
                double t69949 = t69948-2.0;
                double t69950 = two_13*2.0;
                double t69951 = t69950-2.0;
                double t69952 = 1.0/t69951;
                double t69953 = 1.0/c0f;
                double t69954 = 1.0/pow(rho_b[index],1.0/3.0);
                double t69955 = c*t69954;
                double t69956 = sqrt(t69955);
                double t69957 = pow(t69955,3.0/2.0);
                double t69958 = 1.0/pow(rho_b[index],2.0/3.0);
                double t69959 = b1p*t69956;
                double t69960 = b3p*t69957;
                double t69961 = b4p*t69933*t69958;
                double t69962 = b2p*c*t69954;
                double t69963 = t69960+t69961+t69962+t69959;
                double t69964 = 1.0/t69963;
                double t69965 = t69935*t69964*(1.0/2.0);
                double t69966 = t69965+1.0;
                double t69967 = log(t69966);
                double t69968 = a1p*c*t69954;
                double t69969 = t69968+1.0;
                double t69970 = c0p*t69967*t69969*2.0;
                double t69971 = rho_a[index]+rho_b[index];
                double t69972 = 1.0/pow(t69971,1.0/3.0);
                double t69973 = c*t69972;
                double t69974 = sqrt(t69973);
                double t69975 = pow(t69973,3.0/2.0);
                double t69976 = 1.0/pow(t69971,2.0/3.0);
                double t69977 = b1p*t69974;
                double t69978 = b3p*t69975;
                double t69979 = b4p*t69933*t69976;
                double t69980 = b2p*c*t69972;
                double t69981 = t69980+t69977+t69978+t69979;
                double t69982 = 1.0/t69981;
                double t69983 = t69935*t69982*(1.0/2.0);
                double t69984 = t69983+1.0;
                double t69985 = log(t69984);
                double t69986 = a1p*c*t69972;
                double t69987 = t69986+1.0;
                double t69988 = c0p*t69985*t69987*2.0;
                double t69989 = rho_a[index]-rho_b[index];
                double t69990 = t69989*t69989;
                double t69991 = 1.0/t69971;
                double t69992 = t69991*t69989;
                double t69993 = 1.0/(t69971*t69971*t69971*t69971);
                double t69994 = t69990*t69990;
                double t69995 = t69992+1.0;
                double t69996 = pow(t69995,4.0/3.0);
                double t69997 = -t69992+1.0;
                double t69998 = pow(t69997,4.0/3.0);
                double t69999 = t69996+t69998-2.0;
                double t70000 = 1.0/pow(rho_a[index],8.0/3.0);
                double t70001 = gamma_aa[index]*t70000*(1.0/2.0);
                double t70002 = 1.0/pow(rho_b[index],8.0/3.0);
                double t70003 = gamma_bb[index]*t70002*(1.0/2.0);
                double t70004 = t70001+t70003;
                double t70005 = gcab*t70004;
                double t70006 = t70005+1.0;
                double t70007 = gcab*gcab;
                double t70008 = t70004*t70004;
                double t70009 = t70007*t70007;
                double t70010 = t70008*t70008;
                double t70011 = t70007*t70008;
                double t70012 = gcab*t70004*2.0;
                double t70013 = t70011+t70012+1.0;
                double t70014 = t70007*t70008*3.0;
                double t70015 = gcab*t70004*t70007*t70008;
                double t70016 = gcab*t70004*3.0;
                double t70017 = t70014+t70015+t70016+1.0;
                double t70018 = t70007*t70008*6.0;
                double t70019 = gcab*t70004*t70007*t70008*4.0;
                double t70020 = t70010*t70009;
                double t70021 = gcab*t70004*4.0;
                double t70022 = t70020+t70021+t70018+t70019+1.0;
                double t70023 = c0p*t69944*t69946*2.0;
                double t70024 = b1f*t69931;
                double t70025 = b3f*t69932;
                double t70026 = b4f*t69933*t69934;
                double t70027 = b2f*c*t69929;
                double t70028 = t70024+t70025+t70026+t70027;
                double t70029 = 1.0/t70028;
                double t70030 = t69953*t70029*(1.0/2.0);
                double t70031 = t70030+1.0;
                double t70032 = log(t70031);
                double t70033 = a1f*c*t69929;
                double t70034 = t70033+1.0;
                double t70044 = c0f*t70032*t70034*2.0;
                double t70035 = t70023-t70044;
                double t70045 = t69952*t69949*t70035;
                double t70036 = t70023-t70045;
                double t70037 = gamma_aa[index]*gamma_aa[index];
                double t70038 = gcaa*gcaa;
                double t70039 = t70037*t70037;
                double t70040 = t70038*t70038;
                double t70041 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t70042 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t70043 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t70046 = tau_a[index]-1.0/1.0E20;
                double t70047 = ( (t70046 > 0.0) ?  1.0 : 0.0 ) ;
                double t70048 = 1.0/tau_a[index];
                double t70049 = gamma_aa[index]*gcaa*t70000;
                double t70050 = t70049+1.0;
                double t70051 = 1.0/t70050;
                double t70052 = gamma_aa[index]*gcaa*t70000*4.0;
                double t70053 = gamma_aa[index]*gcaa*t70042*t70037*t70038*4.0;
                double t70054 = t70043*t70037*t70038*6.0;
                double t70055 = t70040*t70041*t70039;
                double t70056 = t70052+t70053+t70054+t70055+1.0;
                double t70057 = 1.0/t70056;
                double t70058 = gamma_aa[index]*gcaa*t70000*2.0;
                double t70059 = t70043*t70037*t70038;
                double t70060 = t70058+t70059+1.0;
                double t70061 = 1.0/t70060;
                double t70062 = gamma_aa[index]*gcaa*t70000*3.0;
                double t70063 = gamma_aa[index]*gcaa*t70042*t70037*t70038;
                double t70064 = t70043*t70037*t70038*3.0;
                double t70065 = t70062+t70063+t70064+1.0;
                double t70066 = 1.0/t70065;
                double t70067 = 1.0/rho_a[index];
                double t70068 = 1.0/(k*k);
                double t70069 = rho_a[index]*2.0;
                double t70070 = 1.0/pow(t70069,2.0/3.0);
                double t70071 = pow(rho_a[index],5.0/3.0);
                double t70072 = C_k*t70071*t70048;
                double t70073 = t70072-1.0;
                double t70074 = t70073*t70073;
                double t70075 = t70074*t70074;
                double t70076 = t70075*t70075;
                double t70077 = t70072+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t70036+rho_b[index]*(t69970-t69952*t69949*(t69970-c0f*log((t69953* \
                   (1.0/2.0))/(b1f*t69956+b3f*t69957+b2f*c*t69954+b4f*t69933*t69958)+1.0)*(a1f*c*t69954+1.0)*2.0))-t69971* \
                   (t69988-t69952*t69993*t69994*t69999*(t69988-c0f*log((t69953*(1.0/2.0))/(b1f*t69974+b3f*t69975+b2f* \
                   c*t69972+b4f*t69933*t69976)+1.0)*(a1f*c*t69972+1.0)*2.0)+(Aa*t69952*t69999*log((1.0/2.0)/(Aa*(b1a* \
                   t69974+b3a*t69975+b2a*c*t69972+b4a*t69933*t69976))+1.0)*(t69993*t69994-1.0)*(a1a*c*t69972+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t70000*(1.0/2.0))/t70006-ccab4*t70010*1.0/(t70022*t70022)*t70009*(gcab*t70000* \
                   2.0+t70000*t70004*t70007*6.0+gcab*t70000*t70007*t70008*6.0+t70000*t70004*t70008*t70009*2.0)-ccab2* \
                   1.0/(t70013*t70013)*t70007*t70008*(gcab*t70000+t70000*t70004*t70007)+(ccab2*t70000*t70004*t70007)/ \
                   t70013-ccab1*t70000*t70004*1.0/(t70006*t70006)*t70007*(1.0/2.0)+(ccab3*gcab*t70000*t70007*t70008*(3.0/ \
                   2.0))/t70017+(ccab4*t70000*t70004*t70008*t70009*2.0)/t70022-ccab3*gcab*t70004*t70007*t70008*1.0/(t70017* \
                   t70017)*(gcab*t70000*(3.0/2.0)+t70000*t70004*t70007*3.0+gcab*t70000*t70007*t70008*(3.0/2.0)))+t70036* \
                   t70047*t70048*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t70000*t70051+ccaa2*t70043*t70061*t70037*t70038+ccaa4* \
                   t70040*t70041*t70039*t70057+ccaa3*gamma_aa[index]*gcaa*t70042*t70037*t70038*t70066)*(1.0/8.0)-rho_a[index]* \
                   t70036*(t70047*(t70048*(tau_a[index]*2.0-gamma_aa[index]*t70067*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t70000*t70051+ccaa2*gamma_aa[index]*t70043*t70061*t70038*2.0-ccaa1*gamma_aa[index]*1.0/(t70050* \
                   t70050)*t70043*t70038-ccaa2*1.0/(t70060*t70060)*t70043*t70037*t70038*(gcaa*t70000*2.0+gamma_aa[index]* \
                   t70043*t70038*2.0)-ccaa4*t70040*t70041*1.0/(t70056*t70056)*t70039*(gcaa*t70000*4.0+gamma_aa[index]* \
                   t70043*t70038*1.2E1+gamma_aa[index]*t70040*t70041*t70037*4.0+gcaa*t70042*t70037*t70038*1.2E1)+ccaa4* \
                   gamma_aa[index]*t70040*t70041*t70037*t70057*4.0+ccaa3*gcaa*t70042*t70037*t70038*t70066*3.0-ccaa3*gamma_aa[index]* \
                   gcaa*t70042*t70037*t70038*1.0/(t70065*t70065)*(gcaa*t70000*3.0+gamma_aa[index]*t70043*t70038*6.0+gcaa* \
                   t70042*t70037*t70038*3.0))-mu_*t70070*t70067*t70068*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*t70070*t70068*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t70073)/t70077+a_2*t70074*1.0/(t70077* \
                   t70077)+a_4*t70075*1.0/(t70077*t70077*t70077*t70077)+a_8*t70076*1.0/(t70077*t70077*t70077*t70077*t70077* \
                   t70077*t70077*t70077)+a_10*t70074*t70076*1.0/pow(t70077,1.0E1)+a_3*t70073*t70074*1.0/(t70077*t70077* \
                   t70077)+a_5*t70073*t70075*1.0/(t70077*t70077*t70077*t70077*t70077)+a_6*t70074*t70075*1.0/(t70077*t70077* \
                   t70077*t70077*t70077*t70077)+a_9*t70073*t70076*1.0/(t70077*t70077*t70077*t70077*t70077*t70077*t70077* \
                   t70077*t70077)+a_11*t70073*t70074*t70076*1.0/pow(t70077,1.1E1)+a_7*t70073*t70074*t70075*1.0/(t70077* \
                   t70077*t70077*t70077*t70077*t70077*t70077)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                double t74936 = 1.0/pow(rho_a[index],1.0/3.0);
                double t74937 = c*t74936;
                double t74938 = sqrt(t74937);
                double t74939 = pow(t74937,3.0/2.0);
                double t74940 = c*c;
                double t74941 = 1.0/pow(rho_a[index],2.0/3.0);
                double t74942 = 1.0/c0p;
                double t74943 = b1p*t74938;
                double t74944 = b3p*t74939;
                double t74945 = b4p*t74940*t74941;
                double t74946 = b2p*c*t74936;
                double t74947 = t74943+t74944+t74945+t74946;
                double t74948 = 1.0/t74947;
                double t74949 = t74942*t74948*(1.0/2.0);
                double t74950 = t74949+1.0;
                double t74951 = log(t74950);
                double t74952 = a1p*c*t74936;
                double t74953 = t74952+1.0;
                double t74954 = gamma_aa[index]*gamma_aa[index];
                double t74955 = gcaa*gcaa;
                double t74956 = t74954*t74954;
                double t74957 = t74955*t74955;
                double t74958 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t74959 = 1.0/pow(rho_a[index],8.0/3.0);
                double t74960 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t74961 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t74962 = pow(2.0,1.0/3.0);
                double t74963 = t74962*2.0;
                double t74964 = t74963-2.0;
                double t74965 = two_13*2.0;
                double t74966 = t74965-2.0;
                double t74967 = 1.0/t74966;
                double t74968 = 1.0/c0f;
                double t74969 = b1f*t74938;
                double t74970 = b3f*t74939;
                double t74971 = b4f*t74940*t74941;
                double t74972 = b2f*c*t74936;
                double t74973 = t74970+t74971+t74972+t74969;
                double t74974 = 1.0/t74973;
                double t74975 = t74974*t74968*(1.0/2.0);
                double t74976 = t74975+1.0;
                double t74977 = log(t74976);
                double t74978 = a1f*c*t74936;
                double t74979 = t74978+1.0;
                double t74980 = c0f*t74977*t74979*2.0;
                double t74981 = c0p*t74951*t74953*2.0;
                double t74982 = tau_a[index]-1.0/1.0E20;
                double t74983 = ( (t74982 > 0.0) ?  1.0 : 0.0 ) ;
                double t74984 = 1.0/tau_a[index];
                double t74985 = gamma_aa[index]*gcaa*t74959;
                double t74986 = t74985+1.0;
                double t74987 = 1.0/t74986;
                double t74988 = gamma_aa[index]*gcaa*t74959*4.0;
                double t74989 = gamma_aa[index]*gcaa*t74960*t74954*t74955*4.0;
                double t74990 = t74961*t74954*t74955*6.0;
                double t74991 = t74956*t74957*t74958;
                double t74992 = t74990+t74991+t74988+t74989+1.0;
                double t74993 = 1.0/t74992;
                double t74994 = gamma_aa[index]*gcaa*t74959*2.0;
                double t74995 = t74961*t74954*t74955;
                double t74996 = t74994+t74995+1.0;
                double t74997 = 1.0/t74996;
                double t74998 = gamma_aa[index]*gcaa*t74959*3.0;
                double t74999 = gamma_aa[index]*gcaa*t74960*t74954*t74955;
                double t75000 = t74961*t74954*t74955*3.0;
                double t75001 = t74998+t74999+t75000+1.0;
                double t75002 = 1.0/t75001;
                double t75003 = 1.0/rho_a[index];
                double t75004 = 1.0/(k*k);
                double t75005 = rho_a[index]*2.0;
                double t75006 = 1.0/pow(t75005,2.0/3.0);
                double t75007 = pow(rho_a[index],5.0/3.0);
                double t75008 = C_k*t74984*t75007;
                double t75009 = t75008-1.0;
                double t75010 = t75009*t75009;
                double t75011 = t75010*t75010;
                double t75012 = t75011*t75011;
                double t75013 = t75008+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(t74981+t74964*t74967*(t74980-t74981))*(t74983*(t74984*(tau_a[index]* \
                   2.0-gamma_aa[index]*t75003*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t74959*t74987+ccaa2*gamma_aa[index]* \
                   t74961*t74955*t74997*2.0-ccaa1*gamma_aa[index]*t74961*t74955*1.0/(t74986*t74986)-ccaa2*t74961*t74954* \
                   t74955*1.0/(t74996*t74996)*(gcaa*t74959*2.0+gamma_aa[index]*t74961*t74955*2.0)-ccaa4*t74956*1.0/(t74992* \
                   t74992)*t74957*t74958*(gcaa*t74959*4.0+gamma_aa[index]*t74961*t74955*1.2E1+gamma_aa[index]*t74954* \
                   t74957*t74958*4.0+gcaa*t74960*t74954*t74955*1.2E1)+ccaa4*gamma_aa[index]*t74954*t74957*t74993*t74958* \
                   4.0+ccaa3*gcaa*t74960*t74954*t74955*t75002*3.0-ccaa3*gamma_aa[index]*gcaa*t74960*t74954*t74955*1.0/ \
                   (t75001*t75001)*(gcaa*t74959*3.0+gamma_aa[index]*t74961*t74955*6.0+gcaa*t74960*t74954*t74955*3.0)) \
                   +t74983*t74984*(t74981+t74964*t74967*(t74980-c0p*t74951*t74953*2.0))*(ccaa0+ccaa1*gamma_aa[index]* \
                   gcaa*t74959*t74987+ccaa2*t74961*t74954*t74955*t74997+ccaa4*t74956*t74957*t74993*t74958+ccaa3*gamma_aa[index]* \
                   gcaa*t74960*t74954*t74955*t75002)*(1.0/8.0)-mu_*t75003*t75004*t75006*1.0/pow((gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index])*t75004*t75006*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t75009)/t75013+ \
                   a_2*t75010*1.0/(t75013*t75013)+a_4*t75011*1.0/(t75013*t75013*t75013*t75013)+a_8*t75012*1.0/(t75013* \
                   t75013*t75013*t75013*t75013*t75013*t75013*t75013)+a_10*t75010*t75012*1.0/pow(t75013,1.0E1)+a_3*t75010* \
                   1.0/(t75013*t75013*t75013)*t75009+a_5*t75011*1.0/(t75013*t75013*t75013*t75013*t75013)*t75009+a_6*t75010* \
                   t75011*1.0/(t75013*t75013*t75013*t75013*t75013*t75013)+a_9*t75012*1.0/(t75013*t75013*t75013*t75013* \
                   t75013*t75013*t75013*t75013*t75013)*t75009+a_11*t75010*t75012*1.0/pow(t75013,1.1E1)*t75009+a_7*t75010* \
                   t75011*1.0/(t75013*t75013*t75013*t75013*t75013*t75013*t75013)*t75009+1.0)*(1.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t70080 = 1.0/pow(rho_a[index],1.0/3.0);
                double t70081 = c*t70080;
                double t70082 = sqrt(t70081);
                double t70083 = pow(t70081,3.0/2.0);
                double t70084 = c*c;
                double t70085 = 1.0/pow(rho_a[index],2.0/3.0);
                double t70086 = 1.0/c0p;
                double t70087 = b1p*t70082;
                double t70088 = b3p*t70083;
                double t70089 = b4p*t70084*t70085;
                double t70090 = b2p*c*t70080;
                double t70091 = t70090+t70087+t70088+t70089;
                double t70092 = 1.0/t70091;
                double t70093 = t70092*t70086*(1.0/2.0);
                double t70094 = t70093+1.0;
                double t70095 = log(t70094);
                double t70096 = a1p*c*t70080;
                double t70097 = t70096+1.0;
                double t70098 = pow(2.0,1.0/3.0);
                double t70099 = t70098*2.0;
                double t70100 = t70099-2.0;
                double t70101 = two_13*2.0;
                double t70102 = t70101-2.0;
                double t70103 = 1.0/t70102;
                double t70104 = 1.0/c0f;
                double t70105 = 1.0/pow(rho_b[index],1.0/3.0);
                double t70106 = c*t70105;
                double t70107 = sqrt(t70106);
                double t70108 = pow(t70106,3.0/2.0);
                double t70109 = 1.0/pow(rho_b[index],2.0/3.0);
                double t70110 = b1p*t70107;
                double t70111 = b3p*t70108;
                double t70112 = b4p*t70109*t70084;
                double t70113 = b2p*c*t70105;
                double t70114 = t70110+t70111+t70112+t70113;
                double t70115 = 1.0/t70114;
                double t70116 = t70115*t70086*(1.0/2.0);
                double t70117 = t70116+1.0;
                double t70118 = log(t70117);
                double t70119 = a1p*c*t70105;
                double t70120 = t70119+1.0;
                double t70121 = c0p*t70120*t70118*2.0;
                double t70122 = rho_a[index]+rho_b[index];
                double t70123 = 1.0/pow(t70122,1.0/3.0);
                double t70124 = c*t70123;
                double t70125 = sqrt(t70124);
                double t70126 = pow(t70124,3.0/2.0);
                double t70127 = 1.0/pow(t70122,2.0/3.0);
                double t70128 = b1p*t70125;
                double t70129 = b3p*t70126;
                double t70130 = b4p*t70127*t70084;
                double t70131 = b2p*c*t70123;
                double t70132 = t70130+t70131+t70128+t70129;
                double t70133 = 1.0/t70132;
                double t70134 = t70133*t70086*(1.0/2.0);
                double t70135 = t70134+1.0;
                double t70136 = log(t70135);
                double t70137 = a1p*c*t70123;
                double t70138 = t70137+1.0;
                double t70139 = c0p*t70136*t70138*2.0;
                double t70140 = rho_a[index]-rho_b[index];
                double t70141 = t70140*t70140;
                double t70142 = 1.0/t70122;
                double t70143 = t70140*t70142;
                double t70144 = 1.0/(t70122*t70122*t70122*t70122);
                double t70145 = t70141*t70141;
                double t70146 = t70143+1.0;
                double t70147 = pow(t70146,4.0/3.0);
                double t70148 = -t70143+1.0;
                double t70149 = pow(t70148,4.0/3.0);
                double t70150 = t70147+t70149-2.0;
                double t70151 = 1.0/pow(rho_b[index],8.0/3.0);
                double t70152 = 1.0/pow(rho_a[index],8.0/3.0);
                double t70153 = gamma_aa[index]*t70152*(1.0/2.0);
                double t70154 = gamma_bb[index]*t70151*(1.0/2.0);
                double t70155 = t70153+t70154;
                double t70156 = gcab*t70155;
                double t70157 = t70156+1.0;
                double t70158 = gcab*gcab;
                double t70159 = t70155*t70155;
                double t70160 = t70158*t70158;
                double t70161 = t70159*t70159;
                double t70162 = t70158*t70159;
                double t70163 = gcab*t70155*2.0;
                double t70164 = t70162+t70163+1.0;
                double t70165 = t70158*t70159*3.0;
                double t70166 = gcab*t70155*t70158*t70159;
                double t70167 = gcab*t70155*3.0;
                double t70168 = t70165+t70166+t70167+1.0;
                double t70169 = t70158*t70159*6.0;
                double t70170 = gcab*t70155*t70158*t70159*4.0;
                double t70171 = t70160*t70161;
                double t70172 = gcab*t70155*4.0;
                double t70173 = t70170+t70171+t70172+t70169+1.0;
                double t70174 = c0p*t70095*t70097*2.0;
                double t70175 = b1f*t70107;
                double t70176 = b3f*t70108;
                double t70177 = b4f*t70109*t70084;
                double t70178 = b2f*c*t70105;
                double t70179 = t70175+t70176+t70177+t70178;
                double t70180 = 1.0/t70179;
                double t70181 = t70104*t70180*(1.0/2.0);
                double t70182 = t70181+1.0;
                double t70183 = log(t70182);
                double t70184 = a1f*c*t70105;
                double t70185 = t70184+1.0;
                double t70195 = c0f*t70183*t70185*2.0;
                double t70186 = t70121-t70195;
                double t70196 = t70100*t70103*t70186;
                double t70187 = t70121-t70196;
                double t70188 = gamma_bb[index]*gamma_bb[index];
                double t70189 = gcaa*gcaa;
                double t70190 = t70188*t70188;
                double t70191 = t70189*t70189;
                double t70192 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t70193 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t70194 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t70197 = tau_b[index]-1.0/1.0E20;
                double t70198 = ( (t70197 > 0.0) ?  1.0 : 0.0 ) ;
                double t70199 = 1.0/tau_b[index];
                double t70200 = gamma_bb[index]*gcaa*t70151;
                double t70201 = t70200+1.0;
                double t70202 = 1.0/t70201;
                double t70203 = gamma_bb[index]*gcaa*t70151*4.0;
                double t70204 = gamma_bb[index]*gcaa*t70193*t70188*t70189*4.0;
                double t70205 = t70194*t70188*t70189*6.0;
                double t70206 = t70190*t70191*t70192;
                double t70207 = t70203+t70204+t70205+t70206+1.0;
                double t70208 = 1.0/t70207;
                double t70209 = gamma_bb[index]*gcaa*t70151*2.0;
                double t70210 = t70194*t70188*t70189;
                double t70211 = t70210+t70209+1.0;
                double t70212 = 1.0/t70211;
                double t70213 = gamma_bb[index]*gcaa*t70151*3.0;
                double t70214 = gamma_bb[index]*gcaa*t70193*t70188*t70189;
                double t70215 = t70194*t70188*t70189*3.0;
                double t70216 = t70213+t70214+t70215+1.0;
                double t70217 = 1.0/t70216;
                double t70218 = 1.0/rho_b[index];
                double t70219 = 1.0/(k*k);
                double t70220 = rho_b[index]*2.0;
                double t70221 = 1.0/pow(t70220,2.0/3.0);
                double t70222 = pow(rho_b[index],5.0/3.0);
                double t70223 = C_k*t70222*t70199;
                double t70224 = t70223-1.0;
                double t70225 = t70224*t70224;
                double t70226 = t70225*t70225;
                double t70227 = t70226*t70226;
                double t70228 = t70223+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t70187+rho_a[index]*(t70174-t70100*t70103*(t70174-c0f*log((t70104* \
                   (1.0/2.0))/(b1f*t70082+b3f*t70083+b2f*c*t70080+b4f*t70084*t70085)+1.0)*(a1f*c*t70080+1.0)*2.0))-t70122* \
                   (t70139-t70103*t70150*t70144*t70145*(t70139-c0f*log((t70104*(1.0/2.0))/(b1f*t70125+b3f*t70126+b2f* \
                   c*t70123+b4f*t70127*t70084)+1.0)*(a1f*c*t70123+1.0)*2.0)+(Aa*t70103*t70150*log((1.0/2.0)/(Aa*(b1a* \
                   t70125+b3a*t70126+b2a*c*t70123+b4a*t70127*t70084))+1.0)*(t70144*t70145-1.0)*(a1a*c*t70123+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t70151*(1.0/2.0))/t70157-ccab4*t70160*t70161*1.0/(t70173*t70173)*(gcab*t70151* \
                   2.0+t70151*t70155*t70158*6.0+gcab*t70151*t70158*t70159*6.0+t70151*t70160*t70155*t70159*2.0)-ccab2* \
                   1.0/(t70164*t70164)*t70158*t70159*(gcab*t70151+t70151*t70155*t70158)+(ccab2*t70151*t70155*t70158)/ \
                   t70164-ccab1*t70151*t70155*1.0/(t70157*t70157)*t70158*(1.0/2.0)+(ccab3*gcab*t70151*t70158*t70159*(3.0/ \
                   2.0))/t70168+(ccab4*t70151*t70160*t70155*t70159*2.0)/t70173-ccab3*gcab*t70155*t70158*t70159*1.0/(t70168* \
                   t70168)*(gcab*t70151*(3.0/2.0)+t70151*t70155*t70158*3.0+gcab*t70151*t70158*t70159*(3.0/2.0)))+t70187* \
                   t70198*t70199*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t70202*t70151+ccaa4*t70190*t70208*t70191*t70192+ccaa2* \
                   t70212*t70194*t70188*t70189+ccaa3*gamma_bb[index]*gcaa*t70217*t70193*t70188*t70189)*(1.0/8.0)-rho_b[index]* \
                   t70187*(t70198*(t70199*(tau_b[index]*2.0-gamma_bb[index]*t70218*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t70202*t70151+ccaa2*gamma_bb[index]*t70212*t70194*t70189*2.0-ccaa1*gamma_bb[index]*1.0/(t70201* \
                   t70201)*t70194*t70189-ccaa2*1.0/(t70211*t70211)*t70194*t70188*t70189*(gcaa*t70151*2.0+gamma_bb[index]* \
                   t70194*t70189*2.0)-ccaa4*1.0/(t70207*t70207)*t70190*t70191*t70192*(gcaa*t70151*4.0+gamma_bb[index]* \
                   t70194*t70189*1.2E1+gamma_bb[index]*t70191*t70192*t70188*4.0+gcaa*t70193*t70188*t70189*1.2E1)+ccaa4* \
                   gamma_bb[index]*t70208*t70191*t70192*t70188*4.0+ccaa3*gcaa*t70217*t70193*t70188*t70189*3.0-ccaa3*gamma_bb[index]* \
                   gcaa*1.0/(t70216*t70216)*t70193*t70188*t70189*(gcaa*t70151*3.0+gamma_bb[index]*t70194*t70189*6.0+gcaa* \
                   t70193*t70188*t70189*3.0))-mu_*t70221*t70218*t70219*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*t70221*t70219*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t70224)/t70228+a_2*t70225*1.0/(t70228* \
                   t70228)+a_4*t70226*1.0/(t70228*t70228*t70228*t70228)+a_8*t70227*1.0/(t70228*t70228*t70228*t70228*t70228* \
                   t70228*t70228*t70228)+a_10*t70225*t70227*1.0/pow(t70228,1.0E1)+a_3*t70224*t70225*1.0/(t70228*t70228* \
                   t70228)+a_5*t70224*t70226*1.0/(t70228*t70228*t70228*t70228*t70228)+a_6*t70225*t70226*1.0/(t70228*t70228* \
                   t70228*t70228*t70228*t70228)+a_9*t70224*t70227*1.0/(t70228*t70228*t70228*t70228*t70228*t70228*t70228* \
                   t70228*t70228)+a_11*t70224*t70225*t70227*1.0/pow(t70228,1.1E1)+a_7*t70224*t70225*t70226*1.0/(t70228* \
                   t70228*t70228*t70228*t70228*t70228*t70228)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t73811 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73812 = c*t73811;
                double t73813 = sqrt(t73812);
                double t73814 = pow(t73812,3.0/2.0);
                double t73815 = c*c;
                double t73816 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73817 = 1.0/c0p;
                double t73818 = b1p*t73813;
                double t73819 = b3p*t73814;
                double t73820 = b4p*t73815*t73816;
                double t73821 = b2p*c*t73811;
                double t73822 = t73820+t73821+t73818+t73819;
                double t73823 = 1.0/t73822;
                double t73824 = t73823*t73817*(1.0/2.0);
                double t73825 = t73824+1.0;
                double t73826 = log(t73825);
                double t73827 = a1p*c*t73811;
                double t73828 = t73827+1.0;
                double t73829 = gamma_bb[index]*gamma_bb[index];
                double t73830 = gcaa*gcaa;
                double t73831 = t73829*t73829;
                double t73832 = t73830*t73830;
                double t73833 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73834 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73835 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73836 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t73837 = pow(2.0,1.0/3.0);
                double t73838 = t73837*2.0;
                double t73839 = t73838-2.0;
                double t73840 = two_13*2.0;
                double t73841 = t73840-2.0;
                double t73842 = 1.0/t73841;
                double t73843 = 1.0/c0f;
                double t73844 = b1f*t73813;
                double t73845 = b3f*t73814;
                double t73846 = b4f*t73815*t73816;
                double t73847 = b2f*c*t73811;
                double t73848 = t73844+t73845+t73846+t73847;
                double t73849 = 1.0/t73848;
                double t73850 = t73843*t73849*(1.0/2.0);
                double t73851 = t73850+1.0;
                double t73852 = log(t73851);
                double t73853 = a1f*c*t73811;
                double t73854 = t73853+1.0;
                double t73855 = c0f*t73852*t73854*2.0;
                double t73856 = c0p*t73826*t73828*2.0;
                double t73857 = tau_b[index]-1.0/1.0E20;
                double t73858 = ( (t73857 > 0.0) ?  1.0 : 0.0 ) ;
                double t73859 = 1.0/tau_b[index];
                double t73860 = gamma_bb[index]*gcaa*t73834;
                double t73861 = t73860+1.0;
                double t73862 = 1.0/t73861;
                double t73863 = gamma_bb[index]*gcaa*t73834*4.0;
                double t73864 = gamma_bb[index]*gcaa*t73830*t73835*t73829*4.0;
                double t73865 = t73830*t73836*t73829*6.0;
                double t73866 = t73831*t73832*t73833;
                double t73867 = t73863+t73864+t73865+t73866+1.0;
                double t73868 = 1.0/t73867;
                double t73869 = gamma_bb[index]*gcaa*t73834*2.0;
                double t73870 = t73830*t73836*t73829;
                double t73871 = t73870+t73869+1.0;
                double t73872 = 1.0/t73871;
                double t73873 = gamma_bb[index]*gcaa*t73834*3.0;
                double t73874 = gamma_bb[index]*gcaa*t73830*t73835*t73829;
                double t73875 = t73830*t73836*t73829*3.0;
                double t73876 = t73873+t73874+t73875+1.0;
                double t73877 = 1.0/t73876;
                double t73878 = 1.0/rho_b[index];
                double t73879 = 1.0/(k*k);
                double t73880 = rho_b[index]*2.0;
                double t73881 = 1.0/pow(t73880,2.0/3.0);
                double t73882 = pow(rho_b[index],5.0/3.0);
                double t73883 = C_k*t73882*t73859;
                double t73884 = t73883-1.0;
                double t73885 = t73884*t73884;
                double t73886 = t73885*t73885;
                double t73887 = t73886*t73886;
                double t73888 = t73883+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(t73856+t73842*t73839*(t73855-t73856))*(t73858*(t73859*(tau_b[index]* \
                   2.0-gamma_bb[index]*t73878*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t73834*t73862+ccaa2*gamma_bb[index]* \
                   t73830*t73836*t73872*2.0-ccaa1*gamma_bb[index]*t73830*1.0/(t73861*t73861)*t73836-ccaa2*t73830*1.0/ \
                   (t73871*t73871)*t73836*t73829*(gcaa*t73834*2.0+gamma_bb[index]*t73830*t73836*2.0)-ccaa4*t73831*t73832* \
                   t73833*1.0/(t73867*t73867)*(gcaa*t73834*4.0+gamma_bb[index]*t73830*t73836*1.2E1+gamma_bb[index]*t73832* \
                   t73833*t73829*4.0+gcaa*t73830*t73835*t73829*1.2E1)+ccaa4*gamma_bb[index]*t73832*t73833*t73829*t73868* \
                   4.0+ccaa3*gcaa*t73830*t73835*t73829*t73877*3.0-ccaa3*gamma_bb[index]*gcaa*t73830*t73835*t73829*1.0/ \
                   (t73876*t73876)*(gcaa*t73834*3.0+gamma_bb[index]*t73830*t73836*6.0+gcaa*t73830*t73835*t73829*3.0)) \
                   +t73858*t73859*(t73856+t73842*t73839*(t73855-c0p*t73826*t73828*2.0))*(ccaa0+ccaa1*gamma_bb[index]* \
                   gcaa*t73834*t73862+ccaa4*t73831*t73832*t73833*t73868+ccaa2*t73830*t73836*t73872*t73829+ccaa3*gamma_bb[index]* \
                   gcaa*t73830*t73835*t73829*t73877)*(1.0/8.0)-mu_*t73881*t73878*t73879*1.0/pow((gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index])*t73881*t73879*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t73884)/t73888+ \
                   a_2*t73885*1.0/(t73888*t73888)+a_4*t73886*1.0/(t73888*t73888*t73888*t73888)+a_8*t73887*1.0/(t73888* \
                   t73888*t73888*t73888*t73888*t73888*t73888*t73888)+a_10*t73885*t73887*1.0/pow(t73888,1.0E1)+a_3*t73884* \
                   t73885*1.0/(t73888*t73888*t73888)+a_5*t73884*t73886*1.0/(t73888*t73888*t73888*t73888*t73888)+a_6*t73885* \
                   t73886*1.0/(t73888*t73888*t73888*t73888*t73888*t73888)+a_9*t73884*t73887*1.0/(t73888*t73888*t73888* \
                   t73888*t73888*t73888*t73888*t73888*t73888)+a_11*t73884*t73885*t73887*1.0/pow(t73888,1.1E1)+a_7*t73884* \
                   t73885*t73886*1.0/(t73888*t73888*t73888*t73888*t73888*t73888*t73888)+1.0)*(1.0/4.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t70230 = pow(rho_a[index],5.0/3.0);
                double t70231 = 1.0/(tau_a[index]*tau_a[index]);
                double t70232 = 1.0/tau_a[index];
                double t70233 = C_k*t70230*t70232;
                double t70234 = t70233+1.0;
                double t70235 = t70233-1.0;
                double t70236 = 1.0/(t70234*t70234);
                double t70237 = t70235*t70235;
                double t70238 = t70237*t70237;
                double t70239 = t70238*t70238;
                double t70240 = 1.0/pow(t70234,1.1E1);
                double t70241 = 1.0/(t70234*t70234*t70234);
                double t70242 = 1.0/(t70234*t70234*t70234*t70234);
                double t70243 = 1.0/(t70234*t70234*t70234*t70234*t70234);
                double t70244 = 1.0/(t70234*t70234*t70234*t70234*t70234*t70234);
                double t70245 = 1.0/(t70234*t70234*t70234*t70234*t70234*t70234*t70234);
                double t70246 = 1.0/(t70234*t70234*t70234*t70234*t70234*t70234*t70234*t70234);
                double t70247 = 1.0/(t70234*t70234*t70234*t70234*t70234*t70234*t70234*t70234*t70234);
                double t70248 = 1.0/pow(t70234,1.0E1);
                double t70249 = 1.0/pow(rho_a[index],1.0/3.0);
                double t70250 = c*t70249;
                double t70251 = sqrt(t70250);
                double t70252 = pow(t70250,3.0/2.0);
                double t70253 = c*c;
                double t70254 = 1.0/pow(rho_a[index],2.0/3.0);
                double t70255 = 1.0/c0p;
                double t70256 = b1p*t70251;
                double t70257 = b3p*t70252;
                double t70258 = b4p*t70253*t70254;
                double t70259 = b2p*c*t70249;
                double t70260 = t70256+t70257+t70258+t70259;
                double t70261 = 1.0/t70260;
                double t70262 = t70261*t70255*(1.0/2.0);
                double t70263 = t70262+1.0;
                double t70264 = log(t70263);
                double t70265 = a1p*c*t70249;
                double t70266 = t70265+1.0;
                double t70267 = tau_a[index]-1.0/1.0E20;
                double t70268 = tau_a[index]*2.0;
                double t70269 = 1.0/rho_a[index];
                double t70270 = t70268-gamma_aa[index]*t70269*(1.0/4.0);
                double t70271 = gamma_aa[index]*gamma_aa[index];
                double t70272 = gcaa*gcaa;
                double t70273 = t70271*t70271;
                double t70274 = t70272*t70272;
                double t70275 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t70276 = 1.0/pow(rho_a[index],8.0/3.0);
                double t70277 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t70278 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t70251+ \
                   b3f*t70252+b2f*c*t70249+b4f*t70253*t70254))+1.0)*(a1f*c*t70249+1.0)*2.0-c0p*t70264*t70266*2.0))/(two_13* \
                   2.0-2.0)+c0p*t70264*t70266*2.0)*( ( (t70267 > 0.0) ? 1.0*(t70232-t70231*t70270*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t70271*t70272*t70278)/(gamma_aa[index]*gcaa*t70276*2.0+t70271*t70272*t70278+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t70276)/(gamma_aa[index]*gcaa*t70276+1.0)+(ccaa4*t70273*t70274*t70275) \
                   /(gamma_aa[index]*gcaa*t70276*4.0+t70271*t70272*t70278*6.0+t70273*t70274*t70275+gamma_aa[index]*gcaa* \
                   t70271*t70272*t70277*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t70271*t70272*t70277)/(gamma_aa[index]*gcaa* \
                   t70276*3.0+t70271*t70272*t70278*3.0+gamma_aa[index]*gcaa*t70271*t70272*t70277+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t70230*t70231)/t70234-C_k*a_1*t70230*t70231*t70235*t70236-C_k* \
                   a_2*t70230*t70231*t70241*t70237*2.0+C_k*a_2*t70230*t70231*t70235*t70236*2.0+C_k*a_3*t70230*t70231* \
                   t70241*t70237*3.0-C_k*a_4*t70230*t70231*t70243*t70238*4.0+C_k*a_5*t70230*t70231*t70243*t70238*5.0- \
                   C_k*a_8*t70230*t70231*t70247*t70239*8.0+C_k*a_9*t70230*t70231*t70247*t70239*9.0-C_k*a_10*t70230*t70231* \
                   t70240*t70237*t70239*1.0E1+C_k*a_11*t70230*t70231*t70240*t70237*t70239*1.1E1+C_k*a_10*t70230*t70231* \
                   t70235*t70239*t70248*1.0E1-C_k*a_3*t70230*t70231*t70242*t70235*t70237*3.0+C_k*a_4*t70230*t70231*t70242* \
                   t70235*t70237*4.0-C_k*a_5*t70230*t70231*t70235*t70244*t70238*5.0+C_k*a_6*t70230*t70231*t70235*t70244* \
                   t70238*6.0-C_k*a_6*t70230*t70231*t70245*t70237*t70238*6.0+C_k*a_7*t70230*t70231*t70245*t70237*t70238* \
                   7.0-C_k*a_9*t70230*t70231*t70235*t70239*t70248*9.0-C_k*a_11*t70230*t70231*1.0/pow(t70234,1.2E1)*t70235* \
                   t70237*t70239*1.1E1-C_k*a_7*t70230*t70231*t70235*t70237*t70246*t70238*7.0+C_k*a_8*t70230*t70231*t70235* \
                   t70237*t70246*t70238*8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75017 = pow(rho_a[index],5.0/3.0);
                double t75018 = 1.0/(tau_a[index]*tau_a[index]);
                double t75019 = 1.0/tau_a[index];
                double t75020 = C_k*t75017*t75019;
                double t75021 = t75020+1.0;
                double t75022 = t75020-1.0;
                double t75023 = 1.0/(t75021*t75021);
                double t75024 = t75022*t75022;
                double t75025 = t75024*t75024;
                double t75026 = t75025*t75025;
                double t75027 = 1.0/pow(t75021,1.1E1);
                double t75028 = 1.0/(t75021*t75021*t75021);
                double t75029 = 1.0/(t75021*t75021*t75021*t75021);
                double t75030 = 1.0/(t75021*t75021*t75021*t75021*t75021);
                double t75031 = 1.0/(t75021*t75021*t75021*t75021*t75021*t75021);
                double t75032 = 1.0/(t75021*t75021*t75021*t75021*t75021*t75021*t75021);
                double t75033 = 1.0/(t75021*t75021*t75021*t75021*t75021*t75021*t75021*t75021);
                double t75034 = 1.0/(t75021*t75021*t75021*t75021*t75021*t75021*t75021*t75021*t75021);
                double t75035 = 1.0/pow(t75021,1.0E1);
                double t75036 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75037 = c*t75036;
                double t75038 = sqrt(t75037);
                double t75039 = pow(t75037,3.0/2.0);
                double t75040 = c*c;
                double t75041 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75042 = 1.0/c0p;
                double t75043 = b1p*t75038;
                double t75044 = b3p*t75039;
                double t75045 = b4p*t75040*t75041;
                double t75046 = b2p*c*t75036;
                double t75047 = t75043+t75044+t75045+t75046;
                double t75048 = 1.0/t75047;
                double t75049 = t75042*t75048*(1.0/2.0);
                double t75050 = t75049+1.0;
                double t75051 = log(t75050);
                double t75052 = a1p*c*t75036;
                double t75053 = t75052+1.0;
                double t75054 = tau_a[index]-1.0/1.0E20;
                double t75055 = tau_a[index]*2.0;
                double t75056 = 1.0/rho_a[index];
                double t75057 = t75055-gamma_aa[index]*t75056*(1.0/4.0);
                double t75058 = gamma_aa[index]*gamma_aa[index];
                double t75059 = gcaa*gcaa;
                double t75060 = t75058*t75058;
                double t75061 = t75059*t75059;
                double t75062 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75063 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75064 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75065 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t75038+ \
                   b3f*t75039+b2f*c*t75036+b4f*t75040*t75041))+1.0)*(a1f*c*t75036+1.0)*2.0-c0p*t75051*t75053*2.0))/(two_13* \
                   2.0-2.0)+c0p*t75051*t75053*2.0)*( ( (t75054 > 0.0) ? 1.0*(t75019-t75018*t75057*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t75065*t75058*t75059)/(gamma_aa[index]*gcaa*t75063*2.0+t75065*t75058*t75059+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t75063)/(gamma_aa[index]*gcaa*t75063+1.0)+(ccaa4*t75060*t75061*t75062) \
                   /(gamma_aa[index]*gcaa*t75063*4.0+t75060*t75061*t75062+t75065*t75058*t75059*6.0+gamma_aa[index]*gcaa* \
                   t75064*t75058*t75059*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t75064*t75058*t75059)/(gamma_aa[index]*gcaa* \
                   t75063*3.0+t75065*t75058*t75059*3.0+gamma_aa[index]*gcaa*t75064*t75058*t75059+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t75017*t75018)/t75021-C_k*a_1*t75022*t75023*t75017*t75018+C_k* \
                   a_2*t75022*t75023*t75017*t75018*2.0-C_k*a_2*t75024*t75017*t75018*t75028*2.0+C_k*a_3*t75024*t75017* \
                   t75018*t75028*3.0-C_k*a_4*t75030*t75025*t75017*t75018*4.0+C_k*a_5*t75030*t75025*t75017*t75018*5.0- \
                   C_k*a_8*t75034*t75017*t75026*t75018*8.0+C_k*a_9*t75034*t75017*t75026*t75018*9.0+C_k*a_10*t75022*t75017* \
                   t75026*t75035*t75018*1.0E1-C_k*a_10*t75024*t75017*t75026*t75018*t75027*1.0E1+C_k*a_11*t75024*t75017* \
                   t75026*t75018*t75027*1.1E1-C_k*a_3*t75022*t75024*t75017*t75018*t75029*3.0+C_k*a_4*t75022*t75024*t75017* \
                   t75018*t75029*4.0-C_k*a_5*t75022*t75031*t75025*t75017*t75018*5.0+C_k*a_6*t75022*t75031*t75025*t75017* \
                   t75018*6.0-C_k*a_6*t75032*t75024*t75025*t75017*t75018*6.0+C_k*a_7*t75032*t75024*t75025*t75017*t75018* \
                   7.0-C_k*a_9*t75022*t75017*t75026*t75035*t75018*9.0-C_k*a_11*1.0/pow(t75021,1.2E1)*t75022*t75024*t75017* \
                   t75026*t75018*1.1E1-C_k*a_7*t75022*t75024*t75033*t75025*t75017*t75018*7.0+C_k*a_8*t75022*t75024*t75033* \
                   t75025*t75017*t75018*8.0);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t70280 = pow(rho_b[index],5.0/3.0);
                double t70281 = 1.0/(tau_b[index]*tau_b[index]);
                double t70282 = 1.0/tau_b[index];
                double t70283 = C_k*t70280*t70282;
                double t70284 = t70283+1.0;
                double t70285 = t70283-1.0;
                double t70286 = 1.0/(t70284*t70284);
                double t70287 = t70285*t70285;
                double t70288 = t70287*t70287;
                double t70289 = t70288*t70288;
                double t70290 = 1.0/pow(t70284,1.1E1);
                double t70291 = 1.0/(t70284*t70284*t70284);
                double t70292 = 1.0/(t70284*t70284*t70284*t70284);
                double t70293 = 1.0/(t70284*t70284*t70284*t70284*t70284);
                double t70294 = 1.0/(t70284*t70284*t70284*t70284*t70284*t70284);
                double t70295 = 1.0/(t70284*t70284*t70284*t70284*t70284*t70284*t70284);
                double t70296 = 1.0/(t70284*t70284*t70284*t70284*t70284*t70284*t70284*t70284);
                double t70297 = 1.0/(t70284*t70284*t70284*t70284*t70284*t70284*t70284*t70284*t70284);
                double t70298 = 1.0/pow(t70284,1.0E1);
                double t70299 = 1.0/pow(rho_b[index],1.0/3.0);
                double t70300 = c*t70299;
                double t70301 = sqrt(t70300);
                double t70302 = pow(t70300,3.0/2.0);
                double t70303 = c*c;
                double t70304 = 1.0/pow(rho_b[index],2.0/3.0);
                double t70305 = 1.0/c0p;
                double t70306 = b1p*t70301;
                double t70307 = b3p*t70302;
                double t70308 = b4p*t70303*t70304;
                double t70309 = b2p*c*t70299;
                double t70310 = t70306+t70307+t70308+t70309;
                double t70311 = 1.0/t70310;
                double t70312 = t70311*t70305*(1.0/2.0);
                double t70313 = t70312+1.0;
                double t70314 = log(t70313);
                double t70315 = a1p*c*t70299;
                double t70316 = t70315+1.0;
                double t70317 = tau_b[index]-1.0/1.0E20;
                double t70318 = tau_b[index]*2.0;
                double t70319 = 1.0/rho_b[index];
                double t70320 = t70318-gamma_bb[index]*t70319*(1.0/4.0);
                double t70321 = gamma_bb[index]*gamma_bb[index];
                double t70322 = gcaa*gcaa;
                double t70323 = t70321*t70321;
                double t70324 = t70322*t70322;
                double t70325 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t70326 = 1.0/pow(rho_b[index],8.0/3.0);
                double t70327 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t70328 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t70301+ \
                   b3f*t70302+b2f*c*t70299+b4f*t70303*t70304))+1.0)*(a1f*c*t70299+1.0)*2.0-c0p*t70314*t70316*2.0))/(two_13* \
                   2.0-2.0)+c0p*t70314*t70316*2.0)*( ( (t70317 > 0.0) ? 1.0*(t70282-t70320*t70281*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t70321*t70322*t70328)/(gamma_bb[index]*gcaa*t70326*2.0+t70321*t70322*t70328+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t70326)/(gamma_bb[index]*gcaa*t70326+1.0)+(ccaa4*t70323*t70324*t70325) \
                   /(gamma_bb[index]*gcaa*t70326*4.0+t70321*t70322*t70328*6.0+t70323*t70324*t70325+gamma_bb[index]*gcaa* \
                   t70321*t70322*t70327*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t70321*t70322*t70327)/(gamma_bb[index]*gcaa* \
                   t70326*3.0+t70321*t70322*t70328*3.0+gamma_bb[index]*gcaa*t70321*t70322*t70327+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t70280*t70281)/t70284-C_k*a_1*t70280*t70281*t70285*t70286-C_k* \
                   a_2*t70280*t70281*t70291*t70287*2.0+C_k*a_2*t70280*t70281*t70285*t70286*2.0+C_k*a_3*t70280*t70281* \
                   t70291*t70287*3.0-C_k*a_4*t70280*t70281*t70293*t70288*4.0+C_k*a_5*t70280*t70281*t70293*t70288*5.0- \
                   C_k*a_8*t70280*t70281*t70297*t70289*8.0+C_k*a_9*t70280*t70281*t70297*t70289*9.0-C_k*a_10*t70280*t70281* \
                   t70290*t70287*t70289*1.0E1+C_k*a_11*t70280*t70281*t70290*t70287*t70289*1.1E1+C_k*a_10*t70280*t70281* \
                   t70285*t70289*t70298*1.0E1-C_k*a_3*t70280*t70281*t70292*t70285*t70287*3.0+C_k*a_4*t70280*t70281*t70292* \
                   t70285*t70287*4.0-C_k*a_5*t70280*t70281*t70285*t70294*t70288*5.0+C_k*a_6*t70280*t70281*t70285*t70294* \
                   t70288*6.0-C_k*a_6*t70280*t70281*t70295*t70287*t70288*6.0+C_k*a_7*t70280*t70281*t70295*t70287*t70288* \
                   7.0-C_k*a_9*t70280*t70281*t70285*t70289*t70298*9.0-C_k*a_11*t70280*t70281*1.0/pow(t70284,1.2E1)*t70285* \
                   t70287*t70289*1.1E1-C_k*a_7*t70280*t70281*t70285*t70287*t70296*t70288*7.0+C_k*a_8*t70280*t70281*t70285* \
                   t70287*t70296*t70288*8.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t73891 = pow(rho_b[index],5.0/3.0);
                double t73892 = 1.0/(tau_b[index]*tau_b[index]);
                double t73893 = 1.0/tau_b[index];
                double t73894 = C_k*t73891*t73893;
                double t73895 = t73894+1.0;
                double t73896 = t73894-1.0;
                double t73897 = 1.0/(t73895*t73895);
                double t73898 = t73896*t73896;
                double t73899 = t73898*t73898;
                double t73900 = t73899*t73899;
                double t73901 = 1.0/pow(t73895,1.1E1);
                double t73902 = 1.0/(t73895*t73895*t73895);
                double t73903 = 1.0/(t73895*t73895*t73895*t73895);
                double t73904 = 1.0/(t73895*t73895*t73895*t73895*t73895);
                double t73905 = 1.0/(t73895*t73895*t73895*t73895*t73895*t73895);
                double t73906 = 1.0/(t73895*t73895*t73895*t73895*t73895*t73895*t73895);
                double t73907 = 1.0/(t73895*t73895*t73895*t73895*t73895*t73895*t73895*t73895);
                double t73908 = 1.0/(t73895*t73895*t73895*t73895*t73895*t73895*t73895*t73895*t73895);
                double t73909 = 1.0/pow(t73895,1.0E1);
                double t73910 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73911 = c*t73910;
                double t73912 = sqrt(t73911);
                double t73913 = pow(t73911,3.0/2.0);
                double t73914 = c*c;
                double t73915 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73916 = 1.0/c0p;
                double t73917 = b1p*t73912;
                double t73918 = b3p*t73913;
                double t73919 = b4p*t73914*t73915;
                double t73920 = b2p*c*t73910;
                double t73921 = t73920+t73917+t73918+t73919;
                double t73922 = 1.0/t73921;
                double t73923 = t73922*t73916*(1.0/2.0);
                double t73924 = t73923+1.0;
                double t73925 = log(t73924);
                double t73926 = a1p*c*t73910;
                double t73927 = t73926+1.0;
                double t73928 = tau_b[index]-1.0/1.0E20;
                double t73929 = tau_b[index]*2.0;
                double t73930 = 1.0/rho_b[index];
                double t73931 = t73929-gamma_bb[index]*t73930*(1.0/4.0);
                double t73932 = gamma_bb[index]*gamma_bb[index];
                double t73933 = gcaa*gcaa;
                double t73934 = t73932*t73932;
                double t73935 = t73933*t73933;
                double t73936 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73937 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73938 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73939 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t73912+ \
                   b3f*t73913+b2f*c*t73910+b4f*t73914*t73915))+1.0)*(a1f*c*t73910+1.0)*2.0-c0p*t73925*t73927*2.0))/(two_13* \
                   2.0-2.0)+c0p*t73925*t73927*2.0)*( ( (t73928 > 0.0) ? 1.0*(t73893-t73931*t73892*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t73932*t73933*t73939)/(gamma_bb[index]*gcaa*t73937*2.0+t73932*t73933*t73939+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t73937)/(gamma_bb[index]*gcaa*t73937+1.0)+(ccaa4*t73934*t73935*t73936) \
                   /(gamma_bb[index]*gcaa*t73937*4.0+t73932*t73933*t73939*6.0+t73934*t73935*t73936+gamma_bb[index]*gcaa* \
                   t73932*t73933*t73938*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t73932*t73933*t73938)/(gamma_bb[index]*gcaa* \
                   t73937*3.0+t73932*t73933*t73939*3.0+gamma_bb[index]*gcaa*t73932*t73933*t73938+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t73891*t73892)/t73895-C_k*a_1*t73891*t73892*t73896*t73897-C_k* \
                   a_2*t73902*t73891*t73892*t73898*2.0+C_k*a_2*t73891*t73892*t73896*t73897*2.0+C_k*a_3*t73902*t73891* \
                   t73892*t73898*3.0-C_k*a_4*t73904*t73891*t73892*t73899*4.0+C_k*a_5*t73904*t73891*t73892*t73899*5.0- \
                   C_k*a_8*t73900*t73908*t73891*t73892*8.0+C_k*a_9*t73900*t73908*t73891*t73892*9.0-C_k*a_10*t73900*t73901* \
                   t73891*t73892*t73898*1.0E1+C_k*a_11*t73900*t73901*t73891*t73892*t73898*1.1E1+C_k*a_10*t73900*t73891* \
                   t73909*t73892*t73896*1.0E1-C_k*a_3*t73903*t73891*t73892*t73896*t73898*3.0+C_k*a_4*t73903*t73891*t73892* \
                   t73896*t73898*4.0-C_k*a_5*t73905*t73891*t73892*t73896*t73899*5.0+C_k*a_6*t73905*t73891*t73892*t73896* \
                   t73899*6.0-C_k*a_6*t73906*t73891*t73892*t73898*t73899*6.0+C_k*a_7*t73906*t73891*t73892*t73898*t73899* \
                   7.0-C_k*a_9*t73900*t73891*t73909*t73892*t73896*9.0-C_k*a_11*t73900*t73891*t73892*1.0/pow(t73895,1.2E1) \
                   *t73896*t73898*1.1E1-C_k*a_7*t73907*t73891*t73892*t73896*t73898*t73899*7.0+C_k*a_8*t73907*t73891*t73892* \
                   t73896*t73898*t73899*8.0);
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t70330 = rho_a[index]+rho_b[index];
            double t70331 = 1.0/pow(t70330,1.0/3.0);
            double t70332 = c*t70331;
            double t70333 = sqrt(t70332);
            double t70334 = b1p*t70333;
            double t70335 = pow(t70332,3.0/2.0);
            double t70336 = b3p*t70335;
            double t70337 = c*c;
            double t70338 = 1.0/pow(t70330,2.0/3.0);
            double t70339 = b4p*t70337*t70338;
            double t70340 = b2p*c*t70331;
            double t70341 = t70340+t70334+t70336+t70339;
            double t70342 = 1.0/pow(t70330,4.0/3.0);
            double t70343 = 1.0/c0p;
            double t70344 = 1.0/t70341;
            double t70345 = t70343*t70344*(1.0/2.0);
            double t70346 = t70345+1.0;
            double t70347 = a1p*c*t70331;
            double t70348 = t70347+1.0;
            double t70349 = rho_a[index]-rho_b[index];
            double t70350 = t70349*t70349;
            double t70351 = 1.0/t70330;
            double t70352 = t70351*t70349;
            double t70353 = two_13*2.0;
            double t70354 = t70353-2.0;
            double t70355 = 1.0/t70354;
            double t70356 = 1.0/c0f;
            double t70357 = b1f*t70333;
            double t70358 = b3f*t70335;
            double t70359 = b4f*t70337*t70338;
            double t70360 = b2f*c*t70331;
            double t70361 = t70360+t70357+t70358+t70359;
            double t70362 = 1.0/t70361;
            double t70363 = t70362*t70356*(1.0/2.0);
            double t70364 = t70363+1.0;
            double t70365 = log(t70364);
            double t70366 = a1f*c*t70331;
            double t70367 = t70366+1.0;
            double t70368 = log(t70346);
            double t70378 = c0f*t70365*t70367*2.0;
            double t70379 = c0p*t70348*t70368*2.0;
            double t70369 = t70378-t70379;
            double t70370 = t70352+1.0;
            double t70371 = pow(t70370,4.0/3.0);
            double t70372 = -t70352+1.0;
            double t70373 = pow(t70372,4.0/3.0);
            double t70374 = t70371+t70373-2.0;
            double t70375 = 1.0/(t70330*t70330);
            double t70406 = t70375*t70349;
            double t70376 = t70351-t70406;
            double t70377 = 1.0/(t70330*t70330*t70330*t70330);
            double t70380 = t70350*t70350;
            double t70381 = 1.0/pow(t70330,5.0/3.0);
            double t70382 = 1.0/sqrt(t70332);
            double t70383 = 1.0/t70346;
            double t70384 = 1.0/(t70341*t70341);
            double t70385 = b4p*t70381*t70337*(2.0/3.0);
            double t70386 = b2p*c*t70342*(1.0/3.0);
            double t70387 = b1p*c*t70342*t70382*(1.0/6.0);
            double t70388 = b3p*c*t70333*t70342*(1.0/2.0);
            double t70389 = t70385+t70386+t70387+t70388;
            double t70390 = t70383*t70348*t70384*t70389;
            double t70391 = 1.0/(t70330*t70330*t70330*t70330*t70330);
            double t70392 = 1.0/d2fz0;
            double t70393 = 1.0/Aa;
            double t70394 = b1a*t70333;
            double t70395 = b3a*t70335;
            double t70396 = b4a*t70337*t70338;
            double t70397 = b2a*c*t70331;
            double t70398 = t70394+t70395+t70396+t70397;
            double t70399 = 1.0/t70398;
            double t70400 = t70393*t70399*(1.0/2.0);
            double t70401 = t70400+1.0;
            double t70402 = log(t70401);
            double t70403 = a1a*c*t70331;
            double t70404 = t70403+1.0;
            double t70405 = pow(t70370,1.0/3.0);
            double t70407 = t70405*t70376*(4.0/3.0);
            double t70408 = pow(t70372,1.0/3.0);
            double t70483 = t70408*t70376*(4.0/3.0);
            double t70409 = t70407-t70483;
            double t70410 = t70380*t70377;
            double t70411 = t70410-1.0;
            double t70412 = 1.0/pow(rho_a[index],1.0/3.0);
            double t70413 = c*t70412;
            double t70414 = sqrt(t70413);
            double t70415 = b1f*t70414;
            double t70416 = pow(t70413,3.0/2.0);
            double t70417 = b3f*t70416;
            double t70418 = 1.0/pow(rho_a[index],2.0/3.0);
            double t70419 = b4f*t70337*t70418;
            double t70420 = b2f*c*t70412;
            double t70421 = t70420+t70415+t70417+t70419;
            double t70422 = 1.0/pow(rho_a[index],4.0/3.0);
            double t70423 = b1p*t70414;
            double t70424 = b3p*t70416;
            double t70425 = b4p*t70337*t70418;
            double t70426 = b2p*c*t70412;
            double t70427 = t70423+t70424+t70425+t70426;
            double t70428 = 1.0/pow(rho_a[index],5.0/3.0);
            double t70429 = 1.0/sqrt(t70413);
            double t70430 = 1.0/t70421;
            double t70431 = t70430*t70356*(1.0/2.0);
            double t70432 = t70431+1.0;
            double t70433 = 1.0/t70427;
            double t70434 = t70343*t70433*(1.0/2.0);
            double t70435 = t70434+1.0;
            double t70436 = a1p*c*t70412;
            double t70437 = t70436+1.0;
            double t70438 = 1.0/t70435;
            double t70439 = 1.0/(t70427*t70427);
            double t70440 = b4p*t70337*t70428*(2.0/3.0);
            double t70441 = b2p*c*t70422*(1.0/3.0);
            double t70442 = b1p*c*t70422*t70429*(1.0/6.0);
            double t70443 = b3p*c*t70422*t70414*(1.0/2.0);
            double t70444 = t70440+t70441+t70442+t70443;
            double t70445 = t70444*t70437*t70438*t70439;
            double t70446 = log(t70435);
            double t70447 = pow(2.0,1.0/3.0);
            double t70448 = t70447*2.0;
            double t70449 = t70448-2.0;
            double t70450 = log(t70432);
            double t70451 = a1f*c*t70412;
            double t70452 = t70451+1.0;
            double t70453 = gcab*gcab;
            double t70457 = 1.0/pow(rho_a[index],8.0/3.0);
            double t70458 = gamma_aa[index]*t70457*(1.0/2.0);
            double t70459 = 1.0/pow(rho_b[index],8.0/3.0);
            double t70460 = gamma_bb[index]*t70459*(1.0/2.0);
            double t70454 = t70460+t70458;
            double t70455 = t70454*t70454;
            double t70456 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t70461 = t70453*t70453;
            double t70462 = t70455*t70455;
            double t70463 = t70453*t70455*6.0;
            double t70464 = gcab*t70453*t70454*t70455*4.0;
            double t70465 = t70461*t70462;
            double t70466 = gcab*t70454*4.0;
            double t70467 = t70463+t70464+t70465+t70466+1.0;
            double t70468 = gcab*t70454;
            double t70469 = t70468+1.0;
            double t70470 = t70453*t70455;
            double t70471 = gcab*t70454*2.0;
            double t70472 = t70470+t70471+1.0;
            double t70473 = t70453*t70455*3.0;
            double t70474 = gcab*t70453*t70454*t70455;
            double t70475 = gcab*t70454*3.0;
            double t70476 = t70473+t70474+t70475+1.0;
            double t70477 = 1.0/t70472;
            double t70478 = 1.0/t70476;
            double t70479 = 1.0/t70469;
            double t70480 = 1.0/t70467;
            double t70481 = 1.0/pow(t70330,7.0/3.0);
            double t70482 = 1.0/pow(t70330,8.0/3.0);
            double t70484 = 1.0/t70364;
            double t70485 = 1.0/(t70361*t70361);
            double t70486 = b4f*t70381*t70337*(2.0/3.0);
            double t70487 = b2f*c*t70342*(1.0/3.0);
            double t70488 = b1f*c*t70342*t70382*(1.0/6.0);
            double t70489 = b3f*c*t70333*t70342*(1.0/2.0);
            double t70490 = t70486+t70487+t70488+t70489;
            double t70491 = a1f*c*c0f*t70342*t70365*(2.0/3.0);
            double t70493 = t70490*t70367*t70484*t70485;
            double t70494 = a1p*c*c0p*t70342*t70368*(2.0/3.0);
            double t70492 = t70390+t70491-t70493-t70494;
            double t70495 = t70389*t70389;
            double t70496 = 1.0/pow(t70332,3.0/2.0);
            double t70497 = b4p*t70337*t70482*(1.0E1/9.0);
            double t70498 = b2p*c*t70481*(4.0/9.0);
            double t70499 = b1p*c*t70382*t70481*(2.0/9.0);
            double t70500 = b3p*c*t70333*t70481*(2.0/3.0);
            double t70501 = b3p*t70337*t70382*t70482*(1.0/1.2E1);
            double t70502 = t70500+t70501+t70497+t70498+t70499-b1p*t70337*t70482*t70496*(1.0/3.6E1);
            double t70503 = 1.0/(t70341*t70341*t70341);
            double t70504 = t70503*t70383*t70348*t70495*2.0;
            double t70505 = t70490*t70490;
            double t70506 = 1.0/(t70346*t70346);
            double t70507 = 1.0/(t70341*t70341*t70341*t70341);
            double t70508 = t70375*2.0;
            double t70509 = 1.0/(t70330*t70330*t70330);
            double t70516 = t70509*t70349*2.0;
            double t70510 = -t70516+t70508;
            double t70511 = t70376*t70376;
            double t70512 = a1p*c*c0p*t70481*t70368*(8.0/9.0);
            double t70513 = 1.0/(t70330*t70330*t70330*t70330*t70330*t70330);
            double t70514 = t70380*t70391*4.0;
            double t70524 = t70350*t70349*t70377*4.0;
            double t70515 = t70514-t70524;
            double t70517 = t70510*t70408*(4.0/3.0);
            double t70518 = 1.0/pow(t70370,2.0/3.0);
            double t70519 = t70511*t70518*(4.0/9.0);
            double t70520 = 1.0/pow(t70372,2.0/3.0);
            double t70521 = t70511*t70520*(4.0/9.0);
            double t70522 = t70521+t70517+t70519-t70510*t70405*(4.0/3.0);
            double t70523 = 1.0/t70401;
            double t70525 = 1.0/(t70398*t70398);
            double t70526 = b4a*t70381*t70337*(2.0/3.0);
            double t70527 = b2a*c*t70342*(1.0/3.0);
            double t70528 = b1a*c*t70342*t70382*(1.0/6.0);
            double t70529 = b3a*c*t70333*t70342*(1.0/2.0);
            double t70530 = t70526+t70527+t70528+t70529;
            double t70531 = t70530*t70530;
            double t70532 = t70502*t70383*t70348*t70384;
            double t70533 = 1.0/t70432;
            double t70534 = b4f*t70337*t70428*(2.0/3.0);
            double t70535 = b2f*c*t70422*(1.0/3.0);
            double t70536 = b1f*c*t70422*t70429*(1.0/6.0);
            double t70537 = b3f*c*t70422*t70414*(1.0/2.0);
            double t70538 = t70534+t70535+t70536+t70537;
            double t70539 = 1.0/(t70421*t70421);
            double t70540 = 1.0/pow(rho_a[index],7.0/3.0);
            double t70541 = 1.0/pow(t70413,3.0/2.0);
            double t70542 = t70538*t70538;
            double t70543 = t70444*t70444;
            double t70544 = 1.0/(t70427*t70427*t70427);
            double t70545 = t70543*t70544*t70437*t70438*2.0;
            double t70546 = b4p*t70337*t70457*(1.0E1/9.0);
            double t70547 = b2p*c*t70540*(4.0/9.0);
            double t70548 = b3p*t70337*t70429*t70457*(1.0/1.2E1);
            double t70549 = b1p*c*t70540*t70429*(2.0/9.0);
            double t70550 = b3p*c*t70414*t70540*(2.0/3.0);
            double t70733 = b1p*t70541*t70337*t70457*(1.0/3.6E1);
            double t70551 = t70550-t70733+t70546+t70547+t70548+t70549;
            double t70552 = 1.0/(t70435*t70435);
            double t70553 = 1.0/(t70427*t70427*t70427*t70427);
            double t70554 = a1p*c*c0p*t70540*t70446*(8.0/9.0);
            double t70555 = a1f*c*c0f*t70422*t70450*(2.0/3.0);
            double t70556 = a1p*c*c0p*t70422*t70446*(2.0/3.0);
            double t70557 = t70343*t70506*t70507*t70348*t70495*(1.0/2.0);
            double t70558 = 1.0/tau_a[index];
            double t70559 = pow(rho_a[index],2.0/3.0);
            double t70560 = pow(rho_a[index],5.0/3.0);
            double t70561 = C_k*t70560*t70558;
            double t70562 = t70561+1.0;
            double t70563 = t70561-1.0;
            double t70564 = 1.0/(t70562*t70562);
            double t70565 = t70563*t70563;
            double t70566 = t70565*t70565;
            double t70567 = t70566*t70566;
            double t70568 = 1.0/pow(t70562,1.1E1);
            double t70569 = 1.0/(t70562*t70562*t70562);
            double t70570 = 1.0/(t70562*t70562*t70562*t70562);
            double t70571 = 1.0/(t70562*t70562*t70562*t70562*t70562);
            double t70572 = 1.0/(t70562*t70562*t70562*t70562*t70562*t70562);
            double t70573 = 1.0/(t70562*t70562*t70562*t70562*t70562*t70562*t70562);
            double t70574 = 1.0/(t70562*t70562*t70562*t70562*t70562*t70562*t70562*t70562);
            double t70575 = 1.0/(t70562*t70562*t70562*t70562*t70562*t70562*t70562*t70562*t70562);
            double t70576 = 1.0/pow(t70562,1.0E1);
            double t70577 = 1.0/(k*k);
            double t70578 = 1.0/kp;
            double t70579 = 1.0/(rho_a[index]*rho_a[index]);
            double t70580 = rho_a[index]*2.0;
            double t70581 = 1.0/pow(t70580,2.0/3.0);
            double t70582 = gamma_aa[index]*mu_*t70581*t70577*t70578*t70579*(1.0/4.0);
            double t70583 = t70582+1.0;
            double t70584 = 1.0/t70583;
            double t70585 = kp-kp*t70584+1.0;
            double t70586 = C_k*C_k;
            double t70587 = pow(rho_a[index],4.0/3.0);
            double t70588 = 1.0/(tau_a[index]*tau_a[index]);
            double t70589 = 1.0/t70562;
            double t70590 = 1.0/pow(t70562,1.2E1);
            double t70591 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t70592 = gamma_aa[index]*mu_*t70581*t70591*t70577*t70578*(1.0/2.0);
            double t70593 = 1.0/pow(t70580,5.0/3.0);
            double t70594 = gamma_aa[index]*mu_*t70593*t70577*t70578*t70579*(1.0/3.0);
            double t70595 = t70592+t70594;
            double t70596 = a_1*t70563*t70589;
            double t70597 = a_10*t70565*t70567*t70576;
            double t70598 = a_11*t70563*t70565*t70567*t70568;
            double t70599 = a_2*t70564*t70565;
            double t70600 = a_3*t70563*t70565*t70569;
            double t70601 = a_4*t70570*t70566;
            double t70602 = a_5*t70571*t70563*t70566;
            double t70603 = a_6*t70572*t70565*t70566;
            double t70604 = a_7*t70563*t70573*t70565*t70566;
            double t70605 = a_8*t70574*t70567;
            double t70606 = a_9*t70563*t70575*t70567;
            double t70607 = t70600+t70601+t70602+t70603+t70604+t70605+t70606+t70596+t70597+t70598+t70599+1.0;
            double t70608 = 1.0/(t70583*t70583);
            double t70609 = C_k*a_1*t70558*t70559*t70589*(5.0/3.0);
            double t70610 = C_k*a_2*t70563*t70564*t70558*t70559*(1.0E1/3.0);
            double t70611 = C_k*a_10*t70563*t70558*t70567*t70576*t70559*(5.0E1/3.0);
            double t70612 = C_k*a_11*t70565*t70558*t70567*t70559*t70568*(5.5E1/3.0);
            double t70613 = C_k*a_3*t70565*t70558*t70559*t70569*5.0;
            double t70614 = C_k*a_4*t70570*t70563*t70565*t70558*t70559*(2.0E1/3.0);
            double t70615 = C_k*a_5*t70571*t70566*t70558*t70559*(2.5E1/3.0);
            double t70616 = C_k*a_6*t70563*t70572*t70566*t70558*t70559*1.0E1;
            double t70617 = C_k*a_7*t70573*t70565*t70566*t70558*t70559*(3.5E1/3.0);
            double t70618 = C_k*a_8*t70563*t70565*t70574*t70566*t70558*t70559*(4.0E1/3.0);
            double t70619 = C_k*a_9*t70575*t70558*t70567*t70559*1.5E1;
            double t70620 = t70610+t70611+t70612+t70613+t70614+t70615+t70616+t70617+t70609+t70618+t70619-C_k* \
               a_1*t70563*t70564*t70558*t70559*(5.0/3.0)-C_k*a_2*t70565*t70558*t70559*t70569*(1.0E1/3.0)-C_k*a_4* \
               t70571*t70566*t70558*t70559*(2.0E1/3.0)-C_k*a_8*t70575*t70558*t70567*t70559*(4.0E1/3.0)-C_k*a_10*t70565* \
               t70558*t70567*t70559*t70568*(5.0E1/3.0)-C_k*a_3*t70570*t70563*t70565*t70558*t70559*5.0-C_k*a_5*t70563* \
               t70572*t70566*t70558*t70559*(2.5E1/3.0)-C_k*a_6*t70573*t70565*t70566*t70558*t70559*1.0E1-C_k*a_9*t70563* \
               t70558*t70567*t70576*t70559*1.5E1-C_k*a_11*t70563*t70590*t70565*t70558*t70567*t70559*(5.5E1/3.0)-C_k* \
               a_7*t70563*t70565*t70574*t70566*t70558*t70559*(3.5E1/3.0);
            double t70621 = c0f*t70450*t70452*2.0;
            double t70623 = c0p*t70437*t70446*2.0;
            double t70622 = t70621-t70623;
            double t70624 = 1.0/pow(rho_b[index],1.0/3.0);
            double t70625 = c*t70624;
            double t70626 = sqrt(t70625);
            double t70627 = pow(t70625,3.0/2.0);
            double t70628 = 1.0/pow(rho_b[index],2.0/3.0);
            double t70629 = b1p*t70626;
            double t70630 = b3p*t70627;
            double t70631 = b4p*t70337*t70628;
            double t70632 = b2p*c*t70624;
            double t70633 = t70630+t70631+t70632+t70629;
            double t70634 = 1.0/t70633;
            double t70635 = t70343*t70634*(1.0/2.0);
            double t70636 = t70635+1.0;
            double t70637 = log(t70636);
            double t70638 = a1p*c*t70624;
            double t70639 = t70638+1.0;
            double t70640 = c0p*t70637*t70639*2.0;
            double t70641 = t70380*t70355*t70374*t70377*t70369;
            double t70642 = Aa*t70402*t70411*t70404*t70355*t70374*t70392*2.0;
            double t70643 = gamma_aa[index]*gcab*t70456*(1.6E1/3.0);
            double t70644 = gamma_aa[index]*gcab*t70453*t70455*t70456*1.6E1;
            double t70645 = gamma_aa[index]*t70461*t70454*t70455*t70456*(1.6E1/3.0);
            double t70646 = gamma_aa[index]*t70453*t70454*t70456*1.6E1;
            double t70647 = t70643+t70644+t70645+t70646;
            double t70648 = 1.0/(t70469*t70469);
            double t70649 = gamma_aa[index]*gamma_aa[index];
            double t70650 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t70651 = gamma_aa[index]*gcab*t70456*(8.0/3.0);
            double t70652 = gamma_aa[index]*t70453*t70454*t70456*(8.0/3.0);
            double t70653 = t70651+t70652;
            double t70654 = 1.0/(t70476*t70476);
            double t70655 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t70656 = 1.0/(t70467*t70467);
            double t70657 = 1.0/(t70472*t70472);
            double t70658 = gamma_aa[index]*gcab*t70456*4.0;
            double t70659 = gamma_aa[index]*gcab*t70453*t70455*t70456*4.0;
            double t70660 = gamma_aa[index]*t70453*t70454*t70456*8.0;
            double t70661 = t70660+t70658+t70659;
            double t70741 = t70452*t70533*t70538*t70539;
            double t70662 = -t70741+t70445+t70555-t70556;
            double t70663 = gcaa*gcaa;
            double t70664 = t70649*t70649;
            double t70665 = t70663*t70663;
            double t70666 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t70667 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t70668 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t70669 = t70622*t70355*t70449;
            double t70670 = t70623+t70669;
            double t70671 = tau_a[index]-1.0/1.0E20;
            double t70672 = ( (t70671 > 0.0) ?  1.0 : 0.0 ) ;
            double t70673 = tau_a[index]*2.0;
            double t70674 = 1.0/rho_a[index];
            double t70701 = gamma_aa[index]*t70674*(1.0/4.0);
            double t70675 = -t70701+t70673;
            double t70676 = t70558*t70675*(1.0/2.0);
            double t70677 = t70676-1.0;
            double t70678 = t70672*t70677;
            double t70679 = t70678+1.0;
            double t70680 = gamma_aa[index]*gcaa*t70457*4.0;
            double t70681 = gamma_aa[index]*gcaa*t70663*t70649*t70667*4.0;
            double t70682 = t70663*t70649*t70668*6.0;
            double t70683 = t70664*t70665*t70666;
            double t70684 = t70680+t70681+t70682+t70683+1.0;
            double t70685 = 1.0/t70684;
            double t70686 = gamma_aa[index]*gcaa*t70457;
            double t70687 = t70686+1.0;
            double t70688 = 1.0/t70687;
            double t70689 = gamma_aa[index]*gcaa*t70457*3.0;
            double t70690 = gamma_aa[index]*gcaa*t70663*t70649*t70667;
            double t70691 = t70663*t70649*t70668*3.0;
            double t70692 = t70690+t70691+t70689+1.0;
            double t70693 = 1.0/t70692;
            double t70694 = gamma_aa[index]*gcaa*t70457*2.0;
            double t70695 = t70663*t70649*t70668;
            double t70696 = t70694+t70695+1.0;
            double t70697 = 1.0/t70696;
            double t70698 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t70699 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t70700 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t70702 = 1.0/pow(rho_a[index],1.0E1);
            double t70703 = 1.0/(t70687*t70687);
            double t70704 = gamma_aa[index]*gcaa*t70456*(3.2E1/3.0);
            double t70705 = gamma_aa[index]*gcaa*t70663*t70649*t70699*3.2E1;
            double t70706 = t70663*t70649*t70698*3.2E1;
            double t70707 = t70700*t70664*t70665*(3.2E1/3.0);
            double t70708 = t70704+t70705+t70706+t70707;
            double t70709 = gamma_aa[index]*gcaa*t70456*(1.6E1/3.0);
            double t70710 = t70663*t70649*t70698*(1.6E1/3.0);
            double t70711 = t70710+t70709;
            double t70712 = gamma_aa[index]*gcaa*t70456*8.0;
            double t70713 = gamma_aa[index]*gcaa*t70663*t70649*t70699*8.0;
            double t70714 = t70663*t70649*t70698*1.6E1;
            double t70715 = t70712+t70713+t70714;
            double t70716 = 1.0/(t70692*t70692);
            double t70717 = 1.0/(t70684*t70684);
            double t70718 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t70719 = 1.0/(t70696*t70696);
            double t70720 = ccaa4*t70664*t70665*t70666*t70685;
            double t70721 = ccaa1*gamma_aa[index]*gcaa*t70457*t70688;
            double t70722 = ccaa3*gamma_aa[index]*gcaa*t70663*t70693*t70649*t70667;
            double t70723 = ccaa2*t70663*t70649*t70668*t70697;
            double t70724 = ccaa0+t70720+t70721+t70722+t70723;
            double t70725 = 1.0/(t70421*t70421*t70421);
            double t70726 = b4f*t70337*t70457*(1.0E1/9.0);
            double t70727 = b2f*c*t70540*(4.0/9.0);
            double t70728 = b3f*t70337*t70429*t70457*(1.0/1.2E1);
            double t70729 = b1f*c*t70540*t70429*(2.0/9.0);
            double t70730 = b3f*c*t70414*t70540*(2.0/3.0);
            double t70731 = t70730+t70726+t70727+t70728+t70729-b1f*t70541*t70337*t70457*(1.0/3.6E1);
            double t70732 = t70452*t70533*t70731*t70539;
            double t70734 = t70551*t70437*t70438*t70439;
            double t70735 = 1.0/(t70432*t70432);
            double t70736 = 1.0/(t70421*t70421*t70421*t70421);
            double t70737 = t70452*t70542*t70356*t70735*t70736*(1.0/2.0);
            double t70738 = t70343*t70543*t70552*t70553*t70437*(1.0/2.0);
            double t70739 = a1f*c*t70422*t70533*t70538*t70539*(2.0/3.0);
            double t70740 = a1p*c*t70422*t70444*t70438*t70439*(2.0/3.0);
            double t70742 = ccaa4*t70700*t70664*t70665*t70685*(3.2E1/3.0);
            double t70743 = ccaa1*gamma_aa[index]*gcaa*t70456*t70688*(8.0/3.0);
            double t70744 = ccaa3*gamma_aa[index]*gcaa*t70663*t70693*t70649*t70699*8.0;
            double t70745 = ccaa2*t70663*t70649*t70697*t70698*(1.6E1/3.0);
            double t70750 = ccaa1*t70703*t70663*t70649*t70698*(8.0/3.0);
            double t70751 = ccaa3*gamma_aa[index]*gcaa*t70715*t70716*t70663*t70649*t70667;
            double t70752 = ccaa4*t70708*t70717*t70664*t70665*t70666;
            double t70753 = ccaa2*t70711*t70663*t70719*t70649*t70668;
            double t70746 = -t70750+t70742-t70751+t70743-t70752+t70744-t70753+t70745;
            double t70747 = t70741-t70445-t70555+t70556;
            double t70748 = t70355*t70449*t70747;
            double t70749 = t70445-t70556+t70748;
            v_rho_a_rho_a_[index] = (rho_a[index]*t70670+rho_b[index]*(t70640-t70355*t70449*(t70640-c0f*log((t70356* \
               (1.0/2.0))/(b1f*t70626+b3f*t70627+b2f*c*t70624+b4f*t70337*t70628)+1.0)*(a1f*c*t70624+1.0)*2.0))-t70330* \
               (t70641+t70642+t70379))*(-ccab2*t70453*t70455*t70657*(gamma_aa[index]*gcab*t70655*(8.8E1/9.0)+t70650* \
               t70453*t70649*(3.2E1/9.0)+gamma_aa[index]*t70453*t70454*t70655*(8.8E1/9.0))+ccab2*t70453*1.0/(t70472* \
               t70472*t70472)*t70455*(t70653*t70653)*2.0+ccab4*t70461*t70462*1.0/(t70467*t70467*t70467)*(t70647*t70647) \
               *2.0+ccab1*gamma_aa[index]*gcab*t70655*t70479*(4.4E1/9.0)-ccab1*t70650*t70453*t70648*t70649*(3.2E1/ \
               9.0)+ccab2*t70650*t70453*t70477*t70649*(3.2E1/9.0)-ccab4*t70461*t70462*t70656*(gamma_aa[index]*gcab* \
               t70655*(1.76E2/9.0)+t70650*t70453*t70649*(6.4E1/3.0)+gamma_aa[index]*t70453*t70454*t70655*(1.76E2/ \
               3.0)+t70461*t70650*t70455*t70649*(6.4E1/3.0)+gamma_aa[index]*gcab*t70453*t70455*t70655*(1.76E2/3.0) \
               +gamma_aa[index]*t70461*t70454*t70455*t70655*(1.76E2/9.0)+gcab*t70650*t70453*t70454*t70649*(1.28E2/ \
               3.0))+ccab4*t70461*t70650*t70480*t70455*t70649*(6.4E1/3.0)-ccab1*gamma_aa[index]*t70453*t70454*t70655* \
               t70648*(4.4E1/9.0)+ccab2*gamma_aa[index]*t70453*t70454*t70655*t70477*(8.8E1/9.0)+ccab3*gcab*t70453* \
               t70454*(t70661*t70661)*t70455*1.0/(t70476*t70476*t70476)*2.0+ccab3*gamma_aa[index]*gcab*t70453*t70455* \
               t70655*t70478*(4.4E1/3.0)+ccab4*gamma_aa[index]*t70461*t70480*t70454*t70455*t70655*(1.76E2/9.0)-ccab2* \
               gamma_aa[index]*t70453*t70454*t70653*t70456*t70657*(1.6E1/3.0)+ccab3*gcab*t70650*t70453*t70454*t70478* \
               t70649*(3.2E1/3.0)+ccab1*gcab*t70650*t70453*t70454*1.0/(t70469*t70469*t70469)*t70649*(3.2E1/9.0)-ccab3* \
               gcab*t70453*t70454*t70455*t70654*(gamma_aa[index]*gcab*t70655*(4.4E1/3.0)+t70650*t70453*t70649*(3.2E1/ \
               3.0)+gamma_aa[index]*t70453*t70454*t70655*(8.8E1/3.0)+gamma_aa[index]*gcab*t70453*t70455*t70655*(4.4E1/ \
               3.0)+gcab*t70650*t70453*t70454*t70649*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t70453*t70661*t70455* \
               t70456*t70654*8.0-ccab4*gamma_aa[index]*t70461*t70454*t70455*t70456*t70647*t70656*(3.2E1/3.0))-(X- \
               1.0)*(t70620*t70585*2.0+rho_a[index]*t70585*(C_k*a_1*t70412*t70558*t70589*(1.0E1/9.0)-a_1*t70564*t70586* \
               t70587*t70588*(5.0E1/9.0)+a_2*t70564*t70586*t70587*t70588*(5.0E1/9.0)+a_1*t70563*t70586*t70569*t70587* \
               t70588*(5.0E1/9.0)+a_10*t70567*t70576*t70586*t70587*t70588*2.5E2+a_2*t70570*t70565*t70586*t70587*t70588* \
               (5.0E1/3.0)-a_2*t70563*t70586*t70569*t70587*t70588*(2.0E2/9.0)-a_3*t70570*t70565*t70586*t70587*t70588* \
               5.0E1+a_3*t70563*t70586*t70569*t70587*t70588*(5.0E1/3.0)+a_4*t70570*t70565*t70586*t70587*t70588*(1.0E2/ \
               3.0)+a_4*t70572*t70566*t70586*t70587*t70588*(5.0E2/9.0)-a_5*t70572*t70566*t70586*t70587*t70588*(1.25E3/ \
               9.0)+a_6*t70572*t70566*t70586*t70587*t70588*(2.5E2/3.0)+a_8*t70567*t70576*t70586*t70587*t70588*2.0E2- \
               a_9*t70567*t70576*t70586*t70587*t70588*4.5E2-C_k*a_1*t70412*t70563*t70564*t70558*(1.0E1/9.0)+C_k*a_2* \
               t70412*t70563*t70564*t70558*(2.0E1/9.0)-C_k*a_2*t70412*t70565*t70558*t70569*(2.0E1/9.0)+C_k*a_3*t70412* \
               t70565*t70558*t70569*(1.0E1/3.0)-C_k*a_4*t70412*t70571*t70566*t70558*(4.0E1/9.0)+C_k*a_5*t70412*t70571* \
               t70566*t70558*(5.0E1/9.0)-C_k*a_8*t70412*t70575*t70558*t70567*(8.0E1/9.0)+C_k*a_9*t70412*t70575*t70558* \
               t70567*1.0E1+C_k*a_10*t70412*t70563*t70558*t70567*t70576*(1.0E2/9.0)-C_k*a_10*t70412*t70565*t70558* \
               t70567*t70568*(1.0E2/9.0)+C_k*a_11*t70412*t70565*t70558*t70567*t70568*(1.1E2/9.0)-C_k*a_3*t70412*t70570* \
               t70563*t70565*t70558*(1.0E1/3.0)+C_k*a_4*t70412*t70570*t70563*t70565*t70558*(4.0E1/9.0)-C_k*a_5*t70412* \
               t70563*t70572*t70566*t70558*(5.0E1/9.0)+C_k*a_6*t70412*t70563*t70572*t70566*t70558*(2.0E1/3.0)-C_k* \
               a_6*t70412*t70573*t70565*t70566*t70558*(2.0E1/3.0)+C_k*a_7*t70412*t70573*t70565*t70566*t70558*(7.0E1/ \
               9.0)-C_k*a_9*t70412*t70563*t70558*t70567*t70576*1.0E1+a_10*t70590*t70565*t70567*t70586*t70587*t70588* \
               (2.75E3/9.0)-a_11*t70590*t70565*t70567*t70586*t70587*t70588*(6.05E3/9.0)-a_10*t70563*t70567*t70568* \
               t70586*t70587*t70588*(5.0E3/9.0)+a_11*t70563*t70567*t70568*t70586*t70587*t70588*(2.75E3/9.0)+a_3*t70571* \
               t70563*t70565*t70586*t70587*t70588*(1.0E2/3.0)-a_4*t70571*t70563*t70565*t70586*t70587*t70588*(8.0E2/ \
               9.0)+a_5*t70571*t70563*t70565*t70586*t70587*t70588*(5.0E2/9.0)+a_5*t70563*t70573*t70566*t70586*t70587* \
               t70588*(2.5E2/3.0)-a_6*t70563*t70573*t70566*t70586*t70587*t70588*2.0E2+a_6*t70565*t70574*t70566*t70586* \
               t70587*t70588*(3.5E2/3.0)+a_7*t70563*t70573*t70566*t70586*t70587*t70588*(3.5E2/3.0)-a_7*t70565*t70574* \
               t70566*t70586*t70587*t70588*(2.45E3/9.0)+a_8*t70565*t70574*t70566*t70586*t70587*t70588*(1.4E3/9.0) \
               +a_9*t70563*t70567*t70568*t70586*t70587*t70588*2.5E2+a_11*1.0/pow(t70562,1.3E1)*t70563*t70565*t70567* \
               t70586*t70587*t70588*(1.1E3/3.0)-C_k*a_11*t70412*t70563*t70590*t70565*t70558*t70567*(1.1E2/9.0)-C_k* \
               a_7*t70412*t70563*t70565*t70574*t70566*t70558*(7.0E1/9.0)+C_k*a_8*t70412*t70563*t70565*t70574*t70566* \
               t70558*(8.0E1/9.0)+a_7*t70563*t70565*t70566*t70575*t70586*t70587*t70588*(1.4E3/9.0)-a_8*t70563*t70565* \
               t70566*t70575*t70586*t70587*t70588*(3.2E3/9.0)+a_9*t70563*t70565*t70566*t70575*t70586*t70587*t70588* \
               2.0E2)-kp*t70607*t70608*t70595*2.0+kp*rho_a[index]*t70607*t70608*(gamma_aa[index]*mu_*t70591*t70593* \
               t70577*t70578*(4.0/3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               *t70581*t70577*t70578*(3.0/2.0)+gamma_aa[index]*mu_*1.0/pow(t70580,8.0/3.0)*t70577*t70578*t70579*(1.0E1/ \
               9.0))-kp*rho_a[index]*t70607*1.0/(t70583*t70583*t70583)*(t70595*t70595)*2.0-kp*rho_a[index]*t70620* \
               t70608*t70595*2.0)+(t70641+t70642+t70379+rho_a[index]*(-t70445+t70556+t70355*t70449*(t70445+t70555- \
               t70452*t70533*t70538*t70539-a1p*c*c0p*t70422*t70446*(2.0/3.0)))+t70330*(t70390-a1p*c*c0p*t70342*t70368* \
               (2.0/3.0)-t70380*t70355*t70391*t70374*t70369*4.0-t70380*t70355*t70374*t70492*t70377+t70380*t70355* \
               t70409*t70377*t70369+t70350*t70355*t70374*t70349*t70377*t70369*4.0+Aa*t70402*t70411*t70404*t70355* \
               t70409*t70392*2.0-Aa*t70402*t70404*t70515*t70355*t70374*t70392*2.0+t70411*t70404*t70530*t70523*t70525* \
               t70355*t70374*t70392-Aa*a1a*c*t70402*t70411*t70342*t70355*t70374*t70392*(2.0/3.0))-c0p*t70437*t70446* \
               2.0-t70622*t70355*t70449)*(ccab1*gamma_aa[index]*gcab*t70456*t70479*(4.0/3.0)-ccab2*t70453*t70455* \
               t70653*t70657-ccab4*t70461*t70462*t70647*t70656-ccab1*gamma_aa[index]*t70453*t70454*t70456*t70648* \
               (4.0/3.0)+ccab2*gamma_aa[index]*t70453*t70454*t70456*t70477*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t70453* \
               t70455*t70456*t70478*4.0+ccab4*gamma_aa[index]*t70461*t70480*t70454*t70455*t70456*(1.6E1/3.0)-ccab3* \
               gcab*t70453*t70454*t70661*t70455*t70654)*2.0-(ccab0+ccab1*gcab*t70454*t70479+ccab4*t70461*t70462*t70480+ \
               ccab2*t70453*t70455*t70477+ccab3*gcab*t70453*t70454*t70455*t70478)*(-t70330*(-t70512-t70504+t70532+ \
               t70557+t70380*t70355*t70374*t70377*(t70512+t70504-t70532-t70557-1.0/(t70361*t70361*t70361)*t70505* \
               t70367*t70484*2.0+t70367*t70484*t70485*(b2f*c*t70481*(4.0/9.0)+b4f*t70337*t70482*(1.0E1/9.0)+b1f*c* \
               t70382*t70481*(2.0/9.0)+b3f*c*t70333*t70481*(2.0/3.0)-b1f*t70337*t70482*t70496*(1.0/3.6E1)+b3f*t70337* \
               t70382*t70482*(1.0/1.2E1))+1.0/(t70361*t70361*t70361*t70361)*t70505*1.0/(t70364*t70364)*t70356*t70367* \
               (1.0/2.0)-a1f*c*c0f*t70481*t70365*(8.0/9.0)+a1f*c*t70342*t70490*t70484*t70485*(2.0/3.0)-a1p*c*t70342* \
               t70383*t70384*t70389*(2.0/3.0))-t70513*t70380*t70355*t70374*t70369*2.0E1-t70380*t70355*t70391*t70374* \
               t70492*8.0-t70522*t70380*t70355*t70377*t70369+t70380*t70355*t70391*t70409*t70369*8.0+t70380*t70355* \
               t70409*t70492*t70377*2.0-t70350*t70355*t70374*t70377*t70369*1.2E1+t70350*t70355*t70391*t70374*t70349* \
               t70369*3.2E1+t70350*t70355*t70374*t70492*t70349*t70377*8.0-t70350*t70355*t70409*t70349*t70377*t70369* \
               8.0+a1p*c*t70342*t70383*t70384*t70389*(2.0/3.0)-Aa*t70402*t70411*t70404*t70522*t70355*t70392*2.0+Aa* \
               t70402*t70404*t70515*t70355*t70409*t70392*4.0-Aa*t70402*t70404*t70355*t70374*t70392*(t70513*t70380* \
               2.0E1+t70350*t70377*1.2E1-t70350*t70391*t70349*3.2E1)*2.0-t70411*t70404*t70530*t70523*t70525*t70355* \
               t70409*t70392*2.0+t70404*t70530*t70523*t70515*t70525*t70355*t70374*t70392*2.0-t70411*t70404*t70531* \
               t70523*t70355*t70374*t70392*1.0/(t70398*t70398*t70398)*2.0+t70411*t70404*t70523*t70525*t70355*t70374* \
               t70392*(b2a*c*t70481*(4.0/9.0)+b4a*t70337*t70482*(1.0E1/9.0)+b1a*c*t70382*t70481*(2.0/9.0)+b3a*c*t70333* \
               t70481*(2.0/3.0)-b1a*t70337*t70482*t70496*(1.0/3.6E1)+b3a*t70337*t70382*t70482*(1.0/1.2E1))+Aa*a1a* \
               c*t70402*t70411*t70342*t70355*t70409*t70392*(4.0/3.0)-Aa*a1a*c*t70402*t70411*t70355*t70481*t70374* \
               t70392*(8.0/9.0)-Aa*a1a*c*t70402*t70342*t70515*t70355*t70374*t70392*(4.0/3.0)+1.0/(t70401*t70401)* \
               t70411*t70404*t70531*t70355*t70374*t70392*t70393*1.0/(t70398*t70398*t70398*t70398)*(1.0/2.0)+a1a*c* \
               t70411*t70530*t70342*t70523*t70525*t70355*t70374*t70392*(2.0/3.0))+rho_a[index]*(t70740-t70545-t70554+ \
               t70734+t70738+t70355*t70449*(t70732+t70545+t70554+t70737+t70739-t70452*t70533*t70542*t70725*2.0-t70551* \
               t70437*t70438*t70439-a1f*c*c0f*t70450*t70540*(8.0/9.0)-t70343*t70543*t70552*t70553*t70437*(1.0/2.0) \
               -a1p*c*t70422*t70444*t70438*t70439*(2.0/3.0)))+t70355*t70662*t70449*2.0-t70444*t70437*t70438*t70439* \
               2.0+t70383*t70348*t70384*t70389*2.0+a1p*c*c0p*t70422*t70446*(4.0/3.0)-a1p*c*c0p*t70342*t70368*(4.0/ \
               3.0)-t70380*t70355*t70391*t70374*t70369*8.0-t70380*t70355*t70374*t70492*t70377*2.0+t70380*t70355*t70409* \
               t70377*t70369*2.0+t70350*t70355*t70374*t70349*t70377*t70369*8.0+Aa*t70402*t70411*t70404*t70355*t70409* \
               t70392*4.0-Aa*t70402*t70404*t70515*t70355*t70374*t70392*4.0+t70411*t70404*t70530*t70523*t70525*t70355* \
               t70374*t70392*2.0-Aa*a1a*c*t70402*t70411*t70342*t70355*t70374*t70392*(4.0/3.0))+t70724*t70679*(-t70445+ \
               t70556+t70355*t70662*t70449)*2.0+t70670*t70746*t70679*2.0-rho_a[index]*t70670*t70679*(ccaa1*gamma_aa[index]* \
               gcaa*t70655*t70688*(8.8E1/9.0)-ccaa1*t70703*t70650*t70663*t70649*2.4E1+ccaa2*t70650*t70663*t70649* \
               t70697*(3.04E2/9.0)+ccaa4*t70664*t70718*t70665*t70685*(1.12E3/9.0)-ccaa4*t70700*t70708*t70717*t70664* \
               t70665*(6.4E1/3.0)-ccaa2*t70711*t70663*t70719*t70649*t70698*(3.2E1/3.0)-ccaa2*t70663*t70719*t70649* \
               t70668*(gamma_aa[index]*gcaa*t70655*(1.76E2/9.0)+t70650*t70663*t70649*(3.04E2/9.0))-ccaa4*t70717*t70664* \
               t70665*t70666*(gamma_aa[index]*gcaa*t70655*(3.52E2/9.0)+t70650*t70663*t70649*(6.08E2/3.0)+t70664*t70718* \
               t70665*(1.12E3/9.0)+gamma_aa[index]*gcaa*t70702*t70663*t70649*2.88E2)+ccaa2*(t70711*t70711)*t70663* \
               t70649*t70668*1.0/(t70696*t70696*t70696)*2.0+ccaa4*(t70708*t70708)*t70664*t70665*t70666*1.0/(t70684* \
               t70684*t70684)*2.0+ccaa3*gamma_aa[index]*gcaa*t70702*t70663*t70693*t70649*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t70702*t70663*t70649*1.0/(t70687*t70687*t70687)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*(t70715* \
               t70715)*t70663*1.0/(t70692*t70692*t70692)*t70649*t70667*2.0-ccaa3*gamma_aa[index]*gcaa*t70716*t70663* \
               t70649*t70667*(gamma_aa[index]*gcaa*t70655*(8.8E1/3.0)+t70650*t70663*t70649*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t70702*t70663*t70649*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t70715*t70716*t70663*t70649*t70699*1.6E1) \
               +rho_a[index]*t70746*t70749*t70679*2.0+rho_a[index]*t70724*t70679*(t70740-t70545-t70554+t70734+t70738- \
               t70355*t70449*(t70740-t70732-t70545-t70554+t70734-t70737+t70738-t70739+t70452*t70533*t70542*t70725* \
               2.0+a1f*c*c0f*t70450*t70540*(8.0/9.0)))+gamma_aa[index]*t70670*t70672*t70674*t70746*t70558*(1.0/4.0) \
               -gamma_aa[index]*t70724*t70672*t70674*t70558*t70749*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            double t75068 = 1.0/pow(rho_a[index],1.0/3.0);
            double t75069 = c*t75068;
            double t75070 = sqrt(t75069);
            double t75071 = b1f*t75070;
            double t75072 = pow(t75069,3.0/2.0);
            double t75073 = b3f*t75072;
            double t75074 = c*c;
            double t75075 = 1.0/pow(rho_a[index],2.0/3.0);
            double t75076 = b4f*t75074*t75075;
            double t75077 = b2f*c*t75068;
            double t75078 = t75071+t75073+t75076+t75077;
            double t75079 = 1.0/pow(rho_a[index],4.0/3.0);
            double t75080 = b1p*t75070;
            double t75081 = b3p*t75072;
            double t75082 = b4p*t75074*t75075;
            double t75083 = b2p*c*t75068;
            double t75084 = t75080+t75081+t75082+t75083;
            double t75085 = 1.0/pow(rho_a[index],5.0/3.0);
            double t75086 = 1.0/sqrt(t75069);
            double t75087 = 1.0/c0f;
            double t75088 = 1.0/t75078;
            double t75089 = t75087*t75088*(1.0/2.0);
            double t75090 = t75089+1.0;
            double t75091 = 1.0/c0p;
            double t75092 = 1.0/t75084;
            double t75093 = t75091*t75092*(1.0/2.0);
            double t75094 = t75093+1.0;
            double t75095 = a1p*c*t75068;
            double t75096 = t75095+1.0;
            double t75097 = 1.0/t75094;
            double t75098 = 1.0/(t75084*t75084);
            double t75099 = b4p*t75074*t75085*(2.0/3.0);
            double t75100 = b2p*c*t75079*(1.0/3.0);
            double t75101 = b1p*c*t75086*t75079*(1.0/6.0);
            double t75102 = b3p*c*t75070*t75079*(1.0/2.0);
            double t75103 = t75100+t75101+t75102+t75099;
            double t75104 = t75103*t75096*t75097*t75098;
            double t75105 = log(t75094);
            double t75106 = gamma_aa[index]*gamma_aa[index];
            double t75107 = gcaa*gcaa;
            double t75108 = t75106*t75106;
            double t75109 = t75107*t75107;
            double t75110 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t75111 = 1.0/pow(rho_a[index],8.0/3.0);
            double t75112 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t75113 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t75114 = pow(2.0,1.0/3.0);
            double t75115 = t75114*2.0;
            double t75116 = t75115-2.0;
            double t75117 = two_13*2.0;
            double t75118 = t75117-2.0;
            double t75119 = 1.0/t75118;
            double t75120 = log(t75090);
            double t75121 = a1f*c*t75068;
            double t75122 = t75121+1.0;
            double t75123 = tau_a[index]-1.0/1.0E20;
            double t75124 = ( (t75123 > 0.0) ?  1.0 : 0.0 ) ;
            double t75125 = 1.0/tau_a[index];
            double t75126 = tau_a[index]*2.0;
            double t75127 = 1.0/rho_a[index];
            double t75175 = gamma_aa[index]*t75127*(1.0/4.0);
            double t75128 = t75126-t75175;
            double t75129 = t75125*t75128*(1.0/2.0);
            double t75130 = t75129-1.0;
            double t75131 = t75130*t75124;
            double t75132 = t75131+1.0;
            double t75133 = gamma_aa[index]*gcaa*t75111*4.0;
            double t75134 = gamma_aa[index]*gcaa*t75112*t75106*t75107*4.0;
            double t75135 = t75113*t75106*t75107*6.0;
            double t75136 = t75110*t75108*t75109;
            double t75137 = t75133+t75134+t75135+t75136+1.0;
            double t75138 = 1.0/t75137;
            double t75139 = gamma_aa[index]*gcaa*t75111;
            double t75140 = t75139+1.0;
            double t75141 = 1.0/t75140;
            double t75142 = gamma_aa[index]*gcaa*t75111*3.0;
            double t75143 = gamma_aa[index]*gcaa*t75112*t75106*t75107;
            double t75144 = t75113*t75106*t75107*3.0;
            double t75145 = t75142+t75143+t75144+1.0;
            double t75146 = 1.0/t75145;
            double t75147 = gamma_aa[index]*gcaa*t75111*2.0;
            double t75148 = t75113*t75106*t75107;
            double t75149 = t75147+t75148+1.0;
            double t75150 = 1.0/t75149;
            double t75151 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t75152 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t75153 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t75154 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t75155 = pow(rho_a[index],2.0/3.0);
            double t75156 = pow(rho_a[index],5.0/3.0);
            double t75157 = C_k*t75125*t75156;
            double t75158 = t75157+1.0;
            double t75159 = t75157-1.0;
            double t75160 = 1.0/(t75158*t75158);
            double t75161 = t75159*t75159;
            double t75162 = t75161*t75161;
            double t75163 = t75162*t75162;
            double t75164 = 1.0/pow(t75158,1.1E1);
            double t75165 = 1.0/(t75158*t75158*t75158);
            double t75166 = 1.0/(t75158*t75158*t75158*t75158);
            double t75167 = 1.0/(t75158*t75158*t75158*t75158*t75158);
            double t75168 = 1.0/(t75158*t75158*t75158*t75158*t75158*t75158);
            double t75169 = 1.0/(t75158*t75158*t75158*t75158*t75158*t75158*t75158);
            double t75170 = 1.0/(t75158*t75158*t75158*t75158*t75158*t75158*t75158*t75158);
            double t75171 = 1.0/(t75158*t75158*t75158*t75158*t75158*t75158*t75158*t75158*t75158);
            double t75172 = 1.0/pow(t75158,1.0E1);
            double t75173 = c0f*t75120*t75122*2.0;
            double t75174 = c0p*t75105*t75096*2.0;
            double t75176 = 1.0/pow(rho_a[index],1.0E1);
            double t75177 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t75178 = 1.0/(t75140*t75140);
            double t75179 = gamma_aa[index]*gcaa*t75152*(3.2E1/3.0);
            double t75180 = gamma_aa[index]*gcaa*t75106*t75107*t75153*3.2E1;
            double t75181 = t75106*t75151*t75107*3.2E1;
            double t75182 = t75108*t75109*t75154*(3.2E1/3.0);
            double t75183 = t75180+t75181+t75182+t75179;
            double t75184 = gamma_aa[index]*gcaa*t75152*(1.6E1/3.0);
            double t75185 = t75106*t75151*t75107*(1.6E1/3.0);
            double t75186 = t75184+t75185;
            double t75187 = gamma_aa[index]*gcaa*t75152*8.0;
            double t75188 = gamma_aa[index]*gcaa*t75106*t75107*t75153*8.0;
            double t75189 = t75106*t75151*t75107*1.6E1;
            double t75190 = t75187+t75188+t75189;
            double t75191 = 1.0/(t75145*t75145);
            double t75192 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t75193 = 1.0/(t75137*t75137);
            double t75194 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t75195 = 1.0/(t75149*t75149);
            double t75196 = ccaa4*t75110*t75108*t75109*t75138;
            double t75197 = ccaa1*gamma_aa[index]*gcaa*t75111*t75141;
            double t75198 = ccaa3*gamma_aa[index]*gcaa*t75112*t75106*t75107*t75146;
            double t75199 = ccaa2*t75113*t75150*t75106*t75107;
            double t75200 = ccaa0+t75196+t75197+t75198+t75199;
            double t75201 = 1.0/t75090;
            double t75202 = b4f*t75074*t75085*(2.0/3.0);
            double t75203 = b2f*c*t75079*(1.0/3.0);
            double t75204 = b1f*c*t75086*t75079*(1.0/6.0);
            double t75205 = b3f*c*t75070*t75079*(1.0/2.0);
            double t75206 = t75202+t75203+t75204+t75205;
            double t75207 = 1.0/(t75078*t75078);
            double t75208 = 1.0/pow(rho_a[index],7.0/3.0);
            double t75209 = 1.0/pow(t75069,3.0/2.0);
            double t75210 = t75206*t75206;
            double t75211 = t75103*t75103;
            double t75212 = 1.0/(t75084*t75084*t75084);
            double t75213 = t75211*t75212*t75096*t75097*2.0;
            double t75214 = b4p*t75111*t75074*(1.0E1/9.0);
            double t75215 = b2p*c*t75208*(4.0/9.0);
            double t75216 = b3p*t75111*t75074*t75086*(1.0/1.2E1);
            double t75217 = b1p*c*t75208*t75086*(2.0/9.0);
            double t75218 = b3p*c*t75070*t75208*(2.0/3.0);
            double t75219 = t75214+t75215+t75216+t75217+t75218-b1p*t75111*t75074*t75209*(1.0/3.6E1);
            double t75220 = 1.0/(t75094*t75094);
            double t75221 = 1.0/(t75084*t75084*t75084*t75084);
            double t75222 = a1p*c*c0p*t75105*t75208*(8.0/9.0);
            double t75223 = a1f*c*c0f*t75120*t75079*(2.0/3.0);
            double t75224 = a1p*c*c0p*t75105*t75079*(2.0/3.0);
            double t75225 = ccaa4*t75108*t75109*t75154*t75138*(3.2E1/3.0);
            double t75226 = ccaa1*gamma_aa[index]*gcaa*t75141*t75152*(8.0/3.0);
            double t75227 = ccaa3*gamma_aa[index]*gcaa*t75106*t75107*t75153*t75146*8.0;
            double t75228 = ccaa2*t75150*t75106*t75151*t75107*(1.6E1/3.0);
            double t75265 = ccaa1*t75106*t75151*t75107*t75178*(8.0/3.0);
            double t75266 = ccaa3*gamma_aa[index]*gcaa*t75112*t75106*t75107*t75190*t75191;
            double t75267 = ccaa4*t75110*t75108*t75109*t75183*t75193;
            double t75268 = ccaa2*t75113*t75106*t75107*t75186*t75195;
            double t75229 = t75225+t75226+t75227+t75228-t75265-t75266-t75267-t75268;
            double t75230 = X-1.0;
            double t75231 = 1.0/(k*k);
            double t75232 = 1.0/kp;
            double t75233 = 1.0/(rho_a[index]*rho_a[index]);
            double t75234 = rho_a[index]*2.0;
            double t75235 = 1.0/pow(t75234,2.0/3.0);
            double t75236 = gamma_aa[index]*mu_*t75231*t75232*t75233*t75235*(1.0/4.0);
            double t75237 = t75236+1.0;
            double t75238 = 1.0/t75237;
            double t75239 = kp-kp*t75238+1.0;
            double t75240 = C_k*C_k;
            double t75241 = pow(rho_a[index],4.0/3.0);
            double t75242 = 1.0/(tau_a[index]*tau_a[index]);
            double t75243 = 1.0/t75158;
            double t75244 = 1.0/pow(t75158,1.2E1);
            double t75245 = t75104+t75223-t75224-t75201*t75122*t75206*t75207;
            double t75246 = t75116*t75119*t75245;
            double t75247 = 1.0/(t75237*t75237);
            double t75248 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t75249 = 1.0/pow(t75234,5.0/3.0);
            double t75250 = a_1*t75243*t75159;
            double t75251 = a_10*t75161*t75163*t75172;
            double t75252 = a_11*t75161*t75163*t75164*t75159;
            double t75253 = a_2*t75160*t75161;
            double t75254 = a_3*t75161*t75165*t75159;
            double t75255 = a_4*t75162*t75166;
            double t75256 = a_5*t75162*t75167*t75159;
            double t75257 = a_6*t75161*t75162*t75168;
            double t75258 = a_7*t75161*t75162*t75159*t75169;
            double t75259 = a_8*t75170*t75163;
            double t75260 = a_9*t75171*t75163*t75159;
            double t75261 = t75250+t75251+t75260+t75252+t75253+t75254+t75255+t75256+t75257+t75258+t75259+1.0;
            double t75262 = t75173-t75174;
            double t75263 = t75116*t75262*t75119;
            double t75264 = t75263+t75174;
            double t75269 = gamma_aa[index]*mu_*t75231*t75232*t75235*t75248*(1.0/2.0);
            double t75270 = gamma_aa[index]*mu_*t75231*t75232*t75233*t75249*(1.0/3.0);
            double t75271 = t75270+t75269;
            double t75272 = C_k*a_1*t75125*t75243*t75155*(5.0/3.0);
            double t75273 = C_k*a_2*t75160*t75125*t75155*t75159*(1.0E1/3.0);
            double t75274 = C_k*a_10*t75125*t75163*t75172*t75155*t75159*(5.0E1/3.0);
            double t75275 = C_k*a_11*t75125*t75161*t75163*t75155*t75164*(5.5E1/3.0);
            double t75276 = C_k*a_3*t75125*t75161*t75155*t75165*5.0;
            double t75277 = C_k*a_4*t75125*t75161*t75155*t75166*t75159*(2.0E1/3.0);
            double t75278 = C_k*a_5*t75125*t75162*t75155*t75167*(2.5E1/3.0);
            double t75279 = C_k*a_6*t75125*t75162*t75155*t75159*t75168*1.0E1;
            double t75280 = C_k*a_7*t75125*t75161*t75162*t75155*t75169*(3.5E1/3.0);
            double t75281 = C_k*a_8*t75125*t75161*t75170*t75162*t75155*t75159*(4.0E1/3.0);
            double t75282 = C_k*a_9*t75125*t75171*t75163*t75155*1.5E1;
            double t75283 = t75280+t75272+t75281+t75273+t75282+t75274+t75275+t75276+t75277+t75278+t75279-C_k* \
               a_1*t75160*t75125*t75155*t75159*(5.0/3.0)-C_k*a_2*t75125*t75161*t75155*t75165*(1.0E1/3.0)-C_k*a_4* \
               t75125*t75162*t75155*t75167*(2.0E1/3.0)-C_k*a_8*t75125*t75171*t75163*t75155*(4.0E1/3.0)-C_k*a_10*t75125* \
               t75161*t75163*t75155*t75164*(5.0E1/3.0)-C_k*a_3*t75125*t75161*t75155*t75166*t75159*5.0-C_k*a_5*t75125* \
               t75162*t75155*t75159*t75168*(2.5E1/3.0)-C_k*a_6*t75125*t75161*t75162*t75155*t75169*1.0E1-C_k*a_9*t75125* \
               t75163*t75172*t75155*t75159*1.5E1-C_k*a_11*t75125*t75161*t75163*t75244*t75155*t75159*(5.5E1/3.0)-C_k* \
               a_7*t75125*t75161*t75170*t75162*t75155*t75159*(3.5E1/3.0);
            v_rho_a_rho_a_[index] = t75200*t75132*(-t75104+t75224+t75116*t75119*(t75104+t75223-t75201*t75122* \
               t75206*t75207-a1p*c*c0p*t75105*t75079*(2.0/3.0)))*2.0-t75230*t75283*t75239*2.0+t75132*t75229*(t75174+ \
               t75116*t75119*(t75173-c0p*t75105*t75096*2.0))*2.0-rho_a[index]*t75132*t75264*(ccaa1*gamma_aa[index]* \
               gcaa*t75141*t75192*(8.8E1/9.0)+ccaa2*t75150*t75106*t75107*t75177*(3.04E2/9.0)-ccaa1*t75106*t75107* \
               t75177*t75178*2.4E1+ccaa4*t75108*t75109*t75138*t75194*(1.12E3/9.0)-ccaa2*t75106*t75151*t75107*t75186* \
               t75195*(3.2E1/3.0)-ccaa4*t75108*t75109*t75154*t75183*t75193*(6.4E1/3.0)-ccaa2*t75113*t75106*t75107* \
               t75195*(gamma_aa[index]*gcaa*t75192*(1.76E2/9.0)+t75106*t75107*t75177*(3.04E2/9.0))-ccaa4*t75110*t75108* \
               t75109*t75193*(gamma_aa[index]*gcaa*t75192*(3.52E2/9.0)+t75106*t75107*t75177*(6.08E2/3.0)+t75108*t75109* \
               t75194*(1.12E3/9.0)+gamma_aa[index]*gcaa*t75106*t75107*t75176*2.88E2)+ccaa4*t75110*t75108*t75109*1.0/ \
               (t75137*t75137*t75137)*(t75183*t75183)*2.0+ccaa2*t75113*t75106*t75107*1.0/(t75149*t75149*t75149)*(t75186* \
               t75186)*2.0+ccaa3*gamma_aa[index]*gcaa*t75106*t75107*t75146*t75176*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               1.0/(t75140*t75140*t75140)*t75106*t75107*t75176*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t75112*t75106* \
               t75107*1.0/(t75145*t75145*t75145)*(t75190*t75190)*2.0-ccaa3*gamma_aa[index]*gcaa*t75112*t75106*t75107* \
               t75191*(gamma_aa[index]*gcaa*t75192*(8.8E1/3.0)+t75106*t75107*t75177*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t75106*t75107*t75176*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t75106*t75107*t75153*t75190*t75191*1.6E1) \
               -rho_a[index]*t75230*t75239*(C_k*a_1*t75125*t75243*t75068*(1.0E1/9.0)-a_1*t75240*t75160*t75241*t75242* \
               (5.0E1/9.0)+a_2*t75240*t75160*t75241*t75242*(5.0E1/9.0)+a_1*t75240*t75241*t75242*t75165*t75159*(5.0E1/ \
               9.0)+a_10*t75240*t75241*t75242*t75163*t75172*2.5E2+a_2*t75240*t75241*t75161*t75242*t75166*(5.0E1/3.0) \
               -a_2*t75240*t75241*t75242*t75165*t75159*(2.0E2/9.0)-a_3*t75240*t75241*t75161*t75242*t75166*5.0E1+a_3* \
               t75240*t75241*t75242*t75165*t75159*(5.0E1/3.0)+a_4*t75240*t75241*t75161*t75242*t75166*(1.0E2/3.0)+ \
               a_4*t75240*t75241*t75242*t75162*t75168*(5.0E2/9.0)-a_5*t75240*t75241*t75242*t75162*t75168*(1.25E3/ \
               9.0)+a_6*t75240*t75241*t75242*t75162*t75168*(2.5E2/3.0)+a_8*t75240*t75241*t75242*t75163*t75172*2.0E2- \
               a_9*t75240*t75241*t75242*t75163*t75172*4.5E2-C_k*a_1*t75160*t75125*t75068*t75159*(1.0E1/9.0)-C_k*a_2* \
               t75125*t75161*t75165*t75068*(2.0E1/9.0)+C_k*a_2*t75160*t75125*t75068*t75159*(2.0E1/9.0)+C_k*a_3*t75125* \
               t75161*t75165*t75068*(1.0E1/3.0)-C_k*a_4*t75125*t75162*t75068*t75167*(4.0E1/9.0)+C_k*a_5*t75125*t75162* \
               t75068*t75167*(5.0E1/9.0)-C_k*a_8*t75125*t75171*t75163*t75068*(8.0E1/9.0)+C_k*a_9*t75125*t75171*t75163* \
               t75068*1.0E1-C_k*a_10*t75125*t75161*t75163*t75164*t75068*(1.0E2/9.0)+C_k*a_11*t75125*t75161*t75163* \
               t75164*t75068*(1.1E2/9.0)+C_k*a_10*t75125*t75163*t75172*t75068*t75159*(1.0E2/9.0)-C_k*a_3*t75125*t75161* \
               t75166*t75068*t75159*(1.0E1/3.0)+C_k*a_4*t75125*t75161*t75166*t75068*t75159*(4.0E1/9.0)-C_k*a_5*t75125* \
               t75162*t75068*t75159*t75168*(5.0E1/9.0)-C_k*a_6*t75125*t75161*t75162*t75068*t75169*(2.0E1/3.0)+C_k* \
               a_6*t75125*t75162*t75068*t75159*t75168*(2.0E1/3.0)+C_k*a_7*t75125*t75161*t75162*t75068*t75169*(7.0E1/ \
               9.0)-C_k*a_9*t75125*t75163*t75172*t75068*t75159*1.0E1+a_10*t75240*t75241*t75161*t75242*t75163*t75244* \
               (2.75E3/9.0)-a_11*t75240*t75241*t75161*t75242*t75163*t75244*(6.05E3/9.0)-a_10*t75240*t75241*t75242* \
               t75163*t75164*t75159*(5.0E3/9.0)+a_11*t75240*t75241*t75242*t75163*t75164*t75159*(2.75E3/9.0)+a_3*t75240* \
               t75241*t75161*t75242*t75167*t75159*(1.0E2/3.0)-a_4*t75240*t75241*t75161*t75242*t75167*t75159*(8.0E2/ \
               9.0)+a_5*t75240*t75241*t75161*t75242*t75167*t75159*(5.0E2/9.0)+a_5*t75240*t75241*t75242*t75162*t75159* \
               t75169*(2.5E2/3.0)+a_6*t75240*t75241*t75161*t75170*t75242*t75162*(3.5E2/3.0)-a_6*t75240*t75241*t75242* \
               t75162*t75159*t75169*2.0E2-a_7*t75240*t75241*t75161*t75170*t75242*t75162*(2.45E3/9.0)+a_7*t75240*t75241* \
               t75242*t75162*t75159*t75169*(3.5E2/3.0)+a_8*t75240*t75241*t75161*t75170*t75242*t75162*(1.4E3/9.0)+ \
               a_9*t75240*t75241*t75242*t75163*t75164*t75159*2.5E2+a_11*t75240*t75241*t75161*t75242*t75163*1.0/pow(t75158,1.3E1) \
               *t75159*(1.1E3/3.0)-C_k*a_11*t75125*t75161*t75163*t75244*t75068*t75159*(1.1E2/9.0)-C_k*a_7*t75125* \
               t75161*t75170*t75162*t75068*t75159*(7.0E1/9.0)+C_k*a_8*t75125*t75161*t75170*t75162*t75068*t75159*(8.0E1/ \
               9.0)+a_7*t75240*t75241*t75161*t75242*t75162*t75171*t75159*(1.4E3/9.0)-a_8*t75240*t75241*t75161*t75242* \
               t75162*t75171*t75159*(3.2E3/9.0)+a_9*t75240*t75241*t75161*t75242*t75162*t75171*t75159*2.0E2)-rho_a[index]* \
               t75132*t75229*(-t75104+t75224+t75246)*2.0+rho_a[index]*t75200*t75132*(-t75213-t75222+t75116*t75119* \
               (t75213+t75222-t75219*t75096*t75097*t75098-t75201*t75210*t75122*1.0/(t75078*t75078*t75078)*2.0+t75201* \
               t75122*t75207*(b2f*c*t75208*(4.0/9.0)+b4f*t75111*t75074*(1.0E1/9.0)+b1f*c*t75208*t75086*(2.0/9.0)+ \
               b3f*c*t75070*t75208*(2.0/3.0)-b1f*t75111*t75074*t75209*(1.0/3.6E1)+b3f*t75111*t75074*t75086*(1.0/1.2E1) \
               )+t75210*t75122*1.0/(t75090*t75090)*1.0/(t75078*t75078*t75078*t75078)*t75087*(1.0/2.0)-a1f*c*c0f*t75120* \
               t75208*(8.0/9.0)-t75211*t75220*t75221*t75091*t75096*(1.0/2.0)+a1f*c*t75201*t75206*t75207*t75079*(2.0/ \
               3.0)-a1p*c*t75103*t75079*t75097*t75098*(2.0/3.0))+t75219*t75096*t75097*t75098+t75211*t75220*t75221* \
               t75091*t75096*(1.0/2.0)+a1p*c*t75103*t75079*t75097*t75098*(2.0/3.0))+kp*t75230*t75261*t75271*t75247* \
               2.0+gamma_aa[index]*t75124*t75125*t75127*t75264*t75229*(1.0/4.0)+kp*rho_a[index]*t75230*t75271*t75247* \
               t75283*2.0+gamma_aa[index]*t75200*t75124*t75125*t75127*(-t75104+t75224+t75246)*(1.0/4.0)-kp*rho_a[index]* \
               t75230*t75261*t75247*(gamma_aa[index]*mu_*t75231*t75232*t75248*t75249*(4.0/3.0)+gamma_aa[index]*mu_* \
               1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t75231*t75232*t75235*(3.0/2.0)+gamma_aa[index]* \
               mu_*t75231*t75232*t75233*1.0/pow(t75234,8.0/3.0)*(1.0E1/9.0))+kp*rho_a[index]*t75230*t75261*(t75271* \
               t75271)*1.0/(t75237*t75237*t75237)*2.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t70755 = rho_a[index]+rho_b[index];
            double t70756 = 1.0/pow(t70755,1.0/3.0);
            double t70757 = c*t70756;
            double t70758 = sqrt(t70757);
            double t70759 = b1p*t70758;
            double t70760 = pow(t70757,3.0/2.0);
            double t70761 = b3p*t70760;
            double t70762 = c*c;
            double t70763 = 1.0/pow(t70755,2.0/3.0);
            double t70764 = b4p*t70762*t70763;
            double t70765 = b2p*c*t70756;
            double t70766 = t70761+t70764+t70765+t70759;
            double t70767 = 1.0/pow(t70755,4.0/3.0);
            double t70768 = 1.0/c0p;
            double t70769 = 1.0/t70766;
            double t70770 = t70768*t70769*(1.0/2.0);
            double t70771 = t70770+1.0;
            double t70772 = a1p*c*t70756;
            double t70773 = t70772+1.0;
            double t70774 = rho_a[index]-rho_b[index];
            double t70775 = t70774*t70774;
            double t70776 = 1.0/t70755;
            double t70777 = t70774*t70776;
            double t70778 = two_13*2.0;
            double t70779 = t70778-2.0;
            double t70780 = 1.0/t70779;
            double t70781 = 1.0/c0f;
            double t70782 = b1f*t70758;
            double t70783 = b3f*t70760;
            double t70784 = b4f*t70762*t70763;
            double t70785 = b2f*c*t70756;
            double t70786 = t70782+t70783+t70784+t70785;
            double t70787 = 1.0/t70786;
            double t70788 = t70781*t70787*(1.0/2.0);
            double t70789 = t70788+1.0;
            double t70790 = log(t70789);
            double t70791 = a1f*c*t70756;
            double t70792 = t70791+1.0;
            double t70793 = log(t70771);
            double t70803 = c0f*t70790*t70792*2.0;
            double t70804 = c0p*t70773*t70793*2.0;
            double t70794 = t70803-t70804;
            double t70795 = t70777+1.0;
            double t70796 = pow(t70795,4.0/3.0);
            double t70797 = -t70777+1.0;
            double t70798 = pow(t70797,4.0/3.0);
            double t70799 = t70796+t70798-2.0;
            double t70800 = 1.0/(t70755*t70755);
            double t70831 = t70800*t70774;
            double t70801 = -t70831+t70776;
            double t70802 = 1.0/(t70755*t70755*t70755*t70755);
            double t70805 = t70775*t70775;
            double t70806 = 1.0/pow(t70755,5.0/3.0);
            double t70807 = 1.0/sqrt(t70757);
            double t70808 = 1.0/t70771;
            double t70809 = 1.0/(t70766*t70766);
            double t70810 = b4p*t70806*t70762*(2.0/3.0);
            double t70811 = b2p*c*t70767*(1.0/3.0);
            double t70812 = b1p*c*t70807*t70767*(1.0/6.0);
            double t70813 = b3p*c*t70758*t70767*(1.0/2.0);
            double t70814 = t70810+t70811+t70812+t70813;
            double t70815 = t70814*t70808*t70773*t70809;
            double t70816 = 1.0/(t70755*t70755*t70755*t70755*t70755);
            double t70817 = 1.0/d2fz0;
            double t70818 = 1.0/Aa;
            double t70819 = b1a*t70758;
            double t70820 = b3a*t70760;
            double t70821 = b4a*t70762*t70763;
            double t70822 = b2a*c*t70756;
            double t70823 = t70820+t70821+t70822+t70819;
            double t70824 = 1.0/t70823;
            double t70825 = t70824*t70818*(1.0/2.0);
            double t70826 = t70825+1.0;
            double t70827 = log(t70826);
            double t70828 = a1a*c*t70756;
            double t70829 = t70828+1.0;
            double t70830 = pow(t70795,1.0/3.0);
            double t70832 = t70801*t70830*(4.0/3.0);
            double t70833 = pow(t70797,1.0/3.0);
            double t70977 = t70801*t70833*(4.0/3.0);
            double t70834 = t70832-t70977;
            double t70835 = t70802*t70805;
            double t70836 = t70835-1.0;
            double t70837 = 1.0/pow(rho_a[index],1.0/3.0);
            double t70838 = c*t70837;
            double t70839 = sqrt(t70838);
            double t70840 = b1f*t70839;
            double t70841 = pow(t70838,3.0/2.0);
            double t70842 = b3f*t70841;
            double t70843 = 1.0/pow(rho_a[index],2.0/3.0);
            double t70844 = b4f*t70762*t70843;
            double t70845 = b2f*c*t70837;
            double t70846 = t70840+t70842+t70844+t70845;
            double t70847 = 1.0/pow(rho_a[index],4.0/3.0);
            double t70848 = b1p*t70839;
            double t70849 = b3p*t70841;
            double t70850 = b4p*t70762*t70843;
            double t70851 = b2p*c*t70837;
            double t70852 = t70850+t70851+t70848+t70849;
            double t70853 = 1.0/pow(rho_a[index],5.0/3.0);
            double t70854 = 1.0/sqrt(t70838);
            double t70855 = 1.0/t70846;
            double t70856 = t70781*t70855*(1.0/2.0);
            double t70857 = t70856+1.0;
            double t70858 = 1.0/t70852;
            double t70859 = t70768*t70858*(1.0/2.0);
            double t70860 = t70859+1.0;
            double t70861 = a1p*c*t70837;
            double t70862 = t70861+1.0;
            double t70863 = 1.0/t70860;
            double t70864 = 1.0/(t70852*t70852);
            double t70865 = b4p*t70762*t70853*(2.0/3.0);
            double t70866 = b2p*c*t70847*(1.0/3.0);
            double t70867 = b1p*c*t70854*t70847*(1.0/6.0);
            double t70868 = b3p*c*t70847*t70839*(1.0/2.0);
            double t70869 = t70865+t70866+t70867+t70868;
            double t70870 = t70862*t70863*t70864*t70869;
            double t70871 = log(t70860);
            double t70872 = pow(2.0,1.0/3.0);
            double t70873 = t70872*2.0;
            double t70874 = t70873-2.0;
            double t70875 = log(t70857);
            double t70876 = a1f*c*t70837;
            double t70877 = t70876+1.0;
            double t70878 = gcab*gcab;
            double t70882 = 1.0/pow(rho_a[index],8.0/3.0);
            double t70883 = gamma_aa[index]*t70882*(1.0/2.0);
            double t70884 = 1.0/pow(rho_b[index],8.0/3.0);
            double t70885 = gamma_bb[index]*t70884*(1.0/2.0);
            double t70879 = t70883+t70885;
            double t70880 = t70879*t70879;
            double t70881 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t70886 = t70878*t70878;
            double t70887 = t70880*t70880;
            double t70888 = t70880*t70878*6.0;
            double t70889 = gcab*t70880*t70878*t70879*4.0;
            double t70890 = t70886*t70887;
            double t70891 = gcab*t70879*4.0;
            double t70892 = t70890+t70891+t70888+t70889+1.0;
            double t70893 = gcab*t70879;
            double t70894 = t70893+1.0;
            double t70895 = t70880*t70878;
            double t70896 = gcab*t70879*2.0;
            double t70897 = t70895+t70896+1.0;
            double t70898 = t70880*t70878*3.0;
            double t70899 = gcab*t70880*t70878*t70879;
            double t70900 = gcab*t70879*3.0;
            double t70901 = t70900+t70898+t70899+1.0;
            double t70902 = t70802*t70780*t70774*t70775*t70794*t70799*4.0;
            double t70903 = t70831+t70776;
            double t70904 = 1.0/t70789;
            double t70905 = 1.0/(t70786*t70786);
            double t70906 = b4f*t70806*t70762*(2.0/3.0);
            double t70907 = b2f*c*t70767*(1.0/3.0);
            double t70908 = b1f*c*t70807*t70767*(1.0/6.0);
            double t70909 = b3f*c*t70758*t70767*(1.0/2.0);
            double t70910 = t70906+t70907+t70908+t70909;
            double t70911 = a1f*c*c0f*t70790*t70767*(2.0/3.0);
            double t70912 = t70805*t70816*4.0;
            double t70913 = t70830*t70903*(4.0/3.0);
            double t70976 = t70903*t70833*(4.0/3.0);
            double t70914 = t70913-t70976;
            double t70915 = 1.0/t70826;
            double t70916 = 1.0/(t70823*t70823);
            double t70917 = b4a*t70806*t70762*(2.0/3.0);
            double t70918 = b2a*c*t70767*(1.0/3.0);
            double t70919 = b1a*c*t70807*t70767*(1.0/6.0);
            double t70920 = b3a*c*t70758*t70767*(1.0/2.0);
            double t70921 = t70920+t70917+t70918+t70919;
            double t70922 = t70921*t70780*t70915*t70817*t70916*t70836*t70829*t70799;
            double t70923 = 1.0/pow(rho_b[index],1.0/3.0);
            double t70924 = c*t70923;
            double t70925 = sqrt(t70924);
            double t70926 = b1f*t70925;
            double t70927 = pow(t70924,3.0/2.0);
            double t70928 = b3f*t70927;
            double t70929 = 1.0/pow(rho_b[index],2.0/3.0);
            double t70930 = b4f*t70762*t70929;
            double t70931 = b2f*c*t70923;
            double t70932 = t70930+t70931+t70926+t70928;
            double t70933 = 1.0/pow(rho_b[index],4.0/3.0);
            double t70934 = b1p*t70925;
            double t70935 = b3p*t70927;
            double t70936 = b4p*t70762*t70929;
            double t70937 = b2p*c*t70923;
            double t70938 = t70934+t70935+t70936+t70937;
            double t70939 = 1.0/pow(rho_b[index],5.0/3.0);
            double t70940 = 1.0/sqrt(t70924);
            double t70941 = 1.0/t70932;
            double t70942 = t70941*t70781*(1.0/2.0);
            double t70943 = t70942+1.0;
            double t70944 = 1.0/t70938;
            double t70945 = t70944*t70768*(1.0/2.0);
            double t70946 = t70945+1.0;
            double t70947 = a1p*c*t70923;
            double t70948 = t70947+1.0;
            double t70949 = 1.0/t70946;
            double t70950 = 1.0/(t70938*t70938);
            double t70951 = b4p*t70762*t70939*(2.0/3.0);
            double t70952 = b2p*c*t70933*(1.0/3.0);
            double t70953 = b1p*c*t70940*t70933*(1.0/6.0);
            double t70954 = b3p*c*t70933*t70925*(1.0/2.0);
            double t70955 = t70951+t70952+t70953+t70954;
            double t70956 = t70950*t70955*t70948*t70949;
            double t70957 = log(t70946);
            double t70958 = log(t70943);
            double t70959 = a1f*c*t70923;
            double t70960 = t70959+1.0;
            double t70961 = t70802*t70805*t70780*t70794*t70799;
            double t70962 = Aa*t70780*t70817*t70827*t70836*t70829*t70799*2.0;
            double t70963 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t70964 = 1.0/(t70901*t70901);
            double t70965 = 1.0/t70894;
            double t70966 = 1.0/(t70892*t70892);
            double t70967 = 1.0/(t70897*t70897);
            double t70968 = 1.0/t70892;
            double t70969 = 1.0/(t70894*t70894);
            double t70970 = 1.0/t70897;
            double t70971 = 1.0/t70901;
            double t70973 = a1p*c*c0p*t70793*t70767*(2.0/3.0);
            double t70978 = t70910*t70904*t70905*t70792;
            double t70972 = t70911+t70815-t70973-t70978;
            double t70974 = 1.0/pow(t70755,7.0/3.0);
            double t70975 = 1.0/pow(t70755,8.0/3.0);
            double t70979 = t70814*t70814;
            double t70980 = 1.0/pow(t70757,3.0/2.0);
            double t70981 = b4p*t70762*t70975*(1.0E1/9.0);
            double t70982 = b2p*c*t70974*(4.0/9.0);
            double t70983 = b1p*c*t70807*t70974*(2.0/9.0);
            double t70984 = b3p*c*t70758*t70974*(2.0/3.0);
            double t70985 = b3p*t70762*t70807*t70975*(1.0/1.2E1);
            double t70986 = t70981+t70982+t70983+t70984+t70985-b1p*t70762*t70980*t70975*(1.0/3.6E1);
            double t70987 = t70808*t70773*t70809*t70986;
            double t70988 = 1.0/(t70766*t70766*t70766);
            double t70989 = t70910*t70910;
            double t70990 = 1.0/(t70771*t70771);
            double t70991 = 1.0/(t70766*t70766*t70766*t70766);
            double t70992 = t70773*t70990*t70991*t70768*t70979*(1.0/2.0);
            double t70993 = 1.0/(t70755*t70755*t70755);
            double t70994 = a1p*c*t70814*t70808*t70809*t70767*(2.0/3.0);
            double t70995 = 1.0/(t70755*t70755*t70755*t70755*t70755*t70755);
            double t70996 = t70802*t70774*t70775*4.0;
            double t70997 = t70912+t70996;
            double t70998 = t70833*t70774*t70993*(8.0/3.0);
            double t70999 = 1.0/pow(t70795,2.0/3.0);
            double t71000 = t70801*t70903*t70999*(4.0/9.0);
            double t71001 = 1.0/pow(t70797,2.0/3.0);
            double t71002 = t70801*t70903*t71001*(4.0/9.0);
            double t71003 = t70998+t71000+t71002-t70830*t70774*t70993*(8.0/3.0);
            double t71004 = t70921*t70921;
            double t71005 = t70912-t70996;
            double t71006 = t70802*t70805*t70914*t70780*t70794;
            double t71007 = t70802*t70805*t70780*t70834*t70794;
            double t71008 = Aa*t70780*t70817*t70827*t70829*t70799*t70997*2.0;
            double t71009 = Aa*t70914*t70780*t70817*t70827*t70836*t70829*2.0;
            double t71010 = Aa*t70780*t70834*t70817*t70827*t70836*t70829*2.0;
            double t71011 = c0f*t70875*t70877*2.0;
            double t71013 = c0p*t70862*t70871*2.0;
            double t71012 = t71011-t71013;
            double t71014 = c0f*t70960*t70958*2.0;
            double t71016 = c0p*t70948*t70957*2.0;
            double t71015 = t71014-t71016;
            double t71017 = gamma_aa[index]*gcab*t70963*(8.0/3.0);
            double t71018 = gamma_aa[index]*t70963*t70878*t70879*(8.0/3.0);
            double t71019 = t71017+t71018;
            double t71020 = gamma_bb[index]*gcab*t70881*(8.0/3.0);
            double t71021 = gamma_bb[index]*t70881*t70878*t70879*(8.0/3.0);
            double t71022 = t71020+t71021;
            double t71023 = gamma_aa[index]*gcab*t70963*(1.6E1/3.0);
            double t71024 = gamma_aa[index]*gcab*t70880*t70963*t70878*1.6E1;
            double t71025 = gamma_aa[index]*t70880*t70963*t70886*t70879*(1.6E1/3.0);
            double t71026 = gamma_aa[index]*t70963*t70878*t70879*1.6E1;
            double t71027 = t71023+t71024+t71025+t71026;
            double t71028 = gamma_bb[index]*gcab*t70881*(1.6E1/3.0);
            double t71029 = gamma_bb[index]*gcab*t70880*t70881*t70878*1.6E1;
            double t71030 = gamma_bb[index]*t70880*t70881*t70886*t70879*(1.6E1/3.0);
            double t71031 = gamma_bb[index]*t70881*t70878*t70879*1.6E1;
            double t71032 = t71030+t71031+t71028+t71029;
            double t71033 = gamma_aa[index]*gcab*t70963*4.0;
            double t71034 = gamma_aa[index]*gcab*t70880*t70963*t70878*4.0;
            double t71035 = gamma_aa[index]*t70963*t70878*t70879*8.0;
            double t71036 = t71033+t71034+t71035;
            double t71037 = gamma_bb[index]*gcab*t70881*4.0;
            double t71038 = gamma_bb[index]*gcab*t70880*t70881*t70878*4.0;
            double t71039 = gamma_bb[index]*t70881*t70878*t70879*8.0;
            double t71040 = t71037+t71038+t71039;
            v_rho_a_rho_b_[index] = (t70804+t70961+t70962+rho_a[index]*(-t70870+t70780*t70874*(t70870-(1.0/(t70846* \
               t70846)*t70877*(b2f*c*t70847*(1.0/3.0)+b4f*t70762*t70853*(2.0/3.0)+b1f*c*t70854*t70847*(1.0/6.0)+b3f* \
               c*t70847*t70839*(1.0/2.0)))/t70857+a1f*c*c0f*t70847*t70875*(2.0/3.0)-a1p*c*c0p*t70871*t70847*(2.0/ \
               3.0))+a1p*c*c0p*t70871*t70847*(2.0/3.0))+t70755*(t70902+t70922+t70815+t71010+t71007-a1p*c*c0p*t70793* \
               t70767*(2.0/3.0)-t70802*t70805*t70780*t70972*t70799-t70805*t70780*t70816*t70794*t70799*4.0-Aa*t70780* \
               t70817*t70827*t70829*t70799*(t70912-t70802*t70774*t70775*4.0)*2.0-Aa*a1a*c*t70780*t70817*t70827*t70836* \
               t70767*t70799*(2.0/3.0))-c0p*t70862*t70871*2.0-t70780*t70874*t71012)*(ccab1*gamma_bb[index]*gcab*t70881* \
               t70965*(4.0/3.0)-ccab2*t70880*t70967*t70878*t71022-ccab4*t70966*t70886*t70887*t71032+ccab2*gamma_bb[index]* \
               t70970*t70881*t70878*t70879*(8.0/3.0)-ccab1*gamma_bb[index]*t70881*t70878*t70879*t70969*(4.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t70880*t70881*t70971*t70878*4.0+ccab4*gamma_bb[index]*t70880*t70881*t70886* \
               t70968*t70879*(1.6E1/3.0)-ccab3*gcab*t70880*t70964*t70878*t70879*t71040)+(ccab0+ccab1*gcab*t70965* \
               t70879+ccab2*t70880*t70970*t70878+ccab4*t70886*t70887*t70968+ccab3*gcab*t70880*t70971*t70878*t70879) \
               *(-t71010+t71006-t71007+t71008+t71009+t70755*(t70992+t70994+t70987-t70808*t70773*t70979*t70988*2.0+ \
               t70802*t70805*t70780*t70834*(t70911+t70815-t70973-t70978)-a1p*c*c0p*t70793*t70974*(8.0/9.0)-t70802* \
               t70805*t70780*t70799*(t70992+t70994+t70987-t70808*t70773*t70979*t70988*2.0+t70904*t70792*1.0/(t70786* \
               t70786*t70786)*t70989*2.0-t70904*t70905*t70792*(b2f*c*t70974*(4.0/9.0)+b4f*t70762*t70975*(1.0E1/9.0) \
               +b1f*c*t70807*t70974*(2.0/9.0)+b3f*c*t70758*t70974*(2.0/3.0)-b1f*t70762*t70980*t70975*(1.0/3.6E1)+ \
               b3f*t70762*t70807*t70975*(1.0/1.2E1))-t70781*t70792*1.0/(t70786*t70786*t70786*t70786)*1.0/(t70789* \
               t70789)*t70989*(1.0/2.0)+a1f*c*c0f*t70790*t70974*(8.0/9.0)-a1p*c*c0p*t70793*t70974*(8.0/9.0)-a1f*c* \
               t70910*t70904*t70905*t70767*(2.0/3.0))-t70802*t70805*t70914*t70780*t70972-t70805*t70914*t70780*t70816* \
               t70794*4.0+t70805*t70780*t70816*t70834*t70794*4.0-t70805*t70780*t70816*t70972*t70799*8.0+t70802*t70780* \
               t70775*t70794*t70799*1.2E1-t70805*t70780*t70794*t70995*t70799*2.0E1+t70802*t70805*t70780*t70794*t71003+ \
               t70802*t70914*t70780*t70774*t70775*t70794*4.0+t70802*t70780*t70834*t70774*t70775*t70794*4.0+Aa*t70780* \
               t70834*t70817*t70827*t70829*t70997*2.0-Aa*t70914*t70780*t70817*t70827*t70829*t71005*2.0+Aa*t70780* \
               t70817*t70827*t70836*t70829*t71003*2.0+Aa*t70780*t70817*t70827*t70829*t70799*(t70802*t70775*1.2E1- \
               t70805*t70995*2.0E1)*2.0+t70921*t70914*t70780*t70915*t70817*t70916*t70836*t70829-t70921*t70780*t70834* \
               t70915*t70817*t70916*t70836*t70829+t70921*t70780*t70915*t70817*t70916*t70829*t70799*t70997+t70921* \
               t70780*t70915*t70817*t70916*t70829*t70799*t71005-1.0/(t70823*t70823*t70823)*t70780*t70915*t70817*t70836* \
               t70829*t70799*t71004*2.0+t70780*t70915*t70817*t70916*t70836*t70829*t70799*(b2a*c*t70974*(4.0/9.0)+ \
               b4a*t70762*t70975*(1.0E1/9.0)+b1a*c*t70807*t70974*(2.0/9.0)+b3a*c*t70758*t70974*(2.0/3.0)-b1a*t70762* \
               t70980*t70975*(1.0/3.6E1)+b3a*t70762*t70807*t70975*(1.0/1.2E1))-Aa*a1a*c*t70914*t70780*t70817*t70827* \
               t70836*t70767*(2.0/3.0)+Aa*a1a*c*t70780*t70834*t70817*t70827*t70836*t70767*(2.0/3.0)-Aa*a1a*c*t70780* \
               t70817*t70827*t70836*t70974*t70799*(8.0/9.0)-Aa*a1a*c*t70780*t70817*t70827*t70767*t70799*t70997*(2.0/ \
               3.0)-Aa*a1a*c*t70780*t70817*t70827*t70767*t70799*t71005*(2.0/3.0)+1.0/(t70823*t70823*t70823*t70823) \
               *t70780*t70817*1.0/(t70826*t70826)*t70818*t70836*t70829*t70799*t71004*(1.0/2.0)+a1a*c*t70921*t70780* \
               t70915*t70817*t70916*t70836*t70767*t70799*(2.0/3.0))-t70814*t70808*t70773*t70809*2.0+t70802*t70805* \
               t70780*t70799*(t70911+t70815-t70973-t70978)*2.0+a1p*c*c0p*t70793*t70767*(4.0/3.0)+t70805*t70780*t70816* \
               t70794*t70799*8.0+Aa*t70780*t70817*t70827*t70829*t70799*(t70912-t70996)*2.0-t70921*t70780*t70915*t70817* \
               t70916*t70836*t70829*t70799*2.0+Aa*a1a*c*t70780*t70817*t70827*t70836*t70767*t70799*(4.0/3.0))-(rho_a[index]* \
               (t71013+t70780*t70874*t71012)+rho_b[index]*(t71016+t70780*t70874*t71015)-t70755*(t70804+t70961+t70962) \
               )*(ccab4*t70966*t70886*t70887*(gamma_aa[index]*gamma_bb[index]*t70881*t70963*t70878*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*t70880*t70881*t70963*t70886*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t70881* \
               t70963*t70878*t70879*(1.28E2/3.0))-ccab2*t70880*t70878*1.0/(t70897*t70897*t70897)*t71022*t71019*2.0- \
               ccab4*1.0/(t70892*t70892*t70892)*t70886*t70887*t71032*t71027*2.0+ccab3*gcab*t70880*t70964*t70878*t70879* \
               (gamma_aa[index]*gamma_bb[index]*t70881*t70963*t70878*(3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]* \
               gcab*t70881*t70963*t70878*t70879*(3.2E1/3.0))-ccab2*gamma_aa[index]*gamma_bb[index]*t70970*t70881* \
               t70963*t70878*(3.2E1/9.0)+ccab1*gamma_aa[index]*gamma_bb[index]*t70881*t70963*t70878*t70969*(3.2E1/ \
               9.0)+ccab2*gamma_aa[index]*t70963*t70967*t70878*t70879*t71022*(8.0/3.0)+ccab2*gamma_bb[index]*t70881* \
               t70967*t70878*t70879*t71019*(8.0/3.0)-ccab3*gcab*1.0/(t70901*t70901*t70901)*t70880*t70878*t70879*t71040* \
               t71036*2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t70880*t70881*t70963*t70886*t70967*(3.2E1/9.0)-ccab4* \
               gamma_aa[index]*gamma_bb[index]*t70880*t70881*t70963*t70886*t70968*(6.4E1/3.0)+ccab3*gamma_aa[index]* \
               gcab*t70880*t70963*t70964*t70878*t71040*4.0+ccab3*gamma_bb[index]*gcab*t70880*t70881*t70964*t70878* \
               t71036*4.0+ccab4*gamma_aa[index]*t70880*t70963*t70966*t70886*t70879*t71032*(1.6E1/3.0)+ccab4*gamma_bb[index]* \
               t70880*t70881*t70966*t70886*t70879*t71027*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t70881* \
               t70971*t70963*t70878*t70879*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t70881*t70963*1.0/ \
               (t70894*t70894*t70894)*t70878*t70879*(3.2E1/9.0))+(t70804+t70961+t70962-t70755*(t70902-t70922-t70815+ \
               t70973+t71006+t71008+t71009+t70802*t70805*t70780*t70972*t70799+t70805*t70780*t70816*t70794*t70799* \
               4.0+Aa*a1a*c*t70780*t70817*t70827*t70836*t70767*t70799*(2.0/3.0))+rho_b[index]*(-t70956+t70780*t70874* \
               (t70956-(1.0/(t70932*t70932)*t70960*(b2f*c*t70933*(1.0/3.0)+b4f*t70762*t70939*(2.0/3.0)+b1f*c*t70940* \
               t70933*(1.0/6.0)+b3f*c*t70933*t70925*(1.0/2.0)))/t70943+a1f*c*c0f*t70933*t70958*(2.0/3.0)-a1p*c*c0p* \
               t70933*t70957*(2.0/3.0))+a1p*c*c0p*t70933*t70957*(2.0/3.0))-c0p*t70948*t70957*2.0-t70780*t70874*t71015) \
               *(ccab1*gamma_aa[index]*gcab*t70963*t70965*(4.0/3.0)-ccab2*t70880*t70967*t70878*t71019-ccab4*t70966* \
               t70886*t70887*t71027+ccab2*gamma_aa[index]*t70970*t70963*t70878*t70879*(8.0/3.0)-ccab1*gamma_aa[index]* \
               t70963*t70878*t70879*t70969*(4.0/3.0)+ccab3*gamma_aa[index]*gcab*t70880*t70971*t70963*t70878*4.0+ccab4* \
               gamma_aa[index]*t70880*t70963*t70886*t70968*t70879*(1.6E1/3.0)-ccab3*gcab*t70880*t70964*t70878*t70879* \
               t71036);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t71042 = rho_a[index]+rho_b[index];
            double t71043 = 1.0/pow(t71042,1.0/3.0);
            double t71044 = c*t71043;
            double t71045 = sqrt(t71044);
            double t71046 = b1p*t71045;
            double t71047 = pow(t71044,3.0/2.0);
            double t71048 = b3p*t71047;
            double t71049 = c*c;
            double t71050 = 1.0/pow(t71042,2.0/3.0);
            double t71051 = b4p*t71050*t71049;
            double t71052 = b2p*c*t71043;
            double t71053 = t71051+t71052+t71046+t71048;
            double t71054 = 1.0/pow(t71042,4.0/3.0);
            double t71055 = 1.0/c0p;
            double t71056 = 1.0/t71053;
            double t71057 = t71055*t71056*(1.0/2.0);
            double t71058 = t71057+1.0;
            double t71059 = a1p*c*t71043;
            double t71060 = t71059+1.0;
            double t71061 = rho_a[index]-rho_b[index];
            double t71062 = t71061*t71061;
            double t71063 = 1.0/t71042;
            double t71064 = t71061*t71063;
            double t71065 = two_13*2.0;
            double t71066 = t71065-2.0;
            double t71067 = 1.0/t71066;
            double t71068 = 1.0/c0f;
            double t71069 = b1f*t71045;
            double t71070 = b3f*t71047;
            double t71071 = b4f*t71050*t71049;
            double t71072 = b2f*c*t71043;
            double t71073 = t71070+t71071+t71072+t71069;
            double t71074 = 1.0/t71073;
            double t71075 = t71074*t71068*(1.0/2.0);
            double t71076 = t71075+1.0;
            double t71077 = log(t71076);
            double t71078 = a1f*c*t71043;
            double t71079 = t71078+1.0;
            double t71080 = log(t71058);
            double t71091 = c0f*t71077*t71079*2.0;
            double t71092 = c0p*t71060*t71080*2.0;
            double t71081 = t71091-t71092;
            double t71082 = t71064+1.0;
            double t71083 = pow(t71082,4.0/3.0);
            double t71084 = -t71064+1.0;
            double t71085 = pow(t71084,4.0/3.0);
            double t71086 = t71083+t71085-2.0;
            double t71087 = 1.0/(t71042*t71042);
            double t71088 = t71061*t71087;
            double t71089 = t71063+t71088;
            double t71090 = 1.0/(t71042*t71042*t71042*t71042);
            double t71093 = t71062*t71062;
            double t71094 = 1.0/pow(t71042,5.0/3.0);
            double t71095 = 1.0/sqrt(t71044);
            double t71096 = 1.0/t71058;
            double t71097 = 1.0/(t71053*t71053);
            double t71098 = b4p*t71049*t71094*(2.0/3.0);
            double t71099 = b2p*c*t71054*(1.0/3.0);
            double t71100 = b1p*c*t71054*t71095*(1.0/6.0);
            double t71101 = b3p*c*t71045*t71054*(1.0/2.0);
            double t71102 = t71100+t71101+t71098+t71099;
            double t71103 = 1.0/(t71042*t71042*t71042*t71042*t71042);
            double t71104 = 1.0/d2fz0;
            double t71105 = 1.0/Aa;
            double t71106 = b1a*t71045;
            double t71107 = b3a*t71047;
            double t71108 = b4a*t71050*t71049;
            double t71109 = b2a*c*t71043;
            double t71110 = t71106+t71107+t71108+t71109;
            double t71111 = 1.0/t71110;
            double t71112 = t71111*t71105*(1.0/2.0);
            double t71113 = t71112+1.0;
            double t71114 = log(t71113);
            double t71115 = a1a*c*t71043;
            double t71116 = t71115+1.0;
            double t71117 = pow(t71082,1.0/3.0);
            double t71118 = t71117*t71089*(4.0/3.0);
            double t71119 = pow(t71084,1.0/3.0);
            double t71195 = t71119*t71089*(4.0/3.0);
            double t71120 = t71118-t71195;
            double t71121 = t71090*t71093;
            double t71122 = t71121-1.0;
            double t71123 = 1.0/pow(rho_b[index],1.0/3.0);
            double t71124 = c*t71123;
            double t71125 = sqrt(t71124);
            double t71126 = b1f*t71125;
            double t71127 = pow(t71124,3.0/2.0);
            double t71128 = b3f*t71127;
            double t71129 = 1.0/pow(rho_b[index],2.0/3.0);
            double t71130 = b4f*t71129*t71049;
            double t71131 = b2f*c*t71123;
            double t71132 = t71130+t71131+t71126+t71128;
            double t71133 = 1.0/pow(rho_b[index],4.0/3.0);
            double t71134 = b1p*t71125;
            double t71135 = b3p*t71127;
            double t71136 = b4p*t71129*t71049;
            double t71137 = b2p*c*t71123;
            double t71138 = t71134+t71135+t71136+t71137;
            double t71139 = 1.0/pow(rho_b[index],5.0/3.0);
            double t71140 = 1.0/sqrt(t71124);
            double t71141 = 1.0/t71132;
            double t71142 = t71141*t71068*(1.0/2.0);
            double t71143 = t71142+1.0;
            double t71144 = 1.0/t71138;
            double t71145 = t71144*t71055*(1.0/2.0);
            double t71146 = t71145+1.0;
            double t71147 = a1p*c*t71123;
            double t71148 = t71147+1.0;
            double t71149 = 1.0/t71146;
            double t71150 = 1.0/(t71138*t71138);
            double t71151 = b4p*t71049*t71139*(2.0/3.0);
            double t71152 = b2p*c*t71133*(1.0/3.0);
            double t71153 = b1p*c*t71140*t71133*(1.0/6.0);
            double t71154 = b3p*c*t71133*t71125*(1.0/2.0);
            double t71155 = t71151+t71152+t71153+t71154;
            double t71156 = t71150*t71155*t71148*t71149;
            double t71157 = log(t71146);
            double t71158 = pow(2.0,1.0/3.0);
            double t71159 = t71158*2.0;
            double t71160 = t71159-2.0;
            double t71161 = log(t71143);
            double t71162 = a1f*c*t71123;
            double t71163 = t71162+1.0;
            double t71164 = gcab*gcab;
            double t71168 = 1.0/pow(rho_a[index],8.0/3.0);
            double t71169 = gamma_aa[index]*t71168*(1.0/2.0);
            double t71170 = 1.0/pow(rho_b[index],8.0/3.0);
            double t71171 = gamma_bb[index]*t71170*(1.0/2.0);
            double t71165 = t71171+t71169;
            double t71166 = t71165*t71165;
            double t71167 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t71172 = t71164*t71164;
            double t71173 = t71166*t71166;
            double t71174 = t71164*t71166*6.0;
            double t71175 = gcab*t71164*t71165*t71166*4.0;
            double t71176 = t71172*t71173;
            double t71177 = gcab*t71165*4.0;
            double t71178 = t71174+t71175+t71176+t71177+1.0;
            double t71179 = gcab*t71165;
            double t71180 = t71179+1.0;
            double t71181 = t71164*t71166;
            double t71182 = gcab*t71165*2.0;
            double t71183 = t71181+t71182+1.0;
            double t71184 = t71164*t71166*3.0;
            double t71185 = gcab*t71164*t71165*t71166;
            double t71186 = gcab*t71165*3.0;
            double t71187 = t71184+t71185+t71186+1.0;
            double t71188 = a1p*c*c0p*t71080*t71054*(2.0/3.0);
            double t71189 = 1.0/t71183;
            double t71190 = 1.0/t71187;
            double t71191 = 1.0/t71180;
            double t71192 = 1.0/t71178;
            double t71193 = 1.0/pow(t71042,7.0/3.0);
            double t71194 = 1.0/pow(t71042,8.0/3.0);
            double t71196 = 1.0/t71076;
            double t71197 = 1.0/(t71073*t71073);
            double t71198 = b4f*t71049*t71094*(2.0/3.0);
            double t71199 = b2f*c*t71054*(1.0/3.0);
            double t71200 = b1f*c*t71054*t71095*(1.0/6.0);
            double t71201 = b3f*c*t71045*t71054*(1.0/2.0);
            double t71202 = t71200+t71201+t71198+t71199;
            double t71203 = t71202*t71079*t71196*t71197;
            double t71205 = t71102*t71060*t71096*t71097;
            double t71206 = a1f*c*c0f*t71054*t71077*(2.0/3.0);
            double t71204 = t71203-t71205-t71206+t71188;
            double t71207 = t71102*t71102;
            double t71208 = 1.0/pow(t71044,3.0/2.0);
            double t71209 = b4p*t71049*t71194*(1.0E1/9.0);
            double t71210 = b2p*c*t71193*(4.0/9.0);
            double t71211 = b1p*c*t71193*t71095*(2.0/9.0);
            double t71212 = b3p*c*t71045*t71193*(2.0/3.0);
            double t71213 = b3p*t71049*t71095*t71194*(1.0/1.2E1);
            double t71214 = t71210+t71211+t71212+t71213+t71209-b1p*t71208*t71049*t71194*(1.0/3.6E1);
            double t71215 = 1.0/(t71053*t71053*t71053);
            double t71216 = t71060*t71215*t71207*t71096*2.0;
            double t71217 = t71202*t71202;
            double t71218 = 1.0/(t71058*t71058);
            double t71219 = 1.0/(t71053*t71053*t71053*t71053);
            double t71220 = t71087*2.0;
            double t71221 = 1.0/(t71042*t71042*t71042);
            double t71222 = t71221*t71061*2.0;
            double t71223 = t71220+t71222;
            double t71224 = t71089*t71089;
            double t71225 = a1p*c*c0p*t71080*t71193*(8.0/9.0);
            double t71226 = 1.0/(t71042*t71042*t71042*t71042*t71042*t71042);
            double t71227 = t71061*t71062*t71090*4.0;
            double t71228 = t71103*t71093*4.0;
            double t71229 = t71227+t71228;
            double t71230 = t71223*t71117*(4.0/3.0);
            double t71231 = 1.0/pow(t71082,2.0/3.0);
            double t71232 = t71231*t71224*(4.0/9.0);
            double t71233 = 1.0/pow(t71084,2.0/3.0);
            double t71234 = t71224*t71233*(4.0/9.0);
            double t71235 = t71230+t71232+t71234-t71223*t71119*(4.0/3.0);
            double t71236 = 1.0/t71113;
            double t71237 = 1.0/(t71110*t71110);
            double t71238 = b4a*t71049*t71094*(2.0/3.0);
            double t71239 = b2a*c*t71054*(1.0/3.0);
            double t71240 = b1a*c*t71054*t71095*(1.0/6.0);
            double t71241 = b3a*c*t71045*t71054*(1.0/2.0);
            double t71242 = t71240+t71241+t71238+t71239;
            double t71243 = t71242*t71242;
            double t71244 = 1.0/t71143;
            double t71245 = b4f*t71049*t71139*(2.0/3.0);
            double t71246 = b2f*c*t71133*(1.0/3.0);
            double t71247 = b1f*c*t71140*t71133*(1.0/6.0);
            double t71248 = b3f*c*t71133*t71125*(1.0/2.0);
            double t71249 = t71245+t71246+t71247+t71248;
            double t71250 = 1.0/(t71132*t71132);
            double t71251 = 1.0/pow(rho_b[index],7.0/3.0);
            double t71252 = 1.0/pow(t71124,3.0/2.0);
            double t71253 = t71249*t71249;
            double t71254 = t71155*t71155;
            double t71255 = 1.0/(t71138*t71138*t71138);
            double t71256 = t71254*t71255*t71148*t71149*2.0;
            double t71257 = b4p*t71170*t71049*(1.0E1/9.0);
            double t71258 = b2p*c*t71251*(4.0/9.0);
            double t71259 = b3p*t71140*t71170*t71049*(1.0/1.2E1);
            double t71260 = b1p*c*t71140*t71251*(2.0/9.0);
            double t71261 = b3p*c*t71125*t71251*(2.0/3.0);
            double t71443 = b1p*t71170*t71252*t71049*(1.0/3.6E1);
            double t71262 = t71260+t71261-t71443+t71257+t71258+t71259;
            double t71263 = 1.0/(t71146*t71146);
            double t71264 = 1.0/(t71138*t71138*t71138*t71138);
            double t71265 = a1p*c*c0p*t71251*t71157*(8.0/9.0);
            double t71266 = a1f*c*c0f*t71133*t71161*(2.0/3.0);
            double t71267 = a1p*c*c0p*t71133*t71157*(2.0/3.0);
            double t71268 = 1.0/tau_b[index];
            double t71269 = pow(rho_b[index],2.0/3.0);
            double t71270 = pow(rho_b[index],5.0/3.0);
            double t71271 = C_k*t71270*t71268;
            double t71272 = t71271+1.0;
            double t71273 = t71271-1.0;
            double t71274 = 1.0/(t71272*t71272);
            double t71275 = t71273*t71273;
            double t71276 = t71275*t71275;
            double t71277 = t71276*t71276;
            double t71278 = 1.0/pow(t71272,1.1E1);
            double t71279 = 1.0/(t71272*t71272*t71272);
            double t71280 = 1.0/(t71272*t71272*t71272*t71272);
            double t71281 = 1.0/(t71272*t71272*t71272*t71272*t71272);
            double t71282 = 1.0/(t71272*t71272*t71272*t71272*t71272*t71272);
            double t71283 = 1.0/(t71272*t71272*t71272*t71272*t71272*t71272*t71272);
            double t71284 = 1.0/(t71272*t71272*t71272*t71272*t71272*t71272*t71272*t71272);
            double t71285 = 1.0/(t71272*t71272*t71272*t71272*t71272*t71272*t71272*t71272*t71272);
            double t71286 = 1.0/pow(t71272,1.0E1);
            double t71287 = 1.0/(k*k);
            double t71288 = 1.0/kp;
            double t71289 = 1.0/(rho_b[index]*rho_b[index]);
            double t71290 = rho_b[index]*2.0;
            double t71291 = 1.0/pow(t71290,2.0/3.0);
            double t71292 = gamma_bb[index]*mu_*t71291*t71287*t71288*t71289*(1.0/4.0);
            double t71293 = t71292+1.0;
            double t71294 = 1.0/t71293;
            double t71295 = kp-kp*t71294+1.0;
            double t71296 = C_k*C_k;
            double t71297 = pow(rho_b[index],4.0/3.0);
            double t71298 = 1.0/(tau_b[index]*tau_b[index]);
            double t71299 = 1.0/t71272;
            double t71300 = 1.0/pow(t71272,1.2E1);
            double t71301 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t71302 = gamma_bb[index]*mu_*t71301*t71291*t71287*t71288*(1.0/2.0);
            double t71303 = 1.0/pow(t71290,5.0/3.0);
            double t71304 = gamma_bb[index]*mu_*t71303*t71287*t71288*t71289*(1.0/3.0);
            double t71305 = t71302+t71304;
            double t71306 = a_1*t71273*t71299;
            double t71307 = a_10*t71275*t71277*t71286;
            double t71308 = a_11*t71273*t71275*t71277*t71278;
            double t71309 = a_2*t71274*t71275;
            double t71310 = a_3*t71273*t71275*t71279;
            double t71311 = a_4*t71280*t71276;
            double t71312 = a_5*t71281*t71273*t71276;
            double t71313 = a_6*t71282*t71275*t71276;
            double t71314 = a_7*t71273*t71283*t71275*t71276;
            double t71315 = a_8*t71284*t71277;
            double t71316 = a_9*t71273*t71285*t71277;
            double t71317 = t71310+t71311+t71312+t71313+t71314+t71306+t71315+t71307+t71316+t71308+t71309+1.0;
            double t71318 = 1.0/(t71293*t71293);
            double t71319 = C_k*a_1*t71268*t71269*t71299*(5.0/3.0);
            double t71320 = C_k*a_2*t71273*t71274*t71268*t71269*(1.0E1/3.0);
            double t71321 = C_k*a_10*t71273*t71268*t71277*t71286*t71269*(5.0E1/3.0);
            double t71322 = C_k*a_11*t71275*t71268*t71277*t71269*t71278*(5.5E1/3.0);
            double t71323 = C_k*a_3*t71275*t71268*t71269*t71279*5.0;
            double t71324 = C_k*a_4*t71280*t71273*t71275*t71268*t71269*(2.0E1/3.0);
            double t71325 = C_k*a_5*t71281*t71276*t71268*t71269*(2.5E1/3.0);
            double t71326 = C_k*a_6*t71273*t71282*t71276*t71268*t71269*1.0E1;
            double t71327 = C_k*a_7*t71283*t71275*t71276*t71268*t71269*(3.5E1/3.0);
            double t71328 = C_k*a_8*t71273*t71275*t71284*t71276*t71268*t71269*(4.0E1/3.0);
            double t71329 = C_k*a_9*t71285*t71268*t71277*t71269*1.5E1;
            double t71330 = t71320+t71321+t71322+t71323+t71324+t71325+t71326+t71327+t71319+t71328+t71329-C_k* \
               a_1*t71273*t71274*t71268*t71269*(5.0/3.0)-C_k*a_2*t71275*t71268*t71269*t71279*(1.0E1/3.0)-C_k*a_4* \
               t71281*t71276*t71268*t71269*(2.0E1/3.0)-C_k*a_8*t71285*t71268*t71277*t71269*(4.0E1/3.0)-C_k*a_10*t71275* \
               t71268*t71277*t71269*t71278*(5.0E1/3.0)-C_k*a_3*t71280*t71273*t71275*t71268*t71269*5.0-C_k*a_5*t71273* \
               t71282*t71276*t71268*t71269*(2.5E1/3.0)-C_k*a_6*t71283*t71275*t71276*t71268*t71269*1.0E1-C_k*a_9*t71273* \
               t71268*t71277*t71286*t71269*1.5E1-C_k*a_11*t71300*t71273*t71275*t71268*t71277*t71269*(5.5E1/3.0)-C_k* \
               a_7*t71273*t71275*t71284*t71276*t71268*t71269*(3.5E1/3.0);
            double t71331 = 1.0/pow(rho_a[index],1.0/3.0);
            double t71332 = c*t71331;
            double t71333 = sqrt(t71332);
            double t71334 = pow(t71332,3.0/2.0);
            double t71335 = 1.0/pow(rho_a[index],2.0/3.0);
            double t71336 = b1p*t71333;
            double t71337 = b3p*t71334;
            double t71338 = b4p*t71335*t71049;
            double t71339 = b2p*c*t71331;
            double t71340 = t71336+t71337+t71338+t71339;
            double t71341 = 1.0/t71340;
            double t71342 = t71341*t71055*(1.0/2.0);
            double t71343 = t71342+1.0;
            double t71344 = log(t71343);
            double t71345 = a1p*c*t71331;
            double t71346 = t71345+1.0;
            double t71347 = c0p*t71344*t71346*2.0;
            double t71348 = c0f*t71161*t71163*2.0;
            double t71350 = c0p*t71148*t71157*2.0;
            double t71349 = -t71350+t71348;
            double t71351 = t71081*t71090*t71093*t71067*t71086;
            double t71352 = Aa*t71104*t71122*t71114*t71116*t71067*t71086*2.0;
            double t71353 = gamma_bb[index]*gcab*t71167*(1.6E1/3.0);
            double t71354 = gamma_bb[index]*gcab*t71164*t71166*t71167*1.6E1;
            double t71355 = gamma_bb[index]*t71172*t71165*t71166*t71167*(1.6E1/3.0);
            double t71356 = gamma_bb[index]*t71164*t71165*t71167*1.6E1;
            double t71357 = t71353+t71354+t71355+t71356;
            double t71358 = 1.0/(t71180*t71180);
            double t71359 = gamma_bb[index]*gamma_bb[index];
            double t71360 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t71361 = gamma_bb[index]*gcab*t71167*(8.0/3.0);
            double t71362 = gamma_bb[index]*t71164*t71165*t71167*(8.0/3.0);
            double t71363 = t71361+t71362;
            double t71364 = 1.0/(t71187*t71187);
            double t71365 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t71366 = 1.0/(t71178*t71178);
            double t71367 = 1.0/(t71183*t71183);
            double t71368 = gamma_bb[index]*gcab*t71167*4.0;
            double t71369 = gamma_bb[index]*gcab*t71164*t71166*t71167*4.0;
            double t71370 = gamma_bb[index]*t71164*t71165*t71167*8.0;
            double t71371 = t71370+t71368+t71369;
            double t71451 = t71250*t71163*t71244*t71249;
            double t71372 = -t71451+t71156+t71266-t71267;
            double t71373 = gcaa*gcaa;
            double t71374 = t71359*t71359;
            double t71375 = t71373*t71373;
            double t71376 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t71377 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t71378 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t71379 = t71160*t71067*t71349;
            double t71380 = t71350+t71379;
            double t71381 = tau_b[index]-1.0/1.0E20;
            double t71382 = ( (t71381 > 0.0) ?  1.0 : 0.0 ) ;
            double t71383 = tau_b[index]*2.0;
            double t71384 = 1.0/rho_b[index];
            double t71411 = gamma_bb[index]*t71384*(1.0/4.0);
            double t71385 = -t71411+t71383;
            double t71386 = t71268*t71385*(1.0/2.0);
            double t71387 = t71386-1.0;
            double t71388 = t71382*t71387;
            double t71389 = t71388+1.0;
            double t71390 = gamma_bb[index]*gcaa*t71170*4.0;
            double t71391 = gamma_bb[index]*gcaa*t71373*t71359*t71377*4.0;
            double t71392 = t71373*t71359*t71378*6.0;
            double t71393 = t71374*t71375*t71376;
            double t71394 = t71390+t71391+t71392+t71393+1.0;
            double t71395 = 1.0/t71394;
            double t71396 = gamma_bb[index]*gcaa*t71170;
            double t71397 = t71396+1.0;
            double t71398 = 1.0/t71397;
            double t71399 = gamma_bb[index]*gcaa*t71170*3.0;
            double t71400 = gamma_bb[index]*gcaa*t71373*t71359*t71377;
            double t71401 = t71373*t71359*t71378*3.0;
            double t71402 = t71400+t71401+t71399+1.0;
            double t71403 = 1.0/t71402;
            double t71404 = gamma_bb[index]*gcaa*t71170*2.0;
            double t71405 = t71373*t71359*t71378;
            double t71406 = t71404+t71405+1.0;
            double t71407 = 1.0/t71406;
            double t71408 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t71409 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t71410 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t71412 = 1.0/pow(rho_b[index],1.0E1);
            double t71413 = 1.0/(t71397*t71397);
            double t71414 = gamma_bb[index]*gcaa*t71167*(3.2E1/3.0);
            double t71415 = gamma_bb[index]*gcaa*t71373*t71409*t71359*3.2E1;
            double t71416 = t71408*t71373*t71359*3.2E1;
            double t71417 = t71410*t71374*t71375*(3.2E1/3.0);
            double t71418 = t71414+t71415+t71416+t71417;
            double t71419 = gamma_bb[index]*gcaa*t71167*(1.6E1/3.0);
            double t71420 = t71408*t71373*t71359*(1.6E1/3.0);
            double t71421 = t71420+t71419;
            double t71422 = gamma_bb[index]*gcaa*t71167*8.0;
            double t71423 = gamma_bb[index]*gcaa*t71373*t71409*t71359*8.0;
            double t71424 = t71408*t71373*t71359*1.6E1;
            double t71425 = t71422+t71423+t71424;
            double t71426 = 1.0/(t71402*t71402);
            double t71427 = 1.0/(t71394*t71394);
            double t71428 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t71429 = 1.0/(t71406*t71406);
            double t71430 = ccaa4*t71374*t71375*t71376*t71395;
            double t71431 = ccaa1*gamma_bb[index]*gcaa*t71170*t71398;
            double t71432 = ccaa3*gamma_bb[index]*gcaa*t71403*t71373*t71359*t71377;
            double t71433 = ccaa2*t71407*t71373*t71359*t71378;
            double t71434 = ccaa0+t71430+t71431+t71432+t71433;
            double t71435 = 1.0/(t71132*t71132*t71132);
            double t71436 = b4f*t71170*t71049*(1.0E1/9.0);
            double t71437 = b2f*c*t71251*(4.0/9.0);
            double t71438 = b3f*t71140*t71170*t71049*(1.0/1.2E1);
            double t71439 = b1f*c*t71140*t71251*(2.0/9.0);
            double t71440 = b3f*c*t71125*t71251*(2.0/3.0);
            double t71441 = t71440+t71436+t71437+t71438+t71439-b1f*t71170*t71252*t71049*(1.0/3.6E1);
            double t71442 = t71250*t71441*t71163*t71244;
            double t71444 = t71150*t71262*t71148*t71149;
            double t71445 = 1.0/(t71143*t71143);
            double t71446 = 1.0/(t71132*t71132*t71132*t71132);
            double t71447 = t71163*t71253*t71445*t71068*t71446*(1.0/2.0);
            double t71448 = t71055*t71254*t71263*t71264*t71148*(1.0/2.0);
            double t71449 = a1f*c*t71133*t71250*t71244*t71249*(2.0/3.0);
            double t71450 = a1p*c*t71150*t71133*t71155*t71149*(2.0/3.0);
            double t71452 = ccaa4*t71410*t71374*t71375*t71395*(3.2E1/3.0);
            double t71453 = ccaa1*gamma_bb[index]*gcaa*t71167*t71398*(8.0/3.0);
            double t71454 = ccaa3*gamma_bb[index]*gcaa*t71403*t71373*t71409*t71359*8.0;
            double t71455 = ccaa2*t71407*t71408*t71373*t71359*(1.6E1/3.0);
            double t71460 = ccaa1*t71413*t71408*t71373*t71359*(8.0/3.0);
            double t71461 = ccaa3*gamma_bb[index]*gcaa*t71425*t71426*t71373*t71359*t71377;
            double t71462 = ccaa4*t71418*t71427*t71374*t71375*t71376;
            double t71463 = ccaa2*t71421*t71373*t71429*t71359*t71378;
            double t71456 = -t71460+t71452-t71461+t71453-t71462+t71454-t71463+t71455;
            double t71457 = t71451-t71156-t71266+t71267;
            double t71458 = t71160*t71067*t71457;
            double t71459 = t71156-t71267+t71458;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t71191*t71165+ccab4*t71172*t71173*t71192+ccab2*t71164*t71166* \
               t71189+ccab3*gcab*t71190*t71164*t71165*t71166)*(-rho_b[index]*(t71450+t71444-t71256-t71265+t71448+ \
               t71160*t71067*(t71442+t71256+t71265+t71447+t71449-t71163*t71244*t71253*t71435*2.0-t71150*t71262*t71148* \
               t71149-a1f*c*c0f*t71161*t71251*(8.0/9.0)-t71055*t71254*t71263*t71264*t71148*(1.0/2.0)-a1p*c*t71150* \
               t71133*t71155*t71149*(2.0/3.0)))-t71042*(t71216+t71225-t71060*t71214*t71096*t71097-t71090*t71093*t71067* \
               t71086*(t71216+t71225-t71060*t71214*t71096*t71097-1.0/(t71073*t71073*t71073)*t71217*t71079*t71196* \
               2.0+t71079*t71196*t71197*(b2f*c*t71193*(4.0/9.0)+b4f*t71049*t71194*(1.0E1/9.0)+b1f*c*t71193*t71095* \
               (2.0/9.0)+b3f*c*t71045*t71193*(2.0/3.0)-b1f*t71208*t71049*t71194*(1.0/3.6E1)+b3f*t71049*t71095*t71194* \
               (1.0/1.2E1))+1.0/(t71073*t71073*t71073*t71073)*t71217*1.0/(t71076*t71076)*t71068*t71079*(1.0/2.0)- \
               a1f*c*c0f*t71193*t71077*(8.0/9.0)-t71060*t71207*t71055*t71218*t71219*(1.0/2.0)+a1f*c*t71202*t71054* \
               t71196*t71197*(2.0/3.0)-a1p*c*t71102*t71054*t71096*t71097*(2.0/3.0))+t71120*t71103*t71081*t71093*t71067* \
               8.0-t71120*t71204*t71090*t71093*t71067*2.0-t71060*t71207*t71055*t71218*t71219*(1.0/2.0)-t71103*t71204* \
               t71093*t71067*t71086*8.0+t71062*t71081*t71090*t71067*t71086*1.2E1+t71081*t71090*t71235*t71093*t71067+ \
               t71081*t71226*t71093*t71067*t71086*2.0E1+t71120*t71061*t71062*t71081*t71090*t71067*8.0+t71103*t71061* \
               t71062*t71081*t71067*t71086*3.2E1-t71204*t71061*t71062*t71090*t71067*t71086*8.0-a1p*c*t71102*t71054* \
               t71096*t71097*(2.0/3.0)+Aa*t71104*t71122*t71114*t71116*t71235*t71067*2.0+Aa*t71120*t71104*t71114*t71116* \
               t71067*t71229*4.0+Aa*t71104*t71114*t71116*t71067*t71086*(t71062*t71090*1.2E1+t71226*t71093*2.0E1+t71103* \
               t71061*t71062*3.2E1)*2.0-t71120*t71104*t71122*t71116*t71242*t71236*t71237*t71067*2.0-t71104*t71116* \
               t71242*t71236*t71237*t71067*t71229*t71086*2.0+1.0/(t71110*t71110*t71110)*t71104*t71122*t71116*t71243* \
               t71236*t71067*t71086*2.0-t71104*t71122*t71116*t71236*t71237*t71067*t71086*(b2a*c*t71193*(4.0/9.0)+ \
               b4a*t71049*t71194*(1.0E1/9.0)+b1a*c*t71193*t71095*(2.0/9.0)+b3a*c*t71045*t71193*(2.0/3.0)-b1a*t71208* \
               t71049*t71194*(1.0/3.6E1)+b3a*t71049*t71095*t71194*(1.0/1.2E1))+Aa*a1a*c*t71120*t71104*t71122*t71114* \
               t71054*t71067*(4.0/3.0)+Aa*a1a*c*t71104*t71122*t71114*t71067*t71193*t71086*(8.0/9.0)+Aa*a1a*c*t71104* \
               t71114*t71054*t71067*t71229*t71086*(4.0/3.0)-1.0/(t71110*t71110*t71110*t71110)*t71104*1.0/(t71113* \
               t71113)*t71122*t71105*t71116*t71243*t71067*t71086*(1.0/2.0)-a1a*c*t71104*t71122*t71242*t71054*t71236* \
               t71237*t71067*t71086*(2.0/3.0))-t71160*t71372*t71067*2.0-t71102*t71060*t71096*t71097*2.0+t71150*t71155* \
               t71148*t71149*2.0+a1p*c*c0p*t71080*t71054*(4.0/3.0)-a1p*c*c0p*t71133*t71157*(4.0/3.0)+t71120*t71081* \
               t71090*t71093*t71067*2.0+t71103*t71081*t71093*t71067*t71086*8.0-t71204*t71090*t71093*t71067*t71086* \
               2.0+t71061*t71062*t71081*t71090*t71067*t71086*8.0+Aa*t71120*t71104*t71122*t71114*t71116*t71067*4.0+ \
               Aa*t71104*t71114*t71116*t71067*t71229*t71086*4.0-t71104*t71122*t71116*t71242*t71236*t71237*t71067* \
               t71086*2.0+Aa*a1a*c*t71104*t71122*t71114*t71054*t71067*t71086*(4.0/3.0))+(rho_b[index]*t71380+rho_a[index]* \
               (t71347-t71160*t71067*(t71347-c0f*log((t71068*(1.0/2.0))/(b1f*t71333+b3f*t71334+b2f*c*t71331+b4f*t71335* \
               t71049)+1.0)*(a1f*c*t71331+1.0)*2.0))-t71042*(t71351+t71352+t71092))*(-ccab2*t71164*t71166*t71367* \
               (gamma_bb[index]*gcab*t71365*(8.8E1/9.0)+t71360*t71164*t71359*(3.2E1/9.0)+gamma_bb[index]*t71164*t71165* \
               t71365*(8.8E1/9.0))+ccab2*t71164*1.0/(t71183*t71183*t71183)*(t71363*t71363)*t71166*2.0+ccab4*t71172* \
               t71173*(t71357*t71357)*1.0/(t71178*t71178*t71178)*2.0+ccab1*gamma_bb[index]*gcab*t71191*t71365*(4.4E1/ \
               9.0)-ccab1*t71360*t71164*t71358*t71359*(3.2E1/9.0)+ccab2*t71360*t71164*t71359*t71189*(3.2E1/9.0)-ccab4* \
               t71172*t71173*t71366*(gamma_bb[index]*gcab*t71365*(1.76E2/9.0)+t71360*t71164*t71359*(6.4E1/3.0)+gamma_bb[index]* \
               t71164*t71165*t71365*(1.76E2/3.0)+t71360*t71172*t71166*t71359*(6.4E1/3.0)+gamma_bb[index]*gcab*t71164* \
               t71166*t71365*(1.76E2/3.0)+gamma_bb[index]*t71172*t71165*t71166*t71365*(1.76E2/9.0)+gcab*t71360*t71164* \
               t71165*t71359*(1.28E2/3.0))+ccab4*t71360*t71172*t71192*t71166*t71359*(6.4E1/3.0)-ccab1*gamma_bb[index]* \
               t71164*t71165*t71365*t71358*(4.4E1/9.0)+ccab2*gamma_bb[index]*t71164*t71165*t71365*t71189*(8.8E1/9.0) \
               +ccab3*gcab*t71164*(t71371*t71371)*t71165*t71166*1.0/(t71187*t71187*t71187)*2.0+ccab3*gamma_bb[index]* \
               gcab*t71190*t71164*t71166*t71365*(4.4E1/3.0)+ccab4*gamma_bb[index]*t71172*t71165*t71192*t71166*t71365* \
               (1.76E2/9.0)-ccab2*gamma_bb[index]*t71164*t71165*t71363*t71167*t71367*(1.6E1/3.0)+ccab3*gcab*t71360* \
               t71190*t71164*t71165*t71359*(3.2E1/3.0)+ccab1*gcab*1.0/(t71180*t71180*t71180)*t71360*t71164*t71165* \
               t71359*(3.2E1/9.0)-ccab3*gcab*t71164*t71165*t71166*t71364*(gamma_bb[index]*gcab*t71365*(4.4E1/3.0) \
               +t71360*t71164*t71359*(3.2E1/3.0)+gamma_bb[index]*t71164*t71165*t71365*(8.8E1/3.0)+gamma_bb[index]* \
               gcab*t71164*t71166*t71365*(4.4E1/3.0)+gcab*t71360*t71164*t71165*t71359*(3.2E1/3.0))-ccab3*gamma_bb[index]* \
               gcab*t71164*t71371*t71166*t71364*t71167*8.0-ccab4*gamma_bb[index]*t71172*t71165*t71166*t71167*t71357* \
               t71366*(3.2E1/3.0))+(t71351+t71352+t71092+rho_b[index]*(-t71156+t71267+t71160*t71067*(t71156+t71266- \
               t71250*t71163*t71244*t71249-a1p*c*c0p*t71133*t71157*(2.0/3.0)))-t71042*(t71188-t71102*t71060*t71096* \
               t71097+t71120*t71081*t71090*t71093*t71067+t71103*t71081*t71093*t71067*t71086*4.0-t71204*t71090*t71093* \
               t71067*t71086+t71061*t71062*t71081*t71090*t71067*t71086*4.0+Aa*t71120*t71104*t71122*t71114*t71116* \
               t71067*2.0+Aa*t71104*t71114*t71116*t71067*t71229*t71086*2.0-t71104*t71122*t71116*t71242*t71236*t71237* \
               t71067*t71086+Aa*a1a*c*t71104*t71122*t71114*t71054*t71067*t71086*(2.0/3.0))-c0p*t71148*t71157*2.0- \
               t71160*t71067*t71349)*(ccab1*gamma_bb[index]*gcab*t71191*t71167*(4.0/3.0)-ccab2*t71164*t71363*t71166* \
               t71367-ccab4*t71172*t71173*t71357*t71366-ccab1*gamma_bb[index]*t71164*t71165*t71167*t71358*(4.0/3.0) \
               +ccab2*gamma_bb[index]*t71164*t71165*t71167*t71189*(8.0/3.0)+ccab3*gamma_bb[index]*gcab*t71190*t71164* \
               t71166*t71167*4.0+ccab4*gamma_bb[index]*t71172*t71165*t71192*t71166*t71167*(1.6E1/3.0)-ccab3*gcab* \
               t71164*t71371*t71165*t71166*t71364)*2.0-(X-1.0)*(t71330*t71295*2.0+rho_b[index]*t71295*(C_k*a_1*t71123* \
               t71268*t71299*(1.0E1/9.0)-a_1*t71274*t71296*t71297*t71298*(5.0E1/9.0)+a_2*t71274*t71296*t71297*t71298* \
               (5.0E1/9.0)+a_1*t71273*t71296*t71279*t71297*t71298*(5.0E1/9.0)+a_10*t71277*t71286*t71296*t71297*t71298* \
               2.5E2+a_2*t71280*t71275*t71296*t71297*t71298*(5.0E1/3.0)-a_2*t71273*t71296*t71279*t71297*t71298*(2.0E2/ \
               9.0)-a_3*t71280*t71275*t71296*t71297*t71298*5.0E1+a_3*t71273*t71296*t71279*t71297*t71298*(5.0E1/3.0) \
               +a_4*t71280*t71275*t71296*t71297*t71298*(1.0E2/3.0)+a_4*t71282*t71276*t71296*t71297*t71298*(5.0E2/ \
               9.0)-a_5*t71282*t71276*t71296*t71297*t71298*(1.25E3/9.0)+a_6*t71282*t71276*t71296*t71297*t71298*(2.5E2/ \
               3.0)+a_8*t71277*t71286*t71296*t71297*t71298*2.0E2-a_9*t71277*t71286*t71296*t71297*t71298*4.5E2-C_k* \
               a_1*t71123*t71273*t71274*t71268*(1.0E1/9.0)+C_k*a_2*t71123*t71273*t71274*t71268*(2.0E1/9.0)-C_k*a_2* \
               t71123*t71275*t71268*t71279*(2.0E1/9.0)+C_k*a_3*t71123*t71275*t71268*t71279*(1.0E1/3.0)-C_k*a_4*t71123* \
               t71281*t71276*t71268*(4.0E1/9.0)+C_k*a_5*t71123*t71281*t71276*t71268*(5.0E1/9.0)-C_k*a_8*t71123*t71285* \
               t71268*t71277*(8.0E1/9.0)+C_k*a_9*t71123*t71285*t71268*t71277*1.0E1+C_k*a_10*t71123*t71273*t71268* \
               t71277*t71286*(1.0E2/9.0)-C_k*a_10*t71123*t71275*t71268*t71277*t71278*(1.0E2/9.0)+C_k*a_11*t71123* \
               t71275*t71268*t71277*t71278*(1.1E2/9.0)-C_k*a_3*t71123*t71280*t71273*t71275*t71268*(1.0E1/3.0)+C_k* \
               a_4*t71123*t71280*t71273*t71275*t71268*(4.0E1/9.0)-C_k*a_5*t71123*t71273*t71282*t71276*t71268*(5.0E1/ \
               9.0)+C_k*a_6*t71123*t71273*t71282*t71276*t71268*(2.0E1/3.0)-C_k*a_6*t71123*t71283*t71275*t71276*t71268* \
               (2.0E1/3.0)+C_k*a_7*t71123*t71283*t71275*t71276*t71268*(7.0E1/9.0)-C_k*a_9*t71123*t71273*t71268*t71277* \
               t71286*1.0E1+a_10*t71300*t71275*t71277*t71296*t71297*t71298*(2.75E3/9.0)-a_11*t71300*t71275*t71277* \
               t71296*t71297*t71298*(6.05E3/9.0)-a_10*t71273*t71277*t71278*t71296*t71297*t71298*(5.0E3/9.0)+a_11* \
               t71273*t71277*t71278*t71296*t71297*t71298*(2.75E3/9.0)+a_3*t71281*t71273*t71275*t71296*t71297*t71298* \
               (1.0E2/3.0)-a_4*t71281*t71273*t71275*t71296*t71297*t71298*(8.0E2/9.0)+a_5*t71281*t71273*t71275*t71296* \
               t71297*t71298*(5.0E2/9.0)+a_5*t71273*t71283*t71276*t71296*t71297*t71298*(2.5E2/3.0)-a_6*t71273*t71283* \
               t71276*t71296*t71297*t71298*2.0E2+a_6*t71275*t71284*t71276*t71296*t71297*t71298*(3.5E2/3.0)+a_7*t71273* \
               t71283*t71276*t71296*t71297*t71298*(3.5E2/3.0)-a_7*t71275*t71284*t71276*t71296*t71297*t71298*(2.45E3/ \
               9.0)+a_8*t71275*t71284*t71276*t71296*t71297*t71298*(1.4E3/9.0)+a_9*t71273*t71277*t71278*t71296*t71297* \
               t71298*2.5E2+a_11*1.0/pow(t71272,1.3E1)*t71273*t71275*t71277*t71296*t71297*t71298*(1.1E3/3.0)-C_k* \
               a_11*t71300*t71123*t71273*t71275*t71268*t71277*(1.1E2/9.0)-C_k*a_7*t71123*t71273*t71275*t71284*t71276* \
               t71268*(7.0E1/9.0)+C_k*a_8*t71123*t71273*t71275*t71284*t71276*t71268*(8.0E1/9.0)+a_7*t71273*t71275* \
               t71276*t71285*t71296*t71297*t71298*(1.4E3/9.0)-a_8*t71273*t71275*t71276*t71285*t71296*t71297*t71298* \
               (3.2E3/9.0)+a_9*t71273*t71275*t71276*t71285*t71296*t71297*t71298*2.0E2)-kp*t71305*t71317*t71318*2.0+ \
               kp*rho_b[index]*t71317*t71318*(gamma_bb[index]*mu_*t71301*t71303*t71287*t71288*(4.0/3.0)+gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t71291*t71287*t71288*(3.0/2.0)+gamma_bb[index]* \
               mu_*1.0/pow(t71290,8.0/3.0)*t71287*t71288*t71289*(1.0E1/9.0))-kp*rho_b[index]*(t71305*t71305)*t71317* \
               1.0/(t71293*t71293*t71293)*2.0-kp*rho_b[index]*t71330*t71305*t71318*2.0)+t71434*t71389*(-t71156+t71267+ \
               t71160*t71372*t71067)*2.0+t71380*t71456*t71389*2.0-rho_b[index]*t71380*t71389*(ccaa1*gamma_bb[index]* \
               gcaa*t71365*t71398*(8.8E1/9.0)-ccaa1*t71413*t71360*t71373*t71359*2.4E1+ccaa2*t71360*t71407*t71373* \
               t71359*(3.04E2/9.0)+ccaa4*t71374*t71428*t71375*t71395*(1.12E3/9.0)-ccaa4*t71410*t71418*t71427*t71374* \
               t71375*(6.4E1/3.0)-ccaa2*t71421*t71408*t71373*t71429*t71359*(3.2E1/3.0)-ccaa2*t71373*t71429*t71359* \
               t71378*(gamma_bb[index]*gcaa*t71365*(1.76E2/9.0)+t71360*t71373*t71359*(3.04E2/9.0))-ccaa4*t71427*t71374* \
               t71375*t71376*(gamma_bb[index]*gcaa*t71365*(3.52E2/9.0)+t71360*t71373*t71359*(6.08E2/3.0)+t71374*t71428* \
               t71375*(1.12E3/9.0)+gamma_bb[index]*gcaa*t71412*t71373*t71359*2.88E2)+ccaa2*(t71421*t71421)*1.0/(t71406* \
               t71406*t71406)*t71373*t71359*t71378*2.0+ccaa4*(t71418*t71418)*t71374*t71375*t71376*1.0/(t71394*t71394* \
               t71394)*2.0+ccaa3*gamma_bb[index]*gcaa*t71403*t71412*t71373*t71359*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               t71412*t71373*t71359*1.0/(t71397*t71397*t71397)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t71402* \
               t71402*t71402)*(t71425*t71425)*t71373*t71359*t71377*2.0-ccaa3*gamma_bb[index]*gcaa*t71426*t71373*t71359* \
               t71377*(gamma_bb[index]*gcaa*t71365*(8.8E1/3.0)+t71360*t71373*t71359*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t71412*t71373*t71359*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t71425*t71426*t71373*t71409*t71359*1.6E1) \
               +rho_b[index]*t71456*t71459*t71389*2.0+rho_b[index]*t71434*t71389*(t71450+t71444-t71256-t71265+t71448- \
               t71160*t71067*(t71450-t71442+t71444-t71256-t71265-t71447+t71448-t71449+t71163*t71244*t71253*t71435* \
               2.0+a1f*c*c0f*t71161*t71251*(8.0/9.0)))+gamma_bb[index]*t71380*t71382*t71384*t71456*t71268*(1.0/4.0) \
               -gamma_bb[index]*t71434*t71382*t71384*t71268*t71459*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t73943 = 1.0/pow(rho_b[index],1.0/3.0);
            double t73944 = c*t73943;
            double t73945 = sqrt(t73944);
            double t73946 = b1f*t73945;
            double t73947 = pow(t73944,3.0/2.0);
            double t73948 = b3f*t73947;
            double t73949 = c*c;
            double t73950 = 1.0/pow(rho_b[index],2.0/3.0);
            double t73951 = b4f*t73950*t73949;
            double t73952 = b2f*c*t73943;
            double t73953 = t73951+t73952+t73946+t73948;
            double t73954 = 1.0/pow(rho_b[index],4.0/3.0);
            double t73955 = b1p*t73945;
            double t73956 = b3p*t73947;
            double t73957 = b4p*t73950*t73949;
            double t73958 = b2p*c*t73943;
            double t73959 = t73955+t73956+t73957+t73958;
            double t73960 = 1.0/pow(rho_b[index],5.0/3.0);
            double t73961 = 1.0/sqrt(t73944);
            double t73962 = 1.0/c0f;
            double t73963 = 1.0/t73953;
            double t73964 = t73962*t73963*(1.0/2.0);
            double t73965 = t73964+1.0;
            double t73966 = 1.0/c0p;
            double t73967 = 1.0/t73959;
            double t73968 = t73966*t73967*(1.0/2.0);
            double t73969 = t73968+1.0;
            double t73970 = a1p*c*t73943;
            double t73971 = t73970+1.0;
            double t73972 = 1.0/t73969;
            double t73973 = 1.0/(t73959*t73959);
            double t73974 = b4p*t73960*t73949*(2.0/3.0);
            double t73975 = b2p*c*t73954*(1.0/3.0);
            double t73976 = b1p*c*t73961*t73954*(1.0/6.0);
            double t73977 = b3p*c*t73945*t73954*(1.0/2.0);
            double t73978 = t73974+t73975+t73976+t73977;
            double t73979 = t73971*t73972*t73973*t73978;
            double t73980 = log(t73969);
            double t73981 = gamma_bb[index]*gamma_bb[index];
            double t73982 = gcaa*gcaa;
            double t73983 = t73981*t73981;
            double t73984 = t73982*t73982;
            double t73985 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t73986 = 1.0/pow(rho_b[index],8.0/3.0);
            double t73987 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t73988 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t73989 = pow(2.0,1.0/3.0);
            double t73990 = t73989*2.0;
            double t73991 = t73990-2.0;
            double t73992 = two_13*2.0;
            double t73993 = t73992-2.0;
            double t73994 = 1.0/t73993;
            double t73995 = log(t73965);
            double t73996 = a1f*c*t73943;
            double t73997 = t73996+1.0;
            double t73998 = tau_b[index]-1.0/1.0E20;
            double t73999 = ( (t73998 > 0.0) ?  1.0 : 0.0 ) ;
            double t74000 = 1.0/tau_b[index];
            double t74001 = tau_b[index]*2.0;
            double t74002 = 1.0/rho_b[index];
            double t74050 = gamma_bb[index]*t74002*(1.0/4.0);
            double t74003 = t74001-t74050;
            double t74004 = t74000*t74003*(1.0/2.0);
            double t74005 = t74004-1.0;
            double t74006 = t73999*t74005;
            double t74007 = t74006+1.0;
            double t74008 = gamma_bb[index]*gcaa*t73986*4.0;
            double t74009 = gamma_bb[index]*gcaa*t73981*t73982*t73987*4.0;
            double t74010 = t73981*t73982*t73988*6.0;
            double t74011 = t73983*t73984*t73985;
            double t74012 = t74010+t74011+t74008+t74009+1.0;
            double t74013 = 1.0/t74012;
            double t74014 = gamma_bb[index]*gcaa*t73986;
            double t74015 = t74014+1.0;
            double t74016 = 1.0/t74015;
            double t74017 = gamma_bb[index]*gcaa*t73986*3.0;
            double t74018 = gamma_bb[index]*gcaa*t73981*t73982*t73987;
            double t74019 = t73981*t73982*t73988*3.0;
            double t74020 = t74017+t74018+t74019+1.0;
            double t74021 = 1.0/t74020;
            double t74022 = gamma_bb[index]*gcaa*t73986*2.0;
            double t74023 = t73981*t73982*t73988;
            double t74024 = t74022+t74023+1.0;
            double t74025 = 1.0/t74024;
            double t74026 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t74027 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t74028 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t74029 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t74030 = pow(rho_b[index],2.0/3.0);
            double t74031 = pow(rho_b[index],5.0/3.0);
            double t74032 = C_k*t74000*t74031;
            double t74033 = t74032+1.0;
            double t74034 = t74032-1.0;
            double t74035 = 1.0/(t74033*t74033);
            double t74036 = t74034*t74034;
            double t74037 = t74036*t74036;
            double t74038 = t74037*t74037;
            double t74039 = 1.0/pow(t74033,1.1E1);
            double t74040 = 1.0/(t74033*t74033*t74033);
            double t74041 = 1.0/(t74033*t74033*t74033*t74033);
            double t74042 = 1.0/(t74033*t74033*t74033*t74033*t74033);
            double t74043 = 1.0/(t74033*t74033*t74033*t74033*t74033*t74033);
            double t74044 = 1.0/(t74033*t74033*t74033*t74033*t74033*t74033*t74033);
            double t74045 = 1.0/(t74033*t74033*t74033*t74033*t74033*t74033*t74033*t74033);
            double t74046 = 1.0/(t74033*t74033*t74033*t74033*t74033*t74033*t74033*t74033*t74033);
            double t74047 = 1.0/pow(t74033,1.0E1);
            double t74048 = c0f*t73995*t73997*2.0;
            double t74049 = c0p*t73971*t73980*2.0;
            double t74051 = 1.0/pow(rho_b[index],1.0E1);
            double t74052 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t74053 = 1.0/(t74015*t74015);
            double t74054 = gamma_bb[index]*gcaa*t74027*(3.2E1/3.0);
            double t74055 = gamma_bb[index]*gcaa*t73981*t73982*t74028*3.2E1;
            double t74056 = t73981*t73982*t74026*3.2E1;
            double t74057 = t73983*t73984*t74029*(3.2E1/3.0);
            double t74058 = t74054+t74055+t74056+t74057;
            double t74059 = gamma_bb[index]*gcaa*t74027*(1.6E1/3.0);
            double t74060 = t73981*t73982*t74026*(1.6E1/3.0);
            double t74061 = t74060+t74059;
            double t74062 = gamma_bb[index]*gcaa*t74027*8.0;
            double t74063 = gamma_bb[index]*gcaa*t73981*t73982*t74028*8.0;
            double t74064 = t73981*t73982*t74026*1.6E1;
            double t74065 = t74062+t74063+t74064;
            double t74066 = 1.0/(t74020*t74020);
            double t74067 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t74068 = 1.0/(t74012*t74012);
            double t74069 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t74070 = 1.0/(t74024*t74024);
            double t74071 = ccaa4*t73983*t73984*t73985*t74013;
            double t74072 = ccaa1*gamma_bb[index]*gcaa*t73986*t74016;
            double t74073 = ccaa3*gamma_bb[index]*gcaa*t73981*t73982*t73987*t74021;
            double t74074 = ccaa2*t73981*t73982*t73988*t74025;
            double t74075 = ccaa0+t74071+t74072+t74073+t74074;
            double t74076 = 1.0/t73965;
            double t74077 = b4f*t73960*t73949*(2.0/3.0);
            double t74078 = b2f*c*t73954*(1.0/3.0);
            double t74079 = b1f*c*t73961*t73954*(1.0/6.0);
            double t74080 = b3f*c*t73945*t73954*(1.0/2.0);
            double t74081 = t74080+t74077+t74078+t74079;
            double t74082 = 1.0/(t73953*t73953);
            double t74083 = 1.0/pow(rho_b[index],7.0/3.0);
            double t74084 = 1.0/pow(t73944,3.0/2.0);
            double t74085 = t74081*t74081;
            double t74086 = t73978*t73978;
            double t74087 = 1.0/(t73959*t73959*t73959);
            double t74088 = t73971*t73972*t74086*t74087*2.0;
            double t74089 = b4p*t73949*t73986*(1.0E1/9.0);
            double t74090 = b2p*c*t74083*(4.0/9.0);
            double t74091 = b3p*t73961*t73949*t73986*(1.0/1.2E1);
            double t74092 = b1p*c*t73961*t74083*(2.0/9.0);
            double t74093 = b3p*c*t73945*t74083*(2.0/3.0);
            double t74094 = t74090+t74091+t74092+t74093+t74089-b1p*t73949*t73986*t74084*(1.0/3.6E1);
            double t74095 = 1.0/(t73969*t73969);
            double t74096 = 1.0/(t73959*t73959*t73959*t73959);
            double t74097 = a1p*c*c0p*t73980*t74083*(8.0/9.0);
            double t74098 = a1f*c*c0f*t73954*t73995*(2.0/3.0);
            double t74099 = a1p*c*c0p*t73980*t73954*(2.0/3.0);
            double t74100 = ccaa4*t73983*t73984*t74013*t74029*(3.2E1/3.0);
            double t74101 = ccaa1*gamma_bb[index]*gcaa*t74016*t74027*(8.0/3.0);
            double t74102 = ccaa3*gamma_bb[index]*gcaa*t73981*t73982*t74021*t74028*8.0;
            double t74103 = ccaa2*t73981*t73982*t74025*t74026*(1.6E1/3.0);
            double t74140 = ccaa1*t73981*t73982*t74026*t74053*(8.0/3.0);
            double t74141 = ccaa3*gamma_bb[index]*gcaa*t73981*t73982*t73987*t74065*t74066;
            double t74142 = ccaa4*t73983*t73984*t73985*t74058*t74068;
            double t74143 = ccaa2*t73981*t73982*t73988*t74061*t74070;
            double t74104 = t74100+t74101+t74102+t74103-t74140-t74141-t74142-t74143;
            double t74105 = X-1.0;
            double t74106 = 1.0/(k*k);
            double t74107 = 1.0/kp;
            double t74108 = 1.0/(rho_b[index]*rho_b[index]);
            double t74109 = rho_b[index]*2.0;
            double t74110 = 1.0/pow(t74109,2.0/3.0);
            double t74111 = gamma_bb[index]*mu_*t74110*t74106*t74107*t74108*(1.0/4.0);
            double t74112 = t74111+1.0;
            double t74113 = 1.0/t74112;
            double t74114 = kp-kp*t74113+1.0;
            double t74115 = C_k*C_k;
            double t74116 = pow(rho_b[index],4.0/3.0);
            double t74117 = 1.0/(tau_b[index]*tau_b[index]);
            double t74118 = 1.0/t74033;
            double t74119 = 1.0/pow(t74033,1.2E1);
            double t74120 = t73979+t74098-t74099-t73997*t74081*t74082*t74076;
            double t74121 = t73991*t73994*t74120;
            double t74122 = 1.0/(t74112*t74112);
            double t74123 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t74124 = 1.0/pow(t74109,5.0/3.0);
            double t74125 = a_1*t74034*t74118;
            double t74126 = a_10*t74036*t74038*t74047;
            double t74127 = a_11*t74034*t74036*t74038*t74039;
            double t74128 = a_2*t74035*t74036;
            double t74129 = a_3*t74040*t74034*t74036;
            double t74130 = a_4*t74041*t74037;
            double t74131 = a_5*t74042*t74034*t74037;
            double t74132 = a_6*t74043*t74036*t74037;
            double t74133 = a_7*t74034*t74044*t74036*t74037;
            double t74134 = a_8*t74045*t74038;
            double t74135 = a_9*t74034*t74046*t74038;
            double t74136 = t74130+t74131+t74132+t74133+t74125+t74134+t74126+t74135+t74127+t74128+t74129+1.0;
            double t74137 = t74048-t74049;
            double t74138 = t73991*t73994*t74137;
            double t74139 = t74138+t74049;
            double t74144 = gamma_bb[index]*mu_*t74110*t74123*t74106*t74107*(1.0/2.0);
            double t74145 = gamma_bb[index]*mu_*t74106*t74124*t74107*t74108*(1.0/3.0);
            double t74146 = t74144+t74145;
            double t74147 = C_k*a_1*t74000*t74030*t74118*(5.0/3.0);
            double t74148 = C_k*a_2*t74000*t74030*t74034*t74035*(1.0E1/3.0);
            double t74149 = C_k*a_10*t74000*t74030*t74034*t74038*t74047*(5.0E1/3.0);
            double t74150 = C_k*a_11*t74000*t74030*t74036*t74038*t74039*(5.5E1/3.0);
            double t74151 = C_k*a_3*t74000*t74030*t74040*t74036*5.0;
            double t74152 = C_k*a_4*t74000*t74030*t74041*t74034*t74036*(2.0E1/3.0);
            double t74153 = C_k*a_5*t74000*t74030*t74042*t74037*(2.5E1/3.0);
            double t74154 = C_k*a_6*t74000*t74030*t74034*t74043*t74037*1.0E1;
            double t74155 = C_k*a_7*t74000*t74030*t74044*t74036*t74037*(3.5E1/3.0);
            double t74156 = C_k*a_8*t74000*t74030*t74034*t74036*t74045*t74037*(4.0E1/3.0);
            double t74157 = C_k*a_9*t74000*t74030*t74046*t74038*1.5E1;
            double t74158 = t74150+t74151+t74152+t74153+t74154+t74155+t74147+t74156+t74148+t74157+t74149-C_k* \
               a_1*t74000*t74030*t74034*t74035*(5.0/3.0)-C_k*a_2*t74000*t74030*t74040*t74036*(1.0E1/3.0)-C_k*a_4* \
               t74000*t74030*t74042*t74037*(2.0E1/3.0)-C_k*a_8*t74000*t74030*t74046*t74038*(4.0E1/3.0)-C_k*a_10*t74000* \
               t74030*t74036*t74038*t74039*(5.0E1/3.0)-C_k*a_3*t74000*t74030*t74041*t74034*t74036*5.0-C_k*a_5*t74000* \
               t74030*t74034*t74043*t74037*(2.5E1/3.0)-C_k*a_6*t74000*t74030*t74044*t74036*t74037*1.0E1-C_k*a_9*t74000* \
               t74030*t74034*t74038*t74047*1.5E1-C_k*a_11*t74000*t74030*t74034*t74036*t74038*t74119*(5.5E1/3.0)-C_k* \
               a_7*t74000*t74030*t74034*t74036*t74045*t74037*(3.5E1/3.0);
            v_rho_b_rho_b_[index] = t74007*t74075*(-t73979+t74099+t73991*t73994*(t73979+t74098-t73997*t74081* \
               t74082*t74076-a1p*c*c0p*t73980*t73954*(2.0/3.0)))*2.0-t74105*t74114*t74158*2.0+t74104*t74007*(t74049+ \
               t73991*t73994*(t74048-c0p*t73971*t73980*2.0))*2.0-rho_b[index]*t74007*t74139*(ccaa1*gamma_bb[index]* \
               gcaa*t74016*t74067*(8.8E1/9.0)-ccaa1*t73981*t73982*t74052*t74053*2.4E1+ccaa2*t73981*t73982*t74025* \
               t74052*(3.04E2/9.0)+ccaa4*t73983*t73984*t74013*t74069*(1.12E3/9.0)-ccaa2*t73981*t73982*t74061*t74070* \
               t74026*(3.2E1/3.0)-ccaa4*t73983*t73984*t74029*t74058*t74068*(6.4E1/3.0)-ccaa2*t73981*t73982*t73988* \
               t74070*(gamma_bb[index]*gcaa*t74067*(1.76E2/9.0)+t73981*t73982*t74052*(3.04E2/9.0))-ccaa4*t73983*t73984* \
               t73985*t74068*(gamma_bb[index]*gcaa*t74067*(3.52E2/9.0)+t73981*t73982*t74052*(6.08E2/3.0)+t73983*t73984* \
               t74069*(1.12E3/9.0)+gamma_bb[index]*gcaa*t73981*t73982*t74051*2.88E2)+ccaa2*t73981*t73982*t73988*1.0/ \
               (t74024*t74024*t74024)*(t74061*t74061)*2.0+ccaa4*t73983*t73984*t73985*1.0/(t74012*t74012*t74012)*(t74058* \
               t74058)*2.0+ccaa3*gamma_bb[index]*gcaa*t73981*t73982*t74021*t74051*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               t73981*t73982*1.0/(t74015*t74015*t74015)*t74051*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t73981*t73982* \
               t73987*1.0/(t74020*t74020*t74020)*(t74065*t74065)*2.0-ccaa3*gamma_bb[index]*gcaa*t73981*t73982*t73987* \
               t74066*(gamma_bb[index]*gcaa*t74067*(8.8E1/3.0)+t73981*t73982*t74052*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t73981*t73982*t74051*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t73981*t73982*t74028*t74065*t74066*1.6E1) \
               -rho_b[index]*t74105*t74114*(C_k*a_1*t73943*t74000*t74118*(1.0E1/9.0)-a_1*t74115*t74035*t74116*t74117* \
               (5.0E1/9.0)+a_2*t74115*t74035*t74116*t74117*(5.0E1/9.0)+a_1*t74040*t74034*t74115*t74116*t74117*(5.0E1/ \
               9.0)+a_10*t74115*t74116*t74117*t74038*t74047*2.5E2-a_2*t74040*t74034*t74115*t74116*t74117*(2.0E2/9.0) \
               +a_2*t74041*t74115*t74116*t74036*t74117*(5.0E1/3.0)+a_3*t74040*t74034*t74115*t74116*t74117*(5.0E1/ \
               3.0)-a_3*t74041*t74115*t74116*t74036*t74117*5.0E1+a_4*t74041*t74115*t74116*t74036*t74117*(1.0E2/3.0) \
               +a_4*t74043*t74115*t74116*t74117*t74037*(5.0E2/9.0)-a_5*t74043*t74115*t74116*t74117*t74037*(1.25E3/ \
               9.0)+a_6*t74043*t74115*t74116*t74117*t74037*(2.5E2/3.0)+a_8*t74115*t74116*t74117*t74038*t74047*2.0E2- \
               a_9*t74115*t74116*t74117*t74038*t74047*4.5E2-C_k*a_1*t73943*t74000*t74034*t74035*(1.0E1/9.0)-C_k*a_2* \
               t73943*t74000*t74040*t74036*(2.0E1/9.0)+C_k*a_2*t73943*t74000*t74034*t74035*(2.0E1/9.0)+C_k*a_3*t73943* \
               t74000*t74040*t74036*(1.0E1/3.0)-C_k*a_4*t73943*t74000*t74042*t74037*(4.0E1/9.0)+C_k*a_5*t73943*t74000* \
               t74042*t74037*(5.0E1/9.0)-C_k*a_8*t73943*t74000*t74046*t74038*(8.0E1/9.0)+C_k*a_9*t73943*t74000*t74046* \
               t74038*1.0E1+C_k*a_10*t73943*t74000*t74034*t74038*t74047*(1.0E2/9.0)-C_k*a_10*t73943*t74000*t74036* \
               t74038*t74039*(1.0E2/9.0)+C_k*a_11*t73943*t74000*t74036*t74038*t74039*(1.1E2/9.0)-C_k*a_3*t73943*t74000* \
               t74041*t74034*t74036*(1.0E1/3.0)+C_k*a_4*t73943*t74000*t74041*t74034*t74036*(4.0E1/9.0)-C_k*a_5*t73943* \
               t74000*t74034*t74043*t74037*(5.0E1/9.0)+C_k*a_6*t73943*t74000*t74034*t74043*t74037*(2.0E1/3.0)-C_k* \
               a_6*t73943*t74000*t74044*t74036*t74037*(2.0E1/3.0)+C_k*a_7*t73943*t74000*t74044*t74036*t74037*(7.0E1/ \
               9.0)-C_k*a_9*t73943*t74000*t74034*t74038*t74047*1.0E1-a_10*t74034*t74115*t74116*t74117*t74038*t74039* \
               (5.0E3/9.0)+a_10*t74115*t74116*t74036*t74117*t74038*t74119*(2.75E3/9.0)+a_11*t74034*t74115*t74116* \
               t74117*t74038*t74039*(2.75E3/9.0)-a_11*t74115*t74116*t74036*t74117*t74038*t74119*(6.05E3/9.0)+a_3* \
               t74042*t74034*t74115*t74116*t74036*t74117*(1.0E2/3.0)-a_4*t74042*t74034*t74115*t74116*t74036*t74117* \
               (8.0E2/9.0)+a_5*t74042*t74034*t74115*t74116*t74036*t74117*(5.0E2/9.0)+a_5*t74034*t74115*t74044*t74116* \
               t74117*t74037*(2.5E2/3.0)-a_6*t74034*t74115*t74044*t74116*t74117*t74037*2.0E2+a_6*t74115*t74116*t74036* \
               t74045*t74117*t74037*(3.5E2/3.0)+a_7*t74034*t74115*t74044*t74116*t74117*t74037*(3.5E2/3.0)-a_7*t74115* \
               t74116*t74036*t74045*t74117*t74037*(2.45E3/9.0)+a_8*t74115*t74116*t74036*t74045*t74117*t74037*(1.4E3/ \
               9.0)+a_9*t74034*t74115*t74116*t74117*t74038*t74039*2.5E2+a_11*1.0/pow(t74033,1.3E1)*t74034*t74115* \
               t74116*t74036*t74117*t74038*(1.1E3/3.0)-C_k*a_11*t73943*t74000*t74034*t74036*t74038*t74119*(1.1E2/ \
               9.0)-C_k*a_7*t73943*t74000*t74034*t74036*t74045*t74037*(7.0E1/9.0)+C_k*a_8*t73943*t74000*t74034*t74036* \
               t74045*t74037*(8.0E1/9.0)+a_7*t74034*t74115*t74116*t74036*t74117*t74037*t74046*(1.4E3/9.0)-a_8*t74034* \
               t74115*t74116*t74036*t74117*t74037*t74046*(3.2E3/9.0)+a_9*t74034*t74115*t74116*t74036*t74117*t74037* \
               t74046*2.0E2)-rho_b[index]*t74104*t74007*(-t73979+t74121+t74099)*2.0+rho_b[index]*t74007*t74075*(- \
               t74088-t74097+t73991*t73994*(t74088+t74097-t73971*t73972*t73973*t74094-1.0/(t73953*t73953*t73953)* \
               t73997*t74076*t74085*2.0+t73997*t74082*t74076*(b2f*c*t74083*(4.0/9.0)+b4f*t73949*t73986*(1.0E1/9.0) \
               +b1f*c*t73961*t74083*(2.0/9.0)+b3f*c*t73945*t74083*(2.0/3.0)-b1f*t73949*t73986*t74084*(1.0/3.6E1)+ \
               b3f*t73961*t73949*t73986*(1.0/1.2E1))+1.0/(t73953*t73953*t73953*t73953)*t73962*1.0/(t73965*t73965) \
               *t73997*t74085*(1.0/2.0)-a1f*c*c0f*t73995*t74083*(8.0/9.0)-t73971*t73966*t74086*t74095*t74096*(1.0/ \
               2.0)+a1f*c*t73954*t74081*t74082*t74076*(2.0/3.0)-a1p*c*t73954*t73972*t73973*t73978*(2.0/3.0))+t73971* \
               t73972*t73973*t74094+t73971*t73966*t74086*t74095*t74096*(1.0/2.0)+a1p*c*t73954*t73972*t73973*t73978* \
               (2.0/3.0))+kp*t74122*t74105*t74136*t74146*2.0+gamma_bb[index]*t73999*t74000*t74002*t74104*t74139*(1.0/ \
               4.0)+kp*rho_b[index]*t74122*t74105*t74146*t74158*2.0+gamma_bb[index]*t73999*t74000*t74002*t74075*(- \
               t73979+t74121+t74099)*(1.0/4.0)-kp*rho_b[index]*t74122*t74105*t74136*(gamma_bb[index]*mu_*t74123*t74106* \
               t74124*t74107*(4.0/3.0)+gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]) \
               *t74110*t74106*t74107*(3.0/2.0)+gamma_bb[index]*mu_*t74106*t74107*t74108*1.0/pow(t74109,8.0/3.0)*(1.0E1/ \
               9.0))+kp*rho_b[index]*1.0/(t74112*t74112*t74112)*t74105*t74136*(t74146*t74146)*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t71465 = 1.0/(k*k);
                double t71466 = 1.0/kp;
                double t71467 = rho_a[index]*2.0;
                double t71468 = 1.0/(rho_a[index]*rho_a[index]);
                double t71469 = 1.0/pow(t71467,2.0/3.0);
                double t71470 = pow(rho_a[index],5.0/3.0);
                double t71471 = 1.0/tau_a[index];
                double t71472 = C_k*t71470*t71471;
                double t71473 = t71472-1.0;
                double t71474 = t71473*t71473;
                double t71475 = t71474*t71474;
                double t71476 = t71475*t71475;
                double t71477 = t71472+1.0;
                double t71478 = gamma_aa[index]*mu_*t71465*t71466*t71468*t71469*(1.0/4.0);
                double t71479 = t71478+1.0;
                double t71480 = 1.0/(t71479*t71479);
                double t71481 = 1.0/t71477;
                double t71482 = a_1*t71481*t71473;
                double t71483 = 1.0/pow(t71477,1.0E1);
                double t71484 = a_10*t71474*t71483*t71476;
                double t71485 = 1.0/pow(t71477,1.1E1);
                double t71486 = a_11*t71473*t71474*t71476*t71485;
                double t71487 = 1.0/(t71477*t71477);
                double t71488 = a_2*t71474*t71487;
                double t71489 = 1.0/(t71477*t71477*t71477);
                double t71490 = a_3*t71473*t71474*t71489;
                double t71491 = 1.0/(t71477*t71477*t71477*t71477);
                double t71492 = a_4*t71491*t71475;
                double t71493 = 1.0/(t71477*t71477*t71477*t71477*t71477);
                double t71494 = a_5*t71473*t71475*t71493;
                double t71495 = 1.0/(t71477*t71477*t71477*t71477*t71477*t71477);
                double t71496 = a_6*t71474*t71475*t71495;
                double t71497 = 1.0/(t71477*t71477*t71477*t71477*t71477*t71477*t71477);
                double t71498 = a_7*t71473*t71474*t71475*t71497;
                double t71499 = 1.0/(t71477*t71477*t71477*t71477*t71477*t71477*t71477*t71477);
                double t71500 = a_8*t71476*t71499;
                double t71501 = 1.0/(t71477*t71477*t71477*t71477*t71477*t71477*t71477*t71477*t71477);
                double t71502 = a_9*t71501*t71473*t71476;
                double t71503 = t71500+t71502+t71490+t71482+t71492+t71484+t71494+t71486+t71496+t71488+t71498+1.0;
                double t71504 = pow(rho_a[index],2.0/3.0);
                double t71505 = 1.0/rho_a[index];
                double t71506 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t71507 = 1.0/pow(t71467,5.0/3.0);
                double t71508 = rho_a[index]+rho_b[index];
                double t71509 = 1.0/pow(t71508,1.0/3.0);
                double t71510 = c*t71509;
                double t71511 = sqrt(t71510);
                double t71512 = b1p*t71511;
                double t71513 = pow(t71510,3.0/2.0);
                double t71514 = b3p*t71513;
                double t71515 = c*c;
                double t71516 = 1.0/pow(t71508,2.0/3.0);
                double t71517 = b4p*t71515*t71516;
                double t71518 = b2p*c*t71509;
                double t71519 = t71512+t71514+t71517+t71518;
                double t71520 = 1.0/pow(t71508,4.0/3.0);
                double t71521 = 1.0/c0p;
                double t71522 = 1.0/t71519;
                double t71523 = t71521*t71522*(1.0/2.0);
                double t71524 = t71523+1.0;
                double t71525 = a1p*c*t71509;
                double t71526 = t71525+1.0;
                double t71527 = rho_a[index]-rho_b[index];
                double t71528 = t71527*t71527;
                double t71529 = 1.0/t71508;
                double t71530 = t71527*t71529;
                double t71531 = two_13*2.0;
                double t71532 = t71531-2.0;
                double t71533 = 1.0/t71532;
                double t71534 = 1.0/c0f;
                double t71535 = b1f*t71511;
                double t71536 = b3f*t71513;
                double t71537 = b4f*t71515*t71516;
                double t71538 = b2f*c*t71509;
                double t71539 = t71535+t71536+t71537+t71538;
                double t71540 = 1.0/t71539;
                double t71541 = t71540*t71534*(1.0/2.0);
                double t71542 = t71541+1.0;
                double t71543 = log(t71542);
                double t71544 = a1f*c*t71509;
                double t71545 = t71544+1.0;
                double t71546 = log(t71524);
                double t71556 = c0f*t71543*t71545*2.0;
                double t71557 = c0p*t71526*t71546*2.0;
                double t71547 = t71556-t71557;
                double t71548 = t71530+1.0;
                double t71549 = pow(t71548,4.0/3.0);
                double t71550 = -t71530+1.0;
                double t71551 = pow(t71550,4.0/3.0);
                double t71552 = t71551+t71549-2.0;
                double t71553 = 1.0/(t71508*t71508);
                double t71584 = t71553*t71527;
                double t71554 = t71529-t71584;
                double t71555 = 1.0/(t71508*t71508*t71508*t71508);
                double t71558 = t71528*t71528;
                double t71559 = 1.0/pow(t71508,5.0/3.0);
                double t71560 = 1.0/sqrt(t71510);
                double t71561 = 1.0/t71524;
                double t71562 = 1.0/(t71519*t71519);
                double t71563 = b4p*t71515*t71559*(2.0/3.0);
                double t71564 = b2p*c*t71520*(1.0/3.0);
                double t71565 = b1p*c*t71520*t71560*(1.0/6.0);
                double t71566 = b3p*c*t71511*t71520*(1.0/2.0);
                double t71567 = t71563+t71564+t71565+t71566;
                double t71568 = t71561*t71526*t71562*t71567;
                double t71569 = 1.0/(t71508*t71508*t71508*t71508*t71508);
                double t71570 = 1.0/d2fz0;
                double t71571 = 1.0/Aa;
                double t71572 = b1a*t71511;
                double t71573 = b3a*t71513;
                double t71574 = b4a*t71515*t71516;
                double t71575 = b2a*c*t71509;
                double t71576 = t71572+t71573+t71574+t71575;
                double t71577 = 1.0/t71576;
                double t71578 = t71571*t71577*(1.0/2.0);
                double t71579 = t71578+1.0;
                double t71580 = log(t71579);
                double t71581 = a1a*c*t71509;
                double t71582 = t71581+1.0;
                double t71583 = pow(t71548,1.0/3.0);
                double t71585 = t71554*t71583*(4.0/3.0);
                double t71586 = pow(t71550,1.0/3.0);
                double t71587 = t71585-t71554*t71586*(4.0/3.0);
                double t71588 = t71555*t71558;
                double t71589 = t71588-1.0;
                double t71590 = 1.0/pow(rho_a[index],1.0/3.0);
                double t71591 = c*t71590;
                double t71592 = sqrt(t71591);
                double t71593 = b1f*t71592;
                double t71594 = pow(t71591,3.0/2.0);
                double t71595 = b3f*t71594;
                double t71596 = 1.0/pow(rho_a[index],2.0/3.0);
                double t71597 = b4f*t71515*t71596;
                double t71598 = b2f*c*t71590;
                double t71599 = t71593+t71595+t71597+t71598;
                double t71600 = 1.0/pow(rho_a[index],4.0/3.0);
                double t71601 = b1p*t71592;
                double t71602 = b3p*t71594;
                double t71603 = b4p*t71515*t71596;
                double t71604 = b2p*c*t71590;
                double t71605 = t71601+t71602+t71603+t71604;
                double t71606 = 1.0/pow(rho_a[index],5.0/3.0);
                double t71607 = 1.0/sqrt(t71591);
                double t71608 = 1.0/t71599;
                double t71609 = t71534*t71608*(1.0/2.0);
                double t71610 = t71609+1.0;
                double t71611 = 1.0/t71605;
                double t71612 = t71521*t71611*(1.0/2.0);
                double t71613 = t71612+1.0;
                double t71614 = a1p*c*t71590;
                double t71615 = t71614+1.0;
                double t71616 = 1.0/t71613;
                double t71617 = 1.0/(t71605*t71605);
                double t71618 = b4p*t71515*t71606*(2.0/3.0);
                double t71619 = b2p*c*t71600*(1.0/3.0);
                double t71620 = b1p*c*t71600*t71607*(1.0/6.0);
                double t71621 = b3p*c*t71600*t71592*(1.0/2.0);
                double t71622 = t71620+t71621+t71618+t71619;
                double t71623 = t71622*t71615*t71616*t71617;
                double t71624 = log(t71613);
                double t71625 = pow(2.0,1.0/3.0);
                double t71626 = t71625*2.0;
                double t71627 = t71626-2.0;
                double t71628 = log(t71610);
                double t71629 = a1f*c*t71590;
                double t71630 = t71629+1.0;
                double t71631 = 1.0/pow(rho_a[index],8.0/3.0);
                double t71632 = gamma_aa[index]*t71631*(1.0/2.0);
                double t71633 = 1.0/pow(rho_b[index],8.0/3.0);
                double t71634 = gamma_bb[index]*t71633*(1.0/2.0);
                double t71635 = t71632+t71634;
                double t71636 = gcab*t71635;
                double t71637 = t71636+1.0;
                double t71638 = gcab*gcab;
                double t71639 = t71635*t71635;
                double t71640 = t71638*t71638;
                double t71641 = t71639*t71639;
                double t71642 = t71638*t71639;
                double t71643 = gcab*t71635*2.0;
                double t71644 = t71642+t71643+1.0;
                double t71645 = t71638*t71639*3.0;
                double t71646 = gcab*t71635*t71638*t71639;
                double t71647 = gcab*t71635*3.0;
                double t71648 = t71645+t71646+t71647+1.0;
                double t71649 = t71638*t71639*6.0;
                double t71650 = gcab*t71635*t71638*t71639*4.0;
                double t71651 = t71640*t71641;
                double t71652 = gcab*t71635*4.0;
                double t71653 = t71650+t71651+t71652+t71649+1.0;
                double t71654 = c0f*t71630*t71628*2.0;
                double t71656 = c0p*t71615*t71624*2.0;
                double t71655 = t71654-t71656;
                double t71657 = 1.0/pow(rho_b[index],1.0/3.0);
                double t71658 = c*t71657;
                double t71659 = sqrt(t71658);
                double t71660 = pow(t71658,3.0/2.0);
                double t71661 = 1.0/pow(rho_b[index],2.0/3.0);
                double t71662 = b1p*t71659;
                double t71663 = b3p*t71660;
                double t71664 = b4p*t71515*t71661;
                double t71665 = b2p*c*t71657;
                double t71666 = t71662+t71663+t71664+t71665;
                double t71667 = 1.0/t71666;
                double t71668 = t71521*t71667*(1.0/2.0);
                double t71669 = t71668+1.0;
                double t71670 = log(t71669);
                double t71671 = a1p*c*t71657;
                double t71672 = t71671+1.0;
                double t71673 = c0p*t71670*t71672*2.0;
                double t71674 = t71533*t71552*t71555*t71547*t71558;
                double t71675 = Aa*t71533*t71552*t71570*t71580*t71582*t71589*2.0;
                double t71676 = 1.0/t71637;
                double t71677 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t71678 = 1.0/(t71637*t71637);
                double t71679 = 1.0/t71644;
                double t71680 = 1.0/(t71648*t71648);
                double t71681 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t71682 = 1.0/(t71644*t71644);
                double t71683 = 1.0/t71648;
                double t71684 = 1.0/t71653;
                double t71685 = 1.0/(t71653*t71653);
                double t71686 = gcab*t71631*2.0;
                double t71687 = t71631*t71635*t71638*6.0;
                double t71688 = gcab*t71631*t71638*t71639*6.0;
                double t71689 = t71631*t71640*t71635*t71639*2.0;
                double t71690 = t71686+t71687+t71688+t71689;
                double t71691 = gamma_aa[index]*gcab*t71677*(8.0/3.0);
                double t71692 = gamma_aa[index]*t71635*t71638*t71677*(8.0/3.0);
                double t71693 = t71691+t71692;
                double t71694 = gcab*t71631;
                double t71695 = t71631*t71635*t71638;
                double t71696 = t71694+t71695;
                double t71697 = gamma_aa[index]*gcab*t71677*(1.6E1/3.0);
                double t71698 = gamma_aa[index]*gcab*t71638*t71639*t71677*1.6E1;
                double t71699 = gamma_aa[index]*t71640*t71635*t71639*t71677*(1.6E1/3.0);
                double t71700 = gamma_aa[index]*t71635*t71638*t71677*1.6E1;
                double t71701 = t71700+t71697+t71698+t71699;
                double t71702 = gcab*t71631*(3.0/2.0);
                double t71703 = t71631*t71635*t71638*3.0;
                double t71704 = gcab*t71631*t71638*t71639*(3.0/2.0);
                double t71705 = t71702+t71703+t71704;
                double t71706 = gamma_aa[index]*gcab*t71677*4.0;
                double t71707 = gamma_aa[index]*gcab*t71638*t71639*t71677*4.0;
                double t71708 = gamma_aa[index]*t71635*t71638*t71677*8.0;
                double t71709 = t71706+t71707+t71708;
                double t71710 = t71533*t71627*t71655;
                double t71711 = t71710+t71656;
                double t71712 = gamma_aa[index]*gamma_aa[index];
                double t71713 = gcaa*gcaa;
                double t71714 = t71713*t71713;
                double t71715 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t71716 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t71717 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t71718 = gamma_aa[index]*gcaa*t71631;
                double t71719 = t71718+1.0;
                double t71720 = gamma_aa[index]*gcaa*t71631*3.0;
                double t71721 = gamma_aa[index]*gcaa*t71712*t71713*t71717;
                double t71722 = t71712*t71713*t71716*3.0;
                double t71723 = t71720+t71721+t71722+1.0;
                double t71724 = t71712*t71712;
                double t71725 = gamma_aa[index]*gcaa*t71631*4.0;
                double t71726 = gamma_aa[index]*gcaa*t71712*t71713*t71717*4.0;
                double t71727 = t71712*t71713*t71716*6.0;
                double t71728 = t71714*t71715*t71724;
                double t71729 = t71725+t71726+t71727+t71728+1.0;
                double t71730 = gamma_aa[index]*gcaa*t71631*2.0;
                double t71731 = t71712*t71713*t71716;
                double t71732 = t71730+t71731+1.0;
                double t71733 = tau_a[index]-1.0/1.0E20;
                double t71734 = ( (t71733 > 0.0) ?  1.0 : 0.0 ) ;
                double t71735 = tau_a[index]*2.0;
                double t71775 = gamma_aa[index]*t71505*(1.0/4.0);
                double t71736 = t71735-t71775;
                double t71737 = t71471*t71736*(1.0/2.0);
                double t71738 = t71737-1.0;
                double t71739 = t71734*t71738;
                double t71740 = t71739+1.0;
                double t71741 = 1.0/t71719;
                double t71742 = 1.0/t71729;
                double t71743 = 1.0/t71732;
                double t71744 = 1.0/t71723;
                double t71745 = 1.0/(t71719*t71719);
                double t71746 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t71747 = 1.0/(t71723*t71723);
                double t71748 = 1.0/(t71732*t71732);
                double t71749 = gcaa*t71631*3.0;
                double t71750 = gamma_aa[index]*t71713*t71716*6.0;
                double t71751 = gcaa*t71712*t71713*t71717*3.0;
                double t71752 = t71750+t71751+t71749;
                double t71753 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t71754 = 1.0/(t71729*t71729);
                double t71755 = gcaa*t71631*4.0;
                double t71756 = gamma_aa[index]*t71713*t71716*1.2E1;
                double t71757 = gcaa*t71712*t71713*t71717*1.2E1;
                double t71758 = gamma_aa[index]*t71712*t71714*t71715*4.0;
                double t71759 = t71755+t71756+t71757+t71758;
                double t71760 = gcaa*t71631*2.0;
                double t71761 = gamma_aa[index]*t71713*t71716*2.0;
                double t71762 = t71760+t71761;
                double t71763 = gamma_aa[index]*gcaa*t71677*(1.6E1/3.0);
                double t71764 = t71712*t71713*t71681*(1.6E1/3.0);
                double t71765 = t71763+t71764;
                double t71766 = gamma_aa[index]*gcaa*t71677*8.0;
                double t71767 = gamma_aa[index]*gcaa*t71712*t71713*t71746*8.0;
                double t71768 = t71712*t71713*t71681*1.6E1;
                double t71769 = t71766+t71767+t71768;
                double t71770 = gamma_aa[index]*gcaa*t71677*(3.2E1/3.0);
                double t71771 = gamma_aa[index]*gcaa*t71712*t71713*t71746*3.2E1;
                double t71772 = t71712*t71713*t71681*3.2E1;
                double t71773 = t71714*t71724*t71753*(3.2E1/3.0);
                double t71774 = t71770+t71771+t71772+t71773;
                double t71776 = 1.0/t71610;
                double t71777 = 1.0/(t71599*t71599);
                double t71778 = b4f*t71515*t71606*(2.0/3.0);
                double t71779 = b2f*c*t71600*(1.0/3.0);
                double t71780 = b1f*c*t71600*t71607*(1.0/6.0);
                double t71781 = b3f*c*t71600*t71592*(1.0/2.0);
                double t71782 = t71780+t71781+t71778+t71779;
                double t71783 = a1f*c*c0f*t71600*t71628*(2.0/3.0);
                double t71784 = a1p*c*c0p*t71600*t71624*(2.0/3.0);
                double t71785 = ccaa1*gcaa*t71631*t71741;
                double t71786 = ccaa4*gamma_aa[index]*t71712*t71714*t71715*t71742*4.0;
                double t71787 = ccaa2*gamma_aa[index]*t71713*t71716*t71743*2.0;
                double t71788 = ccaa3*gcaa*t71712*t71713*t71717*t71744*3.0;
                double t71793 = ccaa1*gamma_aa[index]*t71713*t71716*t71745;
                double t71794 = ccaa3*gamma_aa[index]*gcaa*t71712*t71713*t71752*t71717*t71747;
                double t71795 = ccaa4*t71714*t71715*t71724*t71754*t71759;
                double t71796 = ccaa2*t71712*t71713*t71716*t71762*t71748;
                double t71789 = -t71793+t71785-t71794+t71786-t71795+t71787-t71796+t71788;
                double t71790 = t71623+t71783-t71784-t71630*t71782*t71776*t71777;
                double t71791 = t71533*t71627*t71790;
                double t71792 = -t71623+t71791+t71784;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t71711+rho_b[index]*(t71673-t71533*t71627*(t71673-c0f*log((t71534* \
                   (1.0/2.0))/(b1f*t71659+b3f*t71660+b2f*c*t71657+b4f*t71515*t71661)+1.0)*(a1f*c*t71657+1.0)*2.0))-t71508* \
                   (t71557+t71674+t71675))*(ccab1*gcab*t71676*t71677*(4.0/3.0)-ccab2*t71682*t71638*t71639*(gcab*t71677* \
                   (8.0/3.0)+gamma_aa[index]*t71681*t71638*(4.0/3.0)+t71635*t71638*t71677*(8.0/3.0))-ccab4*t71640*t71641* \
                   t71685*(gcab*t71677*(1.6E1/3.0)+gamma_aa[index]*t71681*t71638*8.0+t71635*t71638*t71677*1.6E1+gamma_aa[index]* \
                   t71640*t71681*t71639*8.0+gcab*t71638*t71639*t71677*1.6E1+t71640*t71635*t71639*t71677*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t71635*t71681*t71638*1.6E1)-ccab1*gamma_aa[index]*t71681*t71638*t71678*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t71681*t71638*t71679*(4.0/3.0)-ccab1*t71635*t71638*t71677*t71678*(4.0/3.0)+ccab2*t71635*t71638*t71677* \
                   t71679*(8.0/3.0)-ccab2*t71631*t71635*t71682*t71638*t71693+ccab4*t71640*t71635*t71639*t71684*t71677* \
                   (1.6E1/3.0)+ccab4*t71701*t71640*t71641*1.0/(t71653*t71653*t71653)*t71690*2.0+ccab2*1.0/(t71644*t71644* \
                   t71644)*t71638*t71639*t71693*t71696*2.0+ccab4*gamma_aa[index]*t71640*t71681*t71639*t71684*8.0+ccab3* \
                   gcab*t71638*t71683*t71639*t71677*4.0+ccab3*gamma_aa[index]*gcab*t71635*t71681*t71638*t71683*4.0-ccab2* \
                   gamma_aa[index]*t71635*t71682*t71638*t71677*t71696*(8.0/3.0)-ccab3*gcab*t71631*t71680*t71709*t71638* \
                   t71639*(3.0/2.0)-ccab4*t71701*t71631*t71640*t71635*t71639*t71685*2.0-ccab3*gcab*t71635*t71680*t71638* \
                   t71639*(gcab*t71677*4.0+gamma_aa[index]*t71681*t71638*4.0+t71635*t71638*t71677*8.0+gcab*t71638*t71639* \
                   t71677*4.0+gamma_aa[index]*gcab*t71635*t71681*t71638*4.0)+ccab1*gamma_aa[index]*gcab*t71635*t71681* \
                   1.0/(t71637*t71637*t71637)*t71638*(4.0/3.0)+ccab3*gcab*t71705*t71635*t71709*t71638*t71639*1.0/(t71648* \
                   t71648*t71648)*2.0-ccab3*gamma_aa[index]*gcab*t71705*t71680*t71638*t71639*t71677*4.0-ccab4*gamma_aa[index]* \
                   t71640*t71635*t71690*t71639*t71685*t71677*(1.6E1/3.0))-(X-1.0)*(-kp*rho_a[index]*t71503*t71480*(mu_* \
                   t71506*t71465*t71466*t71469*(1.0/2.0)+mu_*t71507*t71465*t71466*t71468*(1.0/3.0))+mu_*t71503*t71480* \
                   t71465*t71468*t71469*(1.0/4.0)+mu_*t71505*t71480*t71465*t71469*(C_k*a_1*t71504*t71471*t71481*(5.0/ \
                   3.0)-C_k*a_1*t71504*t71471*t71473*t71487*(5.0/3.0)+C_k*a_2*t71504*t71471*t71473*t71487*(1.0E1/3.0) \
                   -C_k*a_2*t71504*t71471*t71474*t71489*(1.0E1/3.0)+C_k*a_3*t71504*t71471*t71474*t71489*5.0-C_k*a_4*t71504* \
                   t71471*t71475*t71493*(2.0E1/3.0)+C_k*a_5*t71504*t71471*t71475*t71493*(2.5E1/3.0)-C_k*a_8*t71501*t71504* \
                   t71471*t71476*(4.0E1/3.0)+C_k*a_9*t71501*t71504*t71471*t71476*1.5E1+C_k*a_10*t71504*t71471*t71473* \
                   t71483*t71476*(5.0E1/3.0)-C_k*a_10*t71504*t71471*t71474*t71476*t71485*(5.0E1/3.0)+C_k*a_11*t71504* \
                   t71471*t71474*t71476*t71485*(5.5E1/3.0)-C_k*a_3*t71504*t71471*t71473*t71491*t71474*5.0+C_k*a_4*t71504* \
                   t71471*t71473*t71491*t71474*(2.0E1/3.0)-C_k*a_5*t71504*t71471*t71473*t71475*t71495*(2.5E1/3.0)+C_k* \
                   a_6*t71504*t71471*t71473*t71475*t71495*1.0E1-C_k*a_6*t71504*t71471*t71474*t71475*t71497*1.0E1+C_k* \
                   a_7*t71504*t71471*t71474*t71475*t71497*(3.5E1/3.0)-C_k*a_9*t71504*t71471*t71473*t71483*t71476*1.5E1- \
                   C_k*a_11*t71504*t71471*t71473*t71474*t71476*1.0/pow(t71477,1.2E1)*(5.5E1/3.0)-C_k*a_7*t71504*t71471* \
                   t71473*t71474*t71475*t71499*(3.5E1/3.0)+C_k*a_8*t71504*t71471*t71473*t71474*t71475*t71499*(4.0E1/3.0) \
                   )*(1.0/4.0)+mu_*t71503*t71505*t71465*t71469*1.0/(t71479*t71479*t71479)*(gamma_aa[index]*mu_*t71506* \
                   t71465*t71466*t71469*(1.0/2.0)+gamma_aa[index]*mu_*t71507*t71465*t71466*t71468*(1.0/3.0))*(1.0/2.0) \
                   )-(t71557+t71674+t71675+t71508*(t71568-t71533*t71552*t71555*t71558*(t71568-(t71545*1.0/(t71539*t71539) \
                   *(b2f*c*t71520*(1.0/3.0)+b4f*t71515*t71559*(2.0/3.0)+b1f*c*t71520*t71560*(1.0/6.0)+b3f*c*t71511*t71520* \
                   (1.0/2.0)))/t71542+a1f*c*c0f*t71520*t71543*(2.0/3.0)-a1p*c*c0p*t71520*t71546*(2.0/3.0))-a1p*c*c0p* \
                   t71520*t71546*(2.0/3.0)-t71533*t71552*t71547*t71558*t71569*4.0+t71533*t71555*t71547*t71558*t71587+ \
                   t71533*t71552*t71527*t71528*t71555*t71547*4.0-Aa*t71533*t71552*t71570*t71580*t71582*(t71558*t71569* \
                   4.0-t71527*t71528*t71555*4.0)*2.0+Aa*t71533*t71570*t71580*t71582*t71587*t71589*2.0+(t71533*t71552* \
                   t71570*t71582*1.0/(t71576*t71576)*t71589*(b2a*c*t71520*(1.0/3.0)+b4a*t71515*t71559*(2.0/3.0)+b1a*c* \
                   t71520*t71560*(1.0/6.0)+b3a*c*t71511*t71520*(1.0/2.0)))/t71579-Aa*a1a*c*t71520*t71533*t71552*t71570* \
                   t71580*t71589*(2.0/3.0))+rho_a[index]*(-t71623+t71784+t71533*t71627*(t71623+t71783-t71630*t71782*t71776* \
                   t71777-a1p*c*c0p*t71600*t71624*(2.0/3.0)))-c0p*t71615*t71624*2.0-t71533*t71627*t71655)*(ccab1*gcab* \
                   t71631*t71676*(1.0/2.0)-ccab4*t71640*t71641*t71690*t71685-ccab1*t71631*t71635*t71638*t71678*(1.0/2.0) \
                   +ccab2*t71631*t71635*t71638*t71679-ccab2*t71682*t71638*t71639*t71696+ccab4*t71631*t71640*t71635*t71639* \
                   t71684*2.0+ccab3*gcab*t71631*t71638*t71683*t71639*(3.0/2.0)-ccab3*gcab*t71705*t71635*t71680*t71638* \
                   t71639)-t71711*t71740*t71789+rho_a[index]*t71740*t71792*t71789-rho_a[index]*t71711*t71740*(ccaa1*gcaa* \
                   t71741*t71677*(-8.0/3.0)-ccaa2*gamma_aa[index]*t71713*t71743*t71681*(3.2E1/3.0)+ccaa1*gamma_aa[index]* \
                   t71713*t71681*t71745*8.0+ccaa2*t71712*t71713*t71681*t71762*t71748*(1.6E1/3.0)+ccaa4*t71714*t71724* \
                   t71753*t71754*t71759*(3.2E1/3.0)+ccaa4*t71714*t71715*t71724*t71754*(gcaa*t71677*(3.2E1/3.0)+gamma_aa[index]* \
                   t71713*t71681*6.4E1+gamma_aa[index]*t71712*t71714*t71753*(1.28E2/3.0)+gcaa*t71712*t71713*t71746*9.6E1) \
                   -ccaa1*gcaa*t71712*t71713*1.0/(t71719*t71719*t71719)*t71746*(1.6E1/3.0)+ccaa2*t71712*t71713*t71716* \
                   t71748*(gcaa*t71677*(1.6E1/3.0)+gamma_aa[index]*t71713*t71681*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t71712* \
                   t71714*t71742*t71753*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t71713*t71716*t71765*t71748*2.0-ccaa3*gcaa* \
                   t71712*t71713*t71744*t71746*2.4E1+ccaa4*gamma_aa[index]*t71712*t71714*t71715*t71754*t71774*4.0+ccaa3* \
                   gcaa*t71712*t71713*t71717*t71747*t71769*3.0-ccaa2*t71712*t71713*1.0/(t71732*t71732*t71732)*t71716* \
                   t71762*t71765*2.0-ccaa4*t71714*t71715*t71724*1.0/(t71729*t71729*t71729)*t71774*t71759*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t71712*t71713*t71717*t71747*(gcaa*t71677*8.0+gamma_aa[index]*t71713*t71681*3.2E1+gcaa*t71712* \
                   t71713*t71746*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t71712*t71713*t71752*t71746*t71747*8.0-ccaa3*gamma_aa[index]* \
                   gcaa*t71712*t71713*1.0/(t71723*t71723*t71723)*t71752*t71717*t71769*2.0)-t71471*t71734*t71792*(ccaa0+ \
                   ccaa1*gamma_aa[index]*gcaa*t71631*t71741+ccaa2*t71712*t71713*t71716*t71743+ccaa4*t71714*t71715*t71724* \
                   t71742+ccaa3*gamma_aa[index]*gcaa*t71712*t71713*t71717*t71744)*(1.0/8.0)-t71711*t71471*t71734*(ccaa1* \
                   gamma_aa[index]*gcaa*t71741*t71677*(8.0/3.0)+ccaa2*t71712*t71713*t71743*t71681*(1.6E1/3.0)-ccaa1*t71712* \
                   t71713*t71681*t71745*(8.0/3.0)+ccaa4*t71714*t71724*t71742*t71753*(3.2E1/3.0)-ccaa2*t71712*t71713*t71716* \
                   t71765*t71748-ccaa4*t71714*t71715*t71724*t71754*t71774+ccaa3*gamma_aa[index]*gcaa*t71712*t71713*t71744* \
                   t71746*8.0-ccaa3*gamma_aa[index]*gcaa*t71712*t71713*t71717*t71747*t71769)*(1.0/8.0)-gamma_aa[index]* \
                   t71711*t71505*t71471*t71734*t71789*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75287 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75288 = c*t75287;
                double t75289 = sqrt(t75288);
                double t75290 = pow(t75288,3.0/2.0);
                double t75291 = c*c;
                double t75292 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75293 = 1.0/c0p;
                double t75294 = b1p*t75289;
                double t75295 = b3p*t75290;
                double t75296 = b4p*t75291*t75292;
                double t75297 = b2p*c*t75287;
                double t75298 = t75294+t75295+t75296+t75297;
                double t75299 = 1.0/t75298;
                double t75300 = t75293*t75299*(1.0/2.0);
                double t75301 = t75300+1.0;
                double t75302 = log(t75301);
                double t75303 = a1p*c*t75287;
                double t75304 = t75303+1.0;
                double t75305 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75306 = gamma_aa[index]*gamma_aa[index];
                double t75307 = gcaa*gcaa;
                double t75308 = t75307*t75307;
                double t75309 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75310 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75311 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75312 = gamma_aa[index]*gcaa*t75305;
                double t75313 = t75312+1.0;
                double t75314 = gamma_aa[index]*gcaa*t75305*3.0;
                double t75315 = gamma_aa[index]*gcaa*t75311*t75306*t75307;
                double t75316 = t75310*t75306*t75307*3.0;
                double t75317 = t75314+t75315+t75316+1.0;
                double t75318 = t75306*t75306;
                double t75319 = gamma_aa[index]*gcaa*t75305*4.0;
                double t75320 = gamma_aa[index]*gcaa*t75311*t75306*t75307*4.0;
                double t75321 = t75310*t75306*t75307*6.0;
                double t75322 = t75308*t75309*t75318;
                double t75323 = t75320+t75321+t75322+t75319+1.0;
                double t75324 = gamma_aa[index]*gcaa*t75305*2.0;
                double t75325 = t75310*t75306*t75307;
                double t75326 = t75324+t75325+1.0;
                double t75327 = pow(2.0,1.0/3.0);
                double t75328 = t75327*2.0;
                double t75329 = t75328-2.0;
                double t75330 = two_13*2.0;
                double t75331 = t75330-2.0;
                double t75332 = 1.0/t75331;
                double t75333 = 1.0/c0f;
                double t75334 = b1f*t75289;
                double t75335 = b3f*t75290;
                double t75336 = b4f*t75291*t75292;
                double t75337 = b2f*c*t75287;
                double t75338 = t75334+t75335+t75336+t75337;
                double t75339 = 1.0/t75338;
                double t75340 = t75333*t75339*(1.0/2.0);
                double t75341 = t75340+1.0;
                double t75342 = log(t75341);
                double t75343 = a1f*c*t75287;
                double t75344 = t75343+1.0;
                double t75345 = c0f*t75342*t75344*2.0;
                double t75346 = c0p*t75302*t75304*2.0;
                double t75347 = tau_a[index]-1.0/1.0E20;
                double t75348 = ( (t75347 > 0.0) ?  1.0 : 0.0 ) ;
                double t75349 = 1.0/tau_a[index];
                double t75350 = tau_a[index]*2.0;
                double t75351 = 1.0/rho_a[index];
                double t75396 = gamma_aa[index]*t75351*(1.0/4.0);
                double t75352 = t75350-t75396;
                double t75353 = t75352*t75349*(1.0/2.0);
                double t75354 = t75353-1.0;
                double t75355 = t75354*t75348;
                double t75356 = t75355+1.0;
                double t75357 = 1.0/t75313;
                double t75358 = 1.0/t75323;
                double t75359 = 1.0/t75326;
                double t75360 = 1.0/t75317;
                double t75361 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t75362 = 1.0/(t75313*t75313);
                double t75363 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t75364 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t75365 = 1.0/(t75317*t75317);
                double t75366 = 1.0/(t75326*t75326);
                double t75367 = gcaa*t75305*3.0;
                double t75368 = gamma_aa[index]*t75310*t75307*6.0;
                double t75369 = gcaa*t75311*t75306*t75307*3.0;
                double t75370 = t75367+t75368+t75369;
                double t75371 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t75372 = 1.0/(t75323*t75323);
                double t75373 = gcaa*t75305*4.0;
                double t75374 = gamma_aa[index]*t75310*t75307*1.2E1;
                double t75375 = gcaa*t75311*t75306*t75307*1.2E1;
                double t75376 = gamma_aa[index]*t75306*t75308*t75309*4.0;
                double t75377 = t75373+t75374+t75375+t75376;
                double t75378 = gcaa*t75305*2.0;
                double t75379 = gamma_aa[index]*t75310*t75307*2.0;
                double t75380 = t75378+t75379;
                double t75381 = gamma_aa[index]*gcaa*t75364*(1.6E1/3.0);
                double t75382 = t75306*t75307*t75361*(1.6E1/3.0);
                double t75383 = t75381+t75382;
                double t75384 = gamma_aa[index]*gcaa*t75364*8.0;
                double t75385 = gamma_aa[index]*gcaa*t75306*t75307*t75363*8.0;
                double t75386 = t75306*t75307*t75361*1.6E1;
                double t75387 = t75384+t75385+t75386;
                double t75388 = gamma_aa[index]*gcaa*t75364*(3.2E1/3.0);
                double t75389 = gamma_aa[index]*gcaa*t75306*t75307*t75363*3.2E1;
                double t75390 = t75306*t75307*t75361*3.2E1;
                double t75391 = t75308*t75371*t75318*(3.2E1/3.0);
                double t75392 = t75390+t75391+t75388+t75389;
                double t75393 = t75345-t75346;
                double t75394 = t75332*t75329*t75393;
                double t75395 = t75346+t75394;
                double t75397 = 1.0/pow(rho_a[index],4.0/3.0);
                double t75398 = 1.0/pow(rho_a[index],5.0/3.0);
                double t75399 = 1.0/sqrt(t75288);
                double t75400 = 1.0/t75301;
                double t75401 = 1.0/(t75298*t75298);
                double t75402 = b4p*t75291*t75398*(2.0/3.0);
                double t75403 = b2p*c*t75397*(1.0/3.0);
                double t75404 = b1p*c*t75397*t75399*(1.0/6.0);
                double t75405 = b3p*c*t75289*t75397*(1.0/2.0);
                double t75406 = t75402+t75403+t75404+t75405;
                double t75407 = t75400*t75401*t75304*t75406;
                double t75408 = ccaa1*gcaa*t75305*t75357;
                double t75409 = ccaa4*gamma_aa[index]*t75306*t75308*t75309*t75358*4.0;
                double t75410 = ccaa2*gamma_aa[index]*t75310*t75307*t75359*2.0;
                double t75411 = ccaa3*gcaa*t75311*t75306*t75360*t75307*3.0;
                double t75422 = ccaa1*gamma_aa[index]*t75310*t75307*t75362;
                double t75423 = ccaa3*gamma_aa[index]*gcaa*t75311*t75306*t75307*t75370*t75365;
                double t75424 = ccaa4*t75308*t75309*t75318*t75372*t75377;
                double t75425 = ccaa2*t75310*t75306*t75307*t75380*t75366;
                double t75412 = t75410+t75411-t75422-t75423-t75424-t75425+t75408+t75409;
                double t75413 = 1.0/t75341;
                double t75414 = 1.0/(t75338*t75338);
                double t75415 = b4f*t75291*t75398*(2.0/3.0);
                double t75416 = b2f*c*t75397*(1.0/3.0);
                double t75417 = b1f*c*t75397*t75399*(1.0/6.0);
                double t75418 = b3f*c*t75289*t75397*(1.0/2.0);
                double t75419 = t75415+t75416+t75417+t75418;
                double t75420 = a1f*c*c0f*t75342*t75397*(2.0/3.0);
                double t75421 = a1p*c*c0p*t75302*t75397*(2.0/3.0);
                double t75426 = 1.0/(k*k);
                double t75427 = 1.0/kp;
                double t75428 = rho_a[index]*2.0;
                double t75429 = 1.0/(rho_a[index]*rho_a[index]);
                double t75430 = 1.0/pow(t75428,2.0/3.0);
                double t75431 = pow(rho_a[index],5.0/3.0);
                double t75432 = C_k*t75431*t75349;
                double t75433 = t75432-1.0;
                double t75434 = t75433*t75433;
                double t75435 = t75434*t75434;
                double t75436 = t75435*t75435;
                double t75437 = t75432+1.0;
                double t75438 = gamma_aa[index]*mu_*t75430*t75426*t75427*t75429*(1.0/4.0);
                double t75439 = t75438+1.0;
                double t75440 = 1.0/(t75439*t75439);
                double t75441 = X-1.0;
                double t75442 = 1.0/t75437;
                double t75443 = pow(rho_a[index],2.0/3.0);
                double t75444 = 1.0/(t75437*t75437);
                double t75445 = 1.0/pow(t75437,1.0E1);
                double t75446 = 1.0/pow(t75437,1.1E1);
                double t75447 = 1.0/(t75437*t75437*t75437);
                double t75448 = 1.0/(t75437*t75437*t75437*t75437);
                double t75449 = 1.0/(t75437*t75437*t75437*t75437*t75437);
                double t75450 = 1.0/(t75437*t75437*t75437*t75437*t75437*t75437);
                double t75451 = 1.0/(t75437*t75437*t75437*t75437*t75437*t75437*t75437);
                double t75452 = 1.0/(t75437*t75437*t75437*t75437*t75437*t75437*t75437*t75437);
                double t75453 = 1.0/(t75437*t75437*t75437*t75437*t75437*t75437*t75437*t75437*t75437);
                double t75454 = a_1*t75433*t75442;
                double t75455 = a_10*t75434*t75436*t75445;
                double t75456 = a_11*t75433*t75434*t75436*t75446;
                double t75457 = a_2*t75434*t75444;
                double t75458 = a_3*t75433*t75434*t75447;
                double t75459 = a_4*t75435*t75448;
                double t75460 = a_5*t75433*t75435*t75449;
                double t75461 = a_6*t75450*t75434*t75435;
                double t75462 = a_7*t75433*t75451*t75434*t75435;
                double t75463 = a_8*t75452*t75436;
                double t75464 = a_9*t75433*t75453*t75436;
                double t75465 = t75460+t75461+t75462+t75454+t75463+t75455+t75464+t75456+t75457+t75458+t75459+1.0;
                double t75466 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t75467 = 1.0/pow(t75428,5.0/3.0);
                v_rho_a_gamma_aa_[index] = -t75412*t75356*(t75346+t75332*t75329*(t75345-c0p*t75302*t75304*2.0))-t75348* \
                   t75349*(t75421-t75407+t75332*t75329*(t75420-t75421+t75407-t75413*t75414*t75344*t75419))*(ccaa0+ccaa1* \
                   gamma_aa[index]*gcaa*t75305*t75357+ccaa2*t75310*t75306*t75307*t75359+ccaa4*t75308*t75309*t75318*t75358+ \
                   ccaa3*gamma_aa[index]*gcaa*t75311*t75306*t75360*t75307)*(1.0/8.0)-rho_a[index]*t75356*t75395*(ccaa1* \
                   gcaa*t75364*t75357*(-8.0/3.0)+ccaa1*gamma_aa[index]*t75307*t75361*t75362*8.0-ccaa2*gamma_aa[index]* \
                   t75307*t75361*t75359*(3.2E1/3.0)+ccaa2*t75306*t75307*t75361*t75380*t75366*(1.6E1/3.0)+ccaa4*t75308* \
                   t75371*t75318*t75372*t75377*(3.2E1/3.0)+ccaa4*t75308*t75309*t75318*t75372*(gcaa*t75364*(3.2E1/3.0) \
                   +gamma_aa[index]*t75307*t75361*6.4E1+gamma_aa[index]*t75306*t75308*t75371*(1.28E2/3.0)+gcaa*t75306* \
                   t75307*t75363*9.6E1)-ccaa1*gcaa*1.0/(t75313*t75313*t75313)*t75306*t75307*t75363*(1.6E1/3.0)+ccaa2* \
                   t75310*t75306*t75307*t75366*(gcaa*t75364*(1.6E1/3.0)+gamma_aa[index]*t75307*t75361*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t75310*t75307*t75383*t75366*2.0-ccaa4*gamma_aa[index]*t75306*t75308*t75371*t75358* \
                   (1.28E2/3.0)-ccaa3*gcaa*t75306*t75360*t75307*t75363*2.4E1+ccaa4*gamma_aa[index]*t75306*t75308*t75309* \
                   t75372*t75392*4.0+ccaa3*gcaa*t75311*t75306*t75307*t75365*t75387*3.0-ccaa2*t75310*t75306*t75307*1.0/ \
                   (t75326*t75326*t75326)*t75380*t75383*2.0-ccaa4*1.0/(t75323*t75323*t75323)*t75308*t75309*t75318*t75392* \
                   t75377*2.0+ccaa3*gamma_aa[index]*gcaa*t75311*t75306*t75307*t75365*(gcaa*t75364*8.0+gamma_aa[index]* \
                   t75307*t75361*3.2E1+gcaa*t75306*t75307*t75363*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t75306*t75307*t75370* \
                   t75363*t75365*8.0-ccaa3*gamma_aa[index]*gcaa*t75311*t75306*t75307*t75370*1.0/(t75317*t75317*t75317) \
                   *t75387*2.0)+rho_a[index]*t75412*t75356*(t75421-t75407+t75332*t75329*(t75420+t75407-t75413*t75414* \
                   t75344*t75419-a1p*c*c0p*t75302*t75397*(2.0/3.0)))-t75348*t75349*t75395*(ccaa1*gamma_aa[index]*gcaa* \
                   t75364*t75357*(8.0/3.0)-ccaa1*t75306*t75307*t75361*t75362*(8.0/3.0)+ccaa2*t75306*t75307*t75361*t75359* \
                   (1.6E1/3.0)+ccaa4*t75308*t75371*t75318*t75358*(3.2E1/3.0)-ccaa2*t75310*t75306*t75307*t75383*t75366- \
                   ccaa4*t75308*t75309*t75318*t75372*t75392+ccaa3*gamma_aa[index]*gcaa*t75306*t75360*t75307*t75363*8.0- \
                   ccaa3*gamma_aa[index]*gcaa*t75311*t75306*t75307*t75365*t75387)*(1.0/8.0)-gamma_aa[index]*t75412*t75351* \
                   t75348*t75349*t75395*(1.0/8.0)+kp*rho_a[index]*t75440*t75441*t75465*(mu_*t75430*t75426*t75427*t75466* \
                   (1.0/2.0)+mu_*t75426*t75427*t75429*t75467*(1.0/3.0))-mu_*t75430*t75440*t75441*t75426*t75429*t75465* \
                   (1.0/4.0)-mu_*t75430*t75440*t75351*t75441*t75426*(C_k*a_1*t75442*t75443*t75349*(5.0/3.0)-C_k*a_1*t75433* \
                   t75443*t75444*t75349*(5.0/3.0)+C_k*a_2*t75433*t75443*t75444*t75349*(1.0E1/3.0)-C_k*a_2*t75434*t75443* \
                   t75447*t75349*(1.0E1/3.0)+C_k*a_3*t75434*t75443*t75447*t75349*5.0-C_k*a_4*t75443*t75435*t75349*t75449* \
                   (2.0E1/3.0)+C_k*a_5*t75443*t75435*t75349*t75449*(2.5E1/3.0)-C_k*a_8*t75443*t75453*t75436*t75349*(4.0E1/ \
                   3.0)+C_k*a_9*t75443*t75453*t75436*t75349*1.5E1+C_k*a_10*t75433*t75443*t75436*t75445*t75349*(5.0E1/ \
                   3.0)-C_k*a_10*t75434*t75443*t75436*t75446*t75349*(5.0E1/3.0)+C_k*a_11*t75434*t75443*t75436*t75446* \
                   t75349*(5.5E1/3.0)-C_k*a_3*t75433*t75434*t75443*t75349*t75448*5.0+C_k*a_4*t75433*t75434*t75443*t75349* \
                   t75448*(2.0E1/3.0)-C_k*a_5*t75450*t75433*t75443*t75435*t75349*(2.5E1/3.0)+C_k*a_6*t75450*t75433*t75443* \
                   t75435*t75349*1.0E1-C_k*a_6*t75451*t75434*t75443*t75435*t75349*1.0E1+C_k*a_7*t75451*t75434*t75443* \
                   t75435*t75349*(3.5E1/3.0)-C_k*a_9*t75433*t75443*t75436*t75445*t75349*1.5E1-C_k*a_11*t75433*t75434* \
                   t75443*t75436*1.0/pow(t75437,1.2E1)*t75349*(5.5E1/3.0)-C_k*a_7*t75433*t75434*t75443*t75452*t75435* \
                   t75349*(3.5E1/3.0)+C_k*a_8*t75433*t75434*t75443*t75452*t75435*t75349*(4.0E1/3.0))*(1.0/4.0)-mu_*t75430* \
                   t75351*t75441*t75426*t75465*1.0/(t75439*t75439*t75439)*(gamma_aa[index]*mu_*t75430*t75426*t75427*t75466* \
                   (1.0/2.0)+gamma_aa[index]*mu_*t75426*t75427*t75429*t75467*(1.0/3.0))*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t71799 = rho_a[index]+rho_b[index];
                double t71800 = 1.0/pow(t71799,1.0/3.0);
                double t71801 = c*t71800;
                double t71802 = sqrt(t71801);
                double t71803 = b1p*t71802;
                double t71804 = pow(t71801,3.0/2.0);
                double t71805 = b3p*t71804;
                double t71806 = c*c;
                double t71807 = 1.0/pow(t71799,2.0/3.0);
                double t71808 = b4p*t71806*t71807;
                double t71809 = b2p*c*t71800;
                double t71810 = t71803+t71805+t71808+t71809;
                double t71811 = 1.0/pow(t71799,4.0/3.0);
                double t71812 = 1.0/c0p;
                double t71813 = 1.0/t71810;
                double t71814 = t71812*t71813*(1.0/2.0);
                double t71815 = t71814+1.0;
                double t71816 = a1p*c*t71800;
                double t71817 = t71816+1.0;
                double t71818 = rho_a[index]-rho_b[index];
                double t71819 = t71818*t71818;
                double t71820 = 1.0/t71799;
                double t71821 = t71820*t71818;
                double t71822 = two_13*2.0;
                double t71823 = t71822-2.0;
                double t71824 = 1.0/t71823;
                double t71825 = 1.0/c0f;
                double t71826 = b1f*t71802;
                double t71827 = b3f*t71804;
                double t71828 = b4f*t71806*t71807;
                double t71829 = b2f*c*t71800;
                double t71830 = t71826+t71827+t71828+t71829;
                double t71831 = 1.0/t71830;
                double t71832 = t71831*t71825*(1.0/2.0);
                double t71833 = t71832+1.0;
                double t71834 = log(t71833);
                double t71835 = a1f*c*t71800;
                double t71836 = t71835+1.0;
                double t71837 = log(t71815);
                double t71847 = c0f*t71834*t71836*2.0;
                double t71848 = c0p*t71817*t71837*2.0;
                double t71838 = t71847-t71848;
                double t71839 = t71821+1.0;
                double t71840 = pow(t71839,4.0/3.0);
                double t71841 = -t71821+1.0;
                double t71842 = pow(t71841,4.0/3.0);
                double t71843 = t71840+t71842-2.0;
                double t71844 = 1.0/(t71799*t71799);
                double t71875 = t71844*t71818;
                double t71845 = t71820-t71875;
                double t71846 = 1.0/(t71799*t71799*t71799*t71799);
                double t71849 = t71819*t71819;
                double t71850 = 1.0/pow(t71799,5.0/3.0);
                double t71851 = 1.0/sqrt(t71801);
                double t71852 = 1.0/t71815;
                double t71853 = 1.0/(t71810*t71810);
                double t71854 = b4p*t71850*t71806*(2.0/3.0);
                double t71855 = b2p*c*t71811*(1.0/3.0);
                double t71856 = b1p*c*t71811*t71851*(1.0/6.0);
                double t71857 = b3p*c*t71802*t71811*(1.0/2.0);
                double t71858 = t71854+t71855+t71856+t71857;
                double t71859 = t71852*t71817*t71853*t71858;
                double t71860 = 1.0/(t71799*t71799*t71799*t71799*t71799);
                double t71861 = 1.0/d2fz0;
                double t71862 = 1.0/Aa;
                double t71863 = b1a*t71802;
                double t71864 = b3a*t71804;
                double t71865 = b4a*t71806*t71807;
                double t71866 = b2a*c*t71800;
                double t71867 = t71863+t71864+t71865+t71866;
                double t71868 = 1.0/t71867;
                double t71869 = t71862*t71868*(1.0/2.0);
                double t71870 = t71869+1.0;
                double t71871 = log(t71870);
                double t71872 = a1a*c*t71800;
                double t71873 = t71872+1.0;
                double t71874 = pow(t71839,1.0/3.0);
                double t71876 = t71845*t71874*(4.0/3.0);
                double t71877 = pow(t71841,1.0/3.0);
                double t71878 = t71876-t71845*t71877*(4.0/3.0);
                double t71879 = t71846*t71849;
                double t71880 = t71879-1.0;
                double t71881 = 1.0/pow(rho_a[index],1.0/3.0);
                double t71882 = c*t71881;
                double t71883 = sqrt(t71882);
                double t71884 = b1f*t71883;
                double t71885 = pow(t71882,3.0/2.0);
                double t71886 = b3f*t71885;
                double t71887 = 1.0/pow(rho_a[index],2.0/3.0);
                double t71888 = b4f*t71806*t71887;
                double t71889 = b2f*c*t71881;
                double t71890 = t71884+t71886+t71888+t71889;
                double t71891 = 1.0/pow(rho_a[index],4.0/3.0);
                double t71892 = b1p*t71883;
                double t71893 = b3p*t71885;
                double t71894 = b4p*t71806*t71887;
                double t71895 = b2p*c*t71881;
                double t71896 = t71892+t71893+t71894+t71895;
                double t71897 = 1.0/pow(rho_a[index],5.0/3.0);
                double t71898 = 1.0/sqrt(t71882);
                double t71899 = 1.0/t71890;
                double t71900 = t71825*t71899*(1.0/2.0);
                double t71901 = t71900+1.0;
                double t71902 = 1.0/t71896;
                double t71903 = t71812*t71902*(1.0/2.0);
                double t71904 = t71903+1.0;
                double t71905 = a1p*c*t71881;
                double t71906 = t71905+1.0;
                double t71907 = 1.0/t71904;
                double t71908 = 1.0/(t71896*t71896);
                double t71909 = b4p*t71806*t71897*(2.0/3.0);
                double t71910 = b2p*c*t71891*(1.0/3.0);
                double t71911 = b1p*c*t71891*t71898*(1.0/6.0);
                double t71912 = b3p*c*t71891*t71883*(1.0/2.0);
                double t71913 = t71910+t71911+t71912+t71909;
                double t71914 = t71913*t71906*t71907*t71908;
                double t71915 = log(t71904);
                double t71916 = pow(2.0,1.0/3.0);
                double t71917 = t71916*2.0;
                double t71918 = t71917-2.0;
                double t71919 = log(t71901);
                double t71920 = a1f*c*t71881;
                double t71921 = t71920+1.0;
                double t71922 = 1.0/pow(rho_b[index],8.0/3.0);
                double t71923 = 1.0/pow(rho_a[index],8.0/3.0);
                double t71924 = gamma_aa[index]*t71923*(1.0/2.0);
                double t71925 = gamma_bb[index]*t71922*(1.0/2.0);
                double t71926 = t71924+t71925;
                double t71927 = gcab*t71926;
                double t71928 = t71927+1.0;
                double t71929 = gcab*gcab;
                double t71930 = t71926*t71926;
                double t71931 = t71929*t71929;
                double t71932 = t71930*t71930;
                double t71933 = t71930*t71929;
                double t71934 = gcab*t71926*2.0;
                double t71935 = t71933+t71934+1.0;
                double t71936 = t71930*t71929*3.0;
                double t71937 = gcab*t71930*t71926*t71929;
                double t71938 = gcab*t71926*3.0;
                double t71939 = t71936+t71937+t71938+1.0;
                double t71940 = t71930*t71929*6.0;
                double t71941 = gcab*t71930*t71926*t71929*4.0;
                double t71942 = t71931*t71932;
                double t71943 = gcab*t71926*4.0;
                double t71944 = t71940+t71941+t71942+t71943+1.0;
                double t71945 = c0f*t71921*t71919*2.0;
                double t71947 = c0p*t71906*t71915*2.0;
                double t71946 = t71945-t71947;
                double t71948 = 1.0/pow(rho_b[index],1.0/3.0);
                double t71949 = c*t71948;
                double t71950 = sqrt(t71949);
                double t71951 = pow(t71949,3.0/2.0);
                double t71952 = 1.0/pow(rho_b[index],2.0/3.0);
                double t71953 = b1p*t71950;
                double t71954 = b3p*t71951;
                double t71955 = b4p*t71806*t71952;
                double t71956 = b2p*c*t71948;
                double t71957 = t71953+t71954+t71955+t71956;
                double t71958 = 1.0/t71957;
                double t71959 = t71812*t71958*(1.0/2.0);
                double t71960 = t71959+1.0;
                double t71961 = log(t71960);
                double t71962 = a1p*c*t71948;
                double t71963 = t71962+1.0;
                double t71964 = c0p*t71961*t71963*2.0;
                double t71965 = t71824*t71843*t71846*t71838*t71849;
                double t71966 = Aa*t71824*t71843*t71861*t71871*t71880*t71873*2.0;
                double t71967 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t71968 = 1.0/(t71939*t71939);
                double t71969 = 1.0/(t71944*t71944);
                double t71970 = gcab*t71922*2.0;
                double t71971 = t71922*t71926*t71929*6.0;
                double t71972 = gcab*t71930*t71922*t71929*6.0;
                double t71973 = t71930*t71922*t71931*t71926*2.0;
                double t71974 = t71970+t71971+t71972+t71973;
                double t71975 = 1.0/(t71935*t71935);
                double t71976 = gamma_aa[index]*gcab*t71967*(8.0/3.0);
                double t71977 = gamma_aa[index]*t71926*t71929*t71967*(8.0/3.0);
                double t71978 = t71976+t71977;
                double t71979 = gcab*t71922;
                double t71980 = t71922*t71926*t71929;
                double t71981 = t71980+t71979;
                double t71982 = gamma_aa[index]*gcab*t71967*(1.6E1/3.0);
                double t71983 = gamma_aa[index]*gcab*t71930*t71929*t71967*1.6E1;
                double t71984 = gamma_aa[index]*t71930*t71931*t71926*t71967*(1.6E1/3.0);
                double t71985 = gamma_aa[index]*t71926*t71929*t71967*1.6E1;
                double t71986 = t71982+t71983+t71984+t71985;
                double t71987 = 1.0/(t71928*t71928);
                double t71988 = 1.0/t71935;
                double t71989 = gcab*t71922*(3.0/2.0);
                double t71990 = t71922*t71926*t71929*3.0;
                double t71991 = gcab*t71930*t71922*t71929*(3.0/2.0);
                double t71992 = t71990+t71991+t71989;
                double t71993 = gamma_aa[index]*gcab*t71967*4.0;
                double t71994 = gamma_aa[index]*gcab*t71930*t71929*t71967*4.0;
                double t71995 = gamma_aa[index]*t71926*t71929*t71967*8.0;
                double t71996 = t71993+t71994+t71995;
                double t71997 = 1.0/t71939;
                double t71998 = 1.0/t71944;
                v_rho_a_gamma_bb_[index] = -(t71848+t71965+t71966+t71799*(t71859-t71824*t71843*t71846*t71849*(t71859- \
                   (1.0/(t71830*t71830)*t71836*(b2f*c*t71811*(1.0/3.0)+b4f*t71850*t71806*(2.0/3.0)+b1f*c*t71811*t71851* \
                   (1.0/6.0)+b3f*c*t71802*t71811*(1.0/2.0)))/t71833+a1f*c*c0f*t71811*t71834*(2.0/3.0)-a1p*c*c0p*t71811* \
                   t71837*(2.0/3.0))-a1p*c*c0p*t71811*t71837*(2.0/3.0)-t71824*t71860*t71843*t71838*t71849*4.0+t71824* \
                   t71846*t71838*t71849*t71878+t71824*t71843*t71818*t71819*t71846*t71838*4.0-Aa*t71824*t71843*t71861* \
                   t71871*t71873*(t71860*t71849*4.0-t71818*t71819*t71846*4.0)*2.0+Aa*t71824*t71861*t71871*t71880*t71873* \
                   t71878*2.0+(t71824*t71843*t71861*t71880*t71873*1.0/(t71867*t71867)*(b2a*c*t71811*(1.0/3.0)+b4a*t71850* \
                   t71806*(2.0/3.0)+b1a*c*t71811*t71851*(1.0/6.0)+b3a*c*t71802*t71811*(1.0/2.0)))/t71870-Aa*a1a*c*t71811* \
                   t71824*t71843*t71861*t71871*t71880*(2.0/3.0))+rho_a[index]*(-t71914+t71824*t71918*(t71914-(t71921* \
                   1.0/(t71890*t71890)*(b2f*c*t71891*(1.0/3.0)+b4f*t71806*t71897*(2.0/3.0)+b1f*c*t71891*t71898*(1.0/6.0) \
                   +b3f*c*t71891*t71883*(1.0/2.0)))/t71901+a1f*c*c0f*t71891*t71919*(2.0/3.0)-a1p*c*c0p*t71915*t71891* \
                   (2.0/3.0))+a1p*c*c0p*t71915*t71891*(2.0/3.0))-c0p*t71906*t71915*2.0-t71824*t71918*t71946)*((ccab1* \
                   gcab*t71922*(1.0/2.0))/t71928-ccab2*t71930*t71981*t71929*t71975-ccab1*t71922*t71926*t71929*t71987* \
                   (1.0/2.0)-ccab4*t71931*t71932*t71974*t71969+ccab2*t71922*t71926*t71929*t71988+ccab4*t71930*t71922* \
                   t71931*t71926*t71998*2.0+ccab3*gcab*t71930*t71922*t71929*t71997*(3.0/2.0)-ccab3*gcab*t71930*t71926* \
                   t71929*t71992*t71968)+(rho_a[index]*(t71947+t71824*t71918*t71946)+rho_b[index]*(t71964-t71824*t71918* \
                   (t71964-c0f*log((t71825*(1.0/2.0))/(b1f*t71950+b3f*t71951+b2f*c*t71948+b4f*t71806*t71952)+1.0)*(a1f* \
                   c*t71948+1.0)*2.0))-t71799*(t71848+t71965+t71966))*(ccab4*t71931*t71932*t71969*(gamma_aa[index]*t71922* \
                   t71929*t71967*8.0+gamma_aa[index]*t71930*t71922*t71931*t71967*8.0+gamma_aa[index]*gcab*t71922*t71926* \
                   t71929*t71967*1.6E1)+ccab2*t71922*t71926*t71929*t71975*t71978-ccab4*t71931*t71932*1.0/(t71944*t71944* \
                   t71944)*t71974*t71986*2.0-ccab2*t71930*1.0/(t71935*t71935*t71935)*t71981*t71929*t71978*2.0+ccab1*gamma_aa[index]* \
                   t71922*t71929*t71967*t71987*(4.0/3.0)-ccab2*gamma_aa[index]*t71922*t71929*t71967*t71988*(4.0/3.0)+ \
                   ccab2*gamma_aa[index]*t71930*t71922*t71931*t71975*t71967*(4.0/3.0)-ccab4*gamma_aa[index]*t71930*t71922* \
                   t71931*t71967*t71998*8.0+ccab2*gamma_aa[index]*t71926*t71981*t71929*t71975*t71967*(8.0/3.0)+ccab3* \
                   gcab*t71930*t71922*t71929*t71968*t71996*(3.0/2.0)+ccab4*t71930*t71922*t71931*t71926*t71986*t71969* \
                   2.0+ccab3*gcab*t71930*t71926*t71929*t71968*(gamma_aa[index]*t71922*t71929*t71967*4.0+gamma_aa[index]* \
                   gcab*t71922*t71926*t71929*t71967*4.0)-ccab1*gamma_aa[index]*gcab*t71922*t71926*1.0/(t71928*t71928* \
                   t71928)*t71929*t71967*(4.0/3.0)-ccab3*gcab*t71930*t71926*t71929*t71992*1.0/(t71939*t71939*t71939)* \
                   t71996*2.0+ccab3*gamma_aa[index]*gcab*t71930*t71929*t71992*t71967*t71968*4.0-ccab3*gamma_aa[index]* \
                   gcab*t71922*t71926*t71929*t71967*t71997*4.0+ccab4*gamma_aa[index]*t71930*t71931*t71926*t71974*t71967* \
                   t71969*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72000 = rho_a[index]+rho_b[index];
                double t72001 = 1.0/pow(t72000,1.0/3.0);
                double t72002 = c*t72001;
                double t72003 = sqrt(t72002);
                double t72004 = b1p*t72003;
                double t72005 = pow(t72002,3.0/2.0);
                double t72006 = b3p*t72005;
                double t72007 = c*c;
                double t72008 = 1.0/pow(t72000,2.0/3.0);
                double t72009 = b4p*t72007*t72008;
                double t72010 = b2p*c*t72001;
                double t72011 = t72010+t72004+t72006+t72009;
                double t72012 = 1.0/pow(t72000,4.0/3.0);
                double t72013 = 1.0/c0p;
                double t72014 = 1.0/t72011;
                double t72015 = t72013*t72014*(1.0/2.0);
                double t72016 = t72015+1.0;
                double t72017 = a1p*c*t72001;
                double t72018 = t72017+1.0;
                double t72019 = rho_a[index]-rho_b[index];
                double t72020 = t72019*t72019;
                double t72021 = 1.0/t72000;
                double t72022 = t72021*t72019;
                double t72023 = two_13*2.0;
                double t72024 = t72023-2.0;
                double t72025 = 1.0/t72024;
                double t72026 = 1.0/c0f;
                double t72027 = b1f*t72003;
                double t72028 = b3f*t72005;
                double t72029 = b4f*t72007*t72008;
                double t72030 = b2f*c*t72001;
                double t72031 = t72030+t72027+t72028+t72029;
                double t72032 = 1.0/t72031;
                double t72033 = t72032*t72026*(1.0/2.0);
                double t72034 = t72033+1.0;
                double t72035 = log(t72034);
                double t72036 = a1f*c*t72001;
                double t72037 = t72036+1.0;
                double t72038 = log(t72016);
                double t72049 = c0f*t72035*t72037*2.0;
                double t72050 = c0p*t72018*t72038*2.0;
                double t72039 = -t72050+t72049;
                double t72040 = t72022+1.0;
                double t72041 = pow(t72040,4.0/3.0);
                double t72042 = -t72022+1.0;
                double t72043 = pow(t72042,4.0/3.0);
                double t72044 = t72041+t72043-2.0;
                double t72045 = 1.0/(t72000*t72000);
                double t72046 = t72045*t72019;
                double t72047 = t72021+t72046;
                double t72048 = 1.0/(t72000*t72000*t72000*t72000);
                double t72051 = t72020*t72020;
                double t72052 = 1.0/pow(t72000,5.0/3.0);
                double t72053 = 1.0/sqrt(t72002);
                double t72054 = 1.0/t72016;
                double t72055 = 1.0/(t72011*t72011);
                double t72056 = b4p*t72007*t72052*(2.0/3.0);
                double t72057 = b2p*c*t72012*(1.0/3.0);
                double t72058 = b1p*c*t72012*t72053*(1.0/6.0);
                double t72059 = b3p*c*t72003*t72012*(1.0/2.0);
                double t72060 = t72056+t72057+t72058+t72059;
                double t72061 = 1.0/(t72000*t72000*t72000*t72000*t72000);
                double t72062 = 1.0/d2fz0;
                double t72063 = 1.0/Aa;
                double t72064 = b1a*t72003;
                double t72065 = b3a*t72005;
                double t72066 = b4a*t72007*t72008;
                double t72067 = b2a*c*t72001;
                double t72068 = t72064+t72065+t72066+t72067;
                double t72069 = 1.0/t72068;
                double t72070 = t72063*t72069*(1.0/2.0);
                double t72071 = t72070+1.0;
                double t72072 = log(t72071);
                double t72073 = a1a*c*t72001;
                double t72074 = t72073+1.0;
                double t72075 = pow(t72040,1.0/3.0);
                double t72076 = t72047*t72075*(4.0/3.0);
                double t72077 = pow(t72042,1.0/3.0);
                double t72078 = t72076-t72047*t72077*(4.0/3.0);
                double t72079 = t72051*t72048;
                double t72080 = t72079-1.0;
                double t72081 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72082 = c*t72081;
                double t72083 = sqrt(t72082);
                double t72084 = b1f*t72083;
                double t72085 = pow(t72082,3.0/2.0);
                double t72086 = b3f*t72085;
                double t72087 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72088 = b4f*t72007*t72087;
                double t72089 = b2f*c*t72081;
                double t72090 = t72084+t72086+t72088+t72089;
                double t72091 = 1.0/pow(rho_b[index],4.0/3.0);
                double t72092 = b1p*t72083;
                double t72093 = b3p*t72085;
                double t72094 = b4p*t72007*t72087;
                double t72095 = b2p*c*t72081;
                double t72096 = t72092+t72093+t72094+t72095;
                double t72097 = 1.0/pow(rho_b[index],5.0/3.0);
                double t72098 = 1.0/sqrt(t72082);
                double t72099 = 1.0/t72090;
                double t72100 = t72026*t72099*(1.0/2.0);
                double t72101 = t72100+1.0;
                double t72102 = 1.0/t72096;
                double t72103 = t72102*t72013*(1.0/2.0);
                double t72104 = t72103+1.0;
                double t72105 = a1p*c*t72081;
                double t72106 = t72105+1.0;
                double t72107 = 1.0/t72104;
                double t72108 = 1.0/(t72096*t72096);
                double t72109 = b4p*t72007*t72097*(2.0/3.0);
                double t72110 = b2p*c*t72091*(1.0/3.0);
                double t72111 = b1p*c*t72091*t72098*(1.0/6.0);
                double t72112 = b3p*c*t72091*t72083*(1.0/2.0);
                double t72113 = t72110+t72111+t72112+t72109;
                double t72114 = t72113*t72106*t72107*t72108;
                double t72115 = log(t72104);
                double t72116 = pow(2.0,1.0/3.0);
                double t72117 = t72116*2.0;
                double t72118 = t72117-2.0;
                double t72119 = log(t72101);
                double t72120 = a1f*c*t72081;
                double t72121 = t72120+1.0;
                double t72122 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72123 = gamma_aa[index]*t72122*(1.0/2.0);
                double t72124 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72125 = gamma_bb[index]*t72124*(1.0/2.0);
                double t72126 = t72123+t72125;
                double t72127 = gcab*t72126;
                double t72128 = t72127+1.0;
                double t72129 = gcab*gcab;
                double t72130 = t72126*t72126;
                double t72131 = t72129*t72129;
                double t72132 = t72130*t72130;
                double t72133 = t72130*t72129;
                double t72134 = gcab*t72126*2.0;
                double t72135 = t72133+t72134+1.0;
                double t72136 = t72130*t72129*3.0;
                double t72137 = gcab*t72130*t72126*t72129;
                double t72138 = gcab*t72126*3.0;
                double t72139 = t72136+t72137+t72138+1.0;
                double t72140 = t72130*t72129*6.0;
                double t72141 = gcab*t72130*t72126*t72129*4.0;
                double t72142 = t72131*t72132;
                double t72143 = gcab*t72126*4.0;
                double t72144 = t72140+t72141+t72142+t72143+1.0;
                double t72145 = a1p*c*c0p*t72012*t72038*(2.0/3.0);
                double t72146 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72147 = c*t72146;
                double t72148 = sqrt(t72147);
                double t72149 = pow(t72147,3.0/2.0);
                double t72150 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72151 = b1p*t72148;
                double t72152 = b3p*t72149;
                double t72153 = b4p*t72150*t72007;
                double t72154 = b2p*c*t72146;
                double t72155 = t72151+t72152+t72153+t72154;
                double t72156 = 1.0/t72155;
                double t72157 = t72013*t72156*(1.0/2.0);
                double t72158 = t72157+1.0;
                double t72159 = log(t72158);
                double t72160 = a1p*c*t72146;
                double t72161 = t72160+1.0;
                double t72162 = c0p*t72161*t72159*2.0;
                double t72163 = c0f*t72121*t72119*2.0;
                double t72165 = c0p*t72106*t72115*2.0;
                double t72164 = t72163-t72165;
                double t72166 = t72051*t72025*t72044*t72039*t72048;
                double t72167 = Aa*t72025*t72044*t72062*t72080*t72072*t72074*2.0;
                double t72168 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t72169 = 1.0/(t72139*t72139);
                double t72170 = 1.0/(t72144*t72144);
                double t72171 = gcab*t72122*2.0;
                double t72172 = t72122*t72126*t72129*6.0;
                double t72173 = gcab*t72130*t72122*t72129*6.0;
                double t72174 = t72130*t72122*t72131*t72126*2.0;
                double t72175 = t72171+t72172+t72173+t72174;
                double t72176 = 1.0/(t72135*t72135);
                double t72177 = gamma_bb[index]*gcab*t72168*(8.0/3.0);
                double t72178 = gamma_bb[index]*t72126*t72129*t72168*(8.0/3.0);
                double t72179 = t72177+t72178;
                double t72180 = gcab*t72122;
                double t72181 = t72122*t72126*t72129;
                double t72182 = t72180+t72181;
                double t72183 = gamma_bb[index]*gcab*t72168*(1.6E1/3.0);
                double t72184 = gamma_bb[index]*gcab*t72130*t72129*t72168*1.6E1;
                double t72185 = gamma_bb[index]*t72130*t72131*t72126*t72168*(1.6E1/3.0);
                double t72186 = gamma_bb[index]*t72126*t72129*t72168*1.6E1;
                double t72187 = t72183+t72184+t72185+t72186;
                double t72188 = 1.0/(t72128*t72128);
                double t72189 = 1.0/t72135;
                double t72190 = gcab*t72122*(3.0/2.0);
                double t72191 = t72122*t72126*t72129*3.0;
                double t72192 = gcab*t72130*t72122*t72129*(3.0/2.0);
                double t72193 = t72190+t72191+t72192;
                double t72194 = gamma_bb[index]*gcab*t72168*4.0;
                double t72195 = gamma_bb[index]*gcab*t72130*t72129*t72168*4.0;
                double t72196 = gamma_bb[index]*t72126*t72129*t72168*8.0;
                double t72197 = t72194+t72195+t72196;
                double t72198 = 1.0/t72139;
                double t72199 = 1.0/t72144;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t72165+t72025*t72118*t72164)+rho_a[index]*(t72162-t72025* \
                   t72118*(t72162-c0f*log((t72026*(1.0/2.0))/(b1f*t72148+b3f*t72149+b2f*c*t72146+b4f*t72150*t72007)+1.0) \
                   *(a1f*c*t72146+1.0)*2.0))-t72000*(t72050+t72166+t72167))*(ccab4*t72131*t72132*t72170*(gamma_bb[index]* \
                   t72122*t72129*t72168*8.0+gamma_bb[index]*t72130*t72122*t72131*t72168*8.0+gamma_bb[index]*gcab*t72122* \
                   t72126*t72129*t72168*1.6E1)+ccab2*t72122*t72126*t72129*t72176*t72179-ccab4*t72131*t72132*1.0/(t72144* \
                   t72144*t72144)*t72175*t72187*2.0-ccab2*t72130*1.0/(t72135*t72135*t72135)*t72182*t72129*t72179*2.0+ \
                   ccab1*gamma_bb[index]*t72122*t72129*t72168*t72188*(4.0/3.0)-ccab2*gamma_bb[index]*t72122*t72129*t72168* \
                   t72189*(4.0/3.0)+ccab2*gamma_bb[index]*t72130*t72122*t72131*t72176*t72168*(4.0/3.0)-ccab4*gamma_bb[index]* \
                   t72130*t72122*t72131*t72168*t72199*8.0+ccab2*gamma_bb[index]*t72126*t72182*t72129*t72176*t72168*(8.0/ \
                   3.0)+ccab3*gcab*t72130*t72122*t72129*t72169*t72197*(3.0/2.0)+ccab4*t72130*t72122*t72131*t72170*t72126* \
                   t72187*2.0+ccab3*gcab*t72130*t72126*t72129*t72169*(gamma_bb[index]*t72122*t72129*t72168*4.0+gamma_bb[index]* \
                   gcab*t72122*t72126*t72129*t72168*4.0)-ccab1*gamma_bb[index]*gcab*t72122*t72126*1.0/(t72128*t72128* \
                   t72128)*t72129*t72168*(4.0/3.0)-ccab3*gcab*t72130*t72126*t72129*1.0/(t72139*t72139*t72139)*t72193* \
                   t72197*2.0-ccab3*gamma_bb[index]*gcab*t72122*t72126*t72129*t72168*t72198*4.0+ccab3*gamma_bb[index]* \
                   gcab*t72130*t72129*t72193*t72168*t72169*4.0+ccab4*gamma_bb[index]*t72130*t72131*t72170*t72126*t72175* \
                   t72168*(1.6E1/3.0))-(t72050+t72166+t72167+rho_b[index]*(-t72114+t72025*t72118*(t72114-(t72121*1.0/ \
                   (t72090*t72090)*(b2f*c*t72091*(1.0/3.0)+b4f*t72007*t72097*(2.0/3.0)+b1f*c*t72091*t72098*(1.0/6.0)+ \
                   b3f*c*t72091*t72083*(1.0/2.0)))/t72101+a1f*c*c0f*t72091*t72119*(2.0/3.0)-a1p*c*c0p*t72115*t72091*(2.0/ \
                   3.0))+a1p*c*c0p*t72115*t72091*(2.0/3.0))-t72000*(t72145-t72060*t72018*t72054*t72055+t72051*t72025* \
                   t72061*t72044*t72039*4.0+t72051*t72025*t72039*t72048*t72078-t72051*t72025*t72044*t72048*(t72145-t72060* \
                   t72018*t72054*t72055+(1.0/(t72031*t72031)*t72037*(b2f*c*t72012*(1.0/3.0)+b4f*t72007*t72052*(2.0/3.0) \
                   +b1f*c*t72012*t72053*(1.0/6.0)+b3f*c*t72003*t72012*(1.0/2.0)))/t72034-a1f*c*c0f*t72012*t72035*(2.0/ \
                   3.0))+t72020*t72025*t72044*t72019*t72039*t72048*4.0+Aa*t72025*t72044*t72062*t72072*t72074*(t72051* \
                   t72061*4.0+t72020*t72019*t72048*4.0)*2.0+Aa*t72025*t72062*t72080*t72072*t72074*t72078*2.0-(t72025* \
                   t72044*t72062*t72080*t72074*1.0/(t72068*t72068)*(b2a*c*t72012*(1.0/3.0)+b4a*t72007*t72052*(2.0/3.0) \
                   +b1a*c*t72012*t72053*(1.0/6.0)+b3a*c*t72003*t72012*(1.0/2.0)))/t72071+Aa*a1a*c*t72012*t72025*t72044* \
                   t72062*t72080*t72072*(2.0/3.0))-c0p*t72106*t72115*2.0-t72025*t72118*t72164)*((ccab1*gcab*t72122*(1.0/ \
                   2.0))/t72128-ccab4*t72131*t72132*t72170*t72175-ccab2*t72130*t72182*t72129*t72176-ccab1*t72122*t72126* \
                   t72129*t72188*(1.0/2.0)+ccab2*t72122*t72126*t72129*t72189+ccab4*t72130*t72122*t72131*t72126*t72199* \
                   2.0+ccab3*gcab*t72130*t72122*t72129*t72198*(3.0/2.0)-ccab3*gcab*t72130*t72126*t72129*t72193*t72169) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72202 = 1.0/(k*k);
                double t72203 = 1.0/kp;
                double t72204 = rho_b[index]*2.0;
                double t72205 = 1.0/(rho_b[index]*rho_b[index]);
                double t72206 = 1.0/pow(t72204,2.0/3.0);
                double t72207 = pow(rho_b[index],5.0/3.0);
                double t72208 = 1.0/tau_b[index];
                double t72209 = C_k*t72207*t72208;
                double t72210 = t72209-1.0;
                double t72211 = t72210*t72210;
                double t72212 = t72211*t72211;
                double t72213 = t72212*t72212;
                double t72214 = t72209+1.0;
                double t72215 = gamma_bb[index]*mu_*t72202*t72203*t72205*t72206*(1.0/4.0);
                double t72216 = t72215+1.0;
                double t72217 = 1.0/(t72216*t72216);
                double t72218 = 1.0/t72214;
                double t72219 = a_1*t72210*t72218;
                double t72220 = 1.0/pow(t72214,1.0E1);
                double t72221 = a_10*t72211*t72220*t72213;
                double t72222 = 1.0/pow(t72214,1.1E1);
                double t72223 = a_11*t72210*t72211*t72213*t72222;
                double t72224 = 1.0/(t72214*t72214);
                double t72225 = a_2*t72211*t72224;
                double t72226 = 1.0/(t72214*t72214*t72214);
                double t72227 = a_3*t72210*t72211*t72226;
                double t72228 = 1.0/(t72214*t72214*t72214*t72214);
                double t72229 = a_4*t72212*t72228;
                double t72230 = 1.0/(t72214*t72214*t72214*t72214*t72214);
                double t72231 = a_5*t72210*t72212*t72230;
                double t72232 = 1.0/(t72214*t72214*t72214*t72214*t72214*t72214);
                double t72233 = a_6*t72211*t72212*t72232;
                double t72234 = 1.0/(t72214*t72214*t72214*t72214*t72214*t72214*t72214);
                double t72235 = a_7*t72210*t72211*t72212*t72234;
                double t72236 = 1.0/(t72214*t72214*t72214*t72214*t72214*t72214*t72214*t72214);
                double t72237 = a_8*t72213*t72236;
                double t72238 = 1.0/(t72214*t72214*t72214*t72214*t72214*t72214*t72214*t72214*t72214);
                double t72239 = a_9*t72210*t72213*t72238;
                double t72240 = t72221+t72231+t72223+t72233+t72225+t72235+t72227+t72219+t72237+t72229+t72239+1.0;
                double t72241 = pow(rho_b[index],2.0/3.0);
                double t72242 = 1.0/rho_b[index];
                double t72243 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t72244 = 1.0/pow(t72204,5.0/3.0);
                double t72245 = rho_a[index]+rho_b[index];
                double t72246 = 1.0/pow(t72245,1.0/3.0);
                double t72247 = c*t72246;
                double t72248 = sqrt(t72247);
                double t72249 = b1p*t72248;
                double t72250 = pow(t72247,3.0/2.0);
                double t72251 = b3p*t72250;
                double t72252 = c*c;
                double t72253 = 1.0/pow(t72245,2.0/3.0);
                double t72254 = b4p*t72252*t72253;
                double t72255 = b2p*c*t72246;
                double t72256 = t72251+t72254+t72255+t72249;
                double t72257 = 1.0/pow(t72245,4.0/3.0);
                double t72258 = 1.0/c0p;
                double t72259 = 1.0/t72256;
                double t72260 = t72258*t72259*(1.0/2.0);
                double t72261 = t72260+1.0;
                double t72262 = a1p*c*t72246;
                double t72263 = t72262+1.0;
                double t72264 = rho_a[index]-rho_b[index];
                double t72265 = t72264*t72264;
                double t72266 = 1.0/t72245;
                double t72267 = t72264*t72266;
                double t72268 = two_13*2.0;
                double t72269 = t72268-2.0;
                double t72270 = 1.0/t72269;
                double t72271 = 1.0/c0f;
                double t72272 = b1f*t72248;
                double t72273 = b3f*t72250;
                double t72274 = b4f*t72252*t72253;
                double t72275 = b2f*c*t72246;
                double t72276 = t72272+t72273+t72274+t72275;
                double t72277 = 1.0/t72276;
                double t72278 = t72271*t72277*(1.0/2.0);
                double t72279 = t72278+1.0;
                double t72280 = log(t72279);
                double t72281 = a1f*c*t72246;
                double t72282 = t72281+1.0;
                double t72283 = log(t72261);
                double t72294 = c0f*t72280*t72282*2.0;
                double t72295 = c0p*t72263*t72283*2.0;
                double t72284 = t72294-t72295;
                double t72285 = t72267+1.0;
                double t72286 = pow(t72285,4.0/3.0);
                double t72287 = -t72267+1.0;
                double t72288 = pow(t72287,4.0/3.0);
                double t72289 = t72286+t72288-2.0;
                double t72290 = 1.0/(t72245*t72245);
                double t72291 = t72290*t72264;
                double t72292 = t72291+t72266;
                double t72293 = 1.0/(t72245*t72245*t72245*t72245);
                double t72296 = t72265*t72265;
                double t72297 = 1.0/pow(t72245,5.0/3.0);
                double t72298 = 1.0/sqrt(t72247);
                double t72299 = 1.0/t72261;
                double t72300 = 1.0/(t72256*t72256);
                double t72301 = b4p*t72252*t72297*(2.0/3.0);
                double t72302 = b2p*c*t72257*(1.0/3.0);
                double t72303 = b1p*c*t72257*t72298*(1.0/6.0);
                double t72304 = b3p*c*t72248*t72257*(1.0/2.0);
                double t72305 = t72301+t72302+t72303+t72304;
                double t72306 = 1.0/(t72245*t72245*t72245*t72245*t72245);
                double t72307 = 1.0/d2fz0;
                double t72308 = 1.0/Aa;
                double t72309 = b1a*t72248;
                double t72310 = b3a*t72250;
                double t72311 = b4a*t72252*t72253;
                double t72312 = b2a*c*t72246;
                double t72313 = t72310+t72311+t72312+t72309;
                double t72314 = 1.0/t72313;
                double t72315 = t72314*t72308*(1.0/2.0);
                double t72316 = t72315+1.0;
                double t72317 = log(t72316);
                double t72318 = a1a*c*t72246;
                double t72319 = t72318+1.0;
                double t72320 = pow(t72285,1.0/3.0);
                double t72321 = t72320*t72292*(4.0/3.0);
                double t72322 = pow(t72287,1.0/3.0);
                double t72323 = t72321-t72322*t72292*(4.0/3.0);
                double t72324 = t72293*t72296;
                double t72325 = t72324-1.0;
                double t72326 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72327 = c*t72326;
                double t72328 = sqrt(t72327);
                double t72329 = b1f*t72328;
                double t72330 = pow(t72327,3.0/2.0);
                double t72331 = b3f*t72330;
                double t72332 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72333 = b4f*t72332*t72252;
                double t72334 = b2f*c*t72326;
                double t72335 = t72331+t72333+t72334+t72329;
                double t72336 = 1.0/pow(rho_b[index],4.0/3.0);
                double t72337 = b1p*t72328;
                double t72338 = b3p*t72330;
                double t72339 = b4p*t72332*t72252;
                double t72340 = b2p*c*t72326;
                double t72341 = t72340+t72337+t72338+t72339;
                double t72342 = 1.0/pow(rho_b[index],5.0/3.0);
                double t72343 = 1.0/sqrt(t72327);
                double t72344 = 1.0/t72335;
                double t72345 = t72271*t72344*(1.0/2.0);
                double t72346 = t72345+1.0;
                double t72347 = 1.0/t72341;
                double t72348 = t72347*t72258*(1.0/2.0);
                double t72349 = t72348+1.0;
                double t72350 = a1p*c*t72326;
                double t72351 = t72350+1.0;
                double t72352 = 1.0/t72349;
                double t72353 = 1.0/(t72341*t72341);
                double t72354 = b4p*t72252*t72342*(2.0/3.0);
                double t72355 = b2p*c*t72336*(1.0/3.0);
                double t72356 = b1p*c*t72343*t72336*(1.0/6.0);
                double t72357 = b3p*c*t72336*t72328*(1.0/2.0);
                double t72358 = t72354+t72355+t72356+t72357;
                double t72359 = t72351*t72352*t72353*t72358;
                double t72360 = log(t72349);
                double t72361 = pow(2.0,1.0/3.0);
                double t72362 = t72361*2.0;
                double t72363 = t72362-2.0;
                double t72364 = log(t72346);
                double t72365 = a1f*c*t72326;
                double t72366 = t72365+1.0;
                double t72367 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72368 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72369 = gamma_aa[index]*t72368*(1.0/2.0);
                double t72370 = gamma_bb[index]*t72367*(1.0/2.0);
                double t72371 = t72370+t72369;
                double t72372 = gcab*t72371;
                double t72373 = t72372+1.0;
                double t72374 = gcab*gcab;
                double t72375 = t72371*t72371;
                double t72376 = t72374*t72374;
                double t72377 = t72375*t72375;
                double t72378 = t72374*t72375;
                double t72379 = gcab*t72371*2.0;
                double t72380 = t72378+t72379+1.0;
                double t72381 = t72374*t72375*3.0;
                double t72382 = gcab*t72371*t72374*t72375;
                double t72383 = gcab*t72371*3.0;
                double t72384 = t72381+t72382+t72383+1.0;
                double t72385 = t72374*t72375*6.0;
                double t72386 = gcab*t72371*t72374*t72375*4.0;
                double t72387 = t72376*t72377;
                double t72388 = gcab*t72371*4.0;
                double t72389 = t72385+t72386+t72387+t72388+1.0;
                double t72390 = a1p*c*c0p*t72283*t72257*(2.0/3.0);
                double t72391 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72392 = c*t72391;
                double t72393 = sqrt(t72392);
                double t72394 = pow(t72392,3.0/2.0);
                double t72395 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72396 = b1p*t72393;
                double t72397 = b3p*t72394;
                double t72398 = b4p*t72252*t72395;
                double t72399 = b2p*c*t72391;
                double t72400 = t72396+t72397+t72398+t72399;
                double t72401 = 1.0/t72400;
                double t72402 = t72401*t72258*(1.0/2.0);
                double t72403 = t72402+1.0;
                double t72404 = log(t72403);
                double t72405 = a1p*c*t72391;
                double t72406 = t72405+1.0;
                double t72407 = c0p*t72404*t72406*2.0;
                double t72408 = c0f*t72364*t72366*2.0;
                double t72410 = c0p*t72351*t72360*2.0;
                double t72409 = -t72410+t72408;
                double t72411 = t72270*t72284*t72293*t72296*t72289;
                double t72412 = Aa*t72270*t72307*t72325*t72317*t72319*t72289*2.0;
                double t72413 = 1.0/t72373;
                double t72414 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t72415 = 1.0/(t72373*t72373);
                double t72416 = 1.0/t72380;
                double t72417 = 1.0/(t72384*t72384);
                double t72418 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t72419 = 1.0/(t72380*t72380);
                double t72420 = 1.0/t72384;
                double t72421 = 1.0/t72389;
                double t72422 = 1.0/(t72389*t72389);
                double t72423 = gcab*t72367*2.0;
                double t72424 = t72371*t72374*t72367*6.0;
                double t72425 = gcab*t72374*t72375*t72367*6.0;
                double t72426 = t72371*t72375*t72367*t72376*2.0;
                double t72427 = t72423+t72424+t72425+t72426;
                double t72428 = gamma_bb[index]*gcab*t72414*(8.0/3.0);
                double t72429 = gamma_bb[index]*t72414*t72371*t72374*(8.0/3.0);
                double t72430 = t72428+t72429;
                double t72431 = gcab*t72367;
                double t72432 = t72371*t72374*t72367;
                double t72433 = t72431+t72432;
                double t72434 = gamma_bb[index]*gcab*t72414*(1.6E1/3.0);
                double t72435 = gamma_bb[index]*gcab*t72414*t72374*t72375*1.6E1;
                double t72436 = gamma_bb[index]*t72414*t72371*t72375*t72376*(1.6E1/3.0);
                double t72437 = gamma_bb[index]*t72414*t72371*t72374*1.6E1;
                double t72438 = t72434+t72435+t72436+t72437;
                double t72439 = gcab*t72367*(3.0/2.0);
                double t72440 = t72371*t72374*t72367*3.0;
                double t72441 = gcab*t72374*t72375*t72367*(3.0/2.0);
                double t72442 = t72440+t72441+t72439;
                double t72443 = gamma_bb[index]*gcab*t72414*4.0;
                double t72444 = gamma_bb[index]*gcab*t72414*t72374*t72375*4.0;
                double t72445 = gamma_bb[index]*t72414*t72371*t72374*8.0;
                double t72446 = t72443+t72444+t72445;
                double t72447 = t72270*t72363*t72409;
                double t72448 = t72410+t72447;
                double t72449 = gamma_bb[index]*gamma_bb[index];
                double t72450 = gcaa*gcaa;
                double t72451 = t72450*t72450;
                double t72452 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t72453 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t72454 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t72455 = gamma_bb[index]*gcaa*t72367;
                double t72456 = t72455+1.0;
                double t72457 = gamma_bb[index]*gcaa*t72367*3.0;
                double t72458 = gamma_bb[index]*gcaa*t72450*t72454*t72449;
                double t72459 = t72450*t72453*t72449*3.0;
                double t72460 = t72457+t72458+t72459+1.0;
                double t72461 = t72449*t72449;
                double t72462 = gamma_bb[index]*gcaa*t72367*4.0;
                double t72463 = gamma_bb[index]*gcaa*t72450*t72454*t72449*4.0;
                double t72464 = t72450*t72453*t72449*6.0;
                double t72465 = t72451*t72452*t72461;
                double t72466 = t72462+t72463+t72464+t72465+1.0;
                double t72467 = gamma_bb[index]*gcaa*t72367*2.0;
                double t72468 = t72450*t72453*t72449;
                double t72469 = t72467+t72468+1.0;
                double t72470 = tau_b[index]-1.0/1.0E20;
                double t72471 = ( (t72470 > 0.0) ?  1.0 : 0.0 ) ;
                double t72472 = tau_b[index]*2.0;
                double t72512 = gamma_bb[index]*t72242*(1.0/4.0);
                double t72473 = -t72512+t72472;
                double t72474 = t72208*t72473*(1.0/2.0);
                double t72475 = t72474-1.0;
                double t72476 = t72471*t72475;
                double t72477 = t72476+1.0;
                double t72478 = 1.0/t72456;
                double t72479 = 1.0/t72466;
                double t72480 = 1.0/t72469;
                double t72481 = 1.0/t72460;
                double t72482 = 1.0/(t72456*t72456);
                double t72483 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t72484 = 1.0/(t72460*t72460);
                double t72485 = 1.0/(t72469*t72469);
                double t72486 = gcaa*t72367*3.0;
                double t72487 = gamma_bb[index]*t72450*t72453*6.0;
                double t72488 = gcaa*t72450*t72454*t72449*3.0;
                double t72489 = t72486+t72487+t72488;
                double t72490 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t72491 = 1.0/(t72466*t72466);
                double t72492 = gcaa*t72367*4.0;
                double t72493 = gamma_bb[index]*t72450*t72453*1.2E1;
                double t72494 = gcaa*t72450*t72454*t72449*1.2E1;
                double t72495 = gamma_bb[index]*t72451*t72452*t72449*4.0;
                double t72496 = t72492+t72493+t72494+t72495;
                double t72497 = gcaa*t72367*2.0;
                double t72498 = gamma_bb[index]*t72450*t72453*2.0;
                double t72499 = t72497+t72498;
                double t72500 = gamma_bb[index]*gcaa*t72414*(1.6E1/3.0);
                double t72501 = t72450*t72418*t72449*(1.6E1/3.0);
                double t72502 = t72500+t72501;
                double t72503 = gamma_bb[index]*gcaa*t72414*8.0;
                double t72504 = gamma_bb[index]*gcaa*t72450*t72483*t72449*8.0;
                double t72505 = t72450*t72418*t72449*1.6E1;
                double t72506 = t72503+t72504+t72505;
                double t72507 = gamma_bb[index]*gcaa*t72414*(3.2E1/3.0);
                double t72508 = gamma_bb[index]*gcaa*t72450*t72483*t72449*3.2E1;
                double t72509 = t72450*t72418*t72449*3.2E1;
                double t72510 = t72451*t72461*t72490*(3.2E1/3.0);
                double t72511 = t72510+t72507+t72508+t72509;
                double t72513 = 1.0/t72346;
                double t72514 = 1.0/(t72335*t72335);
                double t72515 = b4f*t72252*t72342*(2.0/3.0);
                double t72516 = b2f*c*t72336*(1.0/3.0);
                double t72517 = b1f*c*t72343*t72336*(1.0/6.0);
                double t72518 = b3f*c*t72336*t72328*(1.0/2.0);
                double t72519 = t72515+t72516+t72517+t72518;
                double t72520 = a1f*c*c0f*t72336*t72364*(2.0/3.0);
                double t72521 = a1p*c*c0p*t72360*t72336*(2.0/3.0);
                double t72522 = ccaa1*gcaa*t72367*t72478;
                double t72523 = ccaa4*gamma_bb[index]*t72451*t72452*t72449*t72479*4.0;
                double t72524 = ccaa2*gamma_bb[index]*t72450*t72453*t72480*2.0;
                double t72525 = ccaa3*gcaa*t72450*t72454*t72481*t72449*3.0;
                double t72530 = ccaa1*gamma_bb[index]*t72450*t72453*t72482;
                double t72531 = ccaa3*gamma_bb[index]*gcaa*t72450*t72454*t72484*t72449*t72489;
                double t72532 = ccaa4*t72451*t72452*t72461*t72491*t72496;
                double t72533 = ccaa2*t72450*t72453*t72449*t72485*t72499;
                double t72526 = -t72530+t72522-t72531+t72523-t72532+t72524-t72533+t72525;
                double t72527 = t72520-t72521+t72359-t72513*t72514*t72366*t72519;
                double t72528 = t72270*t72363*t72527;
                double t72529 = t72521+t72528-t72359;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t72448+rho_a[index]*(t72407-t72270*t72363*(t72407-c0f*log((t72271* \
                   (1.0/2.0))/(b1f*t72393+b3f*t72394+b2f*c*t72391+b4f*t72252*t72395)+1.0)*(a1f*c*t72391+1.0)*2.0))-t72245* \
                   (t72411+t72412+t72295))*(ccab1*gcab*t72413*t72414*(4.0/3.0)-ccab2*t72374*t72419*t72375*(gcab*t72414* \
                   (8.0/3.0)+gamma_bb[index]*t72418*t72374*(4.0/3.0)+t72414*t72371*t72374*(8.0/3.0))-ccab4*t72422*t72376* \
                   t72377*(gcab*t72414*(1.6E1/3.0)+gamma_bb[index]*t72418*t72374*8.0+t72414*t72371*t72374*1.6E1+gamma_bb[index]* \
                   t72418*t72375*t72376*8.0+gcab*t72414*t72374*t72375*1.6E1+t72414*t72371*t72375*t72376*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t72371*t72418*t72374*1.6E1)-ccab1*gamma_bb[index]*t72415*t72418*t72374*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t72416*t72418*t72374*(4.0/3.0)-ccab1*t72414*t72415*t72371*t72374*(4.0/3.0)+ccab2*t72414*t72371*t72416* \
                   t72374*(8.0/3.0)+ccab4*t72421*t72414*t72371*t72375*t72376*(1.6E1/3.0)-ccab2*t72430*t72371*t72374*t72419* \
                   t72367+ccab2*t72430*t72433*1.0/(t72380*t72380*t72380)*t72374*t72375*2.0+ccab4*t72427*t72438*t72376* \
                   t72377*1.0/(t72389*t72389*t72389)*2.0+ccab4*gamma_bb[index]*t72421*t72418*t72375*t72376*8.0+ccab3* \
                   gcab*t72420*t72414*t72374*t72375*4.0+ccab3*gamma_bb[index]*gcab*t72420*t72371*t72418*t72374*4.0-ccab2* \
                   gamma_bb[index]*t72414*t72433*t72371*t72374*t72419*(8.0/3.0)-ccab3*gcab*t72417*t72374*t72446*t72375* \
                   t72367*(3.0/2.0)-ccab4*t72422*t72371*t72375*t72438*t72367*t72376*2.0-ccab3*gcab*t72371*t72417*t72374* \
                   t72375*(gcab*t72414*4.0+gamma_bb[index]*t72418*t72374*4.0+t72414*t72371*t72374*8.0+gcab*t72414*t72374* \
                   t72375*4.0+gamma_bb[index]*gcab*t72371*t72418*t72374*4.0)+ccab1*gamma_bb[index]*gcab*t72371*1.0/(t72373* \
                   t72373*t72373)*t72418*t72374*(4.0/3.0)+ccab3*gcab*t72442*t72371*t72374*t72446*t72375*1.0/(t72384*t72384* \
                   t72384)*2.0-ccab3*gamma_bb[index]*gcab*t72414*t72442*t72417*t72374*t72375*4.0-ccab4*gamma_bb[index]* \
                   t72422*t72414*t72371*t72427*t72375*t72376*(1.6E1/3.0))-(t72411+t72412+t72295+rho_b[index]*(t72521- \
                   t72359+t72270*t72363*(t72520+t72359-t72513*t72514*t72366*t72519-a1p*c*c0p*t72360*t72336*(2.0/3.0)) \
                   )-t72245*(t72390-t72300*t72305*t72263*t72299+t72323*t72270*t72284*t72293*t72296+t72270*t72306*t72284* \
                   t72296*t72289*4.0-t72270*t72293*t72296*t72289*(t72390-t72300*t72305*t72263*t72299+(t72282*1.0/(t72276* \
                   t72276)*(b2f*c*t72257*(1.0/3.0)+b4f*t72252*t72297*(2.0/3.0)+b1f*c*t72257*t72298*(1.0/6.0)+b3f*c*t72248* \
                   t72257*(1.0/2.0)))/t72279-a1f*c*c0f*t72280*t72257*(2.0/3.0))+t72270*t72264*t72265*t72284*t72293*t72289* \
                   4.0+Aa*t72270*t72307*t72317*t72319*t72289*(t72306*t72296*4.0+t72264*t72265*t72293*4.0)*2.0+Aa*t72323* \
                   t72270*t72307*t72325*t72317*t72319*2.0-(1.0/(t72313*t72313)*t72270*t72307*t72325*t72319*t72289*(b2a* \
                   c*t72257*(1.0/3.0)+b4a*t72252*t72297*(2.0/3.0)+b1a*c*t72257*t72298*(1.0/6.0)+b3a*c*t72248*t72257*(1.0/ \
                   2.0)))/t72316+Aa*a1a*c*t72270*t72307*t72325*t72317*t72257*t72289*(2.0/3.0))-c0p*t72351*t72360*2.0- \
                   t72270*t72363*t72409)*(ccab1*gcab*t72413*t72367*(1.0/2.0)-ccab1*t72415*t72371*t72374*t72367*(1.0/2.0) \
                   +ccab2*t72371*t72416*t72374*t72367-ccab2*t72433*t72374*t72419*t72375-ccab4*t72422*t72427*t72376*t72377+ \
                   ccab4*t72421*t72371*t72375*t72367*t72376*2.0+ccab3*gcab*t72420*t72374*t72375*t72367*(3.0/2.0)-ccab3* \
                   gcab*t72442*t72371*t72417*t72374*t72375)-(X-1.0)*(-kp*rho_b[index]*t72240*t72217*(mu_*t72202*t72203* \
                   t72205*t72244*(1.0/3.0)+mu_*t72202*t72203*t72206*t72243*(1.0/2.0))+mu_*t72202*t72240*t72205*t72206* \
                   t72217*(1.0/4.0)+mu_*t72202*t72206*t72242*t72217*(C_k*a_1*t72241*t72208*t72218*(5.0/3.0)-C_k*a_1*t72210* \
                   t72241*t72224*t72208*(5.0/3.0)+C_k*a_2*t72210*t72241*t72224*t72208*(1.0E1/3.0)-C_k*a_2*t72211*t72241* \
                   t72208*t72226*(1.0E1/3.0)+C_k*a_3*t72211*t72241*t72208*t72226*5.0-C_k*a_4*t72212*t72230*t72241*t72208* \
                   (2.0E1/3.0)+C_k*a_5*t72212*t72230*t72241*t72208*(2.5E1/3.0)-C_k*a_8*t72213*t72241*t72208*t72238*(4.0E1/ \
                   3.0)+C_k*a_9*t72213*t72241*t72208*t72238*1.5E1+C_k*a_10*t72210*t72220*t72213*t72241*t72208*(5.0E1/ \
                   3.0)-C_k*a_10*t72211*t72213*t72222*t72241*t72208*(5.0E1/3.0)+C_k*a_11*t72211*t72213*t72222*t72241* \
                   t72208*(5.5E1/3.0)-C_k*a_3*t72210*t72211*t72241*t72208*t72228*5.0+C_k*a_4*t72210*t72211*t72241*t72208* \
                   t72228*(2.0E1/3.0)-C_k*a_5*t72210*t72212*t72232*t72241*t72208*(2.5E1/3.0)+C_k*a_6*t72210*t72212*t72232* \
                   t72241*t72208*1.0E1-C_k*a_6*t72211*t72212*t72241*t72234*t72208*1.0E1+C_k*a_7*t72211*t72212*t72241* \
                   t72234*t72208*(3.5E1/3.0)-C_k*a_9*t72210*t72220*t72213*t72241*t72208*1.5E1-C_k*a_11*t72210*t72211* \
                   t72213*1.0/pow(t72214,1.2E1)*t72241*t72208*(5.5E1/3.0)-C_k*a_7*t72210*t72211*t72212*t72241*t72208* \
                   t72236*(3.5E1/3.0)+C_k*a_8*t72210*t72211*t72212*t72241*t72208*t72236*(4.0E1/3.0))*(1.0/4.0)+mu_*t72202* \
                   t72240*t72206*t72242*1.0/(t72216*t72216*t72216)*(gamma_bb[index]*mu_*t72202*t72203*t72205*t72244*(1.0/ \
                   3.0)+gamma_bb[index]*mu_*t72202*t72203*t72206*t72243*(1.0/2.0))*(1.0/2.0))-t72526*t72448*t72477+rho_b[index]* \
                   t72526*t72529*t72477-rho_b[index]*t72448*t72477*(ccaa1*gcaa*t72414*t72478*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t72450*t72480*t72418*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t72450*t72418*t72482*8.0+ccaa4*t72451*t72461* \
                   t72490*t72491*t72496*(3.2E1/3.0)+ccaa2*t72450*t72418*t72449*t72485*t72499*(1.6E1/3.0)+ccaa4*t72451* \
                   t72452*t72461*t72491*(gcaa*t72414*(3.2E1/3.0)+gamma_bb[index]*t72450*t72418*6.4E1+gamma_bb[index]* \
                   t72451*t72490*t72449*(1.28E2/3.0)+gcaa*t72450*t72483*t72449*9.6E1)-ccaa1*gcaa*t72450*1.0/(t72456*t72456* \
                   t72456)*t72483*t72449*(1.6E1/3.0)+ccaa2*t72450*t72453*t72449*t72485*(gcaa*t72414*(1.6E1/3.0)+gamma_bb[index]* \
                   t72450*t72418*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t72502*t72450*t72453*t72485*2.0-ccaa4*gamma_bb[index]* \
                   t72451*t72490*t72449*t72479*(1.28E2/3.0)-ccaa3*gcaa*t72450*t72481*t72483*t72449*2.4E1+ccaa4*gamma_bb[index]* \
                   t72511*t72451*t72452*t72491*t72449*4.0+ccaa3*gcaa*t72450*t72506*t72454*t72484*t72449*3.0-ccaa4*t72511* \
                   t72451*t72452*t72461*1.0/(t72466*t72466*t72466)*t72496*2.0-ccaa2*t72502*t72450*t72453*t72449*1.0/(t72469* \
                   t72469*t72469)*t72499*2.0+ccaa3*gamma_bb[index]*gcaa*t72450*t72454*t72484*t72449*(gcaa*t72414*8.0+ \
                   gamma_bb[index]*t72450*t72418*3.2E1+gcaa*t72450*t72483*t72449*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t72450* \
                   t72483*t72484*t72449*t72489*8.0-ccaa3*gamma_bb[index]*gcaa*t72450*1.0/(t72460*t72460*t72460)*t72506* \
                   t72454*t72449*t72489*2.0)-t72208*t72471*t72529*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t72367*t72478+ccaa2* \
                   t72450*t72453*t72480*t72449+ccaa4*t72451*t72452*t72461*t72479+ccaa3*gamma_bb[index]*gcaa*t72450*t72454* \
                   t72481*t72449)*(1.0/8.0)-t72208*t72471*t72448*(ccaa1*gamma_bb[index]*gcaa*t72414*t72478*(8.0/3.0)+ \
                   ccaa2*t72450*t72480*t72418*t72449*(1.6E1/3.0)-ccaa1*t72450*t72418*t72482*t72449*(8.0/3.0)+ccaa4*t72451* \
                   t72461*t72490*t72479*(3.2E1/3.0)-ccaa4*t72511*t72451*t72452*t72461*t72491-ccaa2*t72502*t72450*t72453* \
                   t72449*t72485+ccaa3*gamma_bb[index]*gcaa*t72450*t72481*t72483*t72449*8.0-ccaa3*gamma_bb[index]*gcaa* \
                   t72450*t72506*t72454*t72484*t72449)*(1.0/8.0)-gamma_bb[index]*t72242*t72208*t72471*t72526*t72448*(1.0/ \
                   8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74165 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74166 = c*t74165;
                double t74167 = sqrt(t74166);
                double t74168 = pow(t74166,3.0/2.0);
                double t74169 = c*c;
                double t74170 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74171 = 1.0/c0p;
                double t74172 = b1p*t74167;
                double t74173 = b3p*t74168;
                double t74174 = b4p*t74170*t74169;
                double t74175 = b2p*c*t74165;
                double t74176 = t74172+t74173+t74174+t74175;
                double t74177 = 1.0/t74176;
                double t74178 = t74171*t74177*(1.0/2.0);
                double t74179 = t74178+1.0;
                double t74180 = log(t74179);
                double t74181 = a1p*c*t74165;
                double t74182 = t74181+1.0;
                double t74183 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74184 = gamma_bb[index]*gamma_bb[index];
                double t74185 = gcaa*gcaa;
                double t74186 = t74185*t74185;
                double t74187 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74188 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74189 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74190 = gamma_bb[index]*gcaa*t74183;
                double t74191 = t74190+1.0;
                double t74192 = gamma_bb[index]*gcaa*t74183*3.0;
                double t74193 = gamma_bb[index]*gcaa*t74184*t74185*t74189;
                double t74194 = t74184*t74185*t74188*3.0;
                double t74195 = t74192+t74193+t74194+1.0;
                double t74196 = t74184*t74184;
                double t74197 = gamma_bb[index]*gcaa*t74183*4.0;
                double t74198 = gamma_bb[index]*gcaa*t74184*t74185*t74189*4.0;
                double t74199 = t74184*t74185*t74188*6.0;
                double t74200 = t74186*t74187*t74196;
                double t74201 = t74200+t74197+t74198+t74199+1.0;
                double t74202 = gamma_bb[index]*gcaa*t74183*2.0;
                double t74203 = t74184*t74185*t74188;
                double t74204 = t74202+t74203+1.0;
                double t74205 = pow(2.0,1.0/3.0);
                double t74206 = t74205*2.0;
                double t74207 = t74206-2.0;
                double t74208 = two_13*2.0;
                double t74209 = t74208-2.0;
                double t74210 = 1.0/t74209;
                double t74211 = 1.0/c0f;
                double t74212 = b1f*t74167;
                double t74213 = b3f*t74168;
                double t74214 = b4f*t74170*t74169;
                double t74215 = b2f*c*t74165;
                double t74216 = t74212+t74213+t74214+t74215;
                double t74217 = 1.0/t74216;
                double t74218 = t74211*t74217*(1.0/2.0);
                double t74219 = t74218+1.0;
                double t74220 = log(t74219);
                double t74221 = a1f*c*t74165;
                double t74222 = t74221+1.0;
                double t74223 = c0f*t74220*t74222*2.0;
                double t74224 = c0p*t74180*t74182*2.0;
                double t74225 = tau_b[index]-1.0/1.0E20;
                double t74226 = ( (t74225 > 0.0) ?  1.0 : 0.0 ) ;
                double t74227 = 1.0/tau_b[index];
                double t74228 = tau_b[index]*2.0;
                double t74229 = 1.0/rho_b[index];
                double t74274 = gamma_bb[index]*t74229*(1.0/4.0);
                double t74230 = t74228-t74274;
                double t74231 = t74230*t74227*(1.0/2.0);
                double t74232 = t74231-1.0;
                double t74233 = t74232*t74226;
                double t74234 = t74233+1.0;
                double t74235 = 1.0/t74191;
                double t74236 = 1.0/t74201;
                double t74237 = 1.0/t74204;
                double t74238 = 1.0/t74195;
                double t74239 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t74240 = 1.0/(t74191*t74191);
                double t74241 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t74242 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t74243 = 1.0/(t74195*t74195);
                double t74244 = 1.0/(t74204*t74204);
                double t74245 = gcaa*t74183*3.0;
                double t74246 = gamma_bb[index]*t74185*t74188*6.0;
                double t74247 = gcaa*t74184*t74185*t74189*3.0;
                double t74248 = t74245+t74246+t74247;
                double t74249 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t74250 = 1.0/(t74201*t74201);
                double t74251 = gcaa*t74183*4.0;
                double t74252 = gamma_bb[index]*t74185*t74188*1.2E1;
                double t74253 = gcaa*t74184*t74185*t74189*1.2E1;
                double t74254 = gamma_bb[index]*t74184*t74186*t74187*4.0;
                double t74255 = t74251+t74252+t74253+t74254;
                double t74256 = gcaa*t74183*2.0;
                double t74257 = gamma_bb[index]*t74185*t74188*2.0;
                double t74258 = t74256+t74257;
                double t74259 = gamma_bb[index]*gcaa*t74242*(1.6E1/3.0);
                double t74260 = t74184*t74185*t74239*(1.6E1/3.0);
                double t74261 = t74260+t74259;
                double t74262 = gamma_bb[index]*gcaa*t74242*8.0;
                double t74263 = gamma_bb[index]*gcaa*t74241*t74184*t74185*8.0;
                double t74264 = t74184*t74185*t74239*1.6E1;
                double t74265 = t74262+t74263+t74264;
                double t74266 = gamma_bb[index]*gcaa*t74242*(3.2E1/3.0);
                double t74267 = gamma_bb[index]*gcaa*t74241*t74184*t74185*3.2E1;
                double t74268 = t74184*t74185*t74239*3.2E1;
                double t74269 = t74186*t74249*t74196*(3.2E1/3.0);
                double t74270 = t74266+t74267+t74268+t74269;
                double t74271 = t74223-t74224;
                double t74272 = t74210*t74207*t74271;
                double t74273 = t74224+t74272;
                double t74275 = 1.0/pow(rho_b[index],4.0/3.0);
                double t74276 = 1.0/pow(rho_b[index],5.0/3.0);
                double t74277 = 1.0/sqrt(t74166);
                double t74278 = 1.0/t74179;
                double t74279 = 1.0/(t74176*t74176);
                double t74280 = b4p*t74276*t74169*(2.0/3.0);
                double t74281 = b2p*c*t74275*(1.0/3.0);
                double t74282 = b1p*c*t74275*t74277*(1.0/6.0);
                double t74283 = b3p*c*t74167*t74275*(1.0/2.0);
                double t74284 = t74280+t74281+t74282+t74283;
                double t74285 = t74182*t74284*t74278*t74279;
                double t74286 = ccaa1*gcaa*t74235*t74183;
                double t74287 = ccaa4*gamma_bb[index]*t74236*t74184*t74186*t74187*4.0;
                double t74288 = ccaa2*gamma_bb[index]*t74237*t74185*t74188*2.0;
                double t74289 = ccaa3*gcaa*t74184*t74238*t74185*t74189*3.0;
                double t74300 = ccaa1*gamma_bb[index]*t74240*t74185*t74188;
                double t74301 = ccaa3*gamma_bb[index]*gcaa*t74243*t74184*t74185*t74248*t74189;
                double t74302 = ccaa4*t74250*t74255*t74186*t74187*t74196;
                double t74303 = ccaa2*t74244*t74184*t74185*t74258*t74188;
                double t74290 = -t74300-t74301-t74302-t74303+t74286+t74287+t74288+t74289;
                double t74291 = 1.0/t74219;
                double t74292 = 1.0/(t74216*t74216);
                double t74293 = b4f*t74276*t74169*(2.0/3.0);
                double t74294 = b2f*c*t74275*(1.0/3.0);
                double t74295 = b1f*c*t74275*t74277*(1.0/6.0);
                double t74296 = b3f*c*t74167*t74275*(1.0/2.0);
                double t74297 = t74293+t74294+t74295+t74296;
                double t74298 = a1f*c*c0f*t74220*t74275*(2.0/3.0);
                double t74299 = a1p*c*c0p*t74180*t74275*(2.0/3.0);
                double t74304 = 1.0/(k*k);
                double t74305 = 1.0/kp;
                double t74306 = rho_b[index]*2.0;
                double t74307 = 1.0/(rho_b[index]*rho_b[index]);
                double t74308 = 1.0/pow(t74306,2.0/3.0);
                double t74309 = pow(rho_b[index],5.0/3.0);
                double t74310 = C_k*t74227*t74309;
                double t74311 = t74310-1.0;
                double t74312 = t74311*t74311;
                double t74313 = t74312*t74312;
                double t74314 = t74313*t74313;
                double t74315 = t74310+1.0;
                double t74316 = gamma_bb[index]*mu_*t74304*t74305*t74307*t74308*(1.0/4.0);
                double t74317 = t74316+1.0;
                double t74318 = 1.0/(t74317*t74317);
                double t74319 = X-1.0;
                double t74320 = 1.0/t74315;
                double t74321 = pow(rho_b[index],2.0/3.0);
                double t74322 = 1.0/(t74315*t74315);
                double t74323 = 1.0/pow(t74315,1.0E1);
                double t74324 = 1.0/pow(t74315,1.1E1);
                double t74325 = 1.0/(t74315*t74315*t74315);
                double t74326 = 1.0/(t74315*t74315*t74315*t74315);
                double t74327 = 1.0/(t74315*t74315*t74315*t74315*t74315);
                double t74328 = 1.0/(t74315*t74315*t74315*t74315*t74315*t74315);
                double t74329 = 1.0/(t74315*t74315*t74315*t74315*t74315*t74315*t74315);
                double t74330 = 1.0/(t74315*t74315*t74315*t74315*t74315*t74315*t74315*t74315);
                double t74331 = 1.0/(t74315*t74315*t74315*t74315*t74315*t74315*t74315*t74315*t74315);
                double t74332 = a_1*t74311*t74320;
                double t74333 = a_10*t74312*t74314*t74323;
                double t74334 = a_11*t74311*t74312*t74314*t74324;
                double t74335 = a_2*t74312*t74322;
                double t74336 = a_3*t74311*t74312*t74325;
                double t74337 = a_4*t74313*t74326;
                double t74338 = a_5*t74311*t74313*t74327;
                double t74339 = a_6*t74312*t74313*t74328;
                double t74340 = a_7*t74311*t74312*t74313*t74329;
                double t74341 = a_8*t74330*t74314;
                double t74342 = a_9*t74311*t74331*t74314;
                double t74343 = t74340+t74332+t74341+t74333+t74342+t74334+t74335+t74336+t74337+t74338+t74339+1.0;
                double t74344 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t74345 = 1.0/pow(t74306,5.0/3.0);
                v_rho_b_gamma_bb_[index] = -t74234*t74290*(t74224+t74210*t74207*(t74223-c0p*t74180*t74182*2.0))-t74226* \
                   t74227*(-t74285+t74299+t74210*t74207*(t74285+t74298-t74299-t74222*t74291*t74292*t74297))*(ccaa0+ccaa1* \
                   gamma_bb[index]*gcaa*t74235*t74183+ccaa2*t74237*t74184*t74185*t74188+ccaa4*t74236*t74186*t74187*t74196+ \
                   ccaa3*gamma_bb[index]*gcaa*t74184*t74238*t74185*t74189)*(1.0/8.0)-rho_b[index]*t74234*t74273*(ccaa1* \
                   gcaa*t74242*t74235*(-8.0/3.0)+ccaa1*gamma_bb[index]*t74240*t74185*t74239*8.0-ccaa2*gamma_bb[index]* \
                   t74237*t74185*t74239*(3.2E1/3.0)+ccaa2*t74244*t74184*t74185*t74239*t74258*(1.6E1/3.0)+ccaa4*t74250* \
                   t74255*t74186*t74249*t74196*(3.2E1/3.0)+ccaa4*t74250*t74186*t74187*t74196*(gcaa*t74242*(3.2E1/3.0) \
                   +gamma_bb[index]*t74185*t74239*6.4E1+gamma_bb[index]*t74184*t74186*t74249*(1.28E2/3.0)+gcaa*t74241* \
                   t74184*t74185*9.6E1)-ccaa1*gcaa*t74241*1.0/(t74191*t74191*t74191)*t74184*t74185*(1.6E1/3.0)+ccaa2* \
                   t74244*t74184*t74185*t74188*(gcaa*t74242*(1.6E1/3.0)+gamma_bb[index]*t74185*t74239*(3.2E1/3.0))+ccaa2* \
                   gamma_bb[index]*t74261*t74244*t74185*t74188*2.0-ccaa4*gamma_bb[index]*t74236*t74184*t74186*t74249* \
                   (1.28E2/3.0)-ccaa3*gcaa*t74241*t74184*t74238*t74185*2.4E1+ccaa4*gamma_bb[index]*t74250*t74270*t74184* \
                   t74186*t74187*4.0+ccaa3*gcaa*t74243*t74184*t74265*t74185*t74189*3.0-ccaa4*1.0/(t74201*t74201*t74201) \
                   *t74270*t74255*t74186*t74187*t74196*2.0-ccaa2*1.0/(t74204*t74204*t74204)*t74261*t74184*t74185*t74258* \
                   t74188*2.0+ccaa3*gamma_bb[index]*gcaa*t74243*t74184*t74185*t74189*(gcaa*t74242*8.0+gamma_bb[index]* \
                   t74185*t74239*3.2E1+gcaa*t74241*t74184*t74185*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t74241*t74243*t74184* \
                   t74185*t74248*8.0-ccaa3*gamma_bb[index]*gcaa*t74184*t74265*t74185*t74248*1.0/(t74195*t74195*t74195) \
                   *t74189*2.0)+rho_b[index]*t74234*t74290*(-t74285+t74299+t74210*t74207*(t74285+t74298-t74222*t74291* \
                   t74292*t74297-a1p*c*c0p*t74180*t74275*(2.0/3.0)))-t74226*t74227*t74273*(ccaa1*gamma_bb[index]*gcaa* \
                   t74242*t74235*(8.0/3.0)-ccaa1*t74240*t74184*t74185*t74239*(8.0/3.0)+ccaa2*t74237*t74184*t74185*t74239* \
                   (1.6E1/3.0)+ccaa4*t74236*t74186*t74249*t74196*(3.2E1/3.0)-ccaa2*t74261*t74244*t74184*t74185*t74188- \
                   ccaa4*t74250*t74270*t74186*t74187*t74196+ccaa3*gamma_bb[index]*gcaa*t74241*t74184*t74238*t74185*8.0- \
                   ccaa3*gamma_bb[index]*gcaa*t74243*t74184*t74265*t74185*t74189)*(1.0/8.0)-gamma_bb[index]*t74226*t74227* \
                   t74290*t74273*t74229*(1.0/8.0)+kp*rho_b[index]*t74343*t74318*t74319*(mu_*t74304*t74305*t74307*t74345* \
                   (1.0/3.0)+mu_*t74304*t74305*t74308*t74344*(1.0/2.0))-mu_*t74304*t74307*t74343*t74308*t74318*t74319* \
                   (1.0/4.0)-mu_*t74304*t74308*t74318*t74229*t74319*(C_k*a_1*t74320*t74321*t74227*(5.0/3.0)-C_k*a_1*t74311* \
                   t74321*t74322*t74227*(5.0/3.0)+C_k*a_2*t74311*t74321*t74322*t74227*(1.0E1/3.0)-C_k*a_2*t74312*t74321* \
                   t74325*t74227*(1.0E1/3.0)+C_k*a_3*t74312*t74321*t74325*t74227*5.0-C_k*a_4*t74321*t74313*t74227*t74327* \
                   (2.0E1/3.0)+C_k*a_5*t74321*t74313*t74227*t74327*(2.5E1/3.0)-C_k*a_8*t74321*t74331*t74314*t74227*(4.0E1/ \
                   3.0)+C_k*a_9*t74321*t74331*t74314*t74227*1.5E1+C_k*a_10*t74311*t74321*t74314*t74323*t74227*(5.0E1/ \
                   3.0)-C_k*a_10*t74312*t74321*t74314*t74324*t74227*(5.0E1/3.0)+C_k*a_11*t74312*t74321*t74314*t74324* \
                   t74227*(5.5E1/3.0)-C_k*a_3*t74311*t74312*t74321*t74227*t74326*5.0+C_k*a_4*t74311*t74312*t74321*t74227* \
                   t74326*(2.0E1/3.0)-C_k*a_5*t74311*t74321*t74313*t74227*t74328*(2.5E1/3.0)+C_k*a_6*t74311*t74321*t74313* \
                   t74227*t74328*1.0E1-C_k*a_6*t74312*t74321*t74313*t74227*t74329*1.0E1+C_k*a_7*t74312*t74321*t74313* \
                   t74227*t74329*(3.5E1/3.0)-C_k*a_9*t74311*t74321*t74314*t74323*t74227*1.5E1-C_k*a_11*t74311*t74312* \
                   t74321*t74314*1.0/pow(t74315,1.2E1)*t74227*(5.5E1/3.0)-C_k*a_7*t74311*t74312*t74321*t74330*t74313* \
                   t74227*(3.5E1/3.0)+C_k*a_8*t74311*t74312*t74321*t74330*t74313*t74227*(4.0E1/3.0))*(1.0/4.0)-mu_*t74304* \
                   t74343*t74308*1.0/(t74317*t74317*t74317)*t74229*t74319*(gamma_bb[index]*mu_*t74304*t74305*t74307*t74345* \
                   (1.0/3.0)+gamma_bb[index]*mu_*t74304*t74305*t74308*t74344*(1.0/2.0))*(1.0/2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72535 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72536 = c*t72535;
                double t72537 = sqrt(t72536);
                double t72538 = pow(t72536,3.0/2.0);
                double t72539 = c*c;
                double t72540 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72541 = 1.0/c0p;
                double t72542 = b1p*t72537;
                double t72543 = b3p*t72538;
                double t72544 = b4p*t72540*t72539;
                double t72545 = b2p*c*t72535;
                double t72546 = t72542+t72543+t72544+t72545;
                double t72547 = 1.0/t72546;
                double t72548 = t72541*t72547*(1.0/2.0);
                double t72549 = t72548+1.0;
                double t72550 = log(t72549);
                double t72551 = a1p*c*t72535;
                double t72552 = t72551+1.0;
                double t72553 = pow(2.0,1.0/3.0);
                double t72554 = t72553*2.0;
                double t72555 = t72554-2.0;
                double t72556 = two_13*2.0;
                double t72557 = t72556-2.0;
                double t72558 = 1.0/t72557;
                double t72559 = 1.0/c0f;
                double t72560 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72561 = c*t72560;
                double t72562 = sqrt(t72561);
                double t72563 = pow(t72561,3.0/2.0);
                double t72564 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72565 = b1p*t72562;
                double t72566 = b3p*t72563;
                double t72567 = b4p*t72564*t72539;
                double t72568 = b2p*c*t72560;
                double t72569 = t72565+t72566+t72567+t72568;
                double t72570 = 1.0/t72569;
                double t72571 = t72541*t72570*(1.0/2.0);
                double t72572 = t72571+1.0;
                double t72573 = log(t72572);
                double t72574 = a1p*c*t72560;
                double t72575 = t72574+1.0;
                double t72576 = c0p*t72573*t72575*2.0;
                double t72577 = rho_a[index]+rho_b[index];
                double t72578 = 1.0/pow(t72577,1.0/3.0);
                double t72579 = c*t72578;
                double t72580 = sqrt(t72579);
                double t72581 = pow(t72579,3.0/2.0);
                double t72582 = 1.0/pow(t72577,2.0/3.0);
                double t72583 = b1p*t72580;
                double t72584 = b3p*t72581;
                double t72585 = b4p*t72582*t72539;
                double t72586 = b2p*c*t72578;
                double t72587 = t72583+t72584+t72585+t72586;
                double t72588 = 1.0/t72587;
                double t72589 = t72541*t72588*(1.0/2.0);
                double t72590 = t72589+1.0;
                double t72591 = log(t72590);
                double t72592 = a1p*c*t72578;
                double t72593 = t72592+1.0;
                double t72594 = c0p*t72591*t72593*2.0;
                double t72595 = rho_a[index]-rho_b[index];
                double t72596 = t72595*t72595;
                double t72597 = 1.0/t72577;
                double t72598 = t72595*t72597;
                double t72599 = 1.0/(t72577*t72577*t72577*t72577);
                double t72600 = t72596*t72596;
                double t72601 = t72598+1.0;
                double t72602 = pow(t72601,4.0/3.0);
                double t72603 = -t72598+1.0;
                double t72604 = pow(t72603,4.0/3.0);
                double t72605 = t72602+t72604-2.0;
                double t72606 = gcab*gcab;
                double t72607 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t72608 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72609 = gamma_aa[index]*t72608*(1.0/2.0);
                double t72610 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72611 = gamma_bb[index]*t72610*(1.0/2.0);
                double t72612 = t72611+t72609;
                double t72613 = gcab*t72612;
                double t72614 = t72613+1.0;
                double t72615 = t72612*t72612;
                double t72616 = t72606*t72615;
                double t72617 = gcab*t72612*2.0;
                double t72618 = t72616+t72617+1.0;
                double t72619 = t72606*t72606;
                double t72636 = gcab*t72608*2.0;
                double t72637 = t72612*t72606*t72608*6.0;
                double t72638 = gcab*t72606*t72615*t72608*6.0;
                double t72639 = t72612*t72615*t72608*t72619*2.0;
                double t72620 = t72636+t72637+t72638+t72639;
                double t72621 = t72615*t72615;
                double t72641 = gcab*t72608*(3.0/2.0);
                double t72642 = t72612*t72606*t72608*3.0;
                double t72643 = gcab*t72606*t72615*t72608*(3.0/2.0);
                double t72622 = t72641+t72642+t72643;
                double t72623 = t72606*t72615*3.0;
                double t72624 = gcab*t72612*t72606*t72615;
                double t72625 = gcab*t72612*3.0;
                double t72626 = t72623+t72624+t72625+1.0;
                double t72633 = gcab*t72608;
                double t72634 = t72612*t72606*t72608;
                double t72627 = t72633+t72634;
                double t72628 = t72606*t72615*6.0;
                double t72629 = gcab*t72612*t72606*t72615*4.0;
                double t72630 = t72621*t72619;
                double t72631 = gcab*t72612*4.0;
                double t72632 = t72630+t72631+t72628+t72629+1.0;
                double t72635 = 1.0/(t72618*t72618);
                double t72640 = 1.0/(t72632*t72632);
                double t72644 = 1.0/(t72626*t72626);
                double t72645 = b1f*t72537;
                double t72646 = b3f*t72538;
                double t72647 = b4f*t72540*t72539;
                double t72648 = b2f*c*t72535;
                double t72649 = t72645+t72646+t72647+t72648;
                double t72650 = 1.0/t72649;
                double t72651 = t72650*t72559*(1.0/2.0);
                double t72652 = t72651+1.0;
                double t72653 = log(t72652);
                double t72654 = a1f*c*t72535;
                double t72655 = t72654+1.0;
                double t72656 = c0f*t72653*t72655*2.0;
                double t72657 = c0p*t72550*t72552*2.0;
                double t72658 = gcaa*gcaa;
                double t72659 = gamma_aa[index]*gamma_aa[index];
                double t72660 = t72658*t72658;
                double t72661 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t72662 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t72663 = gamma_aa[index]*gcaa*t72608;
                double t72664 = t72663+1.0;
                double t72665 = gamma_aa[index]*gcaa*t72608*2.0;
                double t72666 = t72607*t72658*t72659;
                double t72667 = t72665+t72666+1.0;
                double t72668 = gamma_aa[index]*gcaa*t72608*3.0;
                double t72669 = gamma_aa[index]*gcaa*t72662*t72658*t72659;
                double t72670 = t72607*t72658*t72659*3.0;
                double t72671 = t72670+t72668+t72669+1.0;
                double t72672 = t72659*t72659;
                double t72688 = gcaa*t72608*4.0;
                double t72689 = gamma_aa[index]*t72607*t72658*1.2E1;
                double t72690 = gcaa*t72662*t72658*t72659*1.2E1;
                double t72691 = gamma_aa[index]*t72660*t72661*t72659*4.0;
                double t72673 = t72690+t72691+t72688+t72689;
                double t72674 = gamma_aa[index]*gcaa*t72608*4.0;
                double t72675 = gamma_aa[index]*gcaa*t72662*t72658*t72659*4.0;
                double t72676 = t72607*t72658*t72659*6.0;
                double t72677 = t72660*t72661*t72672;
                double t72678 = t72674+t72675+t72676+t72677+1.0;
                double t72681 = gcaa*t72608*2.0;
                double t72682 = gamma_aa[index]*t72607*t72658*2.0;
                double t72679 = t72681+t72682;
                double t72680 = 1.0/(t72671*t72671);
                double t72683 = 1.0/(t72667*t72667);
                double t72684 = gcaa*t72608*3.0;
                double t72685 = gamma_aa[index]*t72607*t72658*6.0;
                double t72686 = gcaa*t72662*t72658*t72659*3.0;
                double t72687 = t72684+t72685+t72686;
                double t72692 = 1.0/(t72678*t72678);
                double t72693 = 1.0/tau_a[index];
                double t72694 = tau_a[index]-1.0/1.0E20;
                double t72695 = ( (t72694 > 0.0) ?  1.0 : 0.0 ) ;
                double t72696 = t72656-t72657;
                double t72697 = t72555*t72558*t72696;
                double t72698 = t72657+t72697;
                double t72699 = 1.0/t72678;
                double t72700 = 1.0/t72667;
                double t72701 = 1.0/t72671;
                double t72702 = 1.0/(t72664*t72664);
                double t72703 = 1.0/kp;
                double t72704 = rho_a[index]*2.0;
                double t72705 = pow(rho_a[index],5.0/3.0);
                double t72706 = C_k*t72705*t72693;
                double t72707 = t72706-1.0;
                double t72708 = t72707*t72707;
                double t72709 = t72708*t72708;
                double t72710 = t72709*t72709;
                double t72711 = t72706+1.0;
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t72657+t72555*t72558*(t72656-c0p*t72550*t72552*2.0) \
                   )+rho_b[index]*(t72576-t72555*t72558*(t72576-c0f*log((t72559*(1.0/2.0))/(b1f*t72562+b3f*t72563+b2f* \
                   c*t72560+b4f*t72564*t72539)+1.0)*(a1f*c*t72560+1.0)*2.0))-t72577*(t72594-t72600*t72605*t72558*t72599* \
                   (t72594-c0f*log((t72559*(1.0/2.0))/(b1f*t72580+b3f*t72581+b2f*c*t72578+b4f*t72582*t72539)+1.0)*(a1f* \
                   c*t72578+1.0)*2.0)+(Aa*t72605*t72558*log((1.0/2.0)/(Aa*(b1a*t72580+b3a*t72581+b2a*c*t72578+b4a*t72582* \
                   t72539))+1.0)*(t72600*t72599-1.0)*(a1a*c*t72578+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t72614*t72614)*t72606* \
                   t72607*(1.0/2.0)-(ccab2*t72606*t72607*(1.0/2.0))/t72618-ccab4*(t72620*t72620)*t72621*1.0/(t72632*t72632* \
                   t72632)*t72619*2.0-ccab2*t72606*t72615*1.0/(t72618*t72618*t72618)*(t72627*t72627)*2.0+ccab2*t72615* \
                   t72607*t72635*t72619*(1.0/2.0)+ccab4*t72621*t72640*t72619*(t72606*t72607*3.0+t72615*t72607*t72619* \
                   3.0+gcab*t72612*t72606*t72607*6.0)-(ccab4*t72615*t72607*t72619*3.0)/t72632+ccab2*t72612*t72606*t72608* \
                   t72635*t72627*2.0-ccab1*gcab*t72612*1.0/(t72614*t72614*t72614)*t72606*t72607*(1.0/2.0)-(ccab3*gcab* \
                   t72612*t72606*t72607*(3.0/2.0))/t72626-ccab3*gcab*t72612*(t72622*t72622)*t72606*t72615*1.0/(t72626* \
                   t72626*t72626)*2.0+ccab3*gcab*t72622*t72606*t72615*t72608*t72644*3.0+ccab4*t72620*t72612*t72640*t72615* \
                   t72608*t72619*4.0+ccab3*gcab*t72612*t72606*t72615*t72644*(t72606*t72607*(3.0/2.0)+gcab*t72612*t72606* \
                   t72607*(3.0/2.0)))+t72693*t72695*t72698*((ccaa1*gcaa*t72608)/t72664+ccaa2*gamma_aa[index]*t72700*t72607* \
                   t72658*2.0-ccaa1*gamma_aa[index]*t72702*t72607*t72658-ccaa4*t72660*t72661*t72672*t72673*t72692-ccaa2* \
                   t72607*t72683*t72658*t72659*t72679+ccaa4*gamma_aa[index]*t72660*t72661*t72659*t72699*4.0+ccaa3*gcaa* \
                   t72701*t72662*t72658*t72659*3.0-ccaa3*gamma_aa[index]*gcaa*t72662*t72680*t72658*t72659*t72687)*(1.0/ \
                   4.0)-rho_a[index]*t72698*(t72695*(t72693*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index]) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa2*t72700*t72607*t72658*2.0-ccaa1*t72702*t72607*t72658*2.0-ccaa2*t72660*t72661* \
                   t72683*t72659*2.0+ccaa4*t72660*t72661*t72659*t72699*1.2E1-ccaa4*t72660*t72661*t72672*t72692*(t72607* \
                   t72658*1.2E1+t72660*t72661*t72659*1.2E1+gamma_aa[index]*gcaa*t72662*t72658*2.4E1)+ccaa1*gamma_aa[index]* \
                   gcaa*t72662*1.0/(t72664*t72664*t72664)*t72658*2.0+ccaa4*t72660*t72661*t72672*(t72673*t72673)*1.0/(t72678* \
                   t72678*t72678)*2.0+ccaa2*t72607*t72658*1.0/(t72667*t72667*t72667)*t72659*(t72679*t72679)*2.0+ccaa3* \
                   gamma_aa[index]*gcaa*t72701*t72662*t72658*6.0-ccaa2*gamma_aa[index]*t72607*t72683*t72658*t72679*4.0- \
                   ccaa4*gamma_aa[index]*t72660*t72661*t72673*t72692*t72659*8.0-ccaa3*gcaa*t72662*t72680*t72658*t72659* \
                   t72687*6.0-ccaa3*gamma_aa[index]*gcaa*t72662*t72680*t72658*t72659*(t72607*t72658*6.0+gamma_aa[index]* \
                   gcaa*t72662*t72658*6.0)+ccaa3*gamma_aa[index]*gcaa*t72662*1.0/(t72671*t72671*t72671)*t72658*t72659* \
                   (t72687*t72687)*2.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t72703*1.0/ \
                   pow(t72704,4.0/3.0)*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t72703*1.0/ \
                   pow(t72704,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t72707)/t72711+a_2*1.0/(t72711*t72711)*t72708+ \
                   a_4*1.0/(t72711*t72711*t72711*t72711)*t72709+a_8*t72710*1.0/(t72711*t72711*t72711*t72711*t72711*t72711* \
                   t72711*t72711)+a_10*t72710*1.0/pow(t72711,1.0E1)*t72708+a_3*1.0/(t72711*t72711*t72711)*t72707*t72708+ \
                   a_5*1.0/(t72711*t72711*t72711*t72711*t72711)*t72707*t72709+a_6*1.0/(t72711*t72711*t72711*t72711*t72711* \
                   t72711)*t72708*t72709+a_9*t72710*1.0/(t72711*t72711*t72711*t72711*t72711*t72711*t72711*t72711*t72711) \
                   *t72707+a_11*t72710*1.0/pow(t72711,1.1E1)*t72707*t72708+a_7*1.0/(t72711*t72711*t72711*t72711*t72711* \
                   t72711*t72711)*t72707*t72708*t72709+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75474 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75475 = c*t75474;
                double t75476 = sqrt(t75475);
                double t75477 = pow(t75475,3.0/2.0);
                double t75478 = c*c;
                double t75479 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75480 = 1.0/c0p;
                double t75481 = b1p*t75476;
                double t75482 = b3p*t75477;
                double t75483 = b4p*t75478*t75479;
                double t75484 = b2p*c*t75474;
                double t75485 = t75481+t75482+t75483+t75484;
                double t75486 = 1.0/t75485;
                double t75487 = t75480*t75486*(1.0/2.0);
                double t75488 = t75487+1.0;
                double t75489 = log(t75488);
                double t75490 = a1p*c*t75474;
                double t75491 = t75490+1.0;
                double t75492 = gcaa*gcaa;
                double t75493 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75494 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75495 = gamma_aa[index]*gamma_aa[index];
                double t75496 = t75492*t75492;
                double t75497 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75498 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75499 = gamma_aa[index]*gcaa*t75494;
                double t75500 = t75499+1.0;
                double t75501 = gamma_aa[index]*gcaa*t75494*2.0;
                double t75502 = t75492*t75493*t75495;
                double t75503 = t75501+t75502+1.0;
                double t75504 = gamma_aa[index]*gcaa*t75494*3.0;
                double t75505 = gamma_aa[index]*gcaa*t75492*t75495*t75498;
                double t75506 = t75492*t75493*t75495*3.0;
                double t75507 = t75504+t75505+t75506+1.0;
                double t75508 = t75495*t75495;
                double t75524 = gcaa*t75494*4.0;
                double t75525 = gamma_aa[index]*t75492*t75493*1.2E1;
                double t75526 = gcaa*t75492*t75495*t75498*1.2E1;
                double t75527 = gamma_aa[index]*t75495*t75496*t75497*4.0;
                double t75509 = t75524+t75525+t75526+t75527;
                double t75510 = gamma_aa[index]*gcaa*t75494*4.0;
                double t75511 = gamma_aa[index]*gcaa*t75492*t75495*t75498*4.0;
                double t75512 = t75492*t75493*t75495*6.0;
                double t75513 = t75508*t75496*t75497;
                double t75514 = t75510+t75511+t75512+t75513+1.0;
                double t75517 = gcaa*t75494*2.0;
                double t75518 = gamma_aa[index]*t75492*t75493*2.0;
                double t75515 = t75517+t75518;
                double t75516 = 1.0/(t75507*t75507);
                double t75519 = 1.0/(t75503*t75503);
                double t75520 = gcaa*t75494*3.0;
                double t75521 = gamma_aa[index]*t75492*t75493*6.0;
                double t75522 = gcaa*t75492*t75495*t75498*3.0;
                double t75523 = t75520+t75521+t75522;
                double t75528 = 1.0/(t75514*t75514);
                double t75529 = 1.0/tau_a[index];
                double t75530 = tau_a[index]-1.0/1.0E20;
                double t75531 = ( (t75530 > 0.0) ?  1.0 : 0.0 ) ;
                double t75532 = pow(2.0,1.0/3.0);
                double t75533 = t75532*2.0;
                double t75534 = t75533-2.0;
                double t75535 = two_13*2.0;
                double t75536 = t75535-2.0;
                double t75537 = 1.0/t75536;
                double t75538 = 1.0/c0f;
                double t75539 = b1f*t75476;
                double t75540 = b3f*t75477;
                double t75541 = b4f*t75478*t75479;
                double t75542 = b2f*c*t75474;
                double t75543 = t75540+t75541+t75542+t75539;
                double t75544 = 1.0/t75543;
                double t75545 = t75544*t75538*(1.0/2.0);
                double t75546 = t75545+1.0;
                double t75547 = log(t75546);
                double t75548 = a1f*c*t75474;
                double t75549 = t75548+1.0;
                double t75550 = c0f*t75547*t75549*2.0;
                double t75551 = c0p*t75491*t75489*2.0;
                double t75552 = 1.0/t75514;
                double t75553 = 1.0/t75503;
                double t75554 = 1.0/t75507;
                double t75555 = 1.0/(t75500*t75500);
                double t75556 = 1.0/kp;
                double t75557 = rho_a[index]*2.0;
                double t75558 = pow(rho_a[index],5.0/3.0);
                double t75559 = C_k*t75529*t75558;
                double t75560 = t75559-1.0;
                double t75561 = t75560*t75560;
                double t75562 = t75561*t75561;
                double t75563 = t75562*t75562;
                double t75564 = t75559+1.0;
                v_gamma_aa_gamma_aa_[index] = t75531*t75529*(t75551+t75534*t75537*(t75550-t75551))*((ccaa1*gcaa*t75494) \
                   /t75500+ccaa2*gamma_aa[index]*t75553*t75492*t75493*2.0-ccaa1*gamma_aa[index]*t75492*t75555*t75493- \
                   ccaa2*t75515*t75492*t75519*t75493*t75495-ccaa4*t75508*t75509*t75528*t75496*t75497+ccaa4*gamma_aa[index]* \
                   t75552*t75495*t75496*t75497*4.0+ccaa3*gcaa*t75554*t75492*t75495*t75498*3.0-ccaa3*gamma_aa[index]*gcaa* \
                   t75523*t75516*t75492*t75495*t75498)*(1.0/4.0)-rho_a[index]*(t75531*(t75529*(tau_a[index]*2.0-(gamma_aa[index]* \
                   (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0)+1.0)*(t75551+t75534*t75537*(t75550-c0p*t75491*t75489*2.0)) \
                   *(ccaa2*t75553*t75492*t75493*2.0-ccaa1*t75492*t75555*t75493*2.0+ccaa4*t75552*t75495*t75496*t75497* \
                   1.2E1-ccaa2*t75519*t75495*t75496*t75497*2.0-ccaa4*t75508*t75528*t75496*t75497*(t75492*t75493*1.2E1+ \
                   t75495*t75496*t75497*1.2E1+gamma_aa[index]*gcaa*t75492*t75498*2.4E1)+ccaa1*gamma_aa[index]*gcaa*1.0/ \
                   (t75500*t75500*t75500)*t75492*t75498*2.0+ccaa2*1.0/(t75503*t75503*t75503)*(t75515*t75515)*t75492*t75493* \
                   t75495*2.0+ccaa4*1.0/(t75514*t75514*t75514)*t75508*(t75509*t75509)*t75496*t75497*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t75554*t75492*t75498*6.0-ccaa2*gamma_aa[index]*t75515*t75492*t75519*t75493*4.0-ccaa4*gamma_aa[index]* \
                   t75509*t75528*t75495*t75496*t75497*8.0-ccaa3*gcaa*t75523*t75516*t75492*t75495*t75498*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t75516*t75492*t75495*t75498*(t75492*t75493*6.0+gamma_aa[index]*gcaa*t75492*t75498*6.0)+ccaa3* \
                   gamma_aa[index]*gcaa*(t75523*t75523)*1.0/(t75507*t75507*t75507)*t75492*t75495*t75498*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t75556*1.0/pow(t75557,4.0/3.0)*1.0/pow(gamma_aa[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t75556*1.0/pow(t75557,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t75560)/t75564+a_2*t75561*1.0/(t75564*t75564)+a_4*t75562*1.0/(t75564*t75564*t75564*t75564) \
                   +a_8*t75563*1.0/(t75564*t75564*t75564*t75564*t75564*t75564*t75564*t75564)+a_10*t75561*t75563*1.0/pow(t75564,1.0E1) \
                   +a_3*t75560*t75561*1.0/(t75564*t75564*t75564)+a_5*t75560*t75562*1.0/(t75564*t75564*t75564*t75564*t75564) \
                   +a_6*t75561*t75562*1.0/(t75564*t75564*t75564*t75564*t75564*t75564)+a_9*t75560*t75563*1.0/(t75564*t75564* \
                   t75564*t75564*t75564*t75564*t75564*t75564*t75564)+a_11*t75560*t75561*t75563*1.0/pow(t75564,1.1E1)+ \
                   a_7*t75560*t75561*t75562*1.0/(t75564*t75564*t75564*t75564*t75564*t75564*t75564)+1.0)*(1.0/8.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72714 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72715 = c*t72714;
                double t72716 = sqrt(t72715);
                double t72717 = pow(t72715,3.0/2.0);
                double t72718 = c*c;
                double t72719 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72720 = 1.0/c0p;
                double t72721 = b1p*t72716;
                double t72722 = b3p*t72717;
                double t72723 = b4p*t72718*t72719;
                double t72724 = b2p*c*t72714;
                double t72725 = t72721+t72722+t72723+t72724;
                double t72726 = 1.0/t72725;
                double t72727 = t72720*t72726*(1.0/2.0);
                double t72728 = t72727+1.0;
                double t72729 = log(t72728);
                double t72730 = a1p*c*t72714;
                double t72731 = t72730+1.0;
                double t72732 = pow(2.0,1.0/3.0);
                double t72733 = t72732*2.0;
                double t72734 = t72733-2.0;
                double t72735 = two_13*2.0;
                double t72736 = t72735-2.0;
                double t72737 = 1.0/t72736;
                double t72738 = 1.0/c0f;
                double t72739 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72740 = c*t72739;
                double t72741 = sqrt(t72740);
                double t72742 = pow(t72740,3.0/2.0);
                double t72743 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72744 = b1p*t72741;
                double t72745 = b3p*t72742;
                double t72746 = b4p*t72743*t72718;
                double t72747 = b2p*c*t72739;
                double t72748 = t72744+t72745+t72746+t72747;
                double t72749 = 1.0/t72748;
                double t72750 = t72720*t72749*(1.0/2.0);
                double t72751 = t72750+1.0;
                double t72752 = log(t72751);
                double t72753 = a1p*c*t72739;
                double t72754 = t72753+1.0;
                double t72755 = c0p*t72752*t72754*2.0;
                double t72756 = rho_a[index]+rho_b[index];
                double t72757 = 1.0/pow(t72756,1.0/3.0);
                double t72758 = c*t72757;
                double t72759 = sqrt(t72758);
                double t72760 = pow(t72758,3.0/2.0);
                double t72761 = 1.0/pow(t72756,2.0/3.0);
                double t72762 = b1p*t72759;
                double t72763 = b3p*t72760;
                double t72764 = b4p*t72761*t72718;
                double t72765 = b2p*c*t72757;
                double t72766 = t72762+t72763+t72764+t72765;
                double t72767 = 1.0/t72766;
                double t72768 = t72720*t72767*(1.0/2.0);
                double t72769 = t72768+1.0;
                double t72770 = log(t72769);
                double t72771 = a1p*c*t72757;
                double t72772 = t72771+1.0;
                double t72773 = c0p*t72770*t72772*2.0;
                double t72774 = rho_a[index]-rho_b[index];
                double t72775 = t72774*t72774;
                double t72776 = 1.0/t72756;
                double t72777 = t72774*t72776;
                double t72778 = 1.0/(t72756*t72756*t72756*t72756);
                double t72779 = t72775*t72775;
                double t72780 = t72777+1.0;
                double t72781 = pow(t72780,4.0/3.0);
                double t72782 = -t72777+1.0;
                double t72783 = pow(t72782,4.0/3.0);
                double t72784 = t72781+t72783-2.0;
                double t72785 = gcab*gcab;
                double t72788 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72789 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72790 = gamma_aa[index]*t72788*(1.0/2.0);
                double t72791 = gamma_bb[index]*t72789*(1.0/2.0);
                double t72786 = t72790+t72791;
                double t72787 = t72786*t72786;
                double t72792 = t72785*t72785;
                double t72793 = t72787*t72787;
                double t72794 = t72785*t72787*3.0;
                double t72795 = gcab*t72785*t72786*t72787;
                double t72796 = gcab*t72786*3.0;
                double t72797 = t72794+t72795+t72796+1.0;
                double t72798 = t72785*t72787;
                double t72799 = gcab*t72786*2.0;
                double t72800 = t72798+t72799+1.0;
                double t72801 = t72785*t72787*6.0;
                double t72802 = gcab*t72785*t72786*t72787*4.0;
                double t72803 = t72792*t72793;
                double t72804 = gcab*t72786*4.0;
                double t72805 = t72801+t72802+t72803+t72804+1.0;
                double t72806 = 1.0/(t72800*t72800);
                double t72807 = gcab*t72788;
                double t72808 = t72785*t72786*t72788;
                double t72809 = t72807+t72808;
                double t72810 = gcab*t72789;
                double t72811 = t72785*t72786*t72789;
                double t72812 = t72810+t72811;
                double t72813 = gcab*t72786;
                double t72814 = t72813+1.0;
                double t72815 = gcab*t72788*2.0;
                double t72816 = t72785*t72786*t72788*6.0;
                double t72817 = gcab*t72785*t72787*t72788*6.0;
                double t72818 = t72792*t72786*t72787*t72788*2.0;
                double t72819 = t72815+t72816+t72817+t72818;
                double t72820 = 1.0/(t72805*t72805);
                double t72821 = gcab*t72789*2.0;
                double t72822 = t72785*t72786*t72789*6.0;
                double t72823 = gcab*t72785*t72787*t72789*6.0;
                double t72824 = t72792*t72786*t72787*t72789*2.0;
                double t72825 = t72821+t72822+t72823+t72824;
                double t72826 = gcab*t72788*(3.0/2.0);
                double t72827 = t72785*t72786*t72788*3.0;
                double t72828 = gcab*t72785*t72787*t72788*(3.0/2.0);
                double t72829 = t72826+t72827+t72828;
                double t72830 = 1.0/(t72797*t72797);
                double t72831 = gcab*t72789*(3.0/2.0);
                double t72832 = t72785*t72786*t72789*3.0;
                double t72833 = gcab*t72785*t72787*t72789*(3.0/2.0);
                double t72834 = t72831+t72832+t72833;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t72755-t72734*t72737*(t72755-c0f*log((t72738*(1.0/2.0) \
                   )/(b1f*t72741+b3f*t72742+b2f*c*t72739+b4f*t72743*t72718)+1.0)*(a1f*c*t72739+1.0)*2.0))+t72756*(t72773- \
                   t72737*t72784*t72778*t72779*(t72773-c0f*log((t72738*(1.0/2.0))/(b1f*t72759+b3f*t72760+b2f*c*t72757+ \
                   b4f*t72761*t72718)+1.0)*(a1f*c*t72757+1.0)*2.0)+(Aa*t72737*t72784*log((1.0/2.0)/(Aa*(b1a*t72759+b3a* \
                   t72760+b2a*c*t72757+b4a*t72761*t72718))+1.0)*(t72778*t72779-1.0)*(a1a*c*t72757+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t72734*t72737*(c0p*t72731*t72729*2.0-c0f*log((t72738*(1.0/2.0))/(b1f*t72716+b3f*t72717+b2f*c*t72714+ \
                   b4f*t72718*t72719)+1.0)*(a1f*c*t72714+1.0)*2.0)-c0p*t72731*t72729*2.0))*(ccab4*t72820*t72792*t72793* \
                   (t72785*t72788*t72789*3.0+t72792*t72787*t72788*t72789*3.0+gcab*t72785*t72786*t72788*t72789*6.0)-(ccab2* \
                   t72785*t72788*t72789*(1.0/2.0))/t72800+ccab1*1.0/(t72814*t72814)*t72785*t72788*t72789*(1.0/2.0)+ccab2* \
                   t72812*t72806*t72785*t72786*t72788+ccab2*t72806*t72809*t72785*t72786*t72789+ccab2*t72806*t72792*t72787* \
                   t72788*t72789*(1.0/2.0)-ccab2*1.0/(t72800*t72800*t72800)*t72812*t72809*t72785*t72787*2.0-ccab4*1.0/ \
                   (t72805*t72805*t72805)*t72825*t72792*t72819*t72793*2.0-(ccab4*t72792*t72787*t72788*t72789*3.0)/t72805+ \
                   ccab3*gcab*t72830*t72834*t72785*t72787*t72788*(3.0/2.0)+ccab3*gcab*t72830*t72829*t72785*t72787*t72789* \
                   (3.0/2.0)+ccab4*t72820*t72825*t72792*t72786*t72787*t72788*2.0+ccab4*t72820*t72792*t72819*t72786*t72787* \
                   t72789*2.0+ccab3*gcab*t72830*t72785*t72786*t72787*(t72785*t72788*t72789*(3.0/2.0)+gcab*t72785*t72786* \
                   t72788*t72789*(3.0/2.0))-ccab1*gcab*1.0/(t72814*t72814*t72814)*t72785*t72786*t72788*t72789*(1.0/2.0) \
                   -(ccab3*gcab*t72785*t72786*t72788*t72789*(3.0/2.0))/t72797-ccab3*gcab*t72834*t72829*t72785*t72786* \
                   t72787*1.0/(t72797*t72797*t72797)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72838 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72839 = c*t72838;
                double t72840 = sqrt(t72839);
                double t72841 = pow(t72839,3.0/2.0);
                double t72842 = c*c;
                double t72843 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72844 = 1.0/c0p;
                double t72845 = b1p*t72840;
                double t72846 = b3p*t72841;
                double t72847 = b4p*t72842*t72843;
                double t72848 = b2p*c*t72838;
                double t72849 = t72845+t72846+t72847+t72848;
                double t72850 = 1.0/t72849;
                double t72851 = t72850*t72844*(1.0/2.0);
                double t72852 = t72851+1.0;
                double t72853 = log(t72852);
                double t72854 = a1p*c*t72838;
                double t72855 = t72854+1.0;
                double t72856 = pow(2.0,1.0/3.0);
                double t72857 = t72856*2.0;
                double t72858 = t72857-2.0;
                double t72859 = two_13*2.0;
                double t72860 = t72859-2.0;
                double t72861 = 1.0/t72860;
                double t72862 = 1.0/c0f;
                double t72863 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72864 = c*t72863;
                double t72865 = sqrt(t72864);
                double t72866 = pow(t72864,3.0/2.0);
                double t72867 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72868 = b1p*t72865;
                double t72869 = b3p*t72866;
                double t72870 = b4p*t72842*t72867;
                double t72871 = b2p*c*t72863;
                double t72872 = t72870+t72871+t72868+t72869;
                double t72873 = 1.0/t72872;
                double t72874 = t72844*t72873*(1.0/2.0);
                double t72875 = t72874+1.0;
                double t72876 = log(t72875);
                double t72877 = a1p*c*t72863;
                double t72878 = t72877+1.0;
                double t72879 = c0p*t72876*t72878*2.0;
                double t72880 = rho_a[index]+rho_b[index];
                double t72881 = 1.0/pow(t72880,1.0/3.0);
                double t72882 = c*t72881;
                double t72883 = sqrt(t72882);
                double t72884 = pow(t72882,3.0/2.0);
                double t72885 = 1.0/pow(t72880,2.0/3.0);
                double t72886 = b1p*t72883;
                double t72887 = b3p*t72884;
                double t72888 = b4p*t72842*t72885;
                double t72889 = b2p*c*t72881;
                double t72890 = t72886+t72887+t72888+t72889;
                double t72891 = 1.0/t72890;
                double t72892 = t72844*t72891*(1.0/2.0);
                double t72893 = t72892+1.0;
                double t72894 = log(t72893);
                double t72895 = a1p*c*t72881;
                double t72896 = t72895+1.0;
                double t72897 = c0p*t72894*t72896*2.0;
                double t72898 = rho_a[index]-rho_b[index];
                double t72899 = t72898*t72898;
                double t72900 = 1.0/t72880;
                double t72901 = t72900*t72898;
                double t72902 = 1.0/(t72880*t72880*t72880*t72880);
                double t72903 = t72899*t72899;
                double t72904 = t72901+1.0;
                double t72905 = pow(t72904,4.0/3.0);
                double t72906 = -t72901+1.0;
                double t72907 = pow(t72906,4.0/3.0);
                double t72908 = t72905+t72907-2.0;
                double t72909 = gcab*gcab;
                double t72910 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t72911 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72912 = gamma_aa[index]*t72911*(1.0/2.0);
                double t72913 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72914 = gamma_bb[index]*t72913*(1.0/2.0);
                double t72915 = t72912+t72914;
                double t72916 = gcab*t72915;
                double t72917 = t72916+1.0;
                double t72918 = t72915*t72915;
                double t72919 = t72909*t72918;
                double t72920 = gcab*t72915*2.0;
                double t72921 = t72920+t72919+1.0;
                double t72922 = t72909*t72909;
                double t72939 = gcab*t72913*2.0;
                double t72940 = t72913*t72915*t72909*6.0;
                double t72941 = gcab*t72913*t72909*t72918*6.0;
                double t72942 = t72913*t72922*t72915*t72918*2.0;
                double t72923 = t72940+t72941+t72942+t72939;
                double t72924 = t72918*t72918;
                double t72944 = gcab*t72913*(3.0/2.0);
                double t72945 = t72913*t72915*t72909*3.0;
                double t72946 = gcab*t72913*t72909*t72918*(3.0/2.0);
                double t72925 = t72944+t72945+t72946;
                double t72926 = t72909*t72918*3.0;
                double t72927 = gcab*t72915*t72909*t72918;
                double t72928 = gcab*t72915*3.0;
                double t72929 = t72926+t72927+t72928+1.0;
                double t72936 = gcab*t72913;
                double t72937 = t72913*t72915*t72909;
                double t72930 = t72936+t72937;
                double t72931 = t72909*t72918*6.0;
                double t72932 = gcab*t72915*t72909*t72918*4.0;
                double t72933 = t72922*t72924;
                double t72934 = gcab*t72915*4.0;
                double t72935 = t72931+t72932+t72933+t72934+1.0;
                double t72938 = 1.0/(t72921*t72921);
                double t72943 = 1.0/(t72935*t72935);
                double t72947 = 1.0/(t72929*t72929);
                double t72948 = c0p*t72853*t72855*2.0;
                double t72949 = b1f*t72865;
                double t72950 = b3f*t72866;
                double t72951 = b4f*t72842*t72867;
                double t72952 = b2f*c*t72863;
                double t72953 = t72950+t72951+t72952+t72949;
                double t72954 = 1.0/t72953;
                double t72955 = t72862*t72954*(1.0/2.0);
                double t72956 = t72955+1.0;
                double t72957 = log(t72956);
                double t72958 = a1f*c*t72863;
                double t72959 = t72958+1.0;
                double t73000 = c0f*t72957*t72959*2.0;
                double t72960 = t72879-t73000;
                double t73001 = t72861*t72960*t72858;
                double t72961 = t72879-t73001;
                double t72962 = gcaa*gcaa;
                double t72963 = gamma_bb[index]*gamma_bb[index];
                double t72964 = t72962*t72962;
                double t72965 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t72966 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t72967 = gamma_bb[index]*gcaa*t72913;
                double t72968 = t72967+1.0;
                double t72969 = gamma_bb[index]*gcaa*t72913*2.0;
                double t72970 = t72910*t72962*t72963;
                double t72971 = t72970+t72969+1.0;
                double t72972 = gamma_bb[index]*gcaa*t72913*3.0;
                double t72973 = gamma_bb[index]*gcaa*t72962*t72963*t72966;
                double t72974 = t72910*t72962*t72963*3.0;
                double t72975 = t72972+t72973+t72974+1.0;
                double t72976 = t72963*t72963;
                double t72992 = gcaa*t72913*4.0;
                double t72993 = gamma_bb[index]*t72910*t72962*1.2E1;
                double t72994 = gcaa*t72962*t72963*t72966*1.2E1;
                double t72995 = gamma_bb[index]*t72963*t72964*t72965*4.0;
                double t72977 = t72992+t72993+t72994+t72995;
                double t72978 = gamma_bb[index]*gcaa*t72913*4.0;
                double t72979 = gamma_bb[index]*gcaa*t72962*t72963*t72966*4.0;
                double t72980 = t72910*t72962*t72963*6.0;
                double t72981 = t72964*t72965*t72976;
                double t72982 = t72980+t72981+t72978+t72979+1.0;
                double t72985 = gcaa*t72913*2.0;
                double t72986 = gamma_bb[index]*t72910*t72962*2.0;
                double t72983 = t72985+t72986;
                double t72984 = 1.0/(t72975*t72975);
                double t72987 = 1.0/(t72971*t72971);
                double t72988 = gcaa*t72913*3.0;
                double t72989 = gamma_bb[index]*t72910*t72962*6.0;
                double t72990 = gcaa*t72962*t72963*t72966*3.0;
                double t72991 = t72990+t72988+t72989;
                double t72996 = 1.0/(t72982*t72982);
                double t72997 = 1.0/tau_b[index];
                double t72998 = tau_b[index]-1.0/1.0E20;
                double t72999 = ( (t72998 > 0.0) ?  1.0 : 0.0 ) ;
                double t73002 = 1.0/t72982;
                double t73003 = 1.0/t72971;
                double t73004 = 1.0/t72975;
                double t73005 = 1.0/(t72968*t72968);
                double t73006 = 1.0/kp;
                double t73007 = rho_b[index]*2.0;
                double t73008 = pow(rho_b[index],5.0/3.0);
                double t73009 = C_k*t72997*t73008;
                double t73010 = t73009-1.0;
                double t73011 = t73010*t73010;
                double t73012 = t73011*t73011;
                double t73013 = t73012*t73012;
                double t73014 = t73009+1.0;
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t72961+rho_a[index]*(t72948-t72861*t72858*(t72948-c0f* \
                   log((t72862*(1.0/2.0))/(b1f*t72840+b3f*t72841+b2f*c*t72838+b4f*t72842*t72843)+1.0)*(a1f*c*t72838+1.0) \
                   *2.0))-t72880*(t72897-t72902*t72903*t72861*t72908*(t72897-c0f*log((t72862*(1.0/2.0))/(b1f*t72883+b3f* \
                   t72884+b2f*c*t72881+b4f*t72842*t72885)+1.0)*(a1f*c*t72881+1.0)*2.0)+(Aa*t72861*t72908*log((1.0/2.0) \
                   /(Aa*(b1a*t72883+b3a*t72884+b2a*c*t72881+b4a*t72842*t72885))+1.0)*(t72902*t72903-1.0)*(a1a*c*t72881+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t72910*t72909*(1.0/2.0))/t72921-ccab1*t72910*1.0/(t72917*t72917)*t72909* \
                   (1.0/2.0)+ccab2*1.0/(t72921*t72921*t72921)*(t72930*t72930)*t72909*t72918*2.0+ccab4*t72922*(t72923* \
                   t72923)*t72924*1.0/(t72935*t72935*t72935)*2.0-ccab2*t72910*t72922*t72918*t72938*(1.0/2.0)-ccab4*t72922* \
                   t72924*t72943*(t72910*t72909*3.0+t72910*t72922*t72918*3.0+gcab*t72910*t72915*t72909*6.0)+(ccab4*t72910* \
                   t72922*t72918*3.0)/t72935-ccab2*t72930*t72913*t72915*t72909*t72938*2.0+ccab1*gcab*t72910*t72915*1.0/ \
                   (t72917*t72917*t72917)*t72909*(1.0/2.0)+(ccab3*gcab*t72910*t72915*t72909*(3.0/2.0))/t72929+ccab3*gcab* \
                   t72915*(t72925*t72925)*t72909*t72918*1.0/(t72929*t72929*t72929)*2.0-ccab3*gcab*t72913*t72925*t72909* \
                   t72918*t72947*3.0-ccab4*t72913*t72922*t72923*t72915*t72943*t72918*4.0-ccab3*gcab*t72915*t72909*t72918* \
                   t72947*(t72910*t72909*(3.0/2.0)+gcab*t72910*t72915*t72909*(3.0/2.0)))+t72961*t72997*t72999*((ccaa1* \
                   gcaa*t72913)/t72968+ccaa2*gamma_bb[index]*t72910*t72962*t73003*2.0-ccaa1*gamma_bb[index]*t72910*t72962* \
                   t73005-ccaa2*t72910*t72962*t72963*t72983*t72987-ccaa4*t72964*t72965*t72976*t72977*t72996+ccaa4*gamma_bb[index]* \
                   t72963*t72964*t72965*t73002*4.0+ccaa3*gcaa*t72962*t72963*t72966*t73004*3.0-ccaa3*gamma_bb[index]*gcaa* \
                   t72962*t72963*t72991*t72966*t72984)*(1.0/4.0)-rho_b[index]*t72961*(t72999*(t72997*(tau_b[index]*2.0- \
                   (gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(ccaa2*t72910*t72962*t73003*2.0-ccaa1* \
                   t72910*t72962*t73005*2.0-ccaa2*t72963*t72964*t72965*t72987*2.0+ccaa4*t72963*t72964*t72965*t73002*1.2E1- \
                   ccaa4*t72964*t72965*t72976*t72996*(t72910*t72962*1.2E1+t72963*t72964*t72965*1.2E1+gamma_bb[index]* \
                   gcaa*t72962*t72966*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t72962*t72966*1.0/(t72968*t72968*t72968)*2.0+ \
                   ccaa2*t72910*t72962*1.0/(t72971*t72971*t72971)*t72963*(t72983*t72983)*2.0+ccaa4*t72964*1.0/(t72982* \
                   t72982*t72982)*t72965*t72976*(t72977*t72977)*2.0+ccaa3*gamma_bb[index]*gcaa*t72962*t72966*t73004*6.0- \
                   ccaa2*gamma_bb[index]*t72910*t72962*t72983*t72987*4.0-ccaa4*gamma_bb[index]*t72963*t72964*t72965*t72977* \
                   t72996*8.0-ccaa3*gcaa*t72962*t72963*t72991*t72966*t72984*6.0-ccaa3*gamma_bb[index]*gcaa*t72962*t72963* \
                   t72966*t72984*(t72910*t72962*6.0+gamma_bb[index]*gcaa*t72962*t72966*6.0)+ccaa3*gamma_bb[index]*gcaa* \
                   t72962*t72963*(t72991*t72991)*t72966*1.0/(t72975*t72975*t72975)*2.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_b[index]* \
                   rho_b[index]*rho_b[index])*t73006*1.0/pow(t73007,4.0/3.0)*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*1.0/ \
                   (rho_b[index]*rho_b[index])*t73006*1.0/pow(t73007,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t73010) \
                   /t73014+a_2*t73011*1.0/(t73014*t73014)+a_4*t73012*1.0/(t73014*t73014*t73014*t73014)+a_8*t73013*1.0/ \
                   (t73014*t73014*t73014*t73014*t73014*t73014*t73014*t73014)+a_10*t73011*t73013*1.0/pow(t73014,1.0E1) \
                   +a_3*t73010*t73011*1.0/(t73014*t73014*t73014)+a_5*t73010*t73012*1.0/(t73014*t73014*t73014*t73014*t73014) \
                   +a_6*t73011*t73012*1.0/(t73014*t73014*t73014*t73014*t73014*t73014)+a_9*t73010*t73013*1.0/(t73014*t73014* \
                   t73014*t73014*t73014*t73014*t73014*t73014*t73014)+a_11*t73010*t73011*t73013*1.0/pow(t73014,1.1E1)+ \
                   a_7*t73010*t73011*t73012*1.0/(t73014*t73014*t73014*t73014*t73014*t73014*t73014)+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74352 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74353 = c*t74352;
                double t74354 = sqrt(t74353);
                double t74355 = pow(t74353,3.0/2.0);
                double t74356 = c*c;
                double t74357 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74358 = 1.0/c0p;
                double t74359 = b1p*t74354;
                double t74360 = b3p*t74355;
                double t74361 = b4p*t74356*t74357;
                double t74362 = b2p*c*t74352;
                double t74363 = t74360+t74361+t74362+t74359;
                double t74364 = 1.0/t74363;
                double t74365 = t74364*t74358*(1.0/2.0);
                double t74366 = t74365+1.0;
                double t74367 = log(t74366);
                double t74368 = a1p*c*t74352;
                double t74369 = t74368+1.0;
                double t74370 = gcaa*gcaa;
                double t74371 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74372 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74373 = gamma_bb[index]*gamma_bb[index];
                double t74374 = t74370*t74370;
                double t74375 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74376 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74377 = gamma_bb[index]*gcaa*t74372;
                double t74378 = t74377+1.0;
                double t74379 = gamma_bb[index]*gcaa*t74372*2.0;
                double t74380 = t74370*t74371*t74373;
                double t74381 = t74380+t74379+1.0;
                double t74382 = gamma_bb[index]*gcaa*t74372*3.0;
                double t74383 = gamma_bb[index]*gcaa*t74370*t74373*t74376;
                double t74384 = t74370*t74371*t74373*3.0;
                double t74385 = t74382+t74383+t74384+1.0;
                double t74386 = t74373*t74373;
                double t74402 = gcaa*t74372*4.0;
                double t74403 = gamma_bb[index]*t74370*t74371*1.2E1;
                double t74404 = gcaa*t74370*t74373*t74376*1.2E1;
                double t74405 = gamma_bb[index]*t74373*t74374*t74375*4.0;
                double t74387 = t74402+t74403+t74404+t74405;
                double t74388 = gamma_bb[index]*gcaa*t74372*4.0;
                double t74389 = gamma_bb[index]*gcaa*t74370*t74373*t74376*4.0;
                double t74390 = t74370*t74371*t74373*6.0;
                double t74391 = t74374*t74375*t74386;
                double t74392 = t74390+t74391+t74388+t74389+1.0;
                double t74395 = gcaa*t74372*2.0;
                double t74396 = gamma_bb[index]*t74370*t74371*2.0;
                double t74393 = t74395+t74396;
                double t74394 = 1.0/(t74385*t74385);
                double t74397 = 1.0/(t74381*t74381);
                double t74398 = gcaa*t74372*3.0;
                double t74399 = gamma_bb[index]*t74370*t74371*6.0;
                double t74400 = gcaa*t74370*t74373*t74376*3.0;
                double t74401 = t74400+t74398+t74399;
                double t74406 = 1.0/(t74392*t74392);
                double t74407 = 1.0/tau_b[index];
                double t74408 = tau_b[index]-1.0/1.0E20;
                double t74409 = ( (t74408 > 0.0) ?  1.0 : 0.0 ) ;
                double t74410 = pow(2.0,1.0/3.0);
                double t74411 = t74410*2.0;
                double t74412 = t74411-2.0;
                double t74413 = two_13*2.0;
                double t74414 = t74413-2.0;
                double t74415 = 1.0/t74414;
                double t74416 = 1.0/c0f;
                double t74417 = b1f*t74354;
                double t74418 = b3f*t74355;
                double t74419 = b4f*t74356*t74357;
                double t74420 = b2f*c*t74352;
                double t74421 = t74420+t74417+t74418+t74419;
                double t74422 = 1.0/t74421;
                double t74423 = t74422*t74416*(1.0/2.0);
                double t74424 = t74423+1.0;
                double t74425 = log(t74424);
                double t74426 = a1f*c*t74352;
                double t74427 = t74426+1.0;
                double t74428 = c0f*t74425*t74427*2.0;
                double t74429 = c0p*t74367*t74369*2.0;
                double t74430 = 1.0/t74392;
                double t74431 = 1.0/t74381;
                double t74432 = 1.0/t74385;
                double t74433 = 1.0/(t74378*t74378);
                double t74434 = 1.0/kp;
                double t74435 = rho_b[index]*2.0;
                double t74436 = pow(rho_b[index],5.0/3.0);
                double t74437 = C_k*t74407*t74436;
                double t74438 = t74437-1.0;
                double t74439 = t74438*t74438;
                double t74440 = t74439*t74439;
                double t74441 = t74440*t74440;
                double t74442 = t74437+1.0;
                v_gamma_bb_gamma_bb_[index] = t74407*t74409*(t74429+t74412*t74415*(t74428-t74429))*((ccaa1*gcaa*t74372) \
                   /t74378+ccaa2*gamma_bb[index]*t74431*t74370*t74371*2.0-ccaa1*gamma_bb[index]*t74370*t74433*t74371- \
                   ccaa2*t74370*t74371*t74373*t74393*t74397-ccaa4*t74406*t74374*t74375*t74386*t74387+ccaa4*gamma_bb[index]* \
                   t74430*t74373*t74374*t74375*4.0+ccaa3*gcaa*t74432*t74370*t74373*t74376*3.0-ccaa3*gamma_bb[index]*gcaa* \
                   t74401*t74370*t74373*t74376*t74394)*(1.0/4.0)-rho_b[index]*(t74409*(t74407*(tau_b[index]*2.0-(gamma_bb[index]* \
                   (1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(t74429+t74412*t74415*(t74428-c0p*t74367*t74369*2.0)) \
                   *(ccaa2*t74431*t74370*t74371*2.0-ccaa1*t74370*t74433*t74371*2.0+ccaa4*t74430*t74373*t74374*t74375* \
                   1.2E1-ccaa2*t74373*t74374*t74375*t74397*2.0-ccaa4*t74406*t74374*t74375*t74386*(t74370*t74371*1.2E1+ \
                   t74373*t74374*t74375*1.2E1+gamma_bb[index]*gcaa*t74370*t74376*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t74370* \
                   t74376*1.0/(t74378*t74378*t74378)*2.0+ccaa2*t74370*t74371*1.0/(t74381*t74381*t74381)*t74373*(t74393* \
                   t74393)*2.0+ccaa4*t74374*1.0/(t74392*t74392*t74392)*t74375*t74386*(t74387*t74387)*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t74432*t74370*t74376*6.0-ccaa2*gamma_bb[index]*t74370*t74371*t74393*t74397*4.0-ccaa4*gamma_bb[index]* \
                   t74406*t74373*t74374*t74375*t74387*8.0-ccaa3*gcaa*t74401*t74370*t74373*t74376*t74394*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t74370*t74373*t74376*t74394*(t74370*t74371*6.0+gamma_bb[index]*gcaa*t74370*t74376*6.0)+ccaa3* \
                   gamma_bb[index]*gcaa*(t74401*t74401)*t74370*t74373*t74376*1.0/(t74385*t74385*t74385)*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t74434*1.0/pow(t74435,4.0/3.0)*1.0/pow(gamma_bb[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*t74434*1.0/pow(t74435,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t74438)/t74442+a_2*1.0/(t74442*t74442)*t74439+a_4*t74440*1.0/(t74442*t74442*t74442*t74442) \
                   +a_8*t74441*1.0/(t74442*t74442*t74442*t74442*t74442*t74442*t74442*t74442)+a_10*t74441*1.0/pow(t74442,1.0E1) \
                   *t74439+a_3*1.0/(t74442*t74442*t74442)*t74438*t74439+a_5*t74440*1.0/(t74442*t74442*t74442*t74442*t74442) \
                   *t74438+a_6*t74440*1.0/(t74442*t74442*t74442*t74442*t74442*t74442)*t74439+a_9*t74441*1.0/(t74442*t74442* \
                   t74442*t74442*t74442*t74442*t74442*t74442*t74442)*t74438+a_11*t74441*1.0/pow(t74442,1.1E1)*t74438* \
                   t74439+a_7*t74440*1.0/(t74442*t74442*t74442*t74442*t74442*t74442*t74442)*t74438*t74439+1.0)*(1.0/8.0) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t73016 = pow(rho_a[index],5.0/3.0);
                double t73017 = 1.0/(tau_a[index]*tau_a[index]);
                double t73018 = 1.0/tau_a[index];
                double t73019 = C_k*t73016*t73018;
                double t73020 = t73019+1.0;
                double t73021 = t73019-1.0;
                double t73022 = 1.0/(t73020*t73020);
                double t73023 = t73021*t73021;
                double t73024 = t73023*t73023;
                double t73025 = t73024*t73024;
                double t73026 = 1.0/pow(t73020,1.1E1);
                double t73027 = 1.0/(t73020*t73020*t73020);
                double t73028 = 1.0/(t73020*t73020*t73020*t73020);
                double t73029 = 1.0/(t73020*t73020*t73020*t73020*t73020);
                double t73030 = 1.0/(t73020*t73020*t73020*t73020*t73020*t73020);
                double t73031 = 1.0/(t73020*t73020*t73020*t73020*t73020*t73020*t73020);
                double t73032 = 1.0/(t73020*t73020*t73020*t73020*t73020*t73020*t73020*t73020);
                double t73033 = 1.0/(t73020*t73020*t73020*t73020*t73020*t73020*t73020*t73020*t73020);
                double t73034 = 1.0/pow(t73020,1.0E1);
                double t73035 = 1.0/(k*k);
                double t73036 = 1.0/kp;
                double t73037 = 1.0/(rho_a[index]*rho_a[index]);
                double t73038 = rho_a[index]*2.0;
                double t73039 = 1.0/pow(t73038,2.0/3.0);
                double t73040 = gamma_aa[index]*mu_*t73035*t73036*t73037*t73039*(1.0/4.0);
                double t73041 = t73040+1.0;
                double t73042 = 1.0/t73041;
                double t73043 = kp-kp*t73042+1.0;
                double t73044 = C_k*C_k;
                double t73045 = pow(rho_a[index],7.0/3.0);
                double t73046 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t73047 = 1.0/t73020;
                double t73048 = 1.0/pow(t73020,1.2E1);
                double t73049 = pow(rho_a[index],2.0/3.0);
                double t73050 = C_k*a_1*t73016*t73017*t73047;
                double t73051 = C_k*a_2*t73021*t73022*t73016*t73017*2.0;
                double t73052 = C_k*a_10*t73021*t73016*t73025*t73034*t73017*1.0E1;
                double t73053 = C_k*a_11*t73023*t73016*t73025*t73017*t73026*1.1E1;
                double t73054 = C_k*a_3*t73023*t73016*t73017*t73027*3.0;
                double t73055 = C_k*a_4*t73021*t73023*t73016*t73017*t73028*4.0;
                double t73056 = C_k*a_5*t73024*t73016*t73017*t73029*5.0;
                double t73057 = C_k*a_6*t73021*t73030*t73024*t73016*t73017*6.0;
                double t73058 = C_k*a_7*t73031*t73023*t73024*t73016*t73017*7.0;
                double t73059 = C_k*a_8*t73021*t73023*t73032*t73024*t73016*t73017*8.0;
                double t73060 = C_k*a_9*t73033*t73016*t73025*t73017*9.0;
                double t73061 = t73050+t73051+t73060+t73052+t73053+t73054+t73055+t73056+t73057+t73058+t73059-C_k* \
                   a_1*t73021*t73022*t73016*t73017-C_k*a_2*t73023*t73016*t73017*t73027*2.0-C_k*a_4*t73024*t73016*t73017* \
                   t73029*4.0-C_k*a_8*t73033*t73016*t73025*t73017*8.0-C_k*a_10*t73023*t73016*t73025*t73017*t73026*1.0E1- \
                   C_k*a_3*t73021*t73023*t73016*t73017*t73028*3.0-C_k*a_5*t73021*t73030*t73024*t73016*t73017*5.0-C_k* \
                   a_6*t73031*t73023*t73024*t73016*t73017*6.0-C_k*a_9*t73021*t73016*t73025*t73034*t73017*9.0-C_k*a_11* \
                   t73021*t73023*t73016*t73025*t73017*t73048*1.1E1-C_k*a_7*t73021*t73023*t73032*t73024*t73016*t73017* \
                   7.0;
                double t73062 = 1.0/pow(rho_a[index],1.0/3.0);
                double t73063 = c*t73062;
                double t73064 = sqrt(t73063);
                double t73065 = pow(t73063,3.0/2.0);
                double t73066 = c*c;
                double t73067 = 1.0/pow(rho_a[index],2.0/3.0);
                double t73068 = 1.0/c0p;
                double t73069 = b1p*t73064;
                double t73070 = b3p*t73065;
                double t73071 = b4p*t73066*t73067;
                double t73072 = b2p*c*t73062;
                double t73073 = t73070+t73071+t73072+t73069;
                double t73074 = 1.0/t73073;
                double t73075 = t73074*t73068*(1.0/2.0);
                double t73076 = t73075+1.0;
                double t73077 = log(t73076);
                double t73078 = a1p*c*t73062;
                double t73079 = t73078+1.0;
                double t73080 = tau_a[index]-1.0/1.0E20;
                double t73081 = tau_a[index]*2.0;
                double t73082 = 1.0/rho_a[index];
                double t73113 = gamma_aa[index]*t73082*(1.0/4.0);
                double t73083 = -t73113+t73081;
                double t73084 = gamma_aa[index]*gamma_aa[index];
                double t73085 = gcaa*gcaa;
                double t73086 = t73084*t73084;
                double t73087 = t73085*t73085;
                double t73088 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t73089 = 1.0/pow(rho_a[index],8.0/3.0);
                double t73090 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t73091 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t73092 = pow(2.0,1.0/3.0);
                double t73093 = t73092*2.0;
                double t73094 = t73093-2.0;
                double t73095 = two_13*2.0;
                double t73096 = t73095-2.0;
                double t73097 = 1.0/t73096;
                double t73098 = 1.0/c0f;
                double t73099 = b1f*t73064;
                double t73100 = b3f*t73065;
                double t73101 = b4f*t73066*t73067;
                double t73102 = b2f*c*t73062;
                double t73103 = t73100+t73101+t73102+t73099;
                double t73104 = 1.0/t73103;
                double t73105 = t73104*t73098*(1.0/2.0);
                double t73106 = t73105+1.0;
                double t73107 = log(t73106);
                double t73108 = a1f*c*t73062;
                double t73109 = t73108+1.0;
                double t73110 = c0f*t73107*t73109*2.0;
                double t73111 = c0p*t73077*t73079*2.0;
                double t73112 = ( (t73080 > 0.0) ?  1.0 : 0.0 ) ;
                double t73143 = t73017*t73083*(1.0/2.0);
                double t73114 = -t73143+t73018;
                double t73115 = t73112*t73114;
                double t73116 = 0.0 ;
                double t73117 = t73018*t73083*(1.0/2.0);
                double t73118 = t73117-1.0;
                double t73119 = t73116*t73118;
                double t73120 = t73115+t73119;
                double t73121 = gamma_aa[index]*gcaa*t73089*4.0;
                double t73122 = gamma_aa[index]*gcaa*t73090*t73084*t73085*4.0;
                double t73123 = t73091*t73084*t73085*6.0;
                double t73124 = t73086*t73087*t73088;
                double t73125 = t73121+t73122+t73123+t73124+1.0;
                double t73126 = 1.0/t73125;
                double t73127 = gamma_aa[index]*gcaa*t73089;
                double t73128 = t73127+1.0;
                double t73129 = 1.0/t73128;
                double t73130 = gamma_aa[index]*gcaa*t73089*3.0;
                double t73131 = gamma_aa[index]*gcaa*t73090*t73084*t73085;
                double t73132 = t73091*t73084*t73085*3.0;
                double t73133 = t73130+t73131+t73132+1.0;
                double t73134 = 1.0/t73133;
                double t73135 = gamma_aa[index]*gcaa*t73089*2.0;
                double t73136 = t73091*t73084*t73085;
                double t73137 = t73135+t73136+1.0;
                double t73138 = 1.0/t73137;
                double t73139 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t73140 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t73141 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t73142 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t73144 = 1.0/pow(rho_a[index],4.0/3.0);
                double t73145 = 1.0/pow(rho_a[index],5.0/3.0);
                double t73146 = 1.0/sqrt(t73063);
                double t73147 = 1.0/t73076;
                double t73148 = 1.0/(t73073*t73073);
                double t73149 = b4p*t73145*t73066*(2.0/3.0);
                double t73150 = b2p*c*t73144*(1.0/3.0);
                double t73151 = b1p*c*t73144*t73146*(1.0/6.0);
                double t73152 = b3p*c*t73144*t73064*(1.0/2.0);
                double t73153 = t73150+t73151+t73152+t73149;
                double t73154 = t73153*t73147*t73148*t73079;
                double t73155 = ccaa4*t73126*t73086*t73087*t73088;
                double t73156 = ccaa1*gamma_aa[index]*gcaa*t73129*t73089;
                double t73157 = ccaa3*gamma_aa[index]*gcaa*t73134*t73090*t73084*t73085;
                double t73158 = ccaa2*t73091*t73084*t73138*t73085;
                double t73159 = ccaa0+t73155+t73156+t73157+t73158;
                double t73160 = t73110-t73111;
                double t73161 = t73160*t73094*t73097;
                double t73162 = t73111+t73161;
                v_rho_a_tau_a_[index] = (X-1.0)*(t73043*t73061+rho_a[index]*t73043*(C_k*a_1*t73017*t73047*t73049* \
                   (5.0/3.0)-a_1*t73022*t73044*t73045*t73046*(1.0E1/3.0)+a_2*t73022*t73044*t73045*t73046*(1.0E1/3.0)+ \
                   a_1*t73021*t73044*t73027*t73045*t73046*(1.0E1/3.0)+a_10*t73025*t73034*t73044*t73045*t73046*1.5E2-a_2* \
                   t73021*t73044*t73027*t73045*t73046*(4.0E1/3.0)+a_2*t73023*t73044*t73045*t73028*t73046*1.0E1+a_3*t73021* \
                   t73044*t73027*t73045*t73046*1.0E1-a_3*t73023*t73044*t73045*t73028*t73046*3.0E1+a_4*t73030*t73024*t73044* \
                   t73045*t73046*(1.0E2/3.0)+a_4*t73023*t73044*t73045*t73028*t73046*2.0E1-a_5*t73030*t73024*t73044*t73045* \
                   t73046*(2.5E2/3.0)+a_6*t73030*t73024*t73044*t73045*t73046*5.0E1+a_8*t73025*t73034*t73044*t73045*t73046* \
                   1.2E2-a_9*t73025*t73034*t73044*t73045*t73046*2.7E2-C_k*a_1*t73021*t73022*t73017*t73049*(5.0/3.0)+C_k* \
                   a_2*t73021*t73022*t73017*t73049*(1.0E1/3.0)-C_k*a_2*t73023*t73017*t73027*t73049*(1.0E1/3.0)+C_k*a_3* \
                   t73023*t73017*t73027*t73049*5.0-C_k*a_4*t73024*t73017*t73029*t73049*(2.0E1/3.0)+C_k*a_5*t73024*t73017* \
                   t73029*t73049*(2.5E1/3.0)-C_k*a_8*t73033*t73025*t73017*t73049*(4.0E1/3.0)+C_k*a_9*t73033*t73025*t73017* \
                   t73049*1.5E1+C_k*a_10*t73021*t73025*t73034*t73017*t73049*(5.0E1/3.0)-C_k*a_10*t73023*t73025*t73017* \
                   t73026*t73049*(5.0E1/3.0)+C_k*a_11*t73023*t73025*t73017*t73026*t73049*(5.5E1/3.0)-C_k*a_3*t73021*t73023* \
                   t73017*t73028*t73049*5.0+C_k*a_4*t73021*t73023*t73017*t73028*t73049*(2.0E1/3.0)-C_k*a_5*t73021*t73030* \
                   t73024*t73017*t73049*(2.5E1/3.0)+C_k*a_6*t73021*t73030*t73024*t73017*t73049*1.0E1-C_k*a_6*t73031*t73023* \
                   t73024*t73017*t73049*1.0E1+C_k*a_7*t73031*t73023*t73024*t73017*t73049*(3.5E1/3.0)-C_k*a_9*t73021*t73025* \
                   t73034*t73017*t73049*1.5E1-a_10*t73021*t73025*t73026*t73044*t73045*t73046*(1.0E3/3.0)+a_11*t73021* \
                   t73025*t73026*t73044*t73045*t73046*(5.5E2/3.0)+a_10*t73023*t73025*t73044*t73045*t73046*t73048*(5.5E2/ \
                   3.0)-a_11*t73023*t73025*t73044*t73045*t73046*t73048*(1.21E3/3.0)+a_3*t73021*t73023*t73044*t73045*t73046* \
                   t73029*2.0E1-a_4*t73021*t73023*t73044*t73045*t73046*t73029*(1.6E2/3.0)+a_5*t73021*t73031*t73024*t73044* \
                   t73045*t73046*5.0E1+a_5*t73021*t73023*t73044*t73045*t73046*t73029*(1.0E2/3.0)-a_6*t73021*t73031*t73024* \
                   t73044*t73045*t73046*1.2E2+a_6*t73023*t73032*t73024*t73044*t73045*t73046*7.0E1+a_7*t73021*t73031*t73024* \
                   t73044*t73045*t73046*7.0E1-a_7*t73023*t73032*t73024*t73044*t73045*t73046*(4.9E2/3.0)+a_8*t73023*t73032* \
                   t73024*t73044*t73045*t73046*(2.8E2/3.0)+a_9*t73021*t73025*t73026*t73044*t73045*t73046*1.5E2+a_11*1.0/ \
                   pow(t73020,1.3E1)*t73021*t73023*t73025*t73044*t73045*t73046*2.2E2-C_k*a_11*t73021*t73023*t73025*t73017* \
                   t73048*t73049*(5.5E1/3.0)-C_k*a_7*t73021*t73023*t73032*t73024*t73017*t73049*(3.5E1/3.0)+C_k*a_8*t73021* \
                   t73023*t73032*t73024*t73017*t73049*(4.0E1/3.0)+a_7*t73021*t73023*t73024*t73033*t73044*t73045*t73046* \
                   (2.8E2/3.0)-a_8*t73021*t73023*t73024*t73033*t73044*t73045*t73046*(6.4E2/3.0)+a_9*t73021*t73023*t73024* \
                   t73033*t73044*t73045*t73046*1.2E2)-kp*rho_a[index]*1.0/(t73041*t73041)*t73061*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t73035*t73036*t73039*(1.0/2.0)+gamma_aa[index]*mu_*t73035* \
                   t73036*t73037*1.0/pow(t73038,5.0/3.0)*(1.0/3.0)))-t73120*t73159*(t73111+t73094*t73097*(t73110-c0p* \
                   t73077*t73079*2.0))+rho_a[index]*t73120*t73159*(-t73154+t73094*t73097*(t73154-(1.0/(t73103*t73103) \
                   *t73109*(b2f*c*t73144*(1.0/3.0)+b4f*t73145*t73066*(2.0/3.0)+b1f*c*t73144*t73146*(1.0/6.0)+b3f*c*t73144* \
                   t73064*(1.0/2.0)))/t73106+a1f*c*c0f*t73107*t73144*(2.0/3.0)-a1p*c*c0p*t73144*t73077*(2.0/3.0))+a1p* \
                   c*c0p*t73144*t73077*(2.0/3.0))+rho_a[index]*t73120*t73162*(ccaa1*gamma_aa[index]*gcaa*t73140*t73129* \
                   (8.0/3.0)+ccaa4*t73142*t73126*t73086*t73087*(3.2E1/3.0)+ccaa2*t73084*t73138*t73085*t73139*(1.6E1/3.0) \
                   -ccaa1*1.0/(t73128*t73128)*t73084*t73085*t73139*(8.0/3.0)-ccaa2*t73091*1.0/(t73137*t73137)*t73084* \
                   t73085*(gamma_aa[index]*gcaa*t73140*(1.6E1/3.0)+t73084*t73085*t73139*(1.6E1/3.0))-ccaa4*1.0/(t73125* \
                   t73125)*t73086*t73087*t73088*(gamma_aa[index]*gcaa*t73140*(3.2E1/3.0)+t73142*t73086*t73087*(3.2E1/ \
                   3.0)+t73084*t73085*t73139*3.2E1+gamma_aa[index]*gcaa*t73141*t73084*t73085*3.2E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t73141*t73134*t73084*t73085*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t73133*t73133)*t73090*t73084* \
                   t73085*(gamma_aa[index]*gcaa*t73140*8.0+t73084*t73085*t73139*1.6E1+gamma_aa[index]*gcaa*t73141*t73084* \
                   t73085*8.0))+gamma_aa[index]*t73112*t73017*t73162*t73082*t73159*(1.0/8.0)-gamma_aa[index]*t73116*t73018* \
                   t73162*t73082*t73159*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75571 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75572 = c*t75571;
                double t75573 = sqrt(t75572);
                double t75574 = pow(t75572,3.0/2.0);
                double t75575 = c*c;
                double t75576 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75577 = 1.0/c0p;
                double t75578 = b1p*t75573;
                double t75579 = b3p*t75574;
                double t75580 = b4p*t75575*t75576;
                double t75581 = b2p*c*t75571;
                double t75582 = t75580+t75581+t75578+t75579;
                double t75583 = 1.0/t75582;
                double t75584 = t75583*t75577*(1.0/2.0);
                double t75585 = t75584+1.0;
                double t75586 = log(t75585);
                double t75587 = a1p*c*t75571;
                double t75588 = t75587+1.0;
                double t75589 = tau_a[index]-1.0/1.0E20;
                double t75590 = 1.0/tau_a[index];
                double t75591 = tau_a[index]*2.0;
                double t75592 = 1.0/rho_a[index];
                double t75641 = gamma_aa[index]*t75592*(1.0/4.0);
                double t75593 = -t75641+t75591;
                double t75594 = gamma_aa[index]*gamma_aa[index];
                double t75595 = gcaa*gcaa;
                double t75596 = t75594*t75594;
                double t75597 = t75595*t75595;
                double t75598 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75599 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75600 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75601 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75602 = 1.0/(tau_a[index]*tau_a[index]);
                double t75603 = pow(rho_a[index],5.0/3.0);
                double t75604 = C_k*t75603*t75590;
                double t75605 = t75604+1.0;
                double t75606 = t75604-1.0;
                double t75607 = 1.0/(t75605*t75605);
                double t75608 = t75606*t75606;
                double t75609 = t75608*t75608;
                double t75610 = t75609*t75609;
                double t75611 = 1.0/pow(t75605,1.1E1);
                double t75612 = 1.0/(t75605*t75605*t75605);
                double t75613 = 1.0/(t75605*t75605*t75605*t75605);
                double t75614 = 1.0/(t75605*t75605*t75605*t75605*t75605);
                double t75615 = 1.0/(t75605*t75605*t75605*t75605*t75605*t75605);
                double t75616 = 1.0/(t75605*t75605*t75605*t75605*t75605*t75605*t75605);
                double t75617 = 1.0/(t75605*t75605*t75605*t75605*t75605*t75605*t75605*t75605);
                double t75618 = 1.0/(t75605*t75605*t75605*t75605*t75605*t75605*t75605*t75605*t75605);
                double t75619 = 1.0/pow(t75605,1.0E1);
                double t75620 = pow(2.0,1.0/3.0);
                double t75621 = t75620*2.0;
                double t75622 = t75621-2.0;
                double t75623 = two_13*2.0;
                double t75624 = t75623-2.0;
                double t75625 = 1.0/t75624;
                double t75626 = 1.0/c0f;
                double t75627 = b1f*t75573;
                double t75628 = b3f*t75574;
                double t75629 = b4f*t75575*t75576;
                double t75630 = b2f*c*t75571;
                double t75631 = t75630+t75627+t75628+t75629;
                double t75632 = 1.0/t75631;
                double t75633 = t75632*t75626*(1.0/2.0);
                double t75634 = t75633+1.0;
                double t75635 = log(t75634);
                double t75636 = a1f*c*t75571;
                double t75637 = t75636+1.0;
                double t75638 = c0f*t75635*t75637*2.0;
                double t75639 = c0p*t75586*t75588*2.0;
                double t75640 = ( (t75589 > 0.0) ?  1.0 : 0.0 ) ;
                double t75671 = t75602*t75593*(1.0/2.0);
                double t75642 = t75590-t75671;
                double t75643 = t75640*t75642;
                double t75644 = 0.0 ;
                double t75645 = t75590*t75593*(1.0/2.0);
                double t75646 = t75645-1.0;
                double t75647 = t75644*t75646;
                double t75648 = t75643+t75647;
                double t75649 = gamma_aa[index]*gcaa*t75599*4.0;
                double t75650 = gamma_aa[index]*gcaa*t75600*t75594*t75595*4.0;
                double t75651 = t75601*t75594*t75595*6.0;
                double t75652 = t75596*t75597*t75598;
                double t75653 = t75650+t75651+t75652+t75649+1.0;
                double t75654 = 1.0/t75653;
                double t75655 = gamma_aa[index]*gcaa*t75599;
                double t75656 = t75655+1.0;
                double t75657 = 1.0/t75656;
                double t75658 = gamma_aa[index]*gcaa*t75599*3.0;
                double t75659 = gamma_aa[index]*gcaa*t75600*t75594*t75595;
                double t75660 = t75601*t75594*t75595*3.0;
                double t75661 = t75660+t75658+t75659+1.0;
                double t75662 = 1.0/t75661;
                double t75663 = gamma_aa[index]*gcaa*t75599*2.0;
                double t75664 = t75601*t75594*t75595;
                double t75665 = t75663+t75664+1.0;
                double t75666 = 1.0/t75665;
                double t75667 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t75668 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t75669 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t75670 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t75672 = 1.0/pow(rho_a[index],4.0/3.0);
                double t75673 = 1.0/pow(rho_a[index],5.0/3.0);
                double t75674 = 1.0/sqrt(t75572);
                double t75675 = 1.0/t75585;
                double t75676 = 1.0/(t75582*t75582);
                double t75677 = b4p*t75673*t75575*(2.0/3.0);
                double t75678 = b2p*c*t75672*(1.0/3.0);
                double t75679 = b1p*c*t75672*t75674*(1.0/6.0);
                double t75680 = b3p*c*t75573*t75672*(1.0/2.0);
                double t75681 = t75680+t75677+t75678+t75679;
                double t75682 = t75681*t75675*t75676*t75588;
                double t75683 = ccaa4*t75654*t75596*t75597*t75598;
                double t75684 = ccaa1*gamma_aa[index]*gcaa*t75657*t75599;
                double t75685 = ccaa3*gamma_aa[index]*gcaa*t75600*t75662*t75594*t75595;
                double t75686 = ccaa2*t75601*t75594*t75666*t75595;
                double t75687 = ccaa0+t75683+t75684+t75685+t75686;
                double t75688 = X-1.0;
                double t75689 = 1.0/(k*k);
                double t75690 = 1.0/kp;
                double t75691 = 1.0/(rho_a[index]*rho_a[index]);
                double t75692 = rho_a[index]*2.0;
                double t75693 = 1.0/pow(t75692,2.0/3.0);
                double t75694 = gamma_aa[index]*mu_*t75690*t75691*t75693*t75689*(1.0/4.0);
                double t75695 = t75694+1.0;
                double t75696 = 1.0/t75695;
                double t75697 = kp-kp*t75696+1.0;
                double t75698 = C_k*C_k;
                double t75699 = pow(rho_a[index],7.0/3.0);
                double t75700 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t75701 = 1.0/t75605;
                double t75702 = 1.0/pow(t75605,1.2E1);
                double t75703 = pow(rho_a[index],2.0/3.0);
                double t75704 = t75638-t75639;
                double t75705 = t75622*t75704*t75625;
                double t75706 = t75705+t75639;
                double t75707 = C_k*a_1*t75602*t75701*t75603;
                double t75708 = C_k*a_2*t75602*t75603*t75606*t75607*2.0;
                double t75709 = C_k*a_10*t75610*t75602*t75603*t75606*t75619*1.0E1;
                double t75710 = C_k*a_11*t75610*t75602*t75611*t75603*t75608*1.1E1;
                double t75711 = C_k*a_3*t75602*t75603*t75612*t75608*3.0;
                double t75712 = C_k*a_4*t75602*t75603*t75613*t75606*t75608*4.0;
                double t75713 = C_k*a_5*t75602*t75603*t75614*t75609*5.0;
                double t75714 = C_k*a_6*t75602*t75603*t75606*t75615*t75609*6.0;
                double t75715 = C_k*a_7*t75602*t75603*t75616*t75608*t75609*7.0;
                double t75716 = C_k*a_8*t75602*t75603*t75606*t75608*t75617*t75609*8.0;
                double t75717 = C_k*a_9*t75610*t75602*t75603*t75618*9.0;
                double t75718 = t75710+t75711+t75712+t75713+t75714+t75715+t75707+t75716+t75708+t75717+t75709-C_k* \
                   a_1*t75602*t75603*t75606*t75607-C_k*a_2*t75602*t75603*t75612*t75608*2.0-C_k*a_4*t75602*t75603*t75614* \
                   t75609*4.0-C_k*a_8*t75610*t75602*t75603*t75618*8.0-C_k*a_10*t75610*t75602*t75611*t75603*t75608*1.0E1- \
                   C_k*a_3*t75602*t75603*t75613*t75606*t75608*3.0-C_k*a_5*t75602*t75603*t75606*t75615*t75609*5.0-C_k* \
                   a_6*t75602*t75603*t75616*t75608*t75609*6.0-C_k*a_9*t75610*t75602*t75603*t75606*t75619*9.0-C_k*a_11* \
                   t75610*t75602*t75603*t75702*t75606*t75608*1.1E1-C_k*a_7*t75602*t75603*t75606*t75608*t75617*t75609* \
                   7.0;
                v_rho_a_tau_a_[index] = t75718*t75688*t75697-t75648*t75687*(t75639+t75622*t75625*(t75638-c0p*t75586* \
                   t75588*2.0))+rho_a[index]*t75688*t75697*(C_k*a_1*t75602*t75701*t75703*(5.0/3.0)-a_1*t75700*t75607* \
                   t75698*t75699*(1.0E1/3.0)+a_2*t75700*t75607*t75698*t75699*(1.0E1/3.0)+a_1*t75700*t75612*t75606*t75698* \
                   t75699*(1.0E1/3.0)+a_10*t75610*t75700*t75619*t75698*t75699*1.5E2-a_2*t75700*t75612*t75606*t75698*t75699* \
                   (4.0E1/3.0)+a_2*t75700*t75613*t75608*t75698*t75699*1.0E1+a_3*t75700*t75612*t75606*t75698*t75699*1.0E1- \
                   a_3*t75700*t75613*t75608*t75698*t75699*3.0E1+a_4*t75700*t75613*t75608*t75698*t75699*2.0E1+a_4*t75700* \
                   t75615*t75609*t75698*t75699*(1.0E2/3.0)-a_5*t75700*t75615*t75609*t75698*t75699*(2.5E2/3.0)+a_6*t75700* \
                   t75615*t75609*t75698*t75699*5.0E1+a_8*t75610*t75700*t75619*t75698*t75699*1.2E2-a_9*t75610*t75700*t75619* \
                   t75698*t75699*2.7E2-C_k*a_1*t75602*t75703*t75606*t75607*(5.0/3.0)-C_k*a_2*t75602*t75612*t75703*t75608* \
                   (1.0E1/3.0)+C_k*a_2*t75602*t75703*t75606*t75607*(1.0E1/3.0)+C_k*a_3*t75602*t75612*t75703*t75608*5.0- \
                   C_k*a_4*t75602*t75703*t75614*t75609*(2.0E1/3.0)+C_k*a_5*t75602*t75703*t75614*t75609*(2.5E1/3.0)-C_k* \
                   a_8*t75610*t75602*t75703*t75618*(4.0E1/3.0)+C_k*a_9*t75610*t75602*t75703*t75618*1.5E1-C_k*a_10*t75610* \
                   t75602*t75611*t75703*t75608*(5.0E1/3.0)+C_k*a_11*t75610*t75602*t75611*t75703*t75608*(5.5E1/3.0)+C_k* \
                   a_10*t75610*t75602*t75703*t75606*t75619*(5.0E1/3.0)-C_k*a_3*t75602*t75613*t75703*t75606*t75608*5.0+ \
                   C_k*a_4*t75602*t75613*t75703*t75606*t75608*(2.0E1/3.0)-C_k*a_5*t75602*t75703*t75606*t75615*t75609* \
                   (2.5E1/3.0)+C_k*a_6*t75602*t75703*t75606*t75615*t75609*1.0E1-C_k*a_6*t75602*t75703*t75616*t75608*t75609* \
                   1.0E1+C_k*a_7*t75602*t75703*t75616*t75608*t75609*(3.5E1/3.0)-C_k*a_9*t75610*t75602*t75703*t75606*t75619* \
                   1.5E1-a_10*t75610*t75700*t75611*t75606*t75698*t75699*(1.0E3/3.0)+a_11*t75610*t75700*t75611*t75606* \
                   t75698*t75699*(5.5E2/3.0)+a_10*t75610*t75700*t75702*t75608*t75698*t75699*(5.5E2/3.0)-a_11*t75610*t75700* \
                   t75702*t75608*t75698*t75699*(1.21E3/3.0)+a_3*t75700*t75614*t75606*t75608*t75698*t75699*2.0E1-a_4*t75700* \
                   t75614*t75606*t75608*t75698*t75699*(1.6E2/3.0)+a_5*t75700*t75614*t75606*t75608*t75698*t75699*(1.0E2/ \
                   3.0)+a_5*t75700*t75606*t75616*t75609*t75698*t75699*5.0E1-a_6*t75700*t75606*t75616*t75609*t75698*t75699* \
                   1.2E2+a_6*t75700*t75608*t75617*t75609*t75698*t75699*7.0E1+a_7*t75700*t75606*t75616*t75609*t75698*t75699* \
                   7.0E1-a_7*t75700*t75608*t75617*t75609*t75698*t75699*(4.9E2/3.0)+a_8*t75700*t75608*t75617*t75609*t75698* \
                   t75699*(2.8E2/3.0)+a_9*t75610*t75700*t75611*t75606*t75698*t75699*1.5E2+a_11*t75610*t75700*1.0/pow(t75605,1.3E1) \
                   *t75606*t75608*t75698*t75699*2.2E2-C_k*a_11*t75610*t75602*t75702*t75703*t75606*t75608*(5.5E1/3.0)- \
                   C_k*a_7*t75602*t75703*t75606*t75608*t75617*t75609*(3.5E1/3.0)+C_k*a_8*t75602*t75703*t75606*t75608* \
                   t75617*t75609*(4.0E1/3.0)+a_7*t75700*t75606*t75608*t75609*t75618*t75698*t75699*(2.8E2/3.0)-a_8*t75700* \
                   t75606*t75608*t75609*t75618*t75698*t75699*(6.4E2/3.0)+a_9*t75700*t75606*t75608*t75609*t75618*t75698* \
                   t75699*1.2E2)+rho_a[index]*t75648*t75687*(-t75682+t75622*t75625*(t75682-(1.0/(t75631*t75631)*t75637* \
                   (b2f*c*t75672*(1.0/3.0)+b4f*t75673*t75575*(2.0/3.0)+b1f*c*t75672*t75674*(1.0/6.0)+b3f*c*t75573*t75672* \
                   (1.0/2.0)))/t75634+a1f*c*c0f*t75635*t75672*(2.0/3.0)-a1p*c*c0p*t75672*t75586*(2.0/3.0))+a1p*c*c0p* \
                   t75672*t75586*(2.0/3.0))+rho_a[index]*t75706*t75648*(ccaa1*gamma_aa[index]*gcaa*t75657*t75668*(8.0/ \
                   3.0)+ccaa4*t75670*t75654*t75596*t75597*(3.2E1/3.0)+ccaa2*t75594*t75666*t75595*t75667*(1.6E1/3.0)-ccaa1* \
                   1.0/(t75656*t75656)*t75594*t75595*t75667*(8.0/3.0)-ccaa2*t75601*1.0/(t75665*t75665)*t75594*t75595* \
                   (gamma_aa[index]*gcaa*t75668*(1.6E1/3.0)+t75594*t75595*t75667*(1.6E1/3.0))-ccaa4*1.0/(t75653*t75653) \
                   *t75596*t75597*t75598*(gamma_aa[index]*gcaa*t75668*(3.2E1/3.0)+t75670*t75596*t75597*(3.2E1/3.0)+t75594* \
                   t75595*t75667*3.2E1+gamma_aa[index]*gcaa*t75594*t75595*t75669*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t75662* \
                   t75594*t75595*t75669*8.0-ccaa3*gamma_aa[index]*gcaa*t75600*1.0/(t75661*t75661)*t75594*t75595*(gamma_aa[index]* \
                   gcaa*t75668*8.0+t75594*t75595*t75667*1.6E1+gamma_aa[index]*gcaa*t75594*t75595*t75669*8.0))+gamma_aa[index]* \
                   t75602*t75640*t75706*t75592*t75687*(1.0/8.0)-gamma_aa[index]*t75706*t75590*t75644*t75592*t75687*(1.0/ \
                   8.0)-kp*rho_a[index]*t75718*1.0/(t75695*t75695)*t75688*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index])*t75690*t75693*t75689*(1.0/2.0)+gamma_aa[index]*mu_*t75690*t75691*1.0/pow(t75692,5.0/ \
                   3.0)*t75689*(1.0/3.0));
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t73166 = pow(rho_b[index],5.0/3.0);
                double t73167 = 1.0/(tau_b[index]*tau_b[index]);
                double t73168 = 1.0/tau_b[index];
                double t73169 = C_k*t73166*t73168;
                double t73170 = t73169+1.0;
                double t73171 = t73169-1.0;
                double t73172 = 1.0/(t73170*t73170);
                double t73173 = t73171*t73171;
                double t73174 = t73173*t73173;
                double t73175 = t73174*t73174;
                double t73176 = 1.0/pow(t73170,1.1E1);
                double t73177 = 1.0/(t73170*t73170*t73170);
                double t73178 = 1.0/(t73170*t73170*t73170*t73170);
                double t73179 = 1.0/(t73170*t73170*t73170*t73170*t73170);
                double t73180 = 1.0/(t73170*t73170*t73170*t73170*t73170*t73170);
                double t73181 = 1.0/(t73170*t73170*t73170*t73170*t73170*t73170*t73170);
                double t73182 = 1.0/(t73170*t73170*t73170*t73170*t73170*t73170*t73170*t73170);
                double t73183 = 1.0/(t73170*t73170*t73170*t73170*t73170*t73170*t73170*t73170*t73170);
                double t73184 = 1.0/pow(t73170,1.0E1);
                double t73185 = 1.0/(k*k);
                double t73186 = 1.0/kp;
                double t73187 = 1.0/(rho_b[index]*rho_b[index]);
                double t73188 = rho_b[index]*2.0;
                double t73189 = 1.0/pow(t73188,2.0/3.0);
                double t73190 = gamma_bb[index]*mu_*t73185*t73186*t73187*t73189*(1.0/4.0);
                double t73191 = t73190+1.0;
                double t73192 = 1.0/t73191;
                double t73193 = kp-kp*t73192+1.0;
                double t73194 = C_k*C_k;
                double t73195 = pow(rho_b[index],7.0/3.0);
                double t73196 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t73197 = 1.0/t73170;
                double t73198 = 1.0/pow(t73170,1.2E1);
                double t73199 = pow(rho_b[index],2.0/3.0);
                double t73200 = C_k*a_1*t73166*t73167*t73197;
                double t73201 = C_k*a_2*t73171*t73172*t73166*t73167*2.0;
                double t73202 = C_k*a_10*t73171*t73166*t73175*t73184*t73167*1.0E1;
                double t73203 = C_k*a_11*t73173*t73166*t73175*t73167*t73176*1.1E1;
                double t73204 = C_k*a_3*t73173*t73166*t73167*t73177*3.0;
                double t73205 = C_k*a_4*t73171*t73173*t73166*t73167*t73178*4.0;
                double t73206 = C_k*a_5*t73174*t73166*t73167*t73179*5.0;
                double t73207 = C_k*a_6*t73171*t73180*t73174*t73166*t73167*6.0;
                double t73208 = C_k*a_7*t73181*t73173*t73174*t73166*t73167*7.0;
                double t73209 = C_k*a_8*t73171*t73173*t73182*t73174*t73166*t73167*8.0;
                double t73210 = C_k*a_9*t73183*t73166*t73175*t73167*9.0;
                double t73211 = t73200+t73201+t73210+t73202+t73203+t73204+t73205+t73206+t73207+t73208+t73209-C_k* \
                   a_1*t73171*t73172*t73166*t73167-C_k*a_2*t73173*t73166*t73167*t73177*2.0-C_k*a_4*t73174*t73166*t73167* \
                   t73179*4.0-C_k*a_8*t73183*t73166*t73175*t73167*8.0-C_k*a_10*t73173*t73166*t73175*t73167*t73176*1.0E1- \
                   C_k*a_3*t73171*t73173*t73166*t73167*t73178*3.0-C_k*a_5*t73171*t73180*t73174*t73166*t73167*5.0-C_k* \
                   a_6*t73181*t73173*t73174*t73166*t73167*6.0-C_k*a_9*t73171*t73166*t73175*t73184*t73167*9.0-C_k*a_11* \
                   t73171*t73173*t73166*t73175*t73167*t73198*1.1E1-C_k*a_7*t73171*t73173*t73182*t73174*t73166*t73167* \
                   7.0;
                double t73212 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73213 = c*t73212;
                double t73214 = sqrt(t73213);
                double t73215 = pow(t73213,3.0/2.0);
                double t73216 = c*c;
                double t73217 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73218 = 1.0/c0p;
                double t73219 = b1p*t73214;
                double t73220 = b3p*t73215;
                double t73221 = b4p*t73216*t73217;
                double t73222 = b2p*c*t73212;
                double t73223 = t73220+t73221+t73222+t73219;
                double t73224 = 1.0/t73223;
                double t73225 = t73224*t73218*(1.0/2.0);
                double t73226 = t73225+1.0;
                double t73227 = log(t73226);
                double t73228 = a1p*c*t73212;
                double t73229 = t73228+1.0;
                double t73230 = tau_b[index]-1.0/1.0E20;
                double t73231 = tau_b[index]*2.0;
                double t73232 = 1.0/rho_b[index];
                double t73263 = gamma_bb[index]*t73232*(1.0/4.0);
                double t73233 = t73231-t73263;
                double t73234 = gamma_bb[index]*gamma_bb[index];
                double t73235 = gcaa*gcaa;
                double t73236 = t73234*t73234;
                double t73237 = t73235*t73235;
                double t73238 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73239 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73240 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73241 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t73242 = pow(2.0,1.0/3.0);
                double t73243 = t73242*2.0;
                double t73244 = t73243-2.0;
                double t73245 = two_13*2.0;
                double t73246 = t73245-2.0;
                double t73247 = 1.0/t73246;
                double t73248 = 1.0/c0f;
                double t73249 = b1f*t73214;
                double t73250 = b3f*t73215;
                double t73251 = b4f*t73216*t73217;
                double t73252 = b2f*c*t73212;
                double t73253 = t73250+t73251+t73252+t73249;
                double t73254 = 1.0/t73253;
                double t73255 = t73254*t73248*(1.0/2.0);
                double t73256 = t73255+1.0;
                double t73257 = log(t73256);
                double t73258 = a1f*c*t73212;
                double t73259 = t73258+1.0;
                double t73260 = c0f*t73257*t73259*2.0;
                double t73261 = c0p*t73227*t73229*2.0;
                double t73262 = ( (t73230 > 0.0) ?  1.0 : 0.0 ) ;
                double t73293 = t73233*t73167*(1.0/2.0);
                double t73264 = -t73293+t73168;
                double t73265 = t73262*t73264;
                double t73266 = 0.0 ;
                double t73267 = t73233*t73168*(1.0/2.0);
                double t73268 = t73267-1.0;
                double t73269 = t73266*t73268;
                double t73270 = t73265+t73269;
                double t73271 = gamma_bb[index]*gcaa*t73239*4.0;
                double t73272 = gamma_bb[index]*gcaa*t73240*t73234*t73235*4.0;
                double t73273 = t73241*t73234*t73235*6.0;
                double t73274 = t73236*t73237*t73238;
                double t73275 = t73271+t73272+t73273+t73274+1.0;
                double t73276 = 1.0/t73275;
                double t73277 = gamma_bb[index]*gcaa*t73239;
                double t73278 = t73277+1.0;
                double t73279 = 1.0/t73278;
                double t73280 = gamma_bb[index]*gcaa*t73239*3.0;
                double t73281 = gamma_bb[index]*gcaa*t73240*t73234*t73235;
                double t73282 = t73241*t73234*t73235*3.0;
                double t73283 = t73280+t73281+t73282+1.0;
                double t73284 = 1.0/t73283;
                double t73285 = gamma_bb[index]*gcaa*t73239*2.0;
                double t73286 = t73241*t73234*t73235;
                double t73287 = t73285+t73286+1.0;
                double t73288 = 1.0/t73287;
                double t73289 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t73290 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t73291 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t73292 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t73294 = 1.0/pow(rho_b[index],4.0/3.0);
                double t73295 = 1.0/pow(rho_b[index],5.0/3.0);
                double t73296 = 1.0/sqrt(t73213);
                double t73297 = 1.0/t73226;
                double t73298 = 1.0/(t73223*t73223);
                double t73299 = b4p*t73216*t73295*(2.0/3.0);
                double t73300 = b2p*c*t73294*(1.0/3.0);
                double t73301 = b1p*c*t73294*t73296*(1.0/6.0);
                double t73302 = b3p*c*t73214*t73294*(1.0/2.0);
                double t73303 = t73300+t73301+t73302+t73299;
                double t73304 = t73303*t73229*t73297*t73298;
                double t73305 = ccaa4*t73236*t73237*t73238*t73276;
                double t73306 = ccaa1*gamma_bb[index]*gcaa*t73239*t73279;
                double t73307 = ccaa3*gamma_bb[index]*gcaa*t73240*t73234*t73235*t73284;
                double t73308 = ccaa2*t73241*t73234*t73235*t73288;
                double t73309 = ccaa0+t73305+t73306+t73307+t73308;
                double t73310 = t73260-t73261;
                double t73311 = t73310*t73244*t73247;
                double t73312 = t73311+t73261;
                v_rho_b_tau_b_[index] = (X-1.0)*(t73211*t73193+rho_b[index]*t73193*(C_k*a_1*t73167*t73197*t73199* \
                   (5.0/3.0)-a_1*t73172*t73194*t73195*t73196*(1.0E1/3.0)+a_2*t73172*t73194*t73195*t73196*(1.0E1/3.0)+ \
                   a_1*t73171*t73194*t73177*t73195*t73196*(1.0E1/3.0)+a_10*t73175*t73184*t73194*t73195*t73196*1.5E2-a_2* \
                   t73171*t73194*t73177*t73195*t73196*(4.0E1/3.0)+a_2*t73173*t73194*t73195*t73178*t73196*1.0E1+a_3*t73171* \
                   t73194*t73177*t73195*t73196*1.0E1-a_3*t73173*t73194*t73195*t73178*t73196*3.0E1+a_4*t73180*t73174*t73194* \
                   t73195*t73196*(1.0E2/3.0)+a_4*t73173*t73194*t73195*t73178*t73196*2.0E1-a_5*t73180*t73174*t73194*t73195* \
                   t73196*(2.5E2/3.0)+a_6*t73180*t73174*t73194*t73195*t73196*5.0E1+a_8*t73175*t73184*t73194*t73195*t73196* \
                   1.2E2-a_9*t73175*t73184*t73194*t73195*t73196*2.7E2-C_k*a_1*t73171*t73172*t73167*t73199*(5.0/3.0)+C_k* \
                   a_2*t73171*t73172*t73167*t73199*(1.0E1/3.0)-C_k*a_2*t73173*t73167*t73177*t73199*(1.0E1/3.0)+C_k*a_3* \
                   t73173*t73167*t73177*t73199*5.0-C_k*a_4*t73174*t73167*t73179*t73199*(2.0E1/3.0)+C_k*a_5*t73174*t73167* \
                   t73179*t73199*(2.5E1/3.0)-C_k*a_8*t73183*t73175*t73167*t73199*(4.0E1/3.0)+C_k*a_9*t73183*t73175*t73167* \
                   t73199*1.5E1+C_k*a_10*t73171*t73175*t73184*t73167*t73199*(5.0E1/3.0)-C_k*a_10*t73173*t73175*t73167* \
                   t73176*t73199*(5.0E1/3.0)+C_k*a_11*t73173*t73175*t73167*t73176*t73199*(5.5E1/3.0)-C_k*a_3*t73171*t73173* \
                   t73167*t73178*t73199*5.0+C_k*a_4*t73171*t73173*t73167*t73178*t73199*(2.0E1/3.0)-C_k*a_5*t73171*t73180* \
                   t73174*t73167*t73199*(2.5E1/3.0)+C_k*a_6*t73171*t73180*t73174*t73167*t73199*1.0E1-C_k*a_6*t73181*t73173* \
                   t73174*t73167*t73199*1.0E1+C_k*a_7*t73181*t73173*t73174*t73167*t73199*(3.5E1/3.0)-C_k*a_9*t73171*t73175* \
                   t73184*t73167*t73199*1.5E1-a_10*t73171*t73175*t73176*t73194*t73195*t73196*(1.0E3/3.0)+a_11*t73171* \
                   t73175*t73176*t73194*t73195*t73196*(5.5E2/3.0)+a_10*t73173*t73175*t73194*t73195*t73196*t73198*(5.5E2/ \
                   3.0)-a_11*t73173*t73175*t73194*t73195*t73196*t73198*(1.21E3/3.0)+a_3*t73171*t73173*t73194*t73195*t73196* \
                   t73179*2.0E1-a_4*t73171*t73173*t73194*t73195*t73196*t73179*(1.6E2/3.0)+a_5*t73171*t73181*t73174*t73194* \
                   t73195*t73196*5.0E1+a_5*t73171*t73173*t73194*t73195*t73196*t73179*(1.0E2/3.0)-a_6*t73171*t73181*t73174* \
                   t73194*t73195*t73196*1.2E2+a_6*t73173*t73182*t73174*t73194*t73195*t73196*7.0E1+a_7*t73171*t73181*t73174* \
                   t73194*t73195*t73196*7.0E1-a_7*t73173*t73182*t73174*t73194*t73195*t73196*(4.9E2/3.0)+a_8*t73173*t73182* \
                   t73174*t73194*t73195*t73196*(2.8E2/3.0)+a_9*t73171*t73175*t73176*t73194*t73195*t73196*1.5E2+a_11*1.0/ \
                   pow(t73170,1.3E1)*t73171*t73173*t73175*t73194*t73195*t73196*2.2E2-C_k*a_11*t73171*t73173*t73175*t73167* \
                   t73198*t73199*(5.5E1/3.0)-C_k*a_7*t73171*t73173*t73182*t73174*t73167*t73199*(3.5E1/3.0)+C_k*a_8*t73171* \
                   t73173*t73182*t73174*t73167*t73199*(4.0E1/3.0)+a_7*t73171*t73173*t73174*t73183*t73194*t73195*t73196* \
                   (2.8E2/3.0)-a_8*t73171*t73173*t73174*t73183*t73194*t73195*t73196*(6.4E2/3.0)+a_9*t73171*t73173*t73174* \
                   t73183*t73194*t73195*t73196*1.2E2)-kp*rho_b[index]*t73211*1.0/(t73191*t73191)*(gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t73185*t73186*t73189*(1.0/2.0)+gamma_bb[index]*mu_*t73185* \
                   t73186*t73187*1.0/pow(t73188,5.0/3.0)*(1.0/3.0)))-t73270*t73309*(t73261+t73244*t73247*(t73260-c0p* \
                   t73227*t73229*2.0))+rho_b[index]*t73270*t73309*(-t73304+t73244*t73247*(t73304-(1.0/(t73253*t73253) \
                   *t73259*(b2f*c*t73294*(1.0/3.0)+b4f*t73216*t73295*(2.0/3.0)+b1f*c*t73294*t73296*(1.0/6.0)+b3f*c*t73214* \
                   t73294*(1.0/2.0)))/t73256+a1f*c*c0f*t73257*t73294*(2.0/3.0)-a1p*c*c0p*t73227*t73294*(2.0/3.0))+a1p* \
                   c*c0p*t73227*t73294*(2.0/3.0))+rho_b[index]*t73312*t73270*(ccaa1*gamma_bb[index]*gcaa*t73290*t73279* \
                   (8.0/3.0)+ccaa4*t73236*t73237*t73292*t73276*(3.2E1/3.0)+ccaa2*t73234*t73235*t73288*t73289*(1.6E1/3.0) \
                   -ccaa1*t73234*t73235*1.0/(t73278*t73278)*t73289*(8.0/3.0)-ccaa2*t73241*t73234*t73235*1.0/(t73287*t73287) \
                   *(gamma_bb[index]*gcaa*t73290*(1.6E1/3.0)+t73234*t73235*t73289*(1.6E1/3.0))-ccaa4*t73236*t73237*t73238* \
                   1.0/(t73275*t73275)*(gamma_bb[index]*gcaa*t73290*(3.2E1/3.0)+t73236*t73237*t73292*(3.2E1/3.0)+t73234* \
                   t73235*t73289*3.2E1+gamma_bb[index]*gcaa*t73234*t73235*t73291*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t73234* \
                   t73235*t73291*t73284*8.0-ccaa3*gamma_bb[index]*gcaa*t73240*t73234*t73235*1.0/(t73283*t73283)*(gamma_bb[index]* \
                   gcaa*t73290*8.0+t73234*t73235*t73289*1.6E1+gamma_bb[index]*gcaa*t73234*t73235*t73291*8.0))+gamma_bb[index]* \
                   t73312*t73232*t73262*t73309*t73167*(1.0/8.0)-gamma_bb[index]*t73312*t73232*t73309*t73266*t73168*(1.0/ \
                   8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74447 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74448 = c*t74447;
                double t74449 = sqrt(t74448);
                double t74450 = pow(t74448,3.0/2.0);
                double t74451 = c*c;
                double t74452 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74453 = 1.0/c0p;
                double t74454 = b1p*t74449;
                double t74455 = b3p*t74450;
                double t74456 = b4p*t74451*t74452;
                double t74457 = b2p*c*t74447;
                double t74458 = t74454+t74455+t74456+t74457;
                double t74459 = 1.0/t74458;
                double t74460 = t74453*t74459*(1.0/2.0);
                double t74461 = t74460+1.0;
                double t74462 = log(t74461);
                double t74463 = a1p*c*t74447;
                double t74464 = t74463+1.0;
                double t74465 = tau_b[index]-1.0/1.0E20;
                double t74466 = 1.0/tau_b[index];
                double t74467 = tau_b[index]*2.0;
                double t74468 = 1.0/rho_b[index];
                double t74517 = gamma_bb[index]*t74468*(1.0/4.0);
                double t74469 = -t74517+t74467;
                double t74470 = gamma_bb[index]*gamma_bb[index];
                double t74471 = gcaa*gcaa;
                double t74472 = t74470*t74470;
                double t74473 = t74471*t74471;
                double t74474 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74475 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74476 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74477 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74478 = 1.0/(tau_b[index]*tau_b[index]);
                double t74479 = pow(rho_b[index],5.0/3.0);
                double t74480 = C_k*t74466*t74479;
                double t74481 = t74480+1.0;
                double t74482 = t74480-1.0;
                double t74483 = 1.0/(t74481*t74481);
                double t74484 = t74482*t74482;
                double t74485 = t74484*t74484;
                double t74486 = t74485*t74485;
                double t74487 = 1.0/pow(t74481,1.1E1);
                double t74488 = 1.0/(t74481*t74481*t74481);
                double t74489 = 1.0/(t74481*t74481*t74481*t74481);
                double t74490 = 1.0/(t74481*t74481*t74481*t74481*t74481);
                double t74491 = 1.0/(t74481*t74481*t74481*t74481*t74481*t74481);
                double t74492 = 1.0/(t74481*t74481*t74481*t74481*t74481*t74481*t74481);
                double t74493 = 1.0/(t74481*t74481*t74481*t74481*t74481*t74481*t74481*t74481);
                double t74494 = 1.0/(t74481*t74481*t74481*t74481*t74481*t74481*t74481*t74481*t74481);
                double t74495 = 1.0/pow(t74481,1.0E1);
                double t74496 = pow(2.0,1.0/3.0);
                double t74497 = t74496*2.0;
                double t74498 = t74497-2.0;
                double t74499 = two_13*2.0;
                double t74500 = t74499-2.0;
                double t74501 = 1.0/t74500;
                double t74502 = 1.0/c0f;
                double t74503 = b1f*t74449;
                double t74504 = b3f*t74450;
                double t74505 = b4f*t74451*t74452;
                double t74506 = b2f*c*t74447;
                double t74507 = t74503+t74504+t74505+t74506;
                double t74508 = 1.0/t74507;
                double t74509 = t74502*t74508*(1.0/2.0);
                double t74510 = t74509+1.0;
                double t74511 = log(t74510);
                double t74512 = a1f*c*t74447;
                double t74513 = t74512+1.0;
                double t74514 = c0f*t74511*t74513*2.0;
                double t74515 = c0p*t74462*t74464*2.0;
                double t74516 = ( (t74465 > 0.0) ?  1.0 : 0.0 ) ;
                double t74547 = t74469*t74478*(1.0/2.0);
                double t74518 = t74466-t74547;
                double t74519 = t74516*t74518;
                double t74520 = 0.0 ;
                double t74521 = t74466*t74469*(1.0/2.0);
                double t74522 = t74521-1.0;
                double t74523 = t74520*t74522;
                double t74524 = t74523+t74519;
                double t74525 = gamma_bb[index]*gcaa*t74475*4.0;
                double t74526 = gamma_bb[index]*gcaa*t74470*t74471*t74476*4.0;
                double t74527 = t74470*t74471*t74477*6.0;
                double t74528 = t74472*t74473*t74474;
                double t74529 = t74525+t74526+t74527+t74528+1.0;
                double t74530 = 1.0/t74529;
                double t74531 = gamma_bb[index]*gcaa*t74475;
                double t74532 = t74531+1.0;
                double t74533 = 1.0/t74532;
                double t74534 = gamma_bb[index]*gcaa*t74475*3.0;
                double t74535 = gamma_bb[index]*gcaa*t74470*t74471*t74476;
                double t74536 = t74470*t74471*t74477*3.0;
                double t74537 = t74534+t74535+t74536+1.0;
                double t74538 = 1.0/t74537;
                double t74539 = gamma_bb[index]*gcaa*t74475*2.0;
                double t74540 = t74470*t74471*t74477;
                double t74541 = t74540+t74539+1.0;
                double t74542 = 1.0/t74541;
                double t74543 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t74544 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t74545 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t74546 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t74548 = 1.0/pow(rho_b[index],4.0/3.0);
                double t74549 = 1.0/pow(rho_b[index],5.0/3.0);
                double t74550 = 1.0/sqrt(t74448);
                double t74551 = 1.0/t74461;
                double t74552 = 1.0/(t74458*t74458);
                double t74553 = b4p*t74451*t74549*(2.0/3.0);
                double t74554 = b2p*c*t74548*(1.0/3.0);
                double t74555 = b1p*c*t74550*t74548*(1.0/6.0);
                double t74556 = b3p*c*t74449*t74548*(1.0/2.0);
                double t74557 = t74553+t74554+t74555+t74556;
                double t74558 = t74551*t74552*t74464*t74557;
                double t74559 = ccaa4*t74530*t74472*t74473*t74474;
                double t74560 = ccaa1*gamma_bb[index]*gcaa*t74533*t74475;
                double t74561 = ccaa3*gamma_bb[index]*gcaa*t74470*t74471*t74538*t74476;
                double t74562 = ccaa2*t74470*t74542*t74471*t74477;
                double t74563 = ccaa0+t74560+t74561+t74562+t74559;
                double t74564 = X-1.0;
                double t74565 = 1.0/(k*k);
                double t74566 = 1.0/kp;
                double t74567 = 1.0/(rho_b[index]*rho_b[index]);
                double t74568 = rho_b[index]*2.0;
                double t74569 = 1.0/pow(t74568,2.0/3.0);
                double t74570 = gamma_bb[index]*mu_*t74565*t74566*t74567*t74569*(1.0/4.0);
                double t74571 = t74570+1.0;
                double t74572 = 1.0/t74571;
                double t74573 = kp-kp*t74572+1.0;
                double t74574 = C_k*C_k;
                double t74575 = pow(rho_b[index],7.0/3.0);
                double t74576 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t74577 = 1.0/t74481;
                double t74578 = 1.0/pow(t74481,1.2E1);
                double t74579 = pow(rho_b[index],2.0/3.0);
                double t74580 = t74514-t74515;
                double t74581 = t74501*t74580*t74498;
                double t74582 = t74515+t74581;
                double t74583 = C_k*a_1*t74478*t74577*t74479;
                double t74584 = C_k*a_2*t74482*t74483*t74478*t74479*2.0;
                double t74585 = C_k*a_10*t74482*t74486*t74495*t74478*t74479*1.0E1;
                double t74586 = C_k*a_11*t74484*t74486*t74478*t74487*t74479*1.1E1;
                double t74587 = C_k*a_3*t74484*t74478*t74479*t74488*3.0;
                double t74588 = C_k*a_4*t74482*t74484*t74478*t74479*t74489*4.0;
                double t74589 = C_k*a_5*t74490*t74485*t74478*t74479*5.0;
                double t74590 = C_k*a_6*t74482*t74491*t74485*t74478*t74479*6.0;
                double t74591 = C_k*a_7*t74492*t74484*t74485*t74478*t74479*7.0;
                double t74592 = C_k*a_8*t74482*t74484*t74493*t74485*t74478*t74479*8.0;
                double t74593 = C_k*a_9*t74494*t74486*t74478*t74479*9.0;
                double t74594 = t74590+t74591+t74583+t74592+t74584+t74593+t74585+t74586+t74587+t74588+t74589-C_k* \
                   a_1*t74482*t74483*t74478*t74479-C_k*a_2*t74484*t74478*t74479*t74488*2.0-C_k*a_4*t74490*t74485*t74478* \
                   t74479*4.0-C_k*a_8*t74494*t74486*t74478*t74479*8.0-C_k*a_10*t74484*t74486*t74478*t74487*t74479*1.0E1- \
                   C_k*a_3*t74482*t74484*t74478*t74479*t74489*3.0-C_k*a_5*t74482*t74491*t74485*t74478*t74479*5.0-C_k* \
                   a_6*t74492*t74484*t74485*t74478*t74479*6.0-C_k*a_9*t74482*t74486*t74495*t74478*t74479*9.0-C_k*a_11* \
                   t74482*t74484*t74486*t74478*t74479*t74578*1.1E1-C_k*a_7*t74482*t74484*t74493*t74485*t74478*t74479* \
                   7.0;
                v_rho_b_tau_b_[index] = t74564*t74573*t74594-t74524*t74563*(t74515+t74501*t74498*(t74514-c0p*t74462* \
                   t74464*2.0))+rho_b[index]*t74564*t74573*(C_k*a_1*t74478*t74577*t74579*(5.0/3.0)-a_1*t74483*t74574* \
                   t74575*t74576*(1.0E1/3.0)+a_2*t74483*t74574*t74575*t74576*(1.0E1/3.0)+a_1*t74482*t74574*t74575*t74576* \
                   t74488*(1.0E1/3.0)+a_10*t74574*t74575*t74486*t74495*t74576*1.5E2-a_2*t74482*t74574*t74575*t74576*t74488* \
                   (4.0E1/3.0)+a_2*t74484*t74574*t74575*t74576*t74489*1.0E1+a_3*t74482*t74574*t74575*t74576*t74488*1.0E1- \
                   a_3*t74484*t74574*t74575*t74576*t74489*3.0E1+a_4*t74491*t74574*t74485*t74575*t74576*(1.0E2/3.0)+a_4* \
                   t74484*t74574*t74575*t74576*t74489*2.0E1-a_5*t74491*t74574*t74485*t74575*t74576*(2.5E2/3.0)+a_6*t74491* \
                   t74574*t74485*t74575*t74576*5.0E1+a_8*t74574*t74575*t74486*t74495*t74576*1.2E2-a_9*t74574*t74575*t74486* \
                   t74495*t74576*2.7E2-C_k*a_1*t74482*t74483*t74478*t74579*(5.0/3.0)+C_k*a_2*t74482*t74483*t74478*t74579* \
                   (1.0E1/3.0)-C_k*a_2*t74484*t74478*t74488*t74579*(1.0E1/3.0)+C_k*a_3*t74484*t74478*t74488*t74579*5.0- \
                   C_k*a_4*t74490*t74485*t74478*t74579*(2.0E1/3.0)+C_k*a_5*t74490*t74485*t74478*t74579*(2.5E1/3.0)-C_k* \
                   a_8*t74494*t74486*t74478*t74579*(4.0E1/3.0)+C_k*a_9*t74494*t74486*t74478*t74579*1.5E1+C_k*a_10*t74482* \
                   t74486*t74495*t74478*t74579*(5.0E1/3.0)-C_k*a_10*t74484*t74486*t74478*t74487*t74579*(5.0E1/3.0)+C_k* \
                   a_11*t74484*t74486*t74478*t74487*t74579*(5.5E1/3.0)-C_k*a_3*t74482*t74484*t74478*t74489*t74579*5.0+ \
                   C_k*a_4*t74482*t74484*t74478*t74489*t74579*(2.0E1/3.0)-C_k*a_5*t74482*t74491*t74485*t74478*t74579* \
                   (2.5E1/3.0)+C_k*a_6*t74482*t74491*t74485*t74478*t74579*1.0E1-C_k*a_6*t74492*t74484*t74485*t74478*t74579* \
                   1.0E1+C_k*a_7*t74492*t74484*t74485*t74478*t74579*(3.5E1/3.0)-C_k*a_9*t74482*t74486*t74495*t74478*t74579* \
                   1.5E1-a_10*t74482*t74574*t74575*t74486*t74576*t74487*(1.0E3/3.0)+a_11*t74482*t74574*t74575*t74486* \
                   t74576*t74487*(5.5E2/3.0)+a_10*t74484*t74574*t74575*t74486*t74576*t74578*(5.5E2/3.0)-a_11*t74484*t74574* \
                   t74575*t74486*t74576*t74578*(1.21E3/3.0)+a_3*t74490*t74482*t74484*t74574*t74575*t74576*2.0E1-a_4*t74490* \
                   t74482*t74484*t74574*t74575*t74576*(1.6E2/3.0)+a_5*t74490*t74482*t74484*t74574*t74575*t74576*(1.0E2/ \
                   3.0)+a_5*t74482*t74492*t74574*t74485*t74575*t74576*5.0E1-a_6*t74482*t74492*t74574*t74485*t74575*t74576* \
                   1.2E2+a_6*t74484*t74493*t74574*t74485*t74575*t74576*7.0E1+a_7*t74482*t74492*t74574*t74485*t74575*t74576* \
                   7.0E1-a_7*t74484*t74493*t74574*t74485*t74575*t74576*(4.9E2/3.0)+a_8*t74484*t74493*t74574*t74485*t74575* \
                   t74576*(2.8E2/3.0)+a_9*t74482*t74574*t74575*t74486*t74576*t74487*1.5E2+a_11*1.0/pow(t74481,1.3E1)* \
                   t74482*t74484*t74574*t74575*t74486*t74576*2.2E2-C_k*a_11*t74482*t74484*t74486*t74478*t74578*t74579* \
                   (5.5E1/3.0)-C_k*a_7*t74482*t74484*t74493*t74485*t74478*t74579*(3.5E1/3.0)+C_k*a_8*t74482*t74484*t74493* \
                   t74485*t74478*t74579*(4.0E1/3.0)+a_7*t74482*t74484*t74574*t74485*t74494*t74575*t74576*(2.8E2/3.0)- \
                   a_8*t74482*t74484*t74574*t74485*t74494*t74575*t74576*(6.4E2/3.0)+a_9*t74482*t74484*t74574*t74485*t74494* \
                   t74575*t74576*1.2E2)+rho_b[index]*t74524*t74563*(-t74558+t74501*t74498*(t74558-(t74513*1.0/(t74507* \
                   t74507)*(b2f*c*t74548*(1.0/3.0)+b4f*t74451*t74549*(2.0/3.0)+b1f*c*t74550*t74548*(1.0/6.0)+b3f*c*t74449* \
                   t74548*(1.0/2.0)))/t74510+a1f*c*c0f*t74511*t74548*(2.0/3.0)-a1p*c*c0p*t74462*t74548*(2.0/3.0))+a1p* \
                   c*c0p*t74462*t74548*(2.0/3.0))+rho_b[index]*t74524*t74582*(ccaa1*gamma_bb[index]*gcaa*t74533*t74544* \
                   (8.0/3.0)+ccaa2*t74470*t74542*t74471*t74543*(1.6E1/3.0)+ccaa4*t74530*t74472*t74473*t74546*(3.2E1/3.0) \
                   -ccaa1*1.0/(t74532*t74532)*t74470*t74471*t74543*(8.0/3.0)-ccaa2*1.0/(t74541*t74541)*t74470*t74471* \
                   t74477*(gamma_bb[index]*gcaa*t74544*(1.6E1/3.0)+t74470*t74471*t74543*(1.6E1/3.0))-ccaa4*t74472*t74473* \
                   t74474*1.0/(t74529*t74529)*(gamma_bb[index]*gcaa*t74544*(3.2E1/3.0)+t74470*t74471*t74543*3.2E1+t74472* \
                   t74473*t74546*(3.2E1/3.0)+gamma_bb[index]*gcaa*t74470*t74471*t74545*3.2E1)+ccaa3*gamma_bb[index]*gcaa* \
                   t74470*t74471*t74545*t74538*8.0-ccaa3*gamma_bb[index]*gcaa*t74470*t74471*1.0/(t74537*t74537)*t74476* \
                   (gamma_bb[index]*gcaa*t74544*8.0+t74470*t74471*t74543*1.6E1+gamma_bb[index]*gcaa*t74470*t74471*t74545* \
                   8.0))-gamma_bb[index]*t74520*t74563*t74582*t74466*t74468*(1.0/8.0)+gamma_bb[index]*t74516*t74563*t74582* \
                   t74468*t74478*(1.0/8.0)-kp*rho_b[index]*1.0/(t74571*t74571)*t74564*t74594*(gamma_bb[index]*mu_*1.0/ \
                   (rho_b[index]*rho_b[index]*rho_b[index])*t74565*t74566*t74569*(1.0/2.0)+gamma_bb[index]*mu_*t74565* \
                   t74566*t74567*1.0/pow(t74568,5.0/3.0)*(1.0/3.0));
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t73314 = 1.0/pow(rho_a[index],1.0/3.0);
                double t73315 = c*t73314;
                double t73316 = sqrt(t73315);
                double t73317 = pow(t73315,3.0/2.0);
                double t73318 = c*c;
                double t73319 = 1.0/pow(rho_a[index],2.0/3.0);
                double t73320 = 1.0/c0p;
                double t73321 = b1p*t73316;
                double t73322 = b3p*t73317;
                double t73323 = b4p*t73318*t73319;
                double t73324 = b2p*c*t73314;
                double t73325 = t73321+t73322+t73323+t73324;
                double t73326 = 1.0/t73325;
                double t73327 = t73320*t73326*(1.0/2.0);
                double t73328 = t73327+1.0;
                double t73329 = log(t73328);
                double t73330 = a1p*c*t73314;
                double t73331 = t73330+1.0;
                double t73332 = 1.0/tau_a[index];
                double t73333 = tau_a[index]*2.0;
                double t73334 = 1.0/rho_a[index];
                double t73338 = gamma_aa[index]*t73334*(1.0/4.0);
                double t73335 = t73333-t73338;
                double t73336 = tau_a[index]-1.0/1.0E20;
                double t73337 = 1.0/(tau_a[index]*tau_a[index]);
                double t73339 = gamma_aa[index]*gamma_aa[index];
                double t73340 = gcaa*gcaa;
                double t73341 = t73339*t73339;
                double t73342 = t73340*t73340;
                double t73343 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t73344 = 1.0/pow(rho_a[index],8.0/3.0);
                double t73345 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t73346 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t73347 = C_k*C_k;
                double t73348 = pow(rho_a[index],1.0E1/3.0);
                double t73349 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t73350 = pow(rho_a[index],5.0/3.0);
                double t73351 = C_k*t73332*t73350;
                double t73352 = t73351+1.0;
                double t73353 = 1.0/(t73352*t73352);
                double t73354 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t73355 = t73351-1.0;
                double t73356 = t73355*t73355;
                double t73357 = t73356*t73356;
                double t73358 = t73357*t73357;
                double t73359 = 1.0/pow(t73352,1.1E1);
                double t73360 = 1.0/pow(t73352,1.2E1);
                double t73361 = 1.0/(t73352*t73352*t73352*t73352);
                double t73362 = 1.0/(t73352*t73352*t73352*t73352*t73352);
                double t73363 = 1.0/(t73352*t73352*t73352*t73352*t73352*t73352);
                double t73364 = 1.0/(t73352*t73352*t73352*t73352*t73352*t73352*t73352);
                double t73365 = 1.0/(t73352*t73352*t73352*t73352*t73352*t73352*t73352*t73352);
                double t73366 = 1.0/(t73352*t73352*t73352*t73352*t73352*t73352*t73352*t73352*t73352);
                double t73367 = 1.0/pow(t73352,1.0E1);
                double t73368 = 1.0/(t73352*t73352*t73352);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t73353*t73347*t73348* \
                   t73349*-2.0+a_2*t73353*t73347*t73348*t73349*2.0+(C_k*a_1*t73350*t73354*2.0)/t73352+a_1*t73355*t73347* \
                   t73348*t73349*t73368*2.0+a_10*t73347*t73348*t73349*t73358*t73367*9.0E1+a_2*t73361*t73347*t73356*t73348* \
                   t73349*6.0-a_2*t73355*t73347*t73348*t73349*t73368*8.0-a_3*t73361*t73347*t73356*t73348*t73349*1.8E1+ \
                   a_3*t73355*t73347*t73348*t73349*t73368*6.0+a_4*t73361*t73347*t73356*t73348*t73349*1.2E1+a_4*t73363* \
                   t73347*t73348*t73357*t73349*2.0E1-a_5*t73363*t73347*t73348*t73357*t73349*5.0E1+a_6*t73363*t73347*t73348* \
                   t73357*t73349*3.0E1+a_8*t73347*t73348*t73349*t73358*t73367*7.2E1-a_9*t73347*t73348*t73349*t73358*t73367* \
                   1.62E2-C_k*a_1*t73350*t73353*t73354*t73355*2.0+C_k*a_2*t73350*t73353*t73354*t73355*4.0-C_k*a_2*t73350* \
                   t73354*t73356*t73368*4.0+C_k*a_3*t73350*t73354*t73356*t73368*6.0-C_k*a_4*t73350*t73362*t73354*t73357* \
                   8.0+C_k*a_5*t73350*t73362*t73354*t73357*1.0E1-C_k*a_8*t73350*t73354*t73366*t73358*1.6E1+C_k*a_9*t73350* \
                   t73354*t73366*t73358*1.8E1+C_k*a_10*t73350*t73354*t73355*t73358*t73367*2.0E1-C_k*a_10*t73350*t73354* \
                   t73356*t73358*t73359*2.0E1+C_k*a_11*t73350*t73354*t73356*t73358*t73359*2.2E1-C_k*a_3*t73350*t73361* \
                   t73354*t73355*t73356*6.0+C_k*a_4*t73350*t73361*t73354*t73355*t73356*8.0-C_k*a_5*t73350*t73354*t73363* \
                   t73355*t73357*1.0E1+C_k*a_6*t73350*t73354*t73363*t73355*t73357*1.2E1-C_k*a_6*t73350*t73354*t73364* \
                   t73356*t73357*1.2E1+C_k*a_7*t73350*t73354*t73364*t73356*t73357*1.4E1-C_k*a_9*t73350*t73354*t73355* \
                   t73358*t73367*1.8E1+a_10*t73360*t73347*t73356*t73348*t73349*t73358*1.1E2-a_11*t73360*t73347*t73356* \
                   t73348*t73349*t73358*2.42E2-a_10*t73355*t73347*t73348*t73349*t73358*t73359*2.0E2+a_11*t73355*t73347* \
                   t73348*t73349*t73358*t73359*1.1E2+a_3*t73362*t73355*t73347*t73356*t73348*t73349*1.2E1-a_4*t73362*t73355* \
                   t73347*t73356*t73348*t73349*3.2E1+a_5*t73362*t73355*t73347*t73356*t73348*t73349*2.0E1+a_5*t73355*t73364* \
                   t73347*t73348*t73357*t73349*3.0E1-a_6*t73355*t73364*t73347*t73348*t73357*t73349*7.2E1+a_6*t73347*t73356* \
                   t73365*t73348*t73357*t73349*4.2E1+a_7*t73355*t73364*t73347*t73348*t73357*t73349*4.2E1-a_7*t73347*t73356* \
                   t73365*t73348*t73357*t73349*9.8E1+a_8*t73347*t73356*t73365*t73348*t73357*t73349*5.6E1+a_9*t73355*t73347* \
                   t73348*t73349*t73358*t73359*9.0E1+a_11*1.0/pow(t73352,1.3E1)*t73355*t73347*t73356*t73348*t73349*t73358* \
                   1.32E2-C_k*a_11*t73350*t73360*t73354*t73355*t73356*t73358*2.2E1-C_k*a_7*t73350*t73354*t73355*t73356* \
                   t73365*t73357*1.4E1+C_k*a_8*t73350*t73354*t73355*t73356*t73365*t73357*1.6E1+a_7*t73355*t73347*t73356* \
                   t73348*t73357*t73366*t73349*5.6E1-a_8*t73355*t73347*t73356*t73348*t73357*t73366*t73349*1.28E2+a_9* \
                   t73355*t73347*t73356*t73348*t73357*t73366*t73349*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t73316+b3f*t73317+b2f*c*t73314+b4f*t73318*t73319))+1.0)*(a1f*c*t73314+ \
                   1.0)*2.0-c0p*t73331*t73329*2.0))/(two_13*2.0-2.0)+c0p*t73331*t73329*2.0)*( 0.0 - ( (t73336 > 0.0)  \
                   ? 1.0*(t73337*2.0-t73335*t73354) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t73340*t73346*t73339)/(gamma_aa[index]* \
                   gcaa*t73344*2.0+t73340*t73346*t73339+1.0)+(ccaa1*gamma_aa[index]*gcaa*t73344)/(gamma_aa[index]*gcaa* \
                   t73344+1.0)+(ccaa4*t73341*t73342*t73343)/(gamma_aa[index]*gcaa*t73344*4.0+t73341*t73342*t73343+t73340* \
                   t73346*t73339*6.0+gamma_aa[index]*gcaa*t73340*t73345*t73339*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t73340* \
                   t73345*t73339)/(gamma_aa[index]*gcaa*t73344*3.0+t73340*t73346*t73339*3.0+gamma_aa[index]*gcaa*t73340* \
                   t73345*t73339+1.0));
            } else if (rho_a[index] > cutoff_) {
                double t75723 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75724 = c*t75723;
                double t75725 = sqrt(t75724);
                double t75726 = pow(t75724,3.0/2.0);
                double t75727 = c*c;
                double t75728 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75729 = 1.0/c0p;
                double t75730 = b1p*t75725;
                double t75731 = b3p*t75726;
                double t75732 = b4p*t75727*t75728;
                double t75733 = b2p*c*t75723;
                double t75734 = t75730+t75731+t75732+t75733;
                double t75735 = 1.0/t75734;
                double t75736 = t75735*t75729*(1.0/2.0);
                double t75737 = t75736+1.0;
                double t75738 = log(t75737);
                double t75739 = a1p*c*t75723;
                double t75740 = t75739+1.0;
                double t75741 = 1.0/tau_a[index];
                double t75742 = tau_a[index]*2.0;
                double t75743 = 1.0/rho_a[index];
                double t75747 = gamma_aa[index]*t75743*(1.0/4.0);
                double t75744 = t75742-t75747;
                double t75745 = tau_a[index]-1.0/1.0E20;
                double t75746 = 1.0/(tau_a[index]*tau_a[index]);
                double t75748 = gamma_aa[index]*gamma_aa[index];
                double t75749 = gcaa*gcaa;
                double t75750 = t75748*t75748;
                double t75751 = t75749*t75749;
                double t75752 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75753 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75754 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75755 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75756 = C_k*C_k;
                double t75757 = pow(rho_a[index],1.0E1/3.0);
                double t75758 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t75759 = pow(rho_a[index],5.0/3.0);
                double t75760 = C_k*t75741*t75759;
                double t75761 = t75760+1.0;
                double t75762 = 1.0/(t75761*t75761);
                double t75763 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t75764 = t75760-1.0;
                double t75765 = t75764*t75764;
                double t75766 = t75765*t75765;
                double t75767 = t75766*t75766;
                double t75768 = 1.0/pow(t75761,1.1E1);
                double t75769 = 1.0/pow(t75761,1.2E1);
                double t75770 = 1.0/(t75761*t75761*t75761*t75761);
                double t75771 = 1.0/(t75761*t75761*t75761*t75761*t75761);
                double t75772 = 1.0/(t75761*t75761*t75761*t75761*t75761*t75761);
                double t75773 = 1.0/(t75761*t75761*t75761*t75761*t75761*t75761*t75761);
                double t75774 = 1.0/(t75761*t75761*t75761*t75761*t75761*t75761*t75761*t75761);
                double t75775 = 1.0/(t75761*t75761*t75761*t75761*t75761*t75761*t75761*t75761*t75761);
                double t75776 = 1.0/pow(t75761,1.0E1);
                double t75777 = 1.0/(t75761*t75761*t75761);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t75762*t75756*t75757* \
                   t75758*-2.0+a_2*t75762*t75756*t75757*t75758*2.0+(C_k*a_1*t75763*t75759*2.0)/t75761+a_1*t75764*t75756* \
                   t75757*t75758*t75777*2.0+a_10*t75756*t75757*t75758*t75767*t75776*9.0E1+a_2*t75770*t75756*t75765*t75757* \
                   t75758*6.0-a_2*t75764*t75756*t75757*t75758*t75777*8.0-a_3*t75770*t75756*t75765*t75757*t75758*1.8E1+ \
                   a_3*t75764*t75756*t75757*t75758*t75777*6.0+a_4*t75770*t75756*t75765*t75757*t75758*1.2E1+a_4*t75772* \
                   t75756*t75757*t75766*t75758*2.0E1-a_5*t75772*t75756*t75757*t75766*t75758*5.0E1+a_6*t75772*t75756*t75757* \
                   t75766*t75758*3.0E1+a_8*t75756*t75757*t75758*t75767*t75776*7.2E1-a_9*t75756*t75757*t75758*t75767*t75776* \
                   1.62E2-C_k*a_1*t75762*t75763*t75764*t75759*2.0+C_k*a_2*t75762*t75763*t75764*t75759*4.0-C_k*a_2*t75763* \
                   t75765*t75759*t75777*4.0+C_k*a_3*t75763*t75765*t75759*t75777*6.0-C_k*a_4*t75771*t75763*t75766*t75759* \
                   8.0+C_k*a_5*t75771*t75763*t75766*t75759*1.0E1-C_k*a_8*t75763*t75775*t75767*t75759*1.6E1+C_k*a_9*t75763* \
                   t75775*t75767*t75759*1.8E1+C_k*a_10*t75763*t75764*t75767*t75776*t75759*2.0E1-C_k*a_10*t75763*t75765* \
                   t75767*t75759*t75768*2.0E1+C_k*a_11*t75763*t75765*t75767*t75759*t75768*2.2E1-C_k*a_3*t75770*t75763* \
                   t75764*t75765*t75759*6.0+C_k*a_4*t75770*t75763*t75764*t75765*t75759*8.0-C_k*a_5*t75763*t75772*t75764* \
                   t75766*t75759*1.0E1+C_k*a_6*t75763*t75772*t75764*t75766*t75759*1.2E1-C_k*a_6*t75763*t75773*t75765* \
                   t75766*t75759*1.2E1+C_k*a_7*t75763*t75773*t75765*t75766*t75759*1.4E1-C_k*a_9*t75763*t75764*t75767* \
                   t75776*t75759*1.8E1-a_10*t75764*t75756*t75757*t75758*t75767*t75768*2.0E2+a_11*t75764*t75756*t75757* \
                   t75758*t75767*t75768*1.1E2+a_10*t75756*t75765*t75757*t75758*t75767*t75769*1.1E2-a_11*t75756*t75765* \
                   t75757*t75758*t75767*t75769*2.42E2+a_3*t75771*t75764*t75756*t75765*t75757*t75758*1.2E1-a_4*t75771* \
                   t75764*t75756*t75765*t75757*t75758*3.2E1+a_5*t75771*t75764*t75756*t75765*t75757*t75758*2.0E1+a_5*t75764* \
                   t75773*t75756*t75757*t75766*t75758*3.0E1-a_6*t75764*t75773*t75756*t75757*t75766*t75758*7.2E1+a_6*t75756* \
                   t75765*t75774*t75757*t75766*t75758*4.2E1+a_7*t75764*t75773*t75756*t75757*t75766*t75758*4.2E1-a_7*t75756* \
                   t75765*t75774*t75757*t75766*t75758*9.8E1+a_8*t75756*t75765*t75774*t75757*t75766*t75758*5.6E1+a_9*t75764* \
                   t75756*t75757*t75758*t75767*t75768*9.0E1+a_11*1.0/pow(t75761,1.3E1)*t75764*t75756*t75765*t75757*t75758* \
                   t75767*1.32E2-C_k*a_11*t75763*t75764*t75765*t75767*t75759*t75769*2.2E1-C_k*a_7*t75763*t75764*t75765* \
                   t75774*t75766*t75759*1.4E1+C_k*a_8*t75763*t75764*t75765*t75774*t75766*t75759*1.6E1+a_7*t75764*t75756* \
                   t75765*t75757*t75766*t75775*t75758*5.6E1-a_8*t75764*t75756*t75765*t75757*t75766*t75775*t75758*1.28E2+ \
                   a_9*t75764*t75756*t75765*t75757*t75766*t75775*t75758*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t75725+b3f*t75726+b2f*c*t75723+b4f*t75727*t75728))+1.0)*(a1f*c*t75723+ \
                   1.0)*2.0-c0p*t75740*t75738*2.0))/(two_13*2.0-2.0)+c0p*t75740*t75738*2.0)*( 0.0 - ( (t75745 > 0.0)  \
                   ? 1.0*(t75746*2.0-t75744*t75763) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t75755*t75748*t75749)/(gamma_aa[index]* \
                   gcaa*t75753*2.0+t75755*t75748*t75749+1.0)+(ccaa1*gamma_aa[index]*gcaa*t75753)/(gamma_aa[index]*gcaa* \
                   t75753+1.0)+(ccaa4*t75750*t75751*t75752)/(gamma_aa[index]*gcaa*t75753*4.0+t75750*t75751*t75752+t75755* \
                   t75748*t75749*6.0+gamma_aa[index]*gcaa*t75754*t75748*t75749*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t75754* \
                   t75748*t75749)/(gamma_aa[index]*gcaa*t75753*3.0+t75755*t75748*t75749*3.0+gamma_aa[index]*gcaa*t75754* \
                   t75748*t75749+1.0));
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t73371 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73372 = c*t73371;
                double t73373 = sqrt(t73372);
                double t73374 = pow(t73372,3.0/2.0);
                double t73375 = c*c;
                double t73376 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73377 = 1.0/c0p;
                double t73378 = b1p*t73373;
                double t73379 = b3p*t73374;
                double t73380 = b4p*t73375*t73376;
                double t73381 = b2p*c*t73371;
                double t73382 = t73380+t73381+t73378+t73379;
                double t73383 = 1.0/t73382;
                double t73384 = t73383*t73377*(1.0/2.0);
                double t73385 = t73384+1.0;
                double t73386 = log(t73385);
                double t73387 = a1p*c*t73371;
                double t73388 = t73387+1.0;
                double t73389 = 1.0/tau_b[index];
                double t73390 = tau_b[index]*2.0;
                double t73391 = 1.0/rho_b[index];
                double t73395 = gamma_bb[index]*t73391*(1.0/4.0);
                double t73392 = t73390-t73395;
                double t73393 = tau_b[index]-1.0/1.0E20;
                double t73394 = 1.0/(tau_b[index]*tau_b[index]);
                double t73396 = gamma_bb[index]*gamma_bb[index];
                double t73397 = gcaa*gcaa;
                double t73398 = t73396*t73396;
                double t73399 = t73397*t73397;
                double t73400 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73401 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73402 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73403 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t73404 = C_k*C_k;
                double t73405 = pow(rho_b[index],1.0E1/3.0);
                double t73406 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t73407 = pow(rho_b[index],5.0/3.0);
                double t73408 = C_k*t73407*t73389;
                double t73409 = t73408+1.0;
                double t73410 = 1.0/(t73409*t73409);
                double t73411 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t73412 = t73408-1.0;
                double t73413 = t73412*t73412;
                double t73414 = t73413*t73413;
                double t73415 = t73414*t73414;
                double t73416 = 1.0/pow(t73409,1.1E1);
                double t73417 = 1.0/pow(t73409,1.2E1);
                double t73418 = 1.0/(t73409*t73409*t73409*t73409);
                double t73419 = 1.0/(t73409*t73409*t73409*t73409*t73409);
                double t73420 = 1.0/(t73409*t73409*t73409*t73409*t73409*t73409);
                double t73421 = 1.0/(t73409*t73409*t73409*t73409*t73409*t73409*t73409);
                double t73422 = 1.0/(t73409*t73409*t73409*t73409*t73409*t73409*t73409*t73409);
                double t73423 = 1.0/(t73409*t73409*t73409*t73409*t73409*t73409*t73409*t73409*t73409);
                double t73424 = 1.0/pow(t73409,1.0E1);
                double t73425 = 1.0/(t73409*t73409*t73409);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t73410*t73404*t73405* \
                   t73406*-2.0+a_2*t73410*t73404*t73405*t73406*2.0+(C_k*a_1*t73411*t73407*2.0)/t73409+a_1*t73412*t73404* \
                   t73405*t73406*t73425*2.0+a_10*t73404*t73405*t73406*t73415*t73424*9.0E1-a_2*t73412*t73404*t73405*t73406* \
                   t73425*8.0+a_2*t73404*t73413*t73405*t73406*t73418*6.0+a_3*t73412*t73404*t73405*t73406*t73425*6.0-a_3* \
                   t73404*t73413*t73405*t73406*t73418*1.8E1+a_4*t73420*t73404*t73405*t73414*t73406*2.0E1+a_4*t73404*t73413* \
                   t73405*t73406*t73418*1.2E1-a_5*t73420*t73404*t73405*t73414*t73406*5.0E1+a_6*t73420*t73404*t73405*t73414* \
                   t73406*3.0E1+a_8*t73404*t73405*t73406*t73415*t73424*7.2E1-a_9*t73404*t73405*t73406*t73415*t73424*1.62E2- \
                   C_k*a_1*t73410*t73411*t73412*t73407*2.0+C_k*a_2*t73410*t73411*t73412*t73407*4.0-C_k*a_2*t73411*t73413* \
                   t73407*t73425*4.0+C_k*a_3*t73411*t73413*t73407*t73425*6.0-C_k*a_4*t73411*t73414*t73407*t73419*8.0+ \
                   C_k*a_5*t73411*t73414*t73407*t73419*1.0E1-C_k*a_8*t73411*t73423*t73415*t73407*1.6E1+C_k*a_9*t73411* \
                   t73423*t73415*t73407*1.8E1+C_k*a_10*t73411*t73412*t73415*t73424*t73407*2.0E1-C_k*a_10*t73411*t73413* \
                   t73415*t73407*t73416*2.0E1+C_k*a_11*t73411*t73413*t73415*t73407*t73416*2.2E1-C_k*a_3*t73411*t73412* \
                   t73413*t73407*t73418*6.0+C_k*a_4*t73411*t73412*t73413*t73407*t73418*8.0-C_k*a_5*t73411*t73420*t73412* \
                   t73414*t73407*1.0E1+C_k*a_6*t73411*t73420*t73412*t73414*t73407*1.2E1-C_k*a_6*t73411*t73421*t73413* \
                   t73414*t73407*1.2E1+C_k*a_7*t73411*t73421*t73413*t73414*t73407*1.4E1-C_k*a_9*t73411*t73412*t73415* \
                   t73424*t73407*1.8E1-a_10*t73412*t73404*t73405*t73406*t73415*t73416*2.0E2+a_11*t73412*t73404*t73405* \
                   t73406*t73415*t73416*1.1E2+a_10*t73404*t73413*t73405*t73406*t73415*t73417*1.1E2-a_11*t73404*t73413* \
                   t73405*t73406*t73415*t73417*2.42E2+a_3*t73412*t73404*t73413*t73405*t73406*t73419*1.2E1-a_4*t73412* \
                   t73404*t73413*t73405*t73406*t73419*3.2E1+a_5*t73412*t73421*t73404*t73405*t73414*t73406*3.0E1+a_5*t73412* \
                   t73404*t73413*t73405*t73406*t73419*2.0E1-a_6*t73412*t73421*t73404*t73405*t73414*t73406*7.2E1+a_6*t73404* \
                   t73413*t73422*t73405*t73414*t73406*4.2E1+a_7*t73412*t73421*t73404*t73405*t73414*t73406*4.2E1-a_7*t73404* \
                   t73413*t73422*t73405*t73414*t73406*9.8E1+a_8*t73404*t73413*t73422*t73405*t73414*t73406*5.6E1+a_9*t73412* \
                   t73404*t73405*t73406*t73415*t73416*9.0E1+a_11*t73412*t73404*t73413*t73405*t73406*t73415*1.0/pow(t73409,1.3E1) \
                   *1.32E2-C_k*a_11*t73411*t73412*t73413*t73415*t73407*t73417*2.2E1-C_k*a_7*t73411*t73412*t73413*t73422* \
                   t73414*t73407*1.4E1+C_k*a_8*t73411*t73412*t73413*t73422*t73414*t73407*1.6E1+a_7*t73412*t73404*t73413* \
                   t73405*t73414*t73423*t73406*5.6E1-a_8*t73412*t73404*t73413*t73405*t73414*t73423*t73406*1.28E2+a_9* \
                   t73412*t73404*t73413*t73405*t73414*t73423*t73406*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t73373+b3f*t73374+b2f*c*t73371+b4f*t73375*t73376))+1.0)*(a1f*c*t73371+ \
                   1.0)*2.0-c0p*t73386*t73388*2.0))/(two_13*2.0-2.0)+c0p*t73386*t73388*2.0)*( 0.0 - ( (t73393 > 0.0)  \
                   ? 1.0*(t73394*2.0-t73411*t73392) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t73403*t73396*t73397)/(gamma_bb[index]* \
                   gcaa*t73401*2.0+t73403*t73396*t73397+1.0)+(ccaa1*gamma_bb[index]*gcaa*t73401)/(gamma_bb[index]*gcaa* \
                   t73401+1.0)+(ccaa4*t73400*t73398*t73399)/(gamma_bb[index]*gcaa*t73401*4.0+t73403*t73396*t73397*6.0+ \
                   t73400*t73398*t73399+gamma_bb[index]*gcaa*t73402*t73396*t73397*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t73402*t73396*t73397)/(gamma_bb[index]*gcaa*t73401*3.0+t73403*t73396*t73397*3.0+gamma_bb[index]*gcaa* \
                   t73402*t73396*t73397+1.0));
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74598 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74599 = c*t74598;
                double t74600 = sqrt(t74599);
                double t74601 = pow(t74599,3.0/2.0);
                double t74602 = c*c;
                double t74603 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74604 = 1.0/c0p;
                double t74605 = b1p*t74600;
                double t74606 = b3p*t74601;
                double t74607 = b4p*t74602*t74603;
                double t74608 = b2p*c*t74598;
                double t74609 = t74605+t74606+t74607+t74608;
                double t74610 = 1.0/t74609;
                double t74611 = t74610*t74604*(1.0/2.0);
                double t74612 = t74611+1.0;
                double t74613 = log(t74612);
                double t74614 = a1p*c*t74598;
                double t74615 = t74614+1.0;
                double t74616 = 1.0/tau_b[index];
                double t74617 = tau_b[index]*2.0;
                double t74618 = 1.0/rho_b[index];
                double t74622 = gamma_bb[index]*t74618*(1.0/4.0);
                double t74619 = -t74622+t74617;
                double t74620 = tau_b[index]-1.0/1.0E20;
                double t74621 = 1.0/(tau_b[index]*tau_b[index]);
                double t74623 = gamma_bb[index]*gamma_bb[index];
                double t74624 = gcaa*gcaa;
                double t74625 = t74623*t74623;
                double t74626 = t74624*t74624;
                double t74627 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74628 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74629 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74630 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74631 = C_k*C_k;
                double t74632 = pow(rho_b[index],1.0E1/3.0);
                double t74633 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t74634 = pow(rho_b[index],5.0/3.0);
                double t74635 = C_k*t74616*t74634;
                double t74636 = t74635+1.0;
                double t74637 = 1.0/(t74636*t74636);
                double t74638 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t74639 = t74635-1.0;
                double t74640 = t74639*t74639;
                double t74641 = t74640*t74640;
                double t74642 = t74641*t74641;
                double t74643 = 1.0/pow(t74636,1.1E1);
                double t74644 = 1.0/pow(t74636,1.2E1);
                double t74645 = 1.0/(t74636*t74636*t74636*t74636);
                double t74646 = 1.0/(t74636*t74636*t74636*t74636*t74636);
                double t74647 = 1.0/(t74636*t74636*t74636*t74636*t74636*t74636);
                double t74648 = 1.0/(t74636*t74636*t74636*t74636*t74636*t74636*t74636);
                double t74649 = 1.0/(t74636*t74636*t74636*t74636*t74636*t74636*t74636*t74636);
                double t74650 = 1.0/(t74636*t74636*t74636*t74636*t74636*t74636*t74636*t74636*t74636);
                double t74651 = 1.0/pow(t74636,1.0E1);
                double t74652 = 1.0/(t74636*t74636*t74636);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t74631*t74632*t74633* \
                   t74637*-2.0+a_2*t74631*t74632*t74633*t74637*2.0+(C_k*a_1*t74634*t74638*2.0)/t74636+a_1*t74631*t74632* \
                   t74633*t74652*t74639*2.0+a_10*t74631*t74632*t74633*t74642*t74651*9.0E1+a_2*t74631*t74640*t74632*t74633* \
                   t74645*6.0-a_2*t74631*t74632*t74633*t74652*t74639*8.0-a_3*t74631*t74640*t74632*t74633*t74645*1.8E1+ \
                   a_3*t74631*t74632*t74633*t74652*t74639*6.0+a_4*t74631*t74640*t74632*t74633*t74645*1.2E1+a_4*t74631* \
                   t74632*t74641*t74633*t74647*2.0E1-a_5*t74631*t74632*t74641*t74633*t74647*5.0E1+a_6*t74631*t74632*t74641* \
                   t74633*t74647*3.0E1+a_8*t74631*t74632*t74633*t74642*t74651*7.2E1-a_9*t74631*t74632*t74633*t74642*t74651* \
                   1.62E2-C_k*a_1*t74634*t74637*t74638*t74639*2.0-C_k*a_2*t74640*t74634*t74652*t74638*4.0+C_k*a_2*t74634* \
                   t74637*t74638*t74639*4.0+C_k*a_3*t74640*t74634*t74652*t74638*6.0-C_k*a_4*t74641*t74634*t74646*t74638* \
                   8.0+C_k*a_5*t74641*t74634*t74646*t74638*1.0E1-C_k*a_8*t74650*t74642*t74634*t74638*1.6E1+C_k*a_9*t74650* \
                   t74642*t74634*t74638*1.8E1-C_k*a_10*t74640*t74642*t74634*t74643*t74638*2.0E1+C_k*a_11*t74640*t74642* \
                   t74634*t74643*t74638*2.2E1+C_k*a_10*t74642*t74651*t74634*t74638*t74639*2.0E1-C_k*a_3*t74640*t74634* \
                   t74645*t74638*t74639*6.0+C_k*a_4*t74640*t74634*t74645*t74638*t74639*8.0-C_k*a_5*t74641*t74634*t74638* \
                   t74647*t74639*1.0E1-C_k*a_6*t74640*t74641*t74634*t74638*t74648*1.2E1+C_k*a_6*t74641*t74634*t74638* \
                   t74647*t74639*1.2E1+C_k*a_7*t74640*t74641*t74634*t74638*t74648*1.4E1-C_k*a_9*t74642*t74651*t74634* \
                   t74638*t74639*1.8E1+a_10*t74631*t74640*t74632*t74633*t74642*t74644*1.1E2-a_11*t74631*t74640*t74632* \
                   t74633*t74642*t74644*2.42E2-a_10*t74631*t74632*t74633*t74642*t74643*t74639*2.0E2+a_11*t74631*t74632* \
                   t74633*t74642*t74643*t74639*1.1E2+a_3*t74631*t74640*t74632*t74633*t74646*t74639*1.2E1-a_4*t74631*t74640* \
                   t74632*t74633*t74646*t74639*3.2E1+a_5*t74631*t74640*t74632*t74633*t74646*t74639*2.0E1+a_5*t74631*t74632* \
                   t74641*t74633*t74639*t74648*3.0E1+a_6*t74631*t74640*t74632*t74641*t74633*t74649*4.2E1-a_6*t74631*t74632* \
                   t74641*t74633*t74639*t74648*7.2E1-a_7*t74631*t74640*t74632*t74641*t74633*t74649*9.8E1+a_7*t74631*t74632* \
                   t74641*t74633*t74639*t74648*4.2E1+a_8*t74631*t74640*t74632*t74641*t74633*t74649*5.6E1+a_9*t74631*t74632* \
                   t74633*t74642*t74643*t74639*9.0E1+a_11*t74631*t74640*t74632*t74633*t74642*1.0/pow(t74636,1.3E1)*t74639* \
                   1.32E2-C_k*a_11*t74640*t74642*t74634*t74644*t74638*t74639*2.2E1-C_k*a_7*t74640*t74641*t74634*t74638* \
                   t74639*t74649*1.4E1+C_k*a_8*t74640*t74641*t74634*t74638*t74639*t74649*1.6E1+a_7*t74631*t74640*t74632* \
                   t74641*t74650*t74633*t74639*5.6E1-a_8*t74631*t74640*t74632*t74641*t74650*t74633*t74639*1.28E2+a_9* \
                   t74631*t74640*t74632*t74641*t74650*t74633*t74639*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t74600+b3f*t74601+b2f*c*t74598+b4f*t74602*t74603))+1.0)*(a1f*c*t74598+ \
                   1.0)*2.0-c0p*t74613*t74615*2.0))/(two_13*2.0-2.0)+c0p*t74613*t74615*2.0)*( 0.0 - ( (t74620 > 0.0)  \
                   ? 1.0*(t74621*2.0-t74619*t74638) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t74630*t74623*t74624)/(gamma_bb[index]* \
                   gcaa*t74628*2.0+t74630*t74623*t74624+1.0)+(ccaa1*gamma_bb[index]*gcaa*t74628)/(gamma_bb[index]*gcaa* \
                   t74628+1.0)+(ccaa4*t74625*t74626*t74627)/(gamma_bb[index]*gcaa*t74628*4.0+t74630*t74623*t74624*6.0+ \
                   t74625*t74626*t74627+gamma_bb[index]*gcaa*t74623*t74624*t74629*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t74623*t74624*t74629)/(gamma_bb[index]*gcaa*t74628*3.0+t74630*t74623*t74624*3.0+gamma_bb[index]*gcaa* \
                   t74623*t74624*t74629+1.0));
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t73427 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t73428 = c*t73427;
                    double t73429 = sqrt(t73428);
                    double t73430 = pow(t73428,3.0/2.0);
                    double t73431 = c*c;
                    double t73432 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t73433 = 1.0/c0p;
                    double t73434 = b1p*t73429;
                    double t73435 = b3p*t73430;
                    double t73436 = b4p*t73431*t73432;
                    double t73437 = b2p*c*t73427;
                    double t73438 = t73434+t73435+t73436+t73437;
                    double t73439 = 1.0/t73438;
                    double t73440 = t73433*t73439*(1.0/2.0);
                    double t73441 = t73440+1.0;
                    double t73442 = log(t73441);
                    double t73443 = a1p*c*t73427;
                    double t73444 = t73443+1.0;
                    double t73445 = gamma_aa[index]*gamma_aa[index];
                    double t73446 = gcaa*gcaa;
                    double t73447 = t73445*t73445;
                    double t73448 = t73446*t73446;
                    double t73449 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t73450 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t73451 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t73452 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t73453 = tau_a[index]-1.0/1.0E20;
                    double t73454 = pow(2.0,1.0/3.0);
                    double t73455 = t73454*2.0;
                    double t73456 = t73455-2.0;
                    double t73457 = two_13*2.0;
                    double t73458 = t73457-2.0;
                    double t73459 = 1.0/t73458;
                    double t73460 = 1.0/c0f;
                    double t73461 = b1f*t73429;
                    double t73462 = b3f*t73430;
                    double t73463 = b4f*t73431*t73432;
                    double t73464 = b2f*c*t73427;
                    double t73465 = t73461+t73462+t73463+t73464;
                    double t73466 = 1.0/t73465;
                    double t73467 = t73460*t73466*(1.0/2.0);
                    double t73468 = t73467+1.0;
                    double t73469 = log(t73468);
                    double t73470 = a1f*c*t73427;
                    double t73471 = t73470+1.0;
                    double t73472 = c0f*t73471*t73469*2.0;
                    double t73473 = c0p*t73442*t73444*2.0;
                    double t73474 = gamma_aa[index]*gcaa*t73450*4.0;
                    double t73475 = gamma_aa[index]*gcaa*t73451*t73445*t73446*4.0;
                    double t73476 = t73452*t73445*t73446*6.0;
                    double t73477 = t73447*t73448*t73449;
                    double t73478 = t73474+t73475+t73476+t73477+1.0;
                    double t73479 = 1.0/t73478;
                    double t73480 = ccaa4*t73447*t73448*t73449*t73479;
                    double t73481 = gamma_aa[index]*gcaa*t73450;
                    double t73482 = t73481+1.0;
                    double t73483 = 1.0/t73482;
                    double t73484 = ccaa1*gamma_aa[index]*gcaa*t73450*t73483;
                    double t73485 = gamma_aa[index]*gcaa*t73450*3.0;
                    double t73486 = gamma_aa[index]*gcaa*t73451*t73445*t73446;
                    double t73487 = t73452*t73445*t73446*3.0;
                    double t73488 = t73485+t73486+t73487+1.0;
                    double t73489 = 1.0/t73488;
                    double t73490 = ccaa3*gamma_aa[index]*gcaa*t73451*t73445*t73446*t73489;
                    double t73491 = gamma_aa[index]*gcaa*t73450*2.0;
                    double t73492 = t73452*t73445*t73446;
                    double t73493 = t73491+t73492+1.0;
                    double t73494 = 1.0/t73493;
                    double t73495 = ccaa2*t73452*t73445*t73446*t73494;
                    double t73496 = ccaa0+t73480+t73490+t73484+t73495;
                    double t73497 = t73472-t73473;
                    double t73498 = t73456*t73459*t73497;
                    double t73499 = t73473+t73498;
                    double t73500 = ( (t73453 > 0.0) ?  1.0 : 0.0 ) ;
                    double t73501 = 1.0/tau_a[index];
                    double t73502 = 1.0/(tau_a[index]*tau_a[index]);
                    double t73503 = 0.0 ;
                    double t73504 = tau_a[index]*2.0;
                    double t73505 = 1.0/rho_a[index];
                    double t73506 = t73504-gamma_aa[index]*t73505*(1.0/4.0);
                    double t73507 = 1.0/(k*k);
                    double t73508 = rho_a[index]*2.0;
                    double t73509 = 1.0/pow(t73508,2.0/3.0);
                    double t73510 = pow(rho_a[index],5.0/3.0);
                    double t73511 = C_k*t73501*t73510;
                    double t73512 = t73511+1.0;
                    double t73513 = t73511-1.0;
                    double t73514 = 1.0/(t73512*t73512);
                    double t73515 = t73513*t73513;
                    double t73516 = t73515*t73515;
                    double t73517 = t73516*t73516;
                    double t73518 = 1.0/pow(t73512,1.1E1);
                    double t73519 = 1.0/(t73512*t73512*t73512);
                    double t73520 = 1.0/(t73512*t73512*t73512*t73512);
                    double t73521 = 1.0/(t73512*t73512*t73512*t73512*t73512);
                    double t73522 = 1.0/(t73512*t73512*t73512*t73512*t73512*t73512);
                    double t73523 = 1.0/(t73512*t73512*t73512*t73512*t73512*t73512*t73512);
                    double t73524 = 1.0/(t73512*t73512*t73512*t73512*t73512*t73512*t73512*t73512);
                    double t73525 = 1.0/(t73512*t73512*t73512*t73512*t73512*t73512*t73512*t73512*t73512);
                    double t73526 = 1.0/pow(t73512,1.0E1);
                    v_gamma_aa_tau_a_[index] = t73500*t73502*t73496*t73499*(-1.0/8.0)+t73501*t73503*t73496*(t73473+t73456* \
                       t73459*(t73472-c0p*t73442*t73444*2.0))*(1.0/8.0)-rho_a[index]*t73499*(t73503*(t73501*t73506*(1.0/2.0) \
                       -1.0)+t73500*(t73501-t73502*t73506*(1.0/2.0)))*(ccaa1*gcaa*t73450*t73483+ccaa2*gamma_aa[index]*t73452* \
                       t73446*t73494*2.0-ccaa1*gamma_aa[index]*t73452*t73446*1.0/(t73482*t73482)-ccaa2*t73452*t73445*t73446* \
                       1.0/(t73493*t73493)*(gcaa*t73450*2.0+gamma_aa[index]*t73452*t73446*2.0)-ccaa4*t73447*t73448*t73449* \
                       1.0/(t73478*t73478)*(gcaa*t73450*4.0+gamma_aa[index]*t73452*t73446*1.2E1+gamma_aa[index]*t73445*t73448* \
                       t73449*4.0+gcaa*t73451*t73445*t73446*1.2E1)+ccaa4*gamma_aa[index]*t73445*t73448*t73449*t73479*4.0+ \
                       ccaa3*gcaa*t73451*t73445*t73446*t73489*3.0-ccaa3*gamma_aa[index]*gcaa*t73451*t73445*t73446*1.0/(t73488* \
                       t73488)*(gcaa*t73450*3.0+gamma_aa[index]*t73452*t73446*6.0+gcaa*t73451*t73445*t73446*3.0))+mu_*t73505* \
                       t73507*t73509*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t73507*t73509*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t73510*t73502)/t73512-C_k*a_1*t73510*t73502*t73513*t73514+C_k*a_2* \
                       t73510*t73502*t73513*t73514*2.0-C_k*a_2*t73510*t73502*t73515*t73519*2.0+C_k*a_3*t73510*t73502*t73515* \
                       t73519*3.0-C_k*a_4*t73510*t73502*t73521*t73516*4.0+C_k*a_5*t73510*t73502*t73521*t73516*5.0-C_k*a_8* \
                       t73510*t73502*t73525*t73517*8.0+C_k*a_9*t73510*t73502*t73525*t73517*9.0+C_k*a_10*t73510*t73502*t73513* \
                       t73517*t73526*1.0E1-C_k*a_10*t73510*t73502*t73515*t73517*t73518*1.0E1+C_k*a_11*t73510*t73502*t73515* \
                       t73517*t73518*1.1E1-C_k*a_3*t73510*t73502*t73520*t73513*t73515*3.0+C_k*a_4*t73510*t73502*t73520*t73513* \
                       t73515*4.0-C_k*a_5*t73510*t73502*t73513*t73522*t73516*5.0+C_k*a_6*t73510*t73502*t73513*t73522*t73516* \
                       6.0-C_k*a_6*t73510*t73502*t73523*t73515*t73516*6.0+C_k*a_7*t73510*t73502*t73523*t73515*t73516*7.0- \
                       C_k*a_9*t73510*t73502*t73513*t73517*t73526*9.0-C_k*a_11*t73510*t73502*1.0/pow(t73512,1.2E1)*t73513* \
                       t73515*t73517*1.1E1-C_k*a_7*t73510*t73502*t73513*t73515*t73524*t73516*7.0+C_k*a_8*t73510*t73502*t73513* \
                       t73515*t73524*t73516*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    double t75781 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t75782 = c*t75781;
                    double t75783 = sqrt(t75782);
                    double t75784 = pow(t75782,3.0/2.0);
                    double t75785 = c*c;
                    double t75786 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t75787 = 1.0/c0p;
                    double t75788 = b1p*t75783;
                    double t75789 = b3p*t75784;
                    double t75790 = b4p*t75785*t75786;
                    double t75791 = b2p*c*t75781;
                    double t75792 = t75790+t75791+t75788+t75789;
                    double t75793 = 1.0/t75792;
                    double t75794 = t75793*t75787*(1.0/2.0);
                    double t75795 = t75794+1.0;
                    double t75796 = log(t75795);
                    double t75797 = a1p*c*t75781;
                    double t75798 = t75797+1.0;
                    double t75799 = gamma_aa[index]*gamma_aa[index];
                    double t75800 = gcaa*gcaa;
                    double t75801 = t75799*t75799;
                    double t75802 = t75800*t75800;
                    double t75803 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t75804 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t75805 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t75806 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t75807 = tau_a[index]-1.0/1.0E20;
                    double t75808 = pow(2.0,1.0/3.0);
                    double t75809 = t75808*2.0;
                    double t75810 = t75809-2.0;
                    double t75811 = two_13*2.0;
                    double t75812 = t75811-2.0;
                    double t75813 = 1.0/t75812;
                    double t75814 = 1.0/c0f;
                    double t75815 = b1f*t75783;
                    double t75816 = b3f*t75784;
                    double t75817 = b4f*t75785*t75786;
                    double t75818 = b2f*c*t75781;
                    double t75819 = t75815+t75816+t75817+t75818;
                    double t75820 = 1.0/t75819;
                    double t75821 = t75820*t75814*(1.0/2.0);
                    double t75822 = t75821+1.0;
                    double t75823 = log(t75822);
                    double t75824 = a1f*c*t75781;
                    double t75825 = t75824+1.0;
                    double t75826 = c0f*t75823*t75825*2.0;
                    double t75827 = c0p*t75796*t75798*2.0;
                    double t75828 = gamma_aa[index]*gcaa*t75804*4.0;
                    double t75829 = gamma_aa[index]*gcaa*t75800*t75805*t75799*4.0;
                    double t75830 = t75800*t75806*t75799*6.0;
                    double t75831 = t75801*t75802*t75803;
                    double t75832 = t75830+t75831+t75828+t75829+1.0;
                    double t75833 = 1.0/t75832;
                    double t75834 = ccaa4*t75801*t75802*t75803*t75833;
                    double t75835 = gamma_aa[index]*gcaa*t75804;
                    double t75836 = t75835+1.0;
                    double t75837 = 1.0/t75836;
                    double t75838 = ccaa1*gamma_aa[index]*gcaa*t75804*t75837;
                    double t75839 = gamma_aa[index]*gcaa*t75804*3.0;
                    double t75840 = gamma_aa[index]*gcaa*t75800*t75805*t75799;
                    double t75841 = t75800*t75806*t75799*3.0;
                    double t75842 = t75840+t75841+t75839+1.0;
                    double t75843 = 1.0/t75842;
                    double t75844 = ccaa3*gamma_aa[index]*gcaa*t75800*t75805*t75843*t75799;
                    double t75845 = gamma_aa[index]*gcaa*t75804*2.0;
                    double t75846 = t75800*t75806*t75799;
                    double t75847 = t75845+t75846+1.0;
                    double t75848 = 1.0/t75847;
                    double t75849 = ccaa2*t75800*t75806*t75848*t75799;
                    double t75850 = ccaa0+t75834+t75844+t75838+t75849;
                    double t75851 = t75826-t75827;
                    double t75852 = t75810*t75813*t75851;
                    double t75853 = t75852+t75827;
                    double t75854 = ( (t75807 > 0.0) ?  1.0 : 0.0 ) ;
                    double t75855 = 1.0/tau_a[index];
                    double t75856 = 1.0/(tau_a[index]*tau_a[index]);
                    double t75857 = 0.0 ;
                    double t75858 = tau_a[index]*2.0;
                    double t75859 = 1.0/rho_a[index];
                    double t75860 = t75858-gamma_aa[index]*t75859*(1.0/4.0);
                    double t75861 = 1.0/(k*k);
                    double t75862 = rho_a[index]*2.0;
                    double t75863 = 1.0/pow(t75862,2.0/3.0);
                    double t75864 = pow(rho_a[index],5.0/3.0);
                    double t75865 = C_k*t75855*t75864;
                    double t75866 = t75865+1.0;
                    double t75867 = t75865-1.0;
                    double t75868 = 1.0/(t75866*t75866);
                    double t75869 = t75867*t75867;
                    double t75870 = t75869*t75869;
                    double t75871 = t75870*t75870;
                    double t75872 = 1.0/pow(t75866,1.1E1);
                    double t75873 = 1.0/(t75866*t75866*t75866);
                    double t75874 = 1.0/(t75866*t75866*t75866*t75866);
                    double t75875 = 1.0/(t75866*t75866*t75866*t75866*t75866);
                    double t75876 = 1.0/(t75866*t75866*t75866*t75866*t75866*t75866);
                    double t75877 = 1.0/(t75866*t75866*t75866*t75866*t75866*t75866*t75866);
                    double t75878 = 1.0/(t75866*t75866*t75866*t75866*t75866*t75866*t75866*t75866);
                    double t75879 = 1.0/(t75866*t75866*t75866*t75866*t75866*t75866*t75866*t75866*t75866);
                    double t75880 = 1.0/pow(t75866,1.0E1);
                    v_gamma_aa_tau_a_[index] = t75850*t75853*t75854*t75856*(-1.0/8.0)+t75850*t75855*t75857*(t75827+t75810* \
                       t75813*(t75826-c0p*t75796*t75798*2.0))*(1.0/8.0)-rho_a[index]*t75853*(t75857*(t75860*t75855*(1.0/2.0) \
                       -1.0)+t75854*(t75855-t75860*t75856*(1.0/2.0)))*(ccaa1*gcaa*t75804*t75837+ccaa2*gamma_aa[index]*t75800* \
                       t75806*t75848*2.0-ccaa1*gamma_aa[index]*t75800*t75806*1.0/(t75836*t75836)-ccaa2*t75800*t75806*1.0/ \
                       (t75847*t75847)*t75799*(gcaa*t75804*2.0+gamma_aa[index]*t75800*t75806*2.0)-ccaa4*t75801*t75802*t75803* \
                       1.0/(t75832*t75832)*(gcaa*t75804*4.0+gamma_aa[index]*t75800*t75806*1.2E1+gamma_aa[index]*t75802*t75803* \
                       t75799*4.0+gcaa*t75800*t75805*t75799*1.2E1)+ccaa4*gamma_aa[index]*t75802*t75803*t75833*t75799*4.0+ \
                       ccaa3*gcaa*t75800*t75805*t75843*t75799*3.0-ccaa3*gamma_aa[index]*gcaa*t75800*t75805*1.0/(t75842*t75842) \
                       *t75799*(gcaa*t75804*3.0+gamma_aa[index]*t75800*t75806*6.0+gcaa*t75800*t75805*t75799*3.0))+mu_*t75861* \
                       t75863*t75859*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t75861*t75863*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t75864*t75856)/t75866-C_k*a_1*t75864*t75856*t75867*t75868-C_k*a_2* \
                       t75864*t75873*t75856*t75869*2.0+C_k*a_2*t75864*t75856*t75867*t75868*2.0+C_k*a_3*t75864*t75873*t75856* \
                       t75869*3.0-C_k*a_4*t75870*t75864*t75856*t75875*4.0+C_k*a_5*t75870*t75864*t75856*t75875*5.0-C_k*a_8* \
                       t75871*t75864*t75856*t75879*8.0+C_k*a_9*t75871*t75864*t75856*t75879*9.0+C_k*a_10*t75871*t75880*t75864* \
                       t75856*t75867*1.0E1-C_k*a_10*t75871*t75872*t75864*t75856*t75869*1.0E1+C_k*a_11*t75871*t75872*t75864* \
                       t75856*t75869*1.1E1-C_k*a_3*t75864*t75856*t75874*t75867*t75869*3.0+C_k*a_4*t75864*t75856*t75874*t75867* \
                       t75869*4.0-C_k*a_5*t75870*t75864*t75856*t75867*t75876*5.0+C_k*a_6*t75870*t75864*t75856*t75867*t75876* \
                       6.0-C_k*a_6*t75870*t75864*t75856*t75877*t75869*6.0+C_k*a_7*t75870*t75864*t75856*t75877*t75869*7.0- \
                       C_k*a_9*t75871*t75880*t75864*t75856*t75867*9.0-C_k*a_11*t75871*t75864*t75856*1.0/pow(t75866,1.2E1) \
                       *t75867*t75869*1.1E1-C_k*a_7*t75870*t75864*t75856*t75867*t75869*t75878*7.0+C_k*a_8*t75870*t75864*t75856* \
                       t75867*t75869*t75878*8.0)*(1.0/4.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t73532 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t73533 = c*t73532;
                    double t73534 = sqrt(t73533);
                    double t73535 = pow(t73533,3.0/2.0);
                    double t73536 = c*c;
                    double t73537 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t73538 = 1.0/c0p;
                    double t73539 = b1p*t73534;
                    double t73540 = b3p*t73535;
                    double t73541 = b4p*t73536*t73537;
                    double t73542 = b2p*c*t73532;
                    double t73543 = t73540+t73541+t73542+t73539;
                    double t73544 = 1.0/t73543;
                    double t73545 = t73544*t73538*(1.0/2.0);
                    double t73546 = t73545+1.0;
                    double t73547 = log(t73546);
                    double t73548 = a1p*c*t73532;
                    double t73549 = t73548+1.0;
                    double t73550 = gamma_bb[index]*gamma_bb[index];
                    double t73551 = gcaa*gcaa;
                    double t73552 = t73550*t73550;
                    double t73553 = t73551*t73551;
                    double t73554 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t73555 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t73556 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t73557 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t73558 = tau_b[index]-1.0/1.0E20;
                    double t73559 = pow(2.0,1.0/3.0);
                    double t73560 = t73559*2.0;
                    double t73561 = t73560-2.0;
                    double t73562 = two_13*2.0;
                    double t73563 = t73562-2.0;
                    double t73564 = 1.0/t73563;
                    double t73565 = 1.0/c0f;
                    double t73566 = b1f*t73534;
                    double t73567 = b3f*t73535;
                    double t73568 = b4f*t73536*t73537;
                    double t73569 = b2f*c*t73532;
                    double t73570 = t73566+t73567+t73568+t73569;
                    double t73571 = 1.0/t73570;
                    double t73572 = t73571*t73565*(1.0/2.0);
                    double t73573 = t73572+1.0;
                    double t73574 = log(t73573);
                    double t73575 = a1f*c*t73532;
                    double t73576 = t73575+1.0;
                    double t73577 = c0f*t73574*t73576*2.0;
                    double t73578 = c0p*t73547*t73549*2.0;
                    double t73579 = gamma_bb[index]*gcaa*t73555*4.0;
                    double t73580 = gamma_bb[index]*gcaa*t73550*t73551*t73556*4.0;
                    double t73581 = t73550*t73551*t73557*6.0;
                    double t73582 = t73552*t73553*t73554;
                    double t73583 = t73580+t73581+t73582+t73579+1.0;
                    double t73584 = 1.0/t73583;
                    double t73585 = ccaa4*t73552*t73553*t73554*t73584;
                    double t73586 = gamma_bb[index]*gcaa*t73555;
                    double t73587 = t73586+1.0;
                    double t73588 = 1.0/t73587;
                    double t73589 = ccaa1*gamma_bb[index]*gcaa*t73555*t73588;
                    double t73590 = gamma_bb[index]*gcaa*t73555*3.0;
                    double t73591 = gamma_bb[index]*gcaa*t73550*t73551*t73556;
                    double t73592 = t73550*t73551*t73557*3.0;
                    double t73593 = t73590+t73591+t73592+1.0;
                    double t73594 = 1.0/t73593;
                    double t73595 = ccaa3*gamma_bb[index]*gcaa*t73550*t73551*t73556*t73594;
                    double t73596 = gamma_bb[index]*gcaa*t73555*2.0;
                    double t73597 = t73550*t73551*t73557;
                    double t73598 = t73596+t73597+1.0;
                    double t73599 = 1.0/t73598;
                    double t73600 = ccaa2*t73550*t73551*t73557*t73599;
                    double t73601 = ccaa0+t73600+t73585+t73595+t73589;
                    double t73602 = t73577-t73578;
                    double t73603 = t73602*t73561*t73564;
                    double t73604 = t73603+t73578;
                    double t73605 = ( (t73558 > 0.0) ?  1.0 : 0.0 ) ;
                    double t73606 = 1.0/tau_b[index];
                    double t73607 = 1.0/(tau_b[index]*tau_b[index]);
                    double t73608 = 0.0 ;
                    double t73609 = tau_b[index]*2.0;
                    double t73610 = 1.0/rho_b[index];
                    double t73611 = t73609-gamma_bb[index]*t73610*(1.0/4.0);
                    double t73612 = 1.0/(k*k);
                    double t73613 = rho_b[index]*2.0;
                    double t73614 = 1.0/pow(t73613,2.0/3.0);
                    double t73615 = pow(rho_b[index],5.0/3.0);
                    double t73616 = C_k*t73606*t73615;
                    double t73617 = t73616+1.0;
                    double t73618 = t73616-1.0;
                    double t73619 = 1.0/(t73617*t73617);
                    double t73620 = t73618*t73618;
                    double t73621 = t73620*t73620;
                    double t73622 = t73621*t73621;
                    double t73623 = 1.0/pow(t73617,1.1E1);
                    double t73624 = 1.0/(t73617*t73617*t73617);
                    double t73625 = 1.0/(t73617*t73617*t73617*t73617);
                    double t73626 = 1.0/(t73617*t73617*t73617*t73617*t73617);
                    double t73627 = 1.0/(t73617*t73617*t73617*t73617*t73617*t73617);
                    double t73628 = 1.0/(t73617*t73617*t73617*t73617*t73617*t73617*t73617);
                    double t73629 = 1.0/(t73617*t73617*t73617*t73617*t73617*t73617*t73617*t73617);
                    double t73630 = 1.0/(t73617*t73617*t73617*t73617*t73617*t73617*t73617*t73617*t73617);
                    double t73631 = 1.0/pow(t73617,1.0E1);
                    v_gamma_bb_tau_b_[index] = t73601*t73604*t73605*t73607*(-1.0/8.0)+t73601*t73606*t73608*(t73578+t73561* \
                       t73564*(t73577-c0p*t73547*t73549*2.0))*(1.0/8.0)-rho_b[index]*t73604*(t73608*(t73611*t73606*(1.0/2.0) \
                       -1.0)+t73605*(t73606-t73611*t73607*(1.0/2.0)))*(ccaa1*gcaa*t73555*t73588+ccaa2*gamma_bb[index]*t73551* \
                       t73557*t73599*2.0-ccaa1*gamma_bb[index]*t73551*t73557*1.0/(t73587*t73587)-ccaa2*t73550*t73551*t73557* \
                       1.0/(t73598*t73598)*(gcaa*t73555*2.0+gamma_bb[index]*t73551*t73557*2.0)-ccaa4*t73552*t73553*t73554* \
                       1.0/(t73583*t73583)*(gcaa*t73555*4.0+gamma_bb[index]*t73551*t73557*1.2E1+gamma_bb[index]*t73550*t73553* \
                       t73554*4.0+gcaa*t73550*t73551*t73556*1.2E1)+ccaa4*gamma_bb[index]*t73550*t73553*t73554*t73584*4.0+ \
                       ccaa3*gcaa*t73550*t73551*t73556*t73594*3.0-ccaa3*gamma_bb[index]*gcaa*t73550*t73551*t73556*1.0/(t73593* \
                       t73593)*(gcaa*t73555*3.0+gamma_bb[index]*t73551*t73557*6.0+gcaa*t73550*t73551*t73556*3.0))+mu_*t73610* \
                       t73612*t73614*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t73612*t73614*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t73615*t73607)/t73617-C_k*a_1*t73615*t73607*t73618*t73619-C_k*a_2* \
                       t73620*t73615*t73624*t73607*2.0+C_k*a_2*t73615*t73607*t73618*t73619*2.0+C_k*a_3*t73620*t73615*t73624* \
                       t73607*3.0-C_k*a_4*t73621*t73615*t73607*t73626*4.0+C_k*a_5*t73621*t73615*t73607*t73626*5.0-C_k*a_8* \
                       t73630*t73622*t73615*t73607*8.0+C_k*a_9*t73630*t73622*t73615*t73607*9.0-C_k*a_10*t73620*t73622*t73623* \
                       t73615*t73607*1.0E1+C_k*a_11*t73620*t73622*t73623*t73615*t73607*1.1E1+C_k*a_10*t73622*t73631*t73615* \
                       t73607*t73618*1.0E1-C_k*a_3*t73620*t73615*t73607*t73625*t73618*3.0+C_k*a_4*t73620*t73615*t73607*t73625* \
                       t73618*4.0-C_k*a_5*t73621*t73615*t73607*t73618*t73627*5.0-C_k*a_6*t73620*t73621*t73615*t73607*t73628* \
                       6.0+C_k*a_6*t73621*t73615*t73607*t73618*t73627*6.0+C_k*a_7*t73620*t73621*t73615*t73607*t73628*7.0- \
                       C_k*a_9*t73622*t73631*t73615*t73607*t73618*9.0-C_k*a_11*t73620*t73622*t73615*t73607*1.0/pow(t73617,1.2E1) \
                       *t73618*1.1E1-C_k*a_7*t73620*t73621*t73615*t73607*t73618*t73629*7.0+C_k*a_8*t73620*t73621*t73615*t73607* \
                       t73618*t73629*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t74659 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t74660 = c*t74659;
                    double t74661 = sqrt(t74660);
                    double t74662 = pow(t74660,3.0/2.0);
                    double t74663 = c*c;
                    double t74664 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t74665 = 1.0/c0p;
                    double t74666 = b1p*t74661;
                    double t74667 = b3p*t74662;
                    double t74668 = b4p*t74663*t74664;
                    double t74669 = b2p*c*t74659;
                    double t74670 = t74666+t74667+t74668+t74669;
                    double t74671 = 1.0/t74670;
                    double t74672 = t74671*t74665*(1.0/2.0);
                    double t74673 = t74672+1.0;
                    double t74674 = log(t74673);
                    double t74675 = a1p*c*t74659;
                    double t74676 = t74675+1.0;
                    double t74677 = gamma_bb[index]*gamma_bb[index];
                    double t74678 = gcaa*gcaa;
                    double t74679 = t74677*t74677;
                    double t74680 = t74678*t74678;
                    double t74681 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t74682 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t74683 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t74684 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t74685 = tau_b[index]-1.0/1.0E20;
                    double t74686 = pow(2.0,1.0/3.0);
                    double t74687 = t74686*2.0;
                    double t74688 = t74687-2.0;
                    double t74689 = two_13*2.0;
                    double t74690 = t74689-2.0;
                    double t74691 = 1.0/t74690;
                    double t74692 = 1.0/c0f;
                    double t74693 = b1f*t74661;
                    double t74694 = b3f*t74662;
                    double t74695 = b4f*t74663*t74664;
                    double t74696 = b2f*c*t74659;
                    double t74697 = t74693+t74694+t74695+t74696;
                    double t74698 = 1.0/t74697;
                    double t74699 = t74692*t74698*(1.0/2.0);
                    double t74700 = t74699+1.0;
                    double t74701 = log(t74700);
                    double t74702 = a1f*c*t74659;
                    double t74703 = t74702+1.0;
                    double t74704 = c0f*t74701*t74703*2.0;
                    double t74705 = c0p*t74674*t74676*2.0;
                    double t74706 = gamma_bb[index]*gcaa*t74682*4.0;
                    double t74707 = gamma_bb[index]*gcaa*t74683*t74677*t74678*4.0;
                    double t74708 = t74684*t74677*t74678*6.0;
                    double t74709 = t74680*t74681*t74679;
                    double t74710 = t74706+t74707+t74708+t74709+1.0;
                    double t74711 = 1.0/t74710;
                    double t74712 = ccaa4*t74711*t74680*t74681*t74679;
                    double t74713 = gamma_bb[index]*gcaa*t74682;
                    double t74714 = t74713+1.0;
                    double t74715 = 1.0/t74714;
                    double t74716 = ccaa1*gamma_bb[index]*gcaa*t74715*t74682;
                    double t74717 = gamma_bb[index]*gcaa*t74682*3.0;
                    double t74718 = gamma_bb[index]*gcaa*t74683*t74677*t74678;
                    double t74719 = t74684*t74677*t74678*3.0;
                    double t74720 = t74717+t74718+t74719+1.0;
                    double t74721 = 1.0/t74720;
                    double t74722 = ccaa3*gamma_bb[index]*gcaa*t74721*t74683*t74677*t74678;
                    double t74723 = gamma_bb[index]*gcaa*t74682*2.0;
                    double t74724 = t74684*t74677*t74678;
                    double t74725 = t74723+t74724+1.0;
                    double t74726 = 1.0/t74725;
                    double t74727 = ccaa2*t74726*t74684*t74677*t74678;
                    double t74728 = ccaa0+t74712+t74722+t74716+t74727;
                    double t74729 = t74704-t74705;
                    double t74730 = t74691*t74729*t74688;
                    double t74731 = t74730+t74705;
                    double t74732 = ( (t74685 > 0.0) ?  1.0 : 0.0 ) ;
                    double t74733 = 1.0/tau_b[index];
                    double t74734 = 1.0/(tau_b[index]*tau_b[index]);
                    double t74735 = 0.0 ;
                    double t74736 = tau_b[index]*2.0;
                    double t74737 = 1.0/rho_b[index];
                    double t74738 = t74736-gamma_bb[index]*t74737*(1.0/4.0);
                    double t74739 = 1.0/(k*k);
                    double t74740 = rho_b[index]*2.0;
                    double t74741 = 1.0/pow(t74740,2.0/3.0);
                    double t74742 = pow(rho_b[index],5.0/3.0);
                    double t74743 = C_k*t74733*t74742;
                    double t74744 = t74743+1.0;
                    double t74745 = t74743-1.0;
                    double t74746 = 1.0/(t74744*t74744);
                    double t74747 = t74745*t74745;
                    double t74748 = t74747*t74747;
                    double t74749 = t74748*t74748;
                    double t74750 = 1.0/pow(t74744,1.1E1);
                    double t74751 = 1.0/(t74744*t74744*t74744);
                    double t74752 = 1.0/(t74744*t74744*t74744*t74744);
                    double t74753 = 1.0/(t74744*t74744*t74744*t74744*t74744);
                    double t74754 = 1.0/(t74744*t74744*t74744*t74744*t74744*t74744);
                    double t74755 = 1.0/(t74744*t74744*t74744*t74744*t74744*t74744*t74744);
                    double t74756 = 1.0/(t74744*t74744*t74744*t74744*t74744*t74744*t74744*t74744);
                    double t74757 = 1.0/(t74744*t74744*t74744*t74744*t74744*t74744*t74744*t74744*t74744);
                    double t74758 = 1.0/pow(t74744,1.0E1);
                    v_gamma_bb_tau_b_[index] = t74731*t74732*t74734*t74728*(-1.0/8.0)+t74733*t74735*t74728*(t74705+t74691* \
                       t74688*(t74704-c0p*t74674*t74676*2.0))*(1.0/8.0)-rho_b[index]*t74731*(t74735*(t74733*t74738*(1.0/2.0) \
                       -1.0)+t74732*(t74733-t74734*t74738*(1.0/2.0)))*(ccaa1*gcaa*t74715*t74682+ccaa2*gamma_bb[index]*t74726* \
                       t74684*t74678*2.0-ccaa1*gamma_bb[index]*1.0/(t74714*t74714)*t74684*t74678-ccaa2*1.0/(t74725*t74725) \
                       *t74684*t74677*t74678*(gcaa*t74682*2.0+gamma_bb[index]*t74684*t74678*2.0)-ccaa4*1.0/(t74710*t74710) \
                       *t74680*t74681*t74679*(gcaa*t74682*4.0+gamma_bb[index]*t74684*t74678*1.2E1+gamma_bb[index]*t74680* \
                       t74681*t74677*4.0+gcaa*t74683*t74677*t74678*1.2E1)+ccaa4*gamma_bb[index]*t74711*t74680*t74681*t74677* \
                       4.0+ccaa3*gcaa*t74721*t74683*t74677*t74678*3.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t74720*t74720)*t74683* \
                       t74677*t74678*(gcaa*t74682*3.0+gamma_bb[index]*t74684*t74678*6.0+gcaa*t74683*t74677*t74678*3.0))+mu_* \
                       t74741*t74737*t74739*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t74741*t74739*(1.0/ \
                       4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t74742*t74734)/t74744-C_k*a_1*t74742*t74734*t74745*t74746-C_k* \
                       a_2*t74742*t74751*t74734*t74747*2.0+C_k*a_2*t74742*t74734*t74745*t74746*2.0+C_k*a_3*t74742*t74751* \
                       t74734*t74747*3.0-C_k*a_4*t74742*t74734*t74753*t74748*4.0+C_k*a_5*t74742*t74734*t74753*t74748*5.0- \
                       C_k*a_8*t74742*t74734*t74757*t74749*8.0+C_k*a_9*t74742*t74734*t74757*t74749*9.0-C_k*a_10*t74750*t74742* \
                       t74734*t74747*t74749*1.0E1+C_k*a_11*t74750*t74742*t74734*t74747*t74749*1.1E1+C_k*a_10*t74742*t74734* \
                       t74745*t74749*t74758*1.0E1-C_k*a_3*t74742*t74734*t74752*t74745*t74747*3.0+C_k*a_4*t74742*t74734*t74752* \
                       t74745*t74747*4.0-C_k*a_5*t74742*t74734*t74745*t74754*t74748*5.0+C_k*a_6*t74742*t74734*t74745*t74754* \
                       t74748*6.0-C_k*a_6*t74742*t74734*t74755*t74747*t74748*6.0+C_k*a_7*t74742*t74734*t74755*t74747*t74748* \
                       7.0-C_k*a_9*t74742*t74734*t74745*t74749*t74758*9.0-C_k*a_11*t74742*t74734*1.0/pow(t74744,1.2E1)*t74745* \
                       t74747*t74749*1.1E1-C_k*a_7*t74742*t74734*t74745*t74747*t74756*t74748*7.0+C_k*a_8*t74742*t74734*t74745* \
                       t74747*t74756*t74748*8.0)*(1.0/4.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

