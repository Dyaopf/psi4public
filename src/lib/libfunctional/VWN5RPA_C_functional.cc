/**********************************************************
* VWN5RPA_C_functional.cc: definitions for VWN5RPA_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "VWN5RPA_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

VWN5RPA_C_Functional::VWN5RPA_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "VWN5RPA_C";
    description_ = "VWN5 (RPA) Correlation Functional";
    citation_ = "S.H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys., 58, 1200-1211, 1980";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double d2fz0 = 1.7099209341613653E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double EcP_1 = 3.1090699999999999E-02;
    params_.push_back(make_pair("EcP_1",EcP_1));
    double EcP_2 = -4.0928599999999998E-01;
    params_.push_back(make_pair("EcP_2",EcP_2));
    double EcP_3 = 1.3071999999999999E+01;
    params_.push_back(make_pair("EcP_3",EcP_3));
    double EcP_4 = 4.2719799999999999E+01;
    params_.push_back(make_pair("EcP_4",EcP_4));
    double EcF_1 = 1.5545349999999999E-02;
    params_.push_back(make_pair("EcF_1",EcF_1));
    double EcF_2 = -7.4329400000000001E-01;
    params_.push_back(make_pair("EcF_2",EcF_2));
    double EcF_3 = 2.0123100000000001E+01;
    params_.push_back(make_pair("EcF_3",EcF_3));
    double EcF_4 = 1.0157800000000000E+02;
    params_.push_back(make_pair("EcF_4",EcF_4));
    double Ac_1 = -1.6886863940389629E-02;
    params_.push_back(make_pair("Ac_1",Ac_1));
    double Ac_2 = -2.2834399999999999E-01;
    params_.push_back(make_pair("Ac_2",Ac_2));
    double Ac_3 = 1.0683499999999999E+00;
    params_.push_back(make_pair("Ac_3",Ac_3));
    double Ac_4 = 1.1481299999999999E+01;
    params_.push_back(make_pair("Ac_4",Ac_4));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
VWN5RPA_C_Functional::~VWN5RPA_C_Functional()
{
}
void VWN5RPA_C_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t6925 = rho_a[index]*2.0;
            double t6926 = 1/pow(t6925,1.0/3.0);
            double t6927 = c*t6926;
            double t6928 = sqrt(t6927);
            double t6929 = EcP_4*4.0;
            double t6930 = EcP_3*EcP_3;
            double t6931 = -t6930+t6929;
            double t6932 = EcP_2-t6928;
            double t6933 = EcP_3*t6928;
            double t6934 = EcP_4+t6933+t6927;
            double t6935 = 1/t6934;
            double t6936 = sqrt(t6931);
            double t6937 = t6928*2.0;
            double t6938 = EcP_3+t6937;
            double t6939 = 1/t6938;
            double t6940 = t6936*t6939;
            double t6941 = atan(t6940);
            double t6942 = 1/sqrt(t6931);
            functional_[index] = EcP_1*rho_a[index]*(log(c*t6926*t6935)+EcP_3*t6941*t6942*2.0-(EcP_2*EcP_3*(log((t6932* \
               t6932)*t6935)+t6941*t6942*(EcP_2*4.0+EcP_3*2.0)))/(EcP_4+EcP_2*EcP_2+EcP_2*EcP_3))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t6944 = rho_a[index]*2.0;
            double t6945 = 1/pow(t6944,1.0/3.0);
            double t6946 = c*t6945;
            double t6947 = sqrt(t6946);
            double t6948 = EcP_4*4.0;
            double t6949 = EcP_3*EcP_3;
            double t6950 = t6948-t6949;
            double t6951 = EcP_2-t6947;
            double t6952 = EcP_3*t6947;
            double t6953 = EcP_4+t6952+t6946;
            double t6954 = 1/t6953;
            double t6955 = sqrt(t6950);
            double t6956 = t6947*2.0;
            double t6957 = EcP_3+t6956;
            double t6958 = 1/t6957;
            double t6959 = t6955*t6958;
            double t6960 = atan(t6959);
            double t6961 = 1/sqrt(t6950);
            double t6962 = t6951*t6951;
            double t6963 = 1/pow(t6944,4.0/3.0);
            double t6964 = 1/sqrt(t6946);
            double t6965 = 1/(t6957*t6957);
            double t6966 = EcP_2*4.0;
            double t6967 = EcP_3*2.0;
            double t6968 = t6966+t6967;
            double t6969 = EcP_2*EcP_2;
            double t6970 = EcP_2*EcP_3;
            double t6971 = EcP_4+t6970+t6969;
            double t6972 = 1/t6971;
            double t6973 = c*t6963*(1.0/3.0);
            double t6974 = EcP_3*c*t6963*t6964*(1.0/6.0);
            double t6975 = t6973+t6974;
            double t6976 = 1/(t6953*t6953);
            double t6977 = t6950*t6965;
            double t6978 = t6977+1.0;
            double t6979 = 1/t6978;
            v_rho_a_[index] = EcP_1*(log(c*t6945*t6954)+EcP_3*t6960*t6961*2.0-EcP_2*EcP_3*t6972*(log(t6962*t6954) \
               +t6960*t6961*t6968))-EcP_1*rho_a[index]*(EcP_2*EcP_3*t6972*(1/(t6951*t6951)*t6953*(t6962*t6975*t6976+ \
               c*t6951*t6954*t6963*t6964*(1.0/3.0))+c*t6963*t6964*t6965*t6968*t6979*(1.0/3.0))+(pow(t6944,1.0/3.0) \
               *t6953*(c*t6954*t6963*(1.0/3.0)-c*t6945*t6975*t6976))/c-EcP_3*c*t6963*t6964*t6965*t6979*(2.0/3.0)) \
               *2.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t6983 = rho_a[index]*2.0;
            double t6984 = 1/pow(t6983,1.0/3.0);
            double t6985 = c*t6984;
            double t6986 = 1/pow(t6983,4.0/3.0);
            double t6987 = sqrt(t6985);
            double t6988 = EcP_3*t6987;
            double t6989 = EcP_4+t6985+t6988;
            double t6990 = c*t6986*(1.0/3.0);
            double t6991 = 1/sqrt(t6985);
            double t6992 = EcP_3*c*t6991*t6986*(1.0/6.0);
            double t6993 = t6990+t6992;
            double t6994 = 1/c;
            double t6995 = pow(t6983,1.0/3.0);
            double t6996 = 1/t6989;
            double t6997 = 1/(t6989*t6989);
            double t6998 = 1/pow(t6983,7.0/3.0);
            double t6999 = EcP_2-t6987;
            double t7000 = 1/(t6999*t6999);
            double t7001 = t6999*t6999;
            double t7002 = t6993*t6993;
            double t7003 = 1/(t6989*t6989*t6989);
            double t7004 = c*t6998*(4.0/9.0);
            double t7005 = EcP_3*c*t6991*t6998*(2.0/9.0);
            double t7006 = c*c;
            double t7007 = 1/pow(t6983,8.0/3.0);
            double t7008 = 1/pow(t6985,3.0/2.0);
            double t7047 = EcP_3*t7006*t7007*t7008*(1.0/3.6E1);
            double t7009 = t7004+t7005-t7047;
            double t7010 = t6987*2.0;
            double t7011 = EcP_3+t7010;
            double t7012 = EcP_4*4.0;
            double t7013 = EcP_3*EcP_3;
            double t7014 = t7012-t7013;
            double t7015 = 1/(t7011*t7011);
            double t7016 = t7014*t7015;
            double t7017 = t7016+1.0;
            double t7018 = EcP_2*4.0;
            double t7019 = EcP_3*2.0;
            double t7020 = t7018+t7019;
            double t7021 = t6993*t6997*t7001;
            double t7022 = c*t6991*t6986*t6996*t6999*(1.0/3.0);
            double t7023 = t7021+t7022;
            double t7024 = 1/t7017;
            double t7025 = c*t6986*t6996*(1.0/3.0);
            double t7043 = c*t6984*t6993*t6997;
            double t7026 = t7025-t7043;
            double t7027 = 1/(t7011*t7011*t7011);
            double t7028 = 1/(t7011*t7011*t7011*t7011*t7011);
            double t7029 = 1/(t7017*t7017);
            double t7030 = Ac_4*4.0;
            double t7031 = Ac_3*Ac_3;
            double t7032 = t7030-t7031;
            double t7033 = Ac_2-t6987;
            double t7034 = Ac_3*t6987;
            double t7035 = Ac_4+t6985+t7034;
            double t7036 = 1/t7035;
            double t7037 = sqrt(t7032);
            double t7038 = Ac_3+t7010;
            double t7039 = 1/t7038;
            double t7040 = t7037*t7039;
            double t7041 = atan(t7040);
            double t7042 = 1/sqrt(t7032);
            double t7044 = t6993*t6994*t6995*t7026;
            double t7045 = c*t6996*t6998*(4.0/9.0);
            double t7046 = c*t6984*t7002*t7003*2.0;
            double t7048 = t7045+t7046-c*t6993*t6986*t6997*(2.0/3.0)-c*t6984*t6997*t7009;
            double t7049 = t6994*t6995*t6989*t7048;
            double t7050 = EcP_2*EcP_2;
            double t7051 = EcP_2*EcP_3;
            double t7052 = EcP_4+t7050+t7051;
            double t7053 = 1/t7052;
            double t7054 = t6993*t7000*t7023;
            double t7055 = t7001*t7002*t7003*2.0;
            double t7056 = c*t6996*t6998*(1.0/1.8E1);
            double t7057 = t6996*t6999*t7006*t7007*t7008*(1.0/1.8E1);
            double t7058 = c*t6991*t6993*t6986*t6997*t6999*(2.0/3.0);
            double t7059 = t7055+t7056+t7057+t7058-t6997*t7001*t7009-c*t6991*t6996*t6998*t6999*(4.0/9.0);
            double t7060 = c*t6998*t7020*t7014*t7028*t7029*(2.0/9.0);
            double t7061 = 1/(t6999*t6999*t6999);
            double t7062 = c*t6991*t6986*t6989*t7023*t7061*(1.0/3.0);
            double t7063 = c*t6991*t6998*t7020*t7015*t7024*(4.0/9.0);
            double t7064 = t7060+t7062+t7054+t7063-t6989*t7000*t7059-c*t6998*t7020*t7024*t7027*(2.0/9.0)-t7020* \
               t7006*t7015*t7024*t7007*t7008*(1.0/1.8E1);
            double t7065 = EcP_2*EcP_3*t7053*t7064;
            double t7066 = 1/pow(t6983,2.0/3.0);
            double t7067 = EcP_3*c*t6998*t7024*t7027*(4.0/9.0);
            double t7068 = EcP_3*t7006*t7015*t7024*t7007*t7008*(1.0/9.0);
            double t7069 = t7044+t7065+t7049+t7067+t7068-t6994*t6989*t7026*t7066*(1.0/3.0)-EcP_3*c*t6991*t6998* \
               t7015*t7024*(8.0/9.0)-EcP_3*c*t6998*t7014*t7028*t7029*(4.0/9.0);
            double t7070 = EcP_1*t7069;
            double t7071 = 1/d2fz0;
            double t7072 = 1/(rho_a[index]*rho_a[index]);
            double t7073 = two_13*2.0;
            double t7074 = t7073-2.0;
            double t7075 = 1/t7074;
            double t7076 = c*t6984*t7036;
            double t7077 = log(t7076);
            double t7078 = Ac_3*t7041*t7042*2.0;
            double t7079 = t7033*t7033;
            double t7080 = t7036*t7079;
            double t7081 = log(t7080);
            double t7082 = Ac_2*4.0;
            double t7083 = Ac_3*2.0;
            double t7084 = t7082+t7083;
            double t7085 = t7041*t7042*t7084;
            double t7086 = t7081+t7085;
            double t7087 = Ac_2*Ac_2;
            double t7088 = Ac_2*Ac_3;
            double t7089 = Ac_4+t7087+t7088;
            double t7090 = 1/t7089;
            double t7091 = t7077+t7078-Ac_2*Ac_3*t7090*t7086;
            v_rho_a_rho_a_[index] = rho_a[index]*(t7070-Ac_1*t7071*t7072*t7091*t7075*(2.0/9.0))*2.0+rho_a[index]* \
               (t7070+Ac_1*t7071*t7072*t7091*t7075*(2.0/9.0))*2.0-EcP_1*(t6994*t6995*t6989*t7026+EcP_2*EcP_3*t7053* \
               (t6989*t7000*t7023+c*t6991*t6986*t7020*t7015*t7024*(1.0/3.0))-EcP_3*c*t6991*t6986*t7015*t7024*(2.0/ \
               3.0))*4.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void VWN5RPA_C_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4291 = rho_a[index]+rho_b[index];
            double t4292 = 1/pow(t4291,1.0/3.0);
            double t4293 = c*t4292;
            double t4294 = sqrt(t4293);
            double t4295 = EcP_4*4.0;
            double t4296 = EcP_3*EcP_3;
            double t4297 = t4295-t4296;
            double t4298 = EcP_2-t4294;
            double t4299 = EcP_3*t4294;
            double t4300 = EcP_4+t4293+t4299;
            double t4301 = 1/t4300;
            double t4302 = sqrt(t4297);
            double t4303 = t4294*2.0;
            double t4304 = EcP_3+t4303;
            double t4305 = 1/t4304;
            double t4306 = t4302*t4305;
            double t4307 = atan(t4306);
            double t4308 = 1/sqrt(t4297);
            double t4309 = rho_a[index]-rho_b[index];
            double t4310 = t4309*t4309;
            double t4311 = EcF_4*4.0;
            double t4312 = EcF_3*EcF_3;
            double t4313 = t4311-t4312;
            double t4314 = EcF_2-t4294;
            double t4315 = EcF_3*t4294;
            double t4316 = EcF_4+t4293+t4315;
            double t4317 = 1/t4316;
            double t4318 = sqrt(t4313);
            double t4319 = EcF_3+t4303;
            double t4320 = 1/t4319;
            double t4321 = t4320*t4318;
            double t4322 = atan(t4321);
            double t4323 = 1/sqrt(t4313);
            double t4324 = c*t4292*t4301;
            double t4325 = log(t4324);
            double t4326 = EcP_3*t4307*t4308*2.0;
            double t4327 = t4298*t4298;
            double t4328 = t4301*t4327;
            double t4329 = log(t4328);
            double t4330 = EcP_2*4.0;
            double t4331 = EcP_3*2.0;
            double t4332 = t4330+t4331;
            double t4333 = t4332*t4307*t4308;
            double t4334 = t4333+t4329;
            double t4335 = EcP_2*EcP_2;
            double t4336 = EcP_2*EcP_3;
            double t4337 = EcP_4+t4335+t4336;
            double t4338 = 1/t4337;
            double t4339 = t4325+t4326-EcP_2*EcP_3*t4334*t4338;
            double t4340 = EcP_1*t4339;
            double t4341 = Ac_4*4.0;
            double t4342 = Ac_3*Ac_3;
            double t4343 = t4341-t4342;
            double t4344 = Ac_2-t4294;
            double t4345 = Ac_3*t4294;
            double t4346 = Ac_4+t4293+t4345;
            double t4347 = 1/t4346;
            double t4348 = sqrt(t4343);
            double t4349 = Ac_3+t4303;
            double t4350 = 1/t4349;
            double t4351 = t4350*t4348;
            double t4352 = atan(t4351);
            double t4353 = 1/sqrt(t4343);
            double t4354 = 1/t4291;
            double t4355 = t4309*t4354;
            double t4356 = c*t4292*t4347;
            double t4357 = log(t4356);
            double t4358 = Ac_3*t4352*t4353*2.0;
            double t4359 = t4344*t4344;
            double t4360 = t4347*t4359;
            double t4361 = log(t4360);
            double t4362 = Ac_2*4.0;
            double t4363 = Ac_3*2.0;
            double t4364 = t4362+t4363;
            double t4365 = t4352*t4353*t4364;
            double t4366 = t4361+t4365;
            double t4367 = Ac_2*Ac_2;
            double t4368 = Ac_2*Ac_3;
            double t4369 = Ac_4+t4367+t4368;
            double t4370 = 1/t4369;
            double t4371 = t4357+t4358-Ac_2*Ac_3*t4370*t4366;
            functional_[index] = t4291*(t4340-(Ac_1*t4371*(1/(t4291*t4291*t4291*t4291)*(t4310*t4310)*((d2fz0* \
               (t4340-EcF_1*(log(c*t4292*t4317)+EcF_3*t4322*t4323*2.0-(EcF_2*EcF_3*(log((t4314*t4314)*t4317)+t4322* \
               t4323*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(Ac_1*t4371)+1.0)-1.0)*(pow(t4355+ \
               1.0,4.0/3.0)+pow(-t4355+1.0,4.0/3.0)-2.0))/(d2fz0*(two_13*2.0-2.0)));
        } else if (rho_a[index] > cutoff_) {
            double t6245 = rho_a[index]+rho_b[index];
            double t6246 = 1/pow(t6245,1.0/3.0);
            double t6247 = c*t6246;
            double t6248 = sqrt(t6247);
            double t6249 = EcP_4*4.0;
            double t6250 = EcP_3*EcP_3;
            double t6251 = -t6250+t6249;
            double t6252 = EcP_2-t6248;
            double t6253 = EcP_3*t6248;
            double t6254 = EcP_4+t6253+t6247;
            double t6255 = 1/t6254;
            double t6256 = sqrt(t6251);
            double t6257 = t6248*2.0;
            double t6258 = EcP_3+t6257;
            double t6259 = 1/t6258;
            double t6260 = t6256*t6259;
            double t6261 = atan(t6260);
            double t6262 = 1/sqrt(t6251);
            double t6263 = EcF_4*4.0;
            double t6264 = EcF_3*EcF_3;
            double t6265 = t6263-t6264;
            double t6266 = EcF_2-t6248;
            double t6267 = EcF_3*t6248;
            double t6268 = EcF_4+t6247+t6267;
            double t6269 = 1/t6268;
            double t6270 = sqrt(t6265);
            double t6271 = EcF_3+t6257;
            double t6272 = 1/t6271;
            double t6273 = t6270*t6272;
            double t6274 = atan(t6273);
            double t6275 = 1/sqrt(t6265);
            double t6276 = c*t6246*t6255;
            double t6277 = log(t6276);
            double t6278 = EcP_3*t6261*t6262*2.0;
            double t6279 = t6252*t6252;
            double t6280 = t6255*t6279;
            double t6281 = log(t6280);
            double t6282 = EcP_2*4.0;
            double t6283 = EcP_3*2.0;
            double t6284 = t6282+t6283;
            double t6285 = t6261*t6262*t6284;
            double t6286 = t6281+t6285;
            double t6287 = EcP_2*EcP_2;
            double t6288 = EcP_2*EcP_3;
            double t6289 = EcP_4+t6287+t6288;
            double t6290 = 1/t6289;
            double t6291 = t6277+t6278-EcP_2*EcP_3*t6290*t6286;
            double t6292 = EcP_1*t6291;
            functional_[index] = t6245*(t6292-((pow(2.0,1.0/3.0)*2.0-2.0)*(t6292-EcF_1*(log(c*t6246*t6269)+EcF_3* \
               t6274*t6275*2.0-(EcF_2*EcF_3*(log((t6266*t6266)*t6269)+t6274*t6275*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else if (rho_b[index] > cutoff_) {
            double t5601 = rho_a[index]+rho_b[index];
            double t5602 = 1/pow(t5601,1.0/3.0);
            double t5603 = c*t5602;
            double t5604 = sqrt(t5603);
            double t5605 = EcP_4*4.0;
            double t5606 = EcP_3*EcP_3;
            double t5607 = t5605-t5606;
            double t5608 = EcP_2-t5604;
            double t5609 = EcP_3*t5604;
            double t5610 = EcP_4+t5603+t5609;
            double t5611 = 1/t5610;
            double t5612 = sqrt(t5607);
            double t5613 = t5604*2.0;
            double t5614 = EcP_3+t5613;
            double t5615 = 1/t5614;
            double t5616 = t5612*t5615;
            double t5617 = atan(t5616);
            double t5618 = 1/sqrt(t5607);
            double t5619 = EcF_4*4.0;
            double t5620 = EcF_3*EcF_3;
            double t5621 = -t5620+t5619;
            double t5622 = EcF_2-t5604;
            double t5623 = EcF_3*t5604;
            double t5624 = EcF_4+t5603+t5623;
            double t5625 = 1/t5624;
            double t5626 = sqrt(t5621);
            double t5627 = EcF_3+t5613;
            double t5628 = 1/t5627;
            double t5629 = t5626*t5628;
            double t5630 = atan(t5629);
            double t5631 = 1/sqrt(t5621);
            double t5632 = c*t5602*t5611;
            double t5633 = log(t5632);
            double t5634 = EcP_3*t5617*t5618*2.0;
            double t5635 = t5608*t5608;
            double t5636 = t5611*t5635;
            double t5637 = log(t5636);
            double t5638 = EcP_2*4.0;
            double t5639 = EcP_3*2.0;
            double t5640 = t5638+t5639;
            double t5641 = t5640*t5617*t5618;
            double t5642 = t5641+t5637;
            double t5643 = EcP_2*EcP_2;
            double t5644 = EcP_2*EcP_3;
            double t5645 = EcP_4+t5643+t5644;
            double t5646 = 1/t5645;
            double t5647 = t5633+t5634-EcP_2*EcP_3*t5642*t5646;
            double t5648 = EcP_1*t5647;
            functional_[index] = t5601*(t5648-((pow(2.0,1.0/3.0)*2.0-2.0)*(t5648-EcF_1*(log(c*t5602*t5625)+EcF_3* \
               t5630*t5631*2.0-(EcF_2*EcF_3*(log((t5622*t5622)*t5625)+t5630*t5631*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4373 = rho_a[index]+rho_b[index];
            double t4374 = 1/pow(t4373,1.0/3.0);
            double t4375 = c*t4374;
            double t4376 = sqrt(t4375);
            double t4377 = EcP_4*4.0;
            double t4378 = EcP_3*EcP_3;
            double t4379 = t4377-t4378;
            double t4380 = EcP_2-t4376;
            double t4381 = EcP_3*t4376;
            double t4382 = EcP_4+t4381+t4375;
            double t4383 = 1/t4382;
            double t4384 = sqrt(t4379);
            double t4385 = t4376*2.0;
            double t4386 = EcP_3+t4385;
            double t4387 = 1/t4386;
            double t4388 = t4384*t4387;
            double t4389 = atan(t4388);
            double t4390 = 1/sqrt(t4379);
            double t4391 = 1/pow(t4373,4.0/3.0);
            double t4392 = c*t4391*(1.0/3.0);
            double t4393 = 1/sqrt(t4375);
            double t4394 = EcP_3*c*t4391*t4393*(1.0/6.0);
            double t4395 = t4392+t4394;
            double t4396 = t4380*t4380;
            double t4397 = 1/(t4382*t4382);
            double t4398 = EcP_2*4.0;
            double t4399 = EcP_3*2.0;
            double t4400 = t4398+t4399;
            double t4401 = 1/(t4386*t4386);
            double t4402 = EcP_2*EcP_2;
            double t4403 = EcP_2*EcP_3;
            double t4404 = EcP_4+t4402+t4403;
            double t4405 = 1/t4404;
            double t4406 = t4379*t4401;
            double t4407 = t4406+1.0;
            double t4408 = 1/t4407;
            double t4409 = 1/t4373;
            double t4410 = rho_a[index]-rho_b[index];
            double t4411 = t4410*t4409;
            double t4412 = Ac_4*4.0;
            double t4413 = Ac_3*Ac_3;
            double t4414 = t4412-t4413;
            double t4415 = Ac_2-t4376;
            double t4416 = Ac_3*t4376;
            double t4417 = Ac_4+t4375+t4416;
            double t4418 = 1/t4417;
            double t4419 = sqrt(t4414);
            double t4420 = Ac_3+t4385;
            double t4421 = 1/t4420;
            double t4422 = t4421*t4419;
            double t4423 = atan(t4422);
            double t4424 = 1/sqrt(t4414);
            double t4425 = 1/c;
            double t4426 = EcF_3*t4376;
            double t4427 = EcF_4+t4375+t4426;
            double t4428 = pow(t4373,1.0/3.0);
            double t4429 = EcF_3*c*t4391*t4393*(1.0/6.0);
            double t4430 = t4392+t4429;
            double t4431 = EcF_2-t4376;
            double t4432 = 1/(t4427*t4427);
            double t4433 = 1/t4427;
            double t4434 = EcF_3+t4385;
            double t4435 = 1/(t4434*t4434);
            double t4436 = EcF_4*4.0;
            double t4437 = EcF_3*EcF_3;
            double t4438 = t4436-t4437;
            double t4439 = t4435*t4438;
            double t4440 = t4439+1.0;
            double t4441 = 1/t4440;
            double t4442 = c*t4391*t4383*(1.0/3.0);
            double t4443 = t4442-c*t4374*t4395*t4397;
            double t4444 = t4382*t4425*t4443*t4428;
            double t4445 = t4395*t4396*t4397;
            double t4446 = c*t4380*t4391*t4383*t4393*(1.0/3.0);
            double t4447 = t4445+t4446;
            double t4448 = 1/(t4380*t4380);
            double t4449 = t4382*t4447*t4448;
            double t4450 = c*t4391*t4393*t4400*t4401*t4408*(1.0/3.0);
            double t4451 = t4450+t4449;
            double t4452 = EcP_2*EcP_3*t4405*t4451;
            double t4453 = t4452+t4444-EcP_3*c*t4391*t4393*t4401*t4408*(2.0/3.0);
            double t4454 = EcP_1*t4453;
            double t4455 = c*t4374*t4418;
            double t4456 = log(t4455);
            double t4457 = Ac_3*t4423*t4424*2.0;
            double t4458 = t4415*t4415;
            double t4459 = t4418*t4458;
            double t4460 = log(t4459);
            double t4461 = Ac_2*4.0;
            double t4462 = Ac_3*2.0;
            double t4463 = t4461+t4462;
            double t4464 = t4423*t4424*t4463;
            double t4465 = t4460+t4464;
            double t4466 = Ac_2*Ac_2;
            double t4467 = Ac_2*Ac_3;
            double t4468 = Ac_4+t4466+t4467;
            double t4469 = 1/t4468;
            double t4494 = Ac_2*Ac_3*t4465*t4469;
            double t4470 = t4456+t4457-t4494;
            double t4471 = 1/Ac_1;
            double t4472 = t4431*t4431;
            double t4473 = sqrt(t4438);
            double t4474 = 1/t4434;
            double t4475 = t4473*t4474;
            double t4476 = atan(t4475);
            double t4477 = 1/sqrt(t4438);
            double t4478 = EcF_2*4.0;
            double t4479 = EcF_3*2.0;
            double t4480 = t4478+t4479;
            double t4481 = EcF_2*EcF_2;
            double t4482 = EcF_2*EcF_3;
            double t4483 = EcF_4+t4481+t4482;
            double t4484 = 1/t4483;
            double t4485 = c*t4374*t4383;
            double t4486 = log(t4485);
            double t4487 = EcP_3*t4390*t4389*2.0;
            double t4488 = t4383*t4396;
            double t4489 = log(t4488);
            double t4490 = t4390*t4389*t4400;
            double t4491 = t4490+t4489;
            double t4512 = EcP_2*EcP_3*t4405*t4491;
            double t4492 = t4486+t4487-t4512;
            double t4493 = EcP_1*t4492;
            double t4495 = Ac_3*c*t4391*t4393*(1.0/6.0);
            double t4496 = t4392+t4495;
            double t4497 = 1/(t4417*t4417);
            double t4498 = 1/(t4420*t4420);
            double t4499 = t4414*t4498;
            double t4500 = t4499+1.0;
            double t4501 = 1/t4500;
            double t4502 = t4410*t4410;
            double t4503 = 1/(t4373*t4373*t4373*t4373);
            double t4504 = c*t4374*t4433;
            double t4505 = log(t4504);
            double t4506 = EcF_3*t4476*t4477*2.0;
            double t4507 = t4433*t4472;
            double t4508 = log(t4507);
            double t4509 = t4480*t4476*t4477;
            double t4510 = t4508+t4509;
            double t4516 = EcF_2*EcF_3*t4484*t4510;
            double t4511 = t4505+t4506-t4516;
            double t4513 = 1/t4470;
            double t4517 = EcF_1*t4511;
            double t4514 = t4493-t4517;
            double t4515 = t4502*t4502;
            double t4518 = d2fz0*t4471*t4513*t4514;
            double t4519 = t4518+1.0;
            double t4520 = 1/d2fz0;
            double t4521 = two_13*2.0;
            double t4522 = t4521-2.0;
            double t4523 = 1/t4522;
            double t4524 = t4411+1.0;
            double t4525 = pow(t4524,4.0/3.0);
            double t4526 = -t4411+1.0;
            double t4527 = pow(t4526,4.0/3.0);
            double t4528 = t4525+t4527-2.0;
            double t4529 = c*t4391*t4418*(1.0/3.0);
            double t4530 = t4529-c*t4374*t4496*t4497;
            double t4531 = t4425*t4417*t4428*t4530;
            double t4532 = t4458*t4496*t4497;
            double t4533 = c*t4391*t4393*t4415*t4418*(1.0/3.0);
            double t4534 = t4532+t4533;
            double t4535 = 1/(t4415*t4415);
            double t4536 = t4417*t4534*t4535;
            double t4537 = c*t4391*t4393*t4463*t4498*t4501*(1.0/3.0);
            double t4538 = t4536+t4537;
            double t4539 = Ac_2*Ac_3*t4469*t4538;
            double t4540 = t4531+t4539-Ac_3*c*t4391*t4393*t4498*t4501*(2.0/3.0);
            double t4541 = 1/(t4373*t4373);
            double t4542 = t4409-t4410*t4541;
            double t4543 = t4503*t4515*t4519;
            double t4544 = t4543-1.0;
            v_rho_a_[index] = t4493-t4373*(t4454-Ac_1*t4470*t4520*t4523*t4528*(1/(t4373*t4373*t4373*t4373*t4373) \
               *t4515*t4519*4.0+t4503*t4515*(d2fz0*t4471*t4513*(t4454-EcF_1*(EcF_2*EcF_3*t4484*(1/(t4431*t4431)*t4427* \
               (t4430*t4432*t4472+c*t4391*t4393*t4431*t4433*(1.0/3.0))+c*t4391*t4393*t4441*t4435*t4480*(1.0/3.0)) \
               +t4425*t4427*t4428*(c*t4391*t4433*(1.0/3.0)-c*t4374*t4430*t4432)-EcF_3*c*t4391*t4393*t4441*t4435*(2.0/ \
               3.0)))-d2fz0*1/(t4470*t4470)*t4471*t4540*t4514)-t4410*t4502*t4503*t4519*4.0)+Ac_1*t4470*t4520*t4523* \
               t4544*(pow(t4524,1.0/3.0)*t4542*(4.0/3.0)-t4542*pow(t4526,1.0/3.0)*(4.0/3.0))-Ac_1*t4520*t4540*t4523* \
               t4544*t4528)-Ac_1*t4470*t4520*t4523*t4544*t4528;
        } else if (rho_a[index] > cutoff_) {
            double t6294 = rho_a[index]+rho_b[index];
            double t6295 = 1/pow(t6294,1.0/3.0);
            double t6296 = c*t6295;
            double t6297 = sqrt(t6296);
            double t6298 = EcP_4*4.0;
            double t6299 = EcP_3*EcP_3;
            double t6300 = t6298-t6299;
            double t6301 = EcP_2-t6297;
            double t6302 = EcP_3*t6297;
            double t6303 = EcP_4+t6296+t6302;
            double t6304 = 1/t6303;
            double t6305 = sqrt(t6300);
            double t6306 = t6297*2.0;
            double t6307 = EcP_3+t6306;
            double t6308 = 1/t6307;
            double t6309 = t6305*t6308;
            double t6310 = atan(t6309);
            double t6311 = 1/sqrt(t6300);
            double t6312 = 1/pow(t6294,4.0/3.0);
            double t6313 = c*t6312*(1.0/3.0);
            double t6314 = 1/sqrt(t6296);
            double t6315 = EcP_3*c*t6312*t6314*(1.0/6.0);
            double t6316 = t6313+t6315;
            double t6317 = t6301*t6301;
            double t6318 = 1/(t6303*t6303);
            double t6319 = EcP_2*4.0;
            double t6320 = EcP_3*2.0;
            double t6321 = t6320+t6319;
            double t6322 = 1/(t6307*t6307);
            double t6323 = EcP_2*EcP_2;
            double t6324 = EcP_2*EcP_3;
            double t6325 = EcP_4+t6323+t6324;
            double t6326 = 1/t6325;
            double t6327 = t6300*t6322;
            double t6328 = t6327+1.0;
            double t6329 = 1/t6328;
            double t6330 = 1/c;
            double t6331 = EcF_3*t6297;
            double t6332 = EcF_4+t6296+t6331;
            double t6333 = pow(t6294,1.0/3.0);
            double t6334 = EcF_3*c*t6312*t6314*(1.0/6.0);
            double t6335 = t6313+t6334;
            double t6336 = EcF_2-t6297;
            double t6337 = 1/(t6332*t6332);
            double t6338 = 1/t6332;
            double t6339 = EcF_3+t6306;
            double t6340 = 1/(t6339*t6339);
            double t6341 = EcF_4*4.0;
            double t6342 = EcF_3*EcF_3;
            double t6343 = t6341-t6342;
            double t6344 = t6340*t6343;
            double t6345 = t6344+1.0;
            double t6346 = 1/t6345;
            double t6347 = c*t6312*t6304*(1.0/3.0);
            double t6348 = t6347-c*t6295*t6316*t6318;
            double t6349 = t6303*t6330*t6333*t6348;
            double t6350 = t6316*t6317*t6318;
            double t6351 = c*t6301*t6312*t6304*t6314*(1.0/3.0);
            double t6352 = t6350+t6351;
            double t6353 = 1/(t6301*t6301);
            double t6354 = t6303*t6352*t6353;
            double t6355 = c*t6312*t6321*t6322*t6314*t6329*(1.0/3.0);
            double t6356 = t6354+t6355;
            double t6357 = EcP_2*EcP_3*t6326*t6356;
            double t6358 = t6357+t6349-EcP_3*c*t6312*t6322*t6314*t6329*(2.0/3.0);
            double t6359 = EcP_1*t6358;
            double t6360 = pow(2.0,1.0/3.0);
            double t6361 = t6360*2.0;
            double t6362 = t6361-2.0;
            double t6363 = two_13*2.0;
            double t6364 = t6363-2.0;
            double t6365 = 1/t6364;
            double t6366 = t6336*t6336;
            double t6367 = sqrt(t6343);
            double t6368 = 1/t6339;
            double t6369 = t6367*t6368;
            double t6370 = atan(t6369);
            double t6371 = 1/sqrt(t6343);
            double t6372 = EcF_2*4.0;
            double t6373 = EcF_3*2.0;
            double t6374 = t6372+t6373;
            double t6375 = EcF_2*EcF_2;
            double t6376 = EcF_2*EcF_3;
            double t6377 = EcF_4+t6375+t6376;
            double t6378 = 1/t6377;
            double t6379 = c*t6295*t6304;
            double t6380 = log(t6379);
            double t6381 = EcP_3*t6310*t6311*2.0;
            double t6382 = t6304*t6317;
            double t6383 = log(t6382);
            double t6384 = t6310*t6311*t6321;
            double t6385 = t6383+t6384;
            double t6386 = t6380+t6381-EcP_2*EcP_3*t6326*t6385;
            double t6387 = EcP_1*t6386;
            v_rho_a_[index] = t6387-t6294*(t6359-t6362*t6365*(t6359-EcF_1*(EcF_2*EcF_3*t6378*(t6332*1/(t6336* \
               t6336)*(t6335*t6337*t6366+c*t6312*t6314*t6336*t6338*(1.0/3.0))+c*t6312*t6340*t6314*t6346*t6374*(1.0/ \
               3.0))+t6330*t6332*t6333*(c*t6312*t6338*(1.0/3.0)-c*t6295*t6335*t6337)-EcF_3*c*t6312*t6340*t6314*t6346* \
               (2.0/3.0))))-t6362*t6365*(t6387-EcF_1*(log(c*t6295*t6338)+EcF_3*t6370*t6371*2.0-EcF_2*EcF_3*t6378* \
               (log(t6338*t6366)+t6370*t6371*t6374)));
        } else if (rho_b[index] > cutoff_) {
            double t5650 = rho_a[index]+rho_b[index];
            double t5651 = 1/pow(t5650,1.0/3.0);
            double t5652 = c*t5651;
            double t5653 = sqrt(t5652);
            double t5654 = EcP_4*4.0;
            double t5655 = EcP_3*EcP_3;
            double t5656 = t5654-t5655;
            double t5657 = EcP_2-t5653;
            double t5658 = EcP_3*t5653;
            double t5659 = EcP_4+t5652+t5658;
            double t5660 = 1/t5659;
            double t5661 = sqrt(t5656);
            double t5662 = t5653*2.0;
            double t5663 = EcP_3+t5662;
            double t5664 = 1/t5663;
            double t5665 = t5661*t5664;
            double t5666 = atan(t5665);
            double t5667 = 1/sqrt(t5656);
            double t5668 = 1/pow(t5650,4.0/3.0);
            double t5669 = c*t5668*(1.0/3.0);
            double t5670 = 1/sqrt(t5652);
            double t5671 = EcP_3*c*t5670*t5668*(1.0/6.0);
            double t5672 = t5671+t5669;
            double t5673 = t5657*t5657;
            double t5674 = 1/(t5659*t5659);
            double t5675 = EcP_2*4.0;
            double t5676 = EcP_3*2.0;
            double t5677 = t5675+t5676;
            double t5678 = 1/(t5663*t5663);
            double t5679 = EcP_2*EcP_2;
            double t5680 = EcP_2*EcP_3;
            double t5681 = EcP_4+t5680+t5679;
            double t5682 = 1/t5681;
            double t5683 = t5656*t5678;
            double t5684 = t5683+1.0;
            double t5685 = 1/t5684;
            double t5686 = 1/c;
            double t5687 = EcF_3*t5653;
            double t5688 = EcF_4+t5652+t5687;
            double t5689 = pow(t5650,1.0/3.0);
            double t5690 = EcF_3*c*t5670*t5668*(1.0/6.0);
            double t5691 = t5690+t5669;
            double t5692 = EcF_2-t5653;
            double t5693 = 1/(t5688*t5688);
            double t5694 = 1/t5688;
            double t5695 = EcF_3+t5662;
            double t5696 = 1/(t5695*t5695);
            double t5697 = EcF_4*4.0;
            double t5698 = EcF_3*EcF_3;
            double t5699 = t5697-t5698;
            double t5700 = t5696*t5699;
            double t5701 = t5700+1.0;
            double t5702 = 1/t5701;
            double t5703 = c*t5660*t5668*(1.0/3.0);
            double t5704 = t5703-c*t5651*t5672*t5674;
            double t5705 = t5659*t5686*t5689*t5704;
            double t5706 = t5672*t5673*t5674;
            double t5707 = c*t5660*t5670*t5657*t5668*(1.0/3.0);
            double t5708 = t5706+t5707;
            double t5709 = 1/(t5657*t5657);
            double t5710 = t5659*t5708*t5709;
            double t5711 = c*t5670*t5685*t5668*t5677*t5678*(1.0/3.0);
            double t5712 = t5710+t5711;
            double t5713 = EcP_2*EcP_3*t5682*t5712;
            double t5714 = t5713+t5705-EcP_3*c*t5670*t5685*t5668*t5678*(2.0/3.0);
            double t5715 = EcP_1*t5714;
            double t5716 = pow(2.0,1.0/3.0);
            double t5717 = t5716*2.0;
            double t5718 = t5717-2.0;
            double t5719 = two_13*2.0;
            double t5720 = t5719-2.0;
            double t5721 = 1/t5720;
            double t5722 = t5692*t5692;
            double t5723 = sqrt(t5699);
            double t5724 = 1/t5695;
            double t5725 = t5723*t5724;
            double t5726 = atan(t5725);
            double t5727 = 1/sqrt(t5699);
            double t5728 = EcF_2*4.0;
            double t5729 = EcF_3*2.0;
            double t5730 = t5728+t5729;
            double t5731 = EcF_2*EcF_2;
            double t5732 = EcF_2*EcF_3;
            double t5733 = EcF_4+t5731+t5732;
            double t5734 = 1/t5733;
            double t5735 = c*t5651*t5660;
            double t5736 = log(t5735);
            double t5737 = EcP_3*t5666*t5667*2.0;
            double t5738 = t5660*t5673;
            double t5739 = log(t5738);
            double t5740 = t5666*t5667*t5677;
            double t5741 = t5740+t5739;
            double t5742 = t5736+t5737-EcP_2*EcP_3*t5682*t5741;
            double t5743 = EcP_1*t5742;
            v_rho_a_[index] = t5743-t5650*(t5715-t5721*t5718*(t5715-EcF_1*(EcF_2*EcF_3*t5734*(1/(t5692*t5692) \
               *t5688*(t5691*t5693*t5722+c*t5670*t5692*t5694*t5668*(1.0/3.0))+c*t5670*t5668*t5696*t5702*t5730*(1.0/ \
               3.0))+t5686*t5688*t5689*(c*t5694*t5668*(1.0/3.0)-c*t5651*t5691*t5693)-EcF_3*c*t5670*t5668*t5696*t5702* \
               (2.0/3.0))))-t5721*t5718*(t5743-EcF_1*(log(c*t5651*t5694)+EcF_3*t5726*t5727*2.0-EcF_2*EcF_3*t5734* \
               (log(t5694*t5722)+t5730*t5726*t5727)));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4546 = rho_a[index]+rho_b[index];
            double t4547 = 1/pow(t4546,1.0/3.0);
            double t4548 = c*t4547;
            double t4549 = sqrt(t4548);
            double t4550 = EcP_4*4.0;
            double t4551 = EcP_3*EcP_3;
            double t4552 = t4550-t4551;
            double t4553 = EcP_2-t4549;
            double t4554 = EcP_3*t4549;
            double t4555 = EcP_4+t4554+t4548;
            double t4556 = 1/t4555;
            double t4557 = sqrt(t4552);
            double t4558 = t4549*2.0;
            double t4559 = EcP_3+t4558;
            double t4560 = 1/t4559;
            double t4561 = t4560*t4557;
            double t4562 = atan(t4561);
            double t4563 = 1/sqrt(t4552);
            double t4564 = 1/pow(t4546,4.0/3.0);
            double t4565 = c*t4564*(1.0/3.0);
            double t4566 = 1/sqrt(t4548);
            double t4567 = EcP_3*c*t4564*t4566*(1.0/6.0);
            double t4568 = t4565+t4567;
            double t4569 = t4553*t4553;
            double t4570 = 1/(t4555*t4555);
            double t4571 = EcP_2*4.0;
            double t4572 = EcP_3*2.0;
            double t4573 = t4571+t4572;
            double t4574 = 1/(t4559*t4559);
            double t4575 = EcP_2*EcP_2;
            double t4576 = EcP_2*EcP_3;
            double t4577 = EcP_4+t4575+t4576;
            double t4578 = 1/t4577;
            double t4579 = t4552*t4574;
            double t4580 = t4579+1.0;
            double t4581 = 1/t4580;
            double t4582 = 1/t4546;
            double t4583 = rho_a[index]-rho_b[index];
            double t4584 = t4582*t4583;
            double t4585 = Ac_4*4.0;
            double t4586 = Ac_3*Ac_3;
            double t4587 = t4585-t4586;
            double t4588 = Ac_2-t4549;
            double t4589 = Ac_3*t4549;
            double t4590 = Ac_4+t4548+t4589;
            double t4591 = 1/t4590;
            double t4592 = sqrt(t4587);
            double t4593 = Ac_3+t4558;
            double t4594 = 1/t4593;
            double t4595 = t4592*t4594;
            double t4596 = atan(t4595);
            double t4597 = 1/sqrt(t4587);
            double t4598 = 1/c;
            double t4599 = EcF_3*t4549;
            double t4600 = EcF_4+t4548+t4599;
            double t4601 = pow(t4546,1.0/3.0);
            double t4602 = EcF_3*c*t4564*t4566*(1.0/6.0);
            double t4603 = t4565+t4602;
            double t4604 = EcF_2-t4549;
            double t4605 = 1/(t4600*t4600);
            double t4606 = 1/t4600;
            double t4607 = EcF_3+t4558;
            double t4608 = 1/(t4607*t4607);
            double t4609 = EcF_4*4.0;
            double t4610 = EcF_3*EcF_3;
            double t4611 = t4610-t4609;
            double t4612 = t4611*t4608;
            double t4613 = t4612-1.0;
            double t4614 = 1/t4613;
            double t4615 = c*t4564*t4556*(1.0/3.0);
            double t4616 = t4615-c*t4570*t4547*t4568;
            double t4617 = t4555*t4598*t4601*t4616;
            double t4618 = t4570*t4568*t4569;
            double t4619 = c*t4553*t4564*t4556*t4566*(1.0/3.0);
            double t4620 = t4618+t4619;
            double t4621 = 1/(t4553*t4553);
            double t4622 = t4555*t4620*t4621;
            double t4623 = c*t4581*t4564*t4573*t4574*t4566*(1.0/3.0);
            double t4624 = t4622+t4623;
            double t4625 = EcP_2*EcP_3*t4578*t4624;
            double t4626 = t4625+t4617-EcP_3*c*t4581*t4564*t4574*t4566*(2.0/3.0);
            double t4627 = EcP_1*t4626;
            double t4628 = c*t4591*t4547;
            double t4629 = log(t4628);
            double t4630 = Ac_3*t4596*t4597*2.0;
            double t4631 = t4588*t4588;
            double t4632 = t4591*t4631;
            double t4633 = log(t4632);
            double t4634 = Ac_2*4.0;
            double t4635 = Ac_3*2.0;
            double t4636 = t4634+t4635;
            double t4637 = t4596*t4597*t4636;
            double t4638 = t4633+t4637;
            double t4639 = Ac_2*Ac_2;
            double t4640 = Ac_2*Ac_3;
            double t4641 = Ac_4+t4640+t4639;
            double t4642 = 1/t4641;
            double t4668 = Ac_2*Ac_3*t4642*t4638;
            double t4643 = t4630+t4629-t4668;
            double t4644 = 1/Ac_1;
            double t4645 = -t4610+t4609;
            double t4646 = t4604*t4604;
            double t4647 = sqrt(t4645);
            double t4648 = 1/t4607;
            double t4649 = t4647*t4648;
            double t4650 = atan(t4649);
            double t4651 = 1/sqrt(t4645);
            double t4652 = EcF_2*4.0;
            double t4653 = EcF_3*2.0;
            double t4654 = t4652+t4653;
            double t4655 = EcF_2*EcF_2;
            double t4656 = EcF_2*EcF_3;
            double t4657 = EcF_4+t4655+t4656;
            double t4658 = 1/t4657;
            double t4659 = c*t4547*t4556;
            double t4660 = log(t4659);
            double t4661 = EcP_3*t4562*t4563*2.0;
            double t4662 = t4556*t4569;
            double t4663 = log(t4662);
            double t4664 = t4562*t4563*t4573;
            double t4665 = t4663+t4664;
            double t4686 = EcP_2*EcP_3*t4578*t4665;
            double t4666 = t4660+t4661-t4686;
            double t4667 = EcP_1*t4666;
            double t4669 = Ac_3*c*t4564*t4566*(1.0/6.0);
            double t4670 = t4565+t4669;
            double t4671 = 1/(t4590*t4590);
            double t4672 = 1/(t4593*t4593);
            double t4673 = t4587*t4672;
            double t4674 = t4673+1.0;
            double t4675 = 1/t4674;
            double t4676 = t4583*t4583;
            double t4677 = 1/(t4546*t4546*t4546*t4546);
            double t4678 = c*t4547*t4606;
            double t4679 = log(t4678);
            double t4680 = EcF_3*t4650*t4651*2.0;
            double t4681 = t4606*t4646;
            double t4682 = log(t4681);
            double t4683 = t4650*t4651*t4654;
            double t4684 = t4682+t4683;
            double t4690 = EcF_2*EcF_3*t4684*t4658;
            double t4685 = t4680-t4690+t4679;
            double t4687 = 1/t4643;
            double t4691 = EcF_1*t4685;
            double t4688 = -t4691+t4667;
            double t4689 = t4676*t4676;
            double t4692 = 1/d2fz0;
            double t4693 = two_13*2.0;
            double t4694 = t4693-2.0;
            double t4695 = 1/t4694;
            double t4696 = t4691-t4667;
            double t4697 = d2fz0*t4644*t4687*t4696;
            double t4698 = t4697-1.0;
            double t4699 = t4584+1.0;
            double t4700 = pow(t4699,4.0/3.0);
            double t4701 = -t4584+1.0;
            double t4702 = pow(t4701,4.0/3.0);
            double t4703 = t4700+t4702-2.0;
            double t4704 = c*t4564*t4591*(1.0/3.0);
            double t4705 = t4704-c*t4547*t4670*t4671;
            double t4706 = t4590*t4598*t4601*t4705;
            double t4707 = t4631*t4670*t4671;
            double t4708 = c*t4564*t4591*t4566*t4588*(1.0/3.0);
            double t4709 = t4707+t4708;
            double t4710 = 1/(t4588*t4588);
            double t4711 = t4590*t4710*t4709;
            double t4712 = c*t4564*t4566*t4636*t4672*t4675*(1.0/3.0);
            double t4713 = t4711+t4712;
            double t4714 = Ac_2*Ac_3*t4642*t4713;
            double t4715 = t4714+t4706-Ac_3*c*t4564*t4566*t4672*t4675*(2.0/3.0);
            double t4716 = 1/(t4546*t4546);
            double t4717 = t4583*t4716;
            double t4718 = t4582+t4717;
            double t4719 = t4677*t4689*t4698;
            double t4720 = t4719+1.0;
            v_rho_b_[index] = t4667-t4546*(t4627+Ac_1*t4643*t4692*t4695*t4720*(pow(t4699,1.0/3.0)*t4718*(4.0/ \
               3.0)-pow(t4701,1.0/3.0)*t4718*(4.0/3.0))-Ac_1*t4643*t4692*t4695*t4703*(1/(t4546*t4546*t4546*t4546* \
               t4546)*t4689*t4698*-4.0+t4677*t4689*(d2fz0*t4644*t4687*(t4627-EcF_1*(EcF_2*EcF_3*t4658*(t4600*1/(t4604* \
               t4604)*(t4603*t4605*t4646+c*t4564*t4566*t4604*t4606*(1.0/3.0))-c*t4564*t4566*t4614*t4608*t4654*(1.0/ \
               3.0))+t4598*t4600*t4601*(c*t4564*t4606*(1.0/3.0)-c*t4547*t4603*t4605)+EcF_3*c*t4564*t4566*t4614*t4608* \
               (2.0/3.0)))-d2fz0*1/(t4643*t4643)*t4644*t4688*t4715)+t4583*t4676*t4677*(d2fz0*t4644*t4687*t4688+1.0) \
               *4.0)+Ac_1*t4692*t4695*t4720*t4703*t4715)+Ac_1*t4643*t4692*t4695*t4720*t4703;
        } else if (rho_a[index] > cutoff_) {
            double t6389 = rho_a[index]+rho_b[index];
            double t6390 = 1/pow(t6389,1.0/3.0);
            double t6391 = c*t6390;
            double t6392 = sqrt(t6391);
            double t6393 = EcP_4*4.0;
            double t6394 = EcP_3*EcP_3;
            double t6395 = t6393-t6394;
            double t6396 = EcP_2-t6392;
            double t6397 = EcP_3*t6392;
            double t6398 = EcP_4+t6391+t6397;
            double t6399 = 1/t6398;
            double t6400 = sqrt(t6395);
            double t6401 = t6392*2.0;
            double t6402 = EcP_3+t6401;
            double t6403 = 1/t6402;
            double t6404 = t6400*t6403;
            double t6405 = atan(t6404);
            double t6406 = 1/sqrt(t6395);
            double t6407 = 1/pow(t6389,4.0/3.0);
            double t6408 = c*t6407*(1.0/3.0);
            double t6409 = 1/sqrt(t6391);
            double t6410 = EcP_3*c*t6407*t6409*(1.0/6.0);
            double t6411 = t6410+t6408;
            double t6412 = t6396*t6396;
            double t6413 = 1/(t6398*t6398);
            double t6414 = EcP_2*4.0;
            double t6415 = EcP_3*2.0;
            double t6416 = t6414+t6415;
            double t6417 = 1/(t6402*t6402);
            double t6418 = EcP_2*EcP_2;
            double t6419 = EcP_2*EcP_3;
            double t6420 = EcP_4+t6418+t6419;
            double t6421 = 1/t6420;
            double t6422 = t6395*t6417;
            double t6423 = t6422+1.0;
            double t6424 = 1/t6423;
            double t6425 = 1/c;
            double t6426 = EcF_3*t6392;
            double t6427 = EcF_4+t6391+t6426;
            double t6428 = pow(t6389,1.0/3.0);
            double t6429 = EcF_3*c*t6407*t6409*(1.0/6.0);
            double t6430 = t6408+t6429;
            double t6431 = EcF_2-t6392;
            double t6432 = 1/(t6427*t6427);
            double t6433 = 1/t6427;
            double t6434 = EcF_3+t6401;
            double t6435 = 1/(t6434*t6434);
            double t6436 = EcF_4*4.0;
            double t6437 = EcF_3*EcF_3;
            double t6438 = t6436-t6437;
            double t6439 = t6435*t6438;
            double t6440 = t6439+1.0;
            double t6441 = 1/t6440;
            double t6442 = c*t6399*t6407*(1.0/3.0);
            double t6443 = t6442-c*t6390*t6411*t6413;
            double t6444 = t6398*t6425*t6443*t6428;
            double t6445 = t6411*t6412*t6413;
            double t6446 = c*t6396*t6399*t6407*t6409*(1.0/3.0);
            double t6447 = t6445+t6446;
            double t6448 = 1/(t6396*t6396);
            double t6449 = t6398*t6447*t6448;
            double t6450 = c*t6424*t6407*t6416*t6417*t6409*(1.0/3.0);
            double t6451 = t6450+t6449;
            double t6452 = EcP_2*EcP_3*t6421*t6451;
            double t6453 = t6452+t6444-EcP_3*c*t6424*t6407*t6417*t6409*(2.0/3.0);
            double t6454 = EcP_1*t6453;
            double t6455 = pow(2.0,1.0/3.0);
            double t6456 = t6455*2.0;
            double t6457 = t6456-2.0;
            double t6458 = two_13*2.0;
            double t6459 = t6458-2.0;
            double t6460 = 1/t6459;
            double t6461 = t6431*t6431;
            double t6462 = sqrt(t6438);
            double t6463 = 1/t6434;
            double t6464 = t6462*t6463;
            double t6465 = atan(t6464);
            double t6466 = 1/sqrt(t6438);
            double t6467 = EcF_2*4.0;
            double t6468 = EcF_3*2.0;
            double t6469 = t6467+t6468;
            double t6470 = EcF_2*EcF_2;
            double t6471 = EcF_2*EcF_3;
            double t6472 = EcF_4+t6470+t6471;
            double t6473 = 1/t6472;
            double t6474 = c*t6390*t6399;
            double t6475 = log(t6474);
            double t6476 = EcP_3*t6405*t6406*2.0;
            double t6477 = t6399*t6412;
            double t6478 = log(t6477);
            double t6479 = t6405*t6406*t6416;
            double t6480 = t6478+t6479;
            double t6481 = t6475+t6476-EcP_2*EcP_3*t6421*t6480;
            double t6482 = EcP_1*t6481;
            v_rho_b_[index] = t6482-t6389*(t6454-t6460*t6457*(t6454-EcF_1*(EcF_2*EcF_3*t6473*(1/(t6431*t6431) \
               *t6427*(t6430*t6432*t6461+c*t6431*t6433*t6407*t6409*(1.0/3.0))+c*t6441*t6407*t6435*t6409*t6469*(1.0/ \
               3.0))+t6425*t6427*t6428*(c*t6433*t6407*(1.0/3.0)-c*t6390*t6430*t6432)-EcF_3*c*t6441*t6407*t6435*t6409* \
               (2.0/3.0))))-t6460*t6457*(t6482-EcF_1*(log(c*t6390*t6433)+EcF_3*t6465*t6466*2.0-EcF_2*EcF_3*t6473* \
               (log(t6433*t6461)+t6465*t6466*t6469)));
        } else if (rho_b[index] > cutoff_) {
            double t5745 = rho_a[index]+rho_b[index];
            double t5746 = 1/pow(t5745,1.0/3.0);
            double t5747 = c*t5746;
            double t5748 = sqrt(t5747);
            double t5749 = EcP_4*4.0;
            double t5750 = EcP_3*EcP_3;
            double t5751 = -t5750+t5749;
            double t5752 = EcP_2-t5748;
            double t5753 = EcP_3*t5748;
            double t5754 = EcP_4+t5753+t5747;
            double t5755 = 1/t5754;
            double t5756 = sqrt(t5751);
            double t5757 = t5748*2.0;
            double t5758 = EcP_3+t5757;
            double t5759 = 1/t5758;
            double t5760 = t5756*t5759;
            double t5761 = atan(t5760);
            double t5762 = 1/sqrt(t5751);
            double t5763 = 1/pow(t5745,4.0/3.0);
            double t5764 = c*t5763*(1.0/3.0);
            double t5765 = 1/sqrt(t5747);
            double t5766 = EcP_3*c*t5763*t5765*(1.0/6.0);
            double t5767 = t5764+t5766;
            double t5768 = t5752*t5752;
            double t5769 = 1/(t5754*t5754);
            double t5770 = EcP_2*4.0;
            double t5771 = EcP_3*2.0;
            double t5772 = t5770+t5771;
            double t5773 = 1/(t5758*t5758);
            double t5774 = EcP_2*EcP_2;
            double t5775 = EcP_2*EcP_3;
            double t5776 = EcP_4+t5774+t5775;
            double t5777 = 1/t5776;
            double t5778 = t5751*t5773;
            double t5779 = t5778+1.0;
            double t5780 = 1/t5779;
            double t5781 = 1/c;
            double t5782 = EcF_3*t5748;
            double t5783 = EcF_4+t5782+t5747;
            double t5784 = pow(t5745,1.0/3.0);
            double t5785 = EcF_3*c*t5763*t5765*(1.0/6.0);
            double t5786 = t5764+t5785;
            double t5787 = EcF_2-t5748;
            double t5788 = 1/(t5783*t5783);
            double t5789 = 1/t5783;
            double t5790 = EcF_3+t5757;
            double t5791 = 1/(t5790*t5790);
            double t5792 = EcF_4*4.0;
            double t5793 = EcF_3*EcF_3;
            double t5794 = t5792-t5793;
            double t5795 = t5791*t5794;
            double t5796 = t5795+1.0;
            double t5797 = 1/t5796;
            double t5798 = c*t5763*t5755*(1.0/3.0);
            double t5799 = t5798-c*t5746*t5767*t5769;
            double t5800 = t5754*t5781*t5784*t5799;
            double t5801 = t5767*t5768*t5769;
            double t5802 = c*t5752*t5763*t5755*t5765*(1.0/3.0);
            double t5803 = t5801+t5802;
            double t5804 = 1/(t5752*t5752);
            double t5805 = t5754*t5803*t5804;
            double t5806 = c*t5780*t5763*t5772*t5773*t5765*(1.0/3.0);
            double t5807 = t5805+t5806;
            double t5808 = EcP_2*EcP_3*t5777*t5807;
            double t5809 = t5800+t5808-EcP_3*c*t5780*t5763*t5773*t5765*(2.0/3.0);
            double t5810 = EcP_1*t5809;
            double t5811 = pow(2.0,1.0/3.0);
            double t5812 = t5811*2.0;
            double t5813 = t5812-2.0;
            double t5814 = two_13*2.0;
            double t5815 = t5814-2.0;
            double t5816 = 1/t5815;
            double t5817 = t5787*t5787;
            double t5818 = sqrt(t5794);
            double t5819 = 1/t5790;
            double t5820 = t5818*t5819;
            double t5821 = atan(t5820);
            double t5822 = 1/sqrt(t5794);
            double t5823 = EcF_2*4.0;
            double t5824 = EcF_3*2.0;
            double t5825 = t5823+t5824;
            double t5826 = EcF_2*EcF_2;
            double t5827 = EcF_2*EcF_3;
            double t5828 = EcF_4+t5826+t5827;
            double t5829 = 1/t5828;
            double t5830 = c*t5746*t5755;
            double t5831 = log(t5830);
            double t5832 = EcP_3*t5761*t5762*2.0;
            double t5833 = t5755*t5768;
            double t5834 = log(t5833);
            double t5835 = t5761*t5762*t5772;
            double t5836 = t5834+t5835;
            double t5837 = t5831+t5832-EcP_2*EcP_3*t5777*t5836;
            double t5838 = EcP_1*t5837;
            v_rho_b_[index] = t5838-t5745*(t5810-t5813*t5816*(t5810-EcF_1*(EcF_2*EcF_3*t5829*(t5783*1/(t5787* \
               t5787)*(t5786*t5788*t5817+c*t5763*t5765*t5787*t5789*(1.0/3.0))+c*t5763*t5791*t5765*t5797*t5825*(1.0/ \
               3.0))+t5781*t5783*t5784*(c*t5763*t5789*(1.0/3.0)-c*t5746*t5786*t5788)-EcF_3*c*t5763*t5791*t5765*t5797* \
               (2.0/3.0))))-t5813*t5816*(t5838-EcF_1*(log(c*t5746*t5789)+EcF_3*t5821*t5822*2.0-EcF_2*EcF_3*t5829* \
               (log(t5789*t5817)+t5821*t5822*t5825)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4727 = rho_a[index]+rho_b[index];
            double t4728 = 1/pow(t4727,1.0/3.0);
            double t4729 = c*t4728;
            double t4730 = 1/pow(t4727,4.0/3.0);
            double t4731 = sqrt(t4729);
            double t4732 = EcP_3*t4731;
            double t4733 = EcP_4+t4732+t4729;
            double t4734 = c*t4730*(1.0/3.0);
            double t4735 = 1/sqrt(t4729);
            double t4736 = EcP_3*c*t4730*t4735*(1.0/6.0);
            double t4737 = t4734+t4736;
            double t4738 = 1/c;
            double t4739 = 1/t4733;
            double t4740 = c*t4730*t4739*(1.0/3.0);
            double t4741 = 1/(t4733*t4733);
            double t4875 = c*t4741*t4728*t4737;
            double t4742 = t4740-t4875;
            double t4743 = pow(t4727,1.0/3.0);
            double t4744 = 1/pow(t4727,7.0/3.0);
            double t4745 = EcP_2-t4731;
            double t4746 = 1/(t4745*t4745);
            double t4747 = t4745*t4745;
            double t4748 = c*t4744*(4.0/9.0);
            double t4749 = EcP_3*c*t4735*t4744*(2.0/9.0);
            double t4750 = c*c;
            double t4751 = 1/pow(t4727,8.0/3.0);
            double t4752 = 1/pow(t4729,3.0/2.0);
            double t4878 = EcP_3*t4750*t4751*t4752*(1.0/3.6E1);
            double t4753 = t4748+t4749-t4878;
            double t4754 = t4737*t4737;
            double t4755 = 1/(t4733*t4733*t4733);
            double t4756 = t4731*2.0;
            double t4757 = EcP_3+t4756;
            double t4758 = EcP_2*4.0;
            double t4759 = EcP_3*2.0;
            double t4760 = t4758+t4759;
            double t4761 = 1/(t4757*t4757);
            double t4762 = EcP_4*4.0;
            double t4763 = EcP_3*EcP_3;
            double t4764 = t4762-t4763;
            double t4765 = t4761*t4764;
            double t4766 = t4765+1.0;
            double t4767 = 1/t4766;
            double t4768 = t4741*t4737*t4747;
            double t4769 = c*t4730*t4735*t4745*t4739*(1.0/3.0);
            double t4770 = t4768+t4769;
            double t4771 = 1/(t4757*t4757*t4757);
            double t4772 = 1/(t4757*t4757*t4757*t4757*t4757);
            double t4773 = 1/(t4766*t4766);
            double t4774 = rho_a[index]-rho_b[index];
            double t4775 = t4774*t4774;
            double t4776 = EcF_4*4.0;
            double t4777 = EcF_3*EcF_3;
            double t4778 = t4776-t4777;
            double t4779 = EcF_2-t4731;
            double t4780 = EcF_3*t4731;
            double t4781 = EcF_4+t4780+t4729;
            double t4782 = 1/t4781;
            double t4783 = sqrt(t4778);
            double t4784 = EcF_3+t4756;
            double t4785 = 1/t4784;
            double t4786 = t4783*t4785;
            double t4787 = atan(t4786);
            double t4788 = 1/sqrt(t4778);
            double t4789 = sqrt(t4764);
            double t4790 = 1/t4757;
            double t4791 = t4790*t4789;
            double t4792 = atan(t4791);
            double t4793 = 1/sqrt(t4764);
            double t4794 = EcP_2*EcP_2;
            double t4795 = EcP_2*EcP_3;
            double t4796 = EcP_4+t4794+t4795;
            double t4797 = 1/t4796;
            double t4798 = Ac_4*4.0;
            double t4799 = Ac_3*Ac_3;
            double t4800 = t4798-t4799;
            double t4801 = Ac_2-t4731;
            double t4802 = Ac_3*t4731;
            double t4803 = Ac_4+t4729+t4802;
            double t4804 = 1/t4803;
            double t4805 = sqrt(t4800);
            double t4806 = Ac_3+t4756;
            double t4807 = 1/t4806;
            double t4808 = t4805*t4807;
            double t4809 = atan(t4808);
            double t4810 = 1/sqrt(t4800);
            double t4811 = c*t4728*t4804;
            double t4812 = log(t4811);
            double t4813 = Ac_3*t4810*t4809*2.0;
            double t4814 = t4801*t4801;
            double t4815 = t4804*t4814;
            double t4816 = log(t4815);
            double t4817 = Ac_2*4.0;
            double t4818 = Ac_3*2.0;
            double t4819 = t4817+t4818;
            double t4820 = t4810*t4809*t4819;
            double t4821 = t4820+t4816;
            double t4822 = Ac_2*Ac_2;
            double t4823 = Ac_2*Ac_3;
            double t4824 = Ac_4+t4822+t4823;
            double t4825 = 1/t4824;
            double t4842 = Ac_2*Ac_3*t4821*t4825;
            double t4826 = t4812+t4813-t4842;
            double t4827 = 1/t4727;
            double t4828 = t4774*t4827;
            double t4829 = 1/(t4727*t4727);
            double t4830 = t4829*2.0;
            double t4831 = 1/(t4727*t4727*t4727);
            double t4832 = t4830-t4774*t4831*2.0;
            double t4833 = t4828+1.0;
            double t4836 = t4774*t4829;
            double t4834 = t4827-t4836;
            double t4835 = -t4828+1.0;
            double t4837 = t4834*t4834;
            double t4838 = 1/d2fz0;
            double t4839 = two_13*2.0;
            double t4840 = t4839-2.0;
            double t4841 = 1/t4840;
            double t4843 = 1/(t4727*t4727*t4727*t4727);
            double t4844 = t4775*t4775;
            double t4845 = 1/Ac_1;
            double t4846 = EcF_3*c*t4730*t4735*(1.0/6.0);
            double t4847 = t4734+t4846;
            double t4848 = c*t4730*t4782*(1.0/3.0);
            double t4849 = 1/(t4781*t4781);
            double t4899 = c*t4728*t4847*t4849;
            double t4850 = t4848-t4899;
            double t4851 = 1/pow(t4727,2.0/3.0);
            double t4852 = EcF_2*EcF_2;
            double t4853 = EcF_2*EcF_3;
            double t4854 = EcF_4+t4852+t4853;
            double t4855 = 1/t4854;
            double t4856 = t4779*t4779;
            double t4857 = 1/(t4779*t4779);
            double t4858 = EcF_3*c*t4735*t4744*(2.0/9.0);
            double t4859 = t4748+t4858-EcF_3*t4750*t4751*t4752*(1.0/3.6E1);
            double t4860 = t4847*t4847;
            double t4861 = 1/(t4781*t4781*t4781);
            double t4862 = EcF_2*4.0;
            double t4863 = EcF_3*2.0;
            double t4864 = t4862+t4863;
            double t4865 = 1/(t4784*t4784);
            double t4866 = t4778*t4865;
            double t4867 = t4866+1.0;
            double t4868 = 1/t4867;
            double t4869 = t4847*t4856*t4849;
            double t4870 = c*t4730*t4735*t4782*t4779*(1.0/3.0);
            double t4871 = t4870+t4869;
            double t4872 = 1/(t4784*t4784*t4784);
            double t4873 = 1/(t4784*t4784*t4784*t4784*t4784);
            double t4874 = 1/(t4867*t4867);
            double t4876 = t4742*t4743*t4737*t4738;
            double t4877 = c*t4744*t4739*(4.0/9.0);
            double t4879 = c*t4754*t4728*t4755*2.0;
            double t4880 = t4877+t4879-c*t4730*t4741*t4737*(2.0/3.0)-c*t4741*t4753*t4728;
            double t4881 = t4733*t4743*t4738*t4880;
            double t4882 = t4770*t4737*t4746;
            double t4883 = c*t4744*t4739*(1.0/1.8E1);
            double t4884 = t4754*t4755*t4747*2.0;
            double t4885 = t4750*t4751*t4752*t4745*t4739*(1.0/1.8E1);
            double t4886 = c*t4730*t4741*t4735*t4745*t4737*(2.0/3.0);
            double t4887 = t4883+t4884+t4885+t4886-t4741*t4753*t4747-c*t4735*t4744*t4745*t4739*(4.0/9.0);
            double t4888 = c*t4760*t4761*t4735*t4744*t4767*(4.0/9.0);
            double t4889 = 1/(t4745*t4745*t4745);
            double t4890 = c*t4730*t4733*t4770*t4735*t4889*(1.0/3.0);
            double t4891 = c*t4760*t4744*t4772*t4764*t4773*(2.0/9.0);
            double t4892 = t4890+t4882+t4891+t4888-t4733*t4746*t4887-c*t4760*t4744*t4771*t4767*(2.0/9.0)-t4750* \
               t4751*t4760*t4752*t4761*t4767*(1.0/1.8E1);
            double t4893 = EcP_2*EcP_3*t4797*t4892;
            double t4894 = EcP_3*c*t4744*t4771*t4767*(4.0/9.0);
            double t4895 = EcP_3*t4750*t4751*t4752*t4761*t4767*(1.0/9.0);
            double t4896 = t4881+t4893+t4876+t4894+t4895-t4733*t4742*t4738*t4851*(1.0/3.0)-EcP_3*c*t4761*t4735* \
               t4744*t4767*(8.0/9.0)-EcP_3*c*t4744*t4772*t4764*t4773*(4.0/9.0);
            double t4897 = EcP_1*t4896;
            double t4898 = 1/t4826;
            double t4900 = Ac_3*c*t4730*t4735*(1.0/6.0);
            double t4901 = t4734+t4900;
            double t4902 = 1/(t4803*t4803);
            double t4903 = 1/(t4806*t4806);
            double t4904 = t4800*t4903;
            double t4905 = t4904+1.0;
            double t4906 = 1/t4905;
            double t4907 = c*t4728*t4782;
            double t4908 = log(t4907);
            double t4909 = EcF_3*t4787*t4788*2.0;
            double t4910 = t4782*t4856;
            double t4911 = log(t4910);
            double t4912 = t4787*t4788*t4864;
            double t4913 = t4911+t4912;
            double t4937 = EcF_2*EcF_3*t4855*t4913;
            double t4914 = t4908+t4909-t4937;
            double t4915 = EcF_1*t4914;
            double t4916 = c*t4728*t4739;
            double t4917 = log(t4916);
            double t4918 = EcP_3*t4792*t4793*2.0;
            double t4919 = t4747*t4739;
            double t4920 = log(t4919);
            double t4921 = t4760*t4792*t4793;
            double t4922 = t4920+t4921;
            double t4938 = EcP_2*EcP_3*t4797*t4922;
            double t4923 = t4917+t4918-t4938;
            double t4939 = EcP_1*t4923;
            double t4924 = t4915-t4939;
            double t4925 = c*t4730*t4804*(1.0/3.0);
            double t4941 = c*t4728*t4901*t4902;
            double t4926 = -t4941+t4925;
            double t4927 = t4743*t4738*t4803*t4926;
            double t4928 = t4814*t4901*t4902;
            double t4929 = c*t4730*t4735*t4801*t4804*(1.0/3.0);
            double t4930 = t4928+t4929;
            double t4931 = 1/(t4801*t4801);
            double t4932 = t4803*t4930*t4931;
            double t4933 = c*t4730*t4735*t4819*t4903*t4906*(1.0/3.0);
            double t4934 = t4932+t4933;
            double t4935 = Ac_2*Ac_3*t4825*t4934;
            double t4963 = Ac_3*c*t4730*t4735*t4903*t4906*(2.0/3.0);
            double t4936 = t4935+t4927-t4963;
            double t4940 = 1/(t4826*t4826);
            double t4942 = Ac_3*c*t4735*t4744*(2.0/9.0);
            double t4986 = Ac_3*t4750*t4751*t4752*(1.0/3.6E1);
            double t4943 = t4748+t4942-t4986;
            double t4944 = t4901*t4901;
            double t4945 = 1/(t4803*t4803*t4803);
            double t4946 = 1/(t4806*t4806*t4806);
            double t4947 = 1/(t4806*t4806*t4806*t4806*t4806);
            double t4948 = 1/(t4905*t4905);
            double t4949 = t4743*t4781*t4738*t4850;
            double t4950 = t4781*t4871*t4857;
            double t4951 = c*t4730*t4735*t4864*t4865*t4868*(1.0/3.0);
            double t4952 = t4950+t4951;
            double t4953 = EcF_2*EcF_3*t4855*t4952;
            double t4964 = EcF_3*c*t4730*t4735*t4865*t4868*(2.0/3.0);
            double t4954 = t4953-t4964+t4949;
            double t4955 = EcF_1*t4954;
            double t4956 = t4733*t4742*t4743*t4738;
            double t4957 = t4733*t4770*t4746;
            double t4958 = c*t4730*t4760*t4761*t4735*t4767*(1.0/3.0);
            double t4959 = t4957+t4958;
            double t4960 = EcP_2*EcP_3*t4797*t4959;
            double t4965 = EcP_3*c*t4730*t4761*t4735*t4767*(2.0/3.0);
            double t4961 = t4960+t4956-t4965;
            double t4966 = EcP_1*t4961;
            double t4962 = t4955-t4966;
            double t4967 = d2fz0*t4845*t4898*t4962;
            double t4974 = d2fz0*t4845*t4940*t4924*t4936;
            double t4968 = -t4974+t4967;
            double t4969 = d2fz0*t4845*t4898*t4924;
            double t4970 = t4969-1.0;
            double t4971 = 1/(t4727*t4727*t4727*t4727*t4727);
            double t4972 = pow(t4833,1.0/3.0);
            double t4973 = pow(t4835,1.0/3.0);
            double t4975 = t4834*t4972*(4.0/3.0);
            double t5007 = t4834*t4973*(4.0/3.0);
            double t4976 = t4975-t5007;
            double t4977 = t4843*t4844*t4970;
            double t4978 = t4977+1.0;
            double t4979 = pow(t4833,4.0/3.0);
            double t4980 = pow(t4835,4.0/3.0);
            double t4981 = t4980+t4979-2.0;
            double t4982 = t4843*t4844*t4968;
            double t4983 = t4844*t4970*t4971*4.0;
            double t5006 = t4774*t4775*t4843*t4970*4.0;
            double t4984 = t4982+t4983-t5006;
            double t4985 = c*t4744*t4804*(4.0/9.0);
            double t4987 = c*t4728*t4944*t4945*2.0;
            double t4988 = t4985+t4987-c*t4730*t4901*t4902*(2.0/3.0)-c*t4728*t4902*t4943;
            double t4989 = t4743*t4738*t4803*t4988;
            double t4990 = t4901*t4930*t4931;
            double t4991 = c*t4744*t4804*(1.0/1.8E1);
            double t4992 = t4814*t4944*t4945*2.0;
            double t4993 = t4750*t4751*t4752*t4801*t4804*(1.0/1.8E1);
            double t4994 = c*t4730*t4735*t4801*t4901*t4902*(2.0/3.0);
            double t4995 = t4991+t4992+t4993+t4994-t4814*t4902*t4943-c*t4735*t4744*t4801*t4804*(4.0/9.0);
            double t4996 = c*t4735*t4744*t4819*t4903*t4906*(4.0/9.0);
            double t4997 = 1/(t4801*t4801*t4801);
            double t4998 = c*t4730*t4735*t4803*t4930*t4997*(1.0/3.0);
            double t4999 = c*t4744*t4800*t4819*t4947*t4948*(2.0/9.0);
            double t5000 = t4990+t4996+t4998+t4999-t4803*t4931*t4995-c*t4744*t4819*t4906*t4946*(2.0/9.0)-t4750* \
               t4751*t4752*t4819*t4903*t4906*(1.0/1.8E1);
            double t5001 = Ac_2*Ac_3*t4825*t5000;
            double t5002 = t4743*t4738*t4901*t4926;
            double t5003 = Ac_3*c*t4744*t4906*t4946*(4.0/9.0);
            double t5004 = Ac_3*t4750*t4751*t4752*t4903*t4906*(1.0/9.0);
            double t5005 = t4989+t5001+t5002+t5003+t5004-t4738*t4803*t4851*t4926*(1.0/3.0)-Ac_3*c*t4735*t4744* \
               t4903*t4906*(8.0/9.0)-Ac_3*c*t4744*t4800*t4947*t4948*(4.0/9.0);
            v_rho_a_rho_a_[index] = EcP_1*t4961*-2.0+t4727*(t4897+Ac_1*t4841*t4826*t4838*t4981*(1/(t4727*t4727* \
               t4727*t4727*t4727*t4727)*t4844*t4970*2.0E1+t4775*t4843*t4970*1.2E1+t4844*t4971*t4968*8.0-t4843*t4844* \
               (d2fz0*t4845*t4898*(t4897-EcF_1*(t4743*t4781*t4738*(c*t4744*t4782*(4.0/9.0)+c*t4728*t4860*t4861*2.0- \
               c*t4730*t4847*t4849*(2.0/3.0)-c*t4728*t4849*t4859)-t4781*t4738*t4850*t4851*(1.0/3.0)+t4743*t4738*t4850* \
               t4847+EcF_2*EcF_3*t4855*(-t4781*t4857*(c*t4744*t4782*(1.0/1.8E1)+t4860*t4861*t4856*2.0-t4856*t4849* \
               t4859-c*t4735*t4744*t4782*t4779*(4.0/9.0)+t4750*t4751*t4752*t4782*t4779*(1.0/1.8E1)+c*t4730*t4735* \
               t4779*t4847*t4849*(2.0/3.0))+t4871*t4847*t4857-c*t4744*t4872*t4864*t4868*(2.0/9.0)+c*t4735*t4744*t4864* \
               t4865*t4868*(4.0/9.0)+c*t4744*t4778*t4864*t4873*t4874*(2.0/9.0)-t4750*t4751*t4752*t4864*t4865*t4868* \
               (1.0/1.8E1)+c*t4730*t4735*t4781*1/(t4779*t4779*t4779)*t4871*(1.0/3.0))+EcF_3*c*t4744*t4872*t4868*(4.0/ \
               9.0)-EcF_3*c*t4735*t4744*t4865*t4868*(8.0/9.0)-EcF_3*c*t4744*t4778*t4873*t4874*(4.0/9.0)+EcF_3*t4750* \
               t4751*t4752*t4865*t4868*(1.0/9.0)))-d2fz0*1/(t4826*t4826*t4826)*t4845*t4924*(t4936*t4936)*2.0+d2fz0* \
               t4845*t4940*t4962*t4936*2.0+d2fz0*t4845*t4940*t4924*t5005)-t4774*t4775*t4843*t4968*8.0-t4774*t4775* \
               t4970*t4971*3.2E1)+Ac_1*t4841*t4826*t4838*t4978*(t4832*t4972*(-4.0/3.0)+t4832*t4973*(4.0/3.0)+1/pow(t4833,2.0/ \
               3.0)*t4837*(4.0/9.0)+1/pow(t4835,2.0/3.0)*t4837*(4.0/9.0))-Ac_1*t4841*t4826*t4838*t4984*t4976*2.0+ \
               Ac_1*t4841*t4838*t4936*t4981*t4984*2.0-Ac_1*t4841*t4838*t4936*t4976*t4978*2.0+Ac_1*t4841*t4838*t4981* \
               t4978*t5005)-Ac_1*t4841*t4826*t4838*t4981*t4984*2.0+Ac_1*t4841*t4826*t4838*t4976*t4978*2.0-Ac_1*t4841* \
               t4838*t4936*t4981*t4978*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t6489 = rho_a[index]+rho_b[index];
            double t6490 = 1/pow(t6489,1.0/3.0);
            double t6491 = c*t6490;
            double t6492 = 1/pow(t6489,4.0/3.0);
            double t6493 = sqrt(t6491);
            double t6494 = EcP_3*t6493;
            double t6495 = EcP_4+t6491+t6494;
            double t6496 = c*t6492*(1.0/3.0);
            double t6497 = 1/sqrt(t6491);
            double t6498 = EcP_3*c*t6492*t6497*(1.0/6.0);
            double t6499 = t6496+t6498;
            double t6500 = EcP_2-t6493;
            double t6501 = 1/(t6495*t6495);
            double t6502 = 1/t6495;
            double t6503 = t6493*2.0;
            double t6504 = EcP_3+t6503;
            double t6505 = 1/(t6504*t6504);
            double t6506 = EcP_4*4.0;
            double t6507 = EcP_3*EcP_3;
            double t6508 = t6506-t6507;
            double t6509 = t6505*t6508;
            double t6510 = t6509+1.0;
            double t6511 = 1/t6510;
            double t6512 = 1/c;
            double t6513 = c*t6492*t6502*(1.0/3.0);
            double t6516 = c*t6490*t6499*t6501;
            double t6514 = t6513-t6516;
            double t6515 = pow(t6489,1.0/3.0);
            double t6517 = 1/pow(t6489,7.0/3.0);
            double t6518 = EcP_2*EcP_2;
            double t6519 = EcP_2*EcP_3;
            double t6520 = EcP_4+t6518+t6519;
            double t6521 = 1/t6520;
            double t6522 = t6500*t6500;
            double t6523 = t6499*t6501*t6522;
            double t6524 = c*t6492*t6497*t6500*t6502*(1.0/3.0);
            double t6525 = t6523+t6524;
            double t6526 = 1/(t6500*t6500);
            double t6527 = c*t6517*(4.0/9.0);
            double t6528 = EcP_3*c*t6497*t6517*(2.0/9.0);
            double t6529 = c*c;
            double t6530 = 1/pow(t6489,8.0/3.0);
            double t6531 = 1/pow(t6491,3.0/2.0);
            double t6576 = EcP_3*t6530*t6531*t6529*(1.0/3.6E1);
            double t6532 = t6527+t6528-t6576;
            double t6533 = t6499*t6499;
            double t6534 = 1/(t6495*t6495*t6495);
            double t6535 = EcP_2*4.0;
            double t6536 = EcP_3*2.0;
            double t6537 = t6535+t6536;
            double t6538 = 1/(t6504*t6504*t6504);
            double t6539 = 1/(t6504*t6504*t6504*t6504*t6504);
            double t6540 = 1/(t6510*t6510);
            double t6541 = EcF_3*t6493;
            double t6542 = EcF_4+t6491+t6541;
            double t6543 = EcF_3*c*t6492*t6497*(1.0/6.0);
            double t6544 = t6496+t6543;
            double t6545 = 1/t6542;
            double t6546 = c*t6492*t6545*(1.0/3.0);
            double t6547 = 1/(t6542*t6542);
            double t6602 = c*t6490*t6544*t6547;
            double t6548 = t6546-t6602;
            double t6549 = 1/pow(t6489,2.0/3.0);
            double t6550 = EcF_2-t6493;
            double t6551 = 1/(t6550*t6550);
            double t6552 = t6550*t6550;
            double t6553 = EcF_3*c*t6497*t6517*(2.0/9.0);
            double t6554 = t6553+t6527-EcF_3*t6530*t6531*t6529*(1.0/3.6E1);
            double t6555 = t6544*t6544;
            double t6556 = 1/(t6542*t6542*t6542);
            double t6557 = EcF_3+t6503;
            double t6558 = EcF_2*4.0;
            double t6559 = EcF_3*2.0;
            double t6560 = t6558+t6559;
            double t6561 = 1/(t6557*t6557);
            double t6562 = EcF_4*4.0;
            double t6563 = EcF_3*EcF_3;
            double t6564 = t6562-t6563;
            double t6565 = t6561*t6564;
            double t6566 = t6565+1.0;
            double t6567 = 1/t6566;
            double t6568 = t6552*t6544*t6547;
            double t6569 = c*t6492*t6497*t6550*t6545*(1.0/3.0);
            double t6570 = t6568+t6569;
            double t6571 = 1/(t6557*t6557*t6557);
            double t6572 = 1/(t6557*t6557*t6557*t6557*t6557);
            double t6573 = 1/(t6566*t6566);
            double t6574 = t6499*t6512*t6514*t6515;
            double t6575 = c*t6502*t6517*(4.0/9.0);
            double t6577 = c*t6490*t6533*t6534*2.0;
            double t6578 = t6575+t6577-c*t6492*t6499*t6501*(2.0/3.0)-c*t6490*t6501*t6532;
            double t6579 = t6495*t6512*t6515*t6578;
            double t6580 = t6499*t6525*t6526;
            double t6581 = c*t6502*t6517*(1.0/1.8E1);
            double t6582 = t6522*t6533*t6534*2.0;
            double t6583 = t6500*t6502*t6530*t6531*t6529*(1.0/1.8E1);
            double t6584 = c*t6492*t6497*t6499*t6500*t6501*(2.0/3.0);
            double t6585 = t6581+t6582+t6583+t6584-t6501*t6522*t6532-c*t6497*t6500*t6502*t6517*(4.0/9.0);
            double t6586 = c*t6497*t6511*t6505*t6517*t6537*(4.0/9.0);
            double t6587 = 1/(t6500*t6500*t6500);
            double t6588 = c*t6492*t6495*t6497*t6525*t6587*(1.0/3.0);
            double t6589 = c*t6540*t6508*t6517*t6537*t6539*(2.0/9.0);
            double t6590 = t6580+t6586+t6588+t6589-t6495*t6526*t6585-c*t6511*t6517*t6537*t6538*(2.0/9.0)-t6511* \
               t6530*t6531*t6505*t6537*t6529*(1.0/1.8E1);
            double t6591 = EcP_2*EcP_3*t6521*t6590;
            double t6592 = EcP_3*c*t6511*t6517*t6538*(4.0/9.0);
            double t6593 = EcP_3*t6511*t6530*t6531*t6505*t6529*(1.0/9.0);
            double t6594 = t6591+t6574+t6592+t6593+t6579-t6495*t6512*t6514*t6549*(1.0/3.0)-EcP_3*c*t6497*t6511* \
               t6505*t6517*(8.0/9.0)-EcP_3*c*t6540*t6508*t6517*t6539*(4.0/9.0);
            double t6595 = EcP_1*t6594;
            double t6596 = pow(2.0,1.0/3.0);
            double t6597 = t6596*2.0;
            double t6598 = t6597-2.0;
            double t6599 = two_13*2.0;
            double t6600 = t6599-2.0;
            double t6601 = 1/t6600;
            double t6603 = EcF_2*EcF_2;
            double t6604 = EcF_2*EcF_3;
            double t6605 = EcF_4+t6603+t6604;
            double t6606 = 1/t6605;
            double t6607 = t6495*t6512*t6514*t6515;
            double t6608 = t6495*t6525*t6526;
            double t6609 = c*t6492*t6497*t6511*t6505*t6537*(1.0/3.0);
            double t6610 = t6608+t6609;
            double t6611 = EcP_2*EcP_3*t6521*t6610;
            double t6612 = t6611+t6607-EcP_3*c*t6492*t6497*t6511*t6505*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t6612*-2.0+t6489*(t6595-t6598*t6601*(t6595-EcF_1*(t6512*t6515*t6542* \
               (c*t6517*t6545*(4.0/9.0)-c*t6490*t6554*t6547+c*t6490*t6555*t6556*2.0-c*t6492*t6544*t6547*(2.0/3.0) \
               )+t6512*t6515*t6544*t6548-t6512*t6542*t6548*t6549*(1.0/3.0)+EcF_2*EcF_3*t6606*(-t6542*t6551*(c*t6517* \
               t6545*(1.0/1.8E1)-t6552*t6554*t6547+t6552*t6555*t6556*2.0-c*t6497*t6550*t6517*t6545*(4.0/9.0)+t6530* \
               t6531*t6550*t6545*t6529*(1.0/1.8E1)+c*t6492*t6497*t6550*t6544*t6547*(2.0/3.0))+t6551*t6570*t6544-c* \
               t6560*t6517*t6571*t6567*(2.0/9.0)+c*t6497*t6560*t6561*t6517*t6567*(4.0/9.0)+c*t6560*t6517*t6572*t6564* \
               t6573*(2.0/9.0)-t6530*t6531*t6560*t6561*t6529*t6567*(1.0/1.8E1)+c*t6492*t6497*1/(t6550*t6550*t6550) \
               *t6542*t6570*(1.0/3.0))+EcF_3*c*t6517*t6571*t6567*(4.0/9.0)-EcF_3*c*t6497*t6561*t6517*t6567*(8.0/9.0) \
               -EcF_3*c*t6517*t6572*t6564*t6573*(4.0/9.0)+EcF_3*t6530*t6531*t6561*t6529*t6567*(1.0/9.0))))+t6598* \
               t6601*(EcP_1*t6612-EcF_1*(t6512*t6515*t6542*t6548+EcF_2*EcF_3*t6606*(t6542*t6551*t6570+c*t6492*t6497* \
               t6560*t6561*t6567*(1.0/3.0))-EcF_3*c*t6492*t6497*t6561*t6567*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t5845 = rho_a[index]+rho_b[index];
            double t5846 = 1/pow(t5845,1.0/3.0);
            double t5847 = c*t5846;
            double t5848 = 1/pow(t5845,4.0/3.0);
            double t5849 = sqrt(t5847);
            double t5850 = EcP_3*t5849;
            double t5851 = EcP_4+t5850+t5847;
            double t5852 = c*t5848*(1.0/3.0);
            double t5853 = 1/sqrt(t5847);
            double t5854 = EcP_3*c*t5853*t5848*(1.0/6.0);
            double t5855 = t5852+t5854;
            double t5856 = EcP_2-t5849;
            double t5857 = 1/(t5851*t5851);
            double t5858 = 1/t5851;
            double t5859 = t5849*2.0;
            double t5860 = EcP_3+t5859;
            double t5861 = 1/(t5860*t5860);
            double t5862 = EcP_4*4.0;
            double t5863 = EcP_3*EcP_3;
            double t5864 = t5862-t5863;
            double t5865 = t5861*t5864;
            double t5866 = t5865+1.0;
            double t5867 = 1/t5866;
            double t5868 = 1/c;
            double t5869 = c*t5848*t5858*(1.0/3.0);
            double t5872 = c*t5846*t5855*t5857;
            double t5870 = -t5872+t5869;
            double t5871 = pow(t5845,1.0/3.0);
            double t5873 = 1/pow(t5845,7.0/3.0);
            double t5874 = EcP_2*EcP_2;
            double t5875 = EcP_2*EcP_3;
            double t5876 = EcP_4+t5874+t5875;
            double t5877 = 1/t5876;
            double t5878 = t5856*t5856;
            double t5879 = t5855*t5857*t5878;
            double t5880 = c*t5853*t5856*t5848*t5858*(1.0/3.0);
            double t5881 = t5880+t5879;
            double t5882 = 1/(t5856*t5856);
            double t5883 = c*t5873*(4.0/9.0);
            double t5884 = EcP_3*c*t5853*t5873*(2.0/9.0);
            double t5885 = c*c;
            double t5886 = 1/pow(t5845,8.0/3.0);
            double t5887 = 1/pow(t5847,3.0/2.0);
            double t5932 = EcP_3*t5885*t5886*t5887*(1.0/3.6E1);
            double t5888 = t5883+t5884-t5932;
            double t5889 = t5855*t5855;
            double t5890 = 1/(t5851*t5851*t5851);
            double t5891 = EcP_2*4.0;
            double t5892 = EcP_3*2.0;
            double t5893 = t5891+t5892;
            double t5894 = 1/(t5860*t5860*t5860);
            double t5895 = 1/(t5860*t5860*t5860*t5860*t5860);
            double t5896 = 1/(t5866*t5866);
            double t5897 = EcF_3*t5849;
            double t5898 = EcF_4+t5847+t5897;
            double t5899 = EcF_3*c*t5853*t5848*(1.0/6.0);
            double t5900 = t5852+t5899;
            double t5901 = 1/t5898;
            double t5902 = c*t5848*t5901*(1.0/3.0);
            double t5903 = 1/(t5898*t5898);
            double t5958 = c*t5846*t5900*t5903;
            double t5904 = t5902-t5958;
            double t5905 = 1/pow(t5845,2.0/3.0);
            double t5906 = EcF_2-t5849;
            double t5907 = 1/(t5906*t5906);
            double t5908 = t5906*t5906;
            double t5909 = EcF_3*c*t5853*t5873*(2.0/9.0);
            double t5910 = t5883+t5909-EcF_3*t5885*t5886*t5887*(1.0/3.6E1);
            double t5911 = t5900*t5900;
            double t5912 = 1/(t5898*t5898*t5898);
            double t5913 = EcF_3+t5859;
            double t5914 = EcF_2*4.0;
            double t5915 = EcF_3*2.0;
            double t5916 = t5914+t5915;
            double t5917 = 1/(t5913*t5913);
            double t5918 = EcF_4*4.0;
            double t5919 = EcF_3*EcF_3;
            double t5920 = t5918-t5919;
            double t5921 = t5920*t5917;
            double t5922 = t5921+1.0;
            double t5923 = 1/t5922;
            double t5924 = t5900*t5903*t5908;
            double t5925 = c*t5853*t5848*t5901*t5906*(1.0/3.0);
            double t5926 = t5924+t5925;
            double t5927 = 1/(t5913*t5913*t5913);
            double t5928 = 1/(t5913*t5913*t5913*t5913*t5913);
            double t5929 = 1/(t5922*t5922);
            double t5930 = t5870*t5871*t5855*t5868;
            double t5931 = c*t5873*t5858*(4.0/9.0);
            double t5933 = c*t5890*t5846*t5889*2.0;
            double t5934 = t5931+t5933-c*t5855*t5848*t5857*(2.0/3.0)-c*t5846*t5857*t5888;
            double t5935 = t5851*t5871*t5868*t5934;
            double t5936 = t5881*t5855*t5882;
            double t5937 = c*t5873*t5858*(1.0/1.8E1);
            double t5938 = t5890*t5878*t5889*2.0;
            double t5939 = t5856*t5858*t5885*t5886*t5887*(1.0/1.8E1);
            double t5940 = c*t5853*t5855*t5856*t5848*t5857*(2.0/3.0);
            double t5941 = t5940+t5937+t5938+t5939-t5857*t5878*t5888-c*t5853*t5873*t5856*t5858*(4.0/9.0);
            double t5942 = c*t5861*t5853*t5873*t5893*t5867*(4.0/9.0);
            double t5943 = 1/(t5856*t5856*t5856);
            double t5944 = c*t5851*t5853*t5881*t5848*t5943*(1.0/3.0);
            double t5945 = c*t5864*t5873*t5893*t5895*t5896*(2.0/9.0);
            double t5946 = t5942+t5944+t5936+t5945-t5851*t5882*t5941-c*t5873*t5893*t5867*t5894*(2.0/9.0)-t5861* \
               t5893*t5867*t5885*t5886*t5887*(1.0/1.8E1);
            double t5947 = EcP_2*EcP_3*t5877*t5946;
            double t5948 = EcP_3*c*t5873*t5867*t5894*(4.0/9.0);
            double t5949 = EcP_3*t5861*t5867*t5885*t5886*t5887*(1.0/9.0);
            double t5950 = t5930+t5935+t5947+t5948+t5949-t5851*t5870*t5868*t5905*(1.0/3.0)-EcP_3*c*t5861*t5853* \
               t5873*t5867*(8.0/9.0)-EcP_3*c*t5864*t5873*t5895*t5896*(4.0/9.0);
            double t5951 = EcP_1*t5950;
            double t5952 = pow(2.0,1.0/3.0);
            double t5953 = t5952*2.0;
            double t5954 = t5953-2.0;
            double t5955 = two_13*2.0;
            double t5956 = t5955-2.0;
            double t5957 = 1/t5956;
            double t5959 = EcF_2*EcF_2;
            double t5960 = EcF_2*EcF_3;
            double t5961 = EcF_4+t5960+t5959;
            double t5962 = 1/t5961;
            double t5963 = t5851*t5870*t5871*t5868;
            double t5964 = t5851*t5881*t5882;
            double t5965 = c*t5861*t5853*t5848*t5893*t5867*(1.0/3.0);
            double t5966 = t5964+t5965;
            double t5967 = EcP_2*EcP_3*t5877*t5966;
            double t5968 = t5963+t5967-EcP_3*c*t5861*t5853*t5848*t5867*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t5968*-2.0+t5845*(t5951-t5954*t5957*(t5951-EcF_1*(t5871*t5868*t5898* \
               (c*t5873*t5901*(4.0/9.0)-c*t5846*t5910*t5903+c*t5846*t5911*t5912*2.0-c*t5848*t5900*t5903*(2.0/3.0) \
               )+t5871*t5868*t5900*t5904-t5868*t5898*t5904*t5905*(1.0/3.0)+EcF_2*EcF_3*t5962*(-t5898*t5907*(c*t5873* \
               t5901*(1.0/1.8E1)-t5910*t5903*t5908+t5911*t5912*t5908*2.0-c*t5853*t5873*t5901*t5906*(4.0/9.0)+t5885* \
               t5886*t5887*t5901*t5906*(1.0/1.8E1)+c*t5853*t5848*t5900*t5903*t5906*(2.0/3.0))+t5900*t5907*t5926-c* \
               t5873*t5923*t5916*t5927*(2.0/9.0)+c*t5853*t5873*t5923*t5916*t5917*(4.0/9.0)+c*t5873*t5920*t5916*t5928* \
               t5929*(2.0/9.0)-t5885*t5886*t5887*t5923*t5916*t5917*(1.0/1.8E1)+c*t5853*t5848*t5898*1/(t5906*t5906* \
               t5906)*t5926*(1.0/3.0))+EcF_3*c*t5873*t5923*t5927*(4.0/9.0)-EcF_3*c*t5853*t5873*t5923*t5917*(8.0/9.0) \
               -EcF_3*c*t5873*t5920*t5928*t5929*(4.0/9.0)+EcF_3*t5885*t5886*t5887*t5923*t5917*(1.0/9.0))))+t5954* \
               t5957*(EcP_1*t5968-EcF_1*(t5871*t5868*t5898*t5904+EcF_2*EcF_3*t5962*(t5898*t5907*t5926+c*t5853*t5848* \
               t5923*t5916*t5917*(1.0/3.0))-EcF_3*c*t5853*t5848*t5923*t5917*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t5009 = rho_a[index]+rho_b[index];
            double t5010 = 1/pow(t5009,1.0/3.0);
            double t5011 = c*t5010;
            double t5012 = 1/pow(t5009,4.0/3.0);
            double t5013 = sqrt(t5011);
            double t5014 = EcP_3*t5013;
            double t5015 = EcP_4+t5011+t5014;
            double t5016 = c*t5012*(1.0/3.0);
            double t5017 = 1/sqrt(t5011);
            double t5018 = EcP_3*c*t5012*t5017*(1.0/6.0);
            double t5019 = t5016+t5018;
            double t5020 = EcP_2-t5013;
            double t5021 = 1/(t5015*t5015);
            double t5022 = 1/t5015;
            double t5023 = t5013*2.0;
            double t5024 = EcP_3+t5023;
            double t5025 = 1/(t5024*t5024);
            double t5026 = EcP_4*4.0;
            double t5027 = EcP_3*EcP_3;
            double t5028 = t5026-t5027;
            double t5029 = t5025*t5028;
            double t5030 = t5029+1.0;
            double t5031 = 1/t5030;
            double t5032 = 1/c;
            double t5033 = c*t5012*t5022*(1.0/3.0);
            double t5036 = c*t5010*t5021*t5019;
            double t5034 = t5033-t5036;
            double t5035 = pow(t5009,1.0/3.0);
            double t5037 = 1/pow(t5009,7.0/3.0);
            double t5038 = EcP_2*EcP_2;
            double t5039 = EcP_2*EcP_3;
            double t5040 = EcP_4+t5038+t5039;
            double t5041 = 1/t5040;
            double t5042 = t5020*t5020;
            double t5043 = t5021*t5042*t5019;
            double t5044 = c*t5020*t5012*t5022*t5017*(1.0/3.0);
            double t5045 = t5043+t5044;
            double t5046 = 1/(t5020*t5020);
            double t5047 = c*t5037*(4.0/9.0);
            double t5048 = EcP_3*c*t5017*t5037*(2.0/9.0);
            double t5049 = c*c;
            double t5050 = 1/pow(t5009,8.0/3.0);
            double t5051 = 1/pow(t5011,3.0/2.0);
            double t5241 = EcP_3*t5050*t5051*t5049*(1.0/3.6E1);
            double t5052 = t5047+t5048-t5241;
            double t5053 = t5019*t5019;
            double t5054 = 1/(t5015*t5015*t5015);
            double t5055 = EcP_2*4.0;
            double t5056 = EcP_3*2.0;
            double t5057 = t5055+t5056;
            double t5058 = 1/(t5024*t5024*t5024);
            double t5059 = 1/(t5024*t5024*t5024*t5024*t5024);
            double t5060 = 1/(t5030*t5030);
            double t5061 = rho_a[index]-rho_b[index];
            double t5062 = t5061*t5061;
            double t5063 = EcF_4*4.0;
            double t5064 = EcF_3*EcF_3;
            double t5065 = t5063-t5064;
            double t5066 = EcF_2-t5013;
            double t5067 = EcF_3*t5013;
            double t5068 = EcF_4+t5011+t5067;
            double t5069 = 1/t5068;
            double t5070 = sqrt(t5065);
            double t5071 = EcF_3+t5023;
            double t5072 = 1/t5071;
            double t5073 = t5070*t5072;
            double t5074 = atan(t5073);
            double t5075 = 1/sqrt(t5065);
            double t5076 = sqrt(t5028);
            double t5077 = 1/t5024;
            double t5078 = t5076*t5077;
            double t5079 = atan(t5078);
            double t5080 = 1/sqrt(t5028);
            double t5081 = Ac_4*4.0;
            double t5082 = Ac_3*Ac_3;
            double t5083 = t5081-t5082;
            double t5084 = Ac_2-t5013;
            double t5085 = Ac_3*t5013;
            double t5086 = Ac_4+t5011+t5085;
            double t5087 = 1/t5086;
            double t5088 = sqrt(t5083);
            double t5089 = Ac_3+t5023;
            double t5090 = 1/t5089;
            double t5091 = t5090*t5088;
            double t5092 = atan(t5091);
            double t5093 = 1/sqrt(t5083);
            double t5094 = c*t5010*t5087;
            double t5095 = log(t5094);
            double t5096 = Ac_3*t5092*t5093*2.0;
            double t5097 = t5084*t5084;
            double t5098 = t5087*t5097;
            double t5099 = log(t5098);
            double t5100 = Ac_2*4.0;
            double t5101 = Ac_3*2.0;
            double t5102 = t5100+t5101;
            double t5103 = t5092*t5093*t5102;
            double t5104 = t5099+t5103;
            double t5105 = Ac_2*Ac_2;
            double t5106 = Ac_2*Ac_3;
            double t5107 = Ac_4+t5105+t5106;
            double t5108 = 1/t5107;
            double t5125 = Ac_2*Ac_3*t5104*t5108;
            double t5109 = t5095+t5096-t5125;
            double t5110 = 1/t5009;
            double t5111 = t5061*t5110;
            double t5112 = 1/(t5009*t5009*t5009);
            double t5113 = t5111+1.0;
            double t5114 = 1/(t5009*t5009);
            double t5115 = t5061*t5114;
            double t5116 = -t5111+1.0;
            double t5117 = t5110+t5115;
            double t5118 = t5110-t5115;
            double t5119 = 1/d2fz0;
            double t5120 = two_13*2.0;
            double t5121 = t5120-2.0;
            double t5122 = 1/t5121;
            double t5123 = pow(t5113,1.0/3.0);
            double t5124 = pow(t5116,1.0/3.0);
            double t5126 = 1/(t5009*t5009*t5009*t5009);
            double t5127 = 1/Ac_1;
            double t5128 = EcF_3*c*t5012*t5017*(1.0/6.0);
            double t5129 = t5016+t5128;
            double t5130 = t5066*t5066;
            double t5131 = 1/(t5068*t5068);
            double t5132 = EcF_2*4.0;
            double t5133 = EcF_3*2.0;
            double t5134 = t5132+t5133;
            double t5135 = 1/(t5071*t5071);
            double t5136 = EcF_2*EcF_2;
            double t5137 = EcF_2*EcF_3;
            double t5138 = EcF_4+t5136+t5137;
            double t5139 = 1/t5138;
            double t5140 = t5065*t5135;
            double t5141 = t5140+1.0;
            double t5142 = 1/t5141;
            double t5143 = t5032*t5015*t5034*t5035;
            double t5144 = t5015*t5045*t5046;
            double t5145 = c*t5012*t5031*t5025*t5017*t5057*(1.0/3.0);
            double t5146 = t5144+t5145;
            double t5147 = EcP_2*EcP_3*t5041*t5146;
            double t5194 = EcP_3*c*t5012*t5031*t5025*t5017*(2.0/3.0);
            double t5148 = t5143+t5147-t5194;
            double t5149 = 1/t5109;
            double t5150 = c*t5010*t5069;
            double t5151 = log(t5150);
            double t5152 = EcF_3*t5074*t5075*2.0;
            double t5153 = t5069*t5130;
            double t5154 = log(t5153);
            double t5155 = t5074*t5075*t5134;
            double t5156 = t5154+t5155;
            double t5176 = EcF_2*EcF_3*t5156*t5139;
            double t5157 = t5151+t5152-t5176;
            double t5158 = EcF_1*t5157;
            double t5159 = c*t5010*t5022;
            double t5160 = log(t5159);
            double t5161 = EcP_3*t5080*t5079*2.0;
            double t5162 = t5022*t5042;
            double t5163 = log(t5162);
            double t5164 = t5080*t5057*t5079;
            double t5165 = t5163+t5164;
            double t5177 = EcP_2*EcP_3*t5041*t5165;
            double t5166 = t5160+t5161-t5177;
            double t5178 = EcP_1*t5166;
            double t5167 = t5158-t5178;
            double t5168 = Ac_3*c*t5012*t5017*(1.0/6.0);
            double t5169 = t5016+t5168;
            double t5170 = 1/(t5086*t5086);
            double t5171 = 1/(t5089*t5089);
            double t5172 = t5083*t5171;
            double t5173 = t5172+1.0;
            double t5174 = 1/t5173;
            double t5175 = t5062*t5062;
            double t5179 = d2fz0*t5127*t5149*t5167;
            double t5180 = t5179-1.0;
            double t5181 = c*t5012*t5069*(1.0/3.0);
            double t5222 = c*t5010*t5131*t5129;
            double t5182 = t5181-t5222;
            double t5183 = t5032*t5035*t5068*t5182;
            double t5184 = t5130*t5131*t5129;
            double t5185 = c*t5012*t5017*t5066*t5069*(1.0/3.0);
            double t5186 = t5184+t5185;
            double t5187 = 1/(t5066*t5066);
            double t5188 = t5068*t5186*t5187;
            double t5189 = c*t5012*t5017*t5142*t5134*t5135*(1.0/3.0);
            double t5190 = t5188+t5189;
            double t5191 = EcF_2*EcF_3*t5190*t5139;
            double t5223 = EcF_3*c*t5012*t5017*t5142*t5135*(2.0/3.0);
            double t5192 = t5191+t5183-t5223;
            double t5193 = EcF_1*t5192;
            double t5224 = EcP_1*t5148;
            double t5195 = t5193-t5224;
            double t5196 = d2fz0*t5127*t5149*t5195;
            double t5197 = 1/(t5109*t5109);
            double t5198 = c*t5012*t5087*(1.0/3.0);
            double t5218 = c*t5010*t5170*t5169;
            double t5199 = t5198-t5218;
            double t5200 = t5032*t5035*t5086*t5199;
            double t5201 = t5097*t5170*t5169;
            double t5202 = c*t5012*t5017*t5084*t5087*(1.0/3.0);
            double t5203 = t5201+t5202;
            double t5204 = 1/(t5084*t5084);
            double t5205 = t5086*t5203*t5204;
            double t5206 = c*t5012*t5017*t5102*t5171*t5174*(1.0/3.0);
            double t5207 = t5205+t5206;
            double t5208 = Ac_2*Ac_3*t5108*t5207;
            double t5219 = Ac_3*c*t5012*t5017*t5171*t5174*(2.0/3.0);
            double t5209 = t5200+t5208-t5219;
            double t5225 = d2fz0*t5127*t5167*t5197*t5209;
            double t5210 = t5196-t5225;
            double t5211 = t5126*t5175*t5210;
            double t5212 = 1/(t5009*t5009*t5009*t5009*t5009);
            double t5213 = t5180*t5175*t5212*4.0;
            double t5214 = t5123*t5117*(4.0/3.0);
            double t5290 = t5124*t5117*(4.0/3.0);
            double t5215 = t5214-t5290;
            double t5216 = t5126*t5180*t5175;
            double t5217 = t5216+1.0;
            double t5220 = t5123*t5118*(4.0/3.0);
            double t5291 = t5124*t5118*(4.0/3.0);
            double t5221 = t5220-t5291;
            double t5226 = t5061*t5062*t5126*t5180*4.0;
            double t5227 = pow(t5113,4.0/3.0);
            double t5228 = pow(t5116,4.0/3.0);
            double t5229 = t5227+t5228-2.0;
            double t5230 = t5211+t5213+t5226;
            double t5231 = 1/pow(t5009,2.0/3.0);
            double t5232 = EcF_3*c*t5017*t5037*(2.0/9.0);
            double t5233 = t5047+t5232-EcF_3*t5050*t5051*t5049*(1.0/3.6E1);
            double t5234 = t5129*t5129;
            double t5235 = 1/(t5068*t5068*t5068);
            double t5236 = 1/(t5071*t5071*t5071);
            double t5237 = 1/(t5071*t5071*t5071*t5071*t5071);
            double t5238 = 1/(t5141*t5141);
            double t5239 = t5032*t5034*t5035*t5019;
            double t5240 = c*t5022*t5037*(4.0/9.0);
            double t5242 = c*t5010*t5053*t5054*2.0;
            double t5243 = t5240+t5242-c*t5010*t5021*t5052-c*t5012*t5021*t5019*(2.0/3.0);
            double t5244 = t5032*t5015*t5035*t5243;
            double t5245 = t5045*t5019*t5046;
            double t5246 = c*t5022*t5037*(1.0/1.8E1);
            double t5247 = t5042*t5053*t5054*2.0;
            double t5248 = t5020*t5022*t5050*t5051*t5049*(1.0/1.8E1);
            double t5249 = c*t5020*t5012*t5021*t5017*t5019*(2.0/3.0);
            double t5250 = t5246+t5247+t5248+t5249-t5021*t5042*t5052-c*t5020*t5022*t5017*t5037*(4.0/9.0);
            double t5251 = c*t5031*t5025*t5017*t5037*t5057*(4.0/9.0);
            double t5252 = 1/(t5020*t5020*t5020);
            double t5253 = c*t5012*t5015*t5017*t5045*t5252*(1.0/3.0);
            double t5254 = c*t5060*t5028*t5037*t5057*t5059*(2.0/9.0);
            double t5255 = t5251+t5253+t5245+t5254-t5015*t5046*t5250-c*t5031*t5037*t5057*t5058*(2.0/9.0)-t5031* \
               t5050*t5051*t5025*t5057*t5049*(1.0/1.8E1);
            double t5256 = EcP_2*EcP_3*t5041*t5255;
            double t5257 = EcP_3*c*t5031*t5037*t5058*(4.0/9.0);
            double t5258 = EcP_3*t5031*t5050*t5051*t5025*t5049*(1.0/9.0);
            double t5259 = t5244+t5256+t5239+t5257+t5258-t5032*t5015*t5034*t5231*(1.0/3.0)-EcP_3*c*t5031*t5025* \
               t5017*t5037*(8.0/9.0)-EcP_3*c*t5060*t5028*t5037*t5059*(4.0/9.0);
            double t5260 = EcP_1*t5259;
            double t5261 = Ac_3*c*t5017*t5037*(2.0/9.0);
            double t5269 = Ac_3*t5050*t5051*t5049*(1.0/3.6E1);
            double t5262 = t5047+t5261-t5269;
            double t5263 = t5169*t5169;
            double t5264 = 1/(t5086*t5086*t5086);
            double t5265 = 1/(t5089*t5089*t5089);
            double t5266 = 1/(t5089*t5089*t5089*t5089*t5089);
            double t5267 = 1/(t5173*t5173);
            double t5268 = c*t5037*t5087*(4.0/9.0);
            double t5270 = c*t5010*t5263*t5264*2.0;
            double t5271 = t5270+t5268-c*t5012*t5170*t5169*(2.0/3.0)-c*t5010*t5170*t5262;
            double t5272 = t5032*t5035*t5086*t5271;
            double t5273 = t5169*t5203*t5204;
            double t5274 = c*t5037*t5087*(1.0/1.8E1);
            double t5275 = t5097*t5263*t5264*2.0;
            double t5276 = t5050*t5051*t5084*t5049*t5087*(1.0/1.8E1);
            double t5277 = c*t5012*t5017*t5084*t5170*t5169*(2.0/3.0);
            double t5278 = t5274+t5275+t5276+t5277-t5097*t5170*t5262-c*t5017*t5037*t5084*t5087*(4.0/9.0);
            double t5279 = c*t5017*t5037*t5102*t5171*t5174*(4.0/9.0);
            double t5280 = 1/(t5084*t5084*t5084);
            double t5281 = c*t5012*t5017*t5086*t5203*t5280*(1.0/3.0);
            double t5282 = c*t5037*t5083*t5102*t5266*t5267*(2.0/9.0);
            double t5283 = t5281+t5273+t5282+t5279-t5086*t5204*t5278-c*t5037*t5102*t5174*t5265*(2.0/9.0)-t5050* \
               t5051*t5049*t5102*t5171*t5174*(1.0/1.8E1);
            double t5284 = Ac_2*Ac_3*t5108*t5283;
            double t5285 = t5032*t5035*t5169*t5199;
            double t5286 = Ac_3*c*t5037*t5174*t5265*(4.0/9.0);
            double t5287 = Ac_3*t5050*t5051*t5049*t5171*t5174*(1.0/9.0);
            double t5288 = t5272+t5284+t5285+t5286+t5287-t5032*t5086*t5199*t5231*(1.0/3.0)-Ac_3*c*t5017*t5037* \
               t5171*t5174*(8.0/9.0)-Ac_3*c*t5037*t5083*t5266*t5267*(4.0/9.0);
            double t5289 = t5211+t5213-t5226;
            v_rho_a_rho_b_[index] = EcP_1*t5148*-2.0+t5009*(t5260+Ac_1*t5122*t5109*t5119*t5229*(1/(t5009*t5009* \
               t5009*t5009*t5009*t5009)*t5180*t5175*2.0E1-t5062*t5126*t5180*1.2E1+t5175*t5210*t5212*8.0-t5126*t5175* \
               (d2fz0*t5127*t5149*(t5260-EcF_1*(t5032*t5035*t5068*(c*t5037*t5069*(4.0/9.0)-c*t5012*t5131*t5129*(2.0/ \
               3.0)-c*t5010*t5131*t5233+c*t5010*t5234*t5235*2.0)+t5032*t5035*t5182*t5129-t5032*t5068*t5182*t5231* \
               (1.0/3.0)+EcF_2*EcF_3*t5139*(-t5068*t5187*(c*t5037*t5069*(1.0/1.8E1)-t5130*t5131*t5233+t5130*t5234* \
               t5235*2.0-c*t5017*t5037*t5066*t5069*(4.0/9.0)+t5050*t5051*t5066*t5049*t5069*(1.0/1.8E1)+c*t5012*t5017* \
               t5066*t5131*t5129*(2.0/3.0))+t5129*t5186*t5187-c*t5037*t5142*t5134*t5236*(2.0/9.0)+c*t5017*t5037*t5142* \
               t5134*t5135*(4.0/9.0)+c*t5037*t5065*t5134*t5237*t5238*(2.0/9.0)-t5050*t5051*t5049*t5142*t5134*t5135* \
               (1.0/1.8E1)+c*t5012*t5017*1/(t5066*t5066*t5066)*t5068*t5186*(1.0/3.0))+EcF_3*c*t5037*t5142*t5236*(4.0/ \
               9.0)-EcF_3*c*t5017*t5037*t5142*t5135*(8.0/9.0)-EcF_3*c*t5037*t5065*t5237*t5238*(4.0/9.0)+EcF_3*t5050* \
               t5051*t5049*t5142*t5135*(1.0/9.0)))-d2fz0*1/(t5109*t5109*t5109)*t5127*t5167*(t5209*t5209)*2.0+d2fz0* \
               t5127*t5195*t5197*t5209*2.0+d2fz0*t5127*t5167*t5197*t5288))-Ac_1*t5122*t5109*t5119*t5217*(1/pow(t5113,2.0/ \
               3.0)*t5117*t5118*(4.0/9.0)+1/pow(t5116,2.0/3.0)*t5117*t5118*(4.0/9.0)-t5061*t5112*t5123*(8.0/3.0)+ \
               t5061*t5112*t5124*(8.0/3.0))-Ac_1*t5122*t5109*t5119*t5221*t5230-Ac_1*t5122*t5119*t5221*t5217*t5209+ \
               Ac_1*t5122*t5119*t5230*t5209*t5229+Ac_1*t5122*t5119*t5215*t5217*t5209+Ac_1*t5122*t5119*t5217*t5229* \
               t5288+Ac_1*t5122*t5119*t5209*t5229*t5289+Ac_1*t5122*t5109*t5119*t5215*(t5211+t5213-t5061*t5062*t5126* \
               t5180*4.0))+Ac_1*t5122*t5109*t5119*t5221*t5217-Ac_1*t5122*t5109*t5119*t5230*t5229-Ac_1*t5122*t5109* \
               t5119*t5215*t5217-Ac_1*t5122*t5109*t5119*t5229*t5289-Ac_1*t5122*t5119*t5217*t5209*t5229*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t6614 = rho_a[index]+rho_b[index];
            double t6615 = 1/pow(t6614,1.0/3.0);
            double t6616 = c*t6615;
            double t6617 = 1/pow(t6614,4.0/3.0);
            double t6618 = sqrt(t6616);
            double t6619 = EcP_3*t6618;
            double t6620 = EcP_4+t6616+t6619;
            double t6621 = c*t6617*(1.0/3.0);
            double t6622 = 1/sqrt(t6616);
            double t6623 = EcP_3*c*t6622*t6617*(1.0/6.0);
            double t6624 = t6621+t6623;
            double t6625 = EcP_2-t6618;
            double t6626 = 1/(t6620*t6620);
            double t6627 = 1/t6620;
            double t6628 = t6618*2.0;
            double t6629 = EcP_3+t6628;
            double t6630 = 1/(t6629*t6629);
            double t6631 = EcP_4*4.0;
            double t6632 = EcP_3*EcP_3;
            double t6633 = t6631-t6632;
            double t6634 = t6630*t6633;
            double t6635 = t6634+1.0;
            double t6636 = 1/t6635;
            double t6637 = 1/c;
            double t6638 = c*t6617*t6627*(1.0/3.0);
            double t6641 = c*t6615*t6624*t6626;
            double t6639 = -t6641+t6638;
            double t6640 = pow(t6614,1.0/3.0);
            double t6642 = 1/pow(t6614,7.0/3.0);
            double t6643 = EcP_2*EcP_2;
            double t6644 = EcP_2*EcP_3;
            double t6645 = EcP_4+t6643+t6644;
            double t6646 = 1/t6645;
            double t6647 = t6625*t6625;
            double t6648 = t6624*t6626*t6647;
            double t6649 = c*t6622*t6625*t6617*t6627*(1.0/3.0);
            double t6650 = t6648+t6649;
            double t6651 = 1/(t6625*t6625);
            double t6652 = c*t6642*(4.0/9.0);
            double t6653 = EcP_3*c*t6622*t6642*(2.0/9.0);
            double t6654 = c*c;
            double t6655 = 1/pow(t6614,8.0/3.0);
            double t6656 = 1/pow(t6616,3.0/2.0);
            double t6701 = EcP_3*t6654*t6655*t6656*(1.0/3.6E1);
            double t6657 = t6652+t6653-t6701;
            double t6658 = t6624*t6624;
            double t6659 = 1/(t6620*t6620*t6620);
            double t6660 = EcP_2*4.0;
            double t6661 = EcP_3*2.0;
            double t6662 = t6660+t6661;
            double t6663 = 1/(t6629*t6629*t6629);
            double t6664 = 1/(t6629*t6629*t6629*t6629*t6629);
            double t6665 = 1/(t6635*t6635);
            double t6666 = EcF_3*t6618;
            double t6667 = EcF_4+t6616+t6666;
            double t6668 = EcF_3*c*t6622*t6617*(1.0/6.0);
            double t6669 = t6621+t6668;
            double t6670 = 1/t6667;
            double t6671 = c*t6670*t6617*(1.0/3.0);
            double t6672 = 1/(t6667*t6667);
            double t6727 = c*t6615*t6672*t6669;
            double t6673 = t6671-t6727;
            double t6674 = 1/pow(t6614,2.0/3.0);
            double t6675 = EcF_2-t6618;
            double t6676 = 1/(t6675*t6675);
            double t6677 = t6675*t6675;
            double t6678 = EcF_3*c*t6622*t6642*(2.0/9.0);
            double t6679 = t6652+t6678-EcF_3*t6654*t6655*t6656*(1.0/3.6E1);
            double t6680 = t6669*t6669;
            double t6681 = 1/(t6667*t6667*t6667);
            double t6682 = EcF_3+t6628;
            double t6683 = EcF_2*4.0;
            double t6684 = EcF_3*2.0;
            double t6685 = t6683+t6684;
            double t6686 = 1/(t6682*t6682);
            double t6687 = EcF_4*4.0;
            double t6688 = EcF_3*EcF_3;
            double t6689 = t6687-t6688;
            double t6690 = t6686*t6689;
            double t6691 = t6690+1.0;
            double t6692 = 1/t6691;
            double t6693 = t6672*t6677*t6669;
            double t6694 = c*t6622*t6670*t6617*t6675*(1.0/3.0);
            double t6695 = t6693+t6694;
            double t6696 = 1/(t6682*t6682*t6682);
            double t6697 = 1/(t6682*t6682*t6682*t6682*t6682);
            double t6698 = 1/(t6691*t6691);
            double t6699 = t6640*t6624*t6637*t6639;
            double t6700 = c*t6642*t6627*(4.0/9.0);
            double t6702 = c*t6615*t6658*t6659*2.0;
            double t6703 = t6700+t6702-c*t6624*t6617*t6626*(2.0/3.0)-c*t6615*t6626*t6657;
            double t6704 = t6620*t6640*t6637*t6703;
            double t6705 = t6650*t6624*t6651;
            double t6706 = c*t6642*t6627*(1.0/1.8E1);
            double t6707 = t6647*t6658*t6659*2.0;
            double t6708 = t6625*t6627*t6654*t6655*t6656*(1.0/1.8E1);
            double t6709 = c*t6622*t6624*t6625*t6617*t6626*(2.0/3.0);
            double t6710 = t6706+t6707+t6708+t6709-t6626*t6647*t6657-c*t6622*t6642*t6625*t6627*(4.0/9.0);
            double t6711 = c*t6630*t6622*t6642*t6662*t6636*(4.0/9.0);
            double t6712 = 1/(t6625*t6625*t6625);
            double t6713 = c*t6620*t6622*t6650*t6617*t6712*(1.0/3.0);
            double t6714 = c*t6633*t6642*t6662*t6664*t6665*(2.0/9.0);
            double t6715 = t6711+t6713+t6705+t6714-t6620*t6651*t6710-c*t6642*t6662*t6636*t6663*(2.0/9.0)-t6630* \
               t6662*t6636*t6654*t6655*t6656*(1.0/1.8E1);
            double t6716 = EcP_2*EcP_3*t6646*t6715;
            double t6717 = EcP_3*c*t6642*t6636*t6663*(4.0/9.0);
            double t6718 = EcP_3*t6630*t6636*t6654*t6655*t6656*(1.0/9.0);
            double t6719 = t6699+t6704+t6716+t6717+t6718-t6620*t6637*t6674*t6639*(1.0/3.0)-EcP_3*c*t6630*t6622* \
               t6642*t6636*(8.0/9.0)-EcP_3*c*t6633*t6642*t6664*t6665*(4.0/9.0);
            double t6720 = EcP_1*t6719;
            double t6721 = pow(2.0,1.0/3.0);
            double t6722 = t6721*2.0;
            double t6723 = t6722-2.0;
            double t6724 = two_13*2.0;
            double t6725 = t6724-2.0;
            double t6726 = 1/t6725;
            double t6728 = EcF_2*EcF_2;
            double t6729 = EcF_2*EcF_3;
            double t6730 = EcF_4+t6728+t6729;
            double t6731 = 1/t6730;
            double t6732 = t6620*t6640*t6637*t6639;
            double t6733 = t6620*t6650*t6651;
            double t6734 = c*t6630*t6622*t6617*t6662*t6636*(1.0/3.0);
            double t6735 = t6733+t6734;
            double t6736 = EcP_2*EcP_3*t6646*t6735;
            double t6737 = t6732+t6736-EcP_3*c*t6630*t6622*t6617*t6636*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t6737*-2.0+t6614*(t6720-t6723*t6726*(t6720-EcF_1*(t6640*t6637*t6667* \
               (c*t6642*t6670*(4.0/9.0)+c*t6615*t6680*t6681*2.0-c*t6615*t6672*t6679-c*t6617*t6672*t6669*(2.0/3.0) \
               )+t6640*t6637*t6673*t6669-t6637*t6673*t6674*t6667*(1.0/3.0)+EcF_2*EcF_3*t6731*(-t6667*t6676*(c*t6642* \
               t6670*(1.0/1.8E1)+t6680*t6681*t6677*2.0-t6672*t6677*t6679-c*t6622*t6642*t6670*t6675*(4.0/9.0)+t6670* \
               t6654*t6655*t6656*t6675*(1.0/1.8E1)+c*t6622*t6617*t6672*t6675*t6669*(2.0/3.0))+t6676*t6695*t6669-c* \
               t6642*t6692*t6685*t6696*(2.0/9.0)+c*t6622*t6642*t6692*t6685*t6686*(4.0/9.0)+c*t6642*t6685*t6697*t6689* \
               t6698*(2.0/9.0)-t6654*t6655*t6656*t6692*t6685*t6686*(1.0/1.8E1)+c*t6622*t6617*1/(t6675*t6675*t6675) \
               *t6667*t6695*(1.0/3.0))+EcF_3*c*t6642*t6692*t6696*(4.0/9.0)-EcF_3*c*t6622*t6642*t6692*t6686*(8.0/9.0) \
               -EcF_3*c*t6642*t6697*t6689*t6698*(4.0/9.0)+EcF_3*t6654*t6655*t6656*t6692*t6686*(1.0/9.0))))+t6723* \
               t6726*(EcP_1*t6737-EcF_1*(t6640*t6637*t6673*t6667+EcF_2*EcF_3*t6731*(t6667*t6676*t6695+c*t6622*t6617* \
               t6692*t6685*t6686*(1.0/3.0))-EcF_3*c*t6622*t6617*t6692*t6686*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t5970 = rho_a[index]+rho_b[index];
            double t5971 = 1/pow(t5970,1.0/3.0);
            double t5972 = c*t5971;
            double t5973 = 1/pow(t5970,4.0/3.0);
            double t5974 = sqrt(t5972);
            double t5975 = EcP_3*t5974;
            double t5976 = EcP_4+t5972+t5975;
            double t5977 = c*t5973*(1.0/3.0);
            double t5978 = 1/sqrt(t5972);
            double t5979 = EcP_3*c*t5973*t5978*(1.0/6.0);
            double t5980 = t5977+t5979;
            double t5981 = EcP_2-t5974;
            double t5982 = 1/(t5976*t5976);
            double t5983 = 1/t5976;
            double t5984 = t5974*2.0;
            double t5985 = EcP_3+t5984;
            double t5986 = 1/(t5985*t5985);
            double t5987 = EcP_4*4.0;
            double t5988 = EcP_3*EcP_3;
            double t5989 = t5987-t5988;
            double t5990 = t5986*t5989;
            double t5991 = t5990+1.0;
            double t5992 = 1/t5991;
            double t5993 = 1/c;
            double t5994 = c*t5973*t5983*(1.0/3.0);
            double t5997 = c*t5971*t5980*t5982;
            double t5995 = t5994-t5997;
            double t5996 = pow(t5970,1.0/3.0);
            double t5998 = 1/pow(t5970,7.0/3.0);
            double t5999 = EcP_2*EcP_2;
            double t6000 = EcP_2*EcP_3;
            double t6001 = EcP_4+t5999+t6000;
            double t6002 = 1/t6001;
            double t6003 = t5981*t5981;
            double t6004 = t5980*t5982*t6003;
            double t6005 = c*t5981*t5973*t5983*t5978*(1.0/3.0);
            double t6006 = t6004+t6005;
            double t6007 = 1/(t5981*t5981);
            double t6008 = c*t5998*(4.0/9.0);
            double t6009 = EcP_3*c*t5978*t5998*(2.0/9.0);
            double t6010 = c*c;
            double t6011 = 1/pow(t5970,8.0/3.0);
            double t6012 = 1/pow(t5972,3.0/2.0);
            double t6057 = EcP_3*t6010*t6011*t6012*(1.0/3.6E1);
            double t6013 = t6008+t6009-t6057;
            double t6014 = t5980*t5980;
            double t6015 = 1/(t5976*t5976*t5976);
            double t6016 = EcP_2*4.0;
            double t6017 = EcP_3*2.0;
            double t6018 = t6016+t6017;
            double t6019 = 1/(t5985*t5985*t5985);
            double t6020 = 1/(t5985*t5985*t5985*t5985*t5985);
            double t6021 = 1/(t5991*t5991);
            double t6022 = EcF_3*t5974;
            double t6023 = EcF_4+t5972+t6022;
            double t6024 = EcF_3*c*t5973*t5978*(1.0/6.0);
            double t6025 = t5977+t6024;
            double t6026 = 1/t6023;
            double t6027 = c*t5973*t6026*(1.0/3.0);
            double t6028 = 1/(t6023*t6023);
            double t6083 = c*t5971*t6025*t6028;
            double t6029 = t6027-t6083;
            double t6030 = 1/pow(t5970,2.0/3.0);
            double t6031 = EcF_2-t5974;
            double t6032 = 1/(t6031*t6031);
            double t6033 = t6031*t6031;
            double t6034 = EcF_3*c*t5978*t5998*(2.0/9.0);
            double t6035 = t6034+t6008-EcF_3*t6010*t6011*t6012*(1.0/3.6E1);
            double t6036 = t6025*t6025;
            double t6037 = 1/(t6023*t6023*t6023);
            double t6038 = EcF_3+t5984;
            double t6039 = EcF_2*4.0;
            double t6040 = EcF_3*2.0;
            double t6041 = t6040+t6039;
            double t6042 = 1/(t6038*t6038);
            double t6043 = EcF_4*4.0;
            double t6044 = EcF_3*EcF_3;
            double t6045 = t6043-t6044;
            double t6046 = t6042*t6045;
            double t6047 = t6046+1.0;
            double t6048 = 1/t6047;
            double t6049 = t6033*t6025*t6028;
            double t6050 = c*t5973*t5978*t6031*t6026*(1.0/3.0);
            double t6051 = t6050+t6049;
            double t6052 = 1/(t6038*t6038*t6038);
            double t6053 = 1/(t6038*t6038*t6038*t6038*t6038);
            double t6054 = 1/(t6047*t6047);
            double t6055 = t5980*t5993*t5995*t5996;
            double t6056 = c*t5983*t5998*(4.0/9.0);
            double t6058 = c*t5971*t6014*t6015*2.0;
            double t6059 = t6056+t6058-c*t5980*t5973*t5982*(2.0/3.0)-c*t5971*t5982*t6013;
            double t6060 = t5993*t5976*t5996*t6059;
            double t6061 = t5980*t6006*t6007;
            double t6062 = c*t5983*t5998*(1.0/1.8E1);
            double t6063 = t6003*t6014*t6015*2.0;
            double t6064 = t5981*t5983*t6010*t6011*t6012*(1.0/1.8E1);
            double t6065 = c*t5980*t5981*t5973*t5982*t5978*(2.0/3.0);
            double t6066 = t6062+t6063+t6064+t6065-t5982*t6003*t6013-c*t5981*t5983*t5978*t5998*(4.0/9.0);
            double t6067 = c*t5992*t5986*t5978*t5998*t6018*(4.0/9.0);
            double t6068 = 1/(t5981*t5981*t5981);
            double t6069 = c*t5973*t5976*t5978*t6006*t6068*(1.0/3.0);
            double t6070 = c*t5989*t5998*t6020*t6021*t6018*(2.0/9.0);
            double t6071 = t6061+t6070+t6067+t6069-t5976*t6007*t6066-c*t5992*t5998*t6018*t6019*(2.0/9.0)-t5992* \
               t5986*t6010*t6011*t6012*t6018*(1.0/1.8E1);
            double t6072 = EcP_2*EcP_3*t6002*t6071;
            double t6073 = EcP_3*c*t5992*t5998*t6019*(4.0/9.0);
            double t6074 = EcP_3*t5992*t5986*t6010*t6011*t6012*(1.0/9.0);
            double t6075 = t6060+t6072+t6055+t6073+t6074-t5993*t5976*t5995*t6030*(1.0/3.0)-EcP_3*c*t5992*t5986* \
               t5978*t5998*(8.0/9.0)-EcP_3*c*t5989*t5998*t6020*t6021*(4.0/9.0);
            double t6076 = EcP_1*t6075;
            double t6077 = pow(2.0,1.0/3.0);
            double t6078 = t6077*2.0;
            double t6079 = t6078-2.0;
            double t6080 = two_13*2.0;
            double t6081 = t6080-2.0;
            double t6082 = 1/t6081;
            double t6084 = EcF_2*EcF_2;
            double t6085 = EcF_2*EcF_3;
            double t6086 = EcF_4+t6084+t6085;
            double t6087 = 1/t6086;
            double t6088 = t5993*t5976*t5995*t5996;
            double t6089 = t5976*t6006*t6007;
            double t6090 = c*t5973*t5992*t5986*t5978*t6018*(1.0/3.0);
            double t6091 = t6090+t6089;
            double t6092 = EcP_2*EcP_3*t6002*t6091;
            double t6093 = t6092+t6088-EcP_3*c*t5973*t5992*t5986*t5978*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t6093*-2.0+t5970*(t6076-t6082*t6079*(t6076-EcF_1*(t5993*t5996*t6023* \
               (c*t5998*t6026*(4.0/9.0)-c*t5971*t6035*t6028+c*t5971*t6036*t6037*2.0-c*t5973*t6025*t6028*(2.0/3.0) \
               )+t5993*t5996*t6025*t6029-t5993*t6030*t6023*t6029*(1.0/3.0)+EcF_2*EcF_3*t6087*(-t6023*t6032*(c*t5998* \
               t6026*(1.0/1.8E1)-t6033*t6035*t6028+t6033*t6036*t6037*2.0-c*t5978*t5998*t6031*t6026*(4.0/9.0)+t6010* \
               t6011*t6012*t6031*t6026*(1.0/1.8E1)+c*t5973*t5978*t6031*t6025*t6028*(2.0/3.0))+t6032*t6051*t6025-c* \
               t5998*t6041*t6052*t6048*(2.0/9.0)+c*t5978*t5998*t6041*t6042*t6048*(4.0/9.0)+c*t5998*t6041*t6053*t6045* \
               t6054*(2.0/9.0)-t6010*t6011*t6012*t6041*t6042*t6048*(1.0/1.8E1)+c*t5973*t5978*1/(t6031*t6031*t6031) \
               *t6023*t6051*(1.0/3.0))+EcF_3*c*t5998*t6052*t6048*(4.0/9.0)-EcF_3*c*t5978*t5998*t6042*t6048*(8.0/9.0) \
               -EcF_3*c*t5998*t6053*t6045*t6054*(4.0/9.0)+EcF_3*t6010*t6011*t6012*t6042*t6048*(1.0/9.0))))+t6082* \
               t6079*(EcP_1*t6093-EcF_1*(t5993*t5996*t6023*t6029+EcF_2*EcF_3*t6087*(t6023*t6032*t6051+c*t5973*t5978* \
               t6041*t6042*t6048*(1.0/3.0))-EcF_3*c*t5973*t5978*t6042*t6048*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t5293 = rho_a[index]+rho_b[index];
            double t5294 = 1/pow(t5293,1.0/3.0);
            double t5295 = c*t5294;
            double t5296 = 1/pow(t5293,4.0/3.0);
            double t5297 = sqrt(t5295);
            double t5298 = EcP_3*t5297;
            double t5299 = EcP_4+t5295+t5298;
            double t5300 = c*t5296*(1.0/3.0);
            double t5301 = 1/sqrt(t5295);
            double t5302 = EcP_3*c*t5296*t5301*(1.0/6.0);
            double t5303 = t5300+t5302;
            double t5304 = 1/c;
            double t5305 = 1/t5299;
            double t5306 = c*t5296*t5305*(1.0/3.0);
            double t5307 = 1/(t5299*t5299);
            double t5442 = c*t5294*t5303*t5307;
            double t5308 = t5306-t5442;
            double t5309 = pow(t5293,1.0/3.0);
            double t5310 = 1/pow(t5293,7.0/3.0);
            double t5311 = EcP_2-t5297;
            double t5312 = 1/(t5311*t5311);
            double t5313 = t5311*t5311;
            double t5314 = c*t5310*(4.0/9.0);
            double t5315 = EcP_3*c*t5301*t5310*(2.0/9.0);
            double t5316 = c*c;
            double t5317 = 1/pow(t5293,8.0/3.0);
            double t5318 = 1/pow(t5295,3.0/2.0);
            double t5445 = EcP_3*t5316*t5317*t5318*(1.0/3.6E1);
            double t5319 = t5314+t5315-t5445;
            double t5320 = t5303*t5303;
            double t5321 = 1/(t5299*t5299*t5299);
            double t5322 = t5297*2.0;
            double t5323 = EcP_3+t5322;
            double t5324 = EcP_2*4.0;
            double t5325 = EcP_3*2.0;
            double t5326 = t5324+t5325;
            double t5327 = 1/(t5323*t5323);
            double t5328 = EcP_4*4.0;
            double t5329 = EcP_3*EcP_3;
            double t5330 = t5328-t5329;
            double t5331 = t5330*t5327;
            double t5332 = t5331+1.0;
            double t5333 = 1/t5332;
            double t5334 = t5303*t5313*t5307;
            double t5335 = c*t5296*t5301*t5311*t5305*(1.0/3.0);
            double t5336 = t5334+t5335;
            double t5337 = 1/(t5323*t5323*t5323);
            double t5338 = 1/(t5323*t5323*t5323*t5323*t5323);
            double t5339 = 1/(t5332*t5332);
            double t5340 = rho_a[index]-rho_b[index];
            double t5341 = t5340*t5340;
            double t5342 = EcF_4*4.0;
            double t5343 = EcF_3*EcF_3;
            double t5344 = t5342-t5343;
            double t5345 = EcF_2-t5297;
            double t5346 = EcF_3*t5297;
            double t5347 = EcF_4+t5295+t5346;
            double t5348 = 1/t5347;
            double t5349 = sqrt(t5344);
            double t5350 = EcF_3+t5322;
            double t5351 = 1/t5350;
            double t5352 = t5351*t5349;
            double t5353 = atan(t5352);
            double t5354 = 1/sqrt(t5344);
            double t5355 = sqrt(t5330);
            double t5356 = 1/t5323;
            double t5357 = t5355*t5356;
            double t5358 = atan(t5357);
            double t5359 = 1/sqrt(t5330);
            double t5360 = EcP_2*EcP_2;
            double t5361 = EcP_2*EcP_3;
            double t5362 = EcP_4+t5360+t5361;
            double t5363 = 1/t5362;
            double t5364 = Ac_4*4.0;
            double t5365 = Ac_3*Ac_3;
            double t5366 = t5364-t5365;
            double t5367 = Ac_2-t5297;
            double t5368 = Ac_3*t5297;
            double t5369 = Ac_4+t5295+t5368;
            double t5370 = 1/t5369;
            double t5371 = sqrt(t5366);
            double t5372 = Ac_3+t5322;
            double t5373 = 1/t5372;
            double t5374 = t5371*t5373;
            double t5375 = atan(t5374);
            double t5376 = 1/sqrt(t5366);
            double t5377 = c*t5294*t5370;
            double t5378 = log(t5377);
            double t5379 = Ac_3*t5375*t5376*2.0;
            double t5380 = t5367*t5367;
            double t5381 = t5370*t5380;
            double t5382 = log(t5381);
            double t5383 = Ac_2*4.0;
            double t5384 = Ac_3*2.0;
            double t5385 = t5383+t5384;
            double t5386 = t5375*t5376*t5385;
            double t5387 = t5382+t5386;
            double t5388 = Ac_2*Ac_2;
            double t5389 = Ac_2*Ac_3;
            double t5390 = Ac_4+t5388+t5389;
            double t5391 = 1/t5390;
            double t5409 = Ac_2*Ac_3*t5391*t5387;
            double t5392 = t5378+t5379-t5409;
            double t5393 = 1/t5293;
            double t5394 = t5340*t5393;
            double t5395 = 1/(t5293*t5293);
            double t5396 = t5395*2.0;
            double t5397 = 1/(t5293*t5293*t5293);
            double t5398 = t5340*t5397*2.0;
            double t5399 = t5396+t5398;
            double t5400 = t5394+1.0;
            double t5403 = t5340*t5395;
            double t5401 = t5393+t5403;
            double t5402 = -t5394+1.0;
            double t5404 = t5401*t5401;
            double t5405 = 1/d2fz0;
            double t5406 = two_13*2.0;
            double t5407 = t5406-2.0;
            double t5408 = 1/t5407;
            double t5410 = 1/(t5293*t5293*t5293*t5293);
            double t5411 = t5341*t5341;
            double t5412 = 1/Ac_1;
            double t5413 = EcF_3*c*t5296*t5301*(1.0/6.0);
            double t5414 = t5300+t5413;
            double t5415 = c*t5296*t5348*(1.0/3.0);
            double t5416 = 1/(t5347*t5347);
            double t5466 = c*t5294*t5414*t5416;
            double t5417 = t5415-t5466;
            double t5418 = 1/pow(t5293,2.0/3.0);
            double t5419 = EcF_2*EcF_2;
            double t5420 = EcF_2*EcF_3;
            double t5421 = EcF_4+t5420+t5419;
            double t5422 = 1/t5421;
            double t5423 = t5345*t5345;
            double t5424 = 1/(t5345*t5345);
            double t5425 = EcF_3*c*t5301*t5310*(2.0/9.0);
            double t5426 = t5314+t5425-EcF_3*t5316*t5317*t5318*(1.0/3.6E1);
            double t5427 = t5414*t5414;
            double t5428 = 1/(t5347*t5347*t5347);
            double t5429 = EcF_2*4.0;
            double t5430 = EcF_3*2.0;
            double t5431 = t5430+t5429;
            double t5432 = 1/(t5350*t5350);
            double t5433 = t5344*t5432;
            double t5434 = t5433+1.0;
            double t5435 = 1/t5434;
            double t5436 = t5414*t5423*t5416;
            double t5437 = c*t5296*t5301*t5345*t5348*(1.0/3.0);
            double t5438 = t5436+t5437;
            double t5439 = 1/(t5350*t5350*t5350);
            double t5440 = 1/(t5350*t5350*t5350*t5350*t5350);
            double t5441 = 1/(t5434*t5434);
            double t5443 = t5303*t5304*t5308*t5309;
            double t5444 = c*t5310*t5305*(4.0/9.0);
            double t5446 = c*t5294*t5320*t5321*2.0;
            double t5447 = t5444+t5446-c*t5296*t5303*t5307*(2.0/3.0)-c*t5294*t5307*t5319;
            double t5448 = t5299*t5304*t5309*t5447;
            double t5449 = t5303*t5312*t5336;
            double t5450 = c*t5310*t5305*(1.0/1.8E1);
            double t5451 = t5320*t5321*t5313*2.0;
            double t5452 = t5311*t5305*t5316*t5317*t5318*(1.0/1.8E1);
            double t5453 = c*t5296*t5301*t5311*t5303*t5307*(2.0/3.0);
            double t5454 = t5450+t5451+t5452+t5453-t5313*t5307*t5319-c*t5301*t5310*t5311*t5305*(4.0/9.0);
            double t5455 = c*t5301*t5310*t5333*t5326*t5327*(4.0/9.0);
            double t5456 = 1/(t5311*t5311*t5311);
            double t5457 = c*t5296*t5299*t5301*t5336*t5456*(1.0/3.0);
            double t5458 = c*t5310*t5330*t5326*t5338*t5339*(2.0/9.0);
            double t5459 = t5455+t5457+t5449+t5458-t5299*t5312*t5454-c*t5310*t5333*t5326*t5337*(2.0/9.0)-t5333* \
               t5316*t5317*t5326*t5318*t5327*(1.0/1.8E1);
            double t5460 = EcP_2*EcP_3*t5363*t5459;
            double t5461 = EcP_3*c*t5310*t5333*t5337*(4.0/9.0);
            double t5462 = EcP_3*t5333*t5316*t5317*t5318*t5327*(1.0/9.0);
            double t5463 = t5460+t5443+t5461+t5462+t5448-t5299*t5304*t5308*t5418*(1.0/3.0)-EcP_3*c*t5301*t5310* \
               t5333*t5327*(8.0/9.0)-EcP_3*c*t5310*t5330*t5338*t5339*(4.0/9.0);
            double t5464 = EcP_1*t5463;
            double t5465 = 1/t5392;
            double t5467 = Ac_3*c*t5296*t5301*(1.0/6.0);
            double t5468 = t5300+t5467;
            double t5469 = 1/(t5369*t5369);
            double t5470 = 1/(t5372*t5372);
            double t5471 = t5366*t5470;
            double t5472 = t5471+1.0;
            double t5473 = 1/t5472;
            double t5474 = c*t5294*t5348;
            double t5475 = log(t5474);
            double t5476 = EcF_3*t5353*t5354*2.0;
            double t5477 = t5348*t5423;
            double t5478 = log(t5477);
            double t5479 = t5353*t5354*t5431;
            double t5480 = t5478+t5479;
            double t5504 = EcF_2*EcF_3*t5422*t5480;
            double t5481 = t5475+t5476-t5504;
            double t5482 = EcF_1*t5481;
            double t5483 = c*t5294*t5305;
            double t5484 = log(t5483);
            double t5485 = EcP_3*t5358*t5359*2.0;
            double t5486 = t5313*t5305;
            double t5487 = log(t5486);
            double t5488 = t5326*t5358*t5359;
            double t5489 = t5487+t5488;
            double t5505 = EcP_2*EcP_3*t5363*t5489;
            double t5490 = t5484+t5485-t5505;
            double t5506 = EcP_1*t5490;
            double t5491 = t5482-t5506;
            double t5492 = c*t5296*t5370*(1.0/3.0);
            double t5508 = c*t5294*t5468*t5469;
            double t5493 = t5492-t5508;
            double t5494 = t5304*t5309*t5369*t5493;
            double t5495 = t5380*t5468*t5469;
            double t5496 = c*t5296*t5301*t5370*t5367*(1.0/3.0);
            double t5497 = t5495+t5496;
            double t5498 = 1/(t5367*t5367);
            double t5499 = t5369*t5497*t5498;
            double t5500 = c*t5296*t5301*t5385*t5470*t5473*(1.0/3.0);
            double t5501 = t5499+t5500;
            double t5502 = Ac_2*Ac_3*t5391*t5501;
            double t5530 = Ac_3*c*t5296*t5301*t5470*t5473*(2.0/3.0);
            double t5503 = t5494+t5502-t5530;
            double t5507 = 1/(t5392*t5392);
            double t5509 = Ac_3*c*t5301*t5310*(2.0/9.0);
            double t5554 = Ac_3*t5316*t5317*t5318*(1.0/3.6E1);
            double t5510 = t5314+t5509-t5554;
            double t5511 = t5468*t5468;
            double t5512 = 1/(t5369*t5369*t5369);
            double t5513 = 1/(t5372*t5372*t5372);
            double t5514 = 1/(t5372*t5372*t5372*t5372*t5372);
            double t5515 = 1/(t5472*t5472);
            double t5516 = t5304*t5309*t5347*t5417;
            double t5517 = t5347*t5424*t5438;
            double t5518 = c*t5296*t5301*t5431*t5432*t5435*(1.0/3.0);
            double t5519 = t5517+t5518;
            double t5520 = EcF_2*EcF_3*t5422*t5519;
            double t5531 = EcF_3*c*t5296*t5301*t5432*t5435*(2.0/3.0);
            double t5521 = t5520-t5531+t5516;
            double t5522 = EcF_1*t5521;
            double t5523 = t5299*t5304*t5308*t5309;
            double t5524 = t5299*t5312*t5336;
            double t5525 = c*t5296*t5301*t5333*t5326*t5327*(1.0/3.0);
            double t5526 = t5524+t5525;
            double t5527 = EcP_2*EcP_3*t5363*t5526;
            double t5532 = EcP_3*c*t5296*t5301*t5333*t5327*(2.0/3.0);
            double t5528 = t5523-t5532+t5527;
            double t5533 = EcP_1*t5528;
            double t5529 = t5522-t5533;
            double t5534 = d2fz0*t5412*t5465*t5529;
            double t5541 = d2fz0*t5412*t5491*t5503*t5507;
            double t5535 = -t5541+t5534;
            double t5536 = d2fz0*t5412*t5491*t5465;
            double t5537 = t5536-1.0;
            double t5538 = 1/(t5293*t5293*t5293*t5293*t5293);
            double t5539 = pow(t5400,1.0/3.0);
            double t5540 = pow(t5402,1.0/3.0);
            double t5542 = t5401*t5540*(4.0/3.0);
            double t5543 = t5410*t5411*t5537;
            double t5544 = t5543+1.0;
            double t5574 = t5401*t5539*(4.0/3.0);
            double t5545 = t5542-t5574;
            double t5546 = pow(t5400,4.0/3.0);
            double t5547 = pow(t5402,4.0/3.0);
            double t5548 = t5546+t5547-2.0;
            double t5549 = t5410*t5411*t5535;
            double t5550 = t5340*t5341*t5410*t5537*4.0;
            double t5551 = t5411*t5537*t5538*4.0;
            double t5552 = t5550+t5551+t5549;
            double t5553 = c*t5310*t5370*(4.0/9.0);
            double t5555 = c*t5294*t5511*t5512*2.0;
            double t5556 = t5553+t5555-c*t5296*t5468*t5469*(2.0/3.0)-c*t5294*t5469*t5510;
            double t5557 = t5304*t5309*t5369*t5556;
            double t5558 = t5468*t5497*t5498;
            double t5559 = c*t5310*t5370*(1.0/1.8E1);
            double t5560 = t5380*t5511*t5512*2.0;
            double t5561 = t5316*t5370*t5317*t5318*t5367*(1.0/1.8E1);
            double t5562 = c*t5296*t5301*t5367*t5468*t5469*(2.0/3.0);
            double t5563 = t5560+t5561+t5562+t5559-t5380*t5469*t5510-c*t5301*t5310*t5370*t5367*(4.0/9.0);
            double t5564 = c*t5301*t5310*t5385*t5470*t5473*(4.0/9.0);
            double t5565 = 1/(t5367*t5367*t5367);
            double t5566 = c*t5296*t5301*t5369*t5497*t5565*(1.0/3.0);
            double t5567 = c*t5310*t5366*t5385*t5514*t5515*(2.0/9.0);
            double t5568 = t5564+t5566+t5558+t5567-t5369*t5498*t5563-c*t5310*t5385*t5473*t5513*(2.0/9.0)-t5316* \
               t5317*t5318*t5385*t5470*t5473*(1.0/1.8E1);
            double t5569 = Ac_2*Ac_3*t5391*t5568;
            double t5570 = t5304*t5309*t5493*t5468;
            double t5571 = Ac_3*c*t5310*t5473*t5513*(4.0/9.0);
            double t5572 = Ac_3*t5316*t5317*t5318*t5470*t5473*(1.0/9.0);
            double t5573 = t5570+t5571+t5572+t5557+t5569-t5304*t5369*t5418*t5493*(1.0/3.0)-Ac_3*c*t5301*t5310* \
               t5470*t5473*(8.0/9.0)-Ac_3*c*t5310*t5366*t5514*t5515*(4.0/9.0);
            v_rho_b_rho_b_[index] = EcP_1*t5528*-2.0+t5293*(t5464+Ac_1*t5392*t5405*t5408*t5548*(1/(t5293*t5293* \
               t5293*t5293*t5293*t5293)*t5411*t5537*2.0E1+t5341*t5410*t5537*1.2E1+t5411*t5535*t5538*8.0-t5410*t5411* \
               (d2fz0*t5412*t5465*(t5464-EcF_1*(t5304*t5309*t5347*(c*t5310*t5348*(4.0/9.0)-c*t5296*t5414*t5416*(2.0/ \
               3.0)-c*t5294*t5416*t5426+c*t5294*t5427*t5428*2.0)+t5304*t5309*t5414*t5417-t5304*t5347*t5417*t5418* \
               (1.0/3.0)+EcF_2*EcF_3*t5422*(-t5347*t5424*(c*t5310*t5348*(1.0/1.8E1)-t5423*t5416*t5426+t5423*t5427* \
               t5428*2.0-c*t5301*t5310*t5345*t5348*(4.0/9.0)+t5316*t5317*t5318*t5345*t5348*(1.0/1.8E1)+c*t5296*t5301* \
               t5345*t5414*t5416*(2.0/3.0))+t5414*t5424*t5438-c*t5310*t5431*t5435*t5439*(2.0/9.0)+c*t5301*t5310*t5431* \
               t5432*t5435*(4.0/9.0)+c*t5310*t5344*t5431*t5440*t5441*(2.0/9.0)-t5316*t5317*t5318*t5431*t5432*t5435* \
               (1.0/1.8E1)+c*t5296*t5301*1/(t5345*t5345*t5345)*t5347*t5438*(1.0/3.0))+EcF_3*c*t5310*t5435*t5439*(4.0/ \
               9.0)-EcF_3*c*t5301*t5310*t5432*t5435*(8.0/9.0)-EcF_3*c*t5310*t5344*t5440*t5441*(4.0/9.0)+EcF_3*t5316* \
               t5317*t5318*t5432*t5435*(1.0/9.0)))-d2fz0*1/(t5392*t5392*t5392)*t5412*t5491*(t5503*t5503)*2.0+d2fz0* \
               t5412*t5491*t5507*t5573+d2fz0*t5412*t5503*t5507*t5529*2.0)+t5340*t5341*t5410*t5535*8.0+t5340*t5341* \
               t5537*t5538*3.2E1)+Ac_1*t5392*t5405*t5408*t5544*(t5399*t5540*(-4.0/3.0)+t5399*t5539*(4.0/3.0)+1/pow(t5400,2.0/ \
               3.0)*t5404*(4.0/9.0)+1/pow(t5402,2.0/3.0)*t5404*(4.0/9.0))-Ac_1*t5392*t5405*t5408*t5552*t5545*2.0- \
               Ac_1*t5405*t5408*t5503*t5544*t5545*2.0+Ac_1*t5405*t5408*t5503*t5552*t5548*2.0+Ac_1*t5405*t5408*t5544* \
               t5573*t5548)+Ac_1*t5392*t5405*t5408*t5544*(t5542-t5574)*2.0-Ac_1*t5392*t5405*t5408*t5552*t5548*2.0- \
               Ac_1*t5405*t5408*t5503*t5544*t5548*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t6739 = rho_a[index]+rho_b[index];
            double t6740 = 1/pow(t6739,1.0/3.0);
            double t6741 = c*t6740;
            double t6742 = 1/pow(t6739,4.0/3.0);
            double t6743 = sqrt(t6741);
            double t6744 = EcP_3*t6743;
            double t6745 = EcP_4+t6741+t6744;
            double t6746 = c*t6742*(1.0/3.0);
            double t6747 = 1/sqrt(t6741);
            double t6748 = EcP_3*c*t6742*t6747*(1.0/6.0);
            double t6749 = t6746+t6748;
            double t6750 = EcP_2-t6743;
            double t6751 = 1/(t6745*t6745);
            double t6752 = 1/t6745;
            double t6753 = t6743*2.0;
            double t6754 = EcP_3+t6753;
            double t6755 = 1/(t6754*t6754);
            double t6756 = EcP_4*4.0;
            double t6757 = EcP_3*EcP_3;
            double t6758 = t6756-t6757;
            double t6759 = t6755*t6758;
            double t6760 = t6759+1.0;
            double t6761 = 1/t6760;
            double t6762 = 1/c;
            double t6763 = c*t6742*t6752*(1.0/3.0);
            double t6766 = c*t6740*t6751*t6749;
            double t6764 = t6763-t6766;
            double t6765 = pow(t6739,1.0/3.0);
            double t6767 = 1/pow(t6739,7.0/3.0);
            double t6768 = EcP_2*EcP_2;
            double t6769 = EcP_2*EcP_3;
            double t6770 = EcP_4+t6768+t6769;
            double t6771 = 1/t6770;
            double t6772 = t6750*t6750;
            double t6773 = t6751*t6772*t6749;
            double t6774 = c*t6750*t6742*t6752*t6747*(1.0/3.0);
            double t6775 = t6773+t6774;
            double t6776 = 1/(t6750*t6750);
            double t6777 = c*t6767*(4.0/9.0);
            double t6778 = EcP_3*c*t6747*t6767*(2.0/9.0);
            double t6779 = c*c;
            double t6780 = 1/pow(t6739,8.0/3.0);
            double t6781 = 1/pow(t6741,3.0/2.0);
            double t6826 = EcP_3*t6780*t6781*t6779*(1.0/3.6E1);
            double t6782 = t6777+t6778-t6826;
            double t6783 = t6749*t6749;
            double t6784 = 1/(t6745*t6745*t6745);
            double t6785 = EcP_2*4.0;
            double t6786 = EcP_3*2.0;
            double t6787 = t6785+t6786;
            double t6788 = 1/(t6754*t6754*t6754);
            double t6789 = 1/(t6754*t6754*t6754*t6754*t6754);
            double t6790 = 1/(t6760*t6760);
            double t6791 = EcF_3*t6743;
            double t6792 = EcF_4+t6741+t6791;
            double t6793 = EcF_3*c*t6742*t6747*(1.0/6.0);
            double t6794 = t6746+t6793;
            double t6795 = 1/t6792;
            double t6796 = c*t6742*t6795*(1.0/3.0);
            double t6797 = 1/(t6792*t6792);
            double t6852 = c*t6740*t6794*t6797;
            double t6798 = t6796-t6852;
            double t6799 = 1/pow(t6739,2.0/3.0);
            double t6800 = EcF_2-t6743;
            double t6801 = 1/(t6800*t6800);
            double t6802 = t6800*t6800;
            double t6803 = EcF_3*c*t6747*t6767*(2.0/9.0);
            double t6804 = t6777+t6803-EcF_3*t6780*t6781*t6779*(1.0/3.6E1);
            double t6805 = t6794*t6794;
            double t6806 = 1/(t6792*t6792*t6792);
            double t6807 = EcF_3+t6753;
            double t6808 = EcF_2*4.0;
            double t6809 = EcF_3*2.0;
            double t6810 = t6808+t6809;
            double t6811 = 1/(t6807*t6807);
            double t6812 = EcF_4*4.0;
            double t6813 = EcF_3*EcF_3;
            double t6814 = t6812-t6813;
            double t6815 = t6811*t6814;
            double t6816 = t6815+1.0;
            double t6817 = 1/t6816;
            double t6818 = t6794*t6797*t6802;
            double t6819 = c*t6742*t6747*t6795*t6800*(1.0/3.0);
            double t6820 = t6818+t6819;
            double t6821 = 1/(t6807*t6807*t6807);
            double t6822 = 1/(t6807*t6807*t6807*t6807*t6807);
            double t6823 = 1/(t6816*t6816);
            double t6824 = t6762*t6764*t6765*t6749;
            double t6825 = c*t6752*t6767*(4.0/9.0);
            double t6827 = c*t6740*t6783*t6784*2.0;
            double t6828 = t6825+t6827-c*t6740*t6751*t6782-c*t6742*t6751*t6749*(2.0/3.0);
            double t6829 = t6762*t6745*t6765*t6828;
            double t6830 = t6775*t6749*t6776;
            double t6831 = c*t6752*t6767*(1.0/1.8E1);
            double t6832 = t6772*t6783*t6784*2.0;
            double t6833 = t6750*t6752*t6780*t6781*t6779*(1.0/1.8E1);
            double t6834 = c*t6750*t6742*t6751*t6747*t6749*(2.0/3.0);
            double t6835 = t6831+t6832+t6833+t6834-t6751*t6772*t6782-c*t6750*t6752*t6747*t6767*(4.0/9.0);
            double t6836 = c*t6761*t6755*t6747*t6767*t6787*(4.0/9.0);
            double t6837 = 1/(t6750*t6750*t6750);
            double t6838 = c*t6742*t6745*t6747*t6775*t6837*(1.0/3.0);
            double t6839 = c*t6790*t6758*t6767*t6787*t6789*(2.0/9.0);
            double t6840 = t6830+t6836+t6838+t6839-t6745*t6776*t6835-c*t6761*t6767*t6787*t6788*(2.0/9.0)-t6761* \
               t6780*t6781*t6755*t6787*t6779*(1.0/1.8E1);
            double t6841 = EcP_2*EcP_3*t6771*t6840;
            double t6842 = EcP_3*c*t6761*t6767*t6788*(4.0/9.0);
            double t6843 = EcP_3*t6761*t6780*t6781*t6755*t6779*(1.0/9.0);
            double t6844 = t6841+t6824+t6842+t6843+t6829-t6762*t6745*t6764*t6799*(1.0/3.0)-EcP_3*c*t6761*t6755* \
               t6747*t6767*(8.0/9.0)-EcP_3*c*t6790*t6758*t6767*t6789*(4.0/9.0);
            double t6845 = EcP_1*t6844;
            double t6846 = pow(2.0,1.0/3.0);
            double t6847 = t6846*2.0;
            double t6848 = t6847-2.0;
            double t6849 = two_13*2.0;
            double t6850 = t6849-2.0;
            double t6851 = 1/t6850;
            double t6853 = EcF_2*EcF_2;
            double t6854 = EcF_2*EcF_3;
            double t6855 = EcF_4+t6853+t6854;
            double t6856 = 1/t6855;
            double t6857 = t6762*t6745*t6764*t6765;
            double t6858 = t6745*t6775*t6776;
            double t6859 = c*t6742*t6761*t6755*t6747*t6787*(1.0/3.0);
            double t6860 = t6858+t6859;
            double t6861 = EcP_2*EcP_3*t6771*t6860;
            double t6862 = t6861+t6857-EcP_3*c*t6742*t6761*t6755*t6747*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t6862*-2.0+t6739*(t6845-t6851*t6848*(t6845-EcF_1*(t6762*t6765*t6792* \
               (c*t6767*t6795*(4.0/9.0)-c*t6742*t6794*t6797*(2.0/3.0)-c*t6740*t6797*t6804+c*t6740*t6805*t6806*2.0) \
               +t6762*t6765*t6794*t6798-t6762*t6792*t6798*t6799*(1.0/3.0)+EcF_2*EcF_3*t6856*(-t6792*t6801*(c*t6767* \
               t6795*(1.0/1.8E1)-t6797*t6802*t6804+t6802*t6805*t6806*2.0-c*t6747*t6767*t6795*t6800*(4.0/9.0)+t6780* \
               t6781*t6795*t6779*t6800*(1.0/1.8E1)+c*t6742*t6747*t6794*t6797*t6800*(2.0/3.0))+t6794*t6801*t6820-c* \
               t6767*t6810*t6821*t6817*(2.0/9.0)+c*t6747*t6767*t6810*t6811*t6817*(4.0/9.0)+c*t6767*t6810*t6822*t6814* \
               t6823*(2.0/9.0)-t6780*t6781*t6779*t6810*t6811*t6817*(1.0/1.8E1)+c*t6742*t6747*t6792*1/(t6800*t6800* \
               t6800)*t6820*(1.0/3.0))+EcF_3*c*t6767*t6821*t6817*(4.0/9.0)-EcF_3*c*t6747*t6767*t6811*t6817*(8.0/9.0) \
               -EcF_3*c*t6767*t6822*t6814*t6823*(4.0/9.0)+EcF_3*t6780*t6781*t6779*t6811*t6817*(1.0/9.0))))+t6851* \
               t6848*(EcP_1*t6862-EcF_1*(t6762*t6765*t6792*t6798+EcF_2*EcF_3*t6856*(t6792*t6801*t6820+c*t6742*t6747* \
               t6810*t6811*t6817*(1.0/3.0))-EcF_3*c*t6742*t6747*t6811*t6817*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t6095 = rho_a[index]+rho_b[index];
            double t6096 = 1/pow(t6095,1.0/3.0);
            double t6097 = c*t6096;
            double t6098 = 1/pow(t6095,4.0/3.0);
            double t6099 = sqrt(t6097);
            double t6100 = EcP_3*t6099;
            double t6101 = EcP_4+t6097+t6100;
            double t6102 = c*t6098*(1.0/3.0);
            double t6103 = 1/sqrt(t6097);
            double t6104 = EcP_3*c*t6098*t6103*(1.0/6.0);
            double t6105 = t6102+t6104;
            double t6106 = EcP_2-t6099;
            double t6107 = 1/(t6101*t6101);
            double t6108 = 1/t6101;
            double t6109 = t6099*2.0;
            double t6110 = EcP_3+t6109;
            double t6111 = 1/(t6110*t6110);
            double t6112 = EcP_4*4.0;
            double t6113 = EcP_3*EcP_3;
            double t6114 = t6112-t6113;
            double t6115 = t6111*t6114;
            double t6116 = t6115+1.0;
            double t6117 = 1/t6116;
            double t6118 = 1/c;
            double t6119 = c*t6098*t6108*(1.0/3.0);
            double t6122 = c*t6096*t6105*t6107;
            double t6120 = -t6122+t6119;
            double t6121 = pow(t6095,1.0/3.0);
            double t6123 = 1/pow(t6095,7.0/3.0);
            double t6124 = EcP_2*EcP_2;
            double t6125 = EcP_2*EcP_3;
            double t6126 = EcP_4+t6124+t6125;
            double t6127 = 1/t6126;
            double t6128 = t6106*t6106;
            double t6129 = t6105*t6107*t6128;
            double t6130 = c*t6098*t6103*t6106*t6108*(1.0/3.0);
            double t6131 = t6130+t6129;
            double t6132 = 1/(t6106*t6106);
            double t6133 = c*t6123*(4.0/9.0);
            double t6134 = EcP_3*c*t6103*t6123*(2.0/9.0);
            double t6135 = c*c;
            double t6136 = 1/pow(t6095,8.0/3.0);
            double t6137 = 1/pow(t6097,3.0/2.0);
            double t6182 = EcP_3*t6135*t6136*t6137*(1.0/3.6E1);
            double t6138 = t6133+t6134-t6182;
            double t6139 = t6105*t6105;
            double t6140 = 1/(t6101*t6101*t6101);
            double t6141 = EcP_2*4.0;
            double t6142 = EcP_3*2.0;
            double t6143 = t6141+t6142;
            double t6144 = 1/(t6110*t6110*t6110);
            double t6145 = 1/(t6110*t6110*t6110*t6110*t6110);
            double t6146 = 1/(t6116*t6116);
            double t6147 = EcF_3*t6099;
            double t6148 = EcF_4+t6097+t6147;
            double t6149 = EcF_3*c*t6098*t6103*(1.0/6.0);
            double t6150 = t6102+t6149;
            double t6151 = 1/t6148;
            double t6152 = c*t6098*t6151*(1.0/3.0);
            double t6153 = 1/(t6148*t6148);
            double t6208 = c*t6096*t6150*t6153;
            double t6154 = t6152-t6208;
            double t6155 = 1/pow(t6095,2.0/3.0);
            double t6156 = EcF_2-t6099;
            double t6157 = 1/(t6156*t6156);
            double t6158 = t6156*t6156;
            double t6159 = EcF_3*c*t6103*t6123*(2.0/9.0);
            double t6160 = t6133+t6159-EcF_3*t6135*t6136*t6137*(1.0/3.6E1);
            double t6161 = t6150*t6150;
            double t6162 = 1/(t6148*t6148*t6148);
            double t6163 = EcF_3+t6109;
            double t6164 = EcF_2*4.0;
            double t6165 = EcF_3*2.0;
            double t6166 = t6164+t6165;
            double t6167 = 1/(t6163*t6163);
            double t6168 = EcF_4*4.0;
            double t6169 = EcF_3*EcF_3;
            double t6170 = t6168-t6169;
            double t6171 = t6170*t6167;
            double t6172 = t6171+1.0;
            double t6173 = 1/t6172;
            double t6174 = t6150*t6153*t6158;
            double t6175 = c*t6098*t6103*t6151*t6156*(1.0/3.0);
            double t6176 = t6174+t6175;
            double t6177 = 1/(t6163*t6163*t6163);
            double t6178 = 1/(t6163*t6163*t6163*t6163*t6163);
            double t6179 = 1/(t6172*t6172);
            double t6180 = t6120*t6121*t6105*t6118;
            double t6181 = c*t6123*t6108*(4.0/9.0);
            double t6183 = c*t6096*t6140*t6139*2.0;
            double t6184 = t6181+t6183-c*t6098*t6105*t6107*(2.0/3.0)-c*t6096*t6107*t6138;
            double t6185 = t6101*t6121*t6118*t6184;
            double t6186 = t6131*t6105*t6132;
            double t6187 = c*t6123*t6108*(1.0/1.8E1);
            double t6188 = t6140*t6128*t6139*2.0;
            double t6189 = t6106*t6108*t6135*t6136*t6137*(1.0/1.8E1);
            double t6190 = c*t6098*t6103*t6105*t6106*t6107*(2.0/3.0);
            double t6191 = t6190+t6187+t6188+t6189-t6107*t6128*t6138-c*t6103*t6123*t6106*t6108*(4.0/9.0);
            double t6192 = c*t6111*t6103*t6123*t6143*t6117*(4.0/9.0);
            double t6193 = 1/(t6106*t6106*t6106);
            double t6194 = c*t6098*t6101*t6103*t6131*t6193*(1.0/3.0);
            double t6195 = c*t6114*t6123*t6143*t6145*t6146*(2.0/9.0);
            double t6196 = t6192+t6194+t6186+t6195-t6101*t6132*t6191-c*t6123*t6143*t6117*t6144*(2.0/9.0)-t6111* \
               t6143*t6117*t6135*t6136*t6137*(1.0/1.8E1);
            double t6197 = EcP_2*EcP_3*t6127*t6196;
            double t6198 = EcP_3*c*t6123*t6117*t6144*(4.0/9.0);
            double t6199 = EcP_3*t6111*t6117*t6135*t6136*t6137*(1.0/9.0);
            double t6200 = t6180+t6185+t6197+t6198+t6199-t6101*t6120*t6118*t6155*(1.0/3.0)-EcP_3*c*t6111*t6103* \
               t6123*t6117*(8.0/9.0)-EcP_3*c*t6114*t6123*t6145*t6146*(4.0/9.0);
            double t6201 = EcP_1*t6200;
            double t6202 = pow(2.0,1.0/3.0);
            double t6203 = t6202*2.0;
            double t6204 = t6203-2.0;
            double t6205 = two_13*2.0;
            double t6206 = t6205-2.0;
            double t6207 = 1/t6206;
            double t6209 = EcF_2*EcF_2;
            double t6210 = EcF_2*EcF_3;
            double t6211 = EcF_4+t6210+t6209;
            double t6212 = 1/t6211;
            double t6213 = t6101*t6120*t6121*t6118;
            double t6214 = t6101*t6131*t6132;
            double t6215 = c*t6098*t6111*t6103*t6143*t6117*(1.0/3.0);
            double t6216 = t6214+t6215;
            double t6217 = EcP_2*EcP_3*t6127*t6216;
            double t6218 = t6213+t6217-EcP_3*c*t6098*t6111*t6103*t6117*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t6218*-2.0+t6095*(t6201-t6204*t6207*(t6201-EcF_1*(t6121*t6118*t6148* \
               (c*t6123*t6151*(4.0/9.0)-c*t6096*t6160*t6153+c*t6096*t6161*t6162*2.0-c*t6098*t6150*t6153*(2.0/3.0) \
               )+t6121*t6150*t6118*t6154-t6118*t6154*t6155*t6148*(1.0/3.0)+EcF_2*EcF_3*t6212*(-t6148*t6157*(c*t6123* \
               t6151*(1.0/1.8E1)-t6160*t6153*t6158+t6161*t6162*t6158*2.0-c*t6103*t6123*t6151*t6156*(4.0/9.0)+t6151* \
               t6135*t6136*t6137*t6156*(1.0/1.8E1)+c*t6098*t6103*t6150*t6153*t6156*(2.0/3.0))+t6150*t6157*t6176-c* \
               t6123*t6173*t6166*t6177*(2.0/9.0)+c*t6103*t6123*t6173*t6166*t6167*(4.0/9.0)+c*t6123*t6170*t6166*t6178* \
               t6179*(2.0/9.0)-t6135*t6136*t6137*t6173*t6166*t6167*(1.0/1.8E1)+c*t6098*t6103*1/(t6156*t6156*t6156) \
               *t6148*t6176*(1.0/3.0))+EcF_3*c*t6123*t6173*t6177*(4.0/9.0)-EcF_3*c*t6103*t6123*t6173*t6167*(8.0/9.0) \
               -EcF_3*c*t6123*t6170*t6178*t6179*(4.0/9.0)+EcF_3*t6135*t6136*t6137*t6173*t6167*(1.0/9.0))))+t6204* \
               t6207*(EcP_1*t6218-EcF_1*(t6121*t6118*t6154*t6148+EcF_2*EcF_3*t6212*(t6148*t6157*t6176+c*t6098*t6103* \
               t6173*t6166*t6167*(1.0/3.0))-EcF_3*c*t6098*t6103*t6173*t6167*(2.0/3.0)))*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

