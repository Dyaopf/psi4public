/**********************************************************
* VWN5RPA_C_functional.cc: definitions for VWN5RPA_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "VWN5RPA_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

VWN5RPA_C_Functional::VWN5RPA_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "VWN5RPA_C";
    description_ = "VWN5 (RPA) Correlation Functional";
    citation_ = "S.H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys., 58, 1200-1211, 1980";

    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double d2fz0 = 1.7099209341613653E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double EcP_1 = 3.1090699999999999E-02;
    params_.push_back(make_pair("EcP_1",EcP_1));
    double EcP_2 = -4.0928599999999998E-01;
    params_.push_back(make_pair("EcP_2",EcP_2));
    double EcP_3 = 1.3071999999999999E+01;
    params_.push_back(make_pair("EcP_3",EcP_3));
    double EcP_4 = 4.2719799999999999E+01;
    params_.push_back(make_pair("EcP_4",EcP_4));
    double EcF_1 = 1.5545349999999999E-02;
    params_.push_back(make_pair("EcF_1",EcF_1));
    double EcF_2 = -7.4329400000000001E-01;
    params_.push_back(make_pair("EcF_2",EcF_2));
    double EcF_3 = 2.0123100000000001E+01;
    params_.push_back(make_pair("EcF_3",EcF_3));
    double EcF_4 = 1.0157800000000000E+02;
    params_.push_back(make_pair("EcF_4",EcF_4));
    double Ac_1 = -1.6886863940389629E-02;
    params_.push_back(make_pair("Ac_1",Ac_1));
    double Ac_2 = -2.2834399999999999E-01;
    params_.push_back(make_pair("Ac_2",Ac_2));
    double Ac_3 = 1.0683499999999999E+00;
    params_.push_back(make_pair("Ac_3",Ac_3));
    double Ac_4 = 1.1481299999999999E+01;
    params_.push_back(make_pair("Ac_4",Ac_4));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
VWN5RPA_C_Functional::~VWN5RPA_C_Functional()
{
}
void VWN5RPA_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t7191 = rho_a[index]*2.0;
            double t7192 = 1.0/pow(t7191,1.0/3.0);
            double t7193 = c*t7192;
            double t7194 = sqrt(t7193);
            double t7195 = EcP_4*4.0;
            double t7196 = EcP_3*EcP_3;
            double t7197 = t7195-t7196;
            double t7198 = EcP_2-t7194;
            double t7199 = EcP_3*t7194;
            double t7200 = EcP_4+t7193+t7199;
            double t7201 = 1.0/t7200;
            double t7202 = sqrt(t7197);
            double t7203 = t7194*2.0;
            double t7204 = EcP_3+t7203;
            double t7205 = 1.0/t7204;
            double t7206 = t7202*t7205;
            double t7207 = atan(t7206);
            double t7208 = 1.0/sqrt(t7197);
            functional_[index] = EcP_1*rho_a[index]*(log(c*t7192*t7201)+EcP_3*t7207*t7208*2.0-(EcP_2*EcP_3*(log((t7198* \
               t7198)*t7201)+t7207*t7208*(EcP_2*4.0+EcP_3*2.0)))/(EcP_4+EcP_2*EcP_2+EcP_2*EcP_3))*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t7210 = rho_a[index]*2.0;
            double t7211 = 1.0/pow(t7210,1.0/3.0);
            double t7212 = c*t7211;
            double t7213 = sqrt(t7212);
            double t7214 = EcP_4*4.0;
            double t7215 = EcP_3*EcP_3;
            double t7216 = t7214-t7215;
            double t7217 = EcP_2-t7213;
            double t7218 = EcP_3*t7213;
            double t7219 = EcP_4+t7212+t7218;
            double t7220 = 1.0/t7219;
            double t7221 = sqrt(t7216);
            double t7222 = t7213*2.0;
            double t7223 = EcP_3+t7222;
            double t7224 = 1.0/t7223;
            double t7225 = t7221*t7224;
            double t7226 = atan(t7225);
            double t7227 = 1.0/sqrt(t7216);
            double t7228 = t7217*t7217;
            double t7229 = 1.0/pow(t7210,4.0/3.0);
            double t7230 = 1.0/sqrt(t7212);
            double t7231 = 1.0/(t7223*t7223);
            double t7232 = EcP_2*4.0;
            double t7233 = EcP_3*2.0;
            double t7234 = t7232+t7233;
            double t7235 = EcP_2*EcP_2;
            double t7236 = EcP_2*EcP_3;
            double t7237 = EcP_4+t7235+t7236;
            double t7238 = 1.0/t7237;
            double t7239 = c*t7229*(1.0/3.0);
            double t7240 = EcP_3*c*t7230*t7229*(1.0/6.0);
            double t7241 = t7240+t7239;
            double t7242 = 1.0/(t7219*t7219);
            double t7243 = t7231*t7216;
            double t7244 = t7243+1.0;
            double t7245 = 1.0/t7244;
            v_rho_a_[index] = EcP_1*(log(c*t7211*t7220)+EcP_3*t7226*t7227*2.0-EcP_2*EcP_3*t7238*(log(t7220*t7228) \
               +t7234*t7226*t7227))-EcP_1*rho_a[index]*(EcP_2*EcP_3*t7238*(1.0/(t7217*t7217)*t7219*(t7241*t7242*t7228+ \
               c*t7220*t7230*t7217*t7229*(1.0/3.0))+c*t7230*t7231*t7234*t7245*t7229*(1.0/3.0))+(pow(t7210,1.0/3.0) \
               *t7219*(c*t7220*t7229*(1.0/3.0)-c*t7211*t7241*t7242))/c-EcP_3*c*t7230*t7231*t7245*t7229*(2.0/3.0)) \
               *2.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t7249 = rho_a[index]*2.0;
            double t7250 = 1.0/pow(t7249,1.0/3.0);
            double t7251 = c*t7250;
            double t7252 = 1.0/pow(t7249,4.0/3.0);
            double t7253 = sqrt(t7251);
            double t7254 = EcP_3*t7253;
            double t7255 = EcP_4+t7251+t7254;
            double t7256 = c*t7252*(1.0/3.0);
            double t7257 = 1.0/sqrt(t7251);
            double t7258 = EcP_3*c*t7252*t7257*(1.0/6.0);
            double t7259 = t7256+t7258;
            double t7260 = 1.0/c;
            double t7261 = pow(t7249,1.0/3.0);
            double t7262 = 1.0/t7255;
            double t7263 = 1.0/(t7255*t7255);
            double t7264 = 1.0/pow(t7249,7.0/3.0);
            double t7265 = EcP_2-t7253;
            double t7266 = 1.0/(t7265*t7265);
            double t7267 = t7265*t7265;
            double t7268 = t7259*t7259;
            double t7269 = 1.0/(t7255*t7255*t7255);
            double t7270 = c*t7264*(4.0/9.0);
            double t7271 = EcP_3*c*t7264*t7257*(2.0/9.0);
            double t7272 = c*c;
            double t7273 = 1.0/pow(t7249,8.0/3.0);
            double t7274 = 1.0/pow(t7251,3.0/2.0);
            double t7313 = EcP_3*t7272*t7273*t7274*(1.0/3.6E1);
            double t7275 = t7270+t7271-t7313;
            double t7276 = t7253*2.0;
            double t7277 = EcP_3+t7276;
            double t7278 = EcP_4*4.0;
            double t7279 = EcP_3*EcP_3;
            double t7280 = t7278-t7279;
            double t7281 = 1.0/(t7277*t7277);
            double t7282 = t7280*t7281;
            double t7283 = t7282+1.0;
            double t7284 = EcP_2*4.0;
            double t7285 = EcP_3*2.0;
            double t7286 = t7284+t7285;
            double t7287 = t7263*t7267*t7259;
            double t7288 = c*t7252*t7262*t7265*t7257*(1.0/3.0);
            double t7289 = t7287+t7288;
            double t7290 = 1.0/t7283;
            double t7291 = c*t7252*t7262*(1.0/3.0);
            double t7309 = c*t7250*t7263*t7259;
            double t7292 = t7291-t7309;
            double t7293 = 1.0/(t7277*t7277*t7277);
            double t7294 = 1.0/(t7277*t7277*t7277*t7277*t7277);
            double t7295 = 1.0/(t7283*t7283);
            double t7296 = Ac_4*4.0;
            double t7297 = Ac_3*Ac_3;
            double t7298 = t7296-t7297;
            double t7299 = Ac_2-t7253;
            double t7300 = Ac_3*t7253;
            double t7301 = Ac_4+t7251+t7300;
            double t7302 = 1.0/t7301;
            double t7303 = sqrt(t7298);
            double t7304 = Ac_3+t7276;
            double t7305 = 1.0/t7304;
            double t7306 = t7303*t7305;
            double t7307 = atan(t7306);
            double t7308 = 1.0/sqrt(t7298);
            double t7310 = t7260*t7261*t7292*t7259;
            double t7311 = c*t7262*t7264*(4.0/9.0);
            double t7312 = c*t7250*t7268*t7269*2.0;
            double t7314 = t7311+t7312-c*t7250*t7263*t7275-c*t7252*t7263*t7259*(2.0/3.0);
            double t7315 = t7260*t7261*t7255*t7314;
            double t7316 = EcP_2*EcP_2;
            double t7317 = EcP_2*EcP_3;
            double t7318 = EcP_4+t7316+t7317;
            double t7319 = 1.0/t7318;
            double t7320 = t7266*t7259*t7289;
            double t7321 = t7267*t7268*t7269*2.0;
            double t7322 = c*t7262*t7264*(1.0/1.8E1);
            double t7323 = t7262*t7272*t7273*t7265*t7274*(1.0/1.8E1);
            double t7324 = c*t7252*t7263*t7265*t7257*t7259*(2.0/3.0);
            double t7325 = t7321+t7322+t7323+t7324-t7263*t7275*t7267-c*t7262*t7264*t7265*t7257*(4.0/9.0);
            double t7326 = c*t7280*t7264*t7294*t7286*t7295*(2.0/9.0);
            double t7327 = 1.0/(t7265*t7265*t7265);
            double t7328 = c*t7252*t7255*t7257*t7289*t7327*(1.0/3.0);
            double t7329 = c*t7281*t7290*t7264*t7257*t7286*(4.0/9.0);
            double t7330 = t7320+t7326+t7328+t7329-t7255*t7266*t7325-c*t7290*t7264*t7293*t7286*(2.0/9.0)-t7272* \
               t7281*t7290*t7273*t7274*t7286*(1.0/1.8E1);
            double t7331 = EcP_2*EcP_3*t7330*t7319;
            double t7332 = 1.0/pow(t7249,2.0/3.0);
            double t7333 = EcP_3*c*t7290*t7264*t7293*(4.0/9.0);
            double t7334 = EcP_3*t7272*t7281*t7290*t7273*t7274*(1.0/9.0);
            double t7335 = t7310+t7331+t7315+t7333+t7334-t7260*t7255*t7292*t7332*(1.0/3.0)-EcP_3*c*t7281*t7290* \
               t7264*t7257*(8.0/9.0)-EcP_3*c*t7280*t7264*t7294*t7295*(4.0/9.0);
            double t7336 = EcP_1*t7335;
            double t7337 = 1.0/d2fz0;
            double t7338 = 1.0/(rho_a[index]*rho_a[index]);
            double t7339 = two_13*2.0;
            double t7340 = t7339-2.0;
            double t7341 = 1.0/t7340;
            double t7342 = c*t7250*t7302;
            double t7343 = log(t7342);
            double t7344 = Ac_3*t7307*t7308*2.0;
            double t7345 = t7299*t7299;
            double t7346 = t7302*t7345;
            double t7347 = log(t7346);
            double t7348 = Ac_2*4.0;
            double t7349 = Ac_3*2.0;
            double t7350 = t7348+t7349;
            double t7351 = t7350*t7307*t7308;
            double t7352 = t7351+t7347;
            double t7353 = Ac_2*Ac_2;
            double t7354 = Ac_2*Ac_3;
            double t7355 = Ac_4+t7353+t7354;
            double t7356 = 1.0/t7355;
            double t7357 = t7343+t7344-Ac_2*Ac_3*t7352*t7356;
            v_rho_a_rho_a_[index] = rho_a[index]*(t7336-Ac_1*t7341*t7337*t7338*t7357*(2.0/9.0))*2.0+rho_a[index]* \
               (t7336+Ac_1*t7341*t7337*t7338*t7357*(2.0/9.0))*2.0-EcP_1*(t7260*t7261*t7255*t7292+EcP_2*EcP_3*t7319* \
               (t7255*t7266*t7289+c*t7252*t7281*t7290*t7257*t7286*(1.0/3.0))-EcP_3*c*t7252*t7281*t7290*t7257*(2.0/ \
               3.0))*4.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void VWN5RPA_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4558 = rho_a[index]+rho_b[index];
            double t4559 = 1.0/pow(t4558,1.0/3.0);
            double t4560 = c*t4559;
            double t4561 = sqrt(t4560);
            double t4562 = EcP_4*4.0;
            double t4563 = EcP_3*EcP_3;
            double t4564 = t4562-t4563;
            double t4565 = EcP_2-t4561;
            double t4566 = EcP_3*t4561;
            double t4567 = EcP_4+t4560+t4566;
            double t4568 = 1.0/t4567;
            double t4569 = sqrt(t4564);
            double t4570 = t4561*2.0;
            double t4571 = EcP_3+t4570;
            double t4572 = 1.0/t4571;
            double t4573 = t4572*t4569;
            double t4574 = atan(t4573);
            double t4575 = 1.0/sqrt(t4564);
            double t4576 = rho_a[index]-rho_b[index];
            double t4577 = t4576*t4576;
            double t4578 = EcF_4*4.0;
            double t4579 = EcF_3*EcF_3;
            double t4580 = t4578-t4579;
            double t4581 = EcF_2-t4561;
            double t4582 = EcF_3*t4561;
            double t4583 = EcF_4+t4560+t4582;
            double t4584 = 1.0/t4583;
            double t4585 = sqrt(t4580);
            double t4586 = EcF_3+t4570;
            double t4587 = 1.0/t4586;
            double t4588 = t4585*t4587;
            double t4589 = atan(t4588);
            double t4590 = 1.0/sqrt(t4580);
            double t4591 = c*t4559*t4568;
            double t4592 = log(t4591);
            double t4593 = EcP_3*t4574*t4575*2.0;
            double t4594 = t4565*t4565;
            double t4595 = t4594*t4568;
            double t4596 = log(t4595);
            double t4597 = EcP_2*4.0;
            double t4598 = EcP_3*2.0;
            double t4599 = t4597+t4598;
            double t4600 = t4574*t4575*t4599;
            double t4601 = t4596+t4600;
            double t4602 = EcP_2*EcP_2;
            double t4603 = EcP_2*EcP_3;
            double t4604 = EcP_4+t4602+t4603;
            double t4605 = 1.0/t4604;
            double t4606 = t4592+t4593-EcP_2*EcP_3*t4601*t4605;
            double t4607 = EcP_1*t4606;
            double t4608 = Ac_4*4.0;
            double t4609 = Ac_3*Ac_3;
            double t4610 = t4608-t4609;
            double t4611 = Ac_2-t4561;
            double t4612 = Ac_3*t4561;
            double t4613 = Ac_4+t4560+t4612;
            double t4614 = 1.0/t4613;
            double t4615 = sqrt(t4610);
            double t4616 = Ac_3+t4570;
            double t4617 = 1.0/t4616;
            double t4618 = t4615*t4617;
            double t4619 = atan(t4618);
            double t4620 = 1.0/sqrt(t4610);
            double t4621 = 1.0/t4558;
            double t4622 = t4576*t4621;
            double t4623 = c*t4559*t4614;
            double t4624 = log(t4623);
            double t4625 = Ac_3*t4620*t4619*2.0;
            double t4626 = t4611*t4611;
            double t4627 = t4614*t4626;
            double t4628 = log(t4627);
            double t4629 = Ac_2*4.0;
            double t4630 = Ac_3*2.0;
            double t4631 = t4630+t4629;
            double t4632 = t4620*t4631*t4619;
            double t4633 = t4632+t4628;
            double t4634 = Ac_2*Ac_2;
            double t4635 = Ac_2*Ac_3;
            double t4636 = Ac_4+t4634+t4635;
            double t4637 = 1.0/t4636;
            double t4638 = t4624+t4625-Ac_2*Ac_3*t4633*t4637;
            functional_[index] = t4558*(t4607-(Ac_1*t4638*(1.0/(t4558*t4558*t4558*t4558)*(t4577*t4577)*((d2fz0* \
               (t4607-EcF_1*(log(c*t4584*t4559)+EcF_3*t4590*t4589*2.0-(EcF_2*EcF_3*(log((t4581*t4581)*t4584)+t4590* \
               t4589*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(Ac_1*t4638)+1.0)-1.0)*(pow(t4622+ \
               1.0,4.0/3.0)+pow(-t4622+1.0,4.0/3.0)-2.0))/(d2fz0*(two_13*2.0-2.0)));
        } else if (rho_a[index] > cutoff_) {
            double t6508 = rho_a[index]+rho_b[index];
            double t6509 = 1.0/pow(t6508,1.0/3.0);
            double t6510 = c*t6509;
            double t6511 = sqrt(t6510);
            double t6512 = EcP_4*4.0;
            double t6513 = EcP_3*EcP_3;
            double t6514 = t6512-t6513;
            double t6515 = EcP_2-t6511;
            double t6516 = EcP_3*t6511;
            double t6517 = EcP_4+t6510+t6516;
            double t6518 = 1.0/t6517;
            double t6519 = sqrt(t6514);
            double t6520 = t6511*2.0;
            double t6521 = EcP_3+t6520;
            double t6522 = 1.0/t6521;
            double t6523 = t6522*t6519;
            double t6524 = atan(t6523);
            double t6525 = 1.0/sqrt(t6514);
            double t6526 = EcF_4*4.0;
            double t6527 = EcF_3*EcF_3;
            double t6528 = t6526-t6527;
            double t6529 = EcF_2-t6511;
            double t6530 = EcF_3*t6511;
            double t6531 = EcF_4+t6510+t6530;
            double t6532 = 1.0/t6531;
            double t6533 = sqrt(t6528);
            double t6534 = EcF_3+t6520;
            double t6535 = 1.0/t6534;
            double t6536 = t6533*t6535;
            double t6537 = atan(t6536);
            double t6538 = 1.0/sqrt(t6528);
            double t6539 = c*t6509*t6518;
            double t6540 = log(t6539);
            double t6541 = EcP_3*t6524*t6525*2.0;
            double t6542 = t6515*t6515;
            double t6543 = t6542*t6518;
            double t6544 = log(t6543);
            double t6545 = EcP_2*4.0;
            double t6546 = EcP_3*2.0;
            double t6547 = t6545+t6546;
            double t6548 = t6524*t6525*t6547;
            double t6549 = t6544+t6548;
            double t6550 = EcP_2*EcP_2;
            double t6551 = EcP_2*EcP_3;
            double t6552 = EcP_4+t6550+t6551;
            double t6553 = 1.0/t6552;
            double t6554 = t6540+t6541-EcP_2*EcP_3*t6553*t6549;
            double t6555 = EcP_1*t6554;
            functional_[index] = t6508*(t6555-((pow(2.0,1.0/3.0)*2.0-2.0)*(t6555-EcF_1*(log(c*t6532*t6509)+EcF_3* \
               t6537*t6538*2.0-(EcF_2*EcF_3*(log(t6532*(t6529*t6529))+t6537*t6538*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else if (rho_b[index] > cutoff_) {
            double t5864 = rho_a[index]+rho_b[index];
            double t5865 = 1.0/pow(t5864,1.0/3.0);
            double t5866 = c*t5865;
            double t5867 = sqrt(t5866);
            double t5868 = EcP_4*4.0;
            double t5869 = EcP_3*EcP_3;
            double t5870 = t5868-t5869;
            double t5871 = EcP_2-t5867;
            double t5872 = EcP_3*t5867;
            double t5873 = EcP_4+t5872+t5866;
            double t5874 = 1.0/t5873;
            double t5875 = sqrt(t5870);
            double t5876 = t5867*2.0;
            double t5877 = EcP_3+t5876;
            double t5878 = 1.0/t5877;
            double t5879 = t5875*t5878;
            double t5880 = atan(t5879);
            double t5881 = 1.0/sqrt(t5870);
            double t5882 = EcF_4*4.0;
            double t5883 = EcF_3*EcF_3;
            double t5884 = t5882-t5883;
            double t5885 = EcF_2-t5867;
            double t5886 = EcF_3*t5867;
            double t5887 = EcF_4+t5866+t5886;
            double t5888 = 1.0/t5887;
            double t5889 = sqrt(t5884);
            double t5890 = EcF_3+t5876;
            double t5891 = 1.0/t5890;
            double t5892 = t5891*t5889;
            double t5893 = atan(t5892);
            double t5894 = 1.0/sqrt(t5884);
            double t5895 = c*t5865*t5874;
            double t5896 = log(t5895);
            double t5897 = EcP_3*t5880*t5881*2.0;
            double t5898 = t5871*t5871;
            double t5899 = t5874*t5898;
            double t5900 = log(t5899);
            double t5901 = EcP_2*4.0;
            double t5902 = EcP_3*2.0;
            double t5903 = t5901+t5902;
            double t5904 = t5880*t5881*t5903;
            double t5905 = t5900+t5904;
            double t5906 = EcP_2*EcP_2;
            double t5907 = EcP_2*EcP_3;
            double t5908 = EcP_4+t5906+t5907;
            double t5909 = 1.0/t5908;
            double t5910 = t5896+t5897-EcP_2*EcP_3*t5905*t5909;
            double t5911 = EcP_1*t5910;
            functional_[index] = t5864*(t5911-((pow(2.0,1.0/3.0)*2.0-2.0)*(t5911-EcF_1*(log(c*t5865*t5888)+EcF_3* \
               t5893*t5894*2.0-(EcF_2*EcF_3*(log((t5885*t5885)*t5888)+t5893*t5894*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4640 = rho_a[index]+rho_b[index];
            double t4641 = 1.0/pow(t4640,1.0/3.0);
            double t4642 = c*t4641;
            double t4643 = sqrt(t4642);
            double t4644 = EcP_4*4.0;
            double t4645 = EcP_3*EcP_3;
            double t4646 = t4644-t4645;
            double t4647 = EcP_2-t4643;
            double t4648 = EcP_3*t4643;
            double t4649 = EcP_4+t4642+t4648;
            double t4650 = 1.0/t4649;
            double t4651 = sqrt(t4646);
            double t4652 = t4643*2.0;
            double t4653 = EcP_3+t4652;
            double t4654 = 1.0/t4653;
            double t4655 = t4651*t4654;
            double t4656 = atan(t4655);
            double t4657 = 1.0/sqrt(t4646);
            double t4658 = 1.0/pow(t4640,4.0/3.0);
            double t4659 = c*t4658*(1.0/3.0);
            double t4660 = 1.0/sqrt(t4642);
            double t4661 = EcP_3*c*t4660*t4658*(1.0/6.0);
            double t4662 = t4661+t4659;
            double t4663 = t4647*t4647;
            double t4664 = 1.0/(t4649*t4649);
            double t4665 = EcP_2*4.0;
            double t4666 = EcP_3*2.0;
            double t4667 = t4665+t4666;
            double t4668 = 1.0/(t4653*t4653);
            double t4669 = EcP_2*EcP_2;
            double t4670 = EcP_2*EcP_3;
            double t4671 = EcP_4+t4670+t4669;
            double t4672 = 1.0/t4671;
            double t4673 = t4646*t4668;
            double t4674 = t4673+1.0;
            double t4675 = 1.0/t4674;
            double t4676 = 1.0/t4640;
            double t4677 = rho_a[index]-rho_b[index];
            double t4678 = t4676*t4677;
            double t4679 = Ac_4*4.0;
            double t4680 = Ac_3*Ac_3;
            double t4681 = -t4680+t4679;
            double t4682 = Ac_2-t4643;
            double t4683 = Ac_3*t4643;
            double t4684 = Ac_4+t4642+t4683;
            double t4685 = 1.0/t4684;
            double t4686 = sqrt(t4681);
            double t4687 = Ac_3+t4652;
            double t4688 = 1.0/t4687;
            double t4689 = t4686*t4688;
            double t4690 = atan(t4689);
            double t4691 = 1.0/sqrt(t4681);
            double t4692 = 1.0/c;
            double t4693 = EcF_3*t4643;
            double t4694 = EcF_4+t4642+t4693;
            double t4695 = pow(t4640,1.0/3.0);
            double t4696 = EcF_3*c*t4660*t4658*(1.0/6.0);
            double t4697 = t4659+t4696;
            double t4698 = EcF_2-t4643;
            double t4699 = 1.0/(t4694*t4694);
            double t4700 = 1.0/t4694;
            double t4701 = EcF_3+t4652;
            double t4702 = 1.0/(t4701*t4701);
            double t4703 = EcF_4*4.0;
            double t4704 = EcF_3*EcF_3;
            double t4705 = t4703-t4704;
            double t4706 = t4702*t4705;
            double t4707 = t4706+1.0;
            double t4708 = 1.0/t4707;
            double t4709 = c*t4650*t4658*(1.0/3.0);
            double t4710 = t4709-c*t4641*t4662*t4664;
            double t4711 = t4692*t4649*t4695*t4710;
            double t4712 = t4662*t4663*t4664;
            double t4713 = c*t4650*t4660*t4647*t4658*(1.0/3.0);
            double t4714 = t4712+t4713;
            double t4715 = 1.0/(t4647*t4647);
            double t4716 = t4649*t4714*t4715;
            double t4717 = c*t4660*t4675*t4658*t4667*t4668*(1.0/3.0);
            double t4718 = t4716+t4717;
            double t4719 = EcP_2*EcP_3*t4672*t4718;
            double t4720 = t4711+t4719-EcP_3*c*t4660*t4675*t4658*t4668*(2.0/3.0);
            double t4721 = EcP_1*t4720;
            double t4722 = c*t4641*t4685;
            double t4723 = log(t4722);
            double t4724 = Ac_3*t4690*t4691*2.0;
            double t4725 = t4682*t4682;
            double t4726 = t4685*t4725;
            double t4727 = log(t4726);
            double t4728 = Ac_2*4.0;
            double t4729 = Ac_3*2.0;
            double t4730 = t4728+t4729;
            double t4731 = t4690*t4691*t4730;
            double t4732 = t4731+t4727;
            double t4733 = Ac_2*Ac_2;
            double t4734 = Ac_2*Ac_3;
            double t4735 = Ac_4+t4733+t4734;
            double t4736 = 1.0/t4735;
            double t4761 = Ac_2*Ac_3*t4732*t4736;
            double t4737 = t4723+t4724-t4761;
            double t4738 = 1.0/Ac_1;
            double t4739 = t4698*t4698;
            double t4740 = sqrt(t4705);
            double t4741 = 1.0/t4701;
            double t4742 = t4740*t4741;
            double t4743 = atan(t4742);
            double t4744 = 1.0/sqrt(t4705);
            double t4745 = EcF_2*4.0;
            double t4746 = EcF_3*2.0;
            double t4747 = t4745+t4746;
            double t4748 = EcF_2*EcF_2;
            double t4749 = EcF_2*EcF_3;
            double t4750 = EcF_4+t4748+t4749;
            double t4751 = 1.0/t4750;
            double t4752 = c*t4641*t4650;
            double t4753 = log(t4752);
            double t4754 = EcP_3*t4656*t4657*2.0;
            double t4755 = t4650*t4663;
            double t4756 = log(t4755);
            double t4757 = t4656*t4657*t4667;
            double t4758 = t4756+t4757;
            double t4779 = EcP_2*EcP_3*t4672*t4758;
            double t4759 = t4753+t4754-t4779;
            double t4760 = EcP_1*t4759;
            double t4762 = Ac_3*c*t4660*t4658*(1.0/6.0);
            double t4763 = t4659+t4762;
            double t4764 = 1.0/(t4684*t4684);
            double t4765 = 1.0/(t4687*t4687);
            double t4766 = t4681*t4765;
            double t4767 = t4766+1.0;
            double t4768 = 1.0/t4767;
            double t4769 = t4677*t4677;
            double t4770 = 1.0/(t4640*t4640*t4640*t4640);
            double t4771 = c*t4641*t4700;
            double t4772 = log(t4771);
            double t4773 = EcF_3*t4743*t4744*2.0;
            double t4774 = t4700*t4739;
            double t4775 = log(t4774);
            double t4776 = t4743*t4744*t4747;
            double t4777 = t4775+t4776;
            double t4783 = EcF_2*EcF_3*t4751*t4777;
            double t4778 = t4772+t4773-t4783;
            double t4780 = 1.0/t4737;
            double t4784 = EcF_1*t4778;
            double t4781 = t4760-t4784;
            double t4782 = t4769*t4769;
            double t4785 = d2fz0*t4780*t4781*t4738;
            double t4786 = t4785+1.0;
            double t4787 = 1.0/d2fz0;
            double t4788 = two_13*2.0;
            double t4789 = t4788-2.0;
            double t4790 = 1.0/t4789;
            double t4791 = t4678+1.0;
            double t4792 = pow(t4791,4.0/3.0);
            double t4793 = -t4678+1.0;
            double t4794 = pow(t4793,4.0/3.0);
            double t4795 = t4792+t4794-2.0;
            double t4796 = c*t4658*t4685*(1.0/3.0);
            double t4797 = t4796-c*t4641*t4763*t4764;
            double t4798 = t4692*t4684*t4695*t4797;
            double t4799 = t4725*t4763*t4764;
            double t4800 = c*t4660*t4682*t4658*t4685*(1.0/3.0);
            double t4801 = t4799+t4800;
            double t4802 = 1.0/(t4682*t4682);
            double t4803 = t4684*t4801*t4802;
            double t4804 = c*t4660*t4658*t4730*t4765*t4768*(1.0/3.0);
            double t4805 = t4803+t4804;
            double t4806 = Ac_2*Ac_3*t4736*t4805;
            double t4807 = t4798+t4806-Ac_3*c*t4660*t4658*t4765*t4768*(2.0/3.0);
            double t4808 = 1.0/(t4640*t4640);
            double t4809 = t4676-t4677*t4808;
            double t4810 = t4770*t4782*t4786;
            double t4811 = t4810-1.0;
            v_rho_a_[index] = t4760-t4640*(t4721-Ac_1*t4790*t4737*t4795*t4787*(1.0/(t4640*t4640*t4640*t4640*t4640) \
               *t4782*t4786*4.0+t4770*t4782*(d2fz0*t4780*t4738*(t4721-EcF_1*(EcF_2*EcF_3*t4751*(t4694*1.0/(t4698* \
               t4698)*(t4697*t4699*t4739+c*t4660*t4658*t4698*t4700*(1.0/3.0))+c*t4660*t4658*t4702*t4708*t4747*(1.0/ \
               3.0))+t4692*t4694*t4695*(c*t4658*t4700*(1.0/3.0)-c*t4641*t4697*t4699)-EcF_3*c*t4660*t4658*t4702*t4708* \
               (2.0/3.0)))-d2fz0*t4781*1.0/(t4737*t4737)*t4738*t4807)-t4677*t4770*t4786*t4769*4.0)+Ac_1*t4790*t4737* \
               t4787*t4811*(pow(t4791,1.0/3.0)*t4809*(4.0/3.0)-pow(t4793,1.0/3.0)*t4809*(4.0/3.0))-Ac_1*t4790*t4795* \
               t4787*t4811*t4807)-Ac_1*t4790*t4737*t4795*t4787*t4811;
        } else if (rho_a[index] > cutoff_) {
            double t6557 = rho_a[index]+rho_b[index];
            double t6558 = 1.0/pow(t6557,1.0/3.0);
            double t6559 = c*t6558;
            double t6560 = sqrt(t6559);
            double t6561 = EcP_4*4.0;
            double t6562 = EcP_3*EcP_3;
            double t6563 = t6561-t6562;
            double t6564 = EcP_2-t6560;
            double t6565 = EcP_3*t6560;
            double t6566 = EcP_4+t6565+t6559;
            double t6567 = 1.0/t6566;
            double t6568 = sqrt(t6563);
            double t6569 = t6560*2.0;
            double t6570 = EcP_3+t6569;
            double t6571 = 1.0/t6570;
            double t6572 = t6571*t6568;
            double t6573 = atan(t6572);
            double t6574 = 1.0/sqrt(t6563);
            double t6575 = 1.0/pow(t6557,4.0/3.0);
            double t6576 = c*t6575*(1.0/3.0);
            double t6577 = 1.0/sqrt(t6559);
            double t6578 = EcP_3*c*t6575*t6577*(1.0/6.0);
            double t6579 = t6576+t6578;
            double t6580 = t6564*t6564;
            double t6581 = 1.0/(t6566*t6566);
            double t6582 = EcP_2*4.0;
            double t6583 = EcP_3*2.0;
            double t6584 = t6582+t6583;
            double t6585 = 1.0/(t6570*t6570);
            double t6586 = EcP_2*EcP_2;
            double t6587 = EcP_2*EcP_3;
            double t6588 = EcP_4+t6586+t6587;
            double t6589 = 1.0/t6588;
            double t6590 = t6563*t6585;
            double t6591 = t6590+1.0;
            double t6592 = 1.0/t6591;
            double t6593 = 1.0/c;
            double t6594 = EcF_3*t6560;
            double t6595 = EcF_4+t6594+t6559;
            double t6596 = pow(t6557,1.0/3.0);
            double t6597 = EcF_3*c*t6575*t6577*(1.0/6.0);
            double t6598 = t6576+t6597;
            double t6599 = EcF_2-t6560;
            double t6600 = 1.0/(t6595*t6595);
            double t6601 = 1.0/t6595;
            double t6602 = EcF_3+t6569;
            double t6603 = 1.0/(t6602*t6602);
            double t6604 = EcF_4*4.0;
            double t6605 = EcF_3*EcF_3;
            double t6606 = t6604-t6605;
            double t6607 = t6603*t6606;
            double t6608 = t6607+1.0;
            double t6609 = 1.0/t6608;
            double t6610 = c*t6575*t6567*(1.0/3.0);
            double t6611 = t6610-c*t6581*t6558*t6579;
            double t6612 = t6566*t6593*t6596*t6611;
            double t6613 = t6580*t6581*t6579;
            double t6614 = c*t6564*t6575*t6567*t6577*(1.0/3.0);
            double t6615 = t6613+t6614;
            double t6616 = 1.0/(t6564*t6564);
            double t6617 = t6566*t6615*t6616;
            double t6618 = c*t6592*t6575*t6584*t6585*t6577*(1.0/3.0);
            double t6619 = t6617+t6618;
            double t6620 = EcP_2*EcP_3*t6589*t6619;
            double t6621 = t6620+t6612-EcP_3*c*t6592*t6575*t6585*t6577*(2.0/3.0);
            double t6622 = EcP_1*t6621;
            double t6623 = pow(2.0,1.0/3.0);
            double t6624 = t6623*2.0;
            double t6625 = t6624-2.0;
            double t6626 = two_13*2.0;
            double t6627 = t6626-2.0;
            double t6628 = 1.0/t6627;
            double t6629 = t6599*t6599;
            double t6630 = sqrt(t6606);
            double t6631 = 1.0/t6602;
            double t6632 = t6630*t6631;
            double t6633 = atan(t6632);
            double t6634 = 1.0/sqrt(t6606);
            double t6635 = EcF_2*4.0;
            double t6636 = EcF_3*2.0;
            double t6637 = t6635+t6636;
            double t6638 = EcF_2*EcF_2;
            double t6639 = EcF_2*EcF_3;
            double t6640 = EcF_4+t6638+t6639;
            double t6641 = 1.0/t6640;
            double t6642 = c*t6558*t6567;
            double t6643 = log(t6642);
            double t6644 = EcP_3*t6573*t6574*2.0;
            double t6645 = t6580*t6567;
            double t6646 = log(t6645);
            double t6647 = t6573*t6574*t6584;
            double t6648 = t6646+t6647;
            double t6649 = t6643+t6644-EcP_2*EcP_3*t6589*t6648;
            double t6650 = EcP_1*t6649;
            v_rho_a_[index] = t6650-t6557*(t6622-t6625*t6628*(t6622-EcF_1*(EcF_2*EcF_3*t6641*(t6595*1.0/(t6599* \
               t6599)*(t6598*t6600*t6629+c*t6575*t6577*t6599*t6601*(1.0/3.0))+c*t6575*t6577*t6603*t6609*t6637*(1.0/ \
               3.0))+t6593*t6595*t6596*(c*t6575*t6601*(1.0/3.0)-c*t6558*t6598*t6600)-EcF_3*c*t6575*t6577*t6603*t6609* \
               (2.0/3.0))))-t6625*t6628*(t6650-EcF_1*(log(c*t6558*t6601)+EcF_3*t6633*t6634*2.0-EcF_2*EcF_3*t6641* \
               (log(t6601*t6629)+t6633*t6634*t6637)));
        } else if (rho_b[index] > cutoff_) {
            double t5913 = rho_a[index]+rho_b[index];
            double t5914 = 1.0/pow(t5913,1.0/3.0);
            double t5915 = c*t5914;
            double t5916 = sqrt(t5915);
            double t5917 = EcP_4*4.0;
            double t5918 = EcP_3*EcP_3;
            double t5919 = t5917-t5918;
            double t5920 = EcP_2-t5916;
            double t5921 = EcP_3*t5916;
            double t5922 = EcP_4+t5921+t5915;
            double t5923 = 1.0/t5922;
            double t5924 = sqrt(t5919);
            double t5925 = t5916*2.0;
            double t5926 = EcP_3+t5925;
            double t5927 = 1.0/t5926;
            double t5928 = t5924*t5927;
            double t5929 = atan(t5928);
            double t5930 = 1.0/sqrt(t5919);
            double t5931 = 1.0/pow(t5913,4.0/3.0);
            double t5932 = c*t5931*(1.0/3.0);
            double t5933 = 1.0/sqrt(t5915);
            double t5934 = EcP_3*c*t5931*t5933*(1.0/6.0);
            double t5935 = t5932+t5934;
            double t5936 = t5920*t5920;
            double t5937 = 1.0/(t5922*t5922);
            double t5938 = EcP_2*4.0;
            double t5939 = EcP_3*2.0;
            double t5940 = t5938+t5939;
            double t5941 = 1.0/(t5926*t5926);
            double t5942 = EcP_2*EcP_2;
            double t5943 = EcP_2*EcP_3;
            double t5944 = EcP_4+t5942+t5943;
            double t5945 = 1.0/t5944;
            double t5946 = t5941*t5919;
            double t5947 = t5946+1.0;
            double t5948 = 1.0/t5947;
            double t5949 = 1.0/c;
            double t5950 = EcF_3*t5916;
            double t5951 = EcF_4+t5950+t5915;
            double t5952 = pow(t5913,1.0/3.0);
            double t5953 = EcF_3*c*t5931*t5933*(1.0/6.0);
            double t5954 = t5932+t5953;
            double t5955 = EcF_2-t5916;
            double t5956 = 1.0/(t5951*t5951);
            double t5957 = 1.0/t5951;
            double t5958 = EcF_3+t5925;
            double t5959 = 1.0/(t5958*t5958);
            double t5960 = EcF_4*4.0;
            double t5961 = EcF_3*EcF_3;
            double t5962 = t5960-t5961;
            double t5963 = t5962*t5959;
            double t5964 = t5963+1.0;
            double t5965 = 1.0/t5964;
            double t5966 = c*t5931*t5923*(1.0/3.0);
            double t5967 = t5966-c*t5914*t5935*t5937;
            double t5968 = t5922*t5952*t5949*t5967;
            double t5969 = t5935*t5936*t5937;
            double t5970 = c*t5920*t5931*t5923*t5933*(1.0/3.0);
            double t5971 = t5970+t5969;
            double t5972 = 1.0/(t5920*t5920);
            double t5973 = t5922*t5971*t5972;
            double t5974 = c*t5931*t5940*t5941*t5933*t5948*(1.0/3.0);
            double t5975 = t5973+t5974;
            double t5976 = EcP_2*EcP_3*t5945*t5975;
            double t5977 = t5976+t5968-EcP_3*c*t5931*t5941*t5933*t5948*(2.0/3.0);
            double t5978 = EcP_1*t5977;
            double t5979 = pow(2.0,1.0/3.0);
            double t5980 = t5979*2.0;
            double t5981 = t5980-2.0;
            double t5982 = two_13*2.0;
            double t5983 = t5982-2.0;
            double t5984 = 1.0/t5983;
            double t5985 = t5955*t5955;
            double t5986 = sqrt(t5962);
            double t5987 = 1.0/t5958;
            double t5988 = t5986*t5987;
            double t5989 = atan(t5988);
            double t5990 = 1.0/sqrt(t5962);
            double t5991 = EcF_2*4.0;
            double t5992 = EcF_3*2.0;
            double t5993 = t5991+t5992;
            double t5994 = EcF_2*EcF_2;
            double t5995 = EcF_2*EcF_3;
            double t5996 = EcF_4+t5994+t5995;
            double t5997 = 1.0/t5996;
            double t5998 = c*t5914*t5923;
            double t5999 = log(t5998);
            double t6000 = EcP_3*t5930*t5929*2.0;
            double t6001 = t5923*t5936;
            double t6002 = log(t6001);
            double t6003 = t5930*t5940*t5929;
            double t6004 = t6002+t6003;
            double t6005 = t5999+t6000-EcP_2*EcP_3*t5945*t6004;
            double t6006 = EcP_1*t6005;
            v_rho_a_[index] = t6006-t5913*(t5978-t5981*t5984*(t5978-EcF_1*(EcF_2*EcF_3*t5997*(t5951*1.0/(t5955* \
               t5955)*(t5954*t5956*t5985+c*t5931*t5933*t5955*t5957*(1.0/3.0))+c*t5931*t5933*t5965*t5993*t5959*(1.0/ \
               3.0))+t5951*t5952*t5949*(c*t5931*t5957*(1.0/3.0)-c*t5914*t5954*t5956)-EcF_3*c*t5931*t5933*t5965*t5959* \
               (2.0/3.0))))-t5981*t5984*(t6006-EcF_1*(log(c*t5914*t5957)+EcF_3*t5990*t5989*2.0-EcF_2*EcF_3*t5997* \
               (log(t5957*t5985)+t5990*t5993*t5989)));
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4813 = rho_a[index]+rho_b[index];
            double t4814 = 1.0/pow(t4813,1.0/3.0);
            double t4815 = c*t4814;
            double t4816 = sqrt(t4815);
            double t4817 = EcP_4*4.0;
            double t4818 = EcP_3*EcP_3;
            double t4819 = t4817-t4818;
            double t4820 = EcP_2-t4816;
            double t4821 = EcP_3*t4816;
            double t4822 = EcP_4+t4821+t4815;
            double t4823 = 1.0/t4822;
            double t4824 = sqrt(t4819);
            double t4825 = t4816*2.0;
            double t4826 = EcP_3+t4825;
            double t4827 = 1.0/t4826;
            double t4828 = t4824*t4827;
            double t4829 = atan(t4828);
            double t4830 = 1.0/sqrt(t4819);
            double t4831 = 1.0/pow(t4813,4.0/3.0);
            double t4832 = c*t4831*(1.0/3.0);
            double t4833 = 1.0/sqrt(t4815);
            double t4834 = EcP_3*c*t4831*t4833*(1.0/6.0);
            double t4835 = t4832+t4834;
            double t4836 = t4820*t4820;
            double t4837 = 1.0/(t4822*t4822);
            double t4838 = EcP_2*4.0;
            double t4839 = EcP_3*2.0;
            double t4840 = t4838+t4839;
            double t4841 = 1.0/(t4826*t4826);
            double t4842 = EcP_2*EcP_2;
            double t4843 = EcP_2*EcP_3;
            double t4844 = EcP_4+t4842+t4843;
            double t4845 = 1.0/t4844;
            double t4846 = t4841*t4819;
            double t4847 = t4846+1.0;
            double t4848 = 1.0/t4847;
            double t4849 = 1.0/t4813;
            double t4850 = rho_a[index]-rho_b[index];
            double t4851 = t4850*t4849;
            double t4852 = Ac_4*4.0;
            double t4853 = Ac_3*Ac_3;
            double t4854 = t4852-t4853;
            double t4855 = Ac_2-t4816;
            double t4856 = Ac_3*t4816;
            double t4857 = Ac_4+t4815+t4856;
            double t4858 = 1.0/t4857;
            double t4859 = sqrt(t4854);
            double t4860 = Ac_3+t4825;
            double t4861 = 1.0/t4860;
            double t4862 = t4861*t4859;
            double t4863 = atan(t4862);
            double t4864 = 1.0/sqrt(t4854);
            double t4865 = 1.0/c;
            double t4866 = EcF_3*t4816;
            double t4867 = EcF_4+t4815+t4866;
            double t4868 = pow(t4813,1.0/3.0);
            double t4869 = EcF_3*c*t4831*t4833*(1.0/6.0);
            double t4870 = t4832+t4869;
            double t4871 = EcF_2-t4816;
            double t4872 = 1.0/(t4867*t4867);
            double t4873 = 1.0/t4867;
            double t4874 = EcF_3+t4825;
            double t4875 = 1.0/(t4874*t4874);
            double t4876 = EcF_4*4.0;
            double t4877 = EcF_3*EcF_3;
            double t4878 = t4876-t4877;
            double t4879 = t4875*t4878;
            double t4880 = t4879+1.0;
            double t4881 = 1.0/t4880;
            double t4882 = c*t4831*t4823*(1.0/3.0);
            double t4883 = t4882-c*t4814*t4835*t4837;
            double t4884 = t4822*t4865*t4883*t4868;
            double t4885 = t4835*t4836*t4837;
            double t4886 = c*t4820*t4831*t4823*t4833*(1.0/3.0);
            double t4887 = t4885+t4886;
            double t4888 = 1.0/(t4820*t4820);
            double t4889 = t4822*t4887*t4888;
            double t4890 = c*t4831*t4840*t4841*t4833*t4848*(1.0/3.0);
            double t4891 = t4890+t4889;
            double t4892 = EcP_2*EcP_3*t4845*t4891;
            double t4893 = t4892+t4884-EcP_3*c*t4831*t4841*t4833*t4848*(2.0/3.0);
            double t4894 = EcP_1*t4893;
            double t4895 = c*t4814*t4858;
            double t4896 = log(t4895);
            double t4897 = Ac_3*t4863*t4864*2.0;
            double t4898 = t4855*t4855;
            double t4899 = t4858*t4898;
            double t4900 = log(t4899);
            double t4901 = Ac_2*4.0;
            double t4902 = Ac_3*2.0;
            double t4903 = t4901+t4902;
            double t4904 = t4863*t4864*t4903;
            double t4905 = t4900+t4904;
            double t4906 = Ac_2*Ac_2;
            double t4907 = Ac_2*Ac_3;
            double t4908 = Ac_4+t4906+t4907;
            double t4909 = 1.0/t4908;
            double t4934 = Ac_2*Ac_3*t4905*t4909;
            double t4910 = t4896+t4897-t4934;
            double t4911 = 1.0/Ac_1;
            double t4912 = t4871*t4871;
            double t4913 = sqrt(t4878);
            double t4914 = 1.0/t4874;
            double t4915 = t4913*t4914;
            double t4916 = atan(t4915);
            double t4917 = 1.0/sqrt(t4878);
            double t4918 = EcF_2*4.0;
            double t4919 = EcF_3*2.0;
            double t4920 = t4918+t4919;
            double t4921 = EcF_2*EcF_2;
            double t4922 = EcF_2*EcF_3;
            double t4923 = EcF_4+t4921+t4922;
            double t4924 = 1.0/t4923;
            double t4925 = c*t4814*t4823;
            double t4926 = log(t4925);
            double t4927 = EcP_3*t4830*t4829*2.0;
            double t4928 = t4823*t4836;
            double t4929 = log(t4928);
            double t4930 = t4830*t4840*t4829;
            double t4931 = t4930+t4929;
            double t4952 = EcP_2*EcP_3*t4845*t4931;
            double t4932 = -t4952+t4926+t4927;
            double t4933 = EcP_1*t4932;
            double t4935 = Ac_3*c*t4831*t4833*(1.0/6.0);
            double t4936 = t4832+t4935;
            double t4937 = 1.0/(t4857*t4857);
            double t4938 = 1.0/(t4860*t4860);
            double t4939 = t4854*t4938;
            double t4940 = t4939+1.0;
            double t4941 = 1.0/t4940;
            double t4942 = t4850*t4850;
            double t4943 = 1.0/(t4813*t4813*t4813*t4813);
            double t4944 = c*t4814*t4873;
            double t4945 = log(t4944);
            double t4946 = EcF_3*t4916*t4917*2.0;
            double t4947 = t4873*t4912;
            double t4948 = log(t4947);
            double t4949 = t4920*t4916*t4917;
            double t4950 = t4948+t4949;
            double t4956 = EcF_2*EcF_3*t4950*t4924;
            double t4951 = t4945+t4946-t4956;
            double t4953 = 1.0/t4910;
            double t4957 = EcF_1*t4951;
            double t4954 = t4933-t4957;
            double t4955 = t4942*t4942;
            double t4958 = d2fz0*t4911*t4953*t4954;
            double t4959 = t4958+1.0;
            double t4960 = 1.0/d2fz0;
            double t4961 = two_13*2.0;
            double t4962 = t4961-2.0;
            double t4963 = 1.0/t4962;
            double t4964 = t4851+1.0;
            double t4965 = pow(t4964,4.0/3.0);
            double t4966 = -t4851+1.0;
            double t4967 = pow(t4966,4.0/3.0);
            double t4968 = t4965+t4967-2.0;
            double t4969 = c*t4831*t4858*(1.0/3.0);
            double t4970 = t4969-c*t4814*t4936*t4937;
            double t4971 = t4865*t4857*t4868*t4970;
            double t4972 = t4898*t4936*t4937;
            double t4973 = c*t4831*t4833*t4855*t4858*(1.0/3.0);
            double t4974 = t4972+t4973;
            double t4975 = 1.0/(t4855*t4855);
            double t4976 = t4857*t4974*t4975;
            double t4977 = c*t4831*t4833*t4903*t4941*t4938*(1.0/3.0);
            double t4978 = t4976+t4977;
            double t4979 = Ac_2*Ac_3*t4909*t4978;
            double t4980 = t4971+t4979-Ac_3*c*t4831*t4833*t4941*t4938*(2.0/3.0);
            double t4981 = 1.0/(t4813*t4813);
            double t4982 = t4850*t4981;
            double t4983 = t4849+t4982;
            double t4984 = t4943*t4955*t4959;
            double t4985 = t4984-1.0;
            v_rho_b_[index] = t4933+t4813*(-t4894+Ac_1*t4910*t4960*t4963*t4968*(1.0/(t4813*t4813*t4813*t4813* \
               t4813)*t4955*t4959*4.0+t4943*t4955*(d2fz0*t4911*t4953*(t4894-EcF_1*(EcF_2*EcF_3*t4924*(1.0/(t4871* \
               t4871)*t4867*(t4870*t4872*t4912+c*t4831*t4833*t4871*t4873*(1.0/3.0))+c*t4831*t4833*t4881*t4875*t4920* \
               (1.0/3.0))+t4865*t4867*t4868*(c*t4831*t4873*(1.0/3.0)-c*t4814*t4870*t4872)-EcF_3*c*t4831*t4833*t4881* \
               t4875*(2.0/3.0)))-d2fz0*1.0/(t4910*t4910)*t4911*t4980*t4954)+t4850*t4942*t4943*t4959*4.0)+Ac_1*t4910* \
               t4960*t4963*t4985*(pow(t4964,1.0/3.0)*t4983*(4.0/3.0)-t4983*pow(t4966,1.0/3.0)*(4.0/3.0))+Ac_1*t4960* \
               t4980*t4963*t4985*t4968)-Ac_1*t4910*t4960*t4963*t4985*t4968;
        } else if (rho_a[index] > cutoff_) {
            double t6652 = rho_a[index]+rho_b[index];
            double t6653 = 1.0/pow(t6652,1.0/3.0);
            double t6654 = c*t6653;
            double t6655 = sqrt(t6654);
            double t6656 = EcP_4*4.0;
            double t6657 = EcP_3*EcP_3;
            double t6658 = t6656-t6657;
            double t6659 = EcP_2-t6655;
            double t6660 = EcP_3*t6655;
            double t6661 = EcP_4+t6660+t6654;
            double t6662 = 1.0/t6661;
            double t6663 = sqrt(t6658);
            double t6664 = t6655*2.0;
            double t6665 = EcP_3+t6664;
            double t6666 = 1.0/t6665;
            double t6667 = t6663*t6666;
            double t6668 = atan(t6667);
            double t6669 = 1.0/sqrt(t6658);
            double t6670 = 1.0/pow(t6652,4.0/3.0);
            double t6671 = c*t6670*(1.0/3.0);
            double t6672 = 1.0/sqrt(t6654);
            double t6673 = EcP_3*c*t6670*t6672*(1.0/6.0);
            double t6674 = t6671+t6673;
            double t6675 = t6659*t6659;
            double t6676 = 1.0/(t6661*t6661);
            double t6677 = EcP_2*4.0;
            double t6678 = EcP_3*2.0;
            double t6679 = t6677+t6678;
            double t6680 = 1.0/(t6665*t6665);
            double t6681 = EcP_2*EcP_2;
            double t6682 = EcP_2*EcP_3;
            double t6683 = EcP_4+t6681+t6682;
            double t6684 = 1.0/t6683;
            double t6685 = t6680*t6658;
            double t6686 = t6685+1.0;
            double t6687 = 1.0/t6686;
            double t6688 = 1.0/c;
            double t6689 = EcF_3*t6655;
            double t6690 = EcF_4+t6654+t6689;
            double t6691 = pow(t6652,1.0/3.0);
            double t6692 = EcF_3*c*t6670*t6672*(1.0/6.0);
            double t6693 = t6671+t6692;
            double t6694 = EcF_2-t6655;
            double t6695 = 1.0/(t6690*t6690);
            double t6696 = 1.0/t6690;
            double t6697 = EcF_3+t6664;
            double t6698 = 1.0/(t6697*t6697);
            double t6699 = EcF_4*4.0;
            double t6700 = EcF_3*EcF_3;
            double t6701 = t6699-t6700;
            double t6702 = t6698*t6701;
            double t6703 = t6702+1.0;
            double t6704 = 1.0/t6703;
            double t6705 = c*t6670*t6662*(1.0/3.0);
            double t6706 = t6705-c*t6653*t6674*t6676;
            double t6707 = t6661*t6691*t6688*t6706;
            double t6708 = t6674*t6675*t6676;
            double t6709 = c*t6670*t6662*t6672*t6659*(1.0/3.0);
            double t6710 = t6708+t6709;
            double t6711 = 1.0/(t6659*t6659);
            double t6712 = t6661*t6710*t6711;
            double t6713 = c*t6670*t6680*t6672*t6687*t6679*(1.0/3.0);
            double t6714 = t6712+t6713;
            double t6715 = EcP_2*EcP_3*t6684*t6714;
            double t6716 = t6715+t6707-EcP_3*c*t6670*t6680*t6672*t6687*(2.0/3.0);
            double t6717 = EcP_1*t6716;
            double t6718 = pow(2.0,1.0/3.0);
            double t6719 = t6718*2.0;
            double t6720 = t6719-2.0;
            double t6721 = two_13*2.0;
            double t6722 = t6721-2.0;
            double t6723 = 1.0/t6722;
            double t6724 = t6694*t6694;
            double t6725 = sqrt(t6701);
            double t6726 = 1.0/t6697;
            double t6727 = t6725*t6726;
            double t6728 = atan(t6727);
            double t6729 = 1.0/sqrt(t6701);
            double t6730 = EcF_2*4.0;
            double t6731 = EcF_3*2.0;
            double t6732 = t6730+t6731;
            double t6733 = EcF_2*EcF_2;
            double t6734 = EcF_2*EcF_3;
            double t6735 = EcF_4+t6733+t6734;
            double t6736 = 1.0/t6735;
            double t6737 = c*t6653*t6662;
            double t6738 = log(t6737);
            double t6739 = EcP_3*t6668*t6669*2.0;
            double t6740 = t6662*t6675;
            double t6741 = log(t6740);
            double t6742 = t6668*t6669*t6679;
            double t6743 = t6741+t6742;
            double t6744 = t6738+t6739-EcP_2*EcP_3*t6684*t6743;
            double t6745 = EcP_1*t6744;
            v_rho_b_[index] = t6745-t6652*(t6717-t6720*t6723*(t6717-EcF_1*(EcF_2*EcF_3*t6736*(t6690*1.0/(t6694* \
               t6694)*(t6693*t6695*t6724+c*t6670*t6672*t6694*t6696*(1.0/3.0))+c*t6670*t6672*t6698*t6704*t6732*(1.0/ \
               3.0))+t6690*t6691*t6688*(c*t6670*t6696*(1.0/3.0)-c*t6653*t6693*t6695)-EcF_3*c*t6670*t6672*t6698*t6704* \
               (2.0/3.0))))-t6720*t6723*(t6745-EcF_1*(log(c*t6653*t6696)+EcF_3*t6728*t6729*2.0-EcF_2*EcF_3*t6736* \
               (log(t6696*t6724)+t6732*t6728*t6729)));
        } else if (rho_b[index] > cutoff_) {
            double t6008 = rho_a[index]+rho_b[index];
            double t6009 = 1.0/pow(t6008,1.0/3.0);
            double t6010 = c*t6009;
            double t6011 = sqrt(t6010);
            double t6012 = EcP_4*4.0;
            double t6013 = EcP_3*EcP_3;
            double t6014 = t6012-t6013;
            double t6015 = EcP_2-t6011;
            double t6016 = EcP_3*t6011;
            double t6017 = EcP_4+t6010+t6016;
            double t6018 = 1.0/t6017;
            double t6019 = sqrt(t6014);
            double t6020 = t6011*2.0;
            double t6021 = EcP_3+t6020;
            double t6022 = 1.0/t6021;
            double t6023 = t6022*t6019;
            double t6024 = atan(t6023);
            double t6025 = 1.0/sqrt(t6014);
            double t6026 = 1.0/pow(t6008,4.0/3.0);
            double t6027 = c*t6026*(1.0/3.0);
            double t6028 = 1.0/sqrt(t6010);
            double t6029 = EcP_3*c*t6026*t6028*(1.0/6.0);
            double t6030 = t6027+t6029;
            double t6031 = t6015*t6015;
            double t6032 = 1.0/(t6017*t6017);
            double t6033 = EcP_2*4.0;
            double t6034 = EcP_3*2.0;
            double t6035 = t6033+t6034;
            double t6036 = 1.0/(t6021*t6021);
            double t6037 = EcP_2*EcP_2;
            double t6038 = EcP_2*EcP_3;
            double t6039 = EcP_4+t6037+t6038;
            double t6040 = 1.0/t6039;
            double t6041 = t6014*t6036;
            double t6042 = t6041+1.0;
            double t6043 = 1.0/t6042;
            double t6044 = 1.0/c;
            double t6045 = EcF_3*t6011;
            double t6046 = EcF_4+t6010+t6045;
            double t6047 = pow(t6008,1.0/3.0);
            double t6048 = EcF_3*c*t6026*t6028*(1.0/6.0);
            double t6049 = t6027+t6048;
            double t6050 = EcF_2-t6011;
            double t6051 = 1.0/(t6046*t6046);
            double t6052 = 1.0/t6046;
            double t6053 = EcF_3+t6020;
            double t6054 = 1.0/(t6053*t6053);
            double t6055 = EcF_4*4.0;
            double t6056 = EcF_3*EcF_3;
            double t6057 = t6055-t6056;
            double t6058 = t6054*t6057;
            double t6059 = t6058+1.0;
            double t6060 = 1.0/t6059;
            double t6061 = c*t6026*t6018*(1.0/3.0);
            double t6062 = t6061-c*t6030*t6032*t6009;
            double t6063 = t6017*t6044*t6062*t6047;
            double t6064 = t6030*t6031*t6032;
            double t6065 = c*t6015*t6026*t6018*t6028*(1.0/3.0);
            double t6066 = t6064+t6065;
            double t6067 = 1.0/(t6015*t6015);
            double t6068 = t6017*t6066*t6067;
            double t6069 = c*t6043*t6026*t6035*t6036*t6028*(1.0/3.0);
            double t6070 = t6068+t6069;
            double t6071 = EcP_2*EcP_3*t6040*t6070;
            double t6072 = t6071+t6063-EcP_3*c*t6043*t6026*t6036*t6028*(2.0/3.0);
            double t6073 = EcP_1*t6072;
            double t6074 = pow(2.0,1.0/3.0);
            double t6075 = t6074*2.0;
            double t6076 = t6075-2.0;
            double t6077 = two_13*2.0;
            double t6078 = t6077-2.0;
            double t6079 = 1.0/t6078;
            double t6080 = t6050*t6050;
            double t6081 = sqrt(t6057);
            double t6082 = 1.0/t6053;
            double t6083 = t6081*t6082;
            double t6084 = atan(t6083);
            double t6085 = 1.0/sqrt(t6057);
            double t6086 = EcF_2*4.0;
            double t6087 = EcF_3*2.0;
            double t6088 = t6086+t6087;
            double t6089 = EcF_2*EcF_2;
            double t6090 = EcF_2*EcF_3;
            double t6091 = EcF_4+t6090+t6089;
            double t6092 = 1.0/t6091;
            double t6093 = c*t6009*t6018;
            double t6094 = log(t6093);
            double t6095 = EcP_3*t6024*t6025*2.0;
            double t6096 = t6031*t6018;
            double t6097 = log(t6096);
            double t6098 = t6024*t6025*t6035;
            double t6099 = t6097+t6098;
            double t6100 = t6094+t6095-EcP_2*EcP_3*t6040*t6099;
            double t6101 = EcP_1*t6100;
            v_rho_b_[index] = t6101-t6008*(t6073-t6076*t6079*(t6073-EcF_1*(EcF_2*EcF_3*t6092*(1.0/(t6050*t6050) \
               *t6046*(t6051*t6080*t6049+c*t6050*t6052*t6026*t6028*(1.0/3.0))+c*t6060*t6026*t6054*t6028*t6088*(1.0/ \
               3.0))+t6044*t6046*t6047*(c*t6052*t6026*(1.0/3.0)-c*t6051*t6009*t6049)-EcF_3*c*t6060*t6026*t6054*t6028* \
               (2.0/3.0))))-t6076*t6079*(t6101-EcF_1*(log(c*t6052*t6009)+EcF_3*t6084*t6085*2.0-EcF_2*EcF_3*t6092* \
               (log(t6052*t6080)+t6084*t6085*t6088)));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4992 = rho_a[index]+rho_b[index];
            double t4993 = 1.0/pow(t4992,1.0/3.0);
            double t4994 = c*t4993;
            double t4995 = 1.0/pow(t4992,4.0/3.0);
            double t4996 = sqrt(t4994);
            double t4997 = EcP_3*t4996;
            double t4998 = EcP_4+t4994+t4997;
            double t4999 = c*t4995*(1.0/3.0);
            double t5000 = 1.0/sqrt(t4994);
            double t5001 = EcP_3*c*t4995*t5000*(1.0/6.0);
            double t5002 = t4999+t5001;
            double t5003 = 1.0/c;
            double t5004 = 1.0/t4998;
            double t5005 = c*t4995*t5004*(1.0/3.0);
            double t5006 = 1.0/(t4998*t4998);
            double t5140 = c*t4993*t5002*t5006;
            double t5007 = t5005-t5140;
            double t5008 = pow(t4992,1.0/3.0);
            double t5009 = 1.0/pow(t4992,7.0/3.0);
            double t5010 = EcP_2-t4996;
            double t5011 = 1.0/(t5010*t5010);
            double t5012 = t5010*t5010;
            double t5013 = c*t5009*(4.0/9.0);
            double t5014 = EcP_3*c*t5000*t5009*(2.0/9.0);
            double t5015 = c*c;
            double t5016 = 1.0/pow(t4992,8.0/3.0);
            double t5017 = 1.0/pow(t4994,3.0/2.0);
            double t5143 = EcP_3*t5015*t5016*t5017*(1.0/3.6E1);
            double t5018 = t5013+t5014-t5143;
            double t5019 = t5002*t5002;
            double t5020 = 1.0/(t4998*t4998*t4998);
            double t5021 = t4996*2.0;
            double t5022 = EcP_3+t5021;
            double t5023 = EcP_2*4.0;
            double t5024 = EcP_3*2.0;
            double t5025 = t5023+t5024;
            double t5026 = 1.0/(t5022*t5022);
            double t5027 = EcP_4*4.0;
            double t5028 = EcP_3*EcP_3;
            double t5029 = t5027-t5028;
            double t5030 = t5026*t5029;
            double t5031 = t5030+1.0;
            double t5032 = 1.0/t5031;
            double t5033 = t5002*t5012*t5006;
            double t5034 = c*t4995*t5000*t5010*t5004*(1.0/3.0);
            double t5035 = t5033+t5034;
            double t5036 = 1.0/(t5022*t5022*t5022);
            double t5037 = 1.0/(t5022*t5022*t5022*t5022*t5022);
            double t5038 = 1.0/(t5031*t5031);
            double t5039 = rho_a[index]-rho_b[index];
            double t5040 = t5039*t5039;
            double t5041 = EcF_4*4.0;
            double t5042 = EcF_3*EcF_3;
            double t5043 = t5041-t5042;
            double t5044 = EcF_2-t4996;
            double t5045 = EcF_3*t4996;
            double t5046 = EcF_4+t4994+t5045;
            double t5047 = 1.0/t5046;
            double t5048 = sqrt(t5043);
            double t5049 = EcF_3+t5021;
            double t5050 = 1.0/t5049;
            double t5051 = t5050*t5048;
            double t5052 = atan(t5051);
            double t5053 = 1.0/sqrt(t5043);
            double t5054 = sqrt(t5029);
            double t5055 = 1.0/t5022;
            double t5056 = t5054*t5055;
            double t5057 = atan(t5056);
            double t5058 = 1.0/sqrt(t5029);
            double t5059 = EcP_2*EcP_2;
            double t5060 = EcP_2*EcP_3;
            double t5061 = EcP_4+t5060+t5059;
            double t5062 = 1.0/t5061;
            double t5063 = Ac_4*4.0;
            double t5064 = Ac_3*Ac_3;
            double t5065 = t5063-t5064;
            double t5066 = Ac_2-t4996;
            double t5067 = Ac_3*t4996;
            double t5068 = Ac_4+t4994+t5067;
            double t5069 = 1.0/t5068;
            double t5070 = sqrt(t5065);
            double t5071 = Ac_3+t5021;
            double t5072 = 1.0/t5071;
            double t5073 = t5070*t5072;
            double t5074 = atan(t5073);
            double t5075 = 1.0/sqrt(t5065);
            double t5076 = c*t4993*t5069;
            double t5077 = log(t5076);
            double t5078 = Ac_3*t5074*t5075*2.0;
            double t5079 = t5066*t5066;
            double t5080 = t5069*t5079;
            double t5081 = log(t5080);
            double t5082 = Ac_2*4.0;
            double t5083 = Ac_3*2.0;
            double t5084 = t5082+t5083;
            double t5085 = t5074*t5075*t5084;
            double t5086 = t5081+t5085;
            double t5087 = Ac_2*Ac_2;
            double t5088 = Ac_2*Ac_3;
            double t5089 = Ac_4+t5087+t5088;
            double t5090 = 1.0/t5089;
            double t5107 = Ac_2*Ac_3*t5090*t5086;
            double t5091 = t5077+t5078-t5107;
            double t5092 = 1.0/t4992;
            double t5093 = t5092*t5039;
            double t5094 = 1.0/(t4992*t4992);
            double t5095 = t5094*2.0;
            double t5096 = 1.0/(t4992*t4992*t4992);
            double t5097 = t5095-t5039*t5096*2.0;
            double t5098 = t5093+1.0;
            double t5101 = t5039*t5094;
            double t5099 = t5092-t5101;
            double t5100 = -t5093+1.0;
            double t5102 = t5099*t5099;
            double t5103 = 1.0/d2fz0;
            double t5104 = two_13*2.0;
            double t5105 = t5104-2.0;
            double t5106 = 1.0/t5105;
            double t5108 = 1.0/(t4992*t4992*t4992*t4992);
            double t5109 = t5040*t5040;
            double t5110 = 1.0/Ac_1;
            double t5111 = EcF_3*c*t4995*t5000*(1.0/6.0);
            double t5112 = t4999+t5111;
            double t5113 = c*t4995*t5047*(1.0/3.0);
            double t5114 = 1.0/(t5046*t5046);
            double t5164 = c*t4993*t5112*t5114;
            double t5115 = t5113-t5164;
            double t5116 = 1.0/pow(t4992,2.0/3.0);
            double t5117 = EcF_2*EcF_2;
            double t5118 = EcF_2*EcF_3;
            double t5119 = EcF_4+t5117+t5118;
            double t5120 = 1.0/t5119;
            double t5121 = t5044*t5044;
            double t5122 = 1.0/(t5044*t5044);
            double t5123 = EcF_3*c*t5000*t5009*(2.0/9.0);
            double t5124 = t5013+t5123-EcF_3*t5015*t5016*t5017*(1.0/3.6E1);
            double t5125 = t5112*t5112;
            double t5126 = 1.0/(t5046*t5046*t5046);
            double t5127 = EcF_2*4.0;
            double t5128 = EcF_3*2.0;
            double t5129 = t5127+t5128;
            double t5130 = 1.0/(t5049*t5049);
            double t5131 = t5043*t5130;
            double t5132 = t5131+1.0;
            double t5133 = 1.0/t5132;
            double t5134 = t5112*t5121*t5114;
            double t5135 = c*t4995*t5000*t5044*t5047*(1.0/3.0);
            double t5136 = t5134+t5135;
            double t5137 = 1.0/(t5049*t5049*t5049);
            double t5138 = 1.0/(t5049*t5049*t5049*t5049*t5049);
            double t5139 = 1.0/(t5132*t5132);
            double t5141 = t5002*t5003*t5007*t5008;
            double t5142 = c*t5004*t5009*(4.0/9.0);
            double t5144 = c*t4993*t5020*t5019*2.0;
            double t5145 = t5142+t5144-c*t4995*t5002*t5006*(2.0/3.0)-c*t4993*t5006*t5018;
            double t5146 = t4998*t5003*t5008*t5145;
            double t5147 = t5002*t5011*t5035;
            double t5148 = c*t5004*t5009*(1.0/1.8E1);
            double t5149 = t5020*t5012*t5019*2.0;
            double t5150 = t5010*t5004*t5015*t5016*t5017*(1.0/1.8E1);
            double t5151 = c*t4995*t5000*t5010*t5002*t5006*(2.0/3.0);
            double t5152 = t5150+t5151+t5148+t5149-t5012*t5006*t5018-c*t5000*t5010*t5004*t5009*(4.0/9.0);
            double t5153 = c*t5000*t5032*t5025*t5026*t5009*(4.0/9.0);
            double t5154 = 1.0/(t5010*t5010*t5010);
            double t5155 = c*t4995*t4998*t5000*t5035*t5154*(1.0/3.0);
            double t5156 = c*t5025*t5009*t5037*t5029*t5038*(2.0/9.0);
            double t5157 = t5153+t5155+t5147+t5156-t4998*t5011*t5152-c*t5032*t5025*t5009*t5036*(2.0/9.0)-t5032* \
               t5015*t5016*t5025*t5017*t5026*(1.0/1.8E1);
            double t5158 = EcP_2*EcP_3*t5062*t5157;
            double t5159 = EcP_3*c*t5032*t5009*t5036*(4.0/9.0);
            double t5160 = EcP_3*t5032*t5015*t5016*t5017*t5026*(1.0/9.0);
            double t5161 = t5141+t5160+t5146+t5158+t5159-t4998*t5003*t5007*t5116*(1.0/3.0)-EcP_3*c*t5000*t5032* \
               t5026*t5009*(8.0/9.0)-EcP_3*c*t5009*t5037*t5029*t5038*(4.0/9.0);
            double t5162 = EcP_1*t5161;
            double t5163 = 1.0/t5091;
            double t5165 = Ac_3*c*t4995*t5000*(1.0/6.0);
            double t5166 = t4999+t5165;
            double t5167 = 1.0/(t5068*t5068);
            double t5168 = 1.0/(t5071*t5071);
            double t5169 = t5065*t5168;
            double t5170 = t5169+1.0;
            double t5171 = 1.0/t5170;
            double t5172 = c*t4993*t5047;
            double t5173 = log(t5172);
            double t5174 = EcF_3*t5052*t5053*2.0;
            double t5175 = t5047*t5121;
            double t5176 = log(t5175);
            double t5177 = t5052*t5053*t5129;
            double t5178 = t5176+t5177;
            double t5202 = EcF_2*EcF_3*t5120*t5178;
            double t5179 = t5173+t5174-t5202;
            double t5180 = EcF_1*t5179;
            double t5181 = c*t4993*t5004;
            double t5182 = log(t5181);
            double t5183 = EcP_3*t5057*t5058*2.0;
            double t5184 = t5012*t5004;
            double t5185 = log(t5184);
            double t5186 = t5025*t5057*t5058;
            double t5187 = t5185+t5186;
            double t5203 = EcP_2*EcP_3*t5062*t5187;
            double t5188 = t5182+t5183-t5203;
            double t5204 = EcP_1*t5188;
            double t5189 = t5180-t5204;
            double t5190 = c*t4995*t5069*(1.0/3.0);
            double t5206 = c*t4993*t5166*t5167;
            double t5191 = t5190-t5206;
            double t5192 = t5003*t5008*t5068*t5191;
            double t5193 = t5079*t5166*t5167;
            double t5194 = c*t4995*t5000*t5066*t5069*(1.0/3.0);
            double t5195 = t5193+t5194;
            double t5196 = 1.0/(t5066*t5066);
            double t5197 = t5068*t5195*t5196;
            double t5198 = c*t4995*t5000*t5084*t5171*t5168*(1.0/3.0);
            double t5199 = t5197+t5198;
            double t5200 = Ac_2*Ac_3*t5090*t5199;
            double t5228 = Ac_3*c*t4995*t5000*t5171*t5168*(2.0/3.0);
            double t5201 = t5192+t5200-t5228;
            double t5205 = 1.0/(t5091*t5091);
            double t5207 = Ac_3*c*t5000*t5009*(2.0/9.0);
            double t5251 = Ac_3*t5015*t5016*t5017*(1.0/3.6E1);
            double t5208 = t5013-t5251+t5207;
            double t5209 = t5166*t5166;
            double t5210 = 1.0/(t5068*t5068*t5068);
            double t5211 = 1.0/(t5071*t5071*t5071);
            double t5212 = 1.0/(t5071*t5071*t5071*t5071*t5071);
            double t5213 = 1.0/(t5170*t5170);
            double t5214 = t5003*t5008*t5046*t5115;
            double t5215 = t5046*t5122*t5136;
            double t5216 = c*t4995*t5000*t5130*t5133*t5129*(1.0/3.0);
            double t5217 = t5215+t5216;
            double t5218 = EcF_2*EcF_3*t5120*t5217;
            double t5229 = EcF_3*c*t4995*t5000*t5130*t5133*(2.0/3.0);
            double t5219 = t5214+t5218-t5229;
            double t5220 = EcF_1*t5219;
            double t5221 = t4998*t5003*t5007*t5008;
            double t5222 = t4998*t5011*t5035;
            double t5223 = c*t4995*t5000*t5032*t5025*t5026*(1.0/3.0);
            double t5224 = t5222+t5223;
            double t5225 = EcP_2*EcP_3*t5062*t5224;
            double t5230 = EcP_3*c*t4995*t5000*t5032*t5026*(2.0/3.0);
            double t5226 = t5221-t5230+t5225;
            double t5231 = EcP_1*t5226;
            double t5227 = t5220-t5231;
            double t5232 = d2fz0*t5110*t5163*t5227;
            double t5239 = d2fz0*t5110*t5189*t5201*t5205;
            double t5233 = t5232-t5239;
            double t5234 = d2fz0*t5110*t5163*t5189;
            double t5235 = t5234-1.0;
            double t5236 = 1.0/(t4992*t4992*t4992*t4992*t4992);
            double t5237 = pow(t5098,1.0/3.0);
            double t5238 = pow(t5100,1.0/3.0);
            double t5240 = t5099*t5237*(4.0/3.0);
            double t5272 = t5099*t5238*(4.0/3.0);
            double t5241 = t5240-t5272;
            double t5242 = t5108*t5109*t5235;
            double t5243 = t5242+1.0;
            double t5244 = pow(t5098,4.0/3.0);
            double t5245 = pow(t5100,4.0/3.0);
            double t5246 = t5244+t5245-2.0;
            double t5247 = t5108*t5109*t5233;
            double t5248 = t5109*t5235*t5236*4.0;
            double t5271 = t5040*t5039*t5108*t5235*4.0;
            double t5249 = -t5271+t5247+t5248;
            double t5250 = c*t5009*t5069*(4.0/9.0);
            double t5252 = c*t4993*t5210*t5209*2.0;
            double t5253 = t5250+t5252-c*t4995*t5166*t5167*(2.0/3.0)-c*t4993*t5167*t5208;
            double t5254 = t5003*t5008*t5068*t5253;
            double t5255 = t5166*t5195*t5196;
            double t5256 = c*t5009*t5069*(1.0/1.8E1);
            double t5257 = t5079*t5210*t5209*2.0;
            double t5258 = t5015*t5016*t5017*t5066*t5069*(1.0/1.8E1);
            double t5259 = c*t4995*t5000*t5066*t5166*t5167*(2.0/3.0);
            double t5260 = t5256+t5257+t5258+t5259-t5079*t5167*t5208-c*t5000*t5009*t5066*t5069*(4.0/9.0);
            double t5261 = c*t5000*t5009*t5084*t5171*t5168*(4.0/9.0);
            double t5262 = 1.0/(t5066*t5066*t5066);
            double t5263 = c*t4995*t5000*t5068*t5195*t5262*(1.0/3.0);
            double t5264 = c*t5009*t5065*t5084*t5212*t5213*(2.0/9.0);
            double t5265 = t5261+t5263+t5255+t5264-t5068*t5196*t5260-c*t5009*t5084*t5171*t5211*(2.0/9.0)-t5015* \
               t5016*t5017*t5084*t5171*t5168*(1.0/1.8E1);
            double t5266 = Ac_2*Ac_3*t5090*t5265;
            double t5267 = t5003*t5008*t5191*t5166;
            double t5268 = Ac_3*c*t5009*t5171*t5211*(4.0/9.0);
            double t5269 = Ac_3*t5015*t5016*t5017*t5171*t5168*(1.0/9.0);
            double t5270 = t5254+t5266+t5267+t5268+t5269-t5003*t5068*t5116*t5191*(1.0/3.0)-Ac_3*c*t5000*t5009* \
               t5171*t5168*(8.0/9.0)-Ac_3*c*t5009*t5065*t5212*t5213*(4.0/9.0);
            v_rho_a_rho_a_[index] = EcP_1*t5226*-2.0+t4992*(t5162+Ac_1*t5091*t5103*t5106*t5246*(1.0/(t4992*t4992* \
               t4992*t4992*t4992*t4992)*t5109*t5235*2.0E1+t5040*t5108*t5235*1.2E1+t5109*t5233*t5236*8.0-t5108*t5109* \
               (d2fz0*t5110*t5163*(t5162-EcF_1*(t5003*t5008*t5046*(c*t5009*t5047*(4.0/9.0)-c*t4995*t5112*t5114*(2.0/ \
               3.0)-c*t4993*t5114*t5124+c*t4993*t5125*t5126*2.0)+t5003*t5008*t5112*t5115-t5003*t5046*t5115*t5116* \
               (1.0/3.0)+EcF_2*EcF_3*t5120*(-t5046*t5122*(c*t5009*t5047*(1.0/1.8E1)-t5121*t5114*t5124+t5121*t5125* \
               t5126*2.0-c*t5000*t5044*t5009*t5047*(4.0/9.0)+t5015*t5016*t5017*t5044*t5047*(1.0/1.8E1)+c*t4995*t5000* \
               t5044*t5112*t5114*(2.0/3.0))+t5112*t5122*t5136-c*t5009*t5133*t5137*t5129*(2.0/9.0)+c*t5000*t5009*t5130* \
               t5133*t5129*(4.0/9.0)+c*t5043*t5009*t5129*t5138*t5139*(2.0/9.0)-t5015*t5016*t5017*t5130*t5133*t5129* \
               (1.0/1.8E1)+c*t4995*t5000*1.0/(t5044*t5044*t5044)*t5046*t5136*(1.0/3.0))+EcF_3*c*t5009*t5133*t5137* \
               (4.0/9.0)-EcF_3*c*t5000*t5009*t5130*t5133*(8.0/9.0)-EcF_3*c*t5043*t5009*t5138*t5139*(4.0/9.0)+EcF_3* \
               t5015*t5016*t5017*t5130*t5133*(1.0/9.0)))-d2fz0*1.0/(t5091*t5091*t5091)*t5110*t5189*(t5201*t5201)* \
               2.0+d2fz0*t5110*t5189*t5205*t5270+d2fz0*t5110*t5201*t5205*t5227*2.0)-t5040*t5039*t5108*t5233*8.0-t5040* \
               t5039*t5235*t5236*3.2E1)+Ac_1*t5091*t5103*t5106*t5243*(t5097*t5237*(-4.0/3.0)+t5097*t5238*(4.0/3.0) \
               +1.0/pow(t5098,2.0/3.0)*t5102*(4.0/9.0)+1.0/pow(t5100,2.0/3.0)*t5102*(4.0/9.0))-Ac_1*t5091*t5103*t5106* \
               t5241*t5249*2.0-Ac_1*t5103*t5106*t5201*t5241*t5243*2.0+Ac_1*t5103*t5106*t5201*t5246*t5249*2.0+Ac_1* \
               t5103*t5106*t5243*t5270*t5246)+Ac_1*t5091*t5103*t5106*t5241*t5243*2.0-Ac_1*t5091*t5103*t5106*t5246* \
               t5249*2.0-Ac_1*t5103*t5106*t5201*t5243*t5246*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t6752 = rho_a[index]+rho_b[index];
            double t6753 = 1.0/pow(t6752,1.0/3.0);
            double t6754 = c*t6753;
            double t6755 = 1.0/pow(t6752,4.0/3.0);
            double t6756 = sqrt(t6754);
            double t6757 = EcP_3*t6756;
            double t6758 = EcP_4+t6754+t6757;
            double t6759 = c*t6755*(1.0/3.0);
            double t6760 = 1.0/sqrt(t6754);
            double t6761 = EcP_3*c*t6760*t6755*(1.0/6.0);
            double t6762 = t6761+t6759;
            double t6763 = EcP_2-t6756;
            double t6764 = 1.0/(t6758*t6758);
            double t6765 = 1.0/t6758;
            double t6766 = t6756*2.0;
            double t6767 = EcP_3+t6766;
            double t6768 = 1.0/(t6767*t6767);
            double t6769 = EcP_4*4.0;
            double t6770 = EcP_3*EcP_3;
            double t6771 = t6770-t6769;
            double t6772 = t6771*t6768;
            double t6773 = t6772-1.0;
            double t6774 = 1.0/t6773;
            double t6775 = 1.0/c;
            double t6776 = c*t6755*t6765*(1.0/3.0);
            double t6779 = c*t6753*t6762*t6764;
            double t6777 = t6776-t6779;
            double t6778 = pow(t6752,1.0/3.0);
            double t6780 = 1.0/pow(t6752,7.0/3.0);
            double t6781 = EcP_2*EcP_2;
            double t6782 = EcP_2*EcP_3;
            double t6783 = EcP_4+t6781+t6782;
            double t6784 = 1.0/t6783;
            double t6785 = t6763*t6763;
            double t6786 = t6762*t6764*t6785;
            double t6787 = c*t6760*t6763*t6755*t6765*(1.0/3.0);
            double t6788 = t6786+t6787;
            double t6789 = 1.0/(t6763*t6763);
            double t6790 = c*t6780*(4.0/9.0);
            double t6791 = EcP_3*c*t6760*t6780*(2.0/9.0);
            double t6792 = c*c;
            double t6793 = 1.0/pow(t6752,8.0/3.0);
            double t6794 = 1.0/pow(t6754,3.0/2.0);
            double t6847 = EcP_3*t6792*t6793*t6794*(1.0/3.6E1);
            double t6795 = t6790+t6791-t6847;
            double t6796 = t6762*t6762;
            double t6797 = 1.0/(t6758*t6758*t6758);
            double t6798 = EcP_2*4.0;
            double t6799 = EcP_3*2.0;
            double t6800 = t6798+t6799;
            double t6801 = -t6770+t6769;
            double t6802 = t6768*t6801;
            double t6803 = t6802+1.0;
            double t6804 = 1.0/(t6767*t6767*t6767);
            double t6805 = 1.0/t6803;
            double t6806 = 1.0/(t6767*t6767*t6767*t6767*t6767);
            double t6807 = 1.0/(t6803*t6803);
            double t6808 = EcF_3*t6756;
            double t6809 = EcF_4+t6754+t6808;
            double t6810 = EcF_3*c*t6760*t6755*(1.0/6.0);
            double t6811 = t6759+t6810;
            double t6812 = 1.0/t6809;
            double t6813 = c*t6755*t6812*(1.0/3.0);
            double t6814 = 1.0/(t6809*t6809);
            double t6868 = c*t6753*t6811*t6814;
            double t6815 = t6813-t6868;
            double t6816 = 1.0/pow(t6752,2.0/3.0);
            double t6817 = EcF_2-t6756;
            double t6818 = 1.0/(t6817*t6817);
            double t6819 = t6817*t6817;
            double t6820 = EcF_3*c*t6760*t6780*(2.0/9.0);
            double t6821 = t6790+t6820-EcF_3*t6792*t6793*t6794*(1.0/3.6E1);
            double t6822 = t6811*t6811;
            double t6823 = 1.0/(t6809*t6809*t6809);
            double t6824 = EcF_3+t6766;
            double t6825 = EcF_2*4.0;
            double t6826 = EcF_3*2.0;
            double t6827 = t6825+t6826;
            double t6828 = 1.0/(t6824*t6824);
            double t6829 = EcF_4*4.0;
            double t6830 = EcF_3*EcF_3;
            double t6831 = t6830-t6829;
            double t6832 = t6831*t6828;
            double t6833 = t6832-1.0;
            double t6834 = 1.0/t6833;
            double t6835 = t6811*t6814*t6819;
            double t6836 = c*t6760*t6755*t6812*t6817*(1.0/3.0);
            double t6837 = t6835+t6836;
            double t6838 = -t6830+t6829;
            double t6839 = t6828*t6838;
            double t6840 = t6839+1.0;
            double t6841 = 1.0/(t6824*t6824*t6824);
            double t6842 = 1.0/t6840;
            double t6843 = 1.0/(t6824*t6824*t6824*t6824*t6824);
            double t6844 = 1.0/(t6840*t6840);
            double t6845 = t6762*t6775*t6777*t6778;
            double t6846 = c*t6780*t6765*(4.0/9.0);
            double t6848 = c*t6753*t6796*t6797*2.0;
            double t6849 = t6846+t6848-c*t6762*t6755*t6764*(2.0/3.0)-c*t6753*t6764*t6795;
            double t6850 = t6775*t6758*t6778*t6849;
            double t6851 = t6762*t6788*t6789;
            double t6852 = c*t6780*t6765*(1.0/1.8E1);
            double t6853 = t6785*t6796*t6797*2.0;
            double t6854 = t6763*t6765*t6792*t6793*t6794*(1.0/1.8E1);
            double t6855 = c*t6760*t6762*t6763*t6755*t6764*(2.0/3.0);
            double t6856 = t6852+t6853+t6854+t6855-t6764*t6785*t6795-c*t6760*t6780*t6763*t6765*(4.0/9.0);
            double t6857 = 1.0/(t6763*t6763*t6763);
            double t6858 = c*t6760*t6755*t6758*t6788*t6857*(1.0/3.0);
            double t6859 = c*t6780*t6800*t6801*t6806*t6807*(2.0/9.0);
            double t6860 = EcP_3*c*t6780*t6804*t6805*(4.0/9.0);
            double t6861 = EcP_3*t6792*t6793*t6794*t6768*t6805*(1.0/9.0);
            double t6862 = pow(2.0,1.0/3.0);
            double t6863 = t6862*2.0;
            double t6864 = t6863-2.0;
            double t6865 = two_13*2.0;
            double t6866 = t6865-2.0;
            double t6867 = 1.0/t6866;
            double t6869 = EcF_2*EcF_2;
            double t6870 = EcF_2*EcF_3;
            double t6871 = EcF_4+t6870+t6869;
            double t6872 = 1.0/t6871;
            double t6873 = t6775*t6758*t6777*t6778;
            double t6874 = t6758*t6788*t6789;
            v_rho_a_rho_a_[index] = t6752*(EcP_1*(t6850+t6860+t6861+t6845-t6775*t6758*t6777*t6816*(1.0/3.0)+EcP_2* \
               EcP_3*t6784*(t6851+t6858+t6859-t6758*t6789*t6856+c*t6780*t6774*t6800*t6804*(2.0/9.0)-c*t6760*t6780* \
               t6774*t6768*t6800*(4.0/9.0)-t6792*t6793*t6794*t6768*t6800*t6805*(1.0/1.8E1))-EcP_3*c*t6760*t6780*t6768* \
               t6805*(8.0/9.0)-EcP_3*c*t6780*t6801*t6806*t6807*(4.0/9.0))+t6864*t6867*(EcF_1*(t6775*t6778*t6809*(c* \
               t6780*t6812*(4.0/9.0)-c*t6753*t6821*t6814+c*t6753*t6822*t6823*2.0-c*t6755*t6811*t6814*(2.0/3.0))+t6775* \
               t6778*t6811*t6815-t6775*t6815*t6816*t6809*(1.0/3.0)+EcF_2*EcF_3*t6872*(-t6809*t6818*(c*t6780*t6812* \
               (1.0/1.8E1)-t6821*t6814*t6819+t6822*t6823*t6819*2.0-c*t6760*t6780*t6812*t6817*(4.0/9.0)+t6792*t6793* \
               t6794*t6812*t6817*(1.0/1.8E1)+c*t6760*t6755*t6811*t6814*t6817*(2.0/3.0))+t6811*t6818*t6837+c*t6780* \
               t6841*t6834*t6827*(2.0/9.0)-c*t6760*t6780*t6834*t6827*t6828*(4.0/9.0)+c*t6780*t6843*t6844*t6827*t6838* \
               (2.0/9.0)-t6792*t6793*t6794*t6842*t6827*t6828*(1.0/1.8E1)+c*t6760*t6755*1.0/(t6817*t6817*t6817)*t6809* \
               t6837*(1.0/3.0))+EcF_3*c*t6780*t6841*t6842*(4.0/9.0)-EcF_3*c*t6760*t6780*t6842*t6828*(8.0/9.0)-EcF_3* \
               c*t6780*t6843*t6844*t6838*(4.0/9.0)+EcF_3*t6792*t6793*t6794*t6842*t6828*(1.0/9.0))-EcP_1*(t6850+t6860+ \
               t6861+t6845-t6775*t6758*t6777*t6816*(1.0/3.0)+EcP_2*EcP_3*t6784*(t6851+t6858+t6859-t6758*t6789*t6856- \
               c*t6780*t6800*t6804*t6805*(2.0/9.0)+c*t6760*t6780*t6768*t6800*t6805*(4.0/9.0)-t6792*t6793*t6794*t6768* \
               t6800*t6805*(1.0/1.8E1))-EcP_3*c*t6760*t6780*t6768*t6805*(8.0/9.0)-EcP_3*c*t6780*t6801*t6806*t6807* \
               (4.0/9.0))))-EcP_1*(t6873+EcP_2*EcP_3*t6784*(t6874-c*t6760*t6755*t6774*t6768*t6800*(1.0/3.0))+EcP_3* \
               c*t6760*t6755*t6774*t6768*(2.0/3.0))*2.0+t6864*t6867*(EcP_1*(t6873+EcP_2*EcP_3*t6784*(t6874+c*t6760* \
               t6755*t6768*t6800*t6805*(1.0/3.0))-EcP_3*c*t6760*t6755*t6768*t6805*(2.0/3.0))-EcF_1*(t6775*t6778*t6815* \
               t6809+EcF_2*EcF_3*t6872*(t6809*t6818*t6837+c*t6760*t6755*t6842*t6827*t6828*(1.0/3.0))-EcF_3*c*t6760* \
               t6755*t6842*t6828*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t6108 = rho_a[index]+rho_b[index];
            double t6109 = 1.0/pow(t6108,1.0/3.0);
            double t6110 = c*t6109;
            double t6111 = 1.0/pow(t6108,4.0/3.0);
            double t6112 = sqrt(t6110);
            double t6113 = EcP_3*t6112;
            double t6114 = EcP_4+t6110+t6113;
            double t6115 = c*t6111*(1.0/3.0);
            double t6116 = 1.0/sqrt(t6110);
            double t6117 = EcP_3*c*t6111*t6116*(1.0/6.0);
            double t6118 = t6115+t6117;
            double t6119 = EcP_2-t6112;
            double t6120 = 1.0/(t6114*t6114);
            double t6121 = 1.0/t6114;
            double t6122 = t6112*2.0;
            double t6123 = EcP_3+t6122;
            double t6124 = 1.0/(t6123*t6123);
            double t6125 = EcP_4*4.0;
            double t6126 = EcP_3*EcP_3;
            double t6127 = t6125-t6126;
            double t6128 = t6124*t6127;
            double t6129 = t6128+1.0;
            double t6130 = 1.0/t6129;
            double t6131 = 1.0/c;
            double t6132 = c*t6111*t6121*(1.0/3.0);
            double t6135 = c*t6120*t6109*t6118;
            double t6133 = t6132-t6135;
            double t6134 = pow(t6108,1.0/3.0);
            double t6136 = 1.0/pow(t6108,7.0/3.0);
            double t6137 = EcP_2*EcP_2;
            double t6138 = EcP_2*EcP_3;
            double t6139 = EcP_4+t6137+t6138;
            double t6140 = 1.0/t6139;
            double t6141 = t6119*t6119;
            double t6142 = t6120*t6141*t6118;
            double t6143 = c*t6111*t6121*t6116*t6119*(1.0/3.0);
            double t6144 = t6142+t6143;
            double t6145 = 1.0/(t6119*t6119);
            double t6146 = c*t6136*(4.0/9.0);
            double t6147 = EcP_3*c*t6116*t6136*(2.0/9.0);
            double t6148 = c*c;
            double t6149 = 1.0/pow(t6108,8.0/3.0);
            double t6150 = 1.0/pow(t6110,3.0/2.0);
            double t6195 = EcP_3*t6150*t6148*t6149*(1.0/3.6E1);
            double t6151 = t6146+t6147-t6195;
            double t6152 = t6118*t6118;
            double t6153 = 1.0/(t6114*t6114*t6114);
            double t6154 = EcP_2*4.0;
            double t6155 = EcP_3*2.0;
            double t6156 = t6154+t6155;
            double t6157 = 1.0/(t6123*t6123*t6123);
            double t6158 = 1.0/(t6123*t6123*t6123*t6123*t6123);
            double t6159 = 1.0/(t6129*t6129);
            double t6160 = EcF_3*t6112;
            double t6161 = EcF_4+t6110+t6160;
            double t6162 = EcF_3*c*t6111*t6116*(1.0/6.0);
            double t6163 = t6115+t6162;
            double t6164 = 1.0/t6161;
            double t6165 = c*t6111*t6164*(1.0/3.0);
            double t6166 = 1.0/(t6161*t6161);
            double t6221 = c*t6109*t6163*t6166;
            double t6167 = t6165-t6221;
            double t6168 = 1.0/pow(t6108,2.0/3.0);
            double t6169 = EcF_2-t6112;
            double t6170 = 1.0/(t6169*t6169);
            double t6171 = t6169*t6169;
            double t6172 = EcF_3*c*t6116*t6136*(2.0/9.0);
            double t6173 = t6172+t6146-EcF_3*t6150*t6148*t6149*(1.0/3.6E1);
            double t6174 = t6163*t6163;
            double t6175 = 1.0/(t6161*t6161*t6161);
            double t6176 = EcF_3+t6122;
            double t6177 = EcF_2*4.0;
            double t6178 = EcF_3*2.0;
            double t6179 = t6177+t6178;
            double t6180 = 1.0/(t6176*t6176);
            double t6181 = EcF_4*4.0;
            double t6182 = EcF_3*EcF_3;
            double t6183 = t6181-t6182;
            double t6184 = t6180*t6183;
            double t6185 = t6184+1.0;
            double t6186 = 1.0/t6185;
            double t6187 = t6171*t6163*t6166;
            double t6188 = c*t6111*t6116*t6164*t6169*(1.0/3.0);
            double t6189 = t6187+t6188;
            double t6190 = 1.0/(t6176*t6176*t6176);
            double t6191 = 1.0/(t6176*t6176*t6176*t6176*t6176);
            double t6192 = 1.0/(t6185*t6185);
            double t6193 = t6131*t6133*t6134*t6118;
            double t6194 = c*t6121*t6136*(4.0/9.0);
            double t6196 = c*t6152*t6153*t6109*2.0;
            double t6197 = t6194+t6196-c*t6111*t6120*t6118*(2.0/3.0)-c*t6120*t6151*t6109;
            double t6198 = t6131*t6114*t6134*t6197;
            double t6199 = t6144*t6118*t6145;
            double t6200 = c*t6121*t6136*(1.0/1.8E1);
            double t6201 = t6141*t6152*t6153*2.0;
            double t6202 = t6121*t6150*t6119*t6148*t6149*(1.0/1.8E1);
            double t6203 = c*t6111*t6120*t6116*t6118*t6119*(2.0/3.0);
            double t6204 = t6200+t6201+t6202+t6203-t6120*t6141*t6151-c*t6121*t6116*t6136*t6119*(4.0/9.0);
            double t6205 = c*t6130*t6124*t6116*t6136*t6156*(4.0/9.0);
            double t6206 = 1.0/(t6119*t6119*t6119);
            double t6207 = c*t6111*t6114*t6116*t6144*t6206*(1.0/3.0);
            double t6208 = c*t6127*t6136*t6156*t6158*t6159*(2.0/9.0);
            double t6209 = t6199+t6205+t6207+t6208-t6114*t6145*t6204-c*t6130*t6136*t6156*t6157*(2.0/9.0)-t6130* \
               t6150*t6124*t6156*t6148*t6149*(1.0/1.8E1);
            double t6210 = EcP_2*EcP_3*t6140*t6209;
            double t6211 = EcP_3*c*t6130*t6136*t6157*(4.0/9.0);
            double t6212 = EcP_3*t6130*t6150*t6124*t6148*t6149*(1.0/9.0);
            double t6213 = t6193+t6198+t6210+t6211+t6212-t6131*t6114*t6133*t6168*(1.0/3.0)-EcP_3*c*t6130*t6124* \
               t6116*t6136*(8.0/9.0)-EcP_3*c*t6127*t6136*t6158*t6159*(4.0/9.0);
            double t6214 = EcP_1*t6213;
            double t6215 = pow(2.0,1.0/3.0);
            double t6216 = t6215*2.0;
            double t6217 = t6216-2.0;
            double t6218 = two_13*2.0;
            double t6219 = t6218-2.0;
            double t6220 = 1.0/t6219;
            double t6222 = EcF_2*EcF_2;
            double t6223 = EcF_2*EcF_3;
            double t6224 = EcF_4+t6222+t6223;
            double t6225 = 1.0/t6224;
            double t6226 = t6131*t6114*t6133*t6134;
            double t6227 = t6114*t6144*t6145;
            double t6228 = c*t6111*t6130*t6124*t6116*t6156*(1.0/3.0);
            double t6229 = t6227+t6228;
            double t6230 = EcP_2*EcP_3*t6140*t6229;
            double t6231 = t6230+t6226-EcP_3*c*t6111*t6130*t6124*t6116*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t6231*-2.0+t6108*(t6214-t6220*t6217*(t6214-EcF_1*(t6131*t6134*t6161* \
               (c*t6136*t6164*(4.0/9.0)-c*t6111*t6163*t6166*(2.0/3.0)-c*t6109*t6173*t6166+c*t6109*t6174*t6175*2.0) \
               +t6131*t6134*t6163*t6167-t6131*t6161*t6167*t6168*(1.0/3.0)+EcF_2*EcF_3*t6225*(-t6161*t6170*(c*t6136* \
               t6164*(1.0/1.8E1)-t6171*t6173*t6166+t6171*t6174*t6175*2.0-c*t6116*t6136*t6164*t6169*(4.0/9.0)+t6150* \
               t6164*t6148*t6149*t6169*(1.0/1.8E1)+c*t6111*t6116*t6163*t6166*t6169*(2.0/3.0))+t6170*t6163*t6189-c* \
               t6136*t6190*t6186*t6179*(2.0/9.0)+c*t6116*t6180*t6136*t6186*t6179*(4.0/9.0)+c*t6136*t6191*t6183*t6192* \
               t6179*(2.0/9.0)-t6150*t6180*t6148*t6149*t6186*t6179*(1.0/1.8E1)+c*t6111*t6116*t6161*1.0/(t6169*t6169* \
               t6169)*t6189*(1.0/3.0))+EcF_3*c*t6136*t6190*t6186*(4.0/9.0)-EcF_3*c*t6116*t6180*t6136*t6186*(8.0/9.0) \
               -EcF_3*c*t6136*t6191*t6183*t6192*(4.0/9.0)+EcF_3*t6150*t6180*t6148*t6149*t6186*(1.0/9.0))))+t6220* \
               t6217*(EcP_1*t6231-EcF_1*(t6131*t6134*t6161*t6167+EcF_2*EcF_3*t6225*(t6161*t6170*t6189+c*t6111*t6116* \
               t6180*t6186*t6179*(1.0/3.0))-EcF_3*c*t6111*t6116*t6180*t6186*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t5274 = rho_a[index]+rho_b[index];
            double t5275 = 1.0/pow(t5274,1.0/3.0);
            double t5276 = c*t5275;
            double t5277 = 1.0/pow(t5274,4.0/3.0);
            double t5278 = sqrt(t5276);
            double t5279 = EcP_3*t5278;
            double t5280 = EcP_4+t5276+t5279;
            double t5281 = c*t5277*(1.0/3.0);
            double t5282 = 1.0/sqrt(t5276);
            double t5283 = EcP_3*c*t5282*t5277*(1.0/6.0);
            double t5284 = t5281+t5283;
            double t5285 = EcP_2-t5278;
            double t5286 = 1.0/(t5280*t5280);
            double t5287 = 1.0/t5280;
            double t5288 = t5278*2.0;
            double t5289 = EcP_3+t5288;
            double t5290 = 1.0/(t5289*t5289);
            double t5291 = EcP_4*4.0;
            double t5292 = EcP_3*EcP_3;
            double t5293 = t5291-t5292;
            double t5294 = t5290*t5293;
            double t5295 = t5294+1.0;
            double t5296 = 1.0/t5295;
            double t5297 = 1.0/c;
            double t5298 = c*t5277*t5287*(1.0/3.0);
            double t5301 = c*t5275*t5284*t5286;
            double t5299 = t5298-t5301;
            double t5300 = pow(t5274,1.0/3.0);
            double t5302 = 1.0/pow(t5274,7.0/3.0);
            double t5303 = EcP_2*EcP_2;
            double t5304 = EcP_2*EcP_3;
            double t5305 = EcP_4+t5303+t5304;
            double t5306 = 1.0/t5305;
            double t5307 = t5285*t5285;
            double t5308 = t5284*t5286*t5307;
            double t5309 = c*t5282*t5285*t5277*t5287*(1.0/3.0);
            double t5310 = t5308+t5309;
            double t5311 = 1.0/(t5285*t5285);
            double t5312 = c*t5302*(4.0/9.0);
            double t5313 = EcP_3*c*t5282*t5302*(2.0/9.0);
            double t5314 = c*c;
            double t5315 = 1.0/pow(t5274,8.0/3.0);
            double t5316 = 1.0/pow(t5276,3.0/2.0);
            double t5505 = EcP_3*t5314*t5315*t5316*(1.0/3.6E1);
            double t5317 = t5312+t5313-t5505;
            double t5318 = t5284*t5284;
            double t5319 = 1.0/(t5280*t5280*t5280);
            double t5320 = EcP_2*4.0;
            double t5321 = EcP_3*2.0;
            double t5322 = t5320+t5321;
            double t5323 = 1.0/(t5289*t5289*t5289);
            double t5324 = 1.0/(t5289*t5289*t5289*t5289*t5289);
            double t5325 = 1.0/(t5295*t5295);
            double t5326 = rho_a[index]-rho_b[index];
            double t5327 = t5326*t5326;
            double t5328 = EcF_4*4.0;
            double t5329 = EcF_3*EcF_3;
            double t5330 = t5328-t5329;
            double t5331 = EcF_2-t5278;
            double t5332 = EcF_3*t5278;
            double t5333 = EcF_4+t5276+t5332;
            double t5334 = 1.0/t5333;
            double t5335 = sqrt(t5330);
            double t5336 = EcF_3+t5288;
            double t5337 = 1.0/t5336;
            double t5338 = t5335*t5337;
            double t5339 = atan(t5338);
            double t5340 = 1.0/sqrt(t5330);
            double t5341 = sqrt(t5293);
            double t5342 = 1.0/t5289;
            double t5343 = t5341*t5342;
            double t5344 = atan(t5343);
            double t5345 = 1.0/sqrt(t5293);
            double t5346 = Ac_4*4.0;
            double t5347 = Ac_3*Ac_3;
            double t5348 = t5346-t5347;
            double t5349 = Ac_2-t5278;
            double t5350 = Ac_3*t5278;
            double t5351 = Ac_4+t5276+t5350;
            double t5352 = 1.0/t5351;
            double t5353 = sqrt(t5348);
            double t5354 = Ac_3+t5288;
            double t5355 = 1.0/t5354;
            double t5356 = t5353*t5355;
            double t5357 = atan(t5356);
            double t5358 = 1.0/sqrt(t5348);
            double t5359 = c*t5275*t5352;
            double t5360 = log(t5359);
            double t5361 = Ac_3*t5357*t5358*2.0;
            double t5362 = t5349*t5349;
            double t5363 = t5352*t5362;
            double t5364 = log(t5363);
            double t5365 = Ac_2*4.0;
            double t5366 = Ac_3*2.0;
            double t5367 = t5365+t5366;
            double t5368 = t5357*t5358*t5367;
            double t5369 = t5364+t5368;
            double t5370 = Ac_2*Ac_2;
            double t5371 = Ac_2*Ac_3;
            double t5372 = Ac_4+t5370+t5371;
            double t5373 = 1.0/t5372;
            double t5390 = Ac_2*Ac_3*t5373*t5369;
            double t5374 = t5360+t5361-t5390;
            double t5375 = 1.0/t5274;
            double t5376 = t5326*t5375;
            double t5377 = 1.0/(t5274*t5274*t5274);
            double t5378 = t5376+1.0;
            double t5379 = 1.0/(t5274*t5274);
            double t5380 = t5326*t5379;
            double t5381 = -t5376+1.0;
            double t5382 = t5380+t5375;
            double t5383 = t5380-t5375;
            double t5384 = 1.0/d2fz0;
            double t5385 = two_13*2.0;
            double t5386 = t5385-2.0;
            double t5387 = 1.0/t5386;
            double t5388 = pow(t5378,1.0/3.0);
            double t5389 = pow(t5381,1.0/3.0);
            double t5391 = 1.0/(t5274*t5274*t5274*t5274);
            double t5392 = 1.0/Ac_1;
            double t5393 = EcF_3*c*t5282*t5277*(1.0/6.0);
            double t5394 = t5281+t5393;
            double t5395 = t5331*t5331;
            double t5396 = 1.0/(t5333*t5333);
            double t5397 = EcF_2*4.0;
            double t5398 = EcF_3*2.0;
            double t5399 = t5397+t5398;
            double t5400 = 1.0/(t5336*t5336);
            double t5401 = EcF_2*EcF_2;
            double t5402 = EcF_2*EcF_3;
            double t5403 = EcF_4+t5401+t5402;
            double t5404 = 1.0/t5403;
            double t5405 = t5330*t5400;
            double t5406 = t5405+1.0;
            double t5407 = 1.0/t5406;
            double t5408 = t5280*t5297*t5299*t5300;
            double t5409 = t5280*t5310*t5311;
            double t5410 = c*t5290*t5282*t5277*t5296*t5322*(1.0/3.0);
            double t5411 = t5410+t5409;
            double t5412 = EcP_2*EcP_3*t5306*t5411;
            double t5459 = EcP_3*c*t5290*t5282*t5277*t5296*(2.0/3.0);
            double t5413 = t5412+t5408-t5459;
            double t5414 = 1.0/t5374;
            double t5415 = c*t5275*t5334;
            double t5416 = log(t5415);
            double t5417 = EcF_3*t5340*t5339*2.0;
            double t5418 = t5334*t5395;
            double t5419 = log(t5418);
            double t5420 = t5340*t5339*t5399;
            double t5421 = t5420+t5419;
            double t5441 = EcF_2*EcF_3*t5421*t5404;
            double t5422 = -t5441+t5416+t5417;
            double t5423 = EcF_1*t5422;
            double t5424 = c*t5275*t5287;
            double t5425 = log(t5424);
            double t5426 = EcP_3*t5344*t5345*2.0;
            double t5427 = t5287*t5307;
            double t5428 = log(t5427);
            double t5429 = t5322*t5344*t5345;
            double t5430 = t5428+t5429;
            double t5442 = EcP_2*EcP_3*t5306*t5430;
            double t5431 = -t5442+t5425+t5426;
            double t5443 = EcP_1*t5431;
            double t5432 = t5423-t5443;
            double t5433 = Ac_3*c*t5282*t5277*(1.0/6.0);
            double t5434 = t5281+t5433;
            double t5435 = 1.0/(t5351*t5351);
            double t5436 = 1.0/(t5354*t5354);
            double t5437 = t5348*t5436;
            double t5438 = t5437+1.0;
            double t5439 = 1.0/t5438;
            double t5440 = t5327*t5327;
            double t5444 = d2fz0*t5392*t5414*t5432;
            double t5445 = t5444-1.0;
            double t5446 = c*t5277*t5334*(1.0/3.0);
            double t5486 = c*t5275*t5394*t5396;
            double t5447 = t5446-t5486;
            double t5448 = t5297*t5300*t5333*t5447;
            double t5449 = t5394*t5395*t5396;
            double t5450 = c*t5282*t5277*t5331*t5334*(1.0/3.0);
            double t5451 = t5450+t5449;
            double t5452 = 1.0/(t5331*t5331);
            double t5453 = t5333*t5451*t5452;
            double t5454 = c*t5282*t5277*t5399*t5400*t5407*(1.0/3.0);
            double t5455 = t5453+t5454;
            double t5456 = EcF_2*EcF_3*t5404*t5455;
            double t5487 = EcF_3*c*t5282*t5277*t5400*t5407*(2.0/3.0);
            double t5457 = t5456+t5448-t5487;
            double t5458 = EcF_1*t5457;
            double t5488 = EcP_1*t5413;
            double t5460 = t5458-t5488;
            double t5461 = d2fz0*t5392*t5414*t5460;
            double t5462 = 1.0/(t5374*t5374);
            double t5463 = c*t5277*t5352*(1.0/3.0);
            double t5483 = c*t5275*t5434*t5435;
            double t5464 = t5463-t5483;
            double t5465 = t5297*t5300*t5351*t5464;
            double t5466 = t5362*t5434*t5435;
            double t5467 = c*t5282*t5277*t5352*t5349*(1.0/3.0);
            double t5468 = t5466+t5467;
            double t5469 = 1.0/(t5349*t5349);
            double t5470 = t5351*t5468*t5469;
            double t5471 = c*t5282*t5277*t5367*t5436*t5439*(1.0/3.0);
            double t5472 = t5470+t5471;
            double t5473 = Ac_2*Ac_3*t5373*t5472;
            double t5484 = Ac_3*c*t5282*t5277*t5436*t5439*(2.0/3.0);
            double t5474 = t5473+t5465-t5484;
            double t5489 = d2fz0*t5392*t5432*t5462*t5474;
            double t5475 = t5461-t5489;
            double t5476 = t5391*t5440*t5475;
            double t5477 = 1.0/(t5274*t5274*t5274*t5274*t5274);
            double t5478 = t5440*t5445*t5477*4.0;
            double t5479 = t5382*t5388*(4.0/3.0);
            double t5554 = t5382*t5389*(4.0/3.0);
            double t5480 = t5479-t5554;
            double t5481 = t5391*t5440*t5445;
            double t5482 = t5481+1.0;
            double t5485 = t5383*t5388*(4.0/3.0);
            double t5490 = t5326*t5327*t5391*t5445*4.0;
            double t5491 = pow(t5378,4.0/3.0);
            double t5492 = pow(t5381,4.0/3.0);
            double t5493 = t5491+t5492-2.0;
            double t5494 = t5490+t5476+t5478;
            double t5495 = 1.0/pow(t5274,2.0/3.0);
            double t5496 = EcF_3*c*t5282*t5302*(2.0/9.0);
            double t5497 = t5312+t5496-EcF_3*t5314*t5315*t5316*(1.0/3.6E1);
            double t5498 = t5394*t5394;
            double t5499 = 1.0/(t5333*t5333*t5333);
            double t5500 = 1.0/(t5336*t5336*t5336);
            double t5501 = 1.0/(t5336*t5336*t5336*t5336*t5336);
            double t5502 = 1.0/(t5406*t5406);
            double t5503 = t5284*t5297*t5299*t5300;
            double t5504 = c*t5287*t5302*(4.0/9.0);
            double t5506 = c*t5275*t5318*t5319*2.0;
            double t5507 = t5504+t5506-c*t5284*t5277*t5286*(2.0/3.0)-c*t5275*t5286*t5317;
            double t5508 = t5280*t5297*t5300*t5507;
            double t5509 = t5284*t5310*t5311;
            double t5510 = c*t5287*t5302*(1.0/1.8E1);
            double t5511 = t5307*t5318*t5319*2.0;
            double t5512 = t5285*t5287*t5314*t5315*t5316*(1.0/1.8E1);
            double t5513 = c*t5282*t5284*t5285*t5277*t5286*(2.0/3.0);
            double t5514 = t5510+t5511+t5512+t5513-t5286*t5307*t5317-c*t5282*t5285*t5287*t5302*(4.0/9.0);
            double t5515 = c*t5290*t5282*t5296*t5302*t5322*(4.0/9.0);
            double t5516 = 1.0/(t5285*t5285*t5285);
            double t5517 = c*t5280*t5282*t5277*t5310*t5516*(1.0/3.0);
            double t5518 = c*t5293*t5302*t5322*t5324*t5325*(2.0/9.0);
            double t5519 = t5515+t5517+t5509+t5518-t5280*t5311*t5514-c*t5296*t5302*t5322*t5323*(2.0/9.0)-t5290* \
               t5296*t5322*t5314*t5315*t5316*(1.0/1.8E1);
            double t5520 = EcP_2*EcP_3*t5306*t5519;
            double t5521 = EcP_3*c*t5296*t5302*t5323*(4.0/9.0);
            double t5522 = EcP_3*t5290*t5296*t5314*t5315*t5316*(1.0/9.0);
            double t5523 = t5520+t5503+t5521+t5522+t5508-t5280*t5297*t5299*t5495*(1.0/3.0)-EcP_3*c*t5290*t5282* \
               t5296*t5302*(8.0/9.0)-EcP_3*c*t5293*t5302*t5324*t5325*(4.0/9.0);
            double t5524 = EcP_1*t5523;
            double t5525 = Ac_3*c*t5282*t5302*(2.0/9.0);
            double t5533 = Ac_3*t5314*t5315*t5316*(1.0/3.6E1);
            double t5526 = t5312-t5533+t5525;
            double t5527 = t5434*t5434;
            double t5528 = 1.0/(t5351*t5351*t5351);
            double t5529 = 1.0/(t5354*t5354*t5354);
            double t5530 = 1.0/(t5354*t5354*t5354*t5354*t5354);
            double t5531 = 1.0/(t5438*t5438);
            double t5532 = c*t5302*t5352*(4.0/9.0);
            double t5534 = c*t5275*t5527*t5528*2.0;
            double t5535 = t5532+t5534-c*t5277*t5434*t5435*(2.0/3.0)-c*t5275*t5435*t5526;
            double t5536 = t5297*t5300*t5351*t5535;
            double t5537 = t5434*t5468*t5469;
            double t5538 = c*t5302*t5352*(1.0/1.8E1);
            double t5539 = t5362*t5527*t5528*2.0;
            double t5540 = t5314*t5315*t5316*t5352*t5349*(1.0/1.8E1);
            double t5541 = c*t5282*t5277*t5349*t5434*t5435*(2.0/3.0);
            double t5542 = t5540+t5541+t5538+t5539-t5362*t5435*t5526-c*t5282*t5302*t5352*t5349*(4.0/9.0);
            double t5543 = c*t5282*t5302*t5367*t5436*t5439*(4.0/9.0);
            double t5544 = 1.0/(t5349*t5349*t5349);
            double t5545 = c*t5282*t5277*t5351*t5468*t5544*(1.0/3.0);
            double t5546 = c*t5302*t5348*t5367*t5530*t5531*(2.0/9.0);
            double t5547 = t5543+t5545+t5537+t5546-t5351*t5469*t5542-c*t5302*t5367*t5439*t5529*(2.0/9.0)-t5314* \
               t5315*t5316*t5367*t5436*t5439*(1.0/1.8E1);
            double t5548 = Ac_2*Ac_3*t5373*t5547;
            double t5549 = t5297*t5300*t5434*t5464;
            double t5550 = Ac_3*c*t5302*t5439*t5529*(4.0/9.0);
            double t5551 = Ac_3*t5314*t5315*t5316*t5436*t5439*(1.0/9.0);
            double t5552 = t5550+t5551+t5536+t5548+t5549-t5297*t5351*t5464*t5495*(1.0/3.0)-Ac_3*c*t5282*t5302* \
               t5436*t5439*(8.0/9.0)-Ac_3*c*t5302*t5348*t5530*t5531*(4.0/9.0);
            double t5553 = -t5490+t5476+t5478;
            v_rho_a_rho_b_[index] = EcP_1*t5413*-2.0+t5274*(t5524+Ac_1*t5374*t5384*t5387*t5493*(1.0/(t5274*t5274* \
               t5274*t5274*t5274*t5274)*t5440*t5445*2.0E1-t5327*t5391*t5445*1.2E1+t5440*t5475*t5477*8.0-t5391*t5440* \
               (d2fz0*t5392*t5414*(t5524-EcF_1*(t5297*t5300*t5333*(c*t5302*t5334*(4.0/9.0)-c*t5277*t5394*t5396*(2.0/ \
               3.0)-c*t5275*t5396*t5497+c*t5275*t5498*t5499*2.0)+t5297*t5300*t5394*t5447-t5297*t5333*t5447*t5495* \
               (1.0/3.0)+EcF_2*EcF_3*t5404*(-t5333*t5452*(c*t5302*t5334*(1.0/1.8E1)-t5395*t5396*t5497+t5395*t5498* \
               t5499*2.0-c*t5282*t5302*t5331*t5334*(4.0/9.0)+t5331*t5314*t5315*t5316*t5334*(1.0/1.8E1)+c*t5282*t5277* \
               t5331*t5394*t5396*(2.0/3.0))+t5394*t5451*t5452-c*t5302*t5399*t5407*t5500*(2.0/9.0)+c*t5282*t5302*t5399* \
               t5400*t5407*(4.0/9.0)+c*t5302*t5330*t5399*t5501*t5502*(2.0/9.0)-t5314*t5315*t5316*t5399*t5400*t5407* \
               (1.0/1.8E1)+c*t5282*t5277*1.0/(t5331*t5331*t5331)*t5333*t5451*(1.0/3.0))+EcF_3*c*t5302*t5407*t5500* \
               (4.0/9.0)-EcF_3*c*t5282*t5302*t5400*t5407*(8.0/9.0)-EcF_3*c*t5302*t5330*t5501*t5502*(4.0/9.0)+EcF_3* \
               t5314*t5315*t5316*t5400*t5407*(1.0/9.0)))-d2fz0*1.0/(t5374*t5374*t5374)*t5392*t5432*(t5474*t5474)* \
               2.0+d2fz0*t5392*t5460*t5462*t5474*2.0+d2fz0*t5392*t5432*t5462*t5552))+Ac_1*t5374*t5384*t5387*t5482* \
               (1.0/pow(t5381,2.0/3.0)*t5382*t5383*(4.0/9.0)+t5382*t5383*1.0/pow(t5378,2.0/3.0)*(4.0/9.0)+t5326*t5377* \
               t5388*(8.0/3.0)-t5326*t5377*t5389*(8.0/3.0))+Ac_1*t5374*t5384*t5387*t5494*(t5485-t5389*(t5380-t5375) \
               *(4.0/3.0))+Ac_1*t5384*t5387*t5482*t5474*(t5485-t5389*(t5380-t5375)*(4.0/3.0))+Ac_1*t5384*t5387*t5480* \
               t5482*t5474+Ac_1*t5384*t5387*t5474*t5493*t5494+Ac_1*t5384*t5387*t5482*t5493*t5552+Ac_1*t5384*t5387* \
               t5474*t5493*t5553+Ac_1*t5374*t5384*t5387*t5480*(t5476+t5478-t5326*t5327*t5391*t5445*4.0))-Ac_1*t5374* \
               t5384*t5387*t5482*(t5485-t5383*t5389*(4.0/3.0))-Ac_1*t5374*t5384*t5387*t5480*t5482-Ac_1*t5374*t5384* \
               t5387*t5493*t5494-Ac_1*t5374*t5384*t5387*t5493*t5553-Ac_1*t5384*t5387*t5482*t5474*t5493*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t6876 = rho_a[index]+rho_b[index];
            double t6877 = 1.0/pow(t6876,1.0/3.0);
            double t6878 = c*t6877;
            double t6879 = 1.0/pow(t6876,4.0/3.0);
            double t6880 = sqrt(t6878);
            double t6881 = EcP_3*t6880;
            double t6882 = EcP_4+t6881+t6878;
            double t6883 = c*t6879*(1.0/3.0);
            double t6884 = 1.0/sqrt(t6878);
            double t6885 = EcP_3*c*t6884*t6879*(1.0/6.0);
            double t6886 = t6883+t6885;
            double t6887 = EcP_2-t6880;
            double t6888 = 1.0/(t6882*t6882);
            double t6889 = 1.0/t6882;
            double t6890 = t6880*2.0;
            double t6891 = EcP_3+t6890;
            double t6892 = 1.0/(t6891*t6891);
            double t6893 = EcP_4*4.0;
            double t6894 = EcP_3*EcP_3;
            double t6895 = t6893-t6894;
            double t6896 = t6892*t6895;
            double t6897 = t6896+1.0;
            double t6898 = 1.0/t6897;
            double t6899 = 1.0/c;
            double t6900 = c*t6879*t6889*(1.0/3.0);
            double t6903 = c*t6877*t6886*t6888;
            double t6901 = t6900-t6903;
            double t6902 = pow(t6876,1.0/3.0);
            double t6904 = 1.0/pow(t6876,7.0/3.0);
            double t6905 = EcP_2*EcP_2;
            double t6906 = EcP_2*EcP_3;
            double t6907 = EcP_4+t6905+t6906;
            double t6908 = 1.0/t6907;
            double t6909 = t6887*t6887;
            double t6910 = t6886*t6888*t6909;
            double t6911 = c*t6884*t6887*t6879*t6889*(1.0/3.0);
            double t6912 = t6910+t6911;
            double t6913 = 1.0/(t6887*t6887);
            double t6914 = c*t6904*(4.0/9.0);
            double t6915 = EcP_3*c*t6884*t6904*(2.0/9.0);
            double t6916 = c*c;
            double t6917 = 1.0/pow(t6876,8.0/3.0);
            double t6918 = 1.0/pow(t6878,3.0/2.0);
            double t6967 = EcP_3*t6916*t6917*t6918*(1.0/3.6E1);
            double t6919 = t6914+t6915-t6967;
            double t6920 = t6886*t6886;
            double t6921 = 1.0/(t6882*t6882*t6882);
            double t6922 = EcP_2*4.0;
            double t6923 = EcP_3*2.0;
            double t6924 = t6922+t6923;
            double t6925 = 1.0/(t6891*t6891*t6891);
            double t6926 = 1.0/(t6891*t6891*t6891*t6891*t6891);
            double t6927 = 1.0/(t6897*t6897);
            double t6928 = EcF_3*t6880;
            double t6929 = EcF_4+t6878+t6928;
            double t6930 = EcF_3*c*t6884*t6879*(1.0/6.0);
            double t6931 = t6883+t6930;
            double t6932 = 1.0/t6929;
            double t6933 = c*t6879*t6932*(1.0/3.0);
            double t6934 = 1.0/(t6929*t6929);
            double t6993 = c*t6877*t6931*t6934;
            double t6935 = t6933-t6993;
            double t6936 = 1.0/pow(t6876,2.0/3.0);
            double t6937 = EcF_2-t6880;
            double t6938 = 1.0/(t6937*t6937);
            double t6939 = t6937*t6937;
            double t6940 = EcF_3*c*t6884*t6904*(2.0/9.0);
            double t6941 = t6940+t6914-EcF_3*t6916*t6917*t6918*(1.0/3.6E1);
            double t6942 = t6931*t6931;
            double t6943 = 1.0/(t6929*t6929*t6929);
            double t6944 = EcF_3+t6890;
            double t6945 = EcF_2*4.0;
            double t6946 = EcF_3*2.0;
            double t6947 = t6945+t6946;
            double t6948 = 1.0/(t6944*t6944);
            double t6949 = EcF_4*4.0;
            double t6950 = EcF_3*EcF_3;
            double t6951 = t6950-t6949;
            double t6952 = t6951*t6948;
            double t6953 = t6952-1.0;
            double t6954 = 1.0/t6953;
            double t6955 = t6931*t6934*t6939;
            double t6956 = c*t6884*t6879*t6932*t6937*(1.0/3.0);
            double t6957 = t6955+t6956;
            double t6958 = -t6950+t6949;
            double t6959 = t6948*t6958;
            double t6960 = t6959+1.0;
            double t6961 = 1.0/(t6944*t6944*t6944);
            double t6962 = 1.0/t6960;
            double t6963 = 1.0/(t6944*t6944*t6944*t6944*t6944);
            double t6964 = 1.0/(t6960*t6960);
            double t6965 = t6886*t6899*t6901*t6902;
            double t6966 = c*t6889*t6904*(4.0/9.0);
            double t6968 = c*t6877*t6920*t6921*2.0;
            double t6969 = t6966+t6968-c*t6886*t6879*t6888*(2.0/3.0)-c*t6877*t6888*t6919;
            double t6970 = t6882*t6899*t6902*t6969;
            double t6971 = t6886*t6912*t6913;
            double t6972 = c*t6889*t6904*(1.0/1.8E1);
            double t6973 = t6920*t6921*t6909*2.0;
            double t6974 = t6887*t6889*t6916*t6917*t6918*(1.0/1.8E1);
            double t6975 = c*t6884*t6886*t6887*t6879*t6888*(2.0/3.0);
            double t6976 = t6972+t6973+t6974+t6975-t6888*t6909*t6919-c*t6884*t6887*t6889*t6904*(4.0/9.0);
            double t6977 = c*t6892*t6884*t6898*t6904*t6924*(4.0/9.0);
            double t6978 = 1.0/(t6887*t6887*t6887);
            double t6979 = c*t6882*t6884*t6879*t6912*t6978*(1.0/3.0);
            double t6980 = c*t6895*t6904*t6924*t6926*t6927*(2.0/9.0);
            double t6981 = t6971+t6980+t6977+t6979-t6882*t6913*t6976-c*t6898*t6904*t6924*t6925*(2.0/9.0)-t6892* \
               t6898*t6924*t6916*t6917*t6918*(1.0/1.8E1);
            double t6982 = EcP_2*EcP_3*t6908*t6981;
            double t6983 = EcP_3*c*t6898*t6904*t6925*(4.0/9.0);
            double t6984 = EcP_3*t6892*t6898*t6916*t6917*t6918*(1.0/9.0);
            double t6985 = t6970+t6982+t6965+t6983+t6984-t6882*t6899*t6901*t6936*(1.0/3.0)-EcP_3*c*t6892*t6884* \
               t6898*t6904*(8.0/9.0)-EcP_3*c*t6895*t6904*t6926*t6927*(4.0/9.0);
            double t6986 = EcP_1*t6985;
            double t6987 = pow(2.0,1.0/3.0);
            double t6988 = t6987*2.0;
            double t6989 = t6988-2.0;
            double t6990 = two_13*2.0;
            double t6991 = t6990-2.0;
            double t6992 = 1.0/t6991;
            double t6994 = EcF_2*EcF_2;
            double t6995 = EcF_2*EcF_3;
            double t6996 = EcF_4+t6994+t6995;
            double t6997 = 1.0/t6996;
            double t6998 = t6882*t6899*t6901*t6902;
            double t6999 = t6882*t6912*t6913;
            double t7000 = c*t6892*t6884*t6879*t6898*t6924*(1.0/3.0);
            double t7001 = t6999+t7000;
            double t7002 = EcP_2*EcP_3*t6908*t7001;
            double t7003 = t6998+t7002-EcP_3*c*t6892*t6884*t6879*t6898*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t7003*-2.0+t6876*(t6986-t6992*t6989*(t6986-EcF_1*(t6899*t6902*t6929* \
               (c*t6904*t6932*(4.0/9.0)-c*t6877*t6941*t6934+c*t6877*t6942*t6943*2.0-c*t6879*t6931*t6934*(2.0/3.0) \
               )+t6899*t6902*t6931*t6935-t6899*t6935*t6936*t6929*(1.0/3.0)+EcF_2*EcF_3*t6997*(-t6929*t6938*(c*t6904* \
               t6932*(1.0/1.8E1)-t6941*t6934*t6939+t6942*t6943*t6939*2.0-c*t6884*t6904*t6932*t6937*(4.0/9.0)+t6932* \
               t6916*t6917*t6918*t6937*(1.0/1.8E1)+c*t6884*t6879*t6931*t6934*t6937*(2.0/3.0))+t6931*t6938*t6957+c* \
               t6904*t6961*t6954*t6947*(2.0/9.0)-c*t6884*t6904*t6954*t6947*t6948*(4.0/9.0)+c*t6904*t6963*t6964*t6947* \
               t6958*(2.0/9.0)-t6916*t6917*t6962*t6918*t6947*t6948*(1.0/1.8E1)+c*t6884*t6879*1.0/(t6937*t6937*t6937) \
               *t6929*t6957*(1.0/3.0))+EcF_3*c*t6904*t6961*t6962*(4.0/9.0)-EcF_3*c*t6884*t6904*t6962*t6948*(8.0/9.0) \
               -EcF_3*c*t6904*t6963*t6964*t6958*(4.0/9.0)+EcF_3*t6916*t6917*t6962*t6918*t6948*(1.0/9.0))))+t6992* \
               t6989*(EcP_1*t7003-EcF_1*(t6899*t6902*t6935*t6929+EcF_2*EcF_3*t6997*(t6929*t6938*t6957+c*t6884*t6879* \
               t6962*t6947*t6948*(1.0/3.0))-EcF_3*c*t6884*t6879*t6962*t6948*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t6233 = rho_a[index]+rho_b[index];
            double t6234 = 1.0/pow(t6233,1.0/3.0);
            double t6235 = c*t6234;
            double t6236 = 1.0/pow(t6233,4.0/3.0);
            double t6237 = sqrt(t6235);
            double t6238 = EcP_3*t6237;
            double t6239 = EcP_4+t6235+t6238;
            double t6240 = c*t6236*(1.0/3.0);
            double t6241 = 1.0/sqrt(t6235);
            double t6242 = EcP_3*c*t6241*t6236*(1.0/6.0);
            double t6243 = t6240+t6242;
            double t6244 = EcP_2-t6237;
            double t6245 = 1.0/(t6239*t6239);
            double t6246 = 1.0/t6239;
            double t6247 = t6237*2.0;
            double t6248 = EcP_3+t6247;
            double t6249 = 1.0/(t6248*t6248);
            double t6250 = EcP_4*4.0;
            double t6251 = EcP_3*EcP_3;
            double t6252 = t6250-t6251;
            double t6253 = t6252*t6249;
            double t6254 = t6253+1.0;
            double t6255 = 1.0/t6254;
            double t6256 = 1.0/c;
            double t6257 = c*t6236*t6246*(1.0/3.0);
            double t6260 = c*t6234*t6243*t6245;
            double t6258 = -t6260+t6257;
            double t6259 = pow(t6233,1.0/3.0);
            double t6261 = 1.0/pow(t6233,7.0/3.0);
            double t6262 = EcP_2*EcP_2;
            double t6263 = EcP_2*EcP_3;
            double t6264 = EcP_4+t6262+t6263;
            double t6265 = 1.0/t6264;
            double t6266 = t6244*t6244;
            double t6267 = t6243*t6245*t6266;
            double t6268 = c*t6241*t6244*t6236*t6246*(1.0/3.0);
            double t6269 = t6267+t6268;
            double t6270 = 1.0/(t6244*t6244);
            double t6271 = c*t6261*(4.0/9.0);
            double t6272 = EcP_3*c*t6241*t6261*(2.0/9.0);
            double t6273 = c*c;
            double t6274 = 1.0/pow(t6233,8.0/3.0);
            double t6275 = 1.0/pow(t6235,3.0/2.0);
            double t6320 = EcP_3*t6273*t6274*t6275*(1.0/3.6E1);
            double t6276 = t6271+t6272-t6320;
            double t6277 = t6243*t6243;
            double t6278 = 1.0/(t6239*t6239*t6239);
            double t6279 = EcP_2*4.0;
            double t6280 = EcP_3*2.0;
            double t6281 = t6280+t6279;
            double t6282 = 1.0/(t6248*t6248*t6248);
            double t6283 = 1.0/(t6248*t6248*t6248*t6248*t6248);
            double t6284 = 1.0/(t6254*t6254);
            double t6285 = EcF_3*t6237;
            double t6286 = EcF_4+t6235+t6285;
            double t6287 = EcF_3*c*t6241*t6236*(1.0/6.0);
            double t6288 = t6240+t6287;
            double t6289 = 1.0/t6286;
            double t6290 = c*t6236*t6289*(1.0/3.0);
            double t6291 = 1.0/(t6286*t6286);
            double t6346 = c*t6234*t6291*t6288;
            double t6292 = t6290-t6346;
            double t6293 = 1.0/pow(t6233,2.0/3.0);
            double t6294 = EcF_2-t6237;
            double t6295 = 1.0/(t6294*t6294);
            double t6296 = t6294*t6294;
            double t6297 = EcF_3*c*t6241*t6261*(2.0/9.0);
            double t6298 = t6271+t6297-EcF_3*t6273*t6274*t6275*(1.0/3.6E1);
            double t6299 = t6288*t6288;
            double t6300 = 1.0/(t6286*t6286*t6286);
            double t6301 = EcF_3+t6247;
            double t6302 = EcF_2*4.0;
            double t6303 = EcF_3*2.0;
            double t6304 = t6302+t6303;
            double t6305 = 1.0/(t6301*t6301);
            double t6306 = EcF_4*4.0;
            double t6307 = EcF_3*EcF_3;
            double t6308 = t6306-t6307;
            double t6309 = t6305*t6308;
            double t6310 = t6309+1.0;
            double t6311 = 1.0/t6310;
            double t6312 = t6291*t6296*t6288;
            double t6313 = c*t6241*t6236*t6294*t6289*(1.0/3.0);
            double t6314 = t6312+t6313;
            double t6315 = 1.0/(t6301*t6301*t6301);
            double t6316 = 1.0/(t6301*t6301*t6301*t6301*t6301);
            double t6317 = 1.0/(t6310*t6310);
            double t6318 = t6243*t6256*t6258*t6259;
            double t6319 = c*t6261*t6246*(4.0/9.0);
            double t6321 = c*t6234*t6277*t6278*2.0;
            double t6322 = t6321+t6319-c*t6243*t6236*t6245*(2.0/3.0)-c*t6234*t6245*t6276;
            double t6323 = t6256*t6239*t6259*t6322;
            double t6324 = t6243*t6270*t6269;
            double t6325 = c*t6261*t6246*(1.0/1.8E1);
            double t6326 = t6266*t6277*t6278*2.0;
            double t6327 = t6244*t6246*t6273*t6274*t6275*(1.0/1.8E1);
            double t6328 = c*t6241*t6243*t6244*t6236*t6245*(2.0/3.0);
            double t6329 = t6325+t6326+t6327+t6328-t6245*t6266*t6276-c*t6241*t6261*t6244*t6246*(4.0/9.0);
            double t6330 = c*t6241*t6261*t6281*t6255*t6249*(4.0/9.0);
            double t6331 = 1.0/(t6244*t6244*t6244);
            double t6332 = c*t6241*t6236*t6239*t6269*t6331*(1.0/3.0);
            double t6333 = c*t6252*t6261*t6281*t6283*t6284*(2.0/9.0);
            double t6334 = t6330+t6332+t6324+t6333-t6270*t6239*t6329-c*t6261*t6281*t6255*t6282*(2.0/9.0)-t6281* \
               t6255*t6273*t6274*t6275*t6249*(1.0/1.8E1);
            double t6335 = EcP_2*EcP_3*t6265*t6334;
            double t6336 = EcP_3*c*t6261*t6255*t6282*(4.0/9.0);
            double t6337 = EcP_3*t6255*t6273*t6274*t6275*t6249*(1.0/9.0);
            double t6338 = t6323+t6335+t6318+t6336+t6337-t6256*t6239*t6293*t6258*(1.0/3.0)-EcP_3*c*t6241*t6261* \
               t6255*t6249*(8.0/9.0)-EcP_3*c*t6252*t6261*t6283*t6284*(4.0/9.0);
            double t6339 = EcP_1*t6338;
            double t6340 = pow(2.0,1.0/3.0);
            double t6341 = t6340*2.0;
            double t6342 = t6341-2.0;
            double t6343 = two_13*2.0;
            double t6344 = t6343-2.0;
            double t6345 = 1.0/t6344;
            double t6347 = EcF_2*EcF_2;
            double t6348 = EcF_2*EcF_3;
            double t6349 = EcF_4+t6347+t6348;
            double t6350 = 1.0/t6349;
            double t6351 = t6256*t6239*t6258*t6259;
            double t6352 = t6270*t6239*t6269;
            double t6353 = c*t6241*t6236*t6281*t6255*t6249*(1.0/3.0);
            double t6354 = t6352+t6353;
            double t6355 = EcP_2*EcP_3*t6265*t6354;
            double t6356 = t6351+t6355-EcP_3*c*t6241*t6236*t6255*t6249*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t6356*-2.0+t6233*(t6339-t6342*t6345*(t6339-EcF_1*(t6256*t6259*t6286* \
               (c*t6261*t6289*(4.0/9.0)-c*t6234*t6291*t6298-c*t6236*t6291*t6288*(2.0/3.0)+c*t6234*t6299*t6300*2.0) \
               -t6256*t6292*t6293*t6286*(1.0/3.0)+t6256*t6292*t6259*t6288+EcF_2*EcF_3*t6350*(-t6286*t6295*(c*t6261* \
               t6289*(1.0/1.8E1)-t6291*t6296*t6298+t6296*t6299*t6300*2.0-c*t6241*t6261*t6294*t6289*(4.0/9.0)+t6273* \
               t6274*t6275*t6294*t6289*(1.0/1.8E1)+c*t6241*t6236*t6291*t6294*t6288*(2.0/3.0))+t6295*t6288*t6314-c* \
               t6261*t6311*t6304*t6315*(2.0/9.0)+c*t6241*t6261*t6311*t6304*t6305*(4.0/9.0)+c*t6261*t6304*t6316*t6308* \
               t6317*(2.0/9.0)-t6273*t6274*t6275*t6311*t6304*t6305*(1.0/1.8E1)+c*t6241*t6236*1.0/(t6294*t6294*t6294) \
               *t6286*t6314*(1.0/3.0))+EcF_3*c*t6261*t6311*t6315*(4.0/9.0)-EcF_3*c*t6241*t6261*t6311*t6305*(8.0/9.0) \
               -EcF_3*c*t6261*t6316*t6308*t6317*(4.0/9.0)+EcF_3*t6273*t6274*t6275*t6311*t6305*(1.0/9.0))))+t6342* \
               t6345*(EcP_1*t6356-EcF_1*(t6256*t6292*t6259*t6286+EcF_2*EcF_3*t6350*(t6286*t6295*t6314+c*t6241*t6236* \
               t6311*t6304*t6305*(1.0/3.0))-EcF_3*c*t6241*t6236*t6311*t6305*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t5556 = rho_a[index]+rho_b[index];
            double t5557 = 1.0/pow(t5556,1.0/3.0);
            double t5558 = c*t5557;
            double t5559 = 1.0/pow(t5556,4.0/3.0);
            double t5560 = sqrt(t5558);
            double t5561 = EcP_3*t5560;
            double t5562 = EcP_4+t5561+t5558;
            double t5563 = c*t5559*(1.0/3.0);
            double t5564 = 1.0/sqrt(t5558);
            double t5565 = EcP_3*c*t5564*t5559*(1.0/6.0);
            double t5566 = t5563+t5565;
            double t5567 = 1.0/c;
            double t5568 = 1.0/t5562;
            double t5569 = c*t5559*t5568*(1.0/3.0);
            double t5570 = 1.0/(t5562*t5562);
            double t5705 = c*t5570*t5557*t5566;
            double t5571 = t5569-t5705;
            double t5572 = pow(t5556,1.0/3.0);
            double t5573 = 1.0/pow(t5556,7.0/3.0);
            double t5574 = EcP_2-t5560;
            double t5575 = 1.0/(t5574*t5574);
            double t5576 = t5574*t5574;
            double t5577 = c*t5573*(4.0/9.0);
            double t5578 = EcP_3*c*t5564*t5573*(2.0/9.0);
            double t5579 = c*c;
            double t5580 = 1.0/pow(t5556,8.0/3.0);
            double t5581 = 1.0/pow(t5558,3.0/2.0);
            double t5708 = EcP_3*t5580*t5581*t5579*(1.0/3.6E1);
            double t5582 = t5577+t5578-t5708;
            double t5583 = t5566*t5566;
            double t5584 = 1.0/(t5562*t5562*t5562);
            double t5585 = t5560*2.0;
            double t5586 = EcP_3+t5585;
            double t5587 = EcP_2*4.0;
            double t5588 = EcP_3*2.0;
            double t5589 = t5587+t5588;
            double t5590 = 1.0/(t5586*t5586);
            double t5591 = EcP_4*4.0;
            double t5592 = EcP_3*EcP_3;
            double t5593 = t5591-t5592;
            double t5594 = t5590*t5593;
            double t5595 = t5594+1.0;
            double t5596 = 1.0/t5595;
            double t5597 = t5570*t5566*t5576;
            double t5598 = c*t5564*t5574*t5559*t5568*(1.0/3.0);
            double t5599 = t5597+t5598;
            double t5600 = 1.0/(t5586*t5586*t5586);
            double t5601 = 1.0/(t5586*t5586*t5586*t5586*t5586);
            double t5602 = 1.0/(t5595*t5595);
            double t5603 = rho_a[index]-rho_b[index];
            double t5604 = t5603*t5603;
            double t5605 = EcF_4*4.0;
            double t5606 = EcF_3*EcF_3;
            double t5607 = t5605-t5606;
            double t5608 = EcF_2-t5560;
            double t5609 = EcF_3*t5560;
            double t5610 = EcF_4+t5558+t5609;
            double t5611 = 1.0/t5610;
            double t5612 = sqrt(t5607);
            double t5613 = EcF_3+t5585;
            double t5614 = 1.0/t5613;
            double t5615 = t5612*t5614;
            double t5616 = atan(t5615);
            double t5617 = 1.0/sqrt(t5607);
            double t5618 = sqrt(t5593);
            double t5619 = 1.0/t5586;
            double t5620 = t5618*t5619;
            double t5621 = atan(t5620);
            double t5622 = 1.0/sqrt(t5593);
            double t5623 = EcP_2*EcP_2;
            double t5624 = EcP_2*EcP_3;
            double t5625 = EcP_4+t5623+t5624;
            double t5626 = 1.0/t5625;
            double t5627 = Ac_4*4.0;
            double t5628 = Ac_3*Ac_3;
            double t5629 = t5627-t5628;
            double t5630 = Ac_2-t5560;
            double t5631 = Ac_3*t5560;
            double t5632 = Ac_4+t5558+t5631;
            double t5633 = 1.0/t5632;
            double t5634 = sqrt(t5629);
            double t5635 = Ac_3+t5585;
            double t5636 = 1.0/t5635;
            double t5637 = t5634*t5636;
            double t5638 = atan(t5637);
            double t5639 = 1.0/sqrt(t5629);
            double t5640 = c*t5557*t5633;
            double t5641 = log(t5640);
            double t5642 = Ac_3*t5638*t5639*2.0;
            double t5643 = t5630*t5630;
            double t5644 = t5633*t5643;
            double t5645 = log(t5644);
            double t5646 = Ac_2*4.0;
            double t5647 = Ac_3*2.0;
            double t5648 = t5646+t5647;
            double t5649 = t5638*t5639*t5648;
            double t5650 = t5645+t5649;
            double t5651 = Ac_2*Ac_2;
            double t5652 = Ac_2*Ac_3;
            double t5653 = Ac_4+t5651+t5652;
            double t5654 = 1.0/t5653;
            double t5672 = Ac_2*Ac_3*t5650*t5654;
            double t5655 = t5641+t5642-t5672;
            double t5656 = 1.0/t5556;
            double t5657 = t5603*t5656;
            double t5658 = 1.0/(t5556*t5556);
            double t5659 = t5658*2.0;
            double t5660 = 1.0/(t5556*t5556*t5556);
            double t5661 = t5603*t5660*2.0;
            double t5662 = t5661+t5659;
            double t5663 = t5657+1.0;
            double t5666 = t5603*t5658;
            double t5664 = t5656+t5666;
            double t5665 = -t5657+1.0;
            double t5667 = t5664*t5664;
            double t5668 = 1.0/d2fz0;
            double t5669 = two_13*2.0;
            double t5670 = t5669-2.0;
            double t5671 = 1.0/t5670;
            double t5673 = 1.0/(t5556*t5556*t5556*t5556);
            double t5674 = t5604*t5604;
            double t5675 = 1.0/Ac_1;
            double t5676 = EcF_3*c*t5564*t5559*(1.0/6.0);
            double t5677 = t5563+t5676;
            double t5678 = c*t5559*t5611*(1.0/3.0);
            double t5679 = 1.0/(t5610*t5610);
            double t5729 = c*t5557*t5677*t5679;
            double t5680 = t5678-t5729;
            double t5681 = 1.0/pow(t5556,2.0/3.0);
            double t5682 = EcF_2*EcF_2;
            double t5683 = EcF_2*EcF_3;
            double t5684 = EcF_4+t5682+t5683;
            double t5685 = 1.0/t5684;
            double t5686 = t5608*t5608;
            double t5687 = 1.0/(t5608*t5608);
            double t5688 = EcF_3*c*t5564*t5573*(2.0/9.0);
            double t5689 = t5577+t5688-EcF_3*t5580*t5581*t5579*(1.0/3.6E1);
            double t5690 = t5677*t5677;
            double t5691 = 1.0/(t5610*t5610*t5610);
            double t5692 = EcF_2*4.0;
            double t5693 = EcF_3*2.0;
            double t5694 = t5692+t5693;
            double t5695 = 1.0/(t5613*t5613);
            double t5696 = t5607*t5695;
            double t5697 = t5696+1.0;
            double t5698 = 1.0/t5697;
            double t5699 = t5677*t5686*t5679;
            double t5700 = c*t5564*t5559*t5611*t5608*(1.0/3.0);
            double t5701 = t5699+t5700;
            double t5702 = 1.0/(t5613*t5613*t5613);
            double t5703 = 1.0/(t5613*t5613*t5613*t5613*t5613);
            double t5704 = 1.0/(t5697*t5697);
            double t5706 = t5571*t5572*t5566*t5567;
            double t5707 = c*t5573*t5568*(4.0/9.0);
            double t5709 = c*t5583*t5557*t5584*2.0;
            double t5710 = t5707+t5709-c*t5570*t5582*t5557-c*t5570*t5566*t5559*(2.0/3.0);
            double t5711 = t5562*t5572*t5567*t5710;
            double t5712 = t5566*t5575*t5599;
            double t5713 = c*t5573*t5568*(1.0/1.8E1);
            double t5714 = t5583*t5584*t5576*2.0;
            double t5715 = t5580*t5581*t5574*t5568*t5579*(1.0/1.8E1);
            double t5716 = c*t5570*t5564*t5574*t5566*t5559*(2.0/3.0);
            double t5717 = t5713+t5714+t5715+t5716-t5570*t5582*t5576-c*t5564*t5573*t5574*t5568*(4.0/9.0);
            double t5718 = c*t5590*t5564*t5573*t5596*t5589*(4.0/9.0);
            double t5719 = 1.0/(t5574*t5574*t5574);
            double t5720 = c*t5562*t5564*t5559*t5599*t5719*(1.0/3.0);
            double t5721 = c*t5573*t5593*t5589*t5601*t5602*(2.0/9.0);
            double t5722 = t5720+t5712+t5721+t5718-t5562*t5575*t5717-c*t5573*t5596*t5589*t5600*(2.0/9.0)-t5580* \
               t5581*t5590*t5596*t5579*t5589*(1.0/1.8E1);
            double t5723 = EcP_2*EcP_3*t5626*t5722;
            double t5724 = EcP_3*c*t5573*t5596*t5600*(4.0/9.0);
            double t5725 = EcP_3*t5580*t5581*t5590*t5596*t5579*(1.0/9.0);
            double t5726 = t5711+t5723+t5706+t5724+t5725-t5562*t5571*t5567*t5681*(1.0/3.0)-EcP_3*c*t5590*t5564* \
               t5573*t5596*(8.0/9.0)-EcP_3*c*t5573*t5593*t5601*t5602*(4.0/9.0);
            double t5727 = EcP_1*t5726;
            double t5728 = 1.0/t5655;
            double t5730 = Ac_3*c*t5564*t5559*(1.0/6.0);
            double t5731 = t5563+t5730;
            double t5732 = 1.0/(t5632*t5632);
            double t5733 = 1.0/(t5635*t5635);
            double t5734 = t5629*t5733;
            double t5735 = t5734+1.0;
            double t5736 = 1.0/t5735;
            double t5737 = c*t5557*t5611;
            double t5738 = log(t5737);
            double t5739 = EcF_3*t5616*t5617*2.0;
            double t5740 = t5611*t5686;
            double t5741 = log(t5740);
            double t5742 = t5616*t5617*t5694;
            double t5743 = t5741+t5742;
            double t5767 = EcF_2*EcF_3*t5685*t5743;
            double t5744 = t5738+t5739-t5767;
            double t5745 = EcF_1*t5744;
            double t5746 = c*t5557*t5568;
            double t5747 = log(t5746);
            double t5748 = EcP_3*t5621*t5622*2.0;
            double t5749 = t5576*t5568;
            double t5750 = log(t5749);
            double t5751 = t5589*t5621*t5622;
            double t5752 = t5750+t5751;
            double t5768 = EcP_2*EcP_3*t5626*t5752;
            double t5753 = t5747+t5748-t5768;
            double t5769 = EcP_1*t5753;
            double t5754 = t5745-t5769;
            double t5755 = c*t5559*t5633*(1.0/3.0);
            double t5771 = c*t5557*t5731*t5732;
            double t5756 = -t5771+t5755;
            double t5757 = t5572*t5567*t5632*t5756;
            double t5758 = t5643*t5731*t5732;
            double t5759 = c*t5564*t5559*t5630*t5633*(1.0/3.0);
            double t5760 = t5758+t5759;
            double t5761 = 1.0/(t5630*t5630);
            double t5762 = t5632*t5760*t5761;
            double t5763 = c*t5564*t5559*t5648*t5733*t5736*(1.0/3.0);
            double t5764 = t5762+t5763;
            double t5765 = Ac_2*Ac_3*t5654*t5764;
            double t5793 = Ac_3*c*t5564*t5559*t5733*t5736*(2.0/3.0);
            double t5766 = t5765+t5757-t5793;
            double t5770 = 1.0/(t5655*t5655);
            double t5772 = Ac_3*c*t5564*t5573*(2.0/9.0);
            double t5817 = Ac_3*t5580*t5581*t5579*(1.0/3.6E1);
            double t5773 = t5577+t5772-t5817;
            double t5774 = t5731*t5731;
            double t5775 = 1.0/(t5632*t5632*t5632);
            double t5776 = 1.0/(t5635*t5635*t5635);
            double t5777 = 1.0/(t5635*t5635*t5635*t5635*t5635);
            double t5778 = 1.0/(t5735*t5735);
            double t5779 = t5572*t5567*t5610*t5680;
            double t5780 = t5610*t5687*t5701;
            double t5781 = c*t5564*t5559*t5694*t5695*t5698*(1.0/3.0);
            double t5782 = t5780+t5781;
            double t5783 = EcF_2*EcF_3*t5685*t5782;
            double t5794 = EcF_3*c*t5564*t5559*t5695*t5698*(2.0/3.0);
            double t5784 = t5783-t5794+t5779;
            double t5785 = EcF_1*t5784;
            double t5786 = t5562*t5571*t5572*t5567;
            double t5787 = t5562*t5575*t5599;
            double t5788 = c*t5590*t5564*t5559*t5596*t5589*(1.0/3.0);
            double t5789 = t5787+t5788;
            double t5790 = EcP_2*EcP_3*t5626*t5789;
            double t5795 = EcP_3*c*t5590*t5564*t5559*t5596*(2.0/3.0);
            double t5791 = t5790+t5786-t5795;
            double t5796 = EcP_1*t5791;
            double t5792 = t5785-t5796;
            double t5797 = d2fz0*t5675*t5728*t5792;
            double t5804 = d2fz0*t5675*t5770*t5754*t5766;
            double t5798 = t5797-t5804;
            double t5799 = d2fz0*t5675*t5754*t5728;
            double t5800 = t5799-1.0;
            double t5801 = 1.0/(t5556*t5556*t5556*t5556*t5556);
            double t5802 = pow(t5663,1.0/3.0);
            double t5803 = pow(t5665,1.0/3.0);
            double t5805 = t5664*t5802*(4.0/3.0);
            double t5837 = t5664*t5803*(4.0/3.0);
            double t5806 = t5805-t5837;
            double t5807 = t5673*t5674*t5800;
            double t5808 = t5807+1.0;
            double t5809 = pow(t5663,4.0/3.0);
            double t5810 = pow(t5665,4.0/3.0);
            double t5811 = t5810+t5809-2.0;
            double t5812 = t5673*t5674*t5798;
            double t5813 = t5603*t5604*t5673*t5800*4.0;
            double t5814 = t5674*t5800*t5801*4.0;
            double t5815 = t5812+t5813+t5814;
            double t5816 = c*t5573*t5633*(4.0/9.0);
            double t5818 = c*t5557*t5774*t5775*2.0;
            double t5819 = t5816+t5818-c*t5559*t5731*t5732*(2.0/3.0)-c*t5557*t5732*t5773;
            double t5820 = t5572*t5567*t5632*t5819;
            double t5821 = t5731*t5760*t5761;
            double t5822 = c*t5573*t5633*(1.0/1.8E1);
            double t5823 = t5643*t5774*t5775*2.0;
            double t5824 = t5580*t5581*t5579*t5630*t5633*(1.0/1.8E1);
            double t5825 = c*t5564*t5559*t5630*t5731*t5732*(2.0/3.0);
            double t5826 = t5822+t5823+t5824+t5825-t5643*t5732*t5773-c*t5564*t5573*t5630*t5633*(4.0/9.0);
            double t5827 = c*t5564*t5573*t5648*t5733*t5736*(4.0/9.0);
            double t5828 = 1.0/(t5630*t5630*t5630);
            double t5829 = c*t5564*t5559*t5632*t5760*t5828*(1.0/3.0);
            double t5830 = c*t5573*t5629*t5648*t5777*t5778*(2.0/9.0);
            double t5831 = t5821+t5830+t5827+t5829-t5632*t5761*t5826-c*t5573*t5648*t5736*t5776*(2.0/9.0)-t5580* \
               t5581*t5579*t5648*t5733*t5736*(1.0/1.8E1);
            double t5832 = Ac_2*Ac_3*t5654*t5831;
            double t5833 = t5572*t5567*t5731*t5756;
            double t5834 = Ac_3*c*t5573*t5736*t5776*(4.0/9.0);
            double t5835 = Ac_3*t5580*t5581*t5579*t5733*t5736*(1.0/9.0);
            double t5836 = t5820+t5832+t5833+t5834+t5835-t5567*t5632*t5681*t5756*(1.0/3.0)-Ac_3*c*t5564*t5573* \
               t5733*t5736*(8.0/9.0)-Ac_3*c*t5573*t5629*t5777*t5778*(4.0/9.0);
            v_rho_b_rho_b_[index] = EcP_1*t5791*-2.0+t5556*(t5727+Ac_1*t5671*t5655*t5668*t5811*(1.0/(t5556*t5556* \
               t5556*t5556*t5556*t5556)*t5674*t5800*2.0E1+t5604*t5673*t5800*1.2E1+t5674*t5798*t5801*8.0-t5673*t5674* \
               (d2fz0*t5675*t5728*(t5727-EcF_1*(t5572*t5567*t5610*(c*t5573*t5611*(4.0/9.0)+c*t5557*t5690*t5691*2.0- \
               c*t5559*t5677*t5679*(2.0/3.0)-c*t5557*t5679*t5689)+t5572*t5567*t5680*t5677-t5567*t5610*t5680*t5681* \
               (1.0/3.0)+EcF_2*EcF_3*t5685*(-t5610*t5687*(c*t5573*t5611*(1.0/1.8E1)+t5690*t5691*t5686*2.0-t5686*t5679* \
               t5689-c*t5564*t5573*t5611*t5608*(4.0/9.0)+t5580*t5581*t5579*t5611*t5608*(1.0/1.8E1)+c*t5564*t5559* \
               t5608*t5677*t5679*(2.0/3.0))+t5677*t5687*t5701-c*t5573*t5694*t5698*t5702*(2.0/9.0)+c*t5564*t5573*t5694* \
               t5695*t5698*(4.0/9.0)+c*t5573*t5607*t5694*t5703*t5704*(2.0/9.0)-t5580*t5581*t5579*t5694*t5695*t5698* \
               (1.0/1.8E1)+c*t5564*t5559*t5610*1.0/(t5608*t5608*t5608)*t5701*(1.0/3.0))+EcF_3*c*t5573*t5698*t5702* \
               (4.0/9.0)-EcF_3*c*t5564*t5573*t5695*t5698*(8.0/9.0)-EcF_3*c*t5573*t5607*t5703*t5704*(4.0/9.0)+EcF_3* \
               t5580*t5581*t5579*t5695*t5698*(1.0/9.0)))-d2fz0*1.0/(t5655*t5655*t5655)*t5675*t5754*(t5766*t5766)* \
               2.0+d2fz0*t5675*t5770*t5792*t5766*2.0+d2fz0*t5675*t5770*t5754*t5836)+t5603*t5604*t5673*t5798*8.0+t5603* \
               t5604*t5800*t5801*3.2E1)+Ac_1*t5671*t5655*t5668*t5808*(t5662*t5802*(4.0/3.0)-t5662*t5803*(4.0/3.0) \
               +1.0/pow(t5663,2.0/3.0)*t5667*(4.0/9.0)+1.0/pow(t5665,2.0/3.0)*t5667*(4.0/9.0))+Ac_1*t5671*t5655*t5668* \
               t5806*t5815*2.0+Ac_1*t5671*t5668*t5766*t5811*t5815*2.0+Ac_1*t5671*t5668*t5766*t5806*t5808*2.0+Ac_1* \
               t5671*t5668*t5811*t5808*t5836)-Ac_1*t5671*t5655*t5668*t5811*t5815*2.0-Ac_1*t5671*t5655*t5668*t5806* \
               t5808*2.0-Ac_1*t5671*t5668*t5766*t5811*t5808*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t7005 = rho_a[index]+rho_b[index];
            double t7006 = 1.0/pow(t7005,1.0/3.0);
            double t7007 = c*t7006;
            double t7008 = 1.0/pow(t7005,4.0/3.0);
            double t7009 = sqrt(t7007);
            double t7010 = EcP_3*t7009;
            double t7011 = EcP_4+t7010+t7007;
            double t7012 = c*t7008*(1.0/3.0);
            double t7013 = 1.0/sqrt(t7007);
            double t7014 = EcP_3*c*t7013*t7008*(1.0/6.0);
            double t7015 = t7012+t7014;
            double t7016 = EcP_2-t7009;
            double t7017 = 1.0/(t7011*t7011);
            double t7018 = 1.0/t7011;
            double t7019 = t7009*2.0;
            double t7020 = EcP_3+t7019;
            double t7021 = 1.0/(t7020*t7020);
            double t7022 = EcP_4*4.0;
            double t7023 = EcP_3*EcP_3;
            double t7024 = t7022-t7023;
            double t7025 = t7021*t7024;
            double t7026 = t7025+1.0;
            double t7027 = 1.0/t7026;
            double t7028 = 1.0/c;
            double t7029 = c*t7008*t7018*(1.0/3.0);
            double t7032 = c*t7006*t7015*t7017;
            double t7030 = -t7032+t7029;
            double t7031 = pow(t7005,1.0/3.0);
            double t7033 = 1.0/pow(t7005,7.0/3.0);
            double t7034 = EcP_2*EcP_2;
            double t7035 = EcP_2*EcP_3;
            double t7036 = EcP_4+t7034+t7035;
            double t7037 = 1.0/t7036;
            double t7038 = t7016*t7016;
            double t7039 = t7015*t7017*t7038;
            double t7040 = c*t7013*t7016*t7008*t7018*(1.0/3.0);
            double t7041 = t7040+t7039;
            double t7042 = 1.0/(t7016*t7016);
            double t7043 = c*t7033*(4.0/9.0);
            double t7044 = EcP_3*c*t7013*t7033*(2.0/9.0);
            double t7045 = c*c;
            double t7046 = 1.0/pow(t7005,8.0/3.0);
            double t7047 = 1.0/pow(t7007,3.0/2.0);
            double t7092 = EcP_3*t7045*t7046*t7047*(1.0/3.6E1);
            double t7048 = t7043+t7044-t7092;
            double t7049 = t7015*t7015;
            double t7050 = 1.0/(t7011*t7011*t7011);
            double t7051 = EcP_2*4.0;
            double t7052 = EcP_3*2.0;
            double t7053 = t7051+t7052;
            double t7054 = 1.0/(t7020*t7020*t7020);
            double t7055 = 1.0/(t7020*t7020*t7020*t7020*t7020);
            double t7056 = 1.0/(t7026*t7026);
            double t7057 = EcF_3*t7009;
            double t7058 = EcF_4+t7007+t7057;
            double t7059 = EcF_3*c*t7013*t7008*(1.0/6.0);
            double t7060 = t7012+t7059;
            double t7061 = 1.0/t7058;
            double t7062 = c*t7061*t7008*(1.0/3.0);
            double t7063 = 1.0/(t7058*t7058);
            double t7118 = c*t7006*t7060*t7063;
            double t7064 = t7062-t7118;
            double t7065 = 1.0/pow(t7005,2.0/3.0);
            double t7066 = EcF_2-t7009;
            double t7067 = 1.0/(t7066*t7066);
            double t7068 = t7066*t7066;
            double t7069 = EcF_3*c*t7013*t7033*(2.0/9.0);
            double t7070 = t7043+t7069-EcF_3*t7045*t7046*t7047*(1.0/3.6E1);
            double t7071 = t7060*t7060;
            double t7072 = 1.0/(t7058*t7058*t7058);
            double t7073 = EcF_3+t7019;
            double t7074 = EcF_2*4.0;
            double t7075 = EcF_3*2.0;
            double t7076 = t7074+t7075;
            double t7077 = 1.0/(t7073*t7073);
            double t7078 = EcF_4*4.0;
            double t7079 = EcF_3*EcF_3;
            double t7080 = t7078-t7079;
            double t7081 = t7080*t7077;
            double t7082 = t7081+1.0;
            double t7083 = 1.0/t7082;
            double t7084 = t7060*t7063*t7068;
            double t7085 = c*t7013*t7061*t7008*t7066*(1.0/3.0);
            double t7086 = t7084+t7085;
            double t7087 = 1.0/(t7073*t7073*t7073);
            double t7088 = 1.0/(t7073*t7073*t7073*t7073*t7073);
            double t7089 = 1.0/(t7082*t7082);
            double t7090 = t7030*t7031*t7015*t7028;
            double t7091 = c*t7033*t7018*(4.0/9.0);
            double t7093 = c*t7050*t7006*t7049*2.0;
            double t7094 = t7091+t7093-c*t7015*t7008*t7017*(2.0/3.0)-c*t7006*t7017*t7048;
            double t7095 = t7011*t7031*t7028*t7094;
            double t7096 = t7041*t7015*t7042;
            double t7097 = c*t7033*t7018*(1.0/1.8E1);
            double t7098 = t7050*t7038*t7049*2.0;
            double t7099 = t7016*t7018*t7045*t7046*t7047*(1.0/1.8E1);
            double t7100 = c*t7013*t7015*t7016*t7008*t7017*(2.0/3.0);
            double t7101 = t7097+t7098+t7099+t7100-t7017*t7038*t7048-c*t7013*t7033*t7016*t7018*(4.0/9.0);
            double t7102 = c*t7021*t7013*t7033*t7053*t7027*(4.0/9.0);
            double t7103 = 1.0/(t7016*t7016*t7016);
            double t7104 = c*t7011*t7013*t7041*t7008*t7103*(1.0/3.0);
            double t7105 = c*t7024*t7033*t7053*t7055*t7056*(2.0/9.0);
            double t7106 = t7096+t7102+t7104+t7105-t7011*t7042*t7101-c*t7033*t7053*t7027*t7054*(2.0/9.0)-t7021* \
               t7053*t7027*t7045*t7046*t7047*(1.0/1.8E1);
            double t7107 = EcP_2*EcP_3*t7037*t7106;
            double t7108 = EcP_3*c*t7033*t7027*t7054*(4.0/9.0);
            double t7109 = EcP_3*t7021*t7027*t7045*t7046*t7047*(1.0/9.0);
            double t7110 = t7090+t7095+t7107+t7108+t7109-t7011*t7030*t7028*t7065*(1.0/3.0)-EcP_3*c*t7021*t7013* \
               t7033*t7027*(8.0/9.0)-EcP_3*c*t7024*t7033*t7055*t7056*(4.0/9.0);
            double t7111 = EcP_1*t7110;
            double t7112 = pow(2.0,1.0/3.0);
            double t7113 = t7112*2.0;
            double t7114 = t7113-2.0;
            double t7115 = two_13*2.0;
            double t7116 = t7115-2.0;
            double t7117 = 1.0/t7116;
            double t7119 = EcF_2*EcF_2;
            double t7120 = EcF_2*EcF_3;
            double t7121 = EcF_4+t7120+t7119;
            double t7122 = 1.0/t7121;
            double t7123 = t7011*t7030*t7031*t7028;
            double t7124 = t7011*t7041*t7042;
            double t7125 = c*t7021*t7013*t7008*t7053*t7027*(1.0/3.0);
            double t7126 = t7124+t7125;
            double t7127 = EcP_2*EcP_3*t7037*t7126;
            double t7128 = t7123+t7127-EcP_3*c*t7021*t7013*t7008*t7027*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t7128*-2.0+t7005*(t7111-t7114*t7117*(t7111-EcF_1*(t7031*t7028*t7058* \
               (c*t7033*t7061*(4.0/9.0)-c*t7006*t7070*t7063+c*t7006*t7071*t7072*2.0-c*t7060*t7008*t7063*(2.0/3.0) \
               )+t7031*t7060*t7028*t7064-t7028*t7064*t7065*t7058*(1.0/3.0)+EcF_2*EcF_3*t7122*(-t7058*t7067*(c*t7033* \
               t7061*(1.0/1.8E1)-t7070*t7063*t7068+t7071*t7072*t7068*2.0-c*t7013*t7033*t7061*t7066*(4.0/9.0)+t7061* \
               t7045*t7046*t7047*t7066*(1.0/1.8E1)+c*t7013*t7060*t7008*t7063*t7066*(2.0/3.0))+t7060*t7067*t7086-c* \
               t7033*t7083*t7076*t7087*(2.0/9.0)+c*t7013*t7033*t7083*t7076*t7077*(4.0/9.0)+c*t7033*t7080*t7076*t7088* \
               t7089*(2.0/9.0)-t7045*t7046*t7047*t7083*t7076*t7077*(1.0/1.8E1)+c*t7013*t7008*1.0/(t7066*t7066*t7066) \
               *t7058*t7086*(1.0/3.0))+EcF_3*c*t7033*t7083*t7087*(4.0/9.0)-EcF_3*c*t7013*t7033*t7083*t7077*(8.0/9.0) \
               -EcF_3*c*t7033*t7080*t7088*t7089*(4.0/9.0)+EcF_3*t7045*t7046*t7047*t7083*t7077*(1.0/9.0))))+t7114* \
               t7117*(EcP_1*t7128-EcF_1*(t7031*t7028*t7064*t7058+EcF_2*EcF_3*t7122*(t7058*t7067*t7086+c*t7013*t7008* \
               t7083*t7076*t7077*(1.0/3.0))-EcF_3*c*t7013*t7008*t7083*t7077*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t6358 = rho_a[index]+rho_b[index];
            double t6359 = 1.0/pow(t6358,1.0/3.0);
            double t6360 = c*t6359;
            double t6361 = 1.0/pow(t6358,4.0/3.0);
            double t6362 = sqrt(t6360);
            double t6363 = EcP_3*t6362;
            double t6364 = EcP_4+t6360+t6363;
            double t6365 = c*t6361*(1.0/3.0);
            double t6366 = 1.0/sqrt(t6360);
            double t6367 = EcP_3*c*t6361*t6366*(1.0/6.0);
            double t6368 = t6365+t6367;
            double t6369 = EcP_2-t6362;
            double t6370 = 1.0/(t6364*t6364);
            double t6371 = 1.0/t6364;
            double t6372 = t6362*2.0;
            double t6373 = EcP_3+t6372;
            double t6374 = 1.0/(t6373*t6373);
            double t6375 = EcP_4*4.0;
            double t6376 = EcP_3*EcP_3;
            double t6377 = t6375-t6376;
            double t6378 = t6374*t6377;
            double t6379 = t6378+1.0;
            double t6380 = 1.0/t6379;
            double t6381 = 1.0/c;
            double t6382 = c*t6361*t6371*(1.0/3.0);
            double t6385 = c*t6370*t6359*t6368;
            double t6383 = t6382-t6385;
            double t6384 = pow(t6358,1.0/3.0);
            double t6386 = 1.0/pow(t6358,7.0/3.0);
            double t6387 = EcP_2*EcP_2;
            double t6388 = EcP_2*EcP_3;
            double t6389 = EcP_4+t6387+t6388;
            double t6390 = 1.0/t6389;
            double t6391 = t6369*t6369;
            double t6392 = t6370*t6391*t6368;
            double t6393 = c*t6361*t6371*t6366*t6369*(1.0/3.0);
            double t6394 = t6392+t6393;
            double t6395 = 1.0/(t6369*t6369);
            double t6396 = c*t6386*(4.0/9.0);
            double t6397 = EcP_3*c*t6366*t6386*(2.0/9.0);
            double t6398 = c*c;
            double t6399 = 1.0/pow(t6358,8.0/3.0);
            double t6400 = 1.0/pow(t6360,3.0/2.0);
            double t6445 = EcP_3*t6398*t6399*t6400*(1.0/3.6E1);
            double t6401 = t6396+t6397-t6445;
            double t6402 = t6368*t6368;
            double t6403 = 1.0/(t6364*t6364*t6364);
            double t6404 = EcP_2*4.0;
            double t6405 = EcP_3*2.0;
            double t6406 = t6404+t6405;
            double t6407 = 1.0/(t6373*t6373*t6373);
            double t6408 = 1.0/(t6373*t6373*t6373*t6373*t6373);
            double t6409 = 1.0/(t6379*t6379);
            double t6410 = EcF_3*t6362;
            double t6411 = EcF_4+t6360+t6410;
            double t6412 = EcF_3*c*t6361*t6366*(1.0/6.0);
            double t6413 = t6365+t6412;
            double t6414 = 1.0/t6411;
            double t6415 = c*t6361*t6414*(1.0/3.0);
            double t6416 = 1.0/(t6411*t6411);
            double t6471 = c*t6359*t6413*t6416;
            double t6417 = t6415-t6471;
            double t6418 = 1.0/pow(t6358,2.0/3.0);
            double t6419 = EcF_2-t6362;
            double t6420 = 1.0/(t6419*t6419);
            double t6421 = t6419*t6419;
            double t6422 = EcF_3*c*t6366*t6386*(2.0/9.0);
            double t6423 = t6396+t6422-EcF_3*t6398*t6399*t6400*(1.0/3.6E1);
            double t6424 = t6413*t6413;
            double t6425 = 1.0/(t6411*t6411*t6411);
            double t6426 = EcF_3+t6372;
            double t6427 = EcF_2*4.0;
            double t6428 = EcF_3*2.0;
            double t6429 = t6427+t6428;
            double t6430 = 1.0/(t6426*t6426);
            double t6431 = EcF_4*4.0;
            double t6432 = EcF_3*EcF_3;
            double t6433 = t6431-t6432;
            double t6434 = t6430*t6433;
            double t6435 = t6434+1.0;
            double t6436 = 1.0/t6435;
            double t6437 = t6421*t6413*t6416;
            double t6438 = c*t6361*t6366*t6414*t6419*(1.0/3.0);
            double t6439 = t6437+t6438;
            double t6440 = 1.0/(t6426*t6426*t6426);
            double t6441 = 1.0/(t6426*t6426*t6426*t6426*t6426);
            double t6442 = 1.0/(t6435*t6435);
            double t6443 = t6381*t6383*t6384*t6368;
            double t6444 = c*t6371*t6386*(4.0/9.0);
            double t6446 = c*t6359*t6402*t6403*2.0;
            double t6447 = t6444+t6446-c*t6361*t6370*t6368*(2.0/3.0)-c*t6370*t6359*t6401;
            double t6448 = t6381*t6364*t6384*t6447;
            double t6449 = t6394*t6368*t6395;
            double t6450 = c*t6371*t6386*(1.0/1.8E1);
            double t6451 = t6391*t6402*t6403*2.0;
            double t6452 = t6371*t6369*t6398*t6399*t6400*(1.0/1.8E1);
            double t6453 = c*t6361*t6370*t6366*t6368*t6369*(2.0/3.0);
            double t6454 = t6450+t6451+t6452+t6453-t6370*t6391*t6401-c*t6371*t6366*t6386*t6369*(4.0/9.0);
            double t6455 = c*t6380*t6374*t6366*t6386*t6406*(4.0/9.0);
            double t6456 = 1.0/(t6369*t6369*t6369);
            double t6457 = c*t6361*t6364*t6366*t6394*t6456*(1.0/3.0);
            double t6458 = c*t6377*t6386*t6406*t6408*t6409*(2.0/9.0);
            double t6459 = t6455+t6457+t6449+t6458-t6364*t6395*t6454-c*t6380*t6386*t6406*t6407*(2.0/9.0)-t6380* \
               t6374*t6398*t6399*t6400*t6406*(1.0/1.8E1);
            double t6460 = EcP_2*EcP_3*t6390*t6459;
            double t6461 = EcP_3*c*t6380*t6386*t6407*(4.0/9.0);
            double t6462 = EcP_3*t6380*t6374*t6398*t6399*t6400*(1.0/9.0);
            double t6463 = t6460+t6443+t6461+t6462+t6448-t6381*t6364*t6383*t6418*(1.0/3.0)-EcP_3*c*t6380*t6374* \
               t6366*t6386*(8.0/9.0)-EcP_3*c*t6377*t6386*t6408*t6409*(4.0/9.0);
            double t6464 = EcP_1*t6463;
            double t6465 = pow(2.0,1.0/3.0);
            double t6466 = t6465*2.0;
            double t6467 = t6466-2.0;
            double t6468 = two_13*2.0;
            double t6469 = t6468-2.0;
            double t6470 = 1.0/t6469;
            double t6472 = EcF_2*EcF_2;
            double t6473 = EcF_2*EcF_3;
            double t6474 = EcF_4+t6472+t6473;
            double t6475 = 1.0/t6474;
            double t6476 = t6381*t6364*t6383*t6384;
            double t6477 = t6364*t6394*t6395;
            double t6478 = c*t6361*t6380*t6374*t6366*t6406*(1.0/3.0);
            double t6479 = t6477+t6478;
            double t6480 = EcP_2*EcP_3*t6390*t6479;
            double t6481 = t6480+t6476-EcP_3*c*t6361*t6380*t6374*t6366*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t6481*-2.0+t6358*(t6464-t6470*t6467*(t6464-EcF_1*(t6381*t6384*t6411* \
               (c*t6386*t6414*(4.0/9.0)-c*t6361*t6413*t6416*(2.0/3.0)-c*t6359*t6423*t6416+c*t6359*t6424*t6425*2.0) \
               +t6381*t6384*t6413*t6417-t6381*t6411*t6417*t6418*(1.0/3.0)+EcF_2*EcF_3*t6475*(-t6411*t6420*(c*t6386* \
               t6414*(1.0/1.8E1)-t6421*t6423*t6416+t6421*t6424*t6425*2.0-c*t6366*t6386*t6414*t6419*(4.0/9.0)+t6398* \
               t6399*t6400*t6414*t6419*(1.0/1.8E1)+c*t6361*t6366*t6413*t6416*t6419*(2.0/3.0))+t6420*t6413*t6439-c* \
               t6386*t6440*t6436*t6429*(2.0/9.0)+c*t6366*t6386*t6430*t6436*t6429*(4.0/9.0)+c*t6386*t6441*t6433*t6442* \
               t6429*(2.0/9.0)-t6398*t6399*t6400*t6430*t6436*t6429*(1.0/1.8E1)+c*t6361*t6366*t6411*1.0/(t6419*t6419* \
               t6419)*t6439*(1.0/3.0))+EcF_3*c*t6386*t6440*t6436*(4.0/9.0)-EcF_3*c*t6366*t6386*t6430*t6436*(8.0/9.0) \
               -EcF_3*c*t6386*t6441*t6433*t6442*(4.0/9.0)+EcF_3*t6398*t6399*t6400*t6430*t6436*(1.0/9.0))))+t6470* \
               t6467*(EcP_1*t6481-EcF_1*(t6381*t6384*t6411*t6417+EcF_2*EcF_3*t6475*(t6411*t6420*t6439+c*t6361*t6366* \
               t6430*t6436*t6429*(1.0/3.0))-EcF_3*c*t6361*t6366*t6430*t6436*(2.0/3.0)))*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

