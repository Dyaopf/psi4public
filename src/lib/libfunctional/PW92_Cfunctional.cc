#include <libmints/vector.h>
#include "PW92_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

PW92_CFunctional::PW92_CFunctional()
{
    name_ = "PW92_C";
    description_ = "    PW92 LSDA Correlation\n";
    citation_ = "    J.P. Perdew and Y. Wang, Phys. Rev. B., 45(23), 13244, 1992\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = false;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["d2fz0"] =   1.7099210000000000E+00;
    parameters_["Aa"] =   1.6886999999999999E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1091000000000001E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545000000000000E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
}
PW92_CFunctional::~PW92_CFunctional()
{
}
void PW92_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double d2fz0 = parameters_["d2fz0"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t49192 = rho_a+rho_b;
                double t49193 = 1.0/pow(t49192,1.0/3.0);
                double t49194 = c*t49193;
                double t49195 = sqrt(t49194);
                double t49196 = pow(t49194,3.0/2.0);
                double t49197 = c*c;
                double t49198 = 1.0/pow(t49192,2.0/3.0);
                double t49199 = 1.0/c0p;
                double t49200 = b1p*t49195;
                double t49201 = b3p*t49196;
                double t49202 = b4p*t49197*t49198;
                double t49203 = b2p*c*t49193;
                double t49204 = t49200+t49201+t49202+t49203;
                double t49205 = 1.0/t49204;
                double t49206 = t49205*t49199*(1.0/2.0);
                double t49207 = t49206+1.0;
                double t49208 = log(t49207);
                double t49209 = a1p*c*t49193;
                double t49210 = t49209+1.0;
                double t49211 = c0p*t49210*t49208*2.0;
                v[Q] += scale * -t49192*(t49211-((pow(2.0,1.0/3.0)*2.0-2.0)*(t49211-c0f*log((1.0/2.0)/(c0f*(b1f*t49195+b3f*t49196+b2f*c*t49193+b4f*t49197*t49198))+1.0)*(a1f*c*t49193+1.0)*2.0))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t49213 = rho_a+rho_b;
                double t49214 = 1.0/pow(t49213,1.0/3.0);
                double t49215 = c*t49214;
                double t49216 = sqrt(t49215);
                double t49217 = b1f*t49216;
                double t49218 = pow(t49215,3.0/2.0);
                double t49219 = b3f*t49218;
                double t49220 = c*c;
                double t49221 = 1.0/pow(t49213,2.0/3.0);
                double t49222 = b4f*t49220*t49221;
                double t49223 = b2f*c*t49214;
                double t49224 = t49222+t49223+t49217+t49219;
                double t49225 = 1.0/pow(t49213,4.0/3.0);
                double t49226 = b1p*t49216;
                double t49227 = b3p*t49218;
                double t49228 = b4p*t49220*t49221;
                double t49229 = b2p*c*t49214;
                double t49230 = t49226+t49227+t49228+t49229;
                double t49231 = 1.0/pow(t49213,5.0/3.0);
                double t49232 = 1.0/sqrt(t49215);
                double t49233 = 1.0/c0f;
                double t49234 = 1.0/t49224;
                double t49235 = t49233*t49234*(1.0/2.0);
                double t49236 = t49235+1.0;
                double t49237 = 1.0/c0p;
                double t49238 = 1.0/t49230;
                double t49239 = t49237*t49238*(1.0/2.0);
                double t49240 = t49239+1.0;
                double t49241 = a1p*c*t49214;
                double t49242 = t49241+1.0;
                double t49243 = 1.0/t49240;
                double t49244 = 1.0/(t49230*t49230);
                double t49245 = b4p*t49220*t49231*(2.0/3.0);
                double t49246 = b2p*c*t49225*(1.0/3.0);
                double t49247 = b1p*c*t49232*t49225*(1.0/6.0);
                double t49248 = b3p*c*t49216*t49225*(1.0/2.0);
                double t49249 = t49245+t49246+t49247+t49248;
                double t49250 = t49242*t49243*t49244*t49249;
                double t49251 = log(t49240);
                double t49252 = pow(2.0,1.0/3.0);
                double t49253 = t49252*2.0;
                double t49254 = t49253-2.0;
                double t49255 = two_13*2.0;
                double t49256 = t49255-2.0;
                double t49257 = 1.0/t49256;
                double t49258 = log(t49236);
                double t49259 = a1f*c*t49214;
                double t49260 = t49259+1.0;
                v_rho_a[Q] += scale * t49213*(-t49250+t49254*t49257*(t49250-(1.0/(t49224*t49224)*t49260*(b2f*c*t49225*(1.0/3.0)+b4f*t49220*t49231*(2.0/3.0)+b1f*c*t49232*t49225*(1.0/6.0)+b3f*c*t49216*t49225*(1.0/2.0)))/t49236+a1f*c*c0f*t49225*t49258*(2.0/3.0)-a1p*c*c0p*t49251*t49225*(2.0/3.0))+a1p*c*c0p*t49251*t49225*(2.0/3.0))-c0p*t49242*t49251*2.0-t49254*t49257*(c0f*t49260*t49258*2.0-c0p*t49242*t49251*2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t49262 = rho_a+rho_b;
                double t49263 = 1.0/pow(t49262,1.0/3.0);
                double t49264 = c*t49263;
                double t49265 = sqrt(t49264);
                double t49266 = b1f*t49265;
                double t49267 = pow(t49264,3.0/2.0);
                double t49268 = b3f*t49267;
                double t49269 = c*c;
                double t49270 = 1.0/pow(t49262,2.0/3.0);
                double t49271 = b4f*t49270*t49269;
                double t49272 = b2f*c*t49263;
                double t49273 = t49271+t49272+t49266+t49268;
                double t49274 = 1.0/pow(t49262,4.0/3.0);
                double t49275 = b1p*t49265;
                double t49276 = b3p*t49267;
                double t49277 = b4p*t49270*t49269;
                double t49278 = b2p*c*t49263;
                double t49279 = t49275+t49276+t49277+t49278;
                double t49280 = 1.0/pow(t49262,5.0/3.0);
                double t49281 = 1.0/sqrt(t49264);
                double t49282 = 1.0/c0f;
                double t49283 = 1.0/t49273;
                double t49284 = t49282*t49283*(1.0/2.0);
                double t49285 = t49284+1.0;
                double t49286 = 1.0/c0p;
                double t49287 = 1.0/t49279;
                double t49288 = t49286*t49287*(1.0/2.0);
                double t49289 = t49288+1.0;
                double t49290 = a1p*c*t49263;
                double t49291 = t49290+1.0;
                double t49292 = 1.0/t49289;
                double t49293 = 1.0/(t49279*t49279);
                double t49294 = b4p*t49280*t49269*(2.0/3.0);
                double t49295 = b2p*c*t49274*(1.0/3.0);
                double t49296 = b1p*c*t49281*t49274*(1.0/6.0);
                double t49297 = b3p*c*t49265*t49274*(1.0/2.0);
                double t49298 = t49294+t49295+t49296+t49297;
                double t49299 = t49291*t49292*t49293*t49298;
                double t49300 = log(t49289);
                double t49301 = pow(2.0,1.0/3.0);
                double t49302 = t49301*2.0;
                double t49303 = t49302-2.0;
                double t49304 = two_13*2.0;
                double t49305 = t49304-2.0;
                double t49306 = 1.0/t49305;
                double t49307 = log(t49285);
                double t49308 = a1f*c*t49263;
                double t49309 = t49308+1.0;
                v_rho_b[Q] += scale * t49262*(-t49299+t49303*t49306*(t49299-(1.0/(t49273*t49273)*t49309*(b2f*c*t49274*(1.0/3.0)+b4f*t49280*t49269*(2.0/3.0)+b1f*c*t49281*t49274*(1.0/6.0)+b3f*c*t49265*t49274*(1.0/2.0)))/t49285+a1f*c*c0f*t49307*t49274*(2.0/3.0)-a1p*c*c0p*t49300*t49274*(2.0/3.0))+a1p*c*c0p*t49300*t49274*(2.0/3.0))-c0p*t49300*t49291*2.0-t49303*t49306*(c0f*t49307*t49309*2.0-c0p*t49300*t49291*2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t49316 = rho_a+rho_b;
                double t49317 = 1.0/pow(t49316,1.0/3.0);
                double t49318 = c*t49317;
                double t49319 = sqrt(t49318);
                double t49320 = b1f*t49319;
                double t49321 = pow(t49318,3.0/2.0);
                double t49322 = b3f*t49321;
                double t49323 = c*c;
                double t49324 = 1.0/pow(t49316,2.0/3.0);
                double t49325 = b4f*t49323*t49324;
                double t49326 = b2f*c*t49317;
                double t49327 = t49320+t49322+t49325+t49326;
                double t49328 = 1.0/pow(t49316,7.0/3.0);
                double t49329 = 1.0/pow(t49316,8.0/3.0);
                double t49330 = 1.0/sqrt(t49318);
                double t49331 = b1p*t49319;
                double t49332 = b3p*t49321;
                double t49333 = b4p*t49323*t49324;
                double t49334 = b2p*c*t49317;
                double t49335 = t49331+t49332+t49333+t49334;
                double t49336 = 1.0/pow(t49318,3.0/2.0);
                double t49337 = a1f*c*t49317;
                double t49338 = t49337+1.0;
                double t49339 = 1.0/c0f;
                double t49340 = 1.0/t49327;
                double t49341 = t49340*t49339*(1.0/2.0);
                double t49342 = t49341+1.0;
                double t49343 = 1.0/t49342;
                double t49344 = 1.0/pow(t49316,4.0/3.0);
                double t49353 = 1.0/pow(t49316,5.0/3.0);
                double t49355 = b4f*t49323*t49353*(2.0/3.0);
                double t49356 = b2f*c*t49344*(1.0/3.0);
                double t49357 = b1f*c*t49330*t49344*(1.0/6.0);
                double t49358 = b3f*c*t49344*t49319*(1.0/2.0);
                double t49345 = t49355+t49356+t49357+t49358;
                double t49346 = a1p*c*t49317;
                double t49347 = t49346+1.0;
                double t49348 = 1.0/c0p;
                double t49349 = 1.0/t49335;
                double t49350 = t49348*t49349*(1.0/2.0);
                double t49351 = t49350+1.0;
                double t49352 = 1.0/t49351;
                double t49360 = b4p*t49323*t49353*(2.0/3.0);
                double t49361 = b2p*c*t49344*(1.0/3.0);
                double t49362 = b1p*c*t49330*t49344*(1.0/6.0);
                double t49363 = b3p*c*t49344*t49319*(1.0/2.0);
                double t49354 = t49360+t49361+t49362+t49363;
                double t49359 = t49345*t49345;
                double t49364 = t49354*t49354;
                double t49365 = 1.0/(t49327*t49327);
                double t49366 = 1.0/(t49335*t49335);
                double t49367 = b4p*t49323*t49329*(1.0E1/9.0);
                double t49368 = b2p*c*t49328*(4.0/9.0);
                double t49369 = b1p*c*t49330*t49328*(2.0/9.0);
                double t49370 = b3p*c*t49319*t49328*(2.0/3.0);
                double t49371 = b3p*t49330*t49323*t49329*(1.0/1.2E1);
                double t49372 = t49370+t49371+t49367+t49368+t49369-b1p*t49323*t49336*t49329*(1.0/3.6E1);
                double t49373 = t49352*t49372*t49347*t49366;
                double t49374 = 1.0/(t49335*t49335*t49335);
                double t49375 = 1.0/(t49351*t49351);
                double t49376 = 1.0/(t49335*t49335*t49335*t49335);
                double t49377 = t49364*t49347*t49348*t49375*t49376*(1.0/2.0);
                double t49378 = log(t49351);
                double t49379 = a1p*c*t49352*t49344*t49354*t49366*(2.0/3.0);
                double t49380 = pow(2.0,1.0/3.0);
                double t49381 = t49380*2.0;
                double t49382 = t49381-2.0;
                double t49383 = two_13*2.0;
                double t49384 = t49383-2.0;
                double t49385 = 1.0/t49384;
                double t49386 = log(t49342);
                v_rho_a_rho_a[Q] += scale * t49316*(t49373+t49377+t49379-t49382*t49385*(t49373+t49377+t49379-t49352*t49364*t49347*t49374*2.0+t49343*1.0/(t49327*t49327*t49327)*t49338*t49359*2.0-t49343*t49338*t49365*(b2f*c*t49328*(4.0/9.0)+b4f*t49323*t49329*(1.0E1/9.0)+b1f*c*t49330*t49328*(2.0/9.0)+b3f*c*t49319*t49328*(2.0/3.0)-b1f*t49323*t49336*t49329*(1.0/3.6E1)+b3f*t49330*t49323*t49329*(1.0/1.2E1))-1.0/(t49342*t49342)*1.0/(t49327*t49327*t49327*t49327)*t49338*t49339*t49359*(1.0/2.0)+a1f*c*c0f*t49328*t49386*(8.0/9.0)-a1p*c*c0p*t49328*t49378*(8.0/9.0)-a1f*c*t49343*t49344*t49345*t49365*(2.0/3.0))-t49352*t49364*t49347*t49374*2.0-a1p*c*c0p*t49328*t49378*(8.0/9.0))-t49382*t49385*(t49343*t49345*t49338*t49365-t49352*t49354*t49347*t49366-a1f*c*c0f*t49344*t49386*(2.0/3.0)+a1p*c*c0p*t49344*t49378*(2.0/3.0))*2.0-t49352*t49354*t49347*t49366*2.0+a1p*c*c0p*t49344*t49378*(4.0/3.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t49388 = rho_a+rho_b;
                double t49389 = 1.0/pow(t49388,1.0/3.0);
                double t49390 = c*t49389;
                double t49391 = sqrt(t49390);
                double t49392 = b1f*t49391;
                double t49393 = pow(t49390,3.0/2.0);
                double t49394 = b3f*t49393;
                double t49395 = c*c;
                double t49396 = 1.0/pow(t49388,2.0/3.0);
                double t49397 = b4f*t49395*t49396;
                double t49398 = b2f*c*t49389;
                double t49399 = t49392+t49394+t49397+t49398;
                double t49400 = 1.0/pow(t49388,7.0/3.0);
                double t49401 = 1.0/pow(t49388,8.0/3.0);
                double t49402 = 1.0/sqrt(t49390);
                double t49403 = b1p*t49391;
                double t49404 = b3p*t49393;
                double t49405 = b4p*t49395*t49396;
                double t49406 = b2p*c*t49389;
                double t49407 = t49403+t49404+t49405+t49406;
                double t49408 = 1.0/pow(t49390,3.0/2.0);
                double t49409 = a1f*c*t49389;
                double t49410 = t49409+1.0;
                double t49411 = 1.0/c0f;
                double t49412 = 1.0/t49399;
                double t49413 = t49411*t49412*(1.0/2.0);
                double t49414 = t49413+1.0;
                double t49415 = 1.0/t49414;
                double t49416 = 1.0/pow(t49388,4.0/3.0);
                double t49425 = 1.0/pow(t49388,5.0/3.0);
                double t49427 = b4f*t49425*t49395*(2.0/3.0);
                double t49428 = b2f*c*t49416*(1.0/3.0);
                double t49429 = b1f*c*t49402*t49416*(1.0/6.0);
                double t49430 = b3f*c*t49416*t49391*(1.0/2.0);
                double t49417 = t49430+t49427+t49428+t49429;
                double t49418 = a1p*c*t49389;
                double t49419 = t49418+1.0;
                double t49420 = 1.0/c0p;
                double t49421 = 1.0/t49407;
                double t49422 = t49420*t49421*(1.0/2.0);
                double t49423 = t49422+1.0;
                double t49424 = 1.0/t49423;
                double t49432 = b4p*t49425*t49395*(2.0/3.0);
                double t49433 = b2p*c*t49416*(1.0/3.0);
                double t49434 = b1p*c*t49402*t49416*(1.0/6.0);
                double t49435 = b3p*c*t49416*t49391*(1.0/2.0);
                double t49426 = t49432+t49433+t49434+t49435;
                double t49431 = t49417*t49417;
                double t49436 = t49426*t49426;
                double t49437 = 1.0/(t49399*t49399);
                double t49438 = 1.0/(t49407*t49407);
                double t49439 = b4p*t49401*t49395*(1.0E1/9.0);
                double t49440 = b2p*c*t49400*(4.0/9.0);
                double t49441 = b1p*c*t49400*t49402*(2.0/9.0);
                double t49442 = b3p*c*t49400*t49391*(2.0/3.0);
                double t49443 = b3p*t49401*t49402*t49395*(1.0/1.2E1);
                double t49444 = t49440+t49441+t49442+t49443+t49439-b1p*t49401*t49408*t49395*(1.0/3.6E1);
                double t49445 = t49424*t49444*t49419*t49438;
                double t49446 = 1.0/(t49407*t49407*t49407);
                double t49447 = 1.0/(t49423*t49423);
                double t49448 = 1.0/(t49407*t49407*t49407*t49407);
                double t49449 = t49420*t49436*t49419*t49447*t49448*(1.0/2.0);
                double t49450 = log(t49423);
                double t49451 = a1p*c*t49424*t49416*t49426*t49438*(2.0/3.0);
                double t49452 = pow(2.0,1.0/3.0);
                double t49453 = t49452*2.0;
                double t49454 = t49453-2.0;
                double t49455 = two_13*2.0;
                double t49456 = t49455-2.0;
                double t49457 = 1.0/t49456;
                double t49458 = log(t49414);
                v_rho_a_rho_b[Q] += scale * t49388*(t49451+t49445+t49449-t49454*t49457*(t49451+t49445+t49449-t49424*t49436*t49419*t49446*2.0+t49410*t49431*t49415*1.0/(t49399*t49399*t49399)*2.0-t49410*t49415*t49437*(b2f*c*t49400*(4.0/9.0)+b4f*t49401*t49395*(1.0E1/9.0)+b1f*c*t49400*t49402*(2.0/9.0)+b3f*c*t49400*t49391*(2.0/3.0)-b1f*t49401*t49408*t49395*(1.0/3.6E1)+b3f*t49401*t49402*t49395*(1.0/1.2E1))-t49410*t49411*t49431*1.0/(t49414*t49414)*1.0/(t49399*t49399*t49399*t49399)*(1.0/2.0)+a1f*c*c0f*t49400*t49458*(8.0/9.0)-a1p*c*c0p*t49400*t49450*(8.0/9.0)-a1f*c*t49415*t49416*t49417*t49437*(2.0/3.0))-t49424*t49436*t49419*t49446*2.0-a1p*c*c0p*t49400*t49450*(8.0/9.0))-t49454*t49457*(t49410*t49415*t49417*t49437-t49424*t49426*t49419*t49438-a1f*c*c0f*t49416*t49458*(2.0/3.0)+a1p*c*c0p*t49450*t49416*(2.0/3.0))*2.0-t49424*t49426*t49419*t49438*2.0+a1p*c*c0p*t49450*t49416*(4.0/3.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t49460 = rho_a+rho_b;
                double t49461 = 1.0/pow(t49460,1.0/3.0);
                double t49462 = c*t49461;
                double t49463 = sqrt(t49462);
                double t49464 = b1f*t49463;
                double t49465 = pow(t49462,3.0/2.0);
                double t49466 = b3f*t49465;
                double t49467 = c*c;
                double t49468 = 1.0/pow(t49460,2.0/3.0);
                double t49469 = b4f*t49467*t49468;
                double t49470 = b2f*c*t49461;
                double t49471 = t49470+t49464+t49466+t49469;
                double t49472 = 1.0/pow(t49460,7.0/3.0);
                double t49473 = 1.0/pow(t49460,8.0/3.0);
                double t49474 = 1.0/sqrt(t49462);
                double t49475 = b1p*t49463;
                double t49476 = b3p*t49465;
                double t49477 = b4p*t49467*t49468;
                double t49478 = b2p*c*t49461;
                double t49479 = t49475+t49476+t49477+t49478;
                double t49480 = 1.0/pow(t49462,3.0/2.0);
                double t49481 = a1f*c*t49461;
                double t49482 = t49481+1.0;
                double t49483 = 1.0/c0f;
                double t49484 = 1.0/t49471;
                double t49485 = t49483*t49484*(1.0/2.0);
                double t49486 = t49485+1.0;
                double t49487 = 1.0/t49486;
                double t49488 = 1.0/pow(t49460,4.0/3.0);
                double t49497 = 1.0/pow(t49460,5.0/3.0);
                double t49499 = b4f*t49467*t49497*(2.0/3.0);
                double t49500 = b2f*c*t49488*(1.0/3.0);
                double t49501 = b1f*c*t49474*t49488*(1.0/6.0);
                double t49502 = b3f*c*t49463*t49488*(1.0/2.0);
                double t49489 = t49500+t49501+t49502+t49499;
                double t49490 = a1p*c*t49461;
                double t49491 = t49490+1.0;
                double t49492 = 1.0/c0p;
                double t49493 = 1.0/t49479;
                double t49494 = t49492*t49493*(1.0/2.0);
                double t49495 = t49494+1.0;
                double t49496 = 1.0/t49495;
                double t49504 = b4p*t49467*t49497*(2.0/3.0);
                double t49505 = b2p*c*t49488*(1.0/3.0);
                double t49506 = b1p*c*t49474*t49488*(1.0/6.0);
                double t49507 = b3p*c*t49463*t49488*(1.0/2.0);
                double t49498 = t49504+t49505+t49506+t49507;
                double t49503 = t49489*t49489;
                double t49508 = t49498*t49498;
                double t49509 = 1.0/(t49471*t49471);
                double t49510 = 1.0/(t49479*t49479);
                double t49511 = b4p*t49473*t49467*(1.0E1/9.0);
                double t49512 = b2p*c*t49472*(4.0/9.0);
                double t49513 = b1p*c*t49472*t49474*(2.0/9.0);
                double t49514 = b3p*c*t49463*t49472*(2.0/3.0);
                double t49515 = b3p*t49473*t49474*t49467*(1.0/1.2E1);
                double t49516 = t49511+t49512+t49513+t49514+t49515-b1p*t49480*t49473*t49467*(1.0/3.6E1);
                double t49517 = t49510*t49516*t49491*t49496;
                double t49518 = 1.0/(t49479*t49479*t49479);
                double t49519 = 1.0/(t49495*t49495);
                double t49520 = 1.0/(t49479*t49479*t49479*t49479);
                double t49521 = t49520*t49508*t49491*t49492*t49519*(1.0/2.0);
                double t49522 = log(t49495);
                double t49523 = a1p*c*t49510*t49496*t49488*t49498*(2.0/3.0);
                double t49524 = pow(2.0,1.0/3.0);
                double t49525 = t49524*2.0;
                double t49526 = t49525-2.0;
                double t49527 = two_13*2.0;
                double t49528 = t49527-2.0;
                double t49529 = 1.0/t49528;
                double t49530 = log(t49486);
                v_rho_b_rho_b[Q] += scale * t49460*(t49521+t49523+t49517-t49526*t49529*(t49521+t49523+t49517-t49508*t49491*t49518*t49496*2.0+t49503*1.0/(t49471*t49471*t49471)*t49482*t49487*2.0-t49482*t49509*t49487*(b2f*c*t49472*(4.0/9.0)+b4f*t49473*t49467*(1.0E1/9.0)+b1f*c*t49472*t49474*(2.0/9.0)+b3f*c*t49463*t49472*(2.0/3.0)-b1f*t49480*t49473*t49467*(1.0/3.6E1)+b3f*t49473*t49474*t49467*(1.0/1.2E1))-t49503*1.0/(t49471*t49471*t49471*t49471)*t49482*t49483*1.0/(t49486*t49486)*(1.0/2.0)+a1f*c*c0f*t49530*t49472*(8.0/9.0)-a1p*c*c0p*t49522*t49472*(8.0/9.0)-a1f*c*t49509*t49487*t49488*t49489*(2.0/3.0))-t49508*t49491*t49518*t49496*2.0-a1p*c*c0p*t49522*t49472*(8.0/9.0))+t49526*t49529*(t49510*t49491*t49496*t49498-t49482*t49509*t49487*t49489+a1f*c*c0f*t49530*t49488*(2.0/3.0)-a1p*c*c0p*t49522*t49488*(2.0/3.0))*2.0-t49510*t49491*t49496*t49498*2.0+a1p*c*c0p*t49522*t49488*(4.0/3.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t49557 = rho_a+rho_b;
                double t49558 = 1.0/pow(t49557,1.0/3.0);
                double t49559 = c*t49558;
                double t49560 = sqrt(t49559);
                double t49561 = pow(t49559,3.0/2.0);
                double t49562 = c*c;
                double t49563 = 1.0/pow(t49557,2.0/3.0);
                double t49564 = 1.0/c0p;
                double t49565 = b1p*t49560;
                double t49566 = b3p*t49561;
                double t49567 = b4p*t49562*t49563;
                double t49568 = b2p*c*t49558;
                double t49569 = t49565+t49566+t49567+t49568;
                double t49570 = 1.0/t49569;
                double t49571 = t49570*t49564*(1.0/2.0);
                double t49572 = t49571+1.0;
                double t49573 = log(t49572);
                double t49574 = a1p*c*t49558;
                double t49575 = t49574+1.0;
                double t49576 = c0p*t49573*t49575*2.0;
                v[Q] += scale * -t49557*(t49576-((pow(2.0,1.0/3.0)*2.0-2.0)*(t49576-c0f*log((1.0/2.0)/(c0f*(b1f*t49560+b3f*t49561+b2f*c*t49558+b4f*t49562*t49563))+1.0)*(a1f*c*t49558+1.0)*2.0))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t49578 = rho_a+rho_b;
                double t49579 = 1.0/pow(t49578,1.0/3.0);
                double t49580 = c*t49579;
                double t49581 = sqrt(t49580);
                double t49582 = b1f*t49581;
                double t49583 = pow(t49580,3.0/2.0);
                double t49584 = b3f*t49583;
                double t49585 = c*c;
                double t49586 = 1.0/pow(t49578,2.0/3.0);
                double t49587 = b4f*t49585*t49586;
                double t49588 = b2f*c*t49579;
                double t49589 = t49582+t49584+t49587+t49588;
                double t49590 = 1.0/pow(t49578,4.0/3.0);
                double t49591 = b1p*t49581;
                double t49592 = b3p*t49583;
                double t49593 = b4p*t49585*t49586;
                double t49594 = b2p*c*t49579;
                double t49595 = t49591+t49592+t49593+t49594;
                double t49596 = 1.0/pow(t49578,5.0/3.0);
                double t49597 = 1.0/sqrt(t49580);
                double t49598 = 1.0/c0f;
                double t49599 = 1.0/t49589;
                double t49600 = t49598*t49599*(1.0/2.0);
                double t49601 = t49600+1.0;
                double t49602 = 1.0/c0p;
                double t49603 = 1.0/t49595;
                double t49604 = t49602*t49603*(1.0/2.0);
                double t49605 = t49604+1.0;
                double t49606 = a1p*c*t49579;
                double t49607 = t49606+1.0;
                double t49608 = 1.0/t49605;
                double t49609 = 1.0/(t49595*t49595);
                double t49610 = b4p*t49585*t49596*(2.0/3.0);
                double t49611 = b2p*c*t49590*(1.0/3.0);
                double t49612 = b1p*c*t49590*t49597*(1.0/6.0);
                double t49613 = b3p*c*t49581*t49590*(1.0/2.0);
                double t49614 = t49610+t49611+t49612+t49613;
                double t49615 = t49614*t49607*t49608*t49609;
                double t49616 = log(t49605);
                double t49617 = pow(2.0,1.0/3.0);
                double t49618 = t49617*2.0;
                double t49619 = t49618-2.0;
                double t49620 = two_13*2.0;
                double t49621 = t49620-2.0;
                double t49622 = 1.0/t49621;
                double t49623 = log(t49601);
                double t49624 = a1f*c*t49579;
                double t49625 = t49624+1.0;
                v_rho_a[Q] += scale * t49578*(-t49615+t49622*t49619*(t49615-(t49625*1.0/(t49589*t49589)*(b2f*c*t49590*(1.0/3.0)+b4f*t49585*t49596*(2.0/3.0)+b1f*c*t49590*t49597*(1.0/6.0)+b3f*c*t49581*t49590*(1.0/2.0)))/t49601+a1f*c*c0f*t49623*t49590*(2.0/3.0)-a1p*c*c0p*t49616*t49590*(2.0/3.0))+a1p*c*c0p*t49616*t49590*(2.0/3.0))-c0p*t49607*t49616*2.0-t49622*t49619*(c0f*t49623*t49625*2.0-c0p*t49607*t49616*2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t49627 = rho_a+rho_b;
                double t49628 = 1.0/pow(t49627,1.0/3.0);
                double t49629 = c*t49628;
                double t49630 = sqrt(t49629);
                double t49631 = b1f*t49630;
                double t49632 = pow(t49629,3.0/2.0);
                double t49633 = b3f*t49632;
                double t49634 = c*c;
                double t49635 = 1.0/pow(t49627,2.0/3.0);
                double t49636 = b4f*t49634*t49635;
                double t49637 = b2f*c*t49628;
                double t49638 = t49631+t49633+t49636+t49637;
                double t49639 = 1.0/pow(t49627,4.0/3.0);
                double t49640 = b1p*t49630;
                double t49641 = b3p*t49632;
                double t49642 = b4p*t49634*t49635;
                double t49643 = b2p*c*t49628;
                double t49644 = t49640+t49641+t49642+t49643;
                double t49645 = 1.0/pow(t49627,5.0/3.0);
                double t49646 = 1.0/sqrt(t49629);
                double t49647 = 1.0/c0f;
                double t49648 = 1.0/t49638;
                double t49649 = t49647*t49648*(1.0/2.0);
                double t49650 = t49649+1.0;
                double t49651 = 1.0/c0p;
                double t49652 = 1.0/t49644;
                double t49653 = t49651*t49652*(1.0/2.0);
                double t49654 = t49653+1.0;
                double t49655 = a1p*c*t49628;
                double t49656 = t49655+1.0;
                double t49657 = 1.0/t49654;
                double t49658 = 1.0/(t49644*t49644);
                double t49659 = b4p*t49634*t49645*(2.0/3.0);
                double t49660 = b2p*c*t49639*(1.0/3.0);
                double t49661 = b1p*c*t49646*t49639*(1.0/6.0);
                double t49662 = b3p*c*t49630*t49639*(1.0/2.0);
                double t49663 = t49660+t49661+t49662+t49659;
                double t49664 = t49663*t49656*t49657*t49658;
                double t49665 = log(t49654);
                double t49666 = pow(2.0,1.0/3.0);
                double t49667 = t49666*2.0;
                double t49668 = t49667-2.0;
                double t49669 = two_13*2.0;
                double t49670 = t49669-2.0;
                double t49671 = 1.0/t49670;
                double t49672 = log(t49650);
                double t49673 = a1f*c*t49628;
                double t49674 = t49673+1.0;
                v_rho_b[Q] += scale * t49627*(-t49664+t49671*t49668*(t49664-(1.0/(t49638*t49638)*t49674*(b2f*c*t49639*(1.0/3.0)+b4f*t49634*t49645*(2.0/3.0)+b1f*c*t49646*t49639*(1.0/6.0)+b3f*c*t49630*t49639*(1.0/2.0)))/t49650+a1f*c*c0f*t49672*t49639*(2.0/3.0)-a1p*c*c0p*t49665*t49639*(2.0/3.0))+a1p*c*c0p*t49665*t49639*(2.0/3.0))-c0p*t49656*t49665*2.0-t49671*t49668*(c0f*t49672*t49674*2.0-c0p*t49656*t49665*2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t49681 = rho_a+rho_b;
                double t49682 = 1.0/pow(t49681,1.0/3.0);
                double t49683 = c*t49682;
                double t49684 = sqrt(t49683);
                double t49685 = b1f*t49684;
                double t49686 = pow(t49683,3.0/2.0);
                double t49687 = b3f*t49686;
                double t49688 = c*c;
                double t49689 = 1.0/pow(t49681,2.0/3.0);
                double t49690 = b4f*t49688*t49689;
                double t49691 = b2f*c*t49682;
                double t49692 = t49690+t49691+t49685+t49687;
                double t49693 = 1.0/pow(t49681,7.0/3.0);
                double t49694 = 1.0/pow(t49681,8.0/3.0);
                double t49695 = 1.0/sqrt(t49683);
                double t49696 = b1p*t49684;
                double t49697 = b3p*t49686;
                double t49698 = b4p*t49688*t49689;
                double t49699 = b2p*c*t49682;
                double t49700 = t49696+t49697+t49698+t49699;
                double t49701 = 1.0/pow(t49683,3.0/2.0);
                double t49702 = a1f*c*t49682;
                double t49703 = t49702+1.0;
                double t49704 = 1.0/c0f;
                double t49705 = 1.0/t49692;
                double t49706 = t49704*t49705*(1.0/2.0);
                double t49707 = t49706+1.0;
                double t49708 = 1.0/t49707;
                double t49709 = 1.0/pow(t49681,4.0/3.0);
                double t49718 = 1.0/pow(t49681,5.0/3.0);
                double t49720 = b4f*t49718*t49688*(2.0/3.0);
                double t49721 = b2f*c*t49709*(1.0/3.0);
                double t49722 = b1f*c*t49709*t49695*(1.0/6.0);
                double t49723 = b3f*c*t49709*t49684*(1.0/2.0);
                double t49710 = t49720+t49721+t49722+t49723;
                double t49711 = a1p*c*t49682;
                double t49712 = t49711+1.0;
                double t49713 = 1.0/c0p;
                double t49714 = 1.0/t49700;
                double t49715 = t49713*t49714*(1.0/2.0);
                double t49716 = t49715+1.0;
                double t49717 = 1.0/t49716;
                double t49725 = b4p*t49718*t49688*(2.0/3.0);
                double t49726 = b2p*c*t49709*(1.0/3.0);
                double t49727 = b1p*c*t49709*t49695*(1.0/6.0);
                double t49728 = b3p*c*t49709*t49684*(1.0/2.0);
                double t49719 = t49725+t49726+t49727+t49728;
                double t49724 = t49710*t49710;
                double t49729 = t49719*t49719;
                double t49730 = 1.0/(t49692*t49692);
                double t49731 = 1.0/(t49700*t49700);
                double t49732 = b4p*t49694*t49688*(1.0E1/9.0);
                double t49733 = b2p*c*t49693*(4.0/9.0);
                double t49734 = b1p*c*t49693*t49695*(2.0/9.0);
                double t49735 = b3p*c*t49684*t49693*(2.0/3.0);
                double t49736 = b3p*t49694*t49695*t49688*(1.0/1.2E1);
                double t49737 = t49732+t49733+t49734+t49735+t49736-b1p*t49701*t49694*t49688*(1.0/3.6E1);
                double t49738 = t49712*t49731*t49717*t49737;
                double t49739 = 1.0/(t49700*t49700*t49700);
                double t49740 = 1.0/(t49716*t49716);
                double t49741 = 1.0/(t49700*t49700*t49700*t49700);
                double t49742 = t49712*t49713*t49740*t49741*t49729*(1.0/2.0);
                double t49743 = log(t49716);
                double t49744 = a1p*c*t49731*t49717*t49709*t49719*(2.0/3.0);
                double t49745 = pow(2.0,1.0/3.0);
                double t49746 = t49745*2.0;
                double t49747 = t49746-2.0;
                double t49748 = two_13*2.0;
                double t49749 = t49748-2.0;
                double t49750 = 1.0/t49749;
                double t49751 = log(t49707);
                v_rho_a_rho_a[Q] += scale * t49681*(t49742+t49744+t49738-t49750*t49747*(t49742+t49744+t49738-t49712*t49717*t49729*t49739*2.0+t49703*t49724*t49708*1.0/(t49692*t49692*t49692)*2.0-t49703*t49730*t49708*(b2f*c*t49693*(4.0/9.0)+b4f*t49694*t49688*(1.0E1/9.0)+b1f*c*t49693*t49695*(2.0/9.0)+b3f*c*t49684*t49693*(2.0/3.0)-b1f*t49701*t49694*t49688*(1.0/3.6E1)+b3f*t49694*t49695*t49688*(1.0/1.2E1))-t49703*t49704*t49724*1.0/(t49707*t49707)*1.0/(t49692*t49692*t49692*t49692)*(1.0/2.0)+a1f*c*c0f*t49751*t49693*(8.0/9.0)-a1p*c*c0p*t49743*t49693*(8.0/9.0)-a1f*c*t49710*t49730*t49708*t49709*(2.0/3.0))-t49712*t49717*t49729*t49739*2.0-a1p*c*c0p*t49743*t49693*(8.0/9.0))-t49750*t49747*(t49710*t49703*t49730*t49708-t49712*t49731*t49717*t49719-a1f*c*c0f*t49751*t49709*(2.0/3.0)+a1p*c*c0p*t49743*t49709*(2.0/3.0))*2.0-t49712*t49731*t49717*t49719*2.0+a1p*c*c0p*t49743*t49709*(4.0/3.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t49753 = rho_a+rho_b;
                double t49754 = 1.0/pow(t49753,1.0/3.0);
                double t49755 = c*t49754;
                double t49756 = sqrt(t49755);
                double t49757 = b1f*t49756;
                double t49758 = pow(t49755,3.0/2.0);
                double t49759 = b3f*t49758;
                double t49760 = c*c;
                double t49761 = 1.0/pow(t49753,2.0/3.0);
                double t49762 = b4f*t49760*t49761;
                double t49763 = b2f*c*t49754;
                double t49764 = t49762+t49763+t49757+t49759;
                double t49765 = 1.0/pow(t49753,7.0/3.0);
                double t49766 = 1.0/pow(t49753,8.0/3.0);
                double t49767 = 1.0/sqrt(t49755);
                double t49768 = b1p*t49756;
                double t49769 = b3p*t49758;
                double t49770 = b4p*t49760*t49761;
                double t49771 = b2p*c*t49754;
                double t49772 = t49770+t49771+t49768+t49769;
                double t49773 = 1.0/pow(t49755,3.0/2.0);
                double t49774 = a1f*c*t49754;
                double t49775 = t49774+1.0;
                double t49776 = 1.0/c0f;
                double t49777 = 1.0/t49764;
                double t49778 = t49776*t49777*(1.0/2.0);
                double t49779 = t49778+1.0;
                double t49780 = 1.0/t49779;
                double t49781 = 1.0/pow(t49753,4.0/3.0);
                double t49790 = 1.0/pow(t49753,5.0/3.0);
                double t49792 = b4f*t49760*t49790*(2.0/3.0);
                double t49793 = b2f*c*t49781*(1.0/3.0);
                double t49794 = b1f*c*t49781*t49767*(1.0/6.0);
                double t49795 = b3f*c*t49781*t49756*(1.0/2.0);
                double t49782 = t49792+t49793+t49794+t49795;
                double t49783 = a1p*c*t49754;
                double t49784 = t49783+1.0;
                double t49785 = 1.0/c0p;
                double t49786 = 1.0/t49772;
                double t49787 = t49785*t49786*(1.0/2.0);
                double t49788 = t49787+1.0;
                double t49789 = 1.0/t49788;
                double t49797 = b4p*t49760*t49790*(2.0/3.0);
                double t49798 = b2p*c*t49781*(1.0/3.0);
                double t49799 = b1p*c*t49781*t49767*(1.0/6.0);
                double t49800 = b3p*c*t49781*t49756*(1.0/2.0);
                double t49791 = t49800+t49797+t49798+t49799;
                double t49796 = t49782*t49782;
                double t49801 = t49791*t49791;
                double t49802 = 1.0/(t49764*t49764);
                double t49803 = 1.0/(t49772*t49772);
                double t49804 = b4p*t49760*t49766*(1.0E1/9.0);
                double t49805 = b2p*c*t49765*(4.0/9.0);
                double t49806 = b1p*c*t49765*t49767*(2.0/9.0);
                double t49807 = b3p*c*t49756*t49765*(2.0/3.0);
                double t49808 = b3p*t49760*t49766*t49767*(1.0/1.2E1);
                double t49809 = t49804+t49805+t49806+t49807+t49808-b1p*t49760*t49773*t49766*(1.0/3.6E1);
                double t49810 = t49803*t49809*t49784*t49789;
                double t49811 = 1.0/(t49772*t49772*t49772);
                double t49812 = 1.0/(t49788*t49788);
                double t49813 = 1.0/(t49772*t49772*t49772*t49772);
                double t49814 = t49801*t49812*t49813*t49784*t49785*(1.0/2.0);
                double t49815 = log(t49788);
                double t49816 = a1p*c*t49803*t49781*t49791*t49789*(2.0/3.0);
                double t49817 = pow(2.0,1.0/3.0);
                double t49818 = t49817*2.0;
                double t49819 = t49818-2.0;
                double t49820 = two_13*2.0;
                double t49821 = t49820-2.0;
                double t49822 = 1.0/t49821;
                double t49823 = log(t49779);
                v_rho_a_rho_b[Q] += scale * t49753*(t49810+t49814+t49816-t49822*t49819*(t49810+t49814+t49816-t49801*t49811*t49784*t49789*2.0+t49780*1.0/(t49764*t49764*t49764)*t49775*t49796*2.0-t49802*t49780*t49775*(b2f*c*t49765*(4.0/9.0)+b4f*t49760*t49766*(1.0E1/9.0)+b1f*c*t49765*t49767*(2.0/9.0)+b3f*c*t49756*t49765*(2.0/3.0)-b1f*t49760*t49773*t49766*(1.0/3.6E1)+b3f*t49760*t49766*t49767*(1.0/1.2E1))-1.0/(t49764*t49764*t49764*t49764)*t49775*t49776*t49796*1.0/(t49779*t49779)*(1.0/2.0)+a1f*c*c0f*t49823*t49765*(8.0/9.0)-a1p*c*c0p*t49815*t49765*(8.0/9.0)-a1f*c*t49802*t49780*t49781*t49782*(2.0/3.0))-t49801*t49811*t49784*t49789*2.0-a1p*c*c0p*t49815*t49765*(8.0/9.0))-t49822*t49819*(t49802*t49780*t49782*t49775-t49803*t49791*t49784*t49789-a1f*c*c0f*t49823*t49781*(2.0/3.0)+a1p*c*c0p*t49815*t49781*(2.0/3.0))*2.0-t49803*t49791*t49784*t49789*2.0+a1p*c*c0p*t49815*t49781*(4.0/3.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t49825 = rho_a+rho_b;
                double t49826 = 1.0/pow(t49825,1.0/3.0);
                double t49827 = c*t49826;
                double t49828 = sqrt(t49827);
                double t49829 = b1f*t49828;
                double t49830 = pow(t49827,3.0/2.0);
                double t49831 = b3f*t49830;
                double t49832 = c*c;
                double t49833 = 1.0/pow(t49825,2.0/3.0);
                double t49834 = b4f*t49832*t49833;
                double t49835 = b2f*c*t49826;
                double t49836 = t49831+t49834+t49835+t49829;
                double t49837 = 1.0/pow(t49825,7.0/3.0);
                double t49838 = 1.0/pow(t49825,8.0/3.0);
                double t49839 = 1.0/sqrt(t49827);
                double t49840 = b1p*t49828;
                double t49841 = b3p*t49830;
                double t49842 = b4p*t49832*t49833;
                double t49843 = b2p*c*t49826;
                double t49844 = t49840+t49841+t49842+t49843;
                double t49845 = 1.0/pow(t49827,3.0/2.0);
                double t49846 = a1f*c*t49826;
                double t49847 = t49846+1.0;
                double t49848 = 1.0/c0f;
                double t49849 = 1.0/t49836;
                double t49850 = t49848*t49849*(1.0/2.0);
                double t49851 = t49850+1.0;
                double t49852 = 1.0/t49851;
                double t49853 = 1.0/pow(t49825,4.0/3.0);
                double t49862 = 1.0/pow(t49825,5.0/3.0);
                double t49864 = b4f*t49832*t49862*(2.0/3.0);
                double t49865 = b2f*c*t49853*(1.0/3.0);
                double t49866 = b1f*c*t49853*t49839*(1.0/6.0);
                double t49867 = b3f*c*t49853*t49828*(1.0/2.0);
                double t49854 = t49864+t49865+t49866+t49867;
                double t49855 = a1p*c*t49826;
                double t49856 = t49855+1.0;
                double t49857 = 1.0/c0p;
                double t49858 = 1.0/t49844;
                double t49859 = t49857*t49858*(1.0/2.0);
                double t49860 = t49859+1.0;
                double t49861 = 1.0/t49860;
                double t49869 = b4p*t49832*t49862*(2.0/3.0);
                double t49870 = b2p*c*t49853*(1.0/3.0);
                double t49871 = b1p*c*t49853*t49839*(1.0/6.0);
                double t49872 = b3p*c*t49853*t49828*(1.0/2.0);
                double t49863 = t49870+t49871+t49872+t49869;
                double t49868 = t49854*t49854;
                double t49873 = t49863*t49863;
                double t49874 = 1.0/(t49836*t49836);
                double t49875 = 1.0/(t49844*t49844);
                double t49876 = b4p*t49832*t49838*(1.0E1/9.0);
                double t49877 = b2p*c*t49837*(4.0/9.0);
                double t49878 = b1p*c*t49837*t49839*(2.0/9.0);
                double t49879 = b3p*c*t49828*t49837*(2.0/3.0);
                double t49880 = b3p*t49832*t49838*t49839*(1.0/1.2E1);
                double t49881 = t49880+t49876+t49877+t49878+t49879-b1p*t49832*t49845*t49838*(1.0/3.6E1);
                double t49882 = t49861*t49881*t49856*t49875;
                double t49883 = 1.0/(t49844*t49844*t49844);
                double t49884 = 1.0/(t49860*t49860);
                double t49885 = 1.0/(t49844*t49844*t49844*t49844);
                double t49886 = t49873*t49856*t49857*t49884*t49885*(1.0/2.0);
                double t49887 = log(t49860);
                double t49888 = a1p*c*t49861*t49853*t49863*t49875*(2.0/3.0);
                double t49889 = pow(2.0,1.0/3.0);
                double t49890 = t49889*2.0;
                double t49891 = t49890-2.0;
                double t49892 = two_13*2.0;
                double t49893 = t49892-2.0;
                double t49894 = 1.0/t49893;
                double t49895 = log(t49851);
                v_rho_b_rho_b[Q] += scale * t49825*(t49882+t49886+t49888-t49891*t49894*(t49882+t49886+t49888-t49861*t49873*t49856*t49883*2.0+t49852*1.0/(t49836*t49836*t49836)*t49847*t49868*2.0-t49852*t49847*t49874*(b2f*c*t49837*(4.0/9.0)+b4f*t49832*t49838*(1.0E1/9.0)+b1f*c*t49837*t49839*(2.0/9.0)+b3f*c*t49828*t49837*(2.0/3.0)-b1f*t49832*t49845*t49838*(1.0/3.6E1)+b3f*t49832*t49838*t49839*(1.0/1.2E1))-1.0/(t49851*t49851)*1.0/(t49836*t49836*t49836*t49836)*t49847*t49848*t49868*(1.0/2.0)+a1f*c*c0f*t49837*t49895*(8.0/9.0)-a1p*c*c0p*t49837*t49887*(8.0/9.0)-a1f*c*t49852*t49853*t49854*t49874*(2.0/3.0))-t49861*t49873*t49856*t49883*2.0-a1p*c*c0p*t49837*t49887*(8.0/9.0))-t49891*t49894*(t49852*t49854*t49847*t49874-t49861*t49863*t49856*t49875-a1f*c*c0f*t49853*t49895*(2.0/3.0)+a1p*c*c0p*t49853*t49887*(2.0/3.0))*2.0-t49861*t49863*t49856*t49875*2.0+a1p*c*c0p*t49853*t49887*(4.0/3.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t48554 = rho_a+rho_b;
                double t48555 = 1.0/pow(t48554,1.0/3.0);
                double t48556 = c*t48555;
                double t48557 = sqrt(t48556);
                double t48558 = pow(t48556,3.0/2.0);
                double t48559 = c*c;
                double t48560 = 1.0/pow(t48554,2.0/3.0);
                double t48561 = 1.0/c0p;
                double t48562 = b1p*t48557;
                double t48563 = b3p*t48558;
                double t48564 = b4p*t48560*t48559;
                double t48565 = b2p*c*t48555;
                double t48566 = t48562+t48563+t48564+t48565;
                double t48567 = 1.0/t48566;
                double t48568 = t48561*t48567*(1.0/2.0);
                double t48569 = t48568+1.0;
                double t48570 = log(t48569);
                double t48571 = a1p*c*t48555;
                double t48572 = t48571+1.0;
                double t48573 = c0p*t48570*t48572*2.0;
                double t48574 = rho_a-rho_b;
                double t48575 = t48574*t48574;
                double t48576 = 1.0/t48554;
                double t48577 = t48574*t48576;
                double t48578 = two_13*2.0;
                double t48579 = t48578-2.0;
                double t48580 = 1.0/t48579;
                double t48581 = 1.0/(t48554*t48554*t48554*t48554);
                double t48582 = t48575*t48575;
                double t48583 = t48577+1.0;
                double t48584 = pow(t48583,4.0/3.0);
                double t48585 = -t48577+1.0;
                double t48586 = pow(t48585,4.0/3.0);
                double t48587 = t48584+t48586-2.0;
                v[Q] += scale * -t48554*(t48573-t48580*t48581*t48582*t48587*(t48573-c0f*log((1.0/2.0)/(c0f*(b1f*t48557+b3f*t48558+b2f*c*t48555+b4f*t48560*t48559))+1.0)*(a1f*c*t48555+1.0)*2.0)+(Aa*t48580*t48587*log((1.0/2.0)/(Aa*(b1a*t48557+b3a*t48558+b2a*c*t48555+b4a*t48560*t48559))+1.0)*(t48581*t48582-1.0)*(a1a*c*t48555+1.0)*2.0)/d2fz0);
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t48589 = rho_a+rho_b;
                double t48590 = 1.0/pow(t48589,1.0/3.0);
                double t48591 = c*t48590;
                double t48592 = sqrt(t48591);
                double t48593 = b1p*t48592;
                double t48594 = pow(t48591,3.0/2.0);
                double t48595 = b3p*t48594;
                double t48596 = c*c;
                double t48597 = 1.0/pow(t48589,2.0/3.0);
                double t48598 = b4p*t48596*t48597;
                double t48599 = b2p*c*t48590;
                double t48600 = t48593+t48595+t48598+t48599;
                double t48601 = 1.0/pow(t48589,4.0/3.0);
                double t48602 = 1.0/c0p;
                double t48603 = 1.0/t48600;
                double t48604 = t48602*t48603*(1.0/2.0);
                double t48605 = t48604+1.0;
                double t48606 = a1p*c*t48590;
                double t48607 = t48606+1.0;
                double t48608 = rho_a-rho_b;
                double t48609 = t48608*t48608;
                double t48610 = 1.0/t48589;
                double t48611 = t48610*t48608;
                double t48612 = two_13*2.0;
                double t48613 = t48612-2.0;
                double t48614 = 1.0/t48613;
                double t48615 = 1.0/c0f;
                double t48616 = b1f*t48592;
                double t48617 = b3f*t48594;
                double t48618 = b4f*t48596*t48597;
                double t48619 = b2f*c*t48590;
                double t48620 = t48616+t48617+t48618+t48619;
                double t48621 = 1.0/t48620;
                double t48622 = t48621*t48615*(1.0/2.0);
                double t48623 = t48622+1.0;
                double t48624 = log(t48623);
                double t48625 = a1f*c*t48590;
                double t48626 = t48625+1.0;
                double t48627 = log(t48605);
                double t48637 = c0f*t48624*t48626*2.0;
                double t48638 = c0p*t48607*t48627*2.0;
                double t48628 = t48637-t48638;
                double t48629 = t48611+1.0;
                double t48630 = pow(t48629,4.0/3.0);
                double t48631 = -t48611+1.0;
                double t48632 = pow(t48631,4.0/3.0);
                double t48633 = t48630+t48632-2.0;
                double t48634 = 1.0/(t48589*t48589);
                double t48665 = t48634*t48608;
                double t48635 = t48610-t48665;
                double t48636 = 1.0/(t48589*t48589*t48589*t48589);
                double t48639 = t48609*t48609;
                double t48640 = 1.0/pow(t48589,5.0/3.0);
                double t48641 = 1.0/sqrt(t48591);
                double t48642 = 1.0/t48605;
                double t48643 = 1.0/(t48600*t48600);
                double t48644 = b4p*t48640*t48596*(2.0/3.0);
                double t48645 = b2p*c*t48601*(1.0/3.0);
                double t48646 = b1p*c*t48601*t48641*(1.0/6.0);
                double t48647 = b3p*c*t48601*t48592*(1.0/2.0);
                double t48648 = t48644+t48645+t48646+t48647;
                double t48649 = t48642*t48607*t48643*t48648;
                double t48650 = 1.0/(t48589*t48589*t48589*t48589*t48589);
                double t48651 = 1.0/d2fz0;
                double t48652 = 1.0/Aa;
                double t48653 = b1a*t48592;
                double t48654 = b3a*t48594;
                double t48655 = b4a*t48596*t48597;
                double t48656 = b2a*c*t48590;
                double t48657 = t48653+t48654+t48655+t48656;
                double t48658 = 1.0/t48657;
                double t48659 = t48652*t48658*(1.0/2.0);
                double t48660 = t48659+1.0;
                double t48661 = log(t48660);
                double t48662 = a1a*c*t48590;
                double t48663 = t48662+1.0;
                double t48664 = pow(t48629,1.0/3.0);
                double t48666 = t48635*t48664*(4.0/3.0);
                double t48667 = pow(t48631,1.0/3.0);
                double t48668 = t48666-t48635*t48667*(4.0/3.0);
                double t48669 = t48636*t48639;
                double t48670 = t48669-1.0;
                v_rho_a[Q] += scale * -t48638-t48589*(t48649-t48614*t48633*t48636*t48639*(t48649-(1.0/(t48620*t48620)*t48626*(b2f*c*t48601*(1.0/3.0)+b4f*t48640*t48596*(2.0/3.0)+b1f*c*t48601*t48641*(1.0/6.0)+b3f*c*t48601*t48592*(1.0/2.0)))/t48623+a1f*c*c0f*t48601*t48624*(2.0/3.0)-a1p*c*c0p*t48601*t48627*(2.0/3.0))-a1p*c*c0p*t48601*t48627*(2.0/3.0)-t48614*t48650*t48633*t48628*t48639*4.0+t48614*t48636*t48628*t48639*t48668+t48614*t48633*t48608*t48609*t48636*t48628*4.0-Aa*t48614*t48633*t48651*t48661*t48663*(t48650*t48639*4.0-t48608*t48609*t48636*4.0)*2.0+Aa*t48614*t48651*t48661*t48670*t48663*t48668*2.0+(t48614*t48633*t48651*t48670*t48663*1.0/(t48657*t48657)*(b2a*c*t48601*(1.0/3.0)+b4a*t48640*t48596*(2.0/3.0)+b1a*c*t48601*t48641*(1.0/6.0)+b3a*c*t48601*t48592*(1.0/2.0)))/t48660-Aa*a1a*c*t48601*t48614*t48633*t48651*t48661*t48670*(2.0/3.0))-t48614*t48633*t48636*t48628*t48639-Aa*t48614*t48633*t48651*t48661*t48670*t48663*2.0;
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t48672 = rho_a+rho_b;
                double t48673 = 1.0/pow(t48672,1.0/3.0);
                double t48674 = c*t48673;
                double t48675 = sqrt(t48674);
                double t48676 = b1p*t48675;
                double t48677 = pow(t48674,3.0/2.0);
                double t48678 = b3p*t48677;
                double t48679 = c*c;
                double t48680 = 1.0/pow(t48672,2.0/3.0);
                double t48681 = b4p*t48680*t48679;
                double t48682 = b2p*c*t48673;
                double t48683 = t48681+t48682+t48676+t48678;
                double t48684 = 1.0/pow(t48672,4.0/3.0);
                double t48685 = 1.0/c0p;
                double t48686 = 1.0/t48683;
                double t48687 = t48685*t48686*(1.0/2.0);
                double t48688 = t48687+1.0;
                double t48689 = a1p*c*t48673;
                double t48690 = t48689+1.0;
                double t48691 = rho_a-rho_b;
                double t48692 = t48691*t48691;
                double t48693 = 1.0/t48672;
                double t48694 = t48691*t48693;
                double t48695 = two_13*2.0;
                double t48696 = t48695-2.0;
                double t48697 = 1.0/t48696;
                double t48698 = 1.0/c0f;
                double t48699 = b1f*t48675;
                double t48700 = b3f*t48677;
                double t48701 = b4f*t48680*t48679;
                double t48702 = b2f*c*t48673;
                double t48703 = t48700+t48701+t48702+t48699;
                double t48704 = 1.0/t48703;
                double t48705 = t48704*t48698*(1.0/2.0);
                double t48706 = t48705+1.0;
                double t48707 = log(t48706);
                double t48708 = a1f*c*t48673;
                double t48709 = t48708+1.0;
                double t48710 = log(t48688);
                double t48721 = c0f*t48707*t48709*2.0;
                double t48722 = c0p*t48710*t48690*2.0;
                double t48711 = t48721-t48722;
                double t48712 = t48694+1.0;
                double t48713 = pow(t48712,4.0/3.0);
                double t48714 = -t48694+1.0;
                double t48715 = pow(t48714,4.0/3.0);
                double t48716 = t48713+t48715-2.0;
                double t48717 = 1.0/(t48672*t48672);
                double t48718 = t48717*t48691;
                double t48719 = t48718+t48693;
                double t48720 = 1.0/(t48672*t48672*t48672*t48672);
                double t48723 = t48692*t48692;
                double t48724 = 1.0/pow(t48672,5.0/3.0);
                double t48725 = 1.0/sqrt(t48674);
                double t48726 = 1.0/t48688;
                double t48727 = 1.0/(t48683*t48683);
                double t48728 = b4p*t48724*t48679*(2.0/3.0);
                double t48729 = b2p*c*t48684*(1.0/3.0);
                double t48730 = b1p*c*t48725*t48684*(1.0/6.0);
                double t48731 = b3p*c*t48675*t48684*(1.0/2.0);
                double t48732 = t48730+t48731+t48728+t48729;
                double t48733 = 1.0/(t48672*t48672*t48672*t48672*t48672);
                double t48734 = 1.0/d2fz0;
                double t48735 = 1.0/Aa;
                double t48736 = b1a*t48675;
                double t48737 = b3a*t48677;
                double t48738 = b4a*t48680*t48679;
                double t48739 = b2a*c*t48673;
                double t48740 = t48736+t48737+t48738+t48739;
                double t48741 = 1.0/t48740;
                double t48742 = t48741*t48735*(1.0/2.0);
                double t48743 = t48742+1.0;
                double t48744 = log(t48743);
                double t48745 = a1a*c*t48673;
                double t48746 = t48745+1.0;
                double t48747 = pow(t48712,1.0/3.0);
                double t48748 = t48719*t48747*(4.0/3.0);
                double t48749 = pow(t48714,1.0/3.0);
                double t48750 = t48748-t48719*t48749*(4.0/3.0);
                double t48751 = t48720*t48723;
                double t48752 = t48751-1.0;
                v_rho_b[Q] += scale * -t48722+t48672*(-t48732*t48690*t48726*t48727+a1p*c*c0p*t48710*t48684*(2.0/3.0)+t48711*t48720*t48723*t48750*t48697+t48711*t48723*t48733*t48716*t48697*4.0+t48720*t48723*t48716*t48697*(t48732*t48690*t48726*t48727-(1.0/(t48703*t48703)*t48709*(b2f*c*t48684*(1.0/3.0)+b4f*t48724*t48679*(2.0/3.0)+b1f*c*t48725*t48684*(1.0/6.0)+b3f*c*t48675*t48684*(1.0/2.0)))/t48706+a1f*c*c0f*t48707*t48684*(2.0/3.0)-a1p*c*c0p*t48710*t48684*(2.0/3.0))+t48711*t48720*t48716*t48691*t48692*t48697*4.0+Aa*t48716*t48734*t48744*t48746*t48697*(t48723*t48733*4.0+t48720*t48691*t48692*4.0)*2.0+Aa*t48750*t48734*t48752*t48744*t48746*t48697*2.0-(1.0/(t48740*t48740)*t48716*t48734*t48752*t48746*t48697*(b2a*c*t48684*(1.0/3.0)+b4a*t48724*t48679*(2.0/3.0)+b1a*c*t48725*t48684*(1.0/6.0)+b3a*c*t48675*t48684*(1.0/2.0)))/t48743+Aa*a1a*c*t48716*t48734*t48752*t48744*t48684*t48697*(2.0/3.0))-t48711*t48720*t48723*t48716*t48697-Aa*t48716*t48734*t48752*t48744*t48746*t48697*2.0;
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t48759 = rho_a+rho_b;
                double t48760 = 1.0/pow(t48759,1.0/3.0);
                double t48761 = c*t48760;
                double t48762 = sqrt(t48761);
                double t48763 = b1p*t48762;
                double t48764 = pow(t48761,3.0/2.0);
                double t48765 = b3p*t48764;
                double t48766 = c*c;
                double t48767 = 1.0/pow(t48759,2.0/3.0);
                double t48768 = b4p*t48766*t48767;
                double t48769 = b2p*c*t48760;
                double t48770 = t48763+t48765+t48768+t48769;
                double t48771 = 1.0/pow(t48759,7.0/3.0);
                double t48772 = 1.0/pow(t48759,8.0/3.0);
                double t48773 = 1.0/sqrt(t48761);
                double t48774 = a1p*c*t48760;
                double t48775 = t48774+1.0;
                double t48776 = 1.0/c0p;
                double t48777 = 1.0/t48770;
                double t48778 = t48776*t48777*(1.0/2.0);
                double t48779 = t48778+1.0;
                double t48780 = 1.0/t48779;
                double t48781 = 1.0/pow(t48759,4.0/3.0);
                double t48821 = 1.0/pow(t48759,5.0/3.0);
                double t48823 = b4p*t48821*t48766*(2.0/3.0);
                double t48824 = b2p*c*t48781*(1.0/3.0);
                double t48825 = b1p*c*t48781*t48773*(1.0/6.0);
                double t48826 = b3p*c*t48762*t48781*(1.0/2.0);
                double t48782 = t48823+t48824+t48825+t48826;
                double t48783 = rho_a-rho_b;
                double t48784 = 1.0/t48759;
                double t48785 = t48783*t48784;
                double t48786 = two_13*2.0;
                double t48787 = t48786-2.0;
                double t48788 = 1.0/t48787;
                double t48789 = 1.0/c0f;
                double t48790 = b1f*t48762;
                double t48791 = b3f*t48764;
                double t48792 = b4f*t48766*t48767;
                double t48793 = b2f*c*t48760;
                double t48794 = t48790+t48791+t48792+t48793;
                double t48795 = 1.0/t48794;
                double t48796 = t48795*t48789*(1.0/2.0);
                double t48797 = t48796+1.0;
                double t48798 = log(t48797);
                double t48799 = a1f*c*t48760;
                double t48800 = t48799+1.0;
                double t48801 = log(t48779);
                double t48809 = c0f*t48800*t48798*2.0;
                double t48810 = c0p*t48801*t48775*2.0;
                double t48802 = -t48810+t48809;
                double t48803 = t48783*t48783;
                double t48804 = t48785+1.0;
                double t48805 = pow(t48804,4.0/3.0);
                double t48806 = -t48785+1.0;
                double t48807 = pow(t48806,4.0/3.0);
                double t48808 = t48805+t48807-2.0;
                double t48811 = 1.0/(t48759*t48759);
                double t48815 = t48811*t48783;
                double t48812 = -t48815+t48784;
                double t48813 = 1.0/(t48759*t48759*t48759*t48759);
                double t48814 = pow(t48804,1.0/3.0);
                double t48816 = t48812*t48814*(4.0/3.0);
                double t48817 = pow(t48806,1.0/3.0);
                double t48850 = t48812*t48817*(4.0/3.0);
                double t48818 = -t48850+t48816;
                double t48819 = 1.0/(t48759*t48759*t48759*t48759*t48759);
                double t48820 = t48803*t48803;
                double t48822 = 1.0/(t48770*t48770);
                double t48827 = 1.0/t48797;
                double t48828 = 1.0/(t48794*t48794);
                double t48829 = b4f*t48821*t48766*(2.0/3.0);
                double t48830 = b2f*c*t48781*(1.0/3.0);
                double t48831 = b1f*c*t48781*t48773*(1.0/6.0);
                double t48832 = b3f*c*t48762*t48781*(1.0/2.0);
                double t48833 = t48830+t48831+t48832+t48829;
                double t48834 = t48800*t48833*t48827*t48828;
                double t48835 = a1p*c*c0p*t48801*t48781*(2.0/3.0);
                double t48851 = t48822*t48780*t48782*t48775;
                double t48852 = a1f*c*c0f*t48781*t48798*(2.0/3.0);
                double t48836 = -t48851+t48834-t48852+t48835;
                double t48837 = t48782*t48782;
                double t48838 = 1.0/pow(t48761,3.0/2.0);
                double t48839 = b4p*t48772*t48766*(1.0E1/9.0);
                double t48840 = b2p*c*t48771*(4.0/9.0);
                double t48841 = b1p*c*t48771*t48773*(2.0/9.0);
                double t48842 = b3p*c*t48762*t48771*(2.0/3.0);
                double t48843 = b3p*t48772*t48773*t48766*(1.0/1.2E1);
                double t48844 = t48840+t48841+t48842+t48843+t48839-b1p*t48772*t48766*t48838*(1.0/3.6E1);
                double t48845 = 1.0/(t48770*t48770*t48770);
                double t48846 = t48780*t48845*t48837*t48775*2.0;
                double t48847 = t48833*t48833;
                double t48848 = 1.0/(t48779*t48779);
                double t48849 = 1.0/(t48770*t48770*t48770*t48770);
                double t48853 = t48811*2.0;
                double t48854 = 1.0/(t48759*t48759*t48759);
                double t48872 = t48854*t48783*2.0;
                double t48855 = t48853-t48872;
                double t48856 = t48812*t48812;
                double t48857 = a1p*c*c0p*t48801*t48771*(8.0/9.0);
                double t48858 = 1.0/(t48759*t48759*t48759*t48759*t48759*t48759);
                double t48859 = 1.0/d2fz0;
                double t48860 = 1.0/Aa;
                double t48861 = b1a*t48762;
                double t48862 = b3a*t48764;
                double t48863 = b4a*t48766*t48767;
                double t48864 = b2a*c*t48760;
                double t48865 = t48861+t48862+t48863+t48864;
                double t48866 = 1.0/t48865;
                double t48867 = t48860*t48866*(1.0/2.0);
                double t48868 = t48867+1.0;
                double t48869 = log(t48868);
                double t48870 = a1a*c*t48760;
                double t48871 = t48870+1.0;
                double t48873 = t48817*t48855*(4.0/3.0);
                double t48874 = 1.0/pow(t48804,2.0/3.0);
                double t48875 = t48856*t48874*(4.0/9.0);
                double t48876 = 1.0/pow(t48806,2.0/3.0);
                double t48877 = t48856*t48876*(4.0/9.0);
                double t48878 = t48873+t48875+t48877-t48814*t48855*(4.0/3.0);
                double t48879 = t48820*t48819*4.0;
                double t48891 = t48803*t48813*t48783*4.0;
                double t48880 = -t48891+t48879;
                double t48881 = 1.0/t48868;
                double t48882 = t48820*t48813;
                double t48883 = t48882-1.0;
                double t48884 = 1.0/(t48865*t48865);
                double t48885 = b4a*t48821*t48766*(2.0/3.0);
                double t48886 = b2a*c*t48781*(1.0/3.0);
                double t48887 = b1a*c*t48781*t48773*(1.0/6.0);
                double t48888 = b3a*c*t48762*t48781*(1.0/2.0);
                double t48889 = t48885+t48886+t48887+t48888;
                double t48890 = t48889*t48889;
                double t48892 = t48891-t48879;
                v_rho_a_rho_a[Q] += scale * t48759*(-t48846-t48857+t48822*t48780*t48844*t48775+t48820*t48813*t48808*t48788*(t48846+t48857-t48822*t48780*t48844*t48775-t48800*t48827*t48847*1.0/(t48794*t48794*t48794)*2.0+t48800*t48827*t48828*(b2f*c*t48771*(4.0/9.0)+b4f*t48772*t48766*(1.0E1/9.0)+b1f*c*t48771*t48773*(2.0/9.0)+b3f*c*t48762*t48771*(2.0/3.0)-b1f*t48772*t48766*t48838*(1.0/3.6E1)+b3f*t48772*t48773*t48766*(1.0/1.2E1))+t48800*t48847*1.0/(t48794*t48794*t48794*t48794)*1.0/(t48797*t48797)*t48789*(1.0/2.0)-a1f*c*c0f*t48771*t48798*(8.0/9.0)-t48837*t48775*t48776*t48848*t48849*(1.0/2.0)+a1f*c*t48833*t48781*t48827*t48828*(2.0/3.0)-a1p*c*t48822*t48780*t48781*t48782*(2.0/3.0))-t48802*t48803*t48813*t48808*t48788*1.2E1-t48802*t48820*t48813*t48788*t48878+t48802*t48820*t48818*t48819*t48788*8.0-t48820*t48813*t48818*t48836*t48788*2.0-t48802*t48820*t48808*t48858*t48788*2.0E1+t48820*t48808*t48836*t48819*t48788*8.0+t48837*t48775*t48776*t48848*t48849*(1.0/2.0)-t48802*t48803*t48813*t48818*t48783*t48788*8.0+t48802*t48803*t48808*t48783*t48819*t48788*3.2E1-t48803*t48813*t48808*t48836*t48783*t48788*8.0+a1p*c*t48822*t48780*t48781*t48782*(2.0/3.0)+Aa*t48871*t48880*t48818*t48859*t48788*t48869*4.0-Aa*t48871*t48883*t48859*t48788*t48869*t48878*2.0-Aa*t48808*t48871*t48859*t48788*t48869*(t48803*t48813*1.2E1+t48820*t48858*2.0E1-t48803*t48783*t48819*3.2E1)*2.0+t48808*t48871*t48880*t48881*t48884*t48859*t48788*t48889*2.0-t48871*t48818*t48881*t48883*t48884*t48859*t48788*t48889*2.0-t48808*t48871*t48881*t48890*1.0/(t48865*t48865*t48865)*t48883*t48859*t48788*2.0+t48808*t48871*t48881*t48883*t48884*t48859*t48788*(b2a*c*t48771*(4.0/9.0)+b4a*t48772*t48766*(1.0E1/9.0)+b1a*c*t48771*t48773*(2.0/9.0)+b3a*c*t48762*t48771*(2.0/3.0)-b1a*t48772*t48766*t48838*(1.0/3.6E1)+b3a*t48772*t48773*t48766*(1.0/1.2E1))-Aa*a1a*c*t48771*t48808*t48883*t48859*t48788*t48869*(8.0/9.0)+Aa*a1a*c*t48781*t48808*t48892*t48859*t48788*t48869*(4.0/3.0)+Aa*a1a*c*t48781*t48818*t48883*t48859*t48788*t48869*(4.0/3.0)+t48860*t48808*t48871*t48890*1.0/(t48865*t48865*t48865*t48865)*t48883*t48859*1.0/(t48868*t48868)*t48788*(1.0/2.0)+a1a*c*t48781*t48808*t48881*t48883*t48884*t48859*t48788*t48889*(2.0/3.0))-t48822*t48780*t48782*t48775*2.0+a1p*c*c0p*t48801*t48781*(4.0/3.0)-t48802*t48820*t48813*t48818*t48788*2.0+t48802*t48820*t48808*t48819*t48788*8.0-t48820*t48813*t48808*t48836*t48788*2.0-t48802*t48803*t48813*t48808*t48783*t48788*8.0-Aa*t48808*t48871*t48892*t48859*t48788*t48869*4.0-Aa*t48871*t48818*t48883*t48859*t48788*t48869*4.0-t48808*t48871*t48881*t48883*t48884*t48859*t48788*t48889*2.0+Aa*a1a*c*t48781*t48808*t48883*t48859*t48788*t48869*(4.0/3.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t48894 = rho_a+rho_b;
                double t48895 = 1.0/pow(t48894,1.0/3.0);
                double t48896 = c*t48895;
                double t48897 = sqrt(t48896);
                double t48898 = b1p*t48897;
                double t48899 = pow(t48896,3.0/2.0);
                double t48900 = b3p*t48899;
                double t48901 = c*c;
                double t48902 = 1.0/pow(t48894,2.0/3.0);
                double t48903 = b4p*t48901*t48902;
                double t48904 = b2p*c*t48895;
                double t48905 = t48900+t48903+t48904+t48898;
                double t48906 = 1.0/pow(t48894,7.0/3.0);
                double t48907 = 1.0/pow(t48894,8.0/3.0);
                double t48908 = 1.0/sqrt(t48896);
                double t48909 = a1p*c*t48895;
                double t48910 = t48909+1.0;
                double t48911 = 1.0/c0p;
                double t48912 = 1.0/t48905;
                double t48913 = t48911*t48912*(1.0/2.0);
                double t48914 = t48913+1.0;
                double t48915 = 1.0/t48914;
                double t48916 = 1.0/pow(t48894,4.0/3.0);
                double t48959 = 1.0/pow(t48894,5.0/3.0);
                double t48961 = b4p*t48901*t48959*(2.0/3.0);
                double t48962 = b2p*c*t48916*(1.0/3.0);
                double t48963 = b1p*c*t48916*t48908*(1.0/6.0);
                double t48964 = b3p*c*t48916*t48897*(1.0/2.0);
                double t48917 = t48961+t48962+t48963+t48964;
                double t48918 = rho_a-rho_b;
                double t48919 = 1.0/t48894;
                double t48920 = t48918*t48919;
                double t48921 = two_13*2.0;
                double t48922 = t48921-2.0;
                double t48923 = 1.0/t48922;
                double t48924 = 1.0/c0f;
                double t48925 = b1f*t48897;
                double t48926 = b3f*t48899;
                double t48927 = b4f*t48901*t48902;
                double t48928 = b2f*c*t48895;
                double t48929 = t48925+t48926+t48927+t48928;
                double t48930 = 1.0/t48929;
                double t48931 = t48930*t48924*(1.0/2.0);
                double t48932 = t48931+1.0;
                double t48933 = log(t48932);
                double t48934 = a1f*c*t48895;
                double t48935 = t48934+1.0;
                double t48936 = log(t48914);
                double t48948 = c0f*t48933*t48935*2.0;
                double t48949 = c0p*t48910*t48936*2.0;
                double t48937 = t48948-t48949;
                double t48938 = t48918*t48918;
                double t48939 = t48920+1.0;
                double t48940 = pow(t48939,4.0/3.0);
                double t48941 = -t48920+1.0;
                double t48942 = pow(t48941,4.0/3.0);
                double t48943 = t48940+t48942-2.0;
                double t48944 = 1.0/(t48894*t48894);
                double t48945 = t48944*t48918;
                double t48946 = t48945+t48919;
                double t48947 = 1.0/(t48894*t48894*t48894*t48894);
                double t48950 = pow(t48939,1.0/3.0);
                double t48951 = t48950*t48946*(4.0/3.0);
                double t48952 = pow(t48941,1.0/3.0);
                double t48986 = t48952*t48946*(4.0/3.0);
                double t48953 = t48951-t48986;
                double t48954 = t48938*t48938;
                double t48955 = t48945-t48919;
                double t48956 = t48950*t48955*(4.0/3.0);
                double t48957 = 1.0/(t48894*t48894*t48894*t48894*t48894);
                double t49009 = t48952*t48955*(4.0/3.0);
                double t48958 = t48956-t49009;
                double t48960 = 1.0/(t48905*t48905);
                double t48965 = t48917*t48917;
                double t48966 = 1.0/t48932;
                double t48967 = 1.0/(t48929*t48929);
                double t48968 = 1.0/pow(t48896,3.0/2.0);
                double t48969 = b4p*t48901*t48907*(1.0E1/9.0);
                double t48970 = b2p*c*t48906*(4.0/9.0);
                double t48971 = b1p*c*t48906*t48908*(2.0/9.0);
                double t48972 = b3p*c*t48906*t48897*(2.0/3.0);
                double t48973 = b3p*t48901*t48907*t48908*(1.0/1.2E1);
                double t48974 = t48970+t48971+t48972+t48973+t48969-b1p*t48901*t48907*t48968*(1.0/3.6E1);
                double t48975 = t48910*t48915*t48960*t48974;
                double t48976 = b4f*t48901*t48959*(2.0/3.0);
                double t48977 = b2f*c*t48916*(1.0/3.0);
                double t48978 = b1f*c*t48916*t48908*(1.0/6.0);
                double t48979 = b3f*c*t48916*t48897*(1.0/2.0);
                double t48980 = t48976+t48977+t48978+t48979;
                double t48981 = 1.0/(t48905*t48905*t48905);
                double t48982 = t48980*t48980;
                double t48983 = 1.0/(t48914*t48914);
                double t48984 = 1.0/(t48905*t48905*t48905*t48905);
                double t48985 = t48910*t48911*t48965*t48983*t48984*(1.0/2.0);
                double t48987 = t48910*t48915*t48960*t48917;
                double t48988 = a1f*c*c0f*t48933*t48916*(2.0/3.0);
                double t48990 = t48935*t48980*t48966*t48967;
                double t48991 = a1p*c*c0p*t48916*t48936*(2.0/3.0);
                double t48989 = -t48990-t48991+t48987+t48988;
                double t48992 = 1.0/(t48894*t48894*t48894);
                double t48993 = a1p*c*t48915*t48960*t48916*t48917*(2.0/3.0);
                double t48994 = 1.0/(t48894*t48894*t48894*t48894*t48894*t48894);
                double t48995 = 1.0/d2fz0;
                double t48996 = 1.0/Aa;
                double t48997 = b1a*t48897;
                double t48998 = b3a*t48899;
                double t48999 = b4a*t48901*t48902;
                double t49000 = b2a*c*t48895;
                double t49001 = t48997+t48998+t48999+t49000;
                double t49002 = 1.0/t49001;
                double t49003 = t48996*t49002*(1.0/2.0);
                double t49004 = t49003+1.0;
                double t49005 = log(t49004);
                double t49006 = a1a*c*t48895;
                double t49007 = t49006+1.0;
                double t49008 = t48954*t48957*4.0;
                double t49010 = t48950*t48918*t48992*(8.0/3.0);
                double t49011 = 1.0/pow(t48939,2.0/3.0);
                double t49012 = t48946*t48955*t49011*(4.0/9.0);
                double t49013 = 1.0/pow(t48941,2.0/3.0);
                double t49014 = t48946*t48955*t49013*(4.0/9.0);
                double t49015 = t49010+t49012+t49014-t48952*t48918*t48992*(8.0/3.0);
                double t49016 = t48918*t48938*t48947*4.0;
                double t49017 = 1.0/t49004;
                double t49018 = t49016+t49008;
                double t49019 = 1.0/(t49001*t49001);
                double t49020 = b4a*t48901*t48959*(2.0/3.0);
                double t49021 = b2a*c*t48916*(1.0/3.0);
                double t49022 = b1a*c*t48916*t48908*(1.0/6.0);
                double t49023 = b3a*c*t48916*t48897*(1.0/2.0);
                double t49024 = t49020+t49021+t49022+t49023;
                double t49025 = t48954*t48947;
                double t49026 = t49025-1.0;
                double t49027 = t49024*t49024;
                double t49028 = t49016-t49008;
                double t49029 = t48910*t48915*t48981*t48965*2.0;
                double t49030 = a1p*c*c0p*t48906*t48936*(8.0/9.0);
                double t49031 = t48990+t48991-t48987-t48988;
                v_rho_a_rho_b[Q] += scale * -t48894*(-t48975-t48993-t48985+t49030+t49029+t48923*t48943*t48954*t48947*(t48975+t48993+t48985-t49030-t49029+t48935*t48982*1.0/(t48929*t48929*t48929)*t48966*2.0-t48935*t48966*t48967*(b2f*c*t48906*(4.0/9.0)+b4f*t48901*t48907*(1.0E1/9.0)+b1f*c*t48906*t48908*(2.0/9.0)+b3f*c*t48906*t48897*(2.0/3.0)-b1f*t48901*t48907*t48968*(1.0/3.6E1)+b3f*t48901*t48907*t48908*(1.0/1.2E1))-1.0/(t48932*t48932)*t48924*t48935*t48982*1.0/(t48929*t48929*t48929*t48929)*(1.0/2.0)+a1f*c*c0f*t48906*t48933*(8.0/9.0)-a1f*c*t48916*t48980*t48966*t48967*(2.0/3.0))+t48923*t48943*t48954*t48937*t48994*2.0E1-t48923*t48943*t48937*t48938*t48947*1.2E1+t48923*t48953*t48954*t48937*t48957*4.0+t48923*t48954*t48937*t48957*t48958*4.0+t48923*t48943*t48954*t48957*t48989*8.0+t48923*t48953*t48954*t48947*t48989+t48923*t48954*t48937*t48947*t49015-t48923*t48954*t48947*t48958*t49031-t48923*t48953*t48918*t48937*t48938*t48947*4.0+t48923*t48918*t48937*t48938*t48947*t48958*4.0-Aa*t48923*t48953*t48995*t49005*t49007*t49028*2.0+Aa*t48923*t48958*t48995*t49005*t49007*t49018*2.0+Aa*t48923*t48995*t49005*t49015*t49007*t49026*2.0+Aa*t48923*t48943*t48995*t49005*t49007*(t48954*t48994*2.0E1-t48938*t48947*1.2E1)*2.0-t48923*t48943*t48995*t49024*t49007*t49017*t49018*t49019-t48923*t48953*t48995*t49024*t49007*t49017*t49026*t49019+t48923*t48943*t48995*t49024*t49007*t49017*t49019*t49028-t48923*t48958*t48995*t49024*t49007*t49017*t49026*t49019+t48923*t48943*t48995*1.0/(t49001*t49001*t49001)*t49007*t49017*t49026*t49027*2.0-t48923*t48943*t48995*t49007*t49017*t49026*t49019*(b2a*c*t48906*(4.0/9.0)+b4a*t48901*t48907*(1.0E1/9.0)+b1a*c*t48906*t48908*(2.0/9.0)+b3a*c*t48906*t48897*(2.0/3.0)-b1a*t48901*t48907*t48968*(1.0/3.6E1)+b3a*t48901*t48907*t48908*(1.0/1.2E1))+Aa*a1a*c*t48923*t48906*t48943*t48995*t49005*t49026*(8.0/9.0)+Aa*a1a*c*t48923*t48916*t48943*t48995*t49005*t49018*(2.0/3.0)+Aa*a1a*c*t48923*t48916*t48953*t48995*t49005*t49026*(2.0/3.0)-Aa*a1a*c*t48923*t48916*t48943*t48995*t49005*t49028*(2.0/3.0)+Aa*a1a*c*t48923*t48916*t48958*t48995*t49005*t49026*(2.0/3.0)-t48923*t48943*t48995*t48996*1.0/(t49001*t49001*t49001*t49001)*1.0/(t49004*t49004)*t49007*t49026*t49027*(1.0/2.0)-a1a*c*t48923*t48916*t48943*t48995*t49024*t49017*t49026*t49019*(2.0/3.0))-t48910*t48915*t48960*t48917*2.0+a1p*c*c0p*t48916*t48936*(4.0/3.0)+t48923*t48954*t48937*t48947*(t48956-t48952*(t48945-t48919)*(4.0/3.0))+t48923*t48943*t48954*t48937*t48957*8.0+t48923*t48953*t48954*t48937*t48947-t48923*t48943*t48954*t48947*t49031*2.0+Aa*t48923*t48995*t49005*t49007*t49026*(t48956-t48952*(t48945-t48919)*(4.0/3.0))*2.0+Aa*t48923*t48943*t48995*t49005*t49007*t49018*2.0+Aa*t48923*t48953*t48995*t49005*t49007*t49026*2.0-Aa*t48923*t48943*t48995*t49005*t49007*t49028*2.0-t48923*t48943*t48995*t49024*t49007*t49017*t49026*t49019*2.0+Aa*a1a*c*t48923*t48916*t48943*t48995*t49005*t49026*(4.0/3.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t49033 = rho_a+rho_b;
                double t49034 = 1.0/pow(t49033,1.0/3.0);
                double t49035 = c*t49034;
                double t49036 = sqrt(t49035);
                double t49037 = b1p*t49036;
                double t49038 = pow(t49035,3.0/2.0);
                double t49039 = b3p*t49038;
                double t49040 = c*c;
                double t49041 = 1.0/pow(t49033,2.0/3.0);
                double t49042 = b4p*t49040*t49041;
                double t49043 = b2p*c*t49034;
                double t49044 = t49042+t49043+t49037+t49039;
                double t49045 = 1.0/pow(t49033,7.0/3.0);
                double t49046 = 1.0/pow(t49033,8.0/3.0);
                double t49047 = 1.0/sqrt(t49035);
                double t49048 = a1p*c*t49034;
                double t49049 = t49048+1.0;
                double t49050 = 1.0/c0p;
                double t49051 = 1.0/t49044;
                double t49052 = t49050*t49051*(1.0/2.0);
                double t49053 = t49052+1.0;
                double t49054 = 1.0/t49053;
                double t49055 = 1.0/pow(t49033,4.0/3.0);
                double t49095 = 1.0/pow(t49033,5.0/3.0);
                double t49097 = b4p*t49040*t49095*(2.0/3.0);
                double t49098 = b2p*c*t49055*(1.0/3.0);
                double t49099 = b1p*c*t49055*t49047*(1.0/6.0);
                double t49100 = b3p*c*t49036*t49055*(1.0/2.0);
                double t49056 = t49100+t49097+t49098+t49099;
                double t49057 = rho_a-rho_b;
                double t49058 = 1.0/t49033;
                double t49059 = t49057*t49058;
                double t49060 = two_13*2.0;
                double t49061 = t49060-2.0;
                double t49062 = 1.0/t49061;
                double t49063 = 1.0/c0f;
                double t49064 = b1f*t49036;
                double t49065 = b3f*t49038;
                double t49066 = b4f*t49040*t49041;
                double t49067 = b2f*c*t49034;
                double t49068 = t49064+t49065+t49066+t49067;
                double t49069 = 1.0/t49068;
                double t49070 = t49063*t49069*(1.0/2.0);
                double t49071 = t49070+1.0;
                double t49072 = log(t49071);
                double t49073 = a1f*c*t49034;
                double t49074 = t49073+1.0;
                double t49075 = log(t49053);
                double t49083 = c0f*t49072*t49074*2.0;
                double t49084 = c0p*t49075*t49049*2.0;
                double t49076 = t49083-t49084;
                double t49077 = t49057*t49057;
                double t49078 = t49059+1.0;
                double t49079 = pow(t49078,4.0/3.0);
                double t49080 = -t49059+1.0;
                double t49081 = pow(t49080,4.0/3.0);
                double t49082 = t49081+t49079-2.0;
                double t49085 = 1.0/(t49033*t49033);
                double t49086 = t49057*t49085;
                double t49087 = t49058+t49086;
                double t49088 = 1.0/(t49033*t49033*t49033*t49033);
                double t49089 = pow(t49078,1.0/3.0);
                double t49090 = t49087*t49089*(4.0/3.0);
                double t49091 = pow(t49080,1.0/3.0);
                double t49124 = t49091*t49087*(4.0/3.0);
                double t49092 = -t49124+t49090;
                double t49093 = 1.0/(t49033*t49033*t49033*t49033*t49033);
                double t49094 = t49077*t49077;
                double t49096 = 1.0/(t49044*t49044);
                double t49101 = 1.0/t49071;
                double t49102 = 1.0/(t49068*t49068);
                double t49103 = b4f*t49040*t49095*(2.0/3.0);
                double t49104 = b2f*c*t49055*(1.0/3.0);
                double t49105 = b1f*c*t49055*t49047*(1.0/6.0);
                double t49106 = b3f*c*t49036*t49055*(1.0/2.0);
                double t49107 = t49103+t49104+t49105+t49106;
                double t49108 = t49101*t49102*t49107*t49074;
                double t49109 = a1p*c*c0p*t49055*t49075*(2.0/3.0);
                double t49125 = t49054*t49056*t49049*t49096;
                double t49126 = a1f*c*c0f*t49072*t49055*(2.0/3.0);
                double t49110 = -t49125+t49108-t49126+t49109;
                double t49111 = t49056*t49056;
                double t49112 = 1.0/pow(t49035,3.0/2.0);
                double t49113 = b4p*t49040*t49046*(1.0E1/9.0);
                double t49114 = b2p*c*t49045*(4.0/9.0);
                double t49115 = b1p*c*t49045*t49047*(2.0/9.0);
                double t49116 = b3p*c*t49036*t49045*(2.0/3.0);
                double t49117 = b3p*t49040*t49046*t49047*(1.0/1.2E1);
                double t49118 = t49113+t49114+t49115+t49116+t49117-b1p*t49040*t49112*t49046*(1.0/3.6E1);
                double t49119 = 1.0/(t49044*t49044*t49044);
                double t49120 = t49111*t49054*t49119*t49049*2.0;
                double t49121 = t49107*t49107;
                double t49122 = 1.0/(t49053*t49053);
                double t49123 = 1.0/(t49044*t49044*t49044*t49044);
                double t49127 = t49085*2.0;
                double t49128 = 1.0/(t49033*t49033*t49033);
                double t49129 = t49128*t49057*2.0;
                double t49130 = t49127+t49129;
                double t49131 = t49087*t49087;
                double t49132 = a1p*c*c0p*t49045*t49075*(8.0/9.0);
                double t49133 = 1.0/(t49033*t49033*t49033*t49033*t49033*t49033);
                double t49134 = 1.0/d2fz0;
                double t49135 = 1.0/Aa;
                double t49136 = b1a*t49036;
                double t49137 = b3a*t49038;
                double t49138 = b4a*t49040*t49041;
                double t49139 = b2a*c*t49034;
                double t49140 = t49136+t49137+t49138+t49139;
                double t49141 = 1.0/t49140;
                double t49142 = t49141*t49135*(1.0/2.0);
                double t49143 = t49142+1.0;
                double t49144 = log(t49143);
                double t49145 = a1a*c*t49034;
                double t49146 = t49145+1.0;
                double t49147 = t49130*t49089*(4.0/3.0);
                double t49148 = 1.0/pow(t49078,2.0/3.0);
                double t49149 = t49131*t49148*(4.0/9.0);
                double t49150 = 1.0/pow(t49080,2.0/3.0);
                double t49151 = t49131*t49150*(4.0/9.0);
                double t49152 = t49151+t49147+t49149-t49130*t49091*(4.0/3.0);
                double t49153 = t49057*t49077*t49088*4.0;
                double t49154 = t49093*t49094*4.0;
                double t49155 = t49153+t49154;
                double t49156 = 1.0/t49143;
                double t49157 = t49094*t49088;
                double t49158 = t49157-1.0;
                double t49159 = 1.0/(t49140*t49140);
                double t49160 = b4a*t49040*t49095*(2.0/3.0);
                double t49161 = b2a*c*t49055*(1.0/3.0);
                double t49162 = b1a*c*t49055*t49047*(1.0/6.0);
                double t49163 = b3a*c*t49036*t49055*(1.0/2.0);
                double t49164 = t49160+t49161+t49162+t49163;
                double t49165 = t49164*t49164;
                v_rho_b_rho_b[Q] += scale * -t49033*(t49120+t49132-t49054*t49118*t49049*t49096-t49062*t49082*t49094*t49088*(t49120+t49132-t49054*t49118*t49049*t49096-t49101*t49121*t49074*1.0/(t49068*t49068*t49068)*2.0+t49101*t49102*t49074*(b2f*c*t49045*(4.0/9.0)+b4f*t49040*t49046*(1.0E1/9.0)+b1f*c*t49045*t49047*(2.0/9.0)+b3f*c*t49036*t49045*(2.0/3.0)-b1f*t49040*t49112*t49046*(1.0/3.6E1)+b3f*t49040*t49046*t49047*(1.0/1.2E1))+t49121*1.0/(t49071*t49071)*t49063*t49074*1.0/(t49068*t49068*t49068*t49068)*(1.0/2.0)-a1f*c*c0f*t49045*t49072*(8.0/9.0)-t49111*t49050*t49122*t49123*t49049*(1.0/2.0)+a1f*c*t49101*t49102*t49107*t49055*(2.0/3.0)-a1p*c*t49054*t49055*t49056*t49096*(2.0/3.0))-t49111*t49050*t49122*t49123*t49049*(1.0/2.0)-t49110*t49062*t49082*t49093*t49094*8.0-t49110*t49062*t49092*t49094*t49088*2.0+t49133*t49062*t49082*t49076*t49094*2.0E1+t49062*t49092*t49093*t49076*t49094*8.0+t49062*t49152*t49076*t49094*t49088+t49062*t49082*t49076*t49077*t49088*1.2E1-t49110*t49062*t49082*t49057*t49077*t49088*8.0+t49062*t49082*t49057*t49093*t49076*t49077*3.2E1+t49062*t49092*t49057*t49076*t49077*t49088*8.0-a1p*c*t49054*t49055*t49056*t49096*(2.0/3.0)+Aa*t49062*t49134*t49152*t49144*t49146*t49158*2.0+Aa*t49062*t49134*t49144*t49092*t49146*t49155*4.0+Aa*t49062*t49134*t49144*t49082*t49146*(t49133*t49094*2.0E1+t49077*t49088*1.2E1+t49057*t49093*t49077*3.2E1)*2.0-t49062*t49134*t49082*t49146*t49155*t49164*t49156*t49159*2.0-t49062*t49134*t49092*t49146*t49164*t49156*t49158*t49159*2.0+1.0/(t49140*t49140*t49140)*t49062*t49134*t49082*t49146*t49156*t49165*t49158*2.0-t49062*t49134*t49082*t49146*t49156*t49158*t49159*(b2a*c*t49045*(4.0/9.0)+b4a*t49040*t49046*(1.0E1/9.0)+b1a*c*t49045*t49047*(2.0/9.0)+b3a*c*t49036*t49045*(2.0/3.0)-b1a*t49040*t49112*t49046*(1.0/3.6E1)+b3a*t49040*t49046*t49047*(1.0/1.2E1))+Aa*a1a*c*t49062*t49134*t49144*t49055*t49082*t49155*(4.0/3.0)+Aa*a1a*c*t49062*t49134*t49045*t49144*t49082*t49158*(8.0/9.0)+Aa*a1a*c*t49062*t49134*t49144*t49055*t49092*t49158*(4.0/3.0)-1.0/(t49140*t49140*t49140*t49140)*t49062*t49134*1.0/(t49143*t49143)*t49135*t49082*t49146*t49165*t49158*(1.0/2.0)-a1a*c*t49062*t49134*t49055*t49082*t49164*t49156*t49158*t49159*(2.0/3.0))-t49054*t49056*t49049*t49096*2.0+a1p*c*c0p*t49055*t49075*(4.0/3.0)-t49110*t49062*t49082*t49094*t49088*2.0+t49062*t49082*t49093*t49076*t49094*8.0+t49062*t49092*t49076*t49094*t49088*2.0+t49062*t49082*t49057*t49076*t49077*t49088*8.0+Aa*t49062*t49134*t49144*t49082*t49146*t49155*4.0+Aa*t49062*t49134*t49144*t49092*t49146*t49158*4.0-t49062*t49134*t49082*t49146*t49164*t49156*t49158*t49159*2.0+Aa*a1a*c*t49062*t49134*t49144*t49055*t49082*t49158*(4.0/3.0);
            }
            
        }
    }
}

}
