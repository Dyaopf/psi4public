#include <libmints/vector.h>
#include "PW92_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

PW92_CFunctional::PW92_CFunctional()
{
    name_ = "PW92_C";
    description_ = "    PW92 LSDA Correlation\n";
    citation_ = "    J.P. Perdew and Y. Wang, Phys. Rev. B., 45(23), 13244, 1992\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = false;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["d2fz0"] =   1.7099210000000000E+00;
    parameters_["Aa"] =   1.6886999999999999E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1091000000000001E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545000000000000E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
}
PW92_CFunctional::~PW92_CFunctional()
{
}
void PW92_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double d2fz0 = parameters_["d2fz0"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t23053 = rho_a+rho_b;
                double t23054 = 1.0/pow(t23053,1.0/3.0);
                double t23055 = c*t23054;
                double t23056 = sqrt(t23055);
                double t23057 = pow(t23055,3.0/2.0);
                double t23058 = c*c;
                double t23059 = 1.0/pow(t23053,2.0/3.0);
                double t23060 = 1.0/c0p;
                double t23061 = b1p*t23056;
                double t23062 = b3p*t23057;
                double t23063 = b4p*t23058*t23059;
                double t23064 = b2p*c*t23054;
                double t23065 = t23061+t23062+t23063+t23064;
                double t23066 = 1.0/t23065;
                double t23067 = t23060*t23066*(1.0/2.0);
                double t23068 = t23067+1.0;
                double t23069 = log(t23068);
                double t23070 = a1p*c*t23054;
                double t23071 = t23070+1.0;
                double t23072 = c0p*t23071*t23069*2.0;
                v[Q] += scale * -t23053*(t23072-((pow(2.0,1.0/3.0)*2.0-2.0)*(t23072-c0f*log((1.0/2.0)/(c0f*(b1f*t23056+b3f*t23057+b2f*c*t23054+b4f*t23058*t23059))+1.0)*(a1f*c*t23054+1.0)*2.0))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t23074 = rho_a+rho_b;
                double t23075 = 1.0/pow(t23074,1.0/3.0);
                double t23076 = c*t23075;
                double t23077 = sqrt(t23076);
                double t23078 = b1f*t23077;
                double t23079 = pow(t23076,3.0/2.0);
                double t23080 = b3f*t23079;
                double t23081 = c*c;
                double t23082 = 1.0/pow(t23074,2.0/3.0);
                double t23083 = b4f*t23081*t23082;
                double t23084 = b2f*c*t23075;
                double t23085 = t23080+t23083+t23084+t23078;
                double t23086 = 1.0/pow(t23074,4.0/3.0);
                double t23087 = b1p*t23077;
                double t23088 = b3p*t23079;
                double t23089 = b4p*t23081*t23082;
                double t23090 = b2p*c*t23075;
                double t23091 = t23090+t23087+t23088+t23089;
                double t23092 = 1.0/pow(t23074,5.0/3.0);
                double t23093 = 1.0/sqrt(t23076);
                double t23094 = 1.0/c0f;
                double t23095 = 1.0/t23085;
                double t23096 = t23094*t23095*(1.0/2.0);
                double t23097 = t23096+1.0;
                double t23098 = 1.0/c0p;
                double t23099 = 1.0/t23091;
                double t23100 = t23098*t23099*(1.0/2.0);
                double t23101 = t23100+1.0;
                double t23102 = a1p*c*t23075;
                double t23103 = t23102+1.0;
                double t23104 = 1.0/t23101;
                double t23105 = 1.0/(t23091*t23091);
                double t23106 = b4p*t23081*t23092*(2.0/3.0);
                double t23107 = b2p*c*t23086*(1.0/3.0);
                double t23108 = b1p*c*t23093*t23086*(1.0/6.0);
                double t23109 = b3p*c*t23077*t23086*(1.0/2.0);
                double t23110 = t23106+t23107+t23108+t23109;
                double t23111 = t23110*t23103*t23104*t23105;
                double t23112 = log(t23101);
                double t23113 = pow(2.0,1.0/3.0);
                double t23114 = t23113*2.0;
                double t23115 = t23114-2.0;
                double t23116 = two_13*2.0;
                double t23117 = t23116-2.0;
                double t23118 = 1.0/t23117;
                double t23119 = log(t23097);
                double t23120 = a1f*c*t23075;
                double t23121 = t23120+1.0;
                v_rho_a[Q] += scale * t23074*(-t23111+t23115*t23118*(t23111-(t23121*1.0/(t23085*t23085)*(b2f*c*t23086*(1.0/3.0)+b4f*t23081*t23092*(2.0/3.0)+b1f*c*t23093*t23086*(1.0/6.0)+b3f*c*t23077*t23086*(1.0/2.0)))/t23097+a1f*c*c0f*t23119*t23086*(2.0/3.0)-a1p*c*c0p*t23112*t23086*(2.0/3.0))+a1p*c*c0p*t23112*t23086*(2.0/3.0))-c0p*t23103*t23112*2.0-t23115*t23118*(c0f*t23121*t23119*2.0-c0p*t23103*t23112*2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t23123 = rho_a+rho_b;
                double t23124 = 1.0/pow(t23123,1.0/3.0);
                double t23125 = c*t23124;
                double t23126 = sqrt(t23125);
                double t23127 = b1f*t23126;
                double t23128 = pow(t23125,3.0/2.0);
                double t23129 = b3f*t23128;
                double t23130 = c*c;
                double t23131 = 1.0/pow(t23123,2.0/3.0);
                double t23132 = b4f*t23130*t23131;
                double t23133 = b2f*c*t23124;
                double t23134 = t23132+t23133+t23127+t23129;
                double t23135 = 1.0/pow(t23123,4.0/3.0);
                double t23136 = b1p*t23126;
                double t23137 = b3p*t23128;
                double t23138 = b4p*t23130*t23131;
                double t23139 = b2p*c*t23124;
                double t23140 = t23136+t23137+t23138+t23139;
                double t23141 = 1.0/pow(t23123,5.0/3.0);
                double t23142 = 1.0/sqrt(t23125);
                double t23143 = 1.0/c0f;
                double t23144 = 1.0/t23134;
                double t23145 = t23143*t23144*(1.0/2.0);
                double t23146 = t23145+1.0;
                double t23147 = 1.0/c0p;
                double t23148 = 1.0/t23140;
                double t23149 = t23147*t23148*(1.0/2.0);
                double t23150 = t23149+1.0;
                double t23151 = a1p*c*t23124;
                double t23152 = t23151+1.0;
                double t23153 = 1.0/t23150;
                double t23154 = 1.0/(t23140*t23140);
                double t23155 = b4p*t23130*t23141*(2.0/3.0);
                double t23156 = b2p*c*t23135*(1.0/3.0);
                double t23157 = b1p*c*t23142*t23135*(1.0/6.0);
                double t23158 = b3p*c*t23126*t23135*(1.0/2.0);
                double t23159 = t23155+t23156+t23157+t23158;
                double t23160 = t23152*t23153*t23154*t23159;
                double t23161 = log(t23150);
                double t23162 = pow(2.0,1.0/3.0);
                double t23163 = t23162*2.0;
                double t23164 = t23163-2.0;
                double t23165 = two_13*2.0;
                double t23166 = t23165-2.0;
                double t23167 = 1.0/t23166;
                double t23168 = log(t23146);
                double t23169 = a1f*c*t23124;
                double t23170 = t23169+1.0;
                v_rho_b[Q] += scale * t23123*(-t23160+t23164*t23167*(t23160-(1.0/(t23134*t23134)*t23170*(b2f*c*t23135*(1.0/3.0)+b4f*t23130*t23141*(2.0/3.0)+b1f*c*t23142*t23135*(1.0/6.0)+b3f*c*t23126*t23135*(1.0/2.0)))/t23146+a1f*c*c0f*t23135*t23168*(2.0/3.0)-a1p*c*c0p*t23161*t23135*(2.0/3.0))+a1p*c*c0p*t23161*t23135*(2.0/3.0))-c0p*t23152*t23161*2.0-t23164*t23167*(c0f*t23170*t23168*2.0-c0p*t23152*t23161*2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t23177 = rho_a+rho_b;
                double t23178 = 1.0/pow(t23177,1.0/3.0);
                double t23179 = c*t23178;
                double t23180 = sqrt(t23179);
                double t23181 = b1f*t23180;
                double t23182 = pow(t23179,3.0/2.0);
                double t23183 = b3f*t23182;
                double t23184 = c*c;
                double t23185 = 1.0/pow(t23177,2.0/3.0);
                double t23186 = b4f*t23184*t23185;
                double t23187 = b2f*c*t23178;
                double t23188 = t23181+t23183+t23186+t23187;
                double t23189 = 1.0/pow(t23177,7.0/3.0);
                double t23190 = 1.0/pow(t23177,8.0/3.0);
                double t23191 = 1.0/sqrt(t23179);
                double t23192 = b1p*t23180;
                double t23193 = b3p*t23182;
                double t23194 = b4p*t23184*t23185;
                double t23195 = b2p*c*t23178;
                double t23196 = t23192+t23193+t23194+t23195;
                double t23197 = 1.0/pow(t23179,3.0/2.0);
                double t23198 = a1f*c*t23178;
                double t23199 = t23198+1.0;
                double t23200 = 1.0/c0f;
                double t23201 = 1.0/t23188;
                double t23202 = t23200*t23201*(1.0/2.0);
                double t23203 = t23202+1.0;
                double t23204 = 1.0/t23203;
                double t23205 = 1.0/pow(t23177,4.0/3.0);
                double t23214 = 1.0/pow(t23177,5.0/3.0);
                double t23216 = b4f*t23214*t23184*(2.0/3.0);
                double t23217 = b2f*c*t23205*(1.0/3.0);
                double t23218 = b1f*c*t23205*t23191*(1.0/6.0);
                double t23219 = b3f*c*t23205*t23180*(1.0/2.0);
                double t23206 = t23216+t23217+t23218+t23219;
                double t23207 = a1p*c*t23178;
                double t23208 = t23207+1.0;
                double t23209 = 1.0/c0p;
                double t23210 = 1.0/t23196;
                double t23211 = t23210*t23209*(1.0/2.0);
                double t23212 = t23211+1.0;
                double t23213 = 1.0/t23212;
                double t23221 = b4p*t23214*t23184*(2.0/3.0);
                double t23222 = b2p*c*t23205*(1.0/3.0);
                double t23223 = b1p*c*t23205*t23191*(1.0/6.0);
                double t23224 = b3p*c*t23205*t23180*(1.0/2.0);
                double t23215 = t23221+t23222+t23223+t23224;
                double t23220 = t23206*t23206;
                double t23225 = t23215*t23215;
                double t23226 = 1.0/(t23188*t23188);
                double t23227 = 1.0/(t23196*t23196);
                double t23228 = b4p*t23190*t23184*(1.0E1/9.0);
                double t23229 = b2p*c*t23189*(4.0/9.0);
                double t23230 = b1p*c*t23191*t23189*(2.0/9.0);
                double t23231 = b3p*c*t23180*t23189*(2.0/3.0);
                double t23232 = b3p*t23190*t23191*t23184*(1.0/1.2E1);
                double t23233 = t23230+t23231+t23232+t23228+t23229-b1p*t23190*t23184*t23197*(1.0/3.6E1);
                double t23234 = t23213*t23233*t23208*t23227;
                double t23235 = 1.0/(t23196*t23196*t23196);
                double t23236 = 1.0/(t23212*t23212);
                double t23237 = 1.0/(t23196*t23196*t23196*t23196);
                double t23238 = t23225*t23208*t23209*t23236*t23237*(1.0/2.0);
                double t23239 = log(t23212);
                double t23240 = a1p*c*t23213*t23205*t23215*t23227*(2.0/3.0);
                double t23241 = pow(2.0,1.0/3.0);
                double t23242 = t23241*2.0;
                double t23243 = t23242-2.0;
                double t23244 = two_13*2.0;
                double t23245 = t23244-2.0;
                double t23246 = 1.0/t23245;
                double t23247 = log(t23203);
                v_rho_a_rho_a[Q] += scale * t23177*(t23240+t23234+t23238-t23243*t23246*(t23240+t23234+t23238-t23213*t23225*t23208*t23235*2.0+t23220*t23204*1.0/(t23188*t23188*t23188)*t23199*2.0-t23204*t23226*t23199*(b2f*c*t23189*(4.0/9.0)+b4f*t23190*t23184*(1.0E1/9.0)+b1f*c*t23191*t23189*(2.0/9.0)+b3f*c*t23180*t23189*(2.0/3.0)-b1f*t23190*t23184*t23197*(1.0/3.6E1)+b3f*t23190*t23191*t23184*(1.0/1.2E1))-t23200*t23220*1.0/(t23203*t23203)*1.0/(t23188*t23188*t23188*t23188)*t23199*(1.0/2.0)+a1f*c*c0f*t23247*t23189*(8.0/9.0)-a1p*c*c0p*t23239*t23189*(8.0/9.0)-a1f*c*t23204*t23205*t23206*t23226*(2.0/3.0))-t23213*t23225*t23208*t23235*2.0-a1p*c*c0p*t23239*t23189*(8.0/9.0))+t23243*t23246*(t23213*t23215*t23208*t23227-t23204*t23206*t23226*t23199+a1f*c*c0f*t23205*t23247*(2.0/3.0)-a1p*c*c0p*t23205*t23239*(2.0/3.0))*2.0-t23213*t23215*t23208*t23227*2.0+a1p*c*c0p*t23205*t23239*(4.0/3.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t23249 = rho_a+rho_b;
                double t23250 = 1.0/pow(t23249,1.0/3.0);
                double t23251 = c*t23250;
                double t23252 = sqrt(t23251);
                double t23253 = b1f*t23252;
                double t23254 = pow(t23251,3.0/2.0);
                double t23255 = b3f*t23254;
                double t23256 = c*c;
                double t23257 = 1.0/pow(t23249,2.0/3.0);
                double t23258 = b4f*t23256*t23257;
                double t23259 = b2f*c*t23250;
                double t23260 = t23253+t23255+t23258+t23259;
                double t23261 = 1.0/pow(t23249,7.0/3.0);
                double t23262 = 1.0/pow(t23249,8.0/3.0);
                double t23263 = 1.0/sqrt(t23251);
                double t23264 = b1p*t23252;
                double t23265 = b3p*t23254;
                double t23266 = b4p*t23256*t23257;
                double t23267 = b2p*c*t23250;
                double t23268 = t23264+t23265+t23266+t23267;
                double t23269 = 1.0/pow(t23251,3.0/2.0);
                double t23270 = a1f*c*t23250;
                double t23271 = t23270+1.0;
                double t23272 = 1.0/c0f;
                double t23273 = 1.0/t23260;
                double t23274 = t23272*t23273*(1.0/2.0);
                double t23275 = t23274+1.0;
                double t23276 = 1.0/t23275;
                double t23277 = 1.0/pow(t23249,4.0/3.0);
                double t23286 = 1.0/pow(t23249,5.0/3.0);
                double t23288 = b4f*t23256*t23286*(2.0/3.0);
                double t23289 = b2f*c*t23277*(1.0/3.0);
                double t23290 = b1f*c*t23263*t23277*(1.0/6.0);
                double t23291 = b3f*c*t23252*t23277*(1.0/2.0);
                double t23278 = t23290+t23291+t23288+t23289;
                double t23279 = a1p*c*t23250;
                double t23280 = t23279+1.0;
                double t23281 = 1.0/c0p;
                double t23282 = 1.0/t23268;
                double t23283 = t23281*t23282*(1.0/2.0);
                double t23284 = t23283+1.0;
                double t23285 = 1.0/t23284;
                double t23293 = b4p*t23256*t23286*(2.0/3.0);
                double t23294 = b2p*c*t23277*(1.0/3.0);
                double t23295 = b1p*c*t23263*t23277*(1.0/6.0);
                double t23296 = b3p*c*t23252*t23277*(1.0/2.0);
                double t23287 = t23293+t23294+t23295+t23296;
                double t23292 = t23278*t23278;
                double t23297 = t23287*t23287;
                double t23298 = 1.0/(t23260*t23260);
                double t23299 = 1.0/(t23268*t23268);
                double t23300 = b4p*t23262*t23256*(1.0E1/9.0);
                double t23301 = b2p*c*t23261*(4.0/9.0);
                double t23302 = b1p*c*t23261*t23263*(2.0/9.0);
                double t23303 = b3p*c*t23252*t23261*(2.0/3.0);
                double t23304 = b3p*t23262*t23263*t23256*(1.0/1.2E1);
                double t23305 = t23300+t23301+t23302+t23303+t23304-b1p*t23262*t23256*t23269*(1.0/3.6E1);
                double t23306 = t23305*t23280*t23285*t23299;
                double t23307 = 1.0/(t23268*t23268*t23268);
                double t23308 = 1.0/(t23284*t23284);
                double t23309 = 1.0/(t23268*t23268*t23268*t23268);
                double t23310 = t23280*t23281*t23308*t23309*t23297*(1.0/2.0);
                double t23311 = log(t23284);
                double t23312 = a1p*c*t23285*t23277*t23287*t23299*(2.0/3.0);
                double t23313 = pow(2.0,1.0/3.0);
                double t23314 = t23313*2.0;
                double t23315 = t23314-2.0;
                double t23316 = two_13*2.0;
                double t23317 = t23316-2.0;
                double t23318 = 1.0/t23317;
                double t23319 = log(t23275);
                v_rho_a_rho_b[Q] += scale * t23249*(t23310+t23312+t23306-t23315*t23318*(t23310+t23312+t23306-t23280*t23307*t23285*t23297*2.0+1.0/(t23260*t23260*t23260)*t23271*t23292*t23276*2.0-t23271*t23276*t23298*(b2f*c*t23261*(4.0/9.0)+b4f*t23262*t23256*(1.0E1/9.0)+b1f*c*t23261*t23263*(2.0/9.0)+b3f*c*t23252*t23261*(2.0/3.0)-b1f*t23262*t23256*t23269*(1.0/3.6E1)+b3f*t23262*t23263*t23256*(1.0/1.2E1))-1.0/(t23260*t23260*t23260*t23260)*t23271*t23272*t23292*1.0/(t23275*t23275)*(1.0/2.0)+a1f*c*c0f*t23261*t23319*(8.0/9.0)-a1p*c*c0p*t23311*t23261*(8.0/9.0)-a1f*c*t23276*t23277*t23278*t23298*(2.0/3.0))-t23280*t23307*t23285*t23297*2.0-a1p*c*c0p*t23311*t23261*(8.0/9.0))-t23315*t23318*(t23271*t23276*t23278*t23298-t23280*t23285*t23287*t23299-a1f*c*c0f*t23319*t23277*(2.0/3.0)+a1p*c*c0p*t23311*t23277*(2.0/3.0))*2.0-t23280*t23285*t23287*t23299*2.0+a1p*c*c0p*t23311*t23277*(4.0/3.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t23321 = rho_a+rho_b;
                double t23322 = 1.0/pow(t23321,1.0/3.0);
                double t23323 = c*t23322;
                double t23324 = sqrt(t23323);
                double t23325 = b1f*t23324;
                double t23326 = pow(t23323,3.0/2.0);
                double t23327 = b3f*t23326;
                double t23328 = c*c;
                double t23329 = 1.0/pow(t23321,2.0/3.0);
                double t23330 = b4f*t23328*t23329;
                double t23331 = b2f*c*t23322;
                double t23332 = t23330+t23331+t23325+t23327;
                double t23333 = 1.0/pow(t23321,7.0/3.0);
                double t23334 = 1.0/pow(t23321,8.0/3.0);
                double t23335 = 1.0/sqrt(t23323);
                double t23336 = b1p*t23324;
                double t23337 = b3p*t23326;
                double t23338 = b4p*t23328*t23329;
                double t23339 = b2p*c*t23322;
                double t23340 = t23336+t23337+t23338+t23339;
                double t23341 = 1.0/pow(t23323,3.0/2.0);
                double t23342 = a1f*c*t23322;
                double t23343 = t23342+1.0;
                double t23344 = 1.0/c0f;
                double t23345 = 1.0/t23332;
                double t23346 = t23344*t23345*(1.0/2.0);
                double t23347 = t23346+1.0;
                double t23348 = 1.0/t23347;
                double t23349 = 1.0/pow(t23321,4.0/3.0);
                double t23358 = 1.0/pow(t23321,5.0/3.0);
                double t23360 = b4f*t23328*t23358*(2.0/3.0);
                double t23361 = b2f*c*t23349*(1.0/3.0);
                double t23362 = b1f*c*t23335*t23349*(1.0/6.0);
                double t23363 = b3f*c*t23324*t23349*(1.0/2.0);
                double t23350 = t23360+t23361+t23362+t23363;
                double t23351 = a1p*c*t23322;
                double t23352 = t23351+1.0;
                double t23353 = 1.0/c0p;
                double t23354 = 1.0/t23340;
                double t23355 = t23353*t23354*(1.0/2.0);
                double t23356 = t23355+1.0;
                double t23357 = 1.0/t23356;
                double t23365 = b4p*t23328*t23358*(2.0/3.0);
                double t23366 = b2p*c*t23349*(1.0/3.0);
                double t23367 = b1p*c*t23335*t23349*(1.0/6.0);
                double t23368 = b3p*c*t23324*t23349*(1.0/2.0);
                double t23359 = t23365+t23366+t23367+t23368;
                double t23364 = t23350*t23350;
                double t23369 = t23359*t23359;
                double t23370 = 1.0/(t23332*t23332);
                double t23371 = 1.0/(t23340*t23340);
                double t23372 = b4p*t23334*t23328*(1.0E1/9.0);
                double t23373 = b2p*c*t23333*(4.0/9.0);
                double t23374 = b1p*c*t23333*t23335*(2.0/9.0);
                double t23375 = b3p*c*t23324*t23333*(2.0/3.0);
                double t23376 = b3p*t23334*t23335*t23328*(1.0/1.2E1);
                double t23377 = t23372+t23373+t23374+t23375+t23376-b1p*t23341*t23334*t23328*(1.0/3.6E1);
                double t23378 = t23352*t23371*t23357*t23377;
                double t23379 = 1.0/(t23340*t23340*t23340);
                double t23380 = 1.0/(t23356*t23356);
                double t23381 = 1.0/(t23340*t23340*t23340*t23340);
                double t23382 = t23352*t23353*t23380*t23381*t23369*(1.0/2.0);
                double t23383 = log(t23356);
                double t23384 = a1p*c*t23371*t23357*t23349*t23359*(2.0/3.0);
                double t23385 = pow(2.0,1.0/3.0);
                double t23386 = t23385*2.0;
                double t23387 = t23386-2.0;
                double t23388 = two_13*2.0;
                double t23389 = t23388-2.0;
                double t23390 = 1.0/t23389;
                double t23391 = log(t23347);
                v_rho_b_rho_b[Q] += scale * t23321*(t23382+t23384+t23378-t23390*t23387*(t23382+t23384+t23378-t23352*t23357*t23369*t23379*2.0+1.0/(t23332*t23332*t23332)*t23343*t23364*t23348*2.0-t23343*t23370*t23348*(b2f*c*t23333*(4.0/9.0)+b4f*t23334*t23328*(1.0E1/9.0)+b1f*c*t23333*t23335*(2.0/9.0)+b3f*c*t23324*t23333*(2.0/3.0)-b1f*t23341*t23334*t23328*(1.0/3.6E1)+b3f*t23334*t23335*t23328*(1.0/1.2E1))-1.0/(t23332*t23332*t23332*t23332)*t23343*t23344*t23364*1.0/(t23347*t23347)*(1.0/2.0)+a1f*c*c0f*t23333*t23391*(8.0/9.0)-a1p*c*c0p*t23333*t23383*(8.0/9.0)-a1f*c*t23350*t23370*t23348*t23349*(2.0/3.0))-t23352*t23357*t23369*t23379*2.0-a1p*c*c0p*t23333*t23383*(8.0/9.0))-t23390*t23387*(t23350*t23343*t23370*t23348-t23352*t23371*t23357*t23359-a1f*c*c0f*t23391*t23349*(2.0/3.0)+a1p*c*c0p*t23383*t23349*(2.0/3.0))*2.0-t23352*t23371*t23357*t23359*2.0+a1p*c*c0p*t23383*t23349*(4.0/3.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t23418 = rho_a+rho_b;
                double t23419 = 1.0/pow(t23418,1.0/3.0);
                double t23420 = c*t23419;
                double t23421 = sqrt(t23420);
                double t23422 = pow(t23420,3.0/2.0);
                double t23423 = c*c;
                double t23424 = 1.0/pow(t23418,2.0/3.0);
                double t23425 = 1.0/c0p;
                double t23426 = b1p*t23421;
                double t23427 = b3p*t23422;
                double t23428 = b4p*t23423*t23424;
                double t23429 = b2p*c*t23419;
                double t23430 = t23426+t23427+t23428+t23429;
                double t23431 = 1.0/t23430;
                double t23432 = t23431*t23425*(1.0/2.0);
                double t23433 = t23432+1.0;
                double t23434 = log(t23433);
                double t23435 = a1p*c*t23419;
                double t23436 = t23435+1.0;
                double t23437 = c0p*t23434*t23436*2.0;
                v[Q] += scale * -t23418*(t23437-((pow(2.0,1.0/3.0)*2.0-2.0)*(t23437-c0f*log((1.0/2.0)/(c0f*(b1f*t23421+b3f*t23422+b2f*c*t23419+b4f*t23423*t23424))+1.0)*(a1f*c*t23419+1.0)*2.0))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t23439 = rho_a+rho_b;
                double t23440 = 1.0/pow(t23439,1.0/3.0);
                double t23441 = c*t23440;
                double t23442 = sqrt(t23441);
                double t23443 = b1f*t23442;
                double t23444 = pow(t23441,3.0/2.0);
                double t23445 = b3f*t23444;
                double t23446 = c*c;
                double t23447 = 1.0/pow(t23439,2.0/3.0);
                double t23448 = b4f*t23446*t23447;
                double t23449 = b2f*c*t23440;
                double t23450 = t23443+t23445+t23448+t23449;
                double t23451 = 1.0/pow(t23439,4.0/3.0);
                double t23452 = b1p*t23442;
                double t23453 = b3p*t23444;
                double t23454 = b4p*t23446*t23447;
                double t23455 = b2p*c*t23440;
                double t23456 = t23452+t23453+t23454+t23455;
                double t23457 = 1.0/pow(t23439,5.0/3.0);
                double t23458 = 1.0/sqrt(t23441);
                double t23459 = 1.0/c0f;
                double t23460 = 1.0/t23450;
                double t23461 = t23460*t23459*(1.0/2.0);
                double t23462 = t23461+1.0;
                double t23463 = 1.0/c0p;
                double t23464 = 1.0/t23456;
                double t23465 = t23463*t23464*(1.0/2.0);
                double t23466 = t23465+1.0;
                double t23467 = a1p*c*t23440;
                double t23468 = t23467+1.0;
                double t23469 = 1.0/t23466;
                double t23470 = 1.0/(t23456*t23456);
                double t23471 = b4p*t23446*t23457*(2.0/3.0);
                double t23472 = b2p*c*t23451*(1.0/3.0);
                double t23473 = b1p*c*t23451*t23458*(1.0/6.0);
                double t23474 = b3p*c*t23442*t23451*(1.0/2.0);
                double t23475 = t23471+t23472+t23473+t23474;
                double t23476 = t23470*t23475*t23468*t23469;
                double t23477 = log(t23466);
                double t23478 = pow(2.0,1.0/3.0);
                double t23479 = t23478*2.0;
                double t23480 = t23479-2.0;
                double t23481 = two_13*2.0;
                double t23482 = t23481-2.0;
                double t23483 = 1.0/t23482;
                double t23484 = log(t23462);
                double t23485 = a1f*c*t23440;
                double t23486 = t23485+1.0;
                v_rho_a[Q] += scale * t23439*(-t23476+t23480*t23483*(t23476-(1.0/(t23450*t23450)*t23486*(b2f*c*t23451*(1.0/3.0)+b4f*t23446*t23457*(2.0/3.0)+b1f*c*t23451*t23458*(1.0/6.0)+b3f*c*t23442*t23451*(1.0/2.0)))/t23462+a1f*c*c0f*t23451*t23484*(2.0/3.0)-a1p*c*c0p*t23451*t23477*(2.0/3.0))+a1p*c*c0p*t23451*t23477*(2.0/3.0))-c0p*t23468*t23477*2.0-t23480*t23483*(c0f*t23484*t23486*2.0-c0p*t23468*t23477*2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t23488 = rho_a+rho_b;
                double t23489 = 1.0/pow(t23488,1.0/3.0);
                double t23490 = c*t23489;
                double t23491 = sqrt(t23490);
                double t23492 = b1f*t23491;
                double t23493 = pow(t23490,3.0/2.0);
                double t23494 = b3f*t23493;
                double t23495 = c*c;
                double t23496 = 1.0/pow(t23488,2.0/3.0);
                double t23497 = b4f*t23495*t23496;
                double t23498 = b2f*c*t23489;
                double t23499 = t23492+t23494+t23497+t23498;
                double t23500 = 1.0/pow(t23488,4.0/3.0);
                double t23501 = b1p*t23491;
                double t23502 = b3p*t23493;
                double t23503 = b4p*t23495*t23496;
                double t23504 = b2p*c*t23489;
                double t23505 = t23501+t23502+t23503+t23504;
                double t23506 = 1.0/pow(t23488,5.0/3.0);
                double t23507 = 1.0/sqrt(t23490);
                double t23508 = 1.0/c0f;
                double t23509 = 1.0/t23499;
                double t23510 = t23508*t23509*(1.0/2.0);
                double t23511 = t23510+1.0;
                double t23512 = 1.0/c0p;
                double t23513 = 1.0/t23505;
                double t23514 = t23512*t23513*(1.0/2.0);
                double t23515 = t23514+1.0;
                double t23516 = a1p*c*t23489;
                double t23517 = t23516+1.0;
                double t23518 = 1.0/t23515;
                double t23519 = 1.0/(t23505*t23505);
                double t23520 = b4p*t23506*t23495*(2.0/3.0);
                double t23521 = b2p*c*t23500*(1.0/3.0);
                double t23522 = b1p*c*t23500*t23507*(1.0/6.0);
                double t23523 = b3p*c*t23500*t23491*(1.0/2.0);
                double t23524 = t23520+t23521+t23522+t23523;
                double t23525 = t23524*t23517*t23518*t23519;
                double t23526 = log(t23515);
                double t23527 = pow(2.0,1.0/3.0);
                double t23528 = t23527*2.0;
                double t23529 = t23528-2.0;
                double t23530 = two_13*2.0;
                double t23531 = t23530-2.0;
                double t23532 = 1.0/t23531;
                double t23533 = log(t23511);
                double t23534 = a1f*c*t23489;
                double t23535 = t23534+1.0;
                v_rho_b[Q] += scale * t23488*(-t23525+t23532*t23529*(t23525-(t23535*1.0/(t23499*t23499)*(b2f*c*t23500*(1.0/3.0)+b4f*t23506*t23495*(2.0/3.0)+b1f*c*t23500*t23507*(1.0/6.0)+b3f*c*t23500*t23491*(1.0/2.0)))/t23511+a1f*c*c0f*t23500*t23533*(2.0/3.0)-a1p*c*c0p*t23500*t23526*(2.0/3.0))+a1p*c*c0p*t23500*t23526*(2.0/3.0))-c0p*t23517*t23526*2.0-t23532*t23529*(c0f*t23533*t23535*2.0-c0p*t23517*t23526*2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t23542 = rho_a+rho_b;
                double t23543 = 1.0/pow(t23542,1.0/3.0);
                double t23544 = c*t23543;
                double t23545 = sqrt(t23544);
                double t23546 = b1f*t23545;
                double t23547 = pow(t23544,3.0/2.0);
                double t23548 = b3f*t23547;
                double t23549 = c*c;
                double t23550 = 1.0/pow(t23542,2.0/3.0);
                double t23551 = b4f*t23550*t23549;
                double t23552 = b2f*c*t23543;
                double t23553 = t23551+t23552+t23546+t23548;
                double t23554 = 1.0/pow(t23542,7.0/3.0);
                double t23555 = 1.0/pow(t23542,8.0/3.0);
                double t23556 = 1.0/sqrt(t23544);
                double t23557 = b1p*t23545;
                double t23558 = b3p*t23547;
                double t23559 = b4p*t23550*t23549;
                double t23560 = b2p*c*t23543;
                double t23561 = t23560+t23557+t23558+t23559;
                double t23562 = 1.0/pow(t23544,3.0/2.0);
                double t23563 = a1f*c*t23543;
                double t23564 = t23563+1.0;
                double t23565 = 1.0/c0f;
                double t23566 = 1.0/t23553;
                double t23567 = t23565*t23566*(1.0/2.0);
                double t23568 = t23567+1.0;
                double t23569 = 1.0/t23568;
                double t23570 = 1.0/pow(t23542,4.0/3.0);
                double t23579 = 1.0/pow(t23542,5.0/3.0);
                double t23581 = b4f*t23549*t23579*(2.0/3.0);
                double t23582 = b2f*c*t23570*(1.0/3.0);
                double t23583 = b1f*c*t23570*t23556*(1.0/6.0);
                double t23584 = b3f*c*t23570*t23545*(1.0/2.0);
                double t23571 = t23581+t23582+t23583+t23584;
                double t23572 = a1p*c*t23543;
                double t23573 = t23572+1.0;
                double t23574 = 1.0/c0p;
                double t23575 = 1.0/t23561;
                double t23576 = t23574*t23575*(1.0/2.0);
                double t23577 = t23576+1.0;
                double t23578 = 1.0/t23577;
                double t23586 = b4p*t23549*t23579*(2.0/3.0);
                double t23587 = b2p*c*t23570*(1.0/3.0);
                double t23588 = b1p*c*t23570*t23556*(1.0/6.0);
                double t23589 = b3p*c*t23570*t23545*(1.0/2.0);
                double t23580 = t23586+t23587+t23588+t23589;
                double t23585 = t23571*t23571;
                double t23590 = t23580*t23580;
                double t23591 = 1.0/(t23553*t23553);
                double t23592 = 1.0/(t23561*t23561);
                double t23593 = b4p*t23555*t23549*(1.0E1/9.0);
                double t23594 = b2p*c*t23554*(4.0/9.0);
                double t23595 = b1p*c*t23554*t23556*(2.0/9.0);
                double t23596 = b3p*c*t23545*t23554*(2.0/3.0);
                double t23597 = b3p*t23555*t23556*t23549*(1.0/1.2E1);
                double t23598 = t23593+t23594+t23595+t23596+t23597-b1p*t23562*t23555*t23549*(1.0/3.6E1);
                double t23599 = t23573*t23592*t23578*t23598;
                double t23600 = 1.0/(t23561*t23561*t23561);
                double t23601 = 1.0/(t23577*t23577);
                double t23602 = 1.0/(t23561*t23561*t23561*t23561);
                double t23603 = t23601*t23602*t23590*t23573*t23574*(1.0/2.0);
                double t23604 = log(t23577);
                double t23605 = a1p*c*t23570*t23580*t23592*t23578*(2.0/3.0);
                double t23606 = pow(2.0,1.0/3.0);
                double t23607 = t23606*2.0;
                double t23608 = t23607-2.0;
                double t23609 = two_13*2.0;
                double t23610 = t23609-2.0;
                double t23611 = 1.0/t23610;
                double t23612 = log(t23568);
                v_rho_a_rho_a[Q] += scale * t23542*(t23603+t23605+t23599-t23611*t23608*(t23603+t23605+t23599-t23600*t23590*t23573*t23578*2.0+1.0/(t23553*t23553*t23553)*t23564*t23585*t23569*2.0-t23564*t23591*t23569*(b2f*c*t23554*(4.0/9.0)+b4f*t23555*t23549*(1.0E1/9.0)+b1f*c*t23554*t23556*(2.0/9.0)+b3f*c*t23545*t23554*(2.0/3.0)-b1f*t23562*t23555*t23549*(1.0/3.6E1)+b3f*t23555*t23556*t23549*(1.0/1.2E1))-1.0/(t23553*t23553*t23553*t23553)*t23564*t23565*t23585*1.0/(t23568*t23568)*(1.0/2.0)+a1f*c*c0f*t23612*t23554*(8.0/9.0)-a1p*c*c0p*t23604*t23554*(8.0/9.0)-a1f*c*t23570*t23571*t23591*t23569*(2.0/3.0))-t23600*t23590*t23573*t23578*2.0-a1p*c*c0p*t23604*t23554*(8.0/9.0))-t23611*t23608*(t23571*t23564*t23591*t23569-t23580*t23573*t23592*t23578-a1f*c*c0f*t23612*t23570*(2.0/3.0)+a1p*c*c0p*t23604*t23570*(2.0/3.0))*2.0-t23580*t23573*t23592*t23578*2.0+a1p*c*c0p*t23604*t23570*(4.0/3.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t23614 = rho_a+rho_b;
                double t23615 = 1.0/pow(t23614,1.0/3.0);
                double t23616 = c*t23615;
                double t23617 = sqrt(t23616);
                double t23618 = b1f*t23617;
                double t23619 = pow(t23616,3.0/2.0);
                double t23620 = b3f*t23619;
                double t23621 = c*c;
                double t23622 = 1.0/pow(t23614,2.0/3.0);
                double t23623 = b4f*t23621*t23622;
                double t23624 = b2f*c*t23615;
                double t23625 = t23620+t23623+t23624+t23618;
                double t23626 = 1.0/pow(t23614,7.0/3.0);
                double t23627 = 1.0/pow(t23614,8.0/3.0);
                double t23628 = 1.0/sqrt(t23616);
                double t23629 = b1p*t23617;
                double t23630 = b3p*t23619;
                double t23631 = b4p*t23621*t23622;
                double t23632 = b2p*c*t23615;
                double t23633 = t23630+t23631+t23632+t23629;
                double t23634 = 1.0/pow(t23616,3.0/2.0);
                double t23635 = a1f*c*t23615;
                double t23636 = t23635+1.0;
                double t23637 = 1.0/c0f;
                double t23638 = 1.0/t23625;
                double t23639 = t23637*t23638*(1.0/2.0);
                double t23640 = t23639+1.0;
                double t23641 = 1.0/t23640;
                double t23642 = 1.0/pow(t23614,4.0/3.0);
                double t23651 = 1.0/pow(t23614,5.0/3.0);
                double t23653 = b4f*t23621*t23651*(2.0/3.0);
                double t23654 = b2f*c*t23642*(1.0/3.0);
                double t23655 = b1f*c*t23642*t23628*(1.0/6.0);
                double t23656 = b3f*c*t23642*t23617*(1.0/2.0);
                double t23643 = t23653+t23654+t23655+t23656;
                double t23644 = a1p*c*t23615;
                double t23645 = t23644+1.0;
                double t23646 = 1.0/c0p;
                double t23647 = 1.0/t23633;
                double t23648 = t23646*t23647*(1.0/2.0);
                double t23649 = t23648+1.0;
                double t23650 = 1.0/t23649;
                double t23658 = b4p*t23621*t23651*(2.0/3.0);
                double t23659 = b2p*c*t23642*(1.0/3.0);
                double t23660 = b1p*c*t23642*t23628*(1.0/6.0);
                double t23661 = b3p*c*t23642*t23617*(1.0/2.0);
                double t23652 = t23660+t23661+t23658+t23659;
                double t23657 = t23643*t23643;
                double t23662 = t23652*t23652;
                double t23663 = 1.0/(t23625*t23625);
                double t23664 = 1.0/(t23633*t23633);
                double t23665 = b4p*t23621*t23627*(1.0E1/9.0);
                double t23666 = b2p*c*t23626*(4.0/9.0);
                double t23667 = b1p*c*t23626*t23628*(2.0/9.0);
                double t23668 = b3p*c*t23617*t23626*(2.0/3.0);
                double t23669 = b3p*t23621*t23627*t23628*(1.0/1.2E1);
                double t23670 = t23665+t23666+t23667+t23668+t23669-b1p*t23621*t23634*t23627*(1.0/3.6E1);
                double t23671 = t23650*t23670*t23645*t23664;
                double t23672 = 1.0/(t23633*t23633*t23633);
                double t23673 = 1.0/(t23649*t23649);
                double t23674 = 1.0/(t23633*t23633*t23633*t23633);
                double t23675 = t23662*t23645*t23646*t23673*t23674*(1.0/2.0);
                double t23676 = log(t23649);
                double t23677 = a1p*c*t23650*t23642*t23652*t23664*(2.0/3.0);
                double t23678 = pow(2.0,1.0/3.0);
                double t23679 = t23678*2.0;
                double t23680 = t23679-2.0;
                double t23681 = two_13*2.0;
                double t23682 = t23681-2.0;
                double t23683 = 1.0/t23682;
                double t23684 = log(t23640);
                v_rho_a_rho_b[Q] += scale * t23614*(t23671+t23675+t23677-t23680*t23683*(t23671+t23675+t23677-t23650*t23662*t23645*t23672*2.0+t23641*1.0/(t23625*t23625*t23625)*t23636*t23657*2.0-t23641*t23636*t23663*(b2f*c*t23626*(4.0/9.0)+b4f*t23621*t23627*(1.0E1/9.0)+b1f*c*t23626*t23628*(2.0/9.0)+b3f*c*t23617*t23626*(2.0/3.0)-b1f*t23621*t23634*t23627*(1.0/3.6E1)+b3f*t23621*t23627*t23628*(1.0/1.2E1))-1.0/(t23640*t23640)*1.0/(t23625*t23625*t23625*t23625)*t23636*t23637*t23657*(1.0/2.0)+a1f*c*c0f*t23626*t23684*(8.0/9.0)-a1p*c*c0p*t23626*t23676*(8.0/9.0)-a1f*c*t23641*t23642*t23643*t23663*(2.0/3.0))-t23650*t23662*t23645*t23672*2.0-a1p*c*c0p*t23626*t23676*(8.0/9.0))-t23680*t23683*(t23641*t23643*t23636*t23663-t23650*t23652*t23645*t23664-a1f*c*c0f*t23642*t23684*(2.0/3.0)+a1p*c*c0p*t23642*t23676*(2.0/3.0))*2.0-t23650*t23652*t23645*t23664*2.0+a1p*c*c0p*t23642*t23676*(4.0/3.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t23686 = rho_a+rho_b;
                double t23687 = 1.0/pow(t23686,1.0/3.0);
                double t23688 = c*t23687;
                double t23689 = sqrt(t23688);
                double t23690 = b1f*t23689;
                double t23691 = pow(t23688,3.0/2.0);
                double t23692 = b3f*t23691;
                double t23693 = c*c;
                double t23694 = 1.0/pow(t23686,2.0/3.0);
                double t23695 = b4f*t23693*t23694;
                double t23696 = b2f*c*t23687;
                double t23697 = t23690+t23692+t23695+t23696;
                double t23698 = 1.0/pow(t23686,7.0/3.0);
                double t23699 = 1.0/pow(t23686,8.0/3.0);
                double t23700 = 1.0/sqrt(t23688);
                double t23701 = b1p*t23689;
                double t23702 = b3p*t23691;
                double t23703 = b4p*t23693*t23694;
                double t23704 = b2p*c*t23687;
                double t23705 = t23701+t23702+t23703+t23704;
                double t23706 = 1.0/pow(t23688,3.0/2.0);
                double t23707 = a1f*c*t23687;
                double t23708 = t23707+1.0;
                double t23709 = 1.0/c0f;
                double t23710 = 1.0/t23697;
                double t23711 = t23710*t23709*(1.0/2.0);
                double t23712 = t23711+1.0;
                double t23713 = 1.0/t23712;
                double t23714 = 1.0/pow(t23686,4.0/3.0);
                double t23723 = 1.0/pow(t23686,5.0/3.0);
                double t23725 = b4f*t23723*t23693*(2.0/3.0);
                double t23726 = b2f*c*t23714*(1.0/3.0);
                double t23727 = b1f*c*t23700*t23714*(1.0/6.0);
                double t23728 = b3f*c*t23714*t23689*(1.0/2.0);
                double t23715 = t23725+t23726+t23727+t23728;
                double t23716 = a1p*c*t23687;
                double t23717 = t23716+1.0;
                double t23718 = 1.0/c0p;
                double t23719 = 1.0/t23705;
                double t23720 = t23718*t23719*(1.0/2.0);
                double t23721 = t23720+1.0;
                double t23722 = 1.0/t23721;
                double t23730 = b4p*t23723*t23693*(2.0/3.0);
                double t23731 = b2p*c*t23714*(1.0/3.0);
                double t23732 = b1p*c*t23700*t23714*(1.0/6.0);
                double t23733 = b3p*c*t23714*t23689*(1.0/2.0);
                double t23724 = t23730+t23731+t23732+t23733;
                double t23729 = t23715*t23715;
                double t23734 = t23724*t23724;
                double t23735 = 1.0/(t23697*t23697);
                double t23736 = 1.0/(t23705*t23705);
                double t23737 = b4p*t23693*t23699*(1.0E1/9.0);
                double t23738 = b2p*c*t23698*(4.0/9.0);
                double t23739 = b1p*c*t23700*t23698*(2.0/9.0);
                double t23740 = b3p*c*t23689*t23698*(2.0/3.0);
                double t23741 = b3p*t23700*t23693*t23699*(1.0/1.2E1);
                double t23742 = t23740+t23741+t23737+t23738+t23739-b1p*t23706*t23693*t23699*(1.0/3.6E1);
                double t23743 = t23722*t23742*t23717*t23736;
                double t23744 = 1.0/(t23705*t23705*t23705);
                double t23745 = 1.0/(t23721*t23721);
                double t23746 = 1.0/(t23705*t23705*t23705*t23705);
                double t23747 = t23734*t23717*t23718*t23745*t23746*(1.0/2.0);
                double t23748 = log(t23721);
                double t23749 = a1p*c*t23722*t23714*t23724*t23736*(2.0/3.0);
                double t23750 = pow(2.0,1.0/3.0);
                double t23751 = t23750*2.0;
                double t23752 = t23751-2.0;
                double t23753 = two_13*2.0;
                double t23754 = t23753-2.0;
                double t23755 = 1.0/t23754;
                double t23756 = log(t23712);
                v_rho_b_rho_b[Q] += scale * t23686*(t23743+t23747+t23749-t23752*t23755*(t23743+t23747+t23749-t23722*t23734*t23717*t23744*2.0+t23713*t23708*t23729*1.0/(t23697*t23697*t23697)*2.0-t23713*t23708*t23735*(b2f*c*t23698*(4.0/9.0)+b4f*t23693*t23699*(1.0E1/9.0)+b1f*c*t23700*t23698*(2.0/9.0)+b3f*c*t23689*t23698*(2.0/3.0)-b1f*t23706*t23693*t23699*(1.0/3.6E1)+b3f*t23700*t23693*t23699*(1.0/1.2E1))-1.0/(t23712*t23712)*t23708*t23709*t23729*1.0/(t23697*t23697*t23697*t23697)*(1.0/2.0)+a1f*c*c0f*t23756*t23698*(8.0/9.0)-a1p*c*c0p*t23748*t23698*(8.0/9.0)-a1f*c*t23713*t23714*t23715*t23735*(2.0/3.0))-t23722*t23734*t23717*t23744*2.0-a1p*c*c0p*t23748*t23698*(8.0/9.0))-t23752*t23755*(t23713*t23715*t23708*t23735-t23722*t23724*t23717*t23736-a1f*c*c0f*t23714*t23756*(2.0/3.0)+a1p*c*c0p*t23714*t23748*(2.0/3.0))*2.0-t23722*t23724*t23717*t23736*2.0+a1p*c*c0p*t23714*t23748*(4.0/3.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t22417 = rho_a+rho_b;
                double t22418 = 1.0/pow(t22417,1.0/3.0);
                double t22419 = c*t22418;
                double t22420 = sqrt(t22419);
                double t22421 = pow(t22419,3.0/2.0);
                double t22422 = c*c;
                double t22423 = 1.0/pow(t22417,2.0/3.0);
                double t22424 = 1.0/c0p;
                double t22425 = b1p*t22420;
                double t22426 = b3p*t22421;
                double t22427 = b4p*t22422*t22423;
                double t22428 = b2p*c*t22418;
                double t22429 = t22425+t22426+t22427+t22428;
                double t22430 = 1.0/t22429;
                double t22431 = t22430*t22424*(1.0/2.0);
                double t22432 = t22431+1.0;
                double t22433 = log(t22432);
                double t22434 = a1p*c*t22418;
                double t22435 = t22434+1.0;
                double t22436 = c0p*t22433*t22435*2.0;
                double t22437 = rho_a-rho_b;
                double t22438 = t22437*t22437;
                double t22439 = 1.0/t22417;
                double t22440 = t22437*t22439;
                double t22441 = two_13*2.0;
                double t22442 = t22441-2.0;
                double t22443 = 1.0/t22442;
                double t22444 = 1.0/(t22417*t22417*t22417*t22417);
                double t22445 = t22438*t22438;
                double t22446 = t22440+1.0;
                double t22447 = pow(t22446,4.0/3.0);
                double t22448 = -t22440+1.0;
                double t22449 = pow(t22448,4.0/3.0);
                double t22450 = t22447+t22449-2.0;
                v[Q] += scale * -t22417*(t22436-t22450*t22443*t22444*t22445*(t22436-c0f*log((1.0/2.0)/(c0f*(b1f*t22420+b3f*t22421+b2f*c*t22418+b4f*t22422*t22423))+1.0)*(a1f*c*t22418+1.0)*2.0)+(Aa*t22450*t22443*log((1.0/2.0)/(Aa*(b1a*t22420+b3a*t22421+b2a*c*t22418+b4a*t22422*t22423))+1.0)*(t22444*t22445-1.0)*(a1a*c*t22418+1.0)*2.0)/d2fz0);
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t22452 = rho_a+rho_b;
                double t22453 = 1.0/pow(t22452,1.0/3.0);
                double t22454 = c*t22453;
                double t22455 = sqrt(t22454);
                double t22456 = b1p*t22455;
                double t22457 = pow(t22454,3.0/2.0);
                double t22458 = b3p*t22457;
                double t22459 = c*c;
                double t22460 = 1.0/pow(t22452,2.0/3.0);
                double t22461 = b4p*t22460*t22459;
                double t22462 = b2p*c*t22453;
                double t22463 = t22461+t22462+t22456+t22458;
                double t22464 = 1.0/pow(t22452,4.0/3.0);
                double t22465 = 1.0/c0p;
                double t22466 = 1.0/t22463;
                double t22467 = t22465*t22466*(1.0/2.0);
                double t22468 = t22467+1.0;
                double t22469 = a1p*c*t22453;
                double t22470 = t22469+1.0;
                double t22471 = rho_a-rho_b;
                double t22472 = t22471*t22471;
                double t22473 = 1.0/t22452;
                double t22474 = t22471*t22473;
                double t22475 = two_13*2.0;
                double t22476 = t22475-2.0;
                double t22477 = 1.0/t22476;
                double t22478 = 1.0/c0f;
                double t22479 = b1f*t22455;
                double t22480 = b3f*t22457;
                double t22481 = b4f*t22460*t22459;
                double t22482 = b2f*c*t22453;
                double t22483 = t22480+t22481+t22482+t22479;
                double t22484 = 1.0/t22483;
                double t22485 = t22484*t22478*(1.0/2.0);
                double t22486 = t22485+1.0;
                double t22487 = log(t22486);
                double t22488 = a1f*c*t22453;
                double t22489 = t22488+1.0;
                double t22490 = log(t22468);
                double t22500 = c0f*t22487*t22489*2.0;
                double t22501 = c0p*t22470*t22490*2.0;
                double t22491 = t22500-t22501;
                double t22492 = t22474+1.0;
                double t22493 = pow(t22492,4.0/3.0);
                double t22494 = -t22474+1.0;
                double t22495 = pow(t22494,4.0/3.0);
                double t22496 = t22493+t22495-2.0;
                double t22497 = 1.0/(t22452*t22452);
                double t22528 = t22471*t22497;
                double t22498 = t22473-t22528;
                double t22499 = 1.0/(t22452*t22452*t22452*t22452);
                double t22502 = t22472*t22472;
                double t22503 = 1.0/pow(t22452,5.0/3.0);
                double t22504 = 1.0/sqrt(t22454);
                double t22505 = 1.0/t22468;
                double t22506 = 1.0/(t22463*t22463);
                double t22507 = b4p*t22503*t22459*(2.0/3.0);
                double t22508 = b2p*c*t22464*(1.0/3.0);
                double t22509 = b1p*c*t22504*t22464*(1.0/6.0);
                double t22510 = b3p*c*t22455*t22464*(1.0/2.0);
                double t22511 = t22510+t22507+t22508+t22509;
                double t22512 = t22511*t22505*t22470*t22506;
                double t22513 = 1.0/(t22452*t22452*t22452*t22452*t22452);
                double t22514 = 1.0/d2fz0;
                double t22515 = 1.0/Aa;
                double t22516 = b1a*t22455;
                double t22517 = b3a*t22457;
                double t22518 = b4a*t22460*t22459;
                double t22519 = b2a*c*t22453;
                double t22520 = t22516+t22517+t22518+t22519;
                double t22521 = 1.0/t22520;
                double t22522 = t22521*t22515*(1.0/2.0);
                double t22523 = t22522+1.0;
                double t22524 = log(t22523);
                double t22525 = a1a*c*t22453;
                double t22526 = t22525+1.0;
                double t22527 = pow(t22492,1.0/3.0);
                double t22529 = t22527*t22498*(4.0/3.0);
                double t22530 = pow(t22494,1.0/3.0);
                double t22531 = t22529-t22530*t22498*(4.0/3.0);
                double t22532 = t22502*t22499;
                double t22533 = t22532-1.0;
                v_rho_a[Q] += scale * -t22501-t22452*(t22512-t22502*t22477*t22496*t22499*(t22512-(1.0/(t22483*t22483)*t22489*(b2f*c*t22464*(1.0/3.0)+b4f*t22503*t22459*(2.0/3.0)+b1f*c*t22504*t22464*(1.0/6.0)+b3f*c*t22455*t22464*(1.0/2.0)))/t22486+a1f*c*c0f*t22464*t22487*(2.0/3.0)-a1p*c*c0p*t22490*t22464*(2.0/3.0))-a1p*c*c0p*t22490*t22464*(2.0/3.0)-t22502*t22513*t22491*t22477*t22496*4.0+t22502*t22531*t22491*t22477*t22499+t22471*t22472*t22491*t22477*t22496*t22499*4.0-Aa*t22514*t22524*t22526*t22477*t22496*(t22502*t22513*4.0-t22471*t22472*t22499*4.0)*2.0+Aa*t22531*t22514*t22524*t22533*t22526*t22477*2.0+(1.0/(t22520*t22520)*t22514*t22533*t22526*t22477*t22496*(b2a*c*t22464*(1.0/3.0)+b4a*t22503*t22459*(2.0/3.0)+b1a*c*t22504*t22464*(1.0/6.0)+b3a*c*t22455*t22464*(1.0/2.0)))/t22523-Aa*a1a*c*t22514*t22524*t22533*t22464*t22477*t22496*(2.0/3.0))-t22502*t22491*t22477*t22496*t22499-Aa*t22514*t22524*t22533*t22526*t22477*t22496*2.0;
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t22535 = rho_a+rho_b;
                double t22536 = 1.0/pow(t22535,1.0/3.0);
                double t22537 = c*t22536;
                double t22538 = sqrt(t22537);
                double t22539 = b1p*t22538;
                double t22540 = pow(t22537,3.0/2.0);
                double t22541 = b3p*t22540;
                double t22542 = c*c;
                double t22543 = 1.0/pow(t22535,2.0/3.0);
                double t22544 = b4p*t22542*t22543;
                double t22545 = b2p*c*t22536;
                double t22546 = t22541+t22544+t22545+t22539;
                double t22547 = 1.0/pow(t22535,4.0/3.0);
                double t22548 = 1.0/c0p;
                double t22549 = 1.0/t22546;
                double t22550 = t22548*t22549*(1.0/2.0);
                double t22551 = t22550+1.0;
                double t22552 = a1p*c*t22536;
                double t22553 = t22552+1.0;
                double t22554 = rho_a-rho_b;
                double t22555 = t22554*t22554;
                double t22556 = 1.0/t22535;
                double t22557 = t22554*t22556;
                double t22558 = two_13*2.0;
                double t22559 = t22558-2.0;
                double t22560 = 1.0/t22559;
                double t22561 = 1.0/c0f;
                double t22562 = b1f*t22538;
                double t22563 = b3f*t22540;
                double t22564 = b4f*t22542*t22543;
                double t22565 = b2f*c*t22536;
                double t22566 = t22562+t22563+t22564+t22565;
                double t22567 = 1.0/t22566;
                double t22568 = t22561*t22567*(1.0/2.0);
                double t22569 = t22568+1.0;
                double t22570 = log(t22569);
                double t22571 = a1f*c*t22536;
                double t22572 = t22571+1.0;
                double t22573 = log(t22551);
                double t22584 = c0f*t22570*t22572*2.0;
                double t22585 = c0p*t22553*t22573*2.0;
                double t22574 = t22584-t22585;
                double t22575 = t22557+1.0;
                double t22576 = pow(t22575,4.0/3.0);
                double t22577 = -t22557+1.0;
                double t22578 = pow(t22577,4.0/3.0);
                double t22579 = t22576+t22578-2.0;
                double t22580 = 1.0/(t22535*t22535);
                double t22581 = t22580*t22554;
                double t22582 = t22581+t22556;
                double t22583 = 1.0/(t22535*t22535*t22535*t22535);
                double t22586 = t22555*t22555;
                double t22587 = 1.0/pow(t22535,5.0/3.0);
                double t22588 = 1.0/sqrt(t22537);
                double t22589 = 1.0/t22551;
                double t22590 = 1.0/(t22546*t22546);
                double t22591 = b4p*t22542*t22587*(2.0/3.0);
                double t22592 = b2p*c*t22547*(1.0/3.0);
                double t22593 = b1p*c*t22547*t22588*(1.0/6.0);
                double t22594 = b3p*c*t22538*t22547*(1.0/2.0);
                double t22595 = t22591+t22592+t22593+t22594;
                double t22596 = 1.0/(t22535*t22535*t22535*t22535*t22535);
                double t22597 = 1.0/d2fz0;
                double t22598 = 1.0/Aa;
                double t22599 = b1a*t22538;
                double t22600 = b3a*t22540;
                double t22601 = b4a*t22542*t22543;
                double t22602 = b2a*c*t22536;
                double t22603 = t22600+t22601+t22602+t22599;
                double t22604 = 1.0/t22603;
                double t22605 = t22604*t22598*(1.0/2.0);
                double t22606 = t22605+1.0;
                double t22607 = log(t22606);
                double t22608 = a1a*c*t22536;
                double t22609 = t22608+1.0;
                double t22610 = pow(t22575,1.0/3.0);
                double t22611 = t22610*t22582*(4.0/3.0);
                double t22612 = pow(t22577,1.0/3.0);
                double t22613 = t22611-t22612*t22582*(4.0/3.0);
                double t22614 = t22583*t22586;
                double t22615 = t22614-1.0;
                v_rho_b[Q] += scale * -t22585+t22535*(-t22553*t22590*t22595*t22589+a1p*c*c0p*t22573*t22547*(2.0/3.0)+t22613*t22560*t22574*t22583*t22586+t22560*t22574*t22586*t22596*t22579*4.0+t22560*t22583*t22586*t22579*(t22553*t22590*t22595*t22589-(t22572*1.0/(t22566*t22566)*(b2f*c*t22547*(1.0/3.0)+b4f*t22542*t22587*(2.0/3.0)+b1f*c*t22547*t22588*(1.0/6.0)+b3f*c*t22538*t22547*(1.0/2.0)))/t22569+a1f*c*c0f*t22570*t22547*(2.0/3.0)-a1p*c*c0p*t22573*t22547*(2.0/3.0))+t22560*t22554*t22555*t22574*t22583*t22579*4.0+Aa*t22560*t22607*t22609*t22579*t22597*(t22586*t22596*4.0+t22554*t22555*t22583*4.0)*2.0+Aa*t22613*t22560*t22615*t22607*t22609*t22597*2.0-(1.0/(t22603*t22603)*t22560*t22615*t22609*t22579*t22597*(b2a*c*t22547*(1.0/3.0)+b4a*t22542*t22587*(2.0/3.0)+b1a*c*t22547*t22588*(1.0/6.0)+b3a*c*t22538*t22547*(1.0/2.0)))/t22606+Aa*a1a*c*t22560*t22615*t22607*t22547*t22579*t22597*(2.0/3.0))-t22560*t22574*t22583*t22586*t22579-Aa*t22560*t22615*t22607*t22609*t22579*t22597*2.0;
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t22622 = rho_a+rho_b;
                double t22623 = 1.0/pow(t22622,1.0/3.0);
                double t22624 = c*t22623;
                double t22625 = sqrt(t22624);
                double t22626 = b1p*t22625;
                double t22627 = pow(t22624,3.0/2.0);
                double t22628 = b3p*t22627;
                double t22629 = c*c;
                double t22630 = 1.0/pow(t22622,2.0/3.0);
                double t22631 = b4p*t22630*t22629;
                double t22632 = b2p*c*t22623;
                double t22633 = t22631+t22632+t22626+t22628;
                double t22634 = 1.0/pow(t22622,7.0/3.0);
                double t22635 = 1.0/pow(t22622,8.0/3.0);
                double t22636 = 1.0/sqrt(t22624);
                double t22637 = a1p*c*t22623;
                double t22638 = t22637+1.0;
                double t22639 = 1.0/c0p;
                double t22640 = 1.0/t22633;
                double t22641 = t22640*t22639*(1.0/2.0);
                double t22642 = t22641+1.0;
                double t22643 = 1.0/t22642;
                double t22644 = 1.0/pow(t22622,4.0/3.0);
                double t22684 = 1.0/pow(t22622,5.0/3.0);
                double t22686 = b4p*t22629*t22684*(2.0/3.0);
                double t22687 = b2p*c*t22644*(1.0/3.0);
                double t22688 = b1p*c*t22644*t22636*(1.0/6.0);
                double t22689 = b3p*c*t22625*t22644*(1.0/2.0);
                double t22645 = t22686+t22687+t22688+t22689;
                double t22646 = rho_a-rho_b;
                double t22647 = 1.0/t22622;
                double t22648 = t22646*t22647;
                double t22649 = two_13*2.0;
                double t22650 = t22649-2.0;
                double t22651 = 1.0/t22650;
                double t22652 = 1.0/c0f;
                double t22653 = b1f*t22625;
                double t22654 = b3f*t22627;
                double t22655 = b4f*t22630*t22629;
                double t22656 = b2f*c*t22623;
                double t22657 = t22653+t22654+t22655+t22656;
                double t22658 = 1.0/t22657;
                double t22659 = t22652*t22658*(1.0/2.0);
                double t22660 = t22659+1.0;
                double t22661 = log(t22660);
                double t22662 = a1f*c*t22623;
                double t22663 = t22662+1.0;
                double t22664 = log(t22642);
                double t22672 = c0f*t22661*t22663*2.0;
                double t22673 = c0p*t22664*t22638*2.0;
                double t22665 = t22672-t22673;
                double t22666 = t22646*t22646;
                double t22667 = t22648+1.0;
                double t22668 = pow(t22667,4.0/3.0);
                double t22669 = -t22648+1.0;
                double t22670 = pow(t22669,4.0/3.0);
                double t22671 = t22670+t22668-2.0;
                double t22674 = 1.0/(t22622*t22622);
                double t22678 = t22646*t22674;
                double t22675 = t22647-t22678;
                double t22676 = 1.0/(t22622*t22622*t22622*t22622);
                double t22677 = pow(t22667,1.0/3.0);
                double t22679 = t22675*t22677*(4.0/3.0);
                double t22680 = pow(t22669,1.0/3.0);
                double t22712 = t22680*t22675*(4.0/3.0);
                double t22681 = -t22712+t22679;
                double t22682 = 1.0/(t22622*t22622*t22622*t22622*t22622);
                double t22683 = t22666*t22666;
                double t22685 = 1.0/(t22633*t22633);
                double t22690 = 1.0/t22660;
                double t22691 = 1.0/(t22657*t22657);
                double t22692 = b4f*t22629*t22684*(2.0/3.0);
                double t22693 = b2f*c*t22644*(1.0/3.0);
                double t22694 = b1f*c*t22644*t22636*(1.0/6.0);
                double t22695 = b3f*c*t22625*t22644*(1.0/2.0);
                double t22696 = t22692+t22693+t22694+t22695;
                double t22697 = t22643*t22645*t22638*t22685;
                double t22698 = a1f*c*c0f*t22661*t22644*(2.0/3.0);
                double t22699 = t22645*t22645;
                double t22700 = 1.0/pow(t22624,3.0/2.0);
                double t22701 = b4p*t22635*t22629*(1.0E1/9.0);
                double t22702 = b2p*c*t22634*(4.0/9.0);
                double t22703 = b1p*c*t22634*t22636*(2.0/9.0);
                double t22704 = b3p*c*t22625*t22634*(2.0/3.0);
                double t22705 = b3p*t22635*t22636*t22629*(1.0/1.2E1);
                double t22706 = t22701+t22702+t22703+t22704+t22705-b1p*t22700*t22635*t22629*(1.0/3.6E1);
                double t22707 = 1.0/(t22633*t22633*t22633);
                double t22708 = t22643*t22707*t22638*t22699*2.0;
                double t22709 = t22696*t22696;
                double t22710 = 1.0/(t22642*t22642);
                double t22711 = 1.0/(t22633*t22633*t22633*t22633);
                double t22753 = t22663*t22690*t22691*t22696;
                double t22754 = a1p*c*c0p*t22644*t22664*(2.0/3.0);
                double t22713 = -t22753-t22754+t22697+t22698;
                double t22714 = t22674*2.0;
                double t22715 = 1.0/(t22622*t22622*t22622);
                double t22733 = t22715*t22646*2.0;
                double t22716 = t22714-t22733;
                double t22717 = t22675*t22675;
                double t22718 = a1p*c*c0p*t22634*t22664*(8.0/9.0);
                double t22719 = 1.0/(t22622*t22622*t22622*t22622*t22622*t22622);
                double t22720 = 1.0/d2fz0;
                double t22721 = 1.0/Aa;
                double t22722 = b1a*t22625;
                double t22723 = b3a*t22627;
                double t22724 = b4a*t22630*t22629;
                double t22725 = b2a*c*t22623;
                double t22726 = t22722+t22723+t22724+t22725;
                double t22727 = 1.0/t22726;
                double t22728 = t22721*t22727*(1.0/2.0);
                double t22729 = t22728+1.0;
                double t22730 = log(t22729);
                double t22731 = a1a*c*t22623;
                double t22732 = t22731+1.0;
                double t22734 = t22680*t22716*(4.0/3.0);
                double t22735 = 1.0/pow(t22667,2.0/3.0);
                double t22736 = t22717*t22735*(4.0/9.0);
                double t22737 = 1.0/pow(t22669,2.0/3.0);
                double t22738 = t22717*t22737*(4.0/9.0);
                double t22739 = t22734+t22736+t22738-t22716*t22677*(4.0/3.0);
                double t22740 = t22682*t22683*4.0;
                double t22752 = t22646*t22666*t22676*4.0;
                double t22741 = t22740-t22752;
                double t22742 = 1.0/t22729;
                double t22743 = t22683*t22676;
                double t22744 = t22743-1.0;
                double t22745 = 1.0/(t22726*t22726);
                double t22746 = b4a*t22629*t22684*(2.0/3.0);
                double t22747 = b2a*c*t22644*(1.0/3.0);
                double t22748 = b1a*c*t22644*t22636*(1.0/6.0);
                double t22749 = b3a*c*t22625*t22644*(1.0/2.0);
                double t22750 = t22746+t22747+t22748+t22749;
                double t22751 = t22750*t22750;
                v_rho_a_rho_a[Q] += scale * t22622*(-t22708-t22718+t22643*t22706*t22638*t22685+t22651*t22671*t22683*t22676*(t22708+t22718-t22643*t22706*t22638*t22685-t22663*t22690*t22709*1.0/(t22657*t22657*t22657)*2.0+t22663*t22690*t22691*(b2f*c*t22634*(4.0/9.0)+b4f*t22635*t22629*(1.0E1/9.0)+b1f*c*t22634*t22636*(2.0/9.0)+b3f*c*t22625*t22634*(2.0/3.0)-b1f*t22700*t22635*t22629*(1.0/3.6E1)+b3f*t22635*t22636*t22629*(1.0/1.2E1))+1.0/(t22660*t22660)*t22652*t22663*t22709*1.0/(t22657*t22657*t22657*t22657)*(1.0/2.0)-a1f*c*c0f*t22634*t22661*(8.0/9.0)-t22710*t22711*t22638*t22639*t22699*(1.0/2.0)+a1f*c*t22644*t22690*t22691*t22696*(2.0/3.0)-a1p*c*t22643*t22644*t22645*t22685*(2.0/3.0))-t22713*t22651*t22671*t22682*t22683*8.0+t22713*t22651*t22681*t22683*t22676*2.0+t22710*t22711*t22638*t22639*t22699*(1.0/2.0)-t22651*t22671*t22665*t22683*t22719*2.0E1+t22651*t22681*t22682*t22665*t22683*8.0-t22651*t22671*t22665*t22666*t22676*1.2E1-t22651*t22665*t22683*t22676*t22739+t22713*t22651*t22671*t22646*t22666*t22676*8.0+t22651*t22671*t22646*t22682*t22665*t22666*3.2E1-t22651*t22681*t22646*t22665*t22666*t22676*8.0+a1p*c*t22643*t22644*t22645*t22685*(2.0/3.0)+Aa*t22720*t22730*t22651*t22732*t22741*t22681*4.0-Aa*t22720*t22730*t22651*t22732*t22744*t22739*2.0-Aa*t22720*t22730*t22651*t22732*t22671*(t22683*t22719*2.0E1+t22666*t22676*1.2E1-t22646*t22682*t22666*3.2E1)*2.0+t22720*t22651*t22732*t22741*t22750*t22742*t22671*t22745*2.0-t22720*t22651*t22732*t22750*t22742*t22681*t22744*t22745*2.0-t22720*t22651*t22732*t22742*t22751*t22671*1.0/(t22726*t22726*t22726)*t22744*2.0+t22720*t22651*t22732*t22742*t22671*t22744*t22745*(b2a*c*t22634*(4.0/9.0)+b4a*t22635*t22629*(1.0E1/9.0)+b1a*c*t22634*t22636*(2.0/9.0)+b3a*c*t22625*t22634*(2.0/3.0)-b1a*t22700*t22635*t22629*(1.0/3.6E1)+b3a*t22635*t22636*t22629*(1.0/1.2E1))-Aa*a1a*c*t22720*t22730*t22651*t22634*t22671*t22744*(8.0/9.0)+Aa*a1a*c*t22720*t22730*t22651*t22644*t22681*t22744*(4.0/3.0)+t22720*t22721*t22651*t22732*t22751*t22671*1.0/(t22726*t22726*t22726*t22726)*t22744*1.0/(t22729*t22729)*(1.0/2.0)-Aa*a1a*c*t22720*t22730*t22651*t22644*t22671*(t22740-t22752)*(4.0/3.0)+a1a*c*t22720*t22651*t22750*t22742*t22644*t22671*t22744*t22745*(2.0/3.0))-t22643*t22645*t22638*t22685*2.0-t22651*t22671*t22683*t22676*(t22753+t22754-t22697-t22698)*2.0+a1p*c*c0p*t22644*t22664*(4.0/3.0)+t22651*t22671*t22682*t22665*t22683*8.0-t22651*t22681*t22665*t22683*t22676*2.0-t22651*t22671*t22646*t22665*t22666*t22676*8.0-Aa*t22720*t22730*t22651*t22732*t22681*t22744*4.0+Aa*t22720*t22730*t22651*t22732*t22671*(t22740-t22752)*4.0-t22720*t22651*t22732*t22750*t22742*t22671*t22744*t22745*2.0+Aa*a1a*c*t22720*t22730*t22651*t22644*t22671*t22744*(4.0/3.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t22756 = rho_a+rho_b;
                double t22757 = 1.0/pow(t22756,1.0/3.0);
                double t22758 = c*t22757;
                double t22759 = sqrt(t22758);
                double t22760 = b1p*t22759;
                double t22761 = pow(t22758,3.0/2.0);
                double t22762 = b3p*t22761;
                double t22763 = c*c;
                double t22764 = 1.0/pow(t22756,2.0/3.0);
                double t22765 = b4p*t22763*t22764;
                double t22766 = b2p*c*t22757;
                double t22767 = t22760+t22762+t22765+t22766;
                double t22768 = 1.0/pow(t22756,7.0/3.0);
                double t22769 = 1.0/pow(t22756,8.0/3.0);
                double t22770 = 1.0/sqrt(t22758);
                double t22771 = a1p*c*t22757;
                double t22772 = t22771+1.0;
                double t22773 = 1.0/c0p;
                double t22774 = 1.0/t22767;
                double t22775 = t22773*t22774*(1.0/2.0);
                double t22776 = t22775+1.0;
                double t22777 = 1.0/t22776;
                double t22778 = 1.0/pow(t22756,4.0/3.0);
                double t22821 = 1.0/pow(t22756,5.0/3.0);
                double t22823 = b4p*t22821*t22763*(2.0/3.0);
                double t22824 = b2p*c*t22778*(1.0/3.0);
                double t22825 = b1p*c*t22770*t22778*(1.0/6.0);
                double t22826 = b3p*c*t22759*t22778*(1.0/2.0);
                double t22779 = t22823+t22824+t22825+t22826;
                double t22780 = rho_a-rho_b;
                double t22781 = 1.0/t22756;
                double t22782 = t22780*t22781;
                double t22783 = two_13*2.0;
                double t22784 = t22783-2.0;
                double t22785 = 1.0/t22784;
                double t22786 = 1.0/c0f;
                double t22787 = b1f*t22759;
                double t22788 = b3f*t22761;
                double t22789 = b4f*t22763*t22764;
                double t22790 = b2f*c*t22757;
                double t22791 = t22790+t22787+t22788+t22789;
                double t22792 = 1.0/t22791;
                double t22793 = t22792*t22786*(1.0/2.0);
                double t22794 = t22793+1.0;
                double t22795 = log(t22794);
                double t22796 = a1f*c*t22757;
                double t22797 = t22796+1.0;
                double t22798 = log(t22776);
                double t22810 = c0f*t22795*t22797*2.0;
                double t22811 = c0p*t22772*t22798*2.0;
                double t22799 = t22810-t22811;
                double t22800 = t22780*t22780;
                double t22801 = t22782+1.0;
                double t22802 = pow(t22801,4.0/3.0);
                double t22803 = -t22782+1.0;
                double t22804 = pow(t22803,4.0/3.0);
                double t22805 = t22802+t22804-2.0;
                double t22806 = 1.0/(t22756*t22756);
                double t22807 = t22806*t22780;
                double t22808 = t22807+t22781;
                double t22809 = 1.0/(t22756*t22756*t22756*t22756);
                double t22812 = pow(t22801,1.0/3.0);
                double t22813 = t22812*t22808*(4.0/3.0);
                double t22814 = pow(t22803,1.0/3.0);
                double t22848 = t22814*t22808*(4.0/3.0);
                double t22815 = t22813-t22848;
                double t22816 = t22800*t22800;
                double t22817 = t22807-t22781;
                double t22818 = t22812*t22817*(4.0/3.0);
                double t22819 = 1.0/(t22756*t22756*t22756*t22756*t22756);
                double t22854 = t22814*t22817*(4.0/3.0);
                double t22820 = t22818-t22854;
                double t22822 = 1.0/(t22767*t22767);
                double t22827 = t22779*t22779;
                double t22828 = 1.0/t22794;
                double t22829 = 1.0/(t22791*t22791);
                double t22830 = 1.0/pow(t22758,3.0/2.0);
                double t22831 = b4p*t22763*t22769*(1.0E1/9.0);
                double t22832 = b2p*c*t22768*(4.0/9.0);
                double t22833 = b1p*c*t22770*t22768*(2.0/9.0);
                double t22834 = b3p*c*t22759*t22768*(2.0/3.0);
                double t22835 = b3p*t22770*t22763*t22769*(1.0/1.2E1);
                double t22836 = t22831+t22832+t22833+t22834+t22835-b1p*t22830*t22763*t22769*(1.0/3.6E1);
                double t22837 = t22822*t22772*t22836*t22777;
                double t22838 = b4f*t22821*t22763*(2.0/3.0);
                double t22839 = b2f*c*t22778*(1.0/3.0);
                double t22840 = b1f*c*t22770*t22778*(1.0/6.0);
                double t22841 = b3f*c*t22759*t22778*(1.0/2.0);
                double t22842 = t22840+t22841+t22838+t22839;
                double t22843 = 1.0/(t22767*t22767*t22767);
                double t22844 = t22842*t22842;
                double t22845 = 1.0/(t22776*t22776);
                double t22846 = 1.0/(t22767*t22767*t22767*t22767);
                double t22847 = t22772*t22773*t22827*t22845*t22846*(1.0/2.0);
                double t22849 = t22822*t22772*t22777*t22779;
                double t22850 = a1f*c*c0f*t22795*t22778*(2.0/3.0);
                double t22852 = t22842*t22828*t22829*t22797;
                double t22853 = a1p*c*c0p*t22778*t22798*(2.0/3.0);
                double t22851 = t22850-t22852-t22853+t22849;
                double t22855 = 1.0/(t22756*t22756*t22756);
                double t22856 = a1p*c*t22822*t22777*t22778*t22779*(2.0/3.0);
                double t22857 = 1.0/(t22756*t22756*t22756*t22756*t22756*t22756);
                double t22858 = 1.0/d2fz0;
                double t22859 = 1.0/Aa;
                double t22860 = b1a*t22759;
                double t22861 = b3a*t22761;
                double t22862 = b4a*t22763*t22764;
                double t22863 = b2a*c*t22757;
                double t22864 = t22860+t22861+t22862+t22863;
                double t22865 = 1.0/t22864;
                double t22866 = t22865*t22859*(1.0/2.0);
                double t22867 = t22866+1.0;
                double t22868 = log(t22867);
                double t22869 = a1a*c*t22757;
                double t22870 = t22869+1.0;
                double t22871 = t22816*t22819*4.0;
                double t22872 = t22812*t22780*t22855*(8.0/3.0);
                double t22873 = 1.0/pow(t22801,2.0/3.0);
                double t22874 = t22808*t22817*t22873*(4.0/9.0);
                double t22875 = 1.0/pow(t22803,2.0/3.0);
                double t22876 = t22808*t22817*t22875*(4.0/9.0);
                double t22877 = t22872+t22874+t22876-t22814*t22780*t22855*(8.0/3.0);
                double t22878 = t22800*t22780*t22809*4.0;
                double t22879 = 1.0/t22867;
                double t22880 = t22871+t22878;
                double t22881 = 1.0/(t22864*t22864);
                double t22882 = b4a*t22821*t22763*(2.0/3.0);
                double t22883 = b2a*c*t22778*(1.0/3.0);
                double t22884 = b1a*c*t22770*t22778*(1.0/6.0);
                double t22885 = b3a*c*t22759*t22778*(1.0/2.0);
                double t22886 = t22882+t22883+t22884+t22885;
                double t22887 = t22816*t22809;
                double t22888 = t22887-1.0;
                double t22889 = t22886*t22886;
                double t22890 = t22871-t22878;
                double t22891 = t22843*t22772*t22827*t22777*2.0;
                double t22892 = a1p*c*c0p*t22768*t22798*(8.0/9.0);
                v_rho_a_rho_b[Q] += scale * -t22756*(-t22837+t22891-t22847-t22856+t22892+t22805*t22816*t22809*t22785*(t22837-t22891+t22847+t22856-t22892+t22844*1.0/(t22791*t22791*t22791)*t22828*t22797*2.0-t22828*t22829*t22797*(b2f*c*t22768*(4.0/9.0)+b4f*t22763*t22769*(1.0E1/9.0)+b1f*c*t22770*t22768*(2.0/9.0)+b3f*c*t22759*t22768*(2.0/3.0)-b1f*t22830*t22763*t22769*(1.0/3.6E1)+b3f*t22770*t22763*t22769*(1.0/1.2E1))-t22844*1.0/(t22791*t22791*t22791*t22791)*1.0/(t22794*t22794)*t22786*t22797*(1.0/2.0)+a1f*c*c0f*t22768*t22795*(8.0/9.0)-a1f*c*t22842*t22828*t22829*t22778*(2.0/3.0))+t22820*t22851*t22816*t22809*t22785+t22805*t22851*t22816*t22819*t22785*8.0+t22815*t22851*t22816*t22809*t22785-t22800*t22805*t22809*t22785*t22799*1.2E1+t22820*t22816*t22819*t22785*t22799*4.0+t22815*t22816*t22819*t22785*t22799*4.0+t22805*t22816*t22785*t22857*t22799*2.0E1+t22816*t22809*t22785*t22877*t22799+t22800*t22820*t22780*t22809*t22785*t22799*4.0-t22800*t22815*t22780*t22809*t22785*t22799*4.0+Aa*t22820*t22870*t22880*t22785*t22858*t22868*2.0+Aa*t22815*t22870*t22890*t22785*t22858*t22868*2.0+Aa*t22870*t22785*t22858*t22868*t22877*t22888*2.0-Aa*t22805*t22870*t22785*t22858*t22868*(t22800*t22809*1.2E1-t22816*t22857*2.0E1)*2.0-t22805*t22870*t22880*t22881*t22785*t22858*t22886*t22879-t22805*t22870*t22881*t22890*t22785*t22858*t22886*t22879-t22820*t22870*t22881*t22785*t22858*t22886*t22879*t22888-t22815*t22870*t22881*t22785*t22858*t22886*t22879*t22888+t22805*t22870*1.0/(t22864*t22864*t22864)*t22785*t22858*t22879*t22888*t22889*2.0-t22805*t22870*t22881*t22785*t22858*t22879*t22888*(b2a*c*t22768*(4.0/9.0)+b4a*t22763*t22769*(1.0E1/9.0)+b1a*c*t22770*t22768*(2.0/9.0)+b3a*c*t22759*t22768*(2.0/3.0)-b1a*t22830*t22763*t22769*(1.0/3.6E1)+b3a*t22770*t22763*t22769*(1.0/1.2E1))+Aa*a1a*c*t22805*t22880*t22785*t22858*t22778*t22868*(2.0/3.0)+Aa*a1a*c*t22805*t22890*t22785*t22858*t22778*t22868*(2.0/3.0)+Aa*a1a*c*t22820*t22785*t22858*t22778*t22868*t22888*(2.0/3.0)+Aa*a1a*c*t22805*t22785*t22768*t22858*t22868*t22888*(8.0/9.0)+Aa*a1a*c*t22815*t22785*t22858*t22778*t22868*t22888*(2.0/3.0)-t22805*t22870*1.0/(t22864*t22864*t22864*t22864)*t22785*t22858*1.0/(t22867*t22867)*t22859*t22888*t22889*(1.0/2.0)-a1a*c*t22805*t22881*t22785*t22858*t22778*t22886*t22879*t22888*(2.0/3.0))-t22822*t22772*t22777*t22779*2.0+t22805*t22816*t22809*t22785*(t22850-t22852-t22853+t22849)*2.0+a1p*c*c0p*t22778*t22798*(4.0/3.0)+t22816*t22809*t22785*t22799*(t22818-t22814*(t22807-t22781)*(4.0/3.0))+t22805*t22816*t22819*t22785*t22799*8.0+t22815*t22816*t22809*t22785*t22799+Aa*t22870*t22785*t22858*t22868*t22888*(t22818-t22814*(t22807-t22781)*(4.0/3.0))*2.0+Aa*t22805*t22870*t22880*t22785*t22858*t22868*2.0+Aa*t22815*t22870*t22785*t22858*t22868*t22888*2.0+Aa*t22805*t22870*t22785*t22858*t22868*(t22871-t22878)*2.0-t22805*t22870*t22881*t22785*t22858*t22886*t22879*t22888*2.0+Aa*a1a*c*t22805*t22785*t22858*t22778*t22868*t22888*(4.0/3.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t22894 = rho_a+rho_b;
                double t22895 = 1.0/pow(t22894,1.0/3.0);
                double t22896 = c*t22895;
                double t22897 = sqrt(t22896);
                double t22898 = b1p*t22897;
                double t22899 = pow(t22896,3.0/2.0);
                double t22900 = b3p*t22899;
                double t22901 = c*c;
                double t22902 = 1.0/pow(t22894,2.0/3.0);
                double t22903 = b4p*t22901*t22902;
                double t22904 = b2p*c*t22895;
                double t22905 = t22900+t22903+t22904+t22898;
                double t22906 = 1.0/pow(t22894,7.0/3.0);
                double t22907 = 1.0/pow(t22894,8.0/3.0);
                double t22908 = 1.0/sqrt(t22896);
                double t22909 = a1p*c*t22895;
                double t22910 = t22909+1.0;
                double t22911 = 1.0/c0p;
                double t22912 = 1.0/t22905;
                double t22913 = t22911*t22912*(1.0/2.0);
                double t22914 = t22913+1.0;
                double t22915 = 1.0/t22914;
                double t22916 = 1.0/pow(t22894,4.0/3.0);
                double t22956 = 1.0/pow(t22894,5.0/3.0);
                double t22958 = b4p*t22901*t22956*(2.0/3.0);
                double t22959 = b2p*c*t22916*(1.0/3.0);
                double t22960 = b1p*c*t22916*t22908*(1.0/6.0);
                double t22961 = b3p*c*t22916*t22897*(1.0/2.0);
                double t22917 = t22960+t22961+t22958+t22959;
                double t22918 = rho_a-rho_b;
                double t22919 = 1.0/t22894;
                double t22920 = t22918*t22919;
                double t22921 = two_13*2.0;
                double t22922 = t22921-2.0;
                double t22923 = 1.0/t22922;
                double t22924 = 1.0/c0f;
                double t22925 = b1f*t22897;
                double t22926 = b3f*t22899;
                double t22927 = b4f*t22901*t22902;
                double t22928 = b2f*c*t22895;
                double t22929 = t22925+t22926+t22927+t22928;
                double t22930 = 1.0/t22929;
                double t22931 = t22930*t22924*(1.0/2.0);
                double t22932 = t22931+1.0;
                double t22933 = log(t22932);
                double t22934 = a1f*c*t22895;
                double t22935 = t22934+1.0;
                double t22936 = log(t22914);
                double t22944 = c0f*t22933*t22935*2.0;
                double t22945 = c0p*t22910*t22936*2.0;
                double t22937 = t22944-t22945;
                double t22938 = t22918*t22918;
                double t22939 = t22920+1.0;
                double t22940 = pow(t22939,4.0/3.0);
                double t22941 = -t22920+1.0;
                double t22942 = pow(t22941,4.0/3.0);
                double t22943 = t22940+t22942-2.0;
                double t22946 = 1.0/(t22894*t22894);
                double t22947 = t22918*t22946;
                double t22948 = t22919+t22947;
                double t22949 = 1.0/(t22894*t22894*t22894*t22894);
                double t22950 = pow(t22939,1.0/3.0);
                double t22951 = t22950*t22948*(4.0/3.0);
                double t22952 = pow(t22941,1.0/3.0);
                double t22984 = t22952*t22948*(4.0/3.0);
                double t22953 = t22951-t22984;
                double t22954 = 1.0/(t22894*t22894*t22894*t22894*t22894);
                double t22955 = t22938*t22938;
                double t22957 = 1.0/(t22905*t22905);
                double t22962 = 1.0/t22932;
                double t22963 = 1.0/(t22929*t22929);
                double t22964 = b4f*t22901*t22956*(2.0/3.0);
                double t22965 = b2f*c*t22916*(1.0/3.0);
                double t22966 = b1f*c*t22916*t22908*(1.0/6.0);
                double t22967 = b3f*c*t22916*t22897*(1.0/2.0);
                double t22968 = t22964+t22965+t22966+t22967;
                double t22969 = t22910*t22915*t22917*t22957;
                double t22970 = a1f*c*c0f*t22933*t22916*(2.0/3.0);
                double t22971 = t22917*t22917;
                double t22972 = 1.0/pow(t22896,3.0/2.0);
                double t22973 = b4p*t22901*t22907*(1.0E1/9.0);
                double t22974 = b2p*c*t22906*(4.0/9.0);
                double t22975 = b1p*c*t22906*t22908*(2.0/9.0);
                double t22976 = b3p*c*t22906*t22897*(2.0/3.0);
                double t22977 = b3p*t22901*t22907*t22908*(1.0/1.2E1);
                double t22978 = t22973+t22974+t22975+t22976+t22977-b1p*t22901*t22907*t22972*(1.0/3.6E1);
                double t22979 = 1.0/(t22905*t22905*t22905);
                double t22980 = t22910*t22915*t22971*t22979*2.0;
                double t22981 = t22968*t22968;
                double t22982 = 1.0/(t22914*t22914);
                double t22983 = 1.0/(t22905*t22905*t22905*t22905);
                double t22985 = t22946*2.0;
                double t22986 = 1.0/(t22894*t22894*t22894);
                double t22987 = t22918*t22986*2.0;
                double t22988 = t22985+t22987;
                double t22989 = t22948*t22948;
                double t22990 = a1p*c*c0p*t22906*t22936*(8.0/9.0);
                double t22991 = 1.0/(t22894*t22894*t22894*t22894*t22894*t22894);
                double t22992 = 1.0/d2fz0;
                double t22993 = 1.0/Aa;
                double t22994 = b1a*t22897;
                double t22995 = b3a*t22899;
                double t22996 = b4a*t22901*t22902;
                double t22997 = b2a*c*t22895;
                double t22998 = t22994+t22995+t22996+t22997;
                double t22999 = 1.0/t22998;
                double t23000 = t22993*t22999*(1.0/2.0);
                double t23001 = t23000+1.0;
                double t23002 = log(t23001);
                double t23003 = a1a*c*t22895;
                double t23004 = t23003+1.0;
                double t23005 = t22950*t22988*(4.0/3.0);
                double t23006 = 1.0/pow(t22939,2.0/3.0);
                double t23007 = t22989*t23006*(4.0/9.0);
                double t23008 = 1.0/pow(t22941,2.0/3.0);
                double t23009 = t22989*t23008*(4.0/9.0);
                double t23010 = t23005+t23007+t23009-t22952*t22988*(4.0/3.0);
                double t23011 = t22918*t22938*t22949*4.0;
                double t23012 = t22954*t22955*4.0;
                double t23013 = t23011+t23012;
                double t23014 = 1.0/t23001;
                double t23015 = t22955*t22949;
                double t23016 = t23015-1.0;
                double t23017 = 1.0/(t22998*t22998);
                double t23018 = b4a*t22901*t22956*(2.0/3.0);
                double t23019 = b2a*c*t22916*(1.0/3.0);
                double t23020 = b1a*c*t22916*t22908*(1.0/6.0);
                double t23021 = b3a*c*t22916*t22897*(1.0/2.0);
                double t23022 = t23020+t23021+t23018+t23019;
                double t23023 = t23022*t23022;
                double t23025 = t22935*t22962*t22963*t22968;
                double t23026 = a1p*c*c0p*t22916*t22936*(2.0/3.0);
                double t23024 = t22970+t22969-t23025-t23026;
                v_rho_b_rho_b[Q] += scale * -t22894*(t22980+t22990-t22910*t22915*t22957*t22978-t22923*t22943*t22955*t22949*(t22980+t22990-t22910*t22915*t22957*t22978-t22935*t22962*t22981*1.0/(t22929*t22929*t22929)*2.0+t22935*t22962*t22963*(b2f*c*t22906*(4.0/9.0)+b4f*t22901*t22907*(1.0E1/9.0)+b1f*c*t22906*t22908*(2.0/9.0)+b3f*c*t22906*t22897*(2.0/3.0)-b1f*t22901*t22907*t22972*(1.0/3.6E1)+b3f*t22901*t22907*t22908*(1.0/1.2E1))+1.0/(t22932*t22932)*t22924*t22935*t22981*1.0/(t22929*t22929*t22929*t22929)*(1.0/2.0)-a1f*c*c0f*t22906*t22933*(8.0/9.0)-t22910*t22911*t22971*t22982*t22983*(1.0/2.0)+a1f*c*t22916*t22962*t22963*t22968*(2.0/3.0)-a1p*c*t22915*t22916*t22917*t22957*(2.0/3.0))-t22910*t22911*t22971*t22982*t22983*(1.0/2.0)+t22923*t22943*t22937*t22955*t22991*2.0E1+t22923*t22953*t22954*t22937*t22955*8.0+t22923*t22943*t22937*t22938*t22949*1.2E1+t22923*t22943*t22954*t22955*t23024*8.0+t22923*t22937*t22955*t22949*t23010+t22923*t22953*t22955*t22949*t23024*2.0+t22923*t22943*t22918*t22954*t22937*t22938*3.2E1+t22923*t22953*t22918*t22937*t22938*t22949*8.0+t22923*t22943*t22918*t22938*t22949*t23024*8.0-a1p*c*t22915*t22916*t22917*t22957*(2.0/3.0)+Aa*t22923*t22953*t22992*t23002*t23004*t23013*4.0+Aa*t22923*t22992*t23010*t23002*t23004*t23016*2.0+Aa*t22923*t22943*t22992*t23002*t23004*(t22955*t22991*2.0E1+t22938*t22949*1.2E1+t22918*t22954*t22938*3.2E1)*2.0-t22923*t22943*t22992*t23004*t23013*t23022*t23014*t23017*2.0-t22923*t22953*t22992*t23004*t23022*t23014*t23016*t23017*2.0+t22923*t22943*t22992*1.0/(t22998*t22998*t22998)*t23004*t23014*t23023*t23016*2.0-t22923*t22943*t22992*t23004*t23014*t23016*t23017*(b2a*c*t22906*(4.0/9.0)+b4a*t22901*t22907*(1.0E1/9.0)+b1a*c*t22906*t22908*(2.0/9.0)+b3a*c*t22906*t22897*(2.0/3.0)-b1a*t22901*t22907*t22972*(1.0/3.6E1)+b3a*t22901*t22907*t22908*(1.0/1.2E1))+Aa*a1a*c*t22923*t22916*t22943*t22992*t23002*t23013*(4.0/3.0)+Aa*a1a*c*t22923*t22906*t22943*t22992*t23002*t23016*(8.0/9.0)+Aa*a1a*c*t22923*t22916*t22953*t22992*t23002*t23016*(4.0/3.0)-t22923*t22943*t22992*t22993*1.0/(t22998*t22998*t22998*t22998)*1.0/(t23001*t23001)*t23004*t23023*t23016*(1.0/2.0)-a1a*c*t22923*t22916*t22943*t22992*t23022*t23014*t23016*t23017*(2.0/3.0))-t22910*t22915*t22917*t22957*2.0+t22923*t22943*t22955*t22949*(t22970+t22969-t23025-t23026)*2.0+a1p*c*c0p*t22916*t22936*(4.0/3.0)+t22923*t22943*t22954*t22937*t22955*8.0+t22923*t22953*t22937*t22955*t22949*2.0+t22923*t22943*t22918*t22937*t22938*t22949*8.0+Aa*t22923*t22943*t22992*t23002*t23004*t23013*4.0+Aa*t22923*t22953*t22992*t23002*t23004*t23016*4.0-t22923*t22943*t22992*t23004*t23022*t23014*t23016*t23017*2.0+Aa*a1a*c*t22923*t22916*t22943*t22992*t23002*t23016*(4.0/3.0);
            }
            
        }
    }
}

}
