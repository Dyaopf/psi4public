#include <libmints/vector.h>
#include "FT97_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

FT97_CFunctional::FT97_CFunctional()
{
    name_ = "FT97_C";
    description_ = "    FT97 Correlation (Involves Ei functions)\n";
    citation_ = "    M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c0"] =   3.1090690869654901E-02;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["tspi_m13"] =   2.0678349696646670E-01;
    parameters_["a1"] =   1.6221187669999999E+00;
    parameters_["a2"] =   4.8995807600000002E-01;
    parameters_["a3"] =   1.3790219410000000E+00;
    parameters_["a4"] =   4.9462813529999998E+00;
    parameters_["a5"] =   3.6006120589999999E+00;
    parameters_["kaa0"] =   1.2008017740000001E+00;
    parameters_["kaa1"] =  -8.1290434499999997E-01;
    parameters_["kaa2"] =   8.5961444499999995E-01;
    parameters_["raa1"] =   6.5563882299999998E-01;
    parameters_["raa2"] =   1.0893388479999999E+00;
    parameters_["kab0"] =   1.2915510740000000E+00;
    parameters_["kab1"] =  -3.4906417299999998E-01;
    parameters_["rab1"] =   8.3275879999999997E-02;
    parameters_["k1"] =   9.3901599999999996E-01;
    parameters_["k2"] =   1.7331700000000001E+00;
}
FT97_CFunctional::~FT97_CFunctional()
{
}
void FT97_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c0 = parameters_["c0"];
    double c = parameters_["c"];
    double tspi_m13 = parameters_["tspi_m13"];
    double a1 = parameters_["a1"];
    double a2 = parameters_["a2"];
    double a3 = parameters_["a3"];
    double a4 = parameters_["a4"];
    double a5 = parameters_["a5"];
    double kaa0 = parameters_["kaa0"];
    double kaa1 = parameters_["kaa1"];
    double kaa2 = parameters_["kaa2"];
    double raa1 = parameters_["raa1"];
    double raa2 = parameters_["raa2"];
    double kab0 = parameters_["kab0"];
    double kab1 = parameters_["kab1"];
    double rab1 = parameters_["rab1"];
    double k1 = parameters_["k1"];
    double k2 = parameters_["k2"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t27759 = tspi_m13*tspi_m13;
                double t27760 = 1.0/pow(rho_b,1.0/3.0);
                double t27761 = a2*a2;
                double t27762 = gamma_bb*gamma_bb;
                double t27763 = 1.0/pow(rho_b,1.6E1/3.0);
                double t27764 = t27759*t27759;
                double t27765 = c*t27760;
                double t27766 = a4*a4;
                double t27767 = 1.0/c;
                double t27768 = 1.0/pow(rho_b,7.0/3.0);
                double t27769 = sqrt(t27765);
                double t27770 = t27762*t27763*t27764*t27766*2.0;
                double t27771 = exp(t27770);
                double t27772 = t27762*t27763*t27764*t27766;
                double t27773 = t27772+1.0;
                double t27774 = 1.0/(t27773*t27773);
                double t27775 = a5*gamma_bb*t27767*t27759*t27768;
                double t27776 = t27775+1.0;
                double t27787 = raa2*t27769;
                double t27777 = exp(-t27787);
                double t27778 = t27777-1.0;
                double t27779 = kaa2*t27778;
                double t27780 = pow(t27765,2.0/5.0);
                double t27788 = raa1*t27780;
                double t27781 = exp(-t27788);
                double t27782 = t27781-1.0;
                double t27783 = kaa1*t27782;
                double t27784 = -kaa0+t27783+t27779;
                double t27785 = 1.0/(t27784*t27784);
                double t27786 = c*c0*t27760*t27771*t27774*t27776*t27785*(2.0/3.0);
                double t27789 = exp(t27786);
                double t27790 = Ei(-t27786);
                double t27791 = 1.0/t27773;
                double t27792 = c*c0*t27760*t27771*t27776*t27785*(2.0/3.0);
                double t27793 = sqrt(t27792);
                v[Q] += scale * c0*rho_b*exp(-(c*c)*1.0/pow(rho_b,2.0/3.0)*1.0/pow(k1*t27769+c*k2*t27760,2.0))*heaviside(c*c0*t27760*(-2.0/3.0)+exp(-t27761*t27762*t27763*t27764)*1.0/sqrt(a3*gamma_bb*t27767*t27759*t27768+1.0)*(kab0-kab1*(exp(-rab1*pow(t27765,4.0/5.0))-1.0))*(t27761*t27762*t27763*t27764+a1*gamma_bb*1.0/pow(rho_b,8.0/3.0)*t27759+1.0)*1.0E5)*(t27790*t27789+((c*c0*t27760*t27771*t27790*t27774*t27776*t27785*t27789*(2.0/3.0)+1.0)*(t27791*t27793*4.0+c*c0*t27760*t27771*t27774*t27776*t27785*(8.0/3.0)+6.0))/(t27791*t27793*6.0+c*c0*t27760*t27771*t27774*t27776*t27785*4.0+3.0))*(1.0/2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t27796 = tspi_m13*tspi_m13;
                double t27797 = 1.0/pow(rho_b,1.0/3.0);
                double t27798 = a2*a2;
                double t27799 = gamma_bb*gamma_bb;
                double t27800 = 1.0/pow(rho_b,1.6E1/3.0);
                double t27801 = t27796*t27796;
                double t27802 = c*t27797;
                double t27803 = a4*a4;
                double t27804 = 1.0/c;
                double t27805 = 1.0/pow(rho_b,7.0/3.0);
                double t27806 = sqrt(t27802);
                double t27807 = t27800*t27801*t27803*t27799*2.0;
                double t27808 = exp(t27807);
                double t27809 = t27800*t27801*t27803*t27799;
                double t27810 = t27809+1.0;
                double t27811 = 1.0/(t27810*t27810);
                double t27812 = a5*gamma_bb*t27804*t27805*t27796;
                double t27813 = t27812+1.0;
                double t27824 = raa2*t27806;
                double t27814 = exp(-t27824);
                double t27815 = t27814-1.0;
                double t27816 = kaa2*t27815;
                double t27817 = pow(t27802,2.0/5.0);
                double t27825 = raa1*t27817;
                double t27818 = exp(-t27825);
                double t27819 = t27818-1.0;
                double t27820 = kaa1*t27819;
                double t27821 = -kaa0+t27820+t27816;
                double t27822 = 1.0/(t27821*t27821);
                double t27823 = c*c0*t27811*t27813*t27822*t27808*t27797*(2.0/3.0);
                double t27826 = exp(t27823);
                double t27827 = Ei(-t27823);
                double t27828 = 1.0/t27810;
                double t27829 = c*c0*t27813*t27822*t27808*t27797*(2.0/3.0);
                double t27830 = sqrt(t27829);
                double t27831 = t27800*t27801*t27798*t27799;
                double t27832 = pow(t27802,4.0/5.0);
                double t27882 = rab1*t27832;
                double t27833 = exp(-t27882);
                double t27834 = t27833-1.0;
                double t27883 = kab1*t27834;
                double t27835 = kab0-t27883;
                double t27836 = a3*gamma_bb*t27804*t27805*t27796;
                double t27837 = t27836+1.0;
                double t27838 = 1.0/sqrt(t27837);
                double t27839 = 1.0/pow(rho_b,8.0/3.0);
                double t27840 = a1*gamma_bb*t27839*t27796;
                double t27841 = t27831+t27840+1.0;
                double t27842 = c*c;
                double t27843 = 1.0/pow(rho_b,2.0/3.0);
                double t27844 = k1*t27806;
                double t27845 = c*k2*t27797;
                double t27846 = t27844+t27845;
                double t27847 = 1.0/(t27846*t27846);
                double t27887 = t27842*t27843*t27847;
                double t27848 = exp(-t27887);
                double t27849 = c*c0*t27811*t27813*t27822*t27808*t27826*t27827*t27797*(2.0/3.0);
                double t27850 = t27849+1.0;
                double t27851 = t27830*t27828*6.0;
                double t27852 = c*c0*t27811*t27813*t27822*t27808*t27797*4.0;
                double t27853 = t27851+t27852+3.0;
                double t27854 = 1.0/t27853;
                double t27855 = 1.0/pow(rho_b,4.0/3.0);
                double t27856 = 1.0/pow(rho_b,1.1E1/3.0);
                double t27857 = 1.0/sqrt(t27802);
                double t27858 = c*kaa2*raa2*t27814*t27855*t27857*(1.0/6.0);
                double t27859 = 1.0/pow(t27802,3.0/5.0);
                double t27860 = c*kaa1*raa1*t27818*t27855*t27859*(2.0/1.5E1);
                double t27861 = t27860+t27858;
                double t27862 = 1.0/(t27821*t27821*t27821);
                double t27863 = 1.0/pow(rho_b,2.0E1/3.0);
                double t27864 = 1.0/(t27810*t27810*t27810);
                double t27865 = t27830*t27828*4.0;
                double t27866 = c*c0*t27811*t27813*t27822*t27808*t27797*(8.0/3.0);
                double t27867 = t27865+t27866+6.0;
                double t27868 = c*c0*t27811*t27813*t27822*t27808*t27855*(2.0/9.0);
                double t27869 = a5*c0*gamma_bb*t27811*t27822*t27808*t27856*t27796*(1.4E1/9.0);
                double t27870 = c*c0*t27811*t27813*t27861*t27808*t27862*t27797*(4.0/3.0);
                double t27871 = c*c0*t27801*t27811*t27803*t27813*t27822*t27808*t27863*t27799*(6.4E1/9.0);
                double t27873 = c*c0*t27801*t27803*t27813*t27822*t27808*t27863*t27864*t27799*(6.4E1/9.0);
                double t27872 = t27870+t27871-t27873+t27868+t27869;
                double t27874 = c*c0*t27813*t27822*t27808*t27855*(2.0/9.0);
                double t27875 = a5*c0*gamma_bb*t27822*t27808*t27856*t27796*(1.4E1/9.0);
                double t27876 = c*c0*t27813*t27861*t27808*t27862*t27797*(4.0/3.0);
                double t27877 = c*c0*t27801*t27803*t27813*t27822*t27808*t27863*t27799*(6.4E1/9.0);
                double t27878 = t27874+t27875+t27876+t27877;
                double t27879 = 1.0/sqrt(t27829);
                double t27880 = 1.0/pow(rho_b,1.9E1/3.0);
                double t27881 = exp(-t27831);
                double t27884 = t27841*t27835*t27881*t27838*1.0E5;
                double t27891 = c*c0*t27797*(2.0/3.0);
                double t27885 = -t27891+t27884;
                double t27886 = heaviside(t27885);
                double t27888 = t27826*t27827;
                double t27889 = t27850*t27854*t27867;
                double t27890 = t27888+t27889;
                v_rho_b[Q] += scale * c0*t27890*t27848*heaviside(c*c0*t27797*(-2.0/3.0)+t27841*t27835*t27838*exp(-t27800*t27801*t27798*t27799)*1.0E5)*(1.0/2.0)-c0*rho_b*t27848*t27886*(t27850*t27854*(t27828*t27878*t27879*2.0-t27801*t27811*t27803*t27830*t27880*t27799*(6.4E1/3.0)+c*c0*t27811*t27813*t27822*t27808*t27855*(8.0/9.0)+a5*c0*gamma_bb*t27811*t27822*t27808*t27856*t27796*(5.6E1/9.0)+c*c0*t27811*t27813*t27861*t27808*t27862*t27797*(1.6E1/3.0)+c*c0*t27801*t27811*t27803*t27813*t27822*t27808*t27863*t27799*(2.56E2/9.0)-c*c0*t27801*t27803*t27813*t27822*t27808*t27863*t27864*t27799*(2.56E2/9.0))+t27854*t27867*(t27870+t27871-t27873+t27868+t27869+c*c0*t27811*t27813*t27822*t27808*t27826*t27827*t27855*(2.0/9.0)+a5*c0*gamma_bb*t27811*t27822*t27808*t27826*t27827*t27856*t27796*(1.4E1/9.0)+c*c0*t27811*t27813*t27822*t27808*t27826*t27827*t27872*t27797*(2.0/3.0)+c*c0*t27811*t27813*t27861*t27808*t27826*t27862*t27827*t27797*(4.0/3.0)+c*c0*t27801*t27811*t27803*t27813*t27822*t27808*t27826*t27827*t27863*t27799*(6.4E1/9.0)-c*c0*t27801*t27803*t27813*t27822*t27808*t27826*t27827*t27863*t27864*t27799*(6.4E1/9.0))+t27826*t27827*t27872-t27850*1.0/(t27853*t27853)*t27867*(t27828*t27878*t27879*3.0-t27801*t27811*t27803*t27830*t27880*t27799*3.2E1+c*c0*t27811*t27813*t27822*t27808*t27855*(4.0/3.0)+a5*c0*gamma_bb*t27811*t27822*t27808*t27856*t27796*(2.8E1/3.0)+c*c0*t27811*t27813*t27861*t27808*t27862*t27797*8.0+c*c0*t27801*t27811*t27803*t27813*t27822*t27808*t27863*t27799*(1.28E2/3.0)-c*c0*t27801*t27803*t27813*t27822*t27808*t27863*t27864*t27799*(1.28E2/3.0))+(pow(rho_b,1.0/3.0)*(t27810*t27810)*(t27821*t27821)*t27804*t27872*exp(-t27807)*(3.0/2.0))/(c0*t27813))*(1.0/2.0)+c0*rho_b*t27890*t27848*t27886*(1.0/pow(rho_b,5.0/3.0)*t27842*t27847*(2.0/3.0)-t27842*t27843*1.0/(t27846*t27846*t27846)*(c*k2*t27855*(1.0/3.0)+c*k1*t27855*t27857*(1.0/6.0))*2.0)*(1.0/2.0)+c0*rho_b*t27890*t27848*dirac(t27891-t27884)*(c*c0*t27855*(2.0/9.0)-t27835*t27881*t27838*(a1*gamma_bb*t27856*t27796*(8.0/3.0)+t27801*t27880*t27798*t27799*(1.6E1/3.0))*1.0E5+t27801*t27841*t27835*t27880*t27881*t27838*t27798*t27799*(1.6E6/3.0)+a3*gamma_bb*1.0/pow(rho_b,1.0E1/3.0)*t27804*t27841*t27835*t27881*1.0/pow(t27837,3.0/2.0)*t27796*(3.5E5/3.0)-c*kab1*rab1*1.0/pow(t27802,1.0/5.0)*t27841*t27833*t27881*t27855*t27838*(8.0E4/3.0))*(1.0/2.0);
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t27895 = tspi_m13*tspi_m13;
                double t27896 = 1.0/pow(rho_b,1.0/3.0);
                double t27897 = a2*a2;
                double t27898 = gamma_bb*gamma_bb;
                double t27899 = 1.0/pow(rho_b,1.6E1/3.0);
                double t27900 = t27895*t27895;
                double t27901 = c*t27896;
                double t27902 = a4*a4;
                double t27903 = 1.0/c;
                double t27904 = 1.0/pow(rho_b,7.0/3.0);
                double t27905 = sqrt(t27901);
                double t27906 = t27900*t27902*t27898*t27899*2.0;
                double t27907 = exp(t27906);
                double t27908 = t27900*t27902*t27898*t27899;
                double t27909 = t27908+1.0;
                double t27910 = 1.0/(t27909*t27909);
                double t27911 = a5*gamma_bb*t27903*t27904*t27895;
                double t27912 = t27911+1.0;
                double t27924 = raa2*t27905;
                double t27913 = exp(-t27924);
                double t27914 = t27913-1.0;
                double t27915 = kaa2*t27914;
                double t27916 = pow(t27901,2.0/5.0);
                double t27925 = raa1*t27916;
                double t27917 = exp(-t27925);
                double t27918 = t27917-1.0;
                double t27919 = kaa1*t27918;
                double t27920 = -kaa0+t27915+t27919;
                double t27921 = 1.0/(t27920*t27920);
                double t27922 = c*c0*t27910*t27912*t27921*t27907*t27896*(2.0/3.0);
                double t27923 = 1.0/pow(rho_b,8.0/3.0);
                double t27926 = 1.0/pow(rho_b,1.7E1/3.0);
                double t27927 = exp(t27922);
                double t27928 = Ei(-t27922);
                double t27929 = 1.0/t27909;
                double t27930 = c*c0*t27912*t27921*t27907*t27896*(2.0/3.0);
                double t27931 = sqrt(t27930);
                double t27932 = 1.0/(t27909*t27909*t27909);
                double t27933 = t27931*t27929*6.0;
                double t27934 = c*c0*t27910*t27912*t27921*t27907*t27896*4.0;
                double t27935 = t27933+t27934+3.0;
                double t27936 = 1.0/t27935;
                double t27937 = a5*c0*t27910*t27921*t27923*t27907*t27895*(2.0/3.0);
                double t27938 = c*c0*gamma_bb*t27900*t27910*t27902*t27912*t27921*t27907*t27926*(8.0/3.0);
                double t27949 = c*c0*gamma_bb*t27900*t27902*t27912*t27921*t27932*t27907*t27926*(8.0/3.0);
                double t27939 = t27937+t27938-t27949;
                double t27940 = c*c0*t27910*t27912*t27921*t27907*t27927*t27928*t27896*(2.0/3.0);
                double t27941 = t27940+1.0;
                double t27942 = t27931*t27929*4.0;
                double t27943 = c*c0*t27910*t27912*t27921*t27907*t27896*(8.0/3.0);
                double t27944 = t27942+t27943+6.0;
                double t27945 = a5*c0*t27921*t27923*t27907*t27895*(2.0/3.0);
                double t27946 = c*c0*gamma_bb*t27900*t27902*t27912*t27921*t27907*t27926*(8.0/3.0);
                double t27947 = t27945+t27946;
                double t27948 = 1.0/sqrt(t27930);
                double t27950 = t27900*t27897*t27898*t27899;
                double t27951 = pow(t27901,4.0/5.0);
                double t27968 = rab1*t27951;
                double t27952 = exp(-t27968);
                double t27953 = t27952-1.0;
                double t27969 = kab1*t27953;
                double t27954 = kab0-t27969;
                double t27955 = a3*gamma_bb*t27903*t27904*t27895;
                double t27956 = t27955+1.0;
                double t27957 = 1.0/sqrt(t27956);
                double t27958 = a1*gamma_bb*t27923*t27895;
                double t27959 = t27950+t27958+1.0;
                double t27960 = c*c;
                double t27961 = 1.0/pow(rho_b,2.0/3.0);
                double t27962 = k1*t27905;
                double t27963 = c*k2*t27896;
                double t27964 = t27962+t27963;
                double t27965 = 1.0/(t27964*t27964);
                double t27966 = exp(-t27960*t27961*t27965);
                double t27967 = exp(-t27950);
                v_gamma_bb[Q] += scale * c0*rho_b*t27966*heaviside(c*c0*t27896*(-2.0/3.0)+t27954*t27957*t27959*exp(-t27900*t27897*t27898*t27899)*1.0E5)*(t27941*t27936*(t27929*t27947*t27948*2.0-gamma_bb*t27900*t27910*t27902*t27931*t27899*8.0+a5*c0*t27910*t27921*t27923*t27907*t27895*(8.0/3.0)+c*c0*gamma_bb*t27900*t27910*t27902*t27912*t27921*t27907*t27926*(3.2E1/3.0)-c*c0*gamma_bb*t27900*t27902*t27912*t27921*t27932*t27907*t27926*(3.2E1/3.0))+t27944*t27936*(t27937+t27938+a5*c0*t27910*t27921*t27923*t27907*t27927*t27928*t27895*(2.0/3.0)-c*c0*gamma_bb*t27900*t27902*t27912*t27921*t27932*t27907*t27926*(8.0/3.0)+c*c0*t27910*t27912*t27921*t27907*t27927*t27928*t27939*t27896*(2.0/3.0)+c*c0*gamma_bb*t27900*t27910*t27902*t27912*t27921*t27907*t27926*t27927*t27928*(8.0/3.0)-c*c0*gamma_bb*t27900*t27902*t27912*t27921*t27932*t27907*t27926*t27927*t27928*(8.0/3.0))+t27927*t27928*t27939-t27941*1.0/(t27935*t27935)*t27944*(t27929*t27947*t27948*3.0-gamma_bb*t27900*t27910*t27902*t27931*t27899*1.2E1+a5*c0*t27910*t27921*t27923*t27907*t27895*4.0+c*c0*gamma_bb*t27900*t27910*t27902*t27912*t27921*t27907*t27926*1.6E1-c*c0*gamma_bb*t27900*t27902*t27912*t27921*t27932*t27907*t27926*1.6E1)+(pow(rho_b,1.0/3.0)*(t27920*t27920)*t27903*(t27909*t27909)*t27939*exp(-t27906)*(3.0/2.0))/(c0*t27912))*(1.0/2.0)-c0*rho_b*t27966*dirac(c*c0*t27896*(2.0/3.0)-t27954*t27957*t27967*t27959*1.0E5)*(t27927*t27928+t27941*t27944*t27936)*(t27954*t27957*t27967*(a1*t27923*t27895+gamma_bb*t27900*t27897*t27899*2.0)*-1.0E5+a3*t27903*t27904*t27954*1.0/pow(t27956,3.0/2.0)*t27895*t27967*t27959*5.0E4+gamma_bb*t27900*t27954*t27957*t27967*t27959*t27897*t27899*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t27975 = tspi_m13*tspi_m13;
                double t27976 = 1.0/pow(rho_b,1.0/3.0);
                double t27977 = a2*a2;
                double t27978 = gamma_bb*gamma_bb;
                double t27979 = 1.0/pow(rho_b,1.6E1/3.0);
                double t27980 = t27975*t27975;
                double t27981 = c*t27976;
                double t27982 = a4*a4;
                double t27983 = t27980*t27982*t27978*t27979*2.0;
                double t27984 = exp(t27983);
                double t27985 = 1.0/c;
                double t27986 = 1.0/pow(rho_b,7.0/3.0);
                double t27987 = sqrt(t27981);
                double t27988 = t27980*t27982*t27978*t27979;
                double t27989 = t27988+1.0;
                double t27990 = 1.0/(t27989*t27989);
                double t27991 = a5*gamma_bb*t27975*t27985*t27986;
                double t27992 = t27991+1.0;
                double t28003 = raa2*t27987;
                double t27993 = exp(-t28003);
                double t27994 = t27993-1.0;
                double t27995 = kaa2*t27994;
                double t27996 = pow(t27981,2.0/5.0);
                double t28004 = raa1*t27996;
                double t27997 = exp(-t28004);
                double t27998 = t27997-1.0;
                double t27999 = kaa1*t27998;
                double t28000 = -kaa0+t27995+t27999;
                double t28001 = 1.0/(t28000*t28000);
                double t28002 = c*c0*t27990*t27992*t27984*t27976*t28001*(2.0/3.0);
                double t28005 = 1.0/t27989;
                double t28006 = 1.0/pow(rho_b,4.0/3.0);
                double t28007 = c*c0*t27992*t27984*t27976*t28001*(2.0/3.0);
                double t28008 = sqrt(t28007);
                double t28009 = 1.0/pow(rho_b,1.1E1/3.0);
                double t28010 = 1.0/sqrt(t27981);
                double t28011 = c*kaa2*raa2*t27993*t28010*t28006*(1.0/6.0);
                double t28012 = 1.0/pow(t27981,3.0/5.0);
                double t28013 = c*kaa1*raa1*t27997*t28012*t28006*(2.0/1.5E1);
                double t28014 = t28011+t28013;
                double t28015 = 1.0/(t28000*t28000*t28000);
                double t28016 = 1.0/pow(rho_b,2.0E1/3.0);
                double t28017 = exp(t28002);
                double t28018 = Ei(-t28002);
                double t28019 = 1.0/(t27989*t27989*t27989);
                double t28020 = t28005*t28008*6.0;
                double t28021 = c*c0*t27990*t27992*t27984*t27976*t28001*4.0;
                double t28022 = t28020+t28021+3.0;
                double t28023 = 1.0/t28022;
                double t28024 = c*c0*t27990*t27992*t27984*t28001*t28006*(2.0/9.0);
                double t28025 = a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28009*(1.4E1/9.0);
                double t28026 = c*c0*t27990*t27992*t27984*t27976*t28014*t28015*(4.0/3.0);
                double t28027 = c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28016*(6.4E1/9.0);
                double t28029 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28016*t28019*(6.4E1/9.0);
                double t28028 = t28024+t28025+t28026+t28027-t28029;
                double t28030 = c*c0*t27990*t27992*t27984*t27976*t28001*t28017*t28018*(2.0/3.0);
                double t28031 = t28030+1.0;
                double t28032 = t28005*t28008*4.0;
                double t28033 = c*c0*t27990*t27992*t27984*t27976*t28001*(8.0/3.0);
                double t28034 = t28032+t28033+6.0;
                double t28035 = c*c0*t27992*t27984*t28001*t28006*(2.0/9.0);
                double t28036 = a5*c0*gamma_bb*t27975*t27984*t28001*t28009*(1.4E1/9.0);
                double t28037 = c*c0*t27992*t27984*t27976*t28014*t28015*(4.0/3.0);
                double t28038 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28016*(6.4E1/9.0);
                double t28039 = t28035+t28036+t28037+t28038;
                double t28040 = 1.0/sqrt(t28007);
                double t28041 = 1.0/pow(rho_b,1.9E1/3.0);
                double t28042 = t27980*t27977*t27978*t27979;
                double t28043 = pow(t27981,4.0/5.0);
                double t28061 = rab1*t28043;
                double t28044 = exp(-t28061);
                double t28045 = t28044-1.0;
                double t28062 = kab1*t28045;
                double t28046 = kab0-t28062;
                double t28047 = a3*gamma_bb*t27975*t27985*t27986;
                double t28048 = t28047+1.0;
                double t28049 = 1.0/sqrt(t28048);
                double t28050 = 1.0/pow(rho_b,8.0/3.0);
                double t28051 = a1*gamma_bb*t27975*t28050;
                double t28052 = t28042+t28051+1.0;
                double t28053 = c*c;
                double t28054 = 1.0/pow(rho_b,2.0/3.0);
                double t28055 = k1*t27987;
                double t28056 = c*k2*t27976;
                double t28057 = t28055+t28056;
                double t28058 = 1.0/(t28057*t28057);
                double t28064 = t28053*t28054*t28058;
                double t28059 = exp(-t28064);
                double t28060 = exp(-t28042);
                double t28063 = c*c0*t27976*(2.0/3.0);
                double t28065 = t28040*t28005*t28039*2.0;
                double t28066 = c*c0*t27990*t27992*t27984*t28001*t28006*(8.0/9.0);
                double t28067 = a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28009*(5.6E1/9.0);
                double t28068 = c*c0*t27990*t27992*t27984*t27976*t28014*t28015*(1.6E1/3.0);
                double t28069 = c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28016*(2.56E2/9.0);
                double t28120 = t27980*t27990*t27982*t27978*t28041*t28008*(6.4E1/3.0);
                double t28121 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28016*t28019*(2.56E2/9.0);
                double t28070 = -t28120-t28121+t28065+t28066+t28067+t28068+t28069;
                double t28071 = c*c0*t27990*t27992*t27984*t28001*t28006*t28017*t28018*(2.0/9.0);
                double t28072 = c*c0*t27990*t27992*t27984*t27976*t28014*t28015*t28017*t28018*(4.0/3.0);
                double t28073 = c*c0*t27990*t27992*t27984*t27976*t28001*t28017*t28018*t28028*(2.0/3.0);
                double t28074 = a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28017*t28009*t28018*(1.4E1/9.0);
                double t28075 = c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28016*t28017*t28018*(6.4E1/9.0);
                double t28124 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28016*t28017*t28018*t28019*(6.4E1/9.0);
                double t28076 = t28024+t28025-t28124+t28026+t28071+t28027+t28072+t28073-t28029+t28074+t28075;
                double t28077 = t27982*t27982;
                double t28078 = t27978*t27978;
                double t28079 = t27980*t27980;
                double t28080 = raa2*raa2;
                double t28081 = c*kaa2*t27993*t27986*t28080*(1.0/3.6E1);
                double t28082 = raa1*raa1;
                double t28083 = 1.0/pow(t27981,6.0/5.0);
                double t28084 = kaa1*t27997*t28050*t28053*t28082*t28083*(4.0/2.25E2);
                double t28085 = 1.0/pow(t27981,3.0/2.0);
                double t28086 = kaa2*raa2*t27993*t28050*t28053*t28085*(1.0/3.6E1);
                double t28087 = 1.0/pow(t27981,8.0/5.0);
                double t28088 = kaa1*raa1*t27997*t28050*t28053*t28087*(2.0/7.5E1);
                double t28098 = c*kaa2*raa2*t27993*t27986*t28010*(2.0/9.0);
                double t28099 = c*kaa1*raa1*t27986*t27997*t28012*(8.0/4.5E1);
                double t28089 = t28081+t28084+t28086+t28088-t28098-t28099;
                double t28090 = t28014*t28014;
                double t28091 = 1.0/(t28000*t28000*t28000*t28000);
                double t28092 = 1.0/pow(rho_b,1.4E1/3.0);
                double t28093 = 1.0/pow(rho_b,1.0E1);
                double t28094 = 1.0/pow(rho_b,1.3E1);
                double t28095 = 1.0/pow(rho_b,2.3E1/3.0);
                double t28096 = 1.0/pow(rho_b,1.0E1/3.0);
                double t28097 = 1.0/t27992;
                double t28100 = t28028*t28028;
                double t28101 = 1.0/(t27989*t27989*t27989*t27989);
                double t28102 = c*c0*t27990*t27992*t27984*t27986*t28001*(8.0/2.7E1);
                double t28103 = c*c0*t27990*t27992*t27984*t27976*t28090*t28091*4.0;
                double t28104 = a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28092*(5.6E1/9.0);
                double t28105 = c*c0*t27990*t27992*t27984*t28014*t28006*t28015*(8.0/9.0);
                double t28106 = a5*c0*gamma_bb*t27990*t27975*t27984*t28014*t28015*t28009*(5.6E1/9.0);
                double t28107 = a5*c0*gamma_bb*t27980*t27990*t27982*t27975*t27984*t27978*t28001*t28093*(8.96E2/2.7E1);
                double t28108 = c*c0*t27990*t27992*t27984*t28001*t28094*t28077*t28078*t28079*(2.048E3/2.7E1);
                double t28109 = c*c0*t27992*t27984*t28001*t28101*t28094*t28077*t28078*t28079*(1.024E3/9.0);
                double t28110 = c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28095*(4.48E2/9.0);
                double t28111 = c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28014*t28015*t28016*(2.56E2/9.0);
                double t28144 = c*c0*t27990*t27992*t27984*t27976*t28015*t28089*(4.0/3.0);
                double t28145 = a5*c0*gamma_bb*t27980*t27982*t27975*t27984*t27978*t28001*t28019*t28093*(8.96E2/2.7E1);
                double t28146 = c*c0*t27992*t27984*t28001*t28019*t28094*t28077*t28078*t28079*(4.096E3/2.7E1);
                double t28147 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28019*t28095*(4.48E2/9.0);
                double t28148 = c*c0*t27980*t27982*t27992*t27984*t27978*t28014*t28015*t28016*t28019*(2.56E2/9.0);
                double t28112 = t28110+t28102+t28111+t28103+t28104+t28105+t28106+t28107+t28108-t28144+t28109-t28145-t28146-t28147-t28148;
                double t28113 = 1.0/(t28022*t28022);
                double t28114 = t28040*t28005*t28039*3.0;
                double t28115 = c*c0*t27990*t27992*t27984*t28001*t28006*(4.0/3.0);
                double t28116 = a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28009*(2.8E1/3.0);
                double t28117 = c*c0*t27990*t27992*t27984*t27976*t28014*t28015*8.0;
                double t28118 = c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28016*(1.28E2/3.0);
                double t28122 = t27980*t27990*t27982*t27978*t28041*t28008*3.2E1;
                double t28123 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28016*t28019*(1.28E2/3.0);
                double t28119 = -t28122+t28114-t28123+t28115+t28116+t28117+t28118;
                double t28125 = c*c0*t27992*t27984*t27986*t28001*(8.0/2.7E1);
                double t28126 = a5*c0*gamma_bb*t27975*t27984*t28001*t28092*(5.6E1/9.0);
                double t28127 = c*c0*t27992*t27984*t28014*t28006*t28015*(8.0/9.0);
                double t28128 = c*c0*t27992*t27984*t27976*t28090*t28091*4.0;
                double t28129 = a5*c0*gamma_bb*t27980*t27982*t27975*t27984*t27978*t28001*t28093*(8.96E2/2.7E1);
                double t28130 = a5*c0*gamma_bb*t27975*t27984*t28014*t28015*t28009*(5.6E1/9.0);
                double t28131 = c*c0*t27992*t27984*t28001*t28094*t28077*t28078*t28079*(2.048E3/2.7E1);
                double t28132 = c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28095*(4.48E2/9.0);
                double t28133 = c*c0*t27980*t27982*t27992*t27984*t27978*t28014*t28015*t28016*(2.56E2/9.0);
                double t28134 = t28130+t28131+t28132+t28133+t28125+t28126+t28127+t28128+t28129-c*c0*t27992*t27984*t27976*t28015*t28089*(4.0/3.0);
                double t28135 = t28039*t28039;
                double t28136 = 1.0/pow(t28007,3.0/2.0);
                double t28137 = 1.0/pow(rho_b,2.2E1/3.0);
                double t28138 = 1.0/pow(rho_b,3.8E1/3.0);
                double t28139 = 1.0/c0;
                double t28140 = exp(-t27983);
                double t28141 = t27989*t27989;
                double t28142 = t28000*t28000;
                double t28143 = pow(rho_b,1.0/3.0);
                double t28149 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t28150 = t28060*t28052*t28046*t28049*1.0E5;
                double t28151 = t28150-t28063;
                double t28152 = heaviside(t28151);
                double t28153 = t28017*t28018;
                double t28154 = t28031*t28023*t28034;
                double t28155 = t28153+t28154;
                double t28156 = t27980*t27977*t27978*t28041*(1.6E1/3.0);
                double t28157 = a1*gamma_bb*t27975*t28009*(8.0/3.0);
                double t28158 = t28156+t28157;
                double t28159 = 1.0/(c*c);
                double t28160 = 1.0/pow(t27981,1.0/5.0);
                double t28161 = 1.0/pow(t28048,3.0/2.0);
                double t28162 = 1.0/pow(rho_b,5.0/3.0);
                double t28163 = t28053*t28162*t28058*(2.0/3.0);
                double t28164 = 1.0/(t28057*t28057*t28057);
                double t28165 = c*k2*t28006*(1.0/3.0);
                double t28166 = c*k1*t28010*t28006*(1.0/6.0);
                double t28167 = t28165+t28166;
                double t28181 = t28053*t28054*t28164*t28167*2.0;
                double t28168 = t28163-t28181;
                double t28169 = t28031*t28023*t28070;
                double t28170 = t28017*t28018*t28028;
                double t28171 = t28023*t28034*t28076;
                double t28172 = t27985*t28140*t28141*t28142*t28143*t28028*t28139*t28097*(3.0/2.0);
                double t28176 = t28031*t28113*t28034*t28119;
                double t28173 = t28170+t28171+t28172-t28176+t28169;
                double t28174 = -t28150+t28063;
                double t28175 = dirac(t28174);
                double t28177 = c*c0*t28006*(2.0/9.0);
                double t28178 = t27980*t27977*t27978*t28041*t28060*t28052*t28046*t28049*(1.6E6/3.0);
                double t28179 = a3*gamma_bb*t27975*t27985*t28060*t28052*t28161*t28046*t28096*(3.5E5/3.0);
                double t28182 = t28060*t28046*t28049*t28158*1.0E5;
                double t28183 = c*kab1*rab1*t28006*t28060*t28052*t28160*t28044*t28049*(8.0E4/3.0);
                double t28180 = -t28182-t28183+t28177+t28178+t28179;
                v_rho_b_rho_b[Q] += scale * -c0*t28173*t28059*heaviside(c*c0*t27976*(-2.0/3.0)+t28052*t28046*t28049*exp(-t27980*t27977*t27978*t27979)*1.0E5)+c0*t28180*t28155*t28059*dirac(t28063-t28060*t28052*t28046*t28049*1.0E5)+c0*t28152*t28155*t28059*t28168+c0*rho_b*t28152*t28059*(t28031*t28023*(t28040*t28005*t28134*2.0-t28005*t28135*t28136-t27980*t27990*t27982*t27978*t28008*t28137*(1.216E3/9.0)+t28008*t28019*t28138*t28077*t28078*t28079*(2.048E3/9.0)+c*c0*t27990*t27992*t27984*t27986*t28001*(3.2E1/2.7E1)-t27980*t27990*t27982*t27978*t28040*t28041*t28039*(6.4E1/3.0)+a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28092*(2.24E2/9.0)+c*c0*t27990*t27992*t27984*t27976*t28090*t28091*1.6E1-c*c0*t27990*t27992*t27984*t27976*t28015*t28089*(1.6E1/3.0)+c*c0*t27990*t27992*t27984*t28014*t28006*t28015*(3.2E1/9.0)+a5*c0*gamma_bb*t27990*t27975*t27984*t28014*t28015*t28009*(2.24E2/9.0)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28095*(1.792E3/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28019*t28095*(1.792E3/9.0)+c*c0*t27990*t27992*t27984*t28001*t28094*t28077*t28078*t28079*(8.192E3/2.7E1)+c*c0*t27992*t27984*t28001*t28101*t28094*t28077*t28078*t28079*(4.096E3/9.0)-c*c0*t27992*t27984*t28001*t28019*t28094*t28077*t28078*t28079*(1.6384E4/2.7E1)+a5*c0*gamma_bb*t27980*t27990*t27982*t27975*t27984*t27978*t28001*t28093*(3.584E3/2.7E1)-a5*c0*gamma_bb*t27980*t27982*t27975*t27984*t27978*t28001*t28019*t28093*(3.584E3/2.7E1)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28014*t28015*t28016*(1.024E3/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28014*t28015*t28016*t28019*(1.024E3/9.0))+t28100*t28017*t28018+t28112*t28017*t28018+t28023*t28070*t28076*2.0+t28023*t28034*(t28100+t28110+t28102+t28111+t28103+t28104+t28105+t28106+t28107+t28108+t28109+(t28028*(1.0/3.0))/rho_b+(t28014*t28028*2.0)/t28000+t27980*t27982*t27978*t28041*t28028*(3.2E1/3.0)-t27980*t27982*t27978*t28005*t28041*t28028*(3.2E1/3.0)+a5*gamma_bb*t27975*t27985*t28028*t28096*t28097*(7.0/3.0)-c*c0*t27990*t27992*t27984*t27976*t28015*t28089*(4.0/3.0)+c*c0*t27990*t27992*t27984*t27986*t28001*t28017*t28018*(8.0/2.7E1)+a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28017*t28018*t28092*(5.6E1/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28019*t28095*(4.48E2/9.0)+c*c0*t27990*t27992*t27984*t27976*t28001*t28100*t28017*t28018*(2.0/3.0)+c*c0*t27990*t27992*t27984*t27976*t28001*t28112*t28017*t28018*(2.0/3.0)+c*c0*t27990*t27992*t27984*t27976*t28017*t28018*t28090*t28091*4.0-c*c0*t27990*t27992*t27984*t27976*t28015*t28017*t28018*t28089*(4.0/3.0)+c*c0*t27990*t27992*t27984*t28001*t28006*t28017*t28018*t28028*(4.0/9.0)+c*c0*t27990*t27992*t27984*t28014*t28006*t28015*t28017*t28018*(8.0/9.0)-c*c0*t27992*t27984*t28001*t28019*t28094*t28077*t28078*t28079*(4.096E3/2.7E1)-a5*c0*gamma_bb*t27980*t27982*t27975*t27984*t27978*t28001*t28019*t28093*(8.96E2/2.7E1)+a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28017*t28009*t28018*t28028*(2.8E1/9.0)+a5*c0*gamma_bb*t27990*t27975*t27984*t28014*t28015*t28017*t28009*t28018*(5.6E1/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28014*t28015*t28016*t28019*(2.56E2/9.0)+c*c0*t27990*t27992*t27984*t27976*t28014*t28015*t28017*t28018*t28028*(8.0/3.0)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28017*t28018*t28095*(4.48E2/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28017*t28018*t28019*t28095*(4.48E2/9.0)+c*c0*t27990*t27992*t27984*t28001*t28017*t28018*t28094*t28077*t28078*t28079*(2.048E3/2.7E1)+c*c0*t27992*t27984*t28001*t28101*t28017*t28018*t28094*t28077*t28078*t28079*(1.024E3/9.0)-c*c0*t27992*t27984*t28001*t28017*t28018*t28019*t28094*t28077*t28078*t28079*(4.096E3/2.7E1)+a5*c0*gamma_bb*t27980*t27990*t27982*t27975*t27984*t27978*t28001*t28017*t28018*t28093*(8.96E2/2.7E1)-a5*c0*gamma_bb*t27980*t27982*t27975*t27984*t27978*t28001*t28017*t28018*t28019*t28093*(8.96E2/2.7E1)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28016*t28017*t28018*t28028*(1.28E2/9.0)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28014*t28015*t28016*t28017*t28018*(2.56E2/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28016*t28017*t28018*t28019*t28028*(1.28E2/9.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28014*t28015*t28016*t28017*t28018*t28019*(2.56E2/9.0))-t28031*t28113*t28034*(t28040*t28005*t28134*3.0-t28005*t28135*t28136*(3.0/2.0)-t27980*t27990*t27982*t27978*t28008*t28137*(6.08E2/3.0)+t28008*t28019*t28138*t28077*t28078*t28079*(1.024E3/3.0)+c*c0*t27990*t27992*t27984*t27986*t28001*(1.6E1/9.0)-t27980*t27990*t27982*t27978*t28040*t28041*t28039*3.2E1+a5*c0*gamma_bb*t27990*t27975*t27984*t28001*t28092*(1.12E2/3.0)+c*c0*t27990*t27992*t27984*t27976*t28090*t28091*2.4E1-c*c0*t27990*t27992*t27984*t27976*t28015*t28089*8.0+c*c0*t27990*t27992*t27984*t28014*t28006*t28015*(1.6E1/3.0)+a5*c0*gamma_bb*t27990*t27975*t27984*t28014*t28015*t28009*(1.12E2/3.0)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28001*t28095*(8.96E2/3.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28001*t28019*t28095*(8.96E2/3.0)+c*c0*t27990*t27992*t27984*t28001*t28094*t28077*t28078*t28079*(4.096E3/9.0)+c*c0*t27992*t27984*t28001*t28101*t28094*t28077*t28078*t28079*(2.048E3/3.0)-c*c0*t27992*t27984*t28001*t28019*t28094*t28077*t28078*t28079*(8.192E3/9.0)+a5*c0*gamma_bb*t27980*t27990*t27982*t27975*t27984*t27978*t28001*t28093*(1.792E3/9.0)-a5*c0*gamma_bb*t27980*t27982*t27975*t27984*t27978*t28001*t28019*t28093*(1.792E3/9.0)+c*c0*t27980*t27990*t27982*t27992*t27984*t27978*t28014*t28015*t28016*(5.12E2/3.0)-c*c0*t27980*t27982*t27992*t27984*t27978*t28014*t28015*t28016*t28019*(5.12E2/3.0))-t28031*t28113*t28070*t28119*2.0-t28113*t28034*t28119*t28076*2.0+1.0/(t28022*t28022*t28022)*t28031*t28034*(t28119*t28119)*2.0+t27985*t28100*t28140*t28141*t28142*t28143*t28139*t28097*(3.0/2.0)+t27985*t28112*t28140*t28141*t28142*t28143*t28139*t28097*(3.0/2.0)-t27985*t28140*t28141*t28142*t28054*t28028*t28139*t28097*(1.0/2.0)-t27985*t28000*t28014*t28140*t28141*t28143*t28028*t28139*t28097*3.0+t27980*t27982*t27985*t27978*t27989*t28140*t28142*t28028*t28139*t28149*t28097*1.6E1-t27980*t27982*t27985*t27978*t28140*t28141*t28142*t28028*t28139*t28149*t28097*1.6E1-a5*gamma_bb*1.0/(rho_b*rho_b*rho_b)*1.0/(t27992*t27992)*t27975*t28140*t28141*t28142*t28028*t28139*t28159*(7.0/2.0))*(1.0/2.0)-c0*rho_b*t28180*t28173*t28175*t28059-c0*rho_b*t28152*t28173*t28059*t28168+c0*rho_b*t28152*t28155*t28059*(t28168*t28168)*(1.0/2.0)-c0*rho_b*t28155*t28175*t28059*(c*c0*t27986*(8.0/2.7E1)-t28060*t28046*t28049*(a1*gamma_bb*t27975*t28092*(8.8E1/9.0)+t27980*t27977*t27978*t28137*(3.04E2/9.0))*1.0E5+t27980*t27977*t27978*t28060*t28052*t28046*t28137*t28049*(3.04E7/9.0)+t27980*t27977*t27978*t28041*t28060*t28046*t28049*t28158*(3.2E6/3.0)-(t27977*t27977)*t28060*t28052*t28046*t28138*t28049*t28078*t28079*(2.56E7/9.0)-(a3*a3)*t27980*t27978*t28060*t28016*t28052*t28046*1.0/pow(t28048,5.0/2.0)*t28159*(1.225E6/3.0)+kab1*(rab1*rab1)*1.0/pow(t27981,2.0/5.0)*t28050*t28060*t28052*t28044*t28053*t28049*(6.4E4/9.0)+a3*gamma_bb*t27975*t27985*t28060*t28161*t28046*t28158*t28096*(7.0E5/3.0)-c*kab1*rab1*t27986*t28060*t28052*t28160*t28044*t28049*(3.2E5/9.0)-c*kab1*rab1*t28006*t28060*t28160*t28044*t28049*t28158*(1.6E5/3.0)+kab1*rab1*t28050*t28060*t28052*t28044*t28053*t28083*t28049*(1.6E4/9.0)+a3*gamma_bb*1.0/pow(rho_b,1.3E1/3.0)*t27975*t27985*t28060*t28052*t28161*t28046*(3.5E6/9.0)+a3*gamma_bb*kab1*rab1*t27975*t28060*t28052*t28160*t28044*t28161*t28092*(5.6E5/9.0)-a3*gamma_bb*1.0/pow(rho_b,2.9E1/3.0)*t27980*t27975*t27985*t27977*t27978*t28060*t28052*t28161*t28046*(1.12E7/9.0)+c*kab1*rab1*t27980*t27977*t27978*t28060*t28052*t28160*t28044*t28049*t28095*(2.56E6/9.0))*(1.0/2.0)-c0*rho_b*t28152*t28155*t28059*(t28050*t28053*t28058*(1.0E1/9.0)-t28053*t28162*t28164*t28167*(8.0/3.0)+t28053*t28054*1.0/(t28057*t28057*t28057*t28057)*(t28167*t28167)*6.0-t28053*t28054*t28164*(c*k2*t27986*(4.0/9.0)+c*k1*t27986*t28010*(2.0/9.0)-k1*t28050*t28053*t28085*(1.0/3.6E1))*2.0)*(1.0/2.0)-c0*rho_b*(t28180*t28180)*t28155*t28059*dirac(t28174,1.0)*(1.0/2.0)+c0*rho_b*t28180*t28155*t28175*t28059*t28168;
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t28404 = tspi_m13*tspi_m13;
                double t28405 = 1.0/pow(rho_b,1.0/3.0);
                double t28406 = a2*a2;
                double t28407 = gamma_bb*gamma_bb;
                double t28408 = 1.0/pow(rho_b,1.6E1/3.0);
                double t28409 = t28404*t28404;
                double t28410 = c*t28405;
                double t28411 = a4*a4;
                double t28412 = t28411*t28407*t28408*t28409*2.0;
                double t28413 = exp(t28412);
                double t28414 = 1.0/c;
                double t28415 = 1.0/pow(rho_b,7.0/3.0);
                double t28416 = sqrt(t28410);
                double t28417 = t28411*t28407*t28408*t28409;
                double t28418 = t28417+1.0;
                double t28419 = 1.0/(t28418*t28418);
                double t28420 = a5*gamma_bb*t28404*t28414*t28415;
                double t28421 = t28420+1.0;
                double t28432 = raa2*t28416;
                double t28422 = exp(-t28432);
                double t28423 = t28422-1.0;
                double t28424 = kaa2*t28423;
                double t28425 = pow(t28410,2.0/5.0);
                double t28433 = raa1*t28425;
                double t28426 = exp(-t28433);
                double t28427 = t28426-1.0;
                double t28428 = kaa1*t28427;
                double t28429 = -kaa0+t28424+t28428;
                double t28430 = 1.0/(t28429*t28429);
                double t28431 = c*c0*t28421*t28430*t28413*t28405*t28419*(2.0/3.0);
                double t28434 = 1.0/t28418;
                double t28435 = c*c0*t28421*t28430*t28413*t28405*(2.0/3.0);
                double t28436 = 1.0/pow(rho_b,8.0/3.0);
                double t28437 = 1.0/pow(rho_b,1.7E1/3.0);
                double t28442 = a5*c0*t28430*t28404*t28413*t28436*(2.0/3.0);
                double t28443 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28437*(8.0/3.0);
                double t28438 = t28442+t28443;
                double t28439 = sqrt(t28435);
                double t28440 = t28411*t28411;
                double t28441 = t28409*t28409;
                double t28444 = 1.0/sqrt(t28435);
                double t28445 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t28446 = 1.0/(t28418*t28418*t28418);
                double t28447 = 1.0/pow(rho_b,1.1E1);
                double t28448 = t28434*t28439*6.0;
                double t28449 = c*c0*t28421*t28430*t28413*t28405*t28419*4.0;
                double t28450 = t28448+t28449+3.0;
                double t28451 = 1.0/t28450;
                double t28453 = a5*c0*t28430*t28404*t28413*t28436*t28419*(2.0/3.0);
                double t28454 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28419*t28437*(8.0/3.0);
                double t28455 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28437*t28446*(8.0/3.0);
                double t28452 = t28453+t28454-t28455;
                double t28456 = exp(t28431);
                double t28457 = Ei(-t28431);
                double t28458 = t28452*t28452;
                double t28459 = 1.0/(t28418*t28418*t28418*t28418);
                double t28460 = a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28419*(1.6E1/3.0);
                double t28461 = c*c0*t28411*t28421*t28430*t28413*t28409*t28419*t28437*(8.0/3.0);
                double t28462 = c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28419*t28447*(3.2E1/3.0);
                double t28463 = c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28447*t28459*1.6E1;
                double t28498 = a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28446*(1.6E1/3.0);
                double t28499 = c*c0*t28411*t28421*t28430*t28413*t28409*t28437*t28446*(8.0/3.0);
                double t28500 = c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28446*t28447*(6.4E1/3.0);
                double t28464 = -t28500+t28460+t28461+t28462+t28463-t28498-t28499;
                double t28465 = t28434*t28439*4.0;
                double t28466 = c*c0*t28421*t28430*t28413*t28405*t28419*(8.0/3.0);
                double t28467 = t28465+t28466+6.0;
                double t28468 = a5*c0*t28430*t28404*t28413*t28436*t28419*t28456*t28457*(2.0/3.0);
                double t28469 = c*c0*t28421*t28430*t28413*t28405*t28452*t28419*t28456*t28457*(2.0/3.0);
                double t28470 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28419*t28437*t28456*t28457*(8.0/3.0);
                double t28535 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28437*t28446*t28456*t28457*(8.0/3.0);
                double t28471 = t28470+t28453+t28454-t28535-t28455+t28468+t28469;
                double t28472 = c*c0*t28421*t28430*t28413*t28405*t28419*t28456*t28457*(2.0/3.0);
                double t28473 = t28472+1.0;
                double t28474 = t28434*t28444*t28438*3.0;
                double t28475 = a5*c0*t28430*t28404*t28413*t28436*t28419*4.0;
                double t28476 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28419*t28437*1.6E1;
                double t28479 = gamma_bb*t28411*t28408*t28409*t28419*t28439*1.2E1;
                double t28480 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28437*t28446*1.6E1;
                double t28477 = -t28480+t28474+t28475+t28476-t28479;
                double t28478 = 1.0/(t28450*t28450);
                double t28481 = t28434*t28444*t28438*2.0;
                double t28482 = a5*c0*t28430*t28404*t28413*t28436*t28419*(8.0/3.0);
                double t28483 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28419*t28437*(3.2E1/3.0);
                double t28533 = gamma_bb*t28411*t28408*t28409*t28419*t28439*8.0;
                double t28534 = c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28409*t28437*t28446*(3.2E1/3.0);
                double t28484 = -t28533-t28534+t28481+t28482+t28483;
                double t28485 = a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*(1.6E1/3.0);
                double t28486 = c*c0*t28411*t28421*t28430*t28413*t28409*t28437*(8.0/3.0);
                double t28487 = c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28447*(3.2E1/3.0);
                double t28488 = t28485+t28486+t28487;
                double t28489 = t28438*t28438;
                double t28490 = 1.0/pow(t28435,3.0/2.0);
                double t28491 = 1.0/pow(rho_b,3.2E1/3.0);
                double t28492 = 1.0/t28421;
                double t28493 = 1.0/c0;
                double t28494 = pow(rho_b,1.0/3.0);
                double t28495 = exp(-t28412);
                double t28496 = t28418*t28418;
                double t28497 = t28429*t28429;
                double t28501 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t28502 = c*c;
                double t28503 = 1.0/pow(rho_b,2.0/3.0);
                double t28504 = k1*t28416;
                double t28505 = c*k2*t28405;
                double t28506 = t28504+t28505;
                double t28507 = 1.0/(t28506*t28506);
                double t28525 = t28502*t28503*t28507;
                double t28508 = exp(-t28525);
                double t28509 = t28406*t28407*t28408*t28409;
                double t28510 = pow(t28410,4.0/5.0);
                double t28520 = rab1*t28510;
                double t28511 = exp(-t28520);
                double t28512 = t28511-1.0;
                double t28521 = kab1*t28512;
                double t28513 = kab0-t28521;
                double t28514 = a3*gamma_bb*t28404*t28414*t28415;
                double t28515 = t28514+1.0;
                double t28516 = 1.0/sqrt(t28515);
                double t28517 = a1*gamma_bb*t28404*t28436;
                double t28518 = t28517+t28509+1.0;
                double t28519 = exp(-t28509);
                double t28526 = a1*t28404*t28436;
                double t28527 = gamma_bb*t28406*t28408*t28409*2.0;
                double t28528 = t28526+t28527;
                double t28529 = t28513*t28516*t28519*t28528*1.0E5;
                double t28530 = 1.0/pow(t28515,3.0/2.0);
                double t28531 = a3*t28404*t28530*t28414*t28513*t28415*t28518*t28519*5.0E4;
                double t28532 = gamma_bb*t28513*t28406*t28408*t28516*t28409*t28518*t28519*2.0E5;
                double t28522 = t28531+t28532-t28529;
                double t28523 = c*c0*t28405*(2.0/3.0);
                double t28536 = t28513*t28516*t28518*t28519*1.0E5;
                double t28524 = t28523-t28536;
                double t28537 = dirac(t28524);
                double t28538 = t28456*t28457;
                double t28539 = t28451*t28473*t28467;
                double t28540 = t28538+t28539;
                double t28541 = 1.0/(c*c);
                v_gamma_bb_gamma_bb[Q] += scale * c0*rho_b*t28508*heaviside(c*c0*t28405*(-2.0/3.0)+t28513*t28516*t28518*exp(-t28406*t28407*t28408*t28409)*1.0E5)*(t28451*t28467*(t28460+t28461+t28462+t28463+t28458+gamma_bb*t28411*t28452*t28408*t28409*4.0+a5*t28404*t28414*t28415*t28452*t28492-gamma_bb*t28411*t28434*t28452*t28408*t28409*4.0-c*c0*t28411*t28421*t28430*t28413*t28409*t28437*t28446*(8.0/3.0)-a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28446*(1.6E1/3.0)+a5*c0*t28430*t28404*t28413*t28452*t28436*t28419*t28456*t28457*(4.0/3.0)-c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28446*t28447*(6.4E1/3.0)+c*c0*t28421*t28430*t28413*t28405*t28419*t28464*t28456*t28457*(2.0/3.0)+c*c0*t28421*t28430*t28413*t28405*t28419*t28456*t28457*t28458*(2.0/3.0)+c*c0*t28411*t28421*t28430*t28413*t28409*t28419*t28437*t28456*t28457*(8.0/3.0)-c*c0*t28411*t28421*t28430*t28413*t28409*t28437*t28446*t28456*t28457*(8.0/3.0)+a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28419*t28456*t28457*(1.6E1/3.0)-a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28446*t28456*t28457*(1.6E1/3.0)+c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28419*t28447*t28456*t28457*(3.2E1/3.0)-c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28446*t28447*t28456*t28457*(6.4E1/3.0)+c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28447*t28456*t28457*t28459*1.6E1+c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28452*t28409*t28419*t28437*t28456*t28457*(1.6E1/3.0)-c*c0*gamma_bb*t28411*t28421*t28430*t28413*t28452*t28409*t28437*t28446*t28456*t28457*(1.6E1/3.0))+t28451*t28471*t28484*2.0+t28464*t28456*t28457+t28456*t28457*t28458+t28451*t28473*(t28434*t28444*t28488*2.0-t28434*t28490*t28489-t28411*t28408*t28409*t28419*t28439*8.0+t28440*t28441*t28407*t28446*t28491*t28439*3.2E1-gamma_bb*t28411*t28408*t28444*t28409*t28419*t28438*8.0+c*c0*t28411*t28421*t28430*t28413*t28409*t28419*t28437*(3.2E1/3.0)-c*c0*t28411*t28421*t28430*t28413*t28409*t28437*t28446*(3.2E1/3.0)+a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28419*(6.4E1/3.0)-a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28446*(6.4E1/3.0)+c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28419*t28447*(1.28E2/3.0)-c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28446*t28447*(2.56E2/3.0)+c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28447*t28459*6.4E1)-t28471*t28467*t28477*t28478*2.0-t28473*t28484*t28477*t28478*2.0-t28473*t28467*t28478*(t28434*t28444*t28488*3.0-t28434*t28490*t28489*(3.0/2.0)-t28411*t28408*t28409*t28419*t28439*1.2E1+t28440*t28441*t28407*t28446*t28491*t28439*4.8E1-gamma_bb*t28411*t28408*t28444*t28409*t28419*t28438*1.2E1+c*c0*t28411*t28421*t28430*t28413*t28409*t28419*t28437*1.6E1-c*c0*t28411*t28421*t28430*t28413*t28409*t28437*t28446*1.6E1+a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28419*3.2E1-a5*c0*gamma_bb*t28411*t28430*t28404*t28413*t28409*t28445*t28446*3.2E1+c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28419*t28447*6.4E1-c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28446*t28447*1.28E2+c*c0*t28421*t28430*t28413*t28440*t28441*t28407*t28447*t28459*9.6E1)+1.0/(t28450*t28450*t28450)*t28473*t28467*(t28477*t28477)*2.0+t28414*t28464*t28492*t28493*t28494*t28495*t28496*t28497*(3.0/2.0)+t28414*t28492*t28493*t28458*t28494*t28495*t28496*t28497*(3.0/2.0)-a5*1.0/(rho_b*rho_b)*1.0/(t28421*t28421)*t28404*t28541*t28452*t28493*t28495*t28496*t28497*(3.0/2.0)+gamma_bb*t28411*t28501*t28414*t28452*t28409*t28418*t28492*t28493*t28495*t28497*6.0-gamma_bb*t28411*t28501*t28414*t28452*t28409*t28492*t28493*t28495*t28496*t28497*6.0)*(1.0/2.0)-c0*rho_b*t28522*t28508*t28537*(t28451*t28471*t28467+t28451*t28473*t28484+t28452*t28456*t28457-t28473*t28467*t28477*t28478+t28414*t28452*t28492*t28493*t28494*t28495*t28496*t28497*(3.0/2.0))+c0*rho_b*t28540*t28508*t28537*(t28513*t28406*t28408*t28516*t28409*t28519*2.0E5-t28513*t28406*t28408*t28516*t28409*t28518*t28519*2.0E5+(a3*a3)*1.0/pow(rho_b,1.4E1/3.0)*t28513*t28541*1.0/pow(t28515,5.0/2.0)*t28409*t28518*t28519*7.5E4+t28441*t28513*(t28406*t28406)*t28407*t28516*t28491*t28518*t28519*4.0E5-a3*t28404*t28530*t28414*t28513*t28415*t28519*t28528*1.0E5-gamma_bb*t28513*t28406*t28408*t28516*t28409*t28519*t28528*4.0E5+a3*gamma_bb*1.0/pow(rho_b,2.3E1/3.0)*t28404*t28530*t28414*t28513*t28406*t28409*t28518*t28519*2.0E5)*(1.0/2.0)-c0*rho_b*(t28522*t28522)*t28540*t28508*dirac(t28524,1.0)*(1.0/2.0);
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t28190 = tspi_m13*tspi_m13;
                double t28191 = 1.0/pow(rho_b,1.0/3.0);
                double t28192 = a2*a2;
                double t28193 = gamma_bb*gamma_bb;
                double t28194 = 1.0/pow(rho_b,1.6E1/3.0);
                double t28195 = t28190*t28190;
                double t28196 = c*t28191;
                double t28197 = a4*a4;
                double t28198 = 1.0/c;
                double t28199 = 1.0/pow(rho_b,7.0/3.0);
                double t28200 = sqrt(t28196);
                double t28201 = t28193*t28194*t28195*t28197*2.0;
                double t28202 = exp(t28201);
                double t28203 = t28193*t28194*t28195*t28197;
                double t28204 = t28203+1.0;
                double t28205 = 1.0/(t28204*t28204);
                double t28206 = a5*gamma_bb*t28190*t28198*t28199;
                double t28207 = t28206+1.0;
                double t28219 = raa2*t28200;
                double t28208 = exp(-t28219);
                double t28209 = t28208-1.0;
                double t28210 = kaa2*t28209;
                double t28211 = pow(t28196,2.0/5.0);
                double t28220 = raa1*t28211;
                double t28212 = exp(-t28220);
                double t28213 = t28212-1.0;
                double t28214 = kaa1*t28213;
                double t28215 = -kaa0+t28210+t28214;
                double t28216 = 1.0/(t28215*t28215);
                double t28217 = c*c0*t28202*t28205*t28207*t28216*t28191*(2.0/3.0);
                double t28218 = 1.0/pow(rho_b,8.0/3.0);
                double t28221 = 1.0/pow(rho_b,1.7E1/3.0);
                double t28222 = exp(t28217);
                double t28223 = Ei(-t28217);
                double t28224 = 1.0/t28204;
                double t28225 = c*c0*t28202*t28207*t28216*t28191*(2.0/3.0);
                double t28226 = sqrt(t28225);
                double t28227 = 1.0/(t28204*t28204*t28204);
                double t28228 = t28224*t28226*6.0;
                double t28229 = c*c0*t28202*t28205*t28207*t28216*t28191*4.0;
                double t28230 = t28228+t28229+3.0;
                double t28231 = 1.0/t28230;
                double t28232 = a5*c0*t28202*t28205*t28216*t28190*t28218*(2.0/3.0);
                double t28233 = c*c0*gamma_bb*t28202*t28221*t28205*t28207*t28216*t28195*t28197*(8.0/3.0);
                double t28244 = c*c0*gamma_bb*t28202*t28221*t28207*t28216*t28227*t28195*t28197*(8.0/3.0);
                double t28234 = t28232+t28233-t28244;
                double t28235 = c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28191*(2.0/3.0);
                double t28236 = t28235+1.0;
                double t28237 = t28224*t28226*4.0;
                double t28238 = c*c0*t28202*t28205*t28207*t28216*t28191*(8.0/3.0);
                double t28239 = t28237+t28238+6.0;
                double t28240 = a5*c0*t28202*t28216*t28190*t28218*(2.0/3.0);
                double t28241 = c*c0*gamma_bb*t28202*t28221*t28207*t28216*t28195*t28197*(8.0/3.0);
                double t28242 = t28240+t28241;
                double t28243 = 1.0/sqrt(t28225);
                double t28245 = t28192*t28193*t28194*t28195;
                double t28246 = pow(t28196,4.0/5.0);
                double t28354 = rab1*t28246;
                double t28247 = exp(-t28354);
                double t28248 = t28247-1.0;
                double t28355 = kab1*t28248;
                double t28249 = kab0-t28355;
                double t28250 = a3*gamma_bb*t28190*t28198*t28199;
                double t28251 = t28250+1.0;
                double t28252 = 1.0/sqrt(t28251);
                double t28253 = a1*gamma_bb*t28190*t28218;
                double t28254 = t28253+t28245+1.0;
                double t28255 = c*c;
                double t28256 = 1.0/pow(rho_b,2.0/3.0);
                double t28257 = k1*t28200;
                double t28258 = c*k2*t28191;
                double t28259 = t28257+t28258;
                double t28260 = 1.0/(t28259*t28259);
                double t28357 = t28260*t28255*t28256;
                double t28261 = exp(-t28357);
                double t28262 = 1.0/pow(rho_b,4.0/3.0);
                double t28263 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t28264 = 1.0/pow(rho_b,2.0E1/3.0);
                double t28265 = t28197*t28197;
                double t28266 = 1.0/pow(rho_b,1.2E1);
                double t28267 = t28195*t28195;
                double t28268 = 1.0/sqrt(t28196);
                double t28269 = c*kaa2*raa2*t28208*t28262*t28268*(1.0/6.0);
                double t28270 = 1.0/pow(t28196,3.0/5.0);
                double t28271 = c*kaa1*raa1*t28212*t28270*t28262*(2.0/1.5E1);
                double t28272 = t28271+t28269;
                double t28273 = 1.0/(t28215*t28215*t28215);
                double t28274 = t28224*t28242*t28243*2.0;
                double t28275 = a5*c0*t28202*t28205*t28216*t28190*t28218*(8.0/3.0);
                double t28276 = c*c0*gamma_bb*t28202*t28221*t28205*t28207*t28216*t28195*t28197*(3.2E1/3.0);
                double t28318 = gamma_bb*t28205*t28226*t28194*t28195*t28197*8.0;
                double t28319 = c*c0*gamma_bb*t28202*t28221*t28207*t28216*t28227*t28195*t28197*(3.2E1/3.0);
                double t28277 = -t28318+t28274-t28319+t28275+t28276;
                double t28278 = 1.0/pow(rho_b,1.1E1/3.0);
                double t28279 = c*c0*t28202*t28205*t28207*t28216*t28262*(2.0/9.0);
                double t28280 = a5*c0*gamma_bb*t28202*t28205*t28216*t28190*t28278*(1.4E1/9.0);
                double t28281 = c*c0*t28202*t28205*t28207*t28191*t28272*t28273*(4.0/3.0);
                double t28282 = c*c0*t28202*t28205*t28207*t28216*t28264*t28193*t28195*t28197*(6.4E1/9.0);
                double t28283 = a5*c0*t28202*t28222*t28205*t28223*t28216*t28190*t28218*(2.0/3.0);
                double t28284 = c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28234*t28191*(2.0/3.0);
                double t28285 = c*c0*gamma_bb*t28202*t28221*t28222*t28205*t28223*t28207*t28216*t28195*t28197*(8.0/3.0);
                double t28298 = c*c0*t28202*t28207*t28216*t28227*t28264*t28193*t28195*t28197*(6.4E1/9.0);
                double t28286 = t28280+t28281+t28282+t28279-t28298;
                double t28287 = 1.0/pow(rho_b,1.9E1/3.0);
                double t28288 = 1.0/t28207;
                double t28289 = a5*c0*t28202*t28205*t28216*t28190*t28278*(1.6E1/9.0);
                double t28290 = a5*c0*t28202*t28205*t28190*t28218*t28272*t28273*(4.0/3.0);
                double t28291 = a5*c0*t28202*t28205*t28216*t28190*t28263*t28193*t28195*t28197*(4.0E1/3.0);
                double t28292 = c*c0*gamma_bb*t28202*t28205*t28207*t28216*t28264*t28195*t28197*(1.36E2/9.0);
                double t28293 = c*c0*gamma_bb*t28202*t28205*t28207*t28216*t28193*t28265*t28266*t28267*(2.56E2/9.0);
                double t28294 = 1.0/(t28204*t28204*t28204*t28204);
                double t28295 = c*c0*gamma_bb*t28202*t28207*t28216*t28193*t28265*t28266*t28267*t28294*(1.28E2/3.0);
                double t28296 = c*c0*gamma_bb*t28202*t28221*t28205*t28207*t28272*t28273*t28195*t28197*(1.6E1/3.0);
                double t28299 = c*c0*gamma_bb*t28202*t28207*t28216*t28227*t28264*t28195*t28197*(1.36E2/9.0);
                double t28300 = c*c0*gamma_bb*t28202*t28207*t28216*t28227*t28193*t28265*t28266*t28267*(5.12E2/9.0);
                double t28301 = c*c0*gamma_bb*t28202*t28221*t28207*t28227*t28272*t28273*t28195*t28197*(1.6E1/3.0);
                double t28350 = a5*c0*t28202*t28216*t28190*t28227*t28263*t28193*t28195*t28197*(4.0E1/3.0);
                double t28297 = -t28300-t28301-t28350+t28290+t28291+t28292+t28293+t28295+t28296+t28289-t28299;
                double t28302 = c*c0*t28202*t28207*t28216*t28262*(2.0/9.0);
                double t28303 = a5*c0*gamma_bb*t28202*t28216*t28190*t28278*(1.4E1/9.0);
                double t28304 = c*c0*t28202*t28207*t28191*t28272*t28273*(4.0/3.0);
                double t28305 = c*c0*t28202*t28207*t28216*t28264*t28193*t28195*t28197*(6.4E1/9.0);
                double t28306 = t28302+t28303+t28304+t28305;
                double t28307 = 1.0/(t28230*t28230);
                double t28373 = c*c0*gamma_bb*t28202*t28221*t28222*t28223*t28207*t28216*t28227*t28195*t28197*(8.0/3.0);
                double t28308 = t28232+t28233-t28244+t28283-t28373+t28284+t28285;
                double t28309 = a5*c0*t28202*t28216*t28190*t28278*(1.6E1/9.0);
                double t28310 = a5*c0*t28202*t28190*t28218*t28272*t28273*(4.0/3.0);
                double t28311 = a5*c0*t28202*t28216*t28190*t28263*t28193*t28195*t28197*(4.0E1/3.0);
                double t28312 = c*c0*gamma_bb*t28202*t28207*t28216*t28264*t28195*t28197*(1.36E2/9.0);
                double t28313 = c*c0*gamma_bb*t28202*t28207*t28216*t28193*t28265*t28266*t28267*(2.56E2/9.0);
                double t28314 = c*c0*gamma_bb*t28202*t28221*t28207*t28272*t28273*t28195*t28197*(1.6E1/3.0);
                double t28315 = t28310+t28311+t28312+t28313+t28314+t28309;
                double t28316 = 1.0/pow(t28225,3.0/2.0);
                double t28317 = 1.0/pow(rho_b,3.5E1/3.0);
                double t28320 = t28224*t28243*t28306*3.0;
                double t28321 = c*c0*t28202*t28205*t28207*t28216*t28262*(4.0/3.0);
                double t28322 = a5*c0*gamma_bb*t28202*t28205*t28216*t28190*t28278*(2.8E1/3.0);
                double t28323 = c*c0*t28202*t28205*t28207*t28191*t28272*t28273*8.0;
                double t28324 = c*c0*t28202*t28205*t28207*t28216*t28264*t28193*t28195*t28197*(1.28E2/3.0);
                double t28343 = t28205*t28226*t28193*t28195*t28197*t28287*3.2E1;
                double t28344 = c*c0*t28202*t28207*t28216*t28227*t28264*t28193*t28195*t28197*(1.28E2/3.0);
                double t28325 = t28320+t28321+t28322+t28323+t28324-t28343-t28344;
                double t28326 = t28224*t28242*t28243*3.0;
                double t28327 = a5*c0*t28202*t28205*t28216*t28190*t28218*4.0;
                double t28328 = c*c0*gamma_bb*t28202*t28221*t28205*t28207*t28216*t28195*t28197*1.6E1;
                double t28336 = gamma_bb*t28205*t28226*t28194*t28195*t28197*1.2E1;
                double t28337 = c*c0*gamma_bb*t28202*t28221*t28207*t28216*t28227*t28195*t28197*1.6E1;
                double t28329 = t28326+t28327-t28336+t28328-t28337;
                double t28330 = t28224*t28243*t28306*2.0;
                double t28331 = c*c0*t28202*t28205*t28207*t28216*t28262*(8.0/9.0);
                double t28332 = a5*c0*gamma_bb*t28202*t28205*t28216*t28190*t28278*(5.6E1/9.0);
                double t28333 = c*c0*t28202*t28205*t28207*t28191*t28272*t28273*(1.6E1/3.0);
                double t28334 = c*c0*t28202*t28205*t28207*t28216*t28264*t28193*t28195*t28197*(2.56E2/9.0);
                double t28368 = t28205*t28226*t28193*t28195*t28197*t28287*(6.4E1/3.0);
                double t28369 = c*c0*t28202*t28207*t28216*t28227*t28264*t28193*t28195*t28197*(2.56E2/9.0);
                double t28335 = t28330+t28331+t28332+t28333+t28334-t28368-t28369;
                double t28338 = c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28262*(2.0/9.0);
                double t28339 = c*c0*t28202*t28222*t28205*t28223*t28207*t28191*t28272*t28273*(4.0/3.0);
                double t28340 = c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28191*t28286*(2.0/3.0);
                double t28341 = a5*c0*gamma_bb*t28202*t28222*t28205*t28223*t28216*t28190*t28278*(1.4E1/9.0);
                double t28342 = c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28264*t28193*t28195*t28197*(6.4E1/9.0);
                double t28345 = 1.0/c0;
                double t28346 = pow(rho_b,1.0/3.0);
                double t28347 = exp(-t28201);
                double t28348 = t28204*t28204;
                double t28349 = t28215*t28215;
                double t28351 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t28370 = c*c0*t28202*t28222*t28223*t28207*t28216*t28227*t28264*t28193*t28195*t28197*(6.4E1/9.0);
                double t28352 = t28340+t28341+t28342+t28280-t28370+t28281+t28282+t28338+t28339+t28279-t28298;
                double t28353 = exp(-t28245);
                double t28356 = t28252*t28254*t28353*t28249*1.0E5;
                double t28358 = c*c0*t28191*(2.0/3.0);
                double t28359 = -t28356+t28358;
                double t28360 = dirac(t28359);
                double t28361 = a1*t28190*t28218;
                double t28362 = gamma_bb*t28192*t28194*t28195*2.0;
                double t28363 = t28361+t28362;
                double t28364 = 1.0/pow(t28251,3.0/2.0);
                double t28365 = a3*t28190*t28254*t28353*t28364*t28249*t28198*t28199*5.0E4;
                double t28366 = gamma_bb*t28252*t28254*t28353*t28192*t28194*t28195*t28249*2.0E5;
                double t28393 = t28252*t28353*t28363*t28249*1.0E5;
                double t28367 = t28365+t28366-t28393;
                double t28371 = t28222*t28223*t28234;
                double t28372 = t28231*t28236*t28277;
                double t28374 = t28234*t28345*t28346*t28347*t28348*t28349*t28198*t28288*(3.0/2.0);
                double t28375 = t28222*t28223;
                double t28376 = t28231*t28236*t28239;
                double t28377 = t28375+t28376;
                double t28378 = 1.0/pow(rho_b,1.0E1/3.0);
                double t28379 = t28192*t28193*t28195*t28287*(1.6E1/3.0);
                double t28380 = a1*gamma_bb*t28190*t28278*(8.0/3.0);
                double t28381 = t28380+t28379;
                double t28382 = 1.0/(c*c);
                double t28383 = 1.0/pow(t28196,1.0/5.0);
                double t28384 = t28231*t28308*t28239;
                double t28385 = t28371+t28372+t28374+t28384-t28307*t28236*t28239*t28329;
                double t28386 = 1.0/pow(rho_b,5.0/3.0);
                double t28387 = t28260*t28255*t28386*(2.0/3.0);
                double t28388 = 1.0/(t28259*t28259*t28259);
                double t28389 = c*k2*t28262*(1.0/3.0);
                double t28390 = c*k1*t28262*t28268*(1.0/6.0);
                double t28391 = t28390+t28389;
                double t28392 = t28387-t28255*t28256*t28391*t28388*2.0;
                double t28394 = c*c0*t28262*(2.0/9.0);
                double t28395 = t28252*t28254*t28353*t28192*t28193*t28195*t28249*t28287*(1.6E6/3.0);
                double t28396 = a3*gamma_bb*t28190*t28254*t28353*t28364*t28249*t28198*t28378*(3.5E5/3.0);
                double t28397 = t28394+t28395+t28396-t28252*t28353*t28381*t28249*1.0E5-c*kab1*rab1*t28252*t28262*t28254*t28353*t28247*t28383*(8.0E4/3.0);
                v_rho_b_gamma_bb[Q] += scale * c0*t28261*heaviside(c*c0*t28191*(-2.0/3.0)+t28252*t28254*t28249*exp(-t28192*t28193*t28194*t28195)*1.0E5)*(t28371+t28372+t28374+t28231*t28239*(t28232+t28233+t28283+t28284+t28285-c*c0*gamma_bb*t28202*t28221*t28207*t28216*t28227*t28195*t28197*(8.0/3.0)-c*c0*gamma_bb*t28202*t28221*t28222*t28223*t28207*t28216*t28227*t28195*t28197*(8.0/3.0))-t28307*t28236*t28239*t28329)*(1.0/2.0)-c0*t28261*t28360*t28367*t28377*(1.0/2.0)-c0*rho_b*t28261*heaviside(t28356-c*c0*t28191*(2.0/3.0))*(t28231*t28236*(t28224*t28243*t28315*2.0-t28224*t28242*t28306*t28316-gamma_bb*t28205*t28226*t28195*t28197*t28287*(1.28E2/3.0)+a5*c0*t28202*t28205*t28216*t28190*t28278*(6.4E1/9.0)-gamma_bb*t28205*t28243*t28306*t28194*t28195*t28197*4.0+gamma_bb*t28226*t28227*t28317*t28193*t28265*t28267*(2.56E2/3.0)-t28205*t28242*t28243*t28193*t28195*t28197*t28287*(3.2E1/3.0)+a5*c0*t28202*t28205*t28190*t28218*t28272*t28273*(1.6E1/3.0)+c*c0*gamma_bb*t28202*t28205*t28207*t28216*t28264*t28195*t28197*(5.44E2/9.0)-c*c0*gamma_bb*t28202*t28207*t28216*t28227*t28264*t28195*t28197*(5.44E2/9.0)+a5*c0*t28202*t28205*t28216*t28190*t28263*t28193*t28195*t28197*(1.6E2/3.0)-a5*c0*t28202*t28216*t28190*t28227*t28263*t28193*t28195*t28197*(1.6E2/3.0)+c*c0*gamma_bb*t28202*t28221*t28205*t28207*t28272*t28273*t28195*t28197*(6.4E1/3.0)-c*c0*gamma_bb*t28202*t28221*t28207*t28227*t28272*t28273*t28195*t28197*(6.4E1/3.0)+c*c0*gamma_bb*t28202*t28205*t28207*t28216*t28193*t28265*t28266*t28267*(1.024E3/9.0)-c*c0*gamma_bb*t28202*t28207*t28216*t28227*t28193*t28265*t28266*t28267*(2.048E3/9.0)+c*c0*gamma_bb*t28202*t28207*t28216*t28193*t28265*t28266*t28267*t28294*(5.12E2/3.0))+t28231*t28308*t28335+t28222*t28223*t28297+t28231*t28352*t28277+t28231*t28239*(-t28300-t28301-t28350+t28290+t28291+t28292+t28293+t28295+t28296+t28289-t28299+t28234*t28286+(t28234*(1.0/3.0))/rho_b+(t28234*t28272*2.0)/t28215+t28234*t28193*t28195*t28197*t28287*(3.2E1/3.0)-t28224*t28234*t28193*t28195*t28197*t28287*(3.2E1/3.0)+a5*gamma_bb*t28234*t28190*t28198*t28288*t28378*(7.0/3.0)+a5*c0*t28202*t28222*t28205*t28223*t28216*t28190*t28278*(1.6E1/9.0)+a5*c0*t28202*t28222*t28205*t28223*t28190*t28218*t28272*t28273*(4.0/3.0)+a5*c0*t28202*t28222*t28205*t28223*t28216*t28190*t28218*t28286*(2.0/3.0)+c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28234*t28262*(2.0/9.0)+c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28191*t28297*(2.0/3.0)+a5*c0*gamma_bb*t28202*t28222*t28205*t28223*t28216*t28234*t28190*t28278*(1.4E1/9.0)+c*c0*t28202*t28222*t28205*t28223*t28207*t28234*t28191*t28272*t28273*(4.0/3.0)+c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28234*t28191*t28286*(2.0/3.0)+c*c0*gamma_bb*t28202*t28222*t28205*t28223*t28207*t28216*t28264*t28195*t28197*(1.36E2/9.0)-c*c0*gamma_bb*t28202*t28222*t28223*t28207*t28216*t28227*t28264*t28195*t28197*(1.36E2/9.0)+a5*c0*t28202*t28222*t28205*t28223*t28216*t28190*t28263*t28193*t28195*t28197*(4.0E1/3.0)-a5*c0*t28202*t28222*t28223*t28216*t28190*t28227*t28263*t28193*t28195*t28197*(4.0E1/3.0)+c*c0*gamma_bb*t28202*t28221*t28222*t28205*t28223*t28207*t28272*t28273*t28195*t28197*(1.6E1/3.0)+c*c0*gamma_bb*t28202*t28221*t28222*t28205*t28223*t28207*t28216*t28195*t28286*t28197*(8.0/3.0)-c*c0*gamma_bb*t28202*t28221*t28222*t28223*t28207*t28227*t28272*t28273*t28195*t28197*(1.6E1/3.0)+c*c0*gamma_bb*t28202*t28222*t28205*t28223*t28207*t28216*t28193*t28265*t28266*t28267*(2.56E2/9.0)-c*c0*gamma_bb*t28202*t28221*t28222*t28223*t28207*t28216*t28227*t28195*t28286*t28197*(8.0/3.0)-c*c0*gamma_bb*t28202*t28222*t28223*t28207*t28216*t28227*t28193*t28265*t28266*t28267*(5.12E2/9.0)+c*c0*gamma_bb*t28202*t28222*t28223*t28207*t28216*t28193*t28265*t28266*t28267*t28294*(1.28E2/3.0)+c*c0*t28202*t28222*t28205*t28223*t28207*t28216*t28234*t28264*t28193*t28195*t28197*(6.4E1/9.0)-c*c0*t28202*t28222*t28223*t28207*t28216*t28234*t28227*t28264*t28193*t28195*t28197*(6.4E1/9.0))+t28222*t28223*t28234*t28286-t28307*t28325*t28308*t28239-t28307*t28236*t28335*t28329-t28307*t28325*t28236*t28277-t28307*t28352*t28239*t28329-t28307*t28236*t28239*(t28224*t28243*t28315*3.0-t28224*t28242*t28306*t28316*(3.0/2.0)-gamma_bb*t28205*t28226*t28195*t28197*t28287*6.4E1+a5*c0*t28202*t28205*t28216*t28190*t28278*(3.2E1/3.0)-gamma_bb*t28205*t28243*t28306*t28194*t28195*t28197*6.0+gamma_bb*t28226*t28227*t28317*t28193*t28265*t28267*1.28E2-t28205*t28242*t28243*t28193*t28195*t28197*t28287*1.6E1+a5*c0*t28202*t28205*t28190*t28218*t28272*t28273*8.0+c*c0*gamma_bb*t28202*t28205*t28207*t28216*t28264*t28195*t28197*(2.72E2/3.0)-c*c0*gamma_bb*t28202*t28207*t28216*t28227*t28264*t28195*t28197*(2.72E2/3.0)+a5*c0*t28202*t28205*t28216*t28190*t28263*t28193*t28195*t28197*8.0E1-a5*c0*t28202*t28216*t28190*t28227*t28263*t28193*t28195*t28197*8.0E1+c*c0*gamma_bb*t28202*t28221*t28205*t28207*t28272*t28273*t28195*t28197*3.2E1-c*c0*gamma_bb*t28202*t28221*t28207*t28227*t28272*t28273*t28195*t28197*3.2E1+c*c0*gamma_bb*t28202*t28205*t28207*t28216*t28193*t28265*t28266*t28267*(5.12E2/3.0)-c*c0*gamma_bb*t28202*t28207*t28216*t28227*t28193*t28265*t28266*t28267*(1.024E3/3.0)+c*c0*gamma_bb*t28202*t28207*t28216*t28193*t28265*t28266*t28267*t28294*2.56E2)+1.0/(t28230*t28230*t28230)*t28325*t28236*t28239*t28329*2.0+t28345*t28346*t28347*t28348*t28349*t28198*t28288*t28297*(3.0/2.0)+t28234*t28345*t28346*t28347*t28348*t28286*t28349*t28198*t28288*(3.0/2.0)-a5*1.0/(rho_b*rho_b)*1.0/(t28207*t28207)*t28190*t28345*t28382*t28347*t28348*t28286*t28349*(3.0/2.0)+gamma_bb*t28204*t28351*t28345*t28347*t28195*t28286*t28349*t28197*t28198*t28288*6.0-gamma_bb*t28351*t28345*t28347*t28195*t28348*t28286*t28349*t28197*t28198*t28288*6.0)*(1.0/2.0)+c0*rho_b*t28261*t28360*t28385*t28397*(1.0/2.0)+c0*rho_b*t28261*t28360*t28377*(t28252*t28353*t28249*(a1*t28190*t28278*(8.0/3.0)+gamma_bb*t28192*t28195*t28287*(3.2E1/3.0))*-1.0E5+t28252*t28353*t28192*t28363*t28193*t28195*t28249*t28287*(1.6E6/3.0)+a3*t28190*t28254*t28353*t28364*t28249*t28198*t28378*(3.5E5/3.0)+a3*t28190*t28353*t28381*t28364*t28249*t28198*t28199*5.0E4+gamma_bb*t28252*t28353*t28192*t28381*t28194*t28195*t28249*2.0E5+gamma_bb*t28252*t28254*t28353*t28192*t28195*t28249*t28287*(3.2E6/3.0)-(a3*a3)*gamma_bb*t28221*1.0/pow(t28251,5.0/2.0)*t28254*t28353*t28382*t28195*t28249*1.75E5+a3*gamma_bb*t28190*t28353*t28363*t28364*t28249*t28198*t28378*(3.5E5/3.0)-c*kab1*rab1*t28252*t28262*t28353*t28363*t28247*t28383*(8.0E4/3.0)-gamma_bb*t28252*t28254*t28317*t28353*(t28192*t28192)*t28193*t28249*t28267*(3.2E6/3.0)+a3*kab1*rab1*t28190*t28254*t28353*t28247*t28364*t28383*t28278*(4.0E4/3.0)-a3*1.0/pow(rho_b,2.6E1/3.0)*t28190*t28254*t28353*t28192*t28193*t28364*t28195*t28249*t28198*5.0E5+c*gamma_bb*kab1*rab1*t28252*t28254*t28353*t28192*t28264*t28247*t28383*t28195*(1.6E5/3.0))*(1.0/2.0)+c0*rho_b*t28261*t28360*t28367*(t28231*t28236*t28335+t28222*t28223*t28286+t28231*t28352*t28239-t28307*t28325*t28236*t28239+t28345*t28346*t28347*t28348*t28286*t28349*t28198*t28288*(3.0/2.0))*(1.0/2.0)+c0*rho_b*t28261*t28392*t28385*heaviside(t28356-t28358)*(1.0/2.0)-c0*rho_b*t28261*t28360*t28392*t28367*t28377*(1.0/2.0)+c0*rho_b*t28261*t28367*t28377*t28397*dirac(t28359,1.0)*(1.0/2.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t28556 = tspi_m13*tspi_m13;
                double t28557 = 1.0/pow(rho_a,1.0/3.0);
                double t28558 = a2*a2;
                double t28559 = gamma_aa*gamma_aa;
                double t28560 = 1.0/pow(rho_a,1.6E1/3.0);
                double t28561 = t28556*t28556;
                double t28562 = c*t28557;
                double t28563 = a4*a4;
                double t28564 = 1.0/c;
                double t28565 = 1.0/pow(rho_a,7.0/3.0);
                double t28566 = sqrt(t28562);
                double t28567 = t28560*t28561*t28563*t28559*2.0;
                double t28568 = exp(t28567);
                double t28569 = t28560*t28561*t28563*t28559;
                double t28570 = t28569+1.0;
                double t28571 = 1.0/(t28570*t28570);
                double t28572 = a5*gamma_aa*t28564*t28556*t28565;
                double t28573 = t28572+1.0;
                double t28584 = raa2*t28566;
                double t28574 = exp(-t28584);
                double t28575 = t28574-1.0;
                double t28576 = kaa2*t28575;
                double t28577 = pow(t28562,2.0/5.0);
                double t28585 = raa1*t28577;
                double t28578 = exp(-t28585);
                double t28579 = t28578-1.0;
                double t28580 = kaa1*t28579;
                double t28581 = -kaa0+t28580+t28576;
                double t28582 = 1.0/(t28581*t28581);
                double t28583 = c*c0*t28571*t28573*t28582*t28557*t28568*(2.0/3.0);
                double t28586 = exp(t28583);
                double t28587 = Ei(-t28583);
                double t28588 = 1.0/t28570;
                double t28589 = c*c0*t28573*t28582*t28557*t28568*(2.0/3.0);
                double t28590 = sqrt(t28589);
                v[Q] += scale * c0*rho_a*exp(-(c*c)*1.0/pow(rho_a,2.0/3.0)*1.0/pow(k1*t28566+c*k2*t28557,2.0))*heaviside(c*c0*t28557*(-2.0/3.0)+exp(-t28560*t28561*t28558*t28559)*1.0/sqrt(a3*gamma_aa*t28564*t28556*t28565+1.0)*(kab0-kab1*(exp(-rab1*pow(t28562,4.0/5.0))-1.0))*(t28560*t28561*t28558*t28559+a1*gamma_aa*1.0/pow(rho_a,8.0/3.0)*t28556+1.0)*1.0E5)*(t28586*t28587+((c*c0*t28571*t28573*t28582*t28557*t28568*t28586*t28587*(2.0/3.0)+1.0)*(t28590*t28588*4.0+c*c0*t28571*t28573*t28582*t28557*t28568*(8.0/3.0)+6.0))/(t28590*t28588*6.0+c*c0*t28571*t28573*t28582*t28557*t28568*4.0+3.0))*(1.0/2.0);
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t28592 = tspi_m13*tspi_m13;
                double t28593 = 1.0/pow(rho_a,1.0/3.0);
                double t28594 = a2*a2;
                double t28595 = gamma_aa*gamma_aa;
                double t28596 = 1.0/pow(rho_a,1.6E1/3.0);
                double t28597 = t28592*t28592;
                double t28598 = c*t28593;
                double t28599 = a4*a4;
                double t28600 = 1.0/c;
                double t28601 = 1.0/pow(rho_a,7.0/3.0);
                double t28602 = sqrt(t28598);
                double t28603 = t28595*t28596*t28597*t28599*2.0;
                double t28604 = exp(t28603);
                double t28605 = t28595*t28596*t28597*t28599;
                double t28606 = t28605+1.0;
                double t28607 = 1.0/(t28606*t28606);
                double t28608 = a5*gamma_aa*t28600*t28601*t28592;
                double t28609 = t28608+1.0;
                double t28620 = raa2*t28602;
                double t28610 = exp(-t28620);
                double t28611 = t28610-1.0;
                double t28612 = kaa2*t28611;
                double t28613 = pow(t28598,2.0/5.0);
                double t28621 = raa1*t28613;
                double t28614 = exp(-t28621);
                double t28615 = t28614-1.0;
                double t28616 = kaa1*t28615;
                double t28617 = -kaa0+t28612+t28616;
                double t28618 = 1.0/(t28617*t28617);
                double t28619 = c*c0*t28604*t28607*t28609*t28618*t28593*(2.0/3.0);
                double t28622 = exp(t28619);
                double t28623 = Ei(-t28619);
                double t28624 = 1.0/t28606;
                double t28625 = c*c0*t28604*t28609*t28618*t28593*(2.0/3.0);
                double t28626 = sqrt(t28625);
                double t28627 = t28594*t28595*t28596*t28597;
                double t28628 = pow(t28598,4.0/5.0);
                double t28678 = rab1*t28628;
                double t28629 = exp(-t28678);
                double t28630 = t28629-1.0;
                double t28679 = kab1*t28630;
                double t28631 = kab0-t28679;
                double t28632 = a3*gamma_aa*t28600*t28601*t28592;
                double t28633 = t28632+1.0;
                double t28634 = 1.0/sqrt(t28633);
                double t28635 = 1.0/pow(rho_a,8.0/3.0);
                double t28636 = a1*gamma_aa*t28635*t28592;
                double t28637 = t28627+t28636+1.0;
                double t28638 = c*c;
                double t28639 = 1.0/pow(rho_a,2.0/3.0);
                double t28640 = k1*t28602;
                double t28641 = c*k2*t28593;
                double t28642 = t28640+t28641;
                double t28643 = 1.0/(t28642*t28642);
                double t28683 = t28643*t28638*t28639;
                double t28644 = exp(-t28683);
                double t28645 = c*c0*t28604*t28622*t28623*t28607*t28609*t28618*t28593*(2.0/3.0);
                double t28646 = t28645+1.0;
                double t28647 = t28624*t28626*6.0;
                double t28648 = c*c0*t28604*t28607*t28609*t28618*t28593*4.0;
                double t28649 = t28647+t28648+3.0;
                double t28650 = 1.0/t28649;
                double t28651 = 1.0/pow(rho_a,4.0/3.0);
                double t28652 = 1.0/pow(rho_a,1.1E1/3.0);
                double t28653 = 1.0/sqrt(t28598);
                double t28654 = c*kaa2*raa2*t28610*t28651*t28653*(1.0/6.0);
                double t28655 = 1.0/pow(t28598,3.0/5.0);
                double t28656 = c*kaa1*raa1*t28614*t28651*t28655*(2.0/1.5E1);
                double t28657 = t28654+t28656;
                double t28658 = 1.0/(t28617*t28617*t28617);
                double t28659 = 1.0/pow(rho_a,2.0E1/3.0);
                double t28660 = 1.0/(t28606*t28606*t28606);
                double t28661 = t28624*t28626*4.0;
                double t28662 = c*c0*t28604*t28607*t28609*t28618*t28593*(8.0/3.0);
                double t28663 = t28661+t28662+6.0;
                double t28664 = c*c0*t28604*t28651*t28607*t28609*t28618*(2.0/9.0);
                double t28665 = a5*c0*gamma_aa*t28604*t28607*t28652*t28618*t28592*(1.4E1/9.0);
                double t28666 = c*c0*t28604*t28607*t28609*t28593*t28657*t28658*(4.0/3.0);
                double t28667 = c*c0*t28604*t28607*t28609*t28618*t28595*t28659*t28597*t28599*(6.4E1/9.0);
                double t28669 = c*c0*t28604*t28660*t28609*t28618*t28595*t28659*t28597*t28599*(6.4E1/9.0);
                double t28668 = t28664+t28665+t28666+t28667-t28669;
                double t28670 = c*c0*t28604*t28651*t28609*t28618*(2.0/9.0);
                double t28671 = a5*c0*gamma_aa*t28604*t28652*t28618*t28592*(1.4E1/9.0);
                double t28672 = c*c0*t28604*t28609*t28593*t28657*t28658*(4.0/3.0);
                double t28673 = c*c0*t28604*t28609*t28618*t28595*t28659*t28597*t28599*(6.4E1/9.0);
                double t28674 = t28670+t28671+t28672+t28673;
                double t28675 = 1.0/sqrt(t28625);
                double t28676 = 1.0/pow(rho_a,1.9E1/3.0);
                double t28677 = exp(-t28627);
                double t28680 = t28631*t28634*t28637*t28677*1.0E5;
                double t28687 = c*c0*t28593*(2.0/3.0);
                double t28681 = t28680-t28687;
                double t28682 = heaviside(t28681);
                double t28684 = t28622*t28623;
                double t28685 = t28650*t28663*t28646;
                double t28686 = t28684+t28685;
                v_rho_a[Q] += scale * c0*t28644*t28686*heaviside(c*c0*t28593*(-2.0/3.0)+t28631*t28634*t28637*exp(-t28594*t28595*t28596*t28597)*1.0E5)*(1.0/2.0)-c0*rho_a*t28644*t28682*(t28650*t28646*(t28624*t28674*t28675*2.0-t28607*t28626*t28595*t28676*t28597*t28599*(6.4E1/3.0)+c*c0*t28604*t28651*t28607*t28609*t28618*(8.0/9.0)+a5*c0*gamma_aa*t28604*t28607*t28652*t28618*t28592*(5.6E1/9.0)+c*c0*t28604*t28607*t28609*t28593*t28657*t28658*(1.6E1/3.0)-c*c0*t28604*t28660*t28609*t28618*t28595*t28659*t28597*t28599*(2.56E2/9.0)+c*c0*t28604*t28607*t28609*t28618*t28595*t28659*t28597*t28599*(2.56E2/9.0))+t28650*t28663*(t28664+t28665+t28666+t28667-t28669+c*c0*t28604*t28622*t28623*t28651*t28607*t28609*t28618*(2.0/9.0)+a5*c0*gamma_aa*t28604*t28622*t28623*t28607*t28652*t28618*t28592*(1.4E1/9.0)+c*c0*t28604*t28622*t28623*t28607*t28609*t28618*t28593*t28668*(2.0/3.0)+c*c0*t28604*t28622*t28623*t28607*t28609*t28593*t28657*t28658*(4.0/3.0)-c*c0*t28604*t28622*t28623*t28660*t28609*t28618*t28595*t28659*t28597*t28599*(6.4E1/9.0)+c*c0*t28604*t28622*t28623*t28607*t28609*t28618*t28595*t28659*t28597*t28599*(6.4E1/9.0))+t28622*t28623*t28668-t28663*t28646*1.0/(t28649*t28649)*(t28624*t28674*t28675*3.0-t28607*t28626*t28595*t28676*t28597*t28599*3.2E1+c*c0*t28604*t28651*t28607*t28609*t28618*(4.0/3.0)+a5*c0*gamma_aa*t28604*t28607*t28652*t28618*t28592*(2.8E1/3.0)+c*c0*t28604*t28607*t28609*t28593*t28657*t28658*8.0-c*c0*t28604*t28660*t28609*t28618*t28595*t28659*t28597*t28599*(1.28E2/3.0)+c*c0*t28604*t28607*t28609*t28618*t28595*t28659*t28597*t28599*(1.28E2/3.0))+(pow(rho_a,1.0/3.0)*t28600*(t28606*t28606)*(t28617*t28617)*t28668*exp(-t28603)*(3.0/2.0))/(c0*t28609))*(1.0/2.0)+c0*rho_a*t28644*t28682*t28686*(1.0/pow(rho_a,5.0/3.0)*t28643*t28638*(2.0/3.0)-1.0/(t28642*t28642*t28642)*t28638*t28639*(c*k2*t28651*(1.0/3.0)+c*k1*t28651*t28653*(1.0/6.0))*2.0)*(1.0/2.0)+c0*rho_a*t28644*t28686*dirac(-t28680+t28687)*(c*c0*t28651*(2.0/9.0)-t28631*t28634*t28677*(a1*gamma_aa*t28652*t28592*(8.0/3.0)+t28594*t28595*t28676*t28597*(1.6E1/3.0))*1.0E5+t28631*t28634*t28637*t28594*t28595*t28676*t28677*t28597*(1.6E6/3.0)+a3*gamma_aa*1.0/pow(rho_a,1.0E1/3.0)*t28600*t28631*1.0/pow(t28633,3.0/2.0)*t28592*t28637*t28677*(3.5E5/3.0)-c*kab1*rab1*t28651*t28634*t28637*t28629*t28677*1.0/pow(t28598,1.0/5.0)*(8.0E4/3.0))*(1.0/2.0);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t28690 = tspi_m13*tspi_m13;
                double t28691 = 1.0/pow(rho_a,1.0/3.0);
                double t28692 = a2*a2;
                double t28693 = gamma_aa*gamma_aa;
                double t28694 = 1.0/pow(rho_a,1.6E1/3.0);
                double t28695 = t28690*t28690;
                double t28696 = c*t28691;
                double t28697 = a4*a4;
                double t28698 = 1.0/c;
                double t28699 = 1.0/pow(rho_a,7.0/3.0);
                double t28700 = sqrt(t28696);
                double t28701 = t28693*t28694*t28695*t28697*2.0;
                double t28702 = exp(t28701);
                double t28703 = t28693*t28694*t28695*t28697;
                double t28704 = t28703+1.0;
                double t28705 = 1.0/(t28704*t28704);
                double t28706 = a5*gamma_aa*t28690*t28698*t28699;
                double t28707 = t28706+1.0;
                double t28719 = raa2*t28700;
                double t28708 = exp(-t28719);
                double t28709 = t28708-1.0;
                double t28710 = kaa2*t28709;
                double t28711 = pow(t28696,2.0/5.0);
                double t28720 = raa1*t28711;
                double t28712 = exp(-t28720);
                double t28713 = t28712-1.0;
                double t28714 = kaa1*t28713;
                double t28715 = -kaa0+t28710+t28714;
                double t28716 = 1.0/(t28715*t28715);
                double t28717 = c*c0*t28702*t28705*t28707*t28716*t28691*(2.0/3.0);
                double t28718 = 1.0/pow(rho_a,8.0/3.0);
                double t28721 = 1.0/pow(rho_a,1.7E1/3.0);
                double t28722 = exp(t28717);
                double t28723 = Ei(-t28717);
                double t28724 = 1.0/t28704;
                double t28725 = c*c0*t28702*t28707*t28716*t28691*(2.0/3.0);
                double t28726 = sqrt(t28725);
                double t28727 = 1.0/(t28704*t28704*t28704);
                double t28728 = t28724*t28726*6.0;
                double t28729 = c*c0*t28702*t28705*t28707*t28716*t28691*4.0;
                double t28730 = t28728+t28729+3.0;
                double t28731 = 1.0/t28730;
                double t28732 = a5*c0*t28702*t28705*t28716*t28690*t28718*(2.0/3.0);
                double t28733 = c*c0*gamma_aa*t28702*t28721*t28705*t28707*t28716*t28695*t28697*(8.0/3.0);
                double t28744 = c*c0*gamma_aa*t28702*t28721*t28707*t28716*t28727*t28695*t28697*(8.0/3.0);
                double t28734 = t28732+t28733-t28744;
                double t28735 = c*c0*t28702*t28722*t28705*t28723*t28707*t28716*t28691*(2.0/3.0);
                double t28736 = t28735+1.0;
                double t28737 = t28724*t28726*4.0;
                double t28738 = c*c0*t28702*t28705*t28707*t28716*t28691*(8.0/3.0);
                double t28739 = t28737+t28738+6.0;
                double t28740 = a5*c0*t28702*t28716*t28690*t28718*(2.0/3.0);
                double t28741 = c*c0*gamma_aa*t28702*t28721*t28707*t28716*t28695*t28697*(8.0/3.0);
                double t28742 = t28740+t28741;
                double t28743 = 1.0/sqrt(t28725);
                double t28745 = t28692*t28693*t28694*t28695;
                double t28746 = pow(t28696,4.0/5.0);
                double t28763 = rab1*t28746;
                double t28747 = exp(-t28763);
                double t28748 = t28747-1.0;
                double t28764 = kab1*t28748;
                double t28749 = kab0-t28764;
                double t28750 = a3*gamma_aa*t28690*t28698*t28699;
                double t28751 = t28750+1.0;
                double t28752 = 1.0/sqrt(t28751);
                double t28753 = a1*gamma_aa*t28690*t28718;
                double t28754 = t28753+t28745+1.0;
                double t28755 = c*c;
                double t28756 = 1.0/pow(rho_a,2.0/3.0);
                double t28757 = k1*t28700;
                double t28758 = c*k2*t28691;
                double t28759 = t28757+t28758;
                double t28760 = 1.0/(t28759*t28759);
                double t28761 = exp(-t28760*t28755*t28756);
                double t28762 = exp(-t28745);
                v_gamma_aa[Q] += scale * c0*rho_a*t28761*heaviside(c*c0*t28691*(-2.0/3.0)+t28752*t28754*t28749*exp(-t28692*t28693*t28694*t28695)*1.0E5)*(t28731*t28736*(t28724*t28742*t28743*2.0-gamma_aa*t28705*t28726*t28694*t28695*t28697*8.0+a5*c0*t28702*t28705*t28716*t28690*t28718*(8.0/3.0)+c*c0*gamma_aa*t28702*t28721*t28705*t28707*t28716*t28695*t28697*(3.2E1/3.0)-c*c0*gamma_aa*t28702*t28721*t28707*t28716*t28727*t28695*t28697*(3.2E1/3.0))+t28731*t28739*(t28732+t28733+a5*c0*t28702*t28722*t28705*t28723*t28716*t28690*t28718*(2.0/3.0)-c*c0*gamma_aa*t28702*t28721*t28707*t28716*t28727*t28695*t28697*(8.0/3.0)+c*c0*t28702*t28722*t28705*t28723*t28707*t28716*t28734*t28691*(2.0/3.0)+c*c0*gamma_aa*t28702*t28721*t28722*t28705*t28723*t28707*t28716*t28695*t28697*(8.0/3.0)-c*c0*gamma_aa*t28702*t28721*t28722*t28723*t28707*t28716*t28727*t28695*t28697*(8.0/3.0))+t28722*t28723*t28734-1.0/(t28730*t28730)*t28736*t28739*(t28724*t28742*t28743*3.0-gamma_aa*t28705*t28726*t28694*t28695*t28697*1.2E1+a5*c0*t28702*t28705*t28716*t28690*t28718*4.0+c*c0*gamma_aa*t28702*t28721*t28705*t28707*t28716*t28695*t28697*1.6E1-c*c0*gamma_aa*t28702*t28721*t28707*t28716*t28727*t28695*t28697*1.6E1)+(pow(rho_a,1.0/3.0)*(t28704*t28704)*(t28715*t28715)*t28734*t28698*exp(-t28701)*(3.0/2.0))/(c0*t28707))*(1.0/2.0)-c0*rho_a*t28761*dirac(c*c0*t28691*(2.0/3.0)-t28752*t28762*t28754*t28749*1.0E5)*(t28722*t28723+t28731*t28736*t28739)*(t28752*t28762*t28749*(a1*t28690*t28718+gamma_aa*t28692*t28694*t28695*2.0)*-1.0E5+a3*1.0/pow(t28751,3.0/2.0)*t28690*t28762*t28754*t28749*t28698*t28699*5.0E4+gamma_aa*t28752*t28762*t28754*t28692*t28694*t28695*t28749*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t28770 = tspi_m13*tspi_m13;
                double t28771 = 1.0/pow(rho_a,1.0/3.0);
                double t28772 = a2*a2;
                double t28773 = gamma_aa*gamma_aa;
                double t28774 = 1.0/pow(rho_a,1.6E1/3.0);
                double t28775 = t28770*t28770;
                double t28776 = c*t28771;
                double t28777 = a4*a4;
                double t28778 = t28773*t28774*t28775*t28777*2.0;
                double t28779 = exp(t28778);
                double t28780 = 1.0/c;
                double t28781 = 1.0/pow(rho_a,7.0/3.0);
                double t28782 = sqrt(t28776);
                double t28783 = t28773*t28774*t28775*t28777;
                double t28784 = t28783+1.0;
                double t28785 = 1.0/(t28784*t28784);
                double t28786 = a5*gamma_aa*t28770*t28780*t28781;
                double t28787 = t28786+1.0;
                double t28798 = raa2*t28782;
                double t28788 = exp(-t28798);
                double t28789 = t28788-1.0;
                double t28790 = kaa2*t28789;
                double t28791 = pow(t28776,2.0/5.0);
                double t28799 = raa1*t28791;
                double t28792 = exp(-t28799);
                double t28793 = t28792-1.0;
                double t28794 = kaa1*t28793;
                double t28795 = -kaa0+t28790+t28794;
                double t28796 = 1.0/(t28795*t28795);
                double t28797 = c*c0*t28771*t28785*t28787*t28796*t28779*(2.0/3.0);
                double t28800 = 1.0/t28784;
                double t28801 = 1.0/pow(rho_a,4.0/3.0);
                double t28802 = c*c0*t28771*t28787*t28796*t28779*(2.0/3.0);
                double t28803 = sqrt(t28802);
                double t28804 = 1.0/pow(rho_a,1.1E1/3.0);
                double t28805 = 1.0/sqrt(t28776);
                double t28806 = c*kaa2*raa2*t28801*t28805*t28788*(1.0/6.0);
                double t28807 = 1.0/pow(t28776,3.0/5.0);
                double t28808 = c*kaa1*raa1*t28801*t28807*t28792*(2.0/1.5E1);
                double t28809 = t28806+t28808;
                double t28810 = 1.0/(t28795*t28795*t28795);
                double t28811 = 1.0/pow(rho_a,2.0E1/3.0);
                double t28812 = exp(t28797);
                double t28813 = Ei(-t28797);
                double t28814 = 1.0/(t28784*t28784*t28784);
                double t28815 = t28800*t28803*6.0;
                double t28816 = c*c0*t28771*t28785*t28787*t28796*t28779*4.0;
                double t28817 = t28815+t28816+3.0;
                double t28818 = 1.0/t28817;
                double t28819 = c*c0*t28801*t28785*t28787*t28796*t28779*(2.0/9.0);
                double t28820 = a5*c0*gamma_aa*t28804*t28770*t28785*t28796*t28779*(1.4E1/9.0);
                double t28821 = c*c0*t28810*t28771*t28809*t28785*t28787*t28779*(4.0/3.0);
                double t28822 = c*c0*t28811*t28773*t28775*t28785*t28777*t28787*t28796*t28779*(6.4E1/9.0);
                double t28824 = c*c0*t28811*t28814*t28773*t28775*t28777*t28787*t28796*t28779*(6.4E1/9.0);
                double t28823 = t28820+t28821+t28822-t28824+t28819;
                double t28825 = c*c0*t28812*t28813*t28771*t28785*t28787*t28796*t28779*(2.0/3.0);
                double t28826 = t28825+1.0;
                double t28827 = t28800*t28803*4.0;
                double t28828 = c*c0*t28771*t28785*t28787*t28796*t28779*(8.0/3.0);
                double t28829 = t28827+t28828+6.0;
                double t28830 = c*c0*t28801*t28787*t28796*t28779*(2.0/9.0);
                double t28831 = a5*c0*gamma_aa*t28804*t28770*t28796*t28779*(1.4E1/9.0);
                double t28832 = c*c0*t28810*t28771*t28809*t28787*t28779*(4.0/3.0);
                double t28833 = c*c0*t28811*t28773*t28775*t28777*t28787*t28796*t28779*(6.4E1/9.0);
                double t28834 = t28830+t28831+t28832+t28833;
                double t28835 = 1.0/sqrt(t28802);
                double t28836 = 1.0/pow(rho_a,1.9E1/3.0);
                double t28837 = t28772*t28773*t28774*t28775;
                double t28838 = pow(t28776,4.0/5.0);
                double t28856 = rab1*t28838;
                double t28839 = exp(-t28856);
                double t28840 = t28839-1.0;
                double t28857 = kab1*t28840;
                double t28841 = kab0-t28857;
                double t28842 = a3*gamma_aa*t28770*t28780*t28781;
                double t28843 = t28842+1.0;
                double t28844 = 1.0/sqrt(t28843);
                double t28845 = 1.0/pow(rho_a,8.0/3.0);
                double t28846 = a1*gamma_aa*t28770*t28845;
                double t28847 = t28837+t28846+1.0;
                double t28848 = c*c;
                double t28849 = 1.0/pow(rho_a,2.0/3.0);
                double t28850 = k1*t28782;
                double t28851 = c*k2*t28771;
                double t28852 = t28850+t28851;
                double t28853 = 1.0/(t28852*t28852);
                double t28859 = t28853*t28848*t28849;
                double t28854 = exp(-t28859);
                double t28855 = exp(-t28837);
                double t28858 = c*c0*t28771*(2.0/3.0);
                double t28860 = t28800*t28834*t28835*2.0;
                double t28861 = c*c0*t28801*t28785*t28787*t28796*t28779*(8.0/9.0);
                double t28862 = a5*c0*gamma_aa*t28804*t28770*t28785*t28796*t28779*(5.6E1/9.0);
                double t28863 = c*c0*t28810*t28771*t28809*t28785*t28787*t28779*(1.6E1/3.0);
                double t28864 = c*c0*t28811*t28773*t28775*t28785*t28777*t28787*t28796*t28779*(2.56E2/9.0);
                double t28915 = t28803*t28773*t28836*t28775*t28785*t28777*(6.4E1/3.0);
                double t28916 = c*c0*t28811*t28814*t28773*t28775*t28777*t28787*t28796*t28779*(2.56E2/9.0);
                double t28865 = t28860+t28861-t28915+t28862-t28916+t28863+t28864;
                double t28866 = c*c0*t28801*t28812*t28813*t28785*t28787*t28796*t28779*(2.0/9.0);
                double t28867 = c*c0*t28810*t28812*t28813*t28771*t28809*t28785*t28787*t28779*(4.0/3.0);
                double t28868 = c*c0*t28812*t28813*t28823*t28771*t28785*t28787*t28796*t28779*(2.0/3.0);
                double t28869 = a5*c0*gamma_aa*t28812*t28804*t28813*t28770*t28785*t28796*t28779*(1.4E1/9.0);
                double t28870 = c*c0*t28811*t28812*t28813*t28773*t28775*t28785*t28777*t28787*t28796*t28779*(6.4E1/9.0);
                double t28919 = c*c0*t28811*t28812*t28813*t28814*t28773*t28775*t28777*t28787*t28796*t28779*(6.4E1/9.0);
                double t28871 = t28820+t28821+t28822-t28824+t28870+t28819-t28919+t28866+t28867+t28868+t28869;
                double t28872 = t28777*t28777;
                double t28873 = t28773*t28773;
                double t28874 = t28775*t28775;
                double t28875 = raa2*raa2;
                double t28876 = c*kaa2*t28781*t28875*t28788*(1.0/3.6E1);
                double t28877 = raa1*raa1;
                double t28878 = 1.0/pow(t28776,6.0/5.0);
                double t28879 = kaa1*t28845*t28792*t28848*t28877*t28878*(4.0/2.25E2);
                double t28880 = 1.0/pow(t28776,3.0/2.0);
                double t28881 = kaa2*raa2*t28880*t28845*t28848*t28788*(1.0/3.6E1);
                double t28882 = 1.0/pow(t28776,8.0/5.0);
                double t28883 = kaa1*raa1*t28845*t28792*t28882*t28848*(2.0/7.5E1);
                double t28893 = c*kaa2*raa2*t28805*t28781*t28788*(2.0/9.0);
                double t28894 = c*kaa1*raa1*t28807*t28781*t28792*(8.0/4.5E1);
                double t28884 = t28881+t28883-t28893+t28876-t28894+t28879;
                double t28885 = t28809*t28809;
                double t28886 = 1.0/(t28795*t28795*t28795*t28795);
                double t28887 = 1.0/pow(rho_a,1.4E1/3.0);
                double t28888 = 1.0/pow(rho_a,1.0E1);
                double t28889 = 1.0/pow(rho_a,1.3E1);
                double t28890 = 1.0/pow(rho_a,2.3E1/3.0);
                double t28891 = 1.0/pow(rho_a,1.0E1/3.0);
                double t28892 = 1.0/t28787;
                double t28895 = t28823*t28823;
                double t28896 = 1.0/(t28784*t28784*t28784*t28784);
                double t28897 = c*c0*t28781*t28785*t28787*t28796*t28779*(8.0/2.7E1);
                double t28898 = c*c0*t28771*t28785*t28885*t28787*t28886*t28779*4.0;
                double t28899 = a5*c0*gamma_aa*t28770*t28785*t28796*t28779*t28887*(5.6E1/9.0);
                double t28900 = c*c0*t28801*t28810*t28809*t28785*t28787*t28779*(8.0/9.0);
                double t28901 = a5*c0*gamma_aa*t28810*t28804*t28770*t28809*t28785*t28779*(5.6E1/9.0);
                double t28902 = a5*c0*gamma_aa*t28770*t28773*t28775*t28785*t28777*t28796*t28779*t28888*(8.96E2/2.7E1);
                double t28903 = c*c0*t28872*t28873*t28874*t28785*t28787*t28796*t28779*t28889*(2.048E3/2.7E1);
                double t28904 = c*c0*t28872*t28873*t28874*t28787*t28796*t28779*t28896*t28889*(1.024E3/9.0);
                double t28905 = c*c0*t28773*t28890*t28775*t28785*t28777*t28787*t28796*t28779*(4.48E2/9.0);
                double t28906 = c*c0*t28810*t28811*t28773*t28809*t28775*t28785*t28777*t28787*t28779*(2.56E2/9.0);
                double t28939 = c*c0*t28810*t28771*t28785*t28884*t28787*t28779*(4.0/3.0);
                double t28940 = a5*c0*gamma_aa*t28814*t28770*t28773*t28775*t28777*t28796*t28779*t28888*(8.96E2/2.7E1);
                double t28941 = c*c0*t28814*t28872*t28873*t28874*t28787*t28796*t28779*t28889*(4.096E3/2.7E1);
                double t28942 = c*c0*t28814*t28773*t28890*t28775*t28777*t28787*t28796*t28779*(4.48E2/9.0);
                double t28943 = c*c0*t28810*t28811*t28814*t28773*t28809*t28775*t28777*t28787*t28779*(2.56E2/9.0);
                double t28907 = t28900+t28901+t28902+t28903+t28904-t28940+t28905-t28941+t28906-t28942-t28943-t28939+t28897+t28898+t28899;
                double t28908 = 1.0/(t28817*t28817);
                double t28909 = t28800*t28834*t28835*3.0;
                double t28910 = c*c0*t28801*t28785*t28787*t28796*t28779*(4.0/3.0);
                double t28911 = a5*c0*gamma_aa*t28804*t28770*t28785*t28796*t28779*(2.8E1/3.0);
                double t28912 = c*c0*t28810*t28771*t28809*t28785*t28787*t28779*8.0;
                double t28913 = c*c0*t28811*t28773*t28775*t28785*t28777*t28787*t28796*t28779*(1.28E2/3.0);
                double t28917 = t28803*t28773*t28836*t28775*t28785*t28777*3.2E1;
                double t28918 = c*c0*t28811*t28814*t28773*t28775*t28777*t28787*t28796*t28779*(1.28E2/3.0);
                double t28914 = t28910+t28911+t28912+t28913-t28917+t28909-t28918;
                double t28920 = c*c0*t28781*t28787*t28796*t28779*(8.0/2.7E1);
                double t28921 = a5*c0*gamma_aa*t28770*t28796*t28779*t28887*(5.6E1/9.0);
                double t28922 = c*c0*t28801*t28810*t28809*t28787*t28779*(8.0/9.0);
                double t28923 = c*c0*t28771*t28885*t28787*t28886*t28779*4.0;
                double t28924 = a5*c0*gamma_aa*t28770*t28773*t28775*t28777*t28796*t28779*t28888*(8.96E2/2.7E1);
                double t28925 = a5*c0*gamma_aa*t28810*t28804*t28770*t28809*t28779*(5.6E1/9.0);
                double t28926 = c*c0*t28872*t28873*t28874*t28787*t28796*t28779*t28889*(2.048E3/2.7E1);
                double t28927 = c*c0*t28773*t28890*t28775*t28777*t28787*t28796*t28779*(4.48E2/9.0);
                double t28928 = c*c0*t28810*t28811*t28773*t28809*t28775*t28777*t28787*t28779*(2.56E2/9.0);
                double t28929 = t28920+t28921+t28922+t28923+t28924+t28925+t28926+t28927+t28928-c*c0*t28810*t28771*t28884*t28787*t28779*(4.0/3.0);
                double t28930 = t28834*t28834;
                double t28931 = 1.0/pow(t28802,3.0/2.0);
                double t28932 = 1.0/pow(rho_a,2.2E1/3.0);
                double t28933 = 1.0/pow(rho_a,3.8E1/3.0);
                double t28934 = 1.0/c0;
                double t28935 = exp(-t28778);
                double t28936 = t28784*t28784;
                double t28937 = t28795*t28795;
                double t28938 = pow(rho_a,1.0/3.0);
                double t28944 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t28945 = t28841*t28844*t28855*t28847*1.0E5;
                double t28946 = t28945-t28858;
                double t28947 = heaviside(t28946);
                double t28948 = t28812*t28813;
                double t28949 = t28826*t28818*t28829;
                double t28950 = t28948+t28949;
                double t28951 = t28772*t28773*t28836*t28775*(1.6E1/3.0);
                double t28952 = a1*gamma_aa*t28804*t28770*(8.0/3.0);
                double t28953 = t28951+t28952;
                double t28954 = 1.0/(c*c);
                double t28955 = 1.0/pow(t28776,1.0/5.0);
                double t28956 = 1.0/pow(t28843,3.0/2.0);
                double t28957 = 1.0/pow(rho_a,5.0/3.0);
                double t28958 = t28853*t28848*t28957*(2.0/3.0);
                double t28959 = 1.0/(t28852*t28852*t28852);
                double t28960 = c*k2*t28801*(1.0/3.0);
                double t28961 = c*k1*t28801*t28805*(1.0/6.0);
                double t28962 = t28960+t28961;
                double t28976 = t28962*t28848*t28849*t28959*2.0;
                double t28963 = t28958-t28976;
                double t28964 = t28826*t28818*t28865;
                double t28965 = t28812*t28813*t28823;
                double t28966 = t28871*t28818*t28829;
                double t28967 = t28823*t28780*t28934*t28935*t28936*t28892*t28937*t28938*(3.0/2.0);
                double t28971 = t28914*t28826*t28908*t28829;
                double t28968 = -t28971+t28964+t28965+t28966+t28967;
                double t28969 = -t28945+t28858;
                double t28970 = dirac(t28969);
                double t28972 = c*c0*t28801*(2.0/9.0);
                double t28973 = t28841*t28772*t28844*t28773*t28836*t28855*t28775*t28847*(1.6E6/3.0);
                double t28974 = a3*gamma_aa*t28841*t28770*t28780*t28855*t28891*t28847*t28956*(3.5E5/3.0);
                double t28977 = t28841*t28844*t28953*t28855*1.0E5;
                double t28978 = c*kab1*rab1*t28801*t28844*t28855*t28847*t28955*t28839*(8.0E4/3.0);
                double t28975 = t28972+t28973+t28974-t28977-t28978;
                v_rho_a_rho_a[Q] += scale * -c0*t28854*t28968*heaviside(c*c0*t28771*(-2.0/3.0)+t28841*t28844*t28847*exp(-t28772*t28773*t28774*t28775)*1.0E5)+c0*t28950*t28854*t28975*dirac(t28858-t28841*t28844*t28855*t28847*1.0E5)+c0*t28950*t28854*t28963*t28947+c0*rho_a*t28854*t28947*(t28826*t28818*(-t28800*t28930*t28931+t28800*t28835*t28929*2.0+t28803*t28814*t28933*t28872*t28873*t28874*(2.048E3/9.0)-t28803*t28932*t28773*t28775*t28785*t28777*(1.216E3/9.0)+c*c0*t28781*t28785*t28787*t28796*t28779*(3.2E1/2.7E1)-t28834*t28835*t28773*t28836*t28775*t28785*t28777*(6.4E1/3.0)+a5*c0*gamma_aa*t28770*t28785*t28796*t28779*t28887*(2.24E2/9.0)+c*c0*t28801*t28810*t28809*t28785*t28787*t28779*(3.2E1/9.0)-c*c0*t28810*t28771*t28785*t28884*t28787*t28779*(1.6E1/3.0)+c*c0*t28771*t28785*t28885*t28787*t28886*t28779*1.6E1+a5*c0*gamma_aa*t28810*t28804*t28770*t28809*t28785*t28779*(2.24E2/9.0)-c*c0*t28814*t28773*t28890*t28775*t28777*t28787*t28796*t28779*(1.792E3/9.0)-c*c0*t28814*t28872*t28873*t28874*t28787*t28796*t28779*t28889*(1.6384E4/2.7E1)+c*c0*t28773*t28890*t28775*t28785*t28777*t28787*t28796*t28779*(1.792E3/9.0)+c*c0*t28872*t28873*t28874*t28785*t28787*t28796*t28779*t28889*(8.192E3/2.7E1)+c*c0*t28872*t28873*t28874*t28787*t28796*t28779*t28896*t28889*(4.096E3/9.0)-a5*c0*gamma_aa*t28814*t28770*t28773*t28775*t28777*t28796*t28779*t28888*(3.584E3/2.7E1)+a5*c0*gamma_aa*t28770*t28773*t28775*t28785*t28777*t28796*t28779*t28888*(3.584E3/2.7E1)-c*c0*t28810*t28811*t28814*t28773*t28809*t28775*t28777*t28787*t28779*(1.024E3/9.0)+c*c0*t28810*t28811*t28773*t28809*t28775*t28785*t28777*t28787*t28779*(1.024E3/9.0))+t28812*t28813*t28907+t28812*t28813*t28895+t28871*t28818*t28865*2.0+t28818*t28829*(t28900+t28901+t28902+t28903+t28904+t28905+t28906+t28895+t28897+t28898+t28899+(t28823*(1.0/3.0))/rho_a+(t28823*t28809*2.0)/t28795+t28823*t28773*t28836*t28775*t28777*(3.2E1/3.0)-t28800*t28823*t28773*t28836*t28775*t28777*(3.2E1/3.0)+a5*gamma_aa*t28823*t28770*t28780*t28891*t28892*(7.0/3.0)-c*c0*t28810*t28771*t28785*t28884*t28787*t28779*(4.0/3.0)+c*c0*t28812*t28813*t28781*t28785*t28787*t28796*t28779*(8.0/2.7E1)+a5*c0*gamma_aa*t28812*t28813*t28770*t28785*t28796*t28779*t28887*(5.6E1/9.0)+c*c0*t28801*t28810*t28812*t28813*t28809*t28785*t28787*t28779*(8.0/9.0)+c*c0*t28801*t28812*t28813*t28823*t28785*t28787*t28796*t28779*(4.0/9.0)-c*c0*t28810*t28812*t28813*t28771*t28785*t28884*t28787*t28779*(4.0/3.0)+c*c0*t28812*t28813*t28771*t28907*t28785*t28787*t28796*t28779*(2.0/3.0)+c*c0*t28812*t28813*t28771*t28785*t28885*t28787*t28886*t28779*4.0+c*c0*t28812*t28813*t28771*t28785*t28787*t28796*t28895*t28779*(2.0/3.0)-c*c0*t28814*t28773*t28890*t28775*t28777*t28787*t28796*t28779*(4.48E2/9.0)-c*c0*t28814*t28872*t28873*t28874*t28787*t28796*t28779*t28889*(4.096E3/2.7E1)+a5*c0*gamma_aa*t28810*t28812*t28804*t28813*t28770*t28809*t28785*t28779*(5.6E1/9.0)+a5*c0*gamma_aa*t28812*t28804*t28813*t28823*t28770*t28785*t28796*t28779*(2.8E1/9.0)-a5*c0*gamma_aa*t28814*t28770*t28773*t28775*t28777*t28796*t28779*t28888*(8.96E2/2.7E1)+c*c0*t28810*t28812*t28813*t28823*t28771*t28809*t28785*t28787*t28779*(8.0/3.0)-c*c0*t28810*t28811*t28814*t28773*t28809*t28775*t28777*t28787*t28779*(2.56E2/9.0)-c*c0*t28812*t28813*t28814*t28773*t28890*t28775*t28777*t28787*t28796*t28779*(4.48E2/9.0)-c*c0*t28812*t28813*t28814*t28872*t28873*t28874*t28787*t28796*t28779*t28889*(4.096E3/2.7E1)+c*c0*t28812*t28813*t28773*t28890*t28775*t28785*t28777*t28787*t28796*t28779*(4.48E2/9.0)+c*c0*t28812*t28813*t28872*t28873*t28874*t28785*t28787*t28796*t28779*t28889*(2.048E3/2.7E1)+c*c0*t28812*t28813*t28872*t28873*t28874*t28787*t28796*t28779*t28896*t28889*(1.024E3/9.0)-a5*c0*gamma_aa*t28812*t28813*t28814*t28770*t28773*t28775*t28777*t28796*t28779*t28888*(8.96E2/2.7E1)+a5*c0*gamma_aa*t28812*t28813*t28770*t28773*t28775*t28785*t28777*t28796*t28779*t28888*(8.96E2/2.7E1)-c*c0*t28810*t28811*t28812*t28813*t28814*t28773*t28809*t28775*t28777*t28787*t28779*(2.56E2/9.0)+c*c0*t28810*t28811*t28812*t28813*t28773*t28809*t28775*t28785*t28777*t28787*t28779*(2.56E2/9.0)-c*c0*t28811*t28812*t28813*t28814*t28823*t28773*t28775*t28777*t28787*t28796*t28779*(1.28E2/9.0)+c*c0*t28811*t28812*t28813*t28823*t28773*t28775*t28785*t28777*t28787*t28796*t28779*(1.28E2/9.0))-t28826*t28908*t28829*(t28800*t28930*t28931*(-3.0/2.0)+t28800*t28835*t28929*3.0+t28803*t28814*t28933*t28872*t28873*t28874*(1.024E3/3.0)-t28803*t28932*t28773*t28775*t28785*t28777*(6.08E2/3.0)+c*c0*t28781*t28785*t28787*t28796*t28779*(1.6E1/9.0)-t28834*t28835*t28773*t28836*t28775*t28785*t28777*3.2E1+a5*c0*gamma_aa*t28770*t28785*t28796*t28779*t28887*(1.12E2/3.0)+c*c0*t28801*t28810*t28809*t28785*t28787*t28779*(1.6E1/3.0)-c*c0*t28810*t28771*t28785*t28884*t28787*t28779*8.0+c*c0*t28771*t28785*t28885*t28787*t28886*t28779*2.4E1+a5*c0*gamma_aa*t28810*t28804*t28770*t28809*t28785*t28779*(1.12E2/3.0)-c*c0*t28814*t28773*t28890*t28775*t28777*t28787*t28796*t28779*(8.96E2/3.0)-c*c0*t28814*t28872*t28873*t28874*t28787*t28796*t28779*t28889*(8.192E3/9.0)+c*c0*t28773*t28890*t28775*t28785*t28777*t28787*t28796*t28779*(8.96E2/3.0)+c*c0*t28872*t28873*t28874*t28785*t28787*t28796*t28779*t28889*(4.096E3/9.0)+c*c0*t28872*t28873*t28874*t28787*t28796*t28779*t28896*t28889*(2.048E3/3.0)-a5*c0*gamma_aa*t28814*t28770*t28773*t28775*t28777*t28796*t28779*t28888*(1.792E3/9.0)+a5*c0*gamma_aa*t28770*t28773*t28775*t28785*t28777*t28796*t28779*t28888*(1.792E3/9.0)-c*c0*t28810*t28811*t28814*t28773*t28809*t28775*t28777*t28787*t28779*(5.12E2/3.0)+c*c0*t28810*t28811*t28773*t28809*t28775*t28785*t28777*t28787*t28779*(5.12E2/3.0))-t28914*t28826*t28908*t28865*2.0-t28914*t28871*t28908*t28829*2.0+(t28914*t28914)*1.0/(t28817*t28817*t28817)*t28826*t28829*2.0-t28823*t28780*t28934*t28935*t28936*t28892*t28937*t28849*(1.0/2.0)+t28780*t28907*t28934*t28935*t28936*t28892*t28937*t28938*(3.0/2.0)+t28780*t28934*t28935*t28936*t28892*t28937*t28938*t28895*(3.0/2.0)-t28823*t28780*t28934*t28809*t28935*t28936*t28892*t28938*t28795*3.0-t28823*t28780*t28934*t28773*t28935*t28944*t28936*t28775*t28892*t28937*t28777*1.6E1+t28823*t28780*t28934*t28773*t28935*t28944*t28775*t28784*t28892*t28937*t28777*1.6E1-a5*gamma_aa*1.0/(rho_a*rho_a*rho_a)*t28823*t28770*t28934*t28935*t28936*t28954*t28937*1.0/(t28787*t28787)*(7.0/2.0))*(1.0/2.0)-c0*rho_a*t28970*t28854*t28975*t28968-c0*rho_a*t28854*t28963*t28947*t28968+c0*rho_a*t28950*t28854*(t28963*t28963)*t28947*(1.0/2.0)-c0*rho_a*t28950*t28970*t28854*(c*c0*t28781*(8.0/2.7E1)-t28841*t28844*t28855*(a1*gamma_aa*t28770*t28887*(8.8E1/9.0)+t28932*t28772*t28773*t28775*(3.04E2/9.0))*1.0E5+t28841*t28932*t28772*t28844*t28773*t28855*t28775*t28847*(3.04E7/9.0)+t28841*t28772*t28844*t28773*t28836*t28953*t28855*t28775*(3.2E6/3.0)-t28841*t28933*(t28772*t28772)*t28844*t28855*t28873*t28847*t28874*(2.56E7/9.0)-(a3*a3)*t28811*t28841*1.0/pow(t28843,5.0/2.0)*t28773*t28855*t28954*t28775*t28847*(1.225E6/3.0)+kab1*(rab1*rab1)*t28844*t28845*t28855*t28847*1.0/pow(t28776,2.0/5.0)*t28839*t28848*(6.4E4/9.0)+a3*gamma_aa*t28841*t28770*t28780*t28953*t28855*t28891*t28956*(7.0E5/3.0)-c*kab1*rab1*t28801*t28844*t28953*t28855*t28955*t28839*(1.6E5/3.0)-c*kab1*rab1*t28781*t28844*t28855*t28847*t28955*t28839*(3.2E5/9.0)+kab1*rab1*t28844*t28845*t28855*t28847*t28839*t28848*t28878*(1.6E4/9.0)+a3*gamma_aa*1.0/pow(rho_a,1.3E1/3.0)*t28841*t28770*t28780*t28855*t28847*t28956*(3.5E6/9.0)+a3*gamma_aa*kab1*rab1*t28770*t28855*t28847*t28955*t28839*t28956*t28887*(5.6E5/9.0)-a3*gamma_aa*1.0/pow(rho_a,2.9E1/3.0)*t28841*t28770*t28780*t28772*t28773*t28855*t28775*t28847*t28956*(1.12E7/9.0)+c*kab1*rab1*t28772*t28844*t28773*t28890*t28855*t28775*t28847*t28955*t28839*(2.56E6/9.0))*(1.0/2.0)-c0*rho_a*t28950*t28854*t28947*(t28853*t28845*t28848*(1.0E1/9.0)-t28962*t28848*t28957*t28959*(8.0/3.0)+1.0/(t28852*t28852*t28852*t28852)*(t28962*t28962)*t28848*t28849*6.0-t28848*t28849*t28959*(c*k2*t28781*(4.0/9.0)+c*k1*t28805*t28781*(2.0/9.0)-k1*t28880*t28845*t28848*(1.0/3.6E1))*2.0)*(1.0/2.0)-c0*rho_a*t28950*t28854*(t28975*t28975)*dirac(t28969,1.0)*(1.0/2.0)+c0*rho_a*t28950*t28970*t28854*t28963*t28975;
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t29196 = tspi_m13*tspi_m13;
                double t29197 = 1.0/pow(rho_a,1.0/3.0);
                double t29198 = a2*a2;
                double t29199 = gamma_aa*gamma_aa;
                double t29200 = 1.0/pow(rho_a,1.6E1/3.0);
                double t29201 = t29196*t29196;
                double t29202 = c*t29197;
                double t29203 = a4*a4;
                double t29204 = t29200*t29201*t29203*t29199*2.0;
                double t29205 = exp(t29204);
                double t29206 = 1.0/c;
                double t29207 = 1.0/pow(rho_a,7.0/3.0);
                double t29208 = sqrt(t29202);
                double t29209 = t29200*t29201*t29203*t29199;
                double t29210 = t29209+1.0;
                double t29211 = 1.0/(t29210*t29210);
                double t29212 = a5*gamma_aa*t29206*t29207*t29196;
                double t29213 = t29212+1.0;
                double t29224 = raa2*t29208;
                double t29214 = exp(-t29224);
                double t29215 = t29214-1.0;
                double t29216 = kaa2*t29215;
                double t29217 = pow(t29202,2.0/5.0);
                double t29225 = raa1*t29217;
                double t29218 = exp(-t29225);
                double t29219 = t29218-1.0;
                double t29220 = kaa1*t29219;
                double t29221 = -kaa0+t29220+t29216;
                double t29222 = 1.0/(t29221*t29221);
                double t29223 = c*c0*t29211*t29213*t29222*t29205*t29197*(2.0/3.0);
                double t29226 = 1.0/t29210;
                double t29227 = c*c0*t29213*t29222*t29205*t29197*(2.0/3.0);
                double t29228 = 1.0/pow(rho_a,8.0/3.0);
                double t29229 = 1.0/pow(rho_a,1.7E1/3.0);
                double t29234 = a5*c0*t29222*t29205*t29228*t29196*(2.0/3.0);
                double t29235 = c*c0*gamma_aa*t29201*t29203*t29213*t29222*t29205*t29229*(8.0/3.0);
                double t29230 = t29234+t29235;
                double t29231 = sqrt(t29227);
                double t29232 = t29203*t29203;
                double t29233 = t29201*t29201;
                double t29236 = 1.0/sqrt(t29227);
                double t29237 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t29238 = 1.0/(t29210*t29210*t29210);
                double t29239 = 1.0/pow(rho_a,1.1E1);
                double t29240 = t29231*t29226*6.0;
                double t29241 = c*c0*t29211*t29213*t29222*t29205*t29197*4.0;
                double t29242 = t29240+t29241+3.0;
                double t29243 = 1.0/t29242;
                double t29245 = a5*c0*t29211*t29222*t29205*t29228*t29196*(2.0/3.0);
                double t29246 = c*c0*gamma_aa*t29201*t29211*t29203*t29213*t29222*t29205*t29229*(8.0/3.0);
                double t29247 = c*c0*gamma_aa*t29201*t29203*t29213*t29222*t29205*t29229*t29238*(8.0/3.0);
                double t29244 = t29245+t29246-t29247;
                double t29248 = exp(t29223);
                double t29249 = Ei(-t29223);
                double t29250 = t29244*t29244;
                double t29251 = 1.0/(t29210*t29210*t29210*t29210);
                double t29252 = a5*c0*gamma_aa*t29201*t29211*t29203*t29222*t29205*t29237*t29196*(1.6E1/3.0);
                double t29253 = c*c0*t29201*t29211*t29203*t29213*t29222*t29205*t29229*(8.0/3.0);
                double t29254 = c*c0*t29211*t29213*t29222*t29205*t29232*t29233*t29239*t29199*(3.2E1/3.0);
                double t29255 = c*c0*t29213*t29222*t29205*t29232*t29233*t29251*t29239*t29199*1.6E1;
                double t29290 = a5*c0*gamma_aa*t29201*t29203*t29222*t29205*t29237*t29238*t29196*(1.6E1/3.0);
                double t29291 = c*c0*t29201*t29203*t29213*t29222*t29205*t29229*t29238*(8.0/3.0);
                double t29292 = c*c0*t29213*t29222*t29205*t29232*t29233*t29238*t29239*t29199*(6.4E1/3.0);
                double t29256 = t29252+t29253+t29254-t29290+t29255-t29291-t29292;
                double t29257 = t29231*t29226*4.0;
                double t29258 = c*c0*t29211*t29213*t29222*t29205*t29197*(8.0/3.0);
                double t29259 = t29257+t29258+6.0;
                double t29260 = a5*c0*t29211*t29222*t29205*t29228*t29248*t29249*t29196*(2.0/3.0);
                double t29261 = c*c0*t29211*t29213*t29222*t29205*t29244*t29248*t29249*t29197*(2.0/3.0);
                double t29262 = c*c0*gamma_aa*t29201*t29211*t29203*t29213*t29222*t29205*t29229*t29248*t29249*(8.0/3.0);
                double t29327 = c*c0*gamma_aa*t29201*t29203*t29213*t29222*t29205*t29229*t29238*t29248*t29249*(8.0/3.0);
                double t29263 = t29260+t29261+t29262+t29245+t29246-t29327-t29247;
                double t29264 = c*c0*t29211*t29213*t29222*t29205*t29248*t29249*t29197*(2.0/3.0);
                double t29265 = t29264+1.0;
                double t29266 = t29230*t29226*t29236*3.0;
                double t29267 = a5*c0*t29211*t29222*t29205*t29228*t29196*4.0;
                double t29268 = c*c0*gamma_aa*t29201*t29211*t29203*t29213*t29222*t29205*t29229*1.6E1;
                double t29271 = gamma_aa*t29200*t29201*t29211*t29203*t29231*1.2E1;
                double t29272 = c*c0*gamma_aa*t29201*t29203*t29213*t29222*t29205*t29229*t29238*1.6E1;
                double t29269 = -t29271-t29272+t29266+t29267+t29268;
                double t29270 = 1.0/(t29242*t29242);
                double t29273 = t29230*t29226*t29236*2.0;
                double t29274 = a5*c0*t29211*t29222*t29205*t29228*t29196*(8.0/3.0);
                double t29275 = c*c0*gamma_aa*t29201*t29211*t29203*t29213*t29222*t29205*t29229*(3.2E1/3.0);
                double t29325 = gamma_aa*t29200*t29201*t29211*t29203*t29231*8.0;
                double t29326 = c*c0*gamma_aa*t29201*t29203*t29213*t29222*t29205*t29229*t29238*(3.2E1/3.0);
                double t29276 = -t29325-t29326+t29273+t29274+t29275;
                double t29277 = a5*c0*gamma_aa*t29201*t29203*t29222*t29205*t29237*t29196*(1.6E1/3.0);
                double t29278 = c*c0*t29201*t29203*t29213*t29222*t29205*t29229*(8.0/3.0);
                double t29279 = c*c0*t29213*t29222*t29205*t29232*t29233*t29239*t29199*(3.2E1/3.0);
                double t29280 = t29277+t29278+t29279;
                double t29281 = t29230*t29230;
                double t29282 = 1.0/pow(t29227,3.0/2.0);
                double t29283 = 1.0/pow(rho_a,3.2E1/3.0);
                double t29284 = 1.0/t29213;
                double t29285 = 1.0/c0;
                double t29286 = pow(rho_a,1.0/3.0);
                double t29287 = exp(-t29204);
                double t29288 = t29210*t29210;
                double t29289 = t29221*t29221;
                double t29293 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t29294 = c*c;
                double t29295 = 1.0/pow(rho_a,2.0/3.0);
                double t29296 = k1*t29208;
                double t29297 = c*k2*t29197;
                double t29298 = t29296+t29297;
                double t29299 = 1.0/(t29298*t29298);
                double t29317 = t29294*t29295*t29299;
                double t29300 = exp(-t29317);
                double t29301 = t29200*t29201*t29198*t29199;
                double t29302 = pow(t29202,4.0/5.0);
                double t29312 = rab1*t29302;
                double t29303 = exp(-t29312);
                double t29304 = t29303-1.0;
                double t29313 = kab1*t29304;
                double t29305 = kab0-t29313;
                double t29306 = a3*gamma_aa*t29206*t29207*t29196;
                double t29307 = t29306+1.0;
                double t29308 = 1.0/sqrt(t29307);
                double t29309 = a1*gamma_aa*t29228*t29196;
                double t29310 = t29301+t29309+1.0;
                double t29311 = exp(-t29301);
                double t29318 = a1*t29228*t29196;
                double t29319 = gamma_aa*t29200*t29201*t29198*2.0;
                double t29320 = t29318+t29319;
                double t29321 = t29311*t29320*t29305*t29308*1.0E5;
                double t29322 = 1.0/pow(t29307,3.0/2.0);
                double t29323 = a3*t29310*t29311*t29322*t29206*t29305*t29207*t29196*5.0E4;
                double t29324 = gamma_aa*t29200*t29201*t29310*t29311*t29305*t29308*t29198*2.0E5;
                double t29314 = -t29321+t29323+t29324;
                double t29315 = c*c0*t29197*(2.0/3.0);
                double t29328 = t29310*t29311*t29305*t29308*1.0E5;
                double t29316 = t29315-t29328;
                double t29329 = dirac(t29316);
                double t29330 = t29248*t29249;
                double t29331 = t29243*t29265*t29259;
                double t29332 = t29330+t29331;
                double t29333 = 1.0/(c*c);
                v_gamma_aa_gamma_aa[Q] += scale * c0*rho_a*t29300*heaviside(c*c0*t29197*(-2.0/3.0)+t29310*t29305*t29308*exp(-t29200*t29201*t29198*t29199)*1.0E5)*(t29243*t29259*(t29250+t29252+t29253+t29254+t29255+gamma_aa*t29200*t29201*t29203*t29244*4.0+a5*t29206*t29207*t29244*t29284*t29196-gamma_aa*t29200*t29201*t29203*t29226*t29244*4.0-c*c0*t29201*t29203*t29213*t29222*t29205*t29229*t29238*(8.0/3.0)-a5*c0*gamma_aa*t29201*t29203*t29222*t29205*t29237*t29238*t29196*(1.6E1/3.0)+a5*c0*t29211*t29222*t29205*t29244*t29228*t29248*t29249*t29196*(4.0/3.0)+c*c0*t29211*t29213*t29222*t29205*t29250*t29248*t29249*t29197*(2.0/3.0)-c*c0*t29213*t29222*t29205*t29232*t29233*t29238*t29239*t29199*(6.4E1/3.0)+c*c0*t29211*t29213*t29222*t29205*t29256*t29248*t29249*t29197*(2.0/3.0)+c*c0*t29201*t29211*t29203*t29213*t29222*t29205*t29229*t29248*t29249*(8.0/3.0)-c*c0*t29201*t29203*t29213*t29222*t29205*t29229*t29238*t29248*t29249*(8.0/3.0)+a5*c0*gamma_aa*t29201*t29211*t29203*t29222*t29205*t29237*t29248*t29249*t29196*(1.6E1/3.0)-a5*c0*gamma_aa*t29201*t29203*t29222*t29205*t29237*t29238*t29248*t29249*t29196*(1.6E1/3.0)+c*c0*t29211*t29213*t29222*t29205*t29232*t29233*t29239*t29248*t29249*t29199*(3.2E1/3.0)+c*c0*t29213*t29222*t29205*t29232*t29233*t29251*t29239*t29248*t29249*t29199*1.6E1-c*c0*t29213*t29222*t29205*t29232*t29233*t29238*t29239*t29248*t29249*t29199*(6.4E1/3.0)+c*c0*gamma_aa*t29201*t29211*t29203*t29213*t29222*t29205*t29244*t29229*t29248*t29249*(1.6E1/3.0)-c*c0*gamma_aa*t29201*t29203*t29213*t29222*t29205*t29244*t29229*t29238*t29248*t29249*(1.6E1/3.0))+t29243*t29263*t29276*2.0+t29250*t29248*t29249+t29256*t29248*t29249+t29243*t29265*(t29226*t29280*t29236*2.0-t29226*t29281*t29282-t29200*t29201*t29211*t29203*t29231*8.0+t29231*t29232*t29233*t29238*t29283*t29199*3.2E1-gamma_aa*t29200*t29201*t29211*t29203*t29230*t29236*8.0+c*c0*t29201*t29211*t29203*t29213*t29222*t29205*t29229*(3.2E1/3.0)-c*c0*t29201*t29203*t29213*t29222*t29205*t29229*t29238*(3.2E1/3.0)+a5*c0*gamma_aa*t29201*t29211*t29203*t29222*t29205*t29237*t29196*(6.4E1/3.0)-a5*c0*gamma_aa*t29201*t29203*t29222*t29205*t29237*t29238*t29196*(6.4E1/3.0)+c*c0*t29211*t29213*t29222*t29205*t29232*t29233*t29239*t29199*(1.28E2/3.0)+c*c0*t29213*t29222*t29205*t29232*t29233*t29251*t29239*t29199*6.4E1-c*c0*t29213*t29222*t29205*t29232*t29233*t29238*t29239*t29199*(2.56E2/3.0))-t29270*t29263*t29259*t29269*2.0-t29270*t29265*t29276*t29269*2.0-t29270*t29265*t29259*(t29226*t29280*t29236*3.0-t29226*t29281*t29282*(3.0/2.0)-t29200*t29201*t29211*t29203*t29231*1.2E1+t29231*t29232*t29233*t29238*t29283*t29199*4.8E1-gamma_aa*t29200*t29201*t29211*t29203*t29230*t29236*1.2E1+c*c0*t29201*t29211*t29203*t29213*t29222*t29205*t29229*1.6E1-c*c0*t29201*t29203*t29213*t29222*t29205*t29229*t29238*1.6E1+a5*c0*gamma_aa*t29201*t29211*t29203*t29222*t29205*t29237*t29196*3.2E1-a5*c0*gamma_aa*t29201*t29203*t29222*t29205*t29237*t29238*t29196*3.2E1+c*c0*t29211*t29213*t29222*t29205*t29232*t29233*t29239*t29199*6.4E1+c*c0*t29213*t29222*t29205*t29232*t29233*t29251*t29239*t29199*9.6E1-c*c0*t29213*t29222*t29205*t29232*t29233*t29238*t29239*t29199*1.28E2)+1.0/(t29242*t29242*t29242)*t29265*t29259*(t29269*t29269)*2.0+t29250*t29206*t29284*t29285*t29286*t29287*t29288*t29289*(3.0/2.0)+t29206*t29256*t29284*t29285*t29286*t29287*t29288*t29289*(3.0/2.0)-a5*1.0/(rho_a*rho_a)*1.0/(t29213*t29213)*t29333*t29244*t29285*t29196*t29287*t29288*t29289*(3.0/2.0)+gamma_aa*t29201*t29210*t29203*t29206*t29244*t29284*t29293*t29285*t29287*t29289*6.0-gamma_aa*t29201*t29203*t29206*t29244*t29284*t29293*t29285*t29287*t29288*t29289*6.0)*(1.0/2.0)-c0*rho_a*t29300*t29314*t29329*(t29243*t29263*t29259+t29243*t29265*t29276+t29244*t29248*t29249-t29270*t29265*t29259*t29269+t29206*t29244*t29284*t29285*t29286*t29287*t29288*t29289*(3.0/2.0))+c0*rho_a*t29300*t29332*t29329*(t29200*t29201*t29311*t29305*t29308*t29198*2.0E5-t29200*t29201*t29310*t29311*t29305*t29308*t29198*2.0E5+(a3*a3)*1.0/pow(rho_a,1.4E1/3.0)*t29201*t29310*t29311*t29305*t29333*1.0/pow(t29307,5.0/2.0)*7.5E4+t29310*t29311*t29233*t29305*t29308*t29283*(t29198*t29198)*t29199*4.0E5-a3*t29311*t29320*t29322*t29206*t29305*t29207*t29196*1.0E5-gamma_aa*t29200*t29201*t29311*t29320*t29305*t29308*t29198*4.0E5+a3*gamma_aa*1.0/pow(rho_a,2.3E1/3.0)*t29201*t29310*t29311*t29322*t29206*t29305*t29196*t29198*2.0E5)*(1.0/2.0)-c0*rho_a*t29300*(t29314*t29314)*t29332*dirac(t29316,1.0)*(1.0/2.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t28982 = tspi_m13*tspi_m13;
                double t28983 = 1.0/pow(rho_a,1.0/3.0);
                double t28984 = a2*a2;
                double t28985 = gamma_aa*gamma_aa;
                double t28986 = 1.0/pow(rho_a,1.6E1/3.0);
                double t28987 = t28982*t28982;
                double t28988 = c*t28983;
                double t28989 = a4*a4;
                double t28990 = 1.0/c;
                double t28991 = 1.0/pow(rho_a,7.0/3.0);
                double t28992 = sqrt(t28988);
                double t28993 = t28985*t28986*t28987*t28989*2.0;
                double t28994 = exp(t28993);
                double t28995 = t28985*t28986*t28987*t28989;
                double t28996 = t28995+1.0;
                double t28997 = 1.0/(t28996*t28996);
                double t28998 = a5*gamma_aa*t28990*t28982*t28991;
                double t28999 = t28998+1.0;
                double t29011 = raa2*t28992;
                double t29000 = exp(-t29011);
                double t29001 = t29000-1.0;
                double t29002 = kaa2*t29001;
                double t29003 = pow(t28988,2.0/5.0);
                double t29012 = raa1*t29003;
                double t29004 = exp(-t29012);
                double t29005 = t29004-1.0;
                double t29006 = kaa1*t29005;
                double t29007 = -kaa0+t29002+t29006;
                double t29008 = 1.0/(t29007*t29007);
                double t29009 = c*c0*t28983*t28994*t28997*t28999*t29008*(2.0/3.0);
                double t29010 = 1.0/pow(rho_a,8.0/3.0);
                double t29013 = 1.0/pow(rho_a,1.7E1/3.0);
                double t29014 = exp(t29009);
                double t29015 = Ei(-t29009);
                double t29016 = 1.0/t28996;
                double t29017 = c*c0*t28983*t28994*t28999*t29008*(2.0/3.0);
                double t29018 = sqrt(t29017);
                double t29019 = 1.0/(t28996*t28996*t28996);
                double t29020 = t29016*t29018*6.0;
                double t29021 = c*c0*t28983*t28994*t28997*t28999*t29008*4.0;
                double t29022 = t29020+t29021+3.0;
                double t29023 = 1.0/t29022;
                double t29024 = a5*c0*t28982*t28994*t28997*t29010*t29008*(2.0/3.0);
                double t29025 = c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29008*(8.0/3.0);
                double t29036 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29008*t29019*(8.0/3.0);
                double t29026 = t29024+t29025-t29036;
                double t29027 = c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29008*(2.0/3.0);
                double t29028 = t29027+1.0;
                double t29029 = t29016*t29018*4.0;
                double t29030 = c*c0*t28983*t28994*t28997*t28999*t29008*(8.0/3.0);
                double t29031 = t29030+t29029+6.0;
                double t29032 = a5*c0*t28982*t28994*t29010*t29008*(2.0/3.0);
                double t29033 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29008*(8.0/3.0);
                double t29034 = t29032+t29033;
                double t29035 = 1.0/sqrt(t29017);
                double t29037 = t28984*t28985*t28986*t28987;
                double t29038 = pow(t28988,4.0/5.0);
                double t29146 = rab1*t29038;
                double t29039 = exp(-t29146);
                double t29040 = t29039-1.0;
                double t29147 = kab1*t29040;
                double t29041 = kab0-t29147;
                double t29042 = a3*gamma_aa*t28990*t28982*t28991;
                double t29043 = t29042+1.0;
                double t29044 = 1.0/sqrt(t29043);
                double t29045 = a1*gamma_aa*t28982*t29010;
                double t29046 = t29045+t29037+1.0;
                double t29047 = c*c;
                double t29048 = 1.0/pow(rho_a,2.0/3.0);
                double t29049 = k1*t28992;
                double t29050 = c*k2*t28983;
                double t29051 = t29050+t29049;
                double t29052 = 1.0/(t29051*t29051);
                double t29149 = t29052*t29047*t29048;
                double t29053 = exp(-t29149);
                double t29054 = 1.0/pow(rho_a,4.0/3.0);
                double t29055 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t29056 = 1.0/pow(rho_a,2.0E1/3.0);
                double t29057 = t28989*t28989;
                double t29058 = 1.0/pow(rho_a,1.2E1);
                double t29059 = t28987*t28987;
                double t29060 = 1.0/sqrt(t28988);
                double t29061 = c*kaa2*raa2*t29000*t29060*t29054*(1.0/6.0);
                double t29062 = 1.0/pow(t28988,3.0/5.0);
                double t29063 = c*kaa1*raa1*t29004*t29062*t29054*(2.0/1.5E1);
                double t29064 = t29061+t29063;
                double t29065 = 1.0/(t29007*t29007*t29007);
                double t29066 = t29016*t29034*t29035*2.0;
                double t29067 = a5*c0*t28982*t28994*t28997*t29010*t29008*(8.0/3.0);
                double t29068 = c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29008*(3.2E1/3.0);
                double t29110 = gamma_aa*t28986*t28987*t28997*t28989*t29018*8.0;
                double t29111 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29008*t29019*(3.2E1/3.0);
                double t29069 = -t29110-t29111+t29066+t29067+t29068;
                double t29070 = 1.0/pow(rho_a,1.1E1/3.0);
                double t29071 = c*c0*t28994*t28997*t28999*t29008*t29054*(2.0/9.0);
                double t29072 = a5*c0*gamma_aa*t28982*t28994*t28997*t29070*t29008*(1.4E1/9.0);
                double t29073 = c*c0*t28983*t28994*t28997*t28999*t29064*t29065*(4.0/3.0);
                double t29074 = c*c0*t28985*t28994*t28987*t28997*t28989*t28999*t29008*t29056*(6.4E1/9.0);
                double t29075 = a5*c0*t28982*t28994*t28997*t29010*t29014*t29015*t29008*(2.0/3.0);
                double t29076 = c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29008*t29026*(2.0/3.0);
                double t29077 = c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29014*t29015*t29008*(8.0/3.0);
                double t29090 = c*c0*t28985*t28994*t28987*t28989*t28999*t29008*t29019*t29056*(6.4E1/9.0);
                double t29078 = t29071+t29072-t29090+t29073+t29074;
                double t29079 = 1.0/pow(rho_a,1.9E1/3.0);
                double t29080 = 1.0/t28999;
                double t29081 = a5*c0*t28982*t28994*t28997*t29070*t29008*(1.6E1/9.0);
                double t29082 = a5*c0*t28982*t28994*t28997*t29010*t29064*t29065*(4.0/3.0);
                double t29083 = a5*c0*t28982*t28985*t28994*t28987*t28997*t28989*t29008*t29055*(4.0E1/3.0);
                double t29084 = c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29008*t29056*(1.36E2/9.0);
                double t29085 = c*c0*gamma_aa*t28985*t28994*t28997*t28999*t29008*t29057*t29058*t29059*(2.56E2/9.0);
                double t29086 = 1.0/(t28996*t28996*t28996*t28996);
                double t29087 = c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29057*t29058*t29059*t29086*(1.28E2/3.0);
                double t29088 = c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29064*t29065*(1.6E1/3.0);
                double t29091 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29008*t29019*t29056*(1.36E2/9.0);
                double t29092 = c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29019*t29057*t29058*t29059*(5.12E2/9.0);
                double t29093 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29019*t29064*t29065*(1.6E1/3.0);
                double t29142 = a5*c0*t28982*t28985*t28994*t28987*t28989*t29008*t29019*t29055*(4.0E1/3.0);
                double t29089 = -t29142+t29081+t29082-t29091+t29083-t29092+t29084-t29093+t29085+t29087+t29088;
                double t29094 = c*c0*t28994*t28999*t29008*t29054*(2.0/9.0);
                double t29095 = a5*c0*gamma_aa*t28982*t28994*t29070*t29008*(1.4E1/9.0);
                double t29096 = c*c0*t28983*t28994*t28999*t29064*t29065*(4.0/3.0);
                double t29097 = c*c0*t28985*t28994*t28987*t28989*t28999*t29008*t29056*(6.4E1/9.0);
                double t29098 = t29094+t29095+t29096+t29097;
                double t29099 = 1.0/(t29022*t29022);
                double t29165 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29014*t29015*t29008*t29019*(8.0/3.0);
                double t29100 = t29024+t29025-t29036+t29075-t29165+t29076+t29077;
                double t29101 = a5*c0*t28982*t28994*t29070*t29008*(1.6E1/9.0);
                double t29102 = a5*c0*t28982*t28994*t29010*t29064*t29065*(4.0/3.0);
                double t29103 = a5*c0*t28982*t28985*t28994*t28987*t28989*t29008*t29055*(4.0E1/3.0);
                double t29104 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29008*t29056*(1.36E2/9.0);
                double t29105 = c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29057*t29058*t29059*(2.56E2/9.0);
                double t29106 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29064*t29065*(1.6E1/3.0);
                double t29107 = t29101+t29102+t29103+t29104+t29105+t29106;
                double t29108 = 1.0/pow(t29017,3.0/2.0);
                double t29109 = 1.0/pow(rho_a,3.5E1/3.0);
                double t29112 = t29016*t29035*t29098*3.0;
                double t29113 = c*c0*t28994*t28997*t28999*t29008*t29054*(4.0/3.0);
                double t29114 = a5*c0*gamma_aa*t28982*t28994*t28997*t29070*t29008*(2.8E1/3.0);
                double t29115 = c*c0*t28983*t28994*t28997*t28999*t29064*t29065*8.0;
                double t29116 = c*c0*t28985*t28994*t28987*t28997*t28989*t28999*t29008*t29056*(1.28E2/3.0);
                double t29135 = t28985*t28987*t28997*t28989*t29018*t29079*3.2E1;
                double t29136 = c*c0*t28985*t28994*t28987*t28989*t28999*t29008*t29019*t29056*(1.28E2/3.0);
                double t29117 = t29112+t29113+t29114+t29115+t29116-t29135-t29136;
                double t29118 = t29016*t29034*t29035*3.0;
                double t29119 = a5*c0*t28982*t28994*t28997*t29010*t29008*4.0;
                double t29120 = c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29008*1.6E1;
                double t29128 = gamma_aa*t28986*t28987*t28997*t28989*t29018*1.2E1;
                double t29129 = c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29008*t29019*1.6E1;
                double t29121 = t29120+t29118+t29119-t29128-t29129;
                double t29122 = t29016*t29035*t29098*2.0;
                double t29123 = c*c0*t28994*t28997*t28999*t29008*t29054*(8.0/9.0);
                double t29124 = a5*c0*gamma_aa*t28982*t28994*t28997*t29070*t29008*(5.6E1/9.0);
                double t29125 = c*c0*t28983*t28994*t28997*t28999*t29064*t29065*(1.6E1/3.0);
                double t29126 = c*c0*t28985*t28994*t28987*t28997*t28989*t28999*t29008*t29056*(2.56E2/9.0);
                double t29160 = t28985*t28987*t28997*t28989*t29018*t29079*(6.4E1/3.0);
                double t29161 = c*c0*t28985*t28994*t28987*t28989*t28999*t29008*t29019*t29056*(2.56E2/9.0);
                double t29127 = t29122+t29123+t29124-t29160+t29125-t29161+t29126;
                double t29130 = c*c0*t28994*t28997*t28999*t29014*t29015*t29008*t29054*(2.0/9.0);
                double t29131 = c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29064*t29065*(4.0/3.0);
                double t29132 = c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29008*t29078*(2.0/3.0);
                double t29133 = a5*c0*gamma_aa*t28982*t28994*t28997*t29014*t29015*t29070*t29008*(1.4E1/9.0);
                double t29134 = c*c0*t28985*t28994*t28987*t28997*t28989*t28999*t29014*t29015*t29008*t29056*(6.4E1/9.0);
                double t29137 = 1.0/c0;
                double t29138 = pow(rho_a,1.0/3.0);
                double t29139 = exp(-t28993);
                double t29140 = t28996*t28996;
                double t29141 = t29007*t29007;
                double t29143 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t29162 = c*c0*t28985*t28994*t28987*t28989*t28999*t29014*t29015*t29008*t29019*t29056*(6.4E1/9.0);
                double t29144 = t29130+t29131+t29132+t29133+t29071+t29134+t29072-t29090-t29162+t29073+t29074;
                double t29145 = exp(-t29037);
                double t29148 = t29041*t29044*t29046*t29145*1.0E5;
                double t29150 = c*c0*t28983*(2.0/3.0);
                double t29151 = t29150-t29148;
                double t29152 = dirac(t29151);
                double t29153 = a1*t28982*t29010;
                double t29154 = gamma_aa*t28984*t28986*t28987*2.0;
                double t29155 = t29153+t29154;
                double t29156 = 1.0/pow(t29043,3.0/2.0);
                double t29157 = a3*t28990*t28982*t28991*t29041*t29046*t29145*t29156*5.0E4;
                double t29158 = gamma_aa*t28984*t28986*t28987*t29041*t29044*t29046*t29145*2.0E5;
                double t29185 = t29041*t29044*t29145*t29155*1.0E5;
                double t29159 = t29157+t29158-t29185;
                double t29163 = t29014*t29015*t29026;
                double t29164 = t29023*t29028*t29069;
                double t29166 = t28990*t29140*t29141*t29026*t29080*t29137*t29138*t29139*(3.0/2.0);
                double t29167 = t29014*t29015;
                double t29168 = t29031*t29023*t29028;
                double t29169 = t29167+t29168;
                double t29170 = 1.0/pow(rho_a,1.0E1/3.0);
                double t29171 = t28984*t28985*t28987*t29079*(1.6E1/3.0);
                double t29172 = a1*gamma_aa*t28982*t29070*(8.0/3.0);
                double t29173 = t29171+t29172;
                double t29174 = 1.0/(c*c);
                double t29175 = 1.0/pow(t28988,1.0/5.0);
                double t29176 = t29100*t29031*t29023;
                double t29177 = t29163+t29164+t29166+t29176-t29031*t29121*t29028*t29099;
                double t29178 = 1.0/pow(rho_a,5.0/3.0);
                double t29179 = t29052*t29047*t29178*(2.0/3.0);
                double t29180 = 1.0/(t29051*t29051*t29051);
                double t29181 = c*k2*t29054*(1.0/3.0);
                double t29182 = c*k1*t29060*t29054*(1.0/6.0);
                double t29183 = t29181+t29182;
                double t29184 = t29179-t29180*t29047*t29048*t29183*2.0;
                double t29186 = c*c0*t29054*(2.0/9.0);
                double t29187 = t28984*t28985*t28987*t29041*t29044*t29046*t29145*t29079*(1.6E6/3.0);
                double t29188 = a3*gamma_aa*t28990*t28982*t29041*t29170*t29046*t29145*t29156*(3.5E5/3.0);
                double t29189 = t29186+t29187+t29188-t29041*t29044*t29145*t29173*1.0E5-c*kab1*rab1*t29044*t29054*t29046*t29145*t29039*t29175*(8.0E4/3.0);
                v_rho_a_gamma_aa[Q] += scale * c0*t29053*heaviside(c*c0*t28983*(-2.0/3.0)+t29041*t29044*t29046*exp(-t28984*t28985*t28986*t28987)*1.0E5)*(t29163+t29164+t29166+t29031*t29023*(t29024+t29025+t29075+t29076+t29077-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29008*t29019*(8.0/3.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29014*t29015*t29008*t29019*(8.0/3.0))-t29031*t29121*t29028*t29099)*(1.0/2.0)-c0*t29053*t29152*t29159*t29169*(1.0/2.0)-c0*rho_a*t29053*heaviside(t29148-c*c0*t28983*(2.0/3.0))*(t29023*t29028*(t29016*t29035*t29107*2.0-t29016*t29034*t29108*t29098-gamma_aa*t28987*t28997*t28989*t29018*t29079*(1.28E2/3.0)+a5*c0*t28982*t28994*t28997*t29070*t29008*(6.4E1/9.0)-gamma_aa*t28986*t28987*t28997*t28989*t29035*t29098*4.0+gamma_aa*t28985*t29018*t29019*t29109*t29057*t29059*(2.56E2/3.0)-t28985*t28987*t28997*t28989*t29034*t29035*t29079*(3.2E1/3.0)+a5*c0*t28982*t28994*t28997*t29010*t29064*t29065*(1.6E1/3.0)+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29008*t29056*(5.44E2/9.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29008*t29019*t29056*(5.44E2/9.0)+a5*c0*t28982*t28985*t28994*t28987*t28997*t28989*t29008*t29055*(1.6E2/3.0)-a5*c0*t28982*t28985*t28994*t28987*t28989*t29008*t29019*t29055*(1.6E2/3.0)+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29064*t29065*(6.4E1/3.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29019*t29064*t29065*(6.4E1/3.0)+c*c0*gamma_aa*t28985*t28994*t28997*t28999*t29008*t29057*t29058*t29059*(1.024E3/9.0)-c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29019*t29057*t29058*t29059*(2.048E3/9.0)+c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29057*t29058*t29059*t29086*(5.12E2/3.0))+t29100*t29023*t29127+t29014*t29015*t29089+t29023*t29144*t29069+t29031*t29023*(-t29142+t29081+t29082-t29091+t29083-t29092+t29084-t29093+t29085+t29087+t29088+t29026*t29078+(t29026*(1.0/3.0))/rho_a+(t29026*t29064*2.0)/t29007+t28985*t28987*t28989*t29026*t29079*(3.2E1/3.0)-t28985*t28987*t28989*t29016*t29026*t29079*(3.2E1/3.0)+a5*gamma_aa*t28990*t28982*t29026*t29080*t29170*(7.0/3.0)+a5*c0*t28982*t28994*t28997*t29014*t29015*t29070*t29008*(1.6E1/9.0)+a5*c0*t28982*t28994*t28997*t29010*t29014*t29015*t29064*t29065*(4.0/3.0)+a5*c0*t28982*t28994*t28997*t29010*t29014*t29015*t29008*t29078*(2.0/3.0)+c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29008*t29089*(2.0/3.0)+c*c0*t28994*t28997*t28999*t29014*t29015*t29008*t29026*t29054*(2.0/9.0)+a5*c0*gamma_aa*t28982*t28994*t28997*t29014*t29015*t29070*t29008*t29026*(1.4E1/9.0)+c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29026*t29064*t29065*(4.0/3.0)+c*c0*t28983*t28994*t28997*t28999*t29014*t29015*t29008*t29026*t29078*(2.0/3.0)+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29014*t29015*t29008*t29056*(1.36E2/9.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29014*t29015*t29008*t29019*t29056*(1.36E2/9.0)+a5*c0*t28982*t28985*t28994*t28987*t28997*t28989*t29014*t29015*t29008*t29055*(4.0E1/3.0)-a5*c0*t28982*t28985*t28994*t28987*t28989*t29014*t29015*t29008*t29019*t29055*(4.0E1/3.0)+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29014*t29015*t29064*t29065*(1.6E1/3.0)+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29014*t29015*t29008*t29078*(8.0/3.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29014*t29015*t29019*t29064*t29065*(1.6E1/3.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29014*t29015*t29008*t29019*t29078*(8.0/3.0)+c*c0*gamma_aa*t28985*t28994*t28997*t28999*t29014*t29015*t29008*t29057*t29058*t29059*(2.56E2/9.0)-c*c0*gamma_aa*t28985*t28994*t28999*t29014*t29015*t29008*t29019*t29057*t29058*t29059*(5.12E2/9.0)+c*c0*gamma_aa*t28985*t28994*t28999*t29014*t29015*t29008*t29057*t29058*t29059*t29086*(1.28E2/3.0)+c*c0*t28985*t28994*t28987*t28997*t28989*t28999*t29014*t29015*t29008*t29026*t29056*(6.4E1/9.0)-c*c0*t28985*t28994*t28987*t28989*t28999*t29014*t29015*t29008*t29026*t29019*t29056*(6.4E1/9.0))-t29100*t29031*t29117*t29099+t29014*t29015*t29026*t29078-t29031*t29121*t29144*t29099-t29121*t29028*t29127*t29099-t29117*t29028*t29069*t29099-t29031*t29028*t29099*(t29016*t29035*t29107*3.0-t29016*t29034*t29108*t29098*(3.0/2.0)-gamma_aa*t28987*t28997*t28989*t29018*t29079*6.4E1+a5*c0*t28982*t28994*t28997*t29070*t29008*(3.2E1/3.0)-gamma_aa*t28986*t28987*t28997*t28989*t29035*t29098*6.0+gamma_aa*t28985*t29018*t29019*t29109*t29057*t29059*1.28E2-t28985*t28987*t28997*t28989*t29034*t29035*t29079*1.6E1+a5*c0*t28982*t28994*t28997*t29010*t29064*t29065*8.0+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29008*t29056*(2.72E2/3.0)-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29008*t29019*t29056*(2.72E2/3.0)+a5*c0*t28982*t28985*t28994*t28987*t28997*t28989*t29008*t29055*8.0E1-a5*c0*t28982*t28985*t28994*t28987*t28989*t29008*t29019*t29055*8.0E1+c*c0*gamma_aa*t28994*t28987*t28997*t28989*t28999*t29013*t29064*t29065*3.2E1-c*c0*gamma_aa*t28994*t28987*t28989*t28999*t29013*t29019*t29064*t29065*3.2E1+c*c0*gamma_aa*t28985*t28994*t28997*t28999*t29008*t29057*t29058*t29059*(5.12E2/3.0)-c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29019*t29057*t29058*t29059*(1.024E3/3.0)+c*c0*gamma_aa*t28985*t28994*t28999*t29008*t29057*t29058*t29059*t29086*2.56E2)+1.0/(t29022*t29022*t29022)*t29031*t29121*t29117*t29028*2.0+t28990*t29140*t29141*t29080*t29137*t29138*t29139*t29089*(3.0/2.0)+t28990*t29140*t29141*t29026*t29080*t29137*t29138*t29139*t29078*(3.0/2.0)-a5*1.0/(rho_a*rho_a)*t28982*1.0/(t28999*t28999)*t29140*t29141*t29137*t29174*t29139*t29078*(3.0/2.0)+gamma_aa*t28990*t28987*t28996*t28989*t29141*t29080*t29143*t29137*t29139*t29078*6.0-gamma_aa*t28990*t28987*t28989*t29140*t29141*t29080*t29143*t29137*t29139*t29078*6.0)*(1.0/2.0)+c0*rho_a*t29053*t29152*t29177*t29189*(1.0/2.0)+c0*rho_a*t29053*t29152*t29169*(t29041*t29044*t29145*(a1*t28982*t29070*(8.0/3.0)+gamma_aa*t28984*t28987*t29079*(3.2E1/3.0))*-1.0E5+t28984*t28985*t28987*t29041*t29044*t29145*t29155*t29079*(1.6E6/3.0)+a3*t28990*t28982*t28991*t29041*t29145*t29173*t29156*5.0E4+a3*t28990*t28982*t29041*t29170*t29046*t29145*t29156*(3.5E5/3.0)+gamma_aa*t28984*t28986*t28987*t29041*t29044*t29145*t29173*2.0E5+gamma_aa*t28984*t28987*t29041*t29044*t29046*t29145*t29079*(3.2E6/3.0)-(a3*a3)*gamma_aa*t28987*t29013*t29041*1.0/pow(t29043,5.0/2.0)*t29046*t29145*t29174*1.75E5+a3*gamma_aa*t28990*t28982*t29041*t29170*t29145*t29155*t29156*(3.5E5/3.0)-c*kab1*rab1*t29044*t29054*t29145*t29155*t29039*t29175*(8.0E4/3.0)-gamma_aa*(t28984*t28984)*t28985*t29041*t29044*t29046*t29109*t29145*t29059*(3.2E6/3.0)+a3*kab1*rab1*t28982*t29070*t29046*t29145*t29039*t29156*t29175*(4.0E4/3.0)-a3*1.0/pow(rho_a,2.6E1/3.0)*t28990*t28982*t28984*t28985*t28987*t29041*t29046*t29145*t29156*5.0E5+c*gamma_aa*kab1*rab1*t28984*t28987*t29044*t29046*t29145*t29056*t29039*t29175*(1.6E5/3.0))*(1.0/2.0)+c0*rho_a*t29053*t29152*t29159*(t29031*t29023*t29144+t29023*t29028*t29127+t29014*t29015*t29078-t29031*t29117*t29028*t29099+t28990*t29140*t29141*t29080*t29137*t29138*t29139*t29078*(3.0/2.0))*(1.0/2.0)+c0*rho_a*t29053*t29184*t29177*heaviside(-t29150+t29148)*(1.0/2.0)-c0*rho_a*t29053*t29152*t29184*t29159*t29169*(1.0/2.0)+c0*rho_a*t29053*t29159*t29169*t29189*dirac(t29151,1.0)*(1.0/2.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t25165 = tspi_m13*tspi_m13;
                double t25166 = 1.0/pow(rho_a,1.0/3.0);
                double t25167 = a2*a2;
                double t25168 = gamma_aa*gamma_aa;
                double t25169 = 1.0/pow(rho_a,1.6E1/3.0);
                double t25170 = t25165*t25165;
                double t25171 = c*t25166;
                double t25172 = pow(t25171,4.0/5.0);
                double t25186 = rab1*t25172;
                double t25173 = exp(-t25186);
                double t25174 = t25173-1.0;
                double t25187 = kab1*t25174;
                double t25175 = kab0-t25187;
                double t25176 = 1.0/c;
                double t25177 = 1.0/pow(rho_a,7.0/3.0);
                double t25178 = a3*gamma_aa*t25165*t25176*t25177;
                double t25179 = t25178+1.0;
                double t25180 = t25170*t25167*t25168*t25169;
                double t25181 = 1.0/pow(rho_a,8.0/3.0);
                double t25182 = a1*gamma_aa*t25181*t25165;
                double t25183 = t25180+t25182+1.0;
                double t25184 = t25170*t25167*t25168*t25169*2.0;
                double t25185 = exp(t25184);
                double t25188 = 1.0/(t25175*t25175);
                double t25189 = 1.0/(t25183*t25183);
                double t25190 = c*c0*t25166*t25185*t25179*t25188*t25189*(2.0/3.0);
                double t25191 = exp(t25190);
                double t25192 = Ei(-t25190);
                double t25193 = sqrt(t25190);
                double t25194 = 1.0/pow(rho_b,1.0/3.0);
                double t25195 = gamma_bb*gamma_bb;
                double t25196 = 1.0/pow(rho_b,1.6E1/3.0);
                double t25197 = c*t25194;
                double t25198 = a4*a4;
                double t25199 = 1.0/pow(rho_b,7.0/3.0);
                double t25200 = sqrt(t25197);
                double t25201 = t25170*t25195*t25196*t25198*2.0;
                double t25202 = exp(t25201);
                double t25203 = t25170*t25195*t25196*t25198;
                double t25204 = t25203+1.0;
                double t25205 = 1.0/(t25204*t25204);
                double t25206 = a5*gamma_bb*t25165*t25176*t25199;
                double t25207 = t25206+1.0;
                double t25218 = raa2*t25200;
                double t25208 = exp(-t25218);
                double t25209 = t25208-1.0;
                double t25210 = kaa2*t25209;
                double t25211 = pow(t25197,2.0/5.0);
                double t25219 = raa1*t25211;
                double t25212 = exp(-t25219);
                double t25213 = t25212-1.0;
                double t25214 = kaa1*t25213;
                double t25215 = -kaa0+t25210+t25214;
                double t25216 = 1.0/(t25215*t25215);
                double t25217 = c*c0*t25202*t25205*t25207*t25216*t25194*(2.0/3.0);
                double t25220 = exp(t25217);
                double t25221 = Ei(-t25217);
                double t25222 = 1.0/t25204;
                double t25223 = c*c0*t25202*t25207*t25216*t25194*(2.0/3.0);
                double t25224 = sqrt(t25223);
                double t25225 = t25170*t25167*t25195*t25196;
                double t25226 = pow(t25197,4.0/5.0);
                double t25236 = rab1*t25226;
                double t25227 = exp(-t25236);
                double t25228 = t25227-1.0;
                double t25237 = kab1*t25228;
                double t25229 = kab0-t25237;
                double t25230 = a3*gamma_bb*t25165*t25176*t25199;
                double t25231 = t25230+1.0;
                double t25232 = 1.0/sqrt(t25231);
                double t25233 = 1.0/pow(rho_b,8.0/3.0);
                double t25234 = a1*gamma_bb*t25233*t25165;
                double t25235 = t25225+t25234+1.0;
                double t25238 = t25170*t25167*t25195*t25196*2.0;
                double t25239 = exp(t25238);
                double t25240 = 1.0/(t25229*t25229);
                double t25241 = 1.0/(t25235*t25235);
                double t25242 = c*c0*t25231*t25240*t25241*t25194*t25239*(2.0/3.0);
                double t25243 = exp(t25242);
                double t25244 = Ei(-t25242);
                double t25245 = sqrt(t25242);
                double t25246 = 1.0/sqrt(t25179);
                double t25247 = c*c;
                double t25248 = sqrt(t25171);
                double t25249 = t25170*t25168*t25169*t25198*2.0;
                double t25250 = exp(t25249);
                double t25251 = t25170*t25168*t25169*t25198;
                double t25252 = t25251+1.0;
                double t25253 = 1.0/(t25252*t25252);
                double t25254 = a5*gamma_aa*t25165*t25176*t25177;
                double t25255 = t25254+1.0;
                double t25266 = raa2*t25248;
                double t25256 = exp(-t25266);
                double t25257 = t25256-1.0;
                double t25258 = kaa2*t25257;
                double t25259 = pow(t25171,2.0/5.0);
                double t25267 = raa1*t25259;
                double t25260 = exp(-t25267);
                double t25261 = t25260-1.0;
                double t25262 = kaa1*t25261;
                double t25263 = -kaa0+t25262+t25258;
                double t25264 = 1.0/(t25263*t25263);
                double t25265 = c*c0*t25250*t25253*t25255*t25264*t25166*(2.0/3.0);
                double t25268 = exp(t25265);
                double t25269 = Ei(-t25265);
                double t25270 = 1.0/t25252;
                double t25271 = c*c0*t25250*t25255*t25264*t25166*(2.0/3.0);
                double t25272 = sqrt(t25271);
                v[Q] += scale * rho_b*(c0*heaviside(c*c0*t25166*(-2.0/3.0)+t25183*t25246*t25175*exp(-t25170*t25167*t25168*t25169)*1.0E5)*(t25191*t25192+((c*c0*t25191*t25192*t25166*t25185*t25179*t25188*t25189*(2.0/3.0)+1.0)*(t25193*4.0+c*c0*t25166*t25185*t25179*t25188*t25189*(8.0/3.0)+6.0))/(t25193*6.0+c*c0*t25166*t25185*t25179*t25188*t25189*4.0+3.0))*(1.0/2.0)+c0*exp(-1.0/pow(rho_b,2.0/3.0)*t25247*1.0/pow(k1*t25200+c*k2*t25194,2.0))*heaviside(c*c0*t25194*(-2.0/3.0)+t25232*t25235*t25229*exp(-t25170*t25167*t25195*t25196)*1.0E5)*(t25220*t25221+((c*c0*t25202*t25220*t25221*t25205*t25207*t25216*t25194*(2.0/3.0)+1.0)*(t25222*t25224*4.0+c*c0*t25202*t25205*t25207*t25216*t25194*(8.0/3.0)+6.0))/(t25222*t25224*6.0+c*c0*t25202*t25205*t25207*t25216*t25194*4.0+3.0))*(1.0/2.0))+rho_a*(c0*heaviside(c*c0*t25194*(-2.0/3.0)+t25232*t25235*t25229*exp(-t25225)*1.0E5)*(t25243*t25244+((c*c0*t25231*t25240*t25241*t25243*t25244*t25194*t25239*(2.0/3.0)+1.0)*(t25245*4.0+c*c0*t25231*t25240*t25241*t25194*t25239*(8.0/3.0)+6.0))/(t25245*6.0+c*c0*t25231*t25240*t25241*t25194*t25239*4.0+3.0))*(1.0/2.0)+c0*heaviside(c*c0*t25166*(-2.0/3.0)+t25183*t25246*t25175*exp(-t25180)*1.0E5)*exp(-1.0/pow(rho_a,2.0/3.0)*t25247*1.0/pow(k1*t25248+c*k2*t25166,2.0))*(t25268*t25269+((c*c0*t25250*t25253*t25255*t25264*t25166*t25268*t25269*(2.0/3.0)+1.0)*(t25270*t25272*4.0+c*c0*t25250*t25253*t25255*t25264*t25166*(8.0/3.0)+6.0))/(t25270*t25272*6.0+c*c0*t25250*t25253*t25255*t25264*t25166*4.0+3.0))*(1.0/2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t25274 = tspi_m13*tspi_m13;
                double t25275 = 1.0/pow(rho_a,1.0/3.0);
                double t25276 = a2*a2;
                double t25277 = gamma_aa*gamma_aa;
                double t25278 = 1.0/pow(rho_a,1.6E1/3.0);
                double t25279 = t25274*t25274;
                double t25280 = c*t25275;
                double t25281 = a4*a4;
                double t25282 = t25281*t25277*t25278*t25279*2.0;
                double t25283 = exp(t25282);
                double t25284 = 1.0/c;
                double t25285 = 1.0/pow(rho_a,7.0/3.0);
                double t25286 = sqrt(t25280);
                double t25287 = t25281*t25277*t25278*t25279;
                double t25288 = t25287+1.0;
                double t25289 = 1.0/(t25288*t25288);
                double t25290 = a5*gamma_aa*t25274*t25284*t25285;
                double t25291 = t25290+1.0;
                double t25302 = raa2*t25286;
                double t25292 = exp(-t25302);
                double t25293 = t25292-1.0;
                double t25294 = kaa2*t25293;
                double t25295 = pow(t25280,2.0/5.0);
                double t25303 = raa1*t25295;
                double t25296 = exp(-t25303);
                double t25297 = t25296-1.0;
                double t25298 = kaa1*t25297;
                double t25299 = -kaa0+t25294+t25298;
                double t25300 = 1.0/(t25299*t25299);
                double t25301 = c*c0*t25300*t25291*t25283*t25275*t25289*(2.0/3.0);
                double t25304 = 1.0/t25288;
                double t25305 = 1.0/pow(rho_a,4.0/3.0);
                double t25306 = c*c0*t25300*t25291*t25283*t25275*(2.0/3.0);
                double t25307 = sqrt(t25306);
                double t25308 = 1.0/pow(rho_a,1.1E1/3.0);
                double t25309 = 1.0/sqrt(t25280);
                double t25310 = c*kaa2*raa2*t25305*t25309*t25292*(1.0/6.0);
                double t25311 = 1.0/pow(t25280,3.0/5.0);
                double t25312 = c*kaa1*raa1*t25311*t25305*t25296*(2.0/1.5E1);
                double t25313 = t25310+t25312;
                double t25314 = 1.0/(t25299*t25299*t25299);
                double t25315 = 1.0/pow(rho_a,2.0E1/3.0);
                double t25316 = exp(t25301);
                double t25317 = Ei(-t25301);
                double t25318 = 1.0/(t25288*t25288*t25288);
                double t25319 = t25304*t25307*6.0;
                double t25320 = c*c0*t25300*t25291*t25283*t25275*t25289*4.0;
                double t25321 = t25320+t25319+3.0;
                double t25322 = 1.0/t25321;
                double t25323 = c*c0*t25300*t25305*t25291*t25283*t25289*(2.0/9.0);
                double t25324 = a5*c0*gamma_aa*t25300*t25308*t25274*t25283*t25289*(1.4E1/9.0);
                double t25325 = c*c0*t25313*t25314*t25291*t25283*t25275*t25289*(4.0/3.0);
                double t25326 = c*c0*t25300*t25315*t25281*t25291*t25283*t25277*t25279*t25289*(6.4E1/9.0);
                double t25328 = c*c0*t25300*t25315*t25281*t25291*t25318*t25283*t25277*t25279*(6.4E1/9.0);
                double t25327 = t25323+t25324+t25325+t25326-t25328;
                double t25329 = c*c0*t25300*t25316*t25317*t25291*t25283*t25275*t25289*(2.0/3.0);
                double t25330 = t25329+1.0;
                double t25331 = t25304*t25307*4.0;
                double t25332 = c*c0*t25300*t25291*t25283*t25275*t25289*(8.0/3.0);
                double t25333 = t25331+t25332+6.0;
                double t25334 = c*c0*t25300*t25305*t25291*t25283*(2.0/9.0);
                double t25335 = a5*c0*gamma_aa*t25300*t25308*t25274*t25283*(1.4E1/9.0);
                double t25336 = c*c0*t25313*t25314*t25291*t25283*t25275*(4.0/3.0);
                double t25337 = c*c0*t25300*t25315*t25281*t25291*t25283*t25277*t25279*(6.4E1/9.0);
                double t25338 = t25334+t25335+t25336+t25337;
                double t25339 = 1.0/sqrt(t25306);
                double t25340 = 1.0/pow(rho_a,1.9E1/3.0);
                double t25341 = t25276*t25277*t25278*t25279;
                double t25342 = pow(t25280,4.0/5.0);
                double t25360 = rab1*t25342;
                double t25343 = exp(-t25360);
                double t25344 = t25343-1.0;
                double t25361 = kab1*t25344;
                double t25345 = kab0-t25361;
                double t25346 = a3*gamma_aa*t25274*t25284*t25285;
                double t25347 = t25346+1.0;
                double t25348 = 1.0/sqrt(t25347);
                double t25349 = 1.0/pow(rho_a,8.0/3.0);
                double t25350 = a1*gamma_aa*t25274*t25349;
                double t25351 = t25341+t25350+1.0;
                double t25352 = c*c;
                double t25353 = 1.0/pow(rho_a,2.0/3.0);
                double t25354 = k1*t25286;
                double t25355 = c*k2*t25275;
                double t25356 = t25354+t25355;
                double t25357 = 1.0/(t25356*t25356);
                double t25363 = t25352*t25353*t25357;
                double t25358 = exp(-t25363);
                double t25359 = exp(-t25341);
                double t25362 = c*c0*t25275*(2.0/3.0);
                double t25364 = t25316*t25317;
                double t25365 = t25330*t25322*t25333;
                double t25366 = t25364+t25365;
                double t25367 = t25351*t25345*t25348*t25359*1.0E5;
                double t25368 = -t25362+t25367;
                double t25369 = heaviside(t25368);
                double t25370 = t25276*t25277*t25278*t25279*2.0;
                double t25371 = exp(t25370);
                double t25372 = 1.0/(t25345*t25345);
                double t25373 = 1.0/(t25351*t25351);
                double t25374 = c*c0*t25371*t25372*t25373*t25275*t25347*(2.0/3.0);
                double t25375 = sqrt(t25374);
                double t25376 = t25340*t25276*t25277*t25279*(1.6E1/3.0);
                double t25377 = a1*gamma_aa*t25308*t25274*(8.0/3.0);
                double t25378 = t25376+t25377;
                double t25379 = exp(t25374);
                double t25380 = Ei(-t25374);
                double t25381 = c*c0*t25305*t25371*t25372*t25373*t25347*(2.0/9.0);
                double t25382 = 1.0/(t25351*t25351*t25351);
                double t25383 = a3*c0*gamma_aa*t25308*t25371*t25372*t25274*t25373*(1.4E1/9.0);
                double t25384 = 1.0/pow(rho_a,5.0/3.0);
                double t25385 = 1.0/pow(t25280,1.0/5.0);
                double t25386 = c*c0*t25315*t25371*t25372*t25373*t25347*t25276*t25277*t25279*(6.4E1/9.0);
                double t25387 = 1.0/(t25345*t25345*t25345);
                double t25393 = c*c0*t25371*t25372*t25382*t25275*t25347*t25378*(4.0/3.0);
                double t25394 = c0*kab1*rab1*t25343*t25352*t25371*t25373*t25347*t25384*t25385*t25387*(1.6E1/4.5E1);
                double t25388 = t25381+t25383-t25393-t25394+t25386;
                double t25389 = t25375*6.0;
                double t25390 = c*c0*t25371*t25372*t25373*t25275*t25347*4.0;
                double t25391 = t25390+t25389+3.0;
                double t25392 = 1.0/t25391;
                double t25395 = c*c0*t25371*t25380*t25372*t25373*t25275*t25347*t25379*(2.0/3.0);
                double t25396 = t25395+1.0;
                double t25397 = t25375*4.0;
                double t25398 = c*c0*t25371*t25372*t25373*t25275*t25347*(8.0/3.0);
                double t25399 = t25397+t25398+6.0;
                double t25400 = 1.0/sqrt(t25374);
                double t25401 = 1.0/c0;
                double t25402 = pow(rho_a,1.0/3.0);
                double t25403 = c*c0*t25305*(2.0/9.0);
                double t25404 = t25340*t25351*t25345*t25276*t25348*t25277*t25359*t25279*(1.6E6/3.0);
                double t25405 = 1.0/pow(rho_a,1.0E1/3.0);
                double t25406 = 1.0/pow(t25347,3.0/2.0);
                double t25407 = a3*gamma_aa*t25351*t25405*t25406*t25345*t25274*t25284*t25359*(3.5E5/3.0);
                double t25408 = t25403+t25404+t25407-t25345*t25348*t25359*t25378*1.0E5-c*kab1*rab1*t25305*t25351*t25343*t25348*t25385*t25359*(8.0E4/3.0);
                double t25409 = 1.0/pow(rho_b,1.0/3.0);
                double t25410 = gamma_bb*gamma_bb;
                double t25411 = 1.0/pow(rho_b,1.6E1/3.0);
                double t25412 = c*t25409;
                double t25413 = pow(t25412,4.0/5.0);
                double t25426 = rab1*t25413;
                double t25414 = exp(-t25426);
                double t25415 = t25414-1.0;
                double t25427 = kab1*t25415;
                double t25416 = kab0-t25427;
                double t25417 = 1.0/pow(rho_b,7.0/3.0);
                double t25418 = a3*gamma_bb*t25417*t25274*t25284;
                double t25419 = t25418+1.0;
                double t25420 = t25410*t25411*t25276*t25279;
                double t25421 = 1.0/pow(rho_b,8.0/3.0);
                double t25422 = a1*gamma_bb*t25421*t25274;
                double t25423 = t25420+t25422+1.0;
                double t25424 = t25410*t25411*t25276*t25279*2.0;
                double t25425 = exp(t25424);
                double t25428 = 1.0/(t25416*t25416);
                double t25429 = 1.0/(t25423*t25423);
                double t25430 = c*c0*t25425*t25409*t25419*t25428*t25429*(2.0/3.0);
                double t25431 = exp(t25430);
                double t25432 = Ei(-t25430);
                double t25433 = sqrt(t25430);
                v_rho_a[Q] += scale * -rho_b*(c0*t25369*(t25392*t25396*(t25400*t25388*2.0+c*c0*t25305*t25371*t25372*t25373*t25347*(8.0/9.0)+a3*c0*gamma_aa*t25308*t25371*t25372*t25274*t25373*(5.6E1/9.0)-c*c0*t25371*t25372*t25382*t25275*t25347*t25378*(1.6E1/3.0)+c*c0*t25315*t25371*t25372*t25373*t25347*t25276*t25277*t25279*(2.56E2/9.0)-c0*kab1*rab1*t25343*t25352*t25371*t25373*t25347*t25384*t25385*t25387*(6.4E1/4.5E1))+t25392*t25399*(t25381+t25383-t25393-t25394+t25386+c*c0*t25305*t25371*t25380*t25372*t25373*t25347*t25379*(2.0/9.0)+a3*c0*gamma_aa*t25308*t25371*t25380*t25372*t25274*t25373*t25379*(1.4E1/9.0)-c*c0*t25371*t25380*t25372*t25382*t25275*t25347*t25378*t25379*(4.0/3.0)+c*c0*t25371*t25380*t25372*t25373*t25275*t25347*t25379*t25388*(2.0/3.0)+c*c0*t25315*t25371*t25380*t25372*t25373*t25347*t25276*t25277*t25279*t25379*(6.4E1/9.0)-c0*kab1*rab1*t25343*t25352*t25371*t25380*t25373*t25347*t25384*t25385*t25387*t25379*(1.6E1/4.5E1))+t25380*t25379*t25388-1.0/(t25391*t25391)*t25396*t25399*(t25400*t25388*3.0+c*c0*t25305*t25371*t25372*t25373*t25347*(4.0/3.0)+a3*c0*gamma_aa*t25308*t25371*t25372*t25274*t25373*(2.8E1/3.0)-c*c0*t25371*t25372*t25382*t25275*t25347*t25378*8.0+c*c0*t25315*t25371*t25372*t25373*t25347*t25276*t25277*t25279*(1.28E2/3.0)-c0*kab1*rab1*t25343*t25352*t25371*t25373*t25347*t25384*t25385*t25387*(3.2E1/1.5E1))+(t25401*t25402*(t25351*t25351)*(t25345*t25345)*t25284*t25388*exp(-t25370)*(3.0/2.0))/t25347)*(1.0/2.0)-c0*t25408*dirac(t25362-t25367)*(t25380*t25379+t25392*t25396*t25399)*(1.0/2.0))+rho_a*(c0*t25358*heaviside(c*c0*t25275*(-2.0/3.0)+t25351*t25345*t25348*exp(-t25276*t25277*t25278*t25279)*1.0E5)*(t25330*t25322*(t25304*t25338*t25339*2.0-t25340*t25307*t25281*t25277*t25279*t25289*(6.4E1/3.0)+c*c0*t25300*t25305*t25291*t25283*t25289*(8.0/9.0)+a5*c0*gamma_aa*t25300*t25308*t25274*t25283*t25289*(5.6E1/9.0)+c*c0*t25313*t25314*t25291*t25283*t25275*t25289*(1.6E1/3.0)-c*c0*t25300*t25315*t25281*t25291*t25318*t25283*t25277*t25279*(2.56E2/9.0)+c*c0*t25300*t25315*t25281*t25291*t25283*t25277*t25279*t25289*(2.56E2/9.0))+t25322*t25333*(t25323+t25324+t25325+t25326-t25328+c*c0*t25300*t25305*t25316*t25317*t25291*t25283*t25289*(2.0/9.0)+a5*c0*gamma_aa*t25300*t25316*t25308*t25317*t25274*t25283*t25289*(1.4E1/9.0)+c*c0*t25300*t25316*t25317*t25291*t25327*t25283*t25275*t25289*(2.0/3.0)+c*c0*t25313*t25314*t25316*t25317*t25291*t25283*t25275*t25289*(4.0/3.0)-c*c0*t25300*t25315*t25316*t25281*t25317*t25291*t25318*t25283*t25277*t25279*(6.4E1/9.0)+c*c0*t25300*t25315*t25316*t25281*t25317*t25291*t25283*t25277*t25279*t25289*(6.4E1/9.0))+t25316*t25317*t25327-1.0/(t25321*t25321)*t25330*t25333*(t25304*t25338*t25339*3.0-t25340*t25307*t25281*t25277*t25279*t25289*3.2E1+c*c0*t25300*t25305*t25291*t25283*t25289*(4.0/3.0)+a5*c0*gamma_aa*t25300*t25308*t25274*t25283*t25289*(2.8E1/3.0)+c*c0*t25313*t25314*t25291*t25283*t25275*t25289*8.0-c*c0*t25300*t25315*t25281*t25291*t25318*t25283*t25277*t25279*(1.28E2/3.0)+c*c0*t25300*t25315*t25281*t25291*t25283*t25277*t25279*t25289*(1.28E2/3.0))+(t25401*t25402*t25327*t25284*(t25288*t25288)*(t25299*t25299)*exp(-t25282)*(3.0/2.0))/t25291)*(-1.0/2.0)+c0*t25366*t25358*t25369*(t25352*t25357*t25384*(2.0/3.0)-t25352*t25353*1.0/(t25356*t25356*t25356)*(c*k2*t25305*(1.0/3.0)+c*k1*t25305*t25309*(1.0/6.0))*2.0)*(1.0/2.0)+c0*t25408*t25366*t25358*dirac(t25362-t25351*t25345*t25348*t25359*1.0E5)*(1.0/2.0))+c0*heaviside(c*c0*t25409*(-2.0/3.0)+t25423*t25416*1.0/sqrt(t25419)*exp(-t25410*t25411*t25276*t25279)*1.0E5)*(t25431*t25432+((c*c0*t25431*t25432*t25425*t25409*t25419*t25428*t25429*(2.0/3.0)+1.0)*(t25433*4.0+c*c0*t25425*t25409*t25419*t25428*t25429*(8.0/3.0)+6.0))/(t25433*6.0+c*c0*t25425*t25409*t25419*t25428*t25429*4.0+3.0))*(1.0/2.0)+c0*t25366*t25358*t25369*(1.0/2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t25435 = tspi_m13*tspi_m13;
                double t25436 = 1.0/pow(rho_b,1.0/3.0);
                double t25437 = a2*a2;
                double t25438 = gamma_bb*gamma_bb;
                double t25439 = 1.0/pow(rho_b,1.6E1/3.0);
                double t25440 = t25435*t25435;
                double t25441 = c*t25436;
                double t25442 = a4*a4;
                double t25443 = t25440*t25442*t25438*t25439*2.0;
                double t25444 = exp(t25443);
                double t25445 = 1.0/c;
                double t25446 = 1.0/pow(rho_b,7.0/3.0);
                double t25447 = sqrt(t25441);
                double t25448 = t25440*t25442*t25438*t25439;
                double t25449 = t25448+1.0;
                double t25450 = 1.0/(t25449*t25449);
                double t25451 = a5*gamma_bb*t25435*t25445*t25446;
                double t25452 = t25451+1.0;
                double t25463 = raa2*t25447;
                double t25453 = exp(-t25463);
                double t25454 = t25453-1.0;
                double t25455 = kaa2*t25454;
                double t25456 = pow(t25441,2.0/5.0);
                double t25464 = raa1*t25456;
                double t25457 = exp(-t25464);
                double t25458 = t25457-1.0;
                double t25459 = kaa1*t25458;
                double t25460 = -kaa0+t25455+t25459;
                double t25461 = 1.0/(t25460*t25460);
                double t25462 = c*c0*t25450*t25452*t25461*t25444*t25436*(2.0/3.0);
                double t25465 = 1.0/t25449;
                double t25466 = 1.0/pow(rho_b,4.0/3.0);
                double t25467 = c*c0*t25452*t25461*t25444*t25436*(2.0/3.0);
                double t25468 = sqrt(t25467);
                double t25469 = 1.0/pow(rho_b,1.1E1/3.0);
                double t25470 = 1.0/sqrt(t25441);
                double t25471 = c*kaa2*raa2*t25470*t25453*t25466*(1.0/6.0);
                double t25472 = 1.0/pow(t25441,3.0/5.0);
                double t25473 = c*kaa1*raa1*t25472*t25457*t25466*(2.0/1.5E1);
                double t25474 = t25471+t25473;
                double t25475 = 1.0/(t25460*t25460*t25460);
                double t25476 = 1.0/pow(rho_b,2.0E1/3.0);
                double t25477 = exp(t25462);
                double t25478 = Ei(-t25462);
                double t25479 = 1.0/(t25449*t25449*t25449);
                double t25480 = t25465*t25468*6.0;
                double t25481 = c*c0*t25450*t25452*t25461*t25444*t25436*4.0;
                double t25482 = t25480+t25481+3.0;
                double t25483 = 1.0/t25482;
                double t25484 = c*c0*t25450*t25452*t25461*t25444*t25466*(2.0/9.0);
                double t25485 = a5*c0*gamma_bb*t25450*t25461*t25435*t25444*t25469*(1.4E1/9.0);
                double t25486 = c*c0*t25450*t25452*t25444*t25436*t25474*t25475*(4.0/3.0);
                double t25487 = c*c0*t25440*t25450*t25442*t25452*t25461*t25444*t25438*t25476*(6.4E1/9.0);
                double t25489 = c*c0*t25440*t25442*t25452*t25461*t25444*t25438*t25476*t25479*(6.4E1/9.0);
                double t25488 = t25484+t25485+t25486+t25487-t25489;
                double t25490 = c*c0*t25450*t25452*t25461*t25444*t25436*t25477*t25478*(2.0/3.0);
                double t25491 = t25490+1.0;
                double t25492 = t25465*t25468*4.0;
                double t25493 = c*c0*t25450*t25452*t25461*t25444*t25436*(8.0/3.0);
                double t25494 = t25492+t25493+6.0;
                double t25495 = c*c0*t25452*t25461*t25444*t25466*(2.0/9.0);
                double t25496 = a5*c0*gamma_bb*t25461*t25435*t25444*t25469*(1.4E1/9.0);
                double t25497 = c*c0*t25452*t25444*t25436*t25474*t25475*(4.0/3.0);
                double t25498 = c*c0*t25440*t25442*t25452*t25461*t25444*t25438*t25476*(6.4E1/9.0);
                double t25499 = t25495+t25496+t25497+t25498;
                double t25500 = 1.0/sqrt(t25467);
                double t25501 = 1.0/pow(rho_b,1.9E1/3.0);
                double t25502 = t25440*t25437*t25438*t25439;
                double t25503 = pow(t25441,4.0/5.0);
                double t25521 = rab1*t25503;
                double t25504 = exp(-t25521);
                double t25505 = t25504-1.0;
                double t25522 = kab1*t25505;
                double t25506 = kab0-t25522;
                double t25507 = a3*gamma_bb*t25435*t25445*t25446;
                double t25508 = t25507+1.0;
                double t25509 = 1.0/sqrt(t25508);
                double t25510 = 1.0/pow(rho_b,8.0/3.0);
                double t25511 = a1*gamma_bb*t25510*t25435;
                double t25512 = t25502+t25511+1.0;
                double t25513 = c*c;
                double t25514 = 1.0/pow(rho_b,2.0/3.0);
                double t25515 = k1*t25447;
                double t25516 = c*k2*t25436;
                double t25517 = t25515+t25516;
                double t25518 = 1.0/(t25517*t25517);
                double t25524 = t25513*t25514*t25518;
                double t25519 = exp(-t25524);
                double t25520 = exp(-t25502);
                double t25523 = c*c0*t25436*(2.0/3.0);
                double t25525 = t25477*t25478;
                double t25526 = t25491*t25483*t25494;
                double t25527 = t25525+t25526;
                double t25528 = t25520*t25512*t25506*t25509*1.0E5;
                double t25529 = -t25523+t25528;
                double t25530 = heaviside(t25529);
                double t25531 = t25440*t25437*t25438*t25439*2.0;
                double t25532 = exp(t25531);
                double t25533 = 1.0/(t25506*t25506);
                double t25534 = 1.0/(t25512*t25512);
                double t25535 = c*c0*t25532*t25533*t25534*t25436*t25508*(2.0/3.0);
                double t25536 = sqrt(t25535);
                double t25537 = t25501*t25440*t25437*t25438*(1.6E1/3.0);
                double t25538 = a1*gamma_bb*t25435*t25469*(8.0/3.0);
                double t25539 = t25537+t25538;
                double t25540 = exp(t25535);
                double t25541 = Ei(-t25535);
                double t25542 = c*c0*t25532*t25533*t25534*t25508*t25466*(2.0/9.0);
                double t25543 = 1.0/(t25512*t25512*t25512);
                double t25544 = a3*c0*gamma_bb*t25532*t25533*t25435*t25534*t25469*(1.4E1/9.0);
                double t25545 = 1.0/pow(rho_b,5.0/3.0);
                double t25546 = 1.0/pow(t25441,1.0/5.0);
                double t25547 = c*c0*t25440*t25532*t25533*t25534*t25508*t25437*t25438*t25476*(6.4E1/9.0);
                double t25548 = 1.0/(t25506*t25506*t25506);
                double t25554 = c*c0*t25532*t25533*t25543*t25436*t25508*t25539*(4.0/3.0);
                double t25555 = c0*kab1*rab1*t25504*t25513*t25532*t25534*t25508*t25545*t25546*t25548*(1.6E1/4.5E1);
                double t25549 = t25542+t25544-t25554-t25555+t25547;
                double t25550 = t25536*6.0;
                double t25551 = c*c0*t25532*t25533*t25534*t25436*t25508*4.0;
                double t25552 = t25550+t25551+3.0;
                double t25553 = 1.0/t25552;
                double t25556 = c*c0*t25540*t25532*t25541*t25533*t25534*t25436*t25508*(2.0/3.0);
                double t25557 = t25556+1.0;
                double t25558 = t25536*4.0;
                double t25559 = c*c0*t25532*t25533*t25534*t25436*t25508*(8.0/3.0);
                double t25560 = t25558+t25559+6.0;
                double t25561 = 1.0/sqrt(t25535);
                double t25562 = 1.0/c0;
                double t25563 = pow(rho_b,1.0/3.0);
                double t25564 = c*c0*t25466*(2.0/9.0);
                double t25565 = t25501*t25520*t25440*t25512*t25506*t25437*t25509*t25438*(1.6E6/3.0);
                double t25566 = 1.0/pow(rho_b,1.0E1/3.0);
                double t25567 = 1.0/pow(t25508,3.0/2.0);
                double t25568 = a3*gamma_bb*t25520*t25512*t25506*t25435*t25445*t25566*t25567*(3.5E5/3.0);
                double t25569 = t25564+t25565+t25568-t25520*t25506*t25509*t25539*1.0E5-c*kab1*rab1*t25520*t25512*t25504*t25509*t25546*t25466*(8.0E4/3.0);
                double t25570 = 1.0/pow(rho_a,1.0/3.0);
                double t25571 = gamma_aa*gamma_aa;
                double t25572 = 1.0/pow(rho_a,1.6E1/3.0);
                double t25573 = c*t25570;
                double t25574 = pow(t25573,4.0/5.0);
                double t25587 = rab1*t25574;
                double t25575 = exp(-t25587);
                double t25576 = t25575-1.0;
                double t25588 = kab1*t25576;
                double t25577 = kab0-t25588;
                double t25578 = 1.0/pow(rho_a,7.0/3.0);
                double t25579 = a3*gamma_aa*t25435*t25445*t25578;
                double t25580 = t25579+1.0;
                double t25581 = t25440*t25571*t25437*t25572;
                double t25582 = 1.0/pow(rho_a,8.0/3.0);
                double t25583 = a1*gamma_aa*t25435*t25582;
                double t25584 = t25581+t25583+1.0;
                double t25585 = t25440*t25571*t25437*t25572*2.0;
                double t25586 = exp(t25585);
                double t25589 = 1.0/(t25577*t25577);
                double t25590 = 1.0/(t25584*t25584);
                double t25591 = c*c0*t25570*t25580*t25590*t25586*t25589*(2.0/3.0);
                double t25592 = exp(t25591);
                double t25593 = Ei(-t25591);
                double t25594 = sqrt(t25591);
                v_rho_b[Q] += scale * -rho_a*(c0*t25530*(t25553*t25557*(t25561*t25549*2.0+c*c0*t25532*t25533*t25534*t25508*t25466*(8.0/9.0)+a3*c0*gamma_bb*t25532*t25533*t25435*t25534*t25469*(5.6E1/9.0)-c*c0*t25532*t25533*t25543*t25436*t25508*t25539*(1.6E1/3.0)+c*c0*t25440*t25532*t25533*t25534*t25508*t25437*t25438*t25476*(2.56E2/9.0)-c0*kab1*rab1*t25504*t25513*t25532*t25534*t25508*t25545*t25546*t25548*(6.4E1/4.5E1))+t25560*t25553*(t25542+t25544-t25554-t25555+t25547+c*c0*t25540*t25532*t25541*t25533*t25534*t25508*t25466*(2.0/9.0)+a3*c0*gamma_bb*t25540*t25532*t25541*t25533*t25435*t25534*t25469*(1.4E1/9.0)-c*c0*t25540*t25532*t25541*t25533*t25543*t25436*t25508*t25539*(4.0/3.0)+c*c0*t25540*t25532*t25541*t25533*t25534*t25436*t25508*t25549*(2.0/3.0)+c*c0*t25440*t25540*t25532*t25541*t25533*t25534*t25508*t25437*t25438*t25476*(6.4E1/9.0)-c0*kab1*rab1*t25504*t25513*t25540*t25532*t25541*t25534*t25508*t25545*t25546*t25548*(1.6E1/4.5E1))+t25540*t25541*t25549-t25560*1.0/(t25552*t25552)*t25557*(t25561*t25549*3.0+c*c0*t25532*t25533*t25534*t25508*t25466*(4.0/3.0)+a3*c0*gamma_bb*t25532*t25533*t25435*t25534*t25469*(2.8E1/3.0)-c*c0*t25532*t25533*t25543*t25436*t25508*t25539*8.0+c*c0*t25440*t25532*t25533*t25534*t25508*t25437*t25438*t25476*(1.28E2/3.0)-c0*kab1*rab1*t25504*t25513*t25532*t25534*t25508*t25545*t25546*t25548*(3.2E1/1.5E1))+((t25512*t25512)*(t25506*t25506)*t25445*t25562*t25563*t25549*exp(-t25531)*(3.0/2.0))/t25508)*(1.0/2.0)-c0*t25569*dirac(t25523-t25528)*(t25540*t25541+t25560*t25553*t25557)*(1.0/2.0))+rho_b*(c0*t25519*heaviside(c*c0*t25436*(-2.0/3.0)+t25512*t25506*t25509*exp(-t25440*t25437*t25438*t25439)*1.0E5)*(t25491*t25483*(t25500*t25465*t25499*2.0-t25501*t25440*t25450*t25442*t25438*t25468*(6.4E1/3.0)+c*c0*t25450*t25452*t25461*t25444*t25466*(8.0/9.0)+a5*c0*gamma_bb*t25450*t25461*t25435*t25444*t25469*(5.6E1/9.0)+c*c0*t25450*t25452*t25444*t25436*t25474*t25475*(1.6E1/3.0)+c*c0*t25440*t25450*t25442*t25452*t25461*t25444*t25438*t25476*(2.56E2/9.0)-c*c0*t25440*t25442*t25452*t25461*t25444*t25438*t25476*t25479*(2.56E2/9.0))+t25483*t25494*(t25484+t25485+t25486+t25487-t25489+c*c0*t25450*t25452*t25461*t25444*t25466*t25477*t25478*(2.0/9.0)+a5*c0*gamma_bb*t25450*t25461*t25435*t25444*t25477*t25469*t25478*(1.4E1/9.0)+c*c0*t25450*t25452*t25461*t25444*t25436*t25477*t25478*t25488*(2.0/3.0)+c*c0*t25450*t25452*t25444*t25436*t25474*t25475*t25477*t25478*(4.0/3.0)+c*c0*t25440*t25450*t25442*t25452*t25461*t25444*t25438*t25476*t25477*t25478*(6.4E1/9.0)-c*c0*t25440*t25442*t25452*t25461*t25444*t25438*t25476*t25477*t25478*t25479*(6.4E1/9.0))+t25477*t25478*t25488-1.0/(t25482*t25482)*t25491*t25494*(t25500*t25465*t25499*3.0-t25501*t25440*t25450*t25442*t25438*t25468*3.2E1+c*c0*t25450*t25452*t25461*t25444*t25466*(4.0/3.0)+a5*c0*gamma_bb*t25450*t25461*t25435*t25444*t25469*(2.8E1/3.0)+c*c0*t25450*t25452*t25444*t25436*t25474*t25475*8.0+c*c0*t25440*t25450*t25442*t25452*t25461*t25444*t25438*t25476*(1.28E2/3.0)-c*c0*t25440*t25442*t25452*t25461*t25444*t25438*t25476*t25479*(1.28E2/3.0))+((t25460*t25460)*t25445*t25562*t25563*(t25449*t25449)*t25488*exp(-t25443)*(3.0/2.0))/t25452)*(-1.0/2.0)+c0*t25530*t25527*t25519*(t25513*t25518*t25545*(2.0/3.0)-t25513*t25514*1.0/(t25517*t25517*t25517)*(c*k2*t25466*(1.0/3.0)+c*k1*t25470*t25466*(1.0/6.0))*2.0)*(1.0/2.0)+c0*t25527*t25519*t25569*dirac(t25523-t25520*t25512*t25506*t25509*1.0E5)*(1.0/2.0))+c0*heaviside(c*c0*t25570*(-2.0/3.0)+1.0/sqrt(t25580)*t25584*t25577*exp(-t25440*t25571*t25437*t25572)*1.0E5)*(t25592*t25593+((c*c0*t25570*t25580*t25590*t25592*t25593*t25586*t25589*(2.0/3.0)+1.0)*(t25594*4.0+c*c0*t25570*t25580*t25590*t25586*t25589*(8.0/3.0)+6.0))/(t25594*6.0+c*c0*t25570*t25580*t25590*t25586*t25589*4.0+3.0))*(1.0/2.0)+c0*t25530*t25527*t25519*(1.0/2.0);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t25596 = tspi_m13*tspi_m13;
                double t25597 = 1.0/pow(rho_a,1.0/3.0);
                double t25598 = a2*a2;
                double t25599 = gamma_aa*gamma_aa;
                double t25600 = 1.0/pow(rho_a,1.6E1/3.0);
                double t25601 = t25596*t25596;
                double t25602 = t25600*t25601*t25598*t25599*2.0;
                double t25603 = exp(t25602);
                double t25604 = c*t25597;
                double t25605 = pow(t25604,4.0/5.0);
                double t25617 = rab1*t25605;
                double t25606 = exp(-t25617);
                double t25607 = t25606-1.0;
                double t25618 = kab1*t25607;
                double t25608 = kab0-t25618;
                double t25609 = 1.0/c;
                double t25610 = 1.0/pow(rho_a,7.0/3.0);
                double t25611 = a3*gamma_aa*t25610*t25609*t25596;
                double t25612 = t25611+1.0;
                double t25613 = t25600*t25601*t25598*t25599;
                double t25614 = 1.0/pow(rho_a,8.0/3.0);
                double t25615 = a1*gamma_aa*t25614*t25596;
                double t25616 = t25613+t25615+1.0;
                double t25619 = 1.0/(t25608*t25608);
                double t25620 = 1.0/(t25616*t25616);
                double t25621 = c*c0*t25620*t25603*t25612*t25619*t25597*(2.0/3.0);
                double t25622 = a1*t25614*t25596;
                double t25623 = gamma_aa*t25600*t25601*t25598*2.0;
                double t25624 = t25622+t25623;
                double t25625 = 1.0/(t25616*t25616*t25616);
                double t25626 = 1.0/pow(rho_a,1.7E1/3.0);
                double t25627 = exp(t25621);
                double t25628 = Ei(-t25621);
                double t25629 = a3*c0*t25620*t25603*t25614*t25619*t25596*(2.0/3.0);
                double t25630 = c*c0*gamma_aa*t25601*t25620*t25603*t25612*t25626*t25619*t25598*(8.0/3.0);
                double t25637 = c*c0*t25603*t25612*t25624*t25625*t25619*t25597*(4.0/3.0);
                double t25631 = t25630-t25637+t25629;
                double t25632 = sqrt(t25621);
                double t25633 = t25632*6.0;
                double t25634 = c*c0*t25620*t25603*t25612*t25619*t25597*4.0;
                double t25635 = t25633+t25634+3.0;
                double t25636 = 1.0/t25635;
                double t25638 = c*c0*t25620*t25603*t25612*t25627*t25619*t25628*t25597*(2.0/3.0);
                double t25639 = t25638+1.0;
                double t25640 = t25632*4.0;
                double t25641 = c*c0*t25620*t25603*t25612*t25619*t25597*(8.0/3.0);
                double t25642 = t25640+t25641+6.0;
                double t25643 = 1.0/sqrt(t25621);
                double t25644 = 1.0/sqrt(t25612);
                double t25645 = exp(-t25613);
                double t25646 = c*c0*t25597*(2.0/3.0);
                double t25647 = a4*a4;
                double t25648 = sqrt(t25604);
                double t25649 = t25600*t25601*t25647*t25599*2.0;
                double t25650 = exp(t25649);
                double t25651 = t25600*t25601*t25647*t25599;
                double t25652 = t25651+1.0;
                double t25653 = 1.0/(t25652*t25652);
                double t25654 = a5*gamma_aa*t25610*t25609*t25596;
                double t25655 = t25654+1.0;
                double t25666 = raa2*t25648;
                double t25656 = exp(-t25666);
                double t25657 = t25656-1.0;
                double t25658 = kaa2*t25657;
                double t25659 = pow(t25604,2.0/5.0);
                double t25667 = raa1*t25659;
                double t25660 = exp(-t25667);
                double t25661 = t25660-1.0;
                double t25662 = kaa1*t25661;
                double t25663 = -kaa0+t25662+t25658;
                double t25664 = 1.0/(t25663*t25663);
                double t25665 = c*c0*t25650*t25653*t25655*t25664*t25597*(2.0/3.0);
                double t25668 = exp(t25665);
                double t25669 = Ei(-t25665);
                double t25670 = 1.0/t25652;
                double t25671 = c*c0*t25650*t25655*t25664*t25597*(2.0/3.0);
                double t25672 = sqrt(t25671);
                double t25673 = 1.0/(t25652*t25652*t25652);
                double t25674 = t25670*t25672*6.0;
                double t25675 = c*c0*t25650*t25653*t25655*t25664*t25597*4.0;
                double t25676 = t25674+t25675+3.0;
                double t25677 = 1.0/t25676;
                double t25678 = a5*c0*t25614*t25650*t25653*t25664*t25596*(2.0/3.0);
                double t25679 = c*c0*gamma_aa*t25601*t25650*t25626*t25653*t25655*t25664*t25647*(8.0/3.0);
                double t25692 = c*c0*gamma_aa*t25601*t25650*t25626*t25655*t25664*t25673*t25647*(8.0/3.0);
                double t25680 = -t25692+t25678+t25679;
                double t25681 = c*c0*t25650*t25653*t25655*t25664*t25668*t25597*t25669*(2.0/3.0);
                double t25682 = t25681+1.0;
                double t25683 = t25670*t25672*4.0;
                double t25684 = c*c0*t25650*t25653*t25655*t25664*t25597*(8.0/3.0);
                double t25685 = t25683+t25684+6.0;
                double t25686 = a5*c0*t25614*t25650*t25664*t25596*(2.0/3.0);
                double t25687 = c*c0*gamma_aa*t25601*t25650*t25626*t25655*t25664*t25647*(8.0/3.0);
                double t25688 = t25686+t25687;
                double t25689 = 1.0/sqrt(t25671);
                double t25690 = 1.0/c0;
                double t25691 = pow(rho_a,1.0/3.0);
                double t25693 = t25616*t25608*t25644*t25645*1.0E5;
                double t25694 = c*c;
                double t25695 = 1.0/pow(rho_a,2.0/3.0);
                double t25696 = k1*t25648;
                double t25697 = c*k2*t25597;
                double t25698 = t25696+t25697;
                double t25699 = 1.0/(t25698*t25698);
                double t25700 = exp(-t25694*t25695*t25699);
                double t25701 = 1.0/pow(t25612,3.0/2.0);
                double t25702 = a3*t25610*t25701*t25616*t25608*t25609*t25645*t25596*5.0E4;
                double t25703 = gamma_aa*t25600*t25601*t25616*t25608*t25644*t25645*t25598*2.0E5;
                double t25704 = t25702+t25703-t25624*t25608*t25644*t25645*1.0E5;
                v_gamma_aa[Q] += scale * rho_b*(c0*heaviside(c*c0*t25597*(-2.0/3.0)+t25616*t25608*t25644*exp(-t25600*t25601*t25598*t25599)*1.0E5)*(t25631*t25627*t25628+t25642*t25636*(t25630-t25637+t25629+a3*c0*t25620*t25603*t25614*t25627*t25619*t25628*t25596*(2.0/3.0)+c*c0*t25620*t25603*t25612*t25631*t25627*t25619*t25628*t25597*(2.0/3.0)-c*c0*t25603*t25612*t25624*t25625*t25627*t25619*t25628*t25597*(4.0/3.0)+c*c0*gamma_aa*t25601*t25620*t25603*t25612*t25626*t25627*t25619*t25628*t25598*(8.0/3.0))+t25636*t25639*(t25631*t25643*2.0+a3*c0*t25620*t25603*t25614*t25619*t25596*(8.0/3.0)-c*c0*t25603*t25612*t25624*t25625*t25619*t25597*(1.6E1/3.0)+c*c0*gamma_aa*t25601*t25620*t25603*t25612*t25626*t25619*t25598*(3.2E1/3.0))-t25642*1.0/(t25635*t25635)*t25639*(t25631*t25643*3.0+a3*c0*t25620*t25603*t25614*t25619*t25596*4.0-c*c0*t25603*t25612*t25624*t25625*t25619*t25597*8.0+c*c0*gamma_aa*t25601*t25620*t25603*t25612*t25626*t25619*t25598*1.6E1)+(t25631*(t25616*t25616)*(t25608*t25608)*t25609*t25690*t25691*exp(-t25602)*(3.0/2.0))/t25612)*(1.0/2.0)-c0*t25704*dirac(t25646-t25616*t25608*t25644*t25645*1.0E5)*(t25627*t25628+t25642*t25636*t25639)*(1.0/2.0))+rho_a*(c0*t25700*heaviside(-t25646+t25693)*(t25682*t25677*(t25670*t25688*t25689*2.0-gamma_aa*t25600*t25601*t25653*t25672*t25647*8.0+a5*c0*t25614*t25650*t25653*t25664*t25596*(8.0/3.0)+c*c0*gamma_aa*t25601*t25650*t25626*t25653*t25655*t25664*t25647*(3.2E1/3.0)-c*c0*gamma_aa*t25601*t25650*t25626*t25655*t25664*t25673*t25647*(3.2E1/3.0))+t25685*t25677*(t25678+t25679+a5*c0*t25614*t25650*t25653*t25664*t25596*t25668*t25669*(2.0/3.0)-c*c0*gamma_aa*t25601*t25650*t25626*t25655*t25664*t25673*t25647*(8.0/3.0)+c*c0*t25650*t25653*t25680*t25655*t25664*t25668*t25597*t25669*(2.0/3.0)+c*c0*gamma_aa*t25601*t25650*t25626*t25653*t25655*t25664*t25647*t25668*t25669*(8.0/3.0)-c*c0*gamma_aa*t25601*t25650*t25626*t25655*t25664*t25673*t25647*t25668*t25669*(8.0/3.0))+t25680*t25668*t25669-t25682*1.0/(t25676*t25676)*t25685*(t25670*t25688*t25689*3.0-gamma_aa*t25600*t25601*t25653*t25672*t25647*1.2E1+a5*c0*t25614*t25650*t25653*t25664*t25596*4.0+c*c0*gamma_aa*t25601*t25650*t25626*t25653*t25655*t25664*t25647*1.6E1-c*c0*gamma_aa*t25601*t25650*t25626*t25655*t25664*t25673*t25647*1.6E1)+((t25652*t25652)*t25680*t25609*(t25663*t25663)*t25690*t25691*exp(-t25649)*(3.0/2.0))/t25655)*(1.0/2.0)-c0*t25700*t25704*dirac(t25646-t25693)*(t25668*t25669+t25682*t25685*t25677)*(1.0/2.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t25707 = tspi_m13*tspi_m13;
                double t25708 = 1.0/pow(rho_b,1.0/3.0);
                double t25709 = a2*a2;
                double t25710 = gamma_bb*gamma_bb;
                double t25711 = 1.0/pow(rho_b,1.6E1/3.0);
                double t25712 = t25707*t25707;
                double t25713 = t25710*t25711*t25712*t25709*2.0;
                double t25714 = exp(t25713);
                double t25715 = c*t25708;
                double t25716 = pow(t25715,4.0/5.0);
                double t25728 = rab1*t25716;
                double t25717 = exp(-t25728);
                double t25718 = t25717-1.0;
                double t25729 = kab1*t25718;
                double t25719 = kab0-t25729;
                double t25720 = 1.0/c;
                double t25721 = 1.0/pow(rho_b,7.0/3.0);
                double t25722 = a3*gamma_bb*t25720*t25721*t25707;
                double t25723 = t25722+1.0;
                double t25724 = t25710*t25711*t25712*t25709;
                double t25725 = 1.0/pow(rho_b,8.0/3.0);
                double t25726 = a1*gamma_bb*t25707*t25725;
                double t25727 = t25724+t25726+1.0;
                double t25730 = 1.0/(t25719*t25719);
                double t25731 = 1.0/(t25727*t25727);
                double t25732 = c*c0*t25730*t25731*t25714*t25723*t25708*(2.0/3.0);
                double t25733 = a1*t25707*t25725;
                double t25734 = gamma_bb*t25711*t25712*t25709*2.0;
                double t25735 = t25733+t25734;
                double t25736 = 1.0/(t25727*t25727*t25727);
                double t25737 = 1.0/pow(rho_b,1.7E1/3.0);
                double t25738 = exp(t25732);
                double t25739 = Ei(-t25732);
                double t25740 = a3*c0*t25730*t25731*t25714*t25707*t25725*(2.0/3.0);
                double t25741 = c*c0*gamma_bb*t25712*t25730*t25731*t25714*t25723*t25709*t25737*(8.0/3.0);
                double t25748 = c*c0*t25730*t25714*t25723*t25708*t25735*t25736*(4.0/3.0);
                double t25742 = t25740+t25741-t25748;
                double t25743 = sqrt(t25732);
                double t25744 = t25743*6.0;
                double t25745 = c*c0*t25730*t25731*t25714*t25723*t25708*4.0;
                double t25746 = t25744+t25745+3.0;
                double t25747 = 1.0/t25746;
                double t25749 = c*c0*t25730*t25731*t25714*t25723*t25708*t25738*t25739*(2.0/3.0);
                double t25750 = t25749+1.0;
                double t25751 = t25743*4.0;
                double t25752 = c*c0*t25730*t25731*t25714*t25723*t25708*(8.0/3.0);
                double t25753 = t25751+t25752+6.0;
                double t25754 = 1.0/sqrt(t25732);
                double t25755 = 1.0/sqrt(t25723);
                double t25756 = exp(-t25724);
                double t25757 = c*c0*t25708*(2.0/3.0);
                double t25758 = a4*a4;
                double t25759 = sqrt(t25715);
                double t25760 = t25710*t25711*t25712*t25758*2.0;
                double t25761 = exp(t25760);
                double t25762 = t25710*t25711*t25712*t25758;
                double t25763 = t25762+1.0;
                double t25764 = 1.0/(t25763*t25763);
                double t25765 = a5*gamma_bb*t25720*t25721*t25707;
                double t25766 = t25765+1.0;
                double t25777 = raa2*t25759;
                double t25767 = exp(-t25777);
                double t25768 = t25767-1.0;
                double t25769 = kaa2*t25768;
                double t25770 = pow(t25715,2.0/5.0);
                double t25778 = raa1*t25770;
                double t25771 = exp(-t25778);
                double t25772 = t25771-1.0;
                double t25773 = kaa1*t25772;
                double t25774 = -kaa0+t25773+t25769;
                double t25775 = 1.0/(t25774*t25774);
                double t25776 = c*c0*t25761*t25708*t25764*t25766*t25775*(2.0/3.0);
                double t25779 = exp(t25776);
                double t25780 = Ei(-t25776);
                double t25781 = 1.0/t25763;
                double t25782 = c*c0*t25761*t25708*t25766*t25775*(2.0/3.0);
                double t25783 = sqrt(t25782);
                double t25784 = 1.0/(t25763*t25763*t25763);
                double t25785 = t25781*t25783*6.0;
                double t25786 = c*c0*t25761*t25708*t25764*t25766*t25775*4.0;
                double t25787 = t25785+t25786+3.0;
                double t25788 = 1.0/t25787;
                double t25789 = a5*c0*t25707*t25725*t25761*t25764*t25775*(2.0/3.0);
                double t25790 = c*c0*gamma_bb*t25712*t25761*t25737*t25764*t25766*t25775*t25758*(8.0/3.0);
                double t25803 = c*c0*gamma_bb*t25712*t25761*t25737*t25766*t25775*t25784*t25758*(8.0/3.0);
                double t25791 = -t25803+t25790+t25789;
                double t25792 = c*c0*t25761*t25708*t25780*t25764*t25766*t25775*t25779*(2.0/3.0);
                double t25793 = t25792+1.0;
                double t25794 = t25781*t25783*4.0;
                double t25795 = c*c0*t25761*t25708*t25764*t25766*t25775*(8.0/3.0);
                double t25796 = t25794+t25795+6.0;
                double t25797 = a5*c0*t25707*t25725*t25761*t25775*(2.0/3.0);
                double t25798 = c*c0*gamma_bb*t25712*t25761*t25737*t25766*t25775*t25758*(8.0/3.0);
                double t25799 = t25797+t25798;
                double t25800 = 1.0/sqrt(t25782);
                double t25801 = 1.0/c0;
                double t25802 = pow(rho_b,1.0/3.0);
                double t25804 = t25727*t25719*t25755*t25756*1.0E5;
                double t25805 = c*c;
                double t25806 = 1.0/pow(rho_b,2.0/3.0);
                double t25807 = k1*t25759;
                double t25808 = c*k2*t25708;
                double t25809 = t25807+t25808;
                double t25810 = 1.0/(t25809*t25809);
                double t25811 = exp(-t25810*t25805*t25806);
                double t25812 = 1.0/pow(t25723,3.0/2.0);
                double t25813 = a3*t25720*t25721*t25812*t25707*t25727*t25719*t25756*5.0E4;
                double t25814 = gamma_bb*t25711*t25712*t25709*t25727*t25719*t25755*t25756*2.0E5;
                double t25815 = t25813+t25814-t25735*t25719*t25755*t25756*1.0E5;
                v_gamma_bb[Q] += scale * rho_a*(c0*heaviside(c*c0*t25708*(-2.0/3.0)+t25727*t25719*t25755*exp(-t25710*t25711*t25712*t25709)*1.0E5)*(t25742*t25738*t25739+t25753*t25747*(t25740+t25741-t25748+a3*c0*t25730*t25731*t25714*t25707*t25725*t25738*t25739*(2.0/3.0)+c*c0*t25730*t25731*t25714*t25723*t25742*t25708*t25738*t25739*(2.0/3.0)-c*c0*t25730*t25714*t25723*t25708*t25735*t25736*t25738*t25739*(4.0/3.0)+c*c0*gamma_bb*t25712*t25730*t25731*t25714*t25723*t25709*t25737*t25738*t25739*(8.0/3.0))+t25750*t25747*(t25742*t25754*2.0+a3*c0*t25730*t25731*t25714*t25707*t25725*(8.0/3.0)-c*c0*t25730*t25714*t25723*t25708*t25735*t25736*(1.6E1/3.0)+c*c0*gamma_bb*t25712*t25730*t25731*t25714*t25723*t25709*t25737*(3.2E1/3.0))-t25750*t25753*1.0/(t25746*t25746)*(t25742*t25754*3.0+a3*c0*t25730*t25731*t25714*t25707*t25725*4.0-c*c0*t25730*t25714*t25723*t25708*t25735*t25736*8.0+c*c0*gamma_bb*t25712*t25730*t25731*t25714*t25723*t25709*t25737*1.6E1)+(t25720*t25801*t25802*t25742*(t25727*t25727)*(t25719*t25719)*exp(-t25713)*(3.0/2.0))/t25723)*(1.0/2.0)-c0*t25815*dirac(t25757-t25727*t25719*t25755*t25756*1.0E5)*(t25738*t25739+t25750*t25753*t25747)*(1.0/2.0))+rho_b*(c0*t25811*heaviside(t25804-t25757)*(t25793*t25788*(t25800*t25781*t25799*2.0-gamma_bb*t25711*t25712*t25764*t25783*t25758*8.0+a5*c0*t25707*t25725*t25761*t25764*t25775*(8.0/3.0)+c*c0*gamma_bb*t25712*t25761*t25737*t25764*t25766*t25775*t25758*(3.2E1/3.0)-c*c0*gamma_bb*t25712*t25761*t25737*t25766*t25775*t25784*t25758*(3.2E1/3.0))+t25796*t25788*(t25790+t25789+a5*c0*t25707*t25725*t25761*t25780*t25764*t25775*t25779*(2.0/3.0)-c*c0*gamma_bb*t25712*t25761*t25737*t25766*t25775*t25784*t25758*(8.0/3.0)+c*c0*t25761*t25708*t25780*t25764*t25791*t25766*t25775*t25779*(2.0/3.0)+c*c0*gamma_bb*t25712*t25761*t25780*t25737*t25764*t25766*t25775*t25758*t25779*(8.0/3.0)-c*c0*gamma_bb*t25712*t25761*t25780*t25737*t25766*t25775*t25784*t25758*t25779*(8.0/3.0))+t25780*t25791*t25779-t25793*1.0/(t25787*t25787)*t25796*(t25800*t25781*t25799*3.0-gamma_bb*t25711*t25712*t25764*t25783*t25758*1.2E1+a5*c0*t25707*t25725*t25761*t25764*t25775*4.0+c*c0*gamma_bb*t25712*t25761*t25737*t25764*t25766*t25775*t25758*1.6E1-c*c0*gamma_bb*t25712*t25761*t25737*t25766*t25775*t25784*t25758*1.6E1)+(t25720*t25801*t25802*(t25763*t25763)*t25791*(t25774*t25774)*exp(-t25760)*(3.0/2.0))/t25766)*(1.0/2.0)-c0*t25811*t25815*dirac(-t25804+t25757)*(t25780*t25779+t25793*t25796*t25788)*(1.0/2.0));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t25819 = tspi_m13*tspi_m13;
                double t25820 = 1.0/pow(rho_a,1.0/3.0);
                double t25821 = a2*a2;
                double t25822 = gamma_aa*gamma_aa;
                double t25823 = 1.0/pow(rho_a,1.6E1/3.0);
                double t25824 = t25819*t25819;
                double t25825 = c*t25820;
                double t25826 = a4*a4;
                double t25827 = 1.0/c;
                double t25828 = 1.0/pow(rho_a,7.0/3.0);
                double t25829 = sqrt(t25825);
                double t25830 = t25822*t25823*t25824*t25826*2.0;
                double t25831 = exp(t25830);
                double t25832 = t25822*t25823*t25824*t25826;
                double t25833 = t25832+1.0;
                double t25834 = a5*gamma_aa*t25827*t25819*t25828;
                double t25835 = t25834+1.0;
                double t25846 = raa2*t25829;
                double t25836 = exp(-t25846);
                double t25837 = t25836-1.0;
                double t25838 = kaa2*t25837;
                double t25839 = pow(t25825,2.0/5.0);
                double t25847 = raa1*t25839;
                double t25840 = exp(-t25847);
                double t25841 = t25840-1.0;
                double t25842 = kaa1*t25841;
                double t25843 = -kaa0+t25842+t25838;
                double t25844 = 1.0/(t25843*t25843);
                double t25845 = 1.0/t25833;
                double t25848 = 1.0/pow(rho_a,4.0/3.0);
                double t25849 = c*c0*t25820*t25831*t25835*t25844*(2.0/3.0);
                double t25850 = 1.0/(t25833*t25833);
                double t25851 = sqrt(t25849);
                double t25852 = 1.0/pow(rho_a,1.1E1/3.0);
                double t25853 = 1.0/sqrt(t25825);
                double t25854 = c*kaa2*raa2*t25853*t25836*t25848*(1.0/6.0);
                double t25855 = 1.0/pow(t25825,3.0/5.0);
                double t25856 = c*kaa1*raa1*t25840*t25855*t25848*(2.0/1.5E1);
                double t25857 = t25854+t25856;
                double t25858 = 1.0/(t25843*t25843*t25843);
                double t25859 = 1.0/pow(rho_a,2.0E1/3.0);
                double t25860 = c*c0*t25820*t25831*t25850*t25835*t25844*(2.0/3.0);
                double t25861 = exp(t25860);
                double t25862 = Ei(-t25860);
                double t25863 = c*c0*t25831*t25850*t25835*t25844*t25848*(2.0/9.0);
                double t25864 = a5*c0*gamma_aa*t25831*t25850*t25852*t25844*t25819*(1.4E1/9.0);
                double t25865 = c*c0*t25820*t25831*t25850*t25835*t25857*t25858*(4.0/3.0);
                double t25866 = 1.0/(t25833*t25833*t25833);
                double t25867 = c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25844*t25859*(6.4E1/9.0);
                double t25868 = t25851*t25845*6.0;
                double t25869 = c*c0*t25820*t25831*t25850*t25835*t25844*4.0;
                double t25870 = t25868+t25869+3.0;
                double t25871 = 1.0/t25870;
                double t25872 = 1.0/sqrt(t25849);
                double t25873 = c*c;
                double t25874 = 1.0/pow(rho_a,8.0/3.0);
                double t25875 = c*c0*t25831*t25835*t25844*t25848*(2.0/9.0);
                double t25876 = a5*c0*gamma_aa*t25831*t25852*t25844*t25819*(1.4E1/9.0);
                double t25877 = c*c0*t25820*t25831*t25835*t25857*t25858*(4.0/3.0);
                double t25878 = c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25859*(6.4E1/9.0);
                double t25879 = t25875+t25876+t25877+t25878;
                double t25880 = t25826*t25826;
                double t25881 = t25822*t25822;
                double t25882 = t25824*t25824;
                double t25883 = 1.0/pow(rho_a,1.9E1/3.0);
                double t25884 = raa2*raa2;
                double t25885 = c*kaa2*t25836*t25828*t25884*(1.0/3.6E1);
                double t25886 = raa1*raa1;
                double t25887 = 1.0/pow(t25825,6.0/5.0);
                double t25888 = kaa1*t25840*t25873*t25874*t25886*t25887*(4.0/2.25E2);
                double t25889 = 1.0/pow(t25825,3.0/2.0);
                double t25890 = kaa2*raa2*t25836*t25873*t25874*t25889*(1.0/3.6E1);
                double t25891 = 1.0/pow(t25825,8.0/5.0);
                double t25892 = kaa1*raa1*t25840*t25873*t25891*t25874*(2.0/7.5E1);
                double t25902 = c*kaa2*raa2*t25853*t25836*t25828*(2.0/9.0);
                double t25903 = c*kaa1*raa1*t25840*t25828*t25855*(8.0/4.5E1);
                double t25893 = -t25902-t25903+t25890+t25892+t25885+t25888;
                double t25894 = t25857*t25857;
                double t25895 = 1.0/(t25843*t25843*t25843*t25843);
                double t25896 = 1.0/pow(rho_a,1.4E1/3.0);
                double t25897 = 1.0/pow(rho_a,1.0E1);
                double t25898 = 1.0/pow(rho_a,1.3E1);
                double t25899 = 1.0/pow(rho_a,2.3E1/3.0);
                double t25901 = c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25866*t25859*(6.4E1/9.0);
                double t25900 = -t25901+t25863+t25864+t25865+t25867;
                double t25904 = t25900*t25900;
                double t25905 = 1.0/(t25833*t25833*t25833*t25833);
                double t25906 = c*c0*t25831*t25850*t25835*t25844*t25828*(8.0/2.7E1);
                double t25907 = c*c0*t25820*t25831*t25850*t25835*t25894*t25895*4.0;
                double t25908 = a5*c0*gamma_aa*t25831*t25850*t25844*t25819*t25896*(5.6E1/9.0);
                double t25909 = c*c0*t25831*t25850*t25835*t25848*t25857*t25858*(8.0/9.0);
                double t25910 = a5*c0*gamma_aa*t25831*t25850*t25852*t25819*t25857*t25858*(5.6E1/9.0);
                double t25911 = a5*c0*gamma_aa*t25822*t25831*t25850*t25824*t25826*t25844*t25819*t25897*(8.96E2/2.7E1);
                double t25912 = c*c0*t25831*t25850*t25835*t25844*t25880*t25881*t25882*t25898*(2.048E3/2.7E1);
                double t25913 = c*c0*t25831*t25905*t25835*t25844*t25880*t25881*t25882*t25898*(1.024E3/9.0);
                double t25914 = c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25844*t25899*(4.48E2/9.0);
                double t25915 = c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25857*t25858*t25859*(2.56E2/9.0);
                double t25963 = c*c0*t25820*t25831*t25850*t25835*t25893*t25858*(4.0/3.0);
                double t25964 = a5*c0*gamma_aa*t25822*t25831*t25824*t25826*t25844*t25819*t25866*t25897*(8.96E2/2.7E1);
                double t25965 = c*c0*t25831*t25835*t25844*t25880*t25881*t25882*t25866*t25898*(4.096E3/2.7E1);
                double t25966 = c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25866*t25899*(4.48E2/9.0);
                double t25967 = c*c0*t25822*t25831*t25824*t25826*t25835*t25857*t25866*t25858*t25859*(2.56E2/9.0);
                double t25916 = t25910+t25911+t25912+t25913+t25914+t25906+t25915+t25907+t25908+t25909-t25963-t25964-t25965-t25966-t25967;
                double t25917 = c*c0*t25820*t25831*t25850*t25861*t25835*t25844*t25862*(2.0/3.0);
                double t25918 = t25917+1.0;
                double t25919 = t25845*t25872*t25879*2.0;
                double t25920 = c*c0*t25831*t25850*t25835*t25844*t25848*(8.0/9.0);
                double t25921 = a5*c0*gamma_aa*t25831*t25850*t25852*t25844*t25819*(5.6E1/9.0);
                double t25922 = c*c0*t25820*t25831*t25850*t25835*t25857*t25858*(1.6E1/3.0);
                double t25923 = c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25844*t25859*(2.56E2/9.0);
                double t25985 = t25822*t25850*t25824*t25851*t25826*t25883*(6.4E1/3.0);
                double t25986 = c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25866*t25859*(2.56E2/9.0);
                double t25924 = t25920+t25921+t25922+t25923+t25919-t25985-t25986;
                double t25925 = 1.0/(t25870*t25870);
                double t25926 = t25851*t25845*4.0;
                double t25927 = c*c0*t25820*t25831*t25850*t25835*t25844*(8.0/3.0);
                double t25928 = t25926+t25927+6.0;
                double t25929 = t25845*t25872*t25879*3.0;
                double t25930 = c*c0*t25831*t25850*t25835*t25844*t25848*(4.0/3.0);
                double t25931 = a5*c0*gamma_aa*t25831*t25850*t25852*t25844*t25819*(2.8E1/3.0);
                double t25932 = c*c0*t25820*t25831*t25850*t25835*t25857*t25858*8.0;
                double t25933 = c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25844*t25859*(1.28E2/3.0);
                double t25954 = t25822*t25850*t25824*t25851*t25826*t25883*3.2E1;
                double t25955 = c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25866*t25859*(1.28E2/3.0);
                double t25934 = t25930+t25931+t25932+t25933-t25954-t25955+t25929;
                double t25935 = c*c0*t25831*t25850*t25861*t25835*t25844*t25862*t25848*(2.0/9.0);
                double t25936 = c*c0*t25820*t25831*t25850*t25861*t25835*t25862*t25857*t25858*(4.0/3.0);
                double t25937 = c*c0*t25900*t25820*t25831*t25850*t25861*t25835*t25844*t25862*(2.0/3.0);
                double t25938 = a5*c0*gamma_aa*t25831*t25850*t25852*t25861*t25844*t25862*t25819*(1.4E1/9.0);
                double t25939 = c*c0*t25822*t25831*t25850*t25824*t25861*t25826*t25835*t25844*t25862*t25859*(6.4E1/9.0);
                double t25940 = c*c0*t25831*t25835*t25844*t25828*(8.0/2.7E1);
                double t25941 = a5*c0*gamma_aa*t25831*t25844*t25819*t25896*(5.6E1/9.0);
                double t25942 = c*c0*t25831*t25835*t25848*t25857*t25858*(8.0/9.0);
                double t25943 = c*c0*t25820*t25831*t25835*t25894*t25895*4.0;
                double t25944 = a5*c0*gamma_aa*t25822*t25831*t25824*t25826*t25844*t25819*t25897*(8.96E2/2.7E1);
                double t25945 = a5*c0*gamma_aa*t25831*t25852*t25819*t25857*t25858*(5.6E1/9.0);
                double t25946 = c*c0*t25831*t25835*t25844*t25880*t25881*t25882*t25898*(2.048E3/2.7E1);
                double t25947 = c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25899*(4.48E2/9.0);
                double t25948 = c*c0*t25822*t25831*t25824*t25826*t25835*t25857*t25858*t25859*(2.56E2/9.0);
                double t25949 = t25940+t25941+t25942+t25943+t25944+t25945+t25946+t25947+t25948-c*c0*t25820*t25831*t25835*t25893*t25858*(4.0/3.0);
                double t25950 = t25879*t25879;
                double t25951 = 1.0/pow(t25849,3.0/2.0);
                double t25952 = 1.0/pow(rho_a,2.2E1/3.0);
                double t25953 = 1.0/pow(rho_a,3.8E1/3.0);
                double t25956 = 1.0/pow(rho_a,2.0/3.0);
                double t25957 = 1.0/t25835;
                double t25958 = 1.0/c0;
                double t25959 = exp(-t25830);
                double t25960 = t25833*t25833;
                double t25961 = t25843*t25843;
                double t25962 = pow(rho_a,1.0/3.0);
                double t25968 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t25987 = c*c0*t25822*t25831*t25824*t25861*t25826*t25835*t25844*t25862*t25866*t25859*(6.4E1/9.0);
                double t25969 = -t25901+t25863+t25935+t25864+t25936+t25865+t25937+t25938+t25867+t25939-t25987;
                double t25970 = t25821*t25822*t25823*t25824;
                double t25971 = pow(t25825,4.0/5.0);
                double t25989 = rab1*t25971;
                double t25972 = exp(-t25989);
                double t25973 = t25972-1.0;
                double t25990 = kab1*t25973;
                double t25974 = kab0-t25990;
                double t25975 = a3*gamma_aa*t25827*t25819*t25828;
                double t25976 = t25975+1.0;
                double t25977 = 1.0/sqrt(t25976);
                double t25978 = a1*gamma_aa*t25819*t25874;
                double t25979 = t25970+t25978+1.0;
                double t25980 = k1*t25829;
                double t25981 = c*k2*t25820;
                double t25982 = t25980+t25981;
                double t25983 = 1.0/(t25982*t25982);
                double t25992 = t25873*t25956*t25983;
                double t25984 = exp(-t25992);
                double t25988 = exp(-t25970);
                double t25991 = t25974*t25977*t25979*t25988*1.0E5;
                double t25993 = t25924*t25871*t25918;
                double t25994 = t25900*t25861*t25862;
                double t25995 = t25871*t25928*t25969;
                double t25996 = t25900*t25960*t25961*t25827*t25962*t25957*t25958*t25959*(3.0/2.0);
                double t26134 = t25925*t25934*t25918*t25928;
                double t25997 = t25993+t25994+t25995+t25996-t26134;
                double t25998 = 1.0/pow(rho_a,1.0E1/3.0);
                double t25999 = c*c0*t25820*(2.0/3.0);
                double t26000 = 1.0/(t25982*t25982*t25982);
                double t26001 = c*k2*t25848*(1.0/3.0);
                double t26002 = c*k1*t25853*t25848*(1.0/6.0);
                double t26003 = t26001+t26002;
                double t26004 = 1.0/pow(rho_a,5.0/3.0);
                double t26005 = t25991-t25999;
                double t26006 = heaviside(t26005);
                double t26007 = t25861*t25862;
                double t26008 = t25871*t25918*t25928;
                double t26009 = t26007+t26008;
                double t26010 = t25873*t25983*t26004*(2.0/3.0);
                double t26024 = t25873*t25956*t26000*t26003*2.0;
                double t26011 = t26010-t26024;
                double t26012 = -t25991+t25999;
                double t26013 = c*c0*t25848*(2.0/9.0);
                double t26014 = t25821*t25822*t25824*t25883*(1.6E1/3.0);
                double t26015 = a1*gamma_aa*t25852*t25819*(8.0/3.0);
                double t26016 = t26014+t26015;
                double t26017 = t25821*t25822*t25824*t25883*t25974*t25977*t25979*t25988*(1.6E6/3.0);
                double t26018 = 1.0/pow(t25825,1.0/5.0);
                double t26019 = 1.0/pow(t25976,3.0/2.0);
                double t26020 = a3*gamma_aa*t25827*t25819*t25974*t25979*t25988*t25998*t26019*(3.5E5/3.0);
                double t26025 = t25974*t25977*t25988*t26016*1.0E5;
                double t26026 = c*kab1*rab1*t25972*t25848*t25977*t25979*t25988*t26018*(8.0E4/3.0);
                double t26021 = t26020+t26013-t26025+t26017-t26026;
                double t26022 = dirac(t26012);
                double t26023 = 1.0/(c*c);
                double t26027 = t25821*t25822*t25823*t25824*2.0;
                double t26028 = exp(t26027);
                double t26029 = 1.0/(t25974*t25974);
                double t26030 = 1.0/(t25979*t25979);
                double t26031 = c*c0*t25820*t25976*t26030*t26028*t26029*(2.0/3.0);
                double t26032 = sqrt(t26031);
                double t26033 = 1.0/rho_a;
                double t26034 = c*c0*t25848*t25976*t26030*t26028*t26029*(2.0/9.0);
                double t26035 = 1.0/(t25979*t25979*t25979);
                double t26036 = a3*c0*gamma_aa*t25852*t25819*t26030*t26028*t26029*(1.4E1/9.0);
                double t26037 = c*c0*t25821*t25822*t25824*t25859*t25976*t26030*t26028*t26029*(6.4E1/9.0);
                double t26038 = 1.0/(t25974*t25974*t25974);
                double t26040 = c*c0*t25820*t25976*t26016*t26035*t26028*t26029*(4.0/3.0);
                double t26041 = c0*kab1*rab1*t25873*t25972*t25976*t26030*t26004*t26018*t26028*t26038*(1.6E1/4.5E1);
                double t26039 = -t26040-t26041+t26034+t26036+t26037;
                double t26042 = t25821*t25822*t25824*t25952*(3.04E2/9.0);
                double t26043 = a1*gamma_aa*t25819*t25896*(8.8E1/9.0);
                double t26044 = t26042+t26043;
                double t26045 = exp(t26031);
                double t26046 = Ei(-t26031);
                double t26047 = c*c0*t25828*t25976*t26030*t26028*t26029*(8.0/2.7E1);
                double t26048 = t26016*t26016;
                double t26049 = 1.0/(t25979*t25979*t25979*t25979);
                double t26050 = c*c0*t25820*t25976*t26028*t26029*t26048*t26049*4.0;
                double t26051 = a3*c0*gamma_aa*t25819*t25896*t26030*t26028*t26029*(5.6E1/9.0);
                double t26052 = a3*c0*gamma_aa*t25821*t25822*t25824*t25819*t25897*t26030*t26028*t26029*(8.96E2/2.7E1);
                double t26053 = t25821*t25821;
                double t26054 = rab1*rab1;
                double t26055 = 1.0/(rho_a*rho_a*rho_a);
                double t26056 = 1.0/pow(t25825,2.0/5.0);
                double t26057 = t26039*t26039;
                double t26058 = c*c0*t25881*t25882*t25976*t25898*t26030*t26053*t26028*t26029*(2.048E3/2.7E1);
                double t26059 = c*c0*t25821*t25822*t25824*t25976*t25899*t26030*t26028*t26029*(4.48E2/9.0);
                double t26060 = c*c0*kab1*t25873*t25972*t25976*t26030*t26054*t26028*t26055*t26038*t26056*(6.4E1/6.75E2);
                double t26061 = kab1*kab1;
                double t26068 = rab1*t25971*2.0;
                double t26062 = exp(-t26068);
                double t26063 = 1.0/(t25974*t25974*t25974*t25974);
                double t26064 = c*c0*t25873*t25976*t26030*t26061*t26062*t26054*t26063*t26028*t26055*t26056*(6.4E1/2.25E2);
                double t26065 = c*c0*kab1*rab1*t25873*t25972*t25976*t25887*t26030*t26028*t26055*t26038*(1.6E1/6.75E2);
                double t26066 = c0*kab1*rab1*t25873*t25972*t25976*t26004*t26016*t26035*t26018*t26028*t26038*(6.4E1/4.5E1);
                double t26067 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t26069 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t26070 = t26032*6.0;
                double t26071 = c*c0*t25820*t25976*t26030*t26028*t26029*4.0;
                double t26072 = t26070+t26071+3.0;
                double t26073 = 1.0/t26072;
                double t26075 = c*c0*t25848*t25976*t26016*t26035*t26028*t26029*(8.0/9.0);
                double t26076 = c*c0*t25820*t25976*t26035*t26044*t26028*t26029*(4.0/3.0);
                double t26077 = a3*c0*gamma_aa*t25852*t25819*t26016*t26035*t26028*t26029*(5.6E1/9.0);
                double t26078 = c*c0*t25821*t25822*t25824*t25859*t25976*t26016*t26035*t26028*t26029*(2.56E2/9.0);
                double t26079 = c0*kab1*rab1*t25873*t25972*t25874*t25976*t26030*t26018*t26028*t26038*(3.2E1/4.5E1);
                double t26080 = a3*c*c0*gamma_aa*kab1*rab1*t25819*t25972*t26030*t26018*t26028*t26038*t26067*(2.24E2/1.35E2);
                double t26081 = c0*kab1*rab1*t25821*t25822*t25824*t25873*t25972*t25976*t26030*t26018*t26028*t26038*t26069*(1.024E3/1.35E2);
                double t26074 = t26050+t26051+t26060+t26052-t26080-t26081+t26064+t26047+t26065+t26066-t26075+t26058-t26076+t26059-t26077-t26078-t26079;
                double t26082 = 1.0/sqrt(t26031);
                double t26083 = t26032*4.0;
                double t26084 = c*c0*t25820*t25976*t26030*t26028*t26029*(8.0/3.0);
                double t26085 = t26083+t26084+6.0;
                double t26086 = c*c0*t25848*t25976*t26030*t26045*t26028*t26046*t26029*(2.0/9.0);
                double t26087 = a3*c0*gamma_aa*t25852*t25819*t26030*t26045*t26028*t26046*t26029*(1.4E1/9.0);
                double t26088 = c*c0*t25820*t25976*t26030*t26045*t26028*t26046*t26029*t26039*(2.0/3.0);
                double t26089 = c*c0*t25821*t25822*t25824*t25859*t25976*t26030*t26045*t26028*t26046*t26029*(6.4E1/9.0);
                double t26111 = c*c0*t25820*t25976*t26016*t26035*t26045*t26028*t26046*t26029*(4.0/3.0);
                double t26112 = c0*kab1*rab1*t25873*t25972*t25976*t26030*t26004*t26018*t26045*t26028*t26046*t26038*(1.6E1/4.5E1);
                double t26090 = -t26111-t26040-t26112-t26041+t26034+t26036+t26037+t26086+t26087+t26088+t26089;
                double t26091 = c*c0*t25820*t25976*t26030*t26045*t26028*t26046*t26029*(2.0/3.0);
                double t26092 = t26091+1.0;
                double t26093 = 1.0/(t26072*t26072);
                double t26094 = 1.0/pow(t26031,3.0/2.0);
                double t26095 = t26082*t26039*3.0;
                double t26096 = c*c0*t25848*t25976*t26030*t26028*t26029*(4.0/3.0);
                double t26097 = a3*c0*gamma_aa*t25852*t25819*t26030*t26028*t26029*(2.8E1/3.0);
                double t26098 = c*c0*t25821*t25822*t25824*t25859*t25976*t26030*t26028*t26029*(1.28E2/3.0);
                double t26100 = c*c0*t25820*t25976*t26016*t26035*t26028*t26029*8.0;
                double t26101 = c0*kab1*rab1*t25873*t25972*t25976*t26030*t26004*t26018*t26028*t26038*(3.2E1/1.5E1);
                double t26099 = -t26100-t26101+t26095+t26096+t26097+t26098;
                double t26102 = t26082*t26039*2.0;
                double t26103 = c*c0*t25848*t25976*t26030*t26028*t26029*(8.0/9.0);
                double t26104 = a3*c0*gamma_aa*t25852*t25819*t26030*t26028*t26029*(5.6E1/9.0);
                double t26105 = c*c0*t25821*t25822*t25824*t25859*t25976*t26030*t26028*t26029*(2.56E2/9.0);
                double t26113 = c*c0*t25820*t25976*t26016*t26035*t26028*t26029*(1.6E1/3.0);
                double t26114 = c0*kab1*rab1*t25873*t25972*t25976*t26030*t26004*t26018*t26028*t26038*(6.4E1/4.5E1);
                double t26106 = t26102+t26103+t26104-t26113+t26105-t26114;
                double t26107 = 1.0/t25976;
                double t26108 = exp(-t26027);
                double t26109 = t25974*t25974;
                double t26110 = t25979*t25979;
                double t26115 = dirac(t26012,1.0);
                double t26116 = t26021*t26021;
                double t26117 = t26045*t26046;
                double t26118 = t26073*t26092*t26085;
                double t26119 = t26117+t26118;
                double t26120 = c*c0*t25828*(8.0/2.7E1);
                double t26121 = t25821*t25822*t25824*t25952*t25974*t25977*t25979*t25988*(3.04E7/9.0);
                double t26122 = t25821*t25822*t25824*t25883*t25974*t25977*t25988*t26016*(3.2E6/3.0);
                double t26123 = kab1*t25873*t25972*t25874*t25977*t25979*t25988*t26054*t26056*(6.4E4/9.0);
                double t26124 = a3*a3;
                double t26125 = 1.0/pow(t25976,5.0/2.0);
                double t26126 = 1.0/pow(rho_a,1.3E1/3.0);
                double t26127 = a3*gamma_aa*t25827*t25819*t25974*t25979*t25988*t26126*t26019*(3.5E6/9.0);
                double t26128 = a3*gamma_aa*t25827*t25819*t25974*t25988*t25998*t26016*t26019*(7.0E5/3.0);
                double t26129 = kab1*rab1*t25873*t25972*t25874*t25887*t25977*t25979*t25988*(1.6E4/9.0);
                double t26130 = 1.0/pow(rho_a,2.9E1/3.0);
                double t26131 = a3*gamma_aa*kab1*rab1*t25819*t25972*t25896*t25979*t25988*t26018*t26019*(5.6E5/9.0);
                double t26132 = c*kab1*rab1*t25821*t25822*t25824*t25972*t25977*t25979*t25988*t25899*t26018*(2.56E6/9.0);
                double t26133 = t26120+t26121+t26122+t26131+t26123+t26132+t26127+t26128+t26129-t25974*t25977*t25988*t26044*1.0E5-t25881*t25953*t25882*t25974*t25977*t25979*t25988*t26053*(2.56E7/9.0)-c*kab1*rab1*t25828*t25972*t25977*t25979*t25988*t26018*(3.2E5/9.0)-c*kab1*rab1*t25972*t25848*t25977*t25988*t26016*t26018*(1.6E5/3.0)-t25822*t25824*t25974*t25859*t25979*t25988*t26023*t26124*t26125*(1.225E6/3.0)-a3*gamma_aa*t25821*t25822*t25824*t25827*t25819*t25974*t25979*t25988*t26130*t26019*(1.12E7/9.0);
                v_rho_a_rho_a[Q] += scale * -rho_b*(c0*t26006*(t26073*t26085*(t26050+t26051+t26060+t26052-t26080-t26081+t26064+t26047+t26065+t26057+t26066-t26075+t26058-t26076+t26059-t26077-t26078-t26079+t26033*t26039*(1.0/3.0)-(t26016*t26039*2.0)/t25979+t25821*t25822*t25824*t25883*t26039*(3.2E1/3.0)+a3*gamma_aa*t25827*t25819*t25998*t26107*t26039*(7.0/3.0)-(c*kab1*rab1*t25972*t25848*t26018*t26039*(8.0/1.5E1))/t25974+c*c0*t25828*t25976*t26030*t26045*t26028*t26046*t26029*(8.0/2.7E1)+a3*c0*gamma_aa*t25819*t25896*t26030*t26045*t26028*t26046*t26029*(5.6E1/9.0)+c*c0*t25820*t25976*t26030*t26045*t26028*t26046*t26029*t26074*(2.0/3.0)+c*c0*t25820*t25976*t26030*t26045*t26028*t26046*t26029*t26057*(2.0/3.0)-c*c0*t25820*t25976*t26035*t26044*t26045*t26028*t26046*t26029*(4.0/3.0)+c*c0*t25820*t25976*t26045*t26028*t26046*t26029*t26048*t26049*4.0+c*c0*t25848*t25976*t26030*t26045*t26028*t26046*t26029*t26039*(4.0/9.0)-c*c0*t25848*t25976*t26016*t26035*t26045*t26028*t26046*t26029*(8.0/9.0)+a3*c0*gamma_aa*t25852*t25819*t26030*t26045*t26028*t26046*t26029*t26039*(2.8E1/9.0)-a3*c0*gamma_aa*t25852*t25819*t26016*t26035*t26045*t26028*t26046*t26029*(5.6E1/9.0)-c*c0*t25820*t25976*t26016*t26035*t26045*t26028*t26046*t26029*t26039*(8.0/3.0)+c*c0*t25821*t25822*t25824*t25976*t25899*t26030*t26045*t26028*t26046*t26029*(4.48E2/9.0)+c*c0*t25881*t25882*t25976*t25898*t26030*t26053*t26045*t26028*t26046*t26029*(2.048E3/2.7E1)+a3*c0*gamma_aa*t25821*t25822*t25824*t25819*t25897*t26030*t26045*t26028*t26046*t26029*(8.96E2/2.7E1)+c*c0*t25821*t25822*t25824*t25859*t25976*t26030*t26045*t26028*t26046*t26029*t26039*(1.28E2/9.0)-c*c0*t25821*t25822*t25824*t25859*t25976*t26016*t26035*t26045*t26028*t26046*t26029*(2.56E2/9.0)-c0*kab1*rab1*t25873*t25972*t25874*t25976*t26030*t26018*t26045*t26028*t26046*t26038*(3.2E1/4.5E1)+c*c0*kab1*rab1*t25873*t25972*t25976*t25887*t26030*t26045*t26028*t26046*t26055*t26038*(1.6E1/6.75E2)+c*c0*kab1*t25873*t25972*t25976*t26030*t26045*t26054*t26028*t26046*t26055*t26038*t26056*(6.4E1/6.75E2)+c*c0*t25873*t25976*t26030*t26061*t26062*t26045*t26054*t26063*t26028*t26046*t26055*t26056*(6.4E1/2.25E2)-c0*kab1*rab1*t25873*t25972*t25976*t26030*t26004*t26018*t26045*t26028*t26046*t26038*t26039*(3.2E1/4.5E1)+c0*kab1*rab1*t25873*t25972*t25976*t26004*t26016*t26035*t26018*t26045*t26028*t26046*t26038*(6.4E1/4.5E1)-a3*c*c0*gamma_aa*kab1*rab1*t25819*t25972*t26030*t26018*t26045*t26028*t26046*t26038*t26067*(2.24E2/1.35E2)-c0*kab1*rab1*t25821*t25822*t25824*t25873*t25972*t25976*t26030*t26018*t26045*t26028*t26046*t26038*t26069*(1.024E3/1.35E2))+t26106*t26090*t26073*2.0+t26045*t26046*t26074+t26045*t26046*t26057+t26073*t26092*(t26082*t26074*2.0-t26057*t26094+c*c0*t25828*t25976*t26030*t26028*t26029*(3.2E1/2.7E1)+a3*c0*gamma_aa*t25819*t25896*t26030*t26028*t26029*(2.24E2/9.0)-c*c0*t25820*t25976*t26035*t26044*t26028*t26029*(1.6E1/3.0)+c*c0*t25820*t25976*t26028*t26029*t26048*t26049*1.6E1-c*c0*t25848*t25976*t26016*t26035*t26028*t26029*(3.2E1/9.0)-a3*c0*gamma_aa*t25852*t25819*t26016*t26035*t26028*t26029*(2.24E2/9.0)+c*c0*t25821*t25822*t25824*t25976*t25899*t26030*t26028*t26029*(1.792E3/9.0)+c*c0*t25881*t25882*t25976*t25898*t26030*t26053*t26028*t26029*(8.192E3/2.7E1)+a3*c0*gamma_aa*t25821*t25822*t25824*t25819*t25897*t26030*t26028*t26029*(3.584E3/2.7E1)-c*c0*t25821*t25822*t25824*t25859*t25976*t26016*t26035*t26028*t26029*(1.024E3/9.0)-c0*kab1*rab1*t25873*t25972*t25874*t25976*t26030*t26018*t26028*t26038*(1.28E2/4.5E1)+c*c0*kab1*rab1*t25873*t25972*t25976*t25887*t26030*t26028*t26055*t26038*(6.4E1/6.75E2)+c*c0*kab1*t25873*t25972*t25976*t26030*t26054*t26028*t26055*t26038*t26056*(2.56E2/6.75E2)+c*c0*t25873*t25976*t26030*t26061*t26062*t26054*t26063*t26028*t26055*t26056*(2.56E2/2.25E2)+c0*kab1*rab1*t25873*t25972*t25976*t26004*t26016*t26035*t26018*t26028*t26038*(2.56E2/4.5E1)-a3*c*c0*gamma_aa*kab1*rab1*t25819*t25972*t26030*t26018*t26028*t26038*t26067*(8.96E2/1.35E2)-c0*kab1*rab1*t25821*t25822*t25824*t25873*t25972*t25976*t26030*t26018*t26028*t26038*t26069*(4.096E3/1.35E2))-t26106*t26092*t26093*t26099*2.0-t26090*t26093*t26085*t26099*2.0-t26092*t26093*t26085*(t26082*t26074*3.0-t26057*t26094*(3.0/2.0)+c*c0*t25828*t25976*t26030*t26028*t26029*(1.6E1/9.0)+a3*c0*gamma_aa*t25819*t25896*t26030*t26028*t26029*(1.12E2/3.0)-c*c0*t25820*t25976*t26035*t26044*t26028*t26029*8.0+c*c0*t25820*t25976*t26028*t26029*t26048*t26049*2.4E1-c*c0*t25848*t25976*t26016*t26035*t26028*t26029*(1.6E1/3.0)-a3*c0*gamma_aa*t25852*t25819*t26016*t26035*t26028*t26029*(1.12E2/3.0)+c*c0*t25821*t25822*t25824*t25976*t25899*t26030*t26028*t26029*(8.96E2/3.0)+c*c0*t25881*t25882*t25976*t25898*t26030*t26053*t26028*t26029*(4.096E3/9.0)+a3*c0*gamma_aa*t25821*t25822*t25824*t25819*t25897*t26030*t26028*t26029*(1.792E3/9.0)-c*c0*t25821*t25822*t25824*t25859*t25976*t26016*t26035*t26028*t26029*(5.12E2/3.0)-c0*kab1*rab1*t25873*t25972*t25874*t25976*t26030*t26018*t26028*t26038*(6.4E1/1.5E1)+c*c0*kab1*rab1*t25873*t25972*t25976*t25887*t26030*t26028*t26055*t26038*(3.2E1/2.25E2)+c*c0*kab1*t25873*t25972*t25976*t26030*t26054*t26028*t26055*t26038*t26056*(1.28E2/2.25E2)+c*c0*t25873*t25976*t26030*t26061*t26062*t26054*t26063*t26028*t26055*t26056*(1.28E2/7.5E1)+c0*kab1*rab1*t25873*t25972*t25976*t26004*t26016*t26035*t26018*t26028*t26038*(1.28E2/1.5E1)-a3*c*c0*gamma_aa*kab1*rab1*t25819*t25972*t26030*t26018*t26028*t26038*t26067*(4.48E2/4.5E1)-c0*kab1*rab1*t25821*t25822*t25824*t25873*t25972*t25976*t26030*t26018*t26028*t26038*t26069*(2.048E3/4.5E1))+1.0/(t26072*t26072*t26072)*t26092*t26085*(t26099*t26099)*2.0+t25827*t25962*t25958*t26110*t26107*t26108*t26109*t26074*(3.0/2.0)+t25827*t25962*t25958*t26110*t26107*t26108*t26109*t26057*(3.0/2.0)-t25827*t25956*t25958*t26110*t26107*t26108*t26109*t26039*(1.0/2.0)+t25827*t25962*t25958*t25979*t26016*t26107*t26108*t26109*t26039*3.0+kab1*rab1*t25972*t25974*t25958*t26110*t26033*t26107*t26018*t26108*t26039*(4.0/5.0)-t25821*t25822*t25824*t25827*t25958*t25968*t26110*t26107*t26108*t26109*t26039*1.6E1-a3*gamma_aa*t25819*t25958*1.0/(t25976*t25976)*t26110*t26023*t26108*t26055*t26109*t26039*(7.0/2.0))*(-1.0/2.0)+c0*t26022*t26133*t26119*(1.0/2.0)+c0*t26115*t26116*t26119*(1.0/2.0)+c0*t26021*t26022*(t26106*t26073*t26092+t26045*t26046*t26039+t26090*t26073*t26085-t26092*t26093*t26085*t26099+t25827*t25962*t25958*t26110*t26107*t26108*t26109*t26039*(3.0/2.0)))-rho_a*(c0*t25984*t26006*(t25871*t25918*(-t25950*t25951*t25845+t25845*t25872*t25949*2.0-t25822*t25850*t25824*t25851*t25826*t25952*(1.216E3/9.0)+t25851*t25880*t25881*t25953*t25882*t25866*(2.048E3/9.0)+c*c0*t25831*t25850*t25835*t25844*t25828*(3.2E1/2.7E1)-t25822*t25850*t25824*t25826*t25872*t25883*t25879*(6.4E1/3.0)+a5*c0*gamma_aa*t25831*t25850*t25844*t25819*t25896*(2.24E2/9.0)-c*c0*t25820*t25831*t25850*t25835*t25893*t25858*(1.6E1/3.0)+c*c0*t25820*t25831*t25850*t25835*t25894*t25895*1.6E1+c*c0*t25831*t25850*t25835*t25848*t25857*t25858*(3.2E1/9.0)+a5*c0*gamma_aa*t25831*t25850*t25852*t25819*t25857*t25858*(2.24E2/9.0)+c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25844*t25899*(1.792E3/9.0)-c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25866*t25899*(1.792E3/9.0)+c*c0*t25831*t25850*t25835*t25844*t25880*t25881*t25882*t25898*(8.192E3/2.7E1)+c*c0*t25831*t25905*t25835*t25844*t25880*t25881*t25882*t25898*(4.096E3/9.0)-c*c0*t25831*t25835*t25844*t25880*t25881*t25882*t25866*t25898*(1.6384E4/2.7E1)+a5*c0*gamma_aa*t25822*t25831*t25850*t25824*t25826*t25844*t25819*t25897*(3.584E3/2.7E1)-a5*c0*gamma_aa*t25822*t25831*t25824*t25826*t25844*t25819*t25866*t25897*(3.584E3/2.7E1)+c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25857*t25858*t25859*(1.024E3/9.0)-c*c0*t25822*t25831*t25824*t25826*t25835*t25857*t25866*t25858*t25859*(1.024E3/9.0))+t25904*t25861*t25862+t25861*t25862*t25916+t25924*t25871*t25969*2.0+t25871*t25928*(t25910+t25911+t25912+t25904+t25913+t25914+t25906+t25915+t25907+t25908+t25909-t25963-t25964-t25965-t25966-t25967+t25900*t26033*(1.0/3.0)+(t25900*t25857*2.0)/t25843+t25900*t25822*t25824*t25826*t25883*(3.2E1/3.0)-t25900*t25822*t25824*t25826*t25845*t25883*(3.2E1/3.0)+a5*gamma_aa*t25900*t25827*t25819*t25957*t25998*(7.0/3.0)+c*c0*t25831*t25850*t25861*t25835*t25844*t25862*t25828*(8.0/2.7E1)+a5*c0*gamma_aa*t25831*t25850*t25861*t25844*t25862*t25819*t25896*(5.6E1/9.0)+c*c0*t25820*t25831*t25850*t25904*t25861*t25835*t25844*t25862*(2.0/3.0)+c*c0*t25820*t25831*t25850*t25861*t25835*t25844*t25862*t25916*(2.0/3.0)+c*c0*t25900*t25831*t25850*t25861*t25835*t25844*t25862*t25848*(4.0/9.0)-c*c0*t25820*t25831*t25850*t25861*t25835*t25862*t25893*t25858*(4.0/3.0)+c*c0*t25820*t25831*t25850*t25861*t25835*t25862*t25894*t25895*4.0+c*c0*t25831*t25850*t25861*t25835*t25862*t25848*t25857*t25858*(8.0/9.0)+a5*c0*gamma_aa*t25900*t25831*t25850*t25852*t25861*t25844*t25862*t25819*(2.8E1/9.0)+a5*c0*gamma_aa*t25831*t25850*t25852*t25861*t25862*t25819*t25857*t25858*(5.6E1/9.0)+c*c0*t25900*t25820*t25831*t25850*t25861*t25835*t25862*t25857*t25858*(8.0/3.0)+c*c0*t25822*t25831*t25850*t25824*t25861*t25826*t25835*t25844*t25862*t25899*(4.48E2/9.0)-c*c0*t25822*t25831*t25824*t25861*t25826*t25835*t25844*t25862*t25866*t25899*(4.48E2/9.0)+c*c0*t25831*t25850*t25861*t25835*t25844*t25862*t25880*t25881*t25882*t25898*(2.048E3/2.7E1)+c*c0*t25831*t25905*t25861*t25835*t25844*t25862*t25880*t25881*t25882*t25898*(1.024E3/9.0)-c*c0*t25831*t25861*t25835*t25844*t25862*t25880*t25881*t25882*t25866*t25898*(4.096E3/2.7E1)+a5*c0*gamma_aa*t25822*t25831*t25850*t25824*t25861*t25826*t25844*t25862*t25819*t25897*(8.96E2/2.7E1)-a5*c0*gamma_aa*t25822*t25831*t25824*t25861*t25826*t25844*t25862*t25819*t25866*t25897*(8.96E2/2.7E1)+c*c0*t25900*t25822*t25831*t25850*t25824*t25861*t25826*t25835*t25844*t25862*t25859*(1.28E2/9.0)-c*c0*t25900*t25822*t25831*t25824*t25861*t25826*t25835*t25844*t25862*t25866*t25859*(1.28E2/9.0)+c*c0*t25822*t25831*t25850*t25824*t25861*t25826*t25835*t25862*t25857*t25858*t25859*(2.56E2/9.0)-c*c0*t25822*t25831*t25824*t25861*t25826*t25835*t25862*t25857*t25866*t25858*t25859*(2.56E2/9.0))-t25925*t25918*t25928*(t25950*t25951*t25845*(-3.0/2.0)+t25845*t25872*t25949*3.0-t25822*t25850*t25824*t25851*t25826*t25952*(6.08E2/3.0)+t25851*t25880*t25881*t25953*t25882*t25866*(1.024E3/3.0)+c*c0*t25831*t25850*t25835*t25844*t25828*(1.6E1/9.0)-t25822*t25850*t25824*t25826*t25872*t25883*t25879*3.2E1+a5*c0*gamma_aa*t25831*t25850*t25844*t25819*t25896*(1.12E2/3.0)-c*c0*t25820*t25831*t25850*t25835*t25893*t25858*8.0+c*c0*t25820*t25831*t25850*t25835*t25894*t25895*2.4E1+c*c0*t25831*t25850*t25835*t25848*t25857*t25858*(1.6E1/3.0)+a5*c0*gamma_aa*t25831*t25850*t25852*t25819*t25857*t25858*(1.12E2/3.0)+c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25844*t25899*(8.96E2/3.0)-c*c0*t25822*t25831*t25824*t25826*t25835*t25844*t25866*t25899*(8.96E2/3.0)+c*c0*t25831*t25850*t25835*t25844*t25880*t25881*t25882*t25898*(4.096E3/9.0)+c*c0*t25831*t25905*t25835*t25844*t25880*t25881*t25882*t25898*(2.048E3/3.0)-c*c0*t25831*t25835*t25844*t25880*t25881*t25882*t25866*t25898*(8.192E3/9.0)+a5*c0*gamma_aa*t25822*t25831*t25850*t25824*t25826*t25844*t25819*t25897*(1.792E3/9.0)-a5*c0*gamma_aa*t25822*t25831*t25824*t25826*t25844*t25819*t25866*t25897*(1.792E3/9.0)+c*c0*t25822*t25831*t25850*t25824*t25826*t25835*t25857*t25858*t25859*(5.12E2/3.0)-c*c0*t25822*t25831*t25824*t25826*t25835*t25857*t25866*t25858*t25859*(5.12E2/3.0))-t25924*t25925*t25934*t25918*2.0-t25925*t25934*t25928*t25969*2.0+1.0/(t25870*t25870*t25870)*(t25934*t25934)*t25918*t25928*2.0-t25900*t25960*t25961*t25827*t25956*t25957*t25958*t25959*(1.0/2.0)+t25904*t25960*t25961*t25827*t25962*t25957*t25958*t25959*(3.0/2.0)+t25960*t25916*t25961*t25827*t25962*t25957*t25958*t25959*(3.0/2.0)-t25900*t25843*t25960*t25827*t25962*t25857*t25957*t25958*t25959*3.0+t25900*t25822*t25824*t25833*t25826*t25961*t25827*t25957*t25958*t25959*t25968*1.6E1-t25900*t25822*t25824*t25960*t25826*t25961*t25827*t25957*t25958*t25959*t25968*1.6E1-a5*gamma_aa*t25900*t25960*1.0/(t25835*t25835)*t25961*t25819*t25958*t25959*t26023*t26055*(7.0/2.0))*(-1.0/2.0)+c0*t25984*t26006*t26009*(t25873*t25874*t25983*(1.0E1/9.0)-t25873*t26000*t26003*t26004*(8.0/3.0)+t25873*1.0/(t25982*t25982*t25982*t25982)*t25956*(t26003*t26003)*6.0-t25873*t25956*t26000*(c*k2*t25828*(4.0/9.0)+c*k1*t25853*t25828*(2.0/9.0)-k1*t25873*t25874*t25889*(1.0/3.6E1))*2.0)*(1.0/2.0)+c0*t25984*t25997*t26021*t26022+c0*t25984*t25997*t26011*t26006+c0*t25984*t26022*t26133*t26009*(1.0/2.0)+c0*t25984*t26115*t26116*t26009*(1.0/2.0)-c0*t25984*(t26011*t26011)*t26006*t26009*(1.0/2.0)-c0*t25984*t26011*t26021*t26022*t26009)-c0*t25984*t25997*t26006+c0*t25984*t26021*t26022*t26009+c0*t25984*t26011*t26006*t26009;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t26136 = tspi_m13*tspi_m13;
                double t26137 = 1.0/pow(rho_a,1.0/3.0);
                double t26138 = a2*a2;
                double t26139 = gamma_aa*gamma_aa;
                double t26140 = 1.0/pow(rho_a,1.6E1/3.0);
                double t26141 = t26136*t26136;
                double t26142 = c*t26137;
                double t26143 = pow(t26142,4.0/5.0);
                double t26157 = rab1*t26143;
                double t26144 = exp(-t26157);
                double t26145 = t26144-1.0;
                double t26158 = kab1*t26145;
                double t26146 = kab0-t26158;
                double t26147 = 1.0/c;
                double t26148 = 1.0/pow(rho_a,7.0/3.0);
                double t26149 = a3*gamma_aa*t26136*t26147*t26148;
                double t26150 = t26149+1.0;
                double t26151 = t26140*t26141*t26138*t26139;
                double t26152 = 1.0/pow(rho_a,8.0/3.0);
                double t26153 = a1*gamma_aa*t26152*t26136;
                double t26154 = t26151+t26153+1.0;
                double t26155 = t26140*t26141*t26138*t26139*2.0;
                double t26156 = exp(t26155);
                double t26159 = 1.0/(t26146*t26146);
                double t26160 = 1.0/(t26154*t26154);
                double t26161 = c*c0*t26150*t26160*t26137*t26156*t26159*(2.0/3.0);
                double t26162 = sqrt(t26161);
                double t26163 = 1.0/pow(rho_a,1.1E1/3.0);
                double t26164 = 1.0/pow(rho_a,4.0/3.0);
                double t26165 = exp(t26161);
                double t26166 = Ei(-t26161);
                double t26167 = c*c0*t26150*t26160*t26164*t26156*t26159*(2.0/9.0);
                double t26168 = 1.0/pow(rho_a,1.9E1/3.0);
                double t26169 = t26141*t26138*t26139*t26168*(1.6E1/3.0);
                double t26170 = a1*gamma_aa*t26136*t26163*(8.0/3.0);
                double t26171 = t26170+t26169;
                double t26172 = 1.0/(t26154*t26154*t26154);
                double t26173 = a3*c0*gamma_aa*t26160*t26136*t26163*t26156*t26159*(1.4E1/9.0);
                double t26174 = 1.0/pow(rho_a,2.0E1/3.0);
                double t26175 = c*c0*t26141*t26150*t26160*t26138*t26156*t26174*t26139*t26159*(6.4E1/9.0);
                double t26176 = c*c;
                double t26177 = 1.0/pow(rho_a,5.0/3.0);
                double t26178 = 1.0/(t26146*t26146*t26146);
                double t26179 = 1.0/pow(t26142,1.0/5.0);
                double t26185 = c*c0*t26150*t26171*t26172*t26137*t26156*t26159*(4.0/3.0);
                double t26186 = c0*kab1*rab1*t26150*t26160*t26144*t26156*t26176*t26177*t26178*t26179*(1.6E1/4.5E1);
                double t26180 = t26173+t26175+t26167-t26185-t26186;
                double t26181 = t26162*6.0;
                double t26182 = c*c0*t26150*t26160*t26137*t26156*t26159*4.0;
                double t26183 = t26181+t26182+3.0;
                double t26184 = 1.0/t26183;
                double t26187 = c*c0*t26150*t26160*t26137*t26156*t26165*t26166*t26159*(2.0/3.0);
                double t26188 = t26187+1.0;
                double t26189 = t26162*4.0;
                double t26190 = c*c0*t26150*t26160*t26137*t26156*t26159*(8.0/3.0);
                double t26191 = t26190+t26189+6.0;
                double t26192 = 1.0/sqrt(t26161);
                double t26193 = 1.0/pow(rho_b,1.0/3.0);
                double t26194 = gamma_bb*gamma_bb;
                double t26195 = 1.0/pow(rho_b,1.6E1/3.0);
                double t26196 = c*t26193;
                double t26197 = pow(t26196,4.0/5.0);
                double t26210 = rab1*t26197;
                double t26198 = exp(-t26210);
                double t26199 = t26198-1.0;
                double t26211 = kab1*t26199;
                double t26200 = kab0-t26211;
                double t26201 = 1.0/pow(rho_b,7.0/3.0);
                double t26202 = a3*gamma_bb*t26201*t26136*t26147;
                double t26203 = t26202+1.0;
                double t26204 = t26141*t26138*t26194*t26195;
                double t26205 = 1.0/pow(rho_b,8.0/3.0);
                double t26206 = a1*gamma_bb*t26205*t26136;
                double t26207 = t26204+t26206+1.0;
                double t26208 = t26141*t26138*t26194*t26195*2.0;
                double t26209 = exp(t26208);
                double t26212 = 1.0/(t26200*t26200);
                double t26213 = 1.0/(t26207*t26207);
                double t26214 = c*c0*t26203*t26212*t26213*t26209*t26193*(2.0/3.0);
                double t26215 = sqrt(t26214);
                double t26216 = 1.0/pow(rho_b,1.1E1/3.0);
                double t26217 = 1.0/pow(rho_b,4.0/3.0);
                double t26218 = exp(t26214);
                double t26219 = Ei(-t26214);
                double t26220 = c*c0*t26203*t26212*t26213*t26217*t26209*(2.0/9.0);
                double t26221 = 1.0/pow(rho_b,1.9E1/3.0);
                double t26222 = t26221*t26141*t26138*t26194*(1.6E1/3.0);
                double t26223 = a1*gamma_bb*t26216*t26136*(8.0/3.0);
                double t26224 = t26222+t26223;
                double t26225 = 1.0/(t26207*t26207*t26207);
                double t26226 = a3*c0*gamma_bb*t26212*t26213*t26216*t26136*t26209*(1.4E1/9.0);
                double t26227 = 1.0/pow(rho_b,2.0E1/3.0);
                double t26228 = c*c0*t26203*t26212*t26141*t26213*t26209*t26227*t26138*t26194*(6.4E1/9.0);
                double t26229 = 1.0/pow(rho_b,5.0/3.0);
                double t26230 = 1.0/(t26200*t26200*t26200);
                double t26231 = 1.0/pow(t26196,1.0/5.0);
                double t26237 = c*c0*t26203*t26212*t26224*t26225*t26209*t26193*(4.0/3.0);
                double t26238 = c0*kab1*rab1*t26203*t26230*t26213*t26231*t26209*t26229*t26176*t26198*(1.6E1/4.5E1);
                double t26232 = t26220+t26226+t26228-t26237-t26238;
                double t26233 = t26215*6.0;
                double t26234 = c*c0*t26203*t26212*t26213*t26209*t26193*4.0;
                double t26235 = t26233+t26234+3.0;
                double t26236 = 1.0/t26235;
                double t26239 = c*c0*t26203*t26212*t26213*t26209*t26218*t26219*t26193*(2.0/3.0);
                double t26240 = t26239+1.0;
                double t26241 = t26215*4.0;
                double t26242 = c*c0*t26203*t26212*t26213*t26209*t26193*(8.0/3.0);
                double t26243 = t26241+t26242+6.0;
                double t26244 = 1.0/sqrt(t26214);
                double t26245 = 1.0/c0;
                double t26246 = exp(-t26151);
                double t26247 = 1.0/sqrt(t26150);
                double t26248 = t26154*t26146*t26246*t26247*1.0E5;
                double t26249 = exp(-t26204);
                double t26250 = 1.0/sqrt(t26203);
                double t26251 = t26200*t26250*t26207*t26249*1.0E5;
                v_rho_a_rho_b[Q] += scale * c0*heaviside(t26251-c*c0*t26193*(2.0/3.0))*(t26240*t26236*(t26232*t26244*2.0+c*c0*t26203*t26212*t26213*t26217*t26209*(8.0/9.0)+a3*c0*gamma_bb*t26212*t26213*t26216*t26136*t26209*(5.6E1/9.0)-c*c0*t26203*t26212*t26224*t26225*t26209*t26193*(1.6E1/3.0)+c*c0*t26203*t26212*t26141*t26213*t26209*t26227*t26138*t26194*(2.56E2/9.0)-c0*kab1*rab1*t26203*t26230*t26213*t26231*t26209*t26229*t26176*t26198*(6.4E1/4.5E1))+t26243*t26236*(t26220+t26226+t26228-t26237-t26238+c*c0*t26203*t26212*t26213*t26217*t26209*t26218*t26219*(2.0/9.0)+a3*c0*gamma_bb*t26212*t26213*t26216*t26136*t26209*t26218*t26219*(1.4E1/9.0)+c*c0*t26203*t26212*t26213*t26232*t26209*t26218*t26219*t26193*(2.0/3.0)-c*c0*t26203*t26212*t26224*t26225*t26209*t26218*t26219*t26193*(4.0/3.0)+c*c0*t26203*t26212*t26141*t26213*t26209*t26218*t26227*t26138*t26219*t26194*(6.4E1/9.0)-c0*kab1*rab1*t26203*t26230*t26213*t26231*t26209*t26218*t26219*t26229*t26176*t26198*(1.6E1/4.5E1))+t26232*t26218*t26219-t26240*t26243*1.0/(t26235*t26235)*(t26232*t26244*3.0+c*c0*t26203*t26212*t26213*t26217*t26209*(4.0/3.0)+a3*c0*gamma_bb*t26212*t26213*t26216*t26136*t26209*(2.8E1/3.0)-c*c0*t26203*t26212*t26224*t26225*t26209*t26193*8.0+c*c0*t26203*t26212*t26141*t26213*t26209*t26227*t26138*t26194*(1.28E2/3.0)-c0*kab1*rab1*t26203*t26230*t26213*t26231*t26209*t26229*t26176*t26198*(3.2E1/1.5E1))+(pow(rho_b,1.0/3.0)*(t26200*t26200)*t26232*(t26207*t26207)*t26245*t26147*exp(-t26208)*(3.0/2.0))/t26203)*(-1.0/2.0)-c0*heaviside(t26248-c*c0*t26137*(2.0/3.0))*(t26184*t26188*(t26180*t26192*2.0+c*c0*t26150*t26160*t26164*t26156*t26159*(8.0/9.0)+a3*c0*gamma_aa*t26160*t26136*t26163*t26156*t26159*(5.6E1/9.0)-c*c0*t26150*t26171*t26172*t26137*t26156*t26159*(1.6E1/3.0)+c*c0*t26141*t26150*t26160*t26138*t26156*t26174*t26139*t26159*(2.56E2/9.0)-c0*kab1*rab1*t26150*t26160*t26144*t26156*t26176*t26177*t26178*t26179*(6.4E1/4.5E1))+t26191*t26184*(t26173+t26175+t26167-t26185-t26186+c*c0*t26150*t26160*t26164*t26156*t26165*t26166*t26159*(2.0/9.0)+a3*c0*gamma_aa*t26160*t26136*t26163*t26156*t26165*t26166*t26159*(1.4E1/9.0)+c*c0*t26150*t26160*t26180*t26137*t26156*t26165*t26166*t26159*(2.0/3.0)-c*c0*t26150*t26171*t26172*t26137*t26156*t26165*t26166*t26159*(4.0/3.0)+c*c0*t26141*t26150*t26160*t26138*t26156*t26165*t26174*t26139*t26166*t26159*(6.4E1/9.0)-c0*kab1*rab1*t26150*t26160*t26144*t26156*t26165*t26166*t26176*t26177*t26178*t26179*(1.6E1/4.5E1))+t26180*t26165*t26166-t26191*1.0/(t26183*t26183)*t26188*(t26180*t26192*3.0+c*c0*t26150*t26160*t26164*t26156*t26159*(4.0/3.0)+a3*c0*gamma_aa*t26160*t26136*t26163*t26156*t26159*(2.8E1/3.0)-c*c0*t26150*t26171*t26172*t26137*t26156*t26159*8.0+c*c0*t26141*t26150*t26160*t26138*t26156*t26174*t26139*t26159*(1.28E2/3.0)-c0*kab1*rab1*t26150*t26160*t26144*t26156*t26176*t26177*t26178*t26179*(3.2E1/1.5E1))+(pow(rho_a,1.0/3.0)*t26180*(t26154*t26154)*(t26146*t26146)*t26245*t26147*exp(-t26155)*(3.0/2.0))/t26150)*(1.0/2.0)+c0*dirac(-t26251+c*c0*t26193*(2.0/3.0))*(t26218*t26219+t26240*t26243*t26236)*(c*c0*t26217*(2.0/9.0)-t26200*t26250*t26224*t26249*1.0E5+t26200*t26221*t26141*t26250*t26207*t26138*t26194*t26249*(1.6E6/3.0)+a3*gamma_bb*1.0/pow(rho_b,1.0E1/3.0)*t26200*1.0/pow(t26203,3.0/2.0)*t26207*t26136*t26147*t26249*(3.5E5/3.0)-c*kab1*rab1*t26231*t26250*t26207*t26217*t26249*t26198*(8.0E4/3.0))*(1.0/2.0)+c0*dirac(-t26248+c*c0*t26137*(2.0/3.0))*(t26165*t26166+t26191*t26184*t26188)*(c*c0*t26164*(2.0/9.0)-t26171*t26146*t26246*t26247*1.0E5+t26141*t26154*t26146*t26138*t26246*t26139*t26247*t26168*(1.6E6/3.0)+a3*gamma_aa*1.0/pow(rho_a,1.0E1/3.0)*1.0/pow(t26150,3.0/2.0)*t26136*t26154*t26146*t26147*t26246*(3.5E5/3.0)-c*kab1*rab1*t26144*t26154*t26164*t26246*t26247*t26179*(8.0E4/3.0))*(1.0/2.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t26253 = tspi_m13*tspi_m13;
                double t26254 = 1.0/pow(rho_b,1.0/3.0);
                double t26255 = a2*a2;
                double t26256 = gamma_bb*gamma_bb;
                double t26257 = 1.0/pow(rho_b,1.6E1/3.0);
                double t26258 = t26253*t26253;
                double t26259 = c*t26254;
                double t26260 = a4*a4;
                double t26261 = 1.0/c;
                double t26262 = 1.0/pow(rho_b,7.0/3.0);
                double t26263 = sqrt(t26259);
                double t26264 = t26260*t26256*t26257*t26258*2.0;
                double t26265 = exp(t26264);
                double t26266 = t26260*t26256*t26257*t26258;
                double t26267 = t26266+1.0;
                double t26268 = a5*gamma_bb*t26261*t26253*t26262;
                double t26269 = t26268+1.0;
                double t26280 = raa2*t26263;
                double t26270 = exp(-t26280);
                double t26271 = t26270-1.0;
                double t26272 = kaa2*t26271;
                double t26273 = pow(t26259,2.0/5.0);
                double t26281 = raa1*t26273;
                double t26274 = exp(-t26281);
                double t26275 = t26274-1.0;
                double t26276 = kaa1*t26275;
                double t26277 = -kaa0+t26272+t26276;
                double t26278 = 1.0/(t26277*t26277);
                double t26279 = 1.0/t26267;
                double t26282 = 1.0/pow(rho_b,4.0/3.0);
                double t26283 = c*c0*t26254*t26265*t26269*t26278*(2.0/3.0);
                double t26284 = 1.0/(t26267*t26267);
                double t26285 = sqrt(t26283);
                double t26286 = 1.0/pow(rho_b,1.1E1/3.0);
                double t26287 = 1.0/sqrt(t26259);
                double t26288 = c*kaa2*raa2*t26270*t26282*t26287*(1.0/6.0);
                double t26289 = 1.0/pow(t26259,3.0/5.0);
                double t26290 = c*kaa1*raa1*t26282*t26274*t26289*(2.0/1.5E1);
                double t26291 = t26290+t26288;
                double t26292 = 1.0/(t26277*t26277*t26277);
                double t26293 = 1.0/pow(rho_b,2.0E1/3.0);
                double t26294 = c*c0*t26254*t26265*t26284*t26269*t26278*(2.0/3.0);
                double t26295 = exp(t26294);
                double t26296 = Ei(-t26294);
                double t26297 = c*c0*t26282*t26265*t26284*t26269*t26278*(2.0/9.0);
                double t26298 = a5*c0*gamma_bb*t26253*t26265*t26284*t26286*t26278*(1.4E1/9.0);
                double t26299 = c*c0*t26254*t26291*t26265*t26292*t26284*t26269*(4.0/3.0);
                double t26300 = 1.0/(t26267*t26267*t26267);
                double t26301 = c*c0*t26260*t26256*t26265*t26284*t26293*t26258*t26269*t26278*(6.4E1/9.0);
                double t26302 = t26285*t26279*6.0;
                double t26303 = c*c0*t26254*t26265*t26284*t26269*t26278*4.0;
                double t26304 = t26302+t26303+3.0;
                double t26305 = 1.0/t26304;
                double t26306 = 1.0/sqrt(t26283);
                double t26307 = c*c;
                double t26308 = 1.0/pow(rho_b,8.0/3.0);
                double t26309 = c*c0*t26282*t26265*t26269*t26278*(2.0/9.0);
                double t26310 = a5*c0*gamma_bb*t26253*t26265*t26286*t26278*(1.4E1/9.0);
                double t26311 = c*c0*t26254*t26291*t26265*t26292*t26269*(4.0/3.0);
                double t26312 = c*c0*t26260*t26256*t26265*t26293*t26258*t26269*t26278*(6.4E1/9.0);
                double t26313 = t26310+t26311+t26312+t26309;
                double t26314 = t26260*t26260;
                double t26315 = t26256*t26256;
                double t26316 = t26258*t26258;
                double t26317 = 1.0/pow(rho_b,1.9E1/3.0);
                double t26318 = raa2*raa2;
                double t26319 = c*kaa2*t26270*t26262*t26318*(1.0/3.6E1);
                double t26320 = raa1*raa1;
                double t26321 = 1.0/pow(t26259,6.0/5.0);
                double t26322 = kaa1*t26320*t26321*t26307*t26308*t26274*(4.0/2.25E2);
                double t26323 = 1.0/pow(t26259,3.0/2.0);
                double t26324 = kaa2*raa2*t26323*t26270*t26307*t26308*(1.0/3.6E1);
                double t26325 = 1.0/pow(t26259,8.0/5.0);
                double t26326 = kaa1*raa1*t26307*t26325*t26308*t26274*(2.0/7.5E1);
                double t26336 = c*kaa2*raa2*t26270*t26262*t26287*(2.0/9.0);
                double t26337 = c*kaa1*raa1*t26262*t26274*t26289*(8.0/4.5E1);
                double t26327 = t26322+t26324+t26326-t26336+t26319-t26337;
                double t26328 = t26291*t26291;
                double t26329 = 1.0/(t26277*t26277*t26277*t26277);
                double t26330 = 1.0/pow(rho_b,1.4E1/3.0);
                double t26331 = 1.0/pow(rho_b,1.0E1);
                double t26332 = 1.0/pow(rho_b,1.3E1);
                double t26333 = 1.0/pow(rho_b,2.3E1/3.0);
                double t26335 = c*c0*t26300*t26260*t26256*t26265*t26293*t26258*t26269*t26278*(6.4E1/9.0);
                double t26334 = t26301-t26335+t26297+t26298+t26299;
                double t26338 = t26334*t26334;
                double t26339 = 1.0/(t26267*t26267*t26267*t26267);
                double t26340 = c*c0*t26262*t26265*t26284*t26269*t26278*(8.0/2.7E1);
                double t26341 = c*c0*t26254*t26265*t26328*t26284*t26329*t26269*4.0;
                double t26342 = a5*c0*gamma_bb*t26330*t26253*t26265*t26284*t26278*(5.6E1/9.0);
                double t26343 = c*c0*t26282*t26291*t26265*t26292*t26284*t26269*(8.0/9.0);
                double t26344 = a5*c0*gamma_bb*t26253*t26291*t26265*t26292*t26284*t26286*(5.6E1/9.0);
                double t26345 = a5*c0*gamma_bb*t26331*t26260*t26253*t26256*t26265*t26284*t26258*t26278*(8.96E2/2.7E1);
                double t26346 = c*c0*t26314*t26332*t26315*t26316*t26265*t26284*t26269*t26278*(2.048E3/2.7E1);
                double t26347 = c*c0*t26314*t26332*t26315*t26316*t26265*t26339*t26269*t26278*(1.024E3/9.0);
                double t26348 = c*c0*t26260*t26333*t26256*t26265*t26284*t26258*t26269*t26278*(4.48E2/9.0);
                double t26349 = c*c0*t26260*t26291*t26256*t26265*t26292*t26284*t26293*t26258*t26269*(2.56E2/9.0);
                double t26397 = c*c0*t26254*t26327*t26265*t26292*t26284*t26269*(4.0/3.0);
                double t26398 = a5*c0*gamma_bb*t26300*t26331*t26260*t26253*t26256*t26265*t26258*t26278*(8.96E2/2.7E1);
                double t26399 = c*c0*t26300*t26314*t26332*t26315*t26316*t26265*t26269*t26278*(4.096E3/2.7E1);
                double t26400 = c*c0*t26300*t26260*t26333*t26256*t26265*t26258*t26269*t26278*(4.48E2/9.0);
                double t26401 = c*c0*t26300*t26260*t26291*t26256*t26265*t26292*t26293*t26258*t26269*(2.56E2/9.0);
                double t26350 = -t26400-t26401+t26340+t26341+t26342+t26343+t26344+t26345+t26346+t26347+t26348+t26349-t26397-t26398-t26399;
                double t26351 = c*c0*t26254*t26265*t26284*t26295*t26269*t26278*t26296*(2.0/3.0);
                double t26352 = t26351+1.0;
                double t26353 = t26313*t26306*t26279*2.0;
                double t26354 = c*c0*t26282*t26265*t26284*t26269*t26278*(8.0/9.0);
                double t26355 = a5*c0*gamma_bb*t26253*t26265*t26284*t26286*t26278*(5.6E1/9.0);
                double t26356 = c*c0*t26254*t26291*t26265*t26292*t26284*t26269*(1.6E1/3.0);
                double t26357 = c*c0*t26260*t26256*t26265*t26284*t26293*t26258*t26269*t26278*(2.56E2/9.0);
                double t26419 = t26260*t26317*t26256*t26284*t26258*t26285*(6.4E1/3.0);
                double t26420 = c*c0*t26300*t26260*t26256*t26265*t26293*t26258*t26269*t26278*(2.56E2/9.0);
                double t26358 = -t26420+t26353+t26354+t26355+t26356-t26419+t26357;
                double t26359 = 1.0/(t26304*t26304);
                double t26360 = t26285*t26279*4.0;
                double t26361 = c*c0*t26254*t26265*t26284*t26269*t26278*(8.0/3.0);
                double t26362 = t26360+t26361+6.0;
                double t26363 = t26313*t26306*t26279*3.0;
                double t26364 = c*c0*t26282*t26265*t26284*t26269*t26278*(4.0/3.0);
                double t26365 = a5*c0*gamma_bb*t26253*t26265*t26284*t26286*t26278*(2.8E1/3.0);
                double t26366 = c*c0*t26254*t26291*t26265*t26292*t26284*t26269*8.0;
                double t26367 = c*c0*t26260*t26256*t26265*t26284*t26293*t26258*t26269*t26278*(1.28E2/3.0);
                double t26388 = t26260*t26317*t26256*t26284*t26258*t26285*3.2E1;
                double t26389 = c*c0*t26300*t26260*t26256*t26265*t26293*t26258*t26269*t26278*(1.28E2/3.0);
                double t26368 = t26363+t26364+t26365+t26366+t26367-t26388-t26389;
                double t26369 = c*c0*t26282*t26265*t26284*t26295*t26269*t26278*t26296*(2.0/9.0);
                double t26370 = c*c0*t26254*t26291*t26265*t26292*t26284*t26295*t26269*t26296*(4.0/3.0);
                double t26371 = c*c0*t26334*t26254*t26265*t26284*t26295*t26269*t26278*t26296*(2.0/3.0);
                double t26372 = a5*c0*gamma_bb*t26253*t26265*t26284*t26286*t26295*t26278*t26296*(1.4E1/9.0);
                double t26373 = c*c0*t26260*t26256*t26265*t26284*t26293*t26258*t26295*t26269*t26278*t26296*(6.4E1/9.0);
                double t26374 = c*c0*t26262*t26265*t26269*t26278*(8.0/2.7E1);
                double t26375 = a5*c0*gamma_bb*t26330*t26253*t26265*t26278*(5.6E1/9.0);
                double t26376 = c*c0*t26282*t26291*t26265*t26292*t26269*(8.0/9.0);
                double t26377 = c*c0*t26254*t26265*t26328*t26329*t26269*4.0;
                double t26378 = a5*c0*gamma_bb*t26331*t26260*t26253*t26256*t26265*t26258*t26278*(8.96E2/2.7E1);
                double t26379 = a5*c0*gamma_bb*t26253*t26291*t26265*t26292*t26286*(5.6E1/9.0);
                double t26380 = c*c0*t26314*t26332*t26315*t26316*t26265*t26269*t26278*(2.048E3/2.7E1);
                double t26381 = c*c0*t26260*t26333*t26256*t26265*t26258*t26269*t26278*(4.48E2/9.0);
                double t26382 = c*c0*t26260*t26291*t26256*t26265*t26292*t26293*t26258*t26269*(2.56E2/9.0);
                double t26383 = t26380+t26381+t26382+t26374+t26375+t26376+t26377+t26378+t26379-c*c0*t26254*t26327*t26265*t26292*t26269*(4.0/3.0);
                double t26384 = t26313*t26313;
                double t26385 = 1.0/pow(t26283,3.0/2.0);
                double t26386 = 1.0/pow(rho_b,2.2E1/3.0);
                double t26387 = 1.0/pow(rho_b,3.8E1/3.0);
                double t26390 = 1.0/pow(rho_b,2.0/3.0);
                double t26391 = 1.0/t26269;
                double t26392 = 1.0/c0;
                double t26393 = exp(-t26264);
                double t26394 = t26267*t26267;
                double t26395 = t26277*t26277;
                double t26396 = pow(rho_b,1.0/3.0);
                double t26402 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t26421 = c*c0*t26300*t26260*t26256*t26265*t26293*t26258*t26295*t26269*t26278*t26296*(6.4E1/9.0);
                double t26403 = t26301-t26421+t26370-t26335+t26371+t26372+t26373+t26297+t26369+t26298+t26299;
                double t26404 = t26255*t26256*t26257*t26258;
                double t26405 = pow(t26259,4.0/5.0);
                double t26423 = rab1*t26405;
                double t26406 = exp(-t26423);
                double t26407 = t26406-1.0;
                double t26424 = kab1*t26407;
                double t26408 = kab0-t26424;
                double t26409 = a3*gamma_bb*t26261*t26253*t26262;
                double t26410 = t26409+1.0;
                double t26411 = 1.0/sqrt(t26410);
                double t26412 = a1*gamma_bb*t26253*t26308;
                double t26413 = t26412+t26404+1.0;
                double t26414 = k1*t26263;
                double t26415 = c*k2*t26254;
                double t26416 = t26414+t26415;
                double t26417 = 1.0/(t26416*t26416);
                double t26426 = t26307*t26390*t26417;
                double t26418 = exp(-t26426);
                double t26422 = exp(-t26404);
                double t26425 = t26411*t26413*t26422*t26408*1.0E5;
                double t26427 = t26305*t26352*t26358;
                double t26428 = t26334*t26295*t26296;
                double t26429 = t26403*t26305*t26362;
                double t26430 = t26261*t26334*t26391*t26392*t26393*t26394*t26395*t26396*(3.0/2.0);
                double t26568 = t26352*t26362*t26359*t26368;
                double t26431 = t26430+t26427+t26428+t26429-t26568;
                double t26432 = 1.0/pow(rho_b,1.0E1/3.0);
                double t26433 = c*c0*t26254*(2.0/3.0);
                double t26434 = 1.0/(t26416*t26416*t26416);
                double t26435 = c*k2*t26282*(1.0/3.0);
                double t26436 = c*k1*t26282*t26287*(1.0/6.0);
                double t26437 = t26435+t26436;
                double t26438 = 1.0/pow(rho_b,5.0/3.0);
                double t26439 = -t26433+t26425;
                double t26440 = heaviside(t26439);
                double t26441 = t26295*t26296;
                double t26442 = t26305*t26352*t26362;
                double t26443 = t26441+t26442;
                double t26444 = t26307*t26417*t26438*(2.0/3.0);
                double t26458 = t26307*t26434*t26390*t26437*2.0;
                double t26445 = t26444-t26458;
                double t26446 = t26433-t26425;
                double t26447 = c*c0*t26282*(2.0/9.0);
                double t26448 = t26317*t26255*t26256*t26258*(1.6E1/3.0);
                double t26449 = a1*gamma_bb*t26253*t26286*(8.0/3.0);
                double t26450 = t26448+t26449;
                double t26451 = t26411*t26413*t26422*t26317*t26255*t26408*t26256*t26258*(1.6E6/3.0);
                double t26452 = 1.0/pow(t26259,1.0/5.0);
                double t26453 = 1.0/pow(t26410,3.0/2.0);
                double t26454 = a3*gamma_bb*t26413*t26422*t26261*t26432*t26253*t26408*t26453*(3.5E5/3.0);
                double t26459 = t26411*t26422*t26450*t26408*1.0E5;
                double t26460 = c*kab1*rab1*t26411*t26413*t26422*t26406*t26452*t26282*(8.0E4/3.0);
                double t26455 = t26451-t26460+t26454+t26447-t26459;
                double t26456 = dirac(t26446);
                double t26457 = 1.0/(c*c);
                double t26461 = t26255*t26256*t26257*t26258*2.0;
                double t26462 = exp(t26461);
                double t26463 = 1.0/(t26408*t26408);
                double t26464 = 1.0/(t26413*t26413);
                double t26465 = c*c0*t26410*t26254*t26462*t26463*t26464*(2.0/3.0);
                double t26466 = sqrt(t26465);
                double t26467 = 1.0/rho_b;
                double t26468 = c*c0*t26410*t26282*t26462*t26463*t26464*(2.0/9.0);
                double t26469 = 1.0/(t26413*t26413*t26413);
                double t26470 = a3*c0*gamma_bb*t26253*t26462*t26463*t26464*t26286*(1.4E1/9.0);
                double t26471 = c*c0*t26410*t26255*t26462*t26256*t26463*t26293*t26464*t26258*(6.4E1/9.0);
                double t26472 = 1.0/(t26408*t26408*t26408);
                double t26474 = c*c0*t26410*t26450*t26254*t26462*t26463*t26469*(4.0/3.0);
                double t26475 = c0*kab1*rab1*t26410*t26307*t26406*t26452*t26462*t26472*t26464*t26438*(1.6E1/4.5E1);
                double t26473 = t26470+t26471-t26474-t26475+t26468;
                double t26476 = t26255*t26256*t26258*t26386*(3.04E2/9.0);
                double t26477 = a1*gamma_bb*t26330*t26253*(8.8E1/9.0);
                double t26478 = t26476+t26477;
                double t26479 = exp(t26465);
                double t26480 = Ei(-t26465);
                double t26481 = c*c0*t26410*t26262*t26462*t26463*t26464*(8.0/2.7E1);
                double t26482 = t26450*t26450;
                double t26483 = 1.0/(t26413*t26413*t26413*t26413);
                double t26484 = c*c0*t26410*t26254*t26462*t26463*t26482*t26483*4.0;
                double t26485 = a3*c0*gamma_bb*t26330*t26253*t26462*t26463*t26464*(5.6E1/9.0);
                double t26486 = a3*c0*gamma_bb*t26331*t26253*t26255*t26462*t26256*t26463*t26464*t26258*(8.96E2/2.7E1);
                double t26487 = t26255*t26255;
                double t26488 = rab1*rab1;
                double t26489 = 1.0/(rho_b*rho_b*rho_b);
                double t26490 = 1.0/pow(t26259,2.0/5.0);
                double t26491 = t26473*t26473;
                double t26492 = c*c0*t26410*t26332*t26315*t26316*t26462*t26463*t26464*t26487*(2.048E3/2.7E1);
                double t26493 = c*c0*t26410*t26333*t26255*t26462*t26256*t26463*t26464*t26258*(4.48E2/9.0);
                double t26494 = c*c0*kab1*t26410*t26307*t26406*t26462*t26472*t26490*t26464*t26488*t26489*(6.4E1/6.75E2);
                double t26495 = kab1*kab1;
                double t26502 = rab1*t26405*2.0;
                double t26496 = exp(-t26502);
                double t26497 = 1.0/(t26408*t26408*t26408*t26408);
                double t26498 = c*c0*t26410*t26307*t26462*t26490*t26464*t26495*t26496*t26488*t26497*t26489*(6.4E1/2.25E2);
                double t26499 = c*c0*kab1*rab1*t26410*t26321*t26307*t26406*t26462*t26472*t26464*t26489*(1.6E1/6.75E2);
                double t26500 = c0*kab1*rab1*t26410*t26450*t26307*t26406*t26452*t26462*t26472*t26438*t26469*(6.4E1/4.5E1);
                double t26501 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t26503 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t26504 = t26466*6.0;
                double t26505 = c*c0*t26410*t26254*t26462*t26463*t26464*4.0;
                double t26506 = t26504+t26505+3.0;
                double t26507 = 1.0/t26506;
                double t26509 = c*c0*t26410*t26450*t26282*t26462*t26463*t26469*(8.0/9.0);
                double t26510 = c*c0*t26410*t26254*t26462*t26463*t26469*t26478*(4.0/3.0);
                double t26511 = a3*c0*gamma_bb*t26450*t26253*t26462*t26463*t26286*t26469*(5.6E1/9.0);
                double t26512 = c*c0*t26410*t26450*t26255*t26462*t26256*t26463*t26293*t26258*t26469*(2.56E2/9.0);
                double t26513 = c0*kab1*rab1*t26410*t26307*t26406*t26308*t26452*t26462*t26472*t26464*(3.2E1/4.5E1);
                double t26514 = a3*c*c0*gamma_bb*kab1*rab1*t26501*t26253*t26406*t26452*t26462*t26472*t26464*(2.24E2/1.35E2);
                double t26515 = c0*kab1*rab1*t26410*t26503*t26307*t26406*t26452*t26255*t26462*t26256*t26472*t26464*t26258*(1.024E3/1.35E2);
                double t26508 = t26500-t26510-t26511-t26512-t26513-t26514-t26515+t26481-t26509+t26492+t26484+t26493+t26485+t26494+t26486+t26498+t26499;
                double t26516 = 1.0/sqrt(t26465);
                double t26517 = t26466*4.0;
                double t26518 = c*c0*t26410*t26254*t26462*t26463*t26464*(8.0/3.0);
                double t26519 = t26517+t26518+6.0;
                double t26520 = c*c0*t26410*t26282*t26462*t26480*t26463*t26464*t26479*(2.0/9.0);
                double t26521 = a3*c0*gamma_bb*t26253*t26462*t26480*t26463*t26464*t26286*t26479*(1.4E1/9.0);
                double t26522 = c*c0*t26410*t26254*t26462*t26480*t26463*t26464*t26473*t26479*(2.0/3.0);
                double t26523 = c*c0*t26410*t26255*t26462*t26480*t26256*t26463*t26293*t26464*t26258*t26479*(6.4E1/9.0);
                double t26545 = c*c0*t26410*t26450*t26254*t26462*t26480*t26463*t26469*t26479*(4.0/3.0);
                double t26546 = c0*kab1*rab1*t26410*t26307*t26406*t26452*t26462*t26480*t26472*t26464*t26438*t26479*(1.6E1/4.5E1);
                double t26524 = t26520+t26521+t26522+t26523+t26470+t26471-t26545-t26474-t26546-t26475+t26468;
                double t26525 = c*c0*t26410*t26254*t26462*t26480*t26463*t26464*t26479*(2.0/3.0);
                double t26526 = t26525+1.0;
                double t26527 = 1.0/(t26506*t26506);
                double t26528 = 1.0/pow(t26465,3.0/2.0);
                double t26529 = t26516*t26473*3.0;
                double t26530 = c*c0*t26410*t26282*t26462*t26463*t26464*(4.0/3.0);
                double t26531 = a3*c0*gamma_bb*t26253*t26462*t26463*t26464*t26286*(2.8E1/3.0);
                double t26532 = c*c0*t26410*t26255*t26462*t26256*t26463*t26293*t26464*t26258*(1.28E2/3.0);
                double t26534 = c*c0*t26410*t26450*t26254*t26462*t26463*t26469*8.0;
                double t26535 = c0*kab1*rab1*t26410*t26307*t26406*t26452*t26462*t26472*t26464*t26438*(3.2E1/1.5E1);
                double t26533 = t26530+t26531+t26532-t26534-t26535+t26529;
                double t26536 = t26516*t26473*2.0;
                double t26537 = c*c0*t26410*t26282*t26462*t26463*t26464*(8.0/9.0);
                double t26538 = a3*c0*gamma_bb*t26253*t26462*t26463*t26464*t26286*(5.6E1/9.0);
                double t26539 = c*c0*t26410*t26255*t26462*t26256*t26463*t26293*t26464*t26258*(2.56E2/9.0);
                double t26547 = c*c0*t26410*t26450*t26254*t26462*t26463*t26469*(1.6E1/3.0);
                double t26548 = c0*kab1*rab1*t26410*t26307*t26406*t26452*t26462*t26472*t26464*t26438*(6.4E1/4.5E1);
                double t26540 = t26536+t26537+t26538-t26547+t26539-t26548;
                double t26541 = 1.0/t26410;
                double t26542 = exp(-t26461);
                double t26543 = t26408*t26408;
                double t26544 = t26413*t26413;
                double t26549 = dirac(t26446,1.0);
                double t26550 = t26455*t26455;
                double t26551 = t26480*t26479;
                double t26552 = t26507*t26526*t26519;
                double t26553 = t26551+t26552;
                double t26554 = c*c0*t26262*(8.0/2.7E1);
                double t26555 = t26411*t26413*t26422*t26255*t26408*t26256*t26258*t26386*(3.04E7/9.0);
                double t26556 = t26411*t26422*t26450*t26317*t26255*t26408*t26256*t26258*(3.2E6/3.0);
                double t26557 = kab1*t26411*t26413*t26422*t26307*t26406*t26308*t26490*t26488*(6.4E4/9.0);
                double t26558 = a3*a3;
                double t26559 = 1.0/pow(t26410,5.0/2.0);
                double t26560 = 1.0/pow(rho_b,1.3E1/3.0);
                double t26561 = a3*gamma_bb*t26413*t26422*t26261*t26253*t26560*t26408*t26453*(3.5E6/9.0);
                double t26562 = a3*gamma_bb*t26422*t26261*t26432*t26450*t26253*t26408*t26453*(7.0E5/3.0);
                double t26563 = kab1*rab1*t26321*t26411*t26413*t26422*t26307*t26406*t26308*(1.6E4/9.0);
                double t26564 = 1.0/pow(rho_b,2.9E1/3.0);
                double t26565 = a3*gamma_bb*kab1*rab1*t26330*t26413*t26422*t26253*t26406*t26452*t26453*(5.6E5/9.0);
                double t26566 = c*kab1*rab1*t26411*t26413*t26422*t26333*t26406*t26452*t26255*t26256*t26258*(2.56E6/9.0);
                double t26567 = t26561+t26562+t26554+t26563+t26555+t26556+t26565+t26557+t26566-t26411*t26422*t26408*t26478*1.0E5-t26411*t26413*t26422*t26315*t26316*t26408*t26387*t26487*(2.56E7/9.0)-c*kab1*rab1*t26411*t26413*t26422*t26262*t26406*t26452*(3.2E5/9.0)-c*kab1*rab1*t26411*t26422*t26450*t26406*t26452*t26282*(1.6E5/3.0)-t26413*t26422*t26408*t26256*t26293*t26258*t26457*t26558*t26559*(1.225E6/3.0)-a3*gamma_bb*t26413*t26422*t26261*t26253*t26255*t26408*t26453*t26256*t26258*t26564*(1.12E7/9.0);
                v_rho_b_rho_b[Q] += scale * -rho_a*(c0*t26440*(t26507*t26519*(t26500-t26510-t26511-t26512-t26513-t26514-t26515+t26481+t26491-t26509+t26492+t26484+t26493+t26485+t26494+t26486+t26498+t26499+t26473*t26467*(1.0/3.0)-(t26450*t26473*2.0)/t26413+t26317*t26255*t26256*t26473*t26258*(3.2E1/3.0)+a3*gamma_bb*t26261*t26432*t26253*t26541*t26473*(7.0/3.0)-(c*kab1*rab1*t26406*t26452*t26282*t26473*(8.0/1.5E1))/t26408+c*c0*t26410*t26262*t26462*t26480*t26463*t26464*t26479*(8.0/2.7E1)+a3*c0*gamma_bb*t26330*t26253*t26462*t26480*t26463*t26464*t26479*(5.6E1/9.0)+c*c0*t26410*t26254*t26462*t26480*t26463*t26508*t26464*t26479*(2.0/3.0)+c*c0*t26410*t26254*t26462*t26480*t26463*t26464*t26491*t26479*(2.0/3.0)-c*c0*t26410*t26450*t26282*t26462*t26480*t26463*t26469*t26479*(8.0/9.0)+c*c0*t26410*t26254*t26462*t26480*t26463*t26482*t26483*t26479*4.0+c*c0*t26410*t26282*t26462*t26480*t26463*t26464*t26473*t26479*(4.0/9.0)-c*c0*t26410*t26254*t26462*t26480*t26463*t26469*t26478*t26479*(4.0/3.0)-a3*c0*gamma_bb*t26450*t26253*t26462*t26480*t26463*t26286*t26469*t26479*(5.6E1/9.0)+a3*c0*gamma_bb*t26253*t26462*t26480*t26463*t26464*t26473*t26286*t26479*(2.8E1/9.0)-c*c0*t26410*t26450*t26254*t26462*t26480*t26463*t26473*t26469*t26479*(8.0/3.0)+c*c0*t26410*t26332*t26315*t26316*t26462*t26480*t26463*t26464*t26487*t26479*(2.048E3/2.7E1)+c*c0*t26410*t26333*t26255*t26462*t26480*t26256*t26463*t26464*t26258*t26479*(4.48E2/9.0)+a3*c0*gamma_bb*t26331*t26253*t26255*t26462*t26480*t26256*t26463*t26464*t26258*t26479*(8.96E2/2.7E1)-c*c0*t26410*t26450*t26255*t26462*t26480*t26256*t26463*t26293*t26258*t26469*t26479*(2.56E2/9.0)+c*c0*t26410*t26255*t26462*t26480*t26256*t26463*t26293*t26464*t26473*t26258*t26479*(1.28E2/9.0)-c0*kab1*rab1*t26410*t26307*t26406*t26308*t26452*t26462*t26480*t26472*t26464*t26479*(3.2E1/4.5E1)+c*c0*kab1*rab1*t26410*t26321*t26307*t26406*t26462*t26480*t26472*t26464*t26479*t26489*(1.6E1/6.75E2)+c*c0*kab1*t26410*t26307*t26406*t26462*t26480*t26472*t26490*t26464*t26479*t26488*t26489*(6.4E1/6.75E2)+c*c0*t26410*t26307*t26462*t26480*t26490*t26464*t26495*t26496*t26479*t26488*t26497*t26489*(6.4E1/2.25E2)+c0*kab1*rab1*t26410*t26450*t26307*t26406*t26452*t26462*t26480*t26472*t26438*t26469*t26479*(6.4E1/4.5E1)-c0*kab1*rab1*t26410*t26307*t26406*t26452*t26462*t26480*t26472*t26464*t26473*t26438*t26479*(3.2E1/4.5E1)-a3*c*c0*gamma_bb*kab1*rab1*t26501*t26253*t26406*t26452*t26462*t26480*t26472*t26464*t26479*(2.24E2/1.35E2)-c0*kab1*rab1*t26410*t26503*t26307*t26406*t26452*t26255*t26462*t26480*t26256*t26472*t26464*t26258*t26479*(1.024E3/1.35E2))+t26540*t26524*t26507*2.0+t26480*t26508*t26479+t26480*t26491*t26479+t26507*t26526*(t26516*t26508*2.0-t26491*t26528+c*c0*t26410*t26262*t26462*t26463*t26464*(3.2E1/2.7E1)+a3*c0*gamma_bb*t26330*t26253*t26462*t26463*t26464*(2.24E2/9.0)-c*c0*t26410*t26450*t26282*t26462*t26463*t26469*(3.2E1/9.0)+c*c0*t26410*t26254*t26462*t26463*t26482*t26483*1.6E1-c*c0*t26410*t26254*t26462*t26463*t26469*t26478*(1.6E1/3.0)-a3*c0*gamma_bb*t26450*t26253*t26462*t26463*t26286*t26469*(2.24E2/9.0)+c*c0*t26410*t26332*t26315*t26316*t26462*t26463*t26464*t26487*(8.192E3/2.7E1)+c*c0*t26410*t26333*t26255*t26462*t26256*t26463*t26464*t26258*(1.792E3/9.0)+a3*c0*gamma_bb*t26331*t26253*t26255*t26462*t26256*t26463*t26464*t26258*(3.584E3/2.7E1)-c*c0*t26410*t26450*t26255*t26462*t26256*t26463*t26293*t26258*t26469*(1.024E3/9.0)-c0*kab1*rab1*t26410*t26307*t26406*t26308*t26452*t26462*t26472*t26464*(1.28E2/4.5E1)+c*c0*kab1*rab1*t26410*t26321*t26307*t26406*t26462*t26472*t26464*t26489*(6.4E1/6.75E2)+c*c0*kab1*t26410*t26307*t26406*t26462*t26472*t26490*t26464*t26488*t26489*(2.56E2/6.75E2)+c*c0*t26410*t26307*t26462*t26490*t26464*t26495*t26496*t26488*t26497*t26489*(2.56E2/2.25E2)+c0*kab1*rab1*t26410*t26450*t26307*t26406*t26452*t26462*t26472*t26438*t26469*(2.56E2/4.5E1)-a3*c*c0*gamma_bb*kab1*rab1*t26501*t26253*t26406*t26452*t26462*t26472*t26464*(8.96E2/1.35E2)-c0*kab1*rab1*t26410*t26503*t26307*t26406*t26452*t26255*t26462*t26256*t26472*t26464*t26258*(4.096E3/1.35E2))-t26540*t26533*t26526*t26527*2.0-t26524*t26533*t26527*t26519*2.0-t26526*t26527*t26519*(t26516*t26508*3.0-t26491*t26528*(3.0/2.0)+c*c0*t26410*t26262*t26462*t26463*t26464*(1.6E1/9.0)+a3*c0*gamma_bb*t26330*t26253*t26462*t26463*t26464*(1.12E2/3.0)-c*c0*t26410*t26450*t26282*t26462*t26463*t26469*(1.6E1/3.0)+c*c0*t26410*t26254*t26462*t26463*t26482*t26483*2.4E1-c*c0*t26410*t26254*t26462*t26463*t26469*t26478*8.0-a3*c0*gamma_bb*t26450*t26253*t26462*t26463*t26286*t26469*(1.12E2/3.0)+c*c0*t26410*t26332*t26315*t26316*t26462*t26463*t26464*t26487*(4.096E3/9.0)+c*c0*t26410*t26333*t26255*t26462*t26256*t26463*t26464*t26258*(8.96E2/3.0)+a3*c0*gamma_bb*t26331*t26253*t26255*t26462*t26256*t26463*t26464*t26258*(1.792E3/9.0)-c*c0*t26410*t26450*t26255*t26462*t26256*t26463*t26293*t26258*t26469*(5.12E2/3.0)-c0*kab1*rab1*t26410*t26307*t26406*t26308*t26452*t26462*t26472*t26464*(6.4E1/1.5E1)+c*c0*kab1*rab1*t26410*t26321*t26307*t26406*t26462*t26472*t26464*t26489*(3.2E1/2.25E2)+c*c0*kab1*t26410*t26307*t26406*t26462*t26472*t26490*t26464*t26488*t26489*(1.28E2/2.25E2)+c*c0*t26410*t26307*t26462*t26490*t26464*t26495*t26496*t26488*t26497*t26489*(1.28E2/7.5E1)+c0*kab1*rab1*t26410*t26450*t26307*t26406*t26452*t26462*t26472*t26438*t26469*(1.28E2/1.5E1)-a3*c*c0*gamma_bb*kab1*rab1*t26501*t26253*t26406*t26452*t26462*t26472*t26464*(4.48E2/4.5E1)-c0*kab1*rab1*t26410*t26503*t26307*t26406*t26452*t26255*t26462*t26256*t26472*t26464*t26258*(2.048E3/4.5E1))+1.0/(t26506*t26506*t26506)*(t26533*t26533)*t26526*t26519*2.0-t26261*t26541*t26542*t26390*t26543*t26544*t26392*t26473*(1.0/2.0)+t26261*t26541*t26542*t26543*t26508*t26544*t26392*t26396*(3.0/2.0)+t26261*t26541*t26542*t26543*t26544*t26392*t26491*t26396*(3.0/2.0)+t26413*t26261*t26450*t26541*t26542*t26543*t26392*t26473*t26396*3.0+kab1*rab1*t26406*t26541*t26452*t26542*t26408*t26544*t26392*t26473*t26467*(4.0/5.0)-t26402*t26261*t26541*t26542*t26255*t26543*t26256*t26544*t26392*t26473*t26258*1.6E1-a3*gamma_bb*1.0/(t26410*t26410)*t26253*t26542*t26543*t26544*t26392*t26473*t26457*t26489*(7.0/2.0))*(-1.0/2.0)+c0*t26550*t26553*t26549*(1.0/2.0)+c0*t26553*t26456*t26567*(1.0/2.0)+c0*t26455*t26456*(t26540*t26507*t26526+t26524*t26507*t26519+t26480*t26473*t26479-t26533*t26526*t26527*t26519+t26261*t26541*t26542*t26543*t26544*t26392*t26473*t26396*(3.0/2.0)))-rho_b*(c0*t26440*t26418*(t26305*t26352*(t26306*t26383*t26279*2.0-t26384*t26385*t26279+t26300*t26314*t26315*t26316*t26285*t26387*(2.048E3/9.0)-t26260*t26256*t26284*t26258*t26285*t26386*(1.216E3/9.0)+c*c0*t26262*t26265*t26284*t26269*t26278*(3.2E1/2.7E1)-t26313*t26260*t26306*t26317*t26256*t26284*t26258*(6.4E1/3.0)+a5*c0*gamma_bb*t26330*t26253*t26265*t26284*t26278*(2.24E2/9.0)-c*c0*t26254*t26327*t26265*t26292*t26284*t26269*(1.6E1/3.0)+c*c0*t26282*t26291*t26265*t26292*t26284*t26269*(3.2E1/9.0)+c*c0*t26254*t26265*t26328*t26284*t26329*t26269*1.6E1+a5*c0*gamma_bb*t26253*t26291*t26265*t26292*t26284*t26286*(2.24E2/9.0)-c*c0*t26300*t26314*t26332*t26315*t26316*t26265*t26269*t26278*(1.6384E4/2.7E1)-c*c0*t26300*t26260*t26333*t26256*t26265*t26258*t26269*t26278*(1.792E3/9.0)+c*c0*t26314*t26332*t26315*t26316*t26265*t26284*t26269*t26278*(8.192E3/2.7E1)+c*c0*t26314*t26332*t26315*t26316*t26265*t26339*t26269*t26278*(4.096E3/9.0)+c*c0*t26260*t26333*t26256*t26265*t26284*t26258*t26269*t26278*(1.792E3/9.0)-a5*c0*gamma_bb*t26300*t26331*t26260*t26253*t26256*t26265*t26258*t26278*(3.584E3/2.7E1)+a5*c0*gamma_bb*t26331*t26260*t26253*t26256*t26265*t26284*t26258*t26278*(3.584E3/2.7E1)-c*c0*t26300*t26260*t26291*t26256*t26265*t26292*t26293*t26258*t26269*(1.024E3/9.0)+c*c0*t26260*t26291*t26256*t26265*t26292*t26284*t26293*t26258*t26269*(1.024E3/9.0))+t26403*t26305*t26358*2.0+t26350*t26295*t26296+t26338*t26295*t26296+t26305*t26362*(-t26400-t26401+t26340+t26341+t26342+t26343+t26344+t26345+t26346+t26338+t26347+t26348+t26349-t26397-t26398-t26399+t26334*t26467*(1.0/3.0)+(t26334*t26291*2.0)/t26277+t26260*t26334*t26317*t26256*t26258*(3.2E1/3.0)-t26260*t26334*t26317*t26256*t26258*t26279*(3.2E1/3.0)+a5*gamma_bb*t26261*t26432*t26253*t26334*t26391*(7.0/3.0)+c*c0*t26262*t26265*t26284*t26295*t26269*t26278*t26296*(8.0/2.7E1)+a5*c0*gamma_bb*t26330*t26253*t26265*t26284*t26295*t26278*t26296*(5.6E1/9.0)+c*c0*t26350*t26254*t26265*t26284*t26295*t26269*t26278*t26296*(2.0/3.0)-c*c0*t26254*t26327*t26265*t26292*t26284*t26295*t26269*t26296*(4.0/3.0)+c*c0*t26282*t26291*t26265*t26292*t26284*t26295*t26269*t26296*(8.0/9.0)+c*c0*t26254*t26265*t26328*t26284*t26329*t26295*t26269*t26296*4.0+c*c0*t26334*t26282*t26265*t26284*t26295*t26269*t26278*t26296*(4.0/9.0)+c*c0*t26254*t26265*t26284*t26338*t26295*t26269*t26278*t26296*(2.0/3.0)+a5*c0*gamma_bb*t26253*t26291*t26265*t26292*t26284*t26286*t26295*t26296*(5.6E1/9.0)+a5*c0*gamma_bb*t26253*t26334*t26265*t26284*t26286*t26295*t26278*t26296*(2.8E1/9.0)+c*c0*t26334*t26254*t26291*t26265*t26292*t26284*t26295*t26269*t26296*(8.0/3.0)-c*c0*t26300*t26314*t26332*t26315*t26316*t26265*t26295*t26269*t26278*t26296*(4.096E3/2.7E1)-c*c0*t26300*t26260*t26333*t26256*t26265*t26258*t26295*t26269*t26278*t26296*(4.48E2/9.0)+c*c0*t26314*t26332*t26315*t26316*t26265*t26284*t26295*t26269*t26278*t26296*(2.048E3/2.7E1)+c*c0*t26314*t26332*t26315*t26316*t26265*t26339*t26295*t26269*t26278*t26296*(1.024E3/9.0)+c*c0*t26260*t26333*t26256*t26265*t26284*t26258*t26295*t26269*t26278*t26296*(4.48E2/9.0)-a5*c0*gamma_bb*t26300*t26331*t26260*t26253*t26256*t26265*t26258*t26295*t26278*t26296*(8.96E2/2.7E1)+a5*c0*gamma_bb*t26331*t26260*t26253*t26256*t26265*t26284*t26258*t26295*t26278*t26296*(8.96E2/2.7E1)-c*c0*t26300*t26260*t26291*t26256*t26265*t26292*t26293*t26258*t26295*t26269*t26296*(2.56E2/9.0)-c*c0*t26300*t26260*t26334*t26256*t26265*t26293*t26258*t26295*t26269*t26278*t26296*(1.28E2/9.0)+c*c0*t26260*t26291*t26256*t26265*t26292*t26284*t26293*t26258*t26295*t26269*t26296*(2.56E2/9.0)+c*c0*t26260*t26334*t26256*t26265*t26284*t26293*t26258*t26295*t26269*t26278*t26296*(1.28E2/9.0))-t26352*t26362*t26359*(t26306*t26383*t26279*3.0-t26384*t26385*t26279*(3.0/2.0)+t26300*t26314*t26315*t26316*t26285*t26387*(1.024E3/3.0)-t26260*t26256*t26284*t26258*t26285*t26386*(6.08E2/3.0)+c*c0*t26262*t26265*t26284*t26269*t26278*(1.6E1/9.0)-t26313*t26260*t26306*t26317*t26256*t26284*t26258*3.2E1+a5*c0*gamma_bb*t26330*t26253*t26265*t26284*t26278*(1.12E2/3.0)-c*c0*t26254*t26327*t26265*t26292*t26284*t26269*8.0+c*c0*t26282*t26291*t26265*t26292*t26284*t26269*(1.6E1/3.0)+c*c0*t26254*t26265*t26328*t26284*t26329*t26269*2.4E1+a5*c0*gamma_bb*t26253*t26291*t26265*t26292*t26284*t26286*(1.12E2/3.0)-c*c0*t26300*t26314*t26332*t26315*t26316*t26265*t26269*t26278*(8.192E3/9.0)-c*c0*t26300*t26260*t26333*t26256*t26265*t26258*t26269*t26278*(8.96E2/3.0)+c*c0*t26314*t26332*t26315*t26316*t26265*t26284*t26269*t26278*(4.096E3/9.0)+c*c0*t26314*t26332*t26315*t26316*t26265*t26339*t26269*t26278*(2.048E3/3.0)+c*c0*t26260*t26333*t26256*t26265*t26284*t26258*t26269*t26278*(8.96E2/3.0)-a5*c0*gamma_bb*t26300*t26331*t26260*t26253*t26256*t26265*t26258*t26278*(1.792E3/9.0)+a5*c0*gamma_bb*t26331*t26260*t26253*t26256*t26265*t26284*t26258*t26278*(1.792E3/9.0)-c*c0*t26300*t26260*t26291*t26256*t26265*t26292*t26293*t26258*t26269*(5.12E2/3.0)+c*c0*t26260*t26291*t26256*t26265*t26292*t26284*t26293*t26258*t26269*(5.12E2/3.0))-t26403*t26362*t26359*t26368*2.0-t26352*t26358*t26359*t26368*2.0+1.0/(t26304*t26304*t26304)*t26352*t26362*(t26368*t26368)*2.0-t26261*t26334*t26390*t26391*t26392*t26393*t26394*t26395*(1.0/2.0)+t26350*t26261*t26391*t26392*t26393*t26394*t26395*t26396*(3.0/2.0)+t26261*t26391*t26338*t26392*t26393*t26394*t26395*t26396*(3.0/2.0)-t26261*t26334*t26291*t26391*t26392*t26393*t26277*t26394*t26396*3.0+t26402*t26260*t26261*t26334*t26256*t26391*t26392*t26258*t26267*t26393*t26395*1.6E1-t26402*t26260*t26261*t26334*t26256*t26391*t26392*t26258*t26393*t26394*t26395*1.6E1-a5*gamma_bb*t26253*t26334*t26392*t26393*t26394*t26457*1.0/(t26269*t26269)*t26395*t26489*(7.0/2.0))*(-1.0/2.0)+c0*t26440*t26443*t26418*(t26307*t26308*t26417*(1.0E1/9.0)-t26307*t26434*t26437*t26438*(8.0/3.0)+t26307*1.0/(t26416*t26416*t26416*t26416)*t26390*(t26437*t26437)*6.0-t26307*t26434*t26390*(c*k2*t26262*(4.0/9.0)+c*k1*t26262*t26287*(2.0/9.0)-k1*t26323*t26307*t26308*(1.0/3.6E1))*2.0)*(1.0/2.0)+c0*t26431*t26440*t26418*t26445+c0*t26431*t26418*t26455*t26456+c0*t26550*t26443*t26418*t26549*(1.0/2.0)+c0*t26443*t26418*t26456*t26567*(1.0/2.0)-c0*t26440*t26443*t26418*(t26445*t26445)*(1.0/2.0)-c0*t26443*t26418*t26445*t26455*t26456)-c0*t26431*t26440*t26418+c0*t26440*t26443*t26418*t26445+c0*t26443*t26418*t26455*t26456;
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t27322 = tspi_m13*tspi_m13;
                double t27323 = 1.0/pow(rho_a,1.0/3.0);
                double t27324 = a2*a2;
                double t27325 = gamma_aa*gamma_aa;
                double t27326 = 1.0/pow(rho_a,1.6E1/3.0);
                double t27327 = t27322*t27322;
                double t27328 = c*t27323;
                double t27329 = pow(t27328,4.0/5.0);
                double t27343 = rab1*t27329;
                double t27330 = exp(-t27343);
                double t27331 = t27330-1.0;
                double t27344 = kab1*t27331;
                double t27332 = kab0-t27344;
                double t27333 = 1.0/c;
                double t27334 = 1.0/pow(rho_a,7.0/3.0);
                double t27335 = a3*gamma_aa*t27322*t27333*t27334;
                double t27336 = t27335+1.0;
                double t27337 = t27324*t27325*t27326*t27327;
                double t27338 = 1.0/pow(rho_a,8.0/3.0);
                double t27339 = a1*gamma_aa*t27322*t27338;
                double t27340 = t27337+t27339+1.0;
                double t27341 = t27324*t27325*t27326*t27327*2.0;
                double t27342 = exp(t27341);
                double t27345 = 1.0/(t27332*t27332);
                double t27346 = 1.0/(t27340*t27340);
                double t27347 = c*c0*t27323*t27342*t27336*t27345*t27346*(2.0/3.0);
                double t27348 = a1*t27322*t27338;
                double t27349 = gamma_aa*t27324*t27326*t27327*2.0;
                double t27350 = t27348+t27349;
                double t27351 = 1.0/pow(rho_a,1.7E1/3.0);
                double t27352 = 1.0/(t27340*t27340*t27340);
                double t27353 = sqrt(t27347);
                double t27355 = a3*c0*t27322*t27342*t27345*t27346*t27338*(2.0/3.0);
                double t27356 = c*c0*t27323*t27350*t27342*t27352*t27336*t27345*(4.0/3.0);
                double t27357 = c*c0*gamma_aa*t27324*t27342*t27351*t27327*t27336*t27345*t27346*(8.0/3.0);
                double t27354 = t27355-t27356+t27357;
                double t27358 = t27350*t27350;
                double t27359 = 1.0/(t27340*t27340*t27340*t27340);
                double t27360 = c*c0*t27323*t27342*t27336*t27345*t27358*t27359*4.0;
                double t27361 = c*c0*t27324*t27342*t27351*t27327*t27336*t27345*t27346*(8.0/3.0);
                double t27362 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t27363 = a3*c0*gamma_aa*t27322*t27324*t27342*t27362*t27327*t27345*t27346*(1.6E1/3.0);
                double t27364 = exp(t27347);
                double t27365 = Ei(-t27347);
                double t27366 = t27324*t27324;
                double t27367 = 1.0/pow(rho_a,1.1E1);
                double t27368 = t27327*t27327;
                double t27369 = c*c0*t27342*t27325*t27336*t27345*t27346*t27366*t27367*t27368*(3.2E1/3.0);
                double t27372 = c*c0*gamma_aa*t27350*t27324*t27342*t27351*t27352*t27327*t27336*t27345*(3.2E1/3.0);
                double t27377 = a3*c0*t27322*t27350*t27342*t27352*t27345*t27338*(8.0/3.0);
                double t27378 = c*c0*t27324*t27342*t27351*t27352*t27327*t27336*t27345*(8.0/3.0);
                double t27370 = t27360+t27361+t27363-t27372-t27377+t27369-t27378;
                double t27371 = t27354*t27354;
                double t27373 = t27353*6.0;
                double t27374 = c*c0*t27323*t27342*t27336*t27345*t27346*4.0;
                double t27375 = t27373+t27374+3.0;
                double t27376 = 1.0/t27375;
                double t27379 = 1.0/sqrt(t27347);
                double t27380 = c*c0*t27323*t27342*t27336*t27345*t27346*t27364*t27365*(2.0/3.0);
                double t27381 = t27380+1.0;
                double t27382 = t27354*t27379*2.0;
                double t27383 = a3*c0*t27322*t27342*t27345*t27346*t27338*(8.0/3.0);
                double t27384 = c*c0*gamma_aa*t27324*t27342*t27351*t27327*t27336*t27345*t27346*(3.2E1/3.0);
                double t27421 = c*c0*t27323*t27350*t27342*t27352*t27336*t27345*(1.6E1/3.0);
                double t27385 = -t27421+t27382+t27383+t27384;
                double t27386 = 1.0/(t27375*t27375);
                double t27387 = t27353*4.0;
                double t27388 = c*c0*t27323*t27342*t27336*t27345*t27346*(8.0/3.0);
                double t27389 = t27387+t27388+6.0;
                double t27390 = 1.0/pow(t27347,3.0/2.0);
                double t27391 = t27354*t27379*3.0;
                double t27392 = a3*c0*t27322*t27342*t27345*t27346*t27338*4.0;
                double t27393 = c*c0*gamma_aa*t27324*t27342*t27351*t27327*t27336*t27345*t27346*1.6E1;
                double t27395 = c*c0*t27323*t27350*t27342*t27352*t27336*t27345*8.0;
                double t27394 = t27391+t27392+t27393-t27395;
                double t27396 = a3*c0*t27322*t27342*t27345*t27346*t27364*t27338*t27365*(2.0/3.0);
                double t27397 = c*c0*t27323*t27342*t27336*t27345*t27354*t27346*t27364*t27365*(2.0/3.0);
                double t27398 = c*c0*gamma_aa*t27324*t27342*t27351*t27327*t27336*t27345*t27346*t27364*t27365*(8.0/3.0);
                double t27422 = c*c0*t27323*t27350*t27342*t27352*t27336*t27345*t27364*t27365*(4.0/3.0);
                double t27399 = -t27422+t27355-t27356+t27357+t27396+t27397+t27398;
                double t27400 = 1.0/t27336;
                double t27401 = 1.0/c0;
                double t27402 = pow(rho_a,1.0/3.0);
                double t27403 = exp(-t27341);
                double t27404 = t27332*t27332;
                double t27405 = t27340*t27340;
                double t27406 = 1.0/sqrt(t27336);
                double t27407 = exp(-t27337);
                double t27414 = 1.0/pow(t27336,3.0/2.0);
                double t27418 = t27332*t27350*t27406*t27407*1.0E5;
                double t27419 = a3*t27322*t27340*t27332*t27333*t27414*t27334*t27407*5.0E4;
                double t27420 = gamma_aa*t27340*t27332*t27324*t27406*t27326*t27407*t27327*2.0E5;
                double t27408 = t27420-t27418+t27419;
                double t27409 = c*c0*t27323*(2.0/3.0);
                double t27416 = t27340*t27332*t27406*t27407*1.0E5;
                double t27410 = -t27416+t27409;
                double t27411 = t27364*t27365;
                double t27412 = t27381*t27376*t27389;
                double t27413 = t27411+t27412;
                double t27415 = 1.0/(c*c);
                double t27417 = dirac(t27410);
                double t27423 = a4*a4;
                double t27424 = t27423*t27325*t27326*t27327*2.0;
                double t27425 = exp(t27424);
                double t27426 = sqrt(t27328);
                double t27427 = t27423*t27325*t27326*t27327;
                double t27428 = t27427+1.0;
                double t27429 = 1.0/(t27428*t27428);
                double t27430 = a5*gamma_aa*t27322*t27333*t27334;
                double t27431 = t27430+1.0;
                double t27442 = raa2*t27426;
                double t27432 = exp(-t27442);
                double t27433 = t27432-1.0;
                double t27434 = kaa2*t27433;
                double t27435 = pow(t27328,2.0/5.0);
                double t27443 = raa1*t27435;
                double t27436 = exp(-t27443);
                double t27437 = t27436-1.0;
                double t27438 = kaa1*t27437;
                double t27439 = -kaa0+t27434+t27438;
                double t27440 = 1.0/(t27439*t27439);
                double t27441 = c*c0*t27323*t27431*t27440*t27425*t27429*(2.0/3.0);
                double t27444 = 1.0/t27428;
                double t27445 = c*c0*t27323*t27431*t27440*t27425*(2.0/3.0);
                double t27450 = a5*c0*t27322*t27440*t27425*t27338*(2.0/3.0);
                double t27451 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*(8.0/3.0);
                double t27446 = t27450+t27451;
                double t27447 = sqrt(t27445);
                double t27448 = t27423*t27423;
                double t27449 = 1.0/pow(rho_a,3.2E1/3.0);
                double t27452 = 1.0/sqrt(t27445);
                double t27453 = 1.0/(t27428*t27428*t27428);
                double t27454 = t27444*t27447*6.0;
                double t27455 = c*c0*t27323*t27431*t27440*t27425*t27429*4.0;
                double t27456 = t27454+t27455+3.0;
                double t27457 = 1.0/t27456;
                double t27459 = a5*c0*t27322*t27440*t27425*t27338*t27429*(2.0/3.0);
                double t27460 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27429*(8.0/3.0);
                double t27461 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27453*(8.0/3.0);
                double t27458 = t27460-t27461+t27459;
                double t27462 = exp(t27441);
                double t27463 = Ei(-t27441);
                double t27464 = t27458*t27458;
                double t27465 = 1.0/(t27428*t27428*t27428*t27428);
                double t27466 = a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27429*(1.6E1/3.0);
                double t27467 = c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27429*(8.0/3.0);
                double t27468 = c*c0*t27431*t27440*t27325*t27425*t27429*t27367*t27448*t27368*(3.2E1/3.0);
                double t27469 = c*c0*t27431*t27440*t27325*t27425*t27465*t27367*t27448*t27368*1.6E1;
                double t27501 = a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27453*(1.6E1/3.0);
                double t27502 = c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27453*(8.0/3.0);
                double t27503 = c*c0*t27431*t27440*t27325*t27425*t27453*t27367*t27448*t27368*(6.4E1/3.0);
                double t27470 = -t27501-t27502-t27503+t27466+t27467+t27468+t27469;
                double t27471 = t27444*t27447*4.0;
                double t27472 = c*c0*t27323*t27431*t27440*t27425*t27429*(8.0/3.0);
                double t27473 = t27471+t27472+6.0;
                double t27474 = a5*c0*t27322*t27440*t27425*t27462*t27463*t27338*t27429*(2.0/3.0);
                double t27475 = c*c0*t27323*t27431*t27440*t27425*t27462*t27463*t27429*t27458*(2.0/3.0);
                double t27476 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27462*t27463*t27429*(8.0/3.0);
                double t27518 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27453*t27462*t27463*(8.0/3.0);
                double t27477 = t27460-t27461-t27518+t27474+t27475+t27476+t27459;
                double t27478 = c*c0*t27323*t27431*t27440*t27425*t27462*t27463*t27429*(2.0/3.0);
                double t27479 = t27478+1.0;
                double t27480 = t27452*t27444*t27446*3.0;
                double t27481 = a5*c0*t27322*t27440*t27425*t27338*t27429*4.0;
                double t27482 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27429*1.6E1;
                double t27485 = gamma_aa*t27423*t27326*t27327*t27429*t27447*1.2E1;
                double t27486 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27453*1.6E1;
                double t27483 = t27480+t27481+t27482-t27485-t27486;
                double t27484 = 1.0/(t27456*t27456);
                double t27487 = t27452*t27444*t27446*2.0;
                double t27488 = a5*c0*t27322*t27440*t27425*t27338*t27429*(8.0/3.0);
                double t27489 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27429*(3.2E1/3.0);
                double t27516 = gamma_aa*t27423*t27326*t27327*t27429*t27447*8.0;
                double t27517 = c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27453*(3.2E1/3.0);
                double t27490 = -t27516-t27517+t27487+t27488+t27489;
                double t27491 = a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*(1.6E1/3.0);
                double t27492 = c*c0*t27431*t27440*t27351*t27423*t27425*t27327*(8.0/3.0);
                double t27493 = c*c0*t27431*t27440*t27325*t27425*t27367*t27448*t27368*(3.2E1/3.0);
                double t27494 = t27491+t27492+t27493;
                double t27495 = t27446*t27446;
                double t27496 = 1.0/pow(t27445,3.0/2.0);
                double t27497 = 1.0/t27431;
                double t27498 = exp(-t27424);
                double t27499 = t27428*t27428;
                double t27500 = t27439*t27439;
                double t27504 = 1.0/(rho_a*rho_a);
                double t27505 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t27506 = c*c;
                double t27507 = 1.0/pow(rho_a,2.0/3.0);
                double t27508 = k1*t27426;
                double t27509 = c*k2*t27323;
                double t27510 = t27508+t27509;
                double t27511 = 1.0/(t27510*t27510);
                double t27515 = t27511*t27506*t27507;
                double t27512 = exp(-t27515);
                double t27513 = dirac(t27410,1.0);
                double t27514 = t27408*t27408;
                double t27519 = t27462*t27463;
                double t27520 = t27473*t27457*t27479;
                double t27521 = t27520+t27519;
                double t27522 = t27332*t27324*t27406*t27326*t27407*t27327*2.0E5;
                double t27523 = a3*a3;
                double t27524 = 1.0/pow(rho_a,1.4E1/3.0);
                double t27525 = 1.0/pow(t27336,5.0/2.0);
                double t27526 = t27340*t27332*t27415*t27523*t27407*t27524*t27327*t27525*7.5E4;
                double t27527 = t27340*t27332*t27325*t27406*t27407*t27366*t27368*t27449*4.0E5;
                double t27528 = 1.0/pow(rho_a,2.3E1/3.0);
                double t27529 = a3*gamma_aa*t27322*t27340*t27332*t27324*t27333*t27414*t27407*t27327*t27528*2.0E5;
                double t27530 = t27522+t27526+t27527+t27529-t27340*t27332*t27324*t27406*t27326*t27407*t27327*2.0E5-a3*t27322*t27332*t27350*t27333*t27414*t27334*t27407*1.0E5-gamma_aa*t27332*t27350*t27324*t27406*t27326*t27407*t27327*4.0E5;
                v_gamma_aa_gamma_aa[Q] += scale * rho_b*(c0*heaviside(c*c0*t27323*(-2.0/3.0)+t27340*t27332*t27406*exp(-t27324*t27325*t27326*t27327)*1.0E5)*(t27381*t27376*(-t27371*t27390+t27370*t27379*2.0-a3*c0*t27322*t27350*t27342*t27352*t27345*t27338*(3.2E1/3.0)+c*c0*t27323*t27342*t27336*t27345*t27358*t27359*1.6E1-c*c0*t27324*t27342*t27351*t27352*t27327*t27336*t27345*(3.2E1/3.0)+c*c0*t27324*t27342*t27351*t27327*t27336*t27345*t27346*(3.2E1/3.0)+a3*c0*gamma_aa*t27322*t27324*t27342*t27362*t27327*t27345*t27346*(6.4E1/3.0)+c*c0*t27342*t27325*t27336*t27345*t27346*t27366*t27367*t27368*(1.28E2/3.0)-c*c0*gamma_aa*t27350*t27324*t27342*t27351*t27352*t27327*t27336*t27345*(1.28E2/3.0))+t27376*t27389*(t27360+t27361+t27371+t27363-t27372+t27369-(t27350*t27354*2.0)/t27340+gamma_aa*t27324*t27326*t27327*t27354*4.0+a3*t27400*t27322*t27333*t27334*t27354-a3*c0*t27322*t27350*t27342*t27352*t27345*t27338*(8.0/3.0)-c*c0*t27324*t27342*t27351*t27352*t27327*t27336*t27345*(8.0/3.0)-a3*c0*t27322*t27350*t27342*t27352*t27345*t27364*t27338*t27365*(8.0/3.0)+a3*c0*t27322*t27342*t27345*t27354*t27346*t27364*t27338*t27365*(4.0/3.0)+c*c0*t27323*t27342*t27370*t27336*t27345*t27346*t27364*t27365*(2.0/3.0)+c*c0*t27323*t27342*t27371*t27336*t27345*t27346*t27364*t27365*(2.0/3.0)+c*c0*t27323*t27342*t27336*t27345*t27364*t27365*t27358*t27359*4.0-c*c0*t27323*t27350*t27342*t27352*t27336*t27345*t27354*t27364*t27365*(8.0/3.0)-c*c0*t27324*t27342*t27351*t27352*t27327*t27336*t27345*t27364*t27365*(8.0/3.0)+c*c0*t27324*t27342*t27351*t27327*t27336*t27345*t27346*t27364*t27365*(8.0/3.0)+a3*c0*gamma_aa*t27322*t27324*t27342*t27362*t27327*t27345*t27346*t27364*t27365*(1.6E1/3.0)+c*c0*t27342*t27325*t27336*t27345*t27346*t27364*t27365*t27366*t27367*t27368*(3.2E1/3.0)-c*c0*gamma_aa*t27350*t27324*t27342*t27351*t27352*t27327*t27336*t27345*t27364*t27365*(3.2E1/3.0)+c*c0*gamma_aa*t27324*t27342*t27351*t27327*t27336*t27345*t27354*t27346*t27364*t27365*(1.6E1/3.0))+t27370*t27364*t27365+t27371*t27364*t27365+t27376*t27385*t27399*2.0-t27381*t27385*t27394*t27386*2.0-t27394*t27386*t27389*t27399*2.0-t27381*t27386*t27389*(t27371*t27390*(-3.0/2.0)+t27370*t27379*3.0-a3*c0*t27322*t27350*t27342*t27352*t27345*t27338*1.6E1+c*c0*t27323*t27342*t27336*t27345*t27358*t27359*2.4E1-c*c0*t27324*t27342*t27351*t27352*t27327*t27336*t27345*1.6E1+c*c0*t27324*t27342*t27351*t27327*t27336*t27345*t27346*1.6E1+a3*c0*gamma_aa*t27322*t27324*t27342*t27362*t27327*t27345*t27346*3.2E1+c*c0*t27342*t27325*t27336*t27345*t27346*t27366*t27367*t27368*6.4E1-c*c0*gamma_aa*t27350*t27324*t27342*t27351*t27352*t27327*t27336*t27345*6.4E1)+t27381*1.0/(t27375*t27375*t27375)*(t27394*t27394)*t27389*2.0+t27400*t27401*t27402*t27403*t27404*t27333*t27405*t27370*(3.0/2.0)+t27400*t27401*t27402*t27403*t27404*t27333*t27405*t27371*(3.0/2.0)+t27400*t27401*t27402*t27340*t27403*t27350*t27404*t27333*t27354*3.0-a3*t27401*t27322*t27403*t27404*t27405*t27504*t27415*1.0/(t27336*t27336)*t27354*(3.0/2.0)-gamma_aa*t27400*t27401*t27403*t27404*t27324*t27333*t27405*t27505*t27327*t27354*6.0)*(1.0/2.0)-c0*t27413*t27513*t27514*(1.0/2.0)+c0*t27413*t27530*t27417*(1.0/2.0)-c0*t27408*t27417*(t27354*t27364*t27365+t27381*t27376*t27385+t27376*t27389*t27399-t27381*t27394*t27386*t27389+t27400*t27401*t27402*t27403*t27404*t27333*t27405*t27354*(3.0/2.0)))+rho_a*(c0*t27512*heaviside(t27416-t27409)*(t27473*t27457*(t27464+t27466+t27467+t27468+t27469+gamma_aa*t27423*t27326*t27327*t27458*4.0+a5*t27322*t27333*t27334*t27458*t27497-gamma_aa*t27423*t27326*t27327*t27444*t27458*4.0-c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27453*(8.0/3.0)-a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27453*(1.6E1/3.0)+a5*c0*t27322*t27440*t27425*t27462*t27463*t27338*t27429*t27458*(4.0/3.0)+c*c0*t27323*t27431*t27440*t27425*t27470*t27462*t27463*t27429*(2.0/3.0)+c*c0*t27323*t27431*t27440*t27425*t27462*t27463*t27464*t27429*(2.0/3.0)-c*c0*t27431*t27440*t27325*t27425*t27453*t27367*t27448*t27368*(6.4E1/3.0)-c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27453*t27462*t27463*(8.0/3.0)+c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27462*t27463*t27429*(8.0/3.0)-a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27453*t27462*t27463*(1.6E1/3.0)+a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27462*t27463*t27429*(1.6E1/3.0)-c*c0*t27431*t27440*t27325*t27425*t27453*t27462*t27463*t27367*t27448*t27368*(6.4E1/3.0)+c*c0*t27431*t27440*t27325*t27425*t27462*t27463*t27429*t27367*t27448*t27368*(3.2E1/3.0)+c*c0*t27431*t27440*t27325*t27425*t27462*t27463*t27465*t27367*t27448*t27368*1.6E1-c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27453*t27462*t27463*t27458*(1.6E1/3.0)+c*c0*gamma_aa*t27431*t27440*t27351*t27423*t27425*t27327*t27462*t27463*t27429*t27458*(1.6E1/3.0))+t27470*t27462*t27463+t27462*t27463*t27464+t27490*t27457*t27477*2.0+t27457*t27479*(t27452*t27444*t27494*2.0-t27444*t27495*t27496-t27423*t27326*t27327*t27429*t27447*8.0+t27325*t27453*t27447*t27448*t27368*t27449*3.2E1-gamma_aa*t27423*t27326*t27452*t27327*t27446*t27429*8.0-c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27453*(3.2E1/3.0)+c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27429*(3.2E1/3.0)-a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27453*(6.4E1/3.0)+a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27429*(6.4E1/3.0)-c*c0*t27431*t27440*t27325*t27425*t27453*t27367*t27448*t27368*(2.56E2/3.0)+c*c0*t27431*t27440*t27325*t27425*t27429*t27367*t27448*t27368*(1.28E2/3.0)+c*c0*t27431*t27440*t27325*t27425*t27465*t27367*t27448*t27368*6.4E1)-t27473*t27483*t27484*t27477*2.0-t27490*t27483*t27484*t27479*2.0-t27473*t27484*t27479*(t27452*t27444*t27494*3.0-t27444*t27495*t27496*(3.0/2.0)-t27423*t27326*t27327*t27429*t27447*1.2E1+t27325*t27453*t27447*t27448*t27368*t27449*4.8E1-gamma_aa*t27423*t27326*t27452*t27327*t27446*t27429*1.2E1-c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27453*1.6E1+c*c0*t27431*t27440*t27351*t27423*t27425*t27327*t27429*1.6E1-a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27453*3.2E1+a5*c0*gamma_aa*t27322*t27440*t27423*t27362*t27425*t27327*t27429*3.2E1-c*c0*t27431*t27440*t27325*t27425*t27453*t27367*t27448*t27368*1.28E2+c*c0*t27431*t27440*t27325*t27425*t27429*t27367*t27448*t27368*6.4E1+c*c0*t27431*t27440*t27325*t27425*t27465*t27367*t27448*t27368*9.6E1)+t27473*1.0/(t27456*t27456*t27456)*(t27483*t27483)*t27479*2.0+t27401*t27500*t27402*t27333*t27470*t27497*t27498*t27499*(3.0/2.0)+t27401*t27500*t27402*t27333*t27464*t27497*t27498*t27499*(3.0/2.0)-a5*t27401*t27500*t27322*1.0/(t27431*t27431)*t27504*t27415*t27458*t27498*t27499*(3.0/2.0)+gamma_aa*t27401*t27500*t27333*t27423*t27505*t27327*t27428*t27458*t27497*t27498*6.0-gamma_aa*t27401*t27500*t27333*t27423*t27505*t27327*t27458*t27497*t27498*t27499*6.0)*(1.0/2.0)-c0*t27512*t27521*t27513*t27514*(1.0/2.0)+c0*t27512*t27521*t27530*t27417*(1.0/2.0)-c0*t27512*t27408*t27417*(t27462*t27463*t27458+t27473*t27457*t27477+t27490*t27457*t27479-t27473*t27483*t27484*t27479+t27401*t27500*t27402*t27333*t27458*t27497*t27498*t27499*(3.0/2.0)));
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t27536 = tspi_m13*tspi_m13;
                double t27537 = 1.0/pow(rho_b,1.0/3.0);
                double t27538 = a2*a2;
                double t27539 = gamma_bb*gamma_bb;
                double t27540 = 1.0/pow(rho_b,1.6E1/3.0);
                double t27541 = t27536*t27536;
                double t27542 = c*t27537;
                double t27543 = pow(t27542,4.0/5.0);
                double t27557 = rab1*t27543;
                double t27544 = exp(-t27557);
                double t27545 = t27544-1.0;
                double t27558 = kab1*t27545;
                double t27546 = kab0-t27558;
                double t27547 = 1.0/c;
                double t27548 = 1.0/pow(rho_b,7.0/3.0);
                double t27549 = a3*gamma_bb*t27536*t27547*t27548;
                double t27550 = t27549+1.0;
                double t27551 = t27540*t27541*t27538*t27539;
                double t27552 = 1.0/pow(rho_b,8.0/3.0);
                double t27553 = a1*gamma_bb*t27552*t27536;
                double t27554 = t27551+t27553+1.0;
                double t27555 = t27540*t27541*t27538*t27539*2.0;
                double t27556 = exp(t27555);
                double t27559 = 1.0/(t27546*t27546);
                double t27560 = 1.0/(t27554*t27554);
                double t27561 = c*c0*t27550*t27560*t27537*t27556*t27559*(2.0/3.0);
                double t27562 = a1*t27552*t27536;
                double t27563 = gamma_bb*t27540*t27541*t27538*2.0;
                double t27564 = t27562+t27563;
                double t27565 = 1.0/pow(rho_b,1.7E1/3.0);
                double t27566 = 1.0/(t27554*t27554*t27554);
                double t27567 = sqrt(t27561);
                double t27569 = a3*c0*t27560*t27552*t27536*t27556*t27559*(2.0/3.0);
                double t27570 = c*c0*t27550*t27537*t27564*t27556*t27566*t27559*(4.0/3.0);
                double t27571 = c*c0*gamma_bb*t27541*t27550*t27560*t27538*t27556*t27565*t27559*(8.0/3.0);
                double t27568 = -t27570+t27571+t27569;
                double t27572 = t27564*t27564;
                double t27573 = 1.0/(t27554*t27554*t27554*t27554);
                double t27574 = c*c0*t27550*t27572*t27537*t27573*t27556*t27559*4.0;
                double t27575 = c*c0*t27541*t27550*t27560*t27538*t27556*t27565*t27559*(8.0/3.0);
                double t27576 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t27577 = a3*c0*gamma_bb*t27541*t27560*t27536*t27538*t27556*t27576*t27559*(1.6E1/3.0);
                double t27578 = exp(t27561);
                double t27579 = Ei(-t27561);
                double t27580 = t27538*t27538;
                double t27581 = 1.0/pow(rho_b,1.1E1);
                double t27582 = t27541*t27541;
                double t27583 = c*c0*t27550*t27560*t27580*t27581*t27582*t27556*t27539*t27559*(3.2E1/3.0);
                double t27586 = c*c0*gamma_bb*t27541*t27550*t27564*t27538*t27556*t27565*t27566*t27559*(3.2E1/3.0);
                double t27591 = a3*c0*t27552*t27536*t27564*t27556*t27566*t27559*(8.0/3.0);
                double t27592 = c*c0*t27541*t27550*t27538*t27556*t27565*t27566*t27559*(8.0/3.0);
                double t27584 = -t27591+t27574+t27583-t27592+t27575+t27577-t27586;
                double t27585 = t27568*t27568;
                double t27587 = t27567*6.0;
                double t27588 = c*c0*t27550*t27560*t27537*t27556*t27559*4.0;
                double t27589 = t27587+t27588+3.0;
                double t27590 = 1.0/t27589;
                double t27593 = 1.0/sqrt(t27561);
                double t27594 = c*c0*t27550*t27560*t27537*t27556*t27559*t27578*t27579*(2.0/3.0);
                double t27595 = t27594+1.0;
                double t27596 = t27593*t27568*2.0;
                double t27597 = a3*c0*t27560*t27552*t27536*t27556*t27559*(8.0/3.0);
                double t27598 = c*c0*gamma_bb*t27541*t27550*t27560*t27538*t27556*t27565*t27559*(3.2E1/3.0);
                double t27635 = c*c0*t27550*t27537*t27564*t27556*t27566*t27559*(1.6E1/3.0);
                double t27599 = -t27635+t27596+t27597+t27598;
                double t27600 = 1.0/(t27589*t27589);
                double t27601 = t27567*4.0;
                double t27602 = c*c0*t27550*t27560*t27537*t27556*t27559*(8.0/3.0);
                double t27603 = t27601+t27602+6.0;
                double t27604 = 1.0/pow(t27561,3.0/2.0);
                double t27605 = t27593*t27568*3.0;
                double t27606 = a3*c0*t27560*t27552*t27536*t27556*t27559*4.0;
                double t27607 = c*c0*gamma_bb*t27541*t27550*t27560*t27538*t27556*t27565*t27559*1.6E1;
                double t27609 = c*c0*t27550*t27537*t27564*t27556*t27566*t27559*8.0;
                double t27608 = t27605+t27606+t27607-t27609;
                double t27610 = a3*c0*t27560*t27552*t27536*t27556*t27559*t27578*t27579*(2.0/3.0);
                double t27611 = c*c0*t27550*t27560*t27537*t27556*t27559*t27568*t27578*t27579*(2.0/3.0);
                double t27612 = c*c0*gamma_bb*t27541*t27550*t27560*t27538*t27556*t27565*t27559*t27578*t27579*(8.0/3.0);
                double t27636 = c*c0*t27550*t27537*t27564*t27556*t27566*t27559*t27578*t27579*(4.0/3.0);
                double t27613 = t27610+t27611+t27612-t27570+t27571-t27636+t27569;
                double t27614 = 1.0/t27550;
                double t27615 = 1.0/c0;
                double t27616 = pow(rho_b,1.0/3.0);
                double t27617 = exp(-t27555);
                double t27618 = t27546*t27546;
                double t27619 = t27554*t27554;
                double t27620 = 1.0/sqrt(t27550);
                double t27621 = exp(-t27551);
                double t27628 = 1.0/pow(t27550,3.0/2.0);
                double t27632 = t27620*t27621*t27546*t27564*1.0E5;
                double t27633 = a3*t27621*t27536*t27554*t27546*t27547*t27628*t27548*5.0E4;
                double t27634 = gamma_bb*t27620*t27540*t27621*t27541*t27554*t27546*t27538*2.0E5;
                double t27622 = -t27632+t27633+t27634;
                double t27623 = c*c0*t27537*(2.0/3.0);
                double t27630 = t27620*t27621*t27554*t27546*1.0E5;
                double t27624 = -t27630+t27623;
                double t27625 = t27578*t27579;
                double t27626 = t27603*t27590*t27595;
                double t27627 = t27625+t27626;
                double t27629 = 1.0/(c*c);
                double t27631 = dirac(t27624);
                double t27637 = a4*a4;
                double t27638 = t27540*t27541*t27637*t27539*2.0;
                double t27639 = exp(t27638);
                double t27640 = sqrt(t27542);
                double t27641 = t27540*t27541*t27637*t27539;
                double t27642 = t27641+1.0;
                double t27643 = 1.0/(t27642*t27642);
                double t27644 = a5*gamma_bb*t27536*t27547*t27548;
                double t27645 = t27644+1.0;
                double t27656 = raa2*t27640;
                double t27646 = exp(-t27656);
                double t27647 = t27646-1.0;
                double t27648 = kaa2*t27647;
                double t27649 = pow(t27542,2.0/5.0);
                double t27657 = raa1*t27649;
                double t27650 = exp(-t27657);
                double t27651 = t27650-1.0;
                double t27652 = kaa1*t27651;
                double t27653 = -kaa0+t27652+t27648;
                double t27654 = 1.0/(t27653*t27653);
                double t27655 = c*c0*t27643*t27537*t27645*t27654*t27639*(2.0/3.0);
                double t27658 = 1.0/t27642;
                double t27659 = c*c0*t27537*t27645*t27654*t27639*(2.0/3.0);
                double t27664 = a5*c0*t27552*t27536*t27654*t27639*(2.0/3.0);
                double t27665 = c*c0*gamma_bb*t27541*t27645*t27654*t27565*t27637*t27639*(8.0/3.0);
                double t27660 = t27664+t27665;
                double t27661 = sqrt(t27659);
                double t27662 = t27637*t27637;
                double t27663 = 1.0/pow(rho_b,3.2E1/3.0);
                double t27666 = 1.0/sqrt(t27659);
                double t27667 = 1.0/(t27642*t27642*t27642);
                double t27668 = t27661*t27658*6.0;
                double t27669 = c*c0*t27643*t27537*t27645*t27654*t27639*4.0;
                double t27670 = t27668+t27669+3.0;
                double t27671 = 1.0/t27670;
                double t27673 = a5*c0*t27552*t27643*t27536*t27654*t27639*(2.0/3.0);
                double t27674 = c*c0*gamma_bb*t27541*t27643*t27645*t27654*t27565*t27637*t27639*(8.0/3.0);
                double t27675 = c*c0*gamma_bb*t27541*t27645*t27654*t27565*t27637*t27639*t27667*(8.0/3.0);
                double t27672 = t27673+t27674-t27675;
                double t27676 = exp(t27655);
                double t27677 = Ei(-t27655);
                double t27678 = t27672*t27672;
                double t27679 = 1.0/(t27642*t27642*t27642*t27642);
                double t27680 = a5*c0*gamma_bb*t27541*t27643*t27536*t27654*t27637*t27576*t27639*(1.6E1/3.0);
                double t27681 = c*c0*t27541*t27643*t27645*t27654*t27565*t27637*t27639*(8.0/3.0);
                double t27682 = c*c0*t27643*t27581*t27662*t27582*t27645*t27654*t27539*t27639*(3.2E1/3.0);
                double t27683 = c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27679*1.6E1;
                double t27715 = a5*c0*gamma_bb*t27541*t27536*t27654*t27637*t27576*t27639*t27667*(1.6E1/3.0);
                double t27716 = c*c0*t27541*t27645*t27654*t27565*t27637*t27639*t27667*(8.0/3.0);
                double t27717 = c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27667*(6.4E1/3.0);
                double t27684 = -t27715+t27680-t27716+t27681-t27717+t27682+t27683;
                double t27685 = t27661*t27658*4.0;
                double t27686 = c*c0*t27643*t27537*t27645*t27654*t27639*(8.0/3.0);
                double t27687 = t27685+t27686+6.0;
                double t27688 = a5*c0*t27552*t27643*t27536*t27654*t27639*t27676*t27677*(2.0/3.0);
                double t27689 = c*c0*t27643*t27537*t27645*t27654*t27672*t27639*t27676*t27677*(2.0/3.0);
                double t27690 = c*c0*gamma_bb*t27541*t27643*t27645*t27654*t27565*t27637*t27639*t27676*t27677*(8.0/3.0);
                double t27732 = c*c0*gamma_bb*t27541*t27645*t27654*t27565*t27637*t27639*t27667*t27676*t27677*(8.0/3.0);
                double t27691 = -t27732+t27690+t27673+t27674-t27675+t27688+t27689;
                double t27692 = c*c0*t27643*t27537*t27645*t27654*t27639*t27676*t27677*(2.0/3.0);
                double t27693 = t27692+1.0;
                double t27694 = t27660*t27666*t27658*3.0;
                double t27695 = a5*c0*t27552*t27643*t27536*t27654*t27639*4.0;
                double t27696 = c*c0*gamma_bb*t27541*t27643*t27645*t27654*t27565*t27637*t27639*1.6E1;
                double t27699 = gamma_bb*t27540*t27541*t27643*t27661*t27637*1.2E1;
                double t27700 = c*c0*gamma_bb*t27541*t27645*t27654*t27565*t27637*t27639*t27667*1.6E1;
                double t27697 = -t27700+t27694+t27695+t27696-t27699;
                double t27698 = 1.0/(t27670*t27670);
                double t27701 = t27660*t27666*t27658*2.0;
                double t27702 = a5*c0*t27552*t27643*t27536*t27654*t27639*(8.0/3.0);
                double t27703 = c*c0*gamma_bb*t27541*t27643*t27645*t27654*t27565*t27637*t27639*(3.2E1/3.0);
                double t27730 = gamma_bb*t27540*t27541*t27643*t27661*t27637*8.0;
                double t27731 = c*c0*gamma_bb*t27541*t27645*t27654*t27565*t27637*t27639*t27667*(3.2E1/3.0);
                double t27704 = t27701+t27702+t27703-t27730-t27731;
                double t27705 = a5*c0*gamma_bb*t27541*t27536*t27654*t27637*t27576*t27639*(1.6E1/3.0);
                double t27706 = c*c0*t27541*t27645*t27654*t27565*t27637*t27639*(8.0/3.0);
                double t27707 = c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*(3.2E1/3.0);
                double t27708 = t27705+t27706+t27707;
                double t27709 = t27660*t27660;
                double t27710 = 1.0/pow(t27659,3.0/2.0);
                double t27711 = 1.0/t27645;
                double t27712 = exp(-t27638);
                double t27713 = t27642*t27642;
                double t27714 = t27653*t27653;
                double t27718 = 1.0/(rho_b*rho_b);
                double t27719 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t27720 = c*c;
                double t27721 = 1.0/pow(rho_b,2.0/3.0);
                double t27722 = k1*t27640;
                double t27723 = c*k2*t27537;
                double t27724 = t27722+t27723;
                double t27725 = 1.0/(t27724*t27724);
                double t27729 = t27720*t27721*t27725;
                double t27726 = exp(-t27729);
                double t27727 = dirac(t27624,1.0);
                double t27728 = t27622*t27622;
                double t27733 = t27676*t27677;
                double t27734 = t27671*t27693*t27687;
                double t27735 = t27733+t27734;
                double t27736 = t27620*t27540*t27621*t27541*t27546*t27538*2.0E5;
                double t27737 = a3*a3;
                double t27738 = 1.0/pow(rho_b,1.4E1/3.0);
                double t27739 = 1.0/pow(t27550,5.0/2.0);
                double t27740 = t27621*t27541*t27554*t27546*t27629*t27737*t27738*t27739*7.5E4;
                double t27741 = t27620*t27621*t27580*t27554*t27546*t27582*t27663*t27539*4.0E5;
                double t27742 = 1.0/pow(rho_b,2.3E1/3.0);
                double t27743 = a3*gamma_bb*t27621*t27541*t27742*t27536*t27554*t27546*t27538*t27547*t27628*2.0E5;
                double t27744 = t27740+t27741+t27743+t27736-t27620*t27540*t27621*t27541*t27554*t27546*t27538*2.0E5-a3*t27621*t27536*t27546*t27564*t27547*t27628*t27548*1.0E5-gamma_bb*t27620*t27540*t27621*t27541*t27546*t27564*t27538*4.0E5;
                v_gamma_bb_gamma_bb[Q] += scale * rho_a*(c0*heaviside(c*c0*t27537*(-2.0/3.0)+t27620*t27554*t27546*exp(-t27540*t27541*t27538*t27539)*1.0E5)*(t27590*t27595*(-t27604*t27585+t27584*t27593*2.0-a3*c0*t27552*t27536*t27564*t27556*t27566*t27559*(3.2E1/3.0)+c*c0*t27550*t27572*t27537*t27573*t27556*t27559*1.6E1+c*c0*t27541*t27550*t27560*t27538*t27556*t27565*t27559*(3.2E1/3.0)-c*c0*t27541*t27550*t27538*t27556*t27565*t27566*t27559*(3.2E1/3.0)+a3*c0*gamma_bb*t27541*t27560*t27536*t27538*t27556*t27576*t27559*(6.4E1/3.0)+c*c0*t27550*t27560*t27580*t27581*t27582*t27556*t27539*t27559*(1.28E2/3.0)-c*c0*gamma_bb*t27541*t27550*t27564*t27538*t27556*t27565*t27566*t27559*(1.28E2/3.0))+t27603*t27590*(t27574+t27583+t27575+t27585+t27577-t27586-(t27564*t27568*2.0)/t27554+gamma_bb*t27540*t27541*t27538*t27568*4.0+a3*t27614*t27536*t27547*t27548*t27568-a3*c0*t27552*t27536*t27564*t27556*t27566*t27559*(8.0/3.0)-c*c0*t27541*t27550*t27538*t27556*t27565*t27566*t27559*(8.0/3.0)+a3*c0*t27560*t27552*t27536*t27556*t27559*t27568*t27578*t27579*(4.0/3.0)-a3*c0*t27552*t27536*t27564*t27556*t27566*t27559*t27578*t27579*(8.0/3.0)+c*c0*t27550*t27560*t27537*t27556*t27584*t27559*t27578*t27579*(2.0/3.0)+c*c0*t27550*t27560*t27537*t27556*t27585*t27559*t27578*t27579*(2.0/3.0)+c*c0*t27550*t27572*t27537*t27573*t27556*t27559*t27578*t27579*4.0+c*c0*t27541*t27550*t27560*t27538*t27556*t27565*t27559*t27578*t27579*(8.0/3.0)-c*c0*t27541*t27550*t27538*t27556*t27565*t27566*t27559*t27578*t27579*(8.0/3.0)-c*c0*t27550*t27537*t27564*t27556*t27566*t27559*t27568*t27578*t27579*(8.0/3.0)+a3*c0*gamma_bb*t27541*t27560*t27536*t27538*t27556*t27576*t27559*t27578*t27579*(1.6E1/3.0)+c*c0*t27550*t27560*t27580*t27581*t27582*t27556*t27539*t27559*t27578*t27579*(3.2E1/3.0)+c*c0*gamma_bb*t27541*t27550*t27560*t27538*t27556*t27565*t27559*t27568*t27578*t27579*(1.6E1/3.0)-c*c0*gamma_bb*t27541*t27550*t27564*t27538*t27556*t27565*t27566*t27559*t27578*t27579*(3.2E1/3.0))+t27613*t27590*t27599*2.0+t27584*t27578*t27579+t27585*t27578*t27579-t27600*t27603*t27613*t27608*2.0-t27600*t27608*t27595*t27599*2.0-t27600*t27603*t27595*(t27604*t27585*(-3.0/2.0)+t27584*t27593*3.0-a3*c0*t27552*t27536*t27564*t27556*t27566*t27559*1.6E1+c*c0*t27550*t27572*t27537*t27573*t27556*t27559*2.4E1+c*c0*t27541*t27550*t27560*t27538*t27556*t27565*t27559*1.6E1-c*c0*t27541*t27550*t27538*t27556*t27565*t27566*t27559*1.6E1+a3*c0*gamma_bb*t27541*t27560*t27536*t27538*t27556*t27576*t27559*3.2E1+c*c0*t27550*t27560*t27580*t27581*t27582*t27556*t27539*t27559*6.4E1-c*c0*gamma_bb*t27541*t27550*t27564*t27538*t27556*t27565*t27566*t27559*6.4E1)+t27603*(t27608*t27608)*t27595*1.0/(t27589*t27589*t27589)*2.0+t27614*t27615*t27616*t27617*t27618*t27547*t27619*t27584*(3.0/2.0)+t27614*t27615*t27616*t27617*t27618*t27547*t27619*t27585*(3.0/2.0)+t27614*t27615*t27616*t27554*t27617*t27564*t27618*t27547*t27568*3.0-a3*1.0/(t27550*t27550)*t27615*t27536*t27617*t27618*t27619*t27718*t27629*t27568*(3.0/2.0)-gamma_bb*t27541*t27614*t27615*t27617*t27618*t27538*t27547*t27619*t27719*t27568*6.0)*(1.0/2.0)+c0*t27631*t27627*t27744*(1.0/2.0)-c0*t27627*t27727*t27728*(1.0/2.0)-c0*t27622*t27631*(t27603*t27613*t27590+t27590*t27595*t27599+t27568*t27578*t27579-t27600*t27603*t27608*t27595+t27614*t27615*t27616*t27617*t27618*t27547*t27619*t27568*(3.0/2.0)))+rho_b*(c0*t27726*heaviside(t27630-t27623)*(t27671*t27687*(t27680+t27681+t27682+t27683+t27678+gamma_bb*t27540*t27541*t27672*t27637*4.0+a5*t27711*t27536*t27672*t27547*t27548-gamma_bb*t27540*t27541*t27672*t27637*t27658*4.0-c*c0*t27541*t27645*t27654*t27565*t27637*t27639*t27667*(8.0/3.0)-a5*c0*gamma_bb*t27541*t27536*t27654*t27637*t27576*t27639*t27667*(1.6E1/3.0)+a5*c0*t27552*t27643*t27536*t27654*t27672*t27639*t27676*t27677*(4.0/3.0)-c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27667*(6.4E1/3.0)+c*c0*t27643*t27537*t27645*t27654*t27639*t27684*t27676*t27677*(2.0/3.0)+c*c0*t27643*t27537*t27645*t27654*t27639*t27676*t27677*t27678*(2.0/3.0)+c*c0*t27541*t27643*t27645*t27654*t27565*t27637*t27639*t27676*t27677*(8.0/3.0)-c*c0*t27541*t27645*t27654*t27565*t27637*t27639*t27667*t27676*t27677*(8.0/3.0)+a5*c0*gamma_bb*t27541*t27643*t27536*t27654*t27637*t27576*t27639*t27676*t27677*(1.6E1/3.0)-a5*c0*gamma_bb*t27541*t27536*t27654*t27637*t27576*t27639*t27667*t27676*t27677*(1.6E1/3.0)+c*c0*t27643*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27676*t27677*(3.2E1/3.0)-c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27667*t27676*t27677*(6.4E1/3.0)+c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27676*t27677*t27679*1.6E1+c*c0*gamma_bb*t27541*t27643*t27645*t27654*t27672*t27565*t27637*t27639*t27676*t27677*(1.6E1/3.0)-c*c0*gamma_bb*t27541*t27645*t27654*t27672*t27565*t27637*t27639*t27667*t27676*t27677*(1.6E1/3.0))+t27704*t27671*t27691*2.0+t27684*t27676*t27677+t27676*t27677*t27678-t27671*t27693*(t27710*t27709*t27658-t27708*t27666*t27658*2.0+t27540*t27541*t27643*t27661*t27637*8.0-t27661*t27662*t27582*t27663*t27539*t27667*3.2E1+gamma_bb*t27540*t27541*t27660*t27643*t27637*t27666*8.0-c*c0*t27541*t27643*t27645*t27654*t27565*t27637*t27639*(3.2E1/3.0)+c*c0*t27541*t27645*t27654*t27565*t27637*t27639*t27667*(3.2E1/3.0)-a5*c0*gamma_bb*t27541*t27643*t27536*t27654*t27637*t27576*t27639*(6.4E1/3.0)+a5*c0*gamma_bb*t27541*t27536*t27654*t27637*t27576*t27639*t27667*(6.4E1/3.0)-c*c0*t27643*t27581*t27662*t27582*t27645*t27654*t27539*t27639*(1.28E2/3.0)+c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27667*(2.56E2/3.0)-c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27679*6.4E1)-t27704*t27693*t27697*t27698*2.0-t27691*t27687*t27697*t27698*2.0+t27693*t27687*t27698*(t27710*t27709*t27658*(3.0/2.0)-t27708*t27666*t27658*3.0+t27540*t27541*t27643*t27661*t27637*1.2E1-t27661*t27662*t27582*t27663*t27539*t27667*4.8E1+gamma_bb*t27540*t27541*t27660*t27643*t27637*t27666*1.2E1-c*c0*t27541*t27643*t27645*t27654*t27565*t27637*t27639*1.6E1+c*c0*t27541*t27645*t27654*t27565*t27637*t27639*t27667*1.6E1-a5*c0*gamma_bb*t27541*t27643*t27536*t27654*t27637*t27576*t27639*3.2E1+a5*c0*gamma_bb*t27541*t27536*t27654*t27637*t27576*t27639*t27667*3.2E1-c*c0*t27643*t27581*t27662*t27582*t27645*t27654*t27539*t27639*6.4E1+c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27667*1.28E2-c*c0*t27581*t27662*t27582*t27645*t27654*t27539*t27639*t27679*9.6E1)+1.0/(t27670*t27670*t27670)*t27693*t27687*(t27697*t27697)*2.0+t27711*t27712*t27713*t27615*t27714*t27616*t27547*t27684*(3.0/2.0)+t27711*t27712*t27713*t27615*t27714*t27616*t27547*t27678*(3.0/2.0)-a5*t27712*t27713*t27615*t27714*t27536*1.0/(t27645*t27645)*t27672*t27718*t27629*(3.0/2.0)-gamma_bb*t27711*t27541*t27712*t27713*t27615*t27714*t27672*t27547*t27637*t27719*6.0+gamma_bb*t27711*t27541*t27712*t27615*t27642*t27714*t27672*t27547*t27637*t27719*6.0)*(1.0/2.0)+c0*t27631*t27726*t27735*t27744*(1.0/2.0)-c0*t27726*t27735*t27727*t27728*(1.0/2.0)-c0*t27622*t27631*t27726*(t27704*t27671*t27693+t27671*t27691*t27687+t27672*t27676*t27677-t27693*t27687*t27697*t27698+t27711*t27712*t27713*t27615*t27714*t27616*t27672*t27547*(3.0/2.0)));
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t26570 = tspi_m13*tspi_m13;
                double t26571 = 1.0/pow(rho_a,1.0/3.0);
                double t26572 = a2*a2;
                double t26573 = gamma_aa*gamma_aa;
                double t26574 = 1.0/pow(rho_a,1.6E1/3.0);
                double t26575 = t26570*t26570;
                double t26576 = c*t26571;
                double t26577 = a4*a4;
                double t26578 = 1.0/c;
                double t26579 = 1.0/pow(rho_a,7.0/3.0);
                double t26580 = sqrt(t26576);
                double t26581 = t26573*t26574*t26575*t26577*2.0;
                double t26582 = exp(t26581);
                double t26583 = t26573*t26574*t26575*t26577;
                double t26584 = t26583+1.0;
                double t26585 = 1.0/(t26584*t26584);
                double t26586 = a5*gamma_aa*t26570*t26578*t26579;
                double t26587 = t26586+1.0;
                double t26598 = raa2*t26580;
                double t26588 = exp(-t26598);
                double t26589 = t26588-1.0;
                double t26590 = kaa2*t26589;
                double t26591 = pow(t26576,2.0/5.0);
                double t26599 = raa1*t26591;
                double t26592 = exp(-t26599);
                double t26593 = t26592-1.0;
                double t26594 = kaa1*t26593;
                double t26595 = -kaa0+t26590+t26594;
                double t26596 = 1.0/(t26595*t26595);
                double t26597 = c*c0*t26571*t26582*t26585*t26587*t26596*(2.0/3.0);
                double t26600 = 1.0/pow(rho_a,8.0/3.0);
                double t26601 = 1.0/pow(rho_a,4.0/3.0);
                double t26602 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t26603 = 1.0/pow(rho_a,2.0E1/3.0);
                double t26604 = 1.0/(t26584*t26584*t26584);
                double t26605 = t26577*t26577;
                double t26606 = 1.0/pow(rho_a,1.2E1);
                double t26607 = t26575*t26575;
                double t26608 = 1.0/sqrt(t26576);
                double t26609 = c*kaa2*raa2*t26601*t26608*t26588*(1.0/6.0);
                double t26610 = 1.0/pow(t26576,3.0/5.0);
                double t26611 = c*kaa1*raa1*t26601*t26610*t26592*(2.0/1.5E1);
                double t26612 = t26611+t26609;
                double t26613 = 1.0/(t26595*t26595*t26595);
                double t26614 = 1.0/pow(rho_a,1.7E1/3.0);
                double t26615 = 1.0/t26584;
                double t26616 = c*c0*t26571*t26582*t26587*t26596*(2.0/3.0);
                double t26617 = sqrt(t26616);
                double t26618 = 1.0/pow(rho_a,1.1E1/3.0);
                double t26619 = exp(t26597);
                double t26620 = Ei(-t26597);
                double t26621 = c*c0*t26601*t26582*t26585*t26587*t26596*(2.0/9.0);
                double t26622 = a5*c0*gamma_aa*t26570*t26582*t26618*t26585*t26596*(1.4E1/9.0);
                double t26623 = c*c0*t26612*t26613*t26571*t26582*t26585*t26587*(4.0/3.0);
                double t26624 = c*c0*t26603*t26573*t26582*t26575*t26585*t26577*t26587*t26596*(6.4E1/9.0);
                double t26625 = t26615*t26617*6.0;
                double t26626 = c*c0*t26571*t26582*t26585*t26587*t26596*4.0;
                double t26627 = t26625+t26626+3.0;
                double t26628 = 1.0/t26627;
                double t26629 = a5*c0*t26600*t26570*t26582*t26585*t26596*(2.0/3.0);
                double t26630 = c*c0*gamma_aa*t26614*t26582*t26575*t26585*t26577*t26587*t26596*(8.0/3.0);
                double t26631 = 1.0/sqrt(t26616);
                double t26634 = c*c0*gamma_aa*t26604*t26614*t26582*t26575*t26577*t26587*t26596*(8.0/3.0);
                double t26632 = t26630-t26634+t26629;
                double t26645 = c*c0*t26603*t26604*t26573*t26582*t26575*t26577*t26587*t26596*(6.4E1/9.0);
                double t26633 = t26621+t26622+t26623+t26624-t26645;
                double t26635 = 1.0/pow(rho_a,1.9E1/3.0);
                double t26636 = a5*c0*t26570*t26582*t26618*t26585*t26596*(1.6E1/9.0);
                double t26637 = a5*c0*t26600*t26612*t26613*t26570*t26582*t26585*(4.0/3.0);
                double t26638 = a5*c0*t26602*t26570*t26573*t26582*t26575*t26585*t26577*t26596*(4.0E1/3.0);
                double t26639 = c*c0*gamma_aa*t26603*t26582*t26575*t26585*t26577*t26587*t26596*(1.36E2/9.0);
                double t26640 = c*c0*gamma_aa*t26605*t26606*t26607*t26573*t26582*t26585*t26587*t26596*(2.56E2/9.0);
                double t26641 = 1.0/(t26584*t26584*t26584*t26584);
                double t26642 = c*c0*gamma_aa*t26605*t26641*t26606*t26607*t26573*t26582*t26587*t26596*(1.28E2/3.0);
                double t26643 = c*c0*gamma_aa*t26612*t26613*t26614*t26582*t26575*t26585*t26577*t26587*(1.6E1/3.0);
                double t26646 = c*c0*gamma_aa*t26603*t26604*t26582*t26575*t26577*t26587*t26596*(1.36E2/9.0);
                double t26647 = c*c0*gamma_aa*t26604*t26605*t26606*t26607*t26573*t26582*t26587*t26596*(5.12E2/9.0);
                double t26648 = c*c0*gamma_aa*t26612*t26604*t26613*t26614*t26582*t26575*t26577*t26587*(1.6E1/3.0);
                double t26705 = a5*c0*t26602*t26604*t26570*t26573*t26582*t26575*t26577*t26596*(4.0E1/3.0);
                double t26644 = t26640+t26642-t26705+t26643+t26636+t26637-t26646+t26638-t26647+t26639-t26648;
                double t26649 = a5*c0*t26600*t26570*t26582*t26596*(2.0/3.0);
                double t26650 = c*c0*gamma_aa*t26614*t26582*t26575*t26577*t26587*t26596*(8.0/3.0);
                double t26651 = t26650+t26649;
                double t26652 = c*c0*t26601*t26582*t26587*t26596*(2.0/9.0);
                double t26653 = a5*c0*gamma_aa*t26570*t26582*t26618*t26596*(1.4E1/9.0);
                double t26654 = c*c0*t26612*t26613*t26571*t26582*t26587*(4.0/3.0);
                double t26655 = c*c0*t26603*t26573*t26582*t26575*t26577*t26587*t26596*(6.4E1/9.0);
                double t26656 = t26652+t26653+t26654+t26655;
                double t26657 = t26615*t26617*4.0;
                double t26658 = c*c0*t26571*t26582*t26585*t26587*t26596*(8.0/3.0);
                double t26659 = t26657+t26658+6.0;
                double t26660 = a5*c0*t26600*t26620*t26570*t26582*t26619*t26585*t26596*(2.0/3.0);
                double t26661 = c*c0*t26620*t26632*t26571*t26582*t26619*t26585*t26587*t26596*(2.0/3.0);
                double t26662 = c*c0*gamma_aa*t26620*t26614*t26582*t26619*t26575*t26585*t26577*t26587*t26596*(8.0/3.0);
                double t26663 = c*c0*t26620*t26571*t26582*t26619*t26585*t26587*t26596*(2.0/3.0);
                double t26664 = t26663+1.0;
                double t26665 = 1.0/(t26627*t26627);
                double t26666 = a5*c0*t26570*t26582*t26618*t26596*(1.6E1/9.0);
                double t26667 = a5*c0*t26600*t26612*t26613*t26570*t26582*(4.0/3.0);
                double t26668 = a5*c0*t26602*t26570*t26573*t26582*t26575*t26577*t26596*(4.0E1/3.0);
                double t26669 = c*c0*gamma_aa*t26603*t26582*t26575*t26577*t26587*t26596*(1.36E2/9.0);
                double t26670 = c*c0*gamma_aa*t26605*t26606*t26607*t26573*t26582*t26587*t26596*(2.56E2/9.0);
                double t26671 = c*c0*gamma_aa*t26612*t26613*t26614*t26582*t26575*t26577*t26587*(1.6E1/3.0);
                double t26672 = t26670+t26671+t26666+t26667+t26668+t26669;
                double t26673 = 1.0/pow(t26616,3.0/2.0);
                double t26674 = 1.0/pow(rho_a,3.5E1/3.0);
                double t26675 = t26631*t26615*t26651*2.0;
                double t26676 = a5*c0*t26600*t26570*t26582*t26585*t26596*(8.0/3.0);
                double t26677 = c*c0*gamma_aa*t26614*t26582*t26575*t26585*t26577*t26587*t26596*(3.2E1/3.0);
                double t26739 = gamma_aa*t26617*t26574*t26575*t26585*t26577*8.0;
                double t26740 = c*c0*gamma_aa*t26604*t26614*t26582*t26575*t26577*t26587*t26596*(3.2E1/3.0);
                double t26678 = -t26740+t26675+t26676-t26739+t26677;
                double t26679 = t26631*t26615*t26656*3.0;
                double t26680 = c*c0*t26601*t26582*t26585*t26587*t26596*(4.0/3.0);
                double t26681 = a5*c0*gamma_aa*t26570*t26582*t26618*t26585*t26596*(2.8E1/3.0);
                double t26682 = c*c0*t26612*t26613*t26571*t26582*t26585*t26587*8.0;
                double t26683 = c*c0*t26603*t26573*t26582*t26575*t26585*t26577*t26587*t26596*(1.28E2/3.0);
                double t26702 = t26617*t26635*t26573*t26575*t26585*t26577*3.2E1;
                double t26703 = c*c0*t26603*t26604*t26573*t26582*t26575*t26577*t26587*t26596*(1.28E2/3.0);
                double t26684 = -t26702-t26703+t26680+t26681+t26682+t26683+t26679;
                double t26685 = t26631*t26615*t26656*2.0;
                double t26686 = c*c0*t26601*t26582*t26585*t26587*t26596*(8.0/9.0);
                double t26687 = a5*c0*gamma_aa*t26570*t26582*t26618*t26585*t26596*(5.6E1/9.0);
                double t26688 = c*c0*t26612*t26613*t26571*t26582*t26585*t26587*(1.6E1/3.0);
                double t26689 = c*c0*t26603*t26573*t26582*t26575*t26585*t26577*t26587*t26596*(2.56E2/9.0);
                double t26734 = t26617*t26635*t26573*t26575*t26585*t26577*(6.4E1/3.0);
                double t26735 = c*c0*t26603*t26604*t26573*t26582*t26575*t26577*t26587*t26596*(2.56E2/9.0);
                double t26690 = -t26734-t26735+t26685+t26686+t26687+t26688+t26689;
                double t26691 = t26631*t26615*t26651*3.0;
                double t26692 = a5*c0*t26600*t26570*t26582*t26585*t26596*4.0;
                double t26693 = c*c0*gamma_aa*t26614*t26582*t26575*t26585*t26577*t26587*t26596*1.6E1;
                double t26700 = gamma_aa*t26617*t26574*t26575*t26585*t26577*1.2E1;
                double t26701 = c*c0*gamma_aa*t26604*t26614*t26582*t26575*t26577*t26587*t26596*1.6E1;
                double t26694 = -t26700-t26701+t26691+t26692+t26693;
                double t26695 = c*c0*t26601*t26620*t26582*t26619*t26585*t26587*t26596*(2.0/9.0);
                double t26696 = c*c0*t26620*t26612*t26613*t26571*t26582*t26619*t26585*t26587*(4.0/3.0);
                double t26697 = c*c0*t26620*t26633*t26571*t26582*t26619*t26585*t26587*t26596*(2.0/3.0);
                double t26698 = a5*c0*gamma_aa*t26620*t26570*t26582*t26618*t26619*t26585*t26596*(1.4E1/9.0);
                double t26699 = c*c0*t26620*t26603*t26573*t26582*t26619*t26575*t26585*t26577*t26587*t26596*(6.4E1/9.0);
                double t26704 = 1.0/t26587;
                double t26706 = 1.0/c0;
                double t26707 = pow(rho_a,1.0/3.0);
                double t26708 = exp(-t26581);
                double t26709 = t26584*t26584;
                double t26710 = t26595*t26595;
                double t26711 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t26736 = c*c0*t26620*t26603*t26604*t26573*t26582*t26619*t26575*t26577*t26587*t26596*(6.4E1/9.0);
                double t26712 = t26621+t26622+t26623+t26624-t26645-t26736+t26695+t26696+t26697+t26698+t26699;
                double t26741 = c*c0*gamma_aa*t26620*t26604*t26614*t26582*t26619*t26575*t26577*t26587*t26596*(8.0/3.0);
                double t26713 = t26630+t26660-t26741-t26634+t26661+t26662+t26629;
                double t26714 = t26572*t26573*t26574*t26575;
                double t26715 = pow(t26576,4.0/5.0);
                double t26732 = rab1*t26715;
                double t26716 = exp(-t26732);
                double t26717 = t26716-1.0;
                double t26733 = kab1*t26717;
                double t26718 = kab0-t26733;
                double t26719 = a3*gamma_aa*t26570*t26578*t26579;
                double t26720 = t26719+1.0;
                double t26721 = 1.0/sqrt(t26720);
                double t26722 = a1*gamma_aa*t26600*t26570;
                double t26723 = t26722+t26714+1.0;
                double t26724 = c*c;
                double t26725 = 1.0/pow(rho_a,2.0/3.0);
                double t26726 = k1*t26580;
                double t26727 = c*k2*t26571;
                double t26728 = t26726+t26727;
                double t26729 = 1.0/(t26728*t26728);
                double t26738 = t26724*t26725*t26729;
                double t26730 = exp(-t26738);
                double t26731 = exp(-t26714);
                double t26737 = c*c0*t26571*(2.0/3.0);
                double t26742 = t26721*t26731*t26723*t26718*1.0E5;
                double t26743 = 1.0/pow(rho_a,1.0E1/3.0);
                double t26744 = 1.0/pow(t26720,3.0/2.0);
                double t26745 = t26572*t26635*t26573*t26575*(1.6E1/3.0);
                double t26746 = a1*gamma_aa*t26570*t26618*(8.0/3.0);
                double t26747 = t26745+t26746;
                double t26748 = a1*t26600*t26570;
                double t26749 = gamma_aa*t26572*t26574*t26575*2.0;
                double t26750 = t26748+t26749;
                double t26751 = 1.0/(c*c);
                double t26752 = 1.0/pow(t26576,1.0/5.0);
                double t26753 = -t26742+t26737;
                double t26754 = dirac(t26753);
                double t26755 = t26620*t26632*t26619;
                double t26756 = t26628*t26664*t26678;
                double t26757 = t26713*t26628*t26659;
                double t26758 = t26710*t26632*t26704*t26706*t26707*t26708*t26709*t26578*(3.0/2.0);
                double t26892 = t26664*t26665*t26694*t26659;
                double t26759 = t26755+t26756+t26757-t26892+t26758;
                double t26760 = t26620*t26619;
                double t26761 = t26628*t26664*t26659;
                double t26762 = t26760+t26761;
                double t26763 = 1.0/pow(rho_a,5.0/3.0);
                double t26764 = t26724*t26763*t26729*(2.0/3.0);
                double t26765 = 1.0/(t26728*t26728*t26728);
                double t26766 = c*k2*t26601*(1.0/3.0);
                double t26767 = c*k1*t26601*t26608*(1.0/6.0);
                double t26768 = t26766+t26767;
                double t26769 = t26764-t26724*t26725*t26765*t26768*2.0;
                double t26770 = a3*t26731*t26570*t26723*t26744*t26718*t26578*t26579*5.0E4;
                double t26771 = gamma_aa*t26721*t26731*t26723*t26572*t26574*t26718*t26575*2.0E5;
                double t26773 = t26721*t26731*t26750*t26718*1.0E5;
                double t26772 = t26770+t26771-t26773;
                double t26774 = c*c0*t26601*(2.0/9.0);
                double t26775 = t26721*t26731*t26723*t26572*t26635*t26573*t26718*t26575*(1.6E6/3.0);
                double t26776 = a3*gamma_aa*t26731*t26570*t26723*t26743*t26744*t26718*t26578*(3.5E5/3.0);
                double t26886 = t26721*t26731*t26718*t26747*1.0E5;
                double t26887 = c*kab1*rab1*t26601*t26721*t26731*t26723*t26716*t26752*(8.0E4/3.0);
                double t26777 = t26774+t26775+t26776-t26886-t26887;
                double t26778 = t26742-t26737;
                double t26779 = heaviside(t26778);
                double t26780 = t26572*t26573*t26574*t26575*2.0;
                double t26781 = exp(t26780);
                double t26782 = 1.0/(t26718*t26718);
                double t26783 = 1.0/(t26723*t26723);
                double t26784 = c*c0*t26720*t26571*t26781*t26782*t26783*(2.0/3.0);
                double t26785 = 1.0/(t26723*t26723*t26723);
                double t26786 = exp(t26784);
                double t26787 = Ei(-t26784);
                double t26788 = c*c0*t26601*t26720*t26781*t26782*t26783*(2.0/9.0);
                double t26789 = a3*c0*gamma_aa*t26570*t26618*t26781*t26782*t26783*(1.4E1/9.0);
                double t26790 = c*c0*t26603*t26720*t26572*t26573*t26781*t26575*t26782*t26783*(6.4E1/9.0);
                double t26791 = 1.0/(t26718*t26718*t26718);
                double t26792 = sqrt(t26784);
                double t26793 = t26792*6.0;
                double t26794 = c*c0*t26720*t26571*t26781*t26782*t26783*4.0;
                double t26795 = t26793+t26794+3.0;
                double t26796 = 1.0/t26795;
                double t26819 = c*c0*t26720*t26571*t26781*t26782*t26747*t26785*(4.0/3.0);
                double t26820 = c0*kab1*rab1*t26720*t26724*t26716*t26752*t26763*t26781*t26791*t26783*(1.6E1/4.5E1);
                double t26797 = -t26820+t26790-t26819+t26788+t26789;
                double t26798 = 1.0/sqrt(t26784);
                double t26799 = a3*c0*t26600*t26570*t26781*t26782*t26783*(2.0/3.0);
                double t26800 = c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26783*(8.0/3.0);
                double t26802 = c*c0*t26720*t26750*t26571*t26781*t26782*t26785*(4.0/3.0);
                double t26801 = t26800-t26802+t26799;
                double t26803 = a1*t26570*t26618*(8.0/3.0);
                double t26804 = gamma_aa*t26572*t26635*t26575*(3.2E1/3.0);
                double t26805 = t26803+t26804;
                double t26806 = t26572*t26572;
                double t26807 = a3*c0*t26600*t26570*t26781*t26782*t26747*t26785*(4.0/3.0);
                double t26808 = c*c0*t26601*t26720*t26750*t26781*t26782*t26785*(4.0/9.0);
                double t26809 = c*c0*t26720*t26571*t26805*t26781*t26782*t26785*(4.0/3.0);
                double t26810 = 1.0/(t26723*t26723*t26723*t26723);
                double t26811 = a3*c0*gamma_aa*t26570*t26750*t26618*t26781*t26782*t26785*(2.8E1/9.0);
                double t26812 = c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26747*t26785*(1.6E1/3.0);
                double t26813 = c*c0*t26603*t26720*t26750*t26572*t26573*t26781*t26575*t26782*t26785*(1.28E2/9.0);
                double t26814 = 1.0/(rho_a*rho_a*rho_a*rho_a);
                double t26815 = a3*c*c0*kab1*rab1*t26570*t26814*t26716*t26752*t26781*t26791*t26783*(1.6E1/4.5E1);
                double t26816 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t26817 = c0*gamma_aa*kab1*rab1*t26720*t26724*t26572*t26716*t26752*t26816*t26781*t26575*t26791*t26783*(6.4E1/4.5E1);
                double t26822 = a3*c0*t26570*t26618*t26781*t26782*t26783*(1.6E1/9.0);
                double t26823 = c*c0*t26720*t26810*t26750*t26571*t26781*t26782*t26747*4.0;
                double t26824 = a3*c0*t26602*t26570*t26572*t26573*t26781*t26575*t26782*t26783*(4.0E1/3.0);
                double t26825 = c*c0*gamma_aa*t26603*t26720*t26572*t26781*t26575*t26782*t26783*(1.36E2/9.0);
                double t26826 = c*c0*gamma_aa*t26720*t26606*t26607*t26806*t26573*t26781*t26782*t26783*(2.56E2/9.0);
                double t26827 = c0*kab1*rab1*t26720*t26750*t26724*t26716*t26752*t26763*t26781*t26791*t26785*(3.2E1/4.5E1);
                double t26818 = t26811+t26812+t26813-t26822-t26823+t26815-t26824+t26807-t26825+t26808+t26817-t26826+t26809-t26827;
                double t26821 = 1.0/rho_a;
                double t26828 = c*c0*t26720*t26571*t26781*t26782*t26783*t26786*t26787*(2.0/3.0);
                double t26829 = t26828+1.0;
                double t26830 = t26801*t26798*2.0;
                double t26831 = a3*c0*t26600*t26570*t26781*t26782*t26783*(8.0/3.0);
                double t26832 = c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26783*(3.2E1/3.0);
                double t26884 = c*c0*t26720*t26750*t26571*t26781*t26782*t26785*(1.6E1/3.0);
                double t26833 = t26830+t26831+t26832-t26884;
                double t26834 = 1.0/(t26795*t26795);
                double t26835 = t26797*t26798*2.0;
                double t26836 = c*c0*t26601*t26720*t26781*t26782*t26783*(8.0/9.0);
                double t26837 = a3*c0*gamma_aa*t26570*t26618*t26781*t26782*t26783*(5.6E1/9.0);
                double t26838 = c*c0*t26603*t26720*t26572*t26573*t26781*t26575*t26782*t26783*(2.56E2/9.0);
                double t26870 = c*c0*t26720*t26571*t26781*t26782*t26747*t26785*(1.6E1/3.0);
                double t26871 = c0*kab1*rab1*t26720*t26724*t26716*t26752*t26763*t26781*t26791*t26783*(6.4E1/4.5E1);
                double t26839 = -t26870+t26835-t26871+t26836+t26837+t26838;
                double t26840 = t26792*4.0;
                double t26841 = c*c0*t26720*t26571*t26781*t26782*t26783*(8.0/3.0);
                double t26842 = t26840+t26841+6.0;
                double t26843 = t26801*t26798*3.0;
                double t26844 = a3*c0*t26600*t26570*t26781*t26782*t26783*4.0;
                double t26845 = c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26783*1.6E1;
                double t26861 = c*c0*t26720*t26750*t26571*t26781*t26782*t26785*8.0;
                double t26846 = t26843-t26861+t26844+t26845;
                double t26847 = c*c0*t26601*t26720*t26781*t26782*t26783*t26786*t26787*(2.0/9.0);
                double t26848 = a3*c0*gamma_aa*t26570*t26618*t26781*t26782*t26783*t26786*t26787*(1.4E1/9.0);
                double t26849 = c*c0*t26720*t26571*t26781*t26782*t26783*t26786*t26787*t26797*(2.0/3.0);
                double t26850 = c*c0*t26603*t26720*t26572*t26573*t26781*t26575*t26782*t26783*t26786*t26787*(6.4E1/9.0);
                double t26851 = t26797*t26798*3.0;
                double t26852 = c*c0*t26601*t26720*t26781*t26782*t26783*(4.0/3.0);
                double t26853 = a3*c0*gamma_aa*t26570*t26618*t26781*t26782*t26783*(2.8E1/3.0);
                double t26854 = c*c0*t26603*t26720*t26572*t26573*t26781*t26575*t26782*t26783*(1.28E2/3.0);
                double t26862 = c*c0*t26720*t26571*t26781*t26782*t26747*t26785*8.0;
                double t26863 = c0*kab1*rab1*t26720*t26724*t26716*t26752*t26763*t26781*t26791*t26783*(3.2E1/1.5E1);
                double t26855 = t26851+t26852+t26853-t26862+t26854-t26863;
                double t26856 = a3*c0*t26600*t26570*t26781*t26782*t26783*t26786*t26787*(2.0/3.0);
                double t26857 = c*c0*t26720*t26801*t26571*t26781*t26782*t26783*t26786*t26787*(2.0/3.0);
                double t26858 = c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26783*t26786*t26787*(8.0/3.0);
                double t26885 = c*c0*t26720*t26750*t26571*t26781*t26782*t26785*t26786*t26787*(4.0/3.0);
                double t26859 = t26800-t26802+t26856+t26857+t26858-t26885+t26799;
                double t26860 = 1.0/pow(t26784,3.0/2.0);
                double t26864 = 1.0/t26720;
                double t26865 = exp(-t26780);
                double t26866 = t26718*t26718;
                double t26867 = t26723*t26723;
                double t26868 = 1.0/(rho_a*rho_a);
                double t26869 = -t26820+t26850+t26790-t26819+t26847+t26848+t26849+t26788+t26789-c*c0*t26720*t26571*t26781*t26782*t26747*t26785*t26786*t26787*(4.0/3.0)-c0*kab1*rab1*t26720*t26724*t26716*t26752*t26763*t26781*t26791*t26783*t26786*t26787*(1.6E1/4.5E1);
                double t26872 = a3*t26731*t26570*t26723*t26743*t26744*t26718*t26578*(3.5E5/3.0);
                double t26873 = a3*t26731*t26570*t26744*t26718*t26747*t26578*t26579*5.0E4;
                double t26874 = gamma_aa*t26721*t26731*t26723*t26572*t26635*t26718*t26575*(3.2E6/3.0);
                double t26875 = gamma_aa*t26721*t26731*t26572*t26574*t26718*t26575*t26747*2.0E5;
                double t26876 = t26721*t26731*t26750*t26572*t26635*t26573*t26718*t26575*(1.6E6/3.0);
                double t26877 = a3*a3;
                double t26878 = 1.0/pow(t26720,5.0/2.0);
                double t26879 = a3*gamma_aa*t26731*t26570*t26750*t26743*t26744*t26718*t26578*(3.5E5/3.0);
                double t26880 = a3*kab1*rab1*t26731*t26570*t26723*t26716*t26752*t26618*t26744*(4.0E4/3.0);
                double t26881 = 1.0/pow(rho_a,2.6E1/3.0);
                double t26882 = c*gamma_aa*kab1*rab1*t26603*t26721*t26731*t26723*t26572*t26716*t26752*t26575*(1.6E5/3.0);
                double t26883 = t26880+t26872+t26873+t26882+t26874+t26875+t26876+t26879-t26721*t26731*t26805*t26718*1.0E5-c*kab1*rab1*t26601*t26721*t26731*t26750*t26716*t26752*(8.0E4/3.0)-gamma_aa*t26721*t26731*t26723*t26607*t26806*t26573*t26718*t26674*(3.2E6/3.0)-gamma_aa*t26614*t26731*t26723*t26751*t26718*t26575*t26877*t26878*1.75E5-a3*t26731*t26570*t26723*t26572*t26573*t26744*t26718*t26575*t26881*t26578*5.0E5;
                double t26888 = dirac(t26753,1.0);
                double t26889 = t26786*t26787;
                double t26890 = t26842*t26829*t26796;
                double t26891 = t26890+t26889;
                v_rho_a_gamma_aa[Q] += scale * rho_a*(c0*t26730*heaviside(c*c0*t26571*(-2.0/3.0)+t26721*t26723*t26718*exp(-t26572*t26573*t26574*t26575)*1.0E5)*(t26628*t26664*(t26631*t26615*t26672*2.0-t26615*t26651*t26673*t26656-gamma_aa*t26617*t26635*t26575*t26585*t26577*(1.28E2/3.0)+a5*c0*t26570*t26582*t26618*t26585*t26596*(6.4E1/9.0)+gamma_aa*t26604*t26605*t26607*t26617*t26573*t26674*(2.56E2/3.0)-gamma_aa*t26631*t26574*t26575*t26656*t26585*t26577*4.0-t26631*t26651*t26635*t26573*t26575*t26585*t26577*(3.2E1/3.0)+a5*c0*t26600*t26612*t26613*t26570*t26582*t26585*(1.6E1/3.0)-c*c0*gamma_aa*t26603*t26604*t26582*t26575*t26577*t26587*t26596*(5.44E2/9.0)+c*c0*gamma_aa*t26603*t26582*t26575*t26585*t26577*t26587*t26596*(5.44E2/9.0)-a5*c0*t26602*t26604*t26570*t26573*t26582*t26575*t26577*t26596*(1.6E2/3.0)+a5*c0*t26602*t26570*t26573*t26582*t26575*t26585*t26577*t26596*(1.6E2/3.0)-c*c0*gamma_aa*t26612*t26604*t26613*t26614*t26582*t26575*t26577*t26587*(6.4E1/3.0)-c*c0*gamma_aa*t26604*t26605*t26606*t26607*t26573*t26582*t26587*t26596*(2.048E3/9.0)+c*c0*gamma_aa*t26605*t26641*t26606*t26607*t26573*t26582*t26587*t26596*(5.12E2/3.0)+c*c0*gamma_aa*t26612*t26613*t26614*t26582*t26575*t26585*t26577*t26587*(6.4E1/3.0)+c*c0*gamma_aa*t26605*t26606*t26607*t26573*t26582*t26585*t26587*t26596*(1.024E3/9.0))+t26628*t26659*(t26640+t26642-t26705+t26643+t26636+t26637-t26646+t26638-t26647+t26639-t26648+t26632*t26821*(1.0/3.0)+t26632*t26633+(t26612*t26632*2.0)/t26595+t26632*t26635*t26573*t26575*t26577*(3.2E1/3.0)-t26632*t26615*t26635*t26573*t26575*t26577*(3.2E1/3.0)+a5*gamma_aa*t26632*t26704*t26570*t26743*t26578*(7.0/3.0)+a5*c0*t26620*t26570*t26582*t26618*t26619*t26585*t26596*(1.6E1/9.0)+a5*c0*t26600*t26620*t26612*t26613*t26570*t26582*t26619*t26585*(4.0/3.0)+a5*c0*t26600*t26620*t26570*t26633*t26582*t26619*t26585*t26596*(2.0/3.0)+c*c0*t26601*t26620*t26632*t26582*t26619*t26585*t26587*t26596*(2.0/9.0)+c*c0*t26620*t26571*t26644*t26582*t26619*t26585*t26587*t26596*(2.0/3.0)+a5*c0*gamma_aa*t26620*t26632*t26570*t26582*t26618*t26619*t26585*t26596*(1.4E1/9.0)+c*c0*t26620*t26612*t26613*t26632*t26571*t26582*t26619*t26585*t26587*(4.0/3.0)+c*c0*t26620*t26632*t26633*t26571*t26582*t26619*t26585*t26587*t26596*(2.0/3.0)-c*c0*gamma_aa*t26620*t26603*t26604*t26582*t26619*t26575*t26577*t26587*t26596*(1.36E2/9.0)+c*c0*gamma_aa*t26620*t26603*t26582*t26619*t26575*t26585*t26577*t26587*t26596*(1.36E2/9.0)-a5*c0*t26602*t26620*t26604*t26570*t26573*t26582*t26619*t26575*t26577*t26596*(4.0E1/3.0)+a5*c0*t26602*t26620*t26570*t26573*t26582*t26619*t26575*t26585*t26577*t26596*(4.0E1/3.0)-c*c0*gamma_aa*t26620*t26612*t26604*t26613*t26614*t26582*t26619*t26575*t26577*t26587*(1.6E1/3.0)-c*c0*gamma_aa*t26620*t26604*t26605*t26606*t26607*t26573*t26582*t26619*t26587*t26596*(5.12E2/9.0)+c*c0*gamma_aa*t26620*t26605*t26641*t26606*t26607*t26573*t26582*t26619*t26587*t26596*(1.28E2/3.0)+c*c0*gamma_aa*t26620*t26612*t26613*t26614*t26582*t26619*t26575*t26585*t26577*t26587*(1.6E1/3.0)-c*c0*gamma_aa*t26620*t26604*t26614*t26633*t26582*t26619*t26575*t26577*t26587*t26596*(8.0/3.0)+c*c0*gamma_aa*t26620*t26605*t26606*t26607*t26573*t26582*t26619*t26585*t26587*t26596*(2.56E2/9.0)+c*c0*gamma_aa*t26620*t26614*t26633*t26582*t26619*t26575*t26585*t26577*t26587*t26596*(8.0/3.0)-c*c0*t26620*t26603*t26604*t26632*t26573*t26582*t26619*t26575*t26577*t26587*t26596*(6.4E1/9.0)+c*c0*t26620*t26603*t26632*t26573*t26582*t26619*t26575*t26585*t26577*t26587*t26596*(6.4E1/9.0))+t26620*t26644*t26619+t26713*t26690*t26628+t26712*t26628*t26678+t26620*t26632*t26633*t26619-t26712*t26665*t26694*t26659-t26713*t26665*t26684*t26659-t26690*t26664*t26665*t26694-t26664*t26665*t26684*t26678-t26664*t26665*t26659*(t26631*t26615*t26672*3.0-t26615*t26651*t26673*t26656*(3.0/2.0)-gamma_aa*t26617*t26635*t26575*t26585*t26577*6.4E1+a5*c0*t26570*t26582*t26618*t26585*t26596*(3.2E1/3.0)+gamma_aa*t26604*t26605*t26607*t26617*t26573*t26674*1.28E2-gamma_aa*t26631*t26574*t26575*t26656*t26585*t26577*6.0-t26631*t26651*t26635*t26573*t26575*t26585*t26577*1.6E1+a5*c0*t26600*t26612*t26613*t26570*t26582*t26585*8.0-c*c0*gamma_aa*t26603*t26604*t26582*t26575*t26577*t26587*t26596*(2.72E2/3.0)+c*c0*gamma_aa*t26603*t26582*t26575*t26585*t26577*t26587*t26596*(2.72E2/3.0)-a5*c0*t26602*t26604*t26570*t26573*t26582*t26575*t26577*t26596*8.0E1+a5*c0*t26602*t26570*t26573*t26582*t26575*t26585*t26577*t26596*8.0E1-c*c0*gamma_aa*t26612*t26604*t26613*t26614*t26582*t26575*t26577*t26587*3.2E1-c*c0*gamma_aa*t26604*t26605*t26606*t26607*t26573*t26582*t26587*t26596*(1.024E3/3.0)+c*c0*gamma_aa*t26605*t26641*t26606*t26607*t26573*t26582*t26587*t26596*2.56E2+c*c0*gamma_aa*t26612*t26613*t26614*t26582*t26575*t26585*t26577*t26587*3.2E1+c*c0*gamma_aa*t26605*t26606*t26607*t26573*t26582*t26585*t26587*t26596*(5.12E2/3.0))+1.0/(t26627*t26627*t26627)*t26664*t26684*t26694*t26659*2.0+t26710*t26704*t26706*t26644*t26707*t26708*t26709*t26578*(3.0/2.0)+t26710*t26632*t26704*t26633*t26706*t26707*t26708*t26709*t26578*(3.0/2.0)-a5*t26710*t26570*t26633*t26706*t26751*t26708*t26709*1.0/(t26587*t26587)*t26868*(3.0/2.0)-gamma_aa*t26710*t26711*t26704*t26633*t26706*t26708*t26709*t26575*t26577*t26578*6.0+gamma_aa*t26710*t26711*t26704*t26633*t26706*t26708*t26575*t26584*t26577*t26578*6.0)*(-1.0/2.0)+c0*t26730*t26762*t26754*t26883*(1.0/2.0)+c0*t26730*t26754*t26759*t26777*(1.0/2.0)+c0*t26730*t26759*t26769*t26779*(1.0/2.0)+c0*t26730*t26772*dirac(t26737-t26721*t26731*t26723*t26718*1.0E5)*(t26620*t26633*t26619+t26712*t26628*t26659+t26690*t26628*t26664-t26664*t26665*t26684*t26659+t26710*t26704*t26633*t26706*t26707*t26708*t26709*t26578*(3.0/2.0))*(1.0/2.0)-c0*t26730*t26762*t26754*t26772*t26769*(1.0/2.0)+c0*t26730*t26762*t26772*t26777*t26888*(1.0/2.0))+rho_b*(c0*t26779*(t26829*t26796*(t26818*t26798*2.0+t26801*t26860*t26797-a3*c0*t26570*t26618*t26781*t26782*t26783*(6.4E1/9.0)+a3*c0*t26600*t26570*t26781*t26782*t26747*t26785*(1.6E1/3.0)+c*c0*t26601*t26720*t26750*t26781*t26782*t26785*(1.6E1/9.0)+c*c0*t26720*t26571*t26805*t26781*t26782*t26785*(1.6E1/3.0)+a3*c0*gamma_aa*t26570*t26750*t26618*t26781*t26782*t26785*(1.12E2/9.0)-c*c0*t26720*t26810*t26750*t26571*t26781*t26782*t26747*1.6E1-c*c0*gamma_aa*t26603*t26720*t26572*t26781*t26575*t26782*t26783*(5.44E2/9.0)-a3*c0*t26602*t26570*t26572*t26573*t26781*t26575*t26782*t26783*(1.6E2/3.0)-c*c0*gamma_aa*t26720*t26606*t26607*t26806*t26573*t26781*t26782*t26783*(1.024E3/9.0)+c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26747*t26785*(6.4E1/3.0)+c*c0*t26603*t26720*t26750*t26572*t26573*t26781*t26575*t26782*t26785*(5.12E2/9.0)+a3*c*c0*kab1*rab1*t26570*t26814*t26716*t26752*t26781*t26791*t26783*(6.4E1/4.5E1)-c0*kab1*rab1*t26720*t26750*t26724*t26716*t26752*t26763*t26781*t26791*t26785*(1.28E2/4.5E1)+c0*gamma_aa*kab1*rab1*t26720*t26724*t26572*t26716*t26752*t26816*t26781*t26575*t26791*t26783*(2.56E2/4.5E1))+t26842*t26796*(t26811+t26812+t26813-t26822-t26823+t26815-t26824+t26807-t26825+t26808+t26817-t26826+t26809-t26827-t26801*t26821*(1.0/3.0)-t26801*t26797+(t26801*t26747*2.0)/t26723-t26801*t26572*t26635*t26573*t26575*(3.2E1/3.0)-a3*gamma_aa*t26801*t26570*t26743*t26864*t26578*(7.0/3.0)+(c*kab1*rab1*t26601*t26801*t26716*t26752*(8.0/1.5E1))/t26718-a3*c0*t26570*t26618*t26781*t26782*t26783*t26786*t26787*(1.6E1/9.0)+a3*c0*t26600*t26570*t26781*t26782*t26747*t26785*t26786*t26787*(4.0/3.0)-a3*c0*t26600*t26570*t26781*t26782*t26783*t26786*t26787*t26797*(2.0/3.0)-c*c0*t26601*t26720*t26801*t26781*t26782*t26783*t26786*t26787*(2.0/9.0)+c*c0*t26601*t26720*t26750*t26781*t26782*t26785*t26786*t26787*(4.0/9.0)+c*c0*t26720*t26571*t26805*t26781*t26782*t26785*t26786*t26787*(4.0/3.0)+c*c0*t26720*t26571*t26781*t26782*t26818*t26783*t26786*t26787*(2.0/3.0)-a3*c0*gamma_aa*t26801*t26570*t26618*t26781*t26782*t26783*t26786*t26787*(1.4E1/9.0)+a3*c0*gamma_aa*t26570*t26750*t26618*t26781*t26782*t26785*t26786*t26787*(2.8E1/9.0)-c*c0*t26720*t26810*t26750*t26571*t26781*t26782*t26747*t26786*t26787*4.0+c*c0*t26720*t26801*t26571*t26781*t26782*t26747*t26785*t26786*t26787*(4.0/3.0)-c*c0*t26720*t26801*t26571*t26781*t26782*t26783*t26786*t26787*t26797*(2.0/3.0)+c*c0*t26720*t26750*t26571*t26781*t26782*t26785*t26786*t26787*t26797*(4.0/3.0)-c*c0*gamma_aa*t26603*t26720*t26572*t26781*t26575*t26782*t26783*t26786*t26787*(1.36E2/9.0)-a3*c0*t26602*t26570*t26572*t26573*t26781*t26575*t26782*t26783*t26786*t26787*(4.0E1/3.0)-c*c0*gamma_aa*t26720*t26606*t26607*t26806*t26573*t26781*t26782*t26783*t26786*t26787*(2.56E2/9.0)+c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26747*t26785*t26786*t26787*(1.6E1/3.0)-c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26783*t26786*t26787*t26797*(8.0/3.0)-c*c0*t26603*t26720*t26801*t26572*t26573*t26781*t26575*t26782*t26783*t26786*t26787*(6.4E1/9.0)+c*c0*t26603*t26720*t26750*t26572*t26573*t26781*t26575*t26782*t26785*t26786*t26787*(1.28E2/9.0)+a3*c*c0*kab1*rab1*t26570*t26814*t26716*t26752*t26781*t26791*t26783*t26786*t26787*(1.6E1/4.5E1)+c0*kab1*rab1*t26720*t26801*t26724*t26716*t26752*t26763*t26781*t26791*t26783*t26786*t26787*(1.6E1/4.5E1)-c0*kab1*rab1*t26720*t26750*t26724*t26716*t26752*t26763*t26781*t26791*t26785*t26786*t26787*(3.2E1/4.5E1)+c0*gamma_aa*kab1*rab1*t26720*t26724*t26572*t26716*t26752*t26816*t26781*t26575*t26791*t26783*t26786*t26787*(6.4E1/4.5E1))+t26818*t26786*t26787-t26839*t26796*t26859-t26833*t26796*(t26850+t26790+t26847+t26848+t26849+t26788+t26789-c*c0*t26720*t26571*t26781*t26782*t26747*t26785*(4.0/3.0)-c*c0*t26720*t26571*t26781*t26782*t26747*t26785*t26786*t26787*(4.0/3.0)-c0*kab1*rab1*t26720*t26724*t26716*t26752*t26763*t26781*t26791*t26783*(1.6E1/4.5E1)-c0*kab1*rab1*t26720*t26724*t26716*t26752*t26763*t26781*t26791*t26783*t26786*t26787*(1.6E1/4.5E1))+t26833*t26834*t26855*t26829+t26842*t26834*t26855*t26859+t26842*t26834*t26846*t26869+t26834*t26846*t26829*t26839-t26801*t26786*t26787*t26797-t26842*t26834*t26829*(t26818*t26798*3.0+t26801*t26860*t26797*(3.0/2.0)-a3*c0*t26570*t26618*t26781*t26782*t26783*(3.2E1/3.0)+a3*c0*t26600*t26570*t26781*t26782*t26747*t26785*8.0+c*c0*t26601*t26720*t26750*t26781*t26782*t26785*(8.0/3.0)+c*c0*t26720*t26571*t26805*t26781*t26782*t26785*8.0+a3*c0*gamma_aa*t26570*t26750*t26618*t26781*t26782*t26785*(5.6E1/3.0)-c*c0*t26720*t26810*t26750*t26571*t26781*t26782*t26747*2.4E1-c*c0*gamma_aa*t26603*t26720*t26572*t26781*t26575*t26782*t26783*(2.72E2/3.0)-a3*c0*t26602*t26570*t26572*t26573*t26781*t26575*t26782*t26783*8.0E1-c*c0*gamma_aa*t26720*t26606*t26607*t26806*t26573*t26781*t26782*t26783*(5.12E2/3.0)+c*c0*gamma_aa*t26720*t26614*t26572*t26781*t26575*t26782*t26747*t26785*3.2E1+c*c0*t26603*t26720*t26750*t26572*t26573*t26781*t26575*t26782*t26785*(2.56E2/3.0)+a3*c*c0*kab1*rab1*t26570*t26814*t26716*t26752*t26781*t26791*t26783*(3.2E1/1.5E1)-c0*kab1*rab1*t26720*t26750*t26724*t26716*t26752*t26763*t26781*t26791*t26785*(6.4E1/1.5E1)+c0*gamma_aa*kab1*rab1*t26720*t26724*t26572*t26716*t26752*t26816*t26781*t26575*t26791*t26783*(1.28E2/1.5E1))-t26842*t26846*t26855*t26829*1.0/(t26795*t26795*t26795)*2.0+t26706*t26707*t26818*t26864*t26865*t26578*t26866*t26867*(3.0/2.0)-t26723*t26750*t26706*t26707*t26864*t26865*t26578*t26866*t26797*3.0-t26801*t26706*t26707*t26864*t26865*t26578*t26866*t26867*t26797*(3.0/2.0)+a3*1.0/(t26720*t26720)*t26570*t26706*t26751*t26865*t26866*t26867*t26868*t26797*(3.0/2.0)+gamma_aa*t26711*t26706*t26572*t26575*t26864*t26865*t26578*t26866*t26867*t26797*6.0)*(1.0/2.0)+c0*t26754*t26891*t26883*(1.0/2.0)+c0*t26754*t26777*(t26801*t26786*t26787+t26833*t26829*t26796+t26842*t26796*t26859-t26842*t26834*t26846*t26829+t26801*t26706*t26707*t26864*t26865*t26578*t26866*t26867*(3.0/2.0))*(1.0/2.0)+c0*t26754*t26772*(t26842*t26796*t26869+t26829*t26839*t26796+t26786*t26787*t26797-t26842*t26834*t26855*t26829+t26706*t26707*t26864*t26865*t26578*t26866*t26867*t26797*(3.0/2.0))*(1.0/2.0)+c0*t26772*t26891*t26777*t26888*(1.0/2.0))+c0*t26730*t26759*t26779*(1.0/2.0)-c0*t26730*t26762*t26754*t26772*(1.0/2.0);
            }
            
            // v_rho_a_gamma_bb
            if (deriv >= 2) {
                double t26895 = tspi_m13*tspi_m13;
                double t26896 = 1.0/pow(rho_b,1.0/3.0);
                double t26897 = a2*a2;
                double t26898 = gamma_bb*gamma_bb;
                double t26899 = 1.0/pow(rho_b,1.6E1/3.0);
                double t26900 = t26895*t26895;
                double t26901 = t26900*t26897*t26898*t26899*2.0;
                double t26902 = exp(t26901);
                double t26903 = c*t26896;
                double t26904 = pow(t26903,4.0/5.0);
                double t26916 = rab1*t26904;
                double t26905 = exp(-t26916);
                double t26906 = t26905-1.0;
                double t26917 = kab1*t26906;
                double t26907 = kab0-t26917;
                double t26908 = 1.0/c;
                double t26909 = 1.0/pow(rho_b,7.0/3.0);
                double t26910 = a3*gamma_bb*t26908*t26909*t26895;
                double t26911 = t26910+1.0;
                double t26912 = t26900*t26897*t26898*t26899;
                double t26913 = 1.0/pow(rho_b,8.0/3.0);
                double t26914 = a1*gamma_bb*t26913*t26895;
                double t26915 = t26912+t26914+1.0;
                double t26918 = 1.0/(t26907*t26907);
                double t26919 = 1.0/(t26915*t26915);
                double t26920 = c*c0*t26902*t26911*t26918*t26919*t26896*(2.0/3.0);
                double t26921 = a1*t26913*t26895;
                double t26922 = gamma_bb*t26900*t26897*t26899*2.0;
                double t26923 = t26921+t26922;
                double t26924 = 1.0/(t26915*t26915*t26915);
                double t26925 = 1.0/pow(rho_b,1.7E1/3.0);
                double t26926 = exp(t26920);
                double t26927 = Ei(-t26920);
                double t26928 = a3*c0*t26902*t26913*t26918*t26919*t26895*(2.0/3.0);
                double t26929 = c*c0*gamma_bb*t26900*t26902*t26911*t26925*t26918*t26919*t26897*(8.0/3.0);
                double t26936 = c*c0*t26902*t26911*t26923*t26924*t26918*t26896*(4.0/3.0);
                double t26930 = -t26936+t26928+t26929;
                double t26931 = sqrt(t26920);
                double t26932 = t26931*6.0;
                double t26933 = c*c0*t26902*t26911*t26918*t26919*t26896*4.0;
                double t26934 = t26932+t26933+3.0;
                double t26935 = 1.0/t26934;
                double t26937 = c*c0*t26902*t26911*t26926*t26918*t26927*t26919*t26896*(2.0/3.0);
                double t26938 = t26937+1.0;
                double t26939 = t26931*4.0;
                double t26940 = c*c0*t26902*t26911*t26918*t26919*t26896*(8.0/3.0);
                double t26941 = t26940+t26939+6.0;
                double t26942 = 1.0/sqrt(t26920);
                double t26943 = 1.0/sqrt(t26911);
                double t26944 = exp(-t26912);
                v_rho_a_gamma_bb[Q] += scale * c0*heaviside(c*c0*t26896*(-2.0/3.0)+t26915*t26907*t26943*exp(-t26900*t26897*t26898*t26899)*1.0E5)*(t26930*t26926*t26927+t26941*t26935*(-t26936+t26928+t26929+a3*c0*t26902*t26913*t26926*t26918*t26927*t26919*t26895*(2.0/3.0)-c*c0*t26902*t26911*t26923*t26924*t26926*t26918*t26927*t26896*(4.0/3.0)+c*c0*t26902*t26911*t26930*t26926*t26918*t26927*t26919*t26896*(2.0/3.0)+c*c0*gamma_bb*t26900*t26902*t26911*t26925*t26926*t26918*t26927*t26919*t26897*(8.0/3.0))+t26935*t26938*(t26930*t26942*2.0+a3*c0*t26902*t26913*t26918*t26919*t26895*(8.0/3.0)-c*c0*t26902*t26911*t26923*t26924*t26918*t26896*(1.6E1/3.0)+c*c0*gamma_bb*t26900*t26902*t26911*t26925*t26918*t26919*t26897*(3.2E1/3.0))-t26941*1.0/(t26934*t26934)*t26938*(t26930*t26942*3.0+a3*c0*t26902*t26913*t26918*t26919*t26895*4.0-c*c0*t26902*t26911*t26923*t26924*t26918*t26896*8.0+c*c0*gamma_bb*t26900*t26902*t26911*t26925*t26918*t26919*t26897*1.6E1)+(pow(rho_b,1.0/3.0)*t26930*(t26915*t26915)*(t26907*t26907)*t26908*exp(-t26901)*(3.0/2.0))/(c0*t26911))*(1.0/2.0)-c0*dirac(c*c0*t26896*(2.0/3.0)-t26915*t26907*t26943*t26944*1.0E5)*(t26926*t26927+t26941*t26935*t26938)*(t26923*t26907*t26943*t26944*-1.0E5+a3*1.0/pow(t26911,3.0/2.0)*t26915*t26907*t26908*t26944*t26909*t26895*5.0E4+gamma_bb*t26900*t26915*t26907*t26943*t26944*t26897*t26899*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_b_gamma_aa
            if (deriv >= 2) {
                double t26946 = tspi_m13*tspi_m13;
                double t26947 = 1.0/pow(rho_a,1.0/3.0);
                double t26948 = a2*a2;
                double t26949 = gamma_aa*gamma_aa;
                double t26950 = 1.0/pow(rho_a,1.6E1/3.0);
                double t26951 = t26946*t26946;
                double t26952 = t26950*t26951*t26948*t26949*2.0;
                double t26953 = exp(t26952);
                double t26954 = c*t26947;
                double t26955 = pow(t26954,4.0/5.0);
                double t26967 = rab1*t26955;
                double t26956 = exp(-t26967);
                double t26957 = t26956-1.0;
                double t26968 = kab1*t26957;
                double t26958 = kab0-t26968;
                double t26959 = 1.0/c;
                double t26960 = 1.0/pow(rho_a,7.0/3.0);
                double t26961 = a3*gamma_aa*t26960*t26946*t26959;
                double t26962 = t26961+1.0;
                double t26963 = t26950*t26951*t26948*t26949;
                double t26964 = 1.0/pow(rho_a,8.0/3.0);
                double t26965 = a1*gamma_aa*t26946*t26964;
                double t26966 = t26963+t26965+1.0;
                double t26969 = 1.0/(t26958*t26958);
                double t26970 = 1.0/(t26966*t26966);
                double t26971 = c*c0*t26970*t26953*t26962*t26947*t26969*(2.0/3.0);
                double t26972 = a1*t26946*t26964;
                double t26973 = gamma_aa*t26950*t26951*t26948*2.0;
                double t26974 = t26972+t26973;
                double t26975 = 1.0/(t26966*t26966*t26966);
                double t26976 = 1.0/pow(rho_a,1.7E1/3.0);
                double t26977 = exp(t26971);
                double t26978 = Ei(-t26971);
                double t26979 = a3*c0*t26970*t26953*t26946*t26964*t26969*(2.0/3.0);
                double t26980 = c*c0*gamma_aa*t26951*t26970*t26953*t26962*t26948*t26976*t26969*(8.0/3.0);
                double t26987 = c*c0*t26953*t26962*t26947*t26974*t26975*t26969*(4.0/3.0);
                double t26981 = t26980-t26987+t26979;
                double t26982 = sqrt(t26971);
                double t26983 = t26982*6.0;
                double t26984 = c*c0*t26970*t26953*t26962*t26947*t26969*4.0;
                double t26985 = t26983+t26984+3.0;
                double t26986 = 1.0/t26985;
                double t26988 = c*c0*t26970*t26953*t26962*t26947*t26977*t26969*t26978*(2.0/3.0);
                double t26989 = t26988+1.0;
                double t26990 = t26982*4.0;
                double t26991 = c*c0*t26970*t26953*t26962*t26947*t26969*(8.0/3.0);
                double t26992 = t26990+t26991+6.0;
                double t26993 = 1.0/sqrt(t26971);
                double t26994 = 1.0/sqrt(t26962);
                double t26995 = exp(-t26963);
                v_rho_b_gamma_aa[Q] += scale * c0*heaviside(c*c0*t26947*(-2.0/3.0)+t26966*t26958*t26994*exp(-t26950*t26951*t26948*t26949)*1.0E5)*(t26981*t26977*t26978+t26992*t26986*(t26980-t26987+t26979+a3*c0*t26970*t26953*t26946*t26964*t26977*t26969*t26978*(2.0/3.0)+c*c0*t26970*t26953*t26962*t26981*t26947*t26977*t26969*t26978*(2.0/3.0)-c*c0*t26953*t26962*t26947*t26974*t26975*t26977*t26969*t26978*(4.0/3.0)+c*c0*gamma_aa*t26951*t26970*t26953*t26962*t26948*t26976*t26977*t26969*t26978*(8.0/3.0))+t26986*t26989*(t26981*t26993*2.0+a3*c0*t26970*t26953*t26946*t26964*t26969*(8.0/3.0)-c*c0*t26953*t26962*t26947*t26974*t26975*t26969*(1.6E1/3.0)+c*c0*gamma_aa*t26951*t26970*t26953*t26962*t26948*t26976*t26969*(3.2E1/3.0))-t26992*1.0/(t26985*t26985)*t26989*(t26981*t26993*3.0+a3*c0*t26970*t26953*t26946*t26964*t26969*4.0-c*c0*t26953*t26962*t26947*t26974*t26975*t26969*8.0+c*c0*gamma_aa*t26951*t26970*t26953*t26962*t26948*t26976*t26969*1.6E1)+(pow(rho_a,1.0/3.0)*t26981*(t26966*t26966)*(t26958*t26958)*t26959*exp(-t26952)*(3.0/2.0))/(c0*t26962))*(1.0/2.0)-c0*dirac(c*c0*t26947*(2.0/3.0)-t26966*t26958*t26994*t26995*1.0E5)*(t26977*t26978+t26992*t26986*t26989)*(t26974*t26958*t26994*t26995*-1.0E5+a3*t26960*1.0/pow(t26962,3.0/2.0)*t26946*t26966*t26958*t26959*t26995*5.0E4+gamma_aa*t26950*t26951*t26948*t26966*t26958*t26994*t26995*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t26998 = tspi_m13*tspi_m13;
                double t26999 = 1.0/pow(rho_b,1.0/3.0);
                double t27000 = a2*a2;
                double t27001 = gamma_bb*gamma_bb;
                double t27002 = 1.0/pow(rho_b,1.6E1/3.0);
                double t27003 = t26998*t26998;
                double t27004 = c*t26999;
                double t27005 = a4*a4;
                double t27006 = 1.0/c;
                double t27007 = 1.0/pow(rho_b,7.0/3.0);
                double t27008 = sqrt(t27004);
                double t27009 = t27001*t27002*t27003*t27005*2.0;
                double t27010 = exp(t27009);
                double t27011 = t27001*t27002*t27003*t27005;
                double t27012 = t27011+1.0;
                double t27013 = 1.0/(t27012*t27012);
                double t27014 = a5*gamma_bb*t26998*t27006*t27007;
                double t27015 = t27014+1.0;
                double t27026 = raa2*t27008;
                double t27016 = exp(-t27026);
                double t27017 = t27016-1.0;
                double t27018 = kaa2*t27017;
                double t27019 = pow(t27004,2.0/5.0);
                double t27027 = raa1*t27019;
                double t27020 = exp(-t27027);
                double t27021 = t27020-1.0;
                double t27022 = kaa1*t27021;
                double t27023 = -kaa0+t27022+t27018;
                double t27024 = 1.0/(t27023*t27023);
                double t27025 = c*c0*t26999*t27010*t27013*t27015*t27024*(2.0/3.0);
                double t27028 = 1.0/pow(rho_b,8.0/3.0);
                double t27029 = 1.0/pow(rho_b,4.0/3.0);
                double t27030 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t27031 = 1.0/pow(rho_b,2.0E1/3.0);
                double t27032 = 1.0/(t27012*t27012*t27012);
                double t27033 = t27005*t27005;
                double t27034 = 1.0/pow(rho_b,1.2E1);
                double t27035 = t27003*t27003;
                double t27036 = 1.0/sqrt(t27004);
                double t27037 = c*kaa2*raa2*t27016*t27036*t27029*(1.0/6.0);
                double t27038 = 1.0/pow(t27004,3.0/5.0);
                double t27039 = c*kaa1*raa1*t27020*t27029*t27038*(2.0/1.5E1);
                double t27040 = t27037+t27039;
                double t27041 = 1.0/(t27023*t27023*t27023);
                double t27042 = 1.0/pow(rho_b,1.7E1/3.0);
                double t27043 = 1.0/t27012;
                double t27044 = c*c0*t26999*t27010*t27015*t27024*(2.0/3.0);
                double t27045 = sqrt(t27044);
                double t27046 = 1.0/pow(rho_b,1.1E1/3.0);
                double t27047 = exp(t27025);
                double t27048 = Ei(-t27025);
                double t27049 = c*c0*t27010*t27013*t27015*t27024*t27029*(2.0/9.0);
                double t27050 = a5*c0*gamma_bb*t26998*t27010*t27013*t27024*t27046*(1.4E1/9.0);
                double t27051 = c*c0*t26999*t27010*t27013*t27040*t27041*t27015*(4.0/3.0);
                double t27052 = c*c0*t27001*t27010*t27003*t27013*t27031*t27005*t27015*t27024*(6.4E1/9.0);
                double t27053 = t27043*t27045*6.0;
                double t27054 = c*c0*t26999*t27010*t27013*t27015*t27024*4.0;
                double t27055 = t27053+t27054+3.0;
                double t27056 = 1.0/t27055;
                double t27057 = a5*c0*t26998*t27010*t27013*t27024*t27028*(2.0/3.0);
                double t27058 = c*c0*gamma_bb*t27010*t27003*t27013*t27005*t27015*t27024*t27042*(8.0/3.0);
                double t27059 = 1.0/sqrt(t27044);
                double t27062 = c*c0*gamma_bb*t27010*t27003*t27005*t27032*t27015*t27024*t27042*(8.0/3.0);
                double t27060 = -t27062+t27057+t27058;
                double t27073 = c*c0*t27001*t27010*t27003*t27031*t27005*t27032*t27015*t27024*(6.4E1/9.0);
                double t27061 = t27050+t27051+t27052-t27073+t27049;
                double t27063 = 1.0/pow(rho_b,1.9E1/3.0);
                double t27064 = a5*c0*t26998*t27010*t27013*t27024*t27046*(1.6E1/9.0);
                double t27065 = a5*c0*t26998*t27010*t27013*t27040*t27041*t27028*(4.0/3.0);
                double t27066 = a5*c0*t26998*t27001*t27010*t27003*t27030*t27013*t27005*t27024*(4.0E1/3.0);
                double t27067 = c*c0*gamma_bb*t27010*t27003*t27013*t27031*t27005*t27015*t27024*(1.36E2/9.0);
                double t27068 = c*c0*gamma_bb*t27001*t27010*t27013*t27015*t27024*t27033*t27034*t27035*(2.56E2/9.0);
                double t27069 = 1.0/(t27012*t27012*t27012*t27012);
                double t27070 = c*c0*gamma_bb*t27001*t27010*t27015*t27024*t27033*t27034*t27035*t27069*(1.28E2/3.0);
                double t27071 = c*c0*gamma_bb*t27010*t27003*t27013*t27040*t27005*t27041*t27015*t27042*(1.6E1/3.0);
                double t27074 = c*c0*gamma_bb*t27010*t27003*t27031*t27005*t27032*t27015*t27024*(1.36E2/9.0);
                double t27075 = c*c0*gamma_bb*t27001*t27010*t27032*t27015*t27024*t27033*t27034*t27035*(5.12E2/9.0);
                double t27076 = c*c0*gamma_bb*t27010*t27003*t27040*t27005*t27032*t27041*t27015*t27042*(1.6E1/3.0);
                double t27133 = a5*c0*t26998*t27001*t27010*t27003*t27030*t27005*t27032*t27024*(4.0E1/3.0);
                double t27072 = t27070-t27133+t27071+t27064+t27065-t27074+t27066-t27075+t27067-t27076+t27068;
                double t27077 = a5*c0*t26998*t27010*t27024*t27028*(2.0/3.0);
                double t27078 = c*c0*gamma_bb*t27010*t27003*t27005*t27015*t27024*t27042*(8.0/3.0);
                double t27079 = t27077+t27078;
                double t27080 = c*c0*t27010*t27015*t27024*t27029*(2.0/9.0);
                double t27081 = a5*c0*gamma_bb*t26998*t27010*t27024*t27046*(1.4E1/9.0);
                double t27082 = c*c0*t26999*t27010*t27040*t27041*t27015*(4.0/3.0);
                double t27083 = c*c0*t27001*t27010*t27003*t27031*t27005*t27015*t27024*(6.4E1/9.0);
                double t27084 = t27080+t27081+t27082+t27083;
                double t27085 = t27043*t27045*4.0;
                double t27086 = c*c0*t26999*t27010*t27013*t27015*t27024*(8.0/3.0);
                double t27087 = t27085+t27086+6.0;
                double t27088 = a5*c0*t26998*t27010*t27013*t27024*t27028*t27047*t27048*(2.0/3.0);
                double t27089 = c*c0*t26999*t27010*t27013*t27015*t27024*t27060*t27047*t27048*(2.0/3.0);
                double t27090 = c*c0*gamma_bb*t27010*t27003*t27013*t27005*t27015*t27024*t27042*t27047*t27048*(8.0/3.0);
                double t27091 = c*c0*t26999*t27010*t27013*t27015*t27024*t27047*t27048*(2.0/3.0);
                double t27092 = t27091+1.0;
                double t27093 = 1.0/(t27055*t27055);
                double t27094 = a5*c0*t26998*t27010*t27024*t27046*(1.6E1/9.0);
                double t27095 = a5*c0*t26998*t27010*t27040*t27041*t27028*(4.0/3.0);
                double t27096 = a5*c0*t26998*t27001*t27010*t27003*t27030*t27005*t27024*(4.0E1/3.0);
                double t27097 = c*c0*gamma_bb*t27010*t27003*t27031*t27005*t27015*t27024*(1.36E2/9.0);
                double t27098 = c*c0*gamma_bb*t27001*t27010*t27015*t27024*t27033*t27034*t27035*(2.56E2/9.0);
                double t27099 = c*c0*gamma_bb*t27010*t27003*t27040*t27005*t27041*t27015*t27042*(1.6E1/3.0);
                double t27100 = t27094+t27095+t27096+t27097+t27098+t27099;
                double t27101 = 1.0/pow(t27044,3.0/2.0);
                double t27102 = 1.0/pow(rho_b,3.5E1/3.0);
                double t27103 = t27043*t27059*t27079*2.0;
                double t27104 = a5*c0*t26998*t27010*t27013*t27024*t27028*(8.0/3.0);
                double t27105 = c*c0*gamma_bb*t27010*t27003*t27013*t27005*t27015*t27024*t27042*(3.2E1/3.0);
                double t27167 = gamma_bb*t27002*t27003*t27013*t27005*t27045*8.0;
                double t27168 = c*c0*gamma_bb*t27010*t27003*t27005*t27032*t27015*t27024*t27042*(3.2E1/3.0);
                double t27106 = t27103+t27104+t27105-t27167-t27168;
                double t27107 = t27043*t27084*t27059*3.0;
                double t27108 = c*c0*t27010*t27013*t27015*t27024*t27029*(4.0/3.0);
                double t27109 = a5*c0*gamma_bb*t26998*t27010*t27013*t27024*t27046*(2.8E1/3.0);
                double t27110 = c*c0*t26999*t27010*t27013*t27040*t27041*t27015*8.0;
                double t27111 = c*c0*t27001*t27010*t27003*t27013*t27031*t27005*t27015*t27024*(1.28E2/3.0);
                double t27130 = t27001*t27003*t27013*t27005*t27045*t27063*3.2E1;
                double t27131 = c*c0*t27001*t27010*t27003*t27031*t27005*t27032*t27015*t27024*(1.28E2/3.0);
                double t27112 = t27110+t27111-t27130-t27131+t27107+t27108+t27109;
                double t27113 = t27043*t27084*t27059*2.0;
                double t27114 = c*c0*t27010*t27013*t27015*t27024*t27029*(8.0/9.0);
                double t27115 = a5*c0*gamma_bb*t26998*t27010*t27013*t27024*t27046*(5.6E1/9.0);
                double t27116 = c*c0*t26999*t27010*t27013*t27040*t27041*t27015*(1.6E1/3.0);
                double t27117 = c*c0*t27001*t27010*t27003*t27013*t27031*t27005*t27015*t27024*(2.56E2/9.0);
                double t27162 = t27001*t27003*t27013*t27005*t27045*t27063*(6.4E1/3.0);
                double t27163 = c*c0*t27001*t27010*t27003*t27031*t27005*t27032*t27015*t27024*(2.56E2/9.0);
                double t27118 = t27113+t27114+t27115+t27116+t27117-t27162-t27163;
                double t27119 = t27043*t27059*t27079*3.0;
                double t27120 = a5*c0*t26998*t27010*t27013*t27024*t27028*4.0;
                double t27121 = c*c0*gamma_bb*t27010*t27003*t27013*t27005*t27015*t27024*t27042*1.6E1;
                double t27128 = gamma_bb*t27002*t27003*t27013*t27005*t27045*1.2E1;
                double t27129 = c*c0*gamma_bb*t27010*t27003*t27005*t27032*t27015*t27024*t27042*1.6E1;
                double t27122 = t27120+t27121+t27119-t27128-t27129;
                double t27123 = c*c0*t27010*t27013*t27015*t27024*t27029*t27047*t27048*(2.0/9.0);
                double t27124 = c*c0*t26999*t27010*t27013*t27040*t27041*t27015*t27047*t27048*(4.0/3.0);
                double t27125 = c*c0*t26999*t27010*t27013*t27015*t27024*t27061*t27047*t27048*(2.0/3.0);
                double t27126 = a5*c0*gamma_bb*t26998*t27010*t27013*t27024*t27046*t27047*t27048*(1.4E1/9.0);
                double t27127 = c*c0*t27001*t27010*t27003*t27013*t27031*t27005*t27015*t27024*t27047*t27048*(6.4E1/9.0);
                double t27132 = 1.0/t27015;
                double t27134 = 1.0/c0;
                double t27135 = pow(rho_b,1.0/3.0);
                double t27136 = exp(-t27009);
                double t27137 = t27012*t27012;
                double t27138 = t27023*t27023;
                double t27139 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t27164 = c*c0*t27001*t27010*t27003*t27031*t27005*t27032*t27015*t27024*t27047*t27048*(6.4E1/9.0);
                double t27140 = t27050+t27051+t27123+t27052+t27124+t27125+t27126-t27073+t27127-t27164+t27049;
                double t27169 = c*c0*gamma_bb*t27010*t27003*t27005*t27032*t27015*t27024*t27042*t27047*t27048*(8.0/3.0);
                double t27141 = -t27062+t27090+t27057+t27058+t27088-t27169+t27089;
                double t27142 = t27000*t27001*t27002*t27003;
                double t27143 = pow(t27004,4.0/5.0);
                double t27160 = rab1*t27143;
                double t27144 = exp(-t27160);
                double t27145 = t27144-1.0;
                double t27161 = kab1*t27145;
                double t27146 = kab0-t27161;
                double t27147 = a3*gamma_bb*t26998*t27006*t27007;
                double t27148 = t27147+1.0;
                double t27149 = 1.0/sqrt(t27148);
                double t27150 = a1*gamma_bb*t26998*t27028;
                double t27151 = t27150+t27142+1.0;
                double t27152 = c*c;
                double t27153 = 1.0/pow(rho_b,2.0/3.0);
                double t27154 = k1*t27008;
                double t27155 = c*k2*t26999;
                double t27156 = t27154+t27155;
                double t27157 = 1.0/(t27156*t27156);
                double t27166 = t27152*t27153*t27157;
                double t27158 = exp(-t27166);
                double t27159 = exp(-t27142);
                double t27165 = c*c0*t26999*(2.0/3.0);
                double t27170 = t27151*t27146*t27149*t27159*1.0E5;
                double t27171 = 1.0/pow(rho_b,1.0E1/3.0);
                double t27172 = 1.0/pow(t27148,3.0/2.0);
                double t27173 = t27000*t27001*t27003*t27063*(1.6E1/3.0);
                double t27174 = a1*gamma_bb*t26998*t27046*(8.0/3.0);
                double t27175 = t27173+t27174;
                double t27176 = a1*t26998*t27028;
                double t27177 = gamma_bb*t27000*t27002*t27003*2.0;
                double t27178 = t27176+t27177;
                double t27179 = 1.0/(c*c);
                double t27180 = 1.0/pow(t27004,1.0/5.0);
                double t27181 = -t27170+t27165;
                double t27182 = dirac(t27181);
                double t27183 = t27060*t27047*t27048;
                double t27184 = t27106*t27056*t27092;
                double t27185 = t27141*t27056*t27087;
                double t27186 = t27006*t27060*t27132*t27134*t27135*t27136*t27137*t27138*(3.0/2.0);
                double t27320 = t27122*t27092*t27093*t27087;
                double t27187 = -t27320+t27183+t27184+t27185+t27186;
                double t27188 = t27047*t27048;
                double t27189 = t27056*t27092*t27087;
                double t27190 = t27188+t27189;
                double t27191 = 1.0/pow(rho_b,5.0/3.0);
                double t27192 = t27152*t27191*t27157*(2.0/3.0);
                double t27193 = 1.0/(t27156*t27156*t27156);
                double t27194 = c*k2*t27029*(1.0/3.0);
                double t27195 = c*k1*t27036*t27029*(1.0/6.0);
                double t27196 = t27194+t27195;
                double t27197 = t27192-t27152*t27153*t27193*t27196*2.0;
                double t27198 = a3*t26998*t27006*t27007*t27151*t27172*t27146*t27159*5.0E4;
                double t27199 = gamma_bb*t27000*t27002*t27003*t27151*t27146*t27149*t27159*2.0E5;
                double t27201 = t27146*t27149*t27159*t27178*1.0E5;
                double t27200 = -t27201+t27198+t27199;
                double t27202 = c*c0*t27029*(2.0/9.0);
                double t27203 = t27000*t27001*t27003*t27151*t27063*t27146*t27149*t27159*(1.6E6/3.0);
                double t27204 = a3*gamma_bb*t26998*t27006*t27151*t27171*t27172*t27146*t27159*(3.5E5/3.0);
                double t27314 = t27146*t27175*t27149*t27159*1.0E5;
                double t27315 = c*kab1*rab1*t27151*t27144*t27180*t27029*t27149*t27159*(8.0E4/3.0);
                double t27205 = t27202+t27203+t27204-t27314-t27315;
                double t27206 = t27170-t27165;
                double t27207 = heaviside(t27206);
                double t27208 = t27000*t27001*t27002*t27003*2.0;
                double t27209 = exp(t27208);
                double t27210 = 1.0/(t27146*t27146);
                double t27211 = 1.0/(t27151*t27151);
                double t27212 = c*c0*t26999*t27210*t27211*t27209*t27148*(2.0/3.0);
                double t27213 = 1.0/(t27151*t27151*t27151);
                double t27214 = exp(t27212);
                double t27215 = Ei(-t27212);
                double t27216 = c*c0*t27210*t27211*t27029*t27209*t27148*(2.0/9.0);
                double t27217 = a3*c0*gamma_bb*t26998*t27210*t27211*t27046*t27209*(1.4E1/9.0);
                double t27218 = c*c0*t27000*t27001*t27003*t27210*t27031*t27211*t27209*t27148*(6.4E1/9.0);
                double t27219 = 1.0/(t27146*t27146*t27146);
                double t27220 = sqrt(t27212);
                double t27221 = t27220*6.0;
                double t27222 = c*c0*t26999*t27210*t27211*t27209*t27148*4.0;
                double t27223 = t27221+t27222+3.0;
                double t27224 = 1.0/t27223;
                double t27247 = c*c0*t26999*t27210*t27213*t27209*t27148*t27175*(4.0/3.0);
                double t27248 = c0*kab1*rab1*t27211*t27152*t27144*t27180*t27191*t27209*t27219*t27148*(1.6E1/4.5E1);
                double t27225 = t27216+t27217+t27218-t27247-t27248;
                double t27226 = 1.0/sqrt(t27212);
                double t27227 = a3*c0*t26998*t27210*t27211*t27028*t27209*(2.0/3.0);
                double t27228 = c*c0*gamma_bb*t27000*t27003*t27210*t27211*t27042*t27209*t27148*(8.0/3.0);
                double t27230 = c*c0*t26999*t27210*t27213*t27209*t27148*t27178*(4.0/3.0);
                double t27229 = -t27230+t27227+t27228;
                double t27231 = a1*t26998*t27046*(8.0/3.0);
                double t27232 = gamma_bb*t27000*t27003*t27063*(3.2E1/3.0);
                double t27233 = t27231+t27232;
                double t27234 = t27000*t27000;
                double t27235 = a3*c0*t26998*t27210*t27213*t27028*t27209*t27175*(4.0/3.0);
                double t27236 = c*c0*t27210*t27213*t27029*t27209*t27148*t27178*(4.0/9.0);
                double t27237 = c*c0*t26999*t27210*t27213*t27233*t27209*t27148*(4.0/3.0);
                double t27238 = 1.0/(t27151*t27151*t27151*t27151);
                double t27239 = a3*c0*gamma_bb*t26998*t27210*t27213*t27046*t27209*t27178*(2.8E1/9.0);
                double t27240 = c*c0*gamma_bb*t27000*t27003*t27210*t27042*t27213*t27209*t27148*t27175*(1.6E1/3.0);
                double t27241 = c*c0*t27000*t27001*t27003*t27210*t27031*t27213*t27209*t27148*t27178*(1.28E2/9.0);
                double t27242 = 1.0/(rho_b*rho_b*rho_b*rho_b);
                double t27243 = a3*c*c0*kab1*rab1*t26998*t27211*t27242*t27144*t27180*t27209*t27219*(1.6E1/4.5E1);
                double t27244 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t27245 = c0*gamma_bb*kab1*rab1*t27000*t27003*t27211*t27152*t27144*t27180*t27244*t27209*t27219*t27148*(6.4E1/4.5E1);
                double t27250 = a3*c0*t26998*t27210*t27211*t27046*t27209*(1.6E1/9.0);
                double t27251 = c*c0*t26999*t27210*t27209*t27148*t27175*t27238*t27178*4.0;
                double t27252 = a3*c0*t26998*t27000*t27001*t27003*t27030*t27210*t27211*t27209*(4.0E1/3.0);
                double t27253 = c*c0*gamma_bb*t27000*t27003*t27210*t27031*t27211*t27209*t27148*(1.36E2/9.0);
                double t27254 = c*c0*gamma_bb*t27001*t27210*t27211*t27034*t27035*t27234*t27209*t27148*(2.56E2/9.0);
                double t27255 = c0*kab1*rab1*t27213*t27152*t27144*t27180*t27191*t27209*t27219*t27148*t27178*(3.2E1/4.5E1);
                double t27246 = t27240+t27241-t27250-t27251+t27243-t27252+t27235-t27253+t27236+t27245-t27254+t27237-t27255+t27239;
                double t27249 = 1.0/rho_b;
                double t27256 = c*c0*t26999*t27210*t27211*t27214*t27215*t27209*t27148*(2.0/3.0);
                double t27257 = t27256+1.0;
                double t27258 = t27226*t27229*2.0;
                double t27259 = a3*c0*t26998*t27210*t27211*t27028*t27209*(8.0/3.0);
                double t27260 = c*c0*gamma_bb*t27000*t27003*t27210*t27211*t27042*t27209*t27148*(3.2E1/3.0);
                double t27312 = c*c0*t26999*t27210*t27213*t27209*t27148*t27178*(1.6E1/3.0);
                double t27261 = -t27312+t27260+t27258+t27259;
                double t27262 = 1.0/(t27223*t27223);
                double t27263 = t27225*t27226*2.0;
                double t27264 = c*c0*t27210*t27211*t27029*t27209*t27148*(8.0/9.0);
                double t27265 = a3*c0*gamma_bb*t26998*t27210*t27211*t27046*t27209*(5.6E1/9.0);
                double t27266 = c*c0*t27000*t27001*t27003*t27210*t27031*t27211*t27209*t27148*(2.56E2/9.0);
                double t27298 = c*c0*t26999*t27210*t27213*t27209*t27148*t27175*(1.6E1/3.0);
                double t27299 = c0*kab1*rab1*t27211*t27152*t27144*t27180*t27191*t27209*t27219*t27148*(6.4E1/4.5E1);
                double t27267 = t27263+t27264+t27265+t27266-t27298-t27299;
                double t27268 = t27220*4.0;
                double t27269 = c*c0*t26999*t27210*t27211*t27209*t27148*(8.0/3.0);
                double t27270 = t27268+t27269+6.0;
                double t27271 = t27226*t27229*3.0;
                double t27272 = a3*c0*t26998*t27210*t27211*t27028*t27209*4.0;
                double t27273 = c*c0*gamma_bb*t27000*t27003*t27210*t27211*t27042*t27209*t27148*1.6E1;
                double t27289 = c*c0*t26999*t27210*t27213*t27209*t27148*t27178*8.0;
                double t27274 = t27271+t27272+t27273-t27289;
                double t27275 = c*c0*t27210*t27211*t27214*t27215*t27029*t27209*t27148*(2.0/9.0);
                double t27276 = a3*c0*gamma_bb*t26998*t27210*t27211*t27214*t27215*t27046*t27209*(1.4E1/9.0);
                double t27277 = c*c0*t26999*t27210*t27211*t27214*t27215*t27225*t27209*t27148*(2.0/3.0);
                double t27278 = c*c0*t27000*t27001*t27003*t27210*t27031*t27211*t27214*t27215*t27209*t27148*(6.4E1/9.0);
                double t27279 = t27225*t27226*3.0;
                double t27280 = c*c0*t27210*t27211*t27029*t27209*t27148*(4.0/3.0);
                double t27281 = a3*c0*gamma_bb*t26998*t27210*t27211*t27046*t27209*(2.8E1/3.0);
                double t27282 = c*c0*t27000*t27001*t27003*t27210*t27031*t27211*t27209*t27148*(1.28E2/3.0);
                double t27290 = c*c0*t26999*t27210*t27213*t27209*t27148*t27175*8.0;
                double t27291 = c0*kab1*rab1*t27211*t27152*t27144*t27180*t27191*t27209*t27219*t27148*(3.2E1/1.5E1);
                double t27283 = t27280+t27281-t27290+t27282-t27291+t27279;
                double t27284 = a3*c0*t26998*t27210*t27211*t27214*t27215*t27028*t27209*(2.0/3.0);
                double t27285 = c*c0*t26999*t27210*t27211*t27214*t27215*t27209*t27148*t27229*(2.0/3.0);
                double t27286 = c*c0*gamma_bb*t27000*t27003*t27210*t27211*t27042*t27214*t27215*t27209*t27148*(8.0/3.0);
                double t27313 = c*c0*t26999*t27210*t27213*t27214*t27215*t27209*t27148*t27178*(4.0/3.0);
                double t27287 = -t27230-t27313+t27227+t27228+t27284+t27285+t27286;
                double t27288 = 1.0/pow(t27212,3.0/2.0);
                double t27292 = 1.0/t27148;
                double t27293 = exp(-t27208);
                double t27294 = t27146*t27146;
                double t27295 = t27151*t27151;
                double t27296 = 1.0/(rho_b*rho_b);
                double t27297 = t27216+t27217+t27218-t27247-t27248+t27275+t27276+t27277+t27278-c*c0*t26999*t27210*t27213*t27214*t27215*t27209*t27148*t27175*(4.0/3.0)-c0*kab1*rab1*t27211*t27214*t27152*t27215*t27144*t27180*t27191*t27209*t27219*t27148*(1.6E1/4.5E1);
                double t27300 = a3*t26998*t27006*t27151*t27171*t27172*t27146*t27159*(3.5E5/3.0);
                double t27301 = a3*t26998*t27006*t27007*t27172*t27146*t27175*t27159*5.0E4;
                double t27302 = gamma_bb*t27000*t27003*t27151*t27063*t27146*t27149*t27159*(3.2E6/3.0);
                double t27303 = gamma_bb*t27000*t27002*t27003*t27146*t27175*t27149*t27159*2.0E5;
                double t27304 = t27000*t27001*t27003*t27063*t27146*t27149*t27159*t27178*(1.6E6/3.0);
                double t27305 = a3*a3;
                double t27306 = 1.0/pow(t27148,5.0/2.0);
                double t27307 = a3*gamma_bb*t26998*t27006*t27171*t27172*t27146*t27159*t27178*(3.5E5/3.0);
                double t27308 = a3*kab1*rab1*t26998*t27151*t27144*t27180*t27046*t27172*t27159*(4.0E4/3.0);
                double t27309 = 1.0/pow(rho_b,2.6E1/3.0);
                double t27310 = c*gamma_bb*kab1*rab1*t27000*t27003*t27031*t27151*t27144*t27180*t27149*t27159*(1.6E5/3.0);
                double t27311 = t27300+t27301+t27310+t27302+t27303+t27304+t27307+t27308-t27233*t27146*t27149*t27159*1.0E5-c*kab1*rab1*t27144*t27180*t27029*t27149*t27159*t27178*(8.0E4/3.0)-gamma_bb*t27001*t27102*t27151*t27035*t27234*t27146*t27149*t27159*(3.2E6/3.0)-gamma_bb*t27003*t27042*t27151*t27305*t27306*t27146*t27159*t27179*1.75E5-a3*t26998*t27000*t27001*t27003*t27006*t27151*t27172*t27146*t27309*t27159*5.0E5;
                double t27316 = dirac(t27181,1.0);
                double t27317 = t27214*t27215;
                double t27318 = t27224*t27270*t27257;
                double t27319 = t27317+t27318;
                v_rho_b_gamma_bb[Q] += scale * rho_b*(c0*t27158*heaviside(c*c0*t26999*(-2.0/3.0)+t27151*t27146*t27149*exp(-t27000*t27001*t27002*t27003)*1.0E5)*(t27056*t27092*(t27100*t27043*t27059*2.0-t27101*t27043*t27084*t27079-gamma_bb*t27003*t27013*t27005*t27045*t27063*(1.28E2/3.0)+a5*c0*t26998*t27010*t27013*t27024*t27046*(6.4E1/9.0)+gamma_bb*t27001*t27102*t27032*t27033*t27035*t27045*(2.56E2/3.0)-gamma_bb*t27002*t27003*t27013*t27005*t27084*t27059*4.0-t27001*t27003*t27013*t27005*t27063*t27059*t27079*(3.2E1/3.0)+a5*c0*t26998*t27010*t27013*t27040*t27041*t27028*(1.6E1/3.0)+c*c0*gamma_bb*t27010*t27003*t27013*t27031*t27005*t27015*t27024*(5.44E2/9.0)-c*c0*gamma_bb*t27010*t27003*t27031*t27005*t27032*t27015*t27024*(5.44E2/9.0)+a5*c0*t26998*t27001*t27010*t27003*t27030*t27013*t27005*t27024*(1.6E2/3.0)-a5*c0*t26998*t27001*t27010*t27003*t27030*t27005*t27032*t27024*(1.6E2/3.0)+c*c0*gamma_bb*t27010*t27003*t27013*t27040*t27005*t27041*t27015*t27042*(6.4E1/3.0)-c*c0*gamma_bb*t27010*t27003*t27040*t27005*t27032*t27041*t27015*t27042*(6.4E1/3.0)+c*c0*gamma_bb*t27001*t27010*t27013*t27015*t27024*t27033*t27034*t27035*(1.024E3/9.0)-c*c0*gamma_bb*t27001*t27010*t27032*t27015*t27024*t27033*t27034*t27035*(2.048E3/9.0)+c*c0*gamma_bb*t27001*t27010*t27015*t27024*t27033*t27034*t27035*t27069*(5.12E2/3.0))+t27056*t27087*(t27070-t27133+t27071+t27064+t27065-t27074+t27066-t27075+t27067-t27076+t27068+t27060*t27061+t27060*t27249*(1.0/3.0)+(t27040*t27060*2.0)/t27023+t27001*t27003*t27005*t27060*t27063*(3.2E1/3.0)-t27001*t27003*t27005*t27060*t27043*t27063*(3.2E1/3.0)+a5*gamma_bb*t26998*t27006*t27060*t27132*t27171*(7.0/3.0)+a5*c0*t26998*t27010*t27013*t27024*t27046*t27047*t27048*(1.6E1/9.0)+a5*c0*t26998*t27010*t27013*t27040*t27041*t27028*t27047*t27048*(4.0/3.0)+a5*c0*t26998*t27010*t27013*t27024*t27061*t27028*t27047*t27048*(2.0/3.0)+c*c0*t26999*t27010*t27013*t27015*t27024*t27072*t27047*t27048*(2.0/3.0)+c*c0*t27010*t27013*t27015*t27024*t27060*t27029*t27047*t27048*(2.0/9.0)+a5*c0*gamma_bb*t26998*t27010*t27013*t27024*t27060*t27046*t27047*t27048*(1.4E1/9.0)+c*c0*t26999*t27010*t27013*t27040*t27041*t27015*t27060*t27047*t27048*(4.0/3.0)+c*c0*t26999*t27010*t27013*t27015*t27024*t27060*t27061*t27047*t27048*(2.0/3.0)+c*c0*gamma_bb*t27010*t27003*t27013*t27031*t27005*t27015*t27024*t27047*t27048*(1.36E2/9.0)-c*c0*gamma_bb*t27010*t27003*t27031*t27005*t27032*t27015*t27024*t27047*t27048*(1.36E2/9.0)+a5*c0*t26998*t27001*t27010*t27003*t27030*t27013*t27005*t27024*t27047*t27048*(4.0E1/3.0)-a5*c0*t26998*t27001*t27010*t27003*t27030*t27005*t27032*t27024*t27047*t27048*(4.0E1/3.0)+c*c0*gamma_bb*t27010*t27003*t27013*t27040*t27005*t27041*t27015*t27042*t27047*t27048*(1.6E1/3.0)-c*c0*gamma_bb*t27010*t27003*t27040*t27005*t27032*t27041*t27015*t27042*t27047*t27048*(1.6E1/3.0)+c*c0*gamma_bb*t27010*t27003*t27013*t27005*t27015*t27024*t27042*t27061*t27047*t27048*(8.0/3.0)+c*c0*gamma_bb*t27001*t27010*t27013*t27015*t27024*t27033*t27034*t27035*t27047*t27048*(2.56E2/9.0)-c*c0*gamma_bb*t27010*t27003*t27005*t27032*t27015*t27024*t27042*t27061*t27047*t27048*(8.0/3.0)-c*c0*gamma_bb*t27001*t27010*t27032*t27015*t27024*t27033*t27034*t27035*t27047*t27048*(5.12E2/9.0)+c*c0*gamma_bb*t27001*t27010*t27015*t27024*t27033*t27034*t27035*t27047*t27048*t27069*(1.28E2/3.0)+c*c0*t27001*t27010*t27003*t27013*t27031*t27005*t27015*t27024*t27060*t27047*t27048*(6.4E1/9.0)-c*c0*t27001*t27010*t27003*t27031*t27005*t27032*t27015*t27024*t27060*t27047*t27048*(6.4E1/9.0))+t27140*t27106*t27056+t27141*t27118*t27056+t27072*t27047*t27048-t27112*t27106*t27092*t27093+t27060*t27061*t27047*t27048-t27112*t27141*t27093*t27087-t27122*t27140*t27093*t27087-t27122*t27118*t27092*t27093-t27092*t27093*t27087*(t27100*t27043*t27059*3.0-t27101*t27043*t27084*t27079*(3.0/2.0)-gamma_bb*t27003*t27013*t27005*t27045*t27063*6.4E1+a5*c0*t26998*t27010*t27013*t27024*t27046*(3.2E1/3.0)+gamma_bb*t27001*t27102*t27032*t27033*t27035*t27045*1.28E2-gamma_bb*t27002*t27003*t27013*t27005*t27084*t27059*6.0-t27001*t27003*t27013*t27005*t27063*t27059*t27079*1.6E1+a5*c0*t26998*t27010*t27013*t27040*t27041*t27028*8.0+c*c0*gamma_bb*t27010*t27003*t27013*t27031*t27005*t27015*t27024*(2.72E2/3.0)-c*c0*gamma_bb*t27010*t27003*t27031*t27005*t27032*t27015*t27024*(2.72E2/3.0)+a5*c0*t26998*t27001*t27010*t27003*t27030*t27013*t27005*t27024*8.0E1-a5*c0*t26998*t27001*t27010*t27003*t27030*t27005*t27032*t27024*8.0E1+c*c0*gamma_bb*t27010*t27003*t27013*t27040*t27005*t27041*t27015*t27042*3.2E1-c*c0*gamma_bb*t27010*t27003*t27040*t27005*t27032*t27041*t27015*t27042*3.2E1+c*c0*gamma_bb*t27001*t27010*t27013*t27015*t27024*t27033*t27034*t27035*(5.12E2/3.0)-c*c0*gamma_bb*t27001*t27010*t27032*t27015*t27024*t27033*t27034*t27035*(1.024E3/3.0)+c*c0*gamma_bb*t27001*t27010*t27015*t27024*t27033*t27034*t27035*t27069*2.56E2)+t27112*t27122*1.0/(t27055*t27055*t27055)*t27092*t27087*2.0+t27006*t27132*t27134*t27072*t27135*t27136*t27137*t27138*(3.0/2.0)+t27006*t27060*t27132*t27061*t27134*t27135*t27136*t27137*t27138*(3.0/2.0)-a5*t26998*1.0/(t27015*t27015)*t27061*t27134*t27136*t27137*t27138*t27179*t27296*(3.0/2.0)+gamma_bb*t27003*t27012*t27005*t27006*t27132*t27061*t27134*t27136*t27138*t27139*6.0-gamma_bb*t27003*t27005*t27006*t27132*t27061*t27134*t27136*t27137*t27138*t27139*6.0)*(-1.0/2.0)+c0*t27311*t27190*t27182*t27158*(1.0/2.0)+c0*t27205*t27182*t27158*t27187*(1.0/2.0)+c0*t27207*t27158*t27187*t27197*(1.0/2.0)+c0*t27200*t27158*dirac(t27165-t27151*t27146*t27149*t27159*1.0E5)*(t27061*t27047*t27048+t27140*t27056*t27087+t27118*t27056*t27092-t27112*t27092*t27093*t27087+t27006*t27132*t27061*t27134*t27135*t27136*t27137*t27138*(3.0/2.0))*(1.0/2.0)+c0*t27200*t27205*t27190*t27316*t27158*(1.0/2.0)-c0*t27200*t27190*t27182*t27158*t27197*(1.0/2.0))+rho_a*(c0*t27207*(t27224*t27257*(t27226*t27246*2.0+t27225*t27229*t27288-a3*c0*t26998*t27210*t27211*t27046*t27209*(6.4E1/9.0)+a3*c0*t26998*t27210*t27213*t27028*t27209*t27175*(1.6E1/3.0)+c*c0*t26999*t27210*t27213*t27233*t27209*t27148*(1.6E1/3.0)+c*c0*t27210*t27213*t27029*t27209*t27148*t27178*(1.6E1/9.0)+a3*c0*gamma_bb*t26998*t27210*t27213*t27046*t27209*t27178*(1.12E2/9.0)-c*c0*t26999*t27210*t27209*t27148*t27175*t27238*t27178*1.6E1-c*c0*gamma_bb*t27000*t27003*t27210*t27031*t27211*t27209*t27148*(5.44E2/9.0)-a3*c0*t26998*t27000*t27001*t27003*t27030*t27210*t27211*t27209*(1.6E2/3.0)+c*c0*gamma_bb*t27000*t27003*t27210*t27042*t27213*t27209*t27148*t27175*(6.4E1/3.0)-c*c0*gamma_bb*t27001*t27210*t27211*t27034*t27035*t27234*t27209*t27148*(1.024E3/9.0)+c*c0*t27000*t27001*t27003*t27210*t27031*t27213*t27209*t27148*t27178*(5.12E2/9.0)+a3*c*c0*kab1*rab1*t26998*t27211*t27242*t27144*t27180*t27209*t27219*(6.4E1/4.5E1)-c0*kab1*rab1*t27213*t27152*t27144*t27180*t27191*t27209*t27219*t27148*t27178*(1.28E2/4.5E1)+c0*gamma_bb*kab1*rab1*t27000*t27003*t27211*t27152*t27144*t27180*t27244*t27209*t27219*t27148*(2.56E2/4.5E1))+t27224*t27270*(t27240+t27241-t27250-t27251+t27243-t27252+t27235-t27253+t27236+t27245-t27254+t27237-t27255+t27239-t27225*t27229-t27229*t27249*(1.0/3.0)+(t27175*t27229*2.0)/t27151-t27000*t27001*t27003*t27063*t27229*(3.2E1/3.0)-a3*gamma_bb*t26998*t27006*t27171*t27229*t27292*(7.0/3.0)+(c*kab1*rab1*t27144*t27180*t27029*t27229*(8.0/1.5E1))/t27146-a3*c0*t26998*t27210*t27211*t27214*t27215*t27046*t27209*(1.6E1/9.0)-a3*c0*t26998*t27210*t27211*t27214*t27215*t27225*t27028*t27209*(2.0/3.0)+a3*c0*t26998*t27210*t27213*t27214*t27215*t27028*t27209*t27175*(4.0/3.0)+c*c0*t26999*t27210*t27213*t27214*t27215*t27233*t27209*t27148*(4.0/3.0)+c*c0*t26999*t27210*t27211*t27214*t27215*t27209*t27246*t27148*(2.0/3.0)-c*c0*t27210*t27211*t27214*t27215*t27029*t27209*t27148*t27229*(2.0/9.0)+c*c0*t27210*t27213*t27214*t27215*t27029*t27209*t27148*t27178*(4.0/9.0)-a3*c0*gamma_bb*t26998*t27210*t27211*t27214*t27215*t27046*t27209*t27229*(1.4E1/9.0)+a3*c0*gamma_bb*t26998*t27210*t27213*t27214*t27215*t27046*t27209*t27178*(2.8E1/9.0)-c*c0*t26999*t27210*t27211*t27214*t27215*t27225*t27209*t27148*t27229*(2.0/3.0)+c*c0*t26999*t27210*t27213*t27214*t27215*t27225*t27209*t27148*t27178*(4.0/3.0)+c*c0*t26999*t27210*t27213*t27214*t27215*t27209*t27148*t27175*t27229*(4.0/3.0)-c*c0*t26999*t27210*t27214*t27215*t27209*t27148*t27175*t27238*t27178*4.0-c*c0*gamma_bb*t27000*t27003*t27210*t27031*t27211*t27214*t27215*t27209*t27148*(1.36E2/9.0)-a3*c0*t26998*t27000*t27001*t27003*t27030*t27210*t27211*t27214*t27215*t27209*(4.0E1/3.0)-c*c0*gamma_bb*t27000*t27003*t27210*t27211*t27042*t27214*t27215*t27225*t27209*t27148*(8.0/3.0)+c*c0*gamma_bb*t27000*t27003*t27210*t27042*t27213*t27214*t27215*t27209*t27148*t27175*(1.6E1/3.0)-c*c0*gamma_bb*t27001*t27210*t27211*t27034*t27214*t27035*t27215*t27234*t27209*t27148*(2.56E2/9.0)-c*c0*t27000*t27001*t27003*t27210*t27031*t27211*t27214*t27215*t27209*t27148*t27229*(6.4E1/9.0)+c*c0*t27000*t27001*t27003*t27210*t27031*t27213*t27214*t27215*t27209*t27148*t27178*(1.28E2/9.0)+a3*c*c0*kab1*rab1*t26998*t27211*t27214*t27215*t27242*t27144*t27180*t27209*t27219*(1.6E1/4.5E1)+c0*kab1*rab1*t27211*t27214*t27152*t27215*t27144*t27180*t27191*t27209*t27219*t27148*t27229*(1.6E1/4.5E1)-c0*kab1*rab1*t27213*t27214*t27152*t27215*t27144*t27180*t27191*t27209*t27219*t27148*t27178*(3.2E1/4.5E1)+c0*gamma_bb*kab1*rab1*t27000*t27003*t27211*t27214*t27152*t27215*t27144*t27180*t27244*t27209*t27219*t27148*(6.4E1/4.5E1))+t27214*t27215*t27246-t27224*t27267*t27287-t27224*t27261*(t27216+t27217+t27218+t27275+t27276+t27277+t27278-c*c0*t26999*t27210*t27213*t27209*t27148*t27175*(4.0/3.0)-c*c0*t26999*t27210*t27213*t27214*t27215*t27209*t27148*t27175*(4.0/3.0)-c0*kab1*rab1*t27211*t27152*t27144*t27180*t27191*t27209*t27219*t27148*(1.6E1/4.5E1)-c0*kab1*rab1*t27211*t27214*t27152*t27215*t27144*t27180*t27191*t27209*t27219*t27148*(1.6E1/4.5E1))-t27214*t27215*t27225*t27229+t27261*t27262*t27283*t27257+t27270*t27262*t27283*t27287+t27270*t27262*t27274*t27297+t27262*t27274*t27257*t27267-t27270*t27262*t27257*(t27226*t27246*3.0+t27225*t27229*t27288*(3.0/2.0)-a3*c0*t26998*t27210*t27211*t27046*t27209*(3.2E1/3.0)+a3*c0*t26998*t27210*t27213*t27028*t27209*t27175*8.0+c*c0*t26999*t27210*t27213*t27233*t27209*t27148*8.0+c*c0*t27210*t27213*t27029*t27209*t27148*t27178*(8.0/3.0)+a3*c0*gamma_bb*t26998*t27210*t27213*t27046*t27209*t27178*(5.6E1/3.0)-c*c0*t26999*t27210*t27209*t27148*t27175*t27238*t27178*2.4E1-c*c0*gamma_bb*t27000*t27003*t27210*t27031*t27211*t27209*t27148*(2.72E2/3.0)-a3*c0*t26998*t27000*t27001*t27003*t27030*t27210*t27211*t27209*8.0E1+c*c0*gamma_bb*t27000*t27003*t27210*t27042*t27213*t27209*t27148*t27175*3.2E1-c*c0*gamma_bb*t27001*t27210*t27211*t27034*t27035*t27234*t27209*t27148*(5.12E2/3.0)+c*c0*t27000*t27001*t27003*t27210*t27031*t27213*t27209*t27148*t27178*(2.56E2/3.0)+a3*c*c0*kab1*rab1*t26998*t27211*t27242*t27144*t27180*t27209*t27219*(3.2E1/1.5E1)-c0*kab1*rab1*t27213*t27152*t27144*t27180*t27191*t27209*t27219*t27148*t27178*(6.4E1/1.5E1)+c0*gamma_bb*kab1*rab1*t27000*t27003*t27211*t27152*t27144*t27180*t27244*t27209*t27219*t27148*(1.28E2/1.5E1))-1.0/(t27223*t27223*t27223)*t27270*t27274*t27283*t27257*2.0+t27006*t27134*t27135*t27246*t27292*t27293*t27294*t27295*(3.0/2.0)-t27006*t27151*t27134*t27135*t27225*t27292*t27293*t27294*t27178*3.0-t27006*t27134*t27135*t27225*t27229*t27292*t27293*t27294*t27295*(3.0/2.0)+a3*t26998*t27134*t27225*1.0/(t27148*t27148)*t27293*t27294*t27295*t27179*t27296*(3.0/2.0)+gamma_bb*t27000*t27003*t27006*t27134*t27225*t27139*t27292*t27293*t27294*t27295*6.0)*(1.0/2.0)+c0*t27311*t27182*t27319*(1.0/2.0)+c0*t27200*t27182*(t27214*t27215*t27225+t27224*t27270*t27297+t27224*t27257*t27267-t27270*t27262*t27283*t27257+t27006*t27134*t27135*t27225*t27292*t27293*t27294*t27295*(3.0/2.0))*(1.0/2.0)+c0*t27205*t27182*(t27214*t27215*t27229+t27224*t27261*t27257+t27224*t27270*t27287-t27270*t27262*t27274*t27257+t27006*t27134*t27135*t27229*t27292*t27293*t27294*t27295*(3.0/2.0))*(1.0/2.0)+c0*t27200*t27205*t27316*t27319*(1.0/2.0))+c0*t27207*t27158*t27187*(1.0/2.0)-c0*t27200*t27190*t27182*t27158*(1.0/2.0);
            }
            
        }
    }
}

}
