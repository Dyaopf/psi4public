#include <libmints/vector.h>
#include "FT97_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

FT97_CFunctional::FT97_CFunctional()
{
    name_ = "FT97_C";
    description_ = "    FT97 Correlation (Involves Ei functions)\n";
    citation_ = "    M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c0"] =   3.1090690869654901E-02;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["tspi_m13"] =   2.0678349696646670E-01;
    parameters_["a1"] =   1.6221187669999999E+00;
    parameters_["a2"] =   4.8995807600000002E-01;
    parameters_["a3"] =   1.3790219410000000E+00;
    parameters_["a4"] =   4.9462813529999998E+00;
    parameters_["a5"] =   3.6006120589999999E+00;
    parameters_["kaa0"] =   1.2008017740000001E+00;
    parameters_["kaa1"] =  -8.1290434499999997E-01;
    parameters_["kaa2"] =   8.5961444499999995E-01;
    parameters_["raa1"] =   6.5563882299999998E-01;
    parameters_["raa2"] =   1.0893388479999999E+00;
    parameters_["kab0"] =   1.2915510740000000E+00;
    parameters_["kab1"] =  -3.4906417299999998E-01;
    parameters_["rab1"] =   8.3275879999999997E-02;
    parameters_["k1"] =   9.3901599999999996E-01;
    parameters_["k2"] =   1.7331700000000001E+00;
}
FT97_CFunctional::~FT97_CFunctional()
{
}
void FT97_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c0 = parameters_["c0"];
    double c = parameters_["c"];
    double tspi_m13 = parameters_["tspi_m13"];
    double a1 = parameters_["a1"];
    double a2 = parameters_["a2"];
    double a3 = parameters_["a3"];
    double a4 = parameters_["a4"];
    double a5 = parameters_["a5"];
    double kaa0 = parameters_["kaa0"];
    double kaa1 = parameters_["kaa1"];
    double kaa2 = parameters_["kaa2"];
    double raa1 = parameters_["raa1"];
    double raa2 = parameters_["raa2"];
    double kab0 = parameters_["kab0"];
    double kab1 = parameters_["kab1"];
    double rab1 = parameters_["rab1"];
    double k1 = parameters_["k1"];
    double k2 = parameters_["k2"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t8155 = tspi_m13*tspi_m13;
                double t8156 = 1.0/pow(rho_b,1.0/3.0);
                double t8157 = a2*a2;
                double t8158 = gamma_bb*gamma_bb;
                double t8159 = 1.0/pow(rho_b,1.6E1/3.0);
                double t8160 = t8155*t8155;
                double t8161 = c*t8156;
                double t8162 = a4*a4;
                double t8163 = 1.0/c;
                double t8164 = 1.0/pow(rho_b,7.0/3.0);
                double t8165 = sqrt(t8161);
                double t8166 = t8160*t8162*t8158*t8159*2.0;
                double t8167 = exp(t8166);
                double t8168 = t8160*t8162*t8158*t8159;
                double t8169 = t8168+1.0;
                double t8170 = 1.0/(t8169*t8169);
                double t8171 = a5*gamma_bb*t8163*t8155*t8164;
                double t8172 = t8171+1.0;
                double t8183 = raa2*t8165;
                double t8173 = exp(-t8183);
                double t8174 = t8173-1.0;
                double t8175 = kaa2*t8174;
                double t8176 = pow(t8161,2.0/5.0);
                double t8184 = raa1*t8176;
                double t8177 = exp(-t8184);
                double t8178 = t8177-1.0;
                double t8179 = kaa1*t8178;
                double t8180 = -kaa0+t8175+t8179;
                double t8181 = 1.0/(t8180*t8180);
                double t8182 = c*c0*t8170*t8172*t8181*t8156*t8167*(2.0/3.0);
                double t8185;
                double t8186;
                if (t8182 > expei_cutoff) {
                    t8185 = 1.0;
                    t8186 = expei(t8182);
                } else {
                    t8185 = exp(t8182);
                    t8186 = Ei(-t8182);
                }
                double t8187 = 1.0/t8169;
                double t8188 = c*c0*t8172*t8181*t8156*t8167*(2.0/3.0);
                double t8189 = sqrt(t8188);
                v[Q] += scale * c0*rho_b*exp(-(c*c)*1.0/pow(rho_b,2.0/3.0)*1.0/pow(k1*t8165+c*k2*t8156,2.0))*heaviside(c*c0*t8156*(-2.0/3.0)+exp(-t8160*t8157*t8158*t8159)*(kab0-kab1*(exp(-rab1*pow(t8161,4.0/5.0))-1.0))*1.0/sqrt(a3*gamma_bb*t8163*t8155*t8164+1.0)*(t8160*t8157*t8158*t8159+a1*gamma_bb*1.0/pow(rho_b,8.0/3.0)*t8155+1.0)*1.0E5)*(t8185*t8186+((c*c0*t8170*t8172*t8181*t8156*t8167*t8185*t8186*(2.0/3.0)+1.0)*(t8187*t8189*4.0+c*c0*t8170*t8172*t8181*t8156*t8167*(8.0/3.0)+6.0))/(t8187*t8189*6.0+c*c0*t8170*t8172*t8181*t8156*t8167*4.0+3.0))*(1.0/2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t8192 = tspi_m13*tspi_m13;
                double t8193 = 1.0/pow(rho_b,1.0/3.0);
                double t8194 = a2*a2;
                double t8195 = gamma_bb*gamma_bb;
                double t8196 = 1.0/pow(rho_b,1.6E1/3.0);
                double t8197 = t8192*t8192;
                double t8198 = c*t8193;
                double t8199 = a4*a4;
                double t8200 = 1.0/c;
                double t8201 = 1.0/pow(rho_b,7.0/3.0);
                double t8202 = sqrt(t8198);
                double t8203 = t8195*t8196*t8197*t8199*2.0;
                double t8204 = exp(t8203);
                double t8205 = t8195*t8196*t8197*t8199;
                double t8206 = t8205+1.0;
                double t8207 = 1.0/(t8206*t8206);
                double t8208 = a5*gamma_bb*t8192*t8200*t8201;
                double t8209 = t8208+1.0;
                double t8220 = raa2*t8202;
                double t8210 = exp(-t8220);
                double t8211 = t8210-1.0;
                double t8212 = kaa2*t8211;
                double t8213 = pow(t8198,2.0/5.0);
                double t8221 = raa1*t8213;
                double t8214 = exp(-t8221);
                double t8215 = t8214-1.0;
                double t8216 = kaa1*t8215;
                double t8217 = -kaa0+t8212+t8216;
                double t8218 = 1.0/(t8217*t8217);
                double t8219 = c*c0*t8193*t8204*t8207*t8209*t8218*(2.0/3.0);
                double t8222;
                double t8223;
                if (t8219 > expei_cutoff) {
                    t8222 = 1.0;
                    t8223 = expei(t8219);
                } else {
                    t8222 = exp(t8219);
                    t8223 = Ei(-t8219);
                }
                double t8224 = 1.0/t8206;
                double t8225 = c*c0*t8193*t8204*t8209*t8218*(2.0/3.0);
                double t8226 = sqrt(t8225);
                double t8227 = t8194*t8195*t8196*t8197;
                double t8228 = pow(t8198,4.0/5.0);
                double t8278 = rab1*t8228;
                double t8229 = exp(-t8278);
                double t8230 = t8229-1.0;
                double t8279 = kab1*t8230;
                double t8231 = kab0-t8279;
                double t8232 = a3*gamma_bb*t8192*t8200*t8201;
                double t8233 = t8232+1.0;
                double t8234 = 1.0/sqrt(t8233);
                double t8235 = 1.0/pow(rho_b,8.0/3.0);
                double t8236 = a1*gamma_bb*t8192*t8235;
                double t8237 = t8227+t8236+1.0;
                double t8238 = c*c;
                double t8239 = 1.0/pow(rho_b,2.0/3.0);
                double t8240 = k1*t8202;
                double t8241 = c*k2*t8193;
                double t8242 = t8240+t8241;
                double t8243 = 1.0/(t8242*t8242);
                double t8283 = t8243*t8238*t8239;
                double t8244 = exp(-t8283);
                double t8245 = c*c0*t8193*t8204*t8222*t8223*t8207*t8209*t8218*(2.0/3.0);
                double t8246 = t8245+1.0;
                double t8247 = t8224*t8226*6.0;
                double t8248 = c*c0*t8193*t8204*t8207*t8209*t8218*4.0;
                double t8249 = t8247+t8248+3.0;
                double t8250 = 1.0/t8249;
                double t8251 = 1.0/pow(rho_b,4.0/3.0);
                double t8252 = 1.0/pow(rho_b,1.1E1/3.0);
                double t8253 = 1.0/sqrt(t8198);
                double t8254 = c*kaa2*raa2*t8210*t8251*t8253*(1.0/6.0);
                double t8255 = 1.0/pow(t8198,3.0/5.0);
                double t8256 = c*kaa1*raa1*t8214*t8251*t8255*(2.0/1.5E1);
                double t8257 = t8254+t8256;
                double t8258 = 1.0/(t8217*t8217*t8217);
                double t8259 = 1.0/pow(rho_b,2.0E1/3.0);
                double t8260 = 1.0/(t8206*t8206*t8206);
                double t8261 = t8224*t8226*4.0;
                double t8262 = c*c0*t8193*t8204*t8207*t8209*t8218*(8.0/3.0);
                double t8263 = t8261+t8262+6.0;
                double t8264 = c*c0*t8204*t8251*t8207*t8209*t8218*(2.0/9.0);
                double t8265 = a5*c0*gamma_bb*t8192*t8204*t8207*t8252*t8218*(1.4E1/9.0);
                double t8266 = c*c0*t8193*t8204*t8207*t8209*t8257*t8258*(4.0/3.0);
                double t8267 = c*c0*t8195*t8197*t8199*t8204*t8207*t8209*t8218*t8259*(6.4E1/9.0);
                double t8269 = c*c0*t8195*t8197*t8199*t8204*t8260*t8209*t8218*t8259*(6.4E1/9.0);
                double t8268 = t8264+t8265+t8266+t8267-t8269;
                double t8270 = c*c0*t8204*t8251*t8209*t8218*(2.0/9.0);
                double t8271 = a5*c0*gamma_bb*t8192*t8204*t8252*t8218*(1.4E1/9.0);
                double t8272 = c*c0*t8193*t8204*t8209*t8257*t8258*(4.0/3.0);
                double t8273 = c*c0*t8195*t8197*t8199*t8204*t8209*t8218*t8259*(6.4E1/9.0);
                double t8274 = t8270+t8271+t8272+t8273;
                double t8275 = 1.0/sqrt(t8225);
                double t8276 = 1.0/pow(rho_b,1.9E1/3.0);
                double t8277 = exp(-t8227);
                double t8280 = t8231*t8234*t8237*t8277*1.0E5;
                double t8287 = c*c0*t8193*(2.0/3.0);
                double t8281 = t8280-t8287;
                double t8282 = heaviside(t8281);
                double t8284 = t8222*t8223;
                double t8285 = t8250*t8263*t8246;
                double t8286 = t8284+t8285;
                v_rho_b[Q] += scale * c0*t8244*t8286*heaviside(c*c0*t8193*(-2.0/3.0)+t8231*t8234*t8237*exp(-t8194*t8195*t8196*t8197)*1.0E5)*(1.0/2.0)-c0*rho_b*t8244*t8282*(t8250*t8246*(t8224*t8274*t8275*2.0-t8195*t8197*t8199*t8207*t8226*t8276*(6.4E1/3.0)+c*c0*t8204*t8251*t8207*t8209*t8218*(8.0/9.0)+a5*c0*gamma_bb*t8192*t8204*t8207*t8252*t8218*(5.6E1/9.0)+c*c0*t8193*t8204*t8207*t8209*t8257*t8258*(1.6E1/3.0)-c*c0*t8195*t8197*t8199*t8204*t8260*t8209*t8218*t8259*(2.56E2/9.0)+c*c0*t8195*t8197*t8199*t8204*t8207*t8209*t8218*t8259*(2.56E2/9.0))+t8250*t8263*(t8264+t8265+t8266+t8267-t8269+c*c0*t8204*t8222*t8223*t8251*t8207*t8209*t8218*(2.0/9.0)+a5*c0*gamma_bb*t8192*t8204*t8222*t8223*t8207*t8252*t8218*(1.4E1/9.0)+c*c0*t8193*t8204*t8222*t8223*t8207*t8209*t8218*t8268*(2.0/3.0)+c*c0*t8193*t8204*t8222*t8223*t8207*t8209*t8257*t8258*(4.0/3.0)-c*c0*t8195*t8197*t8199*t8204*t8222*t8223*t8260*t8209*t8218*t8259*(6.4E1/9.0)+c*c0*t8195*t8197*t8199*t8204*t8222*t8223*t8207*t8209*t8218*t8259*(6.4E1/9.0))+t8222*t8223*t8268-t8263*t8246*1.0/(t8249*t8249)*(t8224*t8274*t8275*3.0-t8195*t8197*t8199*t8207*t8226*t8276*3.2E1+c*c0*t8204*t8251*t8207*t8209*t8218*(4.0/3.0)+a5*c0*gamma_bb*t8192*t8204*t8207*t8252*t8218*(2.8E1/3.0)+c*c0*t8193*t8204*t8207*t8209*t8257*t8258*8.0-c*c0*t8195*t8197*t8199*t8204*t8260*t8209*t8218*t8259*(1.28E2/3.0)+c*c0*t8195*t8197*t8199*t8204*t8207*t8209*t8218*t8259*(1.28E2/3.0))+(pow(rho_b,1.0/3.0)*t8200*(t8206*t8206)*(t8217*t8217)*t8268*exp(-t8203)*(3.0/2.0))/(c0*t8209))*(1.0/2.0)+c0*rho_b*t8244*t8282*t8286*(1.0/pow(rho_b,5.0/3.0)*t8243*t8238*(2.0/3.0)-1.0/(t8242*t8242*t8242)*t8238*t8239*(c*k2*t8251*(1.0/3.0)+c*k1*t8251*t8253*(1.0/6.0))*2.0)*(1.0/2.0)+c0*rho_b*t8244*t8286*dirac(-t8280+t8287)*(c*c0*t8251*(2.0/9.0)-t8231*t8234*t8277*(a1*gamma_bb*t8192*t8252*(8.0/3.0)+t8194*t8195*t8197*t8276*(1.6E1/3.0))*1.0E5+t8194*t8195*t8197*t8231*t8234*t8237*t8276*t8277*(1.6E6/3.0)+a3*gamma_bb*1.0/pow(rho_b,1.0E1/3.0)*t8192*t8200*t8231*1.0/pow(t8233,3.0/2.0)*t8237*t8277*(3.5E5/3.0)-c*kab1*rab1*1.0/pow(t8198,1.0/5.0)*t8251*t8234*t8237*t8229*t8277*(8.0E4/3.0))*(1.0/2.0);
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t8291 = tspi_m13*tspi_m13;
                double t8292 = 1.0/pow(rho_b,1.0/3.0);
                double t8293 = a2*a2;
                double t8294 = gamma_bb*gamma_bb;
                double t8295 = 1.0/pow(rho_b,1.6E1/3.0);
                double t8296 = t8291*t8291;
                double t8297 = c*t8292;
                double t8298 = a4*a4;
                double t8299 = 1.0/c;
                double t8300 = 1.0/pow(rho_b,7.0/3.0);
                double t8301 = sqrt(t8297);
                double t8302 = t8294*t8295*t8296*t8298*2.0;
                double t8303 = exp(t8302);
                double t8304 = t8294*t8295*t8296*t8298;
                double t8305 = t8304+1.0;
                double t8306 = 1.0/(t8305*t8305);
                double t8307 = a5*gamma_bb*t8291*t8299*t8300;
                double t8308 = t8307+1.0;
                double t8320 = raa2*t8301;
                double t8309 = exp(-t8320);
                double t8310 = t8309-1.0;
                double t8311 = kaa2*t8310;
                double t8312 = pow(t8297,2.0/5.0);
                double t8321 = raa1*t8312;
                double t8313 = exp(-t8321);
                double t8314 = t8313-1.0;
                double t8315 = kaa1*t8314;
                double t8316 = -kaa0+t8311+t8315;
                double t8317 = 1.0/(t8316*t8316);
                double t8318 = c*c0*t8292*t8303*t8306*t8308*t8317*(2.0/3.0);
                double t8319 = 1.0/pow(rho_b,8.0/3.0);
                double t8322 = 1.0/pow(rho_b,1.7E1/3.0);
                double t8323;
                double t8324;
                if (t8318 > expei_cutoff) {
                    t8323 = 1.0;
                    t8324 = expei(t8318);
                } else {
                    t8323 = exp(t8318);
                    t8324 = Ei(-t8318);
                }
                double t8325 = 1.0/t8305;
                double t8326 = c*c0*t8292*t8303*t8308*t8317*(2.0/3.0);
                double t8327 = sqrt(t8326);
                double t8328 = 1.0/(t8305*t8305*t8305);
                double t8329 = t8325*t8327*6.0;
                double t8330 = c*c0*t8292*t8303*t8306*t8308*t8317*4.0;
                double t8331 = t8330+t8329+3.0;
                double t8332 = 1.0/t8331;
                double t8333 = a5*c0*t8291*t8303*t8306*t8317*t8319*(2.0/3.0);
                double t8334 = c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8306*t8308*t8317*(8.0/3.0);
                double t8345 = c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8308*t8317*t8328*(8.0/3.0);
                double t8335 = t8333+t8334-t8345;
                double t8336 = c*c0*t8292*t8303*t8323*t8306*t8324*t8308*t8317*(2.0/3.0);
                double t8337 = t8336+1.0;
                double t8338 = t8325*t8327*4.0;
                double t8339 = c*c0*t8292*t8303*t8306*t8308*t8317*(8.0/3.0);
                double t8340 = t8338+t8339+6.0;
                double t8341 = a5*c0*t8291*t8303*t8317*t8319*(2.0/3.0);
                double t8342 = c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8308*t8317*(8.0/3.0);
                double t8343 = t8341+t8342;
                double t8344 = 1.0/sqrt(t8326);
                double t8346 = t8293*t8294*t8295*t8296;
                double t8347 = pow(t8297,4.0/5.0);
                double t8364 = rab1*t8347;
                double t8348 = exp(-t8364);
                double t8349 = t8348-1.0;
                double t8365 = kab1*t8349;
                double t8350 = kab0-t8365;
                double t8351 = a3*gamma_bb*t8291*t8299*t8300;
                double t8352 = t8351+1.0;
                double t8353 = 1.0/sqrt(t8352);
                double t8354 = a1*gamma_bb*t8291*t8319;
                double t8355 = t8354+t8346+1.0;
                double t8356 = c*c;
                double t8357 = 1.0/pow(rho_b,2.0/3.0);
                double t8358 = k1*t8301;
                double t8359 = c*k2*t8292;
                double t8360 = t8358+t8359;
                double t8361 = 1.0/(t8360*t8360);
                double t8362 = exp(-t8361*t8356*t8357);
                double t8363 = exp(-t8346);
                v_gamma_bb[Q] += scale * c0*rho_b*t8362*heaviside(c*c0*t8292*(-2.0/3.0)+t8350*t8353*t8355*exp(-t8293*t8294*t8295*t8296)*1.0E5)*(t8332*t8337*(t8325*t8343*t8344*2.0-gamma_bb*t8295*t8296*t8298*t8306*t8327*8.0+a5*c0*t8291*t8303*t8306*t8317*t8319*(8.0/3.0)+c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8306*t8308*t8317*(3.2E1/3.0)-c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8308*t8317*t8328*(3.2E1/3.0))+t8340*t8332*(t8333+t8334+a5*c0*t8291*t8303*t8323*t8306*t8324*t8317*t8319*(2.0/3.0)-c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8308*t8317*t8328*(8.0/3.0)+c*c0*t8292*t8303*t8323*t8306*t8324*t8308*t8317*t8335*(2.0/3.0)+c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8323*t8306*t8324*t8308*t8317*(8.0/3.0)-c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8323*t8324*t8308*t8317*t8328*(8.0/3.0))+t8323*t8324*t8335-1.0/(t8331*t8331)*t8340*t8337*(t8325*t8343*t8344*3.0-gamma_bb*t8295*t8296*t8298*t8306*t8327*1.2E1+a5*c0*t8291*t8303*t8306*t8317*t8319*4.0+c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8306*t8308*t8317*1.6E1-c*c0*gamma_bb*t8296*t8298*t8303*t8322*t8308*t8317*t8328*1.6E1)+(pow(rho_b,1.0/3.0)*t8299*(t8305*t8305)*(t8316*t8316)*t8335*exp(-t8302)*(3.0/2.0))/(c0*t8308))*(1.0/2.0)-c0*rho_b*t8362*dirac(c*c0*t8292*(2.0/3.0)-t8350*t8353*t8363*t8355*1.0E5)*(t8323*t8324+t8340*t8332*t8337)*(t8350*t8353*t8363*(a1*t8291*t8319+gamma_bb*t8293*t8295*t8296*2.0)*-1.0E5+a3*t8291*t8299*t8300*t8350*1.0/pow(t8352,3.0/2.0)*t8363*t8355*5.0E4+gamma_bb*t8293*t8295*t8296*t8350*t8353*t8363*t8355*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t8371 = tspi_m13*tspi_m13;
                double t8372 = 1.0/pow(rho_b,1.0/3.0);
                double t8373 = a2*a2;
                double t8374 = gamma_bb*gamma_bb;
                double t8375 = 1.0/pow(rho_b,1.6E1/3.0);
                double t8376 = t8371*t8371;
                double t8377 = c*t8372;
                double t8378 = a4*a4;
                double t8379 = t8374*t8375*t8376*t8378*2.0;
                double t8380 = exp(t8379);
                double t8381 = 1.0/c;
                double t8382 = 1.0/pow(rho_b,7.0/3.0);
                double t8383 = sqrt(t8377);
                double t8384 = t8374*t8375*t8376*t8378;
                double t8385 = t8384+1.0;
                double t8386 = 1.0/(t8385*t8385);
                double t8387 = a5*gamma_bb*t8371*t8381*t8382;
                double t8388 = t8387+1.0;
                double t8399 = raa2*t8383;
                double t8389 = exp(-t8399);
                double t8390 = t8389-1.0;
                double t8391 = kaa2*t8390;
                double t8392 = pow(t8377,2.0/5.0);
                double t8400 = raa1*t8392;
                double t8393 = exp(-t8400);
                double t8394 = t8393-1.0;
                double t8395 = kaa1*t8394;
                double t8396 = -kaa0+t8391+t8395;
                double t8397 = 1.0/(t8396*t8396);
                double t8398 = c*c0*t8380*t8372*t8386*t8388*t8397*(2.0/3.0);
                double t8401 = 1.0/t8385;
                double t8402 = 1.0/pow(rho_b,4.0/3.0);
                double t8403 = c*c0*t8380*t8372*t8388*t8397*(2.0/3.0);
                double t8404 = sqrt(t8403);
                double t8405 = 1.0/pow(rho_b,1.1E1/3.0);
                double t8406 = 1.0/sqrt(t8377);
                double t8407 = c*kaa2*raa2*t8389*t8402*t8406*(1.0/6.0);
                double t8408 = 1.0/pow(t8377,3.0/5.0);
                double t8409 = c*kaa1*raa1*t8393*t8402*t8408*(2.0/1.5E1);
                double t8410 = t8407+t8409;
                double t8411 = 1.0/(t8396*t8396*t8396);
                double t8412 = 1.0/pow(rho_b,2.0E1/3.0);
                double t8413;
                double t8414;
                if (t8398 > expei_cutoff) {
                    t8413 = 1.0;
                    t8414 = expei(t8398);
                } else {
                    t8413 = exp(t8398);
                    t8414 = Ei(-t8398);
                }
                double t8415 = 1.0/(t8385*t8385*t8385);
                double t8416 = t8401*t8404*6.0;
                double t8417 = c*c0*t8380*t8372*t8386*t8388*t8397*4.0;
                double t8418 = t8416+t8417+3.0;
                double t8419 = 1.0/t8418;
                double t8420 = c*c0*t8380*t8386*t8388*t8397*t8402*(2.0/9.0);
                double t8421 = a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8405*(1.4E1/9.0);
                double t8422 = c*c0*t8380*t8372*t8386*t8388*t8410*t8411*(4.0/3.0);
                double t8423 = c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8412*(6.4E1/9.0);
                double t8425 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8412*t8415*(6.4E1/9.0);
                double t8424 = t8420+t8421+t8422+t8423-t8425;
                double t8426 = c*c0*t8380*t8372*t8386*t8388*t8397*t8413*t8414*(2.0/3.0);
                double t8427 = t8426+1.0;
                double t8428 = t8401*t8404*4.0;
                double t8429 = c*c0*t8380*t8372*t8386*t8388*t8397*(8.0/3.0);
                double t8430 = t8428+t8429+6.0;
                double t8431 = c*c0*t8380*t8388*t8397*t8402*(2.0/9.0);
                double t8432 = a5*c0*gamma_bb*t8371*t8380*t8397*t8405*(1.4E1/9.0);
                double t8433 = c*c0*t8380*t8372*t8388*t8410*t8411*(4.0/3.0);
                double t8434 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8412*(6.4E1/9.0);
                double t8435 = t8431+t8432+t8433+t8434;
                double t8436 = 1.0/sqrt(t8403);
                double t8437 = 1.0/pow(rho_b,1.9E1/3.0);
                double t8438 = t8373*t8374*t8375*t8376;
                double t8439 = pow(t8377,4.0/5.0);
                double t8457 = rab1*t8439;
                double t8440 = exp(-t8457);
                double t8441 = t8440-1.0;
                double t8458 = kab1*t8441;
                double t8442 = kab0-t8458;
                double t8443 = a3*gamma_bb*t8371*t8381*t8382;
                double t8444 = t8443+1.0;
                double t8445 = 1.0/sqrt(t8444);
                double t8446 = 1.0/pow(rho_b,8.0/3.0);
                double t8447 = a1*gamma_bb*t8371*t8446;
                double t8448 = t8438+t8447+1.0;
                double t8449 = c*c;
                double t8450 = 1.0/pow(rho_b,2.0/3.0);
                double t8451 = k1*t8383;
                double t8452 = c*k2*t8372;
                double t8453 = t8451+t8452;
                double t8454 = 1.0/(t8453*t8453);
                double t8460 = t8450*t8454*t8449;
                double t8455 = exp(-t8460);
                double t8456 = exp(-t8438);
                double t8459 = c*c0*t8372*(2.0/3.0);
                double t8461 = t8401*t8435*t8436*2.0;
                double t8462 = c*c0*t8380*t8386*t8388*t8397*t8402*(8.0/9.0);
                double t8463 = a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8405*(5.6E1/9.0);
                double t8464 = c*c0*t8380*t8372*t8386*t8388*t8410*t8411*(1.6E1/3.0);
                double t8465 = c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8412*(2.56E2/9.0);
                double t8516 = t8374*t8376*t8386*t8378*t8404*t8437*(6.4E1/3.0);
                double t8517 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8412*t8415*(2.56E2/9.0);
                double t8466 = t8461+t8462+t8463+t8464+t8465-t8516-t8517;
                double t8467 = c*c0*t8380*t8386*t8388*t8397*t8402*t8413*t8414*(2.0/9.0);
                double t8468 = c*c0*t8380*t8372*t8386*t8388*t8410*t8411*t8413*t8414*(4.0/3.0);
                double t8469 = c*c0*t8380*t8372*t8386*t8388*t8397*t8413*t8414*t8424*(2.0/3.0);
                double t8470 = a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8413*t8405*t8414*(1.4E1/9.0);
                double t8471 = c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8412*t8413*t8414*(6.4E1/9.0);
                double t8520 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8412*t8413*t8414*t8415*(6.4E1/9.0);
                double t8472 = t8420+t8421+t8422+t8423-t8425+t8470+t8471+t8467+t8468+t8469-t8520;
                double t8473 = t8378*t8378;
                double t8474 = t8374*t8374;
                double t8475 = t8376*t8376;
                double t8476 = raa2*raa2;
                double t8477 = c*kaa2*t8382*t8389*t8476*(1.0/3.6E1);
                double t8478 = raa1*raa1;
                double t8479 = 1.0/pow(t8377,6.0/5.0);
                double t8480 = kaa1*t8393*t8446*t8449*t8478*t8479*(4.0/2.25E2);
                double t8481 = 1.0/pow(t8377,3.0/2.0);
                double t8482 = kaa2*raa2*t8389*t8481*t8446*t8449*(1.0/3.6E1);
                double t8483 = 1.0/pow(t8377,8.0/5.0);
                double t8484 = kaa1*raa1*t8393*t8446*t8483*t8449*(2.0/7.5E1);
                double t8494 = c*kaa2*raa2*t8382*t8389*t8406*(2.0/9.0);
                double t8495 = c*kaa1*raa1*t8382*t8393*t8408*(8.0/4.5E1);
                double t8485 = t8480+t8482+t8484-t8494+t8477-t8495;
                double t8486 = t8410*t8410;
                double t8487 = 1.0/(t8396*t8396*t8396*t8396);
                double t8488 = 1.0/pow(rho_b,1.4E1/3.0);
                double t8489 = 1.0/pow(rho_b,1.0E1);
                double t8490 = 1.0/pow(rho_b,1.3E1);
                double t8491 = 1.0/pow(rho_b,2.3E1/3.0);
                double t8492 = 1.0/pow(rho_b,1.0E1/3.0);
                double t8493 = 1.0/t8388;
                double t8496 = t8424*t8424;
                double t8497 = 1.0/(t8385*t8385*t8385*t8385);
                double t8498 = c*c0*t8380*t8382*t8386*t8388*t8397*(8.0/2.7E1);
                double t8499 = c*c0*t8380*t8372*t8386*t8388*t8486*t8487*4.0;
                double t8500 = a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8488*(5.6E1/9.0);
                double t8501 = c*c0*t8380*t8386*t8388*t8410*t8402*t8411*(8.0/9.0);
                double t8502 = a5*c0*gamma_bb*t8371*t8380*t8386*t8410*t8411*t8405*(5.6E1/9.0);
                double t8503 = a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8386*t8378*t8397*t8489*(8.96E2/2.7E1);
                double t8504 = c*c0*t8380*t8386*t8388*t8397*t8490*t8473*t8474*t8475*(2.048E3/2.7E1);
                double t8505 = c*c0*t8380*t8388*t8397*t8490*t8473*t8474*t8475*t8497*(1.024E3/9.0);
                double t8506 = c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8491*(4.48E2/9.0);
                double t8507 = c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8410*t8411*t8412*(2.56E2/9.0);
                double t8540 = c*c0*t8380*t8372*t8386*t8388*t8411*t8485*(4.0/3.0);
                double t8541 = a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8378*t8397*t8415*t8489*(8.96E2/2.7E1);
                double t8542 = c*c0*t8380*t8388*t8397*t8415*t8490*t8473*t8474*t8475*(4.096E3/2.7E1);
                double t8543 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8415*t8491*(4.48E2/9.0);
                double t8544 = c*c0*t8380*t8374*t8376*t8378*t8388*t8410*t8411*t8412*t8415*(2.56E2/9.0);
                double t8508 = t8498+t8499+t8500+t8501+t8502+t8503+t8504-t8540+t8505-t8541+t8506-t8542+t8507-t8543-t8544;
                double t8509 = 1.0/(t8418*t8418);
                double t8510 = t8401*t8435*t8436*3.0;
                double t8511 = c*c0*t8380*t8386*t8388*t8397*t8402*(4.0/3.0);
                double t8512 = a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8405*(2.8E1/3.0);
                double t8513 = c*c0*t8380*t8372*t8386*t8388*t8410*t8411*8.0;
                double t8514 = c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8412*(1.28E2/3.0);
                double t8518 = t8374*t8376*t8386*t8378*t8404*t8437*3.2E1;
                double t8519 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8412*t8415*(1.28E2/3.0);
                double t8515 = t8510+t8511+t8512+t8513+t8514-t8518-t8519;
                double t8521 = c*c0*t8380*t8382*t8388*t8397*(8.0/2.7E1);
                double t8522 = a5*c0*gamma_bb*t8371*t8380*t8397*t8488*(5.6E1/9.0);
                double t8523 = c*c0*t8380*t8388*t8410*t8402*t8411*(8.0/9.0);
                double t8524 = c*c0*t8380*t8372*t8388*t8486*t8487*4.0;
                double t8525 = a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8378*t8397*t8489*(8.96E2/2.7E1);
                double t8526 = a5*c0*gamma_bb*t8371*t8380*t8410*t8411*t8405*(5.6E1/9.0);
                double t8527 = c*c0*t8380*t8388*t8397*t8490*t8473*t8474*t8475*(2.048E3/2.7E1);
                double t8528 = c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8491*(4.48E2/9.0);
                double t8529 = c*c0*t8380*t8374*t8376*t8378*t8388*t8410*t8411*t8412*(2.56E2/9.0);
                double t8530 = t8521+t8522+t8523+t8524+t8525+t8526+t8527+t8528+t8529-c*c0*t8380*t8372*t8388*t8411*t8485*(4.0/3.0);
                double t8531 = t8435*t8435;
                double t8532 = 1.0/pow(t8403,3.0/2.0);
                double t8533 = 1.0/pow(rho_b,2.2E1/3.0);
                double t8534 = 1.0/pow(rho_b,3.8E1/3.0);
                double t8535 = 1.0/c0;
                double t8536 = exp(-t8379);
                double t8537 = t8385*t8385;
                double t8538 = t8396*t8396;
                double t8539 = pow(rho_b,1.0/3.0);
                double t8545 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t8546 = t8442*t8445*t8456*t8448*1.0E5;
                double t8547 = -t8459+t8546;
                double t8548 = heaviside(t8547);
                double t8549 = t8413*t8414;
                double t8550 = t8430*t8427*t8419;
                double t8551 = t8550+t8549;
                double t8552 = t8373*t8374*t8376*t8437*(1.6E1/3.0);
                double t8553 = a1*gamma_bb*t8371*t8405*(8.0/3.0);
                double t8554 = t8552+t8553;
                double t8555 = 1.0/(c*c);
                double t8556 = 1.0/pow(t8377,1.0/5.0);
                double t8557 = 1.0/pow(t8444,3.0/2.0);
                double t8558 = 1.0/pow(rho_b,5.0/3.0);
                double t8559 = t8454*t8449*t8558*(2.0/3.0);
                double t8560 = 1.0/(t8453*t8453*t8453);
                double t8561 = c*k2*t8402*(1.0/3.0);
                double t8562 = c*k1*t8402*t8406*(1.0/6.0);
                double t8563 = t8561+t8562;
                double t8577 = t8450*t8449*t8560*t8563*2.0;
                double t8564 = t8559-t8577;
                double t8565 = t8427*t8419*t8466;
                double t8566 = t8413*t8414*t8424;
                double t8567 = t8430*t8472*t8419;
                double t8568 = t8381*t8424*t8493*t8535*t8536*t8537*t8538*t8539*(3.0/2.0);
                double t8572 = t8430*t8427*t8515*t8509;
                double t8569 = -t8572+t8565+t8566+t8567+t8568;
                double t8570 = t8459-t8546;
                double t8571 = dirac(t8570);
                double t8573 = c*c0*t8402*(2.0/9.0);
                double t8574 = t8373*t8374*t8376*t8442*t8445*t8437*t8456*t8448*(1.6E6/3.0);
                double t8575 = a3*gamma_bb*t8371*t8381*t8442*t8456*t8492*t8448*t8557*(3.5E5/3.0);
                double t8578 = t8442*t8445*t8456*t8554*1.0E5;
                double t8579 = c*kab1*rab1*t8402*t8440*t8445*t8456*t8448*t8556*(8.0E4/3.0);
                double t8576 = t8573+t8574+t8575-t8578-t8579;
                v_rho_b_rho_b[Q] += scale * -c0*t8455*t8569*heaviside(c*c0*t8372*(-2.0/3.0)+t8442*t8445*t8448*exp(-t8373*t8374*t8375*t8376)*1.0E5)+c0*t8455*t8551*t8576*dirac(t8459-t8442*t8445*t8456*t8448*1.0E5)+c0*t8455*t8551*t8564*t8548+c0*rho_b*t8455*t8548*(t8427*t8419*(t8401*t8436*t8530*2.0-t8401*t8531*t8532-t8374*t8376*t8386*t8378*t8404*t8533*(1.216E3/9.0)+t8404*t8415*t8473*t8474*t8475*t8534*(2.048E3/9.0)+c*c0*t8380*t8382*t8386*t8388*t8397*(3.2E1/2.7E1)-t8374*t8376*t8386*t8378*t8435*t8436*t8437*(6.4E1/3.0)+a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8488*(2.24E2/9.0)-c*c0*t8380*t8372*t8386*t8388*t8411*t8485*(1.6E1/3.0)+c*c0*t8380*t8372*t8386*t8388*t8486*t8487*1.6E1+c*c0*t8380*t8386*t8388*t8410*t8402*t8411*(3.2E1/9.0)+a5*c0*gamma_bb*t8371*t8380*t8386*t8410*t8411*t8405*(2.24E2/9.0)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8491*(1.792E3/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8415*t8491*(1.792E3/9.0)+c*c0*t8380*t8386*t8388*t8397*t8490*t8473*t8474*t8475*(8.192E3/2.7E1)-c*c0*t8380*t8388*t8397*t8415*t8490*t8473*t8474*t8475*(1.6384E4/2.7E1)+c*c0*t8380*t8388*t8397*t8490*t8473*t8474*t8475*t8497*(4.096E3/9.0)+a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8386*t8378*t8397*t8489*(3.584E3/2.7E1)-a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8378*t8397*t8415*t8489*(3.584E3/2.7E1)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8410*t8411*t8412*(1.024E3/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8410*t8411*t8412*t8415*(1.024E3/9.0))+t8413*t8414*t8496+t8472*t8419*t8466*2.0+t8413*t8414*t8508+t8430*t8419*(t8496+t8498+t8499+t8500+t8501+t8502+t8503+t8504+t8505+t8506+t8507+(t8424*(1.0/3.0))/rho_b+(t8410*t8424*2.0)/t8396+t8374*t8376*t8378*t8424*t8437*(3.2E1/3.0)-t8374*t8376*t8378*t8401*t8424*t8437*(3.2E1/3.0)+a5*gamma_bb*t8371*t8381*t8424*t8492*t8493*(7.0/3.0)-c*c0*t8380*t8372*t8386*t8388*t8411*t8485*(4.0/3.0)+c*c0*t8380*t8382*t8386*t8388*t8397*t8413*t8414*(8.0/2.7E1)+a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8413*t8414*t8488*(5.6E1/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8415*t8491*(4.48E2/9.0)+c*c0*t8380*t8372*t8386*t8388*t8397*t8413*t8414*t8496*(2.0/3.0)-c*c0*t8380*t8372*t8386*t8388*t8411*t8413*t8414*t8485*(4.0/3.0)+c*c0*t8380*t8386*t8388*t8397*t8402*t8413*t8414*t8424*(4.0/9.0)+c*c0*t8380*t8372*t8386*t8388*t8397*t8413*t8414*t8508*(2.0/3.0)+c*c0*t8380*t8372*t8386*t8388*t8413*t8414*t8486*t8487*4.0+c*c0*t8380*t8386*t8388*t8410*t8402*t8411*t8413*t8414*(8.0/9.0)-c*c0*t8380*t8388*t8397*t8415*t8490*t8473*t8474*t8475*(4.096E3/2.7E1)-a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8378*t8397*t8415*t8489*(8.96E2/2.7E1)+a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8413*t8405*t8414*t8424*(2.8E1/9.0)+a5*c0*gamma_bb*t8371*t8380*t8386*t8410*t8411*t8413*t8405*t8414*(5.6E1/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8410*t8411*t8412*t8415*(2.56E2/9.0)+c*c0*t8380*t8372*t8386*t8388*t8410*t8411*t8413*t8414*t8424*(8.0/3.0)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8413*t8414*t8491*(4.48E2/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8413*t8414*t8415*t8491*(4.48E2/9.0)+c*c0*t8380*t8386*t8388*t8397*t8413*t8414*t8490*t8473*t8474*t8475*(2.048E3/2.7E1)-c*c0*t8380*t8388*t8397*t8413*t8414*t8415*t8490*t8473*t8474*t8475*(4.096E3/2.7E1)+c*c0*t8380*t8388*t8397*t8413*t8414*t8490*t8473*t8474*t8475*t8497*(1.024E3/9.0)+a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8386*t8378*t8397*t8413*t8414*t8489*(8.96E2/2.7E1)-a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8378*t8397*t8413*t8414*t8415*t8489*(8.96E2/2.7E1)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8412*t8413*t8414*t8424*(1.28E2/9.0)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8410*t8411*t8412*t8413*t8414*(2.56E2/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8412*t8413*t8414*t8415*t8424*(1.28E2/9.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8410*t8411*t8412*t8413*t8414*t8415*(2.56E2/9.0))-t8430*t8427*t8509*(t8401*t8436*t8530*3.0-t8401*t8531*t8532*(3.0/2.0)-t8374*t8376*t8386*t8378*t8404*t8533*(6.08E2/3.0)+t8404*t8415*t8473*t8474*t8475*t8534*(1.024E3/3.0)+c*c0*t8380*t8382*t8386*t8388*t8397*(1.6E1/9.0)-t8374*t8376*t8386*t8378*t8435*t8436*t8437*3.2E1+a5*c0*gamma_bb*t8371*t8380*t8386*t8397*t8488*(1.12E2/3.0)-c*c0*t8380*t8372*t8386*t8388*t8411*t8485*8.0+c*c0*t8380*t8372*t8386*t8388*t8486*t8487*2.4E1+c*c0*t8380*t8386*t8388*t8410*t8402*t8411*(1.6E1/3.0)+a5*c0*gamma_bb*t8371*t8380*t8386*t8410*t8411*t8405*(1.12E2/3.0)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8397*t8491*(8.96E2/3.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8397*t8415*t8491*(8.96E2/3.0)+c*c0*t8380*t8386*t8388*t8397*t8490*t8473*t8474*t8475*(4.096E3/9.0)-c*c0*t8380*t8388*t8397*t8415*t8490*t8473*t8474*t8475*(8.192E3/9.0)+c*c0*t8380*t8388*t8397*t8490*t8473*t8474*t8475*t8497*(2.048E3/3.0)+a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8386*t8378*t8397*t8489*(1.792E3/9.0)-a5*c0*gamma_bb*t8371*t8380*t8374*t8376*t8378*t8397*t8415*t8489*(1.792E3/9.0)+c*c0*t8380*t8374*t8376*t8386*t8378*t8388*t8410*t8411*t8412*(5.12E2/3.0)-c*c0*t8380*t8374*t8376*t8378*t8388*t8410*t8411*t8412*t8415*(5.12E2/3.0))-t8430*t8472*t8515*t8509*2.0-t8427*t8466*t8515*t8509*2.0+t8430*1.0/(t8418*t8418*t8418)*t8427*(t8515*t8515)*2.0-t8381*t8450*t8424*t8493*t8535*t8536*t8537*t8538*(1.0/2.0)+t8381*t8493*t8496*t8535*t8536*t8537*t8538*t8539*(3.0/2.0)+t8381*t8493*t8508*t8535*t8536*t8537*t8538*t8539*(3.0/2.0)-t8381*t8396*t8410*t8424*t8493*t8535*t8536*t8537*t8539*3.0+t8381*t8374*t8376*t8385*t8378*t8424*t8493*t8535*t8536*t8545*t8538*1.6E1-t8381*t8374*t8376*t8378*t8424*t8493*t8535*t8536*t8545*t8537*t8538*1.6E1-a5*gamma_bb*1.0/(rho_b*rho_b*rho_b)*t8371*1.0/(t8388*t8388)*t8424*t8535*t8536*t8537*t8555*t8538*(7.0/2.0))*(1.0/2.0)-c0*rho_b*t8455*t8571*t8576*t8569-c0*rho_b*t8455*t8564*t8548*t8569+c0*rho_b*t8455*t8551*(t8564*t8564)*t8548*(1.0/2.0)-c0*rho_b*t8455*t8551*t8571*(c*c0*t8382*(8.0/2.7E1)-t8442*t8445*t8456*(a1*gamma_bb*t8371*t8488*(8.8E1/9.0)+t8373*t8374*t8376*t8533*(3.04E2/9.0))*1.0E5+t8373*t8374*t8376*t8442*t8445*t8456*t8448*t8533*(3.04E7/9.0)+t8373*t8374*t8376*t8442*t8445*t8437*t8456*t8554*(3.2E6/3.0)-(t8373*t8373)*t8442*t8445*t8456*t8474*t8448*t8475*t8534*(2.56E7/9.0)-(a3*a3)*t8374*t8376*t8412*t8442*1.0/pow(t8444,5.0/2.0)*t8456*t8448*t8555*(1.225E6/3.0)+kab1*(rab1*rab1)*1.0/pow(t8377,2.0/5.0)*t8440*t8445*t8446*t8456*t8448*t8449*(6.4E4/9.0)+a3*gamma_bb*t8371*t8381*t8442*t8456*t8492*t8554*t8557*(7.0E5/3.0)-c*kab1*rab1*t8382*t8440*t8445*t8456*t8448*t8556*(3.2E5/9.0)-c*kab1*rab1*t8402*t8440*t8445*t8456*t8554*t8556*(1.6E5/3.0)+kab1*rab1*t8440*t8445*t8446*t8456*t8448*t8449*t8479*(1.6E4/9.0)+a3*gamma_bb*1.0/pow(rho_b,1.3E1/3.0)*t8371*t8381*t8442*t8456*t8448*t8557*(3.5E6/9.0)+a3*gamma_bb*kab1*rab1*t8371*t8440*t8456*t8448*t8488*t8556*t8557*(5.6E5/9.0)-a3*gamma_bb*1.0/pow(rho_b,2.9E1/3.0)*t8371*t8381*t8373*t8374*t8376*t8442*t8456*t8448*t8557*(1.12E7/9.0)+c*kab1*rab1*t8373*t8374*t8376*t8440*t8445*t8491*t8456*t8448*t8556*(2.56E6/9.0))*(1.0/2.0)-c0*rho_b*t8455*t8551*t8548*(t8454*t8446*t8449*(1.0E1/9.0)-t8449*t8560*t8563*t8558*(8.0/3.0)+t8450*1.0/(t8453*t8453*t8453*t8453)*t8449*(t8563*t8563)*6.0-t8450*t8449*t8560*(c*k2*t8382*(4.0/9.0)+c*k1*t8382*t8406*(2.0/9.0)-k1*t8481*t8446*t8449*(1.0/3.6E1))*2.0)*(1.0/2.0)-c0*rho_b*t8455*t8551*(t8576*t8576)*dirac(t8570,1.0)*(1.0/2.0)+c0*rho_b*t8455*t8551*t8571*t8564*t8576;
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t8800 = tspi_m13*tspi_m13;
                double t8801 = 1.0/pow(rho_b,1.0/3.0);
                double t8802 = a2*a2;
                double t8803 = gamma_bb*gamma_bb;
                double t8804 = 1.0/pow(rho_b,1.6E1/3.0);
                double t8805 = t8800*t8800;
                double t8806 = c*t8801;
                double t8807 = a4*a4;
                double t8808 = t8803*t8804*t8805*t8807*2.0;
                double t8809 = exp(t8808);
                double t8810 = 1.0/c;
                double t8811 = 1.0/pow(rho_b,7.0/3.0);
                double t8812 = sqrt(t8806);
                double t8813 = t8803*t8804*t8805*t8807;
                double t8814 = t8813+1.0;
                double t8815 = 1.0/(t8814*t8814);
                double t8816 = a5*gamma_bb*t8800*t8810*t8811;
                double t8817 = t8816+1.0;
                double t8828 = raa2*t8812;
                double t8818 = exp(-t8828);
                double t8819 = t8818-1.0;
                double t8820 = kaa2*t8819;
                double t8821 = pow(t8806,2.0/5.0);
                double t8829 = raa1*t8821;
                double t8822 = exp(-t8829);
                double t8823 = t8822-1.0;
                double t8824 = kaa1*t8823;
                double t8825 = -kaa0+t8820+t8824;
                double t8826 = 1.0/(t8825*t8825);
                double t8827 = c*c0*t8801*t8815*t8817*t8826*t8809*(2.0/3.0);
                double t8830 = 1.0/t8814;
                double t8831 = c*c0*t8801*t8817*t8826*t8809*(2.0/3.0);
                double t8832 = 1.0/pow(rho_b,8.0/3.0);
                double t8833 = 1.0/pow(rho_b,1.7E1/3.0);
                double t8838 = a5*c0*t8800*t8832*t8826*t8809*(2.0/3.0);
                double t8839 = c*c0*gamma_bb*t8805*t8833*t8807*t8817*t8826*t8809*(8.0/3.0);
                double t8834 = t8838+t8839;
                double t8835 = sqrt(t8831);
                double t8836 = t8807*t8807;
                double t8837 = t8805*t8805;
                double t8840 = 1.0/sqrt(t8831);
                double t8841 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t8842 = 1.0/(t8814*t8814*t8814);
                double t8843 = 1.0/pow(rho_b,1.1E1);
                double t8844 = t8830*t8835*6.0;
                double t8845 = c*c0*t8801*t8815*t8817*t8826*t8809*4.0;
                double t8846 = t8844+t8845+3.0;
                double t8847 = 1.0/t8846;
                double t8849 = a5*c0*t8800*t8832*t8815*t8826*t8809*(2.0/3.0);
                double t8850 = c*c0*gamma_bb*t8805*t8815*t8833*t8807*t8817*t8826*t8809*(8.0/3.0);
                double t8851 = c*c0*gamma_bb*t8805*t8833*t8842*t8807*t8817*t8826*t8809*(8.0/3.0);
                double t8848 = t8850-t8851+t8849;
                double t8852;
                double t8853;
                if (t8827 > expei_cutoff) {
                    t8852 = 1.0;
                    t8853 = expei(t8827);
                } else {
                    t8852 = exp(t8827);
                    t8853 = Ei(-t8827);
                }
                double t8854 = t8848*t8848;
                double t8855 = 1.0/(t8814*t8814*t8814*t8814);
                double t8856 = a5*c0*gamma_bb*t8800*t8805*t8841*t8815*t8807*t8826*t8809*(1.6E1/3.0);
                double t8857 = c*c0*t8805*t8815*t8833*t8807*t8817*t8826*t8809*(8.0/3.0);
                double t8858 = c*c0*t8803*t8815*t8843*t8817*t8826*t8809*t8836*t8837*(3.2E1/3.0);
                double t8859 = c*c0*t8803*t8843*t8817*t8826*t8809*t8836*t8837*t8855*1.6E1;
                double t8894 = a5*c0*gamma_bb*t8800*t8805*t8841*t8842*t8807*t8826*t8809*(1.6E1/3.0);
                double t8895 = c*c0*t8805*t8833*t8842*t8807*t8817*t8826*t8809*(8.0/3.0);
                double t8896 = c*c0*t8803*t8842*t8843*t8817*t8826*t8809*t8836*t8837*(6.4E1/3.0);
                double t8860 = t8856+t8857+t8858-t8894+t8859-t8895-t8896;
                double t8861 = t8830*t8835*4.0;
                double t8862 = c*c0*t8801*t8815*t8817*t8826*t8809*(8.0/3.0);
                double t8863 = t8861+t8862+6.0;
                double t8864 = a5*c0*t8800*t8832*t8815*t8852*t8826*t8853*t8809*(2.0/3.0);
                double t8865 = c*c0*t8801*t8815*t8852*t8817*t8826*t8853*t8809*t8848*(2.0/3.0);
                double t8866 = c*c0*gamma_bb*t8805*t8815*t8833*t8807*t8852*t8817*t8826*t8853*t8809*(8.0/3.0);
                double t8931 = c*c0*gamma_bb*t8805*t8833*t8842*t8807*t8852*t8817*t8826*t8853*t8809*(8.0/3.0);
                double t8867 = t8850-t8851+t8864+t8865+t8866+t8849-t8931;
                double t8868 = c*c0*t8801*t8815*t8852*t8817*t8826*t8853*t8809*(2.0/3.0);
                double t8869 = t8868+1.0;
                double t8870 = t8830*t8840*t8834*3.0;
                double t8871 = a5*c0*t8800*t8832*t8815*t8826*t8809*4.0;
                double t8872 = c*c0*gamma_bb*t8805*t8815*t8833*t8807*t8817*t8826*t8809*1.6E1;
                double t8875 = gamma_bb*t8804*t8805*t8815*t8807*t8835*1.2E1;
                double t8876 = c*c0*gamma_bb*t8805*t8833*t8842*t8807*t8817*t8826*t8809*1.6E1;
                double t8873 = t8870+t8871+t8872-t8875-t8876;
                double t8874 = 1.0/(t8846*t8846);
                double t8877 = t8830*t8840*t8834*2.0;
                double t8878 = a5*c0*t8800*t8832*t8815*t8826*t8809*(8.0/3.0);
                double t8879 = c*c0*gamma_bb*t8805*t8815*t8833*t8807*t8817*t8826*t8809*(3.2E1/3.0);
                double t8929 = gamma_bb*t8804*t8805*t8815*t8807*t8835*8.0;
                double t8930 = c*c0*gamma_bb*t8805*t8833*t8842*t8807*t8817*t8826*t8809*(3.2E1/3.0);
                double t8880 = t8877+t8878+t8879-t8930-t8929;
                double t8881 = a5*c0*gamma_bb*t8800*t8805*t8841*t8807*t8826*t8809*(1.6E1/3.0);
                double t8882 = c*c0*t8805*t8833*t8807*t8817*t8826*t8809*(8.0/3.0);
                double t8883 = c*c0*t8803*t8843*t8817*t8826*t8809*t8836*t8837*(3.2E1/3.0);
                double t8884 = t8881+t8882+t8883;
                double t8885 = t8834*t8834;
                double t8886 = 1.0/pow(t8831,3.0/2.0);
                double t8887 = 1.0/pow(rho_b,3.2E1/3.0);
                double t8888 = 1.0/t8817;
                double t8889 = 1.0/c0;
                double t8890 = pow(rho_b,1.0/3.0);
                double t8891 = exp(-t8808);
                double t8892 = t8814*t8814;
                double t8893 = t8825*t8825;
                double t8897 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t8898 = c*c;
                double t8899 = 1.0/pow(rho_b,2.0/3.0);
                double t8900 = k1*t8812;
                double t8901 = c*k2*t8801;
                double t8902 = t8900+t8901;
                double t8903 = 1.0/(t8902*t8902);
                double t8921 = t8898*t8899*t8903;
                double t8904 = exp(-t8921);
                double t8905 = t8802*t8803*t8804*t8805;
                double t8906 = pow(t8806,4.0/5.0);
                double t8916 = rab1*t8906;
                double t8907 = exp(-t8916);
                double t8908 = t8907-1.0;
                double t8917 = kab1*t8908;
                double t8909 = kab0-t8917;
                double t8910 = a3*gamma_bb*t8800*t8810*t8811;
                double t8911 = t8910+1.0;
                double t8912 = 1.0/sqrt(t8911);
                double t8913 = a1*gamma_bb*t8800*t8832;
                double t8914 = t8913+t8905+1.0;
                double t8915 = exp(-t8905);
                double t8922 = a1*t8800*t8832;
                double t8923 = gamma_bb*t8802*t8804*t8805*2.0;
                double t8924 = t8922+t8923;
                double t8925 = t8912*t8915*t8924*t8909*1.0E5;
                double t8926 = 1.0/pow(t8911,3.0/2.0);
                double t8927 = a3*t8800*t8810*t8811*t8914*t8915*t8926*t8909*5.0E4;
                double t8928 = gamma_bb*t8802*t8804*t8805*t8912*t8914*t8915*t8909*2.0E5;
                double t8918 = -t8925+t8927+t8928;
                double t8919 = c*c0*t8801*(2.0/3.0);
                double t8932 = t8912*t8914*t8915*t8909*1.0E5;
                double t8920 = -t8932+t8919;
                double t8933 = dirac(t8920);
                double t8934 = t8852*t8853;
                double t8935 = t8863*t8847*t8869;
                double t8936 = t8934+t8935;
                double t8937 = 1.0/(c*c);
                v_gamma_bb_gamma_bb[Q] += scale * c0*rho_b*t8904*heaviside(c*c0*t8801*(-2.0/3.0)+t8912*t8914*t8909*exp(-t8802*t8803*t8804*t8805)*1.0E5)*(t8863*t8847*(t8854+t8856+t8857+t8858+t8859+gamma_bb*t8804*t8805*t8807*t8848*4.0+a5*t8800*t8810*t8811*t8848*t8888-gamma_bb*t8830*t8804*t8805*t8807*t8848*4.0-c*c0*t8805*t8833*t8842*t8807*t8817*t8826*t8809*(8.0/3.0)-a5*c0*gamma_bb*t8800*t8805*t8841*t8842*t8807*t8826*t8809*(1.6E1/3.0)+a5*c0*t8800*t8832*t8815*t8852*t8826*t8853*t8809*t8848*(4.0/3.0)+c*c0*t8801*t8815*t8860*t8852*t8817*t8826*t8853*t8809*(2.0/3.0)+c*c0*t8801*t8815*t8852*t8817*t8826*t8853*t8809*t8854*(2.0/3.0)-c*c0*t8803*t8842*t8843*t8817*t8826*t8809*t8836*t8837*(6.4E1/3.0)+c*c0*t8805*t8815*t8833*t8807*t8852*t8817*t8826*t8853*t8809*(8.0/3.0)-c*c0*t8805*t8833*t8842*t8807*t8852*t8817*t8826*t8853*t8809*(8.0/3.0)+a5*c0*gamma_bb*t8800*t8805*t8841*t8815*t8807*t8852*t8826*t8853*t8809*(1.6E1/3.0)-a5*c0*gamma_bb*t8800*t8805*t8841*t8842*t8807*t8852*t8826*t8853*t8809*(1.6E1/3.0)+c*c0*t8803*t8815*t8843*t8852*t8817*t8826*t8853*t8809*t8836*t8837*(3.2E1/3.0)-c*c0*t8803*t8842*t8843*t8852*t8817*t8826*t8853*t8809*t8836*t8837*(6.4E1/3.0)+c*c0*t8803*t8843*t8852*t8817*t8826*t8853*t8809*t8836*t8837*t8855*1.6E1+c*c0*gamma_bb*t8805*t8815*t8833*t8807*t8852*t8817*t8826*t8853*t8809*t8848*(1.6E1/3.0)-c*c0*gamma_bb*t8805*t8833*t8842*t8807*t8852*t8817*t8826*t8853*t8809*t8848*(1.6E1/3.0))+t8860*t8852*t8853+t8852*t8853*t8854+t8880*t8847*t8867*2.0+t8847*t8869*(t8830*t8840*t8884*2.0-t8830*t8885*t8886-t8804*t8805*t8815*t8807*t8835*8.0+t8803*t8842*t8835*t8836*t8837*t8887*3.2E1-gamma_bb*t8804*t8840*t8805*t8815*t8807*t8834*8.0+c*c0*t8805*t8815*t8833*t8807*t8817*t8826*t8809*(3.2E1/3.0)-c*c0*t8805*t8833*t8842*t8807*t8817*t8826*t8809*(3.2E1/3.0)+a5*c0*gamma_bb*t8800*t8805*t8841*t8815*t8807*t8826*t8809*(6.4E1/3.0)-a5*c0*gamma_bb*t8800*t8805*t8841*t8842*t8807*t8826*t8809*(6.4E1/3.0)+c*c0*t8803*t8815*t8843*t8817*t8826*t8809*t8836*t8837*(1.28E2/3.0)-c*c0*t8803*t8842*t8843*t8817*t8826*t8809*t8836*t8837*(2.56E2/3.0)+c*c0*t8803*t8843*t8817*t8826*t8809*t8836*t8837*t8855*6.4E1)-t8863*t8873*t8874*t8867*2.0-t8880*t8873*t8874*t8869*2.0-t8863*t8874*t8869*(t8830*t8840*t8884*3.0-t8830*t8885*t8886*(3.0/2.0)-t8804*t8805*t8815*t8807*t8835*1.2E1+t8803*t8842*t8835*t8836*t8837*t8887*4.8E1-gamma_bb*t8804*t8840*t8805*t8815*t8807*t8834*1.2E1+c*c0*t8805*t8815*t8833*t8807*t8817*t8826*t8809*1.6E1-c*c0*t8805*t8833*t8842*t8807*t8817*t8826*t8809*1.6E1+a5*c0*gamma_bb*t8800*t8805*t8841*t8815*t8807*t8826*t8809*3.2E1-a5*c0*gamma_bb*t8800*t8805*t8841*t8842*t8807*t8826*t8809*3.2E1+c*c0*t8803*t8815*t8843*t8817*t8826*t8809*t8836*t8837*6.4E1-c*c0*t8803*t8842*t8843*t8817*t8826*t8809*t8836*t8837*1.28E2+c*c0*t8803*t8843*t8817*t8826*t8809*t8836*t8837*t8855*9.6E1)+t8863*1.0/(t8846*t8846*t8846)*(t8873*t8873)*t8869*2.0+t8810*t8860*t8890*t8891*t8892*t8893*t8888*t8889*(3.0/2.0)+t8810*t8854*t8890*t8891*t8892*t8893*t8888*t8889*(3.0/2.0)-a5*1.0/(rho_b*rho_b)*t8800*1.0/(t8817*t8817)*t8891*t8892*t8848*t8893*t8889*t8937*(3.0/2.0)+gamma_bb*t8810*t8805*t8814*t8807*t8891*t8848*t8893*t8888*t8897*t8889*6.0-gamma_bb*t8810*t8805*t8807*t8891*t8892*t8848*t8893*t8888*t8897*t8889*6.0)*(1.0/2.0)-c0*rho_b*t8904*t8933*t8918*(t8852*t8853*t8848+t8863*t8847*t8867+t8880*t8847*t8869-t8863*t8873*t8874*t8869+t8810*t8890*t8891*t8892*t8848*t8893*t8888*t8889*(3.0/2.0))+c0*rho_b*t8904*t8933*t8936*(t8802*t8804*t8805*t8912*t8915*t8909*2.0E5-t8802*t8804*t8805*t8912*t8914*t8915*t8909*2.0E5+(a3*a3)*1.0/pow(rho_b,1.4E1/3.0)*t8805*1.0/pow(t8911,5.0/2.0)*t8914*t8915*t8909*t8937*7.5E4+(t8802*t8802)*t8803*t8837*t8887*t8912*t8914*t8915*t8909*4.0E5-a3*t8800*t8810*t8811*t8915*t8924*t8926*t8909*1.0E5-gamma_bb*t8802*t8804*t8805*t8912*t8915*t8924*t8909*4.0E5+a3*gamma_bb*1.0/pow(rho_b,2.3E1/3.0)*t8800*t8810*t8802*t8805*t8914*t8915*t8926*t8909*2.0E5)*(1.0/2.0)-c0*rho_b*t8904*(t8918*t8918)*t8936*dirac(t8920,1.0)*(1.0/2.0);
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t8586 = tspi_m13*tspi_m13;
                double t8587 = 1.0/pow(rho_b,1.0/3.0);
                double t8588 = a2*a2;
                double t8589 = gamma_bb*gamma_bb;
                double t8590 = 1.0/pow(rho_b,1.6E1/3.0);
                double t8591 = t8586*t8586;
                double t8592 = c*t8587;
                double t8593 = a4*a4;
                double t8594 = 1.0/c;
                double t8595 = 1.0/pow(rho_b,7.0/3.0);
                double t8596 = sqrt(t8592);
                double t8597 = t8590*t8591*t8593*t8589*2.0;
                double t8598 = exp(t8597);
                double t8599 = t8590*t8591*t8593*t8589;
                double t8600 = t8599+1.0;
                double t8601 = 1.0/(t8600*t8600);
                double t8602 = a5*gamma_bb*t8594*t8586*t8595;
                double t8603 = t8602+1.0;
                double t8615 = raa2*t8596;
                double t8604 = exp(-t8615);
                double t8605 = t8604-1.0;
                double t8606 = kaa2*t8605;
                double t8607 = pow(t8592,2.0/5.0);
                double t8616 = raa1*t8607;
                double t8608 = exp(-t8616);
                double t8609 = t8608-1.0;
                double t8610 = kaa1*t8609;
                double t8611 = -kaa0+t8610+t8606;
                double t8612 = 1.0/(t8611*t8611);
                double t8613 = c*c0*t8587*t8598*t8601*t8603*t8612*(2.0/3.0);
                double t8614 = 1.0/pow(rho_b,8.0/3.0);
                double t8617 = 1.0/pow(rho_b,1.7E1/3.0);
                double t8618;
                double t8619;
                if (t8613 > expei_cutoff) {
                    t8618 = 1.0;
                    t8619 = expei(t8613);
                } else {
                    t8618 = exp(t8613);
                    t8619 = Ei(-t8613);
                }
                double t8620 = 1.0/t8600;
                double t8621 = c*c0*t8587*t8598*t8603*t8612*(2.0/3.0);
                double t8622 = sqrt(t8621);
                double t8623 = 1.0/(t8600*t8600*t8600);
                double t8624 = t8620*t8622*6.0;
                double t8625 = c*c0*t8587*t8598*t8601*t8603*t8612*4.0;
                double t8626 = t8624+t8625+3.0;
                double t8627 = 1.0/t8626;
                double t8628 = a5*c0*t8586*t8598*t8601*t8612*t8614*(2.0/3.0);
                double t8629 = c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8617*(8.0/3.0);
                double t8640 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*(8.0/3.0);
                double t8630 = -t8640+t8628+t8629;
                double t8631 = c*c0*t8587*t8598*t8601*t8603*t8612*t8618*t8619*(2.0/3.0);
                double t8632 = t8631+1.0;
                double t8633 = t8620*t8622*4.0;
                double t8634 = c*c0*t8587*t8598*t8601*t8603*t8612*(8.0/3.0);
                double t8635 = t8633+t8634+6.0;
                double t8636 = a5*c0*t8586*t8598*t8612*t8614*(2.0/3.0);
                double t8637 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8617*(8.0/3.0);
                double t8638 = t8636+t8637;
                double t8639 = 1.0/sqrt(t8621);
                double t8641 = t8590*t8591*t8588*t8589;
                double t8642 = pow(t8592,4.0/5.0);
                double t8750 = rab1*t8642;
                double t8643 = exp(-t8750);
                double t8644 = t8643-1.0;
                double t8751 = kab1*t8644;
                double t8645 = kab0-t8751;
                double t8646 = a3*gamma_bb*t8594*t8586*t8595;
                double t8647 = t8646+1.0;
                double t8648 = 1.0/sqrt(t8647);
                double t8649 = a1*gamma_bb*t8586*t8614;
                double t8650 = t8641+t8649+1.0;
                double t8651 = c*c;
                double t8652 = 1.0/pow(rho_b,2.0/3.0);
                double t8653 = k1*t8596;
                double t8654 = c*k2*t8587;
                double t8655 = t8653+t8654;
                double t8656 = 1.0/(t8655*t8655);
                double t8753 = t8651*t8652*t8656;
                double t8657 = exp(-t8753);
                double t8658 = 1.0/pow(rho_b,4.0/3.0);
                double t8659 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t8660 = 1.0/pow(rho_b,2.0E1/3.0);
                double t8661 = t8593*t8593;
                double t8662 = 1.0/pow(rho_b,1.2E1);
                double t8663 = t8591*t8591;
                double t8664 = 1.0/sqrt(t8592);
                double t8665 = c*kaa2*raa2*t8604*t8664*t8658*(1.0/6.0);
                double t8666 = 1.0/pow(t8592,3.0/5.0);
                double t8667 = c*kaa1*raa1*t8608*t8666*t8658*(2.0/1.5E1);
                double t8668 = t8665+t8667;
                double t8669 = 1.0/(t8611*t8611*t8611);
                double t8670 = t8620*t8638*t8639*2.0;
                double t8671 = a5*c0*t8586*t8598*t8601*t8612*t8614*(8.0/3.0);
                double t8672 = c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8617*(3.2E1/3.0);
                double t8714 = gamma_bb*t8590*t8591*t8593*t8601*t8622*8.0;
                double t8715 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*(3.2E1/3.0);
                double t8673 = t8670+t8671+t8672-t8714-t8715;
                double t8674 = 1.0/pow(rho_b,1.1E1/3.0);
                double t8675 = c*c0*t8598*t8601*t8603*t8612*t8658*(2.0/9.0);
                double t8676 = a5*c0*gamma_bb*t8586*t8598*t8601*t8612*t8674*(1.4E1/9.0);
                double t8677 = c*c0*t8587*t8598*t8601*t8603*t8668*t8669*(4.0/3.0);
                double t8678 = c*c0*t8591*t8593*t8589*t8598*t8601*t8603*t8612*t8660*(6.4E1/9.0);
                double t8679 = a5*c0*t8586*t8598*t8601*t8612*t8614*t8618*t8619*(2.0/3.0);
                double t8680 = c*c0*t8587*t8598*t8601*t8603*t8612*t8630*t8618*t8619*(2.0/3.0);
                double t8681 = c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8617*t8618*t8619*(8.0/3.0);
                double t8694 = c*c0*t8591*t8593*t8589*t8598*t8603*t8612*t8623*t8660*(6.4E1/9.0);
                double t8682 = t8675+t8676-t8694+t8677+t8678;
                double t8683 = 1.0/pow(rho_b,1.9E1/3.0);
                double t8684 = 1.0/t8603;
                double t8685 = a5*c0*t8586*t8598*t8601*t8612*t8674*(1.6E1/9.0);
                double t8686 = a5*c0*t8586*t8598*t8601*t8614*t8668*t8669*(4.0/3.0);
                double t8687 = a5*c0*t8591*t8593*t8586*t8589*t8598*t8601*t8612*t8659*(4.0E1/3.0);
                double t8688 = c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8660*(1.36E2/9.0);
                double t8689 = c*c0*gamma_bb*t8589*t8598*t8601*t8603*t8612*t8661*t8662*t8663*(2.56E2/9.0);
                double t8690 = 1.0/(t8600*t8600*t8600*t8600);
                double t8691 = c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8661*t8662*t8663*t8690*(1.28E2/3.0);
                double t8692 = c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8617*t8668*t8669*(1.6E1/3.0);
                double t8695 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8660*(1.36E2/9.0);
                double t8696 = c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8623*t8661*t8662*t8663*(5.12E2/9.0);
                double t8697 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8623*t8617*t8668*t8669*(1.6E1/3.0);
                double t8746 = a5*c0*t8591*t8593*t8586*t8589*t8598*t8612*t8623*t8659*(4.0E1/3.0);
                double t8693 = t8691+t8692+t8685+t8686-t8695+t8687-t8696+t8688-t8697+t8689-t8746;
                double t8698 = c*c0*t8598*t8603*t8612*t8658*(2.0/9.0);
                double t8699 = a5*c0*gamma_bb*t8586*t8598*t8612*t8674*(1.4E1/9.0);
                double t8700 = c*c0*t8587*t8598*t8603*t8668*t8669*(4.0/3.0);
                double t8701 = c*c0*t8591*t8593*t8589*t8598*t8603*t8612*t8660*(6.4E1/9.0);
                double t8702 = t8698+t8699+t8700+t8701;
                double t8703 = 1.0/(t8626*t8626);
                double t8769 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*t8618*t8619*(8.0/3.0);
                double t8704 = -t8640+t8680+t8681+t8628+t8629+t8679-t8769;
                double t8705 = a5*c0*t8586*t8598*t8612*t8674*(1.6E1/9.0);
                double t8706 = a5*c0*t8586*t8598*t8614*t8668*t8669*(4.0/3.0);
                double t8707 = a5*c0*t8591*t8593*t8586*t8589*t8598*t8612*t8659*(4.0E1/3.0);
                double t8708 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8660*(1.36E2/9.0);
                double t8709 = c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8661*t8662*t8663*(2.56E2/9.0);
                double t8710 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8617*t8668*t8669*(1.6E1/3.0);
                double t8711 = t8710+t8705+t8706+t8707+t8708+t8709;
                double t8712 = 1.0/pow(t8621,3.0/2.0);
                double t8713 = 1.0/pow(rho_b,3.5E1/3.0);
                double t8716 = t8620*t8639*t8702*3.0;
                double t8717 = c*c0*t8598*t8601*t8603*t8612*t8658*(4.0/3.0);
                double t8718 = a5*c0*gamma_bb*t8586*t8598*t8601*t8612*t8674*(2.8E1/3.0);
                double t8719 = c*c0*t8587*t8598*t8601*t8603*t8668*t8669*8.0;
                double t8720 = c*c0*t8591*t8593*t8589*t8598*t8601*t8603*t8612*t8660*(1.28E2/3.0);
                double t8739 = t8591*t8593*t8589*t8601*t8622*t8683*3.2E1;
                double t8740 = c*c0*t8591*t8593*t8589*t8598*t8603*t8612*t8623*t8660*(1.28E2/3.0);
                double t8721 = t8720-t8740+t8716+t8717+t8718+t8719-t8739;
                double t8722 = t8620*t8638*t8639*3.0;
                double t8723 = a5*c0*t8586*t8598*t8601*t8612*t8614*4.0;
                double t8724 = c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8617*1.6E1;
                double t8732 = gamma_bb*t8590*t8591*t8593*t8601*t8622*1.2E1;
                double t8733 = c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*1.6E1;
                double t8725 = t8722+t8723-t8732+t8724-t8733;
                double t8726 = t8620*t8639*t8702*2.0;
                double t8727 = c*c0*t8598*t8601*t8603*t8612*t8658*(8.0/9.0);
                double t8728 = a5*c0*gamma_bb*t8586*t8598*t8601*t8612*t8674*(5.6E1/9.0);
                double t8729 = c*c0*t8587*t8598*t8601*t8603*t8668*t8669*(1.6E1/3.0);
                double t8730 = c*c0*t8591*t8593*t8589*t8598*t8601*t8603*t8612*t8660*(2.56E2/9.0);
                double t8764 = t8591*t8593*t8589*t8601*t8622*t8683*(6.4E1/3.0);
                double t8765 = c*c0*t8591*t8593*t8589*t8598*t8603*t8612*t8623*t8660*(2.56E2/9.0);
                double t8731 = t8730+t8726+t8727+t8728-t8764+t8729-t8765;
                double t8734 = c*c0*t8598*t8601*t8603*t8612*t8618*t8619*t8658*(2.0/9.0);
                double t8735 = c*c0*t8587*t8598*t8601*t8603*t8618*t8619*t8668*t8669*(4.0/3.0);
                double t8736 = c*c0*t8587*t8598*t8601*t8603*t8612*t8618*t8619*t8682*(2.0/3.0);
                double t8737 = a5*c0*gamma_bb*t8586*t8598*t8601*t8612*t8618*t8619*t8674*(1.4E1/9.0);
                double t8738 = c*c0*t8591*t8593*t8589*t8598*t8601*t8603*t8612*t8660*t8618*t8619*(6.4E1/9.0);
                double t8741 = 1.0/c0;
                double t8742 = pow(rho_b,1.0/3.0);
                double t8743 = exp(-t8597);
                double t8744 = t8600*t8600;
                double t8745 = t8611*t8611;
                double t8747 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t8766 = c*c0*t8591*t8593*t8589*t8598*t8603*t8612*t8623*t8660*t8618*t8619*(6.4E1/9.0);
                double t8748 = t8675+t8676-t8694+t8677+t8678+t8734+t8735+t8736+t8737+t8738-t8766;
                double t8749 = exp(-t8641);
                double t8752 = t8650*t8645*t8648*t8749*1.0E5;
                double t8754 = c*c0*t8587*(2.0/3.0);
                double t8755 = -t8752+t8754;
                double t8756 = dirac(t8755);
                double t8757 = a1*t8586*t8614;
                double t8758 = gamma_bb*t8590*t8591*t8588*2.0;
                double t8759 = t8757+t8758;
                double t8760 = 1.0/pow(t8647,3.0/2.0);
                double t8761 = a3*t8594*t8586*t8595*t8650*t8645*t8760*t8749*5.0E4;
                double t8762 = gamma_bb*t8590*t8591*t8588*t8650*t8645*t8648*t8749*2.0E5;
                double t8789 = t8645*t8648*t8749*t8759*1.0E5;
                double t8763 = t8761+t8762-t8789;
                double t8767 = t8630*t8618*t8619;
                double t8768 = t8632*t8627*t8673;
                double t8770 = t8594*t8630*t8684*t8741*t8742*t8743*t8744*t8745*(3.0/2.0);
                double t8771 = t8618*t8619;
                double t8772 = t8632*t8635*t8627;
                double t8773 = t8771+t8772;
                double t8774 = 1.0/pow(rho_b,1.0E1/3.0);
                double t8775 = t8591*t8588*t8589*t8683*(1.6E1/3.0);
                double t8776 = a1*gamma_bb*t8586*t8674*(8.0/3.0);
                double t8777 = t8775+t8776;
                double t8778 = 1.0/(c*c);
                double t8779 = 1.0/pow(t8592,1.0/5.0);
                double t8780 = t8635*t8627*t8704;
                double t8781 = t8770+t8780+t8767+t8768-t8632*t8635*t8703*t8725;
                double t8782 = 1.0/pow(rho_b,5.0/3.0);
                double t8783 = t8651*t8656*t8782*(2.0/3.0);
                double t8784 = 1.0/(t8655*t8655*t8655);
                double t8785 = c*k2*t8658*(1.0/3.0);
                double t8786 = c*k1*t8664*t8658*(1.0/6.0);
                double t8787 = t8785+t8786;
                double t8788 = t8783-t8651*t8652*t8784*t8787*2.0;
                double t8790 = c*c0*t8658*(2.0/9.0);
                double t8791 = t8591*t8588*t8589*t8650*t8645*t8683*t8648*t8749*(1.6E6/3.0);
                double t8792 = a3*gamma_bb*t8594*t8586*t8650*t8645*t8760*t8774*t8749*(3.5E5/3.0);
                double t8793 = t8790+t8791+t8792-t8645*t8648*t8749*t8777*1.0E5-c*kab1*rab1*t8650*t8643*t8648*t8658*t8749*t8779*(8.0E4/3.0);
                v_rho_b_gamma_bb[Q] += scale * c0*t8657*heaviside(c*c0*t8587*(-2.0/3.0)+t8650*t8645*t8648*exp(-t8590*t8591*t8588*t8589)*1.0E5)*(t8770+t8767+t8768+t8635*t8627*(t8680+t8681+t8628+t8629+t8679-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*(8.0/3.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*t8618*t8619*(8.0/3.0))-t8632*t8635*t8703*t8725)*(1.0/2.0)-c0*t8657*t8763*t8773*t8756*(1.0/2.0)-c0*rho_b*t8657*heaviside(t8752-c*c0*t8587*(2.0/3.0))*(t8632*t8627*(t8620*t8639*t8711*2.0-t8620*t8638*t8702*t8712-gamma_bb*t8591*t8593*t8601*t8622*t8683*(1.28E2/3.0)+a5*c0*t8586*t8598*t8601*t8612*t8674*(6.4E1/9.0)-gamma_bb*t8590*t8591*t8593*t8601*t8639*t8702*4.0+gamma_bb*t8589*t8622*t8623*t8661*t8663*t8713*(2.56E2/3.0)-t8591*t8593*t8589*t8601*t8638*t8683*t8639*(3.2E1/3.0)+a5*c0*t8586*t8598*t8601*t8614*t8668*t8669*(1.6E1/3.0)+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8660*(5.44E2/9.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8660*(5.44E2/9.0)+a5*c0*t8591*t8593*t8586*t8589*t8598*t8601*t8612*t8659*(1.6E2/3.0)-a5*c0*t8591*t8593*t8586*t8589*t8598*t8612*t8623*t8659*(1.6E2/3.0)+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8617*t8668*t8669*(6.4E1/3.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8623*t8617*t8668*t8669*(6.4E1/3.0)+c*c0*gamma_bb*t8589*t8598*t8601*t8603*t8612*t8661*t8662*t8663*(1.024E3/9.0)-c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8623*t8661*t8662*t8663*(2.048E3/9.0)+c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8661*t8662*t8663*t8690*(5.12E2/3.0))+t8618*t8619*t8693+t8627*t8673*t8748+t8627*t8704*t8731+t8635*t8627*(t8691+t8692+t8685+t8686-t8695+t8687-t8696+t8688-t8697+t8689-t8746+t8630*t8682+(t8630*(1.0/3.0))/rho_b+(t8630*t8668*2.0)/t8611+t8591*t8593*t8589*t8630*t8683*(3.2E1/3.0)-t8591*t8593*t8589*t8620*t8630*t8683*(3.2E1/3.0)+a5*gamma_bb*t8594*t8586*t8630*t8684*t8774*(7.0/3.0)+a5*c0*t8586*t8598*t8601*t8612*t8618*t8619*t8674*(1.6E1/9.0)+a5*c0*t8586*t8598*t8601*t8612*t8614*t8618*t8619*t8682*(2.0/3.0)+a5*c0*t8586*t8598*t8601*t8614*t8618*t8619*t8668*t8669*(4.0/3.0)+c*c0*t8587*t8598*t8601*t8603*t8612*t8618*t8619*t8693*(2.0/3.0)+c*c0*t8598*t8601*t8603*t8612*t8630*t8618*t8619*t8658*(2.0/9.0)+a5*c0*gamma_bb*t8586*t8598*t8601*t8612*t8630*t8618*t8619*t8674*(1.4E1/9.0)+c*c0*t8587*t8598*t8601*t8603*t8612*t8630*t8618*t8619*t8682*(2.0/3.0)+c*c0*t8587*t8598*t8601*t8603*t8630*t8618*t8619*t8668*t8669*(4.0/3.0)+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8660*t8618*t8619*(1.36E2/9.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8660*t8618*t8619*(1.36E2/9.0)+a5*c0*t8591*t8593*t8586*t8589*t8598*t8601*t8612*t8618*t8619*t8659*(4.0E1/3.0)-a5*c0*t8591*t8593*t8586*t8589*t8598*t8612*t8623*t8618*t8619*t8659*(4.0E1/3.0)+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8617*t8618*t8619*t8682*(8.0/3.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8617*t8618*t8619*t8682*(8.0/3.0)+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8617*t8618*t8619*t8668*t8669*(1.6E1/3.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8623*t8617*t8618*t8619*t8668*t8669*(1.6E1/3.0)+c*c0*gamma_bb*t8589*t8598*t8601*t8603*t8612*t8661*t8662*t8618*t8663*t8619*(2.56E2/9.0)-c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8623*t8661*t8662*t8618*t8663*t8619*(5.12E2/9.0)+c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8661*t8662*t8618*t8663*t8690*t8619*(1.28E2/3.0)+c*c0*t8591*t8593*t8589*t8598*t8601*t8603*t8612*t8630*t8660*t8618*t8619*(6.4E1/9.0)-c*c0*t8591*t8593*t8589*t8598*t8603*t8612*t8630*t8623*t8660*t8618*t8619*(6.4E1/9.0))+t8630*t8618*t8619*t8682-t8632*t8673*t8703*t8721-t8635*t8703*t8721*t8704-t8632*t8703*t8731*t8725-t8635*t8703*t8725*t8748-t8632*t8635*t8703*(t8620*t8639*t8711*3.0-t8620*t8638*t8702*t8712*(3.0/2.0)-gamma_bb*t8591*t8593*t8601*t8622*t8683*6.4E1+a5*c0*t8586*t8598*t8601*t8612*t8674*(3.2E1/3.0)-gamma_bb*t8590*t8591*t8593*t8601*t8639*t8702*6.0+gamma_bb*t8589*t8622*t8623*t8661*t8663*t8713*1.28E2-t8591*t8593*t8589*t8601*t8638*t8683*t8639*1.6E1+a5*c0*t8586*t8598*t8601*t8614*t8668*t8669*8.0+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8612*t8660*(2.72E2/3.0)-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8612*t8623*t8660*(2.72E2/3.0)+a5*c0*t8591*t8593*t8586*t8589*t8598*t8601*t8612*t8659*8.0E1-a5*c0*t8591*t8593*t8586*t8589*t8598*t8612*t8623*t8659*8.0E1+c*c0*gamma_bb*t8591*t8593*t8598*t8601*t8603*t8617*t8668*t8669*3.2E1-c*c0*gamma_bb*t8591*t8593*t8598*t8603*t8623*t8617*t8668*t8669*3.2E1+c*c0*gamma_bb*t8589*t8598*t8601*t8603*t8612*t8661*t8662*t8663*(5.12E2/3.0)-c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8623*t8661*t8662*t8663*(1.024E3/3.0)+c*c0*gamma_bb*t8589*t8598*t8603*t8612*t8661*t8662*t8663*t8690*2.56E2)+t8632*1.0/(t8626*t8626*t8626)*t8635*t8721*t8725*2.0+t8594*t8684*t8693*t8741*t8742*t8743*t8744*t8745*(3.0/2.0)+t8594*t8630*t8682*t8684*t8741*t8742*t8743*t8744*t8745*(3.0/2.0)-a5*1.0/(rho_b*rho_b)*t8586*1.0/(t8603*t8603)*t8682*t8741*t8743*t8744*t8745*t8778*(3.0/2.0)+gamma_bb*t8591*t8593*t8594*t8600*t8682*t8684*t8741*t8743*t8745*t8747*6.0-gamma_bb*t8591*t8593*t8594*t8682*t8684*t8741*t8743*t8744*t8745*t8747*6.0)*(1.0/2.0)+c0*rho_b*t8657*t8781*t8756*t8793*(1.0/2.0)+c0*rho_b*t8657*t8773*t8756*(t8645*t8648*t8749*(a1*t8586*t8674*(8.0/3.0)+gamma_bb*t8591*t8588*t8683*(3.2E1/3.0))*-1.0E5+t8591*t8588*t8589*t8645*t8683*t8648*t8749*t8759*(1.6E6/3.0)+a3*t8594*t8586*t8595*t8645*t8760*t8749*t8777*5.0E4+a3*t8594*t8586*t8650*t8645*t8760*t8774*t8749*(3.5E5/3.0)+gamma_bb*t8591*t8588*t8650*t8645*t8683*t8648*t8749*(3.2E6/3.0)+gamma_bb*t8590*t8591*t8588*t8645*t8648*t8749*t8777*2.0E5-(a3*a3)*gamma_bb*t8591*t8650*t8617*t8645*1.0/pow(t8647,5.0/2.0)*t8749*t8778*1.75E5+a3*gamma_bb*t8594*t8586*t8645*t8760*t8774*t8749*t8759*(3.5E5/3.0)-c*kab1*rab1*t8643*t8648*t8658*t8749*t8759*t8779*(8.0E4/3.0)-gamma_bb*(t8588*t8588)*t8589*t8650*t8645*t8663*t8648*t8713*t8749*(3.2E6/3.0)+a3*kab1*rab1*t8586*t8650*t8643*t8674*t8760*t8749*t8779*(4.0E4/3.0)-a3*1.0/pow(rho_b,2.6E1/3.0)*t8591*t8594*t8586*t8588*t8589*t8650*t8645*t8760*t8749*5.0E5+c*gamma_bb*kab1*rab1*t8591*t8588*t8650*t8660*t8643*t8648*t8749*t8779*(1.6E5/3.0))*(1.0/2.0)+c0*rho_b*t8657*t8763*t8756*(t8618*t8619*t8682+t8632*t8627*t8731+t8635*t8627*t8748-t8632*t8635*t8703*t8721+t8594*t8682*t8684*t8741*t8742*t8743*t8744*t8745*(3.0/2.0))*(1.0/2.0)+c0*rho_b*t8657*t8781*t8788*heaviside(t8752-t8754)*(1.0/2.0)-c0*rho_b*t8657*t8763*t8773*t8756*t8788*(1.0/2.0)+c0*rho_b*t8657*t8763*t8773*t8793*dirac(t8755,1.0)*(1.0/2.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t8952 = tspi_m13*tspi_m13;
                double t8953 = 1.0/pow(rho_a,1.0/3.0);
                double t8954 = a2*a2;
                double t8955 = gamma_aa*gamma_aa;
                double t8956 = 1.0/pow(rho_a,1.6E1/3.0);
                double t8957 = t8952*t8952;
                double t8958 = c*t8953;
                double t8959 = a4*a4;
                double t8960 = 1.0/c;
                double t8961 = 1.0/pow(rho_a,7.0/3.0);
                double t8962 = sqrt(t8958);
                double t8963 = t8955*t8956*t8957*t8959*2.0;
                double t8964 = exp(t8963);
                double t8965 = t8955*t8956*t8957*t8959;
                double t8966 = t8965+1.0;
                double t8967 = 1.0/(t8966*t8966);
                double t8968 = a5*gamma_aa*t8960*t8952*t8961;
                double t8969 = t8968+1.0;
                double t8980 = raa2*t8962;
                double t8970 = exp(-t8980);
                double t8971 = t8970-1.0;
                double t8972 = kaa2*t8971;
                double t8973 = pow(t8958,2.0/5.0);
                double t8981 = raa1*t8973;
                double t8974 = exp(-t8981);
                double t8975 = t8974-1.0;
                double t8976 = kaa1*t8975;
                double t8977 = -kaa0+t8972+t8976;
                double t8978 = 1.0/(t8977*t8977);
                double t8979 = c*c0*t8953*t8964*t8967*t8969*t8978*(2.0/3.0);
                double t8982;
                double t8983;
                if (t8979 > expei_cutoff) {
                    t8982 = 1.0;
                    t8983 = expei(t8979);
                } else {
                    t8982 = exp(t8979);
                    t8983 = Ei(-t8979);
                }
                double t8984 = 1.0/t8966;
                double t8985 = c*c0*t8953*t8964*t8969*t8978*(2.0/3.0);
                double t8986 = sqrt(t8985);
                v[Q] += scale * c0*rho_a*exp(-(c*c)*1.0/pow(rho_a,2.0/3.0)*1.0/pow(k1*t8962+c*k2*t8953,2.0))*heaviside(c*c0*t8953*(-2.0/3.0)+exp(-t8954*t8955*t8956*t8957)*(kab0-kab1*(exp(-rab1*pow(t8958,4.0/5.0))-1.0))*1.0/sqrt(a3*gamma_aa*t8960*t8952*t8961+1.0)*(t8954*t8955*t8956*t8957+a1*gamma_aa*1.0/pow(rho_a,8.0/3.0)*t8952+1.0)*1.0E5)*(t8982*t8983+((c*c0*t8953*t8964*t8982*t8983*t8967*t8969*t8978*(2.0/3.0)+1.0)*(t8984*t8986*4.0+c*c0*t8953*t8964*t8967*t8969*t8978*(8.0/3.0)+6.0))/(t8984*t8986*6.0+c*c0*t8953*t8964*t8967*t8969*t8978*4.0+3.0))*(1.0/2.0);
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t8988 = tspi_m13*tspi_m13;
                double t8989 = 1.0/pow(rho_a,1.0/3.0);
                double t8990 = a2*a2;
                double t8991 = gamma_aa*gamma_aa;
                double t8992 = 1.0/pow(rho_a,1.6E1/3.0);
                double t8993 = t8988*t8988;
                double t8994 = c*t8989;
                double t8995 = a4*a4;
                double t8996 = 1.0/c;
                double t8997 = 1.0/pow(rho_a,7.0/3.0);
                double t8998 = sqrt(t8994);
                double t8999 = t8991*t8992*t8993*t8995*2.0;
                double t9000 = exp(t8999);
                double t9001 = t8991*t8992*t8993*t8995;
                double t9002 = t9001+1.0;
                double t9003 = 1.0/(t9002*t9002);
                double t9004 = a5*gamma_aa*t8996*t8988*t8997;
                double t9005 = t9004+1.0;
                double t9016 = raa2*t8998;
                double t9006 = exp(-t9016);
                double t9007 = t9006-1.0;
                double t9008 = kaa2*t9007;
                double t9009 = pow(t8994,2.0/5.0);
                double t9017 = raa1*t9009;
                double t9010 = exp(-t9017);
                double t9011 = t9010-1.0;
                double t9012 = kaa1*t9011;
                double t9013 = -kaa0+t9012+t9008;
                double t9014 = 1.0/(t9013*t9013);
                double t9015 = c*c0*t8989*t9000*t9003*t9005*t9014*(2.0/3.0);
                double t9018;
                double t9019;
                if (t9015 > expei_cutoff) {
                    t9018 = 1.0;
                    t9019 = expei(t9015);
                } else {
                    t9018 = exp(t9015);
                    t9019 = Ei(-t9015);
                }
                double t9020 = 1.0/t9002;
                double t9021 = c*c0*t8989*t9000*t9005*t9014*(2.0/3.0);
                double t9022 = sqrt(t9021);
                double t9023 = t8990*t8991*t8992*t8993;
                double t9024 = pow(t8994,4.0/5.0);
                double t9074 = rab1*t9024;
                double t9025 = exp(-t9074);
                double t9026 = t9025-1.0;
                double t9075 = kab1*t9026;
                double t9027 = kab0-t9075;
                double t9028 = a3*gamma_aa*t8996*t8988*t8997;
                double t9029 = t9028+1.0;
                double t9030 = 1.0/sqrt(t9029);
                double t9031 = 1.0/pow(rho_a,8.0/3.0);
                double t9032 = a1*gamma_aa*t8988*t9031;
                double t9033 = t9023+t9032+1.0;
                double t9034 = c*c;
                double t9035 = 1.0/pow(rho_a,2.0/3.0);
                double t9036 = k1*t8998;
                double t9037 = c*k2*t8989;
                double t9038 = t9036+t9037;
                double t9039 = 1.0/(t9038*t9038);
                double t9079 = t9034*t9035*t9039;
                double t9040 = exp(-t9079);
                double t9041 = c*c0*t8989*t9000*t9003*t9005*t9014*t9018*t9019*(2.0/3.0);
                double t9042 = t9041+1.0;
                double t9043 = t9020*t9022*6.0;
                double t9044 = c*c0*t8989*t9000*t9003*t9005*t9014*4.0;
                double t9045 = t9043+t9044+3.0;
                double t9046 = 1.0/t9045;
                double t9047 = 1.0/pow(rho_a,4.0/3.0);
                double t9048 = 1.0/pow(rho_a,1.1E1/3.0);
                double t9049 = 1.0/sqrt(t8994);
                double t9050 = c*kaa2*raa2*t9006*t9047*t9049*(1.0/6.0);
                double t9051 = 1.0/pow(t8994,3.0/5.0);
                double t9052 = c*kaa1*raa1*t9010*t9051*t9047*(2.0/1.5E1);
                double t9053 = t9050+t9052;
                double t9054 = 1.0/(t9013*t9013*t9013);
                double t9055 = 1.0/pow(rho_a,2.0E1/3.0);
                double t9056 = 1.0/(t9002*t9002*t9002);
                double t9057 = t9020*t9022*4.0;
                double t9058 = c*c0*t8989*t9000*t9003*t9005*t9014*(8.0/3.0);
                double t9059 = t9057+t9058+6.0;
                double t9060 = c*c0*t9000*t9003*t9005*t9014*t9047*(2.0/9.0);
                double t9061 = a5*c0*gamma_aa*t8988*t9000*t9003*t9014*t9048*(1.4E1/9.0);
                double t9062 = c*c0*t8989*t9000*t9003*t9005*t9053*t9054*(4.0/3.0);
                double t9063 = c*c0*t8991*t8993*t8995*t9000*t9003*t9005*t9014*t9055*(6.4E1/9.0);
                double t9065 = c*c0*t8991*t8993*t8995*t9000*t9005*t9014*t9055*t9056*(6.4E1/9.0);
                double t9064 = t9060+t9061+t9062+t9063-t9065;
                double t9066 = c*c0*t9000*t9005*t9014*t9047*(2.0/9.0);
                double t9067 = a5*c0*gamma_aa*t8988*t9000*t9014*t9048*(1.4E1/9.0);
                double t9068 = c*c0*t8989*t9000*t9005*t9053*t9054*(4.0/3.0);
                double t9069 = c*c0*t8991*t8993*t8995*t9000*t9005*t9014*t9055*(6.4E1/9.0);
                double t9070 = t9066+t9067+t9068+t9069;
                double t9071 = 1.0/sqrt(t9021);
                double t9072 = 1.0/pow(rho_a,1.9E1/3.0);
                double t9073 = exp(-t9023);
                double t9076 = t9030*t9033*t9027*t9073*1.0E5;
                double t9083 = c*c0*t8989*(2.0/3.0);
                double t9077 = -t9083+t9076;
                double t9078 = heaviside(t9077);
                double t9080 = t9018*t9019;
                double t9081 = t9042*t9046*t9059;
                double t9082 = t9080+t9081;
                v_rho_a[Q] += scale * c0*t9040*t9082*heaviside(c*c0*t8989*(-2.0/3.0)+t9030*t9033*t9027*exp(-t8990*t8991*t8992*t8993)*1.0E5)*(1.0/2.0)-c0*rho_a*t9040*t9078*(t9042*t9046*(t9020*t9070*t9071*2.0-t8991*t8993*t8995*t9003*t9022*t9072*(6.4E1/3.0)+c*c0*t9000*t9003*t9005*t9014*t9047*(8.0/9.0)+a5*c0*gamma_aa*t8988*t9000*t9003*t9014*t9048*(5.6E1/9.0)+c*c0*t8989*t9000*t9003*t9005*t9053*t9054*(1.6E1/3.0)+c*c0*t8991*t8993*t8995*t9000*t9003*t9005*t9014*t9055*(2.56E2/9.0)-c*c0*t8991*t8993*t8995*t9000*t9005*t9014*t9055*t9056*(2.56E2/9.0))+t9046*t9059*(t9060+t9061+t9062+t9063-t9065+c*c0*t9000*t9003*t9005*t9014*t9018*t9019*t9047*(2.0/9.0)+a5*c0*gamma_aa*t8988*t9000*t9003*t9014*t9018*t9019*t9048*(1.4E1/9.0)+c*c0*t8989*t9000*t9003*t9005*t9014*t9018*t9019*t9064*(2.0/3.0)+c*c0*t8989*t9000*t9003*t9005*t9053*t9018*t9054*t9019*(4.0/3.0)+c*c0*t8991*t8993*t8995*t9000*t9003*t9005*t9014*t9018*t9019*t9055*(6.4E1/9.0)-c*c0*t8991*t8993*t8995*t9000*t9005*t9014*t9018*t9019*t9055*t9056*(6.4E1/9.0))+t9018*t9019*t9064-t9042*1.0/(t9045*t9045)*t9059*(t9020*t9070*t9071*3.0-t8991*t8993*t8995*t9003*t9022*t9072*3.2E1+c*c0*t9000*t9003*t9005*t9014*t9047*(4.0/3.0)+a5*c0*gamma_aa*t8988*t9000*t9003*t9014*t9048*(2.8E1/3.0)+c*c0*t8989*t9000*t9003*t9005*t9053*t9054*8.0+c*c0*t8991*t8993*t8995*t9000*t9003*t9005*t9014*t9055*(1.28E2/3.0)-c*c0*t8991*t8993*t8995*t9000*t9005*t9014*t9055*t9056*(1.28E2/3.0))+(pow(rho_a,1.0/3.0)*t8996*(t9002*t9002)*(t9013*t9013)*t9064*exp(-t8999)*(3.0/2.0))/(c0*t9005))*(1.0/2.0)+c0*rho_a*t9040*t9082*t9078*(1.0/pow(rho_a,5.0/3.0)*t9034*t9039*(2.0/3.0)-t9034*t9035*1.0/(t9038*t9038*t9038)*(c*k2*t9047*(1.0/3.0)+c*k1*t9047*t9049*(1.0/6.0))*2.0)*(1.0/2.0)+c0*rho_a*t9040*t9082*dirac(t9083-t9076)*(c*c0*t9047*(2.0/9.0)-t9030*t9027*t9073*(a1*gamma_aa*t8988*t9048*(8.0/3.0)+t8990*t8991*t8993*t9072*(1.6E1/3.0))*1.0E5+t8990*t8991*t8993*t9030*t9033*t9027*t9072*t9073*(1.6E6/3.0)+a3*gamma_aa*1.0/pow(rho_a,1.0E1/3.0)*t8996*t8988*t9033*t9027*t9073*1.0/pow(t9029,3.0/2.0)*(3.5E5/3.0)-c*kab1*rab1*1.0/pow(t8994,1.0/5.0)*t9030*t9033*t9025*t9073*t9047*(8.0E4/3.0))*(1.0/2.0);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t9086 = tspi_m13*tspi_m13;
                double t9087 = 1.0/pow(rho_a,1.0/3.0);
                double t9088 = a2*a2;
                double t9089 = gamma_aa*gamma_aa;
                double t9090 = 1.0/pow(rho_a,1.6E1/3.0);
                double t9091 = t9086*t9086;
                double t9092 = c*t9087;
                double t9093 = a4*a4;
                double t9094 = 1.0/c;
                double t9095 = 1.0/pow(rho_a,7.0/3.0);
                double t9096 = sqrt(t9092);
                double t9097 = t9090*t9091*t9093*t9089*2.0;
                double t9098 = exp(t9097);
                double t9099 = t9090*t9091*t9093*t9089;
                double t9100 = t9099+1.0;
                double t9101 = 1.0/(t9100*t9100);
                double t9102 = a5*gamma_aa*t9094*t9086*t9095;
                double t9103 = t9102+1.0;
                double t9115 = raa2*t9096;
                double t9104 = exp(-t9115);
                double t9105 = t9104-1.0;
                double t9106 = kaa2*t9105;
                double t9107 = pow(t9092,2.0/5.0);
                double t9116 = raa1*t9107;
                double t9108 = exp(-t9116);
                double t9109 = t9108-1.0;
                double t9110 = kaa1*t9109;
                double t9111 = -kaa0+t9110+t9106;
                double t9112 = 1.0/(t9111*t9111);
                double t9113 = c*c0*t9087*t9098*t9101*t9103*t9112*(2.0/3.0);
                double t9114 = 1.0/pow(rho_a,8.0/3.0);
                double t9117 = 1.0/pow(rho_a,1.7E1/3.0);
                double t9118;
                double t9119;
                if (t9113 > expei_cutoff) {
                    t9118 = 1.0;
                    t9119 = expei(t9113);
                } else {
                    t9118 = exp(t9113);
                    t9119 = Ei(-t9113);
                }
                double t9120 = 1.0/t9100;
                double t9121 = c*c0*t9087*t9098*t9103*t9112*(2.0/3.0);
                double t9122 = sqrt(t9121);
                double t9123 = 1.0/(t9100*t9100*t9100);
                double t9124 = t9120*t9122*6.0;
                double t9125 = c*c0*t9087*t9098*t9101*t9103*t9112*4.0;
                double t9126 = t9124+t9125+3.0;
                double t9127 = 1.0/t9126;
                double t9128 = a5*c0*t9086*t9098*t9101*t9112*t9114*(2.0/3.0);
                double t9129 = c*c0*gamma_aa*t9091*t9093*t9098*t9101*t9103*t9112*t9117*(8.0/3.0);
                double t9140 = c*c0*gamma_aa*t9091*t9093*t9098*t9103*t9112*t9123*t9117*(8.0/3.0);
                double t9130 = -t9140+t9128+t9129;
                double t9131 = c*c0*t9087*t9098*t9101*t9103*t9112*t9118*t9119*(2.0/3.0);
                double t9132 = t9131+1.0;
                double t9133 = t9120*t9122*4.0;
                double t9134 = c*c0*t9087*t9098*t9101*t9103*t9112*(8.0/3.0);
                double t9135 = t9133+t9134+6.0;
                double t9136 = a5*c0*t9086*t9098*t9112*t9114*(2.0/3.0);
                double t9137 = c*c0*gamma_aa*t9091*t9093*t9098*t9103*t9112*t9117*(8.0/3.0);
                double t9138 = t9136+t9137;
                double t9139 = 1.0/sqrt(t9121);
                double t9141 = t9090*t9091*t9088*t9089;
                double t9142 = pow(t9092,4.0/5.0);
                double t9159 = rab1*t9142;
                double t9143 = exp(-t9159);
                double t9144 = t9143-1.0;
                double t9160 = kab1*t9144;
                double t9145 = kab0-t9160;
                double t9146 = a3*gamma_aa*t9094*t9086*t9095;
                double t9147 = t9146+1.0;
                double t9148 = 1.0/sqrt(t9147);
                double t9149 = a1*gamma_aa*t9086*t9114;
                double t9150 = t9141+t9149+1.0;
                double t9151 = c*c;
                double t9152 = 1.0/pow(rho_a,2.0/3.0);
                double t9153 = k1*t9096;
                double t9154 = c*k2*t9087;
                double t9155 = t9153+t9154;
                double t9156 = 1.0/(t9155*t9155);
                double t9157 = exp(-t9151*t9152*t9156);
                double t9158 = exp(-t9141);
                v_gamma_aa[Q] += scale * c0*rho_a*t9157*heaviside(c*c0*t9087*(-2.0/3.0)+t9150*t9145*t9148*exp(-t9090*t9091*t9088*t9089)*1.0E5)*(t9132*t9127*(t9120*t9138*t9139*2.0-gamma_aa*t9090*t9091*t9093*t9101*t9122*8.0+a5*c0*t9086*t9098*t9101*t9112*t9114*(8.0/3.0)+c*c0*gamma_aa*t9091*t9093*t9098*t9101*t9103*t9112*t9117*(3.2E1/3.0)-c*c0*gamma_aa*t9091*t9093*t9098*t9103*t9112*t9123*t9117*(3.2E1/3.0))+t9135*t9127*(t9128+t9129+a5*c0*t9086*t9098*t9101*t9112*t9114*t9118*t9119*(2.0/3.0)-c*c0*gamma_aa*t9091*t9093*t9098*t9103*t9112*t9123*t9117*(8.0/3.0)+c*c0*t9087*t9098*t9101*t9103*t9112*t9130*t9118*t9119*(2.0/3.0)+c*c0*gamma_aa*t9091*t9093*t9098*t9101*t9103*t9112*t9117*t9118*t9119*(8.0/3.0)-c*c0*gamma_aa*t9091*t9093*t9098*t9103*t9112*t9123*t9117*t9118*t9119*(8.0/3.0))+t9130*t9118*t9119-t9132*1.0/(t9126*t9126)*t9135*(t9120*t9138*t9139*3.0-gamma_aa*t9090*t9091*t9093*t9101*t9122*1.2E1+a5*c0*t9086*t9098*t9101*t9112*t9114*4.0+c*c0*gamma_aa*t9091*t9093*t9098*t9101*t9103*t9112*t9117*1.6E1-c*c0*gamma_aa*t9091*t9093*t9098*t9103*t9112*t9123*t9117*1.6E1)+(pow(rho_a,1.0/3.0)*t9094*(t9100*t9100)*(t9111*t9111)*t9130*exp(-t9097)*(3.0/2.0))/(c0*t9103))*(1.0/2.0)-c0*rho_a*t9157*dirac(c*c0*t9087*(2.0/3.0)-t9150*t9145*t9148*t9158*1.0E5)*(t9118*t9119+t9132*t9135*t9127)*(t9145*t9148*t9158*(a1*t9086*t9114+gamma_aa*t9090*t9091*t9088*2.0)*-1.0E5+a3*t9094*t9086*t9095*t9150*t9145*1.0/pow(t9147,3.0/2.0)*t9158*5.0E4+gamma_aa*t9090*t9091*t9088*t9150*t9145*t9148*t9158*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t9166 = tspi_m13*tspi_m13;
                double t9167 = 1.0/pow(rho_a,1.0/3.0);
                double t9168 = a2*a2;
                double t9169 = gamma_aa*gamma_aa;
                double t9170 = 1.0/pow(rho_a,1.6E1/3.0);
                double t9171 = t9166*t9166;
                double t9172 = c*t9167;
                double t9173 = a4*a4;
                double t9174 = t9170*t9171*t9173*t9169*2.0;
                double t9175 = exp(t9174);
                double t9176 = 1.0/c;
                double t9177 = 1.0/pow(rho_a,7.0/3.0);
                double t9178 = sqrt(t9172);
                double t9179 = t9170*t9171*t9173*t9169;
                double t9180 = t9179+1.0;
                double t9181 = 1.0/(t9180*t9180);
                double t9182 = a5*gamma_aa*t9166*t9176*t9177;
                double t9183 = t9182+1.0;
                double t9194 = raa2*t9178;
                double t9184 = exp(-t9194);
                double t9185 = t9184-1.0;
                double t9186 = kaa2*t9185;
                double t9187 = pow(t9172,2.0/5.0);
                double t9195 = raa1*t9187;
                double t9188 = exp(-t9195);
                double t9189 = t9188-1.0;
                double t9190 = kaa1*t9189;
                double t9191 = -kaa0+t9190+t9186;
                double t9192 = 1.0/(t9191*t9191);
                double t9193 = c*c0*t9181*t9183*t9192*t9175*t9167*(2.0/3.0);
                double t9196 = 1.0/t9180;
                double t9197 = 1.0/pow(rho_a,4.0/3.0);
                double t9198 = c*c0*t9183*t9192*t9175*t9167*(2.0/3.0);
                double t9199 = sqrt(t9198);
                double t9200 = 1.0/pow(rho_a,1.1E1/3.0);
                double t9201 = 1.0/sqrt(t9172);
                double t9202 = c*kaa2*raa2*t9184*t9197*t9201*(1.0/6.0);
                double t9203 = 1.0/pow(t9172,3.0/5.0);
                double t9204 = c*kaa1*raa1*t9188*t9197*t9203*(2.0/1.5E1);
                double t9205 = t9202+t9204;
                double t9206 = 1.0/(t9191*t9191*t9191);
                double t9207 = 1.0/pow(rho_a,2.0E1/3.0);
                double t9208;
                double t9209;
                if (t9193 > expei_cutoff) {
                    t9208 = 1.0;
                    t9209 = expei(t9193);
                } else {
                    t9208 = exp(t9193);
                    t9209 = Ei(-t9193);
                }
                double t9210 = 1.0/(t9180*t9180*t9180);
                double t9211 = t9196*t9199*6.0;
                double t9212 = c*c0*t9181*t9183*t9192*t9175*t9167*4.0;
                double t9213 = t9211+t9212+3.0;
                double t9214 = 1.0/t9213;
                double t9215 = c*c0*t9181*t9183*t9192*t9175*t9197*(2.0/9.0);
                double t9216 = a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9200*(1.4E1/9.0);
                double t9217 = c*c0*t9181*t9183*t9175*t9167*t9205*t9206*(4.0/3.0);
                double t9218 = c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9207*(6.4E1/9.0);
                double t9220 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9207*(6.4E1/9.0);
                double t9219 = -t9220+t9215+t9216+t9217+t9218;
                double t9221 = c*c0*t9181*t9183*t9192*t9175*t9167*t9208*t9209*(2.0/3.0);
                double t9222 = t9221+1.0;
                double t9223 = t9196*t9199*4.0;
                double t9224 = c*c0*t9181*t9183*t9192*t9175*t9167*(8.0/3.0);
                double t9225 = t9223+t9224+6.0;
                double t9226 = c*c0*t9183*t9192*t9175*t9197*(2.0/9.0);
                double t9227 = a5*c0*gamma_aa*t9192*t9166*t9175*t9200*(1.4E1/9.0);
                double t9228 = c*c0*t9183*t9175*t9167*t9205*t9206*(4.0/3.0);
                double t9229 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9207*(6.4E1/9.0);
                double t9230 = t9226+t9227+t9228+t9229;
                double t9231 = 1.0/sqrt(t9198);
                double t9232 = 1.0/pow(rho_a,1.9E1/3.0);
                double t9233 = t9170*t9171*t9168*t9169;
                double t9234 = pow(t9172,4.0/5.0);
                double t9252 = rab1*t9234;
                double t9235 = exp(-t9252);
                double t9236 = t9235-1.0;
                double t9253 = kab1*t9236;
                double t9237 = kab0-t9253;
                double t9238 = a3*gamma_aa*t9166*t9176*t9177;
                double t9239 = t9238+1.0;
                double t9240 = 1.0/sqrt(t9239);
                double t9241 = 1.0/pow(rho_a,8.0/3.0);
                double t9242 = a1*gamma_aa*t9166*t9241;
                double t9243 = t9233+t9242+1.0;
                double t9244 = c*c;
                double t9245 = 1.0/pow(rho_a,2.0/3.0);
                double t9246 = k1*t9178;
                double t9247 = c*k2*t9167;
                double t9248 = t9246+t9247;
                double t9249 = 1.0/(t9248*t9248);
                double t9255 = t9244*t9245*t9249;
                double t9250 = exp(-t9255);
                double t9251 = exp(-t9233);
                double t9254 = c*c0*t9167*(2.0/3.0);
                double t9256 = t9196*t9230*t9231*2.0;
                double t9257 = c*c0*t9181*t9183*t9192*t9175*t9197*(8.0/9.0);
                double t9258 = a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9200*(5.6E1/9.0);
                double t9259 = c*c0*t9181*t9183*t9175*t9167*t9205*t9206*(1.6E1/3.0);
                double t9260 = c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9207*(2.56E2/9.0);
                double t9311 = t9171*t9181*t9173*t9169*t9199*t9232*(6.4E1/3.0);
                double t9312 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9207*(2.56E2/9.0);
                double t9261 = t9260+t9256+t9257+t9258+t9259-t9311-t9312;
                double t9262 = c*c0*t9181*t9183*t9192*t9175*t9197*t9208*t9209*(2.0/9.0);
                double t9263 = c*c0*t9181*t9183*t9175*t9167*t9205*t9206*t9208*t9209*(4.0/3.0);
                double t9264 = c*c0*t9181*t9183*t9192*t9175*t9167*t9208*t9209*t9219*(2.0/3.0);
                double t9265 = a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9200*t9208*t9209*(1.4E1/9.0);
                double t9266 = c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9207*t9208*t9209*(6.4E1/9.0);
                double t9315 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9207*t9208*t9209*(6.4E1/9.0);
                double t9267 = -t9220+t9215+t9216+t9217+t9262+t9218+t9263+t9264+t9265+t9266-t9315;
                double t9268 = t9173*t9173;
                double t9269 = t9169*t9169;
                double t9270 = t9171*t9171;
                double t9271 = raa2*raa2;
                double t9272 = c*kaa2*t9184*t9177*t9271*(1.0/3.6E1);
                double t9273 = raa1*raa1;
                double t9274 = 1.0/pow(t9172,6.0/5.0);
                double t9275 = kaa1*t9188*t9241*t9244*t9273*t9274*(4.0/2.25E2);
                double t9276 = 1.0/pow(t9172,3.0/2.0);
                double t9277 = kaa2*raa2*t9184*t9241*t9244*t9276*(1.0/3.6E1);
                double t9278 = 1.0/pow(t9172,8.0/5.0);
                double t9279 = kaa1*raa1*t9188*t9241*t9244*t9278*(2.0/7.5E1);
                double t9289 = c*kaa2*raa2*t9184*t9177*t9201*(2.0/9.0);
                double t9290 = c*kaa1*raa1*t9177*t9188*t9203*(8.0/4.5E1);
                double t9280 = t9272-t9290+t9275+t9277+t9279-t9289;
                double t9281 = t9205*t9205;
                double t9282 = 1.0/(t9191*t9191*t9191*t9191);
                double t9283 = 1.0/pow(rho_a,1.4E1/3.0);
                double t9284 = 1.0/pow(rho_a,1.0E1);
                double t9285 = 1.0/pow(rho_a,1.3E1);
                double t9286 = 1.0/pow(rho_a,2.3E1/3.0);
                double t9287 = 1.0/pow(rho_a,1.0E1/3.0);
                double t9288 = 1.0/t9183;
                double t9291 = t9219*t9219;
                double t9292 = 1.0/(t9180*t9180*t9180*t9180);
                double t9293 = c*c0*t9181*t9183*t9192*t9175*t9177*(8.0/2.7E1);
                double t9294 = c*c0*t9181*t9183*t9175*t9167*t9281*t9282*4.0;
                double t9295 = a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9283*(5.6E1/9.0);
                double t9296 = c*c0*t9181*t9183*t9175*t9197*t9205*t9206*(8.0/9.0);
                double t9297 = a5*c0*gamma_aa*t9181*t9166*t9175*t9200*t9205*t9206*(5.6E1/9.0);
                double t9298 = a5*c0*gamma_aa*t9171*t9181*t9173*t9192*t9166*t9175*t9169*t9284*(8.96E2/2.7E1);
                double t9299 = c*c0*t9181*t9183*t9192*t9175*t9270*t9285*t9268*t9269*(2.048E3/2.7E1);
                double t9300 = c*c0*t9183*t9192*t9175*t9270*t9292*t9285*t9268*t9269*(1.024E3/9.0);
                double t9301 = c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9286*(4.48E2/9.0);
                double t9302 = c*c0*t9171*t9181*t9173*t9183*t9175*t9169*t9205*t9206*t9207*(2.56E2/9.0);
                double t9335 = c*c0*t9181*t9183*t9175*t9167*t9206*t9280*(4.0/3.0);
                double t9336 = a5*c0*gamma_aa*t9171*t9173*t9192*t9166*t9175*t9169*t9210*t9284*(8.96E2/2.7E1);
                double t9337 = c*c0*t9183*t9192*t9175*t9210*t9270*t9285*t9268*t9269*(4.096E3/2.7E1);
                double t9338 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9286*(4.48E2/9.0);
                double t9339 = c*c0*t9171*t9173*t9183*t9175*t9169*t9210*t9205*t9206*t9207*(2.56E2/9.0);
                double t9303 = t9293+t9294+t9295+t9296+t9297+t9298+t9299+t9300+t9301+t9302-t9335-t9336-t9337-t9338-t9339;
                double t9304 = 1.0/(t9213*t9213);
                double t9305 = t9196*t9230*t9231*3.0;
                double t9306 = c*c0*t9181*t9183*t9192*t9175*t9197*(4.0/3.0);
                double t9307 = a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9200*(2.8E1/3.0);
                double t9308 = c*c0*t9181*t9183*t9175*t9167*t9205*t9206*8.0;
                double t9309 = c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9207*(1.28E2/3.0);
                double t9313 = t9171*t9181*t9173*t9169*t9199*t9232*3.2E1;
                double t9314 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9207*(1.28E2/3.0);
                double t9310 = -t9313+t9305-t9314+t9306+t9307+t9308+t9309;
                double t9316 = c*c0*t9183*t9192*t9175*t9177*(8.0/2.7E1);
                double t9317 = a5*c0*gamma_aa*t9192*t9166*t9175*t9283*(5.6E1/9.0);
                double t9318 = c*c0*t9183*t9175*t9197*t9205*t9206*(8.0/9.0);
                double t9319 = c*c0*t9183*t9175*t9167*t9281*t9282*4.0;
                double t9320 = a5*c0*gamma_aa*t9171*t9173*t9192*t9166*t9175*t9169*t9284*(8.96E2/2.7E1);
                double t9321 = a5*c0*gamma_aa*t9166*t9175*t9200*t9205*t9206*(5.6E1/9.0);
                double t9322 = c*c0*t9183*t9192*t9175*t9270*t9285*t9268*t9269*(2.048E3/2.7E1);
                double t9323 = c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9286*(4.48E2/9.0);
                double t9324 = c*c0*t9171*t9173*t9183*t9175*t9169*t9205*t9206*t9207*(2.56E2/9.0);
                double t9325 = t9320+t9321+t9322+t9323+t9324+t9316+t9317+t9318+t9319-c*c0*t9183*t9175*t9167*t9206*t9280*(4.0/3.0);
                double t9326 = t9230*t9230;
                double t9327 = 1.0/pow(t9198,3.0/2.0);
                double t9328 = 1.0/pow(rho_a,2.2E1/3.0);
                double t9329 = 1.0/pow(rho_a,3.8E1/3.0);
                double t9330 = 1.0/c0;
                double t9331 = exp(-t9174);
                double t9332 = t9180*t9180;
                double t9333 = t9191*t9191;
                double t9334 = pow(rho_a,1.0/3.0);
                double t9340 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t9341 = t9240*t9251*t9243*t9237*1.0E5;
                double t9342 = -t9254+t9341;
                double t9343 = heaviside(t9342);
                double t9344 = t9208*t9209;
                double t9345 = t9222*t9214*t9225;
                double t9346 = t9344+t9345;
                double t9347 = t9171*t9168*t9169*t9232*(1.6E1/3.0);
                double t9348 = a1*gamma_aa*t9166*t9200*(8.0/3.0);
                double t9349 = t9347+t9348;
                double t9350 = 1.0/(c*c);
                double t9351 = 1.0/pow(t9172,1.0/5.0);
                double t9352 = 1.0/pow(t9239,3.0/2.0);
                double t9353 = 1.0/pow(rho_a,5.0/3.0);
                double t9354 = t9244*t9249*t9353*(2.0/3.0);
                double t9355 = 1.0/(t9248*t9248*t9248);
                double t9356 = c*k2*t9197*(1.0/3.0);
                double t9357 = c*k1*t9197*t9201*(1.0/6.0);
                double t9358 = t9356+t9357;
                double t9372 = t9244*t9245*t9355*t9358*2.0;
                double t9359 = t9354-t9372;
                double t9360 = t9222*t9214*t9261;
                double t9361 = t9208*t9209*t9219;
                double t9362 = t9214*t9225*t9267;
                double t9363 = t9176*t9219*t9288*t9330*t9331*t9332*t9333*t9334*(3.0/2.0);
                double t9367 = t9222*t9225*t9310*t9304;
                double t9364 = t9360+t9361+t9362+t9363-t9367;
                double t9365 = t9254-t9341;
                double t9366 = dirac(t9365);
                double t9368 = c*c0*t9197*(2.0/9.0);
                double t9369 = t9171*t9168*t9169*t9240*t9232*t9251*t9243*t9237*(1.6E6/3.0);
                double t9370 = a3*gamma_aa*t9166*t9176*t9251*t9243*t9237*t9287*t9352*(3.5E5/3.0);
                double t9373 = t9240*t9251*t9237*t9349*1.0E5;
                double t9374 = c*kab1*rab1*t9197*t9240*t9251*t9243*t9235*t9351*(8.0E4/3.0);
                double t9371 = t9370-t9373-t9374+t9368+t9369;
                v_rho_a_rho_a[Q] += scale * -c0*t9250*t9364*heaviside(c*c0*t9167*(-2.0/3.0)+t9240*t9243*t9237*exp(-t9170*t9171*t9168*t9169)*1.0E5)+c0*t9250*t9371*t9346*dirac(t9254-t9240*t9251*t9243*t9237*1.0E5)+c0*t9250*t9343*t9346*t9359+c0*rho_a*t9250*t9343*(t9222*t9214*(t9196*t9231*t9325*2.0-t9196*t9326*t9327-t9171*t9181*t9173*t9169*t9199*t9328*(1.216E3/9.0)+t9199*t9210*t9270*t9268*t9269*t9329*(2.048E3/9.0)+c*c0*t9181*t9183*t9192*t9175*t9177*(3.2E1/2.7E1)-t9171*t9181*t9173*t9169*t9230*t9231*t9232*(6.4E1/3.0)+a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9283*(2.24E2/9.0)-c*c0*t9181*t9183*t9175*t9167*t9206*t9280*(1.6E1/3.0)+c*c0*t9181*t9183*t9175*t9197*t9205*t9206*(3.2E1/9.0)+c*c0*t9181*t9183*t9175*t9167*t9281*t9282*1.6E1+a5*c0*gamma_aa*t9181*t9166*t9175*t9200*t9205*t9206*(2.24E2/9.0)+c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9286*(1.792E3/9.0)-c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9286*(1.792E3/9.0)+c*c0*t9181*t9183*t9192*t9175*t9270*t9285*t9268*t9269*(8.192E3/2.7E1)-c*c0*t9183*t9192*t9175*t9210*t9270*t9285*t9268*t9269*(1.6384E4/2.7E1)+c*c0*t9183*t9192*t9175*t9270*t9292*t9285*t9268*t9269*(4.096E3/9.0)+a5*c0*gamma_aa*t9171*t9181*t9173*t9192*t9166*t9175*t9169*t9284*(3.584E3/2.7E1)-a5*c0*gamma_aa*t9171*t9173*t9192*t9166*t9175*t9169*t9210*t9284*(3.584E3/2.7E1)+c*c0*t9171*t9181*t9173*t9183*t9175*t9169*t9205*t9206*t9207*(1.024E3/9.0)-c*c0*t9171*t9173*t9183*t9175*t9169*t9210*t9205*t9206*t9207*(1.024E3/9.0))+t9214*t9261*t9267*2.0+t9208*t9209*t9291+t9208*t9209*t9303+t9214*t9225*(t9291+t9293+t9294+t9295+t9296+t9297+t9298+t9299+t9300+t9301+t9302+(t9219*(1.0/3.0))/rho_a+(t9205*t9219*2.0)/t9191+t9171*t9173*t9169*t9232*t9219*(3.2E1/3.0)-t9171*t9173*t9169*t9196*t9232*t9219*(3.2E1/3.0)+a5*gamma_aa*t9166*t9176*t9219*t9287*t9288*(7.0/3.0)-c*c0*t9181*t9183*t9175*t9167*t9206*t9280*(4.0/3.0)+c*c0*t9181*t9183*t9192*t9175*t9177*t9208*t9209*(8.0/2.7E1)+a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9208*t9209*t9283*(5.6E1/9.0)-c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9286*(4.48E2/9.0)+c*c0*t9181*t9183*t9192*t9175*t9167*t9208*t9209*t9291*(2.0/3.0)+c*c0*t9181*t9183*t9192*t9175*t9197*t9208*t9209*t9219*(4.0/9.0)+c*c0*t9181*t9183*t9192*t9175*t9167*t9208*t9209*t9303*(2.0/3.0)-c*c0*t9181*t9183*t9175*t9167*t9206*t9208*t9280*t9209*(4.0/3.0)+c*c0*t9181*t9183*t9175*t9197*t9205*t9206*t9208*t9209*(8.0/9.0)+c*c0*t9181*t9183*t9175*t9167*t9208*t9209*t9281*t9282*4.0-c*c0*t9183*t9192*t9175*t9210*t9270*t9285*t9268*t9269*(4.096E3/2.7E1)-a5*c0*gamma_aa*t9171*t9173*t9192*t9166*t9175*t9169*t9210*t9284*(8.96E2/2.7E1)+a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9200*t9208*t9209*t9219*(2.8E1/9.0)+a5*c0*gamma_aa*t9181*t9166*t9175*t9200*t9205*t9206*t9208*t9209*(5.6E1/9.0)-c*c0*t9171*t9173*t9183*t9175*t9169*t9210*t9205*t9206*t9207*(2.56E2/9.0)+c*c0*t9181*t9183*t9175*t9167*t9205*t9206*t9208*t9209*t9219*(8.0/3.0)+c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9208*t9209*t9286*(4.48E2/9.0)-c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9208*t9209*t9286*(4.48E2/9.0)+c*c0*t9181*t9183*t9192*t9175*t9270*t9208*t9209*t9285*t9268*t9269*(2.048E3/2.7E1)-c*c0*t9183*t9192*t9175*t9210*t9270*t9208*t9209*t9285*t9268*t9269*(4.096E3/2.7E1)+c*c0*t9183*t9192*t9175*t9270*t9208*t9209*t9292*t9285*t9268*t9269*(1.024E3/9.0)+a5*c0*gamma_aa*t9171*t9181*t9173*t9192*t9166*t9175*t9169*t9208*t9209*t9284*(8.96E2/2.7E1)-a5*c0*gamma_aa*t9171*t9173*t9192*t9166*t9175*t9169*t9210*t9208*t9209*t9284*(8.96E2/2.7E1)+c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9207*t9208*t9209*t9219*(1.28E2/9.0)+c*c0*t9171*t9181*t9173*t9183*t9175*t9169*t9205*t9206*t9207*t9208*t9209*(2.56E2/9.0)-c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9207*t9208*t9209*t9219*(1.28E2/9.0)-c*c0*t9171*t9173*t9183*t9175*t9169*t9210*t9205*t9206*t9207*t9208*t9209*(2.56E2/9.0))-t9222*t9225*t9304*(t9196*t9231*t9325*3.0-t9196*t9326*t9327*(3.0/2.0)-t9171*t9181*t9173*t9169*t9199*t9328*(6.08E2/3.0)+t9199*t9210*t9270*t9268*t9269*t9329*(1.024E3/3.0)+c*c0*t9181*t9183*t9192*t9175*t9177*(1.6E1/9.0)-t9171*t9181*t9173*t9169*t9230*t9231*t9232*3.2E1+a5*c0*gamma_aa*t9181*t9192*t9166*t9175*t9283*(1.12E2/3.0)-c*c0*t9181*t9183*t9175*t9167*t9206*t9280*8.0+c*c0*t9181*t9183*t9175*t9197*t9205*t9206*(1.6E1/3.0)+c*c0*t9181*t9183*t9175*t9167*t9281*t9282*2.4E1+a5*c0*gamma_aa*t9181*t9166*t9175*t9200*t9205*t9206*(1.12E2/3.0)+c*c0*t9171*t9181*t9173*t9183*t9192*t9175*t9169*t9286*(8.96E2/3.0)-c*c0*t9171*t9173*t9183*t9192*t9175*t9169*t9210*t9286*(8.96E2/3.0)+c*c0*t9181*t9183*t9192*t9175*t9270*t9285*t9268*t9269*(4.096E3/9.0)-c*c0*t9183*t9192*t9175*t9210*t9270*t9285*t9268*t9269*(8.192E3/9.0)+c*c0*t9183*t9192*t9175*t9270*t9292*t9285*t9268*t9269*(2.048E3/3.0)+a5*c0*gamma_aa*t9171*t9181*t9173*t9192*t9166*t9175*t9169*t9284*(1.792E3/9.0)-a5*c0*gamma_aa*t9171*t9173*t9192*t9166*t9175*t9169*t9210*t9284*(1.792E3/9.0)+c*c0*t9171*t9181*t9173*t9183*t9175*t9169*t9205*t9206*t9207*(5.12E2/3.0)-c*c0*t9171*t9173*t9183*t9175*t9169*t9210*t9205*t9206*t9207*(5.12E2/3.0))-t9222*t9261*t9310*t9304*2.0-t9225*t9267*t9310*t9304*2.0+1.0/(t9213*t9213*t9213)*t9222*t9225*(t9310*t9310)*2.0-t9176*t9245*t9219*t9288*t9330*t9331*t9332*t9333*(1.0/2.0)+t9176*t9291*t9288*t9330*t9331*t9332*t9333*t9334*(3.0/2.0)+t9176*t9288*t9303*t9330*t9331*t9332*t9333*t9334*(3.0/2.0)-t9191*t9176*t9205*t9219*t9288*t9330*t9331*t9332*t9334*3.0+t9171*t9180*t9173*t9176*t9169*t9219*t9288*t9330*t9331*t9340*t9333*1.6E1-t9171*t9173*t9176*t9169*t9219*t9288*t9330*t9331*t9340*t9332*t9333*1.6E1-a5*gamma_aa*1.0/(rho_a*rho_a*rho_a)*1.0/(t9183*t9183)*t9166*t9219*t9330*t9331*t9332*t9350*t9333*(7.0/2.0))*(1.0/2.0)-c0*rho_a*t9250*t9371*t9364*t9366-c0*rho_a*t9250*t9343*t9364*t9359+c0*rho_a*t9250*t9343*t9346*(t9359*t9359)*(1.0/2.0)-c0*rho_a*t9250*t9346*t9366*(c*c0*t9177*(8.0/2.7E1)-t9240*t9251*t9237*(a1*gamma_aa*t9166*t9283*(8.8E1/9.0)+t9171*t9168*t9169*t9328*(3.04E2/9.0))*1.0E5+t9171*t9168*t9169*t9240*t9251*t9243*t9237*t9328*(3.04E7/9.0)+t9171*t9168*t9169*t9240*t9232*t9251*t9237*t9349*(3.2E6/3.0)-(t9168*t9168)*t9240*t9251*t9243*t9270*t9237*t9269*t9329*(2.56E7/9.0)-(a3*a3)*t9171*t9169*t9251*t9207*t9243*t9237*1.0/pow(t9239,5.0/2.0)*t9350*(1.225E6/3.0)+kab1*(rab1*rab1)*1.0/pow(t9172,2.0/5.0)*t9240*t9241*t9251*t9243*t9235*t9244*(6.4E4/9.0)+a3*gamma_aa*t9166*t9176*t9251*t9237*t9287*t9352*t9349*(7.0E5/3.0)-c*kab1*rab1*t9177*t9240*t9251*t9243*t9235*t9351*(3.2E5/9.0)-c*kab1*rab1*t9197*t9240*t9251*t9235*t9351*t9349*(1.6E5/3.0)+kab1*rab1*t9240*t9241*t9251*t9243*t9235*t9244*t9274*(1.6E4/9.0)+a3*gamma_aa*1.0/pow(rho_a,1.3E1/3.0)*t9166*t9176*t9251*t9243*t9237*t9352*(3.5E6/9.0)+a3*gamma_aa*kab1*rab1*t9166*t9251*t9243*t9235*t9283*t9351*t9352*(5.6E5/9.0)-a3*gamma_aa*1.0/pow(rho_a,2.9E1/3.0)*t9171*t9166*t9176*t9168*t9169*t9251*t9243*t9237*t9352*(1.12E7/9.0)+c*kab1*rab1*t9171*t9168*t9169*t9240*t9251*t9243*t9235*t9286*t9351*(2.56E6/9.0))*(1.0/2.0)-c0*rho_a*t9250*t9343*t9346*(t9241*t9244*t9249*(1.0E1/9.0)-t9244*t9353*t9355*t9358*(8.0/3.0)+t9244*t9245*1.0/(t9248*t9248*t9248*t9248)*(t9358*t9358)*6.0-t9244*t9245*t9355*(c*k2*t9177*(4.0/9.0)+c*k1*t9177*t9201*(2.0/9.0)-k1*t9241*t9244*t9276*(1.0/3.6E1))*2.0)*(1.0/2.0)-c0*rho_a*t9250*(t9371*t9371)*t9346*dirac(t9365,1.0)*(1.0/2.0)+c0*rho_a*t9250*t9371*t9346*t9366*t9359;
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t9592 = tspi_m13*tspi_m13;
                double t9593 = 1.0/pow(rho_a,1.0/3.0);
                double t9594 = a2*a2;
                double t9595 = gamma_aa*gamma_aa;
                double t9596 = 1.0/pow(rho_a,1.6E1/3.0);
                double t9597 = t9592*t9592;
                double t9598 = c*t9593;
                double t9599 = a4*a4;
                double t9600 = t9595*t9596*t9597*t9599*2.0;
                double t9601 = exp(t9600);
                double t9602 = 1.0/c;
                double t9603 = 1.0/pow(rho_a,7.0/3.0);
                double t9604 = sqrt(t9598);
                double t9605 = t9595*t9596*t9597*t9599;
                double t9606 = t9605+1.0;
                double t9607 = 1.0/(t9606*t9606);
                double t9608 = a5*gamma_aa*t9592*t9602*t9603;
                double t9609 = t9608+1.0;
                double t9620 = raa2*t9604;
                double t9610 = exp(-t9620);
                double t9611 = t9610-1.0;
                double t9612 = kaa2*t9611;
                double t9613 = pow(t9598,2.0/5.0);
                double t9621 = raa1*t9613;
                double t9614 = exp(-t9621);
                double t9615 = t9614-1.0;
                double t9616 = kaa1*t9615;
                double t9617 = -kaa0+t9612+t9616;
                double t9618 = 1.0/(t9617*t9617);
                double t9619 = c*c0*t9593*t9601*t9607*t9609*t9618*(2.0/3.0);
                double t9622 = 1.0/t9606;
                double t9623 = c*c0*t9593*t9601*t9609*t9618*(2.0/3.0);
                double t9624 = 1.0/pow(rho_a,8.0/3.0);
                double t9625 = 1.0/pow(rho_a,1.7E1/3.0);
                double t9630 = a5*c0*t9592*t9601*t9624*t9618*(2.0/3.0);
                double t9631 = c*c0*gamma_aa*t9597*t9599*t9601*t9625*t9609*t9618*(8.0/3.0);
                double t9626 = t9630+t9631;
                double t9627 = sqrt(t9623);
                double t9628 = t9599*t9599;
                double t9629 = t9597*t9597;
                double t9632 = 1.0/sqrt(t9623);
                double t9633 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t9634 = 1.0/(t9606*t9606*t9606);
                double t9635 = 1.0/pow(rho_a,1.1E1);
                double t9636 = t9622*t9627*6.0;
                double t9637 = c*c0*t9593*t9601*t9607*t9609*t9618*4.0;
                double t9638 = t9636+t9637+3.0;
                double t9639 = 1.0/t9638;
                double t9641 = a5*c0*t9592*t9601*t9624*t9607*t9618*(2.0/3.0);
                double t9642 = c*c0*gamma_aa*t9597*t9599*t9601*t9607*t9625*t9609*t9618*(8.0/3.0);
                double t9643 = c*c0*gamma_aa*t9597*t9599*t9601*t9625*t9634*t9609*t9618*(8.0/3.0);
                double t9640 = t9641+t9642-t9643;
                double t9644;
                double t9645;
                if (t9619 > expei_cutoff) {
                    t9644 = 1.0;
                    t9645 = expei(t9619);
                } else {
                    t9644 = exp(t9619);
                    t9645 = Ei(-t9619);
                }
                double t9646 = t9640*t9640;
                double t9647 = 1.0/(t9606*t9606*t9606*t9606);
                double t9648 = a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9607*t9618*(1.6E1/3.0);
                double t9649 = c*c0*t9597*t9599*t9601*t9607*t9625*t9609*t9618*(8.0/3.0);
                double t9650 = c*c0*t9595*t9601*t9607*t9635*t9609*t9618*t9628*t9629*(3.2E1/3.0);
                double t9651 = c*c0*t9595*t9601*t9635*t9609*t9618*t9628*t9629*t9647*1.6E1;
                double t9686 = a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9634*t9618*(1.6E1/3.0);
                double t9687 = c*c0*t9597*t9599*t9601*t9625*t9634*t9609*t9618*(8.0/3.0);
                double t9688 = c*c0*t9595*t9601*t9634*t9635*t9609*t9618*t9628*t9629*(6.4E1/3.0);
                double t9652 = t9650+t9651+t9648+t9649-t9686-t9687-t9688;
                double t9653 = t9622*t9627*4.0;
                double t9654 = c*c0*t9593*t9601*t9607*t9609*t9618*(8.0/3.0);
                double t9655 = t9653+t9654+6.0;
                double t9656 = a5*c0*t9592*t9601*t9624*t9607*t9644*t9618*t9645*(2.0/3.0);
                double t9657 = c*c0*t9593*t9601*t9640*t9607*t9644*t9609*t9618*t9645*(2.0/3.0);
                double t9658 = c*c0*gamma_aa*t9597*t9599*t9601*t9607*t9625*t9644*t9609*t9618*t9645*(8.0/3.0);
                double t9723 = c*c0*gamma_aa*t9597*t9599*t9601*t9625*t9634*t9644*t9609*t9618*t9645*(8.0/3.0);
                double t9659 = t9641+t9642-t9643+t9656+t9657+t9658-t9723;
                double t9660 = c*c0*t9593*t9601*t9607*t9644*t9609*t9618*t9645*(2.0/3.0);
                double t9661 = t9660+1.0;
                double t9662 = t9622*t9632*t9626*3.0;
                double t9663 = a5*c0*t9592*t9601*t9624*t9607*t9618*4.0;
                double t9664 = c*c0*gamma_aa*t9597*t9599*t9601*t9607*t9625*t9609*t9618*1.6E1;
                double t9667 = gamma_aa*t9596*t9597*t9599*t9607*t9627*1.2E1;
                double t9668 = c*c0*gamma_aa*t9597*t9599*t9601*t9625*t9634*t9609*t9618*1.6E1;
                double t9665 = t9662+t9663+t9664-t9667-t9668;
                double t9666 = 1.0/(t9638*t9638);
                double t9669 = t9622*t9632*t9626*2.0;
                double t9670 = a5*c0*t9592*t9601*t9624*t9607*t9618*(8.0/3.0);
                double t9671 = c*c0*gamma_aa*t9597*t9599*t9601*t9607*t9625*t9609*t9618*(3.2E1/3.0);
                double t9721 = gamma_aa*t9596*t9597*t9599*t9607*t9627*8.0;
                double t9722 = c*c0*gamma_aa*t9597*t9599*t9601*t9625*t9634*t9609*t9618*(3.2E1/3.0);
                double t9672 = t9670+t9671+t9669-t9721-t9722;
                double t9673 = a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9618*(1.6E1/3.0);
                double t9674 = c*c0*t9597*t9599*t9601*t9625*t9609*t9618*(8.0/3.0);
                double t9675 = c*c0*t9595*t9601*t9635*t9609*t9618*t9628*t9629*(3.2E1/3.0);
                double t9676 = t9673+t9674+t9675;
                double t9677 = t9626*t9626;
                double t9678 = 1.0/pow(t9623,3.0/2.0);
                double t9679 = 1.0/pow(rho_a,3.2E1/3.0);
                double t9680 = 1.0/t9609;
                double t9681 = 1.0/c0;
                double t9682 = pow(rho_a,1.0/3.0);
                double t9683 = exp(-t9600);
                double t9684 = t9606*t9606;
                double t9685 = t9617*t9617;
                double t9689 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t9690 = c*c;
                double t9691 = 1.0/pow(rho_a,2.0/3.0);
                double t9692 = k1*t9604;
                double t9693 = c*k2*t9593;
                double t9694 = t9692+t9693;
                double t9695 = 1.0/(t9694*t9694);
                double t9713 = t9690*t9691*t9695;
                double t9696 = exp(-t9713);
                double t9697 = t9594*t9595*t9596*t9597;
                double t9698 = pow(t9598,4.0/5.0);
                double t9708 = rab1*t9698;
                double t9699 = exp(-t9708);
                double t9700 = t9699-1.0;
                double t9709 = kab1*t9700;
                double t9701 = kab0-t9709;
                double t9702 = a3*gamma_aa*t9592*t9602*t9603;
                double t9703 = t9702+1.0;
                double t9704 = 1.0/sqrt(t9703);
                double t9705 = a1*gamma_aa*t9592*t9624;
                double t9706 = t9697+t9705+1.0;
                double t9707 = exp(-t9697);
                double t9714 = a1*t9592*t9624;
                double t9715 = gamma_aa*t9594*t9596*t9597*2.0;
                double t9716 = t9714+t9715;
                double t9717 = t9701*t9704*t9707*t9716*1.0E5;
                double t9718 = 1.0/pow(t9703,3.0/2.0);
                double t9719 = a3*t9592*t9602*t9603*t9701*t9706*t9707*t9718*5.0E4;
                double t9720 = gamma_aa*t9594*t9596*t9597*t9701*t9704*t9706*t9707*2.0E5;
                double t9710 = t9720-t9717+t9719;
                double t9711 = c*c0*t9593*(2.0/3.0);
                double t9724 = t9701*t9704*t9706*t9707*1.0E5;
                double t9712 = t9711-t9724;
                double t9725 = dirac(t9712);
                double t9726 = t9644*t9645;
                double t9727 = t9661*t9655*t9639;
                double t9728 = t9726+t9727;
                double t9729 = 1.0/(c*c);
                v_gamma_aa_gamma_aa[Q] += scale * c0*rho_a*t9696*heaviside(c*c0*t9593*(-2.0/3.0)+t9701*t9704*t9706*exp(-t9594*t9595*t9596*t9597)*1.0E5)*(t9655*t9639*(t9650+t9651+t9646+t9648+t9649+gamma_aa*t9596*t9597*t9599*t9640*4.0+a5*t9592*t9602*t9603*t9640*t9680-gamma_aa*t9596*t9597*t9599*t9622*t9640*4.0-c*c0*t9597*t9599*t9601*t9625*t9634*t9609*t9618*(8.0/3.0)-a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9634*t9618*(1.6E1/3.0)+a5*c0*t9592*t9601*t9640*t9624*t9607*t9644*t9618*t9645*(4.0/3.0)+c*c0*t9593*t9601*t9607*t9652*t9644*t9609*t9618*t9645*(2.0/3.0)+c*c0*t9593*t9601*t9607*t9644*t9609*t9618*t9645*t9646*(2.0/3.0)-c*c0*t9595*t9601*t9634*t9635*t9609*t9618*t9628*t9629*(6.4E1/3.0)+c*c0*t9597*t9599*t9601*t9607*t9625*t9644*t9609*t9618*t9645*(8.0/3.0)-c*c0*t9597*t9599*t9601*t9625*t9634*t9644*t9609*t9618*t9645*(8.0/3.0)+a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9607*t9644*t9618*t9645*(1.6E1/3.0)-a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9634*t9644*t9618*t9645*(1.6E1/3.0)+c*c0*t9595*t9601*t9607*t9635*t9644*t9609*t9618*t9645*t9628*t9629*(3.2E1/3.0)-c*c0*t9595*t9601*t9634*t9635*t9644*t9609*t9618*t9645*t9628*t9629*(6.4E1/3.0)+c*c0*t9595*t9601*t9635*t9644*t9609*t9618*t9645*t9628*t9629*t9647*1.6E1+c*c0*gamma_aa*t9597*t9599*t9601*t9640*t9607*t9625*t9644*t9609*t9618*t9645*(1.6E1/3.0)-c*c0*gamma_aa*t9597*t9599*t9601*t9640*t9625*t9634*t9644*t9609*t9618*t9645*(1.6E1/3.0))+t9652*t9644*t9645+t9644*t9645*t9646+t9672*t9639*t9659*2.0+t9661*t9639*(t9622*t9632*t9676*2.0-t9622*t9677*t9678-t9596*t9597*t9599*t9607*t9627*8.0+t9595*t9634*t9627*t9628*t9629*t9679*3.2E1-gamma_aa*t9596*t9597*t9599*t9632*t9607*t9626*8.0+c*c0*t9597*t9599*t9601*t9607*t9625*t9609*t9618*(3.2E1/3.0)-c*c0*t9597*t9599*t9601*t9625*t9634*t9609*t9618*(3.2E1/3.0)+a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9607*t9618*(6.4E1/3.0)-a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9634*t9618*(6.4E1/3.0)+c*c0*t9595*t9601*t9607*t9635*t9609*t9618*t9628*t9629*(1.28E2/3.0)-c*c0*t9595*t9601*t9634*t9635*t9609*t9618*t9628*t9629*(2.56E2/3.0)+c*c0*t9595*t9601*t9635*t9609*t9618*t9628*t9629*t9647*6.4E1)-t9661*t9672*t9665*t9666*2.0-t9655*t9665*t9666*t9659*2.0-t9661*t9655*t9666*(t9622*t9632*t9676*3.0-t9622*t9677*t9678*(3.0/2.0)-t9596*t9597*t9599*t9607*t9627*1.2E1+t9595*t9634*t9627*t9628*t9629*t9679*4.8E1-gamma_aa*t9596*t9597*t9599*t9632*t9607*t9626*1.2E1+c*c0*t9597*t9599*t9601*t9607*t9625*t9609*t9618*1.6E1-c*c0*t9597*t9599*t9601*t9625*t9634*t9609*t9618*1.6E1+a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9607*t9618*3.2E1-a5*c0*gamma_aa*t9592*t9597*t9599*t9601*t9633*t9634*t9618*3.2E1+c*c0*t9595*t9601*t9607*t9635*t9609*t9618*t9628*t9629*6.4E1-c*c0*t9595*t9601*t9634*t9635*t9609*t9618*t9628*t9629*1.28E2+c*c0*t9595*t9601*t9635*t9609*t9618*t9628*t9629*t9647*9.6E1)+t9661*t9655*1.0/(t9638*t9638*t9638)*(t9665*t9665)*2.0+t9602*t9652*t9680*t9681*t9682*t9683*t9684*t9685*(3.0/2.0)+t9602*t9680*t9681*t9646*t9682*t9683*t9684*t9685*(3.0/2.0)-a5*1.0/(rho_a*rho_a)*t9592*t9640*1.0/(t9609*t9609)*t9681*t9683*t9684*t9685*t9729*(3.0/2.0)+gamma_aa*t9597*t9599*t9602*t9640*t9606*t9680*t9681*t9683*t9685*t9689*6.0-gamma_aa*t9597*t9599*t9602*t9640*t9680*t9681*t9683*t9684*t9685*t9689*6.0)*(1.0/2.0)-c0*rho_a*t9696*t9710*t9725*(t9640*t9644*t9645+t9661*t9672*t9639+t9655*t9639*t9659-t9661*t9655*t9665*t9666+t9602*t9640*t9680*t9681*t9682*t9683*t9684*t9685*(3.0/2.0))+c0*rho_a*t9696*t9725*t9728*(t9594*t9596*t9597*t9701*t9704*t9707*2.0E5-t9594*t9596*t9597*t9701*t9704*t9706*t9707*2.0E5+(a3*a3)*1.0/pow(rho_a,1.4E1/3.0)*t9597*t9701*1.0/pow(t9703,5.0/2.0)*t9706*t9707*t9729*7.5E4+(t9594*t9594)*t9595*t9629*t9679*t9701*t9704*t9706*t9707*4.0E5-a3*t9592*t9602*t9603*t9701*t9707*t9716*t9718*1.0E5-gamma_aa*t9594*t9596*t9597*t9701*t9704*t9707*t9716*4.0E5+a3*gamma_aa*1.0/pow(rho_a,2.3E1/3.0)*t9592*t9594*t9597*t9602*t9701*t9706*t9707*t9718*2.0E5)*(1.0/2.0)-c0*rho_a*t9696*(t9710*t9710)*t9728*dirac(t9712,1.0)*(1.0/2.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t9378 = tspi_m13*tspi_m13;
                double t9379 = 1.0/pow(rho_a,1.0/3.0);
                double t9380 = a2*a2;
                double t9381 = gamma_aa*gamma_aa;
                double t9382 = 1.0/pow(rho_a,1.6E1/3.0);
                double t9383 = t9378*t9378;
                double t9384 = c*t9379;
                double t9385 = a4*a4;
                double t9386 = 1.0/c;
                double t9387 = 1.0/pow(rho_a,7.0/3.0);
                double t9388 = sqrt(t9384);
                double t9389 = t9381*t9382*t9383*t9385*2.0;
                double t9390 = exp(t9389);
                double t9391 = t9381*t9382*t9383*t9385;
                double t9392 = t9391+1.0;
                double t9393 = 1.0/(t9392*t9392);
                double t9394 = a5*gamma_aa*t9386*t9378*t9387;
                double t9395 = t9394+1.0;
                double t9407 = raa2*t9388;
                double t9396 = exp(-t9407);
                double t9397 = t9396-1.0;
                double t9398 = kaa2*t9397;
                double t9399 = pow(t9384,2.0/5.0);
                double t9408 = raa1*t9399;
                double t9400 = exp(-t9408);
                double t9401 = t9400-1.0;
                double t9402 = kaa1*t9401;
                double t9403 = -kaa0+t9398+t9402;
                double t9404 = 1.0/(t9403*t9403);
                double t9405 = c*c0*t9390*t9393*t9395*t9379*t9404*(2.0/3.0);
                double t9406 = 1.0/pow(rho_a,8.0/3.0);
                double t9409 = 1.0/pow(rho_a,1.7E1/3.0);
                double t9410;
                double t9411;
                if (t9405 > expei_cutoff) {
                    t9410 = 1.0;
                    t9411 = expei(t9405);
                } else {
                    t9410 = exp(t9405);
                    t9411 = Ei(-t9405);
                }
                double t9412 = 1.0/t9392;
                double t9413 = c*c0*t9390*t9395*t9379*t9404*(2.0/3.0);
                double t9414 = sqrt(t9413);
                double t9415 = 1.0/(t9392*t9392*t9392);
                double t9416 = t9412*t9414*6.0;
                double t9417 = c*c0*t9390*t9393*t9395*t9379*t9404*4.0;
                double t9418 = t9416+t9417+3.0;
                double t9419 = 1.0/t9418;
                double t9420 = a5*c0*t9390*t9393*t9378*t9404*t9406*(2.0/3.0);
                double t9421 = c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9404*t9409*(8.0/3.0);
                double t9432 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9409*(8.0/3.0);
                double t9422 = t9420+t9421-t9432;
                double t9423 = c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9404*(2.0/3.0);
                double t9424 = t9423+1.0;
                double t9425 = t9412*t9414*4.0;
                double t9426 = c*c0*t9390*t9393*t9395*t9379*t9404*(8.0/3.0);
                double t9427 = t9425+t9426+6.0;
                double t9428 = a5*c0*t9390*t9378*t9404*t9406*(2.0/3.0);
                double t9429 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9409*(8.0/3.0);
                double t9430 = t9428+t9429;
                double t9431 = 1.0/sqrt(t9413);
                double t9433 = t9380*t9381*t9382*t9383;
                double t9434 = pow(t9384,4.0/5.0);
                double t9542 = rab1*t9434;
                double t9435 = exp(-t9542);
                double t9436 = t9435-1.0;
                double t9543 = kab1*t9436;
                double t9437 = kab0-t9543;
                double t9438 = a3*gamma_aa*t9386*t9378*t9387;
                double t9439 = t9438+1.0;
                double t9440 = 1.0/sqrt(t9439);
                double t9441 = a1*gamma_aa*t9378*t9406;
                double t9442 = t9441+t9433+1.0;
                double t9443 = c*c;
                double t9444 = 1.0/pow(rho_a,2.0/3.0);
                double t9445 = k1*t9388;
                double t9446 = c*k2*t9379;
                double t9447 = t9445+t9446;
                double t9448 = 1.0/(t9447*t9447);
                double t9545 = t9443*t9444*t9448;
                double t9449 = exp(-t9545);
                double t9450 = 1.0/pow(rho_a,4.0/3.0);
                double t9451 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t9452 = 1.0/pow(rho_a,2.0E1/3.0);
                double t9453 = t9385*t9385;
                double t9454 = 1.0/pow(rho_a,1.2E1);
                double t9455 = t9383*t9383;
                double t9456 = 1.0/sqrt(t9384);
                double t9457 = c*kaa2*raa2*t9396*t9450*t9456*(1.0/6.0);
                double t9458 = 1.0/pow(t9384,3.0/5.0);
                double t9459 = c*kaa1*raa1*t9400*t9450*t9458*(2.0/1.5E1);
                double t9460 = t9457+t9459;
                double t9461 = 1.0/(t9403*t9403*t9403);
                double t9462 = t9412*t9430*t9431*2.0;
                double t9463 = a5*c0*t9390*t9393*t9378*t9404*t9406*(8.0/3.0);
                double t9464 = c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9404*t9409*(3.2E1/3.0);
                double t9506 = gamma_aa*t9382*t9383*t9393*t9385*t9414*8.0;
                double t9507 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9409*(3.2E1/3.0);
                double t9465 = t9462+t9463+t9464-t9506-t9507;
                double t9466 = 1.0/pow(rho_a,1.1E1/3.0);
                double t9467 = c*c0*t9390*t9393*t9395*t9404*t9450*(2.0/9.0);
                double t9468 = a5*c0*gamma_aa*t9390*t9393*t9378*t9404*t9466*(1.4E1/9.0);
                double t9469 = c*c0*t9390*t9393*t9395*t9379*t9460*t9461*(4.0/3.0);
                double t9470 = c*c0*t9381*t9390*t9383*t9393*t9385*t9395*t9404*t9452*(6.4E1/9.0);
                double t9471 = a5*c0*t9390*t9393*t9378*t9410*t9411*t9404*t9406*(2.0/3.0);
                double t9472 = c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9404*t9422*(2.0/3.0);
                double t9473 = c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9410*t9411*t9404*t9409*(8.0/3.0);
                double t9486 = c*c0*t9381*t9390*t9383*t9385*t9395*t9404*t9415*t9452*(6.4E1/9.0);
                double t9474 = t9470+t9467+t9468-t9486+t9469;
                double t9475 = 1.0/pow(rho_a,1.9E1/3.0);
                double t9476 = 1.0/t9395;
                double t9477 = a5*c0*t9390*t9393*t9378*t9404*t9466*(1.6E1/9.0);
                double t9478 = a5*c0*t9390*t9393*t9378*t9406*t9460*t9461*(4.0/3.0);
                double t9479 = a5*c0*t9381*t9390*t9383*t9393*t9385*t9378*t9404*t9451*(4.0E1/3.0);
                double t9480 = c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9404*t9452*(1.36E2/9.0);
                double t9481 = c*c0*gamma_aa*t9381*t9390*t9393*t9395*t9404*t9453*t9454*t9455*(2.56E2/9.0);
                double t9482 = 1.0/(t9392*t9392*t9392*t9392);
                double t9483 = c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9453*t9454*t9455*t9482*(1.28E2/3.0);
                double t9484 = c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9460*t9461*t9409*(1.6E1/3.0);
                double t9487 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9452*(1.36E2/9.0);
                double t9488 = c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9415*t9453*t9454*t9455*(5.12E2/9.0);
                double t9489 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9415*t9460*t9461*t9409*(1.6E1/3.0);
                double t9538 = a5*c0*t9381*t9390*t9383*t9385*t9378*t9404*t9415*t9451*(4.0E1/3.0);
                double t9485 = t9480+t9481+t9483+t9484+t9477+t9478-t9487+t9479-t9488-t9489-t9538;
                double t9490 = c*c0*t9390*t9395*t9404*t9450*(2.0/9.0);
                double t9491 = a5*c0*gamma_aa*t9390*t9378*t9404*t9466*(1.4E1/9.0);
                double t9492 = c*c0*t9390*t9395*t9379*t9460*t9461*(4.0/3.0);
                double t9493 = c*c0*t9381*t9390*t9383*t9385*t9395*t9404*t9452*(6.4E1/9.0);
                double t9494 = t9490+t9491+t9492+t9493;
                double t9495 = 1.0/(t9418*t9418);
                double t9561 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9410*t9411*t9404*t9415*t9409*(8.0/3.0);
                double t9496 = t9420+t9421-t9432+t9471+t9472+t9473-t9561;
                double t9497 = a5*c0*t9390*t9378*t9404*t9466*(1.6E1/9.0);
                double t9498 = a5*c0*t9390*t9378*t9406*t9460*t9461*(4.0/3.0);
                double t9499 = a5*c0*t9381*t9390*t9383*t9385*t9378*t9404*t9451*(4.0E1/3.0);
                double t9500 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9452*(1.36E2/9.0);
                double t9501 = c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9453*t9454*t9455*(2.56E2/9.0);
                double t9502 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9460*t9461*t9409*(1.6E1/3.0);
                double t9503 = t9497+t9498+t9499+t9500+t9501+t9502;
                double t9504 = 1.0/pow(t9413,3.0/2.0);
                double t9505 = 1.0/pow(rho_a,3.5E1/3.0);
                double t9508 = t9412*t9431*t9494*3.0;
                double t9509 = c*c0*t9390*t9393*t9395*t9404*t9450*(4.0/3.0);
                double t9510 = a5*c0*gamma_aa*t9390*t9393*t9378*t9404*t9466*(2.8E1/3.0);
                double t9511 = c*c0*t9390*t9393*t9395*t9379*t9460*t9461*8.0;
                double t9512 = c*c0*t9381*t9390*t9383*t9393*t9385*t9395*t9404*t9452*(1.28E2/3.0);
                double t9531 = t9381*t9383*t9393*t9385*t9414*t9475*3.2E1;
                double t9532 = c*c0*t9381*t9390*t9383*t9385*t9395*t9404*t9415*t9452*(1.28E2/3.0);
                double t9513 = t9510+t9511+t9512-t9531-t9532+t9508+t9509;
                double t9514 = t9412*t9430*t9431*3.0;
                double t9515 = a5*c0*t9390*t9393*t9378*t9404*t9406*4.0;
                double t9516 = c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9404*t9409*1.6E1;
                double t9524 = gamma_aa*t9382*t9383*t9393*t9385*t9414*1.2E1;
                double t9525 = c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9409*1.6E1;
                double t9517 = t9514+t9515-t9524+t9516-t9525;
                double t9518 = t9412*t9431*t9494*2.0;
                double t9519 = c*c0*t9390*t9393*t9395*t9404*t9450*(8.0/9.0);
                double t9520 = a5*c0*gamma_aa*t9390*t9393*t9378*t9404*t9466*(5.6E1/9.0);
                double t9521 = c*c0*t9390*t9393*t9395*t9379*t9460*t9461*(1.6E1/3.0);
                double t9522 = c*c0*t9381*t9390*t9383*t9393*t9385*t9395*t9404*t9452*(2.56E2/9.0);
                double t9556 = t9381*t9383*t9393*t9385*t9414*t9475*(6.4E1/3.0);
                double t9557 = c*c0*t9381*t9390*t9383*t9385*t9395*t9404*t9415*t9452*(2.56E2/9.0);
                double t9523 = t9520+t9521+t9522+t9518+t9519-t9556-t9557;
                double t9526 = c*c0*t9390*t9393*t9395*t9410*t9411*t9404*t9450*(2.0/9.0);
                double t9527 = c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9460*t9461*(4.0/3.0);
                double t9528 = c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9404*t9474*(2.0/3.0);
                double t9529 = a5*c0*gamma_aa*t9390*t9393*t9378*t9410*t9411*t9404*t9466*(1.4E1/9.0);
                double t9530 = c*c0*t9381*t9390*t9383*t9393*t9385*t9395*t9410*t9411*t9404*t9452*(6.4E1/9.0);
                double t9533 = 1.0/c0;
                double t9534 = pow(rho_a,1.0/3.0);
                double t9535 = exp(-t9389);
                double t9536 = t9392*t9392;
                double t9537 = t9403*t9403;
                double t9539 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t9558 = c*c0*t9381*t9390*t9383*t9385*t9395*t9410*t9411*t9404*t9415*t9452*(6.4E1/9.0);
                double t9540 = t9470+t9467+t9468-t9486+t9469+t9530+t9526+t9527+t9528+t9529-t9558;
                double t9541 = exp(-t9433);
                double t9544 = t9440*t9442*t9437*t9541*1.0E5;
                double t9546 = c*c0*t9379*(2.0/3.0);
                double t9547 = -t9544+t9546;
                double t9548 = dirac(t9547);
                double t9549 = a1*t9378*t9406;
                double t9550 = gamma_aa*t9380*t9382*t9383*2.0;
                double t9551 = t9550+t9549;
                double t9552 = 1.0/pow(t9439,3.0/2.0);
                double t9553 = a3*t9386*t9378*t9387*t9442*t9437*t9541*t9552*5.0E4;
                double t9554 = gamma_aa*t9380*t9382*t9383*t9440*t9442*t9437*t9541*2.0E5;
                double t9581 = t9440*t9437*t9541*t9551*1.0E5;
                double t9555 = t9553+t9554-t9581;
                double t9559 = t9410*t9411*t9422;
                double t9560 = t9424*t9419*t9465;
                double t9562 = t9386*t9422*t9476*t9533*t9534*t9535*t9536*t9537*(3.0/2.0);
                double t9563 = t9410*t9411;
                double t9564 = t9424*t9427*t9419;
                double t9565 = t9563+t9564;
                double t9566 = 1.0/pow(rho_a,1.0E1/3.0);
                double t9567 = t9380*t9381*t9383*t9475*(1.6E1/3.0);
                double t9568 = a1*gamma_aa*t9378*t9466*(8.0/3.0);
                double t9569 = t9567+t9568;
                double t9570 = 1.0/(c*c);
                double t9571 = 1.0/pow(t9384,1.0/5.0);
                double t9572 = t9427*t9419*t9496;
                double t9573 = t9560+t9562+t9572+t9559-t9424*t9427*t9495*t9517;
                double t9574 = 1.0/pow(rho_a,5.0/3.0);
                double t9575 = t9443*t9448*t9574*(2.0/3.0);
                double t9576 = 1.0/(t9447*t9447*t9447);
                double t9577 = c*k2*t9450*(1.0/3.0);
                double t9578 = c*k1*t9450*t9456*(1.0/6.0);
                double t9579 = t9577+t9578;
                double t9580 = t9575-t9443*t9444*t9576*t9579*2.0;
                double t9582 = c*c0*t9450*(2.0/9.0);
                double t9583 = t9380*t9381*t9383*t9440*t9442*t9437*t9475*t9541*(1.6E6/3.0);
                double t9584 = a3*gamma_aa*t9386*t9378*t9442*t9437*t9541*t9552*t9566*(3.5E5/3.0);
                double t9585 = t9582+t9583+t9584-t9440*t9437*t9541*t9569*1.0E5-c*kab1*rab1*t9440*t9450*t9442*t9435*t9541*t9571*(8.0E4/3.0);
                v_rho_a_gamma_aa[Q] += scale * c0*t9449*heaviside(c*c0*t9379*(-2.0/3.0)+t9440*t9442*t9437*exp(-t9380*t9381*t9382*t9383)*1.0E5)*(t9560+t9562+t9559+t9427*t9419*(t9420+t9421+t9471+t9472+t9473-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9409*(8.0/3.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9410*t9411*t9404*t9415*t9409*(8.0/3.0))-t9424*t9427*t9495*t9517)*(1.0/2.0)-c0*t9449*t9555*t9565*t9548*(1.0/2.0)-c0*rho_a*t9449*heaviside(t9544-c*c0*t9379*(2.0/3.0))*(t9424*t9419*(t9412*t9431*t9503*2.0-t9412*t9430*t9494*t9504-gamma_aa*t9383*t9393*t9385*t9414*t9475*(1.28E2/3.0)+a5*c0*t9390*t9393*t9378*t9404*t9466*(6.4E1/9.0)-gamma_aa*t9382*t9383*t9393*t9385*t9431*t9494*4.0+gamma_aa*t9381*t9414*t9415*t9453*t9455*t9505*(2.56E2/3.0)-t9381*t9383*t9393*t9385*t9430*t9431*t9475*(3.2E1/3.0)+a5*c0*t9390*t9393*t9378*t9406*t9460*t9461*(1.6E1/3.0)+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9404*t9452*(5.44E2/9.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9452*(5.44E2/9.0)+a5*c0*t9381*t9390*t9383*t9393*t9385*t9378*t9404*t9451*(1.6E2/3.0)-a5*c0*t9381*t9390*t9383*t9385*t9378*t9404*t9415*t9451*(1.6E2/3.0)+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9460*t9461*t9409*(6.4E1/3.0)+c*c0*gamma_aa*t9381*t9390*t9393*t9395*t9404*t9453*t9454*t9455*(1.024E3/9.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9415*t9460*t9461*t9409*(6.4E1/3.0)-c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9415*t9453*t9454*t9455*(2.048E3/9.0)+c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9453*t9454*t9455*t9482*(5.12E2/3.0))+t9410*t9411*t9485+t9419*t9465*t9540+t9419*t9496*t9523+t9427*t9419*(t9480+t9481+t9483+t9484+t9477+t9478-t9487+t9479-t9488-t9489-t9538+t9422*t9474+(t9422*(1.0/3.0))/rho_a+(t9422*t9460*2.0)/t9403+t9381*t9383*t9385*t9422*t9475*(3.2E1/3.0)-t9381*t9383*t9385*t9412*t9422*t9475*(3.2E1/3.0)+a5*gamma_aa*t9386*t9378*t9422*t9476*t9566*(7.0/3.0)+a5*c0*t9390*t9393*t9378*t9410*t9411*t9404*t9466*(1.6E1/9.0)+a5*c0*t9390*t9393*t9378*t9410*t9411*t9406*t9460*t9461*(4.0/3.0)+a5*c0*t9390*t9393*t9378*t9410*t9411*t9404*t9406*t9474*(2.0/3.0)+c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9404*t9485*(2.0/3.0)+c*c0*t9390*t9393*t9395*t9410*t9411*t9404*t9422*t9450*(2.0/9.0)+a5*c0*gamma_aa*t9390*t9393*t9378*t9410*t9411*t9404*t9422*t9466*(1.4E1/9.0)+c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9422*t9460*t9461*(4.0/3.0)+c*c0*t9390*t9393*t9395*t9379*t9410*t9411*t9404*t9422*t9474*(2.0/3.0)+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9410*t9411*t9404*t9452*(1.36E2/9.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9410*t9411*t9404*t9415*t9452*(1.36E2/9.0)+a5*c0*t9381*t9390*t9383*t9393*t9385*t9378*t9410*t9411*t9404*t9451*(4.0E1/3.0)-a5*c0*t9381*t9390*t9383*t9385*t9378*t9410*t9411*t9404*t9415*t9451*(4.0E1/3.0)+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9410*t9411*t9460*t9461*t9409*(1.6E1/3.0)+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9410*t9411*t9404*t9409*t9474*(8.0/3.0)+c*c0*gamma_aa*t9381*t9390*t9393*t9395*t9410*t9411*t9404*t9453*t9454*t9455*(2.56E2/9.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9410*t9411*t9415*t9460*t9461*t9409*(1.6E1/3.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9410*t9411*t9404*t9415*t9409*t9474*(8.0/3.0)-c*c0*gamma_aa*t9381*t9390*t9395*t9410*t9411*t9404*t9415*t9453*t9454*t9455*(5.12E2/9.0)+c*c0*gamma_aa*t9381*t9390*t9395*t9410*t9411*t9404*t9453*t9454*t9455*t9482*(1.28E2/3.0)+c*c0*t9381*t9390*t9383*t9393*t9385*t9395*t9410*t9411*t9404*t9422*t9452*(6.4E1/9.0)-c*c0*t9381*t9390*t9383*t9385*t9395*t9410*t9411*t9404*t9422*t9415*t9452*(6.4E1/9.0))+t9410*t9411*t9422*t9474-t9424*t9465*t9495*t9513-t9427*t9495*t9496*t9513-t9424*t9495*t9523*t9517-t9427*t9495*t9540*t9517-t9424*t9427*t9495*(t9412*t9431*t9503*3.0-t9412*t9430*t9494*t9504*(3.0/2.0)-gamma_aa*t9383*t9393*t9385*t9414*t9475*6.4E1+a5*c0*t9390*t9393*t9378*t9404*t9466*(3.2E1/3.0)-gamma_aa*t9382*t9383*t9393*t9385*t9431*t9494*6.0+gamma_aa*t9381*t9414*t9415*t9453*t9455*t9505*1.28E2-t9381*t9383*t9393*t9385*t9430*t9431*t9475*1.6E1+a5*c0*t9390*t9393*t9378*t9406*t9460*t9461*8.0+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9404*t9452*(2.72E2/3.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9404*t9415*t9452*(2.72E2/3.0)+a5*c0*t9381*t9390*t9383*t9393*t9385*t9378*t9404*t9451*8.0E1-a5*c0*t9381*t9390*t9383*t9385*t9378*t9404*t9415*t9451*8.0E1+c*c0*gamma_aa*t9390*t9383*t9393*t9385*t9395*t9460*t9461*t9409*3.2E1+c*c0*gamma_aa*t9381*t9390*t9393*t9395*t9404*t9453*t9454*t9455*(5.12E2/3.0)-c*c0*gamma_aa*t9390*t9383*t9385*t9395*t9415*t9460*t9461*t9409*3.2E1-c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9415*t9453*t9454*t9455*(1.024E3/3.0)+c*c0*gamma_aa*t9381*t9390*t9395*t9404*t9453*t9454*t9455*t9482*2.56E2)+t9424*1.0/(t9418*t9418*t9418)*t9427*t9513*t9517*2.0+t9386*t9476*t9485*t9533*t9534*t9535*t9536*t9537*(3.0/2.0)+t9386*t9422*t9474*t9476*t9533*t9534*t9535*t9536*t9537*(3.0/2.0)-a5*1.0/(rho_a*rho_a)*1.0/(t9395*t9395)*t9378*t9474*t9533*t9570*t9535*t9536*t9537*(3.0/2.0)+gamma_aa*t9383*t9392*t9385*t9386*t9474*t9476*t9533*t9535*t9537*t9539*6.0-gamma_aa*t9383*t9385*t9386*t9474*t9476*t9533*t9535*t9536*t9537*t9539*6.0)*(1.0/2.0)+c0*rho_a*t9449*t9573*t9548*t9585*(1.0/2.0)+c0*rho_a*t9449*t9565*t9548*(t9440*t9437*t9541*(a1*t9378*t9466*(8.0/3.0)+gamma_aa*t9380*t9383*t9475*(3.2E1/3.0))*-1.0E5+t9380*t9381*t9383*t9440*t9437*t9475*t9541*t9551*(1.6E6/3.0)+a3*t9386*t9378*t9387*t9437*t9541*t9552*t9569*5.0E4+a3*t9386*t9378*t9442*t9437*t9541*t9552*t9566*(3.5E5/3.0)+gamma_aa*t9380*t9383*t9440*t9442*t9437*t9475*t9541*(3.2E6/3.0)+gamma_aa*t9380*t9382*t9383*t9440*t9437*t9541*t9569*2.0E5-(a3*a3)*gamma_aa*t9383*t9442*t9409*t9437*1.0/pow(t9439,5.0/2.0)*t9541*t9570*1.75E5+a3*gamma_aa*t9386*t9378*t9437*t9541*t9551*t9552*t9566*(3.5E5/3.0)-c*kab1*rab1*t9440*t9450*t9435*t9541*t9551*t9571*(8.0E4/3.0)-gamma_aa*(t9380*t9380)*t9381*t9440*t9442*t9437*t9455*t9505*t9541*(3.2E6/3.0)+a3*kab1*rab1*t9378*t9442*t9435*t9466*t9541*t9552*t9571*(4.0E4/3.0)-a3*1.0/pow(rho_a,2.6E1/3.0)*t9380*t9381*t9383*t9386*t9378*t9442*t9437*t9541*t9552*5.0E5+c*gamma_aa*kab1*rab1*t9380*t9383*t9440*t9442*t9452*t9435*t9541*t9571*(1.6E5/3.0))*(1.0/2.0)+c0*rho_a*t9449*t9555*t9548*(t9410*t9411*t9474+t9424*t9419*t9523+t9427*t9419*t9540-t9424*t9427*t9495*t9513+t9386*t9474*t9476*t9533*t9534*t9535*t9536*t9537*(3.0/2.0))*(1.0/2.0)+c0*rho_a*t9449*t9580*t9573*heaviside(t9544-t9546)*(1.0/2.0)-c0*rho_a*t9449*t9580*t9555*t9565*t9548*(1.0/2.0)+c0*rho_a*t9449*t9555*t9565*t9585*dirac(t9547,1.0)*(1.0/2.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t5561 = tspi_m13*tspi_m13;
                double t5562 = 1.0/pow(rho_a,1.0/3.0);
                double t5563 = a2*a2;
                double t5564 = gamma_aa*gamma_aa;
                double t5565 = 1.0/pow(rho_a,1.6E1/3.0);
                double t5566 = t5561*t5561;
                double t5567 = c*t5562;
                double t5568 = pow(t5567,4.0/5.0);
                double t5582 = rab1*t5568;
                double t5569 = exp(-t5582);
                double t5570 = t5569-1.0;
                double t5583 = kab1*t5570;
                double t5571 = kab0-t5583;
                double t5572 = 1.0/c;
                double t5573 = 1.0/pow(rho_a,7.0/3.0);
                double t5574 = a3*gamma_aa*t5561*t5572*t5573;
                double t5575 = t5574+1.0;
                double t5576 = t5563*t5564*t5565*t5566;
                double t5577 = 1.0/pow(rho_a,8.0/3.0);
                double t5578 = a1*gamma_aa*t5561*t5577;
                double t5579 = t5576+t5578+1.0;
                double t5580 = t5563*t5564*t5565*t5566*2.0;
                double t5581 = exp(t5580);
                double t5584 = 1.0/(t5571*t5571);
                double t5585 = 1.0/(t5579*t5579);
                double t5586 = c*c0*t5562*t5581*t5575*t5584*t5585*(2.0/3.0);
                double t5587;
                double t5588;
                if (t5586 > expei_cutoff) {
                    t5587 = 1.0;
                    t5588 = expei(t5586);
                } else {
                    t5587 = exp(t5586);
                    t5588 = Ei(-t5586);
                }
                double t5589 = sqrt(t5586);
                double t5590 = 1.0/pow(rho_b,1.0/3.0);
                double t5591 = gamma_bb*gamma_bb;
                double t5592 = 1.0/pow(rho_b,1.6E1/3.0);
                double t5593 = c*t5590;
                double t5594 = a4*a4;
                double t5595 = 1.0/pow(rho_b,7.0/3.0);
                double t5596 = sqrt(t5593);
                double t5597 = t5591*t5592*t5566*t5594*2.0;
                double t5598 = exp(t5597);
                double t5599 = t5591*t5592*t5566*t5594;
                double t5600 = t5599+1.0;
                double t5601 = 1.0/(t5600*t5600);
                double t5602 = a5*gamma_bb*t5561*t5572*t5595;
                double t5603 = t5602+1.0;
                double t5614 = raa2*t5596;
                double t5604 = exp(-t5614);
                double t5605 = t5604-1.0;
                double t5606 = kaa2*t5605;
                double t5607 = pow(t5593,2.0/5.0);
                double t5615 = raa1*t5607;
                double t5608 = exp(-t5615);
                double t5609 = t5608-1.0;
                double t5610 = kaa1*t5609;
                double t5611 = -kaa0+t5610+t5606;
                double t5612 = 1.0/(t5611*t5611);
                double t5613 = c*c0*t5590*t5598*t5601*t5603*t5612*(2.0/3.0);
                double t5616;
                double t5617;
                if (t5613 > expei_cutoff) {
                    t5616 = 1.0;
                    t5617 = expei(t5613);
                } else {
                    t5616 = exp(t5613);
                    t5617 = Ei(-t5613);
                }
                double t5618 = 1.0/t5600;
                double t5619 = c*c0*t5590*t5598*t5603*t5612*(2.0/3.0);
                double t5620 = sqrt(t5619);
                double t5621 = t5563*t5591*t5592*t5566;
                double t5622 = pow(t5593,4.0/5.0);
                double t5632 = rab1*t5622;
                double t5623 = exp(-t5632);
                double t5624 = t5623-1.0;
                double t5633 = kab1*t5624;
                double t5625 = kab0-t5633;
                double t5626 = a3*gamma_bb*t5561*t5572*t5595;
                double t5627 = t5626+1.0;
                double t5628 = 1.0/sqrt(t5627);
                double t5629 = 1.0/pow(rho_b,8.0/3.0);
                double t5630 = a1*gamma_bb*t5561*t5629;
                double t5631 = t5621+t5630+1.0;
                double t5634 = t5563*t5591*t5592*t5566*2.0;
                double t5635 = exp(t5634);
                double t5636 = 1.0/(t5625*t5625);
                double t5637 = 1.0/(t5631*t5631);
                double t5638 = c*c0*t5590*t5635*t5627*t5636*t5637*(2.0/3.0);
                double t5639;
                double t5640;
                if (t5638 > expei_cutoff) {
                    t5639 = 1.0;
                    t5640 = expei(t5638);
                } else {
                    t5639 = exp(t5638);
                    t5640 = Ei(-t5638);
                }
                double t5641 = sqrt(t5638);
                double t5642 = 1.0/sqrt(t5575);
                double t5643 = c*c;
                double t5644 = sqrt(t5567);
                double t5645 = t5564*t5565*t5566*t5594*2.0;
                double t5646 = exp(t5645);
                double t5647 = t5564*t5565*t5566*t5594;
                double t5648 = t5647+1.0;
                double t5649 = 1.0/(t5648*t5648);
                double t5650 = a5*gamma_aa*t5561*t5572*t5573;
                double t5651 = t5650+1.0;
                double t5662 = raa2*t5644;
                double t5652 = exp(-t5662);
                double t5653 = t5652-1.0;
                double t5654 = kaa2*t5653;
                double t5655 = pow(t5567,2.0/5.0);
                double t5663 = raa1*t5655;
                double t5656 = exp(-t5663);
                double t5657 = t5656-1.0;
                double t5658 = kaa1*t5657;
                double t5659 = -kaa0+t5654+t5658;
                double t5660 = 1.0/(t5659*t5659);
                double t5661 = c*c0*t5562*t5651*t5660*t5646*t5649*(2.0/3.0);
                double t5664;
                double t5665;
                if (t5661 > expei_cutoff) {
                    t5664 = 1.0;
                    t5665 = expei(t5661);
                } else {
                    t5664 = exp(t5661);
                    t5665 = Ei(-t5661);
                }
                double t5666 = 1.0/t5648;
                double t5667 = c*c0*t5562*t5651*t5660*t5646*(2.0/3.0);
                double t5668 = sqrt(t5667);
                v[Q] += scale * rho_b*(c0*heaviside(c*c0*t5562*(-2.0/3.0)+t5571*t5579*t5642*exp(-t5563*t5564*t5565*t5566)*1.0E5)*(t5587*t5588+((c*c0*t5562*t5581*t5575*t5584*t5585*t5587*t5588*(2.0/3.0)+1.0)*(t5589*4.0+c*c0*t5562*t5581*t5575*t5584*t5585*(8.0/3.0)+6.0))/(t5589*6.0+c*c0*t5562*t5581*t5575*t5584*t5585*4.0+3.0))*(1.0/2.0)+c0*exp(-1.0/pow(rho_b,2.0/3.0)*t5643*1.0/pow(k1*t5596+c*k2*t5590,2.0))*heaviside(c*c0*t5590*(-2.0/3.0)+t5631*t5625*t5628*exp(-t5563*t5591*t5592*t5566)*1.0E5)*(t5616*t5617+((c*c0*t5590*t5598*t5601*t5603*t5612*t5616*t5617*(2.0/3.0)+1.0)*(t5620*t5618*4.0+c*c0*t5590*t5598*t5601*t5603*t5612*(8.0/3.0)+6.0))/(t5620*t5618*6.0+c*c0*t5590*t5598*t5601*t5603*t5612*4.0+3.0))*(1.0/2.0))+rho_a*(c0*heaviside(c*c0*t5590*(-2.0/3.0)+t5631*t5625*t5628*exp(-t5621)*1.0E5)*(t5640*t5639+((c*c0*t5590*t5640*t5635*t5627*t5636*t5637*t5639*(2.0/3.0)+1.0)*(t5641*4.0+c*c0*t5590*t5635*t5627*t5636*t5637*(8.0/3.0)+6.0))/(t5641*6.0+c*c0*t5590*t5635*t5627*t5636*t5637*4.0+3.0))*(1.0/2.0)+c0*heaviside(c*c0*t5562*(-2.0/3.0)+t5571*t5579*t5642*exp(-t5576)*1.0E5)*exp(-1.0/pow(rho_a,2.0/3.0)*t5643*1.0/pow(k1*t5644+c*k2*t5562,2.0))*(t5664*t5665+((c*c0*t5562*t5651*t5660*t5646*t5664*t5665*t5649*(2.0/3.0)+1.0)*(t5666*t5668*4.0+c*c0*t5562*t5651*t5660*t5646*t5649*(8.0/3.0)+6.0))/(t5666*t5668*6.0+c*c0*t5562*t5651*t5660*t5646*t5649*4.0+3.0))*(1.0/2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t5670 = tspi_m13*tspi_m13;
                double t5671 = 1.0/pow(rho_a,1.0/3.0);
                double t5672 = a2*a2;
                double t5673 = gamma_aa*gamma_aa;
                double t5674 = 1.0/pow(rho_a,1.6E1/3.0);
                double t5675 = t5670*t5670;
                double t5676 = c*t5671;
                double t5677 = a4*a4;
                double t5678 = t5673*t5674*t5675*t5677*2.0;
                double t5679 = exp(t5678);
                double t5680 = 1.0/c;
                double t5681 = 1.0/pow(rho_a,7.0/3.0);
                double t5682 = sqrt(t5676);
                double t5683 = t5673*t5674*t5675*t5677;
                double t5684 = t5683+1.0;
                double t5685 = 1.0/(t5684*t5684);
                double t5686 = a5*gamma_aa*t5670*t5680*t5681;
                double t5687 = t5686+1.0;
                double t5698 = raa2*t5682;
                double t5688 = exp(-t5698);
                double t5689 = t5688-1.0;
                double t5690 = kaa2*t5689;
                double t5691 = pow(t5676,2.0/5.0);
                double t5699 = raa1*t5691;
                double t5692 = exp(-t5699);
                double t5693 = t5692-1.0;
                double t5694 = kaa1*t5693;
                double t5695 = -kaa0+t5690+t5694;
                double t5696 = 1.0/(t5695*t5695);
                double t5697 = c*c0*t5671*t5685*t5687*t5696*t5679*(2.0/3.0);
                double t5700 = 1.0/t5684;
                double t5701 = 1.0/pow(rho_a,4.0/3.0);
                double t5702 = c*c0*t5671*t5687*t5696*t5679*(2.0/3.0);
                double t5703 = sqrt(t5702);
                double t5704 = 1.0/pow(rho_a,1.1E1/3.0);
                double t5705 = 1.0/sqrt(t5676);
                double t5706 = c*kaa2*raa2*t5688*t5701*t5705*(1.0/6.0);
                double t5707 = 1.0/pow(t5676,3.0/5.0);
                double t5708 = c*kaa1*raa1*t5692*t5701*t5707*(2.0/1.5E1);
                double t5709 = t5706+t5708;
                double t5710 = 1.0/(t5695*t5695*t5695);
                double t5711 = 1.0/pow(rho_a,2.0E1/3.0);
                double t5712;
                double t5713;
                if (t5697 > expei_cutoff) {
                    t5712 = 1.0;
                    t5713 = expei(t5697);
                } else {
                    t5712 = exp(t5697);
                    t5713 = Ei(-t5697);
                }
                double t5714 = 1.0/(t5684*t5684*t5684);
                double t5715 = t5700*t5703*6.0;
                double t5716 = c*c0*t5671*t5685*t5687*t5696*t5679*4.0;
                double t5717 = t5715+t5716+3.0;
                double t5718 = 1.0/t5717;
                double t5719 = c*c0*t5685*t5687*t5696*t5679*t5701*(2.0/9.0);
                double t5720 = a5*c0*gamma_aa*t5670*t5685*t5696*t5679*t5704*(1.4E1/9.0);
                double t5721 = c*c0*t5671*t5685*t5687*t5679*t5710*t5709*(4.0/3.0);
                double t5722 = c*c0*t5673*t5675*t5685*t5677*t5687*t5696*t5679*t5711*(6.4E1/9.0);
                double t5724 = c*c0*t5673*t5675*t5677*t5687*t5696*t5679*t5711*t5714*(6.4E1/9.0);
                double t5723 = t5720+t5721+t5722-t5724+t5719;
                double t5725 = c*c0*t5671*t5685*t5687*t5696*t5679*t5712*t5713*(2.0/3.0);
                double t5726 = t5725+1.0;
                double t5727 = t5700*t5703*4.0;
                double t5728 = c*c0*t5671*t5685*t5687*t5696*t5679*(8.0/3.0);
                double t5729 = t5727+t5728+6.0;
                double t5730 = c*c0*t5687*t5696*t5679*t5701*(2.0/9.0);
                double t5731 = a5*c0*gamma_aa*t5670*t5696*t5679*t5704*(1.4E1/9.0);
                double t5732 = c*c0*t5671*t5687*t5679*t5710*t5709*(4.0/3.0);
                double t5733 = c*c0*t5673*t5675*t5677*t5687*t5696*t5679*t5711*(6.4E1/9.0);
                double t5734 = t5730+t5731+t5732+t5733;
                double t5735 = 1.0/sqrt(t5702);
                double t5736 = 1.0/pow(rho_a,1.9E1/3.0);
                double t5737 = t5672*t5673*t5674*t5675;
                double t5738 = pow(t5676,4.0/5.0);
                double t5756 = rab1*t5738;
                double t5739 = exp(-t5756);
                double t5740 = t5739-1.0;
                double t5757 = kab1*t5740;
                double t5741 = kab0-t5757;
                double t5742 = a3*gamma_aa*t5670*t5680*t5681;
                double t5743 = t5742+1.0;
                double t5744 = 1.0/sqrt(t5743);
                double t5745 = 1.0/pow(rho_a,8.0/3.0);
                double t5746 = a1*gamma_aa*t5670*t5745;
                double t5747 = t5737+t5746+1.0;
                double t5748 = c*c;
                double t5749 = 1.0/pow(rho_a,2.0/3.0);
                double t5750 = k1*t5682;
                double t5751 = c*k2*t5671;
                double t5752 = t5750+t5751;
                double t5753 = 1.0/(t5752*t5752);
                double t5759 = t5753*t5748*t5749;
                double t5754 = exp(-t5759);
                double t5755 = exp(-t5737);
                double t5758 = c*c0*t5671*(2.0/3.0);
                double t5760 = t5712*t5713;
                double t5761 = t5726*t5718*t5729;
                double t5762 = t5760+t5761;
                double t5763 = t5741*t5744*t5755*t5747*1.0E5;
                double t5764 = t5763-t5758;
                double t5765 = heaviside(t5764);
                double t5766 = t5672*t5673*t5674*t5675*2.0;
                double t5767 = exp(t5766);
                double t5768 = 1.0/(t5741*t5741);
                double t5769 = 1.0/(t5747*t5747);
                double t5770 = c*c0*t5671*t5743*t5767*t5768*t5769*(2.0/3.0);
                double t5771 = sqrt(t5770);
                double t5772 = t5672*t5673*t5675*t5736*(1.6E1/3.0);
                double t5773 = a1*gamma_aa*t5670*t5704*(8.0/3.0);
                double t5774 = t5772+t5773;
                double t5775;
                double t5776;
                if (t5770 > expei_cutoff) {
                    t5775 = 1.0;
                    t5776 = expei(t5770);
                } else {
                    t5775 = exp(t5770);
                    t5776 = Ei(-t5770);
                }
                double t5777 = c*c0*t5701*t5743*t5767*t5768*t5769*(2.0/9.0);
                double t5778 = 1.0/(t5747*t5747*t5747);
                double t5779 = a3*c0*gamma_aa*t5670*t5704*t5767*t5768*t5769*(1.4E1/9.0);
                double t5780 = 1.0/pow(rho_a,5.0/3.0);
                double t5781 = 1.0/pow(t5676,1.0/5.0);
                double t5782 = c*c0*t5672*t5673*t5675*t5711*t5743*t5767*t5768*t5769*(6.4E1/9.0);
                double t5783 = 1.0/(t5741*t5741*t5741);
                double t5789 = c*c0*t5671*t5743*t5774*t5767*t5768*t5778*(4.0/3.0);
                double t5790 = c0*kab1*rab1*t5743*t5780*t5781*t5783*t5739*t5748*t5767*t5769*(1.6E1/4.5E1);
                double t5784 = -t5790+t5782+t5777+t5779-t5789;
                double t5785 = t5771*6.0;
                double t5786 = c*c0*t5671*t5743*t5767*t5768*t5769*4.0;
                double t5787 = t5785+t5786+3.0;
                double t5788 = 1.0/t5787;
                double t5791 = c*c0*t5671*t5743*t5775*t5767*t5776*t5768*t5769*(2.0/3.0);
                double t5792 = t5791+1.0;
                double t5793 = t5771*4.0;
                double t5794 = c*c0*t5671*t5743*t5767*t5768*t5769*(8.0/3.0);
                double t5795 = t5793+t5794+6.0;
                double t5796 = 1.0/sqrt(t5770);
                double t5797 = 1.0/c0;
                double t5798 = pow(rho_a,1.0/3.0);
                double t5799 = c*c0*t5701*(2.0/9.0);
                double t5800 = t5672*t5673*t5675*t5741*t5744*t5736*t5755*t5747*(1.6E6/3.0);
                double t5801 = 1.0/pow(rho_a,1.0E1/3.0);
                double t5802 = 1.0/pow(t5743,3.0/2.0);
                double t5803 = a3*gamma_aa*t5670*t5680*t5741*t5755*t5747*t5801*t5802*(3.5E5/3.0);
                double t5804 = t5799+t5800+t5803-t5741*t5744*t5755*t5774*1.0E5-c*kab1*rab1*t5701*t5744*t5781*t5755*t5747*t5739*(8.0E4/3.0);
                double t5805 = 1.0/pow(rho_b,1.0/3.0);
                double t5806 = gamma_bb*gamma_bb;
                double t5807 = 1.0/pow(rho_b,1.6E1/3.0);
                double t5808 = c*t5805;
                double t5809 = pow(t5808,4.0/5.0);
                double t5822 = rab1*t5809;
                double t5810 = exp(-t5822);
                double t5811 = t5810-1.0;
                double t5823 = kab1*t5811;
                double t5812 = kab0-t5823;
                double t5813 = 1.0/pow(rho_b,7.0/3.0);
                double t5814 = a3*gamma_bb*t5670*t5680*t5813;
                double t5815 = t5814+1.0;
                double t5816 = t5672*t5675*t5806*t5807;
                double t5817 = 1.0/pow(rho_b,8.0/3.0);
                double t5818 = a1*gamma_bb*t5670*t5817;
                double t5819 = t5816+t5818+1.0;
                double t5820 = t5672*t5675*t5806*t5807*2.0;
                double t5821 = exp(t5820);
                double t5824 = 1.0/(t5812*t5812);
                double t5825 = 1.0/(t5819*t5819);
                double t5826 = c*c0*t5821*t5805*t5815*t5824*t5825*(2.0/3.0);
                double t5827;
                double t5828;
                if (t5826 > expei_cutoff) {
                    t5827 = 1.0;
                    t5828 = expei(t5826);
                } else {
                    t5827 = exp(t5826);
                    t5828 = Ei(-t5826);
                }
                double t5829 = sqrt(t5826);
                v_rho_a[Q] += scale * -rho_b*(c0*t5765*(t5792*t5788*(t5784*t5796*2.0+c*c0*t5701*t5743*t5767*t5768*t5769*(8.0/9.0)+a3*c0*gamma_aa*t5670*t5704*t5767*t5768*t5769*(5.6E1/9.0)-c*c0*t5671*t5743*t5774*t5767*t5768*t5778*(1.6E1/3.0)+c*c0*t5672*t5673*t5675*t5711*t5743*t5767*t5768*t5769*(2.56E2/9.0)-c0*kab1*rab1*t5743*t5780*t5781*t5783*t5739*t5748*t5767*t5769*(6.4E1/4.5E1))+t5795*t5788*(-t5790+t5782+t5777+t5779-t5789+c*c0*t5701*t5743*t5775*t5767*t5776*t5768*t5769*(2.0/9.0)+a3*c0*gamma_aa*t5670*t5704*t5775*t5767*t5776*t5768*t5769*(1.4E1/9.0)-c*c0*t5671*t5743*t5774*t5775*t5767*t5776*t5768*t5778*(4.0/3.0)+c*c0*t5671*t5743*t5775*t5784*t5767*t5776*t5768*t5769*(2.0/3.0)+c*c0*t5672*t5673*t5675*t5711*t5743*t5775*t5767*t5776*t5768*t5769*(6.4E1/9.0)-c0*kab1*rab1*t5743*t5780*t5781*t5783*t5739*t5748*t5775*t5767*t5776*t5769*(1.6E1/4.5E1))+t5775*t5784*t5776-t5792*t5795*1.0/(t5787*t5787)*(t5784*t5796*3.0+c*c0*t5701*t5743*t5767*t5768*t5769*(4.0/3.0)+a3*c0*gamma_aa*t5670*t5704*t5767*t5768*t5769*(2.8E1/3.0)-c*c0*t5671*t5743*t5774*t5767*t5768*t5778*8.0+c*c0*t5672*t5673*t5675*t5711*t5743*t5767*t5768*t5769*(1.28E2/3.0)-c0*kab1*rab1*t5743*t5780*t5781*t5783*t5739*t5748*t5767*t5769*(3.2E1/1.5E1))+(t5680*(t5741*t5741)*(t5747*t5747)*t5784*t5797*t5798*exp(-t5766)*(3.0/2.0))/t5743)*(1.0/2.0)-c0*t5804*dirac(-t5763+t5758)*(t5775*t5776+t5792*t5795*t5788)*(1.0/2.0))+rho_a*(c0*t5754*heaviside(c*c0*t5671*(-2.0/3.0)+t5741*t5744*t5747*exp(-t5672*t5673*t5674*t5675)*1.0E5)*(t5726*t5718*(t5700*t5734*t5735*2.0-t5673*t5675*t5685*t5677*t5703*t5736*(6.4E1/3.0)+c*c0*t5685*t5687*t5696*t5679*t5701*(8.0/9.0)+a5*c0*gamma_aa*t5670*t5685*t5696*t5679*t5704*(5.6E1/9.0)+c*c0*t5671*t5685*t5687*t5679*t5710*t5709*(1.6E1/3.0)+c*c0*t5673*t5675*t5685*t5677*t5687*t5696*t5679*t5711*(2.56E2/9.0)-c*c0*t5673*t5675*t5677*t5687*t5696*t5679*t5711*t5714*(2.56E2/9.0))+t5718*t5729*(t5720+t5721+t5722-t5724+t5719+c*c0*t5685*t5687*t5696*t5679*t5701*t5712*t5713*(2.0/9.0)+a5*c0*gamma_aa*t5670*t5685*t5696*t5679*t5712*t5704*t5713*(1.4E1/9.0)+c*c0*t5671*t5685*t5687*t5696*t5679*t5712*t5713*t5723*(2.0/3.0)+c*c0*t5671*t5685*t5687*t5679*t5710*t5712*t5713*t5709*(4.0/3.0)+c*c0*t5673*t5675*t5685*t5677*t5687*t5696*t5679*t5711*t5712*t5713*(6.4E1/9.0)-c*c0*t5673*t5675*t5677*t5687*t5696*t5679*t5711*t5712*t5713*t5714*(6.4E1/9.0))+t5712*t5713*t5723-1.0/(t5717*t5717)*t5726*t5729*(t5700*t5734*t5735*3.0-t5673*t5675*t5685*t5677*t5703*t5736*3.2E1+c*c0*t5685*t5687*t5696*t5679*t5701*(4.0/3.0)+a5*c0*gamma_aa*t5670*t5685*t5696*t5679*t5704*(2.8E1/3.0)+c*c0*t5671*t5685*t5687*t5679*t5710*t5709*8.0+c*c0*t5673*t5675*t5685*t5677*t5687*t5696*t5679*t5711*(1.28E2/3.0)-c*c0*t5673*t5675*t5677*t5687*t5696*t5679*t5711*t5714*(1.28E2/3.0))+(t5680*(t5684*t5684)*(t5695*t5695)*t5723*t5797*t5798*exp(-t5678)*(3.0/2.0))/t5687)*(-1.0/2.0)+c0*t5762*t5754*t5765*(t5753*t5780*t5748*(2.0/3.0)-1.0/(t5752*t5752*t5752)*t5748*t5749*(c*k2*t5701*(1.0/3.0)+c*k1*t5701*t5705*(1.0/6.0))*2.0)*(1.0/2.0)+c0*t5762*t5754*t5804*dirac(t5758-t5741*t5744*t5755*t5747*1.0E5)*(1.0/2.0))+c0*heaviside(c*c0*t5805*(-2.0/3.0)+t5812*1.0/sqrt(t5815)*t5819*exp(-t5672*t5675*t5806*t5807)*1.0E5)*(t5827*t5828+((c*c0*t5821*t5805*t5815*t5824*t5825*t5827*t5828*(2.0/3.0)+1.0)*(t5829*4.0+c*c0*t5821*t5805*t5815*t5824*t5825*(8.0/3.0)+6.0))/(t5829*6.0+c*c0*t5821*t5805*t5815*t5824*t5825*4.0+3.0))*(1.0/2.0)+c0*t5762*t5754*t5765*(1.0/2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t5831 = tspi_m13*tspi_m13;
                double t5832 = 1.0/pow(rho_b,1.0/3.0);
                double t5833 = a2*a2;
                double t5834 = gamma_bb*gamma_bb;
                double t5835 = 1.0/pow(rho_b,1.6E1/3.0);
                double t5836 = t5831*t5831;
                double t5837 = c*t5832;
                double t5838 = a4*a4;
                double t5839 = t5834*t5835*t5836*t5838*2.0;
                double t5840 = exp(t5839);
                double t5841 = 1.0/c;
                double t5842 = 1.0/pow(rho_b,7.0/3.0);
                double t5843 = sqrt(t5837);
                double t5844 = t5834*t5835*t5836*t5838;
                double t5845 = t5844+1.0;
                double t5846 = 1.0/(t5845*t5845);
                double t5847 = a5*gamma_bb*t5831*t5841*t5842;
                double t5848 = t5847+1.0;
                double t5859 = raa2*t5843;
                double t5849 = exp(-t5859);
                double t5850 = t5849-1.0;
                double t5851 = kaa2*t5850;
                double t5852 = pow(t5837,2.0/5.0);
                double t5860 = raa1*t5852;
                double t5853 = exp(-t5860);
                double t5854 = t5853-1.0;
                double t5855 = kaa1*t5854;
                double t5856 = -kaa0+t5851+t5855;
                double t5857 = 1.0/(t5856*t5856);
                double t5858 = c*c0*t5840*t5832*t5846*t5848*t5857*(2.0/3.0);
                double t5861 = 1.0/t5845;
                double t5862 = 1.0/pow(rho_b,4.0/3.0);
                double t5863 = c*c0*t5840*t5832*t5848*t5857*(2.0/3.0);
                double t5864 = sqrt(t5863);
                double t5865 = 1.0/pow(rho_b,1.1E1/3.0);
                double t5866 = 1.0/sqrt(t5837);
                double t5867 = c*kaa2*raa2*t5862*t5866*t5849*(1.0/6.0);
                double t5868 = 1.0/pow(t5837,3.0/5.0);
                double t5869 = c*kaa1*raa1*t5853*t5862*t5868*(2.0/1.5E1);
                double t5870 = t5867+t5869;
                double t5871 = 1.0/(t5856*t5856*t5856);
                double t5872 = 1.0/pow(rho_b,2.0E1/3.0);
                double t5873;
                double t5874;
                if (t5858 > expei_cutoff) {
                    t5873 = 1.0;
                    t5874 = expei(t5858);
                } else {
                    t5873 = exp(t5858);
                    t5874 = Ei(-t5858);
                }
                double t5875 = 1.0/(t5845*t5845*t5845);
                double t5876 = t5861*t5864*6.0;
                double t5877 = c*c0*t5840*t5832*t5846*t5848*t5857*4.0;
                double t5878 = t5876+t5877+3.0;
                double t5879 = 1.0/t5878;
                double t5880 = c*c0*t5840*t5862*t5846*t5848*t5857*(2.0/9.0);
                double t5881 = a5*c0*gamma_bb*t5831*t5840*t5846*t5865*t5857*(1.4E1/9.0);
                double t5882 = c*c0*t5840*t5832*t5870*t5871*t5846*t5848*(4.0/3.0);
                double t5883 = c*c0*t5840*t5834*t5836*t5872*t5846*t5838*t5848*t5857*(6.4E1/9.0);
                double t5885 = c*c0*t5840*t5834*t5836*t5872*t5838*t5848*t5857*t5875*(6.4E1/9.0);
                double t5884 = t5880+t5881+t5882+t5883-t5885;
                double t5886 = c*c0*t5840*t5832*t5846*t5873*t5874*t5848*t5857*(2.0/3.0);
                double t5887 = t5886+1.0;
                double t5888 = t5861*t5864*4.0;
                double t5889 = c*c0*t5840*t5832*t5846*t5848*t5857*(8.0/3.0);
                double t5890 = t5888+t5889+6.0;
                double t5891 = c*c0*t5840*t5862*t5848*t5857*(2.0/9.0);
                double t5892 = a5*c0*gamma_bb*t5831*t5840*t5865*t5857*(1.4E1/9.0);
                double t5893 = c*c0*t5840*t5832*t5870*t5871*t5848*(4.0/3.0);
                double t5894 = c*c0*t5840*t5834*t5836*t5872*t5838*t5848*t5857*(6.4E1/9.0);
                double t5895 = t5891+t5892+t5893+t5894;
                double t5896 = 1.0/sqrt(t5863);
                double t5897 = 1.0/pow(rho_b,1.9E1/3.0);
                double t5898 = t5833*t5834*t5835*t5836;
                double t5899 = pow(t5837,4.0/5.0);
                double t5917 = rab1*t5899;
                double t5900 = exp(-t5917);
                double t5901 = t5900-1.0;
                double t5918 = kab1*t5901;
                double t5902 = kab0-t5918;
                double t5903 = a3*gamma_bb*t5831*t5841*t5842;
                double t5904 = t5903+1.0;
                double t5905 = 1.0/sqrt(t5904);
                double t5906 = 1.0/pow(rho_b,8.0/3.0);
                double t5907 = a1*gamma_bb*t5831*t5906;
                double t5908 = t5898+t5907+1.0;
                double t5909 = c*c;
                double t5910 = 1.0/pow(rho_b,2.0/3.0);
                double t5911 = k1*t5843;
                double t5912 = c*k2*t5832;
                double t5913 = t5911+t5912;
                double t5914 = 1.0/(t5913*t5913);
                double t5920 = t5910*t5914*t5909;
                double t5915 = exp(-t5920);
                double t5916 = exp(-t5898);
                double t5919 = c*c0*t5832*(2.0/3.0);
                double t5921 = t5873*t5874;
                double t5922 = t5890*t5887*t5879;
                double t5923 = t5921+t5922;
                double t5924 = t5902*t5905*t5916*t5908*1.0E5;
                double t5925 = t5924-t5919;
                double t5926 = heaviside(t5925);
                double t5927 = t5833*t5834*t5835*t5836*2.0;
                double t5928 = exp(t5927);
                double t5929 = 1.0/(t5902*t5902);
                double t5930 = 1.0/(t5908*t5908);
                double t5931 = c*c0*t5832*t5930*t5904*t5928*t5929*(2.0/3.0);
                double t5932 = sqrt(t5931);
                double t5933 = t5833*t5834*t5836*t5897*(1.6E1/3.0);
                double t5934 = a1*gamma_bb*t5831*t5865*(8.0/3.0);
                double t5935 = t5933+t5934;
                double t5936;
                double t5937;
                if (t5931 > expei_cutoff) {
                    t5936 = 1.0;
                    t5937 = expei(t5931);
                } else {
                    t5936 = exp(t5931);
                    t5937 = Ei(-t5931);
                }
                double t5938 = c*c0*t5862*t5930*t5904*t5928*t5929*(2.0/9.0);
                double t5939 = 1.0/(t5908*t5908*t5908);
                double t5940 = a3*c0*gamma_bb*t5831*t5865*t5930*t5928*t5929*(1.4E1/9.0);
                double t5941 = 1.0/pow(rho_b,5.0/3.0);
                double t5942 = 1.0/pow(t5837,1.0/5.0);
                double t5943 = c*c0*t5833*t5834*t5836*t5872*t5930*t5904*t5928*t5929*(6.4E1/9.0);
                double t5944 = 1.0/(t5902*t5902*t5902);
                double t5950 = c*c0*t5832*t5904*t5935*t5928*t5929*t5939*(4.0/3.0);
                double t5951 = c0*kab1*rab1*t5900*t5930*t5904*t5941*t5942*t5944*t5909*t5928*(1.6E1/4.5E1);
                double t5945 = t5940-t5950-t5951+t5943+t5938;
                double t5946 = t5932*6.0;
                double t5947 = c*c0*t5832*t5930*t5904*t5928*t5929*4.0;
                double t5948 = t5946+t5947+3.0;
                double t5949 = 1.0/t5948;
                double t5952 = c*c0*t5832*t5930*t5904*t5936*t5928*t5937*t5929*(2.0/3.0);
                double t5953 = t5952+1.0;
                double t5954 = t5932*4.0;
                double t5955 = c*c0*t5832*t5930*t5904*t5928*t5929*(8.0/3.0);
                double t5956 = t5954+t5955+6.0;
                double t5957 = 1.0/sqrt(t5931);
                double t5958 = 1.0/c0;
                double t5959 = pow(rho_b,1.0/3.0);
                double t5960 = c*c0*t5862*(2.0/9.0);
                double t5961 = t5833*t5834*t5836*t5897*t5902*t5905*t5916*t5908*(1.6E6/3.0);
                double t5962 = 1.0/pow(rho_b,1.0E1/3.0);
                double t5963 = 1.0/pow(t5904,3.0/2.0);
                double t5964 = a3*gamma_bb*t5831*t5841*t5902*t5916*t5908*t5962*t5963*(3.5E5/3.0);
                double t5965 = t5960+t5961+t5964-t5902*t5905*t5916*t5935*1.0E5-c*kab1*rab1*t5862*t5900*t5905*t5942*t5916*t5908*(8.0E4/3.0);
                double t5966 = 1.0/pow(rho_a,1.0/3.0);
                double t5967 = gamma_aa*gamma_aa;
                double t5968 = 1.0/pow(rho_a,1.6E1/3.0);
                double t5969 = c*t5966;
                double t5970 = pow(t5969,4.0/5.0);
                double t5983 = rab1*t5970;
                double t5971 = exp(-t5983);
                double t5972 = t5971-1.0;
                double t5984 = kab1*t5972;
                double t5973 = kab0-t5984;
                double t5974 = 1.0/pow(rho_a,7.0/3.0);
                double t5975 = a3*gamma_aa*t5831*t5841*t5974;
                double t5976 = t5975+1.0;
                double t5977 = t5833*t5836*t5967*t5968;
                double t5978 = 1.0/pow(rho_a,8.0/3.0);
                double t5979 = a1*gamma_aa*t5831*t5978;
                double t5980 = t5977+t5979+1.0;
                double t5981 = t5833*t5836*t5967*t5968*2.0;
                double t5982 = exp(t5981);
                double t5985 = 1.0/(t5973*t5973);
                double t5986 = 1.0/(t5980*t5980);
                double t5987 = c*c0*t5982*t5966*t5976*t5985*t5986*(2.0/3.0);
                double t5988;
                double t5989;
                if (t5987 > expei_cutoff) {
                    t5988 = 1.0;
                    t5989 = expei(t5987);
                } else {
                    t5988 = exp(t5987);
                    t5989 = Ei(-t5987);
                }
                double t5990 = sqrt(t5987);
                v_rho_b[Q] += scale * -rho_a*(c0*t5926*(t5953*t5949*(t5945*t5957*2.0+c*c0*t5862*t5930*t5904*t5928*t5929*(8.0/9.0)+a3*c0*gamma_bb*t5831*t5865*t5930*t5928*t5929*(5.6E1/9.0)-c*c0*t5832*t5904*t5935*t5928*t5929*t5939*(1.6E1/3.0)+c*c0*t5833*t5834*t5836*t5872*t5930*t5904*t5928*t5929*(2.56E2/9.0)-c0*kab1*rab1*t5900*t5930*t5904*t5941*t5942*t5944*t5909*t5928*(6.4E1/4.5E1))+t5956*t5949*(t5940-t5950-t5951+t5943+t5938+c*c0*t5862*t5930*t5904*t5936*t5928*t5937*t5929*(2.0/9.0)+a3*c0*gamma_bb*t5831*t5865*t5930*t5936*t5928*t5937*t5929*(1.4E1/9.0)+c*c0*t5832*t5930*t5904*t5936*t5945*t5928*t5937*t5929*(2.0/3.0)-c*c0*t5832*t5904*t5935*t5936*t5928*t5937*t5929*t5939*(4.0/3.0)+c*c0*t5833*t5834*t5836*t5872*t5930*t5904*t5936*t5928*t5937*t5929*(6.4E1/9.0)-c0*kab1*rab1*t5900*t5930*t5904*t5941*t5942*t5944*t5909*t5936*t5928*t5937*(1.6E1/4.5E1))+t5936*t5945*t5937-t5953*t5956*1.0/(t5948*t5948)*(t5945*t5957*3.0+c*c0*t5862*t5930*t5904*t5928*t5929*(4.0/3.0)+a3*c0*gamma_bb*t5831*t5865*t5930*t5928*t5929*(2.8E1/3.0)-c*c0*t5832*t5904*t5935*t5928*t5929*t5939*8.0+c*c0*t5833*t5834*t5836*t5872*t5930*t5904*t5928*t5929*(1.28E2/3.0)-c0*kab1*rab1*t5900*t5930*t5904*t5941*t5942*t5944*t5909*t5928*(3.2E1/1.5E1))+(t5841*(t5902*t5902)*(t5908*t5908)*t5945*t5958*t5959*exp(-t5927)*(3.0/2.0))/t5904)*(1.0/2.0)-c0*t5965*dirac(-t5924+t5919)*(t5936*t5937+t5953*t5956*t5949)*(1.0/2.0))+rho_b*(c0*t5915*heaviside(c*c0*t5832*(-2.0/3.0)+t5902*t5905*t5908*exp(-t5833*t5834*t5835*t5836)*1.0E5)*(t5887*t5879*(t5861*t5895*t5896*2.0-t5834*t5836*t5846*t5864*t5838*t5897*(6.4E1/3.0)+c*c0*t5840*t5862*t5846*t5848*t5857*(8.0/9.0)+a5*c0*gamma_bb*t5831*t5840*t5846*t5865*t5857*(5.6E1/9.0)+c*c0*t5840*t5832*t5870*t5871*t5846*t5848*(1.6E1/3.0)+c*c0*t5840*t5834*t5836*t5872*t5846*t5838*t5848*t5857*(2.56E2/9.0)-c*c0*t5840*t5834*t5836*t5872*t5838*t5848*t5857*t5875*(2.56E2/9.0))+t5890*t5879*(t5880+t5881+t5882+t5883-t5885+c*c0*t5840*t5862*t5846*t5873*t5874*t5848*t5857*(2.0/9.0)+a5*c0*gamma_bb*t5831*t5840*t5846*t5873*t5865*t5874*t5857*(1.4E1/9.0)+c*c0*t5840*t5832*t5870*t5871*t5846*t5873*t5874*t5848*(4.0/3.0)+c*c0*t5840*t5832*t5846*t5873*t5874*t5848*t5857*t5884*(2.0/3.0)+c*c0*t5840*t5834*t5836*t5872*t5846*t5873*t5838*t5874*t5848*t5857*(6.4E1/9.0)-c*c0*t5840*t5834*t5836*t5872*t5873*t5838*t5874*t5848*t5857*t5875*(6.4E1/9.0))+t5873*t5874*t5884-t5890*1.0/(t5878*t5878)*t5887*(t5861*t5895*t5896*3.0-t5834*t5836*t5846*t5864*t5838*t5897*3.2E1+c*c0*t5840*t5862*t5846*t5848*t5857*(4.0/3.0)+a5*c0*gamma_bb*t5831*t5840*t5846*t5865*t5857*(2.8E1/3.0)+c*c0*t5840*t5832*t5870*t5871*t5846*t5848*8.0+c*c0*t5840*t5834*t5836*t5872*t5846*t5838*t5848*t5857*(1.28E2/3.0)-c*c0*t5840*t5834*t5836*t5872*t5838*t5848*t5857*t5875*(1.28E2/3.0))+(t5841*(t5845*t5845)*(t5856*t5856)*t5884*t5958*t5959*exp(-t5839)*(3.0/2.0))/t5848)*(-1.0/2.0)+c0*t5923*t5915*t5926*(t5914*t5941*t5909*(2.0/3.0)-t5910*1.0/(t5913*t5913*t5913)*t5909*(c*k2*t5862*(1.0/3.0)+c*k1*t5862*t5866*(1.0/6.0))*2.0)*(1.0/2.0)+c0*t5923*t5915*t5965*dirac(t5919-t5902*t5905*t5916*t5908*1.0E5)*(1.0/2.0))+c0*heaviside(c*c0*t5966*(-2.0/3.0)+t5980*t5973*1.0/sqrt(t5976)*exp(-t5833*t5836*t5967*t5968)*1.0E5)*(t5988*t5989+((c*c0*t5982*t5966*t5976*t5985*t5986*t5988*t5989*(2.0/3.0)+1.0)*(t5990*4.0+c*c0*t5982*t5966*t5976*t5985*t5986*(8.0/3.0)+6.0))/(t5990*6.0+c*c0*t5982*t5966*t5976*t5985*t5986*4.0+3.0))*(1.0/2.0)+c0*t5923*t5915*t5926*(1.0/2.0);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t5992 = tspi_m13*tspi_m13;
                double t5993 = 1.0/pow(rho_a,1.0/3.0);
                double t5994 = a2*a2;
                double t5995 = gamma_aa*gamma_aa;
                double t5996 = 1.0/pow(rho_a,1.6E1/3.0);
                double t5997 = t5992*t5992;
                double t5998 = t5994*t5995*t5996*t5997*2.0;
                double t5999 = exp(t5998);
                double t6000 = c*t5993;
                double t6001 = pow(t6000,4.0/5.0);
                double t6013 = rab1*t6001;
                double t6002 = exp(-t6013);
                double t6003 = t6002-1.0;
                double t6014 = kab1*t6003;
                double t6004 = kab0-t6014;
                double t6005 = 1.0/c;
                double t6006 = 1.0/pow(rho_a,7.0/3.0);
                double t6007 = a3*gamma_aa*t5992*t6005*t6006;
                double t6008 = t6007+1.0;
                double t6009 = t5994*t5995*t5996*t5997;
                double t6010 = 1.0/pow(rho_a,8.0/3.0);
                double t6011 = a1*gamma_aa*t5992*t6010;
                double t6012 = t6011+t6009+1.0;
                double t6015 = 1.0/(t6004*t6004);
                double t6016 = 1.0/(t6012*t6012);
                double t6017 = c*c0*t5993*t5999*t6015*t6016*t6008*(2.0/3.0);
                double t6018 = a1*t5992*t6010;
                double t6019 = gamma_aa*t5994*t5996*t5997*2.0;
                double t6020 = t6018+t6019;
                double t6021 = 1.0/(t6012*t6012*t6012);
                double t6022 = 1.0/pow(rho_a,1.7E1/3.0);
                double t6023;
                double t6024;
                if (t6017 > expei_cutoff) {
                    t6023 = 1.0;
                    t6024 = expei(t6017);
                } else {
                    t6023 = exp(t6017);
                    t6024 = Ei(-t6017);
                }
                double t6025 = a3*c0*t5992*t5999*t6010*t6015*t6016*(2.0/3.0);
                double t6026 = c*c0*gamma_aa*t5994*t5997*t5999*t6022*t6015*t6016*t6008*(8.0/3.0);
                double t6033 = c*c0*t5993*t5999*t6020*t6021*t6015*t6008*(4.0/3.0);
                double t6027 = -t6033+t6025+t6026;
                double t6028 = sqrt(t6017);
                double t6029 = t6028*6.0;
                double t6030 = c*c0*t5993*t5999*t6015*t6016*t6008*4.0;
                double t6031 = t6030+t6029+3.0;
                double t6032 = 1.0/t6031;
                double t6034 = c*c0*t5993*t5999*t6023*t6015*t6024*t6016*t6008*(2.0/3.0);
                double t6035 = t6034+1.0;
                double t6036 = t6028*4.0;
                double t6037 = c*c0*t5993*t5999*t6015*t6016*t6008*(8.0/3.0);
                double t6038 = t6036+t6037+6.0;
                double t6039 = 1.0/sqrt(t6017);
                double t6040 = 1.0/sqrt(t6008);
                double t6041 = exp(-t6009);
                double t6042 = c*c0*t5993*(2.0/3.0);
                double t6043 = a4*a4;
                double t6044 = sqrt(t6000);
                double t6045 = t5995*t5996*t5997*t6043*2.0;
                double t6046 = exp(t6045);
                double t6047 = t5995*t5996*t5997*t6043;
                double t6048 = t6047+1.0;
                double t6049 = 1.0/(t6048*t6048);
                double t6050 = a5*gamma_aa*t5992*t6005*t6006;
                double t6051 = t6050+1.0;
                double t6062 = raa2*t6044;
                double t6052 = exp(-t6062);
                double t6053 = t6052-1.0;
                double t6054 = kaa2*t6053;
                double t6055 = pow(t6000,2.0/5.0);
                double t6063 = raa1*t6055;
                double t6056 = exp(-t6063);
                double t6057 = t6056-1.0;
                double t6058 = kaa1*t6057;
                double t6059 = -kaa0+t6054+t6058;
                double t6060 = 1.0/(t6059*t6059);
                double t6061 = c*c0*t5993*t6051*t6060*t6046*t6049*(2.0/3.0);
                double t6064;
                double t6065;
                if (t6061 > expei_cutoff) {
                    t6064 = 1.0;
                    t6065 = expei(t6061);
                } else {
                    t6064 = exp(t6061);
                    t6065 = Ei(-t6061);
                }
                double t6066 = 1.0/t6048;
                double t6067 = c*c0*t5993*t6051*t6060*t6046*(2.0/3.0);
                double t6068 = sqrt(t6067);
                double t6069 = 1.0/(t6048*t6048*t6048);
                double t6070 = t6066*t6068*6.0;
                double t6071 = c*c0*t5993*t6051*t6060*t6046*t6049*4.0;
                double t6072 = t6070+t6071+3.0;
                double t6073 = 1.0/t6072;
                double t6074 = a5*c0*t5992*t6010*t6060*t6046*t6049*(2.0/3.0);
                double t6075 = c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6049*(8.0/3.0);
                double t6088 = c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6069*(8.0/3.0);
                double t6076 = t6074+t6075-t6088;
                double t6077 = c*c0*t5993*t6051*t6060*t6046*t6064*t6065*t6049*(2.0/3.0);
                double t6078 = t6077+1.0;
                double t6079 = t6066*t6068*4.0;
                double t6080 = c*c0*t5993*t6051*t6060*t6046*t6049*(8.0/3.0);
                double t6081 = t6080+t6079+6.0;
                double t6082 = a5*c0*t5992*t6010*t6060*t6046*(2.0/3.0);
                double t6083 = c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*(8.0/3.0);
                double t6084 = t6082+t6083;
                double t6085 = 1.0/sqrt(t6067);
                double t6086 = 1.0/c0;
                double t6087 = pow(rho_a,1.0/3.0);
                double t6089 = t6012*t6004*t6040*t6041*1.0E5;
                double t6090 = c*c;
                double t6091 = 1.0/pow(rho_a,2.0/3.0);
                double t6092 = k1*t6044;
                double t6093 = c*k2*t5993;
                double t6094 = t6092+t6093;
                double t6095 = 1.0/(t6094*t6094);
                double t6096 = exp(-t6090*t6091*t6095);
                double t6097 = 1.0/pow(t6008,3.0/2.0);
                double t6098 = a3*t5992*t6012*t6004*t6005*t6041*t6006*t6097*5.0E4;
                double t6099 = gamma_aa*t5994*t5996*t5997*t6012*t6004*t6040*t6041*2.0E5;
                double t6100 = t6098+t6099-t6020*t6004*t6040*t6041*1.0E5;
                v_gamma_aa[Q] += scale * rho_b*(c0*heaviside(c*c0*t5993*(-2.0/3.0)+t6012*t6004*t6040*exp(-t5994*t5995*t5996*t5997)*1.0E5)*(t6023*t6024*t6027+t6032*t6038*(-t6033+t6025+t6026+a3*c0*t5992*t5999*t6010*t6023*t6015*t6024*t6016*(2.0/3.0)-c*c0*t5993*t5999*t6020*t6021*t6023*t6015*t6024*t6008*(4.0/3.0)+c*c0*t5993*t5999*t6023*t6015*t6024*t6016*t6008*t6027*(2.0/3.0)+c*c0*gamma_aa*t5994*t5997*t5999*t6022*t6023*t6015*t6024*t6016*t6008*(8.0/3.0))+t6032*t6035*(t6027*t6039*2.0+a3*c0*t5992*t5999*t6010*t6015*t6016*(8.0/3.0)-c*c0*t5993*t5999*t6020*t6021*t6015*t6008*(1.6E1/3.0)+c*c0*gamma_aa*t5994*t5997*t5999*t6022*t6015*t6016*t6008*(3.2E1/3.0))-1.0/(t6031*t6031)*t6035*t6038*(t6027*t6039*3.0+a3*c0*t5992*t5999*t6010*t6015*t6016*4.0-c*c0*t5993*t5999*t6020*t6021*t6015*t6008*8.0+c*c0*gamma_aa*t5994*t5997*t5999*t6022*t6015*t6016*t6008*1.6E1)+((t6012*t6012)*(t6004*t6004)*t6005*t6027*t6086*t6087*exp(-t5998)*(3.0/2.0))/t6008)*(1.0/2.0)-c0*t6100*dirac(t6042-t6012*t6004*t6040*t6041*1.0E5)*(t6023*t6024+t6032*t6035*t6038)*(1.0/2.0))+rho_a*(c0*t6096*heaviside(-t6042+t6089)*(t6073*t6078*(t6066*t6084*t6085*2.0-gamma_aa*t5996*t5997*t6043*t6049*t6068*8.0+a5*c0*t5992*t6010*t6060*t6046*t6049*(8.0/3.0)+c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6049*(3.2E1/3.0)-c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6069*(3.2E1/3.0))+t6081*t6073*(t6074+t6075+a5*c0*t5992*t6010*t6060*t6046*t6064*t6065*t6049*(2.0/3.0)-c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6069*(8.0/3.0)+c*c0*t5993*t6051*t6060*t6046*t6064*t6065*t6049*t6076*(2.0/3.0)+c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6064*t6065*t6049*(8.0/3.0)-c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6064*t6065*t6069*(8.0/3.0))+t6064*t6065*t6076-1.0/(t6072*t6072)*t6081*t6078*(t6066*t6084*t6085*3.0-gamma_aa*t5996*t5997*t6043*t6049*t6068*1.2E1+a5*c0*t5992*t6010*t6060*t6046*t6049*4.0+c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6049*1.6E1-c*c0*gamma_aa*t5997*t6022*t6051*t6060*t6043*t6046*t6069*1.6E1)+(t6005*(t6048*t6048)*t6076*(t6059*t6059)*t6086*t6087*exp(-t6045)*(3.0/2.0))/t6051)*(1.0/2.0)-c0*t6096*t6100*dirac(t6042-t6089)*(t6064*t6065+t6081*t6073*t6078)*(1.0/2.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t6103 = tspi_m13*tspi_m13;
                double t6104 = 1.0/pow(rho_b,1.0/3.0);
                double t6105 = a2*a2;
                double t6106 = gamma_bb*gamma_bb;
                double t6107 = 1.0/pow(rho_b,1.6E1/3.0);
                double t6108 = t6103*t6103;
                double t6109 = t6105*t6106*t6107*t6108*2.0;
                double t6110 = exp(t6109);
                double t6111 = c*t6104;
                double t6112 = pow(t6111,4.0/5.0);
                double t6124 = rab1*t6112;
                double t6113 = exp(-t6124);
                double t6114 = t6113-1.0;
                double t6125 = kab1*t6114;
                double t6115 = kab0-t6125;
                double t6116 = 1.0/c;
                double t6117 = 1.0/pow(rho_b,7.0/3.0);
                double t6118 = a3*gamma_bb*t6103*t6116*t6117;
                double t6119 = t6118+1.0;
                double t6120 = t6105*t6106*t6107*t6108;
                double t6121 = 1.0/pow(rho_b,8.0/3.0);
                double t6122 = a1*gamma_bb*t6103*t6121;
                double t6123 = t6120+t6122+1.0;
                double t6126 = 1.0/(t6115*t6115);
                double t6127 = 1.0/(t6123*t6123);
                double t6128 = c*c0*t6110*t6104*t6126*t6127*t6119*(2.0/3.0);
                double t6129 = a1*t6103*t6121;
                double t6130 = gamma_bb*t6105*t6107*t6108*2.0;
                double t6131 = t6130+t6129;
                double t6132 = 1.0/(t6123*t6123*t6123);
                double t6133 = 1.0/pow(rho_b,1.7E1/3.0);
                double t6134;
                double t6135;
                if (t6128 > expei_cutoff) {
                    t6134 = 1.0;
                    t6135 = expei(t6128);
                } else {
                    t6134 = exp(t6128);
                    t6135 = Ei(-t6128);
                }
                double t6136 = a3*c0*t6110*t6103*t6121*t6126*t6127*(2.0/3.0);
                double t6137 = c*c0*gamma_bb*t6110*t6105*t6133*t6108*t6126*t6127*t6119*(8.0/3.0);
                double t6144 = c*c0*t6110*t6104*t6131*t6132*t6126*t6119*(4.0/3.0);
                double t6138 = -t6144+t6136+t6137;
                double t6139 = sqrt(t6128);
                double t6140 = t6139*6.0;
                double t6141 = c*c0*t6110*t6104*t6126*t6127*t6119*4.0;
                double t6142 = t6140+t6141+3.0;
                double t6143 = 1.0/t6142;
                double t6145 = c*c0*t6110*t6104*t6134*t6126*t6135*t6127*t6119*(2.0/3.0);
                double t6146 = t6145+1.0;
                double t6147 = t6139*4.0;
                double t6148 = c*c0*t6110*t6104*t6126*t6127*t6119*(8.0/3.0);
                double t6149 = t6147+t6148+6.0;
                double t6150 = 1.0/sqrt(t6128);
                double t6151 = 1.0/sqrt(t6119);
                double t6152 = exp(-t6120);
                double t6153 = c*c0*t6104*(2.0/3.0);
                double t6154 = a4*a4;
                double t6155 = sqrt(t6111);
                double t6156 = t6106*t6107*t6108*t6154*2.0;
                double t6157 = exp(t6156);
                double t6158 = t6106*t6107*t6108*t6154;
                double t6159 = t6158+1.0;
                double t6160 = 1.0/(t6159*t6159);
                double t6161 = a5*gamma_bb*t6103*t6116*t6117;
                double t6162 = t6161+1.0;
                double t6173 = raa2*t6155;
                double t6163 = exp(-t6173);
                double t6164 = t6163-1.0;
                double t6165 = kaa2*t6164;
                double t6166 = pow(t6111,2.0/5.0);
                double t6174 = raa1*t6166;
                double t6167 = exp(-t6174);
                double t6168 = t6167-1.0;
                double t6169 = kaa1*t6168;
                double t6170 = -kaa0+t6165+t6169;
                double t6171 = 1.0/(t6170*t6170);
                double t6172 = c*c0*t6104*t6160*t6162*t6171*t6157*(2.0/3.0);
                double t6175;
                double t6176;
                if (t6172 > expei_cutoff) {
                    t6175 = 1.0;
                    t6176 = expei(t6172);
                } else {
                    t6175 = exp(t6172);
                    t6176 = Ei(-t6172);
                }
                double t6177 = 1.0/t6159;
                double t6178 = c*c0*t6104*t6162*t6171*t6157*(2.0/3.0);
                double t6179 = sqrt(t6178);
                double t6180 = 1.0/(t6159*t6159*t6159);
                double t6181 = t6177*t6179*6.0;
                double t6182 = c*c0*t6104*t6160*t6162*t6171*t6157*4.0;
                double t6183 = t6181+t6182+3.0;
                double t6184 = 1.0/t6183;
                double t6185 = a5*c0*t6103*t6121*t6160*t6171*t6157*(2.0/3.0);
                double t6186 = c*c0*gamma_bb*t6133*t6160*t6108*t6162*t6171*t6154*t6157*(8.0/3.0);
                double t6199 = c*c0*gamma_bb*t6133*t6108*t6162*t6171*t6180*t6154*t6157*(8.0/3.0);
                double t6187 = t6185+t6186-t6199;
                double t6188 = c*c0*t6104*t6160*t6162*t6171*t6157*t6175*t6176*(2.0/3.0);
                double t6189 = t6188+1.0;
                double t6190 = t6177*t6179*4.0;
                double t6191 = c*c0*t6104*t6160*t6162*t6171*t6157*(8.0/3.0);
                double t6192 = t6190+t6191+6.0;
                double t6193 = a5*c0*t6103*t6121*t6171*t6157*(2.0/3.0);
                double t6194 = c*c0*gamma_bb*t6133*t6108*t6162*t6171*t6154*t6157*(8.0/3.0);
                double t6195 = t6193+t6194;
                double t6196 = 1.0/sqrt(t6178);
                double t6197 = 1.0/c0;
                double t6198 = pow(rho_b,1.0/3.0);
                double t6200 = t6123*t6115*t6151*t6152*1.0E5;
                double t6201 = c*c;
                double t6202 = 1.0/pow(rho_b,2.0/3.0);
                double t6203 = k1*t6155;
                double t6204 = c*k2*t6104;
                double t6205 = t6203+t6204;
                double t6206 = 1.0/(t6205*t6205);
                double t6207 = exp(-t6201*t6202*t6206);
                double t6208 = 1.0/pow(t6119,3.0/2.0);
                double t6209 = a3*t6103*t6123*t6115*t6116*t6152*t6117*t6208*5.0E4;
                double t6210 = gamma_bb*t6105*t6123*t6115*t6151*t6107*t6152*t6108*2.0E5;
                double t6211 = t6210+t6209-t6131*t6115*t6151*t6152*1.0E5;
                v_gamma_bb[Q] += scale * rho_a*(c0*heaviside(c*c0*t6104*(-2.0/3.0)+t6123*t6115*t6151*exp(-t6105*t6106*t6107*t6108)*1.0E5)*(t6134*t6135*t6138+t6143*t6149*(-t6144+t6136+t6137+a3*c0*t6110*t6103*t6121*t6134*t6126*t6135*t6127*(2.0/3.0)-c*c0*t6110*t6104*t6131*t6132*t6134*t6126*t6135*t6119*(4.0/3.0)+c*c0*t6110*t6104*t6134*t6126*t6135*t6127*t6119*t6138*(2.0/3.0)+c*c0*gamma_bb*t6110*t6105*t6133*t6134*t6108*t6126*t6135*t6127*t6119*(8.0/3.0))+t6143*t6146*(t6150*t6138*2.0+a3*c0*t6110*t6103*t6121*t6126*t6127*(8.0/3.0)-c*c0*t6110*t6104*t6131*t6132*t6126*t6119*(1.6E1/3.0)+c*c0*gamma_bb*t6110*t6105*t6133*t6108*t6126*t6127*t6119*(3.2E1/3.0))-1.0/(t6142*t6142)*t6146*t6149*(t6150*t6138*3.0+a3*c0*t6110*t6103*t6121*t6126*t6127*4.0-c*c0*t6110*t6104*t6131*t6132*t6126*t6119*8.0+c*c0*gamma_bb*t6110*t6105*t6133*t6108*t6126*t6127*t6119*1.6E1)+((t6123*t6123)*(t6115*t6115)*t6116*t6138*t6197*t6198*exp(-t6109)*(3.0/2.0))/t6119)*(1.0/2.0)-c0*t6211*dirac(t6153-t6123*t6115*t6151*t6152*1.0E5)*(t6134*t6135+t6143*t6146*t6149)*(1.0/2.0))+rho_b*(c0*t6207*heaviside(-t6153+t6200)*(t6184*t6189*(t6177*t6195*t6196*2.0-gamma_bb*t6160*t6107*t6108*t6154*t6179*8.0+a5*c0*t6103*t6121*t6160*t6171*t6157*(8.0/3.0)+c*c0*gamma_bb*t6133*t6160*t6108*t6162*t6171*t6154*t6157*(3.2E1/3.0)-c*c0*gamma_bb*t6133*t6108*t6162*t6171*t6180*t6154*t6157*(3.2E1/3.0))+t6192*t6184*(t6185+t6186+a5*c0*t6103*t6121*t6160*t6171*t6157*t6175*t6176*(2.0/3.0)-c*c0*gamma_bb*t6133*t6108*t6162*t6171*t6180*t6154*t6157*(8.0/3.0)+c*c0*t6104*t6160*t6162*t6171*t6157*t6175*t6176*t6187*(2.0/3.0)+c*c0*gamma_bb*t6133*t6160*t6108*t6162*t6171*t6154*t6157*t6175*t6176*(8.0/3.0)-c*c0*gamma_bb*t6133*t6108*t6162*t6171*t6180*t6154*t6157*t6175*t6176*(8.0/3.0))+t6175*t6176*t6187-1.0/(t6183*t6183)*t6192*t6189*(t6177*t6195*t6196*3.0-gamma_bb*t6160*t6107*t6108*t6154*t6179*1.2E1+a5*c0*t6103*t6121*t6160*t6171*t6157*4.0+c*c0*gamma_bb*t6133*t6160*t6108*t6162*t6171*t6154*t6157*1.6E1-c*c0*gamma_bb*t6133*t6108*t6162*t6171*t6180*t6154*t6157*1.6E1)+(t6116*(t6170*t6170)*(t6159*t6159)*t6187*t6197*t6198*exp(-t6156)*(3.0/2.0))/t6162)*(1.0/2.0)-c0*t6211*t6207*dirac(t6153-t6200)*(t6175*t6176+t6192*t6184*t6189)*(1.0/2.0));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t6215 = tspi_m13*tspi_m13;
                double t6216 = 1.0/pow(rho_a,1.0/3.0);
                double t6217 = a2*a2;
                double t6218 = gamma_aa*gamma_aa;
                double t6219 = 1.0/pow(rho_a,1.6E1/3.0);
                double t6220 = t6215*t6215;
                double t6221 = c*t6216;
                double t6222 = a4*a4;
                double t6223 = 1.0/c;
                double t6224 = 1.0/pow(rho_a,7.0/3.0);
                double t6225 = sqrt(t6221);
                double t6226 = t6220*t6222*t6218*t6219*2.0;
                double t6227 = exp(t6226);
                double t6228 = t6220*t6222*t6218*t6219;
                double t6229 = t6228+1.0;
                double t6230 = a5*gamma_aa*t6223*t6215*t6224;
                double t6231 = t6230+1.0;
                double t6242 = raa2*t6225;
                double t6232 = exp(-t6242);
                double t6233 = t6232-1.0;
                double t6234 = kaa2*t6233;
                double t6235 = pow(t6221,2.0/5.0);
                double t6243 = raa1*t6235;
                double t6236 = exp(-t6243);
                double t6237 = t6236-1.0;
                double t6238 = kaa1*t6237;
                double t6239 = -kaa0+t6234+t6238;
                double t6240 = 1.0/(t6239*t6239);
                double t6241 = 1.0/t6229;
                double t6244 = 1.0/pow(rho_a,4.0/3.0);
                double t6245 = c*c0*t6231*t6240*t6216*t6227*(2.0/3.0);
                double t6246 = 1.0/(t6229*t6229);
                double t6247 = sqrt(t6245);
                double t6248 = 1.0/pow(rho_a,1.1E1/3.0);
                double t6249 = 1.0/sqrt(t6221);
                double t6250 = c*kaa2*raa2*t6232*t6244*t6249*(1.0/6.0);
                double t6251 = 1.0/pow(t6221,3.0/5.0);
                double t6252 = c*kaa1*raa1*t6251*t6244*t6236*(2.0/1.5E1);
                double t6253 = t6250+t6252;
                double t6254 = 1.0/(t6239*t6239*t6239);
                double t6255 = 1.0/pow(rho_a,2.0E1/3.0);
                double t6256 = c*c0*t6231*t6240*t6216*t6227*t6246*(2.0/3.0);
                double t6257;
                double t6258;
                if (t6256 > expei_cutoff) {
                    t6257 = 1.0;
                    t6258 = expei(t6256);
                } else {
                    t6257 = exp(t6256);
                    t6258 = Ei(-t6256);
                }
                double t6259 = c*c0*t6231*t6240*t6244*t6227*t6246*(2.0/9.0);
                double t6260 = a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6248*(1.4E1/9.0);
                double t6261 = c*c0*t6231*t6216*t6253*t6227*t6254*t6246*(4.0/3.0);
                double t6262 = 1.0/(t6229*t6229*t6229);
                double t6263 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6255*(6.4E1/9.0);
                double t6264 = t6241*t6247*6.0;
                double t6265 = c*c0*t6231*t6240*t6216*t6227*t6246*4.0;
                double t6266 = t6264+t6265+3.0;
                double t6267 = 1.0/t6266;
                double t6268 = 1.0/sqrt(t6245);
                double t6269 = c*c;
                double t6270 = 1.0/pow(rho_a,8.0/3.0);
                double t6271 = c*c0*t6231*t6240*t6244*t6227*(2.0/9.0);
                double t6272 = a5*c0*gamma_aa*t6240*t6215*t6227*t6248*(1.4E1/9.0);
                double t6273 = c*c0*t6231*t6216*t6253*t6227*t6254*(4.0/3.0);
                double t6274 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6255*(6.4E1/9.0);
                double t6275 = t6271+t6272+t6273+t6274;
                double t6276 = t6222*t6222;
                double t6277 = t6218*t6218;
                double t6278 = t6220*t6220;
                double t6279 = 1.0/pow(rho_a,1.9E1/3.0);
                double t6280 = raa2*raa2;
                double t6281 = c*kaa2*t6232*t6224*t6280*(1.0/3.6E1);
                double t6282 = raa1*raa1;
                double t6283 = 1.0/pow(t6221,6.0/5.0);
                double t6284 = kaa1*t6270*t6236*t6282*t6283*t6269*(4.0/2.25E2);
                double t6285 = 1.0/pow(t6221,3.0/2.0);
                double t6286 = kaa2*raa2*t6232*t6270*t6285*t6269*(1.0/3.6E1);
                double t6287 = 1.0/pow(t6221,8.0/5.0);
                double t6288 = kaa1*raa1*t6270*t6236*t6269*t6287*(2.0/7.5E1);
                double t6298 = c*kaa2*raa2*t6232*t6224*t6249*(2.0/9.0);
                double t6299 = c*kaa1*raa1*t6224*t6251*t6236*(8.0/4.5E1);
                double t6289 = t6281+t6284+t6286+t6288-t6298-t6299;
                double t6290 = t6253*t6253;
                double t6291 = 1.0/(t6239*t6239*t6239*t6239);
                double t6292 = 1.0/pow(rho_a,1.4E1/3.0);
                double t6293 = 1.0/pow(rho_a,1.0E1);
                double t6294 = 1.0/pow(rho_a,1.3E1);
                double t6295 = 1.0/pow(rho_a,2.3E1/3.0);
                double t6297 = c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6255*(6.4E1/9.0);
                double t6296 = t6260+t6261+t6263+t6259-t6297;
                double t6300 = t6296*t6296;
                double t6301 = 1.0/(t6229*t6229*t6229*t6229);
                double t6302 = c*c0*t6231*t6240*t6224*t6227*t6246*(8.0/2.7E1);
                double t6303 = c*c0*t6231*t6216*t6227*t6290*t6246*t6291*4.0;
                double t6304 = a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6292*(5.6E1/9.0);
                double t6305 = c*c0*t6231*t6244*t6253*t6227*t6254*t6246*(8.0/9.0);
                double t6306 = a5*c0*gamma_aa*t6215*t6253*t6227*t6254*t6246*t6248*(5.6E1/9.0);
                double t6307 = a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6218*t6227*t6246*t6293*(8.96E2/2.7E1);
                double t6308 = c*c0*t6231*t6240*t6227*t6246*t6276*t6294*t6277*t6278*(2.048E3/2.7E1);
                double t6309 = c*c0*t6231*t6240*t6227*t6276*t6294*t6277*t6278*t6301*(1.024E3/9.0);
                double t6310 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6295*(4.48E2/9.0);
                double t6311 = c*c0*t6220*t6222*t6231*t6253*t6218*t6227*t6254*t6246*t6255*(2.56E2/9.0);
                double t6359 = c*c0*t6231*t6216*t6227*t6254*t6246*t6289*(4.0/3.0);
                double t6360 = a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6262*t6218*t6227*t6293*(8.96E2/2.7E1);
                double t6361 = c*c0*t6231*t6240*t6262*t6227*t6276*t6294*t6277*t6278*(4.096E3/2.7E1);
                double t6362 = c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6295*(4.48E2/9.0);
                double t6363 = c*c0*t6220*t6222*t6231*t6253*t6262*t6218*t6227*t6254*t6255*(2.56E2/9.0);
                double t6312 = t6310+t6302+t6311+t6303+t6304+t6305+t6306-t6360+t6307-t6361+t6308-t6362+t6309-t6363-t6359;
                double t6313 = c*c0*t6231*t6240*t6216*t6227*t6246*t6257*t6258*(2.0/3.0);
                double t6314 = t6313+1.0;
                double t6315 = t6241*t6275*t6268*2.0;
                double t6316 = c*c0*t6231*t6240*t6244*t6227*t6246*(8.0/9.0);
                double t6317 = a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6248*(5.6E1/9.0);
                double t6318 = c*c0*t6231*t6216*t6253*t6227*t6254*t6246*(1.6E1/3.0);
                double t6319 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6255*(2.56E2/9.0);
                double t6381 = t6220*t6222*t6218*t6246*t6247*t6279*(6.4E1/3.0);
                double t6382 = c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6255*(2.56E2/9.0);
                double t6320 = t6315+t6316+t6317+t6318-t6381+t6319-t6382;
                double t6321 = 1.0/(t6266*t6266);
                double t6322 = t6241*t6247*4.0;
                double t6323 = c*c0*t6231*t6240*t6216*t6227*t6246*(8.0/3.0);
                double t6324 = t6322+t6323+6.0;
                double t6325 = t6241*t6275*t6268*3.0;
                double t6326 = c*c0*t6231*t6240*t6244*t6227*t6246*(4.0/3.0);
                double t6327 = a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6248*(2.8E1/3.0);
                double t6328 = c*c0*t6231*t6216*t6253*t6227*t6254*t6246*8.0;
                double t6329 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6255*(1.28E2/3.0);
                double t6350 = t6220*t6222*t6218*t6246*t6247*t6279*3.2E1;
                double t6351 = c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6255*(1.28E2/3.0);
                double t6330 = -t6350-t6351+t6325+t6326+t6327+t6328+t6329;
                double t6331 = c*c0*t6231*t6240*t6244*t6227*t6246*t6257*t6258*(2.0/9.0);
                double t6332 = c*c0*t6231*t6216*t6253*t6227*t6254*t6246*t6257*t6258*(4.0/3.0);
                double t6333 = c*c0*t6231*t6240*t6216*t6227*t6246*t6257*t6258*t6296*(2.0/3.0);
                double t6334 = a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6248*t6257*t6258*(1.4E1/9.0);
                double t6335 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6255*t6257*t6258*(6.4E1/9.0);
                double t6336 = c*c0*t6231*t6240*t6224*t6227*(8.0/2.7E1);
                double t6337 = a5*c0*gamma_aa*t6240*t6215*t6227*t6292*(5.6E1/9.0);
                double t6338 = c*c0*t6231*t6244*t6253*t6227*t6254*(8.0/9.0);
                double t6339 = c*c0*t6231*t6216*t6227*t6290*t6291*4.0;
                double t6340 = a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6218*t6227*t6293*(8.96E2/2.7E1);
                double t6341 = a5*c0*gamma_aa*t6215*t6253*t6227*t6254*t6248*(5.6E1/9.0);
                double t6342 = c*c0*t6231*t6240*t6227*t6276*t6294*t6277*t6278*(2.048E3/2.7E1);
                double t6343 = c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6295*(4.48E2/9.0);
                double t6344 = c*c0*t6220*t6222*t6231*t6253*t6218*t6227*t6254*t6255*(2.56E2/9.0);
                double t6345 = t6340+t6341+t6342+t6343+t6344+t6336+t6337+t6338+t6339-c*c0*t6231*t6216*t6227*t6254*t6289*(4.0/3.0);
                double t6346 = t6275*t6275;
                double t6347 = 1.0/pow(t6245,3.0/2.0);
                double t6348 = 1.0/pow(rho_a,2.2E1/3.0);
                double t6349 = 1.0/pow(rho_a,3.8E1/3.0);
                double t6352 = 1.0/pow(rho_a,2.0/3.0);
                double t6353 = 1.0/t6231;
                double t6354 = 1.0/c0;
                double t6355 = exp(-t6226);
                double t6356 = t6229*t6229;
                double t6357 = t6239*t6239;
                double t6358 = pow(rho_a,1.0/3.0);
                double t6364 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t6383 = c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6255*t6257*t6258*(6.4E1/9.0);
                double t6365 = t6260+t6261+t6263+t6259-t6297+t6331+t6332+t6333+t6334+t6335-t6383;
                double t6366 = t6220*t6217*t6218*t6219;
                double t6367 = pow(t6221,4.0/5.0);
                double t6385 = rab1*t6367;
                double t6368 = exp(-t6385);
                double t6369 = t6368-1.0;
                double t6386 = kab1*t6369;
                double t6370 = kab0-t6386;
                double t6371 = a3*gamma_aa*t6223*t6215*t6224;
                double t6372 = t6371+1.0;
                double t6373 = 1.0/sqrt(t6372);
                double t6374 = a1*gamma_aa*t6215*t6270;
                double t6375 = t6374+t6366+1.0;
                double t6376 = k1*t6225;
                double t6377 = c*k2*t6216;
                double t6378 = t6376+t6377;
                double t6379 = 1.0/(t6378*t6378);
                double t6388 = t6269*t6352*t6379;
                double t6380 = exp(-t6388);
                double t6384 = exp(-t6366);
                double t6387 = t6370*t6373*t6375*t6384*1.0E5;
                double t6389 = t6267*t6320*t6314;
                double t6390 = t6257*t6258*t6296;
                double t6391 = t6267*t6324*t6365;
                double t6392 = t6223*t6296*t6353*t6354*t6355*t6356*t6357*t6358*(3.0/2.0);
                double t6530 = t6321*t6330*t6314*t6324;
                double t6393 = t6390+t6391+t6392+t6389-t6530;
                double t6394 = 1.0/pow(rho_a,1.0E1/3.0);
                double t6395 = c*c0*t6216*(2.0/3.0);
                double t6396 = 1.0/(t6378*t6378*t6378);
                double t6397 = c*k2*t6244*(1.0/3.0);
                double t6398 = c*k1*t6244*t6249*(1.0/6.0);
                double t6399 = t6397+t6398;
                double t6400 = 1.0/pow(rho_a,5.0/3.0);
                double t6401 = -t6395+t6387;
                double t6402 = heaviside(t6401);
                double t6403 = t6257*t6258;
                double t6404 = t6267*t6314*t6324;
                double t6405 = t6403+t6404;
                double t6406 = t6269*t6379*t6400*(2.0/3.0);
                double t6420 = t6269*t6352*t6396*t6399*2.0;
                double t6407 = -t6420+t6406;
                double t6408 = t6395-t6387;
                double t6409 = c*c0*t6244*(2.0/9.0);
                double t6410 = t6220*t6217*t6218*t6279*(1.6E1/3.0);
                double t6411 = a1*gamma_aa*t6215*t6248*(8.0/3.0);
                double t6412 = t6410+t6411;
                double t6413 = t6220*t6217*t6218*t6279*t6370*t6373*t6375*t6384*(1.6E6/3.0);
                double t6414 = 1.0/pow(t6221,1.0/5.0);
                double t6415 = 1.0/pow(t6372,3.0/2.0);
                double t6416 = a3*gamma_aa*t6223*t6215*t6370*t6375*t6384*t6394*t6415*(3.5E5/3.0);
                double t6421 = t6370*t6373*t6384*t6412*1.0E5;
                double t6422 = c*kab1*rab1*t6244*t6373*t6375*t6384*t6368*t6414*(8.0E4/3.0);
                double t6417 = -t6421+t6413-t6422+t6416+t6409;
                double t6418 = dirac(t6408);
                double t6419 = 1.0/(c*c);
                double t6423 = t6220*t6217*t6218*t6219*2.0;
                double t6424 = exp(t6423);
                double t6425 = 1.0/(t6370*t6370);
                double t6426 = 1.0/(t6375*t6375);
                double t6427 = c*c0*t6216*t6372*t6424*t6425*t6426*(2.0/3.0);
                double t6428 = sqrt(t6427);
                double t6429 = 1.0/rho_a;
                double t6430 = c*c0*t6244*t6372*t6424*t6425*t6426*(2.0/9.0);
                double t6431 = 1.0/(t6375*t6375*t6375);
                double t6432 = a3*c0*gamma_aa*t6215*t6248*t6424*t6425*t6426*(1.4E1/9.0);
                double t6433 = c*c0*t6220*t6217*t6218*t6255*t6372*t6424*t6425*t6426*(6.4E1/9.0);
                double t6434 = 1.0/(t6370*t6370*t6370);
                double t6436 = c*c0*t6216*t6372*t6412*t6431*t6424*t6425*(4.0/3.0);
                double t6437 = c0*kab1*rab1*t6269*t6372*t6368*t6400*t6414*t6424*t6434*t6426*(1.6E1/4.5E1);
                double t6435 = t6430+t6432+t6433-t6436-t6437;
                double t6438 = t6220*t6217*t6218*t6348*(3.04E2/9.0);
                double t6439 = a1*gamma_aa*t6215*t6292*(8.8E1/9.0);
                double t6440 = t6438+t6439;
                double t6441;
                double t6442;
                if (t6427 > expei_cutoff) {
                    t6441 = 1.0;
                    t6442 = expei(t6427);
                } else {
                    t6441 = exp(t6427);
                    t6442 = Ei(-t6427);
                }
                double t6443 = c*c0*t6224*t6372*t6424*t6425*t6426*(8.0/2.7E1);
                double t6444 = t6412*t6412;
                double t6445 = 1.0/(t6375*t6375*t6375*t6375);
                double t6446 = c*c0*t6216*t6372*t6424*t6425*t6444*t6445*4.0;
                double t6447 = a3*c0*gamma_aa*t6215*t6292*t6424*t6425*t6426*(5.6E1/9.0);
                double t6448 = a3*c0*gamma_aa*t6220*t6215*t6217*t6218*t6293*t6424*t6425*t6426*(8.96E2/2.7E1);
                double t6449 = t6217*t6217;
                double t6450 = rab1*rab1;
                double t6451 = 1.0/(rho_a*rho_a*rho_a);
                double t6452 = 1.0/pow(t6221,2.0/5.0);
                double t6453 = t6435*t6435;
                double t6454 = c*c0*t6294*t6277*t6278*t6372*t6424*t6425*t6426*t6449*(2.048E3/2.7E1);
                double t6455 = c*c0*t6220*t6217*t6218*t6295*t6372*t6424*t6425*t6426*(4.48E2/9.0);
                double t6456 = c*c0*kab1*t6269*t6372*t6368*t6450*t6424*t6451*t6434*t6452*t6426*(6.4E1/6.75E2);
                double t6457 = kab1*kab1;
                double t6464 = rab1*t6367*2.0;
                double t6458 = exp(-t6464);
                double t6459 = 1.0/(t6370*t6370*t6370*t6370);
                double t6460 = c*c0*t6269*t6372*t6450*t6424*t6451*t6452*t6426*t6457*t6458*t6459*(6.4E1/2.25E2);
                double t6461 = c*c0*kab1*rab1*t6283*t6269*t6372*t6368*t6424*t6451*t6434*t6426*(1.6E1/6.75E2);
                double t6462 = c0*kab1*rab1*t6269*t6372*t6368*t6400*t6412*t6431*t6414*t6424*t6434*(6.4E1/4.5E1);
                double t6463 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t6465 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t6466 = t6428*6.0;
                double t6467 = c*c0*t6216*t6372*t6424*t6425*t6426*4.0;
                double t6468 = t6466+t6467+3.0;
                double t6469 = 1.0/t6468;
                double t6471 = c*c0*t6244*t6372*t6412*t6431*t6424*t6425*(8.0/9.0);
                double t6472 = c*c0*t6216*t6372*t6431*t6440*t6424*t6425*(4.0/3.0);
                double t6473 = a3*c0*gamma_aa*t6215*t6248*t6412*t6431*t6424*t6425*(5.6E1/9.0);
                double t6474 = c*c0*t6220*t6217*t6218*t6255*t6372*t6412*t6431*t6424*t6425*(2.56E2/9.0);
                double t6475 = c0*kab1*rab1*t6270*t6269*t6372*t6368*t6414*t6424*t6434*t6426*(3.2E1/4.5E1);
                double t6476 = a3*c*c0*gamma_aa*kab1*rab1*t6215*t6368*t6414*t6424*t6434*t6426*t6463*(2.24E2/1.35E2);
                double t6477 = c0*kab1*rab1*t6220*t6217*t6218*t6269*t6372*t6368*t6414*t6424*t6434*t6426*t6465*(1.024E3/1.35E2);
                double t6470 = t6460+t6443+t6461+t6462-t6471+t6454-t6472+t6446+t6455-t6473+t6447+t6456-t6474+t6448-t6475-t6476-t6477;
                double t6478 = 1.0/sqrt(t6427);
                double t6479 = t6428*4.0;
                double t6480 = c*c0*t6216*t6372*t6424*t6425*t6426*(8.0/3.0);
                double t6481 = t6480+t6479+6.0;
                double t6482 = c*c0*t6244*t6372*t6441*t6424*t6442*t6425*t6426*(2.0/9.0);
                double t6483 = a3*c0*gamma_aa*t6215*t6248*t6441*t6424*t6442*t6425*t6426*(1.4E1/9.0);
                double t6484 = c*c0*t6216*t6372*t6441*t6424*t6442*t6425*t6426*t6435*(2.0/3.0);
                double t6485 = c*c0*t6220*t6217*t6218*t6255*t6372*t6441*t6424*t6442*t6425*t6426*(6.4E1/9.0);
                double t6507 = c*c0*t6216*t6372*t6412*t6431*t6441*t6424*t6442*t6425*(4.0/3.0);
                double t6508 = c0*kab1*rab1*t6269*t6372*t6368*t6400*t6414*t6441*t6424*t6442*t6434*t6426*(1.6E1/4.5E1);
                double t6486 = t6430+t6432+t6433-t6436-t6437+t6482+t6483+t6484+t6485-t6507-t6508;
                double t6487 = c*c0*t6216*t6372*t6441*t6424*t6442*t6425*t6426*(2.0/3.0);
                double t6488 = t6487+1.0;
                double t6489 = 1.0/(t6468*t6468);
                double t6490 = 1.0/pow(t6427,3.0/2.0);
                double t6491 = t6435*t6478*3.0;
                double t6492 = c*c0*t6244*t6372*t6424*t6425*t6426*(4.0/3.0);
                double t6493 = a3*c0*gamma_aa*t6215*t6248*t6424*t6425*t6426*(2.8E1/3.0);
                double t6494 = c*c0*t6220*t6217*t6218*t6255*t6372*t6424*t6425*t6426*(1.28E2/3.0);
                double t6496 = c*c0*t6216*t6372*t6412*t6431*t6424*t6425*8.0;
                double t6497 = c0*kab1*rab1*t6269*t6372*t6368*t6400*t6414*t6424*t6434*t6426*(3.2E1/1.5E1);
                double t6495 = t6491+t6492+t6493+t6494-t6496-t6497;
                double t6498 = t6435*t6478*2.0;
                double t6499 = c*c0*t6244*t6372*t6424*t6425*t6426*(8.0/9.0);
                double t6500 = a3*c0*gamma_aa*t6215*t6248*t6424*t6425*t6426*(5.6E1/9.0);
                double t6501 = c*c0*t6220*t6217*t6218*t6255*t6372*t6424*t6425*t6426*(2.56E2/9.0);
                double t6509 = c*c0*t6216*t6372*t6412*t6431*t6424*t6425*(1.6E1/3.0);
                double t6510 = c0*kab1*rab1*t6269*t6372*t6368*t6400*t6414*t6424*t6434*t6426*(6.4E1/4.5E1);
                double t6502 = t6498+t6499+t6500+t6501-t6510-t6509;
                double t6503 = 1.0/t6372;
                double t6504 = exp(-t6423);
                double t6505 = t6370*t6370;
                double t6506 = t6375*t6375;
                double t6511 = dirac(t6408,1.0);
                double t6512 = t6417*t6417;
                double t6513 = t6441*t6442;
                double t6514 = t6481*t6469*t6488;
                double t6515 = t6513+t6514;
                double t6516 = c*c0*t6224*(8.0/2.7E1);
                double t6517 = t6220*t6217*t6218*t6370*t6373*t6348*t6375*t6384*(3.04E7/9.0);
                double t6518 = t6220*t6217*t6218*t6279*t6370*t6373*t6384*t6412*(3.2E6/3.0);
                double t6519 = kab1*t6270*t6269*t6373*t6375*t6384*t6368*t6450*t6452*(6.4E4/9.0);
                double t6520 = a3*a3;
                double t6521 = 1.0/pow(t6372,5.0/2.0);
                double t6522 = 1.0/pow(rho_a,1.3E1/3.0);
                double t6523 = a3*gamma_aa*t6223*t6215*t6370*t6375*t6384*t6415*t6522*(3.5E6/9.0);
                double t6524 = a3*gamma_aa*t6223*t6215*t6370*t6384*t6394*t6412*t6415*(7.0E5/3.0);
                double t6525 = kab1*rab1*t6270*t6283*t6269*t6373*t6375*t6384*t6368*(1.6E4/9.0);
                double t6526 = 1.0/pow(rho_a,2.9E1/3.0);
                double t6527 = a3*gamma_aa*kab1*rab1*t6215*t6292*t6375*t6384*t6368*t6414*t6415*(5.6E5/9.0);
                double t6528 = c*kab1*rab1*t6220*t6217*t6218*t6295*t6373*t6375*t6384*t6368*t6414*(2.56E6/9.0);
                double t6529 = t6523+t6524+t6516+t6525+t6517+t6518+t6527+t6519+t6528-t6370*t6373*t6384*t6440*1.0E5-t6277*t6278*t6370*t6373*t6375*t6384*t6349*t6449*(2.56E7/9.0)-c*kab1*rab1*t6224*t6373*t6375*t6384*t6368*t6414*(3.2E5/9.0)-c*kab1*rab1*t6244*t6373*t6384*t6368*t6412*t6414*(1.6E5/3.0)-t6220*t6218*t6255*t6370*t6375*t6384*t6419*t6520*t6521*(1.225E6/3.0)-a3*gamma_aa*t6220*t6223*t6215*t6217*t6218*t6370*t6375*t6384*t6415*t6526*(1.12E7/9.0);
                v_rho_a_rho_a[Q] += scale * -rho_b*(c0*t6402*(t6481*t6469*(t6460+t6443+t6461+t6453+t6462-t6471+t6454-t6472+t6446+t6455-t6473+t6447+t6456-t6474+t6448-t6475-t6476-t6477+t6435*t6429*(1.0/3.0)-(t6412*t6435*2.0)/t6375+t6220*t6217*t6218*t6279*t6435*(3.2E1/3.0)+a3*gamma_aa*t6223*t6215*t6394*t6435*t6503*(7.0/3.0)-(c*kab1*rab1*t6244*t6368*t6414*t6435*(8.0/1.5E1))/t6370+c*c0*t6224*t6372*t6441*t6424*t6442*t6425*t6426*(8.0/2.7E1)+a3*c0*gamma_aa*t6215*t6292*t6441*t6424*t6442*t6425*t6426*(5.6E1/9.0)-c*c0*t6216*t6372*t6431*t6440*t6441*t6424*t6442*t6425*(4.0/3.0)-c*c0*t6244*t6372*t6412*t6431*t6441*t6424*t6442*t6425*(8.0/9.0)+c*c0*t6216*t6372*t6441*t6424*t6442*t6425*t6470*t6426*(2.0/3.0)+c*c0*t6216*t6372*t6441*t6424*t6442*t6425*t6426*t6453*(2.0/3.0)+c*c0*t6216*t6372*t6441*t6424*t6442*t6425*t6444*t6445*4.0+c*c0*t6244*t6372*t6441*t6424*t6442*t6425*t6426*t6435*(4.0/9.0)-a3*c0*gamma_aa*t6215*t6248*t6412*t6431*t6441*t6424*t6442*t6425*(5.6E1/9.0)+a3*c0*gamma_aa*t6215*t6248*t6441*t6424*t6442*t6425*t6426*t6435*(2.8E1/9.0)-c*c0*t6216*t6372*t6412*t6431*t6441*t6424*t6442*t6425*t6435*(8.0/3.0)+c*c0*t6220*t6217*t6218*t6295*t6372*t6441*t6424*t6442*t6425*t6426*(4.48E2/9.0)+c*c0*t6294*t6277*t6278*t6372*t6441*t6424*t6442*t6425*t6426*t6449*(2.048E3/2.7E1)+a3*c0*gamma_aa*t6220*t6215*t6217*t6218*t6293*t6441*t6424*t6442*t6425*t6426*(8.96E2/2.7E1)-c*c0*t6220*t6217*t6218*t6255*t6372*t6412*t6431*t6441*t6424*t6442*t6425*(2.56E2/9.0)+c*c0*t6220*t6217*t6218*t6255*t6372*t6441*t6424*t6442*t6425*t6426*t6435*(1.28E2/9.0)-c0*kab1*rab1*t6270*t6269*t6372*t6368*t6414*t6441*t6424*t6442*t6434*t6426*(3.2E1/4.5E1)+c*c0*kab1*rab1*t6283*t6269*t6372*t6368*t6441*t6424*t6442*t6451*t6434*t6426*(1.6E1/6.75E2)+c*c0*kab1*t6269*t6372*t6368*t6441*t6450*t6424*t6442*t6451*t6434*t6452*t6426*(6.4E1/6.75E2)+c*c0*t6269*t6372*t6441*t6450*t6424*t6442*t6451*t6452*t6426*t6457*t6458*t6459*(6.4E1/2.25E2)+c0*kab1*rab1*t6269*t6372*t6368*t6400*t6412*t6431*t6414*t6441*t6424*t6442*t6434*(6.4E1/4.5E1)-c0*kab1*rab1*t6269*t6372*t6368*t6400*t6414*t6441*t6424*t6442*t6434*t6426*t6435*(3.2E1/4.5E1)-a3*c*c0*gamma_aa*kab1*rab1*t6215*t6368*t6414*t6441*t6424*t6442*t6434*t6426*t6463*(2.24E2/1.35E2)-c0*kab1*rab1*t6220*t6217*t6218*t6269*t6372*t6368*t6414*t6441*t6424*t6442*t6434*t6426*t6465*(1.024E3/1.35E2))+t6441*t6442*t6470+t6441*t6442*t6453+t6486*t6469*t6502*2.0+t6469*t6488*(-t6453*t6490+t6470*t6478*2.0+c*c0*t6224*t6372*t6424*t6425*t6426*(3.2E1/2.7E1)+a3*c0*gamma_aa*t6215*t6292*t6424*t6425*t6426*(2.24E2/9.0)-c*c0*t6216*t6372*t6431*t6440*t6424*t6425*(1.6E1/3.0)-c*c0*t6244*t6372*t6412*t6431*t6424*t6425*(3.2E1/9.0)+c*c0*t6216*t6372*t6424*t6425*t6444*t6445*1.6E1-a3*c0*gamma_aa*t6215*t6248*t6412*t6431*t6424*t6425*(2.24E2/9.0)+c*c0*t6220*t6217*t6218*t6295*t6372*t6424*t6425*t6426*(1.792E3/9.0)+c*c0*t6294*t6277*t6278*t6372*t6424*t6425*t6426*t6449*(8.192E3/2.7E1)+a3*c0*gamma_aa*t6220*t6215*t6217*t6218*t6293*t6424*t6425*t6426*(3.584E3/2.7E1)-c*c0*t6220*t6217*t6218*t6255*t6372*t6412*t6431*t6424*t6425*(1.024E3/9.0)-c0*kab1*rab1*t6270*t6269*t6372*t6368*t6414*t6424*t6434*t6426*(1.28E2/4.5E1)+c*c0*kab1*rab1*t6283*t6269*t6372*t6368*t6424*t6451*t6434*t6426*(6.4E1/6.75E2)+c*c0*kab1*t6269*t6372*t6368*t6450*t6424*t6451*t6434*t6452*t6426*(2.56E2/6.75E2)+c*c0*t6269*t6372*t6450*t6424*t6451*t6452*t6426*t6457*t6458*t6459*(2.56E2/2.25E2)+c0*kab1*rab1*t6269*t6372*t6368*t6400*t6412*t6431*t6414*t6424*t6434*(2.56E2/4.5E1)-a3*c*c0*gamma_aa*kab1*rab1*t6215*t6368*t6414*t6424*t6434*t6426*t6463*(8.96E2/1.35E2)-c0*kab1*rab1*t6220*t6217*t6218*t6269*t6372*t6368*t6414*t6424*t6434*t6426*t6465*(4.096E3/1.35E2))-t6481*t6486*t6495*t6489*2.0-t6495*t6488*t6489*t6502*2.0-t6481*t6488*t6489*(t6453*t6490*(-3.0/2.0)+t6470*t6478*3.0+c*c0*t6224*t6372*t6424*t6425*t6426*(1.6E1/9.0)+a3*c0*gamma_aa*t6215*t6292*t6424*t6425*t6426*(1.12E2/3.0)-c*c0*t6216*t6372*t6431*t6440*t6424*t6425*8.0-c*c0*t6244*t6372*t6412*t6431*t6424*t6425*(1.6E1/3.0)+c*c0*t6216*t6372*t6424*t6425*t6444*t6445*2.4E1-a3*c0*gamma_aa*t6215*t6248*t6412*t6431*t6424*t6425*(1.12E2/3.0)+c*c0*t6220*t6217*t6218*t6295*t6372*t6424*t6425*t6426*(8.96E2/3.0)+c*c0*t6294*t6277*t6278*t6372*t6424*t6425*t6426*t6449*(4.096E3/9.0)+a3*c0*gamma_aa*t6220*t6215*t6217*t6218*t6293*t6424*t6425*t6426*(1.792E3/9.0)-c*c0*t6220*t6217*t6218*t6255*t6372*t6412*t6431*t6424*t6425*(5.12E2/3.0)-c0*kab1*rab1*t6270*t6269*t6372*t6368*t6414*t6424*t6434*t6426*(6.4E1/1.5E1)+c*c0*kab1*rab1*t6283*t6269*t6372*t6368*t6424*t6451*t6434*t6426*(3.2E1/2.25E2)+c*c0*kab1*t6269*t6372*t6368*t6450*t6424*t6451*t6434*t6452*t6426*(1.28E2/2.25E2)+c*c0*t6269*t6372*t6450*t6424*t6451*t6452*t6426*t6457*t6458*t6459*(1.28E2/7.5E1)+c0*kab1*rab1*t6269*t6372*t6368*t6400*t6412*t6431*t6414*t6424*t6434*(1.28E2/1.5E1)-a3*c*c0*gamma_aa*kab1*rab1*t6215*t6368*t6414*t6424*t6434*t6426*t6463*(4.48E2/4.5E1)-c0*kab1*rab1*t6220*t6217*t6218*t6269*t6372*t6368*t6414*t6424*t6434*t6426*t6465*(2.048E3/4.5E1))+t6481*1.0/(t6468*t6468*t6468)*(t6495*t6495)*t6488*2.0-t6223*t6352*t6354*t6435*t6503*t6504*t6505*t6506*(1.0/2.0)+t6223*t6354*t6358*t6470*t6503*t6504*t6505*t6506*(3.0/2.0)+t6223*t6354*t6358*t6453*t6503*t6504*t6505*t6506*(3.0/2.0)+t6223*t6354*t6375*t6358*t6412*t6435*t6503*t6504*t6505*3.0+kab1*rab1*t6370*t6354*t6368*t6414*t6435*t6429*t6503*t6504*t6506*(4.0/5.0)-t6220*t6223*t6217*t6218*t6354*t6364*t6435*t6503*t6504*t6505*t6506*1.6E1-a3*gamma_aa*t6215*t6354*1.0/(t6372*t6372)*t6451*t6435*t6419*t6504*t6505*t6506*(7.0/2.0))*(-1.0/2.0)+c0*t6418*t6515*t6529*(1.0/2.0)+c0*t6511*t6512*t6515*(1.0/2.0)+c0*t6417*t6418*(t6441*t6442*t6435+t6481*t6486*t6469+t6469*t6488*t6502-t6481*t6495*t6488*t6489+t6223*t6354*t6358*t6435*t6503*t6504*t6505*t6506*(3.0/2.0)))-rho_a*(c0*t6380*t6402*(t6267*t6314*(t6241*t6268*t6345*2.0-t6241*t6346*t6347-t6220*t6222*t6218*t6246*t6247*t6348*(1.216E3/9.0)+t6262*t6247*t6276*t6277*t6278*t6349*(2.048E3/9.0)+c*c0*t6231*t6240*t6224*t6227*t6246*(3.2E1/2.7E1)-t6220*t6222*t6218*t6246*t6275*t6268*t6279*(6.4E1/3.0)+a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6292*(2.24E2/9.0)+c*c0*t6231*t6244*t6253*t6227*t6254*t6246*(3.2E1/9.0)+c*c0*t6231*t6216*t6227*t6290*t6246*t6291*1.6E1-c*c0*t6231*t6216*t6227*t6254*t6246*t6289*(1.6E1/3.0)+a5*c0*gamma_aa*t6215*t6253*t6227*t6254*t6246*t6248*(2.24E2/9.0)-c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6295*(1.792E3/9.0)+c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6295*(1.792E3/9.0)-c*c0*t6231*t6240*t6262*t6227*t6276*t6294*t6277*t6278*(1.6384E4/2.7E1)+c*c0*t6231*t6240*t6227*t6246*t6276*t6294*t6277*t6278*(8.192E3/2.7E1)+c*c0*t6231*t6240*t6227*t6276*t6294*t6277*t6278*t6301*(4.096E3/9.0)-a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6262*t6218*t6227*t6293*(3.584E3/2.7E1)+a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6218*t6227*t6246*t6293*(3.584E3/2.7E1)-c*c0*t6220*t6222*t6231*t6253*t6262*t6218*t6227*t6254*t6255*(1.024E3/9.0)+c*c0*t6220*t6222*t6231*t6253*t6218*t6227*t6254*t6246*t6255*(1.024E3/9.0))+t6257*t6258*t6300+t6257*t6258*t6312+t6267*t6320*t6365*2.0+t6267*t6324*(t6300+t6310+t6302+t6311+t6303+t6304+t6305+t6306-t6360+t6307-t6361+t6308-t6362+t6309-t6363-t6359+t6296*t6429*(1.0/3.0)+(t6253*t6296*2.0)/t6239+t6220*t6222*t6218*t6296*t6279*(3.2E1/3.0)-t6220*t6222*t6241*t6218*t6296*t6279*(3.2E1/3.0)+a5*gamma_aa*t6223*t6215*t6296*t6353*t6394*(7.0/3.0)+c*c0*t6231*t6240*t6224*t6227*t6246*t6257*t6258*(8.0/2.7E1)+a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6292*t6257*t6258*(5.6E1/9.0)+c*c0*t6231*t6244*t6253*t6227*t6254*t6246*t6257*t6258*(8.0/9.0)+c*c0*t6231*t6216*t6227*t6290*t6246*t6291*t6257*t6258*4.0+c*c0*t6231*t6240*t6244*t6227*t6246*t6257*t6258*t6296*(4.0/9.0)-c*c0*t6231*t6216*t6227*t6254*t6246*t6257*t6258*t6289*(4.0/3.0)+c*c0*t6231*t6240*t6216*t6227*t6246*t6257*t6258*t6300*(2.0/3.0)+c*c0*t6231*t6240*t6216*t6227*t6246*t6257*t6258*t6312*(2.0/3.0)+a5*c0*gamma_aa*t6215*t6253*t6227*t6254*t6246*t6248*t6257*t6258*(5.6E1/9.0)+a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6248*t6257*t6258*t6296*(2.8E1/9.0)+c*c0*t6231*t6216*t6253*t6227*t6254*t6246*t6257*t6258*t6296*(8.0/3.0)-c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6257*t6258*t6295*(4.48E2/9.0)+c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6257*t6258*t6295*(4.48E2/9.0)-c*c0*t6231*t6240*t6262*t6227*t6257*t6258*t6276*t6294*t6277*t6278*(4.096E3/2.7E1)+c*c0*t6231*t6240*t6227*t6246*t6257*t6258*t6276*t6294*t6277*t6278*(2.048E3/2.7E1)+c*c0*t6231*t6240*t6227*t6257*t6258*t6276*t6294*t6277*t6278*t6301*(1.024E3/9.0)-a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6262*t6218*t6227*t6257*t6293*t6258*(8.96E2/2.7E1)+a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6218*t6227*t6246*t6257*t6293*t6258*(8.96E2/2.7E1)-c*c0*t6220*t6222*t6231*t6253*t6262*t6218*t6227*t6254*t6255*t6257*t6258*(2.56E2/9.0)-c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6255*t6257*t6258*t6296*(1.28E2/9.0)+c*c0*t6220*t6222*t6231*t6253*t6218*t6227*t6254*t6246*t6255*t6257*t6258*(2.56E2/9.0)+c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6255*t6257*t6258*t6296*(1.28E2/9.0))-t6321*t6314*t6324*(t6241*t6268*t6345*3.0-t6241*t6346*t6347*(3.0/2.0)-t6220*t6222*t6218*t6246*t6247*t6348*(6.08E2/3.0)+t6262*t6247*t6276*t6277*t6278*t6349*(1.024E3/3.0)+c*c0*t6231*t6240*t6224*t6227*t6246*(1.6E1/9.0)-t6220*t6222*t6218*t6246*t6275*t6268*t6279*3.2E1+a5*c0*gamma_aa*t6240*t6215*t6227*t6246*t6292*(1.12E2/3.0)+c*c0*t6231*t6244*t6253*t6227*t6254*t6246*(1.6E1/3.0)+c*c0*t6231*t6216*t6227*t6290*t6246*t6291*2.4E1-c*c0*t6231*t6216*t6227*t6254*t6246*t6289*8.0+a5*c0*gamma_aa*t6215*t6253*t6227*t6254*t6246*t6248*(1.12E2/3.0)-c*c0*t6220*t6222*t6231*t6240*t6262*t6218*t6227*t6295*(8.96E2/3.0)+c*c0*t6220*t6222*t6231*t6240*t6218*t6227*t6246*t6295*(8.96E2/3.0)-c*c0*t6231*t6240*t6262*t6227*t6276*t6294*t6277*t6278*(8.192E3/9.0)+c*c0*t6231*t6240*t6227*t6246*t6276*t6294*t6277*t6278*(4.096E3/9.0)+c*c0*t6231*t6240*t6227*t6276*t6294*t6277*t6278*t6301*(2.048E3/3.0)-a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6262*t6218*t6227*t6293*(1.792E3/9.0)+a5*c0*gamma_aa*t6220*t6222*t6240*t6215*t6218*t6227*t6246*t6293*(1.792E3/9.0)-c*c0*t6220*t6222*t6231*t6253*t6262*t6218*t6227*t6254*t6255*(5.12E2/3.0)+c*c0*t6220*t6222*t6231*t6253*t6218*t6227*t6254*t6246*t6255*(5.12E2/3.0))-t6320*t6321*t6330*t6314*2.0-t6321*t6330*t6324*t6365*2.0+1.0/(t6266*t6266*t6266)*(t6330*t6330)*t6314*t6324*2.0-t6223*t6296*t6352*t6353*t6354*t6355*t6356*t6357*(1.0/2.0)+t6223*t6300*t6353*t6354*t6355*t6356*t6357*t6358*(3.0/2.0)+t6223*t6312*t6353*t6354*t6355*t6356*t6357*t6358*(3.0/2.0)-t6223*t6253*t6239*t6296*t6353*t6354*t6355*t6356*t6358*3.0+t6220*t6222*t6223*t6218*t6229*t6296*t6353*t6354*t6355*t6364*t6357*1.6E1-t6220*t6222*t6223*t6218*t6296*t6353*t6354*t6355*t6364*t6356*t6357*1.6E1-a5*gamma_aa*1.0/(t6231*t6231)*t6215*t6296*t6354*t6355*t6356*t6357*t6451*t6419*(7.0/2.0))*(-1.0/2.0)+c0*t6380*t6402*t6405*(t6270*t6269*t6379*(1.0E1/9.0)-t6269*t6396*t6399*t6400*(8.0/3.0)+t6269*t6352*1.0/(t6378*t6378*t6378*t6378)*(t6399*t6399)*6.0-t6269*t6352*t6396*(c*k2*t6224*(4.0/9.0)+c*k1*t6224*t6249*(2.0/9.0)-k1*t6270*t6285*t6269*(1.0/3.6E1))*2.0)*(1.0/2.0)+c0*t6380*t6393*t6402*t6407+c0*t6380*t6393*t6417*t6418+c0*t6380*t6405*t6418*t6529*(1.0/2.0)+c0*t6380*t6405*t6511*t6512*(1.0/2.0)-c0*t6380*t6402*t6405*(t6407*t6407)*(1.0/2.0)-c0*t6380*t6405*t6407*t6417*t6418)-c0*t6380*t6393*t6402+c0*t6380*t6402*t6405*t6407+c0*t6380*t6405*t6417*t6418;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t6532 = tspi_m13*tspi_m13;
                double t6533 = 1.0/pow(rho_a,1.0/3.0);
                double t6534 = a2*a2;
                double t6535 = gamma_aa*gamma_aa;
                double t6536 = 1.0/pow(rho_a,1.6E1/3.0);
                double t6537 = t6532*t6532;
                double t6538 = c*t6533;
                double t6539 = pow(t6538,4.0/5.0);
                double t6553 = rab1*t6539;
                double t6540 = exp(-t6553);
                double t6541 = t6540-1.0;
                double t6554 = kab1*t6541;
                double t6542 = kab0-t6554;
                double t6543 = 1.0/c;
                double t6544 = 1.0/pow(rho_a,7.0/3.0);
                double t6545 = a3*gamma_aa*t6532*t6543*t6544;
                double t6546 = t6545+1.0;
                double t6547 = t6534*t6535*t6536*t6537;
                double t6548 = 1.0/pow(rho_a,8.0/3.0);
                double t6549 = a1*gamma_aa*t6532*t6548;
                double t6550 = t6547+t6549+1.0;
                double t6551 = t6534*t6535*t6536*t6537*2.0;
                double t6552 = exp(t6551);
                double t6555 = 1.0/(t6542*t6542);
                double t6556 = 1.0/(t6550*t6550);
                double t6557 = c*c0*t6533*t6552*t6546*t6555*t6556*(2.0/3.0);
                double t6558 = sqrt(t6557);
                double t6559 = 1.0/pow(rho_a,1.1E1/3.0);
                double t6560 = 1.0/pow(rho_a,4.0/3.0);
                double t6561;
                double t6562;
                if (t6557 > expei_cutoff) {
                    t6561 = 1.0;
                    t6562 = expei(t6557);
                } else {
                    t6561 = exp(t6557);
                    t6562 = Ei(-t6557);
                }
                double t6563 = c*c0*t6560*t6552*t6546*t6555*t6556*(2.0/9.0);
                double t6564 = 1.0/pow(rho_a,1.9E1/3.0);
                double t6565 = t6534*t6535*t6537*t6564*(1.6E1/3.0);
                double t6566 = a1*gamma_aa*t6532*t6559*(8.0/3.0);
                double t6567 = t6565+t6566;
                double t6568 = 1.0/(t6550*t6550*t6550);
                double t6569 = a3*c0*gamma_aa*t6532*t6552*t6555*t6556*t6559*(1.4E1/9.0);
                double t6570 = 1.0/pow(rho_a,2.0E1/3.0);
                double t6571 = c*c0*t6534*t6552*t6570*t6535*t6537*t6546*t6555*t6556*(6.4E1/9.0);
                double t6572 = c*c;
                double t6573 = 1.0/pow(rho_a,5.0/3.0);
                double t6574 = 1.0/(t6542*t6542*t6542);
                double t6575 = 1.0/pow(t6538,1.0/5.0);
                double t6581 = c*c0*t6533*t6552*t6546*t6555*t6567*t6568*(4.0/3.0);
                double t6582 = c0*kab1*rab1*t6540*t6552*t6572*t6546*t6573*t6556*t6574*t6575*(1.6E1/4.5E1);
                double t6576 = t6571+t6563-t6581-t6582+t6569;
                double t6577 = t6558*6.0;
                double t6578 = c*c0*t6533*t6552*t6546*t6555*t6556*4.0;
                double t6579 = t6577+t6578+3.0;
                double t6580 = 1.0/t6579;
                double t6583 = c*c0*t6533*t6552*t6561*t6562*t6546*t6555*t6556*(2.0/3.0);
                double t6584 = t6583+1.0;
                double t6585 = t6558*4.0;
                double t6586 = c*c0*t6533*t6552*t6546*t6555*t6556*(8.0/3.0);
                double t6587 = t6585+t6586+6.0;
                double t6588 = 1.0/sqrt(t6557);
                double t6589 = 1.0/pow(rho_b,1.0/3.0);
                double t6590 = gamma_bb*gamma_bb;
                double t6591 = 1.0/pow(rho_b,1.6E1/3.0);
                double t6592 = c*t6589;
                double t6593 = pow(t6592,4.0/5.0);
                double t6606 = rab1*t6593;
                double t6594 = exp(-t6606);
                double t6595 = t6594-1.0;
                double t6607 = kab1*t6595;
                double t6596 = kab0-t6607;
                double t6597 = 1.0/pow(rho_b,7.0/3.0);
                double t6598 = a3*gamma_bb*t6532*t6543*t6597;
                double t6599 = t6598+1.0;
                double t6600 = t6534*t6590*t6537*t6591;
                double t6601 = 1.0/pow(rho_b,8.0/3.0);
                double t6602 = a1*gamma_bb*t6532*t6601;
                double t6603 = t6600+t6602+1.0;
                double t6604 = t6534*t6590*t6537*t6591*2.0;
                double t6605 = exp(t6604);
                double t6608 = 1.0/(t6596*t6596);
                double t6609 = 1.0/(t6603*t6603);
                double t6610 = c*c0*t6589*t6599*t6605*t6608*t6609*(2.0/3.0);
                double t6611 = sqrt(t6610);
                double t6612 = 1.0/pow(rho_b,1.1E1/3.0);
                double t6613 = 1.0/pow(rho_b,4.0/3.0);
                double t6614;
                double t6615;
                if (t6610 > expei_cutoff) {
                    t6614 = 1.0;
                    t6615 = expei(t6610);
                } else {
                    t6614 = exp(t6610);
                    t6615 = Ei(-t6610);
                }
                double t6616 = c*c0*t6599*t6613*t6605*t6608*t6609*(2.0/9.0);
                double t6617 = 1.0/pow(rho_b,1.9E1/3.0);
                double t6618 = t6534*t6590*t6537*t6617*(1.6E1/3.0);
                double t6619 = a1*gamma_bb*t6532*t6612*(8.0/3.0);
                double t6620 = t6618+t6619;
                double t6621 = 1.0/(t6603*t6603*t6603);
                double t6622 = a3*c0*gamma_bb*t6532*t6612*t6605*t6608*t6609*(1.4E1/9.0);
                double t6623 = 1.0/pow(rho_b,2.0E1/3.0);
                double t6624 = c*c0*t6534*t6590*t6537*t6599*t6605*t6623*t6608*t6609*(6.4E1/9.0);
                double t6625 = 1.0/pow(rho_b,5.0/3.0);
                double t6626 = 1.0/(t6596*t6596*t6596);
                double t6627 = 1.0/pow(t6592,1.0/5.0);
                double t6633 = c*c0*t6589*t6599*t6620*t6621*t6605*t6608*(4.0/3.0);
                double t6634 = c0*kab1*rab1*t6572*t6594*t6599*t6605*t6625*t6626*t6609*t6627*(1.6E1/4.5E1);
                double t6628 = t6622+t6624-t6633+t6616-t6634;
                double t6629 = t6611*6.0;
                double t6630 = c*c0*t6589*t6599*t6605*t6608*t6609*4.0;
                double t6631 = t6630+t6629+3.0;
                double t6632 = 1.0/t6631;
                double t6635 = c*c0*t6589*t6599*t6605*t6614*t6615*t6608*t6609*(2.0/3.0);
                double t6636 = t6635+1.0;
                double t6637 = t6611*4.0;
                double t6638 = c*c0*t6589*t6599*t6605*t6608*t6609*(8.0/3.0);
                double t6639 = t6637+t6638+6.0;
                double t6640 = 1.0/sqrt(t6610);
                double t6641 = 1.0/c0;
                double t6642 = exp(-t6547);
                double t6643 = 1.0/sqrt(t6546);
                double t6644 = t6550*t6542*t6642*t6643*1.0E5;
                double t6645 = exp(-t6600);
                double t6646 = 1.0/sqrt(t6599);
                double t6647 = t6596*t6603*t6645*t6646*1.0E5;
                v_rho_a_rho_b[Q] += scale * c0*heaviside(t6644-c*c0*t6533*(2.0/3.0))*(t6580*t6584*(t6576*t6588*2.0+c*c0*t6560*t6552*t6546*t6555*t6556*(8.0/9.0)+a3*c0*gamma_aa*t6532*t6552*t6555*t6556*t6559*(5.6E1/9.0)-c*c0*t6533*t6552*t6546*t6555*t6567*t6568*(1.6E1/3.0)+c*c0*t6534*t6552*t6570*t6535*t6537*t6546*t6555*t6556*(2.56E2/9.0)-c0*kab1*rab1*t6540*t6552*t6572*t6546*t6573*t6556*t6574*t6575*(6.4E1/4.5E1))+t6580*t6587*(t6571+t6563-t6581-t6582+t6569+c*c0*t6560*t6552*t6561*t6562*t6546*t6555*t6556*(2.0/9.0)+a3*c0*gamma_aa*t6532*t6552*t6561*t6562*t6555*t6556*t6559*(1.4E1/9.0)+c*c0*t6533*t6552*t6561*t6562*t6546*t6555*t6556*t6576*(2.0/3.0)-c*c0*t6533*t6552*t6561*t6562*t6546*t6555*t6567*t6568*(4.0/3.0)+c*c0*t6534*t6552*t6561*t6570*t6535*t6562*t6537*t6546*t6555*t6556*(6.4E1/9.0)-c0*kab1*rab1*t6540*t6552*t6561*t6562*t6572*t6546*t6573*t6556*t6574*t6575*(1.6E1/4.5E1))+t6561*t6562*t6576-t6584*t6587*1.0/(t6579*t6579)*(t6576*t6588*3.0+c*c0*t6560*t6552*t6546*t6555*t6556*(4.0/3.0)+a3*c0*gamma_aa*t6532*t6552*t6555*t6556*t6559*(2.8E1/3.0)-c*c0*t6533*t6552*t6546*t6555*t6567*t6568*8.0+c*c0*t6534*t6552*t6570*t6535*t6537*t6546*t6555*t6556*(1.28E2/3.0)-c0*kab1*rab1*t6540*t6552*t6572*t6546*t6573*t6556*t6574*t6575*(3.2E1/1.5E1))+(pow(rho_a,1.0/3.0)*(t6550*t6550)*(t6542*t6542)*t6543*t6576*t6641*exp(-t6551)*(3.0/2.0))/t6546)*(-1.0/2.0)-c0*heaviside(t6647-c*c0*t6589*(2.0/3.0))*(t6632*t6636*(t6640*t6628*2.0+c*c0*t6599*t6613*t6605*t6608*t6609*(8.0/9.0)+a3*c0*gamma_bb*t6532*t6612*t6605*t6608*t6609*(5.6E1/9.0)-c*c0*t6589*t6599*t6620*t6621*t6605*t6608*(1.6E1/3.0)+c*c0*t6534*t6590*t6537*t6599*t6605*t6623*t6608*t6609*(2.56E2/9.0)-c0*kab1*rab1*t6572*t6594*t6599*t6605*t6625*t6626*t6609*t6627*(6.4E1/4.5E1))+t6632*t6639*(t6622+t6624-t6633+t6616-t6634+c*c0*t6599*t6613*t6605*t6614*t6615*t6608*t6609*(2.0/9.0)+a3*c0*gamma_bb*t6532*t6612*t6605*t6614*t6615*t6608*t6609*(1.4E1/9.0)-c*c0*t6589*t6599*t6620*t6621*t6605*t6614*t6615*t6608*(4.0/3.0)+c*c0*t6589*t6599*t6605*t6614*t6615*t6608*t6609*t6628*(2.0/3.0)+c*c0*t6534*t6590*t6537*t6599*t6605*t6614*t6623*t6615*t6608*t6609*(6.4E1/9.0)-c0*kab1*rab1*t6572*t6594*t6599*t6605*t6614*t6615*t6625*t6626*t6609*t6627*(1.6E1/4.5E1))+t6614*t6615*t6628-1.0/(t6631*t6631)*t6636*t6639*(t6640*t6628*3.0+c*c0*t6599*t6613*t6605*t6608*t6609*(4.0/3.0)+a3*c0*gamma_bb*t6532*t6612*t6605*t6608*t6609*(2.8E1/3.0)-c*c0*t6589*t6599*t6620*t6621*t6605*t6608*8.0+c*c0*t6534*t6590*t6537*t6599*t6605*t6623*t6608*t6609*(1.28E2/3.0)-c0*kab1*rab1*t6572*t6594*t6599*t6605*t6625*t6626*t6609*t6627*(3.2E1/1.5E1))+(pow(rho_b,1.0/3.0)*t6543*(t6596*t6596)*(t6603*t6603)*t6641*t6628*exp(-t6604)*(3.0/2.0))/t6599)*(1.0/2.0)+c0*dirac(-t6644+c*c0*t6533*(2.0/3.0))*(t6561*t6562+t6580*t6584*t6587)*(c*c0*t6560*(2.0/9.0)-t6542*t6567*t6642*t6643*1.0E5+t6550*t6542*t6534*t6535*t6537*t6564*t6642*t6643*(1.6E6/3.0)+a3*gamma_aa*1.0/pow(rho_a,1.0E1/3.0)*t6532*t6550*t6542*t6543*1.0/pow(t6546,3.0/2.0)*t6642*(3.5E5/3.0)-c*kab1*rab1*t6540*t6550*t6560*t6575*t6642*t6643*(8.0E4/3.0))*(1.0/2.0)+c0*dirac(-t6647+c*c0*t6589*(2.0/3.0))*(t6614*t6615+t6632*t6636*t6639)*(c*c0*t6613*(2.0/9.0)-t6596*t6620*t6645*t6646*1.0E5+t6534*t6590*t6537*t6596*t6603*t6617*t6645*t6646*(1.6E6/3.0)+a3*gamma_bb*1.0/pow(rho_b,1.0E1/3.0)*t6532*t6543*t6596*1.0/pow(t6599,3.0/2.0)*t6603*t6645*(3.5E5/3.0)-c*kab1*rab1*t6594*t6603*t6613*t6627*t6645*t6646*(8.0E4/3.0))*(1.0/2.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t6649 = tspi_m13*tspi_m13;
                double t6650 = 1.0/pow(rho_b,1.0/3.0);
                double t6651 = a2*a2;
                double t6652 = gamma_bb*gamma_bb;
                double t6653 = 1.0/pow(rho_b,1.6E1/3.0);
                double t6654 = t6649*t6649;
                double t6655 = c*t6650;
                double t6656 = a4*a4;
                double t6657 = 1.0/c;
                double t6658 = 1.0/pow(rho_b,7.0/3.0);
                double t6659 = sqrt(t6655);
                double t6660 = t6652*t6653*t6654*t6656*2.0;
                double t6661 = exp(t6660);
                double t6662 = t6652*t6653*t6654*t6656;
                double t6663 = t6662+1.0;
                double t6664 = a5*gamma_bb*t6657*t6649*t6658;
                double t6665 = t6664+1.0;
                double t6676 = raa2*t6659;
                double t6666 = exp(-t6676);
                double t6667 = t6666-1.0;
                double t6668 = kaa2*t6667;
                double t6669 = pow(t6655,2.0/5.0);
                double t6677 = raa1*t6669;
                double t6670 = exp(-t6677);
                double t6671 = t6670-1.0;
                double t6672 = kaa1*t6671;
                double t6673 = -kaa0+t6672+t6668;
                double t6674 = 1.0/(t6673*t6673);
                double t6675 = 1.0/t6663;
                double t6678 = 1.0/pow(rho_b,4.0/3.0);
                double t6679 = c*c0*t6650*t6661*t6665*t6674*(2.0/3.0);
                double t6680 = 1.0/(t6663*t6663);
                double t6681 = sqrt(t6679);
                double t6682 = 1.0/pow(rho_b,1.1E1/3.0);
                double t6683 = 1.0/sqrt(t6655);
                double t6684 = c*kaa2*raa2*t6683*t6666*t6678*(1.0/6.0);
                double t6685 = 1.0/pow(t6655,3.0/5.0);
                double t6686 = c*kaa1*raa1*t6670*t6685*t6678*(2.0/1.5E1);
                double t6687 = t6684+t6686;
                double t6688 = 1.0/(t6673*t6673*t6673);
                double t6689 = 1.0/pow(rho_b,2.0E1/3.0);
                double t6690 = c*c0*t6650*t6661*t6680*t6665*t6674*(2.0/3.0);
                double t6691;
                double t6692;
                if (t6690 > expei_cutoff) {
                    t6691 = 1.0;
                    t6692 = expei(t6690);
                } else {
                    t6691 = exp(t6690);
                    t6692 = Ei(-t6690);
                }
                double t6693 = c*c0*t6661*t6680*t6665*t6674*t6678*(2.0/9.0);
                double t6694 = a5*c0*gamma_bb*t6661*t6680*t6682*t6674*t6649*(1.4E1/9.0);
                double t6695 = c*c0*t6650*t6661*t6680*t6665*t6687*t6688*(4.0/3.0);
                double t6696 = 1.0/(t6663*t6663*t6663);
                double t6697 = c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6674*t6689*(6.4E1/9.0);
                double t6698 = t6681*t6675*6.0;
                double t6699 = c*c0*t6650*t6661*t6680*t6665*t6674*4.0;
                double t6700 = t6698+t6699+3.0;
                double t6701 = 1.0/t6700;
                double t6702 = 1.0/sqrt(t6679);
                double t6703 = c*c;
                double t6704 = 1.0/pow(rho_b,8.0/3.0);
                double t6705 = c*c0*t6661*t6665*t6674*t6678*(2.0/9.0);
                double t6706 = a5*c0*gamma_bb*t6661*t6682*t6674*t6649*(1.4E1/9.0);
                double t6707 = c*c0*t6650*t6661*t6665*t6687*t6688*(4.0/3.0);
                double t6708 = c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6689*(6.4E1/9.0);
                double t6709 = t6705+t6706+t6707+t6708;
                double t6710 = t6656*t6656;
                double t6711 = t6652*t6652;
                double t6712 = t6654*t6654;
                double t6713 = 1.0/pow(rho_b,1.9E1/3.0);
                double t6714 = raa2*raa2;
                double t6715 = c*kaa2*t6666*t6658*t6714*(1.0/3.6E1);
                double t6716 = raa1*raa1;
                double t6717 = 1.0/pow(t6655,6.0/5.0);
                double t6718 = kaa1*t6670*t6703*t6704*t6716*t6717*(4.0/2.25E2);
                double t6719 = 1.0/pow(t6655,3.0/2.0);
                double t6720 = kaa2*raa2*t6666*t6703*t6704*t6719*(1.0/3.6E1);
                double t6721 = 1.0/pow(t6655,8.0/5.0);
                double t6722 = kaa1*raa1*t6670*t6703*t6721*t6704*(2.0/7.5E1);
                double t6732 = c*kaa2*raa2*t6683*t6666*t6658*(2.0/9.0);
                double t6733 = c*kaa1*raa1*t6670*t6658*t6685*(8.0/4.5E1);
                double t6723 = t6720+t6722-t6732+t6715-t6733+t6718;
                double t6724 = t6687*t6687;
                double t6725 = 1.0/(t6673*t6673*t6673*t6673);
                double t6726 = 1.0/pow(rho_b,1.4E1/3.0);
                double t6727 = 1.0/pow(rho_b,1.0E1);
                double t6728 = 1.0/pow(rho_b,1.3E1);
                double t6729 = 1.0/pow(rho_b,2.3E1/3.0);
                double t6731 = c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6696*t6689*(6.4E1/9.0);
                double t6730 = t6693+t6694+t6695+t6697-t6731;
                double t6734 = t6730*t6730;
                double t6735 = 1.0/(t6663*t6663*t6663*t6663);
                double t6736 = c*c0*t6661*t6680*t6665*t6674*t6658*(8.0/2.7E1);
                double t6737 = c*c0*t6650*t6661*t6680*t6665*t6724*t6725*4.0;
                double t6738 = a5*c0*gamma_bb*t6661*t6680*t6674*t6649*t6726*(5.6E1/9.0);
                double t6739 = c*c0*t6661*t6680*t6665*t6678*t6687*t6688*(8.0/9.0);
                double t6740 = a5*c0*gamma_bb*t6661*t6680*t6682*t6649*t6687*t6688*(5.6E1/9.0);
                double t6741 = a5*c0*gamma_bb*t6652*t6661*t6680*t6654*t6656*t6674*t6649*t6727*(8.96E2/2.7E1);
                double t6742 = c*c0*t6661*t6680*t6665*t6674*t6710*t6711*t6712*t6728*(2.048E3/2.7E1);
                double t6743 = c*c0*t6661*t6665*t6674*t6710*t6711*t6712*t6735*t6728*(1.024E3/9.0);
                double t6744 = c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6674*t6729*(4.48E2/9.0);
                double t6745 = c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6687*t6688*t6689*(2.56E2/9.0);
                double t6793 = c*c0*t6650*t6661*t6680*t6665*t6688*t6723*(4.0/3.0);
                double t6794 = a5*c0*gamma_bb*t6652*t6661*t6654*t6656*t6674*t6649*t6696*t6727*(8.96E2/2.7E1);
                double t6795 = c*c0*t6661*t6665*t6674*t6696*t6710*t6711*t6712*t6728*(4.096E3/2.7E1);
                double t6796 = c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6696*t6729*(4.48E2/9.0);
                double t6797 = c*c0*t6652*t6661*t6654*t6656*t6665*t6687*t6696*t6688*t6689*(2.56E2/9.0);
                double t6746 = t6740+t6741+t6742+t6743+t6744+t6736+t6745+t6737+t6738+t6739-t6793-t6794-t6795-t6796-t6797;
                double t6747 = c*c0*t6650*t6661*t6680*t6691*t6665*t6674*t6692*(2.0/3.0);
                double t6748 = t6747+1.0;
                double t6749 = t6675*t6702*t6709*2.0;
                double t6750 = c*c0*t6661*t6680*t6665*t6674*t6678*(8.0/9.0);
                double t6751 = a5*c0*gamma_bb*t6661*t6680*t6682*t6674*t6649*(5.6E1/9.0);
                double t6752 = c*c0*t6650*t6661*t6680*t6665*t6687*t6688*(1.6E1/3.0);
                double t6753 = c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6674*t6689*(2.56E2/9.0);
                double t6815 = t6652*t6680*t6654*t6681*t6656*t6713*(6.4E1/3.0);
                double t6816 = c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6696*t6689*(2.56E2/9.0);
                double t6754 = t6750+t6751+t6752+t6753+t6749-t6815-t6816;
                double t6755 = 1.0/(t6700*t6700);
                double t6756 = t6681*t6675*4.0;
                double t6757 = c*c0*t6650*t6661*t6680*t6665*t6674*(8.0/3.0);
                double t6758 = t6756+t6757+6.0;
                double t6759 = t6675*t6702*t6709*3.0;
                double t6760 = c*c0*t6661*t6680*t6665*t6674*t6678*(4.0/3.0);
                double t6761 = a5*c0*gamma_bb*t6661*t6680*t6682*t6674*t6649*(2.8E1/3.0);
                double t6762 = c*c0*t6650*t6661*t6680*t6665*t6687*t6688*8.0;
                double t6763 = c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6674*t6689*(1.28E2/3.0);
                double t6784 = t6652*t6680*t6654*t6681*t6656*t6713*3.2E1;
                double t6785 = c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6696*t6689*(1.28E2/3.0);
                double t6764 = t6760+t6761+t6762+t6763-t6784-t6785+t6759;
                double t6765 = c*c0*t6661*t6680*t6691*t6665*t6674*t6692*t6678*(2.0/9.0);
                double t6766 = c*c0*t6650*t6661*t6680*t6691*t6665*t6692*t6687*t6688*(4.0/3.0);
                double t6767 = c*c0*t6650*t6661*t6680*t6691*t6665*t6674*t6692*t6730*(2.0/3.0);
                double t6768 = a5*c0*gamma_bb*t6661*t6680*t6682*t6691*t6674*t6692*t6649*(1.4E1/9.0);
                double t6769 = c*c0*t6652*t6661*t6680*t6654*t6691*t6656*t6665*t6674*t6692*t6689*(6.4E1/9.0);
                double t6770 = c*c0*t6661*t6665*t6674*t6658*(8.0/2.7E1);
                double t6771 = a5*c0*gamma_bb*t6661*t6674*t6649*t6726*(5.6E1/9.0);
                double t6772 = c*c0*t6661*t6665*t6678*t6687*t6688*(8.0/9.0);
                double t6773 = c*c0*t6650*t6661*t6665*t6724*t6725*4.0;
                double t6774 = a5*c0*gamma_bb*t6652*t6661*t6654*t6656*t6674*t6649*t6727*(8.96E2/2.7E1);
                double t6775 = a5*c0*gamma_bb*t6661*t6682*t6649*t6687*t6688*(5.6E1/9.0);
                double t6776 = c*c0*t6661*t6665*t6674*t6710*t6711*t6712*t6728*(2.048E3/2.7E1);
                double t6777 = c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6729*(4.48E2/9.0);
                double t6778 = c*c0*t6652*t6661*t6654*t6656*t6665*t6687*t6688*t6689*(2.56E2/9.0);
                double t6779 = t6770+t6771+t6772+t6773+t6774+t6775+t6776+t6777+t6778-c*c0*t6650*t6661*t6665*t6688*t6723*(4.0/3.0);
                double t6780 = t6709*t6709;
                double t6781 = 1.0/pow(t6679,3.0/2.0);
                double t6782 = 1.0/pow(rho_b,2.2E1/3.0);
                double t6783 = 1.0/pow(rho_b,3.8E1/3.0);
                double t6786 = 1.0/pow(rho_b,2.0/3.0);
                double t6787 = 1.0/t6665;
                double t6788 = 1.0/c0;
                double t6789 = exp(-t6660);
                double t6790 = t6663*t6663;
                double t6791 = t6673*t6673;
                double t6792 = pow(rho_b,1.0/3.0);
                double t6798 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t6817 = c*c0*t6652*t6661*t6654*t6691*t6656*t6665*t6674*t6692*t6696*t6689*(6.4E1/9.0);
                double t6799 = t6693+t6694+t6695+t6697-t6731+t6765+t6766+t6767+t6768+t6769-t6817;
                double t6800 = t6651*t6652*t6653*t6654;
                double t6801 = pow(t6655,4.0/5.0);
                double t6819 = rab1*t6801;
                double t6802 = exp(-t6819);
                double t6803 = t6802-1.0;
                double t6820 = kab1*t6803;
                double t6804 = kab0-t6820;
                double t6805 = a3*gamma_bb*t6657*t6649*t6658;
                double t6806 = t6805+1.0;
                double t6807 = 1.0/sqrt(t6806);
                double t6808 = a1*gamma_bb*t6649*t6704;
                double t6809 = t6800+t6808+1.0;
                double t6810 = k1*t6659;
                double t6811 = c*k2*t6650;
                double t6812 = t6810+t6811;
                double t6813 = 1.0/(t6812*t6812);
                double t6822 = t6703*t6786*t6813;
                double t6814 = exp(-t6822);
                double t6818 = exp(-t6800);
                double t6821 = t6804*t6807*t6809*t6818*1.0E5;
                double t6823 = t6701*t6754*t6748;
                double t6824 = t6691*t6692*t6730;
                double t6825 = t6701*t6758*t6799;
                double t6826 = t6657*t6730*t6790*t6791*t6792*t6787*t6788*t6789*(3.0/2.0);
                double t6964 = t6755*t6764*t6748*t6758;
                double t6827 = t6823+t6824+t6825+t6826-t6964;
                double t6828 = 1.0/pow(rho_b,1.0E1/3.0);
                double t6829 = c*c0*t6650*(2.0/3.0);
                double t6830 = 1.0/(t6812*t6812*t6812);
                double t6831 = c*k2*t6678*(1.0/3.0);
                double t6832 = c*k1*t6683*t6678*(1.0/6.0);
                double t6833 = t6831+t6832;
                double t6834 = 1.0/pow(rho_b,5.0/3.0);
                double t6835 = t6821-t6829;
                double t6836 = heaviside(t6835);
                double t6837 = t6691*t6692;
                double t6838 = t6701*t6748*t6758;
                double t6839 = t6837+t6838;
                double t6840 = t6703*t6813*t6834*(2.0/3.0);
                double t6854 = t6703*t6786*t6830*t6833*2.0;
                double t6841 = t6840-t6854;
                double t6842 = -t6821+t6829;
                double t6843 = c*c0*t6678*(2.0/9.0);
                double t6844 = t6651*t6652*t6654*t6713*(1.6E1/3.0);
                double t6845 = a1*gamma_bb*t6682*t6649*(8.0/3.0);
                double t6846 = t6844+t6845;
                double t6847 = t6651*t6652*t6654*t6713*t6804*t6807*t6809*t6818*(1.6E6/3.0);
                double t6848 = 1.0/pow(t6655,1.0/5.0);
                double t6849 = 1.0/pow(t6806,3.0/2.0);
                double t6850 = a3*gamma_bb*t6657*t6649*t6804*t6809*t6818*t6828*t6849*(3.5E5/3.0);
                double t6855 = t6804*t6807*t6818*t6846*1.0E5;
                double t6856 = c*kab1*rab1*t6678*t6802*t6807*t6809*t6818*t6848*(8.0E4/3.0);
                double t6851 = t6850+t6843-t6855+t6847-t6856;
                double t6852 = dirac(t6842);
                double t6853 = 1.0/(c*c);
                double t6857 = t6651*t6652*t6653*t6654*2.0;
                double t6858 = exp(t6857);
                double t6859 = 1.0/(t6804*t6804);
                double t6860 = 1.0/(t6809*t6809);
                double t6861 = c*c0*t6650*t6806*t6860*t6858*t6859*(2.0/3.0);
                double t6862 = sqrt(t6861);
                double t6863 = 1.0/rho_b;
                double t6864 = c*c0*t6678*t6806*t6860*t6858*t6859*(2.0/9.0);
                double t6865 = 1.0/(t6809*t6809*t6809);
                double t6866 = a3*c0*gamma_bb*t6682*t6649*t6860*t6858*t6859*(1.4E1/9.0);
                double t6867 = c*c0*t6651*t6652*t6654*t6689*t6806*t6860*t6858*t6859*(6.4E1/9.0);
                double t6868 = 1.0/(t6804*t6804*t6804);
                double t6870 = c*c0*t6650*t6806*t6846*t6865*t6858*t6859*(4.0/3.0);
                double t6871 = c0*kab1*rab1*t6703*t6802*t6806*t6860*t6834*t6848*t6858*t6868*(1.6E1/4.5E1);
                double t6869 = -t6870-t6871+t6864+t6866+t6867;
                double t6872 = t6651*t6652*t6654*t6782*(3.04E2/9.0);
                double t6873 = a1*gamma_bb*t6649*t6726*(8.8E1/9.0);
                double t6874 = t6872+t6873;
                double t6875;
                double t6876;
                if (t6861 > expei_cutoff) {
                    t6875 = 1.0;
                    t6876 = expei(t6861);
                } else {
                    t6875 = exp(t6861);
                    t6876 = Ei(-t6861);
                }
                double t6877 = c*c0*t6658*t6806*t6860*t6858*t6859*(8.0/2.7E1);
                double t6878 = t6846*t6846;
                double t6879 = 1.0/(t6809*t6809*t6809*t6809);
                double t6880 = c*c0*t6650*t6806*t6858*t6859*t6878*t6879*4.0;
                double t6881 = a3*c0*gamma_bb*t6649*t6726*t6860*t6858*t6859*(5.6E1/9.0);
                double t6882 = a3*c0*gamma_bb*t6651*t6652*t6654*t6649*t6727*t6860*t6858*t6859*(8.96E2/2.7E1);
                double t6883 = t6651*t6651;
                double t6884 = rab1*rab1;
                double t6885 = 1.0/(rho_b*rho_b*rho_b);
                double t6886 = 1.0/pow(t6655,2.0/5.0);
                double t6887 = t6869*t6869;
                double t6888 = c*c0*t6711*t6712*t6728*t6806*t6860*t6883*t6858*t6859*(2.048E3/2.7E1);
                double t6889 = c*c0*t6651*t6652*t6654*t6729*t6806*t6860*t6858*t6859*(4.48E2/9.0);
                double t6890 = c*c0*kab1*t6703*t6802*t6806*t6860*t6884*t6858*t6885*t6868*t6886*(6.4E1/6.75E2);
                double t6891 = kab1*kab1;
                double t6898 = rab1*t6801*2.0;
                double t6892 = exp(-t6898);
                double t6893 = 1.0/(t6804*t6804*t6804*t6804);
                double t6894 = c*c0*t6703*t6806*t6860*t6891*t6892*t6884*t6893*t6858*t6885*t6886*(6.4E1/2.25E2);
                double t6895 = c*c0*kab1*rab1*t6703*t6717*t6802*t6806*t6860*t6858*t6885*t6868*(1.6E1/6.75E2);
                double t6896 = c0*kab1*rab1*t6703*t6802*t6806*t6834*t6846*t6865*t6848*t6858*t6868*(6.4E1/4.5E1);
                double t6897 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t6899 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t6900 = t6862*6.0;
                double t6901 = c*c0*t6650*t6806*t6860*t6858*t6859*4.0;
                double t6902 = t6900+t6901+3.0;
                double t6903 = 1.0/t6902;
                double t6905 = c*c0*t6678*t6806*t6846*t6865*t6858*t6859*(8.0/9.0);
                double t6906 = c*c0*t6650*t6806*t6865*t6874*t6858*t6859*(4.0/3.0);
                double t6907 = a3*c0*gamma_bb*t6682*t6649*t6846*t6865*t6858*t6859*(5.6E1/9.0);
                double t6908 = c*c0*t6651*t6652*t6654*t6689*t6806*t6846*t6865*t6858*t6859*(2.56E2/9.0);
                double t6909 = c0*kab1*rab1*t6703*t6704*t6802*t6806*t6860*t6848*t6858*t6868*(3.2E1/4.5E1);
                double t6910 = a3*c*c0*gamma_bb*kab1*rab1*t6649*t6802*t6860*t6848*t6858*t6868*t6897*(2.24E2/1.35E2);
                double t6911 = c0*kab1*rab1*t6651*t6652*t6654*t6703*t6802*t6806*t6860*t6848*t6858*t6868*t6899*(1.024E3/1.35E2);
                double t6904 = t6880+t6881+t6890+t6882+t6894+t6877+t6895+t6896+t6888+t6889-t6910-t6911-t6905-t6906-t6907-t6908-t6909;
                double t6912 = 1.0/sqrt(t6861);
                double t6913 = t6862*4.0;
                double t6914 = c*c0*t6650*t6806*t6860*t6858*t6859*(8.0/3.0);
                double t6915 = t6913+t6914+6.0;
                double t6916 = c*c0*t6678*t6806*t6860*t6875*t6858*t6876*t6859*(2.0/9.0);
                double t6917 = a3*c0*gamma_bb*t6682*t6649*t6860*t6875*t6858*t6876*t6859*(1.4E1/9.0);
                double t6918 = c*c0*t6650*t6806*t6860*t6875*t6858*t6876*t6859*t6869*(2.0/3.0);
                double t6919 = c*c0*t6651*t6652*t6654*t6689*t6806*t6860*t6875*t6858*t6876*t6859*(6.4E1/9.0);
                double t6941 = c*c0*t6650*t6806*t6846*t6865*t6875*t6858*t6876*t6859*(4.0/3.0);
                double t6942 = c0*kab1*rab1*t6703*t6802*t6806*t6860*t6834*t6848*t6875*t6858*t6876*t6868*(1.6E1/4.5E1);
                double t6920 = -t6870-t6871+t6864+t6866+t6867-t6941-t6942+t6916+t6917+t6918+t6919;
                double t6921 = c*c0*t6650*t6806*t6860*t6875*t6858*t6876*t6859*(2.0/3.0);
                double t6922 = t6921+1.0;
                double t6923 = 1.0/(t6902*t6902);
                double t6924 = 1.0/pow(t6861,3.0/2.0);
                double t6925 = t6869*t6912*3.0;
                double t6926 = c*c0*t6678*t6806*t6860*t6858*t6859*(4.0/3.0);
                double t6927 = a3*c0*gamma_bb*t6682*t6649*t6860*t6858*t6859*(2.8E1/3.0);
                double t6928 = c*c0*t6651*t6652*t6654*t6689*t6806*t6860*t6858*t6859*(1.28E2/3.0);
                double t6930 = c*c0*t6650*t6806*t6846*t6865*t6858*t6859*8.0;
                double t6931 = c0*kab1*rab1*t6703*t6802*t6806*t6860*t6834*t6848*t6858*t6868*(3.2E1/1.5E1);
                double t6929 = -t6930-t6931+t6925+t6926+t6927+t6928;
                double t6932 = t6869*t6912*2.0;
                double t6933 = c*c0*t6678*t6806*t6860*t6858*t6859*(8.0/9.0);
                double t6934 = a3*c0*gamma_bb*t6682*t6649*t6860*t6858*t6859*(5.6E1/9.0);
                double t6935 = c*c0*t6651*t6652*t6654*t6689*t6806*t6860*t6858*t6859*(2.56E2/9.0);
                double t6943 = c*c0*t6650*t6806*t6846*t6865*t6858*t6859*(1.6E1/3.0);
                double t6944 = c0*kab1*rab1*t6703*t6802*t6806*t6860*t6834*t6848*t6858*t6868*(6.4E1/4.5E1);
                double t6936 = t6932+t6933+t6934-t6943+t6935-t6944;
                double t6937 = 1.0/t6806;
                double t6938 = exp(-t6857);
                double t6939 = t6804*t6804;
                double t6940 = t6809*t6809;
                double t6945 = dirac(t6842,1.0);
                double t6946 = t6851*t6851;
                double t6947 = t6875*t6876;
                double t6948 = t6903*t6922*t6915;
                double t6949 = t6947+t6948;
                double t6950 = c*c0*t6658*(8.0/2.7E1);
                double t6951 = t6651*t6652*t6654*t6782*t6804*t6807*t6809*t6818*(3.04E7/9.0);
                double t6952 = t6651*t6652*t6654*t6713*t6804*t6807*t6818*t6846*(3.2E6/3.0);
                double t6953 = kab1*t6703*t6704*t6802*t6807*t6809*t6818*t6884*t6886*(6.4E4/9.0);
                double t6954 = a3*a3;
                double t6955 = 1.0/pow(t6806,5.0/2.0);
                double t6956 = 1.0/pow(rho_b,1.3E1/3.0);
                double t6957 = a3*gamma_bb*t6657*t6649*t6804*t6809*t6818*t6849*t6956*(3.5E6/9.0);
                double t6958 = a3*gamma_bb*t6657*t6649*t6804*t6818*t6828*t6846*t6849*(7.0E5/3.0);
                double t6959 = kab1*rab1*t6703*t6704*t6717*t6802*t6807*t6809*t6818*(1.6E4/9.0);
                double t6960 = 1.0/pow(rho_b,2.9E1/3.0);
                double t6961 = a3*gamma_bb*kab1*rab1*t6649*t6726*t6802*t6809*t6818*t6848*t6849*(5.6E5/9.0);
                double t6962 = c*kab1*rab1*t6651*t6652*t6654*t6729*t6802*t6807*t6809*t6818*t6848*(2.56E6/9.0);
                double t6963 = t6950+t6951+t6952+t6961+t6953+t6962+t6957+t6958+t6959-t6804*t6807*t6818*t6874*1.0E5-t6711*t6712*t6783*t6804*t6807*t6809*t6818*t6883*(2.56E7/9.0)-c*kab1*rab1*t6658*t6802*t6807*t6809*t6818*t6848*(3.2E5/9.0)-c*kab1*rab1*t6678*t6802*t6807*t6818*t6846*t6848*(1.6E5/3.0)-t6652*t6654*t6689*t6804*t6853*t6809*t6818*t6954*t6955*(1.225E6/3.0)-a3*gamma_bb*t6651*t6652*t6654*t6657*t6649*t6804*t6809*t6818*t6849*t6960*(1.12E7/9.0);
                v_rho_b_rho_b[Q] += scale * -rho_a*(c0*t6836*(t6903*t6915*(t6880+t6881+t6890+t6882+t6894+t6877+t6895+t6887+t6896+t6888+t6889-t6910-t6911-t6905-t6906-t6907-t6908-t6909+t6863*t6869*(1.0/3.0)-(t6846*t6869*2.0)/t6809+t6651*t6652*t6654*t6713*t6869*(3.2E1/3.0)+a3*gamma_bb*t6657*t6649*t6828*t6869*t6937*(7.0/3.0)-(c*kab1*rab1*t6678*t6802*t6848*t6869*(8.0/1.5E1))/t6804+c*c0*t6658*t6806*t6860*t6875*t6858*t6876*t6859*(8.0/2.7E1)+a3*c0*gamma_bb*t6649*t6726*t6860*t6875*t6858*t6876*t6859*(5.6E1/9.0)+c*c0*t6650*t6806*t6860*t6875*t6858*t6876*t6859*t6887*(2.0/3.0)-c*c0*t6650*t6806*t6865*t6874*t6875*t6858*t6876*t6859*(4.0/3.0)+c*c0*t6650*t6806*t6875*t6858*t6876*t6859*t6878*t6879*4.0+c*c0*t6678*t6806*t6860*t6875*t6858*t6876*t6859*t6869*(4.0/9.0)-c*c0*t6678*t6806*t6846*t6865*t6875*t6858*t6876*t6859*(8.0/9.0)+c*c0*t6650*t6806*t6860*t6875*t6858*t6876*t6859*t6904*(2.0/3.0)+a3*c0*gamma_bb*t6682*t6649*t6860*t6875*t6858*t6876*t6859*t6869*(2.8E1/9.0)-a3*c0*gamma_bb*t6682*t6649*t6846*t6865*t6875*t6858*t6876*t6859*(5.6E1/9.0)-c*c0*t6650*t6806*t6846*t6865*t6875*t6858*t6876*t6859*t6869*(8.0/3.0)+c*c0*t6651*t6652*t6654*t6729*t6806*t6860*t6875*t6858*t6876*t6859*(4.48E2/9.0)+c*c0*t6711*t6712*t6728*t6806*t6860*t6883*t6875*t6858*t6876*t6859*(2.048E3/2.7E1)+a3*c0*gamma_bb*t6651*t6652*t6654*t6649*t6727*t6860*t6875*t6858*t6876*t6859*(8.96E2/2.7E1)+c*c0*t6651*t6652*t6654*t6689*t6806*t6860*t6875*t6858*t6876*t6859*t6869*(1.28E2/9.0)-c*c0*t6651*t6652*t6654*t6689*t6806*t6846*t6865*t6875*t6858*t6876*t6859*(2.56E2/9.0)-c0*kab1*rab1*t6703*t6704*t6802*t6806*t6860*t6848*t6875*t6858*t6876*t6868*(3.2E1/4.5E1)+c*c0*kab1*rab1*t6703*t6717*t6802*t6806*t6860*t6875*t6858*t6876*t6885*t6868*(1.6E1/6.75E2)+c*c0*kab1*t6703*t6802*t6806*t6860*t6875*t6884*t6858*t6876*t6885*t6868*t6886*(6.4E1/6.75E2)+c*c0*t6703*t6806*t6860*t6891*t6892*t6875*t6884*t6893*t6858*t6876*t6885*t6886*(6.4E1/2.25E2)-c0*kab1*rab1*t6703*t6802*t6806*t6860*t6834*t6848*t6875*t6858*t6876*t6868*t6869*(3.2E1/4.5E1)+c0*kab1*rab1*t6703*t6802*t6806*t6834*t6846*t6865*t6848*t6875*t6858*t6876*t6868*(6.4E1/4.5E1)-a3*c*c0*gamma_bb*kab1*rab1*t6649*t6802*t6860*t6848*t6875*t6858*t6876*t6868*t6897*(2.24E2/1.35E2)-c0*kab1*rab1*t6651*t6652*t6654*t6703*t6802*t6806*t6860*t6848*t6875*t6858*t6876*t6868*t6899*(1.024E3/1.35E2))+t6875*t6876*t6887+t6875*t6876*t6904+t6920*t6903*t6936*2.0+t6903*t6922*(-t6887*t6924+t6912*t6904*2.0+c*c0*t6658*t6806*t6860*t6858*t6859*(3.2E1/2.7E1)+a3*c0*gamma_bb*t6649*t6726*t6860*t6858*t6859*(2.24E2/9.0)-c*c0*t6650*t6806*t6865*t6874*t6858*t6859*(1.6E1/3.0)+c*c0*t6650*t6806*t6858*t6859*t6878*t6879*1.6E1-c*c0*t6678*t6806*t6846*t6865*t6858*t6859*(3.2E1/9.0)-a3*c0*gamma_bb*t6682*t6649*t6846*t6865*t6858*t6859*(2.24E2/9.0)+c*c0*t6651*t6652*t6654*t6729*t6806*t6860*t6858*t6859*(1.792E3/9.0)+c*c0*t6711*t6712*t6728*t6806*t6860*t6883*t6858*t6859*(8.192E3/2.7E1)+a3*c0*gamma_bb*t6651*t6652*t6654*t6649*t6727*t6860*t6858*t6859*(3.584E3/2.7E1)-c*c0*t6651*t6652*t6654*t6689*t6806*t6846*t6865*t6858*t6859*(1.024E3/9.0)-c0*kab1*rab1*t6703*t6704*t6802*t6806*t6860*t6848*t6858*t6868*(1.28E2/4.5E1)+c*c0*kab1*rab1*t6703*t6717*t6802*t6806*t6860*t6858*t6885*t6868*(6.4E1/6.75E2)+c*c0*kab1*t6703*t6802*t6806*t6860*t6884*t6858*t6885*t6868*t6886*(2.56E2/6.75E2)+c*c0*t6703*t6806*t6860*t6891*t6892*t6884*t6893*t6858*t6885*t6886*(2.56E2/2.25E2)+c0*kab1*rab1*t6703*t6802*t6806*t6834*t6846*t6865*t6848*t6858*t6868*(2.56E2/4.5E1)-a3*c*c0*gamma_bb*kab1*rab1*t6649*t6802*t6860*t6848*t6858*t6868*t6897*(8.96E2/1.35E2)-c0*kab1*rab1*t6651*t6652*t6654*t6703*t6802*t6806*t6860*t6848*t6858*t6868*t6899*(4.096E3/1.35E2))-t6920*t6923*t6915*t6929*2.0-t6922*t6923*t6936*t6929*2.0-t6922*t6923*t6915*(t6887*t6924*(-3.0/2.0)+t6912*t6904*3.0+c*c0*t6658*t6806*t6860*t6858*t6859*(1.6E1/9.0)+a3*c0*gamma_bb*t6649*t6726*t6860*t6858*t6859*(1.12E2/3.0)-c*c0*t6650*t6806*t6865*t6874*t6858*t6859*8.0+c*c0*t6650*t6806*t6858*t6859*t6878*t6879*2.4E1-c*c0*t6678*t6806*t6846*t6865*t6858*t6859*(1.6E1/3.0)-a3*c0*gamma_bb*t6682*t6649*t6846*t6865*t6858*t6859*(1.12E2/3.0)+c*c0*t6651*t6652*t6654*t6729*t6806*t6860*t6858*t6859*(8.96E2/3.0)+c*c0*t6711*t6712*t6728*t6806*t6860*t6883*t6858*t6859*(4.096E3/9.0)+a3*c0*gamma_bb*t6651*t6652*t6654*t6649*t6727*t6860*t6858*t6859*(1.792E3/9.0)-c*c0*t6651*t6652*t6654*t6689*t6806*t6846*t6865*t6858*t6859*(5.12E2/3.0)-c0*kab1*rab1*t6703*t6704*t6802*t6806*t6860*t6848*t6858*t6868*(6.4E1/1.5E1)+c*c0*kab1*rab1*t6703*t6717*t6802*t6806*t6860*t6858*t6885*t6868*(3.2E1/2.25E2)+c*c0*kab1*t6703*t6802*t6806*t6860*t6884*t6858*t6885*t6868*t6886*(1.28E2/2.25E2)+c*c0*t6703*t6806*t6860*t6891*t6892*t6884*t6893*t6858*t6885*t6886*(1.28E2/7.5E1)+c0*kab1*rab1*t6703*t6802*t6806*t6834*t6846*t6865*t6848*t6858*t6868*(1.28E2/1.5E1)-a3*c*c0*gamma_bb*kab1*rab1*t6649*t6802*t6860*t6848*t6858*t6868*t6897*(4.48E2/4.5E1)-c0*kab1*rab1*t6651*t6652*t6654*t6703*t6802*t6806*t6860*t6848*t6858*t6868*t6899*(2.048E3/4.5E1))+1.0/(t6902*t6902*t6902)*t6922*t6915*(t6929*t6929)*2.0+t6657*t6792*t6788*t6887*t6940*t6937*t6938*t6939*(3.0/2.0)-t6657*t6786*t6788*t6869*t6940*t6937*t6938*t6939*(1.0/2.0)+t6657*t6792*t6788*t6904*t6940*t6937*t6938*t6939*(3.0/2.0)+t6657*t6792*t6788*t6809*t6846*t6869*t6937*t6938*t6939*3.0+kab1*rab1*t6788*t6802*t6804*t6863*t6848*t6869*t6940*t6937*t6938*(4.0/5.0)-t6651*t6652*t6654*t6657*t6788*t6798*t6869*t6940*t6937*t6938*t6939*1.6E1-a3*gamma_bb*t6649*t6788*1.0/(t6806*t6806)*t6853*t6885*t6869*t6940*t6938*t6939*(7.0/2.0))*(-1.0/2.0)+c0*t6852*t6963*t6949*(1.0/2.0)+c0*t6945*t6946*t6949*(1.0/2.0)+c0*t6851*t6852*(t6875*t6876*t6869+t6920*t6903*t6915+t6903*t6922*t6936-t6922*t6923*t6915*t6929+t6657*t6792*t6788*t6869*t6940*t6937*t6938*t6939*(3.0/2.0)))-rho_b*(c0*t6814*t6836*(t6701*t6748*(-t6675*t6780*t6781+t6675*t6702*t6779*2.0-t6652*t6680*t6654*t6681*t6656*t6782*(1.216E3/9.0)+t6681*t6696*t6710*t6711*t6712*t6783*(2.048E3/9.0)+c*c0*t6661*t6680*t6665*t6674*t6658*(3.2E1/2.7E1)-t6652*t6680*t6654*t6656*t6702*t6713*t6709*(6.4E1/3.0)+a5*c0*gamma_bb*t6661*t6680*t6674*t6649*t6726*(2.24E2/9.0)+c*c0*t6661*t6680*t6665*t6678*t6687*t6688*(3.2E1/9.0)-c*c0*t6650*t6661*t6680*t6665*t6688*t6723*(1.6E1/3.0)+c*c0*t6650*t6661*t6680*t6665*t6724*t6725*1.6E1+a5*c0*gamma_bb*t6661*t6680*t6682*t6649*t6687*t6688*(2.24E2/9.0)+c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6674*t6729*(1.792E3/9.0)-c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6696*t6729*(1.792E3/9.0)+c*c0*t6661*t6680*t6665*t6674*t6710*t6711*t6712*t6728*(8.192E3/2.7E1)-c*c0*t6661*t6665*t6674*t6696*t6710*t6711*t6712*t6728*(1.6384E4/2.7E1)+c*c0*t6661*t6665*t6674*t6710*t6711*t6712*t6735*t6728*(4.096E3/9.0)+a5*c0*gamma_bb*t6652*t6661*t6680*t6654*t6656*t6674*t6649*t6727*(3.584E3/2.7E1)-a5*c0*gamma_bb*t6652*t6661*t6654*t6656*t6674*t6649*t6696*t6727*(3.584E3/2.7E1)+c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6687*t6688*t6689*(1.024E3/9.0)-c*c0*t6652*t6661*t6654*t6656*t6665*t6687*t6696*t6688*t6689*(1.024E3/9.0))+t6691*t6692*t6734+t6691*t6692*t6746+t6701*t6754*t6799*2.0+t6701*t6758*(t6740+t6741+t6742+t6734+t6743+t6744+t6736+t6745+t6737+t6738+t6739-t6793-t6794-t6795-t6796-t6797+t6730*t6863*(1.0/3.0)+(t6687*t6730*2.0)/t6673+t6652*t6654*t6656*t6730*t6713*(3.2E1/3.0)-t6652*t6654*t6656*t6675*t6730*t6713*(3.2E1/3.0)+a5*gamma_bb*t6657*t6649*t6730*t6787*t6828*(7.0/3.0)+c*c0*t6661*t6680*t6691*t6665*t6674*t6692*t6658*(8.0/2.7E1)+a5*c0*gamma_bb*t6661*t6680*t6691*t6674*t6692*t6649*t6726*(5.6E1/9.0)+c*c0*t6661*t6680*t6691*t6665*t6692*t6678*t6687*t6688*(8.0/9.0)+c*c0*t6650*t6661*t6680*t6691*t6665*t6674*t6692*t6734*(2.0/3.0)+c*c0*t6650*t6661*t6680*t6691*t6665*t6674*t6692*t6746*(2.0/3.0)-c*c0*t6650*t6661*t6680*t6691*t6665*t6692*t6688*t6723*(4.0/3.0)+c*c0*t6661*t6680*t6691*t6665*t6674*t6692*t6678*t6730*(4.0/9.0)+c*c0*t6650*t6661*t6680*t6691*t6665*t6692*t6724*t6725*4.0+a5*c0*gamma_bb*t6661*t6680*t6682*t6691*t6692*t6649*t6687*t6688*(5.6E1/9.0)+a5*c0*gamma_bb*t6661*t6680*t6682*t6691*t6674*t6692*t6649*t6730*(2.8E1/9.0)+c*c0*t6650*t6661*t6680*t6691*t6665*t6692*t6687*t6688*t6730*(8.0/3.0)+c*c0*t6652*t6661*t6680*t6654*t6691*t6656*t6665*t6674*t6692*t6729*(4.48E2/9.0)-c*c0*t6652*t6661*t6654*t6691*t6656*t6665*t6674*t6692*t6696*t6729*(4.48E2/9.0)+c*c0*t6661*t6680*t6691*t6665*t6674*t6692*t6710*t6711*t6712*t6728*(2.048E3/2.7E1)-c*c0*t6661*t6691*t6665*t6674*t6692*t6696*t6710*t6711*t6712*t6728*(4.096E3/2.7E1)+c*c0*t6661*t6691*t6665*t6674*t6692*t6710*t6711*t6712*t6735*t6728*(1.024E3/9.0)+a5*c0*gamma_bb*t6652*t6661*t6680*t6654*t6691*t6656*t6674*t6692*t6649*t6727*(8.96E2/2.7E1)-a5*c0*gamma_bb*t6652*t6661*t6654*t6691*t6656*t6674*t6692*t6649*t6696*t6727*(8.96E2/2.7E1)+c*c0*t6652*t6661*t6680*t6654*t6691*t6656*t6665*t6692*t6687*t6688*t6689*(2.56E2/9.0)-c*c0*t6652*t6661*t6654*t6691*t6656*t6665*t6692*t6687*t6696*t6688*t6689*(2.56E2/9.0)+c*c0*t6652*t6661*t6680*t6654*t6691*t6656*t6665*t6674*t6692*t6689*t6730*(1.28E2/9.0)-c*c0*t6652*t6661*t6654*t6691*t6656*t6665*t6674*t6692*t6696*t6689*t6730*(1.28E2/9.0))-t6755*t6748*t6758*(t6675*t6780*t6781*(-3.0/2.0)+t6675*t6702*t6779*3.0-t6652*t6680*t6654*t6681*t6656*t6782*(6.08E2/3.0)+t6681*t6696*t6710*t6711*t6712*t6783*(1.024E3/3.0)+c*c0*t6661*t6680*t6665*t6674*t6658*(1.6E1/9.0)-t6652*t6680*t6654*t6656*t6702*t6713*t6709*3.2E1+a5*c0*gamma_bb*t6661*t6680*t6674*t6649*t6726*(1.12E2/3.0)+c*c0*t6661*t6680*t6665*t6678*t6687*t6688*(1.6E1/3.0)-c*c0*t6650*t6661*t6680*t6665*t6688*t6723*8.0+c*c0*t6650*t6661*t6680*t6665*t6724*t6725*2.4E1+a5*c0*gamma_bb*t6661*t6680*t6682*t6649*t6687*t6688*(1.12E2/3.0)+c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6674*t6729*(8.96E2/3.0)-c*c0*t6652*t6661*t6654*t6656*t6665*t6674*t6696*t6729*(8.96E2/3.0)+c*c0*t6661*t6680*t6665*t6674*t6710*t6711*t6712*t6728*(4.096E3/9.0)-c*c0*t6661*t6665*t6674*t6696*t6710*t6711*t6712*t6728*(8.192E3/9.0)+c*c0*t6661*t6665*t6674*t6710*t6711*t6712*t6735*t6728*(2.048E3/3.0)+a5*c0*gamma_bb*t6652*t6661*t6680*t6654*t6656*t6674*t6649*t6727*(1.792E3/9.0)-a5*c0*gamma_bb*t6652*t6661*t6654*t6656*t6674*t6649*t6696*t6727*(1.792E3/9.0)+c*c0*t6652*t6661*t6680*t6654*t6656*t6665*t6687*t6688*t6689*(5.12E2/3.0)-c*c0*t6652*t6661*t6654*t6656*t6665*t6687*t6696*t6688*t6689*(5.12E2/3.0))-t6754*t6755*t6764*t6748*2.0-t6755*t6764*t6758*t6799*2.0+1.0/(t6700*t6700*t6700)*(t6764*t6764)*t6748*t6758*2.0-t6657*t6730*t6790*t6791*t6786*t6787*t6788*t6789*(1.0/2.0)+t6657*t6734*t6790*t6791*t6792*t6787*t6788*t6789*(3.0/2.0)+t6657*t6790*t6746*t6791*t6792*t6787*t6788*t6789*(3.0/2.0)-t6673*t6657*t6687*t6730*t6790*t6792*t6787*t6788*t6789*3.0+t6652*t6654*t6663*t6656*t6657*t6730*t6791*t6787*t6788*t6789*t6798*1.6E1-t6652*t6654*t6656*t6657*t6730*t6790*t6791*t6787*t6788*t6789*t6798*1.6E1-a5*gamma_bb*1.0/(t6665*t6665)*t6649*t6730*t6790*t6791*t6788*t6789*t6853*t6885*(7.0/2.0))*(-1.0/2.0)+c0*t6814*t6836*t6839*(t6703*t6704*t6813*(1.0E1/9.0)-t6703*t6830*t6833*t6834*(8.0/3.0)+t6703*t6786*1.0/(t6812*t6812*t6812*t6812)*(t6833*t6833)*6.0-t6703*t6786*t6830*(c*k2*t6658*(4.0/9.0)+c*k1*t6683*t6658*(2.0/9.0)-k1*t6703*t6704*t6719*(1.0/3.6E1))*2.0)*(1.0/2.0)+c0*t6814*t6851*t6852*t6827+c0*t6814*t6841*t6827*t6836+c0*t6814*t6852*t6839*t6963*(1.0/2.0)+c0*t6814*t6839*t6945*t6946*(1.0/2.0)-c0*t6814*(t6841*t6841)*t6836*t6839*(1.0/2.0)-c0*t6814*t6841*t6851*t6852*t6839)-c0*t6814*t6827*t6836+c0*t6814*t6851*t6852*t6839+c0*t6814*t6841*t6836*t6839;
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t7718 = tspi_m13*tspi_m13;
                double t7719 = 1.0/pow(rho_a,1.0/3.0);
                double t7720 = a2*a2;
                double t7721 = gamma_aa*gamma_aa;
                double t7722 = 1.0/pow(rho_a,1.6E1/3.0);
                double t7723 = t7718*t7718;
                double t7724 = c*t7719;
                double t7725 = pow(t7724,4.0/5.0);
                double t7739 = rab1*t7725;
                double t7726 = exp(-t7739);
                double t7727 = t7726-1.0;
                double t7740 = kab1*t7727;
                double t7728 = kab0-t7740;
                double t7729 = 1.0/c;
                double t7730 = 1.0/pow(rho_a,7.0/3.0);
                double t7731 = a3*gamma_aa*t7730*t7718*t7729;
                double t7732 = t7731+1.0;
                double t7733 = t7720*t7721*t7722*t7723;
                double t7734 = 1.0/pow(rho_a,8.0/3.0);
                double t7735 = a1*gamma_aa*t7734*t7718;
                double t7736 = t7733+t7735+1.0;
                double t7737 = t7720*t7721*t7722*t7723*2.0;
                double t7738 = exp(t7737);
                double t7741 = 1.0/(t7728*t7728);
                double t7742 = 1.0/(t7736*t7736);
                double t7743 = c*c0*t7732*t7741*t7742*t7719*t7738*(2.0/3.0);
                double t7744 = a1*t7734*t7718;
                double t7745 = gamma_aa*t7720*t7722*t7723*2.0;
                double t7746 = t7744+t7745;
                double t7747 = 1.0/pow(rho_a,1.7E1/3.0);
                double t7748 = 1.0/(t7736*t7736*t7736);
                double t7749 = sqrt(t7743);
                double t7751 = a3*c0*t7741*t7742*t7734*t7718*t7738*(2.0/3.0);
                double t7752 = c*c0*t7732*t7741*t7719*t7746*t7738*t7748*(4.0/3.0);
                double t7753 = c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7742*t7738*t7747*(8.0/3.0);
                double t7750 = t7751-t7752+t7753;
                double t7754 = t7746*t7746;
                double t7755 = 1.0/(t7736*t7736*t7736*t7736);
                double t7756 = c*c0*t7732*t7741*t7754*t7719*t7755*t7738*4.0;
                double t7757 = c*c0*t7720*t7723*t7732*t7741*t7742*t7738*t7747*(8.0/3.0);
                double t7758 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t7759 = a3*c0*gamma_aa*t7720*t7723*t7741*t7742*t7718*t7738*t7758*(1.6E1/3.0);
                double t7760;
                double t7761;
                if (t7743 > expei_cutoff) {
                    t7760 = 1.0;
                    t7761 = expei(t7743);
                } else {
                    t7760 = exp(t7743);
                    t7761 = Ei(-t7743);
                }
                double t7762 = t7720*t7720;
                double t7763 = 1.0/pow(rho_a,1.1E1);
                double t7764 = t7723*t7723;
                double t7765 = c*c0*t7721*t7732*t7741*t7742*t7762*t7763*t7764*t7738*(3.2E1/3.0);
                double t7768 = c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7746*t7738*t7747*t7748*(3.2E1/3.0);
                double t7773 = a3*c0*t7741*t7734*t7718*t7746*t7738*t7748*(8.0/3.0);
                double t7774 = c*c0*t7720*t7723*t7732*t7741*t7738*t7747*t7748*(8.0/3.0);
                double t7766 = -t7773+t7756+t7765-t7774+t7757+t7759-t7768;
                double t7767 = t7750*t7750;
                double t7769 = t7749*6.0;
                double t7770 = c*c0*t7732*t7741*t7742*t7719*t7738*4.0;
                double t7771 = t7770+t7769+3.0;
                double t7772 = 1.0/t7771;
                double t7775 = 1.0/sqrt(t7743);
                double t7776 = c*c0*t7732*t7741*t7742*t7760*t7761*t7719*t7738*(2.0/3.0);
                double t7777 = t7776+1.0;
                double t7778 = t7750*t7775*2.0;
                double t7779 = a3*c0*t7741*t7742*t7734*t7718*t7738*(8.0/3.0);
                double t7780 = c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7742*t7738*t7747*(3.2E1/3.0);
                double t7817 = c*c0*t7732*t7741*t7719*t7746*t7738*t7748*(1.6E1/3.0);
                double t7781 = t7780+t7778+t7779-t7817;
                double t7782 = 1.0/(t7771*t7771);
                double t7783 = t7749*4.0;
                double t7784 = c*c0*t7732*t7741*t7742*t7719*t7738*(8.0/3.0);
                double t7785 = t7783+t7784+6.0;
                double t7786 = 1.0/pow(t7743,3.0/2.0);
                double t7787 = t7750*t7775*3.0;
                double t7788 = a3*c0*t7741*t7742*t7734*t7718*t7738*4.0;
                double t7789 = c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7742*t7738*t7747*1.6E1;
                double t7791 = c*c0*t7732*t7741*t7719*t7746*t7738*t7748*8.0;
                double t7790 = -t7791+t7787+t7788+t7789;
                double t7792 = a3*c0*t7741*t7742*t7760*t7734*t7761*t7718*t7738*(2.0/3.0);
                double t7793 = c*c0*t7732*t7741*t7750*t7742*t7760*t7761*t7719*t7738*(2.0/3.0);
                double t7794 = c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7742*t7760*t7761*t7738*t7747*(8.0/3.0);
                double t7818 = c*c0*t7732*t7741*t7760*t7761*t7719*t7746*t7738*t7748*(4.0/3.0);
                double t7795 = t7751-t7752+t7753+t7792+t7793+t7794-t7818;
                double t7796 = 1.0/t7732;
                double t7797 = 1.0/c0;
                double t7798 = pow(rho_a,1.0/3.0);
                double t7799 = exp(-t7737);
                double t7800 = t7728*t7728;
                double t7801 = t7736*t7736;
                double t7802 = 1.0/sqrt(t7732);
                double t7803 = exp(-t7733);
                double t7810 = 1.0/pow(t7732,3.0/2.0);
                double t7814 = t7728*t7746*t7802*t7803*1.0E5;
                double t7815 = a3*t7730*t7718*t7736*t7728*t7729*t7810*t7803*5.0E4;
                double t7816 = gamma_aa*t7720*t7722*t7723*t7736*t7728*t7802*t7803*2.0E5;
                double t7804 = -t7814+t7815+t7816;
                double t7805 = c*c0*t7719*(2.0/3.0);
                double t7812 = t7736*t7728*t7802*t7803*1.0E5;
                double t7806 = -t7812+t7805;
                double t7807 = t7760*t7761;
                double t7808 = t7772*t7785*t7777;
                double t7809 = t7807+t7808;
                double t7811 = 1.0/(c*c);
                double t7813 = dirac(t7806);
                double t7819 = a4*a4;
                double t7820 = t7721*t7722*t7723*t7819*2.0;
                double t7821 = exp(t7820);
                double t7822 = sqrt(t7724);
                double t7823 = t7721*t7722*t7723*t7819;
                double t7824 = t7823+1.0;
                double t7825 = 1.0/(t7824*t7824);
                double t7826 = a5*gamma_aa*t7730*t7718*t7729;
                double t7827 = t7826+1.0;
                double t7838 = raa2*t7822;
                double t7828 = exp(-t7838);
                double t7829 = t7828-1.0;
                double t7830 = kaa2*t7829;
                double t7831 = pow(t7724,2.0/5.0);
                double t7839 = raa1*t7831;
                double t7832 = exp(-t7839);
                double t7833 = t7832-1.0;
                double t7834 = kaa1*t7833;
                double t7835 = -kaa0+t7830+t7834;
                double t7836 = 1.0/(t7835*t7835);
                double t7837 = c*c0*t7719*t7821*t7825*t7827*t7836*(2.0/3.0);
                double t7840 = 1.0/t7824;
                double t7841 = c*c0*t7719*t7821*t7827*t7836*(2.0/3.0);
                double t7846 = a5*c0*t7734*t7718*t7821*t7836*(2.0/3.0);
                double t7847 = c*c0*gamma_aa*t7723*t7747*t7821*t7827*t7836*t7819*(8.0/3.0);
                double t7842 = t7846+t7847;
                double t7843 = sqrt(t7841);
                double t7844 = t7819*t7819;
                double t7845 = 1.0/pow(rho_a,3.2E1/3.0);
                double t7848 = 1.0/sqrt(t7841);
                double t7849 = 1.0/(t7824*t7824*t7824);
                double t7850 = t7840*t7843*6.0;
                double t7851 = c*c0*t7719*t7821*t7825*t7827*t7836*4.0;
                double t7852 = t7850+t7851+3.0;
                double t7853 = 1.0/t7852;
                double t7855 = a5*c0*t7734*t7718*t7821*t7825*t7836*(2.0/3.0);
                double t7856 = c*c0*gamma_aa*t7723*t7747*t7821*t7825*t7827*t7836*t7819*(8.0/3.0);
                double t7857 = c*c0*gamma_aa*t7723*t7747*t7821*t7827*t7836*t7819*t7849*(8.0/3.0);
                double t7854 = t7855+t7856-t7857;
                double t7858;
                double t7859;
                if (t7837 > expei_cutoff) {
                    t7858 = 1.0;
                    t7859 = expei(t7837);
                } else {
                    t7858 = exp(t7837);
                    t7859 = Ei(-t7837);
                }
                double t7860 = t7854*t7854;
                double t7861 = 1.0/(t7824*t7824*t7824*t7824);
                double t7862 = a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7825*t7836*t7819*(1.6E1/3.0);
                double t7863 = c*c0*t7723*t7747*t7821*t7825*t7827*t7836*t7819*(8.0/3.0);
                double t7864 = c*c0*t7721*t7763*t7764*t7821*t7825*t7844*t7827*t7836*(3.2E1/3.0);
                double t7865 = c*c0*t7721*t7763*t7764*t7821*t7861*t7844*t7827*t7836*1.6E1;
                double t7897 = a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7836*t7819*t7849*(1.6E1/3.0);
                double t7898 = c*c0*t7723*t7747*t7821*t7827*t7836*t7819*t7849*(8.0/3.0);
                double t7899 = c*c0*t7721*t7763*t7764*t7821*t7844*t7827*t7836*t7849*(6.4E1/3.0);
                double t7866 = t7862+t7863+t7864+t7865-t7897-t7898-t7899;
                double t7867 = t7840*t7843*4.0;
                double t7868 = c*c0*t7719*t7821*t7825*t7827*t7836*(8.0/3.0);
                double t7869 = t7867+t7868+6.0;
                double t7870 = a5*c0*t7734*t7718*t7821*t7825*t7836*t7858*t7859*(2.0/3.0);
                double t7871 = c*c0*t7719*t7821*t7825*t7827*t7836*t7854*t7858*t7859*(2.0/3.0);
                double t7872 = c*c0*gamma_aa*t7723*t7747*t7821*t7825*t7827*t7836*t7819*t7858*t7859*(8.0/3.0);
                double t7914 = c*c0*gamma_aa*t7723*t7747*t7821*t7827*t7836*t7819*t7849*t7858*t7859*(8.0/3.0);
                double t7873 = t7870+t7871+t7872+t7855+t7856-t7857-t7914;
                double t7874 = c*c0*t7719*t7821*t7825*t7827*t7836*t7858*t7859*(2.0/3.0);
                double t7875 = t7874+1.0;
                double t7876 = t7840*t7842*t7848*3.0;
                double t7877 = a5*c0*t7734*t7718*t7821*t7825*t7836*4.0;
                double t7878 = c*c0*gamma_aa*t7723*t7747*t7821*t7825*t7827*t7836*t7819*1.6E1;
                double t7881 = gamma_aa*t7722*t7723*t7825*t7843*t7819*1.2E1;
                double t7882 = c*c0*gamma_aa*t7723*t7747*t7821*t7827*t7836*t7819*t7849*1.6E1;
                double t7879 = -t7881-t7882+t7876+t7877+t7878;
                double t7880 = 1.0/(t7852*t7852);
                double t7883 = t7840*t7842*t7848*2.0;
                double t7884 = a5*c0*t7734*t7718*t7821*t7825*t7836*(8.0/3.0);
                double t7885 = c*c0*gamma_aa*t7723*t7747*t7821*t7825*t7827*t7836*t7819*(3.2E1/3.0);
                double t7912 = gamma_aa*t7722*t7723*t7825*t7843*t7819*8.0;
                double t7913 = c*c0*gamma_aa*t7723*t7747*t7821*t7827*t7836*t7819*t7849*(3.2E1/3.0);
                double t7886 = t7883+t7884+t7885-t7912-t7913;
                double t7887 = a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7836*t7819*(1.6E1/3.0);
                double t7888 = c*c0*t7723*t7747*t7821*t7827*t7836*t7819*(8.0/3.0);
                double t7889 = c*c0*t7721*t7763*t7764*t7821*t7844*t7827*t7836*(3.2E1/3.0);
                double t7890 = t7887+t7888+t7889;
                double t7891 = t7842*t7842;
                double t7892 = 1.0/pow(t7841,3.0/2.0);
                double t7893 = 1.0/t7827;
                double t7894 = exp(-t7820);
                double t7895 = t7824*t7824;
                double t7896 = t7835*t7835;
                double t7900 = 1.0/(rho_a*rho_a);
                double t7901 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t7902 = c*c;
                double t7903 = 1.0/pow(rho_a,2.0/3.0);
                double t7904 = k1*t7822;
                double t7905 = c*k2*t7719;
                double t7906 = t7904+t7905;
                double t7907 = 1.0/(t7906*t7906);
                double t7911 = t7902*t7903*t7907;
                double t7908 = exp(-t7911);
                double t7909 = dirac(t7806,1.0);
                double t7910 = t7804*t7804;
                double t7915 = t7858*t7859;
                double t7916 = t7853*t7875*t7869;
                double t7917 = t7915+t7916;
                double t7918 = t7720*t7722*t7723*t7728*t7802*t7803*2.0E5;
                double t7919 = a3*a3;
                double t7920 = 1.0/pow(rho_a,1.4E1/3.0);
                double t7921 = 1.0/pow(t7732,5.0/2.0);
                double t7922 = t7723*t7736*t7728*t7811*t7803*t7920*t7921*t7919*7.5E4;
                double t7923 = t7721*t7762*t7736*t7728*t7764*t7802*t7803*t7845*4.0E5;
                double t7924 = 1.0/pow(rho_a,2.3E1/3.0);
                double t7925 = a3*gamma_aa*t7720*t7723*t7718*t7736*t7728*t7729*t7810*t7803*t7924*2.0E5;
                double t7926 = t7922+t7923+t7925+t7918-t7720*t7722*t7723*t7736*t7728*t7802*t7803*2.0E5-a3*t7730*t7718*t7728*t7746*t7729*t7810*t7803*1.0E5-gamma_aa*t7720*t7722*t7723*t7728*t7746*t7802*t7803*4.0E5;
                v_gamma_aa_gamma_aa[Q] += scale * rho_b*(c0*heaviside(c*c0*t7719*(-2.0/3.0)+t7736*t7728*t7802*exp(-t7720*t7721*t7722*t7723)*1.0E5)*(t7772*t7777*(t7766*t7775*2.0-t7767*t7786-a3*c0*t7741*t7734*t7718*t7746*t7738*t7748*(3.2E1/3.0)+c*c0*t7732*t7741*t7754*t7719*t7755*t7738*1.6E1+c*c0*t7720*t7723*t7732*t7741*t7742*t7738*t7747*(3.2E1/3.0)-c*c0*t7720*t7723*t7732*t7741*t7738*t7747*t7748*(3.2E1/3.0)+a3*c0*gamma_aa*t7720*t7723*t7741*t7742*t7718*t7738*t7758*(6.4E1/3.0)+c*c0*t7721*t7732*t7741*t7742*t7762*t7763*t7764*t7738*(1.28E2/3.0)-c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7746*t7738*t7747*t7748*(1.28E2/3.0))+t7760*t7761*t7766+t7760*t7761*t7767+t7772*t7781*t7795*2.0+t7772*t7785*(t7756+t7765+t7757+t7767+t7759-t7768-(t7750*t7746*2.0)/t7736+gamma_aa*t7720*t7722*t7723*t7750*4.0+a3*t7730*t7750*t7718*t7729*t7796-a3*c0*t7741*t7734*t7718*t7746*t7738*t7748*(8.0/3.0)-c*c0*t7720*t7723*t7732*t7741*t7738*t7747*t7748*(8.0/3.0)+a3*c0*t7741*t7750*t7742*t7760*t7734*t7761*t7718*t7738*(4.0/3.0)-a3*c0*t7741*t7760*t7734*t7761*t7718*t7746*t7738*t7748*(8.0/3.0)+c*c0*t7732*t7741*t7742*t7760*t7761*t7719*t7738*t7766*(2.0/3.0)+c*c0*t7732*t7741*t7742*t7760*t7761*t7719*t7738*t7767*(2.0/3.0)+c*c0*t7732*t7741*t7760*t7761*t7754*t7719*t7755*t7738*4.0+c*c0*t7720*t7723*t7732*t7741*t7742*t7760*t7761*t7738*t7747*(8.0/3.0)-c*c0*t7720*t7723*t7732*t7741*t7760*t7761*t7738*t7747*t7748*(8.0/3.0)-c*c0*t7732*t7741*t7750*t7760*t7761*t7719*t7746*t7738*t7748*(8.0/3.0)+a3*c0*gamma_aa*t7720*t7723*t7741*t7742*t7760*t7761*t7718*t7738*t7758*(1.6E1/3.0)+c*c0*t7721*t7732*t7741*t7742*t7760*t7761*t7762*t7763*t7764*t7738*(3.2E1/3.0)+c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7750*t7742*t7760*t7761*t7738*t7747*(1.6E1/3.0)-c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7760*t7761*t7746*t7738*t7747*t7748*(3.2E1/3.0))-t7781*t7790*t7782*t7777*2.0-t7790*t7782*t7785*t7795*2.0-t7782*t7785*t7777*(t7766*t7775*3.0-t7767*t7786*(3.0/2.0)-a3*c0*t7741*t7734*t7718*t7746*t7738*t7748*1.6E1+c*c0*t7732*t7741*t7754*t7719*t7755*t7738*2.4E1+c*c0*t7720*t7723*t7732*t7741*t7742*t7738*t7747*1.6E1-c*c0*t7720*t7723*t7732*t7741*t7738*t7747*t7748*1.6E1+a3*c0*gamma_aa*t7720*t7723*t7741*t7742*t7718*t7738*t7758*3.2E1+c*c0*t7721*t7732*t7741*t7742*t7762*t7763*t7764*t7738*6.4E1-c*c0*gamma_aa*t7720*t7723*t7732*t7741*t7746*t7738*t7747*t7748*6.4E1)+1.0/(t7771*t7771*t7771)*(t7790*t7790)*t7785*t7777*2.0+t7729*t7766*t7796*t7797*t7798*t7799*t7800*t7801*(3.0/2.0)+t7729*t7767*t7796*t7797*t7798*t7799*t7800*t7801*(3.0/2.0)+t7750*t7736*t7746*t7729*t7796*t7797*t7798*t7799*t7800*3.0-a3*1.0/(t7732*t7732)*t7750*t7718*t7797*t7799*t7800*t7801*t7811*t7900*(3.0/2.0)-gamma_aa*t7720*t7723*t7750*t7729*t7796*t7797*t7799*t7800*t7801*t7901*6.0)*(1.0/2.0)+c0*t7813*t7809*t7926*(1.0/2.0)-c0*t7809*t7910*t7909*(1.0/2.0)-c0*t7804*t7813*(t7750*t7760*t7761+t7772*t7781*t7777+t7772*t7785*t7795-t7790*t7782*t7785*t7777+t7750*t7729*t7796*t7797*t7798*t7799*t7800*t7801*(3.0/2.0)))+rho_a*(c0*t7908*heaviside(t7812-t7805)*(t7853*t7869*(t7860+t7862+t7863+t7864+t7865+gamma_aa*t7722*t7723*t7854*t7819*4.0+a5*t7730*t7718*t7729*t7854*t7893-gamma_aa*t7722*t7723*t7840*t7854*t7819*4.0-c*c0*t7723*t7747*t7821*t7827*t7836*t7819*t7849*(8.0/3.0)-a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7836*t7819*t7849*(1.6E1/3.0)+a5*c0*t7734*t7718*t7821*t7825*t7836*t7854*t7858*t7859*(4.0/3.0)-c*c0*t7721*t7763*t7764*t7821*t7844*t7827*t7836*t7849*(6.4E1/3.0)+c*c0*t7719*t7821*t7860*t7825*t7827*t7836*t7858*t7859*(2.0/3.0)+c*c0*t7719*t7821*t7825*t7827*t7836*t7866*t7858*t7859*(2.0/3.0)+c*c0*t7723*t7747*t7821*t7825*t7827*t7836*t7819*t7858*t7859*(8.0/3.0)-c*c0*t7723*t7747*t7821*t7827*t7836*t7819*t7849*t7858*t7859*(8.0/3.0)+a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7825*t7836*t7819*t7858*t7859*(1.6E1/3.0)-a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7836*t7819*t7849*t7858*t7859*(1.6E1/3.0)+c*c0*t7721*t7763*t7764*t7821*t7825*t7844*t7827*t7836*t7858*t7859*(3.2E1/3.0)+c*c0*t7721*t7763*t7764*t7821*t7861*t7844*t7827*t7836*t7858*t7859*1.6E1-c*c0*t7721*t7763*t7764*t7821*t7844*t7827*t7836*t7849*t7858*t7859*(6.4E1/3.0)+c*c0*gamma_aa*t7723*t7747*t7821*t7825*t7827*t7836*t7854*t7819*t7858*t7859*(1.6E1/3.0)-c*c0*gamma_aa*t7723*t7747*t7821*t7827*t7836*t7854*t7819*t7849*t7858*t7859*(1.6E1/3.0))+t7853*t7873*t7886*2.0+t7860*t7858*t7859+t7866*t7858*t7859+t7853*t7875*(t7840*t7890*t7848*2.0-t7840*t7891*t7892-t7722*t7723*t7825*t7843*t7819*8.0+t7721*t7764*t7843*t7844*t7845*t7849*3.2E1-gamma_aa*t7722*t7723*t7842*t7825*t7819*t7848*8.0+c*c0*t7723*t7747*t7821*t7825*t7827*t7836*t7819*(3.2E1/3.0)-c*c0*t7723*t7747*t7821*t7827*t7836*t7819*t7849*(3.2E1/3.0)+a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7825*t7836*t7819*(6.4E1/3.0)-a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7836*t7819*t7849*(6.4E1/3.0)+c*c0*t7721*t7763*t7764*t7821*t7825*t7844*t7827*t7836*(1.28E2/3.0)+c*c0*t7721*t7763*t7764*t7821*t7861*t7844*t7827*t7836*6.4E1-c*c0*t7721*t7763*t7764*t7821*t7844*t7827*t7836*t7849*(2.56E2/3.0))-t7880*t7873*t7869*t7879*2.0-t7880*t7875*t7886*t7879*2.0-t7880*t7875*t7869*(t7840*t7890*t7848*3.0-t7840*t7891*t7892*(3.0/2.0)-t7722*t7723*t7825*t7843*t7819*1.2E1+t7721*t7764*t7843*t7844*t7845*t7849*4.8E1-gamma_aa*t7722*t7723*t7842*t7825*t7819*t7848*1.2E1+c*c0*t7723*t7747*t7821*t7825*t7827*t7836*t7819*1.6E1-c*c0*t7723*t7747*t7821*t7827*t7836*t7819*t7849*1.6E1+a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7825*t7836*t7819*3.2E1-a5*c0*gamma_aa*t7723*t7718*t7758*t7821*t7836*t7819*t7849*3.2E1+c*c0*t7721*t7763*t7764*t7821*t7825*t7844*t7827*t7836*6.4E1+c*c0*t7721*t7763*t7764*t7821*t7861*t7844*t7827*t7836*9.6E1-c*c0*t7721*t7763*t7764*t7821*t7844*t7827*t7836*t7849*1.28E2)+1.0/(t7852*t7852*t7852)*t7875*t7869*(t7879*t7879)*2.0+t7729*t7797*t7798*t7860*t7893*t7894*t7895*t7896*(3.0/2.0)+t7729*t7797*t7798*t7866*t7893*t7894*t7895*t7896*(3.0/2.0)-a5*t7718*t7797*t7811*1.0/(t7827*t7827)*t7854*t7894*t7895*t7896*t7900*(3.0/2.0)+gamma_aa*t7723*t7729*t7797*t7824*t7854*t7819*t7893*t7894*t7896*t7901*6.0-gamma_aa*t7723*t7729*t7797*t7854*t7819*t7893*t7894*t7895*t7896*t7901*6.0)*(1.0/2.0)+c0*t7813*t7908*t7917*t7926*(1.0/2.0)-c0*t7910*t7908*t7917*t7909*(1.0/2.0)-c0*t7804*t7813*t7908*(t7853*t7873*t7869+t7853*t7875*t7886+t7854*t7858*t7859-t7880*t7875*t7869*t7879+t7729*t7797*t7798*t7854*t7893*t7894*t7895*t7896*(3.0/2.0)));
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t7932 = tspi_m13*tspi_m13;
                double t7933 = 1.0/pow(rho_b,1.0/3.0);
                double t7934 = a2*a2;
                double t7935 = gamma_bb*gamma_bb;
                double t7936 = 1.0/pow(rho_b,1.6E1/3.0);
                double t7937 = t7932*t7932;
                double t7938 = c*t7933;
                double t7939 = pow(t7938,4.0/5.0);
                double t7953 = rab1*t7939;
                double t7940 = exp(-t7953);
                double t7941 = t7940-1.0;
                double t7954 = kab1*t7941;
                double t7942 = kab0-t7954;
                double t7943 = 1.0/c;
                double t7944 = 1.0/pow(rho_b,7.0/3.0);
                double t7945 = a3*gamma_bb*t7932*t7943*t7944;
                double t7946 = t7945+1.0;
                double t7947 = t7934*t7935*t7936*t7937;
                double t7948 = 1.0/pow(rho_b,8.0/3.0);
                double t7949 = a1*gamma_bb*t7932*t7948;
                double t7950 = t7947+t7949+1.0;
                double t7951 = t7934*t7935*t7936*t7937*2.0;
                double t7952 = exp(t7951);
                double t7955 = 1.0/(t7942*t7942);
                double t7956 = 1.0/(t7950*t7950);
                double t7957 = c*c0*t7933*t7952*t7946*t7955*t7956*(2.0/3.0);
                double t7958 = a1*t7932*t7948;
                double t7959 = gamma_bb*t7934*t7936*t7937*2.0;
                double t7960 = t7958+t7959;
                double t7961 = 1.0/pow(rho_b,1.7E1/3.0);
                double t7962 = 1.0/(t7950*t7950*t7950);
                double t7963 = sqrt(t7957);
                double t7965 = a3*c0*t7932*t7952*t7955*t7956*t7948*(2.0/3.0);
                double t7966 = c*c0*t7933*t7960*t7952*t7962*t7946*t7955*(4.0/3.0);
                double t7967 = c*c0*gamma_bb*t7934*t7952*t7961*t7937*t7946*t7955*t7956*(8.0/3.0);
                double t7964 = t7965-t7966+t7967;
                double t7968 = t7960*t7960;
                double t7969 = 1.0/(t7950*t7950*t7950*t7950);
                double t7970 = c*c0*t7933*t7952*t7946*t7955*t7968*t7969*4.0;
                double t7971 = c*c0*t7934*t7952*t7961*t7937*t7946*t7955*t7956*(8.0/3.0);
                double t7972 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t7973 = a3*c0*gamma_bb*t7932*t7934*t7952*t7972*t7937*t7955*t7956*(1.6E1/3.0);
                double t7974;
                double t7975;
                if (t7957 > expei_cutoff) {
                    t7974 = 1.0;
                    t7975 = expei(t7957);
                } else {
                    t7974 = exp(t7957);
                    t7975 = Ei(-t7957);
                }
                double t7976 = t7934*t7934;
                double t7977 = 1.0/pow(rho_b,1.1E1);
                double t7978 = t7937*t7937;
                double t7979 = c*c0*t7952*t7935*t7946*t7955*t7956*t7976*t7977*t7978*(3.2E1/3.0);
                double t7982 = c*c0*gamma_bb*t7960*t7934*t7952*t7961*t7962*t7937*t7946*t7955*(3.2E1/3.0);
                double t7987 = a3*c0*t7932*t7960*t7952*t7962*t7955*t7948*(8.0/3.0);
                double t7988 = c*c0*t7934*t7952*t7961*t7962*t7937*t7946*t7955*(8.0/3.0);
                double t7980 = t7970+t7971+t7973-t7982-t7987+t7979-t7988;
                double t7981 = t7964*t7964;
                double t7983 = t7963*6.0;
                double t7984 = c*c0*t7933*t7952*t7946*t7955*t7956*4.0;
                double t7985 = t7983+t7984+3.0;
                double t7986 = 1.0/t7985;
                double t7989 = 1.0/sqrt(t7957);
                double t7990 = c*c0*t7933*t7952*t7946*t7955*t7956*t7974*t7975*(2.0/3.0);
                double t7991 = t7990+1.0;
                double t7992 = t7964*t7989*2.0;
                double t7993 = a3*c0*t7932*t7952*t7955*t7956*t7948*(8.0/3.0);
                double t7994 = c*c0*gamma_bb*t7934*t7952*t7961*t7937*t7946*t7955*t7956*(3.2E1/3.0);
                double t8031 = c*c0*t7933*t7960*t7952*t7962*t7946*t7955*(1.6E1/3.0);
                double t7995 = t7992+t7993+t7994-t8031;
                double t7996 = 1.0/(t7985*t7985);
                double t7997 = t7963*4.0;
                double t7998 = c*c0*t7933*t7952*t7946*t7955*t7956*(8.0/3.0);
                double t7999 = t7997+t7998+6.0;
                double t8000 = 1.0/pow(t7957,3.0/2.0);
                double t8001 = t7964*t7989*3.0;
                double t8002 = a3*c0*t7932*t7952*t7955*t7956*t7948*4.0;
                double t8003 = c*c0*gamma_bb*t7934*t7952*t7961*t7937*t7946*t7955*t7956*1.6E1;
                double t8005 = c*c0*t7933*t7960*t7952*t7962*t7946*t7955*8.0;
                double t8004 = t8001+t8002+t8003-t8005;
                double t8006 = a3*c0*t7932*t7952*t7955*t7956*t7974*t7948*t7975*(2.0/3.0);
                double t8007 = c*c0*t7933*t7952*t7946*t7955*t7964*t7956*t7974*t7975*(2.0/3.0);
                double t8008 = c*c0*gamma_bb*t7934*t7952*t7961*t7937*t7946*t7955*t7956*t7974*t7975*(8.0/3.0);
                double t8032 = c*c0*t7933*t7960*t7952*t7962*t7946*t7955*t7974*t7975*(4.0/3.0);
                double t8009 = t7965-t7966+t7967-t8032+t8006+t8007+t8008;
                double t8010 = 1.0/t7946;
                double t8011 = 1.0/c0;
                double t8012 = pow(rho_b,1.0/3.0);
                double t8013 = exp(-t7951);
                double t8014 = t7942*t7942;
                double t8015 = t7950*t7950;
                double t8016 = 1.0/sqrt(t7946);
                double t8017 = exp(-t7947);
                double t8024 = 1.0/pow(t7946,3.0/2.0);
                double t8028 = t7942*t7960*t8016*t8017*1.0E5;
                double t8029 = a3*t7932*t7950*t7942*t7943*t7944*t8024*t8017*5.0E4;
                double t8030 = gamma_bb*t7950*t7942*t7934*t7936*t7937*t8016*t8017*2.0E5;
                double t8018 = t8030-t8028+t8029;
                double t8019 = c*c0*t7933*(2.0/3.0);
                double t8026 = t7950*t7942*t8016*t8017*1.0E5;
                double t8020 = -t8026+t8019;
                double t8021 = t7974*t7975;
                double t8022 = t7991*t7986*t7999;
                double t8023 = t8021+t8022;
                double t8025 = 1.0/(c*c);
                double t8027 = dirac(t8020);
                double t8033 = a4*a4;
                double t8034 = t7935*t7936*t7937*t8033*2.0;
                double t8035 = exp(t8034);
                double t8036 = sqrt(t7938);
                double t8037 = t7935*t7936*t7937*t8033;
                double t8038 = t8037+1.0;
                double t8039 = 1.0/(t8038*t8038);
                double t8040 = a5*gamma_bb*t7932*t7943*t7944;
                double t8041 = t8040+1.0;
                double t8052 = raa2*t8036;
                double t8042 = exp(-t8052);
                double t8043 = t8042-1.0;
                double t8044 = kaa2*t8043;
                double t8045 = pow(t7938,2.0/5.0);
                double t8053 = raa1*t8045;
                double t8046 = exp(-t8053);
                double t8047 = t8046-1.0;
                double t8048 = kaa1*t8047;
                double t8049 = -kaa0+t8044+t8048;
                double t8050 = 1.0/(t8049*t8049);
                double t8051 = c*c0*t7933*t8041*t8050*t8035*t8039*(2.0/3.0);
                double t8054 = 1.0/t8038;
                double t8055 = c*c0*t7933*t8041*t8050*t8035*(2.0/3.0);
                double t8060 = a5*c0*t7932*t7948*t8050*t8035*(2.0/3.0);
                double t8061 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*(8.0/3.0);
                double t8056 = t8060+t8061;
                double t8057 = sqrt(t8055);
                double t8058 = t8033*t8033;
                double t8059 = 1.0/pow(rho_b,3.2E1/3.0);
                double t8062 = 1.0/sqrt(t8055);
                double t8063 = 1.0/(t8038*t8038*t8038);
                double t8064 = t8054*t8057*6.0;
                double t8065 = c*c0*t7933*t8041*t8050*t8035*t8039*4.0;
                double t8066 = t8064+t8065+3.0;
                double t8067 = 1.0/t8066;
                double t8069 = a5*c0*t7932*t7948*t8050*t8035*t8039*(2.0/3.0);
                double t8070 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8039*(8.0/3.0);
                double t8071 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8063*(8.0/3.0);
                double t8068 = t8070-t8071+t8069;
                double t8072;
                double t8073;
                if (t8051 > expei_cutoff) {
                    t8072 = 1.0;
                    t8073 = expei(t8051);
                } else {
                    t8072 = exp(t8051);
                    t8073 = Ei(-t8051);
                }
                double t8074 = t8068*t8068;
                double t8075 = 1.0/(t8038*t8038*t8038*t8038);
                double t8076 = a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8039*(1.6E1/3.0);
                double t8077 = c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8039*(8.0/3.0);
                double t8078 = c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8039*t8058*(3.2E1/3.0);
                double t8079 = c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8075*t8058*1.6E1;
                double t8111 = a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8063*(1.6E1/3.0);
                double t8112 = c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8063*(8.0/3.0);
                double t8113 = c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8063*t8058*(6.4E1/3.0);
                double t8080 = t8076+t8077+t8078+t8079-t8111-t8112-t8113;
                double t8081 = t8054*t8057*4.0;
                double t8082 = c*c0*t7933*t8041*t8050*t8035*t8039*(8.0/3.0);
                double t8083 = t8081+t8082+6.0;
                double t8084 = a5*c0*t7932*t7948*t8050*t8035*t8072*t8073*t8039*(2.0/3.0);
                double t8085 = c*c0*t7933*t8041*t8050*t8035*t8072*t8073*t8039*t8068*(2.0/3.0);
                double t8086 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8072*t8073*t8039*(8.0/3.0);
                double t8128 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8063*t8072*t8073*(8.0/3.0);
                double t8087 = t8070-t8071+t8084+t8085+t8086+t8069-t8128;
                double t8088 = c*c0*t7933*t8041*t8050*t8035*t8072*t8073*t8039*(2.0/3.0);
                double t8089 = t8088+1.0;
                double t8090 = t8062*t8054*t8056*3.0;
                double t8091 = a5*c0*t7932*t7948*t8050*t8035*t8039*4.0;
                double t8092 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8039*1.6E1;
                double t8095 = gamma_bb*t7936*t7937*t8033*t8039*t8057*1.2E1;
                double t8096 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8063*1.6E1;
                double t8093 = t8090+t8091+t8092-t8095-t8096;
                double t8094 = 1.0/(t8066*t8066);
                double t8097 = t8062*t8054*t8056*2.0;
                double t8098 = a5*c0*t7932*t7948*t8050*t8035*t8039*(8.0/3.0);
                double t8099 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8039*(3.2E1/3.0);
                double t8126 = gamma_bb*t7936*t7937*t8033*t8039*t8057*8.0;
                double t8127 = c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8063*(3.2E1/3.0);
                double t8100 = t8097+t8098+t8099-t8126-t8127;
                double t8101 = a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*(1.6E1/3.0);
                double t8102 = c*c0*t7961*t7937*t8041*t8050*t8033*t8035*(8.0/3.0);
                double t8103 = c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8058*(3.2E1/3.0);
                double t8104 = t8101+t8102+t8103;
                double t8105 = t8056*t8056;
                double t8106 = 1.0/pow(t8055,3.0/2.0);
                double t8107 = 1.0/t8041;
                double t8108 = exp(-t8034);
                double t8109 = t8038*t8038;
                double t8110 = t8049*t8049;
                double t8114 = 1.0/(rho_b*rho_b);
                double t8115 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t8116 = c*c;
                double t8117 = 1.0/pow(rho_b,2.0/3.0);
                double t8118 = k1*t8036;
                double t8119 = c*k2*t7933;
                double t8120 = t8118+t8119;
                double t8121 = 1.0/(t8120*t8120);
                double t8125 = t8121*t8116*t8117;
                double t8122 = exp(-t8125);
                double t8123 = dirac(t8020,1.0);
                double t8124 = t8018*t8018;
                double t8129 = t8072*t8073;
                double t8130 = t8083*t8067*t8089;
                double t8131 = t8130+t8129;
                double t8132 = t7942*t7934*t7936*t7937*t8016*t8017*2.0E5;
                double t8133 = a3*a3;
                double t8134 = 1.0/pow(rho_b,1.4E1/3.0);
                double t8135 = 1.0/pow(t7946,5.0/2.0);
                double t8136 = t7950*t7942*t7937*t8025*t8017*t8133*t8134*t8135*7.5E4;
                double t8137 = t7950*t7942*t7935*t7976*t7978*t8016*t8017*t8059*4.0E5;
                double t8138 = 1.0/pow(rho_b,2.3E1/3.0);
                double t8139 = a3*gamma_bb*t7932*t7950*t7942*t7934*t7943*t7937*t8024*t8017*t8138*2.0E5;
                double t8140 = t8132+t8136+t8137+t8139-t7950*t7942*t7934*t7936*t7937*t8016*t8017*2.0E5-a3*t7932*t7942*t7960*t7943*t7944*t8024*t8017*1.0E5-gamma_bb*t7942*t7960*t7934*t7936*t7937*t8016*t8017*4.0E5;
                v_gamma_bb_gamma_bb[Q] += scale * rho_a*(c0*heaviside(c*c0*t7933*(-2.0/3.0)+t7950*t7942*t8016*exp(-t7934*t7935*t7936*t7937)*1.0E5)*(t7991*t7986*(t7980*t7989*2.0-t7981*t8000-a3*c0*t7932*t7960*t7952*t7962*t7955*t7948*(3.2E1/3.0)+c*c0*t7933*t7952*t7946*t7955*t7968*t7969*1.6E1-c*c0*t7934*t7952*t7961*t7962*t7937*t7946*t7955*(3.2E1/3.0)+c*c0*t7934*t7952*t7961*t7937*t7946*t7955*t7956*(3.2E1/3.0)+a3*c0*gamma_bb*t7932*t7934*t7952*t7972*t7937*t7955*t7956*(6.4E1/3.0)+c*c0*t7952*t7935*t7946*t7955*t7956*t7976*t7977*t7978*(1.28E2/3.0)-c*c0*gamma_bb*t7960*t7934*t7952*t7961*t7962*t7937*t7946*t7955*(1.28E2/3.0))+t7980*t7974*t7975+t7981*t7974*t7975+t7986*t7995*t8009*2.0+t7986*t7999*(t7970+t7971+t7981+t7973-t7982+t7979-(t7960*t7964*2.0)/t7950+gamma_bb*t7934*t7936*t7937*t7964*4.0+a3*t7932*t7943*t7944*t7964*t8010-a3*c0*t7932*t7960*t7952*t7962*t7955*t7948*(8.0/3.0)-c*c0*t7934*t7952*t7961*t7962*t7937*t7946*t7955*(8.0/3.0)-a3*c0*t7932*t7960*t7952*t7962*t7955*t7974*t7948*t7975*(8.0/3.0)+a3*c0*t7932*t7952*t7955*t7964*t7956*t7974*t7948*t7975*(4.0/3.0)+c*c0*t7933*t7952*t7980*t7946*t7955*t7956*t7974*t7975*(2.0/3.0)+c*c0*t7933*t7952*t7981*t7946*t7955*t7956*t7974*t7975*(2.0/3.0)+c*c0*t7933*t7952*t7946*t7955*t7974*t7975*t7968*t7969*4.0-c*c0*t7933*t7960*t7952*t7962*t7946*t7955*t7964*t7974*t7975*(8.0/3.0)-c*c0*t7934*t7952*t7961*t7962*t7937*t7946*t7955*t7974*t7975*(8.0/3.0)+c*c0*t7934*t7952*t7961*t7937*t7946*t7955*t7956*t7974*t7975*(8.0/3.0)+a3*c0*gamma_bb*t7932*t7934*t7952*t7972*t7937*t7955*t7956*t7974*t7975*(1.6E1/3.0)+c*c0*t7952*t7935*t7946*t7955*t7956*t7974*t7975*t7976*t7977*t7978*(3.2E1/3.0)-c*c0*gamma_bb*t7960*t7934*t7952*t7961*t7962*t7937*t7946*t7955*t7974*t7975*(3.2E1/3.0)+c*c0*gamma_bb*t7934*t7952*t7961*t7937*t7946*t7955*t7964*t7956*t7974*t7975*(1.6E1/3.0))-t7991*t7995*t7996*t8004*2.0-t7996*t7999*t8004*t8009*2.0-t7991*t7996*t7999*(t7980*t7989*3.0-t7981*t8000*(3.0/2.0)-a3*c0*t7932*t7960*t7952*t7962*t7955*t7948*1.6E1+c*c0*t7933*t7952*t7946*t7955*t7968*t7969*2.4E1-c*c0*t7934*t7952*t7961*t7962*t7937*t7946*t7955*1.6E1+c*c0*t7934*t7952*t7961*t7937*t7946*t7955*t7956*1.6E1+a3*c0*gamma_bb*t7932*t7934*t7952*t7972*t7937*t7955*t7956*3.2E1+c*c0*t7952*t7935*t7946*t7955*t7956*t7976*t7977*t7978*6.4E1-c*c0*gamma_bb*t7960*t7934*t7952*t7961*t7962*t7937*t7946*t7955*6.4E1)+t7991*1.0/(t7985*t7985*t7985)*t7999*(t8004*t8004)*2.0+t7943*t7980*t8010*t8011*t8012*t8013*t8014*t8015*(3.0/2.0)+t7943*t7981*t8010*t8011*t8012*t8013*t8014*t8015*(3.0/2.0)+t7950*t7960*t7943*t7964*t8010*t8011*t8012*t8013*t8014*3.0-a3*t7932*1.0/(t7946*t7946)*t7964*t8011*t8013*t8014*t8015*t8025*t8114*(3.0/2.0)-gamma_bb*t7934*t7943*t7937*t7964*t8010*t8011*t8013*t8014*t8015*t8115*6.0)*(1.0/2.0)+c0*t8023*t8027*t8140*(1.0/2.0)-c0*t8023*t8123*t8124*(1.0/2.0)-c0*t8018*t8027*(t7964*t7974*t7975+t7991*t7986*t7995+t7986*t7999*t8009-t7991*t7996*t7999*t8004+t7943*t7964*t8010*t8011*t8012*t8013*t8014*t8015*(3.0/2.0)))+rho_b*(c0*t8122*heaviside(t8026-t8019)*(t8083*t8067*(t8074+t8076+t8077+t8078+t8079+gamma_bb*t7936*t7937*t8033*t8068*4.0+a5*t7932*t7943*t7944*t8068*t8107-gamma_bb*t7936*t7937*t8033*t8054*t8068*4.0-c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8063*(8.0/3.0)-a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8063*(1.6E1/3.0)+a5*c0*t7932*t7948*t8050*t8035*t8072*t8073*t8039*t8068*(4.0/3.0)-c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8063*t8058*(6.4E1/3.0)+c*c0*t7933*t8041*t8050*t8035*t8080*t8072*t8073*t8039*(2.0/3.0)+c*c0*t7933*t8041*t8050*t8035*t8072*t8073*t8074*t8039*(2.0/3.0)-c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8063*t8072*t8073*(8.0/3.0)+c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8072*t8073*t8039*(8.0/3.0)-a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8063*t8072*t8073*(1.6E1/3.0)+a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8072*t8073*t8039*(1.6E1/3.0)-c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8063*t8072*t8073*t8058*(6.4E1/3.0)+c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8072*t8073*t8039*t8058*(3.2E1/3.0)+c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8072*t8073*t8075*t8058*1.6E1-c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8063*t8072*t8073*t8068*(1.6E1/3.0)+c*c0*gamma_bb*t7961*t7937*t8041*t8050*t8033*t8035*t8072*t8073*t8039*t8068*(1.6E1/3.0))+t8080*t8072*t8073+t8072*t8073*t8074+t8067*t8087*t8100*2.0+t8067*t8089*(t8062*t8054*t8104*2.0-t8054*t8105*t8106-t7936*t7937*t8033*t8039*t8057*8.0+t7935*t7978*t8063*t8057*t8058*t8059*3.2E1-gamma_bb*t7936*t7937*t8033*t8062*t8056*t8039*8.0-c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8063*(3.2E1/3.0)+c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8039*(3.2E1/3.0)-a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8063*(6.4E1/3.0)+a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8039*(6.4E1/3.0)-c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8063*t8058*(2.56E2/3.0)+c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8039*t8058*(1.28E2/3.0)+c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8075*t8058*6.4E1)-t8083*t8093*t8094*t8087*2.0-t8093*t8094*t8089*t8100*2.0-t8083*t8094*t8089*(t8062*t8054*t8104*3.0-t8054*t8105*t8106*(3.0/2.0)-t7936*t7937*t8033*t8039*t8057*1.2E1+t7935*t7978*t8063*t8057*t8058*t8059*4.8E1-gamma_bb*t7936*t7937*t8033*t8062*t8056*t8039*1.2E1-c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8063*1.6E1+c*c0*t7961*t7937*t8041*t8050*t8033*t8035*t8039*1.6E1-a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8063*3.2E1+a5*c0*gamma_bb*t7932*t7972*t7937*t8050*t8033*t8035*t8039*3.2E1-c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8063*t8058*1.28E2+c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8039*t8058*6.4E1+c*c0*t7935*t7977*t7978*t8041*t8050*t8035*t8075*t8058*9.6E1)+t8083*1.0/(t8066*t8066*t8066)*(t8093*t8093)*t8089*2.0+t7943*t8011*t8012*t8080*t8110*t8107*t8108*t8109*(3.0/2.0)+t7943*t8011*t8012*t8074*t8110*t8107*t8108*t8109*(3.0/2.0)-a5*t7932*t8011*1.0/(t8041*t8041)*t8025*t8068*t8110*t8114*t8108*t8109*(3.0/2.0)+gamma_bb*t7943*t7937*t8011*t8033*t8038*t8068*t8110*t8115*t8107*t8108*6.0-gamma_bb*t7943*t7937*t8011*t8033*t8068*t8110*t8115*t8107*t8108*t8109*6.0)*(1.0/2.0)+c0*t8027*t8122*t8131*t8140*(1.0/2.0)-c0*t8122*t8131*t8123*t8124*(1.0/2.0)-c0*t8018*t8027*t8122*(t8072*t8073*t8068+t8083*t8067*t8087+t8067*t8089*t8100-t8083*t8093*t8094*t8089+t7943*t8011*t8012*t8068*t8110*t8107*t8108*t8109*(3.0/2.0)));
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t6966 = tspi_m13*tspi_m13;
                double t6967 = 1.0/pow(rho_a,1.0/3.0);
                double t6968 = a2*a2;
                double t6969 = gamma_aa*gamma_aa;
                double t6970 = 1.0/pow(rho_a,1.6E1/3.0);
                double t6971 = t6966*t6966;
                double t6972 = c*t6967;
                double t6973 = a4*a4;
                double t6974 = 1.0/c;
                double t6975 = 1.0/pow(rho_a,7.0/3.0);
                double t6976 = sqrt(t6972);
                double t6977 = t6970*t6971*t6973*t6969*2.0;
                double t6978 = exp(t6977);
                double t6979 = t6970*t6971*t6973*t6969;
                double t6980 = t6979+1.0;
                double t6981 = 1.0/(t6980*t6980);
                double t6982 = a5*gamma_aa*t6974*t6966*t6975;
                double t6983 = t6982+1.0;
                double t6994 = raa2*t6976;
                double t6984 = exp(-t6994);
                double t6985 = t6984-1.0;
                double t6986 = kaa2*t6985;
                double t6987 = pow(t6972,2.0/5.0);
                double t6995 = raa1*t6987;
                double t6988 = exp(-t6995);
                double t6989 = t6988-1.0;
                double t6990 = kaa1*t6989;
                double t6991 = -kaa0+t6990+t6986;
                double t6992 = 1.0/(t6991*t6991);
                double t6993 = c*c0*t6981*t6983*t6992*t6967*t6978*(2.0/3.0);
                double t6996 = 1.0/pow(rho_a,8.0/3.0);
                double t6997 = 1.0/pow(rho_a,4.0/3.0);
                double t6998 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t6999 = 1.0/pow(rho_a,2.0E1/3.0);
                double t7000 = 1.0/(t6980*t6980*t6980);
                double t7001 = t6973*t6973;
                double t7002 = 1.0/pow(rho_a,1.2E1);
                double t7003 = t6971*t6971;
                double t7004 = 1.0/sqrt(t6972);
                double t7005 = c*kaa2*raa2*t6984*t6997*t7004*(1.0/6.0);
                double t7006 = 1.0/pow(t6972,3.0/5.0);
                double t7007 = c*kaa1*raa1*t6988*t6997*t7006*(2.0/1.5E1);
                double t7008 = t7005+t7007;
                double t7009 = 1.0/(t6991*t6991*t6991);
                double t7010 = 1.0/pow(rho_a,1.7E1/3.0);
                double t7011 = 1.0/t6980;
                double t7012 = c*c0*t6983*t6992*t6967*t6978*(2.0/3.0);
                double t7013 = sqrt(t7012);
                double t7014 = 1.0/pow(rho_a,1.1E1/3.0);
                double t7015;
                double t7016;
                if (t6993 > expei_cutoff) {
                    t7015 = 1.0;
                    t7016 = expei(t6993);
                } else {
                    t7015 = exp(t6993);
                    t7016 = Ei(-t6993);
                }
                double t7017 = c*c0*t6981*t6983*t6992*t6978*t6997*(2.0/9.0);
                double t7018 = a5*c0*gamma_aa*t6981*t6992*t6966*t6978*t7014*(1.4E1/9.0);
                double t7019 = c*c0*t6981*t6983*t6967*t6978*t7008*t7009*(4.0/3.0);
                double t7020 = c*c0*t6971*t6981*t6973*t6983*t6992*t6969*t6978*t6999*(6.4E1/9.0);
                double t7021 = t7011*t7013*6.0;
                double t7022 = c*c0*t6981*t6983*t6992*t6967*t6978*4.0;
                double t7023 = t7021+t7022+3.0;
                double t7024 = 1.0/t7023;
                double t7025 = a5*c0*t6981*t6992*t6966*t6978*t6996*(2.0/3.0);
                double t7026 = c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t7010*(8.0/3.0);
                double t7027 = 1.0/sqrt(t7012);
                double t7030 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t7000*t7010*(8.0/3.0);
                double t7028 = -t7030+t7025+t7026;
                double t7041 = c*c0*t6971*t6973*t6983*t6992*t6969*t6978*t6999*t7000*(6.4E1/9.0);
                double t7029 = t7020-t7041+t7017+t7018+t7019;
                double t7031 = 1.0/pow(rho_a,1.9E1/3.0);
                double t7032 = a5*c0*t6981*t6992*t6966*t6978*t7014*(1.6E1/9.0);
                double t7033 = a5*c0*t6981*t6966*t6978*t6996*t7008*t7009*(4.0/3.0);
                double t7034 = a5*c0*t6971*t6981*t6973*t6992*t6966*t6969*t6978*t6998*(4.0E1/3.0);
                double t7035 = c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t6999*(1.36E2/9.0);
                double t7036 = c*c0*gamma_aa*t6981*t6983*t6992*t6969*t6978*t7001*t7002*t7003*(2.56E2/9.0);
                double t7037 = 1.0/(t6980*t6980*t6980*t6980);
                double t7038 = c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7001*t7002*t7003*t7037*(1.28E2/3.0);
                double t7039 = c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6978*t7010*t7008*t7009*(1.6E1/3.0);
                double t7042 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t6999*t7000*(1.36E2/9.0);
                double t7043 = c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7000*t7001*t7002*t7003*(5.12E2/9.0);
                double t7044 = c*c0*gamma_aa*t6971*t6973*t6983*t6978*t7000*t7010*t7008*t7009*(1.6E1/3.0);
                double t7101 = a5*c0*t6971*t6973*t6992*t6966*t6969*t6978*t6998*t7000*(4.0E1/3.0);
                double t7040 = t7032+t7033-t7042+t7034-t7043+t7035-t7044+t7036+t7038+t7039-t7101;
                double t7045 = a5*c0*t6992*t6966*t6978*t6996*(2.0/3.0);
                double t7046 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t7010*(8.0/3.0);
                double t7047 = t7045+t7046;
                double t7048 = c*c0*t6983*t6992*t6978*t6997*(2.0/9.0);
                double t7049 = a5*c0*gamma_aa*t6992*t6966*t6978*t7014*(1.4E1/9.0);
                double t7050 = c*c0*t6983*t6967*t6978*t7008*t7009*(4.0/3.0);
                double t7051 = c*c0*t6971*t6973*t6983*t6992*t6969*t6978*t6999*(6.4E1/9.0);
                double t7052 = t7050+t7051+t7048+t7049;
                double t7053 = t7011*t7013*4.0;
                double t7054 = c*c0*t6981*t6983*t6992*t6967*t6978*(8.0/3.0);
                double t7055 = t7053+t7054+6.0;
                double t7056 = a5*c0*t6981*t6992*t6966*t6978*t6996*t7015*t7016*(2.0/3.0);
                double t7057 = c*c0*t6981*t6983*t6992*t6967*t6978*t7015*t7016*t7028*(2.0/3.0);
                double t7058 = c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t7010*t7015*t7016*(8.0/3.0);
                double t7059 = c*c0*t6981*t6983*t6992*t6967*t6978*t7015*t7016*(2.0/3.0);
                double t7060 = t7059+1.0;
                double t7061 = 1.0/(t7023*t7023);
                double t7062 = a5*c0*t6992*t6966*t6978*t7014*(1.6E1/9.0);
                double t7063 = a5*c0*t6966*t6978*t6996*t7008*t7009*(4.0/3.0);
                double t7064 = a5*c0*t6971*t6973*t6992*t6966*t6969*t6978*t6998*(4.0E1/3.0);
                double t7065 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t6999*(1.36E2/9.0);
                double t7066 = c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7001*t7002*t7003*(2.56E2/9.0);
                double t7067 = c*c0*gamma_aa*t6971*t6973*t6983*t6978*t7010*t7008*t7009*(1.6E1/3.0);
                double t7068 = t7062+t7063+t7064+t7065+t7066+t7067;
                double t7069 = 1.0/pow(t7012,3.0/2.0);
                double t7070 = 1.0/pow(rho_a,3.5E1/3.0);
                double t7071 = t7011*t7027*t7047*2.0;
                double t7072 = a5*c0*t6981*t6992*t6966*t6978*t6996*(8.0/3.0);
                double t7073 = c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t7010*(3.2E1/3.0);
                double t7135 = gamma_aa*t6970*t6971*t6981*t6973*t7013*8.0;
                double t7136 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t7000*t7010*(3.2E1/3.0);
                double t7074 = t7071+t7072+t7073-t7135-t7136;
                double t7075 = t7011*t7052*t7027*3.0;
                double t7076 = c*c0*t6981*t6983*t6992*t6978*t6997*(4.0/3.0);
                double t7077 = a5*c0*gamma_aa*t6981*t6992*t6966*t6978*t7014*(2.8E1/3.0);
                double t7078 = c*c0*t6981*t6983*t6967*t6978*t7008*t7009*8.0;
                double t7079 = c*c0*t6971*t6981*t6973*t6983*t6992*t6969*t6978*t6999*(1.28E2/3.0);
                double t7098 = t6971*t6981*t6973*t6969*t7013*t7031*3.2E1;
                double t7099 = c*c0*t6971*t6973*t6983*t6992*t6969*t6978*t6999*t7000*(1.28E2/3.0);
                double t7080 = t7075+t7076+t7077+t7078+t7079-t7098-t7099;
                double t7081 = t7011*t7052*t7027*2.0;
                double t7082 = c*c0*t6981*t6983*t6992*t6978*t6997*(8.0/9.0);
                double t7083 = a5*c0*gamma_aa*t6981*t6992*t6966*t6978*t7014*(5.6E1/9.0);
                double t7084 = c*c0*t6981*t6983*t6967*t6978*t7008*t7009*(1.6E1/3.0);
                double t7085 = c*c0*t6971*t6981*t6973*t6983*t6992*t6969*t6978*t6999*(2.56E2/9.0);
                double t7130 = t6971*t6981*t6973*t6969*t7013*t7031*(6.4E1/3.0);
                double t7131 = c*c0*t6971*t6973*t6983*t6992*t6969*t6978*t6999*t7000*(2.56E2/9.0);
                double t7086 = t7081+t7082+t7083+t7084+t7085-t7130-t7131;
                double t7087 = t7011*t7027*t7047*3.0;
                double t7088 = a5*c0*t6981*t6992*t6966*t6978*t6996*4.0;
                double t7089 = c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t7010*1.6E1;
                double t7096 = gamma_aa*t6970*t6971*t6981*t6973*t7013*1.2E1;
                double t7097 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t7000*t7010*1.6E1;
                double t7090 = t7087-t7096+t7088-t7097+t7089;
                double t7091 = c*c0*t6981*t6983*t6992*t6978*t6997*t7015*t7016*(2.0/9.0);
                double t7092 = c*c0*t6981*t6983*t6967*t6978*t7015*t7016*t7008*t7009*(4.0/3.0);
                double t7093 = c*c0*t6981*t6983*t6992*t6967*t6978*t7015*t7016*t7029*(2.0/3.0);
                double t7094 = a5*c0*gamma_aa*t6981*t6992*t6966*t6978*t7014*t7015*t7016*(1.4E1/9.0);
                double t7095 = c*c0*t6971*t6981*t6973*t6983*t6992*t6969*t6978*t6999*t7015*t7016*(6.4E1/9.0);
                double t7100 = 1.0/t6983;
                double t7102 = 1.0/c0;
                double t7103 = pow(rho_a,1.0/3.0);
                double t7104 = exp(-t6977);
                double t7105 = t6980*t6980;
                double t7106 = t6991*t6991;
                double t7107 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a);
                double t7132 = c*c0*t6971*t6973*t6983*t6992*t6969*t6978*t6999*t7000*t7015*t7016*(6.4E1/9.0);
                double t7108 = t7020-t7041+t7017+t7018+t7019+t7091+t7092+t7093+t7094+t7095-t7132;
                double t7137 = c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t7000*t7010*t7015*t7016*(8.0/3.0);
                double t7109 = -t7030+t7025+t7026+t7056+t7057+t7058-t7137;
                double t7110 = t6970*t6971*t6968*t6969;
                double t7111 = pow(t6972,4.0/5.0);
                double t7128 = rab1*t7111;
                double t7112 = exp(-t7128);
                double t7113 = t7112-1.0;
                double t7129 = kab1*t7113;
                double t7114 = kab0-t7129;
                double t7115 = a3*gamma_aa*t6974*t6966*t6975;
                double t7116 = t7115+1.0;
                double t7117 = 1.0/sqrt(t7116);
                double t7118 = a1*gamma_aa*t6966*t6996;
                double t7119 = t7110+t7118+1.0;
                double t7120 = c*c;
                double t7121 = 1.0/pow(rho_a,2.0/3.0);
                double t7122 = k1*t6976;
                double t7123 = c*k2*t6967;
                double t7124 = t7122+t7123;
                double t7125 = 1.0/(t7124*t7124);
                double t7134 = t7120*t7121*t7125;
                double t7126 = exp(-t7134);
                double t7127 = exp(-t7110);
                double t7133 = c*c0*t6967*(2.0/3.0);
                double t7138 = t7114*t7117*t7127*t7119*1.0E5;
                double t7139 = 1.0/pow(rho_a,1.0E1/3.0);
                double t7140 = 1.0/pow(t7116,3.0/2.0);
                double t7141 = t6971*t6968*t6969*t7031*(1.6E1/3.0);
                double t7142 = a1*gamma_aa*t6966*t7014*(8.0/3.0);
                double t7143 = t7141+t7142;
                double t7144 = a1*t6966*t6996;
                double t7145 = gamma_aa*t6970*t6971*t6968*2.0;
                double t7146 = t7144+t7145;
                double t7147 = 1.0/(c*c);
                double t7148 = 1.0/pow(t6972,1.0/5.0);
                double t7149 = t7133-t7138;
                double t7150 = dirac(t7149);
                double t7151 = t7015*t7016*t7028;
                double t7152 = t7024*t7060*t7074;
                double t7153 = t7024*t7055*t7109;
                double t7154 = t6974*t7028*t7100*t7102*t7103*t7104*t7105*t7106*(3.0/2.0);
                double t7288 = t7060*t7061*t7090*t7055;
                double t7155 = t7151+t7152+t7153+t7154-t7288;
                double t7156 = t7015*t7016;
                double t7157 = t7024*t7060*t7055;
                double t7158 = t7156+t7157;
                double t7159 = 1.0/pow(rho_a,5.0/3.0);
                double t7160 = t7120*t7125*t7159*(2.0/3.0);
                double t7161 = 1.0/(t7124*t7124*t7124);
                double t7162 = c*k2*t6997*(1.0/3.0);
                double t7163 = c*k1*t6997*t7004*(1.0/6.0);
                double t7164 = t7162+t7163;
                double t7165 = t7160-t7120*t7121*t7161*t7164*2.0;
                double t7166 = a3*t6974*t6966*t6975*t7140*t7114*t7127*t7119*5.0E4;
                double t7167 = gamma_aa*t6970*t6971*t6968*t7114*t7117*t7127*t7119*2.0E5;
                double t7169 = t7114*t7117*t7127*t7146*1.0E5;
                double t7168 = t7166+t7167-t7169;
                double t7170 = c*c0*t6997*(2.0/9.0);
                double t7171 = t6971*t6968*t6969*t7031*t7114*t7117*t7127*t7119*(1.6E6/3.0);
                double t7172 = a3*gamma_aa*t6974*t6966*t7140*t7114*t7127*t7119*t7139*(3.5E5/3.0);
                double t7282 = t7114*t7143*t7117*t7127*1.0E5;
                double t7283 = c*kab1*rab1*t6997*t7112*t7117*t7127*t7119*t7148*(8.0E4/3.0);
                double t7173 = t7170+t7171+t7172-t7282-t7283;
                double t7174 = -t7133+t7138;
                double t7175 = heaviside(t7174);
                double t7176 = t6970*t6971*t6968*t6969*2.0;
                double t7177 = exp(t7176);
                double t7178 = 1.0/(t7114*t7114);
                double t7179 = 1.0/(t7119*t7119);
                double t7180 = c*c0*t6967*t7116*t7177*t7178*t7179*(2.0/3.0);
                double t7181 = 1.0/(t7119*t7119*t7119);
                double t7182;
                double t7183;
                if (t7180 > expei_cutoff) {
                    t7182 = 1.0;
                    t7183 = expei(t7180);
                } else {
                    t7182 = exp(t7180);
                    t7183 = Ei(-t7180);
                }
                double t7184 = c*c0*t6997*t7116*t7177*t7178*t7179*(2.0/9.0);
                double t7185 = a3*c0*gamma_aa*t6966*t7014*t7177*t7178*t7179*(1.4E1/9.0);
                double t7186 = c*c0*t6971*t6968*t6969*t6999*t7116*t7177*t7178*t7179*(6.4E1/9.0);
                double t7187 = 1.0/(t7114*t7114*t7114);
                double t7188 = sqrt(t7180);
                double t7189 = t7188*6.0;
                double t7190 = c*c0*t6967*t7116*t7177*t7178*t7179*4.0;
                double t7191 = t7190+t7189+3.0;
                double t7192 = 1.0/t7191;
                double t7215 = c*c0*t6967*t7116*t7143*t7181*t7177*t7178*(4.0/3.0);
                double t7216 = c0*kab1*rab1*t7120*t7112*t7116*t7148*t7159*t7177*t7187*t7179*(1.6E1/4.5E1);
                double t7193 = t7184+t7185+t7186-t7215-t7216;
                double t7194 = 1.0/sqrt(t7180);
                double t7195 = a3*c0*t6966*t6996*t7177*t7178*t7179*(2.0/3.0);
                double t7196 = c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7177*t7178*t7179*(8.0/3.0);
                double t7198 = c*c0*t6967*t7116*t7181*t7146*t7177*t7178*(4.0/3.0);
                double t7197 = t7195+t7196-t7198;
                double t7199 = a1*t6966*t7014*(8.0/3.0);
                double t7200 = gamma_aa*t6971*t6968*t7031*(3.2E1/3.0);
                double t7201 = t7199+t7200;
                double t7202 = t6968*t6968;
                double t7203 = a3*c0*t6966*t6996*t7143*t7181*t7177*t7178*(4.0/3.0);
                double t7204 = c*c0*t6997*t7116*t7181*t7146*t7177*t7178*(4.0/9.0);
                double t7205 = c*c0*t6967*t7116*t7181*t7177*t7178*t7201*(4.0/3.0);
                double t7206 = 1.0/(t7119*t7119*t7119*t7119);
                double t7207 = a3*c0*gamma_aa*t6966*t7014*t7181*t7146*t7177*t7178*(2.8E1/9.0);
                double t7208 = c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7143*t7181*t7177*t7178*(1.6E1/3.0);
                double t7209 = c*c0*t6971*t6968*t6969*t6999*t7116*t7181*t7146*t7177*t7178*(1.28E2/9.0);
                double t7210 = 1.0/(rho_a*rho_a*rho_a*rho_a);
                double t7211 = a3*c*c0*kab1*rab1*t6966*t7112*t7148*t7177*t7187*t7179*t7210*(1.6E1/4.5E1);
                double t7212 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t7213 = c0*gamma_aa*kab1*rab1*t6971*t6968*t7120*t7112*t7116*t7148*t7177*t7187*t7179*t7212*(6.4E1/4.5E1);
                double t7218 = a3*c0*t6966*t7014*t7177*t7178*t7179*(1.6E1/9.0);
                double t7219 = c*c0*t6967*t7116*t7143*t7146*t7177*t7178*t7206*4.0;
                double t7220 = a3*c0*t6971*t6966*t6968*t6969*t6998*t7177*t7178*t7179*(4.0E1/3.0);
                double t7221 = c*c0*gamma_aa*t6971*t6968*t6999*t7116*t7177*t7178*t7179*(1.36E2/9.0);
                double t7222 = c*c0*gamma_aa*t6969*t7002*t7003*t7116*t7177*t7178*t7179*t7202*(2.56E2/9.0);
                double t7223 = c0*kab1*rab1*t7120*t7112*t7116*t7181*t7146*t7148*t7159*t7177*t7187*(3.2E1/4.5E1);
                double t7214 = t7211-t7220+t7203-t7221+t7204+t7213-t7222+t7205-t7223+t7207+t7208+t7209-t7218-t7219;
                double t7217 = 1.0/rho_a;
                double t7224 = c*c0*t6967*t7116*t7182*t7183*t7177*t7178*t7179*(2.0/3.0);
                double t7225 = t7224+1.0;
                double t7226 = t7194*t7197*2.0;
                double t7227 = a3*c0*t6966*t6996*t7177*t7178*t7179*(8.0/3.0);
                double t7228 = c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7177*t7178*t7179*(3.2E1/3.0);
                double t7280 = c*c0*t6967*t7116*t7181*t7146*t7177*t7178*(1.6E1/3.0);
                double t7229 = t7226-t7280+t7227+t7228;
                double t7230 = 1.0/(t7191*t7191);
                double t7231 = t7193*t7194*2.0;
                double t7232 = c*c0*t6997*t7116*t7177*t7178*t7179*(8.0/9.0);
                double t7233 = a3*c0*gamma_aa*t6966*t7014*t7177*t7178*t7179*(5.6E1/9.0);
                double t7234 = c*c0*t6971*t6968*t6969*t6999*t7116*t7177*t7178*t7179*(2.56E2/9.0);
                double t7266 = c*c0*t6967*t7116*t7143*t7181*t7177*t7178*(1.6E1/3.0);
                double t7267 = c0*kab1*rab1*t7120*t7112*t7116*t7148*t7159*t7177*t7187*t7179*(6.4E1/4.5E1);
                double t7235 = t7231+t7232+t7233+t7234-t7266-t7267;
                double t7236 = t7188*4.0;
                double t7237 = c*c0*t6967*t7116*t7177*t7178*t7179*(8.0/3.0);
                double t7238 = t7236+t7237+6.0;
                double t7239 = t7194*t7197*3.0;
                double t7240 = a3*c0*t6966*t6996*t7177*t7178*t7179*4.0;
                double t7241 = c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7177*t7178*t7179*1.6E1;
                double t7257 = c*c0*t6967*t7116*t7181*t7146*t7177*t7178*8.0;
                double t7242 = t7240+t7241+t7239-t7257;
                double t7243 = c*c0*t6997*t7116*t7182*t7183*t7177*t7178*t7179*(2.0/9.0);
                double t7244 = a3*c0*gamma_aa*t6966*t7014*t7182*t7183*t7177*t7178*t7179*(1.4E1/9.0);
                double t7245 = c*c0*t6967*t7116*t7182*t7183*t7193*t7177*t7178*t7179*(2.0/3.0);
                double t7246 = c*c0*t6971*t6968*t6969*t6999*t7116*t7182*t7183*t7177*t7178*t7179*(6.4E1/9.0);
                double t7247 = t7193*t7194*3.0;
                double t7248 = c*c0*t6997*t7116*t7177*t7178*t7179*(4.0/3.0);
                double t7249 = a3*c0*gamma_aa*t6966*t7014*t7177*t7178*t7179*(2.8E1/3.0);
                double t7250 = c*c0*t6971*t6968*t6969*t6999*t7116*t7177*t7178*t7179*(1.28E2/3.0);
                double t7258 = c*c0*t6967*t7116*t7143*t7181*t7177*t7178*8.0;
                double t7259 = c0*kab1*rab1*t7120*t7112*t7116*t7148*t7159*t7177*t7187*t7179*(3.2E1/1.5E1);
                double t7251 = t7250+t7247+t7248+t7249-t7258-t7259;
                double t7252 = a3*c0*t6966*t6996*t7182*t7183*t7177*t7178*t7179*(2.0/3.0);
                double t7253 = c*c0*t6967*t7116*t7182*t7183*t7177*t7178*t7179*t7197*(2.0/3.0);
                double t7254 = c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7182*t7183*t7177*t7178*t7179*(8.0/3.0);
                double t7281 = c*c0*t6967*t7116*t7181*t7146*t7182*t7183*t7177*t7178*(4.0/3.0);
                double t7255 = t7195+t7196-t7198+t7252+t7253+t7254-t7281;
                double t7256 = 1.0/pow(t7180,3.0/2.0);
                double t7260 = 1.0/t7116;
                double t7261 = exp(-t7176);
                double t7262 = t7114*t7114;
                double t7263 = t7119*t7119;
                double t7264 = 1.0/(rho_a*rho_a);
                double t7265 = t7184+t7185+t7186-t7215-t7216+t7243+t7244+t7245+t7246-c*c0*t6967*t7116*t7143*t7181*t7182*t7183*t7177*t7178*(4.0/3.0)-c0*kab1*rab1*t7120*t7112*t7116*t7182*t7183*t7148*t7159*t7177*t7187*t7179*(1.6E1/4.5E1);
                double t7268 = a3*t6974*t6966*t7140*t7114*t7127*t7119*t7139*(3.5E5/3.0);
                double t7269 = a3*t6974*t6966*t6975*t7140*t7114*t7143*t7127*5.0E4;
                double t7270 = gamma_aa*t6971*t6968*t7031*t7114*t7117*t7127*t7119*(3.2E6/3.0);
                double t7271 = gamma_aa*t6970*t6971*t6968*t7114*t7143*t7117*t7127*2.0E5;
                double t7272 = t6971*t6968*t6969*t7031*t7114*t7117*t7127*t7146*(1.6E6/3.0);
                double t7273 = a3*a3;
                double t7274 = 1.0/pow(t7116,5.0/2.0);
                double t7275 = a3*gamma_aa*t6974*t6966*t7140*t7114*t7127*t7146*t7139*(3.5E5/3.0);
                double t7276 = a3*kab1*rab1*t6966*t7014*t7112*t7140*t7127*t7119*t7148*(4.0E4/3.0);
                double t7277 = 1.0/pow(rho_a,2.6E1/3.0);
                double t7278 = c*gamma_aa*kab1*rab1*t6971*t6968*t6999*t7112*t7117*t7127*t7119*t7148*(1.6E5/3.0);
                double t7279 = t7270+t7271+t7272+t7275+t7276+t7268+t7269+t7278-t7114*t7117*t7127*t7201*1.0E5-c*kab1*rab1*t6997*t7112*t7117*t7127*t7146*t7148*(8.0E4/3.0)-gamma_aa*t6969*t7003*t7070*t7114*t7117*t7127*t7119*t7202*(3.2E6/3.0)-gamma_aa*t6971*t7010*t7114*t7127*t7119*t7147*t7273*t7274*1.75E5-a3*t6971*t6974*t6966*t6968*t6969*t7140*t7114*t7127*t7119*t7277*5.0E5;
                double t7284 = dirac(t7149,1.0);
                double t7285 = t7182*t7183;
                double t7286 = t7192*t7225*t7238;
                double t7287 = t7285+t7286;
                v_rho_a_gamma_aa[Q] += scale * rho_a*(c0*t7126*heaviside(c*c0*t6967*(-2.0/3.0)+t7114*t7117*t7119*exp(-t6970*t6971*t6968*t6969)*1.0E5)*(t7024*t7060*(t7011*t7027*t7068*2.0-t7011*t7052*t7047*t7069-gamma_aa*t6971*t6981*t6973*t7013*t7031*(1.28E2/3.0)+a5*c0*t6981*t6992*t6966*t6978*t7014*(6.4E1/9.0)-gamma_aa*t6970*t6971*t6981*t6973*t7052*t7027*4.0+gamma_aa*t6969*t7000*t7001*t7003*t7013*t7070*(2.56E2/3.0)-t6971*t6981*t6973*t6969*t7031*t7027*t7047*(3.2E1/3.0)+a5*c0*t6981*t6966*t6978*t6996*t7008*t7009*(1.6E1/3.0)+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t6999*(5.44E2/9.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t6999*t7000*(5.44E2/9.0)+a5*c0*t6971*t6981*t6973*t6992*t6966*t6969*t6978*t6998*(1.6E2/3.0)-a5*c0*t6971*t6973*t6992*t6966*t6969*t6978*t6998*t7000*(1.6E2/3.0)+c*c0*gamma_aa*t6981*t6983*t6992*t6969*t6978*t7001*t7002*t7003*(1.024E3/9.0)+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6978*t7010*t7008*t7009*(6.4E1/3.0)-c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7000*t7001*t7002*t7003*(2.048E3/9.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6978*t7000*t7010*t7008*t7009*(6.4E1/3.0)+c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7001*t7002*t7003*t7037*(5.12E2/3.0))+t7024*t7055*(t7032+t7033-t7042+t7034-t7043+t7035-t7044+t7036+t7038+t7039-t7101+t7028*t7029+t7028*t7217*(1.0/3.0)+(t7008*t7028*2.0)/t6991+t6971*t6973*t6969*t7031*t7028*(3.2E1/3.0)-t6971*t6973*t6969*t7011*t7031*t7028*(3.2E1/3.0)+a5*gamma_aa*t6974*t6966*t7028*t7100*t7139*(7.0/3.0)+a5*c0*t6981*t6992*t6966*t6978*t7014*t7015*t7016*(1.6E1/9.0)+a5*c0*t6981*t6992*t6966*t6978*t6996*t7015*t7016*t7029*(2.0/3.0)+a5*c0*t6981*t6966*t6978*t6996*t7015*t7016*t7008*t7009*(4.0/3.0)+c*c0*t6981*t6983*t6992*t6967*t6978*t7040*t7015*t7016*(2.0/3.0)+c*c0*t6981*t6983*t6992*t6978*t6997*t7015*t7016*t7028*(2.0/9.0)+a5*c0*gamma_aa*t6981*t6992*t6966*t6978*t7014*t7015*t7016*t7028*(1.4E1/9.0)+c*c0*t6981*t6983*t6992*t6967*t6978*t7015*t7016*t7028*t7029*(2.0/3.0)+c*c0*t6981*t6983*t6967*t6978*t7015*t7016*t7008*t7009*t7028*(4.0/3.0)+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t6999*t7015*t7016*(1.36E2/9.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t6999*t7000*t7015*t7016*(1.36E2/9.0)+a5*c0*t6971*t6981*t6973*t6992*t6966*t6969*t6978*t6998*t7015*t7016*(4.0E1/3.0)-a5*c0*t6971*t6973*t6992*t6966*t6969*t6978*t6998*t7000*t7015*t7016*(4.0E1/3.0)+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t7010*t7015*t7016*t7029*(8.0/3.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t7000*t7010*t7015*t7016*t7029*(8.0/3.0)+c*c0*gamma_aa*t6981*t6983*t6992*t6969*t6978*t7001*t7002*t7003*t7015*t7016*(2.56E2/9.0)+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6978*t7010*t7015*t7016*t7008*t7009*(1.6E1/3.0)-c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7000*t7001*t7002*t7003*t7015*t7016*(5.12E2/9.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6978*t7000*t7010*t7015*t7016*t7008*t7009*(1.6E1/3.0)+c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7001*t7002*t7003*t7015*t7016*t7037*(1.28E2/3.0)+c*c0*t6971*t6981*t6973*t6983*t6992*t6969*t6978*t6999*t7015*t7016*t7028*(6.4E1/9.0)-c*c0*t6971*t6973*t6983*t6992*t6969*t6978*t6999*t7000*t7015*t7016*t7028*(6.4E1/9.0))+t7040*t7015*t7016+t7024*t7074*t7108+t7024*t7086*t7109-t7060*t7061*t7080*t7074+t7015*t7016*t7028*t7029-t7060*t7061*t7090*t7086-t7061*t7080*t7055*t7109-t7061*t7090*t7055*t7108-t7060*t7061*t7055*(t7011*t7027*t7068*3.0-t7011*t7052*t7047*t7069*(3.0/2.0)-gamma_aa*t6971*t6981*t6973*t7013*t7031*6.4E1+a5*c0*t6981*t6992*t6966*t6978*t7014*(3.2E1/3.0)-gamma_aa*t6970*t6971*t6981*t6973*t7052*t7027*6.0+gamma_aa*t6969*t7000*t7001*t7003*t7013*t7070*1.28E2-t6971*t6981*t6973*t6969*t7031*t7027*t7047*1.6E1+a5*c0*t6981*t6966*t6978*t6996*t7008*t7009*8.0+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6992*t6978*t6999*(2.72E2/3.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6992*t6978*t6999*t7000*(2.72E2/3.0)+a5*c0*t6971*t6981*t6973*t6992*t6966*t6969*t6978*t6998*8.0E1-a5*c0*t6971*t6973*t6992*t6966*t6969*t6978*t6998*t7000*8.0E1+c*c0*gamma_aa*t6981*t6983*t6992*t6969*t6978*t7001*t7002*t7003*(5.12E2/3.0)+c*c0*gamma_aa*t6971*t6981*t6973*t6983*t6978*t7010*t7008*t7009*3.2E1-c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7000*t7001*t7002*t7003*(1.024E3/3.0)-c*c0*gamma_aa*t6971*t6973*t6983*t6978*t7000*t7010*t7008*t7009*3.2E1+c*c0*gamma_aa*t6983*t6992*t6969*t6978*t7001*t7002*t7003*t7037*2.56E2)+1.0/(t7023*t7023*t7023)*t7060*t7080*t7090*t7055*2.0+t6974*t7040*t7100*t7102*t7103*t7104*t7105*t7106*(3.0/2.0)+t6974*t7028*t7029*t7100*t7102*t7103*t7104*t7105*t7106*(3.0/2.0)-a5*1.0/(t6983*t6983)*t6966*t7029*t7102*t7104*t7105*t7106*t7147*t7264*(3.0/2.0)+gamma_aa*t6971*t6980*t6973*t6974*t7029*t7100*t7102*t7104*t7106*t7107*6.0-gamma_aa*t6971*t6973*t6974*t7029*t7100*t7102*t7104*t7105*t7106*t7107*6.0)*(-1.0/2.0)+c0*t7150*t7126*t7155*t7173*(1.0/2.0)+c0*t7126*t7155*t7165*t7175*(1.0/2.0)+c0*t7150*t7126*t7158*t7279*(1.0/2.0)+c0*t7126*t7168*dirac(t7133-t7114*t7117*t7127*t7119*1.0E5)*(t7015*t7016*t7029+t7024*t7060*t7086+t7024*t7055*t7108-t7060*t7061*t7080*t7055+t6974*t7029*t7100*t7102*t7103*t7104*t7105*t7106*(3.0/2.0))*(1.0/2.0)-c0*t7150*t7126*t7165*t7158*t7168*(1.0/2.0)+c0*t7126*t7173*t7158*t7168*t7284*(1.0/2.0))+rho_b*(c0*t7175*(t7192*t7225*(t7194*t7214*2.0+t7193*t7197*t7256-a3*c0*t6966*t7014*t7177*t7178*t7179*(6.4E1/9.0)+a3*c0*t6966*t6996*t7143*t7181*t7177*t7178*(1.6E1/3.0)+c*c0*t6997*t7116*t7181*t7146*t7177*t7178*(1.6E1/9.0)+c*c0*t6967*t7116*t7181*t7177*t7178*t7201*(1.6E1/3.0)+a3*c0*gamma_aa*t6966*t7014*t7181*t7146*t7177*t7178*(1.12E2/9.0)-c*c0*t6967*t7116*t7143*t7146*t7177*t7178*t7206*1.6E1-c*c0*gamma_aa*t6971*t6968*t6999*t7116*t7177*t7178*t7179*(5.44E2/9.0)-a3*c0*t6971*t6966*t6968*t6969*t6998*t7177*t7178*t7179*(1.6E2/3.0)+c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7143*t7181*t7177*t7178*(6.4E1/3.0)-c*c0*gamma_aa*t6969*t7002*t7003*t7116*t7177*t7178*t7179*t7202*(1.024E3/9.0)+c*c0*t6971*t6968*t6969*t6999*t7116*t7181*t7146*t7177*t7178*(5.12E2/9.0)+a3*c*c0*kab1*rab1*t6966*t7112*t7148*t7177*t7187*t7179*t7210*(6.4E1/4.5E1)-c0*kab1*rab1*t7120*t7112*t7116*t7181*t7146*t7148*t7159*t7177*t7187*(1.28E2/4.5E1)+c0*gamma_aa*kab1*rab1*t6971*t6968*t7120*t7112*t7116*t7148*t7177*t7187*t7179*t7212*(2.56E2/4.5E1))+t7192*t7238*(t7211-t7220+t7203-t7221+t7204+t7213-t7222+t7205-t7223+t7207+t7208+t7209-t7218-t7219-t7193*t7197-t7197*t7217*(1.0/3.0)+(t7143*t7197*2.0)/t7119-t6971*t6968*t6969*t7031*t7197*(3.2E1/3.0)-a3*gamma_aa*t6974*t6966*t7139*t7197*t7260*(7.0/3.0)+(c*kab1*rab1*t6997*t7112*t7148*t7197*(8.0/1.5E1))/t7114-a3*c0*t6966*t7014*t7182*t7183*t7177*t7178*t7179*(1.6E1/9.0)+a3*c0*t6966*t6996*t7143*t7181*t7182*t7183*t7177*t7178*(4.0/3.0)-a3*c0*t6966*t6996*t7182*t7183*t7193*t7177*t7178*t7179*(2.0/3.0)+c*c0*t6997*t7116*t7181*t7146*t7182*t7183*t7177*t7178*(4.0/9.0)-c*c0*t6997*t7116*t7182*t7183*t7177*t7178*t7179*t7197*(2.0/9.0)+c*c0*t6967*t7116*t7181*t7182*t7183*t7177*t7178*t7201*(4.0/3.0)+c*c0*t6967*t7116*t7182*t7183*t7177*t7178*t7179*t7214*(2.0/3.0)+a3*c0*gamma_aa*t6966*t7014*t7181*t7146*t7182*t7183*t7177*t7178*(2.8E1/9.0)-a3*c0*gamma_aa*t6966*t7014*t7182*t7183*t7177*t7178*t7179*t7197*(1.4E1/9.0)+c*c0*t6967*t7116*t7181*t7146*t7182*t7183*t7193*t7177*t7178*(4.0/3.0)+c*c0*t6967*t7116*t7143*t7181*t7182*t7183*t7177*t7178*t7197*(4.0/3.0)-c*c0*t6967*t7116*t7182*t7183*t7193*t7177*t7178*t7179*t7197*(2.0/3.0)-c*c0*t6967*t7116*t7143*t7146*t7182*t7183*t7177*t7178*t7206*4.0-c*c0*gamma_aa*t6971*t6968*t6999*t7116*t7182*t7183*t7177*t7178*t7179*(1.36E2/9.0)-a3*c0*t6971*t6966*t6968*t6969*t6998*t7182*t7183*t7177*t7178*t7179*(4.0E1/3.0)+c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7143*t7181*t7182*t7183*t7177*t7178*(1.6E1/3.0)-c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7182*t7183*t7193*t7177*t7178*t7179*(8.0/3.0)-c*c0*gamma_aa*t6969*t7002*t7003*t7116*t7182*t7183*t7177*t7178*t7179*t7202*(2.56E2/9.0)+c*c0*t6971*t6968*t6969*t6999*t7116*t7181*t7146*t7182*t7183*t7177*t7178*(1.28E2/9.0)-c*c0*t6971*t6968*t6969*t6999*t7116*t7182*t7183*t7177*t7178*t7179*t7197*(6.4E1/9.0)+a3*c*c0*kab1*rab1*t6966*t7112*t7182*t7183*t7148*t7177*t7187*t7179*t7210*(1.6E1/4.5E1)-c0*kab1*rab1*t7120*t7112*t7116*t7181*t7146*t7182*t7183*t7148*t7159*t7177*t7187*(3.2E1/4.5E1)+c0*kab1*rab1*t7120*t7112*t7116*t7182*t7183*t7148*t7159*t7177*t7187*t7179*t7197*(1.6E1/4.5E1)+c0*gamma_aa*kab1*rab1*t6971*t6968*t7120*t7112*t7116*t7182*t7183*t7148*t7177*t7187*t7179*t7212*(6.4E1/4.5E1))+t7182*t7183*t7214-t7192*t7235*t7255-t7192*t7229*(t7184+t7185+t7186+t7243+t7244+t7245+t7246-c*c0*t6967*t7116*t7143*t7181*t7177*t7178*(4.0/3.0)-c*c0*t6967*t7116*t7143*t7181*t7182*t7183*t7177*t7178*(4.0/3.0)-c0*kab1*rab1*t7120*t7112*t7116*t7148*t7159*t7177*t7187*t7179*(1.6E1/4.5E1)-c0*kab1*rab1*t7120*t7112*t7116*t7182*t7183*t7148*t7159*t7177*t7187*t7179*(1.6E1/4.5E1))-t7182*t7183*t7193*t7197+t7230*t7242*t7225*t7235+t7230*t7251*t7225*t7229+t7230*t7251*t7255*t7238+t7230*t7242*t7238*t7265-t7230*t7225*t7238*(t7194*t7214*3.0+t7193*t7197*t7256*(3.0/2.0)-a3*c0*t6966*t7014*t7177*t7178*t7179*(3.2E1/3.0)+a3*c0*t6966*t6996*t7143*t7181*t7177*t7178*8.0+c*c0*t6997*t7116*t7181*t7146*t7177*t7178*(8.0/3.0)+c*c0*t6967*t7116*t7181*t7177*t7178*t7201*8.0+a3*c0*gamma_aa*t6966*t7014*t7181*t7146*t7177*t7178*(5.6E1/3.0)-c*c0*t6967*t7116*t7143*t7146*t7177*t7178*t7206*2.4E1-c*c0*gamma_aa*t6971*t6968*t6999*t7116*t7177*t7178*t7179*(2.72E2/3.0)-a3*c0*t6971*t6966*t6968*t6969*t6998*t7177*t7178*t7179*8.0E1+c*c0*gamma_aa*t6971*t6968*t7010*t7116*t7143*t7181*t7177*t7178*3.2E1-c*c0*gamma_aa*t6969*t7002*t7003*t7116*t7177*t7178*t7179*t7202*(5.12E2/3.0)+c*c0*t6971*t6968*t6969*t6999*t7116*t7181*t7146*t7177*t7178*(2.56E2/3.0)+a3*c*c0*kab1*rab1*t6966*t7112*t7148*t7177*t7187*t7179*t7210*(3.2E1/1.5E1)-c0*kab1*rab1*t7120*t7112*t7116*t7181*t7146*t7148*t7159*t7177*t7187*(6.4E1/1.5E1)+c0*gamma_aa*kab1*rab1*t6971*t6968*t7120*t7112*t7116*t7148*t7177*t7187*t7179*t7212*(1.28E2/1.5E1))-1.0/(t7191*t7191*t7191)*t7242*t7251*t7225*t7238*2.0+t6974*t7102*t7103*t7214*t7260*t7261*t7262*t7263*(3.0/2.0)-t6974*t7102*t7103*t7119*t7146*t7193*t7260*t7261*t7262*3.0-t6974*t7102*t7103*t7193*t7197*t7260*t7261*t7262*t7263*(3.0/2.0)+a3*t6966*t7102*1.0/(t7116*t7116)*t7147*t7193*t7261*t7262*t7263*t7264*(3.0/2.0)+gamma_aa*t6971*t6974*t6968*t7102*t7107*t7193*t7260*t7261*t7262*t7263*6.0)*(1.0/2.0)+c0*t7150*t7287*t7279*(1.0/2.0)+c0*t7150*t7168*(t7182*t7183*t7193+t7192*t7225*t7235+t7192*t7238*t7265-t7230*t7251*t7225*t7238+t6974*t7102*t7103*t7193*t7260*t7261*t7262*t7263*(3.0/2.0))*(1.0/2.0)+c0*t7150*t7173*(t7182*t7183*t7197+t7192*t7225*t7229+t7192*t7255*t7238-t7230*t7242*t7225*t7238+t6974*t7102*t7103*t7197*t7260*t7261*t7262*t7263*(3.0/2.0))*(1.0/2.0)+c0*t7173*t7168*t7284*t7287*(1.0/2.0))+c0*t7126*t7155*t7175*(1.0/2.0)-c0*t7150*t7126*t7158*t7168*(1.0/2.0);
            }
            
            // v_rho_a_gamma_bb
            if (deriv >= 2) {
                double t7291 = tspi_m13*tspi_m13;
                double t7292 = 1.0/pow(rho_b,1.0/3.0);
                double t7293 = a2*a2;
                double t7294 = gamma_bb*gamma_bb;
                double t7295 = 1.0/pow(rho_b,1.6E1/3.0);
                double t7296 = t7291*t7291;
                double t7297 = t7293*t7294*t7295*t7296*2.0;
                double t7298 = exp(t7297);
                double t7299 = c*t7292;
                double t7300 = pow(t7299,4.0/5.0);
                double t7312 = rab1*t7300;
                double t7301 = exp(-t7312);
                double t7302 = t7301-1.0;
                double t7313 = kab1*t7302;
                double t7303 = kab0-t7313;
                double t7304 = 1.0/c;
                double t7305 = 1.0/pow(rho_b,7.0/3.0);
                double t7306 = a3*gamma_bb*t7291*t7304*t7305;
                double t7307 = t7306+1.0;
                double t7308 = t7293*t7294*t7295*t7296;
                double t7309 = 1.0/pow(rho_b,8.0/3.0);
                double t7310 = a1*gamma_bb*t7291*t7309;
                double t7311 = t7310+t7308+1.0;
                double t7314 = 1.0/(t7303*t7303);
                double t7315 = 1.0/(t7311*t7311);
                double t7316 = c*c0*t7292*t7298*t7314*t7315*t7307*(2.0/3.0);
                double t7317 = a1*t7291*t7309;
                double t7318 = gamma_bb*t7293*t7295*t7296*2.0;
                double t7319 = t7317+t7318;
                double t7320 = 1.0/(t7311*t7311*t7311);
                double t7321 = 1.0/pow(rho_b,1.7E1/3.0);
                double t7322;
                double t7323;
                if (t7316 > expei_cutoff) {
                    t7322 = 1.0;
                    t7323 = expei(t7316);
                } else {
                    t7322 = exp(t7316);
                    t7323 = Ei(-t7316);
                }
                double t7324 = a3*c0*t7291*t7298*t7314*t7315*t7309*(2.0/3.0);
                double t7325 = c*c0*gamma_bb*t7293*t7296*t7298*t7321*t7314*t7315*t7307*(8.0/3.0);
                double t7332 = c*c0*t7292*t7298*t7320*t7314*t7307*t7319*(4.0/3.0);
                double t7326 = -t7332+t7324+t7325;
                double t7327 = sqrt(t7316);
                double t7328 = t7327*6.0;
                double t7329 = c*c0*t7292*t7298*t7314*t7315*t7307*4.0;
                double t7330 = t7328+t7329+3.0;
                double t7331 = 1.0/t7330;
                double t7333 = c*c0*t7292*t7298*t7322*t7314*t7323*t7315*t7307*(2.0/3.0);
                double t7334 = t7333+1.0;
                double t7335 = t7327*4.0;
                double t7336 = c*c0*t7292*t7298*t7314*t7315*t7307*(8.0/3.0);
                double t7337 = t7335+t7336+6.0;
                double t7338 = 1.0/sqrt(t7316);
                double t7339 = 1.0/sqrt(t7307);
                double t7340 = exp(-t7308);
                v_rho_a_gamma_bb[Q] += scale * c0*heaviside(c*c0*t7292*(-2.0/3.0)+t7311*t7303*t7339*exp(-t7293*t7294*t7295*t7296)*1.0E5)*(t7322*t7323*t7326+t7331*t7337*(-t7332+t7324+t7325+a3*c0*t7291*t7298*t7322*t7314*t7323*t7315*t7309*(2.0/3.0)-c*c0*t7292*t7298*t7320*t7322*t7314*t7323*t7307*t7319*(4.0/3.0)+c*c0*t7292*t7298*t7322*t7314*t7323*t7315*t7307*t7326*(2.0/3.0)+c*c0*gamma_bb*t7293*t7296*t7298*t7321*t7322*t7314*t7323*t7315*t7307*(8.0/3.0))+t7331*t7334*(t7326*t7338*2.0+a3*c0*t7291*t7298*t7314*t7315*t7309*(8.0/3.0)-c*c0*t7292*t7298*t7320*t7314*t7307*t7319*(1.6E1/3.0)+c*c0*gamma_bb*t7293*t7296*t7298*t7321*t7314*t7315*t7307*(3.2E1/3.0))-1.0/(t7330*t7330)*t7334*t7337*(t7326*t7338*3.0+a3*c0*t7291*t7298*t7314*t7315*t7309*4.0-c*c0*t7292*t7298*t7320*t7314*t7307*t7319*8.0+c*c0*gamma_bb*t7293*t7296*t7298*t7321*t7314*t7315*t7307*1.6E1)+(pow(rho_b,1.0/3.0)*(t7311*t7311)*(t7303*t7303)*t7304*t7326*exp(-t7297)*(3.0/2.0))/(c0*t7307))*(1.0/2.0)-c0*dirac(c*c0*t7292*(2.0/3.0)-t7311*t7303*t7340*t7339*1.0E5)*(t7322*t7323+t7331*t7334*t7337)*(t7303*t7340*t7319*t7339*-1.0E5+a3*t7291*t7311*t7303*t7304*t7340*t7305*1.0/pow(t7307,3.0/2.0)*5.0E4+gamma_bb*t7293*t7295*t7296*t7311*t7303*t7340*t7339*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_b_gamma_aa
            if (deriv >= 2) {
                double t7342 = tspi_m13*tspi_m13;
                double t7343 = 1.0/pow(rho_a,1.0/3.0);
                double t7344 = a2*a2;
                double t7345 = gamma_aa*gamma_aa;
                double t7346 = 1.0/pow(rho_a,1.6E1/3.0);
                double t7347 = t7342*t7342;
                double t7348 = t7344*t7345*t7346*t7347*2.0;
                double t7349 = exp(t7348);
                double t7350 = c*t7343;
                double t7351 = pow(t7350,4.0/5.0);
                double t7363 = rab1*t7351;
                double t7352 = exp(-t7363);
                double t7353 = t7352-1.0;
                double t7364 = kab1*t7353;
                double t7354 = kab0-t7364;
                double t7355 = 1.0/c;
                double t7356 = 1.0/pow(rho_a,7.0/3.0);
                double t7357 = a3*gamma_aa*t7342*t7355*t7356;
                double t7358 = t7357+1.0;
                double t7359 = t7344*t7345*t7346*t7347;
                double t7360 = 1.0/pow(rho_a,8.0/3.0);
                double t7361 = a1*gamma_aa*t7342*t7360;
                double t7362 = t7361+t7359+1.0;
                double t7365 = 1.0/(t7354*t7354);
                double t7366 = 1.0/(t7362*t7362);
                double t7367 = c*c0*t7343*t7365*t7366*t7349*t7358*(2.0/3.0);
                double t7368 = a1*t7342*t7360;
                double t7369 = gamma_aa*t7344*t7346*t7347*2.0;
                double t7370 = t7368+t7369;
                double t7371 = 1.0/(t7362*t7362*t7362);
                double t7372 = 1.0/pow(rho_a,1.7E1/3.0);
                double t7373;
                double t7374;
                if (t7367 > expei_cutoff) {
                    t7373 = 1.0;
                    t7374 = expei(t7367);
                } else {
                    t7373 = exp(t7367);
                    t7374 = Ei(-t7367);
                }
                double t7375 = a3*c0*t7342*t7360*t7365*t7366*t7349*(2.0/3.0);
                double t7376 = c*c0*gamma_aa*t7344*t7372*t7347*t7365*t7366*t7349*t7358*(8.0/3.0);
                double t7383 = c*c0*t7343*t7370*t7371*t7365*t7349*t7358*(4.0/3.0);
                double t7377 = -t7383+t7375+t7376;
                double t7378 = sqrt(t7367);
                double t7379 = t7378*6.0;
                double t7380 = c*c0*t7343*t7365*t7366*t7349*t7358*4.0;
                double t7381 = t7380+t7379+3.0;
                double t7382 = 1.0/t7381;
                double t7384 = c*c0*t7343*t7373*t7365*t7374*t7366*t7349*t7358*(2.0/3.0);
                double t7385 = t7384+1.0;
                double t7386 = t7378*4.0;
                double t7387 = c*c0*t7343*t7365*t7366*t7349*t7358*(8.0/3.0);
                double t7388 = t7386+t7387+6.0;
                double t7389 = 1.0/sqrt(t7367);
                double t7390 = 1.0/sqrt(t7358);
                double t7391 = exp(-t7359);
                v_rho_b_gamma_aa[Q] += scale * c0*heaviside(c*c0*t7343*(-2.0/3.0)+t7362*t7354*t7390*exp(-t7344*t7345*t7346*t7347)*1.0E5)*(t7373*t7374*t7377+t7382*t7388*(-t7383+t7375+t7376+a3*c0*t7342*t7360*t7373*t7365*t7374*t7366*t7349*(2.0/3.0)-c*c0*t7343*t7370*t7371*t7373*t7365*t7374*t7349*t7358*(4.0/3.0)+c*c0*t7343*t7373*t7365*t7374*t7366*t7349*t7358*t7377*(2.0/3.0)+c*c0*gamma_aa*t7344*t7372*t7373*t7347*t7365*t7374*t7366*t7349*t7358*(8.0/3.0))+t7382*t7385*(t7377*t7389*2.0+a3*c0*t7342*t7360*t7365*t7366*t7349*(8.0/3.0)-c*c0*t7343*t7370*t7371*t7365*t7349*t7358*(1.6E1/3.0)+c*c0*gamma_aa*t7344*t7372*t7347*t7365*t7366*t7349*t7358*(3.2E1/3.0))-1.0/(t7381*t7381)*t7385*t7388*(t7377*t7389*3.0+a3*c0*t7342*t7360*t7365*t7366*t7349*4.0-c*c0*t7343*t7370*t7371*t7365*t7349*t7358*8.0+c*c0*gamma_aa*t7344*t7372*t7347*t7365*t7366*t7349*t7358*1.6E1)+(pow(rho_a,1.0/3.0)*(t7362*t7362)*(t7354*t7354)*t7355*t7377*exp(-t7348)*(3.0/2.0))/(c0*t7358))*(1.0/2.0)-c0*dirac(c*c0*t7343*(2.0/3.0)-t7362*t7354*t7390*t7391*1.0E5)*(t7373*t7374+t7382*t7385*t7388)*(t7370*t7354*t7390*t7391*-1.0E5+a3*t7342*t7362*t7354*t7355*t7391*t7356*1.0/pow(t7358,3.0/2.0)*5.0E4+gamma_aa*t7344*t7362*t7354*t7390*t7346*t7391*t7347*2.0E5)*(1.0/2.0);
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t7394 = tspi_m13*tspi_m13;
                double t7395 = 1.0/pow(rho_b,1.0/3.0);
                double t7396 = a2*a2;
                double t7397 = gamma_bb*gamma_bb;
                double t7398 = 1.0/pow(rho_b,1.6E1/3.0);
                double t7399 = t7394*t7394;
                double t7400 = c*t7395;
                double t7401 = a4*a4;
                double t7402 = 1.0/c;
                double t7403 = 1.0/pow(rho_b,7.0/3.0);
                double t7404 = sqrt(t7400);
                double t7405 = t7397*t7398*t7399*t7401*2.0;
                double t7406 = exp(t7405);
                double t7407 = t7397*t7398*t7399*t7401;
                double t7408 = t7407+1.0;
                double t7409 = 1.0/(t7408*t7408);
                double t7410 = a5*gamma_bb*t7394*t7402*t7403;
                double t7411 = t7410+1.0;
                double t7422 = raa2*t7404;
                double t7412 = exp(-t7422);
                double t7413 = t7412-1.0;
                double t7414 = kaa2*t7413;
                double t7415 = pow(t7400,2.0/5.0);
                double t7423 = raa1*t7415;
                double t7416 = exp(-t7423);
                double t7417 = t7416-1.0;
                double t7418 = kaa1*t7417;
                double t7419 = -kaa0+t7414+t7418;
                double t7420 = 1.0/(t7419*t7419);
                double t7421 = c*c0*t7395*t7411*t7420*t7406*t7409*(2.0/3.0);
                double t7424 = 1.0/pow(rho_b,8.0/3.0);
                double t7425 = 1.0/pow(rho_b,4.0/3.0);
                double t7426 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t7427 = 1.0/pow(rho_b,2.0E1/3.0);
                double t7428 = 1.0/(t7408*t7408*t7408);
                double t7429 = t7401*t7401;
                double t7430 = 1.0/pow(rho_b,1.2E1);
                double t7431 = t7399*t7399;
                double t7432 = 1.0/sqrt(t7400);
                double t7433 = c*kaa2*raa2*t7412*t7432*t7425*(1.0/6.0);
                double t7434 = 1.0/pow(t7400,3.0/5.0);
                double t7435 = c*kaa1*raa1*t7416*t7425*t7434*(2.0/1.5E1);
                double t7436 = t7433+t7435;
                double t7437 = 1.0/(t7419*t7419*t7419);
                double t7438 = 1.0/pow(rho_b,1.7E1/3.0);
                double t7439 = 1.0/t7408;
                double t7440 = c*c0*t7395*t7411*t7420*t7406*(2.0/3.0);
                double t7441 = sqrt(t7440);
                double t7442 = 1.0/pow(rho_b,1.1E1/3.0);
                double t7443;
                double t7444;
                if (t7421 > expei_cutoff) {
                    t7443 = 1.0;
                    t7444 = expei(t7421);
                } else {
                    t7443 = exp(t7421);
                    t7444 = Ei(-t7421);
                }
                double t7445 = c*c0*t7411*t7420*t7406*t7425*t7409*(2.0/9.0);
                double t7446 = a5*c0*gamma_bb*t7394*t7420*t7406*t7442*t7409*(1.4E1/9.0);
                double t7447 = c*c0*t7395*t7411*t7406*t7409*t7436*t7437*(4.0/3.0);
                double t7448 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7409*t7427*(6.4E1/9.0);
                double t7449 = t7441*t7439*6.0;
                double t7450 = c*c0*t7395*t7411*t7420*t7406*t7409*4.0;
                double t7451 = t7450+t7449+3.0;
                double t7452 = 1.0/t7451;
                double t7453 = a5*c0*t7394*t7420*t7406*t7424*t7409*(2.0/3.0);
                double t7454 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7409*t7438*(8.0/3.0);
                double t7455 = 1.0/sqrt(t7440);
                double t7458 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7428*t7438*(8.0/3.0);
                double t7456 = t7453+t7454-t7458;
                double t7469 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7427*t7428*(6.4E1/9.0);
                double t7457 = t7445+t7446+t7447+t7448-t7469;
                double t7459 = 1.0/pow(rho_b,1.9E1/3.0);
                double t7460 = a5*c0*t7394*t7420*t7406*t7442*t7409*(1.6E1/9.0);
                double t7461 = a5*c0*t7394*t7406*t7424*t7409*t7436*t7437*(4.0/3.0);
                double t7462 = a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*t7409*(4.0E1/3.0);
                double t7463 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7409*t7427*(1.36E2/9.0);
                double t7464 = c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7409*t7429*(2.56E2/9.0);
                double t7465 = 1.0/(t7408*t7408*t7408*t7408);
                double t7466 = c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7429*t7465*(1.28E2/3.0);
                double t7467 = c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7409*t7436*t7437*t7438*(1.6E1/3.0);
                double t7470 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7427*t7428*(1.36E2/9.0);
                double t7471 = c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7428*t7429*(5.12E2/9.0);
                double t7472 = c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7436*t7428*t7437*t7438*(1.6E1/3.0);
                double t7529 = a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*t7428*(4.0E1/3.0);
                double t7468 = t7460+t7461-t7470+t7462-t7471+t7463-t7472+t7464+t7466+t7467-t7529;
                double t7473 = a5*c0*t7394*t7420*t7406*t7424*(2.0/3.0);
                double t7474 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7438*(8.0/3.0);
                double t7475 = t7473+t7474;
                double t7476 = c*c0*t7411*t7420*t7406*t7425*(2.0/9.0);
                double t7477 = a5*c0*gamma_bb*t7394*t7420*t7406*t7442*(1.4E1/9.0);
                double t7478 = c*c0*t7395*t7411*t7406*t7436*t7437*(4.0/3.0);
                double t7479 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7427*(6.4E1/9.0);
                double t7480 = t7476+t7477+t7478+t7479;
                double t7481 = t7441*t7439*4.0;
                double t7482 = c*c0*t7395*t7411*t7420*t7406*t7409*(8.0/3.0);
                double t7483 = t7481+t7482+6.0;
                double t7484 = a5*c0*t7394*t7420*t7406*t7424*t7443*t7444*t7409*(2.0/3.0);
                double t7485 = c*c0*t7395*t7411*t7420*t7406*t7443*t7444*t7409*t7456*(2.0/3.0);
                double t7486 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7409*t7438*(8.0/3.0);
                double t7487 = c*c0*t7395*t7411*t7420*t7406*t7443*t7444*t7409*(2.0/3.0);
                double t7488 = t7487+1.0;
                double t7489 = 1.0/(t7451*t7451);
                double t7490 = a5*c0*t7394*t7420*t7406*t7442*(1.6E1/9.0);
                double t7491 = a5*c0*t7394*t7406*t7424*t7436*t7437*(4.0/3.0);
                double t7492 = a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*(4.0E1/3.0);
                double t7493 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7427*(1.36E2/9.0);
                double t7494 = c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7429*(2.56E2/9.0);
                double t7495 = c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7436*t7437*t7438*(1.6E1/3.0);
                double t7496 = t7490+t7491+t7492+t7493+t7494+t7495;
                double t7497 = 1.0/pow(t7440,3.0/2.0);
                double t7498 = 1.0/pow(rho_b,3.5E1/3.0);
                double t7499 = t7455*t7439*t7475*2.0;
                double t7500 = a5*c0*t7394*t7420*t7406*t7424*t7409*(8.0/3.0);
                double t7501 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7409*t7438*(3.2E1/3.0);
                double t7563 = gamma_bb*t7398*t7399*t7401*t7441*t7409*8.0;
                double t7564 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7428*t7438*(3.2E1/3.0);
                double t7502 = t7499+t7500+t7501-t7563-t7564;
                double t7503 = t7480*t7455*t7439*3.0;
                double t7504 = c*c0*t7411*t7420*t7406*t7425*t7409*(4.0/3.0);
                double t7505 = a5*c0*gamma_bb*t7394*t7420*t7406*t7442*t7409*(2.8E1/3.0);
                double t7506 = c*c0*t7395*t7411*t7406*t7409*t7436*t7437*8.0;
                double t7507 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7409*t7427*(1.28E2/3.0);
                double t7526 = t7397*t7399*t7401*t7441*t7409*t7459*3.2E1;
                double t7527 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7427*t7428*(1.28E2/3.0);
                double t7508 = t7503+t7504+t7505+t7506+t7507-t7526-t7527;
                double t7509 = t7480*t7455*t7439*2.0;
                double t7510 = c*c0*t7411*t7420*t7406*t7425*t7409*(8.0/9.0);
                double t7511 = a5*c0*gamma_bb*t7394*t7420*t7406*t7442*t7409*(5.6E1/9.0);
                double t7512 = c*c0*t7395*t7411*t7406*t7409*t7436*t7437*(1.6E1/3.0);
                double t7513 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7409*t7427*(2.56E2/9.0);
                double t7558 = t7397*t7399*t7401*t7441*t7409*t7459*(6.4E1/3.0);
                double t7559 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7427*t7428*(2.56E2/9.0);
                double t7514 = t7510+t7511+t7512+t7513+t7509-t7558-t7559;
                double t7515 = t7455*t7439*t7475*3.0;
                double t7516 = a5*c0*t7394*t7420*t7406*t7424*t7409*4.0;
                double t7517 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7409*t7438*1.6E1;
                double t7524 = gamma_bb*t7398*t7399*t7401*t7441*t7409*1.2E1;
                double t7525 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7428*t7438*1.6E1;
                double t7518 = t7515-t7524+t7516-t7525+t7517;
                double t7519 = c*c0*t7411*t7420*t7406*t7425*t7443*t7444*t7409*(2.0/9.0);
                double t7520 = c*c0*t7395*t7411*t7406*t7443*t7444*t7409*t7436*t7437*(4.0/3.0);
                double t7521 = c*c0*t7395*t7411*t7420*t7406*t7443*t7444*t7409*t7457*(2.0/3.0);
                double t7522 = a5*c0*gamma_bb*t7394*t7420*t7406*t7442*t7443*t7444*t7409*(1.4E1/9.0);
                double t7523 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7409*t7427*(6.4E1/9.0);
                double t7528 = 1.0/t7411;
                double t7530 = 1.0/c0;
                double t7531 = pow(rho_b,1.0/3.0);
                double t7532 = exp(-t7405);
                double t7533 = t7408*t7408;
                double t7534 = t7419*t7419;
                double t7535 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b);
                double t7560 = c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7427*t7428*(6.4E1/9.0);
                double t7536 = t7445+t7446+t7447+t7448-t7469+t7520+t7521+t7522+t7523-t7560+t7519;
                double t7565 = c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7428*t7438*(8.0/3.0);
                double t7537 = t7453+t7454+t7484-t7458+t7485+t7486-t7565;
                double t7538 = t7396*t7397*t7398*t7399;
                double t7539 = pow(t7400,4.0/5.0);
                double t7556 = rab1*t7539;
                double t7540 = exp(-t7556);
                double t7541 = t7540-1.0;
                double t7557 = kab1*t7541;
                double t7542 = kab0-t7557;
                double t7543 = a3*gamma_bb*t7394*t7402*t7403;
                double t7544 = t7543+1.0;
                double t7545 = 1.0/sqrt(t7544);
                double t7546 = a1*gamma_bb*t7394*t7424;
                double t7547 = t7546+t7538+1.0;
                double t7548 = c*c;
                double t7549 = 1.0/pow(rho_b,2.0/3.0);
                double t7550 = k1*t7404;
                double t7551 = c*k2*t7395;
                double t7552 = t7550+t7551;
                double t7553 = 1.0/(t7552*t7552);
                double t7562 = t7553*t7548*t7549;
                double t7554 = exp(-t7562);
                double t7555 = exp(-t7538);
                double t7561 = c*c0*t7395*(2.0/3.0);
                double t7566 = t7542*t7545*t7555*t7547*1.0E5;
                double t7567 = 1.0/pow(rho_b,1.0E1/3.0);
                double t7568 = 1.0/pow(t7544,3.0/2.0);
                double t7569 = t7396*t7397*t7399*t7459*(1.6E1/3.0);
                double t7570 = a1*gamma_bb*t7394*t7442*(8.0/3.0);
                double t7571 = t7570+t7569;
                double t7572 = a1*t7394*t7424;
                double t7573 = gamma_bb*t7396*t7398*t7399*2.0;
                double t7574 = t7572+t7573;
                double t7575 = 1.0/(c*c);
                double t7576 = 1.0/pow(t7400,1.0/5.0);
                double t7577 = t7561-t7566;
                double t7578 = dirac(t7577);
                double t7579 = t7443*t7444*t7456;
                double t7580 = t7452*t7488*t7502;
                double t7581 = t7452*t7483*t7537;
                double t7582 = t7402*t7456*t7530*t7531*t7532*t7533*t7534*t7528*(3.0/2.0);
                double t7716 = t7483*t7488*t7489*t7518;
                double t7583 = t7580+t7581+t7582+t7579-t7716;
                double t7584 = t7443*t7444;
                double t7585 = t7452*t7483*t7488;
                double t7586 = t7584+t7585;
                double t7587 = 1.0/pow(rho_b,5.0/3.0);
                double t7588 = t7553*t7548*t7587*(2.0/3.0);
                double t7589 = 1.0/(t7552*t7552*t7552);
                double t7590 = c*k2*t7425*(1.0/3.0);
                double t7591 = c*k1*t7432*t7425*(1.0/6.0);
                double t7592 = t7590+t7591;
                double t7593 = t7588-t7592*t7548*t7549*t7589*2.0;
                double t7594 = a3*t7394*t7402*t7403*t7542*t7555*t7547*t7568*5.0E4;
                double t7595 = gamma_bb*t7396*t7398*t7399*t7542*t7545*t7555*t7547*2.0E5;
                double t7597 = t7542*t7545*t7555*t7574*1.0E5;
                double t7596 = t7594+t7595-t7597;
                double t7598 = c*c0*t7425*(2.0/9.0);
                double t7599 = t7396*t7397*t7399*t7459*t7542*t7545*t7555*t7547*(1.6E6/3.0);
                double t7600 = a3*gamma_bb*t7394*t7402*t7542*t7555*t7547*t7567*t7568*(3.5E5/3.0);
                double t7710 = t7542*t7571*t7545*t7555*1.0E5;
                double t7711 = c*kab1*rab1*t7425*t7540*t7545*t7555*t7547*t7576*(8.0E4/3.0);
                double t7601 = t7598+t7599+t7600-t7710-t7711;
                double t7602 = -t7561+t7566;
                double t7603 = heaviside(t7602);
                double t7604 = t7396*t7397*t7398*t7399*2.0;
                double t7605 = exp(t7604);
                double t7606 = 1.0/(t7542*t7542);
                double t7607 = 1.0/(t7547*t7547);
                double t7608 = c*c0*t7395*t7544*t7605*t7606*t7607*(2.0/3.0);
                double t7609 = 1.0/(t7547*t7547*t7547);
                double t7610;
                double t7611;
                if (t7608 > expei_cutoff) {
                    t7610 = 1.0;
                    t7611 = expei(t7608);
                } else {
                    t7610 = exp(t7608);
                    t7611 = Ei(-t7608);
                }
                double t7612 = c*c0*t7425*t7544*t7605*t7606*t7607*(2.0/9.0);
                double t7613 = a3*c0*gamma_bb*t7394*t7442*t7605*t7606*t7607*(1.4E1/9.0);
                double t7614 = c*c0*t7396*t7397*t7399*t7427*t7544*t7605*t7606*t7607*(6.4E1/9.0);
                double t7615 = 1.0/(t7542*t7542*t7542);
                double t7616 = sqrt(t7608);
                double t7617 = t7616*6.0;
                double t7618 = c*c0*t7395*t7544*t7605*t7606*t7607*4.0;
                double t7619 = t7617+t7618+3.0;
                double t7620 = 1.0/t7619;
                double t7643 = c*c0*t7395*t7544*t7571*t7605*t7606*t7609*(4.0/3.0);
                double t7644 = c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7605*t7615*t7607*(1.6E1/4.5E1);
                double t7621 = t7612+t7613+t7614-t7643-t7644;
                double t7622 = 1.0/sqrt(t7608);
                double t7623 = a3*c0*t7394*t7424*t7605*t7606*t7607*(2.0/3.0);
                double t7624 = c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7605*t7606*t7607*(8.0/3.0);
                double t7626 = c*c0*t7395*t7544*t7574*t7605*t7606*t7609*(4.0/3.0);
                double t7625 = t7623+t7624-t7626;
                double t7627 = a1*t7394*t7442*(8.0/3.0);
                double t7628 = gamma_bb*t7396*t7399*t7459*(3.2E1/3.0);
                double t7629 = t7627+t7628;
                double t7630 = t7396*t7396;
                double t7631 = a3*c0*t7394*t7424*t7571*t7605*t7606*t7609*(4.0/3.0);
                double t7632 = c*c0*t7425*t7544*t7574*t7605*t7606*t7609*(4.0/9.0);
                double t7633 = c*c0*t7395*t7544*t7605*t7606*t7609*t7629*(4.0/3.0);
                double t7634 = 1.0/(t7547*t7547*t7547*t7547);
                double t7635 = a3*c0*gamma_bb*t7394*t7442*t7574*t7605*t7606*t7609*(2.8E1/9.0);
                double t7636 = c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7571*t7605*t7606*t7609*(1.6E1/3.0);
                double t7637 = c*c0*t7396*t7397*t7399*t7427*t7544*t7574*t7605*t7606*t7609*(1.28E2/9.0);
                double t7638 = 1.0/(rho_b*rho_b*rho_b*rho_b);
                double t7639 = a3*c*c0*kab1*rab1*t7394*t7540*t7576*t7605*t7615*t7607*t7638*(1.6E1/4.5E1);
                double t7640 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t7641 = c0*gamma_bb*kab1*rab1*t7396*t7399*t7540*t7544*t7548*t7576*t7640*t7605*t7615*t7607*(6.4E1/4.5E1);
                double t7646 = a3*c0*t7394*t7442*t7605*t7606*t7607*(1.6E1/9.0);
                double t7647 = c*c0*t7395*t7544*t7571*t7574*t7605*t7606*t7634*4.0;
                double t7648 = a3*c0*t7394*t7396*t7397*t7399*t7426*t7605*t7606*t7607*(4.0E1/3.0);
                double t7649 = c*c0*gamma_bb*t7396*t7399*t7427*t7544*t7605*t7606*t7607*(1.36E2/9.0);
                double t7650 = c*c0*gamma_bb*t7397*t7430*t7431*t7544*t7630*t7605*t7606*t7607*(2.56E2/9.0);
                double t7651 = c0*kab1*rab1*t7540*t7544*t7574*t7548*t7576*t7587*t7605*t7615*t7609*(3.2E1/4.5E1);
                double t7642 = t7631+t7632+t7641-t7650+t7633-t7651+t7635+t7636+t7637-t7646-t7647+t7639-t7648-t7649;
                double t7645 = 1.0/rho_b;
                double t7652 = c*c0*t7395*t7544*t7610*t7611*t7605*t7606*t7607*(2.0/3.0);
                double t7653 = t7652+1.0;
                double t7654 = t7622*t7625*2.0;
                double t7655 = a3*c0*t7394*t7424*t7605*t7606*t7607*(8.0/3.0);
                double t7656 = c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7605*t7606*t7607*(3.2E1/3.0);
                double t7708 = c*c0*t7395*t7544*t7574*t7605*t7606*t7609*(1.6E1/3.0);
                double t7657 = t7654+t7655+t7656-t7708;
                double t7658 = 1.0/(t7619*t7619);
                double t7659 = t7621*t7622*2.0;
                double t7660 = c*c0*t7425*t7544*t7605*t7606*t7607*(8.0/9.0);
                double t7661 = a3*c0*gamma_bb*t7394*t7442*t7605*t7606*t7607*(5.6E1/9.0);
                double t7662 = c*c0*t7396*t7397*t7399*t7427*t7544*t7605*t7606*t7607*(2.56E2/9.0);
                double t7694 = c*c0*t7395*t7544*t7571*t7605*t7606*t7609*(1.6E1/3.0);
                double t7695 = c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7605*t7615*t7607*(6.4E1/4.5E1);
                double t7663 = t7660+t7661+t7662-t7694+t7659-t7695;
                double t7664 = t7616*4.0;
                double t7665 = c*c0*t7395*t7544*t7605*t7606*t7607*(8.0/3.0);
                double t7666 = t7664+t7665+6.0;
                double t7667 = t7622*t7625*3.0;
                double t7668 = a3*c0*t7394*t7424*t7605*t7606*t7607*4.0;
                double t7669 = c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7605*t7606*t7607*1.6E1;
                double t7685 = c*c0*t7395*t7544*t7574*t7605*t7606*t7609*8.0;
                double t7670 = t7667-t7685+t7668+t7669;
                double t7671 = c*c0*t7425*t7544*t7610*t7611*t7605*t7606*t7607*(2.0/9.0);
                double t7672 = a3*c0*gamma_bb*t7394*t7442*t7610*t7611*t7605*t7606*t7607*(1.4E1/9.0);
                double t7673 = c*c0*t7395*t7544*t7610*t7611*t7621*t7605*t7606*t7607*(2.0/3.0);
                double t7674 = c*c0*t7396*t7397*t7399*t7427*t7544*t7610*t7611*t7605*t7606*t7607*(6.4E1/9.0);
                double t7675 = t7621*t7622*3.0;
                double t7676 = c*c0*t7425*t7544*t7605*t7606*t7607*(4.0/3.0);
                double t7677 = a3*c0*gamma_bb*t7394*t7442*t7605*t7606*t7607*(2.8E1/3.0);
                double t7678 = c*c0*t7396*t7397*t7399*t7427*t7544*t7605*t7606*t7607*(1.28E2/3.0);
                double t7686 = c*c0*t7395*t7544*t7571*t7605*t7606*t7609*8.0;
                double t7687 = c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7605*t7615*t7607*(3.2E1/1.5E1);
                double t7679 = t7675+t7676+t7677-t7686+t7678-t7687;
                double t7680 = a3*c0*t7394*t7424*t7610*t7611*t7605*t7606*t7607*(2.0/3.0);
                double t7681 = c*c0*t7395*t7544*t7610*t7611*t7605*t7606*t7607*t7625*(2.0/3.0);
                double t7682 = c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7610*t7611*t7605*t7606*t7607*(8.0/3.0);
                double t7709 = c*c0*t7395*t7544*t7574*t7610*t7611*t7605*t7606*t7609*(4.0/3.0);
                double t7683 = t7623+t7624-t7626+t7680+t7681+t7682-t7709;
                double t7684 = 1.0/pow(t7608,3.0/2.0);
                double t7688 = 1.0/t7544;
                double t7689 = exp(-t7604);
                double t7690 = t7542*t7542;
                double t7691 = t7547*t7547;
                double t7692 = 1.0/(rho_b*rho_b);
                double t7693 = t7612+t7613+t7614-t7643-t7644+t7671+t7672+t7673+t7674-c*c0*t7395*t7544*t7571*t7610*t7611*t7605*t7606*t7609*(4.0/3.0)-c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7610*t7611*t7605*t7615*t7607*(1.6E1/4.5E1);
                double t7696 = a3*t7394*t7402*t7542*t7555*t7547*t7567*t7568*(3.5E5/3.0);
                double t7697 = a3*t7394*t7402*t7403*t7542*t7571*t7555*t7568*5.0E4;
                double t7698 = gamma_bb*t7396*t7399*t7459*t7542*t7545*t7555*t7547*(3.2E6/3.0);
                double t7699 = gamma_bb*t7396*t7398*t7399*t7542*t7571*t7545*t7555*2.0E5;
                double t7700 = t7396*t7397*t7399*t7459*t7542*t7545*t7555*t7574*(1.6E6/3.0);
                double t7701 = a3*a3;
                double t7702 = 1.0/pow(t7544,5.0/2.0);
                double t7703 = a3*gamma_bb*t7394*t7402*t7542*t7555*t7574*t7567*t7568*(3.5E5/3.0);
                double t7704 = a3*kab1*rab1*t7394*t7442*t7540*t7555*t7547*t7576*t7568*(4.0E4/3.0);
                double t7705 = 1.0/pow(rho_b,2.6E1/3.0);
                double t7706 = c*gamma_bb*kab1*rab1*t7396*t7399*t7427*t7540*t7545*t7555*t7547*t7576*(1.6E5/3.0);
                double t7707 = t7696+t7697+t7698+t7699+t7700+t7703+t7704+t7706-t7542*t7545*t7555*t7629*1.0E5-c*kab1*rab1*t7425*t7540*t7545*t7555*t7574*t7576*(8.0E4/3.0)-gamma_bb*t7397*t7431*t7498*t7542*t7545*t7555*t7547*t7630*(3.2E6/3.0)-gamma_bb*t7399*t7438*t7542*t7555*t7547*t7575*t7701*t7702*1.75E5-a3*t7394*t7396*t7397*t7399*t7402*t7542*t7555*t7547*t7568*t7705*5.0E5;
                double t7712 = dirac(t7577,1.0);
                double t7713 = t7610*t7611;
                double t7714 = t7620*t7653*t7666;
                double t7715 = t7713+t7714;
                v_rho_b_gamma_bb[Q] += scale * rho_b*(c0*t7554*heaviside(c*c0*t7395*(-2.0/3.0)+t7542*t7545*t7547*exp(-t7396*t7397*t7398*t7399)*1.0E5)*(t7452*t7488*(t7455*t7439*t7496*2.0-t7480*t7439*t7475*t7497-gamma_bb*t7399*t7401*t7441*t7409*t7459*(1.28E2/3.0)+a5*c0*t7394*t7420*t7406*t7442*t7409*(6.4E1/9.0)-gamma_bb*t7398*t7399*t7401*t7480*t7409*t7455*4.0+gamma_bb*t7397*t7431*t7441*t7428*t7429*t7498*(2.56E2/3.0)-t7397*t7399*t7401*t7409*t7455*t7475*t7459*(3.2E1/3.0)+a5*c0*t7394*t7406*t7424*t7409*t7436*t7437*(1.6E1/3.0)+c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7409*t7427*(5.44E2/9.0)-c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7427*t7428*(5.44E2/9.0)+a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*t7409*(1.6E2/3.0)-a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*t7428*(1.6E2/3.0)+c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7409*t7429*(1.024E3/9.0)-c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7428*t7429*(2.048E3/9.0)+c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7429*t7465*(5.12E2/3.0)+c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7409*t7436*t7437*t7438*(6.4E1/3.0)-c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7436*t7428*t7437*t7438*(6.4E1/3.0))+t7452*t7483*(t7460+t7461-t7470+t7462-t7471+t7463-t7472+t7464+t7466+t7467-t7529+t7456*t7457+t7456*t7645*(1.0/3.0)+(t7436*t7456*2.0)/t7419+t7397*t7399*t7401*t7456*t7459*(3.2E1/3.0)-t7397*t7399*t7401*t7456*t7439*t7459*(3.2E1/3.0)+a5*gamma_bb*t7394*t7402*t7456*t7528*t7567*(7.0/3.0)+a5*c0*t7394*t7420*t7406*t7442*t7443*t7444*t7409*(1.6E1/9.0)+a5*c0*t7394*t7420*t7406*t7424*t7443*t7444*t7409*t7457*(2.0/3.0)+a5*c0*t7394*t7406*t7424*t7443*t7444*t7409*t7436*t7437*(4.0/3.0)+c*c0*t7395*t7411*t7420*t7406*t7443*t7444*t7409*t7468*(2.0/3.0)+c*c0*t7411*t7420*t7406*t7425*t7443*t7444*t7409*t7456*(2.0/9.0)+a5*c0*gamma_bb*t7394*t7420*t7406*t7442*t7443*t7444*t7409*t7456*(1.4E1/9.0)+c*c0*t7395*t7411*t7420*t7406*t7443*t7444*t7409*t7456*t7457*(2.0/3.0)+c*c0*t7395*t7411*t7406*t7443*t7444*t7409*t7436*t7437*t7456*(4.0/3.0)+c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7409*t7427*(1.36E2/9.0)-c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7427*t7428*(1.36E2/9.0)+a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7443*t7426*t7444*t7409*(4.0E1/3.0)-a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7443*t7426*t7444*t7428*(4.0E1/3.0)+c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7443*t7444*t7409*t7429*(2.56E2/9.0)-c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7443*t7444*t7428*t7429*(5.12E2/9.0)+c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7443*t7444*t7429*t7465*(1.28E2/3.0)+c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7409*t7438*t7457*(8.0/3.0)-c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7428*t7438*t7457*(8.0/3.0)+c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7443*t7444*t7409*t7436*t7437*t7438*(1.6E1/3.0)-c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7443*t7444*t7436*t7428*t7437*t7438*(1.6E1/3.0)+c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7409*t7427*t7456*(6.4E1/9.0)-c*c0*t7397*t7399*t7401*t7411*t7420*t7406*t7443*t7444*t7427*t7428*t7456*(6.4E1/9.0))+t7443*t7444*t7468+t7452*t7502*t7536+t7452*t7514*t7537+t7443*t7444*t7456*t7457-t7488*t7489*t7502*t7508-t7483*t7489*t7508*t7537-t7483*t7489*t7518*t7536-t7488*t7489*t7514*t7518-t7483*t7488*t7489*(t7455*t7439*t7496*3.0-t7480*t7439*t7475*t7497*(3.0/2.0)-gamma_bb*t7399*t7401*t7441*t7409*t7459*6.4E1+a5*c0*t7394*t7420*t7406*t7442*t7409*(3.2E1/3.0)-gamma_bb*t7398*t7399*t7401*t7480*t7409*t7455*6.0+gamma_bb*t7397*t7431*t7441*t7428*t7429*t7498*1.28E2-t7397*t7399*t7401*t7409*t7455*t7475*t7459*1.6E1+a5*c0*t7394*t7406*t7424*t7409*t7436*t7437*8.0+c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7409*t7427*(2.72E2/3.0)-c*c0*gamma_bb*t7399*t7401*t7411*t7420*t7406*t7427*t7428*(2.72E2/3.0)+a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*t7409*8.0E1-a5*c0*t7394*t7397*t7399*t7401*t7420*t7406*t7426*t7428*8.0E1+c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7409*t7429*(5.12E2/3.0)-c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7428*t7429*(1.024E3/3.0)+c*c0*gamma_bb*t7397*t7411*t7420*t7430*t7431*t7406*t7429*t7465*2.56E2+c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7409*t7436*t7437*t7438*3.2E1-c*c0*gamma_bb*t7399*t7401*t7411*t7406*t7436*t7428*t7437*t7438*3.2E1)+1.0/(t7451*t7451*t7451)*t7483*t7488*t7508*t7518*2.0+t7402*t7468*t7530*t7531*t7532*t7533*t7534*t7528*(3.0/2.0)+t7402*t7456*t7457*t7530*t7531*t7532*t7533*t7534*t7528*(3.0/2.0)-a5*t7394*1.0/(t7411*t7411)*t7457*t7530*t7532*t7533*t7534*t7575*t7692*(3.0/2.0)+gamma_bb*t7399*t7401*t7402*t7408*t7457*t7530*t7532*t7534*t7535*t7528*6.0-gamma_bb*t7399*t7401*t7402*t7457*t7530*t7532*t7533*t7534*t7535*t7528*6.0)*(-1.0/2.0)+c0*t7554*t7583*t7593*t7603*(1.0/2.0)+c0*t7554*t7583*t7578*t7601*(1.0/2.0)+c0*t7554*t7586*t7578*t7707*(1.0/2.0)+c0*t7554*t7596*dirac(t7561-t7542*t7545*t7555*t7547*1.0E5)*(t7443*t7444*t7457+t7452*t7483*t7536+t7452*t7488*t7514-t7483*t7488*t7489*t7508+t7402*t7457*t7530*t7531*t7532*t7533*t7534*t7528*(3.0/2.0))*(1.0/2.0)-c0*t7554*t7593*t7586*t7578*t7596*(1.0/2.0)+c0*t7554*t7586*t7596*t7601*t7712*(1.0/2.0))+rho_a*(c0*t7603*(t7620*t7653*(t7622*t7642*2.0+t7621*t7625*t7684-a3*c0*t7394*t7442*t7605*t7606*t7607*(6.4E1/9.0)+a3*c0*t7394*t7424*t7571*t7605*t7606*t7609*(1.6E1/3.0)+c*c0*t7425*t7544*t7574*t7605*t7606*t7609*(1.6E1/9.0)+c*c0*t7395*t7544*t7605*t7606*t7609*t7629*(1.6E1/3.0)+a3*c0*gamma_bb*t7394*t7442*t7574*t7605*t7606*t7609*(1.12E2/9.0)-c*c0*t7395*t7544*t7571*t7574*t7605*t7606*t7634*1.6E1-c*c0*gamma_bb*t7396*t7399*t7427*t7544*t7605*t7606*t7607*(5.44E2/9.0)-a3*c0*t7394*t7396*t7397*t7399*t7426*t7605*t7606*t7607*(1.6E2/3.0)+c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7571*t7605*t7606*t7609*(6.4E1/3.0)-c*c0*gamma_bb*t7397*t7430*t7431*t7544*t7630*t7605*t7606*t7607*(1.024E3/9.0)+c*c0*t7396*t7397*t7399*t7427*t7544*t7574*t7605*t7606*t7609*(5.12E2/9.0)+a3*c*c0*kab1*rab1*t7394*t7540*t7576*t7605*t7615*t7607*t7638*(6.4E1/4.5E1)-c0*kab1*rab1*t7540*t7544*t7574*t7548*t7576*t7587*t7605*t7615*t7609*(1.28E2/4.5E1)+c0*gamma_bb*kab1*rab1*t7396*t7399*t7540*t7544*t7548*t7576*t7640*t7605*t7615*t7607*(2.56E2/4.5E1))+t7620*t7666*(t7631+t7632+t7641-t7650+t7633-t7651+t7635+t7636+t7637-t7646-t7647+t7639-t7648-t7649-t7621*t7625-t7625*t7645*(1.0/3.0)+(t7571*t7625*2.0)/t7547-t7396*t7397*t7399*t7459*t7625*(3.2E1/3.0)-a3*gamma_bb*t7394*t7402*t7567*t7625*t7688*(7.0/3.0)+(c*kab1*rab1*t7425*t7540*t7576*t7625*(8.0/1.5E1))/t7542-a3*c0*t7394*t7442*t7610*t7611*t7605*t7606*t7607*(1.6E1/9.0)+a3*c0*t7394*t7424*t7571*t7610*t7611*t7605*t7606*t7609*(4.0/3.0)-a3*c0*t7394*t7424*t7610*t7611*t7621*t7605*t7606*t7607*(2.0/3.0)+c*c0*t7395*t7544*t7610*t7611*t7605*t7606*t7642*t7607*(2.0/3.0)+c*c0*t7425*t7544*t7574*t7610*t7611*t7605*t7606*t7609*(4.0/9.0)+c*c0*t7395*t7544*t7610*t7611*t7605*t7606*t7609*t7629*(4.0/3.0)-c*c0*t7425*t7544*t7610*t7611*t7605*t7606*t7607*t7625*(2.0/9.0)+a3*c0*gamma_bb*t7394*t7442*t7574*t7610*t7611*t7605*t7606*t7609*(2.8E1/9.0)-a3*c0*gamma_bb*t7394*t7442*t7610*t7611*t7605*t7606*t7607*t7625*(1.4E1/9.0)-c*c0*t7395*t7544*t7571*t7574*t7610*t7611*t7605*t7606*t7634*4.0+c*c0*t7395*t7544*t7574*t7610*t7611*t7621*t7605*t7606*t7609*(4.0/3.0)+c*c0*t7395*t7544*t7571*t7610*t7611*t7605*t7606*t7625*t7609*(4.0/3.0)-c*c0*t7395*t7544*t7610*t7611*t7621*t7605*t7606*t7607*t7625*(2.0/3.0)-c*c0*gamma_bb*t7396*t7399*t7427*t7544*t7610*t7611*t7605*t7606*t7607*(1.36E2/9.0)-a3*c0*t7394*t7396*t7397*t7399*t7426*t7610*t7611*t7605*t7606*t7607*(4.0E1/3.0)+c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7571*t7610*t7611*t7605*t7606*t7609*(1.6E1/3.0)-c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7610*t7611*t7621*t7605*t7606*t7607*(8.0/3.0)-c*c0*gamma_bb*t7397*t7430*t7431*t7544*t7610*t7611*t7630*t7605*t7606*t7607*(2.56E2/9.0)+c*c0*t7396*t7397*t7399*t7427*t7544*t7574*t7610*t7611*t7605*t7606*t7609*(1.28E2/9.0)-c*c0*t7396*t7397*t7399*t7427*t7544*t7610*t7611*t7605*t7606*t7607*t7625*(6.4E1/9.0)+a3*c*c0*kab1*rab1*t7394*t7540*t7576*t7610*t7611*t7605*t7615*t7607*t7638*(1.6E1/4.5E1)-c0*kab1*rab1*t7540*t7544*t7574*t7548*t7576*t7587*t7610*t7611*t7605*t7615*t7609*(3.2E1/4.5E1)+c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7610*t7611*t7605*t7615*t7607*t7625*(1.6E1/4.5E1)+c0*gamma_bb*kab1*rab1*t7396*t7399*t7540*t7544*t7548*t7576*t7610*t7611*t7640*t7605*t7615*t7607*(6.4E1/4.5E1))+t7610*t7611*t7642-t7620*t7663*t7683-t7620*t7657*(t7612+t7613+t7614+t7671+t7672+t7673+t7674-c*c0*t7395*t7544*t7571*t7605*t7606*t7609*(4.0/3.0)-c*c0*t7395*t7544*t7571*t7610*t7611*t7605*t7606*t7609*(4.0/3.0)-c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7605*t7615*t7607*(1.6E1/4.5E1)-c0*kab1*rab1*t7540*t7544*t7548*t7576*t7587*t7610*t7611*t7605*t7615*t7607*(1.6E1/4.5E1))-t7610*t7611*t7621*t7625+t7670*t7653*t7663*t7658+t7670*t7666*t7693*t7658+t7653*t7657*t7658*t7679+t7683*t7666*t7658*t7679-t7653*t7666*t7658*(t7622*t7642*3.0+t7621*t7625*t7684*(3.0/2.0)-a3*c0*t7394*t7442*t7605*t7606*t7607*(3.2E1/3.0)+a3*c0*t7394*t7424*t7571*t7605*t7606*t7609*8.0+c*c0*t7425*t7544*t7574*t7605*t7606*t7609*(8.0/3.0)+c*c0*t7395*t7544*t7605*t7606*t7609*t7629*8.0+a3*c0*gamma_bb*t7394*t7442*t7574*t7605*t7606*t7609*(5.6E1/3.0)-c*c0*t7395*t7544*t7571*t7574*t7605*t7606*t7634*2.4E1-c*c0*gamma_bb*t7396*t7399*t7427*t7544*t7605*t7606*t7607*(2.72E2/3.0)-a3*c0*t7394*t7396*t7397*t7399*t7426*t7605*t7606*t7607*8.0E1+c*c0*gamma_bb*t7396*t7399*t7438*t7544*t7571*t7605*t7606*t7609*3.2E1-c*c0*gamma_bb*t7397*t7430*t7431*t7544*t7630*t7605*t7606*t7607*(5.12E2/3.0)+c*c0*t7396*t7397*t7399*t7427*t7544*t7574*t7605*t7606*t7609*(2.56E2/3.0)+a3*c*c0*kab1*rab1*t7394*t7540*t7576*t7605*t7615*t7607*t7638*(3.2E1/1.5E1)-c0*kab1*rab1*t7540*t7544*t7574*t7548*t7576*t7587*t7605*t7615*t7609*(6.4E1/1.5E1)+c0*gamma_bb*kab1*rab1*t7396*t7399*t7540*t7544*t7548*t7576*t7640*t7605*t7615*t7607*(1.28E2/1.5E1))-t7670*t7653*1.0/(t7619*t7619*t7619)*t7666*t7679*2.0+t7402*t7530*t7531*t7642*t7690*t7691*t7688*t7689*(3.0/2.0)-t7402*t7530*t7531*t7547*t7574*t7621*t7690*t7688*t7689*3.0-t7402*t7530*t7531*t7621*t7625*t7690*t7691*t7688*t7689*(3.0/2.0)+a3*t7394*t7530*1.0/(t7544*t7544)*t7575*t7621*t7690*t7691*t7692*t7689*(3.0/2.0)+gamma_bb*t7396*t7399*t7402*t7530*t7535*t7621*t7690*t7691*t7688*t7689*6.0)*(1.0/2.0)+c0*t7578*t7715*t7707*(1.0/2.0)+c0*t7578*t7596*(t7610*t7611*t7621+t7620*t7653*t7663+t7620*t7666*t7693-t7653*t7666*t7658*t7679+t7402*t7530*t7531*t7621*t7690*t7691*t7688*t7689*(3.0/2.0))*(1.0/2.0)+c0*t7578*t7601*(t7610*t7611*t7625+t7620*t7653*t7657+t7620*t7683*t7666-t7670*t7653*t7666*t7658+t7402*t7530*t7531*t7625*t7690*t7691*t7688*t7689*(3.0/2.0))*(1.0/2.0)+c0*t7596*t7601*t7712*t7715*(1.0/2.0))+c0*t7554*t7583*t7603*(1.0/2.0)-c0*t7554*t7586*t7578*t7596*(1.0/2.0);
            }
            
        }
    }
}

}
