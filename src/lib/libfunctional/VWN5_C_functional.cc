/**********************************************************
* VWN5_C_functional.cc: definitions for VWN5_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include "VWN5_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

VWN5_C_Functional::VWN5_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "VWN5_C";
    description_ = "VWN5 Correlation Functional";
    citation_ = "S.H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys., 58, 1200-1211, 1980";

    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double d2fz0 = 1.7099209341613653E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double EcP_1 = 3.1090699999999999E-02;
    params_.push_back(make_pair("EcP_1",EcP_1));
    double EcP_2 = -1.0498000000000000E-01;
    params_.push_back(make_pair("EcP_2",EcP_2));
    double EcP_3 = 3.7274400000000001E+00;
    params_.push_back(make_pair("EcP_3",EcP_3));
    double EcP_4 = 1.2935200000000000E+01;
    params_.push_back(make_pair("EcP_4",EcP_4));
    double EcF_1 = 1.5545349999999999E-02;
    params_.push_back(make_pair("EcF_1",EcF_1));
    double EcF_2 = -3.2500000000000001E-01;
    params_.push_back(make_pair("EcF_2",EcF_2));
    double EcF_3 = 7.0604199999999997E+00;
    params_.push_back(make_pair("EcF_3",EcF_3));
    double EcF_4 = 1.8057800000000000E+01;
    params_.push_back(make_pair("EcF_4",EcF_4));
    double Ac_1 = -1.6886863940389629E-02;
    params_.push_back(make_pair("Ac_1",Ac_1));
    double Ac_2 = -4.7584000000000003E-03;
    params_.push_back(make_pair("Ac_2",Ac_2));
    double Ac_3 = 1.1310700000000000E+00;
    params_.push_back(make_pair("Ac_3",Ac_3));
    double Ac_4 = 1.3004500000000000E+01;
    params_.push_back(make_pair("Ac_4",Ac_4));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
VWN5_C_Functional::~VWN5_C_Functional()
{
}
void VWN5_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t10009 = rho_a[index]*2.0;
            double t10010 = 1.0/pow(t10009,1.0/3.0);
            double t10011 = c*t10010;
            double t10012 = sqrt(t10011);
            double t10013 = EcP_4*4.0;
            double t10014 = EcP_3*EcP_3;
            double t10015 = t10013-t10014;
            double t10016 = EcP_2-t10012;
            double t10017 = EcP_3*t10012;
            double t10018 = EcP_4+t10011+t10017;
            double t10019 = 1.0/t10018;
            double t10020 = sqrt(t10015);
            double t10021 = t10012*2.0;
            double t10022 = EcP_3+t10021;
            double t10023 = 1.0/t10022;
            double t10024 = t10020*t10023;
            double t10025 = atan(t10024);
            double t10026 = 1.0/sqrt(t10015);
            functional_[index] = EcP_1*rho_a[index]*(log(c*t10010*t10019)+EcP_3*t10025*t10026*2.0-(EcP_2*EcP_3* \
               (log((t10016*t10016)*t10019)+t10025*t10026*(EcP_2*4.0+EcP_3*2.0)))/(EcP_4+EcP_2*EcP_2+EcP_2*EcP_3) \
               )*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t10028 = rho_a[index]*2.0;
            double t10029 = 1.0/pow(t10028,1.0/3.0);
            double t10030 = c*t10029;
            double t10031 = sqrt(t10030);
            double t10032 = EcP_4*4.0;
            double t10033 = EcP_3*EcP_3;
            double t10034 = t10032-t10033;
            double t10035 = EcP_2-t10031;
            double t10036 = EcP_3*t10031;
            double t10037 = EcP_4+t10030+t10036;
            double t10038 = 1.0/t10037;
            double t10039 = sqrt(t10034);
            double t10040 = t10031*2.0;
            double t10041 = EcP_3+t10040;
            double t10042 = 1.0/t10041;
            double t10043 = t10042*t10039;
            double t10044 = atan(t10043);
            double t10045 = 1.0/sqrt(t10034);
            double t10046 = t10035*t10035;
            double t10047 = 1.0/pow(t10028,4.0/3.0);
            double t10048 = 1.0/sqrt(t10030);
            double t10049 = 1.0/(t10041*t10041);
            double t10050 = EcP_2*4.0;
            double t10051 = EcP_3*2.0;
            double t10052 = t10050+t10051;
            double t10053 = EcP_2*EcP_2;
            double t10054 = EcP_2*EcP_3;
            double t10055 = EcP_4+t10053+t10054;
            double t10056 = 1.0/t10055;
            double t10057 = c*t10047*(1.0/3.0);
            double t10058 = EcP_3*c*t10047*t10048*(1.0/6.0);
            double t10059 = t10057+t10058;
            double t10060 = 1.0/(t10037*t10037);
            double t10061 = t10034*t10049;
            double t10062 = t10061+1.0;
            double t10063 = 1.0/t10062;
            v_rho_a_[index] = EcP_1*(log(c*t10029*t10038)+EcP_3*t10044*t10045*2.0-EcP_2*EcP_3*t10056*(log(t10046* \
               t10038)+t10052*t10044*t10045))-EcP_1*rho_a[index]*(EcP_2*EcP_3*t10056*(1.0/(t10035*t10035)*t10037* \
               (t10060*t10046*t10059+c*t10035*t10038*t10047*t10048*(1.0/3.0))+c*t10052*t10063*t10047*t10048*t10049* \
               (1.0/3.0))+(pow(t10028,1.0/3.0)*t10037*(c*t10038*t10047*(1.0/3.0)-c*t10060*t10029*t10059))/c-EcP_3* \
               c*t10063*t10047*t10048*t10049*(2.0/3.0))*2.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t10067 = rho_a[index]*2.0;
            double t10068 = 1.0/pow(t10067,1.0/3.0);
            double t10069 = c*t10068;
            double t10070 = 1.0/pow(t10067,4.0/3.0);
            double t10071 = sqrt(t10069);
            double t10072 = EcP_3*t10071;
            double t10073 = EcP_4+t10072+t10069;
            double t10074 = c*t10070*(1.0/3.0);
            double t10075 = 1.0/sqrt(t10069);
            double t10076 = EcP_3*c*t10070*t10075*(1.0/6.0);
            double t10077 = t10074+t10076;
            double t10078 = 1.0/c;
            double t10079 = pow(t10067,1.0/3.0);
            double t10080 = 1.0/t10073;
            double t10081 = 1.0/(t10073*t10073);
            double t10082 = 1.0/pow(t10067,7.0/3.0);
            double t10083 = EcP_2-t10071;
            double t10084 = 1.0/(t10083*t10083);
            double t10085 = t10083*t10083;
            double t10086 = t10077*t10077;
            double t10087 = 1.0/(t10073*t10073*t10073);
            double t10088 = c*t10082*(4.0/9.0);
            double t10089 = EcP_3*c*t10082*t10075*(2.0/9.0);
            double t10090 = c*c;
            double t10091 = 1.0/pow(t10067,8.0/3.0);
            double t10092 = 1.0/pow(t10069,3.0/2.0);
            double t10131 = EcP_3*t10090*t10091*t10092*(1.0/3.6E1);
            double t10093 = -t10131+t10088+t10089;
            double t10094 = t10071*2.0;
            double t10095 = EcP_3+t10094;
            double t10096 = EcP_4*4.0;
            double t10097 = EcP_3*EcP_3;
            double t10098 = t10096-t10097;
            double t10099 = 1.0/(t10095*t10095);
            double t10100 = t10098*t10099;
            double t10101 = t10100+1.0;
            double t10102 = EcP_2*4.0;
            double t10103 = EcP_3*2.0;
            double t10104 = t10102+t10103;
            double t10105 = t10081*t10085*t10077;
            double t10106 = c*t10070*t10080*t10083*t10075*(1.0/3.0);
            double t10107 = t10105+t10106;
            double t10108 = 1.0/t10101;
            double t10109 = c*t10070*t10080*(1.0/3.0);
            double t10127 = c*t10081*t10068*t10077;
            double t10110 = t10109-t10127;
            double t10111 = 1.0/(t10095*t10095*t10095);
            double t10112 = 1.0/(t10095*t10095*t10095*t10095*t10095);
            double t10113 = 1.0/(t10101*t10101);
            double t10114 = Ac_4*4.0;
            double t10115 = Ac_3*Ac_3;
            double t10116 = t10114-t10115;
            double t10117 = Ac_2-t10071;
            double t10118 = Ac_3*t10071;
            double t10119 = Ac_4+t10118+t10069;
            double t10120 = 1.0/t10119;
            double t10121 = sqrt(t10116);
            double t10122 = Ac_3+t10094;
            double t10123 = 1.0/t10122;
            double t10124 = t10121*t10123;
            double t10125 = atan(t10124);
            double t10126 = 1.0/sqrt(t10116);
            double t10128 = t10110*t10077*t10078*t10079;
            double t10129 = c*t10080*t10082*(4.0/9.0);
            double t10130 = c*t10068*t10086*t10087*2.0;
            double t10132 = t10130+t10129-c*t10070*t10081*t10077*(2.0/3.0)-c*t10081*t10093*t10068;
            double t10133 = t10132*t10073*t10078*t10079;
            double t10134 = EcP_2*EcP_2;
            double t10135 = EcP_2*EcP_3;
            double t10136 = EcP_4+t10134+t10135;
            double t10137 = 1.0/t10136;
            double t10138 = t10107*t10084*t10077;
            double t10139 = t10085*t10086*t10087*2.0;
            double t10140 = c*t10080*t10082*(1.0/1.8E1);
            double t10141 = t10080*t10090*t10091*t10083*t10092*(1.0/1.8E1);
            double t10142 = c*t10070*t10081*t10083*t10075*t10077*(2.0/3.0);
            double t10143 = t10140+t10141+t10142+t10139-t10081*t10093*t10085-c*t10080*t10082*t10083*t10075*(4.0/ \
               9.0);
            double t10144 = c*t10112*t10104*t10113*t10082*t10098*(2.0/9.0);
            double t10145 = 1.0/(t10083*t10083*t10083);
            double t10146 = c*t10070*t10107*t10073*t10145*t10075*(1.0/3.0);
            double t10147 = c*t10104*t10108*t10082*t10075*t10099*(4.0/9.0);
            double t10148 = t10144+t10146+t10138+t10147-t10143*t10073*t10084-c*t10111*t10104*t10108*t10082*(2.0/ \
               9.0)-t10104*t10090*t10108*t10091*t10092*t10099*(1.0/1.8E1);
            double t10149 = EcP_2*EcP_3*t10137*t10148;
            double t10150 = 1.0/pow(t10067,2.0/3.0);
            double t10151 = EcP_3*c*t10111*t10108*t10082*(4.0/9.0);
            double t10152 = EcP_3*t10090*t10108*t10091*t10092*t10099*(1.0/9.0);
            double t10153 = t10133+t10151+t10152+t10128+t10149-t10110*t10150*t10073*t10078*(1.0/3.0)-EcP_3*c* \
               t10112*t10113*t10082*t10098*(4.0/9.0)-EcP_3*c*t10108*t10082*t10075*t10099*(8.0/9.0);
            double t10154 = EcP_1*t10153;
            double t10155 = 1.0/d2fz0;
            double t10156 = 1.0/(rho_a[index]*rho_a[index]);
            double t10157 = two_13*2.0;
            double t10158 = t10157-2.0;
            double t10159 = 1.0/t10158;
            double t10160 = c*t10120*t10068;
            double t10161 = log(t10160);
            double t10162 = Ac_3*t10125*t10126*2.0;
            double t10163 = t10117*t10117;
            double t10164 = t10120*t10163;
            double t10165 = log(t10164);
            double t10166 = Ac_2*4.0;
            double t10167 = Ac_3*2.0;
            double t10168 = t10166+t10167;
            double t10169 = t10125*t10126*t10168;
            double t10170 = t10165+t10169;
            double t10171 = Ac_2*Ac_2;
            double t10172 = Ac_2*Ac_3;
            double t10173 = Ac_4+t10171+t10172;
            double t10174 = 1.0/t10173;
            double t10175 = t10161+t10162-Ac_2*Ac_3*t10170*t10174;
            v_rho_a_rho_a_[index] = rho_a[index]*(t10154-Ac_1*t10155*t10156*t10175*t10159*(2.0/9.0))*2.0+rho_a[index]* \
               (t10154+Ac_1*t10155*t10156*t10175*t10159*(2.0/9.0))*2.0-EcP_1*(t10110*t10073*t10078*t10079+EcP_2*EcP_3* \
               t10137*(t10107*t10073*t10084+c*t10104*t10070*t10108*t10075*t10099*(1.0/3.0))-EcP_3*c*t10070*t10108* \
               t10075*t10099*(2.0/3.0))*4.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void VWN5_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7374 = rho_a[index]+rho_b[index];
            double t7375 = 1.0/pow(t7374,1.0/3.0);
            double t7376 = c*t7375;
            double t7377 = sqrt(t7376);
            double t7378 = EcP_4*4.0;
            double t7379 = EcP_3*EcP_3;
            double t7380 = t7378-t7379;
            double t7381 = EcP_2-t7377;
            double t7382 = EcP_3*t7377;
            double t7383 = EcP_4+t7382+t7376;
            double t7384 = 1.0/t7383;
            double t7385 = sqrt(t7380);
            double t7386 = t7377*2.0;
            double t7387 = EcP_3+t7386;
            double t7388 = 1.0/t7387;
            double t7389 = t7385*t7388;
            double t7390 = atan(t7389);
            double t7391 = 1.0/sqrt(t7380);
            double t7392 = rho_a[index]-rho_b[index];
            double t7393 = t7392*t7392;
            double t7394 = EcF_4*4.0;
            double t7395 = EcF_3*EcF_3;
            double t7396 = t7394-t7395;
            double t7397 = EcF_2-t7377;
            double t7398 = EcF_3*t7377;
            double t7399 = EcF_4+t7376+t7398;
            double t7400 = 1.0/t7399;
            double t7401 = sqrt(t7396);
            double t7402 = EcF_3+t7386;
            double t7403 = 1.0/t7402;
            double t7404 = t7401*t7403;
            double t7405 = atan(t7404);
            double t7406 = 1.0/sqrt(t7396);
            double t7407 = c*t7375*t7384;
            double t7408 = log(t7407);
            double t7409 = EcP_3*t7390*t7391*2.0;
            double t7410 = t7381*t7381;
            double t7411 = t7384*t7410;
            double t7412 = log(t7411);
            double t7413 = EcP_2*4.0;
            double t7414 = EcP_3*2.0;
            double t7415 = t7413+t7414;
            double t7416 = t7390*t7391*t7415;
            double t7417 = t7412+t7416;
            double t7418 = EcP_2*EcP_2;
            double t7419 = EcP_2*EcP_3;
            double t7420 = EcP_4+t7418+t7419;
            double t7421 = 1.0/t7420;
            double t7422 = t7408+t7409-EcP_2*EcP_3*t7421*t7417;
            double t7423 = EcP_1*t7422;
            double t7424 = Ac_4*4.0;
            double t7425 = Ac_3*Ac_3;
            double t7426 = t7424-t7425;
            double t7427 = Ac_2-t7377;
            double t7428 = Ac_3*t7377;
            double t7429 = Ac_4+t7376+t7428;
            double t7430 = 1.0/t7429;
            double t7431 = sqrt(t7426);
            double t7432 = Ac_3+t7386;
            double t7433 = 1.0/t7432;
            double t7434 = t7431*t7433;
            double t7435 = atan(t7434);
            double t7436 = 1.0/sqrt(t7426);
            double t7437 = 1.0/t7374;
            double t7438 = t7392*t7437;
            double t7439 = c*t7375*t7430;
            double t7440 = log(t7439);
            double t7441 = Ac_3*t7435*t7436*2.0;
            double t7442 = t7427*t7427;
            double t7443 = t7430*t7442;
            double t7444 = log(t7443);
            double t7445 = Ac_2*4.0;
            double t7446 = Ac_3*2.0;
            double t7447 = t7445+t7446;
            double t7448 = t7435*t7436*t7447;
            double t7449 = t7444+t7448;
            double t7450 = Ac_2*Ac_2;
            double t7451 = Ac_2*Ac_3;
            double t7452 = Ac_4+t7450+t7451;
            double t7453 = 1.0/t7452;
            double t7454 = t7440+t7441-Ac_2*Ac_3*t7453*t7449;
            functional_[index] = t7374*(t7423-(Ac_1*t7454*(1.0/(t7374*t7374*t7374*t7374)*(t7393*t7393)*((d2fz0* \
               (t7423-EcF_1*(log(c*t7375*t7400)+EcF_3*t7405*t7406*2.0-(EcF_2*EcF_3*(log((t7397*t7397)*t7400)+t7405* \
               t7406*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(Ac_1*t7454)+1.0)-1.0)*(pow(t7438+ \
               1.0,4.0/3.0)+pow(-t7438+1.0,4.0/3.0)-2.0))/(d2fz0*(two_13*2.0-2.0)));
        } else if (rho_a[index] > cutoff_) {
            double t9328 = rho_a[index]+rho_b[index];
            double t9329 = 1.0/pow(t9328,1.0/3.0);
            double t9330 = c*t9329;
            double t9331 = sqrt(t9330);
            double t9332 = EcP_4*4.0;
            double t9333 = EcP_3*EcP_3;
            double t9334 = t9332-t9333;
            double t9335 = EcP_2-t9331;
            double t9336 = EcP_3*t9331;
            double t9337 = EcP_4+t9330+t9336;
            double t9338 = 1.0/t9337;
            double t9339 = sqrt(t9334);
            double t9340 = t9331*2.0;
            double t9341 = EcP_3+t9340;
            double t9342 = 1.0/t9341;
            double t9343 = t9342*t9339;
            double t9344 = atan(t9343);
            double t9345 = 1.0/sqrt(t9334);
            double t9346 = EcF_4*4.0;
            double t9347 = EcF_3*EcF_3;
            double t9348 = t9346-t9347;
            double t9349 = EcF_2-t9331;
            double t9350 = EcF_3*t9331;
            double t9351 = EcF_4+t9330+t9350;
            double t9352 = 1.0/t9351;
            double t9353 = sqrt(t9348);
            double t9354 = EcF_3+t9340;
            double t9355 = 1.0/t9354;
            double t9356 = t9353*t9355;
            double t9357 = atan(t9356);
            double t9358 = 1.0/sqrt(t9348);
            double t9359 = c*t9329*t9338;
            double t9360 = log(t9359);
            double t9361 = EcP_3*t9344*t9345*2.0;
            double t9362 = t9335*t9335;
            double t9363 = t9362*t9338;
            double t9364 = log(t9363);
            double t9365 = EcP_2*4.0;
            double t9366 = EcP_3*2.0;
            double t9367 = t9365+t9366;
            double t9368 = t9344*t9345*t9367;
            double t9369 = t9364+t9368;
            double t9370 = EcP_2*EcP_2;
            double t9371 = EcP_2*EcP_3;
            double t9372 = EcP_4+t9370+t9371;
            double t9373 = 1.0/t9372;
            double t9374 = t9360+t9361-EcP_2*EcP_3*t9373*t9369;
            double t9375 = EcP_1*t9374;
            functional_[index] = t9328*(t9375-((pow(2.0,1.0/3.0)*2.0-2.0)*(t9375-EcF_1*(log(c*t9352*t9329)+EcF_3* \
               t9357*t9358*2.0-(EcF_2*EcF_3*(log(t9352*(t9349*t9349))+t9357*t9358*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else if (rho_b[index] > cutoff_) {
            double t8683 = rho_a[index]+rho_b[index];
            double t8684 = 1.0/pow(t8683,1.0/3.0);
            double t8685 = c*t8684;
            double t8686 = sqrt(t8685);
            double t8687 = EcP_4*4.0;
            double t8688 = EcP_3*EcP_3;
            double t8689 = t8687-t8688;
            double t8690 = EcP_2-t8686;
            double t8691 = EcP_3*t8686;
            double t8692 = EcP_4+t8691+t8685;
            double t8693 = 1.0/t8692;
            double t8694 = sqrt(t8689);
            double t8695 = t8686*2.0;
            double t8696 = EcP_3+t8695;
            double t8697 = 1.0/t8696;
            double t8698 = t8694*t8697;
            double t8699 = atan(t8698);
            double t8700 = 1.0/sqrt(t8689);
            double t8701 = EcF_4*4.0;
            double t8702 = EcF_3*EcF_3;
            double t8703 = t8701-t8702;
            double t8704 = EcF_2-t8686;
            double t8705 = EcF_3*t8686;
            double t8706 = EcF_4+t8685+t8705;
            double t8707 = 1.0/t8706;
            double t8708 = sqrt(t8703);
            double t8709 = EcF_3+t8695;
            double t8710 = 1.0/t8709;
            double t8711 = t8710*t8708;
            double t8712 = atan(t8711);
            double t8713 = 1.0/sqrt(t8703);
            double t8714 = c*t8684*t8693;
            double t8715 = log(t8714);
            double t8716 = EcP_3*t8699*t8700*2.0;
            double t8717 = t8690*t8690;
            double t8718 = t8693*t8717;
            double t8719 = log(t8718);
            double t8720 = EcP_2*4.0;
            double t8721 = EcP_3*2.0;
            double t8722 = t8720+t8721;
            double t8723 = t8699*t8700*t8722;
            double t8724 = t8723+t8719;
            double t8725 = EcP_2*EcP_2;
            double t8726 = EcP_2*EcP_3;
            double t8727 = EcP_4+t8725+t8726;
            double t8728 = 1.0/t8727;
            double t8729 = t8715+t8716-EcP_2*EcP_3*t8724*t8728;
            double t8730 = EcP_1*t8729;
            functional_[index] = t8683*(t8730-((pow(2.0,1.0/3.0)*2.0-2.0)*(t8730-EcF_1*(log(c*t8684*t8707)+EcF_3* \
               t8712*t8713*2.0-(EcF_2*EcF_3*(log((t8704*t8704)*t8707)+t8712*t8713*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7456 = rho_a[index]+rho_b[index];
            double t7457 = 1.0/pow(t7456,1.0/3.0);
            double t7458 = c*t7457;
            double t7459 = sqrt(t7458);
            double t7460 = EcP_4*4.0;
            double t7461 = EcP_3*EcP_3;
            double t7462 = t7460-t7461;
            double t7463 = EcP_2-t7459;
            double t7464 = EcP_3*t7459;
            double t7465 = EcP_4+t7464+t7458;
            double t7466 = 1.0/t7465;
            double t7467 = sqrt(t7462);
            double t7468 = t7459*2.0;
            double t7469 = EcP_3+t7468;
            double t7470 = 1.0/t7469;
            double t7471 = t7470*t7467;
            double t7472 = atan(t7471);
            double t7473 = 1.0/sqrt(t7462);
            double t7474 = 1.0/pow(t7456,4.0/3.0);
            double t7475 = c*t7474*(1.0/3.0);
            double t7476 = 1.0/sqrt(t7458);
            double t7477 = EcP_3*c*t7474*t7476*(1.0/6.0);
            double t7478 = t7475+t7477;
            double t7479 = t7463*t7463;
            double t7480 = 1.0/(t7465*t7465);
            double t7481 = EcP_2*4.0;
            double t7482 = EcP_3*2.0;
            double t7483 = t7481+t7482;
            double t7484 = 1.0/(t7469*t7469);
            double t7485 = EcP_2*EcP_2;
            double t7486 = EcP_2*EcP_3;
            double t7487 = EcP_4+t7485+t7486;
            double t7488 = 1.0/t7487;
            double t7489 = t7462*t7484;
            double t7490 = t7489+1.0;
            double t7491 = 1.0/t7490;
            double t7492 = 1.0/t7456;
            double t7493 = rho_a[index]-rho_b[index];
            double t7494 = t7492*t7493;
            double t7495 = Ac_4*4.0;
            double t7496 = Ac_3*Ac_3;
            double t7497 = t7495-t7496;
            double t7498 = Ac_2-t7459;
            double t7499 = Ac_3*t7459;
            double t7500 = Ac_4+t7458+t7499;
            double t7501 = 1.0/t7500;
            double t7502 = sqrt(t7497);
            double t7503 = Ac_3+t7468;
            double t7504 = 1.0/t7503;
            double t7505 = t7502*t7504;
            double t7506 = atan(t7505);
            double t7507 = 1.0/sqrt(t7497);
            double t7508 = 1.0/c;
            double t7509 = EcF_3*t7459;
            double t7510 = EcF_4+t7458+t7509;
            double t7511 = pow(t7456,1.0/3.0);
            double t7512 = EcF_3*c*t7474*t7476*(1.0/6.0);
            double t7513 = t7475+t7512;
            double t7514 = EcF_2-t7459;
            double t7515 = 1.0/(t7510*t7510);
            double t7516 = 1.0/t7510;
            double t7517 = EcF_3+t7468;
            double t7518 = 1.0/(t7517*t7517);
            double t7519 = EcF_4*4.0;
            double t7520 = EcF_3*EcF_3;
            double t7521 = t7520-t7519;
            double t7522 = t7521*t7518;
            double t7523 = t7522-1.0;
            double t7524 = 1.0/t7523;
            double t7525 = c*t7474*t7466*(1.0/3.0);
            double t7526 = t7525-c*t7480*t7457*t7478;
            double t7527 = t7465*t7511*t7508*t7526;
            double t7528 = t7480*t7478*t7479;
            double t7529 = c*t7463*t7474*t7466*t7476*(1.0/3.0);
            double t7530 = t7528+t7529;
            double t7531 = 1.0/(t7463*t7463);
            double t7532 = t7465*t7530*t7531;
            double t7533 = c*t7491*t7474*t7483*t7484*t7476*(1.0/3.0);
            double t7534 = t7532+t7533;
            double t7535 = EcP_2*EcP_3*t7488*t7534;
            double t7536 = t7535+t7527-EcP_3*c*t7491*t7474*t7484*t7476*(2.0/3.0);
            double t7537 = EcP_1*t7536;
            double t7538 = c*t7457*t7501;
            double t7539 = log(t7538);
            double t7540 = Ac_3*t7506*t7507*2.0;
            double t7541 = t7498*t7498;
            double t7542 = t7501*t7541;
            double t7543 = log(t7542);
            double t7544 = Ac_2*4.0;
            double t7545 = Ac_3*2.0;
            double t7546 = t7544+t7545;
            double t7547 = t7506*t7507*t7546;
            double t7548 = t7543+t7547;
            double t7549 = Ac_2*Ac_2;
            double t7550 = Ac_2*Ac_3;
            double t7551 = Ac_4+t7550+t7549;
            double t7552 = 1.0/t7551;
            double t7578 = Ac_2*Ac_3*t7552*t7548;
            double t7553 = t7540+t7539-t7578;
            double t7554 = 1.0/Ac_1;
            double t7555 = -t7520+t7519;
            double t7556 = t7514*t7514;
            double t7557 = sqrt(t7555);
            double t7558 = 1.0/t7517;
            double t7559 = t7557*t7558;
            double t7560 = atan(t7559);
            double t7561 = 1.0/sqrt(t7555);
            double t7562 = EcF_2*4.0;
            double t7563 = EcF_3*2.0;
            double t7564 = t7562+t7563;
            double t7565 = EcF_2*EcF_2;
            double t7566 = EcF_2*EcF_3;
            double t7567 = EcF_4+t7565+t7566;
            double t7568 = 1.0/t7567;
            double t7569 = c*t7457*t7466;
            double t7570 = log(t7569);
            double t7571 = EcP_3*t7472*t7473*2.0;
            double t7572 = t7466*t7479;
            double t7573 = log(t7572);
            double t7574 = t7472*t7473*t7483;
            double t7575 = t7573+t7574;
            double t7596 = EcP_2*EcP_3*t7488*t7575;
            double t7576 = t7570+t7571-t7596;
            double t7577 = EcP_1*t7576;
            double t7579 = Ac_3*c*t7474*t7476*(1.0/6.0);
            double t7580 = t7475+t7579;
            double t7581 = 1.0/(t7500*t7500);
            double t7582 = 1.0/(t7503*t7503);
            double t7583 = t7497*t7582;
            double t7584 = t7583+1.0;
            double t7585 = 1.0/t7584;
            double t7586 = t7493*t7493;
            double t7587 = 1.0/(t7456*t7456*t7456*t7456);
            double t7588 = c*t7457*t7516;
            double t7589 = log(t7588);
            double t7590 = EcF_3*t7560*t7561*2.0;
            double t7591 = t7516*t7556;
            double t7592 = log(t7591);
            double t7593 = t7560*t7561*t7564;
            double t7594 = t7592+t7593;
            double t7600 = EcF_2*EcF_3*t7594*t7568;
            double t7595 = t7590+t7589-t7600;
            double t7597 = 1.0/t7553;
            double t7601 = EcF_1*t7595;
            double t7598 = t7577-t7601;
            double t7599 = t7586*t7586;
            double t7602 = d2fz0*t7554*t7597*t7598;
            double t7603 = t7602+1.0;
            double t7604 = 1.0/d2fz0;
            double t7605 = two_13*2.0;
            double t7606 = t7605-2.0;
            double t7607 = 1.0/t7606;
            double t7608 = t7494+1.0;
            double t7609 = pow(t7608,4.0/3.0);
            double t7610 = -t7494+1.0;
            double t7611 = pow(t7610,4.0/3.0);
            double t7612 = t7611+t7609-2.0;
            double t7613 = c*t7474*t7501*(1.0/3.0);
            double t7614 = t7613-c*t7457*t7580*t7581;
            double t7615 = t7500*t7511*t7508*t7614;
            double t7616 = t7541*t7580*t7581;
            double t7617 = c*t7474*t7476*t7498*t7501*(1.0/3.0);
            double t7618 = t7616+t7617;
            double t7619 = 1.0/(t7498*t7498);
            double t7620 = t7500*t7618*t7619;
            double t7621 = c*t7474*t7476*t7546*t7582*t7585*(1.0/3.0);
            double t7622 = t7620+t7621;
            double t7623 = Ac_2*Ac_3*t7552*t7622;
            double t7624 = t7623+t7615-Ac_3*c*t7474*t7476*t7582*t7585*(2.0/3.0);
            double t7625 = 1.0/(t7456*t7456);
            double t7626 = t7492-t7493*t7625;
            double t7627 = t7587*t7599*t7603;
            double t7628 = t7627-1.0;
            v_rho_a_[index] = t7577+t7456*(-t7537+Ac_1*t7553*t7612*t7604*t7607*(1.0/(t7456*t7456*t7456*t7456* \
               t7456)*t7599*t7603*4.0+t7587*t7599*(d2fz0*t7554*t7597*(t7537-EcF_1*(EcF_2*EcF_3*t7568*(t7510*1.0/(t7514* \
               t7514)*(t7513*t7515*t7556+c*t7474*t7476*t7514*t7516*(1.0/3.0))-c*t7474*t7476*t7524*t7518*t7564*(1.0/ \
               3.0))+t7510*t7511*t7508*(c*t7474*t7516*(1.0/3.0)-c*t7457*t7513*t7515)+EcF_3*c*t7474*t7476*t7524*t7518* \
               (2.0/3.0)))-d2fz0*1.0/(t7553*t7553)*t7554*t7598*t7624)-t7493*t7586*t7587*t7603*4.0)+Ac_1*t7553*t7604* \
               t7607*t7628*(pow(t7610,1.0/3.0)*t7626*(4.0/3.0)-pow(t7608,1.0/3.0)*t7626*(4.0/3.0))+Ac_1*t7612*t7604* \
               t7624*t7607*t7628)-Ac_1*t7553*t7612*t7604*t7607*t7628;
        } else if (rho_a[index] > cutoff_) {
            double t9377 = rho_a[index]+rho_b[index];
            double t9378 = 1.0/pow(t9377,1.0/3.0);
            double t9379 = c*t9378;
            double t9380 = sqrt(t9379);
            double t9381 = EcP_4*4.0;
            double t9382 = EcP_3*EcP_3;
            double t9383 = t9381-t9382;
            double t9384 = EcP_2-t9380;
            double t9385 = EcP_3*t9380;
            double t9386 = EcP_4+t9385+t9379;
            double t9387 = 1.0/t9386;
            double t9388 = sqrt(t9383);
            double t9389 = t9380*2.0;
            double t9390 = EcP_3+t9389;
            double t9391 = 1.0/t9390;
            double t9392 = t9391*t9388;
            double t9393 = atan(t9392);
            double t9394 = 1.0/sqrt(t9383);
            double t9395 = 1.0/pow(t9377,4.0/3.0);
            double t9396 = c*t9395*(1.0/3.0);
            double t9397 = 1.0/sqrt(t9379);
            double t9398 = EcP_3*c*t9395*t9397*(1.0/6.0);
            double t9399 = t9396+t9398;
            double t9400 = t9384*t9384;
            double t9401 = 1.0/(t9386*t9386);
            double t9402 = EcP_2*4.0;
            double t9403 = EcP_3*2.0;
            double t9404 = t9402+t9403;
            double t9405 = 1.0/(t9390*t9390);
            double t9406 = EcP_2*EcP_2;
            double t9407 = EcP_2*EcP_3;
            double t9408 = EcP_4+t9406+t9407;
            double t9409 = 1.0/t9408;
            double t9410 = t9383*t9405;
            double t9411 = t9410+1.0;
            double t9412 = 1.0/t9411;
            double t9413 = 1.0/c;
            double t9414 = EcF_3*t9380;
            double t9415 = EcF_4+t9379+t9414;
            double t9416 = pow(t9377,1.0/3.0);
            double t9417 = EcF_3*c*t9395*t9397*(1.0/6.0);
            double t9418 = t9396+t9417;
            double t9419 = EcF_2-t9380;
            double t9420 = 1.0/(t9415*t9415);
            double t9421 = 1.0/t9415;
            double t9422 = EcF_3+t9389;
            double t9423 = 1.0/(t9422*t9422);
            double t9424 = EcF_4*4.0;
            double t9425 = EcF_3*EcF_3;
            double t9426 = t9424-t9425;
            double t9427 = t9423*t9426;
            double t9428 = t9427+1.0;
            double t9429 = 1.0/t9428;
            double t9430 = c*t9395*t9387*(1.0/3.0);
            double t9431 = t9430-c*t9378*t9399*t9401;
            double t9432 = t9386*t9413*t9431*t9416;
            double t9433 = t9399*t9400*t9401;
            double t9434 = c*t9384*t9395*t9387*t9397*(1.0/3.0);
            double t9435 = t9433+t9434;
            double t9436 = 1.0/(t9384*t9384);
            double t9437 = t9386*t9435*t9436;
            double t9438 = c*t9395*t9397*t9412*t9404*t9405*(1.0/3.0);
            double t9439 = t9437+t9438;
            double t9440 = EcP_2*EcP_3*t9409*t9439;
            double t9441 = t9440+t9432-EcP_3*c*t9395*t9397*t9412*t9405*(2.0/3.0);
            double t9442 = EcP_1*t9441;
            double t9443 = pow(2.0,1.0/3.0);
            double t9444 = t9443*2.0;
            double t9445 = t9444-2.0;
            double t9446 = two_13*2.0;
            double t9447 = t9446-2.0;
            double t9448 = 1.0/t9447;
            double t9449 = t9419*t9419;
            double t9450 = sqrt(t9426);
            double t9451 = 1.0/t9422;
            double t9452 = t9450*t9451;
            double t9453 = atan(t9452);
            double t9454 = 1.0/sqrt(t9426);
            double t9455 = EcF_2*4.0;
            double t9456 = EcF_3*2.0;
            double t9457 = t9455+t9456;
            double t9458 = EcF_2*EcF_2;
            double t9459 = EcF_2*EcF_3;
            double t9460 = EcF_4+t9458+t9459;
            double t9461 = 1.0/t9460;
            double t9462 = c*t9378*t9387;
            double t9463 = log(t9462);
            double t9464 = EcP_3*t9393*t9394*2.0;
            double t9465 = t9387*t9400;
            double t9466 = log(t9465);
            double t9467 = t9393*t9394*t9404;
            double t9468 = t9466+t9467;
            double t9469 = t9463+t9464-EcP_2*EcP_3*t9409*t9468;
            double t9470 = EcP_1*t9469;
            v_rho_a_[index] = t9470-t9377*(t9442-t9445*t9448*(t9442-EcF_1*(EcF_2*EcF_3*t9461*(t9415*1.0/(t9419* \
               t9419)*(t9420*t9418*t9449+c*t9395*t9397*t9421*t9419*(1.0/3.0))+c*t9395*t9397*t9423*t9429*t9457*(1.0/ \
               3.0))+t9413*t9415*t9416*(c*t9395*t9421*(1.0/3.0)-c*t9378*t9420*t9418)-EcF_3*c*t9395*t9397*t9423*t9429* \
               (2.0/3.0))))-t9445*t9448*(t9470-EcF_1*(log(c*t9378*t9421)+EcF_3*t9453*t9454*2.0-EcF_2*EcF_3*t9461* \
               (log(t9421*t9449)+t9453*t9454*t9457)));
        } else if (rho_b[index] > cutoff_) {
            double t8732 = rho_a[index]+rho_b[index];
            double t8733 = 1.0/pow(t8732,1.0/3.0);
            double t8734 = c*t8733;
            double t8735 = sqrt(t8734);
            double t8736 = EcP_4*4.0;
            double t8737 = EcP_3*EcP_3;
            double t8738 = t8736-t8737;
            double t8739 = EcP_2-t8735;
            double t8740 = EcP_3*t8735;
            double t8741 = EcP_4+t8740+t8734;
            double t8742 = 1.0/t8741;
            double t8743 = sqrt(t8738);
            double t8744 = t8735*2.0;
            double t8745 = EcP_3+t8744;
            double t8746 = 1.0/t8745;
            double t8747 = t8743*t8746;
            double t8748 = atan(t8747);
            double t8749 = 1.0/sqrt(t8738);
            double t8750 = 1.0/pow(t8732,4.0/3.0);
            double t8751 = c*t8750*(1.0/3.0);
            double t8752 = 1.0/sqrt(t8734);
            double t8753 = EcP_3*c*t8750*t8752*(1.0/6.0);
            double t8754 = t8751+t8753;
            double t8755 = t8739*t8739;
            double t8756 = 1.0/(t8741*t8741);
            double t8757 = EcP_2*4.0;
            double t8758 = EcP_3*2.0;
            double t8759 = t8757+t8758;
            double t8760 = 1.0/(t8745*t8745);
            double t8761 = EcP_2*EcP_2;
            double t8762 = EcP_2*EcP_3;
            double t8763 = EcP_4+t8761+t8762;
            double t8764 = 1.0/t8763;
            double t8765 = t8760*t8738;
            double t8766 = t8765+1.0;
            double t8767 = 1.0/t8766;
            double t8768 = 1.0/c;
            double t8769 = EcF_3*t8735;
            double t8770 = EcF_4+t8734+t8769;
            double t8771 = pow(t8732,1.0/3.0);
            double t8772 = EcF_3*c*t8750*t8752*(1.0/6.0);
            double t8773 = t8751+t8772;
            double t8774 = EcF_2-t8735;
            double t8775 = 1.0/(t8770*t8770);
            double t8776 = 1.0/t8770;
            double t8777 = EcF_3+t8744;
            double t8778 = 1.0/(t8777*t8777);
            double t8779 = EcF_4*4.0;
            double t8780 = EcF_3*EcF_3;
            double t8781 = t8780-t8779;
            double t8782 = t8781*t8778;
            double t8783 = t8782-1.0;
            double t8784 = 1.0/t8783;
            double t8785 = c*t8750*t8742*(1.0/3.0);
            double t8786 = t8785-c*t8733*t8754*t8756;
            double t8787 = t8741*t8771*t8768*t8786;
            double t8788 = t8754*t8755*t8756;
            double t8789 = c*t8750*t8742*t8752*t8739*(1.0/3.0);
            double t8790 = t8788+t8789;
            double t8791 = 1.0/(t8739*t8739);
            double t8792 = t8741*t8790*t8791;
            double t8793 = c*t8750*t8760*t8752*t8767*t8759*(1.0/3.0);
            double t8794 = t8792+t8793;
            double t8795 = EcP_2*EcP_3*t8764*t8794;
            double t8796 = t8795+t8787-EcP_3*c*t8750*t8760*t8752*t8767*(2.0/3.0);
            double t8797 = EcP_1*t8796;
            double t8798 = pow(2.0,1.0/3.0);
            double t8799 = t8798*2.0;
            double t8800 = t8799-2.0;
            double t8801 = two_13*2.0;
            double t8802 = t8801-2.0;
            double t8803 = 1.0/t8802;
            double t8804 = -t8780+t8779;
            double t8805 = t8774*t8774;
            double t8806 = sqrt(t8804);
            double t8807 = 1.0/t8777;
            double t8808 = t8806*t8807;
            double t8809 = atan(t8808);
            double t8810 = 1.0/sqrt(t8804);
            double t8811 = EcF_2*4.0;
            double t8812 = EcF_3*2.0;
            double t8813 = t8811+t8812;
            double t8814 = EcF_2*EcF_2;
            double t8815 = EcF_2*EcF_3;
            double t8816 = EcF_4+t8814+t8815;
            double t8817 = 1.0/t8816;
            double t8818 = c*t8733*t8742;
            double t8819 = log(t8818);
            double t8820 = EcP_3*t8748*t8749*2.0;
            double t8821 = t8742*t8755;
            double t8822 = log(t8821);
            double t8823 = t8748*t8749*t8759;
            double t8824 = t8822+t8823;
            double t8825 = t8820+t8819-EcP_2*EcP_3*t8764*t8824;
            double t8826 = EcP_1*t8825;
            v_rho_a_[index] = t8826-t8732*(t8797-t8800*t8803*(t8797-EcF_1*(EcF_2*EcF_3*t8817*(t8770*1.0/(t8774* \
               t8774)*(t8773*t8775*t8805+c*t8750*t8752*t8774*t8776*(1.0/3.0))-c*t8750*t8752*t8784*t8778*t8813*(1.0/ \
               3.0))+t8770*t8771*t8768*(c*t8750*t8776*(1.0/3.0)-c*t8733*t8773*t8775)+EcF_3*c*t8750*t8752*t8784*t8778* \
               (2.0/3.0))))-t8800*t8803*(t8826-EcF_1*(log(c*t8733*t8776)+EcF_3*t8810*t8809*2.0-EcF_2*EcF_3*t8817* \
               (log(t8776*t8805)+t8810*t8813*t8809)));
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7630 = rho_a[index]+rho_b[index];
            double t7631 = 1.0/pow(t7630,1.0/3.0);
            double t7632 = c*t7631;
            double t7633 = sqrt(t7632);
            double t7634 = EcP_4*4.0;
            double t7635 = EcP_3*EcP_3;
            double t7636 = t7634-t7635;
            double t7637 = EcP_2-t7633;
            double t7638 = EcP_3*t7633;
            double t7639 = EcP_4+t7632+t7638;
            double t7640 = 1.0/t7639;
            double t7641 = sqrt(t7636);
            double t7642 = t7633*2.0;
            double t7643 = EcP_3+t7642;
            double t7644 = 1.0/t7643;
            double t7645 = t7641*t7644;
            double t7646 = atan(t7645);
            double t7647 = 1.0/sqrt(t7636);
            double t7648 = 1.0/pow(t7630,4.0/3.0);
            double t7649 = c*t7648*(1.0/3.0);
            double t7650 = 1.0/sqrt(t7632);
            double t7651 = EcP_3*c*t7650*t7648*(1.0/6.0);
            double t7652 = t7651+t7649;
            double t7653 = t7637*t7637;
            double t7654 = 1.0/(t7639*t7639);
            double t7655 = EcP_2*4.0;
            double t7656 = EcP_3*2.0;
            double t7657 = t7655+t7656;
            double t7658 = 1.0/(t7643*t7643);
            double t7659 = EcP_2*EcP_2;
            double t7660 = EcP_2*EcP_3;
            double t7661 = EcP_4+t7660+t7659;
            double t7662 = 1.0/t7661;
            double t7663 = t7636*t7658;
            double t7664 = t7663+1.0;
            double t7665 = 1.0/t7664;
            double t7666 = 1.0/t7630;
            double t7667 = rho_a[index]-rho_b[index];
            double t7668 = t7666*t7667;
            double t7669 = Ac_4*4.0;
            double t7670 = Ac_3*Ac_3;
            double t7671 = -t7670+t7669;
            double t7672 = Ac_2-t7633;
            double t7673 = Ac_3*t7633;
            double t7674 = Ac_4+t7632+t7673;
            double t7675 = 1.0/t7674;
            double t7676 = sqrt(t7671);
            double t7677 = Ac_3+t7642;
            double t7678 = 1.0/t7677;
            double t7679 = t7676*t7678;
            double t7680 = atan(t7679);
            double t7681 = 1.0/sqrt(t7671);
            double t7682 = 1.0/c;
            double t7683 = EcF_3*t7633;
            double t7684 = EcF_4+t7632+t7683;
            double t7685 = pow(t7630,1.0/3.0);
            double t7686 = EcF_3*c*t7650*t7648*(1.0/6.0);
            double t7687 = t7649+t7686;
            double t7688 = EcF_2-t7633;
            double t7689 = 1.0/(t7684*t7684);
            double t7690 = 1.0/t7684;
            double t7691 = EcF_3+t7642;
            double t7692 = 1.0/(t7691*t7691);
            double t7693 = EcF_4*4.0;
            double t7694 = EcF_3*EcF_3;
            double t7695 = t7693-t7694;
            double t7696 = t7692*t7695;
            double t7697 = t7696+1.0;
            double t7698 = 1.0/t7697;
            double t7699 = c*t7640*t7648*(1.0/3.0);
            double t7700 = t7699-c*t7631*t7652*t7654;
            double t7701 = t7682*t7639*t7685*t7700;
            double t7702 = t7652*t7653*t7654;
            double t7703 = c*t7640*t7650*t7637*t7648*(1.0/3.0);
            double t7704 = t7702+t7703;
            double t7705 = 1.0/(t7637*t7637);
            double t7706 = t7639*t7704*t7705;
            double t7707 = c*t7650*t7665*t7648*t7657*t7658*(1.0/3.0);
            double t7708 = t7706+t7707;
            double t7709 = EcP_2*EcP_3*t7662*t7708;
            double t7710 = t7701+t7709-EcP_3*c*t7650*t7665*t7648*t7658*(2.0/3.0);
            double t7711 = EcP_1*t7710;
            double t7712 = c*t7631*t7675;
            double t7713 = log(t7712);
            double t7714 = Ac_3*t7680*t7681*2.0;
            double t7715 = t7672*t7672;
            double t7716 = t7675*t7715;
            double t7717 = log(t7716);
            double t7718 = Ac_2*4.0;
            double t7719 = Ac_3*2.0;
            double t7720 = t7718+t7719;
            double t7721 = t7680*t7681*t7720;
            double t7722 = t7721+t7717;
            double t7723 = Ac_2*Ac_2;
            double t7724 = Ac_2*Ac_3;
            double t7725 = Ac_4+t7723+t7724;
            double t7726 = 1.0/t7725;
            double t7751 = Ac_2*Ac_3*t7722*t7726;
            double t7727 = t7713+t7714-t7751;
            double t7728 = 1.0/Ac_1;
            double t7729 = t7688*t7688;
            double t7730 = sqrt(t7695);
            double t7731 = 1.0/t7691;
            double t7732 = t7730*t7731;
            double t7733 = atan(t7732);
            double t7734 = 1.0/sqrt(t7695);
            double t7735 = EcF_2*4.0;
            double t7736 = EcF_3*2.0;
            double t7737 = t7735+t7736;
            double t7738 = EcF_2*EcF_2;
            double t7739 = EcF_2*EcF_3;
            double t7740 = EcF_4+t7738+t7739;
            double t7741 = 1.0/t7740;
            double t7742 = c*t7631*t7640;
            double t7743 = log(t7742);
            double t7744 = EcP_3*t7646*t7647*2.0;
            double t7745 = t7640*t7653;
            double t7746 = log(t7745);
            double t7747 = t7646*t7647*t7657;
            double t7748 = t7746+t7747;
            double t7769 = EcP_2*EcP_3*t7662*t7748;
            double t7749 = t7743+t7744-t7769;
            double t7750 = EcP_1*t7749;
            double t7752 = Ac_3*c*t7650*t7648*(1.0/6.0);
            double t7753 = t7649+t7752;
            double t7754 = 1.0/(t7674*t7674);
            double t7755 = 1.0/(t7677*t7677);
            double t7756 = t7671*t7755;
            double t7757 = t7756+1.0;
            double t7758 = 1.0/t7757;
            double t7759 = t7667*t7667;
            double t7760 = 1.0/(t7630*t7630*t7630*t7630);
            double t7761 = c*t7631*t7690;
            double t7762 = log(t7761);
            double t7763 = EcF_3*t7733*t7734*2.0;
            double t7764 = t7690*t7729;
            double t7765 = log(t7764);
            double t7766 = t7733*t7734*t7737;
            double t7767 = t7765+t7766;
            double t7773 = EcF_2*EcF_3*t7741*t7767;
            double t7768 = t7762+t7763-t7773;
            double t7770 = 1.0/t7727;
            double t7774 = EcF_1*t7768;
            double t7771 = t7750-t7774;
            double t7772 = t7759*t7759;
            double t7775 = d2fz0*t7770*t7771*t7728;
            double t7776 = t7775+1.0;
            double t7777 = 1.0/d2fz0;
            double t7778 = two_13*2.0;
            double t7779 = t7778-2.0;
            double t7780 = 1.0/t7779;
            double t7781 = t7668+1.0;
            double t7782 = pow(t7781,4.0/3.0);
            double t7783 = -t7668+1.0;
            double t7784 = pow(t7783,4.0/3.0);
            double t7785 = t7782+t7784-2.0;
            double t7786 = c*t7648*t7675*(1.0/3.0);
            double t7787 = t7786-c*t7631*t7753*t7754;
            double t7788 = t7682*t7674*t7685*t7787;
            double t7789 = t7715*t7753*t7754;
            double t7790 = c*t7650*t7672*t7648*t7675*(1.0/3.0);
            double t7791 = t7790+t7789;
            double t7792 = 1.0/(t7672*t7672);
            double t7793 = t7674*t7791*t7792;
            double t7794 = c*t7650*t7648*t7720*t7755*t7758*(1.0/3.0);
            double t7795 = t7793+t7794;
            double t7796 = Ac_2*Ac_3*t7726*t7795;
            double t7797 = t7796+t7788-Ac_3*c*t7650*t7648*t7755*t7758*(2.0/3.0);
            double t7798 = 1.0/(t7630*t7630);
            double t7799 = t7667*t7798;
            double t7800 = t7666+t7799;
            double t7801 = t7760*t7772*t7776;
            double t7802 = t7801-1.0;
            v_rho_b_[index] = t7750+t7630*(-t7711+Ac_1*t7780*t7727*t7785*t7777*(1.0/(t7630*t7630*t7630*t7630* \
               t7630)*t7772*t7776*4.0+t7760*t7772*(d2fz0*t7770*t7728*(t7711-EcF_1*(EcF_2*EcF_3*t7741*(t7684*1.0/(t7688* \
               t7688)*(t7687*t7689*t7729+c*t7650*t7690*t7648*t7688*(1.0/3.0))+c*t7650*t7692*t7648*t7698*t7737*(1.0/ \
               3.0))+t7682*t7684*t7685*(c*t7690*t7648*(1.0/3.0)-c*t7631*t7687*t7689)-EcF_3*c*t7650*t7692*t7648*t7698* \
               (2.0/3.0)))-d2fz0*t7771*1.0/(t7727*t7727)*t7728*t7797)+t7667*t7760*t7776*t7759*4.0)+Ac_1*t7780*t7727* \
               t7777*t7802*(pow(t7781,1.0/3.0)*t7800*(4.0/3.0)-pow(t7783,1.0/3.0)*t7800*(4.0/3.0))+Ac_1*t7780*t7785* \
               t7777*t7797*t7802)-Ac_1*t7780*t7727*t7785*t7777*t7802;
        } else if (rho_a[index] > cutoff_) {
            double t9472 = rho_a[index]+rho_b[index];
            double t9473 = 1.0/pow(t9472,1.0/3.0);
            double t9474 = c*t9473;
            double t9475 = sqrt(t9474);
            double t9476 = EcP_4*4.0;
            double t9477 = EcP_3*EcP_3;
            double t9478 = t9476-t9477;
            double t9479 = EcP_2-t9475;
            double t9480 = EcP_3*t9475;
            double t9481 = EcP_4+t9480+t9474;
            double t9482 = 1.0/t9481;
            double t9483 = sqrt(t9478);
            double t9484 = t9475*2.0;
            double t9485 = EcP_3+t9484;
            double t9486 = 1.0/t9485;
            double t9487 = t9483*t9486;
            double t9488 = atan(t9487);
            double t9489 = 1.0/sqrt(t9478);
            double t9490 = 1.0/pow(t9472,4.0/3.0);
            double t9491 = c*t9490*(1.0/3.0);
            double t9492 = 1.0/sqrt(t9474);
            double t9493 = EcP_3*c*t9490*t9492*(1.0/6.0);
            double t9494 = t9491+t9493;
            double t9495 = t9479*t9479;
            double t9496 = 1.0/(t9481*t9481);
            double t9497 = EcP_2*4.0;
            double t9498 = EcP_3*2.0;
            double t9499 = t9497+t9498;
            double t9500 = 1.0/(t9485*t9485);
            double t9501 = EcP_2*EcP_2;
            double t9502 = EcP_2*EcP_3;
            double t9503 = EcP_4+t9501+t9502;
            double t9504 = 1.0/t9503;
            double t9505 = t9478*t9500;
            double t9506 = t9505+1.0;
            double t9507 = 1.0/t9506;
            double t9508 = 1.0/c;
            double t9509 = EcF_3*t9475;
            double t9510 = EcF_4+t9474+t9509;
            double t9511 = pow(t9472,1.0/3.0);
            double t9512 = EcF_3*c*t9490*t9492*(1.0/6.0);
            double t9513 = t9491+t9512;
            double t9514 = EcF_2-t9475;
            double t9515 = 1.0/(t9510*t9510);
            double t9516 = 1.0/t9510;
            double t9517 = EcF_3+t9484;
            double t9518 = 1.0/(t9517*t9517);
            double t9519 = EcF_4*4.0;
            double t9520 = EcF_3*EcF_3;
            double t9521 = t9520-t9519;
            double t9522 = t9521*t9518;
            double t9523 = t9522-1.0;
            double t9524 = 1.0/t9523;
            double t9525 = c*t9490*t9482*(1.0/3.0);
            double t9526 = t9525-c*t9473*t9494*t9496;
            double t9527 = t9481*t9511*t9508*t9526;
            double t9528 = t9494*t9495*t9496;
            double t9529 = c*t9490*t9482*t9492*t9479*(1.0/3.0);
            double t9530 = t9528+t9529;
            double t9531 = 1.0/(t9479*t9479);
            double t9532 = t9481*t9530*t9531;
            double t9533 = c*t9490*t9492*t9499*t9500*t9507*(1.0/3.0);
            double t9534 = t9532+t9533;
            double t9535 = EcP_2*EcP_3*t9504*t9534;
            double t9536 = t9535+t9527-EcP_3*c*t9490*t9492*t9500*t9507*(2.0/3.0);
            double t9537 = EcP_1*t9536;
            double t9538 = pow(2.0,1.0/3.0);
            double t9539 = t9538*2.0;
            double t9540 = t9539-2.0;
            double t9541 = two_13*2.0;
            double t9542 = t9541-2.0;
            double t9543 = 1.0/t9542;
            double t9544 = -t9520+t9519;
            double t9545 = t9514*t9514;
            double t9546 = sqrt(t9544);
            double t9547 = 1.0/t9517;
            double t9548 = t9546*t9547;
            double t9549 = atan(t9548);
            double t9550 = 1.0/sqrt(t9544);
            double t9551 = EcF_2*4.0;
            double t9552 = EcF_3*2.0;
            double t9553 = t9551+t9552;
            double t9554 = EcF_2*EcF_2;
            double t9555 = EcF_2*EcF_3;
            double t9556 = EcF_4+t9554+t9555;
            double t9557 = 1.0/t9556;
            double t9558 = c*t9473*t9482;
            double t9559 = log(t9558);
            double t9560 = EcP_3*t9488*t9489*2.0;
            double t9561 = t9482*t9495;
            double t9562 = log(t9561);
            double t9563 = t9488*t9489*t9499;
            double t9564 = t9562+t9563;
            double t9565 = t9560+t9559-EcP_2*EcP_3*t9504*t9564;
            double t9566 = EcP_1*t9565;
            v_rho_b_[index] = t9566-t9472*(t9537-t9540*t9543*(t9537-EcF_1*(EcF_2*EcF_3*t9557*(t9510*1.0/(t9514* \
               t9514)*(t9513*t9515*t9545+c*t9490*t9492*t9514*t9516*(1.0/3.0))-c*t9490*t9492*t9524*t9553*t9518*(1.0/ \
               3.0))+t9510*t9511*t9508*(c*t9490*t9516*(1.0/3.0)-c*t9473*t9513*t9515)+EcF_3*c*t9490*t9492*t9524*t9518* \
               (2.0/3.0))))-t9540*t9543*(t9566-EcF_1*(log(c*t9473*t9516)+EcF_3*t9550*t9549*2.0-EcF_2*EcF_3*t9557* \
               (log(t9516*t9545)+t9550*t9553*t9549)));
        } else if (rho_b[index] > cutoff_) {
            double t8828 = rho_a[index]+rho_b[index];
            double t8829 = 1.0/pow(t8828,1.0/3.0);
            double t8830 = c*t8829;
            double t8831 = sqrt(t8830);
            double t8832 = EcP_4*4.0;
            double t8833 = EcP_3*EcP_3;
            double t8834 = t8832-t8833;
            double t8835 = EcP_2-t8831;
            double t8836 = EcP_3*t8831;
            double t8837 = EcP_4+t8830+t8836;
            double t8838 = 1.0/t8837;
            double t8839 = sqrt(t8834);
            double t8840 = t8831*2.0;
            double t8841 = EcP_3+t8840;
            double t8842 = 1.0/t8841;
            double t8843 = t8842*t8839;
            double t8844 = atan(t8843);
            double t8845 = 1.0/sqrt(t8834);
            double t8846 = 1.0/pow(t8828,4.0/3.0);
            double t8847 = c*t8846*(1.0/3.0);
            double t8848 = 1.0/sqrt(t8830);
            double t8849 = EcP_3*c*t8846*t8848*(1.0/6.0);
            double t8850 = t8847+t8849;
            double t8851 = t8835*t8835;
            double t8852 = 1.0/(t8837*t8837);
            double t8853 = EcP_2*4.0;
            double t8854 = EcP_3*2.0;
            double t8855 = t8853+t8854;
            double t8856 = 1.0/(t8841*t8841);
            double t8857 = EcP_2*EcP_2;
            double t8858 = EcP_2*EcP_3;
            double t8859 = EcP_4+t8857+t8858;
            double t8860 = 1.0/t8859;
            double t8861 = t8834*t8856;
            double t8862 = t8861+1.0;
            double t8863 = 1.0/t8862;
            double t8864 = 1.0/c;
            double t8865 = EcF_3*t8831;
            double t8866 = EcF_4+t8830+t8865;
            double t8867 = pow(t8828,1.0/3.0);
            double t8868 = EcF_3*c*t8846*t8848*(1.0/6.0);
            double t8869 = t8847+t8868;
            double t8870 = EcF_2-t8831;
            double t8871 = 1.0/(t8866*t8866);
            double t8872 = 1.0/t8866;
            double t8873 = EcF_3+t8840;
            double t8874 = 1.0/(t8873*t8873);
            double t8875 = EcF_4*4.0;
            double t8876 = EcF_3*EcF_3;
            double t8877 = t8875-t8876;
            double t8878 = t8874*t8877;
            double t8879 = t8878+1.0;
            double t8880 = 1.0/t8879;
            double t8881 = c*t8846*t8838*(1.0/3.0);
            double t8882 = t8881-c*t8850*t8852*t8829;
            double t8883 = t8837*t8864*t8882*t8867;
            double t8884 = t8850*t8851*t8852;
            double t8885 = c*t8835*t8846*t8838*t8848*(1.0/3.0);
            double t8886 = t8884+t8885;
            double t8887 = 1.0/(t8835*t8835);
            double t8888 = t8837*t8886*t8887;
            double t8889 = c*t8863*t8846*t8855*t8856*t8848*(1.0/3.0);
            double t8890 = t8888+t8889;
            double t8891 = EcP_2*EcP_3*t8860*t8890;
            double t8892 = t8891+t8883-EcP_3*c*t8863*t8846*t8856*t8848*(2.0/3.0);
            double t8893 = EcP_1*t8892;
            double t8894 = pow(2.0,1.0/3.0);
            double t8895 = t8894*2.0;
            double t8896 = t8895-2.0;
            double t8897 = two_13*2.0;
            double t8898 = t8897-2.0;
            double t8899 = 1.0/t8898;
            double t8900 = t8870*t8870;
            double t8901 = sqrt(t8877);
            double t8902 = 1.0/t8873;
            double t8903 = t8901*t8902;
            double t8904 = atan(t8903);
            double t8905 = 1.0/sqrt(t8877);
            double t8906 = EcF_2*4.0;
            double t8907 = EcF_3*2.0;
            double t8908 = t8906+t8907;
            double t8909 = EcF_2*EcF_2;
            double t8910 = EcF_2*EcF_3;
            double t8911 = EcF_4+t8910+t8909;
            double t8912 = 1.0/t8911;
            double t8913 = c*t8829*t8838;
            double t8914 = log(t8913);
            double t8915 = EcP_3*t8844*t8845*2.0;
            double t8916 = t8851*t8838;
            double t8917 = log(t8916);
            double t8918 = t8844*t8845*t8855;
            double t8919 = t8917+t8918;
            double t8920 = t8914+t8915-EcP_2*EcP_3*t8860*t8919;
            double t8921 = EcP_1*t8920;
            v_rho_b_[index] = t8921-t8828*(t8893-t8896*t8899*(t8893-EcF_1*(EcF_2*EcF_3*t8912*(1.0/(t8870*t8870) \
               *t8866*(t8871*t8869*t8900+c*t8870*t8872*t8846*t8848*(1.0/3.0))+c*t8880*t8846*t8874*t8848*t8908*(1.0/ \
               3.0))+t8864*t8866*t8867*(c*t8872*t8846*(1.0/3.0)-c*t8871*t8829*t8869)-EcF_3*c*t8880*t8846*t8874*t8848* \
               (2.0/3.0))))-t8896*t8899*(t8921-EcF_1*(log(c*t8872*t8829)+EcF_3*t8904*t8905*2.0-EcF_2*EcF_3*t8912* \
               (log(t8872*t8900)+t8904*t8905*t8908)));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7809 = rho_a[index]+rho_b[index];
            double t7810 = 1.0/pow(t7809,1.0/3.0);
            double t7811 = c*t7810;
            double t7812 = 1.0/pow(t7809,4.0/3.0);
            double t7813 = sqrt(t7811);
            double t7814 = EcP_3*t7813;
            double t7815 = EcP_4+t7811+t7814;
            double t7816 = c*t7812*(1.0/3.0);
            double t7817 = 1.0/sqrt(t7811);
            double t7818 = EcP_3*c*t7812*t7817*(1.0/6.0);
            double t7819 = t7816+t7818;
            double t7820 = 1.0/c;
            double t7821 = 1.0/t7815;
            double t7822 = c*t7812*t7821*(1.0/3.0);
            double t7823 = 1.0/(t7815*t7815);
            double t7957 = c*t7810*t7823*t7819;
            double t7824 = t7822-t7957;
            double t7825 = pow(t7809,1.0/3.0);
            double t7826 = 1.0/pow(t7809,7.0/3.0);
            double t7827 = EcP_2-t7813;
            double t7828 = 1.0/(t7827*t7827);
            double t7829 = t7827*t7827;
            double t7830 = c*t7826*(4.0/9.0);
            double t7831 = EcP_3*c*t7817*t7826*(2.0/9.0);
            double t7832 = c*c;
            double t7833 = 1.0/pow(t7809,8.0/3.0);
            double t7834 = 1.0/pow(t7811,3.0/2.0);
            double t7960 = EcP_3*t7832*t7833*t7834*(1.0/3.6E1);
            double t7835 = t7830+t7831-t7960;
            double t7836 = t7819*t7819;
            double t7837 = 1.0/(t7815*t7815*t7815);
            double t7838 = t7813*2.0;
            double t7839 = EcP_3+t7838;
            double t7840 = EcP_2*4.0;
            double t7841 = EcP_3*2.0;
            double t7842 = t7840+t7841;
            double t7843 = 1.0/(t7839*t7839);
            double t7844 = EcP_4*4.0;
            double t7845 = EcP_3*EcP_3;
            double t7846 = t7844-t7845;
            double t7847 = t7843*t7846;
            double t7848 = t7847+1.0;
            double t7849 = 1.0/t7848;
            double t7850 = t7823*t7819*t7829;
            double t7851 = c*t7812*t7821*t7817*t7827*(1.0/3.0);
            double t7852 = t7850+t7851;
            double t7853 = 1.0/(t7839*t7839*t7839);
            double t7854 = 1.0/(t7839*t7839*t7839*t7839*t7839);
            double t7855 = 1.0/(t7848*t7848);
            double t7856 = rho_a[index]-rho_b[index];
            double t7857 = t7856*t7856;
            double t7858 = EcF_4*4.0;
            double t7859 = EcF_3*EcF_3;
            double t7860 = t7858-t7859;
            double t7861 = EcF_2-t7813;
            double t7862 = EcF_3*t7813;
            double t7863 = EcF_4+t7811+t7862;
            double t7864 = 1.0/t7863;
            double t7865 = sqrt(t7860);
            double t7866 = EcF_3+t7838;
            double t7867 = 1.0/t7866;
            double t7868 = t7865*t7867;
            double t7869 = atan(t7868);
            double t7870 = 1.0/sqrt(t7860);
            double t7871 = sqrt(t7846);
            double t7872 = 1.0/t7839;
            double t7873 = t7871*t7872;
            double t7874 = atan(t7873);
            double t7875 = 1.0/sqrt(t7846);
            double t7876 = EcP_2*EcP_2;
            double t7877 = EcP_2*EcP_3;
            double t7878 = EcP_4+t7876+t7877;
            double t7879 = 1.0/t7878;
            double t7880 = Ac_4*4.0;
            double t7881 = Ac_3*Ac_3;
            double t7882 = t7880-t7881;
            double t7883 = Ac_2-t7813;
            double t7884 = Ac_3*t7813;
            double t7885 = Ac_4+t7811+t7884;
            double t7886 = 1.0/t7885;
            double t7887 = sqrt(t7882);
            double t7888 = Ac_3+t7838;
            double t7889 = 1.0/t7888;
            double t7890 = t7887*t7889;
            double t7891 = atan(t7890);
            double t7892 = 1.0/sqrt(t7882);
            double t7893 = c*t7810*t7886;
            double t7894 = log(t7893);
            double t7895 = Ac_3*t7891*t7892*2.0;
            double t7896 = t7883*t7883;
            double t7897 = t7886*t7896;
            double t7898 = log(t7897);
            double t7899 = Ac_2*4.0;
            double t7900 = Ac_3*2.0;
            double t7901 = t7899+t7900;
            double t7902 = t7891*t7892*t7901;
            double t7903 = t7898+t7902;
            double t7904 = Ac_2*Ac_2;
            double t7905 = Ac_2*Ac_3;
            double t7906 = Ac_4+t7904+t7905;
            double t7907 = 1.0/t7906;
            double t7924 = Ac_2*Ac_3*t7903*t7907;
            double t7908 = t7894+t7895-t7924;
            double t7909 = 1.0/t7809;
            double t7910 = t7856*t7909;
            double t7911 = 1.0/(t7809*t7809);
            double t7912 = t7911*2.0;
            double t7913 = 1.0/(t7809*t7809*t7809);
            double t7914 = t7912-t7856*t7913*2.0;
            double t7915 = t7910+1.0;
            double t7918 = t7856*t7911;
            double t7916 = t7909-t7918;
            double t7917 = -t7910+1.0;
            double t7919 = t7916*t7916;
            double t7920 = 1.0/d2fz0;
            double t7921 = two_13*2.0;
            double t7922 = t7921-2.0;
            double t7923 = 1.0/t7922;
            double t7925 = 1.0/(t7809*t7809*t7809*t7809);
            double t7926 = t7857*t7857;
            double t7927 = 1.0/Ac_1;
            double t7928 = EcF_3*c*t7812*t7817*(1.0/6.0);
            double t7929 = t7816+t7928;
            double t7930 = c*t7812*t7864*(1.0/3.0);
            double t7931 = 1.0/(t7863*t7863);
            double t7981 = c*t7810*t7931*t7929;
            double t7932 = t7930-t7981;
            double t7933 = 1.0/pow(t7809,2.0/3.0);
            double t7934 = EcF_2*EcF_2;
            double t7935 = EcF_2*EcF_3;
            double t7936 = EcF_4+t7934+t7935;
            double t7937 = 1.0/t7936;
            double t7938 = t7861*t7861;
            double t7939 = 1.0/(t7861*t7861);
            double t7940 = EcF_3*c*t7817*t7826*(2.0/9.0);
            double t7941 = t7830+t7940-EcF_3*t7832*t7833*t7834*(1.0/3.6E1);
            double t7942 = t7929*t7929;
            double t7943 = 1.0/(t7863*t7863*t7863);
            double t7944 = EcF_2*4.0;
            double t7945 = EcF_3*2.0;
            double t7946 = t7944+t7945;
            double t7947 = 1.0/(t7866*t7866);
            double t7948 = t7860*t7947;
            double t7949 = t7948+1.0;
            double t7950 = 1.0/t7949;
            double t7951 = t7931*t7929*t7938;
            double t7952 = c*t7812*t7861*t7817*t7864*(1.0/3.0);
            double t7953 = t7951+t7952;
            double t7954 = 1.0/(t7866*t7866*t7866);
            double t7955 = 1.0/(t7866*t7866*t7866*t7866*t7866);
            double t7956 = 1.0/(t7949*t7949);
            double t7958 = t7820*t7824*t7825*t7819;
            double t7959 = c*t7821*t7826*(4.0/9.0);
            double t7961 = c*t7810*t7836*t7837*2.0;
            double t7962 = t7961+t7959-c*t7810*t7823*t7835-c*t7812*t7823*t7819*(2.0/3.0);
            double t7963 = t7820*t7815*t7825*t7962;
            double t7964 = t7852*t7819*t7828;
            double t7965 = c*t7821*t7826*(1.0/1.8E1);
            double t7966 = t7836*t7837*t7829*2.0;
            double t7967 = t7821*t7832*t7833*t7834*t7827*(1.0/1.8E1);
            double t7968 = c*t7812*t7823*t7817*t7827*t7819*(2.0/3.0);
            double t7969 = t7965+t7966+t7967+t7968-t7823*t7835*t7829-c*t7821*t7817*t7826*t7827*(4.0/9.0);
            double t7970 = c*t7842*t7843*t7817*t7826*t7849*(4.0/9.0);
            double t7971 = 1.0/(t7827*t7827*t7827);
            double t7972 = c*t7812*t7815*t7852*t7817*t7971*(1.0/3.0);
            double t7973 = c*t7842*t7826*t7854*t7846*t7855*(2.0/9.0);
            double t7974 = t7970+t7972+t7964+t7973-t7815*t7828*t7969-c*t7842*t7826*t7853*t7849*(2.0/9.0)-t7832* \
               t7833*t7842*t7834*t7843*t7849*(1.0/1.8E1);
            double t7975 = EcP_2*EcP_3*t7879*t7974;
            double t7976 = EcP_3*c*t7826*t7853*t7849*(4.0/9.0);
            double t7977 = EcP_3*t7832*t7833*t7834*t7843*t7849*(1.0/9.0);
            double t7978 = t7963+t7975+t7958+t7976+t7977-t7820*t7815*t7824*t7933*(1.0/3.0)-EcP_3*c*t7843*t7817* \
               t7826*t7849*(8.0/9.0)-EcP_3*c*t7826*t7854*t7846*t7855*(4.0/9.0);
            double t7979 = EcP_1*t7978;
            double t7980 = 1.0/t7908;
            double t7982 = Ac_3*c*t7812*t7817*(1.0/6.0);
            double t7983 = t7816+t7982;
            double t7984 = 1.0/(t7885*t7885);
            double t7985 = 1.0/(t7888*t7888);
            double t7986 = t7882*t7985;
            double t7987 = t7986+1.0;
            double t7988 = 1.0/t7987;
            double t7989 = c*t7810*t7864;
            double t7990 = log(t7989);
            double t7991 = EcF_3*t7870*t7869*2.0;
            double t7992 = t7864*t7938;
            double t7993 = log(t7992);
            double t7994 = t7870*t7869*t7946;
            double t7995 = t7993+t7994;
            double t8019 = EcF_2*EcF_3*t7937*t7995;
            double t7996 = t7990+t7991-t8019;
            double t7997 = EcF_1*t7996;
            double t7998 = c*t7810*t7821;
            double t7999 = log(t7998);
            double t8000 = EcP_3*t7874*t7875*2.0;
            double t8001 = t7821*t7829;
            double t8002 = log(t8001);
            double t8003 = t7842*t7874*t7875;
            double t8004 = t8002+t8003;
            double t8020 = EcP_2*EcP_3*t7879*t8004;
            double t8005 = t7999+t8000-t8020;
            double t8021 = EcP_1*t8005;
            double t8006 = t7997-t8021;
            double t8007 = c*t7812*t7886*(1.0/3.0);
            double t8023 = c*t7810*t7983*t7984;
            double t8008 = -t8023+t8007;
            double t8009 = t7820*t7825*t7885*t8008;
            double t8010 = t7896*t7983*t7984;
            double t8011 = c*t7812*t7817*t7883*t7886*(1.0/3.0);
            double t8012 = t8010+t8011;
            double t8013 = 1.0/(t7883*t7883);
            double t8014 = t7885*t8012*t8013;
            double t8015 = c*t7812*t7817*t7901*t7985*t7988*(1.0/3.0);
            double t8016 = t8014+t8015;
            double t8017 = Ac_2*Ac_3*t7907*t8016;
            double t8045 = Ac_3*c*t7812*t7817*t7985*t7988*(2.0/3.0);
            double t8018 = t8017+t8009-t8045;
            double t8022 = 1.0/(t7908*t7908);
            double t8024 = Ac_3*c*t7817*t7826*(2.0/9.0);
            double t8068 = Ac_3*t7832*t7833*t7834*(1.0/3.6E1);
            double t8025 = t7830+t8024-t8068;
            double t8026 = t7983*t7983;
            double t8027 = 1.0/(t7885*t7885*t7885);
            double t8028 = 1.0/(t7888*t7888*t7888);
            double t8029 = 1.0/(t7888*t7888*t7888*t7888*t7888);
            double t8030 = 1.0/(t7987*t7987);
            double t8031 = t7820*t7825*t7863*t7932;
            double t8032 = t7863*t7953*t7939;
            double t8033 = c*t7812*t7817*t7950*t7946*t7947*(1.0/3.0);
            double t8034 = t8032+t8033;
            double t8035 = EcF_2*EcF_3*t7937*t8034;
            double t8046 = EcF_3*c*t7812*t7817*t7950*t7947*(2.0/3.0);
            double t8036 = t8031+t8035-t8046;
            double t8037 = EcF_1*t8036;
            double t8038 = t7820*t7815*t7824*t7825;
            double t8039 = t7815*t7852*t7828;
            double t8040 = c*t7812*t7842*t7843*t7817*t7849*(1.0/3.0);
            double t8041 = t8040+t8039;
            double t8042 = EcP_2*EcP_3*t7879*t8041;
            double t8047 = EcP_3*c*t7812*t7843*t7817*t7849*(2.0/3.0);
            double t8043 = t8042+t8038-t8047;
            double t8048 = EcP_1*t8043;
            double t8044 = t8037-t8048;
            double t8049 = d2fz0*t7980*t7927*t8044;
            double t8056 = d2fz0*t7927*t8022*t8006*t8018;
            double t8050 = -t8056+t8049;
            double t8051 = d2fz0*t7980*t7927*t8006;
            double t8052 = t8051-1.0;
            double t8053 = 1.0/(t7809*t7809*t7809*t7809*t7809);
            double t8054 = pow(t7915,1.0/3.0);
            double t8055 = pow(t7917,1.0/3.0);
            double t8057 = t7916*t8054*(4.0/3.0);
            double t8089 = t7916*t8055*(4.0/3.0);
            double t8058 = t8057-t8089;
            double t8059 = t7925*t7926*t8052;
            double t8060 = t8059+1.0;
            double t8061 = pow(t7915,4.0/3.0);
            double t8062 = pow(t7917,4.0/3.0);
            double t8063 = t8061+t8062-2.0;
            double t8064 = t7925*t7926*t8050;
            double t8065 = t7926*t8052*t8053*4.0;
            double t8088 = t7856*t7857*t7925*t8052*4.0;
            double t8066 = t8064+t8065-t8088;
            double t8067 = c*t7826*t7886*(4.0/9.0);
            double t8069 = c*t7810*t8026*t8027*2.0;
            double t8070 = t8067+t8069-c*t7812*t7983*t7984*(2.0/3.0)-c*t7810*t7984*t8025;
            double t8071 = t7820*t7825*t7885*t8070;
            double t8072 = t7983*t8012*t8013;
            double t8073 = c*t7826*t7886*(1.0/1.8E1);
            double t8074 = t7896*t8026*t8027*2.0;
            double t8075 = t7832*t7833*t7834*t7883*t7886*(1.0/1.8E1);
            double t8076 = c*t7812*t7817*t7883*t7983*t7984*(2.0/3.0);
            double t8077 = t8073+t8074+t8075+t8076-t7896*t7984*t8025-c*t7817*t7826*t7883*t7886*(4.0/9.0);
            double t8078 = c*t7817*t7826*t7901*t7985*t7988*(4.0/9.0);
            double t8079 = 1.0/(t7883*t7883*t7883);
            double t8080 = c*t7812*t7817*t7885*t8012*t8079*(1.0/3.0);
            double t8081 = c*t7826*t7882*t7901*t8030*t8029*(2.0/9.0);
            double t8082 = t8080+t8072+t8081+t8078-t7885*t8013*t8077-c*t7826*t7901*t7988*t8028*(2.0/9.0)-t7832* \
               t7833*t7834*t7901*t7985*t7988*(1.0/1.8E1);
            double t8083 = Ac_2*Ac_3*t7907*t8082;
            double t8084 = t7820*t7825*t7983*t8008;
            double t8085 = Ac_3*c*t7826*t7988*t8028*(4.0/9.0);
            double t8086 = Ac_3*t7832*t7833*t7834*t7985*t7988*(1.0/9.0);
            double t8087 = t8071+t8083+t8084+t8085+t8086-t7820*t7885*t7933*t8008*(1.0/3.0)-Ac_3*c*t7817*t7826* \
               t7985*t7988*(8.0/9.0)-Ac_3*c*t7826*t7882*t8030*t8029*(4.0/9.0);
            v_rho_a_rho_a_[index] = EcP_1*t8043*-2.0+t7809*(t7979+Ac_1*t7920*t7923*t7908*t8063*(1.0/(t7809*t7809* \
               t7809*t7809*t7809*t7809)*t7926*t8052*2.0E1+t7857*t7925*t8052*1.2E1+t7926*t8050*t8053*8.0-t7925*t7926* \
               (d2fz0*t7980*t7927*(t7979-EcF_1*(t7820*t7825*t7863*(c*t7826*t7864*(4.0/9.0)-c*t7810*t7931*t7941+c* \
               t7810*t7942*t7943*2.0-c*t7812*t7931*t7929*(2.0/3.0))-t7820*t7863*t7932*t7933*(1.0/3.0)+t7820*t7825* \
               t7932*t7929+EcF_2*EcF_3*t7937*(-t7863*t7939*(c*t7826*t7864*(1.0/1.8E1)-t7931*t7941*t7938+t7942*t7943* \
               t7938*2.0-c*t7861*t7817*t7826*t7864*(4.0/9.0)+t7832*t7833*t7834*t7861*t7864*(1.0/1.8E1)+c*t7812*t7861* \
               t7817*t7931*t7929*(2.0/3.0))+t7953*t7929*t7939-c*t7826*t7950*t7954*t7946*(2.0/9.0)+c*t7817*t7826*t7950* \
               t7946*t7947*(4.0/9.0)+c*t7860*t7826*t7946*t7955*t7956*(2.0/9.0)-t7832*t7833*t7834*t7950*t7946*t7947* \
               (1.0/1.8E1)+c*t7812*1.0/(t7861*t7861*t7861)*t7817*t7863*t7953*(1.0/3.0))+EcF_3*c*t7826*t7950*t7954* \
               (4.0/9.0)-EcF_3*c*t7817*t7826*t7950*t7947*(8.0/9.0)-EcF_3*c*t7860*t7826*t7955*t7956*(4.0/9.0)+EcF_3* \
               t7832*t7833*t7834*t7950*t7947*(1.0/9.0)))-d2fz0*1.0/(t7908*t7908*t7908)*t7927*t8006*(t8018*t8018)* \
               2.0+d2fz0*t7927*t8022*t8044*t8018*2.0+d2fz0*t7927*t8022*t8006*t8087)-t7856*t7857*t7925*t8050*8.0-t7856* \
               t7857*t8052*t8053*3.2E1)+Ac_1*t7920*t7923*t7908*t8060*(t7914*t8054*(-4.0/3.0)+t7914*t8055*(4.0/3.0) \
               +1.0/pow(t7915,2.0/3.0)*t7919*(4.0/9.0)+1.0/pow(t7917,2.0/3.0)*t7919*(4.0/9.0))-Ac_1*t7920*t7923*t7908* \
               t8066*t8058*2.0-Ac_1*t7920*t7923*t8060*t8018*t8058*2.0+Ac_1*t7920*t7923*t8060*t8063*t8087+Ac_1*t7920* \
               t7923*t8018*t8063*t8066*2.0)+Ac_1*t7920*t7923*t7908*t8060*t8058*2.0-Ac_1*t7920*t7923*t7908*t8063*t8066* \
               2.0-Ac_1*t7920*t7923*t8060*t8018*t8063*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t9573 = rho_a[index]+rho_b[index];
            double t9574 = 1.0/pow(t9573,1.0/3.0);
            double t9575 = c*t9574;
            double t9576 = 1.0/pow(t9573,4.0/3.0);
            double t9577 = sqrt(t9575);
            double t9578 = EcP_3*t9577;
            double t9579 = EcP_4+t9575+t9578;
            double t9580 = c*t9576*(1.0/3.0);
            double t9581 = 1.0/sqrt(t9575);
            double t9582 = EcP_3*c*t9581*t9576*(1.0/6.0);
            double t9583 = t9580+t9582;
            double t9584 = EcP_2-t9577;
            double t9585 = 1.0/(t9579*t9579);
            double t9586 = 1.0/t9579;
            double t9587 = t9577*2.0;
            double t9588 = EcP_3+t9587;
            double t9589 = 1.0/(t9588*t9588);
            double t9590 = EcP_4*4.0;
            double t9591 = EcP_3*EcP_3;
            double t9592 = t9590-t9591;
            double t9593 = t9592*t9589;
            double t9594 = t9593+1.0;
            double t9595 = 1.0/t9594;
            double t9596 = 1.0/c;
            double t9597 = c*t9576*t9586*(1.0/3.0);
            double t9600 = c*t9574*t9583*t9585;
            double t9598 = t9597-t9600;
            double t9599 = pow(t9573,1.0/3.0);
            double t9601 = 1.0/pow(t9573,7.0/3.0);
            double t9602 = EcP_2*EcP_2;
            double t9603 = EcP_2*EcP_3;
            double t9604 = EcP_4+t9602+t9603;
            double t9605 = 1.0/t9604;
            double t9606 = t9584*t9584;
            double t9607 = t9583*t9585*t9606;
            double t9608 = c*t9581*t9584*t9576*t9586*(1.0/3.0);
            double t9609 = t9607+t9608;
            double t9610 = 1.0/(t9584*t9584);
            double t9611 = c*t9601*(4.0/9.0);
            double t9612 = EcP_3*c*t9581*t9601*(2.0/9.0);
            double t9613 = c*c;
            double t9614 = 1.0/pow(t9573,8.0/3.0);
            double t9615 = 1.0/pow(t9575,3.0/2.0);
            double t9660 = EcP_3*t9613*t9614*t9615*(1.0/3.6E1);
            double t9616 = t9611+t9612-t9660;
            double t9617 = t9583*t9583;
            double t9618 = 1.0/(t9579*t9579*t9579);
            double t9619 = EcP_2*4.0;
            double t9620 = EcP_3*2.0;
            double t9621 = t9620+t9619;
            double t9622 = 1.0/(t9588*t9588*t9588);
            double t9623 = 1.0/(t9588*t9588*t9588*t9588*t9588);
            double t9624 = 1.0/(t9594*t9594);
            double t9625 = EcF_3*t9577;
            double t9626 = EcF_4+t9575+t9625;
            double t9627 = EcF_3*c*t9581*t9576*(1.0/6.0);
            double t9628 = t9580+t9627;
            double t9629 = 1.0/t9626;
            double t9630 = c*t9576*t9629*(1.0/3.0);
            double t9631 = 1.0/(t9626*t9626);
            double t9686 = c*t9574*t9631*t9628;
            double t9632 = t9630-t9686;
            double t9633 = 1.0/pow(t9573,2.0/3.0);
            double t9634 = EcF_2-t9577;
            double t9635 = 1.0/(t9634*t9634);
            double t9636 = t9634*t9634;
            double t9637 = EcF_3*c*t9581*t9601*(2.0/9.0);
            double t9638 = t9611+t9637-EcF_3*t9613*t9614*t9615*(1.0/3.6E1);
            double t9639 = t9628*t9628;
            double t9640 = 1.0/(t9626*t9626*t9626);
            double t9641 = EcF_3+t9587;
            double t9642 = EcF_2*4.0;
            double t9643 = EcF_3*2.0;
            double t9644 = t9642+t9643;
            double t9645 = 1.0/(t9641*t9641);
            double t9646 = EcF_4*4.0;
            double t9647 = EcF_3*EcF_3;
            double t9648 = t9646-t9647;
            double t9649 = t9645*t9648;
            double t9650 = t9649+1.0;
            double t9651 = 1.0/t9650;
            double t9652 = t9631*t9636*t9628;
            double t9653 = c*t9581*t9576*t9634*t9629*(1.0/3.0);
            double t9654 = t9652+t9653;
            double t9655 = 1.0/(t9641*t9641*t9641);
            double t9656 = 1.0/(t9641*t9641*t9641*t9641*t9641);
            double t9657 = 1.0/(t9650*t9650);
            double t9658 = t9583*t9596*t9598*t9599;
            double t9659 = c*t9586*t9601*(4.0/9.0);
            double t9661 = c*t9574*t9617*t9618*2.0;
            double t9662 = t9661+t9659-c*t9583*t9576*t9585*(2.0/3.0)-c*t9574*t9585*t9616;
            double t9663 = t9596*t9579*t9599*t9662;
            double t9664 = t9583*t9610*t9609;
            double t9665 = c*t9586*t9601*(1.0/1.8E1);
            double t9666 = t9606*t9617*t9618*2.0;
            double t9667 = t9584*t9586*t9613*t9614*t9615*(1.0/1.8E1);
            double t9668 = c*t9581*t9583*t9584*t9576*t9585*(2.0/3.0);
            double t9669 = t9665+t9666+t9667+t9668-t9585*t9606*t9616-c*t9581*t9584*t9586*t9601*(4.0/9.0);
            double t9670 = c*t9581*t9595*t9589*t9601*t9621*(4.0/9.0);
            double t9671 = 1.0/(t9584*t9584*t9584);
            double t9672 = c*t9581*t9576*t9579*t9671*t9609*(1.0/3.0);
            double t9673 = c*t9592*t9601*t9621*t9623*t9624*(2.0/9.0);
            double t9674 = t9670+t9672+t9664+t9673-t9579*t9610*t9669-c*t9595*t9601*t9621*t9622*(2.0/9.0)-t9595* \
               t9589*t9621*t9613*t9614*t9615*(1.0/1.8E1);
            double t9675 = EcP_2*EcP_3*t9605*t9674;
            double t9676 = EcP_3*c*t9595*t9601*t9622*(4.0/9.0);
            double t9677 = EcP_3*t9595*t9589*t9613*t9614*t9615*(1.0/9.0);
            double t9678 = t9663+t9675+t9658+t9676+t9677-t9596*t9579*t9598*t9633*(1.0/3.0)-EcP_3*c*t9581*t9595* \
               t9589*t9601*(8.0/9.0)-EcP_3*c*t9592*t9601*t9623*t9624*(4.0/9.0);
            double t9679 = EcP_1*t9678;
            double t9680 = pow(2.0,1.0/3.0);
            double t9681 = t9680*2.0;
            double t9682 = t9681-2.0;
            double t9683 = two_13*2.0;
            double t9684 = t9683-2.0;
            double t9685 = 1.0/t9684;
            double t9687 = EcF_2*EcF_2;
            double t9688 = EcF_2*EcF_3;
            double t9689 = EcF_4+t9687+t9688;
            double t9690 = 1.0/t9689;
            double t9691 = t9596*t9579*t9598*t9599;
            double t9692 = t9579*t9610*t9609;
            double t9693 = c*t9581*t9576*t9595*t9589*t9621*(1.0/3.0);
            double t9694 = t9692+t9693;
            double t9695 = EcP_2*EcP_3*t9605*t9694;
            double t9696 = t9691+t9695-EcP_3*c*t9581*t9576*t9595*t9589*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t9696*-2.0+t9573*(t9679-t9682*t9685*(t9679-EcF_1*(t9596*t9599*t9626* \
               (c*t9601*t9629*(4.0/9.0)-c*t9574*t9631*t9638+c*t9574*t9640*t9639*2.0-c*t9576*t9631*t9628*(2.0/3.0) \
               )+t9596*t9599*t9632*t9628-t9596*t9632*t9633*t9626*(1.0/3.0)+EcF_2*EcF_3*t9690*(-t9626*t9635*(c*t9601* \
               t9629*(1.0/1.8E1)-t9631*t9636*t9638+t9640*t9636*t9639*2.0-c*t9581*t9601*t9634*t9629*(4.0/9.0)+t9613* \
               t9614*t9615*t9634*t9629*(1.0/1.8E1)+c*t9581*t9576*t9631*t9634*t9628*(2.0/3.0))+t9635*t9654*t9628-c* \
               t9601*t9651*t9644*t9655*(2.0/9.0)+c*t9581*t9601*t9651*t9644*t9645*(4.0/9.0)+c*t9601*t9644*t9656*t9648* \
               t9657*(2.0/9.0)-t9613*t9614*t9615*t9651*t9644*t9645*(1.0/1.8E1)+c*t9581*t9576*1.0/(t9634*t9634*t9634) \
               *t9626*t9654*(1.0/3.0))+EcF_3*c*t9601*t9651*t9655*(4.0/9.0)-EcF_3*c*t9581*t9601*t9651*t9645*(8.0/9.0) \
               -EcF_3*c*t9601*t9656*t9648*t9657*(4.0/9.0)+EcF_3*t9613*t9614*t9615*t9651*t9645*(1.0/9.0))))+t9682* \
               t9685*(EcP_1*t9696-EcF_1*(t9596*t9599*t9632*t9626+EcF_2*EcF_3*t9690*(t9626*t9635*t9654+c*t9581*t9576* \
               t9651*t9644*t9645*(1.0/3.0))-EcF_3*c*t9581*t9576*t9651*t9645*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t8928 = rho_a[index]+rho_b[index];
            double t8929 = 1.0/pow(t8928,1.0/3.0);
            double t8930 = c*t8929;
            double t8931 = 1.0/pow(t8928,4.0/3.0);
            double t8932 = sqrt(t8930);
            double t8933 = EcP_3*t8932;
            double t8934 = EcP_4+t8930+t8933;
            double t8935 = c*t8931*(1.0/3.0);
            double t8936 = 1.0/sqrt(t8930);
            double t8937 = EcP_3*c*t8931*t8936*(1.0/6.0);
            double t8938 = t8935+t8937;
            double t8939 = EcP_2-t8932;
            double t8940 = 1.0/(t8934*t8934);
            double t8941 = 1.0/t8934;
            double t8942 = t8932*2.0;
            double t8943 = EcP_3+t8942;
            double t8944 = 1.0/(t8943*t8943);
            double t8945 = EcP_4*4.0;
            double t8946 = EcP_3*EcP_3;
            double t8947 = t8945-t8946;
            double t8948 = t8944*t8947;
            double t8949 = t8948+1.0;
            double t8950 = 1.0/t8949;
            double t8951 = 1.0/c;
            double t8952 = c*t8931*t8941*(1.0/3.0);
            double t8955 = c*t8940*t8929*t8938;
            double t8953 = t8952-t8955;
            double t8954 = pow(t8928,1.0/3.0);
            double t8956 = 1.0/pow(t8928,7.0/3.0);
            double t8957 = EcP_2*EcP_2;
            double t8958 = EcP_2*EcP_3;
            double t8959 = EcP_4+t8957+t8958;
            double t8960 = 1.0/t8959;
            double t8961 = t8939*t8939;
            double t8962 = t8940*t8961*t8938;
            double t8963 = c*t8931*t8941*t8936*t8939*(1.0/3.0);
            double t8964 = t8962+t8963;
            double t8965 = 1.0/(t8939*t8939);
            double t8966 = c*t8956*(4.0/9.0);
            double t8967 = EcP_3*c*t8936*t8956*(2.0/9.0);
            double t8968 = c*c;
            double t8969 = 1.0/pow(t8928,8.0/3.0);
            double t8970 = 1.0/pow(t8930,3.0/2.0);
            double t9015 = EcP_3*t8970*t8968*t8969*(1.0/3.6E1);
            double t8971 = t8966+t8967-t9015;
            double t8972 = t8938*t8938;
            double t8973 = 1.0/(t8934*t8934*t8934);
            double t8974 = EcP_2*4.0;
            double t8975 = EcP_3*2.0;
            double t8976 = t8974+t8975;
            double t8977 = 1.0/(t8943*t8943*t8943);
            double t8978 = 1.0/(t8943*t8943*t8943*t8943*t8943);
            double t8979 = 1.0/(t8949*t8949);
            double t8980 = EcF_3*t8932;
            double t8981 = EcF_4+t8930+t8980;
            double t8982 = EcF_3*c*t8931*t8936*(1.0/6.0);
            double t8983 = t8935+t8982;
            double t8984 = 1.0/t8981;
            double t8985 = c*t8931*t8984*(1.0/3.0);
            double t8986 = 1.0/(t8981*t8981);
            double t9041 = c*t8929*t8983*t8986;
            double t8987 = t8985-t9041;
            double t8988 = 1.0/pow(t8928,2.0/3.0);
            double t8989 = EcF_2-t8932;
            double t8990 = 1.0/(t8989*t8989);
            double t8991 = t8989*t8989;
            double t8992 = EcF_3*c*t8936*t8956*(2.0/9.0);
            double t8993 = t8992+t8966-EcF_3*t8970*t8968*t8969*(1.0/3.6E1);
            double t8994 = t8983*t8983;
            double t8995 = 1.0/(t8981*t8981*t8981);
            double t8996 = EcF_3+t8942;
            double t8997 = EcF_2*4.0;
            double t8998 = EcF_3*2.0;
            double t8999 = t8997+t8998;
            double t9000 = 1.0/(t8996*t8996);
            double t9001 = EcF_4*4.0;
            double t9002 = EcF_3*EcF_3;
            double t9003 = t9001-t9002;
            double t9004 = t9000*t9003;
            double t9005 = t9004+1.0;
            double t9006 = 1.0/t9005;
            double t9007 = t8991*t8983*t8986;
            double t9008 = c*t8931*t8936*t8984*t8989*(1.0/3.0);
            double t9009 = t9007+t9008;
            double t9010 = 1.0/(t8996*t8996*t8996);
            double t9011 = 1.0/(t8996*t8996*t8996*t8996*t8996);
            double t9012 = 1.0/(t9005*t9005);
            double t9013 = t8951*t8953*t8954*t8938;
            double t9014 = c*t8941*t8956*(4.0/9.0);
            double t9016 = c*t8972*t8973*t8929*2.0;
            double t9017 = t9014+t9016-c*t8931*t8940*t8938*(2.0/3.0)-c*t8940*t8971*t8929;
            double t9018 = t8951*t8934*t8954*t9017;
            double t9019 = t8964*t8938*t8965;
            double t9020 = c*t8941*t8956*(1.0/1.8E1);
            double t9021 = t8961*t8972*t8973*2.0;
            double t9022 = t8941*t8970*t8939*t8968*t8969*(1.0/1.8E1);
            double t9023 = c*t8931*t8940*t8936*t8938*t8939*(2.0/3.0);
            double t9024 = t9020+t9021+t9022+t9023-t8940*t8961*t8971-c*t8941*t8936*t8956*t8939*(4.0/9.0);
            double t9025 = c*t8950*t8944*t8936*t8956*t8976*(4.0/9.0);
            double t9026 = 1.0/(t8939*t8939*t8939);
            double t9027 = c*t8931*t8934*t8936*t8964*t9026*(1.0/3.0);
            double t9028 = c*t8947*t8956*t8976*t8978*t8979*(2.0/9.0);
            double t9029 = t9025+t9027+t9019+t9028-t8934*t8965*t9024-c*t8950*t8956*t8976*t8977*(2.0/9.0)-t8950* \
               t8970*t8944*t8976*t8968*t8969*(1.0/1.8E1);
            double t9030 = EcP_2*EcP_3*t8960*t9029;
            double t9031 = EcP_3*c*t8950*t8956*t8977*(4.0/9.0);
            double t9032 = EcP_3*t8950*t8970*t8944*t8968*t8969*(1.0/9.0);
            double t9033 = t9030+t9013+t9031+t9032+t9018-t8951*t8934*t8953*t8988*(1.0/3.0)-EcP_3*c*t8950*t8944* \
               t8936*t8956*(8.0/9.0)-EcP_3*c*t8947*t8956*t8978*t8979*(4.0/9.0);
            double t9034 = EcP_1*t9033;
            double t9035 = pow(2.0,1.0/3.0);
            double t9036 = t9035*2.0;
            double t9037 = t9036-2.0;
            double t9038 = two_13*2.0;
            double t9039 = t9038-2.0;
            double t9040 = 1.0/t9039;
            double t9042 = EcF_2*EcF_2;
            double t9043 = EcF_2*EcF_3;
            double t9044 = EcF_4+t9042+t9043;
            double t9045 = 1.0/t9044;
            double t9046 = t8951*t8934*t8953*t8954;
            double t9047 = t8934*t8964*t8965;
            double t9048 = c*t8931*t8950*t8944*t8936*t8976*(1.0/3.0);
            double t9049 = t9047+t9048;
            double t9050 = EcP_2*EcP_3*t8960*t9049;
            double t9051 = t9050+t9046-EcP_3*c*t8931*t8950*t8944*t8936*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t9051*-2.0+t8928*(t9034-t9040*t9037*(t9034-EcF_1*(t8951*t8954*t8981* \
               (c*t8956*t8984*(4.0/9.0)-c*t8931*t8983*t8986*(2.0/3.0)-c*t8929*t8993*t8986+c*t8929*t8994*t8995*2.0) \
               +t8951*t8954*t8983*t8987-t8951*t8981*t8987*t8988*(1.0/3.0)+EcF_2*EcF_3*t9045*(-t8981*t8990*(c*t8956* \
               t8984*(1.0/1.8E1)-t8991*t8993*t8986+t8991*t8994*t8995*2.0-c*t8936*t8956*t8984*t8989*(4.0/9.0)+t8970* \
               t8984*t8968*t8969*t8989*(1.0/1.8E1)+c*t8931*t8936*t8983*t8986*t8989*(2.0/3.0))+t8990*t8983*t9009-c* \
               t8956*t8999*t9010*t9006*(2.0/9.0)+c*t8936*t8956*t8999*t9000*t9006*(4.0/9.0)+c*t8956*t8999*t9011*t9003* \
               t9012*(2.0/9.0)-t8970*t8968*t8969*t8999*t9000*t9006*(1.0/1.8E1)+c*t8931*t8936*t8981*1.0/(t8989*t8989* \
               t8989)*t9009*(1.0/3.0))+EcF_3*c*t8956*t9010*t9006*(4.0/9.0)-EcF_3*c*t8936*t8956*t9000*t9006*(8.0/9.0) \
               -EcF_3*c*t8956*t9011*t9003*t9012*(4.0/9.0)+EcF_3*t8970*t8968*t8969*t9000*t9006*(1.0/9.0))))+t9040* \
               t9037*(EcP_1*t9051-EcF_1*(t8951*t8954*t8981*t8987+EcF_2*EcF_3*t9045*(t8981*t8990*t9009+c*t8931*t8936* \
               t8999*t9000*t9006*(1.0/3.0))-EcF_3*c*t8931*t8936*t9000*t9006*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t8091 = rho_a[index]+rho_b[index];
            double t8092 = 1.0/pow(t8091,1.0/3.0);
            double t8093 = c*t8092;
            double t8094 = 1.0/pow(t8091,4.0/3.0);
            double t8095 = sqrt(t8093);
            double t8096 = EcP_3*t8095;
            double t8097 = EcP_4+t8093+t8096;
            double t8098 = c*t8094*(1.0/3.0);
            double t8099 = 1.0/sqrt(t8093);
            double t8100 = EcP_3*c*t8094*t8099*(1.0/6.0);
            double t8101 = t8098+t8100;
            double t8102 = EcP_2-t8095;
            double t8103 = 1.0/(t8097*t8097);
            double t8104 = 1.0/t8097;
            double t8105 = t8095*2.0;
            double t8106 = EcP_3+t8105;
            double t8107 = 1.0/(t8106*t8106);
            double t8108 = EcP_4*4.0;
            double t8109 = EcP_3*EcP_3;
            double t8110 = t8108-t8109;
            double t8111 = t8110*t8107;
            double t8112 = t8111+1.0;
            double t8113 = 1.0/t8112;
            double t8114 = 1.0/c;
            double t8115 = c*t8094*t8104*(1.0/3.0);
            double t8118 = c*t8092*t8101*t8103;
            double t8116 = t8115-t8118;
            double t8117 = pow(t8091,1.0/3.0);
            double t8119 = 1.0/pow(t8091,7.0/3.0);
            double t8120 = EcP_2*EcP_2;
            double t8121 = EcP_2*EcP_3;
            double t8122 = EcP_4+t8120+t8121;
            double t8123 = 1.0/t8122;
            double t8124 = t8102*t8102;
            double t8125 = t8101*t8103*t8124;
            double t8126 = c*t8094*t8099*t8102*t8104*(1.0/3.0);
            double t8127 = t8125+t8126;
            double t8128 = 1.0/(t8102*t8102);
            double t8129 = c*t8119*(4.0/9.0);
            double t8130 = EcP_3*c*t8099*t8119*(2.0/9.0);
            double t8131 = c*c;
            double t8132 = 1.0/pow(t8091,8.0/3.0);
            double t8133 = 1.0/pow(t8093,3.0/2.0);
            double t8323 = EcP_3*t8131*t8132*t8133*(1.0/3.6E1);
            double t8134 = t8130+t8129-t8323;
            double t8135 = t8101*t8101;
            double t8136 = 1.0/(t8097*t8097*t8097);
            double t8137 = EcP_2*4.0;
            double t8138 = EcP_3*2.0;
            double t8139 = t8137+t8138;
            double t8140 = 1.0/(t8106*t8106*t8106);
            double t8141 = 1.0/(t8106*t8106*t8106*t8106*t8106);
            double t8142 = 1.0/(t8112*t8112);
            double t8143 = rho_a[index]-rho_b[index];
            double t8144 = t8143*t8143;
            double t8145 = EcF_4*4.0;
            double t8146 = EcF_3*EcF_3;
            double t8147 = t8145-t8146;
            double t8148 = EcF_2-t8095;
            double t8149 = EcF_3*t8095;
            double t8150 = EcF_4+t8093+t8149;
            double t8151 = 1.0/t8150;
            double t8152 = sqrt(t8147);
            double t8153 = EcF_3+t8105;
            double t8154 = 1.0/t8153;
            double t8155 = t8152*t8154;
            double t8156 = atan(t8155);
            double t8157 = 1.0/sqrt(t8147);
            double t8158 = sqrt(t8110);
            double t8159 = 1.0/t8106;
            double t8160 = t8158*t8159;
            double t8161 = atan(t8160);
            double t8162 = 1.0/sqrt(t8110);
            double t8163 = Ac_4*4.0;
            double t8164 = Ac_3*Ac_3;
            double t8165 = t8163-t8164;
            double t8166 = Ac_2-t8095;
            double t8167 = Ac_3*t8095;
            double t8168 = Ac_4+t8093+t8167;
            double t8169 = 1.0/t8168;
            double t8170 = sqrt(t8165);
            double t8171 = Ac_3+t8105;
            double t8172 = 1.0/t8171;
            double t8173 = t8170*t8172;
            double t8174 = atan(t8173);
            double t8175 = 1.0/sqrt(t8165);
            double t8176 = c*t8092*t8169;
            double t8177 = log(t8176);
            double t8178 = Ac_3*t8174*t8175*2.0;
            double t8179 = t8166*t8166;
            double t8180 = t8169*t8179;
            double t8181 = log(t8180);
            double t8182 = Ac_2*4.0;
            double t8183 = Ac_3*2.0;
            double t8184 = t8182+t8183;
            double t8185 = t8174*t8175*t8184;
            double t8186 = t8181+t8185;
            double t8187 = Ac_2*Ac_2;
            double t8188 = Ac_2*Ac_3;
            double t8189 = Ac_4+t8187+t8188;
            double t8190 = 1.0/t8189;
            double t8207 = Ac_2*Ac_3*t8190*t8186;
            double t8191 = t8177+t8178-t8207;
            double t8192 = 1.0/t8091;
            double t8193 = t8143*t8192;
            double t8194 = 1.0/(t8091*t8091*t8091);
            double t8195 = t8193+1.0;
            double t8196 = 1.0/(t8091*t8091);
            double t8197 = t8143*t8196;
            double t8198 = -t8193+1.0;
            double t8199 = t8192+t8197;
            double t8200 = t8192-t8197;
            double t8201 = 1.0/d2fz0;
            double t8202 = two_13*2.0;
            double t8203 = t8202-2.0;
            double t8204 = 1.0/t8203;
            double t8205 = pow(t8195,1.0/3.0);
            double t8206 = pow(t8198,1.0/3.0);
            double t8208 = 1.0/(t8091*t8091*t8091*t8091);
            double t8209 = 1.0/Ac_1;
            double t8210 = EcF_3*c*t8094*t8099*(1.0/6.0);
            double t8211 = t8098+t8210;
            double t8212 = t8148*t8148;
            double t8213 = 1.0/(t8150*t8150);
            double t8214 = EcF_2*4.0;
            double t8215 = EcF_3*2.0;
            double t8216 = t8214+t8215;
            double t8217 = 1.0/(t8153*t8153);
            double t8218 = EcF_2*EcF_2;
            double t8219 = EcF_2*EcF_3;
            double t8220 = EcF_4+t8218+t8219;
            double t8221 = 1.0/t8220;
            double t8222 = t8147*t8217;
            double t8223 = t8222+1.0;
            double t8224 = 1.0/t8223;
            double t8225 = t8097*t8114*t8116*t8117;
            double t8226 = t8097*t8127*t8128;
            double t8227 = c*t8094*t8099*t8113*t8107*t8139*(1.0/3.0);
            double t8228 = t8226+t8227;
            double t8229 = EcP_2*EcP_3*t8123*t8228;
            double t8276 = EcP_3*c*t8094*t8099*t8113*t8107*(2.0/3.0);
            double t8230 = t8225+t8229-t8276;
            double t8231 = 1.0/t8191;
            double t8232 = c*t8092*t8151;
            double t8233 = log(t8232);
            double t8234 = EcF_3*t8156*t8157*2.0;
            double t8235 = t8151*t8212;
            double t8236 = log(t8235);
            double t8237 = t8156*t8157*t8216;
            double t8238 = t8236+t8237;
            double t8258 = EcF_2*EcF_3*t8221*t8238;
            double t8239 = t8233+t8234-t8258;
            double t8240 = EcF_1*t8239;
            double t8241 = c*t8092*t8104;
            double t8242 = log(t8241);
            double t8243 = EcP_3*t8161*t8162*2.0;
            double t8244 = t8104*t8124;
            double t8245 = log(t8244);
            double t8246 = t8161*t8162*t8139;
            double t8247 = t8245+t8246;
            double t8259 = EcP_2*EcP_3*t8123*t8247;
            double t8248 = t8242+t8243-t8259;
            double t8260 = EcP_1*t8248;
            double t8249 = t8240-t8260;
            double t8250 = Ac_3*c*t8094*t8099*(1.0/6.0);
            double t8251 = t8098+t8250;
            double t8252 = 1.0/(t8168*t8168);
            double t8253 = 1.0/(t8171*t8171);
            double t8254 = t8165*t8253;
            double t8255 = t8254+1.0;
            double t8256 = 1.0/t8255;
            double t8257 = t8144*t8144;
            double t8261 = d2fz0*t8231*t8209*t8249;
            double t8262 = t8261-1.0;
            double t8263 = c*t8094*t8151*(1.0/3.0);
            double t8304 = c*t8092*t8211*t8213;
            double t8264 = t8263-t8304;
            double t8265 = t8114*t8150*t8117*t8264;
            double t8266 = t8211*t8212*t8213;
            double t8267 = c*t8094*t8099*t8151*t8148*(1.0/3.0);
            double t8268 = t8266+t8267;
            double t8269 = 1.0/(t8148*t8148);
            double t8270 = t8150*t8268*t8269;
            double t8271 = c*t8094*t8099*t8224*t8216*t8217*(1.0/3.0);
            double t8272 = t8270+t8271;
            double t8273 = EcF_2*EcF_3*t8221*t8272;
            double t8305 = EcF_3*c*t8094*t8099*t8224*t8217*(2.0/3.0);
            double t8274 = t8273+t8265-t8305;
            double t8275 = EcF_1*t8274;
            double t8306 = EcP_1*t8230;
            double t8277 = t8275-t8306;
            double t8278 = d2fz0*t8231*t8209*t8277;
            double t8279 = 1.0/(t8191*t8191);
            double t8280 = c*t8094*t8169*(1.0/3.0);
            double t8300 = c*t8092*t8251*t8252;
            double t8281 = t8280-t8300;
            double t8282 = t8114*t8117*t8168*t8281;
            double t8283 = t8179*t8251*t8252;
            double t8284 = c*t8094*t8099*t8166*t8169*(1.0/3.0);
            double t8285 = t8283+t8284;
            double t8286 = 1.0/(t8166*t8166);
            double t8287 = t8168*t8285*t8286;
            double t8288 = c*t8094*t8099*t8184*t8253*t8256*(1.0/3.0);
            double t8289 = t8287+t8288;
            double t8290 = Ac_2*Ac_3*t8190*t8289;
            double t8301 = Ac_3*c*t8094*t8099*t8253*t8256*(2.0/3.0);
            double t8291 = t8290+t8282-t8301;
            double t8307 = d2fz0*t8209*t8291*t8249*t8279;
            double t8292 = t8278-t8307;
            double t8293 = t8208*t8292*t8257;
            double t8294 = 1.0/(t8091*t8091*t8091*t8091*t8091);
            double t8295 = t8262*t8257*t8294*4.0;
            double t8296 = t8199*t8205*(4.0/3.0);
            double t8372 = t8199*t8206*(4.0/3.0);
            double t8297 = t8296-t8372;
            double t8298 = t8208*t8262*t8257;
            double t8299 = t8298+1.0;
            double t8302 = t8200*t8205*(4.0/3.0);
            double t8373 = t8200*t8206*(4.0/3.0);
            double t8303 = t8302-t8373;
            double t8308 = t8143*t8144*t8208*t8262*4.0;
            double t8309 = pow(t8195,4.0/3.0);
            double t8310 = pow(t8198,4.0/3.0);
            double t8311 = t8310+t8309-2.0;
            double t8312 = t8293+t8295+t8308;
            double t8313 = 1.0/pow(t8091,2.0/3.0);
            double t8314 = EcF_3*c*t8099*t8119*(2.0/9.0);
            double t8315 = t8129+t8314-EcF_3*t8131*t8132*t8133*(1.0/3.6E1);
            double t8316 = t8211*t8211;
            double t8317 = 1.0/(t8150*t8150*t8150);
            double t8318 = 1.0/(t8153*t8153*t8153);
            double t8319 = 1.0/(t8153*t8153*t8153*t8153*t8153);
            double t8320 = 1.0/(t8223*t8223);
            double t8321 = t8101*t8114*t8116*t8117;
            double t8322 = c*t8104*t8119*(4.0/9.0);
            double t8324 = c*t8092*t8135*t8136*2.0;
            double t8325 = t8322+t8324-c*t8094*t8101*t8103*(2.0/3.0)-c*t8092*t8103*t8134;
            double t8326 = t8097*t8114*t8117*t8325;
            double t8327 = t8101*t8127*t8128;
            double t8328 = c*t8104*t8119*(1.0/1.8E1);
            double t8329 = t8124*t8135*t8136*2.0;
            double t8330 = t8102*t8104*t8131*t8132*t8133*(1.0/1.8E1);
            double t8331 = c*t8094*t8099*t8101*t8102*t8103*(2.0/3.0);
            double t8332 = t8330+t8331+t8328+t8329-t8103*t8124*t8134-c*t8099*t8102*t8104*t8119*(4.0/9.0);
            double t8333 = c*t8099*t8113*t8107*t8119*t8139*(4.0/9.0);
            double t8334 = 1.0/(t8102*t8102*t8102);
            double t8335 = c*t8094*t8097*t8099*t8127*t8334*(1.0/3.0);
            double t8336 = c*t8110*t8141*t8142*t8119*t8139*(2.0/9.0);
            double t8337 = t8333+t8335+t8327+t8336-t8097*t8128*t8332-c*t8113*t8140*t8119*t8139*(2.0/9.0)-t8113* \
               t8131*t8132*t8133*t8107*t8139*(1.0/1.8E1);
            double t8338 = EcP_2*EcP_3*t8123*t8337;
            double t8339 = EcP_3*c*t8113*t8140*t8119*(4.0/9.0);
            double t8340 = EcP_3*t8113*t8131*t8132*t8133*t8107*(1.0/9.0);
            double t8341 = t8321+t8340+t8326+t8338+t8339-t8097*t8114*t8116*t8313*(1.0/3.0)-EcP_3*c*t8099*t8113* \
               t8107*t8119*(8.0/9.0)-EcP_3*c*t8110*t8141*t8142*t8119*(4.0/9.0);
            double t8342 = EcP_1*t8341;
            double t8343 = Ac_3*c*t8099*t8119*(2.0/9.0);
            double t8351 = Ac_3*t8131*t8132*t8133*(1.0/3.6E1);
            double t8344 = t8129-t8351+t8343;
            double t8345 = t8251*t8251;
            double t8346 = 1.0/(t8168*t8168*t8168);
            double t8347 = 1.0/(t8171*t8171*t8171);
            double t8348 = 1.0/(t8171*t8171*t8171*t8171*t8171);
            double t8349 = 1.0/(t8255*t8255);
            double t8350 = c*t8119*t8169*(4.0/9.0);
            double t8352 = c*t8092*t8345*t8346*2.0;
            double t8353 = t8350+t8352-c*t8094*t8251*t8252*(2.0/3.0)-c*t8092*t8252*t8344;
            double t8354 = t8114*t8117*t8168*t8353;
            double t8355 = t8251*t8285*t8286;
            double t8356 = c*t8119*t8169*(1.0/1.8E1);
            double t8357 = t8179*t8345*t8346*2.0;
            double t8358 = t8131*t8132*t8133*t8166*t8169*(1.0/1.8E1);
            double t8359 = c*t8094*t8099*t8166*t8251*t8252*(2.0/3.0);
            double t8360 = t8356+t8357+t8358+t8359-t8179*t8252*t8344-c*t8099*t8119*t8166*t8169*(4.0/9.0);
            double t8361 = c*t8099*t8119*t8184*t8253*t8256*(4.0/9.0);
            double t8362 = 1.0/(t8166*t8166*t8166);
            double t8363 = c*t8094*t8099*t8168*t8285*t8362*(1.0/3.0);
            double t8364 = c*t8119*t8165*t8184*t8348*t8349*(2.0/9.0);
            double t8365 = t8361+t8363+t8355+t8364-t8168*t8286*t8360-c*t8119*t8184*t8256*t8347*(2.0/9.0)-t8131* \
               t8132*t8133*t8184*t8253*t8256*(1.0/1.8E1);
            double t8366 = Ac_2*Ac_3*t8190*t8365;
            double t8367 = t8114*t8117*t8251*t8281;
            double t8368 = Ac_3*c*t8119*t8256*t8347*(4.0/9.0);
            double t8369 = Ac_3*t8131*t8132*t8133*t8253*t8256*(1.0/9.0);
            double t8370 = t8354+t8366+t8367+t8368+t8369-t8114*t8168*t8281*t8313*(1.0/3.0)-Ac_3*c*t8099*t8119* \
               t8253*t8256*(8.0/9.0)-Ac_3*c*t8119*t8165*t8348*t8349*(4.0/9.0);
            double t8371 = t8293+t8295-t8308;
            v_rho_a_rho_b_[index] = EcP_1*t8230*-2.0+t8091*(t8342+Ac_1*t8191*t8201*t8204*t8311*(1.0/(t8091*t8091* \
               t8091*t8091*t8091*t8091)*t8262*t8257*2.0E1-t8144*t8208*t8262*1.2E1+t8292*t8257*t8294*8.0-t8208*t8257* \
               (d2fz0*t8231*t8209*(t8342-EcF_1*(t8114*t8150*t8117*(c*t8151*t8119*(4.0/9.0)-c*t8094*t8211*t8213*(2.0/ \
               3.0)-c*t8092*t8213*t8315+c*t8092*t8316*t8317*2.0)+t8114*t8117*t8211*t8264-t8114*t8150*t8264*t8313* \
               (1.0/3.0)+EcF_2*EcF_3*t8221*(-t8150*t8269*(c*t8151*t8119*(1.0/1.8E1)-t8212*t8213*t8315+t8212*t8316* \
               t8317*2.0-c*t8099*t8151*t8119*t8148*(4.0/9.0)+t8131*t8132*t8133*t8151*t8148*(1.0/1.8E1)+c*t8094*t8099* \
               t8148*t8211*t8213*(2.0/3.0))+t8211*t8268*t8269-c*t8119*t8224*t8216*t8318*(2.0/9.0)+c*t8099*t8119*t8224* \
               t8216*t8217*(4.0/9.0)+c*t8119*t8147*t8216*t8320*t8319*(2.0/9.0)-t8131*t8132*t8133*t8224*t8216*t8217* \
               (1.0/1.8E1)+c*t8094*t8099*t8150*1.0/(t8148*t8148*t8148)*t8268*(1.0/3.0))+EcF_3*c*t8119*t8224*t8318* \
               (4.0/9.0)-EcF_3*c*t8099*t8119*t8224*t8217*(8.0/9.0)-EcF_3*c*t8119*t8147*t8320*t8319*(4.0/9.0)+EcF_3* \
               t8131*t8132*t8133*t8224*t8217*(1.0/9.0)))-d2fz0*1.0/(t8191*t8191*t8191)*t8209*(t8291*t8291)*t8249* \
               2.0+d2fz0*t8209*t8291*t8277*t8279*2.0+d2fz0*t8209*t8249*t8279*t8370))-Ac_1*t8191*t8201*t8204*t8299* \
               (1.0/pow(t8195,2.0/3.0)*t8199*t8200*(4.0/9.0)+1.0/pow(t8198,2.0/3.0)*t8199*t8200*(4.0/9.0)-t8143*t8194* \
               t8205*(8.0/3.0)+t8143*t8194*t8206*(8.0/3.0))+Ac_1*t8201*t8204*t8291*t8297*t8299-Ac_1*t8191*t8201*t8204* \
               t8303*t8312-Ac_1*t8201*t8204*t8291*t8299*t8303+Ac_1*t8201*t8204*t8291*t8311*t8312+Ac_1*t8201*t8204* \
               t8291*t8311*t8371+Ac_1*t8201*t8204*t8299*t8311*t8370+Ac_1*t8191*t8201*t8204*t8297*(t8293+t8295-t8143* \
               t8144*t8208*t8262*4.0))-Ac_1*t8191*t8201*t8204*t8297*t8299+Ac_1*t8191*t8201*t8204*t8299*t8303-Ac_1* \
               t8191*t8201*t8204*t8311*t8312-Ac_1*t8191*t8201*t8204*t8311*t8371-Ac_1*t8201*t8204*t8291*t8299*t8311* \
               2.0;
        } else if (rho_a[index] > cutoff_) {
            double t9698 = rho_a[index]+rho_b[index];
            double t9699 = 1.0/pow(t9698,1.0/3.0);
            double t9700 = c*t9699;
            double t9701 = 1.0/pow(t9698,4.0/3.0);
            double t9702 = sqrt(t9700);
            double t9703 = EcP_3*t9702;
            double t9704 = EcP_4+t9700+t9703;
            double t9705 = c*t9701*(1.0/3.0);
            double t9706 = 1.0/sqrt(t9700);
            double t9707 = EcP_3*c*t9701*t9706*(1.0/6.0);
            double t9708 = t9705+t9707;
            double t9709 = EcP_2-t9702;
            double t9710 = 1.0/(t9704*t9704);
            double t9711 = 1.0/t9704;
            double t9712 = t9702*2.0;
            double t9713 = EcP_3+t9712;
            double t9714 = 1.0/(t9713*t9713);
            double t9715 = EcP_4*4.0;
            double t9716 = EcP_3*EcP_3;
            double t9717 = t9715-t9716;
            double t9718 = t9714*t9717;
            double t9719 = t9718+1.0;
            double t9720 = 1.0/t9719;
            double t9721 = 1.0/c;
            double t9722 = c*t9701*t9711*(1.0/3.0);
            double t9725 = c*t9699*t9710*t9708;
            double t9723 = t9722-t9725;
            double t9724 = pow(t9698,1.0/3.0);
            double t9726 = 1.0/pow(t9698,7.0/3.0);
            double t9727 = EcP_2*EcP_2;
            double t9728 = EcP_2*EcP_3;
            double t9729 = EcP_4+t9727+t9728;
            double t9730 = 1.0/t9729;
            double t9731 = t9709*t9709;
            double t9732 = t9710*t9731*t9708;
            double t9733 = c*t9701*t9711*t9706*t9709*(1.0/3.0);
            double t9734 = t9732+t9733;
            double t9735 = 1.0/(t9709*t9709);
            double t9736 = c*t9726*(4.0/9.0);
            double t9737 = EcP_3*c*t9706*t9726*(2.0/9.0);
            double t9738 = c*c;
            double t9739 = 1.0/pow(t9698,8.0/3.0);
            double t9740 = 1.0/pow(t9700,3.0/2.0);
            double t9785 = EcP_3*t9740*t9738*t9739*(1.0/3.6E1);
            double t9741 = t9736+t9737-t9785;
            double t9742 = t9708*t9708;
            double t9743 = 1.0/(t9704*t9704*t9704);
            double t9744 = EcP_2*4.0;
            double t9745 = EcP_3*2.0;
            double t9746 = t9744+t9745;
            double t9747 = 1.0/(t9713*t9713*t9713);
            double t9748 = 1.0/(t9713*t9713*t9713*t9713*t9713);
            double t9749 = 1.0/(t9719*t9719);
            double t9750 = EcF_3*t9702;
            double t9751 = EcF_4+t9700+t9750;
            double t9752 = EcF_3*c*t9701*t9706*(1.0/6.0);
            double t9753 = t9705+t9752;
            double t9754 = 1.0/t9751;
            double t9755 = c*t9701*t9754*(1.0/3.0);
            double t9756 = 1.0/(t9751*t9751);
            double t9811 = c*t9699*t9753*t9756;
            double t9757 = t9755-t9811;
            double t9758 = 1.0/pow(t9698,2.0/3.0);
            double t9759 = EcF_2-t9702;
            double t9760 = 1.0/(t9759*t9759);
            double t9761 = t9759*t9759;
            double t9762 = EcF_3*c*t9706*t9726*(2.0/9.0);
            double t9763 = t9762+t9736-EcF_3*t9740*t9738*t9739*(1.0/3.6E1);
            double t9764 = t9753*t9753;
            double t9765 = 1.0/(t9751*t9751*t9751);
            double t9766 = EcF_3+t9712;
            double t9767 = EcF_2*4.0;
            double t9768 = EcF_3*2.0;
            double t9769 = t9767+t9768;
            double t9770 = 1.0/(t9766*t9766);
            double t9771 = EcF_4*4.0;
            double t9772 = EcF_3*EcF_3;
            double t9773 = t9771-t9772;
            double t9774 = t9770*t9773;
            double t9775 = t9774+1.0;
            double t9776 = 1.0/t9775;
            double t9777 = t9761*t9753*t9756;
            double t9778 = c*t9701*t9706*t9754*t9759*(1.0/3.0);
            double t9779 = t9777+t9778;
            double t9780 = 1.0/(t9766*t9766*t9766);
            double t9781 = 1.0/(t9766*t9766*t9766*t9766*t9766);
            double t9782 = 1.0/(t9775*t9775);
            double t9783 = t9721*t9723*t9724*t9708;
            double t9784 = c*t9711*t9726*(4.0/9.0);
            double t9786 = c*t9699*t9742*t9743*2.0;
            double t9787 = t9784+t9786-c*t9699*t9710*t9741-c*t9701*t9710*t9708*(2.0/3.0);
            double t9788 = t9721*t9704*t9724*t9787;
            double t9789 = t9734*t9708*t9735;
            double t9790 = c*t9711*t9726*(1.0/1.8E1);
            double t9791 = t9731*t9742*t9743*2.0;
            double t9792 = t9711*t9740*t9709*t9738*t9739*(1.0/1.8E1);
            double t9793 = c*t9701*t9710*t9706*t9708*t9709*(2.0/3.0);
            double t9794 = t9790+t9791+t9792+t9793-t9710*t9731*t9741-c*t9711*t9706*t9726*t9709*(4.0/9.0);
            double t9795 = c*t9720*t9714*t9706*t9726*t9746*(4.0/9.0);
            double t9796 = 1.0/(t9709*t9709*t9709);
            double t9797 = c*t9701*t9704*t9706*t9734*t9796*(1.0/3.0);
            double t9798 = c*t9717*t9726*t9746*t9748*t9749*(2.0/9.0);
            double t9799 = t9795+t9797+t9789+t9798-t9704*t9735*t9794-c*t9720*t9726*t9746*t9747*(2.0/9.0)-t9720* \
               t9740*t9714*t9746*t9738*t9739*(1.0/1.8E1);
            double t9800 = EcP_2*EcP_3*t9730*t9799;
            double t9801 = EcP_3*c*t9720*t9726*t9747*(4.0/9.0);
            double t9802 = EcP_3*t9720*t9740*t9714*t9738*t9739*(1.0/9.0);
            double t9803 = t9783+t9788+t9800+t9801+t9802-t9721*t9704*t9723*t9758*(1.0/3.0)-EcP_3*c*t9720*t9714* \
               t9706*t9726*(8.0/9.0)-EcP_3*c*t9717*t9726*t9748*t9749*(4.0/9.0);
            double t9804 = EcP_1*t9803;
            double t9805 = pow(2.0,1.0/3.0);
            double t9806 = t9805*2.0;
            double t9807 = t9806-2.0;
            double t9808 = two_13*2.0;
            double t9809 = t9808-2.0;
            double t9810 = 1.0/t9809;
            double t9812 = EcF_2*EcF_2;
            double t9813 = EcF_2*EcF_3;
            double t9814 = EcF_4+t9812+t9813;
            double t9815 = 1.0/t9814;
            double t9816 = t9721*t9704*t9723*t9724;
            double t9817 = t9704*t9734*t9735;
            double t9818 = c*t9701*t9720*t9714*t9706*t9746*(1.0/3.0);
            double t9819 = t9817+t9818;
            double t9820 = EcP_2*EcP_3*t9730*t9819;
            double t9821 = t9820+t9816-EcP_3*c*t9701*t9720*t9714*t9706*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t9821*-2.0+t9698*(t9804-t9810*t9807*(t9804-EcF_1*(t9721*t9724*t9751* \
               (c*t9726*t9754*(4.0/9.0)-c*t9699*t9763*t9756+c*t9699*t9764*t9765*2.0-c*t9701*t9753*t9756*(2.0/3.0) \
               )+t9721*t9724*t9753*t9757-t9721*t9751*t9757*t9758*(1.0/3.0)+EcF_2*EcF_3*t9815*(-t9751*t9760*(c*t9726* \
               t9754*(1.0/1.8E1)-t9761*t9763*t9756+t9761*t9764*t9765*2.0-c*t9706*t9726*t9754*t9759*(4.0/9.0)+t9740* \
               t9754*t9738*t9739*t9759*(1.0/1.8E1)+c*t9701*t9706*t9753*t9756*t9759*(2.0/3.0))+t9760*t9753*t9779-c* \
               t9726*t9780*t9776*t9769*(2.0/9.0)+c*t9706*t9770*t9726*t9776*t9769*(4.0/9.0)+c*t9726*t9781*t9773*t9782* \
               t9769*(2.0/9.0)-t9740*t9770*t9738*t9739*t9776*t9769*(1.0/1.8E1)+c*t9701*t9706*t9751*1.0/(t9759*t9759* \
               t9759)*t9779*(1.0/3.0))+EcF_3*c*t9726*t9780*t9776*(4.0/9.0)-EcF_3*c*t9706*t9770*t9726*t9776*(8.0/9.0) \
               -EcF_3*c*t9726*t9781*t9773*t9782*(4.0/9.0)+EcF_3*t9740*t9770*t9738*t9739*t9776*(1.0/9.0))))+t9810* \
               t9807*(EcP_1*t9821-EcF_1*(t9721*t9724*t9751*t9757+EcF_2*EcF_3*t9815*(t9751*t9760*t9779+c*t9701*t9706* \
               t9770*t9776*t9769*(1.0/3.0))-EcF_3*c*t9701*t9706*t9770*t9776*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t9053 = rho_a[index]+rho_b[index];
            double t9054 = 1.0/pow(t9053,1.0/3.0);
            double t9055 = c*t9054;
            double t9056 = 1.0/pow(t9053,4.0/3.0);
            double t9057 = sqrt(t9055);
            double t9058 = EcP_3*t9057;
            double t9059 = EcP_4+t9055+t9058;
            double t9060 = c*t9056*(1.0/3.0);
            double t9061 = 1.0/sqrt(t9055);
            double t9062 = EcP_3*c*t9061*t9056*(1.0/6.0);
            double t9063 = t9060+t9062;
            double t9064 = EcP_2-t9057;
            double t9065 = 1.0/(t9059*t9059);
            double t9066 = 1.0/t9059;
            double t9067 = t9057*2.0;
            double t9068 = EcP_3+t9067;
            double t9069 = 1.0/(t9068*t9068);
            double t9070 = EcP_4*4.0;
            double t9071 = EcP_3*EcP_3;
            double t9072 = t9070-t9071;
            double t9073 = t9072*t9069;
            double t9074 = t9073+1.0;
            double t9075 = 1.0/t9074;
            double t9076 = 1.0/c;
            double t9077 = c*t9056*t9066*(1.0/3.0);
            double t9080 = c*t9054*t9063*t9065;
            double t9078 = -t9080+t9077;
            double t9079 = pow(t9053,1.0/3.0);
            double t9081 = 1.0/pow(t9053,7.0/3.0);
            double t9082 = EcP_2*EcP_2;
            double t9083 = EcP_2*EcP_3;
            double t9084 = EcP_4+t9082+t9083;
            double t9085 = 1.0/t9084;
            double t9086 = t9064*t9064;
            double t9087 = t9063*t9065*t9086;
            double t9088 = c*t9061*t9064*t9056*t9066*(1.0/3.0);
            double t9089 = t9087+t9088;
            double t9090 = 1.0/(t9064*t9064);
            double t9091 = c*t9081*(4.0/9.0);
            double t9092 = EcP_3*c*t9061*t9081*(2.0/9.0);
            double t9093 = c*c;
            double t9094 = 1.0/pow(t9053,8.0/3.0);
            double t9095 = 1.0/pow(t9055,3.0/2.0);
            double t9140 = EcP_3*t9093*t9094*t9095*(1.0/3.6E1);
            double t9096 = t9091+t9092-t9140;
            double t9097 = t9063*t9063;
            double t9098 = 1.0/(t9059*t9059*t9059);
            double t9099 = EcP_2*4.0;
            double t9100 = EcP_3*2.0;
            double t9101 = t9099+t9100;
            double t9102 = 1.0/(t9068*t9068*t9068);
            double t9103 = 1.0/(t9068*t9068*t9068*t9068*t9068);
            double t9104 = 1.0/(t9074*t9074);
            double t9105 = EcF_3*t9057;
            double t9106 = EcF_4+t9055+t9105;
            double t9107 = EcF_3*c*t9061*t9056*(1.0/6.0);
            double t9108 = t9060+t9107;
            double t9109 = 1.0/t9106;
            double t9110 = c*t9056*t9109*(1.0/3.0);
            double t9111 = 1.0/(t9106*t9106);
            double t9166 = c*t9054*t9111*t9108;
            double t9112 = t9110-t9166;
            double t9113 = 1.0/pow(t9053,2.0/3.0);
            double t9114 = EcF_2-t9057;
            double t9115 = 1.0/(t9114*t9114);
            double t9116 = t9114*t9114;
            double t9117 = EcF_3*c*t9061*t9081*(2.0/9.0);
            double t9118 = t9091+t9117-EcF_3*t9093*t9094*t9095*(1.0/3.6E1);
            double t9119 = t9108*t9108;
            double t9120 = 1.0/(t9106*t9106*t9106);
            double t9121 = EcF_3+t9067;
            double t9122 = EcF_2*4.0;
            double t9123 = EcF_3*2.0;
            double t9124 = t9122+t9123;
            double t9125 = 1.0/(t9121*t9121);
            double t9126 = EcF_4*4.0;
            double t9127 = EcF_3*EcF_3;
            double t9128 = t9126-t9127;
            double t9129 = t9125*t9128;
            double t9130 = t9129+1.0;
            double t9131 = 1.0/t9130;
            double t9132 = t9111*t9116*t9108;
            double t9133 = c*t9061*t9056*t9114*t9109*(1.0/3.0);
            double t9134 = t9132+t9133;
            double t9135 = 1.0/(t9121*t9121*t9121);
            double t9136 = 1.0/(t9121*t9121*t9121*t9121*t9121);
            double t9137 = 1.0/(t9130*t9130);
            double t9138 = t9063*t9076*t9078*t9079;
            double t9139 = c*t9081*t9066*(4.0/9.0);
            double t9141 = c*t9054*t9097*t9098*2.0;
            double t9142 = t9141+t9139-c*t9063*t9056*t9065*(2.0/3.0)-c*t9054*t9065*t9096;
            double t9143 = t9076*t9059*t9079*t9142;
            double t9144 = t9063*t9090*t9089;
            double t9145 = c*t9081*t9066*(1.0/1.8E1);
            double t9146 = t9086*t9097*t9098*2.0;
            double t9147 = t9064*t9066*t9093*t9094*t9095*(1.0/1.8E1);
            double t9148 = c*t9061*t9063*t9064*t9056*t9065*(2.0/3.0);
            double t9149 = t9145+t9146+t9147+t9148-t9065*t9086*t9096-c*t9061*t9081*t9064*t9066*(4.0/9.0);
            double t9150 = c*t9061*t9081*t9075*t9069*t9101*(4.0/9.0);
            double t9151 = 1.0/(t9064*t9064*t9064);
            double t9152 = c*t9061*t9056*t9059*t9089*t9151*(1.0/3.0);
            double t9153 = c*t9072*t9081*t9101*t9103*t9104*(2.0/9.0);
            double t9154 = t9150+t9152+t9144+t9153-t9090*t9059*t9149-c*t9081*t9075*t9101*t9102*(2.0/9.0)-t9075* \
               t9093*t9094*t9095*t9069*t9101*(1.0/1.8E1);
            double t9155 = EcP_2*EcP_3*t9085*t9154;
            double t9156 = EcP_3*c*t9081*t9075*t9102*(4.0/9.0);
            double t9157 = EcP_3*t9075*t9093*t9094*t9095*t9069*(1.0/9.0);
            double t9158 = t9143+t9155+t9138+t9156+t9157-t9076*t9059*t9078*t9113*(1.0/3.0)-EcP_3*c*t9061*t9081* \
               t9075*t9069*(8.0/9.0)-EcP_3*c*t9072*t9081*t9103*t9104*(4.0/9.0);
            double t9159 = EcP_1*t9158;
            double t9160 = pow(2.0,1.0/3.0);
            double t9161 = t9160*2.0;
            double t9162 = t9161-2.0;
            double t9163 = two_13*2.0;
            double t9164 = t9163-2.0;
            double t9165 = 1.0/t9164;
            double t9167 = EcF_2*EcF_2;
            double t9168 = EcF_2*EcF_3;
            double t9169 = EcF_4+t9167+t9168;
            double t9170 = 1.0/t9169;
            double t9171 = t9076*t9059*t9078*t9079;
            double t9172 = t9090*t9059*t9089;
            double t9173 = c*t9061*t9056*t9075*t9069*t9101*(1.0/3.0);
            double t9174 = t9172+t9173;
            double t9175 = EcP_2*EcP_3*t9085*t9174;
            double t9176 = t9171+t9175-EcP_3*c*t9061*t9056*t9075*t9069*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t9176*-2.0+t9053*(t9159-t9162*t9165*(t9159-EcF_1*(t9076*t9079*t9106* \
               (c*t9081*t9109*(4.0/9.0)-c*t9054*t9111*t9118+c*t9054*t9120*t9119*2.0-c*t9056*t9111*t9108*(2.0/3.0) \
               )+t9076*t9079*t9112*t9108-t9076*t9112*t9113*t9106*(1.0/3.0)+EcF_2*EcF_3*t9170*(-t9106*t9115*(c*t9081* \
               t9109*(1.0/1.8E1)-t9111*t9116*t9118+t9120*t9116*t9119*2.0-c*t9061*t9081*t9114*t9109*(4.0/9.0)+t9093* \
               t9094*t9095*t9114*t9109*(1.0/1.8E1)+c*t9061*t9056*t9111*t9114*t9108*(2.0/3.0))+t9115*t9134*t9108-c* \
               t9081*t9131*t9124*t9135*(2.0/9.0)+c*t9061*t9081*t9131*t9124*t9125*(4.0/9.0)+c*t9081*t9124*t9136*t9128* \
               t9137*(2.0/9.0)-t9093*t9094*t9095*t9131*t9124*t9125*(1.0/1.8E1)+c*t9061*t9056*1.0/(t9114*t9114*t9114) \
               *t9106*t9134*(1.0/3.0))+EcF_3*c*t9081*t9131*t9135*(4.0/9.0)-EcF_3*c*t9061*t9081*t9131*t9125*(8.0/9.0) \
               -EcF_3*c*t9081*t9136*t9128*t9137*(4.0/9.0)+EcF_3*t9093*t9094*t9095*t9131*t9125*(1.0/9.0))))+t9162* \
               t9165*(EcP_1*t9176-EcF_1*(t9076*t9079*t9112*t9106+EcF_2*EcF_3*t9170*(t9106*t9115*t9134+c*t9061*t9056* \
               t9131*t9124*t9125*(1.0/3.0))-EcF_3*c*t9061*t9056*t9131*t9125*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t8375 = rho_a[index]+rho_b[index];
            double t8376 = 1.0/pow(t8375,1.0/3.0);
            double t8377 = c*t8376;
            double t8378 = 1.0/pow(t8375,4.0/3.0);
            double t8379 = sqrt(t8377);
            double t8380 = EcP_3*t8379;
            double t8381 = EcP_4+t8380+t8377;
            double t8382 = c*t8378*(1.0/3.0);
            double t8383 = 1.0/sqrt(t8377);
            double t8384 = EcP_3*c*t8383*t8378*(1.0/6.0);
            double t8385 = t8382+t8384;
            double t8386 = 1.0/c;
            double t8387 = 1.0/t8381;
            double t8388 = c*t8378*t8387*(1.0/3.0);
            double t8389 = 1.0/(t8381*t8381);
            double t8524 = c*t8376*t8385*t8389;
            double t8390 = t8388-t8524;
            double t8391 = pow(t8375,1.0/3.0);
            double t8392 = 1.0/pow(t8375,7.0/3.0);
            double t8393 = EcP_2-t8379;
            double t8394 = 1.0/(t8393*t8393);
            double t8395 = t8393*t8393;
            double t8396 = c*t8392*(4.0/9.0);
            double t8397 = EcP_3*c*t8383*t8392*(2.0/9.0);
            double t8398 = c*c;
            double t8399 = 1.0/pow(t8375,8.0/3.0);
            double t8400 = 1.0/pow(t8377,3.0/2.0);
            double t8527 = EcP_3*t8398*t8399*t8400*(1.0/3.6E1);
            double t8401 = t8396+t8397-t8527;
            double t8402 = t8385*t8385;
            double t8403 = 1.0/(t8381*t8381*t8381);
            double t8404 = t8379*2.0;
            double t8405 = EcP_3+t8404;
            double t8406 = EcP_2*4.0;
            double t8407 = EcP_3*2.0;
            double t8408 = t8406+t8407;
            double t8409 = 1.0/(t8405*t8405);
            double t8410 = EcP_4*4.0;
            double t8411 = EcP_3*EcP_3;
            double t8412 = t8410-t8411;
            double t8413 = t8412*t8409;
            double t8414 = t8413+1.0;
            double t8415 = 1.0/t8414;
            double t8416 = t8385*t8395*t8389;
            double t8417 = c*t8383*t8393*t8378*t8387*(1.0/3.0);
            double t8418 = t8416+t8417;
            double t8419 = 1.0/(t8405*t8405*t8405);
            double t8420 = 1.0/(t8405*t8405*t8405*t8405*t8405);
            double t8421 = 1.0/(t8414*t8414);
            double t8422 = rho_a[index]-rho_b[index];
            double t8423 = t8422*t8422;
            double t8424 = EcF_4*4.0;
            double t8425 = EcF_3*EcF_3;
            double t8426 = t8424-t8425;
            double t8427 = EcF_2-t8379;
            double t8428 = EcF_3*t8379;
            double t8429 = EcF_4+t8377+t8428;
            double t8430 = 1.0/t8429;
            double t8431 = sqrt(t8426);
            double t8432 = EcF_3+t8404;
            double t8433 = 1.0/t8432;
            double t8434 = t8431*t8433;
            double t8435 = atan(t8434);
            double t8436 = 1.0/sqrt(t8426);
            double t8437 = sqrt(t8412);
            double t8438 = 1.0/t8405;
            double t8439 = t8437*t8438;
            double t8440 = atan(t8439);
            double t8441 = 1.0/sqrt(t8412);
            double t8442 = EcP_2*EcP_2;
            double t8443 = EcP_2*EcP_3;
            double t8444 = EcP_4+t8442+t8443;
            double t8445 = 1.0/t8444;
            double t8446 = Ac_4*4.0;
            double t8447 = Ac_3*Ac_3;
            double t8448 = t8446-t8447;
            double t8449 = Ac_2-t8379;
            double t8450 = Ac_3*t8379;
            double t8451 = Ac_4+t8377+t8450;
            double t8452 = 1.0/t8451;
            double t8453 = sqrt(t8448);
            double t8454 = Ac_3+t8404;
            double t8455 = 1.0/t8454;
            double t8456 = t8453*t8455;
            double t8457 = atan(t8456);
            double t8458 = 1.0/sqrt(t8448);
            double t8459 = c*t8376*t8452;
            double t8460 = log(t8459);
            double t8461 = Ac_3*t8457*t8458*2.0;
            double t8462 = t8449*t8449;
            double t8463 = t8452*t8462;
            double t8464 = log(t8463);
            double t8465 = Ac_2*4.0;
            double t8466 = Ac_3*2.0;
            double t8467 = t8465+t8466;
            double t8468 = t8457*t8458*t8467;
            double t8469 = t8464+t8468;
            double t8470 = Ac_2*Ac_2;
            double t8471 = Ac_2*Ac_3;
            double t8472 = Ac_4+t8470+t8471;
            double t8473 = 1.0/t8472;
            double t8491 = Ac_2*Ac_3*t8473*t8469;
            double t8474 = t8460+t8461-t8491;
            double t8475 = 1.0/t8375;
            double t8476 = t8422*t8475;
            double t8477 = 1.0/(t8375*t8375);
            double t8478 = t8477*2.0;
            double t8479 = 1.0/(t8375*t8375*t8375);
            double t8480 = t8422*t8479*2.0;
            double t8481 = t8480+t8478;
            double t8482 = t8476+1.0;
            double t8485 = t8422*t8477;
            double t8483 = t8475+t8485;
            double t8484 = -t8476+1.0;
            double t8486 = t8483*t8483;
            double t8487 = 1.0/d2fz0;
            double t8488 = two_13*2.0;
            double t8489 = t8488-2.0;
            double t8490 = 1.0/t8489;
            double t8492 = 1.0/(t8375*t8375*t8375*t8375);
            double t8493 = t8423*t8423;
            double t8494 = 1.0/Ac_1;
            double t8495 = EcF_3*c*t8383*t8378*(1.0/6.0);
            double t8496 = t8382+t8495;
            double t8497 = c*t8378*t8430*(1.0/3.0);
            double t8498 = 1.0/(t8429*t8429);
            double t8548 = c*t8376*t8496*t8498;
            double t8499 = t8497-t8548;
            double t8500 = 1.0/pow(t8375,2.0/3.0);
            double t8501 = EcF_2*EcF_2;
            double t8502 = EcF_2*EcF_3;
            double t8503 = EcF_4+t8501+t8502;
            double t8504 = 1.0/t8503;
            double t8505 = t8427*t8427;
            double t8506 = 1.0/(t8427*t8427);
            double t8507 = EcF_3*c*t8383*t8392*(2.0/9.0);
            double t8508 = t8396+t8507-EcF_3*t8398*t8399*t8400*(1.0/3.6E1);
            double t8509 = t8496*t8496;
            double t8510 = 1.0/(t8429*t8429*t8429);
            double t8511 = EcF_2*4.0;
            double t8512 = EcF_3*2.0;
            double t8513 = t8511+t8512;
            double t8514 = 1.0/(t8432*t8432);
            double t8515 = t8426*t8514;
            double t8516 = t8515+1.0;
            double t8517 = 1.0/t8516;
            double t8518 = t8496*t8498*t8505;
            double t8519 = c*t8383*t8378*t8430*t8427*(1.0/3.0);
            double t8520 = t8518+t8519;
            double t8521 = 1.0/(t8432*t8432*t8432);
            double t8522 = 1.0/(t8432*t8432*t8432*t8432*t8432);
            double t8523 = 1.0/(t8516*t8516);
            double t8525 = t8390*t8391*t8385*t8386;
            double t8526 = c*t8392*t8387*(4.0/9.0);
            double t8528 = c*t8376*t8402*t8403*2.0;
            double t8529 = t8526+t8528-c*t8385*t8378*t8389*(2.0/3.0)-c*t8376*t8389*t8401;
            double t8530 = t8381*t8391*t8386*t8529;
            double t8531 = t8385*t8394*t8418;
            double t8532 = c*t8392*t8387*(1.0/1.8E1);
            double t8533 = t8395*t8402*t8403*2.0;
            double t8534 = t8393*t8387*t8398*t8399*t8400*(1.0/1.8E1);
            double t8535 = c*t8383*t8393*t8385*t8378*t8389*(2.0/3.0);
            double t8536 = t8532+t8533+t8534+t8535-t8395*t8389*t8401-c*t8383*t8392*t8393*t8387*(4.0/9.0);
            double t8537 = c*t8383*t8392*t8415*t8408*t8409*(4.0/9.0);
            double t8538 = 1.0/(t8393*t8393*t8393);
            double t8539 = c*t8381*t8383*t8378*t8418*t8538*(1.0/3.0);
            double t8540 = c*t8392*t8420*t8412*t8421*t8408*(2.0/9.0);
            double t8541 = t8531+t8540+t8537+t8539-t8381*t8394*t8536-c*t8392*t8415*t8408*t8419*(2.0/9.0)-t8398* \
               t8399*t8400*t8415*t8408*t8409*(1.0/1.8E1);
            double t8542 = EcP_2*EcP_3*t8445*t8541;
            double t8543 = EcP_3*c*t8392*t8415*t8419*(4.0/9.0);
            double t8544 = EcP_3*t8398*t8399*t8400*t8415*t8409*(1.0/9.0);
            double t8545 = t8530+t8542+t8525+t8543+t8544-t8381*t8390*t8386*t8500*(1.0/3.0)-EcP_3*c*t8383*t8392* \
               t8415*t8409*(8.0/9.0)-EcP_3*c*t8392*t8420*t8412*t8421*(4.0/9.0);
            double t8546 = EcP_1*t8545;
            double t8547 = 1.0/t8474;
            double t8549 = Ac_3*c*t8383*t8378*(1.0/6.0);
            double t8550 = t8382+t8549;
            double t8551 = 1.0/(t8451*t8451);
            double t8552 = 1.0/(t8454*t8454);
            double t8553 = t8448*t8552;
            double t8554 = t8553+1.0;
            double t8555 = 1.0/t8554;
            double t8556 = c*t8376*t8430;
            double t8557 = log(t8556);
            double t8558 = EcF_3*t8435*t8436*2.0;
            double t8559 = t8430*t8505;
            double t8560 = log(t8559);
            double t8561 = t8435*t8436*t8513;
            double t8562 = t8560+t8561;
            double t8586 = EcF_2*EcF_3*t8504*t8562;
            double t8563 = t8557+t8558-t8586;
            double t8564 = EcF_1*t8563;
            double t8565 = c*t8376*t8387;
            double t8566 = log(t8565);
            double t8567 = EcP_3*t8440*t8441*2.0;
            double t8568 = t8395*t8387;
            double t8569 = log(t8568);
            double t8570 = t8440*t8441*t8408;
            double t8571 = t8570+t8569;
            double t8587 = EcP_2*EcP_3*t8445*t8571;
            double t8572 = t8566+t8567-t8587;
            double t8588 = EcP_1*t8572;
            double t8573 = t8564-t8588;
            double t8574 = c*t8378*t8452*(1.0/3.0);
            double t8590 = c*t8376*t8550*t8551;
            double t8575 = -t8590+t8574;
            double t8576 = t8391*t8386*t8451*t8575;
            double t8577 = t8462*t8550*t8551;
            double t8578 = c*t8383*t8378*t8452*t8449*(1.0/3.0);
            double t8579 = t8577+t8578;
            double t8580 = 1.0/(t8449*t8449);
            double t8581 = t8451*t8580*t8579;
            double t8582 = c*t8383*t8378*t8467*t8552*t8555*(1.0/3.0);
            double t8583 = t8581+t8582;
            double t8584 = Ac_2*Ac_3*t8473*t8583;
            double t8612 = Ac_3*c*t8383*t8378*t8552*t8555*(2.0/3.0);
            double t8585 = t8584+t8576-t8612;
            double t8589 = 1.0/(t8474*t8474);
            double t8591 = Ac_3*c*t8383*t8392*(2.0/9.0);
            double t8636 = Ac_3*t8398*t8399*t8400*(1.0/3.6E1);
            double t8592 = t8396+t8591-t8636;
            double t8593 = t8550*t8550;
            double t8594 = 1.0/(t8451*t8451*t8451);
            double t8595 = 1.0/(t8454*t8454*t8454);
            double t8596 = 1.0/(t8454*t8454*t8454*t8454*t8454);
            double t8597 = 1.0/(t8554*t8554);
            double t8598 = t8391*t8386*t8429*t8499;
            double t8599 = t8429*t8520*t8506;
            double t8600 = c*t8383*t8378*t8513*t8514*t8517*(1.0/3.0);
            double t8601 = t8599+t8600;
            double t8602 = EcF_2*EcF_3*t8504*t8601;
            double t8613 = EcF_3*c*t8383*t8378*t8514*t8517*(2.0/3.0);
            double t8603 = t8598+t8602-t8613;
            double t8604 = EcF_1*t8603;
            double t8605 = t8381*t8390*t8391*t8386;
            double t8606 = t8381*t8394*t8418;
            double t8607 = c*t8383*t8378*t8415*t8408*t8409*(1.0/3.0);
            double t8608 = t8606+t8607;
            double t8609 = EcP_2*EcP_3*t8445*t8608;
            double t8614 = EcP_3*c*t8383*t8378*t8415*t8409*(2.0/3.0);
            double t8610 = t8605-t8614+t8609;
            double t8615 = EcP_1*t8610;
            double t8611 = t8604-t8615;
            double t8616 = d2fz0*t8494*t8547*t8611;
            double t8623 = d2fz0*t8494*t8573*t8585*t8589;
            double t8617 = -t8623+t8616;
            double t8618 = d2fz0*t8494*t8573*t8547;
            double t8619 = t8618-1.0;
            double t8620 = 1.0/(t8375*t8375*t8375*t8375*t8375);
            double t8621 = pow(t8482,1.0/3.0);
            double t8622 = pow(t8484,1.0/3.0);
            double t8624 = t8483*t8621*(4.0/3.0);
            double t8656 = t8483*t8622*(4.0/3.0);
            double t8625 = t8624-t8656;
            double t8626 = t8492*t8493*t8619;
            double t8627 = t8626+1.0;
            double t8628 = pow(t8482,4.0/3.0);
            double t8629 = pow(t8484,4.0/3.0);
            double t8630 = t8628+t8629-2.0;
            double t8631 = t8492*t8493*t8617;
            double t8632 = t8422*t8423*t8492*t8619*4.0;
            double t8633 = t8493*t8620*t8619*4.0;
            double t8634 = t8631+t8632+t8633;
            double t8635 = c*t8392*t8452*(4.0/9.0);
            double t8637 = c*t8376*t8593*t8594*2.0;
            double t8638 = t8635+t8637-c*t8378*t8550*t8551*(2.0/3.0)-c*t8376*t8551*t8592;
            double t8639 = t8391*t8386*t8451*t8638;
            double t8640 = t8550*t8580*t8579;
            double t8641 = c*t8392*t8452*(1.0/1.8E1);
            double t8642 = t8462*t8593*t8594*2.0;
            double t8643 = t8398*t8399*t8400*t8452*t8449*(1.0/1.8E1);
            double t8644 = c*t8383*t8378*t8449*t8550*t8551*(2.0/3.0);
            double t8645 = t8641+t8642+t8643+t8644-t8462*t8551*t8592-c*t8383*t8392*t8452*t8449*(4.0/9.0);
            double t8646 = c*t8383*t8392*t8467*t8552*t8555*(4.0/9.0);
            double t8647 = 1.0/(t8449*t8449*t8449);
            double t8648 = c*t8383*t8378*t8451*t8579*t8647*(1.0/3.0);
            double t8649 = c*t8392*t8448*t8467*t8596*t8597*(2.0/9.0);
            double t8650 = t8640+t8646+t8648+t8649-t8451*t8580*t8645-c*t8392*t8467*t8555*t8595*(2.0/9.0)-t8398* \
               t8399*t8400*t8467*t8552*t8555*(1.0/1.8E1);
            double t8651 = Ac_2*Ac_3*t8473*t8650;
            double t8652 = t8391*t8386*t8550*t8575;
            double t8653 = Ac_3*c*t8392*t8555*t8595*(4.0/9.0);
            double t8654 = Ac_3*t8398*t8399*t8400*t8552*t8555*(1.0/9.0);
            double t8655 = t8651+t8652+t8653+t8654+t8639-t8386*t8451*t8500*t8575*(1.0/3.0)-Ac_3*c*t8383*t8392* \
               t8552*t8555*(8.0/9.0)-Ac_3*c*t8392*t8448*t8596*t8597*(4.0/9.0);
            v_rho_b_rho_b_[index] = EcP_1*t8610*-2.0+t8375*(t8546+Ac_1*t8490*t8474*t8487*t8630*(1.0/(t8375*t8375* \
               t8375*t8375*t8375*t8375)*t8493*t8619*2.0E1+t8423*t8492*t8619*1.2E1+t8493*t8620*t8617*8.0-t8492*t8493* \
               (d2fz0*t8494*t8547*(t8546-EcF_1*(t8391*t8386*t8429*(c*t8392*t8430*(4.0/9.0)-c*t8378*t8496*t8498*(2.0/ \
               3.0)-c*t8376*t8498*t8508+c*t8376*t8510*t8509*2.0)+t8391*t8386*t8496*t8499-t8386*t8429*t8499*t8500* \
               (1.0/3.0)+EcF_2*EcF_3*t8504*(-t8429*t8506*(c*t8392*t8430*(1.0/1.8E1)-t8498*t8505*t8508+t8510*t8505* \
               t8509*2.0-c*t8383*t8392*t8430*t8427*(4.0/9.0)+t8398*t8399*t8400*t8430*t8427*(1.0/1.8E1)+c*t8383*t8378* \
               t8427*t8496*t8498*(2.0/3.0))+t8496*t8520*t8506-c*t8392*t8521*t8513*t8517*(2.0/9.0)+c*t8383*t8392*t8513* \
               t8514*t8517*(4.0/9.0)+c*t8392*t8426*t8513*t8522*t8523*(2.0/9.0)-t8398*t8399*t8400*t8513*t8514*t8517* \
               (1.0/1.8E1)+c*t8383*t8378*1.0/(t8427*t8427*t8427)*t8429*t8520*(1.0/3.0))+EcF_3*c*t8392*t8521*t8517* \
               (4.0/9.0)-EcF_3*c*t8383*t8392*t8514*t8517*(8.0/9.0)-EcF_3*c*t8392*t8426*t8522*t8523*(4.0/9.0)+EcF_3* \
               t8398*t8399*t8400*t8514*t8517*(1.0/9.0)))-d2fz0*1.0/(t8474*t8474*t8474)*t8494*t8573*(t8585*t8585)* \
               2.0+d2fz0*t8494*t8585*t8589*t8611*2.0+d2fz0*t8494*t8573*t8589*t8655)+t8422*t8423*t8492*t8617*8.0+t8422* \
               t8423*t8620*t8619*3.2E1)+Ac_1*t8490*t8474*t8487*t8627*(t8481*t8621*(4.0/3.0)-t8481*t8622*(4.0/3.0) \
               +1.0/pow(t8482,2.0/3.0)*t8486*(4.0/9.0)+1.0/pow(t8484,2.0/3.0)*t8486*(4.0/9.0))+Ac_1*t8490*t8474*t8487* \
               t8625*t8634*2.0+Ac_1*t8490*t8487*t8585*t8630*t8634*2.0+Ac_1*t8490*t8487*t8585*t8625*t8627*2.0+Ac_1* \
               t8490*t8487*t8630*t8627*t8655)-Ac_1*t8490*t8474*t8487*t8630*t8634*2.0-Ac_1*t8490*t8474*t8487*t8625* \
               t8627*2.0-Ac_1*t8490*t8487*t8585*t8630*t8627*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t9823 = rho_a[index]+rho_b[index];
            double t9824 = 1.0/pow(t9823,1.0/3.0);
            double t9825 = c*t9824;
            double t9826 = 1.0/pow(t9823,4.0/3.0);
            double t9827 = sqrt(t9825);
            double t9828 = EcP_3*t9827;
            double t9829 = EcP_4+t9825+t9828;
            double t9830 = c*t9826*(1.0/3.0);
            double t9831 = 1.0/sqrt(t9825);
            double t9832 = EcP_3*c*t9831*t9826*(1.0/6.0);
            double t9833 = t9830+t9832;
            double t9834 = EcP_2-t9827;
            double t9835 = 1.0/(t9829*t9829);
            double t9836 = 1.0/t9829;
            double t9837 = t9827*2.0;
            double t9838 = EcP_3+t9837;
            double t9839 = 1.0/(t9838*t9838);
            double t9840 = EcP_4*4.0;
            double t9841 = EcP_3*EcP_3;
            double t9842 = t9840-t9841;
            double t9843 = t9842*t9839;
            double t9844 = t9843+1.0;
            double t9845 = 1.0/t9844;
            double t9846 = 1.0/c;
            double t9847 = c*t9826*t9836*(1.0/3.0);
            double t9850 = c*t9824*t9833*t9835;
            double t9848 = -t9850+t9847;
            double t9849 = pow(t9823,1.0/3.0);
            double t9851 = 1.0/pow(t9823,7.0/3.0);
            double t9852 = EcP_2*EcP_2;
            double t9853 = EcP_2*EcP_3;
            double t9854 = EcP_4+t9852+t9853;
            double t9855 = 1.0/t9854;
            double t9856 = t9834*t9834;
            double t9857 = t9833*t9835*t9856;
            double t9858 = c*t9831*t9834*t9826*t9836*(1.0/3.0);
            double t9859 = t9857+t9858;
            double t9860 = 1.0/(t9834*t9834);
            double t9861 = c*t9851*(4.0/9.0);
            double t9862 = EcP_3*c*t9831*t9851*(2.0/9.0);
            double t9863 = c*c;
            double t9864 = 1.0/pow(t9823,8.0/3.0);
            double t9865 = 1.0/pow(t9825,3.0/2.0);
            double t9910 = EcP_3*t9863*t9864*t9865*(1.0/3.6E1);
            double t9866 = t9861+t9862-t9910;
            double t9867 = t9833*t9833;
            double t9868 = 1.0/(t9829*t9829*t9829);
            double t9869 = EcP_2*4.0;
            double t9870 = EcP_3*2.0;
            double t9871 = t9870+t9869;
            double t9872 = 1.0/(t9838*t9838*t9838);
            double t9873 = 1.0/(t9838*t9838*t9838*t9838*t9838);
            double t9874 = 1.0/(t9844*t9844);
            double t9875 = EcF_3*t9827;
            double t9876 = EcF_4+t9825+t9875;
            double t9877 = EcF_3*c*t9831*t9826*(1.0/6.0);
            double t9878 = t9830+t9877;
            double t9879 = 1.0/t9876;
            double t9880 = c*t9826*t9879*(1.0/3.0);
            double t9881 = 1.0/(t9876*t9876);
            double t9936 = c*t9824*t9881*t9878;
            double t9882 = t9880-t9936;
            double t9883 = 1.0/pow(t9823,2.0/3.0);
            double t9884 = EcF_2-t9827;
            double t9885 = 1.0/(t9884*t9884);
            double t9886 = t9884*t9884;
            double t9887 = EcF_3*c*t9831*t9851*(2.0/9.0);
            double t9888 = t9861+t9887-EcF_3*t9863*t9864*t9865*(1.0/3.6E1);
            double t9889 = t9878*t9878;
            double t9890 = 1.0/(t9876*t9876*t9876);
            double t9891 = EcF_3+t9837;
            double t9892 = EcF_2*4.0;
            double t9893 = EcF_3*2.0;
            double t9894 = t9892+t9893;
            double t9895 = 1.0/(t9891*t9891);
            double t9896 = EcF_4*4.0;
            double t9897 = EcF_3*EcF_3;
            double t9898 = t9896-t9897;
            double t9899 = t9895*t9898;
            double t9900 = t9899+1.0;
            double t9901 = 1.0/t9900;
            double t9902 = t9881*t9886*t9878;
            double t9903 = c*t9831*t9826*t9884*t9879*(1.0/3.0);
            double t9904 = t9902+t9903;
            double t9905 = 1.0/(t9891*t9891*t9891);
            double t9906 = 1.0/(t9891*t9891*t9891*t9891*t9891);
            double t9907 = 1.0/(t9900*t9900);
            double t9908 = t9833*t9846*t9848*t9849;
            double t9909 = c*t9851*t9836*(4.0/9.0);
            double t9911 = c*t9824*t9867*t9868*2.0;
            double t9912 = t9911+t9909-c*t9833*t9826*t9835*(2.0/3.0)-c*t9824*t9835*t9866;
            double t9913 = t9846*t9829*t9849*t9912;
            double t9914 = t9833*t9860*t9859;
            double t9915 = c*t9851*t9836*(1.0/1.8E1);
            double t9916 = t9856*t9867*t9868*2.0;
            double t9917 = t9834*t9836*t9863*t9864*t9865*(1.0/1.8E1);
            double t9918 = c*t9831*t9833*t9834*t9826*t9835*(2.0/3.0);
            double t9919 = t9915+t9916+t9917+t9918-t9835*t9856*t9866-c*t9831*t9851*t9834*t9836*(4.0/9.0);
            double t9920 = c*t9831*t9851*t9871*t9845*t9839*(4.0/9.0);
            double t9921 = 1.0/(t9834*t9834*t9834);
            double t9922 = c*t9831*t9826*t9829*t9859*t9921*(1.0/3.0);
            double t9923 = c*t9842*t9851*t9871*t9873*t9874*(2.0/9.0);
            double t9924 = t9920+t9922+t9914+t9923-t9860*t9829*t9919-c*t9851*t9871*t9845*t9872*(2.0/9.0)-t9871* \
               t9845*t9863*t9864*t9865*t9839*(1.0/1.8E1);
            double t9925 = EcP_2*EcP_3*t9855*t9924;
            double t9926 = EcP_3*c*t9851*t9845*t9872*(4.0/9.0);
            double t9927 = EcP_3*t9845*t9863*t9864*t9865*t9839*(1.0/9.0);
            double t9928 = t9913+t9925+t9908+t9926+t9927-t9846*t9829*t9883*t9848*(1.0/3.0)-EcP_3*c*t9831*t9851* \
               t9845*t9839*(8.0/9.0)-EcP_3*c*t9842*t9851*t9873*t9874*(4.0/9.0);
            double t9929 = EcP_1*t9928;
            double t9930 = pow(2.0,1.0/3.0);
            double t9931 = t9930*2.0;
            double t9932 = t9931-2.0;
            double t9933 = two_13*2.0;
            double t9934 = t9933-2.0;
            double t9935 = 1.0/t9934;
            double t9937 = EcF_2*EcF_2;
            double t9938 = EcF_2*EcF_3;
            double t9939 = EcF_4+t9937+t9938;
            double t9940 = 1.0/t9939;
            double t9941 = t9846*t9829*t9848*t9849;
            double t9942 = t9860*t9829*t9859;
            double t9943 = c*t9831*t9826*t9871*t9845*t9839*(1.0/3.0);
            double t9944 = t9942+t9943;
            double t9945 = EcP_2*EcP_3*t9855*t9944;
            double t9946 = t9941+t9945-EcP_3*c*t9831*t9826*t9845*t9839*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t9946*-2.0+t9823*(t9929-t9932*t9935*(t9929-EcF_1*(t9846*t9849*t9876* \
               (c*t9851*t9879*(4.0/9.0)-c*t9824*t9881*t9888+c*t9824*t9890*t9889*2.0-c*t9826*t9881*t9878*(2.0/3.0) \
               )-t9846*t9882*t9883*t9876*(1.0/3.0)+t9846*t9882*t9849*t9878+EcF_2*EcF_3*t9940*(-t9876*t9885*(c*t9851* \
               t9879*(1.0/1.8E1)-t9881*t9886*t9888+t9890*t9886*t9889*2.0-c*t9831*t9851*t9884*t9879*(4.0/9.0)+t9863* \
               t9864*t9865*t9884*t9879*(1.0/1.8E1)+c*t9831*t9826*t9881*t9884*t9878*(2.0/3.0))+t9885*t9878*t9904-c* \
               t9851*t9894*t9901*t9905*(2.0/9.0)+c*t9831*t9851*t9894*t9895*t9901*(4.0/9.0)+c*t9851*t9894*t9898*t9906* \
               t9907*(2.0/9.0)-t9863*t9864*t9865*t9894*t9895*t9901*(1.0/1.8E1)+c*t9831*t9826*1.0/(t9884*t9884*t9884) \
               *t9876*t9904*(1.0/3.0))+EcF_3*c*t9851*t9901*t9905*(4.0/9.0)-EcF_3*c*t9831*t9851*t9895*t9901*(8.0/9.0) \
               -EcF_3*c*t9851*t9898*t9906*t9907*(4.0/9.0)+EcF_3*t9863*t9864*t9865*t9895*t9901*(1.0/9.0))))+t9932* \
               t9935*(EcP_1*t9946-EcF_1*(t9846*t9882*t9849*t9876+EcF_2*EcF_3*t9940*(t9876*t9885*t9904+c*t9831*t9826* \
               t9894*t9895*t9901*(1.0/3.0))-EcF_3*c*t9831*t9826*t9895*t9901*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t9178 = rho_a[index]+rho_b[index];
            double t9179 = 1.0/pow(t9178,1.0/3.0);
            double t9180 = c*t9179;
            double t9181 = 1.0/pow(t9178,4.0/3.0);
            double t9182 = sqrt(t9180);
            double t9183 = EcP_3*t9182;
            double t9184 = EcP_4+t9180+t9183;
            double t9185 = c*t9181*(1.0/3.0);
            double t9186 = 1.0/sqrt(t9180);
            double t9187 = EcP_3*c*t9181*t9186*(1.0/6.0);
            double t9188 = t9185+t9187;
            double t9189 = EcP_2-t9182;
            double t9190 = 1.0/(t9184*t9184);
            double t9191 = 1.0/t9184;
            double t9192 = t9182*2.0;
            double t9193 = EcP_3+t9192;
            double t9194 = 1.0/(t9193*t9193);
            double t9195 = EcP_4*4.0;
            double t9196 = EcP_3*EcP_3;
            double t9197 = t9195-t9196;
            double t9198 = t9194*t9197;
            double t9199 = t9198+1.0;
            double t9200 = 1.0/t9199;
            double t9201 = 1.0/c;
            double t9202 = c*t9181*t9191*(1.0/3.0);
            double t9205 = c*t9190*t9179*t9188;
            double t9203 = t9202-t9205;
            double t9204 = pow(t9178,1.0/3.0);
            double t9206 = 1.0/pow(t9178,7.0/3.0);
            double t9207 = EcP_2*EcP_2;
            double t9208 = EcP_2*EcP_3;
            double t9209 = EcP_4+t9207+t9208;
            double t9210 = 1.0/t9209;
            double t9211 = t9189*t9189;
            double t9212 = t9190*t9188*t9211;
            double t9213 = c*t9181*t9191*t9186*t9189*(1.0/3.0);
            double t9214 = t9212+t9213;
            double t9215 = 1.0/(t9189*t9189);
            double t9216 = c*t9206*(4.0/9.0);
            double t9217 = EcP_3*c*t9186*t9206*(2.0/9.0);
            double t9218 = c*c;
            double t9219 = 1.0/pow(t9178,8.0/3.0);
            double t9220 = 1.0/pow(t9180,3.0/2.0);
            double t9265 = EcP_3*t9220*t9218*t9219*(1.0/3.6E1);
            double t9221 = t9216+t9217-t9265;
            double t9222 = t9188*t9188;
            double t9223 = 1.0/(t9184*t9184*t9184);
            double t9224 = EcP_2*4.0;
            double t9225 = EcP_3*2.0;
            double t9226 = t9224+t9225;
            double t9227 = 1.0/(t9193*t9193*t9193);
            double t9228 = 1.0/(t9193*t9193*t9193*t9193*t9193);
            double t9229 = 1.0/(t9199*t9199);
            double t9230 = EcF_3*t9182;
            double t9231 = EcF_4+t9180+t9230;
            double t9232 = EcF_3*c*t9181*t9186*(1.0/6.0);
            double t9233 = t9185+t9232;
            double t9234 = 1.0/t9231;
            double t9235 = c*t9181*t9234*(1.0/3.0);
            double t9236 = 1.0/(t9231*t9231);
            double t9291 = c*t9179*t9233*t9236;
            double t9237 = t9235-t9291;
            double t9238 = 1.0/pow(t9178,2.0/3.0);
            double t9239 = EcF_2-t9182;
            double t9240 = 1.0/(t9239*t9239);
            double t9241 = t9239*t9239;
            double t9242 = EcF_3*c*t9186*t9206*(2.0/9.0);
            double t9243 = t9242+t9216-EcF_3*t9220*t9218*t9219*(1.0/3.6E1);
            double t9244 = t9233*t9233;
            double t9245 = 1.0/(t9231*t9231*t9231);
            double t9246 = EcF_3+t9192;
            double t9247 = EcF_2*4.0;
            double t9248 = EcF_3*2.0;
            double t9249 = t9247+t9248;
            double t9250 = 1.0/(t9246*t9246);
            double t9251 = EcF_4*4.0;
            double t9252 = EcF_3*EcF_3;
            double t9253 = t9251-t9252;
            double t9254 = t9250*t9253;
            double t9255 = t9254+1.0;
            double t9256 = 1.0/t9255;
            double t9257 = t9241*t9233*t9236;
            double t9258 = c*t9181*t9186*t9234*t9239*(1.0/3.0);
            double t9259 = t9257+t9258;
            double t9260 = 1.0/(t9246*t9246*t9246);
            double t9261 = 1.0/(t9246*t9246*t9246*t9246*t9246);
            double t9262 = 1.0/(t9255*t9255);
            double t9263 = t9188*t9201*t9203*t9204;
            double t9264 = c*t9191*t9206*(4.0/9.0);
            double t9266 = c*t9179*t9222*t9223*2.0;
            double t9267 = t9264+t9266-c*t9181*t9190*t9188*(2.0/3.0)-c*t9190*t9179*t9221;
            double t9268 = t9184*t9201*t9204*t9267;
            double t9269 = t9188*t9214*t9215;
            double t9270 = c*t9191*t9206*(1.0/1.8E1);
            double t9271 = t9211*t9222*t9223*2.0;
            double t9272 = t9191*t9189*t9220*t9218*t9219*(1.0/1.8E1);
            double t9273 = c*t9181*t9190*t9186*t9188*t9189*(2.0/3.0);
            double t9274 = t9270+t9271+t9272+t9273-t9190*t9211*t9221-c*t9191*t9186*t9189*t9206*(4.0/9.0);
            double t9275 = c*t9194*t9186*t9200*t9206*t9226*(4.0/9.0);
            double t9276 = 1.0/(t9189*t9189*t9189);
            double t9277 = c*t9181*t9184*t9186*t9214*t9276*(1.0/3.0);
            double t9278 = c*t9197*t9206*t9226*t9228*t9229*(2.0/9.0);
            double t9279 = t9275+t9277+t9269+t9278-t9184*t9215*t9274-c*t9200*t9206*t9226*t9227*(2.0/9.0)-t9194* \
               t9200*t9220*t9226*t9218*t9219*(1.0/1.8E1);
            double t9280 = EcP_2*EcP_3*t9210*t9279;
            double t9281 = EcP_3*c*t9200*t9206*t9227*(4.0/9.0);
            double t9282 = EcP_3*t9194*t9200*t9220*t9218*t9219*(1.0/9.0);
            double t9283 = t9280+t9263+t9281+t9282+t9268-t9184*t9201*t9203*t9238*(1.0/3.0)-EcP_3*c*t9194*t9186* \
               t9200*t9206*(8.0/9.0)-EcP_3*c*t9197*t9206*t9228*t9229*(4.0/9.0);
            double t9284 = EcP_1*t9283;
            double t9285 = pow(2.0,1.0/3.0);
            double t9286 = t9285*2.0;
            double t9287 = t9286-2.0;
            double t9288 = two_13*2.0;
            double t9289 = t9288-2.0;
            double t9290 = 1.0/t9289;
            double t9292 = EcF_2*EcF_2;
            double t9293 = EcF_2*EcF_3;
            double t9294 = EcF_4+t9292+t9293;
            double t9295 = 1.0/t9294;
            double t9296 = t9184*t9201*t9203*t9204;
            double t9297 = t9184*t9214*t9215;
            double t9298 = c*t9181*t9194*t9186*t9200*t9226*(1.0/3.0);
            double t9299 = t9297+t9298;
            double t9300 = EcP_2*EcP_3*t9210*t9299;
            double t9301 = t9296+t9300-EcP_3*c*t9181*t9194*t9186*t9200*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t9301*-2.0+t9178*(t9284-t9290*t9287*(t9284-EcF_1*(t9201*t9204*t9231* \
               (c*t9206*t9234*(4.0/9.0)-c*t9181*t9233*t9236*(2.0/3.0)-c*t9179*t9243*t9236+c*t9179*t9244*t9245*2.0) \
               +t9201*t9204*t9233*t9237-t9201*t9231*t9237*t9238*(1.0/3.0)+EcF_2*EcF_3*t9295*(-t9231*t9240*(c*t9206* \
               t9234*(1.0/1.8E1)-t9241*t9243*t9236+t9241*t9244*t9245*2.0-c*t9186*t9206*t9234*t9239*(4.0/9.0)+t9220* \
               t9234*t9218*t9219*t9239*(1.0/1.8E1)+c*t9181*t9186*t9233*t9236*t9239*(2.0/3.0))+t9240*t9233*t9259-c* \
               t9206*t9260*t9256*t9249*(2.0/9.0)+c*t9186*t9250*t9206*t9256*t9249*(4.0/9.0)+c*t9206*t9261*t9253*t9262* \
               t9249*(2.0/9.0)-t9220*t9250*t9218*t9219*t9256*t9249*(1.0/1.8E1)+c*t9181*t9186*t9231*1.0/(t9239*t9239* \
               t9239)*t9259*(1.0/3.0))+EcF_3*c*t9206*t9260*t9256*(4.0/9.0)-EcF_3*c*t9186*t9250*t9206*t9256*(8.0/9.0) \
               -EcF_3*c*t9206*t9261*t9253*t9262*(4.0/9.0)+EcF_3*t9220*t9250*t9218*t9219*t9256*(1.0/9.0))))+t9290* \
               t9287*(EcP_1*t9301-EcF_1*(t9201*t9204*t9231*t9237+EcF_2*EcF_3*t9295*(t9231*t9240*t9259+c*t9181*t9186* \
               t9250*t9256*t9249*(1.0/3.0))-EcF_3*c*t9181*t9186*t9250*t9256*(2.0/3.0)))*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

