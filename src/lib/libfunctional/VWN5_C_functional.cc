/**********************************************************
* VWN5_C_functional.cc: definitions for VWN5_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "VWN5_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

VWN5_C_Functional::VWN5_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "VWN5_C";
    description_ = "VWN5 Correlation Functional";
    citation_ = "S.H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys., 58, 1200-1211, 1980";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double d2fz0 = 1.7099209341613653E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double EcP_1 = 3.1090699999999999E-02;
    params_.push_back(make_pair("EcP_1",EcP_1));
    double EcP_2 = -1.0498000000000000E-01;
    params_.push_back(make_pair("EcP_2",EcP_2));
    double EcP_3 = 3.7274400000000001E+00;
    params_.push_back(make_pair("EcP_3",EcP_3));
    double EcP_4 = 1.2935200000000000E+01;
    params_.push_back(make_pair("EcP_4",EcP_4));
    double EcF_1 = 1.5545349999999999E-02;
    params_.push_back(make_pair("EcF_1",EcF_1));
    double EcF_2 = -3.2500000000000001E-01;
    params_.push_back(make_pair("EcF_2",EcF_2));
    double EcF_3 = 7.0604199999999997E+00;
    params_.push_back(make_pair("EcF_3",EcF_3));
    double EcF_4 = 1.8057800000000000E+01;
    params_.push_back(make_pair("EcF_4",EcF_4));
    double Ac_1 = -1.6886863940389629E-02;
    params_.push_back(make_pair("Ac_1",Ac_1));
    double Ac_2 = -4.7584000000000003E-03;
    params_.push_back(make_pair("Ac_2",Ac_2));
    double Ac_3 = 1.1310700000000000E+00;
    params_.push_back(make_pair("Ac_3",Ac_3));
    double Ac_4 = 1.3004500000000000E+01;
    params_.push_back(make_pair("Ac_4",Ac_4));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
VWN5_C_Functional::~VWN5_C_Functional()
{
}
void VWN5_C_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t9739 = rho_a[index]*2.0;
            double t9740 = 1/pow(t9739,1.0/3.0);
            double t9741 = c*t9740;
            double t9742 = sqrt(t9741);
            double t9743 = EcP_4*4.0;
            double t9744 = EcP_3*EcP_3;
            double t9745 = t9743-t9744;
            double t9746 = EcP_2-t9742;
            double t9747 = EcP_3*t9742;
            double t9748 = EcP_4+t9741+t9747;
            double t9749 = 1/t9748;
            double t9750 = sqrt(t9745);
            double t9751 = t9742*2.0;
            double t9752 = EcP_3+t9751;
            double t9753 = 1/t9752;
            double t9754 = t9750*t9753;
            double t9755 = atan(t9754);
            double t9756 = 1/sqrt(t9745);
            functional_[index] = EcP_1*rho_a[index]*(log(c*t9740*t9749)+EcP_3*t9755*t9756*2.0-(EcP_2*EcP_3*(log((t9746* \
               t9746)*t9749)+t9755*t9756*(EcP_2*4.0+EcP_3*2.0)))/(EcP_4+EcP_2*EcP_2+EcP_2*EcP_3))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t9758 = rho_a[index]*2.0;
            double t9759 = 1/pow(t9758,1.0/3.0);
            double t9760 = c*t9759;
            double t9761 = sqrt(t9760);
            double t9762 = EcP_4*4.0;
            double t9763 = EcP_3*EcP_3;
            double t9764 = t9762-t9763;
            double t9765 = EcP_2-t9761;
            double t9766 = EcP_3*t9761;
            double t9767 = EcP_4+t9760+t9766;
            double t9768 = 1/t9767;
            double t9769 = sqrt(t9764);
            double t9770 = t9761*2.0;
            double t9771 = EcP_3+t9770;
            double t9772 = 1/t9771;
            double t9773 = t9772*t9769;
            double t9774 = atan(t9773);
            double t9775 = 1/sqrt(t9764);
            double t9776 = t9765*t9765;
            double t9777 = 1/pow(t9758,4.0/3.0);
            double t9778 = 1/sqrt(t9760);
            double t9779 = 1/(t9771*t9771);
            double t9780 = EcP_2*4.0;
            double t9781 = EcP_3*2.0;
            double t9782 = t9780+t9781;
            double t9783 = EcP_2*EcP_2;
            double t9784 = EcP_2*EcP_3;
            double t9785 = EcP_4+t9783+t9784;
            double t9786 = 1/t9785;
            double t9787 = c*t9777*(1.0/3.0);
            double t9788 = EcP_3*c*t9777*t9778*(1.0/6.0);
            double t9789 = t9787+t9788;
            double t9790 = 1/(t9767*t9767);
            double t9791 = t9764*t9779;
            double t9792 = t9791+1.0;
            double t9793 = 1/t9792;
            v_rho_a_[index] = EcP_1*(log(c*t9759*t9768)+EcP_3*t9774*t9775*2.0-EcP_2*EcP_3*t9786*(log(t9776*t9768) \
               +t9782*t9774*t9775))-EcP_1*rho_a[index]*(EcP_2*EcP_3*t9786*(1/(t9765*t9765)*t9767*(t9790*t9776*t9789+ \
               c*t9765*t9768*t9777*t9778*(1.0/3.0))+c*t9782*t9793*t9777*t9778*t9779*(1.0/3.0))+(pow(t9758,1.0/3.0) \
               *t9767*(c*t9768*t9777*(1.0/3.0)-c*t9790*t9759*t9789))/c-EcP_3*c*t9793*t9777*t9778*t9779*(2.0/3.0)) \
               *2.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t9797 = rho_a[index]*2.0;
            double t9798 = 1/pow(t9797,1.0/3.0);
            double t9799 = c*t9798;
            double t9800 = 1/pow(t9797,4.0/3.0);
            double t9801 = sqrt(t9799);
            double t9802 = EcP_3*t9801;
            double t9803 = EcP_4+t9799+t9802;
            double t9804 = c*t9800*(1.0/3.0);
            double t9805 = 1/sqrt(t9799);
            double t9806 = EcP_3*c*t9800*t9805*(1.0/6.0);
            double t9807 = t9804+t9806;
            double t9808 = 1/c;
            double t9809 = pow(t9797,1.0/3.0);
            double t9810 = 1/t9803;
            double t9811 = 1/(t9803*t9803);
            double t9812 = 1/pow(t9797,7.0/3.0);
            double t9813 = EcP_2-t9801;
            double t9814 = 1/(t9813*t9813);
            double t9815 = t9813*t9813;
            double t9816 = t9807*t9807;
            double t9817 = 1/(t9803*t9803*t9803);
            double t9818 = c*t9812*(4.0/9.0);
            double t9819 = EcP_3*c*t9812*t9805*(2.0/9.0);
            double t9820 = c*c;
            double t9821 = 1/pow(t9797,8.0/3.0);
            double t9822 = 1/pow(t9799,3.0/2.0);
            double t9861 = EcP_3*t9820*t9821*t9822*(1.0/3.6E1);
            double t9823 = -t9861+t9818+t9819;
            double t9824 = t9801*2.0;
            double t9825 = EcP_3+t9824;
            double t9826 = EcP_4*4.0;
            double t9827 = EcP_3*EcP_3;
            double t9828 = t9826-t9827;
            double t9829 = 1/(t9825*t9825);
            double t9830 = t9828*t9829;
            double t9831 = t9830+1.0;
            double t9832 = EcP_2*4.0;
            double t9833 = EcP_3*2.0;
            double t9834 = t9832+t9833;
            double t9835 = t9811*t9815*t9807;
            double t9836 = c*t9800*t9810*t9813*t9805*(1.0/3.0);
            double t9837 = t9835+t9836;
            double t9838 = 1/t9831;
            double t9839 = c*t9800*t9810*(1.0/3.0);
            double t9857 = c*t9798*t9811*t9807;
            double t9840 = t9839-t9857;
            double t9841 = 1/(t9825*t9825*t9825);
            double t9842 = 1/(t9825*t9825*t9825*t9825*t9825);
            double t9843 = 1/(t9831*t9831);
            double t9844 = Ac_4*4.0;
            double t9845 = Ac_3*Ac_3;
            double t9846 = t9844-t9845;
            double t9847 = Ac_2-t9801;
            double t9848 = Ac_3*t9801;
            double t9849 = Ac_4+t9799+t9848;
            double t9850 = 1/t9849;
            double t9851 = sqrt(t9846);
            double t9852 = Ac_3+t9824;
            double t9853 = 1/t9852;
            double t9854 = t9851*t9853;
            double t9855 = atan(t9854);
            double t9856 = 1/sqrt(t9846);
            double t9858 = t9840*t9807*t9808*t9809;
            double t9859 = c*t9810*t9812*(4.0/9.0);
            double t9860 = c*t9798*t9816*t9817*2.0;
            double t9862 = t9860+t9859-c*t9798*t9811*t9823-c*t9800*t9811*t9807*(2.0/3.0);
            double t9863 = t9803*t9808*t9862*t9809;
            double t9864 = EcP_2*EcP_2;
            double t9865 = EcP_2*EcP_3;
            double t9866 = EcP_4+t9864+t9865;
            double t9867 = 1/t9866;
            double t9868 = t9814*t9807*t9837;
            double t9869 = t9815*t9816*t9817*2.0;
            double t9870 = c*t9810*t9812*(1.0/1.8E1);
            double t9871 = t9810*t9820*t9821*t9813*t9822*(1.0/1.8E1);
            double t9872 = c*t9800*t9811*t9813*t9805*t9807*(2.0/3.0);
            double t9873 = t9870+t9871+t9872+t9869-t9811*t9823*t9815-c*t9810*t9812*t9813*t9805*(4.0/9.0);
            double t9874 = c*t9812*t9842*t9834*t9843*t9828*(2.0/9.0);
            double t9875 = 1/(t9813*t9813*t9813);
            double t9876 = c*t9800*t9803*t9805*t9837*t9875*(1.0/3.0);
            double t9877 = c*t9812*t9805*t9834*t9829*t9838*(4.0/9.0);
            double t9878 = t9874+t9876+t9868+t9877-t9803*t9814*t9873-c*t9812*t9841*t9834*t9838*(2.0/9.0)-t9820* \
               t9821*t9822*t9834*t9829*t9838*(1.0/1.8E1);
            double t9879 = EcP_2*EcP_3*t9867*t9878;
            double t9880 = 1/pow(t9797,2.0/3.0);
            double t9881 = EcP_3*c*t9812*t9841*t9838*(4.0/9.0);
            double t9882 = EcP_3*t9820*t9821*t9822*t9829*t9838*(1.0/9.0);
            double t9883 = t9863+t9881+t9882+t9858+t9879-t9803*t9840*t9808*t9880*(1.0/3.0)-EcP_3*c*t9812*t9842* \
               t9843*t9828*(4.0/9.0)-EcP_3*c*t9812*t9805*t9829*t9838*(8.0/9.0);
            double t9884 = EcP_1*t9883;
            double t9885 = 1/d2fz0;
            double t9886 = 1/(rho_a[index]*rho_a[index]);
            double t9887 = two_13*2.0;
            double t9888 = t9887-2.0;
            double t9889 = 1/t9888;
            double t9890 = c*t9798*t9850;
            double t9891 = log(t9890);
            double t9892 = Ac_3*t9855*t9856*2.0;
            double t9893 = t9847*t9847;
            double t9894 = t9850*t9893;
            double t9895 = log(t9894);
            double t9896 = Ac_2*4.0;
            double t9897 = Ac_3*2.0;
            double t9898 = t9896+t9897;
            double t9899 = t9855*t9856*t9898;
            double t9900 = t9895+t9899;
            double t9901 = Ac_2*Ac_2;
            double t9902 = Ac_2*Ac_3;
            double t9903 = Ac_4+t9901+t9902;
            double t9904 = 1/t9903;
            double t9905 = t9891+t9892-Ac_2*Ac_3*t9900*t9904;
            v_rho_a_rho_a_[index] = rho_a[index]*(t9884-Ac_1*t9885*t9886*t9889*t9905*(2.0/9.0))*2.0+rho_a[index]* \
               (t9884+Ac_1*t9885*t9886*t9889*t9905*(2.0/9.0))*2.0-EcP_1*(t9803*t9840*t9808*t9809+EcP_2*EcP_3*t9867* \
               (t9803*t9814*t9837+c*t9800*t9805*t9834*t9829*t9838*(1.0/3.0))-EcP_3*c*t9800*t9805*t9829*t9838*(2.0/ \
               3.0))*4.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void VWN5_C_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c = params_[0].second;
    double d2fz0 = params_[1].second;
    double EcP_1 = params_[2].second;
    double EcP_2 = params_[3].second;
    double EcP_3 = params_[4].second;
    double EcP_4 = params_[5].second;
    double EcF_1 = params_[6].second;
    double EcF_2 = params_[7].second;
    double EcF_3 = params_[8].second;
    double EcF_4 = params_[9].second;
    double Ac_1 = params_[10].second;
    double Ac_2 = params_[11].second;
    double Ac_3 = params_[12].second;
    double Ac_4 = params_[13].second;
    double two_13 = params_[14].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7108 = rho_a[index]+rho_b[index];
            double t7109 = 1/pow(t7108,1.0/3.0);
            double t7110 = c*t7109;
            double t7111 = sqrt(t7110);
            double t7112 = EcP_4*4.0;
            double t7113 = EcP_3*EcP_3;
            double t7114 = t7112-t7113;
            double t7115 = EcP_2-t7111;
            double t7116 = EcP_3*t7111;
            double t7117 = EcP_4+t7110+t7116;
            double t7118 = 1/t7117;
            double t7119 = sqrt(t7114);
            double t7120 = t7111*2.0;
            double t7121 = EcP_3+t7120;
            double t7122 = 1/t7121;
            double t7123 = t7122*t7119;
            double t7124 = atan(t7123);
            double t7125 = 1/sqrt(t7114);
            double t7126 = rho_a[index]-rho_b[index];
            double t7127 = t7126*t7126;
            double t7128 = EcF_4*4.0;
            double t7129 = EcF_3*EcF_3;
            double t7130 = t7128-t7129;
            double t7131 = EcF_2-t7111;
            double t7132 = EcF_3*t7111;
            double t7133 = EcF_4+t7110+t7132;
            double t7134 = 1/t7133;
            double t7135 = sqrt(t7130);
            double t7136 = EcF_3+t7120;
            double t7137 = 1/t7136;
            double t7138 = t7135*t7137;
            double t7139 = atan(t7138);
            double t7140 = 1/sqrt(t7130);
            double t7141 = c*t7109*t7118;
            double t7142 = log(t7141);
            double t7143 = EcP_3*t7124*t7125*2.0;
            double t7144 = t7115*t7115;
            double t7145 = t7144*t7118;
            double t7146 = log(t7145);
            double t7147 = EcP_2*4.0;
            double t7148 = EcP_3*2.0;
            double t7149 = t7147+t7148;
            double t7150 = t7124*t7125*t7149;
            double t7151 = t7150+t7146;
            double t7152 = EcP_2*EcP_2;
            double t7153 = EcP_2*EcP_3;
            double t7154 = EcP_4+t7152+t7153;
            double t7155 = 1/t7154;
            double t7156 = t7142+t7143-EcP_2*EcP_3*t7151*t7155;
            double t7157 = EcP_1*t7156;
            double t7158 = Ac_4*4.0;
            double t7159 = Ac_3*Ac_3;
            double t7160 = t7158-t7159;
            double t7161 = Ac_2-t7111;
            double t7162 = Ac_3*t7111;
            double t7163 = Ac_4+t7110+t7162;
            double t7164 = 1/t7163;
            double t7165 = sqrt(t7160);
            double t7166 = Ac_3+t7120;
            double t7167 = 1/t7166;
            double t7168 = t7165*t7167;
            double t7169 = atan(t7168);
            double t7170 = 1/sqrt(t7160);
            double t7171 = 1/t7108;
            double t7172 = t7126*t7171;
            double t7173 = c*t7109*t7164;
            double t7174 = log(t7173);
            double t7175 = Ac_3*t7170*t7169*2.0;
            double t7176 = t7161*t7161;
            double t7177 = t7164*t7176;
            double t7178 = log(t7177);
            double t7179 = Ac_2*4.0;
            double t7180 = Ac_3*2.0;
            double t7181 = t7180+t7179;
            double t7182 = t7170*t7181*t7169;
            double t7183 = t7182+t7178;
            double t7184 = Ac_2*Ac_2;
            double t7185 = Ac_2*Ac_3;
            double t7186 = Ac_4+t7184+t7185;
            double t7187 = 1/t7186;
            double t7188 = t7174+t7175-Ac_2*Ac_3*t7183*t7187;
            functional_[index] = t7108*(t7157-(Ac_1*t7188*(1/(t7108*t7108*t7108*t7108)*(t7127*t7127)*((d2fz0* \
               (t7157-EcF_1*(log(c*t7134*t7109)+EcF_3*t7140*t7139*2.0-(EcF_2*EcF_3*(log((t7131*t7131)*t7134)+t7140* \
               t7139*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(Ac_1*t7188)+1.0)-1.0)*(pow(t7172+ \
               1.0,4.0/3.0)+pow(-t7172+1.0,4.0/3.0)-2.0))/(d2fz0*(two_13*2.0-2.0)));
        } else if (rho_a[index] > cutoff_) {
            double t9058 = rho_a[index]+rho_b[index];
            double t9059 = 1/pow(t9058,1.0/3.0);
            double t9060 = c*t9059;
            double t9061 = sqrt(t9060);
            double t9062 = EcP_4*4.0;
            double t9063 = EcP_3*EcP_3;
            double t9064 = t9062-t9063;
            double t9065 = EcP_2-t9061;
            double t9066 = EcP_3*t9061;
            double t9067 = EcP_4+t9060+t9066;
            double t9068 = 1/t9067;
            double t9069 = sqrt(t9064);
            double t9070 = t9061*2.0;
            double t9071 = EcP_3+t9070;
            double t9072 = 1/t9071;
            double t9073 = t9072*t9069;
            double t9074 = atan(t9073);
            double t9075 = 1/sqrt(t9064);
            double t9076 = EcF_4*4.0;
            double t9077 = EcF_3*EcF_3;
            double t9078 = t9076-t9077;
            double t9079 = EcF_2-t9061;
            double t9080 = EcF_3*t9061;
            double t9081 = EcF_4+t9060+t9080;
            double t9082 = 1/t9081;
            double t9083 = sqrt(t9078);
            double t9084 = EcF_3+t9070;
            double t9085 = 1/t9084;
            double t9086 = t9083*t9085;
            double t9087 = atan(t9086);
            double t9088 = 1/sqrt(t9078);
            double t9089 = c*t9059*t9068;
            double t9090 = log(t9089);
            double t9091 = EcP_3*t9074*t9075*2.0;
            double t9092 = t9065*t9065;
            double t9093 = t9092*t9068;
            double t9094 = log(t9093);
            double t9095 = EcP_2*4.0;
            double t9096 = EcP_3*2.0;
            double t9097 = t9095+t9096;
            double t9098 = t9074*t9075*t9097;
            double t9099 = t9094+t9098;
            double t9100 = EcP_2*EcP_2;
            double t9101 = EcP_2*EcP_3;
            double t9102 = EcP_4+t9100+t9101;
            double t9103 = 1/t9102;
            double t9104 = t9090+t9091-EcP_2*EcP_3*t9099*t9103;
            double t9105 = EcP_1*t9104;
            functional_[index] = t9058*(t9105-((pow(2.0,1.0/3.0)*2.0-2.0)*(t9105-EcF_1*(log(c*t9082*t9059)+EcF_3* \
               t9087*t9088*2.0-(EcF_2*EcF_3*(log(t9082*(t9079*t9079))+t9087*t9088*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else if (rho_b[index] > cutoff_) {
            double t8413 = rho_a[index]+rho_b[index];
            double t8414 = 1/pow(t8413,1.0/3.0);
            double t8415 = c*t8414;
            double t8416 = sqrt(t8415);
            double t8417 = EcP_4*4.0;
            double t8418 = EcP_3*EcP_3;
            double t8419 = t8417-t8418;
            double t8420 = EcP_2-t8416;
            double t8421 = EcP_3*t8416;
            double t8422 = EcP_4+t8421+t8415;
            double t8423 = 1/t8422;
            double t8424 = sqrt(t8419);
            double t8425 = t8416*2.0;
            double t8426 = EcP_3+t8425;
            double t8427 = 1/t8426;
            double t8428 = t8424*t8427;
            double t8429 = atan(t8428);
            double t8430 = 1/sqrt(t8419);
            double t8431 = EcF_4*4.0;
            double t8432 = EcF_3*EcF_3;
            double t8433 = t8431-t8432;
            double t8434 = EcF_2-t8416;
            double t8435 = EcF_3*t8416;
            double t8436 = EcF_4+t8415+t8435;
            double t8437 = 1/t8436;
            double t8438 = sqrt(t8433);
            double t8439 = EcF_3+t8425;
            double t8440 = 1/t8439;
            double t8441 = t8440*t8438;
            double t8442 = atan(t8441);
            double t8443 = 1/sqrt(t8433);
            double t8444 = c*t8414*t8423;
            double t8445 = log(t8444);
            double t8446 = EcP_3*t8430*t8429*2.0;
            double t8447 = t8420*t8420;
            double t8448 = t8423*t8447;
            double t8449 = log(t8448);
            double t8450 = EcP_2*4.0;
            double t8451 = EcP_3*2.0;
            double t8452 = t8450+t8451;
            double t8453 = t8430*t8452*t8429;
            double t8454 = t8453+t8449;
            double t8455 = EcP_2*EcP_2;
            double t8456 = EcP_2*EcP_3;
            double t8457 = EcP_4+t8455+t8456;
            double t8458 = 1/t8457;
            double t8459 = t8445+t8446-EcP_2*EcP_3*t8454*t8458;
            double t8460 = EcP_1*t8459;
            functional_[index] = t8413*(t8460-((pow(2.0,1.0/3.0)*2.0-2.0)*(t8460-EcF_1*(log(c*t8414*t8437)+EcF_3* \
               t8442*t8443*2.0-(EcF_2*EcF_3*(log((t8434*t8434)*t8437)+t8442*t8443*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+ \
               EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7190 = rho_a[index]+rho_b[index];
            double t7191 = 1/pow(t7190,1.0/3.0);
            double t7192 = c*t7191;
            double t7193 = sqrt(t7192);
            double t7194 = EcP_4*4.0;
            double t7195 = EcP_3*EcP_3;
            double t7196 = t7194-t7195;
            double t7197 = EcP_2-t7193;
            double t7198 = EcP_3*t7193;
            double t7199 = EcP_4+t7192+t7198;
            double t7200 = 1/t7199;
            double t7201 = sqrt(t7196);
            double t7202 = t7193*2.0;
            double t7203 = EcP_3+t7202;
            double t7204 = 1/t7203;
            double t7205 = t7201*t7204;
            double t7206 = atan(t7205);
            double t7207 = 1/sqrt(t7196);
            double t7208 = 1/pow(t7190,4.0/3.0);
            double t7209 = c*t7208*(1.0/3.0);
            double t7210 = 1/sqrt(t7192);
            double t7211 = EcP_3*c*t7210*t7208*(1.0/6.0);
            double t7212 = t7211+t7209;
            double t7213 = t7197*t7197;
            double t7214 = 1/(t7199*t7199);
            double t7215 = EcP_2*4.0;
            double t7216 = EcP_3*2.0;
            double t7217 = t7215+t7216;
            double t7218 = 1/(t7203*t7203);
            double t7219 = EcP_2*EcP_2;
            double t7220 = EcP_2*EcP_3;
            double t7221 = EcP_4+t7220+t7219;
            double t7222 = 1/t7221;
            double t7223 = t7196*t7218;
            double t7224 = t7223+1.0;
            double t7225 = 1/t7224;
            double t7226 = 1/t7190;
            double t7227 = rho_a[index]-rho_b[index];
            double t7228 = t7226*t7227;
            double t7229 = Ac_4*4.0;
            double t7230 = Ac_3*Ac_3;
            double t7231 = -t7230+t7229;
            double t7232 = Ac_2-t7193;
            double t7233 = Ac_3*t7193;
            double t7234 = Ac_4+t7192+t7233;
            double t7235 = 1/t7234;
            double t7236 = sqrt(t7231);
            double t7237 = Ac_3+t7202;
            double t7238 = 1/t7237;
            double t7239 = t7236*t7238;
            double t7240 = atan(t7239);
            double t7241 = 1/sqrt(t7231);
            double t7242 = 1/c;
            double t7243 = EcF_3*t7193;
            double t7244 = EcF_4+t7192+t7243;
            double t7245 = pow(t7190,1.0/3.0);
            double t7246 = EcF_3*c*t7210*t7208*(1.0/6.0);
            double t7247 = t7209+t7246;
            double t7248 = EcF_2-t7193;
            double t7249 = 1/(t7244*t7244);
            double t7250 = 1/t7244;
            double t7251 = EcF_3+t7202;
            double t7252 = 1/(t7251*t7251);
            double t7253 = EcF_4*4.0;
            double t7254 = EcF_3*EcF_3;
            double t7255 = t7253-t7254;
            double t7256 = t7252*t7255;
            double t7257 = t7256+1.0;
            double t7258 = 1/t7257;
            double t7259 = c*t7200*t7208*(1.0/3.0);
            double t7260 = t7259-c*t7191*t7212*t7214;
            double t7261 = t7199*t7242*t7260*t7245;
            double t7262 = t7212*t7213*t7214;
            double t7263 = c*t7197*t7200*t7210*t7208*(1.0/3.0);
            double t7264 = t7262+t7263;
            double t7265 = 1/(t7197*t7197);
            double t7266 = t7199*t7264*t7265;
            double t7267 = c*t7210*t7225*t7208*t7217*t7218*(1.0/3.0);
            double t7268 = t7266+t7267;
            double t7269 = EcP_2*EcP_3*t7222*t7268;
            double t7270 = t7261+t7269-EcP_3*c*t7210*t7225*t7208*t7218*(2.0/3.0);
            double t7271 = EcP_1*t7270;
            double t7272 = c*t7191*t7235;
            double t7273 = log(t7272);
            double t7274 = Ac_3*t7240*t7241*2.0;
            double t7275 = t7232*t7232;
            double t7276 = t7235*t7275;
            double t7277 = log(t7276);
            double t7278 = Ac_2*4.0;
            double t7279 = Ac_3*2.0;
            double t7280 = t7278+t7279;
            double t7281 = t7240*t7241*t7280;
            double t7282 = t7281+t7277;
            double t7283 = Ac_2*Ac_2;
            double t7284 = Ac_2*Ac_3;
            double t7285 = Ac_4+t7283+t7284;
            double t7286 = 1/t7285;
            double t7311 = Ac_2*Ac_3*t7282*t7286;
            double t7287 = t7273+t7274-t7311;
            double t7288 = 1/Ac_1;
            double t7289 = t7248*t7248;
            double t7290 = sqrt(t7255);
            double t7291 = 1/t7251;
            double t7292 = t7290*t7291;
            double t7293 = atan(t7292);
            double t7294 = 1/sqrt(t7255);
            double t7295 = EcF_2*4.0;
            double t7296 = EcF_3*2.0;
            double t7297 = t7295+t7296;
            double t7298 = EcF_2*EcF_2;
            double t7299 = EcF_2*EcF_3;
            double t7300 = EcF_4+t7298+t7299;
            double t7301 = 1/t7300;
            double t7302 = c*t7191*t7200;
            double t7303 = log(t7302);
            double t7304 = EcP_3*t7206*t7207*2.0;
            double t7305 = t7200*t7213;
            double t7306 = log(t7305);
            double t7307 = t7206*t7207*t7217;
            double t7308 = t7306+t7307;
            double t7329 = EcP_2*EcP_3*t7222*t7308;
            double t7309 = t7303+t7304-t7329;
            double t7310 = EcP_1*t7309;
            double t7312 = Ac_3*c*t7210*t7208*(1.0/6.0);
            double t7313 = t7209+t7312;
            double t7314 = 1/(t7234*t7234);
            double t7315 = 1/(t7237*t7237);
            double t7316 = t7231*t7315;
            double t7317 = t7316+1.0;
            double t7318 = 1/t7317;
            double t7319 = t7227*t7227;
            double t7320 = 1/(t7190*t7190*t7190*t7190);
            double t7321 = c*t7191*t7250;
            double t7322 = log(t7321);
            double t7323 = EcF_3*t7293*t7294*2.0;
            double t7324 = t7250*t7289;
            double t7325 = log(t7324);
            double t7326 = t7293*t7294*t7297;
            double t7327 = t7325+t7326;
            double t7333 = EcF_2*EcF_3*t7301*t7327;
            double t7328 = t7322+t7323-t7333;
            double t7330 = 1/t7287;
            double t7334 = EcF_1*t7328;
            double t7331 = t7310-t7334;
            double t7332 = t7319*t7319;
            double t7335 = d2fz0*t7288*t7330*t7331;
            double t7336 = t7335+1.0;
            double t7337 = 1/d2fz0;
            double t7338 = two_13*2.0;
            double t7339 = t7338-2.0;
            double t7340 = 1/t7339;
            double t7341 = t7228+1.0;
            double t7342 = pow(t7341,4.0/3.0);
            double t7343 = -t7228+1.0;
            double t7344 = pow(t7343,4.0/3.0);
            double t7345 = t7342+t7344-2.0;
            double t7346 = c*t7208*t7235*(1.0/3.0);
            double t7347 = t7346-c*t7191*t7313*t7314;
            double t7348 = t7242*t7234*t7245*t7347;
            double t7349 = t7275*t7313*t7314;
            double t7350 = c*t7210*t7232*t7208*t7235*(1.0/3.0);
            double t7351 = t7350+t7349;
            double t7352 = 1/(t7232*t7232);
            double t7353 = t7234*t7351*t7352;
            double t7354 = c*t7210*t7208*t7280*t7315*t7318*(1.0/3.0);
            double t7355 = t7353+t7354;
            double t7356 = Ac_2*Ac_3*t7286*t7355;
            double t7357 = t7356+t7348-Ac_3*c*t7210*t7208*t7315*t7318*(2.0/3.0);
            double t7358 = 1/(t7190*t7190);
            double t7359 = t7226-t7227*t7358;
            double t7360 = t7320*t7332*t7336;
            double t7361 = t7360-1.0;
            v_rho_a_[index] = t7310-t7190*(t7271-Ac_1*t7287*t7340*t7345*t7337*(1/(t7190*t7190*t7190*t7190*t7190) \
               *t7332*t7336*4.0+t7320*t7332*(d2fz0*t7288*t7330*(t7271-EcF_1*(EcF_2*EcF_3*t7301*(t7244*1/(t7248*t7248) \
               *(t7247*t7249*t7289+c*t7210*t7250*t7208*t7248*(1.0/3.0))+c*t7210*t7252*t7208*t7258*t7297*(1.0/3.0) \
               )+t7242*t7244*t7245*(c*t7250*t7208*(1.0/3.0)-c*t7191*t7247*t7249)-EcF_3*c*t7210*t7252*t7208*t7258* \
               (2.0/3.0)))-d2fz0*1/(t7287*t7287)*t7288*t7331*t7357)-t7227*t7320*t7336*t7319*4.0)+Ac_1*t7287*t7340* \
               t7361*t7337*(pow(t7341,1.0/3.0)*t7359*(4.0/3.0)-pow(t7343,1.0/3.0)*t7359*(4.0/3.0))-Ac_1*t7340*t7361* \
               t7345*t7337*t7357)-Ac_1*t7287*t7340*t7361*t7345*t7337;
        } else if (rho_a[index] > cutoff_) {
            double t9107 = rho_a[index]+rho_b[index];
            double t9108 = 1/pow(t9107,1.0/3.0);
            double t9109 = c*t9108;
            double t9110 = sqrt(t9109);
            double t9111 = EcP_4*4.0;
            double t9112 = EcP_3*EcP_3;
            double t9113 = t9111-t9112;
            double t9114 = EcP_2-t9110;
            double t9115 = EcP_3*t9110;
            double t9116 = EcP_4+t9115+t9109;
            double t9117 = 1/t9116;
            double t9118 = sqrt(t9113);
            double t9119 = t9110*2.0;
            double t9120 = EcP_3+t9119;
            double t9121 = 1/t9120;
            double t9122 = t9121*t9118;
            double t9123 = atan(t9122);
            double t9124 = 1/sqrt(t9113);
            double t9125 = 1/pow(t9107,4.0/3.0);
            double t9126 = c*t9125*(1.0/3.0);
            double t9127 = 1/sqrt(t9109);
            double t9128 = EcP_3*c*t9125*t9127*(1.0/6.0);
            double t9129 = t9126+t9128;
            double t9130 = t9114*t9114;
            double t9131 = 1/(t9116*t9116);
            double t9132 = EcP_2*4.0;
            double t9133 = EcP_3*2.0;
            double t9134 = t9132+t9133;
            double t9135 = 1/(t9120*t9120);
            double t9136 = EcP_2*EcP_2;
            double t9137 = EcP_2*EcP_3;
            double t9138 = EcP_4+t9136+t9137;
            double t9139 = 1/t9138;
            double t9140 = t9113*t9135;
            double t9141 = t9140+1.0;
            double t9142 = 1/t9141;
            double t9143 = 1/c;
            double t9144 = EcF_3*t9110;
            double t9145 = EcF_4+t9144+t9109;
            double t9146 = pow(t9107,1.0/3.0);
            double t9147 = EcF_3*c*t9125*t9127*(1.0/6.0);
            double t9148 = t9126+t9147;
            double t9149 = EcF_2-t9110;
            double t9150 = 1/(t9145*t9145);
            double t9151 = 1/t9145;
            double t9152 = EcF_3+t9119;
            double t9153 = 1/(t9152*t9152);
            double t9154 = EcF_4*4.0;
            double t9155 = EcF_3*EcF_3;
            double t9156 = t9154-t9155;
            double t9157 = t9153*t9156;
            double t9158 = t9157+1.0;
            double t9159 = 1/t9158;
            double t9160 = c*t9125*t9117*(1.0/3.0);
            double t9161 = t9160-c*t9131*t9108*t9129;
            double t9162 = t9116*t9143*t9161*t9146;
            double t9163 = t9130*t9131*t9129;
            double t9164 = c*t9114*t9125*t9117*t9127*(1.0/3.0);
            double t9165 = t9163+t9164;
            double t9166 = 1/(t9114*t9114);
            double t9167 = t9116*t9165*t9166;
            double t9168 = c*t9142*t9125*t9134*t9135*t9127*(1.0/3.0);
            double t9169 = t9167+t9168;
            double t9170 = EcP_2*EcP_3*t9139*t9169;
            double t9171 = t9170+t9162-EcP_3*c*t9142*t9125*t9135*t9127*(2.0/3.0);
            double t9172 = EcP_1*t9171;
            double t9173 = pow(2.0,1.0/3.0);
            double t9174 = t9173*2.0;
            double t9175 = t9174-2.0;
            double t9176 = two_13*2.0;
            double t9177 = t9176-2.0;
            double t9178 = 1/t9177;
            double t9179 = t9149*t9149;
            double t9180 = sqrt(t9156);
            double t9181 = 1/t9152;
            double t9182 = t9180*t9181;
            double t9183 = atan(t9182);
            double t9184 = 1/sqrt(t9156);
            double t9185 = EcF_2*4.0;
            double t9186 = EcF_3*2.0;
            double t9187 = t9185+t9186;
            double t9188 = EcF_2*EcF_2;
            double t9189 = EcF_2*EcF_3;
            double t9190 = EcF_4+t9188+t9189;
            double t9191 = 1/t9190;
            double t9192 = c*t9108*t9117;
            double t9193 = log(t9192);
            double t9194 = EcP_3*t9123*t9124*2.0;
            double t9195 = t9130*t9117;
            double t9196 = log(t9195);
            double t9197 = t9123*t9124*t9134;
            double t9198 = t9196+t9197;
            double t9199 = t9193+t9194-EcP_2*EcP_3*t9139*t9198;
            double t9200 = EcP_1*t9199;
            v_rho_a_[index] = t9200-t9107*(t9172-t9175*t9178*(t9172-EcF_1*(EcF_2*EcF_3*t9191*(t9145*1/(t9149* \
               t9149)*(t9150*t9148*t9179+c*t9151*t9125*t9127*t9149*(1.0/3.0))+c*t9125*t9153*t9127*t9159*t9187*(1.0/ \
               3.0))+t9143*t9145*t9146*(c*t9151*t9125*(1.0/3.0)-c*t9150*t9108*t9148)-EcF_3*c*t9125*t9153*t9127*t9159* \
               (2.0/3.0))))-t9175*t9178*(t9200-EcF_1*(log(c*t9151*t9108)+EcF_3*t9183*t9184*2.0-EcF_2*EcF_3*t9191* \
               (log(t9151*t9179)+t9183*t9184*t9187)));
        } else if (rho_b[index] > cutoff_) {
            double t8462 = rho_a[index]+rho_b[index];
            double t8463 = 1/pow(t8462,1.0/3.0);
            double t8464 = c*t8463;
            double t8465 = sqrt(t8464);
            double t8466 = EcP_4*4.0;
            double t8467 = EcP_3*EcP_3;
            double t8468 = t8466-t8467;
            double t8469 = EcP_2-t8465;
            double t8470 = EcP_3*t8465;
            double t8471 = EcP_4+t8470+t8464;
            double t8472 = 1/t8471;
            double t8473 = sqrt(t8468);
            double t8474 = t8465*2.0;
            double t8475 = EcP_3+t8474;
            double t8476 = 1/t8475;
            double t8477 = t8473*t8476;
            double t8478 = atan(t8477);
            double t8479 = 1/sqrt(t8468);
            double t8480 = 1/pow(t8462,4.0/3.0);
            double t8481 = c*t8480*(1.0/3.0);
            double t8482 = 1/sqrt(t8464);
            double t8483 = EcP_3*c*t8480*t8482*(1.0/6.0);
            double t8484 = t8481+t8483;
            double t8485 = t8469*t8469;
            double t8486 = 1/(t8471*t8471);
            double t8487 = EcP_2*4.0;
            double t8488 = EcP_3*2.0;
            double t8489 = t8487+t8488;
            double t8490 = 1/(t8475*t8475);
            double t8491 = EcP_2*EcP_2;
            double t8492 = EcP_2*EcP_3;
            double t8493 = EcP_4+t8491+t8492;
            double t8494 = 1/t8493;
            double t8495 = t8490*t8468;
            double t8496 = t8495+1.0;
            double t8497 = 1/t8496;
            double t8498 = 1/c;
            double t8499 = EcF_3*t8465;
            double t8500 = EcF_4+t8464+t8499;
            double t8501 = pow(t8462,1.0/3.0);
            double t8502 = EcF_3*c*t8480*t8482*(1.0/6.0);
            double t8503 = t8481+t8502;
            double t8504 = EcF_2-t8465;
            double t8505 = 1/(t8500*t8500);
            double t8506 = 1/t8500;
            double t8507 = EcF_3+t8474;
            double t8508 = 1/(t8507*t8507);
            double t8509 = EcF_4*4.0;
            double t8510 = EcF_3*EcF_3;
            double t8511 = t8510-t8509;
            double t8512 = t8511*t8508;
            double t8513 = t8512-1.0;
            double t8514 = 1/t8513;
            double t8515 = c*t8480*t8472*(1.0/3.0);
            double t8516 = t8515-c*t8463*t8484*t8486;
            double t8517 = t8471*t8498*t8501*t8516;
            double t8518 = t8484*t8485*t8486;
            double t8519 = c*t8480*t8472*t8482*t8469*(1.0/3.0);
            double t8520 = t8518+t8519;
            double t8521 = 1/(t8469*t8469);
            double t8522 = t8471*t8520*t8521;
            double t8523 = c*t8480*t8490*t8482*t8497*t8489*(1.0/3.0);
            double t8524 = t8522+t8523;
            double t8525 = EcP_2*EcP_3*t8494*t8524;
            double t8526 = t8525+t8517-EcP_3*c*t8480*t8490*t8482*t8497*(2.0/3.0);
            double t8527 = EcP_1*t8526;
            double t8528 = pow(2.0,1.0/3.0);
            double t8529 = t8528*2.0;
            double t8530 = t8529-2.0;
            double t8531 = two_13*2.0;
            double t8532 = t8531-2.0;
            double t8533 = 1/t8532;
            double t8534 = -t8510+t8509;
            double t8535 = t8504*t8504;
            double t8536 = sqrt(t8534);
            double t8537 = 1/t8507;
            double t8538 = t8536*t8537;
            double t8539 = atan(t8538);
            double t8540 = 1/sqrt(t8534);
            double t8541 = EcF_2*4.0;
            double t8542 = EcF_3*2.0;
            double t8543 = t8541+t8542;
            double t8544 = EcF_2*EcF_2;
            double t8545 = EcF_2*EcF_3;
            double t8546 = EcF_4+t8544+t8545;
            double t8547 = 1/t8546;
            double t8548 = c*t8463*t8472;
            double t8549 = log(t8548);
            double t8550 = EcP_3*t8478*t8479*2.0;
            double t8551 = t8472*t8485;
            double t8552 = log(t8551);
            double t8553 = t8478*t8479*t8489;
            double t8554 = t8552+t8553;
            double t8555 = t8550+t8549-EcP_2*EcP_3*t8494*t8554;
            double t8556 = EcP_1*t8555;
            v_rho_a_[index] = t8556-t8462*(t8527-t8530*t8533*(t8527-EcF_1*(EcF_2*EcF_3*t8547*(t8500*1/(t8504* \
               t8504)*(t8503*t8505*t8535+c*t8480*t8482*t8504*t8506*(1.0/3.0))-c*t8480*t8482*t8514*t8543*t8508*(1.0/ \
               3.0))+t8498*t8500*t8501*(c*t8480*t8506*(1.0/3.0)-c*t8463*t8503*t8505)+EcF_3*c*t8480*t8482*t8514*t8508* \
               (2.0/3.0))))-t8530*t8533*(t8556-EcF_1*(log(c*t8463*t8506)+EcF_3*t8540*t8539*2.0-EcF_2*EcF_3*t8547* \
               (log(t8506*t8535)+t8540*t8543*t8539)));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7363 = rho_a[index]+rho_b[index];
            double t7364 = 1/pow(t7363,1.0/3.0);
            double t7365 = c*t7364;
            double t7366 = sqrt(t7365);
            double t7367 = EcP_4*4.0;
            double t7368 = EcP_3*EcP_3;
            double t7369 = t7367-t7368;
            double t7370 = EcP_2-t7366;
            double t7371 = EcP_3*t7366;
            double t7372 = EcP_4+t7371+t7365;
            double t7373 = 1/t7372;
            double t7374 = sqrt(t7369);
            double t7375 = t7366*2.0;
            double t7376 = EcP_3+t7375;
            double t7377 = 1/t7376;
            double t7378 = t7374*t7377;
            double t7379 = atan(t7378);
            double t7380 = 1/sqrt(t7369);
            double t7381 = 1/pow(t7363,4.0/3.0);
            double t7382 = c*t7381*(1.0/3.0);
            double t7383 = 1/sqrt(t7365);
            double t7384 = EcP_3*c*t7381*t7383*(1.0/6.0);
            double t7385 = t7382+t7384;
            double t7386 = t7370*t7370;
            double t7387 = 1/(t7372*t7372);
            double t7388 = EcP_2*4.0;
            double t7389 = EcP_3*2.0;
            double t7390 = t7388+t7389;
            double t7391 = 1/(t7376*t7376);
            double t7392 = EcP_2*EcP_2;
            double t7393 = EcP_2*EcP_3;
            double t7394 = EcP_4+t7392+t7393;
            double t7395 = 1/t7394;
            double t7396 = t7391*t7369;
            double t7397 = t7396+1.0;
            double t7398 = 1/t7397;
            double t7399 = 1/t7363;
            double t7400 = rho_a[index]-rho_b[index];
            double t7401 = t7399*t7400;
            double t7402 = Ac_4*4.0;
            double t7403 = Ac_3*Ac_3;
            double t7404 = t7402-t7403;
            double t7405 = Ac_2-t7366;
            double t7406 = Ac_3*t7366;
            double t7407 = Ac_4+t7365+t7406;
            double t7408 = 1/t7407;
            double t7409 = sqrt(t7404);
            double t7410 = Ac_3+t7375;
            double t7411 = 1/t7410;
            double t7412 = t7411*t7409;
            double t7413 = atan(t7412);
            double t7414 = 1/sqrt(t7404);
            double t7415 = 1/c;
            double t7416 = EcF_3*t7366;
            double t7417 = EcF_4+t7365+t7416;
            double t7418 = pow(t7363,1.0/3.0);
            double t7419 = EcF_3*c*t7381*t7383*(1.0/6.0);
            double t7420 = t7382+t7419;
            double t7421 = EcF_2-t7366;
            double t7422 = 1/(t7417*t7417);
            double t7423 = 1/t7417;
            double t7424 = EcF_3+t7375;
            double t7425 = 1/(t7424*t7424);
            double t7426 = EcF_4*4.0;
            double t7427 = EcF_3*EcF_3;
            double t7428 = t7426-t7427;
            double t7429 = t7425*t7428;
            double t7430 = t7429+1.0;
            double t7431 = 1/t7430;
            double t7432 = c*t7381*t7373*(1.0/3.0);
            double t7433 = t7432-c*t7364*t7385*t7387;
            double t7434 = t7372*t7415*t7433*t7418;
            double t7435 = t7385*t7386*t7387;
            double t7436 = c*t7370*t7381*t7373*t7383*(1.0/3.0);
            double t7437 = t7435+t7436;
            double t7438 = 1/(t7370*t7370);
            double t7439 = t7372*t7437*t7438;
            double t7440 = c*t7381*t7390*t7391*t7383*t7398*(1.0/3.0);
            double t7441 = t7440+t7439;
            double t7442 = EcP_2*EcP_3*t7395*t7441;
            double t7443 = t7442+t7434-EcP_3*c*t7381*t7391*t7383*t7398*(2.0/3.0);
            double t7444 = EcP_1*t7443;
            double t7445 = c*t7364*t7408;
            double t7446 = log(t7445);
            double t7447 = Ac_3*t7413*t7414*2.0;
            double t7448 = t7405*t7405;
            double t7449 = t7408*t7448;
            double t7450 = log(t7449);
            double t7451 = Ac_2*4.0;
            double t7452 = Ac_3*2.0;
            double t7453 = t7451+t7452;
            double t7454 = t7413*t7414*t7453;
            double t7455 = t7450+t7454;
            double t7456 = Ac_2*Ac_2;
            double t7457 = Ac_2*Ac_3;
            double t7458 = Ac_4+t7456+t7457;
            double t7459 = 1/t7458;
            double t7484 = Ac_2*Ac_3*t7455*t7459;
            double t7460 = t7446+t7447-t7484;
            double t7461 = 1/Ac_1;
            double t7462 = t7421*t7421;
            double t7463 = sqrt(t7428);
            double t7464 = 1/t7424;
            double t7465 = t7463*t7464;
            double t7466 = atan(t7465);
            double t7467 = 1/sqrt(t7428);
            double t7468 = EcF_2*4.0;
            double t7469 = EcF_3*2.0;
            double t7470 = t7468+t7469;
            double t7471 = EcF_2*EcF_2;
            double t7472 = EcF_2*EcF_3;
            double t7473 = EcF_4+t7471+t7472;
            double t7474 = 1/t7473;
            double t7475 = c*t7364*t7373;
            double t7476 = log(t7475);
            double t7477 = EcP_3*t7380*t7379*2.0;
            double t7478 = t7373*t7386;
            double t7479 = log(t7478);
            double t7480 = t7380*t7390*t7379;
            double t7481 = t7480+t7479;
            double t7502 = EcP_2*EcP_3*t7395*t7481;
            double t7482 = t7476+t7477-t7502;
            double t7483 = EcP_1*t7482;
            double t7485 = Ac_3*c*t7381*t7383*(1.0/6.0);
            double t7486 = t7382+t7485;
            double t7487 = 1/(t7407*t7407);
            double t7488 = 1/(t7410*t7410);
            double t7489 = t7404*t7488;
            double t7490 = t7489+1.0;
            double t7491 = 1/t7490;
            double t7492 = t7400*t7400;
            double t7493 = 1/(t7363*t7363*t7363*t7363);
            double t7494 = c*t7364*t7423;
            double t7495 = log(t7494);
            double t7496 = EcF_3*t7466*t7467*2.0;
            double t7497 = t7423*t7462;
            double t7498 = log(t7497);
            double t7499 = t7470*t7466*t7467;
            double t7500 = t7498+t7499;
            double t7506 = EcF_2*EcF_3*t7474*t7500;
            double t7501 = t7495+t7496-t7506;
            double t7503 = 1/t7460;
            double t7507 = EcF_1*t7501;
            double t7504 = t7483-t7507;
            double t7505 = t7492*t7492;
            double t7508 = d2fz0*t7461*t7503*t7504;
            double t7509 = t7508+1.0;
            double t7510 = 1/d2fz0;
            double t7511 = two_13*2.0;
            double t7512 = t7511-2.0;
            double t7513 = 1/t7512;
            double t7514 = t7401+1.0;
            double t7515 = pow(t7514,4.0/3.0);
            double t7516 = -t7401+1.0;
            double t7517 = pow(t7516,4.0/3.0);
            double t7518 = t7515+t7517-2.0;
            double t7519 = c*t7381*t7408*(1.0/3.0);
            double t7520 = t7519-c*t7364*t7486*t7487;
            double t7521 = t7415*t7407*t7418*t7520;
            double t7522 = t7448*t7486*t7487;
            double t7523 = c*t7381*t7383*t7405*t7408*(1.0/3.0);
            double t7524 = t7522+t7523;
            double t7525 = 1/(t7405*t7405);
            double t7526 = t7407*t7524*t7525;
            double t7527 = c*t7381*t7383*t7453*t7491*t7488*(1.0/3.0);
            double t7528 = t7526+t7527;
            double t7529 = Ac_2*Ac_3*t7459*t7528;
            double t7530 = t7521+t7529-Ac_3*c*t7381*t7383*t7491*t7488*(2.0/3.0);
            double t7531 = 1/(t7363*t7363);
            double t7532 = t7400*t7531;
            double t7533 = t7399+t7532;
            double t7534 = t7493*t7505*t7509;
            double t7535 = t7534-1.0;
            v_rho_b_[index] = t7483+t7363*(-t7444+Ac_1*t7460*t7510*t7513*t7518*(1/(t7363*t7363*t7363*t7363*t7363) \
               *t7505*t7509*4.0+t7493*t7505*(d2fz0*t7461*t7503*(t7444-EcF_1*(EcF_2*EcF_3*t7474*(1/(t7421*t7421)*t7417* \
               (t7420*t7422*t7462+c*t7381*t7383*t7421*t7423*(1.0/3.0))+c*t7381*t7383*t7431*t7425*t7470*(1.0/3.0)) \
               +t7415*t7417*t7418*(c*t7381*t7423*(1.0/3.0)-c*t7364*t7420*t7422)-EcF_3*c*t7381*t7383*t7431*t7425*(2.0/ \
               3.0)))-d2fz0*1/(t7460*t7460)*t7461*t7530*t7504)+t7400*t7492*t7493*t7509*4.0)+Ac_1*t7460*t7510*t7513* \
               t7535*(pow(t7514,1.0/3.0)*t7533*(4.0/3.0)-t7533*pow(t7516,1.0/3.0)*(4.0/3.0))+Ac_1*t7510*t7530*t7513* \
               t7535*t7518)-Ac_1*t7460*t7510*t7513*t7535*t7518;
        } else if (rho_a[index] > cutoff_) {
            double t9202 = rho_a[index]+rho_b[index];
            double t9203 = 1/pow(t9202,1.0/3.0);
            double t9204 = c*t9203;
            double t9205 = sqrt(t9204);
            double t9206 = EcP_4*4.0;
            double t9207 = EcP_3*EcP_3;
            double t9208 = t9206-t9207;
            double t9209 = EcP_2-t9205;
            double t9210 = EcP_3*t9205;
            double t9211 = EcP_4+t9210+t9204;
            double t9212 = 1/t9211;
            double t9213 = sqrt(t9208);
            double t9214 = t9205*2.0;
            double t9215 = EcP_3+t9214;
            double t9216 = 1/t9215;
            double t9217 = t9213*t9216;
            double t9218 = atan(t9217);
            double t9219 = 1/sqrt(t9208);
            double t9220 = 1/pow(t9202,4.0/3.0);
            double t9221 = c*t9220*(1.0/3.0);
            double t9222 = 1/sqrt(t9204);
            double t9223 = EcP_3*c*t9220*t9222*(1.0/6.0);
            double t9224 = t9221+t9223;
            double t9225 = t9209*t9209;
            double t9226 = 1/(t9211*t9211);
            double t9227 = EcP_2*4.0;
            double t9228 = EcP_3*2.0;
            double t9229 = t9227+t9228;
            double t9230 = 1/(t9215*t9215);
            double t9231 = EcP_2*EcP_2;
            double t9232 = EcP_2*EcP_3;
            double t9233 = EcP_4+t9231+t9232;
            double t9234 = 1/t9233;
            double t9235 = t9230*t9208;
            double t9236 = t9235+1.0;
            double t9237 = 1/t9236;
            double t9238 = 1/c;
            double t9239 = EcF_3*t9205;
            double t9240 = EcF_4+t9204+t9239;
            double t9241 = pow(t9202,1.0/3.0);
            double t9242 = EcF_3*c*t9220*t9222*(1.0/6.0);
            double t9243 = t9221+t9242;
            double t9244 = EcF_2-t9205;
            double t9245 = 1/(t9240*t9240);
            double t9246 = 1/t9240;
            double t9247 = EcF_3+t9214;
            double t9248 = 1/(t9247*t9247);
            double t9249 = EcF_4*4.0;
            double t9250 = EcF_3*EcF_3;
            double t9251 = t9250-t9249;
            double t9252 = t9251*t9248;
            double t9253 = t9252-1.0;
            double t9254 = 1/t9253;
            double t9255 = c*t9220*t9212*(1.0/3.0);
            double t9256 = t9255-c*t9203*t9224*t9226;
            double t9257 = t9211*t9241*t9238*t9256;
            double t9258 = t9224*t9225*t9226;
            double t9259 = c*t9220*t9212*t9222*t9209*(1.0/3.0);
            double t9260 = t9258+t9259;
            double t9261 = 1/(t9209*t9209);
            double t9262 = t9211*t9260*t9261;
            double t9263 = c*t9220*t9230*t9222*t9237*t9229*(1.0/3.0);
            double t9264 = t9262+t9263;
            double t9265 = EcP_2*EcP_3*t9234*t9264;
            double t9266 = t9265+t9257-EcP_3*c*t9220*t9230*t9222*t9237*(2.0/3.0);
            double t9267 = EcP_1*t9266;
            double t9268 = pow(2.0,1.0/3.0);
            double t9269 = t9268*2.0;
            double t9270 = t9269-2.0;
            double t9271 = two_13*2.0;
            double t9272 = t9271-2.0;
            double t9273 = 1/t9272;
            double t9274 = -t9250+t9249;
            double t9275 = t9244*t9244;
            double t9276 = sqrt(t9274);
            double t9277 = 1/t9247;
            double t9278 = t9276*t9277;
            double t9279 = atan(t9278);
            double t9280 = 1/sqrt(t9274);
            double t9281 = EcF_2*4.0;
            double t9282 = EcF_3*2.0;
            double t9283 = t9281+t9282;
            double t9284 = EcF_2*EcF_2;
            double t9285 = EcF_2*EcF_3;
            double t9286 = EcF_4+t9284+t9285;
            double t9287 = 1/t9286;
            double t9288 = c*t9203*t9212;
            double t9289 = log(t9288);
            double t9290 = EcP_3*t9218*t9219*2.0;
            double t9291 = t9212*t9225;
            double t9292 = log(t9291);
            double t9293 = t9218*t9219*t9229;
            double t9294 = t9292+t9293;
            double t9295 = t9290+t9289-EcP_2*EcP_3*t9234*t9294;
            double t9296 = EcP_1*t9295;
            v_rho_b_[index] = t9296-t9202*(t9267-t9270*t9273*(t9267-EcF_1*(EcF_2*EcF_3*t9287*(t9240*1/(t9244* \
               t9244)*(t9243*t9245*t9275+c*t9220*t9222*t9244*t9246*(1.0/3.0))-c*t9220*t9222*t9254*t9283*t9248*(1.0/ \
               3.0))+t9240*t9241*t9238*(c*t9220*t9246*(1.0/3.0)-c*t9203*t9243*t9245)+EcF_3*c*t9220*t9222*t9254*t9248* \
               (2.0/3.0))))-t9270*t9273*(t9296-EcF_1*(log(c*t9203*t9246)+EcF_3*t9280*t9279*2.0-EcF_2*EcF_3*t9287* \
               (log(t9246*t9275)+t9280*t9283*t9279)));
        } else if (rho_b[index] > cutoff_) {
            double t8558 = rho_a[index]+rho_b[index];
            double t8559 = 1/pow(t8558,1.0/3.0);
            double t8560 = c*t8559;
            double t8561 = sqrt(t8560);
            double t8562 = EcP_4*4.0;
            double t8563 = EcP_3*EcP_3;
            double t8564 = t8562-t8563;
            double t8565 = EcP_2-t8561;
            double t8566 = EcP_3*t8561;
            double t8567 = EcP_4+t8560+t8566;
            double t8568 = 1/t8567;
            double t8569 = sqrt(t8564);
            double t8570 = t8561*2.0;
            double t8571 = EcP_3+t8570;
            double t8572 = 1/t8571;
            double t8573 = t8572*t8569;
            double t8574 = atan(t8573);
            double t8575 = 1/sqrt(t8564);
            double t8576 = 1/pow(t8558,4.0/3.0);
            double t8577 = c*t8576*(1.0/3.0);
            double t8578 = 1/sqrt(t8560);
            double t8579 = EcP_3*c*t8576*t8578*(1.0/6.0);
            double t8580 = t8577+t8579;
            double t8581 = t8565*t8565;
            double t8582 = 1/(t8567*t8567);
            double t8583 = EcP_2*4.0;
            double t8584 = EcP_3*2.0;
            double t8585 = t8583+t8584;
            double t8586 = 1/(t8571*t8571);
            double t8587 = EcP_2*EcP_2;
            double t8588 = EcP_2*EcP_3;
            double t8589 = EcP_4+t8587+t8588;
            double t8590 = 1/t8589;
            double t8591 = t8564*t8586;
            double t8592 = t8591+1.0;
            double t8593 = 1/t8592;
            double t8594 = 1/c;
            double t8595 = EcF_3*t8561;
            double t8596 = EcF_4+t8560+t8595;
            double t8597 = pow(t8558,1.0/3.0);
            double t8598 = EcF_3*c*t8576*t8578*(1.0/6.0);
            double t8599 = t8577+t8598;
            double t8600 = EcF_2-t8561;
            double t8601 = 1/(t8596*t8596);
            double t8602 = 1/t8596;
            double t8603 = EcF_3+t8570;
            double t8604 = 1/(t8603*t8603);
            double t8605 = EcF_4*4.0;
            double t8606 = EcF_3*EcF_3;
            double t8607 = t8605-t8606;
            double t8608 = t8604*t8607;
            double t8609 = t8608+1.0;
            double t8610 = 1/t8609;
            double t8611 = c*t8576*t8568*(1.0/3.0);
            double t8612 = t8611-c*t8580*t8582*t8559;
            double t8613 = t8567*t8594*t8597*t8612;
            double t8614 = t8580*t8581*t8582;
            double t8615 = c*t8565*t8576*t8568*t8578*(1.0/3.0);
            double t8616 = t8614+t8615;
            double t8617 = 1/(t8565*t8565);
            double t8618 = t8567*t8616*t8617;
            double t8619 = c*t8593*t8576*t8585*t8586*t8578*(1.0/3.0);
            double t8620 = t8618+t8619;
            double t8621 = EcP_2*EcP_3*t8590*t8620;
            double t8622 = t8621+t8613-EcP_3*c*t8593*t8576*t8586*t8578*(2.0/3.0);
            double t8623 = EcP_1*t8622;
            double t8624 = pow(2.0,1.0/3.0);
            double t8625 = t8624*2.0;
            double t8626 = t8625-2.0;
            double t8627 = two_13*2.0;
            double t8628 = t8627-2.0;
            double t8629 = 1/t8628;
            double t8630 = t8600*t8600;
            double t8631 = sqrt(t8607);
            double t8632 = 1/t8603;
            double t8633 = t8631*t8632;
            double t8634 = atan(t8633);
            double t8635 = 1/sqrt(t8607);
            double t8636 = EcF_2*4.0;
            double t8637 = EcF_3*2.0;
            double t8638 = t8636+t8637;
            double t8639 = EcF_2*EcF_2;
            double t8640 = EcF_2*EcF_3;
            double t8641 = EcF_4+t8640+t8639;
            double t8642 = 1/t8641;
            double t8643 = c*t8559*t8568;
            double t8644 = log(t8643);
            double t8645 = EcP_3*t8574*t8575*2.0;
            double t8646 = t8581*t8568;
            double t8647 = log(t8646);
            double t8648 = t8574*t8575*t8585;
            double t8649 = t8647+t8648;
            double t8650 = t8644+t8645-EcP_2*EcP_3*t8590*t8649;
            double t8651 = EcP_1*t8650;
            v_rho_b_[index] = t8651-t8558*(t8623-t8626*t8629*(t8623-EcF_1*(EcF_2*EcF_3*t8642*(t8596*1/(t8600* \
               t8600)*(t8599*t8601*t8630+c*t8576*t8578*t8600*t8602*(1.0/3.0))+c*t8576*t8578*t8610*t8604*t8638*(1.0/ \
               3.0))+t8594*t8596*t8597*(c*t8576*t8602*(1.0/3.0)-c*t8559*t8599*t8601)-EcF_3*c*t8576*t8578*t8610*t8604* \
               (2.0/3.0))))-t8626*t8629*(t8651-EcF_1*(log(c*t8559*t8602)+EcF_3*t8634*t8635*2.0-EcF_2*EcF_3*t8642* \
               (log(t8602*t8630)+t8634*t8635*t8638)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7542 = rho_a[index]+rho_b[index];
            double t7543 = 1/pow(t7542,1.0/3.0);
            double t7544 = c*t7543;
            double t7545 = 1/pow(t7542,4.0/3.0);
            double t7546 = sqrt(t7544);
            double t7547 = EcP_3*t7546;
            double t7548 = EcP_4+t7544+t7547;
            double t7549 = c*t7545*(1.0/3.0);
            double t7550 = 1/sqrt(t7544);
            double t7551 = EcP_3*c*t7550*t7545*(1.0/6.0);
            double t7552 = t7551+t7549;
            double t7553 = 1/c;
            double t7554 = 1/t7548;
            double t7555 = c*t7545*t7554*(1.0/3.0);
            double t7556 = 1/(t7548*t7548);
            double t7690 = c*t7543*t7552*t7556;
            double t7557 = t7555-t7690;
            double t7558 = pow(t7542,1.0/3.0);
            double t7559 = 1/pow(t7542,7.0/3.0);
            double t7560 = EcP_2-t7546;
            double t7561 = 1/(t7560*t7560);
            double t7562 = t7560*t7560;
            double t7563 = c*t7559*(4.0/9.0);
            double t7564 = EcP_3*c*t7550*t7559*(2.0/9.0);
            double t7565 = c*c;
            double t7566 = 1/pow(t7542,8.0/3.0);
            double t7567 = 1/pow(t7544,3.0/2.0);
            double t7693 = EcP_3*t7565*t7566*t7567*(1.0/3.6E1);
            double t7568 = t7563+t7564-t7693;
            double t7569 = t7552*t7552;
            double t7570 = 1/(t7548*t7548*t7548);
            double t7571 = t7546*2.0;
            double t7572 = EcP_3+t7571;
            double t7573 = EcP_2*4.0;
            double t7574 = EcP_3*2.0;
            double t7575 = t7573+t7574;
            double t7576 = 1/(t7572*t7572);
            double t7577 = EcP_4*4.0;
            double t7578 = EcP_3*EcP_3;
            double t7579 = t7577-t7578;
            double t7580 = t7576*t7579;
            double t7581 = t7580+1.0;
            double t7582 = 1/t7581;
            double t7583 = t7552*t7562*t7556;
            double t7584 = c*t7550*t7560*t7545*t7554*(1.0/3.0);
            double t7585 = t7583+t7584;
            double t7586 = 1/(t7572*t7572*t7572);
            double t7587 = 1/(t7572*t7572*t7572*t7572*t7572);
            double t7588 = 1/(t7581*t7581);
            double t7589 = rho_a[index]-rho_b[index];
            double t7590 = t7589*t7589;
            double t7591 = EcF_4*4.0;
            double t7592 = EcF_3*EcF_3;
            double t7593 = t7591-t7592;
            double t7594 = EcF_2-t7546;
            double t7595 = EcF_3*t7546;
            double t7596 = EcF_4+t7544+t7595;
            double t7597 = 1/t7596;
            double t7598 = sqrt(t7593);
            double t7599 = EcF_3+t7571;
            double t7600 = 1/t7599;
            double t7601 = t7598*t7600;
            double t7602 = atan(t7601);
            double t7603 = 1/sqrt(t7593);
            double t7604 = sqrt(t7579);
            double t7605 = 1/t7572;
            double t7606 = t7604*t7605;
            double t7607 = atan(t7606);
            double t7608 = 1/sqrt(t7579);
            double t7609 = EcP_2*EcP_2;
            double t7610 = EcP_2*EcP_3;
            double t7611 = EcP_4+t7610+t7609;
            double t7612 = 1/t7611;
            double t7613 = Ac_4*4.0;
            double t7614 = Ac_3*Ac_3;
            double t7615 = t7613-t7614;
            double t7616 = Ac_2-t7546;
            double t7617 = Ac_3*t7546;
            double t7618 = Ac_4+t7544+t7617;
            double t7619 = 1/t7618;
            double t7620 = sqrt(t7615);
            double t7621 = Ac_3+t7571;
            double t7622 = 1/t7621;
            double t7623 = t7620*t7622;
            double t7624 = atan(t7623);
            double t7625 = 1/sqrt(t7615);
            double t7626 = c*t7543*t7619;
            double t7627 = log(t7626);
            double t7628 = Ac_3*t7624*t7625*2.0;
            double t7629 = t7616*t7616;
            double t7630 = t7619*t7629;
            double t7631 = log(t7630);
            double t7632 = Ac_2*4.0;
            double t7633 = Ac_3*2.0;
            double t7634 = t7632+t7633;
            double t7635 = t7624*t7625*t7634;
            double t7636 = t7631+t7635;
            double t7637 = Ac_2*Ac_2;
            double t7638 = Ac_2*Ac_3;
            double t7639 = Ac_4+t7637+t7638;
            double t7640 = 1/t7639;
            double t7657 = Ac_2*Ac_3*t7640*t7636;
            double t7641 = t7627+t7628-t7657;
            double t7642 = 1/t7542;
            double t7643 = t7589*t7642;
            double t7644 = 1/(t7542*t7542);
            double t7645 = t7644*2.0;
            double t7646 = 1/(t7542*t7542*t7542);
            double t7647 = t7645-t7589*t7646*2.0;
            double t7648 = t7643+1.0;
            double t7651 = t7589*t7644;
            double t7649 = t7642-t7651;
            double t7650 = -t7643+1.0;
            double t7652 = t7649*t7649;
            double t7653 = 1/d2fz0;
            double t7654 = two_13*2.0;
            double t7655 = t7654-2.0;
            double t7656 = 1/t7655;
            double t7658 = 1/(t7542*t7542*t7542*t7542);
            double t7659 = t7590*t7590;
            double t7660 = 1/Ac_1;
            double t7661 = EcF_3*c*t7550*t7545*(1.0/6.0);
            double t7662 = t7549+t7661;
            double t7663 = c*t7545*t7597*(1.0/3.0);
            double t7664 = 1/(t7596*t7596);
            double t7714 = c*t7543*t7662*t7664;
            double t7665 = t7663-t7714;
            double t7666 = 1/pow(t7542,2.0/3.0);
            double t7667 = EcF_2*EcF_2;
            double t7668 = EcF_2*EcF_3;
            double t7669 = EcF_4+t7667+t7668;
            double t7670 = 1/t7669;
            double t7671 = t7594*t7594;
            double t7672 = 1/(t7594*t7594);
            double t7673 = EcF_3*c*t7550*t7559*(2.0/9.0);
            double t7674 = t7563+t7673-EcF_3*t7565*t7566*t7567*(1.0/3.6E1);
            double t7675 = t7662*t7662;
            double t7676 = 1/(t7596*t7596*t7596);
            double t7677 = EcF_2*4.0;
            double t7678 = EcF_3*2.0;
            double t7679 = t7677+t7678;
            double t7680 = 1/(t7599*t7599);
            double t7681 = t7593*t7680;
            double t7682 = t7681+1.0;
            double t7683 = 1/t7682;
            double t7684 = t7662*t7671*t7664;
            double t7685 = c*t7550*t7545*t7594*t7597*(1.0/3.0);
            double t7686 = t7684+t7685;
            double t7687 = 1/(t7599*t7599*t7599);
            double t7688 = 1/(t7599*t7599*t7599*t7599*t7599);
            double t7689 = 1/(t7682*t7682);
            double t7691 = t7552*t7553*t7557*t7558;
            double t7692 = c*t7554*t7559*(4.0/9.0);
            double t7694 = c*t7543*t7570*t7569*2.0;
            double t7695 = t7692+t7694-c*t7552*t7545*t7556*(2.0/3.0)-c*t7543*t7556*t7568;
            double t7696 = t7553*t7548*t7558*t7695;
            double t7697 = t7552*t7561*t7585;
            double t7698 = c*t7554*t7559*(1.0/1.8E1);
            double t7699 = t7570*t7562*t7569*2.0;
            double t7700 = t7560*t7554*t7565*t7566*t7567*(1.0/1.8E1);
            double t7701 = c*t7550*t7560*t7552*t7545*t7556*(2.0/3.0);
            double t7702 = t7698+t7699+t7700+t7701-t7562*t7556*t7568-c*t7550*t7560*t7554*t7559*(4.0/9.0);
            double t7703 = c*t7550*t7582*t7575*t7576*t7559*(4.0/9.0);
            double t7704 = 1/(t7560*t7560*t7560);
            double t7705 = c*t7550*t7545*t7548*t7585*t7704*(1.0/3.0);
            double t7706 = c*t7575*t7559*t7587*t7579*t7588*(2.0/9.0);
            double t7707 = t7697+t7703+t7705+t7706-t7561*t7548*t7702-c*t7582*t7575*t7559*t7586*(2.0/9.0)-t7582* \
               t7565*t7566*t7575*t7567*t7576*(1.0/1.8E1);
            double t7708 = EcP_2*EcP_3*t7612*t7707;
            double t7709 = EcP_3*c*t7582*t7559*t7586*(4.0/9.0);
            double t7710 = EcP_3*t7582*t7565*t7566*t7567*t7576*(1.0/9.0);
            double t7711 = t7691+t7696+t7710+t7708+t7709-t7553*t7548*t7557*t7666*(1.0/3.0)-EcP_3*c*t7550*t7582* \
               t7576*t7559*(8.0/9.0)-EcP_3*c*t7559*t7587*t7579*t7588*(4.0/9.0);
            double t7712 = EcP_1*t7711;
            double t7713 = 1/t7641;
            double t7715 = Ac_3*c*t7550*t7545*(1.0/6.0);
            double t7716 = t7549+t7715;
            double t7717 = 1/(t7618*t7618);
            double t7718 = 1/(t7621*t7621);
            double t7719 = t7615*t7718;
            double t7720 = t7719+1.0;
            double t7721 = 1/t7720;
            double t7722 = c*t7543*t7597;
            double t7723 = log(t7722);
            double t7724 = EcF_3*t7602*t7603*2.0;
            double t7725 = t7597*t7671;
            double t7726 = log(t7725);
            double t7727 = t7602*t7603*t7679;
            double t7728 = t7726+t7727;
            double t7752 = EcF_2*EcF_3*t7670*t7728;
            double t7729 = t7723+t7724-t7752;
            double t7730 = EcF_1*t7729;
            double t7731 = c*t7543*t7554;
            double t7732 = log(t7731);
            double t7733 = EcP_3*t7607*t7608*2.0;
            double t7734 = t7562*t7554;
            double t7735 = log(t7734);
            double t7736 = t7575*t7607*t7608;
            double t7737 = t7735+t7736;
            double t7753 = EcP_2*EcP_3*t7612*t7737;
            double t7738 = t7732+t7733-t7753;
            double t7754 = EcP_1*t7738;
            double t7739 = t7730-t7754;
            double t7740 = c*t7545*t7619*(1.0/3.0);
            double t7756 = c*t7543*t7716*t7717;
            double t7741 = t7740-t7756;
            double t7742 = t7553*t7558*t7618*t7741;
            double t7743 = t7629*t7716*t7717;
            double t7744 = c*t7550*t7545*t7616*t7619*(1.0/3.0);
            double t7745 = t7743+t7744;
            double t7746 = 1/(t7616*t7616);
            double t7747 = t7618*t7745*t7746;
            double t7748 = c*t7550*t7545*t7634*t7721*t7718*(1.0/3.0);
            double t7749 = t7747+t7748;
            double t7750 = Ac_2*Ac_3*t7640*t7749;
            double t7778 = Ac_3*c*t7550*t7545*t7721*t7718*(2.0/3.0);
            double t7751 = t7750+t7742-t7778;
            double t7755 = 1/(t7641*t7641);
            double t7757 = Ac_3*c*t7550*t7559*(2.0/9.0);
            double t7801 = Ac_3*t7565*t7566*t7567*(1.0/3.6E1);
            double t7758 = t7563+t7757-t7801;
            double t7759 = t7716*t7716;
            double t7760 = 1/(t7618*t7618*t7618);
            double t7761 = 1/(t7621*t7621*t7621);
            double t7762 = 1/(t7621*t7621*t7621*t7621*t7621);
            double t7763 = 1/(t7720*t7720);
            double t7764 = t7553*t7558*t7596*t7665;
            double t7765 = t7596*t7672*t7686;
            double t7766 = c*t7550*t7545*t7680*t7683*t7679*(1.0/3.0);
            double t7767 = t7765+t7766;
            double t7768 = EcF_2*EcF_3*t7670*t7767;
            double t7779 = EcF_3*c*t7550*t7545*t7680*t7683*(2.0/3.0);
            double t7769 = t7764+t7768-t7779;
            double t7770 = EcF_1*t7769;
            double t7771 = t7553*t7548*t7557*t7558;
            double t7772 = t7561*t7548*t7585;
            double t7773 = c*t7550*t7545*t7582*t7575*t7576*(1.0/3.0);
            double t7774 = t7772+t7773;
            double t7775 = EcP_2*EcP_3*t7612*t7774;
            double t7780 = EcP_3*c*t7550*t7545*t7582*t7576*(2.0/3.0);
            double t7776 = t7771-t7780+t7775;
            double t7781 = EcP_1*t7776;
            double t7777 = t7770-t7781;
            double t7782 = d2fz0*t7660*t7713*t7777;
            double t7789 = d2fz0*t7660*t7751*t7755*t7739;
            double t7783 = t7782-t7789;
            double t7784 = d2fz0*t7660*t7713*t7739;
            double t7785 = t7784-1.0;
            double t7786 = 1/(t7542*t7542*t7542*t7542*t7542);
            double t7787 = pow(t7648,1.0/3.0);
            double t7788 = pow(t7650,1.0/3.0);
            double t7790 = t7649*t7787*(4.0/3.0);
            double t7822 = t7649*t7788*(4.0/3.0);
            double t7791 = t7790-t7822;
            double t7792 = t7658*t7659*t7785;
            double t7793 = t7792+1.0;
            double t7794 = pow(t7648,4.0/3.0);
            double t7795 = pow(t7650,4.0/3.0);
            double t7796 = t7794+t7795-2.0;
            double t7797 = t7658*t7659*t7783;
            double t7798 = t7659*t7785*t7786*4.0;
            double t7821 = t7590*t7589*t7658*t7785*4.0;
            double t7799 = t7797+t7798-t7821;
            double t7800 = c*t7559*t7619*(4.0/9.0);
            double t7802 = c*t7543*t7760*t7759*2.0;
            double t7803 = t7800+t7802-c*t7545*t7716*t7717*(2.0/3.0)-c*t7543*t7717*t7758;
            double t7804 = t7553*t7558*t7618*t7803;
            double t7805 = t7716*t7745*t7746;
            double t7806 = c*t7559*t7619*(1.0/1.8E1);
            double t7807 = t7629*t7760*t7759*2.0;
            double t7808 = t7565*t7566*t7567*t7616*t7619*(1.0/1.8E1);
            double t7809 = c*t7550*t7545*t7616*t7716*t7717*(2.0/3.0);
            double t7810 = t7806+t7807+t7808+t7809-t7629*t7717*t7758-c*t7550*t7559*t7616*t7619*(4.0/9.0);
            double t7811 = c*t7550*t7559*t7634*t7721*t7718*(4.0/9.0);
            double t7812 = 1/(t7616*t7616*t7616);
            double t7813 = c*t7550*t7545*t7618*t7745*t7812*(1.0/3.0);
            double t7814 = c*t7559*t7615*t7634*t7762*t7763*(2.0/9.0);
            double t7815 = t7811+t7813+t7805+t7814-t7618*t7746*t7810-c*t7559*t7634*t7721*t7761*(2.0/9.0)-t7565* \
               t7566*t7567*t7634*t7721*t7718*(1.0/1.8E1);
            double t7816 = Ac_2*Ac_3*t7640*t7815;
            double t7817 = t7553*t7558*t7741*t7716;
            double t7818 = Ac_3*c*t7559*t7721*t7761*(4.0/9.0);
            double t7819 = Ac_3*t7565*t7566*t7567*t7721*t7718*(1.0/9.0);
            double t7820 = t7804+t7816+t7817+t7818+t7819-t7553*t7618*t7666*t7741*(1.0/3.0)-Ac_3*c*t7550*t7559* \
               t7721*t7718*(8.0/9.0)-Ac_3*c*t7559*t7615*t7762*t7763*(4.0/9.0);
            v_rho_a_rho_a_[index] = EcP_1*t7776*-2.0+t7542*(t7712+Ac_1*t7641*t7653*t7656*t7796*(1/(t7542*t7542* \
               t7542*t7542*t7542*t7542)*t7659*t7785*2.0E1+t7590*t7658*t7785*1.2E1+t7659*t7783*t7786*8.0-t7658*t7659* \
               (d2fz0*t7660*t7713*(t7712-EcF_1*(t7553*t7558*t7596*(c*t7559*t7597*(4.0/9.0)-c*t7545*t7662*t7664*(2.0/ \
               3.0)-c*t7543*t7664*t7674+c*t7543*t7675*t7676*2.0)+t7553*t7558*t7662*t7665-t7553*t7596*t7665*t7666* \
               (1.0/3.0)+EcF_2*EcF_3*t7670*(-t7596*t7672*(c*t7559*t7597*(1.0/1.8E1)-t7671*t7664*t7674+t7671*t7675* \
               t7676*2.0-c*t7550*t7594*t7559*t7597*(4.0/9.0)+t7565*t7566*t7567*t7594*t7597*(1.0/1.8E1)+c*t7550*t7545* \
               t7594*t7662*t7664*(2.0/3.0))+t7662*t7672*t7686-c*t7559*t7683*t7687*t7679*(2.0/9.0)+c*t7550*t7559*t7680* \
               t7683*t7679*(4.0/9.0)+c*t7593*t7559*t7679*t7688*t7689*(2.0/9.0)-t7565*t7566*t7567*t7680*t7683*t7679* \
               (1.0/1.8E1)+c*t7550*t7545*1/(t7594*t7594*t7594)*t7596*t7686*(1.0/3.0))+EcF_3*c*t7559*t7683*t7687*(4.0/ \
               9.0)-EcF_3*c*t7550*t7559*t7680*t7683*(8.0/9.0)-EcF_3*c*t7593*t7559*t7688*t7689*(4.0/9.0)+EcF_3*t7565* \
               t7566*t7567*t7680*t7683*(1.0/9.0)))-d2fz0*1/(t7641*t7641*t7641)*t7660*(t7751*t7751)*t7739*2.0+d2fz0* \
               t7660*t7751*t7755*t7777*2.0+d2fz0*t7660*t7755*t7739*t7820)-t7590*t7589*t7658*t7783*8.0-t7590*t7589* \
               t7785*t7786*3.2E1)+Ac_1*t7641*t7653*t7656*t7793*(t7647*t7787*(-4.0/3.0)+t7647*t7788*(4.0/3.0)+1/pow(t7650,2.0/ \
               3.0)*t7652*(4.0/9.0)+t7652*1/pow(t7648,2.0/3.0)*(4.0/9.0))-Ac_1*t7641*t7653*t7656*t7791*t7799*2.0- \
               Ac_1*t7653*t7656*t7751*t7791*t7793*2.0+Ac_1*t7653*t7656*t7751*t7796*t7799*2.0+Ac_1*t7653*t7656*t7793* \
               t7796*t7820)+Ac_1*t7641*t7653*t7656*t7791*t7793*2.0-Ac_1*t7641*t7653*t7656*t7796*t7799*2.0-Ac_1*t7653* \
               t7656*t7751*t7793*t7796*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t9303 = rho_a[index]+rho_b[index];
            double t9304 = 1/pow(t9303,1.0/3.0);
            double t9305 = c*t9304;
            double t9306 = 1/pow(t9303,4.0/3.0);
            double t9307 = sqrt(t9305);
            double t9308 = EcP_3*t9307;
            double t9309 = EcP_4+t9305+t9308;
            double t9310 = c*t9306*(1.0/3.0);
            double t9311 = 1/sqrt(t9305);
            double t9312 = EcP_3*c*t9311*t9306*(1.0/6.0);
            double t9313 = t9310+t9312;
            double t9314 = EcP_2-t9307;
            double t9315 = 1/(t9309*t9309);
            double t9316 = 1/t9309;
            double t9317 = t9307*2.0;
            double t9318 = EcP_3+t9317;
            double t9319 = 1/(t9318*t9318);
            double t9320 = EcP_4*4.0;
            double t9321 = EcP_3*EcP_3;
            double t9322 = t9320-t9321;
            double t9323 = t9322*t9319;
            double t9324 = t9323+1.0;
            double t9325 = 1/t9324;
            double t9326 = 1/c;
            double t9327 = c*t9306*t9316*(1.0/3.0);
            double t9330 = c*t9304*t9313*t9315;
            double t9328 = -t9330+t9327;
            double t9329 = pow(t9303,1.0/3.0);
            double t9331 = 1/pow(t9303,7.0/3.0);
            double t9332 = EcP_2*EcP_2;
            double t9333 = EcP_2*EcP_3;
            double t9334 = EcP_4+t9332+t9333;
            double t9335 = 1/t9334;
            double t9336 = t9314*t9314;
            double t9337 = t9313*t9315*t9336;
            double t9338 = c*t9311*t9314*t9306*t9316*(1.0/3.0);
            double t9339 = t9337+t9338;
            double t9340 = 1/(t9314*t9314);
            double t9341 = c*t9331*(4.0/9.0);
            double t9342 = EcP_3*c*t9311*t9331*(2.0/9.0);
            double t9343 = c*c;
            double t9344 = 1/pow(t9303,8.0/3.0);
            double t9345 = 1/pow(t9305,3.0/2.0);
            double t9390 = EcP_3*t9343*t9344*t9345*(1.0/3.6E1);
            double t9346 = t9341+t9342-t9390;
            double t9347 = t9313*t9313;
            double t9348 = 1/(t9309*t9309*t9309);
            double t9349 = EcP_2*4.0;
            double t9350 = EcP_3*2.0;
            double t9351 = t9350+t9349;
            double t9352 = 1/(t9318*t9318*t9318);
            double t9353 = 1/(t9318*t9318*t9318*t9318*t9318);
            double t9354 = 1/(t9324*t9324);
            double t9355 = EcF_3*t9307;
            double t9356 = EcF_4+t9305+t9355;
            double t9357 = EcF_3*c*t9311*t9306*(1.0/6.0);
            double t9358 = t9310+t9357;
            double t9359 = 1/t9356;
            double t9360 = c*t9306*t9359*(1.0/3.0);
            double t9361 = 1/(t9356*t9356);
            double t9416 = c*t9304*t9361*t9358;
            double t9362 = t9360-t9416;
            double t9363 = 1/pow(t9303,2.0/3.0);
            double t9364 = EcF_2-t9307;
            double t9365 = 1/(t9364*t9364);
            double t9366 = t9364*t9364;
            double t9367 = EcF_3*c*t9311*t9331*(2.0/9.0);
            double t9368 = t9341+t9367-EcF_3*t9343*t9344*t9345*(1.0/3.6E1);
            double t9369 = t9358*t9358;
            double t9370 = 1/(t9356*t9356*t9356);
            double t9371 = EcF_3+t9317;
            double t9372 = EcF_2*4.0;
            double t9373 = EcF_3*2.0;
            double t9374 = t9372+t9373;
            double t9375 = 1/(t9371*t9371);
            double t9376 = EcF_4*4.0;
            double t9377 = EcF_3*EcF_3;
            double t9378 = t9376-t9377;
            double t9379 = t9375*t9378;
            double t9380 = t9379+1.0;
            double t9381 = 1/t9380;
            double t9382 = t9361*t9366*t9358;
            double t9383 = c*t9311*t9306*t9364*t9359*(1.0/3.0);
            double t9384 = t9382+t9383;
            double t9385 = 1/(t9371*t9371*t9371);
            double t9386 = 1/(t9371*t9371*t9371*t9371*t9371);
            double t9387 = 1/(t9380*t9380);
            double t9388 = t9313*t9326*t9328*t9329;
            double t9389 = c*t9331*t9316*(4.0/9.0);
            double t9391 = c*t9304*t9347*t9348*2.0;
            double t9392 = t9391+t9389-c*t9313*t9306*t9315*(2.0/3.0)-c*t9304*t9315*t9346;
            double t9393 = t9326*t9309*t9329*t9392;
            double t9394 = t9313*t9340*t9339;
            double t9395 = c*t9331*t9316*(1.0/1.8E1);
            double t9396 = t9336*t9347*t9348*2.0;
            double t9397 = t9314*t9316*t9343*t9344*t9345*(1.0/1.8E1);
            double t9398 = c*t9311*t9313*t9314*t9306*t9315*(2.0/3.0);
            double t9399 = t9395+t9396+t9397+t9398-t9315*t9336*t9346-c*t9311*t9331*t9314*t9316*(4.0/9.0);
            double t9400 = c*t9311*t9331*t9351*t9325*t9319*(4.0/9.0);
            double t9401 = 1/(t9314*t9314*t9314);
            double t9402 = c*t9311*t9306*t9309*t9339*t9401*(1.0/3.0);
            double t9403 = c*t9322*t9331*t9351*t9353*t9354*(2.0/9.0);
            double t9404 = t9394+t9400+t9402+t9403-t9340*t9309*t9399-c*t9331*t9351*t9325*t9352*(2.0/9.0)-t9351* \
               t9325*t9343*t9344*t9345*t9319*(1.0/1.8E1);
            double t9405 = EcP_2*EcP_3*t9335*t9404;
            double t9406 = EcP_3*c*t9331*t9325*t9352*(4.0/9.0);
            double t9407 = EcP_3*t9325*t9343*t9344*t9345*t9319*(1.0/9.0);
            double t9408 = t9393+t9388+t9405+t9406+t9407-t9326*t9309*t9363*t9328*(1.0/3.0)-EcP_3*c*t9311*t9331* \
               t9325*t9319*(8.0/9.0)-EcP_3*c*t9322*t9331*t9353*t9354*(4.0/9.0);
            double t9409 = EcP_1*t9408;
            double t9410 = pow(2.0,1.0/3.0);
            double t9411 = t9410*2.0;
            double t9412 = t9411-2.0;
            double t9413 = two_13*2.0;
            double t9414 = t9413-2.0;
            double t9415 = 1/t9414;
            double t9417 = EcF_2*EcF_2;
            double t9418 = EcF_2*EcF_3;
            double t9419 = EcF_4+t9417+t9418;
            double t9420 = 1/t9419;
            double t9421 = t9326*t9309*t9328*t9329;
            double t9422 = t9340*t9309*t9339;
            double t9423 = c*t9311*t9306*t9351*t9325*t9319*(1.0/3.0);
            double t9424 = t9422+t9423;
            double t9425 = EcP_2*EcP_3*t9335*t9424;
            double t9426 = t9421+t9425-EcP_3*c*t9311*t9306*t9325*t9319*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t9426*-2.0+t9303*(t9409-t9412*t9415*(t9409-EcF_1*(t9326*t9329*t9356* \
               (c*t9331*t9359*(4.0/9.0)-c*t9304*t9361*t9368+c*t9304*t9370*t9369*2.0-c*t9306*t9361*t9358*(2.0/3.0) \
               )-t9326*t9362*t9363*t9356*(1.0/3.0)+t9326*t9362*t9329*t9358+EcF_2*EcF_3*t9420*(-t9356*t9365*(c*t9331* \
               t9359*(1.0/1.8E1)-t9361*t9366*t9368+t9370*t9366*t9369*2.0-c*t9311*t9331*t9364*t9359*(4.0/9.0)+t9343* \
               t9344*t9345*t9364*t9359*(1.0/1.8E1)+c*t9311*t9306*t9361*t9364*t9358*(2.0/3.0))+t9365*t9384*t9358-c* \
               t9331*t9381*t9374*t9385*(2.0/9.0)+c*t9311*t9331*t9381*t9374*t9375*(4.0/9.0)+c*t9331*t9374*t9386*t9378* \
               t9387*(2.0/9.0)-t9343*t9344*t9345*t9381*t9374*t9375*(1.0/1.8E1)+c*t9311*t9306*1/(t9364*t9364*t9364) \
               *t9356*t9384*(1.0/3.0))+EcF_3*c*t9331*t9381*t9385*(4.0/9.0)-EcF_3*c*t9311*t9331*t9381*t9375*(8.0/9.0) \
               -EcF_3*c*t9331*t9386*t9378*t9387*(4.0/9.0)+EcF_3*t9343*t9344*t9345*t9381*t9375*(1.0/9.0))))+t9412* \
               t9415*(EcP_1*t9426-EcF_1*(t9326*t9362*t9329*t9356+EcF_2*EcF_3*t9420*(t9356*t9365*t9384+c*t9311*t9306* \
               t9381*t9374*t9375*(1.0/3.0))-EcF_3*c*t9311*t9306*t9381*t9375*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t8658 = rho_a[index]+rho_b[index];
            double t8659 = 1/pow(t8658,1.0/3.0);
            double t8660 = c*t8659;
            double t8661 = 1/pow(t8658,4.0/3.0);
            double t8662 = sqrt(t8660);
            double t8663 = EcP_3*t8662;
            double t8664 = EcP_4+t8660+t8663;
            double t8665 = c*t8661*(1.0/3.0);
            double t8666 = 1/sqrt(t8660);
            double t8667 = EcP_3*c*t8661*t8666*(1.0/6.0);
            double t8668 = t8665+t8667;
            double t8669 = EcP_2-t8662;
            double t8670 = 1/(t8664*t8664);
            double t8671 = 1/t8664;
            double t8672 = t8662*2.0;
            double t8673 = EcP_3+t8672;
            double t8674 = 1/(t8673*t8673);
            double t8675 = EcP_4*4.0;
            double t8676 = EcP_3*EcP_3;
            double t8677 = t8675-t8676;
            double t8678 = t8674*t8677;
            double t8679 = t8678+1.0;
            double t8680 = 1/t8679;
            double t8681 = 1/c;
            double t8682 = c*t8661*t8671*(1.0/3.0);
            double t8685 = c*t8670*t8659*t8668;
            double t8683 = t8682-t8685;
            double t8684 = pow(t8658,1.0/3.0);
            double t8686 = 1/pow(t8658,7.0/3.0);
            double t8687 = EcP_2*EcP_2;
            double t8688 = EcP_2*EcP_3;
            double t8689 = EcP_4+t8687+t8688;
            double t8690 = 1/t8689;
            double t8691 = t8669*t8669;
            double t8692 = t8670*t8691*t8668;
            double t8693 = c*t8661*t8671*t8666*t8669*(1.0/3.0);
            double t8694 = t8692+t8693;
            double t8695 = 1/(t8669*t8669);
            double t8696 = c*t8686*(4.0/9.0);
            double t8697 = EcP_3*c*t8666*t8686*(2.0/9.0);
            double t8698 = c*c;
            double t8699 = 1/pow(t8658,8.0/3.0);
            double t8700 = 1/pow(t8660,3.0/2.0);
            double t8745 = EcP_3*t8698*t8699*t8700*(1.0/3.6E1);
            double t8701 = t8696+t8697-t8745;
            double t8702 = t8668*t8668;
            double t8703 = 1/(t8664*t8664*t8664);
            double t8704 = EcP_2*4.0;
            double t8705 = EcP_3*2.0;
            double t8706 = t8704+t8705;
            double t8707 = 1/(t8673*t8673*t8673);
            double t8708 = 1/(t8673*t8673*t8673*t8673*t8673);
            double t8709 = 1/(t8679*t8679);
            double t8710 = EcF_3*t8662;
            double t8711 = EcF_4+t8660+t8710;
            double t8712 = EcF_3*c*t8661*t8666*(1.0/6.0);
            double t8713 = t8665+t8712;
            double t8714 = 1/t8711;
            double t8715 = c*t8661*t8714*(1.0/3.0);
            double t8716 = 1/(t8711*t8711);
            double t8771 = c*t8659*t8713*t8716;
            double t8717 = t8715-t8771;
            double t8718 = 1/pow(t8658,2.0/3.0);
            double t8719 = EcF_2-t8662;
            double t8720 = 1/(t8719*t8719);
            double t8721 = t8719*t8719;
            double t8722 = EcF_3*c*t8666*t8686*(2.0/9.0);
            double t8723 = t8696+t8722-EcF_3*t8698*t8699*t8700*(1.0/3.6E1);
            double t8724 = t8713*t8713;
            double t8725 = 1/(t8711*t8711*t8711);
            double t8726 = EcF_3+t8672;
            double t8727 = EcF_2*4.0;
            double t8728 = EcF_3*2.0;
            double t8729 = t8727+t8728;
            double t8730 = 1/(t8726*t8726);
            double t8731 = EcF_4*4.0;
            double t8732 = EcF_3*EcF_3;
            double t8733 = t8731-t8732;
            double t8734 = t8730*t8733;
            double t8735 = t8734+1.0;
            double t8736 = 1/t8735;
            double t8737 = t8721*t8713*t8716;
            double t8738 = c*t8661*t8666*t8714*t8719*(1.0/3.0);
            double t8739 = t8737+t8738;
            double t8740 = 1/(t8726*t8726*t8726);
            double t8741 = 1/(t8726*t8726*t8726*t8726*t8726);
            double t8742 = 1/(t8735*t8735);
            double t8743 = t8681*t8683*t8684*t8668;
            double t8744 = c*t8671*t8686*(4.0/9.0);
            double t8746 = c*t8659*t8702*t8703*2.0;
            double t8747 = t8744+t8746-c*t8661*t8670*t8668*(2.0/3.0)-c*t8670*t8659*t8701;
            double t8748 = t8681*t8664*t8684*t8747;
            double t8749 = t8694*t8668*t8695;
            double t8750 = c*t8671*t8686*(1.0/1.8E1);
            double t8751 = t8691*t8702*t8703*2.0;
            double t8752 = t8671*t8669*t8698*t8699*t8700*(1.0/1.8E1);
            double t8753 = c*t8661*t8670*t8666*t8668*t8669*(2.0/3.0);
            double t8754 = t8750+t8751+t8752+t8753-t8670*t8691*t8701-c*t8671*t8666*t8686*t8669*(4.0/9.0);
            double t8755 = c*t8680*t8674*t8666*t8686*t8706*(4.0/9.0);
            double t8756 = 1/(t8669*t8669*t8669);
            double t8757 = c*t8661*t8664*t8666*t8694*t8756*(1.0/3.0);
            double t8758 = c*t8677*t8686*t8706*t8708*t8709*(2.0/9.0);
            double t8759 = t8755+t8757+t8749+t8758-t8664*t8695*t8754-c*t8680*t8686*t8706*t8707*(2.0/9.0)-t8680* \
               t8674*t8698*t8699*t8700*t8706*(1.0/1.8E1);
            double t8760 = EcP_2*EcP_3*t8690*t8759;
            double t8761 = EcP_3*c*t8680*t8686*t8707*(4.0/9.0);
            double t8762 = EcP_3*t8680*t8674*t8698*t8699*t8700*(1.0/9.0);
            double t8763 = t8760+t8743+t8761+t8762+t8748-t8681*t8664*t8683*t8718*(1.0/3.0)-EcP_3*c*t8680*t8674* \
               t8666*t8686*(8.0/9.0)-EcP_3*c*t8677*t8686*t8708*t8709*(4.0/9.0);
            double t8764 = EcP_1*t8763;
            double t8765 = pow(2.0,1.0/3.0);
            double t8766 = t8765*2.0;
            double t8767 = t8766-2.0;
            double t8768 = two_13*2.0;
            double t8769 = t8768-2.0;
            double t8770 = 1/t8769;
            double t8772 = EcF_2*EcF_2;
            double t8773 = EcF_2*EcF_3;
            double t8774 = EcF_4+t8772+t8773;
            double t8775 = 1/t8774;
            double t8776 = t8681*t8664*t8683*t8684;
            double t8777 = t8664*t8694*t8695;
            double t8778 = c*t8661*t8680*t8674*t8666*t8706*(1.0/3.0);
            double t8779 = t8777+t8778;
            double t8780 = EcP_2*EcP_3*t8690*t8779;
            double t8781 = t8780+t8776-EcP_3*c*t8661*t8680*t8674*t8666*(2.0/3.0);
            v_rho_a_rho_a_[index] = EcP_1*t8781*-2.0+t8658*(t8764-t8770*t8767*(t8764-EcF_1*(t8681*t8684*t8711* \
               (c*t8686*t8714*(4.0/9.0)-c*t8661*t8713*t8716*(2.0/3.0)-c*t8659*t8723*t8716+c*t8659*t8724*t8725*2.0) \
               +t8681*t8684*t8713*t8717-t8681*t8711*t8717*t8718*(1.0/3.0)+EcF_2*EcF_3*t8775*(-t8711*t8720*(c*t8686* \
               t8714*(1.0/1.8E1)-t8721*t8723*t8716+t8721*t8724*t8725*2.0-c*t8666*t8686*t8714*t8719*(4.0/9.0)+t8698* \
               t8699*t8700*t8714*t8719*(1.0/1.8E1)+c*t8661*t8666*t8713*t8716*t8719*(2.0/3.0))+t8720*t8713*t8739-c* \
               t8686*t8740*t8736*t8729*(2.0/9.0)+c*t8666*t8686*t8730*t8736*t8729*(4.0/9.0)+c*t8686*t8741*t8733*t8742* \
               t8729*(2.0/9.0)-t8698*t8699*t8700*t8730*t8736*t8729*(1.0/1.8E1)+c*t8661*t8666*t8711*1/(t8719*t8719* \
               t8719)*t8739*(1.0/3.0))+EcF_3*c*t8686*t8740*t8736*(4.0/9.0)-EcF_3*c*t8666*t8686*t8730*t8736*(8.0/9.0) \
               -EcF_3*c*t8686*t8741*t8733*t8742*(4.0/9.0)+EcF_3*t8698*t8699*t8700*t8730*t8736*(1.0/9.0))))+t8770* \
               t8767*(EcP_1*t8781-EcF_1*(t8681*t8684*t8711*t8717+EcF_2*EcF_3*t8775*(t8711*t8720*t8739+c*t8661*t8666* \
               t8730*t8736*t8729*(1.0/3.0))-EcF_3*c*t8661*t8666*t8730*t8736*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t7824 = rho_a[index]+rho_b[index];
            double t7825 = 1/pow(t7824,1.0/3.0);
            double t7826 = c*t7825;
            double t7827 = 1/pow(t7824,4.0/3.0);
            double t7828 = sqrt(t7826);
            double t7829 = EcP_3*t7828;
            double t7830 = EcP_4+t7826+t7829;
            double t7831 = c*t7827*(1.0/3.0);
            double t7832 = 1/sqrt(t7826);
            double t7833 = EcP_3*c*t7832*t7827*(1.0/6.0);
            double t7834 = t7831+t7833;
            double t7835 = EcP_2-t7828;
            double t7836 = 1/(t7830*t7830);
            double t7837 = 1/t7830;
            double t7838 = t7828*2.0;
            double t7839 = EcP_3+t7838;
            double t7840 = 1/(t7839*t7839);
            double t7841 = EcP_4*4.0;
            double t7842 = EcP_3*EcP_3;
            double t7843 = t7841-t7842;
            double t7844 = t7840*t7843;
            double t7845 = t7844+1.0;
            double t7846 = 1/t7845;
            double t7847 = 1/c;
            double t7848 = c*t7827*t7837*(1.0/3.0);
            double t7851 = c*t7825*t7834*t7836;
            double t7849 = -t7851+t7848;
            double t7850 = pow(t7824,1.0/3.0);
            double t7852 = 1/pow(t7824,7.0/3.0);
            double t7853 = EcP_2*EcP_2;
            double t7854 = EcP_2*EcP_3;
            double t7855 = EcP_4+t7853+t7854;
            double t7856 = 1/t7855;
            double t7857 = t7835*t7835;
            double t7858 = t7834*t7836*t7857;
            double t7859 = c*t7832*t7835*t7827*t7837*(1.0/3.0);
            double t7860 = t7858+t7859;
            double t7861 = 1/(t7835*t7835);
            double t7862 = c*t7852*(4.0/9.0);
            double t7863 = EcP_3*c*t7832*t7852*(2.0/9.0);
            double t7864 = c*c;
            double t7865 = 1/pow(t7824,8.0/3.0);
            double t7866 = 1/pow(t7826,3.0/2.0);
            double t8055 = EcP_3*t7864*t7865*t7866*(1.0/3.6E1);
            double t7867 = t7862+t7863-t8055;
            double t7868 = t7834*t7834;
            double t7869 = 1/(t7830*t7830*t7830);
            double t7870 = EcP_2*4.0;
            double t7871 = EcP_3*2.0;
            double t7872 = t7870+t7871;
            double t7873 = 1/(t7839*t7839*t7839);
            double t7874 = 1/(t7839*t7839*t7839*t7839*t7839);
            double t7875 = 1/(t7845*t7845);
            double t7876 = rho_a[index]-rho_b[index];
            double t7877 = t7876*t7876;
            double t7878 = EcF_4*4.0;
            double t7879 = EcF_3*EcF_3;
            double t7880 = t7878-t7879;
            double t7881 = EcF_2-t7828;
            double t7882 = EcF_3*t7828;
            double t7883 = EcF_4+t7826+t7882;
            double t7884 = 1/t7883;
            double t7885 = sqrt(t7880);
            double t7886 = EcF_3+t7838;
            double t7887 = 1/t7886;
            double t7888 = t7885*t7887;
            double t7889 = atan(t7888);
            double t7890 = 1/sqrt(t7880);
            double t7891 = sqrt(t7843);
            double t7892 = 1/t7839;
            double t7893 = t7891*t7892;
            double t7894 = atan(t7893);
            double t7895 = 1/sqrt(t7843);
            double t7896 = Ac_4*4.0;
            double t7897 = Ac_3*Ac_3;
            double t7898 = t7896-t7897;
            double t7899 = Ac_2-t7828;
            double t7900 = Ac_3*t7828;
            double t7901 = Ac_4+t7826+t7900;
            double t7902 = 1/t7901;
            double t7903 = sqrt(t7898);
            double t7904 = Ac_3+t7838;
            double t7905 = 1/t7904;
            double t7906 = t7903*t7905;
            double t7907 = atan(t7906);
            double t7908 = 1/sqrt(t7898);
            double t7909 = c*t7825*t7902;
            double t7910 = log(t7909);
            double t7911 = Ac_3*t7907*t7908*2.0;
            double t7912 = t7899*t7899;
            double t7913 = t7902*t7912;
            double t7914 = log(t7913);
            double t7915 = Ac_2*4.0;
            double t7916 = Ac_3*2.0;
            double t7917 = t7915+t7916;
            double t7918 = t7907*t7908*t7917;
            double t7919 = t7914+t7918;
            double t7920 = Ac_2*Ac_2;
            double t7921 = Ac_2*Ac_3;
            double t7922 = Ac_4+t7920+t7921;
            double t7923 = 1/t7922;
            double t7940 = Ac_2*Ac_3*t7923*t7919;
            double t7924 = t7910+t7911-t7940;
            double t7925 = 1/t7824;
            double t7926 = t7876*t7925;
            double t7927 = 1/(t7824*t7824*t7824);
            double t7928 = t7926+1.0;
            double t7929 = 1/(t7824*t7824);
            double t7930 = t7876*t7929;
            double t7931 = -t7926+1.0;
            double t7932 = t7930+t7925;
            double t7933 = t7930-t7925;
            double t7934 = 1/d2fz0;
            double t7935 = two_13*2.0;
            double t7936 = t7935-2.0;
            double t7937 = 1/t7936;
            double t7938 = pow(t7928,1.0/3.0);
            double t7939 = pow(t7931,1.0/3.0);
            double t7941 = 1/(t7824*t7824*t7824*t7824);
            double t7942 = 1/Ac_1;
            double t7943 = EcF_3*c*t7832*t7827*(1.0/6.0);
            double t7944 = t7831+t7943;
            double t7945 = t7881*t7881;
            double t7946 = 1/(t7883*t7883);
            double t7947 = EcF_2*4.0;
            double t7948 = EcF_3*2.0;
            double t7949 = t7947+t7948;
            double t7950 = 1/(t7886*t7886);
            double t7951 = EcF_2*EcF_2;
            double t7952 = EcF_2*EcF_3;
            double t7953 = EcF_4+t7951+t7952;
            double t7954 = 1/t7953;
            double t7955 = t7880*t7950;
            double t7956 = t7955+1.0;
            double t7957 = 1/t7956;
            double t7958 = t7830*t7850*t7847*t7849;
            double t7959 = t7830*t7860*t7861;
            double t7960 = c*t7840*t7832*t7827*t7872*t7846*(1.0/3.0);
            double t7961 = t7960+t7959;
            double t7962 = EcP_2*EcP_3*t7856*t7961;
            double t8008 = EcP_3*c*t7840*t7832*t7827*t7846*(2.0/3.0);
            double t7963 = t7962+t7958-t8008;
            double t7964 = 1/t7924;
            double t7965 = c*t7825*t7884;
            double t7966 = log(t7965);
            double t7967 = EcF_3*t7890*t7889*2.0;
            double t7968 = t7884*t7945;
            double t7969 = log(t7968);
            double t7970 = t7890*t7889*t7949;
            double t7971 = t7970+t7969;
            double t7991 = EcF_2*EcF_3*t7971*t7954;
            double t7972 = -t7991+t7966+t7967;
            double t7973 = EcF_1*t7972;
            double t7974 = c*t7825*t7837;
            double t7975 = log(t7974);
            double t7976 = EcP_3*t7894*t7895*2.0;
            double t7977 = t7837*t7857;
            double t7978 = log(t7977);
            double t7979 = t7872*t7894*t7895;
            double t7980 = t7978+t7979;
            double t7992 = EcP_2*EcP_3*t7856*t7980;
            double t7981 = -t7992+t7975+t7976;
            double t7993 = EcP_1*t7981;
            double t7982 = t7973-t7993;
            double t7983 = Ac_3*c*t7832*t7827*(1.0/6.0);
            double t7984 = t7831+t7983;
            double t7985 = 1/(t7901*t7901);
            double t7986 = 1/(t7904*t7904);
            double t7987 = t7898*t7986;
            double t7988 = t7987+1.0;
            double t7989 = 1/t7988;
            double t7990 = t7877*t7877;
            double t7994 = d2fz0*t7942*t7964*t7982;
            double t7995 = t7994-1.0;
            double t7996 = c*t7827*t7884*(1.0/3.0);
            double t8037 = c*t7825*t7944*t7946;
            double t7997 = t7996-t8037;
            double t7998 = t7850*t7847*t7883*t7997;
            double t7999 = t7944*t7945*t7946;
            double t8000 = c*t7832*t7827*t7881*t7884*(1.0/3.0);
            double t8001 = t7999+t8000;
            double t8002 = 1/(t7881*t7881);
            double t8003 = t7883*t8001*t8002;
            double t8004 = c*t7832*t7827*t7950*t7957*t7949*(1.0/3.0);
            double t8005 = t8003+t8004;
            double t8006 = EcF_2*EcF_3*t7954*t8005;
            double t8038 = EcF_3*c*t7832*t7827*t7950*t7957*(2.0/3.0);
            double t8007 = t7998+t8006-t8038;
            double t8009 = EcP_1*t7963;
            double t8039 = EcF_1*t8007;
            double t8010 = t8009-t8039;
            double t8011 = d2fz0*t7942*t7964*t8010;
            double t8012 = 1/(t7924*t7924);
            double t8013 = c*t7827*t7902*(1.0/3.0);
            double t8034 = c*t7825*t7984*t7985;
            double t8014 = t8013-t8034;
            double t8015 = t7850*t7847*t7901*t8014;
            double t8016 = t7912*t7984*t7985;
            double t8017 = c*t7832*t7827*t7899*t7902*(1.0/3.0);
            double t8018 = t8016+t8017;
            double t8019 = 1/(t7899*t7899);
            double t8020 = t7901*t8018*t8019;
            double t8021 = c*t7832*t7827*t7917*t7986*t7989*(1.0/3.0);
            double t8022 = t8020+t8021;
            double t8023 = Ac_2*Ac_3*t7923*t8022;
            double t8035 = Ac_3*c*t7832*t7827*t7986*t7989*(2.0/3.0);
            double t8024 = t8023+t8015-t8035;
            double t8025 = d2fz0*t7942*t7982*t8012*t8024;
            double t8026 = t8011+t8025;
            double t8027 = t7941*t7990*t8026;
            double t8028 = t7876*t7877*t7941*t7995*4.0;
            double t8029 = 1/(t7824*t7824*t7824*t7824*t7824);
            double t8030 = t7932*t7938*(4.0/3.0);
            double t8103 = t7932*t7939*(4.0/3.0);
            double t8031 = t8030-t8103;
            double t8032 = t7941*t7990*t7995;
            double t8033 = t8032+1.0;
            double t8036 = t7933*t7938*(4.0/3.0);
            double t8040 = t7990*t7995*t8029*4.0;
            double t8041 = pow(t7928,4.0/3.0);
            double t8042 = pow(t7931,4.0/3.0);
            double t8043 = t8041+t8042-2.0;
            double t8044 = t8040-t8027+t8028;
            double t8045 = 1/pow(t7824,2.0/3.0);
            double t8046 = EcF_3*c*t7832*t7852*(2.0/9.0);
            double t8047 = t7862+t8046-EcF_3*t7864*t7865*t7866*(1.0/3.6E1);
            double t8048 = t7944*t7944;
            double t8049 = 1/(t7883*t7883*t7883);
            double t8050 = 1/(t7886*t7886*t7886);
            double t8051 = 1/(t7886*t7886*t7886*t7886*t7886);
            double t8052 = 1/(t7956*t7956);
            double t8053 = t7850*t7834*t7847*t7849;
            double t8054 = c*t7852*t7837*(4.0/9.0);
            double t8056 = c*t7825*t7868*t7869*2.0;
            double t8057 = t8054+t8056-c*t7834*t7827*t7836*(2.0/3.0)-c*t7825*t7836*t7867;
            double t8058 = t7830*t7850*t7847*t8057;
            double t8059 = t7860*t7834*t7861;
            double t8060 = c*t7852*t7837*(1.0/1.8E1);
            double t8061 = t7857*t7868*t7869*2.0;
            double t8062 = t7835*t7837*t7864*t7865*t7866*(1.0/1.8E1);
            double t8063 = c*t7832*t7834*t7835*t7827*t7836*(2.0/3.0);
            double t8064 = t8060+t8061+t8062+t8063-t7836*t7857*t7867-c*t7832*t7852*t7835*t7837*(4.0/9.0);
            double t8065 = c*t7840*t7832*t7852*t7872*t7846*(4.0/9.0);
            double t8066 = 1/(t7835*t7835*t7835);
            double t8067 = c*t7830*t7832*t7860*t7827*t8066*(1.0/3.0);
            double t8068 = c*t7843*t7852*t7872*t7874*t7875*(2.0/9.0);
            double t8069 = t8065+t8067+t8059+t8068-t7830*t7861*t8064-c*t7852*t7872*t7846*t7873*(2.0/9.0)-t7840* \
               t7872*t7846*t7864*t7865*t7866*(1.0/1.8E1);
            double t8070 = EcP_2*EcP_3*t7856*t8069;
            double t8071 = EcP_3*c*t7852*t7846*t7873*(4.0/9.0);
            double t8072 = EcP_3*t7840*t7846*t7864*t7865*t7866*(1.0/9.0);
            double t8073 = t8070+t8053+t8071+t8072+t8058-t7830*t7847*t7849*t8045*(1.0/3.0)-EcP_3*c*t7840*t7832* \
               t7852*t7846*(8.0/9.0)-EcP_3*c*t7843*t7852*t7874*t7875*(4.0/9.0);
            double t8074 = EcP_1*t8073;
            double t8075 = Ac_3*c*t7832*t7852*(2.0/9.0);
            double t8083 = Ac_3*t7864*t7865*t7866*(1.0/3.6E1);
            double t8076 = t7862-t8083+t8075;
            double t8077 = t7984*t7984;
            double t8078 = 1/(t7901*t7901*t7901);
            double t8079 = 1/(t7904*t7904*t7904);
            double t8080 = 1/(t7904*t7904*t7904*t7904*t7904);
            double t8081 = 1/(t7988*t7988);
            double t8082 = c*t7852*t7902*(4.0/9.0);
            double t8084 = c*t7825*t8077*t8078*2.0;
            double t8085 = t8082+t8084-c*t7827*t7984*t7985*(2.0/3.0)-c*t7825*t7985*t8076;
            double t8086 = t7850*t7847*t7901*t8085;
            double t8087 = t7984*t8018*t8019;
            double t8088 = c*t7852*t7902*(1.0/1.8E1);
            double t8089 = t7912*t8077*t8078*2.0;
            double t8090 = t7864*t7865*t7866*t7899*t7902*(1.0/1.8E1);
            double t8091 = c*t7832*t7827*t7899*t7984*t7985*(2.0/3.0);
            double t8092 = t8090+t8091+t8088+t8089-t7912*t7985*t8076-c*t7832*t7852*t7899*t7902*(4.0/9.0);
            double t8093 = c*t7832*t7852*t7917*t7986*t7989*(4.0/9.0);
            double t8094 = 1/(t7899*t7899*t7899);
            double t8095 = c*t7832*t7827*t7901*t8018*t8094*(1.0/3.0);
            double t8096 = c*t7852*t7898*t7917*t8080*t8081*(2.0/9.0);
            double t8097 = t8093+t8095+t8087+t8096-t7901*t8019*t8092-c*t7852*t7917*t7989*t8079*(2.0/9.0)-t7864* \
               t7865*t7866*t7917*t7986*t7989*(1.0/1.8E1);
            double t8098 = Ac_2*Ac_3*t7923*t8097;
            double t8099 = t7850*t7847*t7984*t8014;
            double t8100 = Ac_3*c*t7852*t7989*t8079*(4.0/9.0);
            double t8101 = Ac_3*t7864*t7865*t7866*t7986*t7989*(1.0/9.0);
            double t8102 = t8086+t8098+t8099+t8100+t8101-t7847*t7901*t8014*t8045*(1.0/3.0)-Ac_3*c*t7832*t7852* \
               t7986*t7989*(8.0/9.0)-Ac_3*c*t7852*t7898*t8080*t8081*(4.0/9.0);
            v_rho_a_rho_b_[index] = EcP_1*t7963*-2.0+t7824*(t8074-Ac_1*t7924*t7934*t7937*t8043*(1/(t7824*t7824* \
               t7824*t7824*t7824*t7824)*t7990*t7995*-2.0E1+t7877*t7941*t7995*1.2E1+t7990*t8026*t8029*8.0+t7941*t7990* \
               (d2fz0*t7942*t7964*(t8074-EcF_1*(t7850*t7847*t7883*(c*t7852*t7884*(4.0/9.0)-c*t7827*t7944*t7946*(2.0/ \
               3.0)-c*t7825*t7946*t8047+c*t7825*t8048*t8049*2.0)+t7850*t7847*t7944*t7997-t7847*t7883*t7997*t8045* \
               (1.0/3.0)+EcF_2*EcF_3*t7954*(-t7883*t8002*(c*t7852*t7884*(1.0/1.8E1)-t7945*t7946*t8047+t7945*t8048* \
               t8049*2.0-c*t7832*t7852*t7881*t7884*(4.0/9.0)+t7881*t7864*t7865*t7866*t7884*(1.0/1.8E1)+c*t7832*t7827* \
               t7881*t7944*t7946*(2.0/3.0))+t7944*t8001*t8002-c*t7852*t7957*t7949*t8050*(2.0/9.0)+c*t7832*t7852*t7950* \
               t7957*t7949*(4.0/9.0)+c*t7852*t7880*t7949*t8051*t8052*(2.0/9.0)-t7864*t7865*t7866*t7950*t7957*t7949* \
               (1.0/1.8E1)+c*t7832*t7827*1/(t7881*t7881*t7881)*t7883*t8001*(1.0/3.0))+EcF_3*c*t7852*t7957*t8050*(4.0/ \
               9.0)-EcF_3*c*t7832*t7852*t7950*t7957*(8.0/9.0)-EcF_3*c*t7852*t7880*t8051*t8052*(4.0/9.0)+EcF_3*t7864* \
               t7865*t7866*t7950*t7957*(1.0/9.0)))-d2fz0*1/(t7924*t7924*t7924)*t7942*t7982*(t8024*t8024)*2.0+d2fz0* \
               t7942*t7982*t8012*t8102-d2fz0*t7942*t8010*t8012*t8024*2.0))-Ac_1*t7924*t7934*t7937*t8031*(t8027+t8028- \
               t7990*t7995*t8029*4.0)+Ac_1*t7924*t7934*t7937*t8033*(1/pow(t7931,2.0/3.0)*t7932*t7933*(4.0/9.0)+t7932* \
               t7933*1/pow(t7928,2.0/3.0)*(4.0/9.0)+t7876*t7927*t7938*(8.0/3.0)-t7876*t7927*t7939*(8.0/3.0))-Ac_1* \
               t7934*t7937*t8024*t8043*(-t8040+t8027+t8028)+Ac_1*t7924*t7934*t7937*t8044*(t8036-t7939*(t7930-t7925) \
               *(4.0/3.0))+Ac_1*t7934*t7937*t8024*t8033*(t8036-t7939*(t7930-t7925)*(4.0/3.0))+Ac_1*t7934*t7937*t8031* \
               t8024*t8033+Ac_1*t7934*t7937*t8024*t8043*t8044+Ac_1*t7934*t7937*t8033*t8043*t8102)-Ac_1*t7924*t7934* \
               t7937*t8033*(t8036-t7933*t7939*(4.0/3.0))+Ac_1*t7924*t7934*t7937*t8043*(-t8040+t8027+t8028)-Ac_1*t7924* \
               t7934*t7937*t8031*t8033-Ac_1*t7924*t7934*t7937*t8043*t8044-Ac_1*t7934*t7937*t8024*t8033*t8043*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t9428 = rho_a[index]+rho_b[index];
            double t9429 = 1/pow(t9428,1.0/3.0);
            double t9430 = c*t9429;
            double t9431 = 1/pow(t9428,4.0/3.0);
            double t9432 = sqrt(t9430);
            double t9433 = EcP_3*t9432;
            double t9434 = EcP_4+t9430+t9433;
            double t9435 = c*t9431*(1.0/3.0);
            double t9436 = 1/sqrt(t9430);
            double t9437 = EcP_3*c*t9431*t9436*(1.0/6.0);
            double t9438 = t9435+t9437;
            double t9439 = EcP_2-t9432;
            double t9440 = 1/(t9434*t9434);
            double t9441 = 1/t9434;
            double t9442 = t9432*2.0;
            double t9443 = EcP_3+t9442;
            double t9444 = 1/(t9443*t9443);
            double t9445 = EcP_4*4.0;
            double t9446 = EcP_3*EcP_3;
            double t9447 = t9445-t9446;
            double t9448 = t9444*t9447;
            double t9449 = t9448+1.0;
            double t9450 = 1/t9449;
            double t9451 = 1/c;
            double t9452 = c*t9431*t9441*(1.0/3.0);
            double t9455 = c*t9440*t9429*t9438;
            double t9453 = t9452-t9455;
            double t9454 = pow(t9428,1.0/3.0);
            double t9456 = 1/pow(t9428,7.0/3.0);
            double t9457 = EcP_2*EcP_2;
            double t9458 = EcP_2*EcP_3;
            double t9459 = EcP_4+t9457+t9458;
            double t9460 = 1/t9459;
            double t9461 = t9439*t9439;
            double t9462 = t9440*t9461*t9438;
            double t9463 = c*t9431*t9441*t9436*t9439*(1.0/3.0);
            double t9464 = t9462+t9463;
            double t9465 = 1/(t9439*t9439);
            double t9466 = c*t9456*(4.0/9.0);
            double t9467 = EcP_3*c*t9436*t9456*(2.0/9.0);
            double t9468 = c*c;
            double t9469 = 1/pow(t9428,8.0/3.0);
            double t9470 = 1/pow(t9430,3.0/2.0);
            double t9515 = EcP_3*t9470*t9468*t9469*(1.0/3.6E1);
            double t9471 = t9466+t9467-t9515;
            double t9472 = t9438*t9438;
            double t9473 = 1/(t9434*t9434*t9434);
            double t9474 = EcP_2*4.0;
            double t9475 = EcP_3*2.0;
            double t9476 = t9474+t9475;
            double t9477 = 1/(t9443*t9443*t9443);
            double t9478 = 1/(t9443*t9443*t9443*t9443*t9443);
            double t9479 = 1/(t9449*t9449);
            double t9480 = EcF_3*t9432;
            double t9481 = EcF_4+t9430+t9480;
            double t9482 = EcF_3*c*t9431*t9436*(1.0/6.0);
            double t9483 = t9435+t9482;
            double t9484 = 1/t9481;
            double t9485 = c*t9431*t9484*(1.0/3.0);
            double t9486 = 1/(t9481*t9481);
            double t9541 = c*t9429*t9483*t9486;
            double t9487 = t9485-t9541;
            double t9488 = 1/pow(t9428,2.0/3.0);
            double t9489 = EcF_2-t9432;
            double t9490 = 1/(t9489*t9489);
            double t9491 = t9489*t9489;
            double t9492 = EcF_3*c*t9436*t9456*(2.0/9.0);
            double t9493 = t9492+t9466-EcF_3*t9470*t9468*t9469*(1.0/3.6E1);
            double t9494 = t9483*t9483;
            double t9495 = 1/(t9481*t9481*t9481);
            double t9496 = EcF_3+t9442;
            double t9497 = EcF_2*4.0;
            double t9498 = EcF_3*2.0;
            double t9499 = t9497+t9498;
            double t9500 = 1/(t9496*t9496);
            double t9501 = EcF_4*4.0;
            double t9502 = EcF_3*EcF_3;
            double t9503 = t9501-t9502;
            double t9504 = t9500*t9503;
            double t9505 = t9504+1.0;
            double t9506 = 1/t9505;
            double t9507 = t9491*t9483*t9486;
            double t9508 = c*t9431*t9436*t9484*t9489*(1.0/3.0);
            double t9509 = t9507+t9508;
            double t9510 = 1/(t9496*t9496*t9496);
            double t9511 = 1/(t9496*t9496*t9496*t9496*t9496);
            double t9512 = 1/(t9505*t9505);
            double t9513 = t9451*t9453*t9454*t9438;
            double t9514 = c*t9441*t9456*(4.0/9.0);
            double t9516 = c*t9472*t9473*t9429*2.0;
            double t9517 = t9514+t9516-c*t9431*t9440*t9438*(2.0/3.0)-c*t9440*t9471*t9429;
            double t9518 = t9451*t9434*t9454*t9517;
            double t9519 = t9464*t9438*t9465;
            double t9520 = c*t9441*t9456*(1.0/1.8E1);
            double t9521 = t9461*t9472*t9473*2.0;
            double t9522 = t9441*t9470*t9439*t9468*t9469*(1.0/1.8E1);
            double t9523 = c*t9431*t9440*t9436*t9438*t9439*(2.0/3.0);
            double t9524 = t9520+t9521+t9522+t9523-t9440*t9461*t9471-c*t9441*t9436*t9456*t9439*(4.0/9.0);
            double t9525 = c*t9450*t9444*t9436*t9456*t9476*(4.0/9.0);
            double t9526 = 1/(t9439*t9439*t9439);
            double t9527 = c*t9431*t9434*t9436*t9464*t9526*(1.0/3.0);
            double t9528 = c*t9447*t9456*t9476*t9478*t9479*(2.0/9.0);
            double t9529 = t9525+t9527+t9519+t9528-t9434*t9465*t9524-c*t9450*t9456*t9476*t9477*(2.0/9.0)-t9450* \
               t9470*t9444*t9476*t9468*t9469*(1.0/1.8E1);
            double t9530 = EcP_2*EcP_3*t9460*t9529;
            double t9531 = EcP_3*c*t9450*t9456*t9477*(4.0/9.0);
            double t9532 = EcP_3*t9450*t9470*t9444*t9468*t9469*(1.0/9.0);
            double t9533 = t9530+t9513+t9531+t9532+t9518-t9451*t9434*t9453*t9488*(1.0/3.0)-EcP_3*c*t9450*t9444* \
               t9436*t9456*(8.0/9.0)-EcP_3*c*t9447*t9456*t9478*t9479*(4.0/9.0);
            double t9534 = EcP_1*t9533;
            double t9535 = pow(2.0,1.0/3.0);
            double t9536 = t9535*2.0;
            double t9537 = t9536-2.0;
            double t9538 = two_13*2.0;
            double t9539 = t9538-2.0;
            double t9540 = 1/t9539;
            double t9542 = EcF_2*EcF_2;
            double t9543 = EcF_2*EcF_3;
            double t9544 = EcF_4+t9542+t9543;
            double t9545 = 1/t9544;
            double t9546 = t9451*t9434*t9453*t9454;
            double t9547 = t9434*t9464*t9465;
            double t9548 = c*t9431*t9450*t9444*t9436*t9476*(1.0/3.0);
            double t9549 = t9547+t9548;
            double t9550 = EcP_2*EcP_3*t9460*t9549;
            double t9551 = t9550+t9546-EcP_3*c*t9431*t9450*t9444*t9436*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t9551*-2.0+t9428*(t9534-t9540*t9537*(t9534-EcF_1*(t9451*t9454*t9481* \
               (c*t9456*t9484*(4.0/9.0)-c*t9431*t9483*t9486*(2.0/3.0)-c*t9429*t9493*t9486+c*t9429*t9494*t9495*2.0) \
               +t9451*t9454*t9483*t9487-t9451*t9481*t9487*t9488*(1.0/3.0)+EcF_2*EcF_3*t9545*(-t9481*t9490*(c*t9456* \
               t9484*(1.0/1.8E1)-t9491*t9493*t9486+t9491*t9494*t9495*2.0-c*t9436*t9456*t9484*t9489*(4.0/9.0)+t9470* \
               t9484*t9468*t9469*t9489*(1.0/1.8E1)+c*t9431*t9436*t9483*t9486*t9489*(2.0/3.0))+t9490*t9483*t9509-c* \
               t9456*t9499*t9510*t9506*(2.0/9.0)+c*t9436*t9456*t9499*t9500*t9506*(4.0/9.0)+c*t9456*t9499*t9511*t9503* \
               t9512*(2.0/9.0)-t9470*t9468*t9469*t9499*t9500*t9506*(1.0/1.8E1)+c*t9431*t9436*t9481*1/(t9489*t9489* \
               t9489)*t9509*(1.0/3.0))+EcF_3*c*t9456*t9510*t9506*(4.0/9.0)-EcF_3*c*t9436*t9456*t9500*t9506*(8.0/9.0) \
               -EcF_3*c*t9456*t9511*t9503*t9512*(4.0/9.0)+EcF_3*t9470*t9468*t9469*t9500*t9506*(1.0/9.0))))+t9540* \
               t9537*(EcP_1*t9551-EcF_1*(t9451*t9454*t9481*t9487+EcF_2*EcF_3*t9545*(t9481*t9490*t9509+c*t9431*t9436* \
               t9499*t9500*t9506*(1.0/3.0))-EcF_3*c*t9431*t9436*t9500*t9506*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t8783 = rho_a[index]+rho_b[index];
            double t8784 = 1/pow(t8783,1.0/3.0);
            double t8785 = c*t8784;
            double t8786 = 1/pow(t8783,4.0/3.0);
            double t8787 = sqrt(t8785);
            double t8788 = EcP_3*t8787;
            double t8789 = EcP_4+t8785+t8788;
            double t8790 = c*t8786*(1.0/3.0);
            double t8791 = 1/sqrt(t8785);
            double t8792 = EcP_3*c*t8791*t8786*(1.0/6.0);
            double t8793 = t8790+t8792;
            double t8794 = EcP_2-t8787;
            double t8795 = 1/(t8789*t8789);
            double t8796 = 1/t8789;
            double t8797 = t8787*2.0;
            double t8798 = EcP_3+t8797;
            double t8799 = 1/(t8798*t8798);
            double t8800 = EcP_4*4.0;
            double t8801 = EcP_3*EcP_3;
            double t8802 = t8800-t8801;
            double t8803 = t8799*t8802;
            double t8804 = t8803+1.0;
            double t8805 = 1/t8804;
            double t8806 = 1/c;
            double t8807 = c*t8786*t8796*(1.0/3.0);
            double t8810 = c*t8784*t8793*t8795;
            double t8808 = -t8810+t8807;
            double t8809 = pow(t8783,1.0/3.0);
            double t8811 = 1/pow(t8783,7.0/3.0);
            double t8812 = EcP_2*EcP_2;
            double t8813 = EcP_2*EcP_3;
            double t8814 = EcP_4+t8812+t8813;
            double t8815 = 1/t8814;
            double t8816 = t8794*t8794;
            double t8817 = t8793*t8795*t8816;
            double t8818 = c*t8791*t8794*t8786*t8796*(1.0/3.0);
            double t8819 = t8817+t8818;
            double t8820 = 1/(t8794*t8794);
            double t8821 = c*t8811*(4.0/9.0);
            double t8822 = EcP_3*c*t8791*t8811*(2.0/9.0);
            double t8823 = c*c;
            double t8824 = 1/pow(t8783,8.0/3.0);
            double t8825 = 1/pow(t8785,3.0/2.0);
            double t8870 = EcP_3*t8823*t8824*t8825*(1.0/3.6E1);
            double t8826 = t8821+t8822-t8870;
            double t8827 = t8793*t8793;
            double t8828 = 1/(t8789*t8789*t8789);
            double t8829 = EcP_2*4.0;
            double t8830 = EcP_3*2.0;
            double t8831 = t8830+t8829;
            double t8832 = 1/(t8798*t8798*t8798);
            double t8833 = 1/(t8798*t8798*t8798*t8798*t8798);
            double t8834 = 1/(t8804*t8804);
            double t8835 = EcF_3*t8787;
            double t8836 = EcF_4+t8785+t8835;
            double t8837 = EcF_3*c*t8791*t8786*(1.0/6.0);
            double t8838 = t8790+t8837;
            double t8839 = 1/t8836;
            double t8840 = c*t8786*t8839*(1.0/3.0);
            double t8841 = 1/(t8836*t8836);
            double t8896 = c*t8784*t8841*t8838;
            double t8842 = t8840-t8896;
            double t8843 = 1/pow(t8783,2.0/3.0);
            double t8844 = EcF_2-t8787;
            double t8845 = 1/(t8844*t8844);
            double t8846 = t8844*t8844;
            double t8847 = EcF_3*c*t8791*t8811*(2.0/9.0);
            double t8848 = t8821+t8847-EcF_3*t8823*t8824*t8825*(1.0/3.6E1);
            double t8849 = t8838*t8838;
            double t8850 = 1/(t8836*t8836*t8836);
            double t8851 = EcF_3+t8797;
            double t8852 = EcF_2*4.0;
            double t8853 = EcF_3*2.0;
            double t8854 = t8852+t8853;
            double t8855 = 1/(t8851*t8851);
            double t8856 = EcF_4*4.0;
            double t8857 = EcF_3*EcF_3;
            double t8858 = t8856-t8857;
            double t8859 = t8855*t8858;
            double t8860 = t8859+1.0;
            double t8861 = 1/t8860;
            double t8862 = t8841*t8846*t8838;
            double t8863 = c*t8791*t8786*t8844*t8839*(1.0/3.0);
            double t8864 = t8862+t8863;
            double t8865 = 1/(t8851*t8851*t8851);
            double t8866 = 1/(t8851*t8851*t8851*t8851*t8851);
            double t8867 = 1/(t8860*t8860);
            double t8868 = t8793*t8806*t8808*t8809;
            double t8869 = c*t8796*t8811*(4.0/9.0);
            double t8871 = c*t8784*t8827*t8828*2.0;
            double t8872 = t8871+t8869-c*t8793*t8786*t8795*(2.0/3.0)-c*t8784*t8795*t8826;
            double t8873 = t8789*t8806*t8809*t8872;
            double t8874 = t8793*t8820*t8819;
            double t8875 = c*t8796*t8811*(1.0/1.8E1);
            double t8876 = t8816*t8827*t8828*2.0;
            double t8877 = t8794*t8796*t8823*t8824*t8825*(1.0/1.8E1);
            double t8878 = c*t8791*t8793*t8794*t8786*t8795*(2.0/3.0);
            double t8879 = t8875+t8876+t8877+t8878-t8795*t8816*t8826-c*t8791*t8794*t8796*t8811*(4.0/9.0);
            double t8880 = c*t8791*t8799*t8811*t8831*t8805*(4.0/9.0);
            double t8881 = 1/(t8794*t8794*t8794);
            double t8882 = c*t8791*t8786*t8789*t8881*t8819*(1.0/3.0);
            double t8883 = c*t8802*t8811*t8831*t8833*t8834*(2.0/9.0);
            double t8884 = t8880+t8882+t8874+t8883-t8789*t8820*t8879-c*t8811*t8831*t8805*t8832*(2.0/9.0)-t8799* \
               t8831*t8805*t8823*t8824*t8825*(1.0/1.8E1);
            double t8885 = EcP_2*EcP_3*t8815*t8884;
            double t8886 = EcP_3*c*t8811*t8805*t8832*(4.0/9.0);
            double t8887 = EcP_3*t8799*t8805*t8823*t8824*t8825*(1.0/9.0);
            double t8888 = t8873+t8885+t8868+t8886+t8887-t8789*t8806*t8843*t8808*(1.0/3.0)-EcP_3*c*t8791*t8799* \
               t8811*t8805*(8.0/9.0)-EcP_3*c*t8802*t8811*t8833*t8834*(4.0/9.0);
            double t8889 = EcP_1*t8888;
            double t8890 = pow(2.0,1.0/3.0);
            double t8891 = t8890*2.0;
            double t8892 = t8891-2.0;
            double t8893 = two_13*2.0;
            double t8894 = t8893-2.0;
            double t8895 = 1/t8894;
            double t8897 = EcF_2*EcF_2;
            double t8898 = EcF_2*EcF_3;
            double t8899 = EcF_4+t8897+t8898;
            double t8900 = 1/t8899;
            double t8901 = t8789*t8806*t8808*t8809;
            double t8902 = t8789*t8820*t8819;
            double t8903 = c*t8791*t8786*t8799*t8831*t8805*(1.0/3.0);
            double t8904 = t8902+t8903;
            double t8905 = EcP_2*EcP_3*t8815*t8904;
            double t8906 = t8901+t8905-EcP_3*c*t8791*t8786*t8799*t8805*(2.0/3.0);
            v_rho_a_rho_b_[index] = EcP_1*t8906*-2.0+t8783*(t8889-t8892*t8895*(t8889-EcF_1*(t8806*t8809*t8836* \
               (c*t8811*t8839*(4.0/9.0)-c*t8784*t8841*t8848+c*t8784*t8850*t8849*2.0-c*t8786*t8841*t8838*(2.0/3.0) \
               )-t8806*t8842*t8843*t8836*(1.0/3.0)+t8806*t8842*t8809*t8838+EcF_2*EcF_3*t8900*(-t8836*t8845*(c*t8811* \
               t8839*(1.0/1.8E1)-t8841*t8846*t8848+t8850*t8846*t8849*2.0-c*t8791*t8811*t8844*t8839*(4.0/9.0)+t8823* \
               t8824*t8825*t8844*t8839*(1.0/1.8E1)+c*t8791*t8786*t8841*t8844*t8838*(2.0/3.0))+t8845*t8864*t8838-c* \
               t8811*t8861*t8854*t8865*(2.0/9.0)+c*t8791*t8811*t8861*t8854*t8855*(4.0/9.0)+c*t8811*t8854*t8866*t8858* \
               t8867*(2.0/9.0)-t8823*t8824*t8825*t8861*t8854*t8855*(1.0/1.8E1)+c*t8791*t8786*1/(t8844*t8844*t8844) \
               *t8836*t8864*(1.0/3.0))+EcF_3*c*t8811*t8861*t8865*(4.0/9.0)-EcF_3*c*t8791*t8811*t8861*t8855*(8.0/9.0) \
               -EcF_3*c*t8811*t8866*t8858*t8867*(4.0/9.0)+EcF_3*t8823*t8824*t8825*t8861*t8855*(1.0/9.0))))+t8892* \
               t8895*(EcP_1*t8906-EcF_1*(t8806*t8842*t8809*t8836+EcF_2*EcF_3*t8900*(t8836*t8845*t8864+c*t8791*t8786* \
               t8861*t8854*t8855*(1.0/3.0))-EcF_3*c*t8791*t8786*t8861*t8855*(2.0/3.0)))*2.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t8105 = rho_a[index]+rho_b[index];
            double t8106 = 1/pow(t8105,1.0/3.0);
            double t8107 = c*t8106;
            double t8108 = 1/pow(t8105,4.0/3.0);
            double t8109 = sqrt(t8107);
            double t8110 = EcP_3*t8109;
            double t8111 = EcP_4+t8110+t8107;
            double t8112 = c*t8108*(1.0/3.0);
            double t8113 = 1/sqrt(t8107);
            double t8114 = EcP_3*c*t8113*t8108*(1.0/6.0);
            double t8115 = t8112+t8114;
            double t8116 = 1/c;
            double t8117 = 1/t8111;
            double t8118 = c*t8108*t8117*(1.0/3.0);
            double t8119 = 1/(t8111*t8111);
            double t8254 = c*t8106*t8115*t8119;
            double t8120 = t8118-t8254;
            double t8121 = pow(t8105,1.0/3.0);
            double t8122 = 1/pow(t8105,7.0/3.0);
            double t8123 = EcP_2-t8109;
            double t8124 = 1/(t8123*t8123);
            double t8125 = t8123*t8123;
            double t8126 = c*t8122*(4.0/9.0);
            double t8127 = EcP_3*c*t8113*t8122*(2.0/9.0);
            double t8128 = c*c;
            double t8129 = 1/pow(t8105,8.0/3.0);
            double t8130 = 1/pow(t8107,3.0/2.0);
            double t8257 = EcP_3*t8130*t8128*t8129*(1.0/3.6E1);
            double t8131 = t8126+t8127-t8257;
            double t8132 = t8115*t8115;
            double t8133 = 1/(t8111*t8111*t8111);
            double t8134 = t8109*2.0;
            double t8135 = EcP_3+t8134;
            double t8136 = EcP_2*4.0;
            double t8137 = EcP_3*2.0;
            double t8138 = t8136+t8137;
            double t8139 = 1/(t8135*t8135);
            double t8140 = EcP_4*4.0;
            double t8141 = EcP_3*EcP_3;
            double t8142 = t8140-t8141;
            double t8143 = t8142*t8139;
            double t8144 = t8143+1.0;
            double t8145 = 1/t8144;
            double t8146 = t8115*t8125*t8119;
            double t8147 = c*t8113*t8123*t8108*t8117*(1.0/3.0);
            double t8148 = t8146+t8147;
            double t8149 = 1/(t8135*t8135*t8135);
            double t8150 = 1/(t8135*t8135*t8135*t8135*t8135);
            double t8151 = 1/(t8144*t8144);
            double t8152 = rho_a[index]-rho_b[index];
            double t8153 = t8152*t8152;
            double t8154 = EcF_4*4.0;
            double t8155 = EcF_3*EcF_3;
            double t8156 = t8154-t8155;
            double t8157 = EcF_2-t8109;
            double t8158 = EcF_3*t8109;
            double t8159 = EcF_4+t8107+t8158;
            double t8160 = 1/t8159;
            double t8161 = sqrt(t8156);
            double t8162 = EcF_3+t8134;
            double t8163 = 1/t8162;
            double t8164 = t8161*t8163;
            double t8165 = atan(t8164);
            double t8166 = 1/sqrt(t8156);
            double t8167 = sqrt(t8142);
            double t8168 = 1/t8135;
            double t8169 = t8167*t8168;
            double t8170 = atan(t8169);
            double t8171 = 1/sqrt(t8142);
            double t8172 = EcP_2*EcP_2;
            double t8173 = EcP_2*EcP_3;
            double t8174 = EcP_4+t8172+t8173;
            double t8175 = 1/t8174;
            double t8176 = Ac_4*4.0;
            double t8177 = Ac_3*Ac_3;
            double t8178 = t8176-t8177;
            double t8179 = Ac_2-t8109;
            double t8180 = Ac_3*t8109;
            double t8181 = Ac_4+t8107+t8180;
            double t8182 = 1/t8181;
            double t8183 = sqrt(t8178);
            double t8184 = Ac_3+t8134;
            double t8185 = 1/t8184;
            double t8186 = t8183*t8185;
            double t8187 = atan(t8186);
            double t8188 = 1/sqrt(t8178);
            double t8189 = c*t8106*t8182;
            double t8190 = log(t8189);
            double t8191 = Ac_3*t8187*t8188*2.0;
            double t8192 = t8179*t8179;
            double t8193 = t8182*t8192;
            double t8194 = log(t8193);
            double t8195 = Ac_2*4.0;
            double t8196 = Ac_3*2.0;
            double t8197 = t8195+t8196;
            double t8198 = t8187*t8188*t8197;
            double t8199 = t8194+t8198;
            double t8200 = Ac_2*Ac_2;
            double t8201 = Ac_2*Ac_3;
            double t8202 = Ac_4+t8200+t8201;
            double t8203 = 1/t8202;
            double t8221 = Ac_2*Ac_3*t8199*t8203;
            double t8204 = t8190+t8191-t8221;
            double t8205 = 1/t8105;
            double t8206 = t8152*t8205;
            double t8207 = 1/(t8105*t8105);
            double t8208 = t8207*2.0;
            double t8209 = 1/(t8105*t8105*t8105);
            double t8210 = t8152*t8209*2.0;
            double t8211 = t8210+t8208;
            double t8212 = t8206+1.0;
            double t8215 = t8152*t8207;
            double t8213 = t8205+t8215;
            double t8214 = -t8206+1.0;
            double t8216 = t8213*t8213;
            double t8217 = 1/d2fz0;
            double t8218 = two_13*2.0;
            double t8219 = t8218-2.0;
            double t8220 = 1/t8219;
            double t8222 = 1/(t8105*t8105*t8105*t8105);
            double t8223 = t8153*t8153;
            double t8224 = 1/Ac_1;
            double t8225 = EcF_3*c*t8113*t8108*(1.0/6.0);
            double t8226 = t8112+t8225;
            double t8227 = c*t8160*t8108*(1.0/3.0);
            double t8228 = 1/(t8159*t8159);
            double t8278 = c*t8106*t8226*t8228;
            double t8229 = t8227-t8278;
            double t8230 = 1/pow(t8105,2.0/3.0);
            double t8231 = EcF_2*EcF_2;
            double t8232 = EcF_2*EcF_3;
            double t8233 = EcF_4+t8231+t8232;
            double t8234 = 1/t8233;
            double t8235 = t8157*t8157;
            double t8236 = 1/(t8157*t8157);
            double t8237 = EcF_3*c*t8113*t8122*(2.0/9.0);
            double t8238 = t8126+t8237-EcF_3*t8130*t8128*t8129*(1.0/3.6E1);
            double t8239 = t8226*t8226;
            double t8240 = 1/(t8159*t8159*t8159);
            double t8241 = EcF_2*4.0;
            double t8242 = EcF_3*2.0;
            double t8243 = t8241+t8242;
            double t8244 = 1/(t8162*t8162);
            double t8245 = t8156*t8244;
            double t8246 = t8245+1.0;
            double t8247 = 1/t8246;
            double t8248 = t8226*t8235*t8228;
            double t8249 = c*t8113*t8160*t8108*t8157*(1.0/3.0);
            double t8250 = t8248+t8249;
            double t8251 = 1/(t8162*t8162*t8162);
            double t8252 = 1/(t8162*t8162*t8162*t8162*t8162);
            double t8253 = 1/(t8246*t8246);
            double t8255 = t8120*t8121*t8115*t8116;
            double t8256 = c*t8122*t8117*(4.0/9.0);
            double t8258 = c*t8132*t8106*t8133*2.0;
            double t8259 = t8256+t8258-c*t8131*t8106*t8119-c*t8115*t8108*t8119*(2.0/3.0);
            double t8260 = t8111*t8121*t8116*t8259;
            double t8261 = t8115*t8124*t8148;
            double t8262 = c*t8122*t8117*(1.0/1.8E1);
            double t8263 = t8132*t8133*t8125*2.0;
            double t8264 = t8130*t8123*t8117*t8128*t8129*(1.0/1.8E1);
            double t8265 = c*t8113*t8123*t8115*t8108*t8119*(2.0/3.0);
            double t8266 = t8262+t8263+t8264+t8265-t8131*t8125*t8119-c*t8113*t8122*t8123*t8117*(4.0/9.0);
            double t8267 = c*t8113*t8122*t8145*t8138*t8139*(4.0/9.0);
            double t8268 = 1/(t8123*t8123*t8123);
            double t8269 = c*t8111*t8113*t8108*t8148*t8268*(1.0/3.0);
            double t8270 = c*t8122*t8150*t8142*t8151*t8138*(2.0/9.0);
            double t8271 = t8261+t8270+t8267+t8269-t8111*t8124*t8266-c*t8122*t8145*t8138*t8149*(2.0/9.0)-t8130* \
               t8145*t8128*t8129*t8138*t8139*(1.0/1.8E1);
            double t8272 = EcP_2*EcP_3*t8175*t8271;
            double t8273 = EcP_3*c*t8122*t8145*t8149*(4.0/9.0);
            double t8274 = EcP_3*t8130*t8145*t8128*t8129*t8139*(1.0/9.0);
            double t8275 = t8260+t8272+t8255+t8273+t8274-t8111*t8120*t8116*t8230*(1.0/3.0)-EcP_3*c*t8122*t8150* \
               t8142*t8151*(4.0/9.0)-EcP_3*c*t8113*t8122*t8145*t8139*(8.0/9.0);
            double t8276 = EcP_1*t8275;
            double t8277 = 1/t8204;
            double t8279 = Ac_3*c*t8113*t8108*(1.0/6.0);
            double t8280 = t8112+t8279;
            double t8281 = 1/(t8181*t8181);
            double t8282 = 1/(t8184*t8184);
            double t8283 = t8178*t8282;
            double t8284 = t8283+1.0;
            double t8285 = 1/t8284;
            double t8286 = c*t8106*t8160;
            double t8287 = log(t8286);
            double t8288 = EcF_3*t8165*t8166*2.0;
            double t8289 = t8160*t8235;
            double t8290 = log(t8289);
            double t8291 = t8165*t8166*t8243;
            double t8292 = t8290+t8291;
            double t8316 = EcF_2*EcF_3*t8234*t8292;
            double t8293 = t8287+t8288-t8316;
            double t8294 = EcF_1*t8293;
            double t8295 = c*t8106*t8117;
            double t8296 = log(t8295);
            double t8297 = EcP_3*t8170*t8171*2.0;
            double t8298 = t8125*t8117;
            double t8299 = log(t8298);
            double t8300 = t8170*t8171*t8138;
            double t8301 = t8299+t8300;
            double t8317 = EcP_2*EcP_3*t8175*t8301;
            double t8302 = t8296+t8297-t8317;
            double t8318 = EcP_1*t8302;
            double t8303 = t8294-t8318;
            double t8304 = c*t8108*t8182*(1.0/3.0);
            double t8320 = c*t8106*t8280*t8281;
            double t8305 = -t8320+t8304;
            double t8306 = t8121*t8116*t8181*t8305;
            double t8307 = t8192*t8280*t8281;
            double t8308 = c*t8113*t8108*t8182*t8179*(1.0/3.0);
            double t8309 = t8307+t8308;
            double t8310 = 1/(t8179*t8179);
            double t8311 = t8181*t8310*t8309;
            double t8312 = c*t8113*t8108*t8197*t8282*t8285*(1.0/3.0);
            double t8313 = t8311+t8312;
            double t8314 = Ac_2*Ac_3*t8203*t8313;
            double t8342 = Ac_3*c*t8113*t8108*t8282*t8285*(2.0/3.0);
            double t8315 = t8314+t8306-t8342;
            double t8319 = 1/(t8204*t8204);
            double t8321 = Ac_3*c*t8113*t8122*(2.0/9.0);
            double t8366 = Ac_3*t8130*t8128*t8129*(1.0/3.6E1);
            double t8322 = t8126+t8321-t8366;
            double t8323 = t8280*t8280;
            double t8324 = 1/(t8181*t8181*t8181);
            double t8325 = 1/(t8184*t8184*t8184);
            double t8326 = 1/(t8184*t8184*t8184*t8184*t8184);
            double t8327 = 1/(t8284*t8284);
            double t8328 = t8121*t8116*t8159*t8229;
            double t8329 = t8159*t8250*t8236;
            double t8330 = c*t8113*t8108*t8243*t8244*t8247*(1.0/3.0);
            double t8331 = t8330+t8329;
            double t8332 = EcF_2*EcF_3*t8234*t8331;
            double t8343 = EcF_3*c*t8113*t8108*t8244*t8247*(2.0/3.0);
            double t8333 = t8332-t8343+t8328;
            double t8334 = EcF_1*t8333;
            double t8335 = t8111*t8120*t8121*t8116;
            double t8336 = t8111*t8124*t8148;
            double t8337 = c*t8113*t8108*t8145*t8138*t8139*(1.0/3.0);
            double t8338 = t8336+t8337;
            double t8339 = EcP_2*EcP_3*t8175*t8338;
            double t8344 = EcP_3*c*t8113*t8108*t8145*t8139*(2.0/3.0);
            double t8340 = t8335-t8344+t8339;
            double t8345 = EcP_1*t8340;
            double t8341 = t8334-t8345;
            double t8346 = d2fz0*t8224*t8277*t8341;
            double t8353 = d2fz0*t8224*t8303*t8315*t8319;
            double t8347 = -t8353+t8346;
            double t8348 = d2fz0*t8224*t8277*t8303;
            double t8349 = t8348-1.0;
            double t8350 = 1/(t8105*t8105*t8105*t8105*t8105);
            double t8351 = pow(t8212,1.0/3.0);
            double t8352 = pow(t8214,1.0/3.0);
            double t8354 = t8213*t8351*(4.0/3.0);
            double t8386 = t8213*t8352*(4.0/3.0);
            double t8355 = t8354-t8386;
            double t8356 = t8222*t8223*t8349;
            double t8357 = t8356+1.0;
            double t8358 = pow(t8212,4.0/3.0);
            double t8359 = pow(t8214,4.0/3.0);
            double t8360 = t8358+t8359-2.0;
            double t8361 = t8222*t8223*t8347;
            double t8362 = t8152*t8153*t8222*t8349*4.0;
            double t8363 = t8223*t8350*t8349*4.0;
            double t8364 = t8361+t8362+t8363;
            double t8365 = c*t8122*t8182*(4.0/9.0);
            double t8367 = c*t8106*t8323*t8324*2.0;
            double t8368 = t8365+t8367-c*t8108*t8280*t8281*(2.0/3.0)-c*t8106*t8281*t8322;
            double t8369 = t8121*t8116*t8181*t8368;
            double t8370 = t8280*t8310*t8309;
            double t8371 = c*t8122*t8182*(1.0/1.8E1);
            double t8372 = t8192*t8323*t8324*2.0;
            double t8373 = t8130*t8128*t8182*t8129*t8179*(1.0/1.8E1);
            double t8374 = c*t8113*t8108*t8179*t8280*t8281*(2.0/3.0);
            double t8375 = t8371+t8372+t8373+t8374-t8192*t8281*t8322-c*t8113*t8122*t8182*t8179*(4.0/9.0);
            double t8376 = c*t8113*t8122*t8197*t8282*t8285*(4.0/9.0);
            double t8377 = 1/(t8179*t8179*t8179);
            double t8378 = c*t8113*t8108*t8181*t8309*t8377*(1.0/3.0);
            double t8379 = c*t8122*t8178*t8197*t8326*t8327*(2.0/9.0);
            double t8380 = t8370+t8376+t8378+t8379-t8181*t8310*t8375-c*t8122*t8197*t8285*t8325*(2.0/9.0)-t8130* \
               t8128*t8129*t8197*t8282*t8285*(1.0/1.8E1);
            double t8381 = Ac_2*Ac_3*t8203*t8380;
            double t8382 = t8121*t8116*t8280*t8305;
            double t8383 = Ac_3*c*t8122*t8285*t8325*(4.0/9.0);
            double t8384 = Ac_3*t8130*t8128*t8129*t8282*t8285*(1.0/9.0);
            double t8385 = t8381+t8382+t8383+t8384+t8369-t8116*t8181*t8230*t8305*(1.0/3.0)-Ac_3*c*t8113*t8122* \
               t8282*t8285*(8.0/9.0)-Ac_3*c*t8122*t8178*t8326*t8327*(4.0/9.0);
            v_rho_b_rho_b_[index] = EcP_1*t8340*-2.0+t8105*(t8276+Ac_1*t8220*t8204*t8217*t8360*(1/(t8105*t8105* \
               t8105*t8105*t8105*t8105)*t8223*t8349*2.0E1+t8153*t8222*t8349*1.2E1+t8223*t8350*t8347*8.0-t8222*t8223* \
               (d2fz0*t8224*t8277*(t8276-EcF_1*(t8121*t8116*t8159*(c*t8122*t8160*(4.0/9.0)+c*t8106*t8240*t8239*2.0- \
               c*t8108*t8226*t8228*(2.0/3.0)-c*t8106*t8228*t8238)+t8121*t8116*t8226*t8229-t8116*t8159*t8230*t8229* \
               (1.0/3.0)+EcF_2*EcF_3*t8234*(-t8159*t8236*(c*t8122*t8160*(1.0/1.8E1)+t8240*t8235*t8239*2.0-t8235*t8228* \
               t8238-c*t8113*t8122*t8160*t8157*(4.0/9.0)+t8130*t8160*t8128*t8129*t8157*(1.0/1.8E1)+c*t8113*t8108* \
               t8157*t8226*t8228*(2.0/3.0))+t8250*t8226*t8236-c*t8122*t8251*t8243*t8247*(2.0/9.0)+c*t8113*t8122*t8243* \
               t8244*t8247*(4.0/9.0)+c*t8122*t8156*t8243*t8252*t8253*(2.0/9.0)-t8130*t8128*t8129*t8243*t8244*t8247* \
               (1.0/1.8E1)+c*t8113*t8108*1/(t8157*t8157*t8157)*t8159*t8250*(1.0/3.0))+EcF_3*c*t8122*t8251*t8247*(4.0/ \
               9.0)-EcF_3*c*t8113*t8122*t8244*t8247*(8.0/9.0)-EcF_3*c*t8122*t8156*t8252*t8253*(4.0/9.0)+EcF_3*t8130* \
               t8128*t8129*t8244*t8247*(1.0/9.0)))-d2fz0*1/(t8204*t8204*t8204)*t8224*t8303*(t8315*t8315)*2.0+d2fz0* \
               t8224*t8341*t8315*t8319*2.0+d2fz0*t8224*t8303*t8319*t8385)+t8152*t8153*t8222*t8347*8.0+t8152*t8153* \
               t8350*t8349*3.2E1)+Ac_1*t8220*t8204*t8217*t8357*(t8211*t8351*(4.0/3.0)-t8211*t8352*(4.0/3.0)+1/pow(t8212,2.0/ \
               3.0)*t8216*(4.0/9.0)+1/pow(t8214,2.0/3.0)*t8216*(4.0/9.0))+Ac_1*t8220*t8204*t8217*t8355*t8364*2.0+ \
               Ac_1*t8220*t8217*t8315*t8360*t8364*2.0+Ac_1*t8220*t8217*t8315*t8355*t8357*2.0+Ac_1*t8220*t8217*t8360* \
               t8357*t8385)-Ac_1*t8220*t8204*t8217*t8360*t8364*2.0-Ac_1*t8220*t8204*t8217*t8355*t8357*2.0-Ac_1*t8220* \
               t8217*t8315*t8360*t8357*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t9553 = rho_a[index]+rho_b[index];
            double t9554 = 1/pow(t9553,1.0/3.0);
            double t9555 = c*t9554;
            double t9556 = 1/pow(t9553,4.0/3.0);
            double t9557 = sqrt(t9555);
            double t9558 = EcP_3*t9557;
            double t9559 = EcP_4+t9555+t9558;
            double t9560 = c*t9556*(1.0/3.0);
            double t9561 = 1/sqrt(t9555);
            double t9562 = EcP_3*c*t9561*t9556*(1.0/6.0);
            double t9563 = t9560+t9562;
            double t9564 = EcP_2-t9557;
            double t9565 = 1/(t9559*t9559);
            double t9566 = 1/t9559;
            double t9567 = t9557*2.0;
            double t9568 = EcP_3+t9567;
            double t9569 = 1/(t9568*t9568);
            double t9570 = EcP_4*4.0;
            double t9571 = EcP_3*EcP_3;
            double t9572 = t9570-t9571;
            double t9573 = t9572*t9569;
            double t9574 = t9573+1.0;
            double t9575 = 1/t9574;
            double t9576 = 1/c;
            double t9577 = c*t9556*t9566*(1.0/3.0);
            double t9580 = c*t9554*t9563*t9565;
            double t9578 = -t9580+t9577;
            double t9579 = pow(t9553,1.0/3.0);
            double t9581 = 1/pow(t9553,7.0/3.0);
            double t9582 = EcP_2*EcP_2;
            double t9583 = EcP_2*EcP_3;
            double t9584 = EcP_4+t9582+t9583;
            double t9585 = 1/t9584;
            double t9586 = t9564*t9564;
            double t9587 = t9563*t9565*t9586;
            double t9588 = c*t9561*t9564*t9556*t9566*(1.0/3.0);
            double t9589 = t9587+t9588;
            double t9590 = 1/(t9564*t9564);
            double t9591 = c*t9581*(4.0/9.0);
            double t9592 = EcP_3*c*t9561*t9581*(2.0/9.0);
            double t9593 = c*c;
            double t9594 = 1/pow(t9553,8.0/3.0);
            double t9595 = 1/pow(t9555,3.0/2.0);
            double t9640 = EcP_3*t9593*t9594*t9595*(1.0/3.6E1);
            double t9596 = t9591+t9592-t9640;
            double t9597 = t9563*t9563;
            double t9598 = 1/(t9559*t9559*t9559);
            double t9599 = EcP_2*4.0;
            double t9600 = EcP_3*2.0;
            double t9601 = t9599+t9600;
            double t9602 = 1/(t9568*t9568*t9568);
            double t9603 = 1/(t9568*t9568*t9568*t9568*t9568);
            double t9604 = 1/(t9574*t9574);
            double t9605 = EcF_3*t9557;
            double t9606 = EcF_4+t9555+t9605;
            double t9607 = EcF_3*c*t9561*t9556*(1.0/6.0);
            double t9608 = t9560+t9607;
            double t9609 = 1/t9606;
            double t9610 = c*t9556*t9609*(1.0/3.0);
            double t9611 = 1/(t9606*t9606);
            double t9666 = c*t9554*t9611*t9608;
            double t9612 = t9610-t9666;
            double t9613 = 1/pow(t9553,2.0/3.0);
            double t9614 = EcF_2-t9557;
            double t9615 = 1/(t9614*t9614);
            double t9616 = t9614*t9614;
            double t9617 = EcF_3*c*t9561*t9581*(2.0/9.0);
            double t9618 = t9591+t9617-EcF_3*t9593*t9594*t9595*(1.0/3.6E1);
            double t9619 = t9608*t9608;
            double t9620 = 1/(t9606*t9606*t9606);
            double t9621 = EcF_3+t9567;
            double t9622 = EcF_2*4.0;
            double t9623 = EcF_3*2.0;
            double t9624 = t9622+t9623;
            double t9625 = 1/(t9621*t9621);
            double t9626 = EcF_4*4.0;
            double t9627 = EcF_3*EcF_3;
            double t9628 = t9626-t9627;
            double t9629 = t9625*t9628;
            double t9630 = t9629+1.0;
            double t9631 = 1/t9630;
            double t9632 = t9611*t9616*t9608;
            double t9633 = c*t9561*t9556*t9614*t9609*(1.0/3.0);
            double t9634 = t9632+t9633;
            double t9635 = 1/(t9621*t9621*t9621);
            double t9636 = 1/(t9621*t9621*t9621*t9621*t9621);
            double t9637 = 1/(t9630*t9630);
            double t9638 = t9563*t9576*t9578*t9579;
            double t9639 = c*t9581*t9566*(4.0/9.0);
            double t9641 = c*t9554*t9597*t9598*2.0;
            double t9642 = t9641+t9639-c*t9563*t9556*t9565*(2.0/3.0)-c*t9554*t9565*t9596;
            double t9643 = t9576*t9559*t9579*t9642;
            double t9644 = t9563*t9590*t9589;
            double t9645 = c*t9581*t9566*(1.0/1.8E1);
            double t9646 = t9586*t9597*t9598*2.0;
            double t9647 = t9564*t9566*t9593*t9594*t9595*(1.0/1.8E1);
            double t9648 = c*t9561*t9563*t9564*t9556*t9565*(2.0/3.0);
            double t9649 = t9645+t9646+t9647+t9648-t9565*t9586*t9596-c*t9561*t9581*t9564*t9566*(4.0/9.0);
            double t9650 = c*t9561*t9581*t9575*t9569*t9601*(4.0/9.0);
            double t9651 = 1/(t9564*t9564*t9564);
            double t9652 = c*t9561*t9556*t9559*t9589*t9651*(1.0/3.0);
            double t9653 = c*t9572*t9581*t9601*t9603*t9604*(2.0/9.0);
            double t9654 = t9650+t9652+t9644+t9653-t9590*t9559*t9649-c*t9581*t9575*t9601*t9602*(2.0/9.0)-t9575* \
               t9593*t9594*t9595*t9569*t9601*(1.0/1.8E1);
            double t9655 = EcP_2*EcP_3*t9585*t9654;
            double t9656 = EcP_3*c*t9581*t9575*t9602*(4.0/9.0);
            double t9657 = EcP_3*t9575*t9593*t9594*t9595*t9569*(1.0/9.0);
            double t9658 = t9643+t9655+t9638+t9656+t9657-t9576*t9559*t9578*t9613*(1.0/3.0)-EcP_3*c*t9561*t9581* \
               t9575*t9569*(8.0/9.0)-EcP_3*c*t9572*t9581*t9603*t9604*(4.0/9.0);
            double t9659 = EcP_1*t9658;
            double t9660 = pow(2.0,1.0/3.0);
            double t9661 = t9660*2.0;
            double t9662 = t9661-2.0;
            double t9663 = two_13*2.0;
            double t9664 = t9663-2.0;
            double t9665 = 1/t9664;
            double t9667 = EcF_2*EcF_2;
            double t9668 = EcF_2*EcF_3;
            double t9669 = EcF_4+t9667+t9668;
            double t9670 = 1/t9669;
            double t9671 = t9576*t9559*t9578*t9579;
            double t9672 = t9590*t9559*t9589;
            double t9673 = c*t9561*t9556*t9575*t9569*t9601*(1.0/3.0);
            double t9674 = t9672+t9673;
            double t9675 = EcP_2*EcP_3*t9585*t9674;
            double t9676 = t9671+t9675-EcP_3*c*t9561*t9556*t9575*t9569*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t9676*-2.0+t9553*(t9659-t9662*t9665*(t9659-EcF_1*(t9576*t9579*t9606* \
               (c*t9581*t9609*(4.0/9.0)-c*t9554*t9611*t9618+c*t9554*t9620*t9619*2.0-c*t9556*t9611*t9608*(2.0/3.0) \
               )+t9576*t9579*t9612*t9608-t9576*t9612*t9613*t9606*(1.0/3.0)+EcF_2*EcF_3*t9670*(-t9606*t9615*(c*t9581* \
               t9609*(1.0/1.8E1)-t9611*t9616*t9618+t9620*t9616*t9619*2.0-c*t9561*t9581*t9614*t9609*(4.0/9.0)+t9593* \
               t9594*t9595*t9614*t9609*(1.0/1.8E1)+c*t9561*t9556*t9611*t9614*t9608*(2.0/3.0))+t9615*t9634*t9608-c* \
               t9581*t9631*t9624*t9635*(2.0/9.0)+c*t9561*t9581*t9631*t9624*t9625*(4.0/9.0)+c*t9581*t9624*t9636*t9628* \
               t9637*(2.0/9.0)-t9593*t9594*t9595*t9631*t9624*t9625*(1.0/1.8E1)+c*t9561*t9556*1/(t9614*t9614*t9614) \
               *t9606*t9634*(1.0/3.0))+EcF_3*c*t9581*t9631*t9635*(4.0/9.0)-EcF_3*c*t9561*t9581*t9631*t9625*(8.0/9.0) \
               -EcF_3*c*t9581*t9636*t9628*t9637*(4.0/9.0)+EcF_3*t9593*t9594*t9595*t9631*t9625*(1.0/9.0))))+t9662* \
               t9665*(EcP_1*t9676-EcF_1*(t9576*t9579*t9612*t9606+EcF_2*EcF_3*t9670*(t9606*t9615*t9634+c*t9561*t9556* \
               t9631*t9624*t9625*(1.0/3.0))-EcF_3*c*t9561*t9556*t9631*t9625*(2.0/3.0)))*2.0;
        } else if (rho_b[index] > cutoff_) {
            double t8908 = rho_a[index]+rho_b[index];
            double t8909 = 1/pow(t8908,1.0/3.0);
            double t8910 = c*t8909;
            double t8911 = 1/pow(t8908,4.0/3.0);
            double t8912 = sqrt(t8910);
            double t8913 = EcP_3*t8912;
            double t8914 = EcP_4+t8910+t8913;
            double t8915 = c*t8911*(1.0/3.0);
            double t8916 = 1/sqrt(t8910);
            double t8917 = EcP_3*c*t8911*t8916*(1.0/6.0);
            double t8918 = t8915+t8917;
            double t8919 = EcP_2-t8912;
            double t8920 = 1/(t8914*t8914);
            double t8921 = 1/t8914;
            double t8922 = t8912*2.0;
            double t8923 = EcP_3+t8922;
            double t8924 = 1/(t8923*t8923);
            double t8925 = EcP_4*4.0;
            double t8926 = EcP_3*EcP_3;
            double t8927 = t8925-t8926;
            double t8928 = t8924*t8927;
            double t8929 = t8928+1.0;
            double t8930 = 1/t8929;
            double t8931 = 1/c;
            double t8932 = c*t8911*t8921*(1.0/3.0);
            double t8935 = c*t8920*t8909*t8918;
            double t8933 = t8932-t8935;
            double t8934 = pow(t8908,1.0/3.0);
            double t8936 = 1/pow(t8908,7.0/3.0);
            double t8937 = EcP_2*EcP_2;
            double t8938 = EcP_2*EcP_3;
            double t8939 = EcP_4+t8937+t8938;
            double t8940 = 1/t8939;
            double t8941 = t8919*t8919;
            double t8942 = t8920*t8941*t8918;
            double t8943 = c*t8911*t8921*t8916*t8919*(1.0/3.0);
            double t8944 = t8942+t8943;
            double t8945 = 1/(t8919*t8919);
            double t8946 = c*t8936*(4.0/9.0);
            double t8947 = EcP_3*c*t8916*t8936*(2.0/9.0);
            double t8948 = c*c;
            double t8949 = 1/pow(t8908,8.0/3.0);
            double t8950 = 1/pow(t8910,3.0/2.0);
            double t8995 = EcP_3*t8950*t8948*t8949*(1.0/3.6E1);
            double t8951 = t8946+t8947-t8995;
            double t8952 = t8918*t8918;
            double t8953 = 1/(t8914*t8914*t8914);
            double t8954 = EcP_2*4.0;
            double t8955 = EcP_3*2.0;
            double t8956 = t8954+t8955;
            double t8957 = 1/(t8923*t8923*t8923);
            double t8958 = 1/(t8923*t8923*t8923*t8923*t8923);
            double t8959 = 1/(t8929*t8929);
            double t8960 = EcF_3*t8912;
            double t8961 = EcF_4+t8910+t8960;
            double t8962 = EcF_3*c*t8911*t8916*(1.0/6.0);
            double t8963 = t8915+t8962;
            double t8964 = 1/t8961;
            double t8965 = c*t8911*t8964*(1.0/3.0);
            double t8966 = 1/(t8961*t8961);
            double t9021 = c*t8909*t8963*t8966;
            double t8967 = t8965-t9021;
            double t8968 = 1/pow(t8908,2.0/3.0);
            double t8969 = EcF_2-t8912;
            double t8970 = 1/(t8969*t8969);
            double t8971 = t8969*t8969;
            double t8972 = EcF_3*c*t8916*t8936*(2.0/9.0);
            double t8973 = t8972+t8946-EcF_3*t8950*t8948*t8949*(1.0/3.6E1);
            double t8974 = t8963*t8963;
            double t8975 = 1/(t8961*t8961*t8961);
            double t8976 = EcF_3+t8922;
            double t8977 = EcF_2*4.0;
            double t8978 = EcF_3*2.0;
            double t8979 = t8977+t8978;
            double t8980 = 1/(t8976*t8976);
            double t8981 = EcF_4*4.0;
            double t8982 = EcF_3*EcF_3;
            double t8983 = t8981-t8982;
            double t8984 = t8980*t8983;
            double t8985 = t8984+1.0;
            double t8986 = 1/t8985;
            double t8987 = t8971*t8963*t8966;
            double t8988 = c*t8911*t8916*t8964*t8969*(1.0/3.0);
            double t8989 = t8987+t8988;
            double t8990 = 1/(t8976*t8976*t8976);
            double t8991 = 1/(t8976*t8976*t8976*t8976*t8976);
            double t8992 = 1/(t8985*t8985);
            double t8993 = t8931*t8933*t8934*t8918;
            double t8994 = c*t8921*t8936*(4.0/9.0);
            double t8996 = c*t8952*t8953*t8909*2.0;
            double t8997 = t8994+t8996-c*t8911*t8920*t8918*(2.0/3.0)-c*t8920*t8951*t8909;
            double t8998 = t8931*t8914*t8934*t8997;
            double t8999 = t8944*t8918*t8945;
            double t9000 = c*t8921*t8936*(1.0/1.8E1);
            double t9001 = t8941*t8952*t8953*2.0;
            double t9002 = t8921*t8950*t8919*t8948*t8949*(1.0/1.8E1);
            double t9003 = c*t8911*t8920*t8916*t8918*t8919*(2.0/3.0);
            double t9004 = t9000+t9001+t9002+t9003-t8920*t8941*t8951-c*t8921*t8916*t8936*t8919*(4.0/9.0);
            double t9005 = c*t8930*t8924*t8916*t8936*t8956*(4.0/9.0);
            double t9006 = 1/(t8919*t8919*t8919);
            double t9007 = c*t8911*t8914*t8916*t8944*t9006*(1.0/3.0);
            double t9008 = c*t8927*t8936*t8956*t8958*t8959*(2.0/9.0);
            double t9009 = t8999+t9005+t9007+t9008-t8914*t8945*t9004-c*t8930*t8936*t8956*t8957*(2.0/9.0)-t8930* \
               t8950*t8924*t8956*t8948*t8949*(1.0/1.8E1);
            double t9010 = EcP_2*EcP_3*t8940*t9009;
            double t9011 = EcP_3*c*t8930*t8936*t8957*(4.0/9.0);
            double t9012 = EcP_3*t8930*t8950*t8924*t8948*t8949*(1.0/9.0);
            double t9013 = t8993+t8998+t9010+t9011+t9012-t8931*t8914*t8933*t8968*(1.0/3.0)-EcP_3*c*t8930*t8924* \
               t8916*t8936*(8.0/9.0)-EcP_3*c*t8927*t8936*t8958*t8959*(4.0/9.0);
            double t9014 = EcP_1*t9013;
            double t9015 = pow(2.0,1.0/3.0);
            double t9016 = t9015*2.0;
            double t9017 = t9016-2.0;
            double t9018 = two_13*2.0;
            double t9019 = t9018-2.0;
            double t9020 = 1/t9019;
            double t9022 = EcF_2*EcF_2;
            double t9023 = EcF_2*EcF_3;
            double t9024 = EcF_4+t9022+t9023;
            double t9025 = 1/t9024;
            double t9026 = t8931*t8914*t8933*t8934;
            double t9027 = t8914*t8944*t8945;
            double t9028 = c*t8911*t8930*t8924*t8916*t8956*(1.0/3.0);
            double t9029 = t9027+t9028;
            double t9030 = EcP_2*EcP_3*t8940*t9029;
            double t9031 = t9030+t9026-EcP_3*c*t8911*t8930*t8924*t8916*(2.0/3.0);
            v_rho_b_rho_b_[index] = EcP_1*t9031*-2.0+t8908*(t9014-t9020*t9017*(t9014-EcF_1*(t8931*t8934*t8961* \
               (c*t8936*t8964*(4.0/9.0)-c*t8911*t8963*t8966*(2.0/3.0)-c*t8909*t8973*t8966+c*t8909*t8974*t8975*2.0) \
               +t8931*t8934*t8963*t8967-t8931*t8961*t8967*t8968*(1.0/3.0)+EcF_2*EcF_3*t9025*(-t8961*t8970*(c*t8936* \
               t8964*(1.0/1.8E1)-t8971*t8973*t8966+t8971*t8974*t8975*2.0-c*t8916*t8936*t8964*t8969*(4.0/9.0)+t8950* \
               t8964*t8948*t8949*t8969*(1.0/1.8E1)+c*t8911*t8916*t8963*t8966*t8969*(2.0/3.0))+t8970*t8963*t8989-c* \
               t8936*t8990*t8986*t8979*(2.0/9.0)+c*t8916*t8980*t8936*t8986*t8979*(4.0/9.0)+c*t8936*t8991*t8983*t8992* \
               t8979*(2.0/9.0)-t8950*t8980*t8948*t8949*t8986*t8979*(1.0/1.8E1)+c*t8911*t8916*t8961*1/(t8969*t8969* \
               t8969)*t8989*(1.0/3.0))+EcF_3*c*t8936*t8990*t8986*(4.0/9.0)-EcF_3*c*t8916*t8980*t8936*t8986*(8.0/9.0) \
               -EcF_3*c*t8936*t8991*t8983*t8992*(4.0/9.0)+EcF_3*t8950*t8980*t8948*t8949*t8986*(1.0/9.0))))+t9020* \
               t9017*(EcP_1*t9031-EcF_1*(t8931*t8934*t8961*t8967+EcF_2*EcF_3*t9025*(t8961*t8970*t8989+c*t8911*t8916* \
               t8980*t8986*t8979*(1.0/3.0))-EcF_3*c*t8911*t8916*t8980*t8986*(2.0/3.0)))*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

