/**********************************************************
* B88_functional.cc: definitions for B88_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 09-Sep-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "B88_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B88_Functional::B88_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B88";
    description_ = "Becke 88 Exchange";
    citation_ = "A.D. Becke, Phys. Rev. A, 38(6):3098â€“3100, 1988";
    
    double c = 9.3052573634909974E-01;
    params_.push_back(make_pair("c",c));
    double d = 4.1999999999999997E-03;
    params_.push_back(make_pair("d",d));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B88_Functional::~B88_Functional()
{
}
void B88_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensity();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquared();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensity();
    }

    double c = params_[0].second;
    double d = params_[1].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        double t4146 = pow(rho_a[index],4.0/3.0);
        double t4147 = sqrt(gamma_aa[index]);
        functional_[index] = c*t4146*-2.0-(d*gamma_aa[index]*t4146*2.0)/(d*t4147*log(t4147+sqrt(t4147*t4147+1.0) \
           )*6.0+1.0);

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        double t4149 = pow(rho_a[index],1.0/3.0);
        double t4150 = sqrt(gamma_aa[index]);
        v_rho_a_[index] = c*t4149*(-8.0/3.0)-(d*gamma_aa[index]*t4149*(8.0/3.0))/(d*t4150*log(t4150+sqrt(t4150* \
           t4150+1.0))*6.0+1.0);
        
        if (is_gga_) {
            
            double t4152 = sqrt(gamma_aa[index]);
            double t4153 = pow(rho_a[index],4.0/3.0);
            double t4154 = log(t4152+sqrt(t4152*t4152+1.0));
            double t4155 = d*t4152*t4154*6.0;
            double t4156 = t4155+1.0;
            v_gamma_aa_[index] = (d*t4153*-2.0)/t4156+d*gamma_aa[index]*t4153*1/(t4156*t4156)*(d*1/sqrt(gamma_aa[index]+ \
               1.0)*3.0+d*1/sqrt(gamma_aa[index])*t4154*3.0)*2.0;
        
        }
        if (is_meta_) {
        
            //V_tau_a
            v_tau_a_[index] = 0.0;
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        double t4159 = 1/pow(rho_a[index],2.0/3.0);
        double t4160 = sqrt(gamma_aa[index]);
        v_rho_a_rho_a_[index] = c*t4159*(-8.0/9.0)-(d*gamma_aa[index]*t4159*(8.0/9.0))/(d*t4160*log(t4160+sqrt(t4160* \
           t4160+1.0))*6.0+1.0);
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            double t4162 = sqrt(gamma_aa[index]);
            double t4163 = pow(rho_a[index],1.0/3.0);
            double t4164 = log(t4162+sqrt(t4162*t4162+1.0));
            double t4165 = d*t4162*t4164*6.0;
            double t4166 = t4165+1.0;
            v_rho_a_gamma_aa_[index] = (d*t4163*(-8.0/3.0))/t4166+d*gamma_aa[index]*t4163*1/(t4166*t4166)*(d*1/sqrt(gamma_aa[index]+ \
               1.0)*3.0+d*1/sqrt(gamma_aa[index])*t4164*3.0)*(8.0/3.0);
        
            //V_gamma_aa_gamma_aa
            double t4168 = sqrt(gamma_aa[index]);
            double t4169 = log(t4168+sqrt(t4168*t4168+1.0));
            double t4170 = pow(rho_a[index],4.0/3.0);
            double t4171 = d*t4168*t4169*6.0;
            double t4172 = t4171+1.0;
            double t4173 = 1/(t4172*t4172);
            double t4174 = gamma_aa[index]+1.0;
            double t4175 = 1/sqrt(t4174);
            double t4176 = d*t4175*3.0;
            double t4177 = 1/sqrt(gamma_aa[index]);
            double t4178 = d*t4177*t4169*3.0;
            double t4179 = t4176+t4178;
            v_gamma_aa_gamma_aa_[index] = d*t4170*t4173*t4179*4.0-d*gamma_aa[index]*t4170*t4173*(d*1/pow(t4174,3.0/ \
               2.0)*(3.0/2.0)-(d*t4175*(3.0/2.0))/gamma_aa[index]+d*1/pow(gamma_aa[index],3.0/2.0)*t4169*(3.0/2.0) \
               )*2.0-d*gamma_aa[index]*t4170*1/(t4172*t4172*t4172)*(t4179*t4179)*4.0;
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            v_rho_a_tau_a_[index] = 0.0;
        
            //V_tau_a_tau_a
            v_tau_a_tau_a_[index] = 0.0;
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                v_gamma_aa_tau_a_[index] = 0.0;
       
            }
        }
    }
}
void B88_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_a = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    double c = params_[0].second;
    double d = params_[1].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        double t4054 = pow(rho_a[index],4.0/3.0);
        double t4055 = sqrt(gamma_aa[index]);
        double t4056 = pow(rho_b[index],4.0/3.0);
        double t4057 = sqrt(gamma_bb[index]);
        functional_[index] = -c*(t4054+t4056)-(d*gamma_aa[index]*t4054)/(d*t4055*log(t4055+sqrt(t4055*t4055+1.0) \
           )*6.0+1.0)-(d*gamma_bb[index]*t4056)/(d*t4057*log(t4057+sqrt(t4057*t4057+1.0))*6.0+1.0);
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        double t4059 = pow(rho_a[index],1.0/3.0);
        double t4060 = sqrt(gamma_aa[index]);
        v_rho_a_[index] = c*t4059*(-4.0/3.0)-(d*gamma_aa[index]*t4059*(4.0/3.0))/(d*t4060*log(t4060+sqrt(t4060* \
           t4060+1.0))*6.0+1.0);

        //V_rho_b
        double t4062 = pow(rho_b[index],1.0/3.0);
        double t4063 = sqrt(gamma_bb[index]);
        v_rho_b_[index] = c*t4062*(-4.0/3.0)-(d*gamma_bb[index]*t4062*(4.0/3.0))/(d*t4063*log(t4063+sqrt(t4063* \
           t4063+1.0))*6.0+1.0);

        if (is_gga_) {

            //V_gamma_aa
            double t4065 = sqrt(gamma_aa[index]);
            double t4066 = pow(rho_a[index],4.0/3.0);
            double t4067 = log(t4065+sqrt(t4065*t4065+1.0));
            double t4068 = d*t4065*t4067*6.0;
            double t4069 = t4068+1.0;
            v_gamma_aa_[index] = -(d*t4066)/t4069+d*gamma_aa[index]*t4066*1/(t4069*t4069)*(d*1/sqrt(gamma_aa[index]+ \
               1.0)*3.0+d*1/sqrt(gamma_aa[index])*t4067*3.0);

            //V_gamma_ab
            v_gamma_ab_[index] = 0.0;

            //V_gamma_bb
            double t4072 = sqrt(gamma_bb[index]);
            double t4073 = pow(rho_b[index],4.0/3.0);
            double t4074 = log(t4072+sqrt(t4072*t4072+1.0));
            double t4075 = d*t4072*t4074*6.0;
            double t4076 = t4075+1.0;
            v_gamma_bb_[index] = -(d*t4073)/t4076+d*gamma_bb[index]*t4073*1/(t4076*t4076)*(d*1/sqrt(gamma_bb[index]+ \
               1.0)*3.0+d*1/sqrt(gamma_bb[index])*t4074*3.0);
        }
        if (is_meta_) {

            //V_tau_a
            v_tau_a_[index] = 0.0;

            //V_tau_a
            v_tau_b_[index] = 0.0;
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        double t4080 = 1/pow(rho_a[index],2.0/3.0);
        double t4081 = sqrt(gamma_aa[index]);
        v_rho_a_rho_a_[index] = c*t4080*(-4.0/9.0)-(d*gamma_aa[index]*t4080*(4.0/9.0))/(d*t4081*log(t4081+sqrt(t4081* \
           t4081+1.0))*6.0+1.0);

        //V_rho_a_rho_b
        v_rho_a_rho_b_[index] = 0.0;

        //V_rho_b_rho_b
        double t4084 = 1/pow(rho_b[index],2.0/3.0);
        double t4085 = sqrt(gamma_bb[index]);
        v_rho_b_rho_b_[index] = c*t4084*(-4.0/9.0)-(d*gamma_bb[index]*t4084*(4.0/9.0))/(d*t4085*log(t4085+sqrt(t4085* \
           t4085+1.0))*6.0+1.0);

        if (is_gga_) {

            //V_rho_a_gamma_aa
            double t4087 = sqrt(gamma_aa[index]);
            double t4088 = pow(rho_a[index],1.0/3.0);
            double t4089 = log(t4087+sqrt(t4087*t4087+1.0));
            double t4090 = d*t4087*t4089*6.0;
            double t4091 = t4090+1.0;
            v_rho_a_gamma_aa_[index] = (d*t4088*(-4.0/3.0))/t4091+d*gamma_aa[index]*1/(t4091*t4091)*t4088*(d*1/sqrt(gamma_aa[index]+ \
               1.0)*3.0+d*1/sqrt(gamma_aa[index])*t4089*3.0)*(4.0/3.0);

            //V_rho_a_gamma_ab
            v_rho_a_gamma_ab_[index] = 0.0;

            //V_rho_a_gamma_bb
            v_rho_a_gamma_bb_[index] = 0.0;

            //V_rho_b_gamma_aa
            v_rho_b_gamma_aa_[index] = 0.0;

            //V_rho_b_gamma_ab
            v_rho_b_gamma_ab_[index] = 0.0;

            //V_rho_b_gamma_bb
            double t4097 = sqrt(gamma_bb[index]);
            double t4098 = pow(rho_b[index],1.0/3.0);
            double t4099 = log(t4097+sqrt(t4097*t4097+1.0));
            double t4100 = d*t4097*t4099*6.0;
            double t4101 = t4100+1.0;
            v_rho_b_gamma_bb_[index] = (d*t4098*(-4.0/3.0))/t4101+d*gamma_bb[index]*t4098*1/(t4101*t4101)*(d*1/sqrt(gamma_bb[index]+ \
               1.0)*3.0+d*1/sqrt(gamma_bb[index])*t4099*3.0)*(4.0/3.0);

            //V_gamma_aa_gamma_aa
            double t4103 = sqrt(gamma_aa[index]);
            double t4104 = log(t4103+sqrt(t4103*t4103+1.0));
            double t4105 = pow(rho_a[index],4.0/3.0);
            double t4106 = d*t4103*t4104*6.0;
            double t4107 = t4106+1.0;
            double t4108 = 1/(t4107*t4107);
            double t4109 = gamma_aa[index]+1.0;
            double t4110 = 1/sqrt(t4109);
            double t4111 = d*t4110*3.0;
            double t4112 = 1/sqrt(gamma_aa[index]);
            double t4113 = d*t4112*t4104*3.0;
            double t4114 = t4111+t4113;
            v_gamma_aa_gamma_aa_[index] = d*t4105*t4114*t4108*2.0-d*gamma_aa[index]*t4105*t4108*(d*1/pow(t4109,3.0/ \
               2.0)*(3.0/2.0)-(d*t4110*(3.0/2.0))/gamma_aa[index]+d*1/pow(gamma_aa[index],3.0/2.0)*t4104*(3.0/2.0) \
               )-d*gamma_aa[index]*t4105*(t4114*t4114)*1/(t4107*t4107*t4107)*2.0;

            //V_gamma_aa_gamma_ab
            v_gamma_aa_gamma_ab_[index] = 0.0;

            //V_gamma_aa_gamma_bb
            v_gamma_aa_gamma_bb_[index] = 0.0;

            //V_gamma_ab_gamma_ab
            v_gamma_ab_gamma_ab_[index] = 0.0;

            //V_gamma_ab_gamma_bb
            v_gamma_ab_gamma_bb_[index] = 0.0;

            //V_gamma_bb_gamma_bb
            double t4120 = sqrt(gamma_bb[index]);
            double t4121 = log(t4120+sqrt(t4120*t4120+1.0));
            double t4122 = pow(rho_b[index],4.0/3.0);
            double t4123 = d*t4120*t4121*6.0;
            double t4124 = t4123+1.0;
            double t4125 = 1/(t4124*t4124);
            double t4126 = gamma_bb[index]+1.0;
            double t4127 = 1/sqrt(t4126);
            double t4128 = d*t4127*3.0;
            double t4129 = 1/sqrt(gamma_bb[index]);
            double t4130 = d*t4121*t4129*3.0;
            double t4131 = t4130+t4128;
            v_gamma_bb_gamma_bb_[index] = d*t4122*t4131*t4125*2.0-d*gamma_bb[index]*t4122*t4125*(d*1/pow(t4126,3.0/ \
               2.0)*(3.0/2.0)+d*1/pow(gamma_bb[index],3.0/2.0)*t4121*(3.0/2.0)-(d*t4127*(3.0/2.0))/gamma_bb[index]) \
               -d*gamma_bb[index]*t4122*(t4131*t4131)*1/(t4124*t4124*t4124)*2.0;

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            v_rho_a_tau_a_[index] = 0.0;

            //V_rho_a_tau_b
            v_rho_a_tau_b_[index] = 0.0;

            //V_rho_b_tau_a
            v_rho_b_tau_a_[index] = 0.0;

            //V_rho_b_tau_b
            v_rho_b_tau_b_[index] = 0.0;

            //V_tau_a_tau_a
            v_tau_a_tau_a_[index] = 0.0;

            //V_tau_a_tau_b
            v_tau_a_tau_b_[index] = 0.0;

            //V_tau_b_tau_b
            v_tau_b_tau_b_[index] = 0.0;

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                v_gamma_aa_tau_a_[index] = 0.0;
            	
                //V_gamma_aa_tau_b
                v_gamma_aa_tau_b_[index] = 0.0;
            	
                //V_gamma_ab_tau_a
                v_gamma_ab_tau_a_[index] = 0.0;
            	
                //V_gamma_ab_tau_b
                v_gamma_ab_tau_b_[index] = 0.0;
            	
                //V_gamma_bb_tau_a
                v_gamma_bb_tau_a_[index] = 0.0;
            	
                //V_gamma_bb_tau_b
                v_gamma_bb_tau_b_[index] = 0.0;
          
            }  
        }
    }
}

}}

