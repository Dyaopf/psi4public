/**********************************************************
* PZ81_C_functional.cc: definitions for PZ81_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "PZ81_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PZ81_C_Functional::PZ81_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "PZ81_C";
    description_ = "PZ81 Correlation";
    citation_ = "J.P. Perdew, A. Zunger, Phys. Rev. B., 23, 5048-5079, 1981";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double EcPld_1 = -1.4230000000000001E-01;
    params_.push_back(make_pair("EcPld_1",EcPld_1));
    double EcPld_2 = 1.0528999999999999E+00;
    params_.push_back(make_pair("EcPld_2",EcPld_2));
    double EcPld_3 = 3.3339999999999997E-01;
    params_.push_back(make_pair("EcPld_3",EcPld_3));
    double EcFld_1 = -8.4300000000000000E-02;
    params_.push_back(make_pair("EcFld_1",EcFld_1));
    double EcFld_2 = 1.3980999999999999E+00;
    params_.push_back(make_pair("EcFld_2",EcFld_2));
    double EcFld_3 = 2.6110000000000000E-01;
    params_.push_back(make_pair("EcFld_3",EcFld_3));
    double EcPhd_1 = 3.1099999999999999E-02;
    params_.push_back(make_pair("EcPhd_1",EcPhd_1));
    double EcPhd_2 = -4.8000000000000001E-02;
    params_.push_back(make_pair("EcPhd_2",EcPhd_2));
    double EcPhd_3 = 2.0000000000000000E-03;
    params_.push_back(make_pair("EcPhd_3",EcPhd_3));
    double EcPhd_4 = -1.1599999999999999E-02;
    params_.push_back(make_pair("EcPhd_4",EcPhd_4));
    double EcFhd_1 = 1.5550000000000000E-02;
    params_.push_back(make_pair("EcFhd_1",EcFhd_1));
    double EcFhd_2 = -2.6900000000000000E-02;
    params_.push_back(make_pair("EcFhd_2",EcFhd_2));
    double EcFhd_3 = 6.9999999999999999E-04;
    params_.push_back(make_pair("EcFhd_3",EcFhd_3));
    double EcFhd_4 = -4.7999999999999996E-03;
    params_.push_back(make_pair("EcFhd_4",EcFhd_4));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PZ81_C_Functional::~PZ81_C_Functional()
{
}
void PZ81_C_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensityA();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t11443 = rho_a[index]*2.0;
            double t11444 = 1.0/pow(t11443,1.0/3.0);
            double t11445 = c*t11444;
            double t11446 = log(t11445);
            functional_[index] = rho_a[index]*( ( (-c*t11444+1.0 > 0.0) ? 1.0*(EcPhd_2+EcPhd_1*t11446+EcPhd_4* \
               c*t11444+EcPhd_3*c*t11444*t11446) : 0.0 ) +( ( (t11445-1.0 > 0.0) ? EcPld_1*1.0 : 0.0 ) )/(EcPld_2* \
               sqrt(t11445)+EcPld_3*c*t11444+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t11448 = rho_a[index]*2.0;
            double t11449 = 1.0/pow(t11448,1.0/3.0);
            double t11450 = c*t11449;
            double t11451 = log(t11450);
            double t11452 = 1.0/pow(t11448,4.0/3.0);
            double t11453 = EcPhd_1*t11451;
            double t11454 = EcPhd_4*c*t11449;
            double t11455 = EcPhd_3*c*t11451*t11449;
            double t11456 = EcPhd_2+t11453+t11454+t11455;
            double t11457 = t11450-1.0;
            double t11458 = 0.0 ;
            double t11459 = sqrt(t11450);
            double t11460 = EcPld_2*t11459;
            double t11461 = EcPld_3*c*t11449;
            double t11462 = t11460+t11461+1.0;
            double t11463 = ( (t11457 > 0.0) ?  1.0 : 0.0 ) ;
            double t11464 = 1.0/t11462;
            v_rho_a_[index] = rho_a[index]*( ( (-t11450+1.0 > 0.0) ? 1.0*((EcPhd_1*(1.0/6.0))/rho_a[index]+EcPhd_3* \
               c*t11452*(1.0/3.0)+EcPhd_4*c*t11452*(1.0/3.0)+EcPhd_3*c*t11451*t11452*(1.0/3.0)) : 0.0 ) -EcPld_1* \
               1.0/(t11462*t11462)*t11463*(EcPld_3*c*t11452*(1.0/3.0)+EcPld_2*c*1.0/sqrt(t11450)*t11452*(1.0/6.0) \
               )-c*t11452*t11456*t11458*(1.0/3.0)+EcPld_1*c*t11452*t11464*t11458*(1.0/3.0))*-2.0+ ( (-c*t11449+1.0  \
               > 0.0) ? t11456*1.0 : 0.0 ) +EcPld_1*t11463*t11464;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t11468 = rho_a[index]*2.0;
            double t11469 = 1.0/pow(t11468,4.0/3.0);
            double t11470 = 1.0/pow(t11468,1.0/3.0);
            double t11471 = c*t11470;
            double t11478 = 1.0/sqrt(t11471);
            double t11494 = EcPld_3*c*t11469*(1.0/3.0);
            double t11495 = EcPld_2*c*t11469*t11478*(1.0/6.0);
            double t11472 = t11494+t11495;
            double t11473 = sqrt(t11471);
            double t11474 = EcPld_2*t11473;
            double t11475 = EcPld_3*c*t11470;
            double t11476 = t11474+t11475+1.0;
            double t11477 = 1.0/pow(t11468,7.0/3.0);
            double t11479 = 1.0/(rho_a[index]*rho_a[index]);
            double t11480 = two_13*2.0;
            double t11481 = t11480-2.0;
            double t11482 = 1.0/t11481;
            double t11483 = log(t11471);
            double t11484 = t11471-1.0;
            double t11485 = c*c;
            double t11486 = 1.0/pow(t11468,8.0/3.0);
            double t11487 = EcPhd_1*t11483;
            double t11488 = EcPhd_4*c*t11470;
            double t11489 = EcPhd_3*c*t11470*t11483;
            double t11490 = EcPhd_2+t11487+t11488+t11489;
            double t11491 = 0.0 ;
            double t11492 = 0.0 ;
            double t11493 = 1.0/t11476;
            double t11496 = 1.0/(t11476*t11476);
            double t11497 = ( (t11484 > 0.0) ?  1.0 : 0.0 ) ;
            double t11498 = t11472*t11472;
            double t11499 = 1.0/(t11476*t11476*t11476);
            double t11500 = EcPld_1*t11498*t11499*2.0;
            double t11501 = EcFld_2*t11473;
            double t11502 = EcFld_3*c*t11470;
            double t11503 = t11501+t11502+1.0;
            double t11504 = 1.0/t11503;
            double t11505 = EcFld_1*t11504;
            double t11506 = t11505-EcPld_1*t11493;
            double t11507 = t11506*t11482*t11479*(2.0/9.0);
            double t11508 = EcPld_3*c*t11477*(4.0/9.0);
            double t11509 = EcPld_2*c*t11477*t11478*(2.0/9.0);
            double t11510 = 1.0/pow(t11471,3.0/2.0);
            double t11511 = t11508+t11509-EcPld_2*t11510*t11485*t11486*(1.0/3.6E1);
            double t11512 = EcPld_1*t11511*t11496;
            double t11513 = -t11471+1.0;
            double t11514 = ( (t11513 > 0.0) ?  1.0 : 0.0 ) ;
            double t11515 = EcPhd_1*t11479*(1.0/1.2E1);
            double t11516 = EcPhd_3*c*t11477*(5.0/9.0);
            double t11517 = EcPhd_4*c*t11477*(4.0/9.0);
            double t11518 = EcFhd_1*t11483;
            double t11519 = EcFhd_4*c*t11470;
            double t11520 = EcFhd_3*c*t11470*t11483;
            double t11521 = EcPhd_3*c*t11483*t11477*(4.0/9.0);
            double t11522 = c*t11490*t11491*t11477*(4.0/9.0);
            double t11523 = t11490*t11492*t11485*t11486*(1.0/9.0);
            double t11524 = 1.0/rho_a[index];
            double t11525 = EcPhd_1*t11524*(1.0/6.0);
            double t11526 = EcPhd_3*c*t11469*(1.0/3.0);
            double t11527 = EcPhd_4*c*t11469*(1.0/3.0);
            double t11528 = EcPhd_3*c*t11483*t11469*(1.0/3.0);
            double t11529 = t11525+t11526+t11527+t11528;
            double t11530 = c*t11491*t11529*t11469*(2.0/3.0);
            double t11531 = EcPld_1*c*t11472*t11491*t11469*t11496*(2.0/3.0);
            v_rho_a_rho_a_[index] = rho_a[index]*(t11530+t11522+t11531+t11523-t11514*(t11521+t11515+t11516+t11517+ \
               t11482*t11479*(EcFhd_2-EcPhd_2+t11520+t11518+t11519-t11487-t11488-t11489)*(2.0/9.0))-t11497*(t11500- \
               t11512+t11507)-EcPld_1*c*t11491*t11493*t11477*(4.0/9.0)-EcPld_1*t11492*t11493*t11485*t11486*(1.0/9.0) \
               )*-2.0-rho_a[index]*(t11530+t11522+t11531+t11523-t11514*(t11521+t11515+t11516+t11517-t11482*t11479* \
               (EcFhd_2-EcPhd_2+t11520+t11518+t11519-EcPhd_1*t11483-EcPhd_4*c*t11470-EcPhd_3*c*t11470*t11483)*(2.0/ \
               9.0))+t11497*(-t11500+t11512+t11507)-EcPld_1*c*t11491*t11493*t11477*(4.0/9.0)-EcPld_1*t11492*t11493* \
               t11485*t11486*(1.0/9.0))*2.0-t11514*t11529*4.0+EcPld_1*t11472*t11496*t11497*4.0+c*t11490*t11491*t11469* \
               (4.0/3.0)-EcPld_1*c*t11491*t11493*t11469*(4.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void PZ81_C_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_b = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10192 = rho_a[index]+rho_b[index];
            double t10193 = 1.0/pow(t10192,1.0/3.0);
            double t10194 = 1.0/t10192;
            double t10195 = rho_a[index]-rho_b[index];
            double t10196 = t10194*t10195;
            double t10197 = c*t10193;
            double t10198 = log(t10197);
            double t10199 = EcPhd_1*t10198;
            double t10200 = two_13*2.0;
            double t10201 = t10200-2.0;
            double t10202 = 1.0/t10201;
            double t10203 = sqrt(t10197);
            double t10204 = EcPld_2*t10203;
            double t10205 = EcPld_3*c*t10193;
            double t10206 = t10204+t10205+1.0;
            double t10207 = 1.0/t10206;
            double t10208 = EcPld_1*t10207;
            double t10209 = t10196+1.0;
            double t10210 = pow(t10209,4.0/3.0);
            double t10211 = -t10196+1.0;
            double t10212 = pow(t10211,4.0/3.0);
            double t10213 = t10210+t10212-2.0;
            functional_[index] = t10192*( ( (-c*t10193+1.0 > 0.0) ? 1.0*(EcPhd_2+t10199+t10202*t10213*(EcFhd_2- \
               EcPhd_2-t10199+EcFhd_1*t10198+EcFhd_4*c*t10193-EcPhd_4*c*t10193+EcFhd_3*c*t10193*t10198-EcPhd_3*c* \
               t10193*t10198)+EcPhd_4*c*t10193+EcPhd_3*c*t10193*t10198) : 0.0 ) + ( (t10197-1.0 > 0.0) ? 1.0*(t10208- \
               t10202*t10213*(t10208-EcFld_1/(EcFld_2*t10203+EcFld_3*c*t10193+1.0))) : 0.0 ) );
        } else if (rho_a[index] > cutoff_) {
            double t11041 = rho_a[index]+rho_b[index];
            double t11042 = 1.0/pow(t11041,1.0/3.0);
            double t11043 = c*t11042;
            double t11044 = log(t11043);
            double t11045 = EcPhd_1*t11044;
            double t11046 = pow(2.0,1.0/3.0);
            double t11047 = t11046*2.0;
            double t11048 = t11047-2.0;
            double t11049 = two_13*2.0;
            double t11050 = t11049-2.0;
            double t11051 = 1.0/t11050;
            double t11052 = sqrt(t11043);
            double t11053 = EcPld_2*t11052;
            double t11054 = EcPld_3*c*t11042;
            double t11055 = t11053+t11054+1.0;
            double t11056 = 1.0/t11055;
            double t11057 = EcPld_1*t11056;
            functional_[index] = t11041*( ( (-c*t11042+1.0 > 0.0) ? 1.0*(EcPhd_2+t11045+t11051*t11048*(EcFhd_2- \
               EcPhd_2-t11045+EcFhd_1*t11044+EcFhd_4*c*t11042-EcPhd_4*c*t11042+EcFhd_3*c*t11042*t11044-EcPhd_3*c* \
               t11042*t11044)+EcPhd_4*c*t11042+EcPhd_3*c*t11042*t11044) : 0.0 ) + ( (t11043-1.0 > 0.0) ? 1.0*(t11057- \
               t11051*t11048*(t11057-EcFld_1/(EcFld_2*t11052+EcFld_3*c*t11042+1.0))) : 0.0 ) );
        } else if (rho_b[index] > cutoff_) {
            double t10674 = rho_a[index]+rho_b[index];
            double t10675 = 1.0/pow(t10674,1.0/3.0);
            double t10676 = c*t10675;
            double t10677 = log(t10676);
            double t10678 = EcPhd_1*t10677;
            double t10679 = pow(2.0,1.0/3.0);
            double t10680 = t10679*2.0;
            double t10681 = t10680-2.0;
            double t10682 = two_13*2.0;
            double t10683 = t10682-2.0;
            double t10684 = 1.0/t10683;
            double t10685 = sqrt(t10676);
            double t10686 = EcPld_2*t10685;
            double t10687 = EcPld_3*c*t10675;
            double t10688 = t10686+t10687+1.0;
            double t10689 = 1.0/t10688;
            double t10690 = EcPld_1*t10689;
            functional_[index] = t10674*( ( (-c*t10675+1.0 > 0.0) ? 1.0*(EcPhd_2+t10678+t10681*t10684*(EcFhd_2- \
               EcPhd_2-t10678+EcFhd_1*t10677+EcFhd_4*c*t10675-EcPhd_4*c*t10675+EcFhd_3*c*t10675*t10677-EcPhd_3*c* \
               t10675*t10677)+EcPhd_4*c*t10675+EcPhd_3*c*t10675*t10677) : 0.0 ) + ( (t10676-1.0 > 0.0) ? 1.0*(t10690- \
               t10681*t10684*(t10690-EcFld_1/(EcFld_2*t10685+EcFld_3*c*t10675+1.0))) : 0.0 ) );
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10215 = rho_a[index]+rho_b[index];
            double t10216 = 1.0/pow(t10215,1.0/3.0);
            double t10217 = 1.0/t10215;
            double t10218 = rho_a[index]-rho_b[index];
            double t10219 = t10217*t10218;
            double t10220 = c*t10216;
            double t10221 = log(t10220);
            double t10222 = EcPhd_1*t10221;
            double t10223 = 1.0/pow(t10215,4.0/3.0);
            double t10224 = two_13*2.0;
            double t10225 = t10224-2.0;
            double t10226 = 1.0/t10225;
            double t10227 = t10219+1.0;
            double t10228 = pow(t10227,4.0/3.0);
            double t10229 = -t10219+1.0;
            double t10230 = pow(t10229,4.0/3.0);
            double t10231 = t10230+t10228-2.0;
            double t10232 = EcPhd_1*t10217*(1.0/3.0);
            double t10233 = EcPhd_3*c*t10223*(1.0/3.0);
            double t10234 = EcPhd_4*c*t10223*(1.0/3.0);
            double t10235 = 1.0/(t10215*t10215);
            double t10246 = t10235*t10218;
            double t10236 = t10217-t10246;
            double t10237 = EcFhd_1*t10221;
            double t10238 = EcFhd_4*c*t10216;
            double t10239 = EcPhd_4*c*t10216;
            double t10240 = EcFhd_3*c*t10221*t10216;
            double t10241 = EcPhd_3*c*t10221*t10216;
            double t10242 = EcPhd_3*c*t10221*t10223*(1.0/3.0);
            double t10243 = 1.0/sqrt(t10220);
            double t10244 = sqrt(t10220);
            double t10245 = pow(t10227,1.0/3.0);
            double t10247 = t10236*t10245*(4.0/3.0);
            double t10248 = pow(t10229,1.0/3.0);
            double t10249 = t10247-t10236*t10248*(4.0/3.0);
            double t10250 = EcFld_2*t10244;
            double t10251 = EcFld_3*c*t10216;
            double t10252 = t10250+t10251+1.0;
            double t10253 = EcPld_2*t10244;
            double t10254 = EcPld_3*c*t10216;
            double t10255 = t10253+t10254+1.0;
            double t10256 = EcPld_3*c*t10223*(1.0/3.0);
            double t10257 = EcPld_2*c*t10223*t10243*(1.0/6.0);
            double t10258 = t10256+t10257;
            double t10259 = 1.0/(t10255*t10255);
            double t10260 = t10220-1.0;
            double t10261 = EcFhd_2-EcPhd_2-t10222+t10240-t10241+t10237+t10238-t10239;
            double t10262 = 0.0 ;
            double t10263 = 1.0/t10255;
            double t10264 = EcPld_1*t10263;
            double t10265 = 1.0/t10252;
            double t10268 = EcFld_1*t10265;
            double t10266 = t10264-t10268;
            double t10267 = ( (t10260 > 0.0) ?  1.0 : 0.0 ) ;
            double t10269 = t10264-t10231*t10226*t10266;
            v_rho_a_[index] = -t10215*( ( (-t10220+1.0 > 0.0) ? 1.0*(t10232+t10233+t10242+t10234-t10231*t10226* \
               (t10232+t10233+t10242+t10234-EcFhd_1*t10217*(1.0/3.0)-EcFhd_3*c*t10223*(1.0/3.0)-EcFhd_4*c*t10223* \
               (1.0/3.0)-EcFhd_3*c*t10221*t10223*(1.0/3.0))-t10261*t10226*t10249) : 0.0 ) -t10267*(t10231*t10226* \
               (EcFld_1*1.0/(t10252*t10252)*(EcFld_3*c*t10223*(1.0/3.0)+EcFld_2*c*t10223*t10243*(1.0/6.0))-EcPld_1* \
               t10258*t10259)+EcPld_1*t10258*t10259-t10226*t10266*t10249)+c*t10223*t10262*t10269*(1.0/3.0)-c*t10223* \
               t10262*(EcPhd_2+t10222+t10241+t10239+t10231*t10261*t10226)*(1.0/3.0))+t10267*t10269+ ( (-c*t10216+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t10222+t10241+t10239+t10231*t10226*(EcFhd_2-EcPhd_2-t10222+t10240+t10237+ \
               t10238-EcPhd_4*c*t10216-EcPhd_3*c*t10221*t10216)) : 0.0 ) ;
        } else if (rho_a[index] > cutoff_) {
            double t11059 = rho_a[index]+rho_b[index];
            double t11060 = 1.0/pow(t11059,4.0/3.0);
            double t11061 = 1.0/pow(t11059,1.0/3.0);
            double t11062 = c*t11061;
            double t11063 = 1.0/sqrt(t11062);
            double t11064 = sqrt(t11062);
            double t11065 = EcPld_3*c*t11060*(1.0/3.0);
            double t11066 = EcPld_2*c*t11060*t11063*(1.0/6.0);
            double t11067 = t11065+t11066;
            double t11068 = EcPld_2*t11064;
            double t11069 = EcPld_3*c*t11061;
            double t11070 = t11068+t11069+1.0;
            double t11071 = 1.0/(t11070*t11070);
            double t11072 = EcPld_1*t11071*t11067;
            double t11073 = pow(2.0,1.0/3.0);
            double t11074 = t11073*2.0;
            double t11075 = t11074-2.0;
            double t11076 = two_13*2.0;
            double t11077 = t11076-2.0;
            double t11078 = 1.0/t11077;
            double t11079 = 1.0/t11059;
            double t11080 = EcPhd_1*t11079*(1.0/3.0);
            double t11081 = log(t11062);
            double t11082 = EcPhd_3*c*t11060*(1.0/3.0);
            double t11083 = EcPhd_4*c*t11060*(1.0/3.0);
            double t11084 = EcPhd_3*c*t11060*t11081*(1.0/3.0);
            double t11085 = t11062-1.0;
            double t11086 = EcPhd_1*t11081;
            double t11087 = 0.0 ;
            double t11088 = EcFld_2*t11064;
            double t11089 = EcFld_3*c*t11061;
            double t11090 = t11088+t11089+1.0;
            double t11091 = 1.0/t11070;
            double t11092 = EcPld_1*t11091;
            double t11093 = -t11062+1.0;
            double t11094 = ( (t11093 > 0.0) ?  1.0 : 0.0 ) ;
            double t11095 = EcFhd_1*t11081;
            double t11096 = EcFhd_4*c*t11061;
            double t11097 = EcPhd_4*c*t11061;
            double t11098 = EcFhd_3*c*t11061*t11081;
            double t11099 = EcPhd_3*c*t11061*t11081;
            double t11100 = ( (t11085 > 0.0) ?  1.0 : 0.0 ) ;
            double t11101 = 1.0/t11090;
            double t11102 = t11092-EcFld_1*t11101;
            double t11103 = t11092-t11102*t11075*t11078;
            v_rho_a_[index] = t11094*(EcPhd_2+t11086+t11097+t11099+t11075*t11078*(EcFhd_2-EcPhd_2-t11086+t11095+ \
               t11096-t11097+t11098-t11099))+t11100*t11103+t11059*(t11100*(t11072-t11075*t11078*(t11072-EcFld_1*1.0/ \
               (t11090*t11090)*(EcFld_3*c*t11060*(1.0/3.0)+EcFld_2*c*t11060*t11063*(1.0/6.0))))-t11094*(t11080+t11082+ \
               t11083+t11084-t11075*t11078*(t11080+t11082+t11083+t11084-EcFhd_1*t11079*(1.0/3.0)-EcFhd_3*c*t11060* \
               (1.0/3.0)-EcFhd_4*c*t11060*(1.0/3.0)-EcFhd_3*c*t11060*t11081*(1.0/3.0)))-c*t11103*t11060*t11087*(1.0/ \
               3.0)+c*t11060*t11087*(EcPhd_2+t11086+t11097+t11099+t11075*t11078*(EcFhd_2-EcPhd_2-t11086+t11095+t11096+ \
               t11098-EcPhd_4*c*t11061-EcPhd_3*c*t11061*t11081))*(1.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            double t10692 = rho_a[index]+rho_b[index];
            double t10693 = 1.0/pow(t10692,4.0/3.0);
            double t10694 = 1.0/pow(t10692,1.0/3.0);
            double t10695 = c*t10694;
            double t10696 = 1.0/sqrt(t10695);
            double t10697 = sqrt(t10695);
            double t10698 = EcPld_3*c*t10693*(1.0/3.0);
            double t10699 = EcPld_2*c*t10693*t10696*(1.0/6.0);
            double t10700 = t10698+t10699;
            double t10701 = EcPld_2*t10697;
            double t10702 = EcPld_3*c*t10694;
            double t10703 = t10701+t10702+1.0;
            double t10704 = 1.0/(t10703*t10703);
            double t10705 = EcPld_1*t10700*t10704;
            double t10706 = pow(2.0,1.0/3.0);
            double t10707 = t10706*2.0;
            double t10708 = t10707-2.0;
            double t10709 = two_13*2.0;
            double t10710 = t10709-2.0;
            double t10711 = 1.0/t10710;
            double t10712 = 1.0/t10692;
            double t10713 = EcPhd_1*t10712*(1.0/3.0);
            double t10714 = log(t10695);
            double t10715 = EcPhd_3*c*t10693*(1.0/3.0);
            double t10716 = EcPhd_4*c*t10693*(1.0/3.0);
            double t10717 = EcPhd_3*c*t10714*t10693*(1.0/3.0);
            double t10718 = t10695-1.0;
            double t10719 = EcPhd_1*t10714;
            double t10720 = 0.0 ;
            double t10721 = EcFld_2*t10697;
            double t10722 = EcFld_3*c*t10694;
            double t10723 = t10721+t10722+1.0;
            double t10724 = 1.0/t10703;
            double t10725 = EcPld_1*t10724;
            double t10726 = -t10695+1.0;
            double t10727 = ( (t10726 > 0.0) ?  1.0 : 0.0 ) ;
            double t10728 = EcFhd_1*t10714;
            double t10729 = EcFhd_4*c*t10694;
            double t10730 = EcPhd_4*c*t10694;
            double t10731 = EcFhd_3*c*t10714*t10694;
            double t10732 = EcPhd_3*c*t10714*t10694;
            double t10733 = ( (t10718 > 0.0) ?  1.0 : 0.0 ) ;
            double t10734 = 1.0/t10723;
            double t10735 = t10725-EcFld_1*t10734;
            double t10736 = t10725-t10711*t10708*t10735;
            v_rho_a_[index] = t10727*(EcPhd_2+t10730+t10732+t10719+t10711*t10708*(EcFhd_2-EcPhd_2-t10730+t10731- \
               t10732-t10719+t10728+t10729))+t10733*t10736+t10692*(t10733*(t10705-t10711*t10708*(t10705-EcFld_1*1.0/ \
               (t10723*t10723)*(EcFld_3*c*t10693*(1.0/3.0)+EcFld_2*c*t10693*t10696*(1.0/6.0))))-t10727*(t10713+t10715+ \
               t10716+t10717-t10711*t10708*(t10713+t10715+t10716+t10717-EcFhd_1*t10712*(1.0/3.0)-EcFhd_3*c*t10693* \
               (1.0/3.0)-EcFhd_4*c*t10693*(1.0/3.0)-EcFhd_3*c*t10714*t10693*(1.0/3.0)))-c*t10720*t10736*t10693*(1.0/ \
               3.0)+c*t10720*t10693*(EcPhd_2+t10730+t10732+t10719+t10711*t10708*(EcFhd_2-EcPhd_2+t10731-t10719+t10728+ \
               t10729-EcPhd_4*c*t10694-EcPhd_3*c*t10714*t10694))*(1.0/3.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10271 = rho_a[index]+rho_b[index];
            double t10272 = 1.0/pow(t10271,1.0/3.0);
            double t10273 = 1.0/t10271;
            double t10274 = rho_a[index]-rho_b[index];
            double t10275 = t10273*t10274;
            double t10276 = c*t10272;
            double t10277 = log(t10276);
            double t10278 = EcPhd_1*t10277;
            double t10279 = 1.0/pow(t10271,4.0/3.0);
            double t10280 = two_13*2.0;
            double t10281 = t10280-2.0;
            double t10282 = 1.0/t10281;
            double t10283 = t10275+1.0;
            double t10284 = pow(t10283,4.0/3.0);
            double t10285 = -t10275+1.0;
            double t10286 = pow(t10285,4.0/3.0);
            double t10287 = t10284+t10286-2.0;
            double t10288 = EcPhd_1*t10273*(1.0/3.0);
            double t10289 = EcPhd_3*c*t10279*(1.0/3.0);
            double t10290 = EcPhd_4*c*t10279*(1.0/3.0);
            double t10291 = 1.0/(t10271*t10271);
            double t10292 = t10291*t10274;
            double t10293 = t10273+t10292;
            double t10294 = EcFhd_1*t10277;
            double t10295 = EcFhd_4*c*t10272;
            double t10296 = EcPhd_4*c*t10272;
            double t10297 = EcFhd_3*c*t10272*t10277;
            double t10298 = EcPhd_3*c*t10272*t10277;
            double t10299 = EcPhd_3*c*t10277*t10279*(1.0/3.0);
            double t10300 = 1.0/sqrt(t10276);
            double t10301 = sqrt(t10276);
            double t10302 = pow(t10283,1.0/3.0);
            double t10303 = t10302*t10293*(4.0/3.0);
            double t10304 = pow(t10285,1.0/3.0);
            double t10305 = t10303-t10304*t10293*(4.0/3.0);
            double t10306 = EcFld_2*t10301;
            double t10307 = EcFld_3*c*t10272;
            double t10308 = t10306+t10307+1.0;
            double t10309 = EcPld_2*t10301;
            double t10310 = EcPld_3*c*t10272;
            double t10311 = t10310+t10309+1.0;
            double t10312 = EcPld_3*c*t10279*(1.0/3.0);
            double t10313 = EcPld_2*c*t10300*t10279*(1.0/6.0);
            double t10314 = t10312+t10313;
            double t10315 = 1.0/(t10311*t10311);
            double t10316 = t10276-1.0;
            double t10317 = EcFhd_2-EcPhd_2+t10294+t10295-t10278-t10296+t10297-t10298;
            double t10318 = 0.0 ;
            double t10319 = 1.0/t10311;
            double t10320 = EcPld_1*t10319;
            double t10321 = 1.0/t10308;
            double t10324 = EcFld_1*t10321;
            double t10322 = t10320-t10324;
            double t10323 = ( (t10316 > 0.0) ?  1.0 : 0.0 ) ;
            double t10325 = t10320-t10322*t10282*t10287;
            v_rho_b_[index] = -t10271*( ( (-t10276+1.0 > 0.0) ? 1.0*(t10290+t10288+t10289+t10299-t10282*t10287* \
               (t10290+t10288+t10289+t10299-EcFhd_1*t10273*(1.0/3.0)-EcFhd_3*c*t10279*(1.0/3.0)-EcFhd_4*c*t10279* \
               (1.0/3.0)-EcFhd_3*c*t10277*t10279*(1.0/3.0))+t10305*t10317*t10282) : 0.0 ) -t10323*(t10282*t10287* \
               (EcFld_1*1.0/(t10308*t10308)*(EcFld_3*c*t10279*(1.0/3.0)+EcFld_2*c*t10300*t10279*(1.0/6.0))-EcPld_1* \
               t10314*t10315)+EcPld_1*t10314*t10315+t10322*t10305*t10282)+c*t10325*t10318*t10279*(1.0/3.0)-c*t10318* \
               t10279*(EcPhd_2+t10278+t10296+t10298+t10317*t10282*t10287)*(1.0/3.0))+t10323*t10325+ ( (-c*t10272+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t10278+t10296+t10298+t10282*t10287*(EcFhd_2-EcPhd_2+t10294+t10295-t10278+ \
               t10297-EcPhd_4*c*t10272-EcPhd_3*c*t10272*t10277)) : 0.0 ) ;
        } else if (rho_a[index] > cutoff_) {
            double t11105 = rho_a[index]+rho_b[index];
            double t11106 = 1.0/pow(t11105,4.0/3.0);
            double t11107 = 1.0/pow(t11105,1.0/3.0);
            double t11108 = c*t11107;
            double t11109 = 1.0/sqrt(t11108);
            double t11110 = sqrt(t11108);
            double t11111 = EcPld_3*c*t11106*(1.0/3.0);
            double t11112 = EcPld_2*c*t11106*t11109*(1.0/6.0);
            double t11113 = t11111+t11112;
            double t11114 = EcPld_2*t11110;
            double t11115 = EcPld_3*c*t11107;
            double t11116 = t11114+t11115+1.0;
            double t11117 = 1.0/(t11116*t11116);
            double t11118 = EcPld_1*t11113*t11117;
            double t11119 = pow(2.0,1.0/3.0);
            double t11120 = t11119*2.0;
            double t11121 = t11120-2.0;
            double t11122 = two_13*2.0;
            double t11123 = t11122-2.0;
            double t11124 = 1.0/t11123;
            double t11125 = 1.0/t11105;
            double t11126 = EcPhd_1*t11125*(1.0/3.0);
            double t11127 = log(t11108);
            double t11128 = EcPhd_3*c*t11106*(1.0/3.0);
            double t11129 = EcPhd_4*c*t11106*(1.0/3.0);
            double t11130 = EcPhd_3*c*t11106*t11127*(1.0/3.0);
            double t11131 = t11108-1.0;
            double t11132 = EcPhd_1*t11127;
            double t11133 = 0.0 ;
            double t11134 = EcFld_2*t11110;
            double t11135 = EcFld_3*c*t11107;
            double t11136 = t11134+t11135+1.0;
            double t11137 = 1.0/t11116;
            double t11138 = EcPld_1*t11137;
            double t11139 = -t11108+1.0;
            double t11140 = ( (t11139 > 0.0) ?  1.0 : 0.0 ) ;
            double t11141 = EcFhd_1*t11127;
            double t11142 = EcFhd_4*c*t11107;
            double t11143 = EcPhd_4*c*t11107;
            double t11144 = EcFhd_3*c*t11107*t11127;
            double t11145 = EcPhd_3*c*t11107*t11127;
            double t11146 = ( (t11131 > 0.0) ?  1.0 : 0.0 ) ;
            double t11147 = 1.0/t11136;
            double t11148 = t11138-EcFld_1*t11147;
            double t11149 = t11138-t11121*t11124*t11148;
            v_rho_b_[index] = t11140*(EcPhd_2+t11132+t11143+t11145+t11121*t11124*(EcFhd_2-EcPhd_2-t11132+t11141+ \
               t11142-t11143+t11144-t11145))+t11146*t11149+t11105*(t11146*(t11118-t11121*t11124*(t11118-EcFld_1*1.0/ \
               (t11136*t11136)*(EcFld_3*c*t11106*(1.0/3.0)+EcFld_2*c*t11106*t11109*(1.0/6.0))))-t11140*(t11130+t11126+ \
               t11128+t11129-t11121*t11124*(t11130+t11126+t11128+t11129-EcFhd_1*t11125*(1.0/3.0)-EcFhd_3*c*t11106* \
               (1.0/3.0)-EcFhd_4*c*t11106*(1.0/3.0)-EcFhd_3*c*t11106*t11127*(1.0/3.0)))-c*t11106*t11133*t11149*(1.0/ \
               3.0)+c*t11106*t11133*(EcPhd_2+t11132+t11143+t11145+t11121*t11124*(EcFhd_2-EcPhd_2-t11132+t11141+t11142+ \
               t11144-EcPhd_4*c*t11107-EcPhd_3*c*t11107*t11127))*(1.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            double t10738 = rho_a[index]+rho_b[index];
            double t10739 = 1.0/pow(t10738,4.0/3.0);
            double t10740 = 1.0/pow(t10738,1.0/3.0);
            double t10741 = c*t10740;
            double t10742 = 1.0/sqrt(t10741);
            double t10743 = sqrt(t10741);
            double t10744 = EcPld_3*c*t10739*(1.0/3.0);
            double t10745 = EcPld_2*c*t10742*t10739*(1.0/6.0);
            double t10746 = t10744+t10745;
            double t10747 = EcPld_2*t10743;
            double t10748 = EcPld_3*c*t10740;
            double t10749 = t10747+t10748+1.0;
            double t10750 = 1.0/(t10749*t10749);
            double t10751 = EcPld_1*t10750*t10746;
            double t10752 = pow(2.0,1.0/3.0);
            double t10753 = t10752*2.0;
            double t10754 = t10753-2.0;
            double t10755 = two_13*2.0;
            double t10756 = t10755-2.0;
            double t10757 = 1.0/t10756;
            double t10758 = 1.0/t10738;
            double t10759 = EcPhd_1*t10758*(1.0/3.0);
            double t10760 = log(t10741);
            double t10761 = EcPhd_3*c*t10739*(1.0/3.0);
            double t10762 = EcPhd_4*c*t10739*(1.0/3.0);
            double t10763 = EcPhd_3*c*t10760*t10739*(1.0/3.0);
            double t10764 = t10741-1.0;
            double t10765 = EcPhd_1*t10760;
            double t10766 = 0.0 ;
            double t10767 = EcFld_2*t10743;
            double t10768 = EcFld_3*c*t10740;
            double t10769 = t10767+t10768+1.0;
            double t10770 = 1.0/t10749;
            double t10771 = EcPld_1*t10770;
            double t10772 = -t10741+1.0;
            double t10773 = ( (t10772 > 0.0) ?  1.0 : 0.0 ) ;
            double t10774 = EcFhd_1*t10760;
            double t10775 = EcFhd_4*c*t10740;
            double t10776 = EcPhd_4*c*t10740;
            double t10777 = EcFhd_3*c*t10740*t10760;
            double t10778 = EcPhd_3*c*t10740*t10760;
            double t10779 = ( (t10764 > 0.0) ?  1.0 : 0.0 ) ;
            double t10780 = 1.0/t10769;
            double t10781 = t10771-EcFld_1*t10780;
            double t10782 = t10771-t10754*t10781*t10757;
            v_rho_b_[index] = t10773*(EcPhd_2+t10765+t10776+t10778+t10754*t10757*(EcFhd_2-EcPhd_2-t10765+t10774+ \
               t10775-t10776+t10777-t10778))+t10782*t10779+t10738*(t10779*(t10751-t10754*t10757*(t10751-EcFld_1*1.0/ \
               (t10769*t10769)*(EcFld_3*c*t10739*(1.0/3.0)+EcFld_2*c*t10742*t10739*(1.0/6.0))))-t10773*(t10761+t10762+ \
               t10763+t10759-t10754*t10757*(t10761+t10762+t10763+t10759-EcFhd_1*t10758*(1.0/3.0)-EcFhd_3*c*t10739* \
               (1.0/3.0)-EcFhd_4*c*t10739*(1.0/3.0)-EcFhd_3*c*t10760*t10739*(1.0/3.0)))-c*t10782*t10739*t10766*(1.0/ \
               3.0)+c*t10739*t10766*(EcPhd_2+t10765+t10776+t10778+t10754*t10757*(EcFhd_2-EcPhd_2-t10765+t10774+t10775+ \
               t10777-EcPhd_4*c*t10740-EcPhd_3*c*t10740*t10760))*(1.0/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10332 = rho_a[index]+rho_b[index];
            double t10333 = 1.0/pow(t10332,4.0/3.0);
            double t10334 = 1.0/pow(t10332,1.0/3.0);
            double t10335 = c*t10334;
            double t10342 = 1.0/sqrt(t10335);
            double t10344 = EcPld_3*c*t10333*(1.0/3.0);
            double t10345 = EcPld_2*c*t10333*t10342*(1.0/6.0);
            double t10336 = t10344+t10345;
            double t10337 = 1.0/t10332;
            double t10338 = rho_a[index]-rho_b[index];
            double t10339 = t10337*t10338;
            double t10340 = 1.0/(t10332*t10332);
            double t10377 = t10340*t10338;
            double t10341 = t10337-t10377;
            double t10343 = sqrt(t10335);
            double t10346 = EcPld_2*t10343;
            double t10347 = EcPld_3*c*t10334;
            double t10348 = t10346+t10347+1.0;
            double t10349 = two_13*2.0;
            double t10350 = t10349-2.0;
            double t10351 = 1.0/t10350;
            double t10352 = t10339+1.0;
            double t10353 = -t10339+1.0;
            double t10354 = EcFld_3*c*t10333*(1.0/3.0);
            double t10355 = EcFld_2*c*t10333*t10342*(1.0/6.0);
            double t10356 = t10354+t10355;
            double t10357 = EcFld_2*t10343;
            double t10358 = EcFld_3*c*t10334;
            double t10359 = t10357+t10358+1.0;
            double t10360 = t10336*t10336;
            double t10361 = 1.0/(t10348*t10348*t10348);
            double t10362 = EcPld_1*t10360*t10361*2.0;
            double t10363 = 1.0/pow(t10332,7.0/3.0);
            double t10364 = 1.0/(t10359*t10359);
            double t10365 = c*c;
            double t10366 = 1.0/pow(t10332,8.0/3.0);
            double t10367 = 1.0/pow(t10335,3.0/2.0);
            double t10368 = 1.0/(t10348*t10348);
            double t10369 = EcPld_3*c*t10363*(4.0/9.0);
            double t10370 = EcPld_2*c*t10342*t10363*(2.0/9.0);
            double t10371 = t10370+t10369-EcPld_2*t10365*t10366*t10367*(1.0/3.6E1);
            double t10372 = pow(t10352,1.0/3.0);
            double t10373 = pow(t10353,1.0/3.0);
            double t10374 = t10340*2.0;
            double t10375 = 1.0/(t10332*t10332*t10332);
            double t10379 = t10338*t10375*2.0;
            double t10376 = t10374-t10379;
            double t10378 = t10341*t10341;
            double t10380 = t10373*t10376*(4.0/3.0);
            double t10381 = 1.0/pow(t10352,2.0/3.0);
            double t10382 = t10381*t10378*(4.0/9.0);
            double t10383 = 1.0/pow(t10353,2.0/3.0);
            double t10384 = t10383*t10378*(4.0/9.0);
            double t10385 = t10380+t10382+t10384-t10372*t10376*(4.0/3.0);
            double t10386 = log(t10335);
            double t10387 = pow(t10352,4.0/3.0);
            double t10388 = pow(t10353,4.0/3.0);
            double t10389 = t10387+t10388-2.0;
            double t10390 = EcPhd_1*t10340*(1.0/3.0);
            double t10391 = EcPhd_3*c*t10363*(5.0/9.0);
            double t10392 = EcPhd_4*c*t10363*(4.0/9.0);
            double t10393 = t10341*t10372*(4.0/3.0);
            double t10413 = t10341*t10373*(4.0/3.0);
            double t10394 = -t10413+t10393;
            double t10395 = EcPhd_3*c*t10363*t10386*(4.0/9.0);
            double t10396 = t10335-1.0;
            double t10397 = 1.0/t10348;
            double t10398 = EcPld_1*t10397;
            double t10399 = 1.0/t10359;
            double t10419 = EcFld_1*t10399;
            double t10400 = -t10419+t10398;
            double t10401 = EcFhd_1*t10386;
            double t10402 = EcPhd_1*t10386;
            double t10403 = EcFhd_4*c*t10334;
            double t10404 = EcFhd_3*c*t10334*t10386;
            double t10405 = 0.0 ;
            double t10406 = EcFhd_1*t10337*(1.0/3.0);
            double t10407 = EcPhd_1*t10337*(1.0/3.0);
            double t10408 = EcFhd_3*c*t10333*(1.0/3.0);
            double t10409 = EcFhd_4*c*t10333*(1.0/3.0);
            double t10410 = EcPhd_3*c*t10333*(1.0/3.0);
            double t10411 = EcPhd_4*c*t10333*(1.0/3.0);
            double t10412 = EcFhd_3*c*t10333*t10386*(1.0/3.0);
            double t10414 = EcPhd_4*c*t10334;
            double t10415 = EcPhd_3*c*t10334*t10386;
            double t10416 = EcPhd_3*c*t10333*t10386*(1.0/3.0);
            double t10417 = EcFld_1*t10364*t10356;
            double t10420 = EcPld_1*t10336*t10368;
            double t10418 = -t10420+t10417;
            double t10421 = t10419-t10398;
            double t10422 = 0.0 ;
            double t10423 = EcFhd_2-EcPhd_2+t10401-t10402+t10403+t10404-t10414-t10415;
            double t10424 = EcPld_1*t10371*t10368;
            double t10425 = t10410+t10411-t10412-t10406+t10407+t10416-t10408-t10409;
            double t10426 = t10351*t10423*t10389;
            double t10427 = EcPhd_2+t10402+t10414+t10415+t10426;
            double t10428 = -t10335+1.0;
            double t10429 = ( (t10428 > 0.0) ?  1.0 : 0.0 ) ;
            double t10430 = t10410+t10411+t10407+t10416-t10351*t10423*t10394-t10351*t10425*t10389;
            double t10431 = ( (t10396 > 0.0) ?  1.0 : 0.0 ) ;
            double t10432 = t10351*t10418*t10389;
            double t10433 = t10421*t10351*t10394;
            double t10434 = t10420+t10432+t10433;
            double t10435 = t10421*t10351*t10389;
            double t10436 = t10435+t10398;
            v_rho_a_rho_a_[index] = t10332*(t10431*(-t10424+t10362+t10351*t10389*(t10424-t10362+EcFld_1*(t10356* \
               t10356)*1.0/(t10359*t10359*t10359)*2.0-EcFld_1*t10364*(EcFld_3*c*t10363*(4.0/9.0)-EcFld_2*t10365*t10366* \
               t10367*(1.0/3.6E1)+EcFld_2*c*t10342*t10363*(2.0/9.0)))-t10400*t10351*t10385+t10351*t10418*t10394*2.0) \
               +t10429*(t10390+t10391+t10392+t10395-t10351*t10389*(t10390+t10391+t10392+t10395-EcFhd_1*t10340*(1.0/ \
               3.0)-EcFhd_3*c*t10363*(5.0/9.0)-EcFhd_4*c*t10363*(4.0/9.0)-EcFhd_3*c*t10363*t10386*(4.0/9.0))+t10351* \
               t10423*t10385+t10351*t10425*t10394*2.0)-c*t10430*t10333*t10405*(2.0/3.0)-c*t10333*t10405*t10434*(2.0/ \
               3.0)-c*t10405*t10363*t10427*(4.0/9.0)+c*t10405*t10363*t10436*(4.0/9.0)-t10422*t10427*t10365*t10366* \
               (1.0/9.0)+t10422*t10365*t10366*(t10398-t10400*t10351*t10389)*(1.0/9.0))+t10431*t10434*2.0-t10430*t10429* \
               2.0+c*t10333*t10405*t10427*(2.0/3.0)-c*t10333*t10405*t10436*(2.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t11156 = rho_a[index]+rho_b[index];
            double t11157 = 1.0/pow(t11156,4.0/3.0);
            double t11158 = 1.0/pow(t11156,1.0/3.0);
            double t11159 = c*t11158;
            double t11160 = 1.0/sqrt(t11159);
            double t11161 = sqrt(t11159);
            double t11162 = EcPld_3*c*t11157*(1.0/3.0);
            double t11163 = EcPld_2*c*t11160*t11157*(1.0/6.0);
            double t11164 = t11162+t11163;
            double t11165 = EcPld_2*t11161;
            double t11166 = EcPld_3*c*t11158;
            double t11167 = t11165+t11166+1.0;
            double t11168 = 1.0/(t11167*t11167);
            double t11169 = EcPld_1*t11164*t11168;
            double t11170 = t11159-1.0;
            double t11171 = ( (t11170 > 0.0) ?  1.0 : 0.0 ) ;
            double t11172 = pow(2.0,1.0/3.0);
            double t11173 = t11172*2.0;
            double t11174 = t11173-2.0;
            double t11175 = two_13*2.0;
            double t11176 = t11175-2.0;
            double t11177 = 1.0/t11176;
            double t11178 = EcFld_3*c*t11157*(1.0/3.0);
            double t11179 = EcFld_2*c*t11160*t11157*(1.0/6.0);
            double t11180 = t11178+t11179;
            double t11181 = EcFld_2*t11161;
            double t11182 = EcFld_3*c*t11158;
            double t11183 = t11181+t11182+1.0;
            double t11184 = t11164*t11164;
            double t11185 = 1.0/(t11167*t11167*t11167);
            double t11186 = EcPld_1*t11184*t11185*2.0;
            double t11187 = 1.0/pow(t11156,7.0/3.0);
            double t11188 = 1.0/(t11183*t11183);
            double t11189 = c*c;
            double t11190 = 1.0/pow(t11156,8.0/3.0);
            double t11191 = 1.0/pow(t11159,3.0/2.0);
            double t11192 = EcPld_3*c*t11187*(4.0/9.0);
            double t11193 = EcPld_2*c*t11160*t11187*(2.0/9.0);
            double t11194 = t11192+t11193-EcPld_2*t11190*t11191*t11189*(1.0/3.6E1);
            double t11195 = EcPld_1*t11194*t11168;
            double t11196 = 1.0/(t11156*t11156);
            double t11197 = EcPhd_1*t11196*(1.0/3.0);
            double t11198 = log(t11159);
            double t11199 = EcPhd_3*c*t11187*(5.0/9.0);
            double t11200 = EcPhd_4*c*t11187*(4.0/9.0);
            double t11201 = EcPhd_3*c*t11187*t11198*(4.0/9.0);
            double t11202 = 1.0/t11167;
            double t11203 = EcPld_1*t11202;
            double t11204 = t11169-EcFld_1*t11180*t11188;
            double t11205 = t11169-t11204*t11174*t11177;
            double t11206 = 0.0 ;
            double t11207 = EcPhd_1*t11198;
            double t11208 = 1.0/t11156;
            double t11209 = EcPhd_1*t11208*(1.0/3.0);
            double t11210 = EcPhd_3*c*t11157*(1.0/3.0);
            double t11211 = EcPhd_4*c*t11157*(1.0/3.0);
            double t11212 = EcPhd_3*c*t11157*t11198*(1.0/3.0);
            double t11213 = 1.0/t11183;
            double t11229 = EcFld_1*t11213;
            double t11214 = t11203-t11229;
            double t11230 = t11214*t11174*t11177;
            double t11215 = t11203-t11230;
            double t11216 = 0.0 ;
            double t11217 = EcFhd_1*t11198;
            double t11218 = EcFhd_4*c*t11158;
            double t11219 = EcPhd_4*c*t11158;
            double t11220 = EcFhd_3*c*t11158*t11198;
            double t11221 = EcPhd_3*c*t11158*t11198;
            double t11222 = EcFhd_2-EcPhd_2+t11220-t11221-t11207+t11217+t11218-t11219;
            double t11223 = t11222*t11174*t11177;
            double t11224 = EcPhd_2+t11221+t11223+t11207+t11219;
            double t11225 = -t11159+1.0;
            double t11226 = ( (t11225 > 0.0) ?  1.0 : 0.0 ) ;
            double t11227 = t11210+t11211+t11212+t11209-EcFhd_1*t11208*(1.0/3.0)-EcFhd_3*c*t11157*(1.0/3.0)-EcFhd_4* \
               c*t11157*(1.0/3.0)-EcFhd_3*c*t11157*t11198*(1.0/3.0);
            double t11228 = t11210+t11211+t11212+t11209-t11227*t11174*t11177;
            v_rho_a_rho_a_[index] = -t11156*(-t11226*(t11200+t11201+t11197+t11199-t11174*t11177*(t11200+t11201+ \
               t11197+t11199-EcFhd_1*t11196*(1.0/3.0)-EcFhd_3*c*t11187*(5.0/9.0)-EcFhd_4*c*t11187*(4.0/9.0)-EcFhd_3* \
               c*t11187*t11198*(4.0/9.0)))+t11171*(-t11186+t11195+t11174*t11177*(t11186-t11195-EcFld_1*(t11180*t11180) \
               *1.0/(t11183*t11183*t11183)*2.0+EcFld_1*t11188*(EcFld_3*c*t11187*(4.0/9.0)-EcFld_2*t11190*t11191*t11189* \
               (1.0/3.6E1)+EcFld_2*c*t11160*t11187*(2.0/9.0))))+c*t11205*t11206*t11157*(2.0/3.0)-c*t11206*t11215* \
               t11187*(4.0/9.0)+c*t11206*t11224*t11187*(4.0/9.0)+c*t11206*t11228*t11157*(2.0/3.0)-t11215*t11216*t11190* \
               t11189*(1.0/9.0)+t11224*t11216*t11190*t11189*(1.0/9.0))+t11205*t11171*2.0-t11226*t11228*2.0-c*t11206* \
               t11215*t11157*(2.0/3.0)+c*t11206*t11224*t11157*(2.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t10789 = rho_a[index]+rho_b[index];
            double t10790 = 1.0/pow(t10789,4.0/3.0);
            double t10791 = 1.0/pow(t10789,1.0/3.0);
            double t10792 = c*t10791;
            double t10793 = 1.0/sqrt(t10792);
            double t10794 = sqrt(t10792);
            double t10795 = EcPld_3*c*t10790*(1.0/3.0);
            double t10796 = EcPld_2*c*t10790*t10793*(1.0/6.0);
            double t10797 = t10795+t10796;
            double t10798 = EcPld_2*t10794;
            double t10799 = EcPld_3*c*t10791;
            double t10800 = t10798+t10799+1.0;
            double t10801 = 1.0/(t10800*t10800);
            double t10802 = EcPld_1*t10801*t10797;
            double t10803 = t10792-1.0;
            double t10804 = ( (t10803 > 0.0) ?  1.0 : 0.0 ) ;
            double t10805 = pow(2.0,1.0/3.0);
            double t10806 = t10805*2.0;
            double t10807 = t10806-2.0;
            double t10808 = two_13*2.0;
            double t10809 = t10808-2.0;
            double t10810 = 1.0/t10809;
            double t10811 = EcFld_3*c*t10790*(1.0/3.0);
            double t10812 = EcFld_2*c*t10790*t10793*(1.0/6.0);
            double t10813 = t10811+t10812;
            double t10814 = EcFld_2*t10794;
            double t10815 = EcFld_3*c*t10791;
            double t10816 = t10814+t10815+1.0;
            double t10817 = t10797*t10797;
            double t10818 = 1.0/(t10800*t10800*t10800);
            double t10819 = EcPld_1*t10817*t10818*2.0;
            double t10820 = 1.0/pow(t10789,7.0/3.0);
            double t10821 = 1.0/(t10816*t10816);
            double t10822 = c*c;
            double t10823 = 1.0/pow(t10789,8.0/3.0);
            double t10824 = 1.0/pow(t10792,3.0/2.0);
            double t10825 = EcPld_3*c*t10820*(4.0/9.0);
            double t10826 = EcPld_2*c*t10820*t10793*(2.0/9.0);
            double t10827 = t10825+t10826-EcPld_2*t10822*t10823*t10824*(1.0/3.6E1);
            double t10828 = EcPld_1*t10801*t10827;
            double t10829 = 1.0/(t10789*t10789);
            double t10830 = EcPhd_1*t10829*(1.0/3.0);
            double t10831 = log(t10792);
            double t10832 = EcPhd_3*c*t10820*(5.0/9.0);
            double t10833 = EcPhd_4*c*t10820*(4.0/9.0);
            double t10834 = EcPhd_3*c*t10820*t10831*(4.0/9.0);
            double t10835 = 1.0/t10800;
            double t10836 = EcPld_1*t10835;
            double t10837 = t10802-EcFld_1*t10821*t10813;
            double t10838 = t10802-t10810*t10807*t10837;
            double t10839 = 0.0 ;
            double t10840 = EcPhd_1*t10831;
            double t10841 = 1.0/t10789;
            double t10842 = EcPhd_1*t10841*(1.0/3.0);
            double t10843 = EcPhd_3*c*t10790*(1.0/3.0);
            double t10844 = EcPhd_4*c*t10790*(1.0/3.0);
            double t10845 = EcPhd_3*c*t10831*t10790*(1.0/3.0);
            double t10846 = 1.0/t10816;
            double t10862 = EcFld_1*t10846;
            double t10847 = -t10862+t10836;
            double t10848 = t10836-t10810*t10807*t10847;
            double t10849 = 0.0 ;
            double t10850 = EcFhd_1*t10831;
            double t10851 = EcFhd_4*c*t10791;
            double t10852 = EcPhd_4*c*t10791;
            double t10853 = EcFhd_3*c*t10831*t10791;
            double t10854 = EcPhd_3*c*t10831*t10791;
            double t10855 = EcFhd_2-EcPhd_2-t10840+t10850+t10851-t10852+t10853-t10854;
            double t10856 = t10810*t10807*t10855;
            double t10857 = EcPhd_2+t10840+t10852+t10854+t10856;
            double t10858 = -t10792+1.0;
            double t10859 = ( (t10858 > 0.0) ?  1.0 : 0.0 ) ;
            double t10860 = t10842+t10843+t10844+t10845-EcFhd_1*t10841*(1.0/3.0)-EcFhd_3*c*t10790*(1.0/3.0)-EcFhd_4* \
               c*t10790*(1.0/3.0)-EcFhd_3*c*t10831*t10790*(1.0/3.0);
            double t10861 = t10842+t10843+t10844+t10845-t10810*t10860*t10807;
            v_rho_a_rho_a_[index] = -t10789*(-t10859*(t10830+t10832+t10833+t10834-t10810*t10807*(t10830+t10832+ \
               t10833+t10834-EcFhd_1*t10829*(1.0/3.0)-EcFhd_3*c*t10820*(5.0/9.0)-EcFhd_4*c*t10820*(4.0/9.0)-EcFhd_3* \
               c*t10820*t10831*(4.0/9.0)))+t10804*(-t10819+t10828+t10810*t10807*(t10819-t10828-EcFld_1*(t10813*t10813) \
               *1.0/(t10816*t10816*t10816)*2.0+EcFld_1*t10821*(EcFld_3*c*t10820*(4.0/9.0)-EcFld_2*t10822*t10823*t10824* \
               (1.0/3.6E1)+EcFld_2*c*t10820*t10793*(2.0/9.0))))-c*t10820*t10839*t10848*(4.0/9.0)+c*t10820*t10839* \
               t10857*(4.0/9.0)+c*t10861*t10790*t10839*(2.0/3.0)+c*t10790*t10838*t10839*(2.0/3.0)-t10822*t10823*t10848* \
               t10849*(1.0/9.0)+t10822*t10823*t10857*t10849*(1.0/9.0))+t10804*t10838*2.0-t10861*t10859*2.0+c*t10790* \
               t10839*t10857*(2.0/3.0)-c*t10790*t10839*(t10836+t10810*t10807*(t10862-t10836))*(2.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10438 = rho_a[index]+rho_b[index];
            double t10439 = rho_a[index]-rho_b[index];
            double t10440 = 1.0/t10438;
            double t10441 = t10440*t10439;
            double t10442 = 1.0/(t10438*t10438*t10438);
            double t10443 = t10441+1.0;
            double t10444 = 1.0/(t10438*t10438);
            double t10445 = t10444*t10439;
            double t10446 = -t10441+1.0;
            double t10447 = t10440+t10445;
            double t10448 = t10440-t10445;
            double t10449 = 1.0/pow(t10438,1.0/3.0);
            double t10450 = c*t10449;
            double t10451 = log(t10450);
            double t10452 = 1.0/pow(t10438,7.0/3.0);
            double t10453 = two_13*2.0;
            double t10454 = t10453-2.0;
            double t10455 = 1.0/t10454;
            double t10456 = EcPhd_1*t10444*(1.0/3.0);
            double t10457 = EcPhd_3*c*t10452*(5.0/9.0);
            double t10458 = EcPhd_4*c*t10452*(4.0/9.0);
            double t10459 = pow(t10443,1.0/3.0);
            double t10460 = pow(t10446,1.0/3.0);
            double t10461 = 1.0/pow(t10438,4.0/3.0);
            double t10462 = EcFhd_1*t10440*(1.0/3.0);
            double t10463 = EcFhd_3*c*t10461*(1.0/3.0);
            double t10464 = EcFhd_4*c*t10461*(1.0/3.0);
            double t10465 = EcFhd_3*c*t10451*t10461*(1.0/3.0);
            double t10517 = EcPhd_1*t10440*(1.0/3.0);
            double t10518 = EcPhd_3*c*t10461*(1.0/3.0);
            double t10519 = EcPhd_4*c*t10461*(1.0/3.0);
            double t10520 = EcPhd_3*c*t10451*t10461*(1.0/3.0);
            double t10466 = -t10520+t10462+t10463-t10517+t10464-t10518+t10465-t10519;
            double t10467 = EcPhd_3*c*t10451*t10452*(4.0/9.0);
            double t10470 = 1.0/sqrt(t10450);
            double t10472 = EcPld_3*c*t10461*(1.0/3.0);
            double t10473 = EcPld_2*c*t10461*t10470*(1.0/6.0);
            double t10468 = t10472+t10473;
            double t10469 = t10460*t10447*(4.0/3.0);
            double t10471 = sqrt(t10450);
            double t10474 = EcPld_2*t10471;
            double t10475 = EcPld_3*c*t10449;
            double t10476 = t10474+t10475+1.0;
            double t10477 = t10460*t10448*(4.0/3.0);
            double t10478 = EcFld_3*c*t10461*(1.0/3.0);
            double t10479 = EcFld_2*c*t10461*t10470*(1.0/6.0);
            double t10480 = t10478+t10479;
            double t10481 = EcFld_2*t10471;
            double t10482 = EcFld_3*c*t10449;
            double t10483 = t10481+t10482+1.0;
            double t10484 = 1.0/(t10483*t10483);
            double t10485 = EcFld_1*t10480*t10484;
            double t10486 = 1.0/(t10476*t10476);
            double t10527 = EcPld_1*t10468*t10486;
            double t10487 = -t10527+t10485;
            double t10525 = t10448*t10459*(4.0/3.0);
            double t10488 = -t10525+t10477;
            double t10489 = pow(t10443,4.0/3.0);
            double t10490 = pow(t10446,4.0/3.0);
            double t10491 = t10490+t10489-2.0;
            double t10492 = t10468*t10468;
            double t10493 = 1.0/(t10476*t10476*t10476);
            double t10494 = EcPld_1*t10492*t10493*2.0;
            double t10495 = c*c;
            double t10496 = 1.0/pow(t10438,8.0/3.0);
            double t10497 = 1.0/pow(t10450,3.0/2.0);
            double t10498 = EcPld_3*c*t10452*(4.0/9.0);
            double t10499 = EcPld_2*c*t10452*t10470*(2.0/9.0);
            double t10500 = t10498+t10499-EcPld_2*t10495*t10496*t10497*(1.0/3.6E1);
            double t10501 = t10442*t10460*t10439*(8.0/3.0);
            double t10502 = 1.0/pow(t10443,2.0/3.0);
            double t10503 = t10502*t10447*t10448*(4.0/9.0);
            double t10504 = 1.0/pow(t10446,2.0/3.0);
            double t10505 = t10504*t10447*t10448*(4.0/9.0);
            double t10506 = t10501+t10503+t10505-t10442*t10439*t10459*(8.0/3.0);
            double t10507 = t10450-1.0;
            double t10508 = 1.0/t10476;
            double t10509 = EcPld_1*t10508;
            double t10510 = 1.0/t10483;
            double t10529 = EcFld_1*t10510;
            double t10511 = t10509-t10529;
            double t10512 = EcFhd_1*t10451;
            double t10513 = EcPhd_1*t10451;
            double t10514 = EcFhd_4*c*t10449;
            double t10515 = EcFhd_3*c*t10451*t10449;
            double t10516 = 0.0 ;
            double t10521 = EcPhd_4*c*t10449;
            double t10522 = EcPhd_3*c*t10451*t10449;
            double t10528 = t10447*t10459*(4.0/3.0);
            double t10523 = -t10528+t10469;
            double t10524 = t10455*t10491*t10466;
            double t10526 = EcFhd_2-EcPhd_2+t10512-t10521-t10513-t10522+t10514+t10515;
            double t10530 = t10455*t10491*t10487;
            double t10531 = t10525-t10477;
            double t10542 = t10511*t10455*t10491;
            double t10532 = -t10542+t10509;
            double t10533 = 0.0 ;
            double t10534 = t10526*t10455*t10491;
            double t10535 = EcPhd_2+t10521+t10513+t10522+t10534;
            double t10536 = -t10450+1.0;
            double t10537 = ( (t10536 > 0.0) ?  1.0 : 0.0 ) ;
            double t10538 = t10528-t10469;
            double t10539 = t10520+t10524+t10517+t10518+t10519-t10531*t10526*t10455;
            double t10540 = ( (t10507 > 0.0) ?  1.0 : 0.0 ) ;
            double t10541 = t10530+t10527-t10511*t10531*t10455;
            v_rho_a_rho_b_[index] = t10540*(t10530+t10527+t10455*t10538*(t10509-t10529))-t10537*(t10520+t10524+ \
               t10517+t10518+t10519+t10526*t10455*t10538)+t10540*t10541-t10537*t10539-t10438*(-t10540*(t10494-EcPld_1* \
               t10500*t10486+t10511*t10506*t10455+t10523*t10455*t10487-t10455*t10487*t10488-t10455*t10491*(t10494- \
               EcFld_1*(t10480*t10480)*1.0/(t10483*t10483*t10483)*2.0-EcPld_1*t10500*t10486+EcFld_1*t10484*(EcFld_3* \
               c*t10452*(4.0/9.0)-EcFld_2*t10495*t10496*t10497*(1.0/3.6E1)+EcFld_2*c*t10452*t10470*(2.0/9.0))))-t10537* \
               (t10456+t10457+t10458+t10467-t10455*t10491*(t10456+t10457+t10458+t10467-EcFhd_1*t10444*(1.0/3.0)-EcFhd_3* \
               c*t10452*(5.0/9.0)-EcFhd_4*c*t10452*(4.0/9.0)-EcFhd_3*c*t10451*t10452*(4.0/9.0))-t10506*t10526*t10455- \
               t10523*t10455*t10466+t10455*t10466*t10488)+c*t10461*t10516*(t10520+t10524+t10517+t10518+t10519-t10523* \
               t10526*t10455)*(1.0/3.0)-c*t10532*t10452*t10516*(4.0/9.0)+c*t10541*t10461*t10516*(1.0/3.0)+c*t10452* \
               t10516*t10535*(4.0/9.0)+c*t10461*t10516*t10539*(1.0/3.0)-t10532*t10533*t10495*t10496*(1.0/9.0)+t10533* \
               t10535*t10495*t10496*(1.0/9.0)+c*t10461*t10516*(t10530+t10527+t10511*t10455*t10538)*(1.0/3.0))-c*t10532* \
               t10461*t10516*(2.0/3.0)+c*t10461*t10516*t10535*(2.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t11232 = rho_a[index]+rho_b[index];
            double t11233 = 1.0/pow(t11232,4.0/3.0);
            double t11234 = 1.0/pow(t11232,1.0/3.0);
            double t11235 = c*t11234;
            double t11236 = 1.0/sqrt(t11235);
            double t11237 = sqrt(t11235);
            double t11238 = EcPld_3*c*t11233*(1.0/3.0);
            double t11239 = EcPld_2*c*t11233*t11236*(1.0/6.0);
            double t11240 = t11238+t11239;
            double t11241 = EcPld_2*t11237;
            double t11242 = EcPld_3*c*t11234;
            double t11243 = t11241+t11242+1.0;
            double t11244 = 1.0/(t11243*t11243);
            double t11245 = EcPld_1*t11240*t11244;
            double t11246 = t11235-1.0;
            double t11247 = ( (t11246 > 0.0) ?  1.0 : 0.0 ) ;
            double t11248 = pow(2.0,1.0/3.0);
            double t11249 = t11248*2.0;
            double t11250 = t11249-2.0;
            double t11251 = two_13*2.0;
            double t11252 = t11251-2.0;
            double t11253 = 1.0/t11252;
            double t11254 = EcFld_3*c*t11233*(1.0/3.0);
            double t11255 = EcFld_2*c*t11233*t11236*(1.0/6.0);
            double t11256 = t11254+t11255;
            double t11257 = EcFld_2*t11237;
            double t11258 = EcFld_3*c*t11234;
            double t11259 = t11257+t11258+1.0;
            double t11260 = t11240*t11240;
            double t11261 = 1.0/(t11243*t11243*t11243);
            double t11262 = EcPld_1*t11260*t11261*2.0;
            double t11263 = 1.0/pow(t11232,7.0/3.0);
            double t11264 = 1.0/(t11259*t11259);
            double t11265 = c*c;
            double t11266 = 1.0/pow(t11232,8.0/3.0);
            double t11267 = 1.0/pow(t11235,3.0/2.0);
            double t11268 = EcPld_3*c*t11263*(4.0/9.0);
            double t11269 = EcPld_2*c*t11236*t11263*(2.0/9.0);
            double t11270 = t11268+t11269-EcPld_2*t11265*t11266*t11267*(1.0/3.6E1);
            double t11271 = EcPld_1*t11270*t11244;
            double t11272 = 1.0/(t11232*t11232);
            double t11273 = EcPhd_1*t11272*(1.0/3.0);
            double t11274 = log(t11235);
            double t11275 = EcPhd_3*c*t11263*(5.0/9.0);
            double t11276 = EcPhd_4*c*t11263*(4.0/9.0);
            double t11277 = EcPhd_3*c*t11263*t11274*(4.0/9.0);
            double t11278 = 1.0/t11243;
            double t11279 = EcPld_1*t11278;
            double t11280 = t11245-EcFld_1*t11264*t11256;
            double t11281 = t11245-t11250*t11253*t11280;
            double t11282 = 0.0 ;
            double t11283 = EcPhd_1*t11274;
            double t11284 = 1.0/t11232;
            double t11285 = EcPhd_1*t11284*(1.0/3.0);
            double t11286 = EcPhd_3*c*t11233*(1.0/3.0);
            double t11287 = EcPhd_4*c*t11233*(1.0/3.0);
            double t11288 = EcPhd_3*c*t11233*t11274*(1.0/3.0);
            double t11289 = 1.0/t11259;
            double t11305 = EcFld_1*t11289;
            double t11290 = -t11305+t11279;
            double t11291 = t11279-t11250*t11253*t11290;
            double t11292 = 0.0 ;
            double t11293 = EcFhd_1*t11274;
            double t11294 = EcFhd_4*c*t11234;
            double t11295 = EcPhd_4*c*t11234;
            double t11296 = EcFhd_3*c*t11234*t11274;
            double t11297 = EcPhd_3*c*t11234*t11274;
            double t11298 = EcFhd_2-EcPhd_2-t11283+t11293+t11294-t11295+t11296-t11297;
            double t11299 = t11250*t11253*t11298;
            double t11300 = EcPhd_2+t11283+t11295+t11297+t11299;
            double t11301 = -t11235+1.0;
            double t11302 = ( (t11301 > 0.0) ?  1.0 : 0.0 ) ;
            double t11303 = t11285+t11286+t11287+t11288-EcFhd_1*t11284*(1.0/3.0)-EcFhd_3*c*t11233*(1.0/3.0)-EcFhd_4* \
               c*t11233*(1.0/3.0)-EcFhd_3*c*t11233*t11274*(1.0/3.0);
            double t11304 = t11285+t11286+t11287+t11288-t11303*t11250*t11253;
            v_rho_a_rho_b_[index] = -t11232*(-t11302*(t11273+t11275+t11276+t11277-t11250*t11253*(t11273+t11275+ \
               t11276+t11277-EcFhd_1*t11272*(1.0/3.0)-EcFhd_3*c*t11263*(5.0/9.0)-EcFhd_4*c*t11263*(4.0/9.0)-EcFhd_3* \
               c*t11263*t11274*(4.0/9.0)))+t11247*(-t11262+t11271+t11250*t11253*(t11262-t11271-EcFld_1*(t11256*t11256) \
               *1.0/(t11259*t11259*t11259)*2.0+EcFld_1*t11264*(EcFld_3*c*t11263*(4.0/9.0)-EcFld_2*t11265*t11266*t11267* \
               (1.0/3.6E1)+EcFld_2*c*t11236*t11263*(2.0/9.0))))+c*t11300*t11263*t11282*(4.0/9.0)+c*t11304*t11233* \
               t11282*(2.0/3.0)+c*t11233*t11281*t11282*(2.0/3.0)-c*t11263*t11282*t11291*(4.0/9.0)+t11300*t11265*t11292* \
               t11266*(1.0/9.0)-t11291*t11265*t11292*t11266*(1.0/9.0))-t11302*t11304*2.0+t11281*t11247*2.0+c*t11300* \
               t11233*t11282*(2.0/3.0)-c*t11233*t11282*(t11279+t11250*t11253*(t11305-t11279))*(2.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t10864 = rho_a[index]+rho_b[index];
            double t10865 = 1.0/pow(t10864,4.0/3.0);
            double t10866 = 1.0/pow(t10864,1.0/3.0);
            double t10867 = c*t10866;
            double t10868 = 1.0/sqrt(t10867);
            double t10869 = sqrt(t10867);
            double t10870 = EcPld_3*c*t10865*(1.0/3.0);
            double t10871 = EcPld_2*c*t10865*t10868*(1.0/6.0);
            double t10872 = t10870+t10871;
            double t10873 = EcPld_2*t10869;
            double t10874 = EcPld_3*c*t10866;
            double t10875 = t10873+t10874+1.0;
            double t10876 = 1.0/(t10875*t10875);
            double t10877 = EcPld_1*t10872*t10876;
            double t10878 = t10867-1.0;
            double t10879 = ( (t10878 > 0.0) ?  1.0 : 0.0 ) ;
            double t10880 = pow(2.0,1.0/3.0);
            double t10881 = t10880*2.0;
            double t10882 = t10881-2.0;
            double t10883 = two_13*2.0;
            double t10884 = t10883-2.0;
            double t10885 = 1.0/t10884;
            double t10886 = EcFld_3*c*t10865*(1.0/3.0);
            double t10887 = EcFld_2*c*t10865*t10868*(1.0/6.0);
            double t10888 = t10886+t10887;
            double t10889 = EcFld_2*t10869;
            double t10890 = EcFld_3*c*t10866;
            double t10891 = t10890+t10889+1.0;
            double t10892 = t10872*t10872;
            double t10893 = 1.0/(t10875*t10875*t10875);
            double t10894 = EcPld_1*t10892*t10893*2.0;
            double t10895 = 1.0/pow(t10864,7.0/3.0);
            double t10896 = 1.0/(t10891*t10891);
            double t10897 = c*c;
            double t10898 = 1.0/pow(t10864,8.0/3.0);
            double t10899 = 1.0/pow(t10867,3.0/2.0);
            double t10900 = EcPld_3*c*t10895*(4.0/9.0);
            double t10901 = EcPld_2*c*t10868*t10895*(2.0/9.0);
            double t10902 = t10900+t10901-EcPld_2*t10897*t10898*t10899*(1.0/3.6E1);
            double t10903 = EcPld_1*t10902*t10876;
            double t10904 = 1.0/(t10864*t10864);
            double t10905 = EcPhd_1*t10904*(1.0/3.0);
            double t10906 = log(t10867);
            double t10907 = EcPhd_3*c*t10895*(5.0/9.0);
            double t10908 = EcPhd_4*c*t10895*(4.0/9.0);
            double t10909 = EcPhd_3*c*t10906*t10895*(4.0/9.0);
            double t10910 = 1.0/t10875;
            double t10911 = EcPld_1*t10910;
            double t10912 = t10877-EcFld_1*t10896*t10888;
            double t10913 = t10877-t10912*t10882*t10885;
            double t10914 = 0.0 ;
            double t10915 = EcPhd_1*t10906;
            double t10916 = 1.0/t10864;
            double t10917 = EcPhd_1*t10916*(1.0/3.0);
            double t10918 = EcPhd_3*c*t10865*(1.0/3.0);
            double t10919 = EcPhd_4*c*t10865*(1.0/3.0);
            double t10920 = EcPhd_3*c*t10906*t10865*(1.0/3.0);
            double t10921 = 1.0/t10891;
            double t10937 = EcFld_1*t10921;
            double t10922 = t10911-t10937;
            double t10938 = t10922*t10882*t10885;
            double t10923 = t10911-t10938;
            double t10924 = 0.0 ;
            double t10925 = EcFhd_1*t10906;
            double t10926 = EcFhd_4*c*t10866;
            double t10927 = EcPhd_4*c*t10866;
            double t10928 = EcFhd_3*c*t10906*t10866;
            double t10929 = EcPhd_3*c*t10906*t10866;
            double t10930 = -t10867+1.0;
            double t10931 = ( (t10930 > 0.0) ?  1.0 : 0.0 ) ;
            double t10932 = t10920+t10917+t10918+t10919-EcFhd_1*t10916*(1.0/3.0)-EcFhd_3*c*t10865*(1.0/3.0)-EcFhd_4* \
               c*t10865*(1.0/3.0)-EcFhd_3*c*t10906*t10865*(1.0/3.0);
            double t10933 = t10920+t10917+t10918+t10919-t10932*t10882*t10885;
            double t10934 = EcFhd_2-EcPhd_2-t10915+t10925+t10926-t10927+t10928-t10929;
            double t10935 = t10934*t10882*t10885;
            double t10936 = EcPhd_2+t10915+t10935+t10927+t10929;
            v_rho_a_rho_b_[index] = t10931*t10933*-2.0+t10913*t10879*2.0+t10864*(t10931*(t10905+t10907+t10908+ \
               t10909-t10882*t10885*(t10905+t10907+t10908+t10909-EcFhd_1*t10904*(1.0/3.0)-EcFhd_3*c*t10895*(5.0/9.0) \
               -EcFhd_4*c*t10895*(4.0/9.0)-EcFhd_3*c*t10906*t10895*(4.0/9.0)))+t10879*(-t10903+t10894+t10882*t10885* \
               (t10903-t10894+EcFld_1*1.0/(t10891*t10891*t10891)*(t10888*t10888)*2.0-EcFld_1*t10896*(EcFld_3*c*t10895* \
               (4.0/9.0)-EcFld_2*t10897*t10898*t10899*(1.0/3.6E1)+EcFld_2*c*t10868*t10895*(2.0/9.0))))-c*t10913*t10914* \
               t10865*(2.0/3.0)-c*t10914*t10933*t10865*(2.0/3.0)+c*t10914*t10923*t10895*(4.0/9.0)+t10923*t10924*t10897* \
               t10898*(1.0/9.0)-t10924*t10936*t10897*t10898*(1.0/9.0)-c*t10914*t10895*(EcPhd_2+t10915+t10927+t10929+ \
               t10882*t10885*(EcFhd_2-EcPhd_2-t10915+t10925+t10926+t10928-EcPhd_4*c*t10866-EcPhd_3*c*t10906*t10866) \
               )*(4.0/9.0))-c*t10914*t10923*t10865*(2.0/3.0)+c*t10914*t10936*t10865*(2.0/3.0);
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10544 = rho_a[index]+rho_b[index];
            double t10545 = 1.0/pow(t10544,4.0/3.0);
            double t10546 = 1.0/pow(t10544,1.0/3.0);
            double t10547 = c*t10546;
            double t10555 = 1.0/sqrt(t10547);
            double t10557 = EcPld_3*c*t10545*(1.0/3.0);
            double t10558 = EcPld_2*c*t10545*t10555*(1.0/6.0);
            double t10548 = t10557+t10558;
            double t10549 = 1.0/t10544;
            double t10550 = rho_a[index]-rho_b[index];
            double t10551 = t10550*t10549;
            double t10552 = 1.0/(t10544*t10544);
            double t10553 = t10550*t10552;
            double t10554 = t10553+t10549;
            double t10556 = sqrt(t10547);
            double t10559 = EcPld_2*t10556;
            double t10560 = EcPld_3*c*t10546;
            double t10561 = t10560+t10559+1.0;
            double t10562 = two_13*2.0;
            double t10563 = t10562-2.0;
            double t10564 = 1.0/t10563;
            double t10565 = t10551+1.0;
            double t10566 = -t10551+1.0;
            double t10567 = EcFld_3*c*t10545*(1.0/3.0);
            double t10568 = EcFld_2*c*t10545*t10555*(1.0/6.0);
            double t10569 = t10567+t10568;
            double t10570 = EcFld_2*t10556;
            double t10571 = EcFld_3*c*t10546;
            double t10572 = t10570+t10571+1.0;
            double t10573 = t10548*t10548;
            double t10574 = 1.0/(t10561*t10561*t10561);
            double t10575 = EcPld_1*t10573*t10574*2.0;
            double t10576 = 1.0/pow(t10544,7.0/3.0);
            double t10577 = 1.0/(t10572*t10572);
            double t10578 = c*c;
            double t10579 = 1.0/pow(t10544,8.0/3.0);
            double t10580 = 1.0/pow(t10547,3.0/2.0);
            double t10581 = 1.0/(t10561*t10561);
            double t10582 = EcPld_3*c*t10576*(4.0/9.0);
            double t10583 = EcPld_2*c*t10555*t10576*(2.0/9.0);
            double t10584 = t10582+t10583-EcPld_2*t10580*t10578*t10579*(1.0/3.6E1);
            double t10585 = pow(t10565,1.0/3.0);
            double t10586 = pow(t10566,1.0/3.0);
            double t10587 = t10552*2.0;
            double t10588 = 1.0/(t10544*t10544*t10544);
            double t10589 = t10550*t10588*2.0;
            double t10590 = t10587+t10589;
            double t10591 = t10554*t10554;
            double t10592 = t10590*t10585*(4.0/3.0);
            double t10593 = 1.0/pow(t10565,2.0/3.0);
            double t10594 = t10591*t10593*(4.0/9.0);
            double t10595 = 1.0/pow(t10566,2.0/3.0);
            double t10596 = t10591*t10595*(4.0/9.0);
            double t10597 = t10592+t10594+t10596-t10590*t10586*(4.0/3.0);
            double t10598 = log(t10547);
            double t10599 = pow(t10565,4.0/3.0);
            double t10600 = pow(t10566,4.0/3.0);
            double t10601 = t10600+t10599-2.0;
            double t10602 = EcPhd_1*t10552*(1.0/3.0);
            double t10603 = EcPhd_3*c*t10576*(5.0/9.0);
            double t10604 = EcPhd_4*c*t10576*(4.0/9.0);
            double t10605 = t10554*t10585*(4.0/3.0);
            double t10625 = t10554*t10586*(4.0/3.0);
            double t10606 = t10605-t10625;
            double t10607 = EcPhd_3*c*t10576*t10598*(4.0/9.0);
            double t10608 = t10547-1.0;
            double t10609 = 1.0/t10561;
            double t10610 = EcPld_1*t10609;
            double t10611 = 1.0/t10572;
            double t10630 = EcFld_1*t10611;
            double t10612 = t10610-t10630;
            double t10613 = EcFhd_1*t10598;
            double t10614 = EcPhd_1*t10598;
            double t10615 = EcFhd_4*c*t10546;
            double t10616 = EcFhd_3*c*t10546*t10598;
            double t10617 = 0.0 ;
            double t10618 = EcFhd_1*t10549*(1.0/3.0);
            double t10619 = EcPhd_1*t10549*(1.0/3.0);
            double t10620 = EcFhd_3*c*t10545*(1.0/3.0);
            double t10621 = EcFhd_4*c*t10545*(1.0/3.0);
            double t10622 = EcPhd_3*c*t10545*(1.0/3.0);
            double t10623 = EcPhd_4*c*t10545*(1.0/3.0);
            double t10624 = EcFhd_3*c*t10545*t10598*(1.0/3.0);
            double t10626 = EcPhd_4*c*t10546;
            double t10627 = EcPhd_3*c*t10546*t10598;
            double t10628 = EcFld_1*t10577*t10569;
            double t10631 = EcPld_1*t10581*t10548;
            double t10629 = -t10631+t10628;
            double t10647 = t10601*t10612*t10564;
            double t10632 = t10610-t10647;
            double t10633 = 0.0 ;
            double t10634 = EcFhd_2-EcPhd_2+t10613-t10614+t10615+t10616-t10626-t10627;
            double t10635 = EcPld_1*t10581*t10584;
            double t10636 = t10601*t10634*t10564;
            double t10637 = EcPhd_2+t10614+t10626+t10627+t10636;
            double t10639 = EcPhd_3*c*t10545*t10598*(1.0/3.0);
            double t10638 = t10620+t10621-t10622-t10623+t10624+t10618-t10619-t10639;
            double t10640 = -t10547+1.0;
            double t10641 = ( (t10640 > 0.0) ?  1.0 : 0.0 ) ;
            double t10642 = t10601*t10564*t10638;
            double t10643 = t10606*t10634*t10564;
            double t10644 = t10622+t10623+t10642+t10643+t10619+t10639;
            double t10645 = ( (t10608 > 0.0) ?  1.0 : 0.0 ) ;
            double t10646 = t10601*t10564*t10629;
            v_rho_b_rho_b_[index] = t10645*(t10631+t10646+t10606*t10564*(t10610-t10630))*2.0-t10641*t10644*2.0- \
               t10544*(t10645*(t10635-t10575-t10601*t10564*(t10635-t10575+EcFld_1*1.0/(t10572*t10572*t10572)*(t10569* \
               t10569)*2.0-EcFld_1*t10577*(EcFld_3*c*t10576*(4.0/9.0)-EcFld_2*t10580*t10578*t10579*(1.0/3.6E1)+EcFld_2* \
               c*t10555*t10576*(2.0/9.0)))+t10606*t10564*t10629*2.0+t10612*t10564*t10597)-t10641*(t10602+t10603+t10604+ \
               t10607-t10601*t10564*(t10602+t10603+t10604+t10607-EcFhd_1*t10552*(1.0/3.0)-EcFhd_3*c*t10576*(5.0/9.0) \
               -EcFhd_4*c*t10576*(4.0/9.0)-EcFhd_3*c*t10576*t10598*(4.0/9.0))+t10606*t10564*t10638*2.0+t10634*t10564* \
               t10597)+c*t10545*t10617*t10644*(2.0/3.0)-c*t10632*t10617*t10576*(4.0/9.0)+c*t10617*t10637*t10576*(4.0/ \
               9.0)-t10632*t10633*t10578*t10579*(1.0/9.0)+t10633*t10637*t10578*t10579*(1.0/9.0)+c*t10545*t10617*(t10631+ \
               t10646+t10612*t10606*t10564)*(2.0/3.0))-c*t10632*t10545*t10617*(2.0/3.0)+c*t10545*t10617*t10637*(2.0/ \
               3.0);
        } else if (rho_a[index] > cutoff_) {
            double t11307 = rho_a[index]+rho_b[index];
            double t11308 = 1.0/pow(t11307,4.0/3.0);
            double t11309 = 1.0/pow(t11307,1.0/3.0);
            double t11310 = c*t11309;
            double t11311 = 1.0/sqrt(t11310);
            double t11312 = sqrt(t11310);
            double t11313 = EcPld_3*c*t11308*(1.0/3.0);
            double t11314 = EcPld_2*c*t11311*t11308*(1.0/6.0);
            double t11315 = t11313+t11314;
            double t11316 = EcPld_2*t11312;
            double t11317 = EcPld_3*c*t11309;
            double t11318 = t11316+t11317+1.0;
            double t11319 = 1.0/(t11318*t11318);
            double t11320 = EcPld_1*t11315*t11319;
            double t11321 = t11310-1.0;
            double t11322 = ( (t11321 > 0.0) ?  1.0 : 0.0 ) ;
            double t11323 = pow(2.0,1.0/3.0);
            double t11324 = t11323*2.0;
            double t11325 = t11324-2.0;
            double t11326 = two_13*2.0;
            double t11327 = t11326-2.0;
            double t11328 = 1.0/t11327;
            double t11329 = EcFld_3*c*t11308*(1.0/3.0);
            double t11330 = EcFld_2*c*t11311*t11308*(1.0/6.0);
            double t11331 = t11330+t11329;
            double t11332 = EcFld_2*t11312;
            double t11333 = EcFld_3*c*t11309;
            double t11334 = t11332+t11333+1.0;
            double t11335 = t11315*t11315;
            double t11336 = 1.0/(t11318*t11318*t11318);
            double t11337 = EcPld_1*t11335*t11336*2.0;
            double t11338 = 1.0/pow(t11307,7.0/3.0);
            double t11339 = 1.0/(t11334*t11334);
            double t11340 = c*c;
            double t11341 = 1.0/pow(t11307,8.0/3.0);
            double t11342 = 1.0/pow(t11310,3.0/2.0);
            double t11343 = EcPld_3*c*t11338*(4.0/9.0);
            double t11344 = EcPld_2*c*t11311*t11338*(2.0/9.0);
            double t11345 = t11343+t11344-EcPld_2*t11340*t11341*t11342*(1.0/3.6E1);
            double t11346 = EcPld_1*t11345*t11319;
            double t11347 = 1.0/(t11307*t11307);
            double t11348 = EcPhd_1*t11347*(1.0/3.0);
            double t11349 = log(t11310);
            double t11350 = EcPhd_3*c*t11338*(5.0/9.0);
            double t11351 = EcPhd_4*c*t11338*(4.0/9.0);
            double t11352 = EcPhd_3*c*t11338*t11349*(4.0/9.0);
            double t11353 = 1.0/t11318;
            double t11354 = EcPld_1*t11353;
            double t11355 = t11320-EcFld_1*t11331*t11339;
            double t11356 = t11320-t11325*t11328*t11355;
            double t11357 = 0.0 ;
            double t11358 = EcPhd_1*t11349;
            double t11359 = 1.0/t11307;
            double t11360 = EcPhd_1*t11359*(1.0/3.0);
            double t11361 = EcPhd_3*c*t11308*(1.0/3.0);
            double t11362 = EcPhd_4*c*t11308*(1.0/3.0);
            double t11363 = EcPhd_3*c*t11308*t11349*(1.0/3.0);
            double t11364 = 1.0/t11334;
            double t11380 = EcFld_1*t11364;
            double t11365 = -t11380+t11354;
            double t11366 = t11354-t11325*t11328*t11365;
            double t11367 = 0.0 ;
            double t11368 = EcFhd_1*t11349;
            double t11369 = EcFhd_4*c*t11309;
            double t11370 = EcPhd_4*c*t11309;
            double t11371 = EcFhd_3*c*t11309*t11349;
            double t11372 = EcPhd_3*c*t11309*t11349;
            double t11373 = EcFhd_2-EcPhd_2-t11370+t11371-t11372-t11358+t11368+t11369;
            double t11374 = t11325*t11328*t11373;
            double t11375 = EcPhd_2+t11370+t11372+t11374+t11358;
            double t11376 = -t11310+1.0;
            double t11377 = ( (t11376 > 0.0) ?  1.0 : 0.0 ) ;
            double t11378 = t11360+t11361+t11362+t11363-EcFhd_1*t11359*(1.0/3.0)-EcFhd_3*c*t11308*(1.0/3.0)-EcFhd_4* \
               c*t11308*(1.0/3.0)-EcFhd_3*c*t11308*t11349*(1.0/3.0);
            double t11379 = t11360+t11361+t11362+t11363-t11325*t11328*t11378;
            v_rho_b_rho_b_[index] = -t11307*(-t11377*(t11350+t11351+t11352+t11348-t11325*t11328*(t11350+t11351+ \
               t11352+t11348-EcFhd_1*t11347*(1.0/3.0)-EcFhd_3*c*t11338*(5.0/9.0)-EcFhd_4*c*t11338*(4.0/9.0)-EcFhd_3* \
               c*t11338*t11349*(4.0/9.0)))+t11322*(-t11337+t11346+t11325*t11328*(t11337-t11346-EcFld_1*(t11331*t11331) \
               *1.0/(t11334*t11334*t11334)*2.0+EcFld_1*t11339*(EcFld_3*c*t11338*(4.0/9.0)-EcFld_2*t11340*t11341*t11342* \
               (1.0/3.6E1)+EcFld_2*c*t11311*t11338*(2.0/9.0))))+c*t11308*t11356*t11357*(2.0/3.0)-c*t11338*t11357* \
               t11366*(4.0/9.0)+c*t11338*t11357*t11375*(4.0/9.0)+c*t11308*t11357*t11379*(2.0/3.0)-t11340*t11341*t11366* \
               t11367*(1.0/9.0)+t11340*t11341*t11375*t11367*(1.0/9.0))+t11322*t11356*2.0-t11377*t11379*2.0+c*t11308* \
               t11357*t11375*(2.0/3.0)-c*t11308*t11357*(t11354+t11325*t11328*(t11380-t11354))*(2.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t10940 = rho_a[index]+rho_b[index];
            double t10941 = 1.0/pow(t10940,4.0/3.0);
            double t10942 = 1.0/pow(t10940,1.0/3.0);
            double t10943 = c*t10942;
            double t10944 = 1.0/sqrt(t10943);
            double t10945 = sqrt(t10943);
            double t10946 = EcPld_3*c*t10941*(1.0/3.0);
            double t10947 = EcPld_2*c*t10941*t10944*(1.0/6.0);
            double t10948 = t10946+t10947;
            double t10949 = EcPld_2*t10945;
            double t10950 = EcPld_3*c*t10942;
            double t10951 = t10950+t10949+1.0;
            double t10952 = 1.0/(t10951*t10951);
            double t10953 = EcPld_1*t10952*t10948;
            double t10954 = t10943-1.0;
            double t10955 = ( (t10954 > 0.0) ?  1.0 : 0.0 ) ;
            double t10956 = pow(2.0,1.0/3.0);
            double t10957 = t10956*2.0;
            double t10958 = t10957-2.0;
            double t10959 = two_13*2.0;
            double t10960 = t10959-2.0;
            double t10961 = 1.0/t10960;
            double t10962 = EcFld_3*c*t10941*(1.0/3.0);
            double t10963 = EcFld_2*c*t10941*t10944*(1.0/6.0);
            double t10964 = t10962+t10963;
            double t10965 = EcFld_2*t10945;
            double t10966 = EcFld_3*c*t10942;
            double t10967 = t10965+t10966+1.0;
            double t10968 = t10948*t10948;
            double t10969 = 1.0/(t10951*t10951*t10951);
            double t10970 = EcPld_1*t10968*t10969*2.0;
            double t10971 = 1.0/pow(t10940,7.0/3.0);
            double t10972 = 1.0/(t10967*t10967);
            double t10973 = c*c;
            double t10974 = 1.0/pow(t10940,8.0/3.0);
            double t10975 = 1.0/pow(t10943,3.0/2.0);
            double t10976 = EcPld_3*c*t10971*(4.0/9.0);
            double t10977 = EcPld_2*c*t10944*t10971*(2.0/9.0);
            double t10978 = t10976+t10977-EcPld_2*t10973*t10974*t10975*(1.0/3.6E1);
            double t10979 = EcPld_1*t10952*t10978;
            double t10980 = 1.0/(t10940*t10940);
            double t10981 = EcPhd_1*t10980*(1.0/3.0);
            double t10982 = log(t10943);
            double t10983 = EcPhd_3*c*t10971*(5.0/9.0);
            double t10984 = EcPhd_4*c*t10971*(4.0/9.0);
            double t10985 = EcPhd_3*c*t10971*t10982*(4.0/9.0);
            double t10986 = 1.0/t10951;
            double t10987 = EcPld_1*t10986;
            double t10988 = t10953-EcFld_1*t10972*t10964;
            double t10989 = t10953-t10961*t10958*t10988;
            double t10990 = 0.0 ;
            double t10991 = EcPhd_1*t10982;
            double t10992 = 1.0/t10940;
            double t10993 = EcPhd_1*t10992*(1.0/3.0);
            double t10994 = EcPhd_3*c*t10941*(1.0/3.0);
            double t10995 = EcPhd_4*c*t10941*(1.0/3.0);
            double t10996 = EcPhd_3*c*t10941*t10982*(1.0/3.0);
            double t10997 = 1.0/t10967;
            double t11013 = EcFld_1*t10997;
            double t10998 = t10987-t11013;
            double t11014 = t10961*t10958*t10998;
            double t10999 = t10987-t11014;
            double t11000 = 0.0 ;
            double t11001 = EcFhd_1*t10982;
            double t11002 = EcFhd_4*c*t10942;
            double t11003 = EcPhd_4*c*t10942;
            double t11004 = EcFhd_3*c*t10942*t10982;
            double t11005 = EcPhd_3*c*t10942*t10982;
            double t11006 = EcFhd_2-EcPhd_2-t10991+t11001+t11002-t11003+t11004-t11005;
            double t11007 = t10961*t10958*t11006;
            double t11008 = EcPhd_2+t10991+t11003+t11005+t11007;
            double t11009 = -t10943+1.0;
            double t11010 = ( (t11009 > 0.0) ?  1.0 : 0.0 ) ;
            double t11011 = t10993+t10994+t10995+t10996-EcFhd_1*t10992*(1.0/3.0)-EcFhd_3*c*t10941*(1.0/3.0)-EcFhd_4* \
               c*t10941*(1.0/3.0)-EcFhd_3*c*t10941*t10982*(1.0/3.0);
            double t11012 = t10993+t10994+t10995+t10996-t10961*t10958*t11011;
            v_rho_b_rho_b_[index] = -t10940*(-t11010*(t10981+t10983+t10984+t10985-t10961*t10958*(t10981+t10983+ \
               t10984+t10985-EcFhd_1*t10980*(1.0/3.0)-EcFhd_3*c*t10971*(5.0/9.0)-EcFhd_4*c*t10971*(4.0/9.0)-EcFhd_3* \
               c*t10971*t10982*(4.0/9.0)))+t10955*(-t10970+t10979+t10961*t10958*(t10970-t10979-EcFld_1*(t10964*t10964) \
               *1.0/(t10967*t10967*t10967)*2.0+EcFld_1*t10972*(EcFld_3*c*t10971*(4.0/9.0)-EcFld_2*t10973*t10974*t10975* \
               (1.0/3.6E1)+EcFld_2*c*t10944*t10971*(2.0/9.0))))+c*t10941*t10990*t10989*(2.0/3.0)-c*t10971*t10990* \
               t10999*(4.0/9.0)+c*t10941*t10990*t11012*(2.0/3.0)+c*t10971*t10990*t11008*(4.0/9.0)-t10973*t10974*t10999* \
               t11000*(1.0/9.0)+t10973*t10974*t11000*t11008*(1.0/9.0))+t10955*t10989*2.0-t11010*t11012*2.0-c*t10941* \
               t10990*t10999*(2.0/3.0)+c*t10941*t10990*t11008*(2.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

