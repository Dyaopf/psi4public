/**********************************************************
* PZ81_C_functional.cc: definitions for PZ81_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "PZ81_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PZ81_C_Functional::PZ81_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "PZ81_C";
    description_ = "PZ81 Correlation";
    citation_ = "J.P. Perdew, A. Zunger, Phys. Rev. B., 23, 5048-5079, 1981";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double EcPld_1 = -1.4230000000000001E-01;
    params_.push_back(make_pair("EcPld_1",EcPld_1));
    double EcPld_2 = 1.0528999999999999E+00;
    params_.push_back(make_pair("EcPld_2",EcPld_2));
    double EcPld_3 = 3.3339999999999997E-01;
    params_.push_back(make_pair("EcPld_3",EcPld_3));
    double EcFld_1 = -8.4300000000000000E-02;
    params_.push_back(make_pair("EcFld_1",EcFld_1));
    double EcFld_2 = 1.3980999999999999E+00;
    params_.push_back(make_pair("EcFld_2",EcFld_2));
    double EcFld_3 = 2.6110000000000000E-01;
    params_.push_back(make_pair("EcFld_3",EcFld_3));
    double EcPhd_1 = 3.1099999999999999E-02;
    params_.push_back(make_pair("EcPhd_1",EcPhd_1));
    double EcPhd_2 = -4.8000000000000001E-02;
    params_.push_back(make_pair("EcPhd_2",EcPhd_2));
    double EcPhd_3 = 2.0000000000000000E-03;
    params_.push_back(make_pair("EcPhd_3",EcPhd_3));
    double EcPhd_4 = -1.1599999999999999E-02;
    params_.push_back(make_pair("EcPhd_4",EcPhd_4));
    double EcFhd_1 = 1.5550000000000000E-02;
    params_.push_back(make_pair("EcFhd_1",EcFhd_1));
    double EcFhd_2 = -2.6900000000000000E-02;
    params_.push_back(make_pair("EcFhd_2",EcFhd_2));
    double EcFhd_3 = 6.9999999999999999E-04;
    params_.push_back(make_pair("EcFhd_3",EcFhd_3));
    double EcFhd_4 = -4.7999999999999996E-03;
    params_.push_back(make_pair("EcFhd_4",EcFhd_4));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PZ81_C_Functional::~PZ81_C_Functional()
{
}
void PZ81_C_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t11171 = rho_a[index]*2.0;
            double t11172 = 1/pow(t11171,1.0/3.0);
            double t11173 = c*t11172;
            double t11174 = log(t11173);
            functional_[index] = rho_a[index]*( ( (-c*t11172+1.0 > 0.0) ? 1.0*(EcPhd_2+EcPhd_1*t11174+EcPhd_4* \
               c*t11172+EcPhd_3*c*t11172*t11174) : 0.0 ) +( ( (t11173-1.0 > 0.0) ? EcPld_1*1.0 : 0.0 ) )/(EcPld_2* \
               sqrt(t11173)+EcPld_3*c*t11172+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t11176 = rho_a[index]*2.0;
            double t11177 = 1/pow(t11176,1.0/3.0);
            double t11178 = c*t11177;
            double t11179 = log(t11178);
            double t11180 = 1/pow(t11176,4.0/3.0);
            double t11181 = EcPhd_1*t11179;
            double t11182 = EcPhd_4*c*t11177;
            double t11183 = EcPhd_3*c*t11177*t11179;
            double t11184 = EcPhd_2+t11181+t11182+t11183;
            double t11185 = t11178-1.0;
            double t11186 = 0.0 ;
            double t11187 = sqrt(t11178);
            double t11188 = EcPld_2*t11187;
            double t11189 = EcPld_3*c*t11177;
            double t11190 = t11188+t11189+1.0;
            double t11191 = ( (t11185 > 0.0) ?  1.0 : 0.0 ) ;
            double t11192 = 1/t11190;
            v_rho_a_[index] = rho_a[index]*( ( (-t11178+1.0 > 0.0) ? 1.0*((EcPhd_1*(1.0/6.0))/rho_a[index]+EcPhd_3* \
               c*t11180*(1.0/3.0)+EcPhd_4*c*t11180*(1.0/3.0)+EcPhd_3*c*t11180*t11179*(1.0/3.0)) : 0.0 ) -EcPld_1* \
               1/(t11190*t11190)*t11191*(EcPld_3*c*t11180*(1.0/3.0)+EcPld_2*c*t11180*1/sqrt(t11178)*(1.0/6.0))-c* \
               t11180*t11184*t11186*(1.0/3.0)+EcPld_1*c*t11180*t11192*t11186*(1.0/3.0))*-2.0+ ( (-c*t11177+1.0 >  \
               0.0) ? t11184*1.0 : 0.0 ) +EcPld_1*t11191*t11192;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t11196 = rho_a[index]*2.0;
            double t11197 = 1/pow(t11196,4.0/3.0);
            double t11198 = 1/pow(t11196,1.0/3.0);
            double t11199 = c*t11198;
            double t11206 = 1/sqrt(t11199);
            double t11222 = EcPld_3*c*t11197*(1.0/3.0);
            double t11223 = EcPld_2*c*t11206*t11197*(1.0/6.0);
            double t11200 = t11222+t11223;
            double t11201 = sqrt(t11199);
            double t11202 = EcPld_2*t11201;
            double t11203 = EcPld_3*c*t11198;
            double t11204 = t11202+t11203+1.0;
            double t11205 = 1/pow(t11196,7.0/3.0);
            double t11207 = 1/(rho_a[index]*rho_a[index]);
            double t11208 = two_13*2.0;
            double t11209 = t11208-2.0;
            double t11210 = 1/t11209;
            double t11211 = log(t11199);
            double t11212 = t11199-1.0;
            double t11213 = c*c;
            double t11214 = 1/pow(t11196,8.0/3.0);
            double t11215 = EcPhd_1*t11211;
            double t11216 = EcPhd_4*c*t11198;
            double t11217 = EcPhd_3*c*t11211*t11198;
            double t11218 = EcPhd_2+t11215+t11216+t11217;
            double t11219 = 0.0 ;
            double t11220 = 0.0 ;
            double t11221 = 1/t11204;
            double t11224 = 1/(t11204*t11204);
            double t11225 = ( (t11212 > 0.0) ?  1.0 : 0.0 ) ;
            double t11226 = t11200*t11200;
            double t11227 = 1/(t11204*t11204*t11204);
            double t11228 = EcPld_1*t11226*t11227*2.0;
            double t11229 = EcFld_2*t11201;
            double t11230 = EcFld_3*c*t11198;
            double t11231 = t11230+t11229+1.0;
            double t11232 = 1/t11231;
            double t11233 = EcFld_1*t11232;
            double t11234 = t11233-EcPld_1*t11221;
            double t11235 = t11210*t11207*t11234*(2.0/9.0);
            double t11236 = EcPld_3*c*t11205*(4.0/9.0);
            double t11237 = EcPld_2*c*t11205*t11206*(2.0/9.0);
            double t11238 = 1/pow(t11199,3.0/2.0);
            double t11239 = t11236+t11237-EcPld_2*t11213*t11214*t11238*(1.0/3.6E1);
            double t11240 = EcPld_1*t11224*t11239;
            double t11241 = -t11199+1.0;
            double t11242 = ( (t11241 > 0.0) ?  1.0 : 0.0 ) ;
            double t11243 = EcPhd_1*t11207*(1.0/1.2E1);
            double t11244 = EcPhd_3*c*t11205*(5.0/9.0);
            double t11245 = EcPhd_4*c*t11205*(4.0/9.0);
            double t11246 = EcFhd_1*t11211;
            double t11247 = EcFhd_4*c*t11198;
            double t11248 = EcFhd_3*c*t11211*t11198;
            double t11249 = EcPhd_3*c*t11211*t11205*(4.0/9.0);
            double t11250 = c*t11205*t11218*t11219*(4.0/9.0);
            double t11251 = t11220*t11213*t11214*t11218*(1.0/9.0);
            double t11252 = 1/rho_a[index];
            double t11253 = EcPhd_1*t11252*(1.0/6.0);
            double t11254 = EcPhd_3*c*t11197*(1.0/3.0);
            double t11255 = EcPhd_4*c*t11197*(1.0/3.0);
            double t11256 = EcPhd_3*c*t11211*t11197*(1.0/3.0);
            double t11257 = t11253+t11254+t11255+t11256;
            double t11258 = c*t11219*t11257*t11197*(2.0/3.0);
            double t11259 = EcPld_1*c*t11200*t11224*t11219*t11197*(2.0/3.0);
            v_rho_a_rho_a_[index] = rho_a[index]*(t11250+t11251+t11258+t11259-t11242*(t11243+t11244+t11245+t11249+ \
               t11210*t11207*(EcFhd_2-EcPhd_2-t11215-t11216-t11217+t11246+t11247+t11248)*(2.0/9.0))-t11225*(-t11240+ \
               t11235+t11228)-EcPld_1*c*t11221*t11205*t11219*(4.0/9.0)-EcPld_1*t11220*t11221*t11213*t11214*(1.0/9.0) \
               )*-2.0-rho_a[index]*(t11250+t11251+t11258+t11259-t11242*(t11243+t11244+t11245+t11249-t11210*t11207* \
               (EcFhd_2-EcPhd_2+t11246+t11247+t11248-EcPhd_1*t11211-EcPhd_4*c*t11198-EcPhd_3*c*t11211*t11198)*(2.0/ \
               9.0))+t11225*(t11240+t11235-t11228)-EcPld_1*c*t11221*t11205*t11219*(4.0/9.0)-EcPld_1*t11220*t11221* \
               t11213*t11214*(1.0/9.0))*2.0-t11242*t11257*4.0+EcPld_1*t11200*t11224*t11225*4.0+c*t11218*t11219*t11197* \
               (4.0/3.0)-EcPld_1*c*t11221*t11219*t11197*(4.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void PZ81_C_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t9922 = rho_a[index]+rho_b[index];
            double t9923 = 1/pow(t9922,1.0/3.0);
            double t9924 = 1/t9922;
            double t9925 = rho_a[index]-rho_b[index];
            double t9926 = t9924*t9925;
            double t9927 = c*t9923;
            double t9928 = log(t9927);
            double t9929 = EcPhd_1*t9928;
            double t9930 = two_13*2.0;
            double t9931 = t9930-2.0;
            double t9932 = 1/t9931;
            double t9933 = sqrt(t9927);
            double t9934 = EcPld_2*t9933;
            double t9935 = EcPld_3*c*t9923;
            double t9936 = t9934+t9935+1.0;
            double t9937 = 1/t9936;
            double t9938 = EcPld_1*t9937;
            double t9939 = t9926+1.0;
            double t9940 = pow(t9939,4.0/3.0);
            double t9941 = -t9926+1.0;
            double t9942 = pow(t9941,4.0/3.0);
            double t9943 = t9940+t9942-2.0;
            functional_[index] = t9922*( ( (-c*t9923+1.0 > 0.0) ? 1.0*(EcPhd_2+t9929+t9932*t9943*(EcFhd_2-EcPhd_2- \
               t9929+EcFhd_1*t9928+EcFhd_4*c*t9923-EcPhd_4*c*t9923+EcFhd_3*c*t9923*t9928-EcPhd_3*c*t9923*t9928)+EcPhd_4* \
               c*t9923+EcPhd_3*c*t9923*t9928) : 0.0 ) + ( (t9927-1.0 > 0.0) ? 1.0*(t9938-t9932*t9943*(t9938-EcFld_1/ \
               (EcFld_2*t9933+EcFld_3*c*t9923+1.0))) : 0.0 ) );
        } else if (rho_a[index] > cutoff_) {
            double t10769 = rho_a[index]+rho_b[index];
            double t10770 = 1/pow(t10769,1.0/3.0);
            double t10771 = c*t10770;
            double t10772 = log(t10771);
            double t10773 = EcPhd_1*t10772;
            double t10774 = pow(2.0,1.0/3.0);
            double t10775 = t10774*2.0;
            double t10776 = t10775-2.0;
            double t10777 = two_13*2.0;
            double t10778 = t10777-2.0;
            double t10779 = 1/t10778;
            double t10780 = sqrt(t10771);
            double t10781 = EcPld_2*t10780;
            double t10782 = EcPld_3*c*t10770;
            double t10783 = t10781+t10782+1.0;
            double t10784 = 1/t10783;
            double t10785 = EcPld_1*t10784;
            functional_[index] = t10769*( ( (-c*t10770+1.0 > 0.0) ? 1.0*(EcPhd_2+t10773+t10776*t10779*(EcFhd_2- \
               EcPhd_2-t10773+EcFhd_1*t10772+EcFhd_4*c*t10770-EcPhd_4*c*t10770+EcFhd_3*c*t10770*t10772-EcPhd_3*c* \
               t10770*t10772)+EcPhd_4*c*t10770+EcPhd_3*c*t10770*t10772) : 0.0 ) + ( (t10771-1.0 > 0.0) ? 1.0*(t10785- \
               t10776*t10779*(t10785-EcFld_1/(EcFld_2*t10780+EcFld_3*c*t10770+1.0))) : 0.0 ) );
        } else if (rho_b[index] > cutoff_) {
            double t10403 = rho_a[index]+rho_b[index];
            double t10404 = 1/pow(t10403,1.0/3.0);
            double t10405 = c*t10404;
            double t10406 = log(t10405);
            double t10407 = EcPhd_1*t10406;
            double t10408 = pow(2.0,1.0/3.0);
            double t10409 = t10408*2.0;
            double t10410 = t10409-2.0;
            double t10411 = two_13*2.0;
            double t10412 = t10411-2.0;
            double t10413 = 1/t10412;
            double t10414 = sqrt(t10405);
            double t10415 = EcPld_2*t10414;
            double t10416 = EcPld_3*c*t10404;
            double t10417 = t10415+t10416+1.0;
            double t10418 = 1/t10417;
            double t10419 = EcPld_1*t10418;
            functional_[index] = t10403*( ( (-c*t10404+1.0 > 0.0) ? 1.0*(EcPhd_2+t10407+t10410*t10413*(EcFhd_2- \
               EcPhd_2-t10407+EcFhd_1*t10406+EcFhd_4*c*t10404-EcPhd_4*c*t10404+EcFhd_3*c*t10404*t10406-EcPhd_3*c* \
               t10404*t10406)+EcPhd_4*c*t10404+EcPhd_3*c*t10404*t10406) : 0.0 ) + ( (t10405-1.0 > 0.0) ? 1.0*(t10419- \
               t10410*t10413*(t10419-EcFld_1/(EcFld_2*t10414+EcFld_3*c*t10404+1.0))) : 0.0 ) );
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t9945 = rho_a[index]+rho_b[index];
            double t9946 = 1/pow(t9945,1.0/3.0);
            double t9947 = 1/t9945;
            double t9948 = rho_a[index]-rho_b[index];
            double t9949 = t9947*t9948;
            double t9950 = c*t9946;
            double t9951 = log(t9950);
            double t9952 = EcPhd_1*t9951;
            double t9953 = 1/pow(t9945,4.0/3.0);
            double t9954 = two_13*2.0;
            double t9955 = t9954-2.0;
            double t9956 = 1/t9955;
            double t9957 = t9949+1.0;
            double t9958 = pow(t9957,4.0/3.0);
            double t9959 = -t9949+1.0;
            double t9960 = pow(t9959,4.0/3.0);
            double t9961 = t9960+t9958-2.0;
            double t9962 = EcPhd_1*t9947*(1.0/3.0);
            double t9963 = EcPhd_3*c*t9953*(1.0/3.0);
            double t9964 = EcPhd_4*c*t9953*(1.0/3.0);
            double t9965 = 1/(t9945*t9945);
            double t9976 = t9965*t9948;
            double t9966 = t9947-t9976;
            double t9967 = EcFhd_1*t9951;
            double t9968 = EcFhd_4*c*t9946;
            double t9969 = EcPhd_4*c*t9946;
            double t9970 = EcFhd_3*c*t9951*t9946;
            double t9971 = EcPhd_3*c*t9951*t9946;
            double t9972 = EcPhd_3*c*t9951*t9953*(1.0/3.0);
            double t9973 = 1/sqrt(t9950);
            double t9974 = sqrt(t9950);
            double t9975 = pow(t9957,1.0/3.0);
            double t9977 = t9966*t9975*(4.0/3.0);
            double t9978 = pow(t9959,1.0/3.0);
            double t9979 = t9977-t9966*t9978*(4.0/3.0);
            double t9980 = EcFld_2*t9974;
            double t9981 = EcFld_3*c*t9946;
            double t9982 = t9980+t9981+1.0;
            double t9983 = EcPld_2*t9974;
            double t9984 = EcPld_3*c*t9946;
            double t9985 = t9983+t9984+1.0;
            double t9986 = EcPld_3*c*t9953*(1.0/3.0);
            double t9987 = EcPld_2*c*t9953*t9973*(1.0/6.0);
            double t9988 = t9986+t9987;
            double t9989 = 1/(t9985*t9985);
            double t9990 = t9950-1.0;
            double t9991 = EcFhd_2-EcPhd_2-t9952+t9970-t9971+t9967+t9968-t9969;
            double t9992 = 0.0 ;
            double t9993 = 1/t9985;
            double t9994 = EcPld_1*t9993;
            double t9995 = 1/t9982;
            double t9998 = EcFld_1*t9995;
            double t9996 = t9994-t9998;
            double t9997 = ( (t9990 > 0.0) ?  1.0 : 0.0 ) ;
            double t9999 = t9994-t9961*t9956*t9996;
            v_rho_a_[index] = -t9945*( ( (-t9950+1.0 > 0.0) ? 1.0*(t9962+t9963+t9972+t9964-t9961*t9956*(t9962+ \
               t9963+t9972+t9964-EcFhd_1*t9947*(1.0/3.0)-EcFhd_3*c*t9953*(1.0/3.0)-EcFhd_4*c*t9953*(1.0/3.0)-EcFhd_3* \
               c*t9951*t9953*(1.0/3.0))-t9991*t9956*t9979) : 0.0 ) -t9997*(t9961*t9956*(EcFld_1*1/(t9982*t9982)*(EcFld_3* \
               c*t9953*(1.0/3.0)+EcFld_2*c*t9953*t9973*(1.0/6.0))-EcPld_1*t9988*t9989)+EcPld_1*t9988*t9989-t9956* \
               t9996*t9979)+c*t9953*t9992*t9999*(1.0/3.0)-c*t9953*t9992*(EcPhd_2+t9952+t9971+t9969+t9961*t9991*t9956) \
               *(1.0/3.0))+t9997*t9999+ ( (-c*t9946+1.0 > 0.0) ? 1.0*(EcPhd_2+t9952+t9971+t9969+t9961*t9956*(EcFhd_2- \
               EcPhd_2-t9952+t9970+t9967+t9968-EcPhd_4*c*t9946-EcPhd_3*c*t9951*t9946)) : 0.0 ) ;
        } else if (rho_a[index] > cutoff_) {
            double t10787 = rho_a[index]+rho_b[index];
            double t10788 = 1/pow(t10787,4.0/3.0);
            double t10789 = 1/pow(t10787,1.0/3.0);
            double t10790 = c*t10789;
            double t10791 = 1/sqrt(t10790);
            double t10792 = sqrt(t10790);
            double t10793 = EcPld_3*c*t10788*(1.0/3.0);
            double t10794 = EcPld_2*c*t10791*t10788*(1.0/6.0);
            double t10795 = t10793+t10794;
            double t10796 = EcPld_2*t10792;
            double t10797 = EcPld_3*c*t10789;
            double t10798 = t10796+t10797+1.0;
            double t10799 = 1/(t10798*t10798);
            double t10800 = EcPld_1*t10795*t10799;
            double t10801 = pow(2.0,1.0/3.0);
            double t10802 = t10801*2.0;
            double t10803 = t10802-2.0;
            double t10804 = two_13*2.0;
            double t10805 = t10804-2.0;
            double t10806 = 1/t10805;
            double t10807 = 1/t10787;
            double t10808 = EcPhd_1*t10807*(1.0/3.0);
            double t10809 = log(t10790);
            double t10810 = EcPhd_3*c*t10788*(1.0/3.0);
            double t10811 = EcPhd_4*c*t10788*(1.0/3.0);
            double t10812 = EcPhd_3*c*t10809*t10788*(1.0/3.0);
            double t10813 = t10790-1.0;
            double t10814 = EcPhd_1*t10809;
            double t10815 = 0.0 ;
            double t10816 = EcFld_2*t10792;
            double t10817 = EcFld_3*c*t10789;
            double t10818 = t10816+t10817+1.0;
            double t10819 = 1/t10798;
            double t10820 = EcPld_1*t10819;
            double t10821 = -t10790+1.0;
            double t10822 = ( (t10821 > 0.0) ?  1.0 : 0.0 ) ;
            double t10823 = EcFhd_1*t10809;
            double t10824 = EcFhd_4*c*t10789;
            double t10825 = EcPhd_4*c*t10789;
            double t10826 = EcFhd_3*c*t10809*t10789;
            double t10827 = EcPhd_3*c*t10809*t10789;
            double t10828 = ( (t10813 > 0.0) ?  1.0 : 0.0 ) ;
            double t10829 = 1/t10818;
            double t10830 = t10820-EcFld_1*t10829;
            double t10831 = t10820-t10803*t10830*t10806;
            v_rho_a_[index] = t10822*(EcPhd_2+t10814+t10825+t10827+t10803*t10806*(EcFhd_2-EcPhd_2-t10814+t10823+ \
               t10824-t10825+t10826-t10827))+t10831*t10828+t10787*(t10828*(t10800-t10803*t10806*(t10800-EcFld_1*1/ \
               (t10818*t10818)*(EcFld_3*c*t10788*(1.0/3.0)+EcFld_2*c*t10791*t10788*(1.0/6.0))))-t10822*(t10810+t10811+ \
               t10812+t10808-t10803*t10806*(t10810+t10811+t10812+t10808-EcFhd_1*t10807*(1.0/3.0)-EcFhd_3*c*t10788* \
               (1.0/3.0)-EcFhd_4*c*t10788*(1.0/3.0)-EcFhd_3*c*t10809*t10788*(1.0/3.0)))-c*t10831*t10815*t10788*(1.0/ \
               3.0)+c*t10815*t10788*(EcPhd_2+t10814+t10825+t10827+t10803*t10806*(EcFhd_2-EcPhd_2-t10814+t10823+t10824+ \
               t10826-EcPhd_4*c*t10789-EcPhd_3*c*t10809*t10789))*(1.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            double t10421 = rho_a[index]+rho_b[index];
            double t10422 = 1/pow(t10421,4.0/3.0);
            double t10423 = 1/pow(t10421,1.0/3.0);
            double t10424 = c*t10423;
            double t10425 = 1/sqrt(t10424);
            double t10426 = sqrt(t10424);
            double t10427 = EcPld_3*c*t10422*(1.0/3.0);
            double t10428 = EcPld_2*c*t10422*t10425*(1.0/6.0);
            double t10429 = t10427+t10428;
            double t10430 = EcPld_2*t10426;
            double t10431 = EcPld_3*c*t10423;
            double t10432 = t10430+t10431+1.0;
            double t10433 = 1/(t10432*t10432);
            double t10434 = EcPld_1*t10433*t10429;
            double t10435 = pow(2.0,1.0/3.0);
            double t10436 = t10435*2.0;
            double t10437 = t10436-2.0;
            double t10438 = two_13*2.0;
            double t10439 = t10438-2.0;
            double t10440 = 1/t10439;
            double t10441 = 1/t10421;
            double t10442 = EcPhd_1*t10441*(1.0/3.0);
            double t10443 = log(t10424);
            double t10444 = EcPhd_3*c*t10422*(1.0/3.0);
            double t10445 = EcPhd_4*c*t10422*(1.0/3.0);
            double t10446 = EcPhd_3*c*t10422*t10443*(1.0/3.0);
            double t10447 = t10424-1.0;
            double t10448 = EcPhd_1*t10443;
            double t10449 = 0.0 ;
            double t10450 = EcFld_2*t10426;
            double t10451 = EcFld_3*c*t10423;
            double t10452 = t10450+t10451+1.0;
            double t10453 = 1/t10432;
            double t10454 = EcPld_1*t10453;
            double t10455 = -t10424+1.0;
            double t10456 = ( (t10455 > 0.0) ?  1.0 : 0.0 ) ;
            double t10457 = EcFhd_1*t10443;
            double t10458 = EcFhd_4*c*t10423;
            double t10459 = EcPhd_4*c*t10423;
            double t10460 = EcFhd_3*c*t10423*t10443;
            double t10461 = EcPhd_3*c*t10423*t10443;
            double t10462 = ( (t10447 > 0.0) ?  1.0 : 0.0 ) ;
            double t10463 = 1/t10452;
            double t10464 = t10454-EcFld_1*t10463;
            double t10465 = t10454-t10440*t10437*t10464;
            v_rho_a_[index] = t10456*(EcPhd_2+t10461+t10448+t10459+t10440*t10437*(EcFhd_2-EcPhd_2+t10460-t10461- \
               t10448+t10457+t10458-t10459))+t10462*t10465+t10421*(t10462*(t10434-t10440*t10437*(t10434-EcFld_1*1/ \
               (t10452*t10452)*(EcFld_3*c*t10422*(1.0/3.0)+EcFld_2*c*t10422*t10425*(1.0/6.0))))-t10456*(t10442+t10444+ \
               t10445+t10446-t10440*t10437*(t10442+t10444+t10445+t10446-EcFhd_1*t10441*(1.0/3.0)-EcFhd_3*c*t10422* \
               (1.0/3.0)-EcFhd_4*c*t10422*(1.0/3.0)-EcFhd_3*c*t10422*t10443*(1.0/3.0)))-c*t10422*t10465*t10449*(1.0/ \
               3.0)+c*t10422*t10449*(EcPhd_2+t10461+t10448+t10459+t10440*t10437*(EcFhd_2-EcPhd_2+t10460-t10448+t10457+ \
               t10458-EcPhd_4*c*t10423-EcPhd_3*c*t10423*t10443))*(1.0/3.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10001 = rho_a[index]+rho_b[index];
            double t10002 = 1/pow(t10001,1.0/3.0);
            double t10003 = 1/t10001;
            double t10004 = rho_a[index]-rho_b[index];
            double t10005 = t10003*t10004;
            double t10006 = c*t10002;
            double t10007 = log(t10006);
            double t10008 = EcPhd_1*t10007;
            double t10009 = 1/pow(t10001,4.0/3.0);
            double t10010 = two_13*2.0;
            double t10011 = t10010-2.0;
            double t10012 = 1/t10011;
            double t10013 = t10005+1.0;
            double t10014 = pow(t10013,4.0/3.0);
            double t10015 = -t10005+1.0;
            double t10016 = pow(t10015,4.0/3.0);
            double t10017 = t10014+t10016-2.0;
            double t10018 = EcPhd_1*t10003*(1.0/3.0);
            double t10019 = EcPhd_3*c*t10009*(1.0/3.0);
            double t10020 = EcPhd_4*c*t10009*(1.0/3.0);
            double t10021 = 1/(t10001*t10001);
            double t10022 = t10021*t10004;
            double t10023 = t10003+t10022;
            double t10024 = EcFhd_1*t10007;
            double t10025 = EcFhd_4*c*t10002;
            double t10026 = EcPhd_4*c*t10002;
            double t10027 = EcFhd_3*c*t10002*t10007;
            double t10028 = EcPhd_3*c*t10002*t10007;
            double t10029 = EcPhd_3*c*t10007*t10009*(1.0/3.0);
            double t10030 = 1/sqrt(t10006);
            double t10031 = sqrt(t10006);
            double t10032 = pow(t10013,1.0/3.0);
            double t10033 = t10023*t10032*(4.0/3.0);
            double t10034 = pow(t10015,1.0/3.0);
            double t10035 = t10033-t10023*t10034*(4.0/3.0);
            double t10036 = EcFld_2*t10031;
            double t10037 = EcFld_3*c*t10002;
            double t10038 = t10036+t10037+1.0;
            double t10039 = EcPld_2*t10031;
            double t10040 = EcPld_3*c*t10002;
            double t10041 = t10040+t10039+1.0;
            double t10042 = EcPld_3*c*t10009*(1.0/3.0);
            double t10043 = EcPld_2*c*t10030*t10009*(1.0/6.0);
            double t10044 = t10042+t10043;
            double t10045 = 1/(t10041*t10041);
            double t10046 = t10006-1.0;
            double t10047 = EcFhd_2-EcPhd_2+t10024+t10025-t10008-t10026+t10027-t10028;
            double t10048 = 0.0 ;
            double t10049 = 1/t10041;
            double t10050 = EcPld_1*t10049;
            double t10051 = 1/t10038;
            double t10054 = EcFld_1*t10051;
            double t10052 = t10050-t10054;
            double t10053 = ( (t10046 > 0.0) ?  1.0 : 0.0 ) ;
            double t10055 = t10050-t10012*t10052*t10017;
            v_rho_b_[index] = -t10001*( ( (-t10006+1.0 > 0.0) ? 1.0*(t10020+t10018+t10019+t10029-t10012*t10017* \
               (t10020+t10018+t10019+t10029-EcFhd_1*t10003*(1.0/3.0)-EcFhd_3*c*t10009*(1.0/3.0)-EcFhd_4*c*t10009* \
               (1.0/3.0)-EcFhd_3*c*t10007*t10009*(1.0/3.0))+t10012*t10035*t10047) : 0.0 ) -t10053*(t10012*t10017* \
               (EcFld_1*1/(t10038*t10038)*(EcFld_3*c*t10009*(1.0/3.0)+EcFld_2*c*t10030*t10009*(1.0/6.0))-EcPld_1* \
               t10044*t10045)+EcPld_1*t10044*t10045+t10012*t10052*t10035)+c*t10009*t10055*t10048*(1.0/3.0)-c*t10009* \
               t10048*(EcPhd_2+t10008+t10026+t10028+t10012*t10017*t10047)*(1.0/3.0))+t10053*t10055+ ( (-c*t10002+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t10008+t10026+t10028+t10012*t10017*(EcFhd_2-EcPhd_2+t10024+t10025-t10008+ \
               t10027-EcPhd_4*c*t10002-EcPhd_3*c*t10002*t10007)) : 0.0 ) ;
        } else if (rho_a[index] > cutoff_) {
            double t10833 = rho_a[index]+rho_b[index];
            double t10834 = 1/pow(t10833,4.0/3.0);
            double t10835 = 1/pow(t10833,1.0/3.0);
            double t10836 = c*t10835;
            double t10837 = 1/sqrt(t10836);
            double t10838 = sqrt(t10836);
            double t10839 = EcPld_3*c*t10834*(1.0/3.0);
            double t10840 = EcPld_2*c*t10834*t10837*(1.0/6.0);
            double t10841 = t10840+t10839;
            double t10842 = EcPld_2*t10838;
            double t10843 = EcPld_3*c*t10835;
            double t10844 = t10842+t10843+1.0;
            double t10845 = 1/(t10844*t10844);
            double t10846 = EcPld_1*t10841*t10845;
            double t10847 = pow(2.0,1.0/3.0);
            double t10848 = t10847*2.0;
            double t10849 = t10848-2.0;
            double t10850 = two_13*2.0;
            double t10851 = t10850-2.0;
            double t10852 = 1/t10851;
            double t10853 = 1/t10833;
            double t10854 = EcPhd_1*t10853*(1.0/3.0);
            double t10855 = log(t10836);
            double t10856 = EcPhd_3*c*t10834*(1.0/3.0);
            double t10857 = EcPhd_4*c*t10834*(1.0/3.0);
            double t10858 = EcPhd_3*c*t10834*t10855*(1.0/3.0);
            double t10859 = t10836-1.0;
            double t10860 = EcPhd_1*t10855;
            double t10861 = 0.0 ;
            double t10862 = EcFld_2*t10838;
            double t10863 = EcFld_3*c*t10835;
            double t10864 = t10862+t10863+1.0;
            double t10865 = 1/t10844;
            double t10866 = EcPld_1*t10865;
            double t10867 = -t10836+1.0;
            double t10868 = ( (t10867 > 0.0) ?  1.0 : 0.0 ) ;
            double t10869 = EcFhd_1*t10855;
            double t10870 = EcFhd_4*c*t10835;
            double t10871 = EcPhd_4*c*t10835;
            double t10872 = EcFhd_3*c*t10835*t10855;
            double t10873 = EcPhd_3*c*t10835*t10855;
            double t10874 = ( (t10859 > 0.0) ?  1.0 : 0.0 ) ;
            double t10875 = 1/t10864;
            double t10876 = t10866-EcFld_1*t10875;
            double t10877 = t10866-t10852*t10849*t10876;
            v_rho_b_[index] = t10868*(EcPhd_2+t10860+t10871+t10873+t10852*t10849*(EcFhd_2-EcPhd_2-t10860+t10870- \
               t10871+t10872-t10873+t10869))+t10874*t10877+t10833*(t10874*(t10846-t10852*t10849*(t10846-EcFld_1*1/ \
               (t10864*t10864)*(EcFld_3*c*t10834*(1.0/3.0)+EcFld_2*c*t10834*t10837*(1.0/6.0))))-t10868*(t10854+t10856+ \
               t10857+t10858-t10852*t10849*(t10854+t10856+t10857+t10858-EcFhd_1*t10853*(1.0/3.0)-EcFhd_3*c*t10834* \
               (1.0/3.0)-EcFhd_4*c*t10834*(1.0/3.0)-EcFhd_3*c*t10834*t10855*(1.0/3.0)))-c*t10834*t10861*t10877*(1.0/ \
               3.0)+c*t10834*t10861*(EcPhd_2+t10860+t10871+t10873+t10852*t10849*(EcFhd_2-EcPhd_2-t10860+t10870+t10872+ \
               t10869-EcPhd_4*c*t10835-EcPhd_3*c*t10835*t10855))*(1.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            double t10467 = rho_a[index]+rho_b[index];
            double t10468 = 1/pow(t10467,4.0/3.0);
            double t10469 = 1/pow(t10467,1.0/3.0);
            double t10470 = c*t10469;
            double t10471 = 1/sqrt(t10470);
            double t10472 = sqrt(t10470);
            double t10473 = EcPld_3*c*t10468*(1.0/3.0);
            double t10474 = EcPld_2*c*t10471*t10468*(1.0/6.0);
            double t10475 = t10473+t10474;
            double t10476 = EcPld_2*t10472;
            double t10477 = EcPld_3*c*t10469;
            double t10478 = t10476+t10477+1.0;
            double t10479 = 1/(t10478*t10478);
            double t10480 = EcPld_1*t10475*t10479;
            double t10481 = pow(2.0,1.0/3.0);
            double t10482 = t10481*2.0;
            double t10483 = t10482-2.0;
            double t10484 = two_13*2.0;
            double t10485 = t10484-2.0;
            double t10486 = 1/t10485;
            double t10487 = 1/t10467;
            double t10488 = EcPhd_1*t10487*(1.0/3.0);
            double t10489 = log(t10470);
            double t10490 = EcPhd_3*c*t10468*(1.0/3.0);
            double t10491 = EcPhd_4*c*t10468*(1.0/3.0);
            double t10492 = EcPhd_3*c*t10468*t10489*(1.0/3.0);
            double t10493 = t10470-1.0;
            double t10494 = EcPhd_1*t10489;
            double t10495 = 0.0 ;
            double t10496 = EcFld_2*t10472;
            double t10497 = EcFld_3*c*t10469;
            double t10498 = t10496+t10497+1.0;
            double t10499 = 1/t10478;
            double t10500 = EcPld_1*t10499;
            double t10501 = -t10470+1.0;
            double t10502 = ( (t10501 > 0.0) ?  1.0 : 0.0 ) ;
            double t10503 = EcFhd_1*t10489;
            double t10504 = EcFhd_4*c*t10469;
            double t10505 = EcPhd_4*c*t10469;
            double t10506 = EcFhd_3*c*t10469*t10489;
            double t10507 = EcPhd_3*c*t10469*t10489;
            double t10508 = ( (t10493 > 0.0) ?  1.0 : 0.0 ) ;
            double t10509 = 1/t10498;
            double t10510 = t10500-EcFld_1*t10509;
            double t10511 = t10500-t10510*t10483*t10486;
            v_rho_b_[index] = t10502*(EcPhd_2+t10505+t10507+t10494+t10483*t10486*(EcFhd_2-EcPhd_2+t10503+t10504- \
               t10505+t10506-t10507-t10494))+t10511*t10508+t10467*(t10508*(t10480-t10483*t10486*(t10480-EcFld_1*1/ \
               (t10498*t10498)*(EcFld_3*c*t10468*(1.0/3.0)+EcFld_2*c*t10471*t10468*(1.0/6.0))))-t10502*(t10490+t10491+ \
               t10492+t10488-t10483*t10486*(t10490+t10491+t10492+t10488-EcFhd_1*t10487*(1.0/3.0)-EcFhd_3*c*t10468* \
               (1.0/3.0)-EcFhd_4*c*t10468*(1.0/3.0)-EcFhd_3*c*t10468*t10489*(1.0/3.0)))-c*t10511*t10468*t10495*(1.0/ \
               3.0)+c*t10468*t10495*(EcPhd_2+t10505+t10507+t10494+t10483*t10486*(EcFhd_2-EcPhd_2+t10503+t10504+t10506- \
               t10494-EcPhd_4*c*t10469-EcPhd_3*c*t10469*t10489))*(1.0/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10062 = rho_a[index]+rho_b[index];
            double t10063 = 1/pow(t10062,4.0/3.0);
            double t10064 = 1/pow(t10062,1.0/3.0);
            double t10065 = c*t10064;
            double t10072 = 1/sqrt(t10065);
            double t10074 = EcPld_3*c*t10063*(1.0/3.0);
            double t10075 = EcPld_2*c*t10063*t10072*(1.0/6.0);
            double t10066 = t10074+t10075;
            double t10067 = 1/t10062;
            double t10068 = rho_a[index]-rho_b[index];
            double t10069 = t10067*t10068;
            double t10070 = 1/(t10062*t10062);
            double t10107 = t10070*t10068;
            double t10071 = -t10107+t10067;
            double t10073 = sqrt(t10065);
            double t10076 = EcPld_2*t10073;
            double t10077 = EcPld_3*c*t10064;
            double t10078 = t10076+t10077+1.0;
            double t10079 = two_13*2.0;
            double t10080 = t10079-2.0;
            double t10081 = 1/t10080;
            double t10082 = t10069+1.0;
            double t10083 = -t10069+1.0;
            double t10084 = EcFld_3*c*t10063*(1.0/3.0);
            double t10085 = EcFld_2*c*t10063*t10072*(1.0/6.0);
            double t10086 = t10084+t10085;
            double t10087 = EcFld_2*t10073;
            double t10088 = EcFld_3*c*t10064;
            double t10089 = t10087+t10088+1.0;
            double t10090 = t10066*t10066;
            double t10091 = 1/(t10078*t10078*t10078);
            double t10092 = EcPld_1*t10090*t10091*2.0;
            double t10093 = 1/pow(t10062,7.0/3.0);
            double t10094 = 1/(t10089*t10089);
            double t10095 = c*c;
            double t10096 = 1/pow(t10062,8.0/3.0);
            double t10097 = 1/pow(t10065,3.0/2.0);
            double t10098 = 1/(t10078*t10078);
            double t10099 = EcPld_3*c*t10093*(4.0/9.0);
            double t10100 = EcPld_2*c*t10072*t10093*(2.0/9.0);
            double t10101 = t10100+t10099-EcPld_2*t10095*t10096*t10097*(1.0/3.6E1);
            double t10102 = pow(t10082,1.0/3.0);
            double t10103 = pow(t10083,1.0/3.0);
            double t10104 = t10070*2.0;
            double t10105 = 1/(t10062*t10062*t10062);
            double t10109 = t10105*t10068*2.0;
            double t10106 = t10104-t10109;
            double t10108 = t10071*t10071;
            double t10110 = t10103*t10106*(4.0/3.0);
            double t10111 = 1/pow(t10082,2.0/3.0);
            double t10112 = t10111*t10108*(4.0/9.0);
            double t10113 = 1/pow(t10083,2.0/3.0);
            double t10114 = t10113*t10108*(4.0/9.0);
            double t10115 = t10110+t10112+t10114-t10102*t10106*(4.0/3.0);
            double t10116 = log(t10065);
            double t10117 = pow(t10082,4.0/3.0);
            double t10118 = pow(t10083,4.0/3.0);
            double t10119 = t10117+t10118-2.0;
            double t10120 = EcPhd_1*t10070*(1.0/3.0);
            double t10121 = EcPhd_3*c*t10093*(5.0/9.0);
            double t10122 = EcPhd_4*c*t10093*(4.0/9.0);
            double t10123 = t10102*t10071*(4.0/3.0);
            double t10143 = t10103*t10071*(4.0/3.0);
            double t10124 = t10123-t10143;
            double t10125 = EcPhd_3*c*t10116*t10093*(4.0/9.0);
            double t10126 = t10065-1.0;
            double t10127 = 1/t10078;
            double t10128 = EcPld_1*t10127;
            double t10129 = 1/t10089;
            double t10149 = EcFld_1*t10129;
            double t10130 = t10128-t10149;
            double t10131 = EcFhd_1*t10116;
            double t10132 = EcPhd_1*t10116;
            double t10133 = EcFhd_4*c*t10064;
            double t10134 = EcFhd_3*c*t10116*t10064;
            double t10135 = 0.0 ;
            double t10136 = EcFhd_1*t10067*(1.0/3.0);
            double t10137 = EcPhd_1*t10067*(1.0/3.0);
            double t10138 = EcFhd_3*c*t10063*(1.0/3.0);
            double t10139 = EcFhd_4*c*t10063*(1.0/3.0);
            double t10140 = EcPhd_3*c*t10063*(1.0/3.0);
            double t10141 = EcPhd_4*c*t10063*(1.0/3.0);
            double t10142 = EcFhd_3*c*t10116*t10063*(1.0/3.0);
            double t10144 = EcPhd_4*c*t10064;
            double t10145 = EcPhd_3*c*t10116*t10064;
            double t10146 = EcPhd_3*c*t10116*t10063*(1.0/3.0);
            double t10147 = EcFld_1*t10094*t10086;
            double t10150 = EcPld_1*t10066*t10098;
            double t10148 = -t10150+t10147;
            double t10164 = t10130*t10081*t10119;
            double t10151 = t10128-t10164;
            double t10152 = 0.0 ;
            double t10153 = EcFhd_2-EcPhd_2+t10131-t10132+t10133+t10134-t10144-t10145;
            double t10154 = EcPld_1*t10101*t10098;
            double t10155 = t10140+t10141-t10142-t10136+t10137+t10146-t10138-t10139;
            double t10156 = t10081*t10153*t10119;
            double t10157 = EcPhd_2+t10132+t10144+t10145+t10156;
            double t10158 = -t10065+1.0;
            double t10159 = ( (t10158 > 0.0) ?  1.0 : 0.0 ) ;
            double t10160 = t10140+t10141+t10137+t10146-t10124*t10081*t10153-t10081*t10119*t10155;
            double t10161 = ( (t10126 > 0.0) ?  1.0 : 0.0 ) ;
            double t10162 = t10081*t10119*t10148;
            double t10163 = t10150+t10162-t10130*t10124*t10081;
            v_rho_a_rho_a_[index] = t10062*(t10161*(-t10154+t10092+t10081*t10119*(t10154-t10092+EcFld_1*(t10086* \
               t10086)*1/(t10089*t10089*t10089)*2.0-EcFld_1*t10094*(EcFld_3*c*t10093*(4.0/9.0)-EcFld_2*t10095*t10096* \
               t10097*(1.0/3.6E1)+EcFld_2*c*t10072*t10093*(2.0/9.0)))-t10130*t10115*t10081+t10124*t10081*t10148*2.0) \
               +t10159*(t10120+t10121+t10122+t10125-t10081*t10119*(t10120+t10121+t10122+t10125-EcFhd_1*t10070*(1.0/ \
               3.0)-EcFhd_3*c*t10093*(5.0/9.0)-EcFhd_4*c*t10093*(4.0/9.0)-EcFhd_3*c*t10116*t10093*(4.0/9.0))+t10115* \
               t10081*t10153+t10124*t10081*t10155*2.0)-c*t10160*t10063*t10135*(2.0/3.0)+c*t10151*t10135*t10093*(4.0/ \
               9.0)-c*t10063*t10135*t10163*(2.0/3.0)-c*t10135*t10093*t10157*(4.0/9.0)+t10151*t10152*t10095*t10096* \
               (1.0/9.0)-t10152*t10157*t10095*t10096*(1.0/9.0))+t10161*t10163*2.0-t10160*t10159*2.0-c*t10151*t10063* \
               t10135*(2.0/3.0)+c*t10063*t10135*t10157*(2.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t10884 = rho_a[index]+rho_b[index];
            double t10885 = 1/pow(t10884,4.0/3.0);
            double t10886 = 1/pow(t10884,1.0/3.0);
            double t10887 = c*t10886;
            double t10888 = 1/sqrt(t10887);
            double t10889 = sqrt(t10887);
            double t10890 = EcPld_3*c*t10885*(1.0/3.0);
            double t10891 = EcPld_2*c*t10885*t10888*(1.0/6.0);
            double t10892 = t10890+t10891;
            double t10893 = EcPld_2*t10889;
            double t10894 = EcPld_3*c*t10886;
            double t10895 = t10893+t10894+1.0;
            double t10896 = 1/(t10895*t10895);
            double t10897 = EcPld_1*t10892*t10896;
            double t10898 = t10887-1.0;
            double t10899 = ( (t10898 > 0.0) ?  1.0 : 0.0 ) ;
            double t10900 = pow(2.0,1.0/3.0);
            double t10901 = t10900*2.0;
            double t10902 = t10901-2.0;
            double t10903 = two_13*2.0;
            double t10904 = t10903-2.0;
            double t10905 = 1/t10904;
            double t10906 = EcFld_3*c*t10885*(1.0/3.0);
            double t10907 = EcFld_2*c*t10885*t10888*(1.0/6.0);
            double t10908 = t10906+t10907;
            double t10909 = EcFld_2*t10889;
            double t10910 = EcFld_3*c*t10886;
            double t10911 = t10910+t10909+1.0;
            double t10912 = t10892*t10892;
            double t10913 = 1/(t10895*t10895*t10895);
            double t10914 = EcPld_1*t10912*t10913*2.0;
            double t10915 = 1/pow(t10884,7.0/3.0);
            double t10916 = 1/(t10911*t10911);
            double t10917 = c*c;
            double t10918 = 1/pow(t10884,8.0/3.0);
            double t10919 = 1/pow(t10887,3.0/2.0);
            double t10920 = EcPld_3*c*t10915*(4.0/9.0);
            double t10921 = EcPld_2*c*t10915*t10888*(2.0/9.0);
            double t10922 = t10920+t10921-EcPld_2*t10917*t10918*t10919*(1.0/3.6E1);
            double t10923 = EcPld_1*t10922*t10896;
            double t10924 = 1/(t10884*t10884);
            double t10925 = EcPhd_1*t10924*(1.0/3.0);
            double t10926 = log(t10887);
            double t10927 = EcPhd_3*c*t10915*(5.0/9.0);
            double t10928 = EcPhd_4*c*t10915*(4.0/9.0);
            double t10929 = EcPhd_3*c*t10915*t10926*(4.0/9.0);
            double t10930 = 1/t10895;
            double t10931 = EcPld_1*t10930;
            double t10932 = t10897-EcFld_1*t10916*t10908;
            double t10933 = t10897-t10902*t10905*t10932;
            double t10934 = 0.0 ;
            double t10935 = EcPhd_1*t10926;
            double t10936 = 1/t10884;
            double t10937 = EcPhd_1*t10936*(1.0/3.0);
            double t10938 = EcPhd_3*c*t10885*(1.0/3.0);
            double t10939 = EcPhd_4*c*t10885*(1.0/3.0);
            double t10940 = EcPhd_3*c*t10926*t10885*(1.0/3.0);
            double t10941 = 1/t10911;
            double t10957 = EcFld_1*t10941;
            double t10942 = t10931-t10957;
            double t10958 = t10902*t10905*t10942;
            double t10943 = t10931-t10958;
            double t10944 = 0.0 ;
            double t10945 = EcFhd_1*t10926;
            double t10946 = EcFhd_4*c*t10886;
            double t10947 = EcPhd_4*c*t10886;
            double t10948 = EcFhd_3*c*t10926*t10886;
            double t10949 = EcPhd_3*c*t10926*t10886;
            double t10950 = EcFhd_2-EcPhd_2-t10935+t10945+t10946-t10947+t10948-t10949;
            double t10951 = t10902*t10905*t10950;
            double t10952 = EcPhd_2+t10951+t10935+t10947+t10949;
            double t10953 = -t10887+1.0;
            double t10954 = ( (t10953 > 0.0) ?  1.0 : 0.0 ) ;
            double t10955 = t10940+t10937+t10938+t10939-EcFhd_1*t10936*(1.0/3.0)-EcFhd_3*c*t10885*(1.0/3.0)-EcFhd_4* \
               c*t10885*(1.0/3.0)-EcFhd_3*c*t10926*t10885*(1.0/3.0);
            double t10956 = t10940+t10937+t10938+t10939-t10902*t10905*t10955;
            v_rho_a_rho_a_[index] = -t10884*(-t10954*(t10925+t10927+t10928+t10929-t10902*t10905*(t10925+t10927+ \
               t10928+t10929-EcFhd_1*t10924*(1.0/3.0)-EcFhd_3*c*t10915*(5.0/9.0)-EcFhd_4*c*t10915*(4.0/9.0)-EcFhd_3* \
               c*t10915*t10926*(4.0/9.0)))+t10899*(-t10914+t10923+t10902*t10905*(t10914-t10923-EcFld_1*1/(t10911* \
               t10911*t10911)*(t10908*t10908)*2.0+EcFld_1*t10916*(EcFld_3*c*t10915*(4.0/9.0)-EcFld_2*t10917*t10918* \
               t10919*(1.0/3.6E1)+EcFld_2*c*t10915*t10888*(2.0/9.0))))-c*t10915*t10934*t10943*(4.0/9.0)+c*t10915* \
               t10934*t10952*(4.0/9.0)+c*t10933*t10934*t10885*(2.0/3.0)+c*t10934*t10956*t10885*(2.0/3.0)-t10943*t10917* \
               t10944*t10918*(1.0/9.0)+t10952*t10917*t10944*t10918*(1.0/9.0))-t10954*t10956*2.0+t10933*t10899*2.0- \
               c*t10934*t10943*t10885*(2.0/3.0)+c*t10934*t10952*t10885*(2.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t10518 = rho_a[index]+rho_b[index];
            double t10519 = 1/pow(t10518,4.0/3.0);
            double t10520 = 1/pow(t10518,1.0/3.0);
            double t10521 = c*t10520;
            double t10522 = 1/sqrt(t10521);
            double t10523 = sqrt(t10521);
            double t10524 = EcPld_3*c*t10519*(1.0/3.0);
            double t10525 = EcPld_2*c*t10522*t10519*(1.0/6.0);
            double t10526 = t10524+t10525;
            double t10527 = EcPld_2*t10523;
            double t10528 = EcPld_3*c*t10520;
            double t10529 = t10527+t10528+1.0;
            double t10530 = 1/(t10529*t10529);
            double t10531 = EcPld_1*t10530*t10526;
            double t10532 = t10521-1.0;
            double t10533 = ( (t10532 > 0.0) ?  1.0 : 0.0 ) ;
            double t10534 = pow(2.0,1.0/3.0);
            double t10535 = t10534*2.0;
            double t10536 = t10535-2.0;
            double t10537 = two_13*2.0;
            double t10538 = t10537-2.0;
            double t10539 = 1/t10538;
            double t10540 = EcFld_3*c*t10519*(1.0/3.0);
            double t10541 = EcFld_2*c*t10522*t10519*(1.0/6.0);
            double t10542 = t10540+t10541;
            double t10543 = EcFld_2*t10523;
            double t10544 = EcFld_3*c*t10520;
            double t10545 = t10543+t10544+1.0;
            double t10546 = t10526*t10526;
            double t10547 = 1/(t10529*t10529*t10529);
            double t10548 = EcPld_1*t10546*t10547*2.0;
            double t10549 = 1/pow(t10518,7.0/3.0);
            double t10550 = 1/(t10545*t10545);
            double t10551 = c*c;
            double t10552 = 1/pow(t10518,8.0/3.0);
            double t10553 = 1/pow(t10521,3.0/2.0);
            double t10554 = EcPld_3*c*t10549*(4.0/9.0);
            double t10555 = EcPld_2*c*t10522*t10549*(2.0/9.0);
            double t10556 = t10554+t10555-EcPld_2*t10551*t10552*t10553*(1.0/3.6E1);
            double t10557 = EcPld_1*t10530*t10556;
            double t10558 = 1/(t10518*t10518);
            double t10559 = EcPhd_1*t10558*(1.0/3.0);
            double t10560 = log(t10521);
            double t10561 = EcPhd_3*c*t10549*(5.0/9.0);
            double t10562 = EcPhd_4*c*t10549*(4.0/9.0);
            double t10563 = EcPhd_3*c*t10560*t10549*(4.0/9.0);
            double t10564 = 1/t10529;
            double t10565 = EcPld_1*t10564;
            double t10566 = t10531-EcFld_1*t10550*t10542;
            double t10567 = t10531-t10536*t10539*t10566;
            double t10568 = 0.0 ;
            double t10569 = EcPhd_1*t10560;
            double t10570 = 1/t10518;
            double t10571 = EcPhd_1*t10570*(1.0/3.0);
            double t10572 = EcPhd_3*c*t10519*(1.0/3.0);
            double t10573 = EcPhd_4*c*t10519*(1.0/3.0);
            double t10574 = EcPhd_3*c*t10560*t10519*(1.0/3.0);
            double t10575 = 1/t10545;
            double t10591 = EcFld_1*t10575;
            double t10576 = -t10591+t10565;
            double t10577 = t10565-t10536*t10539*t10576;
            double t10578 = 0.0 ;
            double t10579 = EcFhd_1*t10560;
            double t10580 = EcFhd_4*c*t10520;
            double t10581 = EcPhd_4*c*t10520;
            double t10582 = EcFhd_3*c*t10520*t10560;
            double t10583 = EcPhd_3*c*t10520*t10560;
            double t10584 = EcFhd_2-EcPhd_2+t10580-t10581+t10582-t10583-t10569+t10579;
            double t10585 = t10536*t10539*t10584;
            double t10586 = EcPhd_2+t10581+t10583+t10585+t10569;
            double t10587 = -t10521+1.0;
            double t10588 = ( (t10587 > 0.0) ?  1.0 : 0.0 ) ;
            double t10589 = t10571+t10572+t10573+t10574-EcFhd_1*t10570*(1.0/3.0)-EcFhd_3*c*t10519*(1.0/3.0)-EcFhd_4* \
               c*t10519*(1.0/3.0)-EcFhd_3*c*t10560*t10519*(1.0/3.0);
            double t10590 = t10571+t10572+t10573+t10574-t10536*t10539*t10589;
            v_rho_a_rho_a_[index] = -t10518*(-t10588*(t10561+t10562+t10563+t10559-t10536*t10539*(t10561+t10562+ \
               t10563+t10559-EcFhd_1*t10558*(1.0/3.0)-EcFhd_3*c*t10549*(5.0/9.0)-EcFhd_4*c*t10549*(4.0/9.0)-EcFhd_3* \
               c*t10560*t10549*(4.0/9.0)))+t10533*(-t10548+t10557+t10536*t10539*(t10548-t10557-EcFld_1*(t10542*t10542) \
               *1/(t10545*t10545*t10545)*2.0+EcFld_1*t10550*(EcFld_3*c*t10549*(4.0/9.0)-EcFld_2*t10551*t10552*t10553* \
               (1.0/3.6E1)+EcFld_2*c*t10522*t10549*(2.0/9.0))))+c*t10590*t10519*t10568*(2.0/3.0)+c*t10519*t10567* \
               t10568*(2.0/3.0)-c*t10549*t10568*t10577*(4.0/9.0)+c*t10549*t10568*t10586*(4.0/9.0)-t10551*t10552*t10577* \
               t10578*(1.0/9.0)+t10551*t10552*t10586*t10578*(1.0/9.0))+t10533*t10567*2.0-t10590*t10588*2.0+c*t10519* \
               t10568*t10586*(2.0/3.0)-c*t10519*t10568*(t10565+t10536*t10539*(t10591-t10565))*(2.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10166 = rho_a[index]+rho_b[index];
            double t10167 = rho_a[index]-rho_b[index];
            double t10168 = 1/t10166;
            double t10169 = t10167*t10168;
            double t10170 = 1/(t10166*t10166*t10166);
            double t10171 = t10169+1.0;
            double t10172 = 1/(t10166*t10166);
            double t10173 = t10172*t10167;
            double t10174 = -t10169+1.0;
            double t10175 = t10173+t10168;
            double t10176 = t10173-t10168;
            double t10177 = 1/pow(t10166,1.0/3.0);
            double t10178 = c*t10177;
            double t10179 = log(t10178);
            double t10180 = 1/pow(t10166,7.0/3.0);
            double t10181 = two_13*2.0;
            double t10182 = t10181-2.0;
            double t10183 = 1/t10182;
            double t10184 = EcPhd_1*t10172*(1.0/3.0);
            double t10185 = EcPhd_3*c*t10180*(5.0/9.0);
            double t10186 = EcPhd_4*c*t10180*(4.0/9.0);
            double t10187 = pow(t10171,1.0/3.0);
            double t10188 = pow(t10174,1.0/3.0);
            double t10189 = 1/pow(t10166,4.0/3.0);
            double t10190 = EcFhd_1*t10168*(1.0/3.0);
            double t10191 = EcFhd_3*c*t10189*(1.0/3.0);
            double t10192 = EcFhd_4*c*t10189*(1.0/3.0);
            double t10193 = EcFhd_3*c*t10179*t10189*(1.0/3.0);
            double t10245 = EcPhd_1*t10168*(1.0/3.0);
            double t10246 = EcPhd_3*c*t10189*(1.0/3.0);
            double t10247 = EcPhd_4*c*t10189*(1.0/3.0);
            double t10248 = EcPhd_3*c*t10179*t10189*(1.0/3.0);
            double t10194 = t10190+t10191-t10245+t10192-t10246+t10193-t10247-t10248;
            double t10195 = EcPhd_3*c*t10180*t10179*(4.0/9.0);
            double t10199 = 1/sqrt(t10178);
            double t10201 = EcPld_3*c*t10189*(1.0/3.0);
            double t10202 = EcPld_2*c*t10189*t10199*(1.0/6.0);
            double t10196 = t10201+t10202;
            double t10197 = t10175*t10187*(4.0/3.0);
            double t10249 = t10175*t10188*(4.0/3.0);
            double t10198 = -t10249+t10197;
            double t10200 = sqrt(t10178);
            double t10203 = EcPld_2*t10200;
            double t10204 = EcPld_3*c*t10177;
            double t10205 = t10203+t10204+1.0;
            double t10206 = t10176*t10187*(4.0/3.0);
            double t10207 = EcFld_3*c*t10189*(1.0/3.0);
            double t10208 = EcFld_2*c*t10189*t10199*(1.0/6.0);
            double t10209 = t10207+t10208;
            double t10210 = EcFld_2*t10200;
            double t10211 = EcFld_3*c*t10177;
            double t10212 = t10210+t10211+1.0;
            double t10213 = 1/(t10212*t10212);
            double t10214 = EcFld_1*t10213*t10209;
            double t10215 = 1/(t10205*t10205);
            double t10254 = EcPld_1*t10215*t10196;
            double t10216 = t10214-t10254;
            double t10261 = t10176*t10188*(4.0/3.0);
            double t10217 = t10206-t10261;
            double t10218 = pow(t10171,4.0/3.0);
            double t10219 = pow(t10174,4.0/3.0);
            double t10220 = t10218+t10219-2.0;
            double t10221 = t10196*t10196;
            double t10222 = 1/(t10205*t10205*t10205);
            double t10223 = EcPld_1*t10221*t10222*2.0;
            double t10224 = c*c;
            double t10225 = 1/pow(t10166,8.0/3.0);
            double t10226 = 1/pow(t10178,3.0/2.0);
            double t10227 = EcPld_3*c*t10180*(4.0/9.0);
            double t10228 = EcPld_2*c*t10180*t10199*(2.0/9.0);
            double t10229 = t10227+t10228-EcPld_2*t10224*t10225*t10226*(1.0/3.6E1);
            double t10230 = t10170*t10167*t10187*(8.0/3.0);
            double t10231 = 1/pow(t10171,2.0/3.0);
            double t10232 = t10231*t10175*t10176*(4.0/9.0);
            double t10233 = 1/pow(t10174,2.0/3.0);
            double t10234 = t10233*t10175*t10176*(4.0/9.0);
            double t10235 = t10178-1.0;
            double t10236 = 1/t10205;
            double t10237 = EcPld_1*t10236;
            double t10238 = 1/t10212;
            double t10255 = EcFld_1*t10238;
            double t10239 = t10237-t10255;
            double t10240 = EcFhd_1*t10179;
            double t10241 = EcPhd_1*t10179;
            double t10242 = EcFhd_4*c*t10177;
            double t10243 = EcFhd_3*c*t10177*t10179;
            double t10244 = 0.0 ;
            double t10250 = EcPhd_4*c*t10177;
            double t10251 = EcPhd_3*c*t10177*t10179;
            double t10252 = t10220*t10183*t10194;
            double t10253 = EcFhd_2-EcPhd_2+t10240-t10241-t10250+t10242-t10251+t10243;
            double t10256 = t10220*t10216*t10183;
            double t10271 = t10220*t10183*t10239;
            double t10257 = -t10271+t10237;
            double t10258 = 0.0 ;
            double t10259 = EcPld_1*t10215*t10229;
            double t10260 = t10230+t10232+t10234-t10170*t10167*t10188*(8.0/3.0);
            double t10262 = t10220*t10253*t10183;
            double t10263 = EcPhd_2+t10241+t10250+t10251+t10262;
            double t10264 = -t10178+1.0;
            double t10265 = ( (t10264 > 0.0) ?  1.0 : 0.0 ) ;
            double t10266 = t10253*t10183*t10198;
            double t10267 = t10252+t10245+t10246+t10247+t10248+t10266;
            double t10268 = t10217*t10253*t10183;
            double t10269 = t10252+t10245+t10246+t10247+t10248+t10268;
            double t10270 = ( (t10235 > 0.0) ?  1.0 : 0.0 ) ;
            v_rho_a_rho_b_[index] = t10270*(t10254+t10256+t10183*t10198*(t10237-t10255))-t10265*t10267-t10265* \
               t10269+t10270*(t10254+t10256+t10183*(t10206-t10188*(t10173-t10168)*(4.0/3.0))*(t10237-t10255))-t10166* \
               (-t10265*(t10184+t10185+t10186+t10195-t10220*t10183*(t10184+t10185+t10186+t10195-EcFhd_1*t10172*(1.0/ \
               3.0)-EcFhd_3*c*t10180*(5.0/9.0)-EcFhd_4*c*t10180*(4.0/9.0)-EcFhd_3*c*t10180*t10179*(4.0/9.0))+t10260* \
               t10253*t10183+t10217*t10183*t10194+t10183*t10194*t10198)+t10270*(-t10223+t10259+t10220*t10183*(t10223- \
               t10259-EcFld_1*1/(t10212*t10212*t10212)*(t10209*t10209)*2.0+EcFld_1*t10213*(EcFld_3*c*t10180*(4.0/ \
               9.0)-EcFld_2*t10224*t10225*t10226*(1.0/3.6E1)+EcFld_2*c*t10180*t10199*(2.0/9.0)))+t10216*t10217*t10183+ \
               t10260*t10183*t10239+t10216*t10183*t10198)+c*t10180*t10244*t10263*(4.0/9.0)-c*t10180*t10244*t10257* \
               (4.0/9.0)+c*t10244*t10267*t10189*(1.0/3.0)+c*t10244*t10269*t10189*(1.0/3.0)+t10224*t10225*t10263*t10258* \
               (1.0/9.0)-t10224*t10225*t10257*t10258*(1.0/9.0)+c*t10244*t10189*(t10254+t10256+t10217*t10183*t10239) \
               *(1.0/3.0)+c*t10244*t10189*(t10254+t10256+t10183*t10239*t10198)*(1.0/3.0))+c*t10244*t10263*t10189* \
               (2.0/3.0)-c*t10244*t10257*t10189*(2.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t10960 = rho_a[index]+rho_b[index];
            double t10961 = 1/pow(t10960,4.0/3.0);
            double t10962 = 1/pow(t10960,1.0/3.0);
            double t10963 = c*t10962;
            double t10964 = 1/sqrt(t10963);
            double t10965 = sqrt(t10963);
            double t10966 = EcPld_3*c*t10961*(1.0/3.0);
            double t10967 = EcPld_2*c*t10961*t10964*(1.0/6.0);
            double t10968 = t10966+t10967;
            double t10969 = EcPld_2*t10965;
            double t10970 = EcPld_3*c*t10962;
            double t10971 = t10970+t10969+1.0;
            double t10972 = 1/(t10971*t10971);
            double t10973 = EcPld_1*t10972*t10968;
            double t10974 = t10963-1.0;
            double t10975 = ( (t10974 > 0.0) ?  1.0 : 0.0 ) ;
            double t10976 = pow(2.0,1.0/3.0);
            double t10977 = t10976*2.0;
            double t10978 = t10977-2.0;
            double t10979 = two_13*2.0;
            double t10980 = t10979-2.0;
            double t10981 = 1/t10980;
            double t10982 = EcFld_3*c*t10961*(1.0/3.0);
            double t10983 = EcFld_2*c*t10961*t10964*(1.0/6.0);
            double t10984 = t10982+t10983;
            double t10985 = EcFld_2*t10965;
            double t10986 = EcFld_3*c*t10962;
            double t10987 = t10985+t10986+1.0;
            double t10988 = t10968*t10968;
            double t10989 = 1/(t10971*t10971*t10971);
            double t10990 = EcPld_1*t10988*t10989*2.0;
            double t10991 = 1/pow(t10960,7.0/3.0);
            double t10992 = 1/(t10987*t10987);
            double t10993 = c*c;
            double t10994 = 1/pow(t10960,8.0/3.0);
            double t10995 = 1/pow(t10963,3.0/2.0);
            double t10996 = EcPld_3*c*t10991*(4.0/9.0);
            double t10997 = EcPld_2*c*t10964*t10991*(2.0/9.0);
            double t10998 = t10996+t10997-EcPld_2*t10993*t10994*t10995*(1.0/3.6E1);
            double t10999 = EcPld_1*t10972*t10998;
            double t11000 = 1/(t10960*t10960);
            double t11001 = EcPhd_1*t11000*(1.0/3.0);
            double t11002 = log(t10963);
            double t11003 = EcPhd_3*c*t10991*(5.0/9.0);
            double t11004 = EcPhd_4*c*t10991*(4.0/9.0);
            double t11005 = EcPhd_3*c*t10991*t11002*(4.0/9.0);
            double t11006 = 1/t10971;
            double t11007 = EcPld_1*t11006;
            double t11008 = t10973-EcFld_1*t10992*t10984;
            double t11009 = t10973-t10981*t10978*t11008;
            double t11010 = 0.0 ;
            double t11011 = EcPhd_1*t11002;
            double t11012 = 1/t10960;
            double t11013 = EcPhd_1*t11012*(1.0/3.0);
            double t11014 = EcPhd_3*c*t10961*(1.0/3.0);
            double t11015 = EcPhd_4*c*t10961*(1.0/3.0);
            double t11016 = EcPhd_3*c*t10961*t11002*(1.0/3.0);
            double t11017 = 1/t10987;
            double t11033 = EcFld_1*t11017;
            double t11018 = -t11033+t11007;
            double t11019 = t11007-t10981*t10978*t11018;
            double t11020 = 0.0 ;
            double t11021 = EcFhd_1*t11002;
            double t11022 = EcFhd_4*c*t10962;
            double t11023 = EcPhd_4*c*t10962;
            double t11024 = EcFhd_3*c*t10962*t11002;
            double t11025 = EcPhd_3*c*t10962*t11002;
            double t11026 = EcFhd_2-EcPhd_2-t11011+t11021+t11022-t11023+t11024-t11025;
            double t11027 = t10981*t10978*t11026;
            double t11028 = EcPhd_2+t11011+t11023+t11025+t11027;
            double t11029 = -t10963+1.0;
            double t11030 = ( (t11029 > 0.0) ?  1.0 : 0.0 ) ;
            double t11031 = t11013+t11014+t11015+t11016-EcFhd_1*t11012*(1.0/3.0)-EcFhd_3*c*t10961*(1.0/3.0)-EcFhd_4* \
               c*t10961*(1.0/3.0)-EcFhd_3*c*t10961*t11002*(1.0/3.0);
            double t11032 = t11013+t11014+t11015+t11016-t10981*t10978*t11031;
            v_rho_a_rho_b_[index] = -t10960*(-t11030*(t11001+t11003+t11004+t11005-t10981*t10978*(t11001+t11003+ \
               t11004+t11005-EcFhd_1*t11000*(1.0/3.0)-EcFhd_3*c*t10991*(5.0/9.0)-EcFhd_4*c*t10991*(4.0/9.0)-EcFhd_3* \
               c*t10991*t11002*(4.0/9.0)))+t10975*(-t10990+t10999+t10981*t10978*(t10990-t10999-EcFld_1*(t10984*t10984) \
               *1/(t10987*t10987*t10987)*2.0+EcFld_1*t10992*(EcFld_3*c*t10991*(4.0/9.0)-EcFld_2*t10993*t10994*t10995* \
               (1.0/3.6E1)+EcFld_2*c*t10964*t10991*(2.0/9.0))))+c*t10961*t11010*t11032*(2.0/3.0)+c*t10961*t11010* \
               t11009*(2.0/3.0)-c*t10991*t11010*t11019*(4.0/9.0)+c*t10991*t11010*t11028*(4.0/9.0)-t10993*t10994*t11020* \
               t11019*(1.0/9.0)+t10993*t10994*t11020*t11028*(1.0/9.0))+t10975*t11009*2.0-t11030*t11032*2.0+c*t10961* \
               t11010*t11028*(2.0/3.0)-c*t10961*t11010*(t11007+t10981*t10978*(t11033-t11007))*(2.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t10593 = rho_a[index]+rho_b[index];
            double t10594 = 1/pow(t10593,4.0/3.0);
            double t10595 = 1/pow(t10593,1.0/3.0);
            double t10596 = c*t10595;
            double t10597 = 1/sqrt(t10596);
            double t10598 = sqrt(t10596);
            double t10599 = EcPld_3*c*t10594*(1.0/3.0);
            double t10600 = EcPld_2*c*t10594*t10597*(1.0/6.0);
            double t10601 = t10600+t10599;
            double t10602 = EcPld_2*t10598;
            double t10603 = EcPld_3*c*t10595;
            double t10604 = t10602+t10603+1.0;
            double t10605 = 1/(t10604*t10604);
            double t10606 = EcPld_1*t10601*t10605;
            double t10607 = t10596-1.0;
            double t10608 = ( (t10607 > 0.0) ?  1.0 : 0.0 ) ;
            double t10609 = pow(2.0,1.0/3.0);
            double t10610 = t10609*2.0;
            double t10611 = t10610-2.0;
            double t10612 = two_13*2.0;
            double t10613 = t10612-2.0;
            double t10614 = 1/t10613;
            double t10615 = EcFld_3*c*t10594*(1.0/3.0);
            double t10616 = EcFld_2*c*t10594*t10597*(1.0/6.0);
            double t10617 = t10615+t10616;
            double t10618 = EcFld_2*t10598;
            double t10619 = EcFld_3*c*t10595;
            double t10620 = t10618+t10619+1.0;
            double t10621 = t10601*t10601;
            double t10622 = 1/(t10604*t10604*t10604);
            double t10623 = EcPld_1*t10621*t10622*2.0;
            double t10624 = 1/pow(t10593,7.0/3.0);
            double t10625 = 1/(t10620*t10620);
            double t10626 = c*c;
            double t10627 = 1/pow(t10593,8.0/3.0);
            double t10628 = 1/pow(t10596,3.0/2.0);
            double t10629 = EcPld_3*c*t10624*(4.0/9.0);
            double t10630 = EcPld_2*c*t10624*t10597*(2.0/9.0);
            double t10631 = t10630+t10629-EcPld_2*t10626*t10627*t10628*(1.0/3.6E1);
            double t10632 = EcPld_1*t10631*t10605;
            double t10633 = 1/(t10593*t10593);
            double t10634 = EcPhd_1*t10633*(1.0/3.0);
            double t10635 = log(t10596);
            double t10636 = EcPhd_3*c*t10624*(5.0/9.0);
            double t10637 = EcPhd_4*c*t10624*(4.0/9.0);
            double t10638 = EcPhd_3*c*t10624*t10635*(4.0/9.0);
            double t10639 = 1/t10604;
            double t10640 = EcPld_1*t10639;
            double t10641 = t10606-EcFld_1*t10625*t10617;
            double t10642 = t10606-t10611*t10614*t10641;
            double t10643 = 0.0 ;
            double t10644 = EcPhd_1*t10635;
            double t10645 = 1/t10593;
            double t10646 = EcPhd_1*t10645*(1.0/3.0);
            double t10647 = EcPhd_3*c*t10594*(1.0/3.0);
            double t10648 = EcPhd_4*c*t10594*(1.0/3.0);
            double t10649 = EcPhd_3*c*t10635*t10594*(1.0/3.0);
            double t10650 = 1/t10620;
            double t10666 = EcFld_1*t10650;
            double t10651 = t10640-t10666;
            double t10667 = t10611*t10614*t10651;
            double t10652 = t10640-t10667;
            double t10653 = 0.0 ;
            double t10654 = EcFhd_1*t10635;
            double t10655 = EcFhd_4*c*t10595;
            double t10656 = EcPhd_4*c*t10595;
            double t10657 = EcFhd_3*c*t10635*t10595;
            double t10658 = EcPhd_3*c*t10635*t10595;
            double t10659 = EcFhd_2-EcPhd_2-t10644+t10654+t10655-t10656+t10657-t10658;
            double t10660 = t10611*t10614*t10659;
            double t10661 = EcPhd_2+t10660+t10644+t10656+t10658;
            double t10662 = -t10596+1.0;
            double t10663 = ( (t10662 > 0.0) ?  1.0 : 0.0 ) ;
            double t10664 = t10646+t10647+t10648+t10649-EcFhd_1*t10645*(1.0/3.0)-EcFhd_3*c*t10594*(1.0/3.0)-EcFhd_4* \
               c*t10594*(1.0/3.0)-EcFhd_3*c*t10635*t10594*(1.0/3.0);
            double t10665 = t10646+t10647+t10648+t10649-t10611*t10614*t10664;
            v_rho_a_rho_b_[index] = -t10593*(-t10663*(t10634+t10636+t10637+t10638-t10611*t10614*(t10634+t10636+ \
               t10637+t10638-EcFhd_1*t10633*(1.0/3.0)-EcFhd_3*c*t10624*(5.0/9.0)-EcFhd_4*c*t10624*(4.0/9.0)-EcFhd_3* \
               c*t10624*t10635*(4.0/9.0)))+t10608*(-t10623+t10632+t10611*t10614*(t10623-t10632-EcFld_1*1/(t10620* \
               t10620*t10620)*(t10617*t10617)*2.0+EcFld_1*t10625*(EcFld_3*c*t10624*(4.0/9.0)-EcFld_2*t10626*t10627* \
               t10628*(1.0/3.6E1)+EcFld_2*c*t10624*t10597*(2.0/9.0))))-c*t10624*t10643*t10652*(4.0/9.0)+c*t10624* \
               t10643*t10661*(4.0/9.0)+c*t10642*t10643*t10594*(2.0/3.0)+c*t10643*t10665*t10594*(2.0/3.0)-t10652*t10626* \
               t10653*t10627*(1.0/9.0)+t10661*t10626*t10653*t10627*(1.0/9.0))+t10642*t10608*2.0-t10663*t10665*2.0- \
               c*t10643*t10652*t10594*(2.0/3.0)+c*t10643*t10661*t10594*(2.0/3.0);
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t10273 = rho_a[index]+rho_b[index];
            double t10274 = 1/pow(t10273,4.0/3.0);
            double t10275 = 1/pow(t10273,1.0/3.0);
            double t10276 = c*t10275;
            double t10284 = 1/sqrt(t10276);
            double t10286 = EcPld_3*c*t10274*(1.0/3.0);
            double t10287 = EcPld_2*c*t10274*t10284*(1.0/6.0);
            double t10277 = t10286+t10287;
            double t10278 = 1/t10273;
            double t10279 = rho_a[index]-rho_b[index];
            double t10280 = t10278*t10279;
            double t10281 = 1/(t10273*t10273);
            double t10282 = t10281*t10279;
            double t10283 = t10282+t10278;
            double t10285 = sqrt(t10276);
            double t10288 = EcPld_2*t10285;
            double t10289 = EcPld_3*c*t10275;
            double t10290 = t10288+t10289+1.0;
            double t10291 = two_13*2.0;
            double t10292 = t10291-2.0;
            double t10293 = 1/t10292;
            double t10294 = t10280+1.0;
            double t10295 = -t10280+1.0;
            double t10296 = EcFld_3*c*t10274*(1.0/3.0);
            double t10297 = EcFld_2*c*t10274*t10284*(1.0/6.0);
            double t10298 = t10296+t10297;
            double t10299 = EcFld_2*t10285;
            double t10300 = EcFld_3*c*t10275;
            double t10301 = t10300+t10299+1.0;
            double t10302 = t10277*t10277;
            double t10303 = 1/(t10290*t10290*t10290);
            double t10304 = EcPld_1*t10302*t10303*2.0;
            double t10305 = 1/pow(t10273,7.0/3.0);
            double t10306 = 1/(t10301*t10301);
            double t10307 = c*c;
            double t10308 = 1/pow(t10273,8.0/3.0);
            double t10309 = 1/pow(t10276,3.0/2.0);
            double t10310 = 1/(t10290*t10290);
            double t10311 = EcPld_3*c*t10305*(4.0/9.0);
            double t10312 = EcPld_2*c*t10305*t10284*(2.0/9.0);
            double t10313 = t10311+t10312-EcPld_2*t10307*t10308*t10309*(1.0/3.6E1);
            double t10314 = pow(t10294,1.0/3.0);
            double t10315 = pow(t10295,1.0/3.0);
            double t10316 = t10281*2.0;
            double t10317 = 1/(t10273*t10273*t10273);
            double t10318 = t10317*t10279*2.0;
            double t10319 = t10316+t10318;
            double t10320 = t10283*t10283;
            double t10321 = t10314*t10319*(4.0/3.0);
            double t10322 = 1/pow(t10294,2.0/3.0);
            double t10323 = t10320*t10322*(4.0/9.0);
            double t10324 = 1/pow(t10295,2.0/3.0);
            double t10325 = t10320*t10324*(4.0/9.0);
            double t10326 = t10321+t10323+t10325-t10315*t10319*(4.0/3.0);
            double t10327 = log(t10276);
            double t10328 = pow(t10294,4.0/3.0);
            double t10329 = pow(t10295,4.0/3.0);
            double t10330 = t10328+t10329-2.0;
            double t10331 = EcPhd_1*t10281*(1.0/3.0);
            double t10332 = EcPhd_3*c*t10305*(5.0/9.0);
            double t10333 = EcPhd_4*c*t10305*(4.0/9.0);
            double t10334 = t10314*t10283*(4.0/3.0);
            double t10354 = t10315*t10283*(4.0/3.0);
            double t10335 = t10334-t10354;
            double t10336 = EcPhd_3*c*t10305*t10327*(4.0/9.0);
            double t10337 = t10276-1.0;
            double t10338 = 1/t10290;
            double t10339 = EcPld_1*t10338;
            double t10340 = 1/t10301;
            double t10359 = EcFld_1*t10340;
            double t10341 = t10339-t10359;
            double t10342 = EcFhd_1*t10327;
            double t10343 = EcPhd_1*t10327;
            double t10344 = EcFhd_4*c*t10275;
            double t10345 = EcFhd_3*c*t10327*t10275;
            double t10346 = 0.0 ;
            double t10347 = EcFhd_1*t10278*(1.0/3.0);
            double t10348 = EcPhd_1*t10278*(1.0/3.0);
            double t10349 = EcFhd_3*c*t10274*(1.0/3.0);
            double t10350 = EcFhd_4*c*t10274*(1.0/3.0);
            double t10351 = EcPhd_3*c*t10274*(1.0/3.0);
            double t10352 = EcPhd_4*c*t10274*(1.0/3.0);
            double t10353 = EcFhd_3*c*t10327*t10274*(1.0/3.0);
            double t10355 = EcPhd_4*c*t10275;
            double t10356 = EcPhd_3*c*t10327*t10275;
            double t10357 = EcFld_1*t10306*t10298;
            double t10360 = EcPld_1*t10310*t10277;
            double t10358 = -t10360+t10357;
            double t10376 = t10330*t10341*t10293;
            double t10361 = t10339-t10376;
            double t10362 = 0.0 ;
            double t10363 = EcFhd_2-EcPhd_2+t10342-t10343+t10344+t10345-t10355-t10356;
            double t10364 = EcPld_1*t10310*t10313;
            double t10365 = t10330*t10363*t10293;
            double t10366 = EcPhd_2+t10343+t10355+t10356+t10365;
            double t10368 = EcPhd_3*c*t10327*t10274*(1.0/3.0);
            double t10367 = t10350-t10351-t10352+t10353+t10347-t10348+t10349-t10368;
            double t10369 = -t10276+1.0;
            double t10370 = ( (t10369 > 0.0) ?  1.0 : 0.0 ) ;
            double t10371 = t10330*t10293*t10367;
            double t10372 = t10335*t10363*t10293;
            double t10373 = t10351+t10352+t10371+t10372+t10348+t10368;
            double t10374 = ( (t10337 > 0.0) ?  1.0 : 0.0 ) ;
            double t10375 = t10330*t10293*t10358;
            v_rho_b_rho_b_[index] = t10374*(t10360+t10375+t10335*t10293*(t10339-t10359))*2.0-t10370*t10373*2.0- \
               t10273*(t10374*(-t10304+t10364+t10330*t10293*(t10304-t10364-EcFld_1*1/(t10301*t10301*t10301)*(t10298* \
               t10298)*2.0+EcFld_1*t10306*(EcFld_3*c*t10305*(4.0/9.0)-EcFld_2*t10307*t10308*t10309*(1.0/3.6E1)+EcFld_2* \
               c*t10305*t10284*(2.0/9.0)))+t10341*t10326*t10293+t10335*t10293*t10358*2.0)-t10370*(t10331+t10332+t10333+ \
               t10336-t10330*t10293*(t10331+t10332+t10333+t10336-EcFhd_1*t10281*(1.0/3.0)-EcFhd_3*c*t10305*(5.0/9.0) \
               -EcFhd_4*c*t10305*(4.0/9.0)-EcFhd_3*c*t10305*t10327*(4.0/9.0))+t10326*t10363*t10293+t10335*t10293* \
               t10367*2.0)-c*t10305*t10361*t10346*(4.0/9.0)+c*t10305*t10346*t10366*(4.0/9.0)+c*t10274*t10346*t10373* \
               (2.0/3.0)-t10307*t10361*t10308*t10362*(1.0/9.0)+t10307*t10308*t10362*t10366*(1.0/9.0)+c*t10274*t10346* \
               (t10360+t10375+t10341*t10335*t10293)*(2.0/3.0))-c*t10361*t10274*t10346*(2.0/3.0)+c*t10274*t10346*t10366* \
               (2.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t11035 = rho_a[index]+rho_b[index];
            double t11036 = 1/pow(t11035,4.0/3.0);
            double t11037 = 1/pow(t11035,1.0/3.0);
            double t11038 = c*t11037;
            double t11039 = 1/sqrt(t11038);
            double t11040 = sqrt(t11038);
            double t11041 = EcPld_3*c*t11036*(1.0/3.0);
            double t11042 = EcPld_2*c*t11036*t11039*(1.0/6.0);
            double t11043 = t11041+t11042;
            double t11044 = EcPld_2*t11040;
            double t11045 = EcPld_3*c*t11037;
            double t11046 = t11044+t11045+1.0;
            double t11047 = 1/(t11046*t11046);
            double t11048 = EcPld_1*t11043*t11047;
            double t11049 = t11038-1.0;
            double t11050 = ( (t11049 > 0.0) ?  1.0 : 0.0 ) ;
            double t11051 = pow(2.0,1.0/3.0);
            double t11052 = t11051*2.0;
            double t11053 = t11052-2.0;
            double t11054 = two_13*2.0;
            double t11055 = t11054-2.0;
            double t11056 = 1/t11055;
            double t11057 = EcFld_3*c*t11036*(1.0/3.0);
            double t11058 = EcFld_2*c*t11036*t11039*(1.0/6.0);
            double t11059 = t11057+t11058;
            double t11060 = EcFld_2*t11040;
            double t11061 = EcFld_3*c*t11037;
            double t11062 = t11060+t11061+1.0;
            double t11063 = t11043*t11043;
            double t11064 = 1/(t11046*t11046*t11046);
            double t11065 = EcPld_1*t11063*t11064*2.0;
            double t11066 = 1/pow(t11035,7.0/3.0);
            double t11067 = 1/(t11062*t11062);
            double t11068 = c*c;
            double t11069 = 1/pow(t11035,8.0/3.0);
            double t11070 = 1/pow(t11038,3.0/2.0);
            double t11071 = EcPld_3*c*t11066*(4.0/9.0);
            double t11072 = EcPld_2*c*t11039*t11066*(2.0/9.0);
            double t11073 = t11071+t11072-EcPld_2*t11070*t11068*t11069*(1.0/3.6E1);
            double t11074 = EcPld_1*t11073*t11047;
            double t11075 = 1/(t11035*t11035);
            double t11076 = EcPhd_1*t11075*(1.0/3.0);
            double t11077 = log(t11038);
            double t11078 = EcPhd_3*c*t11066*(5.0/9.0);
            double t11079 = EcPhd_4*c*t11066*(4.0/9.0);
            double t11080 = EcPhd_3*c*t11066*t11077*(4.0/9.0);
            double t11081 = 1/t11046;
            double t11082 = EcPld_1*t11081;
            double t11083 = t11048-EcFld_1*t11067*t11059;
            double t11084 = t11048-t11053*t11056*t11083;
            double t11085 = 0.0 ;
            double t11086 = EcPhd_1*t11077;
            double t11087 = 1/t11035;
            double t11088 = EcPhd_1*t11087*(1.0/3.0);
            double t11089 = EcPhd_3*c*t11036*(1.0/3.0);
            double t11090 = EcPhd_4*c*t11036*(1.0/3.0);
            double t11091 = EcPhd_3*c*t11036*t11077*(1.0/3.0);
            double t11092 = 1/t11062;
            double t11108 = EcFld_1*t11092;
            double t11093 = -t11108+t11082;
            double t11094 = t11082-t11053*t11056*t11093;
            double t11095 = 0.0 ;
            double t11096 = EcFhd_1*t11077;
            double t11097 = EcFhd_4*c*t11037;
            double t11098 = EcPhd_4*c*t11037;
            double t11099 = EcFhd_3*c*t11037*t11077;
            double t11100 = EcPhd_3*c*t11037*t11077;
            double t11101 = EcFhd_2-EcPhd_2-t11100-t11086+t11096+t11097-t11098+t11099;
            double t11102 = t11101*t11053*t11056;
            double t11103 = EcPhd_2+t11100+t11102+t11086+t11098;
            double t11104 = -t11038+1.0;
            double t11105 = ( (t11104 > 0.0) ?  1.0 : 0.0 ) ;
            double t11106 = t11090+t11091+t11088+t11089-EcFhd_1*t11087*(1.0/3.0)-EcFhd_3*c*t11036*(1.0/3.0)-EcFhd_4* \
               c*t11036*(1.0/3.0)-EcFhd_3*c*t11036*t11077*(1.0/3.0);
            double t11107 = t11090+t11091+t11088+t11089-t11106*t11053*t11056;
            v_rho_b_rho_b_[index] = -t11035*(-t11105*(t11080+t11076+t11078+t11079-t11053*t11056*(t11080+t11076+ \
               t11078+t11079-EcFhd_1*t11075*(1.0/3.0)-EcFhd_3*c*t11066*(5.0/9.0)-EcFhd_4*c*t11066*(4.0/9.0)-EcFhd_3* \
               c*t11066*t11077*(4.0/9.0)))+t11050*(-t11065+t11074+t11053*t11056*(t11065-t11074-EcFld_1*1/(t11062* \
               t11062*t11062)*(t11059*t11059)*2.0+EcFld_1*t11067*(EcFld_3*c*t11066*(4.0/9.0)-EcFld_2*t11070*t11068* \
               t11069*(1.0/3.6E1)+EcFld_2*c*t11039*t11066*(2.0/9.0))))+c*t11103*t11066*t11085*(4.0/9.0)+c*t11107* \
               t11036*t11085*(2.0/3.0)+c*t11036*t11084*t11085*(2.0/3.0)-c*t11066*t11085*t11094*(4.0/9.0)+t11103*t11068* \
               t11095*t11069*(1.0/9.0)-t11094*t11068*t11095*t11069*(1.0/9.0))-t11105*t11107*2.0+t11050*t11084*2.0+ \
               c*t11103*t11036*t11085*(2.0/3.0)-c*t11036*t11085*(t11082+t11053*t11056*(t11108-t11082))*(2.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t10669 = rho_a[index]+rho_b[index];
            double t10670 = 1/pow(t10669,4.0/3.0);
            double t10671 = 1/pow(t10669,1.0/3.0);
            double t10672 = c*t10671;
            double t10673 = 1/sqrt(t10672);
            double t10674 = sqrt(t10672);
            double t10675 = EcPld_3*c*t10670*(1.0/3.0);
            double t10676 = EcPld_2*c*t10670*t10673*(1.0/6.0);
            double t10677 = t10675+t10676;
            double t10678 = EcPld_2*t10674;
            double t10679 = EcPld_3*c*t10671;
            double t10680 = t10678+t10679+1.0;
            double t10681 = 1/(t10680*t10680);
            double t10682 = EcPld_1*t10681*t10677;
            double t10683 = t10672-1.0;
            double t10684 = ( (t10683 > 0.0) ?  1.0 : 0.0 ) ;
            double t10685 = pow(2.0,1.0/3.0);
            double t10686 = t10685*2.0;
            double t10687 = t10686-2.0;
            double t10688 = two_13*2.0;
            double t10689 = t10688-2.0;
            double t10690 = 1/t10689;
            double t10691 = EcFld_3*c*t10670*(1.0/3.0);
            double t10692 = EcFld_2*c*t10670*t10673*(1.0/6.0);
            double t10693 = t10691+t10692;
            double t10694 = EcFld_2*t10674;
            double t10695 = EcFld_3*c*t10671;
            double t10696 = t10694+t10695+1.0;
            double t10697 = t10677*t10677;
            double t10698 = 1/(t10680*t10680*t10680);
            double t10699 = EcPld_1*t10697*t10698*2.0;
            double t10700 = 1/pow(t10669,7.0/3.0);
            double t10701 = 1/(t10696*t10696);
            double t10702 = c*c;
            double t10703 = 1/pow(t10669,8.0/3.0);
            double t10704 = 1/pow(t10672,3.0/2.0);
            double t10705 = EcPld_3*c*t10700*(4.0/9.0);
            double t10706 = EcPld_2*c*t10700*t10673*(2.0/9.0);
            double t10707 = t10705+t10706-EcPld_2*t10702*t10703*t10704*(1.0/3.6E1);
            double t10708 = EcPld_1*t10707*t10681;
            double t10709 = 1/(t10669*t10669);
            double t10710 = EcPhd_1*t10709*(1.0/3.0);
            double t10711 = log(t10672);
            double t10712 = EcPhd_3*c*t10700*(5.0/9.0);
            double t10713 = EcPhd_4*c*t10700*(4.0/9.0);
            double t10714 = EcPhd_3*c*t10700*t10711*(4.0/9.0);
            double t10715 = 1/t10680;
            double t10716 = EcPld_1*t10715;
            double t10717 = t10682-EcFld_1*t10701*t10693;
            double t10718 = t10682-t10690*t10717*t10687;
            double t10719 = 0.0 ;
            double t10720 = EcPhd_1*t10711;
            double t10721 = 1/t10669;
            double t10722 = EcPhd_1*t10721*(1.0/3.0);
            double t10723 = EcPhd_3*c*t10670*(1.0/3.0);
            double t10724 = EcPhd_4*c*t10670*(1.0/3.0);
            double t10725 = EcPhd_3*c*t10711*t10670*(1.0/3.0);
            double t10726 = 1/t10696;
            double t10742 = EcFld_1*t10726;
            double t10727 = -t10742+t10716;
            double t10728 = t10716-t10690*t10727*t10687;
            double t10729 = 0.0 ;
            double t10730 = EcFhd_1*t10711;
            double t10731 = EcFhd_4*c*t10671;
            double t10732 = EcPhd_4*c*t10671;
            double t10733 = EcFhd_3*c*t10711*t10671;
            double t10734 = EcPhd_3*c*t10711*t10671;
            double t10735 = -t10672+1.0;
            double t10736 = ( (t10735 > 0.0) ?  1.0 : 0.0 ) ;
            double t10737 = t10722+t10723+t10724+t10725-EcFhd_1*t10721*(1.0/3.0)-EcFhd_3*c*t10670*(1.0/3.0)-EcFhd_4* \
               c*t10670*(1.0/3.0)-EcFhd_3*c*t10711*t10670*(1.0/3.0);
            double t10738 = t10722+t10723+t10724+t10725-t10690*t10737*t10687;
            double t10739 = EcFhd_2-EcPhd_2-t10720+t10730+t10731-t10732+t10733-t10734;
            double t10740 = t10690*t10739*t10687;
            double t10741 = EcPhd_2+t10720+t10740+t10732+t10734;
            v_rho_b_rho_b_[index] = t10718*t10684*2.0-t10736*t10738*2.0+t10669*(t10736*(t10710+t10712+t10713+ \
               t10714-t10690*t10687*(t10710+t10712+t10713+t10714-EcFhd_1*t10709*(1.0/3.0)-EcFhd_3*c*t10700*(5.0/9.0) \
               -EcFhd_4*c*t10700*(4.0/9.0)-EcFhd_3*c*t10700*t10711*(4.0/9.0)))+t10684*(-t10708+t10699+t10690*t10687* \
               (t10708-t10699+EcFld_1*(t10693*t10693)*1/(t10696*t10696*t10696)*2.0-EcFld_1*t10701*(EcFld_3*c*t10700* \
               (4.0/9.0)-EcFld_2*t10702*t10703*t10704*(1.0/3.6E1)+EcFld_2*c*t10700*t10673*(2.0/9.0))))+c*t10700*t10719* \
               t10728*(4.0/9.0)-c*t10670*t10718*t10719*(2.0/3.0)-c*t10670*t10719*t10738*(2.0/3.0)-t10702*t10703*t10741* \
               t10729*(1.0/9.0)+t10702*t10703*t10728*t10729*(1.0/9.0)-c*t10700*t10719*(EcPhd_2+t10720+t10732+t10734+ \
               t10690*t10687*(EcFhd_2-EcPhd_2-t10720+t10730+t10731+t10733-EcPhd_4*c*t10671-EcPhd_3*c*t10711*t10671) \
               )*(4.0/9.0))+c*t10741*t10670*t10719*(2.0/3.0)-c*t10670*t10719*(t10716+t10690*t10687*(t10742-t10716) \
               )*(2.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

