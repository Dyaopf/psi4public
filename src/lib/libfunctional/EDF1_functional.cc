/**********************************************************
* EDF1_functional.cc: definitions for EDF1_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "EDF1_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

EDF1_Functional::EDF1_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "EDF1";
    description_ = "Empirical Density Function #1";
    citation_ = "R.D. Adamson, P.M.W. Gill, and J.A. Pople, Chem. Phys. Lett., 284, 6-11, 1998";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double d1 = 3.5000000000000001E-03;
    params_.push_back(make_pair("d1",d1));
    double d2 = 4.1999999999999997E-03;
    params_.push_back(make_pair("d2",d2));
    double e0 = 1.0309520000000001E+00;
    params_.push_back(make_pair("e0",e0));
    double e1 = 1.0401700000000000E+01;
    params_.push_back(make_pair("e1",e1));
    double e2 = -8.4479299999999995E+00;
    params_.push_back(make_pair("e2",e2));
    double A = 5.5000000000000000E-02;
    params_.push_back(make_pair("A",A));
    double B = 1.5800000000000000E-01;
    params_.push_back(make_pair("B",B));
    double C = 2.5000000000000000E-01;
    params_.push_back(make_pair("C",C));
    double Dd = 3.5049999999999998E-01;
    params_.push_back(make_pair("Dd",Dd));
    double CFext = 3.6462398978764774E+01;
    params_.push_back(make_pair("CFext",CFext));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
EDF1_Functional::~EDF1_Functional()
{
}
void EDF1_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensityA();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
    }

    double c0 = params_[0].second;
    double d1 = params_[1].second;
    double d2 = params_[2].second;
    double e0 = params_[3].second;
    double e1 = params_[4].second;
    double e2 = params_[5].second;
    double A = params_[6].second;
    double B = params_[7].second;
    double C = params_[8].second;
    double Dd = params_[9].second;
    double CFext = params_[10].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t27040 = sqrt(gamma_aa[index]);
            double t27041 = 1.0/pow(rho_a[index],4.0/3.0);
            double t27042 = 1.0/pow(rho_a[index],8.0/3.0);
            double t27043 = t27040*t27041;
            double t27044 = log(t27043+sqrt(t27043*t27043+1.0));
            double t27045 = rho_a[index]*2.0;
            double t27046 = 1.0/pow(t27045,1.0/3.0);
            double t27047 = Dd*t27046;
            double t27048 = t27047+1.0;
            double t27049 = 1.0/t27048;
            double t27050 = rho_a[index]*rho_a[index];
            functional_[index] = pow(rho_a[index],4.0/3.0)*(-c0*e0+(d1*e1*gamma_aa[index]*t27042)/(d1*t27040* \
               t27041*t27044*6.0+1.0)+(d2*e2*gamma_aa[index]*t27042)/(d2*t27040*t27041*t27044*6.0+1.0))*-2.0-A*rho_a[index]* \
               t27049*2.0-A*B*1.0/pow(t27045,1.1E1/3.0)*t27049*exp(-C*t27046)*(t27050*(CFext*pow(rho_a[index],8.0/ \
               3.0)*2.0-gamma_aa[index]*(C*t27046*(1.0/9.0)+Dd*t27046*t27049*(1.0/9.0)-1.1E1/9.0)+gamma_aa[index]* \
               (C*t27046*(1.0/1.8E1)+Dd*t27046*t27049*(1.0/1.8E1)-5.0/2.0)*2.0-gamma_aa[index]*(C*t27046*(7.0/1.8E1) \
               +Dd*t27046*t27049*(7.0/1.8E1)-4.7E1/1.8E1)*4.0)-gamma_aa[index]*t27050*(2.2E1/3.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t27052 = sqrt(gamma_aa[index]);
            double t27053 = 1.0/pow(rho_a[index],4.0/3.0);
            double t27054 = 1.0/pow(rho_a[index],8.0/3.0);
            double t27055 = t27052*t27053;
            double t27056 = log(t27055+sqrt(t27055*t27055+1.0));
            double t27057 = d1*t27052*t27053*t27056*6.0;
            double t27058 = t27057+1.0;
            double t27059 = 1.0/t27058;
            double t27060 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t27061 = d2*t27052*t27053*t27056*6.0;
            double t27062 = t27061+1.0;
            double t27063 = 1.0/t27062;
            double t27064 = gamma_aa[index]*t27054;
            double t27065 = t27064+1.0;
            double t27066 = 1.0/sqrt(t27065);
            double t27067 = 1.0/pow(rho_a[index],7.0/3.0);
            double t27068 = rho_a[index]*2.0;
            double t27069 = 1.0/pow(t27068,1.0/3.0);
            double t27070 = Dd*t27069;
            double t27071 = t27070+1.0;
            double t27072 = rho_a[index]*rho_a[index];
            double t27073 = 1.0/t27071;
            double t27092 = C*t27069;
            double t27074 = exp(-t27092);
            double t27075 = 1.0/pow(t27068,4.0/3.0);
            double t27076 = 1.0/(t27071*t27071);
            double t27077 = Dd*Dd;
            double t27078 = 1.0/pow(t27068,5.0/3.0);
            double t27079 = C*t27069*(1.0/9.0);
            double t27080 = Dd*t27073*t27069*(1.0/9.0);
            double t27081 = t27080+t27079-1.1E1/9.0;
            double t27082 = gamma_aa[index]*t27081;
            double t27083 = C*t27069*(1.0/1.8E1);
            double t27084 = Dd*t27073*t27069*(1.0/1.8E1);
            double t27085 = t27083+t27084-5.0/2.0;
            double t27086 = C*t27069*(7.0/1.8E1);
            double t27087 = Dd*t27073*t27069*(7.0/1.8E1);
            double t27088 = t27086+t27087-4.7E1/1.8E1;
            double t27089 = gamma_aa[index]*t27088*4.0;
            double t27090 = pow(rho_a[index],8.0/3.0);
            double t27093 = gamma_aa[index]*t27085*2.0;
            double t27094 = CFext*t27090*2.0;
            double t27091 = t27082-t27093-t27094+t27089;
            double t27095 = t27072*t27091;
            double t27096 = gamma_aa[index]*t27072*(2.2E1/3.0);
            double t27097 = t27095+t27096;
            double t27098 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            v_rho_a_[index] = -A*t27073+pow(rho_a[index],4.0/3.0)*(d1*e1*gamma_aa[index]*t27060*t27059*(8.0/3.0) \
               +d2*e2*gamma_aa[index]*t27060*t27063*(8.0/3.0)-d1*e1*gamma_aa[index]*t27054*1.0/(t27058*t27058)*(d1* \
               gamma_aa[index]*t27060*t27066*8.0+d1*t27052*t27056*t27067*8.0)-d2*e2*gamma_aa[index]*1.0/(t27062*t27062) \
               *t27054*(d2*gamma_aa[index]*t27060*t27066*8.0+d2*t27052*t27056*t27067*8.0))-pow(rho_a[index],1.0/3.0) \
               *(-c0*e0+d1*e1*gamma_aa[index]*t27054*t27059+d2*e2*gamma_aa[index]*t27054*t27063)*(4.0/3.0)-A*Dd*t27072* \
               t27076*1.0/pow(t27068,7.0/3.0)*(4.0/3.0)-A*B*t27073*t27074*1.0/pow(t27068,1.4E1/3.0)*t27097*(1.1E1/ \
               3.0)+A*B*t27073*t27074*1.0/pow(t27068,1.1E1/3.0)*(-t27072*(CFext*pow(rho_a[index],5.0/3.0)*(8.0/3.0) \
               +gamma_aa[index]*(C*t27075*(1.0/2.7E1)+Dd*t27073*t27075*(1.0/2.7E1)-t27076*t27077*t27078*(1.0/2.7E1) \
               )-gamma_aa[index]*(C*t27075*(1.0/5.4E1)+Dd*t27073*t27075*(1.0/5.4E1)-t27076*t27077*t27078*(1.0/5.4E1) \
               )*2.0+gamma_aa[index]*(C*t27075*(7.0/5.4E1)+Dd*t27073*t27075*(7.0/5.4E1)-t27076*t27077*t27078*(7.0/ \
               5.4E1))*4.0)+gamma_aa[index]*rho_a[index]*(2.2E1/3.0)+rho_a[index]*t27091)+A*B*C*t27073*t27074*t27097* \
               t27098*(1.0/9.6E1)+A*B*Dd*t27074*t27076*t27097*t27098*(1.0/9.6E1);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t27100 = sqrt(gamma_aa[index]);
                double t27101 = 1.0/pow(rho_a[index],4.0/3.0);
                double t27102 = 1.0/pow(rho_a[index],8.0/3.0);
                double t27103 = t27100*t27101;
                double t27104 = log(t27103+sqrt(t27103*t27103+1.0));
                double t27105 = d1*t27100*t27101*t27104*6.0;
                double t27106 = t27105+1.0;
                double t27107 = gamma_aa[index]*t27102;
                double t27108 = t27107+1.0;
                double t27109 = 1.0/sqrt(t27108);
                double t27110 = 1.0/sqrt(gamma_aa[index]);
                double t27111 = d2*t27100*t27101*t27104*6.0;
                double t27112 = t27111+1.0;
                double t27113 = rho_a[index]*2.0;
                double t27114 = 1.0/pow(t27113,1.0/3.0);
                double t27115 = Dd*t27114;
                double t27116 = t27115+1.0;
                double t27117 = 1.0/t27116;
                double t27118 = rho_a[index]*rho_a[index];
                double t27119 = exp(-C*t27114);
                double t27120 = 1.0/pow(t27113,1.1E1/3.0);
                v_gamma_aa_[index] = pow(rho_a[index],4.0/3.0)*((d1*e1*t27102)/t27106+(d2*e2*t27102)/t27112-d1*e1* \
                   gamma_aa[index]*t27102*1.0/(t27106*t27106)*(d1*t27102*t27109*3.0+d1*t27101*t27110*t27104*3.0)-d2*e2* \
                   gamma_aa[index]*t27102*1.0/(t27112*t27112)*(d2*t27102*t27109*3.0+d2*t27101*t27110*t27104*3.0))*-2.0+ \
                   A*B*t27120*t27117*t27119*(t27118*(1.6E1/3.0)+t27118*(C*t27114*(7.0/9.0)+Dd*t27114*t27117*(7.0/9.0) \
                   -4.7E1/9.0))+A*B*t27120*t27117*t27119*(t27118+t27118*(C*t27114*(7.0/1.8E1)+Dd*t27114*t27117*(7.0/1.8E1) \
                   -1.3E1/1.8E1))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t27123 = sqrt(gamma_aa[index]);
            double t27124 = 1.0/pow(rho_a[index],4.0/3.0);
            double t27125 = 1.0/pow(rho_a[index],8.0/3.0);
            double t27126 = t27123*t27124;
            double t27127 = log(t27126+sqrt(t27126*t27126+1.0));
            double t27128 = d1*t27123*t27124*t27127*6.0;
            double t27129 = t27128+1.0;
            double t27130 = 1.0/t27129;
            double t27131 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t27132 = d2*t27123*t27124*t27127*6.0;
            double t27133 = t27132+1.0;
            double t27134 = 1.0/t27133;
            double t27135 = gamma_aa[index]*t27125;
            double t27136 = t27135+1.0;
            double t27137 = 1.0/sqrt(t27136);
            double t27138 = 1.0/pow(rho_a[index],7.0/3.0);
            double t27139 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t27140 = 1.0/(t27129*t27129);
            double t27141 = d1*gamma_aa[index]*t27131*t27137*8.0;
            double t27142 = d1*t27123*t27127*t27138*8.0;
            double t27143 = t27141+t27142;
            double t27144 = 1.0/(t27133*t27133);
            double t27145 = d2*gamma_aa[index]*t27131*t27137*8.0;
            double t27146 = d2*t27123*t27127*t27138*8.0;
            double t27147 = t27145+t27146;
            double t27148 = gamma_aa[index]*gamma_aa[index];
            double t27149 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t27150 = 1.0/pow(t27136,3.0/2.0);
            double t27151 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t27152 = rho_a[index]*2.0;
            double t27153 = 1.0/pow(t27152,1.0/3.0);
            double t27154 = Dd*t27153;
            double t27155 = t27154+1.0;
            double t27156 = 1.0/(t27155*t27155);
            double t27157 = rho_a[index]*rho_a[index];
            double t27158 = 1.0/t27155;
            double t27180 = C*t27153;
            double t27159 = exp(-t27180);
            double t27160 = 1.0/pow(t27152,1.1E1/3.0);
            double t27161 = 1.0/pow(t27152,4.0/3.0);
            double t27162 = Dd*Dd;
            double t27163 = 1.0/pow(t27152,5.0/3.0);
            double t27164 = 1.0/pow(t27152,7.0/3.0);
            double t27165 = 1.0/(t27155*t27155*t27155);
            double t27166 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t27167 = 1.0/pow(t27152,8.0/3.0);
            double t27168 = C*t27153*(1.0/9.0);
            double t27169 = Dd*t27153*t27158*(1.0/9.0);
            double t27170 = t27168+t27169-1.1E1/9.0;
            double t27171 = gamma_aa[index]*t27170;
            double t27172 = C*t27153*(1.0/1.8E1);
            double t27173 = Dd*t27153*t27158*(1.0/1.8E1);
            double t27174 = t27172+t27173-5.0/2.0;
            double t27175 = C*t27153*(7.0/1.8E1);
            double t27176 = Dd*t27153*t27158*(7.0/1.8E1);
            double t27177 = t27175+t27176-4.7E1/1.8E1;
            double t27178 = gamma_aa[index]*t27177*4.0;
            double t27179 = pow(rho_a[index],8.0/3.0);
            double t27181 = C*t27161*(1.0/2.7E1);
            double t27182 = Dd*t27161*t27158*(1.0/2.7E1);
            double t27196 = t27162*t27163*t27156*(1.0/2.7E1);
            double t27183 = t27181+t27182-t27196;
            double t27184 = gamma_aa[index]*t27183;
            double t27185 = C*t27161*(1.0/5.4E1);
            double t27186 = Dd*t27161*t27158*(1.0/5.4E1);
            double t27197 = t27162*t27163*t27156*(1.0/5.4E1);
            double t27187 = t27185+t27186-t27197;
            double t27188 = C*t27161*(7.0/5.4E1);
            double t27189 = Dd*t27161*t27158*(7.0/5.4E1);
            double t27199 = t27162*t27163*t27156*(7.0/5.4E1);
            double t27190 = t27188+t27189-t27199;
            double t27191 = gamma_aa[index]*t27190*4.0;
            double t27192 = pow(rho_a[index],5.0/3.0);
            double t27193 = CFext*t27192*(8.0/3.0);
            double t27198 = gamma_aa[index]*t27187*2.0;
            double t27194 = t27191+t27184+t27193-t27198;
            double t27214 = gamma_aa[index]*t27174*2.0;
            double t27215 = CFext*t27179*2.0;
            double t27195 = -t27214-t27215+t27171+t27178;
            double t27200 = C*t27164*(4.0/8.1E1);
            double t27201 = Dd*t27164*t27158*(4.0/8.1E1);
            double t27202 = Dd*t27162*t27165*t27166*(1.0/3.24E2);
            double t27203 = t27200+t27201+t27202-t27162*t27156*t27167*(2.0/2.7E1);
            double t27204 = gamma_aa[index]*t27203;
            double t27205 = C*t27164*(2.0/8.1E1);
            double t27206 = Dd*t27164*t27158*(2.0/8.1E1);
            double t27207 = Dd*t27162*t27165*t27166*(1.0/6.48E2);
            double t27208 = t27205+t27206+t27207-t27162*t27156*t27167*(1.0/2.7E1);
            double t27209 = C*t27164*(1.4E1/8.1E1);
            double t27210 = Dd*t27164*t27158*(1.4E1/8.1E1);
            double t27211 = Dd*t27162*t27165*t27166*(7.0/6.48E2);
            double t27212 = t27210+t27211+t27209-t27162*t27156*t27167*(7.0/2.7E1);
            double t27213 = gamma_aa[index]*t27212*4.0;
            double t27216 = t27157*t27195;
            double t27217 = gamma_aa[index]*t27157*(2.2E1/3.0);
            double t27218 = t27216+t27217;
            double t27219 = 1.0/pow(t27152,1.9E1/3.0);
            double t27220 = gamma_aa[index]*rho_a[index]*(2.2E1/3.0);
            double t27221 = rho_a[index]*t27195;
            double t27224 = t27157*t27194;
            double t27222 = t27220+t27221-t27224;
            double t27223 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t27225 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            v_rho_a_rho_a_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*gamma_aa[index]*t27130*t27139*(8.8E1/9.0) \
               +d2*e2*gamma_aa[index]*t27134*t27139*(8.8E1/9.0)-d1*e1*gamma_aa[index]*t27140*t27125*(d1*gamma_aa[index]* \
               t27137*t27139*4.0E1+d1*t27123*t27151*t27127*(5.6E1/3.0)-d1*t27150*t27148*t27149*(3.2E1/3.0))-d2*e2* \
               gamma_aa[index]*t27125*t27144*(d2*gamma_aa[index]*t27137*t27139*4.0E1+d2*t27123*t27151*t27127*(5.6E1/ \
               3.0)-d2*t27150*t27148*t27149*(3.2E1/3.0))+d1*e1*gamma_aa[index]*t27125*(t27143*t27143)*1.0/(t27129* \
               t27129*t27129)*2.0+d2*e2*gamma_aa[index]*1.0/(t27133*t27133*t27133)*t27125*(t27147*t27147)*2.0-d1* \
               e1*gamma_aa[index]*t27131*t27140*t27143*(1.6E1/3.0)-d2*e2*gamma_aa[index]*t27131*t27144*t27147*(1.6E1/ \
               3.0))+pow(rho_a[index],1.0/3.0)*(d1*e1*gamma_aa[index]*t27130*t27131*(8.0/3.0)+d2*e2*gamma_aa[index]* \
               t27131*t27134*(8.0/3.0)-d1*e1*gamma_aa[index]*t27140*t27125*t27143-d2*e2*gamma_aa[index]*t27125*t27144* \
               t27147)*(8.0/3.0)-1.0/pow(rho_a[index],2.0/3.0)*(-c0*e0+d1*e1*gamma_aa[index]*t27130*t27125+d2*e2* \
               gamma_aa[index]*t27125*t27134)*(4.0/9.0)-A*Dd*rho_a[index]*t27164*t27156*(1.6E1/3.0)-A*t27160*t27162* \
               t27165*t27157*(1.6E1/9.0)+A*Dd*1.0/pow(t27152,1.0E1/3.0)*t27156*t27157*(8.0E1/9.0)-A*B*t27222*1.0/ \
               pow(t27152,1.4E1/3.0)*t27158*t27159*(4.4E1/3.0)+A*B*1.0/pow(t27152,1.7E1/3.0)*t27218*t27158*t27159* \
               (3.08E2/9.0)+A*B*t27160*t27158*t27159*(gamma_aa[index]*(8.0/3.0)+t27171+t27178-CFext*t27179*2.0-gamma_aa[index]* \
               t27174*2.0-rho_a[index]*t27194*2.0+t27157*(t27204+t27213-gamma_aa[index]*t27208*2.0))+A*B*t27160*t27158* \
               t27159*(gamma_aa[index]*(1.4E1/3.0)-rho_a[index]*t27194*2.0+t27157*(t27204+t27213-gamma_aa[index]* \
               t27208*2.0-CFext*pow(rho_a[index],2.0/3.0)*(4.0E1/9.0)))+A*B*t27162*t27218*t27165*t27219*t27159*(4.0/ \
               9.0)+A*B*(C*C)*t27218*t27219*t27158*t27159*(2.0/9.0)+A*B*C*t27222*t27223*t27158*t27159*(1.0/2.4E1) \
               -A*B*C*t27225*t27218*t27158*t27159*(1.3E1/1.44E2)+A*B*Dd*t27222*t27223*t27156*t27159*(1.0/2.4E1)-A* \
               B*Dd*t27225*t27218*t27156*t27159*(1.3E1/1.44E2)+A*B*C*Dd*t27218*t27156*t27219*t27159*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t27227 = sqrt(gamma_aa[index]);
                double t27228 = 1.0/pow(rho_a[index],4.0/3.0);
                double t27229 = 1.0/pow(rho_a[index],8.0/3.0);
                double t27230 = t27227*t27228;
                double t27231 = log(t27230+sqrt(t27230*t27230+1.0));
                double t27232 = d1*t27231*t27227*t27228*6.0;
                double t27233 = t27232+1.0;
                double t27234 = gamma_aa[index]*t27229;
                double t27235 = t27234+1.0;
                double t27236 = 1.0/sqrt(t27235);
                double t27237 = 1.0/sqrt(gamma_aa[index]);
                double t27238 = d2*t27231*t27227*t27228*6.0;
                double t27239 = t27238+1.0;
                double t27240 = 1.0/t27233;
                double t27241 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t27242 = 1.0/t27239;
                double t27243 = 1.0/(t27233*t27233);
                double t27244 = 1.0/(t27239*t27239);
                double t27245 = 1.0/pow(rho_a[index],7.0/3.0);
                double t27246 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t27247 = 1.0/pow(t27235,3.0/2.0);
                double t27248 = d1*t27236*t27229*3.0;
                double t27249 = d1*t27231*t27228*t27237*3.0;
                double t27250 = t27248+t27249;
                double t27251 = d2*t27236*t27229*3.0;
                double t27252 = d2*t27231*t27228*t27237*3.0;
                double t27253 = t27251+t27252;
                double t27254 = d1*gamma_aa[index]*t27241*t27236*8.0;
                double t27255 = d1*t27231*t27227*t27245*8.0;
                double t27256 = t27254+t27255;
                double t27257 = d2*gamma_aa[index]*t27241*t27236*8.0;
                double t27258 = d2*t27231*t27227*t27245*8.0;
                double t27259 = t27257+t27258;
                double t27260 = rho_a[index]*2.0;
                double t27261 = 1.0/pow(t27260,1.0/3.0);
                double t27262 = Dd*t27261;
                double t27263 = t27262+1.0;
                double t27264 = 1.0/t27263;
                double t27265 = 1.0/pow(t27260,4.0/3.0);
                double t27272 = C*t27261;
                double t27266 = exp(-t27272);
                double t27267 = 1.0/pow(t27260,1.1E1/3.0);
                double t27268 = rho_a[index]*rho_a[index];
                double t27269 = Dd*Dd;
                double t27270 = 1.0/(t27263*t27263);
                double t27271 = 1.0/pow(t27260,5.0/3.0);
                double t27273 = C*t27261*(7.0/9.0);
                double t27274 = Dd*t27261*t27264*(7.0/9.0);
                double t27275 = t27273+t27274-4.7E1/9.0;
                double t27276 = 1.0/pow(t27260,1.4E1/3.0);
                double t27277 = C*t27261*(7.0/1.8E1);
                double t27278 = Dd*t27261*t27264*(7.0/1.8E1);
                double t27279 = t27277+t27278-1.3E1/1.8E1;
                double t27280 = 1.0/rho_a[index];
                double t27281 = C*t27261*(1.0/9.0);
                double t27282 = Dd*t27261*t27264*(1.0/9.0);
                double t27283 = t27281+t27282-1.1E1/9.0;
                double t27284 = C*t27265*(7.0/5.4E1);
                double t27285 = Dd*t27264*t27265*(7.0/5.4E1);
                double t27286 = t27275*t27268;
                double t27287 = t27268*(1.6E1/3.0);
                double t27288 = t27286+t27287;
                double t27289 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t27290 = t27268*t27279;
                double t27291 = t27290+t27268;
                v_rho_a_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*t27240*t27241*(-8.0/3.0)-d2*e2*t27241* \
                   t27242*(8.0/3.0)+d1*e1*t27243*t27229*t27256+d2*e2*t27244*t27229*t27259+d1*e1*gamma_aa[index]*t27243* \
                   t27229*(d1*t27241*t27236*1.2E1-d1*gamma_aa[index]*t27246*t27247*4.0+d1*t27231*t27245*t27237*4.0)+d2* \
                   e2*gamma_aa[index]*t27244*t27229*(d2*t27241*t27236*1.2E1-d2*gamma_aa[index]*t27246*t27247*4.0+d2*t27231* \
                   t27245*t27237*4.0)+d1*e1*gamma_aa[index]*t27241*t27250*t27243*(8.0/3.0)+d2*e2*gamma_aa[index]*t27241* \
                   t27244*t27253*(8.0/3.0)-d1*e1*gamma_aa[index]*t27250*1.0/(t27233*t27233*t27233)*t27229*t27256*2.0- \
                   d2*e2*gamma_aa[index]*t27253*t27229*1.0/(t27239*t27239*t27239)*t27259*2.0)-pow(rho_a[index],1.0/3.0) \
                   *(d1*e1*t27240*t27229+d2*e2*t27242*t27229-d1*e1*gamma_aa[index]*t27250*t27243*t27229-d2*e2*gamma_aa[index]* \
                   t27244*t27253*t27229)*(4.0/3.0)-A*B*t27264*t27266*t27267*(t27268*(t27284+t27285-t27280*t27283*(1.0/ \
                   4.0)-t27270*t27271*t27269*(7.0/5.4E1))-rho_a[index]*t27279)+A*B*t27264*t27266*t27267*(rho_a[index]* \
                   (1.6E1/3.0)+rho_a[index]*t27275-t27268*(C*t27265*(7.0/2.7E1)+Dd*t27264*t27265*(7.0/2.7E1)-t27270*t27271* \
                   t27269*(7.0/2.7E1)))+A*B*t27264*t27266*t27267*(t27260-t27268*(t27284+t27285+t27280*t27283*(1.0/4.0) \
                   -t27270*t27271*t27269*(7.0/5.4E1))+rho_a[index]*t27279)-A*B*t27264*t27291*t27266*t27276*(2.2E1/3.0) \
                   -A*B*t27264*t27266*t27276*t27288*(1.1E1/3.0)+A*B*C*t27264*t27291*t27266*t27289*(1.0/4.8E1)+A*B*C*t27264* \
                   t27266*t27288*t27289*(1.0/9.6E1)+A*B*Dd*t27270*t27291*t27266*t27289*(1.0/4.8E1)+A*B*Dd*t27270*t27266* \
                   t27288*t27289*(1.0/9.6E1);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t27293 = 1.0/pow(rho_a[index],8.0/3.0);
                double t27294 = 1.0/pow(rho_a[index],4.0/3.0);
                double t27295 = sqrt(gamma_aa[index]);
                double t27296 = t27294*t27295;
                double t27297 = log(t27296+sqrt(t27296*t27296+1.0));
                double t27298 = gamma_aa[index]*t27293;
                double t27299 = t27298+1.0;
                double t27300 = 1.0/sqrt(t27299);
                double t27301 = 1.0/sqrt(gamma_aa[index]);
                double t27302 = d1*t27300*t27293*3.0;
                double t27303 = d1*t27301*t27294*t27297*3.0;
                double t27304 = t27302+t27303;
                double t27305 = d1*t27294*t27295*t27297*6.0;
                double t27306 = t27305+1.0;
                double t27307 = d2*t27300*t27293*3.0;
                double t27308 = d2*t27301*t27294*t27297*3.0;
                double t27309 = t27307+t27308;
                double t27310 = d2*t27294*t27295*t27297*6.0;
                double t27311 = t27310+1.0;
                double t27312 = 1.0/(t27306*t27306);
                double t27313 = 1.0/(t27311*t27311);
                double t27314 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t27315 = 1.0/pow(t27299,3.0/2.0);
                double t27316 = 1.0/gamma_aa[index];
                double t27317 = 1.0/pow(gamma_aa[index],3.0/2.0);
                v_gamma_aa_gamma_aa_[index] = pow(rho_a[index],4.0/3.0)*(d1*e1*t27312*t27304*t27293*-2.0-d2*e2*t27313* \
                   t27309*t27293*2.0+d1*e1*gamma_aa[index]*(t27304*t27304)*1.0/(t27306*t27306*t27306)*t27293*2.0+d2*e2* \
                   gamma_aa[index]*1.0/(t27311*t27311*t27311)*(t27309*t27309)*t27293*2.0+d1*e1*gamma_aa[index]*t27312* \
                   t27293*(d1*t27314*t27315*(3.0/2.0)-d1*t27300*t27316*t27293*(3.0/2.0)+d1*t27317*t27294*t27297*(3.0/ \
                   2.0))+d2*e2*gamma_aa[index]*t27313*t27293*(d2*t27314*t27315*(3.0/2.0)-d2*t27300*t27316*t27293*(3.0/ \
                   2.0)+d2*t27317*t27294*t27297*(3.0/2.0)))*-2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void EDF1_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_b = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    double c0 = params_[0].second;
    double d1 = params_[1].second;
    double d2 = params_[2].second;
    double e0 = params_[3].second;
    double e1 = params_[4].second;
    double e2 = params_[5].second;
    double A = params_[6].second;
    double B = params_[7].second;
    double C = params_[8].second;
    double Dd = params_[9].second;
    double CFext = params_[10].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t25887 = sqrt(gamma_aa[index]);
            double t25888 = 1.0/pow(rho_a[index],4.0/3.0);
            double t25889 = 1.0/pow(rho_a[index],8.0/3.0);
            double t25890 = t25887*t25888;
            double t25891 = log(t25890+sqrt(t25890*t25890+1.0));
            double t25892 = sqrt(gamma_bb[index]);
            double t25893 = 1.0/pow(rho_b[index],4.0/3.0);
            double t25894 = 1.0/pow(rho_b[index],8.0/3.0);
            double t25895 = t25892*t25893;
            double t25896 = log(t25895+sqrt(t25895*t25895+1.0));
            double t25897 = rho_a[index]+rho_b[index];
            double t25898 = 1.0/pow(t25897,1.0/3.0);
            double t25899 = Dd*t25898;
            double t25900 = t25899+1.0;
            double t25901 = 1.0/t25900;
            double t25902 = t25897*t25897;
            double t25903 = t25902*(2.0/3.0);
            double t25904 = gamma_ab[index]*2.0;
            double t25905 = gamma_aa[index]+gamma_bb[index]+t25904;
            double t25906 = 1.0/t25897;
            functional_[index] = -pow(rho_b[index],4.0/3.0)*(-c0*e0+(d1*e1*gamma_bb[index]*t25894)/(d1*t25892* \
               t25893*t25896*6.0+1.0)+(d2*e2*gamma_bb[index]*t25894)/(d2*t25892*t25893*t25896*6.0+1.0))-pow(rho_a[index],4.0/ \
               3.0)*(-c0*e0+(d1*e1*gamma_aa[index]*t25889)/(d1*t25891*t25887*t25888*6.0+1.0)+(d2*e2*gamma_aa[index]* \
               t25889)/(d2*t25891*t25887*t25888*6.0+1.0))-A*rho_a[index]*rho_b[index]*t25901*t25906*4.0-A*B*t25901* \
               1.0/pow(t25897,1.1E1/3.0)*exp(-C*t25898)*(t25902*t25905*(-2.0/3.0)+gamma_aa[index]*(t25903-rho_b[index]* \
               rho_b[index])+gamma_bb[index]*(t25903-rho_a[index]*rho_a[index])+rho_a[index]*rho_b[index]*((gamma_aa[index]+ \
               gamma_bb[index])*(C*t25898*(1.0/1.8E1)+Dd*t25901*t25898*(1.0/1.8E1)-5.0/2.0)+CFext*(pow(rho_a[index],8.0/ \
               3.0)+pow(rho_b[index],8.0/3.0))-t25905*(C*t25898*(7.0/1.8E1)+Dd*t25901*t25898*(7.0/1.8E1)-4.7E1/1.8E1) \
               -t25906*(gamma_aa[index]*rho_a[index]+gamma_bb[index]*rho_b[index])*(C*t25898*(1.0/9.0)+Dd*t25901* \
               t25898*(1.0/9.0)-1.1E1/9.0)));
        } else if (rho_a[index] > cutoff_) {
            double t26847 = sqrt(gamma_aa[index]);
            double t26848 = 1.0/pow(rho_a[index],4.0/3.0);
            double t26849 = 1.0/pow(rho_a[index],8.0/3.0);
            double t26850 = t26847*t26848;
            double t26851 = log(t26850+sqrt(t26850*t26850+1.0));
            functional_[index] = -pow(rho_a[index],4.0/3.0)*(-c0*e0+(d1*e1*gamma_aa[index]*t26849)/(d1*t26851* \
               t26847*t26848*6.0+1.0)+(d2*e2*gamma_aa[index]*t26849)/(d2*t26851*t26847*t26848*6.0+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t26690 = sqrt(gamma_bb[index]);
            double t26691 = 1.0/pow(rho_b[index],4.0/3.0);
            double t26692 = 1.0/pow(rho_b[index],8.0/3.0);
            double t26693 = t26690*t26691;
            double t26694 = log(t26693+sqrt(t26693*t26693+1.0));
            functional_[index] = -pow(rho_b[index],4.0/3.0)*(-c0*e0+(d1*e1*gamma_bb[index]*t26692)/(d1*t26690* \
               t26691*t26694*6.0+1.0)+(d2*e2*gamma_bb[index]*t26692)/(d2*t26690*t26691*t26694*6.0+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t25908 = sqrt(gamma_aa[index]);
            double t25909 = 1.0/pow(rho_a[index],4.0/3.0);
            double t25910 = 1.0/pow(rho_a[index],8.0/3.0);
            double t25911 = t25908*t25909;
            double t25912 = log(t25911+sqrt(t25911*t25911+1.0));
            double t25913 = d1*t25912*t25908*t25909*6.0;
            double t25914 = t25913+1.0;
            double t25915 = 1.0/t25914;
            double t25916 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t25917 = d2*t25912*t25908*t25909*6.0;
            double t25918 = t25917+1.0;
            double t25919 = 1.0/t25918;
            double t25920 = gamma_aa[index]*t25910;
            double t25921 = t25920+1.0;
            double t25922 = 1.0/sqrt(t25921);
            double t25923 = 1.0/pow(rho_a[index],7.0/3.0);
            double t25924 = rho_a[index]+rho_b[index];
            double t25925 = 1.0/pow(t25924,1.0/3.0);
            double t25926 = Dd*t25925;
            double t25927 = t25926+1.0;
            double t25928 = 1.0/t25927;
            double t25929 = t25924*t25924;
            double t25930 = t25929*(2.0/3.0);
            double t25931 = gamma_ab[index]*2.0;
            double t25932 = gamma_aa[index]+gamma_bb[index]+t25931;
            double t25933 = 1.0/t25924;
            double t25960 = C*t25925;
            double t25934 = exp(-t25960);
            double t25935 = C*t25925*(7.0/1.8E1);
            double t25936 = Dd*t25925*t25928*(7.0/1.8E1);
            double t25937 = t25935+t25936-4.7E1/1.8E1;
            double t25938 = t25932*t25937;
            double t25939 = gamma_aa[index]+gamma_bb[index];
            double t25940 = C*t25925*(1.0/1.8E1);
            double t25941 = Dd*t25925*t25928*(1.0/1.8E1);
            double t25942 = t25940+t25941-5.0/2.0;
            double t25943 = pow(rho_a[index],8.0/3.0);
            double t25944 = pow(rho_b[index],8.0/3.0);
            double t25945 = t25943+t25944;
            double t25946 = gamma_aa[index]*rho_a[index];
            double t25947 = gamma_bb[index]*rho_b[index];
            double t25948 = t25946+t25947;
            double t25949 = C*t25925*(1.0/9.0);
            double t25950 = Dd*t25925*t25928*(1.0/9.0);
            double t25951 = t25950+t25949-1.1E1/9.0;
            double t25952 = t25933*t25951*t25948;
            double t25967 = t25942*t25939;
            double t25968 = CFext*t25945;
            double t25953 = t25952+t25938-t25967-t25968;
            double t25954 = rho_b[index]*(4.0/3.0);
            double t25955 = 1.0/pow(t25924,4.0/3.0);
            double t25956 = 1.0/(t25927*t25927);
            double t25957 = Dd*Dd;
            double t25958 = 1.0/pow(t25924,5.0/3.0);
            double t25959 = 1.0/(t25924*t25924);
            double t25961 = rho_b[index]*rho_b[index];
            double t25962 = t25930-t25961;
            double t25963 = gamma_aa[index]*t25962;
            double t25964 = rho_a[index]*rho_a[index];
            double t25965 = t25930-t25964;
            double t25966 = gamma_bb[index]*t25965;
            double t25971 = t25932*t25929*(2.0/3.0);
            double t25972 = rho_a[index]*rho_b[index]*t25953;
            double t25969 = -t25971+t25963-t25972+t25966;
            double t25970 = 1.0/(t25924*t25924*t25924*t25924*t25924);
            v_rho_a_[index] = pow(rho_a[index],4.0/3.0)*(d1*e1*gamma_aa[index]*t25915*t25916*(8.0/3.0)+d2*e2* \
               gamma_aa[index]*t25916*t25919*(8.0/3.0)-d1*e1*gamma_aa[index]*t25910*1.0/(t25914*t25914)*(d1*gamma_aa[index]* \
               t25922*t25916*8.0+d1*t25912*t25923*t25908*8.0)-d2*e2*gamma_aa[index]*t25910*1.0/(t25918*t25918)*(d2* \
               gamma_aa[index]*t25922*t25916*8.0+d2*t25912*t25923*t25908*8.0))-pow(rho_a[index],1.0/3.0)*(-c0*e0+ \
               d1*e1*gamma_aa[index]*t25910*t25915+d2*e2*gamma_aa[index]*t25910*t25919)*(4.0/3.0)-A*rho_b[index]* \
               t25933*t25928*4.0+A*rho_a[index]*rho_b[index]*t25928*t25959*4.0+A*B*1.0/pow(t25924,1.1E1/3.0)*t25934* \
               t25928*(rho_b[index]*t25953-gamma_aa[index]*(rho_a[index]*(4.0/3.0)+t25954)+gamma_bb[index]*(rho_a[index]* \
               (2.0/3.0)-t25954)+t25932*(rho_a[index]*2.0+rho_b[index]*2.0)*(2.0/3.0)-rho_a[index]*rho_b[index]*(CFext* \
               pow(rho_a[index],5.0/3.0)*(8.0/3.0)-t25939*(C*t25955*(1.0/5.4E1)+Dd*t25928*t25955*(1.0/5.4E1)-t25956* \
               t25957*t25958*(1.0/5.4E1))+t25932*(C*t25955*(7.0/5.4E1)+Dd*t25928*t25955*(7.0/5.4E1)-t25956*t25957* \
               t25958*(7.0/5.4E1))+t25933*t25948*(C*t25955*(1.0/2.7E1)+Dd*t25928*t25955*(1.0/2.7E1)-t25956*t25957* \
               t25958*(1.0/2.7E1))-gamma_aa[index]*t25933*t25951+t25951*t25948*t25959))-A*Dd*rho_a[index]*rho_b[index]* \
               1.0/pow(t25924,7.0/3.0)*t25956*(4.0/3.0)+A*B*1.0/pow(t25924,1.4E1/3.0)*t25934*t25928*t25969*(1.1E1/ \
               3.0)-A*B*C*t25934*t25970*t25928*t25969*(1.0/3.0)-A*B*Dd*t25934*t25970*t25956*t25969*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t26853 = sqrt(gamma_aa[index]);
            double t26854 = 1.0/pow(rho_a[index],4.0/3.0);
            double t26855 = 1.0/pow(rho_a[index],8.0/3.0);
            double t26856 = t26853*t26854;
            double t26857 = log(t26856+sqrt(t26856*t26856+1.0));
            double t26858 = d1*t26853*t26854*t26857*6.0;
            double t26859 = t26858+1.0;
            double t26860 = 1.0/t26859;
            double t26861 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t26862 = d2*t26853*t26854*t26857*6.0;
            double t26863 = t26862+1.0;
            double t26864 = 1.0/t26863;
            double t26865 = gamma_aa[index]*t26855;
            double t26866 = t26865+1.0;
            double t26867 = 1.0/sqrt(t26866);
            double t26868 = 1.0/pow(rho_a[index],7.0/3.0);
            v_rho_a_[index] = pow(rho_a[index],4.0/3.0)*(d1*e1*gamma_aa[index]*t26860*t26861*(8.0/3.0)+d2*e2* \
               gamma_aa[index]*t26861*t26864*(8.0/3.0)-d1*e1*gamma_aa[index]*t26855*1.0/(t26859*t26859)*(d1*gamma_aa[index]* \
               t26861*t26867*8.0+d1*t26853*t26857*t26868*8.0)-d2*e2*gamma_aa[index]*1.0/(t26863*t26863)*t26855*(d2* \
               gamma_aa[index]*t26861*t26867*8.0+d2*t26853*t26857*t26868*8.0))-pow(rho_a[index],1.0/3.0)*(-c0*e0+ \
               d1*e1*gamma_aa[index]*t26860*t26855+d2*e2*gamma_aa[index]*t26855*t26864)*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t25974 = sqrt(gamma_bb[index]);
            double t25975 = 1.0/pow(rho_b[index],4.0/3.0);
            double t25976 = 1.0/pow(rho_b[index],8.0/3.0);
            double t25977 = t25974*t25975;
            double t25978 = log(t25977+sqrt(t25977*t25977+1.0));
            double t25979 = d1*t25974*t25975*t25978*6.0;
            double t25980 = t25979+1.0;
            double t25981 = 1.0/t25980;
            double t25982 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t25983 = d2*t25974*t25975*t25978*6.0;
            double t25984 = t25983+1.0;
            double t25985 = 1.0/t25984;
            double t25986 = gamma_bb[index]*t25976;
            double t25987 = t25986+1.0;
            double t25988 = 1.0/sqrt(t25987);
            double t25989 = 1.0/pow(rho_b[index],7.0/3.0);
            double t25990 = rho_a[index]+rho_b[index];
            double t25991 = 1.0/pow(t25990,1.0/3.0);
            double t25992 = Dd*t25991;
            double t25993 = t25992+1.0;
            double t25994 = 1.0/t25993;
            double t25995 = t25990*t25990;
            double t25996 = t25995*(2.0/3.0);
            double t25997 = gamma_ab[index]*2.0;
            double t25998 = gamma_aa[index]+gamma_bb[index]+t25997;
            double t25999 = 1.0/t25990;
            double t26026 = C*t25991;
            double t26000 = exp(-t26026);
            double t26001 = C*t25991*(7.0/1.8E1);
            double t26002 = Dd*t25991*t25994*(7.0/1.8E1);
            double t26003 = t26001+t26002-4.7E1/1.8E1;
            double t26004 = t25998*t26003;
            double t26005 = gamma_aa[index]+gamma_bb[index];
            double t26006 = C*t25991*(1.0/1.8E1);
            double t26007 = Dd*t25991*t25994*(1.0/1.8E1);
            double t26008 = t26006+t26007-5.0/2.0;
            double t26009 = pow(rho_a[index],8.0/3.0);
            double t26010 = pow(rho_b[index],8.0/3.0);
            double t26011 = t26010+t26009;
            double t26012 = gamma_aa[index]*rho_a[index];
            double t26013 = gamma_bb[index]*rho_b[index];
            double t26014 = t26012+t26013;
            double t26015 = C*t25991*(1.0/9.0);
            double t26016 = Dd*t25991*t25994*(1.0/9.0);
            double t26017 = t26015+t26016-1.1E1/9.0;
            double t26018 = t25999*t26014*t26017;
            double t26033 = t26005*t26008;
            double t26034 = CFext*t26011;
            double t26019 = t26004-t26033-t26034+t26018;
            double t26020 = rho_a[index]*(4.0/3.0);
            double t26021 = 1.0/pow(t25990,4.0/3.0);
            double t26022 = 1.0/(t25993*t25993);
            double t26023 = Dd*Dd;
            double t26024 = 1.0/pow(t25990,5.0/3.0);
            double t26025 = 1.0/(t25990*t25990);
            double t26027 = rho_b[index]*rho_b[index];
            double t26028 = t25996-t26027;
            double t26029 = gamma_aa[index]*t26028;
            double t26030 = rho_a[index]*rho_a[index];
            double t26031 = t25996-t26030;
            double t26032 = gamma_bb[index]*t26031;
            double t26037 = t25995*t25998*(2.0/3.0);
            double t26038 = rho_a[index]*rho_b[index]*t26019;
            double t26035 = t26032-t26037+t26029-t26038;
            double t26036 = 1.0/(t25990*t25990*t25990*t25990*t25990);
            v_rho_b_[index] = pow(rho_b[index],4.0/3.0)*(d1*e1*gamma_bb[index]*t25981*t25982*(8.0/3.0)+d2*e2* \
               gamma_bb[index]*t25982*t25985*(8.0/3.0)-d1*e1*gamma_bb[index]*1.0/(t25980*t25980)*t25976*(d1*gamma_bb[index]* \
               t25982*t25988*8.0+d1*t25974*t25978*t25989*8.0)-d2*e2*gamma_bb[index]*1.0/(t25984*t25984)*t25976*(d2* \
               gamma_bb[index]*t25982*t25988*8.0+d2*t25974*t25978*t25989*8.0))-pow(rho_b[index],1.0/3.0)*(-c0*e0+ \
               d1*e1*gamma_bb[index]*t25981*t25976+d2*e2*gamma_bb[index]*t25976*t25985)*(4.0/3.0)-A*rho_a[index]* \
               t25994*t25999*4.0+A*rho_a[index]*rho_b[index]*t25994*t26025*4.0+A*B*1.0/pow(t25990,1.1E1/3.0)*t25994* \
               t26000*(rho_a[index]*t26019-gamma_bb[index]*(rho_b[index]*(4.0/3.0)+t26020)+gamma_aa[index]*(rho_b[index]* \
               (2.0/3.0)-t26020)+t25998*(rho_a[index]*2.0+rho_b[index]*2.0)*(2.0/3.0)-rho_a[index]*rho_b[index]*(CFext* \
               pow(rho_b[index],5.0/3.0)*(8.0/3.0)+t25998*(C*t26021*(7.0/5.4E1)+Dd*t25994*t26021*(7.0/5.4E1)-t26022* \
               t26023*t26024*(7.0/5.4E1))-t26005*(C*t26021*(1.0/5.4E1)+Dd*t25994*t26021*(1.0/5.4E1)-t26022*t26023* \
               t26024*(1.0/5.4E1))+t25999*t26014*(C*t26021*(1.0/2.7E1)+Dd*t25994*t26021*(1.0/2.7E1)-t26022*t26023* \
               t26024*(1.0/2.7E1))-gamma_bb[index]*t25999*t26017+t26014*t26025*t26017))-A*Dd*rho_a[index]*rho_b[index]* \
               1.0/pow(t25990,7.0/3.0)*t26022*(4.0/3.0)+A*B*1.0/pow(t25990,1.4E1/3.0)*t25994*t26000*t26035*(1.1E1/ \
               3.0)-A*B*C*t25994*t26000*t26035*t26036*(1.0/3.0)-A*B*Dd*t26000*t26022*t26035*t26036*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t26697 = sqrt(gamma_bb[index]);
            double t26698 = 1.0/pow(rho_b[index],4.0/3.0);
            double t26699 = 1.0/pow(rho_b[index],8.0/3.0);
            double t26700 = t26697*t26698;
            double t26701 = log(t26700+sqrt(t26700*t26700+1.0));
            double t26702 = d1*t26701*t26697*t26698*6.0;
            double t26703 = t26702+1.0;
            double t26704 = 1.0/t26703;
            double t26705 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t26706 = d2*t26701*t26697*t26698*6.0;
            double t26707 = t26706+1.0;
            double t26708 = 1.0/t26707;
            double t26709 = gamma_bb[index]*t26699;
            double t26710 = t26709+1.0;
            double t26711 = 1.0/sqrt(t26710);
            double t26712 = 1.0/pow(rho_b[index],7.0/3.0);
            v_rho_b_[index] = pow(rho_b[index],4.0/3.0)*(d1*e1*gamma_bb[index]*t26704*t26705*(8.0/3.0)+d2*e2* \
               gamma_bb[index]*t26705*t26708*(8.0/3.0)-d1*e1*gamma_bb[index]*1.0/(t26703*t26703)*t26699*(d1*gamma_bb[index]* \
               t26711*t26705*8.0+d1*t26701*t26712*t26697*8.0)-d2*e2*gamma_bb[index]*1.0/(t26707*t26707)*t26699*(d2* \
               gamma_bb[index]*t26711*t26705*8.0+d2*t26701*t26712*t26697*8.0))-pow(rho_b[index],1.0/3.0)*(-c0*e0+ \
               d1*e1*gamma_bb[index]*t26704*t26699+d2*e2*gamma_bb[index]*t26708*t26699)*(4.0/3.0);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26040 = sqrt(gamma_aa[index]);
                double t26041 = 1.0/pow(rho_a[index],4.0/3.0);
                double t26042 = 1.0/pow(rho_a[index],8.0/3.0);
                double t26043 = t26040*t26041;
                double t26044 = log(t26043+sqrt(t26043*t26043+1.0));
                double t26045 = d1*t26040*t26041*t26044*6.0;
                double t26046 = t26045+1.0;
                double t26047 = gamma_aa[index]*t26042;
                double t26048 = t26047+1.0;
                double t26049 = 1.0/sqrt(t26048);
                double t26050 = 1.0/sqrt(gamma_aa[index]);
                double t26051 = d2*t26040*t26041*t26044*6.0;
                double t26052 = t26051+1.0;
                double t26053 = rho_a[index]+rho_b[index];
                double t26054 = 1.0/pow(t26053,1.0/3.0);
                double t26055 = Dd*t26054;
                double t26056 = t26055+1.0;
                double t26057 = 1.0/t26056;
                v_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*((d1*e1*t26042)/t26046+(d2*e2*t26042)/t26052-d1*e1* \
                   gamma_aa[index]*t26042*1.0/(t26046*t26046)*(d1*t26042*t26049*3.0+d1*t26041*t26050*t26044*3.0)-d2*e2* \
                   gamma_aa[index]*t26042*1.0/(t26052*t26052)*(d2*t26042*t26049*3.0+d2*t26041*t26050*t26044*3.0))+A*B* \
                   1.0/pow(t26053,1.1E1/3.0)*t26057*exp(-C*t26054)*(rho_b[index]*rho_b[index]+rho_a[index]*rho_b[index]* \
                   (C*t26054*(1.0/3.0)+Dd*t26054*t26057*(1.0/3.0)+(rho_a[index]*(C*t26054*(1.0/9.0)+Dd*t26054*t26057* \
                   (1.0/9.0)-1.1E1/9.0))/t26053-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                double t26871 = sqrt(gamma_aa[index]);
                double t26872 = 1.0/pow(rho_a[index],4.0/3.0);
                double t26873 = 1.0/pow(rho_a[index],8.0/3.0);
                double t26874 = t26871*t26872;
                double t26875 = log(t26874+sqrt(t26874*t26874+1.0));
                double t26876 = d1*t26871*t26872*t26875*6.0;
                double t26877 = t26876+1.0;
                double t26878 = gamma_aa[index]*t26873;
                double t26879 = t26878+1.0;
                double t26880 = 1.0/sqrt(t26879);
                double t26881 = 1.0/sqrt(gamma_aa[index]);
                double t26882 = d2*t26871*t26872*t26875*6.0;
                double t26883 = t26882+1.0;
                v_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*((d1*e1*t26873)/t26877+(d2*e2*t26873)/t26883-d1*e1* \
                   gamma_aa[index]*t26873*1.0/(t26877*t26877)*(d1*t26880*t26873*3.0+d1*t26872*t26881*t26875*3.0)-d2*e2* \
                   gamma_aa[index]*t26873*1.0/(t26883*t26883)*(d2*t26880*t26873*3.0+d2*t26872*t26881*t26875*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26059 = rho_a[index]+rho_b[index];
                double t26060 = 1.0/pow(t26059,1.0/3.0);
                double t26061 = Dd*t26060;
                double t26062 = t26061+1.0;
                double t26063 = 1.0/t26062;
                v_gamma_ab_[index] = A*B*t26063*1.0/pow(t26059,1.1E1/3.0)*exp(-C*t26060)*((t26059*t26059)*(4.0/3.0) \
                   +rho_a[index]*rho_b[index]*(C*t26060*(7.0/9.0)+Dd*t26060*t26063*(7.0/9.0)-4.7E1/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26065 = sqrt(gamma_bb[index]);
                double t26066 = 1.0/pow(rho_b[index],4.0/3.0);
                double t26067 = 1.0/pow(rho_b[index],8.0/3.0);
                double t26068 = t26065*t26066;
                double t26069 = log(t26068+sqrt(t26068*t26068+1.0));
                double t26070 = d1*t26065*t26066*t26069*6.0;
                double t26071 = t26070+1.0;
                double t26072 = gamma_bb[index]*t26067;
                double t26073 = t26072+1.0;
                double t26074 = 1.0/sqrt(t26073);
                double t26075 = 1.0/sqrt(gamma_bb[index]);
                double t26076 = d2*t26065*t26066*t26069*6.0;
                double t26077 = t26076+1.0;
                double t26078 = rho_a[index]+rho_b[index];
                double t26079 = 1.0/pow(t26078,1.0/3.0);
                double t26080 = Dd*t26079;
                double t26081 = t26080+1.0;
                double t26082 = 1.0/t26081;
                v_gamma_bb_[index] = -pow(rho_b[index],4.0/3.0)*((d1*e1*t26067)/t26071+(d2*e2*t26067)/t26077-d1*e1* \
                   gamma_bb[index]*1.0/(t26071*t26071)*t26067*(d1*t26074*t26067*3.0+d1*t26066*t26075*t26069*3.0)-d2*e2* \
                   gamma_bb[index]*t26067*1.0/(t26077*t26077)*(d2*t26074*t26067*3.0+d2*t26066*t26075*t26069*3.0))+A*B* \
                   t26082*1.0/pow(t26078,1.1E1/3.0)*exp(-C*t26079)*(rho_a[index]*rho_a[index]+rho_a[index]*rho_b[index]* \
                   (C*t26079*(1.0/3.0)+Dd*t26082*t26079*(1.0/3.0)+(rho_b[index]*(C*t26079*(1.0/9.0)+Dd*t26082*t26079* \
                   (1.0/9.0)-1.1E1/9.0))/t26078-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t26716 = sqrt(gamma_bb[index]);
                double t26717 = 1.0/pow(rho_b[index],4.0/3.0);
                double t26718 = 1.0/pow(rho_b[index],8.0/3.0);
                double t26719 = t26716*t26717;
                double t26720 = log(t26719+sqrt(t26719*t26719+1.0));
                double t26721 = d1*t26720*t26716*t26717*6.0;
                double t26722 = t26721+1.0;
                double t26723 = gamma_bb[index]*t26718;
                double t26724 = t26723+1.0;
                double t26725 = 1.0/sqrt(t26724);
                double t26726 = 1.0/sqrt(gamma_bb[index]);
                double t26727 = d2*t26720*t26716*t26717*6.0;
                double t26728 = t26727+1.0;
                v_gamma_bb_[index] = -pow(rho_b[index],4.0/3.0)*((d1*e1*t26718)/t26722+(d2*e2*t26718)/t26728-d1*e1* \
                   gamma_bb[index]*1.0/(t26722*t26722)*t26718*(d1*t26725*t26718*3.0+d1*t26720*t26717*t26726*3.0)-d2*e2* \
                   gamma_bb[index]*t26718*1.0/(t26728*t26728)*(d2*t26725*t26718*3.0+d2*t26720*t26717*t26726*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t26086 = sqrt(gamma_aa[index]);
            double t26087 = 1.0/pow(rho_a[index],4.0/3.0);
            double t26088 = 1.0/pow(rho_a[index],8.0/3.0);
            double t26089 = t26086*t26087;
            double t26090 = log(t26089+sqrt(t26089*t26089+1.0));
            double t26091 = d1*t26090*t26086*t26087*6.0;
            double t26092 = t26091+1.0;
            double t26093 = 1.0/t26092;
            double t26094 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t26095 = d2*t26090*t26086*t26087*6.0;
            double t26096 = t26095+1.0;
            double t26097 = 1.0/t26096;
            double t26098 = gamma_aa[index]*t26088;
            double t26099 = t26098+1.0;
            double t26100 = 1.0/sqrt(t26099);
            double t26101 = 1.0/pow(rho_a[index],7.0/3.0);
            double t26102 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t26103 = 1.0/(t26092*t26092);
            double t26104 = d1*gamma_aa[index]*t26100*t26094*8.0;
            double t26105 = d1*t26101*t26090*t26086*8.0;
            double t26106 = t26104+t26105;
            double t26107 = 1.0/(t26096*t26096);
            double t26108 = d2*gamma_aa[index]*t26100*t26094*8.0;
            double t26109 = d2*t26101*t26090*t26086*8.0;
            double t26110 = t26108+t26109;
            double t26111 = gamma_aa[index]*gamma_aa[index];
            double t26112 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t26113 = 1.0/pow(t26099,3.0/2.0);
            double t26114 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t26115 = rho_a[index]+rho_b[index];
            double t26116 = 1.0/pow(t26115,1.0/3.0);
            double t26117 = Dd*t26116;
            double t26118 = t26117+1.0;
            double t26119 = 1.0/t26118;
            double t26120 = t26115*t26115;
            double t26121 = t26120*(2.0/3.0);
            double t26122 = gamma_ab[index]*2.0;
            double t26123 = gamma_aa[index]+gamma_bb[index]+t26122;
            double t26124 = 1.0/(t26118*t26118);
            double t26151 = C*t26116;
            double t26125 = exp(-t26151);
            double t26126 = C*t26116*(7.0/1.8E1);
            double t26127 = Dd*t26116*t26119*(7.0/1.8E1);
            double t26128 = t26126+t26127-4.7E1/1.8E1;
            double t26129 = t26123*t26128;
            double t26130 = gamma_aa[index]+gamma_bb[index];
            double t26131 = C*t26116*(1.0/1.8E1);
            double t26132 = Dd*t26116*t26119*(1.0/1.8E1);
            double t26133 = t26131+t26132-5.0/2.0;
            double t26134 = pow(rho_a[index],8.0/3.0);
            double t26135 = pow(rho_b[index],8.0/3.0);
            double t26136 = t26134+t26135;
            double t26137 = 1.0/t26115;
            double t26138 = gamma_aa[index]*rho_a[index];
            double t26139 = gamma_bb[index]*rho_b[index];
            double t26140 = t26138+t26139;
            double t26141 = C*t26116*(1.0/9.0);
            double t26142 = Dd*t26116*t26119*(1.0/9.0);
            double t26143 = t26141+t26142-1.1E1/9.0;
            double t26144 = t26140*t26143*t26137;
            double t26177 = t26130*t26133;
            double t26178 = CFext*t26136;
            double t26145 = t26144+t26129-t26177-t26178;
            double t26146 = rho_b[index]*(4.0/3.0);
            double t26147 = 1.0/pow(t26115,4.0/3.0);
            double t26148 = Dd*Dd;
            double t26149 = 1.0/pow(t26115,5.0/3.0);
            double t26150 = 1.0/(t26115*t26115);
            double t26152 = 1.0/pow(t26115,1.1E1/3.0);
            double t26153 = C*t26147*(1.0/5.4E1);
            double t26154 = Dd*t26119*t26147*(1.0/5.4E1);
            double t26185 = t26124*t26148*t26149*(1.0/5.4E1);
            double t26155 = t26153+t26154-t26185;
            double t26156 = pow(rho_a[index],5.0/3.0);
            double t26157 = CFext*t26156*(8.0/3.0);
            double t26158 = C*t26147*(7.0/5.4E1);
            double t26159 = Dd*t26119*t26147*(7.0/5.4E1);
            double t26187 = t26124*t26148*t26149*(7.0/5.4E1);
            double t26160 = t26158+t26159-t26187;
            double t26161 = t26123*t26160;
            double t26162 = C*t26147*(1.0/2.7E1);
            double t26163 = Dd*t26119*t26147*(1.0/2.7E1);
            double t26172 = t26124*t26148*t26149*(1.0/2.7E1);
            double t26164 = t26162+t26163-t26172;
            double t26165 = t26140*t26137*t26164;
            double t26166 = t26140*t26150*t26143;
            double t26186 = t26130*t26155;
            double t26188 = gamma_aa[index]*t26143*t26137;
            double t26167 = t26161+t26165+t26157+t26166-t26186-t26188;
            double t26168 = 1.0/pow(t26115,7.0/3.0);
            double t26169 = 1.0/(t26115*t26115*t26115);
            double t26170 = 1.0/(t26118*t26118*t26118);
            double t26171 = 1.0/pow(t26115,8.0/3.0);
            double t26173 = rho_a[index]*2.0;
            double t26174 = rho_b[index]*2.0;
            double t26175 = t26173+t26174;
            double t26176 = t26123*t26175*(2.0/3.0);
            double t26179 = rho_b[index]*t26145;
            double t26180 = rho_a[index]*(4.0/3.0);
            double t26181 = t26180+t26146;
            double t26182 = rho_a[index]*(2.0/3.0);
            double t26183 = t26146-t26182;
            double t26184 = gamma_bb[index]*t26183;
            double t26189 = rho_a[index]*rho_b[index]*t26167;
            double t26190 = gamma_aa[index]*t26181;
            double t26191 = t26190+t26184-t26176-t26179+t26189;
            double t26192 = 1.0/(t26115*t26115*t26115*t26115*t26115);
            double t26193 = rho_b[index]*rho_b[index];
            double t26194 = t26121-t26193;
            double t26195 = gamma_aa[index]*t26194;
            double t26196 = rho_a[index]*rho_a[index];
            double t26197 = t26121-t26196;
            double t26198 = gamma_bb[index]*t26197;
            double t26201 = t26120*t26123*(2.0/3.0);
            double t26202 = rho_a[index]*rho_b[index]*t26145;
            double t26199 = -t26201-t26202+t26195+t26198;
            double t26200 = 1.0/(t26115*t26115*t26115*t26115*t26115*t26115);
            double t26203 = 1.0/pow(t26115,1.9E1/3.0);
            v_rho_a_rho_a_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*gamma_aa[index]*t26102*t26093*(8.8E1/9.0) \
               +d2*e2*gamma_aa[index]*t26102*t26097*(8.8E1/9.0)-d1*e1*gamma_aa[index]*t26103*t26088*(d1*gamma_aa[index]* \
               t26100*t26102*4.0E1-d1*t26111*t26112*t26113*(3.2E1/3.0)+d1*t26114*t26090*t26086*(5.6E1/3.0))-d2*e2* \
               gamma_aa[index]*t26107*t26088*(d2*gamma_aa[index]*t26100*t26102*4.0E1-d2*t26111*t26112*t26113*(3.2E1/ \
               3.0)+d2*t26114*t26090*t26086*(5.6E1/3.0))+d1*e1*gamma_aa[index]*(t26106*t26106)*1.0/(t26092*t26092* \
               t26092)*t26088*2.0+d2*e2*gamma_aa[index]*(t26110*t26110)*1.0/(t26096*t26096*t26096)*t26088*2.0-d1* \
               e1*gamma_aa[index]*t26103*t26106*t26094*(1.6E1/3.0)-d2*e2*gamma_aa[index]*t26110*t26107*t26094*(1.6E1/ \
               3.0))+pow(rho_a[index],1.0/3.0)*(d1*e1*gamma_aa[index]*t26093*t26094*(8.0/3.0)+d2*e2*gamma_aa[index]* \
               t26094*t26097*(8.0/3.0)-d1*e1*gamma_aa[index]*t26103*t26106*t26088-d2*e2*gamma_aa[index]*t26110*t26107* \
               t26088)*(8.0/3.0)-1.0/pow(rho_a[index],2.0/3.0)*(-c0*e0+d1*e1*gamma_aa[index]*t26093*t26088+d2*e2* \
               gamma_aa[index]*t26088*t26097)*(4.0/9.0)+A*rho_b[index]*t26150*t26119*8.0-A*Dd*rho_b[index]*t26124* \
               t26168*(8.0/3.0)-A*rho_a[index]*rho_b[index]*t26119*t26169*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/ \
               pow(t26115,1.0E1/3.0)*t26124*(4.0E1/9.0)+A*B*1.0/pow(t26115,1.4E1/3.0)*t26125*t26119*t26191*(2.2E1/ \
               3.0)-A*B*1.0/pow(t26115,1.7E1/3.0)*t26125*t26119*t26199*(1.54E2/9.0)+A*B*t26125*t26152*t26119*(gamma_ab[index]* \
               (8.0/3.0)+gamma_bb[index]*2.0-rho_b[index]*t26167*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],2.0/ \
               3.0)*(4.0E1/9.0)+t26130*(C*t26168*(2.0/8.1E1)+Dd*t26119*t26168*(2.0/8.1E1)-t26124*t26171*t26148*(1.0/ \
               2.7E1)+Dd*t26170*t26148*t26169*(1.0/8.1E1))-t26123*(C*t26168*(1.4E1/8.1E1)+Dd*t26119*t26168*(1.4E1/ \
               8.1E1)-t26124*t26171*t26148*(7.0/2.7E1)+Dd*t26170*t26148*t26169*(7.0/8.1E1))-t26140*t26137*(C*t26168* \
               (4.0/8.1E1)+Dd*t26119*t26168*(4.0/8.1E1)-t26124*t26171*t26148*(2.0/2.7E1)+Dd*t26170*t26148*t26169* \
               (2.0/8.1E1))+gamma_aa[index]*t26150*t26143*2.0+gamma_aa[index]*t26137*t26164*2.0-t26140*t26150*t26164* \
               2.0-t26140*t26143*t26169*2.0))-A*rho_a[index]*rho_b[index]*t26152*t26170*t26148*(8.0/9.0)-A*B*t26203* \
               t26125*t26170*t26148*t26199*(2.0/9.0)-A*B*(C*C)*t26203*t26125*t26119*t26199*(1.0/9.0)+A*B*C*t26200* \
               t26125*t26119*t26199*(2.6E1/9.0)-A*B*C*t26125*t26119*t26191*t26192*(2.0/3.0)+A*B*Dd*t26200*t26124* \
               t26125*t26199*(2.6E1/9.0)-A*B*Dd*t26124*t26125*t26191*t26192*(2.0/3.0)-A*B*C*Dd*t26203*t26124*t26125* \
               t26199*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            double t26889 = sqrt(gamma_aa[index]);
            double t26890 = 1.0/pow(rho_a[index],4.0/3.0);
            double t26891 = 1.0/pow(rho_a[index],8.0/3.0);
            double t26892 = t26890*t26889;
            double t26893 = log(t26892+sqrt(t26892*t26892+1.0));
            double t26894 = d1*t26890*t26893*t26889*6.0;
            double t26895 = t26894+1.0;
            double t26896 = 1.0/t26895;
            double t26897 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t26898 = d2*t26890*t26893*t26889*6.0;
            double t26899 = t26898+1.0;
            double t26900 = 1.0/t26899;
            double t26901 = gamma_aa[index]*t26891;
            double t26902 = t26901+1.0;
            double t26903 = 1.0/sqrt(t26902);
            double t26904 = 1.0/pow(rho_a[index],7.0/3.0);
            double t26905 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t26906 = 1.0/(t26895*t26895);
            double t26907 = d1*gamma_aa[index]*t26903*t26897*8.0;
            double t26908 = d1*t26904*t26893*t26889*8.0;
            double t26909 = t26907+t26908;
            double t26910 = 1.0/(t26899*t26899);
            double t26911 = d2*gamma_aa[index]*t26903*t26897*8.0;
            double t26912 = d2*t26904*t26893*t26889*8.0;
            double t26913 = t26911+t26912;
            double t26914 = gamma_aa[index]*gamma_aa[index];
            double t26915 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t26916 = 1.0/pow(t26902,3.0/2.0);
            double t26917 = 1.0/pow(rho_a[index],1.0E1/3.0);
            v_rho_a_rho_a_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*gamma_aa[index]*t26905*t26896*(8.8E1/9.0) \
               +d2*e2*gamma_aa[index]*t26900*t26905*(8.8E1/9.0)-d1*e1*gamma_aa[index]*t26906*t26891*(d1*gamma_aa[index]* \
               t26903*t26905*4.0E1-d1*t26914*t26915*t26916*(3.2E1/3.0)+d1*t26917*t26893*t26889*(5.6E1/3.0))-d2*e2* \
               gamma_aa[index]*t26910*t26891*(d2*gamma_aa[index]*t26903*t26905*4.0E1-d2*t26914*t26915*t26916*(3.2E1/ \
               3.0)+d2*t26917*t26893*t26889*(5.6E1/3.0))+d1*e1*gamma_aa[index]*t26891*(t26909*t26909)*1.0/(t26895* \
               t26895*t26895)*2.0+d2*e2*gamma_aa[index]*(t26913*t26913)*t26891*1.0/(t26899*t26899*t26899)*2.0-d1* \
               e1*gamma_aa[index]*t26906*t26909*t26897*(1.6E1/3.0)-d2*e2*gamma_aa[index]*t26910*t26913*t26897*(1.6E1/ \
               3.0))+pow(rho_a[index],1.0/3.0)*(d1*e1*gamma_aa[index]*t26896*t26897*(8.0/3.0)+d2*e2*gamma_aa[index]* \
               t26900*t26897*(8.0/3.0)-d1*e1*gamma_aa[index]*t26906*t26891*t26909-d2*e2*gamma_aa[index]*t26910*t26913* \
               t26891)*(8.0/3.0)-1.0/pow(rho_a[index],2.0/3.0)*(-c0*e0+d1*e1*gamma_aa[index]*t26891*t26896+d2*e2* \
               gamma_aa[index]*t26900*t26891)*(4.0/9.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t26205 = rho_a[index]+rho_b[index];
            double t26206 = 1.0/pow(t26205,1.0/3.0);
            double t26207 = Dd*t26206;
            double t26208 = t26207+1.0;
            double t26209 = 1.0/t26208;
            double t26210 = 1.0/(t26205*t26205);
            double t26211 = 1.0/pow(t26205,7.0/3.0);
            double t26212 = 1.0/(t26208*t26208);
            double t26213 = t26205*t26205;
            double t26214 = t26213*(2.0/3.0);
            double t26215 = gamma_ab[index]*2.0;
            double t26216 = gamma_aa[index]+gamma_bb[index]+t26215;
            double t26217 = 1.0/t26205;
            double t26256 = C*t26206;
            double t26218 = exp(-t26256);
            double t26219 = C*t26206*(7.0/1.8E1);
            double t26220 = Dd*t26206*t26209*(7.0/1.8E1);
            double t26221 = t26220+t26219-4.7E1/1.8E1;
            double t26222 = t26221*t26216;
            double t26223 = gamma_aa[index]+gamma_bb[index];
            double t26224 = 1.0/pow(t26205,4.0/3.0);
            double t26225 = Dd*Dd;
            double t26226 = 1.0/pow(t26205,5.0/3.0);
            double t26227 = C*t26206*(1.0/9.0);
            double t26228 = Dd*t26206*t26209*(1.0/9.0);
            double t26229 = t26227+t26228-1.1E1/9.0;
            double t26230 = gamma_aa[index]*rho_a[index];
            double t26231 = gamma_bb[index]*rho_b[index];
            double t26232 = t26230+t26231;
            double t26233 = C*t26224*(1.0/5.4E1);
            double t26234 = Dd*t26224*t26209*(1.0/5.4E1);
            double t26260 = t26212*t26225*t26226*(1.0/5.4E1);
            double t26235 = t26233-t26260+t26234;
            double t26236 = C*t26224*(7.0/5.4E1);
            double t26237 = Dd*t26224*t26209*(7.0/5.4E1);
            double t26263 = t26212*t26225*t26226*(7.0/5.4E1);
            double t26238 = t26236-t26263+t26237;
            double t26239 = t26216*t26238;
            double t26240 = C*t26224*(1.0/2.7E1);
            double t26241 = Dd*t26224*t26209*(1.0/2.7E1);
            double t26254 = t26212*t26225*t26226*(1.0/2.7E1);
            double t26242 = t26240+t26241-t26254;
            double t26243 = t26232*t26242*t26217;
            double t26244 = t26210*t26232*t26229;
            double t26245 = C*t26206*(1.0/1.8E1);
            double t26246 = Dd*t26206*t26209*(1.0/1.8E1);
            double t26247 = t26245+t26246-5.0/2.0;
            double t26248 = pow(rho_a[index],8.0/3.0);
            double t26249 = pow(rho_b[index],8.0/3.0);
            double t26250 = t26248+t26249;
            double t26251 = 1.0/(t26205*t26205*t26205);
            double t26252 = 1.0/(t26208*t26208*t26208);
            double t26253 = 1.0/pow(t26205,8.0/3.0);
            double t26255 = t26232*t26217*t26229;
            double t26257 = t26223*t26247;
            double t26258 = CFext*t26250;
            double t26259 = rho_b[index]*(4.0/3.0);
            double t26261 = pow(rho_a[index],5.0/3.0);
            double t26262 = CFext*t26261*(8.0/3.0);
            double t26273 = t26223*t26235;
            double t26281 = gamma_aa[index]*t26217*t26229;
            double t26264 = t26243+t26244+t26262-t26281-t26273+t26239;
            double t26265 = 1.0/pow(t26205,1.4E1/3.0);
            double t26266 = rho_a[index]*2.0;
            double t26267 = rho_b[index]*2.0;
            double t26268 = t26266+t26267;
            double t26269 = t26216*t26268*(2.0/3.0);
            double t26270 = t26222+t26255-t26257-t26258;
            double t26271 = rho_a[index]*(4.0/3.0);
            double t26272 = t26271+t26259;
            double t26274 = pow(rho_b[index],5.0/3.0);
            double t26275 = CFext*t26274*(8.0/3.0);
            double t26276 = 1.0/pow(t26205,1.1E1/3.0);
            double t26277 = rho_b[index]*t26270;
            double t26278 = rho_a[index]*(2.0/3.0);
            double t26279 = t26259-t26278;
            double t26280 = gamma_bb[index]*t26279;
            double t26282 = rho_a[index]*rho_b[index]*t26264;
            double t26283 = gamma_aa[index]*t26272;
            double t26284 = t26280+t26282+t26283-t26277-t26269;
            double t26285 = 1.0/(t26205*t26205*t26205*t26205*t26205);
            double t26286 = rho_a[index]*t26270;
            double t26287 = rho_b[index]*(2.0/3.0);
            double t26288 = t26271-t26287;
            double t26289 = gamma_aa[index]*t26288;
            double t26290 = gamma_bb[index]*t26272;
            double t26294 = gamma_bb[index]*t26217*t26229;
            double t26291 = t26243+t26244-t26273+t26239+t26275-t26294;
            double t26292 = rho_a[index]*rho_b[index]*t26291;
            double t26293 = t26290+t26292-t26286-t26269+t26289;
            double t26295 = rho_b[index]*rho_b[index];
            double t26296 = t26214-t26295;
            double t26297 = gamma_aa[index]*t26296;
            double t26298 = rho_a[index]*rho_a[index];
            double t26299 = t26214-t26298;
            double t26300 = gamma_bb[index]*t26299;
            double t26301 = 1.0/(t26205*t26205*t26205*t26205*t26205*t26205);
            double t26303 = t26213*t26216*(2.0/3.0);
            double t26304 = rho_a[index]*rho_b[index]*t26270;
            double t26302 = t26300-t26303-t26304+t26297;
            double t26305 = 1.0/pow(t26205,1.9E1/3.0);
            v_rho_a_rho_b_[index] = A*t26217*t26209*-4.0+A*rho_a[index]*t26210*t26209*4.0+A*rho_b[index]*t26210* \
               t26209*4.0-A*Dd*rho_a[index]*t26211*t26212*(4.0/3.0)-A*Dd*rho_b[index]*t26211*t26212*(4.0/3.0)-A*rho_a[index]* \
               rho_b[index]*t26251*t26209*8.0+A*Dd*rho_a[index]*rho_b[index]*t26212*1.0/pow(t26205,1.0E1/3.0)*(4.0E1/ \
               9.0)-A*B*1.0/pow(t26205,1.7E1/3.0)*t26209*t26218*(t26300+t26297-t26213*t26216*(2.0/3.0)-rho_a[index]* \
               rho_b[index]*(t26222+t26255-CFext*t26250-t26223*t26247))*(1.54E2/9.0)-A*B*t26209*t26218*t26276*(gamma_ab[index]* \
               (-8.0/3.0)-t26222-t26255+t26257+t26258+rho_a[index]*t26264+rho_b[index]*(t26243+t26244+t26239+t26275- \
               t26223*t26235-gamma_bb[index]*t26217*t26229)+rho_a[index]*rho_b[index]*(t26223*(C*t26211*(2.0/8.1E1) \
               +Dd*t26211*t26209*(2.0/8.1E1)-t26212*t26225*t26253*(1.0/2.7E1)+Dd*t26251*t26225*t26252*(1.0/8.1E1) \
               )-t26216*(C*t26211*(1.4E1/8.1E1)+Dd*t26211*t26209*(1.4E1/8.1E1)-t26212*t26225*t26253*(7.0/2.7E1)+Dd* \
               t26251*t26225*t26252*(7.0/8.1E1))-t26232*t26217*(C*t26211*(4.0/8.1E1)+Dd*t26211*t26209*(4.0/8.1E1) \
               -t26212*t26225*t26253*(2.0/2.7E1)+Dd*t26251*t26225*t26252*(2.0/8.1E1))+gamma_aa[index]*t26210*t26229+ \
               gamma_aa[index]*t26242*t26217+gamma_bb[index]*t26210*t26229+gamma_bb[index]*t26242*t26217-t26210*t26232* \
               t26242*2.0-t26232*t26251*t26229*2.0))+A*B*t26209*t26218*t26265*t26284*(1.1E1/3.0)+A*B*t26209*t26218* \
               t26265*t26293*(1.1E1/3.0)-A*rho_a[index]*rho_b[index]*t26225*t26252*t26276*(8.0/9.0)-A*B*t26302*t26305* \
               t26225*t26252*t26218*(2.0/9.0)-A*B*(C*C)*t26302*t26305*t26209*t26218*(1.0/9.0)+A*B*C*t26301*t26302* \
               t26209*t26218*(2.6E1/9.0)-A*B*C*t26209*t26218*t26284*t26285*(1.0/3.0)-A*B*C*t26209*t26218*t26293*t26285* \
               (1.0/3.0)+A*B*Dd*t26301*t26212*t26302*t26218*(2.6E1/9.0)-A*B*Dd*t26212*t26218*t26284*t26285*(1.0/3.0) \
               -A*B*Dd*t26212*t26218*t26293*t26285*(1.0/3.0)-A*B*C*Dd*t26212*t26302*t26305*t26218*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t26307 = sqrt(gamma_bb[index]);
            double t26308 = 1.0/pow(rho_b[index],4.0/3.0);
            double t26309 = 1.0/pow(rho_b[index],8.0/3.0);
            double t26310 = t26307*t26308;
            double t26311 = log(t26310+sqrt(t26310*t26310+1.0));
            double t26312 = d1*t26311*t26307*t26308*6.0;
            double t26313 = t26312+1.0;
            double t26314 = 1.0/t26313;
            double t26315 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t26316 = d2*t26311*t26307*t26308*6.0;
            double t26317 = t26316+1.0;
            double t26318 = 1.0/t26317;
            double t26319 = gamma_bb[index]*t26309;
            double t26320 = t26319+1.0;
            double t26321 = 1.0/sqrt(t26320);
            double t26322 = 1.0/pow(rho_b[index],7.0/3.0);
            double t26323 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t26324 = 1.0/(t26313*t26313);
            double t26325 = d1*gamma_bb[index]*t26321*t26315*8.0;
            double t26326 = d1*t26311*t26322*t26307*8.0;
            double t26327 = t26325+t26326;
            double t26328 = 1.0/(t26317*t26317);
            double t26329 = d2*gamma_bb[index]*t26321*t26315*8.0;
            double t26330 = d2*t26311*t26322*t26307*8.0;
            double t26331 = t26330+t26329;
            double t26332 = gamma_bb[index]*gamma_bb[index];
            double t26333 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t26334 = 1.0/pow(t26320,3.0/2.0);
            double t26335 = 1.0/pow(rho_b[index],1.0E1/3.0);
            double t26336 = rho_a[index]+rho_b[index];
            double t26337 = 1.0/pow(t26336,1.0/3.0);
            double t26338 = Dd*t26337;
            double t26339 = t26338+1.0;
            double t26340 = 1.0/t26339;
            double t26341 = t26336*t26336;
            double t26342 = t26341*(2.0/3.0);
            double t26343 = gamma_ab[index]*2.0;
            double t26344 = gamma_aa[index]+gamma_bb[index]+t26343;
            double t26345 = 1.0/(t26339*t26339);
            double t26372 = C*t26337;
            double t26346 = exp(-t26372);
            double t26347 = C*t26337*(7.0/1.8E1);
            double t26348 = Dd*t26340*t26337*(7.0/1.8E1);
            double t26349 = t26347+t26348-4.7E1/1.8E1;
            double t26350 = t26344*t26349;
            double t26351 = gamma_aa[index]+gamma_bb[index];
            double t26352 = C*t26337*(1.0/1.8E1);
            double t26353 = Dd*t26340*t26337*(1.0/1.8E1);
            double t26354 = t26352+t26353-5.0/2.0;
            double t26355 = pow(rho_a[index],8.0/3.0);
            double t26356 = pow(rho_b[index],8.0/3.0);
            double t26357 = t26355+t26356;
            double t26358 = 1.0/t26336;
            double t26359 = gamma_aa[index]*rho_a[index];
            double t26360 = gamma_bb[index]*rho_b[index];
            double t26361 = t26360+t26359;
            double t26362 = C*t26337*(1.0/9.0);
            double t26363 = Dd*t26340*t26337*(1.0/9.0);
            double t26364 = t26362+t26363-1.1E1/9.0;
            double t26365 = t26361*t26364*t26358;
            double t26398 = t26351*t26354;
            double t26399 = CFext*t26357;
            double t26366 = t26350+t26365-t26398-t26399;
            double t26367 = rho_a[index]*(4.0/3.0);
            double t26368 = 1.0/pow(t26336,4.0/3.0);
            double t26369 = Dd*Dd;
            double t26370 = 1.0/pow(t26336,5.0/3.0);
            double t26371 = 1.0/(t26336*t26336);
            double t26373 = 1.0/pow(t26336,1.1E1/3.0);
            double t26374 = C*t26368*(1.0/5.4E1);
            double t26375 = Dd*t26340*t26368*(1.0/5.4E1);
            double t26406 = t26370*t26345*t26369*(1.0/5.4E1);
            double t26376 = -t26406+t26374+t26375;
            double t26377 = pow(rho_b[index],5.0/3.0);
            double t26378 = CFext*t26377*(8.0/3.0);
            double t26379 = C*t26368*(7.0/5.4E1);
            double t26380 = Dd*t26340*t26368*(7.0/5.4E1);
            double t26408 = t26370*t26345*t26369*(7.0/5.4E1);
            double t26381 = t26380-t26408+t26379;
            double t26382 = t26344*t26381;
            double t26383 = C*t26368*(1.0/2.7E1);
            double t26384 = Dd*t26340*t26368*(1.0/2.7E1);
            double t26393 = t26370*t26345*t26369*(1.0/2.7E1);
            double t26385 = t26383+t26384-t26393;
            double t26386 = t26361*t26358*t26385;
            double t26387 = t26361*t26371*t26364;
            double t26407 = t26351*t26376;
            double t26409 = gamma_bb[index]*t26364*t26358;
            double t26388 = -t26407+t26382-t26409+t26386+t26378+t26387;
            double t26389 = 1.0/pow(t26336,7.0/3.0);
            double t26390 = 1.0/(t26336*t26336*t26336);
            double t26391 = 1.0/(t26339*t26339*t26339);
            double t26392 = 1.0/pow(t26336,8.0/3.0);
            double t26394 = rho_a[index]*2.0;
            double t26395 = rho_b[index]*2.0;
            double t26396 = t26394+t26395;
            double t26397 = t26344*t26396*(2.0/3.0);
            double t26400 = rho_a[index]*t26366;
            double t26401 = rho_b[index]*(2.0/3.0);
            double t26402 = t26401-t26367;
            double t26403 = gamma_aa[index]*t26402;
            double t26404 = rho_b[index]*(4.0/3.0);
            double t26405 = t26404+t26367;
            double t26410 = 1.0/(t26336*t26336*t26336*t26336*t26336);
            double t26411 = rho_b[index]*rho_b[index];
            double t26412 = t26411-t26342;
            double t26413 = gamma_aa[index]*t26412;
            double t26414 = rho_a[index]*rho_a[index];
            double t26415 = t26342-t26414;
            double t26416 = t26341*t26344*(2.0/3.0);
            double t26417 = rho_a[index]*rho_b[index]*t26366;
            double t26420 = gamma_bb[index]*t26415;
            double t26418 = -t26420+t26413+t26416+t26417;
            double t26419 = 1.0/(t26336*t26336*t26336*t26336*t26336*t26336);
            double t26421 = 1.0/pow(t26336,1.9E1/3.0);
            v_rho_b_rho_b_[index] = -pow(rho_b[index],4.0/3.0)*(d1*e1*gamma_bb[index]*t26314*t26323*(8.8E1/9.0) \
               +d2*e2*gamma_bb[index]*t26323*t26318*(8.8E1/9.0)-d1*e1*gamma_bb[index]*t26324*t26309*(d1*gamma_bb[index]* \
               t26321*t26323*4.0E1+d1*t26311*t26307*t26335*(5.6E1/3.0)-d1*t26332*t26333*t26334*(3.2E1/3.0))-d2*e2* \
               gamma_bb[index]*t26309*t26328*(d2*gamma_bb[index]*t26321*t26323*4.0E1+d2*t26311*t26307*t26335*(5.6E1/ \
               3.0)-d2*t26332*t26333*t26334*(3.2E1/3.0))+d1*e1*gamma_bb[index]*1.0/(t26313*t26313*t26313)*t26309* \
               (t26327*t26327)*2.0+d2*e2*gamma_bb[index]*(t26331*t26331)*1.0/(t26317*t26317*t26317)*t26309*2.0-d1* \
               e1*gamma_bb[index]*t26315*t26324*t26327*(1.6E1/3.0)-d2*e2*gamma_bb[index]*t26331*t26315*t26328*(1.6E1/ \
               3.0))+pow(rho_b[index],1.0/3.0)*(d1*e1*gamma_bb[index]*t26314*t26315*(8.0/3.0)+d2*e2*gamma_bb[index]* \
               t26315*t26318*(8.0/3.0)-d1*e1*gamma_bb[index]*t26324*t26309*t26327-d2*e2*gamma_bb[index]*t26331*t26309* \
               t26328)*(8.0/3.0)-1.0/pow(rho_b[index],2.0/3.0)*(-c0*e0+d1*e1*gamma_bb[index]*t26314*t26309+d2*e2* \
               gamma_bb[index]*t26309*t26318)*(4.0/9.0)+A*rho_a[index]*t26340*t26371*8.0-A*Dd*rho_a[index]*t26345* \
               t26389*(8.0/3.0)-A*rho_a[index]*rho_b[index]*t26340*t26390*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/ \
               pow(t26336,1.0E1/3.0)*t26345*(4.0E1/9.0)+A*B*t26340*1.0/pow(t26336,1.7E1/3.0)*t26346*t26418*(1.54E2/ \
               9.0)-A*B*t26340*1.0/pow(t26336,1.4E1/3.0)*t26346*(t26400+t26403+t26397-gamma_bb[index]*t26405-rho_a[index]* \
               rho_b[index]*t26388)*(2.2E1/3.0)+A*B*t26340*t26346*t26373*(gamma_aa[index]*2.0+gamma_ab[index]*(8.0/ \
               3.0)-rho_a[index]*t26388*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],2.0/3.0)*(4.0E1/9.0) \
               +t26351*(C*t26389*(2.0/8.1E1)+Dd*t26340*t26389*(2.0/8.1E1)-t26345*t26392*t26369*(1.0/2.7E1)+Dd*t26390* \
               t26391*t26369*(1.0/8.1E1))-t26344*(C*t26389*(1.4E1/8.1E1)+Dd*t26340*t26389*(1.4E1/8.1E1)-t26345*t26392* \
               t26369*(7.0/2.7E1)+Dd*t26390*t26391*t26369*(7.0/8.1E1))-t26361*t26358*(C*t26389*(4.0/8.1E1)+Dd*t26340* \
               t26389*(4.0/8.1E1)-t26345*t26392*t26369*(2.0/2.7E1)+Dd*t26390*t26391*t26369*(2.0/8.1E1))+gamma_bb[index]* \
               t26371*t26364*2.0+gamma_bb[index]*t26358*t26385*2.0-t26361*t26390*t26364*2.0-t26361*t26371*t26385* \
               2.0))-A*rho_a[index]*rho_b[index]*t26373*t26391*t26369*(8.0/9.0)+A*B*C*t26410*t26340*t26346*(t26400+ \
               t26403+t26397-gamma_bb[index]*t26405-rho_a[index]*rho_b[index]*t26388)*(2.0/3.0)+A*B*Dd*t26410*t26345* \
               t26346*(t26400+t26403+t26397-gamma_bb[index]*t26405-rho_a[index]*rho_b[index]*t26388)*(2.0/3.0)+A* \
               B*t26421*t26346*t26391*t26369*(-t26420+t26413+t26416+t26417)*(2.0/9.0)+A*B*(C*C)*t26340*t26421*t26346* \
               (-t26420+t26413+t26416+t26417)*(1.0/9.0)-A*B*C*t26340*t26346*t26418*t26419*(2.6E1/9.0)-A*B*Dd*t26345* \
               t26346*t26418*t26419*(2.6E1/9.0)+A*B*C*Dd*t26421*t26345*t26346*(-t26420+t26413+t26416+t26417)*(2.0/ \
               9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t26734 = sqrt(gamma_bb[index]);
            double t26735 = 1.0/pow(rho_b[index],4.0/3.0);
            double t26736 = 1.0/pow(rho_b[index],8.0/3.0);
            double t26737 = t26734*t26735;
            double t26738 = log(t26737+sqrt(t26737*t26737+1.0));
            double t26739 = d1*t26734*t26735*t26738*6.0;
            double t26740 = t26739+1.0;
            double t26741 = 1.0/t26740;
            double t26742 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t26743 = d2*t26734*t26735*t26738*6.0;
            double t26744 = t26743+1.0;
            double t26745 = 1.0/t26744;
            double t26746 = gamma_bb[index]*t26736;
            double t26747 = t26746+1.0;
            double t26748 = 1.0/sqrt(t26747);
            double t26749 = 1.0/pow(rho_b[index],7.0/3.0);
            double t26750 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t26751 = 1.0/(t26740*t26740);
            double t26752 = d1*gamma_bb[index]*t26742*t26748*8.0;
            double t26753 = d1*t26734*t26738*t26749*8.0;
            double t26754 = t26752+t26753;
            double t26755 = 1.0/(t26744*t26744);
            double t26756 = d2*gamma_bb[index]*t26742*t26748*8.0;
            double t26757 = d2*t26734*t26738*t26749*8.0;
            double t26758 = t26756+t26757;
            double t26759 = gamma_bb[index]*gamma_bb[index];
            double t26760 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t26761 = 1.0/pow(t26747,3.0/2.0);
            double t26762 = 1.0/pow(rho_b[index],1.0E1/3.0);
            v_rho_b_rho_b_[index] = -pow(rho_b[index],4.0/3.0)*(d1*e1*gamma_bb[index]*t26741*t26750*(8.8E1/9.0) \
               +d2*e2*gamma_bb[index]*t26750*t26745*(8.8E1/9.0)-d1*e1*gamma_bb[index]*t26751*t26736*(d1*gamma_bb[index]* \
               t26750*t26748*4.0E1+d1*t26734*t26762*t26738*(5.6E1/3.0)-d1*t26760*t26761*t26759*(3.2E1/3.0))-d2*e2* \
               gamma_bb[index]*t26736*t26755*(d2*gamma_bb[index]*t26750*t26748*4.0E1+d2*t26734*t26762*t26738*(5.6E1/ \
               3.0)-d2*t26760*t26761*t26759*(3.2E1/3.0))+d1*e1*gamma_bb[index]*1.0/(t26740*t26740*t26740)*t26736* \
               (t26754*t26754)*2.0+d2*e2*gamma_bb[index]*1.0/(t26744*t26744*t26744)*t26736*(t26758*t26758)*2.0-d1* \
               e1*gamma_bb[index]*t26742*t26751*t26754*(1.6E1/3.0)-d2*e2*gamma_bb[index]*t26742*t26755*t26758*(1.6E1/ \
               3.0))+pow(rho_b[index],1.0/3.0)*(d1*e1*gamma_bb[index]*t26741*t26742*(8.0/3.0)+d2*e2*gamma_bb[index]* \
               t26742*t26745*(8.0/3.0)-d1*e1*gamma_bb[index]*t26751*t26736*t26754-d2*e2*gamma_bb[index]*t26736*t26755* \
               t26758)*(8.0/3.0)-1.0/pow(rho_b[index],2.0/3.0)*(-c0*e0+d1*e1*gamma_bb[index]*t26741*t26736+d2*e2* \
               gamma_bb[index]*t26736*t26745)*(4.0/9.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26423 = sqrt(gamma_aa[index]);
                double t26424 = 1.0/pow(rho_a[index],4.0/3.0);
                double t26425 = 1.0/pow(rho_a[index],8.0/3.0);
                double t26426 = t26423*t26424;
                double t26427 = log(t26426+sqrt(t26426*t26426+1.0));
                double t26428 = d1*t26423*t26424*t26427*6.0;
                double t26429 = t26428+1.0;
                double t26430 = gamma_aa[index]*t26425;
                double t26431 = t26430+1.0;
                double t26432 = 1.0/sqrt(t26431);
                double t26433 = 1.0/sqrt(gamma_aa[index]);
                double t26434 = d2*t26423*t26424*t26427*6.0;
                double t26435 = t26434+1.0;
                double t26436 = 1.0/t26429;
                double t26437 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t26438 = 1.0/t26435;
                double t26439 = 1.0/(t26429*t26429);
                double t26440 = 1.0/(t26435*t26435);
                double t26441 = 1.0/pow(rho_a[index],7.0/3.0);
                double t26442 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t26443 = 1.0/pow(t26431,3.0/2.0);
                double t26444 = d1*t26432*t26425*3.0;
                double t26445 = d1*t26424*t26433*t26427*3.0;
                double t26446 = t26444+t26445;
                double t26447 = d2*t26432*t26425*3.0;
                double t26448 = d2*t26424*t26433*t26427*3.0;
                double t26449 = t26447+t26448;
                double t26450 = d1*gamma_aa[index]*t26432*t26437*8.0;
                double t26451 = d1*t26423*t26441*t26427*8.0;
                double t26452 = t26450+t26451;
                double t26453 = d2*gamma_aa[index]*t26432*t26437*8.0;
                double t26454 = d2*t26423*t26441*t26427*8.0;
                double t26455 = t26453+t26454;
                double t26456 = rho_a[index]+rho_b[index];
                double t26457 = 1.0/pow(t26456,1.0/3.0);
                double t26458 = Dd*t26457;
                double t26459 = t26458+1.0;
                double t26460 = 1.0/t26459;
                double t26474 = C*t26457;
                double t26461 = exp(-t26474);
                double t26462 = C*t26457*(1.0/3.0);
                double t26463 = Dd*t26460*t26457*(1.0/3.0);
                double t26464 = 1.0/t26456;
                double t26465 = C*t26457*(1.0/9.0);
                double t26466 = Dd*t26460*t26457*(1.0/9.0);
                double t26467 = t26465+t26466-1.1E1/9.0;
                double t26468 = rho_a[index]*t26464*t26467;
                double t26469 = t26462+t26463+t26468-1.0/9.0;
                double t26470 = 1.0/pow(t26456,4.0/3.0);
                double t26471 = Dd*Dd;
                double t26472 = 1.0/pow(t26456,5.0/3.0);
                double t26473 = 1.0/(t26459*t26459);
                double t26475 = rho_b[index]*rho_b[index];
                double t26476 = rho_a[index]*rho_b[index]*t26469;
                double t26477 = t26475+t26476;
                double t26478 = 1.0/(t26456*t26456*t26456*t26456*t26456);
                v_rho_a_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*t26436*t26437*(-8.0/3.0)-d2*e2*t26437* \
                   t26438*(8.0/3.0)+d1*e1*t26425*t26452*t26439+d2*e2*t26440*t26425*t26455+d1*e1*gamma_aa[index]*t26425* \
                   t26439*(d1*t26432*t26437*1.2E1-d1*gamma_aa[index]*t26442*t26443*4.0+d1*t26441*t26433*t26427*4.0)+d2* \
                   e2*gamma_aa[index]*t26440*t26425*(d2*t26432*t26437*1.2E1-d2*gamma_aa[index]*t26442*t26443*4.0+d2*t26441* \
                   t26433*t26427*4.0)+d1*e1*gamma_aa[index]*t26437*t26446*t26439*(8.0/3.0)+d2*e2*gamma_aa[index]*t26440* \
                   t26437*t26449*(8.0/3.0)-d1*e1*gamma_aa[index]*t26425*t26452*t26446*1.0/(t26429*t26429*t26429)*2.0- \
                   d2*e2*gamma_aa[index]*t26425*1.0/(t26435*t26435*t26435)*t26455*t26449*2.0)-pow(rho_a[index],1.0/3.0) \
                   *(d1*e1*t26425*t26436+d2*e2*t26425*t26438-d1*e1*gamma_aa[index]*t26425*t26446*t26439-d2*e2*gamma_aa[index]* \
                   t26440*t26425*t26449)*(4.0/3.0)-A*B*t26460*t26461*1.0/pow(t26456,1.4E1/3.0)*t26477*(1.1E1/3.0)+A*B* \
                   t26460*t26461*1.0/pow(t26456,1.1E1/3.0)*(rho_b[index]*t26469-rho_a[index]*rho_b[index]*(C*t26470*(1.0/ \
                   9.0)-t26464*t26467+rho_a[index]*t26464*(C*t26470*(1.0/2.7E1)+Dd*t26460*t26470*(1.0/2.7E1)-t26471*t26472* \
                   t26473*(1.0/2.7E1))+rho_a[index]*1.0/(t26456*t26456)*t26467+Dd*t26460*t26470*(1.0/9.0)-t26471*t26472* \
                   t26473*(1.0/9.0)))+A*B*C*t26460*t26461*t26477*t26478*(1.0/3.0)+A*B*Dd*t26461*t26473*t26477*t26478* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t26921 = sqrt(gamma_aa[index]);
                double t26922 = 1.0/pow(rho_a[index],4.0/3.0);
                double t26923 = 1.0/pow(rho_a[index],8.0/3.0);
                double t26924 = t26921*t26922;
                double t26925 = log(t26924+sqrt(t26924*t26924+1.0));
                double t26926 = d1*t26921*t26922*t26925*6.0;
                double t26927 = t26926+1.0;
                double t26928 = gamma_aa[index]*t26923;
                double t26929 = t26928+1.0;
                double t26930 = 1.0/sqrt(t26929);
                double t26931 = 1.0/sqrt(gamma_aa[index]);
                double t26932 = d2*t26921*t26922*t26925*6.0;
                double t26933 = t26932+1.0;
                double t26934 = 1.0/t26927;
                double t26935 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t26936 = 1.0/t26933;
                double t26937 = 1.0/(t26927*t26927);
                double t26938 = 1.0/(t26933*t26933);
                double t26939 = 1.0/pow(rho_a[index],7.0/3.0);
                double t26940 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t26941 = 1.0/pow(t26929,3.0/2.0);
                double t26942 = d1*t26930*t26923*3.0;
                double t26943 = d1*t26922*t26931*t26925*3.0;
                double t26944 = t26942+t26943;
                double t26945 = d2*t26930*t26923*3.0;
                double t26946 = d2*t26922*t26931*t26925*3.0;
                double t26947 = t26945+t26946;
                double t26948 = d1*gamma_aa[index]*t26930*t26935*8.0;
                double t26949 = d1*t26921*t26925*t26939*8.0;
                double t26950 = t26948+t26949;
                double t26951 = d2*gamma_aa[index]*t26930*t26935*8.0;
                double t26952 = d2*t26921*t26925*t26939*8.0;
                double t26953 = t26951+t26952;
                v_rho_a_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*t26934*t26935*(-8.0/3.0)-d2*e2*t26935* \
                   t26936*(8.0/3.0)+d1*e1*t26923*t26950*t26937+d2*e2*t26923*t26953*t26938+d1*e1*gamma_aa[index]*t26923* \
                   t26937*(d1*t26930*t26935*1.2E1-d1*gamma_aa[index]*t26940*t26941*4.0+d1*t26931*t26925*t26939*4.0)+d2* \
                   e2*gamma_aa[index]*t26923*t26938*(d2*t26930*t26935*1.2E1-d2*gamma_aa[index]*t26940*t26941*4.0+d2*t26931* \
                   t26925*t26939*4.0)+d1*e1*gamma_aa[index]*t26935*t26944*t26937*(8.0/3.0)+d2*e2*gamma_aa[index]*t26935* \
                   t26938*t26947*(8.0/3.0)-d1*e1*gamma_aa[index]*t26923*t26950*t26944*1.0/(t26927*t26927*t26927)*2.0- \
                   d2*e2*gamma_aa[index]*t26923*1.0/(t26933*t26933*t26933)*t26953*t26947*2.0)-pow(rho_a[index],1.0/3.0) \
                   *(d1*e1*t26923*t26934+d2*e2*t26923*t26936-d1*e1*gamma_aa[index]*t26923*t26944*t26937-d2*e2*gamma_aa[index]* \
                   t26923*t26938*t26947)*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26480 = rho_a[index]+rho_b[index];
                double t26481 = 1.0/pow(t26480,1.0/3.0);
                double t26482 = Dd*t26481;
                double t26483 = t26482+1.0;
                double t26484 = 1.0/t26483;
                double t26490 = C*t26481;
                double t26485 = exp(-t26490);
                double t26486 = C*t26481*(7.0/9.0);
                double t26487 = Dd*t26481*t26484*(7.0/9.0);
                double t26488 = t26486+t26487-4.7E1/9.0;
                double t26489 = 1.0/pow(t26480,4.0/3.0);
                double t26491 = t26480*t26480;
                double t26492 = t26491*(4.0/3.0);
                double t26493 = rho_a[index]*rho_b[index]*t26488;
                double t26494 = t26492+t26493;
                double t26495 = 1.0/(t26480*t26480*t26480*t26480*t26480);
                double t26496 = 1.0/(t26483*t26483);
                v_rho_a_gamma_ab_[index] = A*B*1.0/pow(t26480,1.4E1/3.0)*t26484*t26485*t26494*(-1.1E1/3.0)+A*B*1.0/ \
                   pow(t26480,1.1E1/3.0)*t26484*t26485*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_b[index]*t26488- \
                   rho_a[index]*rho_b[index]*(C*t26489*(7.0/2.7E1)-(Dd*Dd)*1.0/pow(t26480,5.0/3.0)*t26496*(7.0/2.7E1) \
                   +Dd*t26484*t26489*(7.0/2.7E1)))+A*B*C*t26484*t26485*t26494*t26495*(1.0/3.0)+A*B*Dd*t26485*t26494*t26495* \
                   t26496*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26498 = rho_a[index]+rho_b[index];
                double t26499 = 1.0/pow(t26498,1.0/3.0);
                double t26500 = Dd*t26499;
                double t26501 = t26500+1.0;
                double t26502 = 1.0/t26501;
                double t26516 = C*t26499;
                double t26503 = exp(-t26516);
                double t26504 = C*t26499*(1.0/3.0);
                double t26505 = Dd*t26502*t26499*(1.0/3.0);
                double t26506 = 1.0/t26498;
                double t26507 = C*t26499*(1.0/9.0);
                double t26508 = Dd*t26502*t26499*(1.0/9.0);
                double t26509 = t26507+t26508-1.1E1/9.0;
                double t26510 = rho_b[index]*t26506*t26509;
                double t26511 = t26510+t26504+t26505-1.0/9.0;
                double t26512 = 1.0/pow(t26498,4.0/3.0);
                double t26513 = Dd*Dd;
                double t26514 = 1.0/pow(t26498,5.0/3.0);
                double t26515 = 1.0/(t26501*t26501);
                double t26517 = rho_a[index]*rho_a[index];
                double t26518 = rho_a[index]*rho_b[index]*t26511;
                double t26519 = t26517+t26518;
                double t26520 = 1.0/(t26498*t26498*t26498*t26498*t26498);
                v_rho_a_gamma_bb_[index] = A*B*t26502*t26503*t26519*1.0/pow(t26498,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t26502* \
                   t26503*1.0/pow(t26498,1.1E1/3.0)*(rho_a[index]*2.0+rho_b[index]*t26511-rho_a[index]*rho_b[index]*(C* \
                   t26512*(1.0/9.0)+rho_b[index]*t26506*(C*t26512*(1.0/2.7E1)+Dd*t26502*t26512*(1.0/2.7E1)-t26513*t26514* \
                   t26515*(1.0/2.7E1))+rho_b[index]*t26509*1.0/(t26498*t26498)+Dd*t26502*t26512*(1.0/9.0)-t26513*t26514* \
                   t26515*(1.0/9.0)))+A*B*C*t26502*t26520*t26503*t26519*(1.0/3.0)+A*B*Dd*t26520*t26503*t26515*t26519* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26522 = rho_a[index]+rho_b[index];
                double t26523 = 1.0/pow(t26522,1.0/3.0);
                double t26524 = Dd*t26523;
                double t26525 = t26524+1.0;
                double t26526 = 1.0/t26525;
                double t26540 = C*t26523;
                double t26527 = exp(-t26540);
                double t26528 = C*t26523*(1.0/3.0);
                double t26529 = Dd*t26523*t26526*(1.0/3.0);
                double t26530 = 1.0/t26522;
                double t26531 = C*t26523*(1.0/9.0);
                double t26532 = Dd*t26523*t26526*(1.0/9.0);
                double t26533 = t26531+t26532-1.1E1/9.0;
                double t26534 = rho_a[index]*t26530*t26533;
                double t26535 = t26534+t26528+t26529-1.0/9.0;
                double t26536 = 1.0/pow(t26522,4.0/3.0);
                double t26537 = Dd*Dd;
                double t26538 = 1.0/pow(t26522,5.0/3.0);
                double t26539 = 1.0/(t26525*t26525);
                double t26541 = rho_b[index]*rho_b[index];
                double t26542 = rho_a[index]*rho_b[index]*t26535;
                double t26543 = t26541+t26542;
                double t26544 = 1.0/(t26522*t26522*t26522*t26522*t26522);
                v_rho_b_gamma_aa_[index] = A*B*1.0/pow(t26522,1.4E1/3.0)*t26543*t26526*t26527*(-1.1E1/3.0)+A*B*1.0/ \
                   pow(t26522,1.1E1/3.0)*t26526*t26527*(rho_b[index]*2.0+rho_a[index]*t26535-rho_a[index]*rho_b[index]* \
                   (C*t26536*(1.0/9.0)+rho_a[index]*t26530*(C*t26536*(1.0/2.7E1)+Dd*t26526*t26536*(1.0/2.7E1)-t26537* \
                   t26538*t26539*(1.0/2.7E1))+rho_a[index]*1.0/(t26522*t26522)*t26533+Dd*t26526*t26536*(1.0/9.0)-t26537* \
                   t26538*t26539*(1.0/9.0)))+A*B*C*t26543*t26526*t26544*t26527*(1.0/3.0)+A*B*Dd*t26543*t26544*t26527* \
                   t26539*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26546 = rho_a[index]+rho_b[index];
                double t26547 = 1.0/pow(t26546,1.0/3.0);
                double t26548 = Dd*t26547;
                double t26549 = t26548+1.0;
                double t26550 = 1.0/t26549;
                double t26556 = C*t26547;
                double t26551 = exp(-t26556);
                double t26552 = C*t26547*(7.0/9.0);
                double t26553 = Dd*t26550*t26547*(7.0/9.0);
                double t26554 = t26552+t26553-4.7E1/9.0;
                double t26555 = 1.0/pow(t26546,4.0/3.0);
                double t26557 = t26546*t26546;
                double t26558 = t26557*(4.0/3.0);
                double t26559 = rho_a[index]*rho_b[index]*t26554;
                double t26560 = t26558+t26559;
                double t26561 = 1.0/(t26546*t26546*t26546*t26546*t26546);
                double t26562 = 1.0/(t26549*t26549);
                v_rho_b_gamma_ab_[index] = A*B*t26550*t26551*t26560*1.0/pow(t26546,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t26550* \
                   t26551*1.0/pow(t26546,1.1E1/3.0)*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_a[index]*t26554- \
                   rho_a[index]*rho_b[index]*(C*t26555*(7.0/2.7E1)-(Dd*Dd)*t26562*1.0/pow(t26546,5.0/3.0)*(7.0/2.7E1) \
                   +Dd*t26550*t26555*(7.0/2.7E1)))+A*B*C*t26550*t26551*t26560*t26561*(1.0/3.0)+A*B*Dd*t26551*t26560*t26561* \
                   t26562*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26564 = sqrt(gamma_bb[index]);
                double t26565 = 1.0/pow(rho_b[index],4.0/3.0);
                double t26566 = 1.0/pow(rho_b[index],8.0/3.0);
                double t26567 = t26564*t26565;
                double t26568 = log(t26567+sqrt(t26567*t26567+1.0));
                double t26569 = d1*t26564*t26565*t26568*6.0;
                double t26570 = t26569+1.0;
                double t26571 = gamma_bb[index]*t26566;
                double t26572 = t26571+1.0;
                double t26573 = 1.0/sqrt(t26572);
                double t26574 = 1.0/sqrt(gamma_bb[index]);
                double t26575 = d2*t26564*t26565*t26568*6.0;
                double t26576 = t26575+1.0;
                double t26577 = 1.0/t26570;
                double t26578 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t26579 = 1.0/t26576;
                double t26580 = 1.0/(t26570*t26570);
                double t26581 = 1.0/(t26576*t26576);
                double t26582 = 1.0/pow(rho_b[index],7.0/3.0);
                double t26583 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t26584 = 1.0/pow(t26572,3.0/2.0);
                double t26585 = d1*t26573*t26566*3.0;
                double t26586 = d1*t26565*t26574*t26568*3.0;
                double t26587 = t26585+t26586;
                double t26588 = d2*t26573*t26566*3.0;
                double t26589 = d2*t26565*t26574*t26568*3.0;
                double t26590 = t26588+t26589;
                double t26591 = d1*gamma_bb[index]*t26573*t26578*8.0;
                double t26592 = d1*t26564*t26582*t26568*8.0;
                double t26593 = t26591+t26592;
                double t26594 = d2*gamma_bb[index]*t26573*t26578*8.0;
                double t26595 = d2*t26564*t26582*t26568*8.0;
                double t26596 = t26594+t26595;
                double t26597 = rho_a[index]+rho_b[index];
                double t26598 = 1.0/pow(t26597,1.0/3.0);
                double t26599 = Dd*t26598;
                double t26600 = t26599+1.0;
                double t26601 = 1.0/t26600;
                double t26615 = C*t26598;
                double t26602 = exp(-t26615);
                double t26603 = C*t26598*(1.0/3.0);
                double t26604 = Dd*t26601*t26598*(1.0/3.0);
                double t26605 = 1.0/t26597;
                double t26606 = C*t26598*(1.0/9.0);
                double t26607 = Dd*t26601*t26598*(1.0/9.0);
                double t26608 = t26606+t26607-1.1E1/9.0;
                double t26609 = rho_b[index]*t26605*t26608;
                double t26610 = t26603+t26604+t26609-1.0/9.0;
                double t26611 = 1.0/pow(t26597,4.0/3.0);
                double t26612 = Dd*Dd;
                double t26613 = 1.0/pow(t26597,5.0/3.0);
                double t26614 = 1.0/(t26600*t26600);
                double t26616 = rho_a[index]*rho_a[index];
                double t26617 = rho_a[index]*rho_b[index]*t26610;
                double t26618 = t26616+t26617;
                double t26619 = 1.0/(t26597*t26597*t26597*t26597*t26597);
                v_rho_b_gamma_bb_[index] = -pow(rho_b[index],4.0/3.0)*(d1*e1*t26577*t26578*(-8.0/3.0)-d2*e2*t26578* \
                   t26579*(8.0/3.0)+d1*e1*t26580*t26566*t26593+d2*e2*t26581*t26566*t26596+d1*e1*gamma_bb[index]*t26580* \
                   t26566*(d1*t26573*t26578*1.2E1-d1*gamma_bb[index]*t26583*t26584*4.0+d1*t26582*t26574*t26568*4.0)+d2* \
                   e2*gamma_bb[index]*t26581*t26566*(d2*t26573*t26578*1.2E1-d2*gamma_bb[index]*t26583*t26584*4.0+d2*t26582* \
                   t26574*t26568*4.0)+d1*e1*gamma_bb[index]*t26580*t26578*t26587*(8.0/3.0)+d2*e2*gamma_bb[index]*t26581* \
                   t26590*t26578*(8.0/3.0)-d1*e1*gamma_bb[index]*1.0/(t26570*t26570*t26570)*t26566*t26593*t26587*2.0- \
                   d2*e2*gamma_bb[index]*t26590*t26566*1.0/(t26576*t26576*t26576)*t26596*2.0)-pow(rho_b[index],1.0/3.0) \
                   *(d1*e1*t26566*t26577+d2*e2*t26566*t26579-d1*e1*gamma_bb[index]*t26580*t26566*t26587-d2*e2*gamma_bb[index]* \
                   t26581*t26590*t26566)*(4.0/3.0)-A*B*t26601*t26602*t26618*1.0/pow(t26597,1.4E1/3.0)*(1.1E1/3.0)+A*B* \
                   t26601*t26602*1.0/pow(t26597,1.1E1/3.0)*(rho_a[index]*t26610-rho_a[index]*rho_b[index]*(C*t26611*(1.0/ \
                   9.0)-t26605*t26608+rho_b[index]*t26605*(C*t26611*(1.0/2.7E1)+Dd*t26601*t26611*(1.0/2.7E1)-t26612*t26613* \
                   t26614*(1.0/2.7E1))+rho_b[index]*t26608*1.0/(t26597*t26597)+Dd*t26601*t26611*(1.0/9.0)-t26612*t26613* \
                   t26614*(1.0/9.0)))+A*B*C*t26601*t26602*t26618*t26619*(1.0/3.0)+A*B*Dd*t26602*t26614*t26618*t26619* \
                   (1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t26769 = sqrt(gamma_bb[index]);
                double t26770 = 1.0/pow(rho_b[index],4.0/3.0);
                double t26771 = 1.0/pow(rho_b[index],8.0/3.0);
                double t26772 = t26770*t26769;
                double t26773 = log(t26772+sqrt(t26772*t26772+1.0));
                double t26774 = d1*t26770*t26773*t26769*6.0;
                double t26775 = t26774+1.0;
                double t26776 = gamma_bb[index]*t26771;
                double t26777 = t26776+1.0;
                double t26778 = 1.0/sqrt(t26777);
                double t26779 = 1.0/sqrt(gamma_bb[index]);
                double t26780 = d2*t26770*t26773*t26769*6.0;
                double t26781 = t26780+1.0;
                double t26782 = 1.0/t26775;
                double t26783 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t26784 = 1.0/t26781;
                double t26785 = 1.0/(t26775*t26775);
                double t26786 = 1.0/(t26781*t26781);
                double t26787 = 1.0/pow(rho_b[index],7.0/3.0);
                double t26788 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t26789 = 1.0/pow(t26777,3.0/2.0);
                double t26790 = d1*t26771*t26778*3.0;
                double t26791 = d1*t26770*t26773*t26779*3.0;
                double t26792 = t26790+t26791;
                double t26793 = d2*t26771*t26778*3.0;
                double t26794 = d2*t26770*t26773*t26779*3.0;
                double t26795 = t26793+t26794;
                double t26796 = d1*gamma_bb[index]*t26783*t26778*8.0;
                double t26797 = d1*t26773*t26769*t26787*8.0;
                double t26798 = t26796+t26797;
                double t26799 = d2*gamma_bb[index]*t26783*t26778*8.0;
                double t26800 = d2*t26773*t26769*t26787*8.0;
                double t26801 = t26800+t26799;
                v_rho_b_gamma_bb_[index] = -pow(rho_b[index],4.0/3.0)*(d1*e1*t26782*t26783*(-8.0/3.0)-d2*e2*t26783* \
                   t26784*(8.0/3.0)+d1*e1*t26771*t26785*t26798+d2*e2*t26801*t26771*t26786+d1*e1*gamma_bb[index]*t26771* \
                   t26785*(d1*t26783*t26778*1.2E1-d1*gamma_bb[index]*t26788*t26789*4.0+d1*t26773*t26787*t26779*4.0)+d2* \
                   e2*gamma_bb[index]*t26771*t26786*(d2*t26783*t26778*1.2E1-d2*gamma_bb[index]*t26788*t26789*4.0+d2*t26773* \
                   t26787*t26779*4.0)+d1*e1*gamma_bb[index]*t26783*t26792*t26785*(8.0/3.0)+d2*e2*gamma_bb[index]*t26783* \
                   t26786*t26795*(8.0/3.0)-d1*e1*gamma_bb[index]*t26771*t26792*1.0/(t26775*t26775*t26775)*t26798*2.0- \
                   d2*e2*gamma_bb[index]*t26801*t26771*1.0/(t26781*t26781*t26781)*t26795*2.0)-pow(rho_b[index],1.0/3.0) \
                   *(d1*e1*t26771*t26782+d2*e2*t26771*t26784-d1*e1*gamma_bb[index]*t26771*t26792*t26785-d2*e2*gamma_bb[index]* \
                   t26771*t26786*t26795)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26621 = 1.0/pow(rho_a[index],8.0/3.0);
                double t26622 = 1.0/pow(rho_a[index],4.0/3.0);
                double t26623 = sqrt(gamma_aa[index]);
                double t26624 = t26622*t26623;
                double t26625 = log(t26624+sqrt(t26624*t26624+1.0));
                double t26626 = gamma_aa[index]*t26621;
                double t26627 = t26626+1.0;
                double t26628 = 1.0/sqrt(t26627);
                double t26629 = 1.0/sqrt(gamma_aa[index]);
                double t26630 = d1*t26621*t26628*3.0;
                double t26631 = d1*t26622*t26625*t26629*3.0;
                double t26632 = t26630+t26631;
                double t26633 = d1*t26622*t26623*t26625*6.0;
                double t26634 = t26633+1.0;
                double t26635 = d2*t26621*t26628*3.0;
                double t26636 = d2*t26622*t26625*t26629*3.0;
                double t26637 = t26635+t26636;
                double t26638 = d2*t26622*t26623*t26625*6.0;
                double t26639 = t26638+1.0;
                double t26640 = 1.0/(t26634*t26634);
                double t26641 = 1.0/(t26639*t26639);
                double t26642 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t26643 = 1.0/pow(t26627,3.0/2.0);
                double t26644 = 1.0/gamma_aa[index];
                double t26645 = 1.0/pow(gamma_aa[index],3.0/2.0);
                v_gamma_aa_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*t26621*t26640*t26632*-2.0-d2*e2*t26621* \
                   t26641*t26637*2.0+d1*e1*gamma_aa[index]*t26621*(t26632*t26632)*1.0/(t26634*t26634*t26634)*2.0+d2*e2* \
                   gamma_aa[index]*t26621*(t26637*t26637)*1.0/(t26639*t26639*t26639)*2.0+d1*e1*gamma_aa[index]*t26621* \
                   t26640*(d1*t26642*t26643*(3.0/2.0)+d1*t26622*t26625*t26645*(3.0/2.0)-d1*t26621*t26644*t26628*(3.0/ \
                   2.0))+d2*e2*gamma_aa[index]*t26621*t26641*(d2*t26642*t26643*(3.0/2.0)+d2*t26622*t26625*t26645*(3.0/ \
                   2.0)-d2*t26621*t26644*t26628*(3.0/2.0)));
            } else if (rho_a[index] > cutoff_) {
                double t26960 = 1.0/pow(rho_a[index],8.0/3.0);
                double t26961 = 1.0/pow(rho_a[index],4.0/3.0);
                double t26962 = sqrt(gamma_aa[index]);
                double t26963 = t26961*t26962;
                double t26964 = log(t26963+sqrt(t26963*t26963+1.0));
                double t26965 = gamma_aa[index]*t26960;
                double t26966 = t26965+1.0;
                double t26967 = 1.0/sqrt(t26966);
                double t26968 = 1.0/sqrt(gamma_aa[index]);
                double t26969 = d1*t26960*t26967*3.0;
                double t26970 = d1*t26961*t26964*t26968*3.0;
                double t26971 = t26970+t26969;
                double t26972 = d1*t26961*t26962*t26964*6.0;
                double t26973 = t26972+1.0;
                double t26974 = d2*t26960*t26967*3.0;
                double t26975 = d2*t26961*t26964*t26968*3.0;
                double t26976 = t26974+t26975;
                double t26977 = d2*t26961*t26962*t26964*6.0;
                double t26978 = t26977+1.0;
                double t26979 = 1.0/(t26973*t26973);
                double t26980 = 1.0/(t26978*t26978);
                double t26981 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t26982 = 1.0/pow(t26966,3.0/2.0);
                double t26983 = 1.0/gamma_aa[index];
                double t26984 = 1.0/pow(gamma_aa[index],3.0/2.0);
                v_gamma_aa_gamma_aa_[index] = -pow(rho_a[index],4.0/3.0)*(d1*e1*t26960*t26971*t26979*-2.0-d2*e2*t26960* \
                   t26980*t26976*2.0+d1*e1*gamma_aa[index]*t26960*(t26971*t26971)*1.0/(t26973*t26973*t26973)*2.0+d2*e2* \
                   gamma_aa[index]*t26960*(t26976*t26976)*1.0/(t26978*t26978*t26978)*2.0+d1*e1*gamma_aa[index]*t26960* \
                   t26979*(d1*t26981*t26982*(3.0/2.0)+d1*t26961*t26964*t26984*(3.0/2.0)-d1*t26960*t26983*t26967*(3.0/ \
                   2.0))+d2*e2*gamma_aa[index]*t26960*t26980*(d2*t26981*t26982*(3.0/2.0)+d2*t26961*t26964*t26984*(3.0/ \
                   2.0)-d2*t26960*t26983*t26967*(3.0/2.0)));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t26651 = 1.0/pow(rho_b[index],8.0/3.0);
                double t26652 = 1.0/pow(rho_b[index],4.0/3.0);
                double t26653 = sqrt(gamma_bb[index]);
                double t26654 = t26652*t26653;
                double t26655 = log(t26654+sqrt(t26654*t26654+1.0));
                double t26656 = gamma_bb[index]*t26651;
                double t26657 = t26656+1.0;
                double t26658 = 1.0/sqrt(t26657);
                double t26659 = 1.0/sqrt(gamma_bb[index]);
                double t26660 = d1*t26651*t26658*3.0;
                double t26661 = d1*t26652*t26655*t26659*3.0;
                double t26662 = t26660+t26661;
                double t26663 = d1*t26652*t26653*t26655*6.0;
                double t26664 = t26663+1.0;
                double t26665 = d2*t26651*t26658*3.0;
                double t26666 = d2*t26652*t26655*t26659*3.0;
                double t26667 = t26665+t26666;
                double t26668 = d2*t26652*t26653*t26655*6.0;
                double t26669 = t26668+1.0;
                double t26670 = 1.0/(t26664*t26664);
                double t26671 = 1.0/(t26669*t26669);
                double t26672 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t26673 = 1.0/pow(t26657,3.0/2.0);
                double t26674 = 1.0/gamma_bb[index];
                double t26675 = 1.0/pow(gamma_bb[index],3.0/2.0);
                v_gamma_bb_gamma_bb_[index] = -pow(rho_b[index],4.0/3.0)*(d1*e1*t26651*t26670*t26662*-2.0-d2*e2*t26651* \
                   t26671*t26667*2.0+d1*e1*gamma_bb[index]*t26651*(t26662*t26662)*1.0/(t26664*t26664*t26664)*2.0+d2*e2* \
                   gamma_bb[index]*t26651*(t26667*t26667)*1.0/(t26669*t26669*t26669)*2.0+d1*e1*gamma_bb[index]*t26651* \
                   t26670*(d1*t26672*t26673*(3.0/2.0)+d1*t26652*t26655*t26675*(3.0/2.0)-d1*t26651*t26674*t26658*(3.0/ \
                   2.0))+d2*e2*gamma_bb[index]*t26651*t26671*(d2*t26672*t26673*(3.0/2.0)+d2*t26652*t26655*t26675*(3.0/ \
                   2.0)-d2*t26651*t26674*t26658*(3.0/2.0)));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t26808 = 1.0/pow(rho_b[index],8.0/3.0);
                double t26809 = 1.0/pow(rho_b[index],4.0/3.0);
                double t26810 = sqrt(gamma_bb[index]);
                double t26811 = t26810*t26809;
                double t26812 = log(t26811+sqrt(t26811*t26811+1.0));
                double t26813 = gamma_bb[index]*t26808;
                double t26814 = t26813+1.0;
                double t26815 = 1.0/sqrt(t26814);
                double t26816 = 1.0/sqrt(gamma_bb[index]);
                double t26817 = d1*t26815*t26808*3.0;
                double t26818 = d1*t26812*t26816*t26809*3.0;
                double t26819 = t26817+t26818;
                double t26820 = d1*t26810*t26812*t26809*6.0;
                double t26821 = t26820+1.0;
                double t26822 = d2*t26815*t26808*3.0;
                double t26823 = d2*t26812*t26816*t26809*3.0;
                double t26824 = t26822+t26823;
                double t26825 = d2*t26810*t26812*t26809*6.0;
                double t26826 = t26825+1.0;
                double t26827 = 1.0/(t26821*t26821);
                double t26828 = 1.0/(t26826*t26826);
                double t26829 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t26830 = 1.0/pow(t26814,3.0/2.0);
                double t26831 = 1.0/gamma_bb[index];
                double t26832 = 1.0/pow(gamma_bb[index],3.0/2.0);
                v_gamma_bb_gamma_bb_[index] = -pow(rho_b[index],4.0/3.0)*(d1*e1*t26808*t26827*t26819*-2.0-d2*e2*t26824* \
                   t26808*t26828*2.0+d1*e1*gamma_bb[index]*1.0/(t26821*t26821*t26821)*t26808*(t26819*t26819)*2.0+d2*e2* \
                   gamma_bb[index]*(t26824*t26824)*t26808*1.0/(t26826*t26826*t26826)*2.0+d1*e1*gamma_bb[index]*t26808* \
                   t26827*(d1*t26830*t26829*(3.0/2.0)+d1*t26812*t26832*t26809*(3.0/2.0)-d1*t26831*t26815*t26808*(3.0/ \
                   2.0))+d2*e2*gamma_bb[index]*t26808*t26828*(d2*t26830*t26829*(3.0/2.0)+d2*t26812*t26832*t26809*(3.0/ \
                   2.0)-d2*t26831*t26815*t26808*(3.0/2.0)));
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

