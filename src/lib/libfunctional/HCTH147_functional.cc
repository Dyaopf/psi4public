/**********************************************************
* HCTH147_functional.cc: definitions for HCTH147_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "HCTH147_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

HCTH147_Functional::HCTH147_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "HCTH147";
    description_ = "HCTH147 Power Series GGA";
    citation_ = "A.D. Boese, et. al., J. Chem. Phys., 112(4), 1670-1678, 2000";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 5.4235199999999995E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 7.0146400000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -2.8382200000000001E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 3.5032899999999998E+01;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -2.0428400000000000E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 5.6257599999999996E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 1.7143599999999998E-02;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -1.3063600000000000E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 1.0574699999999999E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 8.8542900000000002E-01;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 1.0902499999999999E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -7.9919399999999996E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 5.5721200000000000E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -5.8676000000000004E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 3.0454400000000001E+00;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
HCTH147_Functional::~HCTH147_Functional()
{
}
void HCTH147_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t62398 = 1.0/pow(rho_a[index],1.0/3.0);
            double t62399 = c*t62398;
            double t62400 = sqrt(t62399);
            double t62401 = pow(t62399,3.0/2.0);
            double t62402 = c*c;
            double t62403 = 1.0/pow(rho_a[index],2.0/3.0);
            double t62404 = 1.0/c0p;
            double t62405 = b1p*t62400;
            double t62406 = b3p*t62401;
            double t62407 = b4p*t62402*t62403;
            double t62408 = b2p*c*t62398;
            double t62409 = t62405+t62406+t62407+t62408;
            double t62410 = 1.0/t62409;
            double t62411 = t62410*t62404*(1.0/2.0);
            double t62412 = t62411+1.0;
            double t62413 = log(t62412);
            double t62414 = a1p*c*t62398;
            double t62415 = t62414+1.0;
            double t62416 = rho_a[index]*2.0;
            double t62417 = 1.0/pow(t62416,1.0/3.0);
            double t62418 = c*t62417;
            double t62419 = gamma_aa[index]*gamma_aa[index];
            double t62420 = gcab*gcab;
            double t62421 = t62419*t62419;
            double t62422 = t62420*t62420;
            double t62423 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t62424 = 1.0/pow(rho_a[index],8.0/3.0);
            double t62425 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t62426 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t62427 = pow(2.0,1.0/3.0);
            double t62428 = t62427*2.0;
            double t62429 = t62428-2.0;
            double t62430 = two_13*2.0;
            double t62431 = t62430-2.0;
            double t62432 = 1.0/t62431;
            double t62433 = 1.0/c0f;
            double t62434 = b1f*t62400;
            double t62435 = b3f*t62401;
            double t62436 = b4f*t62402*t62403;
            double t62437 = b2f*c*t62398;
            double t62438 = t62434+t62435+t62436+t62437;
            double t62439 = 1.0/t62438;
            double t62440 = t62433*t62439*(1.0/2.0);
            double t62441 = t62440+1.0;
            double t62442 = log(t62441);
            double t62443 = a1f*c*t62398;
            double t62444 = t62443+1.0;
            double t62445 = c0f*t62442*t62444*2.0;
            double t62446 = c0p*t62413*t62415*2.0;
            double t62447 = gcaa*gcaa;
            double t62448 = t62447*t62447;
            double t62449 = gx*gx;
            double t62450 = t62449*t62449;
            functional_[index] = (rho_a[index]*(t62446+t62432*t62429*(t62445-c0p*t62413*t62415*2.0))*2.0-c0p* \
               rho_a[index]*log((t62404*(1.0/2.0))/(b1p*sqrt(t62418)+b3p*pow(t62418,3.0/2.0)+b4p*t62402*1.0/pow(t62416,2.0/ \
               3.0)+b2p*c*t62417)+1.0)*(a1p*c*t62417+1.0)*4.0)*(ccab0+(ccab2*t62420*t62426*t62419)/(gamma_aa[index]* \
               gcab*t62424*2.0+t62420*t62426*t62419+1.0)+(ccab1*gamma_aa[index]*gcab*t62424)/(gamma_aa[index]*gcab* \
               t62424+1.0)+(ccab4*t62421*t62422*t62423)/(gamma_aa[index]*gcab*t62424*4.0+t62421*t62422*t62423+t62420* \
               t62426*t62419*6.0+gamma_aa[index]*gcab*t62420*t62425*t62419*4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t62420* \
               t62425*t62419)/(gamma_aa[index]*gcab*t62424*3.0+t62420*t62426*t62419*3.0+gamma_aa[index]*gcab*t62420* \
               t62425*t62419+1.0))-rho_a[index]*(t62446+t62432*t62429*(t62445-t62446))*(ccaa0+(ccaa2*t62426*t62419* \
               t62447)/(gamma_aa[index]*gcaa*t62424*2.0+t62426*t62419*t62447+1.0)+(ccaa1*gamma_aa[index]*gcaa*t62424) \
               /(gamma_aa[index]*gcaa*t62424+1.0)+(ccaa4*t62421*t62423*t62448)/(gamma_aa[index]*gcaa*t62424*4.0+t62421* \
               t62423*t62448+t62426*t62419*t62447*6.0+gamma_aa[index]*gcaa*t62425*t62419*t62447*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t62425*t62419*t62447)/(gamma_aa[index]*gcaa*t62424*3.0+t62426*t62419*t62447*3.0+gamma_aa[index]* \
               gcaa*t62425*t62419*t62447+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t62426*t62419*t62449)/(gamma_aa[index]* \
               gx*t62424*2.0+t62426*t62419*t62449+1.0)+(cx1*gamma_aa[index]*gx*t62424)/(gamma_aa[index]*gx*t62424+ \
               1.0)+(cx4*t62421*t62423*t62450)/(gamma_aa[index]*gx*t62424*4.0+t62421*t62423*t62450+t62426*t62419* \
               t62449*6.0+gamma_aa[index]*gx*t62425*t62419*t62449*4.0+1.0)+(cx3*gamma_aa[index]*gx*t62425*t62419* \
               t62449)/(gamma_aa[index]*gx*t62424*3.0+t62426*t62419*t62449*3.0+gamma_aa[index]*gx*t62425*t62419*t62449+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t62452 = gamma_aa[index]*gamma_aa[index];
            double t62453 = gcab*gcab;
            double t62454 = t62452*t62452;
            double t62455 = t62453*t62453;
            double t62456 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t62457 = 1.0/pow(rho_a[index],8.0/3.0);
            double t62458 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t62459 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t62460 = rho_a[index]*2.0;
            double t62461 = 1.0/pow(t62460,1.0/3.0);
            double t62462 = c*t62461;
            double t62463 = sqrt(t62462);
            double t62464 = b1p*t62463;
            double t62465 = pow(t62462,3.0/2.0);
            double t62466 = b3p*t62465;
            double t62467 = b2p*c*t62461;
            double t62468 = c*c;
            double t62469 = 1.0/pow(t62460,2.0/3.0);
            double t62470 = b4p*t62468*t62469;
            double t62471 = t62470+t62464+t62466+t62467;
            double t62472 = 1.0/pow(t62460,4.0/3.0);
            double t62473 = 1.0/c0p;
            double t62474 = 1.0/t62471;
            double t62475 = t62473*t62474*(1.0/2.0);
            double t62476 = t62475+1.0;
            double t62477 = 1.0/pow(rho_a[index],1.0/3.0);
            double t62478 = c*t62477;
            double t62479 = sqrt(t62478);
            double t62480 = b1f*t62479;
            double t62481 = pow(t62478,3.0/2.0);
            double t62482 = b3f*t62481;
            double t62483 = 1.0/pow(rho_a[index],2.0/3.0);
            double t62484 = b4f*t62483*t62468;
            double t62485 = b2f*c*t62477;
            double t62486 = t62480+t62482+t62484+t62485;
            double t62487 = 1.0/pow(rho_a[index],4.0/3.0);
            double t62488 = b1p*t62479;
            double t62489 = b3p*t62481;
            double t62490 = b4p*t62483*t62468;
            double t62491 = b2p*c*t62477;
            double t62492 = t62490+t62491+t62488+t62489;
            double t62493 = 1.0/pow(rho_a[index],5.0/3.0);
            double t62494 = 1.0/sqrt(t62478);
            double t62495 = 1.0/c0f;
            double t62496 = 1.0/t62486;
            double t62497 = t62495*t62496*(1.0/2.0);
            double t62498 = t62497+1.0;
            double t62499 = 1.0/t62492;
            double t62500 = t62473*t62499*(1.0/2.0);
            double t62501 = t62500+1.0;
            double t62502 = a1p*c*t62477;
            double t62503 = t62502+1.0;
            double t62504 = 1.0/t62501;
            double t62505 = 1.0/(t62492*t62492);
            double t62506 = b4p*t62493*t62468*(2.0/3.0);
            double t62507 = b2p*c*t62487*(1.0/3.0);
            double t62508 = b1p*c*t62494*t62487*(1.0/6.0);
            double t62509 = b3p*c*t62487*t62479*(1.0/2.0);
            double t62510 = t62506+t62507+t62508+t62509;
            double t62511 = t62510*t62503*t62504*t62505;
            double t62512 = log(t62501);
            double t62513 = log(t62476);
            double t62514 = a1p*c*t62461;
            double t62515 = t62514+1.0;
            double t62516 = pow(2.0,1.0/3.0);
            double t62517 = t62516*2.0;
            double t62518 = t62517-2.0;
            double t62519 = two_13*2.0;
            double t62520 = t62519-2.0;
            double t62521 = 1.0/t62520;
            double t62522 = log(t62498);
            double t62523 = a1f*c*t62477;
            double t62524 = t62523+1.0;
            double t62525 = c0f*t62522*t62524*2.0;
            double t62527 = c0p*t62503*t62512*2.0;
            double t62526 = t62525-t62527;
            double t62528 = gcaa*gcaa;
            double t62529 = t62528*t62528;
            double t62530 = t62521*t62526*t62518;
            double t62531 = t62530+t62527;
            double t62532 = gamma_aa[index]*gcab*t62457*4.0;
            double t62533 = gamma_aa[index]*gcab*t62452*t62453*t62458*4.0;
            double t62534 = t62452*t62453*t62459*6.0;
            double t62535 = t62454*t62455*t62456;
            double t62536 = t62532+t62533+t62534+t62535+1.0;
            double t62537 = 1.0/t62536;
            double t62538 = gamma_aa[index]*gcab*t62457;
            double t62539 = t62538+1.0;
            double t62540 = 1.0/t62539;
            double t62541 = gamma_aa[index]*gcab*t62457*3.0;
            double t62542 = gamma_aa[index]*gcab*t62452*t62453*t62458;
            double t62543 = t62452*t62453*t62459*3.0;
            double t62544 = t62541+t62542+t62543+1.0;
            double t62545 = 1.0/t62544;
            double t62546 = gamma_aa[index]*gcab*t62457*2.0;
            double t62547 = t62452*t62453*t62459;
            double t62548 = t62546+t62547+1.0;
            double t62549 = 1.0/t62548;
            double t62550 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t62551 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t62552 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t62553 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t62554 = gamma_aa[index]*gcaa*t62457*4.0;
            double t62555 = gamma_aa[index]*gcaa*t62452*t62528*t62458*4.0;
            double t62556 = t62452*t62528*t62459*6.0;
            double t62557 = t62454*t62456*t62529;
            double t62558 = t62554+t62555+t62556+t62557+1.0;
            double t62559 = 1.0/t62558;
            double t62560 = gamma_aa[index]*gcaa*t62457;
            double t62561 = t62560+1.0;
            double t62562 = 1.0/t62561;
            double t62563 = gamma_aa[index]*gcaa*t62457*3.0;
            double t62564 = gamma_aa[index]*gcaa*t62452*t62528*t62458;
            double t62565 = t62452*t62528*t62459*3.0;
            double t62566 = t62563+t62564+t62565+1.0;
            double t62567 = 1.0/t62566;
            double t62568 = gamma_aa[index]*gcaa*t62457*2.0;
            double t62569 = t62452*t62528*t62459;
            double t62570 = t62568+t62569+1.0;
            double t62571 = 1.0/t62570;
            double t62572 = gx*gx;
            double t62573 = t62572*t62572;
            double t62574 = gamma_aa[index]*gx*t62457*4.0;
            double t62575 = gamma_aa[index]*gx*t62452*t62572*t62458*4.0;
            double t62576 = t62452*t62572*t62459*6.0;
            double t62577 = t62454*t62456*t62573;
            double t62578 = t62574+t62575+t62576+t62577+1.0;
            double t62579 = 1.0/t62578;
            double t62580 = gamma_aa[index]*gx*t62457;
            double t62581 = t62580+1.0;
            double t62582 = 1.0/t62581;
            double t62583 = gamma_aa[index]*gx*t62457*3.0;
            double t62584 = gamma_aa[index]*gx*t62452*t62572*t62458;
            double t62585 = t62452*t62572*t62459*3.0;
            double t62586 = t62583+t62584+t62585+1.0;
            double t62587 = 1.0/t62586;
            double t62588 = gamma_aa[index]*gx*t62457*2.0;
            double t62589 = t62452*t62572*t62459;
            double t62590 = t62588+t62589+1.0;
            double t62591 = 1.0/t62590;
            double t62592 = 1.0/t62498;
            double t62593 = 1.0/(t62486*t62486);
            double t62594 = b4f*t62493*t62468*(2.0/3.0);
            double t62595 = b2f*c*t62487*(1.0/3.0);
            double t62596 = b1f*c*t62494*t62487*(1.0/6.0);
            double t62597 = b3f*c*t62487*t62479*(1.0/2.0);
            double t62598 = t62594+t62595+t62596+t62597;
            double t62599 = a1f*c*c0f*t62522*t62487*(2.0/3.0);
            double t62600 = a1p*c*c0p*t62512*t62487*(2.0/3.0);
            double t62601 = ccaa4*t62454*t62456*t62529*t62559;
            double t62602 = ccaa1*gamma_aa[index]*gcaa*t62562*t62457;
            double t62603 = ccaa3*gamma_aa[index]*gcaa*t62452*t62528*t62458*t62567;
            double t62604 = ccaa2*t62452*t62571*t62528*t62459;
            double t62605 = ccaa0+t62601+t62602+t62603+t62604;
            v_rho_a_[index] = -(rho_a[index]*t62531*2.0-c0p*rho_a[index]*t62513*t62515*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t62540*t62551*(4.0/3.0)+ccab2*t62550*t62452*t62453*t62549*(8.0/3.0)+ccab4*t62454*t62553*t62455* \
               t62537*(1.6E1/3.0)-ccab1*t62550*t62452*t62453*1.0/(t62539*t62539)*(4.0/3.0)-ccab2*t62452*t62453*1.0/ \
               (t62548*t62548)*t62459*(gamma_aa[index]*gcab*t62551*(8.0/3.0)+t62550*t62452*t62453*(8.0/3.0))-ccab4* \
               t62454*t62455*1.0/(t62536*t62536)*t62456*(gamma_aa[index]*gcab*t62551*(1.6E1/3.0)+t62550*t62452*t62453* \
               1.6E1+t62454*t62553*t62455*(1.6E1/3.0)+gamma_aa[index]*gcab*t62452*t62453*t62552*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t62452*t62453*t62552*t62545*4.0-ccab3*gamma_aa[index]*gcab*t62452*t62453*1.0/(t62544*t62544)* \
               t62458*(gamma_aa[index]*gcab*t62551*4.0+t62550*t62452*t62453*8.0+gamma_aa[index]*gcab*t62452*t62453* \
               t62552*4.0))-t62531*t62605-(rho_a[index]*((t62515*1.0/(t62471*t62471)*(b4p*1.0/pow(t62460,5.0/3.0) \
               *t62468*(2.0/3.0)+b2p*c*t62472*(1.0/3.0)+b3p*c*t62463*t62472*(1.0/2.0)+b1p*c*1.0/sqrt(t62462)*t62472* \
               (1.0/6.0)))/t62476-a1p*c*c0p*t62513*t62472*(2.0/3.0))*2.0+rho_a[index]*(t62600-t62511+t62521*t62518* \
               (t62511+t62599-t62524*t62592*t62593*t62598-a1p*c*c0p*t62512*t62487*(2.0/3.0)))-c0p*t62503*t62512*2.0+ \
               c0p*t62513*t62515*2.0-t62521*t62526*t62518)*(ccab0+ccab1*gamma_aa[index]*gcab*t62540*t62457+ccab2* \
               t62452*t62453*t62459*t62549+ccab4*t62454*t62455*t62456*t62537+ccab3*gamma_aa[index]*gcab*t62452*t62453* \
               t62545*t62458)+rho_a[index]*t62531*(ccaa1*gamma_aa[index]*gcaa*t62551*t62562*(8.0/3.0)+ccaa2*t62550* \
               t62452*t62571*t62528*(1.6E1/3.0)+ccaa4*t62454*t62553*t62529*t62559*(3.2E1/3.0)-ccaa1*t62550*t62452* \
               1.0/(t62561*t62561)*t62528*(8.0/3.0)-ccaa2*t62452*1.0/(t62570*t62570)*t62528*t62459*(gamma_aa[index]* \
               gcaa*t62551*(1.6E1/3.0)+t62550*t62452*t62528*(1.6E1/3.0))-ccaa4*t62454*t62456*t62529*1.0/(t62558*t62558) \
               *(gamma_aa[index]*gcaa*t62551*(3.2E1/3.0)+t62550*t62452*t62528*3.2E1+t62454*t62553*t62529*(3.2E1/3.0) \
               +gamma_aa[index]*gcaa*t62452*t62552*t62528*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t62452*t62552*t62528* \
               t62567*8.0-ccaa3*gamma_aa[index]*gcaa*t62452*t62528*t62458*1.0/(t62566*t62566)*(gamma_aa[index]*gcaa* \
               t62551*8.0+t62550*t62452*t62528*1.6E1+gamma_aa[index]*gcaa*t62452*t62552*t62528*8.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t62582*t62457+cx2*t62452*t62572*t62591*t62459+cx4*t62454*t62456*t62573* \
               t62579+cx3*gamma_aa[index]*gx*t62452*t62572*t62458*t62587)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)* \
               (cx1*gamma_aa[index]*gx*t62551*t62582*(8.0/3.0)+cx2*t62550*t62452*t62572*t62591*(1.6E1/3.0)+cx4*t62454* \
               t62553*t62573*t62579*(3.2E1/3.0)-cx1*t62550*t62452*t62572*1.0/(t62581*t62581)*(8.0/3.0)-cx2*t62452* \
               t62572*1.0/(t62590*t62590)*t62459*(gamma_aa[index]*gx*t62551*(1.6E1/3.0)+t62550*t62452*t62572*(1.6E1/ \
               3.0))-cx4*t62454*t62456*t62573*1.0/(t62578*t62578)*(gamma_aa[index]*gx*t62551*(3.2E1/3.0)+t62550*t62452* \
               t62572*3.2E1+t62454*t62553*t62573*(3.2E1/3.0)+gamma_aa[index]*gx*t62452*t62552*t62572*3.2E1)+cx3*gamma_aa[index]* \
               gx*t62452*t62552*t62572*t62587*8.0-cx3*gamma_aa[index]*gx*t62452*t62572*t62458*1.0/(t62586*t62586) \
               *(gamma_aa[index]*gx*t62551*8.0+t62550*t62452*t62572*1.6E1+gamma_aa[index]*gx*t62452*t62552*t62572* \
               8.0))-rho_a[index]*t62605*(-t62600+t62511+t62521*t62518*(t62600-t62511-t62599+t62524*t62592*t62593* \
               t62598));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t62607 = 1.0/pow(rho_a[index],1.0/3.0);
                double t62608 = c*t62607;
                double t62609 = sqrt(t62608);
                double t62610 = pow(t62608,3.0/2.0);
                double t62611 = c*c;
                double t62612 = 1.0/pow(rho_a[index],2.0/3.0);
                double t62613 = 1.0/c0p;
                double t62614 = b1p*t62609;
                double t62615 = b3p*t62610;
                double t62616 = b4p*t62611*t62612;
                double t62617 = b2p*c*t62607;
                double t62618 = t62614+t62615+t62616+t62617;
                double t62619 = 1.0/t62618;
                double t62620 = t62613*t62619*(1.0/2.0);
                double t62621 = t62620+1.0;
                double t62622 = log(t62621);
                double t62623 = a1p*c*t62607;
                double t62624 = t62623+1.0;
                double t62625 = rho_a[index]*2.0;
                double t62626 = 1.0/pow(t62625,1.0/3.0);
                double t62627 = c*t62626;
                double t62628 = 1.0/pow(rho_a[index],8.0/3.0);
                double t62629 = gamma_aa[index]*gamma_aa[index];
                double t62630 = gcab*gcab;
                double t62631 = t62630*t62630;
                double t62632 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t62633 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t62634 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t62635 = gamma_aa[index]*gcab*t62628;
                double t62636 = t62635+1.0;
                double t62637 = gamma_aa[index]*gcab*t62628*3.0;
                double t62638 = gamma_aa[index]*gcab*t62630*t62634*t62629;
                double t62639 = t62630*t62633*t62629*3.0;
                double t62640 = t62637+t62638+t62639+1.0;
                double t62641 = t62629*t62629;
                double t62642 = gamma_aa[index]*gcab*t62628*4.0;
                double t62643 = gamma_aa[index]*gcab*t62630*t62634*t62629*4.0;
                double t62644 = t62630*t62633*t62629*6.0;
                double t62645 = t62631*t62632*t62641;
                double t62646 = t62642+t62643+t62644+t62645+1.0;
                double t62647 = gamma_aa[index]*gcab*t62628*2.0;
                double t62648 = t62630*t62633*t62629;
                double t62649 = t62647+t62648+1.0;
                double t62650 = gx*gx;
                double t62651 = t62650*t62650;
                double t62652 = gamma_aa[index]*gx*t62628;
                double t62653 = t62652+1.0;
                double t62654 = gamma_aa[index]*gx*t62628*3.0;
                double t62655 = gamma_aa[index]*gx*t62650*t62634*t62629;
                double t62656 = t62650*t62633*t62629*3.0;
                double t62657 = t62654+t62655+t62656+1.0;
                double t62658 = gamma_aa[index]*gx*t62628*4.0;
                double t62659 = gamma_aa[index]*gx*t62650*t62634*t62629*4.0;
                double t62660 = t62650*t62633*t62629*6.0;
                double t62661 = t62632*t62641*t62651;
                double t62662 = t62660+t62661+t62658+t62659+1.0;
                double t62663 = gamma_aa[index]*gx*t62628*2.0;
                double t62664 = t62650*t62633*t62629;
                double t62665 = t62663+t62664+1.0;
                double t62666 = pow(2.0,1.0/3.0);
                double t62667 = t62666*2.0;
                double t62668 = t62667-2.0;
                double t62669 = two_13*2.0;
                double t62670 = t62669-2.0;
                double t62671 = 1.0/t62670;
                double t62672 = 1.0/c0f;
                double t62673 = b1f*t62609;
                double t62674 = b3f*t62610;
                double t62675 = b4f*t62611*t62612;
                double t62676 = b2f*c*t62607;
                double t62677 = t62673+t62674+t62675+t62676;
                double t62678 = 1.0/t62677;
                double t62679 = t62672*t62678*(1.0/2.0);
                double t62680 = t62679+1.0;
                double t62681 = log(t62680);
                double t62682 = a1f*c*t62607;
                double t62683 = t62682+1.0;
                double t62684 = c0f*t62681*t62683*2.0;
                double t62685 = c0p*t62622*t62624*2.0;
                double t62686 = gcaa*gcaa;
                double t62687 = t62686*t62686;
                double t62688 = gamma_aa[index]*gcaa*t62628;
                double t62689 = t62688+1.0;
                double t62690 = gamma_aa[index]*gcaa*t62628*3.0;
                double t62691 = gamma_aa[index]*gcaa*t62634*t62629*t62686;
                double t62692 = t62633*t62629*t62686*3.0;
                double t62693 = t62690+t62691+t62692+1.0;
                double t62694 = gamma_aa[index]*gcaa*t62628*4.0;
                double t62695 = gamma_aa[index]*gcaa*t62634*t62629*t62686*4.0;
                double t62696 = t62633*t62629*t62686*6.0;
                double t62697 = t62632*t62641*t62687;
                double t62698 = t62694+t62695+t62696+t62697+1.0;
                double t62699 = gamma_aa[index]*gcaa*t62628*2.0;
                double t62700 = t62633*t62629*t62686;
                double t62701 = t62700+t62699+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t62685+t62671*t62668*(t62684-c0p*t62622*t62624*2.0))*2.0-c0p* \
                   rho_a[index]*log((t62613*(1.0/2.0))/(b1p*sqrt(t62627)+b3p*pow(t62627,3.0/2.0)+b4p*t62611*1.0/pow(t62625,2.0/ \
                   3.0)+b2p*c*t62626)+1.0)*(a1p*c*t62626+1.0)*4.0)*((ccab1*gcab*t62628*(1.0/2.0))/t62636-ccab1*gamma_aa[index]* \
                   t62630*t62633*1.0/(t62636*t62636)*(1.0/2.0)+(ccab2*gamma_aa[index]*t62630*t62633)/t62649-ccab2*t62630* \
                   t62633*t62629*1.0/(t62649*t62649)*(gcab*t62628+gamma_aa[index]*t62630*t62633)+(ccab4*gamma_aa[index]* \
                   t62631*t62632*t62629*2.0)/t62646+(ccab3*gcab*t62630*t62634*t62629*(3.0/2.0))/t62640-ccab4*t62631*t62632* \
                   t62641*1.0/(t62646*t62646)*(gcab*t62628*2.0+gamma_aa[index]*t62630*t62633*6.0+gamma_aa[index]*t62631* \
                   t62632*t62629*2.0+gcab*t62630*t62634*t62629*6.0)-ccab3*gamma_aa[index]*gcab*t62630*1.0/(t62640*t62640) \
                   *t62634*t62629*(gcab*t62628*(3.0/2.0)+gamma_aa[index]*t62630*t62633*3.0+gcab*t62630*t62634*t62629* \
                   (3.0/2.0)))*2.0-rho_a[index]*(t62685+t62671*t62668*(t62684-t62685))*((ccaa1*gcaa*t62628)/t62689+(ccaa2* \
                   gamma_aa[index]*t62633*t62686*2.0)/t62701-ccaa1*gamma_aa[index]*t62633*t62686*1.0/(t62689*t62689)- \
                   ccaa2*1.0/(t62701*t62701)*t62633*t62629*t62686*(gcaa*t62628*2.0+gamma_aa[index]*t62633*t62686*2.0) \
                   +(ccaa4*gamma_aa[index]*t62632*t62629*t62687*4.0)/t62698+(ccaa3*gcaa*t62634*t62629*t62686*3.0)/t62693- \
                   ccaa4*t62632*t62641*t62687*1.0/(t62698*t62698)*(gcaa*t62628*4.0+gamma_aa[index]*t62633*t62686*1.2E1+ \
                   gamma_aa[index]*t62632*t62629*t62687*4.0+gcaa*t62634*t62629*t62686*1.2E1)-ccaa3*gamma_aa[index]*gcaa* \
                   t62634*t62629*1.0/(t62693*t62693)*t62686*(gcaa*t62628*3.0+gamma_aa[index]*t62633*t62686*6.0+gcaa*t62634* \
                   t62629*t62686*3.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t62628)/t62653-cx1*gamma_aa[index]*t62650* \
                   t62633*1.0/(t62653*t62653)+(cx2*gamma_aa[index]*t62650*t62633*2.0)/t62665-cx2*t62650*t62633*t62629* \
                   1.0/(t62665*t62665)*(gx*t62628*2.0+gamma_aa[index]*t62650*t62633*2.0)+(cx4*gamma_aa[index]*t62632* \
                   t62651*t62629*4.0)/t62662+(cx3*gx*t62650*t62634*t62629*3.0)/t62657-cx4*t62632*t62641*t62651*1.0/(t62662* \
                   t62662)*(gx*t62628*4.0+gamma_aa[index]*t62650*t62633*1.2E1+gamma_aa[index]*t62632*t62651*t62629*4.0+ \
                   gx*t62650*t62634*t62629*1.2E1)-cx3*gamma_aa[index]*gx*t62650*t62634*t62629*1.0/(t62657*t62657)*(gx* \
                   t62628*3.0+gamma_aa[index]*t62650*t62633*6.0+gx*t62650*t62634*t62629*3.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t62704 = rho_a[index]*2.0;
            double t62705 = 1.0/pow(t62704,1.0/3.0);
            double t62706 = c*t62705;
            double t62707 = sqrt(t62706);
            double t62708 = b1p*t62707;
            double t62709 = pow(t62706,3.0/2.0);
            double t62710 = b3p*t62709;
            double t62711 = b2p*c*t62705;
            double t62712 = c*c;
            double t62713 = 1.0/pow(t62704,2.0/3.0);
            double t62714 = b4p*t62712*t62713;
            double t62715 = t62710+t62711+t62714+t62708;
            double t62716 = 1.0/pow(t62704,8.0/3.0);
            double t62717 = 1.0/pow(t62704,7.0/3.0);
            double t62718 = 1.0/sqrt(t62706);
            double t62719 = 1.0/c0p;
            double t62720 = 1.0/t62715;
            double t62721 = t62720*t62719*(1.0/2.0);
            double t62722 = t62721+1.0;
            double t62723 = 1.0/t62722;
            double t62724 = a1p*c*t62705;
            double t62725 = t62724+1.0;
            double t62726 = 1.0/pow(t62704,4.0/3.0);
            double t62728 = b2p*c*t62726*(1.0/3.0);
            double t62729 = 1.0/pow(t62704,5.0/3.0);
            double t62730 = b4p*t62712*t62729*(2.0/3.0);
            double t62731 = b1p*c*t62726*t62718*(1.0/6.0);
            double t62732 = b3p*c*t62707*t62726*(1.0/2.0);
            double t62727 = t62730+t62731+t62732+t62728;
            double t62733 = t62727*t62727;
            double t62734 = 1.0/(t62715*t62715);
            double t62735 = log(t62722);
            double t62736 = gamma_aa[index]*gamma_aa[index];
            double t62737 = gcab*gcab;
            double t62738 = t62736*t62736;
            double t62739 = t62737*t62737;
            double t62740 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t62741 = 1.0/pow(rho_a[index],8.0/3.0);
            double t62742 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t62743 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t62744 = two_13*2.0;
            double t62745 = t62744-2.0;
            double t62746 = 1.0/t62745;
            double t62747 = 1.0/pow(rho_a[index],1.0/3.0);
            double t62748 = c*t62747;
            double t62749 = sqrt(t62748);
            double t62750 = pow(t62748,3.0/2.0);
            double t62751 = 1.0/pow(rho_a[index],2.0/3.0);
            double t62752 = b1p*t62749;
            double t62753 = b3p*t62750;
            double t62754 = b4p*t62712*t62751;
            double t62755 = b2p*c*t62747;
            double t62756 = t62752+t62753+t62754+t62755;
            double t62757 = 1.0/t62756;
            double t62758 = t62719*t62757*(1.0/2.0);
            double t62759 = t62758+1.0;
            double t62760 = log(t62759);
            double t62761 = a1p*c*t62747;
            double t62762 = t62761+1.0;
            double t62763 = gamma_aa[index]*gcab*t62741*4.0;
            double t62764 = gamma_aa[index]*gcab*t62742*t62736*t62737*4.0;
            double t62765 = t62743*t62736*t62737*6.0;
            double t62766 = t62740*t62738*t62739;
            double t62767 = t62763+t62764+t62765+t62766+1.0;
            double t62768 = 1.0/t62767;
            double t62769 = gamma_aa[index]*gcab*t62741;
            double t62770 = t62769+1.0;
            double t62771 = 1.0/t62770;
            double t62772 = gamma_aa[index]*gcab*t62741*3.0;
            double t62773 = gamma_aa[index]*gcab*t62742*t62736*t62737;
            double t62774 = t62743*t62736*t62737*3.0;
            double t62775 = t62772+t62773+t62774+1.0;
            double t62776 = 1.0/t62775;
            double t62777 = gamma_aa[index]*gcab*t62741*2.0;
            double t62778 = t62743*t62736*t62737;
            double t62779 = t62777+t62778+1.0;
            double t62780 = 1.0/t62779;
            double t62781 = 1.0/pow(rho_a[index],1.0E1);
            double t62782 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t62784 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t62785 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t62787 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t62794 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t62795 = gamma_aa[index]*gcab*t62784*(1.6E1/3.0);
            double t62796 = gamma_aa[index]*gcab*t62736*t62737*t62787*1.6E1;
            double t62797 = t62736*t62737*t62785*1.6E1;
            double t62798 = t62738*t62739*t62794*(1.6E1/3.0);
            double t62783 = t62795+t62796+t62797+t62798;
            double t62801 = gamma_aa[index]*gcab*t62784*(8.0/3.0);
            double t62802 = t62736*t62737*t62785*(8.0/3.0);
            double t62786 = t62801+t62802;
            double t62788 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t62789 = 1.0/(t62775*t62775);
            double t62790 = gamma_aa[index]*gcab*t62784*4.0;
            double t62791 = gamma_aa[index]*gcab*t62736*t62737*t62787*4.0;
            double t62792 = t62736*t62737*t62785*8.0;
            double t62793 = t62790+t62791+t62792;
            double t62799 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t62800 = 1.0/(t62767*t62767);
            double t62803 = 1.0/(t62779*t62779);
            double t62804 = pow(2.0,1.0/3.0);
            double t62805 = t62804*2.0;
            double t62806 = t62805-2.0;
            double t62807 = a1f*c*t62747;
            double t62808 = t62807+1.0;
            double t62809 = 1.0/c0f;
            double t62810 = b1f*t62749;
            double t62811 = b3f*t62750;
            double t62812 = b4f*t62712*t62751;
            double t62813 = b2f*c*t62747;
            double t62814 = t62810+t62811+t62812+t62813;
            double t62815 = 1.0/t62814;
            double t62816 = t62815*t62809*(1.0/2.0);
            double t62817 = t62816+1.0;
            double t62818 = 1.0/pow(rho_a[index],4.0/3.0);
            double t62819 = 1.0/pow(rho_a[index],5.0/3.0);
            double t62820 = 1.0/sqrt(t62748);
            double t62821 = log(t62817);
            double t62822 = 1.0/t62759;
            double t62823 = 1.0/(t62756*t62756);
            double t62824 = b4p*t62712*t62819*(2.0/3.0);
            double t62825 = b2p*c*t62818*(1.0/3.0);
            double t62826 = b1p*c*t62820*t62818*(1.0/6.0);
            double t62827 = b3p*c*t62818*t62749*(1.0/2.0);
            double t62828 = t62824+t62825+t62826+t62827;
            double t62829 = t62822*t62823*t62762*t62828;
            double t62830 = gcaa*gcaa;
            double t62831 = t62830*t62830;
            double t62832 = 1.0/t62817;
            double t62833 = 1.0/(t62814*t62814);
            double t62834 = b4f*t62712*t62819*(2.0/3.0);
            double t62835 = b2f*c*t62818*(1.0/3.0);
            double t62836 = b1f*c*t62820*t62818*(1.0/6.0);
            double t62837 = b3f*c*t62818*t62749*(1.0/2.0);
            double t62838 = t62834+t62835+t62836+t62837;
            double t62839 = a1f*c*c0f*t62821*t62818*(2.0/3.0);
            double t62840 = a1p*c*c0p*t62760*t62818*(2.0/3.0);
            double t62841 = c0f*t62821*t62808*2.0;
            double t62842 = c0p*t62760*t62762*2.0;
            double t62843 = 1.0/(t62770*t62770);
            double t62844 = ccab4*t62740*t62738*t62739*t62768;
            double t62845 = ccab1*gamma_aa[index]*gcab*t62741*t62771;
            double t62846 = ccab3*gamma_aa[index]*gcab*t62742*t62736*t62737*t62776;
            double t62847 = ccab2*t62743*t62780*t62736*t62737;
            double t62848 = ccab0+t62844+t62845+t62846+t62847;
            double t62849 = b2p*c*t62717*(4.0/9.0);
            double t62850 = b4p*t62712*t62716*(1.0E1/9.0);
            double t62851 = 1.0/pow(t62706,3.0/2.0);
            double t62852 = b3p*t62712*t62716*t62718*(1.0/1.2E1);
            double t62853 = b1p*c*t62717*t62718*(2.0/9.0);
            double t62854 = b3p*c*t62707*t62717*(2.0/3.0);
            double t62855 = t62850+t62852+t62853+t62854+t62849-b1p*t62712*t62716*t62851*(1.0/3.6E1);
            double t62856 = t62723*t62725*t62734*t62855;
            double t62857 = 1.0/(t62715*t62715*t62715);
            double t62858 = 1.0/(t62722*t62722);
            double t62859 = 1.0/(t62715*t62715*t62715*t62715);
            double t62860 = t62733*t62725*t62719*t62858*t62859*(1.0/2.0);
            double t62861 = 1.0/d2fz0;
            double t62862 = 1.0/(rho_a[index]*rho_a[index]);
            double t62863 = 1.0/Aa;
            double t62864 = b1a*t62707;
            double t62865 = b3a*t62709;
            double t62866 = b2a*c*t62705;
            double t62867 = b4a*t62712*t62713;
            double t62868 = t62864+t62865+t62866+t62867;
            double t62869 = 1.0/t62868;
            double t62870 = t62863*t62869*(1.0/2.0);
            double t62871 = t62870+1.0;
            double t62872 = log(t62871);
            double t62873 = a1a*c*t62705;
            double t62874 = t62873+1.0;
            double t62875 = a1p*c*t62723*t62734*t62726*t62727*(2.0/3.0);
            double t62876 = 1.0/pow(rho_a[index],7.0/3.0);
            double t62877 = 1.0/pow(t62748,3.0/2.0);
            double t62878 = t62838*t62838;
            double t62879 = t62828*t62828;
            double t62880 = 1.0/(t62756*t62756*t62756);
            double t62881 = t62822*t62762*t62880*t62879*2.0;
            double t62882 = b4p*t62712*t62741*(1.0E1/9.0);
            double t62883 = b2p*c*t62876*(4.0/9.0);
            double t62884 = b3p*t62712*t62820*t62741*(1.0/1.2E1);
            double t62885 = b1p*c*t62820*t62876*(2.0/9.0);
            double t62886 = b3p*c*t62749*t62876*(2.0/3.0);
            double t62998 = b1p*t62712*t62741*t62877*(1.0/3.6E1);
            double t62887 = t62882+t62883+t62884+t62885+t62886-t62998;
            double t62888 = 1.0/(t62759*t62759);
            double t62889 = 1.0/(t62756*t62756*t62756*t62756);
            double t62890 = a1p*c*c0p*t62760*t62876*(8.0/9.0);
            double t62891 = t62832*t62833*t62808*t62838;
            double t62892 = t62840+t62891-t62829-t62839;
            double t62893 = a1p*c*c0p*t62726*t62735*(4.0/3.0);
            double t62894 = t62841-t62842;
            double t62895 = t62806*t62746*t62894;
            double t62896 = gamma_aa[index]*gcaa*t62741*4.0;
            double t62897 = gamma_aa[index]*gcaa*t62830*t62742*t62736*4.0;
            double t62898 = t62830*t62743*t62736*6.0;
            double t62899 = t62740*t62831*t62738;
            double t62900 = t62896+t62897+t62898+t62899+1.0;
            double t62901 = 1.0/t62900;
            double t62902 = gamma_aa[index]*gcaa*t62741;
            double t62903 = t62902+1.0;
            double t62904 = 1.0/t62903;
            double t62905 = gamma_aa[index]*gcaa*t62741*3.0;
            double t62906 = gamma_aa[index]*gcaa*t62830*t62742*t62736;
            double t62907 = t62830*t62743*t62736*3.0;
            double t62908 = t62905+t62906+t62907+1.0;
            double t62909 = 1.0/t62908;
            double t62910 = gamma_aa[index]*gcaa*t62741*2.0;
            double t62911 = t62830*t62743*t62736;
            double t62912 = t62910+t62911+1.0;
            double t62913 = 1.0/t62912;
            double t62914 = t62842+t62895;
            double t62915 = 1.0/(t62770*t62770*t62770);
            double t62916 = ccab1*gamma_aa[index]*gcab*t62915*t62736*t62781*t62737*(3.2E1/9.0);
            double t62917 = t62783*t62783;
            double t62918 = 1.0/(t62767*t62767*t62767);
            double t62919 = ccab4*t62740*t62917*t62738*t62918*t62739*2.0;
            double t62920 = t62786*t62786;
            double t62921 = 1.0/(t62779*t62779*t62779);
            double t62922 = ccab2*t62920*t62921*t62743*t62736*t62737*2.0;
            double t62923 = t62793*t62793;
            double t62924 = 1.0/(t62775*t62775*t62775);
            double t62925 = ccab3*gamma_aa[index]*gcab*t62742*t62923*t62924*t62736*t62737*2.0;
            double t62926 = t62806*t62746*t62892;
            double t62927 = -t62840+t62926+t62829;
            double t62928 = ccaa4*t62901*t62831*t62738*t62794*(3.2E1/3.0);
            double t62929 = ccaa1*gamma_aa[index]*gcaa*t62904*t62784*(8.0/3.0);
            double t62930 = ccaa3*gamma_aa[index]*gcaa*t62830*t62736*t62909*t62787*8.0;
            double t62931 = ccaa2*t62830*t62913*t62736*t62785*(1.6E1/3.0);
            double t62932 = 1.0/(t62903*t62903);
            double t62933 = gamma_aa[index]*gcaa*t62784*8.0;
            double t62934 = gamma_aa[index]*gcaa*t62830*t62736*t62787*8.0;
            double t62935 = t62830*t62736*t62785*1.6E1;
            double t62936 = t62933+t62934+t62935;
            double t62937 = 1.0/(t62908*t62908);
            double t62938 = gamma_aa[index]*gcaa*t62784*(3.2E1/3.0);
            double t62939 = gamma_aa[index]*gcaa*t62830*t62736*t62787*3.2E1;
            double t62940 = t62830*t62736*t62785*3.2E1;
            double t62941 = t62831*t62738*t62794*(3.2E1/3.0);
            double t62942 = t62940+t62941+t62938+t62939;
            double t62943 = 1.0/(t62900*t62900);
            double t62944 = gamma_aa[index]*gcaa*t62784*(1.6E1/3.0);
            double t62945 = t62830*t62736*t62785*(1.6E1/3.0);
            double t62946 = t62944+t62945;
            double t62947 = 1.0/(t62912*t62912);
            double t62948 = t62930+t62931+t62928+t62929-ccaa1*t62830*t62932*t62736*t62785*(8.0/3.0)-ccaa4*t62740* \
               t62831*t62942*t62943*t62738-ccaa2*t62830*t62743*t62736*t62946*t62947-ccaa3*gamma_aa[index]*gcaa*t62830* \
               t62742*t62736*t62936*t62937;
            double t62949 = gx*gx;
            double t62950 = t62949*t62949;
            double t62951 = gamma_aa[index]*gx*t62741;
            double t62952 = t62951+1.0;
            double t62972 = gamma_aa[index]*gx*t62784*(3.2E1/3.0);
            double t62973 = gamma_aa[index]*gx*t62736*t62787*t62949*3.2E1;
            double t62974 = t62736*t62785*t62949*3.2E1;
            double t62975 = t62950*t62738*t62794*(3.2E1/3.0);
            double t62953 = t62972+t62973+t62974+t62975;
            double t62954 = gamma_aa[index]*gx*t62741*4.0;
            double t62955 = gamma_aa[index]*gx*t62742*t62736*t62949*4.0;
            double t62956 = t62743*t62736*t62949*6.0;
            double t62957 = t62740*t62950*t62738;
            double t62958 = t62954+t62955+t62956+t62957+1.0;
            double t62977 = gamma_aa[index]*gx*t62784*(1.6E1/3.0);
            double t62978 = t62736*t62785*t62949*(1.6E1/3.0);
            double t62959 = t62977+t62978;
            double t62960 = gamma_aa[index]*gx*t62741*2.0;
            double t62961 = t62743*t62736*t62949;
            double t62962 = t62960+t62961+1.0;
            double t62963 = gamma_aa[index]*gx*t62741*3.0;
            double t62964 = gamma_aa[index]*gx*t62742*t62736*t62949;
            double t62965 = t62743*t62736*t62949*3.0;
            double t62966 = t62963+t62964+t62965+1.0;
            double t62967 = 1.0/(t62966*t62966);
            double t62968 = gamma_aa[index]*gx*t62784*8.0;
            double t62969 = gamma_aa[index]*gx*t62736*t62787*t62949*8.0;
            double t62970 = t62736*t62785*t62949*1.6E1;
            double t62971 = t62970+t62968+t62969;
            double t62976 = 1.0/(t62958*t62958);
            double t62979 = 1.0/(t62962*t62962);
            double t62980 = 1.0/t62958;
            double t62981 = 1.0/t62952;
            double t62982 = 1.0/t62966;
            double t62983 = 1.0/t62962;
            double t62984 = 1.0/(t62952*t62952);
            double t62985 = ccaa4*t62901*t62740*t62831*t62738;
            double t62986 = ccaa1*gamma_aa[index]*gcaa*t62741*t62904;
            double t62987 = ccaa3*gamma_aa[index]*gcaa*t62830*t62742*t62736*t62909;
            double t62988 = ccaa2*t62830*t62913*t62743*t62736;
            double t62989 = ccaa0+t62985+t62986+t62987+t62988;
            double t62990 = 1.0/(t62814*t62814*t62814);
            double t62991 = b4f*t62712*t62741*(1.0E1/9.0);
            double t62992 = b2f*c*t62876*(4.0/9.0);
            double t62993 = b3f*t62712*t62820*t62741*(1.0/1.2E1);
            double t62994 = b1f*c*t62820*t62876*(2.0/9.0);
            double t62995 = b3f*c*t62749*t62876*(2.0/3.0);
            double t62996 = t62991+t62992+t62993+t62994+t62995-b1f*t62712*t62741*t62877*(1.0/3.6E1);
            double t62997 = t62832*t62833*t62808*t62996;
            double t62999 = t62822*t62823*t62762*t62887;
            double t63000 = 1.0/(t62817*t62817);
            double t63001 = 1.0/(t62814*t62814*t62814*t62814);
            double t63002 = t62808*t62809*t62878*t63000*t63001*(1.0/2.0);
            double t63003 = t62762*t62719*t62879*t62888*t62889*(1.0/2.0);
            double t63004 = a1f*c*t62832*t62833*t62818*t62838*(2.0/3.0);
            double t63005 = a1p*c*t62822*t62823*t62818*t62828*(2.0/3.0);
            v_rho_a_rho_a_[index] = (t62842+t62895+rho_a[index]*t62927-rho_a[index]*(t62723*t62725*t62734*t62727- \
               a1p*c*c0p*t62726*t62735*(2.0/3.0))*2.0-c0p*t62725*t62735*2.0)*(ccab1*gamma_aa[index]*gcab*t62771*t62784* \
               (4.0/3.0)-ccab1*t62843*t62736*t62737*t62785*(4.0/3.0)+ccab2*t62780*t62736*t62737*t62785*(8.0/3.0)+ \
               ccab4*t62738*t62739*t62794*t62768*(1.6E1/3.0)-ccab4*t62800*t62740*t62738*t62783*t62739-ccab2*t62803* \
               t62743*t62736*t62737*t62786+ccab3*gamma_aa[index]*gcab*t62736*t62737*t62776*t62787*4.0-ccab3*gamma_aa[index]* \
               gcab*t62742*t62736*t62737*t62793*t62789)*-4.0+t62914*t62948*2.0+(rho_a[index]*(t62842+t62806*t62746* \
               (t62841-c0p*t62760*t62762*2.0))*2.0-c0p*rho_a[index]*t62725*t62735*4.0)*(t62922+t62916+t62925+t62919+ \
               ccab1*gamma_aa[index]*gcab*t62771*t62788*(4.4E1/9.0)-ccab1*t62843*t62736*t62737*t62782*(7.6E1/9.0) \
               +ccab2*t62780*t62736*t62737*t62782*(4.0E1/3.0)+ccab4*t62738*t62739*t62768*t62799*(3.68E2/9.0)-ccab2* \
               t62803*t62736*t62737*t62785*t62786*(1.6E1/3.0)-ccab4*t62800*t62738*t62783*t62739*t62794*(3.2E1/3.0) \
               -ccab2*t62803*t62743*t62736*t62737*(gamma_aa[index]*gcab*t62788*(8.8E1/9.0)+t62736*t62737*t62782*(4.0E1/ \
               3.0))-ccab4*t62800*t62740*t62738*t62739*(gamma_aa[index]*gcab*t62788*(1.76E2/9.0)+t62736*t62737*t62782* \
               8.0E1+t62738*t62739*t62799*(3.68E2/9.0)+gamma_aa[index]*gcab*t62736*t62781*t62737*(3.04E2/3.0))+ccab3* \
               gamma_aa[index]*gcab*t62736*t62781*t62737*t62776*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t62742*t62736* \
               t62737*t62789*(gamma_aa[index]*gcab*t62788*(4.4E1/3.0)+t62736*t62737*t62782*4.0E1+gamma_aa[index]* \
               gcab*t62736*t62781*t62737*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t62736*t62737*t62793*t62787*t62789* \
               8.0)+t62989*(t62840-t62829+t62806*t62746*(t62829+t62839-t62832*t62833*t62808*t62838-a1p*c*c0p*t62760* \
               t62818*(2.0/3.0)))*2.0+t62848*(t62893+rho_a[index]*(t62860+t62856+t62875-t62723*t62733*t62725*t62857* \
               2.0-a1p*c*c0p*t62717*t62735*(8.0/9.0)+Aa*t62861*t62862*t62746*t62872*t62874*(4.0/9.0))*2.0-rho_a[index]* \
               (-t62881-t62890+t62999+t63003+t63005+t62806*t62746*(t62881+t62890+t62997+t63002+t63004-t62822*t62823* \
               t62762*t62887-t62832*t62808*t62990*t62878*2.0-a1f*c*c0f*t62821*t62876*(8.0/9.0)-t62762*t62719*t62879* \
               t62888*t62889*(1.0/2.0)-a1p*c*t62822*t62823*t62818*t62828*(2.0/3.0)))+t62806*t62746*t62892*2.0-t62723* \
               t62725*t62734*t62727*2.0+t62822*t62823*t62762*t62828*2.0-a1p*c*c0p*t62760*t62818*(4.0/3.0))+(rho_a[index]* \
               t62914*2.0-c0p*rho_a[index]*t62725*t62735*4.0)*(t62922+t62916+t62925+t62919-ccab1*t62843*t62736*t62737* \
               t62782*(3.2E1/9.0)+ccab2*t62780*t62736*t62737*t62782*(3.2E1/9.0)-ccab2*t62803*t62738*t62739*t62799* \
               (3.2E1/9.0)+ccab4*t62738*t62739*t62768*t62799*(6.4E1/3.0)-ccab2*t62803*t62736*t62737*t62785*t62786* \
               (1.6E1/3.0)-ccab4*t62800*t62738*t62783*t62739*t62794*(3.2E1/3.0)-ccab4*t62800*t62740*t62738*t62739* \
               (t62736*t62737*t62782*(6.4E1/3.0)+t62738*t62739*t62799*(6.4E1/3.0)+gamma_aa[index]*gcab*t62736*t62781* \
               t62737*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t62736*t62781*t62737*t62776*(3.2E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t62742*t62736*t62737*t62789*(t62736*t62737*t62782*(3.2E1/3.0)+gamma_aa[index]*gcab*t62736*t62781* \
               t62737*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t62736*t62737*t62793*t62787*t62789*8.0)+t62848*(t62893+ \
               rho_a[index]*(t62860+t62856+t62875-t62723*t62733*t62725*t62857*2.0-a1p*c*c0p*t62717*t62735*(8.0/9.0) \
               -Aa*t62861*t62862*t62746*t62872*t62874*(4.0/9.0))*2.0-t62723*t62725*t62734*t62727*2.0)-c0*pow(rho_a[index],1.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t62981*t62784*(8.0/3.0)-cx1*t62736*t62785*t62984*t62949*(8.0/3.0)+cx2* \
               t62736*t62785*t62983*t62949*(1.6E1/3.0)+cx4*t62950*t62980*t62738*t62794*(3.2E1/3.0)-cx2*t62743*t62736* \
               t62949*t62959*t62979-cx4*t62740*t62950*t62953*t62738*t62976+cx3*gamma_aa[index]*gx*t62736*t62982*t62787* \
               t62949*8.0-cx3*gamma_aa[index]*gx*t62742*t62736*t62971*t62949*t62967)*(8.0/3.0)-rho_a[index]*t62914* \
               (ccaa1*gamma_aa[index]*gcaa*t62904*t62788*(8.8E1/9.0)-ccaa1*t62830*t62932*t62736*t62782*2.4E1+ccaa2* \
               t62830*t62913*t62736*t62782*(3.04E2/9.0)+ccaa4*t62901*t62831*t62738*t62799*(1.12E3/9.0)-ccaa4*t62831* \
               t62942*t62943*t62738*t62794*(6.4E1/3.0)-ccaa2*t62830*t62736*t62946*t62785*t62947*(3.2E1/3.0)-ccaa2* \
               t62830*t62743*t62736*t62947*(gamma_aa[index]*gcaa*t62788*(1.76E2/9.0)+t62830*t62736*t62782*(3.04E2/ \
               9.0))-ccaa4*t62740*t62831*t62943*t62738*(gamma_aa[index]*gcaa*t62788*(3.52E2/9.0)+t62830*t62736*t62782* \
               (6.08E2/3.0)+t62831*t62738*t62799*(1.12E3/9.0)+gamma_aa[index]*gcaa*t62830*t62736*t62781*2.88E2)+ccaa4* \
               1.0/(t62900*t62900*t62900)*t62740*t62831*(t62942*t62942)*t62738*2.0+ccaa2*t62830*1.0/(t62912*t62912* \
               t62912)*t62743*t62736*(t62946*t62946)*2.0+ccaa3*gamma_aa[index]*gcaa*t62830*t62736*t62781*t62909*7.2E1+ \
               ccaa1*gamma_aa[index]*gcaa*t62830*1.0/(t62903*t62903*t62903)*t62736*t62781*(1.28E2/9.0)+ccaa3*gamma_aa[index]* \
               gcaa*t62830*t62742*t62736*1.0/(t62908*t62908*t62908)*(t62936*t62936)*2.0-ccaa3*gamma_aa[index]*gcaa* \
               t62830*t62742*t62736*t62937*(gamma_aa[index]*gcaa*t62788*(8.8E1/3.0)+t62830*t62736*t62782*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t62830*t62736*t62781*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t62830*t62736*t62936* \
               t62937*t62787*1.6E1)+rho_a[index]*t62989*(-t62881-t62890+t62999+t63003+t63005+t62806*t62746*(t62881+ \
               t62890+t62997-t62999+t63002-t63003+t63004-t63005-t62832*t62808*t62990*t62878*2.0-a1f*c*c0f*t62821* \
               t62876*(8.0/9.0)))+rho_a[index]*t62927*t62948*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t62981*t62788*(8.8E1/9.0)-cx1*t62736*t62782*t62984*t62949*2.4E1+cx2*t62736*t62782*t62983*t62949* \
               (3.04E2/9.0)+cx4*t62950*t62980*t62738*t62799*(1.12E3/9.0)-cx2*t62736*t62785*t62949*t62959*t62979*(3.2E1/ \
               3.0)-cx4*t62950*t62953*t62738*t62794*t62976*(6.4E1/3.0)-cx2*t62743*t62736*t62949*t62979*(gamma_aa[index]* \
               gx*t62788*(1.76E2/9.0)+t62736*t62782*t62949*(3.04E2/9.0))-cx4*t62740*t62950*t62738*t62976*(gamma_aa[index]* \
               gx*t62788*(3.52E2/9.0)+t62736*t62782*t62949*(6.08E2/3.0)+t62950*t62738*t62799*(1.12E3/9.0)+gamma_aa[index]* \
               gx*t62736*t62781*t62949*2.88E2)+cx2*t62743*t62736*1.0/(t62962*t62962*t62962)*t62949*(t62959*t62959) \
               *2.0+cx4*t62740*t62950*(t62953*t62953)*t62738*1.0/(t62958*t62958*t62958)*2.0+cx3*gamma_aa[index]*gx* \
               t62736*t62781*t62982*t62949*7.2E1+cx1*gamma_aa[index]*gx*t62736*t62781*1.0/(t62952*t62952*t62952)* \
               t62949*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t62742*t62736*(t62971*t62971)*1.0/(t62966*t62966*t62966) \
               *t62949*2.0-cx3*gamma_aa[index]*gx*t62742*t62736*t62949*t62967*(gamma_aa[index]*gx*t62788*(8.8E1/3.0) \
               +t62736*t62782*t62949*(3.04E2/3.0)+gamma_aa[index]*gx*t62736*t62781*t62949*7.2E1)-cx3*gamma_aa[index]* \
               gx*t62736*t62971*t62787*t62949*t62967*1.6E1)+c0*t62751*(cx0+cx1*gamma_aa[index]*gx*t62741*t62981+cx2* \
               t62743*t62736*t62983*t62949+cx4*t62740*t62950*t62980*t62738+cx3*gamma_aa[index]*gx*t62742*t62736*t62982* \
               t62949)*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t63007 = 1.0/pow(rho_a[index],1.0/3.0);
                double t63008 = c*t63007;
                double t63009 = sqrt(t63008);
                double t63010 = pow(t63008,3.0/2.0);
                double t63011 = c*c;
                double t63012 = 1.0/pow(rho_a[index],2.0/3.0);
                double t63013 = 1.0/c0p;
                double t63014 = b1p*t63009;
                double t63015 = b3p*t63010;
                double t63016 = b4p*t63011*t63012;
                double t63017 = b2p*c*t63007;
                double t63018 = t63014+t63015+t63016+t63017;
                double t63019 = 1.0/t63018;
                double t63020 = t63013*t63019*(1.0/2.0);
                double t63021 = t63020+1.0;
                double t63022 = log(t63021);
                double t63023 = a1p*c*t63007;
                double t63024 = t63023+1.0;
                double t63025 = 1.0/pow(rho_a[index],8.0/3.0);
                double t63026 = gamma_aa[index]*gamma_aa[index];
                double t63027 = gcaa*gcaa;
                double t63028 = t63027*t63027;
                double t63029 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t63030 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t63031 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t63032 = gamma_aa[index]*gcaa*t63025;
                double t63033 = t63032+1.0;
                double t63034 = gamma_aa[index]*gcaa*t63025*3.0;
                double t63035 = gamma_aa[index]*gcaa*t63031*t63026*t63027;
                double t63036 = t63030*t63026*t63027*3.0;
                double t63037 = t63034+t63035+t63036+1.0;
                double t63038 = t63026*t63026;
                double t63039 = gamma_aa[index]*gcaa*t63025*4.0;
                double t63040 = gamma_aa[index]*gcaa*t63031*t63026*t63027*4.0;
                double t63041 = t63030*t63026*t63027*6.0;
                double t63042 = t63028*t63029*t63038;
                double t63043 = t63040+t63041+t63042+t63039+1.0;
                double t63044 = gamma_aa[index]*gcaa*t63025*2.0;
                double t63045 = t63030*t63026*t63027;
                double t63046 = t63044+t63045+1.0;
                double t63047 = pow(2.0,1.0/3.0);
                double t63048 = t63047*2.0;
                double t63049 = t63048-2.0;
                double t63050 = two_13*2.0;
                double t63051 = t63050-2.0;
                double t63052 = 1.0/t63051;
                double t63053 = 1.0/c0f;
                double t63054 = b1f*t63009;
                double t63055 = b3f*t63010;
                double t63056 = b4f*t63011*t63012;
                double t63057 = b2f*c*t63007;
                double t63058 = t63054+t63055+t63056+t63057;
                double t63059 = 1.0/t63058;
                double t63060 = t63053*t63059*(1.0/2.0);
                double t63061 = t63060+1.0;
                double t63062 = log(t63061);
                double t63063 = a1f*c*t63007;
                double t63064 = t63063+1.0;
                double t63065 = c0f*t63062*t63064*2.0;
                double t63066 = c0p*t63022*t63024*2.0;
                double t63067 = rho_a[index]*2.0;
                double t63068 = 1.0/pow(t63067,1.0/3.0);
                double t63069 = c*t63068;
                double t63070 = gcab*gcab;
                double t63071 = t63070*t63070;
                double t63072 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t63073 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t63074 = gamma_aa[index]*gcab*t63025*2.0;
                double t63075 = t63030*t63070*t63026;
                double t63076 = t63074+t63075+1.0;
                double t63077 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t63078 = gamma_aa[index]*gcab*t63025;
                double t63079 = t63078+1.0;
                double t63080 = gamma_aa[index]*gcab*t63025*3.0;
                double t63081 = gamma_aa[index]*gcab*t63031*t63070*t63026;
                double t63082 = t63030*t63070*t63026*3.0;
                double t63083 = t63080+t63081+t63082+1.0;
                double t63084 = gamma_aa[index]*gcab*t63025*4.0;
                double t63085 = gamma_aa[index]*gcab*t63031*t63070*t63026*4.0;
                double t63086 = t63030*t63070*t63026*6.0;
                double t63087 = t63071*t63029*t63038;
                double t63088 = t63084+t63085+t63086+t63087+1.0;
                double t63089 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t63090 = 1.0/(t63076*t63076);
                double t63091 = 1.0/(t63083*t63083);
                double t63092 = 1.0/(t63088*t63088);
                double t63093 = gamma_aa[index]*gcab*t63089*(8.0/3.0);
                double t63094 = t63070*t63026*t63072*(8.0/3.0);
                double t63095 = t63093+t63094;
                double t63096 = gcab*t63025;
                double t63097 = gamma_aa[index]*t63030*t63070;
                double t63098 = t63096+t63097;
                double t63099 = gcab*t63025*(3.0/2.0);
                double t63100 = gamma_aa[index]*t63030*t63070*3.0;
                double t63101 = gcab*t63031*t63070*t63026*(3.0/2.0);
                double t63102 = t63100+t63101+t63099;
                double t63103 = gamma_aa[index]*gcab*t63089*4.0;
                double t63104 = gamma_aa[index]*gcab*t63070*t63026*t63077*4.0;
                double t63105 = t63070*t63026*t63072*8.0;
                double t63106 = t63103+t63104+t63105;
                double t63107 = gamma_aa[index]*gcab*t63089*(1.6E1/3.0);
                double t63108 = gamma_aa[index]*gcab*t63070*t63026*t63077*1.6E1;
                double t63109 = t63070*t63026*t63072*1.6E1;
                double t63110 = t63071*t63073*t63038*(1.6E1/3.0);
                double t63111 = t63110+t63107+t63108+t63109;
                double t63112 = gcab*t63025*2.0;
                double t63113 = gamma_aa[index]*t63030*t63070*6.0;
                double t63114 = gcab*t63031*t63070*t63026*6.0;
                double t63115 = gamma_aa[index]*t63026*t63071*t63029*2.0;
                double t63116 = t63112+t63113+t63114+t63115;
                double t63117 = t63065-t63066;
                double t63118 = t63052*t63117*t63049;
                double t63119 = t63118+t63066;
                double t63120 = rho_a[index]*t63119*2.0;
                double t63121 = sqrt(t63069);
                double t63122 = b1p*t63121;
                double t63123 = pow(t63069,3.0/2.0);
                double t63124 = b3p*t63123;
                double t63125 = b2p*c*t63068;
                double t63126 = 1.0/pow(t63067,2.0/3.0);
                double t63127 = b4p*t63011*t63126;
                double t63128 = t63122+t63124+t63125+t63127;
                double t63129 = 1.0/t63128;
                double t63130 = t63013*t63129*(1.0/2.0);
                double t63131 = t63130+1.0;
                double t63132 = log(t63131);
                double t63133 = a1p*c*t63068;
                double t63134 = t63133+1.0;
                double t63135 = t63120-c0p*rho_a[index]*t63132*t63134*4.0;
                double t63136 = 1.0/t63088;
                double t63137 = 1.0/t63076;
                double t63138 = 1.0/t63083;
                double t63139 = 1.0/(t63079*t63079);
                double t63140 = 1.0/(t63079*t63079*t63079);
                double t63141 = ccab3*gcab*t63031*t63070*t63106*t63026*t63091*(3.0/2.0);
                double t63142 = ccab2*gamma_aa[index]*t63030*t63070*t63090*t63095;
                double t63143 = ccab3*gamma_aa[index]*gcab*t63102*t63070*t63026*t63091*t63077*4.0;
                double t63144 = ccab4*gamma_aa[index]*t63111*t63026*t63071*t63029*t63092*2.0;
                double t63145 = ccab4*t63071*t63116*t63073*t63038*t63092*(1.6E1/3.0);
                double t63146 = ccab2*t63070*t63026*t63072*t63090*t63098*(8.0/3.0);
                double t63147 = gamma_aa[index]*t63070*t63072*4.0;
                double t63148 = 1.0/(t63076*t63076*t63076);
                double t63149 = 1.0/(t63083*t63083*t63083);
                double t63150 = 1.0/(t63088*t63088*t63088);
                double t63151 = 1.0/pow(t63067,4.0/3.0);
                double t63152 = 1.0/pow(rho_a[index],4.0/3.0);
                double t63153 = 1.0/pow(rho_a[index],5.0/3.0);
                double t63154 = 1.0/sqrt(t63008);
                double t63155 = 1.0/t63021;
                double t63156 = 1.0/(t63018*t63018);
                double t63157 = b4p*t63011*t63153*(2.0/3.0);
                double t63158 = b2p*c*t63152*(1.0/3.0);
                double t63159 = b1p*c*t63152*t63154*(1.0/6.0);
                double t63160 = b3p*c*t63152*t63009*(1.0/2.0);
                double t63161 = t63160+t63157+t63158+t63159;
                double t63162 = t63024*t63161*t63155*t63156;
                double t63163 = 1.0/t63079;
                double t63164 = gx*gx;
                double t63165 = t63164*t63164;
                double t63166 = gamma_aa[index]*gx*t63025;
                double t63167 = t63166+1.0;
                double t63168 = gamma_aa[index]*gx*t63025*3.0;
                double t63169 = gamma_aa[index]*gx*t63031*t63026*t63164;
                double t63170 = t63030*t63026*t63164*3.0;
                double t63171 = t63170+t63168+t63169+1.0;
                double t63172 = gamma_aa[index]*gx*t63025*4.0;
                double t63173 = gamma_aa[index]*gx*t63031*t63026*t63164*4.0;
                double t63174 = t63030*t63026*t63164*6.0;
                double t63175 = t63029*t63038*t63165;
                double t63176 = t63172+t63173+t63174+t63175+1.0;
                double t63177 = gamma_aa[index]*gx*t63025*2.0;
                double t63178 = t63030*t63026*t63164;
                double t63179 = t63177+t63178+1.0;
                double t63180 = 1.0/t63033;
                double t63181 = 1.0/t63043;
                double t63182 = 1.0/t63046;
                double t63183 = 1.0/t63037;
                double t63184 = 1.0/(t63033*t63033);
                double t63185 = 1.0/(t63037*t63037);
                double t63186 = 1.0/(t63046*t63046);
                double t63187 = gcaa*t63025*3.0;
                double t63188 = gamma_aa[index]*t63030*t63027*6.0;
                double t63189 = gcaa*t63031*t63026*t63027*3.0;
                double t63190 = t63187+t63188+t63189;
                double t63191 = 1.0/(t63043*t63043);
                double t63192 = gcaa*t63025*4.0;
                double t63193 = gamma_aa[index]*t63030*t63027*1.2E1;
                double t63194 = gcaa*t63031*t63026*t63027*1.2E1;
                double t63195 = gamma_aa[index]*t63026*t63028*t63029*4.0;
                double t63196 = t63192+t63193+t63194+t63195;
                double t63197 = gcaa*t63025*2.0;
                double t63198 = gamma_aa[index]*t63030*t63027*2.0;
                double t63199 = t63197+t63198;
                double t63200 = gamma_aa[index]*gcaa*t63089*(1.6E1/3.0);
                double t63201 = t63026*t63027*t63072*(1.6E1/3.0);
                double t63202 = t63200+t63201;
                double t63203 = gamma_aa[index]*gcaa*t63089*8.0;
                double t63204 = gamma_aa[index]*gcaa*t63026*t63027*t63077*8.0;
                double t63205 = t63026*t63027*t63072*1.6E1;
                double t63206 = t63203+t63204+t63205;
                double t63207 = gamma_aa[index]*gcaa*t63089*(3.2E1/3.0);
                double t63208 = gamma_aa[index]*gcaa*t63026*t63027*t63077*3.2E1;
                double t63209 = t63026*t63027*t63072*3.2E1;
                double t63210 = t63028*t63073*t63038*(3.2E1/3.0);
                double t63211 = t63210+t63207+t63208+t63209;
                double t63212 = 1.0/t63061;
                double t63213 = 1.0/(t63058*t63058);
                double t63214 = b4f*t63011*t63153*(2.0/3.0);
                double t63215 = b2f*c*t63152*(1.0/3.0);
                double t63216 = b1f*c*t63152*t63154*(1.0/6.0);
                double t63217 = b3f*c*t63152*t63009*(1.0/2.0);
                double t63218 = t63214+t63215+t63216+t63217;
                double t63219 = a1f*c*c0f*t63062*t63152*(2.0/3.0);
                double t63220 = a1p*c*c0p*t63022*t63152*(2.0/3.0);
                double t63221 = ccaa1*gcaa*t63025*t63180;
                double t63222 = ccaa4*gamma_aa[index]*t63026*t63028*t63181*t63029*4.0;
                double t63223 = ccaa2*gamma_aa[index]*t63030*t63027*t63182*2.0;
                double t63224 = ccaa3*gcaa*t63031*t63026*t63027*t63183*3.0;
                double t63225 = t63221+t63222+t63223+t63224-ccaa1*gamma_aa[index]*t63030*t63027*t63184-ccaa2*t63030* \
                   t63026*t63027*t63186*t63199-ccaa4*t63028*t63029*t63038*t63191*t63196-ccaa3*gamma_aa[index]*gcaa*t63031* \
                   t63026*t63027*t63190*t63185;
                double t63226 = 1.0/t63167;
                double t63227 = 1.0/t63176;
                double t63228 = 1.0/t63179;
                double t63229 = 1.0/t63171;
                double t63230 = 1.0/(t63167*t63167);
                double t63231 = 1.0/(t63171*t63171);
                double t63232 = 1.0/(t63179*t63179);
                double t63233 = gx*t63025*3.0;
                double t63234 = gamma_aa[index]*t63030*t63164*6.0;
                double t63235 = gx*t63031*t63026*t63164*3.0;
                double t63236 = t63233+t63234+t63235;
                double t63237 = 1.0/(t63176*t63176);
                double t63238 = gx*t63025*4.0;
                double t63239 = gamma_aa[index]*t63030*t63164*1.2E1;
                double t63240 = gx*t63031*t63026*t63164*1.2E1;
                double t63241 = gamma_aa[index]*t63026*t63029*t63165*4.0;
                double t63242 = t63240+t63241+t63238+t63239;
                double t63243 = gx*t63025*2.0;
                double t63244 = gamma_aa[index]*t63030*t63164*2.0;
                double t63245 = t63243+t63244;
                double t63246 = gamma_aa[index]*gx*t63089*(1.6E1/3.0);
                double t63247 = t63026*t63072*t63164*(1.6E1/3.0);
                double t63248 = t63246+t63247;
                double t63249 = gamma_aa[index]*gx*t63089*8.0;
                double t63250 = gamma_aa[index]*gx*t63026*t63164*t63077*8.0;
                double t63251 = t63026*t63072*t63164*1.6E1;
                double t63252 = t63250+t63251+t63249;
                double t63253 = gamma_aa[index]*gx*t63089*(3.2E1/3.0);
                double t63254 = gamma_aa[index]*gx*t63026*t63164*t63077*3.2E1;
                double t63255 = t63026*t63072*t63164*3.2E1;
                double t63256 = t63073*t63038*t63165*(3.2E1/3.0);
                double t63257 = t63253+t63254+t63255+t63256;
                v_rho_a_gamma_aa_[index] = t63135*(t63141+t63142+t63143+t63144+t63145+t63146-ccab2*gamma_aa[index]* \
                   t63070*t63072*t63137*(4.0/3.0)+ccab1*gamma_aa[index]*t63070*t63072*t63139*(4.0/3.0)+ccab4*t63071*t63029* \
                   t63038*t63092*(gamma_aa[index]*t63070*t63072*8.0+gamma_aa[index]*t63026*t63071*t63073*8.0+gcab*t63070* \
                   t63026*t63077*1.6E1)+ccab2*gamma_aa[index]*t63026*t63071*t63090*t63073*(4.0/3.0)-ccab4*gamma_aa[index]* \
                   t63026*t63071*t63073*t63136*8.0-ccab1*gcab*t63140*t63070*t63026*t63077*(4.0/3.0)-ccab3*gcab*t63070* \
                   t63026*t63138*t63077*4.0-ccab4*t63111*t63150*t63071*t63116*t63029*t63038*2.0-ccab2*t63030*t63070*t63026* \
                   t63148*t63095*t63098*2.0+ccab3*gamma_aa[index]*gcab*t63031*t63070*t63026*t63091*(t63147+gcab*t63070* \
                   t63026*t63077*4.0)-ccab3*gamma_aa[index]*gcab*t63102*t63031*t63070*t63106*t63026*t63149*2.0)-t63225* \
                   (t63066+t63052*t63049*(t63065-c0p*t63022*t63024*2.0))-(-t63118-t63066+rho_a[index]*((t63134*1.0/(t63128* \
                   t63128)*(b4p*t63011*1.0/pow(t63067,5.0/3.0)*(2.0/3.0)+b2p*c*t63151*(1.0/3.0)+b3p*c*t63121*t63151*(1.0/ \
                   2.0)+b1p*c*t63151*1.0/sqrt(t63069)*(1.0/6.0)))/t63131-a1p*c*c0p*t63132*t63151*(2.0/3.0))*2.0+rho_a[index]* \
                   (t63220-t63162+t63052*t63049*(t63162+t63219-t63212*t63213*t63064*t63218-a1p*c*c0p*t63022*t63152*(2.0/ \
                   3.0)))+c0p*t63132*t63134*2.0)*(ccab1*gcab*t63025*t63163*(1.0/2.0)+ccab2*gamma_aa[index]*t63030*t63070* \
                   t63137-ccab1*gamma_aa[index]*t63030*t63070*t63139*(1.0/2.0)-ccab2*t63030*t63070*t63026*t63090*t63098- \
                   ccab4*t63071*t63116*t63029*t63038*t63092+ccab4*gamma_aa[index]*t63026*t63071*t63136*t63029*2.0+ccab3* \
                   gcab*t63031*t63070*t63026*t63138*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t63102*t63031*t63070*t63026* \
                   t63091)*2.0+t63135*(t63141+t63142+t63143+t63144+t63145+t63146-ccab1*gcab*t63163*t63089*(4.0/3.0)-ccab2* \
                   gamma_aa[index]*t63070*t63072*t63137*4.0+ccab1*gamma_aa[index]*t63070*t63072*t63139*(8.0/3.0)+ccab4* \
                   t63071*t63029*t63038*t63092*(gcab*t63089*(1.6E1/3.0)+gamma_aa[index]*t63070*t63072*2.4E1+gamma_aa[index]* \
                   t63026*t63071*t63073*(4.0E1/3.0)+gcab*t63070*t63026*t63077*3.2E1)+ccab2*t63030*t63070*t63026*t63090* \
                   (t63147+gcab*t63089*(8.0/3.0))-ccab4*gamma_aa[index]*t63026*t63071*t63073*t63136*(4.0E1/3.0)-ccab1* \
                   gcab*t63140*t63070*t63026*t63077*(4.0/3.0)-ccab3*gcab*t63070*t63026*t63138*t63077*8.0-ccab4*t63111* \
                   t63150*t63071*t63116*t63029*t63038*2.0-ccab2*t63030*t63070*t63026*t63148*t63095*t63098*2.0+ccab3*gamma_aa[index]* \
                   gcab*t63031*t63070*t63026*t63091*(gcab*t63089*4.0+gamma_aa[index]*t63070*t63072*1.2E1+gcab*t63070* \
                   t63026*t63077*8.0)-ccab3*gamma_aa[index]*gcab*t63102*t63031*t63070*t63106*t63026*t63149*2.0)-rho_a[index]* \
                   t63119*(ccaa1*gcaa*t63180*t63089*(-8.0/3.0)-ccaa2*gamma_aa[index]*t63027*t63072*t63182*(3.2E1/3.0) \
                   +ccaa1*gamma_aa[index]*t63027*t63072*t63184*8.0+ccaa2*t63026*t63027*t63072*t63186*t63199*(1.6E1/3.0) \
                   +ccaa4*t63028*t63073*t63038*t63191*t63196*(3.2E1/3.0)+ccaa4*t63028*t63029*t63038*t63191*(gcaa*t63089* \
                   (3.2E1/3.0)+gamma_aa[index]*t63027*t63072*6.4E1+gamma_aa[index]*t63026*t63028*t63073*(1.28E2/3.0)+ \
                   gcaa*t63026*t63027*t63077*9.6E1)-ccaa1*gcaa*1.0/(t63033*t63033*t63033)*t63026*t63027*t63077*(1.6E1/ \
                   3.0)+ccaa2*t63030*t63026*t63027*t63186*(gcaa*t63089*(1.6E1/3.0)+gamma_aa[index]*t63027*t63072*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t63030*t63202*t63027*t63186*2.0-ccaa4*gamma_aa[index]*t63026*t63028*t63073* \
                   t63181*(1.28E2/3.0)-ccaa3*gcaa*t63026*t63027*t63183*t63077*2.4E1+ccaa4*gamma_aa[index]*t63211*t63026* \
                   t63028*t63029*t63191*4.0+ccaa3*gcaa*t63031*t63026*t63206*t63027*t63185*3.0-ccaa2*t63030*t63202*t63026* \
                   t63027*1.0/(t63046*t63046*t63046)*t63199*2.0-ccaa4*t63211*1.0/(t63043*t63043*t63043)*t63028*t63029* \
                   t63038*t63196*2.0+ccaa3*gamma_aa[index]*gcaa*t63031*t63026*t63027*t63185*(gcaa*t63089*8.0+gamma_aa[index]* \
                   t63027*t63072*3.2E1+gcaa*t63026*t63027*t63077*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t63026*t63027*t63190* \
                   t63077*t63185*8.0-ccaa3*gamma_aa[index]*gcaa*t63031*t63026*t63206*t63027*1.0/(t63037*t63037*t63037) \
                   *t63190*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t63226*t63089*(-8.0/3.0)+cx1*gamma_aa[index]*t63230* \
                   t63072*t63164*8.0-cx2*gamma_aa[index]*t63072*t63164*t63228*(3.2E1/3.0)+cx2*t63232*t63026*t63072*t63164* \
                   t63245*(1.6E1/3.0)+cx4*t63242*t63073*t63038*t63165*t63237*(3.2E1/3.0)+cx4*t63029*t63038*t63165*t63237* \
                   (gx*t63089*(3.2E1/3.0)+gamma_aa[index]*t63072*t63164*6.4E1+gamma_aa[index]*t63026*t63073*t63165*(1.28E2/ \
                   3.0)+gx*t63026*t63164*t63077*9.6E1)-cx1*gx*t63026*t63164*t63077*1.0/(t63167*t63167*t63167)*(1.6E1/ \
                   3.0)+cx2*t63030*t63232*t63026*t63164*(gx*t63089*(1.6E1/3.0)+gamma_aa[index]*t63072*t63164*(3.2E1/3.0) \
                   )+cx2*gamma_aa[index]*t63030*t63232*t63164*t63248*2.0-cx4*gamma_aa[index]*t63026*t63073*t63227*t63165* \
                   (1.28E2/3.0)-cx3*gx*t63026*t63164*t63229*t63077*2.4E1+cx4*gamma_aa[index]*t63026*t63029*t63165*t63237* \
                   t63257*4.0+cx3*gx*t63031*t63231*t63026*t63252*t63164*3.0-cx2*t63030*t63026*t63164*t63245*t63248*1.0/ \
                   (t63179*t63179*t63179)*2.0-cx4*t63242*t63029*t63038*t63165*1.0/(t63176*t63176*t63176)*t63257*2.0+cx3* \
                   gamma_aa[index]*gx*t63031*t63231*t63026*t63164*(gx*t63089*8.0+gamma_aa[index]*t63072*t63164*3.2E1+ \
                   gx*t63026*t63164*t63077*2.4E1)+cx3*gamma_aa[index]*gx*t63231*t63026*t63164*t63236*t63077*8.0-cx3*gamma_aa[index]* \
                   gx*t63031*t63026*1.0/(t63171*t63171*t63171)*t63252*t63164*t63236*2.0)-rho_a[index]*t63225*(-t63220+ \
                   t63162+t63052*t63049*(t63220-t63162-t63219+t63212*t63213*t63064*t63218))+c0*pow(rho_a[index],1.0/3.0) \
                   *(cx1*gx*t63025*t63226-cx1*gamma_aa[index]*t63030*t63230*t63164+cx2*gamma_aa[index]*t63030*t63164* \
                   t63228*2.0-cx2*t63030*t63232*t63026*t63164*t63245-cx4*t63242*t63029*t63038*t63165*t63237+cx4*gamma_aa[index]* \
                   t63026*t63029*t63227*t63165*4.0+cx3*gx*t63031*t63026*t63164*t63229*3.0-cx3*gamma_aa[index]*gx*t63031* \
                   t63231*t63026*t63164*t63236)*(4.0/3.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t63259 = 1.0/pow(rho_a[index],1.0/3.0);
                double t63260 = c*t63259;
                double t63261 = sqrt(t63260);
                double t63262 = pow(t63260,3.0/2.0);
                double t63263 = c*c;
                double t63264 = 1.0/pow(rho_a[index],2.0/3.0);
                double t63265 = 1.0/c0p;
                double t63266 = b1p*t63261;
                double t63267 = b3p*t63262;
                double t63268 = b4p*t63263*t63264;
                double t63269 = b2p*c*t63259;
                double t63270 = t63266+t63267+t63268+t63269;
                double t63271 = 1.0/t63270;
                double t63272 = t63271*t63265*(1.0/2.0);
                double t63273 = t63272+1.0;
                double t63274 = log(t63273);
                double t63275 = a1p*c*t63259;
                double t63276 = t63275+1.0;
                double t63277 = rho_a[index]*2.0;
                double t63278 = 1.0/pow(t63277,1.0/3.0);
                double t63279 = c*t63278;
                double t63280 = gcab*gcab;
                double t63281 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t63282 = 1.0/pow(rho_a[index],8.0/3.0);
                double t63283 = gamma_aa[index]*gamma_aa[index];
                double t63284 = t63280*t63280;
                double t63285 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t63286 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t63287 = gamma_aa[index]*gcab*t63282;
                double t63288 = t63287+1.0;
                double t63289 = gamma_aa[index]*gcab*t63282*2.0;
                double t63290 = t63280*t63281*t63283;
                double t63291 = t63290+t63289+1.0;
                double t63292 = gamma_aa[index]*gcab*t63282*3.0;
                double t63293 = gamma_aa[index]*gcab*t63280*t63283*t63286;
                double t63294 = t63280*t63281*t63283*3.0;
                double t63295 = t63292+t63293+t63294+1.0;
                double t63296 = t63283*t63283;
                double t63312 = gcab*t63282*2.0;
                double t63313 = gamma_aa[index]*t63280*t63281*6.0;
                double t63314 = gcab*t63280*t63283*t63286*6.0;
                double t63315 = gamma_aa[index]*t63283*t63284*t63285*2.0;
                double t63297 = t63312+t63313+t63314+t63315;
                double t63298 = gamma_aa[index]*gcab*t63282*4.0;
                double t63299 = gamma_aa[index]*gcab*t63280*t63283*t63286*4.0;
                double t63300 = t63280*t63281*t63283*6.0;
                double t63301 = t63284*t63285*t63296;
                double t63302 = t63300+t63301+t63298+t63299+1.0;
                double t63305 = gcab*t63282;
                double t63306 = gamma_aa[index]*t63280*t63281;
                double t63303 = t63305+t63306;
                double t63304 = 1.0/(t63295*t63295);
                double t63307 = 1.0/(t63291*t63291);
                double t63308 = gcab*t63282*(3.0/2.0);
                double t63309 = gamma_aa[index]*t63280*t63281*3.0;
                double t63310 = gcab*t63280*t63283*t63286*(3.0/2.0);
                double t63311 = t63310+t63308+t63309;
                double t63316 = 1.0/(t63302*t63302);
                double t63317 = gx*gx;
                double t63318 = t63317*t63317;
                double t63319 = gamma_aa[index]*gx*t63282;
                double t63320 = t63319+1.0;
                double t63321 = gamma_aa[index]*gx*t63282*2.0;
                double t63322 = t63281*t63317*t63283;
                double t63323 = t63321+t63322+1.0;
                double t63324 = gamma_aa[index]*gx*t63282*3.0;
                double t63325 = gamma_aa[index]*gx*t63317*t63283*t63286;
                double t63326 = t63281*t63317*t63283*3.0;
                double t63327 = t63324+t63325+t63326+1.0;
                double t63343 = gx*t63282*4.0;
                double t63344 = gamma_aa[index]*t63281*t63317*1.2E1;
                double t63345 = gx*t63317*t63283*t63286*1.2E1;
                double t63346 = gamma_aa[index]*t63318*t63283*t63285*4.0;
                double t63328 = t63343+t63344+t63345+t63346;
                double t63329 = gamma_aa[index]*gx*t63282*4.0;
                double t63330 = gamma_aa[index]*gx*t63317*t63283*t63286*4.0;
                double t63331 = t63281*t63317*t63283*6.0;
                double t63332 = t63318*t63285*t63296;
                double t63333 = t63330+t63331+t63332+t63329+1.0;
                double t63336 = gx*t63282*2.0;
                double t63337 = gamma_aa[index]*t63281*t63317*2.0;
                double t63334 = t63336+t63337;
                double t63335 = 1.0/(t63327*t63327);
                double t63338 = 1.0/(t63323*t63323);
                double t63339 = gx*t63282*3.0;
                double t63340 = gamma_aa[index]*t63281*t63317*6.0;
                double t63341 = gx*t63317*t63283*t63286*3.0;
                double t63342 = t63340+t63341+t63339;
                double t63347 = 1.0/(t63333*t63333);
                double t63348 = pow(2.0,1.0/3.0);
                double t63349 = t63348*2.0;
                double t63350 = t63349-2.0;
                double t63351 = two_13*2.0;
                double t63352 = t63351-2.0;
                double t63353 = 1.0/t63352;
                double t63354 = 1.0/c0f;
                double t63355 = b1f*t63261;
                double t63356 = b3f*t63262;
                double t63357 = b4f*t63263*t63264;
                double t63358 = b2f*c*t63259;
                double t63359 = t63355+t63356+t63357+t63358;
                double t63360 = 1.0/t63359;
                double t63361 = t63360*t63354*(1.0/2.0);
                double t63362 = t63361+1.0;
                double t63363 = log(t63362);
                double t63364 = a1f*c*t63259;
                double t63365 = t63364+1.0;
                double t63366 = c0f*t63363*t63365*2.0;
                double t63367 = c0p*t63274*t63276*2.0;
                double t63368 = gcaa*gcaa;
                double t63369 = t63368*t63368;
                double t63370 = gamma_aa[index]*gcaa*t63282;
                double t63371 = t63370+1.0;
                double t63372 = gamma_aa[index]*gcaa*t63282*2.0;
                double t63373 = t63281*t63283*t63368;
                double t63374 = t63372+t63373+1.0;
                double t63375 = gamma_aa[index]*gcaa*t63282*3.0;
                double t63376 = gamma_aa[index]*gcaa*t63283*t63286*t63368;
                double t63377 = t63281*t63283*t63368*3.0;
                double t63378 = t63375+t63376+t63377+1.0;
                double t63394 = gcaa*t63282*4.0;
                double t63395 = gamma_aa[index]*t63281*t63368*1.2E1;
                double t63396 = gcaa*t63283*t63286*t63368*1.2E1;
                double t63397 = gamma_aa[index]*t63283*t63285*t63369*4.0;
                double t63379 = t63394+t63395+t63396+t63397;
                double t63380 = gamma_aa[index]*gcaa*t63282*4.0;
                double t63381 = gamma_aa[index]*gcaa*t63283*t63286*t63368*4.0;
                double t63382 = t63281*t63283*t63368*6.0;
                double t63383 = t63285*t63296*t63369;
                double t63384 = t63380+t63381+t63382+t63383+1.0;
                double t63387 = gcaa*t63282*2.0;
                double t63388 = gamma_aa[index]*t63281*t63368*2.0;
                double t63385 = t63387+t63388;
                double t63386 = 1.0/(t63378*t63378);
                double t63389 = 1.0/(t63374*t63374);
                double t63390 = gcaa*t63282*3.0;
                double t63391 = gamma_aa[index]*t63281*t63368*6.0;
                double t63392 = gcaa*t63283*t63286*t63368*3.0;
                double t63393 = t63390+t63391+t63392;
                double t63398 = 1.0/(t63384*t63384);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t63367+t63350*t63353*(t63366-c0p*t63274*t63276*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t63265*(1.0/2.0))/(b1p*sqrt(t63279)+b3p*pow(t63279,3.0/2.0)+b4p*t63263* \
                   1.0/pow(t63277,2.0/3.0)+b2p*c*t63278)+1.0)*(a1p*c*t63278+1.0)*4.0)*((ccab2*t63280*t63281*(1.0/2.0) \
                   )/t63291-ccab1*t63280*t63281*1.0/(t63288*t63288)*(1.0/2.0)-ccab2*t63307*t63283*t63284*t63285*(1.0/ \
                   2.0)+(ccab4*t63283*t63284*t63285*3.0)/t63302-ccab4*t63316*t63284*t63285*t63296*(t63280*t63281*3.0+ \
                   t63283*t63284*t63285*3.0+gamma_aa[index]*gcab*t63280*t63286*6.0)+(ccab3*gamma_aa[index]*gcab*t63280* \
                   t63286*(3.0/2.0))/t63295+ccab1*gamma_aa[index]*gcab*t63280*t63286*1.0/(t63288*t63288*t63288)*(1.0/ \
                   2.0)+ccab2*(t63303*t63303)*t63280*t63281*1.0/(t63291*t63291*t63291)*t63283*2.0+ccab4*1.0/(t63302*t63302* \
                   t63302)*t63284*t63285*t63296*(t63297*t63297)*2.0-ccab2*gamma_aa[index]*t63303*t63280*t63307*t63281* \
                   2.0-ccab4*gamma_aa[index]*t63316*t63283*t63284*t63285*t63297*4.0-ccab3*gcab*t63311*t63304*t63280*t63283* \
                   t63286*3.0-ccab3*gamma_aa[index]*gcab*t63304*t63280*t63283*t63286*(t63280*t63281*(3.0/2.0)+gamma_aa[index]* \
                   gcab*t63280*t63286*(3.0/2.0))+ccab3*gamma_aa[index]*gcab*(t63311*t63311)*t63280*t63283*t63286*1.0/ \
                   (t63295*t63295*t63295)*2.0)*4.0+rho_a[index]*(t63367+t63350*t63353*(t63366-t63367))*(ccaa1*t63281* \
                   1.0/(t63371*t63371)*t63368*2.0-(ccaa2*t63281*t63368*2.0)/t63374+ccaa2*t63283*t63285*t63369*t63389* \
                   2.0-(ccaa4*t63283*t63285*t63369*1.2E1)/t63384+ccaa4*t63285*t63296*t63369*t63398*(t63281*t63368*1.2E1+ \
                   t63283*t63285*t63369*1.2E1+gamma_aa[index]*gcaa*t63286*t63368*2.4E1)-ccaa1*gamma_aa[index]*gcaa*1.0/ \
                   (t63371*t63371*t63371)*t63286*t63368*2.0-(ccaa3*gamma_aa[index]*gcaa*t63286*t63368*6.0)/t63378-ccaa2* \
                   t63281*t63283*1.0/(t63374*t63374*t63374)*(t63385*t63385)*t63368*2.0-ccaa4*t63285*1.0/(t63384*t63384* \
                   t63384)*t63296*t63369*(t63379*t63379)*2.0+ccaa2*gamma_aa[index]*t63281*t63385*t63368*t63389*4.0+ccaa4* \
                   gamma_aa[index]*t63283*t63285*t63369*t63379*t63398*8.0+ccaa3*gcaa*t63283*t63393*t63286*t63368*t63386* \
                   6.0+ccaa3*gamma_aa[index]*gcaa*t63283*t63286*t63368*t63386*(t63281*t63368*6.0+gamma_aa[index]*gcaa* \
                   t63286*t63368*6.0)-ccaa3*gamma_aa[index]*gcaa*t63283*(t63393*t63393)*t63286*t63368*1.0/(t63378*t63378* \
                   t63378)*2.0)*2.0-c0*pow(rho_a[index],4.0/3.0)*(cx1*1.0/(t63320*t63320)*t63281*t63317*2.0-(cx2*t63281* \
                   t63317*2.0)/t63323+cx2*t63318*t63283*t63338*t63285*2.0-(cx4*t63318*t63283*t63285*1.2E1)/t63333+cx4* \
                   t63318*t63347*t63285*t63296*(t63281*t63317*1.2E1+t63318*t63283*t63285*1.2E1+gamma_aa[index]*gx*t63317* \
                   t63286*2.4E1)-cx1*gamma_aa[index]*gx*1.0/(t63320*t63320*t63320)*t63317*t63286*2.0-(cx3*gamma_aa[index]* \
                   gx*t63317*t63286*6.0)/t63327-cx2*1.0/(t63323*t63323*t63323)*(t63334*t63334)*t63281*t63317*t63283*2.0- \
                   cx4*1.0/(t63333*t63333*t63333)*t63318*(t63328*t63328)*t63285*t63296*2.0+cx2*gamma_aa[index]*t63334* \
                   t63281*t63317*t63338*4.0+cx4*gamma_aa[index]*t63318*t63283*t63328*t63347*t63285*8.0+cx3*gx*t63342* \
                   t63317*t63335*t63283*t63286*6.0+cx3*gamma_aa[index]*gx*t63317*t63335*t63283*t63286*(t63281*t63317* \
                   6.0+gamma_aa[index]*gx*t63317*t63286*6.0)-cx3*gamma_aa[index]*gx*(t63342*t63342)*t63317*1.0/(t63327* \
                   t63327*t63327)*t63283*t63286*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void HCTH147_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t57578 = 1.0/pow(rho_a[index],1.0/3.0);
            double t57579 = c*t57578;
            double t57580 = sqrt(t57579);
            double t57581 = pow(t57579,3.0/2.0);
            double t57582 = c*c;
            double t57583 = 1.0/pow(rho_a[index],2.0/3.0);
            double t57584 = 1.0/c0p;
            double t57585 = b1p*t57580;
            double t57586 = b3p*t57581;
            double t57587 = b4p*t57582*t57583;
            double t57588 = b2p*c*t57578;
            double t57589 = t57585+t57586+t57587+t57588;
            double t57590 = 1.0/t57589;
            double t57591 = t57590*t57584*(1.0/2.0);
            double t57592 = t57591+1.0;
            double t57593 = log(t57592);
            double t57594 = a1p*c*t57578;
            double t57595 = t57594+1.0;
            double t57596 = pow(2.0,1.0/3.0);
            double t57597 = t57596*2.0;
            double t57598 = t57597-2.0;
            double t57599 = two_13*2.0;
            double t57600 = t57599-2.0;
            double t57601 = 1.0/t57600;
            double t57602 = 1.0/c0f;
            double t57603 = 1.0/pow(rho_b[index],1.0/3.0);
            double t57604 = c*t57603;
            double t57605 = sqrt(t57604);
            double t57606 = pow(t57604,3.0/2.0);
            double t57607 = 1.0/pow(rho_b[index],2.0/3.0);
            double t57608 = b1p*t57605;
            double t57609 = b3p*t57606;
            double t57610 = b4p*t57607*t57582;
            double t57611 = b2p*c*t57603;
            double t57612 = t57610+t57611+t57608+t57609;
            double t57613 = 1.0/t57612;
            double t57614 = t57613*t57584*(1.0/2.0);
            double t57615 = t57614+1.0;
            double t57616 = log(t57615);
            double t57617 = a1p*c*t57603;
            double t57618 = t57617+1.0;
            double t57619 = c0p*t57616*t57618*2.0;
            double t57620 = rho_a[index]+rho_b[index];
            double t57621 = 1.0/pow(t57620,1.0/3.0);
            double t57622 = c*t57621;
            double t57623 = sqrt(t57622);
            double t57624 = pow(t57622,3.0/2.0);
            double t57625 = 1.0/pow(t57620,2.0/3.0);
            double t57626 = b1p*t57623;
            double t57627 = b3p*t57624;
            double t57628 = b4p*t57625*t57582;
            double t57629 = b2p*c*t57621;
            double t57630 = t57626+t57627+t57628+t57629;
            double t57631 = 1.0/t57630;
            double t57632 = t57631*t57584*(1.0/2.0);
            double t57633 = t57632+1.0;
            double t57634 = log(t57633);
            double t57635 = a1p*c*t57621;
            double t57636 = t57635+1.0;
            double t57637 = c0p*t57634*t57636*2.0;
            double t57638 = rho_a[index]-rho_b[index];
            double t57639 = t57638*t57638;
            double t57640 = 1.0/t57620;
            double t57641 = t57640*t57638;
            double t57642 = 1.0/(t57620*t57620*t57620*t57620);
            double t57643 = t57639*t57639;
            double t57644 = t57641+1.0;
            double t57645 = pow(t57644,4.0/3.0);
            double t57646 = -t57641+1.0;
            double t57647 = pow(t57646,4.0/3.0);
            double t57648 = t57645+t57647-2.0;
            double t57651 = 1.0/pow(rho_a[index],8.0/3.0);
            double t57652 = gamma_aa[index]*t57651*(1.0/2.0);
            double t57653 = 1.0/pow(rho_b[index],8.0/3.0);
            double t57654 = gamma_bb[index]*t57653*(1.0/2.0);
            double t57649 = t57652+t57654;
            double t57650 = gcab*gcab;
            double t57655 = t57649*t57649;
            double t57656 = t57650*t57650;
            double t57657 = t57655*t57655;
            double t57658 = c0p*t57593*t57595*2.0;
            double t57659 = b1f*t57580;
            double t57660 = b3f*t57581;
            double t57661 = b4f*t57582*t57583;
            double t57662 = b2f*c*t57578;
            double t57663 = t57660+t57661+t57662+t57659;
            double t57664 = 1.0/t57663;
            double t57665 = t57602*t57664*(1.0/2.0);
            double t57666 = t57665+1.0;
            double t57667 = log(t57666);
            double t57668 = a1f*c*t57578;
            double t57669 = t57668+1.0;
            double t57670 = t57658-c0f*t57667*t57669*2.0;
            double t57671 = t57658-t57601*t57670*t57598;
            double t57672 = gamma_aa[index]*gamma_aa[index];
            double t57673 = gcaa*gcaa;
            double t57674 = t57672*t57672;
            double t57675 = t57673*t57673;
            double t57676 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t57677 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t57678 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t57679 = b1f*t57605;
            double t57680 = b3f*t57606;
            double t57681 = b4f*t57607*t57582;
            double t57682 = b2f*c*t57603;
            double t57683 = t57680+t57681+t57682+t57679;
            double t57684 = 1.0/t57683;
            double t57685 = t57602*t57684*(1.0/2.0);
            double t57686 = t57685+1.0;
            double t57687 = log(t57686);
            double t57688 = a1f*c*t57603;
            double t57689 = t57688+1.0;
            double t57690 = t57619-c0f*t57687*t57689*2.0;
            double t57691 = t57619-t57601*t57690*t57598;
            double t57692 = gamma_bb[index]*gamma_bb[index];
            double t57693 = t57692*t57692;
            double t57694 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t57695 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t57696 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t57697 = gx*gx;
            double t57698 = t57697*t57697;
            functional_[index] = (rho_a[index]*t57671+rho_b[index]*t57691-t57620*(t57637-t57601*t57642*t57643* \
               t57648*(t57637-c0f*log((t57602*(1.0/2.0))/(b1f*t57623+b3f*t57624+b2f*c*t57621+b4f*t57625*t57582)+1.0) \
               *(a1f*c*t57621+1.0)*2.0)+(Aa*t57601*t57648*log((1.0/2.0)/(Aa*(b1a*t57623+b3a*t57624+b2a*c*t57621+b4a* \
               t57625*t57582))+1.0)*(t57642*t57643-1.0)*(a1a*c*t57621+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t57656*t57657) \
               /(gcab*t57649*4.0+t57650*t57655*6.0+t57656*t57657+gcab*t57650*t57655*t57649*4.0+1.0)+(ccab1*gcab*t57649) \
               /(gcab*t57649+1.0)+(ccab2*t57650*t57655)/(gcab*t57649*2.0+t57650*t57655+1.0)+(ccab3*gcab*t57650*t57655* \
               t57649)/(gcab*t57649*3.0+t57650*t57655*3.0+gcab*t57650*t57655*t57649+1.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx0+(cx2*t57672*t57678*t57697)/(gamma_aa[index]*gx*t57651*2.0+t57672*t57678*t57697+1.0)+(cx1* \
               gamma_aa[index]*gx*t57651)/(gamma_aa[index]*gx*t57651+1.0)+(cx4*t57674*t57676*t57698)/(gamma_aa[index]* \
               gx*t57651*4.0+t57672*t57678*t57697*6.0+t57674*t57676*t57698+gamma_aa[index]*gx*t57672*t57677*t57697* \
               4.0+1.0)+(cx3*gamma_aa[index]*gx*t57672*t57677*t57697)/(gamma_aa[index]*gx*t57651*3.0+t57672*t57678* \
               t57697*3.0+gamma_aa[index]*gx*t57672*t57677*t57697+1.0))+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t57692* \
               t57696*t57697)/(gamma_bb[index]*gx*t57653*2.0+t57692*t57696*t57697+1.0)+(cx1*gamma_bb[index]*gx*t57653) \
               /(gamma_bb[index]*gx*t57653+1.0)+(cx4*t57693*t57694*t57698)/(gamma_bb[index]*gx*t57653*4.0+t57692* \
               t57696*t57697*6.0+t57693*t57694*t57698+gamma_bb[index]*gx*t57692*t57695*t57697*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t57692*t57695*t57697)/(gamma_bb[index]*gx*t57653*3.0+t57692*t57696*t57697*3.0+gamma_bb[index]*gx* \
               t57692*t57695*t57697+1.0))-rho_a[index]*t57671*(ccaa0+(ccaa2*t57672*t57673*t57678)/(gamma_aa[index]* \
               gcaa*t57651*2.0+t57672*t57673*t57678+1.0)+(ccaa1*gamma_aa[index]*gcaa*t57651)/(gamma_aa[index]*gcaa* \
               t57651+1.0)+(ccaa4*t57674*t57675*t57676)/(gamma_aa[index]*gcaa*t57651*4.0+t57672*t57673*t57678*6.0+ \
               t57674*t57675*t57676+gamma_aa[index]*gcaa*t57672*t57673*t57677*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
               t57672*t57673*t57677)/(gamma_aa[index]*gcaa*t57651*3.0+t57672*t57673*t57678*3.0+gamma_aa[index]*gcaa* \
               t57672*t57673*t57677+1.0))-rho_b[index]*t57691*(ccaa0+(ccaa2*t57673*t57692*t57696)/(gamma_bb[index]* \
               gcaa*t57653*2.0+t57673*t57692*t57696+1.0)+(ccaa1*gamma_bb[index]*gcaa*t57653)/(gamma_bb[index]*gcaa* \
               t57653+1.0)+(ccaa4*t57675*t57693*t57694)/(gamma_bb[index]*gcaa*t57653*4.0+t57673*t57692*t57696*6.0+ \
               t57675*t57693*t57694+gamma_bb[index]*gcaa*t57673*t57692*t57695*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
               t57673*t57692*t57695)/(gamma_bb[index]*gcaa*t57653*3.0+t57673*t57692*t57696*3.0+gamma_bb[index]*gcaa* \
               t57673*t57692*t57695+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t61723 = 1.0/pow(rho_a[index],1.0/3.0);
            double t61724 = c*t61723;
            double t61725 = sqrt(t61724);
            double t61726 = pow(t61724,3.0/2.0);
            double t61727 = c*c;
            double t61728 = 1.0/pow(rho_a[index],2.0/3.0);
            double t61729 = 1.0/c0p;
            double t61730 = b1p*t61725;
            double t61731 = b3p*t61726;
            double t61732 = b4p*t61727*t61728;
            double t61733 = b2p*c*t61723;
            double t61734 = t61730+t61731+t61732+t61733;
            double t61735 = 1.0/t61734;
            double t61736 = t61735*t61729*(1.0/2.0);
            double t61737 = t61736+1.0;
            double t61738 = log(t61737);
            double t61739 = a1p*c*t61723;
            double t61740 = t61739+1.0;
            double t61741 = gamma_aa[index]*gamma_aa[index];
            double t61742 = gcaa*gcaa;
            double t61743 = t61741*t61741;
            double t61744 = t61742*t61742;
            double t61745 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t61746 = 1.0/pow(rho_a[index],8.0/3.0);
            double t61747 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t61748 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t61749 = gx*gx;
            double t61750 = t61749*t61749;
            functional_[index] = c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t61741*t61748*t61749)/(gamma_aa[index]* \
               gx*t61746*2.0+t61741*t61748*t61749+1.0)+(cx1*gamma_aa[index]*gx*t61746)/(gamma_aa[index]*gx*t61746+ \
               1.0)+(cx4*t61750*t61743*t61745)/(gamma_aa[index]*gx*t61746*4.0+t61750*t61743*t61745+t61741*t61748* \
               t61749*6.0+gamma_aa[index]*gx*t61741*t61747*t61749*4.0+1.0)+(cx3*gamma_aa[index]*gx*t61741*t61747* \
               t61749)/(gamma_aa[index]*gx*t61746*3.0+t61741*t61748*t61749*3.0+gamma_aa[index]*gx*t61741*t61747*t61749+ \
               1.0))-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t61725+b3f*t61726+b2f* \
               c*t61723+b4f*t61727*t61728))+1.0)*(a1f*c*t61723+1.0)*2.0-c0p*t61740*t61738*2.0))/(two_13*2.0-2.0)+ \
               c0p*t61740*t61738*2.0)*(ccaa0+(ccaa2*t61741*t61742*t61748)/(gamma_aa[index]*gcaa*t61746*2.0+t61741* \
               t61742*t61748+1.0)+(ccaa1*gamma_aa[index]*gcaa*t61746)/(gamma_aa[index]*gcaa*t61746+1.0)+(ccaa4*t61743* \
               t61744*t61745)/(gamma_aa[index]*gcaa*t61746*4.0+t61741*t61742*t61748*6.0+t61743*t61744*t61745+gamma_aa[index]* \
               gcaa*t61741*t61742*t61747*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t61741*t61742*t61747)/(gamma_aa[index]* \
               gcaa*t61746*3.0+t61741*t61742*t61748*3.0+gamma_aa[index]*gcaa*t61741*t61742*t61747+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t61084 = 1.0/pow(rho_b[index],1.0/3.0);
            double t61085 = c*t61084;
            double t61086 = sqrt(t61085);
            double t61087 = pow(t61085,3.0/2.0);
            double t61088 = c*c;
            double t61089 = 1.0/pow(rho_b[index],2.0/3.0);
            double t61090 = 1.0/c0p;
            double t61091 = b1p*t61086;
            double t61092 = b3p*t61087;
            double t61093 = b4p*t61088*t61089;
            double t61094 = b2p*c*t61084;
            double t61095 = t61091+t61092+t61093+t61094;
            double t61096 = 1.0/t61095;
            double t61097 = t61090*t61096*(1.0/2.0);
            double t61098 = t61097+1.0;
            double t61099 = log(t61098);
            double t61100 = a1p*c*t61084;
            double t61101 = t61100+1.0;
            double t61102 = gamma_bb[index]*gamma_bb[index];
            double t61103 = gcaa*gcaa;
            double t61104 = t61102*t61102;
            double t61105 = t61103*t61103;
            double t61106 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t61107 = 1.0/pow(rho_b[index],8.0/3.0);
            double t61108 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t61109 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t61110 = gx*gx;
            double t61111 = t61110*t61110;
            functional_[index] = c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t61110*t61102*t61109)/(gamma_bb[index]* \
               gx*t61107*2.0+t61110*t61102*t61109+1.0)+(cx1*gamma_bb[index]*gx*t61107)/(gamma_bb[index]*gx*t61107+ \
               1.0)+(cx4*t61111*t61104*t61106)/(gamma_bb[index]*gx*t61107*4.0+t61110*t61102*t61109*6.0+t61111*t61104* \
               t61106+gamma_bb[index]*gx*t61110*t61102*t61108*4.0+1.0)+(cx3*gamma_bb[index]*gx*t61110*t61102*t61108) \
               /(gamma_bb[index]*gx*t61107*3.0+t61110*t61102*t61109*3.0+gamma_bb[index]*gx*t61110*t61102*t61108+1.0) \
               )-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t61086+b3f*t61087+b2f*c*t61084+ \
               b4f*t61088*t61089))+1.0)*(a1f*c*t61084+1.0)*2.0-c0p*t61101*t61099*2.0))/(two_13*2.0-2.0)+c0p*t61101* \
               t61099*2.0)*(ccaa0+(ccaa2*t61102*t61103*t61109)/(gamma_bb[index]*gcaa*t61107*2.0+t61102*t61103*t61109+ \
               1.0)+(ccaa1*gamma_bb[index]*gcaa*t61107)/(gamma_bb[index]*gcaa*t61107+1.0)+(ccaa4*t61104*t61105*t61106) \
               /(gamma_bb[index]*gcaa*t61107*4.0+t61102*t61103*t61109*6.0+t61104*t61105*t61106+gamma_bb[index]*gcaa* \
               t61102*t61103*t61108*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t61102*t61103*t61108)/(gamma_bb[index]*gcaa* \
               t61107*3.0+t61102*t61103*t61109*3.0+gamma_bb[index]*gcaa*t61102*t61103*t61108+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t57700 = 1.0/pow(rho_a[index],1.0/3.0);
            double t57701 = c*t57700;
            double t57702 = sqrt(t57701);
            double t57703 = pow(t57701,3.0/2.0);
            double t57704 = c*c;
            double t57705 = 1.0/pow(rho_a[index],2.0/3.0);
            double t57706 = 1.0/c0p;
            double t57707 = b1p*t57702;
            double t57708 = b3p*t57703;
            double t57709 = b4p*t57704*t57705;
            double t57710 = b2p*c*t57700;
            double t57711 = t57710+t57707+t57708+t57709;
            double t57712 = 1.0/t57711;
            double t57713 = t57712*t57706*(1.0/2.0);
            double t57714 = t57713+1.0;
            double t57715 = log(t57714);
            double t57716 = a1p*c*t57700;
            double t57717 = t57716+1.0;
            double t57718 = gamma_aa[index]*gamma_aa[index];
            double t57719 = gcaa*gcaa;
            double t57720 = t57718*t57718;
            double t57721 = t57719*t57719;
            double t57722 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t57723 = 1.0/pow(rho_a[index],8.0/3.0);
            double t57724 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t57725 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t57726 = pow(2.0,1.0/3.0);
            double t57727 = t57726*2.0;
            double t57728 = t57727-2.0;
            double t57729 = two_13*2.0;
            double t57730 = t57729-2.0;
            double t57731 = 1.0/t57730;
            double t57732 = 1.0/c0f;
            double t57733 = b1f*t57702;
            double t57734 = b3f*t57703;
            double t57735 = b4f*t57704*t57705;
            double t57736 = b2f*c*t57700;
            double t57737 = t57733+t57734+t57735+t57736;
            double t57738 = 1.0/t57737;
            double t57739 = t57732*t57738*(1.0/2.0);
            double t57740 = t57739+1.0;
            double t57741 = log(t57740);
            double t57742 = a1f*c*t57700;
            double t57743 = t57742+1.0;
            double t57744 = c0f*t57741*t57743*2.0;
            double t57745 = c0p*t57715*t57717*2.0;
            double t57746 = 1.0/pow(rho_b[index],1.0/3.0);
            double t57747 = c*t57746;
            double t57748 = sqrt(t57747);
            double t57749 = pow(t57747,3.0/2.0);
            double t57750 = 1.0/pow(rho_b[index],2.0/3.0);
            double t57751 = b1p*t57748;
            double t57752 = b3p*t57749;
            double t57753 = b4p*t57704*t57750;
            double t57754 = b2p*c*t57746;
            double t57755 = t57751+t57752+t57753+t57754;
            double t57756 = 1.0/t57755;
            double t57757 = t57706*t57756*(1.0/2.0);
            double t57758 = t57757+1.0;
            double t57759 = log(t57758);
            double t57760 = a1p*c*t57746;
            double t57761 = t57760+1.0;
            double t57762 = c0p*t57761*t57759*2.0;
            double t57763 = rho_a[index]+rho_b[index];
            double t57764 = 1.0/pow(t57763,1.0/3.0);
            double t57765 = c*t57764;
            double t57766 = sqrt(t57765);
            double t57767 = pow(t57765,3.0/2.0);
            double t57768 = 1.0/pow(t57763,2.0/3.0);
            double t57769 = b1p*t57766;
            double t57770 = b3p*t57767;
            double t57771 = b4p*t57704*t57768;
            double t57772 = b2p*c*t57764;
            double t57773 = t57770+t57771+t57772+t57769;
            double t57774 = 1.0/t57773;
            double t57775 = t57706*t57774*(1.0/2.0);
            double t57776 = t57775+1.0;
            double t57777 = log(t57776);
            double t57778 = a1p*c*t57764;
            double t57779 = t57778+1.0;
            double t57780 = c0p*t57777*t57779*2.0;
            double t57781 = rho_a[index]-rho_b[index];
            double t57782 = t57781*t57781;
            double t57783 = 1.0/t57763;
            double t57784 = t57781*t57783;
            double t57785 = 1.0/(t57763*t57763*t57763*t57763);
            double t57786 = t57782*t57782;
            double t57787 = t57784+1.0;
            double t57788 = pow(t57787,4.0/3.0);
            double t57789 = -t57784+1.0;
            double t57790 = pow(t57789,4.0/3.0);
            double t57791 = t57790+t57788-2.0;
            double t57792 = gcab*gcab;
            double t57796 = gamma_aa[index]*t57723*(1.0/2.0);
            double t57797 = 1.0/pow(rho_b[index],8.0/3.0);
            double t57798 = gamma_bb[index]*t57797*(1.0/2.0);
            double t57793 = t57796+t57798;
            double t57794 = t57793*t57793;
            double t57795 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t57799 = t57792*t57792;
            double t57800 = t57794*t57794;
            double t57801 = t57792*t57794*6.0;
            double t57802 = gcab*t57792*t57793*t57794*4.0;
            double t57803 = t57800*t57799;
            double t57804 = gcab*t57793*4.0;
            double t57805 = t57801+t57802+t57803+t57804+1.0;
            double t57806 = gcab*t57793;
            double t57807 = t57806+1.0;
            double t57808 = t57792*t57794;
            double t57809 = gcab*t57793*2.0;
            double t57810 = t57808+t57809+1.0;
            double t57811 = t57792*t57794*3.0;
            double t57812 = gcab*t57792*t57793*t57794;
            double t57813 = gcab*t57793*3.0;
            double t57814 = t57811+t57812+t57813+1.0;
            double t57815 = 1.0/t57810;
            double t57816 = 1.0/t57814;
            double t57817 = 1.0/t57807;
            double t57818 = 1.0/t57805;
            double t57819 = 1.0/pow(t57763,4.0/3.0);
            double t57820 = b1f*t57766;
            double t57821 = b3f*t57767;
            double t57822 = b4f*t57704*t57768;
            double t57823 = b2f*c*t57764;
            double t57824 = t57820+t57821+t57822+t57823;
            double t57825 = 1.0/t57824;
            double t57826 = t57732*t57825*(1.0/2.0);
            double t57827 = t57826+1.0;
            double t57828 = log(t57827);
            double t57829 = a1f*c*t57764;
            double t57830 = t57829+1.0;
            double t57832 = c0f*t57830*t57828*2.0;
            double t57831 = -t57832+t57780;
            double t57833 = 1.0/(t57763*t57763);
            double t57861 = t57833*t57781;
            double t57834 = -t57861+t57783;
            double t57835 = t57832-t57780;
            double t57836 = 1.0/pow(t57763,5.0/3.0);
            double t57837 = 1.0/sqrt(t57765);
            double t57838 = 1.0/t57776;
            double t57839 = 1.0/(t57773*t57773);
            double t57840 = b4p*t57704*t57836*(2.0/3.0);
            double t57841 = b2p*c*t57819*(1.0/3.0);
            double t57842 = b1p*c*t57819*t57837*(1.0/6.0);
            double t57843 = b3p*c*t57819*t57766*(1.0/2.0);
            double t57844 = t57840+t57841+t57842+t57843;
            double t57845 = t57844*t57838*t57839*t57779;
            double t57846 = 1.0/d2fz0;
            double t57847 = 1.0/Aa;
            double t57848 = b1a*t57766;
            double t57849 = b3a*t57767;
            double t57850 = b4a*t57704*t57768;
            double t57851 = b2a*c*t57764;
            double t57852 = t57850+t57851+t57848+t57849;
            double t57853 = 1.0/t57852;
            double t57854 = t57853*t57847*(1.0/2.0);
            double t57855 = t57854+1.0;
            double t57856 = log(t57855);
            double t57857 = a1a*c*t57764;
            double t57858 = t57857+1.0;
            double t57859 = 1.0/(t57763*t57763*t57763*t57763*t57763);
            double t57860 = pow(t57787,1.0/3.0);
            double t57862 = t57860*t57834*(4.0/3.0);
            double t57863 = pow(t57789,1.0/3.0);
            double t57864 = t57862-t57834*t57863*(4.0/3.0);
            double t57865 = t57785*t57786;
            double t57866 = t57865-1.0;
            double t57867 = 1.0/pow(rho_a[index],4.0/3.0);
            double t57868 = 1.0/pow(rho_a[index],5.0/3.0);
            double t57869 = 1.0/sqrt(t57701);
            double t57870 = 1.0/t57714;
            double t57871 = 1.0/(t57711*t57711);
            double t57872 = b4p*t57704*t57868*(2.0/3.0);
            double t57873 = b2p*c*t57867*(1.0/3.0);
            double t57874 = b1p*c*t57867*t57869*(1.0/6.0);
            double t57875 = b3p*c*t57702*t57867*(1.0/2.0);
            double t57876 = t57872+t57873+t57874+t57875;
            double t57877 = t57717*t57870*t57871*t57876;
            double t57878 = t57744-t57745;
            double t57879 = t57731*t57728*t57878;
            double t57880 = Aa*t57731*t57791*t57846*t57856*t57866*t57858*2.0;
            double t57881 = t57745+t57879;
            double t57882 = gamma_aa[index]*gcaa*t57723*4.0;
            double t57883 = gamma_aa[index]*gcaa*t57724*t57718*t57719*4.0;
            double t57884 = t57725*t57718*t57719*6.0;
            double t57885 = t57720*t57721*t57722;
            double t57886 = t57882+t57883+t57884+t57885+1.0;
            double t57887 = 1.0/t57886;
            double t57888 = gamma_aa[index]*gcaa*t57723;
            double t57889 = t57888+1.0;
            double t57890 = 1.0/t57889;
            double t57891 = gamma_aa[index]*gcaa*t57723*3.0;
            double t57892 = gamma_aa[index]*gcaa*t57724*t57718*t57719;
            double t57893 = t57725*t57718*t57719*3.0;
            double t57894 = t57891+t57892+t57893+1.0;
            double t57895 = 1.0/t57894;
            double t57896 = gamma_aa[index]*gcaa*t57723*2.0;
            double t57897 = t57725*t57718*t57719;
            double t57898 = t57896+t57897+1.0;
            double t57899 = 1.0/t57898;
            double t57900 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t57901 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t57902 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t57903 = gx*gx;
            double t57904 = t57903*t57903;
            double t57905 = gamma_aa[index]*gx*t57723*4.0;
            double t57906 = gamma_aa[index]*gx*t57903*t57724*t57718*4.0;
            double t57907 = t57903*t57725*t57718*6.0;
            double t57908 = t57720*t57722*t57904;
            double t57909 = t57905+t57906+t57907+t57908+1.0;
            double t57910 = 1.0/t57909;
            double t57911 = gamma_aa[index]*gx*t57723;
            double t57912 = t57911+1.0;
            double t57913 = 1.0/t57912;
            double t57914 = gamma_aa[index]*gx*t57723*3.0;
            double t57915 = gamma_aa[index]*gx*t57903*t57724*t57718;
            double t57916 = t57903*t57725*t57718*3.0;
            double t57917 = t57914+t57915+t57916+1.0;
            double t57918 = 1.0/t57917;
            double t57919 = gamma_aa[index]*gx*t57723*2.0;
            double t57920 = t57903*t57725*t57718;
            double t57921 = t57920+t57919+1.0;
            double t57922 = 1.0/t57921;
            double t57923 = 1.0/t57740;
            double t57924 = 1.0/(t57737*t57737);
            double t57925 = b4f*t57704*t57868*(2.0/3.0);
            double t57926 = b2f*c*t57867*(1.0/3.0);
            double t57927 = b1f*c*t57867*t57869*(1.0/6.0);
            double t57928 = b3f*c*t57702*t57867*(1.0/2.0);
            double t57929 = t57925+t57926+t57927+t57928;
            double t57930 = a1f*c*c0f*t57741*t57867*(2.0/3.0);
            double t57931 = a1p*c*c0p*t57715*t57867*(2.0/3.0);
            double t57932 = ccaa4*t57720*t57721*t57722*t57887;
            double t57933 = ccaa1*gamma_aa[index]*gcaa*t57723*t57890;
            double t57934 = ccaa3*gamma_aa[index]*gcaa*t57724*t57718*t57719*t57895;
            double t57935 = ccaa2*t57725*t57718*t57719*t57899;
            double t57936 = ccaa0+t57932+t57933+t57934+t57935;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t57817*t57793+ccab2*t57815*t57792*t57794+ccab4*t57800*t57818* \
               t57799+ccab3*gcab*t57816*t57792*t57793*t57794)*(t57780-t57745+t57880-t57879+rho_a[index]*(t57931-t57877+ \
               t57731*t57728*(t57930+t57877-t57743*t57923*t57924*t57929-a1p*c*c0p*t57715*t57867*(2.0/3.0)))-t57763* \
               (-t57845+t57731*t57791*t57785*t57786*(t57845-(t57830*1.0/(t57824*t57824)*(b2f*c*t57819*(1.0/3.0)+b4f* \
               t57704*t57836*(2.0/3.0)+b1f*c*t57819*t57837*(1.0/6.0)+b3f*c*t57819*t57766*(1.0/2.0)))/t57827+a1f*c* \
               c0f*t57819*t57828*(2.0/3.0)-a1p*c*c0p*t57819*t57777*(2.0/3.0))+a1p*c*c0p*t57819*t57777*(2.0/3.0)-t57731* \
               t57835*t57864*t57785*t57786+t57731*t57835*t57791*t57786*t57859*4.0+t57731*t57831*t57781*t57782*t57791* \
               t57785*4.0+Aa*t57731*t57791*t57846*t57856*t57858*(t57786*t57859*4.0-t57781*t57782*t57785*4.0)*2.0- \
               Aa*t57731*t57846*t57864*t57856*t57866*t57858*2.0-(t57731*1.0/(t57852*t57852)*t57791*t57846*t57866* \
               t57858*(b2a*c*t57819*(1.0/3.0)+b4a*t57704*t57836*(2.0/3.0)+b1a*c*t57819*t57837*(1.0/6.0)+b3a*c*t57819* \
               t57766*(1.0/2.0)))/t57855+Aa*a1a*c*t57731*t57791*t57819*t57846*t57856*t57866*(2.0/3.0))+t57731*t57835* \
               t57791*t57785*t57786)-t57936*(t57745+t57731*t57728*(t57744-c0p*t57715*t57717*2.0))-(rho_a[index]*t57881+ \
               rho_b[index]*(t57762-t57731*t57728*(t57762-c0f*log((t57732*(1.0/2.0))/(b1f*t57748+b3f*t57749+b2f*c* \
               t57746+b4f*t57704*t57750)+1.0)*(a1f*c*t57746+1.0)*2.0))-t57763*(t57780+t57880-t57731*t57831*t57791* \
               t57785*t57786))*(ccab1*gamma_aa[index]*gcab*t57817*t57795*(4.0/3.0)-ccab2*1.0/(t57810*t57810)*t57792* \
               t57794*(gamma_aa[index]*gcab*t57795*(8.0/3.0)+gamma_aa[index]*t57792*t57793*t57795*(8.0/3.0))-ccab4* \
               t57800*1.0/(t57805*t57805)*t57799*(gamma_aa[index]*gcab*t57795*(1.6E1/3.0)+gamma_aa[index]*t57792* \
               t57793*t57795*1.6E1+gamma_aa[index]*gcab*t57792*t57794*t57795*1.6E1+gamma_aa[index]*t57793*t57794* \
               t57795*t57799*(1.6E1/3.0))-ccab1*gamma_aa[index]*1.0/(t57807*t57807)*t57792*t57793*t57795*(4.0/3.0) \
               +ccab2*gamma_aa[index]*t57815*t57792*t57793*t57795*(8.0/3.0)-ccab3*gcab*1.0/(t57814*t57814)*t57792* \
               t57793*t57794*(gamma_aa[index]*gcab*t57795*4.0+gamma_aa[index]*t57792*t57793*t57795*8.0+gamma_aa[index]* \
               gcab*t57792*t57794*t57795*4.0)+ccab3*gamma_aa[index]*gcab*t57816*t57792*t57794*t57795*4.0+ccab4*gamma_aa[index]* \
               t57818*t57793*t57794*t57795*t57799*(1.6E1/3.0))+rho_a[index]*t57881*(ccaa1*gamma_aa[index]*gcaa*t57890* \
               t57795*(8.0/3.0)+ccaa4*t57720*t57721*t57902*t57887*(3.2E1/3.0)+ccaa2*t57900*t57718*t57719*t57899*(1.6E1/ \
               3.0)-ccaa1*t57900*t57718*t57719*1.0/(t57889*t57889)*(8.0/3.0)-ccaa2*t57725*t57718*t57719*1.0/(t57898* \
               t57898)*(gamma_aa[index]*gcaa*t57795*(1.6E1/3.0)+t57900*t57718*t57719*(1.6E1/3.0))-ccaa4*t57720*t57721* \
               t57722*1.0/(t57886*t57886)*(gamma_aa[index]*gcaa*t57795*(3.2E1/3.0)+t57720*t57721*t57902*(3.2E1/3.0) \
               +t57900*t57718*t57719*3.2E1+gamma_aa[index]*gcaa*t57901*t57718*t57719*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t57901*t57718*t57719*t57895*8.0-ccaa3*gamma_aa[index]*gcaa*t57724*t57718*t57719*1.0/(t57894*t57894) \
               *(gamma_aa[index]*gcaa*t57795*8.0+t57900*t57718*t57719*1.6E1+gamma_aa[index]*gcaa*t57901*t57718*t57719* \
               8.0))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t57723*t57913+cx2*t57903*t57922*t57725* \
               t57718+cx4*t57720*t57910*t57722*t57904+cx3*gamma_aa[index]*gx*t57903*t57724*t57718*t57918)*(4.0/3.0) \
               +rho_a[index]*t57936*(t57931-t57877+t57731*t57728*(t57930-t57931+t57877-t57743*t57923*t57924*t57929) \
               )-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t57913*t57795*(8.0/3.0)+cx2*t57900*t57903*t57922* \
               t57718*(1.6E1/3.0)+cx4*t57720*t57910*t57902*t57904*(3.2E1/3.0)-cx1*t57900*t57903*1.0/(t57912*t57912) \
               *t57718*(8.0/3.0)-cx2*t57903*1.0/(t57921*t57921)*t57725*t57718*(gamma_aa[index]*gx*t57795*(1.6E1/3.0) \
               +t57900*t57903*t57718*(1.6E1/3.0))-cx4*t57720*t57722*t57904*1.0/(t57909*t57909)*(gamma_aa[index]*gx* \
               t57795*(3.2E1/3.0)+t57720*t57902*t57904*(3.2E1/3.0)+t57900*t57903*t57718*3.2E1+gamma_aa[index]*gx* \
               t57901*t57903*t57718*3.2E1)+cx3*gamma_aa[index]*gx*t57901*t57903*t57718*t57918*8.0-cx3*gamma_aa[index]* \
               gx*t57903*t57724*t57718*1.0/(t57917*t57917)*(gamma_aa[index]*gx*t57795*8.0+t57900*t57903*t57718*1.6E1+ \
               gamma_aa[index]*gx*t57901*t57903*t57718*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t61752 = 1.0/pow(rho_a[index],1.0/3.0);
            double t61753 = c*t61752;
            double t61754 = sqrt(t61753);
            double t61755 = pow(t61753,3.0/2.0);
            double t61756 = c*c;
            double t61757 = 1.0/pow(rho_a[index],2.0/3.0);
            double t61758 = 1.0/c0p;
            double t61759 = b1p*t61754;
            double t61760 = b3p*t61755;
            double t61761 = b4p*t61756*t61757;
            double t61762 = b2p*c*t61752;
            double t61763 = t61760+t61761+t61762+t61759;
            double t61764 = 1.0/t61763;
            double t61765 = t61764*t61758*(1.0/2.0);
            double t61766 = t61765+1.0;
            double t61767 = log(t61766);
            double t61768 = a1p*c*t61752;
            double t61769 = t61768+1.0;
            double t61770 = gamma_aa[index]*gamma_aa[index];
            double t61771 = gcaa*gcaa;
            double t61772 = t61770*t61770;
            double t61773 = t61771*t61771;
            double t61774 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t61775 = 1.0/pow(rho_a[index],8.0/3.0);
            double t61776 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t61777 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t61778 = pow(2.0,1.0/3.0);
            double t61779 = t61778*2.0;
            double t61780 = t61779-2.0;
            double t61781 = two_13*2.0;
            double t61782 = t61781-2.0;
            double t61783 = 1.0/t61782;
            double t61784 = 1.0/c0f;
            double t61785 = b1f*t61754;
            double t61786 = b3f*t61755;
            double t61787 = b4f*t61756*t61757;
            double t61788 = b2f*c*t61752;
            double t61789 = t61785+t61786+t61787+t61788;
            double t61790 = 1.0/t61789;
            double t61791 = t61790*t61784*(1.0/2.0);
            double t61792 = t61791+1.0;
            double t61793 = log(t61792);
            double t61794 = a1f*c*t61752;
            double t61795 = t61794+1.0;
            double t61796 = c0f*t61793*t61795*2.0;
            double t61797 = c0p*t61767*t61769*2.0;
            double t61798 = gamma_aa[index]*gcaa*t61775*4.0;
            double t61799 = gamma_aa[index]*gcaa*t61770*t61771*t61776*4.0;
            double t61800 = t61770*t61771*t61777*6.0;
            double t61801 = t61772*t61773*t61774;
            double t61802 = t61800+t61801+t61798+t61799+1.0;
            double t61803 = 1.0/t61802;
            double t61804 = gamma_aa[index]*gcaa*t61775;
            double t61805 = t61804+1.0;
            double t61806 = 1.0/t61805;
            double t61807 = gamma_aa[index]*gcaa*t61775*3.0;
            double t61808 = gamma_aa[index]*gcaa*t61770*t61771*t61776;
            double t61809 = t61770*t61771*t61777*3.0;
            double t61810 = t61807+t61808+t61809+1.0;
            double t61811 = 1.0/t61810;
            double t61812 = gamma_aa[index]*gcaa*t61775*2.0;
            double t61813 = t61770*t61771*t61777;
            double t61814 = t61812+t61813+1.0;
            double t61815 = 1.0/t61814;
            double t61816 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t61817 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t61818 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t61819 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t61820 = gx*gx;
            double t61821 = t61820*t61820;
            double t61822 = gamma_aa[index]*gx*t61775*4.0;
            double t61823 = gamma_aa[index]*gx*t61820*t61770*t61776*4.0;
            double t61824 = t61820*t61770*t61777*6.0;
            double t61825 = t61821*t61772*t61774;
            double t61826 = t61822+t61823+t61824+t61825+1.0;
            double t61827 = 1.0/t61826;
            double t61828 = gamma_aa[index]*gx*t61775;
            double t61829 = t61828+1.0;
            double t61830 = 1.0/t61829;
            double t61831 = gamma_aa[index]*gx*t61775*3.0;
            double t61832 = gamma_aa[index]*gx*t61820*t61770*t61776;
            double t61833 = t61820*t61770*t61777*3.0;
            double t61834 = t61831+t61832+t61833+1.0;
            double t61835 = 1.0/t61834;
            double t61836 = gamma_aa[index]*gx*t61775*2.0;
            double t61837 = t61820*t61770*t61777;
            double t61838 = t61836+t61837+1.0;
            double t61839 = 1.0/t61838;
            double t61840 = 1.0/pow(rho_a[index],4.0/3.0);
            double t61841 = 1.0/pow(rho_a[index],5.0/3.0);
            double t61842 = 1.0/sqrt(t61753);
            double t61843 = 1.0/t61766;
            double t61844 = 1.0/(t61763*t61763);
            double t61845 = b4p*t61841*t61756*(2.0/3.0);
            double t61846 = b2p*c*t61840*(1.0/3.0);
            double t61847 = b1p*c*t61840*t61842*(1.0/6.0);
            double t61848 = b3p*c*t61840*t61754*(1.0/2.0);
            double t61849 = t61845+t61846+t61847+t61848;
            double t61850 = t61843*t61844*t61849*t61769;
            double t61851 = ccaa4*t61803*t61772*t61773*t61774;
            double t61852 = ccaa1*gamma_aa[index]*gcaa*t61806*t61775;
            double t61853 = ccaa3*gamma_aa[index]*gcaa*t61811*t61770*t61771*t61776;
            double t61854 = ccaa2*t61770*t61815*t61771*t61777;
            double t61855 = ccaa0+t61851+t61852+t61853+t61854;
            v_rho_a_[index] = -t61855*(t61797+t61780*t61783*(t61796-c0p*t61767*t61769*2.0))+rho_a[index]*t61855* \
               (-t61850+t61780*t61783*(t61850-(t61795*1.0/(t61789*t61789)*(b2f*c*t61840*(1.0/3.0)+b4f*t61841*t61756* \
               (2.0/3.0)+b1f*c*t61840*t61842*(1.0/6.0)+b3f*c*t61840*t61754*(1.0/2.0)))/t61792+a1f*c*c0f*t61840*t61793* \
               (2.0/3.0)-a1p*c*c0p*t61840*t61767*(2.0/3.0))+a1p*c*c0p*t61840*t61767*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t61830*t61775+cx2*t61820*t61770*t61839*t61777+cx4*t61821*t61772*t61827* \
               t61774+cx3*gamma_aa[index]*gx*t61820*t61770*t61835*t61776)*(4.0/3.0)+rho_a[index]*(t61797+t61780*t61783* \
               (t61796-t61797))*(ccaa1*gamma_aa[index]*gcaa*t61806*t61817*(8.0/3.0)+ccaa2*t61770*t61815*t61771*t61816* \
               (1.6E1/3.0)+ccaa4*t61803*t61772*t61773*t61819*(3.2E1/3.0)-ccaa1*1.0/(t61805*t61805)*t61770*t61771* \
               t61816*(8.0/3.0)-ccaa2*1.0/(t61814*t61814)*t61770*t61771*t61777*(gamma_aa[index]*gcaa*t61817*(1.6E1/ \
               3.0)+t61770*t61771*t61816*(1.6E1/3.0))-ccaa4*1.0/(t61802*t61802)*t61772*t61773*t61774*(gamma_aa[index]* \
               gcaa*t61817*(3.2E1/3.0)+t61770*t61771*t61816*3.2E1+t61772*t61773*t61819*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t61770*t61771*t61818*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t61811*t61770*t61771*t61818*8.0-ccaa3* \
               gamma_aa[index]*gcaa*1.0/(t61810*t61810)*t61770*t61771*t61776*(gamma_aa[index]*gcaa*t61817*8.0+t61770* \
               t61771*t61816*1.6E1+gamma_aa[index]*gcaa*t61770*t61771*t61818*8.0))-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t61830*t61817*(8.0/3.0)+cx2*t61820*t61770*t61816*t61839*(1.6E1/3.0)+cx4*t61821* \
               t61772*t61827*t61819*(3.2E1/3.0)-cx1*t61820*t61770*t61816*1.0/(t61829*t61829)*(8.0/3.0)-cx2*t61820* \
               t61770*1.0/(t61838*t61838)*t61777*(gamma_aa[index]*gx*t61817*(1.6E1/3.0)+t61820*t61770*t61816*(1.6E1/ \
               3.0))-cx4*t61821*t61772*1.0/(t61826*t61826)*t61774*(gamma_aa[index]*gx*t61817*(3.2E1/3.0)+t61820*t61770* \
               t61816*3.2E1+t61821*t61772*t61819*(3.2E1/3.0)+gamma_aa[index]*gx*t61820*t61770*t61818*3.2E1)+cx3*gamma_aa[index]* \
               gx*t61820*t61770*t61835*t61818*8.0-cx3*gamma_aa[index]*gx*t61820*t61770*1.0/(t61834*t61834)*t61776* \
               (gamma_aa[index]*gx*t61817*8.0+t61820*t61770*t61816*1.6E1+gamma_aa[index]*gx*t61820*t61770*t61818* \
               8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t57938 = 1.0/pow(rho_b[index],1.0/3.0);
            double t57939 = c*t57938;
            double t57940 = sqrt(t57939);
            double t57941 = pow(t57939,3.0/2.0);
            double t57942 = c*c;
            double t57943 = 1.0/pow(rho_b[index],2.0/3.0);
            double t57944 = 1.0/c0p;
            double t57945 = b1p*t57940;
            double t57946 = b3p*t57941;
            double t57947 = b4p*t57942*t57943;
            double t57948 = b2p*c*t57938;
            double t57949 = t57945+t57946+t57947+t57948;
            double t57950 = 1.0/t57949;
            double t57951 = t57950*t57944*(1.0/2.0);
            double t57952 = t57951+1.0;
            double t57953 = log(t57952);
            double t57954 = a1p*c*t57938;
            double t57955 = t57954+1.0;
            double t57956 = gamma_bb[index]*gamma_bb[index];
            double t57957 = gcaa*gcaa;
            double t57958 = t57956*t57956;
            double t57959 = t57957*t57957;
            double t57960 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t57961 = 1.0/pow(rho_b[index],8.0/3.0);
            double t57962 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t57963 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t57964 = pow(2.0,1.0/3.0);
            double t57965 = t57964*2.0;
            double t57966 = t57965-2.0;
            double t57967 = two_13*2.0;
            double t57968 = t57967-2.0;
            double t57969 = 1.0/t57968;
            double t57970 = 1.0/c0f;
            double t57971 = 1.0/pow(rho_a[index],1.0/3.0);
            double t57972 = c*t57971;
            double t57973 = sqrt(t57972);
            double t57974 = pow(t57972,3.0/2.0);
            double t57975 = 1.0/pow(rho_a[index],2.0/3.0);
            double t57976 = b1p*t57973;
            double t57977 = b3p*t57974;
            double t57978 = b4p*t57942*t57975;
            double t57979 = b2p*c*t57971;
            double t57980 = t57976+t57977+t57978+t57979;
            double t57981 = 1.0/t57980;
            double t57982 = t57944*t57981*(1.0/2.0);
            double t57983 = t57982+1.0;
            double t57984 = log(t57983);
            double t57985 = a1p*c*t57971;
            double t57986 = t57985+1.0;
            double t57987 = c0p*t57984*t57986*2.0;
            double t57988 = b1f*t57940;
            double t57989 = b3f*t57941;
            double t57990 = b4f*t57942*t57943;
            double t57991 = b2f*c*t57938;
            double t57992 = t57990+t57991+t57988+t57989;
            double t57993 = 1.0/t57992;
            double t57994 = t57970*t57993*(1.0/2.0);
            double t57995 = t57994+1.0;
            double t57996 = log(t57995);
            double t57997 = a1f*c*t57938;
            double t57998 = t57997+1.0;
            double t57999 = c0f*t57996*t57998*2.0;
            double t58000 = c0p*t57953*t57955*2.0;
            double t58001 = rho_a[index]+rho_b[index];
            double t58002 = 1.0/pow(t58001,1.0/3.0);
            double t58003 = c*t58002;
            double t58004 = sqrt(t58003);
            double t58005 = pow(t58003,3.0/2.0);
            double t58006 = 1.0/pow(t58001,2.0/3.0);
            double t58007 = b1p*t58004;
            double t58008 = b3p*t58005;
            double t58009 = b4p*t57942*t58006;
            double t58010 = b2p*c*t58002;
            double t58011 = t58010+t58007+t58008+t58009;
            double t58012 = 1.0/t58011;
            double t58013 = t57944*t58012*(1.0/2.0);
            double t58014 = t58013+1.0;
            double t58015 = log(t58014);
            double t58016 = a1p*c*t58002;
            double t58017 = t58016+1.0;
            double t58018 = c0p*t58015*t58017*2.0;
            double t58019 = rho_a[index]-rho_b[index];
            double t58020 = t58019*t58019;
            double t58021 = 1.0/t58001;
            double t58022 = t58021*t58019;
            double t58023 = 1.0/(t58001*t58001*t58001*t58001);
            double t58024 = t58020*t58020;
            double t58025 = t58022+1.0;
            double t58026 = pow(t58025,4.0/3.0);
            double t58027 = -t58022+1.0;
            double t58028 = pow(t58027,4.0/3.0);
            double t58029 = t58026+t58028-2.0;
            double t58030 = gcab*gcab;
            double t58034 = 1.0/pow(rho_a[index],8.0/3.0);
            double t58035 = gamma_aa[index]*t58034*(1.0/2.0);
            double t58036 = gamma_bb[index]*t57961*(1.0/2.0);
            double t58031 = t58035+t58036;
            double t58032 = t58031*t58031;
            double t58033 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t58037 = t58030*t58030;
            double t58038 = t58032*t58032;
            double t58039 = t58030*t58032*6.0;
            double t58040 = gcab*t58030*t58031*t58032*4.0;
            double t58041 = t58037*t58038;
            double t58042 = gcab*t58031*4.0;
            double t58043 = t58040+t58041+t58042+t58039+1.0;
            double t58044 = gcab*t58031;
            double t58045 = t58044+1.0;
            double t58046 = t58030*t58032;
            double t58047 = gcab*t58031*2.0;
            double t58048 = t58046+t58047+1.0;
            double t58049 = t58030*t58032*3.0;
            double t58050 = gcab*t58030*t58031*t58032;
            double t58051 = gcab*t58031*3.0;
            double t58052 = t58050+t58051+t58049+1.0;
            double t58053 = 1.0/t58048;
            double t58054 = 1.0/t58052;
            double t58055 = 1.0/t58045;
            double t58056 = 1.0/t58043;
            double t58057 = 1.0/pow(t58001,4.0/3.0);
            double t58058 = b1f*t58004;
            double t58059 = b3f*t58005;
            double t58060 = b4f*t57942*t58006;
            double t58061 = b2f*c*t58002;
            double t58062 = t58060+t58061+t58058+t58059;
            double t58063 = 1.0/t58062;
            double t58064 = t57970*t58063*(1.0/2.0);
            double t58065 = t58064+1.0;
            double t58066 = log(t58065);
            double t58067 = a1f*c*t58002;
            double t58068 = t58067+1.0;
            double t58070 = c0f*t58066*t58068*2.0;
            double t58069 = -t58070+t58018;
            double t58071 = 1.0/(t58001*t58001);
            double t58072 = t58071*t58019;
            double t58073 = t58021+t58072;
            double t58074 = t58070-t58018;
            double t58075 = 1.0/pow(t58001,5.0/3.0);
            double t58076 = 1.0/sqrt(t58003);
            double t58077 = 1.0/t58014;
            double t58078 = 1.0/(t58011*t58011);
            double t58079 = b4p*t57942*t58075*(2.0/3.0);
            double t58080 = b2p*c*t58057*(1.0/3.0);
            double t58081 = b1p*c*t58057*t58076*(1.0/6.0);
            double t58082 = b3p*c*t58004*t58057*(1.0/2.0);
            double t58083 = t58080+t58081+t58082+t58079;
            double t58084 = 1.0/d2fz0;
            double t58085 = 1.0/Aa;
            double t58086 = b1a*t58004;
            double t58087 = b3a*t58005;
            double t58088 = b4a*t57942*t58006;
            double t58089 = b2a*c*t58002;
            double t58090 = t58086+t58087+t58088+t58089;
            double t58091 = 1.0/t58090;
            double t58092 = t58091*t58085*(1.0/2.0);
            double t58093 = t58092+1.0;
            double t58094 = log(t58093);
            double t58095 = a1a*c*t58002;
            double t58096 = t58095+1.0;
            double t58097 = 1.0/(t58001*t58001*t58001*t58001*t58001);
            double t58098 = pow(t58025,1.0/3.0);
            double t58099 = t58073*t58098*(4.0/3.0);
            double t58100 = pow(t58027,1.0/3.0);
            double t58101 = t58099-t58100*t58073*(4.0/3.0);
            double t58102 = t58023*t58024;
            double t58103 = t58102-1.0;
            double t58104 = 1.0/pow(rho_b[index],4.0/3.0);
            double t58105 = 1.0/pow(rho_b[index],5.0/3.0);
            double t58106 = 1.0/sqrt(t57939);
            double t58107 = 1.0/t57952;
            double t58108 = 1.0/(t57949*t57949);
            double t58109 = b4p*t57942*t58105*(2.0/3.0);
            double t58110 = b2p*c*t58104*(1.0/3.0);
            double t58111 = b1p*c*t58104*t58106*(1.0/6.0);
            double t58112 = b3p*c*t57940*t58104*(1.0/2.0);
            double t58113 = t58110+t58111+t58112+t58109;
            double t58114 = t57955*t58113*t58107*t58108;
            double t58115 = t57999-t58000;
            double t58116 = t57966*t57969*t58115;
            double t58117 = Aa*t57969*t58103*t58029*t58084*t58094*t58096*2.0;
            double t58118 = a1p*c*c0p*t58015*t58057*(2.0/3.0);
            double t58119 = t58000+t58116;
            double t58120 = gamma_bb[index]*gcaa*t57961*4.0;
            double t58121 = gamma_bb[index]*gcaa*t57962*t57956*t57957*4.0;
            double t58122 = t57963*t57956*t57957*6.0;
            double t58123 = t57960*t57958*t57959;
            double t58124 = t58120+t58121+t58122+t58123+1.0;
            double t58125 = 1.0/t58124;
            double t58126 = gamma_bb[index]*gcaa*t57961;
            double t58127 = t58126+1.0;
            double t58128 = 1.0/t58127;
            double t58129 = gamma_bb[index]*gcaa*t57961*3.0;
            double t58130 = gamma_bb[index]*gcaa*t57962*t57956*t57957;
            double t58131 = t57963*t57956*t57957*3.0;
            double t58132 = t58130+t58131+t58129+1.0;
            double t58133 = 1.0/t58132;
            double t58134 = gamma_bb[index]*gcaa*t57961*2.0;
            double t58135 = t57963*t57956*t57957;
            double t58136 = t58134+t58135+1.0;
            double t58137 = 1.0/t58136;
            double t58138 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t58139 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t58140 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t58141 = gx*gx;
            double t58142 = t58141*t58141;
            double t58143 = gamma_bb[index]*gx*t57961*4.0;
            double t58144 = gamma_bb[index]*gx*t57962*t57956*t58141*4.0;
            double t58145 = t57963*t57956*t58141*6.0;
            double t58146 = t57960*t57958*t58142;
            double t58147 = t58143+t58144+t58145+t58146+1.0;
            double t58148 = 1.0/t58147;
            double t58149 = gamma_bb[index]*gx*t57961;
            double t58150 = t58149+1.0;
            double t58151 = 1.0/t58150;
            double t58152 = gamma_bb[index]*gx*t57961*3.0;
            double t58153 = gamma_bb[index]*gx*t57962*t57956*t58141;
            double t58154 = t57963*t57956*t58141*3.0;
            double t58155 = t58152+t58153+t58154+1.0;
            double t58156 = 1.0/t58155;
            double t58157 = gamma_bb[index]*gx*t57961*2.0;
            double t58158 = t57963*t57956*t58141;
            double t58159 = t58157+t58158+1.0;
            double t58160 = 1.0/t58159;
            double t58161 = 1.0/t57995;
            double t58162 = 1.0/(t57992*t57992);
            double t58163 = b4f*t57942*t58105*(2.0/3.0);
            double t58164 = b2f*c*t58104*(1.0/3.0);
            double t58165 = b1f*c*t58104*t58106*(1.0/6.0);
            double t58166 = b3f*c*t57940*t58104*(1.0/2.0);
            double t58167 = t58163+t58164+t58165+t58166;
            double t58168 = a1f*c*c0f*t57996*t58104*(2.0/3.0);
            double t58169 = a1p*c*c0p*t57953*t58104*(2.0/3.0);
            double t58170 = ccaa4*t57960*t57958*t57959*t58125;
            double t58171 = ccaa1*gamma_bb[index]*gcaa*t57961*t58128;
            double t58172 = ccaa3*gamma_bb[index]*gcaa*t57962*t57956*t57957*t58133;
            double t58173 = ccaa2*t57963*t57956*t57957*t58137;
            double t58174 = ccaa0+t58170+t58171+t58172+t58173;
            v_rho_b_[index] = -t58174*(t58000+t57966*t57969*(t57999-c0p*t57953*t57955*2.0))-(ccab0+ccab1*gcab* \
               t58031*t58055+ccab2*t58030*t58032*t58053+ccab4*t58037*t58038*t58056+ccab3*gcab*t58030*t58031*t58032* \
               t58054)*(-t58000-t58116+t58018+t58117+rho_b[index]*(-t58114+t58169+t57966*t57969*(t58114+t58168-t57998* \
               t58161*t58162*t58167-a1p*c*c0p*t57953*t58104*(2.0/3.0)))-t58001*(t58118-t58017*t58083*t58077*t58078+ \
               t57969*t58101*t58023*t58024*t58074+t57969*t58024*t58029*t58074*t58097*4.0-t57969*t58023*t58024*t58029* \
               (t58118-t58017*t58083*t58077*t58078+(1.0/(t58062*t58062)*t58068*(b2f*c*t58057*(1.0/3.0)+b4f*t57942* \
               t58075*(2.0/3.0)+b1f*c*t58057*t58076*(1.0/6.0)+b3f*c*t58004*t58057*(1.0/2.0)))/t58065-a1f*c*c0f*t58057* \
               t58066*(2.0/3.0))-t57969*t58020*t58023*t58019*t58029*t58069*4.0+Aa*t57969*t58029*t58084*t58094*t58096* \
               (t58024*t58097*4.0+t58020*t58023*t58019*4.0)*2.0+Aa*t57969*t58101*t58103*t58084*t58094*t58096*2.0- \
               (t57969*t58103*1.0/(t58090*t58090)*t58029*t58084*t58096*(b2a*c*t58057*(1.0/3.0)+b4a*t57942*t58075* \
               (2.0/3.0)+b1a*c*t58057*t58076*(1.0/6.0)+b3a*c*t58004*t58057*(1.0/2.0)))/t58093+Aa*a1a*c*t57969*t58103* \
               t58029*t58057*t58084*t58094*(2.0/3.0))+t57969*t58023*t58024*t58029*t58074)-(rho_b[index]*t58119+rho_a[index]* \
               (t57987-t57966*t57969*(t57987-c0f*log((t57970*(1.0/2.0))/(b1f*t57973+b3f*t57974+b2f*c*t57971+b4f*t57942* \
               t57975)+1.0)*(a1f*c*t57971+1.0)*2.0))-t58001*(t58018+t58117-t57969*t58023*t58024*t58029*t58069))*(ccab1* \
               gamma_bb[index]*gcab*t58033*t58055*(4.0/3.0)-ccab2*t58030*t58032*1.0/(t58048*t58048)*(gamma_bb[index]* \
               gcab*t58033*(8.0/3.0)+gamma_bb[index]*t58030*t58031*t58033*(8.0/3.0))-ccab4*1.0/(t58043*t58043)*t58037* \
               t58038*(gamma_bb[index]*gcab*t58033*(1.6E1/3.0)+gamma_bb[index]*t58030*t58031*t58033*1.6E1+gamma_bb[index]* \
               gcab*t58030*t58032*t58033*1.6E1+gamma_bb[index]*t58031*t58032*t58033*t58037*(1.6E1/3.0))-ccab1*gamma_bb[index]* \
               t58030*t58031*t58033*1.0/(t58045*t58045)*(4.0/3.0)+ccab2*gamma_bb[index]*t58030*t58031*t58033*t58053* \
               (8.0/3.0)-ccab3*gcab*t58030*t58031*t58032*1.0/(t58052*t58052)*(gamma_bb[index]*gcab*t58033*4.0+gamma_bb[index]* \
               t58030*t58031*t58033*8.0+gamma_bb[index]*gcab*t58030*t58032*t58033*4.0)+ccab3*gamma_bb[index]*gcab* \
               t58030*t58032*t58033*t58054*4.0+ccab4*gamma_bb[index]*t58031*t58032*t58033*t58037*t58056*(1.6E1/3.0) \
               )+rho_b[index]*t58119*(ccaa1*gamma_bb[index]*gcaa*t58033*t58128*(8.0/3.0)+ccaa4*t57958*t57959*t58140* \
               t58125*(3.2E1/3.0)+ccaa2*t57956*t57957*t58137*t58138*(1.6E1/3.0)-ccaa1*t57956*t57957*1.0/(t58127*t58127) \
               *t58138*(8.0/3.0)-ccaa2*t57963*t57956*t57957*1.0/(t58136*t58136)*(gamma_bb[index]*gcaa*t58033*(1.6E1/ \
               3.0)+t57956*t57957*t58138*(1.6E1/3.0))-ccaa4*t57960*t57958*t57959*1.0/(t58124*t58124)*(gamma_bb[index]* \
               gcaa*t58033*(3.2E1/3.0)+t57958*t57959*t58140*(3.2E1/3.0)+t57956*t57957*t58138*3.2E1+gamma_bb[index]* \
               gcaa*t57956*t57957*t58139*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t57956*t57957*t58133*t58139*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t57962*t57956*t57957*1.0/(t58132*t58132)*(gamma_bb[index]*gcaa*t58033*8.0+t57956* \
               t57957*t58138*1.6E1+gamma_bb[index]*gcaa*t57956*t57957*t58139*8.0))+c0*pow(rho_b[index],1.0/3.0)*(cx0+ \
               cx1*gamma_bb[index]*gx*t57961*t58151+cx2*t57963*t57956*t58141*t58160+cx4*t57960*t57958*t58142*t58148+ \
               cx3*gamma_bb[index]*gx*t57962*t57956*t58141*t58156)*(4.0/3.0)+rho_b[index]*t58174*(-t58114+t58169+ \
               t57966*t57969*(t58114+t58168-t58169-t57998*t58161*t58162*t58167))-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
               gamma_bb[index]*gx*t58033*t58151*(8.0/3.0)+cx2*t57956*t58141*t58160*t58138*(1.6E1/3.0)+cx4*t57958* \
               t58140*t58142*t58148*(3.2E1/3.0)-cx1*t57956*t58141*1.0/(t58150*t58150)*t58138*(8.0/3.0)-cx2*t57963* \
               t57956*t58141*1.0/(t58159*t58159)*(gamma_bb[index]*gx*t58033*(1.6E1/3.0)+t57956*t58141*t58138*(1.6E1/ \
               3.0))-cx4*t57960*t57958*t58142*1.0/(t58147*t58147)*(gamma_bb[index]*gx*t58033*(3.2E1/3.0)+t57958*t58140* \
               t58142*(3.2E1/3.0)+t57956*t58141*t58138*3.2E1+gamma_bb[index]*gx*t57956*t58141*t58139*3.2E1)+cx3*gamma_bb[index]* \
               gx*t57956*t58141*t58156*t58139*8.0-cx3*gamma_bb[index]*gx*t57962*t57956*t58141*1.0/(t58155*t58155) \
               *(gamma_bb[index]*gx*t58033*8.0+t57956*t58141*t58138*1.6E1+gamma_bb[index]*gx*t57956*t58141*t58139* \
               8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t61114 = 1.0/pow(rho_b[index],1.0/3.0);
            double t61115 = c*t61114;
            double t61116 = sqrt(t61115);
            double t61117 = pow(t61115,3.0/2.0);
            double t61118 = c*c;
            double t61119 = 1.0/pow(rho_b[index],2.0/3.0);
            double t61120 = 1.0/c0p;
            double t61121 = b1p*t61116;
            double t61122 = b3p*t61117;
            double t61123 = b4p*t61118*t61119;
            double t61124 = b2p*c*t61114;
            double t61125 = t61121+t61122+t61123+t61124;
            double t61126 = 1.0/t61125;
            double t61127 = t61120*t61126*(1.0/2.0);
            double t61128 = t61127+1.0;
            double t61129 = log(t61128);
            double t61130 = a1p*c*t61114;
            double t61131 = t61130+1.0;
            double t61132 = gamma_bb[index]*gamma_bb[index];
            double t61133 = gcaa*gcaa;
            double t61134 = t61132*t61132;
            double t61135 = t61133*t61133;
            double t61136 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t61137 = 1.0/pow(rho_b[index],8.0/3.0);
            double t61138 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t61139 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t61140 = pow(2.0,1.0/3.0);
            double t61141 = t61140*2.0;
            double t61142 = t61141-2.0;
            double t61143 = two_13*2.0;
            double t61144 = t61143-2.0;
            double t61145 = 1.0/t61144;
            double t61146 = 1.0/c0f;
            double t61147 = b1f*t61116;
            double t61148 = b3f*t61117;
            double t61149 = b4f*t61118*t61119;
            double t61150 = b2f*c*t61114;
            double t61151 = t61150+t61147+t61148+t61149;
            double t61152 = 1.0/t61151;
            double t61153 = t61152*t61146*(1.0/2.0);
            double t61154 = t61153+1.0;
            double t61155 = log(t61154);
            double t61156 = a1f*c*t61114;
            double t61157 = t61156+1.0;
            double t61158 = c0f*t61155*t61157*2.0;
            double t61159 = c0p*t61131*t61129*2.0;
            double t61160 = gamma_bb[index]*gcaa*t61137*4.0;
            double t61161 = gamma_bb[index]*gcaa*t61132*t61133*t61138*4.0;
            double t61162 = t61132*t61133*t61139*6.0;
            double t61163 = t61134*t61135*t61136;
            double t61164 = t61160+t61161+t61162+t61163+1.0;
            double t61165 = 1.0/t61164;
            double t61166 = gamma_bb[index]*gcaa*t61137;
            double t61167 = t61166+1.0;
            double t61168 = 1.0/t61167;
            double t61169 = gamma_bb[index]*gcaa*t61137*3.0;
            double t61170 = gamma_bb[index]*gcaa*t61132*t61133*t61138;
            double t61171 = t61132*t61133*t61139*3.0;
            double t61172 = t61170+t61171+t61169+1.0;
            double t61173 = 1.0/t61172;
            double t61174 = gamma_bb[index]*gcaa*t61137*2.0;
            double t61175 = t61132*t61133*t61139;
            double t61176 = t61174+t61175+1.0;
            double t61177 = 1.0/t61176;
            double t61178 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t61179 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t61180 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t61181 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t61182 = gx*gx;
            double t61183 = t61182*t61182;
            double t61184 = gamma_bb[index]*gx*t61137*4.0;
            double t61185 = gamma_bb[index]*gx*t61132*t61182*t61138*4.0;
            double t61186 = t61132*t61182*t61139*6.0;
            double t61187 = t61134*t61136*t61183;
            double t61188 = t61184+t61185+t61186+t61187+1.0;
            double t61189 = 1.0/t61188;
            double t61190 = gamma_bb[index]*gx*t61137;
            double t61191 = t61190+1.0;
            double t61192 = 1.0/t61191;
            double t61193 = gamma_bb[index]*gx*t61137*3.0;
            double t61194 = gamma_bb[index]*gx*t61132*t61182*t61138;
            double t61195 = t61132*t61182*t61139*3.0;
            double t61196 = t61193+t61194+t61195+1.0;
            double t61197 = 1.0/t61196;
            double t61198 = gamma_bb[index]*gx*t61137*2.0;
            double t61199 = t61132*t61182*t61139;
            double t61200 = t61198+t61199+1.0;
            double t61201 = 1.0/t61200;
            double t61202 = 1.0/pow(rho_b[index],4.0/3.0);
            double t61203 = 1.0/pow(rho_b[index],5.0/3.0);
            double t61204 = 1.0/sqrt(t61115);
            double t61205 = 1.0/t61128;
            double t61206 = 1.0/(t61125*t61125);
            double t61207 = b4p*t61203*t61118*(2.0/3.0);
            double t61208 = b2p*c*t61202*(1.0/3.0);
            double t61209 = b1p*c*t61202*t61204*(1.0/6.0);
            double t61210 = b3p*c*t61202*t61116*(1.0/2.0);
            double t61211 = t61210+t61207+t61208+t61209;
            double t61212 = t61211*t61131*t61205*t61206;
            double t61213 = ccaa4*t61134*t61135*t61136*t61165;
            double t61214 = ccaa1*gamma_bb[index]*gcaa*t61137*t61168;
            double t61215 = ccaa3*gamma_bb[index]*gcaa*t61132*t61133*t61173*t61138;
            double t61216 = ccaa2*t61132*t61133*t61139*t61177;
            double t61217 = ccaa0+t61213+t61214+t61215+t61216;
            v_rho_b_[index] = -t61217*(t61159+t61142*t61145*(t61158-c0p*t61131*t61129*2.0))+rho_b[index]*t61217* \
               (-t61212+t61142*t61145*(t61212-(1.0/(t61151*t61151)*t61157*(b2f*c*t61202*(1.0/3.0)+b4f*t61203*t61118* \
               (2.0/3.0)+b1f*c*t61202*t61204*(1.0/6.0)+b3f*c*t61202*t61116*(1.0/2.0)))/t61154+a1f*c*c0f*t61202*t61155* \
               (2.0/3.0)-a1p*c*c0p*t61202*t61129*(2.0/3.0))+a1p*c*c0p*t61202*t61129*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t61137*t61192+cx2*t61201*t61132*t61182*t61139+cx4*t61134*t61136*t61183* \
               t61189+cx3*gamma_bb[index]*gx*t61132*t61182*t61138*t61197)*(4.0/3.0)+rho_b[index]*(t61159+t61142*t61145* \
               (t61158-t61159))*(ccaa1*gamma_bb[index]*gcaa*t61168*t61179*(8.0/3.0)+ccaa4*t61134*t61135*t61181*t61165* \
               (3.2E1/3.0)+ccaa2*t61132*t61133*t61177*t61178*(1.6E1/3.0)-ccaa1*t61132*t61133*1.0/(t61167*t61167)* \
               t61178*(8.0/3.0)-ccaa2*t61132*t61133*t61139*1.0/(t61176*t61176)*(gamma_bb[index]*gcaa*t61179*(1.6E1/ \
               3.0)+t61132*t61133*t61178*(1.6E1/3.0))-ccaa4*t61134*t61135*t61136*1.0/(t61164*t61164)*(gamma_bb[index]* \
               gcaa*t61179*(3.2E1/3.0)+t61134*t61135*t61181*(3.2E1/3.0)+t61132*t61133*t61178*3.2E1+gamma_bb[index]* \
               gcaa*t61132*t61133*t61180*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t61132*t61133*t61180*t61173*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t61132*t61133*1.0/(t61172*t61172)*t61138*(gamma_bb[index]*gcaa*t61179*8.0+t61132* \
               t61133*t61178*1.6E1+gamma_bb[index]*gcaa*t61132*t61133*t61180*8.0))-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
               gamma_bb[index]*gx*t61192*t61179*(8.0/3.0)+cx2*t61201*t61132*t61182*t61178*(1.6E1/3.0)+cx4*t61134* \
               t61181*t61183*t61189*(3.2E1/3.0)-cx1*t61132*t61182*1.0/(t61191*t61191)*t61178*(8.0/3.0)-cx2*1.0/(t61200* \
               t61200)*t61132*t61182*t61139*(gamma_bb[index]*gx*t61179*(1.6E1/3.0)+t61132*t61182*t61178*(1.6E1/3.0) \
               )-cx4*t61134*t61136*t61183*1.0/(t61188*t61188)*(gamma_bb[index]*gx*t61179*(3.2E1/3.0)+t61134*t61181* \
               t61183*(3.2E1/3.0)+t61132*t61182*t61178*3.2E1+gamma_bb[index]*gx*t61132*t61180*t61182*3.2E1)+cx3*gamma_bb[index]* \
               gx*t61132*t61180*t61182*t61197*8.0-cx3*gamma_bb[index]*gx*t61132*t61182*t61138*1.0/(t61196*t61196) \
               *(gamma_bb[index]*gx*t61179*8.0+t61132*t61182*t61178*1.6E1+gamma_bb[index]*gx*t61132*t61180*t61182* \
               8.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t58176 = 1.0/pow(rho_a[index],1.0/3.0);
                double t58177 = c*t58176;
                double t58178 = sqrt(t58177);
                double t58179 = pow(t58177,3.0/2.0);
                double t58180 = c*c;
                double t58181 = 1.0/pow(rho_a[index],2.0/3.0);
                double t58182 = 1.0/c0p;
                double t58183 = b1p*t58178;
                double t58184 = b3p*t58179;
                double t58185 = b4p*t58180*t58181;
                double t58186 = b2p*c*t58176;
                double t58187 = t58183+t58184+t58185+t58186;
                double t58188 = 1.0/t58187;
                double t58189 = t58182*t58188*(1.0/2.0);
                double t58190 = t58189+1.0;
                double t58191 = log(t58190);
                double t58192 = a1p*c*t58176;
                double t58193 = t58192+1.0;
                double t58194 = pow(2.0,1.0/3.0);
                double t58195 = t58194*2.0;
                double t58196 = t58195-2.0;
                double t58197 = two_13*2.0;
                double t58198 = t58197-2.0;
                double t58199 = 1.0/t58198;
                double t58200 = 1.0/c0f;
                double t58201 = 1.0/pow(rho_b[index],1.0/3.0);
                double t58202 = c*t58201;
                double t58203 = sqrt(t58202);
                double t58204 = pow(t58202,3.0/2.0);
                double t58205 = 1.0/pow(rho_b[index],2.0/3.0);
                double t58206 = b1p*t58203;
                double t58207 = b3p*t58204;
                double t58208 = b4p*t58205*t58180;
                double t58209 = b2p*c*t58201;
                double t58210 = t58206+t58207+t58208+t58209;
                double t58211 = 1.0/t58210;
                double t58212 = t58211*t58182*(1.0/2.0);
                double t58213 = t58212+1.0;
                double t58214 = log(t58213);
                double t58215 = a1p*c*t58201;
                double t58216 = t58215+1.0;
                double t58217 = c0p*t58214*t58216*2.0;
                double t58218 = rho_a[index]+rho_b[index];
                double t58219 = 1.0/pow(t58218,1.0/3.0);
                double t58220 = c*t58219;
                double t58221 = sqrt(t58220);
                double t58222 = pow(t58220,3.0/2.0);
                double t58223 = 1.0/pow(t58218,2.0/3.0);
                double t58224 = b1p*t58221;
                double t58225 = b3p*t58222;
                double t58226 = b4p*t58223*t58180;
                double t58227 = b2p*c*t58219;
                double t58228 = t58224+t58225+t58226+t58227;
                double t58229 = 1.0/t58228;
                double t58230 = t58182*t58229*(1.0/2.0);
                double t58231 = t58230+1.0;
                double t58232 = log(t58231);
                double t58233 = a1p*c*t58219;
                double t58234 = t58233+1.0;
                double t58235 = c0p*t58232*t58234*2.0;
                double t58236 = rho_a[index]-rho_b[index];
                double t58237 = t58236*t58236;
                double t58238 = 1.0/t58218;
                double t58239 = t58236*t58238;
                double t58240 = 1.0/(t58218*t58218*t58218*t58218);
                double t58241 = t58237*t58237;
                double t58242 = t58239+1.0;
                double t58243 = pow(t58242,4.0/3.0);
                double t58244 = -t58239+1.0;
                double t58245 = pow(t58244,4.0/3.0);
                double t58246 = t58243+t58245-2.0;
                double t58247 = 1.0/pow(rho_a[index],8.0/3.0);
                double t58248 = gamma_aa[index]*t58247*(1.0/2.0);
                double t58249 = 1.0/pow(rho_b[index],8.0/3.0);
                double t58250 = gamma_bb[index]*t58249*(1.0/2.0);
                double t58251 = t58250+t58248;
                double t58252 = gcab*t58251;
                double t58253 = t58252+1.0;
                double t58254 = gcab*gcab;
                double t58255 = t58251*t58251;
                double t58256 = t58254*t58254;
                double t58257 = t58255*t58255;
                double t58258 = t58254*t58255;
                double t58259 = gcab*t58251*2.0;
                double t58260 = t58258+t58259+1.0;
                double t58261 = t58254*t58255*3.0;
                double t58262 = gcab*t58251*t58254*t58255;
                double t58263 = gcab*t58251*3.0;
                double t58264 = t58261+t58262+t58263+1.0;
                double t58265 = t58254*t58255*6.0;
                double t58266 = gcab*t58251*t58254*t58255*4.0;
                double t58267 = t58256*t58257;
                double t58268 = gcab*t58251*4.0;
                double t58269 = t58265+t58266+t58267+t58268+1.0;
                double t58270 = c0p*t58191*t58193*2.0;
                double t58271 = gamma_aa[index]*gamma_aa[index];
                double t58272 = gx*gx;
                double t58273 = t58272*t58272;
                double t58274 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t58275 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t58276 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t58277 = gamma_aa[index]*gx*t58247;
                double t58278 = t58277+1.0;
                double t58279 = gamma_aa[index]*gx*t58247*3.0;
                double t58280 = gamma_aa[index]*gx*t58271*t58272*t58276;
                double t58281 = t58271*t58272*t58275*3.0;
                double t58282 = t58280+t58281+t58279+1.0;
                double t58283 = t58271*t58271;
                double t58284 = gamma_aa[index]*gx*t58247*4.0;
                double t58285 = gamma_aa[index]*gx*t58271*t58272*t58276*4.0;
                double t58286 = t58271*t58272*t58275*6.0;
                double t58287 = t58273*t58274*t58283;
                double t58288 = t58284+t58285+t58286+t58287+1.0;
                double t58289 = gamma_aa[index]*gx*t58247*2.0;
                double t58290 = t58271*t58272*t58275;
                double t58291 = t58290+t58289+1.0;
                double t58292 = b1f*t58178;
                double t58293 = b3f*t58179;
                double t58294 = b4f*t58180*t58181;
                double t58295 = b2f*c*t58176;
                double t58296 = t58292+t58293+t58294+t58295;
                double t58297 = 1.0/t58296;
                double t58298 = t58200*t58297*(1.0/2.0);
                double t58299 = t58298+1.0;
                double t58300 = log(t58299);
                double t58301 = a1f*c*t58176;
                double t58302 = t58301+1.0;
                double t58303 = t58270-c0f*t58300*t58302*2.0;
                double t58304 = t58270-t58303*t58196*t58199;
                double t58305 = gcaa*gcaa;
                double t58306 = t58305*t58305;
                double t58307 = gamma_aa[index]*gcaa*t58247;
                double t58308 = t58307+1.0;
                double t58309 = gamma_aa[index]*gcaa*t58247*3.0;
                double t58310 = gamma_aa[index]*gcaa*t58305*t58271*t58276;
                double t58311 = t58305*t58271*t58275*3.0;
                double t58312 = t58310+t58311+t58309+1.0;
                double t58313 = gamma_aa[index]*gcaa*t58247*4.0;
                double t58314 = gamma_aa[index]*gcaa*t58305*t58271*t58276*4.0;
                double t58315 = t58305*t58271*t58275*6.0;
                double t58316 = t58306*t58274*t58283;
                double t58317 = t58313+t58314+t58315+t58316+1.0;
                double t58318 = gamma_aa[index]*gcaa*t58247*2.0;
                double t58319 = t58305*t58271*t58275;
                double t58320 = t58318+t58319+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t58304+rho_b[index]*(t58217-t58196*t58199*(t58217-c0f*log((t58200* \
                   (1.0/2.0))/(b1f*t58203+b3f*t58204+b2f*c*t58201+b4f*t58205*t58180)+1.0)*(a1f*c*t58201+1.0)*2.0))-t58218* \
                   (t58235-t58240*t58241*t58246*t58199*(t58235-c0f*log((t58200*(1.0/2.0))/(b1f*t58221+b3f*t58222+b2f* \
                   c*t58219+b4f*t58223*t58180)+1.0)*(a1f*c*t58219+1.0)*2.0)+(Aa*t58246*t58199*log((1.0/2.0)/(Aa*(b1a* \
                   t58221+b3a*t58222+b2a*c*t58219+b4a*t58223*t58180))+1.0)*(t58240*t58241-1.0)*(a1a*c*t58219+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t58247*(1.0/2.0))/t58253-ccab4*t58256*t58257*1.0/(t58269*t58269)*(gcab*t58247* \
                   2.0+t58251*t58254*t58247*6.0+gcab*t58254*t58255*t58247*6.0+t58251*t58255*t58247*t58256*2.0)-ccab2* \
                   1.0/(t58260*t58260)*t58254*t58255*(gcab*t58247+t58251*t58254*t58247)+(ccab2*t58251*t58254*t58247)/ \
                   t58260-ccab1*t58251*1.0/(t58253*t58253)*t58254*t58247*(1.0/2.0)+(ccab3*gcab*t58254*t58255*t58247*(3.0/ \
                   2.0))/t58264+(ccab4*t58251*t58255*t58247*t58256*2.0)/t58269-ccab3*gcab*t58251*t58254*t58255*1.0/(t58264* \
                   t58264)*(gcab*t58247*(3.0/2.0)+t58251*t58254*t58247*3.0+gcab*t58254*t58255*t58247*(3.0/2.0)))-rho_a[index]* \
                   t58304*((ccaa1*gcaa*t58247)/t58308+(ccaa2*gamma_aa[index]*t58305*t58275*2.0)/t58320-ccaa1*gamma_aa[index]* \
                   t58305*1.0/(t58308*t58308)*t58275-ccaa2*1.0/(t58320*t58320)*t58305*t58271*t58275*(gcaa*t58247*2.0+ \
                   gamma_aa[index]*t58305*t58275*2.0)+(ccaa4*gamma_aa[index]*t58306*t58271*t58274*4.0)/t58317+(ccaa3* \
                   gcaa*t58305*t58271*t58276*3.0)/t58312-ccaa4*t58306*1.0/(t58317*t58317)*t58274*t58283*(gcaa*t58247* \
                   4.0+gamma_aa[index]*t58305*t58275*1.2E1+gamma_aa[index]*t58306*t58271*t58274*4.0+gcaa*t58305*t58271* \
                   t58276*1.2E1)-ccaa3*gamma_aa[index]*gcaa*1.0/(t58312*t58312)*t58305*t58271*t58276*(gcaa*t58247*3.0+ \
                   gamma_aa[index]*t58305*t58275*6.0+gcaa*t58305*t58271*t58276*3.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t58247)/t58278-cx1*gamma_aa[index]*t58272*t58275*1.0/(t58278*t58278)+(cx2*gamma_aa[index]*t58272* \
                   t58275*2.0)/t58291-cx2*t58271*t58272*1.0/(t58291*t58291)*t58275*(gx*t58247*2.0+gamma_aa[index]*t58272* \
                   t58275*2.0)+(cx4*gamma_aa[index]*t58271*t58273*t58274*4.0)/t58288+(cx3*gx*t58271*t58272*t58276*3.0) \
                   /t58282-cx4*t58273*t58274*t58283*1.0/(t58288*t58288)*(gx*t58247*4.0+gamma_aa[index]*t58272*t58275* \
                   1.2E1+gamma_aa[index]*t58271*t58273*t58274*4.0+gx*t58271*t58272*t58276*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t58271*t58272*1.0/(t58282*t58282)*t58276*(gx*t58247*3.0+gamma_aa[index]*t58272*t58275*6.0+gx*t58271* \
                   t58272*t58276*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t61858 = 1.0/pow(rho_a[index],8.0/3.0);
                double t61859 = gamma_aa[index]*gamma_aa[index];
                double t61860 = gx*gx;
                double t61861 = t61860*t61860;
                double t61862 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t61863 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t61864 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t61865 = gamma_aa[index]*gx*t61858;
                double t61866 = t61865+1.0;
                double t61867 = gamma_aa[index]*gx*t61858*3.0;
                double t61868 = gamma_aa[index]*gx*t61860*t61864*t61859;
                double t61869 = t61860*t61863*t61859*3.0;
                double t61870 = t61867+t61868+t61869+1.0;
                double t61871 = t61859*t61859;
                double t61872 = gamma_aa[index]*gx*t61858*4.0;
                double t61873 = gamma_aa[index]*gx*t61860*t61864*t61859*4.0;
                double t61874 = t61860*t61863*t61859*6.0;
                double t61875 = t61861*t61862*t61871;
                double t61876 = t61872+t61873+t61874+t61875+1.0;
                double t61877 = gamma_aa[index]*gx*t61858*2.0;
                double t61878 = t61860*t61863*t61859;
                double t61879 = t61877+t61878+1.0;
                double t61880 = 1.0/pow(rho_a[index],1.0/3.0);
                double t61881 = c*t61880;
                double t61882 = sqrt(t61881);
                double t61883 = pow(t61881,3.0/2.0);
                double t61884 = c*c;
                double t61885 = 1.0/pow(rho_a[index],2.0/3.0);
                double t61886 = 1.0/c0p;
                double t61887 = b1p*t61882;
                double t61888 = b3p*t61883;
                double t61889 = b4p*t61884*t61885;
                double t61890 = b2p*c*t61880;
                double t61891 = t61890+t61887+t61888+t61889;
                double t61892 = 1.0/t61891;
                double t61893 = t61892*t61886*(1.0/2.0);
                double t61894 = t61893+1.0;
                double t61895 = log(t61894);
                double t61896 = a1p*c*t61880;
                double t61897 = t61896+1.0;
                double t61898 = gcaa*gcaa;
                double t61899 = t61898*t61898;
                double t61900 = gamma_aa[index]*gcaa*t61858;
                double t61901 = t61900+1.0;
                double t61902 = gamma_aa[index]*gcaa*t61858*3.0;
                double t61903 = gamma_aa[index]*gcaa*t61864*t61859*t61898;
                double t61904 = t61863*t61859*t61898*3.0;
                double t61905 = t61902+t61903+t61904+1.0;
                double t61906 = gamma_aa[index]*gcaa*t61858*4.0;
                double t61907 = gamma_aa[index]*gcaa*t61864*t61859*t61898*4.0;
                double t61908 = t61863*t61859*t61898*6.0;
                double t61909 = t61862*t61871*t61899;
                double t61910 = t61906+t61907+t61908+t61909+1.0;
                double t61911 = gamma_aa[index]*gcaa*t61858*2.0;
                double t61912 = t61863*t61859*t61898;
                double t61913 = t61911+t61912+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t61882+ \
                   b3f*t61883+b2f*c*t61880+b4f*t61884*t61885))+1.0)*(a1f*c*t61880+1.0)*2.0-c0p*t61895*t61897*2.0))/(two_13* \
                   2.0-2.0)+c0p*t61895*t61897*2.0)*((ccaa1*gcaa*t61858)/t61901-ccaa1*gamma_aa[index]*1.0/(t61901*t61901) \
                   *t61863*t61898+(ccaa2*gamma_aa[index]*t61863*t61898*2.0)/t61913-ccaa2*1.0/(t61913*t61913)*t61863*t61859* \
                   t61898*(gcaa*t61858*2.0+gamma_aa[index]*t61863*t61898*2.0)+(ccaa4*gamma_aa[index]*t61862*t61859*t61899* \
                   4.0)/t61910+(ccaa3*gcaa*t61864*t61859*t61898*3.0)/t61905-ccaa4*1.0/(t61910*t61910)*t61862*t61871*t61899* \
                   (gcaa*t61858*4.0+gamma_aa[index]*t61863*t61898*1.2E1+gamma_aa[index]*t61862*t61859*t61899*4.0+gcaa* \
                   t61864*t61859*t61898*1.2E1)-ccaa3*gamma_aa[index]*gcaa*1.0/(t61905*t61905)*t61864*t61859*t61898*(gcaa* \
                   t61858*3.0+gamma_aa[index]*t61863*t61898*6.0+gcaa*t61864*t61859*t61898*3.0))+c0*pow(rho_a[index],4.0/ \
                   3.0)*((cx1*gx*t61858)/t61866-cx1*gamma_aa[index]*t61860*t61863*1.0/(t61866*t61866)+(cx2*gamma_aa[index]* \
                   t61860*t61863*2.0)/t61879-cx2*t61860*t61863*t61859*1.0/(t61879*t61879)*(gx*t61858*2.0+gamma_aa[index]* \
                   t61860*t61863*2.0)+(cx4*gamma_aa[index]*t61861*t61862*t61859*4.0)/t61876+(cx3*gx*t61860*t61864*t61859* \
                   3.0)/t61870-cx4*t61861*t61862*t61871*1.0/(t61876*t61876)*(gx*t61858*4.0+gamma_aa[index]*t61860*t61863* \
                   1.2E1+gamma_aa[index]*t61861*t61862*t61859*4.0+gx*t61860*t61864*t61859*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t61860*1.0/(t61870*t61870)*t61864*t61859*(gx*t61858*3.0+gamma_aa[index]*t61860*t61863*6.0+gx*t61860* \
                   t61864*t61859*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t58323 = 1.0/pow(rho_a[index],1.0/3.0);
                double t58324 = c*t58323;
                double t58325 = sqrt(t58324);
                double t58326 = pow(t58324,3.0/2.0);
                double t58327 = c*c;
                double t58328 = 1.0/pow(rho_a[index],2.0/3.0);
                double t58329 = 1.0/c0p;
                double t58330 = b1p*t58325;
                double t58331 = b3p*t58326;
                double t58332 = b4p*t58327*t58328;
                double t58333 = b2p*c*t58323;
                double t58334 = t58330+t58331+t58332+t58333;
                double t58335 = 1.0/t58334;
                double t58336 = t58335*t58329*(1.0/2.0);
                double t58337 = t58336+1.0;
                double t58338 = log(t58337);
                double t58339 = a1p*c*t58323;
                double t58340 = t58339+1.0;
                double t58341 = pow(2.0,1.0/3.0);
                double t58342 = t58341*2.0;
                double t58343 = t58342-2.0;
                double t58344 = two_13*2.0;
                double t58345 = t58344-2.0;
                double t58346 = 1.0/t58345;
                double t58347 = 1.0/c0f;
                double t58348 = 1.0/pow(rho_b[index],1.0/3.0);
                double t58349 = c*t58348;
                double t58350 = sqrt(t58349);
                double t58351 = pow(t58349,3.0/2.0);
                double t58352 = 1.0/pow(rho_b[index],2.0/3.0);
                double t58353 = b1p*t58350;
                double t58354 = b3p*t58351;
                double t58355 = b4p*t58352*t58327;
                double t58356 = b2p*c*t58348;
                double t58357 = t58353+t58354+t58355+t58356;
                double t58358 = 1.0/t58357;
                double t58359 = t58329*t58358*(1.0/2.0);
                double t58360 = t58359+1.0;
                double t58361 = log(t58360);
                double t58362 = a1p*c*t58348;
                double t58363 = t58362+1.0;
                double t58364 = c0p*t58361*t58363*2.0;
                double t58365 = rho_a[index]+rho_b[index];
                double t58366 = 1.0/pow(t58365,1.0/3.0);
                double t58367 = c*t58366;
                double t58368 = sqrt(t58367);
                double t58369 = pow(t58367,3.0/2.0);
                double t58370 = 1.0/pow(t58365,2.0/3.0);
                double t58371 = b1p*t58368;
                double t58372 = b3p*t58369;
                double t58373 = b4p*t58370*t58327;
                double t58374 = b2p*c*t58366;
                double t58375 = t58371+t58372+t58373+t58374;
                double t58376 = 1.0/t58375;
                double t58377 = t58329*t58376*(1.0/2.0);
                double t58378 = t58377+1.0;
                double t58379 = log(t58378);
                double t58380 = a1p*c*t58366;
                double t58381 = t58380+1.0;
                double t58382 = c0p*t58381*t58379*2.0;
                double t58383 = rho_a[index]-rho_b[index];
                double t58384 = t58383*t58383;
                double t58385 = 1.0/t58365;
                double t58386 = t58383*t58385;
                double t58387 = 1.0/(t58365*t58365*t58365*t58365);
                double t58388 = t58384*t58384;
                double t58389 = t58386+1.0;
                double t58390 = pow(t58389,4.0/3.0);
                double t58391 = -t58386+1.0;
                double t58392 = pow(t58391,4.0/3.0);
                double t58393 = t58390+t58392-2.0;
                double t58394 = 1.0/pow(rho_b[index],8.0/3.0);
                double t58395 = 1.0/pow(rho_a[index],8.0/3.0);
                double t58396 = gamma_aa[index]*t58395*(1.0/2.0);
                double t58397 = gamma_bb[index]*t58394*(1.0/2.0);
                double t58398 = t58396+t58397;
                double t58399 = gcab*t58398;
                double t58400 = t58399+1.0;
                double t58401 = gcab*gcab;
                double t58402 = t58398*t58398;
                double t58403 = t58401*t58401;
                double t58404 = t58402*t58402;
                double t58405 = t58401*t58402;
                double t58406 = gcab*t58398*2.0;
                double t58407 = t58405+t58406+1.0;
                double t58408 = t58401*t58402*3.0;
                double t58409 = gcab*t58401*t58402*t58398;
                double t58410 = gcab*t58398*3.0;
                double t58411 = t58410+t58408+t58409+1.0;
                double t58412 = t58401*t58402*6.0;
                double t58413 = gcab*t58401*t58402*t58398*4.0;
                double t58414 = t58403*t58404;
                double t58415 = gcab*t58398*4.0;
                double t58416 = t58412+t58413+t58414+t58415+1.0;
                double t58417 = c0p*t58340*t58338*2.0;
                double t58418 = gamma_bb[index]*gamma_bb[index];
                double t58419 = gx*gx;
                double t58420 = t58419*t58419;
                double t58421 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t58422 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t58423 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t58424 = gamma_bb[index]*gx*t58394;
                double t58425 = t58424+1.0;
                double t58426 = gamma_bb[index]*gx*t58394*3.0;
                double t58427 = gamma_bb[index]*gx*t58423*t58418*t58419;
                double t58428 = t58422*t58418*t58419*3.0;
                double t58429 = t58426+t58427+t58428+1.0;
                double t58430 = t58418*t58418;
                double t58431 = gamma_bb[index]*gx*t58394*4.0;
                double t58432 = gamma_bb[index]*gx*t58423*t58418*t58419*4.0;
                double t58433 = t58422*t58418*t58419*6.0;
                double t58434 = t58420*t58421*t58430;
                double t58435 = t58431+t58432+t58433+t58434+1.0;
                double t58436 = gamma_bb[index]*gx*t58394*2.0;
                double t58437 = t58422*t58418*t58419;
                double t58438 = t58436+t58437+1.0;
                double t58439 = b1f*t58350;
                double t58440 = b3f*t58351;
                double t58441 = b4f*t58352*t58327;
                double t58442 = b2f*c*t58348;
                double t58443 = t58440+t58441+t58442+t58439;
                double t58444 = 1.0/t58443;
                double t58445 = t58444*t58347*(1.0/2.0);
                double t58446 = t58445+1.0;
                double t58447 = log(t58446);
                double t58448 = a1f*c*t58348;
                double t58449 = t58448+1.0;
                double t58450 = t58364-c0f*t58447*t58449*2.0;
                double t58451 = t58364-t58450*t58343*t58346;
                double t58452 = gcaa*gcaa;
                double t58453 = t58452*t58452;
                double t58454 = gamma_bb[index]*gcaa*t58394;
                double t58455 = t58454+1.0;
                double t58456 = gamma_bb[index]*gcaa*t58394*3.0;
                double t58457 = gamma_bb[index]*gcaa*t58423*t58452*t58418;
                double t58458 = t58422*t58452*t58418*3.0;
                double t58459 = t58456+t58457+t58458+1.0;
                double t58460 = gamma_bb[index]*gcaa*t58394*4.0;
                double t58461 = gamma_bb[index]*gcaa*t58423*t58452*t58418*4.0;
                double t58462 = t58422*t58452*t58418*6.0;
                double t58463 = t58421*t58430*t58453;
                double t58464 = t58460+t58461+t58462+t58463+1.0;
                double t58465 = gamma_bb[index]*gcaa*t58394*2.0;
                double t58466 = t58422*t58452*t58418;
                double t58467 = t58465+t58466+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t58451+rho_a[index]*(t58417-t58343*t58346*(t58417-c0f*log((t58347* \
                   (1.0/2.0))/(b1f*t58325+b3f*t58326+b2f*c*t58323+b4f*t58327*t58328)+1.0)*(a1f*c*t58323+1.0)*2.0))-t58365* \
                   (t58382-t58346*t58393*t58387*t58388*(t58382-c0f*log((t58347*(1.0/2.0))/(b1f*t58368+b3f*t58369+b2f* \
                   c*t58366+b4f*t58370*t58327)+1.0)*(a1f*c*t58366+1.0)*2.0)+(Aa*t58346*t58393*log((1.0/2.0)/(Aa*(b1a* \
                   t58368+b3a*t58369+b2a*c*t58366+b4a*t58370*t58327))+1.0)*(t58387*t58388-1.0)*(a1a*c*t58366+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t58394*(1.0/2.0))/t58400-ccab4*t58403*t58404*1.0/(t58416*t58416)*(gcab*t58394* \
                   2.0+t58401*t58394*t58398*6.0+gcab*t58401*t58402*t58394*6.0+t58402*t58403*t58394*t58398*2.0)-ccab2* \
                   t58401*t58402*1.0/(t58407*t58407)*(gcab*t58394+t58401*t58394*t58398)-ccab1*1.0/(t58400*t58400)*t58401* \
                   t58394*t58398*(1.0/2.0)+(ccab2*t58401*t58394*t58398)/t58407+(ccab3*gcab*t58401*t58402*t58394*(3.0/ \
                   2.0))/t58411+(ccab4*t58402*t58403*t58394*t58398*2.0)/t58416-ccab3*gcab*t58401*t58402*1.0/(t58411*t58411) \
                   *t58398*(gcab*t58394*(3.0/2.0)+t58401*t58394*t58398*3.0+gcab*t58401*t58402*t58394*(3.0/2.0)))-rho_b[index]* \
                   t58451*((ccaa1*gcaa*t58394)/t58455-ccaa1*gamma_bb[index]*t58422*t58452*1.0/(t58455*t58455)+(ccaa2* \
                   gamma_bb[index]*t58422*t58452*2.0)/t58467-ccaa2*t58422*t58452*t58418*1.0/(t58467*t58467)*(gcaa*t58394* \
                   2.0+gamma_bb[index]*t58422*t58452*2.0)+(ccaa4*gamma_bb[index]*t58421*t58453*t58418*4.0)/t58464+(ccaa3* \
                   gcaa*t58423*t58452*t58418*3.0)/t58459-ccaa4*t58421*t58430*t58453*1.0/(t58464*t58464)*(gcaa*t58394* \
                   4.0+gamma_bb[index]*t58422*t58452*1.2E1+gamma_bb[index]*t58421*t58453*t58418*4.0+gcaa*t58423*t58452* \
                   t58418*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t58423*t58452*t58418*1.0/(t58459*t58459)*(gcaa*t58394*3.0+ \
                   gamma_bb[index]*t58422*t58452*6.0+gcaa*t58423*t58452*t58418*3.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1* \
                   gx*t58394)/t58425-cx1*gamma_bb[index]*t58422*1.0/(t58425*t58425)*t58419+(cx2*gamma_bb[index]*t58422* \
                   t58419*2.0)/t58438-cx2*t58422*t58418*t58419*1.0/(t58438*t58438)*(gx*t58394*2.0+gamma_bb[index]*t58422* \
                   t58419*2.0)+(cx4*gamma_bb[index]*t58420*t58421*t58418*4.0)/t58435+(cx3*gx*t58423*t58418*t58419*3.0) \
                   /t58429-cx4*t58420*t58421*t58430*1.0/(t58435*t58435)*(gx*t58394*4.0+gamma_bb[index]*t58422*t58419* \
                   1.2E1+gamma_bb[index]*t58420*t58421*t58418*4.0+gx*t58423*t58418*t58419*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t58423*t58418*t58419*1.0/(t58429*t58429)*(gx*t58394*3.0+gamma_bb[index]*t58422*t58419*6.0+gx*t58423* \
                   t58418*t58419*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t61221 = 1.0/pow(rho_b[index],8.0/3.0);
                double t61222 = gamma_bb[index]*gamma_bb[index];
                double t61223 = gx*gx;
                double t61224 = t61223*t61223;
                double t61225 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t61226 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t61227 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t61228 = gamma_bb[index]*gx*t61221;
                double t61229 = t61228+1.0;
                double t61230 = gamma_bb[index]*gx*t61221*3.0;
                double t61231 = gamma_bb[index]*gx*t61222*t61223*t61227;
                double t61232 = t61222*t61223*t61226*3.0;
                double t61233 = t61230+t61231+t61232+1.0;
                double t61234 = t61222*t61222;
                double t61235 = gamma_bb[index]*gx*t61221*4.0;
                double t61236 = gamma_bb[index]*gx*t61222*t61223*t61227*4.0;
                double t61237 = t61222*t61223*t61226*6.0;
                double t61238 = t61224*t61225*t61234;
                double t61239 = t61235+t61236+t61237+t61238+1.0;
                double t61240 = gamma_bb[index]*gx*t61221*2.0;
                double t61241 = t61222*t61223*t61226;
                double t61242 = t61240+t61241+1.0;
                double t61243 = 1.0/pow(rho_b[index],1.0/3.0);
                double t61244 = c*t61243;
                double t61245 = sqrt(t61244);
                double t61246 = pow(t61244,3.0/2.0);
                double t61247 = c*c;
                double t61248 = 1.0/pow(rho_b[index],2.0/3.0);
                double t61249 = 1.0/c0p;
                double t61250 = b1p*t61245;
                double t61251 = b3p*t61246;
                double t61252 = b4p*t61247*t61248;
                double t61253 = b2p*c*t61243;
                double t61254 = t61250+t61251+t61252+t61253;
                double t61255 = 1.0/t61254;
                double t61256 = t61255*t61249*(1.0/2.0);
                double t61257 = t61256+1.0;
                double t61258 = log(t61257);
                double t61259 = a1p*c*t61243;
                double t61260 = t61259+1.0;
                double t61261 = gcaa*gcaa;
                double t61262 = t61261*t61261;
                double t61263 = gamma_bb[index]*gcaa*t61221;
                double t61264 = t61263+1.0;
                double t61265 = gamma_bb[index]*gcaa*t61221*3.0;
                double t61266 = gamma_bb[index]*gcaa*t61222*t61261*t61227;
                double t61267 = t61222*t61261*t61226*3.0;
                double t61268 = t61265+t61266+t61267+1.0;
                double t61269 = gamma_bb[index]*gcaa*t61221*4.0;
                double t61270 = gamma_bb[index]*gcaa*t61222*t61261*t61227*4.0;
                double t61271 = t61222*t61261*t61226*6.0;
                double t61272 = t61225*t61234*t61262;
                double t61273 = t61270+t61271+t61272+t61269+1.0;
                double t61274 = gamma_bb[index]*gcaa*t61221*2.0;
                double t61275 = t61222*t61261*t61226;
                double t61276 = t61274+t61275+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t61245+ \
                   b3f*t61246+b2f*c*t61243+b4f*t61247*t61248))+1.0)*(a1f*c*t61243+1.0)*2.0-c0p*t61260*t61258*2.0))/(two_13* \
                   2.0-2.0)+c0p*t61260*t61258*2.0)*((ccaa1*gcaa*t61221)/t61264-ccaa1*gamma_bb[index]*t61261*t61226*1.0/ \
                   (t61264*t61264)+(ccaa2*gamma_bb[index]*t61261*t61226*2.0)/t61276-ccaa2*t61222*t61261*t61226*1.0/(t61276* \
                   t61276)*(gcaa*t61221*2.0+gamma_bb[index]*t61261*t61226*2.0)+(ccaa4*gamma_bb[index]*t61222*t61225*t61262* \
                   4.0)/t61273+(ccaa3*gcaa*t61222*t61261*t61227*3.0)/t61268-ccaa4*t61225*t61234*t61262*1.0/(t61273*t61273) \
                   *(gcaa*t61221*4.0+gamma_bb[index]*t61261*t61226*1.2E1+gamma_bb[index]*t61222*t61225*t61262*4.0+gcaa* \
                   t61222*t61261*t61227*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t61222*t61261*t61227*1.0/(t61268*t61268)*(gcaa* \
                   t61221*3.0+gamma_bb[index]*t61261*t61226*6.0+gcaa*t61222*t61261*t61227*3.0))+c0*pow(rho_b[index],4.0/ \
                   3.0)*((cx1*gx*t61221)/t61229-cx1*gamma_bb[index]*t61223*t61226*1.0/(t61229*t61229)+(cx2*gamma_bb[index]* \
                   t61223*t61226*2.0)/t61242-cx2*t61222*t61223*1.0/(t61242*t61242)*t61226*(gx*t61221*2.0+gamma_bb[index]* \
                   t61223*t61226*2.0)+(cx4*gamma_bb[index]*t61222*t61224*t61225*4.0)/t61239+(cx3*gx*t61222*t61223*t61227* \
                   3.0)/t61233-cx4*t61224*t61225*t61234*1.0/(t61239*t61239)*(gx*t61221*4.0+gamma_bb[index]*t61223*t61226* \
                   1.2E1+gamma_bb[index]*t61222*t61224*t61225*4.0+gx*t61222*t61223*t61227*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t61222*t61223*1.0/(t61233*t61233)*t61227*(gx*t61221*3.0+gamma_bb[index]*t61223*t61226*6.0+gx*t61222* \
                   t61223*t61227*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t58471 = rho_a[index]+rho_b[index];
            double t58472 = 1.0/pow(t58471,1.0/3.0);
            double t58473 = c*t58472;
            double t58474 = sqrt(t58473);
            double t58475 = b1p*t58474;
            double t58476 = pow(t58473,3.0/2.0);
            double t58477 = b3p*t58476;
            double t58478 = c*c;
            double t58479 = 1.0/pow(t58471,2.0/3.0);
            double t58480 = b4p*t58478*t58479;
            double t58481 = b2p*c*t58472;
            double t58482 = t58480+t58481+t58475+t58477;
            double t58483 = 1.0/pow(t58471,4.0/3.0);
            double t58484 = 1.0/c0p;
            double t58485 = 1.0/t58482;
            double t58486 = t58484*t58485*(1.0/2.0);
            double t58487 = t58486+1.0;
            double t58488 = a1p*c*t58472;
            double t58489 = t58488+1.0;
            double t58490 = rho_a[index]-rho_b[index];
            double t58491 = t58490*t58490;
            double t58492 = 1.0/t58471;
            double t58493 = t58490*t58492;
            double t58494 = two_13*2.0;
            double t58495 = t58494-2.0;
            double t58496 = 1.0/t58495;
            double t58497 = 1.0/c0f;
            double t58498 = b1f*t58474;
            double t58499 = b3f*t58476;
            double t58500 = b4f*t58478*t58479;
            double t58501 = b2f*c*t58472;
            double t58502 = t58500+t58501+t58498+t58499;
            double t58503 = 1.0/t58502;
            double t58504 = t58503*t58497*(1.0/2.0);
            double t58505 = t58504+1.0;
            double t58506 = log(t58505);
            double t58507 = a1f*c*t58472;
            double t58508 = t58507+1.0;
            double t58509 = log(t58487);
            double t58519 = c0f*t58506*t58508*2.0;
            double t58520 = c0p*t58509*t58489*2.0;
            double t58510 = -t58520+t58519;
            double t58511 = t58493+1.0;
            double t58512 = pow(t58511,4.0/3.0);
            double t58513 = -t58493+1.0;
            double t58514 = pow(t58513,4.0/3.0);
            double t58515 = t58512+t58514-2.0;
            double t58516 = 1.0/(t58471*t58471);
            double t58547 = t58516*t58490;
            double t58517 = t58492-t58547;
            double t58518 = 1.0/(t58471*t58471*t58471*t58471);
            double t58521 = t58491*t58491;
            double t58522 = 1.0/pow(t58471,5.0/3.0);
            double t58523 = 1.0/sqrt(t58473);
            double t58524 = 1.0/t58487;
            double t58525 = 1.0/(t58482*t58482);
            double t58526 = b4p*t58522*t58478*(2.0/3.0);
            double t58527 = b2p*c*t58483*(1.0/3.0);
            double t58528 = b1p*c*t58523*t58483*(1.0/6.0);
            double t58529 = b3p*c*t58474*t58483*(1.0/2.0);
            double t58530 = t58526+t58527+t58528+t58529;
            double t58531 = t58530*t58524*t58525*t58489;
            double t58532 = 1.0/(t58471*t58471*t58471*t58471*t58471);
            double t58533 = 1.0/d2fz0;
            double t58534 = 1.0/Aa;
            double t58535 = b1a*t58474;
            double t58536 = b3a*t58476;
            double t58537 = b4a*t58478*t58479;
            double t58538 = b2a*c*t58472;
            double t58539 = t58535+t58536+t58537+t58538;
            double t58540 = 1.0/t58539;
            double t58541 = t58540*t58534*(1.0/2.0);
            double t58542 = t58541+1.0;
            double t58543 = log(t58542);
            double t58544 = a1a*c*t58472;
            double t58545 = t58544+1.0;
            double t58546 = pow(t58511,1.0/3.0);
            double t58548 = t58517*t58546*(4.0/3.0);
            double t58549 = pow(t58513,1.0/3.0);
            double t58624 = t58517*t58549*(4.0/3.0);
            double t58550 = -t58624+t58548;
            double t58551 = t58521*t58518;
            double t58552 = t58551-1.0;
            double t58553 = 1.0/pow(rho_a[index],1.0/3.0);
            double t58554 = c*t58553;
            double t58555 = sqrt(t58554);
            double t58556 = b1f*t58555;
            double t58557 = pow(t58554,3.0/2.0);
            double t58558 = b3f*t58557;
            double t58559 = 1.0/pow(rho_a[index],2.0/3.0);
            double t58560 = b4f*t58478*t58559;
            double t58561 = b2f*c*t58553;
            double t58562 = t58560+t58561+t58556+t58558;
            double t58563 = 1.0/pow(rho_a[index],4.0/3.0);
            double t58564 = b1p*t58555;
            double t58565 = b3p*t58557;
            double t58566 = b4p*t58478*t58559;
            double t58567 = b2p*c*t58553;
            double t58568 = t58564+t58565+t58566+t58567;
            double t58569 = 1.0/pow(rho_a[index],5.0/3.0);
            double t58570 = 1.0/sqrt(t58554);
            double t58571 = 1.0/t58562;
            double t58572 = t58571*t58497*(1.0/2.0);
            double t58573 = t58572+1.0;
            double t58574 = 1.0/t58568;
            double t58575 = t58484*t58574*(1.0/2.0);
            double t58576 = t58575+1.0;
            double t58577 = a1p*c*t58553;
            double t58578 = t58577+1.0;
            double t58579 = 1.0/t58576;
            double t58580 = 1.0/(t58568*t58568);
            double t58581 = b4p*t58478*t58569*(2.0/3.0);
            double t58582 = b2p*c*t58563*(1.0/3.0);
            double t58583 = b1p*c*t58570*t58563*(1.0/6.0);
            double t58584 = b3p*c*t58563*t58555*(1.0/2.0);
            double t58585 = t58581+t58582+t58583+t58584;
            double t58586 = t58580*t58585*t58578*t58579;
            double t58587 = log(t58576);
            double t58588 = pow(2.0,1.0/3.0);
            double t58589 = t58588*2.0;
            double t58590 = t58589-2.0;
            double t58591 = log(t58573);
            double t58592 = a1f*c*t58553;
            double t58593 = t58592+1.0;
            double t58594 = gcab*gcab;
            double t58598 = 1.0/pow(rho_a[index],8.0/3.0);
            double t58599 = gamma_aa[index]*t58598*(1.0/2.0);
            double t58600 = 1.0/pow(rho_b[index],8.0/3.0);
            double t58601 = gamma_bb[index]*t58600*(1.0/2.0);
            double t58595 = t58601+t58599;
            double t58596 = t58595*t58595;
            double t58597 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t58602 = t58594*t58594;
            double t58603 = t58596*t58596;
            double t58604 = t58594*t58596*6.0;
            double t58605 = gcab*t58594*t58595*t58596*4.0;
            double t58606 = t58602*t58603;
            double t58607 = gcab*t58595*4.0;
            double t58608 = t58604+t58605+t58606+t58607+1.0;
            double t58609 = gcab*t58595;
            double t58610 = t58609+1.0;
            double t58611 = t58594*t58596;
            double t58612 = gcab*t58595*2.0;
            double t58613 = t58611+t58612+1.0;
            double t58614 = t58594*t58596*3.0;
            double t58615 = gcab*t58594*t58595*t58596;
            double t58616 = gcab*t58595*3.0;
            double t58617 = t58614+t58615+t58616+1.0;
            double t58618 = 1.0/t58613;
            double t58619 = 1.0/t58617;
            double t58620 = 1.0/t58610;
            double t58621 = 1.0/t58608;
            double t58622 = 1.0/pow(t58471,7.0/3.0);
            double t58623 = 1.0/pow(t58471,8.0/3.0);
            double t58625 = 1.0/t58505;
            double t58626 = 1.0/(t58502*t58502);
            double t58627 = b4f*t58522*t58478*(2.0/3.0);
            double t58628 = b2f*c*t58483*(1.0/3.0);
            double t58629 = b1f*c*t58523*t58483*(1.0/6.0);
            double t58630 = b3f*c*t58474*t58483*(1.0/2.0);
            double t58631 = t58630+t58627+t58628+t58629;
            double t58632 = a1f*c*c0f*t58506*t58483*(2.0/3.0);
            double t58634 = t58631*t58508*t58625*t58626;
            double t58635 = a1p*c*c0p*t58509*t58483*(2.0/3.0);
            double t58633 = t58531+t58632-t58634-t58635;
            double t58636 = t58530*t58530;
            double t58637 = 1.0/pow(t58473,3.0/2.0);
            double t58638 = b4p*t58623*t58478*(1.0E1/9.0);
            double t58639 = b2p*c*t58622*(4.0/9.0);
            double t58640 = b1p*c*t58523*t58622*(2.0/9.0);
            double t58641 = b3p*c*t58622*t58474*(2.0/3.0);
            double t58642 = b3p*t58523*t58623*t58478*(1.0/1.2E1);
            double t58643 = t58640+t58641+t58642+t58638+t58639-b1p*t58623*t58637*t58478*(1.0/3.6E1);
            double t58644 = 1.0/(t58482*t58482*t58482);
            double t58645 = t58524*t58644*t58636*t58489*2.0;
            double t58646 = t58631*t58631;
            double t58647 = 1.0/(t58487*t58487);
            double t58648 = 1.0/(t58482*t58482*t58482*t58482);
            double t58649 = t58516*2.0;
            double t58650 = 1.0/(t58471*t58471*t58471);
            double t58657 = t58650*t58490*2.0;
            double t58651 = -t58657+t58649;
            double t58652 = t58517*t58517;
            double t58653 = a1p*c*c0p*t58622*t58509*(8.0/9.0);
            double t58654 = 1.0/(t58471*t58471*t58471*t58471*t58471*t58471);
            double t58655 = t58521*t58532*4.0;
            double t58665 = t58490*t58491*t58518*4.0;
            double t58656 = t58655-t58665;
            double t58658 = t58651*t58549*(4.0/3.0);
            double t58659 = 1.0/pow(t58511,2.0/3.0);
            double t58660 = t58652*t58659*(4.0/9.0);
            double t58661 = 1.0/pow(t58513,2.0/3.0);
            double t58662 = t58652*t58661*(4.0/9.0);
            double t58663 = t58660+t58662+t58658-t58651*t58546*(4.0/3.0);
            double t58664 = 1.0/t58542;
            double t58666 = 1.0/(t58539*t58539);
            double t58667 = b4a*t58522*t58478*(2.0/3.0);
            double t58668 = b2a*c*t58483*(1.0/3.0);
            double t58669 = b1a*c*t58523*t58483*(1.0/6.0);
            double t58670 = b3a*c*t58474*t58483*(1.0/2.0);
            double t58671 = t58670+t58667+t58668+t58669;
            double t58672 = t58671*t58671;
            double t58673 = t58524*t58525*t58643*t58489;
            double t58674 = 1.0/t58573;
            double t58675 = b4f*t58478*t58569*(2.0/3.0);
            double t58676 = b2f*c*t58563*(1.0/3.0);
            double t58677 = b1f*c*t58570*t58563*(1.0/6.0);
            double t58678 = b3f*c*t58563*t58555*(1.0/2.0);
            double t58679 = t58675+t58676+t58677+t58678;
            double t58680 = 1.0/(t58562*t58562);
            double t58681 = 1.0/pow(rho_a[index],7.0/3.0);
            double t58682 = 1.0/pow(t58554,3.0/2.0);
            double t58683 = t58679*t58679;
            double t58684 = t58585*t58585;
            double t58685 = 1.0/(t58568*t58568*t58568);
            double t58686 = t58684*t58685*t58578*t58579*2.0;
            double t58687 = b4p*t58478*t58598*(1.0E1/9.0);
            double t58688 = b2p*c*t58681*(4.0/9.0);
            double t58689 = b3p*t58570*t58478*t58598*(1.0/1.2E1);
            double t58690 = b1p*c*t58570*t58681*(2.0/9.0);
            double t58691 = b3p*c*t58555*t58681*(2.0/3.0);
            double t58843 = b1p*t58682*t58478*t58598*(1.0/3.6E1);
            double t58692 = t58690-t58843+t58691+t58687+t58688+t58689;
            double t58693 = 1.0/(t58576*t58576);
            double t58694 = 1.0/(t58568*t58568*t58568*t58568);
            double t58695 = a1p*c*c0p*t58681*t58587*(8.0/9.0);
            double t58696 = a1f*c*c0f*t58563*t58591*(2.0/3.0);
            double t58697 = a1p*c*c0p*t58563*t58587*(2.0/3.0);
            double t58698 = t58636*t58484*t58647*t58648*t58489*(1.0/2.0);
            double t58770 = t58680*t58593*t58674*t58679;
            double t58699 = -t58770+t58586+t58696-t58697;
            double t58700 = gamma_aa[index]*gamma_aa[index];
            double t58701 = gcaa*gcaa;
            double t58702 = t58700*t58700;
            double t58703 = t58701*t58701;
            double t58704 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t58705 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t58706 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t58707 = c0f*t58591*t58593*2.0;
            double t58709 = c0p*t58578*t58587*2.0;
            double t58708 = t58707-t58709;
            double t58710 = 1.0/pow(rho_b[index],1.0/3.0);
            double t58711 = c*t58710;
            double t58712 = sqrt(t58711);
            double t58713 = pow(t58711,3.0/2.0);
            double t58714 = 1.0/pow(rho_b[index],2.0/3.0);
            double t58715 = b1p*t58712;
            double t58716 = b3p*t58713;
            double t58717 = b4p*t58714*t58478;
            double t58718 = b2p*c*t58710;
            double t58719 = t58715+t58716+t58717+t58718;
            double t58720 = 1.0/t58719;
            double t58721 = t58720*t58484*(1.0/2.0);
            double t58722 = t58721+1.0;
            double t58723 = log(t58722);
            double t58724 = a1p*c*t58710;
            double t58725 = t58724+1.0;
            double t58726 = c0p*t58723*t58725*2.0;
            double t58727 = t58510*t58521*t58515*t58518*t58496;
            double t58728 = Aa*t58515*t58533*t58543*t58552*t58545*t58496*2.0;
            double t58729 = gamma_aa[index]*gcab*t58597*(1.6E1/3.0);
            double t58730 = gamma_aa[index]*gcab*t58594*t58596*t58597*1.6E1;
            double t58731 = gamma_aa[index]*t58602*t58595*t58596*t58597*(1.6E1/3.0);
            double t58732 = gamma_aa[index]*t58594*t58595*t58597*1.6E1;
            double t58733 = t58730+t58731+t58732+t58729;
            double t58734 = 1.0/(t58610*t58610);
            double t58735 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t58736 = gamma_aa[index]*gcab*t58597*(8.0/3.0);
            double t58737 = gamma_aa[index]*t58594*t58595*t58597*(8.0/3.0);
            double t58738 = t58736+t58737;
            double t58739 = 1.0/(t58617*t58617);
            double t58740 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t58741 = 1.0/(t58608*t58608);
            double t58742 = 1.0/(t58613*t58613);
            double t58743 = gamma_aa[index]*gcab*t58597*4.0;
            double t58744 = gamma_aa[index]*gcab*t58594*t58596*t58597*4.0;
            double t58745 = gamma_aa[index]*t58594*t58595*t58597*8.0;
            double t58746 = t58743+t58744+t58745;
            double t58747 = t58590*t58708*t58496;
            double t58748 = t58709+t58747;
            double t58749 = gamma_aa[index]*gcaa*t58598*4.0;
            double t58750 = gamma_aa[index]*gcaa*t58700*t58701*t58705*4.0;
            double t58751 = t58700*t58701*t58706*6.0;
            double t58752 = t58702*t58703*t58704;
            double t58753 = t58750+t58751+t58752+t58749+1.0;
            double t58754 = 1.0/t58753;
            double t58755 = gamma_aa[index]*gcaa*t58598;
            double t58756 = t58755+1.0;
            double t58757 = 1.0/t58756;
            double t58758 = gamma_aa[index]*gcaa*t58598*3.0;
            double t58759 = gamma_aa[index]*gcaa*t58700*t58701*t58705;
            double t58760 = t58700*t58701*t58706*3.0;
            double t58761 = t58760+t58758+t58759+1.0;
            double t58762 = 1.0/t58761;
            double t58763 = gamma_aa[index]*gcaa*t58598*2.0;
            double t58764 = t58700*t58701*t58706;
            double t58765 = t58763+t58764+1.0;
            double t58766 = 1.0/t58765;
            double t58767 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t58768 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t58769 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t58771 = ccaa4*t58702*t58703*t58754*t58769*(3.2E1/3.0);
            double t58772 = ccaa1*gamma_aa[index]*gcaa*t58757*t58597*(8.0/3.0);
            double t58773 = ccaa3*gamma_aa[index]*gcaa*t58700*t58701*t58762*t58768*8.0;
            double t58774 = ccaa2*t58700*t58701*t58766*t58767*(1.6E1/3.0);
            double t58775 = 1.0/(t58756*t58756);
            double t58776 = gamma_aa[index]*gcaa*t58597*8.0;
            double t58777 = gamma_aa[index]*gcaa*t58700*t58701*t58768*8.0;
            double t58778 = t58700*t58701*t58767*1.6E1;
            double t58779 = t58776+t58777+t58778;
            double t58780 = 1.0/(t58761*t58761);
            double t58781 = gamma_aa[index]*gcaa*t58597*(3.2E1/3.0);
            double t58782 = gamma_aa[index]*gcaa*t58700*t58701*t58768*3.2E1;
            double t58783 = t58700*t58701*t58767*3.2E1;
            double t58784 = t58702*t58703*t58769*(3.2E1/3.0);
            double t58785 = t58781+t58782+t58783+t58784;
            double t58786 = 1.0/(t58753*t58753);
            double t58787 = gamma_aa[index]*gcaa*t58597*(1.6E1/3.0);
            double t58788 = t58700*t58701*t58767*(1.6E1/3.0);
            double t58789 = t58787+t58788;
            double t58790 = 1.0/(t58765*t58765);
            double t58791 = t58771+t58772+t58773+t58774-ccaa1*t58700*t58701*t58775*t58767*(8.0/3.0)-ccaa2*t58700* \
               t58701*t58706*t58790*t58789-ccaa4*t58702*t58703*t58704*t58785*t58786-ccaa3*gamma_aa[index]*gcaa*t58700* \
               t58701*t58705*t58780*t58779;
            double t58792 = gx*gx;
            double t58793 = t58792*t58792;
            double t58794 = 1.0/pow(rho_a[index],1.0E1);
            double t58795 = gamma_aa[index]*gx*t58598;
            double t58796 = t58795+1.0;
            double t58816 = gamma_aa[index]*gx*t58597*(3.2E1/3.0);
            double t58817 = gamma_aa[index]*gx*t58700*t58792*t58768*3.2E1;
            double t58818 = t58700*t58792*t58767*3.2E1;
            double t58819 = t58702*t58793*t58769*(3.2E1/3.0);
            double t58797 = t58816+t58817+t58818+t58819;
            double t58798 = gamma_aa[index]*gx*t58598*4.0;
            double t58799 = gamma_aa[index]*gx*t58700*t58705*t58792*4.0;
            double t58800 = t58700*t58706*t58792*6.0;
            double t58801 = t58702*t58704*t58793;
            double t58802 = t58800+t58801+t58798+t58799+1.0;
            double t58822 = gamma_aa[index]*gx*t58597*(1.6E1/3.0);
            double t58823 = t58700*t58792*t58767*(1.6E1/3.0);
            double t58803 = t58822+t58823;
            double t58804 = gamma_aa[index]*gx*t58598*2.0;
            double t58805 = t58700*t58706*t58792;
            double t58806 = t58804+t58805+1.0;
            double t58807 = gamma_aa[index]*gx*t58598*3.0;
            double t58808 = gamma_aa[index]*gx*t58700*t58705*t58792;
            double t58809 = t58700*t58706*t58792*3.0;
            double t58810 = t58807+t58808+t58809+1.0;
            double t58811 = 1.0/(t58810*t58810);
            double t58812 = gamma_aa[index]*gx*t58597*8.0;
            double t58813 = gamma_aa[index]*gx*t58700*t58792*t58768*8.0;
            double t58814 = t58700*t58792*t58767*1.6E1;
            double t58815 = t58812+t58813+t58814;
            double t58820 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t58821 = 1.0/(t58802*t58802);
            double t58824 = 1.0/(t58806*t58806);
            double t58825 = 1.0/t58802;
            double t58826 = 1.0/t58796;
            double t58827 = 1.0/t58810;
            double t58828 = 1.0/t58806;
            double t58829 = 1.0/(t58796*t58796);
            double t58830 = ccaa4*t58702*t58703*t58704*t58754;
            double t58831 = ccaa1*gamma_aa[index]*gcaa*t58757*t58598;
            double t58832 = ccaa3*gamma_aa[index]*gcaa*t58700*t58701*t58705*t58762;
            double t58833 = ccaa2*t58700*t58701*t58706*t58766;
            double t58834 = ccaa0+t58830+t58831+t58832+t58833;
            double t58835 = 1.0/(t58562*t58562*t58562);
            double t58836 = b4f*t58478*t58598*(1.0E1/9.0);
            double t58837 = b2f*c*t58681*(4.0/9.0);
            double t58838 = b3f*t58570*t58478*t58598*(1.0/1.2E1);
            double t58839 = b1f*c*t58570*t58681*(2.0/9.0);
            double t58840 = b3f*c*t58555*t58681*(2.0/3.0);
            double t58841 = t58840+t58836+t58837+t58838+t58839-b1f*t58682*t58478*t58598*(1.0/3.6E1);
            double t58842 = t58841*t58680*t58593*t58674;
            double t58844 = t58580*t58692*t58578*t58579;
            double t58845 = 1.0/(t58573*t58573);
            double t58846 = 1.0/(t58562*t58562*t58562*t58562);
            double t58847 = t58593*t58683*t58845*t58846*t58497*(1.0/2.0);
            double t58848 = t58484*t58684*t58693*t58694*t58578*(1.0/2.0);
            double t58849 = a1f*c*t58563*t58680*t58674*t58679*(2.0/3.0);
            double t58850 = a1p*c*t58580*t58563*t58585*t58579*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*t58748+rho_b[index]*(t58726-t58590*t58496*(t58726-c0f*log((t58497* \
               (1.0/2.0))/(b1f*t58712+b3f*t58713+b2f*c*t58710+b4f*t58714*t58478)+1.0)*(a1f*c*t58710+1.0)*2.0))-t58471* \
               (t58520+t58727+t58728))*(-ccab2*t58742*t58594*t58596*(gamma_aa[index]*gcab*t58740*(8.8E1/9.0)+t58700* \
               t58735*t58594*(3.2E1/9.0)+gamma_aa[index]*t58740*t58594*t58595*(8.8E1/9.0))+ccab4*t58602*t58603*(t58733* \
               t58733)*1.0/(t58608*t58608*t58608)*2.0+ccab2*1.0/(t58613*t58613*t58613)*t58594*(t58738*t58738)*t58596* \
               2.0+ccab1*gamma_aa[index]*gcab*t58620*t58740*(4.4E1/9.0)-ccab1*t58700*t58734*t58735*t58594*(3.2E1/ \
               9.0)+ccab2*t58700*t58618*t58735*t58594*(3.2E1/9.0)-ccab4*t58602*t58603*t58741*(gamma_aa[index]*gcab* \
               t58740*(1.76E2/9.0)+t58700*t58735*t58594*(6.4E1/3.0)+gamma_aa[index]*t58740*t58594*t58595*(1.76E2/ \
               3.0)+t58700*t58602*t58735*t58596*(6.4E1/3.0)+gamma_aa[index]*gcab*t58740*t58594*t58596*(1.76E2/3.0) \
               +gamma_aa[index]*t58602*t58740*t58595*t58596*(1.76E2/9.0)+gcab*t58700*t58735*t58594*t58595*(1.28E2/ \
               3.0))+ccab4*t58700*t58602*t58621*t58735*t58596*(6.4E1/3.0)-ccab1*gamma_aa[index]*t58740*t58734*t58594* \
               t58595*(4.4E1/9.0)+ccab2*gamma_aa[index]*t58740*t58618*t58594*t58595*(8.8E1/9.0)+ccab3*gcab*1.0/(t58617* \
               t58617*t58617)*(t58746*t58746)*t58594*t58595*t58596*2.0+ccab3*gamma_aa[index]*gcab*t58740*t58619*t58594* \
               t58596*(4.4E1/3.0)+ccab4*gamma_aa[index]*t58602*t58621*t58740*t58595*t58596*(1.76E2/9.0)-ccab2*gamma_aa[index]* \
               t58742*t58594*t58738*t58595*t58597*(1.6E1/3.0)+ccab3*gcab*t58700*t58735*t58619*t58594*t58595*(3.2E1/ \
               3.0)+ccab1*gcab*1.0/(t58610*t58610*t58610)*t58700*t58735*t58594*t58595*(3.2E1/9.0)-ccab3*gcab*t58594* \
               t58595*t58739*t58596*(gamma_aa[index]*gcab*t58740*(4.4E1/3.0)+t58700*t58735*t58594*(3.2E1/3.0)+gamma_aa[index]* \
               t58740*t58594*t58595*(8.8E1/3.0)+gamma_aa[index]*gcab*t58740*t58594*t58596*(4.4E1/3.0)+gcab*t58700* \
               t58735*t58594*t58595*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t58746*t58594*t58739*t58596*t58597*8.0- \
               ccab4*gamma_aa[index]*t58602*t58741*t58733*t58595*t58596*t58597*(3.2E1/3.0))+t58834*(-t58586+t58697+ \
               t58590*t58496*t58699)*2.0+t58791*t58748*2.0+(t58520+t58727+t58728+rho_a[index]*(-t58586+t58697+t58590* \
               t58496*(t58586+t58696-t58680*t58593*t58674*t58679-a1p*c*c0p*t58563*t58587*(2.0/3.0)))+t58471*(t58531- \
               a1p*c*c0p*t58509*t58483*(2.0/3.0)-t58510*t58521*t58532*t58515*t58496*4.0+t58510*t58521*t58550*t58518* \
               t58496-t58521*t58515*t58633*t58518*t58496+t58510*t58515*t58490*t58491*t58518*t58496*4.0+Aa*t58550* \
               t58533*t58543*t58552*t58545*t58496*2.0-Aa*t58515*t58533*t58543*t58545*t58656*t58496*2.0+t58515*t58533* \
               t58552*t58545*t58671*t58664*t58666*t58496-Aa*a1a*c*t58515*t58533*t58543*t58552*t58483*t58496*(2.0/ \
               3.0))-c0p*t58578*t58587*2.0-t58590*t58708*t58496)*(ccab1*gamma_aa[index]*gcab*t58620*t58597*(4.0/3.0) \
               -ccab4*t58602*t58603*t58741*t58733-ccab2*t58742*t58594*t58738*t58596-ccab1*gamma_aa[index]*t58734* \
               t58594*t58595*t58597*(4.0/3.0)+ccab2*gamma_aa[index]*t58618*t58594*t58595*t58597*(8.0/3.0)+ccab3*gamma_aa[index]* \
               gcab*t58619*t58594*t58596*t58597*4.0+ccab4*gamma_aa[index]*t58602*t58621*t58595*t58596*t58597*(1.6E1/ \
               3.0)-ccab3*gcab*t58746*t58594*t58595*t58739*t58596)*2.0-(ccab0+ccab1*gcab*t58620*t58595+ccab4*t58602* \
               t58603*t58621+ccab2*t58618*t58594*t58596+ccab3*gcab*t58619*t58594*t58595*t58596)*(-t58471*(-t58653- \
               t58645+t58673+t58698+t58521*t58515*t58518*t58496*(t58653+t58645-t58673-t58698-1.0/(t58502*t58502*t58502) \
               *t58508*t58625*t58646*2.0+t58508*t58625*t58626*(b2f*c*t58622*(4.0/9.0)+b4f*t58623*t58478*(1.0E1/9.0) \
               +b1f*c*t58523*t58622*(2.0/9.0)+b3f*c*t58622*t58474*(2.0/3.0)-b1f*t58623*t58637*t58478*(1.0/3.6E1)+ \
               b3f*t58523*t58623*t58478*(1.0/1.2E1))+1.0/(t58502*t58502*t58502*t58502)*1.0/(t58505*t58505)*t58508* \
               t58646*t58497*(1.0/2.0)-a1f*c*c0f*t58622*t58506*(8.0/9.0)+a1f*c*t58631*t58625*t58626*t58483*(2.0/3.0) \
               -a1p*c*t58530*t58524*t58525*t58483*(2.0/3.0))+t58510*t58521*t58532*t58550*t58496*8.0-t58510*t58521* \
               t58515*t58654*t58496*2.0E1-t58521*t58532*t58515*t58633*t58496*8.0-t58510*t58521*t58518*t58663*t58496+ \
               t58521*t58550*t58633*t58518*t58496*2.0-t58510*t58515*t58491*t58518*t58496*1.2E1+t58510*t58532*t58515* \
               t58490*t58491*t58496*3.2E1-t58510*t58550*t58490*t58491*t58518*t58496*8.0+t58515*t58633*t58490*t58491* \
               t58518*t58496*8.0+a1p*c*t58530*t58524*t58525*t58483*(2.0/3.0)+Aa*t58550*t58533*t58543*t58545*t58656* \
               t58496*4.0-Aa*t58533*t58543*t58552*t58545*t58663*t58496*2.0-Aa*t58515*t58533*t58543*t58545*t58496* \
               (t58521*t58654*2.0E1+t58491*t58518*1.2E1-t58532*t58490*t58491*3.2E1)*2.0-t58550*t58533*t58552*t58545* \
               t58671*t58664*t58666*t58496*2.0+t58515*t58533*t58545*t58671*t58664*t58656*t58666*t58496*2.0-t58515* \
               t58533*t58552*t58545*t58672*t58664*1.0/(t58539*t58539*t58539)*t58496*2.0+t58515*t58533*t58552*t58545* \
               t58664*t58666*t58496*(b2a*c*t58622*(4.0/9.0)+b4a*t58623*t58478*(1.0E1/9.0)+b1a*c*t58523*t58622*(2.0/ \
               9.0)+b3a*c*t58622*t58474*(2.0/3.0)-b1a*t58623*t58637*t58478*(1.0/3.6E1)+b3a*t58523*t58623*t58478*(1.0/ \
               1.2E1))-Aa*a1a*c*t58622*t58515*t58533*t58543*t58552*t58496*(8.0/9.0)+Aa*a1a*c*t58550*t58533*t58543* \
               t58552*t58483*t58496*(4.0/3.0)-Aa*a1a*c*t58515*t58533*t58543*t58483*t58656*t58496*(4.0/3.0)+t58515* \
               t58533*1.0/(t58542*t58542)*t58534*t58552*t58545*t58672*1.0/(t58539*t58539*t58539*t58539)*t58496*(1.0/ \
               2.0)+a1a*c*t58515*t58533*t58552*t58671*t58483*t58664*t58666*t58496*(2.0/3.0))+rho_a[index]*(t58850+ \
               t58844-t58686-t58695+t58848+t58590*t58496*(t58842+t58847+t58686+t58695+t58849-t58835*t58593*t58674* \
               t58683*2.0-t58580*t58692*t58578*t58579-a1f*c*c0f*t58591*t58681*(8.0/9.0)-t58484*t58684*t58693*t58694* \
               t58578*(1.0/2.0)-a1p*c*t58580*t58563*t58585*t58579*(2.0/3.0)))+t58590*t58496*t58699*2.0+t58530*t58524* \
               t58525*t58489*2.0-t58580*t58585*t58578*t58579*2.0-a1p*c*c0p*t58509*t58483*(4.0/3.0)+a1p*c*c0p*t58563* \
               t58587*(4.0/3.0)-t58510*t58521*t58532*t58515*t58496*8.0+t58510*t58521*t58550*t58518*t58496*2.0-t58521* \
               t58515*t58633*t58518*t58496*2.0+t58510*t58515*t58490*t58491*t58518*t58496*8.0+Aa*t58550*t58533*t58543* \
               t58552*t58545*t58496*4.0-Aa*t58515*t58533*t58543*t58545*t58656*t58496*4.0+t58515*t58533*t58552*t58545* \
               t58671*t58664*t58666*t58496*2.0-Aa*a1a*c*t58515*t58533*t58543*t58552*t58483*t58496*(4.0/3.0))+rho_a[index]* \
               t58791*(t58586-t58697+t58590*t58496*(t58770-t58586-t58696+t58697))*2.0+rho_a[index]*t58834*(t58850+ \
               t58844-t58686-t58695+t58848-t58590*t58496*(t58850-t58842+t58844-t58847-t58686-t58695+t58848-t58849+ \
               t58835*t58593*t58674*t58683*2.0+a1f*c*c0f*t58591*t58681*(8.0/9.0)))-c0*pow(rho_a[index],1.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t58826*t58597*(8.0/3.0)-cx1*t58700*t58792*t58829*t58767*(8.0/3.0)+cx2*t58700*t58792* \
               t58828*t58767*(1.6E1/3.0)+cx4*t58702*t58825*t58793*t58769*(3.2E1/3.0)-cx2*t58700*t58803*t58706*t58824* \
               t58792-cx4*t58702*t58704*t58821*t58793*t58797+cx3*gamma_aa[index]*gx*t58700*t58827*t58792*t58768*8.0- \
               cx3*gamma_aa[index]*gx*t58700*t58811*t58705*t58815*t58792)*(8.0/3.0)-rho_a[index]*t58748*(ccaa1*gamma_aa[index]* \
               gcaa*t58740*t58757*(8.8E1/9.0)+ccaa4*t58702*t58703*t58820*t58754*(1.12E3/9.0)-ccaa1*t58700*t58701* \
               t58735*t58775*2.4E1+ccaa2*t58700*t58701*t58735*t58766*(3.04E2/9.0)-ccaa2*t58700*t58701*t58790*t58767* \
               t58789*(3.2E1/3.0)-ccaa4*t58702*t58703*t58785*t58786*t58769*(6.4E1/3.0)-ccaa2*t58700*t58701*t58706* \
               t58790*(gamma_aa[index]*gcaa*t58740*(1.76E2/9.0)+t58700*t58701*t58735*(3.04E2/9.0))-ccaa4*t58702*t58703* \
               t58704*t58786*(gamma_aa[index]*gcaa*t58740*(3.52E2/9.0)+t58702*t58703*t58820*(1.12E3/9.0)+t58700*t58701* \
               t58735*(6.08E2/3.0)+gamma_aa[index]*gcaa*t58700*t58701*t58794*2.88E2)+ccaa4*t58702*t58703*t58704*1.0/ \
               (t58753*t58753*t58753)*(t58785*t58785)*2.0+ccaa2*t58700*t58701*t58706*1.0/(t58765*t58765*t58765)*(t58789* \
               t58789)*2.0+ccaa3*gamma_aa[index]*gcaa*t58700*t58701*t58762*t58794*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t58700*t58701*1.0/(t58756*t58756*t58756)*t58794*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t58700*t58701* \
               t58705*1.0/(t58761*t58761*t58761)*(t58779*t58779)*2.0-ccaa3*gamma_aa[index]*gcaa*t58700*t58701*t58705* \
               t58780*(gamma_aa[index]*gcaa*t58740*(8.8E1/3.0)+t58700*t58701*t58735*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t58700*t58701*t58794*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t58700*t58701*t58780*t58768*t58779*1.6E1) \
               +c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t58740*t58826*(8.8E1/9.0)-cx1*t58700*t58735* \
               t58792*t58829*2.4E1+cx2*t58700*t58735*t58792*t58828*(3.04E2/9.0)+cx4*t58702*t58820*t58825*t58793*(1.12E3/ \
               9.0)-cx2*t58700*t58803*t58824*t58792*t58767*(3.2E1/3.0)-cx4*t58702*t58821*t58793*t58769*t58797*(6.4E1/ \
               3.0)-cx2*t58700*t58706*t58824*t58792*(gamma_aa[index]*gx*t58740*(1.76E2/9.0)+t58700*t58735*t58792* \
               (3.04E2/9.0))-cx4*t58702*t58704*t58821*t58793*(gamma_aa[index]*gx*t58740*(3.52E2/9.0)+t58702*t58820* \
               t58793*(1.12E3/9.0)+t58700*t58735*t58792*(6.08E2/3.0)+gamma_aa[index]*gx*t58700*t58792*t58794*2.88E2) \
               +cx2*t58700*(t58803*t58803)*t58706*1.0/(t58806*t58806*t58806)*t58792*2.0+cx4*t58702*1.0/(t58802*t58802* \
               t58802)*t58704*t58793*(t58797*t58797)*2.0+cx3*gamma_aa[index]*gx*t58700*t58827*t58792*t58794*7.2E1+ \
               cx1*gamma_aa[index]*gx*t58700*t58792*t58794*1.0/(t58796*t58796*t58796)*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*t58700*1.0/(t58810*t58810*t58810)*t58705*(t58815*t58815)*t58792*2.0-cx3*gamma_aa[index]*gx*t58700* \
               t58811*t58705*t58792*(gamma_aa[index]*gx*t58740*(8.8E1/3.0)+t58700*t58735*t58792*(3.04E2/3.0)+gamma_aa[index]* \
               gx*t58700*t58792*t58794*7.2E1)-cx3*gamma_aa[index]*gx*t58700*t58811*t58815*t58792*t58768*1.6E1)+c0* \
               t58559*(cx0+cx1*gamma_aa[index]*gx*t58826*t58598+cx2*t58700*t58706*t58792*t58828+cx4*t58702*t58704* \
               t58825*t58793+cx3*gamma_aa[index]*gx*t58700*t58705*t58827*t58792)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            double t61919 = 1.0/pow(rho_a[index],1.0/3.0);
            double t61920 = c*t61919;
            double t61921 = sqrt(t61920);
            double t61922 = b1f*t61921;
            double t61923 = pow(t61920,3.0/2.0);
            double t61924 = b3f*t61923;
            double t61925 = c*c;
            double t61926 = 1.0/pow(rho_a[index],2.0/3.0);
            double t61927 = b4f*t61925*t61926;
            double t61928 = b2f*c*t61919;
            double t61929 = t61922+t61924+t61927+t61928;
            double t61930 = 1.0/pow(rho_a[index],4.0/3.0);
            double t61931 = b1p*t61921;
            double t61932 = b3p*t61923;
            double t61933 = b4p*t61925*t61926;
            double t61934 = b2p*c*t61919;
            double t61935 = t61931+t61932+t61933+t61934;
            double t61936 = 1.0/pow(rho_a[index],5.0/3.0);
            double t61937 = 1.0/sqrt(t61920);
            double t61938 = 1.0/c0f;
            double t61939 = 1.0/t61929;
            double t61940 = t61938*t61939*(1.0/2.0);
            double t61941 = t61940+1.0;
            double t61942 = 1.0/c0p;
            double t61943 = 1.0/t61935;
            double t61944 = t61942*t61943*(1.0/2.0);
            double t61945 = t61944+1.0;
            double t61946 = a1p*c*t61919;
            double t61947 = t61946+1.0;
            double t61948 = 1.0/t61945;
            double t61949 = 1.0/(t61935*t61935);
            double t61950 = b4p*t61925*t61936*(2.0/3.0);
            double t61951 = b2p*c*t61930*(1.0/3.0);
            double t61952 = b1p*c*t61930*t61937*(1.0/6.0);
            double t61953 = b3p*c*t61921*t61930*(1.0/2.0);
            double t61954 = t61950+t61951+t61952+t61953;
            double t61955 = t61954*t61947*t61948*t61949;
            double t61956 = log(t61945);
            double t61957 = gamma_aa[index]*gamma_aa[index];
            double t61958 = gcaa*gcaa;
            double t61959 = t61957*t61957;
            double t61960 = t61958*t61958;
            double t61961 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t61962 = 1.0/pow(rho_a[index],8.0/3.0);
            double t61963 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t61964 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t61965 = pow(2.0,1.0/3.0);
            double t61966 = t61965*2.0;
            double t61967 = t61966-2.0;
            double t61968 = two_13*2.0;
            double t61969 = t61968-2.0;
            double t61970 = 1.0/t61969;
            double t61971 = log(t61941);
            double t61972 = a1f*c*t61919;
            double t61973 = t61972+1.0;
            double t61974 = gamma_aa[index]*gcaa*t61962*4.0;
            double t61975 = gamma_aa[index]*gcaa*t61963*t61957*t61958*4.0;
            double t61976 = t61964*t61957*t61958*6.0;
            double t61977 = t61960*t61961*t61959;
            double t61978 = t61974+t61975+t61976+t61977+1.0;
            double t61979 = 1.0/t61978;
            double t61980 = gamma_aa[index]*gcaa*t61962;
            double t61981 = t61980+1.0;
            double t61982 = 1.0/t61981;
            double t61983 = gamma_aa[index]*gcaa*t61962*3.0;
            double t61984 = gamma_aa[index]*gcaa*t61963*t61957*t61958;
            double t61985 = t61964*t61957*t61958*3.0;
            double t61986 = t61983+t61984+t61985+1.0;
            double t61987 = 1.0/t61986;
            double t61988 = gamma_aa[index]*gcaa*t61962*2.0;
            double t61989 = t61964*t61957*t61958;
            double t61990 = t61988+t61989+1.0;
            double t61991 = 1.0/t61990;
            double t61992 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t61993 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t61994 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t61995 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t61996 = 1.0/t61941;
            double t61997 = 1.0/(t61929*t61929);
            double t61998 = b4f*t61925*t61936*(2.0/3.0);
            double t61999 = b2f*c*t61930*(1.0/3.0);
            double t62000 = b1f*c*t61930*t61937*(1.0/6.0);
            double t62001 = b3f*c*t61921*t61930*(1.0/2.0);
            double t62002 = t61998+t61999+t62000+t62001;
            double t62003 = a1f*c*c0f*t61930*t61971*(2.0/3.0);
            double t62004 = a1p*c*c0p*t61930*t61956*(2.0/3.0);
            double t62005 = ccaa4*t61960*t61959*t61995*t61979*(3.2E1/3.0);
            double t62006 = ccaa1*gamma_aa[index]*gcaa*t61982*t61993*(8.0/3.0);
            double t62007 = ccaa3*gamma_aa[index]*gcaa*t61957*t61958*t61994*t61987*8.0;
            double t62008 = ccaa2*t61991*t61992*t61957*t61958*(1.6E1/3.0);
            double t62009 = 1.0/(t61981*t61981);
            double t62010 = gamma_aa[index]*gcaa*t61993*8.0;
            double t62011 = gamma_aa[index]*gcaa*t61957*t61958*t61994*8.0;
            double t62012 = t61992*t61957*t61958*1.6E1;
            double t62013 = t62010+t62011+t62012;
            double t62014 = 1.0/(t61986*t61986);
            double t62015 = gamma_aa[index]*gcaa*t61993*(3.2E1/3.0);
            double t62016 = gamma_aa[index]*gcaa*t61957*t61958*t61994*3.2E1;
            double t62017 = t61992*t61957*t61958*3.2E1;
            double t62018 = t61960*t61959*t61995*(3.2E1/3.0);
            double t62019 = t62015+t62016+t62017+t62018;
            double t62020 = 1.0/(t61978*t61978);
            double t62021 = gamma_aa[index]*gcaa*t61993*(1.6E1/3.0);
            double t62022 = t61992*t61957*t61958*(1.6E1/3.0);
            double t62023 = t62021+t62022;
            double t62024 = 1.0/(t61990*t61990);
            double t62025 = t62005+t62006+t62007+t62008-ccaa1*t61992*t61957*t61958*t62009*(8.0/3.0)-ccaa4*t61960* \
               t61961*t61959*t62020*t62019-ccaa2*t61964*t61957*t61958*t62023*t62024-ccaa3*gamma_aa[index]*gcaa*t61963* \
               t61957*t61958*t62013*t62014;
            double t62026 = gx*gx;
            double t62027 = t62026*t62026;
            double t62028 = 1.0/pow(rho_a[index],1.0E1);
            double t62029 = gamma_aa[index]*gx*t61962;
            double t62030 = t62029+1.0;
            double t62031 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t62052 = gamma_aa[index]*gx*t61993*(3.2E1/3.0);
            double t62053 = gamma_aa[index]*gx*t61957*t61994*t62026*3.2E1;
            double t62054 = t61992*t61957*t62026*3.2E1;
            double t62055 = t61959*t61995*t62027*(3.2E1/3.0);
            double t62032 = t62052+t62053+t62054+t62055;
            double t62033 = gamma_aa[index]*gx*t61962*4.0;
            double t62034 = gamma_aa[index]*gx*t61963*t61957*t62026*4.0;
            double t62035 = t61964*t61957*t62026*6.0;
            double t62036 = t61961*t61959*t62027;
            double t62037 = t62033+t62034+t62035+t62036+1.0;
            double t62058 = gamma_aa[index]*gx*t61993*(1.6E1/3.0);
            double t62059 = t61992*t61957*t62026*(1.6E1/3.0);
            double t62038 = t62058+t62059;
            double t62039 = gamma_aa[index]*gx*t61962*2.0;
            double t62040 = t61964*t61957*t62026;
            double t62041 = t62040+t62039+1.0;
            double t62042 = gamma_aa[index]*gx*t61962*3.0;
            double t62043 = gamma_aa[index]*gx*t61963*t61957*t62026;
            double t62044 = t61964*t61957*t62026*3.0;
            double t62045 = t62042+t62043+t62044+1.0;
            double t62046 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t62047 = 1.0/(t62045*t62045);
            double t62048 = gamma_aa[index]*gx*t61993*8.0;
            double t62049 = gamma_aa[index]*gx*t61957*t61994*t62026*8.0;
            double t62050 = t61992*t61957*t62026*1.6E1;
            double t62051 = t62050+t62048+t62049;
            double t62056 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t62057 = 1.0/(t62037*t62037);
            double t62060 = 1.0/(t62041*t62041);
            double t62061 = 1.0/t62037;
            double t62062 = 1.0/t62030;
            double t62063 = 1.0/t62045;
            double t62064 = 1.0/t62041;
            double t62065 = c0f*t61971*t61973*2.0;
            double t62066 = c0p*t61947*t61956*2.0;
            double t62067 = 1.0/(t62030*t62030);
            double t62068 = ccaa4*t61960*t61961*t61959*t61979;
            double t62069 = ccaa1*gamma_aa[index]*gcaa*t61962*t61982;
            double t62070 = ccaa3*gamma_aa[index]*gcaa*t61963*t61957*t61958*t61987;
            double t62071 = ccaa2*t61964*t61991*t61957*t61958;
            double t62072 = ccaa0+t62070+t62071+t62068+t62069;
            double t62073 = 1.0/pow(rho_a[index],7.0/3.0);
            double t62074 = 1.0/pow(t61920,3.0/2.0);
            double t62075 = t62002*t62002;
            double t62076 = t61954*t61954;
            double t62077 = 1.0/(t61935*t61935*t61935);
            double t62078 = t61947*t61948*t62076*t62077*2.0;
            double t62079 = b4p*t61925*t61962*(1.0E1/9.0);
            double t62080 = b2p*c*t62073*(4.0/9.0);
            double t62081 = b3p*t61925*t61962*t61937*(1.0/1.2E1);
            double t62082 = b1p*c*t61937*t62073*(2.0/9.0);
            double t62083 = b3p*c*t61921*t62073*(2.0/3.0);
            double t62084 = t62080+t62081+t62082+t62083+t62079-b1p*t61925*t61962*t62074*(1.0/3.6E1);
            double t62085 = 1.0/(t61945*t61945);
            double t62086 = 1.0/(t61935*t61935*t61935*t61935);
            double t62087 = a1p*c*c0p*t61956*t62073*(8.0/9.0);
            v_rho_a_rho_a_[index] = t62025*(t62066+t61970*t61967*(t62065-c0p*t61947*t61956*2.0))*2.0+t62072*(- \
               t61955+t62004+t61970*t61967*(t61955+t62003-t61973*t61996*t61997*t62002-a1p*c*c0p*t61930*t61956*(2.0/ \
               3.0)))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t61993*t62062*(8.0/3.0)-cx1*t61992* \
               t61957*t62026*t62067*(8.0/3.0)+cx2*t61992*t61957*t62026*t62064*(1.6E1/3.0)+cx4*t61959*t61995*t62061* \
               t62027*(3.2E1/3.0)-cx2*t61964*t61957*t62060*t62026*t62038-cx4*t61961*t61959*t62032*t62027*t62057+cx3* \
               gamma_aa[index]*gx*t61957*t61994*t62026*t62063*8.0-cx3*gamma_aa[index]*gx*t61963*t61957*t62051*t62026* \
               t62047)*(8.0/3.0)+rho_a[index]*t62072*(-t62078-t62087+t61970*t61967*(t62078+t62087-t61947*t61948*t61949* \
               t62084-t61973*1.0/(t61929*t61929*t61929)*t61996*t62075*2.0+t61973*t61996*t61997*(b2f*c*t62073*(4.0/ \
               9.0)+b4f*t61925*t61962*(1.0E1/9.0)+b1f*c*t61937*t62073*(2.0/9.0)+b3f*c*t61921*t62073*(2.0/3.0)-b1f* \
               t61925*t61962*t62074*(1.0/3.6E1)+b3f*t61925*t61962*t61937*(1.0/1.2E1))+1.0/(t61941*t61941)*t61973* \
               1.0/(t61929*t61929*t61929*t61929)*t61938*t62075*(1.0/2.0)-a1f*c*c0f*t61971*t62073*(8.0/9.0)-t61942* \
               t61947*t62076*t62085*t62086*(1.0/2.0)+a1f*c*t61930*t61996*t61997*t62002*(2.0/3.0)-a1p*c*t61930*t61954* \
               t61948*t61949*(2.0/3.0))+t61947*t61948*t61949*t62084+t61942*t61947*t62076*t62085*t62086*(1.0/2.0)+ \
               a1p*c*t61930*t61954*t61948*t61949*(2.0/3.0))-rho_a[index]*t62025*(-t61955+t62004+t61970*t61967*(t61955+ \
               t62003-t62004-t61973*t61996*t61997*t62002))*2.0-rho_a[index]*(t62066+t61970*t61967*(t62065-t62066) \
               )*(ccaa1*gamma_aa[index]*gcaa*t61982*t62046*(8.8E1/9.0)+ccaa2*t61991*t61957*t61958*t62031*(3.04E2/ \
               9.0)+ccaa4*t61960*t61959*t61979*t62056*(1.12E3/9.0)-ccaa1*t61957*t61958*t62031*t62009*2.4E1-ccaa2* \
               t61992*t61957*t61958*t62023*t62024*(3.2E1/3.0)-ccaa4*t61960*t61959*t61995*t62020*t62019*(6.4E1/3.0) \
               -ccaa2*t61964*t61957*t61958*t62024*(gamma_aa[index]*gcaa*t62046*(1.76E2/9.0)+t61957*t61958*t62031* \
               (3.04E2/9.0))-ccaa4*t61960*t61961*t61959*t62020*(gamma_aa[index]*gcaa*t62046*(3.52E2/9.0)+t61957*t61958* \
               t62031*(6.08E2/3.0)+t61960*t61959*t62056*(1.12E3/9.0)+gamma_aa[index]*gcaa*t61957*t61958*t62028*2.88E2) \
               +ccaa2*1.0/(t61990*t61990*t61990)*t61964*t61957*t61958*(t62023*t62023)*2.0+ccaa4*t61960*t61961*t61959* \
               1.0/(t61978*t61978*t61978)*(t62019*t62019)*2.0+ccaa3*gamma_aa[index]*gcaa*t61957*t61958*t61987*t62028* \
               7.2E1+ccaa1*gamma_aa[index]*gcaa*1.0/(t61981*t61981*t61981)*t61957*t61958*t62028*(1.28E2/9.0)+ccaa3* \
               gamma_aa[index]*gcaa*t61963*t61957*t61958*1.0/(t61986*t61986*t61986)*(t62013*t62013)*2.0-ccaa3*gamma_aa[index]* \
               gcaa*t61963*t61957*t61958*t62014*(gamma_aa[index]*gcaa*t62046*(8.8E1/3.0)+t61957*t61958*t62031*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t61957*t61958*t62028*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t61957*t61958*t61994* \
               t62013*t62014*1.6E1)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t62062*t62046*(8.8E1/9.0) \
               -cx1*t61957*t62031*t62026*t62067*2.4E1+cx2*t61957*t62031*t62026*t62064*(3.04E2/9.0)+cx4*t61959*t62061* \
               t62027*t62056*(1.12E3/9.0)-cx2*t61992*t61957*t62060*t62026*t62038*(3.2E1/3.0)-cx4*t61959*t61995*t62032* \
               t62027*t62057*(6.4E1/3.0)-cx2*t61964*t61957*t62060*t62026*(gamma_aa[index]*gx*t62046*(1.76E2/9.0)+ \
               t61957*t62031*t62026*(3.04E2/9.0))-cx4*t61961*t61959*t62027*t62057*(gamma_aa[index]*gx*t62046*(3.52E2/ \
               9.0)+t61957*t62031*t62026*(6.08E2/3.0)+t61959*t62027*t62056*(1.12E3/9.0)+gamma_aa[index]*gx*t61957* \
               t62026*t62028*2.88E2)+cx2*t61964*t61957*1.0/(t62041*t62041*t62041)*t62026*(t62038*t62038)*2.0+cx4* \
               t61961*t61959*(t62032*t62032)*t62027*1.0/(t62037*t62037*t62037)*2.0+cx3*gamma_aa[index]*gx*t61957* \
               t62026*t62063*t62028*7.2E1+cx1*gamma_aa[index]*gx*t61957*1.0/(t62030*t62030*t62030)*t62026*t62028* \
               (1.28E2/9.0)+cx3*gamma_aa[index]*gx*t61963*t61957*(t62051*t62051)*t62026*1.0/(t62045*t62045*t62045) \
               *2.0-cx3*gamma_aa[index]*gx*t61963*t61957*t62026*t62047*(gamma_aa[index]*gx*t62046*(8.8E1/3.0)+t61957* \
               t62031*t62026*(3.04E2/3.0)+gamma_aa[index]*gx*t61957*t62026*t62028*7.2E1)-cx3*gamma_aa[index]*gx*t61957* \
               t61994*t62051*t62026*t62047*1.6E1)+c0*t61926*(cx0+cx1*gamma_aa[index]*gx*t61962*t62062+cx2*t61964* \
               t61957*t62026*t62064+cx4*t61961*t61959*t62061*t62027+cx3*gamma_aa[index]*gx*t61963*t61957*t62026*t62063) \
               *(4.0/9.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t58852 = rho_a[index]+rho_b[index];
            double t58853 = 1.0/pow(t58852,1.0/3.0);
            double t58854 = c*t58853;
            double t58855 = sqrt(t58854);
            double t58856 = b1p*t58855;
            double t58857 = pow(t58854,3.0/2.0);
            double t58858 = b3p*t58857;
            double t58859 = c*c;
            double t58860 = 1.0/pow(t58852,2.0/3.0);
            double t58861 = b4p*t58860*t58859;
            double t58862 = b2p*c*t58853;
            double t58863 = t58861+t58862+t58856+t58858;
            double t58864 = 1.0/pow(t58852,4.0/3.0);
            double t58865 = 1.0/c0p;
            double t58866 = 1.0/t58863;
            double t58867 = t58865*t58866*(1.0/2.0);
            double t58868 = t58867+1.0;
            double t58869 = a1p*c*t58853;
            double t58870 = t58869+1.0;
            double t58871 = rho_a[index]-rho_b[index];
            double t58872 = t58871*t58871;
            double t58873 = 1.0/t58852;
            double t58874 = t58871*t58873;
            double t58875 = two_13*2.0;
            double t58876 = t58875-2.0;
            double t58877 = 1.0/t58876;
            double t58878 = 1.0/c0f;
            double t58879 = b1f*t58855;
            double t58880 = b3f*t58857;
            double t58881 = b4f*t58860*t58859;
            double t58882 = b2f*c*t58853;
            double t58883 = t58880+t58881+t58882+t58879;
            double t58884 = 1.0/t58883;
            double t58885 = t58884*t58878*(1.0/2.0);
            double t58886 = t58885+1.0;
            double t58887 = log(t58886);
            double t58888 = a1f*c*t58853;
            double t58889 = t58888+1.0;
            double t58890 = log(t58868);
            double t58900 = c0f*t58887*t58889*2.0;
            double t58901 = c0p*t58870*t58890*2.0;
            double t58891 = t58900-t58901;
            double t58892 = t58874+1.0;
            double t58893 = pow(t58892,4.0/3.0);
            double t58894 = -t58874+1.0;
            double t58895 = pow(t58894,4.0/3.0);
            double t58896 = t58893+t58895-2.0;
            double t58897 = 1.0/(t58852*t58852);
            double t58928 = t58871*t58897;
            double t58898 = t58873-t58928;
            double t58899 = 1.0/(t58852*t58852*t58852*t58852);
            double t58902 = t58872*t58872;
            double t58903 = 1.0/pow(t58852,5.0/3.0);
            double t58904 = 1.0/sqrt(t58854);
            double t58905 = 1.0/t58868;
            double t58906 = 1.0/(t58863*t58863);
            double t58907 = b4p*t58903*t58859*(2.0/3.0);
            double t58908 = b2p*c*t58864*(1.0/3.0);
            double t58909 = b1p*c*t58904*t58864*(1.0/6.0);
            double t58910 = b3p*c*t58855*t58864*(1.0/2.0);
            double t58911 = t58910+t58907+t58908+t58909;
            double t58912 = t58911*t58905*t58870*t58906;
            double t58913 = 1.0/(t58852*t58852*t58852*t58852*t58852);
            double t58914 = 1.0/d2fz0;
            double t58915 = 1.0/Aa;
            double t58916 = b1a*t58855;
            double t58917 = b3a*t58857;
            double t58918 = b4a*t58860*t58859;
            double t58919 = b2a*c*t58853;
            double t58920 = t58916+t58917+t58918+t58919;
            double t58921 = 1.0/t58920;
            double t58922 = t58921*t58915*(1.0/2.0);
            double t58923 = t58922+1.0;
            double t58924 = log(t58923);
            double t58925 = a1a*c*t58853;
            double t58926 = t58925+1.0;
            double t58927 = pow(t58892,1.0/3.0);
            double t58929 = t58927*t58898*(4.0/3.0);
            double t58930 = pow(t58894,1.0/3.0);
            double t59074 = t58930*t58898*(4.0/3.0);
            double t58931 = t58929-t59074;
            double t58932 = t58902*t58899;
            double t58933 = t58932-1.0;
            double t58934 = 1.0/pow(rho_a[index],1.0/3.0);
            double t58935 = c*t58934;
            double t58936 = sqrt(t58935);
            double t58937 = b1f*t58936;
            double t58938 = pow(t58935,3.0/2.0);
            double t58939 = b3f*t58938;
            double t58940 = 1.0/pow(rho_a[index],2.0/3.0);
            double t58941 = b4f*t58940*t58859;
            double t58942 = b2f*c*t58934;
            double t58943 = t58941+t58942+t58937+t58939;
            double t58944 = 1.0/pow(rho_a[index],4.0/3.0);
            double t58945 = b1p*t58936;
            double t58946 = b3p*t58938;
            double t58947 = b4p*t58940*t58859;
            double t58948 = b2p*c*t58934;
            double t58949 = t58945+t58946+t58947+t58948;
            double t58950 = 1.0/pow(rho_a[index],5.0/3.0);
            double t58951 = 1.0/sqrt(t58935);
            double t58952 = 1.0/t58943;
            double t58953 = t58952*t58878*(1.0/2.0);
            double t58954 = t58953+1.0;
            double t58955 = 1.0/t58949;
            double t58956 = t58865*t58955*(1.0/2.0);
            double t58957 = t58956+1.0;
            double t58958 = a1p*c*t58934;
            double t58959 = t58958+1.0;
            double t58960 = 1.0/t58957;
            double t58961 = 1.0/(t58949*t58949);
            double t58962 = b4p*t58950*t58859*(2.0/3.0);
            double t58963 = b2p*c*t58944*(1.0/3.0);
            double t58964 = b1p*c*t58951*t58944*(1.0/6.0);
            double t58965 = b3p*c*t58944*t58936*(1.0/2.0);
            double t58966 = t58962+t58963+t58964+t58965;
            double t58967 = t58960*t58961*t58966*t58959;
            double t58968 = log(t58957);
            double t58969 = pow(2.0,1.0/3.0);
            double t58970 = t58969*2.0;
            double t58971 = t58970-2.0;
            double t58972 = log(t58954);
            double t58973 = a1f*c*t58934;
            double t58974 = t58973+1.0;
            double t58975 = gcab*gcab;
            double t58979 = 1.0/pow(rho_a[index],8.0/3.0);
            double t58980 = gamma_aa[index]*t58979*(1.0/2.0);
            double t58981 = 1.0/pow(rho_b[index],8.0/3.0);
            double t58982 = gamma_bb[index]*t58981*(1.0/2.0);
            double t58976 = t58980+t58982;
            double t58977 = t58976*t58976;
            double t58978 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t58983 = t58975*t58975;
            double t58984 = t58977*t58977;
            double t58985 = t58975*t58977*6.0;
            double t58986 = gcab*t58975*t58976*t58977*4.0;
            double t58987 = t58983*t58984;
            double t58988 = gcab*t58976*4.0;
            double t58989 = t58985+t58986+t58987+t58988+1.0;
            double t58990 = gcab*t58976;
            double t58991 = t58990+1.0;
            double t58992 = t58975*t58977;
            double t58993 = gcab*t58976*2.0;
            double t58994 = t58992+t58993+1.0;
            double t58995 = t58975*t58977*3.0;
            double t58996 = gcab*t58975*t58976*t58977;
            double t58997 = gcab*t58976*3.0;
            double t58998 = t58995+t58996+t58997+1.0;
            double t58999 = t58871*t58872*t58891*t58877*t58896*t58899*4.0;
            double t59000 = t58873+t58928;
            double t59001 = 1.0/t58886;
            double t59002 = 1.0/(t58883*t58883);
            double t59003 = b4f*t58903*t58859*(2.0/3.0);
            double t59004 = b2f*c*t58864*(1.0/3.0);
            double t59005 = b1f*c*t58904*t58864*(1.0/6.0);
            double t59006 = b3f*c*t58855*t58864*(1.0/2.0);
            double t59007 = t59003+t59004+t59005+t59006;
            double t59008 = a1f*c*c0f*t58864*t58887*(2.0/3.0);
            double t59009 = t58902*t58913*4.0;
            double t59010 = t58930*t59000*(4.0/3.0);
            double t59073 = t58927*t59000*(4.0/3.0);
            double t59011 = t59010-t59073;
            double t59012 = 1.0/t58923;
            double t59013 = 1.0/(t58920*t58920);
            double t59014 = b4a*t58903*t58859*(2.0/3.0);
            double t59015 = b2a*c*t58864*(1.0/3.0);
            double t59016 = b1a*c*t58904*t58864*(1.0/6.0);
            double t59017 = b3a*c*t58855*t58864*(1.0/2.0);
            double t59018 = t59014+t59015+t59016+t59017;
            double t59019 = t58914*t58933*t58926*t58877*t58896*t59012*t59013*t59018;
            double t59020 = 1.0/pow(rho_b[index],1.0/3.0);
            double t59021 = c*t59020;
            double t59022 = sqrt(t59021);
            double t59023 = b1f*t59022;
            double t59024 = pow(t59021,3.0/2.0);
            double t59025 = b3f*t59024;
            double t59026 = 1.0/pow(rho_b[index],2.0/3.0);
            double t59027 = b4f*t58859*t59026;
            double t59028 = b2f*c*t59020;
            double t59029 = t59023+t59025+t59027+t59028;
            double t59030 = 1.0/pow(rho_b[index],4.0/3.0);
            double t59031 = b1p*t59022;
            double t59032 = b3p*t59024;
            double t59033 = b4p*t58859*t59026;
            double t59034 = b2p*c*t59020;
            double t59035 = t59031+t59032+t59033+t59034;
            double t59036 = 1.0/pow(rho_b[index],5.0/3.0);
            double t59037 = 1.0/sqrt(t59021);
            double t59038 = 1.0/t59029;
            double t59039 = t58878*t59038*(1.0/2.0);
            double t59040 = t59039+1.0;
            double t59041 = 1.0/t59035;
            double t59042 = t58865*t59041*(1.0/2.0);
            double t59043 = t59042+1.0;
            double t59044 = a1p*c*t59020;
            double t59045 = t59044+1.0;
            double t59046 = 1.0/t59043;
            double t59047 = 1.0/(t59035*t59035);
            double t59048 = b4p*t58859*t59036*(2.0/3.0);
            double t59049 = b2p*c*t59030*(1.0/3.0);
            double t59050 = b1p*c*t59030*t59037*(1.0/6.0);
            double t59051 = b3p*c*t59030*t59022*(1.0/2.0);
            double t59052 = t59050+t59051+t59048+t59049;
            double t59053 = t59052*t59045*t59046*t59047;
            double t59054 = log(t59043);
            double t59055 = log(t59040);
            double t59056 = a1f*c*t59020;
            double t59057 = t59056+1.0;
            double t59058 = t58902*t58891*t58877*t58896*t58899;
            double t59059 = Aa*t58914*t58924*t58933*t58926*t58877*t58896*2.0;
            double t59060 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t59061 = 1.0/(t58998*t58998);
            double t59062 = 1.0/t58991;
            double t59063 = 1.0/(t58989*t58989);
            double t59064 = 1.0/(t58994*t58994);
            double t59065 = 1.0/t58989;
            double t59066 = 1.0/(t58991*t58991);
            double t59067 = 1.0/t58994;
            double t59068 = 1.0/t58998;
            double t59070 = a1p*c*c0p*t58890*t58864*(2.0/3.0);
            double t59075 = t58889*t59001*t59002*t59007;
            double t59069 = t58912-t59070+t59008-t59075;
            double t59071 = 1.0/pow(t58852,7.0/3.0);
            double t59072 = 1.0/pow(t58852,8.0/3.0);
            double t59076 = t58911*t58911;
            double t59077 = 1.0/pow(t58854,3.0/2.0);
            double t59078 = b4p*t58859*t59072*(1.0E1/9.0);
            double t59079 = b2p*c*t59071*(4.0/9.0);
            double t59080 = b1p*c*t58904*t59071*(2.0/9.0);
            double t59081 = b3p*c*t58855*t59071*(2.0/3.0);
            double t59082 = b3p*t58904*t58859*t59072*(1.0/1.2E1);
            double t59083 = t59080+t59081+t59082+t59078+t59079-b1p*t58859*t59072*t59077*(1.0/3.6E1);
            double t59084 = t58905*t58870*t58906*t59083;
            double t59085 = 1.0/(t58863*t58863*t58863);
            double t59086 = t59007*t59007;
            double t59087 = 1.0/(t58868*t58868);
            double t59088 = 1.0/(t58863*t58863*t58863*t58863);
            double t59089 = t58870*t58865*t59076*t59087*t59088*(1.0/2.0);
            double t59090 = 1.0/(t58852*t58852*t58852);
            double t59091 = a1p*c*t58911*t58905*t58906*t58864*(2.0/3.0);
            double t59092 = 1.0/(t58852*t58852*t58852*t58852*t58852*t58852);
            double t59093 = t58871*t58872*t58899*4.0;
            double t59094 = t59009+t59093;
            double t59095 = t58930*t58871*t59090*(8.0/3.0);
            double t59096 = 1.0/pow(t58892,2.0/3.0);
            double t59097 = t58898*t59000*t59096*(4.0/9.0);
            double t59098 = 1.0/pow(t58894,2.0/3.0);
            double t59099 = t58898*t59000*t59098*(4.0/9.0);
            double t59100 = t59095+t59097+t59099-t58871*t58927*t59090*(8.0/3.0);
            double t59101 = t59018*t59018;
            double t59102 = t59009-t59093;
            double t59103 = t58902*t58931*t58891*t58877*t58899;
            double t59104 = Aa*t58914*t58924*t58926*t58877*t58896*t59094*2.0;
            double t59105 = Aa*t58931*t58914*t58924*t58933*t58926*t58877*2.0;
            double t59106 = c0f*t58972*t58974*2.0;
            double t59108 = c0p*t58959*t58968*2.0;
            double t59107 = t59106-t59108;
            double t59109 = c0f*t59055*t59057*2.0;
            double t59111 = c0p*t59045*t59054*2.0;
            double t59110 = -t59111+t59109;
            double t59112 = gamma_aa[index]*gcab*t59060*(8.0/3.0);
            double t59113 = gamma_aa[index]*t58975*t58976*t59060*(8.0/3.0);
            double t59114 = t59112+t59113;
            double t59115 = gamma_bb[index]*gcab*t58978*(8.0/3.0);
            double t59116 = gamma_bb[index]*t58975*t58976*t58978*(8.0/3.0);
            double t59117 = t59115+t59116;
            double t59118 = gamma_aa[index]*gcab*t59060*(1.6E1/3.0);
            double t59119 = gamma_aa[index]*gcab*t58975*t58977*t59060*1.6E1;
            double t59120 = gamma_aa[index]*t58983*t58976*t58977*t59060*(1.6E1/3.0);
            double t59121 = gamma_aa[index]*t58975*t58976*t59060*1.6E1;
            double t59122 = t59120+t59121+t59118+t59119;
            double t59123 = gamma_bb[index]*gcab*t58978*(1.6E1/3.0);
            double t59124 = gamma_bb[index]*gcab*t58975*t58977*t58978*1.6E1;
            double t59125 = gamma_bb[index]*t58983*t58976*t58977*t58978*(1.6E1/3.0);
            double t59126 = gamma_bb[index]*t58975*t58976*t58978*1.6E1;
            double t59127 = t59123+t59124+t59125+t59126;
            double t59128 = gamma_aa[index]*gcab*t59060*4.0;
            double t59129 = gamma_aa[index]*gcab*t58975*t58977*t59060*4.0;
            double t59130 = gamma_aa[index]*t58975*t58976*t59060*8.0;
            double t59131 = t59130+t59128+t59129;
            double t59132 = gamma_bb[index]*gcab*t58978*4.0;
            double t59133 = gamma_bb[index]*gcab*t58975*t58977*t58978*4.0;
            double t59134 = gamma_bb[index]*t58975*t58976*t58978*8.0;
            double t59135 = t59132+t59133+t59134;
            v_rho_a_rho_b_[index] = (t58901+t59058+t59059+rho_a[index]*(-t58967+t58971*t58877*(t58967-(1.0/(t58943* \
               t58943)*t58974*(b2f*c*t58944*(1.0/3.0)+b4f*t58950*t58859*(2.0/3.0)+b1f*c*t58951*t58944*(1.0/6.0)+b3f* \
               c*t58944*t58936*(1.0/2.0)))/t58954+a1f*c*c0f*t58944*t58972*(2.0/3.0)-a1p*c*c0p*t58944*t58968*(2.0/ \
               3.0))+a1p*c*c0p*t58944*t58968*(2.0/3.0))+t58852*(t58912+t58999+t59103+t59105+t59019-a1p*c*c0p*t58890* \
               t58864*(2.0/3.0)-t58902*t58913*t58891*t58877*t58896*4.0-t58902*t58877*t58896*t58899*t59069-Aa*t58914* \
               t58924*t58926*t58877*t58896*(t59009-t58871*t58872*t58899*4.0)*2.0-Aa*a1a*c*t58914*t58924*t58933*t58864* \
               t58877*t58896*(2.0/3.0))-c0p*t58959*t58968*2.0-t58971*t58877*t59107)*(ccab1*gamma_bb[index]*gcab*t58978* \
               t59062*(4.0/3.0)-ccab4*t58983*t58984*t59063*t59127-ccab2*t58975*t58977*t59117*t59064-ccab1*gamma_bb[index]* \
               t58975*t58976*t58978*t59066*(4.0/3.0)+ccab2*gamma_bb[index]*t58975*t58976*t58978*t59067*(8.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t58975*t58977*t58978*t59068*4.0+ccab4*gamma_bb[index]*t58983*t58976*t58977* \
               t58978*t59065*(1.6E1/3.0)-ccab3*gcab*t58975*t58976*t58977*t59061*t59135)+(ccab0+ccab1*gcab*t58976* \
               t59062+ccab4*t58983*t58984*t59065+ccab2*t58975*t58977*t59067+ccab3*gcab*t58975*t58976*t58977*t59068) \
               *(-t59103+t59104-t59105+t58852*(t59091+t59084+t59089-t58905*t58870*t59076*t59085*2.0+t58902*t58931* \
               t58877*t58899*(t58912-t59070+t59008-t59075)+t58902*t58877*t58899*(t59010-t59073)*(t58912-t59070+t59008- \
               t59075)-a1p*c*c0p*t58890*t59071*(8.0/9.0)-t58902*t58877*t58896*t58899*(t59091+t59084+t59089-t58905* \
               t58870*t59076*t59085*2.0+1.0/(t58883*t58883*t58883)*t58889*t59001*t59086*2.0-t58889*t59001*t59002* \
               (b2f*c*t59071*(4.0/9.0)+b4f*t58859*t59072*(1.0E1/9.0)+b1f*c*t58904*t59071*(2.0/9.0)+b3f*c*t58855*t59071* \
               (2.0/3.0)-b1f*t58859*t59072*t59077*(1.0/3.6E1)+b3f*t58904*t58859*t59072*(1.0/1.2E1))-1.0/(t58883*t58883* \
               t58883*t58883)*1.0/(t58886*t58886)*t58878*t58889*t59086*(1.0/2.0)+a1f*c*c0f*t58887*t59071*(8.0/9.0) \
               -a1p*c*c0p*t58890*t59071*(8.0/9.0)-a1f*c*t58864*t59001*t59002*t59007*(2.0/3.0))+t58902*t58913*t58931* \
               t58891*t58877*4.0+t58872*t58891*t58877*t58896*t58899*1.2E1+t58902*t58891*t58877*t58899*t59100-t58902* \
               t58913*t58877*t58896*t59069*8.0-t58902*t58891*t58877*t58896*t59092*2.0E1+t58902*t58913*t58891*t58877* \
               (t59010-t59073)*4.0+t58931*t58871*t58872*t58891*t58877*t58899*4.0-t58871*t58872*t58891*t58877*t58899* \
               t59011*4.0+Aa*t58914*t58924*t58933*t58926*t58877*t59100*2.0+Aa*t58931*t58914*t58924*t58926*t58877* \
               t59094*2.0+Aa*t58914*t58924*t58926*t58877*t59102*(t59010-t59073)*2.0+Aa*t58914*t58924*t58926*t58877* \
               t58896*(t58872*t58899*1.2E1-t58902*t59092*2.0E1)*2.0-t58931*t58914*t58933*t58926*t58877*t59012*t59013* \
               t59018-t58914*t58933*t58926*t58877*t59011*t59012*t59013*t59018+t58914*t58926*t58877*t58896*t59012* \
               t59102*t59013*t59018+t58914*t58926*t58877*t58896*t59012*t59013*t59018*t59094-1.0/(t58920*t58920*t58920) \
               *t58914*t58933*t58926*t58877*t58896*t59101*t59012*2.0+t58914*t58933*t58926*t58877*t58896*t59012*t59013* \
               (b2a*c*t59071*(4.0/9.0)+b4a*t58859*t59072*(1.0E1/9.0)+b1a*c*t58904*t59071*(2.0/9.0)+b3a*c*t58855*t59071* \
               (2.0/3.0)-b1a*t58859*t59072*t59077*(1.0/3.6E1)+b3a*t58904*t58859*t59072*(1.0/1.2E1))+Aa*a1a*c*t58931* \
               t58914*t58924*t58933*t58864*t58877*(2.0/3.0)-Aa*a1a*c*t58914*t58924*t58864*t58877*t58896*t59102*(2.0/ \
               3.0)-Aa*a1a*c*t58914*t58924*t58933*t58877*t58896*t59071*(8.0/9.0)-Aa*a1a*c*t58914*t58924*t58864*t58877* \
               t58896*t59094*(2.0/3.0)+1.0/(t58920*t58920*t58920*t58920)*t58914*1.0/(t58923*t58923)*t58915*t58933* \
               t58926*t58877*t58896*t59101*(1.0/2.0)+Aa*a1a*c*t58914*t58924*t58933*t58864*t58877*(t59010-t59073)* \
               (2.0/3.0)+a1a*c*t58914*t58933*t58864*t58877*t58896*t59012*t59013*t59018*(2.0/3.0))-t58911*t58905*t58870* \
               t58906*2.0+t58902*t58877*t58896*t58899*(t58912-t59070+t59008-t59075)*2.0+a1p*c*c0p*t58890*t58864*(4.0/ \
               3.0)+t58902*t58913*t58891*t58877*t58896*8.0-t58902*t58891*t58877*t58899*t59011-Aa*t58914*t58924*t58933* \
               t58926*t58877*t59011*2.0+Aa*t58914*t58924*t58926*t58877*t58896*(t59009-t59093)*2.0-t58914*t58933*t58926* \
               t58877*t58896*t59012*t59013*t59018*2.0+Aa*a1a*c*t58914*t58924*t58933*t58864*t58877*t58896*(4.0/3.0) \
               )-(rho_b[index]*(t59111+t58971*t58877*t59110)+rho_a[index]*(t59108+t58971*t58877*t59107)-t58852*(t58901+ \
               t59058+t59059))*(ccab4*t58983*t58984*t59063*(gamma_aa[index]*gamma_bb[index]*t58975*t58978*t59060* \
               (6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t58983*t58977*t58978*t59060*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t58975*t58976*t58978*t59060*(1.28E2/3.0))-ccab2*t58975*1.0/(t58994*t58994*t58994) \
               *t58977*t59114*t59117*2.0-ccab4*t58983*t58984*1.0/(t58989*t58989*t58989)*t59122*t59127*2.0+ccab3*gcab* \
               t58975*t58976*t58977*t59061*(gamma_aa[index]*gamma_bb[index]*t58975*t58978*t59060*(3.2E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t58975*t58976*t58978*t59060*(3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]* \
               t58975*t58978*t59060*t59066*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t58975*t58978*t59060* \
               t59067*(3.2E1/9.0)+ccab2*gamma_bb[index]*t58975*t58976*t58978*t59114*t59064*(8.0/3.0)+ccab2*gamma_aa[index]* \
               t58975*t58976*t59060*t59117*t59064*(8.0/3.0)-ccab3*gcab*t58975*t58976*t58977*1.0/(t58998*t58998*t58998) \
               *t59131*t59135*2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t58983*t58977*t58978*t59060*t59064*(3.2E1/ \
               9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t58983*t58977*t58978*t59060*t59065*(6.4E1/3.0)+ccab3*gamma_bb[index]* \
               gcab*t58975*t58977*t58978*t59131*t59061*4.0+ccab3*gamma_aa[index]*gcab*t58975*t58977*t59060*t59061* \
               t59135*4.0+ccab4*gamma_bb[index]*t58983*t58976*t58977*t58978*t59122*t59063*(1.6E1/3.0)+ccab4*gamma_aa[index]* \
               t58983*t58976*t58977*t59060*t59063*t59127*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t58975* \
               t58976*t58978*t59060*t59068*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*1.0/(t58991*t58991* \
               t58991)*t58975*t58976*t58978*t59060*(3.2E1/9.0))+(t58901+t59058+t59059-t58852*(-t58912+t58999+t59104+ \
               t59070-t59019+t58902*t58913*t58891*t58877*t58896*4.0-t58902*t58891*t58877*t58899*t59011+t58902*t58877* \
               t58896*t58899*t59069-Aa*t58914*t58924*t58933*t58926*t58877*t59011*2.0+Aa*a1a*c*t58914*t58924*t58933* \
               t58864*t58877*t58896*(2.0/3.0))+rho_b[index]*(-t59053+t58971*t58877*(t59053-(1.0/(t59029*t59029)*t59057* \
               (b2f*c*t59030*(1.0/3.0)+b4f*t58859*t59036*(2.0/3.0)+b1f*c*t59030*t59037*(1.0/6.0)+b3f*c*t59030*t59022* \
               (1.0/2.0)))/t59040+a1f*c*c0f*t59030*t59055*(2.0/3.0)-a1p*c*c0p*t59030*t59054*(2.0/3.0))+a1p*c*c0p* \
               t59030*t59054*(2.0/3.0))-c0p*t59045*t59054*2.0-t58971*t58877*t59110)*(ccab1*gamma_aa[index]*gcab*t59060* \
               t59062*(4.0/3.0)-ccab4*t58983*t58984*t59122*t59063-ccab2*t58975*t58977*t59114*t59064-ccab1*gamma_aa[index]* \
               t58975*t58976*t59060*t59066*(4.0/3.0)+ccab2*gamma_aa[index]*t58975*t58976*t59060*t59067*(8.0/3.0)+ \
               ccab3*gamma_aa[index]*gcab*t58975*t58977*t59060*t59068*4.0+ccab4*gamma_aa[index]*t58983*t58976*t58977* \
               t59060*t59065*(1.6E1/3.0)-ccab3*gcab*t58975*t58976*t58977*t59131*t59061);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t59137 = rho_a[index]+rho_b[index];
            double t59138 = 1.0/pow(t59137,1.0/3.0);
            double t59139 = c*t59138;
            double t59140 = sqrt(t59139);
            double t59141 = b1p*t59140;
            double t59142 = pow(t59139,3.0/2.0);
            double t59143 = b3p*t59142;
            double t59144 = c*c;
            double t59145 = 1.0/pow(t59137,2.0/3.0);
            double t59146 = b4p*t59144*t59145;
            double t59147 = b2p*c*t59138;
            double t59148 = t59141+t59143+t59146+t59147;
            double t59149 = 1.0/pow(t59137,4.0/3.0);
            double t59150 = 1.0/c0p;
            double t59151 = 1.0/t59148;
            double t59152 = t59150*t59151*(1.0/2.0);
            double t59153 = t59152+1.0;
            double t59154 = a1p*c*t59138;
            double t59155 = t59154+1.0;
            double t59156 = rho_a[index]-rho_b[index];
            double t59157 = t59156*t59156;
            double t59158 = 1.0/t59137;
            double t59159 = t59156*t59158;
            double t59160 = two_13*2.0;
            double t59161 = t59160-2.0;
            double t59162 = 1.0/t59161;
            double t59163 = 1.0/c0f;
            double t59164 = b1f*t59140;
            double t59165 = b3f*t59142;
            double t59166 = b4f*t59144*t59145;
            double t59167 = b2f*c*t59138;
            double t59168 = t59164+t59165+t59166+t59167;
            double t59169 = 1.0/t59168;
            double t59170 = t59163*t59169*(1.0/2.0);
            double t59171 = t59170+1.0;
            double t59172 = log(t59171);
            double t59173 = a1f*c*t59138;
            double t59174 = t59173+1.0;
            double t59175 = log(t59153);
            double t59186 = c0f*t59172*t59174*2.0;
            double t59187 = c0p*t59155*t59175*2.0;
            double t59176 = t59186-t59187;
            double t59177 = t59159+1.0;
            double t59178 = pow(t59177,4.0/3.0);
            double t59179 = -t59159+1.0;
            double t59180 = pow(t59179,4.0/3.0);
            double t59181 = t59180+t59178-2.0;
            double t59182 = 1.0/(t59137*t59137);
            double t59183 = t59182*t59156;
            double t59184 = t59183+t59158;
            double t59185 = 1.0/(t59137*t59137*t59137*t59137);
            double t59188 = t59157*t59157;
            double t59189 = 1.0/pow(t59137,5.0/3.0);
            double t59190 = 1.0/sqrt(t59139);
            double t59191 = 1.0/t59153;
            double t59192 = 1.0/(t59148*t59148);
            double t59193 = b4p*t59144*t59189*(2.0/3.0);
            double t59194 = b2p*c*t59149*(1.0/3.0);
            double t59195 = b1p*c*t59190*t59149*(1.0/6.0);
            double t59196 = b3p*c*t59140*t59149*(1.0/2.0);
            double t59197 = t59193+t59194+t59195+t59196;
            double t59198 = 1.0/(t59137*t59137*t59137*t59137*t59137);
            double t59199 = 1.0/d2fz0;
            double t59200 = 1.0/Aa;
            double t59201 = b1a*t59140;
            double t59202 = b3a*t59142;
            double t59203 = b4a*t59144*t59145;
            double t59204 = b2a*c*t59138;
            double t59205 = t59201+t59202+t59203+t59204;
            double t59206 = 1.0/t59205;
            double t59207 = t59200*t59206*(1.0/2.0);
            double t59208 = t59207+1.0;
            double t59209 = log(t59208);
            double t59210 = a1a*c*t59138;
            double t59211 = t59210+1.0;
            double t59212 = pow(t59177,1.0/3.0);
            double t59213 = t59212*t59184*(4.0/3.0);
            double t59214 = pow(t59179,1.0/3.0);
            double t59290 = t59214*t59184*(4.0/3.0);
            double t59215 = t59213-t59290;
            double t59216 = t59185*t59188;
            double t59217 = t59216-1.0;
            double t59218 = 1.0/pow(rho_b[index],1.0/3.0);
            double t59219 = c*t59218;
            double t59220 = sqrt(t59219);
            double t59221 = b1f*t59220;
            double t59222 = pow(t59219,3.0/2.0);
            double t59223 = b3f*t59222;
            double t59224 = 1.0/pow(rho_b[index],2.0/3.0);
            double t59225 = b4f*t59224*t59144;
            double t59226 = b2f*c*t59218;
            double t59227 = t59221+t59223+t59225+t59226;
            double t59228 = 1.0/pow(rho_b[index],4.0/3.0);
            double t59229 = b1p*t59220;
            double t59230 = b3p*t59222;
            double t59231 = b4p*t59224*t59144;
            double t59232 = b2p*c*t59218;
            double t59233 = t59230+t59231+t59232+t59229;
            double t59234 = 1.0/pow(rho_b[index],5.0/3.0);
            double t59235 = 1.0/sqrt(t59219);
            double t59236 = 1.0/t59227;
            double t59237 = t59163*t59236*(1.0/2.0);
            double t59238 = t59237+1.0;
            double t59239 = 1.0/t59233;
            double t59240 = t59150*t59239*(1.0/2.0);
            double t59241 = t59240+1.0;
            double t59242 = a1p*c*t59218;
            double t59243 = t59242+1.0;
            double t59244 = 1.0/t59241;
            double t59245 = 1.0/(t59233*t59233);
            double t59246 = b4p*t59144*t59234*(2.0/3.0);
            double t59247 = b2p*c*t59228*(1.0/3.0);
            double t59248 = b1p*c*t59235*t59228*(1.0/6.0);
            double t59249 = b3p*c*t59220*t59228*(1.0/2.0);
            double t59250 = t59246+t59247+t59248+t59249;
            double t59251 = t59250*t59243*t59244*t59245;
            double t59252 = log(t59241);
            double t59253 = pow(2.0,1.0/3.0);
            double t59254 = t59253*2.0;
            double t59255 = t59254-2.0;
            double t59256 = log(t59238);
            double t59257 = a1f*c*t59218;
            double t59258 = t59257+1.0;
            double t59259 = gcab*gcab;
            double t59263 = 1.0/pow(rho_a[index],8.0/3.0);
            double t59264 = gamma_aa[index]*t59263*(1.0/2.0);
            double t59265 = 1.0/pow(rho_b[index],8.0/3.0);
            double t59266 = gamma_bb[index]*t59265*(1.0/2.0);
            double t59260 = t59264+t59266;
            double t59261 = t59260*t59260;
            double t59262 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t59267 = t59259*t59259;
            double t59268 = t59261*t59261;
            double t59269 = t59261*t59259*6.0;
            double t59270 = gcab*t59260*t59261*t59259*4.0;
            double t59271 = t59267*t59268;
            double t59272 = gcab*t59260*4.0;
            double t59273 = t59270+t59271+t59272+t59269+1.0;
            double t59274 = gcab*t59260;
            double t59275 = t59274+1.0;
            double t59276 = t59261*t59259;
            double t59277 = gcab*t59260*2.0;
            double t59278 = t59276+t59277+1.0;
            double t59279 = t59261*t59259*3.0;
            double t59280 = gcab*t59260*t59261*t59259;
            double t59281 = gcab*t59260*3.0;
            double t59282 = t59280+t59281+t59279+1.0;
            double t59283 = a1p*c*c0p*t59175*t59149*(2.0/3.0);
            double t59284 = 1.0/t59278;
            double t59285 = 1.0/t59282;
            double t59286 = 1.0/t59275;
            double t59287 = 1.0/t59273;
            double t59288 = 1.0/pow(t59137,7.0/3.0);
            double t59289 = 1.0/pow(t59137,8.0/3.0);
            double t59291 = 1.0/t59171;
            double t59292 = 1.0/(t59168*t59168);
            double t59293 = b4f*t59144*t59189*(2.0/3.0);
            double t59294 = b2f*c*t59149*(1.0/3.0);
            double t59295 = b1f*c*t59190*t59149*(1.0/6.0);
            double t59296 = b3f*c*t59140*t59149*(1.0/2.0);
            double t59297 = t59293+t59294+t59295+t59296;
            double t59298 = t59174*t59291*t59292*t59297;
            double t59300 = t59155*t59191*t59192*t59197;
            double t59301 = a1f*c*c0f*t59172*t59149*(2.0/3.0);
            double t59299 = -t59300-t59301+t59283+t59298;
            double t59302 = t59197*t59197;
            double t59303 = 1.0/pow(t59139,3.0/2.0);
            double t59304 = b4p*t59144*t59289*(1.0E1/9.0);
            double t59305 = b2p*c*t59288*(4.0/9.0);
            double t59306 = b1p*c*t59190*t59288*(2.0/9.0);
            double t59307 = b3p*c*t59140*t59288*(2.0/3.0);
            double t59308 = b3p*t59144*t59190*t59289*(1.0/1.2E1);
            double t59309 = t59304+t59305+t59306+t59307+t59308-b1p*t59303*t59144*t59289*(1.0/3.6E1);
            double t59310 = 1.0/(t59148*t59148*t59148);
            double t59311 = t59310*t59302*t59155*t59191*2.0;
            double t59312 = t59297*t59297;
            double t59313 = 1.0/(t59153*t59153);
            double t59314 = 1.0/(t59148*t59148*t59148*t59148);
            double t59315 = t59182*2.0;
            double t59316 = 1.0/(t59137*t59137*t59137);
            double t59317 = t59316*t59156*2.0;
            double t59318 = t59315+t59317;
            double t59319 = t59184*t59184;
            double t59320 = a1p*c*c0p*t59175*t59288*(8.0/9.0);
            double t59321 = 1.0/(t59137*t59137*t59137*t59137*t59137*t59137);
            double t59322 = t59156*t59157*t59185*4.0;
            double t59323 = t59188*t59198*4.0;
            double t59324 = t59322+t59323;
            double t59325 = t59212*t59318*(4.0/3.0);
            double t59326 = 1.0/pow(t59177,2.0/3.0);
            double t59327 = t59326*t59319*(4.0/9.0);
            double t59328 = 1.0/pow(t59179,2.0/3.0);
            double t59329 = t59319*t59328*(4.0/9.0);
            double t59330 = t59325+t59327+t59329-t59214*t59318*(4.0/3.0);
            double t59331 = 1.0/t59208;
            double t59332 = 1.0/(t59205*t59205);
            double t59333 = b4a*t59144*t59189*(2.0/3.0);
            double t59334 = b2a*c*t59149*(1.0/3.0);
            double t59335 = b1a*c*t59190*t59149*(1.0/6.0);
            double t59336 = b3a*c*t59140*t59149*(1.0/2.0);
            double t59337 = t59333+t59334+t59335+t59336;
            double t59338 = t59337*t59337;
            double t59339 = 1.0/t59238;
            double t59340 = b4f*t59144*t59234*(2.0/3.0);
            double t59341 = b2f*c*t59228*(1.0/3.0);
            double t59342 = b1f*c*t59235*t59228*(1.0/6.0);
            double t59343 = b3f*c*t59220*t59228*(1.0/2.0);
            double t59344 = t59340+t59341+t59342+t59343;
            double t59345 = 1.0/(t59227*t59227);
            double t59346 = 1.0/pow(rho_b[index],7.0/3.0);
            double t59347 = 1.0/pow(t59219,3.0/2.0);
            double t59348 = t59344*t59344;
            double t59349 = t59250*t59250;
            double t59350 = 1.0/(t59233*t59233*t59233);
            double t59351 = t59350*t59243*t59244*t59349*2.0;
            double t59352 = b4p*t59144*t59265*(1.0E1/9.0);
            double t59353 = b2p*c*t59346*(4.0/9.0);
            double t59354 = b3p*t59144*t59235*t59265*(1.0/1.2E1);
            double t59355 = b1p*c*t59235*t59346*(2.0/9.0);
            double t59356 = b3p*c*t59220*t59346*(2.0/3.0);
            double t59509 = b1p*t59144*t59265*t59347*(1.0/3.6E1);
            double t59357 = t59352+t59353+t59354+t59355+t59356-t59509;
            double t59358 = 1.0/(t59241*t59241);
            double t59359 = 1.0/(t59233*t59233*t59233*t59233);
            double t59360 = a1p*c*c0p*t59252*t59346*(8.0/9.0);
            double t59361 = a1f*c*c0f*t59228*t59256*(2.0/3.0);
            double t59362 = a1p*c*c0p*t59252*t59228*(2.0/3.0);
            double t59434 = t59344*t59345*t59258*t59339;
            double t59363 = t59251+t59361-t59362-t59434;
            double t59364 = gamma_bb[index]*gamma_bb[index];
            double t59365 = gcaa*gcaa;
            double t59366 = t59364*t59364;
            double t59367 = t59365*t59365;
            double t59368 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t59369 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t59370 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t59371 = 1.0/pow(rho_a[index],1.0/3.0);
            double t59372 = c*t59371;
            double t59373 = sqrt(t59372);
            double t59374 = pow(t59372,3.0/2.0);
            double t59375 = 1.0/pow(rho_a[index],2.0/3.0);
            double t59376 = b1p*t59373;
            double t59377 = b3p*t59374;
            double t59378 = b4p*t59144*t59375;
            double t59379 = b2p*c*t59371;
            double t59380 = t59376+t59377+t59378+t59379;
            double t59381 = 1.0/t59380;
            double t59382 = t59150*t59381*(1.0/2.0);
            double t59383 = t59382+1.0;
            double t59384 = log(t59383);
            double t59385 = a1p*c*t59371;
            double t59386 = t59385+1.0;
            double t59387 = c0p*t59384*t59386*2.0;
            double t59388 = c0f*t59256*t59258*2.0;
            double t59390 = c0p*t59243*t59252*2.0;
            double t59389 = -t59390+t59388;
            double t59391 = t59162*t59181*t59176*t59185*t59188;
            double t59392 = Aa*t59211*t59162*t59181*t59217*t59209*t59199*2.0;
            double t59393 = gamma_bb[index]*gcab*t59262*(1.6E1/3.0);
            double t59394 = gamma_bb[index]*gcab*t59261*t59262*t59259*1.6E1;
            double t59395 = gamma_bb[index]*t59260*t59261*t59262*t59267*(1.6E1/3.0);
            double t59396 = gamma_bb[index]*t59260*t59262*t59259*1.6E1;
            double t59397 = t59393+t59394+t59395+t59396;
            double t59398 = 1.0/(t59275*t59275);
            double t59399 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t59400 = gamma_bb[index]*gcab*t59262*(8.0/3.0);
            double t59401 = gamma_bb[index]*t59260*t59262*t59259*(8.0/3.0);
            double t59402 = t59400+t59401;
            double t59403 = 1.0/(t59282*t59282);
            double t59404 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t59405 = 1.0/(t59273*t59273);
            double t59406 = 1.0/(t59278*t59278);
            double t59407 = gamma_bb[index]*gcab*t59262*4.0;
            double t59408 = gamma_bb[index]*gcab*t59261*t59262*t59259*4.0;
            double t59409 = gamma_bb[index]*t59260*t59262*t59259*8.0;
            double t59410 = t59407+t59408+t59409;
            double t59411 = t59162*t59255*t59389;
            double t59412 = t59411+t59390;
            double t59413 = gamma_bb[index]*gcaa*t59265*4.0;
            double t59414 = gamma_bb[index]*gcaa*t59364*t59365*t59369*4.0;
            double t59415 = t59370*t59364*t59365*6.0;
            double t59416 = t59366*t59367*t59368;
            double t59417 = t59413+t59414+t59415+t59416+1.0;
            double t59418 = 1.0/t59417;
            double t59419 = gamma_bb[index]*gcaa*t59265;
            double t59420 = t59419+1.0;
            double t59421 = 1.0/t59420;
            double t59422 = gamma_bb[index]*gcaa*t59265*3.0;
            double t59423 = gamma_bb[index]*gcaa*t59364*t59365*t59369;
            double t59424 = t59370*t59364*t59365*3.0;
            double t59425 = t59422+t59423+t59424+1.0;
            double t59426 = 1.0/t59425;
            double t59427 = gamma_bb[index]*gcaa*t59265*2.0;
            double t59428 = t59370*t59364*t59365;
            double t59429 = t59427+t59428+1.0;
            double t59430 = 1.0/t59429;
            double t59431 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t59432 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t59433 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t59435 = t59162*t59255*t59363;
            double t59436 = ccaa4*t59433*t59418*t59366*t59367*(3.2E1/3.0);
            double t59437 = ccaa1*gamma_bb[index]*gcaa*t59421*t59262*(8.0/3.0);
            double t59438 = ccaa3*gamma_bb[index]*gcaa*t59432*t59426*t59364*t59365*8.0;
            double t59439 = ccaa2*t59430*t59431*t59364*t59365*(1.6E1/3.0);
            double t59440 = 1.0/(t59420*t59420);
            double t59441 = gamma_bb[index]*gcaa*t59262*8.0;
            double t59442 = gamma_bb[index]*gcaa*t59432*t59364*t59365*8.0;
            double t59443 = t59431*t59364*t59365*1.6E1;
            double t59444 = t59441+t59442+t59443;
            double t59445 = 1.0/(t59425*t59425);
            double t59446 = gamma_bb[index]*gcaa*t59262*(3.2E1/3.0);
            double t59447 = gamma_bb[index]*gcaa*t59432*t59364*t59365*3.2E1;
            double t59448 = t59431*t59364*t59365*3.2E1;
            double t59449 = t59433*t59366*t59367*(3.2E1/3.0);
            double t59450 = t59446+t59447+t59448+t59449;
            double t59451 = 1.0/(t59417*t59417);
            double t59452 = gamma_bb[index]*gcaa*t59262*(1.6E1/3.0);
            double t59453 = t59431*t59364*t59365*(1.6E1/3.0);
            double t59454 = t59452+t59453;
            double t59455 = 1.0/(t59429*t59429);
            double t59456 = t59436+t59437+t59438+t59439-ccaa1*t59431*t59440*t59364*t59365*(8.0/3.0)-ccaa2*t59370* \
               t59364*t59454*t59365*t59455-ccaa4*t59450*t59451*t59366*t59367*t59368-ccaa3*gamma_bb[index]*gcaa*t59444* \
               t59364*t59445*t59365*t59369;
            double t59457 = -t59251+t59362+t59435;
            double t59458 = gx*gx;
            double t59459 = t59458*t59458;
            double t59460 = 1.0/pow(rho_b[index],1.0E1);
            double t59461 = gamma_bb[index]*gx*t59265;
            double t59462 = t59461+1.0;
            double t59482 = gamma_bb[index]*gx*t59262*(3.2E1/3.0);
            double t59483 = gamma_bb[index]*gx*t59432*t59364*t59458*3.2E1;
            double t59484 = t59431*t59364*t59458*3.2E1;
            double t59485 = t59433*t59366*t59459*(3.2E1/3.0);
            double t59463 = t59482+t59483+t59484+t59485;
            double t59464 = gamma_bb[index]*gx*t59265*4.0;
            double t59465 = gamma_bb[index]*gx*t59364*t59458*t59369*4.0;
            double t59466 = t59370*t59364*t59458*6.0;
            double t59467 = t59366*t59368*t59459;
            double t59468 = t59464+t59465+t59466+t59467+1.0;
            double t59488 = gamma_bb[index]*gx*t59262*(1.6E1/3.0);
            double t59489 = t59431*t59364*t59458*(1.6E1/3.0);
            double t59469 = t59488+t59489;
            double t59470 = gamma_bb[index]*gx*t59265*2.0;
            double t59471 = t59370*t59364*t59458;
            double t59472 = t59470+t59471+1.0;
            double t59473 = gamma_bb[index]*gx*t59265*3.0;
            double t59474 = gamma_bb[index]*gx*t59364*t59458*t59369;
            double t59475 = t59370*t59364*t59458*3.0;
            double t59476 = t59473+t59474+t59475+1.0;
            double t59477 = 1.0/(t59476*t59476);
            double t59478 = gamma_bb[index]*gx*t59262*8.0;
            double t59479 = gamma_bb[index]*gx*t59432*t59364*t59458*8.0;
            double t59480 = t59431*t59364*t59458*1.6E1;
            double t59481 = t59480+t59478+t59479;
            double t59486 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t59487 = 1.0/(t59468*t59468);
            double t59490 = 1.0/(t59472*t59472);
            double t59491 = 1.0/t59468;
            double t59492 = 1.0/t59462;
            double t59493 = 1.0/t59476;
            double t59494 = 1.0/t59472;
            double t59495 = 1.0/(t59462*t59462);
            double t59496 = ccaa4*t59418*t59366*t59367*t59368;
            double t59497 = ccaa1*gamma_bb[index]*gcaa*t59421*t59265;
            double t59498 = ccaa3*gamma_bb[index]*gcaa*t59426*t59364*t59365*t59369;
            double t59499 = ccaa2*t59430*t59370*t59364*t59365;
            double t59500 = ccaa0+t59496+t59497+t59498+t59499;
            double t59501 = 1.0/(t59227*t59227*t59227);
            double t59502 = b4f*t59144*t59265*(1.0E1/9.0);
            double t59503 = b2f*c*t59346*(4.0/9.0);
            double t59504 = b3f*t59144*t59235*t59265*(1.0/1.2E1);
            double t59505 = b1f*c*t59235*t59346*(2.0/9.0);
            double t59506 = b3f*c*t59220*t59346*(2.0/3.0);
            double t59507 = t59502+t59503+t59504+t59505+t59506-b1f*t59144*t59265*t59347*(1.0/3.6E1);
            double t59508 = t59345*t59507*t59258*t59339;
            double t59510 = t59243*t59244*t59245*t59357;
            double t59511 = 1.0/(t59238*t59238);
            double t59512 = 1.0/(t59227*t59227*t59227*t59227);
            double t59513 = t59511*t59512*t59163*t59258*t59348*(1.0/2.0);
            double t59514 = t59150*t59243*t59349*t59358*t59359*(1.0/2.0);
            double t59515 = a1f*c*t59344*t59228*t59345*t59339*(2.0/3.0);
            double t59516 = a1p*c*t59250*t59244*t59245*t59228*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t59260*t59286+ccab2*t59261*t59284*t59259+ccab4*t59267*t59268* \
               t59287+ccab3*gcab*t59260*t59261*t59285*t59259)*(-rho_b[index]*(t59510-t59351-t59360+t59514+t59516+ \
               t59162*t59255*(t59351+t59360+t59513+t59515+t59508-t59243*t59244*t59245*t59357-t59501*t59258*t59339* \
               t59348*2.0-a1f*c*c0f*t59256*t59346*(8.0/9.0)-t59150*t59243*t59349*t59358*t59359*(1.0/2.0)-a1p*c*t59250* \
               t59244*t59245*t59228*(2.0/3.0)))-t59137*(t59311+t59320-t59155*t59191*t59192*t59309-t59162*t59181*t59185* \
               t59188*(t59311+t59320-t59155*t59191*t59192*t59309-t59312*t59174*t59291*1.0/(t59168*t59168*t59168)* \
               2.0+t59174*t59291*t59292*(b2f*c*t59288*(4.0/9.0)+b4f*t59144*t59289*(1.0E1/9.0)+b1f*c*t59190*t59288* \
               (2.0/9.0)+b3f*c*t59140*t59288*(2.0/3.0)-b1f*t59303*t59144*t59289*(1.0/3.6E1)+b3f*t59144*t59190*t59289* \
               (1.0/1.2E1))+t59312*1.0/(t59171*t59171)*t59163*t59174*1.0/(t59168*t59168*t59168*t59168)*(1.0/2.0)- \
               a1f*c*c0f*t59172*t59288*(8.0/9.0)-t59302*t59150*t59313*t59314*t59155*(1.0/2.0)+a1f*c*t59291*t59292* \
               t59149*t59297*(2.0/3.0)-a1p*c*t59191*t59192*t59149*t59197*(2.0/3.0))-t59302*t59150*t59313*t59314*t59155* \
               (1.0/2.0)+t59321*t59162*t59181*t59176*t59188*2.0E1+t59330*t59162*t59176*t59185*t59188+t59162*t59181* \
               t59157*t59176*t59185*1.2E1+t59215*t59162*t59176*t59188*t59198*8.0-t59215*t59162*t59185*t59188*t59299* \
               2.0-t59162*t59181*t59188*t59198*t59299*8.0+t59215*t59162*t59156*t59157*t59176*t59185*8.0+t59162*t59181* \
               t59156*t59157*t59176*t59198*3.2E1-t59162*t59181*t59156*t59157*t59185*t59299*8.0-a1p*c*t59191*t59192* \
               t59149*t59197*(2.0/3.0)+Aa*t59211*t59330*t59162*t59217*t59209*t59199*2.0+Aa*t59211*t59215*t59162*t59324* \
               t59209*t59199*4.0+Aa*t59211*t59162*t59181*t59209*t59199*(t59321*t59188*2.0E1+t59157*t59185*1.2E1+t59156* \
               t59157*t59198*3.2E1)*2.0-t59211*t59331*t59215*t59332*t59162*t59217*t59337*t59199*2.0-t59211*t59331* \
               t59332*t59162*t59324*t59181*t59337*t59199*2.0+t59211*1.0/(t59205*t59205*t59205)*t59331*t59162*t59181* \
               t59217*t59338*t59199*2.0-t59211*t59331*t59332*t59162*t59181*t59217*t59199*(b2a*c*t59288*(4.0/9.0)+ \
               b4a*t59144*t59289*(1.0E1/9.0)+b1a*c*t59190*t59288*(2.0/9.0)+b3a*c*t59140*t59288*(2.0/3.0)-b1a*t59303* \
               t59144*t59289*(1.0/3.6E1)+b3a*t59144*t59190*t59289*(1.0/1.2E1))+Aa*a1a*c*t59215*t59162*t59217*t59209* \
               t59149*t59199*(4.0/3.0)+Aa*a1a*c*t59162*t59324*t59181*t59209*t59149*t59199*(4.0/3.0)+Aa*a1a*c*t59162* \
               t59181*t59217*t59209*t59288*t59199*(8.0/9.0)-t59200*t59211*1.0/(t59205*t59205*t59205*t59205)*t59162* \
               t59181*1.0/(t59208*t59208)*t59217*t59338*t59199*(1.0/2.0)-a1a*c*t59331*t59332*t59162*t59181*t59217* \
               t59337*t59149*t59199*(2.0/3.0))-t59162*t59255*t59363*2.0+t59250*t59243*t59244*t59245*2.0-t59155*t59191* \
               t59192*t59197*2.0-a1p*c*c0p*t59252*t59228*(4.0/3.0)+a1p*c*c0p*t59175*t59149*(4.0/3.0)+t59215*t59162* \
               t59176*t59185*t59188*2.0+t59162*t59181*t59176*t59188*t59198*8.0-t59162*t59181*t59185*t59188*t59299* \
               2.0+t59162*t59181*t59156*t59157*t59176*t59185*8.0+Aa*t59211*t59215*t59162*t59217*t59209*t59199*4.0+ \
               Aa*t59211*t59162*t59324*t59181*t59209*t59199*4.0-t59211*t59331*t59332*t59162*t59181*t59217*t59337* \
               t59199*2.0+Aa*a1a*c*t59162*t59181*t59217*t59209*t59149*t59199*(4.0/3.0))+(rho_b[index]*t59412+rho_a[index]* \
               (t59387-t59162*t59255*(t59387-c0f*log((t59163*(1.0/2.0))/(b1f*t59373+b3f*t59374+b2f*c*t59371+b4f*t59144* \
               t59375)+1.0)*(a1f*c*t59371+1.0)*2.0))-t59137*(t59391+t59392+t59187))*(-ccab2*t59261*t59406*t59259* \
               (gamma_bb[index]*gcab*t59404*(8.8E1/9.0)+t59364*t59259*t59399*(3.2E1/9.0)+gamma_bb[index]*t59260*t59404* \
               t59259*(8.8E1/9.0))+ccab2*(t59402*t59402)*t59261*t59259*1.0/(t59278*t59278*t59278)*2.0+ccab4*1.0/(t59273* \
               t59273*t59273)*t59267*t59268*(t59397*t59397)*2.0+ccab1*gamma_bb[index]*gcab*t59404*t59286*(4.4E1/9.0) \
               +ccab2*t59364*t59284*t59259*t59399*(3.2E1/9.0)-ccab1*t59364*t59259*t59398*t59399*(3.2E1/9.0)-ccab4* \
               t59405*t59267*t59268*(gamma_bb[index]*gcab*t59404*(1.76E2/9.0)+t59364*t59259*t59399*(6.4E1/3.0)+gamma_bb[index]* \
               t59260*t59404*t59259*(1.76E2/3.0)+t59261*t59364*t59267*t59399*(6.4E1/3.0)+gamma_bb[index]*gcab*t59404* \
               t59261*t59259*(1.76E2/3.0)+gamma_bb[index]*t59260*t59404*t59261*t59267*(1.76E2/9.0)+gcab*t59260*t59364* \
               t59259*t59399*(1.28E2/3.0))+ccab4*t59261*t59364*t59267*t59287*t59399*(6.4E1/3.0)+ccab2*gamma_bb[index]* \
               t59260*t59404*t59284*t59259*(8.8E1/9.0)-ccab1*gamma_bb[index]*t59260*t59404*t59259*t59398*(4.4E1/9.0) \
               +ccab3*gcab*(t59410*t59410)*t59260*t59261*1.0/(t59282*t59282*t59282)*t59259*2.0+ccab3*gamma_bb[index]* \
               gcab*t59404*t59261*t59285*t59259*(4.4E1/3.0)-ccab2*gamma_bb[index]*t59402*t59260*t59262*t59406*t59259* \
               (1.6E1/3.0)+ccab4*gamma_bb[index]*t59260*t59404*t59261*t59267*t59287*(1.76E2/9.0)+ccab3*gcab*t59260* \
               t59364*t59285*t59259*t59399*(3.2E1/3.0)+ccab1*gcab*t59260*t59364*1.0/(t59275*t59275*t59275)*t59259* \
               t59399*(3.2E1/9.0)-ccab3*gcab*t59403*t59260*t59261*t59259*(gamma_bb[index]*gcab*t59404*(4.4E1/3.0) \
               +t59364*t59259*t59399*(3.2E1/3.0)+gamma_bb[index]*t59260*t59404*t59259*(8.8E1/3.0)+gamma_bb[index]* \
               gcab*t59404*t59261*t59259*(4.4E1/3.0)+gcab*t59260*t59364*t59259*t59399*(3.2E1/3.0))-ccab3*gamma_bb[index]* \
               gcab*t59410*t59403*t59261*t59262*t59259*8.0-ccab4*gamma_bb[index]*t59260*t59261*t59405*t59262*t59267* \
               t59397*(3.2E1/3.0))+(t59391+t59392+t59187+rho_b[index]*(-t59251+t59362+t59162*t59255*(t59251+t59361- \
               t59344*t59345*t59258*t59339-a1p*c*c0p*t59252*t59228*(2.0/3.0)))-t59137*(t59283-t59155*t59191*t59192* \
               t59197+t59215*t59162*t59176*t59185*t59188+t59162*t59181*t59176*t59188*t59198*4.0-t59162*t59181*t59185* \
               t59188*t59299+t59162*t59181*t59156*t59157*t59176*t59185*4.0+Aa*t59211*t59215*t59162*t59217*t59209* \
               t59199*2.0+Aa*t59211*t59162*t59324*t59181*t59209*t59199*2.0-t59211*t59331*t59332*t59162*t59181*t59217* \
               t59337*t59199+Aa*a1a*c*t59162*t59181*t59217*t59209*t59149*t59199*(2.0/3.0))-c0p*t59243*t59252*2.0- \
               t59162*t59255*t59389)*(ccab1*gamma_bb[index]*gcab*t59262*t59286*(4.0/3.0)-ccab2*t59402*t59261*t59406* \
               t59259-ccab4*t59405*t59267*t59268*t59397+ccab2*gamma_bb[index]*t59260*t59262*t59284*t59259*(8.0/3.0) \
               -ccab1*gamma_bb[index]*t59260*t59262*t59259*t59398*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t59261*t59262* \
               t59285*t59259*4.0+ccab4*gamma_bb[index]*t59260*t59261*t59262*t59267*t59287*(1.6E1/3.0)-ccab3*gcab* \
               t59410*t59403*t59260*t59261*t59259)*2.0+t59500*t59457*2.0+t59412*t59456*2.0+rho_b[index]*t59500*(t59510- \
               t59351-t59360+t59514+t59516-t59162*t59255*(t59510-t59351-t59360-t59513+t59514-t59515+t59516-t59508+ \
               t59501*t59258*t59339*t59348*2.0+a1f*c*c0f*t59256*t59346*(8.0/9.0)))-c0*pow(rho_b[index],1.0/3.0)*(cx1* \
               gamma_bb[index]*gx*t59262*t59492*(8.0/3.0)-cx1*t59431*t59364*t59458*t59495*(8.0/3.0)+cx2*t59431*t59364* \
               t59458*t59494*(1.6E1/3.0)+cx4*t59433*t59491*t59366*t59459*(3.2E1/3.0)-cx2*t59370*t59364*t59490*t59458* \
               t59469-cx4*t59463*t59366*t59368*t59459*t59487+cx3*gamma_bb[index]*gx*t59432*t59364*t59493*t59458*8.0- \
               cx3*gamma_bb[index]*gx*t59364*t59481*t59458*t59369*t59477)*(8.0/3.0)-rho_b[index]*t59412*(ccaa1*gamma_bb[index]* \
               gcaa*t59421*t59404*(8.8E1/9.0)-ccaa1*t59440*t59364*t59365*t59399*2.4E1+ccaa2*t59430*t59364*t59365* \
               t59399*(3.04E2/9.0)+ccaa4*t59418*t59366*t59367*t59486*(1.12E3/9.0)-ccaa2*t59431*t59364*t59454*t59365* \
               t59455*(3.2E1/3.0)-ccaa4*t59450*t59433*t59451*t59366*t59367*(6.4E1/3.0)-ccaa2*t59370*t59364*t59365* \
               t59455*(gamma_bb[index]*gcaa*t59404*(1.76E2/9.0)+t59364*t59365*t59399*(3.04E2/9.0))-ccaa4*t59451*t59366* \
               t59367*t59368*(gamma_bb[index]*gcaa*t59404*(3.52E2/9.0)+t59364*t59365*t59399*(6.08E2/3.0)+t59366*t59367* \
               t59486*(1.12E3/9.0)+gamma_bb[index]*gcaa*t59460*t59364*t59365*2.88E2)+ccaa2*t59370*t59364*(t59454* \
               t59454)*t59365*1.0/(t59429*t59429*t59429)*2.0+ccaa4*(t59450*t59450)*1.0/(t59417*t59417*t59417)*t59366* \
               t59367*t59368*2.0+ccaa3*gamma_bb[index]*gcaa*t59460*t59426*t59364*t59365*7.2E1+ccaa1*gamma_bb[index]* \
               gcaa*1.0/(t59420*t59420*t59420)*t59460*t59364*t59365*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t59425* \
               t59425*t59425)*(t59444*t59444)*t59364*t59365*t59369*2.0-ccaa3*gamma_bb[index]*gcaa*t59364*t59445*t59365* \
               t59369*(gamma_bb[index]*gcaa*t59404*(8.8E1/3.0)+t59364*t59365*t59399*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t59460*t59364*t59365*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t59432*t59444*t59364*t59445*t59365*1.6E1) \
               -rho_b[index]*t59456*t59457*2.0+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t59404*t59492* \
               (8.8E1/9.0)-cx1*t59364*t59458*t59495*t59399*2.4E1+cx2*t59364*t59458*t59494*t59399*(3.04E2/9.0)+cx4* \
               t59491*t59366*t59459*t59486*(1.12E3/9.0)-cx2*t59431*t59364*t59490*t59458*t59469*(3.2E1/3.0)-cx4*t59433* \
               t59463*t59366*t59459*t59487*(6.4E1/3.0)-cx2*t59370*t59364*t59490*t59458*(gamma_bb[index]*gx*t59404* \
               (1.76E2/9.0)+t59364*t59458*t59399*(3.04E2/9.0))-cx4*t59366*t59368*t59459*t59487*(gamma_bb[index]*gx* \
               t59404*(3.52E2/9.0)+t59364*t59458*t59399*(6.08E2/3.0)+t59366*t59459*t59486*(1.12E3/9.0)+gamma_bb[index]* \
               gx*t59460*t59364*t59458*2.88E2)+cx2*t59370*t59364*1.0/(t59472*t59472*t59472)*t59458*(t59469*t59469) \
               *2.0+cx4*(t59463*t59463)*t59366*t59368*t59459*1.0/(t59468*t59468*t59468)*2.0+cx3*gamma_bb[index]*gx* \
               t59460*t59364*t59493*t59458*7.2E1+cx1*gamma_bb[index]*gx*t59460*1.0/(t59462*t59462*t59462)*t59364* \
               t59458*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t59364*(t59481*t59481)*t59458*1.0/(t59476*t59476*t59476) \
               *t59369*2.0-cx3*gamma_bb[index]*gx*t59364*t59458*t59369*t59477*(gamma_bb[index]*gx*t59404*(8.8E1/3.0) \
               +t59364*t59458*t59399*(3.04E2/3.0)+gamma_bb[index]*gx*t59460*t59364*t59458*7.2E1)-cx3*gamma_bb[index]* \
               gx*t59432*t59364*t59481*t59458*t59477*1.6E1)+c0*t59224*(cx0+cx1*gamma_bb[index]*gx*t59265*t59492+cx2* \
               t59370*t59364*t59458*t59494+cx4*t59491*t59366*t59368*t59459+cx3*gamma_bb[index]*gx*t59364*t59493*t59458* \
               t59369)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t61282 = 1.0/pow(rho_b[index],1.0/3.0);
            double t61283 = c*t61282;
            double t61284 = sqrt(t61283);
            double t61285 = b1f*t61284;
            double t61286 = pow(t61283,3.0/2.0);
            double t61287 = b3f*t61286;
            double t61288 = c*c;
            double t61289 = 1.0/pow(rho_b[index],2.0/3.0);
            double t61290 = b4f*t61288*t61289;
            double t61291 = b2f*c*t61282;
            double t61292 = t61290+t61291+t61285+t61287;
            double t61293 = 1.0/pow(rho_b[index],4.0/3.0);
            double t61294 = b1p*t61284;
            double t61295 = b3p*t61286;
            double t61296 = b4p*t61288*t61289;
            double t61297 = b2p*c*t61282;
            double t61298 = t61294+t61295+t61296+t61297;
            double t61299 = 1.0/pow(rho_b[index],5.0/3.0);
            double t61300 = 1.0/sqrt(t61283);
            double t61301 = 1.0/c0f;
            double t61302 = 1.0/t61292;
            double t61303 = t61301*t61302*(1.0/2.0);
            double t61304 = t61303+1.0;
            double t61305 = 1.0/c0p;
            double t61306 = 1.0/t61298;
            double t61307 = t61305*t61306*(1.0/2.0);
            double t61308 = t61307+1.0;
            double t61309 = a1p*c*t61282;
            double t61310 = t61309+1.0;
            double t61311 = 1.0/t61308;
            double t61312 = 1.0/(t61298*t61298);
            double t61313 = b4p*t61288*t61299*(2.0/3.0);
            double t61314 = b2p*c*t61293*(1.0/3.0);
            double t61315 = b1p*c*t61300*t61293*(1.0/6.0);
            double t61316 = b3p*c*t61284*t61293*(1.0/2.0);
            double t61317 = t61313+t61314+t61315+t61316;
            double t61318 = t61310*t61311*t61312*t61317;
            double t61319 = log(t61308);
            double t61320 = gamma_bb[index]*gamma_bb[index];
            double t61321 = gcaa*gcaa;
            double t61322 = t61320*t61320;
            double t61323 = t61321*t61321;
            double t61324 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t61325 = 1.0/pow(rho_b[index],8.0/3.0);
            double t61326 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t61327 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t61328 = pow(2.0,1.0/3.0);
            double t61329 = t61328*2.0;
            double t61330 = t61329-2.0;
            double t61331 = two_13*2.0;
            double t61332 = t61331-2.0;
            double t61333 = 1.0/t61332;
            double t61334 = log(t61304);
            double t61335 = a1f*c*t61282;
            double t61336 = t61335+1.0;
            double t61337 = gamma_bb[index]*gcaa*t61325*4.0;
            double t61338 = gamma_bb[index]*gcaa*t61320*t61321*t61326*4.0;
            double t61339 = t61320*t61321*t61327*6.0;
            double t61340 = t61322*t61323*t61324;
            double t61341 = t61340+t61337+t61338+t61339+1.0;
            double t61342 = 1.0/t61341;
            double t61343 = gamma_bb[index]*gcaa*t61325;
            double t61344 = t61343+1.0;
            double t61345 = 1.0/t61344;
            double t61346 = gamma_bb[index]*gcaa*t61325*3.0;
            double t61347 = gamma_bb[index]*gcaa*t61320*t61321*t61326;
            double t61348 = t61320*t61321*t61327*3.0;
            double t61349 = t61346+t61347+t61348+1.0;
            double t61350 = 1.0/t61349;
            double t61351 = gamma_bb[index]*gcaa*t61325*2.0;
            double t61352 = t61320*t61321*t61327;
            double t61353 = t61351+t61352+1.0;
            double t61354 = 1.0/t61353;
            double t61355 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t61356 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t61357 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t61358 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t61359 = 1.0/t61304;
            double t61360 = 1.0/(t61292*t61292);
            double t61361 = b4f*t61288*t61299*(2.0/3.0);
            double t61362 = b2f*c*t61293*(1.0/3.0);
            double t61363 = b1f*c*t61300*t61293*(1.0/6.0);
            double t61364 = b3f*c*t61284*t61293*(1.0/2.0);
            double t61365 = t61361+t61362+t61363+t61364;
            double t61366 = a1f*c*c0f*t61334*t61293*(2.0/3.0);
            double t61367 = a1p*c*c0p*t61319*t61293*(2.0/3.0);
            double t61368 = ccaa4*t61322*t61323*t61342*t61358*(3.2E1/3.0);
            double t61369 = ccaa1*gamma_bb[index]*gcaa*t61345*t61356*(8.0/3.0);
            double t61370 = ccaa3*gamma_bb[index]*gcaa*t61320*t61321*t61350*t61357*8.0;
            double t61371 = ccaa2*t61320*t61321*t61354*t61355*(1.6E1/3.0);
            double t61372 = 1.0/(t61344*t61344);
            double t61373 = gamma_bb[index]*gcaa*t61356*8.0;
            double t61374 = gamma_bb[index]*gcaa*t61320*t61321*t61357*8.0;
            double t61375 = t61320*t61321*t61355*1.6E1;
            double t61376 = t61373+t61374+t61375;
            double t61377 = 1.0/(t61349*t61349);
            double t61378 = gamma_bb[index]*gcaa*t61356*(3.2E1/3.0);
            double t61379 = gamma_bb[index]*gcaa*t61320*t61321*t61357*3.2E1;
            double t61380 = t61320*t61321*t61355*3.2E1;
            double t61381 = t61322*t61323*t61358*(3.2E1/3.0);
            double t61382 = t61380+t61381+t61378+t61379;
            double t61383 = 1.0/(t61341*t61341);
            double t61384 = gamma_bb[index]*gcaa*t61356*(1.6E1/3.0);
            double t61385 = t61320*t61321*t61355*(1.6E1/3.0);
            double t61386 = t61384+t61385;
            double t61387 = 1.0/(t61353*t61353);
            double t61388 = t61370+t61371+t61368+t61369-ccaa1*t61320*t61321*t61372*t61355*(8.0/3.0)-ccaa4*t61322* \
               t61323*t61324*t61382*t61383-ccaa2*t61320*t61321*t61327*t61386*t61387-ccaa3*gamma_bb[index]*gcaa*t61320* \
               t61321*t61326*t61376*t61377;
            double t61389 = gx*gx;
            double t61390 = t61389*t61389;
            double t61391 = 1.0/pow(rho_b[index],1.0E1);
            double t61392 = gamma_bb[index]*gx*t61325;
            double t61393 = t61392+1.0;
            double t61394 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t61415 = gamma_bb[index]*gx*t61356*(3.2E1/3.0);
            double t61416 = gamma_bb[index]*gx*t61320*t61357*t61389*3.2E1;
            double t61417 = t61320*t61355*t61389*3.2E1;
            double t61418 = t61322*t61390*t61358*(3.2E1/3.0);
            double t61395 = t61415+t61416+t61417+t61418;
            double t61396 = gamma_bb[index]*gx*t61325*4.0;
            double t61397 = gamma_bb[index]*gx*t61320*t61326*t61389*4.0;
            double t61398 = t61320*t61327*t61389*6.0;
            double t61399 = t61322*t61324*t61390;
            double t61400 = t61396+t61397+t61398+t61399+1.0;
            double t61421 = gamma_bb[index]*gx*t61356*(1.6E1/3.0);
            double t61422 = t61320*t61355*t61389*(1.6E1/3.0);
            double t61401 = t61421+t61422;
            double t61402 = gamma_bb[index]*gx*t61325*2.0;
            double t61403 = t61320*t61327*t61389;
            double t61404 = t61402+t61403+1.0;
            double t61405 = gamma_bb[index]*gx*t61325*3.0;
            double t61406 = gamma_bb[index]*gx*t61320*t61326*t61389;
            double t61407 = t61320*t61327*t61389*3.0;
            double t61408 = t61405+t61406+t61407+1.0;
            double t61409 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t61410 = 1.0/(t61408*t61408);
            double t61411 = gamma_bb[index]*gx*t61356*8.0;
            double t61412 = gamma_bb[index]*gx*t61320*t61357*t61389*8.0;
            double t61413 = t61320*t61355*t61389*1.6E1;
            double t61414 = t61411+t61412+t61413;
            double t61419 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t61420 = 1.0/(t61400*t61400);
            double t61423 = 1.0/(t61404*t61404);
            double t61424 = 1.0/t61400;
            double t61425 = 1.0/t61393;
            double t61426 = 1.0/t61408;
            double t61427 = 1.0/t61404;
            double t61428 = c0f*t61334*t61336*2.0;
            double t61429 = c0p*t61310*t61319*2.0;
            double t61430 = 1.0/(t61393*t61393);
            double t61431 = ccaa4*t61322*t61323*t61324*t61342;
            double t61432 = ccaa1*gamma_bb[index]*gcaa*t61325*t61345;
            double t61433 = ccaa3*gamma_bb[index]*gcaa*t61320*t61321*t61350*t61326;
            double t61434 = ccaa2*t61320*t61321*t61327*t61354;
            double t61435 = ccaa0+t61431+t61432+t61433+t61434;
            double t61436 = 1.0/pow(rho_b[index],7.0/3.0);
            double t61437 = 1.0/pow(t61283,3.0/2.0);
            double t61438 = t61365*t61365;
            double t61439 = t61317*t61317;
            double t61440 = 1.0/(t61298*t61298*t61298);
            double t61441 = t61310*t61311*t61440*t61439*2.0;
            double t61442 = b4p*t61325*t61288*(1.0E1/9.0);
            double t61443 = b2p*c*t61436*(4.0/9.0);
            double t61444 = b3p*t61300*t61325*t61288*(1.0/1.2E1);
            double t61445 = b1p*c*t61300*t61436*(2.0/9.0);
            double t61446 = b3p*c*t61436*t61284*(2.0/3.0);
            double t61447 = t61442+t61443+t61444+t61445+t61446-b1p*t61325*t61437*t61288*(1.0/3.6E1);
            double t61448 = 1.0/(t61308*t61308);
            double t61449 = 1.0/(t61298*t61298*t61298*t61298);
            double t61450 = a1p*c*c0p*t61319*t61436*(8.0/9.0);
            v_rho_b_rho_b_[index] = t61388*(t61429+t61330*t61333*(t61428-c0p*t61310*t61319*2.0))*2.0+t61435*(- \
               t61318+t61367+t61330*t61333*(t61318+t61366-t61360*t61336*t61365*t61359-a1p*c*c0p*t61319*t61293*(2.0/ \
               3.0)))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t61425*t61356*(8.0/3.0)-cx1*t61320* \
               t61430*t61355*t61389*(8.0/3.0)+cx2*t61320*t61355*t61427*t61389*(1.6E1/3.0)+cx4*t61322*t61424*t61390* \
               t61358*(3.2E1/3.0)-cx2*t61320*t61401*t61423*t61327*t61389-cx4*t61420*t61322*t61324*t61390*t61395+cx3* \
               gamma_bb[index]*gx*t61320*t61426*t61357*t61389*8.0-cx3*gamma_bb[index]*gx*t61320*t61410*t61414*t61326* \
               t61389)*(8.0/3.0)+rho_b[index]*t61435*(-t61441-t61450+t61330*t61333*(t61441+t61450-t61310*t61311*t61312* \
               t61447-t61336*1.0/(t61292*t61292*t61292)*t61438*t61359*2.0+t61360*t61336*t61359*(b2f*c*t61436*(4.0/ \
               9.0)+b4f*t61325*t61288*(1.0E1/9.0)+b1f*c*t61300*t61436*(2.0/9.0)+b3f*c*t61436*t61284*(2.0/3.0)-b1f* \
               t61325*t61437*t61288*(1.0/3.6E1)+b3f*t61300*t61325*t61288*(1.0/1.2E1))+t61301*1.0/(t61304*t61304)* \
               t61336*1.0/(t61292*t61292*t61292*t61292)*t61438*(1.0/2.0)-a1f*c*c0f*t61334*t61436*(8.0/9.0)-t61310* \
               t61305*t61439*t61448*t61449*(1.0/2.0)+a1f*c*t61360*t61293*t61365*t61359*(2.0/3.0)-a1p*c*t61311*t61312* \
               t61317*t61293*(2.0/3.0))+t61310*t61311*t61312*t61447+t61310*t61305*t61439*t61448*t61449*(1.0/2.0)+ \
               a1p*c*t61311*t61312*t61317*t61293*(2.0/3.0))-rho_b[index]*t61388*(-t61318+t61367+t61330*t61333*(t61318+ \
               t61366-t61367-t61360*t61336*t61365*t61359))*2.0-rho_b[index]*(t61429+t61330*t61333*(t61428-t61429) \
               )*(ccaa1*gamma_bb[index]*gcaa*t61345*t61409*(8.8E1/9.0)-ccaa1*t61320*t61321*t61372*t61394*2.4E1+ccaa2* \
               t61320*t61321*t61354*t61394*(3.04E2/9.0)+ccaa4*t61322*t61323*t61342*t61419*(1.12E3/9.0)-ccaa2*t61320* \
               t61321*t61355*t61386*t61387*(3.2E1/3.0)-ccaa4*t61322*t61323*t61382*t61383*t61358*(6.4E1/3.0)-ccaa2* \
               t61320*t61321*t61327*t61387*(gamma_bb[index]*gcaa*t61409*(1.76E2/9.0)+t61320*t61321*t61394*(3.04E2/ \
               9.0))-ccaa4*t61322*t61323*t61324*t61383*(gamma_bb[index]*gcaa*t61409*(3.52E2/9.0)+t61320*t61321*t61394* \
               (6.08E2/3.0)+t61322*t61323*t61419*(1.12E3/9.0)+gamma_bb[index]*gcaa*t61320*t61321*t61391*2.88E2)+ccaa4* \
               t61322*t61323*1.0/(t61341*t61341*t61341)*t61324*(t61382*t61382)*2.0+ccaa2*t61320*t61321*1.0/(t61353* \
               t61353*t61353)*t61327*(t61386*t61386)*2.0+ccaa3*gamma_bb[index]*gcaa*t61320*t61321*t61350*t61391*7.2E1+ \
               ccaa1*gamma_bb[index]*gcaa*t61320*t61321*1.0/(t61344*t61344*t61344)*t61391*(1.28E2/9.0)+ccaa3*gamma_bb[index]* \
               gcaa*t61320*t61321*t61326*1.0/(t61349*t61349*t61349)*(t61376*t61376)*2.0-ccaa3*gamma_bb[index]*gcaa* \
               t61320*t61321*t61326*t61377*(gamma_bb[index]*gcaa*t61409*(8.8E1/3.0)+t61320*t61321*t61394*(3.04E2/ \
               3.0)+gamma_bb[index]*gcaa*t61320*t61321*t61391*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t61320*t61321*t61357* \
               t61376*t61377*1.6E1)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t61425*t61409*(8.8E1/9.0) \
               -cx1*t61320*t61430*t61394*t61389*2.4E1+cx2*t61320*t61427*t61394*t61389*(3.04E2/9.0)+cx4*t61322*t61424* \
               t61390*t61419*(1.12E3/9.0)-cx2*t61320*t61401*t61423*t61355*t61389*(3.2E1/3.0)-cx4*t61420*t61322*t61390* \
               t61358*t61395*(6.4E1/3.0)-cx2*t61320*t61423*t61327*t61389*(gamma_bb[index]*gx*t61409*(1.76E2/9.0)+ \
               t61320*t61394*t61389*(3.04E2/9.0))-cx4*t61420*t61322*t61324*t61390*(gamma_bb[index]*gx*t61409*(3.52E2/ \
               9.0)+t61322*t61390*t61419*(1.12E3/9.0)+t61320*t61394*t61389*(6.08E2/3.0)+gamma_bb[index]*gx*t61320* \
               t61391*t61389*2.88E2)+cx2*t61320*(t61401*t61401)*1.0/(t61404*t61404*t61404)*t61327*t61389*2.0+cx4* \
               1.0/(t61400*t61400*t61400)*t61322*t61324*t61390*(t61395*t61395)*2.0+cx3*gamma_bb[index]*gx*t61320* \
               t61426*t61391*t61389*7.2E1+cx1*gamma_bb[index]*gx*t61320*t61391*1.0/(t61393*t61393*t61393)*t61389* \
               (1.28E2/9.0)+cx3*gamma_bb[index]*gx*t61320*(t61414*t61414)*t61326*1.0/(t61408*t61408*t61408)*t61389* \
               2.0-cx3*gamma_bb[index]*gx*t61320*t61410*t61326*t61389*(gamma_bb[index]*gx*t61409*(8.8E1/3.0)+t61320* \
               t61394*t61389*(3.04E2/3.0)+gamma_bb[index]*gx*t61320*t61391*t61389*7.2E1)-cx3*gamma_bb[index]*gx*t61320* \
               t61410*t61414*t61357*t61389*1.6E1)+c0*t61289*(cx0+cx1*gamma_bb[index]*gx*t61325*t61425+cx2*t61320* \
               t61327*t61427*t61389+cx4*t61322*t61324*t61424*t61390+cx3*gamma_bb[index]*gx*t61320*t61326*t61426*t61389) \
               *(4.0/9.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t59518 = 1.0/pow(rho_a[index],1.0/3.0);
                double t59519 = c*t59518;
                double t59520 = sqrt(t59519);
                double t59521 = pow(t59519,3.0/2.0);
                double t59522 = c*c;
                double t59523 = 1.0/pow(rho_a[index],2.0/3.0);
                double t59524 = 1.0/c0p;
                double t59525 = b1p*t59520;
                double t59526 = b3p*t59521;
                double t59527 = b4p*t59522*t59523;
                double t59528 = b2p*c*t59518;
                double t59529 = t59525+t59526+t59527+t59528;
                double t59530 = 1.0/t59529;
                double t59531 = t59530*t59524*(1.0/2.0);
                double t59532 = t59531+1.0;
                double t59533 = log(t59532);
                double t59534 = a1p*c*t59518;
                double t59535 = t59534+1.0;
                double t59536 = 1.0/pow(rho_a[index],8.0/3.0);
                double t59537 = gamma_aa[index]*gamma_aa[index];
                double t59538 = gcaa*gcaa;
                double t59539 = t59538*t59538;
                double t59540 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t59541 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t59542 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t59543 = gamma_aa[index]*gcaa*t59536;
                double t59544 = t59543+1.0;
                double t59545 = gamma_aa[index]*gcaa*t59536*3.0;
                double t59546 = gamma_aa[index]*gcaa*t59542*t59537*t59538;
                double t59547 = t59541*t59537*t59538*3.0;
                double t59548 = t59545+t59546+t59547+1.0;
                double t59549 = t59537*t59537;
                double t59550 = gamma_aa[index]*gcaa*t59536*4.0;
                double t59551 = gamma_aa[index]*gcaa*t59542*t59537*t59538*4.0;
                double t59552 = t59541*t59537*t59538*6.0;
                double t59553 = t59540*t59539*t59549;
                double t59554 = t59550+t59551+t59552+t59553+1.0;
                double t59555 = gamma_aa[index]*gcaa*t59536*2.0;
                double t59556 = t59541*t59537*t59538;
                double t59557 = t59555+t59556+1.0;
                double t59558 = rho_a[index]+rho_b[index];
                double t59559 = 1.0/pow(t59558,1.0/3.0);
                double t59560 = c*t59559;
                double t59561 = sqrt(t59560);
                double t59562 = b1p*t59561;
                double t59563 = pow(t59560,3.0/2.0);
                double t59564 = b3p*t59563;
                double t59565 = 1.0/pow(t59558,2.0/3.0);
                double t59566 = b4p*t59522*t59565;
                double t59567 = b2p*c*t59559;
                double t59568 = t59562+t59564+t59566+t59567;
                double t59569 = 1.0/pow(t59558,4.0/3.0);
                double t59570 = two_13*2.0;
                double t59571 = t59570-2.0;
                double t59572 = 1.0/t59571;
                double t59573 = 1.0/c0f;
                double t59574 = 1.0/t59568;
                double t59575 = t59524*t59574*(1.0/2.0);
                double t59576 = t59575+1.0;
                double t59577 = a1p*c*t59559;
                double t59578 = t59577+1.0;
                double t59579 = rho_a[index]-rho_b[index];
                double t59580 = t59579*t59579;
                double t59581 = 1.0/t59558;
                double t59582 = t59581*t59579;
                double t59583 = b1f*t59561;
                double t59584 = b3f*t59563;
                double t59585 = b4f*t59522*t59565;
                double t59586 = b2f*c*t59559;
                double t59587 = t59583+t59584+t59585+t59586;
                double t59588 = 1.0/t59587;
                double t59589 = t59573*t59588*(1.0/2.0);
                double t59590 = t59589+1.0;
                double t59591 = log(t59590);
                double t59592 = a1f*c*t59559;
                double t59593 = t59592+1.0;
                double t59594 = log(t59576);
                double t59604 = c0f*t59591*t59593*2.0;
                double t59605 = c0p*t59594*t59578*2.0;
                double t59595 = t59604-t59605;
                double t59596 = t59582+1.0;
                double t59597 = pow(t59596,4.0/3.0);
                double t59598 = -t59582+1.0;
                double t59599 = pow(t59598,4.0/3.0);
                double t59600 = t59597+t59599-2.0;
                double t59601 = 1.0/(t59558*t59558);
                double t59632 = t59601*t59579;
                double t59602 = -t59632+t59581;
                double t59603 = 1.0/(t59558*t59558*t59558*t59558);
                double t59606 = t59580*t59580;
                double t59607 = 1.0/pow(t59558,5.0/3.0);
                double t59608 = 1.0/sqrt(t59560);
                double t59609 = 1.0/t59576;
                double t59610 = 1.0/(t59568*t59568);
                double t59611 = b4p*t59522*t59607*(2.0/3.0);
                double t59612 = b2p*c*t59569*(1.0/3.0);
                double t59613 = b1p*c*t59608*t59569*(1.0/6.0);
                double t59614 = b3p*c*t59561*t59569*(1.0/2.0);
                double t59615 = t59611+t59612+t59613+t59614;
                double t59616 = t59610*t59615*t59609*t59578;
                double t59617 = 1.0/(t59558*t59558*t59558*t59558*t59558);
                double t59618 = 1.0/d2fz0;
                double t59619 = 1.0/Aa;
                double t59620 = b1a*t59561;
                double t59621 = b3a*t59563;
                double t59622 = b4a*t59522*t59565;
                double t59623 = b2a*c*t59559;
                double t59624 = t59620+t59621+t59622+t59623;
                double t59625 = 1.0/t59624;
                double t59626 = t59625*t59619*(1.0/2.0);
                double t59627 = t59626+1.0;
                double t59628 = log(t59627);
                double t59629 = a1a*c*t59559;
                double t59630 = t59629+1.0;
                double t59631 = pow(t59596,1.0/3.0);
                double t59633 = t59602*t59631*(4.0/3.0);
                double t59634 = pow(t59598,1.0/3.0);
                double t59635 = t59633-t59602*t59634*(4.0/3.0);
                double t59636 = t59603*t59606;
                double t59637 = t59636-1.0;
                double t59638 = pow(2.0,1.0/3.0);
                double t59639 = t59638*2.0;
                double t59640 = t59639-2.0;
                double t59641 = a1f*c*t59518;
                double t59642 = t59641+1.0;
                double t59643 = b1f*t59520;
                double t59644 = b3f*t59521;
                double t59645 = b4f*t59522*t59523;
                double t59646 = b2f*c*t59518;
                double t59647 = t59643+t59644+t59645+t59646;
                double t59648 = 1.0/t59647;
                double t59649 = t59573*t59648*(1.0/2.0);
                double t59650 = t59649+1.0;
                double t59651 = 1.0/pow(rho_a[index],4.0/3.0);
                double t59652 = 1.0/pow(rho_a[index],5.0/3.0);
                double t59653 = 1.0/sqrt(t59519);
                double t59654 = log(t59650);
                double t59655 = 1.0/t59532;
                double t59656 = 1.0/(t59529*t59529);
                double t59657 = b4p*t59522*t59652*(2.0/3.0);
                double t59658 = b2p*c*t59651*(1.0/3.0);
                double t59659 = b1p*c*t59651*t59653*(1.0/6.0);
                double t59660 = b3p*c*t59520*t59651*(1.0/2.0);
                double t59661 = t59660+t59657+t59658+t59659;
                double t59662 = t59535*t59661*t59655*t59656;
                double t59663 = c0f*t59642*t59654*2.0;
                double t59664 = c0p*t59533*t59535*2.0;
                double t59665 = gamma_aa[index]*t59536*(1.0/2.0);
                double t59666 = 1.0/pow(rho_b[index],8.0/3.0);
                double t59667 = gamma_bb[index]*t59666*(1.0/2.0);
                double t59668 = t59665+t59667;
                double t59669 = gcab*t59668;
                double t59670 = t59669+1.0;
                double t59671 = gcab*gcab;
                double t59672 = t59668*t59668;
                double t59673 = t59671*t59671;
                double t59674 = t59672*t59672;
                double t59675 = t59671*t59672;
                double t59676 = gcab*t59668*2.0;
                double t59677 = t59675+t59676+1.0;
                double t59678 = t59671*t59672*3.0;
                double t59679 = gcab*t59671*t59672*t59668;
                double t59680 = gcab*t59668*3.0;
                double t59681 = t59680+t59678+t59679+1.0;
                double t59682 = t59671*t59672*6.0;
                double t59683 = gcab*t59671*t59672*t59668*4.0;
                double t59684 = t59673*t59674;
                double t59685 = gcab*t59668*4.0;
                double t59686 = t59682+t59683+t59684+t59685+1.0;
                double t59687 = t59663-t59664;
                double t59688 = 1.0/pow(rho_b[index],1.0/3.0);
                double t59689 = c*t59688;
                double t59690 = sqrt(t59689);
                double t59691 = pow(t59689,3.0/2.0);
                double t59692 = 1.0/pow(rho_b[index],2.0/3.0);
                double t59693 = b1p*t59690;
                double t59694 = b3p*t59691;
                double t59695 = b4p*t59522*t59692;
                double t59696 = b2p*c*t59688;
                double t59697 = t59693+t59694+t59695+t59696;
                double t59698 = 1.0/t59697;
                double t59699 = t59524*t59698*(1.0/2.0);
                double t59700 = t59699+1.0;
                double t59701 = log(t59700);
                double t59702 = a1p*c*t59688;
                double t59703 = t59702+1.0;
                double t59704 = c0p*t59701*t59703*2.0;
                double t59705 = t59600*t59603*t59606*t59572*t59595;
                double t59706 = Aa*t59600*t59630*t59572*t59618*t59628*t59637*2.0;
                double t59707 = 1.0/t59670;
                double t59708 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t59709 = 1.0/(t59670*t59670);
                double t59710 = 1.0/t59677;
                double t59711 = 1.0/(t59681*t59681);
                double t59712 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t59713 = 1.0/(t59677*t59677);
                double t59714 = 1.0/t59681;
                double t59715 = 1.0/t59686;
                double t59716 = 1.0/(t59686*t59686);
                double t59717 = gcab*t59536*2.0;
                double t59718 = t59536*t59671*t59668*6.0;
                double t59719 = gcab*t59536*t59671*t59672*6.0;
                double t59720 = t59536*t59672*t59673*t59668*2.0;
                double t59721 = t59720+t59717+t59718+t59719;
                double t59722 = gamma_aa[index]*gcab*t59708*(8.0/3.0);
                double t59723 = gamma_aa[index]*t59671*t59708*t59668*(8.0/3.0);
                double t59724 = t59722+t59723;
                double t59725 = gcab*t59536;
                double t59726 = t59536*t59671*t59668;
                double t59727 = t59725+t59726;
                double t59728 = gamma_aa[index]*gcab*t59708*(1.6E1/3.0);
                double t59729 = gamma_aa[index]*gcab*t59671*t59672*t59708*1.6E1;
                double t59730 = gamma_aa[index]*t59672*t59708*t59673*t59668*(1.6E1/3.0);
                double t59731 = gamma_aa[index]*t59671*t59708*t59668*1.6E1;
                double t59732 = t59730+t59731+t59728+t59729;
                double t59733 = gcab*t59536*(3.0/2.0);
                double t59734 = t59536*t59671*t59668*3.0;
                double t59735 = gcab*t59536*t59671*t59672*(3.0/2.0);
                double t59736 = t59733+t59734+t59735;
                double t59737 = gamma_aa[index]*gcab*t59708*4.0;
                double t59738 = gamma_aa[index]*gcab*t59671*t59672*t59708*4.0;
                double t59739 = gamma_aa[index]*t59671*t59708*t59668*8.0;
                double t59740 = t59737+t59738+t59739;
                double t59741 = gx*gx;
                double t59742 = t59741*t59741;
                double t59743 = gamma_aa[index]*gx*t59536;
                double t59744 = t59743+1.0;
                double t59745 = gamma_aa[index]*gx*t59536*3.0;
                double t59746 = gamma_aa[index]*gx*t59542*t59741*t59537;
                double t59747 = t59541*t59741*t59537*3.0;
                double t59748 = t59745+t59746+t59747+1.0;
                double t59749 = gamma_aa[index]*gx*t59536*4.0;
                double t59750 = gamma_aa[index]*gx*t59542*t59741*t59537*4.0;
                double t59751 = t59541*t59741*t59537*6.0;
                double t59752 = t59540*t59742*t59549;
                double t59753 = t59750+t59751+t59752+t59749+1.0;
                double t59754 = gamma_aa[index]*gx*t59536*2.0;
                double t59755 = t59541*t59741*t59537;
                double t59756 = t59754+t59755+1.0;
                double t59757 = t59640*t59572*t59687;
                double t59758 = t59664+t59757;
                double t59759 = 1.0/t59544;
                double t59760 = 1.0/t59554;
                double t59761 = 1.0/t59557;
                double t59762 = 1.0/t59548;
                double t59763 = 1.0/(t59544*t59544);
                double t59764 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t59765 = 1.0/(t59548*t59548);
                double t59766 = 1.0/(t59557*t59557);
                double t59767 = gcaa*t59536*3.0;
                double t59768 = gamma_aa[index]*t59541*t59538*6.0;
                double t59769 = gcaa*t59542*t59537*t59538*3.0;
                double t59770 = t59767+t59768+t59769;
                double t59771 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t59772 = 1.0/(t59554*t59554);
                double t59773 = gcaa*t59536*4.0;
                double t59774 = gamma_aa[index]*t59541*t59538*1.2E1;
                double t59775 = gcaa*t59542*t59537*t59538*1.2E1;
                double t59776 = gamma_aa[index]*t59540*t59537*t59539*4.0;
                double t59777 = t59773+t59774+t59775+t59776;
                double t59778 = gcaa*t59536*2.0;
                double t59779 = gamma_aa[index]*t59541*t59538*2.0;
                double t59780 = t59778+t59779;
                double t59781 = gamma_aa[index]*gcaa*t59708*(1.6E1/3.0);
                double t59782 = t59712*t59537*t59538*(1.6E1/3.0);
                double t59783 = t59781+t59782;
                double t59784 = gamma_aa[index]*gcaa*t59708*8.0;
                double t59785 = gamma_aa[index]*gcaa*t59537*t59538*t59764*8.0;
                double t59786 = t59712*t59537*t59538*1.6E1;
                double t59787 = t59784+t59785+t59786;
                double t59788 = gamma_aa[index]*gcaa*t59708*(3.2E1/3.0);
                double t59789 = gamma_aa[index]*gcaa*t59537*t59538*t59764*3.2E1;
                double t59790 = t59712*t59537*t59538*3.2E1;
                double t59791 = t59771*t59539*t59549*(3.2E1/3.0);
                double t59792 = t59790+t59791+t59788+t59789;
                double t59793 = 1.0/t59650;
                double t59794 = 1.0/(t59647*t59647);
                double t59795 = b4f*t59522*t59652*(2.0/3.0);
                double t59796 = b2f*c*t59651*(1.0/3.0);
                double t59797 = b1f*c*t59651*t59653*(1.0/6.0);
                double t59798 = b3f*c*t59520*t59651*(1.0/2.0);
                double t59799 = t59795+t59796+t59797+t59798;
                double t59800 = a1f*c*c0f*t59651*t59654*(2.0/3.0);
                double t59801 = a1p*c*c0p*t59533*t59651*(2.0/3.0);
                double t59802 = ccaa1*gcaa*t59536*t59759;
                double t59803 = ccaa4*gamma_aa[index]*t59540*t59760*t59537*t59539*4.0;
                double t59804 = ccaa2*gamma_aa[index]*t59541*t59761*t59538*2.0;
                double t59805 = ccaa3*gcaa*t59542*t59537*t59762*t59538*3.0;
                double t59806 = t59802+t59803+t59804+t59805-ccaa1*gamma_aa[index]*t59541*t59538*t59763-ccaa2*t59541* \
                   t59537*t59780*t59538*t59766-ccaa4*t59540*t59772*t59539*t59549*t59777-ccaa3*gamma_aa[index]*gcaa*t59542* \
                   t59770*t59537*t59538*t59765;
                double t59807 = 1.0/t59744;
                double t59808 = 1.0/t59753;
                double t59809 = 1.0/t59756;
                double t59810 = 1.0/t59748;
                double t59811 = 1.0/(t59744*t59744);
                double t59812 = 1.0/(t59748*t59748);
                double t59813 = 1.0/(t59756*t59756);
                double t59814 = gx*t59536*3.0;
                double t59815 = gamma_aa[index]*t59541*t59741*6.0;
                double t59816 = gx*t59542*t59741*t59537*3.0;
                double t59817 = t59814+t59815+t59816;
                double t59818 = 1.0/(t59753*t59753);
                double t59819 = gx*t59536*4.0;
                double t59820 = gamma_aa[index]*t59541*t59741*1.2E1;
                double t59821 = gx*t59542*t59741*t59537*1.2E1;
                double t59822 = gamma_aa[index]*t59540*t59742*t59537*4.0;
                double t59823 = t59820+t59821+t59822+t59819;
                double t59824 = gx*t59536*2.0;
                double t59825 = gamma_aa[index]*t59541*t59741*2.0;
                double t59826 = t59824+t59825;
                double t59827 = gamma_aa[index]*gx*t59708*(1.6E1/3.0);
                double t59828 = t59712*t59741*t59537*(1.6E1/3.0);
                double t59829 = t59827+t59828;
                double t59830 = gamma_aa[index]*gx*t59708*8.0;
                double t59831 = gamma_aa[index]*gx*t59741*t59537*t59764*8.0;
                double t59832 = t59712*t59741*t59537*1.6E1;
                double t59833 = t59830+t59831+t59832;
                double t59834 = gamma_aa[index]*gx*t59708*(3.2E1/3.0);
                double t59835 = gamma_aa[index]*gx*t59741*t59537*t59764*3.2E1;
                double t59836 = t59712*t59741*t59537*3.2E1;
                double t59837 = t59742*t59771*t59549*(3.2E1/3.0);
                double t59838 = t59834+t59835+t59836+t59837;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t59758+rho_b[index]*(t59704-t59640*t59572*(t59704-c0f*log((t59573* \
                   (1.0/2.0))/(b1f*t59690+b3f*t59691+b2f*c*t59688+b4f*t59522*t59692)+1.0)*(a1f*c*t59688+1.0)*2.0))-t59558* \
                   (t59605+t59705+t59706))*(ccab1*gcab*t59707*t59708*(4.0/3.0)-ccab2*t59713*t59671*t59672*(gcab*t59708* \
                   (8.0/3.0)+gamma_aa[index]*t59712*t59671*(4.0/3.0)+t59671*t59708*t59668*(8.0/3.0))-ccab4*t59716*t59673* \
                   t59674*(gcab*t59708*(1.6E1/3.0)+gamma_aa[index]*t59712*t59671*8.0+t59671*t59708*t59668*1.6E1+gamma_aa[index]* \
                   t59712*t59672*t59673*8.0+gcab*t59671*t59672*t59708*1.6E1+t59672*t59708*t59673*t59668*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t59712*t59671*t59668*1.6E1)+ccab2*gamma_aa[index]*t59710*t59712*t59671*(4.0/3.0)-ccab1*gamma_aa[index]* \
                   t59712*t59671*t59709*(4.0/3.0)+ccab2*t59710*t59671*t59708*t59668*(8.0/3.0)-ccab1*t59671*t59708*t59709* \
                   t59668*(4.0/3.0)-ccab2*t59713*t59724*t59536*t59671*t59668+ccab4*t59715*t59672*t59708*t59673*t59668* \
                   (1.6E1/3.0)+ccab4*t59721*t59732*t59673*t59674*1.0/(t59686*t59686*t59686)*2.0+ccab2*t59724*t59671*t59672* \
                   t59727*1.0/(t59677*t59677*t59677)*2.0+ccab4*gamma_aa[index]*t59712*t59715*t59672*t59673*8.0+ccab3* \
                   gcab*t59714*t59671*t59672*t59708*4.0+ccab3*gamma_aa[index]*gcab*t59712*t59714*t59671*t59668*4.0-ccab2* \
                   gamma_aa[index]*t59713*t59671*t59708*t59727*t59668*(8.0/3.0)-ccab3*gcab*t59711*t59740*t59536*t59671* \
                   t59672*(3.0/2.0)-ccab4*t59732*t59536*t59716*t59672*t59673*t59668*2.0-ccab3*gcab*t59711*t59671*t59672* \
                   t59668*(gcab*t59708*4.0+gamma_aa[index]*t59712*t59671*4.0+t59671*t59708*t59668*8.0+gcab*t59671*t59672* \
                   t59708*4.0+gamma_aa[index]*gcab*t59712*t59671*t59668*4.0)+ccab1*gamma_aa[index]*gcab*t59712*1.0/(t59670* \
                   t59670*t59670)*t59671*t59668*(4.0/3.0)+ccab3*gcab*t59740*t59671*t59672*1.0/(t59681*t59681*t59681)* \
                   t59736*t59668*2.0-ccab3*gamma_aa[index]*gcab*t59711*t59671*t59672*t59708*t59736*4.0-ccab4*gamma_aa[index]* \
                   t59721*t59716*t59672*t59708*t59673*t59668*(1.6E1/3.0))-t59806*(t59664+t59640*t59572*(t59663-c0p*t59533* \
                   t59535*2.0))-(t59605+t59705+t59706-t59664+t59558*(t59616-t59600*t59603*t59606*t59572*(t59616-(t59593* \
                   1.0/(t59587*t59587)*(b2f*c*t59569*(1.0/3.0)+b4f*t59522*t59607*(2.0/3.0)+b1f*c*t59608*t59569*(1.0/6.0) \
                   +b3f*c*t59561*t59569*(1.0/2.0)))/t59590+a1f*c*c0f*t59591*t59569*(2.0/3.0)-a1p*c*c0p*t59594*t59569* \
                   (2.0/3.0))-a1p*c*c0p*t59594*t59569*(2.0/3.0)-t59600*t59606*t59572*t59617*t59595*4.0+t59603*t59606* \
                   t59572*t59635*t59595+t59600*t59603*t59580*t59572*t59595*t59579*4.0-Aa*t59600*t59630*t59572*t59618* \
                   t59628*(t59606*t59617*4.0-t59603*t59580*t59579*4.0)*2.0+Aa*t59630*t59572*t59635*t59618*t59628*t59637* \
                   2.0+(t59600*t59630*1.0/(t59624*t59624)*t59572*t59618*t59637*(b2a*c*t59569*(1.0/3.0)+b4a*t59522*t59607* \
                   (2.0/3.0)+b1a*c*t59608*t59569*(1.0/6.0)+b3a*c*t59561*t59569*(1.0/2.0)))/t59627-Aa*a1a*c*t59600*t59572* \
                   t59618*t59628*t59637*t59569*(2.0/3.0))+rho_a[index]*(t59801-t59662+t59640*t59572*(t59800+t59662-t59642* \
                   t59793*t59794*t59799-a1p*c*c0p*t59533*t59651*(2.0/3.0)))-t59640*t59572*t59687)*(ccab1*gcab*t59536* \
                   t59707*(1.0/2.0)+ccab2*t59710*t59536*t59671*t59668-ccab2*t59713*t59671*t59672*t59727-ccab4*t59721* \
                   t59716*t59673*t59674-ccab1*t59536*t59671*t59709*t59668*(1.0/2.0)+ccab4*t59715*t59536*t59672*t59673* \
                   t59668*2.0+ccab3*gcab*t59714*t59536*t59671*t59672*(3.0/2.0)-ccab3*gcab*t59711*t59671*t59672*t59736* \
                   t59668)-rho_a[index]*t59758*(ccaa1*gcaa*t59708*t59759*(-8.0/3.0)-ccaa2*gamma_aa[index]*t59712*t59761* \
                   t59538*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t59712*t59538*t59763*8.0+ccaa2*t59712*t59537*t59780*t59538* \
                   t59766*(1.6E1/3.0)+ccaa4*t59771*t59772*t59539*t59549*t59777*(3.2E1/3.0)+ccaa4*t59540*t59772*t59539* \
                   t59549*(gcaa*t59708*(3.2E1/3.0)+gamma_aa[index]*t59712*t59538*6.4E1+gamma_aa[index]*t59537*t59771* \
                   t59539*(1.28E2/3.0)+gcaa*t59537*t59538*t59764*9.6E1)-ccaa1*gcaa*1.0/(t59544*t59544*t59544)*t59537* \
                   t59538*t59764*(1.6E1/3.0)+ccaa2*t59541*t59537*t59538*t59766*(gcaa*t59708*(1.6E1/3.0)+gamma_aa[index]* \
                   t59712*t59538*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t59760*t59537*t59771*t59539*(1.28E2/3.0)+ccaa2*gamma_aa[index]* \
                   t59541*t59538*t59783*t59766*2.0-ccaa3*gcaa*t59537*t59762*t59538*t59764*2.4E1+ccaa4*gamma_aa[index]* \
                   t59540*t59537*t59772*t59539*t59792*4.0+ccaa3*gcaa*t59542*t59537*t59538*t59765*t59787*3.0-ccaa2*t59541* \
                   t59537*t59780*t59538*1.0/(t59557*t59557*t59557)*t59783*2.0-ccaa4*t59540*1.0/(t59554*t59554*t59554) \
                   *t59539*t59549*t59792*t59777*2.0+ccaa3*gamma_aa[index]*gcaa*t59542*t59537*t59538*t59765*(gcaa*t59708* \
                   8.0+gamma_aa[index]*t59712*t59538*3.2E1+gcaa*t59537*t59538*t59764*2.4E1)+ccaa3*gamma_aa[index]*gcaa* \
                   t59770*t59537*t59538*t59764*t59765*8.0-ccaa3*gamma_aa[index]*gcaa*t59542*t59770*t59537*t59538*1.0/ \
                   (t59548*t59548*t59548)*t59787*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t59708*t59807*(-8.0/3.0)+cx1* \
                   gamma_aa[index]*t59712*t59811*t59741*8.0-cx2*gamma_aa[index]*t59712*t59741*t59809*(3.2E1/3.0)+cx2* \
                   t59712*t59741*t59813*t59537*t59826*(1.6E1/3.0)+cx4*t59742*t59823*t59771*t59818*t59549*(3.2E1/3.0)+ \
                   cx4*t59540*t59742*t59818*t59549*(gx*t59708*(3.2E1/3.0)+gamma_aa[index]*t59712*t59741*6.4E1+gamma_aa[index]* \
                   t59742*t59537*t59771*(1.28E2/3.0)+gx*t59741*t59537*t59764*9.6E1)-cx1*gx*t59741*t59537*1.0/(t59744* \
                   t59744*t59744)*t59764*(1.6E1/3.0)+cx2*t59541*t59741*t59813*t59537*(gx*t59708*(1.6E1/3.0)+gamma_aa[index]* \
                   t59712*t59741*(3.2E1/3.0))+cx2*gamma_aa[index]*t59541*t59741*t59813*t59829*2.0-cx4*gamma_aa[index]* \
                   t59742*t59537*t59771*t59808*(1.28E2/3.0)-cx3*gx*t59810*t59741*t59537*t59764*2.4E1+cx4*gamma_aa[index]* \
                   t59540*t59742*t59537*t59818*t59838*4.0+cx3*gx*t59542*t59812*t59741*t59833*t59537*3.0-cx2*t59541*t59741* \
                   t59537*t59826*1.0/(t59756*t59756*t59756)*t59829*2.0-cx4*t59540*t59742*t59823*1.0/(t59753*t59753*t59753) \
                   *t59549*t59838*2.0+cx3*gamma_aa[index]*gx*t59542*t59812*t59741*t59537*(gx*t59708*8.0+gamma_aa[index]* \
                   t59712*t59741*3.2E1+gx*t59741*t59537*t59764*2.4E1)+cx3*gamma_aa[index]*gx*t59812*t59741*t59537*t59817* \
                   t59764*8.0-cx3*gamma_aa[index]*gx*t59542*t59741*t59833*t59537*t59817*1.0/(t59748*t59748*t59748)*2.0) \
                   +rho_a[index]*t59806*(t59801-t59662+t59640*t59572*(t59800-t59801+t59662-t59642*t59793*t59794*t59799) \
                   )+c0*pow(rho_a[index],1.0/3.0)*(cx1*gx*t59536*t59807-cx1*gamma_aa[index]*t59541*t59811*t59741+cx2* \
                   gamma_aa[index]*t59541*t59741*t59809*2.0-cx2*t59541*t59741*t59813*t59537*t59826-cx4*t59540*t59742* \
                   t59823*t59818*t59549+cx4*gamma_aa[index]*t59540*t59742*t59537*t59808*4.0+cx3*gx*t59810*t59542*t59741* \
                   t59537*3.0-cx3*gamma_aa[index]*gx*t59542*t59812*t59741*t59537*t59817)*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t62091 = 1.0/pow(rho_a[index],1.0/3.0);
                double t62092 = c*t62091;
                double t62093 = sqrt(t62092);
                double t62094 = pow(t62092,3.0/2.0);
                double t62095 = c*c;
                double t62096 = 1.0/pow(rho_a[index],2.0/3.0);
                double t62097 = 1.0/c0p;
                double t62098 = b1p*t62093;
                double t62099 = b3p*t62094;
                double t62100 = b4p*t62095*t62096;
                double t62101 = b2p*c*t62091;
                double t62102 = t62100+t62101+t62098+t62099;
                double t62103 = 1.0/t62102;
                double t62104 = t62103*t62097*(1.0/2.0);
                double t62105 = t62104+1.0;
                double t62106 = log(t62105);
                double t62107 = a1p*c*t62091;
                double t62108 = t62107+1.0;
                double t62109 = 1.0/pow(rho_a[index],8.0/3.0);
                double t62110 = gamma_aa[index]*gamma_aa[index];
                double t62111 = gcaa*gcaa;
                double t62112 = t62111*t62111;
                double t62113 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t62114 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t62115 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t62116 = gamma_aa[index]*gcaa*t62109;
                double t62117 = t62116+1.0;
                double t62118 = gamma_aa[index]*gcaa*t62109*3.0;
                double t62119 = gamma_aa[index]*gcaa*t62110*t62111*t62115;
                double t62120 = t62110*t62111*t62114*3.0;
                double t62121 = t62120+t62118+t62119+1.0;
                double t62122 = t62110*t62110;
                double t62123 = gamma_aa[index]*gcaa*t62109*4.0;
                double t62124 = gamma_aa[index]*gcaa*t62110*t62111*t62115*4.0;
                double t62125 = t62110*t62111*t62114*6.0;
                double t62126 = t62112*t62113*t62122;
                double t62127 = t62123+t62124+t62125+t62126+1.0;
                double t62128 = gamma_aa[index]*gcaa*t62109*2.0;
                double t62129 = t62110*t62111*t62114;
                double t62130 = t62128+t62129+1.0;
                double t62131 = gx*gx;
                double t62132 = t62131*t62131;
                double t62133 = gamma_aa[index]*gx*t62109;
                double t62134 = t62133+1.0;
                double t62135 = gamma_aa[index]*gx*t62109*3.0;
                double t62136 = gamma_aa[index]*gx*t62110*t62131*t62115;
                double t62137 = t62110*t62131*t62114*3.0;
                double t62138 = t62135+t62136+t62137+1.0;
                double t62139 = gamma_aa[index]*gx*t62109*4.0;
                double t62140 = gamma_aa[index]*gx*t62110*t62131*t62115*4.0;
                double t62141 = t62110*t62131*t62114*6.0;
                double t62142 = t62113*t62122*t62132;
                double t62143 = t62140+t62141+t62142+t62139+1.0;
                double t62144 = gamma_aa[index]*gx*t62109*2.0;
                double t62145 = t62110*t62131*t62114;
                double t62146 = t62144+t62145+1.0;
                double t62147 = pow(2.0,1.0/3.0);
                double t62148 = t62147*2.0;
                double t62149 = t62148-2.0;
                double t62150 = two_13*2.0;
                double t62151 = t62150-2.0;
                double t62152 = 1.0/t62151;
                double t62153 = 1.0/c0f;
                double t62154 = b1f*t62093;
                double t62155 = b3f*t62094;
                double t62156 = b4f*t62095*t62096;
                double t62157 = b2f*c*t62091;
                double t62158 = t62154+t62155+t62156+t62157;
                double t62159 = 1.0/t62158;
                double t62160 = t62153*t62159*(1.0/2.0);
                double t62161 = t62160+1.0;
                double t62162 = log(t62161);
                double t62163 = a1f*c*t62091;
                double t62164 = t62163+1.0;
                double t62165 = c0f*t62162*t62164*2.0;
                double t62166 = c0p*t62106*t62108*2.0;
                double t62167 = 1.0/t62117;
                double t62168 = 1.0/t62127;
                double t62169 = 1.0/t62130;
                double t62170 = 1.0/t62121;
                double t62171 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t62172 = 1.0/(t62117*t62117);
                double t62173 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t62174 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t62175 = 1.0/(t62121*t62121);
                double t62176 = 1.0/(t62130*t62130);
                double t62177 = gcaa*t62109*3.0;
                double t62178 = gamma_aa[index]*t62111*t62114*6.0;
                double t62179 = gcaa*t62110*t62111*t62115*3.0;
                double t62180 = t62177+t62178+t62179;
                double t62181 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t62182 = 1.0/(t62127*t62127);
                double t62183 = gcaa*t62109*4.0;
                double t62184 = gamma_aa[index]*t62111*t62114*1.2E1;
                double t62185 = gcaa*t62110*t62111*t62115*1.2E1;
                double t62186 = gamma_aa[index]*t62110*t62112*t62113*4.0;
                double t62187 = t62183+t62184+t62185+t62186;
                double t62188 = gcaa*t62109*2.0;
                double t62189 = gamma_aa[index]*t62111*t62114*2.0;
                double t62190 = t62188+t62189;
                double t62191 = gamma_aa[index]*gcaa*t62174*(1.6E1/3.0);
                double t62192 = t62110*t62111*t62171*(1.6E1/3.0);
                double t62193 = t62191+t62192;
                double t62194 = gamma_aa[index]*gcaa*t62174*8.0;
                double t62195 = gamma_aa[index]*gcaa*t62110*t62111*t62173*8.0;
                double t62196 = t62110*t62111*t62171*1.6E1;
                double t62197 = t62194+t62195+t62196;
                double t62198 = gamma_aa[index]*gcaa*t62174*(3.2E1/3.0);
                double t62199 = gamma_aa[index]*gcaa*t62110*t62111*t62173*3.2E1;
                double t62200 = t62110*t62111*t62171*3.2E1;
                double t62201 = t62112*t62122*t62181*(3.2E1/3.0);
                double t62202 = t62200+t62201+t62198+t62199;
                double t62203 = 1.0/pow(rho_a[index],4.0/3.0);
                double t62204 = 1.0/pow(rho_a[index],5.0/3.0);
                double t62205 = 1.0/sqrt(t62092);
                double t62206 = 1.0/t62105;
                double t62207 = 1.0/(t62102*t62102);
                double t62208 = b4p*t62204*t62095*(2.0/3.0);
                double t62209 = b2p*c*t62203*(1.0/3.0);
                double t62210 = b1p*c*t62203*t62205*(1.0/6.0);
                double t62211 = b3p*c*t62203*t62093*(1.0/2.0);
                double t62212 = t62210+t62211+t62208+t62209;
                double t62213 = t62212*t62206*t62108*t62207;
                double t62214 = ccaa1*gcaa*t62109*t62167;
                double t62215 = ccaa4*gamma_aa[index]*t62110*t62112*t62113*t62168*4.0;
                double t62216 = ccaa2*gamma_aa[index]*t62111*t62114*t62169*2.0;
                double t62217 = ccaa3*gcaa*t62110*t62111*t62115*t62170*3.0;
                double t62218 = t62214+t62215+t62216+t62217-ccaa1*gamma_aa[index]*t62111*t62114*t62172-ccaa2*t62110* \
                   t62111*t62114*t62190*t62176-ccaa4*t62112*t62113*t62122*t62182*t62187-ccaa3*gamma_aa[index]*gcaa*t62110* \
                   t62111*t62115*t62180*t62175;
                double t62219 = 1.0/t62134;
                double t62220 = 1.0/t62143;
                double t62221 = 1.0/t62146;
                double t62222 = 1.0/t62138;
                double t62223 = 1.0/(t62134*t62134);
                double t62224 = 1.0/(t62138*t62138);
                double t62225 = 1.0/(t62146*t62146);
                double t62226 = gx*t62109*3.0;
                double t62227 = gamma_aa[index]*t62131*t62114*6.0;
                double t62228 = gx*t62110*t62131*t62115*3.0;
                double t62229 = t62226+t62227+t62228;
                double t62230 = 1.0/(t62143*t62143);
                double t62231 = gx*t62109*4.0;
                double t62232 = gamma_aa[index]*t62131*t62114*1.2E1;
                double t62233 = gx*t62110*t62131*t62115*1.2E1;
                double t62234 = gamma_aa[index]*t62110*t62113*t62132*4.0;
                double t62235 = t62231+t62232+t62233+t62234;
                double t62236 = gx*t62109*2.0;
                double t62237 = gamma_aa[index]*t62131*t62114*2.0;
                double t62238 = t62236+t62237;
                double t62239 = gamma_aa[index]*gx*t62174*(1.6E1/3.0);
                double t62240 = t62110*t62131*t62171*(1.6E1/3.0);
                double t62241 = t62240+t62239;
                double t62242 = gamma_aa[index]*gx*t62174*8.0;
                double t62243 = gamma_aa[index]*gx*t62110*t62131*t62173*8.0;
                double t62244 = t62110*t62131*t62171*1.6E1;
                double t62245 = t62242+t62243+t62244;
                double t62246 = gamma_aa[index]*gx*t62174*(3.2E1/3.0);
                double t62247 = gamma_aa[index]*gx*t62110*t62131*t62173*3.2E1;
                double t62248 = t62110*t62131*t62171*3.2E1;
                double t62249 = t62122*t62132*t62181*(3.2E1/3.0);
                double t62250 = t62246+t62247+t62248+t62249;
                v_rho_a_gamma_aa_[index] = -t62218*(t62166+t62152*t62149*(t62165-c0p*t62106*t62108*2.0))+rho_a[index]* \
                   t62218*(-t62213+t62152*t62149*(t62213-(t62164*1.0/(t62158*t62158)*(b2f*c*t62203*(1.0/3.0)+b4f*t62204* \
                   t62095*(2.0/3.0)+b1f*c*t62203*t62205*(1.0/6.0)+b3f*c*t62203*t62093*(1.0/2.0)))/t62161+a1f*c*c0f*t62203* \
                   t62162*(2.0/3.0)-a1p*c*c0p*t62203*t62106*(2.0/3.0))+a1p*c*c0p*t62203*t62106*(2.0/3.0))-rho_a[index]* \
                   (t62166+t62152*t62149*(t62165-t62166))*(ccaa1*gcaa*t62174*t62167*(-8.0/3.0)+ccaa1*gamma_aa[index]* \
                   t62111*t62171*t62172*8.0-ccaa2*gamma_aa[index]*t62111*t62171*t62169*(3.2E1/3.0)+ccaa2*t62110*t62111* \
                   t62171*t62190*t62176*(1.6E1/3.0)+ccaa4*t62112*t62122*t62181*t62182*t62187*(3.2E1/3.0)+ccaa4*t62112* \
                   t62113*t62122*t62182*(gcaa*t62174*(3.2E1/3.0)+gamma_aa[index]*t62111*t62171*6.4E1+gamma_aa[index]* \
                   t62110*t62112*t62181*(1.28E2/3.0)+gcaa*t62110*t62111*t62173*9.6E1)-ccaa1*gcaa*t62110*t62111*1.0/(t62117* \
                   t62117*t62117)*t62173*(1.6E1/3.0)+ccaa2*t62110*t62111*t62114*t62176*(gcaa*t62174*(1.6E1/3.0)+gamma_aa[index]* \
                   t62111*t62171*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t62110*t62112*t62181*t62168*(1.28E2/3.0)+ccaa2*gamma_aa[index]* \
                   t62111*t62114*t62193*t62176*2.0-ccaa3*gcaa*t62110*t62111*t62170*t62173*2.4E1+ccaa4*gamma_aa[index]* \
                   t62110*t62112*t62202*t62113*t62182*4.0+ccaa3*gcaa*t62110*t62111*t62115*t62175*t62197*3.0-ccaa2*t62110* \
                   t62111*1.0/(t62130*t62130*t62130)*t62114*t62190*t62193*2.0-ccaa4*t62112*t62202*t62113*t62122*1.0/(t62127* \
                   t62127*t62127)*t62187*2.0+ccaa3*gamma_aa[index]*gcaa*t62110*t62111*t62115*t62175*(gcaa*t62174*8.0+ \
                   gamma_aa[index]*t62111*t62171*3.2E1+gcaa*t62110*t62111*t62173*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t62110* \
                   t62111*t62180*t62173*t62175*8.0-ccaa3*gamma_aa[index]*gcaa*t62110*t62111*1.0/(t62121*t62121*t62121) \
                   *t62115*t62180*t62197*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t62174*t62219*(-8.0/3.0)+cx1*gamma_aa[index]* \
                   t62131*t62223*t62171*8.0-cx2*gamma_aa[index]*t62131*t62221*t62171*(3.2E1/3.0)+cx2*t62110*t62131*t62171* \
                   t62225*t62238*(1.6E1/3.0)+cx4*t62122*t62230*t62132*t62181*t62235*(3.2E1/3.0)+cx4*t62113*t62122*t62230* \
                   t62132*(gx*t62174*(3.2E1/3.0)+gamma_aa[index]*t62131*t62171*6.4E1+gamma_aa[index]*t62110*t62132*t62181* \
                   (1.28E2/3.0)+gx*t62110*t62131*t62173*9.6E1)-cx1*gx*t62110*t62131*1.0/(t62134*t62134*t62134)*t62173* \
                   (1.6E1/3.0)+cx2*t62110*t62131*t62114*t62225*(gx*t62174*(1.6E1/3.0)+gamma_aa[index]*t62131*t62171*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t62131*t62114*t62241*t62225*2.0-cx4*gamma_aa[index]*t62110*t62220*t62132* \
                   t62181*(1.28E2/3.0)-cx3*gx*t62110*t62131*t62222*t62173*2.4E1+cx4*gamma_aa[index]*t62110*t62113*t62230* \
                   t62132*t62250*4.0+cx3*gx*t62110*t62131*t62115*t62224*t62245*3.0-cx2*t62110*t62131*t62114*t62241*1.0/ \
                   (t62146*t62146*t62146)*t62238*2.0-cx4*t62113*t62122*t62132*t62250*1.0/(t62143*t62143*t62143)*t62235* \
                   2.0+cx3*gamma_aa[index]*gx*t62110*t62131*t62115*t62224*(gx*t62174*8.0+gamma_aa[index]*t62131*t62171* \
                   3.2E1+gx*t62110*t62131*t62173*2.4E1)+cx3*gamma_aa[index]*gx*t62110*t62131*t62224*t62173*t62229*8.0- \
                   cx3*gamma_aa[index]*gx*t62110*t62131*t62115*t62245*1.0/(t62138*t62138*t62138)*t62229*2.0)+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t62109*t62219-cx1*gamma_aa[index]*t62131*t62114*t62223+cx2*gamma_aa[index]*t62131*t62221* \
                   t62114*2.0-cx2*t62110*t62131*t62114*t62225*t62238-cx4*t62113*t62122*t62230*t62132*t62235+cx4*gamma_aa[index]* \
                   t62110*t62220*t62113*t62132*4.0+cx3*gx*t62110*t62131*t62222*t62115*3.0-cx3*gamma_aa[index]*gx*t62110* \
                   t62131*t62115*t62224*t62229)*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t59841 = rho_a[index]+rho_b[index];
                double t59842 = 1.0/pow(t59841,1.0/3.0);
                double t59843 = c*t59842;
                double t59844 = sqrt(t59843);
                double t59845 = b1p*t59844;
                double t59846 = pow(t59843,3.0/2.0);
                double t59847 = b3p*t59846;
                double t59848 = c*c;
                double t59849 = 1.0/pow(t59841,2.0/3.0);
                double t59850 = b4p*t59848*t59849;
                double t59851 = b2p*c*t59842;
                double t59852 = t59850+t59851+t59845+t59847;
                double t59853 = 1.0/pow(t59841,4.0/3.0);
                double t59854 = 1.0/c0p;
                double t59855 = 1.0/t59852;
                double t59856 = t59854*t59855*(1.0/2.0);
                double t59857 = t59856+1.0;
                double t59858 = a1p*c*t59842;
                double t59859 = t59858+1.0;
                double t59860 = rho_a[index]-rho_b[index];
                double t59861 = t59860*t59860;
                double t59862 = 1.0/t59841;
                double t59863 = t59860*t59862;
                double t59864 = two_13*2.0;
                double t59865 = t59864-2.0;
                double t59866 = 1.0/t59865;
                double t59867 = 1.0/c0f;
                double t59868 = b1f*t59844;
                double t59869 = b3f*t59846;
                double t59870 = b4f*t59848*t59849;
                double t59871 = b2f*c*t59842;
                double t59872 = t59870+t59871+t59868+t59869;
                double t59873 = 1.0/t59872;
                double t59874 = t59873*t59867*(1.0/2.0);
                double t59875 = t59874+1.0;
                double t59876 = log(t59875);
                double t59877 = a1f*c*t59842;
                double t59878 = t59877+1.0;
                double t59879 = log(t59857);
                double t59889 = c0f*t59876*t59878*2.0;
                double t59890 = c0p*t59859*t59879*2.0;
                double t59880 = -t59890+t59889;
                double t59881 = t59863+1.0;
                double t59882 = pow(t59881,4.0/3.0);
                double t59883 = -t59863+1.0;
                double t59884 = pow(t59883,4.0/3.0);
                double t59885 = t59882+t59884-2.0;
                double t59886 = 1.0/(t59841*t59841);
                double t59917 = t59860*t59886;
                double t59887 = t59862-t59917;
                double t59888 = 1.0/(t59841*t59841*t59841*t59841);
                double t59891 = t59861*t59861;
                double t59892 = 1.0/pow(t59841,5.0/3.0);
                double t59893 = 1.0/sqrt(t59843);
                double t59894 = 1.0/t59857;
                double t59895 = 1.0/(t59852*t59852);
                double t59896 = b4p*t59892*t59848*(2.0/3.0);
                double t59897 = b2p*c*t59853*(1.0/3.0);
                double t59898 = b1p*c*t59853*t59893*(1.0/6.0);
                double t59899 = b3p*c*t59844*t59853*(1.0/2.0);
                double t59900 = t59896+t59897+t59898+t59899;
                double t59901 = t59900*t59894*t59859*t59895;
                double t59902 = 1.0/(t59841*t59841*t59841*t59841*t59841);
                double t59903 = 1.0/d2fz0;
                double t59904 = 1.0/Aa;
                double t59905 = b1a*t59844;
                double t59906 = b3a*t59846;
                double t59907 = b4a*t59848*t59849;
                double t59908 = b2a*c*t59842;
                double t59909 = t59905+t59906+t59907+t59908;
                double t59910 = 1.0/t59909;
                double t59911 = t59910*t59904*(1.0/2.0);
                double t59912 = t59911+1.0;
                double t59913 = log(t59912);
                double t59914 = a1a*c*t59842;
                double t59915 = t59914+1.0;
                double t59916 = pow(t59881,1.0/3.0);
                double t59918 = t59916*t59887*(4.0/3.0);
                double t59919 = pow(t59883,1.0/3.0);
                double t59920 = t59918-t59919*t59887*(4.0/3.0);
                double t59921 = t59891*t59888;
                double t59922 = t59921-1.0;
                double t59923 = 1.0/pow(rho_a[index],1.0/3.0);
                double t59924 = c*t59923;
                double t59925 = sqrt(t59924);
                double t59926 = b1f*t59925;
                double t59927 = pow(t59924,3.0/2.0);
                double t59928 = b3f*t59927;
                double t59929 = 1.0/pow(rho_a[index],2.0/3.0);
                double t59930 = b4f*t59848*t59929;
                double t59931 = b2f*c*t59923;
                double t59932 = t59930+t59931+t59926+t59928;
                double t59933 = 1.0/pow(rho_a[index],4.0/3.0);
                double t59934 = b1p*t59925;
                double t59935 = b3p*t59927;
                double t59936 = b4p*t59848*t59929;
                double t59937 = b2p*c*t59923;
                double t59938 = t59934+t59935+t59936+t59937;
                double t59939 = 1.0/pow(rho_a[index],5.0/3.0);
                double t59940 = 1.0/sqrt(t59924);
                double t59941 = 1.0/t59932;
                double t59942 = t59941*t59867*(1.0/2.0);
                double t59943 = t59942+1.0;
                double t59944 = 1.0/t59938;
                double t59945 = t59854*t59944*(1.0/2.0);
                double t59946 = t59945+1.0;
                double t59947 = a1p*c*t59923;
                double t59948 = t59947+1.0;
                double t59949 = 1.0/t59946;
                double t59950 = 1.0/(t59938*t59938);
                double t59951 = b4p*t59848*t59939*(2.0/3.0);
                double t59952 = b2p*c*t59933*(1.0/3.0);
                double t59953 = b1p*c*t59940*t59933*(1.0/6.0);
                double t59954 = b3p*c*t59933*t59925*(1.0/2.0);
                double t59955 = t59951+t59952+t59953+t59954;
                double t59956 = t59950*t59955*t59948*t59949;
                double t59957 = log(t59946);
                double t59958 = pow(2.0,1.0/3.0);
                double t59959 = t59958*2.0;
                double t59960 = t59959-2.0;
                double t59961 = log(t59943);
                double t59962 = a1f*c*t59923;
                double t59963 = t59962+1.0;
                double t59964 = 1.0/pow(rho_b[index],8.0/3.0);
                double t59965 = 1.0/pow(rho_a[index],8.0/3.0);
                double t59966 = gamma_aa[index]*t59965*(1.0/2.0);
                double t59967 = gamma_bb[index]*t59964*(1.0/2.0);
                double t59968 = t59966+t59967;
                double t59969 = gcab*t59968;
                double t59970 = t59969+1.0;
                double t59971 = gcab*gcab;
                double t59972 = t59968*t59968;
                double t59973 = t59971*t59971;
                double t59974 = t59972*t59972;
                double t59975 = t59971*t59972;
                double t59976 = gcab*t59968*2.0;
                double t59977 = t59975+t59976+1.0;
                double t59978 = t59971*t59972*3.0;
                double t59979 = gcab*t59971*t59972*t59968;
                double t59980 = gcab*t59968*3.0;
                double t59981 = t59980+t59978+t59979+1.0;
                double t59982 = t59971*t59972*6.0;
                double t59983 = gcab*t59971*t59972*t59968*4.0;
                double t59984 = t59973*t59974;
                double t59985 = gcab*t59968*4.0;
                double t59986 = t59982+t59983+t59984+t59985+1.0;
                double t59987 = c0f*t59961*t59963*2.0;
                double t59989 = c0p*t59948*t59957*2.0;
                double t59988 = t59987-t59989;
                double t59990 = 1.0/pow(rho_b[index],1.0/3.0);
                double t59991 = c*t59990;
                double t59992 = sqrt(t59991);
                double t59993 = pow(t59991,3.0/2.0);
                double t59994 = 1.0/pow(rho_b[index],2.0/3.0);
                double t59995 = b1p*t59992;
                double t59996 = b3p*t59993;
                double t59997 = b4p*t59848*t59994;
                double t59998 = b2p*c*t59990;
                double t59999 = t59995+t59996+t59997+t59998;
                double t60000 = 1.0/t59999;
                double t60001 = t59854*t60000*(1.0/2.0);
                double t60002 = t60001+1.0;
                double t60003 = log(t60002);
                double t60004 = a1p*c*t59990;
                double t60005 = t60004+1.0;
                double t60006 = c0p*t60003*t60005*2.0;
                double t60007 = t59880*t59891*t59866*t59885*t59888;
                double t60008 = Aa*t59903*t59913*t59922*t59915*t59866*t59885*2.0;
                double t60009 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t60010 = 1.0/(t59981*t59981);
                double t60011 = 1.0/(t59986*t59986);
                double t60012 = gcab*t59964*2.0;
                double t60013 = t59971*t59964*t59968*6.0;
                double t60014 = gcab*t59971*t59972*t59964*6.0;
                double t60015 = t59972*t59964*t59973*t59968*2.0;
                double t60016 = t60012+t60013+t60014+t60015;
                double t60017 = 1.0/(t59977*t59977);
                double t60018 = gamma_aa[index]*gcab*t60009*(8.0/3.0);
                double t60019 = gamma_aa[index]*t59971*t59968*t60009*(8.0/3.0);
                double t60020 = t60018+t60019;
                double t60021 = gcab*t59964;
                double t60022 = t59971*t59964*t59968;
                double t60023 = t60021+t60022;
                double t60024 = gamma_aa[index]*gcab*t60009*(1.6E1/3.0);
                double t60025 = gamma_aa[index]*gcab*t59971*t59972*t60009*1.6E1;
                double t60026 = gamma_aa[index]*t59972*t59973*t59968*t60009*(1.6E1/3.0);
                double t60027 = gamma_aa[index]*t59971*t59968*t60009*1.6E1;
                double t60028 = t60024+t60025+t60026+t60027;
                double t60029 = 1.0/(t59970*t59970);
                double t60030 = 1.0/t59977;
                double t60031 = gcab*t59964*(3.0/2.0);
                double t60032 = t59971*t59964*t59968*3.0;
                double t60033 = gcab*t59971*t59972*t59964*(3.0/2.0);
                double t60034 = t60031+t60032+t60033;
                double t60035 = gamma_aa[index]*gcab*t60009*4.0;
                double t60036 = gamma_aa[index]*gcab*t59971*t59972*t60009*4.0;
                double t60037 = gamma_aa[index]*t59971*t59968*t60009*8.0;
                double t60038 = t60035+t60036+t60037;
                double t60039 = 1.0/t59981;
                double t60040 = 1.0/t59986;
                v_rho_a_gamma_bb_[index] = -(t59890+t60007+t60008+t59841*(t59901-t59891*t59866*t59885*t59888*(t59901- \
                   (1.0/(t59872*t59872)*t59878*(b2f*c*t59853*(1.0/3.0)+b4f*t59892*t59848*(2.0/3.0)+b1f*c*t59853*t59893* \
                   (1.0/6.0)+b3f*c*t59844*t59853*(1.0/2.0)))/t59875+a1f*c*c0f*t59853*t59876*(2.0/3.0)-a1p*c*c0p*t59853* \
                   t59879*(2.0/3.0))-a1p*c*c0p*t59853*t59879*(2.0/3.0)-t59902*t59880*t59891*t59866*t59885*4.0+t59920* \
                   t59880*t59891*t59866*t59888+t59860*t59861*t59880*t59866*t59885*t59888*4.0-Aa*t59903*t59913*t59915* \
                   t59866*t59885*(t59902*t59891*4.0-t59860*t59861*t59888*4.0)*2.0+Aa*t59920*t59903*t59913*t59922*t59915* \
                   t59866*2.0+(t59903*t59922*t59915*1.0/(t59909*t59909)*t59866*t59885*(b2a*c*t59853*(1.0/3.0)+b4a*t59892* \
                   t59848*(2.0/3.0)+b1a*c*t59853*t59893*(1.0/6.0)+b3a*c*t59844*t59853*(1.0/2.0)))/t59912-Aa*a1a*c*t59903* \
                   t59913*t59922*t59853*t59866*t59885*(2.0/3.0))+rho_a[index]*(-t59956+t59960*t59866*(t59956-(1.0/(t59932* \
                   t59932)*t59963*(b2f*c*t59933*(1.0/3.0)+b4f*t59848*t59939*(2.0/3.0)+b1f*c*t59940*t59933*(1.0/6.0)+b3f* \
                   c*t59933*t59925*(1.0/2.0)))/t59943+a1f*c*c0f*t59933*t59961*(2.0/3.0)-a1p*c*c0p*t59933*t59957*(2.0/ \
                   3.0))+a1p*c*c0p*t59933*t59957*(2.0/3.0))-c0p*t59948*t59957*2.0-t59960*t59866*t59988)*((ccab1*gcab* \
                   t59964*(1.0/2.0))/t59970+ccab2*t59971*t59964*t59968*t60030-ccab1*t59971*t59964*t59968*t60029*(1.0/ \
                   2.0)-ccab2*t59971*t59972*t60023*t60017-ccab4*t59973*t59974*t60011*t60016+ccab4*t59972*t59964*t59973* \
                   t59968*t60040*2.0+ccab3*gcab*t59971*t59972*t59964*t60039*(3.0/2.0)-ccab3*gcab*t59971*t59972*t59968* \
                   t60010*t60034)+(rho_a[index]*(t59989+t59960*t59866*t59988)+rho_b[index]*(t60006-t59960*t59866*(t60006- \
                   c0f*log((t59867*(1.0/2.0))/(b1f*t59992+b3f*t59993+b2f*c*t59990+b4f*t59848*t59994)+1.0)*(a1f*c*t59990+ \
                   1.0)*2.0))-t59841*(t59890+t60007+t60008))*(ccab4*t59973*t59974*t60011*(gamma_aa[index]*t59971*t59964* \
                   t60009*8.0+gamma_aa[index]*t59972*t59964*t59973*t60009*8.0+gamma_aa[index]*gcab*t59971*t59964*t59968* \
                   t60009*1.6E1)+ccab2*t59971*t59964*t59968*t60020*t60017-ccab2*t59971*t59972*1.0/(t59977*t59977*t59977) \
                   *t60020*t60023*2.0-ccab4*t59973*t59974*1.0/(t59986*t59986*t59986)*t60016*t60028*2.0-ccab2*gamma_aa[index]* \
                   t59971*t59964*t60030*t60009*(4.0/3.0)+ccab1*gamma_aa[index]*t59971*t59964*t60009*t60029*(4.0/3.0)- \
                   ccab4*gamma_aa[index]*t59972*t59964*t59973*t60040*t60009*8.0+ccab2*gamma_aa[index]*t59972*t59964*t59973* \
                   t60017*t60009*(4.0/3.0)+ccab2*gamma_aa[index]*t59971*t59968*t60023*t60017*t60009*(8.0/3.0)+ccab3*gcab* \
                   t59971*t59972*t59964*t60010*t60038*(3.0/2.0)+ccab4*t59972*t59964*t59973*t59968*t60011*t60028*2.0+ccab3* \
                   gcab*t59971*t59972*t59968*t60010*(gamma_aa[index]*t59971*t59964*t60009*4.0+gamma_aa[index]*gcab*t59971* \
                   t59964*t59968*t60009*4.0)-ccab1*gamma_aa[index]*gcab*1.0/(t59970*t59970*t59970)*t59971*t59964*t59968* \
                   t60009*(4.0/3.0)-ccab3*gcab*t59971*t59972*1.0/(t59981*t59981*t59981)*t59968*t60034*t60038*2.0-ccab3* \
                   gamma_aa[index]*gcab*t59971*t59964*t59968*t60009*t60039*4.0+ccab3*gamma_aa[index]*gcab*t59971*t59972* \
                   t60010*t60034*t60009*4.0+ccab4*gamma_aa[index]*t59972*t59973*t59968*t60011*t60016*t60009*(1.6E1/3.0) \
                   );
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t60042 = rho_a[index]+rho_b[index];
                double t60043 = 1.0/pow(t60042,1.0/3.0);
                double t60044 = c*t60043;
                double t60045 = sqrt(t60044);
                double t60046 = b1p*t60045;
                double t60047 = pow(t60044,3.0/2.0);
                double t60048 = b3p*t60047;
                double t60049 = c*c;
                double t60050 = 1.0/pow(t60042,2.0/3.0);
                double t60051 = b4p*t60050*t60049;
                double t60052 = b2p*c*t60043;
                double t60053 = t60051+t60052+t60046+t60048;
                double t60054 = 1.0/pow(t60042,4.0/3.0);
                double t60055 = 1.0/c0p;
                double t60056 = 1.0/t60053;
                double t60057 = t60055*t60056*(1.0/2.0);
                double t60058 = t60057+1.0;
                double t60059 = a1p*c*t60043;
                double t60060 = t60059+1.0;
                double t60061 = rho_a[index]-rho_b[index];
                double t60062 = t60061*t60061;
                double t60063 = 1.0/t60042;
                double t60064 = t60061*t60063;
                double t60065 = two_13*2.0;
                double t60066 = t60065-2.0;
                double t60067 = 1.0/t60066;
                double t60068 = 1.0/c0f;
                double t60069 = b1f*t60045;
                double t60070 = b3f*t60047;
                double t60071 = b4f*t60050*t60049;
                double t60072 = b2f*c*t60043;
                double t60073 = t60070+t60071+t60072+t60069;
                double t60074 = 1.0/t60073;
                double t60075 = t60074*t60068*(1.0/2.0);
                double t60076 = t60075+1.0;
                double t60077 = log(t60076);
                double t60078 = a1f*c*t60043;
                double t60079 = t60078+1.0;
                double t60080 = log(t60058);
                double t60091 = c0f*t60077*t60079*2.0;
                double t60092 = c0p*t60060*t60080*2.0;
                double t60081 = t60091-t60092;
                double t60082 = t60064+1.0;
                double t60083 = pow(t60082,4.0/3.0);
                double t60084 = -t60064+1.0;
                double t60085 = pow(t60084,4.0/3.0);
                double t60086 = t60083+t60085-2.0;
                double t60087 = 1.0/(t60042*t60042);
                double t60088 = t60061*t60087;
                double t60089 = t60063+t60088;
                double t60090 = 1.0/(t60042*t60042*t60042*t60042);
                double t60093 = t60062*t60062;
                double t60094 = 1.0/pow(t60042,5.0/3.0);
                double t60095 = 1.0/sqrt(t60044);
                double t60096 = 1.0/t60058;
                double t60097 = 1.0/(t60053*t60053);
                double t60098 = b4p*t60049*t60094*(2.0/3.0);
                double t60099 = b2p*c*t60054*(1.0/3.0);
                double t60100 = b1p*c*t60054*t60095*(1.0/6.0);
                double t60101 = b3p*c*t60045*t60054*(1.0/2.0);
                double t60102 = t60100+t60101+t60098+t60099;
                double t60103 = 1.0/(t60042*t60042*t60042*t60042*t60042);
                double t60104 = 1.0/d2fz0;
                double t60105 = 1.0/Aa;
                double t60106 = b1a*t60045;
                double t60107 = b3a*t60047;
                double t60108 = b4a*t60050*t60049;
                double t60109 = b2a*c*t60043;
                double t60110 = t60106+t60107+t60108+t60109;
                double t60111 = 1.0/t60110;
                double t60112 = t60111*t60105*(1.0/2.0);
                double t60113 = t60112+1.0;
                double t60114 = log(t60113);
                double t60115 = a1a*c*t60043;
                double t60116 = t60115+1.0;
                double t60117 = pow(t60082,1.0/3.0);
                double t60118 = t60117*t60089*(4.0/3.0);
                double t60119 = pow(t60084,1.0/3.0);
                double t60120 = t60118-t60119*t60089*(4.0/3.0);
                double t60121 = t60090*t60093;
                double t60122 = t60121-1.0;
                double t60123 = 1.0/pow(rho_b[index],1.0/3.0);
                double t60124 = c*t60123;
                double t60125 = sqrt(t60124);
                double t60126 = b1f*t60125;
                double t60127 = pow(t60124,3.0/2.0);
                double t60128 = b3f*t60127;
                double t60129 = 1.0/pow(rho_b[index],2.0/3.0);
                double t60130 = b4f*t60129*t60049;
                double t60131 = b2f*c*t60123;
                double t60132 = t60130+t60131+t60126+t60128;
                double t60133 = 1.0/pow(rho_b[index],4.0/3.0);
                double t60134 = b1p*t60125;
                double t60135 = b3p*t60127;
                double t60136 = b4p*t60129*t60049;
                double t60137 = b2p*c*t60123;
                double t60138 = t60134+t60135+t60136+t60137;
                double t60139 = 1.0/pow(rho_b[index],5.0/3.0);
                double t60140 = 1.0/sqrt(t60124);
                double t60141 = 1.0/t60132;
                double t60142 = t60141*t60068*(1.0/2.0);
                double t60143 = t60142+1.0;
                double t60144 = 1.0/t60138;
                double t60145 = t60144*t60055*(1.0/2.0);
                double t60146 = t60145+1.0;
                double t60147 = a1p*c*t60123;
                double t60148 = t60147+1.0;
                double t60149 = 1.0/t60146;
                double t60150 = 1.0/(t60138*t60138);
                double t60151 = b4p*t60049*t60139*(2.0/3.0);
                double t60152 = b2p*c*t60133*(1.0/3.0);
                double t60153 = b1p*c*t60140*t60133*(1.0/6.0);
                double t60154 = b3p*c*t60133*t60125*(1.0/2.0);
                double t60155 = t60151+t60152+t60153+t60154;
                double t60156 = t60150*t60155*t60148*t60149;
                double t60157 = log(t60146);
                double t60158 = pow(2.0,1.0/3.0);
                double t60159 = t60158*2.0;
                double t60160 = t60159-2.0;
                double t60161 = log(t60143);
                double t60162 = a1f*c*t60123;
                double t60163 = t60162+1.0;
                double t60164 = 1.0/pow(rho_a[index],8.0/3.0);
                double t60165 = gamma_aa[index]*t60164*(1.0/2.0);
                double t60166 = 1.0/pow(rho_b[index],8.0/3.0);
                double t60167 = gamma_bb[index]*t60166*(1.0/2.0);
                double t60168 = t60165+t60167;
                double t60169 = gcab*t60168;
                double t60170 = t60169+1.0;
                double t60171 = gcab*gcab;
                double t60172 = t60168*t60168;
                double t60173 = t60171*t60171;
                double t60174 = t60172*t60172;
                double t60175 = t60171*t60172;
                double t60176 = gcab*t60168*2.0;
                double t60177 = t60175+t60176+1.0;
                double t60178 = t60171*t60172*3.0;
                double t60179 = gcab*t60171*t60172*t60168;
                double t60180 = gcab*t60168*3.0;
                double t60181 = t60180+t60178+t60179+1.0;
                double t60182 = t60171*t60172*6.0;
                double t60183 = gcab*t60171*t60172*t60168*4.0;
                double t60184 = t60173*t60174;
                double t60185 = gcab*t60168*4.0;
                double t60186 = t60182+t60183+t60184+t60185+1.0;
                double t60187 = a1p*c*c0p*t60080*t60054*(2.0/3.0);
                double t60188 = 1.0/pow(rho_a[index],1.0/3.0);
                double t60189 = c*t60188;
                double t60190 = sqrt(t60189);
                double t60191 = pow(t60189,3.0/2.0);
                double t60192 = 1.0/pow(rho_a[index],2.0/3.0);
                double t60193 = b1p*t60190;
                double t60194 = b3p*t60191;
                double t60195 = b4p*t60192*t60049;
                double t60196 = b2p*c*t60188;
                double t60197 = t60193+t60194+t60195+t60196;
                double t60198 = 1.0/t60197;
                double t60199 = t60055*t60198*(1.0/2.0);
                double t60200 = t60199+1.0;
                double t60201 = log(t60200);
                double t60202 = a1p*c*t60188;
                double t60203 = t60202+1.0;
                double t60204 = c0p*t60201*t60203*2.0;
                double t60205 = c0f*t60161*t60163*2.0;
                double t60207 = c0p*t60148*t60157*2.0;
                double t60206 = t60205-t60207;
                double t60208 = t60081*t60090*t60093*t60067*t60086;
                double t60209 = Aa*t60104*t60122*t60114*t60116*t60067*t60086*2.0;
                double t60210 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t60211 = 1.0/(t60181*t60181);
                double t60212 = 1.0/(t60186*t60186);
                double t60213 = gcab*t60164*2.0;
                double t60214 = t60171*t60164*t60168*6.0;
                double t60215 = gcab*t60171*t60172*t60164*6.0;
                double t60216 = t60172*t60164*t60173*t60168*2.0;
                double t60217 = t60213+t60214+t60215+t60216;
                double t60218 = 1.0/(t60177*t60177);
                double t60219 = gamma_bb[index]*gcab*t60210*(8.0/3.0);
                double t60220 = gamma_bb[index]*t60210*t60171*t60168*(8.0/3.0);
                double t60221 = t60220+t60219;
                double t60222 = gcab*t60164;
                double t60223 = t60171*t60164*t60168;
                double t60224 = t60222+t60223;
                double t60225 = gamma_bb[index]*gcab*t60210*(1.6E1/3.0);
                double t60226 = gamma_bb[index]*gcab*t60210*t60171*t60172*1.6E1;
                double t60227 = gamma_bb[index]*t60210*t60172*t60173*t60168*(1.6E1/3.0);
                double t60228 = gamma_bb[index]*t60210*t60171*t60168*1.6E1;
                double t60229 = t60225+t60226+t60227+t60228;
                double t60230 = 1.0/(t60170*t60170);
                double t60231 = 1.0/t60177;
                double t60232 = gcab*t60164*(3.0/2.0);
                double t60233 = t60171*t60164*t60168*3.0;
                double t60234 = gcab*t60171*t60172*t60164*(3.0/2.0);
                double t60235 = t60232+t60233+t60234;
                double t60236 = gamma_bb[index]*gcab*t60210*4.0;
                double t60237 = gamma_bb[index]*gcab*t60210*t60171*t60172*4.0;
                double t60238 = gamma_bb[index]*t60210*t60171*t60168*8.0;
                double t60239 = t60236+t60237+t60238;
                double t60240 = 1.0/t60181;
                double t60241 = 1.0/t60186;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t60207+t60160*t60206*t60067)+rho_a[index]*(t60204-t60160* \
                   t60067*(t60204-c0f*log((t60068*(1.0/2.0))/(b1f*t60190+b3f*t60191+b2f*c*t60188+b4f*t60192*t60049)+1.0) \
                   *(a1f*c*t60188+1.0)*2.0))-t60042*(t60208+t60092+t60209))*(ccab4*t60212*t60173*t60174*(gamma_bb[index]* \
                   t60210*t60171*t60164*8.0+gamma_bb[index]*t60210*t60172*t60164*t60173*8.0+gamma_bb[index]*gcab*t60210* \
                   t60171*t60164*t60168*1.6E1)+ccab2*t60221*t60171*t60164*t60218*t60168-ccab2*t60221*t60224*t60171*t60172* \
                   1.0/(t60177*t60177*t60177)*2.0-ccab4*t60217*t60173*t60174*t60229*1.0/(t60186*t60186*t60186)*2.0+ccab1* \
                   gamma_bb[index]*t60210*t60230*t60171*t60164*(4.0/3.0)-ccab2*gamma_bb[index]*t60210*t60231*t60171*t60164* \
                   (4.0/3.0)-ccab4*gamma_bb[index]*t60210*t60241*t60172*t60164*t60173*8.0+ccab2*gamma_bb[index]*t60210* \
                   t60224*t60171*t60218*t60168*(8.0/3.0)+ccab2*gamma_bb[index]*t60210*t60172*t60164*t60173*t60218*(4.0/ \
                   3.0)+ccab3*gcab*t60211*t60171*t60172*t60164*t60239*(3.0/2.0)+ccab4*t60212*t60172*t60164*t60173*t60229* \
                   t60168*2.0+ccab3*gcab*t60211*t60171*t60172*t60168*(gamma_bb[index]*t60210*t60171*t60164*4.0+gamma_bb[index]* \
                   gcab*t60210*t60171*t60164*t60168*4.0)-ccab1*gamma_bb[index]*gcab*t60210*1.0/(t60170*t60170*t60170) \
                   *t60171*t60164*t60168*(4.0/3.0)-ccab3*gcab*t60171*t60172*1.0/(t60181*t60181*t60181)*t60235*t60239* \
                   t60168*2.0+ccab3*gamma_bb[index]*gcab*t60210*t60211*t60171*t60172*t60235*4.0-ccab3*gamma_bb[index]* \
                   gcab*t60210*t60240*t60171*t60164*t60168*4.0+ccab4*gamma_bb[index]*t60210*t60212*t60172*t60217*t60173* \
                   t60168*(1.6E1/3.0))-(t60208+t60092+t60209+rho_b[index]*(-t60156+t60160*t60067*(t60156-(1.0/(t60132* \
                   t60132)*t60163*(b2f*c*t60133*(1.0/3.0)+b4f*t60049*t60139*(2.0/3.0)+b1f*c*t60140*t60133*(1.0/6.0)+b3f* \
                   c*t60133*t60125*(1.0/2.0)))/t60143+a1f*c*c0f*t60133*t60161*(2.0/3.0)-a1p*c*c0p*t60133*t60157*(2.0/ \
                   3.0))+a1p*c*c0p*t60133*t60157*(2.0/3.0))-t60042*(t60187-t60102*t60060*t60096*t60097+t60120*t60081* \
                   t60090*t60093*t60067+t60103*t60081*t60093*t60067*t60086*4.0-t60090*t60093*t60067*t60086*(t60187-t60102* \
                   t60060*t60096*t60097+(1.0/(t60073*t60073)*t60079*(b2f*c*t60054*(1.0/3.0)+b4f*t60049*t60094*(2.0/3.0) \
                   +b1f*c*t60054*t60095*(1.0/6.0)+b3f*c*t60045*t60054*(1.0/2.0)))/t60076-a1f*c*c0f*t60054*t60077*(2.0/ \
                   3.0))+t60061*t60062*t60081*t60090*t60067*t60086*4.0+Aa*t60104*t60114*t60116*t60067*t60086*(t60103* \
                   t60093*4.0+t60061*t60062*t60090*4.0)*2.0+Aa*t60120*t60104*t60122*t60114*t60116*t60067*2.0-(1.0/(t60110* \
                   t60110)*t60104*t60122*t60116*t60067*t60086*(b2a*c*t60054*(1.0/3.0)+b4a*t60049*t60094*(2.0/3.0)+b1a* \
                   c*t60054*t60095*(1.0/6.0)+b3a*c*t60045*t60054*(1.0/2.0)))/t60113+Aa*a1a*c*t60104*t60122*t60114*t60054* \
                   t60067*t60086*(2.0/3.0))-c0p*t60148*t60157*2.0-t60160*t60206*t60067)*((ccab1*gcab*t60164*(1.0/2.0) \
                   )/t60170-ccab2*t60224*t60171*t60172*t60218-ccab1*t60230*t60171*t60164*t60168*(1.0/2.0)-ccab4*t60212* \
                   t60217*t60173*t60174+ccab2*t60231*t60171*t60164*t60168+ccab4*t60241*t60172*t60164*t60173*t60168*2.0+ \
                   ccab3*gcab*t60240*t60171*t60172*t60164*(3.0/2.0)-ccab3*gcab*t60211*t60171*t60172*t60235*t60168);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t60244 = 1.0/pow(rho_b[index],1.0/3.0);
                double t60245 = c*t60244;
                double t60246 = sqrt(t60245);
                double t60247 = pow(t60245,3.0/2.0);
                double t60248 = c*c;
                double t60249 = 1.0/pow(rho_b[index],2.0/3.0);
                double t60250 = 1.0/c0p;
                double t60251 = b1p*t60246;
                double t60252 = b3p*t60247;
                double t60253 = b4p*t60248*t60249;
                double t60254 = b2p*c*t60244;
                double t60255 = t60251+t60252+t60253+t60254;
                double t60256 = 1.0/t60255;
                double t60257 = t60250*t60256*(1.0/2.0);
                double t60258 = t60257+1.0;
                double t60259 = log(t60258);
                double t60260 = a1p*c*t60244;
                double t60261 = t60260+1.0;
                double t60262 = 1.0/pow(rho_b[index],8.0/3.0);
                double t60263 = gamma_bb[index]*gamma_bb[index];
                double t60264 = gcaa*gcaa;
                double t60265 = t60264*t60264;
                double t60266 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t60267 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t60268 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t60269 = gamma_bb[index]*gcaa*t60262;
                double t60270 = t60269+1.0;
                double t60271 = gamma_bb[index]*gcaa*t60262*3.0;
                double t60272 = gamma_bb[index]*gcaa*t60263*t60264*t60268;
                double t60273 = t60263*t60264*t60267*3.0;
                double t60274 = t60271+t60272+t60273+1.0;
                double t60275 = t60263*t60263;
                double t60276 = gamma_bb[index]*gcaa*t60262*4.0;
                double t60277 = gamma_bb[index]*gcaa*t60263*t60264*t60268*4.0;
                double t60278 = t60263*t60264*t60267*6.0;
                double t60279 = t60265*t60266*t60275;
                double t60280 = t60276+t60277+t60278+t60279+1.0;
                double t60281 = gamma_bb[index]*gcaa*t60262*2.0;
                double t60282 = t60263*t60264*t60267;
                double t60283 = t60281+t60282+1.0;
                double t60284 = rho_a[index]+rho_b[index];
                double t60285 = 1.0/pow(t60284,1.0/3.0);
                double t60286 = c*t60285;
                double t60287 = sqrt(t60286);
                double t60288 = b1p*t60287;
                double t60289 = pow(t60286,3.0/2.0);
                double t60290 = b3p*t60289;
                double t60291 = 1.0/pow(t60284,2.0/3.0);
                double t60292 = b4p*t60291*t60248;
                double t60293 = b2p*c*t60285;
                double t60294 = t60290+t60292+t60293+t60288;
                double t60295 = 1.0/pow(t60284,4.0/3.0);
                double t60296 = two_13*2.0;
                double t60297 = t60296-2.0;
                double t60298 = 1.0/t60297;
                double t60299 = 1.0/c0f;
                double t60300 = 1.0/t60294;
                double t60301 = t60300*t60250*(1.0/2.0);
                double t60302 = t60301+1.0;
                double t60303 = a1p*c*t60285;
                double t60304 = t60303+1.0;
                double t60305 = rho_a[index]-rho_b[index];
                double t60306 = t60305*t60305;
                double t60307 = 1.0/t60284;
                double t60308 = t60305*t60307;
                double t60309 = b1f*t60287;
                double t60310 = b3f*t60289;
                double t60311 = b4f*t60291*t60248;
                double t60312 = b2f*c*t60285;
                double t60313 = t60310+t60311+t60312+t60309;
                double t60314 = 1.0/t60313;
                double t60315 = t60314*t60299*(1.0/2.0);
                double t60316 = t60315+1.0;
                double t60317 = log(t60316);
                double t60318 = a1f*c*t60285;
                double t60319 = t60318+1.0;
                double t60320 = log(t60302);
                double t60331 = c0f*t60317*t60319*2.0;
                double t60332 = c0p*t60320*t60304*2.0;
                double t60321 = t60331-t60332;
                double t60322 = t60308+1.0;
                double t60323 = pow(t60322,4.0/3.0);
                double t60324 = -t60308+1.0;
                double t60325 = pow(t60324,4.0/3.0);
                double t60326 = t60323+t60325-2.0;
                double t60327 = 1.0/(t60284*t60284);
                double t60328 = t60305*t60327;
                double t60329 = t60307+t60328;
                double t60330 = 1.0/(t60284*t60284*t60284*t60284);
                double t60333 = t60306*t60306;
                double t60334 = 1.0/pow(t60284,5.0/3.0);
                double t60335 = 1.0/sqrt(t60286);
                double t60336 = 1.0/t60302;
                double t60337 = 1.0/(t60294*t60294);
                double t60338 = b4p*t60334*t60248*(2.0/3.0);
                double t60339 = b2p*c*t60295*(1.0/3.0);
                double t60340 = b1p*c*t60335*t60295*(1.0/6.0);
                double t60341 = b3p*c*t60295*t60287*(1.0/2.0);
                double t60342 = t60340+t60341+t60338+t60339;
                double t60343 = 1.0/(t60284*t60284*t60284*t60284*t60284);
                double t60344 = 1.0/d2fz0;
                double t60345 = 1.0/Aa;
                double t60346 = b1a*t60287;
                double t60347 = b3a*t60289;
                double t60348 = b4a*t60291*t60248;
                double t60349 = b2a*c*t60285;
                double t60350 = t60346+t60347+t60348+t60349;
                double t60351 = 1.0/t60350;
                double t60352 = t60351*t60345*(1.0/2.0);
                double t60353 = t60352+1.0;
                double t60354 = log(t60353);
                double t60355 = a1a*c*t60285;
                double t60356 = t60355+1.0;
                double t60357 = pow(t60322,1.0/3.0);
                double t60358 = t60329*t60357*(4.0/3.0);
                double t60359 = pow(t60324,1.0/3.0);
                double t60360 = t60358-t60329*t60359*(4.0/3.0);
                double t60361 = t60330*t60333;
                double t60362 = t60361-1.0;
                double t60363 = pow(2.0,1.0/3.0);
                double t60364 = t60363*2.0;
                double t60365 = t60364-2.0;
                double t60366 = a1f*c*t60244;
                double t60367 = t60366+1.0;
                double t60368 = b1f*t60246;
                double t60369 = b3f*t60247;
                double t60370 = b4f*t60248*t60249;
                double t60371 = b2f*c*t60244;
                double t60372 = t60370+t60371+t60368+t60369;
                double t60373 = 1.0/t60372;
                double t60374 = t60373*t60299*(1.0/2.0);
                double t60375 = t60374+1.0;
                double t60376 = 1.0/pow(rho_b[index],4.0/3.0);
                double t60377 = 1.0/pow(rho_b[index],5.0/3.0);
                double t60378 = 1.0/sqrt(t60245);
                double t60379 = log(t60375);
                double t60380 = 1.0/t60258;
                double t60381 = 1.0/(t60255*t60255);
                double t60382 = b4p*t60248*t60377*(2.0/3.0);
                double t60383 = b2p*c*t60376*(1.0/3.0);
                double t60384 = b1p*c*t60376*t60378*(1.0/6.0);
                double t60385 = b3p*c*t60246*t60376*(1.0/2.0);
                double t60386 = t60382+t60383+t60384+t60385;
                double t60387 = t60261*t60380*t60381*t60386;
                double t60388 = c0f*t60367*t60379*2.0;
                double t60389 = c0p*t60261*t60259*2.0;
                double t60390 = 1.0/pow(rho_a[index],8.0/3.0);
                double t60391 = gamma_aa[index]*t60390*(1.0/2.0);
                double t60392 = gamma_bb[index]*t60262*(1.0/2.0);
                double t60393 = t60391+t60392;
                double t60394 = gcab*t60393;
                double t60395 = t60394+1.0;
                double t60396 = gcab*gcab;
                double t60397 = t60393*t60393;
                double t60398 = t60396*t60396;
                double t60399 = t60397*t60397;
                double t60400 = t60396*t60397;
                double t60401 = gcab*t60393*2.0;
                double t60402 = t60400+t60401+1.0;
                double t60403 = t60396*t60397*3.0;
                double t60404 = gcab*t60393*t60396*t60397;
                double t60405 = gcab*t60393*3.0;
                double t60406 = t60403+t60404+t60405+1.0;
                double t60407 = t60396*t60397*6.0;
                double t60408 = gcab*t60393*t60396*t60397*4.0;
                double t60409 = t60398*t60399;
                double t60410 = gcab*t60393*4.0;
                double t60411 = t60410+t60407+t60408+t60409+1.0;
                double t60412 = a1p*c*c0p*t60320*t60295*(2.0/3.0);
                double t60413 = 1.0/pow(rho_a[index],1.0/3.0);
                double t60414 = c*t60413;
                double t60415 = sqrt(t60414);
                double t60416 = pow(t60414,3.0/2.0);
                double t60417 = 1.0/pow(rho_a[index],2.0/3.0);
                double t60418 = b1p*t60415;
                double t60419 = b3p*t60416;
                double t60420 = b4p*t60417*t60248;
                double t60421 = b2p*c*t60413;
                double t60422 = t60420+t60421+t60418+t60419;
                double t60423 = 1.0/t60422;
                double t60424 = t60250*t60423*(1.0/2.0);
                double t60425 = t60424+1.0;
                double t60426 = log(t60425);
                double t60427 = a1p*c*t60413;
                double t60428 = t60427+1.0;
                double t60429 = c0p*t60426*t60428*2.0;
                double t60430 = t60388-t60389;
                double t60431 = t60321*t60330*t60333*t60326*t60298;
                double t60432 = Aa*t60326*t60344*t60362*t60354*t60356*t60298*2.0;
                double t60433 = 1.0/t60395;
                double t60434 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t60435 = 1.0/(t60395*t60395);
                double t60436 = 1.0/t60402;
                double t60437 = 1.0/(t60406*t60406);
                double t60438 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t60439 = 1.0/(t60402*t60402);
                double t60440 = 1.0/t60406;
                double t60441 = 1.0/t60411;
                double t60442 = 1.0/(t60411*t60411);
                double t60443 = gcab*t60262*2.0;
                double t60444 = t60262*t60393*t60396*6.0;
                double t60445 = gcab*t60262*t60396*t60397*6.0;
                double t60446 = t60262*t60393*t60397*t60398*2.0;
                double t60447 = t60443+t60444+t60445+t60446;
                double t60448 = gamma_bb[index]*gcab*t60434*(8.0/3.0);
                double t60449 = gamma_bb[index]*t60434*t60393*t60396*(8.0/3.0);
                double t60450 = t60448+t60449;
                double t60451 = gcab*t60262;
                double t60452 = t60262*t60393*t60396;
                double t60453 = t60451+t60452;
                double t60454 = gamma_bb[index]*gcab*t60434*(1.6E1/3.0);
                double t60455 = gamma_bb[index]*gcab*t60434*t60396*t60397*1.6E1;
                double t60456 = gamma_bb[index]*t60434*t60393*t60397*t60398*(1.6E1/3.0);
                double t60457 = gamma_bb[index]*t60434*t60393*t60396*1.6E1;
                double t60458 = t60454+t60455+t60456+t60457;
                double t60459 = gcab*t60262*(3.0/2.0);
                double t60460 = t60262*t60393*t60396*3.0;
                double t60461 = gcab*t60262*t60396*t60397*(3.0/2.0);
                double t60462 = t60460+t60461+t60459;
                double t60463 = gamma_bb[index]*gcab*t60434*4.0;
                double t60464 = gamma_bb[index]*gcab*t60434*t60396*t60397*4.0;
                double t60465 = gamma_bb[index]*t60434*t60393*t60396*8.0;
                double t60466 = t60463+t60464+t60465;
                double t60467 = gx*gx;
                double t60468 = t60467*t60467;
                double t60469 = gamma_bb[index]*gx*t60262;
                double t60470 = t60469+1.0;
                double t60471 = gamma_bb[index]*gx*t60262*3.0;
                double t60472 = gamma_bb[index]*gx*t60263*t60268*t60467;
                double t60473 = t60263*t60267*t60467*3.0;
                double t60474 = t60471+t60472+t60473+1.0;
                double t60475 = gamma_bb[index]*gx*t60262*4.0;
                double t60476 = gamma_bb[index]*gx*t60263*t60268*t60467*4.0;
                double t60477 = t60263*t60267*t60467*6.0;
                double t60478 = t60266*t60275*t60468;
                double t60479 = t60475+t60476+t60477+t60478+1.0;
                double t60480 = gamma_bb[index]*gx*t60262*2.0;
                double t60481 = t60263*t60267*t60467;
                double t60482 = t60480+t60481+1.0;
                double t60483 = t60430*t60365*t60298;
                double t60484 = t60483+t60389;
                double t60485 = 1.0/t60270;
                double t60486 = 1.0/t60280;
                double t60487 = 1.0/t60283;
                double t60488 = 1.0/t60274;
                double t60489 = 1.0/(t60270*t60270);
                double t60490 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t60491 = 1.0/(t60274*t60274);
                double t60492 = 1.0/(t60283*t60283);
                double t60493 = gcaa*t60262*3.0;
                double t60494 = gamma_bb[index]*t60264*t60267*6.0;
                double t60495 = gcaa*t60263*t60264*t60268*3.0;
                double t60496 = t60493+t60494+t60495;
                double t60497 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t60498 = 1.0/(t60280*t60280);
                double t60499 = gcaa*t60262*4.0;
                double t60500 = gamma_bb[index]*t60264*t60267*1.2E1;
                double t60501 = gcaa*t60263*t60264*t60268*1.2E1;
                double t60502 = gamma_bb[index]*t60263*t60265*t60266*4.0;
                double t60503 = t60500+t60501+t60502+t60499;
                double t60504 = gcaa*t60262*2.0;
                double t60505 = gamma_bb[index]*t60264*t60267*2.0;
                double t60506 = t60504+t60505;
                double t60507 = gamma_bb[index]*gcaa*t60434*(1.6E1/3.0);
                double t60508 = t60263*t60264*t60438*(1.6E1/3.0);
                double t60509 = t60507+t60508;
                double t60510 = gamma_bb[index]*gcaa*t60434*8.0;
                double t60511 = gamma_bb[index]*gcaa*t60263*t60264*t60490*8.0;
                double t60512 = t60263*t60264*t60438*1.6E1;
                double t60513 = t60510+t60511+t60512;
                double t60514 = gamma_bb[index]*gcaa*t60434*(3.2E1/3.0);
                double t60515 = gamma_bb[index]*gcaa*t60263*t60264*t60490*3.2E1;
                double t60516 = t60263*t60264*t60438*3.2E1;
                double t60517 = t60265*t60275*t60497*(3.2E1/3.0);
                double t60518 = t60514+t60515+t60516+t60517;
                double t60519 = 1.0/t60375;
                double t60520 = 1.0/(t60372*t60372);
                double t60521 = b4f*t60248*t60377*(2.0/3.0);
                double t60522 = b2f*c*t60376*(1.0/3.0);
                double t60523 = b1f*c*t60376*t60378*(1.0/6.0);
                double t60524 = b3f*c*t60246*t60376*(1.0/2.0);
                double t60525 = t60521+t60522+t60523+t60524;
                double t60526 = a1f*c*c0f*t60376*t60379*(2.0/3.0);
                double t60527 = a1p*c*c0p*t60259*t60376*(2.0/3.0);
                double t60528 = ccaa1*gcaa*t60262*t60485;
                double t60529 = ccaa4*gamma_bb[index]*t60263*t60265*t60266*t60486*4.0;
                double t60530 = ccaa2*gamma_bb[index]*t60264*t60267*t60487*2.0;
                double t60531 = ccaa3*gcaa*t60263*t60264*t60268*t60488*3.0;
                double t60532 = t60530+t60531+t60528+t60529-ccaa1*gamma_bb[index]*t60264*t60267*t60489-ccaa2*t60263* \
                   t60506*t60264*t60267*t60492-ccaa4*t60503*t60265*t60266*t60275*t60498-ccaa3*gamma_bb[index]*gcaa*t60263* \
                   t60264*t60491*t60268*t60496;
                double t60533 = 1.0/t60470;
                double t60534 = 1.0/t60479;
                double t60535 = 1.0/t60482;
                double t60536 = 1.0/t60474;
                double t60537 = 1.0/(t60470*t60470);
                double t60538 = 1.0/(t60474*t60474);
                double t60539 = 1.0/(t60482*t60482);
                double t60540 = gx*t60262*3.0;
                double t60541 = gamma_bb[index]*t60267*t60467*6.0;
                double t60542 = gx*t60263*t60268*t60467*3.0;
                double t60543 = t60540+t60541+t60542;
                double t60544 = 1.0/(t60479*t60479);
                double t60545 = gx*t60262*4.0;
                double t60546 = gamma_bb[index]*t60267*t60467*1.2E1;
                double t60547 = gx*t60263*t60268*t60467*1.2E1;
                double t60548 = gamma_bb[index]*t60263*t60266*t60468*4.0;
                double t60549 = t60545+t60546+t60547+t60548;
                double t60550 = gx*t60262*2.0;
                double t60551 = gamma_bb[index]*t60267*t60467*2.0;
                double t60552 = t60550+t60551;
                double t60553 = gamma_bb[index]*gx*t60434*(1.6E1/3.0);
                double t60554 = t60263*t60438*t60467*(1.6E1/3.0);
                double t60555 = t60553+t60554;
                double t60556 = gamma_bb[index]*gx*t60434*8.0;
                double t60557 = gamma_bb[index]*gx*t60263*t60490*t60467*8.0;
                double t60558 = t60263*t60438*t60467*1.6E1;
                double t60559 = t60556+t60557+t60558;
                double t60560 = gamma_bb[index]*gx*t60434*(3.2E1/3.0);
                double t60561 = gamma_bb[index]*gx*t60263*t60490*t60467*3.2E1;
                double t60562 = t60263*t60438*t60467*3.2E1;
                double t60563 = t60275*t60468*t60497*(3.2E1/3.0);
                double t60564 = t60560+t60561+t60562+t60563;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t60484+rho_a[index]*(t60429-t60365*t60298*(t60429-c0f*log((t60299* \
                   (1.0/2.0))/(b1f*t60415+b3f*t60416+b2f*c*t60413+b4f*t60417*t60248)+1.0)*(a1f*c*t60413+1.0)*2.0))-t60284* \
                   (t60332+t60431+t60432))*(ccab1*gcab*t60433*t60434*(4.0/3.0)-ccab2*t60439*t60396*t60397*(gcab*t60434* \
                   (8.0/3.0)+gamma_bb[index]*t60438*t60396*(4.0/3.0)+t60434*t60393*t60396*(8.0/3.0))-ccab4*t60442*t60398* \
                   t60399*(gcab*t60434*(1.6E1/3.0)+gamma_bb[index]*t60438*t60396*8.0+t60434*t60393*t60396*1.6E1+gamma_bb[index]* \
                   t60438*t60397*t60398*8.0+gcab*t60434*t60396*t60397*1.6E1+t60434*t60393*t60397*t60398*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t60393*t60438*t60396*1.6E1)-ccab1*gamma_bb[index]*t60435*t60438*t60396*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t60436*t60438*t60396*(4.0/3.0)-ccab1*t60434*t60435*t60393*t60396*(4.0/3.0)+ccab2*t60434*t60436*t60393* \
                   t60396*(8.0/3.0)-ccab2*t60450*t60262*t60393*t60439*t60396+ccab4*t60441*t60434*t60393*t60397*t60398* \
                   (1.6E1/3.0)+ccab2*1.0/(t60402*t60402*t60402)*t60450*t60453*t60396*t60397*2.0+ccab4*1.0/(t60411*t60411* \
                   t60411)*t60447*t60458*t60398*t60399*2.0+ccab4*gamma_bb[index]*t60441*t60438*t60397*t60398*8.0+ccab3* \
                   gcab*t60440*t60434*t60396*t60397*4.0+ccab3*gamma_bb[index]*gcab*t60440*t60393*t60438*t60396*4.0-ccab2* \
                   gamma_bb[index]*t60434*t60453*t60393*t60439*t60396*(8.0/3.0)-ccab3*gcab*t60262*t60437*t60466*t60396* \
                   t60397*(3.0/2.0)-ccab4*t60262*t60442*t60393*t60458*t60397*t60398*2.0-ccab3*gcab*t60437*t60393*t60396* \
                   t60397*(gcab*t60434*4.0+gamma_bb[index]*t60438*t60396*4.0+t60434*t60393*t60396*8.0+gcab*t60434*t60396* \
                   t60397*4.0+gamma_bb[index]*gcab*t60393*t60438*t60396*4.0)+ccab1*gamma_bb[index]*gcab*t60393*t60438* \
                   1.0/(t60395*t60395*t60395)*t60396*(4.0/3.0)+ccab3*gcab*1.0/(t60406*t60406*t60406)*t60462*t60393*t60466* \
                   t60396*t60397*2.0-ccab3*gamma_bb[index]*gcab*t60434*t60462*t60437*t60396*t60397*4.0-ccab4*gamma_bb[index]* \
                   t60442*t60434*t60393*t60447*t60397*t60398*(1.6E1/3.0))-(t60332+t60431+t60432-t60389+rho_b[index]*(t60527- \
                   t60387+t60365*t60298*(t60526+t60387-t60520*t60525*t60519*t60367-a1p*c*c0p*t60259*t60376*(2.0/3.0)) \
                   )-t60284*(t60412-t60304*t60342*t60336*t60337+t60321*t60330*t60333*t60360*t60298+t60321*t60333*t60343* \
                   t60326*t60298*4.0-t60330*t60333*t60326*t60298*(t60412-t60304*t60342*t60336*t60337+(1.0/(t60313*t60313) \
                   *t60319*(b2f*c*t60295*(1.0/3.0)+b4f*t60334*t60248*(2.0/3.0)+b1f*c*t60335*t60295*(1.0/6.0)+b3f*c*t60295* \
                   t60287*(1.0/2.0)))/t60316-a1f*c*c0f*t60317*t60295*(2.0/3.0))+t60321*t60330*t60305*t60306*t60326*t60298* \
                   4.0+Aa*t60326*t60344*t60354*t60356*t60298*(t60333*t60343*4.0+t60330*t60305*t60306*4.0)*2.0+Aa*t60360* \
                   t60344*t60362*t60354*t60356*t60298*2.0-(1.0/(t60350*t60350)*t60326*t60344*t60362*t60356*t60298*(b2a* \
                   c*t60295*(1.0/3.0)+b4a*t60334*t60248*(2.0/3.0)+b1a*c*t60335*t60295*(1.0/6.0)+b3a*c*t60295*t60287*(1.0/ \
                   2.0)))/t60353+Aa*a1a*c*t60326*t60344*t60362*t60354*t60295*t60298*(2.0/3.0))-t60430*t60365*t60298)* \
                   (ccab1*gcab*t60262*t60433*(1.0/2.0)-ccab1*t60262*t60435*t60393*t60396*(1.0/2.0)+ccab2*t60262*t60436* \
                   t60393*t60396-ccab2*t60453*t60439*t60396*t60397-ccab4*t60442*t60447*t60398*t60399+ccab4*t60441*t60262* \
                   t60393*t60397*t60398*2.0+ccab3*gcab*t60440*t60262*t60396*t60397*(3.0/2.0)-ccab3*gcab*t60462*t60437* \
                   t60393*t60396*t60397)-t60532*(t60389+t60365*t60298*(t60388-c0p*t60261*t60259*2.0))-rho_b[index]*t60484* \
                   (ccaa1*gcaa*t60434*t60485*(-8.0/3.0)-ccaa2*gamma_bb[index]*t60264*t60438*t60487*(3.2E1/3.0)+ccaa1* \
                   gamma_bb[index]*t60264*t60438*t60489*8.0+ccaa2*t60263*t60506*t60264*t60438*t60492*(1.6E1/3.0)+ccaa4* \
                   t60503*t60265*t60275*t60497*t60498*(3.2E1/3.0)+ccaa4*t60265*t60266*t60275*t60498*(gcaa*t60434*(3.2E1/ \
                   3.0)+gamma_bb[index]*t60264*t60438*6.4E1+gamma_bb[index]*t60263*t60265*t60497*(1.28E2/3.0)+gcaa*t60263* \
                   t60264*t60490*9.6E1)-ccaa1*gcaa*1.0/(t60270*t60270*t60270)*t60263*t60264*t60490*(1.6E1/3.0)+ccaa2* \
                   t60263*t60264*t60267*t60492*(gcaa*t60434*(1.6E1/3.0)+gamma_bb[index]*t60264*t60438*(3.2E1/3.0))+ccaa2* \
                   gamma_bb[index]*t60264*t60509*t60267*t60492*2.0-ccaa4*gamma_bb[index]*t60263*t60265*t60486*t60497* \
                   (1.28E2/3.0)-ccaa3*gcaa*t60263*t60264*t60490*t60488*2.4E1+ccaa4*gamma_bb[index]*t60263*t60265*t60266* \
                   t60518*t60498*4.0+ccaa3*gcaa*t60513*t60263*t60264*t60491*t60268*3.0-ccaa4*t60503*1.0/(t60280*t60280* \
                   t60280)*t60265*t60266*t60275*t60518*2.0-ccaa2*t60263*t60506*t60264*1.0/(t60283*t60283*t60283)*t60509* \
                   t60267*2.0+ccaa3*gamma_bb[index]*gcaa*t60263*t60264*t60491*t60268*(gcaa*t60434*8.0+gamma_bb[index]* \
                   t60264*t60438*3.2E1+gcaa*t60263*t60264*t60490*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t60263*t60264*t60490* \
                   t60491*t60496*8.0-ccaa3*gamma_bb[index]*gcaa*t60513*t60263*t60264*1.0/(t60274*t60274*t60274)*t60268* \
                   t60496*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t60434*t60533*(-8.0/3.0)+cx1*gamma_bb[index]*t60438* \
                   t60537*t60467*8.0-cx2*gamma_bb[index]*t60535*t60438*t60467*(3.2E1/3.0)+cx2*t60263*t60552*t60438*t60467* \
                   t60539*(1.6E1/3.0)+cx4*t60544*t60275*t60468*t60549*t60497*(3.2E1/3.0)+cx4*t60544*t60266*t60275*t60468* \
                   (gx*t60434*(3.2E1/3.0)+gamma_bb[index]*t60438*t60467*6.4E1+gamma_bb[index]*t60263*t60468*t60497*(1.28E2/ \
                   3.0)+gx*t60263*t60490*t60467*9.6E1)-cx1*gx*t60263*1.0/(t60470*t60470*t60470)*t60490*t60467*(1.6E1/ \
                   3.0)+cx2*t60263*t60267*t60467*t60539*(gx*t60434*(1.6E1/3.0)+gamma_bb[index]*t60438*t60467*(3.2E1/3.0) \
                   )+cx2*gamma_bb[index]*t60267*t60555*t60467*t60539*2.0-cx4*gamma_bb[index]*t60263*t60534*t60468*t60497* \
                   (1.28E2/3.0)-cx3*gx*t60263*t60490*t60536*t60467*2.4E1+cx4*gamma_bb[index]*t60263*t60544*t60266*t60564* \
                   t60468*4.0+cx3*gx*t60263*t60268*t60538*t60467*t60559*3.0-cx2*t60263*t60552*1.0/(t60482*t60482*t60482) \
                   *t60267*t60555*t60467*2.0-cx4*t60266*t60275*t60564*t60468*t60549*1.0/(t60479*t60479*t60479)*2.0+cx3* \
                   gamma_bb[index]*gx*t60263*t60268*t60538*t60467*(gx*t60434*8.0+gamma_bb[index]*t60438*t60467*3.2E1+ \
                   gx*t60263*t60490*t60467*2.4E1)+cx3*gamma_bb[index]*gx*t60263*t60543*t60490*t60538*t60467*8.0-cx3*gamma_bb[index]* \
                   gx*t60263*t60543*1.0/(t60474*t60474*t60474)*t60268*t60467*t60559*2.0)+rho_b[index]*t60532*(t60527- \
                   t60387+t60365*t60298*(t60526-t60527+t60387-t60520*t60525*t60519*t60367))+c0*pow(rho_b[index],1.0/3.0) \
                   *(cx1*gx*t60262*t60533-cx1*gamma_bb[index]*t60267*t60537*t60467+cx2*gamma_bb[index]*t60535*t60267* \
                   t60467*2.0-cx2*t60263*t60552*t60267*t60467*t60539-cx4*t60544*t60266*t60275*t60468*t60549+cx4*gamma_bb[index]* \
                   t60263*t60534*t60266*t60468*4.0+cx3*gx*t60263*t60536*t60268*t60467*3.0-cx3*gamma_bb[index]*gx*t60263* \
                   t60543*t60268*t60538*t60467)*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t61457 = 1.0/pow(rho_b[index],1.0/3.0);
                double t61458 = c*t61457;
                double t61459 = sqrt(t61458);
                double t61460 = pow(t61458,3.0/2.0);
                double t61461 = c*c;
                double t61462 = 1.0/pow(rho_b[index],2.0/3.0);
                double t61463 = 1.0/c0p;
                double t61464 = b1p*t61459;
                double t61465 = b3p*t61460;
                double t61466 = b4p*t61461*t61462;
                double t61467 = b2p*c*t61457;
                double t61468 = t61464+t61465+t61466+t61467;
                double t61469 = 1.0/t61468;
                double t61470 = t61463*t61469*(1.0/2.0);
                double t61471 = t61470+1.0;
                double t61472 = log(t61471);
                double t61473 = a1p*c*t61457;
                double t61474 = t61473+1.0;
                double t61475 = 1.0/pow(rho_b[index],8.0/3.0);
                double t61476 = gamma_bb[index]*gamma_bb[index];
                double t61477 = gcaa*gcaa;
                double t61478 = t61477*t61477;
                double t61479 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t61480 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t61481 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t61482 = gamma_bb[index]*gcaa*t61475;
                double t61483 = t61482+1.0;
                double t61484 = gamma_bb[index]*gcaa*t61475*3.0;
                double t61485 = gamma_bb[index]*gcaa*t61481*t61476*t61477;
                double t61486 = t61480*t61476*t61477*3.0;
                double t61487 = t61484+t61485+t61486+1.0;
                double t61488 = t61476*t61476;
                double t61489 = gamma_bb[index]*gcaa*t61475*4.0;
                double t61490 = gamma_bb[index]*gcaa*t61481*t61476*t61477*4.0;
                double t61491 = t61480*t61476*t61477*6.0;
                double t61492 = t61478*t61479*t61488;
                double t61493 = t61490+t61491+t61492+t61489+1.0;
                double t61494 = gamma_bb[index]*gcaa*t61475*2.0;
                double t61495 = t61480*t61476*t61477;
                double t61496 = t61494+t61495+1.0;
                double t61497 = gx*gx;
                double t61498 = t61497*t61497;
                double t61499 = gamma_bb[index]*gx*t61475;
                double t61500 = t61499+1.0;
                double t61501 = gamma_bb[index]*gx*t61475*3.0;
                double t61502 = gamma_bb[index]*gx*t61481*t61476*t61497;
                double t61503 = t61480*t61476*t61497*3.0;
                double t61504 = t61501+t61502+t61503+1.0;
                double t61505 = gamma_bb[index]*gx*t61475*4.0;
                double t61506 = gamma_bb[index]*gx*t61481*t61476*t61497*4.0;
                double t61507 = t61480*t61476*t61497*6.0;
                double t61508 = t61479*t61488*t61498;
                double t61509 = t61505+t61506+t61507+t61508+1.0;
                double t61510 = gamma_bb[index]*gx*t61475*2.0;
                double t61511 = t61480*t61476*t61497;
                double t61512 = t61510+t61511+1.0;
                double t61513 = pow(2.0,1.0/3.0);
                double t61514 = t61513*2.0;
                double t61515 = t61514-2.0;
                double t61516 = two_13*2.0;
                double t61517 = t61516-2.0;
                double t61518 = 1.0/t61517;
                double t61519 = 1.0/c0f;
                double t61520 = b1f*t61459;
                double t61521 = b3f*t61460;
                double t61522 = b4f*t61461*t61462;
                double t61523 = b2f*c*t61457;
                double t61524 = t61520+t61521+t61522+t61523;
                double t61525 = 1.0/t61524;
                double t61526 = t61525*t61519*(1.0/2.0);
                double t61527 = t61526+1.0;
                double t61528 = log(t61527);
                double t61529 = a1f*c*t61457;
                double t61530 = t61529+1.0;
                double t61531 = c0f*t61530*t61528*2.0;
                double t61532 = c0p*t61472*t61474*2.0;
                double t61533 = 1.0/t61483;
                double t61534 = 1.0/t61493;
                double t61535 = 1.0/t61496;
                double t61536 = 1.0/t61487;
                double t61537 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t61538 = 1.0/(t61483*t61483);
                double t61539 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t61540 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t61541 = 1.0/(t61487*t61487);
                double t61542 = 1.0/(t61496*t61496);
                double t61543 = gcaa*t61475*3.0;
                double t61544 = gamma_bb[index]*t61480*t61477*6.0;
                double t61545 = gcaa*t61481*t61476*t61477*3.0;
                double t61546 = t61543+t61544+t61545;
                double t61547 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t61548 = 1.0/(t61493*t61493);
                double t61549 = gcaa*t61475*4.0;
                double t61550 = gamma_bb[index]*t61480*t61477*1.2E1;
                double t61551 = gcaa*t61481*t61476*t61477*1.2E1;
                double t61552 = gamma_bb[index]*t61476*t61478*t61479*4.0;
                double t61553 = t61550+t61551+t61552+t61549;
                double t61554 = gcaa*t61475*2.0;
                double t61555 = gamma_bb[index]*t61480*t61477*2.0;
                double t61556 = t61554+t61555;
                double t61557 = gamma_bb[index]*gcaa*t61540*(1.6E1/3.0);
                double t61558 = t61537*t61476*t61477*(1.6E1/3.0);
                double t61559 = t61557+t61558;
                double t61560 = gamma_bb[index]*gcaa*t61540*8.0;
                double t61561 = gamma_bb[index]*gcaa*t61476*t61539*t61477*8.0;
                double t61562 = t61537*t61476*t61477*1.6E1;
                double t61563 = t61560+t61561+t61562;
                double t61564 = gamma_bb[index]*gcaa*t61540*(3.2E1/3.0);
                double t61565 = gamma_bb[index]*gcaa*t61476*t61539*t61477*3.2E1;
                double t61566 = t61537*t61476*t61477*3.2E1;
                double t61567 = t61547*t61478*t61488*(3.2E1/3.0);
                double t61568 = t61564+t61565+t61566+t61567;
                double t61569 = 1.0/pow(rho_b[index],4.0/3.0);
                double t61570 = 1.0/pow(rho_b[index],5.0/3.0);
                double t61571 = 1.0/sqrt(t61458);
                double t61572 = 1.0/t61471;
                double t61573 = 1.0/(t61468*t61468);
                double t61574 = b4p*t61461*t61570*(2.0/3.0);
                double t61575 = b2p*c*t61569*(1.0/3.0);
                double t61576 = b1p*c*t61571*t61569*(1.0/6.0);
                double t61577 = b3p*c*t61459*t61569*(1.0/2.0);
                double t61578 = t61574+t61575+t61576+t61577;
                double t61579 = t61572*t61474*t61573*t61578;
                double t61580 = ccaa1*gcaa*t61533*t61475;
                double t61581 = ccaa4*gamma_bb[index]*t61534*t61476*t61478*t61479*4.0;
                double t61582 = ccaa2*gamma_bb[index]*t61480*t61535*t61477*2.0;
                double t61583 = ccaa3*gcaa*t61481*t61536*t61476*t61477*3.0;
                double t61584 = t61580+t61581+t61582+t61583-ccaa1*gamma_bb[index]*t61480*t61538*t61477-ccaa2*t61542* \
                   t61480*t61556*t61476*t61477-ccaa4*t61553*t61548*t61478*t61479*t61488-ccaa3*gamma_bb[index]*gcaa*t61541* \
                   t61481*t61546*t61476*t61477;
                double t61585 = 1.0/t61500;
                double t61586 = 1.0/t61509;
                double t61587 = 1.0/t61512;
                double t61588 = 1.0/t61504;
                double t61589 = 1.0/(t61500*t61500);
                double t61590 = 1.0/(t61504*t61504);
                double t61591 = 1.0/(t61512*t61512);
                double t61592 = gx*t61475*3.0;
                double t61593 = gamma_bb[index]*t61480*t61497*6.0;
                double t61594 = gx*t61481*t61476*t61497*3.0;
                double t61595 = t61592+t61593+t61594;
                double t61596 = 1.0/(t61509*t61509);
                double t61597 = gx*t61475*4.0;
                double t61598 = gamma_bb[index]*t61480*t61497*1.2E1;
                double t61599 = gx*t61481*t61476*t61497*1.2E1;
                double t61600 = gamma_bb[index]*t61476*t61479*t61498*4.0;
                double t61601 = t61600+t61597+t61598+t61599;
                double t61602 = gx*t61475*2.0;
                double t61603 = gamma_bb[index]*t61480*t61497*2.0;
                double t61604 = t61602+t61603;
                double t61605 = gamma_bb[index]*gx*t61540*(1.6E1/3.0);
                double t61606 = t61537*t61476*t61497*(1.6E1/3.0);
                double t61607 = t61605+t61606;
                double t61608 = gamma_bb[index]*gx*t61540*8.0;
                double t61609 = gamma_bb[index]*gx*t61476*t61539*t61497*8.0;
                double t61610 = t61537*t61476*t61497*1.6E1;
                double t61611 = t61610+t61608+t61609;
                double t61612 = gamma_bb[index]*gx*t61540*(3.2E1/3.0);
                double t61613 = gamma_bb[index]*gx*t61476*t61539*t61497*3.2E1;
                double t61614 = t61537*t61476*t61497*3.2E1;
                double t61615 = t61547*t61488*t61498*(3.2E1/3.0);
                double t61616 = t61612+t61613+t61614+t61615;
                v_rho_b_gamma_bb_[index] = -t61584*(t61532+t61515*t61518*(t61531-c0p*t61472*t61474*2.0))+rho_b[index]* \
                   t61584*(-t61579+t61515*t61518*(t61579-(t61530*1.0/(t61524*t61524)*(b2f*c*t61569*(1.0/3.0)+b4f*t61461* \
                   t61570*(2.0/3.0)+b1f*c*t61571*t61569*(1.0/6.0)+b3f*c*t61459*t61569*(1.0/2.0)))/t61527+a1f*c*c0f*t61528* \
                   t61569*(2.0/3.0)-a1p*c*c0p*t61472*t61569*(2.0/3.0))+a1p*c*c0p*t61472*t61569*(2.0/3.0))-rho_b[index]* \
                   (t61532+t61515*t61518*(t61531-t61532))*(ccaa1*gcaa*t61540*t61533*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t61535*t61537*t61477*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t61537*t61538*t61477*8.0+ccaa2*t61542*t61537* \
                   t61556*t61476*t61477*(1.6E1/3.0)+ccaa4*t61553*t61547*t61548*t61478*t61488*(3.2E1/3.0)+ccaa4*t61548* \
                   t61478*t61479*t61488*(gcaa*t61540*(3.2E1/3.0)+gamma_bb[index]*t61537*t61477*6.4E1+gamma_bb[index]* \
                   t61547*t61476*t61478*(1.28E2/3.0)+gcaa*t61476*t61539*t61477*9.6E1)-ccaa1*gcaa*1.0/(t61483*t61483*t61483) \
                   *t61476*t61539*t61477*(1.6E1/3.0)+ccaa2*t61542*t61480*t61476*t61477*(gcaa*t61540*(1.6E1/3.0)+gamma_bb[index]* \
                   t61537*t61477*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t61542*t61480*t61477*t61559*2.0-ccaa4*gamma_bb[index]* \
                   t61534*t61547*t61476*t61478*(1.28E2/3.0)-ccaa3*gcaa*t61536*t61476*t61539*t61477*2.4E1+ccaa4*gamma_bb[index]* \
                   t61476*t61548*t61478*t61568*t61479*4.0+ccaa3*gcaa*t61541*t61481*t61563*t61476*t61477*3.0-ccaa2*t61480* \
                   t61556*t61476*t61477*1.0/(t61496*t61496*t61496)*t61559*2.0-ccaa4*t61553*1.0/(t61493*t61493*t61493) \
                   *t61478*t61568*t61479*t61488*2.0+ccaa3*gamma_bb[index]*gcaa*t61541*t61481*t61476*t61477*(gcaa*t61540* \
                   8.0+gamma_bb[index]*t61537*t61477*3.2E1+gcaa*t61476*t61539*t61477*2.4E1)+ccaa3*gamma_bb[index]*gcaa* \
                   t61541*t61546*t61476*t61539*t61477*8.0-ccaa3*gamma_bb[index]*gcaa*t61481*t61563*t61546*t61476*t61477* \
                   1.0/(t61487*t61487*t61487)*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t61540*t61585*(-8.0/3.0)+cx1* \
                   gamma_bb[index]*t61537*t61497*t61589*8.0-cx2*gamma_bb[index]*t61537*t61497*t61587*(3.2E1/3.0)+cx2* \
                   t61604*t61537*t61591*t61476*t61497*(1.6E1/3.0)+cx4*t61601*t61547*t61488*t61596*t61498*(3.2E1/3.0)+ \
                   cx4*t61479*t61488*t61596*t61498*(gx*t61540*(3.2E1/3.0)+gamma_bb[index]*t61537*t61497*6.4E1+gamma_bb[index]* \
                   t61547*t61476*t61498*(1.28E2/3.0)+gx*t61476*t61539*t61497*9.6E1)-cx1*gx*1.0/(t61500*t61500*t61500) \
                   *t61476*t61539*t61497*(1.6E1/3.0)+cx2*t61480*t61591*t61476*t61497*(gx*t61540*(1.6E1/3.0)+gamma_bb[index]* \
                   t61537*t61497*(3.2E1/3.0))+cx2*gamma_bb[index]*t61480*t61607*t61591*t61497*2.0-cx4*gamma_bb[index]* \
                   t61547*t61476*t61586*t61498*(1.28E2/3.0)-cx3*gx*t61476*t61539*t61497*t61588*2.4E1+cx4*gamma_bb[index]* \
                   t61616*t61476*t61479*t61596*t61498*4.0+cx3*gx*t61611*t61481*t61590*t61476*t61497*3.0-cx2*1.0/(t61512* \
                   t61512*t61512)*t61604*t61480*t61607*t61476*t61497*2.0-cx4*t61601*t61616*1.0/(t61509*t61509*t61509) \
                   *t61479*t61488*t61498*2.0+cx3*gamma_bb[index]*gx*t61481*t61590*t61476*t61497*(gx*t61540*8.0+gamma_bb[index]* \
                   t61537*t61497*3.2E1+gx*t61476*t61539*t61497*2.4E1)+cx3*gamma_bb[index]*gx*t61590*t61476*t61539*t61595* \
                   t61497*8.0-cx3*gamma_bb[index]*gx*t61611*1.0/(t61504*t61504*t61504)*t61481*t61476*t61595*t61497*2.0) \
                   +c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t61475*t61585-cx1*gamma_bb[index]*t61480*t61497*t61589+cx2*gamma_bb[index]* \
                   t61480*t61497*t61587*2.0-cx2*t61604*t61480*t61591*t61476*t61497-cx4*t61601*t61479*t61488*t61596*t61498+ \
                   cx4*gamma_bb[index]*t61476*t61586*t61479*t61498*4.0+cx3*gx*t61481*t61476*t61497*t61588*3.0-cx3*gamma_bb[index]* \
                   gx*t61481*t61590*t61476*t61595*t61497)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t60566 = 1.0/pow(rho_a[index],1.0/3.0);
                double t60567 = c*t60566;
                double t60568 = sqrt(t60567);
                double t60569 = pow(t60567,3.0/2.0);
                double t60570 = c*c;
                double t60571 = 1.0/pow(rho_a[index],2.0/3.0);
                double t60572 = 1.0/c0p;
                double t60573 = b1p*t60568;
                double t60574 = b3p*t60569;
                double t60575 = b4p*t60570*t60571;
                double t60576 = b2p*c*t60566;
                double t60577 = t60573+t60574+t60575+t60576;
                double t60578 = 1.0/t60577;
                double t60579 = t60572*t60578*(1.0/2.0);
                double t60580 = t60579+1.0;
                double t60581 = log(t60580);
                double t60582 = a1p*c*t60566;
                double t60583 = t60582+1.0;
                double t60584 = pow(2.0,1.0/3.0);
                double t60585 = t60584*2.0;
                double t60586 = t60585-2.0;
                double t60587 = two_13*2.0;
                double t60588 = t60587-2.0;
                double t60589 = 1.0/t60588;
                double t60590 = 1.0/c0f;
                double t60591 = 1.0/pow(rho_b[index],1.0/3.0);
                double t60592 = c*t60591;
                double t60593 = sqrt(t60592);
                double t60594 = pow(t60592,3.0/2.0);
                double t60595 = 1.0/pow(rho_b[index],2.0/3.0);
                double t60596 = b1p*t60593;
                double t60597 = b3p*t60594;
                double t60598 = b4p*t60570*t60595;
                double t60599 = b2p*c*t60591;
                double t60600 = t60596+t60597+t60598+t60599;
                double t60601 = 1.0/t60600;
                double t60602 = t60601*t60572*(1.0/2.0);
                double t60603 = t60602+1.0;
                double t60604 = log(t60603);
                double t60605 = a1p*c*t60591;
                double t60606 = t60605+1.0;
                double t60607 = c0p*t60604*t60606*2.0;
                double t60608 = rho_a[index]+rho_b[index];
                double t60609 = 1.0/pow(t60608,1.0/3.0);
                double t60610 = c*t60609;
                double t60611 = sqrt(t60610);
                double t60612 = pow(t60610,3.0/2.0);
                double t60613 = 1.0/pow(t60608,2.0/3.0);
                double t60614 = b1p*t60611;
                double t60615 = b3p*t60612;
                double t60616 = b4p*t60613*t60570;
                double t60617 = b2p*c*t60609;
                double t60618 = t60614+t60615+t60616+t60617;
                double t60619 = 1.0/t60618;
                double t60620 = t60572*t60619*(1.0/2.0);
                double t60621 = t60620+1.0;
                double t60622 = log(t60621);
                double t60623 = a1p*c*t60609;
                double t60624 = t60623+1.0;
                double t60625 = c0p*t60622*t60624*2.0;
                double t60626 = rho_a[index]-rho_b[index];
                double t60627 = t60626*t60626;
                double t60628 = 1.0/t60608;
                double t60629 = t60626*t60628;
                double t60630 = 1.0/(t60608*t60608*t60608*t60608);
                double t60631 = t60627*t60627;
                double t60632 = t60629+1.0;
                double t60633 = pow(t60632,4.0/3.0);
                double t60634 = -t60629+1.0;
                double t60635 = pow(t60634,4.0/3.0);
                double t60636 = t60633+t60635-2.0;
                double t60637 = gcab*gcab;
                double t60638 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t60639 = 1.0/pow(rho_a[index],8.0/3.0);
                double t60640 = gamma_aa[index]*t60639*(1.0/2.0);
                double t60641 = 1.0/pow(rho_b[index],8.0/3.0);
                double t60642 = gamma_bb[index]*t60641*(1.0/2.0);
                double t60643 = t60640+t60642;
                double t60644 = gcab*t60643;
                double t60645 = t60644+1.0;
                double t60646 = t60643*t60643;
                double t60647 = t60637*t60646;
                double t60648 = gcab*t60643*2.0;
                double t60649 = t60647+t60648+1.0;
                double t60650 = t60637*t60637;
                double t60667 = gcab*t60639*2.0;
                double t60668 = t60643*t60637*t60639*6.0;
                double t60669 = gcab*t60637*t60646*t60639*6.0;
                double t60670 = t60650*t60643*t60646*t60639*2.0;
                double t60651 = t60670+t60667+t60668+t60669;
                double t60652 = t60646*t60646;
                double t60672 = gcab*t60639*(3.0/2.0);
                double t60673 = t60643*t60637*t60639*3.0;
                double t60674 = gcab*t60637*t60646*t60639*(3.0/2.0);
                double t60653 = t60672+t60673+t60674;
                double t60654 = t60637*t60646*3.0;
                double t60655 = gcab*t60643*t60637*t60646;
                double t60656 = gcab*t60643*3.0;
                double t60657 = t60654+t60655+t60656+1.0;
                double t60664 = gcab*t60639;
                double t60665 = t60643*t60637*t60639;
                double t60658 = t60664+t60665;
                double t60659 = t60637*t60646*6.0;
                double t60660 = gcab*t60643*t60637*t60646*4.0;
                double t60661 = t60650*t60652;
                double t60662 = gcab*t60643*4.0;
                double t60663 = t60660+t60661+t60662+t60659+1.0;
                double t60666 = 1.0/(t60649*t60649);
                double t60671 = 1.0/(t60663*t60663);
                double t60675 = 1.0/(t60657*t60657);
                double t60676 = gx*gx;
                double t60677 = gamma_aa[index]*gamma_aa[index];
                double t60678 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t60679 = t60676*t60676;
                double t60680 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t60681 = gamma_aa[index]*gx*t60639;
                double t60682 = t60681+1.0;
                double t60683 = gamma_aa[index]*gx*t60639*2.0;
                double t60684 = t60638*t60676*t60677;
                double t60685 = t60683+t60684+1.0;
                double t60686 = gamma_aa[index]*gx*t60639*3.0;
                double t60687 = gamma_aa[index]*gx*t60676*t60677*t60678;
                double t60688 = t60638*t60676*t60677*3.0;
                double t60689 = t60686+t60687+t60688+1.0;
                double t60690 = t60677*t60677;
                double t60706 = gx*t60639*4.0;
                double t60707 = gamma_aa[index]*t60638*t60676*1.2E1;
                double t60708 = gx*t60676*t60677*t60678*1.2E1;
                double t60709 = gamma_aa[index]*t60680*t60677*t60679*4.0;
                double t60691 = t60706+t60707+t60708+t60709;
                double t60692 = gamma_aa[index]*gx*t60639*4.0;
                double t60693 = gamma_aa[index]*gx*t60676*t60677*t60678*4.0;
                double t60694 = t60638*t60676*t60677*6.0;
                double t60695 = t60680*t60690*t60679;
                double t60696 = t60692+t60693+t60694+t60695+1.0;
                double t60699 = gx*t60639*2.0;
                double t60700 = gamma_aa[index]*t60638*t60676*2.0;
                double t60697 = t60700+t60699;
                double t60698 = 1.0/(t60689*t60689);
                double t60701 = 1.0/(t60685*t60685);
                double t60702 = gx*t60639*3.0;
                double t60703 = gamma_aa[index]*t60638*t60676*6.0;
                double t60704 = gx*t60676*t60677*t60678*3.0;
                double t60705 = t60702+t60703+t60704;
                double t60710 = 1.0/(t60696*t60696);
                double t60711 = b1f*t60568;
                double t60712 = b3f*t60569;
                double t60713 = b4f*t60570*t60571;
                double t60714 = b2f*c*t60566;
                double t60715 = t60711+t60712+t60713+t60714;
                double t60716 = 1.0/t60715;
                double t60717 = t60590*t60716*(1.0/2.0);
                double t60718 = t60717+1.0;
                double t60719 = log(t60718);
                double t60720 = a1f*c*t60566;
                double t60721 = t60720+1.0;
                double t60722 = c0f*t60721*t60719*2.0;
                double t60723 = c0p*t60581*t60583*2.0;
                double t60724 = gcaa*gcaa;
                double t60725 = t60724*t60724;
                double t60726 = gamma_aa[index]*gcaa*t60639;
                double t60727 = t60726+1.0;
                double t60728 = gamma_aa[index]*gcaa*t60639*2.0;
                double t60729 = t60724*t60638*t60677;
                double t60730 = t60728+t60729+1.0;
                double t60731 = gamma_aa[index]*gcaa*t60639*3.0;
                double t60732 = gamma_aa[index]*gcaa*t60724*t60677*t60678;
                double t60733 = t60724*t60638*t60677*3.0;
                double t60734 = t60731+t60732+t60733+1.0;
                double t60750 = gcaa*t60639*4.0;
                double t60751 = gamma_aa[index]*t60724*t60638*1.2E1;
                double t60752 = gcaa*t60724*t60677*t60678*1.2E1;
                double t60753 = gamma_aa[index]*t60680*t60725*t60677*4.0;
                double t60735 = t60750+t60751+t60752+t60753;
                double t60736 = gamma_aa[index]*gcaa*t60639*4.0;
                double t60737 = gamma_aa[index]*gcaa*t60724*t60677*t60678*4.0;
                double t60738 = t60724*t60638*t60677*6.0;
                double t60739 = t60680*t60725*t60690;
                double t60740 = t60736+t60737+t60738+t60739+1.0;
                double t60743 = gcaa*t60639*2.0;
                double t60744 = gamma_aa[index]*t60724*t60638*2.0;
                double t60741 = t60743+t60744;
                double t60742 = 1.0/(t60734*t60734);
                double t60745 = 1.0/(t60730*t60730);
                double t60746 = gcaa*t60639*3.0;
                double t60747 = gamma_aa[index]*t60724*t60638*6.0;
                double t60748 = gcaa*t60724*t60677*t60678*3.0;
                double t60749 = t60746+t60747+t60748;
                double t60754 = 1.0/(t60740*t60740);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t60723+t60586*t60589*(t60722-c0p*t60581*t60583*2.0) \
                   )+rho_b[index]*(t60607-t60586*t60589*(t60607-c0f*log((t60590*(1.0/2.0))/(b1f*t60593+b3f*t60594+b2f* \
                   c*t60591+b4f*t60570*t60595)+1.0)*(a1f*c*t60591+1.0)*2.0))-t60608*(t60625-t60630*t60631*t60636*t60589* \
                   (t60625-c0f*log((t60590*(1.0/2.0))/(b1f*t60611+b3f*t60612+b2f*c*t60609+b4f*t60613*t60570)+1.0)*(a1f* \
                   c*t60609+1.0)*2.0)+(Aa*t60636*t60589*log((1.0/2.0)/(Aa*(b1a*t60611+b3a*t60612+b2a*c*t60609+b4a*t60613* \
                   t60570))+1.0)*(t60630*t60631-1.0)*(a1a*c*t60609+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t60645*t60645)*t60637* \
                   t60638*(1.0/2.0)-(ccab2*t60637*t60638*(1.0/2.0))/t60649-ccab4*t60650*(t60651*t60651)*t60652*1.0/(t60663* \
                   t60663*t60663)*2.0-ccab2*t60637*t60646*1.0/(t60649*t60649*t60649)*(t60658*t60658)*2.0+ccab2*t60650* \
                   t60646*t60638*t60666*(1.0/2.0)+ccab4*t60650*t60652*t60671*(t60637*t60638*3.0+t60650*t60646*t60638* \
                   3.0+gcab*t60643*t60637*t60638*6.0)-(ccab4*t60650*t60646*t60638*3.0)/t60663+ccab2*t60643*t60637*t60639* \
                   t60666*t60658*2.0-ccab1*gcab*t60643*1.0/(t60645*t60645*t60645)*t60637*t60638*(1.0/2.0)-(ccab3*gcab* \
                   t60643*t60637*t60638*(3.0/2.0))/t60657-ccab3*gcab*t60643*(t60653*t60653)*t60637*t60646*1.0/(t60657* \
                   t60657*t60657)*2.0+ccab3*gcab*t60653*t60637*t60646*t60639*t60675*3.0+ccab4*t60650*t60651*t60643*t60671* \
                   t60646*t60639*4.0+ccab3*gcab*t60643*t60637*t60646*t60675*(t60637*t60638*(3.0/2.0)+gcab*t60643*t60637* \
                   t60638*(3.0/2.0)))-rho_a[index]*(t60723+t60586*t60589*(t60722-t60723))*((ccaa2*t60724*t60638*2.0)/ \
                   t60730-ccaa1*t60724*1.0/(t60727*t60727)*t60638*2.0-ccaa2*t60680*t60725*t60745*t60677*2.0+(ccaa4*t60680* \
                   t60725*t60677*1.2E1)/t60740-ccaa4*t60680*t60725*t60690*t60754*(t60724*t60638*1.2E1+t60680*t60725*t60677* \
                   1.2E1+gamma_aa[index]*gcaa*t60724*t60678*2.4E1)+(ccaa3*gamma_aa[index]*gcaa*t60724*t60678*6.0)/t60734+ \
                   ccaa1*gamma_aa[index]*gcaa*t60724*1.0/(t60727*t60727*t60727)*t60678*2.0+ccaa4*1.0/(t60740*t60740*t60740) \
                   *t60680*t60725*t60690*(t60735*t60735)*2.0+ccaa2*1.0/(t60730*t60730*t60730)*(t60741*t60741)*t60724* \
                   t60638*t60677*2.0-ccaa2*gamma_aa[index]*t60741*t60724*t60745*t60638*4.0-ccaa4*gamma_aa[index]*t60680* \
                   t60725*t60735*t60754*t60677*8.0-ccaa3*gcaa*t60724*t60742*t60677*t60749*t60678*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t60724*t60742*t60677*t60678*(t60724*t60638*6.0+gamma_aa[index]*gcaa*t60724*t60678*6.0)+ccaa3* \
                   gamma_aa[index]*gcaa*t60724*1.0/(t60734*t60734*t60734)*t60677*(t60749*t60749)*t60678*2.0)-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*1.0/(t60682*t60682)*t60638*t60676*2.0-(cx2*t60638*t60676*2.0)/t60685+cx2*t60701*t60680*t60677* \
                   t60679*2.0-(cx4*t60680*t60677*t60679*1.2E1)/t60696+cx4*t60710*t60680*t60690*t60679*(t60638*t60676* \
                   1.2E1+t60680*t60677*t60679*1.2E1+gamma_aa[index]*gx*t60676*t60678*2.4E1)-cx1*gamma_aa[index]*gx*1.0/ \
                   (t60682*t60682*t60682)*t60676*t60678*2.0-(cx3*gamma_aa[index]*gx*t60676*t60678*6.0)/t60689-cx2*t60638* \
                   t60676*1.0/(t60685*t60685*t60685)*t60677*(t60697*t60697)*2.0-cx4*t60680*t60690*(t60691*t60691)*1.0/ \
                   (t60696*t60696*t60696)*t60679*2.0+cx2*gamma_aa[index]*t60701*t60638*t60676*t60697*4.0+cx4*gamma_aa[index]* \
                   t60710*t60680*t60691*t60677*t60679*8.0+cx3*gx*t60705*t60676*t60677*t60678*t60698*6.0+cx3*gamma_aa[index]* \
                   gx*t60676*t60677*t60678*t60698*(t60638*t60676*6.0+gamma_aa[index]*gx*t60676*t60678*6.0)-cx3*gamma_aa[index]* \
                   gx*(t60705*t60705)*t60676*t60677*t60678*1.0/(t60689*t60689*t60689)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t62257 = gx*gx;
                double t62258 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t62259 = 1.0/pow(rho_a[index],8.0/3.0);
                double t62260 = gamma_aa[index]*gamma_aa[index];
                double t62261 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t62262 = t62257*t62257;
                double t62263 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t62264 = gamma_aa[index]*gx*t62259;
                double t62265 = t62264+1.0;
                double t62266 = gamma_aa[index]*gx*t62259*2.0;
                double t62267 = t62260*t62257*t62258;
                double t62268 = t62266+t62267+1.0;
                double t62269 = gamma_aa[index]*gx*t62259*3.0;
                double t62270 = gamma_aa[index]*gx*t62260*t62261*t62257;
                double t62271 = t62260*t62257*t62258*3.0;
                double t62272 = t62270+t62271+t62269+1.0;
                double t62273 = t62260*t62260;
                double t62289 = gx*t62259*4.0;
                double t62290 = gamma_aa[index]*t62257*t62258*1.2E1;
                double t62291 = gx*t62260*t62261*t62257*1.2E1;
                double t62292 = gamma_aa[index]*t62260*t62262*t62263*4.0;
                double t62274 = t62290+t62291+t62292+t62289;
                double t62275 = gamma_aa[index]*gx*t62259*4.0;
                double t62276 = gamma_aa[index]*gx*t62260*t62261*t62257*4.0;
                double t62277 = t62260*t62257*t62258*6.0;
                double t62278 = t62262*t62263*t62273;
                double t62279 = t62275+t62276+t62277+t62278+1.0;
                double t62282 = gx*t62259*2.0;
                double t62283 = gamma_aa[index]*t62257*t62258*2.0;
                double t62280 = t62282+t62283;
                double t62281 = 1.0/(t62272*t62272);
                double t62284 = 1.0/(t62268*t62268);
                double t62285 = gx*t62259*3.0;
                double t62286 = gamma_aa[index]*t62257*t62258*6.0;
                double t62287 = gx*t62260*t62261*t62257*3.0;
                double t62288 = t62285+t62286+t62287;
                double t62293 = 1.0/(t62279*t62279);
                double t62294 = 1.0/pow(rho_a[index],1.0/3.0);
                double t62295 = c*t62294;
                double t62296 = sqrt(t62295);
                double t62297 = pow(t62295,3.0/2.0);
                double t62298 = c*c;
                double t62299 = 1.0/pow(rho_a[index],2.0/3.0);
                double t62300 = 1.0/c0p;
                double t62301 = b1p*t62296;
                double t62302 = b3p*t62297;
                double t62303 = b4p*t62298*t62299;
                double t62304 = b2p*c*t62294;
                double t62305 = t62301+t62302+t62303+t62304;
                double t62306 = 1.0/t62305;
                double t62307 = t62300*t62306*(1.0/2.0);
                double t62308 = t62307+1.0;
                double t62309 = log(t62308);
                double t62310 = a1p*c*t62294;
                double t62311 = t62310+1.0;
                double t62312 = gcaa*gcaa;
                double t62313 = t62312*t62312;
                double t62314 = gamma_aa[index]*gcaa*t62259;
                double t62315 = t62314+1.0;
                double t62316 = gamma_aa[index]*gcaa*t62259*2.0;
                double t62317 = t62312*t62260*t62258;
                double t62318 = t62316+t62317+1.0;
                double t62319 = gamma_aa[index]*gcaa*t62259*3.0;
                double t62320 = gamma_aa[index]*gcaa*t62312*t62260*t62261;
                double t62321 = t62312*t62260*t62258*3.0;
                double t62322 = t62320+t62321+t62319+1.0;
                double t62338 = gcaa*t62259*4.0;
                double t62339 = gamma_aa[index]*t62312*t62258*1.2E1;
                double t62340 = gcaa*t62312*t62260*t62261*1.2E1;
                double t62341 = gamma_aa[index]*t62313*t62260*t62263*4.0;
                double t62323 = t62340+t62341+t62338+t62339;
                double t62324 = gamma_aa[index]*gcaa*t62259*4.0;
                double t62325 = gamma_aa[index]*gcaa*t62312*t62260*t62261*4.0;
                double t62326 = t62312*t62260*t62258*6.0;
                double t62327 = t62313*t62263*t62273;
                double t62328 = t62324+t62325+t62326+t62327+1.0;
                double t62331 = gcaa*t62259*2.0;
                double t62332 = gamma_aa[index]*t62312*t62258*2.0;
                double t62329 = t62331+t62332;
                double t62330 = 1.0/(t62322*t62322);
                double t62333 = 1.0/(t62318*t62318);
                double t62334 = gcaa*t62259*3.0;
                double t62335 = gamma_aa[index]*t62312*t62258*6.0;
                double t62336 = gcaa*t62312*t62260*t62261*3.0;
                double t62337 = t62334+t62335+t62336;
                double t62342 = 1.0/(t62328*t62328);
                v_gamma_aa_gamma_aa_[index] = -c0*pow(rho_a[index],4.0/3.0)*(cx1*1.0/(t62265*t62265)*t62257*t62258* \
                   2.0-(cx2*t62257*t62258*2.0)/t62268+cx2*t62260*t62262*t62263*t62284*2.0-(cx4*t62260*t62262*t62263*1.2E1) \
                   /t62279+cx4*t62262*t62263*t62273*t62293*(t62257*t62258*1.2E1+t62260*t62262*t62263*1.2E1+gamma_aa[index]* \
                   gx*t62261*t62257*2.4E1)-cx1*gamma_aa[index]*gx*t62261*1.0/(t62265*t62265*t62265)*t62257*2.0-(cx3*gamma_aa[index]* \
                   gx*t62261*t62257*6.0)/t62272-cx2*t62260*(t62280*t62280)*t62257*t62258*1.0/(t62268*t62268*t62268)*2.0- \
                   cx4*t62262*t62263*t62273*(t62274*t62274)*1.0/(t62279*t62279*t62279)*2.0+cx2*gamma_aa[index]*t62280* \
                   t62257*t62284*t62258*4.0+cx4*gamma_aa[index]*t62260*t62262*t62263*t62274*t62293*8.0+cx3*gx*t62260* \
                   t62261*t62281*t62257*t62288*6.0+cx3*gamma_aa[index]*gx*t62260*t62261*t62281*t62257*(t62257*t62258* \
                   6.0+gamma_aa[index]*gx*t62261*t62257*6.0)-cx3*gamma_aa[index]*gx*t62260*t62261*1.0/(t62272*t62272* \
                   t62272)*t62257*(t62288*t62288)*2.0)+rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t62296+b3f*t62297+b2f*c*t62294+b4f*t62298*t62299))+1.0)*(a1f*c*t62294+1.0)*2.0-c0p*t62311*t62309* \
                   2.0))/(two_13*2.0-2.0)+c0p*t62311*t62309*2.0)*(ccaa1*t62312*1.0/(t62315*t62315)*t62258*2.0-(ccaa2* \
                   t62312*t62258*2.0)/t62318+ccaa2*t62313*t62260*t62333*t62263*2.0-(ccaa4*t62313*t62260*t62263*1.2E1) \
                   /t62328+ccaa4*t62313*t62342*t62263*t62273*(t62312*t62258*1.2E1+t62313*t62260*t62263*1.2E1+gamma_aa[index]* \
                   gcaa*t62312*t62261*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t62312*t62261*6.0)/t62322-ccaa1*gamma_aa[index]* \
                   gcaa*t62312*t62261*1.0/(t62315*t62315*t62315)*2.0-ccaa4*t62313*(t62323*t62323)*t62263*t62273*1.0/(t62328* \
                   t62328*t62328)*2.0-ccaa2*t62312*t62260*1.0/(t62318*t62318*t62318)*(t62329*t62329)*t62258*2.0+ccaa2* \
                   gamma_aa[index]*t62312*t62333*t62329*t62258*4.0+ccaa4*gamma_aa[index]*t62313*t62260*t62323*t62342* \
                   t62263*8.0+ccaa3*gcaa*t62312*t62330*t62260*t62261*t62337*6.0+ccaa3*gamma_aa[index]*gcaa*t62312*t62330* \
                   t62260*t62261*(t62312*t62258*6.0+gamma_aa[index]*gcaa*t62312*t62261*6.0)-ccaa3*gamma_aa[index]*gcaa* \
                   t62312*1.0/(t62322*t62322*t62322)*t62260*t62261*(t62337*t62337)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t60757 = 1.0/pow(rho_a[index],1.0/3.0);
                double t60758 = c*t60757;
                double t60759 = sqrt(t60758);
                double t60760 = pow(t60758,3.0/2.0);
                double t60761 = c*c;
                double t60762 = 1.0/pow(rho_a[index],2.0/3.0);
                double t60763 = 1.0/c0p;
                double t60764 = b1p*t60759;
                double t60765 = b3p*t60760;
                double t60766 = b4p*t60761*t60762;
                double t60767 = b2p*c*t60757;
                double t60768 = t60764+t60765+t60766+t60767;
                double t60769 = 1.0/t60768;
                double t60770 = t60763*t60769*(1.0/2.0);
                double t60771 = t60770+1.0;
                double t60772 = log(t60771);
                double t60773 = a1p*c*t60757;
                double t60774 = t60773+1.0;
                double t60775 = pow(2.0,1.0/3.0);
                double t60776 = t60775*2.0;
                double t60777 = t60776-2.0;
                double t60778 = two_13*2.0;
                double t60779 = t60778-2.0;
                double t60780 = 1.0/t60779;
                double t60781 = 1.0/c0f;
                double t60782 = 1.0/pow(rho_b[index],1.0/3.0);
                double t60783 = c*t60782;
                double t60784 = sqrt(t60783);
                double t60785 = pow(t60783,3.0/2.0);
                double t60786 = 1.0/pow(rho_b[index],2.0/3.0);
                double t60787 = b1p*t60784;
                double t60788 = b3p*t60785;
                double t60789 = b4p*t60761*t60786;
                double t60790 = b2p*c*t60782;
                double t60791 = t60790+t60787+t60788+t60789;
                double t60792 = 1.0/t60791;
                double t60793 = t60763*t60792*(1.0/2.0);
                double t60794 = t60793+1.0;
                double t60795 = log(t60794);
                double t60796 = a1p*c*t60782;
                double t60797 = t60796+1.0;
                double t60798 = c0p*t60795*t60797*2.0;
                double t60799 = rho_a[index]+rho_b[index];
                double t60800 = 1.0/pow(t60799,1.0/3.0);
                double t60801 = c*t60800;
                double t60802 = sqrt(t60801);
                double t60803 = pow(t60801,3.0/2.0);
                double t60804 = 1.0/pow(t60799,2.0/3.0);
                double t60805 = b1p*t60802;
                double t60806 = b3p*t60803;
                double t60807 = b4p*t60804*t60761;
                double t60808 = b2p*c*t60800;
                double t60809 = t60805+t60806+t60807+t60808;
                double t60810 = 1.0/t60809;
                double t60811 = t60810*t60763*(1.0/2.0);
                double t60812 = t60811+1.0;
                double t60813 = log(t60812);
                double t60814 = a1p*c*t60800;
                double t60815 = t60814+1.0;
                double t60816 = c0p*t60813*t60815*2.0;
                double t60817 = rho_a[index]-rho_b[index];
                double t60818 = t60817*t60817;
                double t60819 = 1.0/t60799;
                double t60820 = t60817*t60819;
                double t60821 = 1.0/(t60799*t60799*t60799*t60799);
                double t60822 = t60818*t60818;
                double t60823 = t60820+1.0;
                double t60824 = pow(t60823,4.0/3.0);
                double t60825 = -t60820+1.0;
                double t60826 = pow(t60825,4.0/3.0);
                double t60827 = t60824+t60826-2.0;
                double t60828 = gcab*gcab;
                double t60831 = 1.0/pow(rho_a[index],8.0/3.0);
                double t60832 = 1.0/pow(rho_b[index],8.0/3.0);
                double t60833 = gamma_aa[index]*t60831*(1.0/2.0);
                double t60834 = gamma_bb[index]*t60832*(1.0/2.0);
                double t60829 = t60833+t60834;
                double t60830 = t60829*t60829;
                double t60835 = t60828*t60828;
                double t60836 = t60830*t60830;
                double t60837 = t60830*t60828*3.0;
                double t60838 = gcab*t60830*t60828*t60829;
                double t60839 = gcab*t60829*3.0;
                double t60840 = t60837+t60838+t60839+1.0;
                double t60841 = t60830*t60828;
                double t60842 = gcab*t60829*2.0;
                double t60843 = t60841+t60842+1.0;
                double t60844 = t60830*t60828*6.0;
                double t60845 = gcab*t60830*t60828*t60829*4.0;
                double t60846 = t60835*t60836;
                double t60847 = gcab*t60829*4.0;
                double t60848 = t60844+t60845+t60846+t60847+1.0;
                double t60849 = 1.0/(t60843*t60843);
                double t60850 = gcab*t60831;
                double t60851 = t60831*t60828*t60829;
                double t60852 = t60850+t60851;
                double t60853 = gcab*t60832;
                double t60854 = t60832*t60828*t60829;
                double t60855 = t60853+t60854;
                double t60856 = gcab*t60829;
                double t60857 = t60856+1.0;
                double t60858 = gcab*t60831*2.0;
                double t60859 = t60831*t60828*t60829*6.0;
                double t60860 = gcab*t60830*t60831*t60828*6.0;
                double t60861 = t60830*t60831*t60835*t60829*2.0;
                double t60862 = t60860+t60861+t60858+t60859;
                double t60863 = 1.0/(t60848*t60848);
                double t60864 = gcab*t60832*2.0;
                double t60865 = t60832*t60828*t60829*6.0;
                double t60866 = gcab*t60830*t60832*t60828*6.0;
                double t60867 = t60830*t60832*t60835*t60829*2.0;
                double t60868 = t60864+t60865+t60866+t60867;
                double t60869 = gcab*t60831*(3.0/2.0);
                double t60870 = t60831*t60828*t60829*3.0;
                double t60871 = gcab*t60830*t60831*t60828*(3.0/2.0);
                double t60872 = t60870+t60871+t60869;
                double t60873 = 1.0/(t60840*t60840);
                double t60874 = gcab*t60832*(3.0/2.0);
                double t60875 = t60832*t60828*t60829*3.0;
                double t60876 = gcab*t60830*t60832*t60828*(3.0/2.0);
                double t60877 = t60874+t60875+t60876;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t60798-t60780*t60777*(t60798-c0f*log((t60781*(1.0/2.0) \
                   )/(b1f*t60784+b3f*t60785+b2f*c*t60782+b4f*t60761*t60786)+1.0)*(a1f*c*t60782+1.0)*2.0))+t60799*(t60816- \
                   t60821*t60822*t60780*t60827*(t60816-c0f*log((t60781*(1.0/2.0))/(b1f*t60802+b3f*t60803+b2f*c*t60800+ \
                   b4f*t60804*t60761)+1.0)*(a1f*c*t60800+1.0)*2.0)+(Aa*t60780*t60827*log((1.0/2.0)/(Aa*(b1a*t60802+b3a* \
                   t60803+b2a*c*t60800+b4a*t60804*t60761))+1.0)*(t60821*t60822-1.0)*(a1a*c*t60800+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t60780*t60777*(c0p*t60772*t60774*2.0-c0f*log((t60781*(1.0/2.0))/(b1f*t60759+b3f*t60760+b2f*c*t60757+ \
                   b4f*t60761*t60762)+1.0)*(a1f*c*t60757+1.0)*2.0)-c0p*t60772*t60774*2.0))*(ccab4*t60835*t60836*t60863* \
                   (t60831*t60832*t60828*3.0+t60830*t60831*t60832*t60835*3.0+gcab*t60831*t60832*t60828*t60829*6.0)-(ccab2* \
                   t60831*t60832*t60828*(1.0/2.0))/t60843+ccab1*t60831*t60832*t60828*1.0/(t60857*t60857)*(1.0/2.0)+ccab2* \
                   t60830*t60831*t60832*t60835*t60849*(1.0/2.0)+ccab2*t60832*t60852*t60828*t60829*t60849+ccab2*t60831* \
                   t60828*t60855*t60829*t60849-(ccab4*t60830*t60831*t60832*t60835*3.0)/t60848-ccab2*t60830*1.0/(t60843* \
                   t60843*t60843)*t60852*t60828*t60855*2.0-ccab4*t60835*t60862*t60836*1.0/(t60848*t60848*t60848)*t60868* \
                   2.0+ccab3*gcab*t60830*t60832*t60872*t60828*t60873*(3.0/2.0)+ccab3*gcab*t60830*t60831*t60828*t60873* \
                   t60877*(3.0/2.0)+ccab4*t60830*t60832*t60835*t60862*t60863*t60829*2.0+ccab4*t60830*t60831*t60835*t60863* \
                   t60829*t60868*2.0+ccab3*gcab*t60830*t60828*t60873*t60829*(t60831*t60832*t60828*(3.0/2.0)+gcab*t60831* \
                   t60832*t60828*t60829*(3.0/2.0))-(ccab3*gcab*t60831*t60832*t60828*t60829*(3.0/2.0))/t60840-ccab1*gcab* \
                   t60831*t60832*t60828*t60829*1.0/(t60857*t60857*t60857)*(1.0/2.0)-ccab3*gcab*t60830*1.0/(t60840*t60840* \
                   t60840)*t60872*t60828*t60829*t60877*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t60881 = 1.0/pow(rho_a[index],1.0/3.0);
                double t60882 = c*t60881;
                double t60883 = sqrt(t60882);
                double t60884 = pow(t60882,3.0/2.0);
                double t60885 = c*c;
                double t60886 = 1.0/pow(rho_a[index],2.0/3.0);
                double t60887 = 1.0/c0p;
                double t60888 = b1p*t60883;
                double t60889 = b3p*t60884;
                double t60890 = b4p*t60885*t60886;
                double t60891 = b2p*c*t60881;
                double t60892 = t60890+t60891+t60888+t60889;
                double t60893 = 1.0/t60892;
                double t60894 = t60893*t60887*(1.0/2.0);
                double t60895 = t60894+1.0;
                double t60896 = log(t60895);
                double t60897 = a1p*c*t60881;
                double t60898 = t60897+1.0;
                double t60899 = pow(2.0,1.0/3.0);
                double t60900 = t60899*2.0;
                double t60901 = t60900-2.0;
                double t60902 = two_13*2.0;
                double t60903 = t60902-2.0;
                double t60904 = 1.0/t60903;
                double t60905 = 1.0/c0f;
                double t60906 = 1.0/pow(rho_b[index],1.0/3.0);
                double t60907 = c*t60906;
                double t60908 = sqrt(t60907);
                double t60909 = pow(t60907,3.0/2.0);
                double t60910 = 1.0/pow(rho_b[index],2.0/3.0);
                double t60911 = b1p*t60908;
                double t60912 = b3p*t60909;
                double t60913 = b4p*t60910*t60885;
                double t60914 = b2p*c*t60906;
                double t60915 = t60911+t60912+t60913+t60914;
                double t60916 = 1.0/t60915;
                double t60917 = t60916*t60887*(1.0/2.0);
                double t60918 = t60917+1.0;
                double t60919 = log(t60918);
                double t60920 = a1p*c*t60906;
                double t60921 = t60920+1.0;
                double t60922 = c0p*t60921*t60919*2.0;
                double t60923 = rho_a[index]+rho_b[index];
                double t60924 = 1.0/pow(t60923,1.0/3.0);
                double t60925 = c*t60924;
                double t60926 = sqrt(t60925);
                double t60927 = pow(t60925,3.0/2.0);
                double t60928 = 1.0/pow(t60923,2.0/3.0);
                double t60929 = b1p*t60926;
                double t60930 = b3p*t60927;
                double t60931 = b4p*t60928*t60885;
                double t60932 = b2p*c*t60924;
                double t60933 = t60930+t60931+t60932+t60929;
                double t60934 = 1.0/t60933;
                double t60935 = t60934*t60887*(1.0/2.0);
                double t60936 = t60935+1.0;
                double t60937 = log(t60936);
                double t60938 = a1p*c*t60924;
                double t60939 = t60938+1.0;
                double t60940 = c0p*t60937*t60939*2.0;
                double t60941 = rho_a[index]-rho_b[index];
                double t60942 = t60941*t60941;
                double t60943 = 1.0/t60923;
                double t60944 = t60941*t60943;
                double t60945 = 1.0/(t60923*t60923*t60923*t60923);
                double t60946 = t60942*t60942;
                double t60947 = t60944+1.0;
                double t60948 = pow(t60947,4.0/3.0);
                double t60949 = -t60944+1.0;
                double t60950 = pow(t60949,4.0/3.0);
                double t60951 = t60950+t60948-2.0;
                double t60952 = gcab*gcab;
                double t60953 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t60954 = 1.0/pow(rho_a[index],8.0/3.0);
                double t60955 = gamma_aa[index]*t60954*(1.0/2.0);
                double t60956 = 1.0/pow(rho_b[index],8.0/3.0);
                double t60957 = gamma_bb[index]*t60956*(1.0/2.0);
                double t60958 = t60955+t60957;
                double t60959 = gcab*t60958;
                double t60960 = t60959+1.0;
                double t60961 = t60958*t60958;
                double t60962 = t60952*t60961;
                double t60963 = gcab*t60958*2.0;
                double t60964 = t60962+t60963+1.0;
                double t60965 = t60952*t60952;
                double t60982 = gcab*t60956*2.0;
                double t60983 = t60952*t60956*t60958*6.0;
                double t60984 = gcab*t60952*t60961*t60956*6.0;
                double t60985 = t60961*t60956*t60965*t60958*2.0;
                double t60966 = t60982+t60983+t60984+t60985;
                double t60967 = t60961*t60961;
                double t60987 = gcab*t60956*(3.0/2.0);
                double t60988 = t60952*t60956*t60958*3.0;
                double t60989 = gcab*t60952*t60961*t60956*(3.0/2.0);
                double t60968 = t60987+t60988+t60989;
                double t60969 = t60952*t60961*3.0;
                double t60970 = gcab*t60952*t60961*t60958;
                double t60971 = gcab*t60958*3.0;
                double t60972 = t60970+t60971+t60969+1.0;
                double t60979 = gcab*t60956;
                double t60980 = t60952*t60956*t60958;
                double t60973 = t60980+t60979;
                double t60974 = t60952*t60961*6.0;
                double t60975 = gcab*t60952*t60961*t60958*4.0;
                double t60976 = t60965*t60967;
                double t60977 = gcab*t60958*4.0;
                double t60978 = t60974+t60975+t60976+t60977+1.0;
                double t60981 = 1.0/(t60964*t60964);
                double t60986 = 1.0/(t60978*t60978);
                double t60990 = 1.0/(t60972*t60972);
                double t60991 = gx*gx;
                double t60992 = gamma_bb[index]*gamma_bb[index];
                double t60993 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t60994 = t60991*t60991;
                double t60995 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t60996 = gamma_bb[index]*gx*t60956;
                double t60997 = t60996+1.0;
                double t60998 = gamma_bb[index]*gx*t60956*2.0;
                double t60999 = t60953*t60991*t60992;
                double t61000 = t60998+t60999+1.0;
                double t61001 = gamma_bb[index]*gx*t60956*3.0;
                double t61002 = gamma_bb[index]*gx*t60991*t60992*t60993;
                double t61003 = t60953*t60991*t60992*3.0;
                double t61004 = t61001+t61002+t61003+1.0;
                double t61005 = t60992*t60992;
                double t61021 = gx*t60956*4.0;
                double t61022 = gamma_bb[index]*t60953*t60991*1.2E1;
                double t61023 = gx*t60991*t60992*t60993*1.2E1;
                double t61024 = gamma_bb[index]*t60992*t60994*t60995*4.0;
                double t61006 = t61021+t61022+t61023+t61024;
                double t61007 = gamma_bb[index]*gx*t60956*4.0;
                double t61008 = gamma_bb[index]*gx*t60991*t60992*t60993*4.0;
                double t61009 = t60953*t60991*t60992*6.0;
                double t61010 = t60994*t60995*t61005;
                double t61011 = t61010+t61007+t61008+t61009+1.0;
                double t61014 = gx*t60956*2.0;
                double t61015 = gamma_bb[index]*t60953*t60991*2.0;
                double t61012 = t61014+t61015;
                double t61013 = 1.0/(t61004*t61004);
                double t61016 = 1.0/(t61000*t61000);
                double t61017 = gx*t60956*3.0;
                double t61018 = gamma_bb[index]*t60953*t60991*6.0;
                double t61019 = gx*t60991*t60992*t60993*3.0;
                double t61020 = t61017+t61018+t61019;
                double t61025 = 1.0/(t61011*t61011);
                double t61026 = b1f*t60908;
                double t61027 = b3f*t60909;
                double t61028 = b4f*t60910*t60885;
                double t61029 = b2f*c*t60906;
                double t61030 = t61026+t61027+t61028+t61029;
                double t61031 = 1.0/t61030;
                double t61032 = t60905*t61031*(1.0/2.0);
                double t61033 = t61032+1.0;
                double t61034 = log(t61033);
                double t61035 = a1f*c*t60906;
                double t61036 = t61035+1.0;
                double t61037 = t60922-c0f*t61034*t61036*2.0;
                double t61038 = t60922-t60901*t60904*t61037;
                double t61039 = gcaa*gcaa;
                double t61040 = t61039*t61039;
                double t61041 = gamma_bb[index]*gcaa*t60956;
                double t61042 = t61041+1.0;
                double t61043 = gamma_bb[index]*gcaa*t60956*2.0;
                double t61044 = t60953*t60992*t61039;
                double t61045 = t61043+t61044+1.0;
                double t61046 = gamma_bb[index]*gcaa*t60956*3.0;
                double t61047 = gamma_bb[index]*gcaa*t60992*t60993*t61039;
                double t61048 = t60953*t60992*t61039*3.0;
                double t61049 = t61046+t61047+t61048+1.0;
                double t61065 = gcaa*t60956*4.0;
                double t61066 = gamma_bb[index]*t60953*t61039*1.2E1;
                double t61067 = gcaa*t60992*t60993*t61039*1.2E1;
                double t61068 = gamma_bb[index]*t60992*t60995*t61040*4.0;
                double t61050 = t61065+t61066+t61067+t61068;
                double t61051 = gamma_bb[index]*gcaa*t60956*4.0;
                double t61052 = gamma_bb[index]*gcaa*t60992*t60993*t61039*4.0;
                double t61053 = t60953*t60992*t61039*6.0;
                double t61054 = t60995*t61040*t61005;
                double t61055 = t61051+t61052+t61053+t61054+1.0;
                double t61058 = gcaa*t60956*2.0;
                double t61059 = gamma_bb[index]*t60953*t61039*2.0;
                double t61056 = t61058+t61059;
                double t61057 = 1.0/(t61049*t61049);
                double t61060 = 1.0/(t61045*t61045);
                double t61061 = gcaa*t60956*3.0;
                double t61062 = gamma_bb[index]*t60953*t61039*6.0;
                double t61063 = gcaa*t60992*t60993*t61039*3.0;
                double t61064 = t61061+t61062+t61063;
                double t61069 = 1.0/(t61055*t61055);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t61038+t60923*(t60940-t60904*t60951*t60945*t60946*(t60940- \
                   c0f*log((t60905*(1.0/2.0))/(b1f*t60926+b3f*t60927+b2f*c*t60924+b4f*t60928*t60885)+1.0)*(a1f*c*t60924+ \
                   1.0)*2.0)+(Aa*t60904*t60951*log((1.0/2.0)/(Aa*(b1a*t60926+b3a*t60927+b2a*c*t60924+b4a*t60928*t60885) \
                   )+1.0)*(t60945*t60946-1.0)*(a1a*c*t60924+1.0)*2.0)/d2fz0)+rho_a[index]*(t60901*t60904*(c0p*t60896* \
                   t60898*2.0-c0f*log((t60905*(1.0/2.0))/(b1f*t60883+b3f*t60884+b2f*c*t60881+b4f*t60885*t60886)+1.0)* \
                   (a1f*c*t60881+1.0)*2.0)-c0p*t60896*t60898*2.0))*(ccab1*1.0/(t60960*t60960)*t60952*t60953*(1.0/2.0) \
                   -(ccab2*t60952*t60953*(1.0/2.0))/t60964-ccab2*t60952*t60961*1.0/(t60964*t60964*t60964)*(t60973*t60973) \
                   *2.0-ccab4*t60965*(t60966*t60966)*t60967*1.0/(t60978*t60978*t60978)*2.0+ccab2*t60961*t60953*t60981* \
                   t60965*(1.0/2.0)+ccab4*t60965*t60967*t60986*(t60952*t60953*3.0+t60961*t60953*t60965*3.0+gcab*t60952* \
                   t60953*t60958*6.0)-(ccab4*t60961*t60953*t60965*3.0)/t60978+ccab2*t60952*t60981*t60973*t60956*t60958* \
                   2.0-ccab1*gcab*1.0/(t60960*t60960*t60960)*t60952*t60953*t60958*(1.0/2.0)-(ccab3*gcab*t60952*t60953* \
                   t60958*(3.0/2.0))/t60972-ccab3*gcab*t60952*t60961*1.0/(t60972*t60972*t60972)*t60958*(t60968*t60968) \
                   *2.0+ccab3*gcab*t60952*t60961*t60990*t60956*t60968*3.0+ccab4*t60961*t60956*t60965*t60966*t60958*t60986* \
                   4.0+ccab3*gcab*t60952*t60961*t60990*t60958*(t60952*t60953*(3.0/2.0)+gcab*t60952*t60953*t60958*(3.0/ \
                   2.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*t60953*t60991*1.0/(t60997*t60997)*2.0-(cx2*t60953*t60991* \
                   2.0)/t61000+cx2*t60992*t60994*t60995*t61016*2.0-(cx4*t60992*t60994*t60995*1.2E1)/t61011+cx4*t60994* \
                   t60995*t61005*t61025*(t60953*t60991*1.2E1+t60992*t60994*t60995*1.2E1+gamma_bb[index]*gx*t60991*t60993* \
                   2.4E1)-cx1*gamma_bb[index]*gx*t60991*t60993*1.0/(t60997*t60997*t60997)*2.0-(cx3*gamma_bb[index]*gx* \
                   t60991*t60993*6.0)/t61004-cx2*t60953*t60991*t60992*1.0/(t61000*t61000*t61000)*(t61012*t61012)*2.0- \
                   cx4*t60994*t60995*1.0/(t61011*t61011*t61011)*t61005*(t61006*t61006)*2.0+cx2*gamma_bb[index]*t60953* \
                   t60991*t61012*t61016*4.0+cx4*gamma_bb[index]*t60992*t60994*t60995*t61006*t61025*8.0+cx3*gx*t60991* \
                   t60992*t60993*t61020*t61013*6.0+cx3*gamma_bb[index]*gx*t60991*t60992*t60993*t61013*(t60953*t60991* \
                   6.0+gamma_bb[index]*gx*t60991*t60993*6.0)-cx3*gamma_bb[index]*gx*t60991*t60992*t60993*(t61020*t61020) \
                   *1.0/(t61004*t61004*t61004)*2.0)+rho_b[index]*t61038*(ccaa1*t60953*1.0/(t61042*t61042)*t61039*2.0- \
                   (ccaa2*t60953*t61039*2.0)/t61045+ccaa2*t60992*t60995*t61040*t61060*2.0-(ccaa4*t60992*t60995*t61040* \
                   1.2E1)/t61055+ccaa4*t60995*t61040*t61005*t61069*(t60953*t61039*1.2E1+t60992*t60995*t61040*1.2E1+gamma_bb[index]* \
                   gcaa*t60993*t61039*2.4E1)-ccaa1*gamma_bb[index]*gcaa*t60993*1.0/(t61042*t61042*t61042)*t61039*2.0- \
                   (ccaa3*gamma_bb[index]*gcaa*t60993*t61039*6.0)/t61049-ccaa2*t60953*t60992*1.0/(t61045*t61045*t61045) \
                   *(t61056*t61056)*t61039*2.0-ccaa4*t60995*t61040*t61005*(t61050*t61050)*1.0/(t61055*t61055*t61055)* \
                   2.0+ccaa2*gamma_bb[index]*t60953*t61060*t61056*t61039*4.0+ccaa4*gamma_bb[index]*t60992*t60995*t61040* \
                   t61050*t61069*8.0+ccaa3*gcaa*t60992*t60993*t61064*t61039*t61057*6.0+ccaa3*gamma_bb[index]*gcaa*t60992* \
                   t60993*t61039*t61057*(t60953*t61039*6.0+gamma_bb[index]*gcaa*t60993*t61039*6.0)-ccaa3*gamma_bb[index]* \
                   gcaa*t60992*t60993*(t61064*t61064)*t61039*1.0/(t61049*t61049*t61049)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t61623 = gx*gx;
                double t61624 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t61625 = 1.0/pow(rho_b[index],8.0/3.0);
                double t61626 = gamma_bb[index]*gamma_bb[index];
                double t61627 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t61628 = t61623*t61623;
                double t61629 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t61630 = gamma_bb[index]*gx*t61625;
                double t61631 = t61630+1.0;
                double t61632 = gamma_bb[index]*gx*t61625*2.0;
                double t61633 = t61623*t61624*t61626;
                double t61634 = t61632+t61633+1.0;
                double t61635 = gamma_bb[index]*gx*t61625*3.0;
                double t61636 = gamma_bb[index]*gx*t61623*t61626*t61627;
                double t61637 = t61623*t61624*t61626*3.0;
                double t61638 = t61635+t61636+t61637+1.0;
                double t61639 = t61626*t61626;
                double t61655 = gx*t61625*4.0;
                double t61656 = gamma_bb[index]*t61623*t61624*1.2E1;
                double t61657 = gx*t61623*t61626*t61627*1.2E1;
                double t61658 = gamma_bb[index]*t61626*t61628*t61629*4.0;
                double t61640 = t61655+t61656+t61657+t61658;
                double t61641 = gamma_bb[index]*gx*t61625*4.0;
                double t61642 = gamma_bb[index]*gx*t61623*t61626*t61627*4.0;
                double t61643 = t61623*t61624*t61626*6.0;
                double t61644 = t61628*t61629*t61639;
                double t61645 = t61641+t61642+t61643+t61644+1.0;
                double t61648 = gx*t61625*2.0;
                double t61649 = gamma_bb[index]*t61623*t61624*2.0;
                double t61646 = t61648+t61649;
                double t61647 = 1.0/(t61638*t61638);
                double t61650 = 1.0/(t61634*t61634);
                double t61651 = gx*t61625*3.0;
                double t61652 = gamma_bb[index]*t61623*t61624*6.0;
                double t61653 = gx*t61623*t61626*t61627*3.0;
                double t61654 = t61651+t61652+t61653;
                double t61659 = 1.0/(t61645*t61645);
                double t61660 = 1.0/pow(rho_b[index],1.0/3.0);
                double t61661 = c*t61660;
                double t61662 = sqrt(t61661);
                double t61663 = pow(t61661,3.0/2.0);
                double t61664 = c*c;
                double t61665 = 1.0/pow(rho_b[index],2.0/3.0);
                double t61666 = 1.0/c0p;
                double t61667 = b1p*t61662;
                double t61668 = b3p*t61663;
                double t61669 = b4p*t61664*t61665;
                double t61670 = b2p*c*t61660;
                double t61671 = t61670+t61667+t61668+t61669;
                double t61672 = 1.0/t61671;
                double t61673 = t61672*t61666*(1.0/2.0);
                double t61674 = t61673+1.0;
                double t61675 = log(t61674);
                double t61676 = a1p*c*t61660;
                double t61677 = t61676+1.0;
                double t61678 = gcaa*gcaa;
                double t61679 = t61678*t61678;
                double t61680 = gamma_bb[index]*gcaa*t61625;
                double t61681 = t61680+1.0;
                double t61682 = gamma_bb[index]*gcaa*t61625*2.0;
                double t61683 = t61624*t61626*t61678;
                double t61684 = t61682+t61683+1.0;
                double t61685 = gamma_bb[index]*gcaa*t61625*3.0;
                double t61686 = gamma_bb[index]*gcaa*t61626*t61627*t61678;
                double t61687 = t61624*t61626*t61678*3.0;
                double t61688 = t61685+t61686+t61687+1.0;
                double t61704 = gcaa*t61625*4.0;
                double t61705 = gamma_bb[index]*t61624*t61678*1.2E1;
                double t61706 = gcaa*t61626*t61627*t61678*1.2E1;
                double t61707 = gamma_bb[index]*t61626*t61629*t61679*4.0;
                double t61689 = t61704+t61705+t61706+t61707;
                double t61690 = gamma_bb[index]*gcaa*t61625*4.0;
                double t61691 = gamma_bb[index]*gcaa*t61626*t61627*t61678*4.0;
                double t61692 = t61624*t61626*t61678*6.0;
                double t61693 = t61629*t61639*t61679;
                double t61694 = t61690+t61691+t61692+t61693+1.0;
                double t61697 = gcaa*t61625*2.0;
                double t61698 = gamma_bb[index]*t61624*t61678*2.0;
                double t61695 = t61697+t61698;
                double t61696 = 1.0/(t61688*t61688);
                double t61699 = 1.0/(t61684*t61684);
                double t61700 = gcaa*t61625*3.0;
                double t61701 = gamma_bb[index]*t61624*t61678*6.0;
                double t61702 = gcaa*t61626*t61627*t61678*3.0;
                double t61703 = t61700+t61701+t61702;
                double t61708 = 1.0/(t61694*t61694);
                v_gamma_bb_gamma_bb_[index] = -c0*pow(rho_b[index],4.0/3.0)*(cx1*1.0/(t61631*t61631)*t61623*t61624* \
                   2.0-(cx2*t61623*t61624*2.0)/t61634+cx2*t61650*t61626*t61628*t61629*2.0-(cx4*t61626*t61628*t61629*1.2E1) \
                   /t61645+cx4*t61628*t61629*t61639*t61659*(t61623*t61624*1.2E1+t61626*t61628*t61629*1.2E1+gamma_bb[index]* \
                   gx*t61623*t61627*2.4E1)-cx1*gamma_bb[index]*gx*1.0/(t61631*t61631*t61631)*t61623*t61627*2.0-(cx3*gamma_bb[index]* \
                   gx*t61623*t61627*6.0)/t61638-cx2*t61623*t61624*1.0/(t61634*t61634*t61634)*t61626*(t61646*t61646)*2.0- \
                   cx4*(t61640*t61640)*1.0/(t61645*t61645*t61645)*t61628*t61629*t61639*2.0+cx2*gamma_bb[index]*t61623* \
                   t61650*t61624*t61646*4.0+cx4*gamma_bb[index]*t61640*t61626*t61628*t61629*t61659*8.0+cx3*gx*t61623* \
                   t61626*t61627*t61654*t61647*6.0+cx3*gamma_bb[index]*gx*t61623*t61626*t61627*t61647*(t61623*t61624* \
                   6.0+gamma_bb[index]*gx*t61623*t61627*6.0)-cx3*gamma_bb[index]*gx*t61623*t61626*t61627*(t61654*t61654) \
                   *1.0/(t61638*t61638*t61638)*2.0)+rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t61662+b3f*t61663+b2f*c*t61660+b4f*t61664*t61665))+1.0)*(a1f*c*t61660+1.0)*2.0-c0p*t61675*t61677* \
                   2.0))/(two_13*2.0-2.0)+c0p*t61675*t61677*2.0)*(ccaa1*t61624*1.0/(t61681*t61681)*t61678*2.0-(ccaa2* \
                   t61624*t61678*2.0)/t61684+ccaa2*t61626*t61629*t61679*t61699*2.0-(ccaa4*t61626*t61629*t61679*1.2E1) \
                   /t61694+ccaa4*t61708*t61629*t61639*t61679*(t61624*t61678*1.2E1+t61626*t61629*t61679*1.2E1+gamma_bb[index]* \
                   gcaa*t61627*t61678*2.4E1)-ccaa1*gamma_bb[index]*gcaa*t61627*1.0/(t61681*t61681*t61681)*t61678*2.0- \
                   (ccaa3*gamma_bb[index]*gcaa*t61627*t61678*6.0)/t61688-ccaa2*t61624*t61626*1.0/(t61684*t61684*t61684) \
                   *(t61695*t61695)*t61678*2.0-ccaa4*t61629*t61639*1.0/(t61694*t61694*t61694)*t61679*(t61689*t61689)* \
                   2.0+ccaa2*gamma_bb[index]*t61624*t61695*t61678*t61699*4.0+ccaa4*gamma_bb[index]*t61626*t61708*t61629* \
                   t61679*t61689*8.0+ccaa3*gcaa*t61703*t61626*t61627*t61678*t61696*6.0+ccaa3*gamma_bb[index]*gcaa*t61626* \
                   t61627*t61678*t61696*(t61624*t61678*6.0+gamma_bb[index]*gcaa*t61627*t61678*6.0)-ccaa3*gamma_bb[index]* \
                   gcaa*(t61703*t61703)*t61626*t61627*t61678*1.0/(t61688*t61688*t61688)*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

