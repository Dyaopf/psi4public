/**********************************************************
* P86_C_functional.cc: definitions for P86_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "P86_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

P86_C_Functional::P86_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "P86_C";
    description_ = "P86 Correlation (PZ81 LSDA + P86 GGA)";
    citation_ = "J.P. Perdew, Phys. Rev. B., 33, 8822-8824, 1986";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double EcPld_1 = -1.4230000000000001E-01;
    params_.push_back(make_pair("EcPld_1",EcPld_1));
    double EcPld_2 = 1.0528999999999999E+00;
    params_.push_back(make_pair("EcPld_2",EcPld_2));
    double EcPld_3 = 3.3339999999999997E-01;
    params_.push_back(make_pair("EcPld_3",EcPld_3));
    double EcFld_1 = -8.4300000000000000E-02;
    params_.push_back(make_pair("EcFld_1",EcFld_1));
    double EcFld_2 = 1.3980999999999999E+00;
    params_.push_back(make_pair("EcFld_2",EcFld_2));
    double EcFld_3 = 2.6110000000000000E-01;
    params_.push_back(make_pair("EcFld_3",EcFld_3));
    double EcPhd_1 = 3.1099999999999999E-02;
    params_.push_back(make_pair("EcPhd_1",EcPhd_1));
    double EcPhd_2 = -4.8000000000000001E-02;
    params_.push_back(make_pair("EcPhd_2",EcPhd_2));
    double EcPhd_3 = 2.0000000000000000E-03;
    params_.push_back(make_pair("EcPhd_3",EcPhd_3));
    double EcPhd_4 = -1.1599999999999999E-02;
    params_.push_back(make_pair("EcPhd_4",EcPhd_4));
    double EcFhd_1 = 1.5550000000000000E-02;
    params_.push_back(make_pair("EcFhd_1",EcFhd_1));
    double EcFhd_2 = -2.6900000000000000E-02;
    params_.push_back(make_pair("EcFhd_2",EcFhd_2));
    double EcFhd_3 = 6.9999999999999999E-04;
    params_.push_back(make_pair("EcFhd_3",EcFhd_3));
    double EcFhd_4 = -4.7999999999999996E-03;
    params_.push_back(make_pair("EcFhd_4",EcFhd_4));
    double Fg = 1.1000000000000000E-01;
    params_.push_back(make_pair("Fg",Fg));
    double Bg = 7.3889999999999999E-06;
    params_.push_back(make_pair("Bg",Bg));
    double Cx = 1.6670000000000001E-03;
    params_.push_back(make_pair("Cx",Cx));
    double Cinf = 4.2350000000000000E-03;
    params_.push_back(make_pair("Cinf",Cinf));
    double Cg_1 = 2.5680000000000000E-03;
    params_.push_back(make_pair("Cg_1",Cg_1));
    double Cg_2 = 2.3265999999999998E-02;
    params_.push_back(make_pair("Cg_2",Cg_2));
    double Cg_3 = 8.7230000000000008E+00;
    params_.push_back(make_pair("Cg_3",Cg_3));
    double Cg_4 = 4.7199999999999998E-01;
    params_.push_back(make_pair("Cg_4",Cg_4));
    double Pg_1 = 1.7450000000000001E+00;
    params_.push_back(make_pair("Pg_1",Pg_1));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
P86_C_Functional::~P86_C_Functional()
{
}
void P86_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;
    double Fg = params_[16].second;
    double Bg = params_[17].second;
    double Cx = params_[18].second;
    double Cinf = params_[19].second;
    double Cg_1 = params_[20].second;
    double Cg_2 = params_[21].second;
    double Cg_3 = params_[22].second;
    double Cg_4 = params_[23].second;
    double Pg_1 = params_[24].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t15043 = rho_a[index]*2.0;
            double t15044 = 1.0/pow(t15043,1.0/3.0);
            double t15045 = c*t15044;
            double t15046 = log(t15045);
            double t15047 = c*c;
            double t15048 = 1.0/pow(t15043,2.0/3.0);
            double t15049 = Cg_2*c*t15044;
            double t15050 = Bg*t15047*t15048;
            double t15051 = Cg_1+t15050+t15049;
            double t15052 = 1.0/rho_a[index];
            double t15053 = Bg*c*t15052*t15047*5.0E3;
            double t15054 = Cg_3*c*t15044;
            double t15055 = Cg_4*t15047*t15048;
            double t15056 = t15053+t15054+t15055+1.0;
            double t15057 = 1.0/t15056;
            double t15058 = t15051*t15057;
            double t15059 = Cx+t15058;
            functional_[index] = rho_a[index]*( ( (-c*t15044+1.0 > 0.0) ? 1.0*(EcPhd_2+EcPhd_1*t15046+EcPhd_4* \
               c*t15044+EcPhd_3*c*t15044*t15046) : 0.0 ) +( ( (t15045-1.0 > 0.0) ? EcPld_1*1.0 : 0.0 ) )/(EcPld_2* \
               sqrt(t15045)+EcPld_3*c*t15044+1.0))*2.0+(gamma_aa[index]*1.0/pow(t15043,4.0/3.0)*t15059*exp(-(Cinf* \
               Fg*Pg_1*1.0/pow(t15043,7.0/6.0)*sqrt(gamma_aa[index]*4.0))/t15059)*1.0/sqrt(pow(2.0,1.0/3.0)*(1.0/ \
               2.0))*4.0)/two_13;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t15061 = rho_a[index]*2.0;
            double t15062 = 1.0/pow(t15061,1.0/3.0);
            double t15063 = c*t15062;
            double t15064 = log(t15063);
            double t15065 = 1.0/pow(t15061,4.0/3.0);
            double t15066 = EcPhd_1*t15064;
            double t15067 = EcPhd_4*c*t15062;
            double t15068 = EcPhd_3*c*t15062*t15064;
            double t15069 = EcPhd_2+t15066+t15067+t15068;
            double t15070 = t15063-1.0;
            double t15071 = 0.0 ;
            double t15072 = sqrt(t15063);
            double t15073 = EcPld_2*t15072;
            double t15074 = EcPld_3*c*t15062;
            double t15075 = t15073+t15074+1.0;
            double t15076 = ( (t15070 > 0.0) ?  1.0 : 0.0 ) ;
            double t15077 = 1.0/t15075;
            double t15078 = c*c;
            double t15079 = 1.0/rho_a[index];
            double t15080 = 1.0/pow(t15061,2.0/3.0);
            double t15081 = Bg*c*t15078*t15079*5.0E3;
            double t15082 = Cg_3*c*t15062;
            double t15083 = Cg_4*t15080*t15078;
            double t15084 = t15081+t15082+t15083+1.0;
            double t15085 = 1.0/t15084;
            double t15086 = 1.0/pow(t15061,5.0/3.0);
            double t15087 = Cg_2*c*t15062;
            double t15088 = Bg*t15080*t15078;
            double t15089 = Cg_1+t15087+t15088;
            double t15090 = 1.0/two_13;
            double t15091 = t15085*t15089;
            double t15092 = Cx+t15091;
            double t15093 = 1.0/t15092;
            double t15094 = gamma_aa[index]*4.0;
            double t15095 = sqrt(t15094);
            double t15096 = 1.0/pow(t15061,7.0/6.0);
            double t15101 = Cinf*Fg*Pg_1*t15093*t15095*t15096;
            double t15097 = exp(-t15101);
            double t15098 = pow(2.0,1.0/3.0);
            double t15099 = t15098*(1.0/2.0);
            double t15100 = 1.0/sqrt(t15099);
            double t15102 = Cg_2*c*t15065*(1.0/3.0);
            double t15103 = Bg*t15086*t15078*(2.0/3.0);
            double t15104 = t15102+t15103;
            double t15105 = t15104*t15085;
            double t15106 = 1.0/(rho_a[index]*rho_a[index]);
            double t15107 = Bg*c*t15106*t15078*2.5E3;
            double t15108 = Cg_3*c*t15065*(1.0/3.0);
            double t15109 = Cg_4*t15086*t15078*(2.0/3.0);
            double t15110 = t15107+t15108+t15109;
            double t15111 = 1.0/(t15084*t15084);
            double t15112 = t15105-t15110*t15111*t15089;
            v_rho_a_[index] = rho_a[index]*( ( (-t15063+1.0 > 0.0) ? 1.0*(EcPhd_1*t15079*(1.0/6.0)+EcPhd_3*c* \
               t15065*(1.0/3.0)+EcPhd_4*c*t15065*(1.0/3.0)+EcPhd_3*c*t15064*t15065*(1.0/3.0)) : 0.0 ) -EcPld_1*1.0/ \
               (t15075*t15075)*t15076*(EcPld_3*c*t15065*(1.0/3.0)+EcPld_2*c*1.0/sqrt(t15063)*t15065*(1.0/6.0))-c* \
               t15071*t15065*t15069*(1.0/3.0)+EcPld_1*c*t15071*t15065*t15077*(1.0/3.0))*-2.0+ ( (-c*t15062+1.0 >  \
               0.0) ? t15069*1.0 : 0.0 ) +EcPld_1*t15076*t15077-gamma_aa[index]*t15100*t15112*t15090*t15065*t15097* \
               4.0-gamma_aa[index]*t15100*1.0/pow(t15061,7.0/3.0)*t15090*t15092*t15097*(1.6E1/3.0)+gamma_aa[index]* \
               t15100*t15090*t15065*t15092*t15097*(Cinf*Fg*Pg_1*1.0/pow(t15061,1.3E1/6.0)*t15093*t15095*(7.0/6.0) \
               -Cinf*Fg*Pg_1*t15112*1.0/(t15092*t15092)*t15095*t15096)*4.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t15114 = rho_a[index]*2.0;
                double t15115 = c*c;
                double t15116 = 1.0/pow(t15114,1.0/3.0);
                double t15117 = 1.0/pow(t15114,2.0/3.0);
                double t15118 = Cg_2*c*t15116;
                double t15119 = Bg*t15115*t15117;
                double t15120 = Cg_1+t15118+t15119;
                double t15121 = 1.0/rho_a[index];
                double t15122 = Bg*c*t15121*t15115*5.0E3;
                double t15123 = Cg_3*c*t15116;
                double t15124 = Cg_4*t15115*t15117;
                double t15125 = t15122+t15123+t15124+1.0;
                double t15126 = 1.0/t15125;
                double t15127 = t15120*t15126;
                double t15128 = Cx+t15127;
                double t15129 = 1.0/two_13;
                double t15130 = 1.0/t15128;
                double t15131 = gamma_aa[index]*4.0;
                double t15132 = sqrt(t15131);
                double t15133 = 1.0/pow(t15114,7.0/6.0);
                double t15134 = exp(-Cinf*Fg*Pg_1*t15130*t15132*t15133);
                double t15135 = pow(2.0,1.0/3.0);
                double t15136 = t15135*(1.0/2.0);
                double t15137 = 1.0/sqrt(t15136);
                v_gamma_aa_[index] = 1.0/pow(t15114,4.0/3.0)*t15134*t15128*t15137*t15129*4.0-Cinf*Fg*Pg_1*1.0/pow(t15114,5.0/ \
                   2.0)*t15132*t15134*t15137*t15129*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t15140 = rho_a[index]*2.0;
            double t15141 = 1.0/pow(t15140,4.0/3.0);
            double t15142 = 1.0/pow(t15140,1.0/3.0);
            double t15143 = c*t15142;
            double t15150 = 1.0/sqrt(t15143);
            double t15166 = EcPld_3*c*t15141*(1.0/3.0);
            double t15167 = EcPld_2*c*t15141*t15150*(1.0/6.0);
            double t15144 = t15166+t15167;
            double t15145 = sqrt(t15143);
            double t15146 = EcPld_2*t15145;
            double t15147 = EcPld_3*c*t15142;
            double t15148 = t15146+t15147+1.0;
            double t15149 = 1.0/pow(t15140,7.0/3.0);
            double t15151 = 1.0/(rho_a[index]*rho_a[index]);
            double t15152 = two_13*2.0;
            double t15153 = t15152-2.0;
            double t15154 = 1.0/t15153;
            double t15155 = log(t15143);
            double t15156 = t15143-1.0;
            double t15157 = c*c;
            double t15158 = 1.0/pow(t15140,8.0/3.0);
            double t15159 = EcPhd_1*t15155;
            double t15160 = EcPhd_4*c*t15142;
            double t15161 = EcPhd_3*c*t15142*t15155;
            double t15162 = EcPhd_2+t15160+t15161+t15159;
            double t15163 = 0.0 ;
            double t15164 = 0.0 ;
            double t15165 = 1.0/t15148;
            double t15168 = 1.0/(t15148*t15148);
            double t15169 = ( (t15156 > 0.0) ?  1.0 : 0.0 ) ;
            double t15170 = t15144*t15144;
            double t15171 = 1.0/(t15148*t15148*t15148);
            double t15172 = EcPld_1*t15170*t15171*2.0;
            double t15173 = EcFld_2*t15145;
            double t15174 = EcFld_3*c*t15142;
            double t15175 = t15173+t15174+1.0;
            double t15176 = 1.0/t15175;
            double t15177 = EcFld_1*t15176;
            double t15178 = t15177-EcPld_1*t15165;
            double t15179 = t15151*t15154*t15178*(2.0/9.0);
            double t15180 = EcPld_3*c*t15149*(4.0/9.0);
            double t15181 = EcPld_2*c*t15150*t15149*(2.0/9.0);
            double t15182 = 1.0/pow(t15143,3.0/2.0);
            double t15183 = t15180+t15181-EcPld_2*t15182*t15157*t15158*(1.0/3.6E1);
            double t15184 = EcPld_1*t15183*t15168;
            double t15185 = -t15143+1.0;
            double t15186 = ( (t15185 > 0.0) ?  1.0 : 0.0 ) ;
            double t15187 = EcPhd_1*t15151*(1.0/1.2E1);
            double t15188 = EcPhd_3*c*t15149*(5.0/9.0);
            double t15189 = EcPhd_4*c*t15149*(4.0/9.0);
            double t15190 = EcFhd_1*t15155;
            double t15191 = EcFhd_4*c*t15142;
            double t15192 = EcFhd_3*c*t15142*t15155;
            double t15193 = EcPhd_3*c*t15155*t15149*(4.0/9.0);
            double t15194 = c*t15162*t15163*t15149*(4.0/9.0);
            double t15195 = t15162*t15164*t15157*t15158*(1.0/9.0);
            double t15196 = 1.0/rho_a[index];
            double t15197 = EcPhd_1*t15196*(1.0/6.0);
            double t15198 = EcPhd_3*c*t15141*(1.0/3.0);
            double t15199 = EcPhd_4*c*t15141*(1.0/3.0);
            double t15200 = EcPhd_3*c*t15141*t15155*(1.0/3.0);
            double t15201 = t15200+t15197+t15198+t15199;
            double t15202 = c*t15201*t15141*t15163*(2.0/3.0);
            double t15203 = EcPld_1*c*t15141*t15144*t15163*t15168*(2.0/3.0);
            double t15204 = 1.0/pow(t15140,2.0/3.0);
            double t15205 = Bg*c*t15157*t15196*5.0E3;
            double t15206 = Cg_3*c*t15142;
            double t15207 = Cg_4*t15204*t15157;
            double t15208 = t15205+t15206+t15207+1.0;
            double t15209 = 1.0/t15208;
            double t15210 = 1.0/pow(t15140,5.0/3.0);
            double t15211 = Cg_2*c*t15142;
            double t15212 = Bg*t15204*t15157;
            double t15213 = Cg_1+t15211+t15212;
            double t15214 = 1.0/two_13;
            double t15215 = t15213*t15209;
            double t15216 = Cx+t15215;
            double t15217 = 1.0/t15216;
            double t15218 = gamma_aa[index]*4.0;
            double t15219 = sqrt(t15218);
            double t15220 = 1.0/pow(t15140,7.0/6.0);
            double t15233 = Cinf*Fg*Pg_1*t15220*t15217*t15219;
            double t15221 = exp(-t15233);
            double t15222 = pow(2.0,1.0/3.0);
            double t15223 = t15222*(1.0/2.0);
            double t15224 = 1.0/sqrt(t15223);
            double t15225 = Bg*c*t15151*t15157*2.5E3;
            double t15226 = Cg_3*c*t15141*(1.0/3.0);
            double t15227 = Cg_4*t15210*t15157*(2.0/3.0);
            double t15228 = t15225+t15226+t15227;
            double t15229 = Cg_2*c*t15141*(1.0/3.0);
            double t15230 = Bg*t15210*t15157*(2.0/3.0);
            double t15231 = t15230+t15229;
            double t15232 = 1.0/(t15208*t15208);
            double t15234 = t15231*t15209;
            double t15240 = t15213*t15232*t15228;
            double t15235 = -t15240+t15234;
            double t15237 = 1.0/pow(t15140,1.3E1/6.0);
            double t15238 = Cinf*Fg*Pg_1*t15217*t15219*t15237*(7.0/6.0);
            double t15239 = 1.0/(t15216*t15216);
            double t15241 = Cinf*Fg*Pg_1*t15220*t15235*t15219*t15239;
            double t15236 = -t15241+t15238;
            double t15242 = Cg_2*c*t15149*(4.0/9.0);
            double t15243 = Bg*t15157*t15158*(1.0E1/9.0);
            double t15244 = t15242+t15243;
            double t15245 = t15244*t15209;
            double t15246 = t15228*t15228;
            double t15247 = 1.0/(t15208*t15208*t15208);
            double t15248 = t15213*t15246*t15247*2.0;
            double t15249 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t15250 = Bg*c*t15157*t15249*2.5E3;
            double t15251 = Cg_3*c*t15149*(4.0/9.0);
            double t15252 = Cg_4*t15157*t15158*(1.0E1/9.0);
            double t15253 = t15250+t15251+t15252;
            double t15254 = t15245+t15248-t15213*t15232*t15253-t15231*t15232*t15228*2.0;
            v_rho_a_rho_a_[index] = rho_a[index]*(t15202+t15203+t15194+t15195-t15186*(t15193+t15187+t15188+t15189+ \
               t15151*t15154*(EcFhd_2-EcPhd_2-t15160-t15161+t15190+t15191+t15192-t15159)*(2.0/9.0))-t15169*(t15172- \
               t15184+t15179)-EcPld_1*c*t15163*t15165*t15149*(4.0/9.0)-EcPld_1*t15164*t15165*t15157*t15158*(1.0/9.0) \
               )*-2.0-rho_a[index]*(t15202+t15203+t15194+t15195-t15186*(t15193+t15187+t15188+t15189-t15151*t15154* \
               (EcFhd_2-EcPhd_2+t15190+t15191+t15192-EcPhd_1*t15155-EcPhd_4*c*t15142-EcPhd_3*c*t15142*t15155)*(2.0/ \
               9.0))+t15169*(-t15172+t15184+t15179)-EcPld_1*c*t15163*t15165*t15149*(4.0/9.0)-EcPld_1*t15164*t15165* \
               t15157*t15158*(1.0/9.0))*2.0-t15201*t15186*4.0+EcPld_1*t15144*t15168*t15169*4.0+c*t15141*t15162*t15163* \
               (4.0/3.0)-EcPld_1*c*t15141*t15163*t15165*(4.0/3.0)+gamma_aa[index]*t15221*t15141*t15214*t15224*t15254* \
               8.0+gamma_aa[index]*t15221*t15214*t15224*t15235*t15149*(6.4E1/3.0)+gamma_aa[index]*1.0/pow(t15140,1.0E1/ \
               3.0)*t15221*t15214*t15224*t15216*(2.24E2/9.0)-gamma_aa[index]*t15221*t15141*t15214*t15224*t15216*(Cinf* \
               Fg*Pg_1*1.0/pow(t15140,1.9E1/6.0)*t15217*t15219*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t15220*t15254*t15219*t15239- \
               Cinf*Fg*Pg_1*t15235*t15219*t15237*t15239*(7.0/3.0)+Cinf*Fg*Pg_1*t15220*1.0/(t15216*t15216*t15216)* \
               (t15235*t15235)*t15219*2.0)*8.0-gamma_aa[index]*t15221*t15141*t15214*t15224*t15235*t15236*1.6E1-gamma_aa[index]* \
               t15221*t15214*t15224*t15216*t15236*t15149*(6.4E1/3.0)+gamma_aa[index]*t15221*t15141*t15214*t15224* \
               t15216*(t15236*t15236)*8.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t15256 = rho_a[index]*2.0;
                double t15257 = c*c;
                double t15258 = 1.0/pow(t15256,1.0/3.0);
                double t15259 = 1.0/pow(t15256,2.0/3.0);
                double t15260 = Cg_2*c*t15258;
                double t15261 = Bg*t15257*t15259;
                double t15262 = Cg_1+t15260+t15261;
                double t15263 = 1.0/rho_a[index];
                double t15264 = Bg*c*t15263*t15257*5.0E3;
                double t15265 = Cg_3*c*t15258;
                double t15266 = Cg_4*t15257*t15259;
                double t15267 = t15264+t15265+t15266+1.0;
                double t15268 = 1.0/t15267;
                double t15269 = t15262*t15268;
                double t15270 = Cx+t15269;
                double t15271 = 1.0/two_13;
                double t15272 = 1.0/t15270;
                double t15273 = gamma_aa[index]*4.0;
                double t15274 = sqrt(t15273);
                double t15275 = 1.0/pow(t15256,7.0/6.0);
                double t15282 = Cinf*Fg*Pg_1*t15272*t15274*t15275;
                double t15276 = exp(-t15282);
                double t15277 = 1.0/pow(t15256,4.0/3.0);
                double t15278 = 1.0/pow(t15256,5.0/3.0);
                double t15279 = pow(2.0,1.0/3.0);
                double t15280 = t15279*(1.0/2.0);
                double t15281 = 1.0/sqrt(t15280);
                double t15283 = Cg_2*c*t15277*(1.0/3.0);
                double t15284 = Bg*t15257*t15278*(2.0/3.0);
                double t15285 = t15283+t15284;
                double t15286 = t15285*t15268;
                double t15287 = 1.0/(rho_a[index]*rho_a[index]);
                double t15288 = Bg*c*t15257*t15287*2.5E3;
                double t15289 = Cg_3*c*t15277*(1.0/3.0);
                double t15290 = Cg_4*t15257*t15278*(2.0/3.0);
                double t15291 = t15290+t15288+t15289;
                double t15292 = 1.0/(t15267*t15267);
                double t15296 = t15262*t15291*t15292;
                double t15293 = t15286-t15296;
                double t15294 = 1.0/pow(t15256,1.3E1/6.0);
                double t15295 = 1.0/(t15270*t15270);
                double t15297 = 1.0/sqrt(t15273);
                double t15298 = Cinf*Fg*Pg_1*t15272*t15274*t15294*(7.0/6.0);
                double t15299 = t15298-Cinf*Fg*Pg_1*t15274*t15275*t15293*t15295;
                double t15300 = 1.0/pow(t15256,5.0/2.0);
                v_rho_a_gamma_aa_[index] = t15270*t15271*t15281*1.0/pow(t15256,7.0/3.0)*t15276*(-1.6E1/3.0)-t15271* \
                   t15281*t15293*t15276*t15277*4.0+t15270*t15271*t15281*t15276*t15277*t15299*4.0+gamma_aa[index]*t15270* \
                   t15271*t15281*t15276*t15277*(Cinf*Fg*Pg_1*t15272*t15294*t15297*(7.0/6.0)-Cinf*Fg*Pg_1*t15275*t15293* \
                   t15295*t15297)*4.0+gamma_aa[index]*t15270*t15271*t15281*t15276*t15277*(Cinf*Fg*Pg_1*t15272*t15294* \
                   t15297*(7.0/1.2E1)-Cinf*Fg*Pg_1*t15275*t15293*t15295*t15297*(1.0/2.0))*8.0+Cinf*Fg*Pg_1*t15271*t15281* \
                   1.0/pow(t15256,7.0/2.0)*t15274*t15276*(8.0/3.0)-Cinf*Fg*Pg_1*t15300*t15271*t15281*t15274*t15276*t15299* \
                   2.0+Cinf*Fg*Pg_1*t15300*t15271*t15272*t15281*t15274*t15293*t15276*2.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t15302 = rho_a[index]*2.0;
                double t15303 = c*c;
                double t15304 = 1.0/pow(t15302,1.0/3.0);
                double t15305 = 1.0/pow(t15302,2.0/3.0);
                double t15306 = gamma_aa[index]*4.0;
                double t15307 = 1.0/two_13;
                double t15308 = Cg_2*c*t15304;
                double t15309 = Bg*t15303*t15305;
                double t15310 = Cg_1+t15308+t15309;
                double t15311 = 1.0/rho_a[index];
                double t15312 = Bg*c*t15311*t15303*5.0E3;
                double t15313 = Cg_3*c*t15304;
                double t15314 = Cg_4*t15303*t15305;
                double t15315 = t15312+t15313+t15314+1.0;
                double t15316 = 1.0/t15315;
                double t15317 = t15310*t15316;
                double t15318 = Cx+t15317;
                double t15319 = 1.0/t15318;
                double t15320 = sqrt(t15306);
                double t15321 = 1.0/pow(t15302,7.0/6.0);
                double t15322 = exp(-Cinf*Fg*Pg_1*t15320*t15321*t15319);
                double t15323 = pow(2.0,1.0/3.0);
                double t15324 = t15323*(1.0/2.0);
                double t15325 = 1.0/sqrt(t15324);
                v_gamma_aa_gamma_aa_[index] = Cinf*Fg*Pg_1*1.0/pow(t15302,5.0/2.0)*t15322*1.0/sqrt(t15306)*t15307* \
                   t15325*-1.2E1+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t15302,1.1E1/3.0)*t15322*t15307*t15325*t15319* \
                   4.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void P86_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;
    double Fg = params_[16].second;
    double Bg = params_[17].second;
    double Cx = params_[18].second;
    double Cinf = params_[19].second;
    double Cg_1 = params_[20].second;
    double Cg_2 = params_[21].second;
    double Cg_3 = params_[22].second;
    double Cg_4 = params_[23].second;
    double Pg_1 = params_[24].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11548 = rho_a[index]+rho_b[index];
            double t11549 = 1.0/pow(t11548,1.0/3.0);
            double t11550 = 1.0/t11548;
            double t11551 = rho_a[index]-rho_b[index];
            double t11552 = t11550*t11551;
            double t11553 = c*t11549;
            double t11554 = log(t11553);
            double t11555 = EcPhd_1*t11554;
            double t11556 = two_13*2.0;
            double t11557 = t11556-2.0;
            double t11558 = 1.0/t11557;
            double t11559 = sqrt(t11553);
            double t11560 = EcPld_2*t11559;
            double t11561 = EcPld_3*c*t11549;
            double t11562 = t11560+t11561+1.0;
            double t11563 = 1.0/t11562;
            double t11564 = EcPld_1*t11563;
            double t11565 = t11552+1.0;
            double t11566 = pow(t11565,4.0/3.0);
            double t11567 = -t11552+1.0;
            double t11568 = pow(t11567,4.0/3.0);
            double t11569 = t11566+t11568-2.0;
            double t11570 = c*c;
            double t11571 = 1.0/pow(t11548,2.0/3.0);
            double t11572 = Bg*t11570*t11571;
            double t11573 = Cg_2*c*t11549;
            double t11574 = Cg_1+t11572+t11573;
            double t11575 = Bg*c*t11550*t11570*1.0E4;
            double t11576 = Cg_4*t11570*t11571;
            double t11577 = Cg_3*c*t11549;
            double t11578 = t11575+t11576+t11577+1.0;
            double t11579 = 1.0/t11578;
            double t11580 = t11574*t11579;
            double t11581 = Cx+t11580;
            double t11582 = gamma_ab[index]*2.0;
            double t11583 = gamma_aa[index]+gamma_bb[index]+t11582;
            functional_[index] = t11548*( ( (-c*t11549+1.0 > 0.0) ? 1.0*(EcPhd_2+t11555+t11558*t11569*(EcFhd_2- \
               EcPhd_2-t11555+EcFhd_1*t11554+EcFhd_4*c*t11549-EcPhd_4*c*t11549+EcFhd_3*c*t11554*t11549-EcPhd_3*c* \
               t11554*t11549)+EcPhd_4*c*t11549+EcPhd_3*c*t11554*t11549) : 0.0 ) + ( (t11553-1.0 > 0.0) ? 1.0*(t11564- \
               t11558*t11569*(t11564-EcFld_1/(EcFld_2*t11559+EcFld_3*c*t11549+1.0))) : 0.0 ) )+(t11581*t11583*1.0/ \
               pow(t11548,4.0/3.0)*exp(-(Cinf*Fg*Pg_1*sqrt(t11583)*1.0/pow(t11548,7.0/6.0))/t11581)*1.0/sqrt(pow(t11550* \
               t11551*(-1.0/2.0)+1.0/2.0,5.0/3.0)+pow(t11550*t11551*(1.0/2.0)+1.0/2.0,5.0/3.0)))/two_13;
        } else if (rho_a[index] > cutoff_) {
            double t13960 = rho_a[index]+rho_b[index];
            double t13961 = 1.0/pow(t13960,1.0/3.0);
            double t13962 = c*t13961;
            double t13963 = log(t13962);
            double t13964 = EcPhd_1*t13963;
            double t13965 = pow(2.0,1.0/3.0);
            double t13966 = t13965*2.0;
            double t13967 = t13966-2.0;
            double t13968 = two_13*2.0;
            double t13969 = t13968-2.0;
            double t13970 = 1.0/t13969;
            double t13971 = sqrt(t13962);
            double t13972 = EcPld_2*t13971;
            double t13973 = EcPld_3*c*t13961;
            double t13974 = t13972+t13973+1.0;
            double t13975 = 1.0/t13974;
            double t13976 = EcPld_1*t13975;
            double t13977 = c*c;
            double t13978 = 1.0/pow(t13960,2.0/3.0);
            double t13979 = Bg*t13977*t13978;
            double t13980 = Cg_2*c*t13961;
            double t13981 = Cg_1+t13980+t13979;
            double t13982 = 1.0/t13960;
            double t13983 = Bg*c*t13982*t13977*1.0E4;
            double t13984 = Cg_4*t13977*t13978;
            double t13985 = Cg_3*c*t13961;
            double t13986 = t13983+t13984+t13985+1.0;
            double t13987 = 1.0/t13986;
            double t13988 = t13981*t13987;
            double t13989 = Cx+t13988;
            double t13990 = gamma_ab[index]*2.0;
            double t13991 = gamma_aa[index]+gamma_bb[index]+t13990;
            functional_[index] = t13960*( ( (-c*t13961+1.0 > 0.0) ? 1.0*(EcPhd_2+t13964+t13970*t13967*(EcFhd_2- \
               EcPhd_2-t13964+EcFhd_1*t13963+EcFhd_4*c*t13961-EcPhd_4*c*t13961+EcFhd_3*c*t13961*t13963-EcPhd_3*c* \
               t13961*t13963)+EcPhd_4*c*t13961+EcPhd_3*c*t13961*t13963) : 0.0 ) + ( (t13962-1.0 > 0.0) ? 1.0*(t13976- \
               t13970*t13967*(t13976-EcFld_1/(EcFld_2*t13971+EcFld_3*c*t13961+1.0))) : 0.0 ) )+(1.0/pow(t13960,4.0/ \
               3.0)*t13991*t13989*exp(-(Cinf*Fg*Pg_1*1.0/pow(t13960,7.0/6.0)*sqrt(t13991))/t13989))/two_13;
        } else if (rho_b[index] > cutoff_) {
            double t12912 = rho_a[index]+rho_b[index];
            double t12913 = 1.0/pow(t12912,1.0/3.0);
            double t12914 = c*t12913;
            double t12915 = log(t12914);
            double t12916 = EcPhd_1*t12915;
            double t12917 = pow(2.0,1.0/3.0);
            double t12918 = t12917*2.0;
            double t12919 = t12918-2.0;
            double t12920 = two_13*2.0;
            double t12921 = t12920-2.0;
            double t12922 = 1.0/t12921;
            double t12923 = sqrt(t12914);
            double t12924 = EcPld_2*t12923;
            double t12925 = EcPld_3*c*t12913;
            double t12926 = t12924+t12925+1.0;
            double t12927 = 1.0/t12926;
            double t12928 = EcPld_1*t12927;
            double t12929 = c*c;
            double t12930 = 1.0/pow(t12912,2.0/3.0);
            double t12931 = Bg*t12930*t12929;
            double t12932 = Cg_2*c*t12913;
            double t12933 = Cg_1+t12931+t12932;
            double t12934 = 1.0/t12912;
            double t12935 = Bg*c*t12934*t12929*1.0E4;
            double t12936 = Cg_4*t12930*t12929;
            double t12937 = Cg_3*c*t12913;
            double t12938 = t12935+t12936+t12937+1.0;
            double t12939 = 1.0/t12938;
            double t12940 = t12933*t12939;
            double t12941 = Cx+t12940;
            double t12942 = gamma_ab[index]*2.0;
            double t12943 = gamma_aa[index]+gamma_bb[index]+t12942;
            functional_[index] = t12912*( ( (-c*t12913+1.0 > 0.0) ? 1.0*(EcPhd_2+t12916+t12922*t12919*(EcFhd_2- \
               EcPhd_2-t12916+EcFhd_1*t12915+EcFhd_4*c*t12913-EcPhd_4*c*t12913+EcFhd_3*c*t12913*t12915-EcPhd_3*c* \
               t12913*t12915)+EcPhd_4*c*t12913+EcPhd_3*c*t12913*t12915) : 0.0 ) + ( (t12914-1.0 > 0.0) ? 1.0*(t12928- \
               t12922*t12919*(t12928-EcFld_1/(EcFld_2*t12923+EcFld_3*c*t12913+1.0))) : 0.0 ) )+(1.0/pow(t12912,4.0/ \
               3.0)*t12941*t12943*exp(-(Cinf*Fg*Pg_1*1.0/pow(t12912,7.0/6.0)*sqrt(t12943))/t12941))/two_13;
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11585 = rho_a[index]+rho_b[index];
            double t11586 = 1.0/pow(t11585,1.0/3.0);
            double t11587 = 1.0/t11585;
            double t11588 = rho_a[index]-rho_b[index];
            double t11589 = t11587*t11588;
            double t11590 = c*t11586;
            double t11591 = log(t11590);
            double t11592 = EcPhd_1*t11591;
            double t11593 = 1.0/pow(t11585,4.0/3.0);
            double t11594 = two_13*2.0;
            double t11595 = t11594-2.0;
            double t11596 = 1.0/t11595;
            double t11597 = t11589+1.0;
            double t11598 = pow(t11597,4.0/3.0);
            double t11599 = -t11589+1.0;
            double t11600 = pow(t11599,4.0/3.0);
            double t11601 = t11600+t11598-2.0;
            double t11602 = EcPhd_1*t11587*(1.0/3.0);
            double t11603 = EcPhd_3*c*t11593*(1.0/3.0);
            double t11604 = EcPhd_4*c*t11593*(1.0/3.0);
            double t11605 = 1.0/(t11585*t11585);
            double t11616 = t11605*t11588;
            double t11606 = -t11616+t11587;
            double t11607 = EcFhd_1*t11591;
            double t11608 = EcFhd_4*c*t11586;
            double t11609 = EcPhd_4*c*t11586;
            double t11610 = EcFhd_3*c*t11591*t11586;
            double t11611 = EcPhd_3*c*t11591*t11586;
            double t11612 = EcPhd_3*c*t11591*t11593*(1.0/3.0);
            double t11613 = 1.0/sqrt(t11590);
            double t11614 = sqrt(t11590);
            double t11615 = pow(t11597,1.0/3.0);
            double t11617 = t11606*t11615*(4.0/3.0);
            double t11618 = pow(t11599,1.0/3.0);
            double t11619 = t11617-t11606*t11618*(4.0/3.0);
            double t11620 = EcFld_2*t11614;
            double t11621 = EcFld_3*c*t11586;
            double t11622 = t11620+t11621+1.0;
            double t11623 = EcPld_2*t11614;
            double t11624 = EcPld_3*c*t11586;
            double t11625 = t11623+t11624+1.0;
            double t11626 = EcPld_3*c*t11593*(1.0/3.0);
            double t11627 = EcPld_2*c*t11613*t11593*(1.0/6.0);
            double t11628 = t11626+t11627;
            double t11629 = 1.0/(t11625*t11625);
            double t11630 = t11590-1.0;
            double t11631 = EcFhd_2-EcPhd_2+t11610-t11611+t11607+t11608-t11609-t11592;
            double t11632 = 0.0 ;
            double t11633 = 1.0/t11625;
            double t11634 = EcPld_1*t11633;
            double t11635 = 1.0/t11622;
            double t11638 = EcFld_1*t11635;
            double t11636 = t11634-t11638;
            double t11637 = ( (t11630 > 0.0) ?  1.0 : 0.0 ) ;
            double t11639 = t11634-t11601*t11636*t11596;
            double t11640 = c*c;
            double t11641 = 1.0/pow(t11585,2.0/3.0);
            double t11642 = Bg*c*t11640*t11587*1.0E4;
            double t11643 = Cg_4*t11640*t11641;
            double t11644 = Cg_3*c*t11586;
            double t11645 = t11642+t11643+t11644+1.0;
            double t11646 = 1.0/t11645;
            double t11647 = 1.0/pow(t11585,5.0/3.0);
            double t11648 = Bg*t11640*t11641;
            double t11649 = Cg_2*c*t11586;
            double t11650 = Cg_1+t11648+t11649;
            double t11651 = gamma_ab[index]*2.0;
            double t11652 = gamma_aa[index]+gamma_bb[index]+t11651;
            double t11653 = 1.0/two_13;
            double t11654 = 1.0/pow(t11585,7.0/6.0);
            double t11655 = t11650*t11646;
            double t11656 = Cx+t11655;
            double t11657 = 1.0/t11656;
            double t11658 = sqrt(t11652);
            double t11663 = Cinf*Fg*Pg_1*t11654*t11657*t11658;
            double t11659 = exp(-t11663);
            double t11660 = t11587*t11588*(1.0/2.0);
            double t11661 = t11660+1.0/2.0;
            double t11662 = pow(t11661,5.0/3.0);
            double t11664 = -t11660+1.0/2.0;
            double t11665 = pow(t11664,5.0/3.0);
            double t11666 = t11662+t11665;
            double t11667 = 1.0/sqrt(t11666);
            double t11668 = Bg*t11640*t11647*(2.0/3.0);
            double t11669 = Cg_2*c*t11593*(1.0/3.0);
            double t11670 = t11668+t11669;
            double t11671 = t11670*t11646;
            double t11672 = Bg*c*t11640*t11605*1.0E4;
            double t11673 = Cg_4*t11640*t11647*(2.0/3.0);
            double t11674 = Cg_3*c*t11593*(1.0/3.0);
            double t11675 = t11672+t11673+t11674;
            double t11676 = 1.0/(t11645*t11645);
            double t11677 = t11671-t11650*t11675*t11676;
            double t11678 = t11587*(1.0/2.0);
            double t11679 = t11678-t11605*t11588*(1.0/2.0);
            v_rho_a_[index] = -t11585*( ( (-t11590+1.0 > 0.0) ? 1.0*(t11602+t11603+t11612+t11604-t11601*t11596* \
               (t11602+t11603+t11612+t11604-EcFhd_1*t11587*(1.0/3.0)-EcFhd_3*c*t11593*(1.0/3.0)-EcFhd_4*c*t11593* \
               (1.0/3.0)-EcFhd_3*c*t11591*t11593*(1.0/3.0))-t11631*t11619*t11596) : 0.0 ) -t11637*(t11601*t11596* \
               (EcFld_1*1.0/(t11622*t11622)*(EcFld_3*c*t11593*(1.0/3.0)+EcFld_2*c*t11613*t11593*(1.0/6.0))-EcPld_1* \
               t11628*t11629)+EcPld_1*t11628*t11629-t11636*t11619*t11596)+c*t11632*t11593*t11639*(1.0/3.0)-c*t11632* \
               t11593*(EcPhd_2+t11611+t11609+t11592+t11601*t11631*t11596)*(1.0/3.0))+t11637*t11639+ ( (-c*t11586+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t11611+t11609+t11592+t11601*t11596*(EcFhd_2-EcPhd_2+t11610+t11607+t11608- \
               t11592-EcPhd_4*c*t11586-EcPhd_3*c*t11591*t11586)) : 0.0 ) -t11652*t11653*t11656*1.0/pow(t11585,7.0/ \
               3.0)*t11667*t11659*(4.0/3.0)-t11652*t11653*t11593*t11659*t11677*1.0/sqrt(t11662+pow(t11587*t11588* \
               (-1.0/2.0)+1.0/2.0,5.0/3.0))-t11652*t11653*t11593*t11656*1.0/pow(t11666,3.0/2.0)*t11659*(pow(t11661,2.0/ \
               3.0)*t11679*(5.0/3.0)-pow(t11664,2.0/3.0)*t11679*(5.0/3.0))*(1.0/2.0)+t11652*t11653*t11593*t11656* \
               t11667*t11659*(Cinf*Fg*Pg_1*1.0/pow(t11585,1.3E1/6.0)*t11657*t11658*(7.0/6.0)-Cinf*Fg*Pg_1*t11654* \
               1.0/(t11656*t11656)*t11658*t11677);
        } else if (rho_a[index] > cutoff_) {
            double t13993 = rho_a[index]+rho_b[index];
            double t13994 = 1.0/pow(t13993,4.0/3.0);
            double t13995 = 1.0/pow(t13993,1.0/3.0);
            double t13996 = c*t13995;
            double t13997 = 1.0/sqrt(t13996);
            double t13998 = sqrt(t13996);
            double t13999 = EcPld_3*c*t13994*(1.0/3.0);
            double t14000 = EcPld_2*c*t13994*t13997*(1.0/6.0);
            double t14001 = t13999+t14000;
            double t14002 = EcPld_2*t13998;
            double t14003 = EcPld_3*c*t13995;
            double t14004 = t14002+t14003+1.0;
            double t14005 = 1.0/(t14004*t14004);
            double t14006 = EcPld_1*t14001*t14005;
            double t14007 = pow(2.0,1.0/3.0);
            double t14008 = t14007*2.0;
            double t14009 = t14008-2.0;
            double t14010 = two_13*2.0;
            double t14011 = t14010-2.0;
            double t14012 = 1.0/t14011;
            double t14013 = 1.0/t13993;
            double t14014 = EcPhd_1*t14013*(1.0/3.0);
            double t14015 = log(t13996);
            double t14016 = EcPhd_3*c*t13994*(1.0/3.0);
            double t14017 = EcPhd_4*c*t13994*(1.0/3.0);
            double t14018 = EcPhd_3*c*t13994*t14015*(1.0/3.0);
            double t14019 = t13996-1.0;
            double t14020 = EcPhd_1*t14015;
            double t14021 = 0.0 ;
            double t14022 = EcFld_2*t13998;
            double t14023 = EcFld_3*c*t13995;
            double t14024 = t14022+t14023+1.0;
            double t14025 = 1.0/t14004;
            double t14026 = EcPld_1*t14025;
            double t14027 = -t13996+1.0;
            double t14028 = ( (t14027 > 0.0) ?  1.0 : 0.0 ) ;
            double t14029 = EcFhd_1*t14015;
            double t14030 = EcFhd_4*c*t13995;
            double t14031 = EcPhd_4*c*t13995;
            double t14032 = EcFhd_3*c*t13995*t14015;
            double t14033 = EcPhd_3*c*t13995*t14015;
            double t14034 = ( (t14019 > 0.0) ?  1.0 : 0.0 ) ;
            double t14035 = 1.0/t14024;
            double t14036 = t14026-EcFld_1*t14035;
            double t14037 = t14026-t14012*t14009*t14036;
            double t14038 = c*c;
            double t14039 = 1.0/pow(t13993,2.0/3.0);
            double t14040 = Bg*c*t14013*t14038*1.0E4;
            double t14041 = Cg_4*t14038*t14039;
            double t14042 = Cg_3*c*t13995;
            double t14043 = t14040+t14041+t14042+1.0;
            double t14044 = 1.0/t14043;
            double t14045 = 1.0/pow(t13993,5.0/3.0);
            double t14046 = Bg*t14038*t14039;
            double t14047 = Cg_2*c*t13995;
            double t14048 = Cg_1+t14046+t14047;
            double t14049 = gamma_ab[index]*2.0;
            double t14050 = gamma_aa[index]+gamma_bb[index]+t14049;
            double t14051 = 1.0/two_13;
            double t14052 = 1.0/pow(t13993,7.0/6.0);
            double t14053 = t14044*t14048;
            double t14054 = Cx+t14053;
            double t14055 = 1.0/t14054;
            double t14056 = sqrt(t14050);
            double t14058 = Cinf*Fg*Pg_1*t14052*t14055*t14056;
            double t14057 = exp(-t14058);
            double t14059 = Bg*t14045*t14038*(2.0/3.0);
            double t14060 = Cg_2*c*t13994*(1.0/3.0);
            double t14061 = t14060+t14059;
            double t14062 = t14061*t14044;
            double t14063 = 1.0/(t13993*t13993);
            double t14064 = Bg*c*t14063*t14038*1.0E4;
            double t14065 = Cg_4*t14045*t14038*(2.0/3.0);
            double t14066 = Cg_3*c*t13994*(1.0/3.0);
            double t14067 = t14064+t14065+t14066;
            double t14068 = 1.0/(t14043*t14043);
            double t14069 = t14062-t14048*t14067*t14068;
            v_rho_a_[index] = t14028*(EcPhd_2+t14020+t14031+t14033+t14012*t14009*(EcFhd_2-EcPhd_2-t14020+t14030- \
               t14031+t14032-t14033+t14029))+t14034*t14037+t13993*(t14034*(t14006-t14012*t14009*(t14006-EcFld_1*1.0/ \
               (t14024*t14024)*(EcFld_3*c*t13994*(1.0/3.0)+EcFld_2*c*t13994*t13997*(1.0/6.0))))-t14028*(t14014+t14016+ \
               t14017+t14018-t14012*t14009*(t14014+t14016+t14017+t14018-EcFhd_1*t14013*(1.0/3.0)-EcFhd_3*c*t13994* \
               (1.0/3.0)-EcFhd_4*c*t13994*(1.0/3.0)-EcFhd_3*c*t13994*t14015*(1.0/3.0)))-c*t13994*t14021*t14037*(1.0/ \
               3.0)+c*t13994*t14021*(EcPhd_2+t14020+t14031+t14033+t14012*t14009*(EcFhd_2-EcPhd_2-t14020+t14030+t14032+ \
               t14029-EcPhd_4*c*t13995-EcPhd_3*c*t13995*t14015))*(1.0/3.0))-1.0/pow(t13993,7.0/3.0)*t14050*t14051* \
               t14054*t14057*(4.0/3.0)-t13994*t14050*t14051*t14057*t14069+t13994*t14050*t14051*t14054*t14057*(Cinf* \
               Fg*Pg_1*1.0/pow(t13993,1.3E1/6.0)*t14055*t14056*(7.0/6.0)-Cinf*Fg*Pg_1*t14052*1.0/(t14054*t14054)* \
               t14056*t14069);
        } else if (rho_b[index] > cutoff_) {
            double t12945 = rho_a[index]+rho_b[index];
            double t12946 = 1.0/pow(t12945,4.0/3.0);
            double t12947 = 1.0/pow(t12945,1.0/3.0);
            double t12948 = c*t12947;
            double t12949 = 1.0/sqrt(t12948);
            double t12950 = sqrt(t12948);
            double t12951 = EcPld_3*c*t12946*(1.0/3.0);
            double t12952 = EcPld_2*c*t12946*t12949*(1.0/6.0);
            double t12953 = t12951+t12952;
            double t12954 = EcPld_2*t12950;
            double t12955 = EcPld_3*c*t12947;
            double t12956 = t12954+t12955+1.0;
            double t12957 = 1.0/(t12956*t12956);
            double t12958 = EcPld_1*t12953*t12957;
            double t12959 = pow(2.0,1.0/3.0);
            double t12960 = t12959*2.0;
            double t12961 = t12960-2.0;
            double t12962 = two_13*2.0;
            double t12963 = t12962-2.0;
            double t12964 = 1.0/t12963;
            double t12965 = 1.0/t12945;
            double t12966 = EcPhd_1*t12965*(1.0/3.0);
            double t12967 = log(t12948);
            double t12968 = EcPhd_3*c*t12946*(1.0/3.0);
            double t12969 = EcPhd_4*c*t12946*(1.0/3.0);
            double t12970 = EcPhd_3*c*t12946*t12967*(1.0/3.0);
            double t12971 = t12948-1.0;
            double t12972 = EcPhd_1*t12967;
            double t12973 = 0.0 ;
            double t12974 = EcFld_2*t12950;
            double t12975 = EcFld_3*c*t12947;
            double t12976 = t12974+t12975+1.0;
            double t12977 = 1.0/t12956;
            double t12978 = EcPld_1*t12977;
            double t12979 = -t12948+1.0;
            double t12980 = ( (t12979 > 0.0) ?  1.0 : 0.0 ) ;
            double t12981 = EcFhd_1*t12967;
            double t12982 = EcFhd_4*c*t12947;
            double t12983 = EcPhd_4*c*t12947;
            double t12984 = EcFhd_3*c*t12947*t12967;
            double t12985 = EcPhd_3*c*t12947*t12967;
            double t12986 = ( (t12971 > 0.0) ?  1.0 : 0.0 ) ;
            double t12987 = 1.0/t12976;
            double t12988 = t12978-EcFld_1*t12987;
            double t12989 = t12978-t12961*t12964*t12988;
            double t12990 = c*c;
            double t12991 = 1.0/pow(t12945,2.0/3.0);
            double t12992 = Bg*c*t12990*t12965*1.0E4;
            double t12993 = Cg_4*t12990*t12991;
            double t12994 = Cg_3*c*t12947;
            double t12995 = t12992+t12993+t12994+1.0;
            double t12996 = 1.0/t12995;
            double t12997 = 1.0/pow(t12945,5.0/3.0);
            double t12998 = Bg*t12990*t12991;
            double t12999 = Cg_2*c*t12947;
            double t13000 = Cg_1+t12998+t12999;
            double t13001 = gamma_ab[index]*2.0;
            double t13002 = gamma_aa[index]+gamma_bb[index]+t13001;
            double t13003 = 1.0/two_13;
            double t13004 = 1.0/pow(t12945,7.0/6.0);
            double t13005 = t12996*t13000;
            double t13006 = Cx+t13005;
            double t13007 = 1.0/t13006;
            double t13008 = sqrt(t13002);
            double t13010 = Cinf*Fg*Pg_1*t13004*t13007*t13008;
            double t13009 = exp(-t13010);
            double t13011 = Bg*t12990*t12997*(2.0/3.0);
            double t13012 = Cg_2*c*t12946*(1.0/3.0);
            double t13013 = t13011+t13012;
            double t13014 = t12996*t13013;
            double t13015 = 1.0/(t12945*t12945);
            double t13016 = Bg*c*t12990*t13015*1.0E4;
            double t13017 = Cg_4*t12990*t12997*(2.0/3.0);
            double t13018 = Cg_3*c*t12946*(1.0/3.0);
            double t13019 = t13016+t13017+t13018;
            double t13020 = 1.0/(t12995*t12995);
            double t13021 = t13014-t13000*t13020*t13019;
            v_rho_a_[index] = t12980*(EcPhd_2+t12972+t12983+t12985+t12961*t12964*(EcFhd_2-EcPhd_2-t12972+t12981+ \
               t12982-t12983+t12984-t12985))+t12986*t12989+t12945*(t12986*(t12958-t12961*t12964*(t12958-EcFld_1*1.0/ \
               (t12976*t12976)*(EcFld_3*c*t12946*(1.0/3.0)+EcFld_2*c*t12946*t12949*(1.0/6.0))))-t12980*(t12970+t12966+ \
               t12968+t12969-t12961*t12964*(t12970+t12966+t12968+t12969-EcFhd_1*t12965*(1.0/3.0)-EcFhd_3*c*t12946* \
               (1.0/3.0)-EcFhd_4*c*t12946*(1.0/3.0)-EcFhd_3*c*t12946*t12967*(1.0/3.0)))-c*t12946*t12973*t12989*(1.0/ \
               3.0)+c*t12946*t12973*(EcPhd_2+t12972+t12983+t12985+t12961*t12964*(EcFhd_2-EcPhd_2-t12972+t12981+t12982+ \
               t12984-EcPhd_4*c*t12947-EcPhd_3*c*t12947*t12967))*(1.0/3.0))-1.0/pow(t12945,7.0/3.0)*t13002*t13003* \
               t13006*t13009*(4.0/3.0)-t12946*t13002*t13003*t13021*t13009+t12946*t13002*t13003*t13006*t13009*(Cinf* \
               Fg*Pg_1*1.0/pow(t12945,1.3E1/6.0)*t13007*t13008*(7.0/6.0)-Cinf*Fg*Pg_1*t13021*t13004*1.0/(t13006*t13006) \
               *t13008);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11681 = rho_a[index]+rho_b[index];
            double t11682 = 1.0/pow(t11681,1.0/3.0);
            double t11683 = 1.0/t11681;
            double t11684 = rho_a[index]-rho_b[index];
            double t11685 = t11683*t11684;
            double t11686 = c*t11682;
            double t11687 = log(t11686);
            double t11688 = EcPhd_1*t11687;
            double t11689 = 1.0/pow(t11681,4.0/3.0);
            double t11690 = two_13*2.0;
            double t11691 = t11690-2.0;
            double t11692 = 1.0/t11691;
            double t11693 = t11685+1.0;
            double t11694 = pow(t11693,4.0/3.0);
            double t11695 = -t11685+1.0;
            double t11696 = pow(t11695,4.0/3.0);
            double t11697 = t11694+t11696-2.0;
            double t11698 = EcPhd_1*t11683*(1.0/3.0);
            double t11699 = EcPhd_3*c*t11689*(1.0/3.0);
            double t11700 = EcPhd_4*c*t11689*(1.0/3.0);
            double t11701 = 1.0/(t11681*t11681);
            double t11702 = t11701*t11684;
            double t11703 = t11702+t11683;
            double t11704 = EcFhd_1*t11687;
            double t11705 = EcFhd_4*c*t11682;
            double t11706 = EcPhd_4*c*t11682;
            double t11707 = EcFhd_3*c*t11682*t11687;
            double t11708 = EcPhd_3*c*t11682*t11687;
            double t11709 = EcPhd_3*c*t11687*t11689*(1.0/3.0);
            double t11710 = 1.0/sqrt(t11686);
            double t11711 = sqrt(t11686);
            double t11712 = pow(t11693,1.0/3.0);
            double t11713 = t11703*t11712*(4.0/3.0);
            double t11714 = pow(t11695,1.0/3.0);
            double t11715 = t11713-t11703*t11714*(4.0/3.0);
            double t11716 = EcFld_2*t11711;
            double t11717 = EcFld_3*c*t11682;
            double t11718 = t11716+t11717+1.0;
            double t11719 = EcPld_2*t11711;
            double t11720 = EcPld_3*c*t11682;
            double t11721 = t11720+t11719+1.0;
            double t11722 = EcPld_3*c*t11689*(1.0/3.0);
            double t11723 = EcPld_2*c*t11710*t11689*(1.0/6.0);
            double t11724 = t11722+t11723;
            double t11725 = 1.0/(t11721*t11721);
            double t11726 = t11686-1.0;
            double t11727 = EcFhd_2-EcPhd_2+t11704+t11705-t11706+t11707-t11708-t11688;
            double t11728 = 0.0 ;
            double t11729 = 1.0/t11721;
            double t11730 = EcPld_1*t11729;
            double t11731 = 1.0/t11718;
            double t11734 = EcFld_1*t11731;
            double t11732 = t11730-t11734;
            double t11733 = ( (t11726 > 0.0) ?  1.0 : 0.0 ) ;
            double t11735 = t11730-t11732*t11692*t11697;
            double t11736 = c*c;
            double t11737 = 1.0/pow(t11681,2.0/3.0);
            double t11738 = Bg*c*t11736*t11683*1.0E4;
            double t11739 = Cg_4*t11736*t11737;
            double t11740 = Cg_3*c*t11682;
            double t11741 = t11740+t11738+t11739+1.0;
            double t11742 = 1.0/t11741;
            double t11743 = 1.0/pow(t11681,5.0/3.0);
            double t11744 = Bg*t11736*t11737;
            double t11745 = Cg_2*c*t11682;
            double t11746 = Cg_1+t11744+t11745;
            double t11747 = gamma_ab[index]*2.0;
            double t11748 = gamma_aa[index]+gamma_bb[index]+t11747;
            double t11749 = 1.0/two_13;
            double t11750 = 1.0/pow(t11681,7.0/6.0);
            double t11751 = t11742*t11746;
            double t11752 = Cx+t11751;
            double t11753 = 1.0/t11752;
            double t11754 = sqrt(t11748);
            double t11759 = Cinf*Fg*Pg_1*t11750*t11753*t11754;
            double t11755 = exp(-t11759);
            double t11756 = t11683*t11684*(1.0/2.0);
            double t11757 = t11756+1.0/2.0;
            double t11758 = pow(t11757,5.0/3.0);
            double t11760 = -t11756+1.0/2.0;
            double t11761 = pow(t11760,5.0/3.0);
            double t11762 = t11761+t11758;
            double t11763 = 1.0/sqrt(t11762);
            double t11764 = Bg*t11743*t11736*(2.0/3.0);
            double t11765 = Cg_2*c*t11689*(1.0/3.0);
            double t11766 = t11764+t11765;
            double t11767 = t11742*t11766;
            double t11768 = Bg*c*t11701*t11736*1.0E4;
            double t11769 = Cg_4*t11743*t11736*(2.0/3.0);
            double t11770 = Cg_3*c*t11689*(1.0/3.0);
            double t11771 = t11770+t11768+t11769;
            double t11772 = 1.0/(t11741*t11741);
            double t11773 = t11767-t11771*t11772*t11746;
            double t11774 = t11683*(1.0/2.0);
            double t11775 = t11701*t11684*(1.0/2.0);
            double t11776 = t11774+t11775;
            v_rho_b_[index] = -t11681*( ( (-t11686+1.0 > 0.0) ? 1.0*(t11700+t11709+t11698+t11699-t11692*t11697* \
               (t11700+t11709+t11698+t11699-EcFhd_1*t11683*(1.0/3.0)-EcFhd_3*c*t11689*(1.0/3.0)-EcFhd_4*c*t11689* \
               (1.0/3.0)-EcFhd_3*c*t11687*t11689*(1.0/3.0))+t11715*t11727*t11692) : 0.0 ) -t11733*(t11692*t11697* \
               (EcFld_1*1.0/(t11718*t11718)*(EcFld_3*c*t11689*(1.0/3.0)+EcFld_2*c*t11710*t11689*(1.0/6.0))-EcPld_1* \
               t11724*t11725)+EcPld_1*t11724*t11725+t11732*t11715*t11692)+c*t11735*t11728*t11689*(1.0/3.0)-c*t11728* \
               t11689*(EcPhd_2+t11706+t11708+t11688+t11727*t11692*t11697)*(1.0/3.0))+t11733*t11735+ ( (-c*t11682+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t11706+t11708+t11688+t11692*t11697*(EcFhd_2-EcPhd_2+t11704+t11705+t11707- \
               t11688-EcPhd_4*c*t11682-EcPhd_3*c*t11682*t11687)) : 0.0 ) -t11752*1.0/pow(t11681,7.0/3.0)*t11763*t11755* \
               t11748*t11749*(4.0/3.0)-t11755*t11773*t11748*t11749*t11689*1.0/sqrt(t11758+pow(t11683*t11684*(-1.0/ \
               2.0)+1.0/2.0,5.0/3.0))-t11752*1.0/pow(t11762,3.0/2.0)*t11755*t11748*t11749*t11689*(pow(t11760,2.0/ \
               3.0)*t11776*(5.0/3.0)-pow(t11757,2.0/3.0)*t11776*(5.0/3.0))*(1.0/2.0)+t11752*t11763*t11755*t11748* \
               t11749*t11689*(Cinf*Fg*Pg_1*1.0/pow(t11681,1.3E1/6.0)*t11753*t11754*(7.0/6.0)-Cinf*Fg*Pg_1*t11750* \
               1.0/(t11752*t11752)*t11754*t11773);
        } else if (rho_a[index] > cutoff_) {
            double t14071 = rho_a[index]+rho_b[index];
            double t14072 = 1.0/pow(t14071,4.0/3.0);
            double t14073 = 1.0/pow(t14071,1.0/3.0);
            double t14074 = c*t14073;
            double t14075 = 1.0/sqrt(t14074);
            double t14076 = sqrt(t14074);
            double t14077 = EcPld_3*c*t14072*(1.0/3.0);
            double t14078 = EcPld_2*c*t14072*t14075*(1.0/6.0);
            double t14079 = t14077+t14078;
            double t14080 = EcPld_2*t14076;
            double t14081 = EcPld_3*c*t14073;
            double t14082 = t14080+t14081+1.0;
            double t14083 = 1.0/(t14082*t14082);
            double t14084 = EcPld_1*t14083*t14079;
            double t14085 = pow(2.0,1.0/3.0);
            double t14086 = t14085*2.0;
            double t14087 = t14086-2.0;
            double t14088 = two_13*2.0;
            double t14089 = t14088-2.0;
            double t14090 = 1.0/t14089;
            double t14091 = 1.0/t14071;
            double t14092 = EcPhd_1*t14091*(1.0/3.0);
            double t14093 = log(t14074);
            double t14094 = EcPhd_3*c*t14072*(1.0/3.0);
            double t14095 = EcPhd_4*c*t14072*(1.0/3.0);
            double t14096 = EcPhd_3*c*t14072*t14093*(1.0/3.0);
            double t14097 = t14074-1.0;
            double t14098 = EcPhd_1*t14093;
            double t14099 = 0.0 ;
            double t14100 = EcFld_2*t14076;
            double t14101 = EcFld_3*c*t14073;
            double t14102 = t14100+t14101+1.0;
            double t14103 = 1.0/t14082;
            double t14104 = EcPld_1*t14103;
            double t14105 = -t14074+1.0;
            double t14106 = ( (t14105 > 0.0) ?  1.0 : 0.0 ) ;
            double t14107 = EcFhd_1*t14093;
            double t14108 = EcFhd_4*c*t14073;
            double t14109 = EcPhd_4*c*t14073;
            double t14110 = EcFhd_3*c*t14073*t14093;
            double t14111 = EcPhd_3*c*t14073*t14093;
            double t14112 = ( (t14097 > 0.0) ?  1.0 : 0.0 ) ;
            double t14113 = 1.0/t14102;
            double t14114 = t14104-EcFld_1*t14113;
            double t14115 = t14104-t14114*t14090*t14087;
            double t14116 = c*c;
            double t14117 = 1.0/pow(t14071,2.0/3.0);
            double t14118 = Bg*c*t14116*t14091*1.0E4;
            double t14119 = Cg_4*t14116*t14117;
            double t14120 = Cg_3*c*t14073;
            double t14121 = t14120+t14118+t14119+1.0;
            double t14122 = 1.0/t14121;
            double t14123 = 1.0/pow(t14071,5.0/3.0);
            double t14124 = Bg*t14116*t14117;
            double t14125 = Cg_2*c*t14073;
            double t14126 = Cg_1+t14124+t14125;
            double t14127 = gamma_ab[index]*2.0;
            double t14128 = gamma_aa[index]+gamma_bb[index]+t14127;
            double t14129 = 1.0/two_13;
            double t14130 = 1.0/pow(t14071,7.0/6.0);
            double t14131 = t14122*t14126;
            double t14132 = Cx+t14131;
            double t14133 = 1.0/t14132;
            double t14134 = sqrt(t14128);
            double t14136 = Cinf*Fg*Pg_1*t14130*t14133*t14134;
            double t14135 = exp(-t14136);
            double t14137 = Bg*t14123*t14116*(2.0/3.0);
            double t14138 = Cg_2*c*t14072*(1.0/3.0);
            double t14139 = t14137+t14138;
            double t14140 = t14122*t14139;
            double t14141 = 1.0/(t14071*t14071);
            double t14142 = Bg*c*t14141*t14116*1.0E4;
            double t14143 = Cg_4*t14123*t14116*(2.0/3.0);
            double t14144 = Cg_3*c*t14072*(1.0/3.0);
            double t14145 = t14142+t14143+t14144;
            double t14146 = 1.0/(t14121*t14121);
            double t14147 = t14140-t14126*t14145*t14146;
            v_rho_b_[index] = t14106*(EcPhd_2+t14111+t14109+t14098+t14090*t14087*(EcFhd_2-EcPhd_2+t14110-t14111+ \
               t14107+t14108-t14109-t14098))+t14112*t14115+t14071*(t14112*(t14084-t14090*t14087*(t14084-EcFld_1*1.0/ \
               (t14102*t14102)*(EcFld_3*c*t14072*(1.0/3.0)+EcFld_2*c*t14072*t14075*(1.0/6.0))))-t14106*(t14092+t14094+ \
               t14095+t14096-t14090*t14087*(t14092+t14094+t14095+t14096-EcFhd_1*t14091*(1.0/3.0)-EcFhd_3*c*t14072* \
               (1.0/3.0)-EcFhd_4*c*t14072*(1.0/3.0)-EcFhd_3*c*t14072*t14093*(1.0/3.0)))-c*t14115*t14072*t14099*(1.0/ \
               3.0)+c*t14072*t14099*(EcPhd_2+t14111+t14109+t14098+t14090*t14087*(EcFhd_2-EcPhd_2+t14110+t14107+t14108- \
               t14098-EcPhd_4*c*t14073-EcPhd_3*c*t14073*t14093))*(1.0/3.0))-t14132*1.0/pow(t14071,7.0/3.0)*t14135* \
               t14128*t14129*(4.0/3.0)-t14072*t14135*t14128*t14129*t14147+t14132*t14072*t14135*t14128*t14129*(Cinf* \
               Fg*Pg_1*t14133*1.0/pow(t14071,1.3E1/6.0)*t14134*(7.0/6.0)-Cinf*Fg*Pg_1*t14130*1.0/(t14132*t14132)* \
               t14134*t14147);
        } else if (rho_b[index] > cutoff_) {
            double t13023 = rho_a[index]+rho_b[index];
            double t13024 = 1.0/pow(t13023,4.0/3.0);
            double t13025 = 1.0/pow(t13023,1.0/3.0);
            double t13026 = c*t13025;
            double t13027 = 1.0/sqrt(t13026);
            double t13028 = sqrt(t13026);
            double t13029 = EcPld_3*c*t13024*(1.0/3.0);
            double t13030 = EcPld_2*c*t13024*t13027*(1.0/6.0);
            double t13031 = t13030+t13029;
            double t13032 = EcPld_2*t13028;
            double t13033 = EcPld_3*c*t13025;
            double t13034 = t13032+t13033+1.0;
            double t13035 = 1.0/(t13034*t13034);
            double t13036 = EcPld_1*t13031*t13035;
            double t13037 = pow(2.0,1.0/3.0);
            double t13038 = t13037*2.0;
            double t13039 = t13038-2.0;
            double t13040 = two_13*2.0;
            double t13041 = t13040-2.0;
            double t13042 = 1.0/t13041;
            double t13043 = 1.0/t13023;
            double t13044 = EcPhd_1*t13043*(1.0/3.0);
            double t13045 = log(t13026);
            double t13046 = EcPhd_3*c*t13024*(1.0/3.0);
            double t13047 = EcPhd_4*c*t13024*(1.0/3.0);
            double t13048 = EcPhd_3*c*t13024*t13045*(1.0/3.0);
            double t13049 = t13026-1.0;
            double t13050 = EcPhd_1*t13045;
            double t13051 = 0.0 ;
            double t13052 = EcFld_2*t13028;
            double t13053 = EcFld_3*c*t13025;
            double t13054 = t13052+t13053+1.0;
            double t13055 = 1.0/t13034;
            double t13056 = EcPld_1*t13055;
            double t13057 = -t13026+1.0;
            double t13058 = ( (t13057 > 0.0) ?  1.0 : 0.0 ) ;
            double t13059 = EcFhd_1*t13045;
            double t13060 = EcFhd_4*c*t13025;
            double t13061 = EcPhd_4*c*t13025;
            double t13062 = EcFhd_3*c*t13025*t13045;
            double t13063 = EcPhd_3*c*t13025*t13045;
            double t13064 = ( (t13049 > 0.0) ?  1.0 : 0.0 ) ;
            double t13065 = 1.0/t13054;
            double t13066 = t13056-EcFld_1*t13065;
            double t13067 = t13056-t13042*t13039*t13066;
            double t13068 = c*c;
            double t13069 = 1.0/pow(t13023,2.0/3.0);
            double t13070 = Bg*c*t13043*t13068*1.0E4;
            double t13071 = Cg_4*t13068*t13069;
            double t13072 = Cg_3*c*t13025;
            double t13073 = t13070+t13071+t13072+1.0;
            double t13074 = 1.0/t13073;
            double t13075 = 1.0/pow(t13023,5.0/3.0);
            double t13076 = Bg*t13068*t13069;
            double t13077 = Cg_2*c*t13025;
            double t13078 = Cg_1+t13076+t13077;
            double t13079 = gamma_ab[index]*2.0;
            double t13080 = gamma_aa[index]+gamma_bb[index]+t13079;
            double t13081 = 1.0/two_13;
            double t13082 = 1.0/pow(t13023,7.0/6.0);
            double t13083 = t13074*t13078;
            double t13084 = Cx+t13083;
            double t13085 = 1.0/t13084;
            double t13086 = sqrt(t13080);
            double t13088 = Cinf*Fg*Pg_1*t13082*t13085*t13086;
            double t13087 = exp(-t13088);
            double t13089 = Bg*t13075*t13068*(2.0/3.0);
            double t13090 = Cg_2*c*t13024*(1.0/3.0);
            double t13091 = t13090+t13089;
            double t13092 = t13091*t13074;
            double t13093 = 1.0/(t13023*t13023);
            double t13094 = Bg*c*t13093*t13068*1.0E4;
            double t13095 = Cg_4*t13075*t13068*(2.0/3.0);
            double t13096 = Cg_3*c*t13024*(1.0/3.0);
            double t13097 = t13094+t13095+t13096;
            double t13098 = 1.0/(t13073*t13073);
            double t13099 = t13092-t13078*t13097*t13098;
            v_rho_b_[index] = t13058*(EcPhd_2+t13050+t13061+t13063+t13042*t13039*(EcFhd_2-EcPhd_2-t13050+t13060- \
               t13061+t13062-t13063+t13059))+t13064*t13067+t13023*(t13064*(t13036-t13042*t13039*(t13036-EcFld_1*1.0/ \
               (t13054*t13054)*(EcFld_3*c*t13024*(1.0/3.0)+EcFld_2*c*t13024*t13027*(1.0/6.0))))-t13058*(t13044+t13046+ \
               t13047+t13048-t13042*t13039*(t13044+t13046+t13047+t13048-EcFhd_1*t13043*(1.0/3.0)-EcFhd_3*c*t13024* \
               (1.0/3.0)-EcFhd_4*c*t13024*(1.0/3.0)-EcFhd_3*c*t13024*t13045*(1.0/3.0)))-c*t13024*t13051*t13067*(1.0/ \
               3.0)+c*t13024*t13051*(EcPhd_2+t13050+t13061+t13063+t13042*t13039*(EcFhd_2-EcPhd_2-t13050+t13060+t13062+ \
               t13059-EcPhd_4*c*t13025-EcPhd_3*c*t13025*t13045))*(1.0/3.0))-1.0/pow(t13023,7.0/3.0)*t13080*t13081* \
               t13084*t13087*(4.0/3.0)-t13024*t13080*t13081*t13087*t13099+t13024*t13080*t13081*t13084*t13087*(Cinf* \
               Fg*Pg_1*1.0/pow(t13023,1.3E1/6.0)*t13085*t13086*(7.0/6.0)-Cinf*Fg*Pg_1*t13082*1.0/(t13084*t13084)* \
               t13086*t13099);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t11778 = rho_a[index]+rho_b[index];
                double t11779 = c*c;
                double t11780 = 1.0/pow(t11778,2.0/3.0);
                double t11781 = 1.0/pow(t11778,1.0/3.0);
                double t11782 = 1.0/t11778;
                double t11783 = rho_a[index]-rho_b[index];
                double t11784 = Bg*t11780*t11779;
                double t11785 = Cg_2*c*t11781;
                double t11786 = Cg_1+t11784+t11785;
                double t11787 = Bg*c*t11782*t11779*1.0E4;
                double t11788 = Cg_4*t11780*t11779;
                double t11789 = Cg_3*c*t11781;
                double t11790 = t11787+t11788+t11789+1.0;
                double t11791 = 1.0/t11790;
                double t11792 = t11791*t11786;
                double t11793 = Cx+t11792;
                double t11794 = 1.0/two_13;
                double t11795 = 1.0/pow(t11778,7.0/6.0);
                double t11796 = 1.0/t11793;
                double t11797 = gamma_ab[index]*2.0;
                double t11798 = gamma_aa[index]+gamma_bb[index]+t11797;
                double t11799 = sqrt(t11798);
                double t11800 = exp(-Cinf*Fg*Pg_1*t11795*t11796*t11799);
                double t11801 = t11782*t11783*(1.0/2.0);
                double t11802 = t11801+1.0/2.0;
                double t11803 = pow(t11802,5.0/3.0);
                v_gamma_aa_[index] = t11800*t11793*t11794*1.0/pow(t11778,4.0/3.0)*1.0/sqrt(t11803+pow(t11782*t11783* \
                   (-1.0/2.0)+1.0/2.0,5.0/3.0))-Cinf*Fg*Pg_1*t11800*t11794*1.0/pow(t11778,5.0/2.0)*t11799*1.0/sqrt(t11803+ \
                   pow(-t11801+1.0/2.0,5.0/3.0))*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14149 = rho_a[index]+rho_b[index];
                double t14150 = c*c;
                double t14151 = 1.0/pow(t14149,2.0/3.0);
                double t14152 = 1.0/pow(t14149,1.0/3.0);
                double t14153 = Bg*t14150*t14151;
                double t14154 = Cg_2*c*t14152;
                double t14155 = Cg_1+t14153+t14154;
                double t14156 = 1.0/t14149;
                double t14157 = Bg*c*t14150*t14156*1.0E4;
                double t14158 = Cg_4*t14150*t14151;
                double t14159 = Cg_3*c*t14152;
                double t14160 = t14157+t14158+t14159+1.0;
                double t14161 = 1.0/t14160;
                double t14162 = t14161*t14155;
                double t14163 = Cx+t14162;
                double t14164 = 1.0/two_13;
                double t14165 = 1.0/pow(t14149,7.0/6.0);
                double t14166 = 1.0/t14163;
                double t14167 = gamma_ab[index]*2.0;
                double t14168 = gamma_aa[index]+gamma_bb[index]+t14167;
                double t14169 = sqrt(t14168);
                double t14170 = exp(-Cinf*Fg*Pg_1*t14165*t14166*t14169);
                v_gamma_aa_[index] = t14170*t14163*t14164*1.0/pow(t14149,4.0/3.0)-Cinf*Fg*Pg_1*t14170*t14164*1.0/ \
                   pow(t14149,5.0/2.0)*t14169*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13101 = rho_a[index]+rho_b[index];
                double t13102 = c*c;
                double t13103 = 1.0/pow(t13101,2.0/3.0);
                double t13104 = 1.0/pow(t13101,1.0/3.0);
                double t13105 = Bg*t13102*t13103;
                double t13106 = Cg_2*c*t13104;
                double t13107 = Cg_1+t13105+t13106;
                double t13108 = 1.0/t13101;
                double t13109 = Bg*c*t13102*t13108*1.0E4;
                double t13110 = Cg_4*t13102*t13103;
                double t13111 = Cg_3*c*t13104;
                double t13112 = t13110+t13111+t13109+1.0;
                double t13113 = 1.0/t13112;
                double t13114 = t13113*t13107;
                double t13115 = Cx+t13114;
                double t13116 = 1.0/two_13;
                double t13117 = 1.0/pow(t13101,7.0/6.0);
                double t13118 = 1.0/t13115;
                double t13119 = gamma_ab[index]*2.0;
                double t13120 = gamma_aa[index]+gamma_bb[index]+t13119;
                double t13121 = sqrt(t13120);
                double t13122 = exp(-Cinf*Fg*Pg_1*t13121*t13117*t13118);
                v_gamma_aa_[index] = 1.0/pow(t13101,4.0/3.0)*t13122*t13115*t13116-Cinf*Fg*Pg_1*1.0/pow(t13101,5.0/ \
                   2.0)*t13121*t13122*t13116*(1.0/2.0);
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t11805 = rho_a[index]+rho_b[index];
                double t11806 = c*c;
                double t11807 = 1.0/pow(t11805,2.0/3.0);
                double t11808 = 1.0/pow(t11805,1.0/3.0);
                double t11809 = 1.0/t11805;
                double t11810 = rho_a[index]-rho_b[index];
                double t11811 = Bg*t11806*t11807;
                double t11812 = Cg_2*c*t11808;
                double t11813 = Cg_1+t11811+t11812;
                double t11814 = Bg*c*t11806*t11809*1.0E4;
                double t11815 = Cg_4*t11806*t11807;
                double t11816 = Cg_3*c*t11808;
                double t11817 = t11814+t11815+t11816+1.0;
                double t11818 = 1.0/t11817;
                double t11819 = t11813*t11818;
                double t11820 = Cx+t11819;
                double t11821 = 1.0/two_13;
                double t11822 = 1.0/pow(t11805,7.0/6.0);
                double t11823 = 1.0/t11820;
                double t11824 = gamma_ab[index]*2.0;
                double t11825 = gamma_aa[index]+gamma_bb[index]+t11824;
                double t11826 = sqrt(t11825);
                double t11827 = exp(-Cinf*Fg*Pg_1*t11822*t11823*t11826);
                double t11828 = t11810*t11809*(1.0/2.0);
                double t11829 = t11828+1.0/2.0;
                double t11830 = pow(t11829,5.0/3.0);
                v_gamma_ab_[index] = t11820*t11821*1.0/pow(t11805,4.0/3.0)*t11827*1.0/sqrt(t11830+pow(t11810*t11809* \
                   (-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0-Cinf*Fg*Pg_1*t11821*1.0/pow(t11805,5.0/2.0)*t11826*t11827*1.0/sqrt(t11830+ \
                   pow(-t11828+1.0/2.0,5.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                double t14172 = rho_a[index]+rho_b[index];
                double t14173 = c*c;
                double t14174 = 1.0/pow(t14172,2.0/3.0);
                double t14175 = 1.0/pow(t14172,1.0/3.0);
                double t14176 = Bg*t14173*t14174;
                double t14177 = Cg_2*c*t14175;
                double t14178 = Cg_1+t14176+t14177;
                double t14179 = 1.0/t14172;
                double t14180 = Bg*c*t14173*t14179*1.0E4;
                double t14181 = Cg_4*t14173*t14174;
                double t14182 = Cg_3*c*t14175;
                double t14183 = t14180+t14181+t14182+1.0;
                double t14184 = 1.0/t14183;
                double t14185 = t14184*t14178;
                double t14186 = Cx+t14185;
                double t14187 = 1.0/two_13;
                double t14188 = 1.0/pow(t14172,7.0/6.0);
                double t14189 = 1.0/t14186;
                double t14190 = gamma_ab[index]*2.0;
                double t14191 = gamma_aa[index]+gamma_bb[index]+t14190;
                double t14192 = sqrt(t14191);
                double t14193 = exp(-Cinf*Fg*Pg_1*t14192*t14188*t14189);
                v_gamma_ab_[index] = 1.0/pow(t14172,4.0/3.0)*t14193*t14186*t14187*2.0-Cinf*Fg*Pg_1*1.0/pow(t14172,5.0/ \
                   2.0)*t14192*t14193*t14187;
            } else if (rho_b[index] > cutoff_) {
                double t13124 = rho_a[index]+rho_b[index];
                double t13125 = c*c;
                double t13126 = 1.0/pow(t13124,2.0/3.0);
                double t13127 = 1.0/pow(t13124,1.0/3.0);
                double t13128 = Bg*t13125*t13126;
                double t13129 = Cg_2*c*t13127;
                double t13130 = Cg_1+t13128+t13129;
                double t13131 = 1.0/t13124;
                double t13132 = Bg*c*t13131*t13125*1.0E4;
                double t13133 = Cg_4*t13125*t13126;
                double t13134 = Cg_3*c*t13127;
                double t13135 = t13132+t13133+t13134+1.0;
                double t13136 = 1.0/t13135;
                double t13137 = t13130*t13136;
                double t13138 = Cx+t13137;
                double t13139 = 1.0/two_13;
                double t13140 = 1.0/pow(t13124,7.0/6.0);
                double t13141 = 1.0/t13138;
                double t13142 = gamma_ab[index]*2.0;
                double t13143 = gamma_aa[index]+gamma_bb[index]+t13142;
                double t13144 = sqrt(t13143);
                double t13145 = exp(-Cinf*Fg*Pg_1*t13140*t13141*t13144);
                v_gamma_ab_[index] = 1.0/pow(t13124,4.0/3.0)*t13145*t13138*t13139*2.0-Cinf*Fg*Pg_1*1.0/pow(t13124,5.0/ \
                   2.0)*t13144*t13145*t13139;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t11832 = rho_a[index]+rho_b[index];
                double t11833 = c*c;
                double t11834 = 1.0/pow(t11832,2.0/3.0);
                double t11835 = 1.0/pow(t11832,1.0/3.0);
                double t11836 = 1.0/t11832;
                double t11837 = rho_a[index]-rho_b[index];
                double t11838 = Bg*t11833*t11834;
                double t11839 = Cg_2*c*t11835;
                double t11840 = Cg_1+t11838+t11839;
                double t11841 = Bg*c*t11833*t11836*1.0E4;
                double t11842 = Cg_4*t11833*t11834;
                double t11843 = Cg_3*c*t11835;
                double t11844 = t11841+t11842+t11843+1.0;
                double t11845 = 1.0/t11844;
                double t11846 = t11840*t11845;
                double t11847 = Cx+t11846;
                double t11848 = 1.0/two_13;
                double t11849 = 1.0/pow(t11832,7.0/6.0);
                double t11850 = 1.0/t11847;
                double t11851 = gamma_ab[index]*2.0;
                double t11852 = gamma_aa[index]+gamma_bb[index]+t11851;
                double t11853 = sqrt(t11852);
                double t11854 = exp(-Cinf*Fg*Pg_1*t11850*t11853*t11849);
                double t11855 = t11836*t11837*(1.0/2.0);
                double t11856 = t11855+1.0/2.0;
                double t11857 = pow(t11856,5.0/3.0);
                v_gamma_bb_[index] = 1.0/pow(t11832,4.0/3.0)*t11854*t11847*t11848*1.0/sqrt(t11857+pow(t11836*t11837* \
                   (-1.0/2.0)+1.0/2.0,5.0/3.0))-Cinf*Fg*Pg_1*1.0/pow(t11832,5.0/2.0)*t11853*t11854*t11848*1.0/sqrt(t11857+ \
                   pow(-t11855+1.0/2.0,5.0/3.0))*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14195 = rho_a[index]+rho_b[index];
                double t14196 = c*c;
                double t14197 = 1.0/pow(t14195,2.0/3.0);
                double t14198 = 1.0/pow(t14195,1.0/3.0);
                double t14199 = Bg*t14196*t14197;
                double t14200 = Cg_2*c*t14198;
                double t14201 = Cg_1+t14200+t14199;
                double t14202 = 1.0/t14195;
                double t14203 = Bg*c*t14202*t14196*1.0E4;
                double t14204 = Cg_4*t14196*t14197;
                double t14205 = Cg_3*c*t14198;
                double t14206 = t14203+t14204+t14205+1.0;
                double t14207 = 1.0/t14206;
                double t14208 = t14201*t14207;
                double t14209 = Cx+t14208;
                double t14210 = 1.0/two_13;
                double t14211 = 1.0/pow(t14195,7.0/6.0);
                double t14212 = 1.0/t14209;
                double t14213 = gamma_ab[index]*2.0;
                double t14214 = gamma_aa[index]+gamma_bb[index]+t14213;
                double t14215 = sqrt(t14214);
                double t14216 = exp(-Cinf*Fg*Pg_1*t14211*t14212*t14215);
                v_gamma_bb_[index] = t14210*t14216*t14209*1.0/pow(t14195,4.0/3.0)-Cinf*Fg*Pg_1*t14210*t14215*t14216* \
                   1.0/pow(t14195,5.0/2.0)*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13147 = rho_a[index]+rho_b[index];
                double t13148 = c*c;
                double t13149 = 1.0/pow(t13147,2.0/3.0);
                double t13150 = 1.0/pow(t13147,1.0/3.0);
                double t13151 = Bg*t13148*t13149;
                double t13152 = Cg_2*c*t13150;
                double t13153 = Cg_1+t13151+t13152;
                double t13154 = 1.0/t13147;
                double t13155 = Bg*c*t13154*t13148*1.0E4;
                double t13156 = Cg_4*t13148*t13149;
                double t13157 = Cg_3*c*t13150;
                double t13158 = t13155+t13156+t13157+1.0;
                double t13159 = 1.0/t13158;
                double t13160 = t13153*t13159;
                double t13161 = Cx+t13160;
                double t13162 = 1.0/two_13;
                double t13163 = 1.0/pow(t13147,7.0/6.0);
                double t13164 = 1.0/t13161;
                double t13165 = gamma_ab[index]*2.0;
                double t13166 = gamma_aa[index]+gamma_bb[index]+t13165;
                double t13167 = sqrt(t13166);
                double t13168 = exp(-Cinf*Fg*Pg_1*t13163*t13164*t13167);
                v_gamma_bb_[index] = t13161*t13162*1.0/pow(t13147,4.0/3.0)*t13168-Cinf*Fg*Pg_1*t13162*1.0/pow(t13147,5.0/ \
                   2.0)*t13167*t13168*(1.0/2.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11861 = rho_a[index]+rho_b[index];
            double t11862 = 1.0/pow(t11861,4.0/3.0);
            double t11863 = 1.0/pow(t11861,1.0/3.0);
            double t11864 = c*t11863;
            double t11871 = 1.0/sqrt(t11864);
            double t11873 = EcPld_3*c*t11862*(1.0/3.0);
            double t11874 = EcPld_2*c*t11862*t11871*(1.0/6.0);
            double t11865 = t11873+t11874;
            double t11866 = 1.0/t11861;
            double t11867 = rho_a[index]-rho_b[index];
            double t11868 = t11866*t11867;
            double t11869 = 1.0/(t11861*t11861);
            double t11906 = t11867*t11869;
            double t11870 = -t11906+t11866;
            double t11872 = sqrt(t11864);
            double t11875 = EcPld_2*t11872;
            double t11876 = EcPld_3*c*t11863;
            double t11877 = t11875+t11876+1.0;
            double t11878 = two_13*2.0;
            double t11879 = t11878-2.0;
            double t11880 = 1.0/t11879;
            double t11881 = t11868+1.0;
            double t11882 = -t11868+1.0;
            double t11883 = EcFld_3*c*t11862*(1.0/3.0);
            double t11884 = EcFld_2*c*t11862*t11871*(1.0/6.0);
            double t11885 = t11883+t11884;
            double t11886 = EcFld_2*t11872;
            double t11887 = EcFld_3*c*t11863;
            double t11888 = t11886+t11887+1.0;
            double t11889 = t11865*t11865;
            double t11890 = 1.0/(t11877*t11877*t11877);
            double t11891 = EcPld_1*t11890*t11889*2.0;
            double t11892 = 1.0/pow(t11861,7.0/3.0);
            double t11893 = 1.0/(t11888*t11888);
            double t11894 = c*c;
            double t11895 = 1.0/pow(t11861,8.0/3.0);
            double t11896 = 1.0/pow(t11864,3.0/2.0);
            double t11897 = 1.0/(t11877*t11877);
            double t11898 = EcPld_3*c*t11892*(4.0/9.0);
            double t11899 = EcPld_2*c*t11871*t11892*(2.0/9.0);
            double t11900 = t11898+t11899-EcPld_2*t11894*t11895*t11896*(1.0/3.6E1);
            double t11901 = pow(t11881,1.0/3.0);
            double t11902 = pow(t11882,1.0/3.0);
            double t11903 = t11869*2.0;
            double t11904 = 1.0/(t11861*t11861*t11861);
            double t11908 = t11904*t11867*2.0;
            double t11905 = t11903-t11908;
            double t11907 = t11870*t11870;
            double t11909 = t11902*t11905*(4.0/3.0);
            double t11910 = 1.0/pow(t11881,2.0/3.0);
            double t11911 = t11910*t11907*(4.0/9.0);
            double t11912 = 1.0/pow(t11882,2.0/3.0);
            double t11913 = t11912*t11907*(4.0/9.0);
            double t11914 = t11911+t11913+t11909-t11901*t11905*(4.0/3.0);
            double t11915 = log(t11864);
            double t11916 = pow(t11881,4.0/3.0);
            double t11917 = pow(t11882,4.0/3.0);
            double t11918 = t11916+t11917-2.0;
            double t11919 = EcPhd_1*t11869*(1.0/3.0);
            double t11920 = EcPhd_3*c*t11892*(5.0/9.0);
            double t11921 = EcPhd_4*c*t11892*(4.0/9.0);
            double t11922 = t11901*t11870*(4.0/3.0);
            double t11942 = t11902*t11870*(4.0/3.0);
            double t11923 = t11922-t11942;
            double t11924 = EcPhd_3*c*t11915*t11892*(4.0/9.0);
            double t11925 = t11864-1.0;
            double t11926 = 1.0/t11877;
            double t11927 = EcPld_1*t11926;
            double t11928 = 1.0/t11888;
            double t11948 = EcFld_1*t11928;
            double t11929 = t11927-t11948;
            double t11930 = EcFhd_1*t11915;
            double t11931 = EcPhd_1*t11915;
            double t11932 = EcFhd_4*c*t11863;
            double t11933 = EcFhd_3*c*t11915*t11863;
            double t11934 = 0.0 ;
            double t11935 = EcFhd_1*t11866*(1.0/3.0);
            double t11936 = EcPhd_1*t11866*(1.0/3.0);
            double t11937 = EcFhd_3*c*t11862*(1.0/3.0);
            double t11938 = EcFhd_4*c*t11862*(1.0/3.0);
            double t11939 = EcPhd_3*c*t11862*(1.0/3.0);
            double t11940 = EcPhd_4*c*t11862*(1.0/3.0);
            double t11941 = EcFhd_3*c*t11915*t11862*(1.0/3.0);
            double t11943 = EcPhd_4*c*t11863;
            double t11944 = EcPhd_3*c*t11915*t11863;
            double t11945 = EcPhd_3*c*t11915*t11862*(1.0/3.0);
            double t11946 = EcFld_1*t11893*t11885;
            double t11949 = EcPld_1*t11865*t11897;
            double t11947 = t11946-t11949;
            double t11963 = t11880*t11918*t11929;
            double t11950 = t11927-t11963;
            double t11951 = 0.0 ;
            double t11952 = EcFhd_2-EcPhd_2+t11930-t11931+t11932+t11933-t11943-t11944;
            double t11953 = EcPld_1*t11900*t11897;
            double t11954 = t11940-t11941-t11935+t11936+t11945-t11937-t11938+t11939;
            double t11955 = t11880*t11952*t11918;
            double t11956 = EcPhd_2+t11931+t11943+t11944+t11955;
            double t11957 = -t11864+1.0;
            double t11958 = ( (t11957 > 0.0) ?  1.0 : 0.0 ) ;
            double t11959 = t11940+t11936+t11945+t11939-t11923*t11880*t11952-t11880*t11918*t11954;
            double t11960 = ( (t11925 > 0.0) ?  1.0 : 0.0 ) ;
            double t11961 = t11880*t11918*t11947;
            double t11962 = t11961+t11949-t11923*t11880*t11929;
            double t11964 = 1.0/pow(t11861,2.0/3.0);
            double t11965 = gamma_ab[index]*2.0;
            double t11966 = gamma_aa[index]+gamma_bb[index]+t11965;
            double t11967 = Bg*c*t11866*t11894*1.0E4;
            double t11968 = Cg_4*t11964*t11894;
            double t11969 = Cg_3*c*t11863;
            double t11970 = t11967+t11968+t11969+1.0;
            double t11971 = 1.0/t11970;
            double t11972 = 1.0/pow(t11861,5.0/3.0);
            double t11973 = Bg*t11964*t11894;
            double t11974 = Cg_2*c*t11863;
            double t11975 = Cg_1+t11973+t11974;
            double t11976 = 1.0/(t11970*t11970);
            double t11977 = Bg*c*t11894*t11869*1.0E4;
            double t11978 = Cg_4*t11972*t11894*(2.0/3.0);
            double t11979 = Cg_3*c*t11862*(1.0/3.0);
            double t11980 = t11977+t11978+t11979;
            double t11981 = 1.0/two_13;
            double t11982 = 1.0/pow(t11861,7.0/6.0);
            double t11983 = t11971*t11975;
            double t11984 = Cx+t11983;
            double t11985 = 1.0/t11984;
            double t11986 = sqrt(t11966);
            double t11994 = Cinf*Fg*Pg_1*t11982*t11985*t11986;
            double t11987 = exp(-t11994);
            double t11988 = t11866*t11867*(1.0/2.0);
            double t11989 = t11988+1.0/2.0;
            double t11990 = pow(t11989,5.0/3.0);
            double t11991 = Bg*t11972*t11894*(2.0/3.0);
            double t11992 = Cg_2*c*t11862*(1.0/3.0);
            double t11993 = t11991+t11992;
            double t11995 = -t11988+1.0/2.0;
            double t11996 = pow(t11995,5.0/3.0);
            double t11997 = t11990+t11996;
            double t11998 = 1.0/sqrt(t11997);
            double t11999 = t11866*(1.0/2.0);
            double t12005 = t11867*t11869*(1.0/2.0);
            double t12000 = t11999-t12005;
            double t12007 = pow(t11995,2.0/3.0);
            double t12008 = pow(t11989,2.0/3.0);
            double t12027 = t12000*t12007*(5.0/3.0);
            double t12028 = t12000*t12008*(5.0/3.0);
            double t12001 = t12027-t12028;
            double t12002 = t11971*t11993;
            double t12004 = t11980*t11975*t11976;
            double t12003 = t12002-t12004;
            double t12006 = t12000*t12000;
            double t12009 = t11869-t11904*t11867;
            double t12010 = 1.0/(t11984*t11984);
            double t12011 = Bg*t11894*t11895*(1.0E1/9.0);
            double t12012 = Cg_2*c*t11892*(4.0/9.0);
            double t12013 = t12011+t12012;
            double t12014 = t11971*t12013;
            double t12015 = Bg*c*t11904*t11894*2.0E4;
            double t12016 = Cg_4*t11894*t11895*(1.0E1/9.0);
            double t12017 = Cg_3*c*t11892*(4.0/9.0);
            double t12018 = t12015+t12016+t12017;
            double t12019 = t11980*t11980;
            double t12020 = 1.0/(t11970*t11970*t11970);
            double t12021 = t11975*t12020*t12019*2.0;
            double t12022 = t12021+t12014-t11980*t11993*t11976*2.0-t11975*t11976*t12018;
            double t12023 = 1.0/pow(t11861,1.3E1/6.0);
            double t12024 = Cinf*Fg*Pg_1*t11985*t11986*t12023*(7.0/6.0);
            double t12029 = Cinf*Fg*Pg_1*t11982*t11986*t12010*t12003;
            double t12025 = t12024-t12029;
            double t12026 = 1.0/pow(t11997,3.0/2.0);
            v_rho_a_rho_a_[index] = t11861*(t11960*(-t11953+t11891+t11880*t11918*(t11953-t11891+EcFld_1*(t11885* \
               t11885)*1.0/(t11888*t11888*t11888)*2.0-EcFld_1*t11893*(EcFld_3*c*t11892*(4.0/9.0)-EcFld_2*t11894*t11895* \
               t11896*(1.0/3.6E1)+EcFld_2*c*t11871*t11892*(2.0/9.0)))-t11914*t11880*t11929+t11923*t11880*t11947*2.0) \
               +t11958*(t11920+t11921+t11924+t11919-t11880*t11918*(t11920+t11921+t11924+t11919-EcFhd_1*t11869*(1.0/ \
               3.0)-EcFhd_3*c*t11892*(5.0/9.0)-EcFhd_4*c*t11892*(4.0/9.0)-EcFhd_3*c*t11915*t11892*(4.0/9.0))+t11914* \
               t11880*t11952+t11923*t11880*t11954*2.0)+c*t11950*t11934*t11892*(4.0/9.0)-c*t11862*t11934*t11962*(2.0/ \
               3.0)-c*t11862*t11934*t11959*(2.0/3.0)-c*t11934*t11892*t11956*(4.0/9.0)+t11950*t11951*t11894*t11895* \
               (1.0/9.0)-t11951*t11956*t11894*t11895*(1.0/9.0))+t11960*t11962*2.0-t11958*t11959*2.0-c*t11950*t11862* \
               t11934*(2.0/3.0)+c*t11862*t11934*t11956*(2.0/3.0)+t11981*t11892*t11966*t11987*t11998*t12003*(8.0/3.0) \
               +1.0/pow(t11861,1.0E1/3.0)*t11981*t11966*t11984*t11987*t11998*(2.8E1/9.0)+t11862*t11981*t11966*t11987* \
               t12022*1.0/sqrt(t11990+pow(t11866*t11867*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t11862*t11981*t11966*t11984* \
               t11987*1.0/pow(t11997,5.0/2.0)*(t12001*t12001)*(3.0/4.0)-t11862*t11981*t11966*t11984*t11987*t11998* \
               (Cinf*Fg*Pg_1*1.0/pow(t11861,1.9E1/6.0)*t11985*t11986*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t11982*t11986*t12010* \
               t12022-Cinf*Fg*Pg_1*t11986*t12010*t12003*t12023*(7.0/3.0)+Cinf*Fg*Pg_1*t11982*1.0/(t11984*t11984*t11984) \
               *t11986*(t12003*t12003)*2.0)-t11862*t11981*t11966*t11984*t11987*t12026*(t12007*t12009*(5.0/3.0)-t12008* \
               t12009*(5.0/3.0)+1.0/pow(t11995,1.0/3.0)*t12006*(1.0E1/9.0)+1.0/pow(t11989,1.0/3.0)*t12006*(1.0E1/ \
               9.0))*(1.0/2.0)-t11981*t11892*t11966*t11984*t11987*t11998*t12025*(8.0/3.0)-t11981*t11892*t11966*t11984* \
               t11987*t12001*t12026*(4.0/3.0)-t11862*t11981*t11966*t11987*t11998*t12003*t12025*2.0-t11862*t11981* \
               t11966*t11987*t12001*t12003*t12026+t11862*t11981*t11966*t11984*t11987*t11998*(t12025*t12025)+t11862* \
               t11981*t11966*t11984*t11987*t12001*t12025*t12026;
        } else if (rho_a[index] > cutoff_) {
            double t14220 = rho_a[index]+rho_b[index];
            double t14221 = 1.0/pow(t14220,4.0/3.0);
            double t14222 = 1.0/pow(t14220,1.0/3.0);
            double t14223 = c*t14222;
            double t14224 = 1.0/sqrt(t14223);
            double t14225 = sqrt(t14223);
            double t14226 = EcPld_3*c*t14221*(1.0/3.0);
            double t14227 = EcPld_2*c*t14221*t14224*(1.0/6.0);
            double t14228 = t14226+t14227;
            double t14229 = EcPld_2*t14225;
            double t14230 = EcPld_3*c*t14222;
            double t14231 = t14230+t14229+1.0;
            double t14232 = 1.0/(t14231*t14231);
            double t14233 = EcPld_1*t14232*t14228;
            double t14234 = t14223-1.0;
            double t14235 = ( (t14234 > 0.0) ?  1.0 : 0.0 ) ;
            double t14236 = pow(2.0,1.0/3.0);
            double t14237 = t14236*2.0;
            double t14238 = t14237-2.0;
            double t14239 = two_13*2.0;
            double t14240 = t14239-2.0;
            double t14241 = 1.0/t14240;
            double t14242 = EcFld_3*c*t14221*(1.0/3.0);
            double t14243 = EcFld_2*c*t14221*t14224*(1.0/6.0);
            double t14244 = t14242+t14243;
            double t14245 = EcFld_2*t14225;
            double t14246 = EcFld_3*c*t14222;
            double t14247 = t14245+t14246+1.0;
            double t14248 = t14228*t14228;
            double t14249 = 1.0/(t14231*t14231*t14231);
            double t14250 = EcPld_1*t14248*t14249*2.0;
            double t14251 = 1.0/pow(t14220,7.0/3.0);
            double t14252 = 1.0/(t14247*t14247);
            double t14253 = c*c;
            double t14254 = 1.0/pow(t14220,8.0/3.0);
            double t14255 = 1.0/pow(t14223,3.0/2.0);
            double t14256 = EcPld_3*c*t14251*(4.0/9.0);
            double t14257 = EcPld_2*c*t14224*t14251*(2.0/9.0);
            double t14258 = t14256+t14257-EcPld_2*t14253*t14254*t14255*(1.0/3.6E1);
            double t14259 = EcPld_1*t14232*t14258;
            double t14260 = 1.0/(t14220*t14220);
            double t14261 = EcPhd_1*t14260*(1.0/3.0);
            double t14262 = log(t14223);
            double t14263 = EcPhd_3*c*t14251*(5.0/9.0);
            double t14264 = EcPhd_4*c*t14251*(4.0/9.0);
            double t14265 = EcPhd_3*c*t14251*t14262*(4.0/9.0);
            double t14266 = 1.0/t14231;
            double t14267 = EcPld_1*t14266;
            double t14268 = t14233-EcFld_1*t14252*t14244;
            double t14269 = t14233-t14241*t14238*t14268;
            double t14270 = 0.0 ;
            double t14271 = EcPhd_1*t14262;
            double t14272 = 1.0/t14220;
            double t14273 = EcPhd_1*t14272*(1.0/3.0);
            double t14274 = EcPhd_3*c*t14221*(1.0/3.0);
            double t14275 = EcPhd_4*c*t14221*(1.0/3.0);
            double t14276 = EcPhd_3*c*t14221*t14262*(1.0/3.0);
            double t14277 = 1.0/t14247;
            double t14293 = EcFld_1*t14277;
            double t14278 = -t14293+t14267;
            double t14279 = t14267-t14241*t14238*t14278;
            double t14280 = 0.0 ;
            double t14281 = EcFhd_1*t14262;
            double t14282 = EcFhd_4*c*t14222;
            double t14283 = EcPhd_4*c*t14222;
            double t14284 = EcFhd_3*c*t14222*t14262;
            double t14285 = EcPhd_3*c*t14222*t14262;
            double t14286 = EcFhd_2-EcPhd_2-t14271+t14281+t14282-t14283+t14284-t14285;
            double t14287 = t14241*t14238*t14286;
            double t14288 = EcPhd_2+t14271+t14283+t14285+t14287;
            double t14289 = -t14223+1.0;
            double t14290 = ( (t14289 > 0.0) ?  1.0 : 0.0 ) ;
            double t14291 = t14273+t14274+t14275+t14276-EcFhd_1*t14272*(1.0/3.0)-EcFhd_3*c*t14221*(1.0/3.0)-EcFhd_4* \
               c*t14221*(1.0/3.0)-EcFhd_3*c*t14221*t14262*(1.0/3.0);
            double t14292 = t14273+t14274+t14275+t14276-t14241*t14291*t14238;
            double t14294 = 1.0/pow(t14220,2.0/3.0);
            double t14295 = Bg*c*t14253*t14272*1.0E4;
            double t14296 = Cg_4*t14253*t14294;
            double t14297 = Cg_3*c*t14222;
            double t14298 = t14295+t14296+t14297+1.0;
            double t14299 = 1.0/t14298;
            double t14300 = 1.0/pow(t14220,5.0/3.0);
            double t14301 = Bg*t14253*t14294;
            double t14302 = Cg_2*c*t14222;
            double t14303 = Cg_1+t14301+t14302;
            double t14304 = gamma_ab[index]*2.0;
            double t14305 = gamma_aa[index]+gamma_bb[index]+t14304;
            double t14306 = 1.0/two_13;
            double t14307 = 1.0/pow(t14220,7.0/6.0);
            double t14308 = t14303*t14299;
            double t14309 = Cx+t14308;
            double t14310 = 1.0/t14309;
            double t14311 = sqrt(t14305);
            double t14313 = Cinf*Fg*Pg_1*t14310*t14311*t14307;
            double t14312 = exp(-t14313);
            double t14314 = Bg*t14300*t14253*(2.0/3.0);
            double t14315 = Cg_2*c*t14221*(1.0/3.0);
            double t14316 = t14314+t14315;
            double t14317 = Bg*c*t14260*t14253*1.0E4;
            double t14318 = Cg_4*t14300*t14253*(2.0/3.0);
            double t14319 = Cg_3*c*t14221*(1.0/3.0);
            double t14320 = t14317+t14318+t14319;
            double t14321 = 1.0/(t14298*t14298);
            double t14322 = t14316*t14299;
            double t14337 = t14320*t14303*t14321;
            double t14323 = t14322-t14337;
            double t14324 = Bg*t14253*t14254*(1.0E1/9.0);
            double t14325 = Cg_2*c*t14251*(4.0/9.0);
            double t14326 = t14324+t14325;
            double t14327 = t14326*t14299;
            double t14328 = 1.0/(t14220*t14220*t14220);
            double t14329 = Bg*c*t14253*t14328*2.0E4;
            double t14330 = Cg_4*t14253*t14254*(1.0E1/9.0);
            double t14331 = Cg_3*c*t14251*(4.0/9.0);
            double t14332 = t14330+t14331+t14329;
            double t14333 = t14320*t14320;
            double t14334 = 1.0/(t14298*t14298*t14298);
            double t14335 = t14303*t14333*t14334*2.0;
            double t14336 = t14335+t14327-t14303*t14321*t14332-t14320*t14321*t14316*2.0;
            double t14338 = 1.0/(t14309*t14309);
            double t14339 = 1.0/pow(t14220,1.3E1/6.0);
            double t14340 = Cinf*Fg*Pg_1*t14310*t14311*t14339*(7.0/6.0);
            double t14342 = Cinf*Fg*Pg_1*t14311*t14323*t14307*t14338;
            double t14341 = t14340-t14342;
            v_rho_a_rho_a_[index] = -t14220*(-t14290*(t14261+t14263+t14264+t14265-t14241*t14238*(t14261+t14263+ \
               t14264+t14265-EcFhd_1*t14260*(1.0/3.0)-EcFhd_3*c*t14251*(5.0/9.0)-EcFhd_4*c*t14251*(4.0/9.0)-EcFhd_3* \
               c*t14251*t14262*(4.0/9.0)))+t14235*(-t14250+t14259+t14241*t14238*(t14250-t14259-EcFld_1*(t14244*t14244) \
               *1.0/(t14247*t14247*t14247)*2.0+EcFld_1*t14252*(EcFld_3*c*t14251*(4.0/9.0)-EcFld_2*t14253*t14254*t14255* \
               (1.0/3.6E1)+EcFld_2*c*t14224*t14251*(2.0/9.0))))+c*t14221*t14270*t14292*(2.0/3.0)+c*t14221*t14270* \
               t14269*(2.0/3.0)-c*t14251*t14270*t14279*(4.0/9.0)+c*t14251*t14270*t14288*(4.0/9.0)-t14253*t14280*t14254* \
               t14279*(1.0/9.0)+t14253*t14280*t14254*t14288*(1.0/9.0))-t14290*t14292*2.0+t14235*t14269*2.0+c*t14221* \
               t14270*t14288*(2.0/3.0)-c*t14221*t14270*(t14267+t14241*t14238*(t14293-t14267))*(2.0/3.0)+1.0/pow(t14220,1.0E1/ \
               3.0)*t14312*t14305*t14306*t14309*(2.8E1/9.0)+t14312*t14251*t14305*t14323*t14306*(8.0/3.0)+t14221*t14312* \
               t14305*t14306*t14336-t14221*t14312*t14305*t14323*t14341*t14306*2.0-t14312*t14251*t14305*t14341*t14306* \
               t14309*(8.0/3.0)+t14221*t14312*t14305*(t14341*t14341)*t14306*t14309-t14221*t14312*t14305*t14306*t14309* \
               (Cinf*Fg*Pg_1*1.0/pow(t14220,1.9E1/6.0)*t14310*t14311*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t14311*t14307*t14336* \
               t14338-Cinf*Fg*Pg_1*t14311*t14323*t14338*t14339*(7.0/3.0)+Cinf*Fg*Pg_1*t14311*(t14323*t14323)*t14307* \
               1.0/(t14309*t14309*t14309)*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t13172 = rho_a[index]+rho_b[index];
            double t13173 = 1.0/pow(t13172,4.0/3.0);
            double t13174 = 1.0/pow(t13172,1.0/3.0);
            double t13175 = c*t13174;
            double t13176 = 1.0/sqrt(t13175);
            double t13177 = sqrt(t13175);
            double t13178 = EcPld_3*c*t13173*(1.0/3.0);
            double t13179 = EcPld_2*c*t13173*t13176*(1.0/6.0);
            double t13180 = t13178+t13179;
            double t13181 = EcPld_2*t13177;
            double t13182 = EcPld_3*c*t13174;
            double t13183 = t13181+t13182+1.0;
            double t13184 = 1.0/(t13183*t13183);
            double t13185 = EcPld_1*t13180*t13184;
            double t13186 = t13175-1.0;
            double t13187 = ( (t13186 > 0.0) ?  1.0 : 0.0 ) ;
            double t13188 = pow(2.0,1.0/3.0);
            double t13189 = t13188*2.0;
            double t13190 = t13189-2.0;
            double t13191 = two_13*2.0;
            double t13192 = t13191-2.0;
            double t13193 = 1.0/t13192;
            double t13194 = EcFld_3*c*t13173*(1.0/3.0);
            double t13195 = EcFld_2*c*t13173*t13176*(1.0/6.0);
            double t13196 = t13194+t13195;
            double t13197 = EcFld_2*t13177;
            double t13198 = EcFld_3*c*t13174;
            double t13199 = t13197+t13198+1.0;
            double t13200 = t13180*t13180;
            double t13201 = 1.0/(t13183*t13183*t13183);
            double t13202 = EcPld_1*t13200*t13201*2.0;
            double t13203 = 1.0/pow(t13172,7.0/3.0);
            double t13204 = 1.0/(t13199*t13199);
            double t13205 = c*c;
            double t13206 = 1.0/pow(t13172,8.0/3.0);
            double t13207 = 1.0/pow(t13175,3.0/2.0);
            double t13208 = EcPld_3*c*t13203*(4.0/9.0);
            double t13209 = EcPld_2*c*t13203*t13176*(2.0/9.0);
            double t13210 = t13208+t13209-EcPld_2*t13205*t13206*t13207*(1.0/3.6E1);
            double t13211 = EcPld_1*t13210*t13184;
            double t13212 = 1.0/(t13172*t13172);
            double t13213 = EcPhd_1*t13212*(1.0/3.0);
            double t13214 = log(t13175);
            double t13215 = EcPhd_3*c*t13203*(5.0/9.0);
            double t13216 = EcPhd_4*c*t13203*(4.0/9.0);
            double t13217 = EcPhd_3*c*t13203*t13214*(4.0/9.0);
            double t13218 = 1.0/t13183;
            double t13219 = EcPld_1*t13218;
            double t13220 = t13185-EcFld_1*t13204*t13196;
            double t13221 = t13185-t13220*t13190*t13193;
            double t13222 = 0.0 ;
            double t13223 = EcPhd_1*t13214;
            double t13224 = 1.0/t13172;
            double t13225 = EcPhd_1*t13224*(1.0/3.0);
            double t13226 = EcPhd_3*c*t13173*(1.0/3.0);
            double t13227 = EcPhd_4*c*t13173*(1.0/3.0);
            double t13228 = EcPhd_3*c*t13214*t13173*(1.0/3.0);
            double t13229 = 1.0/t13199;
            double t13245 = EcFld_1*t13229;
            double t13230 = -t13245+t13219;
            double t13231 = t13219-t13230*t13190*t13193;
            double t13232 = 0.0 ;
            double t13233 = EcFhd_1*t13214;
            double t13234 = EcFhd_4*c*t13174;
            double t13235 = EcPhd_4*c*t13174;
            double t13236 = EcFhd_3*c*t13214*t13174;
            double t13237 = EcPhd_3*c*t13214*t13174;
            double t13238 = EcFhd_2-EcPhd_2-t13223+t13233+t13234-t13235+t13236-t13237;
            double t13239 = t13190*t13193*t13238;
            double t13240 = EcPhd_2+t13223+t13235+t13237+t13239;
            double t13241 = -t13175+1.0;
            double t13242 = ( (t13241 > 0.0) ?  1.0 : 0.0 ) ;
            double t13243 = t13225+t13226+t13227+t13228-EcFhd_1*t13224*(1.0/3.0)-EcFhd_3*c*t13173*(1.0/3.0)-EcFhd_4* \
               c*t13173*(1.0/3.0)-EcFhd_3*c*t13214*t13173*(1.0/3.0);
            double t13244 = t13225+t13226+t13227+t13228-t13243*t13190*t13193;
            double t13246 = 1.0/pow(t13172,2.0/3.0);
            double t13247 = Bg*c*t13205*t13224*1.0E4;
            double t13248 = Cg_4*t13205*t13246;
            double t13249 = Cg_3*c*t13174;
            double t13250 = t13247+t13248+t13249+1.0;
            double t13251 = 1.0/t13250;
            double t13252 = 1.0/pow(t13172,5.0/3.0);
            double t13253 = Bg*t13205*t13246;
            double t13254 = Cg_2*c*t13174;
            double t13255 = Cg_1+t13253+t13254;
            double t13256 = gamma_ab[index]*2.0;
            double t13257 = gamma_aa[index]+gamma_bb[index]+t13256;
            double t13258 = 1.0/two_13;
            double t13259 = 1.0/pow(t13172,7.0/6.0);
            double t13260 = t13251*t13255;
            double t13261 = Cx+t13260;
            double t13262 = 1.0/t13261;
            double t13263 = sqrt(t13257);
            double t13265 = Cinf*Fg*Pg_1*t13262*t13263*t13259;
            double t13264 = exp(-t13265);
            double t13266 = Bg*t13205*t13252*(2.0/3.0);
            double t13267 = Cg_2*c*t13173*(1.0/3.0);
            double t13268 = t13266+t13267;
            double t13269 = Bg*c*t13212*t13205*1.0E4;
            double t13270 = Cg_4*t13205*t13252*(2.0/3.0);
            double t13271 = Cg_3*c*t13173*(1.0/3.0);
            double t13272 = t13270+t13271+t13269;
            double t13273 = 1.0/(t13250*t13250);
            double t13274 = t13251*t13268;
            double t13289 = t13272*t13255*t13273;
            double t13275 = t13274-t13289;
            double t13276 = Bg*t13205*t13206*(1.0E1/9.0);
            double t13277 = Cg_2*c*t13203*(4.0/9.0);
            double t13278 = t13276+t13277;
            double t13279 = t13251*t13278;
            double t13280 = 1.0/(t13172*t13172*t13172);
            double t13281 = Bg*c*t13205*t13280*2.0E4;
            double t13282 = Cg_4*t13205*t13206*(1.0E1/9.0);
            double t13283 = Cg_3*c*t13203*(4.0/9.0);
            double t13284 = t13281+t13282+t13283;
            double t13285 = t13272*t13272;
            double t13286 = 1.0/(t13250*t13250*t13250);
            double t13287 = t13255*t13285*t13286*2.0;
            double t13288 = t13287+t13279-t13255*t13273*t13284-t13272*t13273*t13268*2.0;
            double t13290 = 1.0/(t13261*t13261);
            double t13291 = 1.0/pow(t13172,1.3E1/6.0);
            double t13292 = Cinf*Fg*Pg_1*t13262*t13263*t13291*(7.0/6.0);
            double t13294 = Cinf*Fg*Pg_1*t13263*t13290*t13275*t13259;
            double t13293 = t13292-t13294;
            v_rho_a_rho_a_[index] = -t13172*(-t13242*(t13213+t13215+t13216+t13217-t13190*t13193*(t13213+t13215+ \
               t13216+t13217-EcFhd_1*t13212*(1.0/3.0)-EcFhd_3*c*t13203*(5.0/9.0)-EcFhd_4*c*t13203*(4.0/9.0)-EcFhd_3* \
               c*t13203*t13214*(4.0/9.0)))+t13187*(-t13202+t13211+t13190*t13193*(t13202-t13211-EcFld_1*(t13196*t13196) \
               *1.0/(t13199*t13199*t13199)*2.0+EcFld_1*t13204*(EcFld_3*c*t13203*(4.0/9.0)-EcFld_2*t13205*t13206*t13207* \
               (1.0/3.6E1)+EcFld_2*c*t13203*t13176*(2.0/9.0))))-c*t13203*t13222*t13231*(4.0/9.0)+c*t13203*t13222* \
               t13240*(4.0/9.0)+c*t13221*t13222*t13173*(2.0/3.0)+c*t13222*t13244*t13173*(2.0/3.0)-t13231*t13205*t13232* \
               t13206*(1.0/9.0)+t13240*t13205*t13232*t13206*(1.0/9.0))-t13242*t13244*2.0+t13221*t13187*2.0+c*t13222* \
               t13240*t13173*(2.0/3.0)-c*t13222*t13173*(t13219+t13190*t13193*(t13245-t13219))*(2.0/3.0)+t13261*1.0/ \
               pow(t13172,1.0E1/3.0)*t13264*t13257*t13258*(2.8E1/9.0)+t13203*t13264*t13257*t13275*t13258*(8.0/3.0) \
               +t13173*t13264*t13257*t13258*t13288-t13203*t13261*t13264*t13257*t13293*t13258*(8.0/3.0)-t13173*t13264* \
               t13257*t13275*t13293*t13258*2.0+t13261*t13173*t13264*t13257*(t13293*t13293)*t13258-t13261*t13173*t13264* \
               t13257*t13258*(Cinf*Fg*Pg_1*1.0/pow(t13172,1.9E1/6.0)*t13262*t13263*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t13263* \
               t13290*t13291*t13275*(7.0/3.0)-Cinf*Fg*Pg_1*t13263*t13290*t13259*t13288+Cinf*Fg*Pg_1*1.0/(t13261*t13261* \
               t13261)*t13263*(t13275*t13275)*t13259*2.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t12031 = rho_a[index]+rho_b[index];
            double t12032 = rho_a[index]-rho_b[index];
            double t12033 = 1.0/t12031;
            double t12034 = t12032*t12033;
            double t12035 = 1.0/(t12031*t12031*t12031);
            double t12036 = t12034+1.0;
            double t12037 = 1.0/(t12031*t12031);
            double t12038 = t12032*t12037;
            double t12039 = -t12034+1.0;
            double t12040 = t12033+t12038;
            double t12041 = t12033-t12038;
            double t12042 = 1.0/pow(t12031,1.0/3.0);
            double t12043 = c*t12042;
            double t12044 = log(t12043);
            double t12045 = 1.0/pow(t12031,7.0/3.0);
            double t12046 = two_13*2.0;
            double t12047 = t12046-2.0;
            double t12048 = 1.0/t12047;
            double t12049 = EcPhd_1*t12037*(1.0/3.0);
            double t12050 = EcPhd_3*c*t12045*(5.0/9.0);
            double t12051 = EcPhd_4*c*t12045*(4.0/9.0);
            double t12052 = pow(t12036,1.0/3.0);
            double t12053 = pow(t12039,1.0/3.0);
            double t12054 = 1.0/pow(t12031,4.0/3.0);
            double t12055 = EcFhd_1*t12033*(1.0/3.0);
            double t12056 = EcFhd_3*c*t12054*(1.0/3.0);
            double t12057 = EcFhd_4*c*t12054*(1.0/3.0);
            double t12058 = EcFhd_3*c*t12044*t12054*(1.0/3.0);
            double t12111 = EcPhd_1*t12033*(1.0/3.0);
            double t12112 = EcPhd_3*c*t12054*(1.0/3.0);
            double t12113 = EcPhd_4*c*t12054*(1.0/3.0);
            double t12114 = EcPhd_3*c*t12044*t12054*(1.0/3.0);
            double t12059 = -t12111-t12112-t12113-t12114+t12055+t12056+t12057+t12058;
            double t12060 = EcPhd_3*c*t12044*t12045*(4.0/9.0);
            double t12064 = 1.0/sqrt(t12043);
            double t12066 = EcPld_3*c*t12054*(1.0/3.0);
            double t12067 = EcPld_2*c*t12054*t12064*(1.0/6.0);
            double t12061 = t12066+t12067;
            double t12062 = t12040*t12052*(4.0/3.0);
            double t12115 = t12040*t12053*(4.0/3.0);
            double t12063 = -t12115+t12062;
            double t12065 = sqrt(t12043);
            double t12068 = EcPld_2*t12065;
            double t12069 = EcPld_3*c*t12042;
            double t12070 = t12068+t12069+1.0;
            double t12071 = t12041*t12052*(4.0/3.0);
            double t12119 = t12041*t12053*(4.0/3.0);
            double t12072 = t12071-t12119;
            double t12073 = EcFld_3*c*t12054*(1.0/3.0);
            double t12074 = EcFld_2*c*t12054*t12064*(1.0/6.0);
            double t12075 = t12073+t12074;
            double t12076 = EcFld_2*t12065;
            double t12077 = EcFld_3*c*t12042;
            double t12078 = t12076+t12077+1.0;
            double t12079 = 1.0/(t12078*t12078);
            double t12080 = EcFld_1*t12075*t12079;
            double t12081 = 1.0/(t12070*t12070);
            double t12121 = EcPld_1*t12061*t12081;
            double t12082 = -t12121+t12080;
            double t12083 = pow(t12036,4.0/3.0);
            double t12084 = pow(t12039,4.0/3.0);
            double t12085 = t12083+t12084-2.0;
            double t12086 = t12061*t12061;
            double t12087 = 1.0/(t12070*t12070*t12070);
            double t12088 = EcPld_1*t12086*t12087*2.0;
            double t12089 = c*c;
            double t12090 = 1.0/pow(t12031,8.0/3.0);
            double t12091 = 1.0/pow(t12043,3.0/2.0);
            double t12092 = EcPld_3*c*t12045*(4.0/9.0);
            double t12093 = EcPld_2*c*t12045*t12064*(2.0/9.0);
            double t12094 = t12092+t12093-EcPld_2*t12090*t12091*t12089*(1.0/3.6E1);
            double t12095 = t12032*t12035*t12053*(8.0/3.0);
            double t12096 = 1.0/pow(t12036,2.0/3.0);
            double t12097 = t12040*t12041*t12096*(4.0/9.0);
            double t12098 = 1.0/pow(t12039,2.0/3.0);
            double t12099 = t12040*t12041*t12098*(4.0/9.0);
            double t12100 = t12095+t12097+t12099-t12032*t12052*t12035*(8.0/3.0);
            double t12101 = t12043-1.0;
            double t12102 = 1.0/t12070;
            double t12103 = EcPld_1*t12102;
            double t12104 = 1.0/t12078;
            double t12122 = EcFld_1*t12104;
            double t12105 = t12103-t12122;
            double t12106 = EcFhd_1*t12044;
            double t12107 = EcPhd_1*t12044;
            double t12108 = EcFhd_4*c*t12042;
            double t12109 = EcFhd_3*c*t12042*t12044;
            double t12110 = 0.0 ;
            double t12116 = EcPhd_4*c*t12042;
            double t12117 = EcPhd_3*c*t12042*t12044;
            double t12118 = t12048*t12085*t12059;
            double t12120 = EcFhd_2-EcPhd_2+t12106-t12107-t12116+t12108-t12117+t12109;
            double t12123 = t12082*t12048*t12085;
            double t12135 = t12105*t12048*t12085;
            double t12124 = t12103-t12135;
            double t12125 = 0.0 ;
            double t12126 = t12120*t12048*t12085;
            double t12127 = EcPhd_2+t12107+t12116+t12117+t12126;
            double t12128 = -t12043+1.0;
            double t12129 = ( (t12128 > 0.0) ?  1.0 : 0.0 ) ;
            double t12130 = t12120*t12063*t12048;
            double t12131 = t12111+t12112+t12130+t12113+t12114+t12118;
            double t12132 = t12111+t12112+t12113+t12114+t12118-t12120*t12072*t12048;
            double t12133 = ( (t12101 > 0.0) ?  1.0 : 0.0 ) ;
            double t12134 = t12121+t12123-t12105*t12072*t12048;
            double t12136 = 1.0/pow(t12031,2.0/3.0);
            double t12137 = gamma_ab[index]*2.0;
            double t12138 = gamma_aa[index]+gamma_bb[index]+t12137;
            double t12139 = Bg*c*t12033*t12089*1.0E4;
            double t12140 = Cg_4*t12136*t12089;
            double t12141 = Cg_3*c*t12042;
            double t12142 = t12140+t12141+t12139+1.0;
            double t12143 = 1.0/t12142;
            double t12144 = 1.0/pow(t12031,5.0/3.0);
            double t12145 = Bg*t12136*t12089;
            double t12146 = Cg_2*c*t12042;
            double t12147 = Cg_1+t12145+t12146;
            double t12148 = 1.0/(t12142*t12142);
            double t12149 = Bg*c*t12037*t12089*1.0E4;
            double t12150 = Cg_4*t12144*t12089*(2.0/3.0);
            double t12151 = Cg_3*c*t12054*(1.0/3.0);
            double t12152 = t12150+t12151+t12149;
            double t12153 = 1.0/two_13;
            double t12154 = 1.0/pow(t12031,7.0/6.0);
            double t12155 = t12143*t12147;
            double t12156 = Cx+t12155;
            double t12157 = 1.0/t12156;
            double t12158 = sqrt(t12138);
            double t12166 = Cinf*Fg*Pg_1*t12154*t12157*t12158;
            double t12159 = exp(-t12166);
            double t12160 = t12032*t12033*(1.0/2.0);
            double t12161 = t12160+1.0/2.0;
            double t12162 = pow(t12161,5.0/3.0);
            double t12163 = Bg*t12144*t12089*(2.0/3.0);
            double t12164 = Cg_2*c*t12054*(1.0/3.0);
            double t12165 = t12163+t12164;
            double t12167 = -t12160+1.0/2.0;
            double t12168 = pow(t12167,5.0/3.0);
            double t12169 = t12162+t12168;
            double t12170 = 1.0/sqrt(t12169);
            double t12171 = t12033*(1.0/2.0);
            double t12172 = t12032*t12037*(1.0/2.0);
            double t12173 = t12171+t12172;
            double t12174 = t12143*t12165;
            double t12176 = t12152*t12147*t12148;
            double t12175 = t12174-t12176;
            double t12177 = 1.0/(t12156*t12156);
            double t12178 = Bg*t12090*t12089*(1.0E1/9.0);
            double t12179 = Cg_2*c*t12045*(4.0/9.0);
            double t12180 = t12178+t12179;
            double t12181 = t12143*t12180;
            double t12182 = Bg*c*t12035*t12089*2.0E4;
            double t12183 = Cg_4*t12090*t12089*(1.0E1/9.0);
            double t12184 = Cg_3*c*t12045*(4.0/9.0);
            double t12185 = t12182+t12183+t12184;
            double t12186 = t12152*t12152;
            double t12187 = 1.0/(t12142*t12142*t12142);
            double t12188 = t12147*t12186*t12187*2.0;
            double t12189 = t12181+t12188-t12152*t12165*t12148*2.0-t12147*t12148*t12185;
            double t12190 = 1.0/pow(t12031,1.3E1/6.0);
            double t12191 = Cinf*Fg*Pg_1*t12190*t12157*t12158*(7.0/6.0);
            double t12201 = Cinf*Fg*Pg_1*t12154*t12175*t12158*t12177;
            double t12192 = -t12201+t12191;
            double t12193 = 1.0/pow(t12169,3.0/2.0);
            double t12194 = pow(t12167,2.0/3.0);
            double t12195 = t12171-t12172;
            double t12196 = pow(t12161,2.0/3.0);
            double t12197 = t12194*t12195*(5.0/3.0);
            double t12202 = t12195*t12196*(5.0/3.0);
            double t12198 = -t12202+t12197;
            double t12199 = t12173*t12194*(5.0/3.0);
            double t12203 = t12173*t12196*(5.0/3.0);
            double t12200 = -t12203+t12199;
            v_rho_a_rho_b_[index] = t12133*(t12121+t12123+t12063*t12048*(t12103-t12122))+t12133*t12134-t12131* \
               t12129-t12132*t12129-t12031*(-t12133*(t12088-EcPld_1*t12081*t12094+t12100*t12105*t12048-t12063*t12082* \
               t12048+t12072*t12082*t12048-t12048*t12085*(t12088-EcFld_1*(t12075*t12075)*1.0/(t12078*t12078*t12078) \
               *2.0-EcPld_1*t12081*t12094+EcFld_1*t12079*(EcFld_3*c*t12045*(4.0/9.0)-EcFld_2*t12090*t12091*t12089* \
               (1.0/3.6E1)+EcFld_2*c*t12045*t12064*(2.0/9.0))))-t12129*(t12050+t12051+t12060+t12049-t12048*t12085* \
               (t12050+t12051+t12060+t12049-EcFhd_1*t12037*(1.0/3.0)-EcFhd_3*c*t12045*(5.0/9.0)-EcFhd_4*c*t12045* \
               (4.0/9.0)-EcFhd_3*c*t12044*t12045*(4.0/9.0))-t12100*t12120*t12048+t12063*t12048*t12059-t12072*t12048* \
               t12059)+c*t12110*t12131*t12054*(1.0/3.0)+c*t12110*t12132*t12054*(1.0/3.0)-c*t12110*t12124*t12045*(4.0/ \
               9.0)+c*t12110*t12134*t12054*(1.0/3.0)+c*t12110*t12045*t12127*(4.0/9.0)-t12124*t12125*t12090*t12089* \
               (1.0/9.0)+t12125*t12090*t12127*t12089*(1.0/9.0)+c*t12110*t12054*(t12121+t12123+t12105*t12063*t12048) \
               *(1.0/3.0))-c*t12110*t12124*t12054*(2.0/3.0)+c*t12110*t12054*t12127*(2.0/3.0)+t12170*t12045*t12153* \
               t12138*t12175*t12159*(8.0/3.0)+1.0/pow(t12031,1.0E1/3.0)*t12170*t12153*t12138*t12156*t12159*(2.8E1/ \
               9.0)+t12054*t12153*t12138*t12159*t12189*1.0/sqrt(t12162+pow(t12032*t12033*(-1.0/2.0)+1.0/2.0,5.0/3.0) \
               )-t12170*t12054*t12153*t12138*t12156*t12159*(Cinf*Fg*Pg_1*1.0/pow(t12031,1.9E1/6.0)*t12157*t12158* \
               (9.1E1/3.6E1)-Cinf*Fg*Pg_1*t12190*t12175*t12158*t12177*(7.0/3.0)-Cinf*Fg*Pg_1*t12154*t12158*t12177* \
               t12189+Cinf*Fg*Pg_1*t12154*1.0/(t12156*t12156*t12156)*(t12175*t12175)*t12158*2.0)+t12200*t12045*t12153* \
               t12138*t12156*t12193*t12159*(2.0/3.0)+t12200*t12054*t12153*t12138*t12175*t12193*t12159*(1.0/2.0)-t12170* \
               t12045*t12153*t12138*t12156*t12192*t12159*(8.0/3.0)-t12170*t12054*t12153*t12138*t12192*t12175*t12159* \
               2.0-t12045*t12153*t12138*t12156*t12193*t12159*t12198*(2.0/3.0)-t12054*t12153*t12138*t12175*t12193* \
               t12159*t12198*(1.0/2.0)+t12054*t12153*t12138*t12156*t12193*t12159*(1.0/pow(t12161,1.0/3.0)*t12173* \
               t12195*(1.0E1/9.0)+t12032*t12035*t12194*(5.0/3.0)-t12032*t12035*t12196*(5.0/3.0)+t12173*1.0/pow(t12167,1.0/ \
               3.0)*(t12171-t12032*t12037*(1.0/2.0))*(1.0E1/9.0))*(1.0/2.0)+t12170*t12054*t12153*t12138*t12156*(t12192* \
               t12192)*t12159-t12200*t12054*t12153*t12138*t12156*t12192*t12193*t12159*(1.0/2.0)+t12054*t12153*t12138* \
               t12156*t12192*t12193*t12159*t12198*(1.0/2.0)-t12200*t12054*t12153*t12138*t12156*t12159*1.0/pow(t12169,5.0/ \
               2.0)*t12198*(3.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            double t14344 = rho_a[index]+rho_b[index];
            double t14345 = 1.0/pow(t14344,4.0/3.0);
            double t14346 = 1.0/pow(t14344,1.0/3.0);
            double t14347 = c*t14346;
            double t14348 = 1.0/sqrt(t14347);
            double t14349 = sqrt(t14347);
            double t14350 = EcPld_3*c*t14345*(1.0/3.0);
            double t14351 = EcPld_2*c*t14345*t14348*(1.0/6.0);
            double t14352 = t14350+t14351;
            double t14353 = EcPld_2*t14349;
            double t14354 = EcPld_3*c*t14346;
            double t14355 = t14353+t14354+1.0;
            double t14356 = 1.0/(t14355*t14355);
            double t14357 = EcPld_1*t14352*t14356;
            double t14358 = t14347-1.0;
            double t14359 = ( (t14358 > 0.0) ?  1.0 : 0.0 ) ;
            double t14360 = pow(2.0,1.0/3.0);
            double t14361 = t14360*2.0;
            double t14362 = t14361-2.0;
            double t14363 = two_13*2.0;
            double t14364 = t14363-2.0;
            double t14365 = 1.0/t14364;
            double t14366 = EcFld_3*c*t14345*(1.0/3.0);
            double t14367 = EcFld_2*c*t14345*t14348*(1.0/6.0);
            double t14368 = t14366+t14367;
            double t14369 = EcFld_2*t14349;
            double t14370 = EcFld_3*c*t14346;
            double t14371 = t14370+t14369+1.0;
            double t14372 = t14352*t14352;
            double t14373 = 1.0/(t14355*t14355*t14355);
            double t14374 = EcPld_1*t14372*t14373*2.0;
            double t14375 = 1.0/pow(t14344,7.0/3.0);
            double t14376 = 1.0/(t14371*t14371);
            double t14377 = c*c;
            double t14378 = 1.0/pow(t14344,8.0/3.0);
            double t14379 = 1.0/pow(t14347,3.0/2.0);
            double t14380 = EcPld_3*c*t14375*(4.0/9.0);
            double t14381 = EcPld_2*c*t14348*t14375*(2.0/9.0);
            double t14382 = t14380+t14381-EcPld_2*t14377*t14378*t14379*(1.0/3.6E1);
            double t14383 = EcPld_1*t14382*t14356;
            double t14384 = 1.0/(t14344*t14344);
            double t14385 = EcPhd_1*t14384*(1.0/3.0);
            double t14386 = log(t14347);
            double t14387 = EcPhd_3*c*t14375*(5.0/9.0);
            double t14388 = EcPhd_4*c*t14375*(4.0/9.0);
            double t14389 = EcPhd_3*c*t14375*t14386*(4.0/9.0);
            double t14390 = 1.0/t14355;
            double t14391 = EcPld_1*t14390;
            double t14392 = t14357-EcFld_1*t14376*t14368;
            double t14393 = t14357-t14362*t14365*t14392;
            double t14394 = 0.0 ;
            double t14395 = EcPhd_1*t14386;
            double t14396 = 1.0/t14344;
            double t14397 = EcPhd_1*t14396*(1.0/3.0);
            double t14398 = EcPhd_3*c*t14345*(1.0/3.0);
            double t14399 = EcPhd_4*c*t14345*(1.0/3.0);
            double t14400 = EcPhd_3*c*t14345*t14386*(1.0/3.0);
            double t14401 = 1.0/t14371;
            double t14417 = EcFld_1*t14401;
            double t14402 = -t14417+t14391;
            double t14403 = t14391-t14402*t14362*t14365;
            double t14404 = 0.0 ;
            double t14405 = EcFhd_1*t14386;
            double t14406 = EcFhd_4*c*t14346;
            double t14407 = EcPhd_4*c*t14346;
            double t14408 = EcFhd_3*c*t14346*t14386;
            double t14409 = EcPhd_3*c*t14346*t14386;
            double t14410 = EcFhd_2-EcPhd_2+t14405+t14406-t14407+t14408-t14409-t14395;
            double t14411 = t14410*t14362*t14365;
            double t14412 = EcPhd_2+t14411+t14407+t14409+t14395;
            double t14413 = -t14347+1.0;
            double t14414 = ( (t14413 > 0.0) ?  1.0 : 0.0 ) ;
            double t14415 = t14400+t14397+t14398+t14399-EcFhd_1*t14396*(1.0/3.0)-EcFhd_3*c*t14345*(1.0/3.0)-EcFhd_4* \
               c*t14345*(1.0/3.0)-EcFhd_3*c*t14345*t14386*(1.0/3.0);
            double t14416 = t14400+t14397+t14398+t14399-t14415*t14362*t14365;
            double t14418 = 1.0/pow(t14344,2.0/3.0);
            double t14419 = Bg*c*t14377*t14396*1.0E4;
            double t14420 = Cg_4*t14418*t14377;
            double t14421 = Cg_3*c*t14346;
            double t14422 = t14420+t14421+t14419+1.0;
            double t14423 = 1.0/t14422;
            double t14424 = 1.0/pow(t14344,5.0/3.0);
            double t14425 = Bg*t14418*t14377;
            double t14426 = Cg_2*c*t14346;
            double t14427 = Cg_1+t14425+t14426;
            double t14428 = gamma_ab[index]*2.0;
            double t14429 = gamma_aa[index]+gamma_bb[index]+t14428;
            double t14430 = 1.0/two_13;
            double t14431 = 1.0/pow(t14344,7.0/6.0);
            double t14432 = t14423*t14427;
            double t14433 = Cx+t14432;
            double t14434 = 1.0/t14433;
            double t14435 = sqrt(t14429);
            double t14437 = Cinf*Fg*Pg_1*t14431*t14434*t14435;
            double t14436 = exp(-t14437);
            double t14438 = Bg*t14424*t14377*(2.0/3.0);
            double t14439 = Cg_2*c*t14345*(1.0/3.0);
            double t14440 = t14438+t14439;
            double t14441 = Bg*c*t14384*t14377*1.0E4;
            double t14442 = Cg_4*t14424*t14377*(2.0/3.0);
            double t14443 = Cg_3*c*t14345*(1.0/3.0);
            double t14444 = t14441+t14442+t14443;
            double t14445 = 1.0/(t14422*t14422);
            double t14446 = t14440*t14423;
            double t14461 = t14444*t14427*t14445;
            double t14447 = -t14461+t14446;
            double t14448 = Bg*t14377*t14378*(1.0E1/9.0);
            double t14449 = Cg_2*c*t14375*(4.0/9.0);
            double t14450 = t14448+t14449;
            double t14451 = t14423*t14450;
            double t14452 = 1.0/(t14344*t14344*t14344);
            double t14453 = Bg*c*t14452*t14377*2.0E4;
            double t14454 = Cg_4*t14377*t14378*(1.0E1/9.0);
            double t14455 = Cg_3*c*t14375*(4.0/9.0);
            double t14456 = t14453+t14454+t14455;
            double t14457 = t14444*t14444;
            double t14458 = 1.0/(t14422*t14422*t14422);
            double t14459 = t14427*t14457*t14458*2.0;
            double t14460 = t14451+t14459-t14440*t14444*t14445*2.0-t14427*t14445*t14456;
            double t14462 = 1.0/(t14433*t14433);
            double t14463 = 1.0/pow(t14344,1.3E1/6.0);
            double t14464 = Cinf*Fg*Pg_1*t14434*t14435*t14463*(7.0/6.0);
            double t14466 = Cinf*Fg*Pg_1*t14431*t14435*t14462*t14447;
            double t14465 = t14464-t14466;
            v_rho_a_rho_b_[index] = -t14344*(-t14414*(t14385+t14387+t14388+t14389-t14362*t14365*(t14385+t14387+ \
               t14388+t14389-EcFhd_1*t14384*(1.0/3.0)-EcFhd_3*c*t14375*(5.0/9.0)-EcFhd_4*c*t14375*(4.0/9.0)-EcFhd_3* \
               c*t14375*t14386*(4.0/9.0)))+t14359*(-t14374+t14383+t14362*t14365*(t14374-t14383-EcFld_1*1.0/(t14371* \
               t14371*t14371)*(t14368*t14368)*2.0+EcFld_1*t14376*(EcFld_3*c*t14375*(4.0/9.0)-EcFld_2*t14377*t14378* \
               t14379*(1.0/3.6E1)+EcFld_2*c*t14348*t14375*(2.0/9.0))))-c*t14403*t14375*t14394*(4.0/9.0)+c*t14412* \
               t14375*t14394*(4.0/9.0)+c*t14416*t14345*t14394*(2.0/3.0)+c*t14345*t14393*t14394*(2.0/3.0)-t14403*t14404* \
               t14377*t14378*(1.0/9.0)+t14412*t14404*t14377*t14378*(1.0/9.0))-t14414*t14416*2.0+t14393*t14359*2.0+ \
               c*t14412*t14345*t14394*(2.0/3.0)-c*t14345*t14394*(t14391+t14362*t14365*(t14417-t14391))*(2.0/3.0)+ \
               t14430*t14433*1.0/pow(t14344,1.0E1/3.0)*t14436*t14429*(2.8E1/9.0)+t14430*t14460*t14345*t14436*t14429+ \
               t14430*t14436*t14375*t14429*t14447*(8.0/3.0)-t14430*t14433*t14436*t14375*t14429*t14465*(8.0/3.0)-t14430* \
               t14345*t14436*t14429*t14447*t14465*2.0+t14430*t14433*t14345*t14436*t14429*(t14465*t14465)-t14430*t14433* \
               t14345*t14436*t14429*(Cinf*Fg*Pg_1*1.0/pow(t14344,1.9E1/6.0)*t14434*t14435*(9.1E1/3.6E1)-Cinf*Fg*Pg_1* \
               t14431*t14460*t14435*t14462-Cinf*Fg*Pg_1*t14435*t14462*t14463*t14447*(7.0/3.0)+Cinf*Fg*Pg_1*t14431* \
               1.0/(t14433*t14433*t14433)*t14435*(t14447*t14447)*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t13296 = rho_a[index]+rho_b[index];
            double t13297 = 1.0/pow(t13296,4.0/3.0);
            double t13298 = 1.0/pow(t13296,1.0/3.0);
            double t13299 = c*t13298;
            double t13300 = 1.0/sqrt(t13299);
            double t13301 = sqrt(t13299);
            double t13302 = EcPld_3*c*t13297*(1.0/3.0);
            double t13303 = EcPld_2*c*t13300*t13297*(1.0/6.0);
            double t13304 = t13302+t13303;
            double t13305 = EcPld_2*t13301;
            double t13306 = EcPld_3*c*t13298;
            double t13307 = t13305+t13306+1.0;
            double t13308 = 1.0/(t13307*t13307);
            double t13309 = EcPld_1*t13304*t13308;
            double t13310 = t13299-1.0;
            double t13311 = ( (t13310 > 0.0) ?  1.0 : 0.0 ) ;
            double t13312 = pow(2.0,1.0/3.0);
            double t13313 = t13312*2.0;
            double t13314 = t13313-2.0;
            double t13315 = two_13*2.0;
            double t13316 = t13315-2.0;
            double t13317 = 1.0/t13316;
            double t13318 = EcFld_3*c*t13297*(1.0/3.0);
            double t13319 = EcFld_2*c*t13300*t13297*(1.0/6.0);
            double t13320 = t13318+t13319;
            double t13321 = EcFld_2*t13301;
            double t13322 = EcFld_3*c*t13298;
            double t13323 = t13321+t13322+1.0;
            double t13324 = t13304*t13304;
            double t13325 = 1.0/(t13307*t13307*t13307);
            double t13326 = EcPld_1*t13324*t13325*2.0;
            double t13327 = 1.0/pow(t13296,7.0/3.0);
            double t13328 = 1.0/(t13323*t13323);
            double t13329 = c*c;
            double t13330 = 1.0/pow(t13296,8.0/3.0);
            double t13331 = 1.0/pow(t13299,3.0/2.0);
            double t13332 = EcPld_3*c*t13327*(4.0/9.0);
            double t13333 = EcPld_2*c*t13300*t13327*(2.0/9.0);
            double t13334 = t13332+t13333-EcPld_2*t13330*t13331*t13329*(1.0/3.6E1);
            double t13335 = EcPld_1*t13334*t13308;
            double t13336 = 1.0/(t13296*t13296);
            double t13337 = EcPhd_1*t13336*(1.0/3.0);
            double t13338 = log(t13299);
            double t13339 = EcPhd_3*c*t13327*(5.0/9.0);
            double t13340 = EcPhd_4*c*t13327*(4.0/9.0);
            double t13341 = EcPhd_3*c*t13327*t13338*(4.0/9.0);
            double t13342 = 1.0/t13307;
            double t13343 = EcPld_1*t13342;
            double t13344 = t13309-EcFld_1*t13320*t13328;
            double t13345 = t13309-t13314*t13317*t13344;
            double t13346 = 0.0 ;
            double t13347 = EcPhd_1*t13338;
            double t13348 = 1.0/t13296;
            double t13349 = EcPhd_1*t13348*(1.0/3.0);
            double t13350 = EcPhd_3*c*t13297*(1.0/3.0);
            double t13351 = EcPhd_4*c*t13297*(1.0/3.0);
            double t13352 = EcPhd_3*c*t13338*t13297*(1.0/3.0);
            double t13353 = 1.0/t13323;
            double t13369 = EcFld_1*t13353;
            double t13354 = t13343-t13369;
            double t13370 = t13314*t13317*t13354;
            double t13355 = t13343-t13370;
            double t13356 = 0.0 ;
            double t13357 = EcFhd_1*t13338;
            double t13358 = EcFhd_4*c*t13298;
            double t13359 = EcPhd_4*c*t13298;
            double t13360 = EcFhd_3*c*t13338*t13298;
            double t13361 = EcPhd_3*c*t13338*t13298;
            double t13362 = EcFhd_2-EcPhd_2+t13360-t13361-t13347+t13357+t13358-t13359;
            double t13363 = t13314*t13317*t13362;
            double t13364 = EcPhd_2+t13361+t13363+t13347+t13359;
            double t13365 = -t13299+1.0;
            double t13366 = ( (t13365 > 0.0) ?  1.0 : 0.0 ) ;
            double t13367 = t13350+t13351+t13352+t13349-EcFhd_1*t13348*(1.0/3.0)-EcFhd_3*c*t13297*(1.0/3.0)-EcFhd_4* \
               c*t13297*(1.0/3.0)-EcFhd_3*c*t13338*t13297*(1.0/3.0);
            double t13368 = t13350+t13351+t13352+t13349-t13314*t13317*t13367;
            double t13371 = 1.0/pow(t13296,2.0/3.0);
            double t13372 = Bg*c*t13329*t13348*1.0E4;
            double t13373 = Cg_4*t13371*t13329;
            double t13374 = Cg_3*c*t13298;
            double t13375 = t13372+t13373+t13374+1.0;
            double t13376 = 1.0/t13375;
            double t13377 = 1.0/pow(t13296,5.0/3.0);
            double t13378 = Bg*t13371*t13329;
            double t13379 = Cg_2*c*t13298;
            double t13380 = Cg_1+t13378+t13379;
            double t13381 = gamma_ab[index]*2.0;
            double t13382 = gamma_aa[index]+gamma_bb[index]+t13381;
            double t13383 = 1.0/two_13;
            double t13384 = 1.0/pow(t13296,7.0/6.0);
            double t13385 = t13380*t13376;
            double t13386 = Cx+t13385;
            double t13387 = 1.0/t13386;
            double t13388 = sqrt(t13382);
            double t13390 = Cinf*Fg*Pg_1*t13384*t13387*t13388;
            double t13389 = exp(-t13390);
            double t13391 = Bg*t13329*t13377*(2.0/3.0);
            double t13392 = Cg_2*c*t13297*(1.0/3.0);
            double t13393 = t13391+t13392;
            double t13394 = Bg*c*t13336*t13329*1.0E4;
            double t13395 = Cg_4*t13329*t13377*(2.0/3.0);
            double t13396 = Cg_3*c*t13297*(1.0/3.0);
            double t13397 = t13394+t13395+t13396;
            double t13398 = 1.0/(t13375*t13375);
            double t13399 = t13393*t13376;
            double t13414 = t13380*t13397*t13398;
            double t13400 = -t13414+t13399;
            double t13401 = Bg*t13330*t13329*(1.0E1/9.0);
            double t13402 = Cg_2*c*t13327*(4.0/9.0);
            double t13403 = t13401+t13402;
            double t13404 = t13403*t13376;
            double t13405 = 1.0/(t13296*t13296*t13296);
            double t13406 = Bg*c*t13405*t13329*2.0E4;
            double t13407 = Cg_4*t13330*t13329*(1.0E1/9.0);
            double t13408 = Cg_3*c*t13327*(4.0/9.0);
            double t13409 = t13406+t13407+t13408;
            double t13410 = t13397*t13397;
            double t13411 = 1.0/(t13375*t13375*t13375);
            double t13412 = t13410*t13411*t13380*2.0;
            double t13413 = t13412+t13404-t13380*t13409*t13398-t13393*t13397*t13398*2.0;
            double t13415 = 1.0/(t13386*t13386);
            double t13416 = 1.0/pow(t13296,1.3E1/6.0);
            double t13417 = Cinf*Fg*Pg_1*t13416*t13387*t13388*(7.0/6.0);
            double t13419 = Cinf*Fg*Pg_1*t13400*t13415*t13384*t13388;
            double t13418 = t13417-t13419;
            v_rho_a_rho_b_[index] = -t13296*(-t13366*(t13340+t13341+t13337+t13339-t13314*t13317*(t13340+t13341+ \
               t13337+t13339-EcFhd_1*t13336*(1.0/3.0)-EcFhd_3*c*t13327*(5.0/9.0)-EcFhd_4*c*t13327*(4.0/9.0)-EcFhd_3* \
               c*t13327*t13338*(4.0/9.0)))+t13311*(-t13326+t13335+t13314*t13317*(t13326-t13335-EcFld_1*(t13320*t13320) \
               *1.0/(t13323*t13323*t13323)*2.0+EcFld_1*t13328*(EcFld_3*c*t13327*(4.0/9.0)-EcFld_2*t13330*t13331*t13329* \
               (1.0/3.6E1)+EcFld_2*c*t13300*t13327*(2.0/9.0))))-c*t13327*t13346*t13355*(4.0/9.0)+c*t13327*t13346* \
               t13364*(4.0/9.0)+c*t13345*t13346*t13297*(2.0/3.0)+c*t13346*t13368*t13297*(2.0/3.0)-t13330*t13355*t13329* \
               t13356*(1.0/9.0)+t13330*t13364*t13329*t13356*(1.0/9.0))+t13311*t13345*2.0-t13366*t13368*2.0-c*t13346* \
               t13355*t13297*(2.0/3.0)+c*t13346*t13364*t13297*(2.0/3.0)+t13382*t13383*1.0/pow(t13296,1.0E1/3.0)*t13386* \
               t13389*(2.8E1/9.0)+t13400*t13327*t13382*t13383*t13389*(8.0/3.0)+t13413*t13382*t13383*t13297*t13389- \
               t13400*t13382*t13418*t13383*t13297*t13389*2.0-t13327*t13382*t13418*t13383*t13386*t13389*(8.0/3.0)+ \
               t13382*(t13418*t13418)*t13383*t13386*t13297*t13389-t13382*t13383*t13386*t13297*t13389*(Cinf*Fg*Pg_1* \
               1.0/pow(t13296,1.9E1/6.0)*t13387*t13388*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t13400*t13415*t13416*t13388*(7.0/ \
               3.0)-Cinf*Fg*Pg_1*t13413*t13415*t13384*t13388+Cinf*Fg*Pg_1*(t13400*t13400)*t13384*1.0/(t13386*t13386* \
               t13386)*t13388*2.0);
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t12205 = rho_a[index]+rho_b[index];
            double t12206 = 1.0/pow(t12205,4.0/3.0);
            double t12207 = 1.0/pow(t12205,1.0/3.0);
            double t12208 = c*t12207;
            double t12216 = 1.0/sqrt(t12208);
            double t12218 = EcPld_3*c*t12206*(1.0/3.0);
            double t12219 = EcPld_2*c*t12206*t12216*(1.0/6.0);
            double t12209 = t12218+t12219;
            double t12210 = 1.0/t12205;
            double t12211 = rho_a[index]-rho_b[index];
            double t12212 = t12210*t12211;
            double t12213 = 1.0/(t12205*t12205);
            double t12214 = t12211*t12213;
            double t12215 = t12210+t12214;
            double t12217 = sqrt(t12208);
            double t12220 = EcPld_2*t12217;
            double t12221 = EcPld_3*c*t12207;
            double t12222 = t12220+t12221+1.0;
            double t12223 = two_13*2.0;
            double t12224 = t12223-2.0;
            double t12225 = 1.0/t12224;
            double t12226 = t12212+1.0;
            double t12227 = -t12212+1.0;
            double t12228 = EcFld_3*c*t12206*(1.0/3.0);
            double t12229 = EcFld_2*c*t12206*t12216*(1.0/6.0);
            double t12230 = t12228+t12229;
            double t12231 = EcFld_2*t12217;
            double t12232 = EcFld_3*c*t12207;
            double t12233 = t12231+t12232+1.0;
            double t12234 = t12209*t12209;
            double t12235 = 1.0/(t12222*t12222*t12222);
            double t12236 = EcPld_1*t12234*t12235*2.0;
            double t12237 = 1.0/pow(t12205,7.0/3.0);
            double t12238 = 1.0/(t12233*t12233);
            double t12239 = c*c;
            double t12240 = 1.0/pow(t12205,8.0/3.0);
            double t12241 = 1.0/pow(t12208,3.0/2.0);
            double t12242 = 1.0/(t12222*t12222);
            double t12243 = EcPld_3*c*t12237*(4.0/9.0);
            double t12244 = EcPld_2*c*t12216*t12237*(2.0/9.0);
            double t12245 = t12243+t12244-EcPld_2*t12240*t12241*t12239*(1.0/3.6E1);
            double t12246 = pow(t12226,1.0/3.0);
            double t12247 = pow(t12227,1.0/3.0);
            double t12248 = t12213*2.0;
            double t12249 = 1.0/(t12205*t12205*t12205);
            double t12250 = t12211*t12249*2.0;
            double t12251 = t12250+t12248;
            double t12252 = t12215*t12215;
            double t12253 = t12251*t12246*(4.0/3.0);
            double t12254 = 1.0/pow(t12226,2.0/3.0);
            double t12255 = t12252*t12254*(4.0/9.0);
            double t12256 = 1.0/pow(t12227,2.0/3.0);
            double t12257 = t12252*t12256*(4.0/9.0);
            double t12258 = t12253+t12255+t12257-t12251*t12247*(4.0/3.0);
            double t12259 = log(t12208);
            double t12260 = pow(t12226,4.0/3.0);
            double t12261 = pow(t12227,4.0/3.0);
            double t12262 = t12260+t12261-2.0;
            double t12263 = EcPhd_1*t12213*(1.0/3.0);
            double t12264 = EcPhd_3*c*t12237*(5.0/9.0);
            double t12265 = EcPhd_4*c*t12237*(4.0/9.0);
            double t12266 = t12215*t12246*(4.0/3.0);
            double t12286 = t12215*t12247*(4.0/3.0);
            double t12267 = t12266-t12286;
            double t12268 = EcPhd_3*c*t12237*t12259*(4.0/9.0);
            double t12269 = t12208-1.0;
            double t12270 = 1.0/t12222;
            double t12271 = EcPld_1*t12270;
            double t12272 = 1.0/t12233;
            double t12292 = EcFld_1*t12272;
            double t12273 = t12271-t12292;
            double t12274 = EcFhd_1*t12259;
            double t12275 = EcPhd_1*t12259;
            double t12276 = EcFhd_4*c*t12207;
            double t12277 = EcFhd_3*c*t12207*t12259;
            double t12278 = 0.0 ;
            double t12279 = EcFhd_1*t12210*(1.0/3.0);
            double t12280 = EcPhd_1*t12210*(1.0/3.0);
            double t12281 = EcFhd_3*c*t12206*(1.0/3.0);
            double t12282 = EcFhd_4*c*t12206*(1.0/3.0);
            double t12283 = EcPhd_3*c*t12206*(1.0/3.0);
            double t12284 = EcPhd_4*c*t12206*(1.0/3.0);
            double t12285 = EcFhd_3*c*t12206*t12259*(1.0/3.0);
            double t12287 = EcPhd_4*c*t12207;
            double t12288 = EcPhd_3*c*t12207*t12259;
            double t12289 = EcPhd_3*c*t12206*t12259*(1.0/3.0);
            double t12290 = EcFld_1*t12230*t12238;
            double t12293 = EcPld_1*t12242*t12209;
            double t12291 = t12290-t12293;
            double t12307 = t12225*t12262*t12273;
            double t12294 = t12271-t12307;
            double t12295 = 0.0 ;
            double t12296 = EcFhd_2-EcPhd_2+t12274-t12275+t12276+t12277-t12287-t12288;
            double t12297 = EcPld_1*t12242*t12245;
            double t12298 = t12280-t12281-t12282+t12283+t12284-t12285-t12279+t12289;
            double t12299 = t12225*t12262*t12296;
            double t12300 = EcPhd_2+t12275+t12287+t12288+t12299;
            double t12301 = -t12208+1.0;
            double t12302 = ( (t12301 > 0.0) ?  1.0 : 0.0 ) ;
            double t12303 = t12225*t12267*t12296;
            double t12304 = t12303+t12280+t12283+t12284+t12289-t12225*t12262*t12298;
            double t12305 = ( (t12269 > 0.0) ?  1.0 : 0.0 ) ;
            double t12306 = t12225*t12262*t12291;
            double t12308 = 1.0/pow(t12205,2.0/3.0);
            double t12309 = gamma_ab[index]*2.0;
            double t12310 = gamma_aa[index]+gamma_bb[index]+t12309;
            double t12311 = Bg*c*t12210*t12239*1.0E4;
            double t12312 = Cg_4*t12308*t12239;
            double t12313 = Cg_3*c*t12207;
            double t12314 = t12311+t12312+t12313+1.0;
            double t12315 = 1.0/t12314;
            double t12316 = 1.0/pow(t12205,5.0/3.0);
            double t12317 = Bg*t12308*t12239;
            double t12318 = Cg_2*c*t12207;
            double t12319 = Cg_1+t12317+t12318;
            double t12320 = 1.0/(t12314*t12314);
            double t12321 = Bg*c*t12213*t12239*1.0E4;
            double t12322 = Cg_4*t12316*t12239*(2.0/3.0);
            double t12323 = Cg_3*c*t12206*(1.0/3.0);
            double t12324 = t12321+t12322+t12323;
            double t12325 = 1.0/two_13;
            double t12326 = 1.0/pow(t12205,7.0/6.0);
            double t12327 = t12315*t12319;
            double t12328 = Cx+t12327;
            double t12329 = 1.0/t12328;
            double t12330 = sqrt(t12310);
            double t12338 = Cinf*Fg*Pg_1*t12330*t12326*t12329;
            double t12331 = exp(-t12338);
            double t12332 = t12210*t12211*(1.0/2.0);
            double t12333 = t12332+1.0/2.0;
            double t12334 = pow(t12333,5.0/3.0);
            double t12335 = Bg*t12316*t12239*(2.0/3.0);
            double t12336 = Cg_2*c*t12206*(1.0/3.0);
            double t12337 = t12335+t12336;
            double t12339 = -t12332+1.0/2.0;
            double t12340 = pow(t12339,5.0/3.0);
            double t12341 = t12340+t12334;
            double t12342 = 1.0/sqrt(t12341);
            double t12343 = t12210*(1.0/2.0);
            double t12344 = t12211*t12213*(1.0/2.0);
            double t12345 = t12343+t12344;
            double t12351 = pow(t12339,2.0/3.0);
            double t12352 = pow(t12333,2.0/3.0);
            double t12372 = t12351*t12345*(5.0/3.0);
            double t12373 = t12352*t12345*(5.0/3.0);
            double t12346 = -t12372+t12373;
            double t12347 = t12315*t12337;
            double t12349 = t12320*t12324*t12319;
            double t12348 = t12347-t12349;
            double t12350 = t12345*t12345;
            double t12353 = t12211*t12249;
            double t12354 = t12213+t12353;
            double t12355 = 1.0/(t12328*t12328);
            double t12356 = Bg*t12240*t12239*(1.0E1/9.0);
            double t12357 = Cg_2*c*t12237*(4.0/9.0);
            double t12358 = t12356+t12357;
            double t12359 = t12315*t12358;
            double t12360 = Bg*c*t12239*t12249*2.0E4;
            double t12361 = Cg_4*t12240*t12239*(1.0E1/9.0);
            double t12362 = Cg_3*c*t12237*(4.0/9.0);
            double t12363 = t12360+t12361+t12362;
            double t12364 = t12324*t12324;
            double t12365 = 1.0/(t12314*t12314*t12314);
            double t12366 = t12319*t12364*t12365*2.0;
            double t12367 = t12366+t12359-t12320*t12324*t12337*2.0-t12320*t12363*t12319;
            double t12368 = 1.0/pow(t12205,1.3E1/6.0);
            double t12369 = Cinf*Fg*Pg_1*t12330*t12329*t12368*(7.0/6.0);
            double t12375 = Cinf*Fg*Pg_1*t12330*t12326*t12355*t12348;
            double t12370 = -t12375+t12369;
            double t12371 = 1.0/pow(t12341,3.0/2.0);
            double t12374 = t12372-t12373;
            v_rho_b_rho_b_[index] = t12305*(t12306+t12293+t12225*t12267*(t12271-t12292))*2.0-t12302*t12304*2.0- \
               t12205*(t12305*(-t12236+t12297+t12225*t12262*(t12236-t12297-EcFld_1*(t12230*t12230)*1.0/(t12233*t12233* \
               t12233)*2.0+EcFld_1*t12238*(EcFld_3*c*t12237*(4.0/9.0)-EcFld_2*t12240*t12241*t12239*(1.0/3.6E1)+EcFld_2* \
               c*t12216*t12237*(2.0/9.0)))+t12225*t12273*t12258+t12225*t12291*t12267*2.0)-t12302*(t12263+t12264+t12265+ \
               t12268-t12225*t12262*(t12263+t12264+t12265+t12268-EcFhd_1*t12213*(1.0/3.0)-EcFhd_3*c*t12237*(5.0/9.0) \
               -EcFhd_4*c*t12237*(4.0/9.0)-EcFhd_3*c*t12237*t12259*(4.0/9.0))+t12225*t12258*t12296-t12225*t12267* \
               t12298*2.0)+c*t12300*t12237*t12278*(4.0/9.0)+c*t12304*t12206*t12278*(2.0/3.0)-c*t12237*t12294*t12278* \
               (4.0/9.0)+t12300*t12240*t12239*t12295*(1.0/9.0)-t12240*t12239*t12294*t12295*(1.0/9.0)+c*t12206*t12278* \
               (t12306+t12293+t12225*t12273*t12267)*(2.0/3.0))+c*t12300*t12206*t12278*(2.0/3.0)-c*t12206*t12294*t12278* \
               (2.0/3.0)+t12310*t12331*t12342*t12325*t12237*t12348*(8.0/3.0)+t12310*1.0/pow(t12205,1.0E1/3.0)*t12331* \
               t12342*t12325*t12328*(2.8E1/9.0)+t12310*t12331*t12206*t12325*t12367*1.0/sqrt(t12334+pow(t12210*t12211* \
               (-1.0/2.0)+1.0/2.0,5.0/3.0))+t12310*t12331*t12206*1.0/pow(t12341,5.0/2.0)*t12325*t12328*(t12346*t12346) \
               *(3.0/4.0)-t12310*t12331*t12206*t12342*t12325*t12328*(Cinf*Fg*Pg_1*t12330*1.0/pow(t12205,1.9E1/6.0) \
               *t12329*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t12330*t12326*t12355*t12367-Cinf*Fg*Pg_1*t12330*t12355*t12348*t12368* \
               (7.0/3.0)+Cinf*Fg*Pg_1*t12330*t12326*1.0/(t12328*t12328*t12328)*(t12348*t12348)*2.0)-t12310*t12331* \
               t12206*t12325*t12371*t12328*(t12351*t12354*(-5.0/3.0)+t12352*t12354*(5.0/3.0)+t12350*1.0/pow(t12333,1.0/ \
               3.0)*(1.0E1/9.0)+t12350*1.0/pow(t12339,1.0/3.0)*(1.0E1/9.0))*(1.0/2.0)-t12310*t12331*t12206*t12342* \
               t12325*t12370*t12348*2.0-t12310*t12331*t12342*t12325*t12370*t12237*t12328*(8.0/3.0)+t12310*t12331* \
               t12206*t12325*t12371*t12374*t12348+t12310*t12331*t12325*t12371*t12237*t12328*t12374*(4.0/3.0)+t12310* \
               t12331*t12206*t12342*t12325*(t12370*t12370)*t12328-t12310*t12331*t12206*t12325*t12370*t12371*t12328* \
               t12374;
        } else if (rho_a[index] > cutoff_) {
            double t14468 = rho_a[index]+rho_b[index];
            double t14469 = 1.0/pow(t14468,4.0/3.0);
            double t14470 = 1.0/pow(t14468,1.0/3.0);
            double t14471 = c*t14470;
            double t14472 = 1.0/sqrt(t14471);
            double t14473 = sqrt(t14471);
            double t14474 = EcPld_3*c*t14469*(1.0/3.0);
            double t14475 = EcPld_2*c*t14472*t14469*(1.0/6.0);
            double t14476 = t14474+t14475;
            double t14477 = EcPld_2*t14473;
            double t14478 = EcPld_3*c*t14470;
            double t14479 = t14477+t14478+1.0;
            double t14480 = 1.0/(t14479*t14479);
            double t14481 = EcPld_1*t14480*t14476;
            double t14482 = t14471-1.0;
            double t14483 = ( (t14482 > 0.0) ?  1.0 : 0.0 ) ;
            double t14484 = pow(2.0,1.0/3.0);
            double t14485 = t14484*2.0;
            double t14486 = t14485-2.0;
            double t14487 = two_13*2.0;
            double t14488 = t14487-2.0;
            double t14489 = 1.0/t14488;
            double t14490 = EcFld_3*c*t14469*(1.0/3.0);
            double t14491 = EcFld_2*c*t14472*t14469*(1.0/6.0);
            double t14492 = t14490+t14491;
            double t14493 = EcFld_2*t14473;
            double t14494 = EcFld_3*c*t14470;
            double t14495 = t14493+t14494+1.0;
            double t14496 = t14476*t14476;
            double t14497 = 1.0/(t14479*t14479*t14479);
            double t14498 = EcPld_1*t14496*t14497*2.0;
            double t14499 = 1.0/pow(t14468,7.0/3.0);
            double t14500 = 1.0/(t14495*t14495);
            double t14501 = c*c;
            double t14502 = 1.0/pow(t14468,8.0/3.0);
            double t14503 = 1.0/pow(t14471,3.0/2.0);
            double t14504 = EcPld_3*c*t14499*(4.0/9.0);
            double t14505 = EcPld_2*c*t14472*t14499*(2.0/9.0);
            double t14506 = t14504+t14505-EcPld_2*t14501*t14502*t14503*(1.0/3.6E1);
            double t14507 = EcPld_1*t14506*t14480;
            double t14508 = 1.0/(t14468*t14468);
            double t14509 = EcPhd_1*t14508*(1.0/3.0);
            double t14510 = log(t14471);
            double t14511 = EcPhd_3*c*t14499*(5.0/9.0);
            double t14512 = EcPhd_4*c*t14499*(4.0/9.0);
            double t14513 = EcPhd_3*c*t14510*t14499*(4.0/9.0);
            double t14514 = 1.0/t14479;
            double t14515 = EcPld_1*t14514;
            double t14516 = t14481-EcFld_1*t14500*t14492;
            double t14517 = t14481-t14516*t14486*t14489;
            double t14518 = 0.0 ;
            double t14519 = EcPhd_1*t14510;
            double t14520 = 1.0/t14468;
            double t14521 = EcPhd_1*t14520*(1.0/3.0);
            double t14522 = EcPhd_3*c*t14469*(1.0/3.0);
            double t14523 = EcPhd_4*c*t14469*(1.0/3.0);
            double t14524 = EcPhd_3*c*t14510*t14469*(1.0/3.0);
            double t14525 = 1.0/t14495;
            double t14541 = EcFld_1*t14525;
            double t14526 = -t14541+t14515;
            double t14527 = t14515-t14526*t14486*t14489;
            double t14528 = 0.0 ;
            double t14529 = EcFhd_1*t14510;
            double t14530 = EcFhd_4*c*t14470;
            double t14531 = EcPhd_4*c*t14470;
            double t14532 = EcFhd_3*c*t14510*t14470;
            double t14533 = EcPhd_3*c*t14510*t14470;
            double t14534 = -t14471+1.0;
            double t14535 = ( (t14534 > 0.0) ?  1.0 : 0.0 ) ;
            double t14536 = t14521+t14522+t14523+t14524-EcFhd_1*t14520*(1.0/3.0)-EcFhd_3*c*t14469*(1.0/3.0)-EcFhd_4* \
               c*t14469*(1.0/3.0)-EcFhd_3*c*t14510*t14469*(1.0/3.0);
            double t14537 = t14521+t14522+t14523+t14524-t14536*t14486*t14489;
            double t14538 = EcFhd_2-EcPhd_2+t14530-t14531+t14532-t14533-t14519+t14529;
            double t14539 = t14538*t14486*t14489;
            double t14540 = EcPhd_2+t14531+t14533+t14519+t14539;
            double t14542 = 1.0/pow(t14468,2.0/3.0);
            double t14543 = Bg*c*t14501*t14520*1.0E4;
            double t14544 = Cg_4*t14501*t14542;
            double t14545 = Cg_3*c*t14470;
            double t14546 = t14543+t14544+t14545+1.0;
            double t14547 = 1.0/t14546;
            double t14548 = 1.0/pow(t14468,5.0/3.0);
            double t14549 = Bg*t14501*t14542;
            double t14550 = Cg_2*c*t14470;
            double t14551 = Cg_1+t14550+t14549;
            double t14552 = gamma_ab[index]*2.0;
            double t14553 = gamma_aa[index]+gamma_bb[index]+t14552;
            double t14554 = 1.0/two_13;
            double t14555 = 1.0/pow(t14468,7.0/6.0);
            double t14556 = t14551*t14547;
            double t14557 = Cx+t14556;
            double t14558 = 1.0/t14557;
            double t14559 = sqrt(t14553);
            double t14561 = Cinf*Fg*Pg_1*t14555*t14558*t14559;
            double t14560 = exp(-t14561);
            double t14562 = Bg*t14501*t14548*(2.0/3.0);
            double t14563 = Cg_2*c*t14469*(1.0/3.0);
            double t14564 = t14562+t14563;
            double t14565 = Bg*c*t14501*t14508*1.0E4;
            double t14566 = Cg_4*t14501*t14548*(2.0/3.0);
            double t14567 = Cg_3*c*t14469*(1.0/3.0);
            double t14568 = t14565+t14566+t14567;
            double t14569 = 1.0/(t14546*t14546);
            double t14570 = t14564*t14547;
            double t14585 = t14551*t14568*t14569;
            double t14571 = t14570-t14585;
            double t14572 = Bg*t14501*t14502*(1.0E1/9.0);
            double t14573 = Cg_2*c*t14499*(4.0/9.0);
            double t14574 = t14572+t14573;
            double t14575 = t14547*t14574;
            double t14576 = 1.0/(t14468*t14468*t14468);
            double t14577 = Bg*c*t14501*t14576*2.0E4;
            double t14578 = Cg_4*t14501*t14502*(1.0E1/9.0);
            double t14579 = Cg_3*c*t14499*(4.0/9.0);
            double t14580 = t14577+t14578+t14579;
            double t14581 = t14568*t14568;
            double t14582 = 1.0/(t14546*t14546*t14546);
            double t14583 = t14551*t14581*t14582*2.0;
            double t14584 = t14583+t14575-t14551*t14580*t14569-t14564*t14568*t14569*2.0;
            double t14586 = 1.0/(t14557*t14557);
            double t14587 = 1.0/pow(t14468,1.3E1/6.0);
            double t14588 = Cinf*Fg*Pg_1*t14558*t14559*t14587*(7.0/6.0);
            double t14590 = Cinf*Fg*Pg_1*t14571*t14555*t14559*t14586;
            double t14589 = -t14590+t14588;
            v_rho_b_rho_b_[index] = t14517*t14483*2.0-t14535*t14537*2.0+t14468*(t14535*(t14511+t14512+t14513+ \
               t14509-t14486*t14489*(t14511+t14512+t14513+t14509-EcFhd_1*t14508*(1.0/3.0)-EcFhd_3*c*t14499*(5.0/9.0) \
               -EcFhd_4*c*t14499*(4.0/9.0)-EcFhd_3*c*t14510*t14499*(4.0/9.0)))+t14483*(-t14507+t14498+t14486*t14489* \
               (t14507-t14498+EcFld_1*(t14492*t14492)*1.0/(t14495*t14495*t14495)*2.0-EcFld_1*t14500*(EcFld_3*c*t14499* \
               (4.0/9.0)-EcFld_2*t14501*t14502*t14503*(1.0/3.6E1)+EcFld_2*c*t14472*t14499*(2.0/9.0))))-c*t14517*t14518* \
               t14469*(2.0/3.0)-c*t14518*t14537*t14469*(2.0/3.0)+c*t14518*t14527*t14499*(4.0/9.0)-t14501*t14502*t14540* \
               t14528*(1.0/9.0)+t14501*t14502*t14527*t14528*(1.0/9.0)-c*t14518*t14499*(EcPhd_2+t14531+t14533+t14519+ \
               t14486*t14489*(EcFhd_2-EcPhd_2+t14530+t14532-t14519+t14529-EcPhd_4*c*t14470-EcPhd_3*c*t14510*t14470) \
               )*(4.0/9.0))+c*t14540*t14518*t14469*(2.0/3.0)-c*t14518*t14469*(t14515+t14486*t14489*(t14541-t14515) \
               )*(2.0/3.0)+t14560*t14553*t14554*t14557*1.0/pow(t14468,1.0E1/3.0)*(2.8E1/9.0)+t14560*t14553*t14571* \
               t14554*t14499*(8.0/3.0)+t14560*t14553*t14554*t14584*t14469-t14560*t14553*t14571*t14554*t14469*t14589* \
               2.0-t14560*t14553*t14554*t14557*t14499*t14589*(8.0/3.0)+t14560*t14553*t14554*t14557*t14469*(t14589* \
               t14589)-t14560*t14553*t14554*t14557*t14469*(Cinf*Fg*Pg_1*1.0/pow(t14468,1.9E1/6.0)*t14558*t14559*(9.1E1/ \
               3.6E1)-Cinf*Fg*Pg_1*t14555*t14584*t14559*t14586-Cinf*Fg*Pg_1*t14571*t14559*t14586*t14587*(7.0/3.0) \
               +Cinf*Fg*Pg_1*(t14571*t14571)*t14555*1.0/(t14557*t14557*t14557)*t14559*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t13421 = rho_a[index]+rho_b[index];
            double t13422 = 1.0/pow(t13421,4.0/3.0);
            double t13423 = 1.0/pow(t13421,1.0/3.0);
            double t13424 = c*t13423;
            double t13425 = 1.0/sqrt(t13424);
            double t13426 = sqrt(t13424);
            double t13427 = EcPld_3*c*t13422*(1.0/3.0);
            double t13428 = EcPld_2*c*t13422*t13425*(1.0/6.0);
            double t13429 = t13427+t13428;
            double t13430 = EcPld_2*t13426;
            double t13431 = EcPld_3*c*t13423;
            double t13432 = t13430+t13431+1.0;
            double t13433 = 1.0/(t13432*t13432);
            double t13434 = EcPld_1*t13433*t13429;
            double t13435 = t13424-1.0;
            double t13436 = ( (t13435 > 0.0) ?  1.0 : 0.0 ) ;
            double t13437 = pow(2.0,1.0/3.0);
            double t13438 = t13437*2.0;
            double t13439 = t13438-2.0;
            double t13440 = two_13*2.0;
            double t13441 = t13440-2.0;
            double t13442 = 1.0/t13441;
            double t13443 = EcFld_3*c*t13422*(1.0/3.0);
            double t13444 = EcFld_2*c*t13422*t13425*(1.0/6.0);
            double t13445 = t13443+t13444;
            double t13446 = EcFld_2*t13426;
            double t13447 = EcFld_3*c*t13423;
            double t13448 = t13446+t13447+1.0;
            double t13449 = t13429*t13429;
            double t13450 = 1.0/(t13432*t13432*t13432);
            double t13451 = EcPld_1*t13450*t13449*2.0;
            double t13452 = 1.0/pow(t13421,7.0/3.0);
            double t13453 = 1.0/(t13448*t13448);
            double t13454 = c*c;
            double t13455 = 1.0/pow(t13421,8.0/3.0);
            double t13456 = 1.0/pow(t13424,3.0/2.0);
            double t13457 = EcPld_3*c*t13452*(4.0/9.0);
            double t13458 = EcPld_2*c*t13425*t13452*(2.0/9.0);
            double t13459 = t13457+t13458-EcPld_2*t13454*t13455*t13456*(1.0/3.6E1);
            double t13460 = EcPld_1*t13433*t13459;
            double t13461 = 1.0/(t13421*t13421);
            double t13462 = EcPhd_1*t13461*(1.0/3.0);
            double t13463 = log(t13424);
            double t13464 = EcPhd_3*c*t13452*(5.0/9.0);
            double t13465 = EcPhd_4*c*t13452*(4.0/9.0);
            double t13466 = EcPhd_3*c*t13452*t13463*(4.0/9.0);
            double t13467 = 1.0/t13432;
            double t13468 = EcPld_1*t13467;
            double t13469 = t13434-EcFld_1*t13453*t13445;
            double t13470 = t13434-t13442*t13439*t13469;
            double t13471 = 0.0 ;
            double t13472 = EcPhd_1*t13463;
            double t13473 = 1.0/t13421;
            double t13474 = EcPhd_1*t13473*(1.0/3.0);
            double t13475 = EcPhd_3*c*t13422*(1.0/3.0);
            double t13476 = EcPhd_4*c*t13422*(1.0/3.0);
            double t13477 = EcPhd_3*c*t13422*t13463*(1.0/3.0);
            double t13478 = 1.0/t13448;
            double t13494 = EcFld_1*t13478;
            double t13479 = -t13494+t13468;
            double t13480 = t13468-t13442*t13439*t13479;
            double t13481 = 0.0 ;
            double t13482 = EcFhd_1*t13463;
            double t13483 = EcFhd_4*c*t13423;
            double t13484 = EcPhd_4*c*t13423;
            double t13485 = EcFhd_3*c*t13423*t13463;
            double t13486 = EcPhd_3*c*t13423*t13463;
            double t13487 = EcFhd_2-EcPhd_2-t13472+t13482+t13483-t13484+t13485-t13486;
            double t13488 = t13442*t13439*t13487;
            double t13489 = EcPhd_2+t13472+t13484+t13486+t13488;
            double t13490 = -t13424+1.0;
            double t13491 = ( (t13490 > 0.0) ?  1.0 : 0.0 ) ;
            double t13492 = t13474+t13475+t13476+t13477-EcFhd_1*t13473*(1.0/3.0)-EcFhd_3*c*t13422*(1.0/3.0)-EcFhd_4* \
               c*t13422*(1.0/3.0)-EcFhd_3*c*t13422*t13463*(1.0/3.0);
            double t13493 = t13474+t13475+t13476+t13477-t13442*t13492*t13439;
            double t13495 = 1.0/pow(t13421,2.0/3.0);
            double t13496 = Bg*c*t13454*t13473*1.0E4;
            double t13497 = Cg_4*t13454*t13495;
            double t13498 = Cg_3*c*t13423;
            double t13499 = t13496+t13497+t13498+1.0;
            double t13500 = 1.0/t13499;
            double t13501 = 1.0/pow(t13421,5.0/3.0);
            double t13502 = Bg*t13454*t13495;
            double t13503 = Cg_2*c*t13423;
            double t13504 = Cg_1+t13502+t13503;
            double t13505 = gamma_ab[index]*2.0;
            double t13506 = gamma_aa[index]+gamma_bb[index]+t13505;
            double t13507 = 1.0/two_13;
            double t13508 = 1.0/pow(t13421,7.0/6.0);
            double t13509 = t13500*t13504;
            double t13510 = Cx+t13509;
            double t13511 = 1.0/t13510;
            double t13512 = sqrt(t13506);
            double t13514 = Cinf*Fg*Pg_1*t13511*t13512*t13508;
            double t13513 = exp(-t13514);
            double t13515 = Bg*t13501*t13454*(2.0/3.0);
            double t13516 = Cg_2*c*t13422*(1.0/3.0);
            double t13517 = t13515+t13516;
            double t13518 = Bg*c*t13461*t13454*1.0E4;
            double t13519 = Cg_4*t13501*t13454*(2.0/3.0);
            double t13520 = Cg_3*c*t13422*(1.0/3.0);
            double t13521 = t13520+t13518+t13519;
            double t13522 = 1.0/(t13499*t13499);
            double t13523 = t13500*t13517;
            double t13538 = t13521*t13504*t13522;
            double t13524 = t13523-t13538;
            double t13525 = Bg*t13454*t13455*(1.0E1/9.0);
            double t13526 = Cg_2*c*t13452*(4.0/9.0);
            double t13527 = t13525+t13526;
            double t13528 = t13500*t13527;
            double t13529 = 1.0/(t13421*t13421*t13421);
            double t13530 = Bg*c*t13454*t13529*2.0E4;
            double t13531 = Cg_4*t13454*t13455*(1.0E1/9.0);
            double t13532 = Cg_3*c*t13452*(4.0/9.0);
            double t13533 = t13530+t13531+t13532;
            double t13534 = t13521*t13521;
            double t13535 = 1.0/(t13499*t13499*t13499);
            double t13536 = t13504*t13534*t13535*2.0;
            double t13537 = t13536+t13528-t13504*t13522*t13533-t13521*t13522*t13517*2.0;
            double t13539 = 1.0/(t13510*t13510);
            double t13540 = 1.0/pow(t13421,1.3E1/6.0);
            double t13541 = Cinf*Fg*Pg_1*t13511*t13512*t13540*(7.0/6.0);
            double t13543 = Cinf*Fg*Pg_1*t13512*t13524*t13508*t13539;
            double t13542 = t13541-t13543;
            v_rho_b_rho_b_[index] = -t13421*(-t13491*(t13462+t13464+t13465+t13466-t13442*t13439*(t13462+t13464+ \
               t13465+t13466-EcFhd_1*t13461*(1.0/3.0)-EcFhd_3*c*t13452*(5.0/9.0)-EcFhd_4*c*t13452*(4.0/9.0)-EcFhd_3* \
               c*t13452*t13463*(4.0/9.0)))+t13436*(-t13451+t13460+t13442*t13439*(t13451-t13460-EcFld_1*(t13445*t13445) \
               *1.0/(t13448*t13448*t13448)*2.0+EcFld_1*t13453*(EcFld_3*c*t13452*(4.0/9.0)-EcFld_2*t13454*t13455*t13456* \
               (1.0/3.6E1)+EcFld_2*c*t13425*t13452*(2.0/9.0))))+c*t13422*t13470*t13471*(2.0/3.0)-c*t13452*t13471* \
               t13480*(4.0/9.0)+c*t13422*t13471*t13493*(2.0/3.0)+c*t13452*t13471*t13489*(4.0/9.0)-t13480*t13454*t13481* \
               t13455*(1.0/9.0)+t13454*t13481*t13455*t13489*(1.0/9.0))+t13470*t13436*2.0-t13491*t13493*2.0+c*t13422* \
               t13471*t13489*(2.0/3.0)-c*t13422*t13471*(t13468+t13442*t13439*(t13494-t13468))*(2.0/3.0)+t13510*1.0/ \
               pow(t13421,1.0E1/3.0)*t13513*t13506*t13507*(2.8E1/9.0)+t13513*t13452*t13506*t13524*t13507*(8.0/3.0) \
               +t13422*t13513*t13506*t13507*t13537-t13510*t13513*t13452*t13506*t13542*t13507*(8.0/3.0)-t13422*t13513* \
               t13506*t13524*t13542*t13507*2.0+t13510*t13422*t13513*t13506*(t13542*t13542)*t13507-t13510*t13422*t13513* \
               t13506*t13507*(Cinf*Fg*Pg_1*1.0/pow(t13421,1.9E1/6.0)*t13511*t13512*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t13512* \
               t13540*t13524*t13539*(7.0/3.0)-Cinf*Fg*Pg_1*t13512*t13508*t13537*t13539+Cinf*Fg*Pg_1*1.0/(t13510*t13510* \
               t13510)*t13512*(t13524*t13524)*t13508*2.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12377 = rho_a[index]+rho_b[index];
                double t12378 = c*c;
                double t12379 = 1.0/pow(t12377,2.0/3.0);
                double t12380 = 1.0/pow(t12377,1.0/3.0);
                double t12381 = 1.0/t12377;
                double t12382 = rho_a[index]-rho_b[index];
                double t12383 = 1.0/pow(t12377,4.0/3.0);
                double t12384 = Bg*c*t12381*t12378*1.0E4;
                double t12385 = Cg_4*t12378*t12379;
                double t12386 = Cg_3*c*t12380;
                double t12387 = t12384+t12385+t12386+1.0;
                double t12388 = 1.0/t12387;
                double t12389 = 1.0/pow(t12377,5.0/3.0);
                double t12390 = Bg*t12378*t12379;
                double t12391 = Cg_2*c*t12380;
                double t12392 = Cg_1+t12390+t12391;
                double t12393 = 1.0/two_13;
                double t12394 = 1.0/pow(t12377,7.0/6.0);
                double t12395 = t12392*t12388;
                double t12396 = Cx+t12395;
                double t12397 = 1.0/t12396;
                double t12398 = gamma_ab[index]*2.0;
                double t12399 = gamma_aa[index]+gamma_bb[index]+t12398;
                double t12400 = sqrt(t12399);
                double t12405 = Cinf*Fg*Pg_1*t12400*t12394*t12397;
                double t12401 = exp(-t12405);
                double t12402 = t12381*t12382*(1.0/2.0);
                double t12403 = t12402+1.0/2.0;
                double t12404 = pow(t12403,5.0/3.0);
                double t12406 = -t12402+1.0/2.0;
                double t12407 = pow(t12406,5.0/3.0);
                double t12408 = t12404+t12407;
                double t12409 = 1.0/sqrt(t12408);
                double t12410 = Bg*t12378*t12389*(2.0/3.0);
                double t12411 = Cg_2*c*t12383*(1.0/3.0);
                double t12412 = t12410+t12411;
                double t12413 = t12412*t12388;
                double t12414 = 1.0/(t12377*t12377);
                double t12415 = Bg*c*t12414*t12378*1.0E4;
                double t12416 = Cg_4*t12378*t12389*(2.0/3.0);
                double t12417 = Cg_3*c*t12383*(1.0/3.0);
                double t12418 = t12415+t12416+t12417;
                double t12419 = 1.0/(t12387*t12387);
                double t12424 = t12418*t12392*t12419;
                double t12420 = t12413-t12424;
                double t12421 = t12381*(1.0/2.0);
                double t12432 = t12414*t12382*(1.0/2.0);
                double t12422 = t12421-t12432;
                double t12423 = 1.0/pow(t12377,1.3E1/6.0);
                double t12425 = 1.0/(t12396*t12396);
                double t12426 = 1.0/sqrt(t12399);
                double t12427 = Cinf*Fg*Pg_1*t12400*t12423*t12397*(7.0/6.0);
                double t12428 = t12427-Cinf*Fg*Pg_1*t12400*t12420*t12425*t12394;
                double t12429 = 1.0/pow(t12408,3.0/2.0);
                double t12430 = 1.0/pow(t12377,5.0/2.0);
                double t12431 = pow(t12406,2.0/3.0);
                double t12433 = t12422*t12431*(5.0/3.0);
                double t12434 = pow(t12403,2.0/3.0);
                double t12435 = t12433-t12422*t12434*(5.0/3.0);
                v_rho_a_gamma_aa_[index] = t12401*t12409*t12393*1.0/pow(t12377,7.0/3.0)*t12396*(-4.0/3.0)-t12401* \
                   t12420*t12383*t12393*1.0/sqrt(t12404+pow(t12381*t12382*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t12401*t12435* \
                   t12383*t12393*t12429*t12396*(1.0/2.0)+t12401*t12409*t12383*t12428*t12393*t12396+t12401*t12409*t12383* \
                   t12393*t12396*t12399*(Cinf*Fg*Pg_1*t12423*t12426*t12397*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12420*t12425*t12426* \
                   t12394*(1.0/2.0))+Cinf*Fg*Pg_1*t12400*t12401*t12409*t12393*1.0/pow(t12377,7.0/2.0)*(2.0/3.0)-Cinf* \
                   Fg*Pg_1*t12400*t12401*t12430*t12435*t12393*t12429*(1.0/4.0)-Cinf*Fg*Pg_1*t12400*t12401*t12430*t12409* \
                   t12428*t12393*(1.0/2.0)+Cinf*Fg*Pg_1*t12400*t12401*t12420*t12430*t12409*t12393*t12397*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14592 = rho_a[index]+rho_b[index];
                double t14593 = c*c;
                double t14594 = 1.0/pow(t14592,2.0/3.0);
                double t14595 = 1.0/pow(t14592,1.0/3.0);
                double t14596 = 1.0/pow(t14592,4.0/3.0);
                double t14597 = 1.0/t14592;
                double t14598 = Bg*c*t14593*t14597*1.0E4;
                double t14599 = Cg_4*t14593*t14594;
                double t14600 = Cg_3*c*t14595;
                double t14601 = t14600+t14598+t14599+1.0;
                double t14602 = 1.0/t14601;
                double t14603 = 1.0/pow(t14592,5.0/3.0);
                double t14604 = Bg*t14593*t14594;
                double t14605 = Cg_2*c*t14595;
                double t14606 = Cg_1+t14604+t14605;
                double t14607 = 1.0/two_13;
                double t14608 = 1.0/pow(t14592,7.0/6.0);
                double t14609 = t14602*t14606;
                double t14610 = Cx+t14609;
                double t14611 = 1.0/t14610;
                double t14612 = gamma_ab[index]*2.0;
                double t14613 = gamma_aa[index]+gamma_bb[index]+t14612;
                double t14614 = sqrt(t14613);
                double t14616 = Cinf*Fg*Pg_1*t14611*t14614*t14608;
                double t14615 = exp(-t14616);
                double t14617 = Bg*t14603*t14593*(2.0/3.0);
                double t14618 = Cg_2*c*t14596*(1.0/3.0);
                double t14619 = t14617+t14618;
                double t14620 = t14602*t14619;
                double t14621 = 1.0/(t14592*t14592);
                double t14622 = Bg*c*t14621*t14593*1.0E4;
                double t14623 = Cg_4*t14603*t14593*(2.0/3.0);
                double t14624 = Cg_3*c*t14596*(1.0/3.0);
                double t14625 = t14622+t14623+t14624;
                double t14626 = 1.0/(t14601*t14601);
                double t14629 = t14606*t14625*t14626;
                double t14627 = t14620-t14629;
                double t14628 = 1.0/pow(t14592,1.3E1/6.0);
                double t14630 = 1.0/(t14610*t14610);
                double t14631 = 1.0/sqrt(t14613);
                double t14632 = Cinf*Fg*Pg_1*t14611*t14614*t14628*(7.0/6.0);
                double t14633 = t14632-Cinf*Fg*Pg_1*t14630*t14614*t14608*t14627;
                double t14634 = 1.0/pow(t14592,5.0/2.0);
                v_rho_a_gamma_aa_[index] = -t14615*t14607*t14627*t14596-t14610*t14615*t14607*1.0/pow(t14592,7.0/3.0) \
                   *(4.0/3.0)+t14610*t14615*t14633*t14607*t14596+t14610*t14613*t14615*t14607*t14596*(Cinf*Fg*Pg_1*t14611* \
                   t14631*t14628*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14630*t14631*t14608*t14627*(1.0/2.0))+Cinf*Fg*Pg_1*t14614* \
                   t14615*t14607*1.0/pow(t14592,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t14614*t14615*t14633*t14607*t14634*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t14611*t14614*t14615*t14607*t14634*t14627*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13545 = rho_a[index]+rho_b[index];
                double t13546 = c*c;
                double t13547 = 1.0/pow(t13545,2.0/3.0);
                double t13548 = 1.0/pow(t13545,1.0/3.0);
                double t13549 = 1.0/pow(t13545,4.0/3.0);
                double t13550 = 1.0/t13545;
                double t13551 = Bg*c*t13550*t13546*1.0E4;
                double t13552 = Cg_4*t13546*t13547;
                double t13553 = Cg_3*c*t13548;
                double t13554 = t13551+t13552+t13553+1.0;
                double t13555 = 1.0/t13554;
                double t13556 = 1.0/pow(t13545,5.0/3.0);
                double t13557 = Bg*t13546*t13547;
                double t13558 = Cg_2*c*t13548;
                double t13559 = Cg_1+t13557+t13558;
                double t13560 = 1.0/two_13;
                double t13561 = 1.0/pow(t13545,7.0/6.0);
                double t13562 = t13555*t13559;
                double t13563 = Cx+t13562;
                double t13564 = 1.0/t13563;
                double t13565 = gamma_ab[index]*2.0;
                double t13566 = gamma_aa[index]+gamma_bb[index]+t13565;
                double t13567 = sqrt(t13566);
                double t13569 = Cinf*Fg*Pg_1*t13561*t13564*t13567;
                double t13568 = exp(-t13569);
                double t13570 = Bg*t13546*t13556*(2.0/3.0);
                double t13571 = Cg_2*c*t13549*(1.0/3.0);
                double t13572 = t13570+t13571;
                double t13573 = t13572*t13555;
                double t13574 = 1.0/(t13545*t13545);
                double t13575 = Bg*c*t13546*t13574*1.0E4;
                double t13576 = Cg_4*t13546*t13556*(2.0/3.0);
                double t13577 = Cg_3*c*t13549*(1.0/3.0);
                double t13578 = t13575+t13576+t13577;
                double t13579 = 1.0/(t13554*t13554);
                double t13582 = t13559*t13578*t13579;
                double t13580 = t13573-t13582;
                double t13581 = 1.0/pow(t13545,1.3E1/6.0);
                double t13583 = 1.0/(t13563*t13563);
                double t13584 = 1.0/sqrt(t13566);
                double t13585 = Cinf*Fg*Pg_1*t13581*t13564*t13567*(7.0/6.0);
                double t13586 = t13585-Cinf*Fg*Pg_1*t13561*t13580*t13583*t13567;
                double t13587 = 1.0/pow(t13545,5.0/2.0);
                v_rho_a_gamma_aa_[index] = -t13560*t13580*t13549*t13568-t13560*1.0/pow(t13545,7.0/3.0)*t13563*t13568* \
                   (4.0/3.0)+t13560*t13563*t13549*t13568*t13586+t13560*t13563*t13566*t13549*t13568*(Cinf*Fg*Pg_1*t13581* \
                   t13564*t13584*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13561*t13580*t13583*t13584*(1.0/2.0))+Cinf*Fg*Pg_1*t13560* \
                   1.0/pow(t13545,7.0/2.0)*t13567*t13568*(2.0/3.0)-Cinf*Fg*Pg_1*t13560*t13567*t13568*t13586*t13587*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t13560*t13580*t13564*t13567*t13568*t13587*(1.0/2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12437 = rho_a[index]+rho_b[index];
                double t12438 = c*c;
                double t12439 = 1.0/pow(t12437,2.0/3.0);
                double t12440 = 1.0/pow(t12437,1.0/3.0);
                double t12441 = 1.0/t12437;
                double t12442 = rho_a[index]-rho_b[index];
                double t12443 = 1.0/pow(t12437,4.0/3.0);
                double t12444 = Bg*c*t12441*t12438*1.0E4;
                double t12445 = Cg_4*t12438*t12439;
                double t12446 = Cg_3*c*t12440;
                double t12447 = t12444+t12445+t12446+1.0;
                double t12448 = 1.0/t12447;
                double t12449 = 1.0/pow(t12437,5.0/3.0);
                double t12450 = Bg*t12438*t12439;
                double t12451 = Cg_2*c*t12440;
                double t12452 = Cg_1+t12450+t12451;
                double t12453 = 1.0/two_13;
                double t12454 = 1.0/pow(t12437,7.0/6.0);
                double t12455 = t12452*t12448;
                double t12456 = Cx+t12455;
                double t12457 = 1.0/t12456;
                double t12458 = gamma_ab[index]*2.0;
                double t12459 = gamma_aa[index]+gamma_bb[index]+t12458;
                double t12460 = sqrt(t12459);
                double t12465 = Cinf*Fg*Pg_1*t12460*t12454*t12457;
                double t12461 = exp(-t12465);
                double t12462 = t12441*t12442*(1.0/2.0);
                double t12463 = t12462+1.0/2.0;
                double t12464 = pow(t12463,5.0/3.0);
                double t12466 = -t12462+1.0/2.0;
                double t12467 = pow(t12466,5.0/3.0);
                double t12468 = t12464+t12467;
                double t12469 = 1.0/sqrt(t12468);
                double t12470 = Bg*t12438*t12449*(2.0/3.0);
                double t12471 = Cg_2*c*t12443*(1.0/3.0);
                double t12472 = t12470+t12471;
                double t12473 = t12472*t12448;
                double t12474 = 1.0/(t12437*t12437);
                double t12475 = Bg*c*t12438*t12474*1.0E4;
                double t12476 = Cg_4*t12438*t12449*(2.0/3.0);
                double t12477 = Cg_3*c*t12443*(1.0/3.0);
                double t12478 = t12475+t12476+t12477;
                double t12479 = 1.0/(t12447*t12447);
                double t12484 = t12452*t12478*t12479;
                double t12480 = t12473-t12484;
                double t12481 = t12441*(1.0/2.0);
                double t12492 = t12442*t12474*(1.0/2.0);
                double t12482 = t12481-t12492;
                double t12483 = 1.0/pow(t12437,1.3E1/6.0);
                double t12485 = 1.0/(t12456*t12456);
                double t12486 = 1.0/sqrt(t12459);
                double t12487 = Cinf*Fg*Pg_1*t12460*t12483*t12457*(7.0/6.0);
                double t12488 = t12487-Cinf*Fg*Pg_1*t12460*t12480*t12454*t12485;
                double t12489 = 1.0/pow(t12468,3.0/2.0);
                double t12490 = 1.0/pow(t12437,5.0/2.0);
                double t12491 = pow(t12466,2.0/3.0);
                double t12493 = t12482*t12491*(5.0/3.0);
                double t12494 = pow(t12463,2.0/3.0);
                double t12495 = t12493-t12482*t12494*(5.0/3.0);
                v_rho_a_gamma_ab_[index] = t12461*t12453*1.0/pow(t12437,7.0/3.0)*t12456*t12469*(-8.0/3.0)-t12443* \
                   t12461*t12453*t12480*1.0/sqrt(t12464+pow(t12441*t12442*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0+t12443*t12461* \
                   t12453*t12456*t12495*t12489+t12443*t12461*t12453*t12456*t12469*t12488*2.0+t12443*t12461*t12453*t12456* \
                   t12459*t12469*(Cinf*Fg*Pg_1*t12483*t12457*t12486*(7.0/6.0)-Cinf*Fg*Pg_1*t12480*t12454*t12485*t12486) \
                   +Cinf*Fg*Pg_1*t12460*t12461*t12453*1.0/pow(t12437,7.0/2.0)*t12469*(4.0/3.0)-Cinf*Fg*Pg_1*t12460*t12461* \
                   t12453*t12490*t12495*t12489*(1.0/2.0)-Cinf*Fg*Pg_1*t12460*t12461*t12453*t12490*t12469*t12488+Cinf* \
                   Fg*Pg_1*t12460*t12461*t12453*t12480*t12490*t12457*t12469;
            } else if (rho_a[index] > cutoff_) {
                double t14636 = rho_a[index]+rho_b[index];
                double t14637 = c*c;
                double t14638 = 1.0/pow(t14636,2.0/3.0);
                double t14639 = 1.0/pow(t14636,1.0/3.0);
                double t14640 = 1.0/pow(t14636,4.0/3.0);
                double t14641 = 1.0/t14636;
                double t14642 = Bg*c*t14641*t14637*1.0E4;
                double t14643 = Cg_4*t14637*t14638;
                double t14644 = Cg_3*c*t14639;
                double t14645 = t14642+t14643+t14644+1.0;
                double t14646 = 1.0/t14645;
                double t14647 = 1.0/pow(t14636,5.0/3.0);
                double t14648 = Bg*t14637*t14638;
                double t14649 = Cg_2*c*t14639;
                double t14650 = Cg_1+t14648+t14649;
                double t14651 = 1.0/two_13;
                double t14652 = 1.0/pow(t14636,7.0/6.0);
                double t14653 = t14650*t14646;
                double t14654 = Cx+t14653;
                double t14655 = 1.0/t14654;
                double t14656 = gamma_ab[index]*2.0;
                double t14657 = gamma_aa[index]+gamma_bb[index]+t14656;
                double t14658 = sqrt(t14657);
                double t14660 = Cinf*Fg*Pg_1*t14652*t14655*t14658;
                double t14659 = exp(-t14660);
                double t14661 = Bg*t14637*t14647*(2.0/3.0);
                double t14662 = Cg_2*c*t14640*(1.0/3.0);
                double t14663 = t14661+t14662;
                double t14664 = t14663*t14646;
                double t14665 = 1.0/(t14636*t14636);
                double t14666 = Bg*c*t14637*t14665*1.0E4;
                double t14667 = Cg_4*t14637*t14647*(2.0/3.0);
                double t14668 = Cg_3*c*t14640*(1.0/3.0);
                double t14669 = t14666+t14667+t14668;
                double t14670 = 1.0/(t14645*t14645);
                double t14673 = t14650*t14670*t14669;
                double t14671 = t14664-t14673;
                double t14672 = 1.0/pow(t14636,1.3E1/6.0);
                double t14674 = 1.0/(t14654*t14654);
                double t14675 = 1.0/sqrt(t14657);
                double t14676 = Cinf*Fg*Pg_1*t14672*t14655*t14658*(7.0/6.0);
                double t14677 = t14676-Cinf*Fg*Pg_1*t14652*t14671*t14674*t14658;
                double t14678 = 1.0/pow(t14636,5.0/2.0);
                v_rho_a_gamma_ab_[index] = t14640*t14651*t14671*t14659*-2.0-t14651*1.0/pow(t14636,7.0/3.0)*t14654* \
                   t14659*(8.0/3.0)+t14640*t14651*t14654*t14659*t14677*2.0+t14640*t14651*t14654*t14657*t14659*(Cinf*Fg* \
                   Pg_1*t14672*t14655*t14675*(7.0/6.0)-Cinf*Fg*Pg_1*t14652*t14671*t14674*t14675)+Cinf*Fg*Pg_1*t14651* \
                   1.0/pow(t14636,7.0/2.0)*t14658*t14659*(4.0/3.0)-Cinf*Fg*Pg_1*t14651*t14658*t14659*t14677*t14678+Cinf* \
                   Fg*Pg_1*t14651*t14671*t14655*t14658*t14659*t14678;
            } else if (rho_b[index] > cutoff_) {
                double t13589 = rho_a[index]+rho_b[index];
                double t13590 = c*c;
                double t13591 = 1.0/pow(t13589,2.0/3.0);
                double t13592 = 1.0/pow(t13589,1.0/3.0);
                double t13593 = 1.0/pow(t13589,4.0/3.0);
                double t13594 = 1.0/t13589;
                double t13595 = Bg*c*t13590*t13594*1.0E4;
                double t13596 = Cg_4*t13590*t13591;
                double t13597 = Cg_3*c*t13592;
                double t13598 = t13595+t13596+t13597+1.0;
                double t13599 = 1.0/t13598;
                double t13600 = 1.0/pow(t13589,5.0/3.0);
                double t13601 = Bg*t13590*t13591;
                double t13602 = Cg_2*c*t13592;
                double t13603 = Cg_1+t13601+t13602;
                double t13604 = 1.0/two_13;
                double t13605 = 1.0/pow(t13589,7.0/6.0);
                double t13606 = t13603*t13599;
                double t13607 = Cx+t13606;
                double t13608 = 1.0/t13607;
                double t13609 = gamma_ab[index]*2.0;
                double t13610 = gamma_aa[index]+gamma_bb[index]+t13609;
                double t13611 = sqrt(t13610);
                double t13613 = Cinf*Fg*Pg_1*t13611*t13605*t13608;
                double t13612 = exp(-t13613);
                double t13614 = Bg*t13600*t13590*(2.0/3.0);
                double t13615 = Cg_2*c*t13593*(1.0/3.0);
                double t13616 = t13614+t13615;
                double t13617 = t13616*t13599;
                double t13618 = 1.0/(t13589*t13589);
                double t13619 = Bg*c*t13590*t13618*1.0E4;
                double t13620 = Cg_4*t13600*t13590*(2.0/3.0);
                double t13621 = Cg_3*c*t13593*(1.0/3.0);
                double t13622 = t13620+t13621+t13619;
                double t13623 = 1.0/(t13598*t13598);
                double t13626 = t13603*t13622*t13623;
                double t13624 = t13617-t13626;
                double t13625 = 1.0/pow(t13589,1.3E1/6.0);
                double t13627 = 1.0/(t13607*t13607);
                double t13628 = 1.0/sqrt(t13610);
                double t13629 = Cinf*Fg*Pg_1*t13611*t13625*t13608*(7.0/6.0);
                double t13630 = t13629-Cinf*Fg*Pg_1*t13611*t13605*t13624*t13627;
                double t13631 = 1.0/pow(t13589,5.0/2.0);
                v_rho_a_gamma_ab_[index] = t13612*t13604*t13624*t13593*-2.0-t13612*t13604*t13607*1.0/pow(t13589,7.0/ \
                   3.0)*(8.0/3.0)+t13612*t13630*t13604*t13607*t13593*2.0+t13610*t13612*t13604*t13607*t13593*(Cinf*Fg* \
                   Pg_1*t13625*t13608*t13628*(7.0/6.0)-Cinf*Fg*Pg_1*t13605*t13624*t13627*t13628)+Cinf*Fg*Pg_1*t13611* \
                   t13612*t13604*1.0/pow(t13589,7.0/2.0)*(4.0/3.0)-Cinf*Fg*Pg_1*t13611*t13612*t13630*t13604*t13631+Cinf* \
                   Fg*Pg_1*t13611*t13612*t13604*t13631*t13624*t13608;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12497 = rho_a[index]+rho_b[index];
                double t12498 = c*c;
                double t12499 = 1.0/pow(t12497,2.0/3.0);
                double t12500 = 1.0/pow(t12497,1.0/3.0);
                double t12501 = 1.0/t12497;
                double t12502 = rho_a[index]-rho_b[index];
                double t12503 = 1.0/pow(t12497,4.0/3.0);
                double t12504 = Bg*c*t12501*t12498*1.0E4;
                double t12505 = Cg_4*t12498*t12499;
                double t12506 = Cg_3*c*t12500;
                double t12507 = t12504+t12505+t12506+1.0;
                double t12508 = 1.0/t12507;
                double t12509 = 1.0/pow(t12497,5.0/3.0);
                double t12510 = Bg*t12498*t12499;
                double t12511 = Cg_2*c*t12500;
                double t12512 = Cg_1+t12510+t12511;
                double t12513 = 1.0/two_13;
                double t12514 = 1.0/pow(t12497,7.0/6.0);
                double t12515 = t12512*t12508;
                double t12516 = Cx+t12515;
                double t12517 = 1.0/t12516;
                double t12518 = gamma_ab[index]*2.0;
                double t12519 = gamma_aa[index]+gamma_bb[index]+t12518;
                double t12520 = sqrt(t12519);
                double t12525 = Cinf*Fg*Pg_1*t12520*t12514*t12517;
                double t12521 = exp(-t12525);
                double t12522 = t12501*t12502*(1.0/2.0);
                double t12523 = t12522+1.0/2.0;
                double t12524 = pow(t12523,5.0/3.0);
                double t12526 = -t12522+1.0/2.0;
                double t12527 = pow(t12526,5.0/3.0);
                double t12528 = t12524+t12527;
                double t12529 = 1.0/sqrt(t12528);
                double t12530 = Bg*t12509*t12498*(2.0/3.0);
                double t12531 = Cg_2*c*t12503*(1.0/3.0);
                double t12532 = t12530+t12531;
                double t12533 = t12532*t12508;
                double t12534 = 1.0/(t12497*t12497);
                double t12535 = Bg*c*t12534*t12498*1.0E4;
                double t12536 = Cg_4*t12509*t12498*(2.0/3.0);
                double t12537 = Cg_3*c*t12503*(1.0/3.0);
                double t12538 = t12535+t12536+t12537;
                double t12539 = 1.0/(t12507*t12507);
                double t12544 = t12512*t12538*t12539;
                double t12540 = t12533-t12544;
                double t12541 = t12501*(1.0/2.0);
                double t12552 = t12502*t12534*(1.0/2.0);
                double t12542 = t12541-t12552;
                double t12543 = 1.0/pow(t12497,1.3E1/6.0);
                double t12545 = 1.0/(t12516*t12516);
                double t12546 = 1.0/sqrt(t12519);
                double t12547 = Cinf*Fg*Pg_1*t12520*t12543*t12517*(7.0/6.0);
                double t12548 = t12547-Cinf*Fg*Pg_1*t12520*t12540*t12514*t12545;
                double t12549 = 1.0/pow(t12528,3.0/2.0);
                double t12550 = 1.0/pow(t12497,5.0/2.0);
                double t12551 = pow(t12526,2.0/3.0);
                double t12553 = t12542*t12551*(5.0/3.0);
                double t12554 = pow(t12523,2.0/3.0);
                double t12555 = t12553-t12542*t12554*(5.0/3.0);
                v_rho_a_gamma_bb_[index] = t12521*t12513*t12516*t12529*1.0/pow(t12497,7.0/3.0)*(-4.0/3.0)-t12503* \
                   t12521*t12513*t12540*1.0/sqrt(t12524+pow(t12501*t12502*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t12503*t12521* \
                   t12513*t12516*t12555*t12549*(1.0/2.0)+t12503*t12521*t12513*t12516*t12529*t12548+t12503*t12521*t12513* \
                   t12516*t12519*t12529*(Cinf*Fg*Pg_1*t12543*t12517*t12546*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12540*t12514*t12545* \
                   t12546*(1.0/2.0))+Cinf*Fg*Pg_1*t12520*t12521*t12513*t12529*1.0/pow(t12497,7.0/2.0)*(2.0/3.0)-Cinf* \
                   Fg*Pg_1*t12520*t12521*t12513*t12550*t12555*t12549*(1.0/4.0)-Cinf*Fg*Pg_1*t12520*t12521*t12513*t12550* \
                   t12529*t12548*(1.0/2.0)+Cinf*Fg*Pg_1*t12520*t12521*t12513*t12540*t12550*t12517*t12529*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14680 = rho_a[index]+rho_b[index];
                double t14681 = c*c;
                double t14682 = 1.0/pow(t14680,2.0/3.0);
                double t14683 = 1.0/pow(t14680,1.0/3.0);
                double t14684 = 1.0/pow(t14680,4.0/3.0);
                double t14685 = 1.0/t14680;
                double t14686 = Bg*c*t14681*t14685*1.0E4;
                double t14687 = Cg_4*t14681*t14682;
                double t14688 = Cg_3*c*t14683;
                double t14689 = t14686+t14687+t14688+1.0;
                double t14690 = 1.0/t14689;
                double t14691 = 1.0/pow(t14680,5.0/3.0);
                double t14692 = Bg*t14681*t14682;
                double t14693 = Cg_2*c*t14683;
                double t14694 = Cg_1+t14692+t14693;
                double t14695 = 1.0/two_13;
                double t14696 = 1.0/pow(t14680,7.0/6.0);
                double t14697 = t14690*t14694;
                double t14698 = Cx+t14697;
                double t14699 = 1.0/t14698;
                double t14700 = gamma_ab[index]*2.0;
                double t14701 = gamma_aa[index]+gamma_bb[index]+t14700;
                double t14702 = sqrt(t14701);
                double t14704 = Cinf*Fg*Pg_1*t14702*t14696*t14699;
                double t14703 = exp(-t14704);
                double t14705 = Bg*t14681*t14691*(2.0/3.0);
                double t14706 = Cg_2*c*t14684*(1.0/3.0);
                double t14707 = t14705+t14706;
                double t14708 = t14707*t14690;
                double t14709 = 1.0/(t14680*t14680);
                double t14710 = Bg*c*t14681*t14709*1.0E4;
                double t14711 = Cg_4*t14681*t14691*(2.0/3.0);
                double t14712 = Cg_3*c*t14684*(1.0/3.0);
                double t14713 = t14710+t14711+t14712;
                double t14714 = 1.0/(t14689*t14689);
                double t14717 = t14713*t14714*t14694;
                double t14715 = t14708-t14717;
                double t14716 = 1.0/pow(t14680,1.3E1/6.0);
                double t14718 = 1.0/(t14698*t14698);
                double t14719 = 1.0/sqrt(t14701);
                double t14720 = Cinf*Fg*Pg_1*t14702*t14716*t14699*(7.0/6.0);
                double t14721 = t14720-Cinf*Fg*Pg_1*t14702*t14715*t14718*t14696;
                double t14722 = 1.0/pow(t14680,5.0/2.0);
                v_rho_a_gamma_bb_[index] = -t14703*t14715*t14684*t14695-t14703*1.0/pow(t14680,7.0/3.0)*t14695*t14698* \
                   (4.0/3.0)+t14703*t14721*t14684*t14695*t14698+t14701*t14703*t14684*t14695*t14698*(Cinf*Fg*Pg_1*t14716* \
                   t14719*t14699*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14715*t14718*t14719*t14696*(1.0/2.0))+Cinf*Fg*Pg_1*t14702* \
                   t14703*1.0/pow(t14680,7.0/2.0)*t14695*(2.0/3.0)-Cinf*Fg*Pg_1*t14702*t14703*t14721*t14722*t14695*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t14702*t14703*t14722*t14715*t14695*t14699*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13633 = rho_a[index]+rho_b[index];
                double t13634 = c*c;
                double t13635 = 1.0/pow(t13633,2.0/3.0);
                double t13636 = 1.0/pow(t13633,1.0/3.0);
                double t13637 = 1.0/pow(t13633,4.0/3.0);
                double t13638 = 1.0/t13633;
                double t13639 = Bg*c*t13634*t13638*1.0E4;
                double t13640 = Cg_4*t13634*t13635;
                double t13641 = Cg_3*c*t13636;
                double t13642 = t13640+t13641+t13639+1.0;
                double t13643 = 1.0/t13642;
                double t13644 = 1.0/pow(t13633,5.0/3.0);
                double t13645 = Bg*t13634*t13635;
                double t13646 = Cg_2*c*t13636;
                double t13647 = Cg_1+t13645+t13646;
                double t13648 = 1.0/two_13;
                double t13649 = 1.0/pow(t13633,7.0/6.0);
                double t13650 = t13643*t13647;
                double t13651 = Cx+t13650;
                double t13652 = 1.0/t13651;
                double t13653 = gamma_ab[index]*2.0;
                double t13654 = gamma_aa[index]+gamma_bb[index]+t13653;
                double t13655 = sqrt(t13654);
                double t13657 = Cinf*Fg*Pg_1*t13652*t13655*t13649;
                double t13656 = exp(-t13657);
                double t13658 = Bg*t13634*t13644*(2.0/3.0);
                double t13659 = Cg_2*c*t13637*(1.0/3.0);
                double t13660 = t13658+t13659;
                double t13661 = t13660*t13643;
                double t13662 = 1.0/(t13633*t13633);
                double t13663 = Bg*c*t13634*t13662*1.0E4;
                double t13664 = Cg_4*t13634*t13644*(2.0/3.0);
                double t13665 = Cg_3*c*t13637*(1.0/3.0);
                double t13666 = t13663+t13664+t13665;
                double t13667 = 1.0/(t13642*t13642);
                double t13670 = t13647*t13666*t13667;
                double t13668 = t13661-t13670;
                double t13669 = 1.0/pow(t13633,1.3E1/6.0);
                double t13671 = 1.0/(t13651*t13651);
                double t13672 = 1.0/sqrt(t13654);
                double t13673 = Cinf*Fg*Pg_1*t13652*t13655*t13669*(7.0/6.0);
                double t13674 = t13673-Cinf*Fg*Pg_1*t13671*t13655*t13649*t13668;
                double t13675 = 1.0/pow(t13633,5.0/2.0);
                v_rho_a_gamma_bb_[index] = -t13637*t13656*t13648*t13668-1.0/pow(t13633,7.0/3.0)*t13651*t13656*t13648* \
                   (4.0/3.0)+t13651*t13637*t13656*t13674*t13648+t13651*t13654*t13637*t13656*t13648*(Cinf*Fg*Pg_1*t13652* \
                   t13672*t13669*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13671*t13672*t13649*t13668*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t13633,7.0/ \
                   2.0)*t13655*t13656*t13648*(2.0/3.0)-Cinf*Fg*Pg_1*t13655*t13656*t13674*t13648*t13675*(1.0/2.0)+Cinf* \
                   Fg*Pg_1*t13652*t13655*t13656*t13648*t13675*t13668*(1.0/2.0);
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12557 = rho_a[index]+rho_b[index];
                double t12558 = c*c;
                double t12559 = 1.0/pow(t12557,2.0/3.0);
                double t12560 = 1.0/pow(t12557,1.0/3.0);
                double t12561 = 1.0/t12557;
                double t12562 = rho_a[index]-rho_b[index];
                double t12563 = 1.0/pow(t12557,4.0/3.0);
                double t12564 = Bg*c*t12561*t12558*1.0E4;
                double t12565 = Cg_4*t12558*t12559;
                double t12566 = Cg_3*c*t12560;
                double t12567 = t12564+t12565+t12566+1.0;
                double t12568 = 1.0/t12567;
                double t12569 = 1.0/pow(t12557,5.0/3.0);
                double t12570 = Bg*t12558*t12559;
                double t12571 = Cg_2*c*t12560;
                double t12572 = Cg_1+t12570+t12571;
                double t12573 = 1.0/two_13;
                double t12574 = 1.0/pow(t12557,7.0/6.0);
                double t12575 = t12572*t12568;
                double t12576 = Cx+t12575;
                double t12577 = 1.0/t12576;
                double t12578 = gamma_ab[index]*2.0;
                double t12579 = gamma_aa[index]+gamma_bb[index]+t12578;
                double t12580 = sqrt(t12579);
                double t12585 = Cinf*Fg*Pg_1*t12580*t12574*t12577;
                double t12581 = exp(-t12585);
                double t12582 = t12561*t12562*(1.0/2.0);
                double t12583 = t12582+1.0/2.0;
                double t12584 = pow(t12583,5.0/3.0);
                double t12586 = -t12582+1.0/2.0;
                double t12587 = pow(t12586,5.0/3.0);
                double t12588 = t12584+t12587;
                double t12589 = 1.0/sqrt(t12588);
                double t12590 = Bg*t12558*t12569*(2.0/3.0);
                double t12591 = Cg_2*c*t12563*(1.0/3.0);
                double t12592 = t12590+t12591;
                double t12593 = t12592*t12568;
                double t12594 = 1.0/(t12557*t12557);
                double t12595 = Bg*c*t12558*t12594*1.0E4;
                double t12596 = Cg_4*t12558*t12569*(2.0/3.0);
                double t12597 = Cg_3*c*t12563*(1.0/3.0);
                double t12598 = t12595+t12596+t12597;
                double t12599 = 1.0/(t12567*t12567);
                double t12605 = t12572*t12598*t12599;
                double t12600 = -t12605+t12593;
                double t12601 = t12561*(1.0/2.0);
                double t12602 = t12562*t12594*(1.0/2.0);
                double t12603 = t12601+t12602;
                double t12604 = 1.0/pow(t12557,1.3E1/6.0);
                double t12606 = 1.0/(t12576*t12576);
                double t12607 = 1.0/sqrt(t12579);
                double t12608 = Cinf*Fg*Pg_1*t12604*t12580*t12577*(7.0/6.0);
                double t12609 = t12608-Cinf*Fg*Pg_1*t12600*t12606*t12580*t12574;
                double t12610 = 1.0/pow(t12588,3.0/2.0);
                double t12611 = 1.0/pow(t12557,5.0/2.0);
                double t12612 = pow(t12586,2.0/3.0);
                double t12613 = t12603*t12612*(5.0/3.0);
                double t12614 = pow(t12583,2.0/3.0);
                double t12615 = t12613-t12603*t12614*(5.0/3.0);
                v_rho_b_gamma_aa_[index] = t12581*t12573*1.0/pow(t12557,7.0/3.0)*t12576*t12589*(-4.0/3.0)-t12600* \
                   t12563*t12581*t12573*1.0/sqrt(t12584+pow(t12561*t12562*(-1.0/2.0)+1.0/2.0,5.0/3.0))-t12610*t12615* \
                   t12563*t12581*t12573*t12576*(1.0/2.0)+t12563*t12581*t12573*t12609*t12576*t12589+t12563*t12581*t12573* \
                   t12576*t12579*t12589*(Cinf*Fg*Pg_1*t12604*t12607*t12577*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12600*t12606*t12607* \
                   t12574*(1.0/2.0))+Cinf*Fg*Pg_1*t12580*t12581*t12573*1.0/pow(t12557,7.0/2.0)*t12589*(2.0/3.0)+Cinf* \
                   Fg*Pg_1*t12610*t12611*t12615*t12580*t12581*t12573*(1.0/4.0)-Cinf*Fg*Pg_1*t12611*t12580*t12581*t12573* \
                   t12609*t12589*(1.0/2.0)+Cinf*Fg*Pg_1*t12600*t12611*t12580*t12581*t12573*t12577*t12589*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14724 = rho_a[index]+rho_b[index];
                double t14725 = c*c;
                double t14726 = 1.0/pow(t14724,2.0/3.0);
                double t14727 = 1.0/pow(t14724,1.0/3.0);
                double t14728 = 1.0/pow(t14724,4.0/3.0);
                double t14729 = 1.0/t14724;
                double t14730 = Bg*c*t14725*t14729*1.0E4;
                double t14731 = Cg_4*t14725*t14726;
                double t14732 = Cg_3*c*t14727;
                double t14733 = t14730+t14731+t14732+1.0;
                double t14734 = 1.0/t14733;
                double t14735 = 1.0/pow(t14724,5.0/3.0);
                double t14736 = Bg*t14725*t14726;
                double t14737 = Cg_2*c*t14727;
                double t14738 = Cg_1+t14736+t14737;
                double t14739 = 1.0/two_13;
                double t14740 = 1.0/pow(t14724,7.0/6.0);
                double t14741 = t14734*t14738;
                double t14742 = Cx+t14741;
                double t14743 = 1.0/t14742;
                double t14744 = gamma_ab[index]*2.0;
                double t14745 = gamma_aa[index]+gamma_bb[index]+t14744;
                double t14746 = sqrt(t14745);
                double t14748 = Cinf*Fg*Pg_1*t14740*t14743*t14746;
                double t14747 = exp(-t14748);
                double t14749 = Bg*t14725*t14735*(2.0/3.0);
                double t14750 = Cg_2*c*t14728*(1.0/3.0);
                double t14751 = t14750+t14749;
                double t14752 = t14751*t14734;
                double t14753 = 1.0/(t14724*t14724);
                double t14754 = Bg*c*t14725*t14753*1.0E4;
                double t14755 = Cg_4*t14725*t14735*(2.0/3.0);
                double t14756 = Cg_3*c*t14728*(1.0/3.0);
                double t14757 = t14754+t14755+t14756;
                double t14758 = 1.0/(t14733*t14733);
                double t14761 = t14738*t14757*t14758;
                double t14759 = t14752-t14761;
                double t14760 = 1.0/pow(t14724,1.3E1/6.0);
                double t14762 = 1.0/(t14742*t14742);
                double t14763 = 1.0/sqrt(t14745);
                double t14764 = Cinf*Fg*Pg_1*t14760*t14743*t14746*(7.0/6.0);
                double t14765 = t14764-Cinf*Fg*Pg_1*t14740*t14762*t14746*t14759;
                double t14766 = 1.0/pow(t14724,5.0/2.0);
                v_rho_b_gamma_aa_[index] = -t14728*t14747*t14739*t14759-1.0/pow(t14724,7.0/3.0)*t14742*t14747*t14739* \
                   (4.0/3.0)+t14742*t14728*t14747*t14765*t14739+t14742*t14745*t14728*t14747*t14739*(Cinf*Fg*Pg_1*t14760* \
                   t14743*t14763*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14740*t14762*t14763*t14759*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t14724,7.0/ \
                   2.0)*t14746*t14747*t14739*(2.0/3.0)-Cinf*Fg*Pg_1*t14746*t14747*t14765*t14739*t14766*(1.0/2.0)+Cinf* \
                   Fg*Pg_1*t14743*t14746*t14747*t14739*t14766*t14759*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13677 = rho_a[index]+rho_b[index];
                double t13678 = c*c;
                double t13679 = 1.0/pow(t13677,2.0/3.0);
                double t13680 = 1.0/pow(t13677,1.0/3.0);
                double t13681 = 1.0/pow(t13677,4.0/3.0);
                double t13682 = 1.0/t13677;
                double t13683 = Bg*c*t13682*t13678*1.0E4;
                double t13684 = Cg_4*t13678*t13679;
                double t13685 = Cg_3*c*t13680;
                double t13686 = t13683+t13684+t13685+1.0;
                double t13687 = 1.0/t13686;
                double t13688 = 1.0/pow(t13677,5.0/3.0);
                double t13689 = Bg*t13678*t13679;
                double t13690 = Cg_2*c*t13680;
                double t13691 = Cg_1+t13690+t13689;
                double t13692 = 1.0/two_13;
                double t13693 = 1.0/pow(t13677,7.0/6.0);
                double t13694 = t13691*t13687;
                double t13695 = Cx+t13694;
                double t13696 = 1.0/t13695;
                double t13697 = gamma_ab[index]*2.0;
                double t13698 = gamma_aa[index]+gamma_bb[index]+t13697;
                double t13699 = sqrt(t13698);
                double t13701 = Cinf*Fg*Pg_1*t13693*t13696*t13699;
                double t13700 = exp(-t13701);
                double t13702 = Bg*t13678*t13688*(2.0/3.0);
                double t13703 = Cg_2*c*t13681*(1.0/3.0);
                double t13704 = t13702+t13703;
                double t13705 = t13704*t13687;
                double t13706 = 1.0/(t13677*t13677);
                double t13707 = Bg*c*t13706*t13678*1.0E4;
                double t13708 = Cg_4*t13678*t13688*(2.0/3.0);
                double t13709 = Cg_3*c*t13681*(1.0/3.0);
                double t13710 = t13707+t13708+t13709;
                double t13711 = 1.0/(t13686*t13686);
                double t13714 = t13710*t13711*t13691;
                double t13712 = t13705-t13714;
                double t13713 = 1.0/pow(t13677,1.3E1/6.0);
                double t13715 = 1.0/(t13695*t13695);
                double t13716 = 1.0/sqrt(t13698);
                double t13717 = Cinf*Fg*Pg_1*t13713*t13696*t13699*(7.0/6.0);
                double t13718 = t13717-Cinf*Fg*Pg_1*t13712*t13715*t13693*t13699;
                double t13719 = 1.0/pow(t13677,5.0/2.0);
                v_rho_b_gamma_aa_[index] = -t13700*t13712*t13681*t13692-t13700*t13692*1.0/pow(t13677,7.0/3.0)*t13695* \
                   (4.0/3.0)+t13700*t13681*t13718*t13692*t13695+t13700*t13681*t13692*t13695*t13698*(Cinf*Fg*Pg_1*t13713* \
                   t13716*t13696*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13712*t13715*t13716*t13693*(1.0/2.0))+Cinf*Fg*Pg_1*t13700* \
                   t13692*1.0/pow(t13677,7.0/2.0)*t13699*(2.0/3.0)-Cinf*Fg*Pg_1*t13700*t13718*t13692*t13719*t13699*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t13700*t13712*t13692*t13719*t13696*t13699*(1.0/2.0);
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12617 = rho_a[index]+rho_b[index];
                double t12618 = c*c;
                double t12619 = 1.0/pow(t12617,2.0/3.0);
                double t12620 = 1.0/pow(t12617,1.0/3.0);
                double t12621 = 1.0/t12617;
                double t12622 = rho_a[index]-rho_b[index];
                double t12623 = 1.0/pow(t12617,4.0/3.0);
                double t12624 = Bg*c*t12621*t12618*1.0E4;
                double t12625 = Cg_4*t12618*t12619;
                double t12626 = Cg_3*c*t12620;
                double t12627 = t12624+t12625+t12626+1.0;
                double t12628 = 1.0/t12627;
                double t12629 = 1.0/pow(t12617,5.0/3.0);
                double t12630 = Bg*t12618*t12619;
                double t12631 = Cg_2*c*t12620;
                double t12632 = Cg_1+t12630+t12631;
                double t12633 = 1.0/two_13;
                double t12634 = 1.0/pow(t12617,7.0/6.0);
                double t12635 = t12632*t12628;
                double t12636 = Cx+t12635;
                double t12637 = 1.0/t12636;
                double t12638 = gamma_ab[index]*2.0;
                double t12639 = gamma_aa[index]+gamma_bb[index]+t12638;
                double t12640 = sqrt(t12639);
                double t12645 = Cinf*Fg*Pg_1*t12640*t12634*t12637;
                double t12641 = exp(-t12645);
                double t12642 = t12621*t12622*(1.0/2.0);
                double t12643 = t12642+1.0/2.0;
                double t12644 = pow(t12643,5.0/3.0);
                double t12646 = -t12642+1.0/2.0;
                double t12647 = pow(t12646,5.0/3.0);
                double t12648 = t12644+t12647;
                double t12649 = 1.0/sqrt(t12648);
                double t12650 = Bg*t12618*t12629*(2.0/3.0);
                double t12651 = Cg_2*c*t12623*(1.0/3.0);
                double t12652 = t12650+t12651;
                double t12653 = t12652*t12628;
                double t12654 = 1.0/(t12617*t12617);
                double t12655 = Bg*c*t12618*t12654*1.0E4;
                double t12656 = Cg_4*t12618*t12629*(2.0/3.0);
                double t12657 = Cg_3*c*t12623*(1.0/3.0);
                double t12658 = t12655+t12656+t12657;
                double t12659 = 1.0/(t12627*t12627);
                double t12665 = t12632*t12658*t12659;
                double t12660 = t12653-t12665;
                double t12661 = t12621*(1.0/2.0);
                double t12662 = t12622*t12654*(1.0/2.0);
                double t12663 = t12661+t12662;
                double t12664 = 1.0/pow(t12617,1.3E1/6.0);
                double t12666 = 1.0/(t12636*t12636);
                double t12667 = 1.0/sqrt(t12639);
                double t12668 = Cinf*Fg*Pg_1*t12640*t12637*t12664*(7.0/6.0);
                double t12669 = t12668-Cinf*Fg*Pg_1*t12640*t12660*t12634*t12666;
                double t12670 = 1.0/pow(t12648,3.0/2.0);
                double t12671 = 1.0/pow(t12617,5.0/2.0);
                double t12672 = pow(t12646,2.0/3.0);
                double t12673 = t12663*t12672*(5.0/3.0);
                double t12674 = pow(t12643,2.0/3.0);
                double t12675 = t12673-t12663*t12674*(5.0/3.0);
                v_rho_b_gamma_ab_[index] = t12641*t12633*1.0/pow(t12617,7.0/3.0)*t12636*t12649*(-8.0/3.0)-t12623* \
                   t12641*t12633*t12660*1.0/sqrt(t12644+pow(t12621*t12622*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0-t12623*t12641* \
                   t12633*t12670*t12636*t12675+t12623*t12641*t12633*t12636*t12649*t12669*2.0+t12623*t12641*t12633*t12636* \
                   t12639*t12649*(Cinf*Fg*Pg_1*t12637*t12664*t12667*(7.0/6.0)-Cinf*Fg*Pg_1*t12660*t12634*t12666*t12667) \
                   +Cinf*Fg*Pg_1*t12640*t12641*t12633*1.0/pow(t12617,7.0/2.0)*t12649*(4.0/3.0)+Cinf*Fg*Pg_1*t12640*t12641* \
                   t12633*t12670*t12671*t12675*(1.0/2.0)-Cinf*Fg*Pg_1*t12640*t12641*t12633*t12671*t12649*t12669+Cinf* \
                   Fg*Pg_1*t12640*t12641*t12633*t12660*t12671*t12637*t12649;
            } else if (rho_a[index] > cutoff_) {
                double t14768 = rho_a[index]+rho_b[index];
                double t14769 = c*c;
                double t14770 = 1.0/pow(t14768,2.0/3.0);
                double t14771 = 1.0/pow(t14768,1.0/3.0);
                double t14772 = 1.0/pow(t14768,4.0/3.0);
                double t14773 = 1.0/t14768;
                double t14774 = Bg*c*t14773*t14769*1.0E4;
                double t14775 = Cg_4*t14770*t14769;
                double t14776 = Cg_3*c*t14771;
                double t14777 = t14774+t14775+t14776+1.0;
                double t14778 = 1.0/t14777;
                double t14779 = 1.0/pow(t14768,5.0/3.0);
                double t14780 = Bg*t14770*t14769;
                double t14781 = Cg_2*c*t14771;
                double t14782 = Cg_1+t14780+t14781;
                double t14783 = 1.0/two_13;
                double t14784 = 1.0/pow(t14768,7.0/6.0);
                double t14785 = t14782*t14778;
                double t14786 = Cx+t14785;
                double t14787 = 1.0/t14786;
                double t14788 = gamma_ab[index]*2.0;
                double t14789 = gamma_aa[index]+gamma_bb[index]+t14788;
                double t14790 = sqrt(t14789);
                double t14792 = Cinf*Fg*Pg_1*t14790*t14784*t14787;
                double t14791 = exp(-t14792);
                double t14793 = Bg*t14769*t14779*(2.0/3.0);
                double t14794 = Cg_2*c*t14772*(1.0/3.0);
                double t14795 = t14793+t14794;
                double t14796 = t14795*t14778;
                double t14797 = 1.0/(t14768*t14768);
                double t14798 = Bg*c*t14769*t14797*1.0E4;
                double t14799 = Cg_4*t14769*t14779*(2.0/3.0);
                double t14800 = Cg_3*c*t14772*(1.0/3.0);
                double t14801 = t14800+t14798+t14799;
                double t14802 = 1.0/(t14777*t14777);
                double t14805 = t14801*t14802*t14782;
                double t14803 = -t14805+t14796;
                double t14804 = 1.0/pow(t14768,1.3E1/6.0);
                double t14806 = 1.0/(t14786*t14786);
                double t14807 = 1.0/sqrt(t14789);
                double t14808 = Cinf*Fg*Pg_1*t14804*t14790*t14787*(7.0/6.0);
                double t14809 = t14808-Cinf*Fg*Pg_1*t14803*t14806*t14790*t14784;
                double t14810 = 1.0/pow(t14768,5.0/2.0);
                v_rho_b_gamma_ab_[index] = t14803*t14772*t14791*t14783*-2.0-t14791*t14783*1.0/pow(t14768,7.0/3.0) \
                   *t14786*(8.0/3.0)+t14772*t14791*t14809*t14783*t14786*2.0+t14772*t14791*t14783*t14786*t14789*(Cinf* \
                   Fg*Pg_1*t14804*t14807*t14787*(7.0/6.0)-Cinf*Fg*Pg_1*t14803*t14806*t14807*t14784)+Cinf*Fg*Pg_1*t14790* \
                   t14791*t14783*1.0/pow(t14768,7.0/2.0)*(4.0/3.0)-Cinf*Fg*Pg_1*t14810*t14790*t14791*t14809*t14783+Cinf* \
                   Fg*Pg_1*t14810*t14803*t14790*t14791*t14783*t14787;
            } else if (rho_b[index] > cutoff_) {
                double t13721 = rho_a[index]+rho_b[index];
                double t13722 = c*c;
                double t13723 = 1.0/pow(t13721,2.0/3.0);
                double t13724 = 1.0/pow(t13721,1.0/3.0);
                double t13725 = 1.0/pow(t13721,4.0/3.0);
                double t13726 = 1.0/t13721;
                double t13727 = Bg*c*t13722*t13726*1.0E4;
                double t13728 = Cg_4*t13722*t13723;
                double t13729 = Cg_3*c*t13724;
                double t13730 = t13727+t13728+t13729+1.0;
                double t13731 = 1.0/t13730;
                double t13732 = 1.0/pow(t13721,5.0/3.0);
                double t13733 = Bg*t13722*t13723;
                double t13734 = Cg_2*c*t13724;
                double t13735 = Cg_1+t13733+t13734;
                double t13736 = 1.0/two_13;
                double t13737 = 1.0/pow(t13721,7.0/6.0);
                double t13738 = t13731*t13735;
                double t13739 = Cx+t13738;
                double t13740 = 1.0/t13739;
                double t13741 = gamma_ab[index]*2.0;
                double t13742 = gamma_aa[index]+gamma_bb[index]+t13741;
                double t13743 = sqrt(t13742);
                double t13745 = Cinf*Fg*Pg_1*t13740*t13743*t13737;
                double t13744 = exp(-t13745);
                double t13746 = Bg*t13722*t13732*(2.0/3.0);
                double t13747 = Cg_2*c*t13725*(1.0/3.0);
                double t13748 = t13746+t13747;
                double t13749 = t13731*t13748;
                double t13750 = 1.0/(t13721*t13721);
                double t13751 = Bg*c*t13722*t13750*1.0E4;
                double t13752 = Cg_4*t13722*t13732*(2.0/3.0);
                double t13753 = Cg_3*c*t13725*(1.0/3.0);
                double t13754 = t13751+t13752+t13753;
                double t13755 = 1.0/(t13730*t13730);
                double t13758 = t13735*t13754*t13755;
                double t13756 = t13749-t13758;
                double t13757 = 1.0/pow(t13721,1.3E1/6.0);
                double t13759 = 1.0/(t13739*t13739);
                double t13760 = 1.0/sqrt(t13742);
                double t13761 = Cinf*Fg*Pg_1*t13740*t13743*t13757*(7.0/6.0);
                double t13762 = t13761-Cinf*Fg*Pg_1*t13743*t13737*t13756*t13759;
                double t13763 = 1.0/pow(t13721,5.0/2.0);
                v_rho_b_gamma_ab_[index] = t13725*t13744*t13736*t13756*-2.0-1.0/pow(t13721,7.0/3.0)*t13744*t13736* \
                   t13739*(8.0/3.0)+t13725*t13744*t13762*t13736*t13739*2.0+t13742*t13725*t13744*t13736*t13739*(Cinf*Fg* \
                   Pg_1*t13740*t13760*t13757*(7.0/6.0)-Cinf*Fg*Pg_1*t13760*t13737*t13756*t13759)+Cinf*Fg*Pg_1*1.0/pow(t13721,7.0/ \
                   2.0)*t13743*t13744*t13736*(4.0/3.0)-Cinf*Fg*Pg_1*t13743*t13744*t13762*t13736*t13763+Cinf*Fg*Pg_1*t13740* \
                   t13743*t13744*t13736*t13763*t13756;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12677 = rho_a[index]+rho_b[index];
                double t12678 = c*c;
                double t12679 = 1.0/pow(t12677,2.0/3.0);
                double t12680 = 1.0/pow(t12677,1.0/3.0);
                double t12681 = 1.0/t12677;
                double t12682 = rho_a[index]-rho_b[index];
                double t12683 = 1.0/pow(t12677,4.0/3.0);
                double t12684 = Bg*c*t12681*t12678*1.0E4;
                double t12685 = Cg_4*t12678*t12679;
                double t12686 = Cg_3*c*t12680;
                double t12687 = t12684+t12685+t12686+1.0;
                double t12688 = 1.0/t12687;
                double t12689 = 1.0/pow(t12677,5.0/3.0);
                double t12690 = Bg*t12678*t12679;
                double t12691 = Cg_2*c*t12680;
                double t12692 = Cg_1+t12690+t12691;
                double t12693 = 1.0/two_13;
                double t12694 = 1.0/pow(t12677,7.0/6.0);
                double t12695 = t12692*t12688;
                double t12696 = Cx+t12695;
                double t12697 = 1.0/t12696;
                double t12698 = gamma_ab[index]*2.0;
                double t12699 = gamma_aa[index]+gamma_bb[index]+t12698;
                double t12700 = sqrt(t12699);
                double t12705 = Cinf*Fg*Pg_1*t12700*t12694*t12697;
                double t12701 = exp(-t12705);
                double t12702 = t12681*t12682*(1.0/2.0);
                double t12703 = t12702+1.0/2.0;
                double t12704 = pow(t12703,5.0/3.0);
                double t12706 = -t12702+1.0/2.0;
                double t12707 = pow(t12706,5.0/3.0);
                double t12708 = t12704+t12707;
                double t12709 = 1.0/sqrt(t12708);
                double t12710 = Bg*t12678*t12689*(2.0/3.0);
                double t12711 = Cg_2*c*t12683*(1.0/3.0);
                double t12712 = t12710+t12711;
                double t12713 = t12712*t12688;
                double t12714 = 1.0/(t12677*t12677);
                double t12715 = Bg*c*t12714*t12678*1.0E4;
                double t12716 = Cg_4*t12678*t12689*(2.0/3.0);
                double t12717 = Cg_3*c*t12683*(1.0/3.0);
                double t12718 = t12715+t12716+t12717;
                double t12719 = 1.0/(t12687*t12687);
                double t12725 = t12718*t12692*t12719;
                double t12720 = t12713-t12725;
                double t12721 = t12681*(1.0/2.0);
                double t12722 = t12714*t12682*(1.0/2.0);
                double t12723 = t12721+t12722;
                double t12724 = 1.0/pow(t12677,1.3E1/6.0);
                double t12726 = 1.0/(t12696*t12696);
                double t12727 = 1.0/sqrt(t12699);
                double t12728 = Cinf*Fg*Pg_1*t12700*t12724*t12697*(7.0/6.0);
                double t12729 = t12728-Cinf*Fg*Pg_1*t12700*t12720*t12726*t12694;
                double t12730 = 1.0/pow(t12708,3.0/2.0);
                double t12731 = 1.0/pow(t12677,5.0/2.0);
                double t12732 = pow(t12706,2.0/3.0);
                double t12733 = t12723*t12732*(5.0/3.0);
                double t12734 = pow(t12703,2.0/3.0);
                double t12735 = t12733-t12723*t12734*(5.0/3.0);
                v_rho_b_gamma_bb_[index] = t12701*t12709*t12693*1.0/pow(t12677,7.0/3.0)*t12696*(-4.0/3.0)-t12701* \
                   t12720*t12683*t12693*1.0/sqrt(t12704+pow(t12681*t12682*(-1.0/2.0)+1.0/2.0,5.0/3.0))-t12701*t12730* \
                   t12735*t12683*t12693*t12696*(1.0/2.0)+t12701*t12709*t12683*t12693*t12729*t12696+t12701*t12709*t12683* \
                   t12693*t12696*t12699*(Cinf*Fg*Pg_1*t12724*t12727*t12697*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12720*t12726*t12727* \
                   t12694*(1.0/2.0))+Cinf*Fg*Pg_1*t12700*t12701*t12709*t12693*1.0/pow(t12677,7.0/2.0)*(2.0/3.0)+Cinf* \
                   Fg*Pg_1*t12700*t12701*t12730*t12731*t12735*t12693*(1.0/4.0)-Cinf*Fg*Pg_1*t12700*t12701*t12731*t12709* \
                   t12693*t12729*(1.0/2.0)+Cinf*Fg*Pg_1*t12700*t12701*t12720*t12731*t12709*t12693*t12697*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14812 = rho_a[index]+rho_b[index];
                double t14813 = c*c;
                double t14814 = 1.0/pow(t14812,2.0/3.0);
                double t14815 = 1.0/pow(t14812,1.0/3.0);
                double t14816 = 1.0/pow(t14812,4.0/3.0);
                double t14817 = 1.0/t14812;
                double t14818 = Bg*c*t14813*t14817*1.0E4;
                double t14819 = Cg_4*t14813*t14814;
                double t14820 = Cg_3*c*t14815;
                double t14821 = t14820+t14818+t14819+1.0;
                double t14822 = 1.0/t14821;
                double t14823 = 1.0/pow(t14812,5.0/3.0);
                double t14824 = Bg*t14813*t14814;
                double t14825 = Cg_2*c*t14815;
                double t14826 = Cg_1+t14824+t14825;
                double t14827 = 1.0/two_13;
                double t14828 = 1.0/pow(t14812,7.0/6.0);
                double t14829 = t14822*t14826;
                double t14830 = Cx+t14829;
                double t14831 = 1.0/t14830;
                double t14832 = gamma_ab[index]*2.0;
                double t14833 = gamma_aa[index]+gamma_bb[index]+t14832;
                double t14834 = sqrt(t14833);
                double t14836 = Cinf*Fg*Pg_1*t14831*t14834*t14828;
                double t14835 = exp(-t14836);
                double t14837 = Bg*t14813*t14823*(2.0/3.0);
                double t14838 = Cg_2*c*t14816*(1.0/3.0);
                double t14839 = t14837+t14838;
                double t14840 = t14822*t14839;
                double t14841 = 1.0/(t14812*t14812);
                double t14842 = Bg*c*t14813*t14841*1.0E4;
                double t14843 = Cg_4*t14813*t14823*(2.0/3.0);
                double t14844 = Cg_3*c*t14816*(1.0/3.0);
                double t14845 = t14842+t14843+t14844;
                double t14846 = 1.0/(t14821*t14821);
                double t14849 = t14826*t14845*t14846;
                double t14847 = t14840-t14849;
                double t14848 = 1.0/pow(t14812,1.3E1/6.0);
                double t14850 = 1.0/(t14830*t14830);
                double t14851 = 1.0/sqrt(t14833);
                double t14852 = Cinf*Fg*Pg_1*t14831*t14834*t14848*(7.0/6.0);
                double t14853 = t14852-Cinf*Fg*Pg_1*t14850*t14834*t14828*t14847;
                double t14854 = 1.0/pow(t14812,5.0/2.0);
                v_rho_b_gamma_bb_[index] = -t14816*t14835*t14827*t14847-1.0/pow(t14812,7.0/3.0)*t14830*t14835*t14827* \
                   (4.0/3.0)+t14830*t14816*t14835*t14853*t14827+t14830*t14833*t14816*t14835*t14827*(Cinf*Fg*Pg_1*t14831* \
                   t14851*t14848*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14850*t14851*t14828*t14847*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t14812,7.0/ \
                   2.0)*t14834*t14835*t14827*(2.0/3.0)-Cinf*Fg*Pg_1*t14834*t14835*t14853*t14827*t14854*(1.0/2.0)+Cinf* \
                   Fg*Pg_1*t14831*t14834*t14835*t14827*t14854*t14847*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13765 = rho_a[index]+rho_b[index];
                double t13766 = c*c;
                double t13767 = 1.0/pow(t13765,2.0/3.0);
                double t13768 = 1.0/pow(t13765,1.0/3.0);
                double t13769 = 1.0/pow(t13765,4.0/3.0);
                double t13770 = 1.0/t13765;
                double t13771 = Bg*c*t13770*t13766*1.0E4;
                double t13772 = Cg_4*t13766*t13767;
                double t13773 = Cg_3*c*t13768;
                double t13774 = t13771+t13772+t13773+1.0;
                double t13775 = 1.0/t13774;
                double t13776 = 1.0/pow(t13765,5.0/3.0);
                double t13777 = Bg*t13766*t13767;
                double t13778 = Cg_2*c*t13768;
                double t13779 = Cg_1+t13777+t13778;
                double t13780 = 1.0/two_13;
                double t13781 = 1.0/pow(t13765,7.0/6.0);
                double t13782 = t13775*t13779;
                double t13783 = Cx+t13782;
                double t13784 = 1.0/t13783;
                double t13785 = gamma_ab[index]*2.0;
                double t13786 = gamma_aa[index]+gamma_bb[index]+t13785;
                double t13787 = sqrt(t13786);
                double t13789 = Cinf*Fg*Pg_1*t13781*t13784*t13787;
                double t13788 = exp(-t13789);
                double t13790 = Bg*t13766*t13776*(2.0/3.0);
                double t13791 = Cg_2*c*t13769*(1.0/3.0);
                double t13792 = t13790+t13791;
                double t13793 = t13792*t13775;
                double t13794 = 1.0/(t13765*t13765);
                double t13795 = Bg*c*t13766*t13794*1.0E4;
                double t13796 = Cg_4*t13766*t13776*(2.0/3.0);
                double t13797 = Cg_3*c*t13769*(1.0/3.0);
                double t13798 = t13795+t13796+t13797;
                double t13799 = 1.0/(t13774*t13774);
                double t13802 = t13779*t13798*t13799;
                double t13800 = -t13802+t13793;
                double t13801 = 1.0/pow(t13765,1.3E1/6.0);
                double t13803 = 1.0/(t13783*t13783);
                double t13804 = 1.0/sqrt(t13786);
                double t13805 = Cinf*Fg*Pg_1*t13801*t13784*t13787*(7.0/6.0);
                double t13806 = t13805-Cinf*Fg*Pg_1*t13800*t13803*t13781*t13787;
                double t13807 = 1.0/pow(t13765,5.0/2.0);
                v_rho_b_gamma_bb_[index] = -t13800*t13780*t13769*t13788-t13780*1.0/pow(t13765,7.0/3.0)*t13783*t13788* \
                   (4.0/3.0)+t13806*t13780*t13783*t13769*t13788+t13780*t13783*t13786*t13769*t13788*(Cinf*Fg*Pg_1*t13801* \
                   t13804*t13784*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13800*t13803*t13804*t13781*(1.0/2.0))+Cinf*Fg*Pg_1*t13780* \
                   1.0/pow(t13765,7.0/2.0)*t13787*t13788*(2.0/3.0)-Cinf*Fg*Pg_1*t13806*t13780*t13807*t13787*t13788*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t13800*t13780*t13807*t13784*t13787*t13788*(1.0/2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12737 = rho_a[index]+rho_b[index];
                double t12738 = c*c;
                double t12739 = 1.0/pow(t12737,2.0/3.0);
                double t12740 = 1.0/pow(t12737,1.0/3.0);
                double t12741 = 1.0/t12737;
                double t12742 = rho_a[index]-rho_b[index];
                double t12743 = Bg*t12738*t12739;
                double t12744 = Cg_2*c*t12740;
                double t12745 = Cg_1+t12743+t12744;
                double t12746 = Bg*c*t12741*t12738*1.0E4;
                double t12747 = Cg_4*t12738*t12739;
                double t12748 = Cg_3*c*t12740;
                double t12749 = t12746+t12747+t12748+1.0;
                double t12750 = 1.0/t12749;
                double t12751 = t12750*t12745;
                double t12752 = Cx+t12751;
                double t12753 = 1.0/t12752;
                double t12754 = 1.0/two_13;
                double t12755 = 1.0/pow(t12737,7.0/6.0);
                double t12756 = gamma_ab[index]*2.0;
                double t12757 = gamma_aa[index]+gamma_bb[index]+t12756;
                double t12758 = sqrt(t12757);
                double t12759 = exp(-Cinf*Fg*Pg_1*t12753*t12755*t12758);
                double t12760 = t12741*t12742*(1.0/2.0);
                double t12761 = t12760+1.0/2.0;
                double t12762 = pow(t12761,5.0/3.0);
                v_gamma_aa_gamma_aa_[index] = Cinf*Fg*Pg_1*t12754*1.0/pow(t12737,5.0/2.0)*1.0/sqrt(t12757)*t12759* \
                   1.0/sqrt(t12762+pow(-t12760+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12753*t12754* \
                   1.0/pow(t12737,1.1E1/3.0)*t12759*1.0/sqrt(t12762+pow(t12741*t12742*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   4.0);
            } else if (rho_a[index] > cutoff_) {
                double t14856 = rho_a[index]+rho_b[index];
                double t14857 = c*c;
                double t14858 = 1.0/pow(t14856,2.0/3.0);
                double t14859 = 1.0/pow(t14856,1.0/3.0);
                double t14860 = Bg*t14857*t14858;
                double t14861 = Cg_2*c*t14859;
                double t14862 = Cg_1+t14860+t14861;
                double t14863 = 1.0/t14856;
                double t14864 = Bg*c*t14863*t14857*1.0E4;
                double t14865 = Cg_4*t14857*t14858;
                double t14866 = Cg_3*c*t14859;
                double t14867 = t14864+t14865+t14866+1.0;
                double t14868 = 1.0/t14867;
                double t14869 = t14862*t14868;
                double t14870 = Cx+t14869;
                double t14871 = 1.0/t14870;
                double t14872 = 1.0/two_13;
                double t14873 = 1.0/pow(t14856,7.0/6.0);
                double t14874 = gamma_ab[index]*2.0;
                double t14875 = gamma_aa[index]+gamma_bb[index]+t14874;
                double t14876 = sqrt(t14875);
                double t14877 = exp(-Cinf*Fg*Pg_1*t14871*t14873*t14876);
                v_gamma_aa_gamma_aa_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14871*t14872*1.0/pow(t14856,1.1E1/ \
                   3.0)*t14877*(1.0/4.0)-Cinf*Fg*Pg_1*t14872*1.0/pow(t14856,5.0/2.0)*1.0/sqrt(t14875)*t14877*(3.0/4.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                double t13809 = rho_a[index]+rho_b[index];
                double t13810 = c*c;
                double t13811 = 1.0/pow(t13809,2.0/3.0);
                double t13812 = 1.0/pow(t13809,1.0/3.0);
                double t13813 = Bg*t13810*t13811;
                double t13814 = Cg_2*c*t13812;
                double t13815 = Cg_1+t13813+t13814;
                double t13816 = 1.0/t13809;
                double t13817 = Bg*c*t13810*t13816*1.0E4;
                double t13818 = Cg_4*t13810*t13811;
                double t13819 = Cg_3*c*t13812;
                double t13820 = t13817+t13818+t13819+1.0;
                double t13821 = 1.0/t13820;
                double t13822 = t13821*t13815;
                double t13823 = Cx+t13822;
                double t13824 = 1.0/t13823;
                double t13825 = 1.0/two_13;
                double t13826 = 1.0/pow(t13809,7.0/6.0);
                double t13827 = gamma_ab[index]*2.0;
                double t13828 = gamma_aa[index]+gamma_bb[index]+t13827;
                double t13829 = sqrt(t13828);
                double t13830 = exp(-Cinf*Fg*Pg_1*t13824*t13826*t13829);
                v_gamma_aa_gamma_aa_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13830*t13824*t13825*1.0/pow(t13809,1.1E1/ \
                   3.0)*(1.0/4.0)-Cinf*Fg*Pg_1*t13830*t13825*1.0/pow(t13809,5.0/2.0)*1.0/sqrt(t13828)*(3.0/4.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12764 = rho_a[index]+rho_b[index];
                double t12765 = c*c;
                double t12766 = 1.0/pow(t12764,2.0/3.0);
                double t12767 = 1.0/pow(t12764,1.0/3.0);
                double t12768 = 1.0/t12764;
                double t12769 = rho_a[index]-rho_b[index];
                double t12770 = Bg*t12765*t12766;
                double t12771 = Cg_2*c*t12767;
                double t12772 = Cg_1+t12770+t12771;
                double t12773 = Bg*c*t12765*t12768*1.0E4;
                double t12774 = Cg_4*t12765*t12766;
                double t12775 = Cg_3*c*t12767;
                double t12776 = t12773+t12774+t12775+1.0;
                double t12777 = 1.0/t12776;
                double t12778 = t12772*t12777;
                double t12779 = Cx+t12778;
                double t12780 = 1.0/t12779;
                double t12781 = 1.0/two_13;
                double t12782 = 1.0/pow(t12764,7.0/6.0);
                double t12783 = gamma_ab[index]*2.0;
                double t12784 = gamma_aa[index]+gamma_bb[index]+t12783;
                double t12785 = sqrt(t12784);
                double t12786 = exp(-Cinf*Fg*Pg_1*t12780*t12782*t12785);
                double t12787 = t12768*t12769*(1.0/2.0);
                double t12788 = t12787+1.0/2.0;
                double t12789 = pow(t12788,5.0/3.0);
                v_gamma_aa_gamma_ab_[index] = Cinf*Fg*Pg_1*t12781*1.0/pow(t12764,5.0/2.0)*1.0/sqrt(t12784)*t12786* \
                   1.0/sqrt(t12789+pow(-t12787+1.0/2.0,5.0/3.0))*(-3.0/2.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12780*t12781* \
                   1.0/pow(t12764,1.1E1/3.0)*t12786*1.0/sqrt(t12789+pow(t12768*t12769*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14879 = rho_a[index]+rho_b[index];
                double t14880 = c*c;
                double t14881 = 1.0/pow(t14879,2.0/3.0);
                double t14882 = 1.0/pow(t14879,1.0/3.0);
                double t14883 = Bg*t14880*t14881;
                double t14884 = Cg_2*c*t14882;
                double t14885 = Cg_1+t14883+t14884;
                double t14886 = 1.0/t14879;
                double t14887 = Bg*c*t14880*t14886*1.0E4;
                double t14888 = Cg_4*t14880*t14881;
                double t14889 = Cg_3*c*t14882;
                double t14890 = t14887+t14888+t14889+1.0;
                double t14891 = 1.0/t14890;
                double t14892 = t14891*t14885;
                double t14893 = Cx+t14892;
                double t14894 = 1.0/t14893;
                double t14895 = 1.0/two_13;
                double t14896 = 1.0/pow(t14879,7.0/6.0);
                double t14897 = gamma_ab[index]*2.0;
                double t14898 = gamma_aa[index]+gamma_bb[index]+t14897;
                double t14899 = sqrt(t14898);
                double t14900 = exp(-Cinf*Fg*Pg_1*t14894*t14896*t14899);
                v_gamma_aa_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14900*t14894*t14895*1.0/pow(t14879,1.1E1/ \
                   3.0)*(1.0/2.0)-Cinf*Fg*Pg_1*t14900*t14895*1.0/pow(t14879,5.0/2.0)*1.0/sqrt(t14898)*(3.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13832 = rho_a[index]+rho_b[index];
                double t13833 = c*c;
                double t13834 = 1.0/pow(t13832,2.0/3.0);
                double t13835 = 1.0/pow(t13832,1.0/3.0);
                double t13836 = Bg*t13833*t13834;
                double t13837 = Cg_2*c*t13835;
                double t13838 = Cg_1+t13836+t13837;
                double t13839 = 1.0/t13832;
                double t13840 = Bg*c*t13833*t13839*1.0E4;
                double t13841 = Cg_4*t13833*t13834;
                double t13842 = Cg_3*c*t13835;
                double t13843 = t13840+t13841+t13842+1.0;
                double t13844 = 1.0/t13843;
                double t13845 = t13844*t13838;
                double t13846 = Cx+t13845;
                double t13847 = 1.0/t13846;
                double t13848 = 1.0/two_13;
                double t13849 = 1.0/pow(t13832,7.0/6.0);
                double t13850 = gamma_ab[index]*2.0;
                double t13851 = gamma_aa[index]+gamma_bb[index]+t13850;
                double t13852 = sqrt(t13851);
                double t13853 = exp(-Cinf*Fg*Pg_1*t13852*t13847*t13849);
                v_gamma_aa_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t13832,1.1E1/3.0)*t13853*t13847* \
                   t13848*(1.0/2.0)-Cinf*Fg*Pg_1*1.0/pow(t13832,5.0/2.0)*1.0/sqrt(t13851)*t13853*t13848*(3.0/2.0);
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12791 = rho_a[index]+rho_b[index];
                double t12792 = c*c;
                double t12793 = 1.0/pow(t12791,2.0/3.0);
                double t12794 = 1.0/pow(t12791,1.0/3.0);
                double t12795 = 1.0/t12791;
                double t12796 = rho_a[index]-rho_b[index];
                double t12797 = Bg*t12792*t12793;
                double t12798 = Cg_2*c*t12794;
                double t12799 = Cg_1+t12797+t12798;
                double t12800 = Bg*c*t12792*t12795*1.0E4;
                double t12801 = Cg_4*t12792*t12793;
                double t12802 = Cg_3*c*t12794;
                double t12803 = t12800+t12801+t12802+1.0;
                double t12804 = 1.0/t12803;
                double t12805 = t12804*t12799;
                double t12806 = Cx+t12805;
                double t12807 = 1.0/t12806;
                double t12808 = 1.0/two_13;
                double t12809 = 1.0/pow(t12791,7.0/6.0);
                double t12810 = gamma_ab[index]*2.0;
                double t12811 = gamma_aa[index]+gamma_bb[index]+t12810;
                double t12812 = sqrt(t12811);
                double t12813 = exp(-Cinf*Fg*Pg_1*t12812*t12807*t12809);
                double t12814 = t12795*t12796*(1.0/2.0);
                double t12815 = t12814+1.0/2.0;
                double t12816 = pow(t12815,5.0/3.0);
                v_gamma_aa_gamma_bb_[index] = Cinf*Fg*Pg_1*1.0/sqrt(t12811)*t12813*t12808*1.0/pow(t12791,5.0/2.0) \
                   *1.0/sqrt(t12816+pow(-t12814+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12813*t12807* \
                   t12808*1.0/pow(t12791,1.1E1/3.0)*1.0/sqrt(t12816+pow(t12795*t12796*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   4.0);
            } else if (rho_a[index] > cutoff_) {
                double t14902 = rho_a[index]+rho_b[index];
                double t14903 = c*c;
                double t14904 = 1.0/pow(t14902,2.0/3.0);
                double t14905 = 1.0/pow(t14902,1.0/3.0);
                double t14906 = Bg*t14903*t14904;
                double t14907 = Cg_2*c*t14905;
                double t14908 = Cg_1+t14906+t14907;
                double t14909 = 1.0/t14902;
                double t14910 = Bg*c*t14903*t14909*1.0E4;
                double t14911 = Cg_4*t14903*t14904;
                double t14912 = Cg_3*c*t14905;
                double t14913 = t14910+t14911+t14912+1.0;
                double t14914 = 1.0/t14913;
                double t14915 = t14914*t14908;
                double t14916 = Cx+t14915;
                double t14917 = 1.0/t14916;
                double t14918 = 1.0/two_13;
                double t14919 = 1.0/pow(t14902,7.0/6.0);
                double t14920 = gamma_ab[index]*2.0;
                double t14921 = gamma_aa[index]+gamma_bb[index]+t14920;
                double t14922 = sqrt(t14921);
                double t14923 = exp(-Cinf*Fg*Pg_1*t14922*t14917*t14919);
                v_gamma_aa_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t14902,1.1E1/3.0)*t14923*t14917* \
                   t14918*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/pow(t14902,5.0/2.0)*1.0/sqrt(t14921)*t14923*t14918*(3.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                double t13855 = rho_a[index]+rho_b[index];
                double t13856 = c*c;
                double t13857 = 1.0/pow(t13855,2.0/3.0);
                double t13858 = 1.0/pow(t13855,1.0/3.0);
                double t13859 = Bg*t13856*t13857;
                double t13860 = Cg_2*c*t13858;
                double t13861 = Cg_1+t13860+t13859;
                double t13862 = 1.0/t13855;
                double t13863 = Bg*c*t13862*t13856*1.0E4;
                double t13864 = Cg_4*t13856*t13857;
                double t13865 = Cg_3*c*t13858;
                double t13866 = t13863+t13864+t13865+1.0;
                double t13867 = 1.0/t13866;
                double t13868 = t13861*t13867;
                double t13869 = Cx+t13868;
                double t13870 = 1.0/t13869;
                double t13871 = 1.0/two_13;
                double t13872 = 1.0/pow(t13855,7.0/6.0);
                double t13873 = gamma_ab[index]*2.0;
                double t13874 = gamma_aa[index]+gamma_bb[index]+t13873;
                double t13875 = sqrt(t13874);
                double t13876 = exp(-Cinf*Fg*Pg_1*t13870*t13872*t13875);
                v_gamma_aa_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13870*t13871*1.0/pow(t13855,1.1E1/ \
                   3.0)*t13876*(1.0/4.0)-Cinf*Fg*Pg_1*t13871*1.0/pow(t13855,5.0/2.0)*1.0/sqrt(t13874)*t13876*(3.0/4.0) \
                   ;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12818 = rho_a[index]+rho_b[index];
                double t12819 = c*c;
                double t12820 = 1.0/pow(t12818,2.0/3.0);
                double t12821 = 1.0/pow(t12818,1.0/3.0);
                double t12822 = 1.0/t12818;
                double t12823 = rho_a[index]-rho_b[index];
                double t12824 = Bg*t12820*t12819;
                double t12825 = Cg_2*c*t12821;
                double t12826 = Cg_1+t12824+t12825;
                double t12827 = Bg*c*t12822*t12819*1.0E4;
                double t12828 = Cg_4*t12820*t12819;
                double t12829 = Cg_3*c*t12821;
                double t12830 = t12827+t12828+t12829+1.0;
                double t12831 = 1.0/t12830;
                double t12832 = t12831*t12826;
                double t12833 = Cx+t12832;
                double t12834 = 1.0/t12833;
                double t12835 = 1.0/two_13;
                double t12836 = 1.0/pow(t12818,7.0/6.0);
                double t12837 = gamma_ab[index]*2.0;
                double t12838 = gamma_aa[index]+gamma_bb[index]+t12837;
                double t12839 = sqrt(t12838);
                double t12840 = exp(-Cinf*Fg*Pg_1*t12834*t12836*t12839);
                double t12841 = t12822*t12823*(1.0/2.0);
                double t12842 = t12841+1.0/2.0;
                double t12843 = pow(t12842,5.0/3.0);
                v_gamma_ab_gamma_ab_[index] = Cinf*Fg*Pg_1*t12840*t12835*1.0/pow(t12818,5.0/2.0)*1.0/sqrt(t12838) \
                   *1.0/sqrt(t12843+pow(-t12841+1.0/2.0,5.0/3.0))*-3.0+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12840*t12834* \
                   t12835*1.0/pow(t12818,1.1E1/3.0)*1.0/sqrt(t12843+pow(t12822*t12823*(-1.0/2.0)+1.0/2.0,5.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                double t14925 = rho_a[index]+rho_b[index];
                double t14926 = c*c;
                double t14927 = 1.0/pow(t14925,2.0/3.0);
                double t14928 = 1.0/pow(t14925,1.0/3.0);
                double t14929 = Bg*t14926*t14927;
                double t14930 = Cg_2*c*t14928;
                double t14931 = Cg_1+t14930+t14929;
                double t14932 = 1.0/t14925;
                double t14933 = Bg*c*t14932*t14926*1.0E4;
                double t14934 = Cg_4*t14926*t14927;
                double t14935 = Cg_3*c*t14928;
                double t14936 = t14933+t14934+t14935+1.0;
                double t14937 = 1.0/t14936;
                double t14938 = t14931*t14937;
                double t14939 = Cx+t14938;
                double t14940 = 1.0/t14939;
                double t14941 = 1.0/two_13;
                double t14942 = 1.0/pow(t14925,7.0/6.0);
                double t14943 = gamma_ab[index]*2.0;
                double t14944 = gamma_aa[index]+gamma_bb[index]+t14943;
                double t14945 = sqrt(t14944);
                double t14946 = exp(-Cinf*Fg*Pg_1*t14940*t14942*t14945);
                v_gamma_ab_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14940*t14941*1.0/pow(t14925,1.1E1/ \
                   3.0)*t14946-Cinf*Fg*Pg_1*t14941*1.0/pow(t14925,5.0/2.0)*1.0/sqrt(t14944)*t14946*3.0;
            } else if (rho_b[index] > cutoff_) {
                double t13878 = rho_a[index]+rho_b[index];
                double t13879 = c*c;
                double t13880 = 1.0/pow(t13878,2.0/3.0);
                double t13881 = 1.0/pow(t13878,1.0/3.0);
                double t13882 = Bg*t13880*t13879;
                double t13883 = Cg_2*c*t13881;
                double t13884 = Cg_1+t13882+t13883;
                double t13885 = 1.0/t13878;
                double t13886 = Bg*c*t13885*t13879*1.0E4;
                double t13887 = Cg_4*t13880*t13879;
                double t13888 = Cg_3*c*t13881;
                double t13889 = t13886+t13887+t13888+1.0;
                double t13890 = 1.0/t13889;
                double t13891 = t13890*t13884;
                double t13892 = Cx+t13891;
                double t13893 = 1.0/t13892;
                double t13894 = 1.0/two_13;
                double t13895 = 1.0/pow(t13878,7.0/6.0);
                double t13896 = gamma_ab[index]*2.0;
                double t13897 = gamma_aa[index]+gamma_bb[index]+t13896;
                double t13898 = sqrt(t13897);
                double t13899 = exp(-Cinf*Fg*Pg_1*t13893*t13895*t13898);
                v_gamma_ab_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13893*t13894*1.0/pow(t13878,1.1E1/ \
                   3.0)*t13899-Cinf*Fg*Pg_1*t13894*1.0/pow(t13878,5.0/2.0)*1.0/sqrt(t13897)*t13899*3.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12845 = rho_a[index]+rho_b[index];
                double t12846 = c*c;
                double t12847 = 1.0/pow(t12845,2.0/3.0);
                double t12848 = 1.0/pow(t12845,1.0/3.0);
                double t12849 = 1.0/t12845;
                double t12850 = rho_a[index]-rho_b[index];
                double t12851 = Bg*t12846*t12847;
                double t12852 = Cg_2*c*t12848;
                double t12853 = Cg_1+t12851+t12852;
                double t12854 = Bg*c*t12846*t12849*1.0E4;
                double t12855 = Cg_4*t12846*t12847;
                double t12856 = Cg_3*c*t12848;
                double t12857 = t12854+t12855+t12856+1.0;
                double t12858 = 1.0/t12857;
                double t12859 = t12853*t12858;
                double t12860 = Cx+t12859;
                double t12861 = 1.0/t12860;
                double t12862 = 1.0/two_13;
                double t12863 = 1.0/pow(t12845,7.0/6.0);
                double t12864 = gamma_ab[index]*2.0;
                double t12865 = gamma_aa[index]+gamma_bb[index]+t12864;
                double t12866 = sqrt(t12865);
                double t12867 = exp(-Cinf*Fg*Pg_1*t12861*t12863*t12866);
                double t12868 = t12850*t12849*(1.0/2.0);
                double t12869 = t12868+1.0/2.0;
                double t12870 = pow(t12869,5.0/3.0);
                v_gamma_ab_gamma_bb_[index] = Cinf*Fg*Pg_1*t12862*1.0/pow(t12845,5.0/2.0)*1.0/sqrt(t12865)*t12867* \
                   1.0/sqrt(t12870+pow(-t12868+1.0/2.0,5.0/3.0))*(-3.0/2.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12861*t12862* \
                   1.0/pow(t12845,1.1E1/3.0)*t12867*1.0/sqrt(t12870+pow(t12850*t12849*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14948 = rho_a[index]+rho_b[index];
                double t14949 = c*c;
                double t14950 = 1.0/pow(t14948,2.0/3.0);
                double t14951 = 1.0/pow(t14948,1.0/3.0);
                double t14952 = Bg*t14950*t14949;
                double t14953 = Cg_2*c*t14951;
                double t14954 = Cg_1+t14952+t14953;
                double t14955 = 1.0/t14948;
                double t14956 = Bg*c*t14955*t14949*1.0E4;
                double t14957 = Cg_4*t14950*t14949;
                double t14958 = Cg_3*c*t14951;
                double t14959 = t14956+t14957+t14958+1.0;
                double t14960 = 1.0/t14959;
                double t14961 = t14960*t14954;
                double t14962 = Cx+t14961;
                double t14963 = 1.0/t14962;
                double t14964 = 1.0/two_13;
                double t14965 = 1.0/pow(t14948,7.0/6.0);
                double t14966 = gamma_ab[index]*2.0;
                double t14967 = gamma_aa[index]+gamma_bb[index]+t14966;
                double t14968 = sqrt(t14967);
                double t14969 = exp(-Cinf*Fg*Pg_1*t14963*t14965*t14968);
                v_gamma_ab_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14963*t14964*1.0/pow(t14948,1.1E1/ \
                   3.0)*t14969*(1.0/2.0)-Cinf*Fg*Pg_1*t14964*1.0/pow(t14948,5.0/2.0)*1.0/sqrt(t14967)*t14969*(3.0/2.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                double t13901 = rho_a[index]+rho_b[index];
                double t13902 = c*c;
                double t13903 = 1.0/pow(t13901,2.0/3.0);
                double t13904 = 1.0/pow(t13901,1.0/3.0);
                double t13905 = Bg*t13902*t13903;
                double t13906 = Cg_2*c*t13904;
                double t13907 = Cg_1+t13905+t13906;
                double t13908 = 1.0/t13901;
                double t13909 = Bg*c*t13902*t13908*1.0E4;
                double t13910 = Cg_4*t13902*t13903;
                double t13911 = Cg_3*c*t13904;
                double t13912 = t13910+t13911+t13909+1.0;
                double t13913 = 1.0/t13912;
                double t13914 = t13913*t13907;
                double t13915 = Cx+t13914;
                double t13916 = 1.0/t13915;
                double t13917 = 1.0/two_13;
                double t13918 = 1.0/pow(t13901,7.0/6.0);
                double t13919 = gamma_ab[index]*2.0;
                double t13920 = gamma_aa[index]+gamma_bb[index]+t13919;
                double t13921 = sqrt(t13920);
                double t13922 = exp(-Cinf*Fg*Pg_1*t13921*t13916*t13918);
                v_gamma_ab_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t13901,1.1E1/3.0)*t13922*t13916* \
                   t13917*(1.0/2.0)-Cinf*Fg*Pg_1*1.0/pow(t13901,5.0/2.0)*1.0/sqrt(t13920)*t13922*t13917*(3.0/2.0);
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12872 = rho_a[index]+rho_b[index];
                double t12873 = c*c;
                double t12874 = 1.0/pow(t12872,2.0/3.0);
                double t12875 = 1.0/pow(t12872,1.0/3.0);
                double t12876 = 1.0/t12872;
                double t12877 = rho_a[index]-rho_b[index];
                double t12878 = Bg*t12873*t12874;
                double t12879 = Cg_2*c*t12875;
                double t12880 = Cg_1+t12878+t12879;
                double t12881 = Bg*c*t12873*t12876*1.0E4;
                double t12882 = Cg_4*t12873*t12874;
                double t12883 = Cg_3*c*t12875;
                double t12884 = t12881+t12882+t12883+1.0;
                double t12885 = 1.0/t12884;
                double t12886 = t12880*t12885;
                double t12887 = Cx+t12886;
                double t12888 = 1.0/t12887;
                double t12889 = 1.0/two_13;
                double t12890 = 1.0/pow(t12872,7.0/6.0);
                double t12891 = gamma_ab[index]*2.0;
                double t12892 = gamma_aa[index]+gamma_bb[index]+t12891;
                double t12893 = sqrt(t12892);
                double t12894 = exp(-Cinf*Fg*Pg_1*t12890*t12893*t12888);
                double t12895 = t12876*t12877*(1.0/2.0);
                double t12896 = t12895+1.0/2.0;
                double t12897 = pow(t12896,5.0/3.0);
                v_gamma_bb_gamma_bb_[index] = Cinf*Fg*Pg_1*1.0/pow(t12872,5.0/2.0)*1.0/sqrt(t12892)*t12894*t12889* \
                   1.0/sqrt(t12897+pow(-t12895+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t12872,1.1E1/ \
                   3.0)*t12894*t12888*t12889*1.0/sqrt(t12897+pow(t12876*t12877*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t14971 = rho_a[index]+rho_b[index];
                double t14972 = c*c;
                double t14973 = 1.0/pow(t14971,2.0/3.0);
                double t14974 = 1.0/pow(t14971,1.0/3.0);
                double t14975 = Bg*t14972*t14973;
                double t14976 = Cg_2*c*t14974;
                double t14977 = Cg_1+t14975+t14976;
                double t14978 = 1.0/t14971;
                double t14979 = Bg*c*t14972*t14978*1.0E4;
                double t14980 = Cg_4*t14972*t14973;
                double t14981 = Cg_3*c*t14974;
                double t14982 = t14980+t14981+t14979+1.0;
                double t14983 = 1.0/t14982;
                double t14984 = t14983*t14977;
                double t14985 = Cx+t14984;
                double t14986 = 1.0/t14985;
                double t14987 = 1.0/two_13;
                double t14988 = 1.0/pow(t14971,7.0/6.0);
                double t14989 = gamma_ab[index]*2.0;
                double t14990 = gamma_aa[index]+gamma_bb[index]+t14989;
                double t14991 = sqrt(t14990);
                double t14992 = exp(-Cinf*Fg*Pg_1*t14991*t14986*t14988);
                v_gamma_bb_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t14971,1.1E1/3.0)*t14992*t14986* \
                   t14987*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/pow(t14971,5.0/2.0)*1.0/sqrt(t14990)*t14992*t14987*(3.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                double t13924 = rho_a[index]+rho_b[index];
                double t13925 = c*c;
                double t13926 = 1.0/pow(t13924,2.0/3.0);
                double t13927 = 1.0/pow(t13924,1.0/3.0);
                double t13928 = Bg*t13925*t13926;
                double t13929 = Cg_2*c*t13927;
                double t13930 = Cg_1+t13928+t13929;
                double t13931 = 1.0/t13924;
                double t13932 = Bg*c*t13931*t13925*1.0E4;
                double t13933 = Cg_4*t13925*t13926;
                double t13934 = Cg_3*c*t13927;
                double t13935 = t13932+t13933+t13934+1.0;
                double t13936 = 1.0/t13935;
                double t13937 = t13930*t13936;
                double t13938 = Cx+t13937;
                double t13939 = 1.0/t13938;
                double t13940 = 1.0/two_13;
                double t13941 = 1.0/pow(t13924,7.0/6.0);
                double t13942 = gamma_ab[index]*2.0;
                double t13943 = gamma_aa[index]+gamma_bb[index]+t13942;
                double t13944 = sqrt(t13943);
                double t13945 = exp(-Cinf*Fg*Pg_1*t13941*t13944*t13939);
                v_gamma_bb_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13940*1.0/pow(t13924,1.1E1/3.0)*t13945* \
                   t13939*(1.0/4.0)-Cinf*Fg*Pg_1*t13940*1.0/pow(t13924,5.0/2.0)*1.0/sqrt(t13943)*t13945*(3.0/4.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

