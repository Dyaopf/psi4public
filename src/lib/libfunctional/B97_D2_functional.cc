/**********************************************************
* B97_D2_functional.cc: definitions for B97_D2_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "B97_D2_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_D2_Functional::B97_D2_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B97_D2";
    description_ = "B97-D2 Pure -D Functional";
    citation_ = "S. Grimme, J. Comput. Chem., 27, 1787-1799, 2006.";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 6.9040999999999997E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 6.3026999999999997E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.4971200000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 2.2339999999999999E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -1.5620799999999999E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.9429300000000000E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 1.0866199999999999E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -5.2127000000000001E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 3.2542900000000001E+00;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_D2_Functional::~B97_D2_Functional()
{
}
void B97_D2_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t44957 = 1/pow(rho_a[index],1.0/3.0);
            double t44958 = c*t44957;
            double t44959 = sqrt(t44958);
            double t44960 = pow(t44958,3.0/2.0);
            double t44961 = c*c;
            double t44962 = 1/pow(rho_a[index],2.0/3.0);
            double t44963 = 1/c0p;
            double t44964 = b1p*t44959;
            double t44965 = b3p*t44960;
            double t44966 = b4p*t44961*t44962;
            double t44967 = b2p*c*t44957;
            double t44968 = t44964+t44965+t44966+t44967;
            double t44969 = 1/t44968;
            double t44970 = t44963*t44969*(1.0/2.0);
            double t44971 = t44970+1.0;
            double t44972 = log(t44971);
            double t44973 = a1p*c*t44957;
            double t44974 = t44973+1.0;
            double t44975 = rho_a[index]*2.0;
            double t44976 = 1/pow(t44975,1.0/3.0);
            double t44977 = c*t44976;
            double t44978 = 1/pow(rho_a[index],8.0/3.0);
            double t44979 = gamma_aa[index]*gamma_aa[index];
            double t44980 = gcab*gcab;
            double t44981 = 1/pow(rho_a[index],1.6E1/3.0);
            double t44982 = gx*gx;
            double t44983 = pow(2.0,1.0/3.0);
            double t44984 = t44983*2.0;
            double t44985 = t44984-2.0;
            double t44986 = two_13*2.0;
            double t44987 = t44986-2.0;
            double t44988 = 1/t44987;
            double t44989 = 1/c0f;
            double t44990 = b1f*t44959;
            double t44991 = b3f*t44960;
            double t44992 = b4f*t44961*t44962;
            double t44993 = b2f*c*t44957;
            double t44994 = t44990+t44991+t44992+t44993;
            double t44995 = 1/t44994;
            double t44996 = t44995*t44989*(1.0/2.0);
            double t44997 = t44996+1.0;
            double t44998 = log(t44997);
            double t44999 = a1f*c*t44957;
            double t45000 = t44999+1.0;
            double t45001 = c0f*t44998*t45000*2.0;
            double t45002 = c0p*t44972*t44974*2.0;
            double t45003 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t45002+t44985*t44988*(t45001-c0p*t44972*t44974*2.0))*2.0-c0p* \
               rho_a[index]*log((t44963*(1.0/2.0))/(b1p*sqrt(t44977)+b3p*pow(t44977,3.0/2.0)+b4p*t44961*1/pow(t44975,2.0/ \
               3.0)+b2p*c*t44976)+1.0)*(a1p*c*t44976+1.0)*4.0)*(ccab0+(ccab2*t44980*t44981*t44979)/(gamma_aa[index]* \
               gcab*t44978*2.0+t44980*t44981*t44979+1.0)+(ccab1*gamma_aa[index]*gcab*t44978)/(gamma_aa[index]*gcab* \
               t44978+1.0))-rho_a[index]*(t45002+t44985*t44988*(t45001-t45002))*(ccaa0+(ccaa2*t44981*t44979*t45003) \
               /(gamma_aa[index]*gcaa*t44978*2.0+t44981*t44979*t45003+1.0)+(ccaa1*gamma_aa[index]*gcaa*t44978)/(gamma_aa[index]* \
               gcaa*t44978+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t44981*t44982*t44979)/(gamma_aa[index]* \
               gx*t44978*2.0+t44981*t44982*t44979+1.0)+(cx1*gamma_aa[index]*gx*t44978)/(gamma_aa[index]*gx*t44978+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t45005 = 1/pow(rho_a[index],1.0/3.0);
            double t45006 = c*t45005;
            double t45007 = sqrt(t45006);
            double t45008 = pow(t45006,3.0/2.0);
            double t45009 = c*c;
            double t45010 = 1/pow(rho_a[index],2.0/3.0);
            double t45011 = 1/c0p;
            double t45012 = b1p*t45007;
            double t45013 = b3p*t45008;
            double t45014 = b4p*t45010*t45009;
            double t45015 = b2p*c*t45005;
            double t45016 = t45012+t45013+t45014+t45015;
            double t45017 = 1/t45016;
            double t45018 = t45011*t45017*(1.0/2.0);
            double t45019 = t45018+1.0;
            double t45020 = log(t45019);
            double t45021 = a1p*c*t45005;
            double t45022 = t45021+1.0;
            double t45023 = 1/pow(rho_a[index],8.0/3.0);
            double t45024 = gamma_aa[index]*gamma_aa[index];
            double t45025 = gcaa*gcaa;
            double t45026 = 1/pow(rho_a[index],1.6E1/3.0);
            double t45027 = pow(2.0,1.0/3.0);
            double t45028 = t45027*2.0;
            double t45029 = t45028-2.0;
            double t45030 = two_13*2.0;
            double t45031 = t45030-2.0;
            double t45032 = 1/t45031;
            double t45033 = 1/c0f;
            double t45034 = b1f*t45007;
            double t45035 = b3f*t45008;
            double t45036 = b4f*t45010*t45009;
            double t45037 = b2f*c*t45005;
            double t45038 = t45034+t45035+t45036+t45037;
            double t45039 = 1/t45038;
            double t45040 = t45033*t45039*(1.0/2.0);
            double t45041 = t45040+1.0;
            double t45042 = log(t45041);
            double t45043 = a1f*c*t45005;
            double t45044 = t45043+1.0;
            double t45045 = c0f*t45042*t45044*2.0;
            double t45046 = c0p*t45020*t45022*2.0;
            double t45047 = rho_a[index]*2.0;
            double t45048 = 1/pow(t45047,1.0/3.0);
            double t45049 = c*t45048;
            double t45050 = gcab*gcab;
            double t45051 = 1/pow(rho_a[index],1.9E1/3.0);
            double t45052 = gamma_aa[index]*gcab*t45023;
            double t45053 = t45052+1.0;
            double t45054 = 1/pow(rho_a[index],1.1E1/3.0);
            double t45055 = gamma_aa[index]*gcab*t45023*2.0;
            double t45056 = t45050*t45024*t45026;
            double t45057 = t45055+t45056+1.0;
            double t45058 = 1/t45053;
            double t45059 = 1/t45057;
            double t45060 = sqrt(t45049);
            double t45061 = b1p*t45060;
            double t45062 = pow(t45049,3.0/2.0);
            double t45063 = b3p*t45062;
            double t45064 = b2p*c*t45048;
            double t45065 = 1/pow(t45047,2.0/3.0);
            double t45066 = b4p*t45009*t45065;
            double t45067 = t45061+t45063+t45064+t45066;
            double t45068 = 1/t45067;
            double t45069 = t45011*t45068*(1.0/2.0);
            double t45070 = t45069+1.0;
            double t45071 = a1p*c*t45048;
            double t45072 = t45071+1.0;
            double t45073 = 1/pow(t45047,4.0/3.0);
            double t45074 = log(t45070);
            double t45075 = 1/pow(rho_a[index],4.0/3.0);
            double t45076 = 1/pow(rho_a[index],5.0/3.0);
            double t45077 = 1/sqrt(t45006);
            double t45078 = 1/t45019;
            double t45079 = 1/(t45016*t45016);
            double t45080 = b4p*t45009*t45076*(2.0/3.0);
            double t45081 = b2p*c*t45075*(1.0/3.0);
            double t45082 = b1p*c*t45075*t45077*(1.0/6.0);
            double t45083 = b3p*c*t45007*t45075*(1.0/2.0);
            double t45084 = t45080+t45081+t45082+t45083;
            double t45085 = t45022*t45084*t45078*t45079;
            double t45086 = t45045-t45046;
            double t45087 = t45032*t45029*t45086;
            double t45088 = gx*gx;
            double t45089 = gamma_aa[index]*gx*t45023;
            double t45090 = t45089+1.0;
            double t45091 = 1/t45090;
            double t45092 = gamma_aa[index]*gx*t45023*2.0;
            double t45093 = t45024*t45026*t45088;
            double t45094 = t45092+t45093+1.0;
            double t45095 = 1/t45094;
            double t45096 = 1/t45041;
            double t45097 = 1/(t45038*t45038);
            double t45098 = b4f*t45009*t45076*(2.0/3.0);
            double t45099 = b2f*c*t45075*(1.0/3.0);
            double t45100 = b1f*c*t45075*t45077*(1.0/6.0);
            double t45101 = b3f*c*t45007*t45075*(1.0/2.0);
            double t45102 = t45100+t45101+t45098+t45099;
            double t45103 = a1f*c*c0f*t45042*t45075*(2.0/3.0);
            double t45104 = a1p*c*c0p*t45020*t45075*(2.0/3.0);
            double t45105 = gamma_aa[index]*gcaa*t45023;
            double t45106 = t45105+1.0;
            double t45107 = 1/t45106;
            double t45108 = ccaa1*gamma_aa[index]*gcaa*t45023*t45107;
            double t45109 = gamma_aa[index]*gcaa*t45023*2.0;
            double t45110 = t45024*t45025*t45026;
            double t45111 = t45110+t45109+1.0;
            double t45112 = 1/t45111;
            double t45113 = ccaa2*t45112*t45024*t45025*t45026;
            double t45114 = ccaa0+t45113+t45108;
            double t45115 = t45046+t45087;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t45023*t45058+ccab2*t45050*t45024*t45026*t45059) \
               *(-t45046-t45087+rho_a[index]*((t45072*1/(t45067*t45067)*(b4p*t45009*1/pow(t45047,5.0/3.0)*(2.0/3.0) \
               +b2p*c*t45073*(1.0/3.0)+b3p*c*t45060*t45073*(1.0/2.0)+b1p*c*t45073*1/sqrt(t45049)*(1.0/6.0)))/t45070- \
               a1p*c*c0p*t45073*t45074*(2.0/3.0))*2.0+rho_a[index]*(t45104-t45085+t45032*t45029*(t45103+t45085-t45102* \
               t45044*t45096*t45097-a1p*c*c0p*t45020*t45075*(2.0/3.0)))+c0p*t45072*t45074*2.0)-(rho_a[index]*t45115* \
               2.0-c0p*rho_a[index]*t45072*t45074*4.0)*(ccab1*gamma_aa[index]*gcab*t45054*t45058*(4.0/3.0)+ccab2* \
               t45050*t45024*t45051*t45059*(8.0/3.0)-ccab1*t45050*t45024*t45051*1/(t45053*t45053)*(4.0/3.0)-ccab2* \
               t45050*t45024*t45026*1/(t45057*t45057)*(gamma_aa[index]*gcab*t45054*(8.0/3.0)+t45050*t45024*t45051* \
               (8.0/3.0)))-t45114*(t45046+t45032*t45029*(t45045-c0p*t45020*t45022*2.0))+rho_a[index]*t45115*(ccaa1* \
               gamma_aa[index]*gcaa*t45107*t45054*(8.0/3.0)+ccaa2*t45112*t45024*t45051*t45025*(1.6E1/3.0)-ccaa1*t45024* \
               t45051*t45025*1/(t45106*t45106)*(8.0/3.0)-ccaa2*1/(t45111*t45111)*t45024*t45025*t45026*(gamma_aa[index]* \
               gcaa*t45054*(1.6E1/3.0)+t45024*t45051*t45025*(1.6E1/3.0)))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]* \
               gx*t45023*t45091+cx2*t45024*t45026*t45095*t45088)*(4.0/3.0)+rho_a[index]*t45114*(t45104-t45085+t45032* \
               t45029*(t45103-t45104+t45085-t45102*t45044*t45096*t45097))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t45054*t45091*(8.0/3.0)+cx2*t45024*t45051*t45095*t45088*(1.6E1/3.0)-cx1*t45024*t45051*1/(t45090* \
               t45090)*t45088*(8.0/3.0)-cx2*t45024*t45026*1/(t45094*t45094)*t45088*(gamma_aa[index]*gx*t45054*(1.6E1/ \
               3.0)+t45024*t45051*t45088*(1.6E1/3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t45117 = 1/pow(rho_a[index],1.0/3.0);
                double t45118 = c*t45117;
                double t45119 = sqrt(t45118);
                double t45120 = pow(t45118,3.0/2.0);
                double t45121 = c*c;
                double t45122 = 1/pow(rho_a[index],2.0/3.0);
                double t45123 = 1/c0p;
                double t45124 = b1p*t45119;
                double t45125 = b3p*t45120;
                double t45126 = b4p*t45121*t45122;
                double t45127 = b2p*c*t45117;
                double t45128 = t45124+t45125+t45126+t45127;
                double t45129 = 1/t45128;
                double t45130 = t45123*t45129*(1.0/2.0);
                double t45131 = t45130+1.0;
                double t45132 = log(t45131);
                double t45133 = a1p*c*t45117;
                double t45134 = t45133+1.0;
                double t45135 = rho_a[index]*2.0;
                double t45136 = 1/pow(t45135,1.0/3.0);
                double t45137 = c*t45136;
                double t45138 = 1/pow(rho_a[index],8.0/3.0);
                double t45139 = gcab*gcab;
                double t45140 = 1/pow(rho_a[index],1.6E1/3.0);
                double t45141 = gamma_aa[index]*gcab*t45138;
                double t45142 = t45141+1.0;
                double t45143 = gamma_aa[index]*gamma_aa[index];
                double t45144 = gamma_aa[index]*gcab*t45138*2.0;
                double t45145 = t45140*t45143*t45139;
                double t45146 = t45144+t45145+1.0;
                double t45147 = gx*gx;
                double t45148 = gamma_aa[index]*gx*t45138;
                double t45149 = t45148+1.0;
                double t45150 = gamma_aa[index]*gx*t45138*2.0;
                double t45151 = t45140*t45143*t45147;
                double t45152 = t45150+t45151+1.0;
                double t45153 = pow(2.0,1.0/3.0);
                double t45154 = t45153*2.0;
                double t45155 = t45154-2.0;
                double t45156 = two_13*2.0;
                double t45157 = t45156-2.0;
                double t45158 = 1/t45157;
                double t45159 = 1/c0f;
                double t45160 = b1f*t45119;
                double t45161 = b3f*t45120;
                double t45162 = b4f*t45121*t45122;
                double t45163 = b2f*c*t45117;
                double t45164 = t45160+t45161+t45162+t45163;
                double t45165 = 1/t45164;
                double t45166 = t45165*t45159*(1.0/2.0);
                double t45167 = t45166+1.0;
                double t45168 = log(t45167);
                double t45169 = a1f*c*t45117;
                double t45170 = t45169+1.0;
                double t45171 = c0f*t45170*t45168*2.0;
                double t45172 = c0p*t45132*t45134*2.0;
                double t45173 = gcaa*gcaa;
                double t45174 = gamma_aa[index]*gcaa*t45138;
                double t45175 = t45174+1.0;
                double t45176 = gamma_aa[index]*gcaa*t45138*2.0;
                double t45177 = t45140*t45143*t45173;
                double t45178 = t45176+t45177+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t45172+t45155*t45158*(t45171-c0p*t45132*t45134*2.0))*2.0-c0p* \
                   rho_a[index]*log((t45123*(1.0/2.0))/(b1p*sqrt(t45137)+b3p*pow(t45137,3.0/2.0)+b4p*t45121*1/pow(t45135,2.0/ \
                   3.0)+b2p*c*t45136)+1.0)*(a1p*c*t45136+1.0)*4.0)*((ccab1*gcab*t45138*(1.0/2.0))/t45142-ccab1*gamma_aa[index]* \
                   t45140*1/(t45142*t45142)*t45139*(1.0/2.0)+(ccab2*gamma_aa[index]*t45140*t45139)/t45146-ccab2*t45140* \
                   t45143*1/(t45146*t45146)*t45139*(gcab*t45138+gamma_aa[index]*t45140*t45139))*2.0-rho_a[index]*(t45172+ \
                   t45155*t45158*(t45171-t45172))*((ccaa1*gcaa*t45138)/t45175-ccaa1*gamma_aa[index]*t45140*t45173*1/(t45175* \
                   t45175)+(ccaa2*gamma_aa[index]*t45140*t45173*2.0)/t45178-ccaa2*t45140*t45143*t45173*1/(t45178*t45178) \
                   *(gcaa*t45138*2.0+gamma_aa[index]*t45140*t45173*2.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t45138) \
                   /t45149-cx1*gamma_aa[index]*t45140*t45147*1/(t45149*t45149)+(cx2*gamma_aa[index]*t45140*t45147*2.0) \
                   /t45152-cx2*t45140*t45143*1/(t45152*t45152)*t45147*(gx*t45138*2.0+gamma_aa[index]*t45140*t45147*2.0) \
                   )*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t45181 = 1/pow(rho_a[index],1.0/3.0);
            double t45182 = c*t45181;
            double t45183 = sqrt(t45182);
            double t45184 = pow(t45182,3.0/2.0);
            double t45185 = c*c;
            double t45186 = 1/pow(rho_a[index],2.0/3.0);
            double t45187 = 1/c0p;
            double t45188 = b1p*t45183;
            double t45189 = b3p*t45184;
            double t45190 = b4p*t45185*t45186;
            double t45191 = b2p*c*t45181;
            double t45192 = t45190+t45191+t45188+t45189;
            double t45193 = 1/t45192;
            double t45194 = t45193*t45187*(1.0/2.0);
            double t45195 = t45194+1.0;
            double t45196 = log(t45195);
            double t45197 = a1p*c*t45181;
            double t45198 = t45197+1.0;
            double t45199 = rho_a[index]*2.0;
            double t45200 = 1/pow(t45199,1.0/3.0);
            double t45201 = c*t45200;
            double t45202 = 1/pow(rho_a[index],8.0/3.0);
            double t45203 = gamma_aa[index]*gamma_aa[index];
            double t45204 = gcab*gcab;
            double t45205 = gamma_aa[index]*gcab*t45202;
            double t45206 = t45205+1.0;
            double t45207 = 1/pow(rho_a[index],2.2E1/3.0);
            double t45208 = 1/pow(rho_a[index],1.6E1/3.0);
            double t45213 = 1/pow(rho_a[index],1.9E1/3.0);
            double t45214 = 1/pow(rho_a[index],1.1E1/3.0);
            double t45215 = gamma_aa[index]*gcab*t45214*(8.0/3.0);
            double t45216 = t45203*t45204*t45213*(8.0/3.0);
            double t45209 = t45215+t45216;
            double t45210 = gamma_aa[index]*gcab*t45202*2.0;
            double t45211 = t45203*t45204*t45208;
            double t45212 = t45210+t45211+1.0;
            double t45217 = 1/pow(rho_a[index],1.4E1/3.0);
            double t45218 = 1/(t45212*t45212);
            double t45219 = 1/t45206;
            double t45220 = 1/t45212;
            double t45221 = sqrt(t45201);
            double t45222 = b1p*t45221;
            double t45223 = pow(t45201,3.0/2.0);
            double t45224 = b3p*t45223;
            double t45225 = b2p*c*t45200;
            double t45226 = 1/pow(t45199,2.0/3.0);
            double t45227 = b4p*t45226*t45185;
            double t45228 = t45222+t45224+t45225+t45227;
            double t45229 = 1/t45228;
            double t45230 = t45229*t45187*(1.0/2.0);
            double t45231 = t45230+1.0;
            double t45232 = a1p*c*t45200;
            double t45233 = t45232+1.0;
            double t45234 = 1/pow(t45199,8.0/3.0);
            double t45235 = 1/pow(t45199,7.0/3.0);
            double t45236 = 1/sqrt(t45201);
            double t45237 = 1/t45231;
            double t45238 = 1/pow(t45199,4.0/3.0);
            double t45241 = b2p*c*t45238*(1.0/3.0);
            double t45242 = 1/pow(t45199,5.0/3.0);
            double t45243 = b4p*t45242*t45185*(2.0/3.0);
            double t45244 = b1p*c*t45236*t45238*(1.0/6.0);
            double t45245 = b3p*c*t45221*t45238*(1.0/2.0);
            double t45239 = t45241+t45243+t45244+t45245;
            double t45240 = log(t45231);
            double t45246 = t45239*t45239;
            double t45247 = two_13*2.0;
            double t45248 = t45247-2.0;
            double t45249 = 1/t45248;
            double t45250 = 1/(t45228*t45228);
            double t45251 = pow(2.0,1.0/3.0);
            double t45252 = t45251*2.0;
            double t45253 = t45252-2.0;
            double t45254 = a1f*c*t45181;
            double t45255 = t45254+1.0;
            double t45256 = 1/c0f;
            double t45257 = b1f*t45183;
            double t45258 = b3f*t45184;
            double t45259 = b4f*t45185*t45186;
            double t45260 = b2f*c*t45181;
            double t45261 = t45260+t45257+t45258+t45259;
            double t45262 = 1/t45261;
            double t45263 = t45262*t45256*(1.0/2.0);
            double t45264 = t45263+1.0;
            double t45265 = 1/pow(rho_a[index],4.0/3.0);
            double t45267 = 1/pow(rho_a[index],5.0/3.0);
            double t45268 = 1/sqrt(t45182);
            double t45274 = b4f*t45185*t45267*(2.0/3.0);
            double t45275 = b2f*c*t45265*(1.0/3.0);
            double t45276 = b1f*c*t45265*t45268*(1.0/6.0);
            double t45277 = b3f*c*t45183*t45265*(1.0/2.0);
            double t45266 = t45274+t45275+t45276+t45277;
            double t45279 = b4p*t45185*t45267*(2.0/3.0);
            double t45280 = b2p*c*t45265*(1.0/3.0);
            double t45281 = b1p*c*t45265*t45268*(1.0/6.0);
            double t45282 = b3p*c*t45183*t45265*(1.0/2.0);
            double t45269 = t45280+t45281+t45282+t45279;
            double t45270 = 1/t45264;
            double t45271 = 1/pow(rho_a[index],7.0/3.0);
            double t45272 = 1/t45195;
            double t45273 = 1/pow(t45182,3.0/2.0);
            double t45278 = t45266*t45266;
            double t45283 = t45269*t45269;
            double t45284 = log(t45264);
            double t45285 = 1/(t45261*t45261);
            double t45286 = 1/(t45192*t45192);
            double t45287 = 1/(t45192*t45192*t45192);
            double t45288 = t45272*t45283*t45287*t45198*2.0;
            double t45289 = b4p*t45202*t45185*(1.0E1/9.0);
            double t45290 = b2p*c*t45271*(4.0/9.0);
            double t45291 = b3p*t45202*t45185*t45268*(1.0/1.2E1);
            double t45292 = b1p*c*t45271*t45268*(2.0/9.0);
            double t45293 = b3p*c*t45271*t45183*(2.0/3.0);
            double t45381 = b1p*t45202*t45273*t45185*(1.0/3.6E1);
            double t45294 = t45290+t45291-t45381+t45292+t45293+t45289;
            double t45295 = 1/(t45195*t45195);
            double t45296 = 1/(t45192*t45192*t45192*t45192);
            double t45297 = a1p*c*c0p*t45271*t45196*(8.0/9.0);
            double t45298 = c0f*t45255*t45284*2.0;
            double t45299 = c0p*t45196*t45198*2.0;
            double t45300 = gcaa*gcaa;
            double t45301 = gamma_aa[index]*gcaa*t45202;
            double t45302 = t45301+1.0;
            double t45303 = gamma_aa[index]*gcaa*t45202*2.0;
            double t45304 = t45300*t45203*t45208;
            double t45305 = t45303+t45304+1.0;
            double t45306 = ccab1*gamma_aa[index]*gcab*t45202*t45219;
            double t45307 = ccab2*t45220*t45203*t45204*t45208;
            double t45308 = ccab0+t45306+t45307;
            double t45309 = b2p*c*t45235*(4.0/9.0);
            double t45310 = b4p*t45234*t45185*(1.0E1/9.0);
            double t45311 = 1/pow(t45201,3.0/2.0);
            double t45312 = b3p*t45234*t45236*t45185*(1.0/1.2E1);
            double t45313 = b1p*c*t45235*t45236*(2.0/9.0);
            double t45314 = b3p*c*t45221*t45235*(2.0/3.0);
            double t45315 = t45310+t45312+t45313+t45314+t45309-b1p*t45311*t45234*t45185*(1.0/3.6E1);
            double t45316 = t45250*t45233*t45315*t45237;
            double t45317 = 1/(t45228*t45228*t45228);
            double t45318 = 1/(t45231*t45231);
            double t45319 = 1/(t45228*t45228*t45228*t45228);
            double t45320 = t45233*t45246*t45318*t45319*t45187*(1.0/2.0);
            double t45321 = 1/d2fz0;
            double t45322 = 1/(rho_a[index]*rho_a[index]);
            double t45323 = 1/Aa;
            double t45324 = b1a*t45221;
            double t45325 = b3a*t45223;
            double t45326 = b2a*c*t45200;
            double t45327 = b4a*t45226*t45185;
            double t45328 = t45324+t45325+t45326+t45327;
            double t45329 = 1/t45328;
            double t45330 = t45323*t45329*(1.0/2.0);
            double t45331 = t45330+1.0;
            double t45332 = log(t45331);
            double t45333 = a1a*c*t45200;
            double t45334 = t45333+1.0;
            double t45335 = Aa*t45321*t45322*t45332*t45334*t45249*(4.0/9.0);
            double t45336 = a1p*c*t45250*t45237*t45238*t45239*(2.0/3.0);
            double t45337 = a1p*c*c0p*t45240*t45238*(4.0/3.0);
            double t45338 = t45298-t45299;
            double t45339 = t45253*t45338*t45249;
            double t45340 = t45339+t45299;
            double t45341 = 1/pow(rho_a[index],1.0E1);
            double t45342 = 1/(t45206*t45206*t45206);
            double t45343 = ccab1*gamma_aa[index]*gcab*t45203*t45204*t45341*t45342*(3.2E1/9.0);
            double t45344 = 1/(t45206*t45206);
            double t45345 = t45209*t45209;
            double t45346 = 1/(t45212*t45212*t45212);
            double t45347 = ccab2*t45203*t45204*t45208*t45345*t45346*2.0;
            double t45348 = t45270*t45255*t45266*t45285;
            double t45349 = a1p*c*c0p*t45265*t45196*(2.0/3.0);
            double t45351 = t45272*t45286*t45269*t45198;
            double t45354 = a1f*c*c0f*t45265*t45284*(2.0/3.0);
            double t45350 = -t45351-t45354+t45348+t45349;
            double t45352 = 1/t45302;
            double t45353 = 1/t45305;
            double t45355 = t45350*t45253*t45249;
            double t45356 = t45351+t45355-t45349;
            double t45357 = gx*gx;
            double t45358 = gamma_aa[index]*gx*t45202;
            double t45359 = t45358+1.0;
            double t45364 = gamma_aa[index]*gx*t45214*(1.6E1/3.0);
            double t45365 = t45203*t45213*t45357*(1.6E1/3.0);
            double t45360 = t45364+t45365;
            double t45361 = gamma_aa[index]*gx*t45202*2.0;
            double t45362 = t45203*t45208*t45357;
            double t45363 = t45361+t45362+1.0;
            double t45366 = 1/(t45363*t45363);
            double t45367 = 1/t45359;
            double t45368 = 1/t45363;
            double t45369 = 1/(t45359*t45359);
            double t45370 = ccaa1*gamma_aa[index]*gcaa*t45202*t45352;
            double t45371 = ccaa2*t45300*t45203*t45208*t45353;
            double t45372 = ccaa0+t45370+t45371;
            double t45373 = 1/(t45261*t45261*t45261);
            double t45374 = b4f*t45202*t45185*(1.0E1/9.0);
            double t45375 = b2f*c*t45271*(4.0/9.0);
            double t45376 = b3f*t45202*t45185*t45268*(1.0/1.2E1);
            double t45377 = b1f*c*t45271*t45268*(2.0/9.0);
            double t45378 = b3f*c*t45271*t45183*(2.0/3.0);
            double t45379 = t45374+t45375+t45376+t45377+t45378-b1f*t45202*t45273*t45185*(1.0/3.6E1);
            double t45380 = t45270*t45255*t45285*t45379;
            double t45382 = t45272*t45294*t45286*t45198;
            double t45383 = 1/(t45264*t45264);
            double t45384 = 1/(t45261*t45261*t45261*t45261);
            double t45385 = t45255*t45256*t45383*t45384*t45278*(1.0/2.0);
            double t45386 = t45283*t45187*t45295*t45296*t45198*(1.0/2.0);
            double t45387 = a1f*c*t45270*t45265*t45266*t45285*(2.0/3.0);
            double t45388 = a1p*c*t45272*t45265*t45286*t45269*(2.0/3.0);
            double t45389 = 1/(t45302*t45302);
            double t45390 = gamma_aa[index]*gcaa*t45214*(1.6E1/3.0);
            double t45391 = t45300*t45203*t45213*(1.6E1/3.0);
            double t45392 = t45390+t45391;
            double t45393 = 1/(t45305*t45305);
            double t45394 = ccaa1*gamma_aa[index]*gcaa*t45214*t45352*(8.0/3.0);
            double t45395 = ccaa2*t45300*t45203*t45213*t45353*(1.6E1/3.0);
            double t45396 = t45394+t45395-ccaa1*t45300*t45203*t45213*t45389*(8.0/3.0)-ccaa2*t45300*t45203*t45208* \
               t45392*t45393;
            v_rho_a_rho_a_[index] = t45340*t45396*2.0-t45372*t45356*2.0+(rho_a[index]*t45340*2.0-c0p*rho_a[index]* \
               t45240*t45233*4.0)*(t45343+t45347+ccab2*t45220*t45203*t45204*t45207*(3.2E1/9.0)-ccab1*t45203*t45204* \
               t45207*t45344*(3.2E1/9.0)-ccab2*1/pow(rho_a[index],3.8E1/3.0)*(t45203*t45203)*(t45204*t45204)*t45218* \
               (3.2E1/9.0)-ccab2*t45203*t45204*t45213*t45209*t45218*(1.6E1/3.0))+t45308*(t45337-rho_a[index]*(t45382+ \
               t45386-t45288-t45297+t45388+t45253*t45249*(t45380+t45385+t45288+t45297+t45387-t45270*t45255*t45373* \
               t45278*2.0-t45272*t45294*t45286*t45198-a1f*c*c0f*t45271*t45284*(8.0/9.0)-t45283*t45187*t45295*t45296* \
               t45198*(1.0/2.0)-a1p*c*t45272*t45265*t45286*t45269*(2.0/3.0)))+rho_a[index]*(t45320+t45316+t45335+ \
               t45336-t45233*t45317*t45237*t45246*2.0-a1p*c*c0p*t45240*t45235*(8.0/9.0))*2.0+t45350*t45253*t45249* \
               2.0-t45250*t45233*t45237*t45239*2.0+t45272*t45286*t45269*t45198*2.0-a1p*c*c0p*t45265*t45196*(4.0/3.0) \
               )-(ccab1*gamma_aa[index]*gcab*t45214*t45219*(4.0/3.0)+ccab2*t45220*t45203*t45204*t45213*(8.0/3.0)- \
               ccab1*t45203*t45204*t45213*t45344*(4.0/3.0)-ccab2*t45203*t45204*t45208*t45209*t45218)*(t45339+t45299+ \
               rho_a[index]*t45356-rho_a[index]*(t45250*t45233*t45237*t45239-a1p*c*c0p*t45240*t45238*(2.0/3.0))*2.0- \
               c0p*t45240*t45233*2.0)*4.0+(rho_a[index]*(t45299+t45253*t45249*(t45298-c0p*t45196*t45198*2.0))*2.0- \
               c0p*rho_a[index]*t45240*t45233*4.0)*(t45343+t45347+ccab1*gamma_aa[index]*gcab*t45217*t45219*(4.4E1/ \
               9.0)+ccab2*t45220*t45203*t45204*t45207*(4.0E1/3.0)-ccab1*t45203*t45204*t45207*t45344*(7.6E1/9.0)-ccab2* \
               t45203*t45204*t45213*t45209*t45218*(1.6E1/3.0)-ccab2*t45203*t45204*t45208*t45218*(gamma_aa[index]* \
               gcab*t45217*(8.8E1/9.0)+t45203*t45204*t45207*(4.0E1/3.0)))+t45308*(t45337+rho_a[index]*(t45320+t45316- \
               t45335+t45336-t45233*t45317*t45237*t45246*2.0-a1p*c*c0p*t45240*t45235*(8.0/9.0))*2.0-t45250*t45233* \
               t45237*t45239*2.0)+c0*t45186*(cx0+cx1*gamma_aa[index]*gx*t45202*t45367+cx2*t45203*t45208*t45357*t45368) \
               *(4.0/9.0)-rho_a[index]*t45340*(ccaa1*gamma_aa[index]*gcaa*t45217*t45352*(8.8E1/9.0)+ccaa2*t45300* \
               t45203*t45207*t45353*(3.04E2/9.0)-ccaa1*t45300*t45203*t45207*t45389*2.4E1-ccaa2*t45300*t45203*t45213* \
               t45392*t45393*(3.2E1/3.0)-ccaa2*t45300*t45203*t45208*t45393*(gamma_aa[index]*gcaa*t45217*(1.76E2/9.0) \
               +t45300*t45203*t45207*(3.04E2/9.0))+ccaa2*t45300*t45203*1/(t45305*t45305*t45305)*t45208*(t45392*t45392) \
               *2.0+ccaa1*gamma_aa[index]*gcaa*t45300*t45203*1/(t45302*t45302*t45302)*t45341*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t45217*t45367*(8.8E1/9.0)-cx1*t45203*t45207*t45357*t45369*2.4E1+cx2*t45203* \
               t45207*t45357*t45368*(3.04E2/9.0)-cx2*t45203*t45213*t45360*t45357*t45366*(3.2E1/3.0)-cx2*t45203*t45208* \
               t45357*t45366*(gamma_aa[index]*gx*t45217*(1.76E2/9.0)+t45203*t45207*t45357*(3.04E2/9.0))+cx2*t45203* \
               (t45360*t45360)*t45208*1/(t45363*t45363*t45363)*t45357*2.0+cx1*gamma_aa[index]*gx*t45203*t45341*t45357* \
               1/(t45359*t45359*t45359)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t45214* \
               t45367*(8.0/3.0)-cx1*t45203*t45213*t45357*t45369*(8.0/3.0)+cx2*t45203*t45213*t45357*t45368*(1.6E1/ \
               3.0)-cx2*t45203*t45360*t45208*t45357*t45366)*(8.0/3.0)+rho_a[index]*t45372*(t45382+t45386-t45288-t45297+ \
               t45388+t45253*t45249*(t45380-t45382+t45385-t45386+t45288+t45297+t45387-t45388-t45270*t45255*t45373* \
               t45278*2.0-a1f*c*c0f*t45271*t45284*(8.0/9.0)))+rho_a[index]*t45356*t45396*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t45398 = 1/pow(rho_a[index],8.0/3.0);
                double t45399 = gcab*gcab;
                double t45400 = 1/pow(rho_a[index],1.6E1/3.0);
                double t45401 = gamma_aa[index]*gcab*t45398;
                double t45402 = t45401+1.0;
                double t45403 = gamma_aa[index]*gamma_aa[index];
                double t45404 = gamma_aa[index]*gcab*t45398*2.0;
                double t45405 = t45400*t45403*t45399;
                double t45406 = t45404+t45405+1.0;
                double t45407 = rho_a[index]*2.0;
                double t45408 = 1/pow(t45407,1.0/3.0);
                double t45409 = c*t45408;
                double t45410 = sqrt(t45409);
                double t45411 = b1p*t45410;
                double t45412 = pow(t45409,3.0/2.0);
                double t45413 = b3p*t45412;
                double t45414 = b2p*c*t45408;
                double t45415 = c*c;
                double t45416 = 1/pow(t45407,2.0/3.0);
                double t45417 = b4p*t45415*t45416;
                double t45418 = t45411+t45413+t45414+t45417;
                double t45419 = 1/pow(t45407,4.0/3.0);
                double t45420 = 1/c0p;
                double t45421 = 1/t45418;
                double t45422 = t45420*t45421*(1.0/2.0);
                double t45423 = t45422+1.0;
                double t45424 = 1/pow(rho_a[index],1.0/3.0);
                double t45425 = c*t45424;
                double t45426 = sqrt(t45425);
                double t45427 = b1f*t45426;
                double t45428 = pow(t45425,3.0/2.0);
                double t45429 = b3f*t45428;
                double t45430 = 1/pow(rho_a[index],2.0/3.0);
                double t45431 = b4f*t45430*t45415;
                double t45432 = b2f*c*t45424;
                double t45433 = t45431+t45432+t45427+t45429;
                double t45434 = 1/pow(rho_a[index],4.0/3.0);
                double t45435 = b1p*t45426;
                double t45436 = b3p*t45428;
                double t45437 = b4p*t45430*t45415;
                double t45438 = b2p*c*t45424;
                double t45439 = t45435+t45436+t45437+t45438;
                double t45440 = 1/pow(rho_a[index],5.0/3.0);
                double t45441 = 1/sqrt(t45425);
                double t45442 = 1/c0f;
                double t45443 = 1/t45433;
                double t45444 = t45442*t45443*(1.0/2.0);
                double t45445 = t45444+1.0;
                double t45446 = 1/t45439;
                double t45447 = t45420*t45446*(1.0/2.0);
                double t45448 = t45447+1.0;
                double t45449 = a1p*c*t45424;
                double t45450 = t45449+1.0;
                double t45451 = 1/t45448;
                double t45452 = 1/(t45439*t45439);
                double t45453 = b4p*t45440*t45415*(2.0/3.0);
                double t45454 = b2p*c*t45434*(1.0/3.0);
                double t45455 = b1p*c*t45441*t45434*(1.0/6.0);
                double t45456 = b3p*c*t45434*t45426*(1.0/2.0);
                double t45457 = t45453+t45454+t45455+t45456;
                double t45458 = t45450*t45451*t45452*t45457;
                double t45459 = log(t45448);
                double t45460 = log(t45423);
                double t45461 = a1p*c*t45408;
                double t45462 = t45461+1.0;
                double t45463 = pow(2.0,1.0/3.0);
                double t45464 = t45463*2.0;
                double t45465 = t45464-2.0;
                double t45466 = two_13*2.0;
                double t45467 = t45466-2.0;
                double t45468 = 1/t45467;
                double t45469 = log(t45445);
                double t45470 = a1f*c*t45424;
                double t45471 = t45470+1.0;
                double t45472 = c0f*t45471*t45469*2.0;
                double t45474 = c0p*t45450*t45459*2.0;
                double t45473 = t45472-t45474;
                double t45475 = gcaa*gcaa;
                double t45476 = gamma_aa[index]*gcaa*t45398;
                double t45477 = t45476+1.0;
                double t45478 = gamma_aa[index]*gcaa*t45398*2.0;
                double t45479 = t45400*t45403*t45475;
                double t45480 = t45478+t45479+1.0;
                double t45481 = t45473*t45465*t45468;
                double t45482 = t45481+t45474;
                double t45483 = 1/t45406;
                double t45484 = 1/pow(rho_a[index],1.9E1/3.0);
                double t45485 = 1/(t45402*t45402);
                double t45486 = 1/(t45406*t45406);
                double t45487 = gcab*t45398;
                double t45488 = gamma_aa[index]*t45400*t45399;
                double t45489 = t45487+t45488;
                double t45490 = 1/pow(rho_a[index],1.1E1/3.0);
                double t45491 = gamma_aa[index]*gcab*t45490*(8.0/3.0);
                double t45492 = t45403*t45484*t45399*(8.0/3.0);
                double t45493 = t45491+t45492;
                double t45494 = rho_a[index]*t45482*2.0;
                double t45495 = t45494-c0p*rho_a[index]*t45460*t45462*4.0;
                double t45496 = 1/t45402;
                double t45497 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t45498 = 1/(t45402*t45402*t45402);
                double t45499 = ccab2*gamma_aa[index]*t45400*t45493*t45486*t45399;
                double t45500 = ccab2*t45403*t45484*t45486*t45399*t45489*(8.0/3.0);
                double t45501 = 1/(t45406*t45406*t45406);
                double t45502 = 1/t45477;
                double t45503 = 1/t45480;
                double t45504 = 1/(t45477*t45477);
                double t45505 = 1/(t45480*t45480);
                double t45506 = gcaa*t45398*2.0;
                double t45507 = gamma_aa[index]*t45400*t45475*2.0;
                double t45508 = t45506+t45507;
                double t45509 = gamma_aa[index]*gcaa*t45490*(1.6E1/3.0);
                double t45510 = t45403*t45475*t45484*(1.6E1/3.0);
                double t45511 = t45510+t45509;
                double t45512 = gx*gx;
                double t45513 = gamma_aa[index]*gx*t45398;
                double t45514 = t45513+1.0;
                double t45515 = gamma_aa[index]*gx*t45398*2.0;
                double t45516 = t45400*t45403*t45512;
                double t45517 = t45515+t45516+1.0;
                double t45518 = 1/t45445;
                double t45519 = 1/(t45433*t45433);
                double t45520 = b4f*t45440*t45415*(2.0/3.0);
                double t45521 = b2f*c*t45434*(1.0/3.0);
                double t45522 = b1f*c*t45441*t45434*(1.0/6.0);
                double t45523 = b3f*c*t45434*t45426*(1.0/2.0);
                double t45524 = t45520+t45521+t45522+t45523;
                double t45525 = a1f*c*c0f*t45434*t45469*(2.0/3.0);
                double t45526 = a1p*c*c0p*t45434*t45459*(2.0/3.0);
                double t45527 = ccaa1*gcaa*t45502*t45398;
                double t45528 = ccaa2*gamma_aa[index]*t45400*t45503*t45475*2.0;
                double t45529 = t45527+t45528-ccaa1*gamma_aa[index]*t45400*t45504*t45475-ccaa2*t45400*t45403*t45505* \
                   t45508*t45475;
                double t45530 = 1/t45514;
                double t45531 = 1/t45517;
                double t45532 = 1/(t45514*t45514);
                double t45533 = 1/(t45517*t45517);
                double t45534 = gx*t45398*2.0;
                double t45535 = gamma_aa[index]*t45400*t45512*2.0;
                double t45536 = t45534+t45535;
                double t45537 = gamma_aa[index]*gx*t45490*(1.6E1/3.0);
                double t45538 = t45403*t45512*t45484*(1.6E1/3.0);
                double t45539 = t45537+t45538;
                v_rho_a_gamma_aa_[index] = -t45482*t45529+t45495*(t45500+t45499-ccab2*gamma_aa[index]*t45483*t45484* \
                   t45399*(4.0/3.0)+ccab1*gamma_aa[index]*t45484*t45485*t45399*(4.0/3.0)+ccab2*gamma_aa[index]*1/pow(rho_a[index],3.5E1/ \
                   3.0)*t45403*t45486*(t45399*t45399)*(4.0/3.0)-ccab1*gcab*t45403*t45497*t45399*t45498*(4.0/3.0)-ccab2* \
                   t45400*t45501*t45403*t45493*t45399*t45489*2.0)+t45495*(t45500+t45499-ccab1*gcab*t45490*t45496*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t45483*t45484*t45399*4.0+ccab1*gamma_aa[index]*t45484*t45485*t45399*(8.0/ \
                   3.0)+ccab2*t45400*t45403*t45486*t45399*(gcab*t45490*(8.0/3.0)+gamma_aa[index]*t45484*t45399*4.0)-ccab1* \
                   gcab*t45403*t45497*t45399*t45498*(4.0/3.0)-ccab2*t45400*t45501*t45403*t45493*t45399*t45489*2.0)-(ccab1* \
                   gcab*t45496*t45398*(1.0/2.0)+ccab2*gamma_aa[index]*t45400*t45483*t45399-ccab1*gamma_aa[index]*t45400* \
                   t45485*t45399*(1.0/2.0)-ccab2*t45400*t45403*t45486*t45399*t45489)*(rho_a[index]*((t45462*1/(t45418* \
                   t45418)*(b4p*t45415*1/pow(t45407,5.0/3.0)*(2.0/3.0)+b2p*c*t45419*(1.0/3.0)+b3p*c*t45410*t45419*(1.0/ \
                   2.0)+b1p*c*1/sqrt(t45409)*t45419*(1.0/6.0)))/t45423-a1p*c*c0p*t45460*t45419*(2.0/3.0))*2.0+rho_a[index]* \
                   (t45526-t45458+t45465*t45468*(t45525+t45458-t45524*t45471*t45518*t45519-a1p*c*c0p*t45434*t45459*(2.0/ \
                   3.0)))+c0p*t45460*t45462*2.0-c0p*t45450*t45459*2.0-t45473*t45465*t45468)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t45530*t45398-cx1*gamma_aa[index]*t45400*t45512*t45532+cx2*gamma_aa[index]*t45400*t45512* \
                   t45531*2.0-cx2*t45400*t45403*t45512*t45533*t45536)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t45530*t45490*(8.0/3.0)-cx1*gamma_aa[index]*t45512*t45532*t45484*8.0+cx2*gamma_aa[index]*t45512*t45531* \
                   t45484*(3.2E1/3.0)-cx2*t45403*t45512*t45533*t45536*t45484*(1.6E1/3.0)+cx1*gx*t45403*t45512*1/(t45514* \
                   t45514*t45514)*t45497*(1.6E1/3.0)-cx2*t45400*t45403*t45512*t45533*(gx*t45490*(1.6E1/3.0)+gamma_aa[index]* \
                   t45512*t45484*(3.2E1/3.0))-cx2*gamma_aa[index]*t45400*t45512*t45533*t45539*2.0+cx2*t45400*t45403*t45512* \
                   1/(t45517*t45517*t45517)*t45536*t45539*2.0)+rho_a[index]*t45529*(t45526-t45458+t45465*t45468*(t45525- \
                   t45526+t45458-t45524*t45471*t45518*t45519))+rho_a[index]*t45482*(ccaa1*gcaa*t45502*t45490*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t45504*t45475*t45484*8.0+ccaa2*gamma_aa[index]*t45503*t45475*t45484*(3.2E1/ \
                   3.0)-ccaa2*t45403*t45505*t45508*t45475*t45484*(1.6E1/3.0)+ccaa1*gcaa*t45403*t45475*1/(t45477*t45477* \
                   t45477)*t45497*(1.6E1/3.0)-ccaa2*t45400*t45403*t45505*t45475*(gcaa*t45490*(1.6E1/3.0)+gamma_aa[index]* \
                   t45475*t45484*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t45400*t45511*t45505*t45475*2.0+ccaa2*t45400*t45403* \
                   t45511*1/(t45480*t45480*t45480)*t45508*t45475*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t45541 = 1/pow(rho_a[index],1.0/3.0);
                double t45542 = c*t45541;
                double t45543 = sqrt(t45542);
                double t45544 = pow(t45542,3.0/2.0);
                double t45545 = c*c;
                double t45546 = 1/pow(rho_a[index],2.0/3.0);
                double t45547 = 1/c0p;
                double t45548 = b1p*t45543;
                double t45549 = b3p*t45544;
                double t45550 = b4p*t45545*t45546;
                double t45551 = b2p*c*t45541;
                double t45552 = t45550+t45551+t45548+t45549;
                double t45553 = 1/t45552;
                double t45554 = t45553*t45547*(1.0/2.0);
                double t45555 = t45554+1.0;
                double t45556 = log(t45555);
                double t45557 = a1p*c*t45541;
                double t45558 = t45557+1.0;
                double t45559 = rho_a[index]*2.0;
                double t45560 = 1/pow(t45559,1.0/3.0);
                double t45561 = c*t45560;
                double t45562 = gcab*gcab;
                double t45563 = 1/pow(rho_a[index],1.6E1/3.0);
                double t45564 = 1/pow(rho_a[index],8.0/3.0);
                double t45565 = gamma_aa[index]*gcab*t45564;
                double t45566 = t45565+1.0;
                double t45567 = gamma_aa[index]*gamma_aa[index];
                double t45568 = gamma_aa[index]*gcab*t45564*2.0;
                double t45569 = t45562*t45563*t45567;
                double t45570 = t45568+t45569+1.0;
                double t45572 = gcab*t45564;
                double t45573 = gamma_aa[index]*t45562*t45563;
                double t45571 = t45572+t45573;
                double t45574 = 1/(t45570*t45570);
                double t45575 = pow(2.0,1.0/3.0);
                double t45576 = t45575*2.0;
                double t45577 = t45576-2.0;
                double t45578 = two_13*2.0;
                double t45579 = t45578-2.0;
                double t45580 = 1/t45579;
                double t45581 = 1/c0f;
                double t45582 = b1f*t45543;
                double t45583 = b3f*t45544;
                double t45584 = b4f*t45545*t45546;
                double t45585 = b2f*c*t45541;
                double t45586 = t45582+t45583+t45584+t45585;
                double t45587 = 1/t45586;
                double t45588 = t45581*t45587*(1.0/2.0);
                double t45589 = t45588+1.0;
                double t45590 = log(t45589);
                double t45591 = a1f*c*t45541;
                double t45592 = t45591+1.0;
                double t45593 = c0f*t45590*t45592*2.0;
                double t45594 = c0p*t45556*t45558*2.0;
                double t45595 = gcaa*gcaa;
                double t45596 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t45597 = gamma_aa[index]*gcaa*t45564;
                double t45598 = t45597+1.0;
                double t45599 = 1/pow(rho_a[index],3.2E1/3.0);
                double t45600 = gamma_aa[index]*gcaa*t45564*2.0;
                double t45601 = t45563*t45567*t45595;
                double t45602 = t45600+t45601+1.0;
                double t45604 = gcaa*t45564*2.0;
                double t45605 = gamma_aa[index]*t45563*t45595*2.0;
                double t45603 = t45604+t45605;
                double t45606 = 1/(t45602*t45602);
                double t45607 = gx*gx;
                double t45608 = gamma_aa[index]*gx*t45564;
                double t45609 = t45608+1.0;
                double t45610 = gamma_aa[index]*gx*t45564*2.0;
                double t45611 = t45607*t45563*t45567;
                double t45612 = t45610+t45611+1.0;
                double t45614 = gx*t45564*2.0;
                double t45615 = gamma_aa[index]*t45607*t45563*2.0;
                double t45613 = t45614+t45615;
                double t45616 = 1/(t45612*t45612);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t45594+t45580*t45577*(t45593-c0p*t45556*t45558*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t45547*(1.0/2.0))/(b1p*sqrt(t45561)+b3p*pow(t45561,3.0/2.0)+b4p*t45545* \
                   1/pow(t45559,2.0/3.0)+b2p*c*t45560)+1.0)*(a1p*c*t45560+1.0)*4.0)*((ccab2*t45562*t45563*(1.0/2.0))/ \
                   t45570-ccab1*t45562*t45563*1/(t45566*t45566)*(1.0/2.0)-ccab2*(t45562*t45562)*t45574*t45567*t45599* \
                   (1.0/2.0)+ccab1*gamma_aa[index]*gcab*t45562*1/(t45566*t45566*t45566)*t45596*(1.0/2.0)+ccab2*1/(t45570* \
                   t45570*t45570)*t45562*(t45571*t45571)*t45563*t45567*2.0-ccab2*gamma_aa[index]*t45562*t45571*t45563* \
                   t45574*2.0)*4.0-rho_a[index]*(t45594+t45580*t45577*(t45593-t45594))*((ccaa2*t45563*t45595*2.0)/t45602- \
                   ccaa1*t45563*t45595*1/(t45598*t45598)*2.0-ccaa2*t45606*t45567*(t45595*t45595)*t45599*2.0+ccaa1*gamma_aa[index]* \
                   gcaa*t45595*t45596*1/(t45598*t45598*t45598)*2.0+ccaa2*1/(t45602*t45602*t45602)*(t45603*t45603)*t45563* \
                   t45567*t45595*2.0-ccaa2*gamma_aa[index]*t45603*t45606*t45563*t45595*4.0)*2.0-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*t45607*t45563*1/(t45609*t45609)*2.0-(cx2*t45607*t45563*2.0)/t45612+cx2*(t45607*t45607)*t45616* \
                   t45567*t45599*2.0-cx1*gamma_aa[index]*gx*t45607*1/(t45609*t45609*t45609)*t45596*2.0-cx2*1/(t45612* \
                   t45612*t45612)*(t45613*t45613)*t45607*t45563*t45567*2.0+cx2*gamma_aa[index]*t45613*t45607*t45616*t45563* \
                   4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void B97_D2_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t41394 = 1/pow(rho_a[index],8.0/3.0);
            double t41395 = gamma_aa[index]*t41394*(1.0/2.0);
            double t41396 = 1/pow(rho_b[index],8.0/3.0);
            double t41397 = gamma_bb[index]*t41396*(1.0/2.0);
            double t41392 = t41395+t41397;
            double t41393 = gcab*gcab;
            double t41398 = t41392*t41392;
            double t41399 = 1/pow(rho_a[index],1.0/3.0);
            double t41400 = c*t41399;
            double t41401 = sqrt(t41400);
            double t41402 = pow(t41400,3.0/2.0);
            double t41403 = c*c;
            double t41404 = 1/pow(rho_a[index],2.0/3.0);
            double t41405 = 1/c0p;
            double t41406 = b1p*t41401;
            double t41407 = b3p*t41402;
            double t41408 = b4p*t41403*t41404;
            double t41409 = b2p*c*t41399;
            double t41410 = t41406+t41407+t41408+t41409;
            double t41411 = 1/t41410;
            double t41412 = t41411*t41405*(1.0/2.0);
            double t41413 = t41412+1.0;
            double t41414 = log(t41413);
            double t41415 = a1p*c*t41399;
            double t41416 = t41415+1.0;
            double t41417 = pow(2.0,1.0/3.0);
            double t41418 = t41417*2.0;
            double t41419 = t41418-2.0;
            double t41420 = two_13*2.0;
            double t41421 = t41420-2.0;
            double t41422 = 1/t41421;
            double t41423 = 1/c0f;
            double t41424 = 1/pow(rho_b[index],1.0/3.0);
            double t41425 = c*t41424;
            double t41426 = sqrt(t41425);
            double t41427 = pow(t41425,3.0/2.0);
            double t41428 = 1/pow(rho_b[index],2.0/3.0);
            double t41429 = b1p*t41426;
            double t41430 = b3p*t41427;
            double t41431 = b4p*t41403*t41428;
            double t41432 = b2p*c*t41424;
            double t41433 = t41430+t41431+t41432+t41429;
            double t41434 = 1/t41433;
            double t41435 = t41405*t41434*(1.0/2.0);
            double t41436 = t41435+1.0;
            double t41437 = log(t41436);
            double t41438 = a1p*c*t41424;
            double t41439 = t41438+1.0;
            double t41440 = c0p*t41437*t41439*2.0;
            double t41441 = rho_a[index]+rho_b[index];
            double t41442 = 1/pow(t41441,1.0/3.0);
            double t41443 = c*t41442;
            double t41444 = sqrt(t41443);
            double t41445 = pow(t41443,3.0/2.0);
            double t41446 = 1/pow(t41441,2.0/3.0);
            double t41447 = b1p*t41444;
            double t41448 = b3p*t41445;
            double t41449 = b4p*t41403*t41446;
            double t41450 = b2p*c*t41442;
            double t41451 = t41450+t41447+t41448+t41449;
            double t41452 = 1/t41451;
            double t41453 = t41405*t41452*(1.0/2.0);
            double t41454 = t41453+1.0;
            double t41455 = log(t41454);
            double t41456 = a1p*c*t41442;
            double t41457 = t41456+1.0;
            double t41458 = c0p*t41455*t41457*2.0;
            double t41459 = rho_a[index]-rho_b[index];
            double t41460 = t41459*t41459;
            double t41461 = 1/t41441;
            double t41462 = t41461*t41459;
            double t41463 = 1/(t41441*t41441*t41441*t41441);
            double t41464 = t41460*t41460;
            double t41465 = t41462+1.0;
            double t41466 = pow(t41465,4.0/3.0);
            double t41467 = -t41462+1.0;
            double t41468 = pow(t41467,4.0/3.0);
            double t41469 = t41466+t41468-2.0;
            double t41470 = c0p*t41414*t41416*2.0;
            double t41471 = gamma_aa[index]*gamma_aa[index];
            double t41472 = gx*gx;
            double t41473 = 1/pow(rho_a[index],1.6E1/3.0);
            double t41474 = gamma_bb[index]*gamma_bb[index];
            double t41475 = 1/pow(rho_b[index],1.6E1/3.0);
            double t41476 = b1f*t41401;
            double t41477 = b3f*t41402;
            double t41478 = b4f*t41403*t41404;
            double t41479 = b2f*c*t41399;
            double t41480 = t41476+t41477+t41478+t41479;
            double t41481 = 1/t41480;
            double t41482 = t41423*t41481*(1.0/2.0);
            double t41483 = t41482+1.0;
            double t41484 = log(t41483);
            double t41485 = a1f*c*t41399;
            double t41486 = t41485+1.0;
            double t41487 = t41470-c0f*t41484*t41486*2.0;
            double t41488 = t41470-t41422*t41419*t41487;
            double t41489 = gcaa*gcaa;
            double t41490 = b1f*t41426;
            double t41491 = b3f*t41427;
            double t41492 = b4f*t41403*t41428;
            double t41493 = b2f*c*t41424;
            double t41494 = t41490+t41491+t41492+t41493;
            double t41495 = 1/t41494;
            double t41496 = t41423*t41495*(1.0/2.0);
            double t41497 = t41496+1.0;
            double t41498 = log(t41497);
            double t41499 = a1f*c*t41424;
            double t41500 = t41499+1.0;
            double t41501 = t41440-c0f*t41500*t41498*2.0;
            double t41502 = t41440-t41501*t41422*t41419;
            functional_[index] = (ccab0+(ccab1*gcab*t41392)/(gcab*t41392+1.0)+(ccab2*t41393*t41398)/(gcab*t41392* \
               2.0+t41393*t41398+1.0))*(rho_b[index]*t41502+rho_a[index]*t41488-t41441*(t41458-t41422*t41463*t41464* \
               t41469*(t41458-c0f*log((t41423*(1.0/2.0))/(b1f*t41444+b3f*t41445+b2f*c*t41442+b4f*t41403*t41446)+1.0) \
               *(a1f*c*t41442+1.0)*2.0)+(Aa*t41422*t41469*log((1.0/2.0)/(Aa*(b1a*t41444+b3a*t41445+b2a*c*t41442+b4a* \
               t41403*t41446))+1.0)*(t41463*t41464-1.0)*(a1a*c*t41442+1.0)*2.0)/d2fz0))-rho_a[index]*t41488*(ccaa0+ \
               (ccaa2*t41471*t41473*t41489)/(gamma_aa[index]*gcaa*t41394*2.0+t41471*t41473*t41489+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t41394)/(gamma_aa[index]*gcaa*t41394+1.0))-rho_b[index]*t41502*(ccaa0+(ccaa2*t41474*t41475*t41489) \
               /(gamma_bb[index]*gcaa*t41396*2.0+t41474*t41475*t41489+1.0)+(ccaa1*gamma_bb[index]*gcaa*t41396)/(gamma_bb[index]* \
               gcaa*t41396+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t41471*t41472*t41473)/(gamma_aa[index]*gx* \
               t41394*2.0+t41471*t41472*t41473+1.0)+(cx1*gamma_aa[index]*gx*t41394)/(gamma_aa[index]*gx*t41394+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t41472*t41474*t41475)/(gamma_bb[index]*gx*t41396*2.0+t41472* \
               t41474*t41475+1.0)+(cx1*gamma_bb[index]*gx*t41396)/(gamma_bb[index]*gx*t41396+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t44510 = 1/pow(rho_a[index],8.0/3.0);
            double t44511 = gamma_aa[index]*gamma_aa[index];
            double t44512 = gx*gx;
            double t44513 = 1/pow(rho_a[index],1.6E1/3.0);
            double t44514 = 1/pow(rho_a[index],1.0/3.0);
            double t44515 = c*t44514;
            double t44516 = sqrt(t44515);
            double t44517 = pow(t44515,3.0/2.0);
            double t44518 = c*c;
            double t44519 = 1/pow(rho_a[index],2.0/3.0);
            double t44520 = 1/c0p;
            double t44521 = b1p*t44516;
            double t44522 = b3p*t44517;
            double t44523 = b4p*t44518*t44519;
            double t44524 = b2p*c*t44514;
            double t44525 = t44521+t44522+t44523+t44524;
            double t44526 = 1/t44525;
            double t44527 = t44520*t44526*(1.0/2.0);
            double t44528 = t44527+1.0;
            double t44529 = log(t44528);
            double t44530 = a1p*c*t44514;
            double t44531 = t44530+1.0;
            double t44532 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44516+ \
               b3f*t44517+b2f*c*t44514+b4f*t44518*t44519))+1.0)*(a1f*c*t44514+1.0)*2.0-c0p*t44531*t44529*2.0))/(two_13* \
               2.0-2.0)+c0p*t44531*t44529*2.0)*(ccaa0+(ccaa2*t44511*t44513*t44532)/(gamma_aa[index]*gcaa*t44510*2.0+ \
               t44511*t44513*t44532+1.0)+(ccaa1*gamma_aa[index]*gcaa*t44510)/(gamma_aa[index]*gcaa*t44510+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t44511*t44512*t44513)/(gamma_aa[index]*gx*t44510*2.0+t44511*t44512* \
               t44513+1.0)+(cx1*gamma_aa[index]*gx*t44510)/(gamma_aa[index]*gx*t44510+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t44099 = 1/pow(rho_b[index],8.0/3.0);
            double t44100 = gamma_bb[index]*gamma_bb[index];
            double t44101 = gx*gx;
            double t44102 = 1/pow(rho_b[index],1.6E1/3.0);
            double t44103 = 1/pow(rho_b[index],1.0/3.0);
            double t44104 = c*t44103;
            double t44105 = sqrt(t44104);
            double t44106 = pow(t44104,3.0/2.0);
            double t44107 = c*c;
            double t44108 = 1/pow(rho_b[index],2.0/3.0);
            double t44109 = 1/c0p;
            double t44110 = b1p*t44105;
            double t44111 = b3p*t44106;
            double t44112 = b4p*t44107*t44108;
            double t44113 = b2p*c*t44103;
            double t44114 = t44110+t44111+t44112+t44113;
            double t44115 = 1/t44114;
            double t44116 = t44115*t44109*(1.0/2.0);
            double t44117 = t44116+1.0;
            double t44118 = log(t44117);
            double t44119 = a1p*c*t44103;
            double t44120 = t44119+1.0;
            double t44121 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44105+ \
               b3f*t44106+b2f*c*t44103+b4f*t44107*t44108))+1.0)*(a1f*c*t44103+1.0)*2.0-c0p*t44120*t44118*2.0))/(two_13* \
               2.0-2.0)+c0p*t44120*t44118*2.0)*(ccaa0+(ccaa2*t44100*t44102*t44121)/(gamma_bb[index]*gcaa*t44099*2.0+ \
               t44100*t44102*t44121+1.0)+(ccaa1*gamma_bb[index]*gcaa*t44099)/(gamma_bb[index]*gcaa*t44099+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t44100*t44101*t44102)/(gamma_bb[index]*gx*t44099*2.0+t44100*t44101* \
               t44102+1.0)+(cx1*gamma_bb[index]*gx*t44099)/(gamma_bb[index]*gx*t44099+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t41504 = 1/pow(rho_a[index],1.0/3.0);
            double t41505 = c*t41504;
            double t41506 = sqrt(t41505);
            double t41507 = pow(t41505,3.0/2.0);
            double t41508 = c*c;
            double t41509 = 1/pow(rho_a[index],2.0/3.0);
            double t41510 = 1/c0p;
            double t41511 = b1p*t41506;
            double t41512 = b3p*t41507;
            double t41513 = b4p*t41508*t41509;
            double t41514 = b2p*c*t41504;
            double t41515 = t41511+t41512+t41513+t41514;
            double t41516 = 1/t41515;
            double t41517 = t41510*t41516*(1.0/2.0);
            double t41518 = t41517+1.0;
            double t41519 = log(t41518);
            double t41520 = a1p*c*t41504;
            double t41521 = t41520+1.0;
            double t41522 = 1/pow(rho_a[index],8.0/3.0);
            double t41523 = gamma_aa[index]*gamma_aa[index];
            double t41524 = gcaa*gcaa;
            double t41525 = 1/pow(rho_a[index],1.6E1/3.0);
            double t41528 = gamma_aa[index]*t41522*(1.0/2.0);
            double t41529 = 1/pow(rho_b[index],8.0/3.0);
            double t41530 = gamma_bb[index]*t41529*(1.0/2.0);
            double t41526 = t41530+t41528;
            double t41527 = gcab*gcab;
            double t41531 = t41526*t41526;
            double t41532 = rho_a[index]+rho_b[index];
            double t41533 = 1/pow(t41532,1.0/3.0);
            double t41534 = c*t41533;
            double t41535 = sqrt(t41534);
            double t41536 = b1p*t41535;
            double t41537 = pow(t41534,3.0/2.0);
            double t41538 = b3p*t41537;
            double t41539 = 1/pow(t41532,2.0/3.0);
            double t41540 = b4p*t41508*t41539;
            double t41541 = b2p*c*t41533;
            double t41542 = t41540+t41541+t41536+t41538;
            double t41543 = 1/pow(t41532,4.0/3.0);
            double t41544 = two_13*2.0;
            double t41545 = t41544-2.0;
            double t41546 = 1/t41545;
            double t41547 = 1/c0f;
            double t41548 = 1/t41542;
            double t41549 = t41510*t41548*(1.0/2.0);
            double t41550 = t41549+1.0;
            double t41551 = a1p*c*t41533;
            double t41552 = t41551+1.0;
            double t41553 = rho_a[index]-rho_b[index];
            double t41554 = t41553*t41553;
            double t41555 = 1/t41532;
            double t41556 = t41553*t41555;
            double t41557 = b1f*t41535;
            double t41558 = b3f*t41537;
            double t41559 = b4f*t41508*t41539;
            double t41560 = b2f*c*t41533;
            double t41561 = t41560+t41557+t41558+t41559;
            double t41562 = 1/t41561;
            double t41563 = t41562*t41547*(1.0/2.0);
            double t41564 = t41563+1.0;
            double t41565 = log(t41564);
            double t41566 = a1f*c*t41533;
            double t41567 = t41566+1.0;
            double t41568 = log(t41550);
            double t41578 = c0f*t41565*t41567*2.0;
            double t41579 = c0p*t41552*t41568*2.0;
            double t41569 = t41578-t41579;
            double t41570 = t41556+1.0;
            double t41571 = pow(t41570,4.0/3.0);
            double t41572 = -t41556+1.0;
            double t41573 = pow(t41572,4.0/3.0);
            double t41574 = t41571+t41573-2.0;
            double t41575 = 1/(t41532*t41532);
            double t41606 = t41553*t41575;
            double t41576 = -t41606+t41555;
            double t41577 = 1/(t41532*t41532*t41532*t41532);
            double t41580 = t41554*t41554;
            double t41581 = 1/pow(t41532,5.0/3.0);
            double t41582 = 1/sqrt(t41534);
            double t41583 = 1/t41550;
            double t41584 = 1/(t41542*t41542);
            double t41585 = b4p*t41508*t41581*(2.0/3.0);
            double t41586 = b2p*c*t41543*(1.0/3.0);
            double t41587 = b1p*c*t41543*t41582*(1.0/6.0);
            double t41588 = b3p*c*t41543*t41535*(1.0/2.0);
            double t41589 = t41585+t41586+t41587+t41588;
            double t41590 = t41552*t41583*t41584*t41589;
            double t41591 = 1/(t41532*t41532*t41532*t41532*t41532);
            double t41592 = 1/d2fz0;
            double t41593 = 1/Aa;
            double t41594 = b1a*t41535;
            double t41595 = b3a*t41537;
            double t41596 = b4a*t41508*t41539;
            double t41597 = b2a*c*t41533;
            double t41598 = t41594+t41595+t41596+t41597;
            double t41599 = 1/t41598;
            double t41600 = t41593*t41599*(1.0/2.0);
            double t41601 = t41600+1.0;
            double t41602 = log(t41601);
            double t41603 = a1a*c*t41533;
            double t41604 = t41603+1.0;
            double t41605 = pow(t41570,1.0/3.0);
            double t41607 = t41605*t41576*(4.0/3.0);
            double t41608 = pow(t41572,1.0/3.0);
            double t41609 = t41607-t41608*t41576*(4.0/3.0);
            double t41610 = t41580*t41577;
            double t41611 = t41610-1.0;
            double t41612 = pow(2.0,1.0/3.0);
            double t41613 = t41612*2.0;
            double t41614 = t41613-2.0;
            double t41615 = a1f*c*t41504;
            double t41616 = t41615+1.0;
            double t41617 = b1f*t41506;
            double t41618 = b3f*t41507;
            double t41619 = b4f*t41508*t41509;
            double t41620 = b2f*c*t41504;
            double t41621 = t41620+t41617+t41618+t41619;
            double t41622 = 1/t41621;
            double t41623 = t41622*t41547*(1.0/2.0);
            double t41624 = t41623+1.0;
            double t41625 = 1/pow(rho_a[index],4.0/3.0);
            double t41626 = 1/pow(rho_a[index],5.0/3.0);
            double t41627 = 1/sqrt(t41505);
            double t41628 = log(t41624);
            double t41629 = 1/t41518;
            double t41630 = 1/(t41515*t41515);
            double t41631 = b4p*t41508*t41626*(2.0/3.0);
            double t41632 = b2p*c*t41625*(1.0/3.0);
            double t41633 = b1p*c*t41625*t41627*(1.0/6.0);
            double t41634 = b3p*c*t41506*t41625*(1.0/2.0);
            double t41635 = t41631+t41632+t41633+t41634;
            double t41636 = t41521*t41630*t41635*t41629;
            double t41637 = c0f*t41616*t41628*2.0;
            double t41638 = c0p*t41521*t41519*2.0;
            double t41639 = t41637-t41638;
            double t41640 = 1/pow(rho_b[index],1.0/3.0);
            double t41641 = c*t41640;
            double t41642 = sqrt(t41641);
            double t41643 = pow(t41641,3.0/2.0);
            double t41644 = 1/pow(rho_b[index],2.0/3.0);
            double t41645 = b1p*t41642;
            double t41646 = b3p*t41643;
            double t41647 = b4p*t41508*t41644;
            double t41648 = b2p*c*t41640;
            double t41649 = t41645+t41646+t41647+t41648;
            double t41650 = 1/t41649;
            double t41651 = t41510*t41650*(1.0/2.0);
            double t41652 = t41651+1.0;
            double t41653 = log(t41652);
            double t41654 = a1p*c*t41640;
            double t41655 = t41654+1.0;
            double t41656 = c0p*t41653*t41655*2.0;
            double t41657 = t41580*t41546*t41574*t41577*t41569;
            double t41658 = Aa*t41602*t41611*t41604*t41546*t41574*t41592*2.0;
            double t41659 = gcab*t41526;
            double t41660 = t41659+1.0;
            double t41661 = 1/t41660;
            double t41662 = 1/pow(rho_a[index],1.1E1/3.0);
            double t41663 = t41531*t41527;
            double t41664 = gcab*t41526*2.0;
            double t41665 = t41663+t41664+1.0;
            double t41666 = 1/t41665;
            double t41667 = gx*gx;
            double t41668 = gamma_aa[index]*gx*t41522;
            double t41669 = t41668+1.0;
            double t41670 = 1/t41669;
            double t41671 = gamma_aa[index]*gx*t41522*2.0;
            double t41672 = t41523*t41525*t41667;
            double t41673 = t41671+t41672+1.0;
            double t41674 = 1/t41673;
            double t41675 = 1/pow(rho_a[index],1.9E1/3.0);
            double t41676 = 1/t41624;
            double t41677 = 1/(t41621*t41621);
            double t41678 = b4f*t41508*t41626*(2.0/3.0);
            double t41679 = b2f*c*t41625*(1.0/3.0);
            double t41680 = b1f*c*t41625*t41627*(1.0/6.0);
            double t41681 = b3f*c*t41506*t41625*(1.0/2.0);
            double t41682 = t41680+t41681+t41678+t41679;
            double t41683 = a1f*c*c0f*t41625*t41628*(2.0/3.0);
            double t41684 = a1p*c*c0p*t41625*t41519*(2.0/3.0);
            double t41685 = gamma_aa[index]*gcaa*t41522;
            double t41686 = t41685+1.0;
            double t41687 = 1/t41686;
            double t41688 = ccaa1*gamma_aa[index]*gcaa*t41522*t41687;
            double t41689 = gamma_aa[index]*gcaa*t41522*2.0;
            double t41690 = t41523*t41524*t41525;
            double t41691 = t41690+t41689+1.0;
            double t41692 = 1/t41691;
            double t41693 = ccaa2*t41523*t41524*t41525*t41692;
            double t41694 = ccaa0+t41693+t41688;
            double t41695 = t41614*t41546*t41639;
            double t41696 = t41638+t41695;
            v_rho_a_[index] = -t41694*(t41638+t41614*t41546*(t41637-c0p*t41521*t41519*2.0))-(ccab0+ccab1*gcab* \
               t41526*t41661+ccab2*t41531*t41527*t41666)*(-t41638+t41657+t41658+t41579+t41532*(t41590-t41580*t41546* \
               t41574*t41577*(t41590-(1/(t41561*t41561)*t41567*(b2f*c*t41543*(1.0/3.0)+b4f*t41508*t41581*(2.0/3.0) \
               +b1f*c*t41543*t41582*(1.0/6.0)+b3f*c*t41543*t41535*(1.0/2.0)))/t41564+a1f*c*c0f*t41543*t41565*(2.0/ \
               3.0)-a1p*c*c0p*t41543*t41568*(2.0/3.0))-a1p*c*c0p*t41543*t41568*(2.0/3.0)-t41580*t41546*t41591*t41574* \
               t41569*4.0+t41580*t41546*t41609*t41577*t41569+t41553*t41554*t41546*t41574*t41577*t41569*4.0-Aa*t41602* \
               t41604*t41546*t41574*t41592*(t41580*t41591*4.0-t41553*t41554*t41577*4.0)*2.0+Aa*t41602*t41611*t41604* \
               t41546*t41609*t41592*2.0+(t41611*t41604*t41546*t41574*t41592*1/(t41598*t41598)*(b2a*c*t41543*(1.0/ \
               3.0)+b4a*t41508*t41581*(2.0/3.0)+b1a*c*t41543*t41582*(1.0/6.0)+b3a*c*t41543*t41535*(1.0/2.0)))/t41601- \
               Aa*a1a*c*t41602*t41611*t41543*t41546*t41574*t41592*(2.0/3.0))+rho_a[index]*(-t41636+t41684+t41614* \
               t41546*(t41636+t41683-t41616*t41682*t41676*t41677-a1p*c*c0p*t41625*t41519*(2.0/3.0)))-t41614*t41546* \
               t41639)-(rho_a[index]*t41696+rho_b[index]*(t41656-t41614*t41546*(t41656-c0f*log((t41547*(1.0/2.0)) \
               /(b1f*t41642+b3f*t41643+b2f*c*t41640+b4f*t41508*t41644)+1.0)*(a1f*c*t41640+1.0)*2.0))-t41532*(t41657+ \
               t41658+t41579))*(ccab1*gamma_aa[index]*gcab*t41661*t41662*(4.0/3.0)-ccab2*t41531*t41527*1/(t41665* \
               t41665)*(gamma_aa[index]*gcab*t41662*(8.0/3.0)+gamma_aa[index]*t41526*t41527*t41662*(8.0/3.0))-ccab1* \
               gamma_aa[index]*1/(t41660*t41660)*t41526*t41527*t41662*(4.0/3.0)+ccab2*gamma_aa[index]*t41526*t41527* \
               t41662*t41666*(8.0/3.0))+rho_a[index]*t41696*(ccaa1*gamma_aa[index]*gcaa*t41662*t41687*(8.0/3.0)+ccaa2* \
               t41523*t41524*t41692*t41675*(1.6E1/3.0)-ccaa1*t41523*t41524*t41675*1/(t41686*t41686)*(8.0/3.0)-ccaa2* \
               t41523*t41524*t41525*1/(t41691*t41691)*(gamma_aa[index]*gcaa*t41662*(1.6E1/3.0)+t41523*t41524*t41675* \
               (1.6E1/3.0)))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t41522*t41670+cx2*t41523*t41525* \
               t41674*t41667)*(4.0/3.0)+rho_a[index]*t41694*(-t41636+t41684+t41614*t41546*(t41636+t41683-t41684-t41616* \
               t41682*t41676*t41677))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t41670*t41662*(8.0/3.0) \
               +cx2*t41523*t41674*t41675*t41667*(1.6E1/3.0)-cx1*t41523*t41675*t41667*1/(t41669*t41669)*(8.0/3.0)- \
               cx2*t41523*t41525*1/(t41673*t41673)*t41667*(gamma_aa[index]*gx*t41662*(1.6E1/3.0)+t41523*t41675*t41667* \
               (1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            double t44534 = 1/pow(rho_a[index],1.0/3.0);
            double t44535 = c*t44534;
            double t44536 = sqrt(t44535);
            double t44537 = pow(t44535,3.0/2.0);
            double t44538 = c*c;
            double t44539 = 1/pow(rho_a[index],2.0/3.0);
            double t44540 = 1/c0p;
            double t44541 = b1p*t44536;
            double t44542 = b3p*t44537;
            double t44543 = b4p*t44538*t44539;
            double t44544 = b2p*c*t44534;
            double t44545 = t44541+t44542+t44543+t44544;
            double t44546 = 1/t44545;
            double t44547 = t44540*t44546*(1.0/2.0);
            double t44548 = t44547+1.0;
            double t44549 = log(t44548);
            double t44550 = a1p*c*t44534;
            double t44551 = t44550+1.0;
            double t44552 = 1/pow(rho_a[index],8.0/3.0);
            double t44553 = gamma_aa[index]*gamma_aa[index];
            double t44554 = gcaa*gcaa;
            double t44555 = 1/pow(rho_a[index],1.6E1/3.0);
            double t44556 = gx*gx;
            double t44557 = gamma_aa[index]*gx*t44552;
            double t44558 = t44557+1.0;
            double t44559 = 1/t44558;
            double t44560 = gamma_aa[index]*gx*t44552*2.0;
            double t44561 = t44553*t44555*t44556;
            double t44562 = t44560+t44561+1.0;
            double t44563 = 1/t44562;
            double t44564 = 1/pow(rho_a[index],1.9E1/3.0);
            double t44565 = 1/pow(rho_a[index],1.1E1/3.0);
            double t44566 = pow(2.0,1.0/3.0);
            double t44567 = t44566*2.0;
            double t44568 = t44567-2.0;
            double t44569 = two_13*2.0;
            double t44570 = t44569-2.0;
            double t44571 = 1/t44570;
            double t44572 = a1f*c*t44534;
            double t44573 = t44572+1.0;
            double t44574 = 1/c0f;
            double t44575 = b1f*t44536;
            double t44576 = b3f*t44537;
            double t44577 = b4f*t44538*t44539;
            double t44578 = b2f*c*t44534;
            double t44579 = t44575+t44576+t44577+t44578;
            double t44580 = 1/t44579;
            double t44581 = t44580*t44574*(1.0/2.0);
            double t44582 = t44581+1.0;
            double t44583 = 1/pow(rho_a[index],4.0/3.0);
            double t44584 = 1/pow(rho_a[index],5.0/3.0);
            double t44585 = 1/sqrt(t44535);
            double t44586 = log(t44582);
            double t44587 = 1/t44548;
            double t44588 = 1/(t44545*t44545);
            double t44589 = b4p*t44538*t44584*(2.0/3.0);
            double t44590 = b2p*c*t44583*(1.0/3.0);
            double t44591 = b1p*c*t44583*t44585*(1.0/6.0);
            double t44592 = b3p*c*t44536*t44583*(1.0/2.0);
            double t44593 = t44590+t44591+t44592+t44589;
            double t44594 = t44551*t44593*t44587*t44588;
            double t44595 = gamma_aa[index]*gcaa*t44552;
            double t44596 = t44595+1.0;
            double t44597 = 1/t44596;
            double t44598 = ccaa1*gamma_aa[index]*gcaa*t44552*t44597;
            double t44599 = gamma_aa[index]*gcaa*t44552*2.0;
            double t44600 = t44553*t44554*t44555;
            double t44601 = t44600+t44599+1.0;
            double t44602 = 1/t44601;
            double t44603 = ccaa2*t44602*t44553*t44554*t44555;
            double t44604 = ccaa0+t44603+t44598;
            double t44605 = c0f*t44573*t44586*2.0;
            double t44606 = c0p*t44551*t44549*2.0;
            v_rho_a_[index] = -t44604*(t44606+t44571*t44568*(t44605-c0p*t44551*t44549*2.0))+rho_a[index]*t44604* \
               (-t44594+t44571*t44568*(t44594-(t44573*1/(t44579*t44579)*(b2f*c*t44583*(1.0/3.0)+b4f*t44538*t44584* \
               (2.0/3.0)+b1f*c*t44583*t44585*(1.0/6.0)+b3f*c*t44536*t44583*(1.0/2.0)))/t44582+a1f*c*c0f*t44583*t44586* \
               (2.0/3.0)-a1p*c*c0p*t44583*t44549*(2.0/3.0))+a1p*c*c0p*t44583*t44549*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t44552*t44559+cx2*t44553*t44563*t44555*t44556)*(4.0/3.0)+rho_a[index]* \
               (t44606+t44571*t44568*(t44605-t44606))*(ccaa1*gamma_aa[index]*gcaa*t44565*t44597*(8.0/3.0)+ccaa2*t44602* \
               t44553*t44554*t44564*(1.6E1/3.0)-ccaa1*t44553*t44554*t44564*1/(t44596*t44596)*(8.0/3.0)-ccaa2*1/(t44601* \
               t44601)*t44553*t44554*t44555*(gamma_aa[index]*gcaa*t44565*(1.6E1/3.0)+t44553*t44554*t44564*(1.6E1/ \
               3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t44565*t44559*(8.0/3.0)+cx2*t44553*t44563* \
               t44564*t44556*(1.6E1/3.0)-cx1*t44553*t44564*t44556*1/(t44558*t44558)*(8.0/3.0)-cx2*t44553*1/(t44562* \
               t44562)*t44555*t44556*(gamma_aa[index]*gx*t44565*(1.6E1/3.0)+t44553*t44564*t44556*(1.6E1/3.0)));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t41698 = 1/pow(rho_b[index],1.0/3.0);
            double t41699 = c*t41698;
            double t41700 = sqrt(t41699);
            double t41701 = pow(t41699,3.0/2.0);
            double t41702 = c*c;
            double t41703 = 1/pow(rho_b[index],2.0/3.0);
            double t41704 = 1/c0p;
            double t41705 = b1p*t41700;
            double t41706 = b3p*t41701;
            double t41707 = b4p*t41702*t41703;
            double t41708 = b2p*c*t41698;
            double t41709 = t41705+t41706+t41707+t41708;
            double t41710 = 1/t41709;
            double t41711 = t41710*t41704*(1.0/2.0);
            double t41712 = t41711+1.0;
            double t41713 = log(t41712);
            double t41714 = a1p*c*t41698;
            double t41715 = t41714+1.0;
            double t41716 = 1/pow(rho_b[index],8.0/3.0);
            double t41717 = gamma_bb[index]*gamma_bb[index];
            double t41718 = gcaa*gcaa;
            double t41719 = 1/pow(rho_b[index],1.6E1/3.0);
            double t41722 = 1/pow(rho_a[index],8.0/3.0);
            double t41723 = gamma_aa[index]*t41722*(1.0/2.0);
            double t41724 = gamma_bb[index]*t41716*(1.0/2.0);
            double t41720 = t41723+t41724;
            double t41721 = gcab*gcab;
            double t41725 = t41720*t41720;
            double t41726 = rho_a[index]+rho_b[index];
            double t41727 = 1/pow(t41726,1.0/3.0);
            double t41728 = c*t41727;
            double t41729 = sqrt(t41728);
            double t41730 = b1p*t41729;
            double t41731 = pow(t41728,3.0/2.0);
            double t41732 = b3p*t41731;
            double t41733 = 1/pow(t41726,2.0/3.0);
            double t41734 = b4p*t41702*t41733;
            double t41735 = b2p*c*t41727;
            double t41736 = t41730+t41732+t41734+t41735;
            double t41737 = 1/pow(t41726,4.0/3.0);
            double t41738 = two_13*2.0;
            double t41739 = t41738-2.0;
            double t41740 = 1/t41739;
            double t41741 = 1/c0f;
            double t41742 = 1/t41736;
            double t41743 = t41704*t41742*(1.0/2.0);
            double t41744 = t41743+1.0;
            double t41745 = a1p*c*t41727;
            double t41746 = t41745+1.0;
            double t41747 = rho_a[index]-rho_b[index];
            double t41748 = t41747*t41747;
            double t41749 = 1/t41726;
            double t41750 = t41747*t41749;
            double t41751 = b1f*t41729;
            double t41752 = b3f*t41731;
            double t41753 = b4f*t41702*t41733;
            double t41754 = b2f*c*t41727;
            double t41755 = t41751+t41752+t41753+t41754;
            double t41756 = 1/t41755;
            double t41757 = t41741*t41756*(1.0/2.0);
            double t41758 = t41757+1.0;
            double t41759 = log(t41758);
            double t41760 = a1f*c*t41727;
            double t41761 = t41760+1.0;
            double t41762 = log(t41744);
            double t41773 = c0f*t41761*t41759*2.0;
            double t41774 = c0p*t41762*t41746*2.0;
            double t41763 = t41773-t41774;
            double t41764 = t41750+1.0;
            double t41765 = pow(t41764,4.0/3.0);
            double t41766 = -t41750+1.0;
            double t41767 = pow(t41766,4.0/3.0);
            double t41768 = t41765+t41767-2.0;
            double t41769 = 1/(t41726*t41726);
            double t41770 = t41747*t41769;
            double t41771 = t41770+t41749;
            double t41772 = 1/(t41726*t41726*t41726*t41726);
            double t41775 = t41748*t41748;
            double t41776 = 1/pow(t41726,5.0/3.0);
            double t41777 = 1/sqrt(t41728);
            double t41778 = 1/t41744;
            double t41779 = 1/(t41736*t41736);
            double t41780 = b4p*t41702*t41776*(2.0/3.0);
            double t41781 = b2p*c*t41737*(1.0/3.0);
            double t41782 = b1p*c*t41737*t41777*(1.0/6.0);
            double t41783 = b3p*c*t41737*t41729*(1.0/2.0);
            double t41784 = t41780+t41781+t41782+t41783;
            double t41785 = 1/(t41726*t41726*t41726*t41726*t41726);
            double t41786 = 1/d2fz0;
            double t41787 = 1/Aa;
            double t41788 = b1a*t41729;
            double t41789 = b3a*t41731;
            double t41790 = b4a*t41702*t41733;
            double t41791 = b2a*c*t41727;
            double t41792 = t41790+t41791+t41788+t41789;
            double t41793 = 1/t41792;
            double t41794 = t41793*t41787*(1.0/2.0);
            double t41795 = t41794+1.0;
            double t41796 = log(t41795);
            double t41797 = a1a*c*t41727;
            double t41798 = t41797+1.0;
            double t41799 = pow(t41764,1.0/3.0);
            double t41800 = t41771*t41799*(4.0/3.0);
            double t41801 = pow(t41766,1.0/3.0);
            double t41802 = t41800-t41801*t41771*(4.0/3.0);
            double t41803 = t41772*t41775;
            double t41804 = t41803-1.0;
            double t41805 = pow(2.0,1.0/3.0);
            double t41806 = t41805*2.0;
            double t41807 = t41806-2.0;
            double t41808 = a1f*c*t41698;
            double t41809 = t41808+1.0;
            double t41810 = b1f*t41700;
            double t41811 = b3f*t41701;
            double t41812 = b4f*t41702*t41703;
            double t41813 = b2f*c*t41698;
            double t41814 = t41810+t41811+t41812+t41813;
            double t41815 = 1/t41814;
            double t41816 = t41741*t41815*(1.0/2.0);
            double t41817 = t41816+1.0;
            double t41818 = 1/pow(rho_b[index],4.0/3.0);
            double t41819 = 1/pow(rho_b[index],5.0/3.0);
            double t41820 = 1/sqrt(t41699);
            double t41821 = log(t41817);
            double t41822 = 1/t41712;
            double t41823 = 1/(t41709*t41709);
            double t41824 = b4p*t41702*t41819*(2.0/3.0);
            double t41825 = b2p*c*t41818*(1.0/3.0);
            double t41826 = b1p*c*t41820*t41818*(1.0/6.0);
            double t41827 = b3p*c*t41700*t41818*(1.0/2.0);
            double t41828 = t41824+t41825+t41826+t41827;
            double t41829 = t41822*t41715*t41823*t41828;
            double t41830 = c0f*t41821*t41809*2.0;
            double t41831 = c0p*t41713*t41715*2.0;
            double t41832 = a1p*c*c0p*t41762*t41737*(2.0/3.0);
            double t41833 = 1/pow(rho_a[index],1.0/3.0);
            double t41834 = c*t41833;
            double t41835 = sqrt(t41834);
            double t41836 = pow(t41834,3.0/2.0);
            double t41837 = 1/pow(rho_a[index],2.0/3.0);
            double t41838 = b1p*t41835;
            double t41839 = b3p*t41836;
            double t41840 = b4p*t41702*t41837;
            double t41841 = b2p*c*t41833;
            double t41842 = t41840+t41841+t41838+t41839;
            double t41843 = 1/t41842;
            double t41844 = t41704*t41843*(1.0/2.0);
            double t41845 = t41844+1.0;
            double t41846 = log(t41845);
            double t41847 = a1p*c*t41833;
            double t41848 = t41847+1.0;
            double t41849 = c0p*t41846*t41848*2.0;
            double t41850 = t41830-t41831;
            double t41851 = t41740*t41763*t41772*t41775*t41768;
            double t41852 = Aa*t41740*t41804*t41768*t41786*t41796*t41798*2.0;
            double t41853 = gcab*t41720;
            double t41854 = t41853+1.0;
            double t41855 = 1/t41854;
            double t41856 = 1/pow(rho_b[index],1.1E1/3.0);
            double t41857 = t41721*t41725;
            double t41858 = gcab*t41720*2.0;
            double t41859 = t41857+t41858+1.0;
            double t41860 = 1/t41859;
            double t41861 = gx*gx;
            double t41862 = gamma_bb[index]*gx*t41716;
            double t41863 = t41862+1.0;
            double t41864 = 1/t41863;
            double t41865 = gamma_bb[index]*gx*t41716*2.0;
            double t41866 = t41717*t41861*t41719;
            double t41867 = t41865+t41866+1.0;
            double t41868 = 1/t41867;
            double t41869 = 1/pow(rho_b[index],1.9E1/3.0);
            double t41870 = 1/t41817;
            double t41871 = 1/(t41814*t41814);
            double t41872 = b4f*t41702*t41819*(2.0/3.0);
            double t41873 = b2f*c*t41818*(1.0/3.0);
            double t41874 = b1f*c*t41820*t41818*(1.0/6.0);
            double t41875 = b3f*c*t41700*t41818*(1.0/2.0);
            double t41876 = t41872+t41873+t41874+t41875;
            double t41877 = a1f*c*c0f*t41821*t41818*(2.0/3.0);
            double t41878 = a1p*c*c0p*t41713*t41818*(2.0/3.0);
            double t41879 = gamma_bb[index]*gcaa*t41716;
            double t41880 = t41879+1.0;
            double t41881 = 1/t41880;
            double t41882 = ccaa1*gamma_bb[index]*gcaa*t41716*t41881;
            double t41883 = gamma_bb[index]*gcaa*t41716*2.0;
            double t41884 = t41717*t41718*t41719;
            double t41885 = t41883+t41884+1.0;
            double t41886 = 1/t41885;
            double t41887 = ccaa2*t41717*t41718*t41719*t41886;
            double t41888 = ccaa0+t41882+t41887;
            double t41889 = t41740*t41850*t41807;
            double t41890 = t41831+t41889;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t41720*t41855+ccab2*t41721*t41725*t41860)*(-t41831+t41851+t41852+ \
               t41774+rho_b[index]*(-t41829+t41878+t41740*t41807*(t41829+t41877-t41870*t41871*t41809*t41876-a1p*c* \
               c0p*t41713*t41818*(2.0/3.0)))-t41726*(t41832-t41746*t41784*t41778*t41779+t41802*t41740*t41763*t41772* \
               t41775+t41740*t41763*t41775*t41785*t41768*4.0-t41740*t41772*t41775*t41768*(t41832-t41746*t41784*t41778* \
               t41779+(t41761*1/(t41755*t41755)*(b2f*c*t41737*(1.0/3.0)+b4f*t41702*t41776*(2.0/3.0)+b1f*c*t41737* \
               t41777*(1.0/6.0)+b3f*c*t41737*t41729*(1.0/2.0)))/t41758-a1f*c*c0f*t41737*t41759*(2.0/3.0))+t41740* \
               t41763*t41772*t41747*t41748*t41768*4.0+Aa*t41740*t41768*t41786*t41796*t41798*(t41775*t41785*4.0+t41772* \
               t41747*t41748*4.0)*2.0+Aa*t41802*t41740*t41804*t41786*t41796*t41798*2.0-(t41740*t41804*1/(t41792*t41792) \
               *t41768*t41786*t41798*(b2a*c*t41737*(1.0/3.0)+b4a*t41702*t41776*(2.0/3.0)+b1a*c*t41737*t41777*(1.0/ \
               6.0)+b3a*c*t41737*t41729*(1.0/2.0)))/t41795+Aa*a1a*c*t41740*t41804*t41737*t41768*t41786*t41796*(2.0/ \
               3.0))-t41740*t41850*t41807)-t41888*(t41831+t41740*t41807*(t41830-c0p*t41713*t41715*2.0))-(rho_b[index]* \
               t41890+rho_a[index]*(t41849-t41740*t41807*(t41849-c0f*log((t41741*(1.0/2.0))/(b1f*t41835+b3f*t41836+ \
               b2f*c*t41833+b4f*t41702*t41837)+1.0)*(a1f*c*t41833+1.0)*2.0))-t41726*(t41851+t41852+t41774))*(ccab1* \
               gamma_bb[index]*gcab*t41855*t41856*(4.0/3.0)-ccab2*t41721*t41725*1/(t41859*t41859)*(gamma_bb[index]* \
               gcab*t41856*(8.0/3.0)+gamma_bb[index]*t41720*t41721*t41856*(8.0/3.0))-ccab1*gamma_bb[index]*t41720* \
               t41721*1/(t41854*t41854)*t41856*(4.0/3.0)+ccab2*gamma_bb[index]*t41720*t41721*t41860*t41856*(8.0/3.0) \
               )+rho_b[index]*t41890*(ccaa1*gamma_bb[index]*gcaa*t41881*t41856*(8.0/3.0)+ccaa2*t41717*t41718*t41886* \
               t41869*(1.6E1/3.0)-ccaa1*t41717*t41718*1/(t41880*t41880)*t41869*(8.0/3.0)-ccaa2*t41717*t41718*t41719* \
               1/(t41885*t41885)*(gamma_bb[index]*gcaa*t41856*(1.6E1/3.0)+t41717*t41718*t41869*(1.6E1/3.0)))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t41716*t41864+cx2*t41717*t41861*t41719*t41868)*(4.0/3.0)+rho_b[index]* \
               t41888*(-t41829+t41878+t41740*t41807*(t41829+t41877-t41878-t41870*t41871*t41809*t41876))-c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t41864*t41856*(8.0/3.0)+cx2*t41717*t41861*t41868*t41869*(1.6E1/3.0)-cx1* \
               t41717*t41861*1/(t41863*t41863)*t41869*(8.0/3.0)-cx2*t41717*t41861*t41719*1/(t41867*t41867)*(gamma_bb[index]* \
               gx*t41856*(1.6E1/3.0)+t41717*t41861*t41869*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t44124 = 1/pow(rho_b[index],1.0/3.0);
            double t44125 = c*t44124;
            double t44126 = sqrt(t44125);
            double t44127 = pow(t44125,3.0/2.0);
            double t44128 = c*c;
            double t44129 = 1/pow(rho_b[index],2.0/3.0);
            double t44130 = 1/c0p;
            double t44131 = b1p*t44126;
            double t44132 = b3p*t44127;
            double t44133 = b4p*t44128*t44129;
            double t44134 = b2p*c*t44124;
            double t44135 = t44131+t44132+t44133+t44134;
            double t44136 = 1/t44135;
            double t44137 = t44130*t44136*(1.0/2.0);
            double t44138 = t44137+1.0;
            double t44139 = log(t44138);
            double t44140 = a1p*c*t44124;
            double t44141 = t44140+1.0;
            double t44142 = 1/pow(rho_b[index],8.0/3.0);
            double t44143 = gamma_bb[index]*gamma_bb[index];
            double t44144 = gcaa*gcaa;
            double t44145 = 1/pow(rho_b[index],1.6E1/3.0);
            double t44146 = gx*gx;
            double t44147 = gamma_bb[index]*gx*t44142;
            double t44148 = t44147+1.0;
            double t44149 = 1/t44148;
            double t44150 = gamma_bb[index]*gx*t44142*2.0;
            double t44151 = t44143*t44145*t44146;
            double t44152 = t44150+t44151+1.0;
            double t44153 = 1/t44152;
            double t44154 = 1/pow(rho_b[index],1.9E1/3.0);
            double t44155 = 1/pow(rho_b[index],1.1E1/3.0);
            double t44156 = pow(2.0,1.0/3.0);
            double t44157 = t44156*2.0;
            double t44158 = t44157-2.0;
            double t44159 = two_13*2.0;
            double t44160 = t44159-2.0;
            double t44161 = 1/t44160;
            double t44162 = a1f*c*t44124;
            double t44163 = t44162+1.0;
            double t44164 = 1/c0f;
            double t44165 = b1f*t44126;
            double t44166 = b3f*t44127;
            double t44167 = b4f*t44128*t44129;
            double t44168 = b2f*c*t44124;
            double t44169 = t44165+t44166+t44167+t44168;
            double t44170 = 1/t44169;
            double t44171 = t44170*t44164*(1.0/2.0);
            double t44172 = t44171+1.0;
            double t44173 = 1/pow(rho_b[index],4.0/3.0);
            double t44174 = 1/pow(rho_b[index],5.0/3.0);
            double t44175 = 1/sqrt(t44125);
            double t44176 = log(t44172);
            double t44177 = 1/t44138;
            double t44178 = 1/(t44135*t44135);
            double t44179 = b4p*t44128*t44174*(2.0/3.0);
            double t44180 = b2p*c*t44173*(1.0/3.0);
            double t44181 = b1p*c*t44173*t44175*(1.0/6.0);
            double t44182 = b3p*c*t44126*t44173*(1.0/2.0);
            double t44183 = t44180+t44181+t44182+t44179;
            double t44184 = t44141*t44183*t44177*t44178;
            double t44185 = gamma_bb[index]*gcaa*t44142;
            double t44186 = t44185+1.0;
            double t44187 = 1/t44186;
            double t44188 = ccaa1*gamma_bb[index]*gcaa*t44142*t44187;
            double t44189 = gamma_bb[index]*gcaa*t44142*2.0;
            double t44190 = t44143*t44144*t44145;
            double t44191 = t44190+t44189+1.0;
            double t44192 = 1/t44191;
            double t44193 = ccaa2*t44143*t44144*t44145*t44192;
            double t44194 = ccaa0+t44193+t44188;
            double t44195 = c0f*t44163*t44176*2.0;
            double t44196 = c0p*t44141*t44139*2.0;
            v_rho_b_[index] = -t44194*(t44196+t44161*t44158*(t44195-c0p*t44141*t44139*2.0))+rho_b[index]*t44194* \
               (-t44184+t44161*t44158*(t44184-(t44163*1/(t44169*t44169)*(b2f*c*t44173*(1.0/3.0)+b4f*t44128*t44174* \
               (2.0/3.0)+b1f*c*t44173*t44175*(1.0/6.0)+b3f*c*t44126*t44173*(1.0/2.0)))/t44172+a1f*c*c0f*t44173*t44176* \
               (2.0/3.0)-a1p*c*c0p*t44173*t44139*(2.0/3.0))+a1p*c*c0p*t44173*t44139*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t44142*t44149+cx2*t44143*t44153*t44145*t44146)*(4.0/3.0)+rho_b[index]* \
               (t44196+t44161*t44158*(t44195-t44196))*(ccaa1*gamma_bb[index]*gcaa*t44155*t44187*(8.0/3.0)+ccaa2*t44143* \
               t44144*t44154*t44192*(1.6E1/3.0)-ccaa1*t44143*t44144*t44154*1/(t44186*t44186)*(8.0/3.0)-ccaa2*t44143* \
               t44144*t44145*1/(t44191*t44191)*(gamma_bb[index]*gcaa*t44155*(1.6E1/3.0)+t44143*t44144*t44154*(1.6E1/ \
               3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t44155*t44149*(8.0/3.0)+cx2*t44143*t44153* \
               t44154*t44146*(1.6E1/3.0)-cx1*t44143*t44154*t44146*1/(t44148*t44148)*(8.0/3.0)-cx2*t44143*1/(t44152* \
               t44152)*t44145*t44146*(gamma_bb[index]*gx*t44155*(1.6E1/3.0)+t44143*t44154*t44146*(1.6E1/3.0)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t41892 = 1/pow(rho_a[index],1.0/3.0);
                double t41893 = c*t41892;
                double t41894 = sqrt(t41893);
                double t41895 = pow(t41893,3.0/2.0);
                double t41896 = c*c;
                double t41897 = 1/pow(rho_a[index],2.0/3.0);
                double t41898 = 1/c0p;
                double t41899 = b1p*t41894;
                double t41900 = b3p*t41895;
                double t41901 = b4p*t41896*t41897;
                double t41902 = b2p*c*t41892;
                double t41903 = t41900+t41901+t41902+t41899;
                double t41904 = 1/t41903;
                double t41905 = t41904*t41898*(1.0/2.0);
                double t41906 = t41905+1.0;
                double t41907 = log(t41906);
                double t41908 = a1p*c*t41892;
                double t41909 = t41908+1.0;
                double t41910 = pow(2.0,1.0/3.0);
                double t41911 = t41910*2.0;
                double t41912 = t41911-2.0;
                double t41913 = two_13*2.0;
                double t41914 = t41913-2.0;
                double t41915 = 1/t41914;
                double t41916 = 1/c0f;
                double t41917 = 1/pow(rho_b[index],1.0/3.0);
                double t41918 = c*t41917;
                double t41919 = sqrt(t41918);
                double t41920 = pow(t41918,3.0/2.0);
                double t41921 = 1/pow(rho_b[index],2.0/3.0);
                double t41922 = b1p*t41919;
                double t41923 = b3p*t41920;
                double t41924 = b4p*t41921*t41896;
                double t41925 = b2p*c*t41917;
                double t41926 = t41922+t41923+t41924+t41925;
                double t41927 = 1/t41926;
                double t41928 = t41927*t41898*(1.0/2.0);
                double t41929 = t41928+1.0;
                double t41930 = log(t41929);
                double t41931 = a1p*c*t41917;
                double t41932 = t41931+1.0;
                double t41933 = c0p*t41930*t41932*2.0;
                double t41934 = rho_a[index]+rho_b[index];
                double t41935 = 1/pow(t41934,1.0/3.0);
                double t41936 = c*t41935;
                double t41937 = sqrt(t41936);
                double t41938 = pow(t41936,3.0/2.0);
                double t41939 = 1/pow(t41934,2.0/3.0);
                double t41940 = b1p*t41937;
                double t41941 = b3p*t41938;
                double t41942 = b4p*t41939*t41896;
                double t41943 = b2p*c*t41935;
                double t41944 = t41940+t41941+t41942+t41943;
                double t41945 = 1/t41944;
                double t41946 = t41945*t41898*(1.0/2.0);
                double t41947 = t41946+1.0;
                double t41948 = log(t41947);
                double t41949 = a1p*c*t41935;
                double t41950 = t41949+1.0;
                double t41951 = c0p*t41950*t41948*2.0;
                double t41952 = rho_a[index]-rho_b[index];
                double t41953 = t41952*t41952;
                double t41954 = 1/t41934;
                double t41955 = t41952*t41954;
                double t41956 = 1/(t41934*t41934*t41934*t41934);
                double t41957 = t41953*t41953;
                double t41958 = t41955+1.0;
                double t41959 = pow(t41958,4.0/3.0);
                double t41960 = -t41955+1.0;
                double t41961 = pow(t41960,4.0/3.0);
                double t41962 = t41961+t41959-2.0;
                double t41963 = 1/pow(rho_a[index],8.0/3.0);
                double t41964 = gamma_aa[index]*t41963*(1.0/2.0);
                double t41965 = 1/pow(rho_b[index],8.0/3.0);
                double t41966 = gamma_bb[index]*t41965*(1.0/2.0);
                double t41967 = t41964+t41966;
                double t41968 = gcab*t41967;
                double t41969 = t41968+1.0;
                double t41970 = gcab*gcab;
                double t41971 = t41967*t41967;
                double t41972 = t41970*t41971;
                double t41973 = gcab*t41967*2.0;
                double t41974 = t41972+t41973+1.0;
                double t41975 = c0p*t41907*t41909*2.0;
                double t41976 = gx*gx;
                double t41977 = 1/pow(rho_a[index],1.6E1/3.0);
                double t41978 = gamma_aa[index]*gx*t41963;
                double t41979 = t41978+1.0;
                double t41980 = gamma_aa[index]*gamma_aa[index];
                double t41981 = gamma_aa[index]*gx*t41963*2.0;
                double t41982 = t41980*t41976*t41977;
                double t41983 = t41981+t41982+1.0;
                double t41984 = b1f*t41894;
                double t41985 = b3f*t41895;
                double t41986 = b4f*t41896*t41897;
                double t41987 = b2f*c*t41892;
                double t41988 = t41984+t41985+t41986+t41987;
                double t41989 = 1/t41988;
                double t41990 = t41916*t41989*(1.0/2.0);
                double t41991 = t41990+1.0;
                double t41992 = log(t41991);
                double t41993 = a1f*c*t41892;
                double t41994 = t41993+1.0;
                double t41995 = t41975-c0f*t41992*t41994*2.0;
                double t41996 = t41975-t41912*t41915*t41995;
                double t41997 = gcaa*gcaa;
                double t41998 = gamma_aa[index]*gcaa*t41963;
                double t41999 = t41998+1.0;
                double t42000 = gamma_aa[index]*gcaa*t41963*2.0;
                double t42001 = t41980*t41977*t41997;
                double t42002 = t42000+t42001+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t41996+rho_b[index]*(t41933-t41912*t41915*(t41933-c0f*log((t41916* \
                   (1.0/2.0))/(b1f*t41919+b3f*t41920+b2f*c*t41917+b4f*t41921*t41896)+1.0)*(a1f*c*t41917+1.0)*2.0))-t41934* \
                   (t41951-t41915*t41962*t41956*t41957*(t41951-c0f*log((t41916*(1.0/2.0))/(b1f*t41937+b3f*t41938+b2f* \
                   c*t41935+b4f*t41939*t41896)+1.0)*(a1f*c*t41935+1.0)*2.0)+(Aa*t41915*t41962*log((1.0/2.0)/(Aa*(b1a* \
                   t41937+b3a*t41938+b2a*c*t41935+b4a*t41939*t41896))+1.0)*(t41956*t41957-1.0)*(a1a*c*t41935+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t41963*(1.0/2.0))/t41969-ccab2*t41970*t41971*1/(t41974*t41974)*(gcab*t41963+ \
                   t41970*t41963*t41967)+(ccab2*t41970*t41963*t41967)/t41974-ccab1*t41970*t41963*t41967*1/(t41969*t41969) \
                   *(1.0/2.0))-rho_a[index]*t41996*((ccaa1*gcaa*t41963)/t41999-ccaa1*gamma_aa[index]*t41977*t41997*1/ \
                   (t41999*t41999)+(ccaa2*gamma_aa[index]*t41977*t41997*2.0)/t42002-ccaa2*t41980*t41977*t41997*1/(t42002* \
                   t42002)*(gcaa*t41963*2.0+gamma_aa[index]*t41977*t41997*2.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx* \
                   t41963)/t41979-cx1*gamma_aa[index]*t41976*t41977*1/(t41979*t41979)+(cx2*gamma_aa[index]*t41976*t41977* \
                   2.0)/t41983-cx2*t41980*1/(t41983*t41983)*t41976*t41977*(gx*t41963*2.0+gamma_aa[index]*t41976*t41977* \
                   2.0));
            } else if (rho_a[index] > cutoff_) {
                double t44609 = 1/pow(rho_a[index],8.0/3.0);
                double t44610 = gx*gx;
                double t44611 = 1/pow(rho_a[index],1.6E1/3.0);
                double t44612 = gamma_aa[index]*gx*t44609;
                double t44613 = t44612+1.0;
                double t44614 = gamma_aa[index]*gamma_aa[index];
                double t44615 = gamma_aa[index]*gx*t44609*2.0;
                double t44616 = t44610*t44611*t44614;
                double t44617 = t44615+t44616+1.0;
                double t44618 = 1/pow(rho_a[index],1.0/3.0);
                double t44619 = c*t44618;
                double t44620 = sqrt(t44619);
                double t44621 = pow(t44619,3.0/2.0);
                double t44622 = c*c;
                double t44623 = 1/pow(rho_a[index],2.0/3.0);
                double t44624 = 1/c0p;
                double t44625 = b1p*t44620;
                double t44626 = b3p*t44621;
                double t44627 = b4p*t44622*t44623;
                double t44628 = b2p*c*t44618;
                double t44629 = t44625+t44626+t44627+t44628;
                double t44630 = 1/t44629;
                double t44631 = t44630*t44624*(1.0/2.0);
                double t44632 = t44631+1.0;
                double t44633 = log(t44632);
                double t44634 = a1p*c*t44618;
                double t44635 = t44634+1.0;
                double t44636 = gcaa*gcaa;
                double t44637 = gamma_aa[index]*gcaa*t44609;
                double t44638 = t44637+1.0;
                double t44639 = gamma_aa[index]*gcaa*t44609*2.0;
                double t44640 = t44611*t44614*t44636;
                double t44641 = t44640+t44639+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t44609)/t44613-cx1*gamma_aa[index]*t44610* \
                   t44611*1/(t44613*t44613)+(cx2*gamma_aa[index]*t44610*t44611*2.0)/t44617-cx2*t44610*t44611*t44614*1/ \
                   (t44617*t44617)*(gx*t44609*2.0+gamma_aa[index]*t44610*t44611*2.0))-rho_a[index]*(((pow(2.0,1.0/3.0) \
                   *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44620+b3f*t44621+b2f*c*t44618+b4f*t44622*t44623))+1.0)*(a1f* \
                   c*t44618+1.0)*2.0-c0p*t44633*t44635*2.0))/(two_13*2.0-2.0)+c0p*t44633*t44635*2.0)*((ccaa1*gcaa*t44609) \
                   /t44638+(ccaa2*gamma_aa[index]*t44611*t44636*2.0)/t44641-ccaa1*gamma_aa[index]*t44611*t44636*1/(t44638* \
                   t44638)-ccaa2*t44611*t44614*1/(t44641*t44641)*t44636*(gcaa*t44609*2.0+gamma_aa[index]*t44611*t44636* \
                   2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t42005 = 1/pow(rho_a[index],1.0/3.0);
                double t42006 = c*t42005;
                double t42007 = sqrt(t42006);
                double t42008 = pow(t42006,3.0/2.0);
                double t42009 = c*c;
                double t42010 = 1/pow(rho_a[index],2.0/3.0);
                double t42011 = 1/c0p;
                double t42012 = b1p*t42007;
                double t42013 = b3p*t42008;
                double t42014 = b4p*t42010*t42009;
                double t42015 = b2p*c*t42005;
                double t42016 = t42012+t42013+t42014+t42015;
                double t42017 = 1/t42016;
                double t42018 = t42011*t42017*(1.0/2.0);
                double t42019 = t42018+1.0;
                double t42020 = log(t42019);
                double t42021 = a1p*c*t42005;
                double t42022 = t42021+1.0;
                double t42023 = pow(2.0,1.0/3.0);
                double t42024 = t42023*2.0;
                double t42025 = t42024-2.0;
                double t42026 = two_13*2.0;
                double t42027 = t42026-2.0;
                double t42028 = 1/t42027;
                double t42029 = 1/c0f;
                double t42030 = 1/pow(rho_b[index],1.0/3.0);
                double t42031 = c*t42030;
                double t42032 = sqrt(t42031);
                double t42033 = pow(t42031,3.0/2.0);
                double t42034 = 1/pow(rho_b[index],2.0/3.0);
                double t42035 = b1p*t42032;
                double t42036 = b3p*t42033;
                double t42037 = b4p*t42034*t42009;
                double t42038 = b2p*c*t42030;
                double t42039 = t42035+t42036+t42037+t42038;
                double t42040 = 1/t42039;
                double t42041 = t42011*t42040*(1.0/2.0);
                double t42042 = t42041+1.0;
                double t42043 = log(t42042);
                double t42044 = a1p*c*t42030;
                double t42045 = t42044+1.0;
                double t42046 = c0p*t42043*t42045*2.0;
                double t42047 = rho_a[index]+rho_b[index];
                double t42048 = 1/pow(t42047,1.0/3.0);
                double t42049 = c*t42048;
                double t42050 = sqrt(t42049);
                double t42051 = pow(t42049,3.0/2.0);
                double t42052 = 1/pow(t42047,2.0/3.0);
                double t42053 = b1p*t42050;
                double t42054 = b3p*t42051;
                double t42055 = b4p*t42052*t42009;
                double t42056 = b2p*c*t42048;
                double t42057 = t42053+t42054+t42055+t42056;
                double t42058 = 1/t42057;
                double t42059 = t42011*t42058*(1.0/2.0);
                double t42060 = t42059+1.0;
                double t42061 = log(t42060);
                double t42062 = a1p*c*t42048;
                double t42063 = t42062+1.0;
                double t42064 = c0p*t42061*t42063*2.0;
                double t42065 = rho_a[index]-rho_b[index];
                double t42066 = t42065*t42065;
                double t42067 = 1/t42047;
                double t42068 = t42065*t42067;
                double t42069 = 1/(t42047*t42047*t42047*t42047);
                double t42070 = t42066*t42066;
                double t42071 = t42068+1.0;
                double t42072 = pow(t42071,4.0/3.0);
                double t42073 = -t42068+1.0;
                double t42074 = pow(t42073,4.0/3.0);
                double t42075 = t42072+t42074-2.0;
                double t42076 = 1/pow(rho_b[index],8.0/3.0);
                double t42077 = 1/pow(rho_a[index],8.0/3.0);
                double t42078 = gamma_aa[index]*t42077*(1.0/2.0);
                double t42079 = gamma_bb[index]*t42076*(1.0/2.0);
                double t42080 = t42078+t42079;
                double t42081 = gcab*t42080;
                double t42082 = t42081+1.0;
                double t42083 = gcab*gcab;
                double t42084 = t42080*t42080;
                double t42085 = t42083*t42084;
                double t42086 = gcab*t42080*2.0;
                double t42087 = t42085+t42086+1.0;
                double t42088 = c0p*t42020*t42022*2.0;
                double t42089 = gx*gx;
                double t42090 = 1/pow(rho_b[index],1.6E1/3.0);
                double t42091 = gamma_bb[index]*gx*t42076;
                double t42092 = t42091+1.0;
                double t42093 = gamma_bb[index]*gamma_bb[index];
                double t42094 = gamma_bb[index]*gx*t42076*2.0;
                double t42095 = t42090*t42093*t42089;
                double t42096 = t42094+t42095+1.0;
                double t42097 = b1f*t42032;
                double t42098 = b3f*t42033;
                double t42099 = b4f*t42034*t42009;
                double t42100 = b2f*c*t42030;
                double t42101 = t42100+t42097+t42098+t42099;
                double t42102 = 1/t42101;
                double t42103 = t42102*t42029*(1.0/2.0);
                double t42104 = t42103+1.0;
                double t42105 = log(t42104);
                double t42106 = a1f*c*t42030;
                double t42107 = t42106+1.0;
                double t42108 = t42046-c0f*t42105*t42107*2.0;
                double t42109 = t42046-t42025*t42108*t42028;
                double t42110 = gcaa*gcaa;
                double t42111 = gamma_bb[index]*gcaa*t42076;
                double t42112 = t42111+1.0;
                double t42113 = gamma_bb[index]*gcaa*t42076*2.0;
                double t42114 = t42110*t42090*t42093;
                double t42115 = t42113+t42114+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t42109+rho_a[index]*(t42088-t42025*t42028*(t42088-c0f*log((t42029* \
                   (1.0/2.0))/(b1f*t42007+b3f*t42008+b2f*c*t42005+b4f*t42010*t42009)+1.0)*(a1f*c*t42005+1.0)*2.0))-t42047* \
                   (t42064-t42070*t42028*t42075*t42069*(t42064-c0f*log((t42029*(1.0/2.0))/(b1f*t42050+b3f*t42051+b2f* \
                   c*t42048+b4f*t42052*t42009)+1.0)*(a1f*c*t42048+1.0)*2.0)+(Aa*t42028*t42075*log((1.0/2.0)/(Aa*(b1a* \
                   t42050+b3a*t42051+b2a*c*t42048+b4a*t42052*t42009))+1.0)*(t42070*t42069-1.0)*(a1a*c*t42048+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t42076*(1.0/2.0))/t42082-ccab2*t42083*t42084*1/(t42087*t42087)*(gcab*t42076+ \
                   t42080*t42083*t42076)-ccab1*t42080*1/(t42082*t42082)*t42083*t42076*(1.0/2.0)+(ccab2*t42080*t42083* \
                   t42076)/t42087)-rho_b[index]*t42109*((ccaa1*gcaa*t42076)/t42112-ccaa1*gamma_bb[index]*t42110*1/(t42112* \
                   t42112)*t42090+(ccaa2*gamma_bb[index]*t42110*t42090*2.0)/t42115-ccaa2*t42110*1/(t42115*t42115)*t42090* \
                   t42093*(gcaa*t42076*2.0+gamma_bb[index]*t42110*t42090*2.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1*gx* \
                   t42076)/t42092-cx1*gamma_bb[index]*t42090*1/(t42092*t42092)*t42089+(cx2*gamma_bb[index]*t42090*t42089* \
                   2.0)/t42096-cx2*t42090*t42093*1/(t42096*t42096)*t42089*(gx*t42076*2.0+gamma_bb[index]*t42090*t42089* \
                   2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t44200 = 1/pow(rho_b[index],8.0/3.0);
                double t44201 = gx*gx;
                double t44202 = 1/pow(rho_b[index],1.6E1/3.0);
                double t44203 = gamma_bb[index]*gx*t44200;
                double t44204 = t44203+1.0;
                double t44205 = gamma_bb[index]*gamma_bb[index];
                double t44206 = gamma_bb[index]*gx*t44200*2.0;
                double t44207 = t44201*t44202*t44205;
                double t44208 = t44206+t44207+1.0;
                double t44209 = 1/pow(rho_b[index],1.0/3.0);
                double t44210 = c*t44209;
                double t44211 = sqrt(t44210);
                double t44212 = pow(t44210,3.0/2.0);
                double t44213 = c*c;
                double t44214 = 1/pow(rho_b[index],2.0/3.0);
                double t44215 = 1/c0p;
                double t44216 = b1p*t44211;
                double t44217 = b3p*t44212;
                double t44218 = b4p*t44213*t44214;
                double t44219 = b2p*c*t44209;
                double t44220 = t44216+t44217+t44218+t44219;
                double t44221 = 1/t44220;
                double t44222 = t44221*t44215*(1.0/2.0);
                double t44223 = t44222+1.0;
                double t44224 = log(t44223);
                double t44225 = a1p*c*t44209;
                double t44226 = t44225+1.0;
                double t44227 = gcaa*gcaa;
                double t44228 = gamma_bb[index]*gcaa*t44200;
                double t44229 = t44228+1.0;
                double t44230 = gamma_bb[index]*gcaa*t44200*2.0;
                double t44231 = t44202*t44205*t44227;
                double t44232 = t44230+t44231+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t44200)/t44204-cx1*gamma_bb[index]*t44201* \
                   t44202*1/(t44204*t44204)+(cx2*gamma_bb[index]*t44201*t44202*2.0)/t44208-cx2*t44201*t44202*t44205*1/ \
                   (t44208*t44208)*(gx*t44200*2.0+gamma_bb[index]*t44201*t44202*2.0))-rho_b[index]*(((pow(2.0,1.0/3.0) \
                   *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44211+b3f*t44212+b2f*c*t44209+b4f*t44213*t44214))+1.0)*(a1f* \
                   c*t44209+1.0)*2.0-c0p*t44224*t44226*2.0))/(two_13*2.0-2.0)+c0p*t44224*t44226*2.0)*((ccaa1*gcaa*t44200) \
                   /t44229+(ccaa2*gamma_bb[index]*t44202*t44227*2.0)/t44232-ccaa1*gamma_bb[index]*t44202*t44227*1/(t44229* \
                   t44229)-ccaa2*t44202*t44205*1/(t44232*t44232)*t44227*(gcaa*t44200*2.0+gamma_bb[index]*t44202*t44227* \
                   2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t42119 = 1/pow(rho_a[index],1.0/3.0);
            double t42120 = c*t42119;
            double t42121 = sqrt(t42120);
            double t42122 = pow(t42120,3.0/2.0);
            double t42123 = c*c;
            double t42124 = 1/pow(rho_a[index],2.0/3.0);
            double t42125 = 1/c0p;
            double t42126 = b1p*t42121;
            double t42127 = b3p*t42122;
            double t42128 = b4p*t42123*t42124;
            double t42129 = b2p*c*t42119;
            double t42130 = t42126+t42127+t42128+t42129;
            double t42131 = 1/t42130;
            double t42132 = t42131*t42125*(1.0/2.0);
            double t42133 = t42132+1.0;
            double t42134 = log(t42133);
            double t42135 = a1p*c*t42119;
            double t42136 = t42135+1.0;
            double t42137 = 1/pow(rho_a[index],8.0/3.0);
            double t42138 = gamma_aa[index]*gamma_aa[index];
            double t42139 = gcaa*gcaa;
            double t42140 = 1/pow(rho_a[index],1.9E1/3.0);
            double t42141 = gamma_aa[index]*gcaa*t42137;
            double t42142 = t42141+1.0;
            double t42143 = 1/pow(rho_a[index],1.6E1/3.0);
            double t42144 = 1/pow(rho_a[index],1.1E1/3.0);
            double t42145 = gamma_aa[index]*gcaa*t42137*2.0;
            double t42146 = t42143*t42138*t42139;
            double t42147 = t42145+t42146+1.0;
            double t42150 = gamma_aa[index]*t42137*(1.0/2.0);
            double t42151 = 1/pow(rho_b[index],8.0/3.0);
            double t42152 = gamma_bb[index]*t42151*(1.0/2.0);
            double t42148 = t42150+t42152;
            double t42149 = gcab*gcab;
            double t42153 = t42148*t42148;
            double t42154 = rho_a[index]+rho_b[index];
            double t42155 = 1/pow(t42154,1.0/3.0);
            double t42156 = c*t42155;
            double t42157 = sqrt(t42156);
            double t42158 = b1p*t42157;
            double t42159 = pow(t42156,3.0/2.0);
            double t42160 = b3p*t42159;
            double t42161 = 1/pow(t42154,2.0/3.0);
            double t42162 = b4p*t42123*t42161;
            double t42163 = b2p*c*t42155;
            double t42164 = t42160+t42162+t42163+t42158;
            double t42165 = 1/pow(t42154,7.0/3.0);
            double t42166 = 1/pow(t42154,8.0/3.0);
            double t42167 = 1/sqrt(t42156);
            double t42168 = a1p*c*t42155;
            double t42169 = t42168+1.0;
            double t42170 = 1/t42164;
            double t42171 = t42125*t42170*(1.0/2.0);
            double t42172 = t42171+1.0;
            double t42173 = 1/t42172;
            double t42174 = 1/pow(t42154,4.0/3.0);
            double t42214 = 1/pow(t42154,5.0/3.0);
            double t42216 = b4p*t42123*t42214*(2.0/3.0);
            double t42217 = b2p*c*t42174*(1.0/3.0);
            double t42218 = b1p*c*t42174*t42167*(1.0/6.0);
            double t42219 = b3p*c*t42174*t42157*(1.0/2.0);
            double t42175 = t42216+t42217+t42218+t42219;
            double t42176 = two_13*2.0;
            double t42177 = t42176-2.0;
            double t42178 = 1/t42177;
            double t42179 = 1/c0f;
            double t42180 = rho_a[index]-rho_b[index];
            double t42181 = 1/t42154;
            double t42182 = t42180*t42181;
            double t42183 = b1f*t42157;
            double t42184 = b3f*t42159;
            double t42185 = b4f*t42123*t42161;
            double t42186 = b2f*c*t42155;
            double t42187 = t42183+t42184+t42185+t42186;
            double t42188 = 1/t42187;
            double t42189 = t42179*t42188*(1.0/2.0);
            double t42190 = t42189+1.0;
            double t42191 = log(t42190);
            double t42192 = a1f*c*t42155;
            double t42193 = t42192+1.0;
            double t42194 = log(t42172);
            double t42202 = c0f*t42191*t42193*2.0;
            double t42203 = c0p*t42194*t42169*2.0;
            double t42195 = t42202-t42203;
            double t42196 = t42180*t42180;
            double t42197 = t42182+1.0;
            double t42198 = pow(t42197,4.0/3.0);
            double t42199 = -t42182+1.0;
            double t42200 = pow(t42199,4.0/3.0);
            double t42201 = t42200+t42198-2.0;
            double t42204 = 1/(t42154*t42154);
            double t42208 = t42204*t42180;
            double t42205 = t42181-t42208;
            double t42206 = 1/(t42154*t42154*t42154*t42154);
            double t42207 = pow(t42197,1.0/3.0);
            double t42209 = t42205*t42207*(4.0/3.0);
            double t42210 = pow(t42199,1.0/3.0);
            double t42243 = t42210*t42205*(4.0/3.0);
            double t42211 = -t42243+t42209;
            double t42212 = 1/(t42154*t42154*t42154*t42154*t42154);
            double t42213 = t42196*t42196;
            double t42215 = 1/(t42164*t42164);
            double t42220 = 1/t42190;
            double t42221 = 1/(t42187*t42187);
            double t42222 = b4f*t42123*t42214*(2.0/3.0);
            double t42223 = b2f*c*t42174*(1.0/3.0);
            double t42224 = b1f*c*t42174*t42167*(1.0/6.0);
            double t42225 = b3f*c*t42174*t42157*(1.0/2.0);
            double t42226 = t42222+t42223+t42224+t42225;
            double t42227 = t42220*t42221*t42226*t42193;
            double t42228 = a1p*c*c0p*t42174*t42194*(2.0/3.0);
            double t42244 = t42215*t42173*t42175*t42169;
            double t42245 = a1f*c*c0f*t42191*t42174*(2.0/3.0);
            double t42229 = -t42244+t42227-t42245+t42228;
            double t42230 = t42175*t42175;
            double t42231 = 1/pow(t42156,3.0/2.0);
            double t42232 = b4p*t42123*t42166*(1.0E1/9.0);
            double t42233 = b2p*c*t42165*(4.0/9.0);
            double t42234 = b1p*c*t42165*t42167*(2.0/9.0);
            double t42235 = b3p*c*t42165*t42157*(2.0/3.0);
            double t42236 = b3p*t42123*t42166*t42167*(1.0/1.2E1);
            double t42237 = t42232+t42233+t42234+t42235+t42236-b1p*t42123*t42231*t42166*(1.0/3.6E1);
            double t42238 = 1/(t42164*t42164*t42164);
            double t42239 = t42230*t42173*t42238*t42169*2.0;
            double t42240 = t42226*t42226;
            double t42241 = 1/(t42172*t42172);
            double t42242 = 1/(t42164*t42164*t42164*t42164);
            double t42246 = t42204*2.0;
            double t42247 = 1/(t42154*t42154*t42154);
            double t42265 = t42180*t42247*2.0;
            double t42248 = t42246-t42265;
            double t42249 = t42205*t42205;
            double t42250 = a1p*c*c0p*t42165*t42194*(8.0/9.0);
            double t42251 = 1/(t42154*t42154*t42154*t42154*t42154*t42154);
            double t42252 = 1/d2fz0;
            double t42253 = 1/Aa;
            double t42254 = b1a*t42157;
            double t42255 = b3a*t42159;
            double t42256 = b4a*t42123*t42161;
            double t42257 = b2a*c*t42155;
            double t42258 = t42254+t42255+t42256+t42257;
            double t42259 = 1/t42258;
            double t42260 = t42253*t42259*(1.0/2.0);
            double t42261 = t42260+1.0;
            double t42262 = log(t42261);
            double t42263 = a1a*c*t42155;
            double t42264 = t42263+1.0;
            double t42266 = t42210*t42248*(4.0/3.0);
            double t42267 = 1/pow(t42197,2.0/3.0);
            double t42268 = t42249*t42267*(4.0/9.0);
            double t42269 = 1/pow(t42199,2.0/3.0);
            double t42270 = t42249*t42269*(4.0/9.0);
            double t42271 = t42270+t42266+t42268-t42207*t42248*(4.0/3.0);
            double t42272 = t42212*t42213*4.0;
            double t42284 = t42206*t42180*t42196*4.0;
            double t42273 = t42272-t42284;
            double t42274 = 1/t42261;
            double t42275 = t42213*t42206;
            double t42276 = t42275-1.0;
            double t42277 = 1/(t42258*t42258);
            double t42278 = b4a*t42123*t42214*(2.0/3.0);
            double t42279 = b2a*c*t42174*(1.0/3.0);
            double t42280 = b1a*c*t42174*t42167*(1.0/6.0);
            double t42281 = b3a*c*t42174*t42157*(1.0/2.0);
            double t42282 = t42280+t42281+t42278+t42279;
            double t42283 = t42282*t42282;
            double t42285 = pow(2.0,1.0/3.0);
            double t42286 = t42285*2.0;
            double t42287 = t42286-2.0;
            double t42288 = a1f*c*t42119;
            double t42289 = t42288+1.0;
            double t42290 = b1f*t42121;
            double t42291 = b3f*t42122;
            double t42292 = b4f*t42123*t42124;
            double t42293 = b2f*c*t42119;
            double t42294 = t42290+t42291+t42292+t42293;
            double t42295 = 1/t42294;
            double t42296 = t42295*t42179*(1.0/2.0);
            double t42297 = t42296+1.0;
            double t42298 = 1/pow(rho_a[index],4.0/3.0);
            double t42300 = 1/pow(rho_a[index],5.0/3.0);
            double t42301 = 1/sqrt(t42120);
            double t42307 = b4f*t42300*t42123*(2.0/3.0);
            double t42308 = b2f*c*t42298*(1.0/3.0);
            double t42309 = b1f*c*t42301*t42298*(1.0/6.0);
            double t42310 = b3f*c*t42121*t42298*(1.0/2.0);
            double t42299 = t42310+t42307+t42308+t42309;
            double t42312 = b4p*t42300*t42123*(2.0/3.0);
            double t42313 = b2p*c*t42298*(1.0/3.0);
            double t42314 = b1p*c*t42301*t42298*(1.0/6.0);
            double t42315 = b3p*c*t42121*t42298*(1.0/2.0);
            double t42302 = t42312+t42313+t42314+t42315;
            double t42303 = 1/t42297;
            double t42304 = 1/pow(rho_a[index],7.0/3.0);
            double t42305 = 1/t42133;
            double t42306 = 1/pow(t42120,3.0/2.0);
            double t42311 = t42299*t42299;
            double t42316 = t42302*t42302;
            double t42317 = log(t42297);
            double t42318 = 1/(t42294*t42294);
            double t42319 = 1/(t42130*t42130);
            double t42320 = 1/(t42130*t42130*t42130);
            double t42321 = t42320*t42305*t42136*t42316*2.0;
            double t42322 = b4p*t42123*t42137*(1.0E1/9.0);
            double t42323 = b2p*c*t42304*(4.0/9.0);
            double t42324 = b3p*t42301*t42123*t42137*(1.0/1.2E1);
            double t42325 = b1p*c*t42301*t42304*(2.0/9.0);
            double t42326 = b3p*c*t42121*t42304*(2.0/3.0);
            double t42398 = b1p*t42123*t42306*t42137*(1.0/3.6E1);
            double t42327 = t42322+t42323+t42324+t42325+t42326-t42398;
            double t42328 = 1/(t42133*t42133);
            double t42329 = 1/(t42130*t42130*t42130*t42130);
            double t42330 = a1p*c*c0p*t42304*t42134*(8.0/9.0);
            double t42331 = gcab*t42148;
            double t42332 = t42331+1.0;
            double t42333 = 1/t42332;
            double t42334 = t42153*t42149;
            double t42335 = gcab*t42148*2.0;
            double t42336 = t42334+t42335+1.0;
            double t42337 = 1/t42336;
            double t42338 = t42302*t42305*t42136*t42319;
            double t42339 = a1f*c*c0f*t42317*t42298*(2.0/3.0);
            double t42341 = a1p*c*c0p*t42134*t42298*(2.0/3.0);
            double t42344 = t42303*t42318*t42289*t42299;
            double t42340 = -t42341-t42344+t42338+t42339;
            double t42342 = c0f*t42317*t42289*2.0;
            double t42343 = c0p*t42134*t42136*2.0;
            double t42345 = 1/t42142;
            double t42346 = 1/t42147;
            double t42347 = t42342-t42343;
            double t42348 = 1/pow(rho_b[index],1.0/3.0);
            double t42349 = c*t42348;
            double t42350 = sqrt(t42349);
            double t42351 = pow(t42349,3.0/2.0);
            double t42352 = 1/pow(rho_b[index],2.0/3.0);
            double t42353 = b1p*t42350;
            double t42354 = b3p*t42351;
            double t42355 = b4p*t42123*t42352;
            double t42356 = b2p*c*t42348;
            double t42357 = t42353+t42354+t42355+t42356;
            double t42358 = 1/t42357;
            double t42359 = t42125*t42358*(1.0/2.0);
            double t42360 = t42359+1.0;
            double t42361 = log(t42360);
            double t42362 = a1p*c*t42348;
            double t42363 = t42362+1.0;
            double t42364 = c0p*t42361*t42363*2.0;
            double t42365 = t42201*t42213*t42206*t42195*t42178;
            double t42366 = Aa*t42201*t42252*t42262*t42264*t42276*t42178*2.0;
            double t42367 = 1/(t42332*t42332);
            double t42368 = 1/pow(rho_a[index],2.2E1/3.0);
            double t42369 = gamma_aa[index]*gcab*t42144*(8.0/3.0);
            double t42370 = gamma_aa[index]*t42144*t42148*t42149*(8.0/3.0);
            double t42371 = t42370+t42369;
            double t42372 = 1/pow(rho_a[index],1.4E1/3.0);
            double t42373 = 1/(t42336*t42336);
            double t42374 = gx*gx;
            double t42375 = gamma_aa[index]*gx*t42137;
            double t42376 = t42375+1.0;
            double t42381 = gamma_aa[index]*gx*t42144*(1.6E1/3.0);
            double t42382 = t42140*t42138*t42374*(1.6E1/3.0);
            double t42377 = t42381+t42382;
            double t42378 = gamma_aa[index]*gx*t42137*2.0;
            double t42379 = t42143*t42138*t42374;
            double t42380 = t42378+t42379+1.0;
            double t42383 = 1/(t42380*t42380);
            double t42384 = 1/t42376;
            double t42385 = 1/t42380;
            double t42386 = 1/(t42376*t42376);
            double t42387 = ccaa1*gamma_aa[index]*gcaa*t42137*t42345;
            double t42388 = ccaa2*t42143*t42138*t42139*t42346;
            double t42389 = ccaa0+t42387+t42388;
            double t42390 = 1/(t42294*t42294*t42294);
            double t42391 = b4f*t42123*t42137*(1.0E1/9.0);
            double t42392 = b2f*c*t42304*(4.0/9.0);
            double t42393 = b3f*t42301*t42123*t42137*(1.0/1.2E1);
            double t42394 = b1f*c*t42301*t42304*(2.0/9.0);
            double t42395 = b3f*c*t42121*t42304*(2.0/3.0);
            double t42396 = t42391+t42392+t42393+t42394+t42395-b1f*t42123*t42306*t42137*(1.0/3.6E1);
            double t42397 = t42303*t42318*t42396*t42289;
            double t42399 = t42305*t42136*t42327*t42319;
            double t42400 = 1/(t42297*t42297);
            double t42401 = 1/(t42294*t42294*t42294*t42294);
            double t42402 = t42400*t42311*t42401*t42179*t42289*(1.0/2.0);
            double t42403 = t42125*t42136*t42316*t42328*t42329*(1.0/2.0);
            double t42404 = a1f*c*t42303*t42318*t42298*t42299*(2.0/3.0);
            double t42405 = a1p*c*t42302*t42305*t42319*t42298*(2.0/3.0);
            double t42406 = t42347*t42178*t42287;
            double t42407 = t42343+t42406;
            double t42408 = 1/pow(rho_a[index],1.0E1);
            double t42409 = 1/(t42142*t42142);
            double t42410 = gamma_aa[index]*gcaa*t42144*(1.6E1/3.0);
            double t42411 = t42140*t42138*t42139*(1.6E1/3.0);
            double t42412 = t42410+t42411;
            double t42413 = 1/(t42147*t42147);
            double t42414 = t42341+t42344-t42338-t42339;
            double t42415 = t42414*t42178*t42287;
            double t42416 = -t42341+t42415+t42338;
            double t42417 = ccaa1*gamma_aa[index]*gcaa*t42144*t42345*(8.0/3.0);
            double t42418 = ccaa2*t42140*t42138*t42139*t42346*(1.6E1/3.0);
            double t42419 = t42417+t42418-ccaa1*t42140*t42138*t42139*t42409*(8.0/3.0)-ccaa2*t42412*t42143*t42413* \
               t42138*t42139;
            v_rho_a_rho_a_[index] = t42416*t42389*-2.0+t42419*(t42343+t42178*t42287*(t42342-c0p*t42134*t42136* \
               2.0))*2.0+(ccab1*gamma_aa[index]*gcab*t42144*t42333*(4.0/3.0)-ccab2*t42153*t42371*t42373*t42149+ccab2* \
               gamma_aa[index]*t42144*t42148*t42337*t42149*(8.0/3.0)-ccab1*gamma_aa[index]*t42144*t42148*t42149*t42367* \
               (4.0/3.0))*(t42203-t42343+t42365+t42366+rho_a[index]*(t42341-t42338+t42340*t42178*t42287)+t42154*(t42244- \
               t42228-t42201*t42212*t42213*t42195*t42178*4.0+t42201*t42213*t42206*t42229*t42178+t42211*t42213*t42206* \
               t42195*t42178+t42201*t42206*t42180*t42195*t42178*t42196*4.0-Aa*t42201*t42252*t42262*t42264*t42273* \
               t42178*2.0+Aa*t42211*t42252*t42262*t42264*t42276*t42178*2.0+t42201*t42252*t42264*t42282*t42274*t42276* \
               t42178*t42277-Aa*a1a*c*t42201*t42252*t42262*t42174*t42276*t42178*(2.0/3.0))-t42347*t42178*t42287)* \
               2.0+(rho_a[index]*t42407+rho_b[index]*(t42364-t42178*t42287*(t42364-c0f*log((t42179*(1.0/2.0))/(b1f* \
               t42350+b3f*t42351+b2f*c*t42348+b4f*t42123*t42352)+1.0)*(a1f*c*t42348+1.0)*2.0))-t42154*(t42203+t42365+ \
               t42366))*(-ccab2*t42153*t42373*t42149*(gamma_aa[index]*gcab*t42372*(8.8E1/9.0)+t42138*t42149*t42368* \
               (3.2E1/9.0)+gamma_aa[index]*t42372*t42148*t42149*(8.8E1/9.0))+ccab2*t42153*(t42371*t42371)*1/(t42336* \
               t42336*t42336)*t42149*2.0+ccab1*gamma_aa[index]*gcab*t42333*t42372*(4.4E1/9.0)+ccab2*t42138*t42337* \
               t42149*t42368*(3.2E1/9.0)-ccab1*t42138*t42149*t42367*t42368*(3.2E1/9.0)+ccab2*gamma_aa[index]*t42372* \
               t42148*t42337*t42149*(8.8E1/9.0)-ccab1*gamma_aa[index]*t42372*t42148*t42149*t42367*(4.4E1/9.0)-ccab2* \
               gamma_aa[index]*t42144*t42371*t42148*t42373*t42149*(1.6E1/3.0)+ccab1*gcab*1/(t42332*t42332*t42332) \
               *t42138*t42148*t42149*t42368*(3.2E1/9.0))-(ccab0+ccab1*gcab*t42333*t42148+ccab2*t42153*t42337*t42149) \
               *(rho_a[index]*(-t42321-t42330+t42403+t42405+t42399+t42178*t42287*(t42321+t42330+t42402+t42404+t42397- \
               t42311*t42303*t42390*t42289*2.0-t42305*t42136*t42327*t42319-a1f*c*c0f*t42304*t42317*(8.0/9.0)-t42125* \
               t42136*t42316*t42328*t42329*(1.0/2.0)-a1p*c*t42302*t42305*t42319*t42298*(2.0/3.0)))+t42154*(t42250+ \
               t42239-t42215*t42173*t42237*t42169-t42201*t42213*t42206*t42178*(t42250+t42239-t42215*t42173*t42237* \
               t42169-t42220*t42240*t42193*1/(t42187*t42187*t42187)*2.0+t42220*t42221*t42193*(b2f*c*t42165*(4.0/9.0) \
               +b4f*t42123*t42166*(1.0E1/9.0)+b1f*c*t42165*t42167*(2.0/9.0)+b3f*c*t42165*t42157*(2.0/3.0)-b1f*t42123* \
               t42231*t42166*(1.0/3.6E1)+b3f*t42123*t42166*t42167*(1.0/1.2E1))+t42240*1/(t42190*t42190)*t42193*1/ \
               (t42187*t42187*t42187*t42187)*t42179*(1.0/2.0)-a1f*c*c0f*t42191*t42165*(8.0/9.0)-t42230*t42241*t42125* \
               t42242*t42169*(1.0/2.0)+a1f*c*t42220*t42221*t42226*t42174*(2.0/3.0)-a1p*c*t42215*t42173*t42174*t42175* \
               (2.0/3.0))-t42201*t42212*t42213*t42229*t42178*8.0-t42230*t42241*t42125*t42242*t42169*(1.0/2.0)-t42211* \
               t42212*t42213*t42195*t42178*8.0+t42211*t42213*t42206*t42229*t42178*2.0+t42201*t42213*t42251*t42195* \
               t42178*2.0E1+t42213*t42206*t42271*t42195*t42178+t42201*t42206*t42195*t42178*t42196*1.2E1-t42201*t42212* \
               t42180*t42195*t42178*t42196*3.2E1+t42201*t42206*t42180*t42229*t42178*t42196*8.0+t42211*t42206*t42180* \
               t42195*t42178*t42196*8.0-a1p*c*t42215*t42173*t42174*t42175*(2.0/3.0)-Aa*t42211*t42252*t42262*t42264* \
               t42273*t42178*4.0+Aa*t42252*t42262*t42271*t42264*t42276*t42178*2.0+Aa*t42201*t42252*t42262*t42264* \
               t42178*(t42213*t42251*2.0E1+t42206*t42196*1.2E1-t42212*t42180*t42196*3.2E1)*2.0-t42201*t42252*t42264* \
               t42273*t42282*t42274*t42178*t42277*2.0+t42211*t42252*t42264*t42282*t42274*t42276*t42178*t42277*2.0+ \
               t42201*t42252*t42264*t42274*t42283*1/(t42258*t42258*t42258)*t42276*t42178*2.0-t42201*t42252*t42264* \
               t42274*t42276*t42178*t42277*(b2a*c*t42165*(4.0/9.0)+b4a*t42123*t42166*(1.0E1/9.0)+b1a*c*t42165*t42167* \
               (2.0/9.0)+b3a*c*t42165*t42157*(2.0/3.0)-b1a*t42123*t42231*t42166*(1.0/3.6E1)+b3a*t42123*t42166*t42167* \
               (1.0/1.2E1))+Aa*a1a*c*t42201*t42252*t42262*t42174*t42273*t42178*(4.0/3.0)+Aa*a1a*c*t42201*t42252*t42262* \
               t42165*t42276*t42178*(8.0/9.0)-Aa*a1a*c*t42211*t42252*t42262*t42174*t42276*t42178*(4.0/3.0)-t42201* \
               t42252*1/(t42261*t42261)*t42253*t42264*t42283*1/(t42258*t42258*t42258*t42258)*t42276*t42178*(1.0/2.0) \
               -a1a*c*t42201*t42252*t42174*t42282*t42274*t42276*t42178*t42277*(2.0/3.0))+t42340*t42178*t42287*2.0- \
               t42302*t42305*t42136*t42319*2.0+t42215*t42173*t42175*t42169*2.0-a1p*c*c0p*t42174*t42194*(4.0/3.0)+ \
               a1p*c*c0p*t42134*t42298*(4.0/3.0)-t42201*t42212*t42213*t42195*t42178*8.0+t42201*t42213*t42206*t42229* \
               t42178*2.0+t42211*t42213*t42206*t42195*t42178*2.0+t42201*t42206*t42180*t42195*t42178*t42196*8.0-Aa* \
               t42201*t42252*t42262*t42264*t42273*t42178*4.0+Aa*t42211*t42252*t42262*t42264*t42276*t42178*4.0+t42201* \
               t42252*t42264*t42282*t42274*t42276*t42178*t42277*2.0-Aa*a1a*c*t42201*t42252*t42262*t42174*t42276*t42178* \
               (4.0/3.0))+c0*t42124*(cx0+cx1*gamma_aa[index]*gx*t42137*t42384+cx2*t42143*t42138*t42374*t42385)*(4.0/ \
               9.0)-rho_a[index]*t42407*(ccaa1*gamma_aa[index]*gcaa*t42345*t42372*(8.8E1/9.0)-ccaa1*t42138*t42139* \
               t42409*t42368*2.4E1+ccaa2*t42138*t42139*t42346*t42368*(3.04E2/9.0)-ccaa2*t42140*t42412*t42413*t42138* \
               t42139*(3.2E1/3.0)-ccaa2*t42143*t42413*t42138*t42139*(gamma_aa[index]*gcaa*t42372*(1.76E2/9.0)+t42138* \
               t42139*t42368*(3.04E2/9.0))+ccaa2*(t42412*t42412)*t42143*t42138*1/(t42147*t42147*t42147)*t42139*2.0+ \
               ccaa1*gamma_aa[index]*gcaa*1/(t42142*t42142*t42142)*t42138*t42408*t42139*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t42372*t42384*(8.8E1/9.0)-cx1*t42138*t42374*t42368*t42386*2.4E1+cx2*t42138* \
               t42374*t42385*t42368*(3.04E2/9.0)-cx2*t42140*t42138*t42374*t42383*t42377*(3.2E1/3.0)-cx2*t42143*t42138* \
               t42374*t42383*(gamma_aa[index]*gx*t42372*(1.76E2/9.0)+t42138*t42374*t42368*(3.04E2/9.0))+cx2*t42143* \
               1/(t42380*t42380*t42380)*t42138*t42374*(t42377*t42377)*2.0+cx1*gamma_aa[index]*gx*t42138*t42408*t42374* \
               1/(t42376*t42376*t42376)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t42144* \
               t42384*(8.0/3.0)-cx1*t42140*t42138*t42374*t42386*(8.0/3.0)+cx2*t42140*t42138*t42374*t42385*(1.6E1/ \
               3.0)-cx2*t42143*t42138*t42374*t42383*t42377)*(8.0/3.0)+rho_a[index]*t42389*(-t42321-t42330+t42403+ \
               t42405+t42399+t42178*t42287*(t42321+t42330+t42402-t42403+t42404-t42405+t42397-t42399-t42311*t42303* \
               t42390*t42289*2.0-a1f*c*c0f*t42304*t42317*(8.0/9.0)))+rho_a[index]*t42416*t42419*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t44647 = 1/pow(rho_a[index],1.0/3.0);
            double t44648 = c*t44647;
            double t44649 = sqrt(t44648);
            double t44650 = pow(t44648,3.0/2.0);
            double t44651 = c*c;
            double t44652 = 1/pow(rho_a[index],2.0/3.0);
            double t44653 = 1/c0p;
            double t44654 = b1p*t44649;
            double t44655 = b3p*t44650;
            double t44656 = b4p*t44651*t44652;
            double t44657 = b2p*c*t44647;
            double t44658 = t44654+t44655+t44656+t44657;
            double t44659 = 1/t44658;
            double t44660 = t44653*t44659*(1.0/2.0);
            double t44661 = t44660+1.0;
            double t44662 = log(t44661);
            double t44663 = a1p*c*t44647;
            double t44664 = t44663+1.0;
            double t44665 = 1/pow(rho_a[index],8.0/3.0);
            double t44666 = gamma_aa[index]*gamma_aa[index];
            double t44667 = gcaa*gcaa;
            double t44668 = 1/pow(rho_a[index],1.9E1/3.0);
            double t44669 = gamma_aa[index]*gcaa*t44665;
            double t44670 = t44669+1.0;
            double t44671 = 1/pow(rho_a[index],1.6E1/3.0);
            double t44672 = 1/pow(rho_a[index],1.1E1/3.0);
            double t44673 = gamma_aa[index]*gcaa*t44665*2.0;
            double t44674 = t44671*t44666*t44667;
            double t44675 = t44673+t44674+1.0;
            double t44676 = pow(2.0,1.0/3.0);
            double t44677 = t44676*2.0;
            double t44678 = t44677-2.0;
            double t44679 = two_13*2.0;
            double t44680 = t44679-2.0;
            double t44681 = 1/t44680;
            double t44682 = a1f*c*t44647;
            double t44683 = t44682+1.0;
            double t44684 = 1/c0f;
            double t44685 = b1f*t44649;
            double t44686 = b3f*t44650;
            double t44687 = b4f*t44651*t44652;
            double t44688 = b2f*c*t44647;
            double t44689 = t44685+t44686+t44687+t44688;
            double t44690 = 1/t44689;
            double t44691 = t44690*t44684*(1.0/2.0);
            double t44692 = t44691+1.0;
            double t44693 = 1/pow(rho_a[index],4.0/3.0);
            double t44694 = 1/pow(rho_a[index],5.0/3.0);
            double t44695 = 1/sqrt(t44648);
            double t44696 = log(t44692);
            double t44697 = 1/t44661;
            double t44698 = 1/(t44658*t44658);
            double t44699 = b4p*t44651*t44694*(2.0/3.0);
            double t44700 = b2p*c*t44693*(1.0/3.0);
            double t44701 = b1p*c*t44693*t44695*(1.0/6.0);
            double t44702 = b3p*c*t44693*t44649*(1.0/2.0);
            double t44703 = t44700+t44701+t44702+t44699;
            double t44704 = t44703*t44664*t44697*t44698;
            double t44705 = 1/t44670;
            double t44706 = 1/t44675;
            double t44707 = gx*gx;
            double t44708 = gamma_aa[index]*gx*t44665;
            double t44709 = t44708+1.0;
            double t44710 = 1/pow(rho_a[index],2.2E1/3.0);
            double t44715 = gamma_aa[index]*gx*t44672*(1.6E1/3.0);
            double t44716 = t44707*t44666*t44668*(1.6E1/3.0);
            double t44711 = t44715+t44716;
            double t44712 = gamma_aa[index]*gx*t44665*2.0;
            double t44713 = t44671*t44707*t44666;
            double t44714 = t44712+t44713+1.0;
            double t44717 = 1/pow(rho_a[index],1.4E1/3.0);
            double t44718 = 1/(t44714*t44714);
            double t44719 = 1/t44709;
            double t44720 = 1/t44714;
            double t44721 = 1/(t44709*t44709);
            double t44722 = ccaa1*gamma_aa[index]*gcaa*t44705*t44665;
            double t44723 = ccaa2*t44706*t44671*t44666*t44667;
            double t44724 = ccaa0+t44722+t44723;
            double t44725 = 1/t44692;
            double t44726 = b4f*t44651*t44694*(2.0/3.0);
            double t44727 = b2f*c*t44693*(1.0/3.0);
            double t44728 = b1f*c*t44693*t44695*(1.0/6.0);
            double t44729 = b3f*c*t44693*t44649*(1.0/2.0);
            double t44730 = t44726+t44727+t44728+t44729;
            double t44731 = 1/(t44689*t44689);
            double t44732 = 1/pow(rho_a[index],7.0/3.0);
            double t44733 = 1/pow(t44648,3.0/2.0);
            double t44734 = t44730*t44730;
            double t44735 = t44703*t44703;
            double t44736 = 1/(t44658*t44658*t44658);
            double t44737 = t44735*t44664*t44736*t44697*2.0;
            double t44738 = b4p*t44651*t44665*(1.0E1/9.0);
            double t44739 = b2p*c*t44732*(4.0/9.0);
            double t44740 = b3p*t44651*t44665*t44695*(1.0/1.2E1);
            double t44741 = b1p*c*t44732*t44695*(2.0/9.0);
            double t44742 = b3p*c*t44732*t44649*(2.0/3.0);
            double t44743 = t44740+t44741+t44742+t44738+t44739-b1p*t44651*t44733*t44665*(1.0/3.6E1);
            double t44744 = 1/(t44661*t44661);
            double t44745 = 1/(t44658*t44658*t44658*t44658);
            double t44746 = a1p*c*c0p*t44732*t44662*(8.0/9.0);
            double t44747 = c0f*t44683*t44696*2.0;
            double t44748 = c0p*t44662*t44664*2.0;
            double t44749 = 1/pow(rho_a[index],1.0E1);
            double t44750 = 1/(t44670*t44670);
            double t44751 = gamma_aa[index]*gcaa*t44672*(1.6E1/3.0);
            double t44752 = t44666*t44667*t44668*(1.6E1/3.0);
            double t44753 = t44751+t44752;
            double t44754 = 1/(t44675*t44675);
            double t44755 = a1f*c*c0f*t44693*t44696*(2.0/3.0);
            double t44756 = a1p*c*c0p*t44662*t44693*(2.0/3.0);
            double t44757 = ccaa1*gamma_aa[index]*gcaa*t44705*t44672*(8.0/3.0);
            double t44758 = ccaa2*t44706*t44666*t44667*t44668*(1.6E1/3.0);
            double t44759 = t44757+t44758-ccaa1*t44750*t44666*t44667*t44668*(8.0/3.0)-ccaa2*t44671*t44753*t44754* \
               t44666*t44667;
            v_rho_a_rho_a_[index] = t44759*(t44748+t44681*t44678*(t44747-c0p*t44662*t44664*2.0))*2.0+t44724*(- \
               t44704+t44756+t44681*t44678*(t44704+t44755-t44730*t44731*t44725*t44683-a1p*c*c0p*t44662*t44693*(2.0/ \
               3.0)))*2.0+c0*t44652*(cx0+cx1*gamma_aa[index]*gx*t44665*t44719+cx2*t44720*t44671*t44707*t44666)*(4.0/ \
               9.0)-rho_a[index]*(t44748+t44681*t44678*(t44747-t44748))*(ccaa1*gamma_aa[index]*gcaa*t44705*t44717* \
               (8.8E1/9.0)-ccaa1*t44710*t44750*t44666*t44667*2.4E1+ccaa2*t44710*t44706*t44666*t44667*(3.04E2/9.0) \
               -ccaa2*t44753*t44754*t44666*t44667*t44668*(3.2E1/3.0)-ccaa2*t44671*t44754*t44666*t44667*(gamma_aa[index]* \
               gcaa*t44717*(1.76E2/9.0)+t44710*t44666*t44667*(3.04E2/9.0))+ccaa2*t44671*(t44753*t44753)*t44666*1/ \
               (t44675*t44675*t44675)*t44667*2.0+ccaa1*gamma_aa[index]*gcaa*1/(t44670*t44670*t44670)*t44666*t44667* \
               t44749*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t44717*t44719*(8.8E1/9.0) \
               -cx1*t44710*t44721*t44707*t44666*2.4E1+cx2*t44710*t44720*t44707*t44666*(3.04E2/9.0)-cx2*t44711*t44707* \
               t44718*t44666*t44668*(3.2E1/3.0)-cx2*t44671*t44707*t44718*t44666*(gamma_aa[index]*gx*t44717*(1.76E2/ \
               9.0)+t44710*t44707*t44666*(3.04E2/9.0))+cx2*(t44711*t44711)*1/(t44714*t44714*t44714)*t44671*t44707* \
               t44666*2.0+cx1*gamma_aa[index]*gx*t44707*1/(t44709*t44709*t44709)*t44666*t44749*(1.28E2/9.0))+rho_a[index]* \
               t44724*(-t44737-t44746+t44681*t44678*(t44737+t44746-t44743*t44664*t44697*t44698-t44725*t44734*t44683* \
               1/(t44689*t44689*t44689)*2.0+t44731*t44725*t44683*(b2f*c*t44732*(4.0/9.0)+b4f*t44651*t44665*(1.0E1/ \
               9.0)+b1f*c*t44732*t44695*(2.0/9.0)+b3f*c*t44732*t44649*(2.0/3.0)-b1f*t44651*t44733*t44665*(1.0/3.6E1) \
               +b3f*t44651*t44665*t44695*(1.0/1.2E1))+t44734*t44683*1/(t44692*t44692)*t44684*1/(t44689*t44689*t44689* \
               t44689)*(1.0/2.0)-a1f*c*c0f*t44732*t44696*(8.0/9.0)-t44653*t44735*t44744*t44664*t44745*(1.0/2.0)+a1f* \
               c*t44730*t44731*t44725*t44693*(2.0/3.0)-a1p*c*t44703*t44693*t44697*t44698*(2.0/3.0))+t44743*t44664* \
               t44697*t44698+t44653*t44735*t44744*t44664*t44745*(1.0/2.0)+a1p*c*t44703*t44693*t44697*t44698*(2.0/ \
               3.0))-rho_a[index]*t44759*(-t44704+t44756+t44681*t44678*(t44704+t44755-t44756-t44730*t44731*t44725* \
               t44683))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t44672*t44719*(8.0/3.0)-cx1*t44721* \
               t44707*t44666*t44668*(8.0/3.0)+cx2*t44720*t44707*t44666*t44668*(1.6E1/3.0)-cx2*t44711*t44671*t44707* \
               t44718*t44666)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t42421 = 1/pow(rho_a[index],1.0/3.0);
            double t42422 = c*t42421;
            double t42423 = sqrt(t42422);
            double t42424 = pow(t42422,3.0/2.0);
            double t42425 = c*c;
            double t42426 = 1/pow(rho_a[index],2.0/3.0);
            double t42427 = 1/c0p;
            double t42428 = b1p*t42423;
            double t42429 = b3p*t42424;
            double t42430 = b4p*t42425*t42426;
            double t42431 = b2p*c*t42421;
            double t42432 = t42430+t42431+t42428+t42429;
            double t42433 = 1/t42432;
            double t42434 = t42433*t42427*(1.0/2.0);
            double t42435 = t42434+1.0;
            double t42436 = log(t42435);
            double t42437 = a1p*c*t42421;
            double t42438 = t42437+1.0;
            double t42439 = pow(2.0,1.0/3.0);
            double t42440 = t42439*2.0;
            double t42441 = t42440-2.0;
            double t42442 = two_13*2.0;
            double t42443 = t42442-2.0;
            double t42444 = 1/t42443;
            double t42445 = 1/c0f;
            double t42446 = 1/pow(rho_b[index],1.0/3.0);
            double t42447 = c*t42446;
            double t42448 = sqrt(t42447);
            double t42449 = pow(t42447,3.0/2.0);
            double t42450 = 1/pow(rho_b[index],2.0/3.0);
            double t42451 = b1p*t42448;
            double t42452 = b3p*t42449;
            double t42453 = b4p*t42450*t42425;
            double t42454 = b2p*c*t42446;
            double t42455 = t42451+t42452+t42453+t42454;
            double t42456 = 1/t42455;
            double t42457 = t42427*t42456*(1.0/2.0);
            double t42458 = t42457+1.0;
            double t42459 = log(t42458);
            double t42460 = a1p*c*t42446;
            double t42461 = t42460+1.0;
            double t42462 = c0p*t42461*t42459*2.0;
            double t42463 = rho_a[index]+rho_b[index];
            double t42464 = 1/pow(t42463,1.0/3.0);
            double t42465 = c*t42464;
            double t42466 = sqrt(t42465);
            double t42467 = pow(t42465,3.0/2.0);
            double t42468 = 1/pow(t42463,2.0/3.0);
            double t42469 = b1p*t42466;
            double t42470 = b3p*t42467;
            double t42471 = b4p*t42425*t42468;
            double t42472 = b2p*c*t42464;
            double t42473 = t42470+t42471+t42472+t42469;
            double t42474 = 1/t42473;
            double t42475 = t42427*t42474*(1.0/2.0);
            double t42476 = t42475+1.0;
            double t42477 = log(t42476);
            double t42478 = a1p*c*t42464;
            double t42479 = t42478+1.0;
            double t42480 = c0p*t42477*t42479*2.0;
            double t42481 = rho_a[index]-rho_b[index];
            double t42482 = t42481*t42481;
            double t42483 = 1/t42463;
            double t42484 = t42481*t42483;
            double t42485 = 1/(t42463*t42463*t42463*t42463);
            double t42486 = t42482*t42482;
            double t42487 = t42484+1.0;
            double t42488 = pow(t42487,4.0/3.0);
            double t42489 = -t42484+1.0;
            double t42490 = pow(t42489,4.0/3.0);
            double t42491 = t42490+t42488-2.0;
            double t42492 = gcab*gcab;
            double t42493 = 1/pow(rho_a[index],1.1E1/3.0);
            double t42494 = 1/pow(rho_b[index],1.1E1/3.0);
            double t42495 = 1/pow(rho_a[index],8.0/3.0);
            double t42496 = gamma_aa[index]*t42495*(1.0/2.0);
            double t42497 = 1/pow(rho_b[index],8.0/3.0);
            double t42498 = gamma_bb[index]*t42497*(1.0/2.0);
            double t42499 = t42496+t42498;
            double t42500 = t42499*t42499;
            double t42501 = t42500*t42492;
            double t42502 = gcab*t42499*2.0;
            double t42503 = t42501+t42502+1.0;
            double t42504 = gamma_aa[index]*gcab*t42493*(8.0/3.0);
            double t42505 = gamma_aa[index]*t42492*t42493*t42499*(8.0/3.0);
            double t42506 = t42504+t42505;
            double t42507 = gamma_bb[index]*gcab*t42494*(8.0/3.0);
            double t42508 = gamma_bb[index]*t42492*t42494*t42499*(8.0/3.0);
            double t42509 = t42507+t42508;
            double t42510 = 1/(t42503*t42503);
            double t42511 = gcab*t42499;
            double t42512 = t42511+1.0;
            double t42513 = 1/(t42512*t42512);
            double t42514 = 1/t42503;
            double t42515 = 1/pow(t42463,4.0/3.0);
            double t42516 = b1f*t42466;
            double t42517 = b3f*t42467;
            double t42518 = b4f*t42425*t42468;
            double t42519 = b2f*c*t42464;
            double t42520 = t42516+t42517+t42518+t42519;
            double t42521 = 1/t42520;
            double t42522 = t42521*t42445*(1.0/2.0);
            double t42523 = t42522+1.0;
            double t42524 = log(t42523);
            double t42525 = a1f*c*t42464;
            double t42526 = t42525+1.0;
            double t42528 = c0f*t42524*t42526*2.0;
            double t42527 = t42480-t42528;
            double t42529 = 1/(t42463*t42463);
            double t42556 = t42481*t42529;
            double t42530 = t42483-t42556;
            double t42531 = 1/pow(t42463,5.0/3.0);
            double t42532 = 1/sqrt(t42465);
            double t42533 = 1/t42476;
            double t42534 = 1/(t42473*t42473);
            double t42535 = b4p*t42531*t42425*(2.0/3.0);
            double t42536 = b2p*c*t42515*(1.0/3.0);
            double t42537 = b1p*c*t42532*t42515*(1.0/6.0);
            double t42538 = b3p*c*t42515*t42466*(1.0/2.0);
            double t42539 = t42535+t42536+t42537+t42538;
            double t42540 = t42533*t42534*t42539*t42479;
            double t42541 = 1/d2fz0;
            double t42542 = 1/Aa;
            double t42543 = b1a*t42466;
            double t42544 = b3a*t42467;
            double t42545 = b4a*t42425*t42468;
            double t42546 = b2a*c*t42464;
            double t42547 = t42543+t42544+t42545+t42546;
            double t42548 = 1/t42547;
            double t42549 = t42542*t42548*(1.0/2.0);
            double t42550 = t42549+1.0;
            double t42551 = log(t42550);
            double t42552 = a1a*c*t42464;
            double t42553 = t42552+1.0;
            double t42554 = 1/(t42463*t42463*t42463*t42463*t42463);
            double t42555 = pow(t42487,1.0/3.0);
            double t42557 = t42530*t42555*(4.0/3.0);
            double t42558 = pow(t42489,1.0/3.0);
            double t42636 = t42530*t42558*(4.0/3.0);
            double t42559 = -t42636+t42557;
            double t42560 = t42485*t42486;
            double t42561 = t42560-1.0;
            double t42562 = a1f*c*t42421;
            double t42563 = t42562+1.0;
            double t42564 = b1f*t42423;
            double t42565 = b3f*t42424;
            double t42566 = b4f*t42425*t42426;
            double t42567 = b2f*c*t42421;
            double t42568 = t42564+t42565+t42566+t42567;
            double t42569 = 1/t42568;
            double t42570 = t42445*t42569*(1.0/2.0);
            double t42571 = t42570+1.0;
            double t42572 = 1/pow(rho_a[index],4.0/3.0);
            double t42573 = 1/pow(rho_a[index],5.0/3.0);
            double t42574 = 1/sqrt(t42422);
            double t42575 = log(t42571);
            double t42576 = 1/t42435;
            double t42577 = 1/(t42432*t42432);
            double t42578 = b4p*t42425*t42573*(2.0/3.0);
            double t42579 = b2p*c*t42572*(1.0/3.0);
            double t42580 = b1p*c*t42572*t42574*(1.0/6.0);
            double t42581 = b3p*c*t42423*t42572*(1.0/2.0);
            double t42582 = t42580+t42581+t42578+t42579;
            double t42583 = t42438*t42582*t42576*t42577;
            double t42584 = c0f*t42563*t42575*2.0;
            double t42585 = c0p*t42436*t42438*2.0;
            double t42586 = Aa*t42541*t42551*t42444*t42561*t42553*t42491*2.0;
            double t42587 = 1/t42512;
            double t42588 = t42444*t42481*t42482*t42491*t42527*t42485*4.0;
            double t42589 = t42483+t42556;
            double t42590 = 1/t42523;
            double t42591 = 1/(t42520*t42520);
            double t42592 = b4f*t42531*t42425*(2.0/3.0);
            double t42593 = b2f*c*t42515*(1.0/3.0);
            double t42594 = b1f*c*t42532*t42515*(1.0/6.0);
            double t42595 = b3f*c*t42515*t42466*(1.0/2.0);
            double t42596 = t42592+t42593+t42594+t42595;
            double t42597 = a1f*c*c0f*t42515*t42524*(2.0/3.0);
            double t42598 = a1p*c*c0p*t42515*t42477*(2.0/3.0);
            double t42599 = t42554*t42486*4.0;
            double t42600 = t42555*t42589*(4.0/3.0);
            double t42635 = t42558*t42589*(4.0/3.0);
            double t42601 = t42600-t42635;
            double t42602 = 1/t42550;
            double t42603 = 1/(t42547*t42547);
            double t42604 = b4a*t42531*t42425*(2.0/3.0);
            double t42605 = b2a*c*t42515*(1.0/3.0);
            double t42606 = b1a*c*t42532*t42515*(1.0/6.0);
            double t42607 = b3a*c*t42515*t42466*(1.0/2.0);
            double t42608 = t42604+t42605+t42606+t42607;
            double t42609 = Aa*a1a*c*t42541*t42515*t42551*t42444*t42561*t42491*(2.0/3.0);
            double t42610 = a1f*c*t42446;
            double t42611 = t42610+1.0;
            double t42612 = b1f*t42448;
            double t42613 = b3f*t42449;
            double t42614 = b4f*t42450*t42425;
            double t42615 = b2f*c*t42446;
            double t42616 = t42612+t42613+t42614+t42615;
            double t42617 = 1/t42616;
            double t42618 = t42445*t42617*(1.0/2.0);
            double t42619 = t42618+1.0;
            double t42620 = 1/pow(rho_b[index],4.0/3.0);
            double t42621 = 1/pow(rho_b[index],5.0/3.0);
            double t42622 = 1/sqrt(t42447);
            double t42623 = log(t42619);
            double t42624 = 1/t42458;
            double t42625 = 1/(t42455*t42455);
            double t42626 = b4p*t42621*t42425*(2.0/3.0);
            double t42627 = b2p*c*t42620*(1.0/3.0);
            double t42628 = b1p*c*t42620*t42622*(1.0/6.0);
            double t42629 = b3p*c*t42620*t42448*(1.0/2.0);
            double t42630 = t42626+t42627+t42628+t42629;
            double t42631 = t42630*t42461*t42624*t42625;
            double t42632 = t42462-c0f*t42611*t42623*2.0;
            double t42633 = 1/pow(t42463,7.0/3.0);
            double t42634 = 1/pow(t42463,8.0/3.0);
            double t42652 = t42526*t42590*t42591*t42596;
            double t42637 = t42540-t42652+t42597-t42598;
            double t42638 = t42539*t42539;
            double t42639 = 1/pow(t42465,3.0/2.0);
            double t42640 = b4p*t42425*t42634*(1.0E1/9.0);
            double t42641 = b2p*c*t42633*(4.0/9.0);
            double t42642 = b1p*c*t42532*t42633*(2.0/9.0);
            double t42643 = b3p*c*t42633*t42466*(2.0/3.0);
            double t42644 = b3p*t42532*t42425*t42634*(1.0/1.2E1);
            double t42645 = t42640+t42641+t42642+t42643+t42644-b1p*t42425*t42634*t42639*(1.0/3.6E1);
            double t42646 = t42533*t42534*t42645*t42479;
            double t42647 = 1/(t42473*t42473*t42473);
            double t42648 = t42596*t42596;
            double t42649 = 1/(t42476*t42476);
            double t42650 = 1/(t42473*t42473*t42473*t42473);
            double t42651 = t42650*t42427*t42638*t42649*t42479*(1.0/2.0);
            double t42653 = 1/(t42463*t42463*t42463);
            double t42654 = a1p*c*t42515*t42533*t42534*t42539*(2.0/3.0);
            double t42655 = 1/(t42463*t42463*t42463*t42463*t42463*t42463);
            double t42656 = t42481*t42482*t42485*4.0;
            double t42657 = t42656+t42599;
            double t42658 = t42481*t42653*t42558*(8.0/3.0);
            double t42659 = 1/pow(t42487,2.0/3.0);
            double t42660 = t42530*t42659*t42589*(4.0/9.0);
            double t42661 = 1/pow(t42489,2.0/3.0);
            double t42662 = t42530*t42661*t42589*(4.0/9.0);
            double t42663 = t42660+t42662+t42658-t42481*t42653*t42555*(8.0/3.0);
            double t42664 = t42656-t42599;
            double t42665 = t42608*t42608;
            double t42666 = t42601*t42444*t42527*t42485*t42486;
            v_rho_a_rho_b_[index] = -(ccab1*gamma_bb[index]*gcab*t42494*t42587*(4.0/3.0)-ccab2*t42500*t42510* \
               t42509*t42492-ccab1*gamma_bb[index]*t42513*t42492*t42494*t42499*(4.0/3.0)+ccab2*gamma_bb[index]*t42514* \
               t42492*t42494*t42499*(8.0/3.0))*(-t42480+t42585-t42586+t42463*(-t42540+t42609+t42588+t42598+t42444* \
               t42491*t42485*t42486*(t42540+t42597-t42526*t42590*t42591*t42596-a1p*c*c0p*t42515*t42477*(2.0/3.0)) \
               -t42444*t42491*t42527*t42554*t42486*4.0+t42444*t42527*t42485*t42486*t42559-Aa*t42541*t42551*t42444* \
               t42561*t42553*t42559*2.0+Aa*t42541*t42551*t42444*t42553*t42491*(t42599-t42481*t42482*t42485*4.0)*2.0- \
               t42602*t42603*t42541*t42444*t42561*t42553*t42491*t42608)-rho_a[index]*(-t42583+t42441*t42444*(t42583- \
               (t42563*1/(t42568*t42568)*(b2f*c*t42572*(1.0/3.0)+b4f*t42425*t42573*(2.0/3.0)+b1f*c*t42572*t42574* \
               (1.0/6.0)+b3f*c*t42423*t42572*(1.0/2.0)))/t42571+a1f*c*c0f*t42572*t42575*(2.0/3.0)-a1p*c*c0p*t42436* \
               t42572*(2.0/3.0))+a1p*c*c0p*t42436*t42572*(2.0/3.0))+t42441*t42444*(t42584-t42585)+t42444*t42491*t42527* \
               t42485*t42486)+(ccab1*gamma_aa[index]*gcab*t42493*t42587*(4.0/3.0)-ccab2*t42500*t42510*t42506*t42492- \
               ccab1*gamma_aa[index]*t42513*t42492*t42493*t42499*(4.0/3.0)+ccab2*gamma_aa[index]*t42514*t42492*t42493* \
               t42499*(8.0/3.0))*(-t42462+t42480+t42586+t42463*(t42540-t42609+t42666+t42588-t42598+t42444*t42491* \
               t42527*t42554*t42486*4.0-t42444*t42491*t42637*t42485*t42486-Aa*t42601*t42541*t42551*t42444*t42561* \
               t42553*2.0-Aa*t42541*t42551*t42444*t42553*t42491*t42657*2.0+t42602*t42603*t42541*t42444*t42561*t42553* \
               t42491*t42608)+rho_b[index]*(-t42631+t42441*t42444*(t42631-(t42611*1/(t42616*t42616)*(b2f*c*t42620* \
               (1.0/3.0)+b4f*t42621*t42425*(2.0/3.0)+b1f*c*t42620*t42622*(1.0/6.0)+b3f*c*t42620*t42448*(1.0/2.0)) \
               )/t42619+a1f*c*c0f*t42620*t42623*(2.0/3.0)-a1p*c*c0p*t42620*t42459*(2.0/3.0))+a1p*c*c0p*t42620*t42459* \
               (2.0/3.0))+t42441*t42632*t42444-t42444*t42491*t42485*t42486*(t42480-t42528))-(rho_b[index]*(t42462- \
               t42441*t42632*t42444)+rho_a[index]*(t42585+t42441*t42444*(t42584-c0p*t42436*t42438*2.0))-t42463*(t42480+ \
               t42586-t42444*t42491*t42527*t42485*t42486))*(ccab2*t42500*1/(t42503*t42503*t42503)*t42506*t42509*t42492* \
               -2.0+ccab1*gamma_aa[index]*gamma_bb[index]*t42513*t42492*t42493*t42494*(3.2E1/9.0)-ccab2*gamma_aa[index]* \
               gamma_bb[index]*t42514*t42492*t42493*t42494*(3.2E1/9.0)+ccab2*gamma_aa[index]*t42510*t42509*t42492* \
               t42493*t42499*(8.0/3.0)+ccab2*gamma_bb[index]*t42510*t42506*t42492*t42494*t42499*(8.0/3.0)+ccab2*gamma_aa[index]* \
               gamma_bb[index]*t42500*t42510*(t42492*t42492)*t42493*t42494*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]* \
               gcab*1/(t42512*t42512*t42512)*t42492*t42493*t42494*t42499*(3.2E1/9.0))+(ccab0+ccab1*gcab*t42587*t42499+ \
               ccab2*t42500*t42514*t42492)*(-t42666+t42463*(t42651+t42654+t42646-t42533*t42638*t42647*t42479*2.0+ \
               t42444*t42485*t42486*t42559*(t42540-t42652+t42597-t42598)-a1p*c*c0p*t42633*t42477*(8.0/9.0)-t42444* \
               t42491*t42485*t42486*(t42651+t42654+t42646-t42533*t42638*t42647*t42479*2.0+1/(t42520*t42520*t42520) \
               *t42526*t42590*t42648*2.0-t42526*t42590*t42591*(b2f*c*t42633*(4.0/9.0)+b4f*t42425*t42634*(1.0E1/9.0) \
               +b1f*c*t42532*t42633*(2.0/9.0)+b3f*c*t42633*t42466*(2.0/3.0)-b1f*t42425*t42634*t42639*(1.0/3.6E1)+ \
               b3f*t42532*t42425*t42634*(1.0/1.2E1))-1/(t42520*t42520*t42520*t42520)*1/(t42523*t42523)*t42445*t42526* \
               t42648*(1.0/2.0)+a1f*c*c0f*t42524*t42633*(8.0/9.0)-a1p*c*c0p*t42633*t42477*(8.0/9.0)-a1f*c*t42515* \
               t42590*t42591*t42596*(2.0/3.0))-t42601*t42444*t42637*t42485*t42486-t42444*t42482*t42491*t42527*t42485* \
               1.2E1-t42444*t42491*t42554*t42637*t42486*8.0-t42444*t42527*t42663*t42485*t42486-t42444*t42527*t42554* \
               t42486*t42559*4.0+t42601*t42444*t42554*t42486*(t42480-t42528)*4.0+t42444*t42491*t42655*t42486*(t42480- \
               t42528)*2.0E1-t42601*t42444*t42481*t42482*t42527*t42485*4.0-t42444*t42481*t42482*t42527*t42485*t42559* \
               4.0+Aa*t42601*t42541*t42551*t42444*t42553*t42664*2.0+Aa*t42541*t42551*t42444*t42561*t42553*t42663* \
               2.0+Aa*t42541*t42551*t42444*t42553*t42657*t42559*2.0+Aa*t42541*t42551*t42444*t42553*t42491*(t42482* \
               t42485*1.2E1-t42655*t42486*2.0E1)*2.0+t42601*t42602*t42603*t42541*t42444*t42561*t42553*t42608-t42602* \
               t42603*t42541*t42444*t42553*t42491*t42608*t42664-t42602*t42603*t42541*t42444*t42561*t42553*t42608* \
               t42559+t42602*t42603*t42541*t42444*t42553*t42491*t42608*t42657-t42602*t42541*t42444*t42561*t42553* \
               t42491*1/(t42547*t42547*t42547)*t42665*2.0+t42602*t42603*t42541*t42444*t42561*t42553*t42491*(b2a*c* \
               t42633*(4.0/9.0)+b4a*t42425*t42634*(1.0E1/9.0)+b1a*c*t42532*t42633*(2.0/9.0)+b3a*c*t42633*t42466*(2.0/ \
               3.0)-b1a*t42425*t42634*t42639*(1.0/3.6E1)+b3a*t42532*t42425*t42634*(1.0/1.2E1))-Aa*a1a*c*t42601*t42541* \
               t42515*t42551*t42444*t42561*(2.0/3.0)-Aa*a1a*c*t42541*t42551*t42444*t42561*t42633*t42491*(8.0/9.0) \
               +Aa*a1a*c*t42541*t42515*t42551*t42444*t42491*t42664*(2.0/3.0)+Aa*a1a*c*t42541*t42515*t42551*t42444* \
               t42561*t42559*(2.0/3.0)-Aa*a1a*c*t42541*t42515*t42551*t42444*t42491*t42657*(2.0/3.0)+t42541*1/(t42550* \
               t42550)*t42542*t42444*t42561*t42553*t42491*1/(t42547*t42547*t42547*t42547)*t42665*(1.0/2.0)+a1a*c* \
               t42602*t42603*t42541*t42515*t42444*t42561*t42491*t42608*(2.0/3.0))-t42533*t42534*t42539*t42479*2.0+ \
               t42444*t42491*t42485*t42486*(t42540-t42652+t42597-t42598)*2.0+a1p*c*c0p*t42515*t42477*(4.0/3.0)-t42444* \
               t42491*t42527*t42554*t42486*8.0+t42444*t42485*t42486*t42559*(t42480-t42528)+Aa*t42601*t42541*t42551* \
               t42444*t42561*t42553*2.0-Aa*t42541*t42551*t42444*t42553*t42491*t42664*2.0-Aa*t42541*t42551*t42444* \
               t42561*t42553*t42559*2.0+Aa*t42541*t42551*t42444*t42553*t42491*t42657*2.0-t42602*t42603*t42541*t42444* \
               t42561*t42553*t42491*t42608*2.0+Aa*a1a*c*t42541*t42515*t42551*t42444*t42561*t42491*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t42668 = 1/pow(rho_b[index],1.0/3.0);
            double t42669 = c*t42668;
            double t42670 = sqrt(t42669);
            double t42671 = pow(t42669,3.0/2.0);
            double t42672 = c*c;
            double t42673 = 1/pow(rho_b[index],2.0/3.0);
            double t42674 = 1/c0p;
            double t42675 = b1p*t42670;
            double t42676 = b3p*t42671;
            double t42677 = b4p*t42672*t42673;
            double t42678 = b2p*c*t42668;
            double t42679 = t42675+t42676+t42677+t42678;
            double t42680 = 1/t42679;
            double t42681 = t42680*t42674*(1.0/2.0);
            double t42682 = t42681+1.0;
            double t42683 = log(t42682);
            double t42684 = a1p*c*t42668;
            double t42685 = t42684+1.0;
            double t42686 = 1/pow(rho_b[index],8.0/3.0);
            double t42687 = gamma_bb[index]*gamma_bb[index];
            double t42688 = gcaa*gcaa;
            double t42689 = 1/pow(rho_b[index],1.9E1/3.0);
            double t42690 = gamma_bb[index]*gcaa*t42686;
            double t42691 = t42690+1.0;
            double t42692 = 1/pow(rho_b[index],1.6E1/3.0);
            double t42693 = 1/pow(rho_b[index],1.1E1/3.0);
            double t42694 = gamma_bb[index]*gcaa*t42686*2.0;
            double t42695 = t42692*t42687*t42688;
            double t42696 = t42694+t42695+1.0;
            double t42699 = 1/pow(rho_a[index],8.0/3.0);
            double t42700 = gamma_aa[index]*t42699*(1.0/2.0);
            double t42701 = gamma_bb[index]*t42686*(1.0/2.0);
            double t42697 = t42700+t42701;
            double t42698 = gcab*gcab;
            double t42702 = t42697*t42697;
            double t42703 = rho_a[index]+rho_b[index];
            double t42704 = 1/pow(t42703,1.0/3.0);
            double t42705 = c*t42704;
            double t42706 = sqrt(t42705);
            double t42707 = b1p*t42706;
            double t42708 = pow(t42705,3.0/2.0);
            double t42709 = b3p*t42708;
            double t42710 = 1/pow(t42703,2.0/3.0);
            double t42711 = b4p*t42710*t42672;
            double t42712 = b2p*c*t42704;
            double t42713 = t42711+t42712+t42707+t42709;
            double t42714 = 1/pow(t42703,7.0/3.0);
            double t42715 = 1/pow(t42703,8.0/3.0);
            double t42716 = 1/sqrt(t42705);
            double t42717 = a1p*c*t42704;
            double t42718 = t42717+1.0;
            double t42719 = 1/t42713;
            double t42720 = t42674*t42719*(1.0/2.0);
            double t42721 = t42720+1.0;
            double t42722 = 1/t42721;
            double t42723 = 1/pow(t42703,4.0/3.0);
            double t42763 = 1/pow(t42703,5.0/3.0);
            double t42765 = b4p*t42672*t42763*(2.0/3.0);
            double t42766 = b2p*c*t42723*(1.0/3.0);
            double t42767 = b1p*c*t42723*t42716*(1.0/6.0);
            double t42768 = b3p*c*t42723*t42706*(1.0/2.0);
            double t42724 = t42765+t42766+t42767+t42768;
            double t42725 = two_13*2.0;
            double t42726 = t42725-2.0;
            double t42727 = 1/t42726;
            double t42728 = 1/c0f;
            double t42729 = rho_a[index]-rho_b[index];
            double t42730 = 1/t42703;
            double t42731 = t42730*t42729;
            double t42732 = b1f*t42706;
            double t42733 = b3f*t42708;
            double t42734 = b4f*t42710*t42672;
            double t42735 = b2f*c*t42704;
            double t42736 = t42732+t42733+t42734+t42735;
            double t42737 = 1/t42736;
            double t42738 = t42728*t42737*(1.0/2.0);
            double t42739 = t42738+1.0;
            double t42740 = log(t42739);
            double t42741 = a1f*c*t42704;
            double t42742 = t42741+1.0;
            double t42743 = log(t42721);
            double t42751 = c0f*t42740*t42742*2.0;
            double t42752 = c0p*t42743*t42718*2.0;
            double t42744 = t42751-t42752;
            double t42745 = t42729*t42729;
            double t42746 = t42731+1.0;
            double t42747 = pow(t42746,4.0/3.0);
            double t42748 = -t42731+1.0;
            double t42749 = pow(t42748,4.0/3.0);
            double t42750 = t42747+t42749-2.0;
            double t42753 = 1/(t42703*t42703);
            double t42754 = t42753*t42729;
            double t42755 = t42730+t42754;
            double t42756 = 1/(t42703*t42703*t42703*t42703);
            double t42757 = pow(t42746,1.0/3.0);
            double t42758 = t42755*t42757*(4.0/3.0);
            double t42759 = pow(t42748,1.0/3.0);
            double t42791 = t42755*t42759*(4.0/3.0);
            double t42760 = -t42791+t42758;
            double t42761 = 1/(t42703*t42703*t42703*t42703*t42703);
            double t42762 = t42745*t42745;
            double t42764 = 1/(t42713*t42713);
            double t42769 = 1/t42739;
            double t42770 = 1/(t42736*t42736);
            double t42771 = b4f*t42672*t42763*(2.0/3.0);
            double t42772 = b2f*c*t42723*(1.0/3.0);
            double t42773 = b1f*c*t42723*t42716*(1.0/6.0);
            double t42774 = b3f*c*t42723*t42706*(1.0/2.0);
            double t42775 = t42771+t42772+t42773+t42774;
            double t42776 = t42722*t42724*t42718*t42764;
            double t42777 = a1f*c*c0f*t42740*t42723*(2.0/3.0);
            double t42778 = t42724*t42724;
            double t42779 = 1/pow(t42705,3.0/2.0);
            double t42780 = b4p*t42715*t42672*(1.0E1/9.0);
            double t42781 = b2p*c*t42714*(4.0/9.0);
            double t42782 = b1p*c*t42714*t42716*(2.0/9.0);
            double t42783 = b3p*c*t42714*t42706*(2.0/3.0);
            double t42784 = b3p*t42715*t42716*t42672*(1.0/1.2E1);
            double t42785 = t42780+t42781+t42782+t42783+t42784-b1p*t42715*t42672*t42779*(1.0/3.6E1);
            double t42786 = 1/(t42713*t42713*t42713);
            double t42787 = t42722*t42718*t42786*t42778*2.0;
            double t42788 = t42775*t42775;
            double t42789 = 1/(t42721*t42721);
            double t42790 = 1/(t42713*t42713*t42713*t42713);
            double t42792 = t42753*2.0;
            double t42793 = 1/(t42703*t42703*t42703);
            double t42794 = t42729*t42793*2.0;
            double t42795 = t42792+t42794;
            double t42796 = t42755*t42755;
            double t42797 = a1p*c*c0p*t42714*t42743*(8.0/9.0);
            double t42798 = 1/(t42703*t42703*t42703*t42703*t42703*t42703);
            double t42799 = 1/d2fz0;
            double t42800 = 1/Aa;
            double t42801 = b1a*t42706;
            double t42802 = b3a*t42708;
            double t42803 = b4a*t42710*t42672;
            double t42804 = b2a*c*t42704;
            double t42805 = t42801+t42802+t42803+t42804;
            double t42806 = 1/t42805;
            double t42807 = t42800*t42806*(1.0/2.0);
            double t42808 = t42807+1.0;
            double t42809 = log(t42808);
            double t42810 = a1a*c*t42704;
            double t42811 = t42810+1.0;
            double t42812 = t42757*t42795*(4.0/3.0);
            double t42813 = 1/pow(t42746,2.0/3.0);
            double t42814 = t42813*t42796*(4.0/9.0);
            double t42815 = 1/pow(t42748,2.0/3.0);
            double t42816 = t42815*t42796*(4.0/9.0);
            double t42817 = t42812+t42814+t42816-t42759*t42795*(4.0/3.0);
            double t42818 = t42745*t42729*t42756*4.0;
            double t42819 = t42761*t42762*4.0;
            double t42820 = t42818+t42819;
            double t42821 = 1/t42808;
            double t42822 = t42762*t42756;
            double t42823 = t42822-1.0;
            double t42824 = 1/(t42805*t42805);
            double t42825 = b4a*t42672*t42763*(2.0/3.0);
            double t42826 = b2a*c*t42723*(1.0/3.0);
            double t42827 = b1a*c*t42723*t42716*(1.0/6.0);
            double t42828 = b3a*c*t42723*t42706*(1.0/2.0);
            double t42829 = t42825+t42826+t42827+t42828;
            double t42830 = t42829*t42829;
            double t42832 = t42742*t42770*t42775*t42769;
            double t42833 = a1p*c*c0p*t42723*t42743*(2.0/3.0);
            double t42831 = -t42832-t42833+t42776+t42777;
            double t42834 = pow(2.0,1.0/3.0);
            double t42835 = t42834*2.0;
            double t42836 = t42835-2.0;
            double t42837 = a1f*c*t42668;
            double t42838 = t42837+1.0;
            double t42839 = b1f*t42670;
            double t42840 = b3f*t42671;
            double t42841 = b4f*t42672*t42673;
            double t42842 = b2f*c*t42668;
            double t42843 = t42840+t42841+t42842+t42839;
            double t42844 = 1/t42843;
            double t42845 = t42844*t42728*(1.0/2.0);
            double t42846 = t42845+1.0;
            double t42847 = 1/pow(rho_b[index],4.0/3.0);
            double t42849 = 1/pow(rho_b[index],5.0/3.0);
            double t42850 = 1/sqrt(t42669);
            double t42856 = b4f*t42672*t42849*(2.0/3.0);
            double t42857 = b2f*c*t42847*(1.0/3.0);
            double t42858 = b1f*c*t42850*t42847*(1.0/6.0);
            double t42859 = b3f*c*t42670*t42847*(1.0/2.0);
            double t42848 = t42856+t42857+t42858+t42859;
            double t42861 = b4p*t42672*t42849*(2.0/3.0);
            double t42862 = b2p*c*t42847*(1.0/3.0);
            double t42863 = b1p*c*t42850*t42847*(1.0/6.0);
            double t42864 = b3p*c*t42670*t42847*(1.0/2.0);
            double t42851 = t42861+t42862+t42863+t42864;
            double t42852 = 1/t42846;
            double t42853 = 1/pow(rho_b[index],7.0/3.0);
            double t42854 = 1/t42682;
            double t42855 = 1/pow(t42669,3.0/2.0);
            double t42860 = t42848*t42848;
            double t42865 = t42851*t42851;
            double t42866 = log(t42846);
            double t42867 = 1/(t42843*t42843);
            double t42868 = 1/(t42679*t42679);
            double t42869 = 1/(t42679*t42679*t42679);
            double t42870 = t42854*t42685*t42865*t42869*2.0;
            double t42871 = b4p*t42672*t42686*(1.0E1/9.0);
            double t42872 = b2p*c*t42853*(4.0/9.0);
            double t42873 = b3p*t42850*t42672*t42686*(1.0/1.2E1);
            double t42874 = b1p*c*t42850*t42853*(2.0/9.0);
            double t42875 = b3p*c*t42670*t42853*(2.0/3.0);
            double t42948 = b1p*t42672*t42855*t42686*(1.0/3.6E1);
            double t42876 = t42871+t42872+t42873+t42874+t42875-t42948;
            double t42877 = 1/(t42682*t42682);
            double t42878 = 1/(t42679*t42679*t42679*t42679);
            double t42879 = a1p*c*c0p*t42853*t42683*(8.0/9.0);
            double t42880 = gcab*t42697;
            double t42881 = t42880+1.0;
            double t42882 = 1/t42881;
            double t42883 = t42702*t42698;
            double t42884 = gcab*t42697*2.0;
            double t42885 = t42883+t42884+1.0;
            double t42886 = 1/t42885;
            double t42887 = t42832+t42833-t42776-t42777;
            double t42888 = t42851*t42854*t42685*t42868;
            double t42889 = a1f*c*c0f*t42847*t42866*(2.0/3.0);
            double t42891 = a1p*c*c0p*t42683*t42847*(2.0/3.0);
            double t42894 = t42852*t42838*t42848*t42867;
            double t42890 = -t42891-t42894+t42888+t42889;
            double t42892 = c0f*t42838*t42866*2.0;
            double t42893 = c0p*t42683*t42685*2.0;
            double t42895 = 1/t42691;
            double t42896 = 1/t42696;
            double t42897 = 1/pow(rho_a[index],1.0/3.0);
            double t42898 = c*t42897;
            double t42899 = sqrt(t42898);
            double t42900 = pow(t42898,3.0/2.0);
            double t42901 = 1/pow(rho_a[index],2.0/3.0);
            double t42902 = b1p*t42899;
            double t42903 = b3p*t42900;
            double t42904 = b4p*t42901*t42672;
            double t42905 = b2p*c*t42897;
            double t42906 = t42902+t42903+t42904+t42905;
            double t42907 = 1/t42906;
            double t42908 = t42907*t42674*(1.0/2.0);
            double t42909 = t42908+1.0;
            double t42910 = log(t42909);
            double t42911 = a1p*c*t42897;
            double t42912 = t42911+1.0;
            double t42913 = c0p*t42910*t42912*2.0;
            double t42914 = t42892-t42893;
            double t42915 = t42750*t42744*t42762*t42727*t42756;
            double t42916 = Aa*t42811*t42750*t42823*t42727*t42809*t42799*2.0;
            double t42917 = 1/(t42881*t42881);
            double t42918 = 1/pow(rho_b[index],2.2E1/3.0);
            double t42919 = gamma_bb[index]*gcab*t42693*(8.0/3.0);
            double t42920 = gamma_bb[index]*t42693*t42697*t42698*(8.0/3.0);
            double t42921 = t42920+t42919;
            double t42922 = 1/pow(rho_b[index],1.4E1/3.0);
            double t42923 = 1/(t42885*t42885);
            double t42924 = gx*gx;
            double t42925 = gamma_bb[index]*gx*t42686;
            double t42926 = t42925+1.0;
            double t42931 = gamma_bb[index]*gx*t42693*(1.6E1/3.0);
            double t42932 = t42924*t42687*t42689*(1.6E1/3.0);
            double t42927 = t42931+t42932;
            double t42928 = gamma_bb[index]*gx*t42686*2.0;
            double t42929 = t42924*t42692*t42687;
            double t42930 = t42928+t42929+1.0;
            double t42933 = 1/(t42930*t42930);
            double t42934 = 1/t42926;
            double t42935 = 1/t42930;
            double t42936 = 1/(t42926*t42926);
            double t42937 = ccaa1*gamma_bb[index]*gcaa*t42686*t42895;
            double t42938 = ccaa2*t42692*t42687*t42688*t42896;
            double t42939 = ccaa0+t42937+t42938;
            double t42940 = 1/(t42843*t42843*t42843);
            double t42941 = b4f*t42672*t42686*(1.0E1/9.0);
            double t42942 = b2f*c*t42853*(4.0/9.0);
            double t42943 = b3f*t42850*t42672*t42686*(1.0/1.2E1);
            double t42944 = b1f*c*t42850*t42853*(2.0/9.0);
            double t42945 = b3f*c*t42670*t42853*(2.0/3.0);
            double t42946 = t42941+t42942+t42943+t42944+t42945-b1f*t42672*t42855*t42686*(1.0/3.6E1);
            double t42947 = t42852*t42838*t42946*t42867;
            double t42949 = t42854*t42685*t42876*t42868;
            double t42950 = 1/(t42846*t42846);
            double t42951 = 1/(t42843*t42843*t42843*t42843);
            double t42952 = t42860*t42950*t42951*t42728*t42838*(1.0/2.0);
            double t42953 = t42674*t42685*t42865*t42877*t42878*(1.0/2.0);
            double t42954 = a1f*c*t42852*t42847*t42848*t42867*(2.0/3.0);
            double t42955 = a1p*c*t42851*t42854*t42847*t42868*(2.0/3.0);
            double t42956 = t42914*t42727*t42836;
            double t42957 = t42893+t42956;
            double t42958 = 1/pow(rho_b[index],1.0E1);
            double t42959 = 1/(t42691*t42691);
            double t42960 = gamma_bb[index]*gcaa*t42693*(1.6E1/3.0);
            double t42961 = t42687*t42688*t42689*(1.6E1/3.0);
            double t42962 = t42960+t42961;
            double t42963 = 1/(t42696*t42696);
            double t42964 = t42891+t42894-t42888-t42889;
            double t42965 = t42727*t42836*t42964;
            double t42966 = -t42891+t42965+t42888;
            double t42967 = ccaa1*gamma_bb[index]*gcaa*t42693*t42895*(8.0/3.0);
            double t42968 = ccaa2*t42687*t42688*t42689*t42896*(1.6E1/3.0);
            double t42969 = t42967+t42968-ccaa1*t42687*t42688*t42689*t42959*(8.0/3.0)-ccaa2*t42692*t42962*t42963* \
               t42687*t42688;
            v_rho_b_rho_b_[index] = t42939*t42966*-2.0+t42969*(t42893+t42727*t42836*(t42892-c0p*t42683*t42685* \
               2.0))*2.0+(ccab1*gamma_bb[index]*gcab*t42693*t42882*(4.0/3.0)-ccab2*t42702*t42921*t42923*t42698-ccab1* \
               gamma_bb[index]*t42917*t42693*t42697*t42698*(4.0/3.0)+ccab2*gamma_bb[index]*t42693*t42697*t42886*t42698* \
               (8.0/3.0))*(t42752+t42915+t42916-t42893+rho_b[index]*(t42891-t42888+t42727*t42836*t42890)-t42703*(t42833- \
               t42776+t42750*t42761*t42744*t42762*t42727*4.0+t42760*t42744*t42762*t42727*t42756-t42750*t42762*t42727* \
               t42756*t42887+t42750*t42744*t42727*t42745*t42729*t42756*4.0+Aa*t42811*t42820*t42750*t42727*t42809* \
               t42799*2.0+Aa*t42811*t42760*t42823*t42727*t42809*t42799*2.0-t42811*t42821*t42750*t42823*t42824*t42727* \
               t42829*t42799+Aa*a1a*c*t42723*t42750*t42823*t42727*t42809*t42799*(2.0/3.0))-t42914*t42727*t42836)* \
               2.0+(rho_b[index]*t42957+rho_a[index]*(t42913-t42727*t42836*(t42913-c0f*log((t42728*(1.0/2.0))/(b1f* \
               t42899+b3f*t42900+b2f*c*t42897+b4f*t42901*t42672)+1.0)*(a1f*c*t42897+1.0)*2.0))-t42703*(t42752+t42915+ \
               t42916))*(-ccab2*t42702*t42923*t42698*(gamma_bb[index]*gcab*t42922*(8.8E1/9.0)+t42918*t42687*t42698* \
               (3.2E1/9.0)+gamma_bb[index]*t42922*t42697*t42698*(8.8E1/9.0))+ccab2*t42702*(t42921*t42921)*1/(t42885* \
               t42885*t42885)*t42698*2.0+ccab1*gamma_bb[index]*gcab*t42922*t42882*(4.4E1/9.0)-ccab1*t42917*t42918* \
               t42687*t42698*(3.2E1/9.0)+ccab2*t42918*t42687*t42886*t42698*(3.2E1/9.0)-ccab1*gamma_bb[index]*t42922* \
               t42917*t42697*t42698*(4.4E1/9.0)+ccab2*gamma_bb[index]*t42922*t42697*t42886*t42698*(8.8E1/9.0)-ccab2* \
               gamma_bb[index]*t42921*t42923*t42693*t42697*t42698*(1.6E1/3.0)+ccab1*gcab*1/(t42881*t42881*t42881) \
               *t42918*t42687*t42697*t42698*(3.2E1/9.0))+(ccab0+ccab1*gcab*t42882*t42697+ccab2*t42702*t42886*t42698) \
               *(-rho_b[index]*(-t42870+t42953+t42955+t42949-t42879+t42727*t42836*(t42870+t42952+t42954+t42947+t42879- \
               t42940*t42860*t42852*t42838*2.0-t42854*t42685*t42876*t42868-a1f*c*c0f*t42853*t42866*(8.0/9.0)-t42674* \
               t42685*t42865*t42877*t42878*(1.0/2.0)-a1p*c*t42851*t42854*t42847*t42868*(2.0/3.0)))-t42703*(t42787+ \
               t42797-t42722*t42718*t42764*t42785-t42750*t42762*t42727*t42756*(t42787+t42797-t42722*t42718*t42764* \
               t42785-t42742*1/(t42736*t42736*t42736)*t42769*t42788*2.0+t42742*t42770*t42769*(b2f*c*t42714*(4.0/9.0) \
               +b4f*t42715*t42672*(1.0E1/9.0)+b1f*c*t42714*t42716*(2.0/9.0)+b3f*c*t42714*t42706*(2.0/3.0)-b1f*t42715* \
               t42672*t42779*(1.0/3.6E1)+b3f*t42715*t42716*t42672*(1.0/1.2E1))+t42742*1/(t42736*t42736*t42736*t42736) \
               *t42728*1/(t42739*t42739)*t42788*(1.0/2.0)-a1f*c*c0f*t42740*t42714*(8.0/9.0)-t42718*t42790*t42674* \
               t42778*t42789*(1.0/2.0)+a1f*c*t42723*t42770*t42775*t42769*(2.0/3.0)-a1p*c*t42722*t42723*t42724*t42764* \
               (2.0/3.0))+t42750*t42831*t42761*t42762*t42727*8.0+t42760*t42761*t42744*t42762*t42727*8.0+t42831*t42760* \
               t42762*t42727*t42756*2.0+t42750*t42744*t42727*t42745*t42756*1.2E1+t42744*t42762*t42727*t42817*t42756+ \
               t42750*t42744*t42762*t42727*t42798*2.0E1-t42718*t42790*t42674*t42778*t42789*(1.0/2.0)+t42750*t42761* \
               t42744*t42727*t42745*t42729*3.2E1+t42750*t42831*t42727*t42745*t42729*t42756*8.0+t42760*t42744*t42727* \
               t42745*t42729*t42756*8.0-a1p*c*t42722*t42723*t42724*t42764*(2.0/3.0)+Aa*t42811*t42820*t42760*t42727* \
               t42809*t42799*4.0+Aa*t42811*t42823*t42727*t42817*t42809*t42799*2.0+Aa*t42811*t42750*t42727*t42809* \
               t42799*(t42745*t42756*1.2E1+t42762*t42798*2.0E1+t42761*t42745*t42729*3.2E1)*2.0-t42811*t42820*t42821* \
               t42750*t42824*t42727*t42829*t42799*2.0-t42811*t42821*t42760*t42823*t42824*t42727*t42829*t42799*2.0+ \
               t42811*t42821*t42830*t42750*1/(t42805*t42805*t42805)*t42823*t42727*t42799*2.0-t42811*t42821*t42750* \
               t42823*t42824*t42727*t42799*(b2a*c*t42714*(4.0/9.0)+b4a*t42715*t42672*(1.0E1/9.0)+b1a*c*t42714*t42716* \
               (2.0/9.0)+b3a*c*t42714*t42706*(2.0/3.0)-b1a*t42715*t42672*t42779*(1.0/3.6E1)+b3a*t42715*t42716*t42672* \
               (1.0/1.2E1))+Aa*a1a*c*t42820*t42723*t42750*t42727*t42809*t42799*(4.0/3.0)+Aa*a1a*c*t42714*t42750*t42823* \
               t42727*t42809*t42799*(8.0/9.0)+Aa*a1a*c*t42723*t42760*t42823*t42727*t42809*t42799*(4.0/3.0)-t42800* \
               t42811*t42830*t42750*1/(t42805*t42805*t42805*t42805)*t42823*t42727*1/(t42808*t42808)*t42799*(1.0/2.0) \
               -a1a*c*t42821*t42723*t42750*t42823*t42824*t42727*t42829*t42799*(2.0/3.0))-t42727*t42836*t42890*2.0- \
               t42722*t42724*t42718*t42764*2.0+t42851*t42854*t42685*t42868*2.0+a1p*c*c0p*t42723*t42743*(4.0/3.0)- \
               a1p*c*c0p*t42683*t42847*(4.0/3.0)+t42750*t42761*t42744*t42762*t42727*8.0+t42760*t42744*t42762*t42727* \
               t42756*2.0-t42750*t42762*t42727*t42756*t42887*2.0+t42750*t42744*t42727*t42745*t42729*t42756*8.0+Aa* \
               t42811*t42820*t42750*t42727*t42809*t42799*4.0+Aa*t42811*t42760*t42823*t42727*t42809*t42799*4.0-t42811* \
               t42821*t42750*t42823*t42824*t42727*t42829*t42799*2.0+Aa*a1a*c*t42723*t42750*t42823*t42727*t42809*t42799* \
               (4.0/3.0))+c0*t42673*(cx0+cx1*gamma_bb[index]*gx*t42934*t42686+cx2*t42924*t42692*t42935*t42687)*(4.0/ \
               9.0)-rho_b[index]*t42957*(ccaa1*gamma_bb[index]*gcaa*t42922*t42895*(8.8E1/9.0)-ccaa1*t42918*t42687* \
               t42688*t42959*2.4E1+ccaa2*t42918*t42687*t42688*t42896*(3.04E2/9.0)-ccaa2*t42962*t42963*t42687*t42688* \
               t42689*(3.2E1/3.0)-ccaa2*t42692*t42963*t42687*t42688*(gamma_bb[index]*gcaa*t42922*(1.76E2/9.0)+t42918* \
               t42687*t42688*(3.04E2/9.0))+ccaa2*t42692*(t42962*t42962)*t42687*1/(t42696*t42696*t42696)*t42688*2.0+ \
               ccaa1*gamma_bb[index]*gcaa*1/(t42691*t42691*t42691)*t42687*t42688*t42958*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t42922*t42934*(8.8E1/9.0)-cx1*t42924*t42918*t42936*t42687*2.4E1+cx2*t42924* \
               t42935*t42918*t42687*(3.04E2/9.0)-cx2*t42924*t42933*t42927*t42687*t42689*(3.2E1/3.0)-cx2*t42924*t42933* \
               t42692*t42687*(gamma_bb[index]*gx*t42922*(1.76E2/9.0)+t42924*t42918*t42687*(3.04E2/9.0))+cx2*1/(t42930* \
               t42930*t42930)*t42924*t42692*(t42927*t42927)*t42687*2.0+cx1*gamma_bb[index]*gx*t42924*1/(t42926*t42926* \
               t42926)*t42687*t42958*(1.28E2/9.0))-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t42934*t42693* \
               (8.0/3.0)-cx1*t42924*t42936*t42687*t42689*(8.0/3.0)+cx2*t42924*t42935*t42687*t42689*(1.6E1/3.0)-cx2* \
               t42924*t42933*t42692*t42927*t42687)*(8.0/3.0)+rho_b[index]*t42939*(-t42870+t42953+t42955+t42949-t42879+ \
               t42727*t42836*(t42870+t42952-t42953+t42954-t42955+t42947-t42949+t42879-t42940*t42860*t42852*t42838* \
               2.0-a1f*c*c0f*t42853*t42866*(8.0/9.0)))+rho_b[index]*t42966*t42969*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t44238 = 1/pow(rho_b[index],1.0/3.0);
            double t44239 = c*t44238;
            double t44240 = sqrt(t44239);
            double t44241 = pow(t44239,3.0/2.0);
            double t44242 = c*c;
            double t44243 = 1/pow(rho_b[index],2.0/3.0);
            double t44244 = 1/c0p;
            double t44245 = b1p*t44240;
            double t44246 = b3p*t44241;
            double t44247 = b4p*t44242*t44243;
            double t44248 = b2p*c*t44238;
            double t44249 = t44245+t44246+t44247+t44248;
            double t44250 = 1/t44249;
            double t44251 = t44250*t44244*(1.0/2.0);
            double t44252 = t44251+1.0;
            double t44253 = log(t44252);
            double t44254 = a1p*c*t44238;
            double t44255 = t44254+1.0;
            double t44256 = 1/pow(rho_b[index],8.0/3.0);
            double t44257 = gamma_bb[index]*gamma_bb[index];
            double t44258 = gcaa*gcaa;
            double t44259 = 1/pow(rho_b[index],1.9E1/3.0);
            double t44260 = gamma_bb[index]*gcaa*t44256;
            double t44261 = t44260+1.0;
            double t44262 = 1/pow(rho_b[index],1.6E1/3.0);
            double t44263 = 1/pow(rho_b[index],1.1E1/3.0);
            double t44264 = gamma_bb[index]*gcaa*t44256*2.0;
            double t44265 = t44262*t44257*t44258;
            double t44266 = t44264+t44265+1.0;
            double t44267 = pow(2.0,1.0/3.0);
            double t44268 = t44267*2.0;
            double t44269 = t44268-2.0;
            double t44270 = two_13*2.0;
            double t44271 = t44270-2.0;
            double t44272 = 1/t44271;
            double t44273 = a1f*c*t44238;
            double t44274 = t44273+1.0;
            double t44275 = 1/c0f;
            double t44276 = b1f*t44240;
            double t44277 = b3f*t44241;
            double t44278 = b4f*t44242*t44243;
            double t44279 = b2f*c*t44238;
            double t44280 = t44276+t44277+t44278+t44279;
            double t44281 = 1/t44280;
            double t44282 = t44281*t44275*(1.0/2.0);
            double t44283 = t44282+1.0;
            double t44284 = 1/pow(rho_b[index],4.0/3.0);
            double t44285 = 1/pow(rho_b[index],5.0/3.0);
            double t44286 = 1/sqrt(t44239);
            double t44287 = log(t44283);
            double t44288 = 1/t44252;
            double t44289 = 1/(t44249*t44249);
            double t44290 = b4p*t44242*t44285*(2.0/3.0);
            double t44291 = b2p*c*t44284*(1.0/3.0);
            double t44292 = b1p*c*t44284*t44286*(1.0/6.0);
            double t44293 = b3p*c*t44240*t44284*(1.0/2.0);
            double t44294 = t44290+t44291+t44292+t44293;
            double t44295 = t44255*t44294*t44288*t44289;
            double t44296 = 1/t44261;
            double t44297 = 1/t44266;
            double t44298 = gx*gx;
            double t44299 = gamma_bb[index]*gx*t44256;
            double t44300 = t44299+1.0;
            double t44301 = 1/pow(rho_b[index],2.2E1/3.0);
            double t44306 = gamma_bb[index]*gx*t44263*(1.6E1/3.0);
            double t44307 = t44257*t44259*t44298*(1.6E1/3.0);
            double t44302 = t44306+t44307;
            double t44303 = gamma_bb[index]*gx*t44256*2.0;
            double t44304 = t44262*t44257*t44298;
            double t44305 = t44303+t44304+1.0;
            double t44308 = 1/pow(rho_b[index],1.4E1/3.0);
            double t44309 = 1/(t44305*t44305);
            double t44310 = 1/t44300;
            double t44311 = 1/t44305;
            double t44312 = 1/(t44300*t44300);
            double t44313 = ccaa1*gamma_bb[index]*gcaa*t44256*t44296;
            double t44314 = ccaa2*t44262*t44257*t44258*t44297;
            double t44315 = ccaa0+t44313+t44314;
            double t44316 = 1/t44283;
            double t44317 = b4f*t44242*t44285*(2.0/3.0);
            double t44318 = b2f*c*t44284*(1.0/3.0);
            double t44319 = b1f*c*t44284*t44286*(1.0/6.0);
            double t44320 = b3f*c*t44240*t44284*(1.0/2.0);
            double t44321 = t44320+t44317+t44318+t44319;
            double t44322 = 1/(t44280*t44280);
            double t44323 = 1/pow(rho_b[index],7.0/3.0);
            double t44324 = 1/pow(t44239,3.0/2.0);
            double t44325 = t44321*t44321;
            double t44326 = t44294*t44294;
            double t44327 = 1/(t44249*t44249*t44249);
            double t44328 = t44326*t44255*t44327*t44288*2.0;
            double t44329 = b4p*t44242*t44256*(1.0E1/9.0);
            double t44330 = b2p*c*t44323*(4.0/9.0);
            double t44331 = b3p*t44242*t44256*t44286*(1.0/1.2E1);
            double t44332 = b1p*c*t44323*t44286*(2.0/9.0);
            double t44333 = b3p*c*t44240*t44323*(2.0/3.0);
            double t44334 = t44330+t44331+t44332+t44333+t44329-b1p*t44242*t44324*t44256*(1.0/3.6E1);
            double t44335 = 1/(t44252*t44252);
            double t44336 = 1/(t44249*t44249*t44249*t44249);
            double t44337 = a1p*c*c0p*t44323*t44253*(8.0/9.0);
            double t44338 = c0f*t44274*t44287*2.0;
            double t44339 = c0p*t44253*t44255*2.0;
            double t44340 = 1/pow(rho_b[index],1.0E1);
            double t44341 = 1/(t44261*t44261);
            double t44342 = gamma_bb[index]*gcaa*t44263*(1.6E1/3.0);
            double t44343 = t44257*t44258*t44259*(1.6E1/3.0);
            double t44344 = t44342+t44343;
            double t44345 = 1/(t44266*t44266);
            double t44346 = a1f*c*c0f*t44284*t44287*(2.0/3.0);
            double t44347 = a1p*c*c0p*t44253*t44284*(2.0/3.0);
            double t44348 = ccaa1*gamma_bb[index]*gcaa*t44263*t44296*(8.0/3.0);
            double t44349 = ccaa2*t44257*t44258*t44259*t44297*(1.6E1/3.0);
            double t44350 = t44348+t44349-ccaa1*t44341*t44257*t44258*t44259*(8.0/3.0)-ccaa2*t44262*t44344*t44345* \
               t44257*t44258;
            v_rho_b_rho_b_[index] = t44350*(t44339+t44272*t44269*(t44338-c0p*t44253*t44255*2.0))*2.0+t44315*(t44347- \
               t44295+t44272*t44269*(t44346+t44295-t44321*t44322*t44316*t44274-a1p*c*c0p*t44253*t44284*(2.0/3.0)) \
               )*2.0+c0*t44243*(cx0+cx1*gamma_bb[index]*gx*t44310*t44256+cx2*t44311*t44262*t44257*t44298)*(4.0/9.0) \
               -rho_b[index]*(t44339+t44272*t44269*(t44338-t44339))*(ccaa1*gamma_bb[index]*gcaa*t44308*t44296*(8.8E1/ \
               9.0)-ccaa1*t44301*t44341*t44257*t44258*2.4E1+ccaa2*t44301*t44257*t44258*t44297*(3.04E2/9.0)-ccaa2* \
               t44344*t44345*t44257*t44258*t44259*(3.2E1/3.0)-ccaa2*t44262*t44345*t44257*t44258*(gamma_bb[index]* \
               gcaa*t44308*(1.76E2/9.0)+t44301*t44257*t44258*(3.04E2/9.0))+ccaa2*t44262*(t44344*t44344)*t44257*1/ \
               (t44266*t44266*t44266)*t44258*2.0+ccaa1*gamma_bb[index]*gcaa*t44340*1/(t44261*t44261*t44261)*t44257* \
               t44258*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t44310*t44308*(8.8E1/9.0) \
               -cx1*t44301*t44312*t44257*t44298*2.4E1+cx2*t44301*t44311*t44257*t44298*(3.04E2/9.0)-cx2*t44302*t44309* \
               t44257*t44259*t44298*(3.2E1/3.0)-cx2*t44262*t44309*t44257*t44298*(gamma_bb[index]*gx*t44308*(1.76E2/ \
               9.0)+t44301*t44257*t44298*(3.04E2/9.0))+cx2*(t44302*t44302)*1/(t44305*t44305*t44305)*t44262*t44257* \
               t44298*2.0+cx1*gamma_bb[index]*gx*1/(t44300*t44300*t44300)*t44340*t44257*t44298*(1.28E2/9.0))+rho_b[index]* \
               t44315*(-t44328-t44337+t44272*t44269*(t44328+t44337-t44334*t44255*t44288*t44289-1/(t44280*t44280*t44280) \
               *t44316*t44325*t44274*2.0+t44322*t44316*t44274*(b2f*c*t44323*(4.0/9.0)+b4f*t44242*t44256*(1.0E1/9.0) \
               +b1f*c*t44323*t44286*(2.0/9.0)+b3f*c*t44240*t44323*(2.0/3.0)-b1f*t44242*t44324*t44256*(1.0/3.6E1)+ \
               b3f*t44242*t44256*t44286*(1.0/1.2E1))+1/(t44280*t44280*t44280*t44280)*t44325*t44274*1/(t44283*t44283) \
               *t44275*(1.0/2.0)-a1f*c*c0f*t44323*t44287*(8.0/9.0)-t44244*t44326*t44335*t44255*t44336*(1.0/2.0)+a1f* \
               c*t44321*t44322*t44316*t44284*(2.0/3.0)-a1p*c*t44284*t44294*t44288*t44289*(2.0/3.0))+t44334*t44255* \
               t44288*t44289+t44244*t44326*t44335*t44255*t44336*(1.0/2.0)+a1p*c*t44284*t44294*t44288*t44289*(2.0/ \
               3.0))-rho_b[index]*t44350*(t44347-t44295+t44272*t44269*(t44346-t44347+t44295-t44321*t44322*t44316* \
               t44274))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t44310*t44263*(8.0/3.0)-cx1*t44312* \
               t44257*t44259*t44298*(8.0/3.0)+cx2*t44311*t44257*t44259*t44298*(1.6E1/3.0)-cx2*t44302*t44262*t44309* \
               t44257*t44298)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t42971 = 1/pow(rho_a[index],1.0/3.0);
                double t42972 = c*t42971;
                double t42973 = sqrt(t42972);
                double t42974 = pow(t42972,3.0/2.0);
                double t42975 = c*c;
                double t42976 = 1/pow(rho_a[index],2.0/3.0);
                double t42977 = 1/c0p;
                double t42978 = b1p*t42973;
                double t42979 = b3p*t42974;
                double t42980 = b4p*t42975*t42976;
                double t42981 = b2p*c*t42971;
                double t42982 = t42980+t42981+t42978+t42979;
                double t42983 = 1/t42982;
                double t42984 = t42983*t42977*(1.0/2.0);
                double t42985 = t42984+1.0;
                double t42986 = log(t42985);
                double t42987 = a1p*c*t42971;
                double t42988 = t42987+1.0;
                double t42989 = pow(2.0,1.0/3.0);
                double t42990 = t42989*2.0;
                double t42991 = t42990-2.0;
                double t42992 = two_13*2.0;
                double t42993 = t42992-2.0;
                double t42994 = 1/t42993;
                double t42995 = 1/c0f;
                double t42996 = 1/pow(rho_b[index],1.0/3.0);
                double t42997 = c*t42996;
                double t42998 = sqrt(t42997);
                double t42999 = pow(t42997,3.0/2.0);
                double t43000 = 1/pow(rho_b[index],2.0/3.0);
                double t43001 = b1p*t42998;
                double t43002 = b3p*t42999;
                double t43003 = b4p*t42975*t43000;
                double t43004 = b2p*c*t42996;
                double t43005 = t43001+t43002+t43003+t43004;
                double t43006 = 1/t43005;
                double t43007 = t42977*t43006*(1.0/2.0);
                double t43008 = t43007+1.0;
                double t43009 = log(t43008);
                double t43010 = a1p*c*t42996;
                double t43011 = t43010+1.0;
                double t43012 = c0p*t43011*t43009*2.0;
                double t43013 = rho_a[index]+rho_b[index];
                double t43014 = 1/pow(t43013,1.0/3.0);
                double t43015 = c*t43014;
                double t43016 = sqrt(t43015);
                double t43017 = pow(t43015,3.0/2.0);
                double t43018 = 1/pow(t43013,2.0/3.0);
                double t43019 = b1p*t43016;
                double t43020 = b3p*t43017;
                double t43021 = b4p*t42975*t43018;
                double t43022 = b2p*c*t43014;
                double t43023 = t43020+t43021+t43022+t43019;
                double t43024 = 1/t43023;
                double t43025 = t42977*t43024*(1.0/2.0);
                double t43026 = t43025+1.0;
                double t43027 = log(t43026);
                double t43028 = a1p*c*t43014;
                double t43029 = t43028+1.0;
                double t43030 = c0p*t43027*t43029*2.0;
                double t43031 = rho_a[index]-rho_b[index];
                double t43032 = t43031*t43031;
                double t43033 = 1/t43013;
                double t43034 = t43031*t43033;
                double t43035 = 1/(t43013*t43013*t43013*t43013);
                double t43036 = t43032*t43032;
                double t43037 = t43034+1.0;
                double t43038 = pow(t43037,4.0/3.0);
                double t43039 = -t43034+1.0;
                double t43040 = pow(t43039,4.0/3.0);
                double t43041 = t43040+t43038-2.0;
                double t43042 = 1/pow(rho_a[index],1.1E1/3.0);
                double t43043 = 1/pow(rho_a[index],8.0/3.0);
                double t43044 = gamma_aa[index]*t43043*(1.0/2.0);
                double t43045 = 1/pow(rho_b[index],8.0/3.0);
                double t43046 = gamma_bb[index]*t43045*(1.0/2.0);
                double t43047 = t43044+t43046;
                double t43048 = gcab*t43047;
                double t43049 = t43048+1.0;
                double t43050 = gcab*gcab;
                double t43051 = t43047*t43047;
                double t43052 = t43050*t43051;
                double t43053 = gcab*t43047*2.0;
                double t43054 = t43052+t43053+1.0;
                double t43055 = 1/pow(rho_a[index],1.9E1/3.0);
                double t43056 = 1/(t43049*t43049);
                double t43057 = 1/t43054;
                double t43058 = 1/(t43054*t43054);
                double t43059 = gamma_aa[index]*gcab*t43042*(8.0/3.0);
                double t43060 = gamma_aa[index]*t43050*t43042*t43047*(8.0/3.0);
                double t43061 = t43060+t43059;
                double t43062 = gcab*t43043;
                double t43063 = t43050*t43043*t43047;
                double t43064 = t43062+t43063;
                double t43065 = b1f*t42973;
                double t43066 = b3f*t42974;
                double t43067 = b4f*t42975*t42976;
                double t43068 = b2f*c*t42971;
                double t43069 = t43065+t43066+t43067+t43068;
                double t43070 = 1/t43069;
                double t43071 = t42995*t43070*(1.0/2.0);
                double t43072 = t43071+1.0;
                double t43073 = log(t43072);
                double t43074 = a1f*c*t42971;
                double t43075 = t43074+1.0;
                double t43076 = c0f*t43073*t43075*2.0;
                double t43077 = c0p*t42986*t42988*2.0;
                double t43078 = gcaa*gcaa;
                double t43079 = 1/pow(rho_a[index],1.6E1/3.0);
                double t43080 = gamma_aa[index]*gcaa*t43043;
                double t43081 = t43080+1.0;
                double t43082 = gamma_aa[index]*gamma_aa[index];
                double t43083 = gamma_aa[index]*gcaa*t43043*2.0;
                double t43084 = t43082*t43078*t43079;
                double t43085 = t43083+t43084+1.0;
                double t43086 = 1/t43049;
                double t43087 = 1/pow(t43013,4.0/3.0);
                double t43088 = b1f*t43016;
                double t43089 = b3f*t43017;
                double t43090 = b4f*t42975*t43018;
                double t43091 = b2f*c*t43014;
                double t43092 = t43090+t43091+t43088+t43089;
                double t43093 = 1/t43092;
                double t43094 = t42995*t43093*(1.0/2.0);
                double t43095 = t43094+1.0;
                double t43096 = log(t43095);
                double t43097 = a1f*c*t43014;
                double t43098 = t43097+1.0;
                double t43100 = c0f*t43096*t43098*2.0;
                double t43099 = -t43100+t43030;
                double t43101 = 1/(t43013*t43013);
                double t43129 = t43101*t43031;
                double t43102 = t43033-t43129;
                double t43103 = t43100-t43030;
                double t43104 = 1/pow(t43013,5.0/3.0);
                double t43105 = 1/sqrt(t43015);
                double t43106 = 1/t43026;
                double t43107 = 1/(t43023*t43023);
                double t43108 = b4p*t42975*t43104*(2.0/3.0);
                double t43109 = b2p*c*t43087*(1.0/3.0);
                double t43110 = b1p*c*t43105*t43087*(1.0/6.0);
                double t43111 = b3p*c*t43016*t43087*(1.0/2.0);
                double t43112 = t43110+t43111+t43108+t43109;
                double t43113 = t43112*t43106*t43107*t43029;
                double t43114 = 1/d2fz0;
                double t43115 = 1/Aa;
                double t43116 = b1a*t43016;
                double t43117 = b3a*t43017;
                double t43118 = b4a*t42975*t43018;
                double t43119 = b2a*c*t43014;
                double t43120 = t43116+t43117+t43118+t43119;
                double t43121 = 1/t43120;
                double t43122 = t43121*t43115*(1.0/2.0);
                double t43123 = t43122+1.0;
                double t43124 = log(t43123);
                double t43125 = a1a*c*t43014;
                double t43126 = t43125+1.0;
                double t43127 = 1/(t43013*t43013*t43013*t43013*t43013);
                double t43128 = pow(t43037,1.0/3.0);
                double t43130 = t43102*t43128*(4.0/3.0);
                double t43131 = pow(t43039,1.0/3.0);
                double t43132 = t43130-t43102*t43131*(4.0/3.0);
                double t43133 = t43035*t43036;
                double t43134 = t43133-1.0;
                double t43135 = 1/pow(rho_a[index],4.0/3.0);
                double t43136 = 1/pow(rho_a[index],5.0/3.0);
                double t43137 = 1/sqrt(t42972);
                double t43138 = 1/t42985;
                double t43139 = 1/(t42982*t42982);
                double t43140 = b4p*t42975*t43136*(2.0/3.0);
                double t43141 = b2p*c*t43135*(1.0/3.0);
                double t43142 = b1p*c*t43135*t43137*(1.0/6.0);
                double t43143 = b3p*c*t42973*t43135*(1.0/2.0);
                double t43144 = t43140+t43141+t43142+t43143;
                double t43145 = t42988*t43144*t43138*t43139;
                double t43146 = t43076-t43077;
                double t43147 = t42991*t42994*t43146;
                double t43148 = Aa*t42994*t43041*t43114*t43124*t43134*t43126*2.0;
                double t43149 = t43147+t43077;
                double t43150 = 1/t43081;
                double t43151 = 1/t43085;
                double t43152 = 1/(t43081*t43081);
                double t43153 = 1/(t43085*t43085);
                double t43154 = gcaa*t43043*2.0;
                double t43155 = gamma_aa[index]*t43078*t43079*2.0;
                double t43156 = t43154+t43155;
                double t43157 = gamma_aa[index]*gcaa*t43042*(1.6E1/3.0);
                double t43158 = t43055*t43082*t43078*(1.6E1/3.0);
                double t43159 = t43157+t43158;
                double t43160 = gx*gx;
                double t43161 = gamma_aa[index]*gx*t43043;
                double t43162 = t43161+1.0;
                double t43163 = gamma_aa[index]*gx*t43043*2.0;
                double t43164 = t43160*t43082*t43079;
                double t43165 = t43163+t43164+1.0;
                double t43166 = 1/t43072;
                double t43167 = 1/(t43069*t43069);
                double t43168 = b4f*t42975*t43136*(2.0/3.0);
                double t43169 = b2f*c*t43135*(1.0/3.0);
                double t43170 = b1f*c*t43135*t43137*(1.0/6.0);
                double t43171 = b3f*c*t42973*t43135*(1.0/2.0);
                double t43172 = t43170+t43171+t43168+t43169;
                double t43173 = a1f*c*c0f*t43135*t43073*(2.0/3.0);
                double t43174 = a1p*c*c0p*t42986*t43135*(2.0/3.0);
                double t43175 = ccaa1*gcaa*t43150*t43043;
                double t43176 = ccaa2*gamma_aa[index]*t43151*t43078*t43079*2.0;
                double t43177 = t43175+t43176-ccaa1*gamma_aa[index]*t43152*t43078*t43079-ccaa2*t43153*t43082*t43156* \
                   t43078*t43079;
                double t43178 = 1/t43162;
                double t43179 = 1/t43165;
                double t43180 = 1/(t43162*t43162);
                double t43181 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t43182 = 1/(t43165*t43165);
                double t43183 = gx*t43043*2.0;
                double t43184 = gamma_aa[index]*t43160*t43079*2.0;
                double t43185 = t43183+t43184;
                double t43186 = gamma_aa[index]*gx*t43042*(1.6E1/3.0);
                double t43187 = t43160*t43055*t43082*(1.6E1/3.0);
                double t43188 = t43186+t43187;
                v_rho_a_gamma_aa_[index] = -t43149*t43177-(ccab1*gcab*t43043*t43086*(1.0/2.0)-ccab1*t43050*t43043* \
                   t43047*t43056*(1.0/2.0)-ccab2*t43050*t43051*t43064*t43058+ccab2*t43050*t43043*t43047*t43057)*(t43030- \
                   t43147+t43148-t43077+rho_a[index]*(-t43145+t43174+t42991*t42994*(t43145+t43173-t43172*t43075*t43166* \
                   t43167-a1p*c*c0p*t42986*t43135*(2.0/3.0)))-t43013*(-t43113+t42994*t43041*t43035*t43036*(t43113-(1/ \
                   (t43092*t43092)*t43098*(b2f*c*t43087*(1.0/3.0)+b4f*t42975*t43104*(2.0/3.0)+b1f*c*t43105*t43087*(1.0/ \
                   6.0)+b3f*c*t43016*t43087*(1.0/2.0)))/t43095+a1f*c*c0f*t43087*t43096*(2.0/3.0)-a1p*c*c0p*t43027*t43087* \
                   (2.0/3.0))+a1p*c*c0p*t43027*t43087*(2.0/3.0)-t42994*t43103*t43132*t43035*t43036+t42994*t43103*t43041* \
                   t43036*t43127*4.0+t42994*t43031*t43032*t43041*t43035*t43099*4.0+Aa*t42994*t43041*t43114*t43124*t43126* \
                   (t43036*t43127*4.0-t43031*t43032*t43035*4.0)*2.0-Aa*t42994*t43114*t43132*t43124*t43134*t43126*2.0- \
                   (t42994*1/(t43120*t43120)*t43041*t43114*t43134*t43126*(b2a*c*t43087*(1.0/3.0)+b4a*t42975*t43104*(2.0/ \
                   3.0)+b1a*c*t43105*t43087*(1.0/6.0)+b3a*c*t43016*t43087*(1.0/2.0)))/t43123+Aa*a1a*c*t42994*t43041*t43114* \
                   t43124*t43134*t43087*(2.0/3.0))+t42994*t43103*t43041*t43035*t43036)-(rho_a[index]*(t43077+t42991*t42994* \
                   (t43076-c0p*t42986*t42988*2.0))+rho_b[index]*(t43012-t42991*t42994*(t43012-c0f*log((t42995*(1.0/2.0) \
                   )/(b1f*t42998+b3f*t42999+b2f*c*t42996+b4f*t42975*t43000)+1.0)*(a1f*c*t42996+1.0)*2.0))-t43013*(t43030+ \
                   t43148-t42994*t43041*t43035*t43036*t43099))*(ccab1*gcab*t43042*t43086*(4.0/3.0)-ccab2*t43050*t43051* \
                   t43058*(gcab*t43042*(8.0/3.0)+gamma_aa[index]*t43050*t43055*(4.0/3.0)+t43050*t43042*t43047*(8.0/3.0) \
                   )-ccab1*gamma_aa[index]*t43050*t43055*t43056*(4.0/3.0)+ccab2*gamma_aa[index]*t43050*t43055*t43057* \
                   (4.0/3.0)-ccab1*t43050*t43042*t43047*t43056*(4.0/3.0)+ccab2*t43050*t43042*t43047*t43057*(8.0/3.0)- \
                   ccab2*t43050*t43043*t43061*t43047*t43058+ccab2*t43050*t43051*t43061*1/(t43054*t43054*t43054)*t43064* \
                   2.0-ccab2*gamma_aa[index]*t43050*t43042*t43064*t43047*t43058*(8.0/3.0)+ccab1*gamma_aa[index]*gcab* \
                   t43050*t43055*t43047*1/(t43049*t43049*t43049)*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1*gx*t43043* \
                   t43178-cx1*gamma_aa[index]*t43160*t43180*t43079+cx2*gamma_aa[index]*t43160*t43079*t43179*2.0-cx2*t43160* \
                   t43082*t43182*t43185*t43079)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t43042*t43178*(8.0/3.0) \
                   -cx1*gamma_aa[index]*t43160*t43180*t43055*8.0+cx2*gamma_aa[index]*t43160*t43055*t43179*(3.2E1/3.0) \
                   -cx2*t43160*t43055*t43082*t43182*t43185*(1.6E1/3.0)+cx1*gx*t43160*1/(t43162*t43162*t43162)*t43082* \
                   t43181*(1.6E1/3.0)-cx2*t43160*t43082*t43182*t43079*(gx*t43042*(1.6E1/3.0)+gamma_aa[index]*t43160*t43055* \
                   (3.2E1/3.0))-cx2*gamma_aa[index]*t43160*t43182*t43079*t43188*2.0+cx2*t43160*t43082*1/(t43165*t43165* \
                   t43165)*t43185*t43079*t43188*2.0)+rho_a[index]*t43177*(-t43145+t43174+t42991*t42994*(t43145+t43173- \
                   t43174-t43172*t43075*t43166*t43167))+rho_a[index]*t43149*(ccaa1*gcaa*t43042*t43150*(8.0/3.0)-ccaa1* \
                   gamma_aa[index]*t43152*t43055*t43078*8.0+ccaa2*gamma_aa[index]*t43151*t43055*t43078*(3.2E1/3.0)-ccaa2* \
                   t43153*t43055*t43082*t43156*t43078*(1.6E1/3.0)+ccaa1*gcaa*1/(t43081*t43081*t43081)*t43082*t43181*t43078* \
                   (1.6E1/3.0)-ccaa2*t43153*t43082*t43078*t43079*(gcaa*t43042*(1.6E1/3.0)+gamma_aa[index]*t43055*t43078* \
                   (3.2E1/3.0))-ccaa2*gamma_aa[index]*t43153*t43078*t43159*t43079*2.0+ccaa2*t43082*t43156*1/(t43085*t43085* \
                   t43085)*t43078*t43159*t43079*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t44763 = 1/pow(rho_a[index],1.0/3.0);
                double t44764 = c*t44763;
                double t44765 = sqrt(t44764);
                double t44766 = pow(t44764,3.0/2.0);
                double t44767 = c*c;
                double t44768 = 1/pow(rho_a[index],2.0/3.0);
                double t44769 = 1/c0p;
                double t44770 = b1p*t44765;
                double t44771 = b3p*t44766;
                double t44772 = b4p*t44767*t44768;
                double t44773 = b2p*c*t44763;
                double t44774 = t44770+t44771+t44772+t44773;
                double t44775 = 1/t44774;
                double t44776 = t44775*t44769*(1.0/2.0);
                double t44777 = t44776+1.0;
                double t44778 = log(t44777);
                double t44779 = a1p*c*t44763;
                double t44780 = t44779+1.0;
                double t44781 = 1/pow(rho_a[index],8.0/3.0);
                double t44782 = gcaa*gcaa;
                double t44783 = 1/pow(rho_a[index],1.6E1/3.0);
                double t44784 = gamma_aa[index]*gcaa*t44781;
                double t44785 = t44784+1.0;
                double t44786 = gamma_aa[index]*gamma_aa[index];
                double t44787 = gamma_aa[index]*gcaa*t44781*2.0;
                double t44788 = t44782*t44783*t44786;
                double t44789 = t44787+t44788+1.0;
                double t44790 = pow(2.0,1.0/3.0);
                double t44791 = t44790*2.0;
                double t44792 = t44791-2.0;
                double t44793 = two_13*2.0;
                double t44794 = t44793-2.0;
                double t44795 = 1/t44794;
                double t44796 = 1/c0f;
                double t44797 = b1f*t44765;
                double t44798 = b3f*t44766;
                double t44799 = b4f*t44767*t44768;
                double t44800 = b2f*c*t44763;
                double t44801 = t44800+t44797+t44798+t44799;
                double t44802 = 1/t44801;
                double t44803 = t44802*t44796*(1.0/2.0);
                double t44804 = t44803+1.0;
                double t44805 = log(t44804);
                double t44806 = a1f*c*t44763;
                double t44807 = t44806+1.0;
                double t44808 = c0f*t44805*t44807*2.0;
                double t44809 = c0p*t44780*t44778*2.0;
                double t44810 = 1/t44785;
                double t44811 = 1/t44789;
                double t44812 = 1/pow(rho_a[index],1.9E1/3.0);
                double t44813 = 1/(t44785*t44785);
                double t44814 = 1/pow(rho_a[index],1.1E1/3.0);
                double t44815 = 1/(t44789*t44789);
                double t44816 = gcaa*t44781*2.0;
                double t44817 = gamma_aa[index]*t44782*t44783*2.0;
                double t44818 = t44816+t44817;
                double t44819 = gamma_aa[index]*gcaa*t44814*(1.6E1/3.0);
                double t44820 = t44812*t44782*t44786*(1.6E1/3.0);
                double t44821 = t44820+t44819;
                double t44822 = gx*gx;
                double t44823 = gamma_aa[index]*gx*t44781;
                double t44824 = t44823+1.0;
                double t44825 = gamma_aa[index]*gx*t44781*2.0;
                double t44826 = t44822*t44783*t44786;
                double t44827 = t44825+t44826+1.0;
                double t44828 = 1/pow(rho_a[index],4.0/3.0);
                double t44829 = 1/pow(rho_a[index],5.0/3.0);
                double t44830 = 1/sqrt(t44764);
                double t44831 = 1/t44777;
                double t44832 = 1/(t44774*t44774);
                double t44833 = b4p*t44829*t44767*(2.0/3.0);
                double t44834 = b2p*c*t44828*(1.0/3.0);
                double t44835 = b1p*c*t44830*t44828*(1.0/6.0);
                double t44836 = b3p*c*t44765*t44828*(1.0/2.0);
                double t44837 = t44833+t44834+t44835+t44836;
                double t44838 = t44831*t44832*t44780*t44837;
                double t44839 = ccaa1*gcaa*t44810*t44781;
                double t44840 = ccaa2*gamma_aa[index]*t44811*t44782*t44783*2.0;
                double t44841 = t44840+t44839-ccaa1*gamma_aa[index]*t44813*t44782*t44783-ccaa2*t44815*t44782*t44818* \
                   t44783*t44786;
                double t44842 = 1/t44824;
                double t44843 = 1/t44827;
                double t44844 = 1/(t44824*t44824);
                double t44845 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t44846 = 1/(t44827*t44827);
                double t44847 = gx*t44781*2.0;
                double t44848 = gamma_aa[index]*t44822*t44783*2.0;
                double t44849 = t44847+t44848;
                double t44850 = gamma_aa[index]*gx*t44814*(1.6E1/3.0);
                double t44851 = t44812*t44822*t44786*(1.6E1/3.0);
                double t44852 = t44850+t44851;
                v_rho_a_gamma_aa_[index] = -t44841*(t44809+t44792*t44795*(t44808-c0p*t44780*t44778*2.0))+rho_a[index]* \
                   t44841*(-t44838+t44792*t44795*(t44838-(1/(t44801*t44801)*t44807*(b2f*c*t44828*(1.0/3.0)+b4f*t44829* \
                   t44767*(2.0/3.0)+b1f*c*t44830*t44828*(1.0/6.0)+b3f*c*t44765*t44828*(1.0/2.0)))/t44804+a1f*c*c0f*t44805* \
                   t44828*(2.0/3.0)-a1p*c*c0p*t44828*t44778*(2.0/3.0))+a1p*c*c0p*t44828*t44778*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t44842*t44781-cx1*gamma_aa[index]*t44822*t44844*t44783+cx2*gamma_aa[index]*t44822*t44843* \
                   t44783*2.0-cx2*t44822*t44783*t44846*t44786*t44849)*(4.0/3.0)+rho_a[index]*(t44809+t44792*t44795*(t44808- \
                   t44809))*(ccaa1*gcaa*t44810*t44814*(8.0/3.0)+ccaa2*gamma_aa[index]*t44811*t44812*t44782*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t44812*t44813*t44782*8.0-ccaa2*t44812*t44815*t44782*t44818*t44786*(1.6E1/3.0) \
                   +ccaa1*gcaa*t44782*t44845*1/(t44785*t44785*t44785)*t44786*(1.6E1/3.0)-ccaa2*t44815*t44782*t44783*t44786* \
                   (gcaa*t44814*(1.6E1/3.0)+gamma_aa[index]*t44812*t44782*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t44821*t44815* \
                   t44782*t44783*2.0+ccaa2*t44821*t44782*t44818*t44783*t44786*1/(t44789*t44789*t44789)*2.0)-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*gx*t44814*t44842*(8.0/3.0)-cx1*gamma_aa[index]*t44812*t44822*t44844*8.0+cx2*gamma_aa[index]* \
                   t44812*t44822*t44843*(3.2E1/3.0)-cx2*t44812*t44822*t44846*t44786*t44849*(1.6E1/3.0)+cx1*gx*t44822* \
                   1/(t44824*t44824*t44824)*t44845*t44786*(1.6E1/3.0)-cx2*t44822*t44783*t44846*t44786*(gx*t44814*(1.6E1/ \
                   3.0)+gamma_aa[index]*t44812*t44822*(3.2E1/3.0))-cx2*gamma_aa[index]*t44822*t44852*t44783*t44846*2.0+ \
                   cx2*t44822*t44852*1/(t44827*t44827*t44827)*t44783*t44786*t44849*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43191 = 1/pow(rho_a[index],1.0/3.0);
                double t43192 = c*t43191;
                double t43193 = sqrt(t43192);
                double t43194 = pow(t43192,3.0/2.0);
                double t43195 = c*c;
                double t43196 = 1/pow(rho_a[index],2.0/3.0);
                double t43197 = 1/c0p;
                double t43198 = b1p*t43193;
                double t43199 = b3p*t43194;
                double t43200 = b4p*t43195*t43196;
                double t43201 = b2p*c*t43191;
                double t43202 = t43200+t43201+t43198+t43199;
                double t43203 = 1/t43202;
                double t43204 = t43203*t43197*(1.0/2.0);
                double t43205 = t43204+1.0;
                double t43206 = log(t43205);
                double t43207 = a1p*c*t43191;
                double t43208 = t43207+1.0;
                double t43209 = pow(2.0,1.0/3.0);
                double t43210 = t43209*2.0;
                double t43211 = t43210-2.0;
                double t43212 = two_13*2.0;
                double t43213 = t43212-2.0;
                double t43214 = 1/t43213;
                double t43215 = 1/c0f;
                double t43216 = 1/pow(rho_b[index],1.0/3.0);
                double t43217 = c*t43216;
                double t43218 = sqrt(t43217);
                double t43219 = pow(t43217,3.0/2.0);
                double t43220 = 1/pow(rho_b[index],2.0/3.0);
                double t43221 = b1p*t43218;
                double t43222 = b3p*t43219;
                double t43223 = b4p*t43220*t43195;
                double t43224 = b2p*c*t43216;
                double t43225 = t43221+t43222+t43223+t43224;
                double t43226 = 1/t43225;
                double t43227 = t43226*t43197*(1.0/2.0);
                double t43228 = t43227+1.0;
                double t43229 = log(t43228);
                double t43230 = a1p*c*t43216;
                double t43231 = t43230+1.0;
                double t43232 = c0p*t43231*t43229*2.0;
                double t43233 = rho_a[index]+rho_b[index];
                double t43234 = 1/pow(t43233,1.0/3.0);
                double t43235 = c*t43234;
                double t43236 = sqrt(t43235);
                double t43237 = pow(t43235,3.0/2.0);
                double t43238 = 1/pow(t43233,2.0/3.0);
                double t43239 = b1p*t43236;
                double t43240 = b3p*t43237;
                double t43241 = b4p*t43238*t43195;
                double t43242 = b2p*c*t43234;
                double t43243 = t43240+t43241+t43242+t43239;
                double t43244 = 1/t43243;
                double t43245 = t43244*t43197*(1.0/2.0);
                double t43246 = t43245+1.0;
                double t43247 = log(t43246);
                double t43248 = a1p*c*t43234;
                double t43249 = t43248+1.0;
                double t43250 = c0p*t43247*t43249*2.0;
                double t43251 = rho_a[index]-rho_b[index];
                double t43252 = t43251*t43251;
                double t43253 = 1/t43233;
                double t43254 = t43251*t43253;
                double t43255 = 1/(t43233*t43233*t43233*t43233);
                double t43256 = t43252*t43252;
                double t43257 = t43254+1.0;
                double t43258 = pow(t43257,4.0/3.0);
                double t43259 = -t43254+1.0;
                double t43260 = pow(t43259,4.0/3.0);
                double t43261 = t43260+t43258-2.0;
                double t43262 = gcab*gcab;
                double t43263 = 1/pow(rho_a[index],1.1E1/3.0);
                double t43264 = 1/pow(rho_b[index],8.0/3.0);
                double t43265 = 1/pow(rho_a[index],8.0/3.0);
                double t43266 = gamma_aa[index]*t43265*(1.0/2.0);
                double t43267 = gamma_bb[index]*t43264*(1.0/2.0);
                double t43268 = t43266+t43267;
                double t43269 = gamma_aa[index]*gcab*t43263*(8.0/3.0);
                double t43270 = gamma_aa[index]*t43262*t43263*t43268*(8.0/3.0);
                double t43271 = t43270+t43269;
                double t43272 = t43268*t43268;
                double t43273 = t43262*t43272;
                double t43274 = gcab*t43268*2.0;
                double t43275 = t43273+t43274+1.0;
                double t43276 = gcab*t43264;
                double t43277 = t43262*t43264*t43268;
                double t43278 = t43276+t43277;
                double t43279 = 1/(t43275*t43275);
                double t43280 = gcab*t43268;
                double t43281 = t43280+1.0;
                double t43282 = c0p*t43206*t43208*2.0;
                double t43283 = 1/(t43281*t43281);
                double t43284 = 1/t43275;
                double t43285 = 1/pow(t43233,4.0/3.0);
                double t43286 = b1f*t43236;
                double t43287 = b3f*t43237;
                double t43288 = b4f*t43238*t43195;
                double t43289 = b2f*c*t43234;
                double t43290 = t43286+t43287+t43288+t43289;
                double t43291 = 1/t43290;
                double t43292 = t43215*t43291*(1.0/2.0);
                double t43293 = t43292+1.0;
                double t43294 = log(t43293);
                double t43295 = a1f*c*t43234;
                double t43296 = t43295+1.0;
                double t43298 = c0f*t43294*t43296*2.0;
                double t43297 = t43250-t43298;
                double t43299 = 1/(t43233*t43233);
                double t43326 = t43251*t43299;
                double t43300 = t43253-t43326;
                double t43301 = 1/pow(t43233,5.0/3.0);
                double t43302 = 1/sqrt(t43235);
                double t43303 = 1/t43246;
                double t43304 = 1/(t43243*t43243);
                double t43305 = b4p*t43301*t43195*(2.0/3.0);
                double t43306 = b2p*c*t43285*(1.0/3.0);
                double t43307 = b1p*c*t43302*t43285*(1.0/6.0);
                double t43308 = b3p*c*t43236*t43285*(1.0/2.0);
                double t43309 = t43305+t43306+t43307+t43308;
                double t43310 = t43303*t43304*t43309*t43249;
                double t43311 = 1/d2fz0;
                double t43312 = 1/Aa;
                double t43313 = b1a*t43236;
                double t43314 = b3a*t43237;
                double t43315 = b4a*t43238*t43195;
                double t43316 = b2a*c*t43234;
                double t43317 = t43313+t43314+t43315+t43316;
                double t43318 = 1/t43317;
                double t43319 = t43312*t43318*(1.0/2.0);
                double t43320 = t43319+1.0;
                double t43321 = log(t43320);
                double t43322 = a1a*c*t43234;
                double t43323 = t43322+1.0;
                double t43324 = 1/(t43233*t43233*t43233*t43233*t43233);
                double t43325 = pow(t43257,1.0/3.0);
                double t43327 = t43300*t43325*(4.0/3.0);
                double t43328 = pow(t43259,1.0/3.0);
                double t43329 = t43327-t43300*t43328*(4.0/3.0);
                double t43330 = t43255*t43256;
                double t43331 = t43330-1.0;
                double t43332 = a1f*c*t43191;
                double t43333 = t43332+1.0;
                double t43334 = b1f*t43193;
                double t43335 = b3f*t43194;
                double t43336 = b4f*t43195*t43196;
                double t43337 = b2f*c*t43191;
                double t43338 = t43334+t43335+t43336+t43337;
                double t43339 = 1/t43338;
                double t43340 = t43215*t43339*(1.0/2.0);
                double t43341 = t43340+1.0;
                double t43342 = 1/pow(rho_a[index],4.0/3.0);
                double t43343 = 1/pow(rho_a[index],5.0/3.0);
                double t43344 = 1/sqrt(t43192);
                double t43345 = log(t43341);
                double t43346 = 1/t43205;
                double t43347 = 1/(t43202*t43202);
                double t43348 = b4p*t43343*t43195*(2.0/3.0);
                double t43349 = b2p*c*t43342*(1.0/3.0);
                double t43350 = b1p*c*t43342*t43344*(1.0/6.0);
                double t43351 = b3p*c*t43342*t43193*(1.0/2.0);
                double t43352 = t43350+t43351+t43348+t43349;
                double t43353 = t43208*t43352*t43346*t43347;
                double t43354 = Aa*t43311*t43321*t43214*t43331*t43323*t43261*2.0;
                double t43355 = t43282-c0f*t43333*t43345*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t43282-t43211*t43214*t43355)+rho_b[index]*(t43232-t43211* \
                   t43214*(t43232-c0f*log((t43215*(1.0/2.0))/(b1f*t43218+b3f*t43219+b2f*c*t43216+b4f*t43220*t43195)+1.0) \
                   *(a1f*c*t43216+1.0)*2.0))-t43233*(t43250+t43354-t43214*t43261*t43255*t43256*t43297))*(ccab2*t43262* \
                   t43271*t43264*t43268*t43279-ccab2*t43262*t43271*t43272*1/(t43275*t43275*t43275)*t43278*2.0+ccab1*gamma_aa[index]* \
                   t43262*t43263*t43264*t43283*(4.0/3.0)-ccab2*gamma_aa[index]*t43262*t43263*t43264*t43284*(4.0/3.0)+ \
                   ccab2*gamma_aa[index]*t43262*t43263*t43268*t43278*t43279*(8.0/3.0)+ccab2*gamma_aa[index]*(t43262*t43262) \
                   *t43263*t43272*t43264*t43279*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t43262*t43263*1/(t43281*t43281*t43281) \
                   *t43264*t43268*(4.0/3.0))-((ccab1*gcab*t43264*(1.0/2.0))/t43281-ccab1*t43262*t43264*t43283*t43268* \
                   (1.0/2.0)+ccab2*t43262*t43264*t43284*t43268-ccab2*t43262*t43272*t43278*t43279)*(t43250-t43282+t43354+ \
                   rho_a[index]*(-t43353+t43211*t43214*(t43353-(t43333*1/(t43338*t43338)*(b2f*c*t43342*(1.0/3.0)+b4f* \
                   t43343*t43195*(2.0/3.0)+b1f*c*t43342*t43344*(1.0/6.0)+b3f*c*t43342*t43193*(1.0/2.0)))/t43341+a1f*c* \
                   c0f*t43342*t43345*(2.0/3.0)-a1p*c*c0p*t43206*t43342*(2.0/3.0))+a1p*c*c0p*t43206*t43342*(2.0/3.0))- \
                   t43233*(-t43310+t43214*t43261*t43255*t43256*(t43310-(1/(t43290*t43290)*t43296*(b2f*c*t43285*(1.0/3.0) \
                   +b4f*t43301*t43195*(2.0/3.0)+b1f*c*t43302*t43285*(1.0/6.0)+b3f*c*t43236*t43285*(1.0/2.0)))/t43293+ \
                   a1f*c*c0f*t43285*t43294*(2.0/3.0)-a1p*c*c0p*t43247*t43285*(2.0/3.0))+a1p*c*c0p*t43247*t43285*(2.0/ \
                   3.0)-t43214*t43261*t43324*t43256*t43297*4.0+t43214*t43255*t43256*t43329*t43297+t43214*t43251*t43252* \
                   t43261*t43255*t43297*4.0+Aa*t43311*t43321*t43214*t43323*t43261*(t43324*t43256*4.0-t43251*t43252*t43255* \
                   4.0)*2.0-Aa*t43311*t43321*t43214*t43331*t43323*t43329*2.0-(t43311*t43214*t43331*t43323*t43261*1/(t43317* \
                   t43317)*(b2a*c*t43285*(1.0/3.0)+b4a*t43301*t43195*(2.0/3.0)+b1a*c*t43302*t43285*(1.0/6.0)+b3a*c*t43236* \
                   t43285*(1.0/2.0)))/t43320+Aa*a1a*c*t43311*t43321*t43214*t43331*t43261*t43285*(2.0/3.0))+t43211*t43214* \
                   t43355-t43214*t43261*t43255*t43256*t43297);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43357 = 1/pow(rho_a[index],1.0/3.0);
                double t43358 = c*t43357;
                double t43359 = sqrt(t43358);
                double t43360 = pow(t43358,3.0/2.0);
                double t43361 = c*c;
                double t43362 = 1/pow(rho_a[index],2.0/3.0);
                double t43363 = 1/c0p;
                double t43364 = b1p*t43359;
                double t43365 = b3p*t43360;
                double t43366 = b4p*t43361*t43362;
                double t43367 = b2p*c*t43357;
                double t43368 = t43364+t43365+t43366+t43367;
                double t43369 = 1/t43368;
                double t43370 = t43363*t43369*(1.0/2.0);
                double t43371 = t43370+1.0;
                double t43372 = log(t43371);
                double t43373 = a1p*c*t43357;
                double t43374 = t43373+1.0;
                double t43375 = pow(2.0,1.0/3.0);
                double t43376 = t43375*2.0;
                double t43377 = t43376-2.0;
                double t43378 = two_13*2.0;
                double t43379 = t43378-2.0;
                double t43380 = 1/t43379;
                double t43381 = 1/c0f;
                double t43382 = 1/pow(rho_b[index],1.0/3.0);
                double t43383 = c*t43382;
                double t43384 = sqrt(t43383);
                double t43385 = pow(t43383,3.0/2.0);
                double t43386 = 1/pow(rho_b[index],2.0/3.0);
                double t43387 = b1p*t43384;
                double t43388 = b3p*t43385;
                double t43389 = b4p*t43361*t43386;
                double t43390 = b2p*c*t43382;
                double t43391 = t43390+t43387+t43388+t43389;
                double t43392 = 1/t43391;
                double t43393 = t43363*t43392*(1.0/2.0);
                double t43394 = t43393+1.0;
                double t43395 = log(t43394);
                double t43396 = a1p*c*t43382;
                double t43397 = t43396+1.0;
                double t43398 = c0p*t43395*t43397*2.0;
                double t43399 = rho_a[index]+rho_b[index];
                double t43400 = 1/pow(t43399,1.0/3.0);
                double t43401 = c*t43400;
                double t43402 = sqrt(t43401);
                double t43403 = pow(t43401,3.0/2.0);
                double t43404 = 1/pow(t43399,2.0/3.0);
                double t43405 = b1p*t43402;
                double t43406 = b3p*t43403;
                double t43407 = b4p*t43404*t43361;
                double t43408 = b2p*c*t43400;
                double t43409 = t43405+t43406+t43407+t43408;
                double t43410 = 1/t43409;
                double t43411 = t43410*t43363*(1.0/2.0);
                double t43412 = t43411+1.0;
                double t43413 = log(t43412);
                double t43414 = a1p*c*t43400;
                double t43415 = t43414+1.0;
                double t43416 = c0p*t43413*t43415*2.0;
                double t43417 = rho_a[index]-rho_b[index];
                double t43418 = t43417*t43417;
                double t43419 = 1/t43399;
                double t43420 = t43417*t43419;
                double t43421 = 1/(t43399*t43399*t43399*t43399);
                double t43422 = t43418*t43418;
                double t43423 = t43420+1.0;
                double t43424 = pow(t43423,4.0/3.0);
                double t43425 = -t43420+1.0;
                double t43426 = pow(t43425,4.0/3.0);
                double t43427 = t43424+t43426-2.0;
                double t43428 = gcab*gcab;
                double t43429 = 1/pow(rho_b[index],1.1E1/3.0);
                double t43430 = 1/pow(rho_a[index],8.0/3.0);
                double t43431 = gamma_aa[index]*t43430*(1.0/2.0);
                double t43432 = 1/pow(rho_b[index],8.0/3.0);
                double t43433 = gamma_bb[index]*t43432*(1.0/2.0);
                double t43434 = t43431+t43433;
                double t43435 = gamma_bb[index]*gcab*t43429*(8.0/3.0);
                double t43436 = gamma_bb[index]*t43434*t43428*t43429*(8.0/3.0);
                double t43437 = t43435+t43436;
                double t43438 = t43434*t43434;
                double t43439 = t43428*t43438;
                double t43440 = gcab*t43434*2.0;
                double t43441 = t43440+t43439+1.0;
                double t43442 = gcab*t43430;
                double t43443 = t43430*t43434*t43428;
                double t43444 = t43442+t43443;
                double t43445 = 1/(t43441*t43441);
                double t43446 = gcab*t43434;
                double t43447 = t43446+1.0;
                double t43448 = c0p*t43372*t43374*2.0;
                double t43449 = 1/(t43447*t43447);
                double t43450 = 1/t43441;
                double t43451 = 1/pow(t43399,4.0/3.0);
                double t43452 = b1f*t43402;
                double t43453 = b3f*t43403;
                double t43454 = b4f*t43404*t43361;
                double t43455 = b2f*c*t43400;
                double t43456 = t43452+t43453+t43454+t43455;
                double t43457 = 1/t43456;
                double t43458 = t43381*t43457*(1.0/2.0);
                double t43459 = t43458+1.0;
                double t43460 = log(t43459);
                double t43461 = a1f*c*t43400;
                double t43462 = t43461+1.0;
                double t43464 = c0f*t43460*t43462*2.0;
                double t43463 = t43416-t43464;
                double t43465 = 1/(t43399*t43399);
                double t43466 = t43417*t43465;
                double t43467 = t43419+t43466;
                double t43468 = 1/pow(t43399,5.0/3.0);
                double t43469 = 1/sqrt(t43401);
                double t43470 = 1/t43412;
                double t43471 = 1/(t43409*t43409);
                double t43472 = b4p*t43361*t43468*(2.0/3.0);
                double t43473 = b2p*c*t43451*(1.0/3.0);
                double t43474 = b1p*c*t43451*t43469*(1.0/6.0);
                double t43475 = b3p*c*t43402*t43451*(1.0/2.0);
                double t43476 = t43472+t43473+t43474+t43475;
                double t43477 = 1/d2fz0;
                double t43478 = 1/Aa;
                double t43479 = b1a*t43402;
                double t43480 = b3a*t43403;
                double t43481 = b4a*t43404*t43361;
                double t43482 = b2a*c*t43400;
                double t43483 = t43480+t43481+t43482+t43479;
                double t43484 = 1/t43483;
                double t43485 = t43484*t43478*(1.0/2.0);
                double t43486 = t43485+1.0;
                double t43487 = log(t43486);
                double t43488 = a1a*c*t43400;
                double t43489 = t43488+1.0;
                double t43490 = 1/(t43399*t43399*t43399*t43399*t43399);
                double t43491 = pow(t43423,1.0/3.0);
                double t43492 = t43491*t43467*(4.0/3.0);
                double t43493 = pow(t43425,1.0/3.0);
                double t43494 = t43492-t43493*t43467*(4.0/3.0);
                double t43495 = t43421*t43422;
                double t43496 = t43495-1.0;
                double t43497 = t43415*t43470*t43471*t43476;
                double t43498 = a1f*c*t43382;
                double t43499 = t43498+1.0;
                double t43500 = b1f*t43384;
                double t43501 = b3f*t43385;
                double t43502 = b4f*t43361*t43386;
                double t43503 = b2f*c*t43382;
                double t43504 = t43500+t43501+t43502+t43503;
                double t43505 = 1/t43504;
                double t43506 = t43505*t43381*(1.0/2.0);
                double t43507 = t43506+1.0;
                double t43508 = 1/pow(rho_b[index],4.0/3.0);
                double t43509 = 1/pow(rho_b[index],5.0/3.0);
                double t43510 = 1/sqrt(t43383);
                double t43511 = log(t43507);
                double t43512 = 1/t43394;
                double t43513 = 1/(t43391*t43391);
                double t43514 = b4p*t43361*t43509*(2.0/3.0);
                double t43515 = b2p*c*t43508*(1.0/3.0);
                double t43516 = b1p*c*t43510*t43508*(1.0/6.0);
                double t43517 = b3p*c*t43508*t43384*(1.0/2.0);
                double t43518 = t43514+t43515+t43516+t43517;
                double t43519 = t43512*t43513*t43518*t43397;
                double t43520 = t43398-c0f*t43511*t43499*2.0;
                double t43521 = Aa*t43380*t43427*t43477*t43487*t43496*t43489*2.0;
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t43430*(1.0/2.0))/t43447+ccab2*t43430*t43450*t43434*t43428- \
                   ccab1*t43430*t43434*t43428*t43449*(1.0/2.0)-ccab2*t43444*t43445*t43428*t43438)*(t43521+t43416-t43398+ \
                   t43399*(t43497-t43421*t43422*t43380*t43427*(t43497-(t43462*1/(t43456*t43456)*(b2f*c*t43451*(1.0/3.0) \
                   +b4f*t43361*t43468*(2.0/3.0)+b1f*c*t43451*t43469*(1.0/6.0)+b3f*c*t43402*t43451*(1.0/2.0)))/t43459+ \
                   a1f*c*c0f*t43451*t43460*(2.0/3.0)-a1p*c*c0p*t43413*t43451*(2.0/3.0))-a1p*c*c0p*t43413*t43451*(2.0/ \
                   3.0)+t43421*t43422*t43380*t43463*t43494+t43422*t43380*t43427*t43463*t43490*4.0+t43421*t43380*t43417* \
                   t43418*t43427*t43463*4.0-Aa*t43380*t43427*t43477*t43487*t43489*(t43422*t43490*4.0+t43421*t43417*t43418* \
                   4.0)*2.0-Aa*t43380*t43494*t43477*t43487*t43496*t43489*2.0+(t43380*t43427*1/(t43483*t43483)*t43477* \
                   t43496*t43489*(b2a*c*t43451*(1.0/3.0)+b4a*t43361*t43468*(2.0/3.0)+b1a*c*t43451*t43469*(1.0/6.0)+b3a* \
                   c*t43402*t43451*(1.0/2.0)))/t43486-Aa*a1a*c*t43451*t43380*t43427*t43477*t43487*t43496*(2.0/3.0))+rho_b[index]* \
                   (-t43519+t43380*t43377*(t43519-(1/(t43504*t43504)*t43499*(b2f*c*t43508*(1.0/3.0)+b4f*t43361*t43509* \
                   (2.0/3.0)+b1f*c*t43510*t43508*(1.0/6.0)+b3f*c*t43508*t43384*(1.0/2.0)))/t43507+a1f*c*c0f*t43511*t43508* \
                   (2.0/3.0)-a1p*c*c0p*t43508*t43395*(2.0/3.0))+a1p*c*c0p*t43508*t43395*(2.0/3.0))+t43520*t43380*t43377- \
                   t43421*t43422*t43380*t43427*t43463)+(rho_b[index]*(t43398-t43520*t43380*t43377)+rho_a[index]*(t43448- \
                   t43380*t43377*(t43448-c0f*log((t43381*(1.0/2.0))/(b1f*t43359+b3f*t43360+b2f*c*t43357+b4f*t43361*t43362) \
                   +1.0)*(a1f*c*t43357+1.0)*2.0))-t43399*(t43521+t43416-t43421*t43422*t43380*t43427*t43463))*(ccab2*t43430* \
                   t43434*t43445*t43428*t43437-ccab2*1/(t43441*t43441*t43441)*t43444*t43428*t43437*t43438*2.0-ccab2*gamma_bb[index]* \
                   t43430*t43450*t43428*t43429*(4.0/3.0)+ccab1*gamma_bb[index]*t43430*t43428*t43429*t43449*(4.0/3.0)+ \
                   ccab2*gamma_bb[index]*t43434*t43444*t43445*t43428*t43429*(8.0/3.0)+ccab2*gamma_bb[index]*t43430*t43445* \
                   (t43428*t43428)*t43429*t43438*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t43430*t43434*t43428*t43429*1/(t43447* \
                   t43447*t43447)*(4.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43524 = 1/pow(rho_a[index],1.0/3.0);
                double t43525 = c*t43524;
                double t43526 = sqrt(t43525);
                double t43527 = pow(t43525,3.0/2.0);
                double t43528 = c*c;
                double t43529 = 1/pow(rho_a[index],2.0/3.0);
                double t43530 = 1/c0p;
                double t43531 = b1p*t43526;
                double t43532 = b3p*t43527;
                double t43533 = b4p*t43528*t43529;
                double t43534 = b2p*c*t43524;
                double t43535 = t43531+t43532+t43533+t43534;
                double t43536 = 1/t43535;
                double t43537 = t43530*t43536*(1.0/2.0);
                double t43538 = t43537+1.0;
                double t43539 = log(t43538);
                double t43540 = a1p*c*t43524;
                double t43541 = t43540+1.0;
                double t43542 = pow(2.0,1.0/3.0);
                double t43543 = t43542*2.0;
                double t43544 = t43543-2.0;
                double t43545 = two_13*2.0;
                double t43546 = t43545-2.0;
                double t43547 = 1/t43546;
                double t43548 = 1/c0f;
                double t43549 = 1/pow(rho_b[index],1.0/3.0);
                double t43550 = c*t43549;
                double t43551 = sqrt(t43550);
                double t43552 = pow(t43550,3.0/2.0);
                double t43553 = 1/pow(rho_b[index],2.0/3.0);
                double t43554 = b1p*t43551;
                double t43555 = b3p*t43552;
                double t43556 = b4p*t43553*t43528;
                double t43557 = b2p*c*t43549;
                double t43558 = t43554+t43555+t43556+t43557;
                double t43559 = 1/t43558;
                double t43560 = t43530*t43559*(1.0/2.0);
                double t43561 = t43560+1.0;
                double t43562 = log(t43561);
                double t43563 = a1p*c*t43549;
                double t43564 = t43563+1.0;
                double t43565 = c0p*t43562*t43564*2.0;
                double t43566 = rho_a[index]+rho_b[index];
                double t43567 = 1/pow(t43566,1.0/3.0);
                double t43568 = c*t43567;
                double t43569 = sqrt(t43568);
                double t43570 = pow(t43568,3.0/2.0);
                double t43571 = 1/pow(t43566,2.0/3.0);
                double t43572 = b1p*t43569;
                double t43573 = b3p*t43570;
                double t43574 = b4p*t43571*t43528;
                double t43575 = b2p*c*t43567;
                double t43576 = t43572+t43573+t43574+t43575;
                double t43577 = 1/t43576;
                double t43578 = t43530*t43577*(1.0/2.0);
                double t43579 = t43578+1.0;
                double t43580 = log(t43579);
                double t43581 = a1p*c*t43567;
                double t43582 = t43581+1.0;
                double t43583 = c0p*t43580*t43582*2.0;
                double t43584 = rho_a[index]-rho_b[index];
                double t43585 = t43584*t43584;
                double t43586 = 1/t43566;
                double t43587 = t43584*t43586;
                double t43588 = 1/(t43566*t43566*t43566*t43566);
                double t43589 = t43585*t43585;
                double t43590 = t43587+1.0;
                double t43591 = pow(t43590,4.0/3.0);
                double t43592 = -t43587+1.0;
                double t43593 = pow(t43592,4.0/3.0);
                double t43594 = t43591+t43593-2.0;
                double t43595 = 1/pow(rho_b[index],1.1E1/3.0);
                double t43596 = 1/pow(rho_a[index],8.0/3.0);
                double t43597 = gamma_aa[index]*t43596*(1.0/2.0);
                double t43598 = 1/pow(rho_b[index],8.0/3.0);
                double t43599 = gamma_bb[index]*t43598*(1.0/2.0);
                double t43600 = t43597+t43599;
                double t43601 = gcab*t43600;
                double t43602 = t43601+1.0;
                double t43603 = gcab*gcab;
                double t43604 = t43600*t43600;
                double t43605 = t43603*t43604;
                double t43606 = gcab*t43600*2.0;
                double t43607 = t43605+t43606+1.0;
                double t43608 = 1/pow(rho_b[index],1.9E1/3.0);
                double t43609 = 1/(t43602*t43602);
                double t43610 = 1/t43607;
                double t43611 = 1/(t43607*t43607);
                double t43612 = gamma_bb[index]*gcab*t43595*(8.0/3.0);
                double t43613 = gamma_bb[index]*t43600*t43603*t43595*(8.0/3.0);
                double t43614 = t43612+t43613;
                double t43615 = gcab*t43598;
                double t43616 = t43600*t43603*t43598;
                double t43617 = t43615+t43616;
                double t43618 = b1f*t43551;
                double t43619 = b3f*t43552;
                double t43620 = b4f*t43553*t43528;
                double t43621 = b2f*c*t43549;
                double t43622 = t43620+t43621+t43618+t43619;
                double t43623 = 1/t43622;
                double t43624 = t43623*t43548*(1.0/2.0);
                double t43625 = t43624+1.0;
                double t43626 = log(t43625);
                double t43627 = a1f*c*t43549;
                double t43628 = t43627+1.0;
                double t43698 = c0f*t43626*t43628*2.0;
                double t43629 = t43565-t43698;
                double t43699 = t43544*t43547*t43629;
                double t43630 = t43565-t43699;
                double t43631 = gcaa*gcaa;
                double t43632 = 1/pow(rho_b[index],1.6E1/3.0);
                double t43633 = gamma_bb[index]*gcaa*t43598;
                double t43634 = t43633+1.0;
                double t43635 = gamma_bb[index]*gamma_bb[index];
                double t43636 = gamma_bb[index]*gcaa*t43598*2.0;
                double t43637 = t43631*t43632*t43635;
                double t43638 = t43636+t43637+1.0;
                double t43639 = 1/t43602;
                double t43640 = 1/pow(t43566,4.0/3.0);
                double t43641 = b1f*t43569;
                double t43642 = b3f*t43570;
                double t43643 = b4f*t43571*t43528;
                double t43644 = b2f*c*t43567;
                double t43645 = t43641+t43642+t43643+t43644;
                double t43646 = 1/t43645;
                double t43647 = t43646*t43548*(1.0/2.0);
                double t43648 = t43647+1.0;
                double t43649 = log(t43648);
                double t43650 = a1f*c*t43567;
                double t43651 = t43650+1.0;
                double t43653 = c0f*t43651*t43649*2.0;
                double t43652 = -t43653+t43583;
                double t43654 = 1/(t43566*t43566);
                double t43655 = t43654*t43584;
                double t43656 = t43655+t43586;
                double t43657 = t43653-t43583;
                double t43658 = 1/pow(t43566,5.0/3.0);
                double t43659 = 1/sqrt(t43568);
                double t43660 = 1/t43579;
                double t43661 = 1/(t43576*t43576);
                double t43662 = b4p*t43528*t43658*(2.0/3.0);
                double t43663 = b2p*c*t43640*(1.0/3.0);
                double t43664 = b1p*c*t43640*t43659*(1.0/6.0);
                double t43665 = b3p*c*t43640*t43569*(1.0/2.0);
                double t43666 = t43662+t43663+t43664+t43665;
                double t43667 = 1/d2fz0;
                double t43668 = 1/Aa;
                double t43669 = b1a*t43569;
                double t43670 = b3a*t43570;
                double t43671 = b4a*t43571*t43528;
                double t43672 = b2a*c*t43567;
                double t43673 = t43670+t43671+t43672+t43669;
                double t43674 = 1/t43673;
                double t43675 = t43674*t43668*(1.0/2.0);
                double t43676 = t43675+1.0;
                double t43677 = log(t43676);
                double t43678 = a1a*c*t43567;
                double t43679 = t43678+1.0;
                double t43680 = 1/(t43566*t43566*t43566*t43566*t43566);
                double t43681 = pow(t43590,1.0/3.0);
                double t43682 = t43681*t43656*(4.0/3.0);
                double t43683 = pow(t43592,1.0/3.0);
                double t43684 = t43682-t43656*t43683*(4.0/3.0);
                double t43685 = t43588*t43589;
                double t43686 = t43685-1.0;
                double t43687 = 1/pow(rho_b[index],4.0/3.0);
                double t43688 = 1/pow(rho_b[index],5.0/3.0);
                double t43689 = 1/sqrt(t43550);
                double t43690 = 1/t43561;
                double t43691 = 1/(t43558*t43558);
                double t43692 = b4p*t43528*t43688*(2.0/3.0);
                double t43693 = b2p*c*t43687*(1.0/3.0);
                double t43694 = b1p*c*t43687*t43689*(1.0/6.0);
                double t43695 = b3p*c*t43551*t43687*(1.0/2.0);
                double t43696 = t43692+t43693+t43694+t43695;
                double t43697 = t43564*t43690*t43691*t43696;
                double t43700 = Aa*t43547*t43594*t43667*t43677*t43686*t43679*2.0;
                double t43701 = a1p*c*c0p*t43640*t43580*(2.0/3.0);
                double t43702 = 1/t43634;
                double t43703 = 1/t43638;
                double t43704 = 1/(t43634*t43634);
                double t43705 = 1/(t43638*t43638);
                double t43706 = gcaa*t43598*2.0;
                double t43707 = gamma_bb[index]*t43631*t43632*2.0;
                double t43708 = t43706+t43707;
                double t43709 = gamma_bb[index]*gcaa*t43595*(1.6E1/3.0);
                double t43710 = t43631*t43608*t43635*(1.6E1/3.0);
                double t43711 = t43710+t43709;
                double t43712 = gx*gx;
                double t43713 = gamma_bb[index]*gx*t43598;
                double t43714 = t43713+1.0;
                double t43715 = gamma_bb[index]*gx*t43598*2.0;
                double t43716 = t43712*t43632*t43635;
                double t43717 = t43715+t43716+1.0;
                double t43718 = 1/t43625;
                double t43719 = 1/(t43622*t43622);
                double t43720 = b4f*t43528*t43688*(2.0/3.0);
                double t43721 = b2f*c*t43687*(1.0/3.0);
                double t43722 = b1f*c*t43687*t43689*(1.0/6.0);
                double t43723 = b3f*c*t43551*t43687*(1.0/2.0);
                double t43724 = t43720+t43721+t43722+t43723;
                double t43725 = a1f*c*c0f*t43626*t43687*(2.0/3.0);
                double t43726 = a1p*c*c0p*t43562*t43687*(2.0/3.0);
                double t43727 = ccaa1*gcaa*t43702*t43598;
                double t43728 = ccaa2*gamma_bb[index]*t43631*t43703*t43632*2.0;
                double t43729 = t43727+t43728-ccaa1*gamma_bb[index]*t43631*t43632*t43704-ccaa2*t43631*t43632*t43705* \
                   t43635*t43708;
                double t43730 = 1/t43714;
                double t43731 = 1/t43717;
                double t43732 = 1/(t43714*t43714);
                double t43733 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t43734 = 1/(t43717*t43717);
                double t43735 = gx*t43598*2.0;
                double t43736 = gamma_bb[index]*t43712*t43632*2.0;
                double t43737 = t43735+t43736;
                double t43738 = gamma_bb[index]*gx*t43595*(1.6E1/3.0);
                double t43739 = t43712*t43608*t43635*(1.6E1/3.0);
                double t43740 = t43738+t43739;
                v_rho_b_gamma_bb_[index] = (-rho_b[index]*t43630+t43566*(t43700+t43583-t43652*t43547*t43594*t43588* \
                   t43589)+rho_a[index]*(t43544*t43547*(c0p*t43541*t43539*2.0-c0f*log((t43548*(1.0/2.0))/(b1f*t43526+ \
                   b3f*t43527+b2f*c*t43524+b4f*t43528*t43529)+1.0)*(a1f*c*t43524+1.0)*2.0)-c0p*t43541*t43539*2.0))*(ccab1* \
                   gcab*t43639*t43595*(4.0/3.0)-ccab2*t43611*t43603*t43604*(gcab*t43595*(8.0/3.0)+gamma_bb[index]*t43603* \
                   t43608*(4.0/3.0)+t43600*t43603*t43595*(8.0/3.0))+ccab2*gamma_bb[index]*t43610*t43603*t43608*(4.0/3.0) \
                   -ccab1*gamma_bb[index]*t43603*t43608*t43609*(4.0/3.0)+ccab2*t43600*t43610*t43603*t43595*(8.0/3.0)- \
                   ccab1*t43600*t43603*t43609*t43595*(4.0/3.0)-ccab2*t43600*t43611*t43603*t43614*t43598+ccab2*t43603* \
                   t43604*t43614*1/(t43607*t43607*t43607)*t43617*2.0-ccab2*gamma_bb[index]*t43600*t43611*t43603*t43617* \
                   t43595*(8.0/3.0)+ccab1*gamma_bb[index]*gcab*t43600*1/(t43602*t43602*t43602)*t43603*t43608*(4.0/3.0) \
                   )-(ccab1*gcab*t43639*t43598*(1.0/2.0)-ccab2*t43611*t43603*t43604*t43617+ccab2*t43600*t43610*t43603* \
                   t43598-ccab1*t43600*t43603*t43609*t43598*(1.0/2.0))*(t43700-t43565+t43583+t43699+rho_b[index]*(t43726- \
                   t43697+t43544*t43547*(t43725+t43697-t43724*t43628*t43718*t43719-a1p*c*c0p*t43562*t43687*(2.0/3.0)) \
                   )-t43566*(t43701-t43660*t43661*t43582*t43666+t43680*t43547*t43594*t43657*t43589*4.0+t43547*t43657* \
                   t43684*t43588*t43589-t43547*t43594*t43588*t43589*(t43701-t43660*t43661*t43582*t43666+(t43651*1/(t43645* \
                   t43645)*(b2f*c*t43640*(1.0/3.0)+b4f*t43528*t43658*(2.0/3.0)+b1f*c*t43640*t43659*(1.0/6.0)+b3f*c*t43640* \
                   t43569*(1.0/2.0)))/t43648-a1f*c*c0f*t43640*t43649*(2.0/3.0))-t43652*t43547*t43584*t43585*t43594*t43588* \
                   4.0+Aa*t43547*t43594*t43667*t43677*t43679*(t43680*t43589*4.0+t43584*t43585*t43588*4.0)*2.0+Aa*t43547* \
                   t43684*t43667*t43677*t43686*t43679*2.0-(t43547*1/(t43673*t43673)*t43594*t43667*t43686*t43679*(b2a* \
                   c*t43640*(1.0/3.0)+b4a*t43528*t43658*(2.0/3.0)+b1a*c*t43640*t43659*(1.0/6.0)+b3a*c*t43640*t43569*(1.0/ \
                   2.0)))/t43676+Aa*a1a*c*t43640*t43547*t43594*t43667*t43677*t43686*(2.0/3.0))+t43547*t43594*t43657*t43588* \
                   t43589)-t43630*t43729+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t43730*t43598-cx1*gamma_bb[index]*t43712* \
                   t43632*t43732+cx2*gamma_bb[index]*t43712*t43632*t43731*2.0-cx2*t43712*t43632*t43635*t43734*t43737) \
                   *(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t43730*t43595*(8.0/3.0)-cx1*gamma_bb[index]*t43712* \
                   t43732*t43608*8.0+cx2*gamma_bb[index]*t43712*t43731*t43608*(3.2E1/3.0)-cx2*t43712*t43608*t43635*t43734* \
                   t43737*(1.6E1/3.0)+cx1*gx*t43712*1/(t43714*t43714*t43714)*t43733*t43635*(1.6E1/3.0)-cx2*t43712*t43632* \
                   t43635*t43734*(gx*t43595*(1.6E1/3.0)+gamma_bb[index]*t43712*t43608*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t43712*t43632*t43740*t43734*2.0+cx2*t43712*t43632*t43740*t43635*1/(t43717*t43717*t43717)*t43737*2.0) \
                   +rho_b[index]*t43729*(t43726-t43697+t43544*t43547*(t43725-t43726+t43697-t43724*t43628*t43718*t43719) \
                   )+rho_b[index]*t43630*(ccaa1*gcaa*t43702*t43595*(8.0/3.0)-ccaa1*gamma_bb[index]*t43631*t43704*t43608* \
                   8.0+ccaa2*gamma_bb[index]*t43631*t43703*t43608*(3.2E1/3.0)-ccaa2*t43631*t43705*t43608*t43635*t43708* \
                   (1.6E1/3.0)+ccaa1*gcaa*t43631*1/(t43634*t43634*t43634)*t43733*t43635*(1.6E1/3.0)-ccaa2*t43631*t43632* \
                   t43705*t43635*(gcaa*t43595*(1.6E1/3.0)+gamma_bb[index]*t43631*t43608*(3.2E1/3.0))-ccaa2*gamma_bb[index]* \
                   t43711*t43631*t43632*t43705*2.0+ccaa2*t43711*t43631*t43632*t43635*t43708*1/(t43638*t43638*t43638)* \
                   2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t44357 = 1/pow(rho_b[index],1.0/3.0);
                double t44358 = c*t44357;
                double t44359 = sqrt(t44358);
                double t44360 = pow(t44358,3.0/2.0);
                double t44361 = c*c;
                double t44362 = 1/pow(rho_b[index],2.0/3.0);
                double t44363 = 1/c0p;
                double t44364 = b1p*t44359;
                double t44365 = b3p*t44360;
                double t44366 = b4p*t44361*t44362;
                double t44367 = b2p*c*t44357;
                double t44368 = t44364+t44365+t44366+t44367;
                double t44369 = 1/t44368;
                double t44370 = t44363*t44369*(1.0/2.0);
                double t44371 = t44370+1.0;
                double t44372 = log(t44371);
                double t44373 = a1p*c*t44357;
                double t44374 = t44373+1.0;
                double t44375 = 1/pow(rho_b[index],8.0/3.0);
                double t44376 = gcaa*gcaa;
                double t44377 = 1/pow(rho_b[index],1.6E1/3.0);
                double t44378 = gamma_bb[index]*gcaa*t44375;
                double t44379 = t44378+1.0;
                double t44380 = gamma_bb[index]*gamma_bb[index];
                double t44381 = gamma_bb[index]*gcaa*t44375*2.0;
                double t44382 = t44380*t44376*t44377;
                double t44383 = t44381+t44382+1.0;
                double t44384 = pow(2.0,1.0/3.0);
                double t44385 = t44384*2.0;
                double t44386 = t44385-2.0;
                double t44387 = two_13*2.0;
                double t44388 = t44387-2.0;
                double t44389 = 1/t44388;
                double t44390 = 1/c0f;
                double t44391 = b1f*t44359;
                double t44392 = b3f*t44360;
                double t44393 = b4f*t44361*t44362;
                double t44394 = b2f*c*t44357;
                double t44395 = t44391+t44392+t44393+t44394;
                double t44396 = 1/t44395;
                double t44397 = t44390*t44396*(1.0/2.0);
                double t44398 = t44397+1.0;
                double t44399 = log(t44398);
                double t44400 = a1f*c*t44357;
                double t44401 = t44400+1.0;
                double t44402 = c0f*t44401*t44399*2.0;
                double t44403 = c0p*t44372*t44374*2.0;
                double t44404 = 1/t44379;
                double t44405 = 1/t44383;
                double t44406 = 1/pow(rho_b[index],1.9E1/3.0);
                double t44407 = 1/(t44379*t44379);
                double t44408 = 1/pow(rho_b[index],1.1E1/3.0);
                double t44409 = 1/(t44383*t44383);
                double t44410 = gcaa*t44375*2.0;
                double t44411 = gamma_bb[index]*t44376*t44377*2.0;
                double t44412 = t44410+t44411;
                double t44413 = gamma_bb[index]*gcaa*t44408*(1.6E1/3.0);
                double t44414 = t44406*t44380*t44376*(1.6E1/3.0);
                double t44415 = t44413+t44414;
                double t44416 = gx*gx;
                double t44417 = gamma_bb[index]*gx*t44375;
                double t44418 = t44417+1.0;
                double t44419 = gamma_bb[index]*gx*t44375*2.0;
                double t44420 = t44380*t44416*t44377;
                double t44421 = t44420+t44419+1.0;
                double t44422 = 1/pow(rho_b[index],4.0/3.0);
                double t44423 = 1/pow(rho_b[index],5.0/3.0);
                double t44424 = 1/sqrt(t44358);
                double t44425 = 1/t44371;
                double t44426 = 1/(t44368*t44368);
                double t44427 = b4p*t44423*t44361*(2.0/3.0);
                double t44428 = b2p*c*t44422*(1.0/3.0);
                double t44429 = b1p*c*t44422*t44424*(1.0/6.0);
                double t44430 = b3p*c*t44422*t44359*(1.0/2.0);
                double t44431 = t44430+t44427+t44428+t44429;
                double t44432 = t44431*t44425*t44426*t44374;
                double t44433 = ccaa1*gcaa*t44404*t44375;
                double t44434 = ccaa2*gamma_bb[index]*t44405*t44376*t44377*2.0;
                double t44435 = t44433+t44434-ccaa1*gamma_bb[index]*t44407*t44376*t44377-ccaa2*t44412*t44380*t44409* \
                   t44376*t44377;
                double t44436 = 1/t44418;
                double t44437 = 1/t44421;
                double t44438 = 1/(t44418*t44418);
                double t44439 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t44440 = 1/(t44421*t44421);
                double t44441 = gx*t44375*2.0;
                double t44442 = gamma_bb[index]*t44416*t44377*2.0;
                double t44443 = t44441+t44442;
                double t44444 = gamma_bb[index]*gx*t44408*(1.6E1/3.0);
                double t44445 = t44406*t44380*t44416*(1.6E1/3.0);
                double t44446 = t44444+t44445;
                v_rho_b_gamma_bb_[index] = -t44435*(t44403+t44386*t44389*(t44402-c0p*t44372*t44374*2.0))+rho_b[index]* \
                   t44435*(-t44432+t44386*t44389*(t44432-(t44401*1/(t44395*t44395)*(b2f*c*t44422*(1.0/3.0)+b4f*t44423* \
                   t44361*(2.0/3.0)+b1f*c*t44422*t44424*(1.0/6.0)+b3f*c*t44422*t44359*(1.0/2.0)))/t44398+a1f*c*c0f*t44422* \
                   t44399*(2.0/3.0)-a1p*c*c0p*t44422*t44372*(2.0/3.0))+a1p*c*c0p*t44422*t44372*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t44436*t44375-cx1*gamma_bb[index]*t44416*t44438*t44377+cx2*gamma_bb[index]*t44416*t44437* \
                   t44377*2.0-cx2*t44440*t44380*t44416*t44443*t44377)*(4.0/3.0)+rho_b[index]*(t44403+t44386*t44389*(t44402- \
                   t44403))*(ccaa1*gcaa*t44404*t44408*(8.0/3.0)+ccaa2*gamma_bb[index]*t44405*t44406*t44376*(3.2E1/3.0) \
                   -ccaa1*gamma_bb[index]*t44406*t44407*t44376*8.0-ccaa2*t44412*t44406*t44380*t44409*t44376*(1.6E1/3.0) \
                   +ccaa1*gcaa*t44380*t44376*t44439*1/(t44379*t44379*t44379)*(1.6E1/3.0)-ccaa2*t44380*t44409*t44376*t44377* \
                   (gcaa*t44408*(1.6E1/3.0)+gamma_bb[index]*t44406*t44376*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t44415*t44409* \
                   t44376*t44377*2.0+ccaa2*t44412*t44415*t44380*1/(t44383*t44383*t44383)*t44376*t44377*2.0)-c0*pow(rho_b[index],4.0/ \
                   3.0)*(cx1*gx*t44408*t44436*(8.0/3.0)-cx1*gamma_bb[index]*t44406*t44416*t44438*8.0+cx2*gamma_bb[index]* \
                   t44406*t44416*t44437*(3.2E1/3.0)-cx2*t44440*t44406*t44380*t44416*t44443*(1.6E1/3.0)+cx1*gx*t44380* \
                   t44416*1/(t44418*t44418*t44418)*t44439*(1.6E1/3.0)-cx2*t44440*t44380*t44416*t44377*(gx*t44408*(1.6E1/ \
                   3.0)+gamma_bb[index]*t44406*t44416*(3.2E1/3.0))-cx2*gamma_bb[index]*t44440*t44416*t44446*t44377*2.0+ \
                   cx2*1/(t44421*t44421*t44421)*t44380*t44416*t44443*t44446*t44377*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43742 = 1/pow(rho_a[index],1.0/3.0);
                double t43743 = c*t43742;
                double t43744 = sqrt(t43743);
                double t43745 = pow(t43743,3.0/2.0);
                double t43746 = c*c;
                double t43747 = 1/pow(rho_a[index],2.0/3.0);
                double t43748 = 1/c0p;
                double t43749 = b1p*t43744;
                double t43750 = b3p*t43745;
                double t43751 = b4p*t43746*t43747;
                double t43752 = b2p*c*t43742;
                double t43753 = t43750+t43751+t43752+t43749;
                double t43754 = 1/t43753;
                double t43755 = t43754*t43748*(1.0/2.0);
                double t43756 = t43755+1.0;
                double t43757 = log(t43756);
                double t43758 = a1p*c*t43742;
                double t43759 = t43758+1.0;
                double t43760 = pow(2.0,1.0/3.0);
                double t43761 = t43760*2.0;
                double t43762 = t43761-2.0;
                double t43763 = two_13*2.0;
                double t43764 = t43763-2.0;
                double t43765 = 1/t43764;
                double t43766 = 1/c0f;
                double t43767 = 1/pow(rho_b[index],1.0/3.0);
                double t43768 = c*t43767;
                double t43769 = sqrt(t43768);
                double t43770 = pow(t43768,3.0/2.0);
                double t43771 = 1/pow(rho_b[index],2.0/3.0);
                double t43772 = b1p*t43769;
                double t43773 = b3p*t43770;
                double t43774 = b4p*t43771*t43746;
                double t43775 = b2p*c*t43767;
                double t43776 = t43772+t43773+t43774+t43775;
                double t43777 = 1/t43776;
                double t43778 = t43748*t43777*(1.0/2.0);
                double t43779 = t43778+1.0;
                double t43780 = log(t43779);
                double t43781 = a1p*c*t43767;
                double t43782 = t43781+1.0;
                double t43783 = c0p*t43780*t43782*2.0;
                double t43784 = rho_a[index]+rho_b[index];
                double t43785 = 1/pow(t43784,1.0/3.0);
                double t43786 = c*t43785;
                double t43787 = sqrt(t43786);
                double t43788 = pow(t43786,3.0/2.0);
                double t43789 = 1/pow(t43784,2.0/3.0);
                double t43790 = b1p*t43787;
                double t43791 = b3p*t43788;
                double t43792 = b4p*t43746*t43789;
                double t43793 = b2p*c*t43785;
                double t43794 = t43790+t43791+t43792+t43793;
                double t43795 = 1/t43794;
                double t43796 = t43748*t43795*(1.0/2.0);
                double t43797 = t43796+1.0;
                double t43798 = log(t43797);
                double t43799 = a1p*c*t43785;
                double t43800 = t43799+1.0;
                double t43801 = c0p*t43800*t43798*2.0;
                double t43802 = rho_a[index]-rho_b[index];
                double t43803 = t43802*t43802;
                double t43804 = 1/t43784;
                double t43805 = t43802*t43804;
                double t43806 = 1/(t43784*t43784*t43784*t43784);
                double t43807 = t43803*t43803;
                double t43808 = t43805+1.0;
                double t43809 = pow(t43808,4.0/3.0);
                double t43810 = -t43805+1.0;
                double t43811 = pow(t43810,4.0/3.0);
                double t43812 = t43811+t43809-2.0;
                double t43813 = gcab*gcab;
                double t43814 = 1/pow(rho_a[index],1.6E1/3.0);
                double t43815 = 1/pow(rho_a[index],8.0/3.0);
                double t43816 = gamma_aa[index]*t43815*(1.0/2.0);
                double t43817 = 1/pow(rho_b[index],8.0/3.0);
                double t43818 = gamma_bb[index]*t43817*(1.0/2.0);
                double t43819 = t43816+t43818;
                double t43820 = gcab*t43819;
                double t43821 = t43820+1.0;
                double t43822 = t43819*t43819;
                double t43823 = t43813*t43822;
                double t43824 = gcab*t43819*2.0;
                double t43825 = t43823+t43824+1.0;
                double t43827 = gcab*t43815;
                double t43828 = t43813*t43815*t43819;
                double t43826 = t43827+t43828;
                double t43829 = 1/(t43825*t43825);
                double t43830 = b1f*t43744;
                double t43831 = b3f*t43745;
                double t43832 = b4f*t43746*t43747;
                double t43833 = b2f*c*t43742;
                double t43834 = t43830+t43831+t43832+t43833;
                double t43835 = 1/t43834;
                double t43836 = t43835*t43766*(1.0/2.0);
                double t43837 = t43836+1.0;
                double t43838 = log(t43837);
                double t43839 = a1f*c*t43742;
                double t43840 = t43839+1.0;
                double t43841 = c0f*t43840*t43838*2.0;
                double t43842 = c0p*t43757*t43759*2.0;
                double t43843 = gcaa*gcaa;
                double t43844 = gamma_aa[index]*gcaa*t43815;
                double t43845 = t43844+1.0;
                double t43846 = gamma_aa[index]*gamma_aa[index];
                double t43847 = gamma_aa[index]*gcaa*t43815*2.0;
                double t43848 = t43814*t43843*t43846;
                double t43849 = t43847+t43848+1.0;
                double t43851 = gcaa*t43815*2.0;
                double t43852 = gamma_aa[index]*t43814*t43843*2.0;
                double t43850 = t43851+t43852;
                double t43853 = 1/(t43849*t43849);
                double t43854 = gx*gx;
                double t43855 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t43856 = gamma_aa[index]*gx*t43815;
                double t43857 = t43856+1.0;
                double t43858 = 1/pow(rho_a[index],3.2E1/3.0);
                double t43859 = gamma_aa[index]*gx*t43815*2.0;
                double t43860 = t43814*t43854*t43846;
                double t43861 = t43860+t43859+1.0;
                double t43863 = gx*t43815*2.0;
                double t43864 = gamma_aa[index]*t43814*t43854*2.0;
                double t43862 = t43863+t43864;
                double t43865 = 1/(t43861*t43861);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t43842+t43762*t43765*(t43841-c0p*t43757*t43759*2.0) \
                   )+rho_b[index]*(t43783-t43762*t43765*(t43783-c0f*log((t43766*(1.0/2.0))/(b1f*t43769+b3f*t43770+b2f* \
                   c*t43767+b4f*t43771*t43746)+1.0)*(a1f*c*t43767+1.0)*2.0))-t43784*(t43801-t43812*t43806*t43807*t43765* \
                   (t43801-c0f*log((t43766*(1.0/2.0))/(b1f*t43787+b3f*t43788+b2f*c*t43785+b4f*t43746*t43789)+1.0)*(a1f* \
                   c*t43785+1.0)*2.0)+(Aa*t43812*t43765*log((1.0/2.0)/(Aa*(b1a*t43787+b3a*t43788+b2a*c*t43785+b4a*t43746* \
                   t43789))+1.0)*(t43806*t43807-1.0)*(a1a*c*t43785+1.0)*2.0)/d2fz0))*(ccab1*1/(t43821*t43821)*t43813* \
                   t43814*(1.0/2.0)-(ccab2*t43813*t43814*(1.0/2.0))/t43825-ccab2*t43813*t43822*1/(t43825*t43825*t43825) \
                   *(t43826*t43826)*2.0+ccab2*(t43813*t43813)*t43822*t43814*t43829*(1.0/2.0)+ccab2*t43813*t43815*t43826* \
                   t43819*t43829*2.0-ccab1*gcab*1/(t43821*t43821*t43821)*t43813*t43814*t43819*(1.0/2.0))+rho_a[index]* \
                   (t43842+t43762*t43765*(t43841-t43842))*(ccaa1*t43814*t43843*1/(t43845*t43845)*2.0-(ccaa2*t43814*t43843* \
                   2.0)/t43849+ccaa2*(t43843*t43843)*t43853*t43846*t43858*2.0-ccaa1*gamma_aa[index]*gcaa*t43843*1/(t43845* \
                   t43845*t43845)*t43855*2.0-ccaa2*t43814*(t43850*t43850)*t43843*t43846*1/(t43849*t43849*t43849)*2.0+ \
                   ccaa2*gamma_aa[index]*t43814*t43850*t43843*t43853*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*t43814*t43854* \
                   1/(t43857*t43857)*2.0-(cx2*t43814*t43854*2.0)/t43861+cx2*(t43854*t43854)*t43846*t43865*t43858*2.0- \
                   cx1*gamma_aa[index]*gx*t43854*t43855*1/(t43857*t43857*t43857)*2.0-cx2*t43814*1/(t43861*t43861*t43861) \
                   *(t43862*t43862)*t43854*t43846*2.0+cx2*gamma_aa[index]*t43814*t43862*t43854*t43865*4.0);
            } else if (rho_a[index] > cutoff_) {
                double t44859 = 1/pow(rho_a[index],1.0/3.0);
                double t44860 = c*t44859;
                double t44861 = sqrt(t44860);
                double t44862 = pow(t44860,3.0/2.0);
                double t44863 = c*c;
                double t44864 = 1/pow(rho_a[index],2.0/3.0);
                double t44865 = 1/c0p;
                double t44866 = b1p*t44861;
                double t44867 = b3p*t44862;
                double t44868 = b4p*t44863*t44864;
                double t44869 = b2p*c*t44859;
                double t44870 = t44866+t44867+t44868+t44869;
                double t44871 = 1/t44870;
                double t44872 = t44871*t44865*(1.0/2.0);
                double t44873 = t44872+1.0;
                double t44874 = log(t44873);
                double t44875 = a1p*c*t44859;
                double t44876 = t44875+1.0;
                double t44877 = gcaa*gcaa;
                double t44878 = 1/pow(rho_a[index],1.6E1/3.0);
                double t44879 = 1/pow(rho_a[index],8.0/3.0);
                double t44880 = gamma_aa[index]*gcaa*t44879;
                double t44881 = t44880+1.0;
                double t44882 = gamma_aa[index]*gamma_aa[index];
                double t44883 = gamma_aa[index]*gcaa*t44879*2.0;
                double t44884 = t44882*t44877*t44878;
                double t44885 = t44883+t44884+1.0;
                double t44887 = gcaa*t44879*2.0;
                double t44888 = gamma_aa[index]*t44877*t44878*2.0;
                double t44886 = t44887+t44888;
                double t44889 = 1/(t44885*t44885);
                double t44890 = gx*gx;
                double t44891 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t44892 = gamma_aa[index]*gx*t44879;
                double t44893 = t44892+1.0;
                double t44894 = 1/pow(rho_a[index],3.2E1/3.0);
                double t44895 = gamma_aa[index]*gx*t44879*2.0;
                double t44896 = t44890*t44882*t44878;
                double t44897 = t44895+t44896+1.0;
                double t44899 = gx*t44879*2.0;
                double t44900 = gamma_aa[index]*t44890*t44878*2.0;
                double t44898 = t44900+t44899;
                double t44901 = 1/(t44897*t44897);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t44861+b3f*t44862+b2f*c*t44859+b4f*t44863*t44864))+1.0)*(a1f*c*t44859+1.0)*2.0-c0p*t44874*t44876*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t44874*t44876*2.0)*(ccaa1*1/(t44881*t44881)*t44877*t44878*2.0-(ccaa2*t44877* \
                   t44878*2.0)/t44885+ccaa2*t44882*t44894*(t44877*t44877)*t44889*2.0-ccaa1*gamma_aa[index]*gcaa*1/(t44881* \
                   t44881*t44881)*t44891*t44877*2.0-ccaa2*t44882*1/(t44885*t44885*t44885)*t44877*(t44886*t44886)*t44878* \
                   2.0+ccaa2*gamma_aa[index]*t44877*t44886*t44878*t44889*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*t44890* \
                   1/(t44893*t44893)*t44878*2.0-(cx2*t44890*t44878*2.0)/t44897+cx2*t44901*(t44890*t44890)*t44882*t44894* \
                   2.0-cx1*gamma_aa[index]*gx*t44890*t44891*1/(t44893*t44893*t44893)*2.0-cx2*t44890*t44882*t44878*1/(t44897* \
                   t44897*t44897)*(t44898*t44898)*2.0+cx2*gamma_aa[index]*t44901*t44890*t44878*t44898*4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43868 = 1/pow(rho_a[index],1.0/3.0);
                double t43869 = c*t43868;
                double t43870 = sqrt(t43869);
                double t43871 = pow(t43869,3.0/2.0);
                double t43872 = c*c;
                double t43873 = 1/pow(rho_a[index],2.0/3.0);
                double t43874 = 1/c0p;
                double t43875 = b1p*t43870;
                double t43876 = b3p*t43871;
                double t43877 = b4p*t43872*t43873;
                double t43878 = b2p*c*t43868;
                double t43879 = t43875+t43876+t43877+t43878;
                double t43880 = 1/t43879;
                double t43881 = t43880*t43874*(1.0/2.0);
                double t43882 = t43881+1.0;
                double t43883 = log(t43882);
                double t43884 = a1p*c*t43868;
                double t43885 = t43884+1.0;
                double t43886 = pow(2.0,1.0/3.0);
                double t43887 = t43886*2.0;
                double t43888 = t43887-2.0;
                double t43889 = two_13*2.0;
                double t43890 = t43889-2.0;
                double t43891 = 1/t43890;
                double t43892 = 1/c0f;
                double t43893 = 1/pow(rho_b[index],1.0/3.0);
                double t43894 = c*t43893;
                double t43895 = sqrt(t43894);
                double t43896 = pow(t43894,3.0/2.0);
                double t43897 = 1/pow(rho_b[index],2.0/3.0);
                double t43898 = b1p*t43895;
                double t43899 = b3p*t43896;
                double t43900 = b4p*t43872*t43897;
                double t43901 = b2p*c*t43893;
                double t43902 = t43900+t43901+t43898+t43899;
                double t43903 = 1/t43902;
                double t43904 = t43903*t43874*(1.0/2.0);
                double t43905 = t43904+1.0;
                double t43906 = log(t43905);
                double t43907 = a1p*c*t43893;
                double t43908 = t43907+1.0;
                double t43909 = c0p*t43906*t43908*2.0;
                double t43910 = rho_a[index]+rho_b[index];
                double t43911 = 1/pow(t43910,1.0/3.0);
                double t43912 = c*t43911;
                double t43913 = sqrt(t43912);
                double t43914 = pow(t43912,3.0/2.0);
                double t43915 = 1/pow(t43910,2.0/3.0);
                double t43916 = b1p*t43913;
                double t43917 = b3p*t43914;
                double t43918 = b4p*t43915*t43872;
                double t43919 = b2p*c*t43911;
                double t43920 = t43916+t43917+t43918+t43919;
                double t43921 = 1/t43920;
                double t43922 = t43921*t43874*(1.0/2.0);
                double t43923 = t43922+1.0;
                double t43924 = log(t43923);
                double t43925 = a1p*c*t43911;
                double t43926 = t43925+1.0;
                double t43927 = c0p*t43924*t43926*2.0;
                double t43928 = rho_a[index]-rho_b[index];
                double t43929 = t43928*t43928;
                double t43930 = 1/t43910;
                double t43931 = t43930*t43928;
                double t43932 = 1/(t43910*t43910*t43910*t43910);
                double t43933 = t43929*t43929;
                double t43934 = t43931+1.0;
                double t43935 = pow(t43934,4.0/3.0);
                double t43936 = -t43931+1.0;
                double t43937 = pow(t43936,4.0/3.0);
                double t43938 = t43935+t43937-2.0;
                double t43939 = 1/pow(rho_a[index],8.0/3.0);
                double t43940 = 1/pow(rho_b[index],8.0/3.0);
                double t43941 = gcab*gcab;
                double t43942 = gamma_aa[index]*t43939*(1.0/2.0);
                double t43943 = gamma_bb[index]*t43940*(1.0/2.0);
                double t43944 = t43942+t43943;
                double t43945 = t43944*t43944;
                double t43946 = t43941*t43945;
                double t43947 = gcab*t43944*2.0;
                double t43948 = t43946+t43947+1.0;
                double t43949 = 1/(t43948*t43948);
                double t43950 = gcab*t43939;
                double t43951 = t43941*t43944*t43939;
                double t43952 = t43950+t43951;
                double t43953 = gcab*t43940;
                double t43954 = t43940*t43941*t43944;
                double t43955 = t43953+t43954;
                double t43956 = gcab*t43944;
                double t43957 = t43956+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t43909-t43891*t43888*(t43909-c0f*log((t43892*(1.0/2.0) \
                   )/(b1f*t43895+b3f*t43896+b2f*c*t43893+b4f*t43872*t43897)+1.0)*(a1f*c*t43893+1.0)*2.0))+t43910*(t43927- \
                   t43932*t43933*t43891*t43938*(t43927-c0f*log((t43892*(1.0/2.0))/(b1f*t43913+b3f*t43914+b2f*c*t43911+ \
                   b4f*t43915*t43872)+1.0)*(a1f*c*t43911+1.0)*2.0)+(Aa*t43891*t43938*log((1.0/2.0)/(Aa*(b1a*t43913+b3a* \
                   t43914+b2a*c*t43911+b4a*t43915*t43872))+1.0)*(t43932*t43933-1.0)*(a1a*c*t43911+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t43891*t43888*(c0p*t43883*t43885*2.0-c0f*log((t43892*(1.0/2.0))/(b1f*t43870+b3f*t43871+b2f*c*t43868+ \
                   b4f*t43872*t43873)+1.0)*(a1f*c*t43868+1.0)*2.0)-c0p*t43883*t43885*2.0))*(ccab1*t43940*t43941*t43939* \
                   1/(t43957*t43957)*(1.0/2.0)-(ccab2*t43940*t43941*t43939*(1.0/2.0))/t43948+ccab2*t43940*t43941*t43952* \
                   t43944*t43949+ccab2*t43941*t43944*t43955*t43939*t43949+ccab2*t43940*(t43941*t43941)*t43945*t43939* \
                   t43949*(1.0/2.0)-ccab2*t43941*t43952*t43945*t43955*1/(t43948*t43948*t43948)*2.0-ccab1*gcab*t43940* \
                   t43941*t43944*t43939*1/(t43957*t43957*t43957)*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43961 = 1/pow(rho_a[index],1.0/3.0);
                double t43962 = c*t43961;
                double t43963 = sqrt(t43962);
                double t43964 = pow(t43962,3.0/2.0);
                double t43965 = c*c;
                double t43966 = 1/pow(rho_a[index],2.0/3.0);
                double t43967 = 1/c0p;
                double t43968 = b1p*t43963;
                double t43969 = b3p*t43964;
                double t43970 = b4p*t43965*t43966;
                double t43971 = b2p*c*t43961;
                double t43972 = t43970+t43971+t43968+t43969;
                double t43973 = 1/t43972;
                double t43974 = t43973*t43967*(1.0/2.0);
                double t43975 = t43974+1.0;
                double t43976 = log(t43975);
                double t43977 = a1p*c*t43961;
                double t43978 = t43977+1.0;
                double t43979 = pow(2.0,1.0/3.0);
                double t43980 = t43979*2.0;
                double t43981 = t43980-2.0;
                double t43982 = two_13*2.0;
                double t43983 = t43982-2.0;
                double t43984 = 1/t43983;
                double t43985 = 1/c0f;
                double t43986 = 1/pow(rho_b[index],1.0/3.0);
                double t43987 = c*t43986;
                double t43988 = sqrt(t43987);
                double t43989 = pow(t43987,3.0/2.0);
                double t43990 = 1/pow(rho_b[index],2.0/3.0);
                double t43991 = b1p*t43988;
                double t43992 = b3p*t43989;
                double t43993 = b4p*t43990*t43965;
                double t43994 = b2p*c*t43986;
                double t43995 = t43991+t43992+t43993+t43994;
                double t43996 = 1/t43995;
                double t43997 = t43967*t43996*(1.0/2.0);
                double t43998 = t43997+1.0;
                double t43999 = log(t43998);
                double t44000 = a1p*c*t43986;
                double t44001 = t44000+1.0;
                double t44002 = c0p*t43999*t44001*2.0;
                double t44003 = rho_a[index]+rho_b[index];
                double t44004 = 1/pow(t44003,1.0/3.0);
                double t44005 = c*t44004;
                double t44006 = sqrt(t44005);
                double t44007 = pow(t44005,3.0/2.0);
                double t44008 = 1/pow(t44003,2.0/3.0);
                double t44009 = b1p*t44006;
                double t44010 = b3p*t44007;
                double t44011 = b4p*t43965*t44008;
                double t44012 = b2p*c*t44004;
                double t44013 = t44010+t44011+t44012+t44009;
                double t44014 = 1/t44013;
                double t44015 = t43967*t44014*(1.0/2.0);
                double t44016 = t44015+1.0;
                double t44017 = log(t44016);
                double t44018 = a1p*c*t44004;
                double t44019 = t44018+1.0;
                double t44020 = c0p*t44017*t44019*2.0;
                double t44021 = rho_a[index]-rho_b[index];
                double t44022 = t44021*t44021;
                double t44023 = 1/t44003;
                double t44024 = t44021*t44023;
                double t44025 = 1/(t44003*t44003*t44003*t44003);
                double t44026 = t44022*t44022;
                double t44027 = t44024+1.0;
                double t44028 = pow(t44027,4.0/3.0);
                double t44029 = -t44024+1.0;
                double t44030 = pow(t44029,4.0/3.0);
                double t44031 = t44030+t44028-2.0;
                double t44032 = gcab*gcab;
                double t44033 = 1/pow(rho_b[index],1.6E1/3.0);
                double t44034 = 1/pow(rho_a[index],8.0/3.0);
                double t44035 = gamma_aa[index]*t44034*(1.0/2.0);
                double t44036 = 1/pow(rho_b[index],8.0/3.0);
                double t44037 = gamma_bb[index]*t44036*(1.0/2.0);
                double t44038 = t44035+t44037;
                double t44039 = gcab*t44038;
                double t44040 = t44039+1.0;
                double t44041 = t44038*t44038;
                double t44042 = t44032*t44041;
                double t44043 = gcab*t44038*2.0;
                double t44044 = t44042+t44043+1.0;
                double t44046 = gcab*t44036;
                double t44047 = t44032*t44036*t44038;
                double t44045 = t44046+t44047;
                double t44048 = 1/(t44044*t44044);
                double t44049 = b1f*t43988;
                double t44050 = b3f*t43989;
                double t44051 = b4f*t43990*t43965;
                double t44052 = b2f*c*t43986;
                double t44053 = t44050+t44051+t44052+t44049;
                double t44054 = 1/t44053;
                double t44055 = t43985*t44054*(1.0/2.0);
                double t44056 = t44055+1.0;
                double t44057 = log(t44056);
                double t44058 = a1f*c*t43986;
                double t44059 = t44058+1.0;
                double t44060 = t44002-c0f*t44057*t44059*2.0;
                double t44061 = t44002-t43981*t43984*t44060;
                double t44062 = gcaa*gcaa;
                double t44063 = gamma_bb[index]*gcaa*t44036;
                double t44064 = t44063+1.0;
                double t44065 = gamma_bb[index]*gamma_bb[index];
                double t44066 = gamma_bb[index]*gcaa*t44036*2.0;
                double t44067 = t44033*t44062*t44065;
                double t44068 = t44066+t44067+1.0;
                double t44070 = gcaa*t44036*2.0;
                double t44071 = gamma_bb[index]*t44033*t44062*2.0;
                double t44069 = t44070+t44071;
                double t44072 = 1/(t44068*t44068);
                double t44073 = gx*gx;
                double t44074 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t44075 = gamma_bb[index]*gx*t44036;
                double t44076 = t44075+1.0;
                double t44077 = 1/pow(rho_b[index],3.2E1/3.0);
                double t44078 = gamma_bb[index]*gx*t44036*2.0;
                double t44079 = t44033*t44073*t44065;
                double t44080 = t44078+t44079+1.0;
                double t44082 = gx*t44036*2.0;
                double t44083 = gamma_bb[index]*t44033*t44073*2.0;
                double t44081 = t44082+t44083;
                double t44084 = 1/(t44080*t44080);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t44061+t44003*(t44020-t43984*t44031*t44025*t44026*(t44020- \
                   c0f*log((t43985*(1.0/2.0))/(b1f*t44006+b3f*t44007+b2f*c*t44004+b4f*t43965*t44008)+1.0)*(a1f*c*t44004+ \
                   1.0)*2.0)+(Aa*t43984*t44031*log((1.0/2.0)/(Aa*(b1a*t44006+b3a*t44007+b2a*c*t44004+b4a*t43965*t44008) \
                   )+1.0)*(t44025*t44026-1.0)*(a1a*c*t44004+1.0)*2.0)/d2fz0)+rho_a[index]*(t43981*t43984*(c0p*t43976* \
                   t43978*2.0-c0f*log((t43985*(1.0/2.0))/(b1f*t43963+b3f*t43964+b2f*c*t43961+b4f*t43965*t43966)+1.0)* \
                   (a1f*c*t43961+1.0)*2.0)-c0p*t43976*t43978*2.0))*(ccab1*1/(t44040*t44040)*t44032*t44033*(1.0/2.0)-(ccab2* \
                   t44032*t44033*(1.0/2.0))/t44044-ccab2*t44032*t44041*1/(t44044*t44044*t44044)*(t44045*t44045)*2.0+ccab2* \
                   (t44032*t44032)*t44041*t44033*t44048*(1.0/2.0)+ccab2*t44032*t44036*t44045*t44038*t44048*2.0-ccab1* \
                   gcab*1/(t44040*t44040*t44040)*t44032*t44033*t44038*(1.0/2.0))+rho_b[index]*t44061*(ccaa1*t44033*t44062* \
                   1/(t44064*t44064)*2.0-(ccaa2*t44033*t44062*2.0)/t44068+ccaa2*(t44062*t44062)*t44072*t44065*t44077* \
                   2.0-ccaa1*gamma_bb[index]*gcaa*t44062*1/(t44064*t44064*t44064)*t44074*2.0-ccaa2*t44033*t44062*t44065* \
                   1/(t44068*t44068*t44068)*(t44069*t44069)*2.0+ccaa2*gamma_bb[index]*t44033*t44062*t44072*t44069*4.0) \
                   -c0*pow(rho_b[index],4.0/3.0)*(cx1*t44033*t44073*1/(t44076*t44076)*2.0-(cx2*t44033*t44073*2.0)/t44080+ \
                   cx2*(t44073*t44073)*t44065*t44084*t44077*2.0-cx1*gamma_bb[index]*gx*t44073*t44074*1/(t44076*t44076* \
                   t44076)*2.0-cx2*t44033*1/(t44080*t44080*t44080)*(t44081*t44081)*t44073*t44065*2.0+cx2*gamma_bb[index]* \
                   t44033*t44081*t44073*t44084*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t44453 = 1/pow(rho_b[index],1.0/3.0);
                double t44454 = c*t44453;
                double t44455 = sqrt(t44454);
                double t44456 = pow(t44454,3.0/2.0);
                double t44457 = c*c;
                double t44458 = 1/pow(rho_b[index],2.0/3.0);
                double t44459 = 1/c0p;
                double t44460 = b1p*t44455;
                double t44461 = b3p*t44456;
                double t44462 = b4p*t44457*t44458;
                double t44463 = b2p*c*t44453;
                double t44464 = t44460+t44461+t44462+t44463;
                double t44465 = 1/t44464;
                double t44466 = t44465*t44459*(1.0/2.0);
                double t44467 = t44466+1.0;
                double t44468 = log(t44467);
                double t44469 = a1p*c*t44453;
                double t44470 = t44469+1.0;
                double t44471 = gcaa*gcaa;
                double t44472 = 1/pow(rho_b[index],1.6E1/3.0);
                double t44473 = 1/pow(rho_b[index],8.0/3.0);
                double t44474 = gamma_bb[index]*gcaa*t44473;
                double t44475 = t44474+1.0;
                double t44476 = gamma_bb[index]*gamma_bb[index];
                double t44477 = gamma_bb[index]*gcaa*t44473*2.0;
                double t44478 = t44471*t44472*t44476;
                double t44479 = t44477+t44478+1.0;
                double t44481 = gcaa*t44473*2.0;
                double t44482 = gamma_bb[index]*t44471*t44472*2.0;
                double t44480 = t44481+t44482;
                double t44483 = 1/(t44479*t44479);
                double t44484 = gx*gx;
                double t44485 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t44486 = gamma_bb[index]*gx*t44473;
                double t44487 = t44486+1.0;
                double t44488 = 1/pow(rho_b[index],3.2E1/3.0);
                double t44489 = gamma_bb[index]*gx*t44473*2.0;
                double t44490 = t44472*t44484*t44476;
                double t44491 = t44490+t44489+1.0;
                double t44493 = gx*t44473*2.0;
                double t44494 = gamma_bb[index]*t44472*t44484*2.0;
                double t44492 = t44493+t44494;
                double t44495 = 1/(t44491*t44491);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t44455+b3f*t44456+b2f*c*t44453+b4f*t44457*t44458))+1.0)*(a1f*c*t44453+1.0)*2.0-c0p*t44470*t44468*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t44470*t44468*2.0)*(ccaa1*t44471*t44472*1/(t44475*t44475)*2.0-(ccaa2*t44471* \
                   t44472*2.0)/t44479+ccaa2*(t44471*t44471)*t44483*t44476*t44488*2.0-ccaa1*gamma_bb[index]*gcaa*t44471* \
                   1/(t44475*t44475*t44475)*t44485*2.0-ccaa2*t44471*(t44480*t44480)*t44472*t44476*1/(t44479*t44479*t44479) \
                   *2.0+ccaa2*gamma_bb[index]*t44471*t44480*t44472*t44483*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*t44472* \
                   t44484*1/(t44487*t44487)*2.0-(cx2*t44472*t44484*2.0)/t44491+cx2*(t44484*t44484)*t44476*t44495*t44488* \
                   2.0-cx1*gamma_bb[index]*gx*t44484*t44485*1/(t44487*t44487*t44487)*2.0-cx2*t44472*1/(t44491*t44491* \
                   t44491)*(t44492*t44492)*t44484*t44476*2.0+cx2*gamma_bb[index]*t44472*t44492*t44484*t44495*4.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

