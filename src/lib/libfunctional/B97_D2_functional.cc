/**********************************************************
* B97_D2_functional.cc: definitions for B97_D2_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "B97_D2_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_D2_Functional::B97_D2_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "B97_D2";
    description_ = "B97-D2 Pure -D Functional";
    citation_ = "S. Grimme, J. Comput. Chem., 27, 1787-1799, 2006.";

    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 6.9040999999999997E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 6.3026999999999997E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.4971200000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 2.2339999999999999E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -1.5620799999999999E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.9429300000000000E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 1.0866199999999999E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -5.2127000000000001E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 3.2542900000000001E+00;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_D2_Functional::~B97_D2_Functional()
{
}
void B97_D2_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t45231 = 1.0/pow(rho_a[index],1.0/3.0);
            double t45232 = c*t45231;
            double t45233 = sqrt(t45232);
            double t45234 = pow(t45232,3.0/2.0);
            double t45235 = c*c;
            double t45236 = 1.0/pow(rho_a[index],2.0/3.0);
            double t45237 = 1.0/c0p;
            double t45238 = b1p*t45233;
            double t45239 = b3p*t45234;
            double t45240 = b4p*t45235*t45236;
            double t45241 = b2p*c*t45231;
            double t45242 = t45240+t45241+t45238+t45239;
            double t45243 = 1.0/t45242;
            double t45244 = t45243*t45237*(1.0/2.0);
            double t45245 = t45244+1.0;
            double t45246 = log(t45245);
            double t45247 = a1p*c*t45231;
            double t45248 = t45247+1.0;
            double t45249 = rho_a[index]*2.0;
            double t45250 = 1.0/pow(t45249,1.0/3.0);
            double t45251 = c*t45250;
            double t45252 = 1.0/pow(rho_a[index],8.0/3.0);
            double t45253 = gamma_aa[index]*gamma_aa[index];
            double t45254 = gcab*gcab;
            double t45255 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t45256 = gx*gx;
            double t45257 = pow(2.0,1.0/3.0);
            double t45258 = t45257*2.0;
            double t45259 = t45258-2.0;
            double t45260 = two_13*2.0;
            double t45261 = t45260-2.0;
            double t45262 = 1.0/t45261;
            double t45263 = 1.0/c0f;
            double t45264 = b1f*t45233;
            double t45265 = b3f*t45234;
            double t45266 = b4f*t45235*t45236;
            double t45267 = b2f*c*t45231;
            double t45268 = t45264+t45265+t45266+t45267;
            double t45269 = 1.0/t45268;
            double t45270 = t45263*t45269*(1.0/2.0);
            double t45271 = t45270+1.0;
            double t45272 = log(t45271);
            double t45273 = a1f*c*t45231;
            double t45274 = t45273+1.0;
            double t45275 = c0f*t45272*t45274*2.0;
            double t45276 = c0p*t45246*t45248*2.0;
            double t45277 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t45276+t45262*t45259*(t45275-c0p*t45246*t45248*2.0))*2.0-c0p* \
               rho_a[index]*log((t45237*(1.0/2.0))/(b1p*sqrt(t45251)+b3p*pow(t45251,3.0/2.0)+b4p*t45235*1.0/pow(t45249,2.0/ \
               3.0)+b2p*c*t45250)+1.0)*(a1p*c*t45250+1.0)*4.0)*(ccab0+(ccab2*t45253*t45254*t45255)/(gamma_aa[index]* \
               gcab*t45252*2.0+t45253*t45254*t45255+1.0)+(ccab1*gamma_aa[index]*gcab*t45252)/(gamma_aa[index]*gcab* \
               t45252+1.0))-rho_a[index]*(t45276+t45262*t45259*(t45275-t45276))*(ccaa0+(ccaa2*t45253*t45255*t45277) \
               /(gamma_aa[index]*gcaa*t45252*2.0+t45253*t45255*t45277+1.0)+(ccaa1*gamma_aa[index]*gcaa*t45252)/(gamma_aa[index]* \
               gcaa*t45252+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t45253*t45255*t45256)/(gamma_aa[index]* \
               gx*t45252*2.0+t45253*t45255*t45256+1.0)+(cx1*gamma_aa[index]*gx*t45252)/(gamma_aa[index]*gx*t45252+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t45279 = 1.0/pow(rho_a[index],1.0/3.0);
            double t45280 = c*t45279;
            double t45281 = sqrt(t45280);
            double t45282 = pow(t45280,3.0/2.0);
            double t45283 = c*c;
            double t45284 = 1.0/pow(rho_a[index],2.0/3.0);
            double t45285 = 1.0/c0p;
            double t45286 = b1p*t45281;
            double t45287 = b3p*t45282;
            double t45288 = b4p*t45283*t45284;
            double t45289 = b2p*c*t45279;
            double t45290 = t45286+t45287+t45288+t45289;
            double t45291 = 1.0/t45290;
            double t45292 = t45291*t45285*(1.0/2.0);
            double t45293 = t45292+1.0;
            double t45294 = log(t45293);
            double t45295 = a1p*c*t45279;
            double t45296 = t45295+1.0;
            double t45297 = 1.0/pow(rho_a[index],8.0/3.0);
            double t45298 = gamma_aa[index]*gamma_aa[index];
            double t45299 = gcaa*gcaa;
            double t45300 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t45301 = pow(2.0,1.0/3.0);
            double t45302 = t45301*2.0;
            double t45303 = t45302-2.0;
            double t45304 = two_13*2.0;
            double t45305 = t45304-2.0;
            double t45306 = 1.0/t45305;
            double t45307 = 1.0/c0f;
            double t45308 = b1f*t45281;
            double t45309 = b3f*t45282;
            double t45310 = b4f*t45283*t45284;
            double t45311 = b2f*c*t45279;
            double t45312 = t45310+t45311+t45308+t45309;
            double t45313 = 1.0/t45312;
            double t45314 = t45313*t45307*(1.0/2.0);
            double t45315 = t45314+1.0;
            double t45316 = log(t45315);
            double t45317 = a1f*c*t45279;
            double t45318 = t45317+1.0;
            double t45319 = c0f*t45316*t45318*2.0;
            double t45320 = c0p*t45294*t45296*2.0;
            double t45321 = rho_a[index]*2.0;
            double t45322 = 1.0/pow(t45321,1.0/3.0);
            double t45323 = c*t45322;
            double t45324 = gcab*gcab;
            double t45325 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t45326 = gamma_aa[index]*gcab*t45297;
            double t45327 = t45326+1.0;
            double t45328 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t45329 = gamma_aa[index]*gcab*t45297*2.0;
            double t45330 = t45300*t45324*t45298;
            double t45331 = t45330+t45329+1.0;
            double t45332 = 1.0/t45327;
            double t45333 = 1.0/t45331;
            double t45334 = sqrt(t45323);
            double t45335 = b1p*t45334;
            double t45336 = pow(t45323,3.0/2.0);
            double t45337 = b3p*t45336;
            double t45338 = b2p*c*t45322;
            double t45339 = 1.0/pow(t45321,2.0/3.0);
            double t45340 = b4p*t45283*t45339;
            double t45341 = t45340+t45335+t45337+t45338;
            double t45342 = 1.0/t45341;
            double t45343 = t45342*t45285*(1.0/2.0);
            double t45344 = t45343+1.0;
            double t45345 = a1p*c*t45322;
            double t45346 = t45345+1.0;
            double t45347 = 1.0/pow(t45321,4.0/3.0);
            double t45348 = log(t45344);
            double t45349 = 1.0/pow(rho_a[index],4.0/3.0);
            double t45350 = 1.0/pow(rho_a[index],5.0/3.0);
            double t45351 = 1.0/sqrt(t45280);
            double t45352 = 1.0/t45293;
            double t45353 = 1.0/(t45290*t45290);
            double t45354 = b4p*t45350*t45283*(2.0/3.0);
            double t45355 = b2p*c*t45349*(1.0/3.0);
            double t45356 = b1p*c*t45351*t45349*(1.0/6.0);
            double t45357 = b3p*c*t45281*t45349*(1.0/2.0);
            double t45358 = t45354+t45355+t45356+t45357;
            double t45359 = t45352*t45353*t45358*t45296;
            double t45360 = t45320-t45319;
            double t45361 = gx*gx;
            double t45362 = gamma_aa[index]*gx*t45297;
            double t45363 = t45362+1.0;
            double t45364 = 1.0/t45363;
            double t45365 = gamma_aa[index]*gx*t45297*2.0;
            double t45366 = t45300*t45361*t45298;
            double t45367 = t45365+t45366+1.0;
            double t45368 = 1.0/t45367;
            double t45369 = 1.0/t45315;
            double t45370 = 1.0/(t45312*t45312);
            double t45371 = b4f*t45350*t45283*(2.0/3.0);
            double t45372 = b2f*c*t45349*(1.0/3.0);
            double t45373 = b1f*c*t45351*t45349*(1.0/6.0);
            double t45374 = b3f*c*t45281*t45349*(1.0/2.0);
            double t45375 = t45371+t45372+t45373+t45374;
            double t45376 = a1f*c*c0f*t45316*t45349*(2.0/3.0);
            double t45377 = a1p*c*c0p*t45294*t45349*(2.0/3.0);
            double t45378 = gamma_aa[index]*gcaa*t45297;
            double t45379 = t45378+1.0;
            double t45380 = 1.0/t45379;
            double t45381 = ccaa1*gamma_aa[index]*gcaa*t45380*t45297;
            double t45382 = gamma_aa[index]*gcaa*t45297*2.0;
            double t45383 = t45300*t45298*t45299;
            double t45384 = t45382+t45383+1.0;
            double t45385 = 1.0/t45384;
            double t45386 = ccaa2*t45300*t45385*t45298*t45299;
            double t45387 = ccaa0+t45381+t45386;
            double t45388 = t45303*t45306*t45360;
            v_rho_a_[index] = -(rho_a[index]*(t45320-t45303*t45306*t45360)*2.0-c0p*rho_a[index]*t45346*t45348* \
               4.0)*(ccab1*gamma_aa[index]*gcab*t45332*t45328*(4.0/3.0)+ccab2*t45324*t45333*t45325*t45298*(8.0/3.0) \
               -ccab1*t45324*t45325*1.0/(t45327*t45327)*t45298*(4.0/3.0)-ccab2*t45300*1.0/(t45331*t45331)*t45324* \
               t45298*(gamma_aa[index]*gcab*t45328*(8.0/3.0)+t45324*t45325*t45298*(8.0/3.0)))-t45387*(t45320+t45303* \
               t45306*(t45319-c0p*t45294*t45296*2.0))-(ccab0+ccab1*gamma_aa[index]*gcab*t45332*t45297+ccab2*t45300* \
               t45324*t45333*t45298)*(-t45320+t45388+rho_a[index]*((1.0/(t45341*t45341)*t45346*(b4p*1.0/pow(t45321,5.0/ \
               3.0)*t45283*(2.0/3.0)+b2p*c*t45347*(1.0/3.0)+b3p*c*t45334*t45347*(1.0/2.0)+b1p*c*1.0/sqrt(t45323)* \
               t45347*(1.0/6.0)))/t45344-a1p*c*c0p*t45347*t45348*(2.0/3.0))*2.0+rho_a[index]*(-t45359+t45377+t45303* \
               t45306*(t45376+t45359-t45370*t45318*t45375*t45369-a1p*c*c0p*t45294*t45349*(2.0/3.0)))+c0p*t45346*t45348* \
               2.0)+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t45364*t45297+cx2*t45300*t45361*t45368* \
               t45298)*(4.0/3.0)+rho_a[index]*t45387*(-t45359+t45377+t45303*t45306*(t45376+t45359-t45377-t45370*t45318* \
               t45375*t45369))+rho_a[index]*(t45320-t45388)*(ccaa1*gamma_aa[index]*gcaa*t45380*t45328*(8.0/3.0)+ccaa2* \
               t45325*t45385*t45298*t45299*(1.6E1/3.0)-ccaa1*t45325*t45298*1.0/(t45379*t45379)*t45299*(8.0/3.0)-ccaa2* \
               t45300*1.0/(t45384*t45384)*t45298*t45299*(gamma_aa[index]*gcaa*t45328*(1.6E1/3.0)+t45325*t45298*t45299* \
               (1.6E1/3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t45328*t45364*(8.0/3.0)+cx2*t45325* \
               t45361*t45368*t45298*(1.6E1/3.0)-cx1*t45325*t45361*1.0/(t45363*t45363)*t45298*(8.0/3.0)-cx2*t45300* \
               t45361*1.0/(t45367*t45367)*t45298*(gamma_aa[index]*gx*t45328*(1.6E1/3.0)+t45325*t45361*t45298*(1.6E1/ \
               3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t45390 = 1.0/pow(rho_a[index],1.0/3.0);
                double t45391 = c*t45390;
                double t45392 = sqrt(t45391);
                double t45393 = pow(t45391,3.0/2.0);
                double t45394 = c*c;
                double t45395 = 1.0/pow(rho_a[index],2.0/3.0);
                double t45396 = 1.0/c0p;
                double t45397 = b1p*t45392;
                double t45398 = b3p*t45393;
                double t45399 = b4p*t45394*t45395;
                double t45400 = b2p*c*t45390;
                double t45401 = t45400+t45397+t45398+t45399;
                double t45402 = 1.0/t45401;
                double t45403 = t45402*t45396*(1.0/2.0);
                double t45404 = t45403+1.0;
                double t45405 = log(t45404);
                double t45406 = a1p*c*t45390;
                double t45407 = t45406+1.0;
                double t45408 = rho_a[index]*2.0;
                double t45409 = 1.0/pow(t45408,1.0/3.0);
                double t45410 = c*t45409;
                double t45411 = 1.0/pow(rho_a[index],8.0/3.0);
                double t45412 = gcab*gcab;
                double t45413 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t45414 = gamma_aa[index]*gcab*t45411;
                double t45415 = t45414+1.0;
                double t45416 = gamma_aa[index]*gamma_aa[index];
                double t45417 = gamma_aa[index]*gcab*t45411*2.0;
                double t45418 = t45412*t45413*t45416;
                double t45419 = t45417+t45418+1.0;
                double t45420 = gx*gx;
                double t45421 = gamma_aa[index]*gx*t45411;
                double t45422 = t45421+1.0;
                double t45423 = gamma_aa[index]*gx*t45411*2.0;
                double t45424 = t45420*t45413*t45416;
                double t45425 = t45423+t45424+1.0;
                double t45426 = pow(2.0,1.0/3.0);
                double t45427 = t45426*2.0;
                double t45428 = t45427-2.0;
                double t45429 = two_13*2.0;
                double t45430 = t45429-2.0;
                double t45431 = 1.0/t45430;
                double t45432 = 1.0/c0f;
                double t45433 = b1f*t45392;
                double t45434 = b3f*t45393;
                double t45435 = b4f*t45394*t45395;
                double t45436 = b2f*c*t45390;
                double t45437 = t45433+t45434+t45435+t45436;
                double t45438 = 1.0/t45437;
                double t45439 = t45432*t45438*(1.0/2.0);
                double t45440 = t45439+1.0;
                double t45441 = log(t45440);
                double t45442 = a1f*c*t45390;
                double t45443 = t45442+1.0;
                double t45444 = c0f*t45441*t45443*2.0;
                double t45445 = c0p*t45405*t45407*2.0;
                double t45446 = gcaa*gcaa;
                double t45447 = gamma_aa[index]*gcaa*t45411;
                double t45448 = t45447+1.0;
                double t45449 = gamma_aa[index]*gcaa*t45411*2.0;
                double t45450 = t45413*t45416*t45446;
                double t45451 = t45450+t45449+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t45445+t45431*t45428*(t45444-c0p*t45405*t45407*2.0))*2.0-c0p* \
                   rho_a[index]*log((t45396*(1.0/2.0))/(b1p*sqrt(t45410)+b3p*pow(t45410,3.0/2.0)+b4p*1.0/pow(t45408,2.0/ \
                   3.0)*t45394+b2p*c*t45409)+1.0)*(a1p*c*t45409+1.0)*4.0)*((ccab1*gcab*t45411*(1.0/2.0))/t45415-ccab1* \
                   gamma_aa[index]*t45412*t45413*1.0/(t45415*t45415)*(1.0/2.0)+(ccab2*gamma_aa[index]*t45412*t45413)/ \
                   t45419-ccab2*t45412*t45413*t45416*1.0/(t45419*t45419)*(gcab*t45411+gamma_aa[index]*t45412*t45413)) \
                   *2.0-rho_a[index]*(t45445+t45431*t45428*(t45444-t45445))*((ccaa1*gcaa*t45411)/t45448+(ccaa2*gamma_aa[index]* \
                   t45413*t45446*2.0)/t45451-ccaa1*gamma_aa[index]*t45413*t45446*1.0/(t45448*t45448)-ccaa2*t45413*1.0/ \
                   (t45451*t45451)*t45416*t45446*(gcaa*t45411*2.0+gamma_aa[index]*t45413*t45446*2.0))*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*((cx1*gx*t45411)/t45422-cx1*gamma_aa[index]*t45420*t45413*1.0/(t45422*t45422)+(cx2*gamma_aa[index]* \
                   t45420*t45413*2.0)/t45425-cx2*t45420*t45413*t45416*1.0/(t45425*t45425)*(gx*t45411*2.0+gamma_aa[index]* \
                   t45420*t45413*2.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t45454 = 1.0/pow(rho_a[index],1.0/3.0);
            double t45455 = c*t45454;
            double t45456 = sqrt(t45455);
            double t45457 = pow(t45455,3.0/2.0);
            double t45458 = c*c;
            double t45459 = 1.0/pow(rho_a[index],2.0/3.0);
            double t45460 = 1.0/c0p;
            double t45461 = b1p*t45456;
            double t45462 = b3p*t45457;
            double t45463 = b4p*t45458*t45459;
            double t45464 = b2p*c*t45454;
            double t45465 = t45461+t45462+t45463+t45464;
            double t45466 = 1.0/t45465;
            double t45467 = t45460*t45466*(1.0/2.0);
            double t45468 = t45467+1.0;
            double t45469 = log(t45468);
            double t45470 = a1p*c*t45454;
            double t45471 = t45470+1.0;
            double t45472 = rho_a[index]*2.0;
            double t45473 = 1.0/pow(t45472,1.0/3.0);
            double t45474 = c*t45473;
            double t45475 = 1.0/pow(rho_a[index],8.0/3.0);
            double t45476 = gamma_aa[index]*gamma_aa[index];
            double t45477 = gcab*gcab;
            double t45478 = gamma_aa[index]*gcab*t45475;
            double t45479 = t45478+1.0;
            double t45480 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t45481 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t45486 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t45487 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t45488 = gamma_aa[index]*gcab*t45487*(8.0/3.0);
            double t45489 = t45476*t45477*t45486*(8.0/3.0);
            double t45482 = t45488+t45489;
            double t45483 = gamma_aa[index]*gcab*t45475*2.0;
            double t45484 = t45481*t45476*t45477;
            double t45485 = t45483+t45484+1.0;
            double t45490 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t45491 = 1.0/(t45485*t45485);
            double t45492 = 1.0/t45479;
            double t45493 = 1.0/t45485;
            double t45494 = sqrt(t45474);
            double t45495 = b1p*t45494;
            double t45496 = pow(t45474,3.0/2.0);
            double t45497 = b3p*t45496;
            double t45498 = b2p*c*t45473;
            double t45499 = 1.0/pow(t45472,2.0/3.0);
            double t45500 = b4p*t45458*t45499;
            double t45501 = t45500+t45495+t45497+t45498;
            double t45502 = 1.0/t45501;
            double t45503 = t45502*t45460*(1.0/2.0);
            double t45504 = t45503+1.0;
            double t45505 = a1p*c*t45473;
            double t45506 = t45505+1.0;
            double t45507 = 1.0/pow(t45472,8.0/3.0);
            double t45508 = 1.0/pow(t45472,7.0/3.0);
            double t45509 = 1.0/sqrt(t45474);
            double t45510 = 1.0/t45504;
            double t45511 = 1.0/pow(t45472,4.0/3.0);
            double t45514 = b2p*c*t45511*(1.0/3.0);
            double t45515 = 1.0/pow(t45472,5.0/3.0);
            double t45516 = b4p*t45515*t45458*(2.0/3.0);
            double t45517 = b1p*c*t45511*t45509*(1.0/6.0);
            double t45518 = b3p*c*t45511*t45494*(1.0/2.0);
            double t45512 = t45514+t45516+t45517+t45518;
            double t45513 = log(t45504);
            double t45519 = t45512*t45512;
            double t45520 = two_13*2.0;
            double t45521 = t45520-2.0;
            double t45522 = 1.0/t45521;
            double t45523 = 1.0/(t45501*t45501);
            double t45524 = pow(2.0,1.0/3.0);
            double t45525 = t45524*2.0;
            double t45526 = t45525-2.0;
            double t45527 = a1f*c*t45454;
            double t45528 = t45527+1.0;
            double t45529 = 1.0/c0f;
            double t45530 = b1f*t45456;
            double t45531 = b3f*t45457;
            double t45532 = b4f*t45458*t45459;
            double t45533 = b2f*c*t45454;
            double t45534 = t45530+t45531+t45532+t45533;
            double t45535 = 1.0/t45534;
            double t45536 = t45535*t45529*(1.0/2.0);
            double t45537 = t45536+1.0;
            double t45538 = 1.0/pow(rho_a[index],4.0/3.0);
            double t45540 = 1.0/pow(rho_a[index],5.0/3.0);
            double t45541 = 1.0/sqrt(t45455);
            double t45547 = b4f*t45540*t45458*(2.0/3.0);
            double t45548 = b2f*c*t45538*(1.0/3.0);
            double t45549 = b1f*c*t45541*t45538*(1.0/6.0);
            double t45550 = b3f*c*t45456*t45538*(1.0/2.0);
            double t45539 = t45550+t45547+t45548+t45549;
            double t45552 = b4p*t45540*t45458*(2.0/3.0);
            double t45553 = b2p*c*t45538*(1.0/3.0);
            double t45554 = b1p*c*t45541*t45538*(1.0/6.0);
            double t45555 = b3p*c*t45456*t45538*(1.0/2.0);
            double t45542 = t45552+t45553+t45554+t45555;
            double t45543 = 1.0/t45537;
            double t45544 = 1.0/pow(rho_a[index],7.0/3.0);
            double t45545 = 1.0/t45468;
            double t45546 = 1.0/pow(t45455,3.0/2.0);
            double t45551 = t45539*t45539;
            double t45556 = t45542*t45542;
            double t45557 = log(t45537);
            double t45558 = 1.0/(t45534*t45534);
            double t45559 = 1.0/(t45465*t45465);
            double t45560 = 1.0/(t45465*t45465*t45465);
            double t45561 = t45560*t45471*t45545*t45556*2.0;
            double t45562 = b4p*t45475*t45458*(1.0E1/9.0);
            double t45563 = b2p*c*t45544*(4.0/9.0);
            double t45564 = b3p*t45541*t45475*t45458*(1.0/1.2E1);
            double t45565 = b1p*c*t45541*t45544*(2.0/9.0);
            double t45566 = b3p*c*t45544*t45456*(2.0/3.0);
            double t45654 = b1p*t45546*t45475*t45458*(1.0/3.6E1);
            double t45567 = t45562+t45563+t45564-t45654+t45565+t45566;
            double t45568 = 1.0/(t45468*t45468);
            double t45569 = 1.0/(t45465*t45465*t45465*t45465);
            double t45570 = a1p*c*c0p*t45544*t45469*(8.0/9.0);
            double t45571 = c0f*t45528*t45557*2.0;
            double t45572 = c0p*t45471*t45469*2.0;
            double t45573 = gcaa*gcaa;
            double t45574 = gamma_aa[index]*gcaa*t45475;
            double t45575 = t45574+1.0;
            double t45576 = gamma_aa[index]*gcaa*t45475*2.0;
            double t45577 = t45481*t45573*t45476;
            double t45578 = t45576+t45577+1.0;
            double t45579 = ccab1*gamma_aa[index]*gcab*t45492*t45475;
            double t45580 = ccab2*t45481*t45493*t45476*t45477;
            double t45581 = ccab0+t45580+t45579;
            double t45582 = b2p*c*t45508*(4.0/9.0);
            double t45583 = b4p*t45507*t45458*(1.0E1/9.0);
            double t45584 = 1.0/pow(t45474,3.0/2.0);
            double t45585 = b3p*t45507*t45509*t45458*(1.0/1.2E1);
            double t45586 = b1p*c*t45508*t45509*(2.0/9.0);
            double t45587 = b3p*c*t45508*t45494*(2.0/3.0);
            double t45588 = t45582+t45583+t45585+t45586+t45587-b1p*t45507*t45458*t45584*(1.0/3.6E1);
            double t45589 = t45510*t45523*t45506*t45588;
            double t45590 = 1.0/(t45501*t45501*t45501);
            double t45591 = 1.0/(t45504*t45504);
            double t45592 = 1.0/(t45501*t45501*t45501*t45501);
            double t45593 = t45460*t45506*t45519*t45591*t45592*(1.0/2.0);
            double t45594 = 1.0/d2fz0;
            double t45595 = 1.0/(rho_a[index]*rho_a[index]);
            double t45596 = 1.0/Aa;
            double t45597 = b1a*t45494;
            double t45598 = b3a*t45496;
            double t45599 = b2a*c*t45473;
            double t45600 = b4a*t45458*t45499;
            double t45601 = t45600+t45597+t45598+t45599;
            double t45602 = 1.0/t45601;
            double t45603 = t45602*t45596*(1.0/2.0);
            double t45604 = t45603+1.0;
            double t45605 = log(t45604);
            double t45606 = a1a*c*t45473;
            double t45607 = t45606+1.0;
            double t45608 = Aa*t45522*t45605*t45607*t45594*t45595*(4.0/9.0);
            double t45609 = a1p*c*t45510*t45511*t45512*t45523*(2.0/3.0);
            double t45610 = t45510*t45512*t45523*t45506*2.0;
            double t45611 = t45571-t45572;
            double t45612 = t45611*t45522*t45526;
            double t45613 = t45612+t45572;
            double t45614 = 1.0/pow(rho_a[index],1.0E1);
            double t45615 = 1.0/(t45479*t45479*t45479);
            double t45616 = ccab1*gamma_aa[index]*gcab*t45614*t45615*t45476*t45477*(3.2E1/9.0);
            double t45617 = 1.0/(t45479*t45479);
            double t45618 = t45482*t45482;
            double t45619 = 1.0/(t45485*t45485*t45485);
            double t45620 = ccab2*t45481*t45618*t45619*t45476*t45477*2.0;
            double t45621 = t45542*t45471*t45545*t45559;
            double t45622 = a1f*c*c0f*t45538*t45557*(2.0/3.0);
            double t45624 = a1p*c*c0p*t45538*t45469*(2.0/3.0);
            double t45627 = t45543*t45528*t45539*t45558;
            double t45623 = t45621+t45622-t45624-t45627;
            double t45625 = 1.0/t45575;
            double t45626 = 1.0/t45578;
            double t45628 = t45522*t45623*t45526;
            double t45629 = -t45621+t45624+t45628;
            double t45630 = gx*gx;
            double t45631 = gamma_aa[index]*gx*t45475;
            double t45632 = t45631+1.0;
            double t45637 = gamma_aa[index]*gx*t45487*(1.6E1/3.0);
            double t45638 = t45630*t45476*t45486*(1.6E1/3.0);
            double t45633 = t45637+t45638;
            double t45634 = gamma_aa[index]*gx*t45475*2.0;
            double t45635 = t45630*t45481*t45476;
            double t45636 = t45634+t45635+1.0;
            double t45639 = 1.0/(t45636*t45636);
            double t45640 = 1.0/t45632;
            double t45641 = 1.0/t45636;
            double t45642 = 1.0/(t45632*t45632);
            double t45643 = ccaa1*gamma_aa[index]*gcaa*t45625*t45475;
            double t45644 = ccaa2*t45481*t45626*t45573*t45476;
            double t45645 = ccaa0+t45643+t45644;
            double t45646 = 1.0/(t45534*t45534*t45534);
            double t45647 = b4f*t45475*t45458*(1.0E1/9.0);
            double t45648 = b2f*c*t45544*(4.0/9.0);
            double t45649 = b3f*t45541*t45475*t45458*(1.0/1.2E1);
            double t45650 = b1f*c*t45541*t45544*(2.0/9.0);
            double t45651 = b3f*c*t45544*t45456*(2.0/3.0);
            double t45652 = t45650+t45651+t45647+t45648+t45649-b1f*t45546*t45475*t45458*(1.0/3.6E1);
            double t45653 = t45543*t45652*t45528*t45558;
            double t45655 = t45471*t45545*t45567*t45559;
            double t45656 = 1.0/(t45537*t45537);
            double t45657 = 1.0/(t45534*t45534*t45534*t45534);
            double t45658 = t45551*t45528*t45529*t45656*t45657*(1.0/2.0);
            double t45659 = t45460*t45471*t45556*t45568*t45569*(1.0/2.0);
            double t45660 = a1f*c*t45543*t45538*t45539*t45558*(2.0/3.0);
            double t45661 = a1p*c*t45542*t45545*t45538*t45559*(2.0/3.0);
            double t45662 = 1.0/(t45575*t45575);
            double t45663 = gamma_aa[index]*gcaa*t45487*(1.6E1/3.0);
            double t45664 = t45573*t45476*t45486*(1.6E1/3.0);
            double t45665 = t45663+t45664;
            double t45666 = 1.0/(t45578*t45578);
            double t45667 = ccaa1*gamma_aa[index]*gcaa*t45625*t45487*(8.0/3.0);
            double t45668 = ccaa2*t45626*t45573*t45476*t45486*(1.6E1/3.0);
            double t45669 = t45667+t45668-ccaa1*t45662*t45573*t45476*t45486*(8.0/3.0)-ccaa2*t45481*t45573*t45476* \
               t45665*t45666;
            v_rho_a_rho_a_[index] = (ccab1*gamma_aa[index]*gcab*t45492*t45487*(4.0/3.0)-ccab1*t45617*t45476*t45477* \
               t45486*(4.0/3.0)+ccab2*t45493*t45476*t45477*t45486*(8.0/3.0)-ccab2*t45481*t45482*t45491*t45476*t45477) \
               *(-t45612-t45572+rho_a[index]*t45629+rho_a[index]*(t45510*t45512*t45523*t45506-a1p*c*c0p*t45511*t45513* \
               (2.0/3.0))*2.0+c0p*t45513*t45506*2.0)*4.0+t45613*t45669*2.0+t45645*t45629*2.0+(rho_a[index]*t45613* \
               2.0-c0p*rho_a[index]*t45513*t45506*4.0)*(t45620+t45616-ccab1*t45480*t45617*t45476*t45477*(3.2E1/9.0) \
               +ccab2*t45480*t45493*t45476*t45477*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*t45491*(t45476* \
               t45476)*(t45477*t45477)*(3.2E1/9.0)-ccab2*t45482*t45491*t45476*t45477*t45486*(1.6E1/3.0))+(rho_a[index]* \
               (t45572+t45522*t45526*(t45571-c0p*t45471*t45469*2.0))*2.0-c0p*rho_a[index]*t45513*t45506*4.0)*(t45620+ \
               t45616+ccab1*gamma_aa[index]*gcab*t45490*t45492*(4.4E1/9.0)-ccab1*t45480*t45617*t45476*t45477*(7.6E1/ \
               9.0)+ccab2*t45480*t45493*t45476*t45477*(4.0E1/3.0)-ccab2*t45482*t45491*t45476*t45477*t45486*(1.6E1/ \
               3.0)-ccab2*t45481*t45491*t45476*t45477*(gamma_aa[index]*gcab*t45490*(8.8E1/9.0)+t45480*t45476*t45477* \
               (4.0E1/3.0)))-t45581*(t45610+rho_a[index]*(-t45561-t45570+t45661+t45655+t45659+t45522*t45526*(t45561+ \
               t45570+t45660+t45653+t45658-t45551*t45543*t45528*t45646*2.0-t45471*t45545*t45567*t45559-a1f*c*c0f* \
               t45544*t45557*(8.0/9.0)-t45460*t45471*t45556*t45568*t45569*(1.0/2.0)-a1p*c*t45542*t45545*t45538*t45559* \
               (2.0/3.0)))-rho_a[index]*(t45608+t45609+t45593+t45589-t45510*t45506*t45590*t45519*2.0-a1p*c*c0p*t45513* \
               t45508*(8.0/9.0))*2.0+t45522*t45623*t45526*2.0-t45542*t45471*t45545*t45559*2.0-a1p*c*c0p*t45511*t45513* \
               (4.0/3.0)+a1p*c*c0p*t45538*t45469*(4.0/3.0))-t45581*(t45610+rho_a[index]*(t45608-t45609-t45593-t45589+ \
               t45510*t45506*t45590*t45519*2.0+a1p*c*c0p*t45513*t45508*(8.0/9.0))*2.0-a1p*c*c0p*t45511*t45513*(4.0/ \
               3.0))+c0*t45459*(cx0+cx1*gamma_aa[index]*gx*t45640*t45475+cx2*t45630*t45641*t45481*t45476)*(4.0/9.0) \
               -rho_a[index]*t45613*(ccaa1*gamma_aa[index]*gcaa*t45490*t45625*(8.8E1/9.0)-ccaa1*t45480*t45662*t45573* \
               t45476*2.4E1+ccaa2*t45480*t45626*t45573*t45476*(3.04E2/9.0)-ccaa2*t45573*t45476*t45665*t45486*t45666* \
               (3.2E1/3.0)-ccaa2*t45481*t45573*t45476*t45666*(gamma_aa[index]*gcaa*t45490*(1.76E2/9.0)+t45480*t45573* \
               t45476*(3.04E2/9.0))+ccaa2*t45481*t45573*t45476*(t45665*t45665)*1.0/(t45578*t45578*t45578)*2.0+ccaa1* \
               gamma_aa[index]*gcaa*t45614*t45573*t45476*1.0/(t45575*t45575*t45575)*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t45640*t45490*(8.8E1/9.0)-cx1*t45630*t45480*t45642*t45476*2.4E1+cx2*t45630* \
               t45641*t45480*t45476*(3.04E2/9.0)-cx2*t45630*t45633*t45476*t45486*t45639*(3.2E1/3.0)-cx2*t45630*t45481* \
               t45476*t45639*(gamma_aa[index]*gx*t45490*(1.76E2/9.0)+t45630*t45480*t45476*(3.04E2/9.0))+cx2*t45630* \
               (t45633*t45633)*t45481*1.0/(t45636*t45636*t45636)*t45476*2.0+cx1*gamma_aa[index]*gx*t45630*t45614* \
               1.0/(t45632*t45632*t45632)*t45476*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t45640*t45487*(8.0/3.0)-cx1*t45630*t45642*t45476*t45486*(8.0/3.0)+cx2*t45630*t45641*t45476*t45486* \
               (1.6E1/3.0)-cx2*t45630*t45633*t45481*t45476*t45639)*(8.0/3.0)+rho_a[index]*t45645*(-t45561-t45570+ \
               t45661+t45655+t45659+t45522*t45526*(t45561+t45570+t45660-t45661+t45653-t45655+t45658-t45659-t45551* \
               t45543*t45528*t45646*2.0-a1f*c*c0f*t45544*t45557*(8.0/9.0)))-rho_a[index]*t45629*t45669*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t45671 = 1.0/pow(rho_a[index],8.0/3.0);
                double t45672 = gcab*gcab;
                double t45673 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t45674 = gamma_aa[index]*gcab*t45671;
                double t45675 = t45674+1.0;
                double t45676 = gamma_aa[index]*gamma_aa[index];
                double t45677 = gamma_aa[index]*gcab*t45671*2.0;
                double t45678 = t45672*t45673*t45676;
                double t45679 = t45677+t45678+1.0;
                double t45680 = rho_a[index]*2.0;
                double t45681 = 1.0/pow(t45680,1.0/3.0);
                double t45682 = c*t45681;
                double t45683 = sqrt(t45682);
                double t45684 = b1p*t45683;
                double t45685 = pow(t45682,3.0/2.0);
                double t45686 = b3p*t45685;
                double t45687 = b2p*c*t45681;
                double t45688 = c*c;
                double t45689 = 1.0/pow(t45680,2.0/3.0);
                double t45690 = b4p*t45688*t45689;
                double t45691 = t45690+t45684+t45686+t45687;
                double t45692 = 1.0/pow(t45680,4.0/3.0);
                double t45693 = 1.0/c0p;
                double t45694 = 1.0/t45691;
                double t45695 = t45693*t45694*(1.0/2.0);
                double t45696 = t45695+1.0;
                double t45697 = 1.0/pow(rho_a[index],1.0/3.0);
                double t45698 = c*t45697;
                double t45699 = sqrt(t45698);
                double t45700 = b1f*t45699;
                double t45701 = pow(t45698,3.0/2.0);
                double t45702 = b3f*t45701;
                double t45703 = 1.0/pow(rho_a[index],2.0/3.0);
                double t45704 = b4f*t45703*t45688;
                double t45705 = b2f*c*t45697;
                double t45706 = t45700+t45702+t45704+t45705;
                double t45707 = 1.0/pow(rho_a[index],4.0/3.0);
                double t45708 = b1p*t45699;
                double t45709 = b3p*t45701;
                double t45710 = b4p*t45703*t45688;
                double t45711 = b2p*c*t45697;
                double t45712 = t45710+t45711+t45708+t45709;
                double t45713 = 1.0/pow(rho_a[index],5.0/3.0);
                double t45714 = 1.0/sqrt(t45698);
                double t45715 = 1.0/c0f;
                double t45716 = 1.0/t45706;
                double t45717 = t45715*t45716*(1.0/2.0);
                double t45718 = t45717+1.0;
                double t45719 = 1.0/t45712;
                double t45720 = t45719*t45693*(1.0/2.0);
                double t45721 = t45720+1.0;
                double t45722 = a1p*c*t45697;
                double t45723 = t45722+1.0;
                double t45724 = 1.0/t45721;
                double t45725 = 1.0/(t45712*t45712);
                double t45726 = b4p*t45713*t45688*(2.0/3.0);
                double t45727 = b2p*c*t45707*(1.0/3.0);
                double t45728 = b1p*c*t45714*t45707*(1.0/6.0);
                double t45729 = b3p*c*t45707*t45699*(1.0/2.0);
                double t45730 = t45726+t45727+t45728+t45729;
                double t45731 = t45730*t45723*t45724*t45725;
                double t45732 = log(t45721);
                double t45733 = log(t45696);
                double t45734 = a1p*c*t45681;
                double t45735 = t45734+1.0;
                double t45736 = pow(2.0,1.0/3.0);
                double t45737 = t45736*2.0;
                double t45738 = t45737-2.0;
                double t45739 = two_13*2.0;
                double t45740 = t45739-2.0;
                double t45741 = 1.0/t45740;
                double t45742 = log(t45718);
                double t45743 = a1f*c*t45697;
                double t45744 = t45743+1.0;
                double t45745 = c0f*t45742*t45744*2.0;
                double t45747 = c0p*t45723*t45732*2.0;
                double t45746 = t45745-t45747;
                double t45748 = gcaa*gcaa;
                double t45749 = gamma_aa[index]*gcaa*t45671;
                double t45750 = t45749+1.0;
                double t45751 = gamma_aa[index]*gcaa*t45671*2.0;
                double t45752 = t45673*t45676*t45748;
                double t45753 = t45751+t45752+1.0;
                double t45754 = t45741*t45746*t45738;
                double t45755 = t45754+t45747;
                double t45756 = 1.0/t45679;
                double t45757 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t45758 = 1.0/(t45675*t45675);
                double t45759 = 1.0/(t45679*t45679);
                double t45760 = gcab*t45671;
                double t45761 = gamma_aa[index]*t45672*t45673;
                double t45762 = t45760+t45761;
                double t45763 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t45764 = gamma_aa[index]*gcab*t45763*(8.0/3.0);
                double t45765 = t45672*t45676*t45757*(8.0/3.0);
                double t45766 = t45764+t45765;
                double t45767 = rho_a[index]*t45755*2.0;
                double t45768 = t45767-c0p*rho_a[index]*t45733*t45735*4.0;
                double t45769 = 1.0/t45675;
                double t45770 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t45771 = 1.0/(t45675*t45675*t45675);
                double t45772 = ccab2*gamma_aa[index]*t45672*t45673*t45766*t45759;
                double t45773 = ccab2*t45672*t45762*t45676*t45757*t45759*(8.0/3.0);
                double t45774 = 1.0/(t45679*t45679*t45679);
                double t45775 = 1.0/t45750;
                double t45776 = 1.0/t45753;
                double t45777 = 1.0/(t45750*t45750);
                double t45778 = 1.0/(t45753*t45753);
                double t45779 = gcaa*t45671*2.0;
                double t45780 = gamma_aa[index]*t45673*t45748*2.0;
                double t45781 = t45780+t45779;
                double t45782 = gamma_aa[index]*gcaa*t45763*(1.6E1/3.0);
                double t45783 = t45676*t45748*t45757*(1.6E1/3.0);
                double t45784 = t45782+t45783;
                double t45785 = gx*gx;
                double t45786 = gamma_aa[index]*gx*t45671;
                double t45787 = t45786+1.0;
                double t45788 = gamma_aa[index]*gx*t45671*2.0;
                double t45789 = t45673*t45676*t45785;
                double t45790 = t45788+t45789+1.0;
                double t45791 = 1.0/t45718;
                double t45792 = 1.0/(t45706*t45706);
                double t45793 = b4f*t45713*t45688*(2.0/3.0);
                double t45794 = b2f*c*t45707*(1.0/3.0);
                double t45795 = b1f*c*t45714*t45707*(1.0/6.0);
                double t45796 = b3f*c*t45707*t45699*(1.0/2.0);
                double t45797 = t45793+t45794+t45795+t45796;
                double t45798 = a1f*c*c0f*t45742*t45707*(2.0/3.0);
                double t45799 = a1p*c*c0p*t45732*t45707*(2.0/3.0);
                double t45800 = ccaa1*gcaa*t45671*t45775;
                double t45801 = ccaa2*gamma_aa[index]*t45673*t45748*t45776*2.0;
                double t45802 = t45800+t45801-ccaa1*gamma_aa[index]*t45673*t45748*t45777-ccaa2*t45673*t45781*t45676* \
                   t45748*t45778;
                double t45803 = 1.0/t45787;
                double t45804 = 1.0/t45790;
                double t45805 = 1.0/(t45787*t45787);
                double t45806 = 1.0/(t45790*t45790);
                double t45807 = gx*t45671*2.0;
                double t45808 = gamma_aa[index]*t45673*t45785*2.0;
                double t45809 = t45807+t45808;
                double t45810 = gamma_aa[index]*gx*t45763*(1.6E1/3.0);
                double t45811 = t45676*t45757*t45785*(1.6E1/3.0);
                double t45812 = t45810+t45811;
                v_rho_a_gamma_aa_[index] = -t45802*t45755+t45768*(t45772+t45773-ccab2*gamma_aa[index]*t45672*t45756* \
                   t45757*(4.0/3.0)+ccab1*gamma_aa[index]*t45672*t45757*t45758*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*(t45672*t45672)*t45676*t45759*(4.0/3.0)-ccab1*gcab*t45770*t45672*t45771*t45676*(4.0/3.0)-ccab2* \
                   t45672*t45762*t45673*t45774*t45676*t45766*2.0)+t45768*(t45772+t45773-ccab1*gcab*t45763*t45769*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t45672*t45756*t45757*4.0+ccab1*gamma_aa[index]*t45672*t45757*t45758*(8.0/ \
                   3.0)+ccab2*t45672*t45673*t45676*t45759*(gcab*t45763*(8.0/3.0)+gamma_aa[index]*t45672*t45757*4.0)-ccab1* \
                   gcab*t45770*t45672*t45771*t45676*(4.0/3.0)-ccab2*t45672*t45762*t45673*t45774*t45676*t45766*2.0)-(ccab1* \
                   gcab*t45671*t45769*(1.0/2.0)+ccab2*gamma_aa[index]*t45672*t45673*t45756-ccab1*gamma_aa[index]*t45672* \
                   t45673*t45758*(1.0/2.0)-ccab2*t45672*t45762*t45673*t45676*t45759)*(rho_a[index]*((t45735*1.0/(t45691* \
                   t45691)*(b4p*1.0/pow(t45680,5.0/3.0)*t45688*(2.0/3.0)+b2p*c*t45692*(1.0/3.0)+b3p*c*t45683*t45692*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t45682)*t45692*(1.0/6.0)))/t45696-a1p*c*c0p*t45733*t45692*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t45731+t45799+t45741*t45738*(t45731+t45798-t45744*t45791*t45792*t45797-a1p*c*c0p*t45732*t45707*(2.0/ \
                   3.0)))-c0p*t45723*t45732*2.0+c0p*t45733*t45735*2.0-t45741*t45746*t45738)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t45803*t45671-cx1*gamma_aa[index]*t45805*t45673*t45785+cx2*gamma_aa[index]*t45804*t45673* \
                   t45785*2.0-cx2*t45806*t45673*t45809*t45676*t45785)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t45803*t45763*(8.0/3.0)-cx1*gamma_aa[index]*t45805*t45757*t45785*8.0+cx2*gamma_aa[index]*t45804*t45757* \
                   t45785*(3.2E1/3.0)-cx2*t45806*t45809*t45676*t45757*t45785*(1.6E1/3.0)+cx1*gx*t45770*t45676*t45785* \
                   1.0/(t45787*t45787*t45787)*(1.6E1/3.0)-cx2*t45806*t45673*t45676*t45785*(gx*t45763*(1.6E1/3.0)+gamma_aa[index]* \
                   t45757*t45785*(3.2E1/3.0))-cx2*gamma_aa[index]*t45812*t45806*t45673*t45785*2.0+cx2*t45812*t45673*1.0/ \
                   (t45790*t45790*t45790)*t45809*t45676*t45785*2.0)+rho_a[index]*t45802*(-t45731+t45799+t45741*t45738* \
                   (t45731+t45798-t45799-t45744*t45791*t45792*t45797))+rho_a[index]*t45755*(ccaa1*gcaa*t45763*t45775* \
                   (8.0/3.0)-ccaa1*gamma_aa[index]*t45748*t45757*t45777*8.0+ccaa2*gamma_aa[index]*t45748*t45757*t45776* \
                   (3.2E1/3.0)-ccaa2*t45781*t45676*t45748*t45757*t45778*(1.6E1/3.0)+ccaa1*gcaa*1.0/(t45750*t45750*t45750) \
                   *t45770*t45676*t45748*(1.6E1/3.0)-ccaa2*t45673*t45676*t45748*t45778*(gcaa*t45763*(1.6E1/3.0)+gamma_aa[index]* \
                   t45748*t45757*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t45673*t45748*t45784*t45778*2.0+ccaa2*1.0/(t45753* \
                   t45753*t45753)*t45673*t45781*t45676*t45748*t45784*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t45814 = 1.0/pow(rho_a[index],1.0/3.0);
                double t45815 = c*t45814;
                double t45816 = sqrt(t45815);
                double t45817 = pow(t45815,3.0/2.0);
                double t45818 = c*c;
                double t45819 = 1.0/pow(rho_a[index],2.0/3.0);
                double t45820 = 1.0/c0p;
                double t45821 = b1p*t45816;
                double t45822 = b3p*t45817;
                double t45823 = b4p*t45818*t45819;
                double t45824 = b2p*c*t45814;
                double t45825 = t45821+t45822+t45823+t45824;
                double t45826 = 1.0/t45825;
                double t45827 = t45820*t45826*(1.0/2.0);
                double t45828 = t45827+1.0;
                double t45829 = log(t45828);
                double t45830 = a1p*c*t45814;
                double t45831 = t45830+1.0;
                double t45832 = rho_a[index]*2.0;
                double t45833 = 1.0/pow(t45832,1.0/3.0);
                double t45834 = c*t45833;
                double t45835 = gcab*gcab;
                double t45836 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t45837 = 1.0/pow(rho_a[index],8.0/3.0);
                double t45838 = gamma_aa[index]*gcab*t45837;
                double t45839 = t45838+1.0;
                double t45840 = gamma_aa[index]*gamma_aa[index];
                double t45841 = gamma_aa[index]*gcab*t45837*2.0;
                double t45842 = t45840*t45835*t45836;
                double t45843 = t45841+t45842+1.0;
                double t45845 = gcab*t45837;
                double t45846 = gamma_aa[index]*t45835*t45836;
                double t45844 = t45845+t45846;
                double t45847 = 1.0/(t45843*t45843);
                double t45848 = pow(2.0,1.0/3.0);
                double t45849 = t45848*2.0;
                double t45850 = t45849-2.0;
                double t45851 = two_13*2.0;
                double t45852 = t45851-2.0;
                double t45853 = 1.0/t45852;
                double t45854 = 1.0/c0f;
                double t45855 = b1f*t45816;
                double t45856 = b3f*t45817;
                double t45857 = b4f*t45818*t45819;
                double t45858 = b2f*c*t45814;
                double t45859 = t45855+t45856+t45857+t45858;
                double t45860 = 1.0/t45859;
                double t45861 = t45860*t45854*(1.0/2.0);
                double t45862 = t45861+1.0;
                double t45863 = log(t45862);
                double t45864 = a1f*c*t45814;
                double t45865 = t45864+1.0;
                double t45866 = c0f*t45863*t45865*2.0;
                double t45867 = c0p*t45831*t45829*2.0;
                double t45868 = gcaa*gcaa;
                double t45869 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t45870 = gamma_aa[index]*gcaa*t45837;
                double t45871 = t45870+1.0;
                double t45872 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t45873 = gamma_aa[index]*gcaa*t45837*2.0;
                double t45874 = t45840*t45836*t45868;
                double t45875 = t45873+t45874+1.0;
                double t45877 = gcaa*t45837*2.0;
                double t45878 = gamma_aa[index]*t45836*t45868*2.0;
                double t45876 = t45877+t45878;
                double t45879 = 1.0/(t45875*t45875);
                double t45880 = gx*gx;
                double t45881 = gamma_aa[index]*gx*t45837;
                double t45882 = t45881+1.0;
                double t45883 = gamma_aa[index]*gx*t45837*2.0;
                double t45884 = t45840*t45880*t45836;
                double t45885 = t45883+t45884+1.0;
                double t45887 = gx*t45837*2.0;
                double t45888 = gamma_aa[index]*t45880*t45836*2.0;
                double t45886 = t45887+t45888;
                double t45889 = 1.0/(t45885*t45885);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t45867+t45850*t45853*(t45866-c0p*t45831*t45829*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t45820*(1.0/2.0))/(b1p*sqrt(t45834)+b3p*pow(t45834,3.0/2.0)+b4p*1.0/pow(t45832,2.0/ \
                   3.0)*t45818+b2p*c*t45833)+1.0)*(a1p*c*t45833+1.0)*4.0)*((ccab2*t45835*t45836*(1.0/2.0))/t45843-ccab1* \
                   t45835*t45836*1.0/(t45839*t45839)*(1.0/2.0)-ccab2*t45840*(t45835*t45835)*t45872*t45847*(1.0/2.0)+ccab1* \
                   gamma_aa[index]*gcab*t45835*1.0/(t45839*t45839*t45839)*t45869*(1.0/2.0)+ccab2*t45840*1.0/(t45843*t45843* \
                   t45843)*t45835*(t45844*t45844)*t45836*2.0-ccab2*gamma_aa[index]*t45835*t45844*t45836*t45847*2.0)*4.0+ \
                   rho_a[index]*(t45867+t45850*t45853*(t45866-t45867))*(ccaa1*1.0/(t45871*t45871)*t45836*t45868*2.0-(ccaa2* \
                   t45836*t45868*2.0)/t45875+ccaa2*t45840*t45872*(t45868*t45868)*t45879*2.0-ccaa1*gamma_aa[index]*gcaa* \
                   1.0/(t45871*t45871*t45871)*t45868*t45869*2.0-ccaa2*t45840*t45836*1.0/(t45875*t45875*t45875)*(t45876* \
                   t45876)*t45868*2.0+ccaa2*gamma_aa[index]*t45836*t45876*t45868*t45879*4.0)*2.0-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*t45880*t45836*1.0/(t45882*t45882)*2.0-(cx2*t45880*t45836*2.0)/t45885+cx2*t45840*(t45880* \
                   t45880)*t45872*t45889*2.0-cx1*gamma_aa[index]*gx*t45880*1.0/(t45882*t45882*t45882)*t45869*2.0-cx2* \
                   t45840*t45880*t45836*1.0/(t45885*t45885*t45885)*(t45886*t45886)*2.0+cx2*gamma_aa[index]*t45880*t45836* \
                   t45886*t45889*4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void B97_D2_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t41663 = 1.0/pow(rho_a[index],8.0/3.0);
            double t41664 = gamma_aa[index]*t41663*(1.0/2.0);
            double t41665 = 1.0/pow(rho_b[index],8.0/3.0);
            double t41666 = gamma_bb[index]*t41665*(1.0/2.0);
            double t41661 = t41664+t41666;
            double t41662 = gcab*gcab;
            double t41667 = t41661*t41661;
            double t41668 = 1.0/pow(rho_a[index],1.0/3.0);
            double t41669 = c*t41668;
            double t41670 = sqrt(t41669);
            double t41671 = pow(t41669,3.0/2.0);
            double t41672 = c*c;
            double t41673 = 1.0/pow(rho_a[index],2.0/3.0);
            double t41674 = 1.0/c0p;
            double t41675 = b1p*t41670;
            double t41676 = b3p*t41671;
            double t41677 = b4p*t41672*t41673;
            double t41678 = b2p*c*t41668;
            double t41679 = t41675+t41676+t41677+t41678;
            double t41680 = 1.0/t41679;
            double t41681 = t41680*t41674*(1.0/2.0);
            double t41682 = t41681+1.0;
            double t41683 = log(t41682);
            double t41684 = a1p*c*t41668;
            double t41685 = t41684+1.0;
            double t41686 = pow(2.0,1.0/3.0);
            double t41687 = t41686*2.0;
            double t41688 = t41687-2.0;
            double t41689 = two_13*2.0;
            double t41690 = t41689-2.0;
            double t41691 = 1.0/t41690;
            double t41692 = 1.0/c0f;
            double t41693 = 1.0/pow(rho_b[index],1.0/3.0);
            double t41694 = c*t41693;
            double t41695 = sqrt(t41694);
            double t41696 = pow(t41694,3.0/2.0);
            double t41697 = 1.0/pow(rho_b[index],2.0/3.0);
            double t41698 = b1p*t41695;
            double t41699 = b3p*t41696;
            double t41700 = b4p*t41672*t41697;
            double t41701 = b2p*c*t41693;
            double t41702 = t41700+t41701+t41698+t41699;
            double t41703 = 1.0/t41702;
            double t41704 = t41703*t41674*(1.0/2.0);
            double t41705 = t41704+1.0;
            double t41706 = log(t41705);
            double t41707 = a1p*c*t41693;
            double t41708 = t41707+1.0;
            double t41709 = c0p*t41706*t41708*2.0;
            double t41710 = rho_a[index]+rho_b[index];
            double t41711 = 1.0/pow(t41710,1.0/3.0);
            double t41712 = c*t41711;
            double t41713 = sqrt(t41712);
            double t41714 = pow(t41712,3.0/2.0);
            double t41715 = 1.0/pow(t41710,2.0/3.0);
            double t41716 = b1p*t41713;
            double t41717 = b3p*t41714;
            double t41718 = b4p*t41715*t41672;
            double t41719 = b2p*c*t41711;
            double t41720 = t41716+t41717+t41718+t41719;
            double t41721 = 1.0/t41720;
            double t41722 = t41721*t41674*(1.0/2.0);
            double t41723 = t41722+1.0;
            double t41724 = log(t41723);
            double t41725 = a1p*c*t41711;
            double t41726 = t41725+1.0;
            double t41727 = c0p*t41724*t41726*2.0;
            double t41728 = rho_a[index]-rho_b[index];
            double t41729 = t41728*t41728;
            double t41730 = 1.0/t41710;
            double t41731 = t41730*t41728;
            double t41732 = 1.0/(t41710*t41710*t41710*t41710);
            double t41733 = t41729*t41729;
            double t41734 = t41731+1.0;
            double t41735 = pow(t41734,4.0/3.0);
            double t41736 = -t41731+1.0;
            double t41737 = pow(t41736,4.0/3.0);
            double t41738 = t41735+t41737-2.0;
            double t41739 = c0p*t41683*t41685*2.0;
            double t41740 = gamma_aa[index]*gamma_aa[index];
            double t41741 = gx*gx;
            double t41742 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t41743 = gamma_bb[index]*gamma_bb[index];
            double t41744 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t41745 = b1f*t41670;
            double t41746 = b3f*t41671;
            double t41747 = b4f*t41672*t41673;
            double t41748 = b2f*c*t41668;
            double t41749 = t41745+t41746+t41747+t41748;
            double t41750 = 1.0/t41749;
            double t41751 = t41750*t41692*(1.0/2.0);
            double t41752 = t41751+1.0;
            double t41753 = log(t41752);
            double t41754 = a1f*c*t41668;
            double t41755 = t41754+1.0;
            double t41756 = t41739-c0f*t41753*t41755*2.0;
            double t41757 = t41739-t41691*t41756*t41688;
            double t41758 = gcaa*gcaa;
            double t41759 = b1f*t41695;
            double t41760 = b3f*t41696;
            double t41761 = b4f*t41672*t41697;
            double t41762 = b2f*c*t41693;
            double t41763 = t41760+t41761+t41762+t41759;
            double t41764 = 1.0/t41763;
            double t41765 = t41692*t41764*(1.0/2.0);
            double t41766 = t41765+1.0;
            double t41767 = log(t41766);
            double t41768 = a1f*c*t41693;
            double t41769 = t41768+1.0;
            double t41770 = t41709-c0f*t41767*t41769*2.0;
            double t41771 = t41709-t41770*t41691*t41688;
            functional_[index] = (ccab0+(ccab1*gcab*t41661)/(gcab*t41661+1.0)+(ccab2*t41662*t41667)/(gcab*t41661* \
               2.0+t41662*t41667+1.0))*(rho_b[index]*t41771+rho_a[index]*t41757-t41710*(t41727-t41732*t41733*t41691* \
               t41738*(t41727-c0f*log((t41692*(1.0/2.0))/(b1f*t41713+b3f*t41714+b2f*c*t41711+b4f*t41715*t41672)+1.0) \
               *(a1f*c*t41711+1.0)*2.0)+(Aa*t41691*t41738*log((1.0/2.0)/(Aa*(b1a*t41713+b3a*t41714+b2a*c*t41711+b4a* \
               t41715*t41672))+1.0)*(t41732*t41733-1.0)*(a1a*c*t41711+1.0)*2.0)/d2fz0))-rho_a[index]*t41757*(ccaa0+ \
               (ccaa2*t41740*t41742*t41758)/(gamma_aa[index]*gcaa*t41663*2.0+t41740*t41742*t41758+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t41663)/(gamma_aa[index]*gcaa*t41663+1.0))-rho_b[index]*t41771*(ccaa0+(ccaa2*t41743*t41744*t41758) \
               /(gamma_bb[index]*gcaa*t41665*2.0+t41743*t41744*t41758+1.0)+(ccaa1*gamma_bb[index]*gcaa*t41665)/(gamma_bb[index]* \
               gcaa*t41665+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t41740*t41741*t41742)/(gamma_aa[index]*gx* \
               t41663*2.0+t41740*t41741*t41742+1.0)+(cx1*gamma_aa[index]*gx*t41663)/(gamma_aa[index]*gx*t41663+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t41741*t41743*t41744)/(gamma_bb[index]*gx*t41665*2.0+t41741* \
               t41743*t41744+1.0)+(cx1*gamma_bb[index]*gx*t41665)/(gamma_bb[index]*gx*t41665+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t44784 = 1.0/pow(rho_a[index],8.0/3.0);
            double t44785 = gamma_aa[index]*gamma_aa[index];
            double t44786 = gx*gx;
            double t44787 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t44788 = 1.0/pow(rho_a[index],1.0/3.0);
            double t44789 = c*t44788;
            double t44790 = sqrt(t44789);
            double t44791 = pow(t44789,3.0/2.0);
            double t44792 = c*c;
            double t44793 = 1.0/pow(rho_a[index],2.0/3.0);
            double t44794 = 1.0/c0p;
            double t44795 = b1p*t44790;
            double t44796 = b3p*t44791;
            double t44797 = b4p*t44792*t44793;
            double t44798 = b2p*c*t44788;
            double t44799 = t44795+t44796+t44797+t44798;
            double t44800 = 1.0/t44799;
            double t44801 = t44800*t44794*(1.0/2.0);
            double t44802 = t44801+1.0;
            double t44803 = log(t44802);
            double t44804 = a1p*c*t44788;
            double t44805 = t44804+1.0;
            double t44806 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44790+ \
               b3f*t44791+b2f*c*t44788+b4f*t44792*t44793))+1.0)*(a1f*c*t44788+1.0)*2.0-c0p*t44803*t44805*2.0))/(two_13* \
               2.0-2.0)+c0p*t44803*t44805*2.0)*(ccaa0+(ccaa2*t44806*t44785*t44787)/(gamma_aa[index]*gcaa*t44784*2.0+ \
               t44806*t44785*t44787+1.0)+(ccaa1*gamma_aa[index]*gcaa*t44784)/(gamma_aa[index]*gcaa*t44784+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t44785*t44786*t44787)/(gamma_aa[index]*gx*t44784*2.0+t44785*t44786* \
               t44787+1.0)+(cx1*gamma_aa[index]*gx*t44784)/(gamma_aa[index]*gx*t44784+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t44373 = 1.0/pow(rho_b[index],8.0/3.0);
            double t44374 = gamma_bb[index]*gamma_bb[index];
            double t44375 = gx*gx;
            double t44376 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t44377 = 1.0/pow(rho_b[index],1.0/3.0);
            double t44378 = c*t44377;
            double t44379 = sqrt(t44378);
            double t44380 = pow(t44378,3.0/2.0);
            double t44381 = c*c;
            double t44382 = 1.0/pow(rho_b[index],2.0/3.0);
            double t44383 = 1.0/c0p;
            double t44384 = b1p*t44379;
            double t44385 = b3p*t44380;
            double t44386 = b4p*t44381*t44382;
            double t44387 = b2p*c*t44377;
            double t44388 = t44384+t44385+t44386+t44387;
            double t44389 = 1.0/t44388;
            double t44390 = t44383*t44389*(1.0/2.0);
            double t44391 = t44390+1.0;
            double t44392 = log(t44391);
            double t44393 = a1p*c*t44377;
            double t44394 = t44393+1.0;
            double t44395 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44379+ \
               b3f*t44380+b2f*c*t44377+b4f*t44381*t44382))+1.0)*(a1f*c*t44377+1.0)*2.0-c0p*t44392*t44394*2.0))/(two_13* \
               2.0-2.0)+c0p*t44392*t44394*2.0)*(ccaa0+(ccaa2*t44374*t44376*t44395)/(gamma_bb[index]*gcaa*t44373*2.0+ \
               t44374*t44376*t44395+1.0)+(ccaa1*gamma_bb[index]*gcaa*t44373)/(gamma_bb[index]*gcaa*t44373+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t44374*t44375*t44376)/(gamma_bb[index]*gx*t44373*2.0+t44374*t44375* \
               t44376+1.0)+(cx1*gamma_bb[index]*gx*t44373)/(gamma_bb[index]*gx*t44373+1.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t41773 = 1.0/pow(rho_a[index],1.0/3.0);
            double t41774 = c*t41773;
            double t41775 = sqrt(t41774);
            double t41776 = pow(t41774,3.0/2.0);
            double t41777 = c*c;
            double t41778 = 1.0/pow(rho_a[index],2.0/3.0);
            double t41779 = 1.0/c0p;
            double t41780 = b1p*t41775;
            double t41781 = b3p*t41776;
            double t41782 = b4p*t41777*t41778;
            double t41783 = b2p*c*t41773;
            double t41784 = t41780+t41781+t41782+t41783;
            double t41785 = 1.0/t41784;
            double t41786 = t41785*t41779*(1.0/2.0);
            double t41787 = t41786+1.0;
            double t41788 = log(t41787);
            double t41789 = a1p*c*t41773;
            double t41790 = t41789+1.0;
            double t41791 = 1.0/pow(rho_a[index],8.0/3.0);
            double t41792 = gamma_aa[index]*gamma_aa[index];
            double t41793 = gcaa*gcaa;
            double t41794 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t41797 = gamma_aa[index]*t41791*(1.0/2.0);
            double t41798 = 1.0/pow(rho_b[index],8.0/3.0);
            double t41799 = gamma_bb[index]*t41798*(1.0/2.0);
            double t41795 = t41797+t41799;
            double t41796 = gcab*gcab;
            double t41800 = t41795*t41795;
            double t41801 = rho_a[index]+rho_b[index];
            double t41802 = 1.0/pow(t41801,1.0/3.0);
            double t41803 = c*t41802;
            double t41804 = sqrt(t41803);
            double t41805 = b1p*t41804;
            double t41806 = pow(t41803,3.0/2.0);
            double t41807 = b3p*t41806;
            double t41808 = 1.0/pow(t41801,2.0/3.0);
            double t41809 = b4p*t41808*t41777;
            double t41810 = b2p*c*t41802;
            double t41811 = t41810+t41805+t41807+t41809;
            double t41812 = 1.0/pow(t41801,4.0/3.0);
            double t41813 = two_13*2.0;
            double t41814 = t41813-2.0;
            double t41815 = 1.0/t41814;
            double t41816 = 1.0/c0f;
            double t41817 = 1.0/t41811;
            double t41818 = t41817*t41779*(1.0/2.0);
            double t41819 = t41818+1.0;
            double t41820 = a1p*c*t41802;
            double t41821 = t41820+1.0;
            double t41822 = rho_a[index]-rho_b[index];
            double t41823 = t41822*t41822;
            double t41824 = 1.0/t41801;
            double t41825 = t41822*t41824;
            double t41826 = b1f*t41804;
            double t41827 = b3f*t41806;
            double t41828 = b4f*t41808*t41777;
            double t41829 = b2f*c*t41802;
            double t41830 = t41826+t41827+t41828+t41829;
            double t41831 = 1.0/t41830;
            double t41832 = t41831*t41816*(1.0/2.0);
            double t41833 = t41832+1.0;
            double t41834 = log(t41833);
            double t41835 = a1f*c*t41802;
            double t41836 = t41835+1.0;
            double t41837 = log(t41819);
            double t41847 = c0f*t41834*t41836*2.0;
            double t41848 = c0p*t41821*t41837*2.0;
            double t41838 = t41847-t41848;
            double t41839 = t41825+1.0;
            double t41840 = pow(t41839,4.0/3.0);
            double t41841 = -t41825+1.0;
            double t41842 = pow(t41841,4.0/3.0);
            double t41843 = t41840+t41842-2.0;
            double t41844 = 1.0/(t41801*t41801);
            double t41875 = t41822*t41844;
            double t41845 = t41824-t41875;
            double t41846 = 1.0/(t41801*t41801*t41801*t41801);
            double t41849 = t41823*t41823;
            double t41850 = 1.0/pow(t41801,5.0/3.0);
            double t41851 = 1.0/sqrt(t41803);
            double t41852 = 1.0/t41819;
            double t41853 = 1.0/(t41811*t41811);
            double t41854 = b4p*t41850*t41777*(2.0/3.0);
            double t41855 = b2p*c*t41812*(1.0/3.0);
            double t41856 = b1p*c*t41812*t41851*(1.0/6.0);
            double t41857 = b3p*c*t41812*t41804*(1.0/2.0);
            double t41858 = t41854+t41855+t41856+t41857;
            double t41859 = t41821*t41852*t41853*t41858;
            double t41860 = 1.0/(t41801*t41801*t41801*t41801*t41801);
            double t41861 = 1.0/d2fz0;
            double t41862 = 1.0/Aa;
            double t41863 = b1a*t41804;
            double t41864 = b3a*t41806;
            double t41865 = b4a*t41808*t41777;
            double t41866 = b2a*c*t41802;
            double t41867 = t41863+t41864+t41865+t41866;
            double t41868 = 1.0/t41867;
            double t41869 = t41862*t41868*(1.0/2.0);
            double t41870 = t41869+1.0;
            double t41871 = log(t41870);
            double t41872 = a1a*c*t41802;
            double t41873 = t41872+1.0;
            double t41874 = pow(t41839,1.0/3.0);
            double t41876 = t41845*t41874*(4.0/3.0);
            double t41877 = pow(t41841,1.0/3.0);
            double t41878 = t41876-t41845*t41877*(4.0/3.0);
            double t41879 = t41846*t41849;
            double t41880 = t41879-1.0;
            double t41881 = pow(2.0,1.0/3.0);
            double t41882 = t41881*2.0;
            double t41883 = t41882-2.0;
            double t41884 = a1f*c*t41773;
            double t41885 = t41884+1.0;
            double t41886 = b1f*t41775;
            double t41887 = b3f*t41776;
            double t41888 = b4f*t41777*t41778;
            double t41889 = b2f*c*t41773;
            double t41890 = t41886+t41887+t41888+t41889;
            double t41891 = 1.0/t41890;
            double t41892 = t41816*t41891*(1.0/2.0);
            double t41893 = t41892+1.0;
            double t41894 = 1.0/pow(rho_a[index],4.0/3.0);
            double t41895 = 1.0/pow(rho_a[index],5.0/3.0);
            double t41896 = 1.0/sqrt(t41774);
            double t41897 = log(t41893);
            double t41898 = 1.0/t41787;
            double t41899 = 1.0/(t41784*t41784);
            double t41900 = b4p*t41777*t41895*(2.0/3.0);
            double t41901 = b2p*c*t41894*(1.0/3.0);
            double t41902 = b1p*c*t41894*t41896*(1.0/6.0);
            double t41903 = b3p*c*t41775*t41894*(1.0/2.0);
            double t41904 = t41900+t41901+t41902+t41903;
            double t41905 = t41904*t41790*t41898*t41899;
            double t41906 = c0f*t41885*t41897*2.0;
            double t41907 = c0p*t41790*t41788*2.0;
            double t41908 = t41906-t41907;
            double t41909 = 1.0/pow(rho_b[index],1.0/3.0);
            double t41910 = c*t41909;
            double t41911 = sqrt(t41910);
            double t41912 = pow(t41910,3.0/2.0);
            double t41913 = 1.0/pow(rho_b[index],2.0/3.0);
            double t41914 = b1p*t41911;
            double t41915 = b3p*t41912;
            double t41916 = b4p*t41913*t41777;
            double t41917 = b2p*c*t41909;
            double t41918 = t41914+t41915+t41916+t41917;
            double t41919 = 1.0/t41918;
            double t41920 = t41919*t41779*(1.0/2.0);
            double t41921 = t41920+1.0;
            double t41922 = log(t41921);
            double t41923 = a1p*c*t41909;
            double t41924 = t41923+1.0;
            double t41925 = c0p*t41922*t41924*2.0;
            double t41926 = t41815*t41843*t41846*t41838*t41849;
            double t41927 = Aa*t41815*t41843*t41861*t41871*t41880*t41873*2.0;
            double t41928 = gcab*t41795;
            double t41929 = t41928+1.0;
            double t41930 = 1.0/t41929;
            double t41931 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t41932 = t41800*t41796;
            double t41933 = gcab*t41795*2.0;
            double t41934 = t41932+t41933+1.0;
            double t41935 = 1.0/t41934;
            double t41936 = gx*gx;
            double t41937 = gamma_aa[index]*gx*t41791;
            double t41938 = t41937+1.0;
            double t41939 = 1.0/t41938;
            double t41940 = gamma_aa[index]*gx*t41791*2.0;
            double t41941 = t41792*t41936*t41794;
            double t41942 = t41940+t41941+1.0;
            double t41943 = 1.0/t41942;
            double t41944 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t41945 = 1.0/t41893;
            double t41946 = 1.0/(t41890*t41890);
            double t41947 = b4f*t41777*t41895*(2.0/3.0);
            double t41948 = b2f*c*t41894*(1.0/3.0);
            double t41949 = b1f*c*t41894*t41896*(1.0/6.0);
            double t41950 = b3f*c*t41775*t41894*(1.0/2.0);
            double t41951 = t41950+t41947+t41948+t41949;
            double t41952 = a1f*c*c0f*t41894*t41897*(2.0/3.0);
            double t41953 = a1p*c*c0p*t41894*t41788*(2.0/3.0);
            double t41954 = gamma_aa[index]*gcaa*t41791;
            double t41955 = t41954+1.0;
            double t41956 = 1.0/t41955;
            double t41957 = ccaa1*gamma_aa[index]*gcaa*t41791*t41956;
            double t41958 = gamma_aa[index]*gcaa*t41791*2.0;
            double t41959 = t41792*t41793*t41794;
            double t41960 = t41958+t41959+1.0;
            double t41961 = 1.0/t41960;
            double t41962 = ccaa2*t41961*t41792*t41793*t41794;
            double t41963 = ccaa0+t41962+t41957;
            double t41964 = t41815*t41908*t41883;
            double t41965 = t41907+t41964;
            v_rho_a_[index] = -t41963*(t41907+t41815*t41883*(t41906-c0p*t41790*t41788*2.0))-(ccab0+ccab1*gcab* \
               t41930*t41795+ccab2*t41800*t41935*t41796)*(-t41907+t41926+t41927+t41848+t41801*(t41859-t41815*t41843* \
               t41846*t41849*(t41859-(1.0/(t41830*t41830)*t41836*(b2f*c*t41812*(1.0/3.0)+b4f*t41850*t41777*(2.0/3.0) \
               +b1f*c*t41812*t41851*(1.0/6.0)+b3f*c*t41812*t41804*(1.0/2.0)))/t41833+a1f*c*c0f*t41812*t41834*(2.0/ \
               3.0)-a1p*c*c0p*t41812*t41837*(2.0/3.0))-a1p*c*c0p*t41812*t41837*(2.0/3.0)-t41815*t41860*t41843*t41838* \
               t41849*4.0+t41815*t41846*t41838*t41849*t41878+t41822*t41823*t41815*t41843*t41846*t41838*4.0-Aa*t41815* \
               t41843*t41861*t41871*t41873*(t41860*t41849*4.0-t41822*t41823*t41846*4.0)*2.0+Aa*t41815*t41861*t41871* \
               t41880*t41873*t41878*2.0+(t41815*t41843*t41861*t41880*t41873*1.0/(t41867*t41867)*(b2a*c*t41812*(1.0/ \
               3.0)+b4a*t41850*t41777*(2.0/3.0)+b1a*c*t41812*t41851*(1.0/6.0)+b3a*c*t41812*t41804*(1.0/2.0)))/t41870- \
               Aa*a1a*c*t41812*t41815*t41843*t41861*t41871*t41880*(2.0/3.0))+rho_a[index]*(-t41905+t41953+t41815* \
               t41883*(t41905+t41952-t41951*t41945*t41946*t41885-a1p*c*c0p*t41894*t41788*(2.0/3.0)))-t41815*t41908* \
               t41883)-(rho_a[index]*t41965+rho_b[index]*(t41925-t41815*t41883*(t41925-c0f*log((t41816*(1.0/2.0)) \
               /(b1f*t41911+b3f*t41912+b2f*c*t41909+b4f*t41913*t41777)+1.0)*(a1f*c*t41909+1.0)*2.0))-t41801*(t41926+ \
               t41927+t41848))*(ccab1*gamma_aa[index]*gcab*t41930*t41931*(4.0/3.0)-ccab2*t41800*1.0/(t41934*t41934) \
               *t41796*(gamma_aa[index]*gcab*t41931*(8.0/3.0)+gamma_aa[index]*t41931*t41795*t41796*(8.0/3.0))-ccab1* \
               gamma_aa[index]*t41931*1.0/(t41929*t41929)*t41795*t41796*(4.0/3.0)+ccab2*gamma_aa[index]*t41931*t41935* \
               t41795*t41796*(8.0/3.0))+rho_a[index]*t41965*(ccaa1*gamma_aa[index]*gcaa*t41931*t41956*(8.0/3.0)+ccaa2* \
               t41961*t41944*t41792*t41793*(1.6E1/3.0)-ccaa1*t41944*t41792*t41793*1.0/(t41955*t41955)*(8.0/3.0)-ccaa2* \
               1.0/(t41960*t41960)*t41792*t41793*t41794*(gamma_aa[index]*gcaa*t41931*(1.6E1/3.0)+t41944*t41792*t41793* \
               (1.6E1/3.0)))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t41791*t41939+cx2*t41943*t41792* \
               t41936*t41794)*(4.0/3.0)+rho_a[index]*t41963*(-t41905+t41953+t41815*t41883*(t41905+t41952-t41953-t41951* \
               t41945*t41946*t41885))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t41931*t41939*(8.0/3.0) \
               +cx2*t41943*t41944*t41792*t41936*(1.6E1/3.0)-cx1*t41944*t41792*t41936*1.0/(t41938*t41938)*(8.0/3.0) \
               -cx2*1.0/(t41942*t41942)*t41792*t41936*t41794*(gamma_aa[index]*gx*t41931*(1.6E1/3.0)+t41944*t41792* \
               t41936*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            double t44808 = 1.0/pow(rho_a[index],1.0/3.0);
            double t44809 = c*t44808;
            double t44810 = sqrt(t44809);
            double t44811 = pow(t44809,3.0/2.0);
            double t44812 = c*c;
            double t44813 = 1.0/pow(rho_a[index],2.0/3.0);
            double t44814 = 1.0/c0p;
            double t44815 = b1p*t44810;
            double t44816 = b3p*t44811;
            double t44817 = b4p*t44812*t44813;
            double t44818 = b2p*c*t44808;
            double t44819 = t44815+t44816+t44817+t44818;
            double t44820 = 1.0/t44819;
            double t44821 = t44820*t44814*(1.0/2.0);
            double t44822 = t44821+1.0;
            double t44823 = log(t44822);
            double t44824 = a1p*c*t44808;
            double t44825 = t44824+1.0;
            double t44826 = 1.0/pow(rho_a[index],8.0/3.0);
            double t44827 = gamma_aa[index]*gamma_aa[index];
            double t44828 = gcaa*gcaa;
            double t44829 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t44830 = gx*gx;
            double t44831 = gamma_aa[index]*gx*t44826;
            double t44832 = t44831+1.0;
            double t44833 = 1.0/t44832;
            double t44834 = gamma_aa[index]*gx*t44826*2.0;
            double t44835 = t44830*t44827*t44829;
            double t44836 = t44834+t44835+1.0;
            double t44837 = 1.0/t44836;
            double t44838 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t44839 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t44840 = pow(2.0,1.0/3.0);
            double t44841 = t44840*2.0;
            double t44842 = t44841-2.0;
            double t44843 = two_13*2.0;
            double t44844 = t44843-2.0;
            double t44845 = 1.0/t44844;
            double t44846 = a1f*c*t44808;
            double t44847 = t44846+1.0;
            double t44848 = 1.0/c0f;
            double t44849 = b1f*t44810;
            double t44850 = b3f*t44811;
            double t44851 = b4f*t44812*t44813;
            double t44852 = b2f*c*t44808;
            double t44853 = t44850+t44851+t44852+t44849;
            double t44854 = 1.0/t44853;
            double t44855 = t44854*t44848*(1.0/2.0);
            double t44856 = t44855+1.0;
            double t44857 = 1.0/pow(rho_a[index],4.0/3.0);
            double t44858 = 1.0/pow(rho_a[index],5.0/3.0);
            double t44859 = 1.0/sqrt(t44809);
            double t44860 = log(t44856);
            double t44861 = 1.0/t44822;
            double t44862 = 1.0/(t44819*t44819);
            double t44863 = b4p*t44812*t44858*(2.0/3.0);
            double t44864 = b2p*c*t44857*(1.0/3.0);
            double t44865 = b1p*c*t44857*t44859*(1.0/6.0);
            double t44866 = b3p*c*t44810*t44857*(1.0/2.0);
            double t44867 = t44863+t44864+t44865+t44866;
            double t44868 = t44825*t44861*t44862*t44867;
            double t44869 = gamma_aa[index]*gcaa*t44826;
            double t44870 = t44869+1.0;
            double t44871 = 1.0/t44870;
            double t44872 = ccaa1*gamma_aa[index]*gcaa*t44826*t44871;
            double t44873 = gamma_aa[index]*gcaa*t44826*2.0;
            double t44874 = t44827*t44828*t44829;
            double t44875 = t44873+t44874+1.0;
            double t44876 = 1.0/t44875;
            double t44877 = ccaa2*t44827*t44828*t44829*t44876;
            double t44878 = ccaa0+t44872+t44877;
            double t44879 = c0f*t44860*t44847*2.0;
            double t44880 = c0p*t44823*t44825*2.0;
            v_rho_a_[index] = -t44878*(t44880+t44842*t44845*(t44879-c0p*t44823*t44825*2.0))+rho_a[index]*t44878* \
               (-t44868+t44842*t44845*(t44868-(1.0/(t44853*t44853)*t44847*(b2f*c*t44857*(1.0/3.0)+b4f*t44812*t44858* \
               (2.0/3.0)+b1f*c*t44857*t44859*(1.0/6.0)+b3f*c*t44810*t44857*(1.0/2.0)))/t44856+a1f*c*c0f*t44860*t44857* \
               (2.0/3.0)-a1p*c*c0p*t44823*t44857*(2.0/3.0))+a1p*c*c0p*t44823*t44857*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t44833*t44826+cx2*t44830*t44827*t44837*t44829)*(4.0/3.0)+rho_a[index]* \
               (t44880-t44842*t44845*(t44880-t44879))*(ccaa1*gamma_aa[index]*gcaa*t44871*t44839*(8.0/3.0)+ccaa2*t44827* \
               t44828*t44838*t44876*(1.6E1/3.0)-ccaa1*1.0/(t44870*t44870)*t44827*t44828*t44838*(8.0/3.0)-ccaa2*t44827* \
               t44828*t44829*1.0/(t44875*t44875)*(gamma_aa[index]*gcaa*t44839*(1.6E1/3.0)+t44827*t44828*t44838*(1.6E1/ \
               3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t44833*t44839*(8.0/3.0)+cx2*t44830*t44827* \
               t44837*t44838*(1.6E1/3.0)-cx1*t44830*1.0/(t44832*t44832)*t44827*t44838*(8.0/3.0)-cx2*t44830*t44827* \
               1.0/(t44836*t44836)*t44829*(gamma_aa[index]*gx*t44839*(1.6E1/3.0)+t44830*t44827*t44838*(1.6E1/3.0) \
               ));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t41967 = 1.0/pow(rho_b[index],1.0/3.0);
            double t41968 = c*t41967;
            double t41969 = sqrt(t41968);
            double t41970 = pow(t41968,3.0/2.0);
            double t41971 = c*c;
            double t41972 = 1.0/pow(rho_b[index],2.0/3.0);
            double t41973 = 1.0/c0p;
            double t41974 = b1p*t41969;
            double t41975 = b3p*t41970;
            double t41976 = b4p*t41971*t41972;
            double t41977 = b2p*c*t41967;
            double t41978 = t41974+t41975+t41976+t41977;
            double t41979 = 1.0/t41978;
            double t41980 = t41973*t41979*(1.0/2.0);
            double t41981 = t41980+1.0;
            double t41982 = log(t41981);
            double t41983 = a1p*c*t41967;
            double t41984 = t41983+1.0;
            double t41985 = 1.0/pow(rho_b[index],8.0/3.0);
            double t41986 = gamma_bb[index]*gamma_bb[index];
            double t41987 = gcaa*gcaa;
            double t41988 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t41991 = 1.0/pow(rho_a[index],8.0/3.0);
            double t41992 = gamma_aa[index]*t41991*(1.0/2.0);
            double t41993 = gamma_bb[index]*t41985*(1.0/2.0);
            double t41989 = t41992+t41993;
            double t41990 = gcab*gcab;
            double t41994 = t41989*t41989;
            double t41995 = rho_a[index]+rho_b[index];
            double t41996 = 1.0/pow(t41995,1.0/3.0);
            double t41997 = c*t41996;
            double t41998 = sqrt(t41997);
            double t41999 = b1p*t41998;
            double t42000 = pow(t41997,3.0/2.0);
            double t42001 = b3p*t42000;
            double t42002 = 1.0/pow(t41995,2.0/3.0);
            double t42003 = b4p*t41971*t42002;
            double t42004 = b2p*c*t41996;
            double t42005 = t41999+t42001+t42003+t42004;
            double t42006 = 1.0/pow(t41995,4.0/3.0);
            double t42007 = two_13*2.0;
            double t42008 = t42007-2.0;
            double t42009 = 1.0/t42008;
            double t42010 = 1.0/c0f;
            double t42011 = 1.0/t42005;
            double t42012 = t41973*t42011*(1.0/2.0);
            double t42013 = t42012+1.0;
            double t42014 = a1p*c*t41996;
            double t42015 = t42014+1.0;
            double t42016 = rho_a[index]-rho_b[index];
            double t42017 = t42016*t42016;
            double t42018 = 1.0/t41995;
            double t42019 = t42016*t42018;
            double t42020 = b1f*t41998;
            double t42021 = b3f*t42000;
            double t42022 = b4f*t41971*t42002;
            double t42023 = b2f*c*t41996;
            double t42024 = t42020+t42021+t42022+t42023;
            double t42025 = 1.0/t42024;
            double t42026 = t42010*t42025*(1.0/2.0);
            double t42027 = t42026+1.0;
            double t42028 = log(t42027);
            double t42029 = a1f*c*t41996;
            double t42030 = t42029+1.0;
            double t42031 = log(t42013);
            double t42042 = c0f*t42030*t42028*2.0;
            double t42043 = c0p*t42031*t42015*2.0;
            double t42032 = t42042-t42043;
            double t42033 = t42019+1.0;
            double t42034 = pow(t42033,4.0/3.0);
            double t42035 = -t42019+1.0;
            double t42036 = pow(t42035,4.0/3.0);
            double t42037 = t42034+t42036-2.0;
            double t42038 = 1.0/(t41995*t41995);
            double t42039 = t42016*t42038;
            double t42040 = t42018+t42039;
            double t42041 = 1.0/(t41995*t41995*t41995*t41995);
            double t42044 = t42017*t42017;
            double t42045 = 1.0/pow(t41995,5.0/3.0);
            double t42046 = 1.0/sqrt(t41997);
            double t42047 = 1.0/t42013;
            double t42048 = 1.0/(t42005*t42005);
            double t42049 = b4p*t41971*t42045*(2.0/3.0);
            double t42050 = b2p*c*t42006*(1.0/3.0);
            double t42051 = b1p*c*t42006*t42046*(1.0/6.0);
            double t42052 = b3p*c*t41998*t42006*(1.0/2.0);
            double t42053 = t42050+t42051+t42052+t42049;
            double t42054 = 1.0/(t41995*t41995*t41995*t41995*t41995);
            double t42055 = 1.0/d2fz0;
            double t42056 = 1.0/Aa;
            double t42057 = b1a*t41998;
            double t42058 = b3a*t42000;
            double t42059 = b4a*t41971*t42002;
            double t42060 = b2a*c*t41996;
            double t42061 = t42060+t42057+t42058+t42059;
            double t42062 = 1.0/t42061;
            double t42063 = t42062*t42056*(1.0/2.0);
            double t42064 = t42063+1.0;
            double t42065 = log(t42064);
            double t42066 = a1a*c*t41996;
            double t42067 = t42066+1.0;
            double t42068 = pow(t42033,1.0/3.0);
            double t42069 = t42040*t42068*(4.0/3.0);
            double t42070 = pow(t42035,1.0/3.0);
            double t42071 = t42069-t42040*t42070*(4.0/3.0);
            double t42072 = t42041*t42044;
            double t42073 = t42072-1.0;
            double t42074 = pow(2.0,1.0/3.0);
            double t42075 = t42074*2.0;
            double t42076 = t42075-2.0;
            double t42077 = a1f*c*t41967;
            double t42078 = t42077+1.0;
            double t42079 = b1f*t41969;
            double t42080 = b3f*t41970;
            double t42081 = b4f*t41971*t41972;
            double t42082 = b2f*c*t41967;
            double t42083 = t42080+t42081+t42082+t42079;
            double t42084 = 1.0/t42083;
            double t42085 = t42010*t42084*(1.0/2.0);
            double t42086 = t42085+1.0;
            double t42087 = 1.0/pow(rho_b[index],4.0/3.0);
            double t42088 = 1.0/pow(rho_b[index],5.0/3.0);
            double t42089 = 1.0/sqrt(t41968);
            double t42090 = log(t42086);
            double t42091 = 1.0/t41981;
            double t42092 = 1.0/(t41978*t41978);
            double t42093 = b4p*t41971*t42088*(2.0/3.0);
            double t42094 = b2p*c*t42087*(1.0/3.0);
            double t42095 = b1p*c*t42087*t42089*(1.0/6.0);
            double t42096 = b3p*c*t41969*t42087*(1.0/2.0);
            double t42097 = t42093+t42094+t42095+t42096;
            double t42098 = t41984*t42091*t42092*t42097;
            double t42099 = c0f*t42090*t42078*2.0;
            double t42100 = c0p*t41982*t41984*2.0;
            double t42101 = a1p*c*c0p*t42031*t42006*(2.0/3.0);
            double t42102 = 1.0/pow(rho_a[index],1.0/3.0);
            double t42103 = c*t42102;
            double t42104 = sqrt(t42103);
            double t42105 = pow(t42103,3.0/2.0);
            double t42106 = 1.0/pow(rho_a[index],2.0/3.0);
            double t42107 = b1p*t42104;
            double t42108 = b3p*t42105;
            double t42109 = b4p*t41971*t42106;
            double t42110 = b2p*c*t42102;
            double t42111 = t42110+t42107+t42108+t42109;
            double t42112 = 1.0/t42111;
            double t42113 = t41973*t42112*(1.0/2.0);
            double t42114 = t42113+1.0;
            double t42115 = log(t42114);
            double t42116 = a1p*c*t42102;
            double t42117 = t42116+1.0;
            double t42118 = c0p*t42115*t42117*2.0;
            double t42119 = t42100-t42099;
            double t42120 = t42009*t42119*t42076;
            double t42121 = t42032*t42041*t42044*t42009*t42037;
            double t42122 = Aa*t42009*t42037*t42055*t42073*t42065*t42067*2.0;
            double t42123 = gcab*t41989;
            double t42124 = t42123+1.0;
            double t42125 = 1.0/t42124;
            double t42126 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t42127 = t41990*t41994;
            double t42128 = gcab*t41989*2.0;
            double t42129 = t42127+t42128+1.0;
            double t42130 = 1.0/t42129;
            double t42131 = gx*gx;
            double t42132 = gamma_bb[index]*gx*t41985;
            double t42133 = t42132+1.0;
            double t42134 = 1.0/t42133;
            double t42135 = gamma_bb[index]*gx*t41985*2.0;
            double t42136 = t41986*t41988*t42131;
            double t42137 = t42135+t42136+1.0;
            double t42138 = 1.0/t42137;
            double t42139 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t42140 = 1.0/t42086;
            double t42141 = 1.0/(t42083*t42083);
            double t42142 = b4f*t41971*t42088*(2.0/3.0);
            double t42143 = b2f*c*t42087*(1.0/3.0);
            double t42144 = b1f*c*t42087*t42089*(1.0/6.0);
            double t42145 = b3f*c*t41969*t42087*(1.0/2.0);
            double t42146 = t42142+t42143+t42144+t42145;
            double t42147 = a1f*c*c0f*t42090*t42087*(2.0/3.0);
            double t42148 = a1p*c*c0p*t41982*t42087*(2.0/3.0);
            double t42149 = gamma_bb[index]*gcaa*t41985;
            double t42150 = t42149+1.0;
            double t42151 = 1.0/t42150;
            double t42152 = ccaa1*gamma_bb[index]*gcaa*t41985*t42151;
            double t42153 = gamma_bb[index]*gcaa*t41985*2.0;
            double t42154 = t41986*t41987*t41988;
            double t42155 = t42153+t42154+1.0;
            double t42156 = 1.0/t42155;
            double t42157 = ccaa2*t41986*t41987*t41988*t42156;
            double t42158 = ccaa0+t42152+t42157;
            double t42159 = t42100-t42120;
            v_rho_b_[index] = -t42158*(t42100+t42009*t42076*(t42099-c0p*t41982*t41984*2.0))-(ccab0+ccab1*gcab* \
               t41989*t42125+ccab2*t41990*t41994*t42130)*(-t42100+t42120+t42121+t42122+t42043+rho_b[index]*(t42148- \
               t42098+t42009*t42076*(t42147+t42098-t42140*t42141*t42146*t42078-a1p*c*c0p*t41982*t42087*(2.0/3.0)) \
               )-t41995*(t42101-t42015*t42053*t42047*t42048+t42032*t42041*t42044*t42071*t42009+t42032*t42044*t42009* \
               t42054*t42037*4.0-t42041*t42044*t42009*t42037*(t42101-t42015*t42053*t42047*t42048+(t42030*1.0/(t42024* \
               t42024)*(b2f*c*t42006*(1.0/3.0)+b4f*t41971*t42045*(2.0/3.0)+b1f*c*t42006*t42046*(1.0/6.0)+b3f*c*t41998* \
               t42006*(1.0/2.0)))/t42027-a1f*c*c0f*t42006*t42028*(2.0/3.0))+t42032*t42041*t42016*t42017*t42009*t42037* \
               4.0+Aa*t42009*t42037*t42055*t42065*t42067*(t42044*t42054*4.0+t42041*t42016*t42017*4.0)*2.0+Aa*t42071* \
               t42009*t42055*t42073*t42065*t42067*2.0-(1.0/(t42061*t42061)*t42009*t42037*t42055*t42073*t42067*(b2a* \
               c*t42006*(1.0/3.0)+b4a*t41971*t42045*(2.0/3.0)+b1a*c*t42006*t42046*(1.0/6.0)+b3a*c*t41998*t42006*(1.0/ \
               2.0)))/t42064+Aa*a1a*c*t42006*t42009*t42037*t42055*t42073*t42065*(2.0/3.0)))-(rho_b[index]*t42159+ \
               rho_a[index]*(t42118-t42009*t42076*(t42118-c0f*log((t42010*(1.0/2.0))/(b1f*t42104+b3f*t42105+b2f*c* \
               t42102+b4f*t41971*t42106)+1.0)*(a1f*c*t42102+1.0)*2.0))-t41995*(t42121+t42122+t42043))*(ccab1*gamma_bb[index]* \
               gcab*t42125*t42126*(4.0/3.0)-ccab2*t41990*t41994*1.0/(t42129*t42129)*(gamma_bb[index]*gcab*t42126* \
               (8.0/3.0)+gamma_bb[index]*t41990*t41989*t42126*(8.0/3.0))-ccab1*gamma_bb[index]*t41990*t41989*1.0/ \
               (t42124*t42124)*t42126*(4.0/3.0)+ccab2*gamma_bb[index]*t41990*t41989*t42130*t42126*(8.0/3.0))+rho_b[index]* \
               t42159*(ccaa1*gamma_bb[index]*gcaa*t42151*t42126*(8.0/3.0)+ccaa2*t41986*t41987*t42156*t42139*(1.6E1/ \
               3.0)-ccaa1*t41986*t41987*1.0/(t42150*t42150)*t42139*(8.0/3.0)-ccaa2*t41986*t41987*t41988*1.0/(t42155* \
               t42155)*(gamma_bb[index]*gcaa*t42126*(1.6E1/3.0)+t41986*t41987*t42139*(1.6E1/3.0)))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t41985*t42134+cx2*t41986*t41988*t42131*t42138)*(4.0/3.0)+rho_b[index]* \
               t42158*(t42148-t42098+t42009*t42076*(t42147-t42148+t42098-t42140*t42141*t42146*t42078))-c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t42134*t42126*(8.0/3.0)+cx2*t41986*t42131*t42138*t42139*(1.6E1/3.0)-cx1* \
               t41986*t42131*1.0/(t42133*t42133)*t42139*(8.0/3.0)-cx2*t41986*t41988*t42131*1.0/(t42137*t42137)*(gamma_bb[index]* \
               gx*t42126*(1.6E1/3.0)+t41986*t42131*t42139*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t44398 = 1.0/pow(rho_b[index],1.0/3.0);
            double t44399 = c*t44398;
            double t44400 = sqrt(t44399);
            double t44401 = pow(t44399,3.0/2.0);
            double t44402 = c*c;
            double t44403 = 1.0/pow(rho_b[index],2.0/3.0);
            double t44404 = 1.0/c0p;
            double t44405 = b1p*t44400;
            double t44406 = b3p*t44401;
            double t44407 = b4p*t44402*t44403;
            double t44408 = b2p*c*t44398;
            double t44409 = t44405+t44406+t44407+t44408;
            double t44410 = 1.0/t44409;
            double t44411 = t44410*t44404*(1.0/2.0);
            double t44412 = t44411+1.0;
            double t44413 = log(t44412);
            double t44414 = a1p*c*t44398;
            double t44415 = t44414+1.0;
            double t44416 = 1.0/pow(rho_b[index],8.0/3.0);
            double t44417 = gamma_bb[index]*gamma_bb[index];
            double t44418 = gcaa*gcaa;
            double t44419 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t44420 = gx*gx;
            double t44421 = gamma_bb[index]*gx*t44416;
            double t44422 = t44421+1.0;
            double t44423 = 1.0/t44422;
            double t44424 = gamma_bb[index]*gx*t44416*2.0;
            double t44425 = t44420*t44417*t44419;
            double t44426 = t44424+t44425+1.0;
            double t44427 = 1.0/t44426;
            double t44428 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t44429 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t44430 = pow(2.0,1.0/3.0);
            double t44431 = t44430*2.0;
            double t44432 = t44431-2.0;
            double t44433 = two_13*2.0;
            double t44434 = t44433-2.0;
            double t44435 = 1.0/t44434;
            double t44436 = a1f*c*t44398;
            double t44437 = t44436+1.0;
            double t44438 = 1.0/c0f;
            double t44439 = b1f*t44400;
            double t44440 = b3f*t44401;
            double t44441 = b4f*t44402*t44403;
            double t44442 = b2f*c*t44398;
            double t44443 = t44440+t44441+t44442+t44439;
            double t44444 = 1.0/t44443;
            double t44445 = t44444*t44438*(1.0/2.0);
            double t44446 = t44445+1.0;
            double t44447 = 1.0/pow(rho_b[index],4.0/3.0);
            double t44448 = 1.0/pow(rho_b[index],5.0/3.0);
            double t44449 = 1.0/sqrt(t44399);
            double t44450 = log(t44446);
            double t44451 = 1.0/t44412;
            double t44452 = 1.0/(t44409*t44409);
            double t44453 = b4p*t44402*t44448*(2.0/3.0);
            double t44454 = b2p*c*t44447*(1.0/3.0);
            double t44455 = b1p*c*t44447*t44449*(1.0/6.0);
            double t44456 = b3p*c*t44400*t44447*(1.0/2.0);
            double t44457 = t44453+t44454+t44455+t44456;
            double t44458 = t44415*t44451*t44452*t44457;
            double t44459 = gamma_bb[index]*gcaa*t44416;
            double t44460 = t44459+1.0;
            double t44461 = 1.0/t44460;
            double t44462 = ccaa1*gamma_bb[index]*gcaa*t44416*t44461;
            double t44463 = gamma_bb[index]*gcaa*t44416*2.0;
            double t44464 = t44417*t44418*t44419;
            double t44465 = t44463+t44464+1.0;
            double t44466 = 1.0/t44465;
            double t44467 = ccaa2*t44417*t44418*t44419*t44466;
            double t44468 = ccaa0+t44462+t44467;
            double t44469 = c0f*t44450*t44437*2.0;
            double t44470 = c0p*t44413*t44415*2.0;
            v_rho_b_[index] = -t44468*(t44470+t44432*t44435*(t44469-c0p*t44413*t44415*2.0))+rho_b[index]*t44468* \
               (-t44458+t44432*t44435*(t44458-(1.0/(t44443*t44443)*t44437*(b2f*c*t44447*(1.0/3.0)+b4f*t44402*t44448* \
               (2.0/3.0)+b1f*c*t44447*t44449*(1.0/6.0)+b3f*c*t44400*t44447*(1.0/2.0)))/t44446+a1f*c*c0f*t44450*t44447* \
               (2.0/3.0)-a1p*c*c0p*t44413*t44447*(2.0/3.0))+a1p*c*c0p*t44413*t44447*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t44423*t44416+cx2*t44420*t44417*t44427*t44419)*(4.0/3.0)+rho_b[index]* \
               (t44470-t44432*t44435*(t44470-t44469))*(ccaa1*gamma_bb[index]*gcaa*t44461*t44429*(8.0/3.0)+ccaa2*t44417* \
               t44418*t44428*t44466*(1.6E1/3.0)-ccaa1*1.0/(t44460*t44460)*t44417*t44418*t44428*(8.0/3.0)-ccaa2*t44417* \
               t44418*t44419*1.0/(t44465*t44465)*(gamma_bb[index]*gcaa*t44429*(1.6E1/3.0)+t44417*t44418*t44428*(1.6E1/ \
               3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t44423*t44429*(8.0/3.0)+cx2*t44420*t44417* \
               t44427*t44428*(1.6E1/3.0)-cx1*t44420*1.0/(t44422*t44422)*t44417*t44428*(8.0/3.0)-cx2*t44420*t44417* \
               1.0/(t44426*t44426)*t44419*(gamma_bb[index]*gx*t44429*(1.6E1/3.0)+t44420*t44417*t44428*(1.6E1/3.0) \
               ));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t42161 = 1.0/pow(rho_a[index],1.0/3.0);
                double t42162 = c*t42161;
                double t42163 = sqrt(t42162);
                double t42164 = pow(t42162,3.0/2.0);
                double t42165 = c*c;
                double t42166 = 1.0/pow(rho_a[index],2.0/3.0);
                double t42167 = 1.0/c0p;
                double t42168 = b1p*t42163;
                double t42169 = b3p*t42164;
                double t42170 = b4p*t42165*t42166;
                double t42171 = b2p*c*t42161;
                double t42172 = t42170+t42171+t42168+t42169;
                double t42173 = 1.0/t42172;
                double t42174 = t42173*t42167*(1.0/2.0);
                double t42175 = t42174+1.0;
                double t42176 = log(t42175);
                double t42177 = a1p*c*t42161;
                double t42178 = t42177+1.0;
                double t42179 = pow(2.0,1.0/3.0);
                double t42180 = t42179*2.0;
                double t42181 = t42180-2.0;
                double t42182 = two_13*2.0;
                double t42183 = t42182-2.0;
                double t42184 = 1.0/t42183;
                double t42185 = 1.0/c0f;
                double t42186 = 1.0/pow(rho_b[index],1.0/3.0);
                double t42187 = c*t42186;
                double t42188 = sqrt(t42187);
                double t42189 = pow(t42187,3.0/2.0);
                double t42190 = 1.0/pow(rho_b[index],2.0/3.0);
                double t42191 = b1p*t42188;
                double t42192 = b3p*t42189;
                double t42193 = b4p*t42190*t42165;
                double t42194 = b2p*c*t42186;
                double t42195 = t42191+t42192+t42193+t42194;
                double t42196 = 1.0/t42195;
                double t42197 = t42167*t42196*(1.0/2.0);
                double t42198 = t42197+1.0;
                double t42199 = log(t42198);
                double t42200 = a1p*c*t42186;
                double t42201 = t42200+1.0;
                double t42202 = c0p*t42201*t42199*2.0;
                double t42203 = rho_a[index]+rho_b[index];
                double t42204 = 1.0/pow(t42203,1.0/3.0);
                double t42205 = c*t42204;
                double t42206 = sqrt(t42205);
                double t42207 = pow(t42205,3.0/2.0);
                double t42208 = 1.0/pow(t42203,2.0/3.0);
                double t42209 = b1p*t42206;
                double t42210 = b3p*t42207;
                double t42211 = b4p*t42208*t42165;
                double t42212 = b2p*c*t42204;
                double t42213 = t42210+t42211+t42212+t42209;
                double t42214 = 1.0/t42213;
                double t42215 = t42214*t42167*(1.0/2.0);
                double t42216 = t42215+1.0;
                double t42217 = log(t42216);
                double t42218 = a1p*c*t42204;
                double t42219 = t42218+1.0;
                double t42220 = c0p*t42217*t42219*2.0;
                double t42221 = rho_a[index]-rho_b[index];
                double t42222 = t42221*t42221;
                double t42223 = 1.0/t42203;
                double t42224 = t42221*t42223;
                double t42225 = 1.0/(t42203*t42203*t42203*t42203);
                double t42226 = t42222*t42222;
                double t42227 = t42224+1.0;
                double t42228 = pow(t42227,4.0/3.0);
                double t42229 = -t42224+1.0;
                double t42230 = pow(t42229,4.0/3.0);
                double t42231 = t42230+t42228-2.0;
                double t42232 = 1.0/pow(rho_a[index],8.0/3.0);
                double t42233 = gamma_aa[index]*t42232*(1.0/2.0);
                double t42234 = 1.0/pow(rho_b[index],8.0/3.0);
                double t42235 = gamma_bb[index]*t42234*(1.0/2.0);
                double t42236 = t42233+t42235;
                double t42237 = gcab*t42236;
                double t42238 = t42237+1.0;
                double t42239 = gcab*gcab;
                double t42240 = t42236*t42236;
                double t42241 = t42240*t42239;
                double t42242 = gcab*t42236*2.0;
                double t42243 = t42241+t42242+1.0;
                double t42244 = c0p*t42176*t42178*2.0;
                double t42245 = gx*gx;
                double t42246 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t42247 = gamma_aa[index]*gx*t42232;
                double t42248 = t42247+1.0;
                double t42249 = gamma_aa[index]*gamma_aa[index];
                double t42250 = gamma_aa[index]*gx*t42232*2.0;
                double t42251 = t42245*t42246*t42249;
                double t42252 = t42250+t42251+1.0;
                double t42253 = b1f*t42163;
                double t42254 = b3f*t42164;
                double t42255 = b4f*t42165*t42166;
                double t42256 = b2f*c*t42161;
                double t42257 = t42253+t42254+t42255+t42256;
                double t42258 = 1.0/t42257;
                double t42259 = t42185*t42258*(1.0/2.0);
                double t42260 = t42259+1.0;
                double t42261 = log(t42260);
                double t42262 = a1f*c*t42161;
                double t42263 = t42262+1.0;
                double t42264 = t42244-c0f*t42261*t42263*2.0;
                double t42265 = t42244-t42181*t42264*t42184;
                double t42266 = gcaa*gcaa;
                double t42267 = gamma_aa[index]*gcaa*t42232;
                double t42268 = t42267+1.0;
                double t42269 = gamma_aa[index]*gcaa*t42232*2.0;
                double t42270 = t42246*t42266*t42249;
                double t42271 = t42270+t42269+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t42265+rho_b[index]*(t42202-t42181*t42184*(t42202-c0f*log((t42185* \
                   (1.0/2.0))/(b1f*t42188+b3f*t42189+b2f*c*t42186+b4f*t42190*t42165)+1.0)*(a1f*c*t42186+1.0)*2.0))-t42203* \
                   (t42220-t42231*t42225*t42226*t42184*(t42220-c0f*log((t42185*(1.0/2.0))/(b1f*t42206+b3f*t42207+b2f* \
                   c*t42204+b4f*t42208*t42165)+1.0)*(a1f*c*t42204+1.0)*2.0)+(Aa*t42231*t42184*log((1.0/2.0)/(Aa*(b1a* \
                   t42206+b3a*t42207+b2a*c*t42204+b4a*t42208*t42165))+1.0)*(t42225*t42226-1.0)*(a1a*c*t42204+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t42232*(1.0/2.0))/t42238-ccab2*t42240*1.0/(t42243*t42243)*t42239*(gcab*t42232+ \
                   t42232*t42236*t42239)+(ccab2*t42232*t42236*t42239)/t42243-ccab1*t42232*t42236*1.0/(t42238*t42238)* \
                   t42239*(1.0/2.0))-rho_a[index]*t42265*((ccaa1*gcaa*t42232)/t42268+(ccaa2*gamma_aa[index]*t42246*t42266* \
                   2.0)/t42271-ccaa1*gamma_aa[index]*t42246*t42266*1.0/(t42268*t42268)-ccaa2*1.0/(t42271*t42271)*t42246* \
                   t42266*t42249*(gcaa*t42232*2.0+gamma_aa[index]*t42246*t42266*2.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t42232)/t42248-cx1*gamma_aa[index]*t42245*t42246*1.0/(t42248*t42248)+(cx2*gamma_aa[index]*t42245* \
                   t42246*2.0)/t42252-cx2*1.0/(t42252*t42252)*t42245*t42246*t42249*(gx*t42232*2.0+gamma_aa[index]*t42245* \
                   t42246*2.0));
            } else if (rho_a[index] > cutoff_) {
                double t44883 = 1.0/pow(rho_a[index],8.0/3.0);
                double t44884 = gx*gx;
                double t44885 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t44886 = gamma_aa[index]*gx*t44883;
                double t44887 = t44886+1.0;
                double t44888 = gamma_aa[index]*gamma_aa[index];
                double t44889 = gamma_aa[index]*gx*t44883*2.0;
                double t44890 = t44884*t44885*t44888;
                double t44891 = t44890+t44889+1.0;
                double t44892 = 1.0/pow(rho_a[index],1.0/3.0);
                double t44893 = c*t44892;
                double t44894 = sqrt(t44893);
                double t44895 = pow(t44893,3.0/2.0);
                double t44896 = c*c;
                double t44897 = 1.0/pow(rho_a[index],2.0/3.0);
                double t44898 = 1.0/c0p;
                double t44899 = b1p*t44894;
                double t44900 = b3p*t44895;
                double t44901 = b4p*t44896*t44897;
                double t44902 = b2p*c*t44892;
                double t44903 = t44900+t44901+t44902+t44899;
                double t44904 = 1.0/t44903;
                double t44905 = t44904*t44898*(1.0/2.0);
                double t44906 = t44905+1.0;
                double t44907 = log(t44906);
                double t44908 = a1p*c*t44892;
                double t44909 = t44908+1.0;
                double t44910 = gcaa*gcaa;
                double t44911 = gamma_aa[index]*gcaa*t44883;
                double t44912 = t44911+1.0;
                double t44913 = gamma_aa[index]*gcaa*t44883*2.0;
                double t44914 = t44910*t44885*t44888;
                double t44915 = t44913+t44914+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t44883)/t44887-cx1*gamma_aa[index]*t44884* \
                   t44885*1.0/(t44887*t44887)+(cx2*gamma_aa[index]*t44884*t44885*2.0)/t44891-cx2*1.0/(t44891*t44891)* \
                   t44884*t44885*t44888*(gx*t44883*2.0+gamma_aa[index]*t44884*t44885*2.0))-rho_a[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44894+b3f*t44895+b2f*c*t44892+b4f*t44896*t44897))+1.0) \
                   *(a1f*c*t44892+1.0)*2.0-c0p*t44907*t44909*2.0))/(two_13*2.0-2.0)+c0p*t44907*t44909*2.0)*((ccaa1*gcaa* \
                   t44883)/t44912-ccaa1*gamma_aa[index]*t44910*1.0/(t44912*t44912)*t44885+(ccaa2*gamma_aa[index]*t44910* \
                   t44885*2.0)/t44915-ccaa2*t44910*1.0/(t44915*t44915)*t44885*t44888*(gcaa*t44883*2.0+gamma_aa[index]* \
                   t44910*t44885*2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t42274 = 1.0/pow(rho_a[index],1.0/3.0);
                double t42275 = c*t42274;
                double t42276 = sqrt(t42275);
                double t42277 = pow(t42275,3.0/2.0);
                double t42278 = c*c;
                double t42279 = 1.0/pow(rho_a[index],2.0/3.0);
                double t42280 = 1.0/c0p;
                double t42281 = b1p*t42276;
                double t42282 = b3p*t42277;
                double t42283 = b4p*t42278*t42279;
                double t42284 = b2p*c*t42274;
                double t42285 = t42281+t42282+t42283+t42284;
                double t42286 = 1.0/t42285;
                double t42287 = t42280*t42286*(1.0/2.0);
                double t42288 = t42287+1.0;
                double t42289 = log(t42288);
                double t42290 = a1p*c*t42274;
                double t42291 = t42290+1.0;
                double t42292 = pow(2.0,1.0/3.0);
                double t42293 = t42292*2.0;
                double t42294 = t42293-2.0;
                double t42295 = two_13*2.0;
                double t42296 = t42295-2.0;
                double t42297 = 1.0/t42296;
                double t42298 = 1.0/c0f;
                double t42299 = 1.0/pow(rho_b[index],1.0/3.0);
                double t42300 = c*t42299;
                double t42301 = sqrt(t42300);
                double t42302 = pow(t42300,3.0/2.0);
                double t42303 = 1.0/pow(rho_b[index],2.0/3.0);
                double t42304 = b1p*t42301;
                double t42305 = b3p*t42302;
                double t42306 = b4p*t42303*t42278;
                double t42307 = b2p*c*t42299;
                double t42308 = t42304+t42305+t42306+t42307;
                double t42309 = 1.0/t42308;
                double t42310 = t42280*t42309*(1.0/2.0);
                double t42311 = t42310+1.0;
                double t42312 = log(t42311);
                double t42313 = a1p*c*t42299;
                double t42314 = t42313+1.0;
                double t42315 = c0p*t42312*t42314*2.0;
                double t42316 = rho_a[index]+rho_b[index];
                double t42317 = 1.0/pow(t42316,1.0/3.0);
                double t42318 = c*t42317;
                double t42319 = sqrt(t42318);
                double t42320 = pow(t42318,3.0/2.0);
                double t42321 = 1.0/pow(t42316,2.0/3.0);
                double t42322 = b1p*t42319;
                double t42323 = b3p*t42320;
                double t42324 = b4p*t42321*t42278;
                double t42325 = b2p*c*t42317;
                double t42326 = t42322+t42323+t42324+t42325;
                double t42327 = 1.0/t42326;
                double t42328 = t42280*t42327*(1.0/2.0);
                double t42329 = t42328+1.0;
                double t42330 = log(t42329);
                double t42331 = a1p*c*t42317;
                double t42332 = t42331+1.0;
                double t42333 = c0p*t42330*t42332*2.0;
                double t42334 = rho_a[index]-rho_b[index];
                double t42335 = t42334*t42334;
                double t42336 = 1.0/t42316;
                double t42337 = t42334*t42336;
                double t42338 = 1.0/(t42316*t42316*t42316*t42316);
                double t42339 = t42335*t42335;
                double t42340 = t42337+1.0;
                double t42341 = pow(t42340,4.0/3.0);
                double t42342 = -t42337+1.0;
                double t42343 = pow(t42342,4.0/3.0);
                double t42344 = t42341+t42343-2.0;
                double t42345 = 1.0/pow(rho_b[index],8.0/3.0);
                double t42346 = 1.0/pow(rho_a[index],8.0/3.0);
                double t42347 = gamma_aa[index]*t42346*(1.0/2.0);
                double t42348 = gamma_bb[index]*t42345*(1.0/2.0);
                double t42349 = t42347+t42348;
                double t42350 = gcab*t42349;
                double t42351 = t42350+1.0;
                double t42352 = gcab*gcab;
                double t42353 = t42349*t42349;
                double t42354 = t42352*t42353;
                double t42355 = gcab*t42349*2.0;
                double t42356 = t42354+t42355+1.0;
                double t42357 = c0p*t42291*t42289*2.0;
                double t42358 = gx*gx;
                double t42359 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t42360 = gamma_bb[index]*gx*t42345;
                double t42361 = t42360+1.0;
                double t42362 = gamma_bb[index]*gamma_bb[index];
                double t42363 = gamma_bb[index]*gx*t42345*2.0;
                double t42364 = t42362*t42358*t42359;
                double t42365 = t42363+t42364+1.0;
                double t42366 = b1f*t42301;
                double t42367 = b3f*t42302;
                double t42368 = b4f*t42303*t42278;
                double t42369 = b2f*c*t42299;
                double t42370 = t42366+t42367+t42368+t42369;
                double t42371 = 1.0/t42370;
                double t42372 = t42371*t42298*(1.0/2.0);
                double t42373 = t42372+1.0;
                double t42374 = log(t42373);
                double t42375 = a1f*c*t42299;
                double t42376 = t42375+1.0;
                double t42377 = t42315-c0f*t42374*t42376*2.0;
                double t42378 = t42315-t42294*t42377*t42297;
                double t42379 = gcaa*gcaa;
                double t42380 = gamma_bb[index]*gcaa*t42345;
                double t42381 = t42380+1.0;
                double t42382 = gamma_bb[index]*gcaa*t42345*2.0;
                double t42383 = t42362*t42359*t42379;
                double t42384 = t42382+t42383+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t42378+rho_a[index]*(t42357-t42294*t42297*(t42357-c0f*log((t42298* \
                   (1.0/2.0))/(b1f*t42276+b3f*t42277+b2f*c*t42274+b4f*t42278*t42279)+1.0)*(a1f*c*t42274+1.0)*2.0))-t42316* \
                   (t42333-t42344*t42338*t42339*t42297*(t42333-c0f*log((t42298*(1.0/2.0))/(b1f*t42319+b3f*t42320+b2f* \
                   c*t42317+b4f*t42321*t42278)+1.0)*(a1f*c*t42317+1.0)*2.0)+(Aa*t42344*t42297*log((1.0/2.0)/(Aa*(b1a* \
                   t42319+b3a*t42320+b2a*c*t42317+b4a*t42321*t42278))+1.0)*(t42338*t42339-1.0)*(a1a*c*t42317+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t42345*(1.0/2.0))/t42351-ccab2*t42352*t42353*1.0/(t42356*t42356)*(gcab*t42345+ \
                   t42352*t42345*t42349)-ccab1*1.0/(t42351*t42351)*t42352*t42345*t42349*(1.0/2.0)+(ccab2*t42352*t42345* \
                   t42349)/t42356)-rho_b[index]*t42378*((ccaa1*gcaa*t42345)/t42381-ccaa1*gamma_bb[index]*1.0/(t42381* \
                   t42381)*t42359*t42379+(ccaa2*gamma_bb[index]*t42359*t42379*2.0)/t42384-ccaa2*t42362*1.0/(t42384*t42384) \
                   *t42359*t42379*(gcaa*t42345*2.0+gamma_bb[index]*t42359*t42379*2.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1* \
                   gx*t42345)/t42361-cx1*gamma_bb[index]*1.0/(t42361*t42361)*t42358*t42359+(cx2*gamma_bb[index]*t42358* \
                   t42359*2.0)/t42365-cx2*t42362*1.0/(t42365*t42365)*t42358*t42359*(gx*t42345*2.0+gamma_bb[index]*t42358* \
                   t42359*2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t44474 = 1.0/pow(rho_b[index],8.0/3.0);
                double t44475 = gx*gx;
                double t44476 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t44477 = gamma_bb[index]*gx*t44474;
                double t44478 = t44477+1.0;
                double t44479 = gamma_bb[index]*gamma_bb[index];
                double t44480 = gamma_bb[index]*gx*t44474*2.0;
                double t44481 = t44475*t44476*t44479;
                double t44482 = t44480+t44481+1.0;
                double t44483 = 1.0/pow(rho_b[index],1.0/3.0);
                double t44484 = c*t44483;
                double t44485 = sqrt(t44484);
                double t44486 = pow(t44484,3.0/2.0);
                double t44487 = c*c;
                double t44488 = 1.0/pow(rho_b[index],2.0/3.0);
                double t44489 = 1.0/c0p;
                double t44490 = b1p*t44485;
                double t44491 = b3p*t44486;
                double t44492 = b4p*t44487*t44488;
                double t44493 = b2p*c*t44483;
                double t44494 = t44490+t44491+t44492+t44493;
                double t44495 = 1.0/t44494;
                double t44496 = t44495*t44489*(1.0/2.0);
                double t44497 = t44496+1.0;
                double t44498 = log(t44497);
                double t44499 = a1p*c*t44483;
                double t44500 = t44499+1.0;
                double t44501 = gcaa*gcaa;
                double t44502 = gamma_bb[index]*gcaa*t44474;
                double t44503 = t44502+1.0;
                double t44504 = gamma_bb[index]*gcaa*t44474*2.0;
                double t44505 = t44501*t44476*t44479;
                double t44506 = t44504+t44505+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t44474)/t44478-cx1*gamma_bb[index]*t44475* \
                   t44476*1.0/(t44478*t44478)+(cx2*gamma_bb[index]*t44475*t44476*2.0)/t44482-cx2*1.0/(t44482*t44482)* \
                   t44475*t44476*t44479*(gx*t44474*2.0+gamma_bb[index]*t44475*t44476*2.0))-rho_b[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t44485+b3f*t44486+b2f*c*t44483+b4f*t44487*t44488))+1.0) \
                   *(a1f*c*t44483+1.0)*2.0-c0p*t44500*t44498*2.0))/(two_13*2.0-2.0)+c0p*t44500*t44498*2.0)*((ccaa1*gcaa* \
                   t44474)/t44503-ccaa1*gamma_bb[index]*t44501*1.0/(t44503*t44503)*t44476+(ccaa2*gamma_bb[index]*t44501* \
                   t44476*2.0)/t44506-ccaa2*t44501*1.0/(t44506*t44506)*t44476*t44479*(gcaa*t44474*2.0+gamma_bb[index]* \
                   t44501*t44476*2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t42388 = 1.0/pow(rho_a[index],1.0/3.0);
            double t42389 = c*t42388;
            double t42390 = sqrt(t42389);
            double t42391 = pow(t42389,3.0/2.0);
            double t42392 = c*c;
            double t42393 = 1.0/pow(rho_a[index],2.0/3.0);
            double t42394 = 1.0/c0p;
            double t42395 = b1p*t42390;
            double t42396 = b3p*t42391;
            double t42397 = b4p*t42392*t42393;
            double t42398 = b2p*c*t42388;
            double t42399 = t42395+t42396+t42397+t42398;
            double t42400 = 1.0/t42399;
            double t42401 = t42400*t42394*(1.0/2.0);
            double t42402 = t42401+1.0;
            double t42403 = log(t42402);
            double t42404 = a1p*c*t42388;
            double t42405 = t42404+1.0;
            double t42406 = 1.0/pow(rho_a[index],8.0/3.0);
            double t42407 = gamma_aa[index]*gamma_aa[index];
            double t42408 = gcaa*gcaa;
            double t42409 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t42410 = gamma_aa[index]*gcaa*t42406;
            double t42411 = t42410+1.0;
            double t42412 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t42413 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t42414 = gamma_aa[index]*gcaa*t42406*2.0;
            double t42415 = t42412*t42407*t42408;
            double t42416 = t42414+t42415+1.0;
            double t42419 = gamma_aa[index]*t42406*(1.0/2.0);
            double t42420 = 1.0/pow(rho_b[index],8.0/3.0);
            double t42421 = gamma_bb[index]*t42420*(1.0/2.0);
            double t42417 = t42421+t42419;
            double t42418 = gcab*gcab;
            double t42422 = t42417*t42417;
            double t42423 = rho_a[index]+rho_b[index];
            double t42424 = 1.0/pow(t42423,1.0/3.0);
            double t42425 = c*t42424;
            double t42426 = sqrt(t42425);
            double t42427 = b1p*t42426;
            double t42428 = pow(t42425,3.0/2.0);
            double t42429 = b3p*t42428;
            double t42430 = 1.0/pow(t42423,2.0/3.0);
            double t42431 = b4p*t42430*t42392;
            double t42432 = b2p*c*t42424;
            double t42433 = t42431+t42432+t42427+t42429;
            double t42434 = 1.0/pow(t42423,7.0/3.0);
            double t42435 = 1.0/pow(t42423,8.0/3.0);
            double t42436 = 1.0/sqrt(t42425);
            double t42437 = a1p*c*t42424;
            double t42438 = t42437+1.0;
            double t42439 = 1.0/t42433;
            double t42440 = t42394*t42439*(1.0/2.0);
            double t42441 = t42440+1.0;
            double t42442 = 1.0/t42441;
            double t42443 = 1.0/pow(t42423,4.0/3.0);
            double t42483 = 1.0/pow(t42423,5.0/3.0);
            double t42485 = b4p*t42392*t42483*(2.0/3.0);
            double t42486 = b2p*c*t42443*(1.0/3.0);
            double t42487 = b1p*c*t42443*t42436*(1.0/6.0);
            double t42488 = b3p*c*t42443*t42426*(1.0/2.0);
            double t42444 = t42485+t42486+t42487+t42488;
            double t42445 = two_13*2.0;
            double t42446 = t42445-2.0;
            double t42447 = 1.0/t42446;
            double t42448 = 1.0/c0f;
            double t42449 = rho_a[index]-rho_b[index];
            double t42450 = 1.0/t42423;
            double t42451 = t42450*t42449;
            double t42452 = b1f*t42426;
            double t42453 = b3f*t42428;
            double t42454 = b4f*t42430*t42392;
            double t42455 = b2f*c*t42424;
            double t42456 = t42452+t42453+t42454+t42455;
            double t42457 = 1.0/t42456;
            double t42458 = t42448*t42457*(1.0/2.0);
            double t42459 = t42458+1.0;
            double t42460 = log(t42459);
            double t42461 = a1f*c*t42424;
            double t42462 = t42461+1.0;
            double t42463 = log(t42441);
            double t42471 = c0f*t42460*t42462*2.0;
            double t42472 = c0p*t42463*t42438*2.0;
            double t42464 = t42471-t42472;
            double t42465 = t42449*t42449;
            double t42466 = t42451+1.0;
            double t42467 = pow(t42466,4.0/3.0);
            double t42468 = -t42451+1.0;
            double t42469 = pow(t42468,4.0/3.0);
            double t42470 = t42467+t42469-2.0;
            double t42473 = 1.0/(t42423*t42423);
            double t42477 = t42473*t42449;
            double t42474 = t42450-t42477;
            double t42475 = 1.0/(t42423*t42423*t42423*t42423);
            double t42476 = pow(t42466,1.0/3.0);
            double t42478 = t42474*t42476*(4.0/3.0);
            double t42479 = pow(t42468,1.0/3.0);
            double t42511 = t42474*t42479*(4.0/3.0);
            double t42480 = -t42511+t42478;
            double t42481 = 1.0/(t42423*t42423*t42423*t42423*t42423);
            double t42482 = t42465*t42465;
            double t42484 = 1.0/(t42433*t42433);
            double t42489 = 1.0/t42459;
            double t42490 = 1.0/(t42456*t42456);
            double t42491 = b4f*t42392*t42483*(2.0/3.0);
            double t42492 = b2f*c*t42443*(1.0/3.0);
            double t42493 = b1f*c*t42443*t42436*(1.0/6.0);
            double t42494 = b3f*c*t42443*t42426*(1.0/2.0);
            double t42495 = t42491+t42492+t42493+t42494;
            double t42496 = t42442*t42444*t42438*t42484;
            double t42497 = a1f*c*c0f*t42460*t42443*(2.0/3.0);
            double t42498 = t42444*t42444;
            double t42499 = 1.0/pow(t42425,3.0/2.0);
            double t42500 = b4p*t42435*t42392*(1.0E1/9.0);
            double t42501 = b2p*c*t42434*(4.0/9.0);
            double t42502 = b1p*c*t42434*t42436*(2.0/9.0);
            double t42503 = b3p*c*t42434*t42426*(2.0/3.0);
            double t42504 = b3p*t42435*t42436*t42392*(1.0/1.2E1);
            double t42505 = t42500+t42501+t42502+t42503+t42504-b1p*t42435*t42392*t42499*(1.0/3.6E1);
            double t42506 = 1.0/(t42433*t42433*t42433);
            double t42507 = t42442*t42506*t42438*t42498*2.0;
            double t42508 = t42495*t42495;
            double t42509 = 1.0/(t42441*t42441);
            double t42510 = 1.0/(t42433*t42433*t42433*t42433);
            double t42599 = t42462*t42490*t42495*t42489;
            double t42600 = a1p*c*c0p*t42443*t42463*(2.0/3.0);
            double t42512 = -t42600+t42496+t42497-t42599;
            double t42513 = t42473*2.0;
            double t42514 = 1.0/(t42423*t42423*t42423);
            double t42532 = t42514*t42449*2.0;
            double t42515 = t42513-t42532;
            double t42516 = t42474*t42474;
            double t42517 = a1p*c*c0p*t42434*t42463*(8.0/9.0);
            double t42518 = 1.0/(t42423*t42423*t42423*t42423*t42423*t42423);
            double t42519 = 1.0/d2fz0;
            double t42520 = 1.0/Aa;
            double t42521 = b1a*t42426;
            double t42522 = b3a*t42428;
            double t42523 = b4a*t42430*t42392;
            double t42524 = b2a*c*t42424;
            double t42525 = t42521+t42522+t42523+t42524;
            double t42526 = 1.0/t42525;
            double t42527 = t42520*t42526*(1.0/2.0);
            double t42528 = t42527+1.0;
            double t42529 = log(t42528);
            double t42530 = a1a*c*t42424;
            double t42531 = t42530+1.0;
            double t42533 = t42515*t42479*(4.0/3.0);
            double t42534 = 1.0/pow(t42466,2.0/3.0);
            double t42535 = t42516*t42534*(4.0/9.0);
            double t42536 = 1.0/pow(t42468,2.0/3.0);
            double t42537 = t42516*t42536*(4.0/9.0);
            double t42538 = t42533+t42535+t42537-t42515*t42476*(4.0/3.0);
            double t42539 = t42481*t42482*4.0;
            double t42551 = t42465*t42475*t42449*4.0;
            double t42540 = -t42551+t42539;
            double t42541 = 1.0/t42528;
            double t42542 = t42482*t42475;
            double t42543 = t42542-1.0;
            double t42544 = 1.0/(t42525*t42525);
            double t42545 = b4a*t42392*t42483*(2.0/3.0);
            double t42546 = b2a*c*t42443*(1.0/3.0);
            double t42547 = b1a*c*t42443*t42436*(1.0/6.0);
            double t42548 = b3a*c*t42443*t42426*(1.0/2.0);
            double t42549 = t42545+t42546+t42547+t42548;
            double t42550 = t42549*t42549;
            double t42552 = t42442*t42505*t42438*t42484;
            double t42553 = pow(2.0,1.0/3.0);
            double t42554 = t42553*2.0;
            double t42555 = t42554-2.0;
            double t42556 = a1f*c*t42388;
            double t42557 = t42556+1.0;
            double t42558 = b1f*t42390;
            double t42559 = b3f*t42391;
            double t42560 = b4f*t42392*t42393;
            double t42561 = b2f*c*t42388;
            double t42562 = t42560+t42561+t42558+t42559;
            double t42563 = 1.0/t42562;
            double t42564 = t42563*t42448*(1.0/2.0);
            double t42565 = t42564+1.0;
            double t42566 = 1.0/pow(rho_a[index],4.0/3.0);
            double t42568 = 1.0/pow(rho_a[index],5.0/3.0);
            double t42569 = 1.0/sqrt(t42389);
            double t42575 = b4f*t42392*t42568*(2.0/3.0);
            double t42576 = b2f*c*t42566*(1.0/3.0);
            double t42577 = b1f*c*t42566*t42569*(1.0/6.0);
            double t42578 = b3f*c*t42390*t42566*(1.0/2.0);
            double t42567 = t42575+t42576+t42577+t42578;
            double t42580 = b4p*t42392*t42568*(2.0/3.0);
            double t42581 = b2p*c*t42566*(1.0/3.0);
            double t42582 = b1p*c*t42566*t42569*(1.0/6.0);
            double t42583 = b3p*c*t42390*t42566*(1.0/2.0);
            double t42570 = t42580+t42581+t42582+t42583;
            double t42571 = 1.0/t42565;
            double t42572 = 1.0/pow(rho_a[index],7.0/3.0);
            double t42573 = 1.0/t42402;
            double t42574 = 1.0/pow(t42389,3.0/2.0);
            double t42579 = t42567*t42567;
            double t42584 = t42570*t42570;
            double t42585 = log(t42565);
            double t42586 = 1.0/(t42562*t42562);
            double t42587 = 1.0/(t42399*t42399);
            double t42588 = 1.0/(t42399*t42399*t42399);
            double t42589 = t42405*t42573*t42584*t42588*2.0;
            double t42590 = b4p*t42406*t42392*(1.0E1/9.0);
            double t42591 = b2p*c*t42572*(4.0/9.0);
            double t42592 = b3p*t42406*t42392*t42569*(1.0/1.2E1);
            double t42593 = b1p*c*t42572*t42569*(2.0/9.0);
            double t42594 = b3p*c*t42390*t42572*(2.0/3.0);
            double t42673 = b1p*t42406*t42392*t42574*(1.0/3.6E1);
            double t42595 = t42590+t42591+t42592-t42673+t42593+t42594;
            double t42596 = 1.0/(t42402*t42402);
            double t42597 = 1.0/(t42399*t42399*t42399*t42399);
            double t42598 = a1p*c*c0p*t42403*t42572*(8.0/9.0);
            double t42601 = t42551-t42539;
            double t42602 = t42510*t42509*t42438*t42394*t42498*(1.0/2.0);
            double t42603 = a1p*c*t42442*t42443*t42444*t42484*(2.0/3.0);
            double t42604 = gcab*t42417;
            double t42605 = t42604+1.0;
            double t42606 = 1.0/t42605;
            double t42607 = t42422*t42418;
            double t42608 = gcab*t42417*2.0;
            double t42609 = t42607+t42608+1.0;
            double t42610 = 1.0/t42609;
            double t42611 = t42600-t42496-t42497+t42599;
            double t42612 = t42405*t42570*t42573*t42587;
            double t42613 = a1f*c*c0f*t42566*t42585*(2.0/3.0);
            double t42615 = a1p*c*c0p*t42403*t42566*(2.0/3.0);
            double t42618 = t42571*t42557*t42567*t42586;
            double t42614 = t42612+t42613-t42615-t42618;
            double t42616 = c0f*t42557*t42585*2.0;
            double t42617 = c0p*t42403*t42405*2.0;
            double t42619 = t42614*t42447*t42555;
            double t42620 = 1.0/t42411;
            double t42621 = 1.0/t42416;
            double t42622 = t42616-t42617;
            double t42623 = 1.0/pow(rho_b[index],1.0/3.0);
            double t42624 = c*t42623;
            double t42625 = sqrt(t42624);
            double t42626 = pow(t42624,3.0/2.0);
            double t42627 = 1.0/pow(rho_b[index],2.0/3.0);
            double t42628 = b1p*t42625;
            double t42629 = b3p*t42626;
            double t42630 = b4p*t42392*t42627;
            double t42631 = b2p*c*t42623;
            double t42632 = t42630+t42631+t42628+t42629;
            double t42633 = 1.0/t42632;
            double t42634 = t42633*t42394*(1.0/2.0);
            double t42635 = t42634+1.0;
            double t42636 = log(t42635);
            double t42637 = a1p*c*t42623;
            double t42638 = t42637+1.0;
            double t42639 = c0p*t42636*t42638*2.0;
            double t42640 = t42470*t42464*t42482*t42447*t42475;
            double t42641 = Aa*t42531*t42470*t42543*t42447*t42519*t42529*2.0;
            double t42642 = 1.0/(t42605*t42605);
            double t42643 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t42644 = gamma_aa[index]*gcab*t42413*(8.0/3.0);
            double t42645 = gamma_aa[index]*t42413*t42417*t42418*(8.0/3.0);
            double t42646 = t42644+t42645;
            double t42647 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t42648 = 1.0/(t42609*t42609);
            double t42649 = gx*gx;
            double t42650 = gamma_aa[index]*gx*t42406;
            double t42651 = t42650+1.0;
            double t42656 = gamma_aa[index]*gx*t42413*(1.6E1/3.0);
            double t42657 = t42407*t42409*t42649*(1.6E1/3.0);
            double t42652 = t42656+t42657;
            double t42653 = gamma_aa[index]*gx*t42406*2.0;
            double t42654 = t42412*t42407*t42649;
            double t42655 = t42653+t42654+1.0;
            double t42658 = 1.0/(t42655*t42655);
            double t42659 = 1.0/t42651;
            double t42660 = 1.0/t42655;
            double t42661 = 1.0/(t42651*t42651);
            double t42662 = ccaa1*gamma_aa[index]*gcaa*t42620*t42406;
            double t42663 = ccaa2*t42412*t42621*t42407*t42408;
            double t42664 = ccaa0+t42662+t42663;
            double t42665 = 1.0/(t42562*t42562*t42562);
            double t42666 = b4f*t42406*t42392*(1.0E1/9.0);
            double t42667 = b2f*c*t42572*(4.0/9.0);
            double t42668 = b3f*t42406*t42392*t42569*(1.0/1.2E1);
            double t42669 = b1f*c*t42572*t42569*(2.0/9.0);
            double t42670 = b3f*c*t42390*t42572*(2.0/3.0);
            double t42671 = t42670+t42666+t42667+t42668+t42669-b1f*t42406*t42392*t42574*(1.0/3.6E1);
            double t42672 = t42571*t42671*t42557*t42586;
            double t42674 = t42405*t42573*t42595*t42587;
            double t42675 = 1.0/(t42565*t42565);
            double t42676 = 1.0/(t42562*t42562*t42562*t42562);
            double t42677 = t42448*t42557*t42675*t42676*t42579*(1.0/2.0);
            double t42678 = t42405*t42394*t42584*t42596*t42597*(1.0/2.0);
            double t42679 = a1f*c*t42571*t42566*t42567*t42586*(2.0/3.0);
            double t42680 = a1p*c*t42570*t42573*t42566*t42587*(2.0/3.0);
            double t42681 = t42622*t42447*t42555;
            double t42682 = t42617+t42681;
            double t42683 = 1.0/pow(rho_a[index],1.0E1);
            double t42684 = 1.0/(t42411*t42411);
            double t42685 = gamma_aa[index]*gcaa*t42413*(1.6E1/3.0);
            double t42686 = t42407*t42408*t42409*(1.6E1/3.0);
            double t42687 = t42685+t42686;
            double t42688 = 1.0/(t42416*t42416);
            double t42689 = ccaa1*gamma_aa[index]*gcaa*t42413*t42620*(8.0/3.0);
            double t42690 = ccaa2*t42621*t42407*t42408*t42409*(1.6E1/3.0);
            double t42691 = t42690+t42689-ccaa1*t42407*t42408*t42409*t42684*(8.0/3.0)-ccaa2*t42412*t42407*t42408* \
               t42687*t42688;
            double t42692 = -t42612+t42615+t42619;
            v_rho_a_rho_a_[index] = t42664*t42692*2.0+t42691*(t42617+t42447*t42555*(t42616-c0p*t42403*t42405* \
               2.0))*2.0-(ccab0+ccab1*gcab*t42417*t42606+ccab2*t42610*t42422*t42418)*(-t42423*(t42602+t42603-t42507+ \
               t42552-t42517-t42470*t42482*t42447*t42475*(t42602+t42603-t42507+t42552-t42517+t42462*t42508*1.0/(t42456* \
               t42456*t42456)*t42489*2.0-t42462*t42490*t42489*(b2f*c*t42434*(4.0/9.0)+b4f*t42435*t42392*(1.0E1/9.0) \
               +b1f*c*t42434*t42436*(2.0/9.0)+b3f*c*t42434*t42426*(2.0/3.0)-b1f*t42435*t42392*t42499*(1.0/3.6E1)+ \
               b3f*t42435*t42436*t42392*(1.0/1.2E1))-t42462*t42508*1.0/(t42456*t42456*t42456*t42456)*t42448*1.0/(t42459* \
               t42459)*(1.0/2.0)+a1f*c*c0f*t42460*t42434*(8.0/9.0)-a1f*c*t42443*t42490*t42495*t42489*(2.0/3.0))-t42512* \
               t42470*t42481*t42482*t42447*8.0+t42512*t42480*t42482*t42447*t42475*2.0-t42470*t42464*t42482*t42518* \
               t42447*2.0E1+t42480*t42481*t42464*t42482*t42447*8.0-t42470*t42464*t42447*t42465*t42475*1.2E1-t42464* \
               t42482*t42447*t42475*t42538+t42512*t42470*t42447*t42465*t42475*t42449*8.0+t42470*t42481*t42464*t42447* \
               t42465*t42449*3.2E1-t42480*t42464*t42447*t42465*t42475*t42449*8.0+Aa*t42531*t42540*t42480*t42447*t42519* \
               t42529*4.0-Aa*t42531*t42543*t42447*t42519*t42529*t42538*2.0-Aa*t42531*t42470*t42447*t42519*t42529* \
               (t42482*t42518*2.0E1+t42465*t42475*1.2E1-t42481*t42465*t42449*3.2E1)*2.0+t42531*t42540*t42541*t42470* \
               t42544*t42447*t42519*t42549*2.0-t42531*t42541*t42480*t42543*t42544*t42447*t42519*t42549*2.0-t42531* \
               t42541*t42550*t42470*1.0/(t42525*t42525*t42525)*t42543*t42447*t42519*2.0+t42531*t42541*t42470*t42543* \
               t42544*t42447*t42519*(b2a*c*t42434*(4.0/9.0)+b4a*t42435*t42392*(1.0E1/9.0)+b1a*c*t42434*t42436*(2.0/ \
               9.0)+b3a*c*t42434*t42426*(2.0/3.0)-b1a*t42435*t42392*t42499*(1.0/3.6E1)+b3a*t42435*t42436*t42392*(1.0/ \
               1.2E1))+Aa*a1a*c*t42601*t42443*t42470*t42447*t42519*t42529*(4.0/3.0)-Aa*a1a*c*t42434*t42470*t42543* \
               t42447*t42519*t42529*(8.0/9.0)+Aa*a1a*c*t42443*t42480*t42543*t42447*t42519*t42529*(4.0/3.0)+t42520* \
               t42531*t42550*t42470*1.0/(t42525*t42525*t42525*t42525)*t42543*t42447*t42519*1.0/(t42528*t42528)*(1.0/ \
               2.0)+a1a*c*t42541*t42443*t42470*t42543*t42544*t42447*t42519*t42549*(2.0/3.0))+rho_a[index]*(t42680+ \
               t42674+t42678-t42589-t42598+t42447*t42555*(t42672+t42677+t42589+t42598+t42679-t42405*t42573*t42595* \
               t42587-t42571*t42557*t42665*t42579*2.0-a1f*c*c0f*t42572*t42585*(8.0/9.0)-t42405*t42394*t42584*t42596* \
               t42597*(1.0/2.0)-a1p*c*t42570*t42573*t42566*t42587*(2.0/3.0)))+t42614*t42447*t42555*2.0+t42442*t42444* \
               t42438*t42484*2.0-t42405*t42570*t42573*t42587*2.0+a1p*c*c0p*t42403*t42566*(4.0/3.0)-a1p*c*c0p*t42443* \
               t42463*(4.0/3.0)+t42611*t42470*t42482*t42447*t42475*2.0-t42470*t42481*t42464*t42482*t42447*8.0+t42480* \
               t42464*t42482*t42447*t42475*2.0+t42470*t42464*t42447*t42465*t42475*t42449*8.0+Aa*t42601*t42531*t42470* \
               t42447*t42519*t42529*4.0+Aa*t42531*t42480*t42543*t42447*t42519*t42529*4.0+t42531*t42541*t42470*t42543* \
               t42544*t42447*t42519*t42549*2.0-Aa*a1a*c*t42443*t42470*t42543*t42447*t42519*t42529*(4.0/3.0))+(rho_a[index]* \
               t42682+rho_b[index]*(t42639-t42447*t42555*(t42639-c0f*log((t42448*(1.0/2.0))/(b1f*t42625+b3f*t42626+ \
               b2f*c*t42623+b4f*t42392*t42627)+1.0)*(a1f*c*t42623+1.0)*2.0))-t42423*(t42640+t42641+t42472))*(-ccab2* \
               t42422*t42418*t42648*(gamma_aa[index]*gcab*t42647*(8.8E1/9.0)+t42407*t42418*t42643*(3.2E1/9.0)+gamma_aa[index]* \
               t42417*t42418*t42647*(8.8E1/9.0))+ccab2*t42422*t42418*1.0/(t42609*t42609*t42609)*(t42646*t42646)*2.0+ \
               ccab1*gamma_aa[index]*gcab*t42606*t42647*(4.4E1/9.0)+ccab2*t42610*t42407*t42418*t42643*(3.2E1/9.0) \
               -ccab1*t42407*t42642*t42418*t42643*(3.2E1/9.0)+ccab2*gamma_aa[index]*t42610*t42417*t42418*t42647*(8.8E1/ \
               9.0)-ccab1*gamma_aa[index]*t42417*t42642*t42418*t42647*(4.4E1/9.0)-ccab2*gamma_aa[index]*t42413*t42417* \
               t42418*t42646*t42648*(1.6E1/3.0)+ccab1*gcab*t42407*1.0/(t42605*t42605*t42605)*t42417*t42418*t42643* \
               (3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t42413*t42606*(4.0/3.0)-ccab2*t42422*t42418*t42646*t42648+ \
               ccab2*gamma_aa[index]*t42610*t42413*t42417*t42418*(8.0/3.0)-ccab1*gamma_aa[index]*t42413*t42417*t42642* \
               t42418*(4.0/3.0))*(t42640+t42641+t42472-t42617+rho_a[index]*t42692+t42423*(-t42600+t42496+t42611*t42470* \
               t42482*t42447*t42475-t42470*t42481*t42464*t42482*t42447*4.0+t42480*t42464*t42482*t42447*t42475+t42470* \
               t42464*t42447*t42465*t42475*t42449*4.0+Aa*t42601*t42531*t42470*t42447*t42519*t42529*2.0+Aa*t42531* \
               t42480*t42543*t42447*t42519*t42529*2.0+t42531*t42541*t42470*t42543*t42544*t42447*t42519*t42549-Aa* \
               a1a*c*t42443*t42470*t42543*t42447*t42519*t42529*(2.0/3.0))-t42622*t42447*t42555)*2.0+c0*t42393*(cx0+ \
               cx1*gamma_aa[index]*gx*t42406*t42659+cx2*t42412*t42407*t42660*t42649)*(4.0/9.0)-rho_a[index]*t42682* \
               (ccaa1*gamma_aa[index]*gcaa*t42620*t42647*(8.8E1/9.0)+ccaa2*t42621*t42407*t42408*t42643*(3.04E2/9.0) \
               -ccaa1*t42407*t42408*t42643*t42684*2.4E1-ccaa2*t42407*t42408*t42409*t42687*t42688*(3.2E1/3.0)-ccaa2* \
               t42412*t42407*t42408*t42688*(gamma_aa[index]*gcaa*t42647*(1.76E2/9.0)+t42407*t42408*t42643*(3.04E2/ \
               9.0))+ccaa2*t42412*t42407*1.0/(t42416*t42416*t42416)*t42408*(t42687*t42687)*2.0+ccaa1*gamma_aa[index]* \
               gcaa*1.0/(t42411*t42411*t42411)*t42407*t42408*t42683*(1.28E2/9.0))+rho_a[index]*t42664*(t42680+t42674+ \
               t42678-t42589-t42598-t42447*t42555*(t42680-t42672+t42674-t42677+t42678-t42589-t42598-t42679+t42571* \
               t42557*t42665*t42579*2.0+a1f*c*c0f*t42572*t42585*(8.0/9.0)))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t42647*t42659*(8.8E1/9.0)-cx1*t42407*t42643*t42661*t42649*2.4E1+cx2*t42407*t42660*t42643*t42649* \
               (3.04E2/9.0)-cx2*t42407*t42409*t42652*t42649*t42658*(3.2E1/3.0)-cx2*t42412*t42407*t42649*t42658*(gamma_aa[index]* \
               gx*t42647*(1.76E2/9.0)+t42407*t42643*t42649*(3.04E2/9.0))+cx2*t42412*t42407*(t42652*t42652)*1.0/(t42655* \
               t42655*t42655)*t42649*2.0+cx1*gamma_aa[index]*gx*t42407*1.0/(t42651*t42651*t42651)*t42683*t42649*(1.28E2/ \
               9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t42413*t42659*(8.0/3.0)-cx1*t42407*t42409* \
               t42661*t42649*(8.0/3.0)+cx2*t42407*t42660*t42409*t42649*(1.6E1/3.0)-cx2*t42412*t42407*t42652*t42649* \
               t42658)*(8.0/3.0)-rho_a[index]*t42691*t42692*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t44921 = 1.0/pow(rho_a[index],1.0/3.0);
            double t44922 = c*t44921;
            double t44923 = sqrt(t44922);
            double t44924 = pow(t44922,3.0/2.0);
            double t44925 = c*c;
            double t44926 = 1.0/pow(rho_a[index],2.0/3.0);
            double t44927 = 1.0/c0p;
            double t44928 = b1p*t44923;
            double t44929 = b3p*t44924;
            double t44930 = b4p*t44925*t44926;
            double t44931 = b2p*c*t44921;
            double t44932 = t44930+t44931+t44928+t44929;
            double t44933 = 1.0/t44932;
            double t44934 = t44933*t44927*(1.0/2.0);
            double t44935 = t44934+1.0;
            double t44936 = log(t44935);
            double t44937 = a1p*c*t44921;
            double t44938 = t44937+1.0;
            double t44939 = 1.0/pow(rho_a[index],8.0/3.0);
            double t44940 = gamma_aa[index]*gamma_aa[index];
            double t44941 = gcaa*gcaa;
            double t44942 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t44943 = gamma_aa[index]*gcaa*t44939;
            double t44944 = t44943+1.0;
            double t44945 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t44946 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t44947 = gamma_aa[index]*gcaa*t44939*2.0;
            double t44948 = t44940*t44941*t44945;
            double t44949 = t44947+t44948+1.0;
            double t44950 = pow(2.0,1.0/3.0);
            double t44951 = t44950*2.0;
            double t44952 = t44951-2.0;
            double t44953 = two_13*2.0;
            double t44954 = t44953-2.0;
            double t44955 = 1.0/t44954;
            double t44956 = a1f*c*t44921;
            double t44957 = t44956+1.0;
            double t44958 = 1.0/c0f;
            double t44959 = b1f*t44923;
            double t44960 = b3f*t44924;
            double t44961 = b4f*t44925*t44926;
            double t44962 = b2f*c*t44921;
            double t44963 = t44960+t44961+t44962+t44959;
            double t44964 = 1.0/t44963;
            double t44965 = t44964*t44958*(1.0/2.0);
            double t44966 = t44965+1.0;
            double t44967 = 1.0/pow(rho_a[index],4.0/3.0);
            double t44968 = 1.0/pow(rho_a[index],5.0/3.0);
            double t44969 = 1.0/sqrt(t44922);
            double t44970 = log(t44966);
            double t44971 = 1.0/t44935;
            double t44972 = 1.0/(t44932*t44932);
            double t44973 = b4p*t44925*t44968*(2.0/3.0);
            double t44974 = b2p*c*t44967*(1.0/3.0);
            double t44975 = b1p*c*t44967*t44969*(1.0/6.0);
            double t44976 = b3p*c*t44923*t44967*(1.0/2.0);
            double t44977 = t44973+t44974+t44975+t44976;
            double t44978 = t44971*t44972*t44938*t44977;
            double t44979 = 1.0/t44944;
            double t44980 = 1.0/t44949;
            double t44981 = gx*gx;
            double t44982 = gamma_aa[index]*gx*t44939;
            double t44983 = t44982+1.0;
            double t44984 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t44989 = gamma_aa[index]*gx*t44946*(1.6E1/3.0);
            double t44990 = t44940*t44942*t44981*(1.6E1/3.0);
            double t44985 = t44990+t44989;
            double t44986 = gamma_aa[index]*gx*t44939*2.0;
            double t44987 = t44940*t44945*t44981;
            double t44988 = t44986+t44987+1.0;
            double t44991 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t44992 = 1.0/(t44988*t44988);
            double t44993 = 1.0/t44983;
            double t44994 = 1.0/t44988;
            double t44995 = 1.0/(t44983*t44983);
            double t44996 = ccaa1*gamma_aa[index]*gcaa*t44939*t44979;
            double t44997 = ccaa2*t44940*t44941*t44980*t44945;
            double t44998 = ccaa0+t44996+t44997;
            double t44999 = 1.0/t44966;
            double t45000 = b4f*t44925*t44968*(2.0/3.0);
            double t45001 = b2f*c*t44967*(1.0/3.0);
            double t45002 = b1f*c*t44967*t44969*(1.0/6.0);
            double t45003 = b3f*c*t44923*t44967*(1.0/2.0);
            double t45004 = t45000+t45001+t45002+t45003;
            double t45005 = 1.0/(t44963*t44963);
            double t45006 = 1.0/pow(rho_a[index],7.0/3.0);
            double t45007 = 1.0/pow(t44922,3.0/2.0);
            double t45008 = t45004*t45004;
            double t45009 = t44977*t44977;
            double t45010 = 1.0/(t44932*t44932*t44932);
            double t45011 = t44971*t44938*t45010*t45009*2.0;
            double t45012 = b4p*t44925*t44939*(1.0E1/9.0);
            double t45013 = b2p*c*t45006*(4.0/9.0);
            double t45014 = b3p*t44925*t44939*t44969*(1.0/1.2E1);
            double t45015 = b1p*c*t44969*t45006*(2.0/9.0);
            double t45016 = b3p*c*t44923*t45006*(2.0/3.0);
            double t45017 = t45012+t45013+t45014+t45015+t45016-b1p*t44925*t44939*t45007*(1.0/3.6E1);
            double t45018 = 1.0/(t44935*t44935);
            double t45019 = 1.0/(t44932*t44932*t44932*t44932);
            double t45020 = a1p*c*c0p*t44936*t45006*(8.0/9.0);
            double t45021 = c0f*t44970*t44957*2.0;
            double t45022 = c0p*t44936*t44938*2.0;
            double t45023 = 1.0/pow(rho_a[index],1.0E1);
            double t45024 = 1.0/(t44944*t44944);
            double t45025 = gamma_aa[index]*gcaa*t44946*(1.6E1/3.0);
            double t45026 = t44940*t44941*t44942*(1.6E1/3.0);
            double t45027 = t45025+t45026;
            double t45028 = 1.0/(t44949*t44949);
            double t45029 = a1f*c*c0f*t44970*t44967*(2.0/3.0);
            double t45030 = a1p*c*c0p*t44936*t44967*(2.0/3.0);
            double t45031 = ccaa1*gamma_aa[index]*gcaa*t44946*t44979*(8.0/3.0);
            double t45032 = ccaa2*t44940*t44941*t44942*t44980*(1.6E1/3.0);
            double t45033 = t45031+t45032-ccaa1*t44940*t44941*t44942*t45024*(8.0/3.0)-ccaa2*t44940*t44941*t44945* \
               t45027*t45028;
            v_rho_a_rho_a_[index] = t45033*(t45022+t44952*t44955*(t45021-c0p*t44936*t44938*2.0))*2.0+t44998*(- \
               t44978+t45030+t44952*t44955*(t44978+t45029-t44957*t44999*t45004*t45005-a1p*c*c0p*t44936*t44967*(2.0/ \
               3.0)))*2.0+c0*t44926*(cx0+cx1*gamma_aa[index]*gx*t44939*t44993+cx2*t44940*t44945*t44981*t44994)*(4.0/ \
               9.0)-rho_a[index]*(t45022+t44952*t44955*(t45021-t45022))*(ccaa1*gamma_aa[index]*gcaa*t44991*t44979* \
               (8.8E1/9.0)+ccaa2*t44940*t44941*t44980*t44984*(3.04E2/9.0)-ccaa1*t44940*t44941*t44984*t45024*2.4E1- \
               ccaa2*t44940*t44941*t44942*t45027*t45028*(3.2E1/3.0)-ccaa2*t44940*t44941*t44945*t45028*(gamma_aa[index]* \
               gcaa*t44991*(1.76E2/9.0)+t44940*t44941*t44984*(3.04E2/9.0))+ccaa2*t44940*t44941*t44945*1.0/(t44949* \
               t44949*t44949)*(t45027*t45027)*2.0+ccaa1*gamma_aa[index]*gcaa*t44940*t44941*1.0/(t44944*t44944*t44944) \
               *t45023*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t44991*t44993*(8.8E1/9.0) \
               -cx1*t44940*t44981*t44984*t44995*2.4E1+cx2*t44940*t44981*t44984*t44994*(3.04E2/9.0)-cx2*t44940*t44942* \
               t44981*t44992*t44985*(3.2E1/3.0)-cx2*t44940*t44945*t44981*t44992*(gamma_aa[index]*gx*t44991*(1.76E2/ \
               9.0)+t44940*t44981*t44984*(3.04E2/9.0))+cx2*t44940*t44945*t44981*(t44985*t44985)*1.0/(t44988*t44988* \
               t44988)*2.0+cx1*gamma_aa[index]*gx*t44940*t44981*1.0/(t44983*t44983*t44983)*t45023*(1.28E2/9.0))+rho_a[index]* \
               t44998*(-t45011-t45020+t44952*t44955*(t45011+t45020-t44971*t44972*t44938*t45017-1.0/(t44963*t44963* \
               t44963)*t44957*t44999*t45008*2.0+t44957*t44999*t45005*(b2f*c*t45006*(4.0/9.0)+b4f*t44925*t44939*(1.0E1/ \
               9.0)+b1f*c*t44969*t45006*(2.0/9.0)+b3f*c*t44923*t45006*(2.0/3.0)-b1f*t44925*t44939*t45007*(1.0/3.6E1) \
               +b3f*t44925*t44939*t44969*(1.0/1.2E1))+1.0/(t44963*t44963*t44963*t44963)*t44957*1.0/(t44966*t44966) \
               *t44958*t45008*(1.0/2.0)-a1f*c*c0f*t44970*t45006*(8.0/9.0)-t44927*t44938*t45009*t45018*t45019*(1.0/ \
               2.0)+a1f*c*t44967*t44999*t45004*t45005*(2.0/3.0)-a1p*c*t44971*t44972*t44967*t44977*(2.0/3.0))+t44971* \
               t44972*t44938*t45017+t44927*t44938*t45009*t45018*t45019*(1.0/2.0)+a1p*c*t44971*t44972*t44967*t44977* \
               (2.0/3.0))-rho_a[index]*t45033*(-t44978+t45030+t44952*t44955*(t44978-t45030+t45029-t44957*t44999*t45004* \
               t45005))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t44946*t44993*(8.0/3.0)-cx1*t44940* \
               t44942*t44981*t44995*(8.0/3.0)+cx2*t44940*t44942*t44981*t44994*(1.6E1/3.0)-cx2*t44940*t44945*t44981* \
               t44992*t44985)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t42694 = 1.0/pow(rho_a[index],1.0/3.0);
            double t42695 = c*t42694;
            double t42696 = sqrt(t42695);
            double t42697 = pow(t42695,3.0/2.0);
            double t42698 = c*c;
            double t42699 = 1.0/pow(rho_a[index],2.0/3.0);
            double t42700 = 1.0/c0p;
            double t42701 = b1p*t42696;
            double t42702 = b3p*t42697;
            double t42703 = b4p*t42698*t42699;
            double t42704 = b2p*c*t42694;
            double t42705 = t42701+t42702+t42703+t42704;
            double t42706 = 1.0/t42705;
            double t42707 = t42700*t42706*(1.0/2.0);
            double t42708 = t42707+1.0;
            double t42709 = log(t42708);
            double t42710 = a1p*c*t42694;
            double t42711 = t42710+1.0;
            double t42712 = pow(2.0,1.0/3.0);
            double t42713 = t42712*2.0;
            double t42714 = t42713-2.0;
            double t42715 = two_13*2.0;
            double t42716 = t42715-2.0;
            double t42717 = 1.0/t42716;
            double t42718 = 1.0/c0f;
            double t42719 = 1.0/pow(rho_b[index],1.0/3.0);
            double t42720 = c*t42719;
            double t42721 = sqrt(t42720);
            double t42722 = pow(t42720,3.0/2.0);
            double t42723 = 1.0/pow(rho_b[index],2.0/3.0);
            double t42724 = b1p*t42721;
            double t42725 = b3p*t42722;
            double t42726 = b4p*t42723*t42698;
            double t42727 = b2p*c*t42719;
            double t42728 = t42724+t42725+t42726+t42727;
            double t42729 = 1.0/t42728;
            double t42730 = t42700*t42729*(1.0/2.0);
            double t42731 = t42730+1.0;
            double t42732 = log(t42731);
            double t42733 = a1p*c*t42719;
            double t42734 = t42733+1.0;
            double t42735 = c0p*t42732*t42734*2.0;
            double t42736 = rho_a[index]+rho_b[index];
            double t42737 = 1.0/pow(t42736,1.0/3.0);
            double t42738 = c*t42737;
            double t42739 = sqrt(t42738);
            double t42740 = pow(t42738,3.0/2.0);
            double t42741 = 1.0/pow(t42736,2.0/3.0);
            double t42742 = b1p*t42739;
            double t42743 = b3p*t42740;
            double t42744 = b4p*t42741*t42698;
            double t42745 = b2p*c*t42737;
            double t42746 = t42742+t42743+t42744+t42745;
            double t42747 = 1.0/t42746;
            double t42748 = t42700*t42747*(1.0/2.0);
            double t42749 = t42748+1.0;
            double t42750 = log(t42749);
            double t42751 = a1p*c*t42737;
            double t42752 = t42751+1.0;
            double t42753 = c0p*t42750*t42752*2.0;
            double t42754 = rho_a[index]-rho_b[index];
            double t42755 = t42754*t42754;
            double t42756 = 1.0/t42736;
            double t42757 = t42754*t42756;
            double t42758 = 1.0/(t42736*t42736*t42736*t42736);
            double t42759 = t42755*t42755;
            double t42760 = t42757+1.0;
            double t42761 = pow(t42760,4.0/3.0);
            double t42762 = -t42757+1.0;
            double t42763 = pow(t42762,4.0/3.0);
            double t42764 = t42761+t42763-2.0;
            double t42765 = gcab*gcab;
            double t42766 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t42767 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t42768 = 1.0/pow(rho_a[index],8.0/3.0);
            double t42769 = gamma_aa[index]*t42768*(1.0/2.0);
            double t42770 = 1.0/pow(rho_b[index],8.0/3.0);
            double t42771 = gamma_bb[index]*t42770*(1.0/2.0);
            double t42772 = t42771+t42769;
            double t42773 = t42772*t42772;
            double t42774 = t42773*t42765;
            double t42775 = gcab*t42772*2.0;
            double t42776 = t42774+t42775+1.0;
            double t42777 = gamma_aa[index]*gcab*t42766*(8.0/3.0);
            double t42778 = gamma_aa[index]*t42772*t42765*t42766*(8.0/3.0);
            double t42779 = t42777+t42778;
            double t42780 = gamma_bb[index]*gcab*t42767*(8.0/3.0);
            double t42781 = gamma_bb[index]*t42772*t42765*t42767*(8.0/3.0);
            double t42782 = t42780+t42781;
            double t42783 = 1.0/(t42776*t42776);
            double t42784 = gcab*t42772;
            double t42785 = t42784+1.0;
            double t42786 = 1.0/(t42785*t42785);
            double t42787 = 1.0/t42776;
            double t42788 = 1.0/pow(t42736,4.0/3.0);
            double t42789 = b1f*t42739;
            double t42790 = b3f*t42740;
            double t42791 = b4f*t42741*t42698;
            double t42792 = b2f*c*t42737;
            double t42793 = t42790+t42791+t42792+t42789;
            double t42794 = 1.0/t42793;
            double t42795 = t42718*t42794*(1.0/2.0);
            double t42796 = t42795+1.0;
            double t42797 = log(t42796);
            double t42798 = a1f*c*t42737;
            double t42799 = t42798+1.0;
            double t42801 = c0f*t42797*t42799*2.0;
            double t42800 = -t42801+t42753;
            double t42802 = 1.0/(t42736*t42736);
            double t42830 = t42802*t42754;
            double t42803 = -t42830+t42756;
            double t42804 = t42801-t42753;
            double t42805 = 1.0/pow(t42736,5.0/3.0);
            double t42806 = 1.0/sqrt(t42738);
            double t42807 = 1.0/t42749;
            double t42808 = 1.0/(t42746*t42746);
            double t42809 = b4p*t42805*t42698*(2.0/3.0);
            double t42810 = b2p*c*t42788*(1.0/3.0);
            double t42811 = b1p*c*t42806*t42788*(1.0/6.0);
            double t42812 = b3p*c*t42739*t42788*(1.0/2.0);
            double t42813 = t42810+t42811+t42812+t42809;
            double t42814 = t42813*t42752*t42807*t42808;
            double t42815 = 1.0/d2fz0;
            double t42816 = 1.0/Aa;
            double t42817 = b1a*t42739;
            double t42818 = b3a*t42740;
            double t42819 = b4a*t42741*t42698;
            double t42820 = b2a*c*t42737;
            double t42821 = t42820+t42817+t42818+t42819;
            double t42822 = 1.0/t42821;
            double t42823 = t42822*t42816*(1.0/2.0);
            double t42824 = t42823+1.0;
            double t42825 = log(t42824);
            double t42826 = a1a*c*t42737;
            double t42827 = t42826+1.0;
            double t42828 = 1.0/(t42736*t42736*t42736*t42736*t42736);
            double t42829 = pow(t42760,1.0/3.0);
            double t42831 = t42803*t42829*(4.0/3.0);
            double t42832 = pow(t42762,1.0/3.0);
            double t42912 = t42803*t42832*(4.0/3.0);
            double t42833 = t42831-t42912;
            double t42834 = t42758*t42759;
            double t42835 = t42834-1.0;
            double t42836 = a1f*c*t42694;
            double t42837 = t42836+1.0;
            double t42838 = b1f*t42696;
            double t42839 = b3f*t42697;
            double t42840 = b4f*t42698*t42699;
            double t42841 = b2f*c*t42694;
            double t42842 = t42840+t42841+t42838+t42839;
            double t42843 = 1.0/t42842;
            double t42844 = t42843*t42718*(1.0/2.0);
            double t42845 = t42844+1.0;
            double t42846 = 1.0/pow(rho_a[index],4.0/3.0);
            double t42847 = 1.0/pow(rho_a[index],5.0/3.0);
            double t42848 = 1.0/sqrt(t42695);
            double t42849 = log(t42845);
            double t42850 = 1.0/t42708;
            double t42851 = 1.0/(t42705*t42705);
            double t42852 = b4p*t42847*t42698*(2.0/3.0);
            double t42853 = b2p*c*t42846*(1.0/3.0);
            double t42854 = b1p*c*t42846*t42848*(1.0/6.0);
            double t42855 = b3p*c*t42846*t42696*(1.0/2.0);
            double t42856 = t42852+t42853+t42854+t42855;
            double t42857 = t42711*t42850*t42851*t42856;
            double t42858 = c0f*t42837*t42849*2.0;
            double t42859 = c0p*t42711*t42709*2.0;
            double t42860 = Aa*t42815*t42717*t42825*t42835*t42764*t42827*2.0;
            double t42861 = 1.0/t42785;
            double t42862 = t42804*t42717*t42764*t42828*t42759*4.0;
            double t42863 = t42830+t42756;
            double t42864 = 1.0/t42796;
            double t42865 = 1.0/(t42793*t42793);
            double t42866 = b4f*t42805*t42698*(2.0/3.0);
            double t42867 = b2f*c*t42788*(1.0/3.0);
            double t42868 = b1f*c*t42806*t42788*(1.0/6.0);
            double t42869 = b3f*c*t42739*t42788*(1.0/2.0);
            double t42870 = t42866+t42867+t42868+t42869;
            double t42871 = a1f*c*c0f*t42788*t42797*(2.0/3.0);
            double t42872 = a1p*c*c0p*t42750*t42788*(2.0/3.0);
            double t42873 = t42828*t42759*4.0;
            double t42874 = t42832*t42863*(4.0/3.0);
            double t42910 = t42863*t42829*(4.0/3.0);
            double t42875 = -t42910+t42874;
            double t42876 = 1.0/t42824;
            double t42877 = 1.0/(t42821*t42821);
            double t42878 = b4a*t42805*t42698*(2.0/3.0);
            double t42879 = b2a*c*t42788*(1.0/3.0);
            double t42880 = b1a*c*t42806*t42788*(1.0/6.0);
            double t42881 = b3a*c*t42739*t42788*(1.0/2.0);
            double t42882 = t42880+t42881+t42878+t42879;
            double t42883 = Aa*a1a*c*t42815*t42717*t42825*t42835*t42764*t42788*(2.0/3.0);
            double t42884 = a1f*c*t42719;
            double t42885 = t42884+1.0;
            double t42886 = b1f*t42721;
            double t42887 = b3f*t42722;
            double t42888 = b4f*t42723*t42698;
            double t42889 = b2f*c*t42719;
            double t42890 = t42886+t42887+t42888+t42889;
            double t42891 = 1.0/t42890;
            double t42892 = t42718*t42891*(1.0/2.0);
            double t42893 = t42892+1.0;
            double t42894 = 1.0/pow(rho_b[index],4.0/3.0);
            double t42895 = 1.0/pow(rho_b[index],5.0/3.0);
            double t42896 = 1.0/sqrt(t42720);
            double t42897 = log(t42893);
            double t42898 = 1.0/t42731;
            double t42899 = 1.0/(t42728*t42728);
            double t42900 = b4p*t42895*t42698*(2.0/3.0);
            double t42901 = b2p*c*t42894*(1.0/3.0);
            double t42902 = b1p*c*t42894*t42896*(1.0/6.0);
            double t42903 = b3p*c*t42721*t42894*(1.0/2.0);
            double t42904 = t42900+t42901+t42902+t42903;
            double t42905 = t42904*t42734*t42898*t42899;
            double t42906 = t42735-c0f*t42885*t42897*2.0;
            double t42907 = t42804*t42717*t42764*t42758*t42759;
            double t42908 = 1.0/pow(t42736,7.0/3.0);
            double t42909 = 1.0/pow(t42736,8.0/3.0);
            double t42911 = t42910-t42874;
            double t42928 = t42870*t42864*t42865*t42799;
            double t42913 = t42814+t42871-t42872-t42928;
            double t42914 = t42813*t42813;
            double t42915 = 1.0/pow(t42738,3.0/2.0);
            double t42916 = b4p*t42909*t42698*(1.0E1/9.0);
            double t42917 = b2p*c*t42908*(4.0/9.0);
            double t42918 = b1p*c*t42806*t42908*(2.0/9.0);
            double t42919 = b3p*c*t42908*t42739*(2.0/3.0);
            double t42920 = b3p*t42806*t42909*t42698*(1.0/1.2E1);
            double t42921 = t42920+t42916+t42917+t42918+t42919-b1p*t42915*t42909*t42698*(1.0/3.6E1);
            double t42922 = t42921*t42752*t42807*t42808;
            double t42923 = 1.0/(t42746*t42746*t42746);
            double t42924 = t42870*t42870;
            double t42925 = 1.0/(t42749*t42749);
            double t42926 = 1.0/(t42746*t42746*t42746*t42746);
            double t42927 = t42700*t42752*t42914*t42925*t42926*(1.0/2.0);
            double t42929 = 1.0/(t42736*t42736*t42736);
            double t42930 = a1p*c*t42813*t42807*t42808*t42788*(2.0/3.0);
            double t42931 = 1.0/(t42736*t42736*t42736*t42736*t42736*t42736);
            double t42932 = t42754*t42755*t42758*4.0;
            double t42933 = t42932+t42873;
            double t42934 = t42832*t42754*t42929*(8.0/3.0);
            double t42935 = 1.0/pow(t42760,2.0/3.0);
            double t42936 = t42803*t42863*t42935*(4.0/9.0);
            double t42937 = 1.0/pow(t42762,2.0/3.0);
            double t42938 = t42803*t42863*t42937*(4.0/9.0);
            double t42939 = t42934+t42936+t42938-t42754*t42829*t42929*(8.0/3.0);
            double t42940 = t42932-t42873;
            double t42941 = t42882*t42882;
            double t42942 = Aa*t42815*t42717*t42825*t42933*t42764*t42827*2.0;
            v_rho_a_rho_b_[index] = (ccab1*gamma_aa[index]*gcab*t42861*t42766*(4.0/3.0)-ccab2*t42773*t42765*t42783* \
               t42779-ccab1*gamma_aa[index]*t42772*t42765*t42766*t42786*(4.0/3.0)+ccab2*gamma_aa[index]*t42772*t42765* \
               t42766*t42787*(8.0/3.0))*(t42860-t42735+t42753+t42907-t42736*(-t42814+t42942+t42862+t42872+t42883+ \
               t42913*t42717*t42764*t42758*t42759-t42804*t42717*t42758*t42875*t42759+t42804*t42717*t42754*t42755* \
               t42764*t42758*4.0-Aa*t42815*t42717*t42825*t42835*t42827*t42875*2.0-t42815*t42717*t42835*t42764*t42827* \
               t42882*t42876*t42877)+rho_b[index]*(-t42905+t42714*t42717*(t42905-(1.0/(t42890*t42890)*t42885*(b2f* \
               c*t42894*(1.0/3.0)+b4f*t42895*t42698*(2.0/3.0)+b1f*c*t42894*t42896*(1.0/6.0)+b3f*c*t42721*t42894*(1.0/ \
               2.0)))/t42893+a1f*c*c0f*t42894*t42897*(2.0/3.0)-a1p*c*c0p*t42732*t42894*(2.0/3.0))+a1p*c*c0p*t42732* \
               t42894*(2.0/3.0))+t42714*t42717*t42906)-(rho_b[index]*(t42735-t42714*t42717*t42906)+rho_a[index]*(t42859+ \
               t42714*t42717*(t42858-c0p*t42711*t42709*2.0))-t42736*(t42860+t42753-t42800*t42717*t42764*t42758*t42759) \
               )*(ccab2*t42773*t42782*t42765*1.0/(t42776*t42776*t42776)*t42779*-2.0+ccab1*gamma_aa[index]*gamma_bb[index]* \
               t42765*t42766*t42767*t42786*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t42765*t42766*t42767* \
               t42787*(3.2E1/9.0)+ccab2*gamma_aa[index]*t42772*t42782*t42765*t42783*t42766*(8.0/3.0)+ccab2*gamma_bb[index]* \
               t42772*t42765*t42783*t42767*t42779*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t42773*(t42765* \
               t42765)*t42783*t42766*t42767*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t42772*t42765* \
               t42766*t42767*1.0/(t42785*t42785*t42785)*(3.2E1/9.0))+(ccab1*gamma_bb[index]*gcab*t42861*t42767*(4.0/ \
               3.0)-ccab2*t42773*t42782*t42765*t42783-ccab1*gamma_bb[index]*t42772*t42765*t42767*t42786*(4.0/3.0) \
               +ccab2*gamma_bb[index]*t42772*t42765*t42767*t42787*(8.0/3.0))*(t42860+t42753+t42907-t42859-t42736* \
               (-t42814+t42862+t42872+t42883+t42717*t42764*t42758*t42759*(t42814+t42871-t42870*t42864*t42865*t42799- \
               a1p*c*c0p*t42750*t42788*(2.0/3.0))-t42804*t42833*t42717*t42758*t42759+t42800*t42717*t42754*t42755* \
               t42764*t42758*4.0-Aa*t42815*t42833*t42717*t42825*t42835*t42827*2.0+Aa*t42815*t42717*t42825*t42764* \
               t42827*(t42873-t42754*t42755*t42758*4.0)*2.0-t42815*t42717*t42835*t42764*t42827*t42882*t42876*t42877) \
               +rho_a[index]*(-t42857+t42714*t42717*(t42857-(1.0/(t42842*t42842)*t42837*(b2f*c*t42846*(1.0/3.0)+b4f* \
               t42847*t42698*(2.0/3.0)+b1f*c*t42846*t42848*(1.0/6.0)+b3f*c*t42846*t42696*(1.0/2.0)))/t42845+a1f*c* \
               c0f*t42846*t42849*(2.0/3.0)-a1p*c*c0p*t42709*t42846*(2.0/3.0))+a1p*c*c0p*t42709*t42846*(2.0/3.0))- \
               t42714*t42717*(t42858-t42859))+(ccab0+ccab1*gcab*t42861*t42772+ccab2*t42773*t42765*t42787)*(t42942+ \
               t42736*(t42930+t42922+t42927-t42752*t42914*t42923*t42807*2.0+t42833*t42717*t42758*t42759*(t42814+t42871- \
               t42872-t42928)-a1p*c*c0p*t42750*t42908*(8.0/9.0)-t42717*t42764*t42758*t42759*(t42930+t42922+t42927- \
               t42752*t42914*t42923*t42807*2.0+t42924*t42864*1.0/(t42793*t42793*t42793)*t42799*2.0-t42864*t42865* \
               t42799*(b2f*c*t42908*(4.0/9.0)+b4f*t42909*t42698*(1.0E1/9.0)+b1f*c*t42806*t42908*(2.0/9.0)+b3f*c*t42908* \
               t42739*(2.0/3.0)-b1f*t42915*t42909*t42698*(1.0/3.6E1)+b3f*t42806*t42909*t42698*(1.0/1.2E1))-t42924* \
               t42718*1.0/(t42793*t42793*t42793*t42793)*1.0/(t42796*t42796)*t42799*(1.0/2.0)+a1f*c*c0f*t42908*t42797* \
               (8.0/9.0)-a1p*c*c0p*t42750*t42908*(8.0/9.0)-a1f*c*t42870*t42864*t42865*t42788*(2.0/3.0))-t42911*t42804* \
               t42717*t42828*t42759*4.0-t42804*t42931*t42717*t42764*t42759*2.0E1-t42911*t42913*t42717*t42758*t42759+ \
               t42804*t42833*t42717*t42828*t42759*4.0+t42804*t42717*t42755*t42764*t42758*1.2E1-t42913*t42717*t42764* \
               t42828*t42759*8.0+t42804*t42717*t42758*t42759*t42939+t42911*t42804*t42717*t42754*t42755*t42758*4.0+ \
               t42804*t42833*t42717*t42754*t42755*t42758*4.0+Aa*t42911*t42940*t42815*t42717*t42825*t42827*2.0+Aa* \
               t42815*t42833*t42717*t42825*t42933*t42827*2.0+Aa*t42815*t42717*t42825*t42835*t42827*t42939*2.0-Aa* \
               t42815*t42717*t42825*t42764*t42827*(t42931*t42759*2.0E1-t42755*t42758*1.2E1)*2.0+t42911*t42815*t42717* \
               t42835*t42827*t42882*t42876*t42877-t42940*t42815*t42717*t42764*t42827*t42882*t42876*t42877-t42815* \
               t42833*t42717*t42835*t42827*t42882*t42876*t42877+t42815*t42717*t42933*t42764*t42827*t42882*t42876* \
               t42877-1.0/(t42821*t42821*t42821)*t42815*t42941*t42717*t42835*t42764*t42827*t42876*2.0+t42815*t42717* \
               t42835*t42764*t42827*t42876*t42877*(b2a*c*t42908*(4.0/9.0)+b4a*t42909*t42698*(1.0E1/9.0)+b1a*c*t42806* \
               t42908*(2.0/9.0)+b3a*c*t42908*t42739*(2.0/3.0)-b1a*t42915*t42909*t42698*(1.0/3.6E1)+b3a*t42806*t42909* \
               t42698*(1.0/1.2E1))-Aa*a1a*c*t42911*t42815*t42717*t42825*t42835*t42788*(2.0/3.0)-Aa*a1a*c*t42815*t42717* \
               t42825*t42835*t42764*t42908*(8.0/9.0)+Aa*a1a*c*t42940*t42815*t42717*t42825*t42764*t42788*(2.0/3.0) \
               +Aa*a1a*c*t42815*t42833*t42717*t42825*t42835*t42788*(2.0/3.0)-Aa*a1a*c*t42815*t42717*t42825*t42933* \
               t42764*t42788*(2.0/3.0)+1.0/(t42821*t42821*t42821*t42821)*t42815*1.0/(t42824*t42824)*t42941*t42717* \
               t42816*t42835*t42764*t42827*(1.0/2.0)+a1a*c*t42815*t42717*t42835*t42764*t42882*t42876*t42877*t42788* \
               (2.0/3.0))-t42813*t42752*t42807*t42808*2.0+t42717*t42764*t42758*t42759*(t42814+t42871-t42872-t42928) \
               *2.0+a1p*c*c0p*t42750*t42788*(4.0/3.0)+t42911*t42804*t42717*t42758*t42759-t42804*t42833*t42717*t42758* \
               t42759+t42804*t42717*t42764*t42828*t42759*8.0+Aa*t42911*t42815*t42717*t42825*t42835*t42827*2.0-Aa* \
               t42940*t42815*t42717*t42825*t42764*t42827*2.0-Aa*t42815*t42833*t42717*t42825*t42835*t42827*2.0-t42815* \
               t42717*t42835*t42764*t42827*t42882*t42876*t42877*2.0+Aa*a1a*c*t42815*t42717*t42825*t42835*t42764*t42788* \
               (4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t42944 = 1.0/pow(rho_b[index],1.0/3.0);
            double t42945 = c*t42944;
            double t42946 = sqrt(t42945);
            double t42947 = pow(t42945,3.0/2.0);
            double t42948 = c*c;
            double t42949 = 1.0/pow(rho_b[index],2.0/3.0);
            double t42950 = 1.0/c0p;
            double t42951 = b1p*t42946;
            double t42952 = b3p*t42947;
            double t42953 = b4p*t42948*t42949;
            double t42954 = b2p*c*t42944;
            double t42955 = t42951+t42952+t42953+t42954;
            double t42956 = 1.0/t42955;
            double t42957 = t42950*t42956*(1.0/2.0);
            double t42958 = t42957+1.0;
            double t42959 = log(t42958);
            double t42960 = a1p*c*t42944;
            double t42961 = t42960+1.0;
            double t42962 = 1.0/pow(rho_b[index],8.0/3.0);
            double t42963 = gamma_bb[index]*gamma_bb[index];
            double t42964 = gcaa*gcaa;
            double t42965 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t42966 = gamma_bb[index]*gcaa*t42962;
            double t42967 = t42966+1.0;
            double t42968 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t42969 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t42970 = gamma_bb[index]*gcaa*t42962*2.0;
            double t42971 = t42963*t42964*t42968;
            double t42972 = t42970+t42971+1.0;
            double t42975 = 1.0/pow(rho_a[index],8.0/3.0);
            double t42976 = gamma_aa[index]*t42975*(1.0/2.0);
            double t42977 = gamma_bb[index]*t42962*(1.0/2.0);
            double t42973 = t42976+t42977;
            double t42974 = gcab*gcab;
            double t42978 = t42973*t42973;
            double t42979 = rho_a[index]+rho_b[index];
            double t42980 = 1.0/pow(t42979,1.0/3.0);
            double t42981 = c*t42980;
            double t42982 = sqrt(t42981);
            double t42983 = b1p*t42982;
            double t42984 = pow(t42981,3.0/2.0);
            double t42985 = b3p*t42984;
            double t42986 = 1.0/pow(t42979,2.0/3.0);
            double t42987 = b4p*t42948*t42986;
            double t42988 = b2p*c*t42980;
            double t42989 = t42983+t42985+t42987+t42988;
            double t42990 = 1.0/pow(t42979,7.0/3.0);
            double t42991 = 1.0/pow(t42979,8.0/3.0);
            double t42992 = 1.0/sqrt(t42981);
            double t42993 = a1p*c*t42980;
            double t42994 = t42993+1.0;
            double t42995 = 1.0/t42989;
            double t42996 = t42950*t42995*(1.0/2.0);
            double t42997 = t42996+1.0;
            double t42998 = 1.0/t42997;
            double t42999 = 1.0/pow(t42979,4.0/3.0);
            double t43039 = 1.0/pow(t42979,5.0/3.0);
            double t43041 = b4p*t42948*t43039*(2.0/3.0);
            double t43042 = b2p*c*t42999*(1.0/3.0);
            double t43043 = b1p*c*t42992*t42999*(1.0/6.0);
            double t43044 = b3p*c*t42982*t42999*(1.0/2.0);
            double t43000 = t43041+t43042+t43043+t43044;
            double t43001 = two_13*2.0;
            double t43002 = t43001-2.0;
            double t43003 = 1.0/t43002;
            double t43004 = 1.0/c0f;
            double t43005 = rho_a[index]-rho_b[index];
            double t43006 = 1.0/t42979;
            double t43007 = t43005*t43006;
            double t43008 = b1f*t42982;
            double t43009 = b3f*t42984;
            double t43010 = b4f*t42948*t42986;
            double t43011 = b2f*c*t42980;
            double t43012 = t43010+t43011+t43008+t43009;
            double t43013 = 1.0/t43012;
            double t43014 = t43004*t43013*(1.0/2.0);
            double t43015 = t43014+1.0;
            double t43016 = log(t43015);
            double t43017 = a1f*c*t42980;
            double t43018 = t43017+1.0;
            double t43019 = log(t42997);
            double t43027 = c0f*t43016*t43018*2.0;
            double t43028 = c0p*t42994*t43019*2.0;
            double t43020 = t43027-t43028;
            double t43021 = t43005*t43005;
            double t43022 = t43007+1.0;
            double t43023 = pow(t43022,4.0/3.0);
            double t43024 = -t43007+1.0;
            double t43025 = pow(t43024,4.0/3.0);
            double t43026 = t43023+t43025-2.0;
            double t43029 = 1.0/(t42979*t42979);
            double t43030 = t43005*t43029;
            double t43031 = t43030+t43006;
            double t43032 = 1.0/(t42979*t42979*t42979*t42979);
            double t43033 = pow(t43022,1.0/3.0);
            double t43034 = t43031*t43033*(4.0/3.0);
            double t43035 = pow(t43024,1.0/3.0);
            double t43067 = t43031*t43035*(4.0/3.0);
            double t43036 = t43034-t43067;
            double t43037 = 1.0/(t42979*t42979*t42979*t42979*t42979);
            double t43038 = t43021*t43021;
            double t43040 = 1.0/(t42989*t42989);
            double t43045 = 1.0/t43015;
            double t43046 = 1.0/(t43012*t43012);
            double t43047 = b4f*t42948*t43039*(2.0/3.0);
            double t43048 = b2f*c*t42999*(1.0/3.0);
            double t43049 = b1f*c*t42992*t42999*(1.0/6.0);
            double t43050 = b3f*c*t42982*t42999*(1.0/2.0);
            double t43051 = t43050+t43047+t43048+t43049;
            double t43052 = t42994*t42998*t43000*t43040;
            double t43053 = a1f*c*c0f*t42999*t43016*(2.0/3.0);
            double t43054 = t43000*t43000;
            double t43055 = 1.0/pow(t42981,3.0/2.0);
            double t43056 = b4p*t42991*t42948*(1.0E1/9.0);
            double t43057 = b2p*c*t42990*(4.0/9.0);
            double t43058 = b1p*c*t42990*t42992*(2.0/9.0);
            double t43059 = b3p*c*t42990*t42982*(2.0/3.0);
            double t43060 = b3p*t42991*t42992*t42948*(1.0/1.2E1);
            double t43061 = t43060+t43056+t43057+t43058+t43059-b1p*t42991*t42948*t43055*(1.0/3.6E1);
            double t43062 = 1.0/(t42989*t42989*t42989);
            double t43063 = t42994*t42998*t43062*t43054*2.0;
            double t43064 = t43051*t43051;
            double t43065 = 1.0/(t42997*t42997);
            double t43066 = 1.0/(t42989*t42989*t42989*t42989);
            double t43068 = t43029*2.0;
            double t43069 = 1.0/(t42979*t42979*t42979);
            double t43070 = t43005*t43069*2.0;
            double t43071 = t43070+t43068;
            double t43072 = t43031*t43031;
            double t43073 = a1p*c*c0p*t42990*t43019*(8.0/9.0);
            double t43074 = 1.0/(t42979*t42979*t42979*t42979*t42979*t42979);
            double t43075 = 1.0/d2fz0;
            double t43076 = 1.0/Aa;
            double t43077 = b1a*t42982;
            double t43078 = b3a*t42984;
            double t43079 = b4a*t42948*t42986;
            double t43080 = b2a*c*t42980;
            double t43081 = t43080+t43077+t43078+t43079;
            double t43082 = 1.0/t43081;
            double t43083 = t43082*t43076*(1.0/2.0);
            double t43084 = t43083+1.0;
            double t43085 = log(t43084);
            double t43086 = a1a*c*t42980;
            double t43087 = t43086+1.0;
            double t43088 = t43033*t43071*(4.0/3.0);
            double t43089 = 1.0/pow(t43022,2.0/3.0);
            double t43090 = t43072*t43089*(4.0/9.0);
            double t43091 = 1.0/pow(t43024,2.0/3.0);
            double t43092 = t43072*t43091*(4.0/9.0);
            double t43093 = t43090+t43092+t43088-t43035*t43071*(4.0/3.0);
            double t43094 = t43021*t43005*t43032*4.0;
            double t43095 = t43037*t43038*4.0;
            double t43096 = t43094+t43095;
            double t43097 = 1.0/t43084;
            double t43098 = t43032*t43038;
            double t43099 = t43098-1.0;
            double t43100 = 1.0/(t43081*t43081);
            double t43101 = b4a*t42948*t43039*(2.0/3.0);
            double t43102 = b2a*c*t42999*(1.0/3.0);
            double t43103 = b1a*c*t42992*t42999*(1.0/6.0);
            double t43104 = b3a*c*t42982*t42999*(1.0/2.0);
            double t43105 = t43101+t43102+t43103+t43104;
            double t43106 = t43105*t43105;
            double t43108 = t43051*t43018*t43045*t43046;
            double t43109 = a1p*c*c0p*t42999*t43019*(2.0/3.0);
            double t43107 = t43052+t43053-t43108-t43109;
            double t43110 = pow(2.0,1.0/3.0);
            double t43111 = t43110*2.0;
            double t43112 = t43111-2.0;
            double t43113 = a1f*c*t42944;
            double t43114 = t43113+1.0;
            double t43115 = b1f*t42946;
            double t43116 = b3f*t42947;
            double t43117 = b4f*t42948*t42949;
            double t43118 = b2f*c*t42944;
            double t43119 = t43115+t43116+t43117+t43118;
            double t43120 = 1.0/t43119;
            double t43121 = t43120*t43004*(1.0/2.0);
            double t43122 = t43121+1.0;
            double t43123 = 1.0/pow(rho_b[index],4.0/3.0);
            double t43125 = 1.0/pow(rho_b[index],5.0/3.0);
            double t43126 = 1.0/sqrt(t42945);
            double t43132 = b4f*t42948*t43125*(2.0/3.0);
            double t43133 = b2f*c*t43123*(1.0/3.0);
            double t43134 = b1f*c*t43123*t43126*(1.0/6.0);
            double t43135 = b3f*c*t42946*t43123*(1.0/2.0);
            double t43124 = t43132+t43133+t43134+t43135;
            double t43137 = b4p*t42948*t43125*(2.0/3.0);
            double t43138 = b2p*c*t43123*(1.0/3.0);
            double t43139 = b1p*c*t43123*t43126*(1.0/6.0);
            double t43140 = b3p*c*t42946*t43123*(1.0/2.0);
            double t43127 = t43140+t43137+t43138+t43139;
            double t43128 = 1.0/t43122;
            double t43129 = 1.0/pow(rho_b[index],7.0/3.0);
            double t43130 = 1.0/t42958;
            double t43131 = 1.0/pow(t42945,3.0/2.0);
            double t43136 = t43124*t43124;
            double t43141 = t43127*t43127;
            double t43142 = log(t43122);
            double t43143 = 1.0/(t43119*t43119);
            double t43144 = 1.0/(t42955*t42955);
            double t43145 = 1.0/(t42955*t42955*t42955);
            double t43146 = t42961*t43130*t43141*t43145*2.0;
            double t43147 = b4p*t42962*t42948*(1.0E1/9.0);
            double t43148 = b2p*c*t43129*(4.0/9.0);
            double t43149 = b3p*t42962*t42948*t43126*(1.0/1.2E1);
            double t43150 = b1p*c*t43126*t43129*(2.0/9.0);
            double t43151 = b3p*c*t42946*t43129*(2.0/3.0);
            double t43224 = b1p*t42962*t42948*t43131*(1.0/3.6E1);
            double t43152 = t43150+t43151-t43224+t43147+t43148+t43149;
            double t43153 = 1.0/(t42958*t42958);
            double t43154 = 1.0/(t42955*t42955*t42955*t42955);
            double t43155 = a1p*c*c0p*t42959*t43129*(8.0/9.0);
            double t43156 = gcab*t42973;
            double t43157 = t43156+1.0;
            double t43158 = 1.0/t43157;
            double t43159 = t42974*t42978;
            double t43160 = gcab*t42973*2.0;
            double t43161 = t43160+t43159+1.0;
            double t43162 = 1.0/t43161;
            double t43163 = t42961*t43130*t43144*t43127;
            double t43164 = a1f*c*c0f*t43123*t43142*(2.0/3.0);
            double t43166 = a1p*c*c0p*t42959*t43123*(2.0/3.0);
            double t43169 = t43114*t43124*t43143*t43128;
            double t43165 = t43163+t43164-t43166-t43169;
            double t43167 = c0f*t43114*t43142*2.0;
            double t43168 = c0p*t42961*t42959*2.0;
            double t43170 = t43003*t43112*t43165;
            double t43171 = 1.0/t42967;
            double t43172 = 1.0/t42972;
            double t43173 = 1.0/pow(rho_a[index],1.0/3.0);
            double t43174 = c*t43173;
            double t43175 = sqrt(t43174);
            double t43176 = pow(t43174,3.0/2.0);
            double t43177 = 1.0/pow(rho_a[index],2.0/3.0);
            double t43178 = b1p*t43175;
            double t43179 = b3p*t43176;
            double t43180 = b4p*t42948*t43177;
            double t43181 = b2p*c*t43173;
            double t43182 = t43180+t43181+t43178+t43179;
            double t43183 = 1.0/t43182;
            double t43184 = t42950*t43183*(1.0/2.0);
            double t43185 = t43184+1.0;
            double t43186 = log(t43185);
            double t43187 = a1p*c*t43173;
            double t43188 = t43187+1.0;
            double t43189 = c0p*t43186*t43188*2.0;
            double t43190 = t43167-t43168;
            double t43191 = t43020*t43003*t43032*t43026*t43038;
            double t43192 = Aa*t43003*t43026*t43075*t43085*t43087*t43099*2.0;
            double t43193 = 1.0/(t43157*t43157);
            double t43194 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t43195 = gamma_bb[index]*gcab*t42969*(8.0/3.0);
            double t43196 = gamma_bb[index]*t42973*t42974*t42969*(8.0/3.0);
            double t43197 = t43195+t43196;
            double t43198 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t43199 = 1.0/(t43161*t43161);
            double t43200 = gx*gx;
            double t43201 = gamma_bb[index]*gx*t42962;
            double t43202 = t43201+1.0;
            double t43207 = gamma_bb[index]*gx*t42969*(1.6E1/3.0);
            double t43208 = t42963*t42965*t43200*(1.6E1/3.0);
            double t43203 = t43207+t43208;
            double t43204 = gamma_bb[index]*gx*t42962*2.0;
            double t43205 = t42963*t42968*t43200;
            double t43206 = t43204+t43205+1.0;
            double t43209 = 1.0/(t43206*t43206);
            double t43210 = 1.0/t43202;
            double t43211 = 1.0/t43206;
            double t43212 = 1.0/(t43202*t43202);
            double t43213 = ccaa1*gamma_bb[index]*gcaa*t42962*t43171;
            double t43214 = ccaa2*t42963*t42964*t42968*t43172;
            double t43215 = ccaa0+t43213+t43214;
            double t43216 = 1.0/(t43119*t43119*t43119);
            double t43217 = b4f*t42962*t42948*(1.0E1/9.0);
            double t43218 = b2f*c*t43129*(4.0/9.0);
            double t43219 = b3f*t42962*t42948*t43126*(1.0/1.2E1);
            double t43220 = b1f*c*t43126*t43129*(2.0/9.0);
            double t43221 = b3f*c*t42946*t43129*(2.0/3.0);
            double t43222 = t43220+t43221+t43217+t43218+t43219-b1f*t42962*t42948*t43131*(1.0/3.6E1);
            double t43223 = t43114*t43222*t43143*t43128;
            double t43225 = t42961*t43130*t43152*t43144;
            double t43226 = 1.0/(t43122*t43122);
            double t43227 = 1.0/(t43119*t43119*t43119*t43119);
            double t43228 = t43004*t43114*t43136*t43226*t43227*(1.0/2.0);
            double t43229 = t42950*t42961*t43141*t43153*t43154*(1.0/2.0);
            double t43230 = a1f*c*t43123*t43124*t43143*t43128*(2.0/3.0);
            double t43231 = a1p*c*t43130*t43123*t43144*t43127*(2.0/3.0);
            double t43232 = t43003*t43112*t43190;
            double t43233 = t43232+t43168;
            double t43234 = 1.0/pow(rho_b[index],1.0E1);
            double t43235 = 1.0/(t42967*t42967);
            double t43236 = gamma_bb[index]*gcaa*t42969*(1.6E1/3.0);
            double t43237 = t42963*t42964*t42965*(1.6E1/3.0);
            double t43238 = t43236+t43237;
            double t43239 = 1.0/(t42972*t42972);
            double t43240 = ccaa1*gamma_bb[index]*gcaa*t42969*t43171*(8.0/3.0);
            double t43241 = ccaa2*t42963*t42964*t42965*t43172*(1.6E1/3.0);
            double t43242 = t43240+t43241-ccaa1*t42963*t42964*t42965*t43235*(8.0/3.0)-ccaa2*t42963*t42964*t42968* \
               t43238*t43239;
            double t43243 = t43170-t43163+t43166;
            v_rho_b_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t42969*t43158*(4.0/3.0)-ccab2*t42974*t42978*t43197* \
               t43199+ccab2*gamma_bb[index]*t42973*t42974*t42969*t43162*(8.0/3.0)-ccab1*gamma_bb[index]*t42973*t42974* \
               t42969*t43193*(4.0/3.0))*(t43028+t43191+t43192-t43168+rho_b[index]*t43243-t42979*(-t43052+t43109+t43003* \
               t43032*t43026*t43038*(t43052+t43053-t43108-t43109)+t43020*t43003*t43032*t43036*t43038+t43020*t43003* \
               t43026*t43037*t43038*4.0+t43020*t43003*t43021*t43005*t43032*t43026*4.0+Aa*t43003*t43026*t43075*t43085* \
               t43087*t43096*2.0+Aa*t43003*t43036*t43075*t43085*t43087*t43099*2.0-t43100*t43003*t43105*t43026*t43075* \
               t43087*t43097*t43099+Aa*a1a*c*t42999*t43003*t43026*t43075*t43085*t43099*(2.0/3.0))-t43003*t43112*t43190) \
               *2.0+t43215*t43243*2.0+(ccab0+ccab1*gcab*t42973*t43158+ccab2*t42974*t42978*t43162)*(-rho_b[index]* \
               (t43231+t43225-t43146-t43155+t43229+t43003*t43112*(t43230+t43223+t43146+t43155+t43228-t42961*t43130* \
               t43152*t43144-t43114*t43216*t43136*t43128*2.0-a1f*c*c0f*t43142*t43129*(8.0/9.0)-t42950*t42961*t43141* \
               t43153*t43154*(1.0/2.0)-a1p*c*t43130*t43123*t43144*t43127*(2.0/3.0)))-t42979*(t43063+t43073-t42994* \
               t42998*t43040*t43061-t43003*t43032*t43026*t43038*(t43063+t43073-t42994*t42998*t43040*t43061-1.0/(t43012* \
               t43012*t43012)*t43018*t43045*t43064*2.0+t43018*t43045*t43046*(b2f*c*t42990*(4.0/9.0)+b4f*t42991*t42948* \
               (1.0E1/9.0)+b1f*c*t42990*t42992*(2.0/9.0)+b3f*c*t42990*t42982*(2.0/3.0)-b1f*t42991*t42948*t43055*(1.0/ \
               3.6E1)+b3f*t42991*t42992*t42948*(1.0/1.2E1))+1.0/(t43012*t43012*t43012*t43012)*t43004*1.0/(t43015* \
               t43015)*t43018*t43064*(1.0/2.0)-a1f*c*c0f*t42990*t43016*(8.0/9.0)-t42950*t42994*t43054*t43065*t43066* \
               (1.0/2.0)+a1f*c*t42999*t43051*t43045*t43046*(2.0/3.0)-a1p*c*t42998*t42999*t43000*t43040*(2.0/3.0)) \
               -t42950*t42994*t43054*t43065*t43066*(1.0/2.0)+t43020*t43003*t43021*t43032*t43026*1.2E1+t43020*t43003* \
               t43032*t43038*t43093+t43020*t43003*t43026*t43038*t43074*2.0E1+t43020*t43003*t43036*t43037*t43038*8.0+ \
               t43003*t43032*t43107*t43036*t43038*2.0+t43003*t43026*t43107*t43037*t43038*8.0+t43020*t43003*t43021* \
               t43005*t43032*t43036*8.0+t43020*t43003*t43021*t43005*t43026*t43037*3.2E1+t43003*t43021*t43005*t43032* \
               t43026*t43107*8.0-a1p*c*t42998*t42999*t43000*t43040*(2.0/3.0)+Aa*t43003*t43036*t43075*t43085*t43087* \
               t43096*4.0+Aa*t43003*t43075*t43093*t43085*t43087*t43099*2.0+Aa*t43003*t43026*t43075*t43085*t43087* \
               (t43021*t43032*1.2E1+t43038*t43074*2.0E1+t43021*t43005*t43037*3.2E1)*2.0-t43100*t43003*t43105*t43026* \
               t43075*t43087*t43096*t43097*2.0-t43100*t43003*t43105*t43036*t43075*t43087*t43097*t43099*2.0+t43003* \
               t43106*t43026*1.0/(t43081*t43081*t43081)*t43075*t43087*t43097*t43099*2.0-t43100*t43003*t43026*t43075* \
               t43087*t43097*t43099*(b2a*c*t42990*(4.0/9.0)+b4a*t42991*t42948*(1.0E1/9.0)+b1a*c*t42990*t42992*(2.0/ \
               9.0)+b3a*c*t42990*t42982*(2.0/3.0)-b1a*t42991*t42948*t43055*(1.0/3.6E1)+b3a*t42991*t42992*t42948*(1.0/ \
               1.2E1))+Aa*a1a*c*t42990*t43003*t43026*t43075*t43085*t43099*(8.0/9.0)+Aa*a1a*c*t42999*t43003*t43026* \
               t43075*t43085*t43096*(4.0/3.0)+Aa*a1a*c*t42999*t43003*t43036*t43075*t43085*t43099*(4.0/3.0)-t43003* \
               t43106*t43026*1.0/(t43081*t43081*t43081*t43081)*t43075*1.0/(t43084*t43084)*t43076*t43087*t43099*(1.0/ \
               2.0)-a1a*c*t42999*t43100*t43003*t43105*t43026*t43075*t43097*t43099*(2.0/3.0))-t43003*t43112*t43165* \
               2.0-t42994*t42998*t43000*t43040*2.0+t42961*t43130*t43144*t43127*2.0+t43003*t43032*t43026*t43038*(t43052+ \
               t43053-t43108-t43109)*2.0-a1p*c*c0p*t42959*t43123*(4.0/3.0)+a1p*c*c0p*t42999*t43019*(4.0/3.0)+t43020* \
               t43003*t43032*t43036*t43038*2.0+t43020*t43003*t43026*t43037*t43038*8.0+t43020*t43003*t43021*t43005* \
               t43032*t43026*8.0+Aa*t43003*t43026*t43075*t43085*t43087*t43096*4.0+Aa*t43003*t43036*t43075*t43085* \
               t43087*t43099*4.0-t43100*t43003*t43105*t43026*t43075*t43087*t43097*t43099*2.0+Aa*a1a*c*t42999*t43003* \
               t43026*t43075*t43085*t43099*(4.0/3.0))+t43242*(t43168+t43003*t43112*(t43167-c0p*t42961*t42959*2.0) \
               )*2.0+(rho_b[index]*t43233+rho_a[index]*(t43189-t43003*t43112*(t43189-c0f*log((t43004*(1.0/2.0))/(b1f* \
               t43175+b3f*t43176+b2f*c*t43173+b4f*t42948*t43177)+1.0)*(a1f*c*t43173+1.0)*2.0))-t42979*(t43028+t43191+ \
               t43192))*(-ccab2*t42974*t42978*t43199*(gamma_bb[index]*gcab*t43198*(8.8E1/9.0)+t42963*t42974*t43194* \
               (3.2E1/9.0)+gamma_bb[index]*t42973*t42974*t43198*(8.8E1/9.0))+ccab2*t42974*t42978*1.0/(t43161*t43161* \
               t43161)*(t43197*t43197)*2.0+ccab1*gamma_bb[index]*gcab*t43158*t43198*(4.4E1/9.0)+ccab2*t42963*t42974* \
               t43162*t43194*(3.2E1/9.0)-ccab1*t42963*t42974*t43193*t43194*(3.2E1/9.0)+ccab2*gamma_bb[index]*t42973* \
               t42974*t43162*t43198*(8.8E1/9.0)-ccab1*gamma_bb[index]*t42973*t42974*t43193*t43198*(4.4E1/9.0)-ccab2* \
               gamma_bb[index]*t42973*t42974*t42969*t43197*t43199*(1.6E1/3.0)+ccab1*gcab*t42963*t42973*t42974*1.0/ \
               (t43157*t43157*t43157)*t43194*(3.2E1/9.0))+c0*t42949*(cx0+cx1*gamma_bb[index]*gx*t42962*t43210+cx2* \
               t42963*t42968*t43200*t43211)*(4.0/9.0)-rho_b[index]*t43233*(ccaa1*gamma_bb[index]*gcaa*t43171*t43198* \
               (8.8E1/9.0)-ccaa1*t42963*t42964*t43235*t43194*2.4E1+ccaa2*t42963*t42964*t43172*t43194*(3.04E2/9.0) \
               -ccaa2*t42963*t42964*t42965*t43238*t43239*(3.2E1/3.0)-ccaa2*t42963*t42964*t42968*t43239*(gamma_bb[index]* \
               gcaa*t43198*(1.76E2/9.0)+t42963*t42964*t43194*(3.04E2/9.0))+ccaa2*t42963*1.0/(t42972*t42972*t42972) \
               *t42964*t42968*(t43238*t43238)*2.0+ccaa1*gamma_bb[index]*gcaa*t42963*t42964*1.0/(t42967*t42967*t42967) \
               *t43234*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t43210*t43198*(8.8E1/9.0) \
               -cx1*t42963*t43200*t43212*t43194*2.4E1+cx2*t42963*t43200*t43211*t43194*(3.04E2/9.0)-cx2*t42963*t42965* \
               t43200*t43203*t43209*(3.2E1/3.0)-cx2*t42963*t42968*t43200*t43209*(gamma_bb[index]*gx*t43198*(1.76E2/ \
               9.0)+t42963*t43200*t43194*(3.04E2/9.0))+cx2*t42963*t42968*t43200*(t43203*t43203)*1.0/(t43206*t43206* \
               t43206)*2.0+cx1*gamma_bb[index]*gx*t42963*t43200*1.0/(t43202*t43202*t43202)*t43234*(1.28E2/9.0))-c0* \
               pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t42969*t43210*(8.0/3.0)-cx1*t42963*t42965*t43200* \
               t43212*(8.0/3.0)+cx2*t42963*t42965*t43200*t43211*(1.6E1/3.0)-cx2*t42963*t42968*t43200*t43203*t43209) \
               *(8.0/3.0)+rho_b[index]*t43215*(t43231+t43225-t43146-t43155+t43229+t43003*t43112*(t43230-t43231+t43223- \
               t43225+t43146+t43155+t43228-t43229-t43114*t43216*t43136*t43128*2.0-a1f*c*c0f*t43142*t43129*(8.0/9.0) \
               ))-rho_b[index]*t43242*t43243*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t44512 = 1.0/pow(rho_b[index],1.0/3.0);
            double t44513 = c*t44512;
            double t44514 = sqrt(t44513);
            double t44515 = pow(t44513,3.0/2.0);
            double t44516 = c*c;
            double t44517 = 1.0/pow(rho_b[index],2.0/3.0);
            double t44518 = 1.0/c0p;
            double t44519 = b1p*t44514;
            double t44520 = b3p*t44515;
            double t44521 = b4p*t44516*t44517;
            double t44522 = b2p*c*t44512;
            double t44523 = t44520+t44521+t44522+t44519;
            double t44524 = 1.0/t44523;
            double t44525 = t44524*t44518*(1.0/2.0);
            double t44526 = t44525+1.0;
            double t44527 = log(t44526);
            double t44528 = a1p*c*t44512;
            double t44529 = t44528+1.0;
            double t44530 = 1.0/pow(rho_b[index],8.0/3.0);
            double t44531 = gamma_bb[index]*gamma_bb[index];
            double t44532 = gcaa*gcaa;
            double t44533 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t44534 = gamma_bb[index]*gcaa*t44530;
            double t44535 = t44534+1.0;
            double t44536 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t44537 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t44538 = gamma_bb[index]*gcaa*t44530*2.0;
            double t44539 = t44531*t44532*t44536;
            double t44540 = t44538+t44539+1.0;
            double t44541 = pow(2.0,1.0/3.0);
            double t44542 = t44541*2.0;
            double t44543 = t44542-2.0;
            double t44544 = two_13*2.0;
            double t44545 = t44544-2.0;
            double t44546 = 1.0/t44545;
            double t44547 = a1f*c*t44512;
            double t44548 = t44547+1.0;
            double t44549 = 1.0/c0f;
            double t44550 = b1f*t44514;
            double t44551 = b3f*t44515;
            double t44552 = b4f*t44516*t44517;
            double t44553 = b2f*c*t44512;
            double t44554 = t44550+t44551+t44552+t44553;
            double t44555 = 1.0/t44554;
            double t44556 = t44555*t44549*(1.0/2.0);
            double t44557 = t44556+1.0;
            double t44558 = 1.0/pow(rho_b[index],4.0/3.0);
            double t44559 = 1.0/pow(rho_b[index],5.0/3.0);
            double t44560 = 1.0/sqrt(t44513);
            double t44561 = log(t44557);
            double t44562 = 1.0/t44526;
            double t44563 = 1.0/(t44523*t44523);
            double t44564 = b4p*t44516*t44559*(2.0/3.0);
            double t44565 = b2p*c*t44558*(1.0/3.0);
            double t44566 = b1p*c*t44560*t44558*(1.0/6.0);
            double t44567 = b3p*c*t44514*t44558*(1.0/2.0);
            double t44568 = t44564+t44565+t44566+t44567;
            double t44569 = t44562*t44563*t44529*t44568;
            double t44570 = 1.0/t44535;
            double t44571 = 1.0/t44540;
            double t44572 = gx*gx;
            double t44573 = gamma_bb[index]*gx*t44530;
            double t44574 = t44573+1.0;
            double t44575 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t44580 = gamma_bb[index]*gx*t44537*(1.6E1/3.0);
            double t44581 = t44531*t44533*t44572*(1.6E1/3.0);
            double t44576 = t44580+t44581;
            double t44577 = gamma_bb[index]*gx*t44530*2.0;
            double t44578 = t44531*t44536*t44572;
            double t44579 = t44577+t44578+1.0;
            double t44582 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t44583 = 1.0/(t44579*t44579);
            double t44584 = 1.0/t44574;
            double t44585 = 1.0/t44579;
            double t44586 = 1.0/(t44574*t44574);
            double t44587 = ccaa1*gamma_bb[index]*gcaa*t44530*t44570;
            double t44588 = ccaa2*t44531*t44532*t44571*t44536;
            double t44589 = ccaa0+t44587+t44588;
            double t44590 = 1.0/t44557;
            double t44591 = b4f*t44516*t44559*(2.0/3.0);
            double t44592 = b2f*c*t44558*(1.0/3.0);
            double t44593 = b1f*c*t44560*t44558*(1.0/6.0);
            double t44594 = b3f*c*t44514*t44558*(1.0/2.0);
            double t44595 = t44591+t44592+t44593+t44594;
            double t44596 = 1.0/(t44554*t44554);
            double t44597 = 1.0/pow(rho_b[index],7.0/3.0);
            double t44598 = 1.0/pow(t44513,3.0/2.0);
            double t44599 = t44595*t44595;
            double t44600 = t44568*t44568;
            double t44601 = 1.0/(t44523*t44523*t44523);
            double t44602 = t44600*t44601*t44562*t44529*2.0;
            double t44603 = b4p*t44530*t44516*(1.0E1/9.0);
            double t44604 = b2p*c*t44597*(4.0/9.0);
            double t44605 = b3p*t44530*t44560*t44516*(1.0/1.2E1);
            double t44606 = b1p*c*t44560*t44597*(2.0/9.0);
            double t44607 = b3p*c*t44514*t44597*(2.0/3.0);
            double t44608 = t44603+t44604+t44605+t44606+t44607-b1p*t44530*t44516*t44598*(1.0/3.6E1);
            double t44609 = 1.0/(t44526*t44526);
            double t44610 = 1.0/(t44523*t44523*t44523*t44523);
            double t44611 = a1p*c*c0p*t44527*t44597*(8.0/9.0);
            double t44612 = c0f*t44561*t44548*2.0;
            double t44613 = c0p*t44527*t44529*2.0;
            double t44614 = 1.0/pow(rho_b[index],1.0E1);
            double t44615 = 1.0/(t44535*t44535);
            double t44616 = gamma_bb[index]*gcaa*t44537*(1.6E1/3.0);
            double t44617 = t44531*t44532*t44533*(1.6E1/3.0);
            double t44618 = t44616+t44617;
            double t44619 = 1.0/(t44540*t44540);
            double t44620 = a1f*c*c0f*t44561*t44558*(2.0/3.0);
            double t44621 = a1p*c*c0p*t44527*t44558*(2.0/3.0);
            double t44622 = ccaa1*gamma_bb[index]*gcaa*t44570*t44537*(8.0/3.0);
            double t44623 = ccaa2*t44531*t44532*t44533*t44571*(1.6E1/3.0);
            double t44624 = t44622+t44623-ccaa1*t44531*t44532*t44533*t44615*(8.0/3.0)-ccaa2*t44531*t44532*t44536* \
               t44618*t44619;
            v_rho_b_rho_b_[index] = t44624*(t44613+t44543*t44546*(t44612-c0p*t44527*t44529*2.0))*2.0+t44589*(t44621- \
               t44569+t44543*t44546*(t44620+t44569-t44590*t44548*t44595*t44596-a1p*c*c0p*t44527*t44558*(2.0/3.0)) \
               )*2.0+c0*t44517*(cx0+cx1*gamma_bb[index]*gx*t44530*t44584+cx2*t44531*t44536*t44572*t44585)*(4.0/9.0) \
               -rho_b[index]*(t44613+t44543*t44546*(t44612-t44613))*(ccaa1*gamma_bb[index]*gcaa*t44570*t44582*(8.8E1/ \
               9.0)-ccaa1*t44531*t44532*t44615*t44575*2.4E1+ccaa2*t44531*t44532*t44571*t44575*(3.04E2/9.0)-ccaa2* \
               t44531*t44532*t44533*t44618*t44619*(3.2E1/3.0)-ccaa2*t44531*t44532*t44536*t44619*(gamma_bb[index]* \
               gcaa*t44582*(1.76E2/9.0)+t44531*t44532*t44575*(3.04E2/9.0))+ccaa2*t44531*1.0/(t44540*t44540*t44540) \
               *t44532*t44536*(t44618*t44618)*2.0+ccaa1*gamma_bb[index]*gcaa*t44531*t44532*t44614*1.0/(t44535*t44535* \
               t44535)*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t44582*t44584*(8.8E1/9.0) \
               -cx1*t44531*t44572*t44575*t44586*2.4E1+cx2*t44531*t44572*t44575*t44585*(3.04E2/9.0)-cx2*t44531*t44533* \
               t44572*t44583*t44576*(3.2E1/3.0)-cx2*t44531*t44536*t44572*t44583*(gamma_bb[index]*gx*t44582*(1.76E2/ \
               9.0)+t44531*t44572*t44575*(3.04E2/9.0))+cx2*t44531*t44536*t44572*(t44576*t44576)*1.0/(t44579*t44579* \
               t44579)*2.0+cx1*gamma_bb[index]*gx*t44531*t44614*t44572*1.0/(t44574*t44574*t44574)*(1.28E2/9.0))+rho_b[index]* \
               t44589*(-t44602-t44611+t44543*t44546*(t44602+t44611-t44562*t44563*t44608*t44529-1.0/(t44554*t44554* \
               t44554)*t44590*t44548*t44599*2.0+t44590*t44548*t44596*(b2f*c*t44597*(4.0/9.0)+b4f*t44530*t44516*(1.0E1/ \
               9.0)+b1f*c*t44560*t44597*(2.0/9.0)+b3f*c*t44514*t44597*(2.0/3.0)-b1f*t44530*t44516*t44598*(1.0/3.6E1) \
               +b3f*t44530*t44560*t44516*(1.0/1.2E1))+1.0/(t44554*t44554*t44554*t44554)*t44548*1.0/(t44557*t44557) \
               *t44549*t44599*(1.0/2.0)-a1f*c*c0f*t44561*t44597*(8.0/9.0)-t44600*t44610*t44518*t44609*t44529*(1.0/ \
               2.0)+a1f*c*t44590*t44558*t44595*t44596*(2.0/3.0)-a1p*c*t44562*t44563*t44558*t44568*(2.0/3.0))+t44562* \
               t44563*t44608*t44529+t44600*t44610*t44518*t44609*t44529*(1.0/2.0)+a1p*c*t44562*t44563*t44558*t44568* \
               (2.0/3.0))-rho_b[index]*t44624*(t44621-t44569+t44543*t44546*(t44620-t44621+t44569-t44590*t44548*t44595* \
               t44596))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t44537*t44584*(8.0/3.0)-cx1*t44531* \
               t44533*t44572*t44586*(8.0/3.0)+cx2*t44531*t44533*t44572*t44585*(1.6E1/3.0)-cx2*t44531*t44536*t44572* \
               t44583*t44576)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43245 = 1.0/pow(rho_a[index],1.0/3.0);
                double t43246 = c*t43245;
                double t43247 = sqrt(t43246);
                double t43248 = pow(t43246,3.0/2.0);
                double t43249 = c*c;
                double t43250 = 1.0/pow(rho_a[index],2.0/3.0);
                double t43251 = 1.0/c0p;
                double t43252 = b1p*t43247;
                double t43253 = b3p*t43248;
                double t43254 = b4p*t43250*t43249;
                double t43255 = b2p*c*t43245;
                double t43256 = t43252+t43253+t43254+t43255;
                double t43257 = 1.0/t43256;
                double t43258 = t43251*t43257*(1.0/2.0);
                double t43259 = t43258+1.0;
                double t43260 = log(t43259);
                double t43261 = a1p*c*t43245;
                double t43262 = t43261+1.0;
                double t43263 = pow(2.0,1.0/3.0);
                double t43264 = t43263*2.0;
                double t43265 = t43264-2.0;
                double t43266 = two_13*2.0;
                double t43267 = t43266-2.0;
                double t43268 = 1.0/t43267;
                double t43269 = 1.0/c0f;
                double t43270 = 1.0/pow(rho_b[index],1.0/3.0);
                double t43271 = c*t43270;
                double t43272 = sqrt(t43271);
                double t43273 = pow(t43271,3.0/2.0);
                double t43274 = 1.0/pow(rho_b[index],2.0/3.0);
                double t43275 = b1p*t43272;
                double t43276 = b3p*t43273;
                double t43277 = b4p*t43274*t43249;
                double t43278 = b2p*c*t43270;
                double t43279 = t43275+t43276+t43277+t43278;
                double t43280 = 1.0/t43279;
                double t43281 = t43251*t43280*(1.0/2.0);
                double t43282 = t43281+1.0;
                double t43283 = log(t43282);
                double t43284 = a1p*c*t43270;
                double t43285 = t43284+1.0;
                double t43286 = c0p*t43283*t43285*2.0;
                double t43287 = rho_a[index]+rho_b[index];
                double t43288 = 1.0/pow(t43287,1.0/3.0);
                double t43289 = c*t43288;
                double t43290 = sqrt(t43289);
                double t43291 = pow(t43289,3.0/2.0);
                double t43292 = 1.0/pow(t43287,2.0/3.0);
                double t43293 = b1p*t43290;
                double t43294 = b3p*t43291;
                double t43295 = b4p*t43292*t43249;
                double t43296 = b2p*c*t43288;
                double t43297 = t43293+t43294+t43295+t43296;
                double t43298 = 1.0/t43297;
                double t43299 = t43251*t43298*(1.0/2.0);
                double t43300 = t43299+1.0;
                double t43301 = log(t43300);
                double t43302 = a1p*c*t43288;
                double t43303 = t43302+1.0;
                double t43304 = c0p*t43301*t43303*2.0;
                double t43305 = rho_a[index]-rho_b[index];
                double t43306 = t43305*t43305;
                double t43307 = 1.0/t43287;
                double t43308 = t43305*t43307;
                double t43309 = 1.0/(t43287*t43287*t43287*t43287);
                double t43310 = t43306*t43306;
                double t43311 = t43308+1.0;
                double t43312 = pow(t43311,4.0/3.0);
                double t43313 = -t43308+1.0;
                double t43314 = pow(t43313,4.0/3.0);
                double t43315 = t43312+t43314-2.0;
                double t43316 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t43317 = 1.0/pow(rho_a[index],8.0/3.0);
                double t43318 = gamma_aa[index]*t43317*(1.0/2.0);
                double t43319 = 1.0/pow(rho_b[index],8.0/3.0);
                double t43320 = gamma_bb[index]*t43319*(1.0/2.0);
                double t43321 = t43320+t43318;
                double t43322 = gcab*t43321;
                double t43323 = t43322+1.0;
                double t43324 = gcab*gcab;
                double t43325 = t43321*t43321;
                double t43326 = t43324*t43325;
                double t43327 = gcab*t43321*2.0;
                double t43328 = t43326+t43327+1.0;
                double t43329 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t43330 = 1.0/(t43323*t43323);
                double t43331 = 1.0/t43328;
                double t43332 = 1.0/(t43328*t43328);
                double t43333 = gamma_aa[index]*gcab*t43316*(8.0/3.0);
                double t43334 = gamma_aa[index]*t43321*t43324*t43316*(8.0/3.0);
                double t43335 = t43333+t43334;
                double t43336 = gcab*t43317;
                double t43337 = t43321*t43324*t43317;
                double t43338 = t43336+t43337;
                double t43339 = b1f*t43247;
                double t43340 = b3f*t43248;
                double t43341 = b4f*t43250*t43249;
                double t43342 = b2f*c*t43245;
                double t43343 = t43340+t43341+t43342+t43339;
                double t43344 = 1.0/t43343;
                double t43345 = t43344*t43269*(1.0/2.0);
                double t43346 = t43345+1.0;
                double t43347 = log(t43346);
                double t43348 = a1f*c*t43245;
                double t43349 = t43348+1.0;
                double t43350 = c0f*t43347*t43349*2.0;
                double t43351 = c0p*t43260*t43262*2.0;
                double t43352 = gcaa*gcaa;
                double t43353 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t43354 = gamma_aa[index]*gcaa*t43317;
                double t43355 = t43354+1.0;
                double t43356 = gamma_aa[index]*gamma_aa[index];
                double t43357 = gamma_aa[index]*gcaa*t43317*2.0;
                double t43358 = t43352*t43353*t43356;
                double t43359 = t43357+t43358+1.0;
                double t43360 = 1.0/t43323;
                double t43361 = 1.0/pow(t43287,4.0/3.0);
                double t43362 = b1f*t43290;
                double t43363 = b3f*t43291;
                double t43364 = b4f*t43292*t43249;
                double t43365 = b2f*c*t43288;
                double t43366 = t43362+t43363+t43364+t43365;
                double t43367 = 1.0/t43366;
                double t43368 = t43367*t43269*(1.0/2.0);
                double t43369 = t43368+1.0;
                double t43370 = log(t43369);
                double t43371 = a1f*c*t43288;
                double t43372 = t43371+1.0;
                double t43374 = c0f*t43370*t43372*2.0;
                double t43373 = t43304-t43374;
                double t43375 = 1.0/(t43287*t43287);
                double t43402 = t43305*t43375;
                double t43376 = -t43402+t43307;
                double t43377 = 1.0/pow(t43287,5.0/3.0);
                double t43378 = 1.0/sqrt(t43289);
                double t43379 = 1.0/t43300;
                double t43380 = 1.0/(t43297*t43297);
                double t43381 = b4p*t43249*t43377*(2.0/3.0);
                double t43382 = b2p*c*t43361*(1.0/3.0);
                double t43383 = b1p*c*t43361*t43378*(1.0/6.0);
                double t43384 = b3p*c*t43361*t43290*(1.0/2.0);
                double t43385 = t43381+t43382+t43383+t43384;
                double t43386 = t43303*t43380*t43385*t43379;
                double t43387 = 1.0/d2fz0;
                double t43388 = 1.0/Aa;
                double t43389 = b1a*t43290;
                double t43390 = b3a*t43291;
                double t43391 = b4a*t43292*t43249;
                double t43392 = b2a*c*t43288;
                double t43393 = t43390+t43391+t43392+t43389;
                double t43394 = 1.0/t43393;
                double t43395 = t43394*t43388*(1.0/2.0);
                double t43396 = t43395+1.0;
                double t43397 = log(t43396);
                double t43398 = a1a*c*t43288;
                double t43399 = t43398+1.0;
                double t43400 = 1.0/(t43287*t43287*t43287*t43287*t43287);
                double t43401 = pow(t43311,1.0/3.0);
                double t43403 = t43401*t43376*(4.0/3.0);
                double t43404 = pow(t43313,1.0/3.0);
                double t43405 = t43403-t43404*t43376*(4.0/3.0);
                double t43406 = t43310*t43309;
                double t43407 = t43406-1.0;
                double t43408 = 1.0/pow(rho_a[index],4.0/3.0);
                double t43409 = 1.0/pow(rho_a[index],5.0/3.0);
                double t43410 = 1.0/sqrt(t43246);
                double t43411 = 1.0/t43259;
                double t43412 = 1.0/(t43256*t43256);
                double t43413 = b4p*t43409*t43249*(2.0/3.0);
                double t43414 = b2p*c*t43408*(1.0/3.0);
                double t43415 = b1p*c*t43410*t43408*(1.0/6.0);
                double t43416 = b3p*c*t43408*t43247*(1.0/2.0);
                double t43417 = t43413+t43414+t43415+t43416;
                double t43418 = t43411*t43412*t43262*t43417;
                double t43419 = t43350-t43351;
                double t43420 = t43265*t43419*t43268;
                double t43421 = Aa*t43315*t43407*t43268*t43387*t43397*t43399*2.0;
                double t43422 = t43420+t43351;
                double t43423 = 1.0/t43355;
                double t43424 = 1.0/t43359;
                double t43425 = 1.0/(t43355*t43355);
                double t43426 = 1.0/(t43359*t43359);
                double t43427 = gcaa*t43317*2.0;
                double t43428 = gamma_aa[index]*t43352*t43353*2.0;
                double t43429 = t43427+t43428;
                double t43430 = gamma_aa[index]*gcaa*t43316*(1.6E1/3.0);
                double t43431 = t43352*t43329*t43356*(1.6E1/3.0);
                double t43432 = t43430+t43431;
                double t43433 = gx*gx;
                double t43434 = gamma_aa[index]*gx*t43317;
                double t43435 = t43434+1.0;
                double t43436 = gamma_aa[index]*gx*t43317*2.0;
                double t43437 = t43433*t43353*t43356;
                double t43438 = t43436+t43437+1.0;
                double t43439 = 1.0/t43346;
                double t43440 = 1.0/(t43343*t43343);
                double t43441 = b4f*t43409*t43249*(2.0/3.0);
                double t43442 = b2f*c*t43408*(1.0/3.0);
                double t43443 = b1f*c*t43410*t43408*(1.0/6.0);
                double t43444 = b3f*c*t43408*t43247*(1.0/2.0);
                double t43445 = t43441+t43442+t43443+t43444;
                double t43446 = a1f*c*c0f*t43408*t43347*(2.0/3.0);
                double t43447 = a1p*c*c0p*t43260*t43408*(2.0/3.0);
                double t43448 = ccaa1*gcaa*t43423*t43317;
                double t43449 = ccaa2*gamma_aa[index]*t43352*t43424*t43353*2.0;
                double t43450 = t43448+t43449-ccaa1*gamma_aa[index]*t43352*t43353*t43425-ccaa2*t43352*t43353*t43426* \
                   t43356*t43429;
                double t43451 = 1.0/t43435;
                double t43452 = 1.0/t43438;
                double t43453 = 1.0/(t43435*t43435);
                double t43454 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t43455 = 1.0/(t43438*t43438);
                double t43456 = gx*t43317*2.0;
                double t43457 = gamma_aa[index]*t43433*t43353*2.0;
                double t43458 = t43456+t43457;
                double t43459 = gamma_aa[index]*gx*t43316*(1.6E1/3.0);
                double t43460 = t43433*t43329*t43356*(1.6E1/3.0);
                double t43461 = t43460+t43459;
                v_rho_a_gamma_aa_[index] = -t43422*t43450+(ccab1*gcab*t43360*t43317*(1.0/2.0)-ccab1*t43321*t43330* \
                   t43324*t43317*(1.0/2.0)+ccab2*t43321*t43331*t43324*t43317-ccab2*t43332*t43324*t43325*t43338)*(t43420- \
                   t43304-t43421+t43351-rho_a[index]*(-t43418+t43447+t43265*t43268*(t43418+t43446-t43440*t43445*t43349* \
                   t43439-a1p*c*c0p*t43260*t43408*(2.0/3.0)))+t43287*(-t43386+t43310*t43315*t43309*t43268*(t43386-(t43372* \
                   1.0/(t43366*t43366)*(b2f*c*t43361*(1.0/3.0)+b4f*t43249*t43377*(2.0/3.0)+b1f*c*t43361*t43378*(1.0/6.0) \
                   +b3f*c*t43361*t43290*(1.0/2.0)))/t43369+a1f*c*c0f*t43361*t43370*(2.0/3.0)-a1p*c*c0p*t43301*t43361* \
                   (2.0/3.0))+a1p*c*c0p*t43301*t43361*(2.0/3.0)-t43310*t43400*t43315*t43373*t43268*4.0+t43310*t43405* \
                   t43309*t43373*t43268+t43305*t43306*t43315*t43309*t43373*t43268*4.0+Aa*t43315*t43268*t43387*t43397* \
                   t43399*(t43310*t43400*4.0-t43305*t43306*t43309*4.0)*2.0-Aa*t43405*t43407*t43268*t43387*t43397*t43399* \
                   2.0-(t43315*t43407*1.0/(t43393*t43393)*t43268*t43387*t43399*(b2a*c*t43361*(1.0/3.0)+b4a*t43249*t43377* \
                   (2.0/3.0)+b1a*c*t43361*t43378*(1.0/6.0)+b3a*c*t43361*t43290*(1.0/2.0)))/t43396+Aa*a1a*c*t43315*t43361* \
                   t43407*t43268*t43387*t43397*(2.0/3.0))+t43310*t43315*t43309*t43373*t43268)-(rho_a[index]*(t43351+t43265* \
                   t43268*(t43350-c0p*t43260*t43262*2.0))+rho_b[index]*(t43286-t43265*t43268*(t43286-c0f*log((t43269* \
                   (1.0/2.0))/(b1f*t43272+b3f*t43273+b2f*c*t43270+b4f*t43274*t43249)+1.0)*(a1f*c*t43270+1.0)*2.0))-t43287* \
                   (t43304+t43421-t43310*t43315*t43309*t43373*t43268))*(ccab1*gcab*t43360*t43316*(4.0/3.0)-ccab2*t43332* \
                   t43324*t43325*(gcab*t43316*(8.0/3.0)+gamma_aa[index]*t43324*t43329*(4.0/3.0)+t43321*t43324*t43316* \
                   (8.0/3.0))-ccab1*gamma_aa[index]*t43330*t43324*t43329*(4.0/3.0)+ccab2*gamma_aa[index]*t43331*t43324* \
                   t43329*(4.0/3.0)-ccab1*t43321*t43330*t43324*t43316*(4.0/3.0)+ccab2*t43321*t43331*t43324*t43316*(8.0/ \
                   3.0)-ccab2*t43321*t43332*t43324*t43317*t43335+ccab2*t43324*t43325*t43335*1.0/(t43328*t43328*t43328) \
                   *t43338*2.0-ccab2*gamma_aa[index]*t43321*t43332*t43324*t43316*t43338*(8.0/3.0)+ccab1*gamma_aa[index]* \
                   gcab*t43321*1.0/(t43323*t43323*t43323)*t43324*t43329*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t43451*t43317-cx1*gamma_aa[index]*t43433*t43353*t43453+cx2*gamma_aa[index]*t43433*t43353*t43452* \
                   2.0-cx2*t43433*t43353*t43356*t43455*t43458)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t43316* \
                   t43451*(8.0/3.0)-cx1*gamma_aa[index]*t43433*t43453*t43329*8.0+cx2*gamma_aa[index]*t43433*t43452*t43329* \
                   (3.2E1/3.0)-cx2*t43433*t43329*t43356*t43455*t43458*(1.6E1/3.0)+cx1*gx*t43433*1.0/(t43435*t43435*t43435) \
                   *t43454*t43356*(1.6E1/3.0)-cx2*t43433*t43353*t43356*t43455*(gx*t43316*(1.6E1/3.0)+gamma_aa[index]* \
                   t43433*t43329*(3.2E1/3.0))-cx2*gamma_aa[index]*t43433*t43353*t43461*t43455*2.0+cx2*t43433*t43353*t43461* \
                   t43356*1.0/(t43438*t43438*t43438)*t43458*2.0)+rho_a[index]*t43450*(-t43418+t43447+t43265*t43268*(t43418+ \
                   t43446-t43447-t43440*t43445*t43349*t43439))+rho_a[index]*t43422*(ccaa1*gcaa*t43423*t43316*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t43352*t43425*t43329*8.0+ccaa2*gamma_aa[index]*t43352*t43424*t43329*(3.2E1/ \
                   3.0)-ccaa2*t43352*t43426*t43329*t43356*t43429*(1.6E1/3.0)+ccaa1*gcaa*t43352*1.0/(t43355*t43355*t43355) \
                   *t43454*t43356*(1.6E1/3.0)-ccaa2*t43352*t43353*t43426*t43356*(gcaa*t43316*(1.6E1/3.0)+gamma_aa[index]* \
                   t43352*t43329*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t43432*t43352*t43353*t43426*2.0+ccaa2*t43432*t43352* \
                   t43353*t43356*t43429*1.0/(t43359*t43359*t43359)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t45037 = 1.0/pow(rho_a[index],1.0/3.0);
                double t45038 = c*t45037;
                double t45039 = sqrt(t45038);
                double t45040 = pow(t45038,3.0/2.0);
                double t45041 = c*c;
                double t45042 = 1.0/pow(rho_a[index],2.0/3.0);
                double t45043 = 1.0/c0p;
                double t45044 = b1p*t45039;
                double t45045 = b3p*t45040;
                double t45046 = b4p*t45041*t45042;
                double t45047 = b2p*c*t45037;
                double t45048 = t45044+t45045+t45046+t45047;
                double t45049 = 1.0/t45048;
                double t45050 = t45043*t45049*(1.0/2.0);
                double t45051 = t45050+1.0;
                double t45052 = log(t45051);
                double t45053 = a1p*c*t45037;
                double t45054 = t45053+1.0;
                double t45055 = 1.0/pow(rho_a[index],8.0/3.0);
                double t45056 = gcaa*gcaa;
                double t45057 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t45058 = gamma_aa[index]*gcaa*t45055;
                double t45059 = t45058+1.0;
                double t45060 = gamma_aa[index]*gamma_aa[index];
                double t45061 = gamma_aa[index]*gcaa*t45055*2.0;
                double t45062 = t45060*t45056*t45057;
                double t45063 = t45061+t45062+1.0;
                double t45064 = pow(2.0,1.0/3.0);
                double t45065 = t45064*2.0;
                double t45066 = t45065-2.0;
                double t45067 = two_13*2.0;
                double t45068 = t45067-2.0;
                double t45069 = 1.0/t45068;
                double t45070 = 1.0/c0f;
                double t45071 = b1f*t45039;
                double t45072 = b3f*t45040;
                double t45073 = b4f*t45041*t45042;
                double t45074 = b2f*c*t45037;
                double t45075 = t45071+t45072+t45073+t45074;
                double t45076 = 1.0/t45075;
                double t45077 = t45070*t45076*(1.0/2.0);
                double t45078 = t45077+1.0;
                double t45079 = log(t45078);
                double t45080 = a1f*c*t45037;
                double t45081 = t45080+1.0;
                double t45082 = c0f*t45081*t45079*2.0;
                double t45083 = c0p*t45052*t45054*2.0;
                double t45084 = 1.0/t45059;
                double t45085 = 1.0/t45063;
                double t45086 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t45087 = 1.0/(t45059*t45059);
                double t45088 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t45089 = 1.0/(t45063*t45063);
                double t45090 = gcaa*t45055*2.0;
                double t45091 = gamma_aa[index]*t45056*t45057*2.0;
                double t45092 = t45090+t45091;
                double t45093 = gamma_aa[index]*gcaa*t45088*(1.6E1/3.0);
                double t45094 = t45060*t45056*t45086*(1.6E1/3.0);
                double t45095 = t45093+t45094;
                double t45096 = gx*gx;
                double t45097 = gamma_aa[index]*gx*t45055;
                double t45098 = t45097+1.0;
                double t45099 = gamma_aa[index]*gx*t45055*2.0;
                double t45100 = t45060*t45057*t45096;
                double t45101 = t45100+t45099+1.0;
                double t45102 = 1.0/pow(rho_a[index],4.0/3.0);
                double t45103 = 1.0/pow(rho_a[index],5.0/3.0);
                double t45104 = 1.0/sqrt(t45038);
                double t45105 = 1.0/t45051;
                double t45106 = 1.0/(t45048*t45048);
                double t45107 = b4p*t45103*t45041*(2.0/3.0);
                double t45108 = b2p*c*t45102*(1.0/3.0);
                double t45109 = b1p*c*t45102*t45104*(1.0/6.0);
                double t45110 = b3p*c*t45102*t45039*(1.0/2.0);
                double t45111 = t45110+t45107+t45108+t45109;
                double t45112 = t45111*t45105*t45106*t45054;
                double t45113 = ccaa1*gcaa*t45055*t45084;
                double t45114 = ccaa2*gamma_aa[index]*t45056*t45057*t45085*2.0;
                double t45115 = t45113+t45114-ccaa1*gamma_aa[index]*t45056*t45057*t45087-ccaa2*t45060*t45056*t45092* \
                   t45057*t45089;
                double t45116 = 1.0/t45098;
                double t45117 = 1.0/t45101;
                double t45118 = 1.0/(t45098*t45098);
                double t45119 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t45120 = 1.0/(t45101*t45101);
                double t45121 = gx*t45055*2.0;
                double t45122 = gamma_aa[index]*t45057*t45096*2.0;
                double t45123 = t45121+t45122;
                double t45124 = gamma_aa[index]*gx*t45088*(1.6E1/3.0);
                double t45125 = t45060*t45086*t45096*(1.6E1/3.0);
                double t45126 = t45124+t45125;
                v_rho_a_gamma_aa_[index] = -t45115*(t45083+t45066*t45069*(t45082-c0p*t45052*t45054*2.0))+rho_a[index]* \
                   t45115*(-t45112+t45066*t45069*(t45112-(t45081*1.0/(t45075*t45075)*(b2f*c*t45102*(1.0/3.0)+b4f*t45103* \
                   t45041*(2.0/3.0)+b1f*c*t45102*t45104*(1.0/6.0)+b3f*c*t45102*t45039*(1.0/2.0)))/t45078+a1f*c*c0f*t45102* \
                   t45079*(2.0/3.0)-a1p*c*c0p*t45102*t45052*(2.0/3.0))+a1p*c*c0p*t45102*t45052*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t45116*t45055-cx1*gamma_aa[index]*t45118*t45057*t45096+cx2*gamma_aa[index]*t45117*t45057* \
                   t45096*2.0-cx2*t45120*t45060*t45123*t45057*t45096)*(4.0/3.0)+rho_a[index]*(t45083+t45066*t45069*(t45082- \
                   t45083))*(ccaa1*gcaa*t45084*t45088*(8.0/3.0)+ccaa2*gamma_aa[index]*t45056*t45085*t45086*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t45056*t45086*t45087*8.0-ccaa2*t45060*t45056*t45092*t45086*t45089*(1.6E1/3.0) \
                   +ccaa1*gcaa*t45060*t45056*t45119*1.0/(t45059*t45059*t45059)*(1.6E1/3.0)-ccaa2*t45060*t45056*t45057* \
                   t45089*(gcaa*t45088*(1.6E1/3.0)+gamma_aa[index]*t45056*t45086*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t45056* \
                   t45057*t45095*t45089*2.0+ccaa2*t45060*1.0/(t45063*t45063*t45063)*t45056*t45092*t45057*t45095*2.0)- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t45116*t45088*(8.0/3.0)-cx1*gamma_aa[index]*t45118*t45086*t45096* \
                   8.0+cx2*gamma_aa[index]*t45117*t45086*t45096*(3.2E1/3.0)-cx2*t45120*t45060*t45123*t45086*t45096*(1.6E1/ \
                   3.0)+cx1*gx*t45060*t45119*t45096*1.0/(t45098*t45098*t45098)*(1.6E1/3.0)-cx2*t45120*t45060*t45057*t45096* \
                   (gx*t45088*(1.6E1/3.0)+gamma_aa[index]*t45086*t45096*(3.2E1/3.0))-cx2*gamma_aa[index]*t45120*t45126* \
                   t45057*t45096*2.0+cx2*1.0/(t45101*t45101*t45101)*t45060*t45123*t45126*t45057*t45096*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43464 = 1.0/pow(rho_a[index],1.0/3.0);
                double t43465 = c*t43464;
                double t43466 = sqrt(t43465);
                double t43467 = pow(t43465,3.0/2.0);
                double t43468 = c*c;
                double t43469 = 1.0/pow(rho_a[index],2.0/3.0);
                double t43470 = 1.0/c0p;
                double t43471 = b1p*t43466;
                double t43472 = b3p*t43467;
                double t43473 = b4p*t43468*t43469;
                double t43474 = b2p*c*t43464;
                double t43475 = t43471+t43472+t43473+t43474;
                double t43476 = 1.0/t43475;
                double t43477 = t43470*t43476*(1.0/2.0);
                double t43478 = t43477+1.0;
                double t43479 = log(t43478);
                double t43480 = a1p*c*t43464;
                double t43481 = t43480+1.0;
                double t43482 = pow(2.0,1.0/3.0);
                double t43483 = t43482*2.0;
                double t43484 = t43483-2.0;
                double t43485 = two_13*2.0;
                double t43486 = t43485-2.0;
                double t43487 = 1.0/t43486;
                double t43488 = 1.0/c0f;
                double t43489 = 1.0/pow(rho_b[index],1.0/3.0);
                double t43490 = c*t43489;
                double t43491 = sqrt(t43490);
                double t43492 = pow(t43490,3.0/2.0);
                double t43493 = 1.0/pow(rho_b[index],2.0/3.0);
                double t43494 = b1p*t43491;
                double t43495 = b3p*t43492;
                double t43496 = b4p*t43493*t43468;
                double t43497 = b2p*c*t43489;
                double t43498 = t43494+t43495+t43496+t43497;
                double t43499 = 1.0/t43498;
                double t43500 = t43470*t43499*(1.0/2.0);
                double t43501 = t43500+1.0;
                double t43502 = log(t43501);
                double t43503 = a1p*c*t43489;
                double t43504 = t43503+1.0;
                double t43505 = c0p*t43502*t43504*2.0;
                double t43506 = rho_a[index]+rho_b[index];
                double t43507 = 1.0/pow(t43506,1.0/3.0);
                double t43508 = c*t43507;
                double t43509 = sqrt(t43508);
                double t43510 = pow(t43508,3.0/2.0);
                double t43511 = 1.0/pow(t43506,2.0/3.0);
                double t43512 = b1p*t43509;
                double t43513 = b3p*t43510;
                double t43514 = b4p*t43511*t43468;
                double t43515 = b2p*c*t43507;
                double t43516 = t43512+t43513+t43514+t43515;
                double t43517 = 1.0/t43516;
                double t43518 = t43470*t43517*(1.0/2.0);
                double t43519 = t43518+1.0;
                double t43520 = log(t43519);
                double t43521 = a1p*c*t43507;
                double t43522 = t43521+1.0;
                double t43523 = c0p*t43520*t43522*2.0;
                double t43524 = rho_a[index]-rho_b[index];
                double t43525 = t43524*t43524;
                double t43526 = 1.0/t43506;
                double t43527 = t43524*t43526;
                double t43528 = 1.0/(t43506*t43506*t43506*t43506);
                double t43529 = t43525*t43525;
                double t43530 = t43527+1.0;
                double t43531 = pow(t43530,4.0/3.0);
                double t43532 = -t43527+1.0;
                double t43533 = pow(t43532,4.0/3.0);
                double t43534 = t43531+t43533-2.0;
                double t43535 = gcab*gcab;
                double t43536 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t43537 = 1.0/pow(rho_b[index],8.0/3.0);
                double t43538 = 1.0/pow(rho_a[index],8.0/3.0);
                double t43539 = gamma_aa[index]*t43538*(1.0/2.0);
                double t43540 = gamma_bb[index]*t43537*(1.0/2.0);
                double t43541 = t43540+t43539;
                double t43542 = gamma_aa[index]*gcab*t43536*(8.0/3.0);
                double t43543 = gamma_aa[index]*t43541*t43535*t43536*(8.0/3.0);
                double t43544 = t43542+t43543;
                double t43545 = t43541*t43541;
                double t43546 = t43535*t43545;
                double t43547 = gcab*t43541*2.0;
                double t43548 = t43546+t43547+1.0;
                double t43549 = gcab*t43537;
                double t43550 = t43541*t43535*t43537;
                double t43551 = t43550+t43549;
                double t43552 = 1.0/(t43548*t43548);
                double t43553 = gcab*t43541;
                double t43554 = t43553+1.0;
                double t43555 = c0p*t43481*t43479*2.0;
                double t43556 = 1.0/(t43554*t43554);
                double t43557 = 1.0/t43548;
                double t43558 = 1.0/pow(t43506,4.0/3.0);
                double t43559 = b1f*t43509;
                double t43560 = b3f*t43510;
                double t43561 = b4f*t43511*t43468;
                double t43562 = b2f*c*t43507;
                double t43563 = t43560+t43561+t43562+t43559;
                double t43564 = 1.0/t43563;
                double t43565 = t43564*t43488*(1.0/2.0);
                double t43566 = t43565+1.0;
                double t43567 = log(t43566);
                double t43568 = a1f*c*t43507;
                double t43569 = t43568+1.0;
                double t43571 = c0f*t43567*t43569*2.0;
                double t43570 = t43523-t43571;
                double t43572 = 1.0/(t43506*t43506);
                double t43599 = t43524*t43572;
                double t43573 = t43526-t43599;
                double t43574 = 1.0/pow(t43506,5.0/3.0);
                double t43575 = 1.0/sqrt(t43508);
                double t43576 = 1.0/t43519;
                double t43577 = 1.0/(t43516*t43516);
                double t43578 = b4p*t43574*t43468*(2.0/3.0);
                double t43579 = b2p*c*t43558*(1.0/3.0);
                double t43580 = b1p*c*t43575*t43558*(1.0/6.0);
                double t43581 = b3p*c*t43509*t43558*(1.0/2.0);
                double t43582 = t43580+t43581+t43578+t43579;
                double t43583 = t43522*t43582*t43576*t43577;
                double t43584 = 1.0/d2fz0;
                double t43585 = 1.0/Aa;
                double t43586 = b1a*t43509;
                double t43587 = b3a*t43510;
                double t43588 = b4a*t43511*t43468;
                double t43589 = b2a*c*t43507;
                double t43590 = t43586+t43587+t43588+t43589;
                double t43591 = 1.0/t43590;
                double t43592 = t43591*t43585*(1.0/2.0);
                double t43593 = t43592+1.0;
                double t43594 = log(t43593);
                double t43595 = a1a*c*t43507;
                double t43596 = t43595+1.0;
                double t43597 = 1.0/(t43506*t43506*t43506*t43506*t43506);
                double t43598 = pow(t43530,1.0/3.0);
                double t43600 = t43573*t43598*(4.0/3.0);
                double t43601 = pow(t43532,1.0/3.0);
                double t43602 = t43600-t43601*t43573*(4.0/3.0);
                double t43603 = t43528*t43529;
                double t43604 = t43603-1.0;
                double t43605 = a1f*c*t43464;
                double t43606 = t43605+1.0;
                double t43607 = b1f*t43466;
                double t43608 = b3f*t43467;
                double t43609 = b4f*t43468*t43469;
                double t43610 = b2f*c*t43464;
                double t43611 = t43610+t43607+t43608+t43609;
                double t43612 = 1.0/t43611;
                double t43613 = t43612*t43488*(1.0/2.0);
                double t43614 = t43613+1.0;
                double t43615 = 1.0/pow(rho_a[index],4.0/3.0);
                double t43616 = 1.0/pow(rho_a[index],5.0/3.0);
                double t43617 = 1.0/sqrt(t43465);
                double t43618 = log(t43614);
                double t43619 = 1.0/t43478;
                double t43620 = 1.0/(t43475*t43475);
                double t43621 = b4p*t43616*t43468*(2.0/3.0);
                double t43622 = b2p*c*t43615*(1.0/3.0);
                double t43623 = b1p*c*t43615*t43617*(1.0/6.0);
                double t43624 = b3p*c*t43615*t43466*(1.0/2.0);
                double t43625 = t43621+t43622+t43623+t43624;
                double t43626 = t43620*t43481*t43625*t43619;
                double t43627 = Aa*t43604*t43534*t43584*t43594*t43487*t43596*2.0;
                double t43628 = t43555-c0f*t43606*t43618*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t43555-t43484*t43628*t43487)+rho_b[index]*(t43505-t43484* \
                   t43487*(t43505-c0f*log((t43488*(1.0/2.0))/(b1f*t43491+b3f*t43492+b2f*c*t43489+b4f*t43493*t43468)+1.0) \
                   *(a1f*c*t43489+1.0)*2.0))-t43506*(t43523+t43627-t43534*t43570*t43528*t43529*t43487))*(ccab2*t43541* \
                   t43552*t43535*t43544*t43537-ccab2*t43551*t43535*t43544*t43545*1.0/(t43548*t43548*t43548)*2.0+ccab1* \
                   gamma_aa[index]*t43535*t43536*t43537*t43556*(4.0/3.0)-ccab2*gamma_aa[index]*t43535*t43536*t43537*t43557* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t43541*t43551*t43552*t43535*t43536*(8.0/3.0)+ccab2*gamma_aa[index]* \
                   t43552*(t43535*t43535)*t43536*t43545*t43537*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t43541*t43535*t43536* \
                   1.0/(t43554*t43554*t43554)*t43537*(4.0/3.0))-((ccab1*gcab*t43537*(1.0/2.0))/t43554-ccab2*t43551*t43552* \
                   t43535*t43545-ccab1*t43541*t43535*t43537*t43556*(1.0/2.0)+ccab2*t43541*t43535*t43537*t43557)*(t43523- \
                   t43555+t43627+rho_a[index]*(-t43626+t43484*t43487*(t43626-(1.0/(t43611*t43611)*t43606*(b2f*c*t43615* \
                   (1.0/3.0)+b4f*t43616*t43468*(2.0/3.0)+b1f*c*t43615*t43617*(1.0/6.0)+b3f*c*t43615*t43466*(1.0/2.0)) \
                   )/t43614+a1f*c*c0f*t43615*t43618*(2.0/3.0)-a1p*c*c0p*t43615*t43479*(2.0/3.0))+a1p*c*c0p*t43615*t43479* \
                   (2.0/3.0))-t43506*(-t43583+t43534*t43528*t43529*t43487*(t43583-(1.0/(t43563*t43563)*t43569*(b2f*c* \
                   t43558*(1.0/3.0)+b4f*t43574*t43468*(2.0/3.0)+b1f*c*t43575*t43558*(1.0/6.0)+b3f*c*t43509*t43558*(1.0/ \
                   2.0)))/t43566+a1f*c*c0f*t43558*t43567*(2.0/3.0)-a1p*c*c0p*t43520*t43558*(2.0/3.0))+a1p*c*c0p*t43520* \
                   t43558*(2.0/3.0)+t43602*t43570*t43528*t43529*t43487-t43534*t43570*t43529*t43487*t43597*4.0+t43524* \
                   t43525*t43534*t43570*t43528*t43487*4.0+Aa*t43534*t43584*t43594*t43487*t43596*(t43529*t43597*4.0-t43524* \
                   t43525*t43528*4.0)*2.0-Aa*t43602*t43604*t43584*t43594*t43487*t43596*2.0-(t43604*t43534*1.0/(t43590* \
                   t43590)*t43584*t43487*t43596*(b2a*c*t43558*(1.0/3.0)+b4a*t43574*t43468*(2.0/3.0)+b1a*c*t43575*t43558* \
                   (1.0/6.0)+b3a*c*t43509*t43558*(1.0/2.0)))/t43593+Aa*a1a*c*t43604*t43534*t43584*t43558*t43594*t43487* \
                   (2.0/3.0))+t43484*t43628*t43487-t43534*t43570*t43528*t43529*t43487);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43630 = 1.0/pow(rho_a[index],1.0/3.0);
                double t43631 = c*t43630;
                double t43632 = sqrt(t43631);
                double t43633 = pow(t43631,3.0/2.0);
                double t43634 = c*c;
                double t43635 = 1.0/pow(rho_a[index],2.0/3.0);
                double t43636 = 1.0/c0p;
                double t43637 = b1p*t43632;
                double t43638 = b3p*t43633;
                double t43639 = b4p*t43634*t43635;
                double t43640 = b2p*c*t43630;
                double t43641 = t43640+t43637+t43638+t43639;
                double t43642 = 1.0/t43641;
                double t43643 = t43642*t43636*(1.0/2.0);
                double t43644 = t43643+1.0;
                double t43645 = log(t43644);
                double t43646 = a1p*c*t43630;
                double t43647 = t43646+1.0;
                double t43648 = pow(2.0,1.0/3.0);
                double t43649 = t43648*2.0;
                double t43650 = t43649-2.0;
                double t43651 = two_13*2.0;
                double t43652 = t43651-2.0;
                double t43653 = 1.0/t43652;
                double t43654 = 1.0/c0f;
                double t43655 = 1.0/pow(rho_b[index],1.0/3.0);
                double t43656 = c*t43655;
                double t43657 = sqrt(t43656);
                double t43658 = pow(t43656,3.0/2.0);
                double t43659 = 1.0/pow(rho_b[index],2.0/3.0);
                double t43660 = b1p*t43657;
                double t43661 = b3p*t43658;
                double t43662 = b4p*t43634*t43659;
                double t43663 = b2p*c*t43655;
                double t43664 = t43660+t43661+t43662+t43663;
                double t43665 = 1.0/t43664;
                double t43666 = t43636*t43665*(1.0/2.0);
                double t43667 = t43666+1.0;
                double t43668 = log(t43667);
                double t43669 = a1p*c*t43655;
                double t43670 = t43669+1.0;
                double t43671 = c0p*t43670*t43668*2.0;
                double t43672 = rho_a[index]+rho_b[index];
                double t43673 = 1.0/pow(t43672,1.0/3.0);
                double t43674 = c*t43673;
                double t43675 = sqrt(t43674);
                double t43676 = pow(t43674,3.0/2.0);
                double t43677 = 1.0/pow(t43672,2.0/3.0);
                double t43678 = b1p*t43675;
                double t43679 = b3p*t43676;
                double t43680 = b4p*t43634*t43677;
                double t43681 = b2p*c*t43673;
                double t43682 = t43680+t43681+t43678+t43679;
                double t43683 = 1.0/t43682;
                double t43684 = t43636*t43683*(1.0/2.0);
                double t43685 = t43684+1.0;
                double t43686 = log(t43685);
                double t43687 = a1p*c*t43673;
                double t43688 = t43687+1.0;
                double t43689 = c0p*t43686*t43688*2.0;
                double t43690 = rho_a[index]-rho_b[index];
                double t43691 = t43690*t43690;
                double t43692 = 1.0/t43672;
                double t43693 = t43690*t43692;
                double t43694 = 1.0/(t43672*t43672*t43672*t43672);
                double t43695 = t43691*t43691;
                double t43696 = t43693+1.0;
                double t43697 = pow(t43696,4.0/3.0);
                double t43698 = -t43693+1.0;
                double t43699 = pow(t43698,4.0/3.0);
                double t43700 = t43697+t43699-2.0;
                double t43701 = gcab*gcab;
                double t43702 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t43703 = 1.0/pow(rho_a[index],8.0/3.0);
                double t43704 = gamma_aa[index]*t43703*(1.0/2.0);
                double t43705 = 1.0/pow(rho_b[index],8.0/3.0);
                double t43706 = gamma_bb[index]*t43705*(1.0/2.0);
                double t43707 = t43704+t43706;
                double t43708 = gamma_bb[index]*gcab*t43702*(8.0/3.0);
                double t43709 = gamma_bb[index]*t43701*t43702*t43707*(8.0/3.0);
                double t43710 = t43708+t43709;
                double t43711 = t43707*t43707;
                double t43712 = t43701*t43711;
                double t43713 = gcab*t43707*2.0;
                double t43714 = t43712+t43713+1.0;
                double t43715 = gcab*t43703;
                double t43716 = t43701*t43703*t43707;
                double t43717 = t43715+t43716;
                double t43718 = 1.0/(t43714*t43714);
                double t43719 = gcab*t43707;
                double t43720 = t43719+1.0;
                double t43721 = c0p*t43645*t43647*2.0;
                double t43722 = 1.0/(t43720*t43720);
                double t43723 = 1.0/t43714;
                double t43724 = 1.0/pow(t43672,4.0/3.0);
                double t43725 = b1f*t43675;
                double t43726 = b3f*t43676;
                double t43727 = b4f*t43634*t43677;
                double t43728 = b2f*c*t43673;
                double t43729 = t43725+t43726+t43727+t43728;
                double t43730 = 1.0/t43729;
                double t43731 = t43730*t43654*(1.0/2.0);
                double t43732 = t43731+1.0;
                double t43733 = log(t43732);
                double t43734 = a1f*c*t43673;
                double t43735 = t43734+1.0;
                double t43737 = c0f*t43733*t43735*2.0;
                double t43736 = -t43737+t43689;
                double t43738 = 1.0/(t43672*t43672);
                double t43739 = t43690*t43738;
                double t43740 = t43692+t43739;
                double t43741 = t43737-t43689;
                double t43742 = 1.0/pow(t43672,5.0/3.0);
                double t43743 = 1.0/sqrt(t43674);
                double t43744 = 1.0/t43685;
                double t43745 = 1.0/(t43682*t43682);
                double t43746 = b4p*t43634*t43742*(2.0/3.0);
                double t43747 = b2p*c*t43724*(1.0/3.0);
                double t43748 = b1p*c*t43724*t43743*(1.0/6.0);
                double t43749 = b3p*c*t43724*t43675*(1.0/2.0);
                double t43750 = t43746+t43747+t43748+t43749;
                double t43751 = 1.0/d2fz0;
                double t43752 = 1.0/Aa;
                double t43753 = b1a*t43675;
                double t43754 = b3a*t43676;
                double t43755 = b4a*t43634*t43677;
                double t43756 = b2a*c*t43673;
                double t43757 = t43753+t43754+t43755+t43756;
                double t43758 = 1.0/t43757;
                double t43759 = t43752*t43758*(1.0/2.0);
                double t43760 = t43759+1.0;
                double t43761 = log(t43760);
                double t43762 = a1a*c*t43673;
                double t43763 = t43762+1.0;
                double t43764 = 1.0/(t43672*t43672*t43672*t43672*t43672);
                double t43765 = pow(t43696,1.0/3.0);
                double t43766 = t43740*t43765*(4.0/3.0);
                double t43767 = pow(t43698,1.0/3.0);
                double t43768 = t43766-t43740*t43767*(4.0/3.0);
                double t43769 = t43694*t43695;
                double t43770 = t43769-1.0;
                double t43771 = a1f*c*t43655;
                double t43772 = t43771+1.0;
                double t43773 = b1f*t43657;
                double t43774 = b3f*t43658;
                double t43775 = b4f*t43634*t43659;
                double t43776 = b2f*c*t43655;
                double t43777 = t43773+t43774+t43775+t43776;
                double t43778 = 1.0/t43777;
                double t43779 = t43654*t43778*(1.0/2.0);
                double t43780 = t43779+1.0;
                double t43781 = 1.0/pow(rho_b[index],4.0/3.0);
                double t43782 = 1.0/pow(rho_b[index],5.0/3.0);
                double t43783 = 1.0/sqrt(t43656);
                double t43784 = log(t43780);
                double t43785 = 1.0/t43667;
                double t43786 = 1.0/(t43664*t43664);
                double t43787 = b4p*t43634*t43782*(2.0/3.0);
                double t43788 = b2p*c*t43781*(1.0/3.0);
                double t43789 = b1p*c*t43781*t43783*(1.0/6.0);
                double t43790 = b3p*c*t43781*t43657*(1.0/2.0);
                double t43791 = t43790+t43787+t43788+t43789;
                double t43792 = t43670*t43791*t43785*t43786;
                double t43793 = t43671-c0f*t43772*t43784*2.0;
                double t43794 = Aa*t43700*t43751*t43653*t43761*t43770*t43763*2.0;
                double t43795 = a1p*c*c0p*t43724*t43686*(2.0/3.0);
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t43671-t43650*t43653*t43793)+rho_a[index]*(t43721-t43650* \
                   t43653*(t43721-c0f*log((t43654*(1.0/2.0))/(b1f*t43632+b3f*t43633+b2f*c*t43630+b4f*t43634*t43635)+1.0) \
                   *(a1f*c*t43630+1.0)*2.0))-t43672*(t43794+t43689-t43700*t43653*t43736*t43694*t43695))*(ccab2*t43701* \
                   t43710*t43703*t43707*t43718-ccab2*t43701*t43710*t43711*1.0/(t43714*t43714*t43714)*t43717*2.0+ccab1* \
                   gamma_bb[index]*t43701*t43702*t43703*t43722*(4.0/3.0)-ccab2*gamma_bb[index]*t43701*t43702*t43703*t43723* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t43701*t43702*t43707*t43717*t43718*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   (t43701*t43701)*t43702*t43711*t43703*t43718*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t43701*t43702*1.0/ \
                   (t43720*t43720*t43720)*t43703*t43707*(4.0/3.0))-((ccab1*gcab*t43703*(1.0/2.0))/t43720-ccab1*t43701* \
                   t43703*t43722*t43707*(1.0/2.0)+ccab2*t43701*t43703*t43723*t43707-ccab2*t43701*t43711*t43717*t43718) \
                   *(-t43671+t43794+t43689+rho_b[index]*(-t43792+t43650*t43653*(t43792-(t43772*1.0/(t43777*t43777)*(b2f* \
                   c*t43781*(1.0/3.0)+b4f*t43634*t43782*(2.0/3.0)+b1f*c*t43781*t43783*(1.0/6.0)+b3f*c*t43781*t43657*(1.0/ \
                   2.0)))/t43780+a1f*c*c0f*t43781*t43784*(2.0/3.0)-a1p*c*c0p*t43781*t43668*(2.0/3.0))+a1p*c*c0p*t43781* \
                   t43668*(2.0/3.0))-t43672*(t43795-t43750*t43744*t43745*t43688+t43700*t43741*t43653*t43764*t43695*4.0+ \
                   t43741*t43653*t43694*t43695*t43768-t43700*t43653*t43694*t43695*(t43795-t43750*t43744*t43745*t43688+ \
                   (t43735*1.0/(t43729*t43729)*(b2f*c*t43724*(1.0/3.0)+b4f*t43634*t43742*(2.0/3.0)+b1f*c*t43724*t43743* \
                   (1.0/6.0)+b3f*c*t43724*t43675*(1.0/2.0)))/t43732-a1f*c*c0f*t43724*t43733*(2.0/3.0))-t43700*t43653* \
                   t43690*t43691*t43736*t43694*4.0+Aa*t43700*t43751*t43653*t43761*t43763*(t43764*t43695*4.0+t43690*t43691* \
                   t43694*4.0)*2.0+Aa*t43751*t43653*t43761*t43770*t43763*t43768*2.0-(t43700*t43751*t43653*t43770*t43763* \
                   1.0/(t43757*t43757)*(b2a*c*t43724*(1.0/3.0)+b4a*t43634*t43742*(2.0/3.0)+b1a*c*t43724*t43743*(1.0/6.0) \
                   +b3a*c*t43724*t43675*(1.0/2.0)))/t43760+Aa*a1a*c*t43700*t43724*t43751*t43653*t43761*t43770*(2.0/3.0) \
                   )+t43650*t43653*t43793+t43700*t43741*t43653*t43694*t43695);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t43798 = 1.0/pow(rho_a[index],1.0/3.0);
                double t43799 = c*t43798;
                double t43800 = sqrt(t43799);
                double t43801 = pow(t43799,3.0/2.0);
                double t43802 = c*c;
                double t43803 = 1.0/pow(rho_a[index],2.0/3.0);
                double t43804 = 1.0/c0p;
                double t43805 = b1p*t43800;
                double t43806 = b3p*t43801;
                double t43807 = b4p*t43802*t43803;
                double t43808 = b2p*c*t43798;
                double t43809 = t43805+t43806+t43807+t43808;
                double t43810 = 1.0/t43809;
                double t43811 = t43810*t43804*(1.0/2.0);
                double t43812 = t43811+1.0;
                double t43813 = log(t43812);
                double t43814 = a1p*c*t43798;
                double t43815 = t43814+1.0;
                double t43816 = pow(2.0,1.0/3.0);
                double t43817 = t43816*2.0;
                double t43818 = t43817-2.0;
                double t43819 = two_13*2.0;
                double t43820 = t43819-2.0;
                double t43821 = 1.0/t43820;
                double t43822 = 1.0/c0f;
                double t43823 = 1.0/pow(rho_b[index],1.0/3.0);
                double t43824 = c*t43823;
                double t43825 = sqrt(t43824);
                double t43826 = pow(t43824,3.0/2.0);
                double t43827 = 1.0/pow(rho_b[index],2.0/3.0);
                double t43828 = b1p*t43825;
                double t43829 = b3p*t43826;
                double t43830 = b4p*t43802*t43827;
                double t43831 = b2p*c*t43823;
                double t43832 = t43830+t43831+t43828+t43829;
                double t43833 = 1.0/t43832;
                double t43834 = t43804*t43833*(1.0/2.0);
                double t43835 = t43834+1.0;
                double t43836 = log(t43835);
                double t43837 = a1p*c*t43823;
                double t43838 = t43837+1.0;
                double t43839 = c0p*t43836*t43838*2.0;
                double t43840 = rho_a[index]+rho_b[index];
                double t43841 = 1.0/pow(t43840,1.0/3.0);
                double t43842 = c*t43841;
                double t43843 = sqrt(t43842);
                double t43844 = pow(t43842,3.0/2.0);
                double t43845 = 1.0/pow(t43840,2.0/3.0);
                double t43846 = b1p*t43843;
                double t43847 = b3p*t43844;
                double t43848 = b4p*t43802*t43845;
                double t43849 = b2p*c*t43841;
                double t43850 = t43846+t43847+t43848+t43849;
                double t43851 = 1.0/t43850;
                double t43852 = t43804*t43851*(1.0/2.0);
                double t43853 = t43852+1.0;
                double t43854 = log(t43853);
                double t43855 = a1p*c*t43841;
                double t43856 = t43855+1.0;
                double t43857 = c0p*t43854*t43856*2.0;
                double t43858 = rho_a[index]-rho_b[index];
                double t43859 = t43858*t43858;
                double t43860 = 1.0/t43840;
                double t43861 = t43860*t43858;
                double t43862 = 1.0/(t43840*t43840*t43840*t43840);
                double t43863 = t43859*t43859;
                double t43864 = t43861+1.0;
                double t43865 = pow(t43864,4.0/3.0);
                double t43866 = -t43861+1.0;
                double t43867 = pow(t43866,4.0/3.0);
                double t43868 = t43865+t43867-2.0;
                double t43869 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t43870 = 1.0/pow(rho_a[index],8.0/3.0);
                double t43871 = gamma_aa[index]*t43870*(1.0/2.0);
                double t43872 = 1.0/pow(rho_b[index],8.0/3.0);
                double t43873 = gamma_bb[index]*t43872*(1.0/2.0);
                double t43874 = t43871+t43873;
                double t43875 = gcab*t43874;
                double t43876 = t43875+1.0;
                double t43877 = gcab*gcab;
                double t43878 = t43874*t43874;
                double t43879 = t43877*t43878;
                double t43880 = gcab*t43874*2.0;
                double t43881 = t43880+t43879+1.0;
                double t43882 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t43883 = 1.0/(t43876*t43876);
                double t43884 = 1.0/t43881;
                double t43885 = 1.0/(t43881*t43881);
                double t43886 = gamma_bb[index]*gcab*t43869*(8.0/3.0);
                double t43887 = gamma_bb[index]*t43874*t43877*t43869*(8.0/3.0);
                double t43888 = t43886+t43887;
                double t43889 = gcab*t43872;
                double t43890 = t43872*t43874*t43877;
                double t43891 = t43890+t43889;
                double t43892 = b1f*t43825;
                double t43893 = b3f*t43826;
                double t43894 = b4f*t43802*t43827;
                double t43895 = b2f*c*t43823;
                double t43896 = t43892+t43893+t43894+t43895;
                double t43897 = 1.0/t43896;
                double t43898 = t43822*t43897*(1.0/2.0);
                double t43899 = t43898+1.0;
                double t43900 = log(t43899);
                double t43901 = a1f*c*t43823;
                double t43902 = t43901+1.0;
                double t43972 = c0f*t43900*t43902*2.0;
                double t43903 = -t43972+t43839;
                double t43904 = t43839-t43821*t43903*t43818;
                double t43905 = gcaa*gcaa;
                double t43906 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t43907 = gamma_bb[index]*gcaa*t43872;
                double t43908 = t43907+1.0;
                double t43909 = gamma_bb[index]*gamma_bb[index];
                double t43910 = gamma_bb[index]*gcaa*t43872*2.0;
                double t43911 = t43905*t43906*t43909;
                double t43912 = t43910+t43911+1.0;
                double t43913 = 1.0/t43876;
                double t43914 = 1.0/pow(t43840,4.0/3.0);
                double t43915 = b1f*t43843;
                double t43916 = b3f*t43844;
                double t43917 = b4f*t43802*t43845;
                double t43918 = b2f*c*t43841;
                double t43919 = t43915+t43916+t43917+t43918;
                double t43920 = 1.0/t43919;
                double t43921 = t43920*t43822*(1.0/2.0);
                double t43922 = t43921+1.0;
                double t43923 = log(t43922);
                double t43924 = a1f*c*t43841;
                double t43925 = t43924+1.0;
                double t43927 = c0f*t43923*t43925*2.0;
                double t43926 = -t43927+t43857;
                double t43928 = 1.0/(t43840*t43840);
                double t43929 = t43928*t43858;
                double t43930 = t43860+t43929;
                double t43931 = t43927-t43857;
                double t43932 = 1.0/pow(t43840,5.0/3.0);
                double t43933 = 1.0/sqrt(t43842);
                double t43934 = 1.0/t43853;
                double t43935 = 1.0/(t43850*t43850);
                double t43936 = b4p*t43802*t43932*(2.0/3.0);
                double t43937 = b2p*c*t43914*(1.0/3.0);
                double t43938 = b1p*c*t43914*t43933*(1.0/6.0);
                double t43939 = b3p*c*t43914*t43843*(1.0/2.0);
                double t43940 = t43936+t43937+t43938+t43939;
                double t43941 = 1.0/d2fz0;
                double t43942 = 1.0/Aa;
                double t43943 = b1a*t43843;
                double t43944 = b3a*t43844;
                double t43945 = b4a*t43802*t43845;
                double t43946 = b2a*c*t43841;
                double t43947 = t43943+t43944+t43945+t43946;
                double t43948 = 1.0/t43947;
                double t43949 = t43942*t43948*(1.0/2.0);
                double t43950 = t43949+1.0;
                double t43951 = log(t43950);
                double t43952 = a1a*c*t43841;
                double t43953 = t43952+1.0;
                double t43954 = 1.0/(t43840*t43840*t43840*t43840*t43840);
                double t43955 = pow(t43864,1.0/3.0);
                double t43956 = t43930*t43955*(4.0/3.0);
                double t43957 = pow(t43866,1.0/3.0);
                double t43958 = t43956-t43930*t43957*(4.0/3.0);
                double t43959 = t43862*t43863;
                double t43960 = t43959-1.0;
                double t43961 = 1.0/pow(rho_b[index],4.0/3.0);
                double t43962 = 1.0/pow(rho_b[index],5.0/3.0);
                double t43963 = 1.0/sqrt(t43824);
                double t43964 = 1.0/t43835;
                double t43965 = 1.0/(t43832*t43832);
                double t43966 = b4p*t43802*t43962*(2.0/3.0);
                double t43967 = b2p*c*t43961*(1.0/3.0);
                double t43968 = b1p*c*t43961*t43963*(1.0/6.0);
                double t43969 = b3p*c*t43825*t43961*(1.0/2.0);
                double t43970 = t43966+t43967+t43968+t43969;
                double t43971 = t43970*t43838*t43964*t43965;
                double t43973 = Aa*t43821*t43941*t43951*t43960*t43953*t43868*2.0;
                double t43974 = a1p*c*c0p*t43914*t43854*(2.0/3.0);
                double t43975 = t43972-t43839;
                double t43976 = 1.0/t43908;
                double t43977 = 1.0/t43912;
                double t43978 = 1.0/(t43908*t43908);
                double t43979 = 1.0/(t43912*t43912);
                double t43980 = gcaa*t43872*2.0;
                double t43981 = gamma_bb[index]*t43905*t43906*2.0;
                double t43982 = t43980+t43981;
                double t43983 = gamma_bb[index]*gcaa*t43869*(1.6E1/3.0);
                double t43984 = t43905*t43882*t43909*(1.6E1/3.0);
                double t43985 = t43983+t43984;
                double t43986 = gx*gx;
                double t43987 = gamma_bb[index]*gx*t43872;
                double t43988 = t43987+1.0;
                double t43989 = gamma_bb[index]*gx*t43872*2.0;
                double t43990 = t43906*t43909*t43986;
                double t43991 = t43990+t43989+1.0;
                double t43992 = 1.0/t43899;
                double t43993 = 1.0/(t43896*t43896);
                double t43994 = b4f*t43802*t43962*(2.0/3.0);
                double t43995 = b2f*c*t43961*(1.0/3.0);
                double t43996 = b1f*c*t43961*t43963*(1.0/6.0);
                double t43997 = b3f*c*t43825*t43961*(1.0/2.0);
                double t43998 = t43994+t43995+t43996+t43997;
                double t43999 = a1f*c*c0f*t43900*t43961*(2.0/3.0);
                double t44000 = a1p*c*c0p*t43961*t43836*(2.0/3.0);
                double t44001 = ccaa1*gcaa*t43872*t43976;
                double t44002 = ccaa2*gamma_bb[index]*t43905*t43906*t43977*2.0;
                double t44003 = t44001+t44002-ccaa1*gamma_bb[index]*t43905*t43906*t43978-ccaa2*t43905*t43906*t43909* \
                   t43982*t43979;
                double t44004 = 1.0/t43988;
                double t44005 = 1.0/t43991;
                double t44006 = 1.0/(t43988*t43988);
                double t44007 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t44008 = 1.0/(t43991*t43991);
                double t44009 = gx*t43872*2.0;
                double t44010 = gamma_bb[index]*t43906*t43986*2.0;
                double t44011 = t44010+t44009;
                double t44012 = gamma_bb[index]*gx*t43869*(1.6E1/3.0);
                double t44013 = t43882*t43909*t43986*(1.6E1/3.0);
                double t44014 = t44012+t44013;
                v_rho_b_gamma_bb_[index] = (-rho_b[index]*t43904+t43840*(t43973+t43857-t43821*t43862*t43863*t43926* \
                   t43868)+rho_a[index]*(t43821*t43818*(c0p*t43813*t43815*2.0-c0f*log((t43822*(1.0/2.0))/(b1f*t43800+ \
                   b3f*t43801+b2f*c*t43798+b4f*t43802*t43803)+1.0)*(a1f*c*t43798+1.0)*2.0)-c0p*t43813*t43815*2.0))*(ccab1* \
                   gcab*t43913*t43869*(4.0/3.0)-ccab2*t43885*t43877*t43878*(gcab*t43869*(8.0/3.0)+gamma_bb[index]*t43882* \
                   t43877*(4.0/3.0)+t43874*t43877*t43869*(8.0/3.0))-ccab1*gamma_bb[index]*t43882*t43883*t43877*(4.0/3.0) \
                   +ccab2*gamma_bb[index]*t43882*t43884*t43877*(4.0/3.0)-ccab1*t43874*t43883*t43877*t43869*(4.0/3.0)+ \
                   ccab2*t43874*t43884*t43877*t43869*(8.0/3.0)-ccab2*t43872*t43874*t43885*t43877*t43888+ccab2*1.0/(t43881* \
                   t43881*t43881)*t43891*t43877*t43878*t43888*2.0-ccab2*gamma_bb[index]*t43891*t43874*t43885*t43877*t43869* \
                   (8.0/3.0)+ccab1*gamma_bb[index]*gcab*t43882*t43874*1.0/(t43876*t43876*t43876)*t43877*(4.0/3.0))-t43904* \
                   t44003-(ccab1*gcab*t43913*t43872*(1.0/2.0)-ccab1*t43872*t43874*t43883*t43877*(1.0/2.0)+ccab2*t43872* \
                   t43874*t43884*t43877-ccab2*t43891*t43885*t43877*t43878)*(t43973-t43839+t43857+rho_b[index]*(-t43971+ \
                   t44000+t43821*t43818*(t43971+t43999-t43902*t43992*t43993*t43998-a1p*c*c0p*t43961*t43836*(2.0/3.0)) \
                   )-t43840*(t43974-t43940*t43934*t43935*t43856+t43821*t43931*t43862*t43863*t43958+t43821*t43931*t43863* \
                   t43954*t43868*4.0-t43821*t43862*t43863*t43868*(t43974-t43940*t43934*t43935*t43856+(t43925*1.0/(t43919* \
                   t43919)*(b2f*c*t43914*(1.0/3.0)+b4f*t43802*t43932*(2.0/3.0)+b1f*c*t43914*t43933*(1.0/6.0)+b3f*c*t43914* \
                   t43843*(1.0/2.0)))/t43922-a1f*c*c0f*t43914*t43923*(2.0/3.0))-t43821*t43862*t43926*t43858*t43859*t43868* \
                   4.0+Aa*t43821*t43941*t43951*t43953*t43868*(t43863*t43954*4.0+t43862*t43858*t43859*4.0)*2.0+Aa*t43821* \
                   t43941*t43951*t43960*t43953*t43958*2.0-(t43821*t43941*t43960*t43953*1.0/(t43947*t43947)*t43868*(b2a* \
                   c*t43914*(1.0/3.0)+b4a*t43802*t43932*(2.0/3.0)+b1a*c*t43914*t43933*(1.0/6.0)+b3a*c*t43914*t43843*(1.0/ \
                   2.0)))/t43950+Aa*a1a*c*t43821*t43914*t43941*t43951*t43960*t43868*(2.0/3.0))-t43821*t43818*t43975+t43821* \
                   t43931*t43862*t43863*t43868)+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t43872*t44004-cx1*gamma_bb[index]* \
                   t43906*t43986*t44006+cx2*gamma_bb[index]*t43906*t43986*t44005*2.0-cx2*t43906*t43909*t43986*t44011* \
                   t44008)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t43869*t44004*(8.0/3.0)-cx1*gamma_bb[index]* \
                   t43882*t43986*t44006*8.0+cx2*gamma_bb[index]*t43882*t43986*t44005*(3.2E1/3.0)-cx2*t43882*t43909*t43986* \
                   t44011*t44008*(1.6E1/3.0)+cx1*gx*t43909*t43986*1.0/(t43988*t43988*t43988)*t44007*(1.6E1/3.0)-cx2*t43906* \
                   t43909*t43986*t44008*(gx*t43869*(1.6E1/3.0)+gamma_bb[index]*t43882*t43986*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t43906*t43986*t44014*t44008*2.0+cx2*t43906*t43909*1.0/(t43991*t43991*t43991)*t43986*t44011*t44014* \
                   2.0)+rho_b[index]*t44003*(-t43971+t44000+t43821*t43818*(t43971+t43999-t44000-t43902*t43992*t43993* \
                   t43998))+rho_b[index]*(t43839+t43821*t43818*t43975)*(ccaa1*gcaa*t43976*t43869*(8.0/3.0)-ccaa1*gamma_bb[index]* \
                   t43905*t43882*t43978*8.0+ccaa2*gamma_bb[index]*t43905*t43882*t43977*(3.2E1/3.0)-ccaa2*t43905*t43882* \
                   t43909*t43982*t43979*(1.6E1/3.0)+ccaa1*gcaa*t43905*1.0/(t43908*t43908*t43908)*t43909*t44007*(1.6E1/ \
                   3.0)-ccaa2*t43905*t43906*t43909*t43979*(gcaa*t43869*(1.6E1/3.0)+gamma_bb[index]*t43905*t43882*(3.2E1/ \
                   3.0))-ccaa2*gamma_bb[index]*t43905*t43906*t43985*t43979*2.0+ccaa2*1.0/(t43912*t43912*t43912)*t43905* \
                   t43906*t43909*t43982*t43985*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t44631 = 1.0/pow(rho_b[index],1.0/3.0);
                double t44632 = c*t44631;
                double t44633 = sqrt(t44632);
                double t44634 = pow(t44632,3.0/2.0);
                double t44635 = c*c;
                double t44636 = 1.0/pow(rho_b[index],2.0/3.0);
                double t44637 = 1.0/c0p;
                double t44638 = b1p*t44633;
                double t44639 = b3p*t44634;
                double t44640 = b4p*t44635*t44636;
                double t44641 = b2p*c*t44631;
                double t44642 = t44640+t44641+t44638+t44639;
                double t44643 = 1.0/t44642;
                double t44644 = t44643*t44637*(1.0/2.0);
                double t44645 = t44644+1.0;
                double t44646 = log(t44645);
                double t44647 = a1p*c*t44631;
                double t44648 = t44647+1.0;
                double t44649 = 1.0/pow(rho_b[index],8.0/3.0);
                double t44650 = gcaa*gcaa;
                double t44651 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t44652 = gamma_bb[index]*gcaa*t44649;
                double t44653 = t44652+1.0;
                double t44654 = gamma_bb[index]*gamma_bb[index];
                double t44655 = gamma_bb[index]*gcaa*t44649*2.0;
                double t44656 = t44650*t44651*t44654;
                double t44657 = t44655+t44656+1.0;
                double t44658 = pow(2.0,1.0/3.0);
                double t44659 = t44658*2.0;
                double t44660 = t44659-2.0;
                double t44661 = two_13*2.0;
                double t44662 = t44661-2.0;
                double t44663 = 1.0/t44662;
                double t44664 = 1.0/c0f;
                double t44665 = b1f*t44633;
                double t44666 = b3f*t44634;
                double t44667 = b4f*t44635*t44636;
                double t44668 = b2f*c*t44631;
                double t44669 = t44665+t44666+t44667+t44668;
                double t44670 = 1.0/t44669;
                double t44671 = t44670*t44664*(1.0/2.0);
                double t44672 = t44671+1.0;
                double t44673 = log(t44672);
                double t44674 = a1f*c*t44631;
                double t44675 = t44674+1.0;
                double t44676 = c0f*t44673*t44675*2.0;
                double t44677 = c0p*t44646*t44648*2.0;
                double t44678 = 1.0/t44653;
                double t44679 = 1.0/t44657;
                double t44680 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t44681 = 1.0/(t44653*t44653);
                double t44682 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t44683 = 1.0/(t44657*t44657);
                double t44684 = gcaa*t44649*2.0;
                double t44685 = gamma_bb[index]*t44650*t44651*2.0;
                double t44686 = t44684+t44685;
                double t44687 = gamma_bb[index]*gcaa*t44682*(1.6E1/3.0);
                double t44688 = t44650*t44680*t44654*(1.6E1/3.0);
                double t44689 = t44687+t44688;
                double t44690 = gx*gx;
                double t44691 = gamma_bb[index]*gx*t44649;
                double t44692 = t44691+1.0;
                double t44693 = gamma_bb[index]*gx*t44649*2.0;
                double t44694 = t44651*t44654*t44690;
                double t44695 = t44693+t44694+1.0;
                double t44696 = 1.0/pow(rho_b[index],4.0/3.0);
                double t44697 = 1.0/pow(rho_b[index],5.0/3.0);
                double t44698 = 1.0/sqrt(t44632);
                double t44699 = 1.0/t44645;
                double t44700 = 1.0/(t44642*t44642);
                double t44701 = b4p*t44635*t44697*(2.0/3.0);
                double t44702 = b2p*c*t44696*(1.0/3.0);
                double t44703 = b1p*c*t44696*t44698*(1.0/6.0);
                double t44704 = b3p*c*t44633*t44696*(1.0/2.0);
                double t44705 = t44701+t44702+t44703+t44704;
                double t44706 = t44700*t44705*t44648*t44699;
                double t44707 = ccaa1*gcaa*t44649*t44678;
                double t44708 = ccaa2*gamma_bb[index]*t44650*t44651*t44679*2.0;
                double t44709 = t44707+t44708-ccaa1*gamma_bb[index]*t44650*t44651*t44681-ccaa2*t44650*t44651*t44654* \
                   t44683*t44686;
                double t44710 = 1.0/t44692;
                double t44711 = 1.0/t44695;
                double t44712 = 1.0/(t44692*t44692);
                double t44713 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t44714 = 1.0/(t44695*t44695);
                double t44715 = gx*t44649*2.0;
                double t44716 = gamma_bb[index]*t44651*t44690*2.0;
                double t44717 = t44715+t44716;
                double t44718 = gamma_bb[index]*gx*t44682*(1.6E1/3.0);
                double t44719 = t44680*t44654*t44690*(1.6E1/3.0);
                double t44720 = t44718+t44719;
                v_rho_b_gamma_bb_[index] = -t44709*(t44677+t44660*t44663*(t44676-c0p*t44646*t44648*2.0))+rho_b[index]* \
                   t44709*(-t44706+t44660*t44663*(t44706-(t44675*1.0/(t44669*t44669)*(b2f*c*t44696*(1.0/3.0)+b4f*t44635* \
                   t44697*(2.0/3.0)+b1f*c*t44696*t44698*(1.0/6.0)+b3f*c*t44633*t44696*(1.0/2.0)))/t44672+a1f*c*c0f*t44673* \
                   t44696*(2.0/3.0)-a1p*c*c0p*t44646*t44696*(2.0/3.0))+a1p*c*c0p*t44646*t44696*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t44710*t44649-cx1*gamma_bb[index]*t44712*t44651*t44690+cx2*gamma_bb[index]*t44711*t44651* \
                   t44690*2.0-cx2*t44651*t44714*t44654*t44690*t44717)*(4.0/3.0)+rho_b[index]*(t44677+t44660*t44663*(t44676- \
                   t44677))*(ccaa1*gcaa*t44682*t44678*(8.0/3.0)-ccaa1*gamma_bb[index]*t44650*t44680*t44681*8.0+ccaa2* \
                   gamma_bb[index]*t44650*t44680*t44679*(3.2E1/3.0)-ccaa2*t44650*t44680*t44654*t44683*t44686*(1.6E1/3.0) \
                   +ccaa1*gcaa*t44650*t44713*1.0/(t44653*t44653*t44653)*t44654*(1.6E1/3.0)-ccaa2*t44650*t44651*t44654* \
                   t44683*(gcaa*t44682*(1.6E1/3.0)+gamma_bb[index]*t44650*t44680*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t44650* \
                   t44651*t44683*t44689*2.0+ccaa2*t44650*t44651*t44654*1.0/(t44657*t44657*t44657)*t44686*t44689*2.0)- \
                   c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t44710*t44682*(8.0/3.0)-cx1*gamma_bb[index]*t44712*t44680*t44690* \
                   8.0+cx2*gamma_bb[index]*t44711*t44680*t44690*(3.2E1/3.0)-cx2*t44714*t44680*t44654*t44690*t44717*(1.6E1/ \
                   3.0)+cx1*gx*t44713*t44654*t44690*1.0/(t44692*t44692*t44692)*(1.6E1/3.0)-cx2*t44651*t44714*t44654*t44690* \
                   (gx*t44682*(1.6E1/3.0)+gamma_bb[index]*t44680*t44690*(3.2E1/3.0))-cx2*gamma_bb[index]*t44720*t44651* \
                   t44714*t44690*2.0+cx2*t44720*t44651*t44654*t44690*t44717*1.0/(t44695*t44695*t44695)*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t44016 = 1.0/pow(rho_a[index],1.0/3.0);
                double t44017 = c*t44016;
                double t44018 = sqrt(t44017);
                double t44019 = pow(t44017,3.0/2.0);
                double t44020 = c*c;
                double t44021 = 1.0/pow(rho_a[index],2.0/3.0);
                double t44022 = 1.0/c0p;
                double t44023 = b1p*t44018;
                double t44024 = b3p*t44019;
                double t44025 = b4p*t44020*t44021;
                double t44026 = b2p*c*t44016;
                double t44027 = t44023+t44024+t44025+t44026;
                double t44028 = 1.0/t44027;
                double t44029 = t44022*t44028*(1.0/2.0);
                double t44030 = t44029+1.0;
                double t44031 = log(t44030);
                double t44032 = a1p*c*t44016;
                double t44033 = t44032+1.0;
                double t44034 = pow(2.0,1.0/3.0);
                double t44035 = t44034*2.0;
                double t44036 = t44035-2.0;
                double t44037 = two_13*2.0;
                double t44038 = t44037-2.0;
                double t44039 = 1.0/t44038;
                double t44040 = 1.0/c0f;
                double t44041 = 1.0/pow(rho_b[index],1.0/3.0);
                double t44042 = c*t44041;
                double t44043 = sqrt(t44042);
                double t44044 = pow(t44042,3.0/2.0);
                double t44045 = 1.0/pow(rho_b[index],2.0/3.0);
                double t44046 = b1p*t44043;
                double t44047 = b3p*t44044;
                double t44048 = b4p*t44020*t44045;
                double t44049 = b2p*c*t44041;
                double t44050 = t44046+t44047+t44048+t44049;
                double t44051 = 1.0/t44050;
                double t44052 = t44022*t44051*(1.0/2.0);
                double t44053 = t44052+1.0;
                double t44054 = log(t44053);
                double t44055 = a1p*c*t44041;
                double t44056 = t44055+1.0;
                double t44057 = c0p*t44054*t44056*2.0;
                double t44058 = rho_a[index]+rho_b[index];
                double t44059 = 1.0/pow(t44058,1.0/3.0);
                double t44060 = c*t44059;
                double t44061 = sqrt(t44060);
                double t44062 = pow(t44060,3.0/2.0);
                double t44063 = 1.0/pow(t44058,2.0/3.0);
                double t44064 = b1p*t44061;
                double t44065 = b3p*t44062;
                double t44066 = b4p*t44020*t44063;
                double t44067 = b2p*c*t44059;
                double t44068 = t44064+t44065+t44066+t44067;
                double t44069 = 1.0/t44068;
                double t44070 = t44022*t44069*(1.0/2.0);
                double t44071 = t44070+1.0;
                double t44072 = log(t44071);
                double t44073 = a1p*c*t44059;
                double t44074 = t44073+1.0;
                double t44075 = c0p*t44072*t44074*2.0;
                double t44076 = rho_a[index]-rho_b[index];
                double t44077 = t44076*t44076;
                double t44078 = 1.0/t44058;
                double t44079 = t44076*t44078;
                double t44080 = 1.0/(t44058*t44058*t44058*t44058);
                double t44081 = t44077*t44077;
                double t44082 = t44079+1.0;
                double t44083 = pow(t44082,4.0/3.0);
                double t44084 = -t44079+1.0;
                double t44085 = pow(t44084,4.0/3.0);
                double t44086 = t44083+t44085-2.0;
                double t44087 = gcab*gcab;
                double t44088 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t44089 = 1.0/pow(rho_a[index],8.0/3.0);
                double t44090 = gamma_aa[index]*t44089*(1.0/2.0);
                double t44091 = 1.0/pow(rho_b[index],8.0/3.0);
                double t44092 = gamma_bb[index]*t44091*(1.0/2.0);
                double t44093 = t44090+t44092;
                double t44094 = gcab*t44093;
                double t44095 = t44094+1.0;
                double t44096 = t44093*t44093;
                double t44097 = t44087*t44096;
                double t44098 = gcab*t44093*2.0;
                double t44099 = t44097+t44098+1.0;
                double t44101 = gcab*t44089;
                double t44102 = t44093*t44087*t44089;
                double t44100 = t44101+t44102;
                double t44103 = 1.0/(t44099*t44099);
                double t44104 = b1f*t44018;
                double t44105 = b3f*t44019;
                double t44106 = b4f*t44020*t44021;
                double t44107 = b2f*c*t44016;
                double t44108 = t44104+t44105+t44106+t44107;
                double t44109 = 1.0/t44108;
                double t44110 = t44040*t44109*(1.0/2.0);
                double t44111 = t44110+1.0;
                double t44112 = log(t44111);
                double t44113 = a1f*c*t44016;
                double t44114 = t44113+1.0;
                double t44115 = c0f*t44112*t44114*2.0;
                double t44116 = c0p*t44031*t44033*2.0;
                double t44117 = gcaa*gcaa;
                double t44118 = gamma_aa[index]*gcaa*t44089;
                double t44119 = t44118+1.0;
                double t44120 = gamma_aa[index]*gamma_aa[index];
                double t44121 = gamma_aa[index]*gcaa*t44089*2.0;
                double t44122 = t44120*t44117*t44088;
                double t44123 = t44121+t44122+1.0;
                double t44125 = gcaa*t44089*2.0;
                double t44126 = gamma_aa[index]*t44117*t44088*2.0;
                double t44124 = t44125+t44126;
                double t44127 = 1.0/(t44123*t44123);
                double t44128 = gx*gx;
                double t44129 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t44130 = gamma_aa[index]*gx*t44089;
                double t44131 = t44130+1.0;
                double t44132 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t44133 = gamma_aa[index]*gx*t44089*2.0;
                double t44134 = t44120*t44128*t44088;
                double t44135 = t44133+t44134+1.0;
                double t44137 = gx*t44089*2.0;
                double t44138 = gamma_aa[index]*t44128*t44088*2.0;
                double t44136 = t44137+t44138;
                double t44139 = 1.0/(t44135*t44135);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t44116+t44036*t44039*(t44115-c0p*t44031*t44033*2.0) \
                   )+rho_b[index]*(t44057-t44036*t44039*(t44057-c0f*log((t44040*(1.0/2.0))/(b1f*t44043+b3f*t44044+b2f* \
                   c*t44041+b4f*t44020*t44045)+1.0)*(a1f*c*t44041+1.0)*2.0))-t44058*(t44075-t44080*t44081*t44039*t44086* \
                   (t44075-c0f*log((t44040*(1.0/2.0))/(b1f*t44061+b3f*t44062+b2f*c*t44059+b4f*t44020*t44063)+1.0)*(a1f* \
                   c*t44059+1.0)*2.0)+(Aa*t44039*t44086*log((1.0/2.0)/(Aa*(b1a*t44061+b3a*t44062+b2a*c*t44059+b4a*t44020* \
                   t44063))+1.0)*(t44080*t44081-1.0)*(a1a*c*t44059+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t44095*t44095)*t44087* \
                   t44088*(1.0/2.0)-(ccab2*t44087*t44088*(1.0/2.0))/t44099-ccab2*(t44100*t44100)*t44087*t44096*1.0/(t44099* \
                   t44099*t44099)*2.0+ccab2*t44103*(t44087*t44087)*t44096*t44088*(1.0/2.0)+ccab2*t44100*t44103*t44093* \
                   t44087*t44089*2.0-ccab1*gcab*t44093*1.0/(t44095*t44095*t44095)*t44087*t44088*(1.0/2.0))-rho_a[index]* \
                   (t44116+t44036*t44039*(t44115-t44116))*((ccaa2*t44117*t44088*2.0)/t44123-ccaa1*t44117*1.0/(t44119* \
                   t44119)*t44088*2.0-ccaa2*t44120*t44132*(t44117*t44117)*t44127*2.0+ccaa1*gamma_aa[index]*gcaa*t44117* \
                   1.0/(t44119*t44119*t44119)*t44129*2.0+ccaa2*t44120*1.0/(t44123*t44123*t44123)*(t44124*t44124)*t44117* \
                   t44088*2.0-ccaa2*gamma_aa[index]*t44124*t44117*t44127*t44088*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   1.0/(t44131*t44131)*t44128*t44088*2.0-(cx2*t44128*t44088*2.0)/t44135+cx2*t44120*t44132*(t44128*t44128) \
                   *t44139*2.0-cx1*gamma_aa[index]*gx*1.0/(t44131*t44131*t44131)*t44128*t44129*2.0-cx2*t44120*1.0/(t44135* \
                   t44135*t44135)*(t44136*t44136)*t44128*t44088*2.0+cx2*gamma_aa[index]*t44136*t44128*t44139*t44088*4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t45133 = 1.0/pow(rho_a[index],1.0/3.0);
                double t45134 = c*t45133;
                double t45135 = sqrt(t45134);
                double t45136 = pow(t45134,3.0/2.0);
                double t45137 = c*c;
                double t45138 = 1.0/pow(rho_a[index],2.0/3.0);
                double t45139 = 1.0/c0p;
                double t45140 = b1p*t45135;
                double t45141 = b3p*t45136;
                double t45142 = b4p*t45137*t45138;
                double t45143 = b2p*c*t45133;
                double t45144 = t45140+t45141+t45142+t45143;
                double t45145 = 1.0/t45144;
                double t45146 = t45145*t45139*(1.0/2.0);
                double t45147 = t45146+1.0;
                double t45148 = log(t45147);
                double t45149 = a1p*c*t45133;
                double t45150 = t45149+1.0;
                double t45151 = gcaa*gcaa;
                double t45152 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t45153 = 1.0/pow(rho_a[index],8.0/3.0);
                double t45154 = gamma_aa[index]*gcaa*t45153;
                double t45155 = t45154+1.0;
                double t45156 = gamma_aa[index]*gamma_aa[index];
                double t45157 = gamma_aa[index]*gcaa*t45153*2.0;
                double t45158 = t45151*t45152*t45156;
                double t45159 = t45157+t45158+1.0;
                double t45161 = gcaa*t45153*2.0;
                double t45162 = gamma_aa[index]*t45151*t45152*2.0;
                double t45160 = t45161+t45162;
                double t45163 = 1.0/(t45159*t45159);
                double t45164 = gx*gx;
                double t45165 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t45166 = gamma_aa[index]*gx*t45153;
                double t45167 = t45166+1.0;
                double t45168 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t45169 = gamma_aa[index]*gx*t45153*2.0;
                double t45170 = t45152*t45164*t45156;
                double t45171 = t45170+t45169+1.0;
                double t45173 = gx*t45153*2.0;
                double t45174 = gamma_aa[index]*t45152*t45164*2.0;
                double t45172 = t45173+t45174;
                double t45175 = 1.0/(t45171*t45171);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t45135+b3f*t45136+b2f*c*t45133+b4f*t45137*t45138))+1.0)*(a1f*c*t45133+1.0)*2.0-c0p*t45150*t45148*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t45150*t45148*2.0)*(ccaa1*t45151*t45152*1.0/(t45155*t45155)*2.0-(ccaa2*t45151* \
                   t45152*2.0)/t45159+ccaa2*(t45151*t45151)*t45163*t45156*t45168*2.0-ccaa1*gamma_aa[index]*gcaa*t45151* \
                   1.0/(t45155*t45155*t45155)*t45165*2.0-ccaa2*t45151*(t45160*t45160)*t45152*t45156*1.0/(t45159*t45159* \
                   t45159)*2.0+ccaa2*gamma_aa[index]*t45151*t45160*t45152*t45163*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   t45152*t45164*1.0/(t45167*t45167)*2.0-(cx2*t45152*t45164*2.0)/t45171+cx2*(t45164*t45164)*t45156*t45175* \
                   t45168*2.0-cx1*gamma_aa[index]*gx*t45164*t45165*1.0/(t45167*t45167*t45167)*2.0-cx2*t45152*1.0/(t45171* \
                   t45171*t45171)*(t45172*t45172)*t45164*t45156*2.0+cx2*gamma_aa[index]*t45152*t45172*t45164*t45175*4.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t44142 = 1.0/pow(rho_a[index],1.0/3.0);
                double t44143 = c*t44142;
                double t44144 = sqrt(t44143);
                double t44145 = pow(t44143,3.0/2.0);
                double t44146 = c*c;
                double t44147 = 1.0/pow(rho_a[index],2.0/3.0);
                double t44148 = 1.0/c0p;
                double t44149 = b1p*t44144;
                double t44150 = b3p*t44145;
                double t44151 = b4p*t44146*t44147;
                double t44152 = b2p*c*t44142;
                double t44153 = t44150+t44151+t44152+t44149;
                double t44154 = 1.0/t44153;
                double t44155 = t44154*t44148*(1.0/2.0);
                double t44156 = t44155+1.0;
                double t44157 = log(t44156);
                double t44158 = a1p*c*t44142;
                double t44159 = t44158+1.0;
                double t44160 = pow(2.0,1.0/3.0);
                double t44161 = t44160*2.0;
                double t44162 = t44161-2.0;
                double t44163 = two_13*2.0;
                double t44164 = t44163-2.0;
                double t44165 = 1.0/t44164;
                double t44166 = 1.0/c0f;
                double t44167 = 1.0/pow(rho_b[index],1.0/3.0);
                double t44168 = c*t44167;
                double t44169 = sqrt(t44168);
                double t44170 = pow(t44168,3.0/2.0);
                double t44171 = 1.0/pow(rho_b[index],2.0/3.0);
                double t44172 = b1p*t44169;
                double t44173 = b3p*t44170;
                double t44174 = b4p*t44171*t44146;
                double t44175 = b2p*c*t44167;
                double t44176 = t44172+t44173+t44174+t44175;
                double t44177 = 1.0/t44176;
                double t44178 = t44148*t44177*(1.0/2.0);
                double t44179 = t44178+1.0;
                double t44180 = log(t44179);
                double t44181 = a1p*c*t44167;
                double t44182 = t44181+1.0;
                double t44183 = c0p*t44180*t44182*2.0;
                double t44184 = rho_a[index]+rho_b[index];
                double t44185 = 1.0/pow(t44184,1.0/3.0);
                double t44186 = c*t44185;
                double t44187 = sqrt(t44186);
                double t44188 = pow(t44186,3.0/2.0);
                double t44189 = 1.0/pow(t44184,2.0/3.0);
                double t44190 = b1p*t44187;
                double t44191 = b3p*t44188;
                double t44192 = b4p*t44146*t44189;
                double t44193 = b2p*c*t44185;
                double t44194 = t44190+t44191+t44192+t44193;
                double t44195 = 1.0/t44194;
                double t44196 = t44148*t44195*(1.0/2.0);
                double t44197 = t44196+1.0;
                double t44198 = log(t44197);
                double t44199 = a1p*c*t44185;
                double t44200 = t44199+1.0;
                double t44201 = c0p*t44200*t44198*2.0;
                double t44202 = rho_a[index]-rho_b[index];
                double t44203 = t44202*t44202;
                double t44204 = 1.0/t44184;
                double t44205 = t44202*t44204;
                double t44206 = 1.0/(t44184*t44184*t44184*t44184);
                double t44207 = t44203*t44203;
                double t44208 = t44205+1.0;
                double t44209 = pow(t44208,4.0/3.0);
                double t44210 = -t44205+1.0;
                double t44211 = pow(t44210,4.0/3.0);
                double t44212 = t44211+t44209-2.0;
                double t44213 = 1.0/pow(rho_a[index],8.0/3.0);
                double t44214 = 1.0/pow(rho_b[index],8.0/3.0);
                double t44215 = gcab*gcab;
                double t44216 = gamma_aa[index]*t44213*(1.0/2.0);
                double t44217 = gamma_bb[index]*t44214*(1.0/2.0);
                double t44218 = t44216+t44217;
                double t44219 = t44218*t44218;
                double t44220 = t44215*t44219;
                double t44221 = gcab*t44218*2.0;
                double t44222 = t44220+t44221+1.0;
                double t44223 = 1.0/(t44222*t44222);
                double t44224 = gcab*t44213;
                double t44225 = t44213*t44215*t44218;
                double t44226 = t44224+t44225;
                double t44227 = gcab*t44214;
                double t44228 = t44214*t44215*t44218;
                double t44229 = t44227+t44228;
                double t44230 = gcab*t44218;
                double t44231 = t44230+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t44183-t44162*t44165*(t44183-c0f*log((t44166*(1.0/2.0) \
                   )/(b1f*t44169+b3f*t44170+b2f*c*t44167+b4f*t44171*t44146)+1.0)*(a1f*c*t44167+1.0)*2.0))+t44184*(t44201- \
                   t44212*t44206*t44207*t44165*(t44201-c0f*log((t44166*(1.0/2.0))/(b1f*t44187+b3f*t44188+b2f*c*t44185+ \
                   b4f*t44146*t44189)+1.0)*(a1f*c*t44185+1.0)*2.0)+(Aa*t44212*t44165*log((1.0/2.0)/(Aa*(b1a*t44187+b3a* \
                   t44188+b2a*c*t44185+b4a*t44146*t44189))+1.0)*(t44206*t44207-1.0)*(a1a*c*t44185+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t44162*t44165*(c0p*t44157*t44159*2.0-c0f*log((t44166*(1.0/2.0))/(b1f*t44144+b3f*t44145+b2f*c*t44142+ \
                   b4f*t44146*t44147)+1.0)*(a1f*c*t44142+1.0)*2.0)-c0p*t44157*t44159*2.0))*(ccab1*t44213*1.0/(t44231* \
                   t44231)*t44214*t44215*(1.0/2.0)-(ccab2*t44213*t44214*t44215*(1.0/2.0))/t44222+ccab2*t44214*t44223* \
                   t44215*t44226*t44218+ccab2*t44213*t44223*t44215*t44218*t44229+ccab2*t44213*t44214*t44223*(t44215*t44215) \
                   *t44219*(1.0/2.0)-ccab2*1.0/(t44222*t44222*t44222)*t44215*t44226*t44219*t44229*2.0-ccab1*gcab*t44213* \
                   1.0/(t44231*t44231*t44231)*t44214*t44215*t44218*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t44235 = 1.0/pow(rho_a[index],1.0/3.0);
                double t44236 = c*t44235;
                double t44237 = sqrt(t44236);
                double t44238 = pow(t44236,3.0/2.0);
                double t44239 = c*c;
                double t44240 = 1.0/pow(rho_a[index],2.0/3.0);
                double t44241 = 1.0/c0p;
                double t44242 = b1p*t44237;
                double t44243 = b3p*t44238;
                double t44244 = b4p*t44240*t44239;
                double t44245 = b2p*c*t44235;
                double t44246 = t44242+t44243+t44244+t44245;
                double t44247 = 1.0/t44246;
                double t44248 = t44241*t44247*(1.0/2.0);
                double t44249 = t44248+1.0;
                double t44250 = log(t44249);
                double t44251 = a1p*c*t44235;
                double t44252 = t44251+1.0;
                double t44253 = pow(2.0,1.0/3.0);
                double t44254 = t44253*2.0;
                double t44255 = t44254-2.0;
                double t44256 = two_13*2.0;
                double t44257 = t44256-2.0;
                double t44258 = 1.0/t44257;
                double t44259 = 1.0/c0f;
                double t44260 = 1.0/pow(rho_b[index],1.0/3.0);
                double t44261 = c*t44260;
                double t44262 = sqrt(t44261);
                double t44263 = pow(t44261,3.0/2.0);
                double t44264 = 1.0/pow(rho_b[index],2.0/3.0);
                double t44265 = b1p*t44262;
                double t44266 = b3p*t44263;
                double t44267 = b4p*t44264*t44239;
                double t44268 = b2p*c*t44260;
                double t44269 = t44265+t44266+t44267+t44268;
                double t44270 = 1.0/t44269;
                double t44271 = t44241*t44270*(1.0/2.0);
                double t44272 = t44271+1.0;
                double t44273 = log(t44272);
                double t44274 = a1p*c*t44260;
                double t44275 = t44274+1.0;
                double t44276 = c0p*t44273*t44275*2.0;
                double t44277 = rho_a[index]+rho_b[index];
                double t44278 = 1.0/pow(t44277,1.0/3.0);
                double t44279 = c*t44278;
                double t44280 = sqrt(t44279);
                double t44281 = pow(t44279,3.0/2.0);
                double t44282 = 1.0/pow(t44277,2.0/3.0);
                double t44283 = b1p*t44280;
                double t44284 = b3p*t44281;
                double t44285 = b4p*t44282*t44239;
                double t44286 = b2p*c*t44278;
                double t44287 = t44283+t44284+t44285+t44286;
                double t44288 = 1.0/t44287;
                double t44289 = t44241*t44288*(1.0/2.0);
                double t44290 = t44289+1.0;
                double t44291 = log(t44290);
                double t44292 = a1p*c*t44278;
                double t44293 = t44292+1.0;
                double t44294 = c0p*t44291*t44293*2.0;
                double t44295 = rho_a[index]-rho_b[index];
                double t44296 = t44295*t44295;
                double t44297 = 1.0/t44277;
                double t44298 = t44295*t44297;
                double t44299 = 1.0/(t44277*t44277*t44277*t44277);
                double t44300 = t44296*t44296;
                double t44301 = t44298+1.0;
                double t44302 = pow(t44301,4.0/3.0);
                double t44303 = -t44298+1.0;
                double t44304 = pow(t44303,4.0/3.0);
                double t44305 = t44302+t44304-2.0;
                double t44306 = gcab*gcab;
                double t44307 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t44308 = 1.0/pow(rho_a[index],8.0/3.0);
                double t44309 = gamma_aa[index]*t44308*(1.0/2.0);
                double t44310 = 1.0/pow(rho_b[index],8.0/3.0);
                double t44311 = gamma_bb[index]*t44310*(1.0/2.0);
                double t44312 = t44311+t44309;
                double t44313 = gcab*t44312;
                double t44314 = t44313+1.0;
                double t44315 = t44312*t44312;
                double t44316 = t44306*t44315;
                double t44317 = gcab*t44312*2.0;
                double t44318 = t44316+t44317+1.0;
                double t44320 = gcab*t44310;
                double t44321 = t44310*t44312*t44306;
                double t44319 = t44320+t44321;
                double t44322 = 1.0/(t44318*t44318);
                double t44323 = b1f*t44262;
                double t44324 = b3f*t44263;
                double t44325 = b4f*t44264*t44239;
                double t44326 = b2f*c*t44260;
                double t44327 = t44323+t44324+t44325+t44326;
                double t44328 = 1.0/t44327;
                double t44329 = t44328*t44259*(1.0/2.0);
                double t44330 = t44329+1.0;
                double t44331 = log(t44330);
                double t44332 = a1f*c*t44260;
                double t44333 = t44332+1.0;
                double t44334 = t44276-c0f*t44331*t44333*2.0;
                double t44335 = t44276-t44334*t44255*t44258;
                double t44336 = gcaa*gcaa;
                double t44337 = gamma_bb[index]*gcaa*t44310;
                double t44338 = t44337+1.0;
                double t44339 = gamma_bb[index]*gamma_bb[index];
                double t44340 = gamma_bb[index]*gcaa*t44310*2.0;
                double t44341 = t44307*t44336*t44339;
                double t44342 = t44340+t44341+1.0;
                double t44344 = gcaa*t44310*2.0;
                double t44345 = gamma_bb[index]*t44307*t44336*2.0;
                double t44343 = t44344+t44345;
                double t44346 = 1.0/(t44342*t44342);
                double t44347 = gx*gx;
                double t44348 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t44349 = gamma_bb[index]*gx*t44310;
                double t44350 = t44349+1.0;
                double t44351 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t44352 = gamma_bb[index]*gx*t44310*2.0;
                double t44353 = t44307*t44347*t44339;
                double t44354 = t44352+t44353+1.0;
                double t44356 = gx*t44310*2.0;
                double t44357 = gamma_bb[index]*t44307*t44347*2.0;
                double t44355 = t44356+t44357;
                double t44358 = 1.0/(t44354*t44354);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t44335+t44277*(t44294-t44300*t44305*t44258*t44299*(t44294- \
                   c0f*log((t44259*(1.0/2.0))/(b1f*t44280+b3f*t44281+b2f*c*t44278+b4f*t44282*t44239)+1.0)*(a1f*c*t44278+ \
                   1.0)*2.0)+(Aa*t44305*t44258*log((1.0/2.0)/(Aa*(b1a*t44280+b3a*t44281+b2a*c*t44278+b4a*t44282*t44239) \
                   )+1.0)*(t44300*t44299-1.0)*(a1a*c*t44278+1.0)*2.0)/d2fz0)+rho_a[index]*(t44255*t44258*(c0p*t44250* \
                   t44252*2.0-c0f*log((t44259*(1.0/2.0))/(b1f*t44237+b3f*t44238+b2f*c*t44235+b4f*t44240*t44239)+1.0)* \
                   (a1f*c*t44235+1.0)*2.0)-c0p*t44250*t44252*2.0))*(ccab1*1.0/(t44314*t44314)*t44306*t44307*(1.0/2.0) \
                   -(ccab2*t44306*t44307*(1.0/2.0))/t44318-ccab2*t44306*t44315*1.0/(t44318*t44318*t44318)*(t44319*t44319) \
                   *2.0+ccab2*t44322*(t44306*t44306)*t44315*t44307*(1.0/2.0)+ccab2*t44310*t44312*t44322*t44306*t44319* \
                   2.0-ccab1*gcab*t44312*1.0/(t44314*t44314*t44314)*t44306*t44307*(1.0/2.0))-rho_b[index]*t44335*((ccaa2* \
                   t44307*t44336*2.0)/t44342-ccaa1*t44307*t44336*1.0/(t44338*t44338)*2.0-ccaa2*t44351*(t44336*t44336) \
                   *t44346*t44339*2.0+ccaa1*gamma_bb[index]*gcaa*t44336*1.0/(t44338*t44338*t44338)*t44348*2.0+ccaa2*1.0/ \
                   (t44342*t44342*t44342)*t44307*(t44343*t44343)*t44336*t44339*2.0-ccaa2*gamma_bb[index]*t44307*t44343* \
                   t44336*t44346*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*1.0/(t44350*t44350)*t44307*t44347*2.0-(cx2*t44307* \
                   t44347*2.0)/t44354+cx2*t44351*(t44347*t44347)*t44339*t44358*2.0-cx1*gamma_bb[index]*gx*1.0/(t44350* \
                   t44350*t44350)*t44347*t44348*2.0-cx2*t44307*1.0/(t44354*t44354*t44354)*(t44355*t44355)*t44347*t44339* \
                   2.0+cx2*gamma_bb[index]*t44307*t44355*t44347*t44358*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t44727 = 1.0/pow(rho_b[index],1.0/3.0);
                double t44728 = c*t44727;
                double t44729 = sqrt(t44728);
                double t44730 = pow(t44728,3.0/2.0);
                double t44731 = c*c;
                double t44732 = 1.0/pow(rho_b[index],2.0/3.0);
                double t44733 = 1.0/c0p;
                double t44734 = b1p*t44729;
                double t44735 = b3p*t44730;
                double t44736 = b4p*t44731*t44732;
                double t44737 = b2p*c*t44727;
                double t44738 = t44734+t44735+t44736+t44737;
                double t44739 = 1.0/t44738;
                double t44740 = t44733*t44739*(1.0/2.0);
                double t44741 = t44740+1.0;
                double t44742 = log(t44741);
                double t44743 = a1p*c*t44727;
                double t44744 = t44743+1.0;
                double t44745 = gcaa*gcaa;
                double t44746 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t44747 = 1.0/pow(rho_b[index],8.0/3.0);
                double t44748 = gamma_bb[index]*gcaa*t44747;
                double t44749 = t44748+1.0;
                double t44750 = gamma_bb[index]*gamma_bb[index];
                double t44751 = gamma_bb[index]*gcaa*t44747*2.0;
                double t44752 = t44750*t44745*t44746;
                double t44753 = t44751+t44752+1.0;
                double t44755 = gcaa*t44747*2.0;
                double t44756 = gamma_bb[index]*t44745*t44746*2.0;
                double t44754 = t44755+t44756;
                double t44757 = 1.0/(t44753*t44753);
                double t44758 = gx*gx;
                double t44759 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t44760 = gamma_bb[index]*gx*t44747;
                double t44761 = t44760+1.0;
                double t44762 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t44763 = gamma_bb[index]*gx*t44747*2.0;
                double t44764 = t44750*t44746*t44758;
                double t44765 = t44763+t44764+1.0;
                double t44767 = gx*t44747*2.0;
                double t44768 = gamma_bb[index]*t44746*t44758*2.0;
                double t44766 = t44767+t44768;
                double t44769 = 1.0/(t44765*t44765);
                v_gamma_bb_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t44729+b3f*t44730+b2f*c*t44727+b4f*t44731*t44732))+1.0)*(a1f*c*t44727+1.0)*2.0-c0p*t44742*t44744* \
                   2.0))/(two_13*2.0-2.0)+c0p*t44742*t44744*2.0)*((ccaa2*t44745*t44746*2.0)/t44753-ccaa1*t44745*t44746* \
                   1.0/(t44749*t44749)*2.0-ccaa2*t44750*t44762*(t44745*t44745)*t44757*2.0+ccaa1*gamma_bb[index]*gcaa* \
                   t44745*1.0/(t44749*t44749*t44749)*t44759*2.0+ccaa2*t44750*1.0/(t44753*t44753*t44753)*t44745*(t44754* \
                   t44754)*t44746*2.0-ccaa2*gamma_bb[index]*t44745*t44754*t44746*t44757*4.0)-c0*pow(rho_b[index],4.0/ \
                   3.0)*(cx1*1.0/(t44761*t44761)*t44746*t44758*2.0-(cx2*t44746*t44758*2.0)/t44765+cx2*t44750*t44762*(t44758* \
                   t44758)*t44769*2.0-cx1*gamma_bb[index]*gx*1.0/(t44761*t44761*t44761)*t44758*t44759*2.0-cx2*t44750* \
                   t44746*1.0/(t44765*t44765*t44765)*(t44766*t44766)*t44758*2.0+cx2*gamma_bb[index]*t44746*t44766*t44758* \
                   t44769*4.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

