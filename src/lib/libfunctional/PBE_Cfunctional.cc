#include <libmints/vector.h>
#include "PBE_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

PBE_CFunctional::PBE_CFunctional()
{
    name_ = "PBE_C";
    description_ = "    PBE Correlation\n";
    citation_ = "    J.P. Perdew, K. Burke., and M. Ernzerhof, Phys. Rev. Lett., 77, 3865-3868, 1996\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["k"] =   3.0936677262801355E+00;
    parameters_["pi_m12"] =   5.6418958354775628E-01;
    parameters_["bet"] =   6.6724550603149205E-02;
    parameters_["gammas"] =   3.1090690869654901E-02;
    parameters_["d2fz0"] =   1.7099209341613653E+00;
    parameters_["Aa"] =   1.6886900000000000E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1090699999999999E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545349999999999E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
}
PBE_CFunctional::~PBE_CFunctional()
{
}
void PBE_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double k = parameters_["k"];
    double pi_m12 = parameters_["pi_m12"];
    double bet = parameters_["bet"];
    double gammas = parameters_["gammas"];
    double d2fz0 = parameters_["d2fz0"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t24502 = pow(2.0,2.0/3.0);
                double t24503 = 1.0/gammas;
                double t24504 = 1.0/k;
                double t24505 = 1.0/(pi_m12*pi_m12);
                double t24506 = 1.0/pow(rho_b,7.0/3.0);
                double t24507 = 1.0/pow(rho_b,1.0/3.0);
                double t24508 = c*t24507;
                double t24509 = sqrt(t24508);
                double t24510 = pow(t24508,3.0/2.0);
                double t24511 = c*c;
                double t24512 = 1.0/pow(rho_b,2.0/3.0);
                double t24513 = 1.0/c0p;
                double t24514 = b1p*t24509;
                double t24515 = b3p*t24510;
                double t24516 = b4p*t24511*t24512;
                double t24517 = b2p*c*t24507;
                double t24518 = t24514+t24515+t24516+t24517;
                double t24519 = 1.0/t24518;
                double t24520 = t24513*t24519*(1.0/2.0);
                double t24521 = t24520+1.0;
                double t24522 = log(t24521);
                double t24523 = a1p*c*t24507;
                double t24524 = t24523+1.0;
                double t24525 = gamma_ab*2.0;
                double t24526 = gamma_bb+t24525;
                double t24527 = pow(2.0,1.0/3.0);
                double t24528 = t24527*2.0;
                double t24529 = t24528-2.0;
                double t24530 = two_13*2.0;
                double t24531 = t24530-2.0;
                double t24532 = 1.0/t24531;
                double t24533 = 1.0/c0f;
                double t24534 = b1f*t24509;
                double t24535 = b3f*t24510;
                double t24536 = b4f*t24511*t24512;
                double t24537 = b2f*c*t24507;
                double t24538 = t24534+t24535+t24536+t24537;
                double t24539 = 1.0/t24538;
                double t24540 = t24533*t24539*(1.0/2.0);
                double t24541 = t24540+1.0;
                double t24542 = log(t24541);
                double t24543 = a1f*c*t24507;
                double t24544 = t24543+1.0;
                double t24545 = c0f*t24542*t24544*2.0;
                double t24546 = c0p*t24522*t24524*2.0;
                double t24547 = t24545-t24546;
                double t24548 = t24532*t24529*t24547;
                double t24549 = t24546+t24548;
                double t24550 = t24503*t24549*2.0;
                double t24551 = exp(t24550);
                double t24552 = t24551-1.0;
                double t24553 = 1.0/t24552;
                double t24554 = bet*t24502*t24503*t24504*t24505*t24506*t24526*t24553*(1.0/1.6E1);
                v[Q] += scale * -(rho_a+rho_b)*(t24546+t24548-gammas*log((bet*t24502*t24503*t24504*t24505*t24506*t24526*(t24554+1.0)*(1.0/1.6E1))/(t24554+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_b,1.4E1/3.0)*1.0/(t24552*t24552)*(t24526*t24526)*t24527*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t24556 = pow(2.0,2.0/3.0);
                double t24557 = 1.0/gammas;
                double t24558 = 1.0/k;
                double t24559 = 1.0/(pi_m12*pi_m12);
                double t24560 = 1.0/pow(rho_b,7.0/3.0);
                double t24561 = 1.0/pow(rho_b,1.0/3.0);
                double t24562 = c*t24561;
                double t24563 = sqrt(t24562);
                double t24564 = pow(t24562,3.0/2.0);
                double t24565 = c*c;
                double t24566 = 1.0/pow(rho_b,2.0/3.0);
                double t24567 = 1.0/c0p;
                double t24568 = b1p*t24563;
                double t24569 = b3p*t24564;
                double t24570 = b4p*t24565*t24566;
                double t24571 = b2p*c*t24561;
                double t24572 = t24570+t24571+t24568+t24569;
                double t24573 = 1.0/t24572;
                double t24574 = t24573*t24567*(1.0/2.0);
                double t24575 = t24574+1.0;
                double t24576 = log(t24575);
                double t24577 = a1p*c*t24561;
                double t24578 = t24577+1.0;
                double t24579 = gamma_ab*2.0;
                double t24580 = gamma_bb+t24579;
                double t24581 = pow(2.0,1.0/3.0);
                double t24582 = t24581*2.0;
                double t24583 = t24582-2.0;
                double t24584 = two_13*2.0;
                double t24585 = t24584-2.0;
                double t24586 = 1.0/t24585;
                double t24587 = 1.0/c0f;
                double t24588 = b1f*t24563;
                double t24589 = b3f*t24564;
                double t24590 = b4f*t24565*t24566;
                double t24591 = b2f*c*t24561;
                double t24592 = t24590+t24591+t24588+t24589;
                double t24593 = 1.0/t24592;
                double t24594 = t24593*t24587*(1.0/2.0);
                double t24595 = t24594+1.0;
                double t24596 = log(t24595);
                double t24597 = a1f*c*t24561;
                double t24598 = t24597+1.0;
                double t24599 = c0f*t24596*t24598*2.0;
                double t24600 = c0p*t24576*t24578*2.0;
                double t24601 = t24600-t24599;
                double t24602 = t24600-t24601*t24583*t24586;
                double t24603 = t24602*t24557*2.0;
                double t24604 = exp(t24603);
                double t24605 = t24604-1.0;
                v_rho_a[Q] += scale * -t24600+gammas*log((bet*t24560*t24580*t24556*t24557*t24558*t24559*((bet*t24560*t24580*t24556*t24557*t24558*t24559*(1.0/1.6E1))/(exp(t24557*(t24600+t24583*t24586*(t24599-c0p*t24576*t24578*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1))/((bet*t24560*t24580*t24556*t24557*t24558*t24559*(1.0/1.6E1))/t24605+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_b,1.4E1/3.0)*1.0/(t24605*t24605)*(t24580*t24580)*t24581*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0)+t24583*t24586*(t24600-t24599);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t24607 = pow(2.0,2.0/3.0);
                double t24608 = 1.0/gammas;
                double t24609 = 1.0/k;
                double t24610 = 1.0/(pi_m12*pi_m12);
                double t24611 = 1.0/pow(rho_b,7.0/3.0);
                double t24612 = 1.0/pow(rho_b,1.0/3.0);
                double t24613 = c*t24612;
                double t24614 = sqrt(t24613);
                double t24615 = pow(t24613,3.0/2.0);
                double t24616 = c*c;
                double t24617 = 1.0/pow(rho_b,2.0/3.0);
                double t24618 = 1.0/c0p;
                double t24619 = b1p*t24614;
                double t24620 = b3p*t24615;
                double t24621 = b4p*t24616*t24617;
                double t24622 = b2p*c*t24612;
                double t24623 = t24620+t24621+t24622+t24619;
                double t24624 = 1.0/t24623;
                double t24625 = t24624*t24618*(1.0/2.0);
                double t24626 = t24625+1.0;
                double t24627 = log(t24626);
                double t24628 = a1p*c*t24612;
                double t24629 = t24628+1.0;
                double t24630 = gamma_ab*2.0;
                double t24631 = gamma_bb+t24630;
                double t24632 = pow(2.0,1.0/3.0);
                double t24633 = t24632*2.0;
                double t24634 = t24633-2.0;
                double t24635 = two_13*2.0;
                double t24636 = t24635-2.0;
                double t24637 = 1.0/t24636;
                double t24638 = 1.0/c0f;
                double t24639 = b1f*t24614;
                double t24640 = b3f*t24615;
                double t24641 = b4f*t24616*t24617;
                double t24642 = b2f*c*t24612;
                double t24643 = t24640+t24641+t24642+t24639;
                double t24644 = 1.0/t24643;
                double t24645 = t24644*t24638*(1.0/2.0);
                double t24646 = t24645+1.0;
                double t24647 = log(t24646);
                double t24648 = a1f*c*t24612;
                double t24649 = t24648+1.0;
                double t24650 = c0f*t24647*t24649*2.0;
                double t24651 = c0p*t24627*t24629*2.0;
                double t24652 = t24650-t24651;
                double t24653 = t24634*t24652*t24637;
                double t24654 = t24651+t24653;
                double t24655 = t24608*t24654*2.0;
                double t24656 = exp(t24655);
                double t24657 = t24656-1.0;
                double t24658 = 1.0/t24657;
                double t24659 = bet*t24610*t24611*t24631*t24607*t24608*t24609*t24658*(1.0/1.6E1);
                double t24660 = bet*bet;
                double t24661 = 1.0/(gammas*gammas);
                double t24662 = 1.0/(k*k);
                double t24663 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24664 = 1.0/pow(rho_b,1.4E1/3.0);
                double t24665 = 1.0/(t24657*t24657);
                double t24666 = t24631*t24631;
                double t24667 = t24632*t24660*t24661*t24662*t24663*t24664*t24665*t24666*(1.0/1.28E2);
                double t24668 = t24667+t24659+1.0;
                double t24669 = 1.0/t24668;
                double t24670 = 1.0/pow(rho_b,1.0E1/3.0);
                double t24671 = 1.0/pow(rho_b,4.0/3.0);
                double t24672 = 1.0/pow(rho_b,5.0/3.0);
                double t24673 = 1.0/sqrt(t24613);
                double t24674 = 1.0/t24626;
                double t24675 = 1.0/(t24623*t24623);
                double t24676 = b4p*t24616*t24672*(2.0/3.0);
                double t24677 = b2p*c*t24671*(1.0/3.0);
                double t24678 = b1p*c*t24671*t24673*(1.0/6.0);
                double t24679 = b3p*c*t24614*t24671*(1.0/2.0);
                double t24680 = t24676+t24677+t24678+t24679;
                double t24681 = t24680*t24629*t24674*t24675;
                double t24682 = t24659+1.0;
                double t24683 = bet*t24610*t24631*t24607*t24670*t24608*t24609*t24658*(7.0/4.8E1);
                double t24684 = 1.0/t24646;
                double t24685 = 1.0/(t24643*t24643);
                double t24686 = b4f*t24616*t24672*(2.0/3.0);
                double t24687 = b2f*c*t24671*(1.0/3.0);
                double t24688 = b1f*c*t24671*t24673*(1.0/6.0);
                double t24689 = b3f*c*t24614*t24671*(1.0/2.0);
                double t24690 = t24686+t24687+t24688+t24689;
                double t24691 = a1f*c*c0f*t24671*t24647*(2.0/3.0);
                double t24692 = a1p*c*c0p*t24671*t24627*(2.0/3.0);
                double t24696 = t24690*t24684*t24649*t24685;
                double t24693 = t24681+t24691-t24692-t24696;
                double t24694 = t24634*t24637*t24693;
                double t24695 = -t24681+t24692+t24694;
                double t24697 = bet*t24610*t24611*t24631*t24607*t24608*t24609*t24682*t24669*(1.0/1.6E1);
                double t24698 = t24697+1.0;
                v_rho_b[Q] += scale * -t24651-t24653-(rho_a+rho_b)*(t24681-t24692-t24694+(gammas*(bet*t24610*t24631*t24607*t24670*t24608*t24609*t24682*t24669*(7.0/4.8E1)+bet*t24610*t24611*t24631*t24607*t24608*t24609*t24669*(t24683-bet*t24610*t24611*t24631*t24607*t24661*t24609*t24656*t24665*t24695*(1.0/8.0))*(1.0/1.6E1)-bet*t24610*t24611*t24631*t24607*t24608*t24609*t24682*1.0/(t24668*t24668)*(t24683+1.0/pow(rho_b,1.7E1/3.0)*t24632*t24660*t24661*t24662*t24663*t24665*t24666*(7.0/1.92E2)-1.0/(gammas*gammas*gammas)*t24632*t24660*t24662*t24663*t24664*t24656*1.0/(t24657*t24657*t24657)*t24666*t24695*(1.0/3.2E1)-bet*t24610*t24611*t24631*t24607*t24661*t24609*t24656*t24665*t24695*(1.0/8.0))*(1.0/1.6E1))*(1.0/2.0))/t24698)+gammas*log(t24698)*(1.0/2.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t24701 = pow(2.0,2.0/3.0);
                double t24702 = 1.0/gammas;
                double t24703 = 1.0/k;
                double t24704 = 1.0/(pi_m12*pi_m12);
                double t24705 = 1.0/pow(rho_b,7.0/3.0);
                double t24706 = 1.0/pow(rho_b,1.0/3.0);
                double t24707 = c*t24706;
                double t24708 = sqrt(t24707);
                double t24709 = pow(t24707,3.0/2.0);
                double t24710 = c*c;
                double t24711 = 1.0/pow(rho_b,2.0/3.0);
                double t24712 = 1.0/c0p;
                double t24713 = b1p*t24708;
                double t24714 = b3p*t24709;
                double t24715 = b4p*t24710*t24711;
                double t24716 = b2p*c*t24706;
                double t24717 = t24713+t24714+t24715+t24716;
                double t24718 = 1.0/t24717;
                double t24719 = t24712*t24718*(1.0/2.0);
                double t24720 = t24719+1.0;
                double t24721 = log(t24720);
                double t24722 = a1p*c*t24706;
                double t24723 = t24722+1.0;
                double t24724 = gamma_ab*2.0;
                double t24725 = gamma_bb+t24724;
                double t24726 = pow(2.0,1.0/3.0);
                double t24727 = t24726*2.0;
                double t24728 = t24727-2.0;
                double t24729 = two_13*2.0;
                double t24730 = t24729-2.0;
                double t24731 = 1.0/t24730;
                double t24732 = 1.0/c0f;
                double t24733 = b1f*t24708;
                double t24734 = b3f*t24709;
                double t24735 = b4f*t24710*t24711;
                double t24736 = b2f*c*t24706;
                double t24737 = t24733+t24734+t24735+t24736;
                double t24738 = 1.0/t24737;
                double t24739 = t24732*t24738*(1.0/2.0);
                double t24740 = t24739+1.0;
                double t24741 = log(t24740);
                double t24742 = a1f*c*t24706;
                double t24743 = t24742+1.0;
                double t24744 = c0f*t24741*t24743*2.0;
                double t24745 = c0p*t24721*t24723*2.0;
                double t24746 = t24744-t24745;
                double t24747 = t24731*t24728*t24746;
                double t24748 = t24745+t24747;
                double t24749 = t24702*t24748*2.0;
                double t24750 = exp(t24749);
                double t24751 = t24750-1.0;
                double t24752 = 1.0/t24751;
                double t24753 = bet*t24701*t24702*t24703*t24704*t24705*t24725*t24752*(1.0/1.6E1);
                double t24754 = bet*bet;
                double t24755 = 1.0/(gammas*gammas);
                double t24756 = 1.0/(k*k);
                double t24757 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24758 = 1.0/pow(rho_b,1.4E1/3.0);
                double t24759 = 1.0/(t24751*t24751);
                double t24760 = t24725*t24725;
                double t24761 = t24760*t24726*t24754*t24755*t24756*t24757*t24758*t24759*(1.0/1.28E2);
                double t24762 = t24761+t24753+1.0;
                double t24763 = 1.0/t24762;
                double t24764 = t24753+1.0;
                v_gamma_ab[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t24701*t24702*t24703*t24704*t24705*t24763*t24764*(1.0/8.0)+t24725*t24752*t24726*t24754*t24763*t24755*t24756*t24757*t24758*(1.0/6.4E1)-bet*t24701*t24702*t24703*t24704*t24705*t24725*1.0/(t24762*t24762)*t24764*(bet*t24701*t24702*t24703*t24704*t24705*t24752*(1.0/8.0)+t24726*t24754*t24755*t24756*t24757*t24758*t24759*(gamma_ab*8.0+gamma_bb*4.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t24701*t24702*t24703*t24704*t24705*t24725*t24763*((bet*t24701*t24702*t24703*t24704*t24705*t24725*(1.0/1.6E1))/(exp(t24702*(t24745+t24731*t24728*(t24744-c0p*t24721*t24723*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t24766 = pow(2.0,2.0/3.0);
                double t24767 = 1.0/gammas;
                double t24768 = 1.0/k;
                double t24769 = 1.0/(pi_m12*pi_m12);
                double t24770 = 1.0/pow(rho_b,7.0/3.0);
                double t24771 = 1.0/pow(rho_b,1.0/3.0);
                double t24772 = c*t24771;
                double t24773 = sqrt(t24772);
                double t24774 = pow(t24772,3.0/2.0);
                double t24775 = c*c;
                double t24776 = 1.0/pow(rho_b,2.0/3.0);
                double t24777 = 1.0/c0p;
                double t24778 = b1p*t24773;
                double t24779 = b3p*t24774;
                double t24780 = b4p*t24775*t24776;
                double t24781 = b2p*c*t24771;
                double t24782 = t24780+t24781+t24778+t24779;
                double t24783 = 1.0/t24782;
                double t24784 = t24783*t24777*(1.0/2.0);
                double t24785 = t24784+1.0;
                double t24786 = log(t24785);
                double t24787 = a1p*c*t24771;
                double t24788 = t24787+1.0;
                double t24789 = gamma_ab*2.0;
                double t24790 = gamma_bb+t24789;
                double t24791 = pow(2.0,1.0/3.0);
                double t24792 = t24791*2.0;
                double t24793 = t24792-2.0;
                double t24794 = two_13*2.0;
                double t24795 = t24794-2.0;
                double t24796 = 1.0/t24795;
                double t24797 = 1.0/c0f;
                double t24798 = b1f*t24773;
                double t24799 = b3f*t24774;
                double t24800 = b4f*t24775*t24776;
                double t24801 = b2f*c*t24771;
                double t24802 = t24800+t24801+t24798+t24799;
                double t24803 = 1.0/t24802;
                double t24804 = t24803*t24797*(1.0/2.0);
                double t24805 = t24804+1.0;
                double t24806 = log(t24805);
                double t24807 = a1f*c*t24771;
                double t24808 = t24807+1.0;
                double t24809 = c0f*t24806*t24808*2.0;
                double t24810 = c0p*t24786*t24788*2.0;
                double t24811 = t24810-t24809;
                double t24816 = t24811*t24793*t24796;
                double t24812 = t24810-t24816;
                double t24813 = t24812*t24767*2.0;
                double t24814 = exp(t24813);
                double t24815 = t24814-1.0;
                double t24817 = 1.0/t24815;
                double t24818 = bet*t24770*t24790*t24817*t24766*t24767*t24768*t24769*(1.0/1.6E1);
                double t24819 = bet*bet;
                double t24820 = 1.0/(gammas*gammas);
                double t24821 = 1.0/(k*k);
                double t24822 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24823 = 1.0/pow(rho_b,1.4E1/3.0);
                double t24824 = 1.0/(t24815*t24815);
                double t24825 = t24790*t24790;
                double t24826 = t24820*t24821*t24822*t24823*t24824*t24825*t24791*t24819*(1.0/1.28E2);
                double t24827 = t24826+t24818+1.0;
                double t24828 = 1.0/t24827;
                double t24829 = t24818+1.0;
                v_gamma_bb[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t24770*t24828*t24766*t24829*t24767*t24768*t24769*(1.0/1.6E1)+t24820*t24821*t24822*t24823*t24790*t24817*t24791*t24819*t24828*(1.0/1.28E2)-bet*t24770*t24790*1.0/(t24827*t24827)*t24766*t24829*t24767*t24768*t24769*(bet*t24770*t24817*t24766*t24767*t24768*t24769*(1.0/1.6E1)+t24820*t24821*t24822*t24823*t24824*t24791*t24819*(gamma_ab*4.0+gamma_bb*2.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t24770*t24790*t24828*t24766*t24767*t24768*t24769*((bet*t24770*t24790*t24766*t24767*t24768*t24769*(1.0/1.6E1))/(exp(t24767*(t24810+t24793*t24796*(t24809-c0p*t24786*t24788*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t24833 = pow(2.0,2.0/3.0);
                double t24834 = 1.0/gammas;
                double t24835 = 1.0/k;
                double t24836 = 1.0/(pi_m12*pi_m12);
                double t24837 = 1.0/pow(rho_a,7.0/3.0);
                double t24838 = 1.0/pow(rho_a,1.0/3.0);
                double t24839 = c*t24838;
                double t24840 = sqrt(t24839);
                double t24841 = pow(t24839,3.0/2.0);
                double t24842 = c*c;
                double t24843 = 1.0/pow(rho_a,2.0/3.0);
                double t24844 = 1.0/c0p;
                double t24845 = b1p*t24840;
                double t24846 = b3p*t24841;
                double t24847 = b4p*t24842*t24843;
                double t24848 = b2p*c*t24838;
                double t24849 = t24845+t24846+t24847+t24848;
                double t24850 = 1.0/t24849;
                double t24851 = t24850*t24844*(1.0/2.0);
                double t24852 = t24851+1.0;
                double t24853 = log(t24852);
                double t24854 = a1p*c*t24838;
                double t24855 = t24854+1.0;
                double t24856 = gamma_ab*2.0;
                double t24857 = gamma_aa+t24856;
                double t24858 = pow(2.0,1.0/3.0);
                double t24859 = t24858*2.0;
                double t24860 = t24859-2.0;
                double t24861 = two_13*2.0;
                double t24862 = t24861-2.0;
                double t24863 = 1.0/t24862;
                double t24864 = 1.0/c0f;
                double t24865 = b1f*t24840;
                double t24866 = b3f*t24841;
                double t24867 = b4f*t24842*t24843;
                double t24868 = b2f*c*t24838;
                double t24869 = t24865+t24866+t24867+t24868;
                double t24870 = 1.0/t24869;
                double t24871 = t24870*t24864*(1.0/2.0);
                double t24872 = t24871+1.0;
                double t24873 = log(t24872);
                double t24874 = a1f*c*t24838;
                double t24875 = t24874+1.0;
                double t24876 = c0f*t24873*t24875*2.0;
                double t24877 = c0p*t24853*t24855*2.0;
                double t24878 = t24876-t24877;
                double t24879 = t24860*t24863*t24878;
                double t24880 = t24877+t24879;
                double t24881 = t24834*t24880*2.0;
                double t24882 = exp(t24881);
                double t24883 = t24882-1.0;
                double t24884 = 1.0/t24883;
                double t24885 = bet*t24833*t24834*t24835*t24836*t24837*t24857*t24884*(1.0/1.6E1);
                v[Q] += scale * -(rho_a+rho_b)*(t24877+t24879-gammas*log((bet*t24833*t24834*t24835*t24836*t24837*t24857*(t24885+1.0)*(1.0/1.6E1))/(t24885+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_a,1.4E1/3.0)*1.0/(t24883*t24883)*(t24857*t24857)*t24858*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t24887 = pow(2.0,2.0/3.0);
                double t24888 = 1.0/gammas;
                double t24889 = 1.0/k;
                double t24890 = 1.0/(pi_m12*pi_m12);
                double t24891 = 1.0/pow(rho_a,7.0/3.0);
                double t24892 = 1.0/pow(rho_a,1.0/3.0);
                double t24893 = c*t24892;
                double t24894 = sqrt(t24893);
                double t24895 = pow(t24893,3.0/2.0);
                double t24896 = c*c;
                double t24897 = 1.0/pow(rho_a,2.0/3.0);
                double t24898 = 1.0/c0p;
                double t24899 = b1p*t24894;
                double t24900 = b3p*t24895;
                double t24901 = b4p*t24896*t24897;
                double t24902 = b2p*c*t24892;
                double t24903 = t24900+t24901+t24902+t24899;
                double t24904 = 1.0/t24903;
                double t24905 = t24904*t24898*(1.0/2.0);
                double t24906 = t24905+1.0;
                double t24907 = log(t24906);
                double t24908 = a1p*c*t24892;
                double t24909 = t24908+1.0;
                double t24910 = gamma_ab*2.0;
                double t24911 = gamma_aa+t24910;
                double t24912 = pow(2.0,1.0/3.0);
                double t24913 = t24912*2.0;
                double t24914 = t24913-2.0;
                double t24915 = two_13*2.0;
                double t24916 = t24915-2.0;
                double t24917 = 1.0/t24916;
                double t24918 = 1.0/c0f;
                double t24919 = b1f*t24894;
                double t24920 = b3f*t24895;
                double t24921 = b4f*t24896*t24897;
                double t24922 = b2f*c*t24892;
                double t24923 = t24920+t24921+t24922+t24919;
                double t24924 = 1.0/t24923;
                double t24925 = t24924*t24918*(1.0/2.0);
                double t24926 = t24925+1.0;
                double t24927 = log(t24926);
                double t24928 = a1f*c*t24892;
                double t24929 = t24928+1.0;
                double t24930 = c0f*t24927*t24929*2.0;
                double t24931 = c0p*t24907*t24909*2.0;
                double t24932 = t24930-t24931;
                double t24933 = t24914*t24932*t24917;
                double t24934 = t24931+t24933;
                double t24935 = t24934*t24888*2.0;
                double t24936 = exp(t24935);
                double t24937 = t24936-1.0;
                double t24938 = 1.0/t24937;
                double t24939 = bet*t24911*t24890*t24891*t24938*t24887*t24888*t24889*(1.0/1.6E1);
                double t24940 = bet*bet;
                double t24941 = 1.0/(gammas*gammas);
                double t24942 = 1.0/(k*k);
                double t24943 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24944 = 1.0/pow(rho_a,1.4E1/3.0);
                double t24945 = 1.0/(t24937*t24937);
                double t24946 = t24911*t24911;
                double t24947 = t24912*t24940*t24941*t24942*t24943*t24944*t24945*t24946*(1.0/1.28E2);
                double t24948 = t24947+t24939+1.0;
                double t24949 = 1.0/t24948;
                double t24950 = 1.0/pow(rho_a,1.0E1/3.0);
                double t24951 = 1.0/pow(rho_a,4.0/3.0);
                double t24952 = 1.0/pow(rho_a,5.0/3.0);
                double t24953 = 1.0/sqrt(t24893);
                double t24954 = 1.0/t24906;
                double t24955 = 1.0/(t24903*t24903);
                double t24956 = b4p*t24952*t24896*(2.0/3.0);
                double t24957 = b2p*c*t24951*(1.0/3.0);
                double t24958 = b1p*c*t24951*t24953*(1.0/6.0);
                double t24959 = b3p*c*t24951*t24894*(1.0/2.0);
                double t24960 = t24956+t24957+t24958+t24959;
                double t24961 = t24960*t24909*t24954*t24955;
                double t24962 = t24939+1.0;
                double t24963 = bet*t24911*t24950*t24890*t24938*t24887*t24888*t24889*(7.0/4.8E1);
                double t24964 = 1.0/t24926;
                double t24965 = 1.0/(t24923*t24923);
                double t24966 = b4f*t24952*t24896*(2.0/3.0);
                double t24967 = b2f*c*t24951*(1.0/3.0);
                double t24968 = b1f*c*t24951*t24953*(1.0/6.0);
                double t24969 = b3f*c*t24951*t24894*(1.0/2.0);
                double t24970 = t24966+t24967+t24968+t24969;
                double t24971 = a1f*c*c0f*t24951*t24927*(2.0/3.0);
                double t24972 = a1p*c*c0p*t24951*t24907*(2.0/3.0);
                double t24976 = t24970*t24964*t24929*t24965;
                double t24973 = t24961+t24971-t24972-t24976;
                double t24974 = t24914*t24917*t24973;
                double t24975 = -t24961+t24972+t24974;
                double t24977 = bet*t24911*t24890*t24962*t24891*t24949*t24887*t24888*t24889*(1.0/1.6E1);
                double t24978 = t24977+1.0;
                v_rho_a[Q] += scale * -t24931-t24933-(rho_a+rho_b)*(t24961-t24972-t24974+(gammas*(bet*t24911*t24950*t24890*t24962*t24949*t24887*t24888*t24889*(7.0/4.8E1)+bet*t24911*t24890*t24891*t24949*t24887*t24888*t24889*(t24963-bet*t24911*t24941*t24890*t24891*t24936*t24945*t24975*t24887*t24889*(1.0/8.0))*(1.0/1.6E1)-bet*t24911*t24890*t24962*t24891*1.0/(t24948*t24948)*t24887*t24888*t24889*(t24963+1.0/pow(rho_a,1.7E1/3.0)*t24912*t24940*t24941*t24942*t24943*t24945*t24946*(7.0/1.92E2)-1.0/(gammas*gammas*gammas)*t24912*t24940*t24942*t24943*t24944*t24936*1.0/(t24937*t24937*t24937)*t24946*t24975*(1.0/3.2E1)-bet*t24911*t24941*t24890*t24891*t24936*t24945*t24975*t24887*t24889*(1.0/8.0))*(1.0/1.6E1))*(1.0/2.0))/t24978)+gammas*log(t24978)*(1.0/2.0);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t24980 = pow(2.0,2.0/3.0);
                double t24981 = 1.0/gammas;
                double t24982 = 1.0/k;
                double t24983 = 1.0/(pi_m12*pi_m12);
                double t24984 = 1.0/pow(rho_a,7.0/3.0);
                double t24985 = 1.0/pow(rho_a,1.0/3.0);
                double t24986 = c*t24985;
                double t24987 = sqrt(t24986);
                double t24988 = pow(t24986,3.0/2.0);
                double t24989 = c*c;
                double t24990 = 1.0/pow(rho_a,2.0/3.0);
                double t24991 = 1.0/c0p;
                double t24992 = b1p*t24987;
                double t24993 = b3p*t24988;
                double t24994 = b4p*t24990*t24989;
                double t24995 = b2p*c*t24985;
                double t24996 = t24992+t24993+t24994+t24995;
                double t24997 = 1.0/t24996;
                double t24998 = t24991*t24997*(1.0/2.0);
                double t24999 = t24998+1.0;
                double t25000 = log(t24999);
                double t25001 = a1p*c*t24985;
                double t25002 = t25001+1.0;
                double t25003 = gamma_ab*2.0;
                double t25004 = gamma_aa+t25003;
                double t25005 = pow(2.0,1.0/3.0);
                double t25006 = t25005*2.0;
                double t25007 = t25006-2.0;
                double t25008 = two_13*2.0;
                double t25009 = t25008-2.0;
                double t25010 = 1.0/t25009;
                double t25011 = 1.0/c0f;
                double t25012 = b1f*t24987;
                double t25013 = b3f*t24988;
                double t25014 = b4f*t24990*t24989;
                double t25015 = b2f*c*t24985;
                double t25016 = t25012+t25013+t25014+t25015;
                double t25017 = 1.0/t25016;
                double t25018 = t25011*t25017*(1.0/2.0);
                double t25019 = t25018+1.0;
                double t25020 = log(t25019);
                double t25021 = a1f*c*t24985;
                double t25022 = t25021+1.0;
                double t25023 = c0f*t25020*t25022*2.0;
                double t25024 = c0p*t25000*t25002*2.0;
                double t25025 = t25023-t25024;
                double t25026 = t25010*t25007*t25025;
                double t25027 = t25024+t25026;
                double t25028 = t24981*t25027*2.0;
                double t25029 = exp(t25028);
                double t25030 = t25029-1.0;
                v_rho_b[Q] += scale * -t25024-t25026+gammas*log((bet*t24980*t24981*t24982*t24983*t24984*t25004*((bet*t24980*t24981*t24982*t24983*t24984*t25004*(1.0/1.6E1))/(exp(t24981*(t25024+t25010*t25007*(t25023-c0p*t25000*t25002*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1))/((bet*t24980*t24981*t24982*t24983*t24984*t25004*(1.0/1.6E1))/t25030+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_a,1.4E1/3.0)*1.0/(t25030*t25030)*(t25004*t25004)*t25005*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t25032 = pow(2.0,2.0/3.0);
                double t25033 = 1.0/gammas;
                double t25034 = 1.0/k;
                double t25035 = 1.0/(pi_m12*pi_m12);
                double t25036 = 1.0/pow(rho_a,7.0/3.0);
                double t25037 = 1.0/pow(rho_a,1.0/3.0);
                double t25038 = c*t25037;
                double t25039 = sqrt(t25038);
                double t25040 = pow(t25038,3.0/2.0);
                double t25041 = c*c;
                double t25042 = 1.0/pow(rho_a,2.0/3.0);
                double t25043 = 1.0/c0p;
                double t25044 = b1p*t25039;
                double t25045 = b3p*t25040;
                double t25046 = b4p*t25041*t25042;
                double t25047 = b2p*c*t25037;
                double t25048 = t25044+t25045+t25046+t25047;
                double t25049 = 1.0/t25048;
                double t25050 = t25043*t25049*(1.0/2.0);
                double t25051 = t25050+1.0;
                double t25052 = log(t25051);
                double t25053 = a1p*c*t25037;
                double t25054 = t25053+1.0;
                double t25055 = gamma_ab*2.0;
                double t25056 = gamma_aa+t25055;
                double t25057 = pow(2.0,1.0/3.0);
                double t25058 = t25057*2.0;
                double t25059 = t25058-2.0;
                double t25060 = two_13*2.0;
                double t25061 = t25060-2.0;
                double t25062 = 1.0/t25061;
                double t25063 = 1.0/c0f;
                double t25064 = b1f*t25039;
                double t25065 = b3f*t25040;
                double t25066 = b4f*t25041*t25042;
                double t25067 = b2f*c*t25037;
                double t25068 = t25064+t25065+t25066+t25067;
                double t25069 = 1.0/t25068;
                double t25070 = t25063*t25069*(1.0/2.0);
                double t25071 = t25070+1.0;
                double t25072 = log(t25071);
                double t25073 = a1f*c*t25037;
                double t25074 = t25073+1.0;
                double t25075 = c0f*t25072*t25074*2.0;
                double t25076 = c0p*t25052*t25054*2.0;
                double t25077 = t25075-t25076;
                double t25078 = t25062*t25059*t25077;
                double t25079 = t25076+t25078;
                double t25080 = t25033*t25079*2.0;
                double t25081 = exp(t25080);
                double t25082 = t25081-1.0;
                double t25083 = 1.0/t25082;
                double t25084 = bet*t25032*t25033*t25034*t25035*t25036*t25056*t25083*(1.0/1.6E1);
                double t25085 = bet*bet;
                double t25086 = 1.0/(gammas*gammas);
                double t25087 = 1.0/(k*k);
                double t25088 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t25089 = 1.0/pow(rho_a,1.4E1/3.0);
                double t25090 = 1.0/(t25082*t25082);
                double t25091 = t25056*t25056;
                double t25092 = t25090*t25091*t25057*t25085*t25086*t25087*t25088*t25089*(1.0/1.28E2);
                double t25093 = t25092+t25084+1.0;
                double t25094 = 1.0/t25093;
                double t25095 = t25084+1.0;
                v_gamma_aa[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t25032*t25033*t25034*t25035*t25036*t25094*t25095*(1.0/1.6E1)+t25056*t25083*t25057*t25085*t25094*t25086*t25087*t25088*t25089*(1.0/1.28E2)-bet*t25032*t25033*t25034*t25035*t25036*t25056*1.0/(t25093*t25093)*t25095*(bet*t25032*t25033*t25034*t25035*t25036*t25083*(1.0/1.6E1)+t25090*t25057*t25085*t25086*t25087*t25088*t25089*(gamma_aa*2.0+gamma_ab*4.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t25032*t25033*t25034*t25035*t25036*t25056*t25094*((bet*t25032*t25033*t25034*t25035*t25036*t25056*(1.0/1.6E1))/(exp(t25033*(t25076+t25062*t25059*(t25075-c0p*t25052*t25054*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t25097 = pow(2.0,2.0/3.0);
                double t25098 = 1.0/gammas;
                double t25099 = 1.0/k;
                double t25100 = 1.0/(pi_m12*pi_m12);
                double t25101 = 1.0/pow(rho_a,7.0/3.0);
                double t25102 = 1.0/pow(rho_a,1.0/3.0);
                double t25103 = c*t25102;
                double t25104 = sqrt(t25103);
                double t25105 = pow(t25103,3.0/2.0);
                double t25106 = c*c;
                double t25107 = 1.0/pow(rho_a,2.0/3.0);
                double t25108 = 1.0/c0p;
                double t25109 = b1p*t25104;
                double t25110 = b3p*t25105;
                double t25111 = b4p*t25106*t25107;
                double t25112 = b2p*c*t25102;
                double t25113 = t25110+t25111+t25112+t25109;
                double t25114 = 1.0/t25113;
                double t25115 = t25114*t25108*(1.0/2.0);
                double t25116 = t25115+1.0;
                double t25117 = log(t25116);
                double t25118 = a1p*c*t25102;
                double t25119 = t25118+1.0;
                double t25120 = gamma_ab*2.0;
                double t25121 = gamma_aa+t25120;
                double t25122 = pow(2.0,1.0/3.0);
                double t25123 = t25122*2.0;
                double t25124 = t25123-2.0;
                double t25125 = two_13*2.0;
                double t25126 = t25125-2.0;
                double t25127 = 1.0/t25126;
                double t25128 = 1.0/c0f;
                double t25129 = b1f*t25104;
                double t25130 = b3f*t25105;
                double t25131 = b4f*t25106*t25107;
                double t25132 = b2f*c*t25102;
                double t25133 = t25130+t25131+t25132+t25129;
                double t25134 = 1.0/t25133;
                double t25135 = t25134*t25128*(1.0/2.0);
                double t25136 = t25135+1.0;
                double t25137 = log(t25136);
                double t25138 = a1f*c*t25102;
                double t25139 = t25138+1.0;
                double t25140 = c0f*t25137*t25139*2.0;
                double t25141 = c0p*t25117*t25119*2.0;
                double t25142 = t25140-t25141;
                double t25143 = t25124*t25142*t25127;
                double t25144 = t25141+t25143;
                double t25145 = t25144*t25098*2.0;
                double t25146 = exp(t25145);
                double t25147 = t25146-1.0;
                double t25148 = 1.0/t25147;
                double t25149 = bet*t25100*t25101*t25121*t25148*t25097*t25098*t25099*(1.0/1.6E1);
                double t25150 = bet*bet;
                double t25151 = 1.0/(gammas*gammas);
                double t25152 = 1.0/(k*k);
                double t25153 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t25154 = 1.0/pow(rho_a,1.4E1/3.0);
                double t25155 = 1.0/(t25147*t25147);
                double t25156 = t25121*t25121;
                double t25157 = t25122*t25150*t25151*t25152*t25153*t25154*t25155*t25156*(1.0/1.28E2);
                double t25158 = t25157+t25149+1.0;
                double t25159 = 1.0/t25158;
                double t25160 = t25149+1.0;
                v_gamma_ab[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t25100*t25101*t25160*t25159*t25097*t25098*t25099*(1.0/8.0)+t25121*t25122*t25150*t25151*t25152*t25153*t25154*t25148*t25159*(1.0/6.4E1)-bet*t25100*t25101*t25121*t25160*1.0/(t25158*t25158)*t25097*t25098*t25099*(bet*t25100*t25101*t25148*t25097*t25098*t25099*(1.0/8.0)+t25122*t25150*t25151*t25152*t25153*t25154*t25155*(gamma_aa*4.0+gamma_ab*8.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t25100*t25101*t25121*t25159*t25097*t25098*t25099*((bet*t25100*t25101*t25121*t25097*t25098*t25099*(1.0/1.6E1))/(exp(t25098*(t25141+t25124*t25127*(t25140-c0p*t25117*t25119*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t23783 = rho_a+rho_b;
                double t23784 = 1.0/pow(t23783,1.0/3.0);
                double t23785 = c*t23784;
                double t23786 = 1.0/gammas;
                double t23787 = 1.0/k;
                double t23788 = 1.0/(pi_m12*pi_m12);
                double t23789 = 1.0/pow(t23783,7.0/3.0);
                double t23790 = 1.0/t23783;
                double t23791 = rho_a-rho_b;
                double t23792 = t23790*t23791;
                double t23793 = 1.0/c0p;
                double t23794 = sqrt(t23785);
                double t23795 = b1p*t23794;
                double t23796 = pow(t23785,3.0/2.0);
                double t23797 = b3p*t23796;
                double t23798 = c*c;
                double t23799 = 1.0/pow(t23783,2.0/3.0);
                double t23800 = b4p*t23798*t23799;
                double t23801 = b2p*c*t23784;
                double t23802 = t23800+t23801+t23795+t23797;
                double t23803 = 1.0/t23802;
                double t23804 = t23803*t23793*(1.0/2.0);
                double t23805 = t23804+1.0;
                double t23806 = log(t23805);
                double t23807 = a1p*c*t23784;
                double t23808 = t23807+1.0;
                double t23809 = c0p*t23806*t23808*2.0;
                double t23810 = t23791*t23791;
                double t23811 = t23792+1.0;
                double t23812 = -t23792+1.0;
                double t23813 = two_13*2.0;
                double t23814 = t23813-2.0;
                double t23815 = 1.0/t23814;
                double t23816 = 1.0/(t23783*t23783*t23783*t23783);
                double t23817 = t23810*t23810;
                double t23818 = pow(t23811,4.0/3.0);
                double t23819 = pow(t23812,4.0/3.0);
                double t23820 = t23818+t23819-2.0;
                double t23821 = pow(t23811,2.0/3.0);
                double t23822 = t23821*(1.0/2.0);
                double t23823 = pow(t23812,2.0/3.0);
                double t23824 = t23823*(1.0/2.0);
                double t23825 = t23822+t23824;
                double t23826 = 1.0/(t23825*t23825);
                double t23827 = 1.0/(t23825*t23825*t23825);
                double t23828 = 1.0/c0f;
                double t23829 = b1f*t23794;
                double t23830 = b3f*t23796;
                double t23831 = b4f*t23798*t23799;
                double t23832 = b2f*c*t23784;
                double t23833 = t23830+t23831+t23832+t23829;
                double t23834 = 1.0/t23833;
                double t23835 = t23834*t23828*(1.0/2.0);
                double t23836 = t23835+1.0;
                double t23837 = log(t23836);
                double t23838 = a1f*c*t23784;
                double t23839 = t23838+1.0;
                double t23865 = c0f*t23837*t23839*2.0;
                double t23840 = t23809-t23865;
                double t23841 = t23820*t23840*t23815*t23816*t23817;
                double t23842 = 1.0/d2fz0;
                double t23843 = 1.0/Aa;
                double t23844 = b1a*t23794;
                double t23845 = b3a*t23796;
                double t23846 = b4a*t23798*t23799;
                double t23847 = b2a*c*t23784;
                double t23848 = t23844+t23845+t23846+t23847;
                double t23849 = 1.0/t23848;
                double t23850 = t23843*t23849*(1.0/2.0);
                double t23851 = t23850+1.0;
                double t23852 = log(t23851);
                double t23853 = a1a*c*t23784;
                double t23854 = t23853+1.0;
                double t23855 = t23816*t23817;
                double t23856 = t23855-1.0;
                double t23857 = Aa*t23820*t23815*t23842*t23852*t23854*t23856*2.0;
                double t23858 = t23841-t23809+t23857;
                double t23866 = t23827*t23786*t23858;
                double t23859 = exp(-t23866);
                double t23860 = t23859-1.0;
                double t23861 = 1.0/t23860;
                double t23862 = gamma_ab*2.0;
                double t23863 = gamma_aa+gamma_bb+t23862;
                double t23864 = bet*t23861*t23826*t23863*t23786*t23787*t23788*t23789*(1.0/1.6E1);
                double t23867 = t23825*t23825;
                v[Q] += scale * t23783*(t23841-t23809+t23857+gammas*t23825*t23867*log((bet*t23826*t23863*t23786*t23787*t23788*t23789*(t23864+1.0)*(1.0/1.6E1))/(t23864+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/(t23860*t23860)*1.0/(t23825*t23825*t23825*t23825)*(t23863*t23863)*1.0/pow(t23783,1.4E1/3.0)*(1.0/2.56E2)+1.0)+1.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t23869 = rho_a+rho_b;
                double t23870 = 1.0/gammas;
                double t23871 = 1.0/k;
                double t23872 = 1.0/(pi_m12*pi_m12);
                double t23873 = 1.0/pow(t23869,7.0/3.0);
                double t23874 = 1.0/t23869;
                double t23875 = rho_a-rho_b;
                double t23876 = t23874*t23875;
                double t23877 = 1.0/pow(t23869,1.0/3.0);
                double t23878 = c*t23877;
                double t23879 = sqrt(t23878);
                double t23880 = pow(t23878,3.0/2.0);
                double t23881 = c*c;
                double t23882 = 1.0/pow(t23869,2.0/3.0);
                double t23883 = 1.0/c0p;
                double t23884 = b1p*t23879;
                double t23885 = b3p*t23880;
                double t23886 = b4p*t23881*t23882;
                double t23887 = b2p*c*t23877;
                double t23888 = t23884+t23885+t23886+t23887;
                double t23889 = 1.0/t23888;
                double t23890 = t23883*t23889*(1.0/2.0);
                double t23891 = t23890+1.0;
                double t23892 = log(t23891);
                double t23893 = a1p*c*t23877;
                double t23894 = t23893+1.0;
                double t23895 = c0p*t23892*t23894*2.0;
                double t23896 = t23875*t23875;
                double t23897 = t23876+1.0;
                double t23898 = -t23876+1.0;
                double t23899 = two_13*2.0;
                double t23900 = t23899-2.0;
                double t23901 = 1.0/t23900;
                double t23902 = 1.0/(t23869*t23869*t23869*t23869);
                double t23903 = t23896*t23896;
                double t23904 = pow(t23897,4.0/3.0);
                double t23905 = pow(t23898,4.0/3.0);
                double t23906 = t23904+t23905-2.0;
                double t23907 = pow(t23897,2.0/3.0);
                double t23908 = t23907*(1.0/2.0);
                double t23909 = pow(t23898,2.0/3.0);
                double t23910 = t23909*(1.0/2.0);
                double t23911 = t23910+t23908;
                double t23912 = 1.0/(t23911*t23911);
                double t23913 = 1.0/(t23911*t23911*t23911);
                double t23914 = 1.0/c0f;
                double t23915 = b1f*t23879;
                double t23916 = b3f*t23880;
                double t23917 = b4f*t23881*t23882;
                double t23918 = b2f*c*t23877;
                double t23919 = t23915+t23916+t23917+t23918;
                double t23920 = 1.0/t23919;
                double t23921 = t23920*t23914*(1.0/2.0);
                double t23922 = t23921+1.0;
                double t23923 = log(t23922);
                double t23924 = a1f*c*t23877;
                double t23925 = t23924+1.0;
                double t23951 = c0f*t23923*t23925*2.0;
                double t23926 = -t23951+t23895;
                double t23927 = t23901*t23902*t23903*t23906*t23926;
                double t23928 = 1.0/d2fz0;
                double t23929 = 1.0/Aa;
                double t23930 = b1a*t23879;
                double t23931 = b3a*t23880;
                double t23932 = b4a*t23881*t23882;
                double t23933 = b2a*c*t23877;
                double t23934 = t23930+t23931+t23932+t23933;
                double t23935 = 1.0/t23934;
                double t23936 = t23935*t23929*(1.0/2.0);
                double t23937 = t23936+1.0;
                double t23938 = log(t23937);
                double t23939 = a1a*c*t23877;
                double t23940 = t23939+1.0;
                double t23941 = t23902*t23903;
                double t23942 = t23941-1.0;
                double t23943 = Aa*t23901*t23940*t23906*t23942*t23928*t23938*2.0;
                double t23944 = t23943+t23927-t23895;
                double t23945 = exp(-t23913*t23870*t23944);
                double t23946 = t23945-1.0;
                double t23947 = 1.0/t23946;
                double t23948 = gamma_ab*2.0;
                double t23949 = gamma_aa+gamma_bb+t23948;
                double t23950 = bet*t23912*t23870*t23871*t23872*t23873*t23947*t23949*(1.0/1.6E1);
                double t23952 = 1.0/(t23869*t23869);
                double t23978 = t23952*t23875;
                double t23953 = t23874-t23978;
                double t23954 = 1.0/pow(t23869,4.0/3.0);
                double t23955 = t23951-t23895;
                double t23956 = t23901*t23902*t23903*t23906*t23955;
                double t23957 = -t23943+t23956+t23895;
                double t23958 = t23913*t23870*t23957;
                double t23959 = exp(t23958);
                double t23960 = t23959-1.0;
                double t23961 = 1.0/t23960;
                double t23962 = bet*t23912*t23870*t23871*t23961*t23872*t23873*t23949*(1.0/1.6E1);
                double t23963 = bet*bet;
                double t23964 = 1.0/(gammas*gammas);
                double t23965 = 1.0/(k*k);
                double t23966 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t23967 = 1.0/pow(t23869,1.4E1/3.0);
                double t23968 = 1.0/(t23960*t23960);
                double t23969 = 1.0/(t23911*t23911*t23911*t23911);
                double t23970 = t23949*t23949;
                double t23971 = t23970*t23963*t23964*t23965*t23966*t23967*t23968*t23969*(1.0/2.56E2);
                double t23972 = t23911*t23911;
                double t23973 = t23962+1.0;
                double t23974 = t23962+t23971+1.0;
                double t23975 = 1.0/t23974;
                double t23976 = 1.0/pow(t23869,1.0E1/3.0);
                double t23977 = 1.0/pow(t23897,1.0/3.0);
                double t23979 = t23953*t23977*(1.0/3.0);
                double t23980 = 1.0/pow(t23898,1.0/3.0);
                double t23997 = t23953*t23980*(1.0/3.0);
                double t23981 = t23979-t23997;
                double t23982 = 1.0/t23891;
                double t23983 = 1.0/(t23888*t23888);
                double t23984 = 1.0/pow(t23869,5.0/3.0);
                double t23985 = b4p*t23881*t23984*(2.0/3.0);
                double t23986 = b2p*c*t23954*(1.0/3.0);
                double t23987 = 1.0/sqrt(t23878);
                double t23988 = b1p*c*t23954*t23987*(1.0/6.0);
                double t23989 = b3p*c*t23954*t23879*(1.0/2.0);
                double t23990 = t23985+t23986+t23988+t23989;
                double t23991 = t23990*t23982*t23983*t23894;
                double t23992 = 1.0/(t23869*t23869*t23869*t23869*t23869);
                double t23993 = pow(t23897,1.0/3.0);
                double t23994 = t23953*t23993*(4.0/3.0);
                double t23995 = pow(t23898,1.0/3.0);
                double t24001 = t23953*t23995*(4.0/3.0);
                double t23996 = t23994-t24001;
                double t23998 = bet*t23912*t23870*t23871*t23961*t23872*t23949*t23976*(7.0/4.8E1);
                double t23999 = bet*t23913*t23870*t23871*t23961*t23872*t23873*t23981*t23949*(1.0/8.0);
                double t24000 = t23901*t23902*t23906*t23955*t23875*t23896*4.0;
                double t24002 = t23901*t23902*t23903*t23955*t23996;
                double t24003 = 1.0/t23922;
                double t24004 = 1.0/(t23919*t23919);
                double t24005 = b4f*t23881*t23984*(2.0/3.0);
                double t24006 = b2f*c*t23954*(1.0/3.0);
                double t24007 = b1f*c*t23954*t23987*(1.0/6.0);
                double t24008 = b3f*c*t23954*t23879*(1.0/2.0);
                double t24009 = t24005+t24006+t24007+t24008;
                double t24010 = a1f*c*c0f*t23923*t23954*(2.0/3.0);
                double t24012 = a1p*c*c0p*t23954*t23892*(2.0/3.0);
                double t24023 = t23925*t24003*t24004*t24009;
                double t24011 = t23991+t24010-t24012-t24023;
                double t24013 = t23903*t23992*4.0;
                double t24024 = t23902*t23875*t23896*4.0;
                double t24034 = t24013-t24024;
                double t24014 = Aa*t23901*t23940*t23906*t23928*t23938*t24034*2.0;
                double t24015 = 1.0/t23937;
                double t24016 = 1.0/(t23934*t23934);
                double t24017 = b4a*t23881*t23984*(2.0/3.0);
                double t24018 = b2a*c*t23954*(1.0/3.0);
                double t24019 = b1a*c*t23954*t23987*(1.0/6.0);
                double t24020 = b3a*c*t23954*t23879*(1.0/2.0);
                double t24021 = t24020+t24017+t24018+t24019;
                double t24022 = Aa*a1a*c*t23901*t23906*t23942*t23954*t23928*t23938*(2.0/3.0);
                double t24028 = t23901*t23903*t23906*t23955*t23992*4.0;
                double t24029 = t23901*t23902*t23903*t23906*t24011;
                double t24030 = Aa*t23901*t23940*t23942*t23928*t23938*t23996*2.0;
                double t24031 = t23901*t23940*t23906*t23942*t23928*t24021*t24015*t24016;
                double t24025 = t23991+t24000+t24002-t24012-t24030+t24022-t24031+t24014-t24028-t24029;
                double t24026 = t23913*t23870*t24025;
                double t24032 = t23870*t23981*t23957*t23969*3.0;
                double t24027 = -t24032+t24026;
                double t24033 = bet*t23912*t23870*t23871*t23872*t23873*t23949*t23959*t23968*t24027*(1.0/1.6E1);
                double t24035 = bet*t23912*t23870*t23871*t23872*t23873*t23973*t23975*t23949*(1.0/1.6E1);
                double t24036 = t24035+1.0;
                v_rho_a[Q] += scale * t23943-t23956-t23895-t23869*(t23991+t24000+t24002-t24012-t24030+t24022-t24031+t24014-t24028-t24029-gammas*t23972*t23981*log((bet*t23912*t23870*t23871*t23872*t23873*t23949*(t23950+1.0)*(1.0/1.6E1))/(t23950+t23971+1.0)+1.0)*3.0+(gammas*t23911*t23972*(bet*t23912*t23870*t23871*t23872*t23973*t23975*t23949*t23976*(7.0/4.8E1)+bet*t23912*t23870*t23871*t23872*t23873*t23975*t23949*(t23998+t23999+t24033)*(1.0/1.6E1)+bet*t23913*t23870*t23871*t23872*t23873*t23981*t23973*t23975*t23949*(1.0/8.0)-bet*t23912*t23870*t23871*t23872*t23873*t23973*1.0/(t23974*t23974)*t23949*(t23998+t23999+t24033+t23970*t23963*t23964*t23965*t23966*1.0/pow(t23869,1.7E1/3.0)*t23968*t23969*(7.0/3.84E2)+1.0/(t23911*t23911*t23911*t23911*t23911)*t23970*t23963*t23981*t23964*t23965*t23966*t23967*t23968*(1.0/6.4E1)+1.0/(t23960*t23960*t23960)*t23970*t23963*t23964*t23965*t23966*t23967*t23959*t23969*t24027*(1.0/1.28E2))*(1.0/1.6E1)))/t24036)+gammas*t23911*t23972*log(t24036);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t24038 = rho_a+rho_b;
                double t24039 = 1.0/gammas;
                double t24040 = 1.0/k;
                double t24041 = 1.0/(pi_m12*pi_m12);
                double t24042 = 1.0/pow(t24038,7.0/3.0);
                double t24043 = 1.0/t24038;
                double t24044 = rho_a-rho_b;
                double t24045 = t24043*t24044;
                double t24046 = 1.0/pow(t24038,1.0/3.0);
                double t24047 = c*t24046;
                double t24048 = sqrt(t24047);
                double t24049 = pow(t24047,3.0/2.0);
                double t24050 = c*c;
                double t24051 = 1.0/pow(t24038,2.0/3.0);
                double t24052 = 1.0/c0p;
                double t24053 = b1p*t24048;
                double t24054 = b3p*t24049;
                double t24055 = b4p*t24050*t24051;
                double t24056 = b2p*c*t24046;
                double t24057 = t24053+t24054+t24055+t24056;
                double t24058 = 1.0/t24057;
                double t24059 = t24052*t24058*(1.0/2.0);
                double t24060 = t24059+1.0;
                double t24061 = log(t24060);
                double t24062 = a1p*c*t24046;
                double t24063 = t24062+1.0;
                double t24064 = c0p*t24061*t24063*2.0;
                double t24065 = t24044*t24044;
                double t24066 = t24045+1.0;
                double t24067 = -t24045+1.0;
                double t24068 = two_13*2.0;
                double t24069 = t24068-2.0;
                double t24070 = 1.0/t24069;
                double t24071 = 1.0/(t24038*t24038*t24038*t24038);
                double t24072 = t24065*t24065;
                double t24073 = pow(t24066,4.0/3.0);
                double t24074 = pow(t24067,4.0/3.0);
                double t24075 = t24073+t24074-2.0;
                double t24076 = pow(t24066,2.0/3.0);
                double t24077 = t24076*(1.0/2.0);
                double t24078 = pow(t24067,2.0/3.0);
                double t24079 = t24078*(1.0/2.0);
                double t24080 = t24077+t24079;
                double t24081 = 1.0/(t24080*t24080);
                double t24082 = 1.0/(t24080*t24080*t24080);
                double t24083 = 1.0/c0f;
                double t24084 = b1f*t24048;
                double t24085 = b3f*t24049;
                double t24086 = b4f*t24050*t24051;
                double t24087 = b2f*c*t24046;
                double t24088 = t24084+t24085+t24086+t24087;
                double t24089 = 1.0/t24088;
                double t24090 = t24083*t24089*(1.0/2.0);
                double t24091 = t24090+1.0;
                double t24092 = log(t24091);
                double t24093 = a1f*c*t24046;
                double t24094 = t24093+1.0;
                double t24120 = c0f*t24092*t24094*2.0;
                double t24095 = -t24120+t24064;
                double t24096 = t24070*t24071*t24072*t24075*t24095;
                double t24097 = 1.0/d2fz0;
                double t24098 = 1.0/Aa;
                double t24099 = b1a*t24048;
                double t24100 = b3a*t24049;
                double t24101 = b4a*t24050*t24051;
                double t24102 = b2a*c*t24046;
                double t24103 = t24100+t24101+t24102+t24099;
                double t24104 = 1.0/t24103;
                double t24105 = t24104*t24098*(1.0/2.0);
                double t24106 = t24105+1.0;
                double t24107 = log(t24106);
                double t24108 = a1a*c*t24046;
                double t24109 = t24108+1.0;
                double t24110 = t24071*t24072;
                double t24111 = t24110-1.0;
                double t24112 = Aa*t24111*t24070*t24107*t24109*t24075*t24097*2.0;
                double t24113 = t24112-t24064+t24096;
                double t24114 = exp(-t24113*t24082*t24039);
                double t24115 = t24114-1.0;
                double t24116 = 1.0/t24115;
                double t24117 = gamma_ab*2.0;
                double t24118 = gamma_aa+gamma_bb+t24117;
                double t24119 = bet*t24040*t24041*t24042*t24116*t24081*t24118*t24039*(1.0/1.6E1);
                double t24121 = 1.0/(t24038*t24038);
                double t24122 = t24121*t24044;
                double t24123 = t24122+t24043;
                double t24124 = 1.0/pow(t24038,4.0/3.0);
                double t24125 = t24120-t24064;
                double t24126 = t24070*t24071*t24125*t24072*t24075;
                double t24127 = -t24112+t24126+t24064;
                double t24128 = t24082*t24127*t24039;
                double t24129 = exp(t24128);
                double t24130 = t24129-1.0;
                double t24131 = 1.0/t24130;
                double t24132 = bet*t24040*t24041*t24131*t24042*t24081*t24118*t24039*(1.0/1.6E1);
                double t24133 = bet*bet;
                double t24134 = 1.0/(gammas*gammas);
                double t24135 = 1.0/(k*k);
                double t24136 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24137 = 1.0/pow(t24038,1.4E1/3.0);
                double t24138 = 1.0/(t24130*t24130);
                double t24139 = 1.0/(t24080*t24080*t24080*t24080);
                double t24140 = t24118*t24118;
                double t24141 = t24140*t24133*t24134*t24135*t24136*t24137*t24138*t24139*(1.0/2.56E2);
                double t24142 = t24080*t24080;
                double t24143 = t24132+1.0;
                double t24144 = t24132+t24141+1.0;
                double t24145 = 1.0/t24144;
                double t24146 = 1.0/pow(t24038,1.0E1/3.0);
                double t24147 = 1.0/pow(t24066,1.0/3.0);
                double t24148 = t24123*t24147*(1.0/3.0);
                double t24149 = 1.0/pow(t24067,1.0/3.0);
                double t24166 = t24123*t24149*(1.0/3.0);
                double t24150 = t24148-t24166;
                double t24151 = 1.0/t24060;
                double t24152 = 1.0/(t24057*t24057);
                double t24153 = 1.0/pow(t24038,5.0/3.0);
                double t24154 = b4p*t24050*t24153*(2.0/3.0);
                double t24155 = b2p*c*t24124*(1.0/3.0);
                double t24156 = 1.0/sqrt(t24047);
                double t24157 = b1p*c*t24124*t24156*(1.0/6.0);
                double t24158 = b3p*c*t24124*t24048*(1.0/2.0);
                double t24159 = t24154+t24155+t24157+t24158;
                double t24160 = t24151*t24152*t24063*t24159;
                double t24161 = 1.0/(t24038*t24038*t24038*t24038*t24038);
                double t24162 = pow(t24066,1.0/3.0);
                double t24163 = t24123*t24162*(4.0/3.0);
                double t24164 = pow(t24067,1.0/3.0);
                double t24170 = t24123*t24164*(4.0/3.0);
                double t24165 = -t24170+t24163;
                double t24167 = bet*t24040*t24041*t24131*t24042*t24150*t24082*t24118*t24039*(1.0/8.0);
                double t24168 = t24070*t24044*t24071*t24125*t24065*t24075*4.0;
                double t24169 = t24070*t24125*t24161*t24072*t24075*4.0;
                double t24171 = t24070*t24071*t24125*t24072*t24165;
                double t24172 = 1.0/t24091;
                double t24173 = 1.0/(t24088*t24088);
                double t24174 = b4f*t24050*t24153*(2.0/3.0);
                double t24175 = b2f*c*t24124*(1.0/3.0);
                double t24176 = b1f*c*t24124*t24156*(1.0/6.0);
                double t24177 = b3f*c*t24124*t24048*(1.0/2.0);
                double t24178 = t24174+t24175+t24176+t24177;
                double t24179 = a1f*c*c0f*t24124*t24092*(2.0/3.0);
                double t24180 = a1p*c*c0p*t24061*t24124*(2.0/3.0);
                double t24181 = t24044*t24071*t24065*4.0;
                double t24182 = t24161*t24072*4.0;
                double t24183 = t24181+t24182;
                double t24184 = 1.0/t24106;
                double t24185 = 1.0/(t24103*t24103);
                double t24186 = b4a*t24050*t24153*(2.0/3.0);
                double t24187 = b2a*c*t24124*(1.0/3.0);
                double t24188 = b1a*c*t24124*t24156*(1.0/6.0);
                double t24189 = b3a*c*t24124*t24048*(1.0/2.0);
                double t24190 = t24186+t24187+t24188+t24189;
                double t24191 = t24111*t24070*t24109*t24190*t24075*t24184*t24185*t24097;
                double t24197 = t24172*t24173*t24094*t24178;
                double t24192 = t24160-t24180+t24179-t24197;
                double t24193 = t24070*t24071*t24072*t24075*t24192;
                double t24198 = Aa*t24111*t24070*t24107*t24109*t24165*t24097*2.0;
                double t24199 = Aa*t24070*t24107*t24109*t24075*t24183*t24097*2.0;
                double t24200 = Aa*a1a*c*t24111*t24070*t24124*t24107*t24075*t24097*(2.0/3.0);
                double t24194 = -t24200-t24160+t24171+t24180+t24191+t24193+t24168+t24169-t24198-t24199;
                double t24195 = t24082*t24039*t24194;
                double t24201 = t24150*t24127*t24039*t24139*3.0;
                double t24196 = -t24201+t24195;
                double t24202 = bet*t24040*t24041*t24042*t24081*t24118*t24039*t24129*t24138*t24196*(1.0/1.6E1);
                double t24203 = bet*t24040*t24041*t24042*t24143*t24081*t24118*t24145*t24039*(1.0/1.6E1);
                double t24204 = t24203+1.0;
                v_rho_b[Q] += scale * t24112-t24126-t24064+t24038*(-t24200-t24160+t24171+t24180+t24191+t24193+t24168+t24169-t24198-t24199-gammas*t24150*t24142*log((bet*t24040*t24041*t24042*t24081*t24118*t24039*(t24119+1.0)*(1.0/1.6E1))/(t24141+t24119+1.0)+1.0)*3.0+(gammas*t24142*t24080*(bet*t24040*t24041*t24042*t24081*t24118*t24145*t24039*(t24202+t24167-bet*t24040*t24041*t24131*t24081*t24118*t24146*t24039*(7.0/4.8E1))*(1.0/1.6E1)-bet*t24040*t24041*t24143*t24081*t24118*t24145*t24146*t24039*(7.0/4.8E1)-bet*t24040*t24041*t24042*t24143*t24081*1.0/(t24144*t24144)*t24118*t24039*(t24202+t24167-t24140*t24133*t24134*t24135*t24136*1.0/pow(t24038,1.7E1/3.0)*t24138*t24139*(7.0/3.84E2)-bet*t24040*t24041*t24131*t24081*t24118*t24146*t24039*(7.0/4.8E1)+t24140*t24150*t24133*1.0/(t24080*t24080*t24080*t24080*t24080)*t24134*t24135*t24136*t24137*t24138*(1.0/6.4E1)+1.0/(t24130*t24130*t24130)*t24140*t24133*t24134*t24135*t24136*t24137*t24129*t24139*t24196*(1.0/1.28E2))*(1.0/1.6E1)+bet*t24040*t24041*t24042*t24150*t24143*t24082*t24118*t24145*t24039*(1.0/8.0)))/t24204)+gammas*t24142*t24080*log(t24204);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t24206 = rho_a+rho_b;
                double t24207 = 1.0/gammas;
                double t24208 = 1.0/k;
                double t24209 = 1.0/(pi_m12*pi_m12);
                double t24210 = 1.0/pow(t24206,7.0/3.0);
                double t24211 = 1.0/t24206;
                double t24212 = rho_a-rho_b;
                double t24213 = t24211*t24212;
                double t24214 = 1.0/pow(t24206,1.0/3.0);
                double t24215 = c*t24214;
                double t24216 = sqrt(t24215);
                double t24217 = pow(t24215,3.0/2.0);
                double t24218 = c*c;
                double t24219 = 1.0/pow(t24206,2.0/3.0);
                double t24220 = 1.0/c0p;
                double t24221 = b1p*t24216;
                double t24222 = b3p*t24217;
                double t24223 = b4p*t24218*t24219;
                double t24224 = b2p*c*t24214;
                double t24225 = t24221+t24222+t24223+t24224;
                double t24226 = 1.0/t24225;
                double t24227 = t24220*t24226*(1.0/2.0);
                double t24228 = t24227+1.0;
                double t24229 = log(t24228);
                double t24230 = a1p*c*t24214;
                double t24231 = t24230+1.0;
                double t24232 = c0p*t24231*t24229*2.0;
                double t24233 = t24212*t24212;
                double t24234 = t24213+1.0;
                double t24235 = -t24213+1.0;
                double t24236 = two_13*2.0;
                double t24237 = t24236-2.0;
                double t24238 = 1.0/t24237;
                double t24239 = 1.0/(t24206*t24206*t24206*t24206);
                double t24240 = t24233*t24233;
                double t24241 = pow(t24234,4.0/3.0);
                double t24242 = pow(t24235,4.0/3.0);
                double t24243 = t24241+t24242-2.0;
                double t24244 = pow(t24234,2.0/3.0);
                double t24245 = t24244*(1.0/2.0);
                double t24246 = pow(t24235,2.0/3.0);
                double t24247 = t24246*(1.0/2.0);
                double t24248 = t24245+t24247;
                double t24249 = 1.0/(t24248*t24248);
                double t24250 = 1.0/(t24248*t24248*t24248);
                double t24251 = 1.0/c0f;
                double t24252 = b1f*t24216;
                double t24253 = b3f*t24217;
                double t24254 = b4f*t24218*t24219;
                double t24255 = b2f*c*t24214;
                double t24256 = t24252+t24253+t24254+t24255;
                double t24257 = 1.0/t24256;
                double t24258 = t24251*t24257*(1.0/2.0);
                double t24259 = t24258+1.0;
                double t24260 = log(t24259);
                double t24261 = a1f*c*t24214;
                double t24262 = t24261+1.0;
                double t24288 = c0f*t24260*t24262*2.0;
                double t24263 = t24232-t24288;
                double t24264 = t24240*t24243*t24263*t24238*t24239;
                double t24265 = 1.0/d2fz0;
                double t24266 = 1.0/Aa;
                double t24267 = b1a*t24216;
                double t24268 = b3a*t24217;
                double t24269 = b4a*t24218*t24219;
                double t24270 = b2a*c*t24214;
                double t24271 = t24270+t24267+t24268+t24269;
                double t24272 = 1.0/t24271;
                double t24273 = t24272*t24266*(1.0/2.0);
                double t24274 = t24273+1.0;
                double t24275 = log(t24274);
                double t24276 = a1a*c*t24214;
                double t24277 = t24276+1.0;
                double t24278 = t24240*t24239;
                double t24279 = t24278-1.0;
                double t24280 = Aa*t24243*t24238*t24265*t24275*t24277*t24279*2.0;
                double t24281 = -t24232+t24280+t24264;
                double t24289 = t24250*t24207*t24281;
                double t24282 = exp(-t24289);
                double t24283 = t24282-1.0;
                double t24284 = 1.0/t24283;
                double t24285 = gamma_ab*2.0;
                double t24286 = gamma_aa+gamma_bb+t24285;
                double t24287 = bet*t24210*t24207*t24208*t24209*t24284*t24249*t24286*(1.0/1.6E1);
                double t24290 = t24248*t24248;
                double t24291 = t24287+1.0;
                double t24292 = bet*bet;
                double t24293 = 1.0/(gammas*gammas);
                double t24294 = 1.0/(k*k);
                double t24295 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24296 = 1.0/pow(t24206,1.4E1/3.0);
                double t24297 = 1.0/(t24283*t24283);
                double t24298 = 1.0/(t24248*t24248*t24248*t24248);
                double t24299 = t24286*t24286;
                double t24300 = t24292*t24293*t24294*t24295*t24296*t24297*t24298*t24299*(1.0/2.56E2);
                double t24301 = t24300+t24287+1.0;
                double t24302 = 1.0/t24301;
                v_gamma_aa[Q] += scale * (gammas*t24206*t24290*t24248*(bet*t24210*t24302*t24207*t24208*t24209*t24291*t24249*(1.0/1.6E1)+t24302*t24292*t24284*t24293*t24294*t24286*t24295*t24296*t24298*(1.0/2.56E2)-bet*t24210*1.0/(t24301*t24301)*t24207*t24208*t24209*t24291*t24249*t24286*(bet*t24210*t24207*t24208*t24209*t24284*t24249*(1.0/1.6E1)+t24292*t24293*t24294*t24295*t24296*t24297*t24298*(gamma_aa*2.0+gamma_ab*4.0+gamma_bb*2.0)*(1.0/2.56E2))*(1.0/1.6E1)))/(bet*t24210*t24302*t24207*t24208*t24209*t24291*t24249*t24286*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t24304 = rho_a+rho_b;
                double t24305 = 1.0/gammas;
                double t24306 = 1.0/k;
                double t24307 = 1.0/(pi_m12*pi_m12);
                double t24308 = 1.0/pow(t24304,7.0/3.0);
                double t24309 = 1.0/t24304;
                double t24310 = rho_a-rho_b;
                double t24311 = t24310*t24309;
                double t24312 = 1.0/pow(t24304,1.0/3.0);
                double t24313 = c*t24312;
                double t24314 = sqrt(t24313);
                double t24315 = pow(t24313,3.0/2.0);
                double t24316 = c*c;
                double t24317 = 1.0/pow(t24304,2.0/3.0);
                double t24318 = 1.0/c0p;
                double t24319 = b1p*t24314;
                double t24320 = b3p*t24315;
                double t24321 = b4p*t24316*t24317;
                double t24322 = b2p*c*t24312;
                double t24323 = t24320+t24321+t24322+t24319;
                double t24324 = 1.0/t24323;
                double t24325 = t24324*t24318*(1.0/2.0);
                double t24326 = t24325+1.0;
                double t24327 = log(t24326);
                double t24328 = a1p*c*t24312;
                double t24329 = t24328+1.0;
                double t24330 = c0p*t24327*t24329*2.0;
                double t24331 = t24310*t24310;
                double t24332 = t24311+1.0;
                double t24333 = -t24311+1.0;
                double t24334 = two_13*2.0;
                double t24335 = t24334-2.0;
                double t24336 = 1.0/t24335;
                double t24337 = 1.0/(t24304*t24304*t24304*t24304);
                double t24338 = t24331*t24331;
                double t24339 = pow(t24332,4.0/3.0);
                double t24340 = pow(t24333,4.0/3.0);
                double t24341 = t24340+t24339-2.0;
                double t24342 = pow(t24332,2.0/3.0);
                double t24343 = t24342*(1.0/2.0);
                double t24344 = pow(t24333,2.0/3.0);
                double t24345 = t24344*(1.0/2.0);
                double t24346 = t24343+t24345;
                double t24347 = 1.0/(t24346*t24346);
                double t24348 = 1.0/(t24346*t24346*t24346);
                double t24349 = 1.0/c0f;
                double t24350 = b1f*t24314;
                double t24351 = b3f*t24315;
                double t24352 = b4f*t24316*t24317;
                double t24353 = b2f*c*t24312;
                double t24354 = t24350+t24351+t24352+t24353;
                double t24355 = 1.0/t24354;
                double t24356 = t24355*t24349*(1.0/2.0);
                double t24357 = t24356+1.0;
                double t24358 = log(t24357);
                double t24359 = a1f*c*t24312;
                double t24360 = t24359+1.0;
                double t24386 = c0f*t24360*t24358*2.0;
                double t24361 = t24330-t24386;
                double t24362 = t24341*t24361*t24336*t24337*t24338;
                double t24363 = 1.0/d2fz0;
                double t24364 = 1.0/Aa;
                double t24365 = b1a*t24314;
                double t24366 = b3a*t24315;
                double t24367 = b4a*t24316*t24317;
                double t24368 = b2a*c*t24312;
                double t24369 = t24365+t24366+t24367+t24368;
                double t24370 = 1.0/t24369;
                double t24371 = t24370*t24364*(1.0/2.0);
                double t24372 = t24371+1.0;
                double t24373 = log(t24372);
                double t24374 = a1a*c*t24312;
                double t24375 = t24374+1.0;
                double t24376 = t24337*t24338;
                double t24377 = t24376-1.0;
                double t24378 = Aa*t24341*t24336*t24363*t24373*t24375*t24377*2.0;
                double t24379 = -t24330+t24362+t24378;
                double t24387 = t24305*t24348*t24379;
                double t24380 = exp(-t24387);
                double t24381 = t24380-1.0;
                double t24382 = 1.0/t24381;
                double t24383 = gamma_ab*2.0;
                double t24384 = gamma_aa+gamma_bb+t24383;
                double t24385 = bet*t24305*t24306*t24307*t24308*t24382*t24347*t24384*(1.0/1.6E1);
                double t24388 = t24346*t24346;
                double t24389 = t24385+1.0;
                double t24390 = bet*bet;
                double t24391 = 1.0/(gammas*gammas);
                double t24392 = 1.0/(k*k);
                double t24393 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24394 = 1.0/pow(t24304,1.4E1/3.0);
                double t24395 = 1.0/(t24381*t24381);
                double t24396 = 1.0/(t24346*t24346*t24346*t24346);
                double t24397 = t24384*t24384;
                double t24398 = t24390*t24391*t24392*t24393*t24394*t24395*t24396*t24397*(1.0/2.56E2);
                double t24399 = t24385+t24398+1.0;
                double t24400 = 1.0/t24399;
                v_gamma_ab[Q] += scale * (gammas*t24304*t24346*t24388*(bet*t24400*t24305*t24306*t24307*t24308*t24347*t24389*(1.0/8.0)+t24400*t24390*t24382*t24391*t24392*t24384*t24393*t24394*t24396*(1.0/1.28E2)-bet*t24305*t24306*t24307*t24308*t24347*t24384*t24389*1.0/(t24399*t24399)*(bet*t24305*t24306*t24307*t24308*t24382*t24347*(1.0/8.0)+t24390*t24391*t24392*t24393*t24394*t24395*t24396*(gamma_aa*4.0+gamma_ab*8.0+gamma_bb*4.0)*(1.0/2.56E2))*(1.0/1.6E1)))/(bet*t24400*t24305*t24306*t24307*t24308*t24347*t24384*t24389*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t24402 = rho_a+rho_b;
                double t24403 = 1.0/gammas;
                double t24404 = 1.0/k;
                double t24405 = 1.0/(pi_m12*pi_m12);
                double t24406 = 1.0/pow(t24402,7.0/3.0);
                double t24407 = 1.0/t24402;
                double t24408 = rho_a-rho_b;
                double t24409 = t24407*t24408;
                double t24410 = 1.0/pow(t24402,1.0/3.0);
                double t24411 = c*t24410;
                double t24412 = sqrt(t24411);
                double t24413 = pow(t24411,3.0/2.0);
                double t24414 = c*c;
                double t24415 = 1.0/pow(t24402,2.0/3.0);
                double t24416 = 1.0/c0p;
                double t24417 = b1p*t24412;
                double t24418 = b3p*t24413;
                double t24419 = b4p*t24414*t24415;
                double t24420 = b2p*c*t24410;
                double t24421 = t24420+t24417+t24418+t24419;
                double t24422 = 1.0/t24421;
                double t24423 = t24422*t24416*(1.0/2.0);
                double t24424 = t24423+1.0;
                double t24425 = log(t24424);
                double t24426 = a1p*c*t24410;
                double t24427 = t24426+1.0;
                double t24428 = c0p*t24425*t24427*2.0;
                double t24429 = t24408*t24408;
                double t24430 = t24409+1.0;
                double t24431 = -t24409+1.0;
                double t24432 = two_13*2.0;
                double t24433 = t24432-2.0;
                double t24434 = 1.0/t24433;
                double t24435 = 1.0/(t24402*t24402*t24402*t24402);
                double t24436 = t24429*t24429;
                double t24437 = pow(t24430,4.0/3.0);
                double t24438 = pow(t24431,4.0/3.0);
                double t24439 = t24437+t24438-2.0;
                double t24440 = pow(t24430,2.0/3.0);
                double t24441 = t24440*(1.0/2.0);
                double t24442 = pow(t24431,2.0/3.0);
                double t24443 = t24442*(1.0/2.0);
                double t24444 = t24441+t24443;
                double t24445 = 1.0/(t24444*t24444);
                double t24446 = 1.0/(t24444*t24444*t24444);
                double t24447 = 1.0/c0f;
                double t24448 = b1f*t24412;
                double t24449 = b3f*t24413;
                double t24450 = b4f*t24414*t24415;
                double t24451 = b2f*c*t24410;
                double t24452 = t24450+t24451+t24448+t24449;
                double t24453 = 1.0/t24452;
                double t24454 = t24453*t24447*(1.0/2.0);
                double t24455 = t24454+1.0;
                double t24456 = log(t24455);
                double t24457 = a1f*c*t24410;
                double t24458 = t24457+1.0;
                double t24484 = c0f*t24456*t24458*2.0;
                double t24459 = t24428-t24484;
                double t24460 = t24434*t24435*t24436*t24439*t24459;
                double t24461 = 1.0/d2fz0;
                double t24462 = 1.0/Aa;
                double t24463 = b1a*t24412;
                double t24464 = b3a*t24413;
                double t24465 = b4a*t24414*t24415;
                double t24466 = b2a*c*t24410;
                double t24467 = t24463+t24464+t24465+t24466;
                double t24468 = 1.0/t24467;
                double t24469 = t24462*t24468*(1.0/2.0);
                double t24470 = t24469+1.0;
                double t24471 = log(t24470);
                double t24472 = a1a*c*t24410;
                double t24473 = t24472+1.0;
                double t24474 = t24435*t24436;
                double t24475 = t24474-1.0;
                double t24476 = Aa*t24434*t24461*t24471*t24473*t24439*t24475*2.0;
                double t24477 = t24460-t24428+t24476;
                double t24485 = t24403*t24446*t24477;
                double t24478 = exp(-t24485);
                double t24479 = t24478-1.0;
                double t24480 = 1.0/t24479;
                double t24481 = gamma_ab*2.0;
                double t24482 = gamma_aa+gamma_bb+t24481;
                double t24483 = bet*t24403*t24404*t24405*t24406*t24480*t24445*t24482*(1.0/1.6E1);
                double t24486 = t24444*t24444;
                double t24487 = t24483+1.0;
                double t24488 = bet*bet;
                double t24489 = 1.0/(gammas*gammas);
                double t24490 = 1.0/(k*k);
                double t24491 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t24492 = 1.0/pow(t24402,1.4E1/3.0);
                double t24493 = 1.0/(t24479*t24479);
                double t24494 = 1.0/(t24444*t24444*t24444*t24444);
                double t24495 = t24482*t24482;
                double t24496 = t24490*t24491*t24492*t24493*t24494*t24495*t24488*t24489*(1.0/2.56E2);
                double t24497 = t24483+t24496+1.0;
                double t24498 = 1.0/t24497;
                v_gamma_bb[Q] += scale * (gammas*t24402*t24444*t24486*(bet*t24403*t24404*t24405*t24406*t24445*t24487*t24498*(1.0/1.6E1)+t24480*t24490*t24482*t24491*t24492*t24494*t24488*t24489*t24498*(1.0/2.56E2)-bet*t24403*t24404*t24405*t24406*t24445*t24482*t24487*1.0/(t24497*t24497)*(bet*t24403*t24404*t24405*t24406*t24480*t24445*(1.0/1.6E1)+t24490*t24491*t24492*t24493*t24494*t24488*t24489*(gamma_aa*2.0+gamma_ab*4.0+gamma_bb*2.0)*(1.0/2.56E2))*(1.0/1.6E1)))/(bet*t24403*t24404*t24405*t24406*t24445*t24482*t24487*t24498*(1.0/1.6E1)+1.0);
            }
            
        }
    }
}

}
