#include <libmints/vector.h>
#include "PBE_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

PBE_CFunctional::PBE_CFunctional()
{
    name_ = "PBE_C";
    description_ = "    PBE Correlation\n";
    citation_ = "    J.P. Perdew, K. Burke., and M. Ernzerhof, Phys. Rev. Lett., 77, 3865-3868, 1996\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["k"] =   3.0936677262801355E+00;
    parameters_["pi_m12"] =   5.6418958354775628E-01;
    parameters_["bet"] =   6.6724550603149205E-02;
    parameters_["gammas"] =   3.1090690869654901E-02;
    parameters_["d2fz0"] =   1.7099209341613653E+00;
    parameters_["Aa"] =   1.6886900000000000E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1090699999999999E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545349999999999E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
}
PBE_CFunctional::~PBE_CFunctional()
{
}
void PBE_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double k = parameters_["k"];
    double pi_m12 = parameters_["pi_m12"];
    double bet = parameters_["bet"];
    double gammas = parameters_["gammas"];
    double d2fz0 = parameters_["d2fz0"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t707 = pow(2.0,2.0/3.0);
                double t708 = 1.0/gammas;
                double t709 = 1.0/k;
                double t710 = 1.0/(pi_m12*pi_m12);
                double t711 = 1.0/pow(rho_b,7.0/3.0);
                double t712 = 1.0/pow(rho_b,1.0/3.0);
                double t713 = c*t712;
                double t714 = sqrt(t713);
                double t715 = pow(t713,3.0/2.0);
                double t716 = c*c;
                double t717 = 1.0/pow(rho_b,2.0/3.0);
                double t718 = 1.0/c0p;
                double t719 = b1p*t714;
                double t720 = b3p*t715;
                double t721 = b4p*t716*t717;
                double t722 = b2p*c*t712;
                double t723 = t719+t720+t721+t722;
                double t724 = 1.0/t723;
                double t725 = t718*t724*(1.0/2.0);
                double t726 = t725+1.0;
                double t727 = log(t726);
                double t728 = a1p*c*t712;
                double t729 = t728+1.0;
                double t730 = gamma_ab*2.0;
                double t731 = gamma_bb+t730;
                double t732 = pow(2.0,1.0/3.0);
                double t733 = t732*2.0;
                double t734 = t733-2.0;
                double t735 = two_13*2.0;
                double t736 = t735-2.0;
                double t737 = 1.0/t736;
                double t738 = 1.0/c0f;
                double t739 = b1f*t714;
                double t740 = b3f*t715;
                double t741 = b4f*t716*t717;
                double t742 = b2f*c*t712;
                double t743 = t739+t740+t741+t742;
                double t744 = 1.0/t743;
                double t745 = t738*t744*(1.0/2.0);
                double t746 = t745+1.0;
                double t747 = log(t746);
                double t748 = a1f*c*t712;
                double t749 = t748+1.0;
                double t750 = c0f*t747*t749*2.0;
                double t751 = c0p*t727*t729*2.0;
                double t752 = t750-t751;
                double t753 = t734*t737*t752;
                double t754 = t751+t753;
                double t755 = t708*t754*2.0;
                double t756 = exp(t755);
                double t757 = t756-1.0;
                double t758 = 1.0/t757;
                double t759 = bet*t707*t708*t709*t710*t711*t731*t758*(1.0/1.6E1);
                v[Q] += scale * -(rho_a+rho_b)*(t751+t753-gammas*log((bet*t707*t708*t709*t710*t711*t731*(t759+1.0)*(1.0/1.6E1))/(t759+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_b,1.4E1/3.0)*(t731*t731)*t732*1.0/(t757*t757)*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t761 = pow(2.0,2.0/3.0);
                double t762 = 1.0/gammas;
                double t763 = 1.0/k;
                double t764 = 1.0/(pi_m12*pi_m12);
                double t765 = 1.0/pow(rho_b,7.0/3.0);
                double t766 = 1.0/pow(rho_b,1.0/3.0);
                double t767 = c*t766;
                double t768 = sqrt(t767);
                double t769 = pow(t767,3.0/2.0);
                double t770 = c*c;
                double t771 = 1.0/pow(rho_b,2.0/3.0);
                double t772 = 1.0/c0p;
                double t773 = b1p*t768;
                double t774 = b3p*t769;
                double t775 = b4p*t770*t771;
                double t776 = b2p*c*t766;
                double t777 = t773+t774+t775+t776;
                double t778 = 1.0/t777;
                double t779 = t772*t778*(1.0/2.0);
                double t780 = t779+1.0;
                double t781 = log(t780);
                double t782 = a1p*c*t766;
                double t783 = t782+1.0;
                double t784 = gamma_ab*2.0;
                double t785 = gamma_bb+t784;
                double t786 = pow(2.0,1.0/3.0);
                double t787 = t786*2.0;
                double t788 = t787-2.0;
                double t789 = two_13*2.0;
                double t790 = t789-2.0;
                double t791 = 1.0/t790;
                double t792 = 1.0/c0f;
                double t793 = b1f*t768;
                double t794 = b3f*t769;
                double t795 = b4f*t770*t771;
                double t796 = b2f*c*t766;
                double t797 = t793+t794+t795+t796;
                double t798 = 1.0/t797;
                double t799 = t792*t798*(1.0/2.0);
                double t800 = t799+1.0;
                double t801 = log(t800);
                double t802 = a1f*c*t766;
                double t803 = t802+1.0;
                double t804 = c0p*t781*t783*2.0;
                double t810 = c0f*t801*t803*2.0;
                double t805 = t804-t810;
                double t811 = t788*t791*t805;
                double t806 = t804-t811;
                double t807 = t762*t806*2.0;
                double t808 = exp(t807);
                double t809 = t808-1.0;
                double t812 = 1.0/t809;
                double t813 = bet*t761*t762*t763*t764*t765*t785*t812*(1.0/1.6E1);
                v_rho_a[Q] += scale * -t804+gammas*log((bet*t761*t762*t763*t764*t765*t785*(t813+1.0)*(1.0/1.6E1))/(t813+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_b,1.4E1/3.0)*(t785*t785)*t786*1.0/(t809*t809)*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0)+t788*t791*(t804-t810);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t815 = pow(2.0,2.0/3.0);
                double t816 = 1.0/gammas;
                double t817 = 1.0/k;
                double t818 = 1.0/(pi_m12*pi_m12);
                double t819 = 1.0/pow(rho_b,7.0/3.0);
                double t820 = 1.0/pow(rho_b,1.0/3.0);
                double t821 = c*t820;
                double t822 = sqrt(t821);
                double t823 = pow(t821,3.0/2.0);
                double t824 = c*c;
                double t825 = 1.0/pow(rho_b,2.0/3.0);
                double t826 = 1.0/c0p;
                double t827 = b1p*t822;
                double t828 = b3p*t823;
                double t829 = b4p*t824*t825;
                double t830 = b2p*c*t820;
                double t831 = t827+t828+t829+t830;
                double t832 = 1.0/t831;
                double t833 = t826*t832*(1.0/2.0);
                double t834 = t833+1.0;
                double t835 = log(t834);
                double t836 = a1p*c*t820;
                double t837 = t836+1.0;
                double t838 = gamma_ab*2.0;
                double t839 = gamma_bb+t838;
                double t840 = pow(2.0,1.0/3.0);
                double t841 = t840*2.0;
                double t842 = t841-2.0;
                double t843 = two_13*2.0;
                double t844 = t843-2.0;
                double t845 = 1.0/t844;
                double t846 = 1.0/c0f;
                double t847 = b1f*t822;
                double t848 = b3f*t823;
                double t849 = b4f*t824*t825;
                double t850 = b2f*c*t820;
                double t851 = t847+t848+t849+t850;
                double t852 = 1.0/t851;
                double t853 = t846*t852*(1.0/2.0);
                double t854 = t853+1.0;
                double t855 = log(t854);
                double t856 = a1f*c*t820;
                double t857 = t856+1.0;
                double t858 = c0f*t855*t857*2.0;
                double t859 = c0p*t835*t837*2.0;
                double t860 = t858-t859;
                double t861 = t842*t845*t860;
                double t862 = t859+t861;
                double t863 = t816*t862*2.0;
                double t864 = exp(t863);
                double t865 = t864-1.0;
                double t866 = 1.0/t865;
                double t867 = bet*t815*t816*t817*t818*t819*t839*t866*(1.0/1.6E1);
                double t868 = bet*bet;
                double t869 = 1.0/(gammas*gammas);
                double t870 = 1.0/(k*k);
                double t871 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t872 = 1.0/pow(rho_b,1.4E1/3.0);
                double t873 = 1.0/(t865*t865);
                double t874 = t839*t839;
                double t875 = t840*t868*t869*t870*t871*t872*t873*t874*(1.0/1.28E2);
                double t876 = t867+t875+1.0;
                double t877 = 1.0/t876;
                double t878 = 1.0/pow(rho_b,1.0E1/3.0);
                double t879 = 1.0/pow(rho_b,4.0/3.0);
                double t880 = 1.0/pow(rho_b,5.0/3.0);
                double t881 = 1.0/sqrt(t821);
                double t882 = 1.0/t834;
                double t883 = 1.0/(t831*t831);
                double t884 = b4p*t824*t880*(2.0/3.0);
                double t885 = b2p*c*t879*(1.0/3.0);
                double t886 = b1p*c*t879*t881*(1.0/6.0);
                double t887 = b3p*c*t822*t879*(1.0/2.0);
                double t888 = t884+t885+t886+t887;
                double t889 = t837*t882*t883*t888;
                double t890 = t867+1.0;
                double t891 = bet*t815*t816*t817*t818*t839*t866*t878*(7.0/4.8E1);
                double t892 = 1.0/t854;
                double t893 = 1.0/(t851*t851);
                double t894 = b4f*t824*t880*(2.0/3.0);
                double t895 = b2f*c*t879*(1.0/3.0);
                double t896 = b1f*c*t879*t881*(1.0/6.0);
                double t897 = b3f*c*t822*t879*(1.0/2.0);
                double t898 = t894+t895+t896+t897;
                double t899 = a1f*c*c0f*t855*t879*(2.0/3.0);
                double t900 = a1p*c*c0p*t835*t879*(2.0/3.0);
                double t904 = t857*t892*t893*t898;
                double t901 = t889+t899-t900-t904;
                double t902 = t842*t845*t901;
                double t903 = -t889+t900+t902;
                double t905 = bet*t815*t816*t817*t818*t819*t839*t877*t890*(1.0/1.6E1);
                double t906 = t905+1.0;
                v_rho_b[Q] += scale * -t859-t861-(rho_a+rho_b)*(t889-t900-t902+(gammas*(bet*t815*t816*t817*t818*t839*t877*t878*t890*(7.0/4.8E1)+bet*t815*t816*t817*t818*t819*t839*t877*(t891-bet*t815*t817*t818*t819*t839*t864*t869*t873*t903*(1.0/8.0))*(1.0/1.6E1)-bet*t815*t816*t817*t818*t819*t839*1.0/(t876*t876)*t890*(t891+1.0/pow(rho_b,1.7E1/3.0)*t840*t868*t869*t870*t871*t873*t874*(7.0/1.92E2)-1.0/(gammas*gammas*gammas)*t840*t864*1.0/(t865*t865*t865)*t868*t870*t871*t872*t874*t903*(1.0/3.2E1)-bet*t815*t817*t818*t819*t839*t864*t869*t873*t903*(1.0/8.0))*(1.0/1.6E1))*(1.0/2.0))/t906)+gammas*log(t906)*(1.0/2.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t909 = pow(2.0,2.0/3.0);
                double t910 = 1.0/gammas;
                double t911 = 1.0/k;
                double t912 = 1.0/(pi_m12*pi_m12);
                double t913 = 1.0/pow(rho_b,7.0/3.0);
                double t914 = 1.0/pow(rho_b,1.0/3.0);
                double t915 = c*t914;
                double t916 = sqrt(t915);
                double t917 = pow(t915,3.0/2.0);
                double t918 = c*c;
                double t919 = 1.0/pow(rho_b,2.0/3.0);
                double t920 = 1.0/c0p;
                double t921 = b1p*t916;
                double t922 = b3p*t917;
                double t923 = b4p*t918*t919;
                double t924 = b2p*c*t914;
                double t925 = t921+t922+t923+t924;
                double t926 = 1.0/t925;
                double t927 = t920*t926*(1.0/2.0);
                double t928 = t927+1.0;
                double t929 = log(t928);
                double t930 = a1p*c*t914;
                double t931 = t930+1.0;
                double t932 = gamma_ab*2.0;
                double t933 = gamma_bb+t932;
                double t934 = pow(2.0,1.0/3.0);
                double t935 = t934*2.0;
                double t936 = t935-2.0;
                double t937 = two_13*2.0;
                double t938 = t937-2.0;
                double t939 = 1.0/t938;
                double t940 = 1.0/c0f;
                double t941 = b1f*t916;
                double t942 = b3f*t917;
                double t943 = b4f*t918*t919;
                double t944 = b2f*c*t914;
                double t945 = t941+t942+t943+t944;
                double t946 = 1.0/t945;
                double t947 = t940*t946*(1.0/2.0);
                double t948 = t947+1.0;
                double t949 = log(t948);
                double t950 = a1f*c*t914;
                double t951 = t950+1.0;
                double t952 = c0f*t949*t951*2.0;
                double t953 = c0p*t929*t931*2.0;
                double t954 = t952-t953;
                double t955 = t936*t939*t954;
                double t956 = t953+t955;
                double t957 = t910*t956*2.0;
                double t958 = exp(t957);
                double t959 = t958-1.0;
                double t960 = 1.0/t959;
                double t961 = bet*t909*t910*t911*t912*t913*t933*t960*(1.0/1.6E1);
                double t962 = bet*bet;
                double t963 = 1.0/(gammas*gammas);
                double t964 = 1.0/(k*k);
                double t965 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t966 = 1.0/pow(rho_b,1.4E1/3.0);
                double t967 = 1.0/(t959*t959);
                double t968 = t933*t933;
                double t969 = t934*t962*t963*t964*t965*t966*t967*t968*(1.0/1.28E2);
                double t970 = t961+t969+1.0;
                double t971 = 1.0/t970;
                double t972 = t961+1.0;
                v_gamma_ab[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t909*t910*t911*t912*t913*t971*t972*(1.0/8.0)+t933*t934*t960*t962*t963*t964*t965*t966*t971*(1.0/6.4E1)-bet*t909*t910*t911*t912*t913*t933*1.0/(t970*t970)*t972*(bet*t909*t910*t911*t912*t913*t960*(1.0/8.0)+t934*t962*t963*t964*t965*t966*t967*(gamma_ab*8.0+gamma_bb*4.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t909*t910*t911*t912*t913*t933*t971*((bet*t909*t910*t911*t912*t913*t933*(1.0/1.6E1))/(exp(t910*(t953+t936*t939*(t952-c0p*t929*t931*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t974 = pow(2.0,2.0/3.0);
                double t975 = 1.0/gammas;
                double t976 = 1.0/k;
                double t977 = 1.0/(pi_m12*pi_m12);
                double t978 = 1.0/pow(rho_b,7.0/3.0);
                double t979 = 1.0/pow(rho_b,1.0/3.0);
                double t980 = c*t979;
                double t981 = sqrt(t980);
                double t982 = pow(t980,3.0/2.0);
                double t983 = c*c;
                double t984 = 1.0/pow(rho_b,2.0/3.0);
                double t985 = 1.0/c0p;
                double t986 = b1p*t981;
                double t987 = b3p*t982;
                double t988 = b4p*t983*t984;
                double t989 = b2p*c*t979;
                double t990 = t986+t987+t988+t989;
                double t991 = 1.0/t990;
                double t992 = t985*t991*(1.0/2.0);
                double t993 = t992+1.0;
                double t994 = log(t993);
                double t995 = a1p*c*t979;
                double t996 = t995+1.0;
                double t997 = gamma_ab*2.0;
                double t998 = gamma_bb+t997;
                double t999 = pow(2.0,1.0/3.0);
                double t1000 = t999*2.0;
                double t1001 = t1000-2.0;
                double t1002 = two_13*2.0;
                double t1003 = t1002-2.0;
                double t1004 = 1.0/t1003;
                double t1005 = 1.0/c0f;
                double t1006 = b1f*t981;
                double t1007 = b3f*t982;
                double t1008 = b4f*t983*t984;
                double t1009 = b2f*c*t979;
                double t1010 = t1006+t1007+t1008+t1009;
                double t1011 = 1.0/t1010;
                double t1012 = t1011*t1005*(1.0/2.0);
                double t1013 = t1012+1.0;
                double t1014 = log(t1013);
                double t1015 = a1f*c*t979;
                double t1016 = t1015+1.0;
                double t1017 = c0f*t1014*t1016*2.0;
                double t1018 = c0p*t994*t996*2.0;
                double t1019 = t1017-t1018;
                double t1020 = t1001*t1004*t1019;
                double t1021 = t1020+t1018;
                double t1022 = t1021*t975*2.0;
                double t1023 = exp(t1022);
                double t1024 = t1023-1.0;
                double t1025 = 1.0/t1024;
                double t1026 = bet*t1025*t974*t975*t976*t977*t978*t998*(1.0/1.6E1);
                double t1027 = bet*bet;
                double t1028 = 1.0/(gammas*gammas);
                double t1029 = 1.0/(k*k);
                double t1030 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t1031 = 1.0/pow(rho_b,1.4E1/3.0);
                double t1032 = 1.0/(t1024*t1024);
                double t1033 = t998*t998;
                double t1034 = t1030*t1031*t1032*t1033*t1027*t1028*t1029*t999*(1.0/1.28E2);
                double t1035 = t1034+t1026+1.0;
                double t1036 = 1.0/t1035;
                double t1037 = t1026+1.0;
                v_gamma_bb[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t1036*t1037*t974*t975*t976*t977*t978*(1.0/1.6E1)+t1030*t1031*t1025*t1027*t1036*t1028*t1029*t998*t999*(1.0/1.28E2)-bet*1.0/(t1035*t1035)*t1037*t974*t975*t976*t977*t978*t998*(bet*t1025*t974*t975*t976*t977*t978*(1.0/1.6E1)+t1030*t1031*t1032*t1027*t1028*t1029*t999*(gamma_ab*4.0+gamma_bb*2.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t1036*t974*t975*t976*t977*t978*t998*((bet*t974*t975*t976*t977*t978*t998*(1.0/1.6E1))/(exp(t975*(t1018+t1001*t1004*(t1017-c0p*t994*t996*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t1041 = pow(2.0,2.0/3.0);
                double t1042 = 1.0/gammas;
                double t1043 = 1.0/k;
                double t1044 = 1.0/(pi_m12*pi_m12);
                double t1045 = 1.0/pow(rho_a,7.0/3.0);
                double t1046 = 1.0/pow(rho_a,1.0/3.0);
                double t1047 = c*t1046;
                double t1048 = sqrt(t1047);
                double t1049 = pow(t1047,3.0/2.0);
                double t1050 = c*c;
                double t1051 = 1.0/pow(rho_a,2.0/3.0);
                double t1052 = 1.0/c0p;
                double t1053 = b1p*t1048;
                double t1054 = b3p*t1049;
                double t1055 = b4p*t1050*t1051;
                double t1056 = b2p*c*t1046;
                double t1057 = t1053+t1054+t1055+t1056;
                double t1058 = 1.0/t1057;
                double t1059 = t1052*t1058*(1.0/2.0);
                double t1060 = t1059+1.0;
                double t1061 = log(t1060);
                double t1062 = a1p*c*t1046;
                double t1063 = t1062+1.0;
                double t1064 = gamma_ab*2.0;
                double t1065 = gamma_aa+t1064;
                double t1066 = pow(2.0,1.0/3.0);
                double t1067 = t1066*2.0;
                double t1068 = t1067-2.0;
                double t1069 = two_13*2.0;
                double t1070 = t1069-2.0;
                double t1071 = 1.0/t1070;
                double t1072 = 1.0/c0f;
                double t1073 = b1f*t1048;
                double t1074 = b3f*t1049;
                double t1075 = b4f*t1050*t1051;
                double t1076 = b2f*c*t1046;
                double t1077 = t1073+t1074+t1075+t1076;
                double t1078 = 1.0/t1077;
                double t1079 = t1072*t1078*(1.0/2.0);
                double t1080 = t1079+1.0;
                double t1081 = log(t1080);
                double t1082 = a1f*c*t1046;
                double t1083 = t1082+1.0;
                double t1084 = c0f*t1081*t1083*2.0;
                double t1085 = c0p*t1061*t1063*2.0;
                double t1086 = t1084-t1085;
                double t1087 = t1071*t1068*t1086;
                double t1088 = t1085+t1087;
                double t1089 = t1042*t1088*2.0;
                double t1090 = exp(t1089);
                double t1091 = t1090-1.0;
                double t1092 = 1.0/t1091;
                double t1093 = bet*t1041*t1042*t1043*t1044*t1045*t1065*t1092*(1.0/1.6E1);
                v[Q] += scale * -(rho_a+rho_b)*(t1085+t1087-gammas*log((bet*t1041*t1042*t1043*t1044*t1045*t1065*(t1093+1.0)*(1.0/1.6E1))/(t1093+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_a,1.4E1/3.0)*1.0/(t1091*t1091)*(t1065*t1065)*t1066*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t1095 = pow(2.0,2.0/3.0);
                double t1096 = 1.0/gammas;
                double t1097 = 1.0/k;
                double t1098 = 1.0/(pi_m12*pi_m12);
                double t1099 = 1.0/pow(rho_a,7.0/3.0);
                double t1100 = 1.0/pow(rho_a,1.0/3.0);
                double t1101 = c*t1100;
                double t1102 = sqrt(t1101);
                double t1103 = pow(t1101,3.0/2.0);
                double t1104 = c*c;
                double t1105 = 1.0/pow(rho_a,2.0/3.0);
                double t1106 = 1.0/c0p;
                double t1107 = b1p*t1102;
                double t1108 = b3p*t1103;
                double t1109 = b4p*t1104*t1105;
                double t1110 = b2p*c*t1100;
                double t1111 = t1110+t1107+t1108+t1109;
                double t1112 = 1.0/t1111;
                double t1113 = t1112*t1106*(1.0/2.0);
                double t1114 = t1113+1.0;
                double t1115 = log(t1114);
                double t1116 = a1p*c*t1100;
                double t1117 = t1116+1.0;
                double t1118 = gamma_ab*2.0;
                double t1119 = gamma_aa+t1118;
                double t1120 = pow(2.0,1.0/3.0);
                double t1121 = t1120*2.0;
                double t1122 = t1121-2.0;
                double t1123 = two_13*2.0;
                double t1124 = t1123-2.0;
                double t1125 = 1.0/t1124;
                double t1126 = 1.0/c0f;
                double t1127 = b1f*t1102;
                double t1128 = b3f*t1103;
                double t1129 = b4f*t1104*t1105;
                double t1130 = b2f*c*t1100;
                double t1131 = t1130+t1127+t1128+t1129;
                double t1132 = 1.0/t1131;
                double t1133 = t1132*t1126*(1.0/2.0);
                double t1134 = t1133+1.0;
                double t1135 = log(t1134);
                double t1136 = a1f*c*t1100;
                double t1137 = t1136+1.0;
                double t1138 = c0f*t1135*t1137*2.0;
                double t1139 = c0p*t1115*t1117*2.0;
                double t1140 = t1138-t1139;
                double t1141 = t1122*t1140*t1125;
                double t1142 = t1141+t1139;
                double t1143 = t1096*t1142*2.0;
                double t1144 = exp(t1143);
                double t1145 = t1144-1.0;
                double t1146 = 1.0/t1145;
                double t1147 = bet*t1095*t1096*t1097*t1098*t1099*t1119*t1146*(1.0/1.6E1);
                double t1148 = bet*bet;
                double t1149 = 1.0/(gammas*gammas);
                double t1150 = 1.0/(k*k);
                double t1151 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t1152 = 1.0/pow(rho_a,1.4E1/3.0);
                double t1153 = 1.0/(t1145*t1145);
                double t1154 = t1119*t1119;
                double t1155 = t1120*t1150*t1151*t1152*t1153*t1154*t1148*t1149*(1.0/1.28E2);
                double t1156 = t1155+t1147+1.0;
                double t1157 = 1.0/t1156;
                double t1158 = 1.0/pow(rho_a,1.0E1/3.0);
                double t1159 = 1.0/pow(rho_a,4.0/3.0);
                double t1160 = 1.0/pow(rho_a,5.0/3.0);
                double t1161 = 1.0/sqrt(t1101);
                double t1162 = 1.0/t1114;
                double t1163 = 1.0/(t1111*t1111);
                double t1164 = b4p*t1104*t1160*(2.0/3.0);
                double t1165 = b2p*c*t1159*(1.0/3.0);
                double t1166 = b1p*c*t1161*t1159*(1.0/6.0);
                double t1167 = b3p*c*t1102*t1159*(1.0/2.0);
                double t1168 = t1164+t1165+t1166+t1167;
                double t1169 = t1117*t1162*t1163*t1168;
                double t1170 = t1147+1.0;
                double t1171 = bet*t1095*t1096*t1097*t1098*t1119*t1146*t1158*(7.0/4.8E1);
                double t1172 = 1.0/t1134;
                double t1173 = 1.0/(t1131*t1131);
                double t1174 = b4f*t1104*t1160*(2.0/3.0);
                double t1175 = b2f*c*t1159*(1.0/3.0);
                double t1176 = b1f*c*t1161*t1159*(1.0/6.0);
                double t1177 = b3f*c*t1102*t1159*(1.0/2.0);
                double t1178 = t1174+t1175+t1176+t1177;
                double t1179 = a1f*c*c0f*t1135*t1159*(2.0/3.0);
                double t1180 = a1p*c*c0p*t1115*t1159*(2.0/3.0);
                double t1181 = t1172*t1137*t1173*t1178;
                double t1182 = t1180+t1181-t1169-t1179;
                double t1183 = t1122*t1125*t1182;
                double t1184 = -t1180+t1183+t1169;
                double t1185 = bet*t1095*t1096*t1097*t1098*t1099*t1170*t1119*t1157*(1.0/1.6E1);
                double t1186 = t1185+1.0;
                v_rho_a[Q] += scale * -t1141-t1139+gammas*log(t1186)*(1.0/2.0)-(rho_a+rho_b)*(-t1180+t1183+t1169+(gammas*(bet*t1095*t1096*t1097*t1098*t1099*t1119*t1157*(t1171+bet*t1095*t1097*t1098*t1099*t1144*t1153*t1119*t1149*(-t1180+t1183+t1169)*(1.0/8.0))*(1.0/1.6E1)+bet*t1095*t1096*t1097*t1098*t1170*t1119*t1157*t1158*(7.0/4.8E1)-bet*t1095*t1096*t1097*t1098*t1099*t1170*t1119*1.0/(t1156*t1156)*(t1171+1.0/pow(rho_a,1.7E1/3.0)*t1120*t1150*t1151*t1153*t1154*t1148*t1149*(7.0/1.92E2)+1.0/(gammas*gammas*gammas)*t1120*t1150*t1151*t1152*t1144*1.0/(t1145*t1145*t1145)*t1154*t1148*t1184*(1.0/3.2E1)+bet*t1095*t1097*t1098*t1099*t1144*t1153*t1119*t1184*t1149*(1.0/8.0))*(1.0/1.6E1))*(1.0/2.0))/t1186);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t1188 = pow(2.0,2.0/3.0);
                double t1189 = 1.0/gammas;
                double t1190 = 1.0/k;
                double t1191 = 1.0/(pi_m12*pi_m12);
                double t1192 = 1.0/pow(rho_a,7.0/3.0);
                double t1193 = 1.0/pow(rho_a,1.0/3.0);
                double t1194 = c*t1193;
                double t1195 = sqrt(t1194);
                double t1196 = pow(t1194,3.0/2.0);
                double t1197 = c*c;
                double t1198 = 1.0/pow(rho_a,2.0/3.0);
                double t1199 = 1.0/c0p;
                double t1200 = b1p*t1195;
                double t1201 = b3p*t1196;
                double t1202 = b4p*t1197*t1198;
                double t1203 = b2p*c*t1193;
                double t1204 = t1200+t1201+t1202+t1203;
                double t1205 = 1.0/t1204;
                double t1206 = t1199*t1205*(1.0/2.0);
                double t1207 = t1206+1.0;
                double t1208 = log(t1207);
                double t1209 = a1p*c*t1193;
                double t1210 = t1209+1.0;
                double t1211 = gamma_ab*2.0;
                double t1212 = gamma_aa+t1211;
                double t1213 = pow(2.0,1.0/3.0);
                double t1214 = t1213*2.0;
                double t1215 = t1214-2.0;
                double t1216 = two_13*2.0;
                double t1217 = t1216-2.0;
                double t1218 = 1.0/t1217;
                double t1219 = 1.0/c0f;
                double t1220 = b1f*t1195;
                double t1221 = b3f*t1196;
                double t1222 = b4f*t1197*t1198;
                double t1223 = b2f*c*t1193;
                double t1224 = t1220+t1221+t1222+t1223;
                double t1225 = 1.0/t1224;
                double t1226 = t1225*t1219*(1.0/2.0);
                double t1227 = t1226+1.0;
                double t1228 = log(t1227);
                double t1229 = a1f*c*t1193;
                double t1230 = t1229+1.0;
                double t1231 = c0f*t1230*t1228*2.0;
                double t1232 = c0p*t1210*t1208*2.0;
                double t1233 = t1231-t1232;
                double t1234 = t1215*t1233*t1218;
                double t1235 = t1232+t1234;
                double t1236 = t1189*t1235*2.0;
                double t1237 = exp(t1236);
                double t1238 = t1237-1.0;
                v_rho_b[Q] += scale * -t1232-t1234+gammas*log((bet*t1190*t1191*t1192*t1188*t1189*t1212*((bet*t1190*t1191*t1192*t1188*t1189*t1212*(1.0/1.6E1))/(exp(t1189*(t1232+t1215*t1218*(t1231-c0p*t1210*t1208*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1))/((bet*t1190*t1191*t1192*t1188*t1189*t1212*(1.0/1.6E1))/t1238+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(rho_a,1.4E1/3.0)*(t1212*t1212)*t1213*1.0/(t1238*t1238)*(1.0/1.28E2)+1.0)+1.0)*(1.0/2.0);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t1240 = pow(2.0,2.0/3.0);
                double t1241 = 1.0/gammas;
                double t1242 = 1.0/k;
                double t1243 = 1.0/(pi_m12*pi_m12);
                double t1244 = 1.0/pow(rho_a,7.0/3.0);
                double t1245 = 1.0/pow(rho_a,1.0/3.0);
                double t1246 = c*t1245;
                double t1247 = sqrt(t1246);
                double t1248 = pow(t1246,3.0/2.0);
                double t1249 = c*c;
                double t1250 = 1.0/pow(rho_a,2.0/3.0);
                double t1251 = 1.0/c0p;
                double t1252 = b1p*t1247;
                double t1253 = b3p*t1248;
                double t1254 = b4p*t1250*t1249;
                double t1255 = b2p*c*t1245;
                double t1256 = t1252+t1253+t1254+t1255;
                double t1257 = 1.0/t1256;
                double t1258 = t1251*t1257*(1.0/2.0);
                double t1259 = t1258+1.0;
                double t1260 = log(t1259);
                double t1261 = a1p*c*t1245;
                double t1262 = t1261+1.0;
                double t1263 = gamma_ab*2.0;
                double t1264 = gamma_aa+t1263;
                double t1265 = pow(2.0,1.0/3.0);
                double t1266 = t1265*2.0;
                double t1267 = t1266-2.0;
                double t1268 = two_13*2.0;
                double t1269 = t1268-2.0;
                double t1270 = 1.0/t1269;
                double t1271 = 1.0/c0f;
                double t1272 = b1f*t1247;
                double t1273 = b3f*t1248;
                double t1274 = b4f*t1250*t1249;
                double t1275 = b2f*c*t1245;
                double t1276 = t1272+t1273+t1274+t1275;
                double t1277 = 1.0/t1276;
                double t1278 = t1271*t1277*(1.0/2.0);
                double t1279 = t1278+1.0;
                double t1280 = log(t1279);
                double t1281 = a1f*c*t1245;
                double t1282 = t1281+1.0;
                double t1283 = c0f*t1280*t1282*2.0;
                double t1284 = c0p*t1260*t1262*2.0;
                double t1285 = t1283-t1284;
                double t1286 = t1270*t1267*t1285;
                double t1287 = t1284+t1286;
                double t1288 = t1241*t1287*2.0;
                double t1289 = exp(t1288);
                double t1290 = t1289-1.0;
                double t1291 = 1.0/t1290;
                double t1292 = bet*t1240*t1241*t1242*t1243*t1244*t1264*t1291*(1.0/1.6E1);
                double t1293 = bet*bet;
                double t1294 = 1.0/(gammas*gammas);
                double t1295 = 1.0/(k*k);
                double t1296 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t1297 = 1.0/pow(rho_a,1.4E1/3.0);
                double t1298 = 1.0/(t1290*t1290);
                double t1299 = t1264*t1264;
                double t1300 = t1265*t1293*t1294*t1295*t1296*t1297*t1298*t1299*(1.0/1.28E2);
                double t1301 = t1292+t1300+1.0;
                double t1302 = 1.0/t1301;
                double t1303 = t1292+1.0;
                v_gamma_aa[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t1240*t1241*t1242*t1243*t1244*t1302*t1303*(1.0/1.6E1)+t1264*t1291*t1265*t1293*t1294*t1295*t1296*t1297*t1302*(1.0/1.28E2)-bet*t1240*t1241*t1242*t1243*t1244*t1264*1.0/(t1301*t1301)*t1303*(bet*t1240*t1241*t1242*t1243*t1244*t1291*(1.0/1.6E1)+t1265*t1293*t1294*t1295*t1296*t1297*t1298*(gamma_aa*2.0+gamma_ab*4.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t1240*t1241*t1242*t1243*t1244*t1264*t1302*((bet*t1240*t1241*t1242*t1243*t1244*t1264*(1.0/1.6E1))/(exp(t1241*(t1284+t1270*t1267*(t1283-c0p*t1260*t1262*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t1305 = pow(2.0,2.0/3.0);
                double t1306 = 1.0/gammas;
                double t1307 = 1.0/k;
                double t1308 = 1.0/(pi_m12*pi_m12);
                double t1309 = 1.0/pow(rho_a,7.0/3.0);
                double t1310 = 1.0/pow(rho_a,1.0/3.0);
                double t1311 = c*t1310;
                double t1312 = sqrt(t1311);
                double t1313 = pow(t1311,3.0/2.0);
                double t1314 = c*c;
                double t1315 = 1.0/pow(rho_a,2.0/3.0);
                double t1316 = 1.0/c0p;
                double t1317 = b1p*t1312;
                double t1318 = b3p*t1313;
                double t1319 = b4p*t1314*t1315;
                double t1320 = b2p*c*t1310;
                double t1321 = t1320+t1317+t1318+t1319;
                double t1322 = 1.0/t1321;
                double t1323 = t1322*t1316*(1.0/2.0);
                double t1324 = t1323+1.0;
                double t1325 = log(t1324);
                double t1326 = a1p*c*t1310;
                double t1327 = t1326+1.0;
                double t1328 = gamma_ab*2.0;
                double t1329 = gamma_aa+t1328;
                double t1330 = pow(2.0,1.0/3.0);
                double t1331 = t1330*2.0;
                double t1332 = t1331-2.0;
                double t1333 = two_13*2.0;
                double t1334 = t1333-2.0;
                double t1335 = 1.0/t1334;
                double t1336 = 1.0/c0f;
                double t1337 = b1f*t1312;
                double t1338 = b3f*t1313;
                double t1339 = b4f*t1314*t1315;
                double t1340 = b2f*c*t1310;
                double t1341 = t1340+t1337+t1338+t1339;
                double t1342 = 1.0/t1341;
                double t1343 = t1342*t1336*(1.0/2.0);
                double t1344 = t1343+1.0;
                double t1345 = log(t1344);
                double t1346 = a1f*c*t1310;
                double t1347 = t1346+1.0;
                double t1348 = c0f*t1345*t1347*2.0;
                double t1349 = c0p*t1325*t1327*2.0;
                double t1350 = t1348-t1349;
                double t1351 = t1332*t1350*t1335;
                double t1352 = t1351+t1349;
                double t1353 = t1306*t1352*2.0;
                double t1354 = exp(t1353);
                double t1355 = t1354-1.0;
                double t1356 = 1.0/t1355;
                double t1357 = bet*t1305*t1306*t1307*t1308*t1309*t1329*t1356*(1.0/1.6E1);
                double t1358 = bet*bet;
                double t1359 = 1.0/(gammas*gammas);
                double t1360 = 1.0/(k*k);
                double t1361 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t1362 = 1.0/pow(rho_a,1.4E1/3.0);
                double t1363 = 1.0/(t1355*t1355);
                double t1364 = t1329*t1329;
                double t1365 = t1330*t1360*t1361*t1362*t1363*t1364*t1358*t1359*(1.0/1.28E2);
                double t1366 = t1365+t1357+1.0;
                double t1367 = 1.0/t1366;
                double t1368 = t1357+1.0;
                v_gamma_ab[Q] += scale * (gammas*(rho_a+rho_b)*(bet*t1305*t1306*t1307*t1308*t1309*t1367*t1368*(1.0/8.0)+t1330*t1360*t1361*t1362*t1329*t1356*t1358*t1367*t1359*(1.0/6.4E1)-bet*t1305*t1306*t1307*t1308*t1309*t1329*1.0/(t1366*t1366)*t1368*(bet*t1305*t1306*t1307*t1308*t1309*t1356*(1.0/8.0)+t1330*t1360*t1361*t1362*t1363*t1358*t1359*(gamma_aa*4.0+gamma_ab*8.0)*(1.0/1.28E2))*(1.0/1.6E1))*(1.0/2.0))/(bet*t1305*t1306*t1307*t1308*t1309*t1329*t1367*((bet*t1305*t1306*t1307*t1308*t1309*t1329*(1.0/1.6E1))/(exp(t1306*(t1349+t1332*t1335*(t1348-c0p*t1325*t1327*2.0))*2.0)-1.0)+1.0)*(1.0/1.6E1)+1.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t2 = rho_a+rho_b;
                double t3 = 1.0/pow(t2,1.0/3.0);
                double t4 = c*t3;
                double t5 = 1.0/gammas;
                double t6 = 1.0/k;
                double t7 = 1.0/(pi_m12*pi_m12);
                double t8 = 1.0/pow(t2,7.0/3.0);
                double t9 = 1.0/t2;
                double t10 = rho_a-rho_b;
                double t11 = t10*t9;
                double t12 = 1.0/c0p;
                double t13 = sqrt(t4);
                double t14 = b1p*t13;
                double t15 = pow(t4,3.0/2.0);
                double t16 = b3p*t15;
                double t17 = c*c;
                double t18 = 1.0/pow(t2,2.0/3.0);
                double t19 = b4p*t17*t18;
                double t20 = b2p*c*t3;
                double t21 = t14+t16+t19+t20;
                double t22 = 1.0/t21;
                double t23 = t12*t22*(1.0/2.0);
                double t24 = t23+1.0;
                double t25 = log(t24);
                double t26 = a1p*c*t3;
                double t27 = t26+1.0;
                double t28 = c0p*t25*t27*2.0;
                double t29 = t10*t10;
                double t30 = t11+1.0;
                double t31 = -t11+1.0;
                double t32 = two_13*2.0;
                double t33 = t32-2.0;
                double t34 = 1.0/t33;
                double t35 = 1.0/(t2*t2*t2*t2);
                double t36 = t29*t29;
                double t37 = pow(t30,4.0/3.0);
                double t38 = pow(t31,4.0/3.0);
                double t39 = t37+t38-2.0;
                double t40 = pow(t30,2.0/3.0);
                double t41 = t40*(1.0/2.0);
                double t42 = pow(t31,2.0/3.0);
                double t43 = t42*(1.0/2.0);
                double t44 = t41+t43;
                double t45 = 1.0/(t44*t44);
                double t46 = 1.0/(t44*t44*t44);
                double t47 = 1.0/c0f;
                double t48 = b1f*t13;
                double t49 = b3f*t15;
                double t50 = b4f*t17*t18;
                double t51 = b2f*c*t3;
                double t52 = t48+t49+t50+t51;
                double t53 = 1.0/t52;
                double t54 = t47*t53*(1.0/2.0);
                double t55 = t54+1.0;
                double t56 = log(t55);
                double t57 = a1f*c*t3;
                double t58 = t57+1.0;
                double t84 = c0f*t56*t58*2.0;
                double t59 = t28-t84;
                double t60 = 1.0/d2fz0;
                double t61 = 1.0/Aa;
                double t62 = b1a*t13;
                double t63 = b3a*t15;
                double t64 = b4a*t17*t18;
                double t65 = b2a*c*t3;
                double t66 = t62+t63+t64+t65;
                double t67 = 1.0/t66;
                double t68 = t61*t67*(1.0/2.0);
                double t69 = t68+1.0;
                double t70 = log(t69);
                double t71 = a1a*c*t3;
                double t72 = t71+1.0;
                double t73 = t35*t36;
                double t74 = t73-1.0;
                double t75 = Aa*t34*t39*t60*t70*t72*t74*2.0;
                double t85 = t34*t35*t36*t39*t59;
                double t76 = t28+t75-t85;
                double t77 = t46*t5*t76;
                double t78 = exp(t77);
                double t79 = t78-1.0;
                double t80 = 1.0/t79;
                double t81 = gamma_ab*2.0;
                double t82 = gamma_aa+gamma_bb+t81;
                double t83 = bet*t45*t5*t6*t7*t8*t80*t82*(1.0/1.6E1);
                double t86 = t44*t44;
                v[Q] += scale * -t2*(t28+t75-t85-gammas*t44*t86*log((bet*t45*t5*t6*t7*t8*t82*(t83+1.0)*(1.0/1.6E1))/(t83+(bet*bet)*1.0/(gammas*gammas)*1.0/(k*k)*1.0/(pi_m12*pi_m12*pi_m12*pi_m12)*1.0/pow(t2,1.4E1/3.0)*1.0/(t44*t44*t44*t44)*1.0/(t79*t79)*(t82*t82)*(1.0/2.56E2)+1.0)+1.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t88 = rho_a+rho_b;
                double t89 = 1.0/gammas;
                double t90 = 1.0/k;
                double t91 = 1.0/(pi_m12*pi_m12);
                double t92 = 1.0/pow(t88,7.0/3.0);
                double t93 = 1.0/t88;
                double t94 = rho_a-rho_b;
                double t95 = t93*t94;
                double t96 = 1.0/pow(t88,1.0/3.0);
                double t97 = c*t96;
                double t98 = sqrt(t97);
                double t99 = pow(t97,3.0/2.0);
                double t100 = c*c;
                double t101 = 1.0/pow(t88,2.0/3.0);
                double t102 = 1.0/c0p;
                double t103 = b1p*t98;
                double t104 = b3p*t99;
                double t105 = b4p*t100*t101;
                double t106 = b2p*c*t96;
                double t107 = t103+t104+t105+t106;
                double t108 = 1.0/t107;
                double t109 = t102*t108*(1.0/2.0);
                double t110 = t109+1.0;
                double t111 = log(t110);
                double t112 = a1p*c*t96;
                double t113 = t112+1.0;
                double t114 = c0p*t111*t113*2.0;
                double t115 = t94*t94;
                double t116 = t95+1.0;
                double t117 = -t95+1.0;
                double t118 = two_13*2.0;
                double t119 = t118-2.0;
                double t120 = 1.0/t119;
                double t121 = 1.0/(t88*t88*t88*t88);
                double t122 = t115*t115;
                double t123 = pow(t116,4.0/3.0);
                double t124 = pow(t117,4.0/3.0);
                double t125 = t123+t124-2.0;
                double t126 = pow(t116,2.0/3.0);
                double t127 = t126*(1.0/2.0);
                double t128 = pow(t117,2.0/3.0);
                double t129 = t128*(1.0/2.0);
                double t130 = t127+t129;
                double t131 = 1.0/(t130*t130);
                double t132 = 1.0/(t130*t130*t130);
                double t133 = 1.0/c0f;
                double t134 = b1f*t98;
                double t135 = b3f*t99;
                double t136 = b4f*t100*t101;
                double t137 = b2f*c*t96;
                double t138 = t134+t135+t136+t137;
                double t139 = 1.0/t138;
                double t140 = t133*t139*(1.0/2.0);
                double t141 = t140+1.0;
                double t142 = log(t141);
                double t143 = a1f*c*t96;
                double t144 = t143+1.0;
                double t170 = c0f*t142*t144*2.0;
                double t145 = t114-t170;
                double t146 = 1.0/d2fz0;
                double t147 = 1.0/Aa;
                double t148 = b1a*t98;
                double t149 = b3a*t99;
                double t150 = b4a*t100*t101;
                double t151 = b2a*c*t96;
                double t152 = t148+t149+t150+t151;
                double t153 = 1.0/t152;
                double t154 = t147*t153*(1.0/2.0);
                double t155 = t154+1.0;
                double t156 = log(t155);
                double t157 = a1a*c*t96;
                double t158 = t157+1.0;
                double t159 = t121*t122;
                double t160 = t159-1.0;
                double t161 = Aa*t120*t125*t146*t156*t158*t160*2.0;
                double t171 = t120*t121*t122*t125*t145;
                double t162 = t114+t161-t171;
                double t163 = t132*t162*t89;
                double t164 = exp(t163);
                double t165 = t164-1.0;
                double t166 = 1.0/t165;
                double t167 = gamma_ab*2.0;
                double t168 = gamma_aa+gamma_bb+t167;
                double t169 = bet*t131*t166*t168*t89*t90*t91*t92*(1.0/1.6E1);
                double t172 = 1.0/(t88*t88);
                double t192 = t172*t94;
                double t173 = -t192+t93;
                double t174 = 1.0/pow(t88,4.0/3.0);
                double t175 = t169+1.0;
                double t176 = bet*bet;
                double t177 = 1.0/(gammas*gammas);
                double t178 = 1.0/(k*k);
                double t179 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t180 = 1.0/pow(t88,1.4E1/3.0);
                double t181 = 1.0/(t165*t165);
                double t182 = 1.0/(t130*t130*t130*t130);
                double t183 = t168*t168;
                double t184 = t176*t177*t178*t179*t180*t181*t182*t183*(1.0/2.56E2);
                double t185 = t169+t184+1.0;
                double t186 = 1.0/t185;
                double t187 = bet*t131*t168*t175*t186*t89*t90*t91*t92*(1.0/1.6E1);
                double t188 = t187+1.0;
                double t189 = t130*t130;
                double t190 = 1.0/pow(t88,1.0E1/3.0);
                double t191 = 1.0/pow(t116,1.0/3.0);
                double t193 = t173*t191*(1.0/3.0);
                double t194 = 1.0/pow(t117,1.0/3.0);
                double t211 = t173*t194*(1.0/3.0);
                double t195 = t193-t211;
                double t196 = 1.0/t110;
                double t197 = 1.0/(t107*t107);
                double t198 = 1.0/pow(t88,5.0/3.0);
                double t199 = b4p*t100*t198*(2.0/3.0);
                double t200 = b2p*c*t174*(1.0/3.0);
                double t201 = 1.0/sqrt(t97);
                double t202 = b1p*c*t174*t201*(1.0/6.0);
                double t203 = b3p*c*t174*t98*(1.0/2.0);
                double t204 = t199+t200+t202+t203;
                double t205 = t113*t196*t197*t204;
                double t206 = 1.0/(t88*t88*t88*t88*t88);
                double t207 = pow(t116,1.0/3.0);
                double t208 = t173*t207*(4.0/3.0);
                double t209 = pow(t117,1.0/3.0);
                double t215 = t173*t209*(4.0/3.0);
                double t210 = t208-t215;
                double t212 = bet*t131*t166*t168*t190*t89*t90*t91*(7.0/4.8E1);
                double t213 = bet*t132*t166*t168*t195*t89*t90*t91*t92*(1.0/8.0);
                double t214 = t115*t120*t121*t125*t145*t94*4.0;
                double t216 = t120*t121*t122*t145*t210;
                double t217 = 1.0/t141;
                double t218 = 1.0/(t138*t138);
                double t219 = b4f*t100*t198*(2.0/3.0);
                double t220 = b2f*c*t174*(1.0/3.0);
                double t221 = b1f*c*t174*t201*(1.0/6.0);
                double t222 = b3f*c*t174*t98*(1.0/2.0);
                double t223 = t219+t220+t221+t222;
                double t224 = a1f*c*c0f*t142*t174*(2.0/3.0);
                double t225 = a1p*c*c0p*t111*t174*(2.0/3.0);
                double t226 = t122*t206*4.0;
                double t240 = t115*t121*t94*4.0;
                double t227 = t226-t240;
                double t228 = Aa*t120*t125*t146*t156*t158*t227*2.0;
                double t229 = 1.0/t155;
                double t230 = 1.0/(t152*t152);
                double t231 = b4a*t100*t198*(2.0/3.0);
                double t232 = b2a*c*t174*(1.0/3.0);
                double t233 = b1a*c*t174*t201*(1.0/6.0);
                double t234 = b3a*c*t174*t98*(1.0/2.0);
                double t235 = t231+t232+t233+t234;
                double t236 = Aa*a1a*c*t120*t125*t146*t156*t160*t174*(2.0/3.0);
                double t237 = t162*t182*t195*t89*3.0;
                double t244 = t144*t217*t218*t223;
                double t238 = t205+t224-t225-t244;
                double t239 = t120*t121*t122*t125*t238;
                double t245 = Aa*t120*t146*t156*t158*t160*t210*2.0;
                double t246 = t120*t125*t146*t158*t160*t229*t230*t235;
                double t241 = -t205+t214+t216+t225+t228+t236+t239-t245-t246-t120*t122*t125*t145*t206*4.0;
                double t242 = t132*t241*t89;
                double t243 = t237+t242;
                double t247 = log(t188);
                v_rho_a[Q] += scale * -t114-t161+t88*(-t205+t214+t216+t225+t228+t236+t239-t245-t246+gammas*t189*t195*t247*3.0-(gammas*t130*t189*(bet*t131*t168*t186*t89*t90*t91*t92*(t212+t213-bet*t131*t164*t168*t181*t89*t90*t91*t92*(t237+t132*t89*(-t205+t214+t216+t225+t228+t236+t120*t121*t122*t125*(t205+t224-t144*t217*t218*t223-a1p*c*c0p*t111*t174*(2.0/3.0))-t120*t122*t125*t145*t206*4.0-Aa*t120*t146*t156*t158*t160*t210*2.0-t120*t125*t146*t158*t160*t229*t230*t235))*(1.0/1.6E1))*(1.0/1.6E1)+bet*t131*t168*t175*t186*t190*t89*t90*t91*(7.0/4.8E1)-bet*t131*t168*t175*1.0/(t185*t185)*t89*t90*t91*t92*(t212+t213+t176*t177*t178*t179*t181*t182*t183*1.0/pow(t88,1.7E1/3.0)*(7.0/3.84E2)+1.0/(t130*t130*t130*t130*t130)*t176*t177*t178*t179*t180*t181*t183*t195*(1.0/6.4E1)-t164*1.0/(t165*t165*t165)*t176*t177*t178*t179*t180*t182*t183*t243*(1.0/1.28E2)-bet*t131*t164*t168*t181*t243*t89*t90*t91*t92*(1.0/1.6E1))*(1.0/1.6E1)+bet*t132*t168*t175*t186*t195*t89*t90*t91*t92*(1.0/8.0)))/t188-t120*t122*t125*t206*(t114-t170)*4.0)+gammas*t130*t189*t247+t120*t121*t122*t125*(t114-t170);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t249 = rho_a+rho_b;
                double t250 = 1.0/gammas;
                double t251 = 1.0/k;
                double t252 = 1.0/(pi_m12*pi_m12);
                double t253 = 1.0/pow(t249,7.0/3.0);
                double t254 = 1.0/t249;
                double t255 = rho_a-rho_b;
                double t256 = t254*t255;
                double t257 = 1.0/pow(t249,1.0/3.0);
                double t258 = c*t257;
                double t259 = sqrt(t258);
                double t260 = pow(t258,3.0/2.0);
                double t261 = c*c;
                double t262 = 1.0/pow(t249,2.0/3.0);
                double t263 = 1.0/c0p;
                double t264 = b1p*t259;
                double t265 = b3p*t260;
                double t266 = b4p*t261*t262;
                double t267 = b2p*c*t257;
                double t268 = t264+t265+t266+t267;
                double t269 = 1.0/t268;
                double t270 = t263*t269*(1.0/2.0);
                double t271 = t270+1.0;
                double t272 = log(t271);
                double t273 = a1p*c*t257;
                double t274 = t273+1.0;
                double t275 = c0p*t272*t274*2.0;
                double t276 = t255*t255;
                double t277 = t256+1.0;
                double t278 = -t256+1.0;
                double t279 = two_13*2.0;
                double t280 = t279-2.0;
                double t281 = 1.0/t280;
                double t282 = 1.0/(t249*t249*t249*t249);
                double t283 = t276*t276;
                double t284 = pow(t277,4.0/3.0);
                double t285 = pow(t278,4.0/3.0);
                double t286 = t284+t285-2.0;
                double t287 = pow(t277,2.0/3.0);
                double t288 = t287*(1.0/2.0);
                double t289 = pow(t278,2.0/3.0);
                double t290 = t289*(1.0/2.0);
                double t291 = t288+t290;
                double t292 = 1.0/(t291*t291);
                double t293 = 1.0/(t291*t291*t291);
                double t294 = 1.0/c0f;
                double t295 = b1f*t259;
                double t296 = b3f*t260;
                double t297 = b4f*t261*t262;
                double t298 = b2f*c*t257;
                double t299 = t295+t296+t297+t298;
                double t300 = 1.0/t299;
                double t301 = t294*t300*(1.0/2.0);
                double t302 = t301+1.0;
                double t303 = log(t302);
                double t304 = a1f*c*t257;
                double t305 = t304+1.0;
                double t331 = c0f*t303*t305*2.0;
                double t306 = t275-t331;
                double t307 = 1.0/d2fz0;
                double t308 = 1.0/Aa;
                double t309 = b1a*t259;
                double t310 = b3a*t260;
                double t311 = b4a*t261*t262;
                double t312 = b2a*c*t257;
                double t313 = t309+t310+t311+t312;
                double t314 = 1.0/t313;
                double t315 = t308*t314*(1.0/2.0);
                double t316 = t315+1.0;
                double t317 = log(t316);
                double t318 = a1a*c*t257;
                double t319 = t318+1.0;
                double t320 = t282*t283;
                double t321 = t320-1.0;
                double t322 = Aa*t281*t286*t307*t317*t319*t321*2.0;
                double t332 = t281*t282*t283*t286*t306;
                double t323 = t275+t322-t332;
                double t324 = t250*t293*t323;
                double t325 = exp(t324);
                double t326 = t325-1.0;
                double t327 = 1.0/t326;
                double t328 = gamma_ab*2.0;
                double t329 = gamma_aa+gamma_bb+t328;
                double t330 = bet*t250*t251*t252*t253*t292*t327*t329*(1.0/1.6E1);
                double t333 = 1.0/(t249*t249);
                double t334 = t255*t333;
                double t335 = t254+t334;
                double t336 = 1.0/pow(t249,4.0/3.0);
                double t337 = t330+1.0;
                double t338 = bet*bet;
                double t339 = 1.0/(gammas*gammas);
                double t340 = 1.0/(k*k);
                double t341 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t342 = 1.0/pow(t249,1.4E1/3.0);
                double t343 = 1.0/(t326*t326);
                double t344 = 1.0/(t291*t291*t291*t291);
                double t345 = t329*t329;
                double t346 = t338*t339*t340*t341*t342*t343*t344*t345*(1.0/2.56E2);
                double t347 = t330+t346+1.0;
                double t348 = 1.0/t347;
                double t349 = bet*t250*t251*t252*t253*t292*t329*t337*t348*(1.0/1.6E1);
                double t350 = t349+1.0;
                double t351 = t291*t291;
                double t352 = 1.0/pow(t249,1.0E1/3.0);
                double t353 = 1.0/pow(t277,1.0/3.0);
                double t354 = t335*t353*(1.0/3.0);
                double t355 = 1.0/pow(t278,1.0/3.0);
                double t372 = t335*t355*(1.0/3.0);
                double t356 = t354-t372;
                double t357 = 1.0/t271;
                double t358 = 1.0/(t268*t268);
                double t359 = 1.0/pow(t249,5.0/3.0);
                double t360 = b4p*t261*t359*(2.0/3.0);
                double t361 = b2p*c*t336*(1.0/3.0);
                double t362 = 1.0/sqrt(t258);
                double t363 = b1p*c*t336*t362*(1.0/6.0);
                double t364 = b3p*c*t259*t336*(1.0/2.0);
                double t365 = t360+t361+t363+t364;
                double t366 = 1.0/(t249*t249*t249*t249*t249);
                double t367 = pow(t277,1.0/3.0);
                double t368 = t335*t367*(4.0/3.0);
                double t369 = pow(t278,1.0/3.0);
                double t376 = t335*t369*(4.0/3.0);
                double t370 = t368-t376;
                double t371 = t274*t357*t358*t365;
                double t373 = bet*t250*t251*t252*t292*t327*t329*t352*(7.0/4.8E1);
                double t374 = t255*t276*t281*t282*t286*t306*4.0;
                double t375 = t281*t283*t286*t306*t366*4.0;
                double t377 = t281*t282*t283*t306*t370;
                double t378 = 1.0/t302;
                double t379 = 1.0/(t299*t299);
                double t380 = b4f*t261*t359*(2.0/3.0);
                double t381 = b2f*c*t336*(1.0/3.0);
                double t382 = b1f*c*t336*t362*(1.0/6.0);
                double t383 = b3f*c*t259*t336*(1.0/2.0);
                double t384 = t380+t381+t382+t383;
                double t385 = a1f*c*c0f*t303*t336*(2.0/3.0);
                double t386 = t255*t276*t282*4.0;
                double t387 = t283*t366*4.0;
                double t388 = t386+t387;
                double t389 = 1.0/t316;
                double t390 = 1.0/(t313*t313);
                double t391 = b4a*t261*t359*(2.0/3.0);
                double t392 = b2a*c*t336*(1.0/3.0);
                double t393 = b1a*c*t336*t362*(1.0/6.0);
                double t394 = b3a*c*t259*t336*(1.0/2.0);
                double t395 = t391+t392+t393+t394;
                double t396 = t281*t286*t307*t319*t321*t389*t390*t395;
                double t398 = a1p*c*c0p*t272*t336*(2.0/3.0);
                double t400 = t305*t378*t379*t384;
                double t397 = t371+t385-t398-t400;
                double t399 = t250*t323*t344*t356*3.0;
                double t404 = t281*t282*t283*t286*t397;
                double t405 = Aa*t281*t286*t307*t317*t319*t388*2.0;
                double t406 = Aa*t281*t307*t317*t319*t321*t370*2.0;
                double t407 = Aa*a1a*c*t281*t286*t307*t317*t321*t336*(2.0/3.0);
                double t401 = t371+t374+t375+t377+t396-t398-t404-t405-t406-t407;
                double t402 = t250*t293*t401;
                double t403 = t399+t402;
                double t408 = bet*t250*t251*t252*t253*t292*t325*t329*t343*t403*(1.0/1.6E1);
                double t409 = log(t350);
                v_rho_b[Q] += scale * -t275-t322-t249*(t371+t374+t375+t377+t396-t398-t404-t405-t406-t407+gammas*t351*t356*t409*3.0+(gammas*t291*t351*(bet*t250*t251*t252*t292*t329*t337*t348*t352*(7.0/4.8E1)+bet*t250*t251*t252*t253*t292*t329*t348*(t373+t408-bet*t250*t251*t252*t253*t293*t327*t329*t356*(1.0/8.0))*(1.0/1.6E1)-bet*t250*t251*t252*t253*t293*t329*t337*t348*t356*(1.0/8.0)-bet*t250*t251*t252*t253*t292*t329*t337*1.0/(t347*t347)*(t373+t408+1.0/pow(t249,1.7E1/3.0)*t338*t339*t340*t341*t343*t344*t345*(7.0/3.84E2)-bet*t250*t251*t252*t253*t293*t327*t329*t356*(1.0/8.0)-1.0/(t291*t291*t291*t291*t291)*t338*t339*t340*t341*t342*t343*t345*t356*(1.0/6.4E1)+t325*1.0/(t326*t326*t326)*t338*t339*t340*t341*t342*t344*t345*t403*(1.0/1.28E2))*(1.0/1.6E1)))/t350)+gammas*t291*t351*t409+t281*t282*t283*t286*(t275-t331);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t411 = rho_a+rho_b;
                double t412 = 1.0/gammas;
                double t413 = 1.0/k;
                double t414 = 1.0/(pi_m12*pi_m12);
                double t415 = 1.0/pow(t411,7.0/3.0);
                double t416 = 1.0/t411;
                double t417 = rho_a-rho_b;
                double t418 = t416*t417;
                double t419 = 1.0/pow(t411,1.0/3.0);
                double t420 = c*t419;
                double t421 = sqrt(t420);
                double t422 = pow(t420,3.0/2.0);
                double t423 = c*c;
                double t424 = 1.0/pow(t411,2.0/3.0);
                double t425 = 1.0/c0p;
                double t426 = b1p*t421;
                double t427 = b3p*t422;
                double t428 = b4p*t423*t424;
                double t429 = b2p*c*t419;
                double t430 = t426+t427+t428+t429;
                double t431 = 1.0/t430;
                double t432 = t425*t431*(1.0/2.0);
                double t433 = t432+1.0;
                double t434 = log(t433);
                double t435 = a1p*c*t419;
                double t436 = t435+1.0;
                double t437 = c0p*t434*t436*2.0;
                double t438 = t417*t417;
                double t439 = t418+1.0;
                double t440 = -t418+1.0;
                double t441 = two_13*2.0;
                double t442 = t441-2.0;
                double t443 = 1.0/t442;
                double t444 = 1.0/(t411*t411*t411*t411);
                double t445 = t438*t438;
                double t446 = pow(t439,4.0/3.0);
                double t447 = pow(t440,4.0/3.0);
                double t448 = t446+t447-2.0;
                double t449 = pow(t439,2.0/3.0);
                double t450 = t449*(1.0/2.0);
                double t451 = pow(t440,2.0/3.0);
                double t452 = t451*(1.0/2.0);
                double t453 = t450+t452;
                double t454 = 1.0/(t453*t453);
                double t455 = 1.0/(t453*t453*t453);
                double t456 = 1.0/c0f;
                double t457 = b1f*t421;
                double t458 = b3f*t422;
                double t459 = b4f*t423*t424;
                double t460 = b2f*c*t419;
                double t461 = t457+t458+t459+t460;
                double t462 = 1.0/t461;
                double t463 = t456*t462*(1.0/2.0);
                double t464 = t463+1.0;
                double t465 = log(t464);
                double t466 = a1f*c*t419;
                double t467 = t466+1.0;
                double t493 = c0f*t465*t467*2.0;
                double t468 = t437-t493;
                double t469 = 1.0/d2fz0;
                double t470 = 1.0/Aa;
                double t471 = b1a*t421;
                double t472 = b3a*t422;
                double t473 = b4a*t423*t424;
                double t474 = b2a*c*t419;
                double t475 = t471+t472+t473+t474;
                double t476 = 1.0/t475;
                double t477 = t470*t476*(1.0/2.0);
                double t478 = t477+1.0;
                double t479 = log(t478);
                double t480 = a1a*c*t419;
                double t481 = t480+1.0;
                double t482 = t444*t445;
                double t483 = t482-1.0;
                double t484 = Aa*t443*t448*t469*t479*t481*t483*2.0;
                double t494 = t443*t444*t445*t448*t468;
                double t485 = t437+t484-t494;
                double t486 = t412*t455*t485;
                double t487 = exp(t486);
                double t488 = t487-1.0;
                double t489 = 1.0/t488;
                double t490 = gamma_ab*2.0;
                double t491 = gamma_aa+gamma_bb+t490;
                double t492 = bet*t412*t413*t414*t415*t454*t489*t491*(1.0/1.6E1);
                double t495 = t453*t453;
                double t496 = t492+1.0;
                double t497 = bet*bet;
                double t498 = 1.0/(gammas*gammas);
                double t499 = 1.0/(k*k);
                double t500 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t501 = 1.0/pow(t411,1.4E1/3.0);
                double t502 = 1.0/(t488*t488);
                double t503 = 1.0/(t453*t453*t453*t453);
                double t504 = t491*t491;
                double t505 = t497*t498*t499*t500*t501*t502*t503*t504*(1.0/2.56E2);
                double t506 = t492+t505+1.0;
                double t507 = 1.0/t506;
                v_gamma_aa[Q] += scale * (gammas*t411*t453*t495*(bet*t412*t413*t414*t415*t454*t496*t507*(1.0/1.6E1)+t489*t491*t497*t498*t499*t500*t501*t503*t507*(1.0/2.56E2)-bet*t412*t413*t414*t415*t454*t491*t496*1.0/(t506*t506)*(bet*t412*t413*t414*t415*t454*t489*(1.0/1.6E1)+t497*t498*t499*t500*t501*t502*t503*(gamma_aa*2.0+gamma_ab*4.0+gamma_bb*2.0)*(1.0/2.56E2))*(1.0/1.6E1)))/(bet*t412*t413*t414*t415*t454*t491*t496*t507*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t509 = rho_a+rho_b;
                double t510 = 1.0/gammas;
                double t511 = 1.0/k;
                double t512 = 1.0/(pi_m12*pi_m12);
                double t513 = 1.0/pow(t509,7.0/3.0);
                double t514 = 1.0/t509;
                double t515 = rho_a-rho_b;
                double t516 = t514*t515;
                double t517 = 1.0/pow(t509,1.0/3.0);
                double t518 = c*t517;
                double t519 = sqrt(t518);
                double t520 = pow(t518,3.0/2.0);
                double t521 = c*c;
                double t522 = 1.0/pow(t509,2.0/3.0);
                double t523 = 1.0/c0p;
                double t524 = b1p*t519;
                double t525 = b3p*t520;
                double t526 = b4p*t521*t522;
                double t527 = b2p*c*t517;
                double t528 = t524+t525+t526+t527;
                double t529 = 1.0/t528;
                double t530 = t523*t529*(1.0/2.0);
                double t531 = t530+1.0;
                double t532 = log(t531);
                double t533 = a1p*c*t517;
                double t534 = t533+1.0;
                double t535 = c0p*t532*t534*2.0;
                double t536 = t515*t515;
                double t537 = t516+1.0;
                double t538 = -t516+1.0;
                double t539 = two_13*2.0;
                double t540 = t539-2.0;
                double t541 = 1.0/t540;
                double t542 = 1.0/(t509*t509*t509*t509);
                double t543 = t536*t536;
                double t544 = pow(t537,4.0/3.0);
                double t545 = pow(t538,4.0/3.0);
                double t546 = t544+t545-2.0;
                double t547 = pow(t537,2.0/3.0);
                double t548 = t547*(1.0/2.0);
                double t549 = pow(t538,2.0/3.0);
                double t550 = t549*(1.0/2.0);
                double t551 = t548+t550;
                double t552 = 1.0/(t551*t551);
                double t553 = 1.0/(t551*t551*t551);
                double t554 = 1.0/c0f;
                double t555 = b1f*t519;
                double t556 = b3f*t520;
                double t557 = b4f*t521*t522;
                double t558 = b2f*c*t517;
                double t559 = t555+t556+t557+t558;
                double t560 = 1.0/t559;
                double t561 = t554*t560*(1.0/2.0);
                double t562 = t561+1.0;
                double t563 = log(t562);
                double t564 = a1f*c*t517;
                double t565 = t564+1.0;
                double t591 = c0f*t563*t565*2.0;
                double t566 = t535-t591;
                double t567 = 1.0/d2fz0;
                double t568 = 1.0/Aa;
                double t569 = b1a*t519;
                double t570 = b3a*t520;
                double t571 = b4a*t521*t522;
                double t572 = b2a*c*t517;
                double t573 = t569+t570+t571+t572;
                double t574 = 1.0/t573;
                double t575 = t568*t574*(1.0/2.0);
                double t576 = t575+1.0;
                double t577 = log(t576);
                double t578 = a1a*c*t517;
                double t579 = t578+1.0;
                double t580 = t542*t543;
                double t581 = t580-1.0;
                double t582 = Aa*t541*t546*t567*t577*t579*t581*2.0;
                double t592 = t541*t542*t543*t546*t566;
                double t583 = t535+t582-t592;
                double t584 = t510*t553*t583;
                double t585 = exp(t584);
                double t586 = t585-1.0;
                double t587 = 1.0/t586;
                double t588 = gamma_ab*2.0;
                double t589 = gamma_aa+gamma_bb+t588;
                double t590 = bet*t510*t511*t512*t513*t552*t587*t589*(1.0/1.6E1);
                double t593 = t551*t551;
                double t594 = t590+1.0;
                double t595 = bet*bet;
                double t596 = 1.0/(gammas*gammas);
                double t597 = 1.0/(k*k);
                double t598 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t599 = 1.0/pow(t509,1.4E1/3.0);
                double t600 = 1.0/(t586*t586);
                double t601 = 1.0/(t551*t551*t551*t551);
                double t602 = t589*t589;
                double t603 = t595*t596*t597*t598*t599*t600*t601*t602*(1.0/2.56E2);
                double t604 = t590+t603+1.0;
                double t605 = 1.0/t604;
                v_gamma_ab[Q] += scale * (gammas*t509*t551*t593*(bet*t510*t511*t512*t513*t552*t594*t605*(1.0/8.0)+t587*t589*t595*t596*t597*t598*t599*t601*t605*(1.0/1.28E2)-bet*t510*t511*t512*t513*t552*t589*t594*1.0/(t604*t604)*(bet*t510*t511*t512*t513*t552*t587*(1.0/8.0)+t595*t596*t597*t598*t599*t600*t601*(gamma_aa*4.0+gamma_ab*8.0+gamma_bb*4.0)*(1.0/2.56E2))*(1.0/1.6E1)))/(bet*t510*t511*t512*t513*t552*t589*t594*t605*(1.0/1.6E1)+1.0);
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t607 = rho_a+rho_b;
                double t608 = 1.0/gammas;
                double t609 = 1.0/k;
                double t610 = 1.0/(pi_m12*pi_m12);
                double t611 = 1.0/pow(t607,7.0/3.0);
                double t612 = 1.0/t607;
                double t613 = rho_a-rho_b;
                double t614 = t612*t613;
                double t615 = 1.0/pow(t607,1.0/3.0);
                double t616 = c*t615;
                double t617 = sqrt(t616);
                double t618 = pow(t616,3.0/2.0);
                double t619 = c*c;
                double t620 = 1.0/pow(t607,2.0/3.0);
                double t621 = 1.0/c0p;
                double t622 = b1p*t617;
                double t623 = b3p*t618;
                double t624 = b4p*t619*t620;
                double t625 = b2p*c*t615;
                double t626 = t622+t623+t624+t625;
                double t627 = 1.0/t626;
                double t628 = t621*t627*(1.0/2.0);
                double t629 = t628+1.0;
                double t630 = log(t629);
                double t631 = a1p*c*t615;
                double t632 = t631+1.0;
                double t633 = c0p*t630*t632*2.0;
                double t634 = t613*t613;
                double t635 = t614+1.0;
                double t636 = -t614+1.0;
                double t637 = two_13*2.0;
                double t638 = t637-2.0;
                double t639 = 1.0/t638;
                double t640 = 1.0/(t607*t607*t607*t607);
                double t641 = t634*t634;
                double t642 = pow(t635,4.0/3.0);
                double t643 = pow(t636,4.0/3.0);
                double t644 = t642+t643-2.0;
                double t645 = pow(t635,2.0/3.0);
                double t646 = t645*(1.0/2.0);
                double t647 = pow(t636,2.0/3.0);
                double t648 = t647*(1.0/2.0);
                double t649 = t646+t648;
                double t650 = 1.0/(t649*t649);
                double t651 = 1.0/(t649*t649*t649);
                double t652 = 1.0/c0f;
                double t653 = b1f*t617;
                double t654 = b3f*t618;
                double t655 = b4f*t619*t620;
                double t656 = b2f*c*t615;
                double t657 = t653+t654+t655+t656;
                double t658 = 1.0/t657;
                double t659 = t652*t658*(1.0/2.0);
                double t660 = t659+1.0;
                double t661 = log(t660);
                double t662 = a1f*c*t615;
                double t663 = t662+1.0;
                double t689 = c0f*t661*t663*2.0;
                double t664 = t633-t689;
                double t665 = 1.0/d2fz0;
                double t666 = 1.0/Aa;
                double t667 = b1a*t617;
                double t668 = b3a*t618;
                double t669 = b4a*t619*t620;
                double t670 = b2a*c*t615;
                double t671 = t667+t668+t669+t670;
                double t672 = 1.0/t671;
                double t673 = t666*t672*(1.0/2.0);
                double t674 = t673+1.0;
                double t675 = log(t674);
                double t676 = a1a*c*t615;
                double t677 = t676+1.0;
                double t678 = t640*t641;
                double t679 = t678-1.0;
                double t680 = Aa*t639*t644*t665*t675*t677*t679*2.0;
                double t690 = t639*t640*t641*t644*t664;
                double t681 = t633+t680-t690;
                double t682 = t608*t651*t681;
                double t683 = exp(t682);
                double t684 = t683-1.0;
                double t685 = 1.0/t684;
                double t686 = gamma_ab*2.0;
                double t687 = gamma_aa+gamma_bb+t686;
                double t688 = bet*t608*t609*t610*t611*t650*t685*t687*(1.0/1.6E1);
                double t691 = t649*t649;
                double t692 = t688+1.0;
                double t693 = bet*bet;
                double t694 = 1.0/(gammas*gammas);
                double t695 = 1.0/(k*k);
                double t696 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t697 = 1.0/pow(t607,1.4E1/3.0);
                double t698 = 1.0/(t684*t684);
                double t699 = 1.0/(t649*t649*t649*t649);
                double t700 = t687*t687;
                double t701 = t693*t694*t695*t696*t697*t698*t699*t700*(1.0/2.56E2);
                double t702 = t688+t701+1.0;
                double t703 = 1.0/t702;
                v_gamma_bb[Q] += scale * (gammas*t607*t649*t691*(bet*t608*t609*t610*t611*t650*t692*t703*(1.0/1.6E1)+t685*t687*t693*t694*t695*t696*t697*t699*t703*(1.0/2.56E2)-bet*t608*t609*t610*t611*t650*t687*t692*1.0/(t702*t702)*(bet*t608*t609*t610*t611*t650*t685*(1.0/1.6E1)+t693*t694*t695*t696*t697*t698*t699*(gamma_aa*2.0+gamma_ab*4.0+gamma_bb*2.0)*(1.0/2.56E2))*(1.0/1.6E1)))/(bet*t608*t609*t610*t611*t650*t687*t692*t703*(1.0/1.6E1)+1.0);
            }
            
        }
    }
}

}
