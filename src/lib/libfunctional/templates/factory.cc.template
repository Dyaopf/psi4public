/**********************************************************
* factory.cc: defines for functional factory for KS-DFT
* Robert Parrish, robparrish@gmail.com
* 09/01/2010
*
***********************************************************/
#include "functional.h"
#include "superfunctional.h"
HEADERS
#include <boost/algorithm/string.hpp>
#include <string>
#include <sstream>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

boost::shared_ptr<Functional> Functional::createFunctional(const std::string & name, int npoints, int deriv)
{
    FUNCTIONAL_CONSTRUCTORS
}
std::string Functional::availableFunctionals()
{
    std::stringstream f;
    f << "   Available Exchange Functionals:   " << endl;
    f << "    Name:        LSDA:      GGA:     Meta: " << endl;
    f << "  ------------ --------- --------- ---------" << endl;
    X_FUNCTIONALS   
 
    f << endl; 
    f << "   Available Correlation Functionals:   " << endl;
    f << "    Name:        LSDA:      GGA:     Meta: " << endl;
    f << "  ------------ --------- --------- ---------" << endl;
    C_FUNCTIONALS
    
    f << endl; 
    f << "   Available Combined Functionals:   " << endl;
    f << "    Name:        LSDA:      GGA:     Meta: " << endl;
    f << "  ------------ --------- --------- ---------" << endl;
    XC_FUNCTIONALS
    
    return f.str();
    
}
std::vector<std::string> Functional::availableNames()
{
    std::vector<std::string> names;
    FUNCTIONAL_NAMES
    return names;
}
boost::shared_ptr<SuperFunctional> SuperFunctional::createSuperFunctional(const std::string & name, int npoints, int deriv)
{
    shared_ptr<SuperFunctional> superfun = (shared_ptr<SuperFunctional>) new SuperFunctional(npoints, deriv);

    //Alias Table
    SUPER_CONSTRUCTORS        

    return superfun;
}
std::string SuperFunctional::availableSuperFunctionals()
{
    std::stringstream f;
    
    f << "   Available Exchange SuperFunctionals:   " << endl;
    f << "    Name:        LSDA:      GGA:     Meta:    Hybrid:     PT2:      RC:       -D:" << endl;
    f << "  ------------ --------- --------- --------- --------- --------- --------- ---------" << endl;
    X_SUPERFUNCTIONALS  
 
    f << endl; 
    f << "   Available Correlation SuperFunctionals:   " << endl;
    f << "    Name:        LSDA:      GGA:     Meta:    Hybrid:     PT2:      RC:       -D:" << endl;
    f << "  ------------ --------- --------- --------- --------- --------- --------- ---------" << endl;
    C_SUPERFUNCTIONALS    

    f << endl; 
    f << "   Available Combined SuperFunctionals:   " << endl;
    f << "    Name:        LSDA:      GGA:     Meta:    Hybrid:     PT2:      RC:       -D:" << endl;
    f << "  ------------ --------- --------- --------- --------- --------- --------- ---------" << endl;
    XC_SUPERFUNCTIONALS    

    return f.str();
}
std::vector<std::string> SuperFunctional::availableNames()
{
    std::vector<std::string> names;
    SUPER_NAMES
    return names;
}

}}

