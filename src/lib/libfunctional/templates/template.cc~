/**********************************************************
* NAME_functional.cc: definitions for NAME_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on DATE
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "NAME_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

NAME_Functional::NAME_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "NAME";
    description_ = "DESCRIPTION";
    citation_ = "CITATION";
    
    DEFINE_PARAMS

    is_gga_ = IS_GGA;
    is_meta_ = IS_META;

    //Required allocateion
    allocate();
}
NAME_Functional::~NAME_Functional()
{
}
void NAME_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensity();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquared();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensity();
    }

    EXTRACT_PARAMS

    //Functional
    for (int index = 0; index < ntrue; index++) {
        RKS_FUNCTIONAL
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        RKS_V_RHO_A
        v_rho_b_[index] = v_rho_a_[index];
        if (is_gga_) {
            RKS_V_GAMMA_AA
            v_gamma_ab_[index] = v_gamma_aa_[index];
            v_gamma_bb_[index] = v_gamma_aa_[index];
        }
        if (is_meta) {
            RKS_V_TAU_A
            v_tau_b_[index] = v_tau_a_[index];
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        if (is_gga_) {
        }
        if (is_meta) {
            if (is_gga_) {
            }
        }
    }
}
void NAME_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_a = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    EXTRACT_PARAMS
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        UKS_FUNCTIONAL
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        UKS_V_RHO_A
        UKS_V_RHO_B

        if (is_gga_) {

            UKS_V_GAMMA_AA
            UKS_V_GAMMA_AB
            UKS_V_GAMMA_BB
        }
        if (is_meta_) {

            UKS_V_TAU_A
            UKS_V_TAU_B
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        UKS_V_RHO_A_RHO_A
        UKS_V_RHO_A_RHO_B
        UKS_V_RHO_B_RHO_B

        if (is_gga_) {

            UKS_V_RHO_A_GAMMA_AA            
            UKS_V_RHO_A_GAMMA_AB
            UKS_V_RHO_A_GAMMA_BB

            UKS_V_RHO_B_GAMMA_AA            
            UKS_V_RHO_B_GAMMA_AB
            UKS_V_RHO_B_GAMMA_BB

            UKS_V_GAMMA_AA_GAMMA_AA
            UKS_V_GAMMA_AA_GAMMA_AB
            UKS_V_GAMMA_AA_GAMMA_BB            
            UKS_V_GAMMA_AB_GAMMA_AB
            UKS_V_GAMMA_AB_GAMMA_BB
            UKS_V_GAMMA_BB_GAMMA_BB

        }                       
        if (is_meta_) {

            UKS_V_RHO_A_TAU_A
            UKS_V_RHO_A_TAU_B
            UKS_V_RHO_B_TAU_A
            UKS_V_RHO_B_TAU_B

            UKS_V_TAU_A_TAU_A
            UKS_V_TAU_A_TAU_B
            UKS_V_TAU_B_TAU_B

            if (is_gga_) {
            	
		        UKS_V_GAMMA_AA_TAU_A
            	UKS_V_GAMMA_AA_TAU_B
            	UKS_V_GAMMA_AB_TAU_A
            	UKS_V_GAMMA_AB_TAU_B
            	UKS_V_GAMMA_BB_TAU_A
            	UKS_V_GAMMA_BB_TAU_B
           
            }  
        }
    }
}

}}

