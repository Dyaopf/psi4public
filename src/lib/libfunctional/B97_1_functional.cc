/**********************************************************
* B97_1_functional.cc: definitions for B97_1_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "B97_1_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_1_Functional::B97_1_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B97_1";
    description_ = "B97-1 Power Series GGA";
    citation_ = "F.A. Hamprecht et. al., J. Chem. Phys., 109(15), 6264-6271, 1998";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 9.5568900000000001E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 7.8855200000000003E-01;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -5.4786900000000003E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 8.2001099999999993E-02;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 2.7168100000000002E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -2.8710300000000002E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 7.8951800000000005E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 5.7380500000000001E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 6.6097499999999998E-01;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_1_Functional::~B97_1_Functional()
{
}
void B97_1_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t36750 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36751 = c*t36750;
            double t36752 = sqrt(t36751);
            double t36753 = pow(t36751,3.0/2.0);
            double t36754 = c*c;
            double t36755 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36756 = 1.0/c0p;
            double t36757 = b1p*t36752;
            double t36758 = b3p*t36753;
            double t36759 = b4p*t36754*t36755;
            double t36760 = b2p*c*t36750;
            double t36761 = t36760+t36757+t36758+t36759;
            double t36762 = 1.0/t36761;
            double t36763 = t36762*t36756*(1.0/2.0);
            double t36764 = t36763+1.0;
            double t36765 = log(t36764);
            double t36766 = a1p*c*t36750;
            double t36767 = t36766+1.0;
            double t36768 = rho_a[index]*2.0;
            double t36769 = 1.0/pow(t36768,1.0/3.0);
            double t36770 = c*t36769;
            double t36771 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36772 = gamma_aa[index]*gamma_aa[index];
            double t36773 = gcab*gcab;
            double t36774 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36775 = gx*gx;
            double t36776 = pow(2.0,1.0/3.0);
            double t36777 = t36776*2.0;
            double t36778 = t36777-2.0;
            double t36779 = two_13*2.0;
            double t36780 = t36779-2.0;
            double t36781 = 1.0/t36780;
            double t36782 = 1.0/c0f;
            double t36783 = b1f*t36752;
            double t36784 = b3f*t36753;
            double t36785 = b4f*t36754*t36755;
            double t36786 = b2f*c*t36750;
            double t36787 = t36783+t36784+t36785+t36786;
            double t36788 = 1.0/t36787;
            double t36789 = t36782*t36788*(1.0/2.0);
            double t36790 = t36789+1.0;
            double t36791 = log(t36790);
            double t36792 = a1f*c*t36750;
            double t36793 = t36792+1.0;
            double t36794 = c0f*t36791*t36793*2.0;
            double t36795 = c0p*t36765*t36767*2.0;
            double t36796 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t36795+t36781*t36778*(t36794-c0p*t36765*t36767*2.0))*2.0-c0p* \
               rho_a[index]*log((t36756*(1.0/2.0))/(b1p*sqrt(t36770)+b3p*pow(t36770,3.0/2.0)+b4p*t36754*1.0/pow(t36768,2.0/ \
               3.0)+b2p*c*t36769)+1.0)*(a1p*c*t36769+1.0)*4.0)*(ccab0+(ccab2*t36772*t36773*t36774)/(gamma_aa[index]* \
               gcab*t36771*2.0+t36772*t36773*t36774+1.0)+(ccab1*gamma_aa[index]*gcab*t36771)/(gamma_aa[index]*gcab* \
               t36771+1.0))-rho_a[index]*(t36795+t36781*t36778*(t36794-t36795))*(ccaa0+(ccaa2*t36772*t36774*t36796) \
               /(gamma_aa[index]*gcaa*t36771*2.0+t36772*t36774*t36796+1.0)+(ccaa1*gamma_aa[index]*gcaa*t36771)/(gamma_aa[index]* \
               gcaa*t36771+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t36772*t36774*t36775)/(gamma_aa[index]* \
               gx*t36771*2.0+t36772*t36774*t36775+1.0)+(cx1*gamma_aa[index]*gx*t36771)/(gamma_aa[index]*gx*t36771+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t36798 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36799 = c*t36798;
            double t36800 = sqrt(t36799);
            double t36801 = pow(t36799,3.0/2.0);
            double t36802 = c*c;
            double t36803 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36804 = 1.0/c0p;
            double t36805 = b1p*t36800;
            double t36806 = b3p*t36801;
            double t36807 = b4p*t36802*t36803;
            double t36808 = b2p*c*t36798;
            double t36809 = t36805+t36806+t36807+t36808;
            double t36810 = 1.0/t36809;
            double t36811 = t36810*t36804*(1.0/2.0);
            double t36812 = t36811+1.0;
            double t36813 = log(t36812);
            double t36814 = a1p*c*t36798;
            double t36815 = t36814+1.0;
            double t36816 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36817 = gamma_aa[index]*gamma_aa[index];
            double t36818 = gcaa*gcaa;
            double t36819 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36820 = pow(2.0,1.0/3.0);
            double t36821 = t36820*2.0;
            double t36822 = t36821-2.0;
            double t36823 = two_13*2.0;
            double t36824 = t36823-2.0;
            double t36825 = 1.0/t36824;
            double t36826 = 1.0/c0f;
            double t36827 = b1f*t36800;
            double t36828 = b3f*t36801;
            double t36829 = b4f*t36802*t36803;
            double t36830 = b2f*c*t36798;
            double t36831 = t36830+t36827+t36828+t36829;
            double t36832 = 1.0/t36831;
            double t36833 = t36832*t36826*(1.0/2.0);
            double t36834 = t36833+1.0;
            double t36835 = log(t36834);
            double t36836 = a1f*c*t36798;
            double t36837 = t36836+1.0;
            double t36838 = c0f*t36835*t36837*2.0;
            double t36839 = c0p*t36813*t36815*2.0;
            double t36840 = rho_a[index]*2.0;
            double t36841 = 1.0/pow(t36840,1.0/3.0);
            double t36842 = c*t36841;
            double t36843 = gcab*gcab;
            double t36844 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36845 = gamma_aa[index]*gcab*t36816;
            double t36846 = t36845+1.0;
            double t36847 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36848 = gamma_aa[index]*gcab*t36816*2.0;
            double t36849 = t36843*t36817*t36819;
            double t36850 = t36848+t36849+1.0;
            double t36851 = 1.0/t36846;
            double t36852 = 1.0/t36850;
            double t36853 = sqrt(t36842);
            double t36854 = b1p*t36853;
            double t36855 = pow(t36842,3.0/2.0);
            double t36856 = b3p*t36855;
            double t36857 = b2p*c*t36841;
            double t36858 = 1.0/pow(t36840,2.0/3.0);
            double t36859 = b4p*t36802*t36858;
            double t36860 = t36854+t36856+t36857+t36859;
            double t36861 = 1.0/t36860;
            double t36862 = t36804*t36861*(1.0/2.0);
            double t36863 = t36862+1.0;
            double t36864 = a1p*c*t36841;
            double t36865 = t36864+1.0;
            double t36866 = 1.0/pow(t36840,4.0/3.0);
            double t36867 = log(t36863);
            double t36868 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36869 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36870 = 1.0/sqrt(t36799);
            double t36871 = 1.0/t36812;
            double t36872 = 1.0/(t36809*t36809);
            double t36873 = b4p*t36802*t36869*(2.0/3.0);
            double t36874 = b2p*c*t36868*(1.0/3.0);
            double t36875 = b1p*c*t36870*t36868*(1.0/6.0);
            double t36876 = b3p*c*t36800*t36868*(1.0/2.0);
            double t36877 = t36873+t36874+t36875+t36876;
            double t36878 = t36815*t36871*t36872*t36877;
            double t36879 = t36838-t36839;
            double t36880 = t36822*t36825*t36879;
            double t36881 = gx*gx;
            double t36882 = gamma_aa[index]*gx*t36816;
            double t36883 = t36882+1.0;
            double t36884 = 1.0/t36883;
            double t36885 = gamma_aa[index]*gx*t36816*2.0;
            double t36886 = t36817*t36881*t36819;
            double t36887 = t36885+t36886+1.0;
            double t36888 = 1.0/t36887;
            double t36889 = 1.0/t36834;
            double t36890 = 1.0/(t36831*t36831);
            double t36891 = b4f*t36802*t36869*(2.0/3.0);
            double t36892 = b2f*c*t36868*(1.0/3.0);
            double t36893 = b1f*c*t36870*t36868*(1.0/6.0);
            double t36894 = b3f*c*t36800*t36868*(1.0/2.0);
            double t36895 = t36891+t36892+t36893+t36894;
            double t36896 = a1f*c*c0f*t36835*t36868*(2.0/3.0);
            double t36897 = a1p*c*c0p*t36813*t36868*(2.0/3.0);
            double t36898 = gamma_aa[index]*gcaa*t36816;
            double t36899 = t36898+1.0;
            double t36900 = 1.0/t36899;
            double t36901 = ccaa1*gamma_aa[index]*gcaa*t36900*t36816;
            double t36902 = gamma_aa[index]*gcaa*t36816*2.0;
            double t36903 = t36817*t36818*t36819;
            double t36904 = t36902+t36903+1.0;
            double t36905 = 1.0/t36904;
            double t36906 = ccaa2*t36905*t36817*t36818*t36819;
            double t36907 = ccaa0+t36901+t36906;
            double t36908 = t36880+t36839;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t36851*t36816+ccab2*t36843*t36852*t36817*t36819) \
               *(-t36880-t36839+rho_a[index]*((1.0/(t36860*t36860)*t36865*(b4p*t36802*1.0/pow(t36840,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t36866*(1.0/3.0)+b3p*c*t36853*t36866*(1.0/2.0)+b1p*c*1.0/sqrt(t36842)*t36866*(1.0/6.0)) \
               )/t36863-a1p*c*c0p*t36866*t36867*(2.0/3.0))*2.0+rho_a[index]*(-t36878+t36897+t36822*t36825*(t36878+ \
               t36896-t36890*t36837*t36895*t36889-a1p*c*c0p*t36813*t36868*(2.0/3.0)))+c0p*t36865*t36867*2.0)-(rho_a[index]* \
               t36908*2.0-c0p*rho_a[index]*t36865*t36867*4.0)*(ccab1*gamma_aa[index]*gcab*t36851*t36847*(4.0/3.0) \
               +ccab2*t36843*t36852*t36817*t36844*(8.0/3.0)-ccab1*t36843*t36817*t36844*1.0/(t36846*t36846)*(4.0/3.0) \
               -ccab2*1.0/(t36850*t36850)*t36843*t36817*t36819*(gamma_aa[index]*gcab*t36847*(8.0/3.0)+t36843*t36817* \
               t36844*(8.0/3.0)))-t36907*(t36839+t36822*t36825*(t36838-c0p*t36813*t36815*2.0))+rho_a[index]*t36908* \
               (ccaa1*gamma_aa[index]*gcaa*t36900*t36847*(8.0/3.0)+ccaa2*t36905*t36817*t36844*t36818*(1.6E1/3.0)- \
               ccaa1*t36817*t36844*t36818*1.0/(t36899*t36899)*(8.0/3.0)-ccaa2*1.0/(t36904*t36904)*t36817*t36818*t36819* \
               (gamma_aa[index]*gcaa*t36847*(1.6E1/3.0)+t36817*t36844*t36818*(1.6E1/3.0)))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t36816*t36884+cx2*t36817*t36881*t36819*t36888)*(4.0/3.0)+rho_a[index]* \
               t36907*(-t36878+t36897+t36822*t36825*(t36878+t36896-t36897-t36890*t36837*t36895*t36889))-c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t36847*t36884*(8.0/3.0)+cx2*t36817*t36844*t36881*t36888*(1.6E1/3.0)-cx1* \
               t36817*t36844*t36881*1.0/(t36883*t36883)*(8.0/3.0)-cx2*t36817*t36881*t36819*1.0/(t36887*t36887)*(gamma_aa[index]* \
               gx*t36847*(1.6E1/3.0)+t36817*t36844*t36881*(1.6E1/3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t36910 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36911 = c*t36910;
                double t36912 = sqrt(t36911);
                double t36913 = pow(t36911,3.0/2.0);
                double t36914 = c*c;
                double t36915 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36916 = 1.0/c0p;
                double t36917 = b1p*t36912;
                double t36918 = b3p*t36913;
                double t36919 = b4p*t36914*t36915;
                double t36920 = b2p*c*t36910;
                double t36921 = t36920+t36917+t36918+t36919;
                double t36922 = 1.0/t36921;
                double t36923 = t36922*t36916*(1.0/2.0);
                double t36924 = t36923+1.0;
                double t36925 = log(t36924);
                double t36926 = a1p*c*t36910;
                double t36927 = t36926+1.0;
                double t36928 = rho_a[index]*2.0;
                double t36929 = 1.0/pow(t36928,1.0/3.0);
                double t36930 = c*t36929;
                double t36931 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36932 = gcab*gcab;
                double t36933 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36934 = gamma_aa[index]*gcab*t36931;
                double t36935 = t36934+1.0;
                double t36936 = gamma_aa[index]*gamma_aa[index];
                double t36937 = gamma_aa[index]*gcab*t36931*2.0;
                double t36938 = t36932*t36933*t36936;
                double t36939 = t36937+t36938+1.0;
                double t36940 = gx*gx;
                double t36941 = gamma_aa[index]*gx*t36931;
                double t36942 = t36941+1.0;
                double t36943 = gamma_aa[index]*gx*t36931*2.0;
                double t36944 = t36940*t36933*t36936;
                double t36945 = t36943+t36944+1.0;
                double t36946 = pow(2.0,1.0/3.0);
                double t36947 = t36946*2.0;
                double t36948 = t36947-2.0;
                double t36949 = two_13*2.0;
                double t36950 = t36949-2.0;
                double t36951 = 1.0/t36950;
                double t36952 = 1.0/c0f;
                double t36953 = b1f*t36912;
                double t36954 = b3f*t36913;
                double t36955 = b4f*t36914*t36915;
                double t36956 = b2f*c*t36910;
                double t36957 = t36953+t36954+t36955+t36956;
                double t36958 = 1.0/t36957;
                double t36959 = t36952*t36958*(1.0/2.0);
                double t36960 = t36959+1.0;
                double t36961 = log(t36960);
                double t36962 = a1f*c*t36910;
                double t36963 = t36962+1.0;
                double t36964 = c0f*t36961*t36963*2.0;
                double t36965 = c0p*t36925*t36927*2.0;
                double t36966 = gcaa*gcaa;
                double t36967 = gamma_aa[index]*gcaa*t36931;
                double t36968 = t36967+1.0;
                double t36969 = gamma_aa[index]*gcaa*t36931*2.0;
                double t36970 = t36933*t36936*t36966;
                double t36971 = t36970+t36969+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t36965+t36951*t36948*(t36964-c0p*t36925*t36927*2.0))*2.0-c0p* \
                   rho_a[index]*log((t36916*(1.0/2.0))/(b1p*sqrt(t36930)+b3p*pow(t36930,3.0/2.0)+b4p*t36914*1.0/pow(t36928,2.0/ \
                   3.0)+b2p*c*t36929)+1.0)*(a1p*c*t36929+1.0)*4.0)*((ccab1*gcab*t36931*(1.0/2.0))/t36935-ccab1*gamma_aa[index]* \
                   t36932*t36933*1.0/(t36935*t36935)*(1.0/2.0)+(ccab2*gamma_aa[index]*t36932*t36933)/t36939-ccab2*t36932* \
                   t36933*t36936*1.0/(t36939*t36939)*(gcab*t36931+gamma_aa[index]*t36932*t36933))*2.0-rho_a[index]*(t36965+ \
                   t36951*t36948*(t36964-t36965))*((ccaa1*gcaa*t36931)/t36968+(ccaa2*gamma_aa[index]*t36933*t36966*2.0) \
                   /t36971-ccaa1*gamma_aa[index]*t36933*t36966*1.0/(t36968*t36968)-ccaa2*t36933*1.0/(t36971*t36971)*t36936* \
                   t36966*(gcaa*t36931*2.0+gamma_aa[index]*t36933*t36966*2.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t36931)/t36942-cx1*gamma_aa[index]*t36940*t36933*1.0/(t36942*t36942)+(cx2*gamma_aa[index]*t36940* \
                   t36933*2.0)/t36945-cx2*t36940*t36933*t36936*1.0/(t36945*t36945)*(gx*t36931*2.0+gamma_aa[index]*t36940* \
                   t36933*2.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t36974 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36975 = c*t36974;
            double t36976 = sqrt(t36975);
            double t36977 = pow(t36975,3.0/2.0);
            double t36978 = c*c;
            double t36979 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36980 = 1.0/c0p;
            double t36981 = b1p*t36976;
            double t36982 = b3p*t36977;
            double t36983 = b4p*t36978*t36979;
            double t36984 = b2p*c*t36974;
            double t36985 = t36981+t36982+t36983+t36984;
            double t36986 = 1.0/t36985;
            double t36987 = t36980*t36986*(1.0/2.0);
            double t36988 = t36987+1.0;
            double t36989 = log(t36988);
            double t36990 = a1p*c*t36974;
            double t36991 = t36990+1.0;
            double t36992 = rho_a[index]*2.0;
            double t36993 = 1.0/pow(t36992,1.0/3.0);
            double t36994 = c*t36993;
            double t36995 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36996 = gamma_aa[index]*gamma_aa[index];
            double t36997 = gcab*gcab;
            double t36998 = gamma_aa[index]*gcab*t36995;
            double t36999 = t36998+1.0;
            double t37000 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t37001 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t37006 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t37007 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t37008 = gamma_aa[index]*gcab*t37007*(8.0/3.0);
            double t37009 = t36996*t36997*t37006*(8.0/3.0);
            double t37002 = t37008+t37009;
            double t37003 = gamma_aa[index]*gcab*t36995*2.0;
            double t37004 = t36996*t36997*t37001;
            double t37005 = t37003+t37004+1.0;
            double t37010 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t37011 = 1.0/(t37005*t37005);
            double t37012 = 1.0/t36999;
            double t37013 = 1.0/t37005;
            double t37014 = sqrt(t36994);
            double t37015 = b1p*t37014;
            double t37016 = pow(t36994,3.0/2.0);
            double t37017 = b3p*t37016;
            double t37018 = b2p*c*t36993;
            double t37019 = 1.0/pow(t36992,2.0/3.0);
            double t37020 = b4p*t36978*t37019;
            double t37021 = t37020+t37015+t37017+t37018;
            double t37022 = 1.0/t37021;
            double t37023 = t36980*t37022*(1.0/2.0);
            double t37024 = t37023+1.0;
            double t37025 = a1p*c*t36993;
            double t37026 = t37025+1.0;
            double t37027 = 1.0/pow(t36992,8.0/3.0);
            double t37028 = 1.0/pow(t36992,7.0/3.0);
            double t37029 = 1.0/sqrt(t36994);
            double t37030 = 1.0/t37024;
            double t37031 = 1.0/pow(t36992,4.0/3.0);
            double t37034 = b2p*c*t37031*(1.0/3.0);
            double t37035 = 1.0/pow(t36992,5.0/3.0);
            double t37036 = b4p*t36978*t37035*(2.0/3.0);
            double t37037 = b1p*c*t37031*t37029*(1.0/6.0);
            double t37038 = b3p*c*t37031*t37014*(1.0/2.0);
            double t37032 = t37034+t37036+t37037+t37038;
            double t37033 = log(t37024);
            double t37039 = t37032*t37032;
            double t37040 = two_13*2.0;
            double t37041 = t37040-2.0;
            double t37042 = 1.0/t37041;
            double t37043 = 1.0/(t37021*t37021);
            double t37044 = pow(2.0,1.0/3.0);
            double t37045 = t37044*2.0;
            double t37046 = t37045-2.0;
            double t37047 = a1f*c*t36974;
            double t37048 = t37047+1.0;
            double t37049 = 1.0/c0f;
            double t37050 = b1f*t36976;
            double t37051 = b3f*t36977;
            double t37052 = b4f*t36978*t36979;
            double t37053 = b2f*c*t36974;
            double t37054 = t37050+t37051+t37052+t37053;
            double t37055 = 1.0/t37054;
            double t37056 = t37055*t37049*(1.0/2.0);
            double t37057 = t37056+1.0;
            double t37058 = 1.0/pow(rho_a[index],4.0/3.0);
            double t37060 = 1.0/pow(rho_a[index],5.0/3.0);
            double t37061 = 1.0/sqrt(t36975);
            double t37067 = b4f*t36978*t37060*(2.0/3.0);
            double t37068 = b2f*c*t37058*(1.0/3.0);
            double t37069 = b1f*c*t37061*t37058*(1.0/6.0);
            double t37070 = b3f*c*t36976*t37058*(1.0/2.0);
            double t37059 = t37070+t37067+t37068+t37069;
            double t37072 = b4p*t36978*t37060*(2.0/3.0);
            double t37073 = b2p*c*t37058*(1.0/3.0);
            double t37074 = b1p*c*t37061*t37058*(1.0/6.0);
            double t37075 = b3p*c*t36976*t37058*(1.0/2.0);
            double t37062 = t37072+t37073+t37074+t37075;
            double t37063 = 1.0/t37057;
            double t37064 = 1.0/pow(rho_a[index],7.0/3.0);
            double t37065 = 1.0/t36988;
            double t37066 = 1.0/pow(t36975,3.0/2.0);
            double t37071 = t37059*t37059;
            double t37076 = t37062*t37062;
            double t37077 = log(t37057);
            double t37078 = 1.0/(t37054*t37054);
            double t37079 = 1.0/(t36985*t36985);
            double t37080 = 1.0/(t36985*t36985*t36985);
            double t37081 = t36991*t37080*t37065*t37076*2.0;
            double t37082 = b4p*t36995*t36978*(1.0E1/9.0);
            double t37083 = b2p*c*t37064*(4.0/9.0);
            double t37084 = b3p*t36995*t36978*t37061*(1.0/1.2E1);
            double t37085 = b1p*c*t37061*t37064*(2.0/9.0);
            double t37086 = b3p*c*t36976*t37064*(2.0/3.0);
            double t37174 = b1p*t36995*t36978*t37066*(1.0/3.6E1);
            double t37087 = t37082+t37083+t37084-t37174+t37085+t37086;
            double t37088 = 1.0/(t36988*t36988);
            double t37089 = 1.0/(t36985*t36985*t36985*t36985);
            double t37090 = a1p*c*c0p*t36989*t37064*(8.0/9.0);
            double t37091 = c0f*t37048*t37077*2.0;
            double t37092 = c0p*t36991*t36989*2.0;
            double t37093 = gcaa*gcaa;
            double t37094 = gamma_aa[index]*gcaa*t36995;
            double t37095 = t37094+1.0;
            double t37096 = gamma_aa[index]*gcaa*t36995*2.0;
            double t37097 = t36996*t37001*t37093;
            double t37098 = t37096+t37097+1.0;
            double t37099 = ccab1*gamma_aa[index]*gcab*t36995*t37012;
            double t37100 = ccab2*t36996*t36997*t37001*t37013;
            double t37101 = ccab0+t37100+t37099;
            double t37102 = b2p*c*t37028*(4.0/9.0);
            double t37103 = b4p*t36978*t37027*(1.0E1/9.0);
            double t37104 = 1.0/pow(t36994,3.0/2.0);
            double t37105 = b3p*t36978*t37027*t37029*(1.0/1.2E1);
            double t37106 = b1p*c*t37028*t37029*(2.0/9.0);
            double t37107 = b3p*c*t37014*t37028*(2.0/3.0);
            double t37108 = t37102+t37103+t37105+t37106+t37107-b1p*t36978*t37104*t37027*(1.0/3.6E1);
            double t37109 = t37030*t37043*t37026*t37108;
            double t37110 = 1.0/(t37021*t37021*t37021);
            double t37111 = 1.0/(t37024*t37024);
            double t37112 = 1.0/(t37021*t37021*t37021*t37021);
            double t37113 = t36980*t37111*t37112*t37026*t37039*(1.0/2.0);
            double t37114 = 1.0/d2fz0;
            double t37115 = 1.0/(rho_a[index]*rho_a[index]);
            double t37116 = 1.0/Aa;
            double t37117 = b1a*t37014;
            double t37118 = b3a*t37016;
            double t37119 = b2a*c*t36993;
            double t37120 = b4a*t36978*t37019;
            double t37121 = t37120+t37117+t37118+t37119;
            double t37122 = 1.0/t37121;
            double t37123 = t37122*t37116*(1.0/2.0);
            double t37124 = t37123+1.0;
            double t37125 = log(t37124);
            double t37126 = a1a*c*t36993;
            double t37127 = t37126+1.0;
            double t37128 = Aa*t37042*t37114*t37115*t37125*t37127*(4.0/9.0);
            double t37129 = a1p*c*t37030*t37031*t37032*t37043*(2.0/3.0);
            double t37130 = t37030*t37032*t37043*t37026*2.0;
            double t37131 = t37091-t37092;
            double t37132 = t37131*t37042*t37046;
            double t37133 = t37132+t37092;
            double t37134 = 1.0/pow(rho_a[index],1.0E1);
            double t37135 = 1.0/(t36999*t36999*t36999);
            double t37136 = ccab1*gamma_aa[index]*gcab*t36996*t36997*t37134*t37135*(3.2E1/9.0);
            double t37137 = 1.0/(t36999*t36999);
            double t37138 = t37002*t37002;
            double t37139 = 1.0/(t37005*t37005*t37005);
            double t37140 = ccab2*t36996*t36997*t37001*t37138*t37139*2.0;
            double t37141 = t36991*t37062*t37065*t37079;
            double t37142 = a1f*c*c0f*t37058*t37077*(2.0/3.0);
            double t37144 = a1p*c*c0p*t36989*t37058*(2.0/3.0);
            double t37147 = t37063*t37048*t37059*t37078;
            double t37143 = t37141+t37142-t37144-t37147;
            double t37145 = 1.0/t37095;
            double t37146 = 1.0/t37098;
            double t37148 = t37042*t37143*t37046;
            double t37149 = -t37141+t37144+t37148;
            double t37150 = gx*gx;
            double t37151 = gamma_aa[index]*gx*t36995;
            double t37152 = t37151+1.0;
            double t37157 = gamma_aa[index]*gx*t37007*(1.6E1/3.0);
            double t37158 = t36996*t37006*t37150*(1.6E1/3.0);
            double t37153 = t37157+t37158;
            double t37154 = gamma_aa[index]*gx*t36995*2.0;
            double t37155 = t36996*t37001*t37150;
            double t37156 = t37154+t37155+1.0;
            double t37159 = 1.0/(t37156*t37156);
            double t37160 = 1.0/t37152;
            double t37161 = 1.0/t37156;
            double t37162 = 1.0/(t37152*t37152);
            double t37163 = ccaa1*gamma_aa[index]*gcaa*t36995*t37145;
            double t37164 = ccaa2*t36996*t37001*t37146*t37093;
            double t37165 = ccaa0+t37163+t37164;
            double t37166 = 1.0/(t37054*t37054*t37054);
            double t37167 = b4f*t36995*t36978*(1.0E1/9.0);
            double t37168 = b2f*c*t37064*(4.0/9.0);
            double t37169 = b3f*t36995*t36978*t37061*(1.0/1.2E1);
            double t37170 = b1f*c*t37061*t37064*(2.0/9.0);
            double t37171 = b3f*c*t36976*t37064*(2.0/3.0);
            double t37172 = t37170+t37171+t37167+t37168+t37169-b1f*t36995*t36978*t37066*(1.0/3.6E1);
            double t37173 = t37063*t37172*t37048*t37078;
            double t37175 = t36991*t37065*t37087*t37079;
            double t37176 = 1.0/(t37057*t37057);
            double t37177 = 1.0/(t37054*t37054*t37054*t37054);
            double t37178 = t37071*t37048*t37049*t37176*t37177*(1.0/2.0);
            double t37179 = t36980*t36991*t37076*t37088*t37089*(1.0/2.0);
            double t37180 = a1f*c*t37063*t37058*t37059*t37078*(2.0/3.0);
            double t37181 = a1p*c*t37062*t37065*t37058*t37079*(2.0/3.0);
            double t37182 = 1.0/(t37095*t37095);
            double t37183 = gamma_aa[index]*gcaa*t37007*(1.6E1/3.0);
            double t37184 = t36996*t37006*t37093*(1.6E1/3.0);
            double t37185 = t37183+t37184;
            double t37186 = 1.0/(t37098*t37098);
            double t37187 = ccaa1*gamma_aa[index]*gcaa*t37007*t37145*(8.0/3.0);
            double t37188 = ccaa2*t36996*t37006*t37146*t37093*(1.6E1/3.0);
            double t37189 = t37187+t37188-ccaa1*t36996*t37006*t37182*t37093*(8.0/3.0)-ccaa2*t36996*t37001*t37093* \
               t37185*t37186;
            v_rho_a_rho_a_[index] = (ccab1*gamma_aa[index]*gcab*t37012*t37007*(4.0/3.0)+ccab2*t36996*t36997*t37013* \
               t37006*(8.0/3.0)-ccab1*t36996*t36997*t37006*t37137*(4.0/3.0)-ccab2*t36996*t36997*t37001*t37002*t37011) \
               *(-t37132-t37092+rho_a[index]*t37149+rho_a[index]*(t37030*t37032*t37043*t37026-a1p*c*c0p*t37031*t37033* \
               (2.0/3.0))*2.0+c0p*t37033*t37026*2.0)*4.0+t37133*t37189*2.0+t37165*t37149*2.0+(rho_a[index]*t37133* \
               2.0-c0p*rho_a[index]*t37033*t37026*4.0)*(t37140+t37136+ccab2*t36996*t36997*t37000*t37013*(3.2E1/9.0) \
               -ccab1*t36996*t36997*t37000*t37137*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t36996*t36996) \
               *(t36997*t36997)*t37011*(3.2E1/9.0)-ccab2*t36996*t36997*t37002*t37011*t37006*(1.6E1/3.0))+t37101*(- \
               t37130+rho_a[index]*(t37113+t37109-t37128+t37129-t37110*t37030*t37026*t37039*2.0-a1p*c*c0p*t37033* \
               t37028*(8.0/9.0))*2.0+a1p*c*c0p*t37031*t37033*(4.0/3.0))+(rho_a[index]*(t37092+t37042*t37046*(t37091- \
               c0p*t36991*t36989*2.0))*2.0-c0p*rho_a[index]*t37033*t37026*4.0)*(t37140+t37136+ccab1*gamma_aa[index]* \
               gcab*t37010*t37012*(4.4E1/9.0)+ccab2*t36996*t36997*t37000*t37013*(4.0E1/3.0)-ccab1*t36996*t36997*t37000* \
               t37137*(7.6E1/9.0)-ccab2*t36996*t36997*t37002*t37011*t37006*(1.6E1/3.0)-ccab2*t36996*t36997*t37001* \
               t37011*(gamma_aa[index]*gcab*t37010*(8.8E1/9.0)+t36996*t36997*t37000*(4.0E1/3.0)))-t37101*(t37130+ \
               rho_a[index]*(-t37081-t37090+t37181+t37175+t37179+t37042*t37046*(t37081+t37090+t37180+t37173+t37178- \
               t36991*t37065*t37087*t37079-t37071*t37063*t37048*t37166*2.0-a1f*c*c0f*t37064*t37077*(8.0/9.0)-t36980* \
               t36991*t37076*t37088*t37089*(1.0/2.0)-a1p*c*t37062*t37065*t37058*t37079*(2.0/3.0)))-rho_a[index]*(t37113+ \
               t37109+t37128+t37129-t37110*t37030*t37026*t37039*2.0-a1p*c*c0p*t37033*t37028*(8.0/9.0))*2.0+t37042* \
               t37143*t37046*2.0-t36991*t37062*t37065*t37079*2.0+a1p*c*c0p*t36989*t37058*(4.0/3.0)-a1p*c*c0p*t37031* \
               t37033*(4.0/3.0))+c0*t36979*(cx0+cx1*gamma_aa[index]*gx*t36995*t37160+cx2*t36996*t37001*t37150*t37161) \
               *(4.0/9.0)-rho_a[index]*t37133*(ccaa1*gamma_aa[index]*gcaa*t37010*t37145*(8.8E1/9.0)-ccaa1*t36996* \
               t37000*t37182*t37093*2.4E1+ccaa2*t36996*t37000*t37146*t37093*(3.04E2/9.0)-ccaa2*t36996*t37006*t37093* \
               t37185*t37186*(3.2E1/3.0)-ccaa2*t36996*t37001*t37093*t37186*(gamma_aa[index]*gcaa*t37010*(1.76E2/9.0) \
               +t36996*t37000*t37093*(3.04E2/9.0))+ccaa2*t36996*t37001*t37093*(t37185*t37185)*1.0/(t37098*t37098* \
               t37098)*2.0+ccaa1*gamma_aa[index]*gcaa*t36996*t37134*t37093*1.0/(t37095*t37095*t37095)*(1.28E2/9.0) \
               )+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t37010*t37160*(8.8E1/9.0)-cx1*t36996*t37000* \
               t37150*t37162*2.4E1+cx2*t36996*t37000*t37150*t37161*(3.04E2/9.0)-cx2*t36996*t37006*t37150*t37153*t37159* \
               (3.2E1/3.0)-cx2*t36996*t37001*t37150*t37159*(gamma_aa[index]*gx*t37010*(1.76E2/9.0)+t36996*t37000* \
               t37150*(3.04E2/9.0))+cx2*t36996*t37001*t37150*(t37153*t37153)*1.0/(t37156*t37156*t37156)*2.0+cx1*gamma_aa[index]* \
               gx*t36996*t37150*t37134*1.0/(t37152*t37152*t37152)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t37007*t37160*(8.0/3.0)-cx1*t36996*t37006*t37150*t37162*(8.0/3.0)+cx2*t36996*t37006* \
               t37150*t37161*(1.6E1/3.0)-cx2*t36996*t37001*t37150*t37153*t37159)*(8.0/3.0)+rho_a[index]*t37165*(- \
               t37081-t37090+t37181+t37175+t37179+t37042*t37046*(t37081+t37090+t37180-t37181+t37173-t37175+t37178- \
               t37179-t37071*t37063*t37048*t37166*2.0-a1f*c*c0f*t37064*t37077*(8.0/9.0)))-rho_a[index]*t37149*t37189* \
               2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t37191 = 1.0/pow(rho_a[index],8.0/3.0);
                double t37192 = gcab*gcab;
                double t37193 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t37194 = gamma_aa[index]*gcab*t37191;
                double t37195 = t37194+1.0;
                double t37196 = gamma_aa[index]*gamma_aa[index];
                double t37197 = gamma_aa[index]*gcab*t37191*2.0;
                double t37198 = t37192*t37193*t37196;
                double t37199 = t37197+t37198+1.0;
                double t37200 = rho_a[index]*2.0;
                double t37201 = 1.0/pow(t37200,1.0/3.0);
                double t37202 = c*t37201;
                double t37203 = sqrt(t37202);
                double t37204 = b1p*t37203;
                double t37205 = pow(t37202,3.0/2.0);
                double t37206 = b3p*t37205;
                double t37207 = b2p*c*t37201;
                double t37208 = c*c;
                double t37209 = 1.0/pow(t37200,2.0/3.0);
                double t37210 = b4p*t37208*t37209;
                double t37211 = t37210+t37204+t37206+t37207;
                double t37212 = 1.0/pow(t37200,4.0/3.0);
                double t37213 = 1.0/c0p;
                double t37214 = 1.0/t37211;
                double t37215 = t37213*t37214*(1.0/2.0);
                double t37216 = t37215+1.0;
                double t37217 = 1.0/pow(rho_a[index],1.0/3.0);
                double t37218 = c*t37217;
                double t37219 = sqrt(t37218);
                double t37220 = b1f*t37219;
                double t37221 = pow(t37218,3.0/2.0);
                double t37222 = b3f*t37221;
                double t37223 = 1.0/pow(rho_a[index],2.0/3.0);
                double t37224 = b4f*t37223*t37208;
                double t37225 = b2f*c*t37217;
                double t37226 = t37220+t37222+t37224+t37225;
                double t37227 = 1.0/pow(rho_a[index],4.0/3.0);
                double t37228 = b1p*t37219;
                double t37229 = b3p*t37221;
                double t37230 = b4p*t37223*t37208;
                double t37231 = b2p*c*t37217;
                double t37232 = t37230+t37231+t37228+t37229;
                double t37233 = 1.0/pow(rho_a[index],5.0/3.0);
                double t37234 = 1.0/sqrt(t37218);
                double t37235 = 1.0/c0f;
                double t37236 = 1.0/t37226;
                double t37237 = t37235*t37236*(1.0/2.0);
                double t37238 = t37237+1.0;
                double t37239 = 1.0/t37232;
                double t37240 = t37213*t37239*(1.0/2.0);
                double t37241 = t37240+1.0;
                double t37242 = a1p*c*t37217;
                double t37243 = t37242+1.0;
                double t37244 = 1.0/t37241;
                double t37245 = 1.0/(t37232*t37232);
                double t37246 = b4p*t37233*t37208*(2.0/3.0);
                double t37247 = b2p*c*t37227*(1.0/3.0);
                double t37248 = b1p*c*t37234*t37227*(1.0/6.0);
                double t37249 = b3p*c*t37227*t37219*(1.0/2.0);
                double t37250 = t37246+t37247+t37248+t37249;
                double t37251 = t37250*t37243*t37244*t37245;
                double t37252 = log(t37241);
                double t37253 = log(t37216);
                double t37254 = a1p*c*t37201;
                double t37255 = t37254+1.0;
                double t37256 = pow(2.0,1.0/3.0);
                double t37257 = t37256*2.0;
                double t37258 = t37257-2.0;
                double t37259 = two_13*2.0;
                double t37260 = t37259-2.0;
                double t37261 = 1.0/t37260;
                double t37262 = log(t37238);
                double t37263 = a1f*c*t37217;
                double t37264 = t37263+1.0;
                double t37265 = c0f*t37262*t37264*2.0;
                double t37267 = c0p*t37243*t37252*2.0;
                double t37266 = t37265-t37267;
                double t37268 = gcaa*gcaa;
                double t37269 = gamma_aa[index]*gcaa*t37191;
                double t37270 = t37269+1.0;
                double t37271 = gamma_aa[index]*gcaa*t37191*2.0;
                double t37272 = t37193*t37196*t37268;
                double t37273 = t37271+t37272+1.0;
                double t37274 = t37261*t37266*t37258;
                double t37275 = t37274+t37267;
                double t37276 = 1.0/t37199;
                double t37277 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t37278 = 1.0/(t37195*t37195);
                double t37279 = 1.0/(t37199*t37199);
                double t37280 = gcab*t37191;
                double t37281 = gamma_aa[index]*t37192*t37193;
                double t37282 = t37280+t37281;
                double t37283 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t37284 = gamma_aa[index]*gcab*t37283*(8.0/3.0);
                double t37285 = t37192*t37196*t37277*(8.0/3.0);
                double t37286 = t37284+t37285;
                double t37287 = rho_a[index]*t37275*2.0;
                double t37288 = t37287-c0p*rho_a[index]*t37253*t37255*4.0;
                double t37289 = 1.0/t37195;
                double t37290 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t37291 = 1.0/(t37195*t37195*t37195);
                double t37292 = ccab2*gamma_aa[index]*t37192*t37193*t37286*t37279;
                double t37293 = ccab2*t37192*t37282*t37196*t37277*t37279*(8.0/3.0);
                double t37294 = 1.0/(t37199*t37199*t37199);
                double t37295 = 1.0/t37270;
                double t37296 = 1.0/t37273;
                double t37297 = 1.0/(t37270*t37270);
                double t37298 = 1.0/(t37273*t37273);
                double t37299 = gcaa*t37191*2.0;
                double t37300 = gamma_aa[index]*t37193*t37268*2.0;
                double t37301 = t37300+t37299;
                double t37302 = gamma_aa[index]*gcaa*t37283*(1.6E1/3.0);
                double t37303 = t37196*t37268*t37277*(1.6E1/3.0);
                double t37304 = t37302+t37303;
                double t37305 = gx*gx;
                double t37306 = gamma_aa[index]*gx*t37191;
                double t37307 = t37306+1.0;
                double t37308 = gamma_aa[index]*gx*t37191*2.0;
                double t37309 = t37305*t37193*t37196;
                double t37310 = t37308+t37309+1.0;
                double t37311 = 1.0/t37238;
                double t37312 = 1.0/(t37226*t37226);
                double t37313 = b4f*t37233*t37208*(2.0/3.0);
                double t37314 = b2f*c*t37227*(1.0/3.0);
                double t37315 = b1f*c*t37234*t37227*(1.0/6.0);
                double t37316 = b3f*c*t37227*t37219*(1.0/2.0);
                double t37317 = t37313+t37314+t37315+t37316;
                double t37318 = a1f*c*c0f*t37262*t37227*(2.0/3.0);
                double t37319 = a1p*c*c0p*t37252*t37227*(2.0/3.0);
                double t37320 = ccaa1*gcaa*t37191*t37295;
                double t37321 = ccaa2*gamma_aa[index]*t37193*t37268*t37296*2.0;
                double t37322 = t37320+t37321-ccaa1*gamma_aa[index]*t37193*t37268*t37297-ccaa2*t37301*t37193*t37196* \
                   t37268*t37298;
                double t37323 = 1.0/t37307;
                double t37324 = 1.0/t37310;
                double t37325 = 1.0/(t37307*t37307);
                double t37326 = 1.0/(t37310*t37310);
                double t37327 = gx*t37191*2.0;
                double t37328 = gamma_aa[index]*t37305*t37193*2.0;
                double t37329 = t37327+t37328;
                double t37330 = gamma_aa[index]*gx*t37283*(1.6E1/3.0);
                double t37331 = t37305*t37196*t37277*(1.6E1/3.0);
                double t37332 = t37330+t37331;
                v_rho_a_gamma_aa_[index] = -t37322*t37275+t37288*(t37292+t37293-ccab2*gamma_aa[index]*t37192*t37276* \
                   t37277*(4.0/3.0)+ccab1*gamma_aa[index]*t37192*t37277*t37278*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*(t37192*t37192)*t37196*t37279*(4.0/3.0)-ccab1*gcab*t37290*t37192*t37291*t37196*(4.0/3.0)-ccab2* \
                   t37192*t37282*t37193*t37294*t37196*t37286*2.0)+t37288*(t37292+t37293-ccab1*gcab*t37283*t37289*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t37192*t37276*t37277*4.0+ccab1*gamma_aa[index]*t37192*t37277*t37278*(8.0/ \
                   3.0)+ccab2*t37192*t37193*t37196*t37279*(gcab*t37283*(8.0/3.0)+gamma_aa[index]*t37192*t37277*4.0)-ccab1* \
                   gcab*t37290*t37192*t37291*t37196*(4.0/3.0)-ccab2*t37192*t37282*t37193*t37294*t37196*t37286*2.0)-(ccab1* \
                   gcab*t37191*t37289*(1.0/2.0)+ccab2*gamma_aa[index]*t37192*t37193*t37276-ccab1*gamma_aa[index]*t37192* \
                   t37193*t37278*(1.0/2.0)-ccab2*t37192*t37282*t37193*t37196*t37279)*(rho_a[index]*((1.0/(t37211*t37211) \
                   *t37255*(b4p*1.0/pow(t37200,5.0/3.0)*t37208*(2.0/3.0)+b2p*c*t37212*(1.0/3.0)+b3p*c*t37203*t37212*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t37202)*t37212*(1.0/6.0)))/t37216-a1p*c*c0p*t37212*t37253*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t37251+t37319+t37261*t37258*(t37251+t37318-t37311*t37312*t37317*t37264-a1p*c*c0p*t37252*t37227*(2.0/ \
                   3.0)))-c0p*t37243*t37252*2.0+c0p*t37253*t37255*2.0-t37261*t37266*t37258)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t37323*t37191-cx1*gamma_aa[index]*t37305*t37325*t37193+cx2*gamma_aa[index]*t37305*t37324* \
                   t37193*2.0-cx2*t37305*t37326*t37193*t37329*t37196)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t37323*t37283*(8.0/3.0)-cx1*gamma_aa[index]*t37305*t37325*t37277*8.0+cx2*gamma_aa[index]*t37305*t37324* \
                   t37277*(3.2E1/3.0)-cx2*t37305*t37326*t37329*t37196*t37277*(1.6E1/3.0)+cx1*gx*t37305*1.0/(t37307*t37307* \
                   t37307)*t37290*t37196*(1.6E1/3.0)-cx2*t37305*t37326*t37193*t37196*(gx*t37283*(1.6E1/3.0)+gamma_aa[index]* \
                   t37305*t37277*(3.2E1/3.0))-cx2*gamma_aa[index]*t37305*t37332*t37326*t37193*2.0+cx2*1.0/(t37310*t37310* \
                   t37310)*t37305*t37332*t37193*t37329*t37196*2.0)+rho_a[index]*t37322*(-t37251+t37319+t37261*t37258* \
                   (t37251+t37318-t37319-t37311*t37312*t37317*t37264))+rho_a[index]*t37275*(ccaa1*gcaa*t37283*t37295* \
                   (8.0/3.0)-ccaa1*gamma_aa[index]*t37268*t37277*t37297*8.0+ccaa2*gamma_aa[index]*t37268*t37277*t37296* \
                   (3.2E1/3.0)-ccaa2*t37301*t37196*t37268*t37277*t37298*(1.6E1/3.0)+ccaa1*gcaa*1.0/(t37270*t37270*t37270) \
                   *t37290*t37196*t37268*(1.6E1/3.0)-ccaa2*t37193*t37196*t37268*t37298*(gcaa*t37283*(1.6E1/3.0)+gamma_aa[index]* \
                   t37268*t37277*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t37304*t37193*t37268*t37298*2.0+ccaa2*t37301*t37304* \
                   1.0/(t37273*t37273*t37273)*t37193*t37196*t37268*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t37334 = 1.0/pow(rho_a[index],1.0/3.0);
                double t37335 = c*t37334;
                double t37336 = sqrt(t37335);
                double t37337 = pow(t37335,3.0/2.0);
                double t37338 = c*c;
                double t37339 = 1.0/pow(rho_a[index],2.0/3.0);
                double t37340 = 1.0/c0p;
                double t37341 = b1p*t37336;
                double t37342 = b3p*t37337;
                double t37343 = b4p*t37338*t37339;
                double t37344 = b2p*c*t37334;
                double t37345 = t37341+t37342+t37343+t37344;
                double t37346 = 1.0/t37345;
                double t37347 = t37340*t37346*(1.0/2.0);
                double t37348 = t37347+1.0;
                double t37349 = log(t37348);
                double t37350 = a1p*c*t37334;
                double t37351 = t37350+1.0;
                double t37352 = rho_a[index]*2.0;
                double t37353 = 1.0/pow(t37352,1.0/3.0);
                double t37354 = c*t37353;
                double t37355 = gcab*gcab;
                double t37356 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t37357 = 1.0/pow(rho_a[index],8.0/3.0);
                double t37358 = gamma_aa[index]*gcab*t37357;
                double t37359 = t37358+1.0;
                double t37360 = gamma_aa[index]*gamma_aa[index];
                double t37361 = gamma_aa[index]*gcab*t37357*2.0;
                double t37362 = t37360*t37355*t37356;
                double t37363 = t37361+t37362+1.0;
                double t37365 = gcab*t37357;
                double t37366 = gamma_aa[index]*t37355*t37356;
                double t37364 = t37365+t37366;
                double t37367 = 1.0/(t37363*t37363);
                double t37368 = pow(2.0,1.0/3.0);
                double t37369 = t37368*2.0;
                double t37370 = t37369-2.0;
                double t37371 = two_13*2.0;
                double t37372 = t37371-2.0;
                double t37373 = 1.0/t37372;
                double t37374 = 1.0/c0f;
                double t37375 = b1f*t37336;
                double t37376 = b3f*t37337;
                double t37377 = b4f*t37338*t37339;
                double t37378 = b2f*c*t37334;
                double t37379 = t37375+t37376+t37377+t37378;
                double t37380 = 1.0/t37379;
                double t37381 = t37380*t37374*(1.0/2.0);
                double t37382 = t37381+1.0;
                double t37383 = log(t37382);
                double t37384 = a1f*c*t37334;
                double t37385 = t37384+1.0;
                double t37386 = c0f*t37383*t37385*2.0;
                double t37387 = c0p*t37351*t37349*2.0;
                double t37388 = gcaa*gcaa;
                double t37389 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t37390 = gamma_aa[index]*gcaa*t37357;
                double t37391 = t37390+1.0;
                double t37392 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t37393 = gamma_aa[index]*gcaa*t37357*2.0;
                double t37394 = t37360*t37356*t37388;
                double t37395 = t37393+t37394+1.0;
                double t37397 = gcaa*t37357*2.0;
                double t37398 = gamma_aa[index]*t37356*t37388*2.0;
                double t37396 = t37397+t37398;
                double t37399 = 1.0/(t37395*t37395);
                double t37400 = gx*gx;
                double t37401 = gamma_aa[index]*gx*t37357;
                double t37402 = t37401+1.0;
                double t37403 = gamma_aa[index]*gx*t37357*2.0;
                double t37404 = t37400*t37360*t37356;
                double t37405 = t37403+t37404+1.0;
                double t37407 = gx*t37357*2.0;
                double t37408 = gamma_aa[index]*t37400*t37356*2.0;
                double t37406 = t37407+t37408;
                double t37409 = 1.0/(t37405*t37405);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t37387+t37370*t37373*(t37386-c0p*t37351*t37349*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t37340*(1.0/2.0))/(b1p*sqrt(t37354)+b3p*pow(t37354,3.0/2.0)+b4p*1.0/pow(t37352,2.0/ \
                   3.0)*t37338+b2p*c*t37353)+1.0)*(a1p*c*t37353+1.0)*4.0)*((ccab2*t37355*t37356*(1.0/2.0))/t37363-ccab1* \
                   t37355*t37356*1.0/(t37359*t37359)*(1.0/2.0)-ccab2*t37360*(t37355*t37355)*t37392*t37367*(1.0/2.0)+ccab1* \
                   gamma_aa[index]*gcab*t37355*1.0/(t37359*t37359*t37359)*t37389*(1.0/2.0)+ccab2*t37360*1.0/(t37363*t37363* \
                   t37363)*t37355*(t37364*t37364)*t37356*2.0-ccab2*gamma_aa[index]*t37355*t37364*t37356*t37367*2.0)*4.0+ \
                   rho_a[index]*(t37387+t37370*t37373*(t37386-t37387))*(ccaa1*1.0/(t37391*t37391)*t37356*t37388*2.0-(ccaa2* \
                   t37356*t37388*2.0)/t37395+ccaa2*t37360*t37392*(t37388*t37388)*t37399*2.0-ccaa1*gamma_aa[index]*gcaa* \
                   1.0/(t37391*t37391*t37391)*t37388*t37389*2.0-ccaa2*t37360*t37356*1.0/(t37395*t37395*t37395)*(t37396* \
                   t37396)*t37388*2.0+ccaa2*gamma_aa[index]*t37356*t37396*t37388*t37399*4.0)*2.0-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*t37400*1.0/(t37402*t37402)*t37356*2.0-(cx2*t37400*t37356*2.0)/t37405+cx2*(t37400*t37400) \
                   *t37360*t37409*t37392*2.0-cx1*gamma_aa[index]*gx*t37400*1.0/(t37402*t37402*t37402)*t37389*2.0-cx2* \
                   t37400*t37360*1.0/(t37405*t37405*t37405)*(t37406*t37406)*t37356*2.0+cx2*gamma_aa[index]*t37400*t37406* \
                   t37409*t37356*4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void B97_1_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33183 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33184 = gamma_aa[index]*t33183*(1.0/2.0);
            double t33185 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33186 = gamma_bb[index]*t33185*(1.0/2.0);
            double t33181 = t33184+t33186;
            double t33182 = gcab*gcab;
            double t33187 = t33181*t33181;
            double t33188 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33189 = c*t33188;
            double t33190 = sqrt(t33189);
            double t33191 = pow(t33189,3.0/2.0);
            double t33192 = c*c;
            double t33193 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33194 = 1.0/c0p;
            double t33195 = b1p*t33190;
            double t33196 = b3p*t33191;
            double t33197 = b4p*t33192*t33193;
            double t33198 = b2p*c*t33188;
            double t33199 = t33195+t33196+t33197+t33198;
            double t33200 = 1.0/t33199;
            double t33201 = t33200*t33194*(1.0/2.0);
            double t33202 = t33201+1.0;
            double t33203 = log(t33202);
            double t33204 = a1p*c*t33188;
            double t33205 = t33204+1.0;
            double t33206 = pow(2.0,1.0/3.0);
            double t33207 = t33206*2.0;
            double t33208 = t33207-2.0;
            double t33209 = two_13*2.0;
            double t33210 = t33209-2.0;
            double t33211 = 1.0/t33210;
            double t33212 = 1.0/c0f;
            double t33213 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33214 = c*t33213;
            double t33215 = sqrt(t33214);
            double t33216 = pow(t33214,3.0/2.0);
            double t33217 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33218 = b1p*t33215;
            double t33219 = b3p*t33216;
            double t33220 = b4p*t33217*t33192;
            double t33221 = b2p*c*t33213;
            double t33222 = t33220+t33221+t33218+t33219;
            double t33223 = 1.0/t33222;
            double t33224 = t33223*t33194*(1.0/2.0);
            double t33225 = t33224+1.0;
            double t33226 = log(t33225);
            double t33227 = a1p*c*t33213;
            double t33228 = t33227+1.0;
            double t33229 = c0p*t33226*t33228*2.0;
            double t33230 = rho_a[index]+rho_b[index];
            double t33231 = 1.0/pow(t33230,1.0/3.0);
            double t33232 = c*t33231;
            double t33233 = sqrt(t33232);
            double t33234 = pow(t33232,3.0/2.0);
            double t33235 = 1.0/pow(t33230,2.0/3.0);
            double t33236 = b1p*t33233;
            double t33237 = b3p*t33234;
            double t33238 = b4p*t33235*t33192;
            double t33239 = b2p*c*t33231;
            double t33240 = t33236+t33237+t33238+t33239;
            double t33241 = 1.0/t33240;
            double t33242 = t33241*t33194*(1.0/2.0);
            double t33243 = t33242+1.0;
            double t33244 = log(t33243);
            double t33245 = a1p*c*t33231;
            double t33246 = t33245+1.0;
            double t33247 = c0p*t33244*t33246*2.0;
            double t33248 = rho_a[index]-rho_b[index];
            double t33249 = t33248*t33248;
            double t33250 = 1.0/t33230;
            double t33251 = t33250*t33248;
            double t33252 = 1.0/(t33230*t33230*t33230*t33230);
            double t33253 = t33249*t33249;
            double t33254 = t33251+1.0;
            double t33255 = pow(t33254,4.0/3.0);
            double t33256 = -t33251+1.0;
            double t33257 = pow(t33256,4.0/3.0);
            double t33258 = t33255+t33257-2.0;
            double t33259 = c0p*t33203*t33205*2.0;
            double t33260 = gamma_aa[index]*gamma_aa[index];
            double t33261 = gx*gx;
            double t33262 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t33263 = gamma_bb[index]*gamma_bb[index];
            double t33264 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t33265 = b1f*t33190;
            double t33266 = b3f*t33191;
            double t33267 = b4f*t33192*t33193;
            double t33268 = b2f*c*t33188;
            double t33269 = t33265+t33266+t33267+t33268;
            double t33270 = 1.0/t33269;
            double t33271 = t33212*t33270*(1.0/2.0);
            double t33272 = t33271+1.0;
            double t33273 = log(t33272);
            double t33274 = a1f*c*t33188;
            double t33275 = t33274+1.0;
            double t33276 = t33259-c0f*t33273*t33275*2.0;
            double t33277 = t33259-t33211*t33208*t33276;
            double t33278 = gcaa*gcaa;
            double t33279 = b1f*t33215;
            double t33280 = b3f*t33216;
            double t33281 = b4f*t33217*t33192;
            double t33282 = b2f*c*t33213;
            double t33283 = t33280+t33281+t33282+t33279;
            double t33284 = 1.0/t33283;
            double t33285 = t33212*t33284*(1.0/2.0);
            double t33286 = t33285+1.0;
            double t33287 = log(t33286);
            double t33288 = a1f*c*t33213;
            double t33289 = t33288+1.0;
            double t33290 = t33229-c0f*t33287*t33289*2.0;
            double t33291 = t33229-t33211*t33208*t33290;
            functional_[index] = (ccab0+(ccab1*gcab*t33181)/(gcab*t33181+1.0)+(ccab2*t33182*t33187)/(gcab*t33181* \
               2.0+t33182*t33187+1.0))*(rho_b[index]*t33291+rho_a[index]*t33277-t33230*(t33247-t33211*t33252*t33253* \
               t33258*(t33247-c0f*log((t33212*(1.0/2.0))/(b1f*t33233+b3f*t33234+b2f*c*t33231+b4f*t33235*t33192)+1.0) \
               *(a1f*c*t33231+1.0)*2.0)+(Aa*t33211*t33258*log((1.0/2.0)/(Aa*(b1a*t33233+b3a*t33234+b2a*c*t33231+b4a* \
               t33235*t33192))+1.0)*(t33252*t33253-1.0)*(a1a*c*t33231+1.0)*2.0)/d2fz0))-rho_a[index]*t33277*(ccaa0+ \
               (ccaa2*t33260*t33262*t33278)/(gamma_aa[index]*gcaa*t33183*2.0+t33260*t33262*t33278+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t33183)/(gamma_aa[index]*gcaa*t33183+1.0))-rho_b[index]*t33291*(ccaa0+(ccaa2*t33263*t33264*t33278) \
               /(gamma_bb[index]*gcaa*t33185*2.0+t33263*t33264*t33278+1.0)+(ccaa1*gamma_bb[index]*gcaa*t33185)/(gamma_bb[index]* \
               gcaa*t33185+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t33260*t33261*t33262)/(gamma_aa[index]*gx* \
               t33183*2.0+t33260*t33261*t33262+1.0)+(cx1*gamma_aa[index]*gx*t33183)/(gamma_aa[index]*gx*t33183+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t33261*t33263*t33264)/(gamma_bb[index]*gx*t33185*2.0+t33261* \
               t33263*t33264+1.0)+(cx1*gamma_bb[index]*gx*t33185)/(gamma_bb[index]*gx*t33185+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t36303 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36304 = gamma_aa[index]*gamma_aa[index];
            double t36305 = gx*gx;
            double t36306 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36307 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36308 = c*t36307;
            double t36309 = sqrt(t36308);
            double t36310 = pow(t36308,3.0/2.0);
            double t36311 = c*c;
            double t36312 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36313 = 1.0/c0p;
            double t36314 = b1p*t36309;
            double t36315 = b3p*t36310;
            double t36316 = b4p*t36311*t36312;
            double t36317 = b2p*c*t36307;
            double t36318 = t36314+t36315+t36316+t36317;
            double t36319 = 1.0/t36318;
            double t36320 = t36313*t36319*(1.0/2.0);
            double t36321 = t36320+1.0;
            double t36322 = log(t36321);
            double t36323 = a1p*c*t36307;
            double t36324 = t36323+1.0;
            double t36325 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36309+ \
               b3f*t36310+b2f*c*t36307+b4f*t36311*t36312))+1.0)*(a1f*c*t36307+1.0)*2.0-c0p*t36322*t36324*2.0))/(two_13* \
               2.0-2.0)+c0p*t36322*t36324*2.0)*(ccaa0+(ccaa2*t36304*t36306*t36325)/(gamma_aa[index]*gcaa*t36303*2.0+ \
               t36304*t36306*t36325+1.0)+(ccaa1*gamma_aa[index]*gcaa*t36303)/(gamma_aa[index]*gcaa*t36303+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t36304*t36305*t36306)/(gamma_aa[index]*gx*t36303*2.0+t36304*t36305* \
               t36306+1.0)+(cx1*gamma_aa[index]*gx*t36303)/(gamma_aa[index]*gx*t36303+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t35892 = 1.0/pow(rho_b[index],8.0/3.0);
            double t35893 = gamma_bb[index]*gamma_bb[index];
            double t35894 = gx*gx;
            double t35895 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t35896 = 1.0/pow(rho_b[index],1.0/3.0);
            double t35897 = c*t35896;
            double t35898 = sqrt(t35897);
            double t35899 = pow(t35897,3.0/2.0);
            double t35900 = c*c;
            double t35901 = 1.0/pow(rho_b[index],2.0/3.0);
            double t35902 = 1.0/c0p;
            double t35903 = b1p*t35898;
            double t35904 = b3p*t35899;
            double t35905 = b4p*t35900*t35901;
            double t35906 = b2p*c*t35896;
            double t35907 = t35903+t35904+t35905+t35906;
            double t35908 = 1.0/t35907;
            double t35909 = t35902*t35908*(1.0/2.0);
            double t35910 = t35909+1.0;
            double t35911 = log(t35910);
            double t35912 = a1p*c*t35896;
            double t35913 = t35912+1.0;
            double t35914 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t35898+ \
               b3f*t35899+b2f*c*t35896+b4f*t35900*t35901))+1.0)*(a1f*c*t35896+1.0)*2.0-c0p*t35911*t35913*2.0))/(two_13* \
               2.0-2.0)+c0p*t35911*t35913*2.0)*(ccaa0+(ccaa2*t35914*t35893*t35895)/(gamma_bb[index]*gcaa*t35892*2.0+ \
               t35914*t35893*t35895+1.0)+(ccaa1*gamma_bb[index]*gcaa*t35892)/(gamma_bb[index]*gcaa*t35892+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t35893*t35894*t35895)/(gamma_bb[index]*gx*t35892*2.0+t35893*t35894* \
               t35895+1.0)+(cx1*gamma_bb[index]*gx*t35892)/(gamma_bb[index]*gx*t35892+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33293 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33294 = c*t33293;
            double t33295 = sqrt(t33294);
            double t33296 = pow(t33294,3.0/2.0);
            double t33297 = c*c;
            double t33298 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33299 = 1.0/c0p;
            double t33300 = b1p*t33295;
            double t33301 = b3p*t33296;
            double t33302 = b4p*t33297*t33298;
            double t33303 = b2p*c*t33293;
            double t33304 = t33300+t33301+t33302+t33303;
            double t33305 = 1.0/t33304;
            double t33306 = t33305*t33299*(1.0/2.0);
            double t33307 = t33306+1.0;
            double t33308 = log(t33307);
            double t33309 = a1p*c*t33293;
            double t33310 = t33309+1.0;
            double t33311 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33312 = gamma_aa[index]*gamma_aa[index];
            double t33313 = gcaa*gcaa;
            double t33314 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t33317 = gamma_aa[index]*t33311*(1.0/2.0);
            double t33318 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33319 = gamma_bb[index]*t33318*(1.0/2.0);
            double t33315 = t33317+t33319;
            double t33316 = gcab*gcab;
            double t33320 = t33315*t33315;
            double t33321 = rho_a[index]+rho_b[index];
            double t33322 = 1.0/pow(t33321,1.0/3.0);
            double t33323 = c*t33322;
            double t33324 = sqrt(t33323);
            double t33325 = b1p*t33324;
            double t33326 = pow(t33323,3.0/2.0);
            double t33327 = b3p*t33326;
            double t33328 = 1.0/pow(t33321,2.0/3.0);
            double t33329 = b4p*t33328*t33297;
            double t33330 = b2p*c*t33322;
            double t33331 = t33330+t33325+t33327+t33329;
            double t33332 = 1.0/pow(t33321,4.0/3.0);
            double t33333 = two_13*2.0;
            double t33334 = t33333-2.0;
            double t33335 = 1.0/t33334;
            double t33336 = 1.0/c0f;
            double t33337 = 1.0/t33331;
            double t33338 = t33337*t33299*(1.0/2.0);
            double t33339 = t33338+1.0;
            double t33340 = a1p*c*t33322;
            double t33341 = t33340+1.0;
            double t33342 = rho_a[index]-rho_b[index];
            double t33343 = t33342*t33342;
            double t33344 = 1.0/t33321;
            double t33345 = t33342*t33344;
            double t33346 = b1f*t33324;
            double t33347 = b3f*t33326;
            double t33348 = b4f*t33328*t33297;
            double t33349 = b2f*c*t33322;
            double t33350 = t33346+t33347+t33348+t33349;
            double t33351 = 1.0/t33350;
            double t33352 = t33351*t33336*(1.0/2.0);
            double t33353 = t33352+1.0;
            double t33354 = log(t33353);
            double t33355 = a1f*c*t33322;
            double t33356 = t33355+1.0;
            double t33357 = log(t33339);
            double t33367 = c0f*t33354*t33356*2.0;
            double t33368 = c0p*t33341*t33357*2.0;
            double t33358 = t33367-t33368;
            double t33359 = t33345+1.0;
            double t33360 = pow(t33359,4.0/3.0);
            double t33361 = -t33345+1.0;
            double t33362 = pow(t33361,4.0/3.0);
            double t33363 = t33360+t33362-2.0;
            double t33364 = 1.0/(t33321*t33321);
            double t33395 = t33342*t33364;
            double t33365 = t33344-t33395;
            double t33366 = 1.0/(t33321*t33321*t33321*t33321);
            double t33369 = t33343*t33343;
            double t33370 = 1.0/pow(t33321,5.0/3.0);
            double t33371 = 1.0/sqrt(t33323);
            double t33372 = 1.0/t33339;
            double t33373 = 1.0/(t33331*t33331);
            double t33374 = b4p*t33370*t33297*(2.0/3.0);
            double t33375 = b2p*c*t33332*(1.0/3.0);
            double t33376 = b1p*c*t33332*t33371*(1.0/6.0);
            double t33377 = b3p*c*t33332*t33324*(1.0/2.0);
            double t33378 = t33374+t33375+t33376+t33377;
            double t33379 = t33341*t33372*t33373*t33378;
            double t33380 = 1.0/(t33321*t33321*t33321*t33321*t33321);
            double t33381 = 1.0/d2fz0;
            double t33382 = 1.0/Aa;
            double t33383 = b1a*t33324;
            double t33384 = b3a*t33326;
            double t33385 = b4a*t33328*t33297;
            double t33386 = b2a*c*t33322;
            double t33387 = t33383+t33384+t33385+t33386;
            double t33388 = 1.0/t33387;
            double t33389 = t33382*t33388*(1.0/2.0);
            double t33390 = t33389+1.0;
            double t33391 = log(t33390);
            double t33392 = a1a*c*t33322;
            double t33393 = t33392+1.0;
            double t33394 = pow(t33359,1.0/3.0);
            double t33396 = t33365*t33394*(4.0/3.0);
            double t33397 = pow(t33361,1.0/3.0);
            double t33398 = t33396-t33365*t33397*(4.0/3.0);
            double t33399 = t33366*t33369;
            double t33400 = t33399-1.0;
            double t33401 = pow(2.0,1.0/3.0);
            double t33402 = t33401*2.0;
            double t33403 = t33402-2.0;
            double t33404 = a1f*c*t33293;
            double t33405 = t33404+1.0;
            double t33406 = b1f*t33295;
            double t33407 = b3f*t33296;
            double t33408 = b4f*t33297*t33298;
            double t33409 = b2f*c*t33293;
            double t33410 = t33406+t33407+t33408+t33409;
            double t33411 = 1.0/t33410;
            double t33412 = t33411*t33336*(1.0/2.0);
            double t33413 = t33412+1.0;
            double t33414 = 1.0/pow(rho_a[index],4.0/3.0);
            double t33415 = 1.0/pow(rho_a[index],5.0/3.0);
            double t33416 = 1.0/sqrt(t33294);
            double t33417 = log(t33413);
            double t33418 = 1.0/t33307;
            double t33419 = 1.0/(t33304*t33304);
            double t33420 = b4p*t33415*t33297*(2.0/3.0);
            double t33421 = b2p*c*t33414*(1.0/3.0);
            double t33422 = b1p*c*t33414*t33416*(1.0/6.0);
            double t33423 = b3p*c*t33414*t33295*(1.0/2.0);
            double t33424 = t33420+t33421+t33422+t33423;
            double t33425 = t33310*t33424*t33418*t33419;
            double t33426 = c0f*t33405*t33417*2.0;
            double t33427 = c0p*t33310*t33308*2.0;
            double t33428 = t33426-t33427;
            double t33429 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33430 = c*t33429;
            double t33431 = sqrt(t33430);
            double t33432 = pow(t33430,3.0/2.0);
            double t33433 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33434 = b1p*t33431;
            double t33435 = b3p*t33432;
            double t33436 = b4p*t33433*t33297;
            double t33437 = b2p*c*t33429;
            double t33438 = t33434+t33435+t33436+t33437;
            double t33439 = 1.0/t33438;
            double t33440 = t33439*t33299*(1.0/2.0);
            double t33441 = t33440+1.0;
            double t33442 = log(t33441);
            double t33443 = a1p*c*t33429;
            double t33444 = t33443+1.0;
            double t33445 = c0p*t33442*t33444*2.0;
            double t33446 = t33335*t33363*t33366*t33358*t33369;
            double t33447 = Aa*t33400*t33335*t33363*t33381*t33391*t33393*2.0;
            double t33448 = gcab*t33315;
            double t33449 = t33448+1.0;
            double t33450 = 1.0/t33449;
            double t33451 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t33452 = t33320*t33316;
            double t33453 = gcab*t33315*2.0;
            double t33454 = t33452+t33453+1.0;
            double t33455 = 1.0/t33454;
            double t33456 = gx*gx;
            double t33457 = gamma_aa[index]*gx*t33311;
            double t33458 = t33457+1.0;
            double t33459 = 1.0/t33458;
            double t33460 = gamma_aa[index]*gx*t33311*2.0;
            double t33461 = t33312*t33314*t33456;
            double t33462 = t33460+t33461+1.0;
            double t33463 = 1.0/t33462;
            double t33464 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t33465 = 1.0/t33413;
            double t33466 = 1.0/(t33410*t33410);
            double t33467 = b4f*t33415*t33297*(2.0/3.0);
            double t33468 = b2f*c*t33414*(1.0/3.0);
            double t33469 = b1f*c*t33414*t33416*(1.0/6.0);
            double t33470 = b3f*c*t33414*t33295*(1.0/2.0);
            double t33471 = t33470+t33467+t33468+t33469;
            double t33472 = a1f*c*c0f*t33414*t33417*(2.0/3.0);
            double t33473 = a1p*c*c0p*t33414*t33308*(2.0/3.0);
            double t33474 = gamma_aa[index]*gcaa*t33311;
            double t33475 = t33474+1.0;
            double t33476 = 1.0/t33475;
            double t33477 = ccaa1*gamma_aa[index]*gcaa*t33311*t33476;
            double t33478 = gamma_aa[index]*gcaa*t33311*2.0;
            double t33479 = t33312*t33313*t33314;
            double t33480 = t33478+t33479+1.0;
            double t33481 = 1.0/t33480;
            double t33482 = ccaa2*t33312*t33313*t33314*t33481;
            double t33483 = ccaa0+t33482+t33477;
            double t33484 = t33403*t33335*t33428;
            double t33485 = t33427+t33484;
            v_rho_a_[index] = -t33483*(t33427+t33403*t33335*(t33426-c0p*t33310*t33308*2.0))-(ccab0+ccab1*gcab* \
               t33315*t33450+ccab2*t33320*t33316*t33455)*(-t33427+t33446+t33447+t33368+t33321*(t33379-t33335*t33363* \
               t33366*t33369*(t33379-(1.0/(t33350*t33350)*t33356*(b2f*c*t33332*(1.0/3.0)+b4f*t33370*t33297*(2.0/3.0) \
               +b1f*c*t33332*t33371*(1.0/6.0)+b3f*c*t33332*t33324*(1.0/2.0)))/t33353+a1f*c*c0f*t33332*t33354*(2.0/ \
               3.0)-a1p*c*c0p*t33332*t33357*(2.0/3.0))-a1p*c*c0p*t33332*t33357*(2.0/3.0)-t33335*t33380*t33363*t33358* \
               t33369*4.0+t33335*t33366*t33358*t33369*t33398+t33342*t33343*t33335*t33363*t33366*t33358*4.0-Aa*t33335* \
               t33363*t33381*t33391*t33393*(t33380*t33369*4.0-t33342*t33343*t33366*4.0)*2.0+Aa*t33400*t33335*t33381* \
               t33391*t33393*t33398*2.0+(t33400*t33335*t33363*t33381*t33393*1.0/(t33387*t33387)*(b2a*c*t33332*(1.0/ \
               3.0)+b4a*t33370*t33297*(2.0/3.0)+b1a*c*t33332*t33371*(1.0/6.0)+b3a*c*t33332*t33324*(1.0/2.0)))/t33390- \
               Aa*a1a*c*t33400*t33332*t33335*t33363*t33381*t33391*(2.0/3.0))+rho_a[index]*(-t33425+t33473+t33403* \
               t33335*(t33425+t33472-t33405*t33471*t33465*t33466-a1p*c*c0p*t33414*t33308*(2.0/3.0)))-t33403*t33335* \
               t33428)-(rho_a[index]*t33485+rho_b[index]*(t33445-t33403*t33335*(t33445-c0f*log((t33336*(1.0/2.0)) \
               /(b1f*t33431+b3f*t33432+b2f*c*t33429+b4f*t33433*t33297)+1.0)*(a1f*c*t33429+1.0)*2.0))-t33321*(t33446+ \
               t33447+t33368))*(ccab1*gamma_aa[index]*gcab*t33450*t33451*(4.0/3.0)-ccab2*t33320*t33316*1.0/(t33454* \
               t33454)*(gamma_aa[index]*gcab*t33451*(8.0/3.0)+gamma_aa[index]*t33315*t33316*t33451*(8.0/3.0))-ccab1* \
               gamma_aa[index]*t33315*t33316*t33451*1.0/(t33449*t33449)*(4.0/3.0)+ccab2*gamma_aa[index]*t33315*t33316* \
               t33451*t33455*(8.0/3.0))+rho_a[index]*t33485*(ccaa1*gamma_aa[index]*gcaa*t33451*t33476*(8.0/3.0)+ccaa2* \
               t33312*t33313*t33481*t33464*(1.6E1/3.0)-ccaa1*t33312*t33313*t33464*1.0/(t33475*t33475)*(8.0/3.0)-ccaa2* \
               t33312*t33313*t33314*1.0/(t33480*t33480)*(gamma_aa[index]*gcaa*t33451*(1.6E1/3.0)+t33312*t33313*t33464* \
               (1.6E1/3.0)))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t33311*t33459+cx2*t33312*t33314* \
               t33463*t33456)*(4.0/3.0)+rho_a[index]*t33483*(-t33425+t33473+t33403*t33335*(t33425+t33472-t33473-t33405* \
               t33471*t33465*t33466))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t33451*t33459*(8.0/3.0) \
               +cx2*t33312*t33463*t33464*t33456*(1.6E1/3.0)-cx1*t33312*t33464*t33456*1.0/(t33458*t33458)*(8.0/3.0) \
               -cx2*t33312*t33314*1.0/(t33462*t33462)*t33456*(gamma_aa[index]*gx*t33451*(1.6E1/3.0)+t33312*t33464* \
               t33456*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            double t36327 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36328 = c*t36327;
            double t36329 = sqrt(t36328);
            double t36330 = pow(t36328,3.0/2.0);
            double t36331 = c*c;
            double t36332 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36333 = 1.0/c0p;
            double t36334 = b1p*t36329;
            double t36335 = b3p*t36330;
            double t36336 = b4p*t36331*t36332;
            double t36337 = b2p*c*t36327;
            double t36338 = t36334+t36335+t36336+t36337;
            double t36339 = 1.0/t36338;
            double t36340 = t36333*t36339*(1.0/2.0);
            double t36341 = t36340+1.0;
            double t36342 = log(t36341);
            double t36343 = a1p*c*t36327;
            double t36344 = t36343+1.0;
            double t36345 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36346 = gamma_aa[index]*gamma_aa[index];
            double t36347 = gcaa*gcaa;
            double t36348 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36349 = gx*gx;
            double t36350 = gamma_aa[index]*gx*t36345;
            double t36351 = t36350+1.0;
            double t36352 = 1.0/t36351;
            double t36353 = gamma_aa[index]*gx*t36345*2.0;
            double t36354 = t36346*t36348*t36349;
            double t36355 = t36353+t36354+1.0;
            double t36356 = 1.0/t36355;
            double t36357 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36358 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36359 = pow(2.0,1.0/3.0);
            double t36360 = t36359*2.0;
            double t36361 = t36360-2.0;
            double t36362 = two_13*2.0;
            double t36363 = t36362-2.0;
            double t36364 = 1.0/t36363;
            double t36365 = a1f*c*t36327;
            double t36366 = t36365+1.0;
            double t36367 = 1.0/c0f;
            double t36368 = b1f*t36329;
            double t36369 = b3f*t36330;
            double t36370 = b4f*t36331*t36332;
            double t36371 = b2f*c*t36327;
            double t36372 = t36370+t36371+t36368+t36369;
            double t36373 = 1.0/t36372;
            double t36374 = t36373*t36367*(1.0/2.0);
            double t36375 = t36374+1.0;
            double t36376 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36377 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36378 = 1.0/sqrt(t36328);
            double t36379 = log(t36375);
            double t36380 = 1.0/t36341;
            double t36381 = 1.0/(t36338*t36338);
            double t36382 = b4p*t36331*t36377*(2.0/3.0);
            double t36383 = b2p*c*t36376*(1.0/3.0);
            double t36384 = b1p*c*t36376*t36378*(1.0/6.0);
            double t36385 = b3p*c*t36329*t36376*(1.0/2.0);
            double t36386 = t36382+t36383+t36384+t36385;
            double t36387 = t36344*t36380*t36381*t36386;
            double t36388 = gamma_aa[index]*gcaa*t36345;
            double t36389 = t36388+1.0;
            double t36390 = 1.0/t36389;
            double t36391 = ccaa1*gamma_aa[index]*gcaa*t36345*t36390;
            double t36392 = gamma_aa[index]*gcaa*t36345*2.0;
            double t36393 = t36346*t36347*t36348;
            double t36394 = t36392+t36393+1.0;
            double t36395 = 1.0/t36394;
            double t36396 = ccaa2*t36346*t36347*t36348*t36395;
            double t36397 = ccaa0+t36391+t36396;
            double t36398 = c0f*t36366*t36379*2.0;
            double t36399 = c0p*t36342*t36344*2.0;
            v_rho_a_[index] = -t36397*(t36399+t36361*t36364*(t36398-c0p*t36342*t36344*2.0))+rho_a[index]*t36397* \
               (-t36387+t36361*t36364*(t36387-(1.0/(t36372*t36372)*t36366*(b2f*c*t36376*(1.0/3.0)+b4f*t36331*t36377* \
               (2.0/3.0)+b1f*c*t36376*t36378*(1.0/6.0)+b3f*c*t36329*t36376*(1.0/2.0)))/t36375+a1f*c*c0f*t36376*t36379* \
               (2.0/3.0)-a1p*c*c0p*t36342*t36376*(2.0/3.0))+a1p*c*c0p*t36342*t36376*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t36352*t36345+cx2*t36346*t36356*t36348*t36349)*(4.0/3.0)+rho_a[index]* \
               (t36399+t36361*t36364*(t36398-t36399))*(ccaa1*gamma_aa[index]*gcaa*t36390*t36358*(8.0/3.0)+ccaa2*t36346* \
               t36347*t36357*t36395*(1.6E1/3.0)-ccaa1*t36346*t36347*t36357*1.0/(t36389*t36389)*(8.0/3.0)-ccaa2*t36346* \
               t36347*t36348*1.0/(t36394*t36394)*(gamma_aa[index]*gcaa*t36358*(1.6E1/3.0)+t36346*t36347*t36357*(1.6E1/ \
               3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t36352*t36358*(8.0/3.0)+cx2*t36346*t36356* \
               t36357*t36349*(1.6E1/3.0)-cx1*1.0/(t36351*t36351)*t36346*t36357*t36349*(8.0/3.0)-cx2*t36346*1.0/(t36355* \
               t36355)*t36348*t36349*(gamma_aa[index]*gx*t36358*(1.6E1/3.0)+t36346*t36357*t36349*(1.6E1/3.0)));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33487 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33488 = c*t33487;
            double t33489 = sqrt(t33488);
            double t33490 = pow(t33488,3.0/2.0);
            double t33491 = c*c;
            double t33492 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33493 = 1.0/c0p;
            double t33494 = b1p*t33489;
            double t33495 = b3p*t33490;
            double t33496 = b4p*t33491*t33492;
            double t33497 = b2p*c*t33487;
            double t33498 = t33494+t33495+t33496+t33497;
            double t33499 = 1.0/t33498;
            double t33500 = t33493*t33499*(1.0/2.0);
            double t33501 = t33500+1.0;
            double t33502 = log(t33501);
            double t33503 = a1p*c*t33487;
            double t33504 = t33503+1.0;
            double t33505 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33506 = gamma_bb[index]*gamma_bb[index];
            double t33507 = gcaa*gcaa;
            double t33508 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t33511 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33512 = gamma_aa[index]*t33511*(1.0/2.0);
            double t33513 = gamma_bb[index]*t33505*(1.0/2.0);
            double t33509 = t33512+t33513;
            double t33510 = gcab*gcab;
            double t33514 = t33509*t33509;
            double t33515 = rho_a[index]+rho_b[index];
            double t33516 = 1.0/pow(t33515,1.0/3.0);
            double t33517 = c*t33516;
            double t33518 = sqrt(t33517);
            double t33519 = b1p*t33518;
            double t33520 = pow(t33517,3.0/2.0);
            double t33521 = b3p*t33520;
            double t33522 = 1.0/pow(t33515,2.0/3.0);
            double t33523 = b4p*t33522*t33491;
            double t33524 = b2p*c*t33516;
            double t33525 = t33521+t33523+t33524+t33519;
            double t33526 = 1.0/pow(t33515,4.0/3.0);
            double t33527 = two_13*2.0;
            double t33528 = t33527-2.0;
            double t33529 = 1.0/t33528;
            double t33530 = 1.0/c0f;
            double t33531 = 1.0/t33525;
            double t33532 = t33531*t33493*(1.0/2.0);
            double t33533 = t33532+1.0;
            double t33534 = a1p*c*t33516;
            double t33535 = t33534+1.0;
            double t33536 = rho_a[index]-rho_b[index];
            double t33537 = t33536*t33536;
            double t33538 = 1.0/t33515;
            double t33539 = t33536*t33538;
            double t33540 = b1f*t33518;
            double t33541 = b3f*t33520;
            double t33542 = b4f*t33522*t33491;
            double t33543 = b2f*c*t33516;
            double t33544 = t33540+t33541+t33542+t33543;
            double t33545 = 1.0/t33544;
            double t33546 = t33530*t33545*(1.0/2.0);
            double t33547 = t33546+1.0;
            double t33548 = log(t33547);
            double t33549 = a1f*c*t33516;
            double t33550 = t33549+1.0;
            double t33551 = log(t33533);
            double t33562 = c0f*t33550*t33548*2.0;
            double t33563 = c0p*t33551*t33535*2.0;
            double t33552 = t33562-t33563;
            double t33553 = t33539+1.0;
            double t33554 = pow(t33553,4.0/3.0);
            double t33555 = -t33539+1.0;
            double t33556 = pow(t33555,4.0/3.0);
            double t33557 = t33554+t33556-2.0;
            double t33558 = 1.0/(t33515*t33515);
            double t33559 = t33536*t33558;
            double t33560 = t33538+t33559;
            double t33561 = 1.0/(t33515*t33515*t33515*t33515);
            double t33564 = t33537*t33537;
            double t33565 = 1.0/pow(t33515,5.0/3.0);
            double t33566 = 1.0/sqrt(t33517);
            double t33567 = 1.0/t33533;
            double t33568 = 1.0/(t33525*t33525);
            double t33569 = b4p*t33491*t33565*(2.0/3.0);
            double t33570 = b2p*c*t33526*(1.0/3.0);
            double t33571 = b1p*c*t33526*t33566*(1.0/6.0);
            double t33572 = b3p*c*t33526*t33518*(1.0/2.0);
            double t33573 = t33570+t33571+t33572+t33569;
            double t33574 = 1.0/(t33515*t33515*t33515*t33515*t33515);
            double t33575 = 1.0/d2fz0;
            double t33576 = 1.0/Aa;
            double t33577 = b1a*t33518;
            double t33578 = b3a*t33520;
            double t33579 = b4a*t33522*t33491;
            double t33580 = b2a*c*t33516;
            double t33581 = t33580+t33577+t33578+t33579;
            double t33582 = 1.0/t33581;
            double t33583 = t33582*t33576*(1.0/2.0);
            double t33584 = t33583+1.0;
            double t33585 = log(t33584);
            double t33586 = a1a*c*t33516;
            double t33587 = t33586+1.0;
            double t33588 = pow(t33553,1.0/3.0);
            double t33589 = t33560*t33588*(4.0/3.0);
            double t33590 = pow(t33555,1.0/3.0);
            double t33591 = t33589-t33560*t33590*(4.0/3.0);
            double t33592 = t33561*t33564;
            double t33593 = t33592-1.0;
            double t33594 = pow(2.0,1.0/3.0);
            double t33595 = t33594*2.0;
            double t33596 = t33595-2.0;
            double t33597 = a1f*c*t33487;
            double t33598 = t33597+1.0;
            double t33599 = b1f*t33489;
            double t33600 = b3f*t33490;
            double t33601 = b4f*t33491*t33492;
            double t33602 = b2f*c*t33487;
            double t33603 = t33600+t33601+t33602+t33599;
            double t33604 = 1.0/t33603;
            double t33605 = t33530*t33604*(1.0/2.0);
            double t33606 = t33605+1.0;
            double t33607 = 1.0/pow(rho_b[index],4.0/3.0);
            double t33608 = 1.0/pow(rho_b[index],5.0/3.0);
            double t33609 = 1.0/sqrt(t33488);
            double t33610 = log(t33606);
            double t33611 = 1.0/t33501;
            double t33612 = 1.0/(t33498*t33498);
            double t33613 = b4p*t33491*t33608*(2.0/3.0);
            double t33614 = b2p*c*t33607*(1.0/3.0);
            double t33615 = b1p*c*t33607*t33609*(1.0/6.0);
            double t33616 = b3p*c*t33607*t33489*(1.0/2.0);
            double t33617 = t33613+t33614+t33615+t33616;
            double t33618 = t33611*t33504*t33612*t33617;
            double t33619 = c0f*t33610*t33598*2.0;
            double t33620 = c0p*t33502*t33504*2.0;
            double t33621 = a1p*c*c0p*t33551*t33526*(2.0/3.0);
            double t33622 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33623 = c*t33622;
            double t33624 = sqrt(t33623);
            double t33625 = pow(t33623,3.0/2.0);
            double t33626 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33627 = b1p*t33624;
            double t33628 = b3p*t33625;
            double t33629 = b4p*t33491*t33626;
            double t33630 = b2p*c*t33622;
            double t33631 = t33630+t33627+t33628+t33629;
            double t33632 = 1.0/t33631;
            double t33633 = t33632*t33493*(1.0/2.0);
            double t33634 = t33633+1.0;
            double t33635 = log(t33634);
            double t33636 = a1p*c*t33622;
            double t33637 = t33636+1.0;
            double t33638 = c0p*t33635*t33637*2.0;
            double t33639 = t33620-t33619;
            double t33640 = t33529*t33639*t33596;
            double t33641 = t33552*t33561*t33564*t33529*t33557;
            double t33642 = Aa*t33529*t33557*t33575*t33593*t33585*t33587*2.0;
            double t33643 = gcab*t33509;
            double t33644 = t33643+1.0;
            double t33645 = 1.0/t33644;
            double t33646 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t33647 = t33510*t33514;
            double t33648 = gcab*t33509*2.0;
            double t33649 = t33647+t33648+1.0;
            double t33650 = 1.0/t33649;
            double t33651 = gx*gx;
            double t33652 = gamma_bb[index]*gx*t33505;
            double t33653 = t33652+1.0;
            double t33654 = 1.0/t33653;
            double t33655 = gamma_bb[index]*gx*t33505*2.0;
            double t33656 = t33506*t33651*t33508;
            double t33657 = t33655+t33656+1.0;
            double t33658 = 1.0/t33657;
            double t33659 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t33660 = 1.0/t33606;
            double t33661 = 1.0/(t33603*t33603);
            double t33662 = b4f*t33491*t33608*(2.0/3.0);
            double t33663 = b2f*c*t33607*(1.0/3.0);
            double t33664 = b1f*c*t33607*t33609*(1.0/6.0);
            double t33665 = b3f*c*t33607*t33489*(1.0/2.0);
            double t33666 = t33662+t33663+t33664+t33665;
            double t33667 = a1f*c*c0f*t33610*t33607*(2.0/3.0);
            double t33668 = a1p*c*c0p*t33502*t33607*(2.0/3.0);
            double t33669 = gamma_bb[index]*gcaa*t33505;
            double t33670 = t33669+1.0;
            double t33671 = 1.0/t33670;
            double t33672 = ccaa1*gamma_bb[index]*gcaa*t33505*t33671;
            double t33673 = gamma_bb[index]*gcaa*t33505*2.0;
            double t33674 = t33506*t33507*t33508;
            double t33675 = t33673+t33674+1.0;
            double t33676 = 1.0/t33675;
            double t33677 = ccaa2*t33506*t33507*t33508*t33676;
            double t33678 = ccaa0+t33672+t33677;
            double t33679 = t33620-t33640;
            v_rho_b_[index] = -t33678*(t33620+t33529*t33596*(t33619-c0p*t33502*t33504*2.0))-(ccab0+ccab1*gcab* \
               t33509*t33645+ccab2*t33510*t33514*t33650)*(-t33620+t33640+t33641+t33642+t33563+rho_b[index]*(-t33618+ \
               t33668+t33529*t33596*(t33618+t33667-t33660*t33661*t33666*t33598-a1p*c*c0p*t33502*t33607*(2.0/3.0)) \
               )-t33515*(t33621-t33535*t33573*t33567*t33568+t33552*t33561*t33564*t33591*t33529+t33552*t33564*t33529* \
               t33574*t33557*4.0-t33561*t33564*t33529*t33557*(t33621-t33535*t33573*t33567*t33568+(t33550*1.0/(t33544* \
               t33544)*(b2f*c*t33526*(1.0/3.0)+b4f*t33491*t33565*(2.0/3.0)+b1f*c*t33526*t33566*(1.0/6.0)+b3f*c*t33526* \
               t33518*(1.0/2.0)))/t33547-a1f*c*c0f*t33526*t33548*(2.0/3.0))+t33552*t33561*t33536*t33537*t33529*t33557* \
               4.0+Aa*t33529*t33557*t33575*t33585*t33587*(t33564*t33574*4.0+t33561*t33536*t33537*4.0)*2.0+Aa*t33591* \
               t33529*t33575*t33593*t33585*t33587*2.0-(1.0/(t33581*t33581)*t33529*t33557*t33575*t33593*t33587*(b2a* \
               c*t33526*(1.0/3.0)+b4a*t33491*t33565*(2.0/3.0)+b1a*c*t33526*t33566*(1.0/6.0)+b3a*c*t33526*t33518*(1.0/ \
               2.0)))/t33584+Aa*a1a*c*t33526*t33529*t33557*t33575*t33593*t33585*(2.0/3.0)))-(rho_b[index]*t33679+ \
               rho_a[index]*(t33638-t33529*t33596*(t33638-c0f*log((t33530*(1.0/2.0))/(b1f*t33624+b3f*t33625+b2f*c* \
               t33622+b4f*t33491*t33626)+1.0)*(a1f*c*t33622+1.0)*2.0))-t33515*(t33641+t33642+t33563))*(ccab1*gamma_bb[index]* \
               gcab*t33645*t33646*(4.0/3.0)-ccab2*t33510*t33514*1.0/(t33649*t33649)*(gamma_bb[index]*gcab*t33646* \
               (8.0/3.0)+gamma_bb[index]*t33510*t33509*t33646*(8.0/3.0))-ccab1*gamma_bb[index]*t33510*t33509*1.0/ \
               (t33644*t33644)*t33646*(4.0/3.0)+ccab2*gamma_bb[index]*t33510*t33650*t33509*t33646*(8.0/3.0))+rho_b[index]* \
               t33679*(ccaa1*gamma_bb[index]*gcaa*t33671*t33646*(8.0/3.0)+ccaa2*t33506*t33507*t33676*t33659*(1.6E1/ \
               3.0)-ccaa1*t33506*t33507*1.0/(t33670*t33670)*t33659*(8.0/3.0)-ccaa2*t33506*t33507*t33508*1.0/(t33675* \
               t33675)*(gamma_bb[index]*gcaa*t33646*(1.6E1/3.0)+t33506*t33507*t33659*(1.6E1/3.0)))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t33505*t33654+cx2*t33506*t33651*t33508*t33658)*(4.0/3.0)+rho_b[index]* \
               t33678*(-t33618+t33668+t33529*t33596*(t33618+t33667-t33668-t33660*t33661*t33666*t33598))-c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t33654*t33646*(8.0/3.0)+cx2*t33506*t33651*t33658*t33659*(1.6E1/3.0)-cx1* \
               t33506*t33651*1.0/(t33653*t33653)*t33659*(8.0/3.0)-cx2*t33506*t33651*t33508*1.0/(t33657*t33657)*(gamma_bb[index]* \
               gx*t33646*(1.6E1/3.0)+t33506*t33651*t33659*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t35917 = 1.0/pow(rho_b[index],1.0/3.0);
            double t35918 = c*t35917;
            double t35919 = sqrt(t35918);
            double t35920 = pow(t35918,3.0/2.0);
            double t35921 = c*c;
            double t35922 = 1.0/pow(rho_b[index],2.0/3.0);
            double t35923 = 1.0/c0p;
            double t35924 = b1p*t35919;
            double t35925 = b3p*t35920;
            double t35926 = b4p*t35921*t35922;
            double t35927 = b2p*c*t35917;
            double t35928 = t35924+t35925+t35926+t35927;
            double t35929 = 1.0/t35928;
            double t35930 = t35923*t35929*(1.0/2.0);
            double t35931 = t35930+1.0;
            double t35932 = log(t35931);
            double t35933 = a1p*c*t35917;
            double t35934 = t35933+1.0;
            double t35935 = 1.0/pow(rho_b[index],8.0/3.0);
            double t35936 = gamma_bb[index]*gamma_bb[index];
            double t35937 = gcaa*gcaa;
            double t35938 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t35939 = gx*gx;
            double t35940 = gamma_bb[index]*gx*t35935;
            double t35941 = t35940+1.0;
            double t35942 = 1.0/t35941;
            double t35943 = gamma_bb[index]*gx*t35935*2.0;
            double t35944 = t35936*t35938*t35939;
            double t35945 = t35943+t35944+1.0;
            double t35946 = 1.0/t35945;
            double t35947 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t35948 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t35949 = pow(2.0,1.0/3.0);
            double t35950 = t35949*2.0;
            double t35951 = t35950-2.0;
            double t35952 = two_13*2.0;
            double t35953 = t35952-2.0;
            double t35954 = 1.0/t35953;
            double t35955 = a1f*c*t35917;
            double t35956 = t35955+1.0;
            double t35957 = 1.0/c0f;
            double t35958 = b1f*t35919;
            double t35959 = b3f*t35920;
            double t35960 = b4f*t35921*t35922;
            double t35961 = b2f*c*t35917;
            double t35962 = t35960+t35961+t35958+t35959;
            double t35963 = 1.0/t35962;
            double t35964 = t35963*t35957*(1.0/2.0);
            double t35965 = t35964+1.0;
            double t35966 = 1.0/pow(rho_b[index],4.0/3.0);
            double t35967 = 1.0/pow(rho_b[index],5.0/3.0);
            double t35968 = 1.0/sqrt(t35918);
            double t35969 = log(t35965);
            double t35970 = 1.0/t35931;
            double t35971 = 1.0/(t35928*t35928);
            double t35972 = b4p*t35921*t35967*(2.0/3.0);
            double t35973 = b2p*c*t35966*(1.0/3.0);
            double t35974 = b1p*c*t35966*t35968*(1.0/6.0);
            double t35975 = b3p*c*t35919*t35966*(1.0/2.0);
            double t35976 = t35972+t35973+t35974+t35975;
            double t35977 = t35934*t35970*t35971*t35976;
            double t35978 = gamma_bb[index]*gcaa*t35935;
            double t35979 = t35978+1.0;
            double t35980 = 1.0/t35979;
            double t35981 = ccaa1*gamma_bb[index]*gcaa*t35935*t35980;
            double t35982 = gamma_bb[index]*gcaa*t35935*2.0;
            double t35983 = t35936*t35937*t35938;
            double t35984 = t35982+t35983+1.0;
            double t35985 = 1.0/t35984;
            double t35986 = ccaa2*t35936*t35937*t35938*t35985;
            double t35987 = ccaa0+t35981+t35986;
            double t35988 = c0f*t35956*t35969*2.0;
            double t35989 = c0p*t35932*t35934*2.0;
            v_rho_b_[index] = -t35987*(t35989+t35951*t35954*(t35988-c0p*t35932*t35934*2.0))+rho_b[index]*t35987* \
               (-t35977+t35951*t35954*(t35977-(1.0/(t35962*t35962)*t35956*(b2f*c*t35966*(1.0/3.0)+b4f*t35921*t35967* \
               (2.0/3.0)+b1f*c*t35966*t35968*(1.0/6.0)+b3f*c*t35919*t35966*(1.0/2.0)))/t35965+a1f*c*c0f*t35966*t35969* \
               (2.0/3.0)-a1p*c*c0p*t35932*t35966*(2.0/3.0))+a1p*c*c0p*t35932*t35966*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t35942*t35935+cx2*t35936*t35946*t35938*t35939)*(4.0/3.0)+rho_b[index]* \
               (t35989+t35951*t35954*(t35988-t35989))*(ccaa1*gamma_bb[index]*gcaa*t35980*t35948*(8.0/3.0)+ccaa2*t35936* \
               t35937*t35947*t35985*(1.6E1/3.0)-ccaa1*t35936*t35937*t35947*1.0/(t35979*t35979)*(8.0/3.0)-ccaa2*t35936* \
               t35937*t35938*1.0/(t35984*t35984)*(gamma_bb[index]*gcaa*t35948*(1.6E1/3.0)+t35936*t35937*t35947*(1.6E1/ \
               3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t35942*t35948*(8.0/3.0)+cx2*t35936*t35946* \
               t35947*t35939*(1.6E1/3.0)-cx1*1.0/(t35941*t35941)*t35936*t35947*t35939*(8.0/3.0)-cx2*t35936*1.0/(t35945* \
               t35945)*t35938*t35939*(gamma_bb[index]*gx*t35948*(1.6E1/3.0)+t35936*t35947*t35939*(1.6E1/3.0)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t33681 = 1.0/pow(rho_a[index],1.0/3.0);
                double t33682 = c*t33681;
                double t33683 = sqrt(t33682);
                double t33684 = pow(t33682,3.0/2.0);
                double t33685 = c*c;
                double t33686 = 1.0/pow(rho_a[index],2.0/3.0);
                double t33687 = 1.0/c0p;
                double t33688 = b1p*t33683;
                double t33689 = b3p*t33684;
                double t33690 = b4p*t33685*t33686;
                double t33691 = b2p*c*t33681;
                double t33692 = t33690+t33691+t33688+t33689;
                double t33693 = 1.0/t33692;
                double t33694 = t33693*t33687*(1.0/2.0);
                double t33695 = t33694+1.0;
                double t33696 = log(t33695);
                double t33697 = a1p*c*t33681;
                double t33698 = t33697+1.0;
                double t33699 = pow(2.0,1.0/3.0);
                double t33700 = t33699*2.0;
                double t33701 = t33700-2.0;
                double t33702 = two_13*2.0;
                double t33703 = t33702-2.0;
                double t33704 = 1.0/t33703;
                double t33705 = 1.0/c0f;
                double t33706 = 1.0/pow(rho_b[index],1.0/3.0);
                double t33707 = c*t33706;
                double t33708 = sqrt(t33707);
                double t33709 = pow(t33707,3.0/2.0);
                double t33710 = 1.0/pow(rho_b[index],2.0/3.0);
                double t33711 = b1p*t33708;
                double t33712 = b3p*t33709;
                double t33713 = b4p*t33710*t33685;
                double t33714 = b2p*c*t33706;
                double t33715 = t33711+t33712+t33713+t33714;
                double t33716 = 1.0/t33715;
                double t33717 = t33716*t33687*(1.0/2.0);
                double t33718 = t33717+1.0;
                double t33719 = log(t33718);
                double t33720 = a1p*c*t33706;
                double t33721 = t33720+1.0;
                double t33722 = c0p*t33721*t33719*2.0;
                double t33723 = rho_a[index]+rho_b[index];
                double t33724 = 1.0/pow(t33723,1.0/3.0);
                double t33725 = c*t33724;
                double t33726 = sqrt(t33725);
                double t33727 = pow(t33725,3.0/2.0);
                double t33728 = 1.0/pow(t33723,2.0/3.0);
                double t33729 = b1p*t33726;
                double t33730 = b3p*t33727;
                double t33731 = b4p*t33728*t33685;
                double t33732 = b2p*c*t33724;
                double t33733 = t33730+t33731+t33732+t33729;
                double t33734 = 1.0/t33733;
                double t33735 = t33734*t33687*(1.0/2.0);
                double t33736 = t33735+1.0;
                double t33737 = log(t33736);
                double t33738 = a1p*c*t33724;
                double t33739 = t33738+1.0;
                double t33740 = c0p*t33737*t33739*2.0;
                double t33741 = rho_a[index]-rho_b[index];
                double t33742 = t33741*t33741;
                double t33743 = 1.0/t33723;
                double t33744 = t33741*t33743;
                double t33745 = 1.0/(t33723*t33723*t33723*t33723);
                double t33746 = t33742*t33742;
                double t33747 = t33744+1.0;
                double t33748 = pow(t33747,4.0/3.0);
                double t33749 = -t33744+1.0;
                double t33750 = pow(t33749,4.0/3.0);
                double t33751 = t33750+t33748-2.0;
                double t33752 = 1.0/pow(rho_a[index],8.0/3.0);
                double t33753 = gamma_aa[index]*t33752*(1.0/2.0);
                double t33754 = 1.0/pow(rho_b[index],8.0/3.0);
                double t33755 = gamma_bb[index]*t33754*(1.0/2.0);
                double t33756 = t33753+t33755;
                double t33757 = gcab*t33756;
                double t33758 = t33757+1.0;
                double t33759 = gcab*gcab;
                double t33760 = t33756*t33756;
                double t33761 = t33760*t33759;
                double t33762 = gcab*t33756*2.0;
                double t33763 = t33761+t33762+1.0;
                double t33764 = c0p*t33696*t33698*2.0;
                double t33765 = gx*gx;
                double t33766 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t33767 = gamma_aa[index]*gx*t33752;
                double t33768 = t33767+1.0;
                double t33769 = gamma_aa[index]*gamma_aa[index];
                double t33770 = gamma_aa[index]*gx*t33752*2.0;
                double t33771 = t33765*t33766*t33769;
                double t33772 = t33770+t33771+1.0;
                double t33773 = b1f*t33683;
                double t33774 = b3f*t33684;
                double t33775 = b4f*t33685*t33686;
                double t33776 = b2f*c*t33681;
                double t33777 = t33773+t33774+t33775+t33776;
                double t33778 = 1.0/t33777;
                double t33779 = t33705*t33778*(1.0/2.0);
                double t33780 = t33779+1.0;
                double t33781 = log(t33780);
                double t33782 = a1f*c*t33681;
                double t33783 = t33782+1.0;
                double t33784 = t33764-c0f*t33781*t33783*2.0;
                double t33785 = t33764-t33701*t33704*t33784;
                double t33786 = gcaa*gcaa;
                double t33787 = gamma_aa[index]*gcaa*t33752;
                double t33788 = t33787+1.0;
                double t33789 = gamma_aa[index]*gcaa*t33752*2.0;
                double t33790 = t33766*t33786*t33769;
                double t33791 = t33790+t33789+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t33785+rho_b[index]*(t33722-t33701*t33704*(t33722-c0f*log((t33705* \
                   (1.0/2.0))/(b1f*t33708+b3f*t33709+b2f*c*t33706+b4f*t33710*t33685)+1.0)*(a1f*c*t33706+1.0)*2.0))-t33723* \
                   (t33740-t33704*t33751*t33745*t33746*(t33740-c0f*log((t33705*(1.0/2.0))/(b1f*t33726+b3f*t33727+b2f* \
                   c*t33724+b4f*t33728*t33685)+1.0)*(a1f*c*t33724+1.0)*2.0)+(Aa*t33704*t33751*log((1.0/2.0)/(Aa*(b1a* \
                   t33726+b3a*t33727+b2a*c*t33724+b4a*t33728*t33685))+1.0)*(t33745*t33746-1.0)*(a1a*c*t33724+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t33752*(1.0/2.0))/t33758-ccab2*t33760*1.0/(t33763*t33763)*t33759*(gcab*t33752+ \
                   t33752*t33756*t33759)+(ccab2*t33752*t33756*t33759)/t33763-ccab1*t33752*t33756*1.0/(t33758*t33758)* \
                   t33759*(1.0/2.0))-rho_a[index]*t33785*((ccaa1*gcaa*t33752)/t33788+(ccaa2*gamma_aa[index]*t33766*t33786* \
                   2.0)/t33791-ccaa1*gamma_aa[index]*t33766*t33786*1.0/(t33788*t33788)-ccaa2*1.0/(t33791*t33791)*t33766* \
                   t33786*t33769*(gcaa*t33752*2.0+gamma_aa[index]*t33766*t33786*2.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t33752)/t33768-cx1*gamma_aa[index]*t33765*t33766*1.0/(t33768*t33768)+(cx2*gamma_aa[index]*t33765* \
                   t33766*2.0)/t33772-cx2*1.0/(t33772*t33772)*t33765*t33766*t33769*(gx*t33752*2.0+gamma_aa[index]*t33765* \
                   t33766*2.0));
            } else if (rho_a[index] > cutoff_) {
                double t36402 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36403 = gx*gx;
                double t36404 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36405 = gamma_aa[index]*gx*t36402;
                double t36406 = t36405+1.0;
                double t36407 = gamma_aa[index]*gamma_aa[index];
                double t36408 = gamma_aa[index]*gx*t36402*2.0;
                double t36409 = t36403*t36404*t36407;
                double t36410 = t36408+t36409+1.0;
                double t36411 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36412 = c*t36411;
                double t36413 = sqrt(t36412);
                double t36414 = pow(t36412,3.0/2.0);
                double t36415 = c*c;
                double t36416 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36417 = 1.0/c0p;
                double t36418 = b1p*t36413;
                double t36419 = b3p*t36414;
                double t36420 = b4p*t36415*t36416;
                double t36421 = b2p*c*t36411;
                double t36422 = t36420+t36421+t36418+t36419;
                double t36423 = 1.0/t36422;
                double t36424 = t36423*t36417*(1.0/2.0);
                double t36425 = t36424+1.0;
                double t36426 = log(t36425);
                double t36427 = a1p*c*t36411;
                double t36428 = t36427+1.0;
                double t36429 = gcaa*gcaa;
                double t36430 = gamma_aa[index]*gcaa*t36402;
                double t36431 = t36430+1.0;
                double t36432 = gamma_aa[index]*gcaa*t36402*2.0;
                double t36433 = t36404*t36407*t36429;
                double t36434 = t36432+t36433+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t36402)/t36406-cx1*gamma_aa[index]*t36403* \
                   t36404*1.0/(t36406*t36406)+(cx2*gamma_aa[index]*t36403*t36404*2.0)/t36410-cx2*1.0/(t36410*t36410)* \
                   t36403*t36404*t36407*(gx*t36402*2.0+gamma_aa[index]*t36403*t36404*2.0))-rho_a[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36413+b3f*t36414+b2f*c*t36411+b4f*t36415*t36416))+1.0) \
                   *(a1f*c*t36411+1.0)*2.0-c0p*t36426*t36428*2.0))/(two_13*2.0-2.0)+c0p*t36426*t36428*2.0)*((ccaa1*gcaa* \
                   t36402)/t36431-ccaa1*gamma_aa[index]*t36404*1.0/(t36431*t36431)*t36429+(ccaa2*gamma_aa[index]*t36404* \
                   t36429*2.0)/t36434-ccaa2*t36404*t36407*1.0/(t36434*t36434)*t36429*(gcaa*t36402*2.0+gamma_aa[index]* \
                   t36404*t36429*2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t33794 = 1.0/pow(rho_a[index],1.0/3.0);
                double t33795 = c*t33794;
                double t33796 = sqrt(t33795);
                double t33797 = pow(t33795,3.0/2.0);
                double t33798 = c*c;
                double t33799 = 1.0/pow(rho_a[index],2.0/3.0);
                double t33800 = 1.0/c0p;
                double t33801 = b1p*t33796;
                double t33802 = b3p*t33797;
                double t33803 = b4p*t33798*t33799;
                double t33804 = b2p*c*t33794;
                double t33805 = t33801+t33802+t33803+t33804;
                double t33806 = 1.0/t33805;
                double t33807 = t33800*t33806*(1.0/2.0);
                double t33808 = t33807+1.0;
                double t33809 = log(t33808);
                double t33810 = a1p*c*t33794;
                double t33811 = t33810+1.0;
                double t33812 = pow(2.0,1.0/3.0);
                double t33813 = t33812*2.0;
                double t33814 = t33813-2.0;
                double t33815 = two_13*2.0;
                double t33816 = t33815-2.0;
                double t33817 = 1.0/t33816;
                double t33818 = 1.0/c0f;
                double t33819 = 1.0/pow(rho_b[index],1.0/3.0);
                double t33820 = c*t33819;
                double t33821 = sqrt(t33820);
                double t33822 = pow(t33820,3.0/2.0);
                double t33823 = 1.0/pow(rho_b[index],2.0/3.0);
                double t33824 = b1p*t33821;
                double t33825 = b3p*t33822;
                double t33826 = b4p*t33823*t33798;
                double t33827 = b2p*c*t33819;
                double t33828 = t33824+t33825+t33826+t33827;
                double t33829 = 1.0/t33828;
                double t33830 = t33800*t33829*(1.0/2.0);
                double t33831 = t33830+1.0;
                double t33832 = log(t33831);
                double t33833 = a1p*c*t33819;
                double t33834 = t33833+1.0;
                double t33835 = c0p*t33832*t33834*2.0;
                double t33836 = rho_a[index]+rho_b[index];
                double t33837 = 1.0/pow(t33836,1.0/3.0);
                double t33838 = c*t33837;
                double t33839 = sqrt(t33838);
                double t33840 = pow(t33838,3.0/2.0);
                double t33841 = 1.0/pow(t33836,2.0/3.0);
                double t33842 = b1p*t33839;
                double t33843 = b3p*t33840;
                double t33844 = b4p*t33841*t33798;
                double t33845 = b2p*c*t33837;
                double t33846 = t33842+t33843+t33844+t33845;
                double t33847 = 1.0/t33846;
                double t33848 = t33800*t33847*(1.0/2.0);
                double t33849 = t33848+1.0;
                double t33850 = log(t33849);
                double t33851 = a1p*c*t33837;
                double t33852 = t33851+1.0;
                double t33853 = c0p*t33850*t33852*2.0;
                double t33854 = rho_a[index]-rho_b[index];
                double t33855 = t33854*t33854;
                double t33856 = 1.0/t33836;
                double t33857 = t33854*t33856;
                double t33858 = 1.0/(t33836*t33836*t33836*t33836);
                double t33859 = t33855*t33855;
                double t33860 = t33857+1.0;
                double t33861 = pow(t33860,4.0/3.0);
                double t33862 = -t33857+1.0;
                double t33863 = pow(t33862,4.0/3.0);
                double t33864 = t33861+t33863-2.0;
                double t33865 = 1.0/pow(rho_b[index],8.0/3.0);
                double t33866 = 1.0/pow(rho_a[index],8.0/3.0);
                double t33867 = gamma_aa[index]*t33866*(1.0/2.0);
                double t33868 = gamma_bb[index]*t33865*(1.0/2.0);
                double t33869 = t33867+t33868;
                double t33870 = gcab*t33869;
                double t33871 = t33870+1.0;
                double t33872 = gcab*gcab;
                double t33873 = t33869*t33869;
                double t33874 = t33872*t33873;
                double t33875 = gcab*t33869*2.0;
                double t33876 = t33874+t33875+1.0;
                double t33877 = c0p*t33811*t33809*2.0;
                double t33878 = gx*gx;
                double t33879 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t33880 = gamma_bb[index]*gx*t33865;
                double t33881 = t33880+1.0;
                double t33882 = gamma_bb[index]*gamma_bb[index];
                double t33883 = gamma_bb[index]*gx*t33865*2.0;
                double t33884 = t33882*t33878*t33879;
                double t33885 = t33883+t33884+1.0;
                double t33886 = b1f*t33821;
                double t33887 = b3f*t33822;
                double t33888 = b4f*t33823*t33798;
                double t33889 = b2f*c*t33819;
                double t33890 = t33886+t33887+t33888+t33889;
                double t33891 = 1.0/t33890;
                double t33892 = t33818*t33891*(1.0/2.0);
                double t33893 = t33892+1.0;
                double t33894 = log(t33893);
                double t33895 = a1f*c*t33819;
                double t33896 = t33895+1.0;
                double t33897 = t33835-c0f*t33894*t33896*2.0;
                double t33898 = t33835-t33814*t33817*t33897;
                double t33899 = gcaa*gcaa;
                double t33900 = gamma_bb[index]*gcaa*t33865;
                double t33901 = t33900+1.0;
                double t33902 = gamma_bb[index]*gcaa*t33865*2.0;
                double t33903 = t33882*t33879*t33899;
                double t33904 = t33902+t33903+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t33898+rho_a[index]*(t33877-t33814*t33817*(t33877-c0f*log((t33818* \
                   (1.0/2.0))/(b1f*t33796+b3f*t33797+b2f*c*t33794+b4f*t33798*t33799)+1.0)*(a1f*c*t33794+1.0)*2.0))-t33836* \
                   (t33853-t33817*t33864*t33858*t33859*(t33853-c0f*log((t33818*(1.0/2.0))/(b1f*t33839+b3f*t33840+b2f* \
                   c*t33837+b4f*t33841*t33798)+1.0)*(a1f*c*t33837+1.0)*2.0)+(Aa*t33817*t33864*log((1.0/2.0)/(Aa*(b1a* \
                   t33839+b3a*t33840+b2a*c*t33837+b4a*t33841*t33798))+1.0)*(t33858*t33859-1.0)*(a1a*c*t33837+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t33865*(1.0/2.0))/t33871-ccab2*t33872*t33873*1.0/(t33876*t33876)*(gcab*t33865+ \
                   t33872*t33865*t33869)-ccab1*1.0/(t33871*t33871)*t33872*t33865*t33869*(1.0/2.0)+(ccab2*t33872*t33865* \
                   t33869)/t33876)-rho_b[index]*t33898*((ccaa1*gcaa*t33865)/t33901-ccaa1*gamma_bb[index]*1.0/(t33901* \
                   t33901)*t33879*t33899+(ccaa2*gamma_bb[index]*t33879*t33899*2.0)/t33904-ccaa2*1.0/(t33904*t33904)*t33882* \
                   t33879*t33899*(gcaa*t33865*2.0+gamma_bb[index]*t33879*t33899*2.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1* \
                   gx*t33865)/t33881-cx1*gamma_bb[index]*1.0/(t33881*t33881)*t33878*t33879+(cx2*gamma_bb[index]*t33878* \
                   t33879*2.0)/t33885-cx2*t33882*1.0/(t33885*t33885)*t33878*t33879*(gx*t33865*2.0+gamma_bb[index]*t33878* \
                   t33879*2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t35993 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35994 = gx*gx;
                double t35995 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35996 = gamma_bb[index]*gx*t35993;
                double t35997 = t35996+1.0;
                double t35998 = gamma_bb[index]*gamma_bb[index];
                double t35999 = gamma_bb[index]*gx*t35993*2.0;
                double t36000 = t35994*t35995*t35998;
                double t36001 = t35999+t36000+1.0;
                double t36002 = 1.0/pow(rho_b[index],1.0/3.0);
                double t36003 = c*t36002;
                double t36004 = sqrt(t36003);
                double t36005 = pow(t36003,3.0/2.0);
                double t36006 = c*c;
                double t36007 = 1.0/pow(rho_b[index],2.0/3.0);
                double t36008 = 1.0/c0p;
                double t36009 = b1p*t36004;
                double t36010 = b3p*t36005;
                double t36011 = b4p*t36006*t36007;
                double t36012 = b2p*c*t36002;
                double t36013 = t36010+t36011+t36012+t36009;
                double t36014 = 1.0/t36013;
                double t36015 = t36014*t36008*(1.0/2.0);
                double t36016 = t36015+1.0;
                double t36017 = log(t36016);
                double t36018 = a1p*c*t36002;
                double t36019 = t36018+1.0;
                double t36020 = gcaa*gcaa;
                double t36021 = gamma_bb[index]*gcaa*t35993;
                double t36022 = t36021+1.0;
                double t36023 = gamma_bb[index]*gcaa*t35993*2.0;
                double t36024 = t35995*t35998*t36020;
                double t36025 = t36023+t36024+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t35993)/t35997-cx1*gamma_bb[index]*t35994* \
                   t35995*1.0/(t35997*t35997)+(cx2*gamma_bb[index]*t35994*t35995*2.0)/t36001-cx2*t35994*t35995*t35998* \
                   1.0/(t36001*t36001)*(gx*t35993*2.0+gamma_bb[index]*t35994*t35995*2.0))-rho_b[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36004+b3f*t36005+b2f*c*t36002+b4f*t36006*t36007))+1.0) \
                   *(a1f*c*t36002+1.0)*2.0-c0p*t36017*t36019*2.0))/(two_13*2.0-2.0)+c0p*t36017*t36019*2.0)*((ccaa1*gcaa* \
                   t35993)/t36022-ccaa1*gamma_bb[index]*t35995*t36020*1.0/(t36022*t36022)+(ccaa2*gamma_bb[index]*t35995* \
                   t36020*2.0)/t36025-ccaa2*t35995*t35998*t36020*1.0/(t36025*t36025)*(gcaa*t35993*2.0+gamma_bb[index]* \
                   t35995*t36020*2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33908 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33909 = c*t33908;
            double t33910 = sqrt(t33909);
            double t33911 = pow(t33909,3.0/2.0);
            double t33912 = c*c;
            double t33913 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33914 = 1.0/c0p;
            double t33915 = b1p*t33910;
            double t33916 = b3p*t33911;
            double t33917 = b4p*t33912*t33913;
            double t33918 = b2p*c*t33908;
            double t33919 = t33915+t33916+t33917+t33918;
            double t33920 = 1.0/t33919;
            double t33921 = t33920*t33914*(1.0/2.0);
            double t33922 = t33921+1.0;
            double t33923 = log(t33922);
            double t33924 = a1p*c*t33908;
            double t33925 = t33924+1.0;
            double t33926 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33927 = gamma_aa[index]*gamma_aa[index];
            double t33928 = gcaa*gcaa;
            double t33929 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t33930 = gamma_aa[index]*gcaa*t33926;
            double t33931 = t33930+1.0;
            double t33932 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t33933 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t33934 = gamma_aa[index]*gcaa*t33926*2.0;
            double t33935 = t33932*t33927*t33928;
            double t33936 = t33934+t33935+1.0;
            double t33939 = gamma_aa[index]*t33926*(1.0/2.0);
            double t33940 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33941 = gamma_bb[index]*t33940*(1.0/2.0);
            double t33937 = t33941+t33939;
            double t33938 = gcab*gcab;
            double t33942 = t33937*t33937;
            double t33943 = rho_a[index]+rho_b[index];
            double t33944 = 1.0/pow(t33943,1.0/3.0);
            double t33945 = c*t33944;
            double t33946 = sqrt(t33945);
            double t33947 = b1p*t33946;
            double t33948 = pow(t33945,3.0/2.0);
            double t33949 = b3p*t33948;
            double t33950 = 1.0/pow(t33943,2.0/3.0);
            double t33951 = b4p*t33912*t33950;
            double t33952 = b2p*c*t33944;
            double t33953 = t33951+t33952+t33947+t33949;
            double t33954 = 1.0/pow(t33943,7.0/3.0);
            double t33955 = 1.0/pow(t33943,8.0/3.0);
            double t33956 = 1.0/sqrt(t33945);
            double t33957 = a1p*c*t33944;
            double t33958 = t33957+1.0;
            double t33959 = 1.0/t33953;
            double t33960 = t33914*t33959*(1.0/2.0);
            double t33961 = t33960+1.0;
            double t33962 = 1.0/t33961;
            double t33963 = 1.0/pow(t33943,4.0/3.0);
            double t34003 = 1.0/pow(t33943,5.0/3.0);
            double t34005 = b4p*t33912*t34003*(2.0/3.0);
            double t34006 = b2p*c*t33963*(1.0/3.0);
            double t34007 = b1p*c*t33963*t33956*(1.0/6.0);
            double t34008 = b3p*c*t33963*t33946*(1.0/2.0);
            double t33964 = t34005+t34006+t34007+t34008;
            double t33965 = two_13*2.0;
            double t33966 = t33965-2.0;
            double t33967 = 1.0/t33966;
            double t33968 = 1.0/c0f;
            double t33969 = rho_a[index]-rho_b[index];
            double t33970 = 1.0/t33943;
            double t33971 = t33970*t33969;
            double t33972 = b1f*t33946;
            double t33973 = b3f*t33948;
            double t33974 = b4f*t33912*t33950;
            double t33975 = b2f*c*t33944;
            double t33976 = t33972+t33973+t33974+t33975;
            double t33977 = 1.0/t33976;
            double t33978 = t33968*t33977*(1.0/2.0);
            double t33979 = t33978+1.0;
            double t33980 = log(t33979);
            double t33981 = a1f*c*t33944;
            double t33982 = t33981+1.0;
            double t33983 = log(t33961);
            double t33991 = c0f*t33980*t33982*2.0;
            double t33992 = c0p*t33983*t33958*2.0;
            double t33984 = t33991-t33992;
            double t33985 = t33969*t33969;
            double t33986 = t33971+1.0;
            double t33987 = pow(t33986,4.0/3.0);
            double t33988 = -t33971+1.0;
            double t33989 = pow(t33988,4.0/3.0);
            double t33990 = t33987+t33989-2.0;
            double t33993 = 1.0/(t33943*t33943);
            double t33997 = t33993*t33969;
            double t33994 = t33970-t33997;
            double t33995 = 1.0/(t33943*t33943*t33943*t33943);
            double t33996 = pow(t33986,1.0/3.0);
            double t33998 = t33994*t33996*(4.0/3.0);
            double t33999 = pow(t33988,1.0/3.0);
            double t34031 = t33994*t33999*(4.0/3.0);
            double t34000 = t33998-t34031;
            double t34001 = 1.0/(t33943*t33943*t33943*t33943*t33943);
            double t34002 = t33985*t33985;
            double t34004 = 1.0/(t33953*t33953);
            double t34009 = 1.0/t33979;
            double t34010 = 1.0/(t33976*t33976);
            double t34011 = b4f*t33912*t34003*(2.0/3.0);
            double t34012 = b2f*c*t33963*(1.0/3.0);
            double t34013 = b1f*c*t33963*t33956*(1.0/6.0);
            double t34014 = b3f*c*t33963*t33946*(1.0/2.0);
            double t34015 = t34011+t34012+t34013+t34014;
            double t34016 = t33962*t33964*t33958*t34004;
            double t34017 = a1f*c*c0f*t33980*t33963*(2.0/3.0);
            double t34018 = t33964*t33964;
            double t34019 = 1.0/pow(t33945,3.0/2.0);
            double t34020 = b4p*t33912*t33955*(1.0E1/9.0);
            double t34021 = b2p*c*t33954*(4.0/9.0);
            double t34022 = b1p*c*t33954*t33956*(2.0/9.0);
            double t34023 = b3p*c*t33954*t33946*(2.0/3.0);
            double t34024 = b3p*t33912*t33955*t33956*(1.0/1.2E1);
            double t34025 = t34020+t34021+t34022+t34023+t34024-b1p*t33912*t33955*t34019*(1.0/3.6E1);
            double t34026 = 1.0/(t33953*t33953*t33953);
            double t34027 = t33962*t33958*t34026*t34018*2.0;
            double t34028 = t34015*t34015;
            double t34029 = 1.0/(t33961*t33961);
            double t34030 = 1.0/(t33953*t33953*t33953*t33953);
            double t34119 = t33982*t34010*t34015*t34009;
            double t34120 = a1p*c*c0p*t33963*t33983*(2.0/3.0);
            double t34032 = -t34120+t34016+t34017-t34119;
            double t34033 = t33993*2.0;
            double t34034 = 1.0/(t33943*t33943*t33943);
            double t34052 = t33969*t34034*2.0;
            double t34035 = t34033-t34052;
            double t34036 = t33994*t33994;
            double t34037 = a1p*c*c0p*t33954*t33983*(8.0/9.0);
            double t34038 = 1.0/(t33943*t33943*t33943*t33943*t33943*t33943);
            double t34039 = 1.0/d2fz0;
            double t34040 = 1.0/Aa;
            double t34041 = b1a*t33946;
            double t34042 = b3a*t33948;
            double t34043 = b4a*t33912*t33950;
            double t34044 = b2a*c*t33944;
            double t34045 = t34041+t34042+t34043+t34044;
            double t34046 = 1.0/t34045;
            double t34047 = t34040*t34046*(1.0/2.0);
            double t34048 = t34047+1.0;
            double t34049 = log(t34048);
            double t34050 = a1a*c*t33944;
            double t34051 = t34050+1.0;
            double t34053 = t33999*t34035*(4.0/3.0);
            double t34054 = 1.0/pow(t33986,2.0/3.0);
            double t34055 = t34036*t34054*(4.0/9.0);
            double t34056 = 1.0/pow(t33988,2.0/3.0);
            double t34057 = t34036*t34056*(4.0/9.0);
            double t34058 = t34053+t34055+t34057-t33996*t34035*(4.0/3.0);
            double t34059 = t34001*t34002*4.0;
            double t34071 = t33985*t33995*t33969*4.0;
            double t34060 = -t34071+t34059;
            double t34061 = 1.0/t34048;
            double t34062 = t33995*t34002;
            double t34063 = t34062-1.0;
            double t34064 = 1.0/(t34045*t34045);
            double t34065 = b4a*t33912*t34003*(2.0/3.0);
            double t34066 = b2a*c*t33963*(1.0/3.0);
            double t34067 = b1a*c*t33963*t33956*(1.0/6.0);
            double t34068 = b3a*c*t33963*t33946*(1.0/2.0);
            double t34069 = t34065+t34066+t34067+t34068;
            double t34070 = t34069*t34069;
            double t34072 = t33962*t33958*t34004*t34025;
            double t34073 = pow(2.0,1.0/3.0);
            double t34074 = t34073*2.0;
            double t34075 = t34074-2.0;
            double t34076 = a1f*c*t33908;
            double t34077 = t34076+1.0;
            double t34078 = b1f*t33910;
            double t34079 = b3f*t33911;
            double t34080 = b4f*t33912*t33913;
            double t34081 = b2f*c*t33908;
            double t34082 = t34080+t34081+t34078+t34079;
            double t34083 = 1.0/t34082;
            double t34084 = t33968*t34083*(1.0/2.0);
            double t34085 = t34084+1.0;
            double t34086 = 1.0/pow(rho_a[index],4.0/3.0);
            double t34088 = 1.0/pow(rho_a[index],5.0/3.0);
            double t34089 = 1.0/sqrt(t33909);
            double t34095 = b4f*t33912*t34088*(2.0/3.0);
            double t34096 = b2f*c*t34086*(1.0/3.0);
            double t34097 = b1f*c*t34086*t34089*(1.0/6.0);
            double t34098 = b3f*c*t33910*t34086*(1.0/2.0);
            double t34087 = t34095+t34096+t34097+t34098;
            double t34100 = b4p*t33912*t34088*(2.0/3.0);
            double t34101 = b2p*c*t34086*(1.0/3.0);
            double t34102 = b1p*c*t34086*t34089*(1.0/6.0);
            double t34103 = b3p*c*t33910*t34086*(1.0/2.0);
            double t34090 = t34100+t34101+t34102+t34103;
            double t34091 = 1.0/t34085;
            double t34092 = 1.0/pow(rho_a[index],7.0/3.0);
            double t34093 = 1.0/t33922;
            double t34094 = 1.0/pow(t33909,3.0/2.0);
            double t34099 = t34087*t34087;
            double t34104 = t34090*t34090;
            double t34105 = log(t34085);
            double t34106 = 1.0/(t34082*t34082);
            double t34107 = 1.0/(t33919*t33919);
            double t34108 = 1.0/(t33919*t33919*t33919);
            double t34109 = t33925*t34104*t34108*t34093*2.0;
            double t34110 = b4p*t33912*t33926*(1.0E1/9.0);
            double t34111 = b2p*c*t34092*(4.0/9.0);
            double t34112 = b3p*t33912*t33926*t34089*(1.0/1.2E1);
            double t34113 = b1p*c*t34092*t34089*(2.0/9.0);
            double t34114 = b3p*c*t33910*t34092*(2.0/3.0);
            double t34193 = b1p*t33912*t33926*t34094*(1.0/3.6E1);
            double t34115 = t34110+t34111+t34112+t34113+t34114-t34193;
            double t34116 = 1.0/(t33922*t33922);
            double t34117 = 1.0/(t33919*t33919*t33919*t33919);
            double t34118 = a1p*c*c0p*t33923*t34092*(8.0/9.0);
            double t34121 = t34071-t34059;
            double t34122 = t33914*t33958*t34030*t34018*t34029*(1.0/2.0);
            double t34123 = a1p*c*t33962*t33963*t33964*t34004*(2.0/3.0);
            double t34124 = gcab*t33937;
            double t34125 = t34124+1.0;
            double t34126 = 1.0/t34125;
            double t34127 = t33942*t33938;
            double t34128 = gcab*t33937*2.0;
            double t34129 = t34127+t34128+1.0;
            double t34130 = 1.0/t34129;
            double t34131 = t34120-t34016-t34017+t34119;
            double t34132 = t33925*t34107*t34090*t34093;
            double t34133 = a1f*c*c0f*t34105*t34086*(2.0/3.0);
            double t34135 = a1p*c*c0p*t33923*t34086*(2.0/3.0);
            double t34138 = t34106*t34091*t34077*t34087;
            double t34134 = t34132+t34133-t34135-t34138;
            double t34136 = c0f*t34105*t34077*2.0;
            double t34137 = c0p*t33923*t33925*2.0;
            double t34139 = t33967*t34134*t34075;
            double t34140 = 1.0/t33931;
            double t34141 = 1.0/t33936;
            double t34142 = t34136-t34137;
            double t34143 = 1.0/pow(rho_b[index],1.0/3.0);
            double t34144 = c*t34143;
            double t34145 = sqrt(t34144);
            double t34146 = pow(t34144,3.0/2.0);
            double t34147 = 1.0/pow(rho_b[index],2.0/3.0);
            double t34148 = b1p*t34145;
            double t34149 = b3p*t34146;
            double t34150 = b4p*t33912*t34147;
            double t34151 = b2p*c*t34143;
            double t34152 = t34150+t34151+t34148+t34149;
            double t34153 = 1.0/t34152;
            double t34154 = t33914*t34153*(1.0/2.0);
            double t34155 = t34154+1.0;
            double t34156 = log(t34155);
            double t34157 = a1p*c*t34143;
            double t34158 = t34157+1.0;
            double t34159 = c0p*t34156*t34158*2.0;
            double t34160 = t33990*t33984*t33967*t33995*t34002;
            double t34161 = Aa*t33990*t33967*t34051*t34063*t34039*t34049*2.0;
            double t34162 = 1.0/(t34125*t34125);
            double t34163 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t34164 = gamma_aa[index]*gcab*t33933*(8.0/3.0);
            double t34165 = gamma_aa[index]*t33933*t33937*t33938*(8.0/3.0);
            double t34166 = t34164+t34165;
            double t34167 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t34168 = 1.0/(t34129*t34129);
            double t34169 = gx*gx;
            double t34170 = gamma_aa[index]*gx*t33926;
            double t34171 = t34170+1.0;
            double t34176 = gamma_aa[index]*gx*t33933*(1.6E1/3.0);
            double t34177 = t33927*t33929*t34169*(1.6E1/3.0);
            double t34172 = t34176+t34177;
            double t34173 = gamma_aa[index]*gx*t33926*2.0;
            double t34174 = t33932*t33927*t34169;
            double t34175 = t34173+t34174+1.0;
            double t34178 = 1.0/(t34175*t34175);
            double t34179 = 1.0/t34171;
            double t34180 = 1.0/t34175;
            double t34181 = 1.0/(t34171*t34171);
            double t34182 = ccaa1*gamma_aa[index]*gcaa*t33926*t34140;
            double t34183 = ccaa2*t33932*t33927*t33928*t34141;
            double t34184 = ccaa0+t34182+t34183;
            double t34185 = 1.0/(t34082*t34082*t34082);
            double t34186 = b4f*t33912*t33926*(1.0E1/9.0);
            double t34187 = b2f*c*t34092*(4.0/9.0);
            double t34188 = b3f*t33912*t33926*t34089*(1.0/1.2E1);
            double t34189 = b1f*c*t34092*t34089*(2.0/9.0);
            double t34190 = b3f*c*t33910*t34092*(2.0/3.0);
            double t34191 = t34190+t34186+t34187+t34188+t34189-b1f*t33912*t33926*t34094*(1.0/3.6E1);
            double t34192 = t34106*t34091*t34191*t34077;
            double t34194 = t33925*t34115*t34107*t34093;
            double t34195 = 1.0/(t34085*t34085);
            double t34196 = 1.0/(t34082*t34082*t34082*t34082);
            double t34197 = t33968*t34077*t34195*t34196*t34099*(1.0/2.0);
            double t34198 = t33914*t33925*t34104*t34116*t34117*(1.0/2.0);
            double t34199 = a1f*c*t34106*t34091*t34086*t34087*(2.0/3.0);
            double t34200 = a1p*c*t34107*t34090*t34093*t34086*(2.0/3.0);
            double t34201 = t33967*t34142*t34075;
            double t34202 = t34201+t34137;
            double t34203 = 1.0/pow(rho_a[index],1.0E1);
            double t34204 = 1.0/(t33931*t33931);
            double t34205 = gamma_aa[index]*gcaa*t33933*(1.6E1/3.0);
            double t34206 = t33927*t33928*t33929*(1.6E1/3.0);
            double t34207 = t34205+t34206;
            double t34208 = 1.0/(t33936*t33936);
            double t34209 = ccaa1*gamma_aa[index]*gcaa*t33933*t34140*(8.0/3.0);
            double t34210 = ccaa2*t33927*t33928*t33929*t34141*(1.6E1/3.0);
            double t34211 = t34210+t34209-ccaa1*t33927*t33928*t33929*t34204*(8.0/3.0)-ccaa2*t33932*t33927*t33928* \
               t34207*t34208;
            double t34212 = -t34132+t34135+t34139;
            v_rho_a_rho_a_[index] = t34212*t34184*2.0+t34211*(t34137+t33967*t34075*(t34136-c0p*t33923*t33925* \
               2.0))*2.0-(ccab0+ccab1*gcab*t33937*t34126+ccab2*t33942*t33938*t34130)*(-t33943*(t34122+t34123-t34027+ \
               t34072-t34037-t33990*t33967*t33995*t34002*(t34122+t34123-t34027+t34072-t34037+t33982*1.0/(t33976*t33976* \
               t33976)*t34009*t34028*2.0-t33982*t34010*t34009*(b2f*c*t33954*(4.0/9.0)+b4f*t33912*t33955*(1.0E1/9.0) \
               +b1f*c*t33954*t33956*(2.0/9.0)+b3f*c*t33954*t33946*(2.0/3.0)-b1f*t33912*t33955*t34019*(1.0/3.6E1)+ \
               b3f*t33912*t33955*t33956*(1.0/1.2E1))-t33982*1.0/(t33976*t33976*t33976*t33976)*t33968*1.0/(t33979* \
               t33979)*t34028*(1.0/2.0)+a1f*c*c0f*t33980*t33954*(8.0/9.0)-a1f*c*t33963*t34010*t34015*t34009*(2.0/ \
               3.0))-t33990*t33984*t33967*t33985*t33995*1.2E1-t33990*t33984*t33967*t34002*t34038*2.0E1-t33984*t33967* \
               t33995*t34002*t34058+t33984*t33967*t34000*t34001*t34002*8.0-t33990*t33967*t34001*t34002*t34032*8.0+ \
               t33967*t33995*t34000*t34002*t34032*2.0+t33990*t33984*t33967*t33985*t33969*t34001*3.2E1-t33984*t33967* \
               t33985*t33995*t33969*t34000*8.0+t33990*t33967*t33985*t33995*t33969*t34032*8.0+Aa*t33967*t34000*t34051* \
               t34060*t34039*t34049*4.0-Aa*t33967*t34051*t34063*t34039*t34049*t34058*2.0-Aa*t33990*t33967*t34051* \
               t34039*t34049*(t33985*t33995*1.2E1+t34002*t34038*2.0E1-t33985*t33969*t34001*3.2E1)*2.0+t33990*t33967* \
               t34051*t34060*t34061*t34064*t34039*t34069*2.0-t33967*t34000*t34051*t34061*t34063*t34064*t34039*t34069* \
               2.0-t33990*t33967*t34051*t34061*t34070*1.0/(t34045*t34045*t34045)*t34063*t34039*2.0+t33990*t33967* \
               t34051*t34061*t34063*t34064*t34039*(b2a*c*t33954*(4.0/9.0)+b4a*t33912*t33955*(1.0E1/9.0)+b1a*c*t33954* \
               t33956*(2.0/9.0)+b3a*c*t33954*t33946*(2.0/3.0)-b1a*t33912*t33955*t34019*(1.0/3.6E1)+b3a*t33912*t33955* \
               t33956*(1.0/1.2E1))+Aa*a1a*c*t33963*t33990*t33967*t34121*t34039*t34049*(4.0/3.0)-Aa*a1a*c*t33954*t33990* \
               t33967*t34063*t34039*t34049*(8.0/9.0)+Aa*a1a*c*t33963*t33967*t34000*t34063*t34039*t34049*(4.0/3.0) \
               +t33990*t33967*t34040*t34051*t34070*1.0/(t34045*t34045*t34045*t34045)*t34063*t34039*1.0/(t34048*t34048) \
               *(1.0/2.0)+a1a*c*t33963*t33990*t33967*t34061*t34063*t34064*t34039*t34069*(2.0/3.0))+rho_a[index]*(t34200- \
               t34109-t34118+t34194+t34198+t33967*t34075*(t34109+t34118+t34192+t34197+t34199-t33925*t34115*t34107* \
               t34093-t34091*t34077*t34185*t34099*2.0-a1f*c*c0f*t34105*t34092*(8.0/9.0)-t33914*t33925*t34104*t34116* \
               t34117*(1.0/2.0)-a1p*c*t34107*t34090*t34093*t34086*(2.0/3.0)))+t33967*t34134*t34075*2.0+t33962*t33964* \
               t33958*t34004*2.0-t33925*t34107*t34090*t34093*2.0-a1p*c*c0p*t33963*t33983*(4.0/3.0)+a1p*c*c0p*t33923* \
               t34086*(4.0/3.0)-t33990*t33984*t33967*t34001*t34002*8.0+t33984*t33967*t33995*t34000*t34002*2.0+t33990* \
               t33967*t33995*t34002*t34131*2.0+t33990*t33984*t33967*t33985*t33995*t33969*8.0+Aa*t33990*t33967*t34121* \
               t34051*t34039*t34049*4.0+Aa*t33967*t34000*t34051*t34063*t34039*t34049*4.0+t33990*t33967*t34051*t34061* \
               t34063*t34064*t34039*t34069*2.0-Aa*a1a*c*t33963*t33990*t33967*t34063*t34039*t34049*(4.0/3.0))+(rho_a[index]* \
               t34202+rho_b[index]*(t34159-t33967*t34075*(t34159-c0f*log((t33968*(1.0/2.0))/(b1f*t34145+b3f*t34146+ \
               b2f*c*t34143+b4f*t33912*t34147)+1.0)*(a1f*c*t34143+1.0)*2.0))-t33943*(t33992+t34160+t34161))*(-ccab2* \
               t33942*t33938*t34168*(gamma_aa[index]*gcab*t34167*(8.8E1/9.0)+t33927*t33938*t34163*(3.2E1/9.0)+gamma_aa[index]* \
               t33937*t33938*t34167*(8.8E1/9.0))+ccab2*t33942*t33938*1.0/(t34129*t34129*t34129)*(t34166*t34166)*2.0+ \
               ccab1*gamma_aa[index]*gcab*t34126*t34167*(4.4E1/9.0)+ccab2*t33927*t33938*t34130*t34163*(3.2E1/9.0) \
               -ccab1*t33927*t33938*t34162*t34163*(3.2E1/9.0)+ccab2*gamma_aa[index]*t33937*t33938*t34130*t34167*(8.8E1/ \
               9.0)-ccab1*gamma_aa[index]*t33937*t33938*t34162*t34167*(4.4E1/9.0)-ccab2*gamma_aa[index]*t33933*t33937* \
               t33938*t34166*t34168*(1.6E1/3.0)+ccab1*gcab*t33927*t33937*t33938*1.0/(t34125*t34125*t34125)*t34163* \
               (3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t33933*t34126*(4.0/3.0)-ccab2*t33942*t33938*t34166*t34168+ \
               ccab2*gamma_aa[index]*t33933*t33937*t33938*t34130*(8.0/3.0)-ccab1*gamma_aa[index]*t33933*t33937*t33938* \
               t34162*(4.0/3.0))*(t33992+t34160+t34161-t34137+rho_a[index]*t34212+t33943*(-t34120+t34016-t33990*t33984* \
               t33967*t34001*t34002*4.0+t33984*t33967*t33995*t34000*t34002+t33990*t33967*t33995*t34002*t34131+t33990* \
               t33984*t33967*t33985*t33995*t33969*4.0+Aa*t33990*t33967*t34121*t34051*t34039*t34049*2.0+Aa*t33967* \
               t34000*t34051*t34063*t34039*t34049*2.0+t33990*t33967*t34051*t34061*t34063*t34064*t34039*t34069-Aa* \
               a1a*c*t33963*t33990*t33967*t34063*t34039*t34049*(2.0/3.0))-t33967*t34142*t34075)*2.0+c0*t33913*(cx0+ \
               cx1*gamma_aa[index]*gx*t33926*t34179+cx2*t33932*t33927*t34180*t34169)*(4.0/9.0)-rho_a[index]*t34202* \
               (ccaa1*gamma_aa[index]*gcaa*t34140*t34167*(8.8E1/9.0)-ccaa1*t33927*t33928*t34204*t34163*2.4E1+ccaa2* \
               t33927*t33928*t34141*t34163*(3.04E2/9.0)-ccaa2*t33927*t33928*t33929*t34207*t34208*(3.2E1/3.0)-ccaa2* \
               t33932*t33927*t33928*t34208*(gamma_aa[index]*gcaa*t34167*(1.76E2/9.0)+t33927*t33928*t34163*(3.04E2/ \
               9.0))+ccaa2*t33932*t33927*1.0/(t33936*t33936*t33936)*t33928*(t34207*t34207)*2.0+ccaa1*gamma_aa[index]* \
               gcaa*1.0/(t33931*t33931*t33931)*t33927*t33928*t34203*(1.28E2/9.0))+rho_a[index]*t34184*(t34200-t34109- \
               t34118+t34194+t34198-t33967*t34075*(t34200-t34109-t34118-t34192+t34194-t34197+t34198-t34199+t34091* \
               t34077*t34185*t34099*2.0+a1f*c*c0f*t34105*t34092*(8.0/9.0)))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t34167*t34179*(8.8E1/9.0)-cx1*t33927*t34163*t34181*t34169*2.4E1+cx2*t33927*t34180*t34163*t34169* \
               (3.04E2/9.0)-cx2*t33927*t33929*t34172*t34169*t34178*(3.2E1/3.0)-cx2*t33932*t33927*t34169*t34178*(gamma_aa[index]* \
               gx*t34167*(1.76E2/9.0)+t33927*t34163*t34169*(3.04E2/9.0))+cx2*t33932*t33927*(t34172*t34172)*1.0/(t34175* \
               t34175*t34175)*t34169*2.0+cx1*gamma_aa[index]*gx*t33927*t34203*1.0/(t34171*t34171*t34171)*t34169*(1.28E2/ \
               9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t33933*t34179*(8.0/3.0)-cx1*t33927*t33929* \
               t34181*t34169*(8.0/3.0)+cx2*t33927*t33929*t34180*t34169*(1.6E1/3.0)-cx2*t33932*t33927*t34172*t34169* \
               t34178)*(8.0/3.0)-rho_a[index]*t34211*t34212*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t36440 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36441 = c*t36440;
            double t36442 = sqrt(t36441);
            double t36443 = pow(t36441,3.0/2.0);
            double t36444 = c*c;
            double t36445 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36446 = 1.0/c0p;
            double t36447 = b1p*t36442;
            double t36448 = b3p*t36443;
            double t36449 = b4p*t36444*t36445;
            double t36450 = b2p*c*t36440;
            double t36451 = t36450+t36447+t36448+t36449;
            double t36452 = 1.0/t36451;
            double t36453 = t36452*t36446*(1.0/2.0);
            double t36454 = t36453+1.0;
            double t36455 = log(t36454);
            double t36456 = a1p*c*t36440;
            double t36457 = t36456+1.0;
            double t36458 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36459 = gamma_aa[index]*gamma_aa[index];
            double t36460 = gcaa*gcaa;
            double t36461 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36462 = gamma_aa[index]*gcaa*t36458;
            double t36463 = t36462+1.0;
            double t36464 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36465 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36466 = gamma_aa[index]*gcaa*t36458*2.0;
            double t36467 = t36460*t36464*t36459;
            double t36468 = t36466+t36467+1.0;
            double t36469 = pow(2.0,1.0/3.0);
            double t36470 = t36469*2.0;
            double t36471 = t36470-2.0;
            double t36472 = two_13*2.0;
            double t36473 = t36472-2.0;
            double t36474 = 1.0/t36473;
            double t36475 = a1f*c*t36440;
            double t36476 = t36475+1.0;
            double t36477 = 1.0/c0f;
            double t36478 = b1f*t36442;
            double t36479 = b3f*t36443;
            double t36480 = b4f*t36444*t36445;
            double t36481 = b2f*c*t36440;
            double t36482 = t36480+t36481+t36478+t36479;
            double t36483 = 1.0/t36482;
            double t36484 = t36483*t36477*(1.0/2.0);
            double t36485 = t36484+1.0;
            double t36486 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36487 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36488 = 1.0/sqrt(t36441);
            double t36489 = log(t36485);
            double t36490 = 1.0/t36454;
            double t36491 = 1.0/(t36451*t36451);
            double t36492 = b4p*t36444*t36487*(2.0/3.0);
            double t36493 = b2p*c*t36486*(1.0/3.0);
            double t36494 = b1p*c*t36486*t36488*(1.0/6.0);
            double t36495 = b3p*c*t36442*t36486*(1.0/2.0);
            double t36496 = t36492+t36493+t36494+t36495;
            double t36497 = t36490*t36491*t36457*t36496;
            double t36498 = 1.0/t36463;
            double t36499 = 1.0/t36468;
            double t36500 = gx*gx;
            double t36501 = gamma_aa[index]*gx*t36458;
            double t36502 = t36501+1.0;
            double t36503 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t36508 = gamma_aa[index]*gx*t36465*(1.6E1/3.0);
            double t36509 = t36500*t36461*t36459*(1.6E1/3.0);
            double t36504 = t36508+t36509;
            double t36505 = gamma_aa[index]*gx*t36458*2.0;
            double t36506 = t36500*t36464*t36459;
            double t36507 = t36505+t36506+1.0;
            double t36510 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t36511 = 1.0/(t36507*t36507);
            double t36512 = 1.0/t36502;
            double t36513 = 1.0/t36507;
            double t36514 = 1.0/(t36502*t36502);
            double t36515 = ccaa1*gamma_aa[index]*gcaa*t36458*t36498;
            double t36516 = ccaa2*t36460*t36464*t36459*t36499;
            double t36517 = ccaa0+t36515+t36516;
            double t36518 = 1.0/t36485;
            double t36519 = b4f*t36444*t36487*(2.0/3.0);
            double t36520 = b2f*c*t36486*(1.0/3.0);
            double t36521 = b1f*c*t36486*t36488*(1.0/6.0);
            double t36522 = b3f*c*t36442*t36486*(1.0/2.0);
            double t36523 = t36520+t36521+t36522+t36519;
            double t36524 = 1.0/(t36482*t36482);
            double t36525 = 1.0/pow(rho_a[index],7.0/3.0);
            double t36526 = 1.0/pow(t36441,3.0/2.0);
            double t36527 = t36523*t36523;
            double t36528 = t36496*t36496;
            double t36529 = 1.0/(t36451*t36451*t36451);
            double t36530 = t36490*t36528*t36457*t36529*2.0;
            double t36531 = b4p*t36444*t36458*(1.0E1/9.0);
            double t36532 = b2p*c*t36525*(4.0/9.0);
            double t36533 = b3p*t36444*t36458*t36488*(1.0/1.2E1);
            double t36534 = b1p*c*t36525*t36488*(2.0/9.0);
            double t36535 = b3p*c*t36442*t36525*(2.0/3.0);
            double t36536 = t36531+t36532+t36533+t36534+t36535-b1p*t36444*t36526*t36458*(1.0/3.6E1);
            double t36537 = 1.0/(t36454*t36454);
            double t36538 = 1.0/(t36451*t36451*t36451*t36451);
            double t36539 = a1p*c*c0p*t36525*t36455*(8.0/9.0);
            double t36540 = c0f*t36476*t36489*2.0;
            double t36541 = c0p*t36455*t36457*2.0;
            double t36542 = 1.0/pow(rho_a[index],1.0E1);
            double t36543 = 1.0/(t36463*t36463);
            double t36544 = gamma_aa[index]*gcaa*t36465*(1.6E1/3.0);
            double t36545 = t36460*t36461*t36459*(1.6E1/3.0);
            double t36546 = t36544+t36545;
            double t36547 = 1.0/(t36468*t36468);
            double t36548 = a1f*c*c0f*t36486*t36489*(2.0/3.0);
            double t36549 = a1p*c*c0p*t36455*t36486*(2.0/3.0);
            double t36550 = ccaa1*gamma_aa[index]*gcaa*t36465*t36498*(8.0/3.0);
            double t36551 = ccaa2*t36460*t36461*t36459*t36499*(1.6E1/3.0);
            double t36552 = t36550+t36551-ccaa1*t36460*t36461*t36543*t36459*(8.0/3.0)-ccaa2*t36460*t36464*t36546* \
               t36547*t36459;
            v_rho_a_rho_a_[index] = t36552*(t36541+t36471*t36474*(t36540-c0p*t36455*t36457*2.0))*2.0+t36517*(t36549- \
               t36497+t36471*t36474*(t36548+t36497-t36523*t36524*t36518*t36476-a1p*c*c0p*t36455*t36486*(2.0/3.0)) \
               )*2.0+c0*t36445*(cx0+cx1*gamma_aa[index]*gx*t36512*t36458+cx2*t36500*t36513*t36464*t36459)*(4.0/9.0) \
               -rho_a[index]*(t36541+t36471*t36474*(t36540-t36541))*(ccaa1*gamma_aa[index]*gcaa*t36510*t36498*(8.8E1/ \
               9.0)-ccaa1*t36503*t36460*t36543*t36459*2.4E1+ccaa2*t36503*t36460*t36459*t36499*(3.04E2/9.0)-ccaa2* \
               t36460*t36461*t36546*t36547*t36459*(3.2E1/3.0)-ccaa2*t36460*t36464*t36547*t36459*(gamma_aa[index]* \
               gcaa*t36510*(1.76E2/9.0)+t36503*t36460*t36459*(3.04E2/9.0))+ccaa2*t36460*t36464*(t36546*t36546)*t36459* \
               1.0/(t36468*t36468*t36468)*2.0+ccaa1*gamma_aa[index]*gcaa*t36460*t36542*1.0/(t36463*t36463*t36463) \
               *t36459*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t36510*t36512*(8.8E1/9.0) \
               -cx1*t36500*t36503*t36514*t36459*2.4E1+cx2*t36500*t36503*t36513*t36459*(3.04E2/9.0)-cx2*t36500*t36511* \
               t36504*t36461*t36459*(3.2E1/3.0)-cx2*t36500*t36511*t36464*t36459*(gamma_aa[index]*gx*t36510*(1.76E2/ \
               9.0)+t36500*t36503*t36459*(3.04E2/9.0))+cx2*t36500*(t36504*t36504)*1.0/(t36507*t36507*t36507)*t36464* \
               t36459*2.0+cx1*gamma_aa[index]*gx*t36500*1.0/(t36502*t36502*t36502)*t36542*t36459*(1.28E2/9.0))+rho_a[index]* \
               t36517*(-t36530-t36539+t36471*t36474*(t36530+t36539-t36490*t36491*t36536*t36457-1.0/(t36482*t36482* \
               t36482)*t36518*t36527*t36476*2.0+t36524*t36518*t36476*(b2f*c*t36525*(4.0/9.0)+b4f*t36444*t36458*(1.0E1/ \
               9.0)+b1f*c*t36525*t36488*(2.0/9.0)+b3f*c*t36442*t36525*(2.0/3.0)-b1f*t36444*t36526*t36458*(1.0/3.6E1) \
               +b3f*t36444*t36458*t36488*(1.0/1.2E1))+1.0/(t36482*t36482*t36482*t36482)*t36527*t36476*1.0/(t36485* \
               t36485)*t36477*(1.0/2.0)-a1f*c*c0f*t36525*t36489*(8.0/9.0)-t36446*t36528*t36537*t36457*t36538*(1.0/ \
               2.0)+a1f*c*t36523*t36524*t36518*t36486*(2.0/3.0)-a1p*c*t36490*t36491*t36486*t36496*(2.0/3.0))+t36490* \
               t36491*t36536*t36457+t36446*t36528*t36537*t36457*t36538*(1.0/2.0)+a1p*c*t36490*t36491*t36486*t36496* \
               (2.0/3.0))-rho_a[index]*t36552*(t36549-t36497+t36471*t36474*(t36548-t36549+t36497-t36523*t36524*t36518* \
               t36476))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t36512*t36465*(8.0/3.0)-cx1*t36500* \
               t36514*t36461*t36459*(8.0/3.0)+cx2*t36500*t36513*t36461*t36459*(1.6E1/3.0)-cx2*t36500*t36511*t36504* \
               t36464*t36459)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t34214 = 1.0/pow(rho_a[index],1.0/3.0);
            double t34215 = c*t34214;
            double t34216 = sqrt(t34215);
            double t34217 = pow(t34215,3.0/2.0);
            double t34218 = c*c;
            double t34219 = 1.0/pow(rho_a[index],2.0/3.0);
            double t34220 = 1.0/c0p;
            double t34221 = b1p*t34216;
            double t34222 = b3p*t34217;
            double t34223 = b4p*t34218*t34219;
            double t34224 = b2p*c*t34214;
            double t34225 = t34221+t34222+t34223+t34224;
            double t34226 = 1.0/t34225;
            double t34227 = t34220*t34226*(1.0/2.0);
            double t34228 = t34227+1.0;
            double t34229 = log(t34228);
            double t34230 = a1p*c*t34214;
            double t34231 = t34230+1.0;
            double t34232 = pow(2.0,1.0/3.0);
            double t34233 = t34232*2.0;
            double t34234 = t34233-2.0;
            double t34235 = two_13*2.0;
            double t34236 = t34235-2.0;
            double t34237 = 1.0/t34236;
            double t34238 = 1.0/c0f;
            double t34239 = 1.0/pow(rho_b[index],1.0/3.0);
            double t34240 = c*t34239;
            double t34241 = sqrt(t34240);
            double t34242 = pow(t34240,3.0/2.0);
            double t34243 = 1.0/pow(rho_b[index],2.0/3.0);
            double t34244 = b1p*t34241;
            double t34245 = b3p*t34242;
            double t34246 = b4p*t34243*t34218;
            double t34247 = b2p*c*t34239;
            double t34248 = t34244+t34245+t34246+t34247;
            double t34249 = 1.0/t34248;
            double t34250 = t34220*t34249*(1.0/2.0);
            double t34251 = t34250+1.0;
            double t34252 = log(t34251);
            double t34253 = a1p*c*t34239;
            double t34254 = t34253+1.0;
            double t34255 = c0p*t34252*t34254*2.0;
            double t34256 = rho_a[index]+rho_b[index];
            double t34257 = 1.0/pow(t34256,1.0/3.0);
            double t34258 = c*t34257;
            double t34259 = sqrt(t34258);
            double t34260 = pow(t34258,3.0/2.0);
            double t34261 = 1.0/pow(t34256,2.0/3.0);
            double t34262 = b1p*t34259;
            double t34263 = b3p*t34260;
            double t34264 = b4p*t34261*t34218;
            double t34265 = b2p*c*t34257;
            double t34266 = t34262+t34263+t34264+t34265;
            double t34267 = 1.0/t34266;
            double t34268 = t34220*t34267*(1.0/2.0);
            double t34269 = t34268+1.0;
            double t34270 = log(t34269);
            double t34271 = a1p*c*t34257;
            double t34272 = t34271+1.0;
            double t34273 = c0p*t34270*t34272*2.0;
            double t34274 = rho_a[index]-rho_b[index];
            double t34275 = t34274*t34274;
            double t34276 = 1.0/t34256;
            double t34277 = t34274*t34276;
            double t34278 = 1.0/(t34256*t34256*t34256*t34256);
            double t34279 = t34275*t34275;
            double t34280 = t34277+1.0;
            double t34281 = pow(t34280,4.0/3.0);
            double t34282 = -t34277+1.0;
            double t34283 = pow(t34282,4.0/3.0);
            double t34284 = t34281+t34283-2.0;
            double t34285 = gcab*gcab;
            double t34286 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t34287 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t34288 = 1.0/pow(rho_a[index],8.0/3.0);
            double t34289 = gamma_aa[index]*t34288*(1.0/2.0);
            double t34290 = 1.0/pow(rho_b[index],8.0/3.0);
            double t34291 = gamma_bb[index]*t34290*(1.0/2.0);
            double t34292 = t34291+t34289;
            double t34293 = t34292*t34292;
            double t34294 = t34293*t34285;
            double t34295 = gcab*t34292*2.0;
            double t34296 = t34294+t34295+1.0;
            double t34297 = gamma_aa[index]*gcab*t34286*(8.0/3.0);
            double t34298 = gamma_aa[index]*t34292*t34285*t34286*(8.0/3.0);
            double t34299 = t34297+t34298;
            double t34300 = gamma_bb[index]*gcab*t34287*(8.0/3.0);
            double t34301 = gamma_bb[index]*t34292*t34285*t34287*(8.0/3.0);
            double t34302 = t34300+t34301;
            double t34303 = 1.0/(t34296*t34296);
            double t34304 = gcab*t34292;
            double t34305 = t34304+1.0;
            double t34306 = 1.0/(t34305*t34305);
            double t34307 = 1.0/t34296;
            double t34308 = 1.0/pow(t34256,4.0/3.0);
            double t34309 = b1f*t34259;
            double t34310 = b3f*t34260;
            double t34311 = b4f*t34261*t34218;
            double t34312 = b2f*c*t34257;
            double t34313 = t34310+t34311+t34312+t34309;
            double t34314 = 1.0/t34313;
            double t34315 = t34314*t34238*(1.0/2.0);
            double t34316 = t34315+1.0;
            double t34317 = log(t34316);
            double t34318 = a1f*c*t34257;
            double t34319 = t34318+1.0;
            double t34321 = c0f*t34317*t34319*2.0;
            double t34320 = -t34321+t34273;
            double t34322 = 1.0/(t34256*t34256);
            double t34350 = t34322*t34274;
            double t34323 = -t34350+t34276;
            double t34324 = t34321-t34273;
            double t34325 = 1.0/pow(t34256,5.0/3.0);
            double t34326 = 1.0/sqrt(t34258);
            double t34327 = 1.0/t34269;
            double t34328 = 1.0/(t34266*t34266);
            double t34329 = b4p*t34325*t34218*(2.0/3.0);
            double t34330 = b2p*c*t34308*(1.0/3.0);
            double t34331 = b1p*c*t34308*t34326*(1.0/6.0);
            double t34332 = b3p*c*t34308*t34259*(1.0/2.0);
            double t34333 = t34330+t34331+t34332+t34329;
            double t34334 = t34333*t34272*t34327*t34328;
            double t34335 = 1.0/d2fz0;
            double t34336 = 1.0/Aa;
            double t34337 = b1a*t34259;
            double t34338 = b3a*t34260;
            double t34339 = b4a*t34261*t34218;
            double t34340 = b2a*c*t34257;
            double t34341 = t34340+t34337+t34338+t34339;
            double t34342 = 1.0/t34341;
            double t34343 = t34342*t34336*(1.0/2.0);
            double t34344 = t34343+1.0;
            double t34345 = log(t34344);
            double t34346 = a1a*c*t34257;
            double t34347 = t34346+1.0;
            double t34348 = 1.0/(t34256*t34256*t34256*t34256*t34256);
            double t34349 = pow(t34280,1.0/3.0);
            double t34351 = t34323*t34349*(4.0/3.0);
            double t34352 = pow(t34282,1.0/3.0);
            double t34432 = t34323*t34352*(4.0/3.0);
            double t34353 = t34351-t34432;
            double t34354 = t34278*t34279;
            double t34355 = t34354-1.0;
            double t34356 = a1f*c*t34214;
            double t34357 = t34356+1.0;
            double t34358 = b1f*t34216;
            double t34359 = b3f*t34217;
            double t34360 = b4f*t34218*t34219;
            double t34361 = b2f*c*t34214;
            double t34362 = t34360+t34361+t34358+t34359;
            double t34363 = 1.0/t34362;
            double t34364 = t34363*t34238*(1.0/2.0);
            double t34365 = t34364+1.0;
            double t34366 = 1.0/pow(rho_a[index],4.0/3.0);
            double t34367 = 1.0/pow(rho_a[index],5.0/3.0);
            double t34368 = 1.0/sqrt(t34215);
            double t34369 = log(t34365);
            double t34370 = 1.0/t34228;
            double t34371 = 1.0/(t34225*t34225);
            double t34372 = b4p*t34218*t34367*(2.0/3.0);
            double t34373 = b2p*c*t34366*(1.0/3.0);
            double t34374 = b1p*c*t34366*t34368*(1.0/6.0);
            double t34375 = b3p*c*t34216*t34366*(1.0/2.0);
            double t34376 = t34372+t34373+t34374+t34375;
            double t34377 = t34231*t34370*t34371*t34376;
            double t34378 = c0f*t34357*t34369*2.0;
            double t34379 = c0p*t34231*t34229*2.0;
            double t34380 = Aa*t34335*t34237*t34345*t34355*t34284*t34347*2.0;
            double t34381 = 1.0/t34305;
            double t34382 = t34324*t34237*t34284*t34348*t34279*4.0;
            double t34383 = t34350+t34276;
            double t34384 = 1.0/t34316;
            double t34385 = 1.0/(t34313*t34313);
            double t34386 = b4f*t34325*t34218*(2.0/3.0);
            double t34387 = b2f*c*t34308*(1.0/3.0);
            double t34388 = b1f*c*t34308*t34326*(1.0/6.0);
            double t34389 = b3f*c*t34308*t34259*(1.0/2.0);
            double t34390 = t34386+t34387+t34388+t34389;
            double t34391 = a1f*c*c0f*t34308*t34317*(2.0/3.0);
            double t34392 = a1p*c*c0p*t34270*t34308*(2.0/3.0);
            double t34393 = t34348*t34279*4.0;
            double t34394 = t34352*t34383*(4.0/3.0);
            double t34430 = t34383*t34349*(4.0/3.0);
            double t34395 = -t34430+t34394;
            double t34396 = 1.0/t34344;
            double t34397 = 1.0/(t34341*t34341);
            double t34398 = b4a*t34325*t34218*(2.0/3.0);
            double t34399 = b2a*c*t34308*(1.0/3.0);
            double t34400 = b1a*c*t34308*t34326*(1.0/6.0);
            double t34401 = b3a*c*t34308*t34259*(1.0/2.0);
            double t34402 = t34400+t34401+t34398+t34399;
            double t34403 = Aa*a1a*c*t34308*t34335*t34237*t34345*t34355*t34284*(2.0/3.0);
            double t34404 = a1f*c*t34239;
            double t34405 = t34404+1.0;
            double t34406 = b1f*t34241;
            double t34407 = b3f*t34242;
            double t34408 = b4f*t34243*t34218;
            double t34409 = b2f*c*t34239;
            double t34410 = t34406+t34407+t34408+t34409;
            double t34411 = 1.0/t34410;
            double t34412 = t34411*t34238*(1.0/2.0);
            double t34413 = t34412+1.0;
            double t34414 = 1.0/pow(rho_b[index],4.0/3.0);
            double t34415 = 1.0/pow(rho_b[index],5.0/3.0);
            double t34416 = 1.0/sqrt(t34240);
            double t34417 = log(t34413);
            double t34418 = 1.0/t34251;
            double t34419 = 1.0/(t34248*t34248);
            double t34420 = b4p*t34415*t34218*(2.0/3.0);
            double t34421 = b2p*c*t34414*(1.0/3.0);
            double t34422 = b1p*c*t34414*t34416*(1.0/6.0);
            double t34423 = b3p*c*t34241*t34414*(1.0/2.0);
            double t34424 = t34420+t34421+t34422+t34423;
            double t34425 = t34424*t34254*t34418*t34419;
            double t34426 = t34255-c0f*t34405*t34417*2.0;
            double t34427 = t34324*t34237*t34284*t34278*t34279;
            double t34428 = 1.0/pow(t34256,7.0/3.0);
            double t34429 = 1.0/pow(t34256,8.0/3.0);
            double t34431 = t34430-t34394;
            double t34448 = t34390*t34319*t34384*t34385;
            double t34433 = t34334+t34391-t34392-t34448;
            double t34434 = t34333*t34333;
            double t34435 = 1.0/pow(t34258,3.0/2.0);
            double t34436 = b4p*t34218*t34429*(1.0E1/9.0);
            double t34437 = b2p*c*t34428*(4.0/9.0);
            double t34438 = b1p*c*t34326*t34428*(2.0/9.0);
            double t34439 = b3p*c*t34428*t34259*(2.0/3.0);
            double t34440 = b3p*t34218*t34326*t34429*(1.0/1.2E1);
            double t34441 = t34440+t34436+t34437+t34438+t34439-b1p*t34218*t34435*t34429*(1.0/3.6E1);
            double t34442 = t34441*t34272*t34327*t34328;
            double t34443 = 1.0/(t34266*t34266*t34266);
            double t34444 = t34390*t34390;
            double t34445 = 1.0/(t34269*t34269);
            double t34446 = 1.0/(t34266*t34266*t34266*t34266);
            double t34447 = t34220*t34272*t34434*t34445*t34446*(1.0/2.0);
            double t34449 = 1.0/(t34256*t34256*t34256);
            double t34450 = a1p*c*t34333*t34308*t34327*t34328*(2.0/3.0);
            double t34451 = 1.0/(t34256*t34256*t34256*t34256*t34256*t34256);
            double t34452 = t34274*t34275*t34278*4.0;
            double t34453 = t34452+t34393;
            double t34454 = t34352*t34274*t34449*(8.0/3.0);
            double t34455 = 1.0/pow(t34280,2.0/3.0);
            double t34456 = t34323*t34383*t34455*(4.0/9.0);
            double t34457 = 1.0/pow(t34282,2.0/3.0);
            double t34458 = t34323*t34383*t34457*(4.0/9.0);
            double t34459 = t34454+t34456+t34458-t34274*t34349*t34449*(8.0/3.0);
            double t34460 = t34452-t34393;
            double t34461 = t34402*t34402;
            double t34462 = Aa*t34335*t34237*t34345*t34453*t34284*t34347*2.0;
            v_rho_a_rho_b_[index] = (ccab1*gamma_aa[index]*gcab*t34381*t34286*(4.0/3.0)-ccab2*t34303*t34293*t34285* \
               t34299-ccab1*gamma_aa[index]*t34306*t34292*t34285*t34286*(4.0/3.0)+ccab2*gamma_aa[index]*t34307*t34292* \
               t34285*t34286*(8.0/3.0))*(t34380-t34255+t34273+t34427-t34256*(t34403-t34334+t34462+t34382+t34392+t34433* \
               t34237*t34284*t34278*t34279-t34324*t34237*t34278*t34395*t34279+t34324*t34237*t34274*t34275*t34284* \
               t34278*4.0-Aa*t34335*t34237*t34345*t34355*t34347*t34395*2.0-t34402*t34335*t34237*t34355*t34284*t34347* \
               t34396*t34397)+rho_b[index]*(-t34425+t34234*t34237*(t34425-(1.0/(t34410*t34410)*t34405*(b2f*c*t34414* \
               (1.0/3.0)+b4f*t34415*t34218*(2.0/3.0)+b1f*c*t34414*t34416*(1.0/6.0)+b3f*c*t34241*t34414*(1.0/2.0)) \
               )/t34413+a1f*c*c0f*t34414*t34417*(2.0/3.0)-a1p*c*c0p*t34252*t34414*(2.0/3.0))+a1p*c*c0p*t34252*t34414* \
               (2.0/3.0))+t34234*t34237*t34426)-(rho_b[index]*(t34255-t34234*t34237*t34426)+rho_a[index]*(t34379+ \
               t34234*t34237*(t34378-c0p*t34231*t34229*2.0))-t34256*(t34380+t34273-t34320*t34237*t34284*t34278*t34279) \
               )*(ccab2*t34302*t34293*t34285*1.0/(t34296*t34296*t34296)*t34299*-2.0+ccab1*gamma_aa[index]*gamma_bb[index]* \
               t34306*t34285*t34286*t34287*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t34307*t34285*t34286* \
               t34287*(3.2E1/9.0)+ccab2*gamma_aa[index]*t34302*t34303*t34292*t34285*t34286*(8.0/3.0)+ccab2*gamma_bb[index]* \
               t34303*t34292*t34285*t34287*t34299*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t34303*t34293*(t34285* \
               t34285)*t34286*t34287*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*1.0/(t34305*t34305*t34305) \
               *t34292*t34285*t34286*t34287*(3.2E1/9.0))+(ccab1*gamma_bb[index]*gcab*t34381*t34287*(4.0/3.0)-ccab2* \
               t34302*t34303*t34293*t34285-ccab1*gamma_bb[index]*t34306*t34292*t34285*t34287*(4.0/3.0)+ccab2*gamma_bb[index]* \
               t34307*t34292*t34285*t34287*(8.0/3.0))*(t34380+t34273+t34427-t34379-t34256*(t34403-t34334+t34382+t34392+ \
               t34237*t34284*t34278*t34279*(t34334+t34391-t34390*t34319*t34384*t34385-a1p*c*c0p*t34270*t34308*(2.0/ \
               3.0))-t34324*t34353*t34237*t34278*t34279+t34320*t34237*t34274*t34275*t34284*t34278*4.0-Aa*t34335*t34353* \
               t34237*t34345*t34355*t34347*2.0+Aa*t34335*t34237*t34345*t34284*t34347*(t34393-t34274*t34275*t34278* \
               4.0)*2.0-t34402*t34335*t34237*t34355*t34284*t34347*t34396*t34397)+rho_a[index]*(-t34377+t34234*t34237* \
               (t34377-(1.0/(t34362*t34362)*t34357*(b2f*c*t34366*(1.0/3.0)+b4f*t34218*t34367*(2.0/3.0)+b1f*c*t34366* \
               t34368*(1.0/6.0)+b3f*c*t34216*t34366*(1.0/2.0)))/t34365+a1f*c*c0f*t34366*t34369*(2.0/3.0)-a1p*c*c0p* \
               t34229*t34366*(2.0/3.0))+a1p*c*c0p*t34229*t34366*(2.0/3.0))-t34234*t34237*(t34378-t34379))+(ccab0+ \
               ccab1*gcab*t34381*t34292+ccab2*t34307*t34293*t34285)*(t34462+t34256*(t34450+t34442+t34447-t34272*t34434* \
               t34443*t34327*2.0+t34353*t34237*t34278*t34279*(t34334+t34391-t34392-t34448)-a1p*c*c0p*t34270*t34428* \
               (8.0/9.0)-t34237*t34284*t34278*t34279*(t34450+t34442+t34447-t34272*t34434*t34443*t34327*2.0+1.0/(t34313* \
               t34313*t34313)*t34444*t34319*t34384*2.0-t34319*t34384*t34385*(b2f*c*t34428*(4.0/9.0)+b4f*t34218*t34429* \
               (1.0E1/9.0)+b1f*c*t34326*t34428*(2.0/9.0)+b3f*c*t34428*t34259*(2.0/3.0)-b1f*t34218*t34435*t34429*(1.0/ \
               3.6E1)+b3f*t34218*t34326*t34429*(1.0/1.2E1))-1.0/(t34313*t34313*t34313*t34313)*1.0/(t34316*t34316) \
               *t34444*t34238*t34319*(1.0/2.0)+a1f*c*c0f*t34317*t34428*(8.0/9.0)-a1p*c*c0p*t34270*t34428*(8.0/9.0) \
               -a1f*c*t34308*t34390*t34384*t34385*(2.0/3.0))-t34431*t34324*t34237*t34348*t34279*4.0-t34324*t34451* \
               t34237*t34284*t34279*2.0E1-t34431*t34433*t34237*t34278*t34279+t34324*t34353*t34237*t34348*t34279*4.0+ \
               t34324*t34237*t34275*t34284*t34278*1.2E1-t34433*t34237*t34284*t34348*t34279*8.0+t34324*t34237*t34278* \
               t34279*t34459+t34431*t34324*t34237*t34274*t34275*t34278*4.0+t34324*t34353*t34237*t34274*t34275*t34278* \
               4.0+Aa*t34431*t34460*t34335*t34237*t34345*t34347*2.0+Aa*t34335*t34353*t34237*t34345*t34453*t34347* \
               2.0+Aa*t34335*t34237*t34345*t34355*t34347*t34459*2.0-Aa*t34335*t34237*t34345*t34284*t34347*(t34451* \
               t34279*2.0E1-t34275*t34278*1.2E1)*2.0+t34402*t34431*t34335*t34237*t34355*t34347*t34396*t34397-t34402* \
               t34460*t34335*t34237*t34284*t34347*t34396*t34397-t34402*t34335*t34353*t34237*t34355*t34347*t34396* \
               t34397+t34402*t34335*t34237*t34453*t34284*t34347*t34396*t34397-1.0/(t34341*t34341*t34341)*t34335*t34461* \
               t34237*t34355*t34284*t34347*t34396*2.0+t34335*t34237*t34355*t34284*t34347*t34396*t34397*(b2a*c*t34428* \
               (4.0/9.0)+b4a*t34218*t34429*(1.0E1/9.0)+b1a*c*t34326*t34428*(2.0/9.0)+b3a*c*t34428*t34259*(2.0/3.0) \
               -b1a*t34218*t34435*t34429*(1.0/3.6E1)+b3a*t34218*t34326*t34429*(1.0/1.2E1))-Aa*a1a*c*t34431*t34308* \
               t34335*t34237*t34345*t34355*(2.0/3.0)+Aa*a1a*c*t34460*t34308*t34335*t34237*t34345*t34284*(2.0/3.0) \
               +Aa*a1a*c*t34308*t34335*t34353*t34237*t34345*t34355*(2.0/3.0)-Aa*a1a*c*t34308*t34335*t34237*t34345* \
               t34453*t34284*(2.0/3.0)-Aa*a1a*c*t34335*t34237*t34345*t34355*t34284*t34428*(8.0/9.0)+1.0/(t34341*t34341* \
               t34341*t34341)*t34335*1.0/(t34344*t34344)*t34461*t34237*t34336*t34355*t34284*t34347*(1.0/2.0)+a1a* \
               c*t34402*t34308*t34335*t34237*t34355*t34284*t34396*t34397*(2.0/3.0))-t34333*t34272*t34327*t34328*2.0+ \
               t34237*t34284*t34278*t34279*(t34334+t34391-t34392-t34448)*2.0+a1p*c*c0p*t34270*t34308*(4.0/3.0)+t34431* \
               t34324*t34237*t34278*t34279-t34324*t34353*t34237*t34278*t34279+t34324*t34237*t34284*t34348*t34279* \
               8.0+Aa*t34431*t34335*t34237*t34345*t34355*t34347*2.0-Aa*t34460*t34335*t34237*t34345*t34284*t34347* \
               2.0-Aa*t34335*t34353*t34237*t34345*t34355*t34347*2.0-t34402*t34335*t34237*t34355*t34284*t34347*t34396* \
               t34397*2.0+Aa*a1a*c*t34308*t34335*t34237*t34345*t34355*t34284*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t34464 = 1.0/pow(rho_b[index],1.0/3.0);
            double t34465 = c*t34464;
            double t34466 = sqrt(t34465);
            double t34467 = pow(t34465,3.0/2.0);
            double t34468 = c*c;
            double t34469 = 1.0/pow(rho_b[index],2.0/3.0);
            double t34470 = 1.0/c0p;
            double t34471 = b1p*t34466;
            double t34472 = b3p*t34467;
            double t34473 = b4p*t34468*t34469;
            double t34474 = b2p*c*t34464;
            double t34475 = t34471+t34472+t34473+t34474;
            double t34476 = 1.0/t34475;
            double t34477 = t34470*t34476*(1.0/2.0);
            double t34478 = t34477+1.0;
            double t34479 = log(t34478);
            double t34480 = a1p*c*t34464;
            double t34481 = t34480+1.0;
            double t34482 = 1.0/pow(rho_b[index],8.0/3.0);
            double t34483 = gamma_bb[index]*gamma_bb[index];
            double t34484 = gcaa*gcaa;
            double t34485 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t34486 = gamma_bb[index]*gcaa*t34482;
            double t34487 = t34486+1.0;
            double t34488 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t34489 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t34490 = gamma_bb[index]*gcaa*t34482*2.0;
            double t34491 = t34483*t34484*t34488;
            double t34492 = t34490+t34491+1.0;
            double t34495 = 1.0/pow(rho_a[index],8.0/3.0);
            double t34496 = gamma_aa[index]*t34495*(1.0/2.0);
            double t34497 = gamma_bb[index]*t34482*(1.0/2.0);
            double t34493 = t34496+t34497;
            double t34494 = gcab*gcab;
            double t34498 = t34493*t34493;
            double t34499 = rho_a[index]+rho_b[index];
            double t34500 = 1.0/pow(t34499,1.0/3.0);
            double t34501 = c*t34500;
            double t34502 = sqrt(t34501);
            double t34503 = b1p*t34502;
            double t34504 = pow(t34501,3.0/2.0);
            double t34505 = b3p*t34504;
            double t34506 = 1.0/pow(t34499,2.0/3.0);
            double t34507 = b4p*t34506*t34468;
            double t34508 = b2p*c*t34500;
            double t34509 = t34503+t34505+t34507+t34508;
            double t34510 = 1.0/pow(t34499,7.0/3.0);
            double t34511 = 1.0/pow(t34499,8.0/3.0);
            double t34512 = 1.0/sqrt(t34501);
            double t34513 = a1p*c*t34500;
            double t34514 = t34513+1.0;
            double t34515 = 1.0/t34509;
            double t34516 = t34470*t34515*(1.0/2.0);
            double t34517 = t34516+1.0;
            double t34518 = 1.0/t34517;
            double t34519 = 1.0/pow(t34499,4.0/3.0);
            double t34559 = 1.0/pow(t34499,5.0/3.0);
            double t34561 = b4p*t34468*t34559*(2.0/3.0);
            double t34562 = b2p*c*t34519*(1.0/3.0);
            double t34563 = b1p*c*t34512*t34519*(1.0/6.0);
            double t34564 = b3p*c*t34502*t34519*(1.0/2.0);
            double t34520 = t34561+t34562+t34563+t34564;
            double t34521 = two_13*2.0;
            double t34522 = t34521-2.0;
            double t34523 = 1.0/t34522;
            double t34524 = 1.0/c0f;
            double t34525 = rho_a[index]-rho_b[index];
            double t34526 = 1.0/t34499;
            double t34527 = t34525*t34526;
            double t34528 = b1f*t34502;
            double t34529 = b3f*t34504;
            double t34530 = b4f*t34506*t34468;
            double t34531 = b2f*c*t34500;
            double t34532 = t34530+t34531+t34528+t34529;
            double t34533 = 1.0/t34532;
            double t34534 = t34524*t34533*(1.0/2.0);
            double t34535 = t34534+1.0;
            double t34536 = log(t34535);
            double t34537 = a1f*c*t34500;
            double t34538 = t34537+1.0;
            double t34539 = log(t34517);
            double t34547 = c0f*t34536*t34538*2.0;
            double t34548 = c0p*t34514*t34539*2.0;
            double t34540 = t34547-t34548;
            double t34541 = t34525*t34525;
            double t34542 = t34527+1.0;
            double t34543 = pow(t34542,4.0/3.0);
            double t34544 = -t34527+1.0;
            double t34545 = pow(t34544,4.0/3.0);
            double t34546 = t34543+t34545-2.0;
            double t34549 = 1.0/(t34499*t34499);
            double t34550 = t34525*t34549;
            double t34551 = t34550+t34526;
            double t34552 = 1.0/(t34499*t34499*t34499*t34499);
            double t34553 = pow(t34542,1.0/3.0);
            double t34554 = t34551*t34553*(4.0/3.0);
            double t34555 = pow(t34544,1.0/3.0);
            double t34587 = t34551*t34555*(4.0/3.0);
            double t34556 = t34554-t34587;
            double t34557 = 1.0/(t34499*t34499*t34499*t34499*t34499);
            double t34558 = t34541*t34541;
            double t34560 = 1.0/(t34509*t34509);
            double t34565 = 1.0/t34535;
            double t34566 = 1.0/(t34532*t34532);
            double t34567 = b4f*t34468*t34559*(2.0/3.0);
            double t34568 = b2f*c*t34519*(1.0/3.0);
            double t34569 = b1f*c*t34512*t34519*(1.0/6.0);
            double t34570 = b3f*c*t34502*t34519*(1.0/2.0);
            double t34571 = t34570+t34567+t34568+t34569;
            double t34572 = t34520*t34514*t34560*t34518;
            double t34573 = a1f*c*c0f*t34536*t34519*(2.0/3.0);
            double t34574 = t34520*t34520;
            double t34575 = 1.0/pow(t34501,3.0/2.0);
            double t34576 = b4p*t34511*t34468*(1.0E1/9.0);
            double t34577 = b2p*c*t34510*(4.0/9.0);
            double t34578 = b1p*c*t34510*t34512*(2.0/9.0);
            double t34579 = b3p*c*t34510*t34502*(2.0/3.0);
            double t34580 = b3p*t34511*t34512*t34468*(1.0/1.2E1);
            double t34581 = t34580+t34576+t34577+t34578+t34579-b1p*t34511*t34575*t34468*(1.0/3.6E1);
            double t34582 = 1.0/(t34509*t34509*t34509);
            double t34583 = t34514*t34518*t34582*t34574*2.0;
            double t34584 = t34571*t34571;
            double t34585 = 1.0/(t34517*t34517);
            double t34586 = 1.0/(t34509*t34509*t34509*t34509);
            double t34588 = t34549*2.0;
            double t34589 = 1.0/(t34499*t34499*t34499);
            double t34590 = t34525*t34589*2.0;
            double t34591 = t34590+t34588;
            double t34592 = t34551*t34551;
            double t34593 = a1p*c*c0p*t34510*t34539*(8.0/9.0);
            double t34594 = 1.0/(t34499*t34499*t34499*t34499*t34499*t34499);
            double t34595 = 1.0/d2fz0;
            double t34596 = 1.0/Aa;
            double t34597 = b1a*t34502;
            double t34598 = b3a*t34504;
            double t34599 = b4a*t34506*t34468;
            double t34600 = b2a*c*t34500;
            double t34601 = t34600+t34597+t34598+t34599;
            double t34602 = 1.0/t34601;
            double t34603 = t34602*t34596*(1.0/2.0);
            double t34604 = t34603+1.0;
            double t34605 = log(t34604);
            double t34606 = a1a*c*t34500;
            double t34607 = t34606+1.0;
            double t34608 = t34553*t34591*(4.0/3.0);
            double t34609 = 1.0/pow(t34542,2.0/3.0);
            double t34610 = t34609*t34592*(4.0/9.0);
            double t34611 = 1.0/pow(t34544,2.0/3.0);
            double t34612 = t34611*t34592*(4.0/9.0);
            double t34613 = t34610+t34612+t34608-t34555*t34591*(4.0/3.0);
            double t34614 = t34541*t34525*t34552*4.0;
            double t34615 = t34557*t34558*4.0;
            double t34616 = t34614+t34615;
            double t34617 = 1.0/t34604;
            double t34618 = t34552*t34558;
            double t34619 = t34618-1.0;
            double t34620 = 1.0/(t34601*t34601);
            double t34621 = b4a*t34468*t34559*(2.0/3.0);
            double t34622 = b2a*c*t34519*(1.0/3.0);
            double t34623 = b1a*c*t34512*t34519*(1.0/6.0);
            double t34624 = b3a*c*t34502*t34519*(1.0/2.0);
            double t34625 = t34621+t34622+t34623+t34624;
            double t34626 = t34625*t34625;
            double t34628 = t34571*t34538*t34565*t34566;
            double t34629 = a1p*c*c0p*t34519*t34539*(2.0/3.0);
            double t34627 = t34572+t34573-t34628-t34629;
            double t34630 = pow(2.0,1.0/3.0);
            double t34631 = t34630*2.0;
            double t34632 = t34631-2.0;
            double t34633 = a1f*c*t34464;
            double t34634 = t34633+1.0;
            double t34635 = b1f*t34466;
            double t34636 = b3f*t34467;
            double t34637 = b4f*t34468*t34469;
            double t34638 = b2f*c*t34464;
            double t34639 = t34635+t34636+t34637+t34638;
            double t34640 = 1.0/t34639;
            double t34641 = t34640*t34524*(1.0/2.0);
            double t34642 = t34641+1.0;
            double t34643 = 1.0/pow(rho_b[index],4.0/3.0);
            double t34645 = 1.0/pow(rho_b[index],5.0/3.0);
            double t34646 = 1.0/sqrt(t34465);
            double t34652 = b4f*t34645*t34468*(2.0/3.0);
            double t34653 = b2f*c*t34643*(1.0/3.0);
            double t34654 = b1f*c*t34643*t34646*(1.0/6.0);
            double t34655 = b3f*c*t34643*t34466*(1.0/2.0);
            double t34644 = t34652+t34653+t34654+t34655;
            double t34657 = b4p*t34645*t34468*(2.0/3.0);
            double t34658 = b2p*c*t34643*(1.0/3.0);
            double t34659 = b1p*c*t34643*t34646*(1.0/6.0);
            double t34660 = b3p*c*t34643*t34466*(1.0/2.0);
            double t34647 = t34660+t34657+t34658+t34659;
            double t34648 = 1.0/t34642;
            double t34649 = 1.0/pow(rho_b[index],7.0/3.0);
            double t34650 = 1.0/t34478;
            double t34651 = 1.0/pow(t34465,3.0/2.0);
            double t34656 = t34644*t34644;
            double t34661 = t34647*t34647;
            double t34662 = log(t34642);
            double t34663 = 1.0/(t34639*t34639);
            double t34664 = 1.0/(t34475*t34475);
            double t34665 = 1.0/(t34475*t34475*t34475);
            double t34666 = t34650*t34481*t34661*t34665*2.0;
            double t34667 = b4p*t34482*t34468*(1.0E1/9.0);
            double t34668 = b2p*c*t34649*(4.0/9.0);
            double t34669 = b3p*t34482*t34646*t34468*(1.0/1.2E1);
            double t34670 = b1p*c*t34646*t34649*(2.0/9.0);
            double t34671 = b3p*c*t34466*t34649*(2.0/3.0);
            double t34744 = b1p*t34651*t34482*t34468*(1.0/3.6E1);
            double t34672 = t34670+t34671-t34744+t34667+t34668+t34669;
            double t34673 = 1.0/(t34478*t34478);
            double t34674 = 1.0/(t34475*t34475*t34475*t34475);
            double t34675 = a1p*c*c0p*t34649*t34479*(8.0/9.0);
            double t34676 = gcab*t34493;
            double t34677 = t34676+1.0;
            double t34678 = 1.0/t34677;
            double t34679 = t34494*t34498;
            double t34680 = gcab*t34493*2.0;
            double t34681 = t34680+t34679+1.0;
            double t34682 = 1.0/t34681;
            double t34683 = t34650*t34481*t34664*t34647;
            double t34684 = a1f*c*c0f*t34643*t34662*(2.0/3.0);
            double t34686 = a1p*c*c0p*t34643*t34479*(2.0/3.0);
            double t34689 = t34634*t34644*t34663*t34648;
            double t34685 = t34683+t34684-t34686-t34689;
            double t34687 = c0f*t34634*t34662*2.0;
            double t34688 = c0p*t34481*t34479*2.0;
            double t34690 = t34523*t34632*t34685;
            double t34691 = 1.0/t34487;
            double t34692 = 1.0/t34492;
            double t34693 = 1.0/pow(rho_a[index],1.0/3.0);
            double t34694 = c*t34693;
            double t34695 = sqrt(t34694);
            double t34696 = pow(t34694,3.0/2.0);
            double t34697 = 1.0/pow(rho_a[index],2.0/3.0);
            double t34698 = b1p*t34695;
            double t34699 = b3p*t34696;
            double t34700 = b4p*t34468*t34697;
            double t34701 = b2p*c*t34693;
            double t34702 = t34700+t34701+t34698+t34699;
            double t34703 = 1.0/t34702;
            double t34704 = t34703*t34470*(1.0/2.0);
            double t34705 = t34704+1.0;
            double t34706 = log(t34705);
            double t34707 = a1p*c*t34693;
            double t34708 = t34707+1.0;
            double t34709 = c0p*t34706*t34708*2.0;
            double t34710 = t34687-t34688;
            double t34711 = t34540*t34523*t34552*t34546*t34558;
            double t34712 = Aa*t34523*t34605*t34607*t34546*t34619*t34595*2.0;
            double t34713 = 1.0/(t34677*t34677);
            double t34714 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t34715 = gamma_bb[index]*gcab*t34489*(8.0/3.0);
            double t34716 = gamma_bb[index]*t34493*t34494*t34489*(8.0/3.0);
            double t34717 = t34715+t34716;
            double t34718 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t34719 = 1.0/(t34681*t34681);
            double t34720 = gx*gx;
            double t34721 = gamma_bb[index]*gx*t34482;
            double t34722 = t34721+1.0;
            double t34727 = gamma_bb[index]*gx*t34489*(1.6E1/3.0);
            double t34728 = t34720*t34483*t34485*(1.6E1/3.0);
            double t34723 = t34727+t34728;
            double t34724 = gamma_bb[index]*gx*t34482*2.0;
            double t34725 = t34720*t34483*t34488;
            double t34726 = t34724+t34725+1.0;
            double t34729 = 1.0/(t34726*t34726);
            double t34730 = 1.0/t34722;
            double t34731 = 1.0/t34726;
            double t34732 = 1.0/(t34722*t34722);
            double t34733 = ccaa1*gamma_bb[index]*gcaa*t34482*t34691;
            double t34734 = ccaa2*t34483*t34484*t34692*t34488;
            double t34735 = ccaa0+t34733+t34734;
            double t34736 = 1.0/(t34639*t34639*t34639);
            double t34737 = b4f*t34482*t34468*(1.0E1/9.0);
            double t34738 = b2f*c*t34649*(4.0/9.0);
            double t34739 = b3f*t34482*t34646*t34468*(1.0/1.2E1);
            double t34740 = b1f*c*t34646*t34649*(2.0/9.0);
            double t34741 = b3f*c*t34466*t34649*(2.0/3.0);
            double t34742 = t34740+t34741+t34737+t34738+t34739-b1f*t34651*t34482*t34468*(1.0/3.6E1);
            double t34743 = t34634*t34742*t34663*t34648;
            double t34745 = t34650*t34481*t34672*t34664;
            double t34746 = 1.0/(t34642*t34642);
            double t34747 = 1.0/(t34639*t34639*t34639*t34639);
            double t34748 = t34524*t34634*t34656*t34746*t34747*(1.0/2.0);
            double t34749 = t34470*t34481*t34661*t34673*t34674*(1.0/2.0);
            double t34750 = a1f*c*t34643*t34644*t34663*t34648*(2.0/3.0);
            double t34751 = a1p*c*t34650*t34643*t34664*t34647*(2.0/3.0);
            double t34752 = t34710*t34523*t34632;
            double t34753 = t34752+t34688;
            double t34754 = 1.0/pow(rho_b[index],1.0E1);
            double t34755 = 1.0/(t34487*t34487);
            double t34756 = gamma_bb[index]*gcaa*t34489*(1.6E1/3.0);
            double t34757 = t34483*t34484*t34485*(1.6E1/3.0);
            double t34758 = t34756+t34757;
            double t34759 = 1.0/(t34492*t34492);
            double t34760 = ccaa1*gamma_bb[index]*gcaa*t34691*t34489*(8.0/3.0);
            double t34761 = ccaa2*t34483*t34484*t34485*t34692*(1.6E1/3.0);
            double t34762 = t34760+t34761-ccaa1*t34483*t34484*t34485*t34755*(8.0/3.0)-ccaa2*t34483*t34484*t34488* \
               t34758*t34759;
            double t34763 = t34690-t34683+t34686;
            v_rho_b_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t34489*t34678*(4.0/3.0)-ccab2*t34717*t34494*t34719* \
               t34498-ccab1*gamma_bb[index]*t34713*t34493*t34494*t34489*(4.0/3.0)+ccab2*gamma_bb[index]*t34493*t34682* \
               t34494*t34489*(8.0/3.0))*(t34711+t34712+t34548-t34688+rho_b[index]*t34763-t34499*(-t34572+t34629+t34523* \
               t34552*t34546*t34558*(t34572+t34573-t34628-t34629)+t34540*t34523*t34552*t34556*t34558+t34540*t34523* \
               t34546*t34557*t34558*4.0+t34540*t34523*t34541*t34525*t34552*t34546*4.0+Aa*t34523*t34605*t34607*t34616* \
               t34546*t34595*2.0+Aa*t34523*t34605*t34607*t34556*t34619*t34595*2.0-t34620*t34523*t34607*t34625*t34617* \
               t34546*t34619*t34595+Aa*a1a*c*t34523*t34605*t34519*t34546*t34619*t34595*(2.0/3.0))-t34710*t34523*t34632) \
               *2.0+t34735*t34763*2.0+(ccab0+ccab1*gcab*t34493*t34678+ccab2*t34682*t34494*t34498)*(-rho_b[index]* \
               (t34751+t34745-t34666-t34675+t34749+t34523*t34632*(t34750+t34743+t34666+t34675+t34748-t34650*t34481* \
               t34672*t34664-t34634*t34736*t34656*t34648*2.0-a1f*c*c0f*t34662*t34649*(8.0/9.0)-t34470*t34481*t34661* \
               t34673*t34674*(1.0/2.0)-a1p*c*t34650*t34643*t34664*t34647*(2.0/3.0)))-t34499*(t34583+t34593-t34514* \
               t34560*t34518*t34581-t34523*t34552*t34546*t34558*(t34583+t34593-t34514*t34560*t34518*t34581-1.0/(t34532* \
               t34532*t34532)*t34538*t34565*t34584*2.0+t34538*t34565*t34566*(b2f*c*t34510*(4.0/9.0)+b4f*t34511*t34468* \
               (1.0E1/9.0)+b1f*c*t34510*t34512*(2.0/9.0)+b3f*c*t34510*t34502*(2.0/3.0)-b1f*t34511*t34575*t34468*(1.0/ \
               3.6E1)+b3f*t34511*t34512*t34468*(1.0/1.2E1))+1.0/(t34532*t34532*t34532*t34532)*t34524*1.0/(t34535* \
               t34535)*t34538*t34584*(1.0/2.0)-a1f*c*c0f*t34510*t34536*(8.0/9.0)-t34514*t34470*t34574*t34585*t34586* \
               (1.0/2.0)+a1f*c*t34571*t34519*t34565*t34566*(2.0/3.0)-a1p*c*t34520*t34560*t34518*t34519*(2.0/3.0)) \
               +t34540*t34523*t34541*t34552*t34546*1.2E1+t34540*t34523*t34613*t34552*t34558+t34540*t34523*t34546* \
               t34558*t34594*2.0E1+t34540*t34523*t34556*t34557*t34558*8.0+t34523*t34552*t34627*t34556*t34558*2.0- \
               t34514*t34470*t34574*t34585*t34586*(1.0/2.0)+t34523*t34546*t34627*t34557*t34558*8.0+t34540*t34523* \
               t34541*t34525*t34552*t34556*8.0+t34540*t34523*t34541*t34525*t34546*t34557*3.2E1+t34523*t34541*t34525* \
               t34552*t34546*t34627*8.0-a1p*c*t34520*t34560*t34518*t34519*(2.0/3.0)+Aa*t34523*t34613*t34605*t34607* \
               t34619*t34595*2.0+Aa*t34523*t34605*t34607*t34616*t34556*t34595*4.0+Aa*t34523*t34605*t34607*t34546* \
               t34595*(t34541*t34552*1.2E1+t34558*t34594*2.0E1+t34541*t34525*t34557*3.2E1)*2.0-t34620*t34523*t34607* \
               t34616*t34625*t34617*t34546*t34595*2.0-t34620*t34523*t34607*t34625*t34617*t34556*t34619*t34595*2.0+ \
               1.0/(t34601*t34601*t34601)*t34523*t34607*t34617*t34626*t34546*t34619*t34595*2.0-t34620*t34523*t34607* \
               t34617*t34546*t34619*t34595*(b2a*c*t34510*(4.0/9.0)+b4a*t34511*t34468*(1.0E1/9.0)+b1a*c*t34510*t34512* \
               (2.0/9.0)+b3a*c*t34510*t34502*(2.0/3.0)-b1a*t34511*t34575*t34468*(1.0/3.6E1)+b3a*t34511*t34512*t34468* \
               (1.0/1.2E1))+Aa*a1a*c*t34510*t34523*t34605*t34546*t34619*t34595*(8.0/9.0)+Aa*a1a*c*t34523*t34605*t34616* \
               t34519*t34546*t34595*(4.0/3.0)+Aa*a1a*c*t34523*t34605*t34519*t34556*t34619*t34595*(4.0/3.0)-1.0/(t34601* \
               t34601*t34601*t34601)*t34523*1.0/(t34604*t34604)*t34607*t34626*t34546*t34619*t34595*t34596*(1.0/2.0) \
               -a1a*c*t34620*t34523*t34625*t34617*t34519*t34546*t34619*t34595*(2.0/3.0))-t34523*t34632*t34685*2.0- \
               t34520*t34514*t34560*t34518*2.0+t34650*t34481*t34664*t34647*2.0+t34523*t34552*t34546*t34558*(t34572+ \
               t34573-t34628-t34629)*2.0+a1p*c*c0p*t34519*t34539*(4.0/3.0)-a1p*c*c0p*t34643*t34479*(4.0/3.0)+t34540* \
               t34523*t34552*t34556*t34558*2.0+t34540*t34523*t34546*t34557*t34558*8.0+t34540*t34523*t34541*t34525* \
               t34552*t34546*8.0+Aa*t34523*t34605*t34607*t34616*t34546*t34595*4.0+Aa*t34523*t34605*t34607*t34556* \
               t34619*t34595*4.0-t34620*t34523*t34607*t34625*t34617*t34546*t34619*t34595*2.0+Aa*a1a*c*t34523*t34605* \
               t34519*t34546*t34619*t34595*(4.0/3.0))+t34762*(t34688+t34523*t34632*(t34687-c0p*t34481*t34479*2.0) \
               )*2.0+(rho_b[index]*t34753+rho_a[index]*(t34709-t34523*t34632*(t34709-c0f*log((t34524*(1.0/2.0))/(b1f* \
               t34695+b3f*t34696+b2f*c*t34693+b4f*t34468*t34697)+1.0)*(a1f*c*t34693+1.0)*2.0))-t34499*(t34711+t34712+ \
               t34548))*(-ccab2*t34494*t34719*t34498*(gamma_bb[index]*gcab*t34718*(8.8E1/9.0)+t34714*t34483*t34494* \
               (3.2E1/9.0)+gamma_bb[index]*t34493*t34718*t34494*(8.8E1/9.0))+ccab2*1.0/(t34681*t34681*t34681)*(t34717* \
               t34717)*t34494*t34498*2.0+ccab1*gamma_bb[index]*gcab*t34718*t34678*(4.4E1/9.0)-ccab1*t34713*t34714* \
               t34483*t34494*(3.2E1/9.0)+ccab2*t34714*t34483*t34682*t34494*(3.2E1/9.0)-ccab1*gamma_bb[index]*t34713* \
               t34493*t34718*t34494*(4.4E1/9.0)+ccab2*gamma_bb[index]*t34493*t34682*t34718*t34494*(8.8E1/9.0)-ccab2* \
               gamma_bb[index]*t34717*t34493*t34494*t34719*t34489*(1.6E1/3.0)+ccab1*gcab*t34714*t34483*t34493*t34494* \
               1.0/(t34677*t34677*t34677)*(3.2E1/9.0))+c0*t34469*(cx0+cx1*gamma_bb[index]*gx*t34730*t34482+cx2*t34720* \
               t34731*t34483*t34488)*(4.0/9.0)-rho_b[index]*t34753*(ccaa1*gamma_bb[index]*gcaa*t34691*t34718*(8.8E1/ \
               9.0)-ccaa1*t34714*t34483*t34484*t34755*2.4E1+ccaa2*t34714*t34483*t34484*t34692*(3.04E2/9.0)-ccaa2* \
               t34483*t34484*t34485*t34758*t34759*(3.2E1/3.0)-ccaa2*t34483*t34484*t34488*t34759*(gamma_bb[index]* \
               gcaa*t34718*(1.76E2/9.0)+t34714*t34483*t34484*(3.04E2/9.0))+ccaa2*t34483*1.0/(t34492*t34492*t34492) \
               *t34484*t34488*(t34758*t34758)*2.0+ccaa1*gamma_bb[index]*gcaa*t34483*t34484*t34754*1.0/(t34487*t34487* \
               t34487)*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t34730*t34718*(8.8E1/9.0) \
               -cx1*t34720*t34714*t34732*t34483*2.4E1+cx2*t34720*t34731*t34714*t34483*(3.04E2/9.0)-cx2*t34720*t34723* \
               t34483*t34485*t34729*(3.2E1/3.0)-cx2*t34720*t34483*t34729*t34488*(gamma_bb[index]*gx*t34718*(1.76E2/ \
               9.0)+t34720*t34714*t34483*(3.04E2/9.0))+cx2*t34720*(t34723*t34723)*t34483*1.0/(t34726*t34726*t34726) \
               *t34488*2.0+cx1*gamma_bb[index]*gx*t34720*1.0/(t34722*t34722*t34722)*t34483*t34754*(1.28E2/9.0))-c0* \
               pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t34730*t34489*(8.0/3.0)-cx1*t34720*t34732*t34483* \
               t34485*(8.0/3.0)+cx2*t34720*t34731*t34483*t34485*(1.6E1/3.0)-cx2*t34720*t34723*t34483*t34729*t34488) \
               *(8.0/3.0)+rho_b[index]*t34735*(t34751+t34745-t34666-t34675+t34749+t34523*t34632*(t34750-t34751+t34743- \
               t34745+t34666+t34675+t34748-t34749-t34634*t34736*t34656*t34648*2.0-a1f*c*c0f*t34662*t34649*(8.0/9.0) \
               ))-rho_b[index]*t34762*t34763*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t36031 = 1.0/pow(rho_b[index],1.0/3.0);
            double t36032 = c*t36031;
            double t36033 = sqrt(t36032);
            double t36034 = pow(t36032,3.0/2.0);
            double t36035 = c*c;
            double t36036 = 1.0/pow(rho_b[index],2.0/3.0);
            double t36037 = 1.0/c0p;
            double t36038 = b1p*t36033;
            double t36039 = b3p*t36034;
            double t36040 = b4p*t36035*t36036;
            double t36041 = b2p*c*t36031;
            double t36042 = t36040+t36041+t36038+t36039;
            double t36043 = 1.0/t36042;
            double t36044 = t36043*t36037*(1.0/2.0);
            double t36045 = t36044+1.0;
            double t36046 = log(t36045);
            double t36047 = a1p*c*t36031;
            double t36048 = t36047+1.0;
            double t36049 = 1.0/pow(rho_b[index],8.0/3.0);
            double t36050 = gamma_bb[index]*gamma_bb[index];
            double t36051 = gcaa*gcaa;
            double t36052 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t36053 = gamma_bb[index]*gcaa*t36049;
            double t36054 = t36053+1.0;
            double t36055 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t36056 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t36057 = gamma_bb[index]*gcaa*t36049*2.0;
            double t36058 = t36050*t36051*t36055;
            double t36059 = t36057+t36058+1.0;
            double t36060 = pow(2.0,1.0/3.0);
            double t36061 = t36060*2.0;
            double t36062 = t36061-2.0;
            double t36063 = two_13*2.0;
            double t36064 = t36063-2.0;
            double t36065 = 1.0/t36064;
            double t36066 = a1f*c*t36031;
            double t36067 = t36066+1.0;
            double t36068 = 1.0/c0f;
            double t36069 = b1f*t36033;
            double t36070 = b3f*t36034;
            double t36071 = b4f*t36035*t36036;
            double t36072 = b2f*c*t36031;
            double t36073 = t36070+t36071+t36072+t36069;
            double t36074 = 1.0/t36073;
            double t36075 = t36074*t36068*(1.0/2.0);
            double t36076 = t36075+1.0;
            double t36077 = 1.0/pow(rho_b[index],4.0/3.0);
            double t36078 = 1.0/pow(rho_b[index],5.0/3.0);
            double t36079 = 1.0/sqrt(t36032);
            double t36080 = log(t36076);
            double t36081 = 1.0/t36045;
            double t36082 = 1.0/(t36042*t36042);
            double t36083 = b4p*t36035*t36078*(2.0/3.0);
            double t36084 = b2p*c*t36077*(1.0/3.0);
            double t36085 = b1p*c*t36077*t36079*(1.0/6.0);
            double t36086 = b3p*c*t36033*t36077*(1.0/2.0);
            double t36087 = t36083+t36084+t36085+t36086;
            double t36088 = t36081*t36082*t36048*t36087;
            double t36089 = 1.0/t36054;
            double t36090 = 1.0/t36059;
            double t36091 = gx*gx;
            double t36092 = gamma_bb[index]*gx*t36049;
            double t36093 = t36092+1.0;
            double t36094 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t36099 = gamma_bb[index]*gx*t36056*(1.6E1/3.0);
            double t36100 = t36050*t36052*t36091*(1.6E1/3.0);
            double t36095 = t36100+t36099;
            double t36096 = gamma_bb[index]*gx*t36049*2.0;
            double t36097 = t36050*t36055*t36091;
            double t36098 = t36096+t36097+1.0;
            double t36101 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t36102 = 1.0/(t36098*t36098);
            double t36103 = 1.0/t36093;
            double t36104 = 1.0/t36098;
            double t36105 = 1.0/(t36093*t36093);
            double t36106 = ccaa1*gamma_bb[index]*gcaa*t36049*t36089;
            double t36107 = ccaa2*t36050*t36051*t36090*t36055;
            double t36108 = ccaa0+t36106+t36107;
            double t36109 = 1.0/t36076;
            double t36110 = b4f*t36035*t36078*(2.0/3.0);
            double t36111 = b2f*c*t36077*(1.0/3.0);
            double t36112 = b1f*c*t36077*t36079*(1.0/6.0);
            double t36113 = b3f*c*t36033*t36077*(1.0/2.0);
            double t36114 = t36110+t36111+t36112+t36113;
            double t36115 = 1.0/(t36073*t36073);
            double t36116 = 1.0/pow(rho_b[index],7.0/3.0);
            double t36117 = 1.0/pow(t36032,3.0/2.0);
            double t36118 = t36114*t36114;
            double t36119 = t36087*t36087;
            double t36120 = 1.0/(t36042*t36042*t36042);
            double t36121 = t36120*t36081*t36119*t36048*2.0;
            double t36122 = b4p*t36035*t36049*(1.0E1/9.0);
            double t36123 = b2p*c*t36116*(4.0/9.0);
            double t36124 = b3p*t36035*t36049*t36079*(1.0/1.2E1);
            double t36125 = b1p*c*t36116*t36079*(2.0/9.0);
            double t36126 = b3p*c*t36033*t36116*(2.0/3.0);
            double t36127 = t36122+t36123+t36124+t36125+t36126-b1p*t36035*t36117*t36049*(1.0/3.6E1);
            double t36128 = 1.0/(t36045*t36045);
            double t36129 = 1.0/(t36042*t36042*t36042*t36042);
            double t36130 = a1p*c*c0p*t36116*t36046*(8.0/9.0);
            double t36131 = c0f*t36080*t36067*2.0;
            double t36132 = c0p*t36046*t36048*2.0;
            double t36133 = 1.0/pow(rho_b[index],1.0E1);
            double t36134 = 1.0/(t36054*t36054);
            double t36135 = gamma_bb[index]*gcaa*t36056*(1.6E1/3.0);
            double t36136 = t36050*t36051*t36052*(1.6E1/3.0);
            double t36137 = t36135+t36136;
            double t36138 = 1.0/(t36059*t36059);
            double t36139 = a1f*c*c0f*t36080*t36077*(2.0/3.0);
            double t36140 = a1p*c*c0p*t36046*t36077*(2.0/3.0);
            double t36141 = ccaa1*gamma_bb[index]*gcaa*t36056*t36089*(8.0/3.0);
            double t36142 = ccaa2*t36050*t36051*t36052*t36090*(1.6E1/3.0);
            double t36143 = t36141+t36142-ccaa1*t36050*t36051*t36052*t36134*(8.0/3.0)-ccaa2*t36050*t36051*t36055* \
               t36137*t36138;
            v_rho_b_rho_b_[index] = t36143*(t36132+t36062*t36065*(t36131-c0p*t36046*t36048*2.0))*2.0+t36108*(t36140- \
               t36088+t36062*t36065*(t36139+t36088-t36114*t36115*t36109*t36067-a1p*c*c0p*t36046*t36077*(2.0/3.0)) \
               )*2.0+c0*t36036*(cx0+cx1*gamma_bb[index]*gx*t36103*t36049+cx2*t36050*t36104*t36055*t36091)*(4.0/9.0) \
               -rho_b[index]*(t36132+t36062*t36065*(t36131-t36132))*(ccaa1*gamma_bb[index]*gcaa*t36101*t36089*(8.8E1/ \
               9.0)-ccaa1*t36050*t36051*t36134*t36094*2.4E1+ccaa2*t36050*t36051*t36090*t36094*(3.04E2/9.0)-ccaa2* \
               t36050*t36051*t36052*t36137*t36138*(3.2E1/3.0)-ccaa2*t36050*t36051*t36055*t36138*(gamma_bb[index]* \
               gcaa*t36101*(1.76E2/9.0)+t36050*t36051*t36094*(3.04E2/9.0))+ccaa2*t36050*t36051*t36055*(t36137*t36137) \
               *1.0/(t36059*t36059*t36059)*2.0+ccaa1*gamma_bb[index]*gcaa*t36050*t36051*t36133*1.0/(t36054*t36054* \
               t36054)*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t36101*t36103*(8.8E1/9.0) \
               -cx1*t36050*t36105*t36091*t36094*2.4E1+cx2*t36050*t36104*t36091*t36094*(3.04E2/9.0)-cx2*t36102*t36050* \
               t36052*t36091*t36095*(3.2E1/3.0)-cx2*t36102*t36050*t36055*t36091*(gamma_bb[index]*gx*t36101*(1.76E2/ \
               9.0)+t36050*t36091*t36094*(3.04E2/9.0))+cx2*t36050*t36055*t36091*(t36095*t36095)*1.0/(t36098*t36098* \
               t36098)*2.0+cx1*gamma_bb[index]*gx*t36050*t36133*t36091*1.0/(t36093*t36093*t36093)*(1.28E2/9.0))+rho_b[index]* \
               t36108*(-t36121-t36130+t36062*t36065*(t36121+t36130-t36081*t36082*t36127*t36048-1.0/(t36073*t36073* \
               t36073)*t36109*t36118*t36067*2.0+t36115*t36109*t36067*(b2f*c*t36116*(4.0/9.0)+b4f*t36035*t36049*(1.0E1/ \
               9.0)+b1f*c*t36116*t36079*(2.0/9.0)+b3f*c*t36033*t36116*(2.0/3.0)-b1f*t36035*t36117*t36049*(1.0/3.6E1) \
               +b3f*t36035*t36049*t36079*(1.0/1.2E1))+1.0/(t36073*t36073*t36073*t36073)*t36118*t36067*1.0/(t36076* \
               t36076)*t36068*(1.0/2.0)-a1f*c*c0f*t36080*t36116*(8.0/9.0)-t36037*t36119*t36128*t36048*t36129*(1.0/ \
               2.0)+a1f*c*t36114*t36115*t36109*t36077*(2.0/3.0)-a1p*c*t36081*t36082*t36077*t36087*(2.0/3.0))+t36081* \
               t36082*t36127*t36048+t36037*t36119*t36128*t36048*t36129*(1.0/2.0)+a1p*c*t36081*t36082*t36077*t36087* \
               (2.0/3.0))-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t36103*t36056*(8.0/3.0)-cx1*t36050* \
               t36105*t36052*t36091*(8.0/3.0)+cx2*t36050*t36104*t36052*t36091*(1.6E1/3.0)-cx2*t36102*t36050*t36055* \
               t36091*t36095)*(8.0/3.0)+rho_b[index]*t36143*(-t36140+t36088+t36062*t36065*(t36140-t36139-t36088+t36114* \
               t36115*t36109*t36067))*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t34765 = 1.0/pow(rho_a[index],1.0/3.0);
                double t34766 = c*t34765;
                double t34767 = sqrt(t34766);
                double t34768 = pow(t34766,3.0/2.0);
                double t34769 = c*c;
                double t34770 = 1.0/pow(rho_a[index],2.0/3.0);
                double t34771 = 1.0/c0p;
                double t34772 = b1p*t34767;
                double t34773 = b3p*t34768;
                double t34774 = b4p*t34770*t34769;
                double t34775 = b2p*c*t34765;
                double t34776 = t34772+t34773+t34774+t34775;
                double t34777 = 1.0/t34776;
                double t34778 = t34771*t34777*(1.0/2.0);
                double t34779 = t34778+1.0;
                double t34780 = log(t34779);
                double t34781 = a1p*c*t34765;
                double t34782 = t34781+1.0;
                double t34783 = pow(2.0,1.0/3.0);
                double t34784 = t34783*2.0;
                double t34785 = t34784-2.0;
                double t34786 = two_13*2.0;
                double t34787 = t34786-2.0;
                double t34788 = 1.0/t34787;
                double t34789 = 1.0/c0f;
                double t34790 = 1.0/pow(rho_b[index],1.0/3.0);
                double t34791 = c*t34790;
                double t34792 = sqrt(t34791);
                double t34793 = pow(t34791,3.0/2.0);
                double t34794 = 1.0/pow(rho_b[index],2.0/3.0);
                double t34795 = b1p*t34792;
                double t34796 = b3p*t34793;
                double t34797 = b4p*t34794*t34769;
                double t34798 = b2p*c*t34790;
                double t34799 = t34795+t34796+t34797+t34798;
                double t34800 = 1.0/t34799;
                double t34801 = t34800*t34771*(1.0/2.0);
                double t34802 = t34801+1.0;
                double t34803 = log(t34802);
                double t34804 = a1p*c*t34790;
                double t34805 = t34804+1.0;
                double t34806 = c0p*t34803*t34805*2.0;
                double t34807 = rho_a[index]+rho_b[index];
                double t34808 = 1.0/pow(t34807,1.0/3.0);
                double t34809 = c*t34808;
                double t34810 = sqrt(t34809);
                double t34811 = pow(t34809,3.0/2.0);
                double t34812 = 1.0/pow(t34807,2.0/3.0);
                double t34813 = b1p*t34810;
                double t34814 = b3p*t34811;
                double t34815 = b4p*t34812*t34769;
                double t34816 = b2p*c*t34808;
                double t34817 = t34813+t34814+t34815+t34816;
                double t34818 = 1.0/t34817;
                double t34819 = t34771*t34818*(1.0/2.0);
                double t34820 = t34819+1.0;
                double t34821 = log(t34820);
                double t34822 = a1p*c*t34808;
                double t34823 = t34822+1.0;
                double t34824 = c0p*t34821*t34823*2.0;
                double t34825 = rho_a[index]-rho_b[index];
                double t34826 = t34825*t34825;
                double t34827 = 1.0/t34807;
                double t34828 = t34825*t34827;
                double t34829 = 1.0/(t34807*t34807*t34807*t34807);
                double t34830 = t34826*t34826;
                double t34831 = t34828+1.0;
                double t34832 = pow(t34831,4.0/3.0);
                double t34833 = -t34828+1.0;
                double t34834 = pow(t34833,4.0/3.0);
                double t34835 = t34832+t34834-2.0;
                double t34836 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t34837 = 1.0/pow(rho_a[index],8.0/3.0);
                double t34838 = gamma_aa[index]*t34837*(1.0/2.0);
                double t34839 = 1.0/pow(rho_b[index],8.0/3.0);
                double t34840 = gamma_bb[index]*t34839*(1.0/2.0);
                double t34841 = t34840+t34838;
                double t34842 = gcab*t34841;
                double t34843 = t34842+1.0;
                double t34844 = gcab*gcab;
                double t34845 = t34841*t34841;
                double t34846 = t34844*t34845;
                double t34847 = gcab*t34841*2.0;
                double t34848 = t34846+t34847+1.0;
                double t34849 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t34850 = 1.0/(t34843*t34843);
                double t34851 = 1.0/t34848;
                double t34852 = 1.0/(t34848*t34848);
                double t34853 = gamma_aa[index]*gcab*t34836*(8.0/3.0);
                double t34854 = gamma_aa[index]*t34841*t34844*t34836*(8.0/3.0);
                double t34855 = t34853+t34854;
                double t34856 = gcab*t34837;
                double t34857 = t34841*t34844*t34837;
                double t34858 = t34856+t34857;
                double t34859 = b1f*t34767;
                double t34860 = b3f*t34768;
                double t34861 = b4f*t34770*t34769;
                double t34862 = b2f*c*t34765;
                double t34863 = t34860+t34861+t34862+t34859;
                double t34864 = 1.0/t34863;
                double t34865 = t34864*t34789*(1.0/2.0);
                double t34866 = t34865+1.0;
                double t34867 = log(t34866);
                double t34868 = a1f*c*t34765;
                double t34869 = t34868+1.0;
                double t34870 = c0f*t34867*t34869*2.0;
                double t34871 = c0p*t34780*t34782*2.0;
                double t34872 = gcaa*gcaa;
                double t34873 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t34874 = gamma_aa[index]*gcaa*t34837;
                double t34875 = t34874+1.0;
                double t34876 = gamma_aa[index]*gamma_aa[index];
                double t34877 = gamma_aa[index]*gcaa*t34837*2.0;
                double t34878 = t34872*t34873*t34876;
                double t34879 = t34877+t34878+1.0;
                double t34880 = 1.0/t34843;
                double t34881 = 1.0/pow(t34807,4.0/3.0);
                double t34882 = b1f*t34810;
                double t34883 = b3f*t34811;
                double t34884 = b4f*t34812*t34769;
                double t34885 = b2f*c*t34808;
                double t34886 = t34882+t34883+t34884+t34885;
                double t34887 = 1.0/t34886;
                double t34888 = t34887*t34789*(1.0/2.0);
                double t34889 = t34888+1.0;
                double t34890 = log(t34889);
                double t34891 = a1f*c*t34808;
                double t34892 = t34891+1.0;
                double t34894 = c0f*t34890*t34892*2.0;
                double t34893 = t34824-t34894;
                double t34895 = 1.0/(t34807*t34807);
                double t34922 = t34825*t34895;
                double t34896 = -t34922+t34827;
                double t34897 = 1.0/pow(t34807,5.0/3.0);
                double t34898 = 1.0/sqrt(t34809);
                double t34899 = 1.0/t34820;
                double t34900 = 1.0/(t34817*t34817);
                double t34901 = b4p*t34769*t34897*(2.0/3.0);
                double t34902 = b2p*c*t34881*(1.0/3.0);
                double t34903 = b1p*c*t34881*t34898*(1.0/6.0);
                double t34904 = b3p*c*t34810*t34881*(1.0/2.0);
                double t34905 = t34901+t34902+t34903+t34904;
                double t34906 = t34900*t34823*t34905*t34899;
                double t34907 = 1.0/d2fz0;
                double t34908 = 1.0/Aa;
                double t34909 = b1a*t34810;
                double t34910 = b3a*t34811;
                double t34911 = b4a*t34812*t34769;
                double t34912 = b2a*c*t34808;
                double t34913 = t34910+t34911+t34912+t34909;
                double t34914 = 1.0/t34913;
                double t34915 = t34914*t34908*(1.0/2.0);
                double t34916 = t34915+1.0;
                double t34917 = log(t34916);
                double t34918 = a1a*c*t34808;
                double t34919 = t34918+1.0;
                double t34920 = 1.0/(t34807*t34807*t34807*t34807*t34807);
                double t34921 = pow(t34831,1.0/3.0);
                double t34923 = t34921*t34896*(4.0/3.0);
                double t34924 = pow(t34833,1.0/3.0);
                double t34925 = t34923-t34924*t34896*(4.0/3.0);
                double t34926 = t34830*t34829;
                double t34927 = t34926-1.0;
                double t34928 = 1.0/pow(rho_a[index],4.0/3.0);
                double t34929 = 1.0/pow(rho_a[index],5.0/3.0);
                double t34930 = 1.0/sqrt(t34766);
                double t34931 = 1.0/t34779;
                double t34932 = 1.0/(t34776*t34776);
                double t34933 = b4p*t34929*t34769*(2.0/3.0);
                double t34934 = b2p*c*t34928*(1.0/3.0);
                double t34935 = b1p*c*t34930*t34928*(1.0/6.0);
                double t34936 = b3p*c*t34928*t34767*(1.0/2.0);
                double t34937 = t34933+t34934+t34935+t34936;
                double t34938 = t34931*t34932*t34782*t34937;
                double t34939 = t34870-t34871;
                double t34940 = t34785*t34939*t34788;
                double t34941 = Aa*t34835*t34907*t34917*t34927*t34919*t34788*2.0;
                double t34942 = t34940+t34871;
                double t34943 = 1.0/t34875;
                double t34944 = 1.0/t34879;
                double t34945 = 1.0/(t34875*t34875);
                double t34946 = 1.0/(t34879*t34879);
                double t34947 = gcaa*t34837*2.0;
                double t34948 = gamma_aa[index]*t34872*t34873*2.0;
                double t34949 = t34947+t34948;
                double t34950 = gamma_aa[index]*gcaa*t34836*(1.6E1/3.0);
                double t34951 = t34872*t34849*t34876*(1.6E1/3.0);
                double t34952 = t34950+t34951;
                double t34953 = gx*gx;
                double t34954 = gamma_aa[index]*gx*t34837;
                double t34955 = t34954+1.0;
                double t34956 = gamma_aa[index]*gx*t34837*2.0;
                double t34957 = t34953*t34873*t34876;
                double t34958 = t34956+t34957+1.0;
                double t34959 = 1.0/t34866;
                double t34960 = 1.0/(t34863*t34863);
                double t34961 = b4f*t34929*t34769*(2.0/3.0);
                double t34962 = b2f*c*t34928*(1.0/3.0);
                double t34963 = b1f*c*t34930*t34928*(1.0/6.0);
                double t34964 = b3f*c*t34928*t34767*(1.0/2.0);
                double t34965 = t34961+t34962+t34963+t34964;
                double t34966 = a1f*c*c0f*t34928*t34867*(2.0/3.0);
                double t34967 = a1p*c*c0p*t34780*t34928*(2.0/3.0);
                double t34968 = ccaa1*gcaa*t34943*t34837;
                double t34969 = ccaa2*gamma_aa[index]*t34872*t34944*t34873*2.0;
                double t34970 = t34968+t34969-ccaa1*gamma_aa[index]*t34872*t34873*t34945-ccaa2*t34872*t34873*t34946* \
                   t34876*t34949;
                double t34971 = 1.0/t34955;
                double t34972 = 1.0/t34958;
                double t34973 = 1.0/(t34955*t34955);
                double t34974 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t34975 = 1.0/(t34958*t34958);
                double t34976 = gx*t34837*2.0;
                double t34977 = gamma_aa[index]*t34953*t34873*2.0;
                double t34978 = t34976+t34977;
                double t34979 = gamma_aa[index]*gx*t34836*(1.6E1/3.0);
                double t34980 = t34953*t34849*t34876*(1.6E1/3.0);
                double t34981 = t34980+t34979;
                v_rho_a_gamma_aa_[index] = -t34942*t34970+(ccab1*gcab*t34880*t34837*(1.0/2.0)-ccab1*t34841*t34850* \
                   t34844*t34837*(1.0/2.0)+ccab2*t34841*t34851*t34844*t34837-ccab2*t34852*t34844*t34845*t34858)*(t34940- \
                   t34824-t34941+t34871-rho_a[index]*(-t34938+t34967+t34785*t34788*(t34938+t34966-t34960*t34965*t34869* \
                   t34959-a1p*c*c0p*t34780*t34928*(2.0/3.0)))+t34807*(-t34906+t34830*t34835*t34829*t34788*(t34906-(t34892* \
                   1.0/(t34886*t34886)*(b2f*c*t34881*(1.0/3.0)+b4f*t34769*t34897*(2.0/3.0)+b1f*c*t34881*t34898*(1.0/6.0) \
                   +b3f*c*t34810*t34881*(1.0/2.0)))/t34889+a1f*c*c0f*t34881*t34890*(2.0/3.0)-a1p*c*c0p*t34821*t34881* \
                   (2.0/3.0))+a1p*c*c0p*t34821*t34881*(2.0/3.0)-t34830*t34920*t34835*t34893*t34788*4.0+t34830*t34925* \
                   t34829*t34893*t34788+t34825*t34826*t34835*t34829*t34893*t34788*4.0+Aa*t34835*t34907*t34917*t34919* \
                   t34788*(t34830*t34920*4.0-t34825*t34826*t34829*4.0)*2.0-Aa*t34907*t34925*t34917*t34927*t34919*t34788* \
                   2.0-(1.0/(t34913*t34913)*t34835*t34907*t34927*t34919*t34788*(b2a*c*t34881*(1.0/3.0)+b4a*t34769*t34897* \
                   (2.0/3.0)+b1a*c*t34881*t34898*(1.0/6.0)+b3a*c*t34810*t34881*(1.0/2.0)))/t34916+Aa*a1a*c*t34835*t34907* \
                   t34881*t34917*t34927*t34788*(2.0/3.0))+t34830*t34835*t34829*t34893*t34788)-(rho_a[index]*(t34871+t34785* \
                   t34788*(t34870-c0p*t34780*t34782*2.0))+rho_b[index]*(t34806-t34785*t34788*(t34806-c0f*log((t34789* \
                   (1.0/2.0))/(b1f*t34792+b3f*t34793+b2f*c*t34790+b4f*t34794*t34769)+1.0)*(a1f*c*t34790+1.0)*2.0))-t34807* \
                   (t34824+t34941-t34830*t34835*t34829*t34893*t34788))*(ccab1*gcab*t34880*t34836*(4.0/3.0)-ccab2*t34852* \
                   t34844*t34845*(gcab*t34836*(8.0/3.0)+gamma_aa[index]*t34844*t34849*(4.0/3.0)+t34841*t34844*t34836* \
                   (8.0/3.0))-ccab1*gamma_aa[index]*t34850*t34844*t34849*(4.0/3.0)+ccab2*gamma_aa[index]*t34851*t34844* \
                   t34849*(4.0/3.0)-ccab1*t34841*t34850*t34844*t34836*(4.0/3.0)+ccab2*t34841*t34851*t34844*t34836*(8.0/ \
                   3.0)-ccab2*t34841*t34852*t34844*t34837*t34855+ccab2*t34844*t34845*t34855*1.0/(t34848*t34848*t34848) \
                   *t34858*2.0-ccab2*gamma_aa[index]*t34841*t34852*t34844*t34836*t34858*(8.0/3.0)+ccab1*gamma_aa[index]* \
                   gcab*t34841*1.0/(t34843*t34843*t34843)*t34844*t34849*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t34971*t34837-cx1*gamma_aa[index]*t34953*t34873*t34973+cx2*gamma_aa[index]*t34953*t34873*t34972* \
                   2.0-cx2*t34953*t34873*t34876*t34975*t34978)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t34836* \
                   t34971*(8.0/3.0)-cx1*gamma_aa[index]*t34953*t34973*t34849*8.0+cx2*gamma_aa[index]*t34953*t34972*t34849* \
                   (3.2E1/3.0)-cx2*t34953*t34849*t34876*t34975*t34978*(1.6E1/3.0)+cx1*gx*t34953*1.0/(t34955*t34955*t34955) \
                   *t34974*t34876*(1.6E1/3.0)-cx2*t34953*t34873*t34876*t34975*(gx*t34836*(1.6E1/3.0)+gamma_aa[index]* \
                   t34953*t34849*(3.2E1/3.0))-cx2*gamma_aa[index]*t34953*t34873*t34981*t34975*2.0+cx2*t34953*t34873*t34981* \
                   t34876*1.0/(t34958*t34958*t34958)*t34978*2.0)+rho_a[index]*t34970*(-t34938+t34967+t34785*t34788*(t34938+ \
                   t34966-t34967-t34960*t34965*t34869*t34959))+rho_a[index]*t34942*(ccaa1*gcaa*t34943*t34836*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t34872*t34945*t34849*8.0+ccaa2*gamma_aa[index]*t34872*t34944*t34849*(3.2E1/ \
                   3.0)-ccaa2*t34872*t34946*t34849*t34876*t34949*(1.6E1/3.0)+ccaa1*gcaa*t34872*1.0/(t34875*t34875*t34875) \
                   *t34974*t34876*(1.6E1/3.0)-ccaa2*t34872*t34873*t34946*t34876*(gcaa*t34836*(1.6E1/3.0)+gamma_aa[index]* \
                   t34872*t34849*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t34952*t34872*t34873*t34946*2.0+ccaa2*t34952*t34872* \
                   t34873*t34876*t34949*1.0/(t34879*t34879*t34879)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t36556 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36557 = c*t36556;
                double t36558 = sqrt(t36557);
                double t36559 = pow(t36557,3.0/2.0);
                double t36560 = c*c;
                double t36561 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36562 = 1.0/c0p;
                double t36563 = b1p*t36558;
                double t36564 = b3p*t36559;
                double t36565 = b4p*t36560*t36561;
                double t36566 = b2p*c*t36556;
                double t36567 = t36563+t36564+t36565+t36566;
                double t36568 = 1.0/t36567;
                double t36569 = t36562*t36568*(1.0/2.0);
                double t36570 = t36569+1.0;
                double t36571 = log(t36570);
                double t36572 = a1p*c*t36556;
                double t36573 = t36572+1.0;
                double t36574 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36575 = gcaa*gcaa;
                double t36576 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36577 = gamma_aa[index]*gcaa*t36574;
                double t36578 = t36577+1.0;
                double t36579 = gamma_aa[index]*gamma_aa[index];
                double t36580 = gamma_aa[index]*gcaa*t36574*2.0;
                double t36581 = t36575*t36576*t36579;
                double t36582 = t36580+t36581+1.0;
                double t36583 = pow(2.0,1.0/3.0);
                double t36584 = t36583*2.0;
                double t36585 = t36584-2.0;
                double t36586 = two_13*2.0;
                double t36587 = t36586-2.0;
                double t36588 = 1.0/t36587;
                double t36589 = 1.0/c0f;
                double t36590 = b1f*t36558;
                double t36591 = b3f*t36559;
                double t36592 = b4f*t36560*t36561;
                double t36593 = b2f*c*t36556;
                double t36594 = t36590+t36591+t36592+t36593;
                double t36595 = 1.0/t36594;
                double t36596 = t36595*t36589*(1.0/2.0);
                double t36597 = t36596+1.0;
                double t36598 = log(t36597);
                double t36599 = a1f*c*t36556;
                double t36600 = t36599+1.0;
                double t36601 = c0f*t36600*t36598*2.0;
                double t36602 = c0p*t36571*t36573*2.0;
                double t36603 = 1.0/t36578;
                double t36604 = 1.0/t36582;
                double t36605 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t36606 = 1.0/(t36578*t36578);
                double t36607 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t36608 = 1.0/(t36582*t36582);
                double t36609 = gcaa*t36574*2.0;
                double t36610 = gamma_aa[index]*t36575*t36576*2.0;
                double t36611 = t36610+t36609;
                double t36612 = gamma_aa[index]*gcaa*t36607*(1.6E1/3.0);
                double t36613 = t36605*t36575*t36579*(1.6E1/3.0);
                double t36614 = t36612+t36613;
                double t36615 = gx*gx;
                double t36616 = gamma_aa[index]*gx*t36574;
                double t36617 = t36616+1.0;
                double t36618 = gamma_aa[index]*gx*t36574*2.0;
                double t36619 = t36615*t36576*t36579;
                double t36620 = t36618+t36619+1.0;
                double t36621 = 1.0/pow(rho_a[index],4.0/3.0);
                double t36622 = 1.0/pow(rho_a[index],5.0/3.0);
                double t36623 = 1.0/sqrt(t36557);
                double t36624 = 1.0/t36570;
                double t36625 = 1.0/(t36567*t36567);
                double t36626 = b4p*t36622*t36560*(2.0/3.0);
                double t36627 = b2p*c*t36621*(1.0/3.0);
                double t36628 = b1p*c*t36621*t36623*(1.0/6.0);
                double t36629 = b3p*c*t36621*t36558*(1.0/2.0);
                double t36630 = t36626+t36627+t36628+t36629;
                double t36631 = t36630*t36624*t36625*t36573;
                double t36632 = ccaa1*gcaa*t36603*t36574;
                double t36633 = ccaa2*gamma_aa[index]*t36604*t36575*t36576*2.0;
                double t36634 = t36632+t36633-ccaa1*gamma_aa[index]*t36606*t36575*t36576-ccaa2*t36611*t36608*t36575* \
                   t36576*t36579;
                double t36635 = 1.0/t36617;
                double t36636 = 1.0/t36620;
                double t36637 = 1.0/(t36617*t36617);
                double t36638 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t36639 = 1.0/(t36620*t36620);
                double t36640 = gx*t36574*2.0;
                double t36641 = gamma_aa[index]*t36615*t36576*2.0;
                double t36642 = t36640+t36641;
                double t36643 = gamma_aa[index]*gx*t36607*(1.6E1/3.0);
                double t36644 = t36605*t36615*t36579*(1.6E1/3.0);
                double t36645 = t36643+t36644;
                v_rho_a_gamma_aa_[index] = -t36634*(t36602+t36585*t36588*(t36601-c0p*t36571*t36573*2.0))+rho_a[index]* \
                   t36634*(-t36631+t36585*t36588*(t36631-(t36600*1.0/(t36594*t36594)*(b2f*c*t36621*(1.0/3.0)+b4f*t36622* \
                   t36560*(2.0/3.0)+b1f*c*t36621*t36623*(1.0/6.0)+b3f*c*t36621*t36558*(1.0/2.0)))/t36597+a1f*c*c0f*t36621* \
                   t36598*(2.0/3.0)-a1p*c*c0p*t36621*t36571*(2.0/3.0))+a1p*c*c0p*t36621*t36571*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t36635*t36574-cx1*gamma_aa[index]*t36615*t36637*t36576+cx2*gamma_aa[index]*t36615*t36636* \
                   t36576*2.0-cx2*t36615*t36642*t36576*t36639*t36579)*(4.0/3.0)+rho_a[index]*(t36602+t36585*t36588*(t36601- \
                   t36602))*(ccaa1*gcaa*t36603*t36607*(8.0/3.0)+ccaa2*gamma_aa[index]*t36604*t36605*t36575*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t36605*t36606*t36575*8.0-ccaa2*t36611*t36605*t36608*t36575*t36579*(1.6E1/3.0) \
                   +ccaa1*gcaa*t36575*t36638*1.0/(t36578*t36578*t36578)*t36579*(1.6E1/3.0)-ccaa2*t36608*t36575*t36576* \
                   t36579*(gcaa*t36607*(1.6E1/3.0)+gamma_aa[index]*t36605*t36575*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t36614* \
                   t36608*t36575*t36576*2.0+ccaa2*t36611*t36614*1.0/(t36582*t36582*t36582)*t36575*t36576*t36579*2.0)- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t36607*t36635*(8.0/3.0)-cx1*gamma_aa[index]*t36605*t36615*t36637* \
                   8.0+cx2*gamma_aa[index]*t36605*t36615*t36636*(3.2E1/3.0)-cx2*t36605*t36615*t36642*t36639*t36579*(1.6E1/ \
                   3.0)+cx1*gx*t36615*1.0/(t36617*t36617*t36617)*t36638*t36579*(1.6E1/3.0)-cx2*t36615*t36576*t36639*t36579* \
                   (gx*t36607*(1.6E1/3.0)+gamma_aa[index]*t36605*t36615*(3.2E1/3.0))-cx2*gamma_aa[index]*t36615*t36645* \
                   t36576*t36639*2.0+cx2*1.0/(t36620*t36620*t36620)*t36615*t36642*t36645*t36576*t36579*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t34984 = 1.0/pow(rho_a[index],1.0/3.0);
                double t34985 = c*t34984;
                double t34986 = sqrt(t34985);
                double t34987 = pow(t34985,3.0/2.0);
                double t34988 = c*c;
                double t34989 = 1.0/pow(rho_a[index],2.0/3.0);
                double t34990 = 1.0/c0p;
                double t34991 = b1p*t34986;
                double t34992 = b3p*t34987;
                double t34993 = b4p*t34988*t34989;
                double t34994 = b2p*c*t34984;
                double t34995 = t34991+t34992+t34993+t34994;
                double t34996 = 1.0/t34995;
                double t34997 = t34990*t34996*(1.0/2.0);
                double t34998 = t34997+1.0;
                double t34999 = log(t34998);
                double t35000 = a1p*c*t34984;
                double t35001 = t35000+1.0;
                double t35002 = pow(2.0,1.0/3.0);
                double t35003 = t35002*2.0;
                double t35004 = t35003-2.0;
                double t35005 = two_13*2.0;
                double t35006 = t35005-2.0;
                double t35007 = 1.0/t35006;
                double t35008 = 1.0/c0f;
                double t35009 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35010 = c*t35009;
                double t35011 = sqrt(t35010);
                double t35012 = pow(t35010,3.0/2.0);
                double t35013 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35014 = b1p*t35011;
                double t35015 = b3p*t35012;
                double t35016 = b4p*t34988*t35013;
                double t35017 = b2p*c*t35009;
                double t35018 = t35014+t35015+t35016+t35017;
                double t35019 = 1.0/t35018;
                double t35020 = t34990*t35019*(1.0/2.0);
                double t35021 = t35020+1.0;
                double t35022 = log(t35021);
                double t35023 = a1p*c*t35009;
                double t35024 = t35023+1.0;
                double t35025 = c0p*t35022*t35024*2.0;
                double t35026 = rho_a[index]+rho_b[index];
                double t35027 = 1.0/pow(t35026,1.0/3.0);
                double t35028 = c*t35027;
                double t35029 = sqrt(t35028);
                double t35030 = pow(t35028,3.0/2.0);
                double t35031 = 1.0/pow(t35026,2.0/3.0);
                double t35032 = b1p*t35029;
                double t35033 = b3p*t35030;
                double t35034 = b4p*t34988*t35031;
                double t35035 = b2p*c*t35027;
                double t35036 = t35032+t35033+t35034+t35035;
                double t35037 = 1.0/t35036;
                double t35038 = t34990*t35037*(1.0/2.0);
                double t35039 = t35038+1.0;
                double t35040 = log(t35039);
                double t35041 = a1p*c*t35027;
                double t35042 = t35041+1.0;
                double t35043 = c0p*t35040*t35042*2.0;
                double t35044 = rho_a[index]-rho_b[index];
                double t35045 = t35044*t35044;
                double t35046 = 1.0/t35026;
                double t35047 = t35044*t35046;
                double t35048 = 1.0/(t35026*t35026*t35026*t35026);
                double t35049 = t35045*t35045;
                double t35050 = t35047+1.0;
                double t35051 = pow(t35050,4.0/3.0);
                double t35052 = -t35047+1.0;
                double t35053 = pow(t35052,4.0/3.0);
                double t35054 = t35051+t35053-2.0;
                double t35055 = gcab*gcab;
                double t35056 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t35057 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35058 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35059 = gamma_aa[index]*t35058*(1.0/2.0);
                double t35060 = gamma_bb[index]*t35057*(1.0/2.0);
                double t35061 = t35060+t35059;
                double t35062 = gamma_aa[index]*gcab*t35056*(8.0/3.0);
                double t35063 = gamma_aa[index]*t35061*t35055*t35056*(8.0/3.0);
                double t35064 = t35062+t35063;
                double t35065 = t35061*t35061;
                double t35066 = t35055*t35065;
                double t35067 = gcab*t35061*2.0;
                double t35068 = t35066+t35067+1.0;
                double t35069 = gcab*t35057;
                double t35070 = t35061*t35055*t35057;
                double t35071 = t35070+t35069;
                double t35072 = 1.0/(t35068*t35068);
                double t35073 = gcab*t35061;
                double t35074 = t35073+1.0;
                double t35075 = c0p*t34999*t35001*2.0;
                double t35076 = 1.0/(t35074*t35074);
                double t35077 = 1.0/t35068;
                double t35078 = 1.0/pow(t35026,4.0/3.0);
                double t35079 = b1f*t35029;
                double t35080 = b3f*t35030;
                double t35081 = b4f*t34988*t35031;
                double t35082 = b2f*c*t35027;
                double t35083 = t35080+t35081+t35082+t35079;
                double t35084 = 1.0/t35083;
                double t35085 = t35008*t35084*(1.0/2.0);
                double t35086 = t35085+1.0;
                double t35087 = log(t35086);
                double t35088 = a1f*c*t35027;
                double t35089 = t35088+1.0;
                double t35091 = c0f*t35087*t35089*2.0;
                double t35090 = t35043-t35091;
                double t35092 = 1.0/(t35026*t35026);
                double t35119 = t35044*t35092;
                double t35093 = t35046-t35119;
                double t35094 = 1.0/pow(t35026,5.0/3.0);
                double t35095 = 1.0/sqrt(t35028);
                double t35096 = 1.0/t35039;
                double t35097 = 1.0/(t35036*t35036);
                double t35098 = b4p*t34988*t35094*(2.0/3.0);
                double t35099 = b2p*c*t35078*(1.0/3.0);
                double t35100 = b1p*c*t35095*t35078*(1.0/6.0);
                double t35101 = b3p*c*t35029*t35078*(1.0/2.0);
                double t35102 = t35100+t35101+t35098+t35099;
                double t35103 = t35102*t35042*t35096*t35097;
                double t35104 = 1.0/d2fz0;
                double t35105 = 1.0/Aa;
                double t35106 = b1a*t35029;
                double t35107 = b3a*t35030;
                double t35108 = b4a*t34988*t35031;
                double t35109 = b2a*c*t35027;
                double t35110 = t35106+t35107+t35108+t35109;
                double t35111 = 1.0/t35110;
                double t35112 = t35111*t35105*(1.0/2.0);
                double t35113 = t35112+1.0;
                double t35114 = log(t35113);
                double t35115 = a1a*c*t35027;
                double t35116 = t35115+1.0;
                double t35117 = 1.0/(t35026*t35026*t35026*t35026*t35026);
                double t35118 = pow(t35050,1.0/3.0);
                double t35120 = t35118*t35093*(4.0/3.0);
                double t35121 = pow(t35052,1.0/3.0);
                double t35122 = t35120-t35121*t35093*(4.0/3.0);
                double t35123 = t35048*t35049;
                double t35124 = t35123-1.0;
                double t35125 = a1f*c*t34984;
                double t35126 = t35125+1.0;
                double t35127 = b1f*t34986;
                double t35128 = b3f*t34987;
                double t35129 = b4f*t34988*t34989;
                double t35130 = b2f*c*t34984;
                double t35131 = t35130+t35127+t35128+t35129;
                double t35132 = 1.0/t35131;
                double t35133 = t35132*t35008*(1.0/2.0);
                double t35134 = t35133+1.0;
                double t35135 = 1.0/pow(rho_a[index],4.0/3.0);
                double t35136 = 1.0/pow(rho_a[index],5.0/3.0);
                double t35137 = 1.0/sqrt(t34985);
                double t35138 = log(t35134);
                double t35139 = 1.0/t34998;
                double t35140 = 1.0/(t34995*t34995);
                double t35141 = b4p*t34988*t35136*(2.0/3.0);
                double t35142 = b2p*c*t35135*(1.0/3.0);
                double t35143 = b1p*c*t35135*t35137*(1.0/6.0);
                double t35144 = b3p*c*t34986*t35135*(1.0/2.0);
                double t35145 = t35141+t35142+t35143+t35144;
                double t35146 = t35001*t35140*t35145*t35139;
                double t35147 = Aa*t35104*t35114*t35007*t35124*t35116*t35054*2.0;
                double t35148 = t35075-c0f*t35126*t35138*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t35075-t35004*t35007*t35148)+rho_b[index]*(t35025-t35004* \
                   t35007*(t35025-c0f*log((t35008*(1.0/2.0))/(b1f*t35011+b3f*t35012+b2f*c*t35009+b4f*t34988*t35013)+1.0) \
                   *(a1f*c*t35009+1.0)*2.0))-t35026*(t35043+t35147-t35007*t35054*t35090*t35048*t35049))*(ccab2*t35061* \
                   t35072*t35055*t35064*t35057-ccab2*t35071*t35055*t35064*t35065*1.0/(t35068*t35068*t35068)*2.0+ccab1* \
                   gamma_aa[index]*t35055*t35056*t35057*t35076*(4.0/3.0)-ccab2*gamma_aa[index]*t35055*t35056*t35057*t35077* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t35061*t35071*t35072*t35055*t35056*(8.0/3.0)+ccab2*gamma_aa[index]* \
                   t35072*(t35055*t35055)*t35056*t35065*t35057*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t35061*t35055*t35056* \
                   1.0/(t35074*t35074*t35074)*t35057*(4.0/3.0))-((ccab1*gcab*t35057*(1.0/2.0))/t35074-ccab2*t35071*t35072* \
                   t35055*t35065-ccab1*t35061*t35055*t35057*t35076*(1.0/2.0)+ccab2*t35061*t35055*t35057*t35077)*(t35043- \
                   t35075+t35147+rho_a[index]*(-t35146+t35004*t35007*(t35146-(1.0/(t35131*t35131)*t35126*(b2f*c*t35135* \
                   (1.0/3.0)+b4f*t34988*t35136*(2.0/3.0)+b1f*c*t35135*t35137*(1.0/6.0)+b3f*c*t34986*t35135*(1.0/2.0)) \
                   )/t35134+a1f*c*c0f*t35135*t35138*(2.0/3.0)-a1p*c*c0p*t34999*t35135*(2.0/3.0))+a1p*c*c0p*t34999*t35135* \
                   (2.0/3.0))-t35026*(-t35103+t35007*t35054*t35048*t35049*(t35103-(1.0/(t35083*t35083)*t35089*(b2f*c* \
                   t35078*(1.0/3.0)+b4f*t34988*t35094*(2.0/3.0)+b1f*c*t35095*t35078*(1.0/6.0)+b3f*c*t35029*t35078*(1.0/ \
                   2.0)))/t35086+a1f*c*c0f*t35078*t35087*(2.0/3.0)-a1p*c*c0p*t35040*t35078*(2.0/3.0))+a1p*c*c0p*t35040* \
                   t35078*(2.0/3.0)+t35122*t35007*t35090*t35048*t35049-t35007*t35054*t35090*t35117*t35049*4.0+t35007* \
                   t35044*t35045*t35054*t35090*t35048*4.0+Aa*t35104*t35114*t35007*t35116*t35054*(t35117*t35049*4.0-t35044* \
                   t35045*t35048*4.0)*2.0-Aa*t35104*t35122*t35114*t35007*t35124*t35116*2.0-(1.0/(t35110*t35110)*t35104* \
                   t35007*t35124*t35116*t35054*(b2a*c*t35078*(1.0/3.0)+b4a*t34988*t35094*(2.0/3.0)+b1a*c*t35095*t35078* \
                   (1.0/6.0)+b3a*c*t35029*t35078*(1.0/2.0)))/t35113+Aa*a1a*c*t35104*t35114*t35007*t35124*t35054*t35078* \
                   (2.0/3.0))+t35004*t35007*t35148-t35007*t35054*t35090*t35048*t35049);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35150 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35151 = c*t35150;
                double t35152 = sqrt(t35151);
                double t35153 = pow(t35151,3.0/2.0);
                double t35154 = c*c;
                double t35155 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35156 = 1.0/c0p;
                double t35157 = b1p*t35152;
                double t35158 = b3p*t35153;
                double t35159 = b4p*t35154*t35155;
                double t35160 = b2p*c*t35150;
                double t35161 = t35160+t35157+t35158+t35159;
                double t35162 = 1.0/t35161;
                double t35163 = t35162*t35156*(1.0/2.0);
                double t35164 = t35163+1.0;
                double t35165 = log(t35164);
                double t35166 = a1p*c*t35150;
                double t35167 = t35166+1.0;
                double t35168 = pow(2.0,1.0/3.0);
                double t35169 = t35168*2.0;
                double t35170 = t35169-2.0;
                double t35171 = two_13*2.0;
                double t35172 = t35171-2.0;
                double t35173 = 1.0/t35172;
                double t35174 = 1.0/c0f;
                double t35175 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35176 = c*t35175;
                double t35177 = sqrt(t35176);
                double t35178 = pow(t35176,3.0/2.0);
                double t35179 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35180 = b1p*t35177;
                double t35181 = b3p*t35178;
                double t35182 = b4p*t35154*t35179;
                double t35183 = b2p*c*t35175;
                double t35184 = t35180+t35181+t35182+t35183;
                double t35185 = 1.0/t35184;
                double t35186 = t35156*t35185*(1.0/2.0);
                double t35187 = t35186+1.0;
                double t35188 = log(t35187);
                double t35189 = a1p*c*t35175;
                double t35190 = t35189+1.0;
                double t35191 = c0p*t35190*t35188*2.0;
                double t35192 = rho_a[index]+rho_b[index];
                double t35193 = 1.0/pow(t35192,1.0/3.0);
                double t35194 = c*t35193;
                double t35195 = sqrt(t35194);
                double t35196 = pow(t35194,3.0/2.0);
                double t35197 = 1.0/pow(t35192,2.0/3.0);
                double t35198 = b1p*t35195;
                double t35199 = b3p*t35196;
                double t35200 = b4p*t35154*t35197;
                double t35201 = b2p*c*t35193;
                double t35202 = t35200+t35201+t35198+t35199;
                double t35203 = 1.0/t35202;
                double t35204 = t35203*t35156*(1.0/2.0);
                double t35205 = t35204+1.0;
                double t35206 = log(t35205);
                double t35207 = a1p*c*t35193;
                double t35208 = t35207+1.0;
                double t35209 = c0p*t35206*t35208*2.0;
                double t35210 = rho_a[index]-rho_b[index];
                double t35211 = t35210*t35210;
                double t35212 = 1.0/t35192;
                double t35213 = t35210*t35212;
                double t35214 = 1.0/(t35192*t35192*t35192*t35192);
                double t35215 = t35211*t35211;
                double t35216 = t35213+1.0;
                double t35217 = pow(t35216,4.0/3.0);
                double t35218 = -t35213+1.0;
                double t35219 = pow(t35218,4.0/3.0);
                double t35220 = t35217+t35219-2.0;
                double t35221 = gcab*gcab;
                double t35222 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t35223 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35224 = gamma_aa[index]*t35223*(1.0/2.0);
                double t35225 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35226 = gamma_bb[index]*t35225*(1.0/2.0);
                double t35227 = t35224+t35226;
                double t35228 = gamma_bb[index]*gcab*t35222*(8.0/3.0);
                double t35229 = gamma_bb[index]*t35221*t35222*t35227*(8.0/3.0);
                double t35230 = t35228+t35229;
                double t35231 = t35227*t35227;
                double t35232 = t35221*t35231;
                double t35233 = gcab*t35227*2.0;
                double t35234 = t35232+t35233+1.0;
                double t35235 = gcab*t35223;
                double t35236 = t35221*t35223*t35227;
                double t35237 = t35235+t35236;
                double t35238 = 1.0/(t35234*t35234);
                double t35239 = gcab*t35227;
                double t35240 = t35239+1.0;
                double t35241 = c0p*t35165*t35167*2.0;
                double t35242 = 1.0/(t35240*t35240);
                double t35243 = 1.0/t35234;
                double t35244 = 1.0/pow(t35192,4.0/3.0);
                double t35245 = b1f*t35195;
                double t35246 = b3f*t35196;
                double t35247 = b4f*t35154*t35197;
                double t35248 = b2f*c*t35193;
                double t35249 = t35245+t35246+t35247+t35248;
                double t35250 = 1.0/t35249;
                double t35251 = t35250*t35174*(1.0/2.0);
                double t35252 = t35251+1.0;
                double t35253 = log(t35252);
                double t35254 = a1f*c*t35193;
                double t35255 = t35254+1.0;
                double t35257 = c0f*t35253*t35255*2.0;
                double t35256 = t35209-t35257;
                double t35258 = 1.0/(t35192*t35192);
                double t35259 = t35210*t35258;
                double t35260 = t35212+t35259;
                double t35261 = 1.0/pow(t35192,5.0/3.0);
                double t35262 = 1.0/sqrt(t35194);
                double t35263 = 1.0/t35205;
                double t35264 = 1.0/(t35202*t35202);
                double t35265 = b4p*t35261*t35154*(2.0/3.0);
                double t35266 = b2p*c*t35244*(1.0/3.0);
                double t35267 = b1p*c*t35244*t35262*(1.0/6.0);
                double t35268 = b3p*c*t35244*t35195*(1.0/2.0);
                double t35269 = t35265+t35266+t35267+t35268;
                double t35270 = 1.0/d2fz0;
                double t35271 = 1.0/Aa;
                double t35272 = b1a*t35195;
                double t35273 = b3a*t35196;
                double t35274 = b4a*t35154*t35197;
                double t35275 = b2a*c*t35193;
                double t35276 = t35272+t35273+t35274+t35275;
                double t35277 = 1.0/t35276;
                double t35278 = t35271*t35277*(1.0/2.0);
                double t35279 = t35278+1.0;
                double t35280 = log(t35279);
                double t35281 = a1a*c*t35193;
                double t35282 = t35281+1.0;
                double t35283 = 1.0/(t35192*t35192*t35192*t35192*t35192);
                double t35284 = pow(t35216,1.0/3.0);
                double t35285 = t35260*t35284*(4.0/3.0);
                double t35286 = pow(t35218,1.0/3.0);
                double t35287 = t35285-t35260*t35286*(4.0/3.0);
                double t35288 = t35214*t35215;
                double t35289 = t35288-1.0;
                double t35290 = t35208*t35263*t35264*t35269;
                double t35291 = a1f*c*t35175;
                double t35292 = t35291+1.0;
                double t35293 = b1f*t35177;
                double t35294 = b3f*t35178;
                double t35295 = b4f*t35154*t35179;
                double t35296 = b2f*c*t35175;
                double t35297 = t35293+t35294+t35295+t35296;
                double t35298 = 1.0/t35297;
                double t35299 = t35174*t35298*(1.0/2.0);
                double t35300 = t35299+1.0;
                double t35301 = 1.0/pow(rho_b[index],4.0/3.0);
                double t35302 = 1.0/pow(rho_b[index],5.0/3.0);
                double t35303 = 1.0/sqrt(t35176);
                double t35304 = log(t35300);
                double t35305 = 1.0/t35187;
                double t35306 = 1.0/(t35184*t35184);
                double t35307 = b4p*t35302*t35154*(2.0/3.0);
                double t35308 = b2p*c*t35301*(1.0/3.0);
                double t35309 = b1p*c*t35301*t35303*(1.0/6.0);
                double t35310 = b3p*c*t35301*t35177*(1.0/2.0);
                double t35311 = t35310+t35307+t35308+t35309;
                double t35312 = t35311*t35305*t35306*t35190;
                double t35313 = t35191-c0f*t35304*t35292*2.0;
                double t35314 = Aa*t35220*t35270*t35280*t35173*t35282*t35289*2.0;
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t35223*(1.0/2.0))/t35240-ccab1*t35221*t35223*t35242*t35227* \
                   (1.0/2.0)+ccab2*t35221*t35223*t35243*t35227-ccab2*t35221*t35231*t35237*t35238)*(t35314-t35191+t35209+ \
                   t35192*(t35290-t35220*t35214*t35215*t35173*(t35290-(t35255*1.0/(t35249*t35249)*(b2f*c*t35244*(1.0/ \
                   3.0)+b4f*t35261*t35154*(2.0/3.0)+b1f*c*t35244*t35262*(1.0/6.0)+b3f*c*t35244*t35195*(1.0/2.0)))/t35252+ \
                   a1f*c*c0f*t35244*t35253*(2.0/3.0)-a1p*c*c0p*t35206*t35244*(2.0/3.0))-a1p*c*c0p*t35206*t35244*(2.0/ \
                   3.0)+t35220*t35215*t35173*t35256*t35283*4.0+t35214*t35215*t35173*t35256*t35287+t35210*t35211*t35220* \
                   t35214*t35173*t35256*4.0-Aa*t35220*t35270*t35280*t35173*t35282*(t35215*t35283*4.0+t35210*t35211*t35214* \
                   4.0)*2.0-Aa*t35270*t35280*t35173*t35282*t35287*t35289*2.0+(t35220*t35270*t35173*t35282*1.0/(t35276* \
                   t35276)*t35289*(b2a*c*t35244*(1.0/3.0)+b4a*t35261*t35154*(2.0/3.0)+b1a*c*t35244*t35262*(1.0/6.0)+b3a* \
                   c*t35244*t35195*(1.0/2.0)))/t35279-Aa*a1a*c*t35220*t35270*t35244*t35280*t35173*t35289*(2.0/3.0))+rho_b[index]* \
                   (-t35312+t35170*t35173*(t35312-(t35292*1.0/(t35297*t35297)*(b2f*c*t35301*(1.0/3.0)+b4f*t35302*t35154* \
                   (2.0/3.0)+b1f*c*t35301*t35303*(1.0/6.0)+b3f*c*t35301*t35177*(1.0/2.0)))/t35300+a1f*c*c0f*t35301*t35304* \
                   (2.0/3.0)-a1p*c*c0p*t35301*t35188*(2.0/3.0))+a1p*c*c0p*t35301*t35188*(2.0/3.0))+t35313*t35170*t35173- \
                   t35220*t35214*t35215*t35173*t35256)+(rho_b[index]*(t35191-t35313*t35170*t35173)+rho_a[index]*(t35241- \
                   t35170*t35173*(t35241-c0f*log((t35174*(1.0/2.0))/(b1f*t35152+b3f*t35153+b2f*c*t35150+b4f*t35154*t35155) \
                   +1.0)*(a1f*c*t35150+1.0)*2.0))-t35192*(t35314+t35209-t35220*t35214*t35215*t35173*t35256))*(ccab2*t35221* \
                   t35230*t35223*t35227*t35238-ccab2*t35221*t35230*t35231*1.0/(t35234*t35234*t35234)*t35237*2.0+ccab1* \
                   gamma_bb[index]*t35221*t35222*t35223*t35242*(4.0/3.0)-ccab2*gamma_bb[index]*t35221*t35222*t35223*t35243* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t35221*t35222*t35227*t35237*t35238*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   (t35221*t35221)*t35222*t35231*t35223*t35238*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t35221*t35222*1.0/ \
                   (t35240*t35240*t35240)*t35223*t35227*(4.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35317 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35318 = c*t35317;
                double t35319 = sqrt(t35318);
                double t35320 = pow(t35318,3.0/2.0);
                double t35321 = c*c;
                double t35322 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35323 = 1.0/c0p;
                double t35324 = b1p*t35319;
                double t35325 = b3p*t35320;
                double t35326 = b4p*t35321*t35322;
                double t35327 = b2p*c*t35317;
                double t35328 = t35324+t35325+t35326+t35327;
                double t35329 = 1.0/t35328;
                double t35330 = t35323*t35329*(1.0/2.0);
                double t35331 = t35330+1.0;
                double t35332 = log(t35331);
                double t35333 = a1p*c*t35317;
                double t35334 = t35333+1.0;
                double t35335 = pow(2.0,1.0/3.0);
                double t35336 = t35335*2.0;
                double t35337 = t35336-2.0;
                double t35338 = two_13*2.0;
                double t35339 = t35338-2.0;
                double t35340 = 1.0/t35339;
                double t35341 = 1.0/c0f;
                double t35342 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35343 = c*t35342;
                double t35344 = sqrt(t35343);
                double t35345 = pow(t35343,3.0/2.0);
                double t35346 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35347 = b1p*t35344;
                double t35348 = b3p*t35345;
                double t35349 = b4p*t35321*t35346;
                double t35350 = b2p*c*t35342;
                double t35351 = t35350+t35347+t35348+t35349;
                double t35352 = 1.0/t35351;
                double t35353 = t35323*t35352*(1.0/2.0);
                double t35354 = t35353+1.0;
                double t35355 = log(t35354);
                double t35356 = a1p*c*t35342;
                double t35357 = t35356+1.0;
                double t35358 = c0p*t35355*t35357*2.0;
                double t35359 = rho_a[index]+rho_b[index];
                double t35360 = 1.0/pow(t35359,1.0/3.0);
                double t35361 = c*t35360;
                double t35362 = sqrt(t35361);
                double t35363 = pow(t35361,3.0/2.0);
                double t35364 = 1.0/pow(t35359,2.0/3.0);
                double t35365 = b1p*t35362;
                double t35366 = b3p*t35363;
                double t35367 = b4p*t35321*t35364;
                double t35368 = b2p*c*t35360;
                double t35369 = t35365+t35366+t35367+t35368;
                double t35370 = 1.0/t35369;
                double t35371 = t35323*t35370*(1.0/2.0);
                double t35372 = t35371+1.0;
                double t35373 = log(t35372);
                double t35374 = a1p*c*t35360;
                double t35375 = t35374+1.0;
                double t35376 = c0p*t35373*t35375*2.0;
                double t35377 = rho_a[index]-rho_b[index];
                double t35378 = t35377*t35377;
                double t35379 = 1.0/t35359;
                double t35380 = t35377*t35379;
                double t35381 = 1.0/(t35359*t35359*t35359*t35359);
                double t35382 = t35378*t35378;
                double t35383 = t35380+1.0;
                double t35384 = pow(t35383,4.0/3.0);
                double t35385 = -t35380+1.0;
                double t35386 = pow(t35385,4.0/3.0);
                double t35387 = t35384+t35386-2.0;
                double t35388 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t35389 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35390 = gamma_aa[index]*t35389*(1.0/2.0);
                double t35391 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35392 = gamma_bb[index]*t35391*(1.0/2.0);
                double t35393 = t35390+t35392;
                double t35394 = gcab*t35393;
                double t35395 = t35394+1.0;
                double t35396 = gcab*gcab;
                double t35397 = t35393*t35393;
                double t35398 = t35396*t35397;
                double t35399 = gcab*t35393*2.0;
                double t35400 = t35398+t35399+1.0;
                double t35401 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t35402 = 1.0/(t35395*t35395);
                double t35403 = 1.0/t35400;
                double t35404 = 1.0/(t35400*t35400);
                double t35405 = gamma_bb[index]*gcab*t35388*(8.0/3.0);
                double t35406 = gamma_bb[index]*t35393*t35396*t35388*(8.0/3.0);
                double t35407 = t35405+t35406;
                double t35408 = gcab*t35391;
                double t35409 = t35391*t35393*t35396;
                double t35410 = t35408+t35409;
                double t35411 = b1f*t35344;
                double t35412 = b3f*t35345;
                double t35413 = b4f*t35321*t35346;
                double t35414 = b2f*c*t35342;
                double t35415 = t35411+t35412+t35413+t35414;
                double t35416 = 1.0/t35415;
                double t35417 = t35341*t35416*(1.0/2.0);
                double t35418 = t35417+1.0;
                double t35419 = log(t35418);
                double t35420 = a1f*c*t35342;
                double t35421 = t35420+1.0;
                double t35491 = c0f*t35421*t35419*2.0;
                double t35422 = -t35491+t35358;
                double t35423 = t35358-t35340*t35422*t35337;
                double t35424 = gcaa*gcaa;
                double t35425 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35426 = gamma_bb[index]*gcaa*t35391;
                double t35427 = t35426+1.0;
                double t35428 = gamma_bb[index]*gamma_bb[index];
                double t35429 = gamma_bb[index]*gcaa*t35391*2.0;
                double t35430 = t35424*t35425*t35428;
                double t35431 = t35430+t35429+1.0;
                double t35432 = 1.0/t35395;
                double t35433 = 1.0/pow(t35359,4.0/3.0);
                double t35434 = b1f*t35362;
                double t35435 = b3f*t35363;
                double t35436 = b4f*t35321*t35364;
                double t35437 = b2f*c*t35360;
                double t35438 = t35434+t35435+t35436+t35437;
                double t35439 = 1.0/t35438;
                double t35440 = t35341*t35439*(1.0/2.0);
                double t35441 = t35440+1.0;
                double t35442 = log(t35441);
                double t35443 = a1f*c*t35360;
                double t35444 = t35443+1.0;
                double t35446 = c0f*t35442*t35444*2.0;
                double t35445 = -t35446+t35376;
                double t35447 = 1.0/(t35359*t35359);
                double t35448 = t35447*t35377;
                double t35449 = t35448+t35379;
                double t35450 = t35446-t35376;
                double t35451 = 1.0/pow(t35359,5.0/3.0);
                double t35452 = 1.0/sqrt(t35361);
                double t35453 = 1.0/t35372;
                double t35454 = 1.0/(t35369*t35369);
                double t35455 = b4p*t35321*t35451*(2.0/3.0);
                double t35456 = b2p*c*t35433*(1.0/3.0);
                double t35457 = b1p*c*t35433*t35452*(1.0/6.0);
                double t35458 = b3p*c*t35433*t35362*(1.0/2.0);
                double t35459 = t35455+t35456+t35457+t35458;
                double t35460 = 1.0/d2fz0;
                double t35461 = 1.0/Aa;
                double t35462 = b1a*t35362;
                double t35463 = b3a*t35363;
                double t35464 = b4a*t35321*t35364;
                double t35465 = b2a*c*t35360;
                double t35466 = t35462+t35463+t35464+t35465;
                double t35467 = 1.0/t35466;
                double t35468 = t35461*t35467*(1.0/2.0);
                double t35469 = t35468+1.0;
                double t35470 = log(t35469);
                double t35471 = a1a*c*t35360;
                double t35472 = t35471+1.0;
                double t35473 = 1.0/(t35359*t35359*t35359*t35359*t35359);
                double t35474 = pow(t35383,1.0/3.0);
                double t35475 = t35474*t35449*(4.0/3.0);
                double t35476 = pow(t35385,1.0/3.0);
                double t35477 = t35475-t35449*t35476*(4.0/3.0);
                double t35478 = t35381*t35382;
                double t35479 = t35478-1.0;
                double t35480 = 1.0/pow(rho_b[index],4.0/3.0);
                double t35481 = 1.0/pow(rho_b[index],5.0/3.0);
                double t35482 = 1.0/sqrt(t35343);
                double t35483 = 1.0/t35354;
                double t35484 = 1.0/(t35351*t35351);
                double t35485 = b4p*t35321*t35481*(2.0/3.0);
                double t35486 = b2p*c*t35480*(1.0/3.0);
                double t35487 = b1p*c*t35480*t35482*(1.0/6.0);
                double t35488 = b3p*c*t35344*t35480*(1.0/2.0);
                double t35489 = t35485+t35486+t35487+t35488;
                double t35490 = t35357*t35483*t35484*t35489;
                double t35492 = Aa*t35340*t35460*t35470*t35472*t35387*t35479*2.0;
                double t35493 = a1p*c*c0p*t35433*t35373*(2.0/3.0);
                double t35494 = t35491-t35358;
                double t35495 = 1.0/t35427;
                double t35496 = 1.0/t35431;
                double t35497 = 1.0/(t35427*t35427);
                double t35498 = 1.0/(t35431*t35431);
                double t35499 = gcaa*t35391*2.0;
                double t35500 = gamma_bb[index]*t35424*t35425*2.0;
                double t35501 = t35500+t35499;
                double t35502 = gamma_bb[index]*gcaa*t35388*(1.6E1/3.0);
                double t35503 = t35401*t35424*t35428*(1.6E1/3.0);
                double t35504 = t35502+t35503;
                double t35505 = gx*gx;
                double t35506 = gamma_bb[index]*gx*t35391;
                double t35507 = t35506+1.0;
                double t35508 = gamma_bb[index]*gx*t35391*2.0;
                double t35509 = t35505*t35425*t35428;
                double t35510 = t35508+t35509+1.0;
                double t35511 = 1.0/t35418;
                double t35512 = 1.0/(t35415*t35415);
                double t35513 = b4f*t35321*t35481*(2.0/3.0);
                double t35514 = b2f*c*t35480*(1.0/3.0);
                double t35515 = b1f*c*t35480*t35482*(1.0/6.0);
                double t35516 = b3f*c*t35344*t35480*(1.0/2.0);
                double t35517 = t35513+t35514+t35515+t35516;
                double t35518 = a1f*c*c0f*t35480*t35419*(2.0/3.0);
                double t35519 = a1p*c*c0p*t35480*t35355*(2.0/3.0);
                double t35520 = ccaa1*gcaa*t35391*t35495;
                double t35521 = ccaa2*gamma_bb[index]*t35424*t35425*t35496*2.0;
                double t35522 = t35520+t35521-ccaa1*gamma_bb[index]*t35424*t35425*t35497-ccaa2*t35501*t35424*t35425* \
                   t35428*t35498;
                double t35523 = 1.0/t35507;
                double t35524 = 1.0/t35510;
                double t35525 = 1.0/(t35507*t35507);
                double t35526 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t35527 = 1.0/(t35510*t35510);
                double t35528 = gx*t35391*2.0;
                double t35529 = gamma_bb[index]*t35505*t35425*2.0;
                double t35530 = t35528+t35529;
                double t35531 = gamma_bb[index]*gx*t35388*(1.6E1/3.0);
                double t35532 = t35401*t35505*t35428*(1.6E1/3.0);
                double t35533 = t35531+t35532;
                v_rho_b_gamma_bb_[index] = (-rho_b[index]*t35423+t35359*(t35492+t35376-t35340*t35381*t35382*t35445* \
                   t35387)+rho_a[index]*(t35340*t35337*(c0p*t35332*t35334*2.0-c0f*log((t35341*(1.0/2.0))/(b1f*t35319+ \
                   b3f*t35320+b2f*c*t35317+b4f*t35321*t35322)+1.0)*(a1f*c*t35317+1.0)*2.0)-c0p*t35332*t35334*2.0))*(ccab1* \
                   gcab*t35432*t35388*(4.0/3.0)-ccab2*t35404*t35396*t35397*(gcab*t35388*(8.0/3.0)+gamma_bb[index]*t35401* \
                   t35396*(4.0/3.0)+t35393*t35396*t35388*(8.0/3.0))-ccab1*gamma_bb[index]*t35401*t35402*t35396*(4.0/3.0) \
                   +ccab2*gamma_bb[index]*t35401*t35403*t35396*(4.0/3.0)-ccab1*t35402*t35393*t35396*t35388*(4.0/3.0)+ \
                   ccab2*t35403*t35393*t35396*t35388*(8.0/3.0)-ccab2*t35404*t35407*t35391*t35393*t35396+ccab2*1.0/(t35400* \
                   t35400*t35400)*t35410*t35407*t35396*t35397*2.0-ccab2*gamma_bb[index]*t35410*t35404*t35393*t35396*t35388* \
                   (8.0/3.0)+ccab1*gamma_bb[index]*gcab*t35401*t35393*1.0/(t35395*t35395*t35395)*t35396*(4.0/3.0))-t35423* \
                   t35522-(ccab1*gcab*t35432*t35391*(1.0/2.0)-ccab2*t35410*t35404*t35396*t35397-ccab1*t35402*t35391*t35393* \
                   t35396*(1.0/2.0)+ccab2*t35403*t35391*t35393*t35396)*(t35492-t35358+t35376+rho_b[index]*(-t35490+t35519+ \
                   t35340*t35337*(t35490+t35518-t35421*t35511*t35512*t35517-a1p*c*c0p*t35480*t35355*(2.0/3.0)))-t35359* \
                   (t35493-t35453*t35454*t35375*t35459+t35340*t35450*t35381*t35382*t35477+t35340*t35450*t35382*t35473* \
                   t35387*4.0-t35340*t35381*t35382*t35387*(t35493-t35453*t35454*t35375*t35459+(t35444*1.0/(t35438*t35438) \
                   *(b2f*c*t35433*(1.0/3.0)+b4f*t35321*t35451*(2.0/3.0)+b1f*c*t35433*t35452*(1.0/6.0)+b3f*c*t35433*t35362* \
                   (1.0/2.0)))/t35441-a1f*c*c0f*t35433*t35442*(2.0/3.0))-t35340*t35381*t35445*t35377*t35378*t35387*4.0+ \
                   Aa*t35340*t35460*t35470*t35472*t35387*(t35382*t35473*4.0+t35381*t35377*t35378*4.0)*2.0+Aa*t35340*t35460* \
                   t35470*t35472*t35477*t35479*2.0-(t35340*t35460*t35472*1.0/(t35466*t35466)*t35387*t35479*(b2a*c*t35433* \
                   (1.0/3.0)+b4a*t35321*t35451*(2.0/3.0)+b1a*c*t35433*t35452*(1.0/6.0)+b3a*c*t35433*t35362*(1.0/2.0)) \
                   )/t35469+Aa*a1a*c*t35340*t35433*t35460*t35470*t35387*t35479*(2.0/3.0))-t35340*t35337*t35494+t35340* \
                   t35450*t35381*t35382*t35387)+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t35523*t35391-cx1*gamma_bb[index]* \
                   t35505*t35425*t35525+cx2*gamma_bb[index]*t35505*t35425*t35524*2.0-cx2*t35530*t35505*t35425*t35428* \
                   t35527)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t35523*t35388*(8.0/3.0)-cx1*gamma_bb[index]* \
                   t35401*t35505*t35525*8.0+cx2*gamma_bb[index]*t35401*t35505*t35524*(3.2E1/3.0)-cx2*t35401*t35530*t35505* \
                   t35428*t35527*(1.6E1/3.0)+cx1*gx*t35505*1.0/(t35507*t35507*t35507)*t35526*t35428*(1.6E1/3.0)-cx2*t35505* \
                   t35425*t35428*t35527*(gx*t35388*(1.6E1/3.0)+gamma_bb[index]*t35401*t35505*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t35505*t35425*t35533*t35527*2.0+cx2*1.0/(t35510*t35510*t35510)*t35530*t35505*t35425*t35533*t35428* \
                   2.0)+rho_b[index]*t35522*(-t35490+t35519+t35340*t35337*(t35490+t35518-t35519-t35421*t35511*t35512* \
                   t35517))+rho_b[index]*(t35358+t35340*t35337*t35494)*(ccaa1*gcaa*t35495*t35388*(8.0/3.0)-ccaa1*gamma_bb[index]* \
                   t35401*t35424*t35497*8.0+ccaa2*gamma_bb[index]*t35401*t35424*t35496*(3.2E1/3.0)-ccaa2*t35401*t35501* \
                   t35424*t35428*t35498*(1.6E1/3.0)+ccaa1*gcaa*t35424*1.0/(t35427*t35427*t35427)*t35526*t35428*(1.6E1/ \
                   3.0)-ccaa2*t35424*t35425*t35428*t35498*(gcaa*t35388*(1.6E1/3.0)+gamma_bb[index]*t35401*t35424*(3.2E1/ \
                   3.0))-ccaa2*gamma_bb[index]*t35504*t35424*t35425*t35498*2.0+ccaa2*t35501*1.0/(t35431*t35431*t35431) \
                   *t35504*t35424*t35425*t35428*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t36150 = 1.0/pow(rho_b[index],1.0/3.0);
                double t36151 = c*t36150;
                double t36152 = sqrt(t36151);
                double t36153 = pow(t36151,3.0/2.0);
                double t36154 = c*c;
                double t36155 = 1.0/pow(rho_b[index],2.0/3.0);
                double t36156 = 1.0/c0p;
                double t36157 = b1p*t36152;
                double t36158 = b3p*t36153;
                double t36159 = b4p*t36154*t36155;
                double t36160 = b2p*c*t36150;
                double t36161 = t36160+t36157+t36158+t36159;
                double t36162 = 1.0/t36161;
                double t36163 = t36162*t36156*(1.0/2.0);
                double t36164 = t36163+1.0;
                double t36165 = log(t36164);
                double t36166 = a1p*c*t36150;
                double t36167 = t36166+1.0;
                double t36168 = 1.0/pow(rho_b[index],8.0/3.0);
                double t36169 = gcaa*gcaa;
                double t36170 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t36171 = gamma_bb[index]*gcaa*t36168;
                double t36172 = t36171+1.0;
                double t36173 = gamma_bb[index]*gamma_bb[index];
                double t36174 = gamma_bb[index]*gcaa*t36168*2.0;
                double t36175 = t36170*t36173*t36169;
                double t36176 = t36174+t36175+1.0;
                double t36177 = pow(2.0,1.0/3.0);
                double t36178 = t36177*2.0;
                double t36179 = t36178-2.0;
                double t36180 = two_13*2.0;
                double t36181 = t36180-2.0;
                double t36182 = 1.0/t36181;
                double t36183 = 1.0/c0f;
                double t36184 = b1f*t36152;
                double t36185 = b3f*t36153;
                double t36186 = b4f*t36154*t36155;
                double t36187 = b2f*c*t36150;
                double t36188 = t36184+t36185+t36186+t36187;
                double t36189 = 1.0/t36188;
                double t36190 = t36183*t36189*(1.0/2.0);
                double t36191 = t36190+1.0;
                double t36192 = log(t36191);
                double t36193 = a1f*c*t36150;
                double t36194 = t36193+1.0;
                double t36195 = c0f*t36192*t36194*2.0;
                double t36196 = c0p*t36165*t36167*2.0;
                double t36197 = 1.0/t36172;
                double t36198 = 1.0/t36176;
                double t36199 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t36200 = 1.0/(t36172*t36172);
                double t36201 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t36202 = 1.0/(t36176*t36176);
                double t36203 = gcaa*t36168*2.0;
                double t36204 = gamma_bb[index]*t36170*t36169*2.0;
                double t36205 = t36203+t36204;
                double t36206 = gamma_bb[index]*gcaa*t36201*(1.6E1/3.0);
                double t36207 = t36173*t36169*t36199*(1.6E1/3.0);
                double t36208 = t36206+t36207;
                double t36209 = gx*gx;
                double t36210 = gamma_bb[index]*gx*t36168;
                double t36211 = t36210+1.0;
                double t36212 = gamma_bb[index]*gx*t36168*2.0;
                double t36213 = t36170*t36173*t36209;
                double t36214 = t36212+t36213+1.0;
                double t36215 = 1.0/pow(rho_b[index],4.0/3.0);
                double t36216 = 1.0/pow(rho_b[index],5.0/3.0);
                double t36217 = 1.0/sqrt(t36151);
                double t36218 = 1.0/t36164;
                double t36219 = 1.0/(t36161*t36161);
                double t36220 = b4p*t36216*t36154*(2.0/3.0);
                double t36221 = b2p*c*t36215*(1.0/3.0);
                double t36222 = b1p*c*t36215*t36217*(1.0/6.0);
                double t36223 = b3p*c*t36152*t36215*(1.0/2.0);
                double t36224 = t36220+t36221+t36222+t36223;
                double t36225 = t36224*t36218*t36219*t36167;
                double t36226 = ccaa1*gcaa*t36168*t36197;
                double t36227 = ccaa2*gamma_bb[index]*t36170*t36169*t36198*2.0;
                double t36228 = t36226+t36227-ccaa1*gamma_bb[index]*t36200*t36170*t36169-ccaa2*t36202*t36205*t36170* \
                   t36173*t36169;
                double t36229 = 1.0/t36211;
                double t36230 = 1.0/t36214;
                double t36231 = 1.0/(t36211*t36211);
                double t36232 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t36233 = 1.0/(t36214*t36214);
                double t36234 = gx*t36168*2.0;
                double t36235 = gamma_bb[index]*t36170*t36209*2.0;
                double t36236 = t36234+t36235;
                double t36237 = gamma_bb[index]*gx*t36201*(1.6E1/3.0);
                double t36238 = t36173*t36209*t36199*(1.6E1/3.0);
                double t36239 = t36237+t36238;
                v_rho_b_gamma_bb_[index] = -t36228*(t36196+t36182*t36179*(t36195-c0p*t36165*t36167*2.0))+rho_b[index]* \
                   t36228*(-t36225+t36182*t36179*(t36225-(t36194*1.0/(t36188*t36188)*(b2f*c*t36215*(1.0/3.0)+b4f*t36216* \
                   t36154*(2.0/3.0)+b1f*c*t36215*t36217*(1.0/6.0)+b3f*c*t36152*t36215*(1.0/2.0)))/t36191+a1f*c*c0f*t36215* \
                   t36192*(2.0/3.0)-a1p*c*c0p*t36215*t36165*(2.0/3.0))+a1p*c*c0p*t36215*t36165*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t36229*t36168-cx1*gamma_bb[index]*t36231*t36170*t36209+cx2*gamma_bb[index]*t36230*t36170* \
                   t36209*2.0-cx2*t36170*t36233*t36173*t36209*t36236)*(4.0/3.0)+rho_b[index]*(t36196+t36182*t36179*(t36195- \
                   t36196))*(ccaa1*gcaa*t36201*t36197*(8.0/3.0)-ccaa1*gamma_bb[index]*t36200*t36169*t36199*8.0+ccaa2* \
                   gamma_bb[index]*t36169*t36198*t36199*(3.2E1/3.0)-ccaa2*t36202*t36205*t36173*t36169*t36199*(1.6E1/3.0) \
                   +ccaa1*gcaa*t36232*1.0/(t36172*t36172*t36172)*t36173*t36169*(1.6E1/3.0)-ccaa2*t36202*t36170*t36173* \
                   t36169*(gcaa*t36201*(1.6E1/3.0)+gamma_bb[index]*t36169*t36199*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t36202* \
                   t36170*t36208*t36169*2.0+ccaa2*t36205*t36170*t36208*t36173*1.0/(t36176*t36176*t36176)*t36169*2.0)- \
                   c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t36201*t36229*(8.0/3.0)-cx1*gamma_bb[index]*t36231*t36209*t36199* \
                   8.0+cx2*gamma_bb[index]*t36230*t36209*t36199*(3.2E1/3.0)-cx2*t36233*t36173*t36209*t36236*t36199*(1.6E1/ \
                   3.0)+cx1*gx*1.0/(t36211*t36211*t36211)*t36232*t36173*t36209*(1.6E1/3.0)-cx2*t36170*t36233*t36173*t36209* \
                   (gx*t36201*(1.6E1/3.0)+gamma_bb[index]*t36209*t36199*(3.2E1/3.0))-cx2*gamma_bb[index]*t36170*t36233* \
                   t36209*t36239*2.0+cx2*1.0/(t36214*t36214*t36214)*t36170*t36173*t36209*t36236*t36239*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35535 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35536 = c*t35535;
                double t35537 = sqrt(t35536);
                double t35538 = pow(t35536,3.0/2.0);
                double t35539 = c*c;
                double t35540 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35541 = 1.0/c0p;
                double t35542 = b1p*t35537;
                double t35543 = b3p*t35538;
                double t35544 = b4p*t35540*t35539;
                double t35545 = b2p*c*t35535;
                double t35546 = t35542+t35543+t35544+t35545;
                double t35547 = 1.0/t35546;
                double t35548 = t35541*t35547*(1.0/2.0);
                double t35549 = t35548+1.0;
                double t35550 = log(t35549);
                double t35551 = a1p*c*t35535;
                double t35552 = t35551+1.0;
                double t35553 = pow(2.0,1.0/3.0);
                double t35554 = t35553*2.0;
                double t35555 = t35554-2.0;
                double t35556 = two_13*2.0;
                double t35557 = t35556-2.0;
                double t35558 = 1.0/t35557;
                double t35559 = 1.0/c0f;
                double t35560 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35561 = c*t35560;
                double t35562 = sqrt(t35561);
                double t35563 = pow(t35561,3.0/2.0);
                double t35564 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35565 = b1p*t35562;
                double t35566 = b3p*t35563;
                double t35567 = b4p*t35564*t35539;
                double t35568 = b2p*c*t35560;
                double t35569 = t35565+t35566+t35567+t35568;
                double t35570 = 1.0/t35569;
                double t35571 = t35541*t35570*(1.0/2.0);
                double t35572 = t35571+1.0;
                double t35573 = log(t35572);
                double t35574 = a1p*c*t35560;
                double t35575 = t35574+1.0;
                double t35576 = c0p*t35573*t35575*2.0;
                double t35577 = rho_a[index]+rho_b[index];
                double t35578 = 1.0/pow(t35577,1.0/3.0);
                double t35579 = c*t35578;
                double t35580 = sqrt(t35579);
                double t35581 = pow(t35579,3.0/2.0);
                double t35582 = 1.0/pow(t35577,2.0/3.0);
                double t35583 = b1p*t35580;
                double t35584 = b3p*t35581;
                double t35585 = b4p*t35582*t35539;
                double t35586 = b2p*c*t35578;
                double t35587 = t35583+t35584+t35585+t35586;
                double t35588 = 1.0/t35587;
                double t35589 = t35541*t35588*(1.0/2.0);
                double t35590 = t35589+1.0;
                double t35591 = log(t35590);
                double t35592 = a1p*c*t35578;
                double t35593 = t35592+1.0;
                double t35594 = c0p*t35591*t35593*2.0;
                double t35595 = rho_a[index]-rho_b[index];
                double t35596 = t35595*t35595;
                double t35597 = 1.0/t35577;
                double t35598 = t35595*t35597;
                double t35599 = 1.0/(t35577*t35577*t35577*t35577);
                double t35600 = t35596*t35596;
                double t35601 = t35598+1.0;
                double t35602 = pow(t35601,4.0/3.0);
                double t35603 = -t35598+1.0;
                double t35604 = pow(t35603,4.0/3.0);
                double t35605 = t35602+t35604-2.0;
                double t35606 = gcab*gcab;
                double t35607 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t35608 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35609 = gamma_aa[index]*t35608*(1.0/2.0);
                double t35610 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35611 = gamma_bb[index]*t35610*(1.0/2.0);
                double t35612 = t35611+t35609;
                double t35613 = gcab*t35612;
                double t35614 = t35613+1.0;
                double t35615 = t35612*t35612;
                double t35616 = t35606*t35615;
                double t35617 = gcab*t35612*2.0;
                double t35618 = t35616+t35617+1.0;
                double t35620 = gcab*t35608;
                double t35621 = t35612*t35606*t35608;
                double t35619 = t35620+t35621;
                double t35622 = 1.0/(t35618*t35618);
                double t35623 = b1f*t35537;
                double t35624 = b3f*t35538;
                double t35625 = b4f*t35540*t35539;
                double t35626 = b2f*c*t35535;
                double t35627 = t35623+t35624+t35625+t35626;
                double t35628 = 1.0/t35627;
                double t35629 = t35628*t35559*(1.0/2.0);
                double t35630 = t35629+1.0;
                double t35631 = log(t35630);
                double t35632 = a1f*c*t35535;
                double t35633 = t35632+1.0;
                double t35634 = c0f*t35631*t35633*2.0;
                double t35635 = c0p*t35550*t35552*2.0;
                double t35636 = gcaa*gcaa;
                double t35637 = gamma_aa[index]*gcaa*t35608;
                double t35638 = t35637+1.0;
                double t35639 = gamma_aa[index]*gamma_aa[index];
                double t35640 = gamma_aa[index]*gcaa*t35608*2.0;
                double t35641 = t35607*t35636*t35639;
                double t35642 = t35640+t35641+1.0;
                double t35644 = gcaa*t35608*2.0;
                double t35645 = gamma_aa[index]*t35607*t35636*2.0;
                double t35643 = t35644+t35645;
                double t35646 = 1.0/(t35642*t35642);
                double t35647 = gx*gx;
                double t35648 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t35649 = gamma_aa[index]*gx*t35608;
                double t35650 = t35649+1.0;
                double t35651 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t35652 = gamma_aa[index]*gx*t35608*2.0;
                double t35653 = t35607*t35647*t35639;
                double t35654 = t35652+t35653+1.0;
                double t35656 = gx*t35608*2.0;
                double t35657 = gamma_aa[index]*t35607*t35647*2.0;
                double t35655 = t35656+t35657;
                double t35658 = 1.0/(t35654*t35654);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t35635+t35555*t35558*(t35634-c0p*t35550*t35552*2.0) \
                   )+rho_b[index]*(t35576-t35555*t35558*(t35576-c0f*log((t35559*(1.0/2.0))/(b1f*t35562+b3f*t35563+b2f* \
                   c*t35560+b4f*t35564*t35539)+1.0)*(a1f*c*t35560+1.0)*2.0))-t35577*(t35594-t35600*t35605*t35558*t35599* \
                   (t35594-c0f*log((t35559*(1.0/2.0))/(b1f*t35580+b3f*t35581+b2f*c*t35578+b4f*t35582*t35539)+1.0)*(a1f* \
                   c*t35578+1.0)*2.0)+(Aa*t35605*t35558*log((1.0/2.0)/(Aa*(b1a*t35580+b3a*t35581+b2a*c*t35578+b4a*t35582* \
                   t35539))+1.0)*(t35600*t35599-1.0)*(a1a*c*t35578+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t35614*t35614)*t35606* \
                   t35607*(1.0/2.0)-(ccab2*t35606*t35607*(1.0/2.0))/t35618-ccab2*t35606*t35615*1.0/(t35618*t35618*t35618) \
                   *(t35619*t35619)*2.0+ccab2*t35622*(t35606*t35606)*t35615*t35607*(1.0/2.0)+ccab2*t35612*t35622*t35606* \
                   t35608*t35619*2.0-ccab1*gcab*t35612*1.0/(t35614*t35614*t35614)*t35606*t35607*(1.0/2.0))-rho_a[index]* \
                   (t35635+t35555*t35558*(t35634-t35635))*((ccaa2*t35607*t35636*2.0)/t35642-ccaa1*t35607*t35636*1.0/(t35638* \
                   t35638)*2.0-ccaa2*t35651*(t35636*t35636)*t35646*t35639*2.0+ccaa1*gamma_aa[index]*gcaa*t35636*1.0/(t35638* \
                   t35638*t35638)*t35648*2.0+ccaa2*1.0/(t35642*t35642*t35642)*t35607*(t35643*t35643)*t35636*t35639*2.0- \
                   ccaa2*gamma_aa[index]*t35607*t35643*t35636*t35646*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*1.0/(t35650* \
                   t35650)*t35607*t35647*2.0-(cx2*t35607*t35647*2.0)/t35654+cx2*t35651*(t35647*t35647)*t35639*t35658* \
                   2.0-cx1*gamma_aa[index]*gx*1.0/(t35650*t35650*t35650)*t35647*t35648*2.0-cx2*t35607*1.0/(t35654*t35654* \
                   t35654)*(t35655*t35655)*t35647*t35639*2.0+cx2*gamma_aa[index]*t35607*t35655*t35647*t35658*4.0);
            } else if (rho_a[index] > cutoff_) {
                double t36652 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36653 = c*t36652;
                double t36654 = sqrt(t36653);
                double t36655 = pow(t36653,3.0/2.0);
                double t36656 = c*c;
                double t36657 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36658 = 1.0/c0p;
                double t36659 = b1p*t36654;
                double t36660 = b3p*t36655;
                double t36661 = b4p*t36656*t36657;
                double t36662 = b2p*c*t36652;
                double t36663 = t36660+t36661+t36662+t36659;
                double t36664 = 1.0/t36663;
                double t36665 = t36664*t36658*(1.0/2.0);
                double t36666 = t36665+1.0;
                double t36667 = log(t36666);
                double t36668 = a1p*c*t36652;
                double t36669 = t36668+1.0;
                double t36670 = gcaa*gcaa;
                double t36671 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36672 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36673 = gamma_aa[index]*gcaa*t36672;
                double t36674 = t36673+1.0;
                double t36675 = gamma_aa[index]*gamma_aa[index];
                double t36676 = gamma_aa[index]*gcaa*t36672*2.0;
                double t36677 = t36670*t36671*t36675;
                double t36678 = t36676+t36677+1.0;
                double t36680 = gcaa*t36672*2.0;
                double t36681 = gamma_aa[index]*t36670*t36671*2.0;
                double t36679 = t36680+t36681;
                double t36682 = 1.0/(t36678*t36678);
                double t36683 = gx*gx;
                double t36684 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t36685 = gamma_aa[index]*gx*t36672;
                double t36686 = t36685+1.0;
                double t36687 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t36688 = gamma_aa[index]*gx*t36672*2.0;
                double t36689 = t36671*t36683*t36675;
                double t36690 = t36688+t36689+1.0;
                double t36692 = gx*t36672*2.0;
                double t36693 = gamma_aa[index]*t36671*t36683*2.0;
                double t36691 = t36692+t36693;
                double t36694 = 1.0/(t36690*t36690);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t36654+b3f*t36655+b2f*c*t36652+b4f*t36656*t36657))+1.0)*(a1f*c*t36652+1.0)*2.0-c0p*t36667*t36669*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t36667*t36669*2.0)*(ccaa1*t36670*t36671*1.0/(t36674*t36674)*2.0-(ccaa2*t36670* \
                   t36671*2.0)/t36678+ccaa2*(t36670*t36670)*t36682*t36675*t36687*2.0-ccaa1*gamma_aa[index]*gcaa*t36670* \
                   1.0/(t36674*t36674*t36674)*t36684*2.0-ccaa2*t36670*t36671*t36675*1.0/(t36678*t36678*t36678)*(t36679* \
                   t36679)*2.0+ccaa2*gamma_aa[index]*t36670*t36671*t36682*t36679*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   t36671*t36683*1.0/(t36686*t36686)*2.0-(cx2*t36671*t36683*2.0)/t36690+cx2*(t36683*t36683)*t36675*t36694* \
                   t36687*2.0-cx1*gamma_aa[index]*gx*t36683*t36684*1.0/(t36686*t36686*t36686)*2.0-cx2*t36671*1.0/(t36690* \
                   t36690*t36690)*(t36691*t36691)*t36683*t36675*2.0+cx2*gamma_aa[index]*t36671*t36691*t36683*t36694*4.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35661 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35662 = c*t35661;
                double t35663 = sqrt(t35662);
                double t35664 = pow(t35662,3.0/2.0);
                double t35665 = c*c;
                double t35666 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35667 = 1.0/c0p;
                double t35668 = b1p*t35663;
                double t35669 = b3p*t35664;
                double t35670 = b4p*t35665*t35666;
                double t35671 = b2p*c*t35661;
                double t35672 = t35670+t35671+t35668+t35669;
                double t35673 = 1.0/t35672;
                double t35674 = t35673*t35667*(1.0/2.0);
                double t35675 = t35674+1.0;
                double t35676 = log(t35675);
                double t35677 = a1p*c*t35661;
                double t35678 = t35677+1.0;
                double t35679 = pow(2.0,1.0/3.0);
                double t35680 = t35679*2.0;
                double t35681 = t35680-2.0;
                double t35682 = two_13*2.0;
                double t35683 = t35682-2.0;
                double t35684 = 1.0/t35683;
                double t35685 = 1.0/c0f;
                double t35686 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35687 = c*t35686;
                double t35688 = sqrt(t35687);
                double t35689 = pow(t35687,3.0/2.0);
                double t35690 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35691 = b1p*t35688;
                double t35692 = b3p*t35689;
                double t35693 = b4p*t35690*t35665;
                double t35694 = b2p*c*t35686;
                double t35695 = t35691+t35692+t35693+t35694;
                double t35696 = 1.0/t35695;
                double t35697 = t35667*t35696*(1.0/2.0);
                double t35698 = t35697+1.0;
                double t35699 = log(t35698);
                double t35700 = a1p*c*t35686;
                double t35701 = t35700+1.0;
                double t35702 = c0p*t35701*t35699*2.0;
                double t35703 = rho_a[index]+rho_b[index];
                double t35704 = 1.0/pow(t35703,1.0/3.0);
                double t35705 = c*t35704;
                double t35706 = sqrt(t35705);
                double t35707 = pow(t35705,3.0/2.0);
                double t35708 = 1.0/pow(t35703,2.0/3.0);
                double t35709 = b1p*t35706;
                double t35710 = b3p*t35707;
                double t35711 = b4p*t35708*t35665;
                double t35712 = b2p*c*t35704;
                double t35713 = t35710+t35711+t35712+t35709;
                double t35714 = 1.0/t35713;
                double t35715 = t35714*t35667*(1.0/2.0);
                double t35716 = t35715+1.0;
                double t35717 = log(t35716);
                double t35718 = a1p*c*t35704;
                double t35719 = t35718+1.0;
                double t35720 = c0p*t35717*t35719*2.0;
                double t35721 = rho_a[index]-rho_b[index];
                double t35722 = t35721*t35721;
                double t35723 = 1.0/t35703;
                double t35724 = t35721*t35723;
                double t35725 = 1.0/(t35703*t35703*t35703*t35703);
                double t35726 = t35722*t35722;
                double t35727 = t35724+1.0;
                double t35728 = pow(t35727,4.0/3.0);
                double t35729 = -t35724+1.0;
                double t35730 = pow(t35729,4.0/3.0);
                double t35731 = t35730+t35728-2.0;
                double t35732 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35733 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35734 = gcab*gcab;
                double t35735 = gamma_aa[index]*t35732*(1.0/2.0);
                double t35736 = gamma_bb[index]*t35733*(1.0/2.0);
                double t35737 = t35735+t35736;
                double t35738 = t35737*t35737;
                double t35739 = t35734*t35738;
                double t35740 = gcab*t35737*2.0;
                double t35741 = t35740+t35739+1.0;
                double t35742 = 1.0/(t35741*t35741);
                double t35743 = gcab*t35732;
                double t35744 = t35732*t35734*t35737;
                double t35745 = t35743+t35744;
                double t35746 = gcab*t35733;
                double t35747 = t35733*t35734*t35737;
                double t35748 = t35746+t35747;
                double t35749 = gcab*t35737;
                double t35750 = t35749+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t35702-t35681*t35684*(t35702-c0f*log((t35685*(1.0/2.0) \
                   )/(b1f*t35688+b3f*t35689+b2f*c*t35686+b4f*t35690*t35665)+1.0)*(a1f*c*t35686+1.0)*2.0))+t35703*(t35720- \
                   t35731*t35725*t35726*t35684*(t35720-c0f*log((t35685*(1.0/2.0))/(b1f*t35706+b3f*t35707+b2f*c*t35704+ \
                   b4f*t35708*t35665)+1.0)*(a1f*c*t35704+1.0)*2.0)+(Aa*t35731*t35684*log((1.0/2.0)/(Aa*(b1a*t35706+b3a* \
                   t35707+b2a*c*t35704+b4a*t35708*t35665))+1.0)*(t35725*t35726-1.0)*(a1a*c*t35704+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t35681*t35684*(c0p*t35676*t35678*2.0-c0f*log((t35685*(1.0/2.0))/(b1f*t35663+b3f*t35664+b2f*c*t35661+ \
                   b4f*t35665*t35666)+1.0)*(a1f*c*t35661+1.0)*2.0)-c0p*t35676*t35678*2.0))*(ccab1*t35732*1.0/(t35750* \
                   t35750)*t35733*t35734*(1.0/2.0)-(ccab2*t35732*t35733*t35734*(1.0/2.0))/t35741+ccab2*t35733*t35742* \
                   t35734*t35745*t35737+ccab2*t35732*t35742*t35734*t35737*t35748+ccab2*t35732*t35733*t35742*(t35734*t35734) \
                   *t35738*(1.0/2.0)-ccab2*1.0/(t35741*t35741*t35741)*t35734*t35745*t35738*t35748*2.0-ccab1*gcab*t35732* \
                   1.0/(t35750*t35750*t35750)*t35733*t35734*t35737*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35754 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35755 = c*t35754;
                double t35756 = sqrt(t35755);
                double t35757 = pow(t35755,3.0/2.0);
                double t35758 = c*c;
                double t35759 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35760 = 1.0/c0p;
                double t35761 = b1p*t35756;
                double t35762 = b3p*t35757;
                double t35763 = b4p*t35758*t35759;
                double t35764 = b2p*c*t35754;
                double t35765 = t35761+t35762+t35763+t35764;
                double t35766 = 1.0/t35765;
                double t35767 = t35760*t35766*(1.0/2.0);
                double t35768 = t35767+1.0;
                double t35769 = log(t35768);
                double t35770 = a1p*c*t35754;
                double t35771 = t35770+1.0;
                double t35772 = pow(2.0,1.0/3.0);
                double t35773 = t35772*2.0;
                double t35774 = t35773-2.0;
                double t35775 = two_13*2.0;
                double t35776 = t35775-2.0;
                double t35777 = 1.0/t35776;
                double t35778 = 1.0/c0f;
                double t35779 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35780 = c*t35779;
                double t35781 = sqrt(t35780);
                double t35782 = pow(t35780,3.0/2.0);
                double t35783 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35784 = b1p*t35781;
                double t35785 = b3p*t35782;
                double t35786 = b4p*t35783*t35758;
                double t35787 = b2p*c*t35779;
                double t35788 = t35784+t35785+t35786+t35787;
                double t35789 = 1.0/t35788;
                double t35790 = t35760*t35789*(1.0/2.0);
                double t35791 = t35790+1.0;
                double t35792 = log(t35791);
                double t35793 = a1p*c*t35779;
                double t35794 = t35793+1.0;
                double t35795 = c0p*t35792*t35794*2.0;
                double t35796 = rho_a[index]+rho_b[index];
                double t35797 = 1.0/pow(t35796,1.0/3.0);
                double t35798 = c*t35797;
                double t35799 = sqrt(t35798);
                double t35800 = pow(t35798,3.0/2.0);
                double t35801 = 1.0/pow(t35796,2.0/3.0);
                double t35802 = b1p*t35799;
                double t35803 = b3p*t35800;
                double t35804 = b4p*t35801*t35758;
                double t35805 = b2p*c*t35797;
                double t35806 = t35802+t35803+t35804+t35805;
                double t35807 = 1.0/t35806;
                double t35808 = t35760*t35807*(1.0/2.0);
                double t35809 = t35808+1.0;
                double t35810 = log(t35809);
                double t35811 = a1p*c*t35797;
                double t35812 = t35811+1.0;
                double t35813 = c0p*t35810*t35812*2.0;
                double t35814 = rho_a[index]-rho_b[index];
                double t35815 = t35814*t35814;
                double t35816 = 1.0/t35796;
                double t35817 = t35814*t35816;
                double t35818 = 1.0/(t35796*t35796*t35796*t35796);
                double t35819 = t35815*t35815;
                double t35820 = t35817+1.0;
                double t35821 = pow(t35820,4.0/3.0);
                double t35822 = -t35817+1.0;
                double t35823 = pow(t35822,4.0/3.0);
                double t35824 = t35821+t35823-2.0;
                double t35825 = gcab*gcab;
                double t35826 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35827 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35828 = gamma_aa[index]*t35827*(1.0/2.0);
                double t35829 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35830 = gamma_bb[index]*t35829*(1.0/2.0);
                double t35831 = t35830+t35828;
                double t35832 = gcab*t35831;
                double t35833 = t35832+1.0;
                double t35834 = t35831*t35831;
                double t35835 = t35825*t35834;
                double t35836 = gcab*t35831*2.0;
                double t35837 = t35835+t35836+1.0;
                double t35839 = gcab*t35829;
                double t35840 = t35831*t35825*t35829;
                double t35838 = t35840+t35839;
                double t35841 = 1.0/(t35837*t35837);
                double t35842 = b1f*t35781;
                double t35843 = b3f*t35782;
                double t35844 = b4f*t35783*t35758;
                double t35845 = b2f*c*t35779;
                double t35846 = t35842+t35843+t35844+t35845;
                double t35847 = 1.0/t35846;
                double t35848 = t35847*t35778*(1.0/2.0);
                double t35849 = t35848+1.0;
                double t35850 = log(t35849);
                double t35851 = a1f*c*t35779;
                double t35852 = t35851+1.0;
                double t35853 = t35795-c0f*t35850*t35852*2.0;
                double t35854 = t35795-t35853*t35774*t35777;
                double t35855 = gcaa*gcaa;
                double t35856 = gamma_bb[index]*gcaa*t35829;
                double t35857 = t35856+1.0;
                double t35858 = gamma_bb[index]*gamma_bb[index];
                double t35859 = gamma_bb[index]*gcaa*t35829*2.0;
                double t35860 = t35826*t35855*t35858;
                double t35861 = t35860+t35859+1.0;
                double t35863 = gcaa*t35829*2.0;
                double t35864 = gamma_bb[index]*t35826*t35855*2.0;
                double t35862 = t35863+t35864;
                double t35865 = 1.0/(t35861*t35861);
                double t35866 = gx*gx;
                double t35867 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t35868 = gamma_bb[index]*gx*t35829;
                double t35869 = t35868+1.0;
                double t35870 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t35871 = gamma_bb[index]*gx*t35829*2.0;
                double t35872 = t35826*t35866*t35858;
                double t35873 = t35871+t35872+1.0;
                double t35875 = gx*t35829*2.0;
                double t35876 = gamma_bb[index]*t35826*t35866*2.0;
                double t35874 = t35875+t35876;
                double t35877 = 1.0/(t35873*t35873);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t35854+t35796*(t35813-t35824*t35818*t35819*t35777*(t35813- \
                   c0f*log((t35778*(1.0/2.0))/(b1f*t35799+b3f*t35800+b2f*c*t35797+b4f*t35801*t35758)+1.0)*(a1f*c*t35797+ \
                   1.0)*2.0)+(Aa*t35824*t35777*log((1.0/2.0)/(Aa*(b1a*t35799+b3a*t35800+b2a*c*t35797+b4a*t35801*t35758) \
                   )+1.0)*(t35818*t35819-1.0)*(a1a*c*t35797+1.0)*2.0)/d2fz0)+rho_a[index]*(t35774*t35777*(c0p*t35771* \
                   t35769*2.0-c0f*log((t35778*(1.0/2.0))/(b1f*t35756+b3f*t35757+b2f*c*t35754+b4f*t35758*t35759)+1.0)* \
                   (a1f*c*t35754+1.0)*2.0)-c0p*t35771*t35769*2.0))*(ccab1*1.0/(t35833*t35833)*t35825*t35826*(1.0/2.0) \
                   -(ccab2*t35825*t35826*(1.0/2.0))/t35837-ccab2*t35825*t35834*1.0/(t35837*t35837*t35837)*(t35838*t35838) \
                   *2.0+ccab2*t35841*(t35825*t35825)*t35834*t35826*(1.0/2.0)+ccab2*t35831*t35841*t35825*t35829*t35838* \
                   2.0-ccab1*gcab*t35831*1.0/(t35833*t35833*t35833)*t35825*t35826*(1.0/2.0))-rho_b[index]*t35854*((ccaa2* \
                   t35826*t35855*2.0)/t35861-ccaa1*t35826*t35855*1.0/(t35857*t35857)*2.0-ccaa2*t35870*(t35855*t35855) \
                   *t35865*t35858*2.0+ccaa1*gamma_bb[index]*gcaa*t35855*1.0/(t35857*t35857*t35857)*t35867*2.0+ccaa2*1.0/ \
                   (t35861*t35861*t35861)*t35826*(t35862*t35862)*t35855*t35858*2.0-ccaa2*gamma_bb[index]*t35826*t35862* \
                   t35855*t35865*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*t35826*t35866*1.0/(t35869*t35869)*2.0-(cx2*t35826* \
                   t35866*2.0)/t35873+cx2*t35870*(t35866*t35866)*t35858*t35877*2.0-cx1*gamma_bb[index]*gx*t35866*t35867* \
                   1.0/(t35869*t35869*t35869)*2.0-cx2*t35826*1.0/(t35873*t35873*t35873)*(t35874*t35874)*t35866*t35858* \
                   2.0+cx2*gamma_bb[index]*t35826*t35874*t35866*t35877*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t36246 = 1.0/pow(rho_b[index],1.0/3.0);
                double t36247 = c*t36246;
                double t36248 = sqrt(t36247);
                double t36249 = pow(t36247,3.0/2.0);
                double t36250 = c*c;
                double t36251 = 1.0/pow(rho_b[index],2.0/3.0);
                double t36252 = 1.0/c0p;
                double t36253 = b1p*t36248;
                double t36254 = b3p*t36249;
                double t36255 = b4p*t36250*t36251;
                double t36256 = b2p*c*t36246;
                double t36257 = t36253+t36254+t36255+t36256;
                double t36258 = 1.0/t36257;
                double t36259 = t36252*t36258*(1.0/2.0);
                double t36260 = t36259+1.0;
                double t36261 = log(t36260);
                double t36262 = a1p*c*t36246;
                double t36263 = t36262+1.0;
                double t36264 = gcaa*gcaa;
                double t36265 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t36266 = 1.0/pow(rho_b[index],8.0/3.0);
                double t36267 = gamma_bb[index]*gcaa*t36266;
                double t36268 = t36267+1.0;
                double t36269 = gamma_bb[index]*gamma_bb[index];
                double t36270 = gamma_bb[index]*gcaa*t36266*2.0;
                double t36271 = t36264*t36265*t36269;
                double t36272 = t36270+t36271+1.0;
                double t36274 = gcaa*t36266*2.0;
                double t36275 = gamma_bb[index]*t36264*t36265*2.0;
                double t36273 = t36274+t36275;
                double t36276 = 1.0/(t36272*t36272);
                double t36277 = gx*gx;
                double t36278 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t36279 = gamma_bb[index]*gx*t36266;
                double t36280 = t36279+1.0;
                double t36281 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t36282 = gamma_bb[index]*gx*t36266*2.0;
                double t36283 = t36265*t36277*t36269;
                double t36284 = t36282+t36283+1.0;
                double t36286 = gx*t36266*2.0;
                double t36287 = gamma_bb[index]*t36265*t36277*2.0;
                double t36285 = t36286+t36287;
                double t36288 = 1.0/(t36284*t36284);
                v_gamma_bb_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t36248+b3f*t36249+b2f*c*t36246+b4f*t36250*t36251))+1.0)*(a1f*c*t36246+1.0)*2.0-c0p*t36261*t36263* \
                   2.0))/(two_13*2.0-2.0)+c0p*t36261*t36263*2.0)*((ccaa2*t36264*t36265*2.0)/t36272-ccaa1*t36264*t36265* \
                   1.0/(t36268*t36268)*2.0-ccaa2*t36281*(t36264*t36264)*t36276*t36269*2.0+ccaa1*gamma_bb[index]*gcaa* \
                   t36264*1.0/(t36268*t36268*t36268)*t36278*2.0+ccaa2*1.0/(t36272*t36272*t36272)*t36264*(t36273*t36273) \
                   *t36265*t36269*2.0-ccaa2*gamma_bb[index]*t36264*t36273*t36265*t36276*4.0)-c0*pow(rho_b[index],4.0/ \
                   3.0)*(cx1*1.0/(t36280*t36280)*t36265*t36277*2.0-(cx2*t36265*t36277*2.0)/t36284+cx2*t36281*(t36277* \
                   t36277)*t36269*t36288*2.0-cx1*gamma_bb[index]*gx*1.0/(t36280*t36280*t36280)*t36277*t36278*2.0-cx2* \
                   t36265*1.0/(t36284*t36284*t36284)*(t36285*t36285)*t36277*t36269*2.0+cx2*gamma_bb[index]*t36265*t36285* \
                   t36277*t36288*4.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

