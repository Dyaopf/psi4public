/**********************************************************
* B97_1_functional.cc: definitions for B97_1_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "B97_1_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_1_Functional::B97_1_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "B97_1";
    description_ = "B97-1 Power Series GGA";
    citation_ = "F.A. Hamprecht et. al., J. Chem. Phys., 109(15), 6264-6271, 1998";

    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 9.5568900000000001E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 7.8855200000000003E-01;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -5.4786900000000003E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 8.2001099999999993E-02;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 2.7168100000000002E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -2.8710300000000002E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 7.8951800000000005E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 5.7380500000000001E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 6.6097499999999998E-01;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_1_Functional::~B97_1_Functional()
{
}
void B97_1_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t36477 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36478 = c*t36477;
            double t36479 = sqrt(t36478);
            double t36480 = pow(t36478,3.0/2.0);
            double t36481 = c*c;
            double t36482 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36483 = 1.0/c0p;
            double t36484 = b1p*t36479;
            double t36485 = b3p*t36480;
            double t36486 = b4p*t36481*t36482;
            double t36487 = b2p*c*t36477;
            double t36488 = t36484+t36485+t36486+t36487;
            double t36489 = 1.0/t36488;
            double t36490 = t36483*t36489*(1.0/2.0);
            double t36491 = t36490+1.0;
            double t36492 = log(t36491);
            double t36493 = a1p*c*t36477;
            double t36494 = t36493+1.0;
            double t36495 = rho_a[index]*2.0;
            double t36496 = 1.0/pow(t36495,1.0/3.0);
            double t36497 = c*t36496;
            double t36498 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36499 = gamma_aa[index]*gamma_aa[index];
            double t36500 = gcab*gcab;
            double t36501 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36502 = gx*gx;
            double t36503 = pow(2.0,1.0/3.0);
            double t36504 = t36503*2.0;
            double t36505 = t36504-2.0;
            double t36506 = two_13*2.0;
            double t36507 = t36506-2.0;
            double t36508 = 1.0/t36507;
            double t36509 = 1.0/c0f;
            double t36510 = b1f*t36479;
            double t36511 = b3f*t36480;
            double t36512 = b4f*t36481*t36482;
            double t36513 = b2f*c*t36477;
            double t36514 = t36510+t36511+t36512+t36513;
            double t36515 = 1.0/t36514;
            double t36516 = t36515*t36509*(1.0/2.0);
            double t36517 = t36516+1.0;
            double t36518 = log(t36517);
            double t36519 = a1f*c*t36477;
            double t36520 = t36519+1.0;
            double t36521 = c0f*t36520*t36518*2.0;
            double t36522 = c0p*t36492*t36494*2.0;
            double t36523 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t36522+t36505*t36508*(t36521-c0p*t36492*t36494*2.0))*2.0-c0p* \
               rho_a[index]*log((t36483*(1.0/2.0))/(b1p*sqrt(t36497)+b3p*pow(t36497,3.0/2.0)+b4p*t36481*1.0/pow(t36495,2.0/ \
               3.0)+b2p*c*t36496)+1.0)*(a1p*c*t36496+1.0)*4.0)*(ccab0+(ccab2*t36500*t36501*t36499)/(gamma_aa[index]* \
               gcab*t36498*2.0+t36500*t36501*t36499+1.0)+(ccab1*gamma_aa[index]*gcab*t36498)/(gamma_aa[index]*gcab* \
               t36498+1.0))-rho_a[index]*(t36522+t36505*t36508*(t36521-t36522))*(ccaa0+(ccaa2*t36501*t36523*t36499) \
               /(gamma_aa[index]*gcaa*t36498*2.0+t36501*t36523*t36499+1.0)+(ccaa1*gamma_aa[index]*gcaa*t36498)/(gamma_aa[index]* \
               gcaa*t36498+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t36501*t36502*t36499)/(gamma_aa[index]* \
               gx*t36498*2.0+t36501*t36502*t36499+1.0)+(cx1*gamma_aa[index]*gx*t36498)/(gamma_aa[index]*gx*t36498+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t36525 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36526 = c*t36525;
            double t36527 = sqrt(t36526);
            double t36528 = pow(t36526,3.0/2.0);
            double t36529 = c*c;
            double t36530 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36531 = 1.0/c0p;
            double t36532 = b1p*t36527;
            double t36533 = b3p*t36528;
            double t36534 = b4p*t36530*t36529;
            double t36535 = b2p*c*t36525;
            double t36536 = t36532+t36533+t36534+t36535;
            double t36537 = 1.0/t36536;
            double t36538 = t36531*t36537*(1.0/2.0);
            double t36539 = t36538+1.0;
            double t36540 = log(t36539);
            double t36541 = a1p*c*t36525;
            double t36542 = t36541+1.0;
            double t36543 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36544 = gamma_aa[index]*gamma_aa[index];
            double t36545 = gcaa*gcaa;
            double t36546 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36547 = pow(2.0,1.0/3.0);
            double t36548 = t36547*2.0;
            double t36549 = t36548-2.0;
            double t36550 = two_13*2.0;
            double t36551 = t36550-2.0;
            double t36552 = 1.0/t36551;
            double t36553 = 1.0/c0f;
            double t36554 = b1f*t36527;
            double t36555 = b3f*t36528;
            double t36556 = b4f*t36530*t36529;
            double t36557 = b2f*c*t36525;
            double t36558 = t36554+t36555+t36556+t36557;
            double t36559 = 1.0/t36558;
            double t36560 = t36553*t36559*(1.0/2.0);
            double t36561 = t36560+1.0;
            double t36562 = log(t36561);
            double t36563 = a1f*c*t36525;
            double t36564 = t36563+1.0;
            double t36565 = c0f*t36562*t36564*2.0;
            double t36566 = c0p*t36540*t36542*2.0;
            double t36567 = rho_a[index]*2.0;
            double t36568 = 1.0/pow(t36567,1.0/3.0);
            double t36569 = c*t36568;
            double t36570 = gcab*gcab;
            double t36571 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36572 = gamma_aa[index]*gcab*t36543;
            double t36573 = t36572+1.0;
            double t36574 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36575 = gamma_aa[index]*gcab*t36543*2.0;
            double t36576 = t36570*t36544*t36546;
            double t36577 = t36575+t36576+1.0;
            double t36578 = 1.0/t36573;
            double t36579 = 1.0/t36577;
            double t36580 = sqrt(t36569);
            double t36581 = b1p*t36580;
            double t36582 = pow(t36569,3.0/2.0);
            double t36583 = b3p*t36582;
            double t36584 = b2p*c*t36568;
            double t36585 = 1.0/pow(t36567,2.0/3.0);
            double t36586 = b4p*t36529*t36585;
            double t36587 = t36581+t36583+t36584+t36586;
            double t36588 = 1.0/t36587;
            double t36589 = t36531*t36588*(1.0/2.0);
            double t36590 = t36589+1.0;
            double t36591 = a1p*c*t36568;
            double t36592 = t36591+1.0;
            double t36593 = 1.0/pow(t36567,4.0/3.0);
            double t36594 = log(t36590);
            double t36595 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36596 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36597 = 1.0/sqrt(t36526);
            double t36598 = 1.0/t36539;
            double t36599 = 1.0/(t36536*t36536);
            double t36600 = b4p*t36529*t36596*(2.0/3.0);
            double t36601 = b2p*c*t36595*(1.0/3.0);
            double t36602 = b1p*c*t36595*t36597*(1.0/6.0);
            double t36603 = b3p*c*t36527*t36595*(1.0/2.0);
            double t36604 = t36600+t36601+t36602+t36603;
            double t36605 = t36604*t36542*t36598*t36599;
            double t36606 = t36565-t36566;
            double t36607 = t36552*t36606*t36549;
            double t36608 = gx*gx;
            double t36609 = gamma_aa[index]*gx*t36543;
            double t36610 = t36609+1.0;
            double t36611 = 1.0/t36610;
            double t36612 = gamma_aa[index]*gx*t36543*2.0;
            double t36613 = t36544*t36608*t36546;
            double t36614 = t36612+t36613+1.0;
            double t36615 = 1.0/t36614;
            double t36616 = 1.0/t36561;
            double t36617 = 1.0/(t36558*t36558);
            double t36618 = b4f*t36529*t36596*(2.0/3.0);
            double t36619 = b2f*c*t36595*(1.0/3.0);
            double t36620 = b1f*c*t36595*t36597*(1.0/6.0);
            double t36621 = b3f*c*t36527*t36595*(1.0/2.0);
            double t36622 = t36620+t36621+t36618+t36619;
            double t36623 = a1f*c*c0f*t36562*t36595*(2.0/3.0);
            double t36624 = a1p*c*c0p*t36540*t36595*(2.0/3.0);
            double t36625 = gamma_aa[index]*gcaa*t36543;
            double t36626 = t36625+1.0;
            double t36627 = 1.0/t36626;
            double t36628 = ccaa1*gamma_aa[index]*gcaa*t36543*t36627;
            double t36629 = gamma_aa[index]*gcaa*t36543*2.0;
            double t36630 = t36544*t36545*t36546;
            double t36631 = t36630+t36629+1.0;
            double t36632 = 1.0/t36631;
            double t36633 = ccaa2*t36632*t36544*t36545*t36546;
            double t36634 = ccaa0+t36633+t36628;
            double t36635 = t36607+t36566;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t36543*t36578+ccab2*t36570*t36544*t36546*t36579) \
               *(-t36607-t36566+rho_a[index]*((t36592*1.0/(t36587*t36587)*(b4p*t36529*1.0/pow(t36567,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t36593*(1.0/3.0)+b3p*c*t36580*t36593*(1.0/2.0)+b1p*c*t36593*1.0/sqrt(t36569)*(1.0/6.0)) \
               )/t36590-a1p*c*c0p*t36593*t36594*(2.0/3.0))*2.0+rho_a[index]*(-t36605+t36624+t36552*t36549*(t36605+ \
               t36623-t36622*t36616*t36617*t36564-a1p*c*c0p*t36540*t36595*(2.0/3.0)))+c0p*t36592*t36594*2.0)-(rho_a[index]* \
               t36635*2.0-c0p*rho_a[index]*t36592*t36594*4.0)*(ccab1*gamma_aa[index]*gcab*t36574*t36578*(4.0/3.0) \
               +ccab2*t36570*t36544*t36571*t36579*(8.0/3.0)-ccab1*t36570*t36544*t36571*1.0/(t36573*t36573)*(4.0/3.0) \
               -ccab2*t36570*t36544*t36546*1.0/(t36577*t36577)*(gamma_aa[index]*gcab*t36574*(8.0/3.0)+t36570*t36544* \
               t36571*(8.0/3.0)))-t36634*(t36566+t36552*t36549*(t36565-c0p*t36540*t36542*2.0))+rho_a[index]*t36635* \
               (ccaa1*gamma_aa[index]*gcaa*t36627*t36574*(8.0/3.0)+ccaa2*t36632*t36544*t36571*t36545*(1.6E1/3.0)- \
               ccaa1*t36544*t36571*t36545*1.0/(t36626*t36626)*(8.0/3.0)-ccaa2*1.0/(t36631*t36631)*t36544*t36545*t36546* \
               (gamma_aa[index]*gcaa*t36574*(1.6E1/3.0)+t36544*t36571*t36545*(1.6E1/3.0)))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t36611*t36543+cx2*t36615*t36544*t36608*t36546)*(4.0/3.0)+rho_a[index]* \
               t36634*(-t36605+t36624+t36552*t36549*(t36605+t36623-t36624-t36622*t36616*t36617*t36564))-c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t36611*t36574*(8.0/3.0)+cx2*t36615*t36544*t36571*t36608*(1.6E1/3.0)-cx1* \
               1.0/(t36610*t36610)*t36544*t36571*t36608*(8.0/3.0)-cx2*1.0/(t36614*t36614)*t36544*t36608*t36546*(gamma_aa[index]* \
               gx*t36574*(1.6E1/3.0)+t36544*t36571*t36608*(1.6E1/3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t36637 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36638 = c*t36637;
                double t36639 = sqrt(t36638);
                double t36640 = pow(t36638,3.0/2.0);
                double t36641 = c*c;
                double t36642 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36643 = 1.0/c0p;
                double t36644 = b1p*t36639;
                double t36645 = b3p*t36640;
                double t36646 = b4p*t36641*t36642;
                double t36647 = b2p*c*t36637;
                double t36648 = t36644+t36645+t36646+t36647;
                double t36649 = 1.0/t36648;
                double t36650 = t36643*t36649*(1.0/2.0);
                double t36651 = t36650+1.0;
                double t36652 = log(t36651);
                double t36653 = a1p*c*t36637;
                double t36654 = t36653+1.0;
                double t36655 = rho_a[index]*2.0;
                double t36656 = 1.0/pow(t36655,1.0/3.0);
                double t36657 = c*t36656;
                double t36658 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36659 = gcab*gcab;
                double t36660 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36661 = gamma_aa[index]*gcab*t36658;
                double t36662 = t36661+1.0;
                double t36663 = gamma_aa[index]*gamma_aa[index];
                double t36664 = gamma_aa[index]*gcab*t36658*2.0;
                double t36665 = t36660*t36663*t36659;
                double t36666 = t36664+t36665+1.0;
                double t36667 = gx*gx;
                double t36668 = gamma_aa[index]*gx*t36658;
                double t36669 = t36668+1.0;
                double t36670 = gamma_aa[index]*gx*t36658*2.0;
                double t36671 = t36660*t36663*t36667;
                double t36672 = t36670+t36671+1.0;
                double t36673 = pow(2.0,1.0/3.0);
                double t36674 = t36673*2.0;
                double t36675 = t36674-2.0;
                double t36676 = two_13*2.0;
                double t36677 = t36676-2.0;
                double t36678 = 1.0/t36677;
                double t36679 = 1.0/c0f;
                double t36680 = b1f*t36639;
                double t36681 = b3f*t36640;
                double t36682 = b4f*t36641*t36642;
                double t36683 = b2f*c*t36637;
                double t36684 = t36680+t36681+t36682+t36683;
                double t36685 = 1.0/t36684;
                double t36686 = t36685*t36679*(1.0/2.0);
                double t36687 = t36686+1.0;
                double t36688 = log(t36687);
                double t36689 = a1f*c*t36637;
                double t36690 = t36689+1.0;
                double t36691 = c0f*t36690*t36688*2.0;
                double t36692 = c0p*t36652*t36654*2.0;
                double t36693 = gcaa*gcaa;
                double t36694 = gamma_aa[index]*gcaa*t36658;
                double t36695 = t36694+1.0;
                double t36696 = gamma_aa[index]*gcaa*t36658*2.0;
                double t36697 = t36660*t36663*t36693;
                double t36698 = t36696+t36697+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t36692+t36675*t36678*(t36691-c0p*t36652*t36654*2.0))*2.0-c0p* \
                   rho_a[index]*log((t36643*(1.0/2.0))/(b1p*sqrt(t36657)+b3p*pow(t36657,3.0/2.0)+b4p*t36641*1.0/pow(t36655,2.0/ \
                   3.0)+b2p*c*t36656)+1.0)*(a1p*c*t36656+1.0)*4.0)*((ccab1*gcab*t36658*(1.0/2.0))/t36662-ccab1*gamma_aa[index]* \
                   t36660*1.0/(t36662*t36662)*t36659*(1.0/2.0)+(ccab2*gamma_aa[index]*t36660*t36659)/t36666-ccab2*t36660* \
                   t36663*1.0/(t36666*t36666)*t36659*(gcab*t36658+gamma_aa[index]*t36660*t36659))*2.0-rho_a[index]*(t36692+ \
                   t36675*t36678*(t36691-t36692))*((ccaa1*gcaa*t36658)/t36695-ccaa1*gamma_aa[index]*t36660*t36693*1.0/ \
                   (t36695*t36695)+(ccaa2*gamma_aa[index]*t36660*t36693*2.0)/t36698-ccaa2*t36660*t36663*t36693*1.0/(t36698* \
                   t36698)*(gcaa*t36658*2.0+gamma_aa[index]*t36660*t36693*2.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t36658)/t36669-cx1*gamma_aa[index]*t36660*t36667*1.0/(t36669*t36669)+(cx2*gamma_aa[index]*t36660* \
                   t36667*2.0)/t36672-cx2*t36660*t36663*1.0/(t36672*t36672)*t36667*(gx*t36658*2.0+gamma_aa[index]*t36660* \
                   t36667*2.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t36701 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36702 = c*t36701;
            double t36703 = sqrt(t36702);
            double t36704 = pow(t36702,3.0/2.0);
            double t36705 = c*c;
            double t36706 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36707 = 1.0/c0p;
            double t36708 = b1p*t36703;
            double t36709 = b3p*t36704;
            double t36710 = b4p*t36705*t36706;
            double t36711 = b2p*c*t36701;
            double t36712 = t36710+t36711+t36708+t36709;
            double t36713 = 1.0/t36712;
            double t36714 = t36713*t36707*(1.0/2.0);
            double t36715 = t36714+1.0;
            double t36716 = log(t36715);
            double t36717 = a1p*c*t36701;
            double t36718 = t36717+1.0;
            double t36719 = rho_a[index]*2.0;
            double t36720 = 1.0/pow(t36719,1.0/3.0);
            double t36721 = c*t36720;
            double t36722 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36723 = gamma_aa[index]*gamma_aa[index];
            double t36724 = gcab*gcab;
            double t36725 = gamma_aa[index]*gcab*t36722;
            double t36726 = t36725+1.0;
            double t36727 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t36728 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36733 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36734 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36735 = gamma_aa[index]*gcab*t36734*(8.0/3.0);
            double t36736 = t36723*t36724*t36733*(8.0/3.0);
            double t36729 = t36735+t36736;
            double t36730 = gamma_aa[index]*gcab*t36722*2.0;
            double t36731 = t36723*t36724*t36728;
            double t36732 = t36730+t36731+1.0;
            double t36737 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t36738 = 1.0/(t36732*t36732);
            double t36739 = 1.0/t36726;
            double t36740 = 1.0/t36732;
            double t36741 = sqrt(t36721);
            double t36742 = b1p*t36741;
            double t36743 = pow(t36721,3.0/2.0);
            double t36744 = b3p*t36743;
            double t36745 = b2p*c*t36720;
            double t36746 = 1.0/pow(t36719,2.0/3.0);
            double t36747 = b4p*t36705*t36746;
            double t36748 = t36742+t36744+t36745+t36747;
            double t36749 = 1.0/t36748;
            double t36750 = t36707*t36749*(1.0/2.0);
            double t36751 = t36750+1.0;
            double t36752 = a1p*c*t36720;
            double t36753 = t36752+1.0;
            double t36754 = 1.0/pow(t36719,8.0/3.0);
            double t36755 = 1.0/pow(t36719,7.0/3.0);
            double t36756 = 1.0/sqrt(t36721);
            double t36757 = 1.0/t36751;
            double t36758 = 1.0/pow(t36719,4.0/3.0);
            double t36761 = b2p*c*t36758*(1.0/3.0);
            double t36762 = 1.0/pow(t36719,5.0/3.0);
            double t36763 = b4p*t36705*t36762*(2.0/3.0);
            double t36764 = b1p*c*t36756*t36758*(1.0/6.0);
            double t36765 = b3p*c*t36741*t36758*(1.0/2.0);
            double t36759 = t36761+t36763+t36764+t36765;
            double t36760 = log(t36751);
            double t36766 = t36759*t36759;
            double t36767 = two_13*2.0;
            double t36768 = t36767-2.0;
            double t36769 = 1.0/t36768;
            double t36770 = 1.0/(t36748*t36748);
            double t36771 = pow(2.0,1.0/3.0);
            double t36772 = t36771*2.0;
            double t36773 = t36772-2.0;
            double t36774 = a1f*c*t36701;
            double t36775 = t36774+1.0;
            double t36776 = 1.0/c0f;
            double t36777 = b1f*t36703;
            double t36778 = b3f*t36704;
            double t36779 = b4f*t36705*t36706;
            double t36780 = b2f*c*t36701;
            double t36781 = t36780+t36777+t36778+t36779;
            double t36782 = 1.0/t36781;
            double t36783 = t36782*t36776*(1.0/2.0);
            double t36784 = t36783+1.0;
            double t36785 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36787 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36788 = 1.0/sqrt(t36702);
            double t36794 = b4f*t36705*t36787*(2.0/3.0);
            double t36795 = b2f*c*t36785*(1.0/3.0);
            double t36796 = b1f*c*t36785*t36788*(1.0/6.0);
            double t36797 = b3f*c*t36703*t36785*(1.0/2.0);
            double t36786 = t36794+t36795+t36796+t36797;
            double t36799 = b4p*t36705*t36787*(2.0/3.0);
            double t36800 = b2p*c*t36785*(1.0/3.0);
            double t36801 = b1p*c*t36785*t36788*(1.0/6.0);
            double t36802 = b3p*c*t36703*t36785*(1.0/2.0);
            double t36789 = t36800+t36801+t36802+t36799;
            double t36790 = 1.0/t36784;
            double t36791 = 1.0/pow(rho_a[index],7.0/3.0);
            double t36792 = 1.0/t36715;
            double t36793 = 1.0/pow(t36702,3.0/2.0);
            double t36798 = t36786*t36786;
            double t36803 = t36789*t36789;
            double t36804 = log(t36784);
            double t36805 = 1.0/(t36781*t36781);
            double t36806 = 1.0/(t36712*t36712);
            double t36807 = 1.0/(t36712*t36712*t36712);
            double t36808 = t36803*t36807*t36718*t36792*2.0;
            double t36809 = b4p*t36722*t36705*(1.0E1/9.0);
            double t36810 = b2p*c*t36791*(4.0/9.0);
            double t36811 = b3p*t36722*t36705*t36788*(1.0/1.2E1);
            double t36812 = b1p*c*t36791*t36788*(2.0/9.0);
            double t36813 = b3p*c*t36703*t36791*(2.0/3.0);
            double t36901 = b1p*t36722*t36705*t36793*(1.0/3.6E1);
            double t36814 = t36810+t36811-t36901+t36812+t36813+t36809;
            double t36815 = 1.0/(t36715*t36715);
            double t36816 = 1.0/(t36712*t36712*t36712*t36712);
            double t36817 = a1p*c*c0p*t36716*t36791*(8.0/9.0);
            double t36818 = c0f*t36804*t36775*2.0;
            double t36819 = c0p*t36716*t36718*2.0;
            double t36820 = gcaa*gcaa;
            double t36821 = gamma_aa[index]*gcaa*t36722;
            double t36822 = t36821+1.0;
            double t36823 = gamma_aa[index]*gcaa*t36722*2.0;
            double t36824 = t36820*t36723*t36728;
            double t36825 = t36823+t36824+1.0;
            double t36826 = ccab1*gamma_aa[index]*gcab*t36722*t36739;
            double t36827 = ccab2*t36740*t36723*t36724*t36728;
            double t36828 = ccab0+t36826+t36827;
            double t36829 = b2p*c*t36755*(4.0/9.0);
            double t36830 = b4p*t36705*t36754*(1.0E1/9.0);
            double t36831 = 1.0/pow(t36721,3.0/2.0);
            double t36832 = b3p*t36705*t36754*t36756*(1.0/1.2E1);
            double t36833 = b1p*c*t36755*t36756*(2.0/9.0);
            double t36834 = b3p*c*t36741*t36755*(2.0/3.0);
            double t36835 = t36830+t36832+t36833+t36834+t36829-b1p*t36705*t36831*t36754*(1.0/3.6E1);
            double t36836 = t36770*t36753*t36835*t36757;
            double t36837 = 1.0/(t36748*t36748*t36748);
            double t36838 = 1.0/(t36751*t36751);
            double t36839 = 1.0/(t36748*t36748*t36748*t36748);
            double t36840 = t36707*t36753*t36766*t36838*t36839*(1.0/2.0);
            double t36841 = 1.0/d2fz0;
            double t36842 = 1.0/(rho_a[index]*rho_a[index]);
            double t36843 = 1.0/Aa;
            double t36844 = b1a*t36741;
            double t36845 = b3a*t36743;
            double t36846 = b2a*c*t36720;
            double t36847 = b4a*t36705*t36746;
            double t36848 = t36844+t36845+t36846+t36847;
            double t36849 = 1.0/t36848;
            double t36850 = t36843*t36849*(1.0/2.0);
            double t36851 = t36850+1.0;
            double t36852 = log(t36851);
            double t36853 = a1a*c*t36720;
            double t36854 = t36853+1.0;
            double t36855 = Aa*t36841*t36842*t36852*t36854*t36769*(4.0/9.0);
            double t36856 = a1p*c*t36770*t36757*t36758*t36759*(2.0/3.0);
            double t36857 = a1p*c*c0p*t36760*t36758*(4.0/3.0);
            double t36858 = t36818-t36819;
            double t36859 = t36773*t36858*t36769;
            double t36860 = t36819+t36859;
            double t36861 = 1.0/pow(rho_a[index],1.0E1);
            double t36862 = 1.0/(t36726*t36726*t36726);
            double t36863 = ccab1*gamma_aa[index]*gcab*t36723*t36724*t36861*t36862*(3.2E1/9.0);
            double t36864 = 1.0/(t36726*t36726);
            double t36865 = t36729*t36729;
            double t36866 = 1.0/(t36732*t36732*t36732);
            double t36867 = ccab2*t36723*t36724*t36728*t36865*t36866*2.0;
            double t36868 = t36805*t36790*t36775*t36786;
            double t36869 = a1p*c*c0p*t36716*t36785*(2.0/3.0);
            double t36871 = t36806*t36718*t36792*t36789;
            double t36874 = a1f*c*c0f*t36804*t36785*(2.0/3.0);
            double t36870 = -t36871-t36874+t36868+t36869;
            double t36872 = 1.0/t36822;
            double t36873 = 1.0/t36825;
            double t36875 = t36870*t36773*t36769;
            double t36876 = t36871+t36875-t36869;
            double t36877 = gx*gx;
            double t36878 = gamma_aa[index]*gx*t36722;
            double t36879 = t36878+1.0;
            double t36884 = gamma_aa[index]*gx*t36734*(1.6E1/3.0);
            double t36885 = t36723*t36733*t36877*(1.6E1/3.0);
            double t36880 = t36884+t36885;
            double t36881 = gamma_aa[index]*gx*t36722*2.0;
            double t36882 = t36723*t36728*t36877;
            double t36883 = t36881+t36882+1.0;
            double t36886 = 1.0/(t36883*t36883);
            double t36887 = 1.0/t36879;
            double t36888 = 1.0/t36883;
            double t36889 = 1.0/(t36879*t36879);
            double t36890 = ccaa1*gamma_aa[index]*gcaa*t36722*t36872;
            double t36891 = ccaa2*t36820*t36723*t36728*t36873;
            double t36892 = ccaa0+t36890+t36891;
            double t36893 = 1.0/(t36781*t36781*t36781);
            double t36894 = b4f*t36722*t36705*(1.0E1/9.0);
            double t36895 = b2f*c*t36791*(4.0/9.0);
            double t36896 = b3f*t36722*t36705*t36788*(1.0/1.2E1);
            double t36897 = b1f*c*t36791*t36788*(2.0/9.0);
            double t36898 = b3f*c*t36703*t36791*(2.0/3.0);
            double t36899 = t36894+t36895+t36896+t36897+t36898-b1f*t36722*t36705*t36793*(1.0/3.6E1);
            double t36900 = t36805*t36790*t36775*t36899;
            double t36902 = t36814*t36806*t36718*t36792;
            double t36903 = 1.0/(t36784*t36784);
            double t36904 = 1.0/(t36781*t36781*t36781*t36781);
            double t36905 = t36903*t36904*t36775*t36776*t36798*(1.0/2.0);
            double t36906 = t36803*t36707*t36815*t36816*t36718*(1.0/2.0);
            double t36907 = a1f*c*t36805*t36790*t36785*t36786*(2.0/3.0);
            double t36908 = a1p*c*t36806*t36792*t36785*t36789*(2.0/3.0);
            double t36909 = 1.0/(t36822*t36822);
            double t36910 = gamma_aa[index]*gcaa*t36734*(1.6E1/3.0);
            double t36911 = t36820*t36723*t36733*(1.6E1/3.0);
            double t36912 = t36910+t36911;
            double t36913 = 1.0/(t36825*t36825);
            double t36914 = ccaa1*gamma_aa[index]*gcaa*t36734*t36872*(8.0/3.0);
            double t36915 = ccaa2*t36820*t36723*t36733*t36873*(1.6E1/3.0);
            double t36916 = t36914+t36915-ccaa1*t36820*t36723*t36733*t36909*(8.0/3.0)-ccaa2*t36820*t36723*t36912* \
               t36913*t36728;
            v_rho_a_rho_a_[index] = t36860*t36916*2.0-t36892*t36876*2.0+(rho_a[index]*t36860*2.0-c0p*rho_a[index]* \
               t36760*t36753*4.0)*(t36863+t36867+ccab2*t36740*t36723*t36724*t36727*(3.2E1/9.0)-ccab1*t36723*t36724* \
               t36727*t36864*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t36723*t36723)*(t36724*t36724)*t36738* \
               (3.2E1/9.0)-ccab2*t36723*t36724*t36733*t36729*t36738*(1.6E1/3.0))+t36828*(t36857-rho_a[index]*(t36902+ \
               t36906-t36808-t36817+t36908+t36773*t36769*(t36900+t36905+t36808+t36817+t36907-t36814*t36806*t36718* \
               t36792-t36790*t36775*t36893*t36798*2.0-a1f*c*c0f*t36804*t36791*(8.0/9.0)-t36803*t36707*t36815*t36816* \
               t36718*(1.0/2.0)-a1p*c*t36806*t36792*t36785*t36789*(2.0/3.0)))+rho_a[index]*(t36840+t36836+t36855+ \
               t36856-t36753*t36837*t36757*t36766*2.0-a1p*c*c0p*t36760*t36755*(8.0/9.0))*2.0+t36870*t36773*t36769* \
               2.0-t36770*t36753*t36757*t36759*2.0+t36806*t36718*t36792*t36789*2.0-a1p*c*c0p*t36716*t36785*(4.0/3.0) \
               )-(ccab1*gamma_aa[index]*gcab*t36734*t36739*(4.0/3.0)+ccab2*t36740*t36723*t36724*t36733*(8.0/3.0)- \
               ccab1*t36723*t36724*t36733*t36864*(4.0/3.0)-ccab2*t36723*t36724*t36728*t36729*t36738)*(t36819+t36859+ \
               rho_a[index]*t36876-rho_a[index]*(t36770*t36753*t36757*t36759-a1p*c*c0p*t36760*t36758*(2.0/3.0))*2.0- \
               c0p*t36760*t36753*2.0)*4.0+(rho_a[index]*(t36819+t36773*t36769*(t36818-c0p*t36716*t36718*2.0))*2.0- \
               c0p*rho_a[index]*t36760*t36753*4.0)*(t36863+t36867+ccab1*gamma_aa[index]*gcab*t36737*t36739*(4.4E1/ \
               9.0)+ccab2*t36740*t36723*t36724*t36727*(4.0E1/3.0)-ccab1*t36723*t36724*t36727*t36864*(7.6E1/9.0)-ccab2* \
               t36723*t36724*t36733*t36729*t36738*(1.6E1/3.0)-ccab2*t36723*t36724*t36728*t36738*(gamma_aa[index]* \
               gcab*t36737*(8.8E1/9.0)+t36723*t36724*t36727*(4.0E1/3.0)))+t36828*(t36857+rho_a[index]*(t36840+t36836- \
               t36855+t36856-t36753*t36837*t36757*t36766*2.0-a1p*c*c0p*t36760*t36755*(8.0/9.0))*2.0-t36770*t36753* \
               t36757*t36759*2.0)+c0*t36706*(cx0+cx1*gamma_aa[index]*gx*t36722*t36887+cx2*t36723*t36728*t36877*t36888) \
               *(4.0/9.0)-rho_a[index]*t36860*(ccaa1*gamma_aa[index]*gcaa*t36737*t36872*(8.8E1/9.0)-ccaa1*t36820* \
               t36723*t36727*t36909*2.4E1+ccaa2*t36820*t36723*t36727*t36873*(3.04E2/9.0)-ccaa2*t36820*t36723*t36912* \
               t36733*t36913*(3.2E1/3.0)-ccaa2*t36820*t36723*t36913*t36728*(gamma_aa[index]*gcaa*t36737*(1.76E2/9.0) \
               +t36820*t36723*t36727*(3.04E2/9.0))+ccaa2*t36820*t36723*(t36912*t36912)*1.0/(t36825*t36825*t36825) \
               *t36728*2.0+ccaa1*gamma_aa[index]*gcaa*t36820*t36723*1.0/(t36822*t36822*t36822)*t36861*(1.28E2/9.0) \
               )+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t36737*t36887*(8.8E1/9.0)-cx1*t36723*t36727* \
               t36877*t36889*2.4E1+cx2*t36723*t36727*t36877*t36888*(3.04E2/9.0)-cx2*t36723*t36733*t36880*t36877*t36886* \
               (3.2E1/3.0)-cx2*t36723*t36728*t36877*t36886*(gamma_aa[index]*gx*t36737*(1.76E2/9.0)+t36723*t36727* \
               t36877*(3.04E2/9.0))+cx2*t36723*(t36880*t36880)*t36728*1.0/(t36883*t36883*t36883)*t36877*2.0+cx1*gamma_aa[index]* \
               gx*t36723*t36861*t36877*1.0/(t36879*t36879*t36879)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t36734*t36887*(8.0/3.0)-cx1*t36723*t36733*t36877*t36889*(8.0/3.0)+cx2*t36723*t36733* \
               t36877*t36888*(1.6E1/3.0)-cx2*t36723*t36880*t36728*t36877*t36886)*(8.0/3.0)+rho_a[index]*t36892*(t36902+ \
               t36906-t36808-t36817+t36908+t36773*t36769*(t36900-t36902+t36905-t36906+t36808+t36817+t36907-t36908- \
               t36790*t36775*t36893*t36798*2.0-a1f*c*c0f*t36804*t36791*(8.0/9.0)))+rho_a[index]*t36916*t36876*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t36918 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36919 = gcab*gcab;
                double t36920 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36921 = gamma_aa[index]*gcab*t36918;
                double t36922 = t36921+1.0;
                double t36923 = gamma_aa[index]*gamma_aa[index];
                double t36924 = gamma_aa[index]*gcab*t36918*2.0;
                double t36925 = t36920*t36923*t36919;
                double t36926 = t36924+t36925+1.0;
                double t36927 = rho_a[index]*2.0;
                double t36928 = 1.0/pow(t36927,1.0/3.0);
                double t36929 = c*t36928;
                double t36930 = sqrt(t36929);
                double t36931 = b1p*t36930;
                double t36932 = pow(t36929,3.0/2.0);
                double t36933 = b3p*t36932;
                double t36934 = b2p*c*t36928;
                double t36935 = c*c;
                double t36936 = 1.0/pow(t36927,2.0/3.0);
                double t36937 = b4p*t36935*t36936;
                double t36938 = t36931+t36933+t36934+t36937;
                double t36939 = 1.0/pow(t36927,4.0/3.0);
                double t36940 = 1.0/c0p;
                double t36941 = 1.0/t36938;
                double t36942 = t36940*t36941*(1.0/2.0);
                double t36943 = t36942+1.0;
                double t36944 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36945 = c*t36944;
                double t36946 = sqrt(t36945);
                double t36947 = b1f*t36946;
                double t36948 = pow(t36945,3.0/2.0);
                double t36949 = b3f*t36948;
                double t36950 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36951 = b4f*t36950*t36935;
                double t36952 = b2f*c*t36944;
                double t36953 = t36951+t36952+t36947+t36949;
                double t36954 = 1.0/pow(rho_a[index],4.0/3.0);
                double t36955 = b1p*t36946;
                double t36956 = b3p*t36948;
                double t36957 = b4p*t36950*t36935;
                double t36958 = b2p*c*t36944;
                double t36959 = t36955+t36956+t36957+t36958;
                double t36960 = 1.0/pow(rho_a[index],5.0/3.0);
                double t36961 = 1.0/sqrt(t36945);
                double t36962 = 1.0/c0f;
                double t36963 = 1.0/t36953;
                double t36964 = t36962*t36963*(1.0/2.0);
                double t36965 = t36964+1.0;
                double t36966 = 1.0/t36959;
                double t36967 = t36940*t36966*(1.0/2.0);
                double t36968 = t36967+1.0;
                double t36969 = a1p*c*t36944;
                double t36970 = t36969+1.0;
                double t36971 = 1.0/t36968;
                double t36972 = 1.0/(t36959*t36959);
                double t36973 = b4p*t36960*t36935*(2.0/3.0);
                double t36974 = b2p*c*t36954*(1.0/3.0);
                double t36975 = b1p*c*t36961*t36954*(1.0/6.0);
                double t36976 = b3p*c*t36954*t36946*(1.0/2.0);
                double t36977 = t36973+t36974+t36975+t36976;
                double t36978 = t36970*t36971*t36972*t36977;
                double t36979 = log(t36968);
                double t36980 = log(t36943);
                double t36981 = a1p*c*t36928;
                double t36982 = t36981+1.0;
                double t36983 = pow(2.0,1.0/3.0);
                double t36984 = t36983*2.0;
                double t36985 = t36984-2.0;
                double t36986 = two_13*2.0;
                double t36987 = t36986-2.0;
                double t36988 = 1.0/t36987;
                double t36989 = log(t36965);
                double t36990 = a1f*c*t36944;
                double t36991 = t36990+1.0;
                double t36992 = c0f*t36991*t36989*2.0;
                double t36994 = c0p*t36970*t36979*2.0;
                double t36993 = t36992-t36994;
                double t36995 = gcaa*gcaa;
                double t36996 = gamma_aa[index]*gcaa*t36918;
                double t36997 = t36996+1.0;
                double t36998 = gamma_aa[index]*gcaa*t36918*2.0;
                double t36999 = t36920*t36923*t36995;
                double t37000 = t36998+t36999+1.0;
                double t37001 = t36993*t36985*t36988;
                double t37002 = t36994+t37001;
                double t37003 = 1.0/t36926;
                double t37004 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t37005 = 1.0/(t36922*t36922);
                double t37006 = 1.0/(t36926*t36926);
                double t37007 = gcab*t36918;
                double t37008 = gamma_aa[index]*t36920*t36919;
                double t37009 = t37007+t37008;
                double t37010 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t37011 = gamma_aa[index]*gcab*t37010*(8.0/3.0);
                double t37012 = t36923*t36919*t37004*(8.0/3.0);
                double t37013 = t37011+t37012;
                double t37014 = rho_a[index]*t37002*2.0;
                double t37015 = t37014-c0p*rho_a[index]*t36980*t36982*4.0;
                double t37016 = 1.0/t36922;
                double t37017 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t37018 = 1.0/(t36922*t36922*t36922);
                double t37019 = ccab2*gamma_aa[index]*t36920*t36919*t37013*t37006;
                double t37020 = ccab2*t36923*t36919*t37004*t37006*t37009*(8.0/3.0);
                double t37021 = 1.0/(t36926*t36926*t36926);
                double t37022 = 1.0/t36997;
                double t37023 = 1.0/t37000;
                double t37024 = 1.0/(t36997*t36997);
                double t37025 = 1.0/(t37000*t37000);
                double t37026 = gcaa*t36918*2.0;
                double t37027 = gamma_aa[index]*t36920*t36995*2.0;
                double t37028 = t37026+t37027;
                double t37029 = gamma_aa[index]*gcaa*t37010*(1.6E1/3.0);
                double t37030 = t36923*t36995*t37004*(1.6E1/3.0);
                double t37031 = t37030+t37029;
                double t37032 = gx*gx;
                double t37033 = gamma_aa[index]*gx*t36918;
                double t37034 = t37033+1.0;
                double t37035 = gamma_aa[index]*gx*t36918*2.0;
                double t37036 = t36920*t36923*t37032;
                double t37037 = t37035+t37036+1.0;
                double t37038 = 1.0/t36965;
                double t37039 = 1.0/(t36953*t36953);
                double t37040 = b4f*t36960*t36935*(2.0/3.0);
                double t37041 = b2f*c*t36954*(1.0/3.0);
                double t37042 = b1f*c*t36961*t36954*(1.0/6.0);
                double t37043 = b3f*c*t36954*t36946*(1.0/2.0);
                double t37044 = t37040+t37041+t37042+t37043;
                double t37045 = a1f*c*c0f*t36954*t36989*(2.0/3.0);
                double t37046 = a1p*c*c0p*t36954*t36979*(2.0/3.0);
                double t37047 = ccaa1*gcaa*t36918*t37022;
                double t37048 = ccaa2*gamma_aa[index]*t36920*t36995*t37023*2.0;
                double t37049 = t37047+t37048-ccaa1*gamma_aa[index]*t36920*t36995*t37024-ccaa2*t36920*t36923*t36995* \
                   t37025*t37028;
                double t37050 = 1.0/t37034;
                double t37051 = 1.0/t37037;
                double t37052 = 1.0/(t37034*t37034);
                double t37053 = 1.0/(t37037*t37037);
                double t37054 = gx*t36918*2.0;
                double t37055 = gamma_aa[index]*t36920*t37032*2.0;
                double t37056 = t37054+t37055;
                double t37057 = gamma_aa[index]*gx*t37010*(1.6E1/3.0);
                double t37058 = t36923*t37004*t37032*(1.6E1/3.0);
                double t37059 = t37057+t37058;
                v_rho_a_gamma_aa_[index] = -t37002*t37049+t37015*(t37020+t37019-ccab2*gamma_aa[index]*t36919*t37003* \
                   t37004*(4.0/3.0)+ccab1*gamma_aa[index]*t36919*t37004*t37005*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t36923*(t36919*t36919)*t37006*(4.0/3.0)-ccab1*gcab*t36923*t36919*t37017*t37018*(4.0/3.0)-ccab2* \
                   t36920*t36923*t36919*t37021*t37013*t37009*2.0)+t37015*(t37020+t37019-ccab1*gcab*t37010*t37016*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t36919*t37003*t37004*4.0+ccab1*gamma_aa[index]*t36919*t37004*t37005*(8.0/ \
                   3.0)+ccab2*t36920*t36923*t36919*t37006*(gcab*t37010*(8.0/3.0)+gamma_aa[index]*t36919*t37004*4.0)-ccab1* \
                   gcab*t36923*t36919*t37017*t37018*(4.0/3.0)-ccab2*t36920*t36923*t36919*t37021*t37013*t37009*2.0)-(ccab1* \
                   gcab*t36918*t37016*(1.0/2.0)+ccab2*gamma_aa[index]*t36920*t36919*t37003-ccab1*gamma_aa[index]*t36920* \
                   t36919*t37005*(1.0/2.0)-ccab2*t36920*t36923*t36919*t37006*t37009)*(rho_a[index]*((t36982*1.0/(t36938* \
                   t36938)*(b4p*t36935*1.0/pow(t36927,5.0/3.0)*(2.0/3.0)+b2p*c*t36939*(1.0/3.0)+b3p*c*t36930*t36939*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t36929)*t36939*(1.0/6.0)))/t36943-a1p*c*c0p*t36980*t36939*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t36978+t37046+t36985*t36988*(t36978+t37045-t36991*t37044*t37038*t37039-a1p*c*c0p*t36954*t36979*(2.0/ \
                   3.0)))+c0p*t36980*t36982*2.0-c0p*t36970*t36979*2.0-t36993*t36985*t36988)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t36918*t37050-cx1*gamma_aa[index]*t36920*t37032*t37052+cx2*gamma_aa[index]*t36920*t37032* \
                   t37051*2.0-cx2*t36920*t36923*t37032*t37053*t37056)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t37010*t37050*(8.0/3.0)-cx1*gamma_aa[index]*t37004*t37032*t37052*8.0+cx2*gamma_aa[index]*t37004*t37032* \
                   t37051*(3.2E1/3.0)-cx2*t36923*t37004*t37032*t37053*t37056*(1.6E1/3.0)+cx1*gx*t36923*t37032*1.0/(t37034* \
                   t37034*t37034)*t37017*(1.6E1/3.0)-cx2*t36920*t36923*t37032*t37053*(gx*t37010*(1.6E1/3.0)+gamma_aa[index]* \
                   t37004*t37032*(3.2E1/3.0))-cx2*gamma_aa[index]*t36920*t37032*t37053*t37059*2.0+cx2*t36920*t36923*t37032* \
                   1.0/(t37037*t37037*t37037)*t37056*t37059*2.0)+rho_a[index]*t37049*(-t36978+t37046+t36985*t36988*(t36978+ \
                   t37045-t37046-t36991*t37044*t37038*t37039))+rho_a[index]*t37002*(ccaa1*gcaa*t37010*t37022*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t36995*t37004*t37024*8.0+ccaa2*gamma_aa[index]*t36995*t37004*t37023*(3.2E1/ \
                   3.0)-ccaa2*t36923*t36995*t37004*t37025*t37028*(1.6E1/3.0)+ccaa1*gcaa*t36923*t36995*1.0/(t36997*t36997* \
                   t36997)*t37017*(1.6E1/3.0)-ccaa2*t36920*t36923*t36995*t37025*(gcaa*t37010*(1.6E1/3.0)+gamma_aa[index]* \
                   t36995*t37004*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t36920*t36995*t37031*t37025*2.0+ccaa2*t36920*t36923* \
                   t36995*1.0/(t37000*t37000*t37000)*t37031*t37028*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t37061 = 1.0/pow(rho_a[index],1.0/3.0);
                double t37062 = c*t37061;
                double t37063 = sqrt(t37062);
                double t37064 = pow(t37062,3.0/2.0);
                double t37065 = c*c;
                double t37066 = 1.0/pow(rho_a[index],2.0/3.0);
                double t37067 = 1.0/c0p;
                double t37068 = b1p*t37063;
                double t37069 = b3p*t37064;
                double t37070 = b4p*t37065*t37066;
                double t37071 = b2p*c*t37061;
                double t37072 = t37070+t37071+t37068+t37069;
                double t37073 = 1.0/t37072;
                double t37074 = t37073*t37067*(1.0/2.0);
                double t37075 = t37074+1.0;
                double t37076 = log(t37075);
                double t37077 = a1p*c*t37061;
                double t37078 = t37077+1.0;
                double t37079 = rho_a[index]*2.0;
                double t37080 = 1.0/pow(t37079,1.0/3.0);
                double t37081 = c*t37080;
                double t37082 = gcab*gcab;
                double t37083 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t37084 = 1.0/pow(rho_a[index],8.0/3.0);
                double t37085 = gamma_aa[index]*gcab*t37084;
                double t37086 = t37085+1.0;
                double t37087 = gamma_aa[index]*gamma_aa[index];
                double t37088 = gamma_aa[index]*gcab*t37084*2.0;
                double t37089 = t37082*t37083*t37087;
                double t37090 = t37088+t37089+1.0;
                double t37092 = gcab*t37084;
                double t37093 = gamma_aa[index]*t37082*t37083;
                double t37091 = t37092+t37093;
                double t37094 = 1.0/(t37090*t37090);
                double t37095 = pow(2.0,1.0/3.0);
                double t37096 = t37095*2.0;
                double t37097 = t37096-2.0;
                double t37098 = two_13*2.0;
                double t37099 = t37098-2.0;
                double t37100 = 1.0/t37099;
                double t37101 = 1.0/c0f;
                double t37102 = b1f*t37063;
                double t37103 = b3f*t37064;
                double t37104 = b4f*t37065*t37066;
                double t37105 = b2f*c*t37061;
                double t37106 = t37102+t37103+t37104+t37105;
                double t37107 = 1.0/t37106;
                double t37108 = t37101*t37107*(1.0/2.0);
                double t37109 = t37108+1.0;
                double t37110 = log(t37109);
                double t37111 = a1f*c*t37061;
                double t37112 = t37111+1.0;
                double t37113 = c0f*t37110*t37112*2.0;
                double t37114 = c0p*t37076*t37078*2.0;
                double t37115 = gcaa*gcaa;
                double t37116 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t37117 = gamma_aa[index]*gcaa*t37084;
                double t37118 = t37117+1.0;
                double t37119 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t37120 = gamma_aa[index]*gcaa*t37084*2.0;
                double t37121 = t37115*t37083*t37087;
                double t37122 = t37120+t37121+1.0;
                double t37124 = gcaa*t37084*2.0;
                double t37125 = gamma_aa[index]*t37115*t37083*2.0;
                double t37123 = t37124+t37125;
                double t37126 = 1.0/(t37122*t37122);
                double t37127 = gx*gx;
                double t37128 = gamma_aa[index]*gx*t37084;
                double t37129 = t37128+1.0;
                double t37130 = gamma_aa[index]*gx*t37084*2.0;
                double t37131 = t37127*t37083*t37087;
                double t37132 = t37130+t37131+1.0;
                double t37134 = gx*t37084*2.0;
                double t37135 = gamma_aa[index]*t37127*t37083*2.0;
                double t37133 = t37134+t37135;
                double t37136 = 1.0/(t37132*t37132);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t37114+t37100*t37097*(t37113-c0p*t37076*t37078*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t37067*(1.0/2.0))/(b1p*sqrt(t37081)+b3p*pow(t37081,3.0/2.0)+b4p*t37065* \
                   1.0/pow(t37079,2.0/3.0)+b2p*c*t37080)+1.0)*(a1p*c*t37080+1.0)*4.0)*((ccab2*t37082*t37083*(1.0/2.0) \
                   )/t37090-ccab1*t37082*t37083*1.0/(t37086*t37086)*(1.0/2.0)-ccab2*(t37082*t37082)*t37119*t37094*t37087* \
                   (1.0/2.0)+ccab1*gamma_aa[index]*gcab*t37116*t37082*1.0/(t37086*t37086*t37086)*(1.0/2.0)+ccab2*1.0/ \
                   (t37090*t37090*t37090)*t37082*(t37091*t37091)*t37083*t37087*2.0-ccab2*gamma_aa[index]*t37082*t37091* \
                   t37083*t37094*2.0)*4.0-rho_a[index]*(t37114+t37100*t37097*(t37113-t37114))*((ccaa2*t37115*t37083*2.0) \
                   /t37122-ccaa1*t37115*1.0/(t37118*t37118)*t37083*2.0-ccaa2*(t37115*t37115)*t37126*t37119*t37087*2.0+ \
                   ccaa1*gamma_aa[index]*gcaa*t37115*t37116*1.0/(t37118*t37118*t37118)*2.0+ccaa2*1.0/(t37122*t37122*t37122) \
                   *(t37123*t37123)*t37115*t37083*t37087*2.0-ccaa2*gamma_aa[index]*t37123*t37115*t37126*t37083*4.0)*2.0- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*t37127*t37083*1.0/(t37129*t37129)*2.0-(cx2*t37127*t37083*2.0)/t37132+ \
                   cx2*(t37127*t37127)*t37136*t37119*t37087*2.0-cx1*gamma_aa[index]*gx*t37116*t37127*1.0/(t37129*t37129* \
                   t37129)*2.0-cx2*1.0/(t37132*t37132*t37132)*(t37133*t37133)*t37127*t37083*t37087*2.0+cx2*gamma_aa[index]* \
                   t37133*t37127*t37136*t37083*4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void B97_1_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t32914 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32915 = gamma_aa[index]*t32914*(1.0/2.0);
            double t32916 = 1.0/pow(rho_b[index],8.0/3.0);
            double t32917 = gamma_bb[index]*t32916*(1.0/2.0);
            double t32912 = t32915+t32917;
            double t32913 = gcab*gcab;
            double t32918 = t32912*t32912;
            double t32919 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32920 = c*t32919;
            double t32921 = sqrt(t32920);
            double t32922 = pow(t32920,3.0/2.0);
            double t32923 = c*c;
            double t32924 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32925 = 1.0/c0p;
            double t32926 = b1p*t32921;
            double t32927 = b3p*t32922;
            double t32928 = b4p*t32923*t32924;
            double t32929 = b2p*c*t32919;
            double t32930 = t32926+t32927+t32928+t32929;
            double t32931 = 1.0/t32930;
            double t32932 = t32931*t32925*(1.0/2.0);
            double t32933 = t32932+1.0;
            double t32934 = log(t32933);
            double t32935 = a1p*c*t32919;
            double t32936 = t32935+1.0;
            double t32937 = pow(2.0,1.0/3.0);
            double t32938 = t32937*2.0;
            double t32939 = t32938-2.0;
            double t32940 = two_13*2.0;
            double t32941 = t32940-2.0;
            double t32942 = 1.0/t32941;
            double t32943 = 1.0/c0f;
            double t32944 = 1.0/pow(rho_b[index],1.0/3.0);
            double t32945 = c*t32944;
            double t32946 = sqrt(t32945);
            double t32947 = pow(t32945,3.0/2.0);
            double t32948 = 1.0/pow(rho_b[index],2.0/3.0);
            double t32949 = b1p*t32946;
            double t32950 = b3p*t32947;
            double t32951 = b4p*t32923*t32948;
            double t32952 = b2p*c*t32944;
            double t32953 = t32950+t32951+t32952+t32949;
            double t32954 = 1.0/t32953;
            double t32955 = t32925*t32954*(1.0/2.0);
            double t32956 = t32955+1.0;
            double t32957 = log(t32956);
            double t32958 = a1p*c*t32944;
            double t32959 = t32958+1.0;
            double t32960 = c0p*t32957*t32959*2.0;
            double t32961 = rho_a[index]+rho_b[index];
            double t32962 = 1.0/pow(t32961,1.0/3.0);
            double t32963 = c*t32962;
            double t32964 = sqrt(t32963);
            double t32965 = pow(t32963,3.0/2.0);
            double t32966 = 1.0/pow(t32961,2.0/3.0);
            double t32967 = b1p*t32964;
            double t32968 = b3p*t32965;
            double t32969 = b4p*t32923*t32966;
            double t32970 = b2p*c*t32962;
            double t32971 = t32970+t32967+t32968+t32969;
            double t32972 = 1.0/t32971;
            double t32973 = t32925*t32972*(1.0/2.0);
            double t32974 = t32973+1.0;
            double t32975 = log(t32974);
            double t32976 = a1p*c*t32962;
            double t32977 = t32976+1.0;
            double t32978 = c0p*t32975*t32977*2.0;
            double t32979 = rho_a[index]-rho_b[index];
            double t32980 = t32979*t32979;
            double t32981 = 1.0/t32961;
            double t32982 = t32981*t32979;
            double t32983 = 1.0/(t32961*t32961*t32961*t32961);
            double t32984 = t32980*t32980;
            double t32985 = t32982+1.0;
            double t32986 = pow(t32985,4.0/3.0);
            double t32987 = -t32982+1.0;
            double t32988 = pow(t32987,4.0/3.0);
            double t32989 = t32986+t32988-2.0;
            double t32990 = c0p*t32934*t32936*2.0;
            double t32991 = gamma_aa[index]*gamma_aa[index];
            double t32992 = gx*gx;
            double t32993 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32994 = gamma_bb[index]*gamma_bb[index];
            double t32995 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t32996 = b1f*t32921;
            double t32997 = b3f*t32922;
            double t32998 = b4f*t32923*t32924;
            double t32999 = b2f*c*t32919;
            double t33000 = t32996+t32997+t32998+t32999;
            double t33001 = 1.0/t33000;
            double t33002 = t32943*t33001*(1.0/2.0);
            double t33003 = t33002+1.0;
            double t33004 = log(t33003);
            double t33005 = a1f*c*t32919;
            double t33006 = t33005+1.0;
            double t33007 = t32990-c0f*t33004*t33006*2.0;
            double t33008 = t32990-t32942*t32939*t33007;
            double t33009 = gcaa*gcaa;
            double t33010 = b1f*t32946;
            double t33011 = b3f*t32947;
            double t33012 = b4f*t32923*t32948;
            double t33013 = b2f*c*t32944;
            double t33014 = t33010+t33011+t33012+t33013;
            double t33015 = 1.0/t33014;
            double t33016 = t32943*t33015*(1.0/2.0);
            double t33017 = t33016+1.0;
            double t33018 = log(t33017);
            double t33019 = a1f*c*t32944;
            double t33020 = t33019+1.0;
            double t33021 = t32960-c0f*t33020*t33018*2.0;
            double t33022 = t32960-t32942*t32939*t33021;
            functional_[index] = (ccab0+(ccab1*gcab*t32912)/(gcab*t32912+1.0)+(ccab2*t32913*t32918)/(gcab*t32912* \
               2.0+t32913*t32918+1.0))*(rho_b[index]*t33022+rho_a[index]*t33008-t32961*(t32978-t32942*t32983*t32984* \
               t32989*(t32978-c0f*log((t32943*(1.0/2.0))/(b1f*t32964+b3f*t32965+b2f*c*t32962+b4f*t32923*t32966)+1.0) \
               *(a1f*c*t32962+1.0)*2.0)+(Aa*t32942*t32989*log((1.0/2.0)/(Aa*(b1a*t32964+b3a*t32965+b2a*c*t32962+b4a* \
               t32923*t32966))+1.0)*(t32983*t32984-1.0)*(a1a*c*t32962+1.0)*2.0)/d2fz0))-rho_a[index]*t33008*(ccaa0+ \
               (ccaa2*t32991*t32993*t33009)/(gamma_aa[index]*gcaa*t32914*2.0+t32991*t32993*t33009+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t32914)/(gamma_aa[index]*gcaa*t32914+1.0))-rho_b[index]*t33022*(ccaa0+(ccaa2*t32994*t32995*t33009) \
               /(gamma_bb[index]*gcaa*t32916*2.0+t32994*t32995*t33009+1.0)+(ccaa1*gamma_bb[index]*gcaa*t32916)/(gamma_bb[index]* \
               gcaa*t32916+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t32991*t32992*t32993)/(gamma_aa[index]*gx* \
               t32914*2.0+t32991*t32992*t32993+1.0)+(cx1*gamma_aa[index]*gx*t32914)/(gamma_aa[index]*gx*t32914+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t32992*t32994*t32995)/(gamma_bb[index]*gx*t32916*2.0+t32992* \
               t32994*t32995+1.0)+(cx1*gamma_bb[index]*gx*t32916)/(gamma_bb[index]*gx*t32916+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t36030 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36031 = gamma_aa[index]*gamma_aa[index];
            double t36032 = gx*gx;
            double t36033 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36034 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36035 = c*t36034;
            double t36036 = sqrt(t36035);
            double t36037 = pow(t36035,3.0/2.0);
            double t36038 = c*c;
            double t36039 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36040 = 1.0/c0p;
            double t36041 = b1p*t36036;
            double t36042 = b3p*t36037;
            double t36043 = b4p*t36038*t36039;
            double t36044 = b2p*c*t36034;
            double t36045 = t36041+t36042+t36043+t36044;
            double t36046 = 1.0/t36045;
            double t36047 = t36040*t36046*(1.0/2.0);
            double t36048 = t36047+1.0;
            double t36049 = log(t36048);
            double t36050 = a1p*c*t36034;
            double t36051 = t36050+1.0;
            double t36052 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36036+ \
               b3f*t36037+b2f*c*t36034+b4f*t36038*t36039))+1.0)*(a1f*c*t36034+1.0)*2.0-c0p*t36051*t36049*2.0))/(two_13* \
               2.0-2.0)+c0p*t36051*t36049*2.0)*(ccaa0+(ccaa2*t36031*t36033*t36052)/(gamma_aa[index]*gcaa*t36030*2.0+ \
               t36031*t36033*t36052+1.0)+(ccaa1*gamma_aa[index]*gcaa*t36030)/(gamma_aa[index]*gcaa*t36030+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t36031*t36032*t36033)/(gamma_aa[index]*gx*t36030*2.0+t36031*t36032* \
               t36033+1.0)+(cx1*gamma_aa[index]*gx*t36030)/(gamma_aa[index]*gx*t36030+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t35619 = 1.0/pow(rho_b[index],8.0/3.0);
            double t35620 = gamma_bb[index]*gamma_bb[index];
            double t35621 = gx*gx;
            double t35622 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t35623 = 1.0/pow(rho_b[index],1.0/3.0);
            double t35624 = c*t35623;
            double t35625 = sqrt(t35624);
            double t35626 = pow(t35624,3.0/2.0);
            double t35627 = c*c;
            double t35628 = 1.0/pow(rho_b[index],2.0/3.0);
            double t35629 = 1.0/c0p;
            double t35630 = b1p*t35625;
            double t35631 = b3p*t35626;
            double t35632 = b4p*t35627*t35628;
            double t35633 = b2p*c*t35623;
            double t35634 = t35630+t35631+t35632+t35633;
            double t35635 = 1.0/t35634;
            double t35636 = t35635*t35629*(1.0/2.0);
            double t35637 = t35636+1.0;
            double t35638 = log(t35637);
            double t35639 = a1p*c*t35623;
            double t35640 = t35639+1.0;
            double t35641 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t35625+ \
               b3f*t35626+b2f*c*t35623+b4f*t35627*t35628))+1.0)*(a1f*c*t35623+1.0)*2.0-c0p*t35640*t35638*2.0))/(two_13* \
               2.0-2.0)+c0p*t35640*t35638*2.0)*(ccaa0+(ccaa2*t35620*t35622*t35641)/(gamma_bb[index]*gcaa*t35619*2.0+ \
               t35620*t35622*t35641+1.0)+(ccaa1*gamma_bb[index]*gcaa*t35619)/(gamma_bb[index]*gcaa*t35619+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t35620*t35621*t35622)/(gamma_bb[index]*gx*t35619*2.0+t35620*t35621* \
               t35622+1.0)+(cx1*gamma_bb[index]*gx*t35619)/(gamma_bb[index]*gx*t35619+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33024 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33025 = c*t33024;
            double t33026 = sqrt(t33025);
            double t33027 = pow(t33025,3.0/2.0);
            double t33028 = c*c;
            double t33029 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33030 = 1.0/c0p;
            double t33031 = b1p*t33026;
            double t33032 = b3p*t33027;
            double t33033 = b4p*t33028*t33029;
            double t33034 = b2p*c*t33024;
            double t33035 = t33031+t33032+t33033+t33034;
            double t33036 = 1.0/t33035;
            double t33037 = t33030*t33036*(1.0/2.0);
            double t33038 = t33037+1.0;
            double t33039 = log(t33038);
            double t33040 = a1p*c*t33024;
            double t33041 = t33040+1.0;
            double t33042 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33043 = gamma_aa[index]*gamma_aa[index];
            double t33044 = gcaa*gcaa;
            double t33045 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t33048 = gamma_aa[index]*t33042*(1.0/2.0);
            double t33049 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33050 = gamma_bb[index]*t33049*(1.0/2.0);
            double t33046 = t33050+t33048;
            double t33047 = gcab*gcab;
            double t33051 = t33046*t33046;
            double t33052 = rho_a[index]+rho_b[index];
            double t33053 = 1.0/pow(t33052,1.0/3.0);
            double t33054 = c*t33053;
            double t33055 = sqrt(t33054);
            double t33056 = b1p*t33055;
            double t33057 = pow(t33054,3.0/2.0);
            double t33058 = b3p*t33057;
            double t33059 = 1.0/pow(t33052,2.0/3.0);
            double t33060 = b4p*t33028*t33059;
            double t33061 = b2p*c*t33053;
            double t33062 = t33060+t33061+t33056+t33058;
            double t33063 = 1.0/pow(t33052,4.0/3.0);
            double t33064 = two_13*2.0;
            double t33065 = t33064-2.0;
            double t33066 = 1.0/t33065;
            double t33067 = 1.0/c0f;
            double t33068 = 1.0/t33062;
            double t33069 = t33030*t33068*(1.0/2.0);
            double t33070 = t33069+1.0;
            double t33071 = a1p*c*t33053;
            double t33072 = t33071+1.0;
            double t33073 = rho_a[index]-rho_b[index];
            double t33074 = t33073*t33073;
            double t33075 = 1.0/t33052;
            double t33076 = t33073*t33075;
            double t33077 = b1f*t33055;
            double t33078 = b3f*t33057;
            double t33079 = b4f*t33028*t33059;
            double t33080 = b2f*c*t33053;
            double t33081 = t33080+t33077+t33078+t33079;
            double t33082 = 1.0/t33081;
            double t33083 = t33082*t33067*(1.0/2.0);
            double t33084 = t33083+1.0;
            double t33085 = log(t33084);
            double t33086 = a1f*c*t33053;
            double t33087 = t33086+1.0;
            double t33088 = log(t33070);
            double t33098 = c0f*t33085*t33087*2.0;
            double t33099 = c0p*t33072*t33088*2.0;
            double t33089 = t33098-t33099;
            double t33090 = t33076+1.0;
            double t33091 = pow(t33090,4.0/3.0);
            double t33092 = -t33076+1.0;
            double t33093 = pow(t33092,4.0/3.0);
            double t33094 = t33091+t33093-2.0;
            double t33095 = 1.0/(t33052*t33052);
            double t33126 = t33073*t33095;
            double t33096 = -t33126+t33075;
            double t33097 = 1.0/(t33052*t33052*t33052*t33052);
            double t33100 = t33074*t33074;
            double t33101 = 1.0/pow(t33052,5.0/3.0);
            double t33102 = 1.0/sqrt(t33054);
            double t33103 = 1.0/t33070;
            double t33104 = 1.0/(t33062*t33062);
            double t33105 = b4p*t33101*t33028*(2.0/3.0);
            double t33106 = b2p*c*t33063*(1.0/3.0);
            double t33107 = b1p*c*t33102*t33063*(1.0/6.0);
            double t33108 = b3p*c*t33063*t33055*(1.0/2.0);
            double t33109 = t33105+t33106+t33107+t33108;
            double t33110 = t33103*t33104*t33072*t33109;
            double t33111 = 1.0/(t33052*t33052*t33052*t33052*t33052);
            double t33112 = 1.0/d2fz0;
            double t33113 = 1.0/Aa;
            double t33114 = b1a*t33055;
            double t33115 = b3a*t33057;
            double t33116 = b4a*t33028*t33059;
            double t33117 = b2a*c*t33053;
            double t33118 = t33114+t33115+t33116+t33117;
            double t33119 = 1.0/t33118;
            double t33120 = t33113*t33119*(1.0/2.0);
            double t33121 = t33120+1.0;
            double t33122 = log(t33121);
            double t33123 = a1a*c*t33053;
            double t33124 = t33123+1.0;
            double t33125 = pow(t33090,1.0/3.0);
            double t33127 = t33125*t33096*(4.0/3.0);
            double t33128 = pow(t33092,1.0/3.0);
            double t33129 = t33127-t33128*t33096*(4.0/3.0);
            double t33130 = t33100*t33097;
            double t33131 = t33130-1.0;
            double t33132 = pow(2.0,1.0/3.0);
            double t33133 = t33132*2.0;
            double t33134 = t33133-2.0;
            double t33135 = a1f*c*t33024;
            double t33136 = t33135+1.0;
            double t33137 = b1f*t33026;
            double t33138 = b3f*t33027;
            double t33139 = b4f*t33028*t33029;
            double t33140 = b2f*c*t33024;
            double t33141 = t33140+t33137+t33138+t33139;
            double t33142 = 1.0/t33141;
            double t33143 = t33142*t33067*(1.0/2.0);
            double t33144 = t33143+1.0;
            double t33145 = 1.0/pow(rho_a[index],4.0/3.0);
            double t33146 = 1.0/pow(rho_a[index],5.0/3.0);
            double t33147 = 1.0/sqrt(t33025);
            double t33148 = log(t33144);
            double t33149 = 1.0/t33038;
            double t33150 = 1.0/(t33035*t33035);
            double t33151 = b4p*t33028*t33146*(2.0/3.0);
            double t33152 = b2p*c*t33145*(1.0/3.0);
            double t33153 = b1p*c*t33145*t33147*(1.0/6.0);
            double t33154 = b3p*c*t33026*t33145*(1.0/2.0);
            double t33155 = t33151+t33152+t33153+t33154;
            double t33156 = t33041*t33150*t33155*t33149;
            double t33157 = c0f*t33136*t33148*2.0;
            double t33158 = c0p*t33041*t33039*2.0;
            double t33159 = t33157-t33158;
            double t33160 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33161 = c*t33160;
            double t33162 = sqrt(t33161);
            double t33163 = pow(t33161,3.0/2.0);
            double t33164 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33165 = b1p*t33162;
            double t33166 = b3p*t33163;
            double t33167 = b4p*t33028*t33164;
            double t33168 = b2p*c*t33160;
            double t33169 = t33165+t33166+t33167+t33168;
            double t33170 = 1.0/t33169;
            double t33171 = t33030*t33170*(1.0/2.0);
            double t33172 = t33171+1.0;
            double t33173 = log(t33172);
            double t33174 = a1p*c*t33160;
            double t33175 = t33174+1.0;
            double t33176 = c0p*t33173*t33175*2.0;
            double t33177 = t33100*t33066*t33094*t33097*t33089;
            double t33178 = Aa*t33112*t33122*t33131*t33124*t33066*t33094*2.0;
            double t33179 = gcab*t33046;
            double t33180 = t33179+1.0;
            double t33181 = 1.0/t33180;
            double t33182 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t33183 = t33051*t33047;
            double t33184 = gcab*t33046*2.0;
            double t33185 = t33183+t33184+1.0;
            double t33186 = 1.0/t33185;
            double t33187 = gx*gx;
            double t33188 = gamma_aa[index]*gx*t33042;
            double t33189 = t33188+1.0;
            double t33190 = 1.0/t33189;
            double t33191 = gamma_aa[index]*gx*t33042*2.0;
            double t33192 = t33043*t33045*t33187;
            double t33193 = t33191+t33192+1.0;
            double t33194 = 1.0/t33193;
            double t33195 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t33196 = 1.0/t33144;
            double t33197 = 1.0/(t33141*t33141);
            double t33198 = b4f*t33028*t33146*(2.0/3.0);
            double t33199 = b2f*c*t33145*(1.0/3.0);
            double t33200 = b1f*c*t33145*t33147*(1.0/6.0);
            double t33201 = b3f*c*t33026*t33145*(1.0/2.0);
            double t33202 = t33200+t33201+t33198+t33199;
            double t33203 = a1f*c*c0f*t33145*t33148*(2.0/3.0);
            double t33204 = a1p*c*c0p*t33145*t33039*(2.0/3.0);
            double t33205 = gamma_aa[index]*gcaa*t33042;
            double t33206 = t33205+1.0;
            double t33207 = 1.0/t33206;
            double t33208 = ccaa1*gamma_aa[index]*gcaa*t33042*t33207;
            double t33209 = gamma_aa[index]*gcaa*t33042*2.0;
            double t33210 = t33043*t33044*t33045;
            double t33211 = t33210+t33209+1.0;
            double t33212 = 1.0/t33211;
            double t33213 = ccaa2*t33212*t33043*t33044*t33045;
            double t33214 = ccaa0+t33213+t33208;
            double t33215 = t33134*t33066*t33159;
            double t33216 = t33215+t33158;
            v_rho_a_[index] = -t33214*(t33158+t33134*t33066*(t33157-c0p*t33041*t33039*2.0))-(ccab0+ccab1*gcab* \
               t33046*t33181+ccab2*t33051*t33047*t33186)*(-t33158+t33177+t33178+t33099+t33052*(t33110-t33100*t33066* \
               t33094*t33097*(t33110-(1.0/(t33081*t33081)*t33087*(b2f*c*t33063*(1.0/3.0)+b4f*t33101*t33028*(2.0/3.0) \
               +b1f*c*t33102*t33063*(1.0/6.0)+b3f*c*t33063*t33055*(1.0/2.0)))/t33084+a1f*c*c0f*t33063*t33085*(2.0/ \
               3.0)-a1p*c*c0p*t33063*t33088*(2.0/3.0))-a1p*c*c0p*t33063*t33088*(2.0/3.0)-t33100*t33111*t33066*t33094* \
               t33089*4.0+t33100*t33066*t33129*t33097*t33089+t33073*t33074*t33066*t33094*t33097*t33089*4.0-Aa*t33112* \
               t33122*t33124*t33066*t33094*(t33100*t33111*4.0-t33073*t33074*t33097*4.0)*2.0+Aa*t33112*t33122*t33131* \
               t33124*t33066*t33129*2.0+(t33112*t33131*t33124*1.0/(t33118*t33118)*t33066*t33094*(b2a*c*t33063*(1.0/ \
               3.0)+b4a*t33101*t33028*(2.0/3.0)+b1a*c*t33102*t33063*(1.0/6.0)+b3a*c*t33063*t33055*(1.0/2.0)))/t33121- \
               Aa*a1a*c*t33112*t33122*t33131*t33063*t33066*t33094*(2.0/3.0))+rho_a[index]*(t33204-t33156+t33134*t33066* \
               (t33203+t33156-t33202*t33136*t33196*t33197-a1p*c*c0p*t33145*t33039*(2.0/3.0)))-t33134*t33066*t33159) \
               -(rho_a[index]*t33216+rho_b[index]*(t33176-t33134*t33066*(t33176-c0f*log((t33067*(1.0/2.0))/(b1f*t33162+ \
               b3f*t33163+b2f*c*t33160+b4f*t33028*t33164)+1.0)*(a1f*c*t33160+1.0)*2.0))-t33052*(t33177+t33178+t33099) \
               )*(ccab1*gamma_aa[index]*gcab*t33181*t33182*(4.0/3.0)-ccab2*t33051*t33047*1.0/(t33185*t33185)*(gamma_aa[index]* \
               gcab*t33182*(8.0/3.0)+gamma_aa[index]*t33046*t33047*t33182*(8.0/3.0))-ccab1*gamma_aa[index]*1.0/(t33180* \
               t33180)*t33046*t33047*t33182*(4.0/3.0)+ccab2*gamma_aa[index]*t33046*t33047*t33182*t33186*(8.0/3.0) \
               )+rho_a[index]*t33216*(ccaa1*gamma_aa[index]*gcaa*t33207*t33182*(8.0/3.0)+ccaa2*t33212*t33043*t33044* \
               t33195*(1.6E1/3.0)-ccaa1*t33043*t33044*1.0/(t33206*t33206)*t33195*(8.0/3.0)-ccaa2*1.0/(t33211*t33211) \
               *t33043*t33044*t33045*(gamma_aa[index]*gcaa*t33182*(1.6E1/3.0)+t33043*t33044*t33195*(1.6E1/3.0)))+ \
               c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t33042*t33190+cx2*t33043*t33045*t33194*t33187) \
               *(4.0/3.0)+rho_a[index]*t33214*(t33204-t33156+t33134*t33066*(t33203-t33204+t33156-t33202*t33136*t33196* \
               t33197))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t33190*t33182*(8.0/3.0)+cx2*t33043*t33194* \
               t33195*t33187*(1.6E1/3.0)-cx1*t33043*t33195*t33187*1.0/(t33189*t33189)*(8.0/3.0)-cx2*t33043*t33045* \
               1.0/(t33193*t33193)*t33187*(gamma_aa[index]*gx*t33182*(1.6E1/3.0)+t33043*t33195*t33187*(1.6E1/3.0) \
               ));
        } else if (rho_a[index] > cutoff_) {
            double t36054 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36055 = c*t36054;
            double t36056 = sqrt(t36055);
            double t36057 = pow(t36055,3.0/2.0);
            double t36058 = c*c;
            double t36059 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36060 = 1.0/c0p;
            double t36061 = b1p*t36056;
            double t36062 = b3p*t36057;
            double t36063 = b4p*t36058*t36059;
            double t36064 = b2p*c*t36054;
            double t36065 = t36061+t36062+t36063+t36064;
            double t36066 = 1.0/t36065;
            double t36067 = t36060*t36066*(1.0/2.0);
            double t36068 = t36067+1.0;
            double t36069 = log(t36068);
            double t36070 = a1p*c*t36054;
            double t36071 = t36070+1.0;
            double t36072 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36073 = gamma_aa[index]*gamma_aa[index];
            double t36074 = gcaa*gcaa;
            double t36075 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36076 = gx*gx;
            double t36077 = gamma_aa[index]*gx*t36072;
            double t36078 = t36077+1.0;
            double t36079 = 1.0/t36078;
            double t36080 = gamma_aa[index]*gx*t36072*2.0;
            double t36081 = t36073*t36075*t36076;
            double t36082 = t36080+t36081+1.0;
            double t36083 = 1.0/t36082;
            double t36084 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36085 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36086 = pow(2.0,1.0/3.0);
            double t36087 = t36086*2.0;
            double t36088 = t36087-2.0;
            double t36089 = two_13*2.0;
            double t36090 = t36089-2.0;
            double t36091 = 1.0/t36090;
            double t36092 = a1f*c*t36054;
            double t36093 = t36092+1.0;
            double t36094 = 1.0/c0f;
            double t36095 = b1f*t36056;
            double t36096 = b3f*t36057;
            double t36097 = b4f*t36058*t36059;
            double t36098 = b2f*c*t36054;
            double t36099 = t36095+t36096+t36097+t36098;
            double t36100 = 1.0/t36099;
            double t36101 = t36100*t36094*(1.0/2.0);
            double t36102 = t36101+1.0;
            double t36103 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36104 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36105 = 1.0/sqrt(t36055);
            double t36106 = log(t36102);
            double t36107 = 1.0/t36068;
            double t36108 = 1.0/(t36065*t36065);
            double t36109 = b4p*t36104*t36058*(2.0/3.0);
            double t36110 = b2p*c*t36103*(1.0/3.0);
            double t36111 = b1p*c*t36103*t36105*(1.0/6.0);
            double t36112 = b3p*c*t36103*t36056*(1.0/2.0);
            double t36113 = t36110+t36111+t36112+t36109;
            double t36114 = t36113*t36071*t36107*t36108;
            double t36115 = gamma_aa[index]*gcaa*t36072;
            double t36116 = t36115+1.0;
            double t36117 = 1.0/t36116;
            double t36118 = ccaa1*gamma_aa[index]*gcaa*t36072*t36117;
            double t36119 = gamma_aa[index]*gcaa*t36072*2.0;
            double t36120 = t36073*t36074*t36075;
            double t36121 = t36120+t36119+1.0;
            double t36122 = 1.0/t36121;
            double t36123 = ccaa2*t36122*t36073*t36074*t36075;
            double t36124 = ccaa0+t36123+t36118;
            double t36125 = c0f*t36106*t36093*2.0;
            double t36126 = c0p*t36071*t36069*2.0;
            v_rho_a_[index] = -t36124*(t36126+t36091*t36088*(t36125-c0p*t36071*t36069*2.0))+rho_a[index]*t36124* \
               (-t36114+t36091*t36088*(t36114-(t36093*1.0/(t36099*t36099)*(b2f*c*t36103*(1.0/3.0)+b4f*t36104*t36058* \
               (2.0/3.0)+b1f*c*t36103*t36105*(1.0/6.0)+b3f*c*t36103*t36056*(1.0/2.0)))/t36102+a1f*c*c0f*t36103*t36106* \
               (2.0/3.0)-a1p*c*c0p*t36103*t36069*(2.0/3.0))+a1p*c*c0p*t36103*t36069*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t36072*t36079+cx2*t36073*t36083*t36075*t36076)*(4.0/3.0)+rho_a[index]* \
               (t36126+t36091*t36088*(t36125-t36126))*(ccaa1*gamma_aa[index]*gcaa*t36117*t36085*(8.0/3.0)+ccaa2*t36122* \
               t36073*t36074*t36084*(1.6E1/3.0)-ccaa1*1.0/(t36116*t36116)*t36073*t36074*t36084*(8.0/3.0)-ccaa2*1.0/ \
               (t36121*t36121)*t36073*t36074*t36075*(gamma_aa[index]*gcaa*t36085*(1.6E1/3.0)+t36073*t36074*t36084* \
               (1.6E1/3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t36085*t36079*(8.0/3.0)+cx2*t36073* \
               t36083*t36084*t36076*(1.6E1/3.0)-cx1*t36073*t36084*t36076*1.0/(t36078*t36078)*(8.0/3.0)-cx2*t36073* \
               1.0/(t36082*t36082)*t36075*t36076*(gamma_aa[index]*gx*t36085*(1.6E1/3.0)+t36073*t36084*t36076*(1.6E1/ \
               3.0)));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33218 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33219 = c*t33218;
            double t33220 = sqrt(t33219);
            double t33221 = pow(t33219,3.0/2.0);
            double t33222 = c*c;
            double t33223 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33224 = 1.0/c0p;
            double t33225 = b1p*t33220;
            double t33226 = b3p*t33221;
            double t33227 = b4p*t33222*t33223;
            double t33228 = b2p*c*t33218;
            double t33229 = t33225+t33226+t33227+t33228;
            double t33230 = 1.0/t33229;
            double t33231 = t33230*t33224*(1.0/2.0);
            double t33232 = t33231+1.0;
            double t33233 = log(t33232);
            double t33234 = a1p*c*t33218;
            double t33235 = t33234+1.0;
            double t33236 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33237 = gamma_bb[index]*gamma_bb[index];
            double t33238 = gcaa*gcaa;
            double t33239 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t33242 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33243 = gamma_aa[index]*t33242*(1.0/2.0);
            double t33244 = gamma_bb[index]*t33236*(1.0/2.0);
            double t33240 = t33243+t33244;
            double t33241 = gcab*gcab;
            double t33245 = t33240*t33240;
            double t33246 = rho_a[index]+rho_b[index];
            double t33247 = 1.0/pow(t33246,1.0/3.0);
            double t33248 = c*t33247;
            double t33249 = sqrt(t33248);
            double t33250 = b1p*t33249;
            double t33251 = pow(t33248,3.0/2.0);
            double t33252 = b3p*t33251;
            double t33253 = 1.0/pow(t33246,2.0/3.0);
            double t33254 = b4p*t33222*t33253;
            double t33255 = b2p*c*t33247;
            double t33256 = t33250+t33252+t33254+t33255;
            double t33257 = 1.0/pow(t33246,4.0/3.0);
            double t33258 = two_13*2.0;
            double t33259 = t33258-2.0;
            double t33260 = 1.0/t33259;
            double t33261 = 1.0/c0f;
            double t33262 = 1.0/t33256;
            double t33263 = t33224*t33262*(1.0/2.0);
            double t33264 = t33263+1.0;
            double t33265 = a1p*c*t33247;
            double t33266 = t33265+1.0;
            double t33267 = rho_a[index]-rho_b[index];
            double t33268 = t33267*t33267;
            double t33269 = 1.0/t33246;
            double t33270 = t33267*t33269;
            double t33271 = b1f*t33249;
            double t33272 = b3f*t33251;
            double t33273 = b4f*t33222*t33253;
            double t33274 = b2f*c*t33247;
            double t33275 = t33271+t33272+t33273+t33274;
            double t33276 = 1.0/t33275;
            double t33277 = t33261*t33276*(1.0/2.0);
            double t33278 = t33277+1.0;
            double t33279 = log(t33278);
            double t33280 = a1f*c*t33247;
            double t33281 = t33280+1.0;
            double t33282 = log(t33264);
            double t33293 = c0f*t33281*t33279*2.0;
            double t33294 = c0p*t33282*t33266*2.0;
            double t33283 = t33293-t33294;
            double t33284 = t33270+1.0;
            double t33285 = pow(t33284,4.0/3.0);
            double t33286 = -t33270+1.0;
            double t33287 = pow(t33286,4.0/3.0);
            double t33288 = t33285+t33287-2.0;
            double t33289 = 1.0/(t33246*t33246);
            double t33290 = t33267*t33289;
            double t33291 = t33290+t33269;
            double t33292 = 1.0/(t33246*t33246*t33246*t33246);
            double t33295 = t33268*t33268;
            double t33296 = 1.0/pow(t33246,5.0/3.0);
            double t33297 = 1.0/sqrt(t33248);
            double t33298 = 1.0/t33264;
            double t33299 = 1.0/(t33256*t33256);
            double t33300 = b4p*t33222*t33296*(2.0/3.0);
            double t33301 = b2p*c*t33257*(1.0/3.0);
            double t33302 = b1p*c*t33257*t33297*(1.0/6.0);
            double t33303 = b3p*c*t33257*t33249*(1.0/2.0);
            double t33304 = t33300+t33301+t33302+t33303;
            double t33305 = 1.0/(t33246*t33246*t33246*t33246*t33246);
            double t33306 = 1.0/d2fz0;
            double t33307 = 1.0/Aa;
            double t33308 = b1a*t33249;
            double t33309 = b3a*t33251;
            double t33310 = b4a*t33222*t33253;
            double t33311 = b2a*c*t33247;
            double t33312 = t33310+t33311+t33308+t33309;
            double t33313 = 1.0/t33312;
            double t33314 = t33313*t33307*(1.0/2.0);
            double t33315 = t33314+1.0;
            double t33316 = log(t33315);
            double t33317 = a1a*c*t33247;
            double t33318 = t33317+1.0;
            double t33319 = pow(t33284,1.0/3.0);
            double t33320 = t33291*t33319*(4.0/3.0);
            double t33321 = pow(t33286,1.0/3.0);
            double t33322 = t33320-t33321*t33291*(4.0/3.0);
            double t33323 = t33292*t33295;
            double t33324 = t33323-1.0;
            double t33325 = pow(2.0,1.0/3.0);
            double t33326 = t33325*2.0;
            double t33327 = t33326-2.0;
            double t33328 = a1f*c*t33218;
            double t33329 = t33328+1.0;
            double t33330 = b1f*t33220;
            double t33331 = b3f*t33221;
            double t33332 = b4f*t33222*t33223;
            double t33333 = b2f*c*t33218;
            double t33334 = t33330+t33331+t33332+t33333;
            double t33335 = 1.0/t33334;
            double t33336 = t33261*t33335*(1.0/2.0);
            double t33337 = t33336+1.0;
            double t33338 = 1.0/pow(rho_b[index],4.0/3.0);
            double t33339 = 1.0/pow(rho_b[index],5.0/3.0);
            double t33340 = 1.0/sqrt(t33219);
            double t33341 = log(t33337);
            double t33342 = 1.0/t33232;
            double t33343 = 1.0/(t33229*t33229);
            double t33344 = b4p*t33222*t33339*(2.0/3.0);
            double t33345 = b2p*c*t33338*(1.0/3.0);
            double t33346 = b1p*c*t33340*t33338*(1.0/6.0);
            double t33347 = b3p*c*t33220*t33338*(1.0/2.0);
            double t33348 = t33344+t33345+t33346+t33347;
            double t33349 = t33342*t33235*t33343*t33348;
            double t33350 = c0f*t33341*t33329*2.0;
            double t33351 = c0p*t33233*t33235*2.0;
            double t33352 = a1p*c*c0p*t33282*t33257*(2.0/3.0);
            double t33353 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33354 = c*t33353;
            double t33355 = sqrt(t33354);
            double t33356 = pow(t33354,3.0/2.0);
            double t33357 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33358 = b1p*t33355;
            double t33359 = b3p*t33356;
            double t33360 = b4p*t33222*t33357;
            double t33361 = b2p*c*t33353;
            double t33362 = t33360+t33361+t33358+t33359;
            double t33363 = 1.0/t33362;
            double t33364 = t33224*t33363*(1.0/2.0);
            double t33365 = t33364+1.0;
            double t33366 = log(t33365);
            double t33367 = a1p*c*t33353;
            double t33368 = t33367+1.0;
            double t33369 = c0p*t33366*t33368*2.0;
            double t33370 = t33350-t33351;
            double t33371 = t33260*t33283*t33292*t33295*t33288;
            double t33372 = Aa*t33260*t33306*t33324*t33316*t33318*t33288*2.0;
            double t33373 = gcab*t33240;
            double t33374 = t33373+1.0;
            double t33375 = 1.0/t33374;
            double t33376 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t33377 = t33241*t33245;
            double t33378 = gcab*t33240*2.0;
            double t33379 = t33377+t33378+1.0;
            double t33380 = 1.0/t33379;
            double t33381 = gx*gx;
            double t33382 = gamma_bb[index]*gx*t33236;
            double t33383 = t33382+1.0;
            double t33384 = 1.0/t33383;
            double t33385 = gamma_bb[index]*gx*t33236*2.0;
            double t33386 = t33237*t33381*t33239;
            double t33387 = t33385+t33386+1.0;
            double t33388 = 1.0/t33387;
            double t33389 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t33390 = 1.0/t33337;
            double t33391 = 1.0/(t33334*t33334);
            double t33392 = b4f*t33222*t33339*(2.0/3.0);
            double t33393 = b2f*c*t33338*(1.0/3.0);
            double t33394 = b1f*c*t33340*t33338*(1.0/6.0);
            double t33395 = b3f*c*t33220*t33338*(1.0/2.0);
            double t33396 = t33392+t33393+t33394+t33395;
            double t33397 = a1f*c*c0f*t33341*t33338*(2.0/3.0);
            double t33398 = a1p*c*c0p*t33233*t33338*(2.0/3.0);
            double t33399 = gamma_bb[index]*gcaa*t33236;
            double t33400 = t33399+1.0;
            double t33401 = 1.0/t33400;
            double t33402 = ccaa1*gamma_bb[index]*gcaa*t33401*t33236;
            double t33403 = gamma_bb[index]*gcaa*t33236*2.0;
            double t33404 = t33237*t33238*t33239;
            double t33405 = t33403+t33404+1.0;
            double t33406 = 1.0/t33405;
            double t33407 = ccaa2*t33406*t33237*t33238*t33239;
            double t33408 = ccaa0+t33402+t33407;
            double t33409 = t33260*t33370*t33327;
            double t33410 = t33351+t33409;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t33240*t33375+ccab2*t33241*t33245*t33380)*(-t33351+t33371+t33372+ \
               t33294+rho_b[index]*(-t33349+t33398+t33260*t33327*(t33349+t33397-t33390*t33391*t33329*t33396-a1p*c* \
               c0p*t33233*t33338*(2.0/3.0)))-t33246*(t33352-t33304*t33266*t33298*t33299+t33322*t33260*t33283*t33292* \
               t33295+t33260*t33305*t33283*t33295*t33288*4.0-t33260*t33292*t33295*t33288*(t33352-t33304*t33266*t33298* \
               t33299+(t33281*1.0/(t33275*t33275)*(b2f*c*t33257*(1.0/3.0)+b4f*t33222*t33296*(2.0/3.0)+b1f*c*t33257* \
               t33297*(1.0/6.0)+b3f*c*t33257*t33249*(1.0/2.0)))/t33278-a1f*c*c0f*t33257*t33279*(2.0/3.0))+t33260* \
               t33283*t33292*t33267*t33268*t33288*4.0+Aa*t33260*t33306*t33316*t33318*t33288*(t33305*t33295*4.0+t33292* \
               t33267*t33268*4.0)*2.0+Aa*t33322*t33260*t33306*t33324*t33316*t33318*2.0-(1.0/(t33312*t33312)*t33260* \
               t33306*t33324*t33318*t33288*(b2a*c*t33257*(1.0/3.0)+b4a*t33222*t33296*(2.0/3.0)+b1a*c*t33257*t33297* \
               (1.0/6.0)+b3a*c*t33257*t33249*(1.0/2.0)))/t33315+Aa*a1a*c*t33260*t33306*t33324*t33316*t33257*t33288* \
               (2.0/3.0))-t33260*t33370*t33327)-t33408*(t33351+t33260*t33327*(t33350-c0p*t33233*t33235*2.0))-(rho_b[index]* \
               t33410+rho_a[index]*(t33369-t33260*t33327*(t33369-c0f*log((t33261*(1.0/2.0))/(b1f*t33355+b3f*t33356+ \
               b2f*c*t33353+b4f*t33222*t33357)+1.0)*(a1f*c*t33353+1.0)*2.0))-t33246*(t33371+t33372+t33294))*(ccab1* \
               gamma_bb[index]*gcab*t33375*t33376*(4.0/3.0)-ccab2*t33241*t33245*1.0/(t33379*t33379)*(gamma_bb[index]* \
               gcab*t33376*(8.0/3.0)+gamma_bb[index]*t33240*t33241*t33376*(8.0/3.0))-ccab1*gamma_bb[index]*t33240* \
               t33241*1.0/(t33374*t33374)*t33376*(4.0/3.0)+ccab2*gamma_bb[index]*t33240*t33241*t33380*t33376*(8.0/ \
               3.0))+rho_b[index]*t33410*(ccaa1*gamma_bb[index]*gcaa*t33401*t33376*(8.0/3.0)+ccaa2*t33406*t33237* \
               t33238*t33389*(1.6E1/3.0)-ccaa1*1.0/(t33400*t33400)*t33237*t33238*t33389*(8.0/3.0)-ccaa2*1.0/(t33405* \
               t33405)*t33237*t33238*t33239*(gamma_bb[index]*gcaa*t33376*(1.6E1/3.0)+t33237*t33238*t33389*(1.6E1/ \
               3.0)))+c0*pow(rho_b[index],1.0/3.0)*(cx0+cx1*gamma_bb[index]*gx*t33236*t33384+cx2*t33237*t33381*t33239* \
               t33388)*(4.0/3.0)+rho_b[index]*t33408*(-t33349+t33398+t33260*t33327*(t33349+t33397-t33398-t33390*t33391* \
               t33329*t33396))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t33384*t33376*(8.0/3.0)+cx2*t33237* \
               t33381*t33388*t33389*(1.6E1/3.0)-cx1*t33237*t33381*1.0/(t33383*t33383)*t33389*(8.0/3.0)-cx2*t33237* \
               t33381*t33239*1.0/(t33387*t33387)*(gamma_bb[index]*gx*t33376*(1.6E1/3.0)+t33237*t33381*t33389*(1.6E1/ \
               3.0)));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t35644 = 1.0/pow(rho_b[index],1.0/3.0);
            double t35645 = c*t35644;
            double t35646 = sqrt(t35645);
            double t35647 = pow(t35645,3.0/2.0);
            double t35648 = c*c;
            double t35649 = 1.0/pow(rho_b[index],2.0/3.0);
            double t35650 = 1.0/c0p;
            double t35651 = b1p*t35646;
            double t35652 = b3p*t35647;
            double t35653 = b4p*t35648*t35649;
            double t35654 = b2p*c*t35644;
            double t35655 = t35651+t35652+t35653+t35654;
            double t35656 = 1.0/t35655;
            double t35657 = t35650*t35656*(1.0/2.0);
            double t35658 = t35657+1.0;
            double t35659 = log(t35658);
            double t35660 = a1p*c*t35644;
            double t35661 = t35660+1.0;
            double t35662 = 1.0/pow(rho_b[index],8.0/3.0);
            double t35663 = gamma_bb[index]*gamma_bb[index];
            double t35664 = gcaa*gcaa;
            double t35665 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t35666 = gx*gx;
            double t35667 = gamma_bb[index]*gx*t35662;
            double t35668 = t35667+1.0;
            double t35669 = 1.0/t35668;
            double t35670 = gamma_bb[index]*gx*t35662*2.0;
            double t35671 = t35663*t35665*t35666;
            double t35672 = t35670+t35671+1.0;
            double t35673 = 1.0/t35672;
            double t35674 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t35675 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t35676 = pow(2.0,1.0/3.0);
            double t35677 = t35676*2.0;
            double t35678 = t35677-2.0;
            double t35679 = two_13*2.0;
            double t35680 = t35679-2.0;
            double t35681 = 1.0/t35680;
            double t35682 = a1f*c*t35644;
            double t35683 = t35682+1.0;
            double t35684 = 1.0/c0f;
            double t35685 = b1f*t35646;
            double t35686 = b3f*t35647;
            double t35687 = b4f*t35648*t35649;
            double t35688 = b2f*c*t35644;
            double t35689 = t35685+t35686+t35687+t35688;
            double t35690 = 1.0/t35689;
            double t35691 = t35690*t35684*(1.0/2.0);
            double t35692 = t35691+1.0;
            double t35693 = 1.0/pow(rho_b[index],4.0/3.0);
            double t35694 = 1.0/pow(rho_b[index],5.0/3.0);
            double t35695 = 1.0/sqrt(t35645);
            double t35696 = log(t35692);
            double t35697 = 1.0/t35658;
            double t35698 = 1.0/(t35655*t35655);
            double t35699 = b4p*t35648*t35694*(2.0/3.0);
            double t35700 = b2p*c*t35693*(1.0/3.0);
            double t35701 = b1p*c*t35693*t35695*(1.0/6.0);
            double t35702 = b3p*c*t35646*t35693*(1.0/2.0);
            double t35703 = t35700+t35701+t35702+t35699;
            double t35704 = t35703*t35661*t35697*t35698;
            double t35705 = gamma_bb[index]*gcaa*t35662;
            double t35706 = t35705+1.0;
            double t35707 = 1.0/t35706;
            double t35708 = ccaa1*gamma_bb[index]*gcaa*t35662*t35707;
            double t35709 = gamma_bb[index]*gcaa*t35662*2.0;
            double t35710 = t35663*t35664*t35665;
            double t35711 = t35710+t35709+1.0;
            double t35712 = 1.0/t35711;
            double t35713 = ccaa2*t35712*t35663*t35664*t35665;
            double t35714 = ccaa0+t35713+t35708;
            double t35715 = c0f*t35683*t35696*2.0;
            double t35716 = c0p*t35661*t35659*2.0;
            v_rho_b_[index] = -t35714*(t35716+t35681*t35678*(t35715-c0p*t35661*t35659*2.0))+rho_b[index]*t35714* \
               (-t35704+t35681*t35678*(t35704-(t35683*1.0/(t35689*t35689)*(b2f*c*t35693*(1.0/3.0)+b4f*t35648*t35694* \
               (2.0/3.0)+b1f*c*t35693*t35695*(1.0/6.0)+b3f*c*t35646*t35693*(1.0/2.0)))/t35692+a1f*c*c0f*t35693*t35696* \
               (2.0/3.0)-a1p*c*c0p*t35693*t35659*(2.0/3.0))+a1p*c*c0p*t35693*t35659*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t35662*t35669+cx2*t35663*t35673*t35665*t35666)*(4.0/3.0)+rho_b[index]* \
               (t35716+t35681*t35678*(t35715-t35716))*(ccaa1*gamma_bb[index]*gcaa*t35707*t35675*(8.0/3.0)+ccaa2*t35712* \
               t35663*t35664*t35674*(1.6E1/3.0)-ccaa1*1.0/(t35706*t35706)*t35663*t35664*t35674*(8.0/3.0)-ccaa2*1.0/ \
               (t35711*t35711)*t35663*t35664*t35665*(gamma_bb[index]*gcaa*t35675*(1.6E1/3.0)+t35663*t35664*t35674* \
               (1.6E1/3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t35675*t35669*(8.0/3.0)+cx2*t35663* \
               t35673*t35674*t35666*(1.6E1/3.0)-cx1*t35663*t35674*t35666*1.0/(t35668*t35668)*(8.0/3.0)-cx2*t35663* \
               1.0/(t35672*t35672)*t35665*t35666*(gamma_bb[index]*gx*t35675*(1.6E1/3.0)+t35663*t35674*t35666*(1.6E1/ \
               3.0)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t33412 = 1.0/pow(rho_a[index],1.0/3.0);
                double t33413 = c*t33412;
                double t33414 = sqrt(t33413);
                double t33415 = pow(t33413,3.0/2.0);
                double t33416 = c*c;
                double t33417 = 1.0/pow(rho_a[index],2.0/3.0);
                double t33418 = 1.0/c0p;
                double t33419 = b1p*t33414;
                double t33420 = b3p*t33415;
                double t33421 = b4p*t33416*t33417;
                double t33422 = b2p*c*t33412;
                double t33423 = t33420+t33421+t33422+t33419;
                double t33424 = 1.0/t33423;
                double t33425 = t33424*t33418*(1.0/2.0);
                double t33426 = t33425+1.0;
                double t33427 = log(t33426);
                double t33428 = a1p*c*t33412;
                double t33429 = t33428+1.0;
                double t33430 = pow(2.0,1.0/3.0);
                double t33431 = t33430*2.0;
                double t33432 = t33431-2.0;
                double t33433 = two_13*2.0;
                double t33434 = t33433-2.0;
                double t33435 = 1.0/t33434;
                double t33436 = 1.0/c0f;
                double t33437 = 1.0/pow(rho_b[index],1.0/3.0);
                double t33438 = c*t33437;
                double t33439 = sqrt(t33438);
                double t33440 = pow(t33438,3.0/2.0);
                double t33441 = 1.0/pow(rho_b[index],2.0/3.0);
                double t33442 = b1p*t33439;
                double t33443 = b3p*t33440;
                double t33444 = b4p*t33441*t33416;
                double t33445 = b2p*c*t33437;
                double t33446 = t33442+t33443+t33444+t33445;
                double t33447 = 1.0/t33446;
                double t33448 = t33418*t33447*(1.0/2.0);
                double t33449 = t33448+1.0;
                double t33450 = log(t33449);
                double t33451 = a1p*c*t33437;
                double t33452 = t33451+1.0;
                double t33453 = c0p*t33450*t33452*2.0;
                double t33454 = rho_a[index]+rho_b[index];
                double t33455 = 1.0/pow(t33454,1.0/3.0);
                double t33456 = c*t33455;
                double t33457 = sqrt(t33456);
                double t33458 = pow(t33456,3.0/2.0);
                double t33459 = 1.0/pow(t33454,2.0/3.0);
                double t33460 = b1p*t33457;
                double t33461 = b3p*t33458;
                double t33462 = b4p*t33416*t33459;
                double t33463 = b2p*c*t33455;
                double t33464 = t33460+t33461+t33462+t33463;
                double t33465 = 1.0/t33464;
                double t33466 = t33418*t33465*(1.0/2.0);
                double t33467 = t33466+1.0;
                double t33468 = log(t33467);
                double t33469 = a1p*c*t33455;
                double t33470 = t33469+1.0;
                double t33471 = c0p*t33470*t33468*2.0;
                double t33472 = rho_a[index]-rho_b[index];
                double t33473 = t33472*t33472;
                double t33474 = 1.0/t33454;
                double t33475 = t33472*t33474;
                double t33476 = 1.0/(t33454*t33454*t33454*t33454);
                double t33477 = t33473*t33473;
                double t33478 = t33475+1.0;
                double t33479 = pow(t33478,4.0/3.0);
                double t33480 = -t33475+1.0;
                double t33481 = pow(t33480,4.0/3.0);
                double t33482 = t33481+t33479-2.0;
                double t33483 = 1.0/pow(rho_a[index],8.0/3.0);
                double t33484 = gamma_aa[index]*t33483*(1.0/2.0);
                double t33485 = 1.0/pow(rho_b[index],8.0/3.0);
                double t33486 = gamma_bb[index]*t33485*(1.0/2.0);
                double t33487 = t33484+t33486;
                double t33488 = gcab*t33487;
                double t33489 = t33488+1.0;
                double t33490 = gcab*gcab;
                double t33491 = t33487*t33487;
                double t33492 = t33490*t33491;
                double t33493 = gcab*t33487*2.0;
                double t33494 = t33492+t33493+1.0;
                double t33495 = c0p*t33427*t33429*2.0;
                double t33496 = gx*gx;
                double t33497 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t33498 = gamma_aa[index]*gx*t33483;
                double t33499 = t33498+1.0;
                double t33500 = gamma_aa[index]*gamma_aa[index];
                double t33501 = gamma_aa[index]*gx*t33483*2.0;
                double t33502 = t33500*t33496*t33497;
                double t33503 = t33501+t33502+1.0;
                double t33504 = b1f*t33414;
                double t33505 = b3f*t33415;
                double t33506 = b4f*t33416*t33417;
                double t33507 = b2f*c*t33412;
                double t33508 = t33504+t33505+t33506+t33507;
                double t33509 = 1.0/t33508;
                double t33510 = t33436*t33509*(1.0/2.0);
                double t33511 = t33510+1.0;
                double t33512 = log(t33511);
                double t33513 = a1f*c*t33412;
                double t33514 = t33513+1.0;
                double t33515 = t33495-c0f*t33512*t33514*2.0;
                double t33516 = t33495-t33432*t33515*t33435;
                double t33517 = gcaa*gcaa;
                double t33518 = gamma_aa[index]*gcaa*t33483;
                double t33519 = t33518+1.0;
                double t33520 = gamma_aa[index]*gcaa*t33483*2.0;
                double t33521 = t33500*t33517*t33497;
                double t33522 = t33520+t33521+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t33516+rho_b[index]*(t33453-t33432*t33435*(t33453-c0f*log((t33436* \
                   (1.0/2.0))/(b1f*t33439+b3f*t33440+b2f*c*t33437+b4f*t33441*t33416)+1.0)*(a1f*c*t33437+1.0)*2.0))-t33454* \
                   (t33471-t33435*t33482*t33476*t33477*(t33471-c0f*log((t33436*(1.0/2.0))/(b1f*t33457+b3f*t33458+b2f* \
                   c*t33455+b4f*t33416*t33459)+1.0)*(a1f*c*t33455+1.0)*2.0)+(Aa*t33435*t33482*log((1.0/2.0)/(Aa*(b1a* \
                   t33457+b3a*t33458+b2a*c*t33455+b4a*t33416*t33459))+1.0)*(t33476*t33477-1.0)*(a1a*c*t33455+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t33483*(1.0/2.0))/t33489-ccab2*t33490*t33491*1.0/(t33494*t33494)*(gcab*t33483+ \
                   t33490*t33483*t33487)+(ccab2*t33490*t33483*t33487)/t33494-ccab1*t33490*t33483*t33487*1.0/(t33489*t33489) \
                   *(1.0/2.0))-rho_a[index]*t33516*((ccaa1*gcaa*t33483)/t33519+(ccaa2*gamma_aa[index]*t33517*t33497*2.0) \
                   /t33522-ccaa1*gamma_aa[index]*t33517*1.0/(t33519*t33519)*t33497-ccaa2*t33500*1.0/(t33522*t33522)*t33517* \
                   t33497*(gcaa*t33483*2.0+gamma_aa[index]*t33517*t33497*2.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx* \
                   t33483)/t33499-cx1*gamma_aa[index]*t33496*t33497*1.0/(t33499*t33499)+(cx2*gamma_aa[index]*t33496*t33497* \
                   2.0)/t33503-cx2*t33500*1.0/(t33503*t33503)*t33496*t33497*(gx*t33483*2.0+gamma_aa[index]*t33496*t33497* \
                   2.0));
            } else if (rho_a[index] > cutoff_) {
                double t36129 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36130 = gx*gx;
                double t36131 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36132 = gamma_aa[index]*gx*t36129;
                double t36133 = t36132+1.0;
                double t36134 = gamma_aa[index]*gamma_aa[index];
                double t36135 = gamma_aa[index]*gx*t36129*2.0;
                double t36136 = t36130*t36131*t36134;
                double t36137 = t36135+t36136+1.0;
                double t36138 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36139 = c*t36138;
                double t36140 = sqrt(t36139);
                double t36141 = pow(t36139,3.0/2.0);
                double t36142 = c*c;
                double t36143 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36144 = 1.0/c0p;
                double t36145 = b1p*t36140;
                double t36146 = b3p*t36141;
                double t36147 = b4p*t36142*t36143;
                double t36148 = b2p*c*t36138;
                double t36149 = t36145+t36146+t36147+t36148;
                double t36150 = 1.0/t36149;
                double t36151 = t36150*t36144*(1.0/2.0);
                double t36152 = t36151+1.0;
                double t36153 = log(t36152);
                double t36154 = a1p*c*t36138;
                double t36155 = t36154+1.0;
                double t36156 = gcaa*gcaa;
                double t36157 = gamma_aa[index]*gcaa*t36129;
                double t36158 = t36157+1.0;
                double t36159 = gamma_aa[index]*gcaa*t36129*2.0;
                double t36160 = t36131*t36134*t36156;
                double t36161 = t36160+t36159+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t36129)/t36133-cx1*gamma_aa[index]*t36130* \
                   t36131*1.0/(t36133*t36133)+(cx2*gamma_aa[index]*t36130*t36131*2.0)/t36137-cx2*t36130*t36131*t36134* \
                   1.0/(t36137*t36137)*(gx*t36129*2.0+gamma_aa[index]*t36130*t36131*2.0))-rho_a[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36140+b3f*t36141+b2f*c*t36138+b4f*t36142*t36143))+1.0) \
                   *(a1f*c*t36138+1.0)*2.0-c0p*t36153*t36155*2.0))/(two_13*2.0-2.0)+c0p*t36153*t36155*2.0)*((ccaa1*gcaa* \
                   t36129)/t36158+(ccaa2*gamma_aa[index]*t36131*t36156*2.0)/t36161-ccaa1*gamma_aa[index]*t36131*t36156* \
                   1.0/(t36158*t36158)-ccaa2*t36131*t36134*1.0/(t36161*t36161)*t36156*(gcaa*t36129*2.0+gamma_aa[index]* \
                   t36131*t36156*2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t33525 = 1.0/pow(rho_a[index],1.0/3.0);
                double t33526 = c*t33525;
                double t33527 = sqrt(t33526);
                double t33528 = pow(t33526,3.0/2.0);
                double t33529 = c*c;
                double t33530 = 1.0/pow(rho_a[index],2.0/3.0);
                double t33531 = 1.0/c0p;
                double t33532 = b1p*t33527;
                double t33533 = b3p*t33528;
                double t33534 = b4p*t33530*t33529;
                double t33535 = b2p*c*t33525;
                double t33536 = t33532+t33533+t33534+t33535;
                double t33537 = 1.0/t33536;
                double t33538 = t33531*t33537*(1.0/2.0);
                double t33539 = t33538+1.0;
                double t33540 = log(t33539);
                double t33541 = a1p*c*t33525;
                double t33542 = t33541+1.0;
                double t33543 = pow(2.0,1.0/3.0);
                double t33544 = t33543*2.0;
                double t33545 = t33544-2.0;
                double t33546 = two_13*2.0;
                double t33547 = t33546-2.0;
                double t33548 = 1.0/t33547;
                double t33549 = 1.0/c0f;
                double t33550 = 1.0/pow(rho_b[index],1.0/3.0);
                double t33551 = c*t33550;
                double t33552 = sqrt(t33551);
                double t33553 = pow(t33551,3.0/2.0);
                double t33554 = 1.0/pow(rho_b[index],2.0/3.0);
                double t33555 = b1p*t33552;
                double t33556 = b3p*t33553;
                double t33557 = b4p*t33554*t33529;
                double t33558 = b2p*c*t33550;
                double t33559 = t33555+t33556+t33557+t33558;
                double t33560 = 1.0/t33559;
                double t33561 = t33531*t33560*(1.0/2.0);
                double t33562 = t33561+1.0;
                double t33563 = log(t33562);
                double t33564 = a1p*c*t33550;
                double t33565 = t33564+1.0;
                double t33566 = c0p*t33563*t33565*2.0;
                double t33567 = rho_a[index]+rho_b[index];
                double t33568 = 1.0/pow(t33567,1.0/3.0);
                double t33569 = c*t33568;
                double t33570 = sqrt(t33569);
                double t33571 = pow(t33569,3.0/2.0);
                double t33572 = 1.0/pow(t33567,2.0/3.0);
                double t33573 = b1p*t33570;
                double t33574 = b3p*t33571;
                double t33575 = b4p*t33572*t33529;
                double t33576 = b2p*c*t33568;
                double t33577 = t33573+t33574+t33575+t33576;
                double t33578 = 1.0/t33577;
                double t33579 = t33531*t33578*(1.0/2.0);
                double t33580 = t33579+1.0;
                double t33581 = log(t33580);
                double t33582 = a1p*c*t33568;
                double t33583 = t33582+1.0;
                double t33584 = c0p*t33581*t33583*2.0;
                double t33585 = rho_a[index]-rho_b[index];
                double t33586 = t33585*t33585;
                double t33587 = 1.0/t33567;
                double t33588 = t33585*t33587;
                double t33589 = 1.0/(t33567*t33567*t33567*t33567);
                double t33590 = t33586*t33586;
                double t33591 = t33588+1.0;
                double t33592 = pow(t33591,4.0/3.0);
                double t33593 = -t33588+1.0;
                double t33594 = pow(t33593,4.0/3.0);
                double t33595 = t33592+t33594-2.0;
                double t33596 = 1.0/pow(rho_b[index],8.0/3.0);
                double t33597 = 1.0/pow(rho_a[index],8.0/3.0);
                double t33598 = gamma_aa[index]*t33597*(1.0/2.0);
                double t33599 = gamma_bb[index]*t33596*(1.0/2.0);
                double t33600 = t33598+t33599;
                double t33601 = gcab*t33600;
                double t33602 = t33601+1.0;
                double t33603 = gcab*gcab;
                double t33604 = t33600*t33600;
                double t33605 = t33603*t33604;
                double t33606 = gcab*t33600*2.0;
                double t33607 = t33605+t33606+1.0;
                double t33608 = c0p*t33540*t33542*2.0;
                double t33609 = gx*gx;
                double t33610 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t33611 = gamma_bb[index]*gx*t33596;
                double t33612 = t33611+1.0;
                double t33613 = gamma_bb[index]*gamma_bb[index];
                double t33614 = gamma_bb[index]*gx*t33596*2.0;
                double t33615 = t33610*t33613*t33609;
                double t33616 = t33614+t33615+1.0;
                double t33617 = b1f*t33552;
                double t33618 = b3f*t33553;
                double t33619 = b4f*t33554*t33529;
                double t33620 = b2f*c*t33550;
                double t33621 = t33620+t33617+t33618+t33619;
                double t33622 = 1.0/t33621;
                double t33623 = t33622*t33549*(1.0/2.0);
                double t33624 = t33623+1.0;
                double t33625 = log(t33624);
                double t33626 = a1f*c*t33550;
                double t33627 = t33626+1.0;
                double t33628 = t33566-c0f*t33625*t33627*2.0;
                double t33629 = t33566-t33545*t33628*t33548;
                double t33630 = gcaa*gcaa;
                double t33631 = gamma_bb[index]*gcaa*t33596;
                double t33632 = t33631+1.0;
                double t33633 = gamma_bb[index]*gcaa*t33596*2.0;
                double t33634 = t33610*t33630*t33613;
                double t33635 = t33633+t33634+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t33629+rho_a[index]*(t33608-t33545*t33548*(t33608-c0f*log((t33549* \
                   (1.0/2.0))/(b1f*t33527+b3f*t33528+b2f*c*t33525+b4f*t33530*t33529)+1.0)*(a1f*c*t33525+1.0)*2.0))-t33567* \
                   (t33584-t33590*t33548*t33595*t33589*(t33584-c0f*log((t33549*(1.0/2.0))/(b1f*t33570+b3f*t33571+b2f* \
                   c*t33568+b4f*t33572*t33529)+1.0)*(a1f*c*t33568+1.0)*2.0)+(Aa*t33548*t33595*log((1.0/2.0)/(Aa*(b1a* \
                   t33570+b3a*t33571+b2a*c*t33568+b4a*t33572*t33529))+1.0)*(t33590*t33589-1.0)*(a1a*c*t33568+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t33596*(1.0/2.0))/t33602-ccab2*t33603*t33604*1.0/(t33607*t33607)*(gcab*t33596+ \
                   t33600*t33603*t33596)-ccab1*t33600*1.0/(t33602*t33602)*t33603*t33596*(1.0/2.0)+(ccab2*t33600*t33603* \
                   t33596)/t33607)-rho_b[index]*t33629*((ccaa1*gcaa*t33596)/t33632-ccaa1*gamma_bb[index]*t33610*t33630* \
                   1.0/(t33632*t33632)+(ccaa2*gamma_bb[index]*t33610*t33630*2.0)/t33635-ccaa2*t33610*t33630*t33613*1.0/ \
                   (t33635*t33635)*(gcaa*t33596*2.0+gamma_bb[index]*t33610*t33630*2.0))+c0*pow(rho_b[index],4.0/3.0)* \
                   ((cx1*gx*t33596)/t33612-cx1*gamma_bb[index]*t33610*1.0/(t33612*t33612)*t33609+(cx2*gamma_bb[index]* \
                   t33610*t33609*2.0)/t33616-cx2*t33610*t33613*1.0/(t33616*t33616)*t33609*(gx*t33596*2.0+gamma_bb[index]* \
                   t33610*t33609*2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t35720 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35721 = gx*gx;
                double t35722 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35723 = gamma_bb[index]*gx*t35720;
                double t35724 = t35723+1.0;
                double t35725 = gamma_bb[index]*gamma_bb[index];
                double t35726 = gamma_bb[index]*gx*t35720*2.0;
                double t35727 = t35721*t35722*t35725;
                double t35728 = t35726+t35727+1.0;
                double t35729 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35730 = c*t35729;
                double t35731 = sqrt(t35730);
                double t35732 = pow(t35730,3.0/2.0);
                double t35733 = c*c;
                double t35734 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35735 = 1.0/c0p;
                double t35736 = b1p*t35731;
                double t35737 = b3p*t35732;
                double t35738 = b4p*t35733*t35734;
                double t35739 = b2p*c*t35729;
                double t35740 = t35736+t35737+t35738+t35739;
                double t35741 = 1.0/t35740;
                double t35742 = t35741*t35735*(1.0/2.0);
                double t35743 = t35742+1.0;
                double t35744 = log(t35743);
                double t35745 = a1p*c*t35729;
                double t35746 = t35745+1.0;
                double t35747 = gcaa*gcaa;
                double t35748 = gamma_bb[index]*gcaa*t35720;
                double t35749 = t35748+1.0;
                double t35750 = gamma_bb[index]*gcaa*t35720*2.0;
                double t35751 = t35722*t35725*t35747;
                double t35752 = t35750+t35751+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t35720)/t35724-cx1*gamma_bb[index]*t35721* \
                   t35722*1.0/(t35724*t35724)+(cx2*gamma_bb[index]*t35721*t35722*2.0)/t35728-cx2*t35721*t35722*t35725* \
                   1.0/(t35728*t35728)*(gx*t35720*2.0+gamma_bb[index]*t35721*t35722*2.0))-rho_b[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t35731+b3f*t35732+b2f*c*t35729+b4f*t35733*t35734))+1.0) \
                   *(a1f*c*t35729+1.0)*2.0-c0p*t35744*t35746*2.0))/(two_13*2.0-2.0)+c0p*t35744*t35746*2.0)*((ccaa1*gcaa* \
                   t35720)/t35749+(ccaa2*gamma_bb[index]*t35722*t35747*2.0)/t35752-ccaa1*gamma_bb[index]*t35722*t35747* \
                   1.0/(t35749*t35749)-ccaa2*t35722*t35725*1.0/(t35752*t35752)*t35747*(gcaa*t35720*2.0+gamma_bb[index]* \
                   t35722*t35747*2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33639 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33640 = c*t33639;
            double t33641 = sqrt(t33640);
            double t33642 = pow(t33640,3.0/2.0);
            double t33643 = c*c;
            double t33644 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33645 = 1.0/c0p;
            double t33646 = b1p*t33641;
            double t33647 = b3p*t33642;
            double t33648 = b4p*t33643*t33644;
            double t33649 = b2p*c*t33639;
            double t33650 = t33646+t33647+t33648+t33649;
            double t33651 = 1.0/t33650;
            double t33652 = t33651*t33645*(1.0/2.0);
            double t33653 = t33652+1.0;
            double t33654 = log(t33653);
            double t33655 = a1p*c*t33639;
            double t33656 = t33655+1.0;
            double t33657 = 1.0/pow(rho_a[index],8.0/3.0);
            double t33658 = gamma_aa[index]*gamma_aa[index];
            double t33659 = gcaa*gcaa;
            double t33660 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t33661 = gamma_aa[index]*gcaa*t33657;
            double t33662 = t33661+1.0;
            double t33663 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t33664 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t33665 = gamma_aa[index]*gcaa*t33657*2.0;
            double t33666 = t33663*t33658*t33659;
            double t33667 = t33665+t33666+1.0;
            double t33670 = gamma_aa[index]*t33657*(1.0/2.0);
            double t33671 = 1.0/pow(rho_b[index],8.0/3.0);
            double t33672 = gamma_bb[index]*t33671*(1.0/2.0);
            double t33668 = t33670+t33672;
            double t33669 = gcab*gcab;
            double t33673 = t33668*t33668;
            double t33674 = rho_a[index]+rho_b[index];
            double t33675 = 1.0/pow(t33674,1.0/3.0);
            double t33676 = c*t33675;
            double t33677 = sqrt(t33676);
            double t33678 = b1p*t33677;
            double t33679 = pow(t33676,3.0/2.0);
            double t33680 = b3p*t33679;
            double t33681 = 1.0/pow(t33674,2.0/3.0);
            double t33682 = b4p*t33643*t33681;
            double t33683 = b2p*c*t33675;
            double t33684 = t33680+t33682+t33683+t33678;
            double t33685 = 1.0/pow(t33674,7.0/3.0);
            double t33686 = 1.0/pow(t33674,8.0/3.0);
            double t33687 = 1.0/sqrt(t33676);
            double t33688 = a1p*c*t33675;
            double t33689 = t33688+1.0;
            double t33690 = 1.0/t33684;
            double t33691 = t33645*t33690*(1.0/2.0);
            double t33692 = t33691+1.0;
            double t33693 = 1.0/t33692;
            double t33694 = 1.0/pow(t33674,4.0/3.0);
            double t33734 = 1.0/pow(t33674,5.0/3.0);
            double t33736 = b4p*t33643*t33734*(2.0/3.0);
            double t33737 = b2p*c*t33694*(1.0/3.0);
            double t33738 = b1p*c*t33694*t33687*(1.0/6.0);
            double t33739 = b3p*c*t33694*t33677*(1.0/2.0);
            double t33695 = t33736+t33737+t33738+t33739;
            double t33696 = two_13*2.0;
            double t33697 = t33696-2.0;
            double t33698 = 1.0/t33697;
            double t33699 = 1.0/c0f;
            double t33700 = rho_a[index]-rho_b[index];
            double t33701 = 1.0/t33674;
            double t33702 = t33700*t33701;
            double t33703 = b1f*t33677;
            double t33704 = b3f*t33679;
            double t33705 = b4f*t33643*t33681;
            double t33706 = b2f*c*t33675;
            double t33707 = t33703+t33704+t33705+t33706;
            double t33708 = 1.0/t33707;
            double t33709 = t33708*t33699*(1.0/2.0);
            double t33710 = t33709+1.0;
            double t33711 = log(t33710);
            double t33712 = a1f*c*t33675;
            double t33713 = t33712+1.0;
            double t33714 = log(t33692);
            double t33722 = c0f*t33711*t33713*2.0;
            double t33723 = c0p*t33714*t33689*2.0;
            double t33715 = t33722-t33723;
            double t33716 = t33700*t33700;
            double t33717 = t33702+1.0;
            double t33718 = pow(t33717,4.0/3.0);
            double t33719 = -t33702+1.0;
            double t33720 = pow(t33719,4.0/3.0);
            double t33721 = t33720+t33718-2.0;
            double t33724 = 1.0/(t33674*t33674);
            double t33728 = t33700*t33724;
            double t33725 = t33701-t33728;
            double t33726 = 1.0/(t33674*t33674*t33674*t33674);
            double t33727 = pow(t33717,1.0/3.0);
            double t33729 = t33725*t33727*(4.0/3.0);
            double t33730 = pow(t33719,1.0/3.0);
            double t33763 = t33730*t33725*(4.0/3.0);
            double t33731 = -t33763+t33729;
            double t33732 = 1.0/(t33674*t33674*t33674*t33674*t33674);
            double t33733 = t33716*t33716;
            double t33735 = 1.0/(t33684*t33684);
            double t33740 = 1.0/t33710;
            double t33741 = 1.0/(t33707*t33707);
            double t33742 = b4f*t33643*t33734*(2.0/3.0);
            double t33743 = b2f*c*t33694*(1.0/3.0);
            double t33744 = b1f*c*t33694*t33687*(1.0/6.0);
            double t33745 = b3f*c*t33694*t33677*(1.0/2.0);
            double t33746 = t33742+t33743+t33744+t33745;
            double t33747 = t33713*t33740*t33741*t33746;
            double t33748 = a1p*c*c0p*t33714*t33694*(2.0/3.0);
            double t33764 = t33735*t33693*t33695*t33689;
            double t33765 = a1f*c*c0f*t33711*t33694*(2.0/3.0);
            double t33749 = -t33764+t33747-t33765+t33748;
            double t33750 = t33695*t33695;
            double t33751 = 1.0/pow(t33676,3.0/2.0);
            double t33752 = b4p*t33643*t33686*(1.0E1/9.0);
            double t33753 = b2p*c*t33685*(4.0/9.0);
            double t33754 = b1p*c*t33685*t33687*(2.0/9.0);
            double t33755 = b3p*c*t33685*t33677*(2.0/3.0);
            double t33756 = b3p*t33643*t33686*t33687*(1.0/1.2E1);
            double t33757 = t33752+t33753+t33754+t33755+t33756-b1p*t33643*t33751*t33686*(1.0/3.6E1);
            double t33758 = 1.0/(t33684*t33684*t33684);
            double t33759 = t33750*t33693*t33758*t33689*2.0;
            double t33760 = t33746*t33746;
            double t33761 = 1.0/(t33692*t33692);
            double t33762 = 1.0/(t33684*t33684*t33684*t33684);
            double t33766 = t33724*2.0;
            double t33767 = 1.0/(t33674*t33674*t33674);
            double t33785 = t33700*t33767*2.0;
            double t33768 = t33766-t33785;
            double t33769 = t33725*t33725;
            double t33770 = a1p*c*c0p*t33714*t33685*(8.0/9.0);
            double t33771 = 1.0/(t33674*t33674*t33674*t33674*t33674*t33674);
            double t33772 = 1.0/d2fz0;
            double t33773 = 1.0/Aa;
            double t33774 = b1a*t33677;
            double t33775 = b3a*t33679;
            double t33776 = b4a*t33643*t33681;
            double t33777 = b2a*c*t33675;
            double t33778 = t33774+t33775+t33776+t33777;
            double t33779 = 1.0/t33778;
            double t33780 = t33773*t33779*(1.0/2.0);
            double t33781 = t33780+1.0;
            double t33782 = log(t33781);
            double t33783 = a1a*c*t33675;
            double t33784 = t33783+1.0;
            double t33786 = t33730*t33768*(4.0/3.0);
            double t33787 = 1.0/pow(t33717,2.0/3.0);
            double t33788 = t33769*t33787*(4.0/9.0);
            double t33789 = 1.0/pow(t33719,2.0/3.0);
            double t33790 = t33769*t33789*(4.0/9.0);
            double t33791 = t33790+t33786+t33788-t33727*t33768*(4.0/3.0);
            double t33792 = t33732*t33733*4.0;
            double t33804 = t33700*t33716*t33726*4.0;
            double t33793 = -t33804+t33792;
            double t33794 = 1.0/t33781;
            double t33795 = t33733*t33726;
            double t33796 = t33795-1.0;
            double t33797 = 1.0/(t33778*t33778);
            double t33798 = b4a*t33643*t33734*(2.0/3.0);
            double t33799 = b2a*c*t33694*(1.0/3.0);
            double t33800 = b1a*c*t33694*t33687*(1.0/6.0);
            double t33801 = b3a*c*t33694*t33677*(1.0/2.0);
            double t33802 = t33800+t33801+t33798+t33799;
            double t33803 = t33802*t33802;
            double t33805 = t33735*t33693*t33757*t33689;
            double t33806 = t33750*t33761*t33645*t33762*t33689*(1.0/2.0);
            double t33807 = a1p*c*t33735*t33693*t33694*t33695*(2.0/3.0);
            double t33808 = pow(2.0,1.0/3.0);
            double t33809 = t33808*2.0;
            double t33810 = t33809-2.0;
            double t33811 = a1f*c*t33639;
            double t33812 = t33811+1.0;
            double t33813 = b1f*t33641;
            double t33814 = b3f*t33642;
            double t33815 = b4f*t33643*t33644;
            double t33816 = b2f*c*t33639;
            double t33817 = t33813+t33814+t33815+t33816;
            double t33818 = 1.0/t33817;
            double t33819 = t33818*t33699*(1.0/2.0);
            double t33820 = t33819+1.0;
            double t33821 = 1.0/pow(rho_a[index],4.0/3.0);
            double t33823 = 1.0/pow(rho_a[index],5.0/3.0);
            double t33824 = 1.0/sqrt(t33640);
            double t33830 = b4f*t33643*t33823*(2.0/3.0);
            double t33831 = b2f*c*t33821*(1.0/3.0);
            double t33832 = b1f*c*t33821*t33824*(1.0/6.0);
            double t33833 = b3f*c*t33641*t33821*(1.0/2.0);
            double t33822 = t33830+t33831+t33832+t33833;
            double t33835 = b4p*t33643*t33823*(2.0/3.0);
            double t33836 = b2p*c*t33821*(1.0/3.0);
            double t33837 = b1p*c*t33821*t33824*(1.0/6.0);
            double t33838 = b3p*c*t33641*t33821*(1.0/2.0);
            double t33825 = t33835+t33836+t33837+t33838;
            double t33826 = 1.0/t33820;
            double t33827 = 1.0/pow(rho_a[index],7.0/3.0);
            double t33828 = 1.0/t33653;
            double t33829 = 1.0/pow(t33640,3.0/2.0);
            double t33834 = t33822*t33822;
            double t33839 = t33825*t33825;
            double t33840 = log(t33820);
            double t33841 = 1.0/(t33817*t33817);
            double t33842 = 1.0/(t33650*t33650);
            double t33843 = 1.0/(t33650*t33650*t33650);
            double t33844 = t33843*t33656*t33828*t33839*2.0;
            double t33845 = b4p*t33643*t33657*(1.0E1/9.0);
            double t33846 = b2p*c*t33827*(4.0/9.0);
            double t33847 = b3p*t33643*t33824*t33657*(1.0/1.2E1);
            double t33848 = b1p*c*t33824*t33827*(2.0/9.0);
            double t33849 = b3p*c*t33641*t33827*(2.0/3.0);
            double t33924 = b1p*t33643*t33657*t33829*(1.0/3.6E1);
            double t33850 = -t33924+t33845+t33846+t33847+t33848+t33849;
            double t33851 = 1.0/(t33653*t33653);
            double t33852 = 1.0/(t33650*t33650*t33650*t33650);
            double t33853 = a1p*c*c0p*t33654*t33827*(8.0/9.0);
            double t33854 = t33804-t33792;
            double t33855 = gcab*t33668;
            double t33856 = t33855+1.0;
            double t33857 = 1.0/t33856;
            double t33858 = t33673*t33669;
            double t33859 = gcab*t33668*2.0;
            double t33860 = t33858+t33859+1.0;
            double t33861 = 1.0/t33860;
            double t33862 = t33812*t33822*t33841*t33826;
            double t33863 = a1p*c*c0p*t33821*t33654*(2.0/3.0);
            double t33865 = t33842*t33825*t33656*t33828;
            double t33868 = a1f*c*c0f*t33821*t33840*(2.0/3.0);
            double t33864 = t33862+t33863-t33865-t33868;
            double t33866 = c0f*t33812*t33840*2.0;
            double t33867 = c0p*t33654*t33656*2.0;
            double t33869 = t33810*t33864*t33698;
            double t33870 = -t33863+t33865+t33869;
            double t33871 = 1.0/t33662;
            double t33872 = 1.0/t33667;
            double t33873 = t33866-t33867;
            double t33874 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33875 = c*t33874;
            double t33876 = sqrt(t33875);
            double t33877 = pow(t33875,3.0/2.0);
            double t33878 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33879 = b1p*t33876;
            double t33880 = b3p*t33877;
            double t33881 = b4p*t33643*t33878;
            double t33882 = b2p*c*t33874;
            double t33883 = t33880+t33881+t33882+t33879;
            double t33884 = 1.0/t33883;
            double t33885 = t33645*t33884*(1.0/2.0);
            double t33886 = t33885+1.0;
            double t33887 = log(t33886);
            double t33888 = a1p*c*t33874;
            double t33889 = t33888+1.0;
            double t33890 = c0p*t33887*t33889*2.0;
            double t33891 = t33721*t33715*t33733*t33726*t33698;
            double t33892 = Aa*t33721*t33772*t33782*t33784*t33796*t33698*2.0;
            double t33893 = 1.0/(t33856*t33856);
            double t33894 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t33895 = gamma_aa[index]*gcab*t33664*(8.0/3.0);
            double t33896 = gamma_aa[index]*t33664*t33668*t33669*(8.0/3.0);
            double t33897 = t33895+t33896;
            double t33898 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t33899 = 1.0/(t33860*t33860);
            double t33900 = gx*gx;
            double t33901 = gamma_aa[index]*gx*t33657;
            double t33902 = t33901+1.0;
            double t33907 = gamma_aa[index]*gx*t33664*(1.6E1/3.0);
            double t33908 = t33900*t33660*t33658*(1.6E1/3.0);
            double t33903 = t33907+t33908;
            double t33904 = gamma_aa[index]*gx*t33657*2.0;
            double t33905 = t33900*t33663*t33658;
            double t33906 = t33904+t33905+1.0;
            double t33909 = 1.0/(t33906*t33906);
            double t33910 = 1.0/t33902;
            double t33911 = 1.0/t33906;
            double t33912 = 1.0/(t33902*t33902);
            double t33913 = ccaa1*gamma_aa[index]*gcaa*t33871*t33657;
            double t33914 = ccaa2*t33663*t33872*t33658*t33659;
            double t33915 = ccaa0+t33913+t33914;
            double t33916 = 1.0/(t33817*t33817*t33817);
            double t33917 = b4f*t33643*t33657*(1.0E1/9.0);
            double t33918 = b2f*c*t33827*(4.0/9.0);
            double t33919 = b3f*t33643*t33824*t33657*(1.0/1.2E1);
            double t33920 = b1f*c*t33824*t33827*(2.0/9.0);
            double t33921 = b3f*c*t33641*t33827*(2.0/3.0);
            double t33922 = t33920+t33921+t33917+t33918+t33919-b1f*t33643*t33657*t33829*(1.0/3.6E1);
            double t33923 = t33812*t33841*t33922*t33826;
            double t33925 = t33850*t33842*t33656*t33828;
            double t33926 = 1.0/(t33820*t33820);
            double t33927 = 1.0/(t33817*t33817*t33817*t33817);
            double t33928 = t33812*t33834*t33926*t33927*t33699*(1.0/2.0);
            double t33929 = t33851*t33645*t33852*t33656*t33839*(1.0/2.0);
            double t33930 = a1f*c*t33821*t33822*t33841*t33826*(2.0/3.0);
            double t33931 = a1p*c*t33821*t33842*t33825*t33828*(2.0/3.0);
            double t33932 = t33810*t33873*t33698;
            double t33933 = t33932+t33867;
            double t33934 = 1.0/pow(rho_a[index],1.0E1);
            double t33935 = 1.0/(t33662*t33662);
            double t33936 = gamma_aa[index]*gcaa*t33664*(1.6E1/3.0);
            double t33937 = t33660*t33658*t33659*(1.6E1/3.0);
            double t33938 = t33936+t33937;
            double t33939 = 1.0/(t33667*t33667);
            double t33940 = ccaa1*gamma_aa[index]*gcaa*t33664*t33871*(8.0/3.0);
            double t33941 = ccaa2*t33660*t33872*t33658*t33659*(1.6E1/3.0);
            double t33942 = t33940+t33941-ccaa1*t33660*t33935*t33658*t33659*(8.0/3.0)-ccaa2*t33663*t33658*t33659* \
               t33938*t33939;
            v_rho_a_rho_a_[index] = t33870*t33915*-2.0+t33942*(t33867+t33810*t33698*(t33866-c0p*t33654*t33656* \
               2.0))*2.0+(rho_a[index]*t33933+rho_b[index]*(t33890-t33810*t33698*(t33890-c0f*log((t33699*(1.0/2.0) \
               )/(b1f*t33876+b3f*t33877+b2f*c*t33874+b4f*t33643*t33878)+1.0)*(a1f*c*t33874+1.0)*2.0))-t33674*(t33723+ \
               t33891+t33892))*(-ccab2*t33673*t33669*t33899*(gamma_aa[index]*gcab*t33898*(8.8E1/9.0)+t33658*t33669* \
               t33894*(3.2E1/9.0)+gamma_aa[index]*t33668*t33669*t33898*(8.8E1/9.0))+ccab2*1.0/(t33860*t33860*t33860) \
               *t33673*t33669*(t33897*t33897)*2.0+ccab1*gamma_aa[index]*gcab*t33857*t33898*(4.4E1/9.0)+ccab2*t33861* \
               t33658*t33669*t33894*(3.2E1/9.0)-ccab1*t33658*t33893*t33669*t33894*(3.2E1/9.0)+ccab2*gamma_aa[index]* \
               t33861*t33668*t33669*t33898*(8.8E1/9.0)-ccab1*gamma_aa[index]*t33668*t33893*t33669*t33898*(4.4E1/9.0) \
               -ccab2*gamma_aa[index]*t33664*t33668*t33669*t33897*t33899*(1.6E1/3.0)+ccab1*gcab*t33658*1.0/(t33856* \
               t33856*t33856)*t33668*t33669*t33894*(3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t33664*t33857*(4.0/3.0) \
               -ccab2*t33673*t33669*t33897*t33899+ccab2*gamma_aa[index]*t33861*t33664*t33668*t33669*(8.0/3.0)-ccab1* \
               gamma_aa[index]*t33664*t33668*t33893*t33669*(4.0/3.0))*(t33723+t33891+t33892-t33867-rho_a[index]*t33870+ \
               t33674*(t33764-t33748-t33721*t33732*t33715*t33733*t33698*4.0+t33731*t33715*t33733*t33726*t33698+t33721* \
               t33733*t33726*t33749*t33698+t33700*t33721*t33715*t33716*t33726*t33698*4.0+Aa*t33721*t33772*t33782* \
               t33854*t33784*t33698*2.0+Aa*t33731*t33772*t33782*t33784*t33796*t33698*2.0+t33721*t33802*t33772*t33784* \
               t33794*t33796*t33698*t33797-Aa*a1a*c*t33721*t33772*t33782*t33694*t33796*t33698*(2.0/3.0))-t33810*t33873* \
               t33698)*2.0-(ccab0+ccab1*gcab*t33668*t33857+ccab2*t33861*t33673*t33669)*(rho_a[index]*(t33931-t33844- \
               t33853+t33925+t33929+t33810*t33698*(t33930+t33923+t33844+t33853+t33928-t33812*t33834*t33826*t33916* \
               2.0-t33850*t33842*t33656*t33828-a1f*c*c0f*t33840*t33827*(8.0/9.0)-t33851*t33645*t33852*t33656*t33839* \
               (1.0/2.0)-a1p*c*t33821*t33842*t33825*t33828*(2.0/3.0)))+t33674*(-t33805+t33770-t33806-t33807+t33759+ \
               t33721*t33733*t33726*t33698*(t33805-t33770+t33806+t33807-t33759+t33713*t33740*t33760*1.0/(t33707*t33707* \
               t33707)*2.0-t33713*t33740*t33741*(b2f*c*t33685*(4.0/9.0)+b4f*t33643*t33686*(1.0E1/9.0)+b1f*c*t33685* \
               t33687*(2.0/9.0)+b3f*c*t33685*t33677*(2.0/3.0)-b1f*t33643*t33751*t33686*(1.0/3.6E1)+b3f*t33643*t33686* \
               t33687*(1.0/1.2E1))-1.0/(t33710*t33710)*t33713*t33760*1.0/(t33707*t33707*t33707*t33707)*t33699*(1.0/ \
               2.0)+a1f*c*c0f*t33711*t33685*(8.0/9.0)-a1f*c*t33740*t33741*t33746*t33694*(2.0/3.0))-t33731*t33732* \
               t33715*t33733*t33698*8.0+t33721*t33715*t33733*t33771*t33698*2.0E1+t33721*t33715*t33716*t33726*t33698* \
               1.2E1-t33721*t33732*t33733*t33749*t33698*8.0+t33715*t33733*t33726*t33791*t33698+t33731*t33733*t33726* \
               t33749*t33698*2.0-t33700*t33721*t33732*t33715*t33716*t33698*3.2E1+t33700*t33731*t33715*t33716*t33726* \
               t33698*8.0+t33700*t33721*t33716*t33726*t33749*t33698*8.0-Aa*t33731*t33772*t33782*t33784*t33793*t33698* \
               4.0+Aa*t33772*t33782*t33791*t33784*t33796*t33698*2.0+Aa*t33721*t33772*t33782*t33784*t33698*(t33733* \
               t33771*2.0E1+t33716*t33726*1.2E1-t33700*t33732*t33716*3.2E1)*2.0-t33721*t33802*t33772*t33784*t33793* \
               t33794*t33698*t33797*2.0+t33802*t33731*t33772*t33784*t33794*t33796*t33698*t33797*2.0+t33721*t33803* \
               t33772*t33784*t33794*1.0/(t33778*t33778*t33778)*t33796*t33698*2.0-t33721*t33772*t33784*t33794*t33796* \
               t33698*t33797*(b2a*c*t33685*(4.0/9.0)+b4a*t33643*t33686*(1.0E1/9.0)+b1a*c*t33685*t33687*(2.0/9.0)+ \
               b3a*c*t33685*t33677*(2.0/3.0)-b1a*t33643*t33751*t33686*(1.0/3.6E1)+b3a*t33643*t33686*t33687*(1.0/1.2E1) \
               )-Aa*a1a*c*t33721*t33772*t33782*t33854*t33694*t33698*(4.0/3.0)+Aa*a1a*c*t33721*t33772*t33782*t33685* \
               t33796*t33698*(8.0/9.0)-Aa*a1a*c*t33731*t33772*t33782*t33694*t33796*t33698*(4.0/3.0)-t33721*t33803* \
               t33772*1.0/(t33781*t33781)*t33773*t33784*1.0/(t33778*t33778*t33778*t33778)*t33796*t33698*(1.0/2.0) \
               -a1a*c*t33721*t33802*t33772*t33694*t33794*t33796*t33698*t33797*(2.0/3.0))-t33810*t33864*t33698*2.0- \
               t33842*t33825*t33656*t33828*2.0+t33735*t33693*t33695*t33689*2.0+a1p*c*c0p*t33821*t33654*(4.0/3.0)- \
               a1p*c*c0p*t33714*t33694*(4.0/3.0)-t33721*t33732*t33715*t33733*t33698*8.0+t33731*t33715*t33733*t33726* \
               t33698*2.0+t33721*t33733*t33726*t33749*t33698*2.0+t33700*t33721*t33715*t33716*t33726*t33698*8.0+Aa* \
               t33721*t33772*t33782*t33854*t33784*t33698*4.0+Aa*t33731*t33772*t33782*t33784*t33796*t33698*4.0+t33721* \
               t33802*t33772*t33784*t33794*t33796*t33698*t33797*2.0-Aa*a1a*c*t33721*t33772*t33782*t33694*t33796*t33698* \
               (4.0/3.0))+c0*t33644*(cx0+cx1*gamma_aa[index]*gx*t33910*t33657+cx2*t33900*t33911*t33663*t33658)*(4.0/ \
               9.0)-rho_a[index]*t33933*(ccaa1*gamma_aa[index]*gcaa*t33871*t33898*(8.8E1/9.0)-ccaa1*t33935*t33658* \
               t33659*t33894*2.4E1+ccaa2*t33872*t33658*t33659*t33894*(3.04E2/9.0)-ccaa2*t33660*t33658*t33659*t33938* \
               t33939*(3.2E1/3.0)-ccaa2*t33663*t33658*t33659*t33939*(gamma_aa[index]*gcaa*t33898*(1.76E2/9.0)+t33658* \
               t33659*t33894*(3.04E2/9.0))+ccaa2*t33663*t33658*1.0/(t33667*t33667*t33667)*t33659*(t33938*t33938)* \
               2.0+ccaa1*gamma_aa[index]*gcaa*1.0/(t33662*t33662*t33662)*t33934*t33658*t33659*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t33910*t33898*(8.8E1/9.0)-cx1*t33900*t33912*t33658*t33894*2.4E1+cx2*t33900* \
               t33911*t33658*t33894*(3.04E2/9.0)-cx2*t33900*t33660*t33903*t33909*t33658*(3.2E1/3.0)-cx2*t33900*t33663* \
               t33909*t33658*(gamma_aa[index]*gx*t33898*(1.76E2/9.0)+t33900*t33658*t33894*(3.04E2/9.0))+cx2*t33900* \
               (t33903*t33903)*t33663*1.0/(t33906*t33906*t33906)*t33658*2.0+cx1*gamma_aa[index]*gx*t33900*1.0/(t33902* \
               t33902*t33902)*t33934*t33658*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t33910* \
               t33664*(8.0/3.0)-cx1*t33900*t33660*t33912*t33658*(8.0/3.0)+cx2*t33900*t33911*t33660*t33658*(1.6E1/ \
               3.0)-cx2*t33900*t33903*t33663*t33909*t33658)*(8.0/3.0)+rho_a[index]*t33915*(t33931-t33844-t33853+t33925+ \
               t33929+t33810*t33698*(t33930-t33931+t33923+t33844+t33853-t33925+t33928-t33929-t33812*t33834*t33826* \
               t33916*2.0-a1f*c*c0f*t33840*t33827*(8.0/9.0)))+rho_a[index]*t33870*t33942*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t36167 = 1.0/pow(rho_a[index],1.0/3.0);
            double t36168 = c*t36167;
            double t36169 = sqrt(t36168);
            double t36170 = pow(t36168,3.0/2.0);
            double t36171 = c*c;
            double t36172 = 1.0/pow(rho_a[index],2.0/3.0);
            double t36173 = 1.0/c0p;
            double t36174 = b1p*t36169;
            double t36175 = b3p*t36170;
            double t36176 = b4p*t36171*t36172;
            double t36177 = b2p*c*t36167;
            double t36178 = t36174+t36175+t36176+t36177;
            double t36179 = 1.0/t36178;
            double t36180 = t36173*t36179*(1.0/2.0);
            double t36181 = t36180+1.0;
            double t36182 = log(t36181);
            double t36183 = a1p*c*t36167;
            double t36184 = t36183+1.0;
            double t36185 = 1.0/pow(rho_a[index],8.0/3.0);
            double t36186 = gamma_aa[index]*gamma_aa[index];
            double t36187 = gcaa*gcaa;
            double t36188 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t36189 = gamma_aa[index]*gcaa*t36185;
            double t36190 = t36189+1.0;
            double t36191 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t36192 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t36193 = gamma_aa[index]*gcaa*t36185*2.0;
            double t36194 = t36191*t36186*t36187;
            double t36195 = t36193+t36194+1.0;
            double t36196 = pow(2.0,1.0/3.0);
            double t36197 = t36196*2.0;
            double t36198 = t36197-2.0;
            double t36199 = two_13*2.0;
            double t36200 = t36199-2.0;
            double t36201 = 1.0/t36200;
            double t36202 = a1f*c*t36167;
            double t36203 = t36202+1.0;
            double t36204 = 1.0/c0f;
            double t36205 = b1f*t36169;
            double t36206 = b3f*t36170;
            double t36207 = b4f*t36171*t36172;
            double t36208 = b2f*c*t36167;
            double t36209 = t36205+t36206+t36207+t36208;
            double t36210 = 1.0/t36209;
            double t36211 = t36210*t36204*(1.0/2.0);
            double t36212 = t36211+1.0;
            double t36213 = 1.0/pow(rho_a[index],4.0/3.0);
            double t36214 = 1.0/pow(rho_a[index],5.0/3.0);
            double t36215 = 1.0/sqrt(t36168);
            double t36216 = log(t36212);
            double t36217 = 1.0/t36181;
            double t36218 = 1.0/(t36178*t36178);
            double t36219 = b4p*t36214*t36171*(2.0/3.0);
            double t36220 = b2p*c*t36213*(1.0/3.0);
            double t36221 = b1p*c*t36213*t36215*(1.0/6.0);
            double t36222 = b3p*c*t36213*t36169*(1.0/2.0);
            double t36223 = t36220+t36221+t36222+t36219;
            double t36224 = t36223*t36217*t36218*t36184;
            double t36225 = 1.0/t36190;
            double t36226 = 1.0/t36195;
            double t36227 = gx*gx;
            double t36228 = gamma_aa[index]*gx*t36185;
            double t36229 = t36228+1.0;
            double t36230 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t36235 = gamma_aa[index]*gx*t36192*(1.6E1/3.0);
            double t36236 = t36227*t36186*t36188*(1.6E1/3.0);
            double t36231 = t36235+t36236;
            double t36232 = gamma_aa[index]*gx*t36185*2.0;
            double t36233 = t36191*t36227*t36186;
            double t36234 = t36232+t36233+1.0;
            double t36237 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t36238 = 1.0/(t36234*t36234);
            double t36239 = 1.0/t36229;
            double t36240 = 1.0/t36234;
            double t36241 = 1.0/(t36229*t36229);
            double t36242 = ccaa1*gamma_aa[index]*gcaa*t36225*t36185;
            double t36243 = ccaa2*t36226*t36191*t36186*t36187;
            double t36244 = ccaa0+t36242+t36243;
            double t36245 = 1.0/t36212;
            double t36246 = b4f*t36214*t36171*(2.0/3.0);
            double t36247 = b2f*c*t36213*(1.0/3.0);
            double t36248 = b1f*c*t36213*t36215*(1.0/6.0);
            double t36249 = b3f*c*t36213*t36169*(1.0/2.0);
            double t36250 = t36246+t36247+t36248+t36249;
            double t36251 = 1.0/(t36209*t36209);
            double t36252 = 1.0/pow(rho_a[index],7.0/3.0);
            double t36253 = 1.0/pow(t36168,3.0/2.0);
            double t36254 = t36250*t36250;
            double t36255 = t36223*t36223;
            double t36256 = 1.0/(t36178*t36178*t36178);
            double t36257 = t36217*t36255*t36184*t36256*2.0;
            double t36258 = b4p*t36171*t36185*(1.0E1/9.0);
            double t36259 = b2p*c*t36252*(4.0/9.0);
            double t36260 = b3p*t36215*t36171*t36185*(1.0/1.2E1);
            double t36261 = b1p*c*t36215*t36252*(2.0/9.0);
            double t36262 = b3p*c*t36252*t36169*(2.0/3.0);
            double t36263 = t36260+t36261+t36262+t36258+t36259-b1p*t36171*t36253*t36185*(1.0/3.6E1);
            double t36264 = 1.0/(t36181*t36181);
            double t36265 = 1.0/(t36178*t36178*t36178*t36178);
            double t36266 = a1p*c*c0p*t36252*t36182*(8.0/9.0);
            double t36267 = c0f*t36203*t36216*2.0;
            double t36268 = c0p*t36182*t36184*2.0;
            double t36269 = 1.0/pow(rho_a[index],1.0E1);
            double t36270 = 1.0/(t36190*t36190);
            double t36271 = gamma_aa[index]*gcaa*t36192*(1.6E1/3.0);
            double t36272 = t36186*t36187*t36188*(1.6E1/3.0);
            double t36273 = t36271+t36272;
            double t36274 = 1.0/(t36195*t36195);
            double t36275 = a1f*c*c0f*t36213*t36216*(2.0/3.0);
            double t36276 = a1p*c*c0p*t36213*t36182*(2.0/3.0);
            double t36277 = ccaa1*gamma_aa[index]*gcaa*t36225*t36192*(8.0/3.0);
            double t36278 = ccaa2*t36226*t36186*t36187*t36188*(1.6E1/3.0);
            double t36279 = t36277+t36278-ccaa1*t36270*t36186*t36187*t36188*(8.0/3.0)-ccaa2*t36191*t36273*t36274* \
               t36186*t36187;
            v_rho_a_rho_a_[index] = t36279*(t36268+t36201*t36198*(t36267-c0p*t36182*t36184*2.0))*2.0+t36244*(- \
               t36224+t36276+t36201*t36198*(t36224+t36275-t36203*t36250*t36251*t36245-a1p*c*c0p*t36213*t36182*(2.0/ \
               3.0)))*2.0+c0*t36172*(cx0+cx1*gamma_aa[index]*gx*t36185*t36239+cx2*t36240*t36191*t36227*t36186)*(4.0/ \
               9.0)-rho_a[index]*(t36268+t36201*t36198*(t36267-t36268))*(ccaa1*gamma_aa[index]*gcaa*t36225*t36237* \
               (8.8E1/9.0)-ccaa1*t36230*t36270*t36186*t36187*2.4E1+ccaa2*t36230*t36226*t36186*t36187*(3.04E2/9.0) \
               -ccaa2*t36273*t36274*t36186*t36187*t36188*(3.2E1/3.0)-ccaa2*t36191*t36274*t36186*t36187*(gamma_aa[index]* \
               gcaa*t36237*(1.76E2/9.0)+t36230*t36186*t36187*(3.04E2/9.0))+ccaa2*t36191*(t36273*t36273)*t36186*1.0/ \
               (t36195*t36195*t36195)*t36187*2.0+ccaa1*gamma_aa[index]*gcaa*1.0/(t36190*t36190*t36190)*t36186*t36187* \
               t36269*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t36237*t36239*(8.8E1/9.0) \
               -cx1*t36230*t36241*t36227*t36186*2.4E1+cx2*t36230*t36240*t36227*t36186*(3.04E2/9.0)-cx2*t36231*t36227* \
               t36238*t36186*t36188*(3.2E1/3.0)-cx2*t36191*t36227*t36238*t36186*(gamma_aa[index]*gx*t36237*(1.76E2/ \
               9.0)+t36230*t36227*t36186*(3.04E2/9.0))+cx2*(t36231*t36231)*1.0/(t36234*t36234*t36234)*t36191*t36227* \
               t36186*2.0+cx1*gamma_aa[index]*gx*t36227*1.0/(t36229*t36229*t36229)*t36186*t36269*(1.28E2/9.0))+rho_a[index]* \
               t36244*(-t36257-t36266+t36201*t36198*(t36257+t36266-t36217*t36218*t36263*t36184-t36203*1.0/(t36209* \
               t36209*t36209)*t36245*t36254*2.0+t36203*t36251*t36245*(b2f*c*t36252*(4.0/9.0)+b4f*t36171*t36185*(1.0E1/ \
               9.0)+b1f*c*t36215*t36252*(2.0/9.0)+b3f*c*t36252*t36169*(2.0/3.0)-b1f*t36171*t36253*t36185*(1.0/3.6E1) \
               +b3f*t36215*t36171*t36185*(1.0/1.2E1))+t36203*1.0/(t36212*t36212)*t36204*1.0/(t36209*t36209*t36209* \
               t36209)*t36254*(1.0/2.0)-a1f*c*c0f*t36216*t36252*(8.0/9.0)-t36173*t36255*t36264*t36184*t36265*(1.0/ \
               2.0)+a1f*c*t36213*t36250*t36251*t36245*(2.0/3.0)-a1p*c*t36213*t36223*t36217*t36218*(2.0/3.0))+t36217* \
               t36218*t36263*t36184+t36173*t36255*t36264*t36184*t36265*(1.0/2.0)+a1p*c*t36213*t36223*t36217*t36218* \
               (2.0/3.0))-rho_a[index]*t36279*(-t36224+t36276+t36201*t36198*(t36224+t36275-t36276-t36203*t36250*t36251* \
               t36245))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t36192*t36239*(8.0/3.0)-cx1*t36241* \
               t36227*t36186*t36188*(8.0/3.0)+cx2*t36240*t36227*t36186*t36188*(1.6E1/3.0)-cx2*t36231*t36191*t36227* \
               t36238*t36186)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t33944 = 1.0/pow(rho_a[index],1.0/3.0);
            double t33945 = c*t33944;
            double t33946 = sqrt(t33945);
            double t33947 = pow(t33945,3.0/2.0);
            double t33948 = c*c;
            double t33949 = 1.0/pow(rho_a[index],2.0/3.0);
            double t33950 = 1.0/c0p;
            double t33951 = b1p*t33946;
            double t33952 = b3p*t33947;
            double t33953 = b4p*t33948*t33949;
            double t33954 = b2p*c*t33944;
            double t33955 = t33951+t33952+t33953+t33954;
            double t33956 = 1.0/t33955;
            double t33957 = t33950*t33956*(1.0/2.0);
            double t33958 = t33957+1.0;
            double t33959 = log(t33958);
            double t33960 = a1p*c*t33944;
            double t33961 = t33960+1.0;
            double t33962 = pow(2.0,1.0/3.0);
            double t33963 = t33962*2.0;
            double t33964 = t33963-2.0;
            double t33965 = two_13*2.0;
            double t33966 = t33965-2.0;
            double t33967 = 1.0/t33966;
            double t33968 = 1.0/c0f;
            double t33969 = 1.0/pow(rho_b[index],1.0/3.0);
            double t33970 = c*t33969;
            double t33971 = sqrt(t33970);
            double t33972 = pow(t33970,3.0/2.0);
            double t33973 = 1.0/pow(rho_b[index],2.0/3.0);
            double t33974 = b1p*t33971;
            double t33975 = b3p*t33972;
            double t33976 = b4p*t33973*t33948;
            double t33977 = b2p*c*t33969;
            double t33978 = t33974+t33975+t33976+t33977;
            double t33979 = 1.0/t33978;
            double t33980 = t33950*t33979*(1.0/2.0);
            double t33981 = t33980+1.0;
            double t33982 = log(t33981);
            double t33983 = a1p*c*t33969;
            double t33984 = t33983+1.0;
            double t33985 = c0p*t33982*t33984*2.0;
            double t33986 = rho_a[index]+rho_b[index];
            double t33987 = 1.0/pow(t33986,1.0/3.0);
            double t33988 = c*t33987;
            double t33989 = sqrt(t33988);
            double t33990 = pow(t33988,3.0/2.0);
            double t33991 = 1.0/pow(t33986,2.0/3.0);
            double t33992 = b1p*t33989;
            double t33993 = b3p*t33990;
            double t33994 = b4p*t33991*t33948;
            double t33995 = b2p*c*t33987;
            double t33996 = t33992+t33993+t33994+t33995;
            double t33997 = 1.0/t33996;
            double t33998 = t33950*t33997*(1.0/2.0);
            double t33999 = t33998+1.0;
            double t34000 = log(t33999);
            double t34001 = a1p*c*t33987;
            double t34002 = t34001+1.0;
            double t34003 = c0p*t34000*t34002*2.0;
            double t34004 = rho_a[index]-rho_b[index];
            double t34005 = t34004*t34004;
            double t34006 = 1.0/t33986;
            double t34007 = t34004*t34006;
            double t34008 = 1.0/(t33986*t33986*t33986*t33986);
            double t34009 = t34005*t34005;
            double t34010 = t34007+1.0;
            double t34011 = pow(t34010,4.0/3.0);
            double t34012 = -t34007+1.0;
            double t34013 = pow(t34012,4.0/3.0);
            double t34014 = t34011+t34013-2.0;
            double t34015 = gcab*gcab;
            double t34016 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t34017 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t34018 = 1.0/pow(rho_a[index],8.0/3.0);
            double t34019 = gamma_aa[index]*t34018*(1.0/2.0);
            double t34020 = 1.0/pow(rho_b[index],8.0/3.0);
            double t34021 = gamma_bb[index]*t34020*(1.0/2.0);
            double t34022 = t34021+t34019;
            double t34023 = t34022*t34022;
            double t34024 = t34023*t34015;
            double t34025 = gcab*t34022*2.0;
            double t34026 = t34024+t34025+1.0;
            double t34027 = gamma_aa[index]*gcab*t34016*(8.0/3.0);
            double t34028 = gamma_aa[index]*t34022*t34015*t34016*(8.0/3.0);
            double t34029 = t34027+t34028;
            double t34030 = gamma_bb[index]*gcab*t34017*(8.0/3.0);
            double t34031 = gamma_bb[index]*t34022*t34015*t34017*(8.0/3.0);
            double t34032 = t34030+t34031;
            double t34033 = 1.0/(t34026*t34026);
            double t34034 = gcab*t34022;
            double t34035 = t34034+1.0;
            double t34036 = 1.0/(t34035*t34035);
            double t34037 = 1.0/t34026;
            double t34038 = 1.0/pow(t33986,4.0/3.0);
            double t34039 = b1f*t33989;
            double t34040 = b3f*t33990;
            double t34041 = b4f*t33991*t33948;
            double t34042 = b2f*c*t33987;
            double t34043 = t34040+t34041+t34042+t34039;
            double t34044 = 1.0/t34043;
            double t34045 = t33968*t34044*(1.0/2.0);
            double t34046 = t34045+1.0;
            double t34047 = log(t34046);
            double t34048 = a1f*c*t33987;
            double t34049 = t34048+1.0;
            double t34051 = c0f*t34047*t34049*2.0;
            double t34050 = t34003-t34051;
            double t34052 = 1.0/(t33986*t33986);
            double t34079 = t34004*t34052;
            double t34053 = t34006-t34079;
            double t34054 = 1.0/pow(t33986,5.0/3.0);
            double t34055 = 1.0/sqrt(t33988);
            double t34056 = 1.0/t33999;
            double t34057 = 1.0/(t33996*t33996);
            double t34058 = b4p*t33948*t34054*(2.0/3.0);
            double t34059 = b2p*c*t34038*(1.0/3.0);
            double t34060 = b1p*c*t34055*t34038*(1.0/6.0);
            double t34061 = b3p*c*t33989*t34038*(1.0/2.0);
            double t34062 = t34060+t34061+t34058+t34059;
            double t34063 = t34002*t34062*t34056*t34057;
            double t34064 = 1.0/d2fz0;
            double t34065 = 1.0/Aa;
            double t34066 = b1a*t33989;
            double t34067 = b3a*t33990;
            double t34068 = b4a*t33991*t33948;
            double t34069 = b2a*c*t33987;
            double t34070 = t34066+t34067+t34068+t34069;
            double t34071 = 1.0/t34070;
            double t34072 = t34071*t34065*(1.0/2.0);
            double t34073 = t34072+1.0;
            double t34074 = log(t34073);
            double t34075 = a1a*c*t33987;
            double t34076 = t34075+1.0;
            double t34077 = 1.0/(t33986*t33986*t33986*t33986*t33986);
            double t34078 = pow(t34010,1.0/3.0);
            double t34080 = t34053*t34078*(4.0/3.0);
            double t34081 = pow(t34012,1.0/3.0);
            double t34159 = t34053*t34081*(4.0/3.0);
            double t34082 = t34080-t34159;
            double t34083 = t34008*t34009;
            double t34084 = t34083-1.0;
            double t34085 = a1f*c*t33944;
            double t34086 = t34085+1.0;
            double t34087 = b1f*t33946;
            double t34088 = b3f*t33947;
            double t34089 = b4f*t33948*t33949;
            double t34090 = b2f*c*t33944;
            double t34091 = t34090+t34087+t34088+t34089;
            double t34092 = 1.0/t34091;
            double t34093 = t33968*t34092*(1.0/2.0);
            double t34094 = t34093+1.0;
            double t34095 = 1.0/pow(rho_a[index],4.0/3.0);
            double t34096 = 1.0/pow(rho_a[index],5.0/3.0);
            double t34097 = 1.0/sqrt(t33945);
            double t34098 = log(t34094);
            double t34099 = 1.0/t33958;
            double t34100 = 1.0/(t33955*t33955);
            double t34101 = b4p*t33948*t34096*(2.0/3.0);
            double t34102 = b2p*c*t34095*(1.0/3.0);
            double t34103 = b1p*c*t34095*t34097*(1.0/6.0);
            double t34104 = b3p*c*t33946*t34095*(1.0/2.0);
            double t34105 = t34101+t34102+t34103+t34104;
            double t34106 = t33961*t34100*t34105*t34099;
            double t34107 = c0f*t34086*t34098*2.0;
            double t34108 = c0p*t33961*t33959*2.0;
            double t34109 = Aa*t33967*t34014*t34064*t34074*t34084*t34076*2.0;
            double t34110 = 1.0/t34035;
            double t34111 = t33967*t34004*t34005*t34014*t34050*t34008*4.0;
            double t34112 = t34006+t34079;
            double t34113 = 1.0/t34046;
            double t34114 = 1.0/(t34043*t34043);
            double t34115 = b4f*t33948*t34054*(2.0/3.0);
            double t34116 = b2f*c*t34038*(1.0/3.0);
            double t34117 = b1f*c*t34055*t34038*(1.0/6.0);
            double t34118 = b3f*c*t33989*t34038*(1.0/2.0);
            double t34119 = t34115+t34116+t34117+t34118;
            double t34120 = a1f*c*c0f*t34038*t34047*(2.0/3.0);
            double t34121 = a1p*c*c0p*t34000*t34038*(2.0/3.0);
            double t34122 = t34009*t34077*4.0;
            double t34123 = t34112*t34081*(4.0/3.0);
            double t34158 = t34112*t34078*(4.0/3.0);
            double t34124 = t34123-t34158;
            double t34125 = 1.0/t34073;
            double t34126 = 1.0/(t34070*t34070);
            double t34127 = b4a*t33948*t34054*(2.0/3.0);
            double t34128 = b2a*c*t34038*(1.0/3.0);
            double t34129 = b1a*c*t34055*t34038*(1.0/6.0);
            double t34130 = b3a*c*t33989*t34038*(1.0/2.0);
            double t34131 = t34130+t34127+t34128+t34129;
            double t34132 = Aa*a1a*c*t33967*t34014*t34064*t34038*t34074*t34084*(2.0/3.0);
            double t34133 = a1f*c*t33969;
            double t34134 = t34133+1.0;
            double t34135 = b1f*t33971;
            double t34136 = b3f*t33972;
            double t34137 = b4f*t33973*t33948;
            double t34138 = b2f*c*t33969;
            double t34139 = t34135+t34136+t34137+t34138;
            double t34140 = 1.0/t34139;
            double t34141 = t33968*t34140*(1.0/2.0);
            double t34142 = t34141+1.0;
            double t34143 = 1.0/pow(rho_b[index],4.0/3.0);
            double t34144 = 1.0/pow(rho_b[index],5.0/3.0);
            double t34145 = 1.0/sqrt(t33970);
            double t34146 = log(t34142);
            double t34147 = 1.0/t33981;
            double t34148 = 1.0/(t33978*t33978);
            double t34149 = b4p*t33948*t34144*(2.0/3.0);
            double t34150 = b2p*c*t34143*(1.0/3.0);
            double t34151 = b1p*c*t34143*t34145*(1.0/6.0);
            double t34152 = b3p*c*t33971*t34143*(1.0/2.0);
            double t34153 = t34150+t34151+t34152+t34149;
            double t34154 = t33984*t34153*t34147*t34148;
            double t34155 = t33985-c0f*t34134*t34146*2.0;
            double t34156 = 1.0/pow(t33986,7.0/3.0);
            double t34157 = 1.0/pow(t33986,8.0/3.0);
            double t34175 = t34113*t34114*t34119*t34049;
            double t34160 = t34120-t34121+t34063-t34175;
            double t34161 = t34062*t34062;
            double t34162 = 1.0/pow(t33988,3.0/2.0);
            double t34163 = b4p*t33948*t34157*(1.0E1/9.0);
            double t34164 = b2p*c*t34156*(4.0/9.0);
            double t34165 = b1p*c*t34055*t34156*(2.0/9.0);
            double t34166 = b3p*c*t33989*t34156*(2.0/3.0);
            double t34167 = b3p*t33948*t34055*t34157*(1.0/1.2E1);
            double t34168 = t34163+t34164+t34165+t34166+t34167-b1p*t33948*t34162*t34157*(1.0/3.6E1);
            double t34169 = t34002*t34056*t34057*t34168;
            double t34170 = 1.0/(t33996*t33996*t33996);
            double t34171 = t34119*t34119;
            double t34172 = 1.0/(t33999*t33999);
            double t34173 = 1.0/(t33996*t33996*t33996*t33996);
            double t34174 = t33950*t34002*t34161*t34172*t34173*(1.0/2.0);
            double t34176 = 1.0/(t33986*t33986*t33986);
            double t34177 = a1p*c*t34062*t34038*t34056*t34057*(2.0/3.0);
            double t34178 = 1.0/(t33986*t33986*t33986*t33986*t33986*t33986);
            double t34179 = t34004*t34005*t34008*4.0;
            double t34180 = t34122+t34179;
            double t34181 = t34004*t34081*t34176*(8.0/3.0);
            double t34182 = 1.0/pow(t34010,2.0/3.0);
            double t34183 = t34112*t34053*t34182*(4.0/9.0);
            double t34184 = 1.0/pow(t34012,2.0/3.0);
            double t34185 = t34112*t34053*t34184*(4.0/9.0);
            double t34186 = t34181+t34183+t34185-t34004*t34176*t34078*(8.0/3.0);
            double t34187 = t34131*t34131;
            double t34188 = t34122-t34179;
            double t34189 = Aa*t33967*t34124*t34064*t34074*t34084*t34076*2.0;
            v_rho_a_rho_b_[index] = -(ccab1*gamma_bb[index]*gcab*t34110*t34017*(4.0/3.0)-ccab2*t34023*t34032* \
               t34015*t34033-ccab1*gamma_bb[index]*t34022*t34015*t34017*t34036*(4.0/3.0)+ccab2*gamma_bb[index]*t34022* \
               t34015*t34017*t34037*(8.0/3.0))*(-t34003+t34108-t34109+t33986*(t34111+t34121+t34132-t34063+t33967* \
               t34014*t34008*t34009*(t34120+t34063-t34113*t34114*t34119*t34049-a1p*c*c0p*t34000*t34038*(2.0/3.0)) \
               +t33967*t34050*t34008*t34009*t34082-t33967*t34014*t34050*t34009*t34077*4.0-Aa*t33967*t34064*t34082* \
               t34074*t34084*t34076*2.0+Aa*t33967*t34014*t34064*t34074*t34076*(t34122-t34004*t34005*t34008*4.0)*2.0- \
               t33967*t34014*t34131*t34125*t34126*t34064*t34084*t34076)-rho_a[index]*(-t34106+t33964*t33967*(t34106- \
               (1.0/(t34091*t34091)*t34086*(b2f*c*t34095*(1.0/3.0)+b4f*t33948*t34096*(2.0/3.0)+b1f*c*t34095*t34097* \
               (1.0/6.0)+b3f*c*t33946*t34095*(1.0/2.0)))/t34094+a1f*c*c0f*t34095*t34098*(2.0/3.0)-a1p*c*c0p*t33959* \
               t34095*(2.0/3.0))+a1p*c*c0p*t33959*t34095*(2.0/3.0))+t33964*t33967*(t34107-t34108)+t33967*t34014*t34050* \
               t34008*t34009)-(rho_b[index]*(t33985-t33964*t33967*t34155)+rho_a[index]*(t34108+t33964*t33967*(t34107- \
               c0p*t33961*t33959*2.0))-t33986*(t34003+t34109-t33967*t34014*t34050*t34008*t34009))*(ccab2*t34023*t34032* \
               t34015*1.0/(t34026*t34026*t34026)*t34029*-2.0+ccab1*gamma_aa[index]*gamma_bb[index]*t34015*t34016* \
               t34017*t34036*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t34015*t34016*t34017*t34037*(3.2E1/ \
               9.0)+ccab2*gamma_aa[index]*t34022*t34032*t34015*t34033*t34016*(8.0/3.0)+ccab2*gamma_bb[index]*t34022* \
               t34015*t34033*t34017*t34029*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t34023*(t34015*t34015) \
               *t34033*t34016*t34017*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t34022*t34015*t34016* \
               t34017*1.0/(t34035*t34035*t34035)*(3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t34110*t34016*(4.0/3.0) \
               -ccab2*t34023*t34015*t34033*t34029-ccab1*gamma_aa[index]*t34022*t34015*t34016*t34036*(4.0/3.0)+ccab2* \
               gamma_aa[index]*t34022*t34015*t34016*t34037*(8.0/3.0))*(-t33985+t34003+t34109+t33986*(t34111-t34121- \
               t34132+t34063+t34189-t33967*t34014*t34160*t34008*t34009-t33967*t34050*t34124*t34008*t34009+t33967* \
               t34014*t34050*t34009*t34077*4.0-Aa*t33967*t34014*t34180*t34064*t34074*t34076*2.0+t33967*t34014*t34131* \
               t34125*t34126*t34064*t34084*t34076)+rho_b[index]*(-t34154+t33964*t33967*(t34154-(t34134*1.0/(t34139* \
               t34139)*(b2f*c*t34143*(1.0/3.0)+b4f*t33948*t34144*(2.0/3.0)+b1f*c*t34143*t34145*(1.0/6.0)+b3f*c*t33971* \
               t34143*(1.0/2.0)))/t34142+a1f*c*c0f*t34143*t34146*(2.0/3.0)-a1p*c*c0p*t33982*t34143*(2.0/3.0))+a1p* \
               c*c0p*t33982*t34143*(2.0/3.0))+t33964*t33967*t34155-t33967*t34014*t34008*t34009*(t34003-t34051))+(ccab0+ \
               ccab1*gcab*t34110*t34022+ccab2*t34023*t34015*t34037)*(-t34189+t33986*(t34174+t34177+t34169-t34002* \
               t34161*t34170*t34056*2.0+t33967*t34008*t34009*t34082*(t34120-t34121+t34063-t34175)+t33967*t34008*t34009* \
               (t34123-t34158)*(t34120-t34121+t34063-t34175)-a1p*c*c0p*t34000*t34156*(8.0/9.0)-t33967*t34014*t34008* \
               t34009*(t34174+t34177+t34169-t34002*t34161*t34170*t34056*2.0+t34113*1.0/(t34043*t34043*t34043)*t34171* \
               t34049*2.0-t34113*t34114*t34049*(b2f*c*t34156*(4.0/9.0)+b4f*t33948*t34157*(1.0E1/9.0)+b1f*c*t34055* \
               t34156*(2.0/9.0)+b3f*c*t33989*t34156*(2.0/3.0)-b1f*t33948*t34162*t34157*(1.0/3.6E1)+b3f*t33948*t34055* \
               t34157*(1.0/1.2E1))-t33968*1.0/(t34043*t34043*t34043*t34043)*t34171*1.0/(t34046*t34046)*t34049*(1.0/ \
               2.0)+a1f*c*c0f*t34047*t34156*(8.0/9.0)-a1p*c*c0p*t34000*t34156*(8.0/9.0)-a1f*c*t34113*t34114*t34038* \
               t34119*(2.0/3.0))-t33967*t34005*t34014*t34050*t34008*1.2E1-t33967*t34014*t34160*t34009*t34077*8.0- \
               t33967*t34050*t34124*t34009*t34077*4.0-t33967*t34050*t34008*t34009*t34186-t33967*t34050*t34009*t34082* \
               t34077*4.0+t33967*t34014*t34009*t34178*(t34003-t34051)*2.0E1-t33967*t34004*t34005*t34050*t34008*t34082* \
               4.0+t33967*t34004*t34005*t34008*(t34003-t34051)*(t34123-t34158)*4.0+Aa*t33967*t34180*t34064*t34082* \
               t34074*t34076*2.0+Aa*t33967*t34064*t34074*t34084*t34076*t34186*2.0+Aa*t33967*t34064*t34074*t34076* \
               t34188*(t34123-t34158)*2.0+Aa*t33967*t34014*t34064*t34074*t34076*(t34005*t34008*1.2E1-t34009*t34178* \
               2.0E1)*2.0+t33967*t34014*t34131*t34125*t34126*t34180*t34064*t34076-t33967*t34131*t34124*t34125*t34126* \
               t34064*t34084*t34076+t33967*t34014*t34131*t34125*t34126*t34064*t34076*t34188-t33967*t34131*t34125* \
               t34126*t34064*t34082*t34084*t34076-t33967*t34014*1.0/(t34070*t34070*t34070)*t34125*t34064*t34084*t34076* \
               t34187*2.0+t33967*t34014*t34125*t34126*t34064*t34084*t34076*(b2a*c*t34156*(4.0/9.0)+b4a*t33948*t34157* \
               (1.0E1/9.0)+b1a*c*t34055*t34156*(2.0/9.0)+b3a*c*t33989*t34156*(2.0/3.0)-b1a*t33948*t34162*t34157*(1.0/ \
               3.6E1)+b3a*t33948*t34055*t34157*(1.0/1.2E1))-Aa*a1a*c*t33967*t34014*t34180*t34064*t34038*t34074*(2.0/ \
               3.0)-Aa*a1a*c*t33967*t34014*t34064*t34074*t34084*t34156*(8.0/9.0)-Aa*a1a*c*t33967*t34014*t34064*t34038* \
               t34074*t34188*(2.0/3.0)+Aa*a1a*c*t33967*t34064*t34082*t34038*t34074*t34084*(2.0/3.0)+t33967*t34014* \
               1.0/(t34070*t34070*t34070*t34070)*t34064*1.0/(t34073*t34073)*t34065*t34084*t34076*t34187*(1.0/2.0) \
               +Aa*a1a*c*t33967*t34064*t34038*t34074*t34084*(t34123-t34158)*(2.0/3.0)+a1a*c*t33967*t34014*t34131* \
               t34125*t34126*t34064*t34038*t34084*(2.0/3.0))-t34002*t34062*t34056*t34057*2.0+t33967*t34008*t34009* \
               (t34003-t34051)*(t34123-t34158)+t33967*t34014*t34008*t34009*(t34120-t34121+t34063-t34175)*2.0+a1p* \
               c*c0p*t34000*t34038*(4.0/3.0)-t33967*t34014*t34050*t34009*t34077*8.0+t33967*t34008*t34009*t34082*(t34003- \
               t34051)+Aa*t33967*t34014*t34180*t34064*t34074*t34076*2.0-Aa*t33967*t34064*t34082*t34074*t34084*t34076* \
               2.0+Aa*t33967*t34014*t34064*t34074*t34076*(t34122-t34179)*2.0-t33967*t34014*t34131*t34125*t34126*t34064* \
               t34084*t34076*2.0+Aa*a1a*c*t33967*t34014*t34064*t34038*t34074*t34084*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t34191 = 1.0/pow(rho_b[index],1.0/3.0);
            double t34192 = c*t34191;
            double t34193 = sqrt(t34192);
            double t34194 = pow(t34192,3.0/2.0);
            double t34195 = c*c;
            double t34196 = 1.0/pow(rho_b[index],2.0/3.0);
            double t34197 = 1.0/c0p;
            double t34198 = b1p*t34193;
            double t34199 = b3p*t34194;
            double t34200 = b4p*t34195*t34196;
            double t34201 = b2p*c*t34191;
            double t34202 = t34200+t34201+t34198+t34199;
            double t34203 = 1.0/t34202;
            double t34204 = t34203*t34197*(1.0/2.0);
            double t34205 = t34204+1.0;
            double t34206 = log(t34205);
            double t34207 = a1p*c*t34191;
            double t34208 = t34207+1.0;
            double t34209 = 1.0/pow(rho_b[index],8.0/3.0);
            double t34210 = gamma_bb[index]*gamma_bb[index];
            double t34211 = gcaa*gcaa;
            double t34212 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t34213 = gamma_bb[index]*gcaa*t34209;
            double t34214 = t34213+1.0;
            double t34215 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t34216 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t34217 = gamma_bb[index]*gcaa*t34209*2.0;
            double t34218 = t34210*t34211*t34215;
            double t34219 = t34217+t34218+1.0;
            double t34222 = 1.0/pow(rho_a[index],8.0/3.0);
            double t34223 = gamma_aa[index]*t34222*(1.0/2.0);
            double t34224 = gamma_bb[index]*t34209*(1.0/2.0);
            double t34220 = t34223+t34224;
            double t34221 = gcab*gcab;
            double t34225 = t34220*t34220;
            double t34226 = rho_a[index]+rho_b[index];
            double t34227 = 1.0/pow(t34226,1.0/3.0);
            double t34228 = c*t34227;
            double t34229 = sqrt(t34228);
            double t34230 = b1p*t34229;
            double t34231 = pow(t34228,3.0/2.0);
            double t34232 = b3p*t34231;
            double t34233 = 1.0/pow(t34226,2.0/3.0);
            double t34234 = b4p*t34233*t34195;
            double t34235 = b2p*c*t34227;
            double t34236 = t34230+t34232+t34234+t34235;
            double t34237 = 1.0/pow(t34226,7.0/3.0);
            double t34238 = 1.0/pow(t34226,8.0/3.0);
            double t34239 = 1.0/sqrt(t34228);
            double t34240 = a1p*c*t34227;
            double t34241 = t34240+1.0;
            double t34242 = 1.0/t34236;
            double t34243 = t34242*t34197*(1.0/2.0);
            double t34244 = t34243+1.0;
            double t34245 = 1.0/t34244;
            double t34246 = 1.0/pow(t34226,4.0/3.0);
            double t34286 = 1.0/pow(t34226,5.0/3.0);
            double t34288 = b4p*t34195*t34286*(2.0/3.0);
            double t34289 = b2p*c*t34246*(1.0/3.0);
            double t34290 = b1p*c*t34246*t34239*(1.0/6.0);
            double t34291 = b3p*c*t34246*t34229*(1.0/2.0);
            double t34247 = t34290+t34291+t34288+t34289;
            double t34248 = two_13*2.0;
            double t34249 = t34248-2.0;
            double t34250 = 1.0/t34249;
            double t34251 = 1.0/c0f;
            double t34252 = rho_a[index]-rho_b[index];
            double t34253 = 1.0/t34226;
            double t34254 = t34252*t34253;
            double t34255 = b1f*t34229;
            double t34256 = b3f*t34231;
            double t34257 = b4f*t34233*t34195;
            double t34258 = b2f*c*t34227;
            double t34259 = t34255+t34256+t34257+t34258;
            double t34260 = 1.0/t34259;
            double t34261 = t34251*t34260*(1.0/2.0);
            double t34262 = t34261+1.0;
            double t34263 = log(t34262);
            double t34264 = a1f*c*t34227;
            double t34265 = t34264+1.0;
            double t34266 = log(t34244);
            double t34274 = c0f*t34263*t34265*2.0;
            double t34275 = c0p*t34241*t34266*2.0;
            double t34267 = t34274-t34275;
            double t34268 = t34252*t34252;
            double t34269 = t34254+1.0;
            double t34270 = pow(t34269,4.0/3.0);
            double t34271 = -t34254+1.0;
            double t34272 = pow(t34271,4.0/3.0);
            double t34273 = t34270+t34272-2.0;
            double t34276 = 1.0/(t34226*t34226);
            double t34277 = t34252*t34276;
            double t34278 = t34253+t34277;
            double t34279 = 1.0/(t34226*t34226*t34226*t34226);
            double t34280 = pow(t34269,1.0/3.0);
            double t34281 = t34280*t34278*(4.0/3.0);
            double t34282 = pow(t34271,1.0/3.0);
            double t34314 = t34282*t34278*(4.0/3.0);
            double t34283 = -t34314+t34281;
            double t34284 = 1.0/(t34226*t34226*t34226*t34226*t34226);
            double t34285 = t34268*t34268;
            double t34287 = 1.0/(t34236*t34236);
            double t34292 = 1.0/t34262;
            double t34293 = 1.0/(t34259*t34259);
            double t34294 = b4f*t34195*t34286*(2.0/3.0);
            double t34295 = b2f*c*t34246*(1.0/3.0);
            double t34296 = b1f*c*t34246*t34239*(1.0/6.0);
            double t34297 = b3f*c*t34246*t34229*(1.0/2.0);
            double t34298 = t34294+t34295+t34296+t34297;
            double t34299 = t34241*t34245*t34247*t34287;
            double t34300 = a1f*c*c0f*t34263*t34246*(2.0/3.0);
            double t34301 = t34247*t34247;
            double t34302 = 1.0/pow(t34228,3.0/2.0);
            double t34303 = b4p*t34238*t34195*(1.0E1/9.0);
            double t34304 = b2p*c*t34237*(4.0/9.0);
            double t34305 = b1p*c*t34237*t34239*(2.0/9.0);
            double t34306 = b3p*c*t34237*t34229*(2.0/3.0);
            double t34307 = b3p*t34238*t34239*t34195*(1.0/1.2E1);
            double t34308 = t34303+t34304+t34305+t34306+t34307-b1p*t34302*t34238*t34195*(1.0/3.6E1);
            double t34309 = 1.0/(t34236*t34236*t34236);
            double t34310 = t34301*t34241*t34245*t34309*2.0;
            double t34311 = t34298*t34298;
            double t34312 = 1.0/(t34244*t34244);
            double t34313 = 1.0/(t34236*t34236*t34236*t34236);
            double t34315 = t34276*2.0;
            double t34316 = 1.0/(t34226*t34226*t34226);
            double t34317 = t34252*t34316*2.0;
            double t34318 = t34315+t34317;
            double t34319 = t34278*t34278;
            double t34320 = a1p*c*c0p*t34237*t34266*(8.0/9.0);
            double t34321 = 1.0/(t34226*t34226*t34226*t34226*t34226*t34226);
            double t34322 = 1.0/d2fz0;
            double t34323 = 1.0/Aa;
            double t34324 = b1a*t34229;
            double t34325 = b3a*t34231;
            double t34326 = b4a*t34233*t34195;
            double t34327 = b2a*c*t34227;
            double t34328 = t34324+t34325+t34326+t34327;
            double t34329 = 1.0/t34328;
            double t34330 = t34323*t34329*(1.0/2.0);
            double t34331 = t34330+1.0;
            double t34332 = log(t34331);
            double t34333 = a1a*c*t34227;
            double t34334 = t34333+1.0;
            double t34335 = t34280*t34318*(4.0/3.0);
            double t34336 = 1.0/pow(t34269,2.0/3.0);
            double t34337 = t34336*t34319*(4.0/9.0);
            double t34338 = 1.0/pow(t34271,2.0/3.0);
            double t34339 = t34319*t34338*(4.0/9.0);
            double t34340 = t34335+t34337+t34339-t34282*t34318*(4.0/3.0);
            double t34341 = t34252*t34268*t34279*4.0;
            double t34342 = t34284*t34285*4.0;
            double t34343 = t34341+t34342;
            double t34344 = 1.0/t34331;
            double t34345 = t34285*t34279;
            double t34346 = t34345-1.0;
            double t34347 = 1.0/(t34328*t34328);
            double t34348 = b4a*t34195*t34286*(2.0/3.0);
            double t34349 = b2a*c*t34246*(1.0/3.0);
            double t34350 = b1a*c*t34246*t34239*(1.0/6.0);
            double t34351 = b3a*c*t34246*t34229*(1.0/2.0);
            double t34352 = t34350+t34351+t34348+t34349;
            double t34353 = t34352*t34352;
            double t34355 = t34265*t34292*t34293*t34298;
            double t34356 = a1p*c*c0p*t34246*t34266*(2.0/3.0);
            double t34354 = t34300-t34355-t34356+t34299;
            double t34357 = pow(2.0,1.0/3.0);
            double t34358 = t34357*2.0;
            double t34359 = t34358-2.0;
            double t34360 = a1f*c*t34191;
            double t34361 = t34360+1.0;
            double t34362 = b1f*t34193;
            double t34363 = b3f*t34194;
            double t34364 = b4f*t34195*t34196;
            double t34365 = b2f*c*t34191;
            double t34366 = t34362+t34363+t34364+t34365;
            double t34367 = 1.0/t34366;
            double t34368 = t34251*t34367*(1.0/2.0);
            double t34369 = t34368+1.0;
            double t34370 = 1.0/pow(rho_b[index],4.0/3.0);
            double t34372 = 1.0/pow(rho_b[index],5.0/3.0);
            double t34373 = 1.0/sqrt(t34192);
            double t34379 = b4f*t34372*t34195*(2.0/3.0);
            double t34380 = b2f*c*t34370*(1.0/3.0);
            double t34381 = b1f*c*t34370*t34373*(1.0/6.0);
            double t34382 = b3f*c*t34370*t34193*(1.0/2.0);
            double t34371 = t34380+t34381+t34382+t34379;
            double t34384 = b4p*t34372*t34195*(2.0/3.0);
            double t34385 = b2p*c*t34370*(1.0/3.0);
            double t34386 = b1p*c*t34370*t34373*(1.0/6.0);
            double t34387 = b3p*c*t34370*t34193*(1.0/2.0);
            double t34374 = t34384+t34385+t34386+t34387;
            double t34375 = 1.0/t34369;
            double t34376 = 1.0/pow(rho_b[index],7.0/3.0);
            double t34377 = 1.0/t34205;
            double t34378 = 1.0/pow(t34192,3.0/2.0);
            double t34383 = t34371*t34371;
            double t34388 = t34374*t34374;
            double t34389 = log(t34369);
            double t34390 = 1.0/(t34366*t34366);
            double t34391 = 1.0/(t34202*t34202);
            double t34392 = 1.0/(t34202*t34202*t34202);
            double t34393 = t34208*t34392*t34377*t34388*2.0;
            double t34394 = b4p*t34209*t34195*(1.0E1/9.0);
            double t34395 = b2p*c*t34376*(4.0/9.0);
            double t34396 = b3p*t34209*t34373*t34195*(1.0/1.2E1);
            double t34397 = b1p*c*t34373*t34376*(2.0/9.0);
            double t34398 = b3p*c*t34193*t34376*(2.0/3.0);
            double t34471 = b1p*t34209*t34195*t34378*(1.0/3.6E1);
            double t34399 = -t34471+t34394+t34395+t34396+t34397+t34398;
            double t34400 = 1.0/(t34205*t34205);
            double t34401 = 1.0/(t34202*t34202*t34202*t34202);
            double t34402 = a1p*c*c0p*t34206*t34376*(8.0/9.0);
            double t34403 = gcab*t34220;
            double t34404 = t34403+1.0;
            double t34405 = 1.0/t34404;
            double t34406 = t34221*t34225;
            double t34407 = gcab*t34220*2.0;
            double t34408 = t34406+t34407+1.0;
            double t34409 = 1.0/t34408;
            double t34410 = t34361*t34371*t34390*t34375;
            double t34411 = a1p*c*c0p*t34206*t34370*(2.0/3.0);
            double t34413 = t34208*t34391*t34374*t34377;
            double t34416 = a1f*c*c0f*t34370*t34389*(2.0/3.0);
            double t34412 = t34410+t34411-t34413-t34416;
            double t34414 = c0f*t34361*t34389*2.0;
            double t34415 = c0p*t34206*t34208*2.0;
            double t34417 = t34250*t34412*t34359;
            double t34418 = -t34411+t34413+t34417;
            double t34419 = 1.0/t34214;
            double t34420 = 1.0/t34219;
            double t34421 = 1.0/pow(rho_a[index],1.0/3.0);
            double t34422 = c*t34421;
            double t34423 = sqrt(t34422);
            double t34424 = pow(t34422,3.0/2.0);
            double t34425 = 1.0/pow(rho_a[index],2.0/3.0);
            double t34426 = b1p*t34423;
            double t34427 = b3p*t34424;
            double t34428 = b4p*t34425*t34195;
            double t34429 = b2p*c*t34421;
            double t34430 = t34426+t34427+t34428+t34429;
            double t34431 = 1.0/t34430;
            double t34432 = t34431*t34197*(1.0/2.0);
            double t34433 = t34432+1.0;
            double t34434 = log(t34433);
            double t34435 = a1p*c*t34421;
            double t34436 = t34435+1.0;
            double t34437 = c0p*t34434*t34436*2.0;
            double t34438 = t34414-t34415;
            double t34439 = t34250*t34438*t34359;
            double t34440 = 1.0/(t34404*t34404);
            double t34441 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t34442 = gamma_bb[index]*gcab*t34216*(8.0/3.0);
            double t34443 = gamma_bb[index]*t34220*t34221*t34216*(8.0/3.0);
            double t34444 = t34442+t34443;
            double t34445 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t34446 = 1.0/(t34408*t34408);
            double t34447 = gx*gx;
            double t34448 = gamma_bb[index]*gx*t34209;
            double t34449 = t34448+1.0;
            double t34454 = gamma_bb[index]*gx*t34216*(1.6E1/3.0);
            double t34455 = t34210*t34212*t34447*(1.6E1/3.0);
            double t34450 = t34454+t34455;
            double t34451 = gamma_bb[index]*gx*t34209*2.0;
            double t34452 = t34210*t34215*t34447;
            double t34453 = t34451+t34452+1.0;
            double t34456 = 1.0/(t34453*t34453);
            double t34457 = 1.0/t34449;
            double t34458 = 1.0/t34453;
            double t34459 = 1.0/(t34449*t34449);
            double t34460 = ccaa1*gamma_bb[index]*gcaa*t34209*t34419;
            double t34461 = ccaa2*t34210*t34211*t34420*t34215;
            double t34462 = ccaa0+t34460+t34461;
            double t34463 = 1.0/(t34366*t34366*t34366);
            double t34464 = b4f*t34209*t34195*(1.0E1/9.0);
            double t34465 = b2f*c*t34376*(4.0/9.0);
            double t34466 = b3f*t34209*t34373*t34195*(1.0/1.2E1);
            double t34467 = b1f*c*t34373*t34376*(2.0/9.0);
            double t34468 = b3f*c*t34193*t34376*(2.0/3.0);
            double t34469 = t34464+t34465+t34466+t34467+t34468-b1f*t34209*t34195*t34378*(1.0/3.6E1);
            double t34470 = t34361*t34390*t34375*t34469;
            double t34472 = t34208*t34391*t34377*t34399;
            double t34473 = 1.0/(t34369*t34369);
            double t34474 = 1.0/(t34366*t34366*t34366*t34366);
            double t34475 = t34251*t34361*t34383*t34473*t34474*(1.0/2.0);
            double t34476 = t34400*t34401*t34208*t34197*t34388*(1.0/2.0);
            double t34477 = a1f*c*t34370*t34371*t34390*t34375*(2.0/3.0);
            double t34478 = a1p*c*t34370*t34391*t34374*t34377*(2.0/3.0);
            double t34479 = t34415+t34439;
            double t34480 = 1.0/pow(rho_b[index],1.0E1);
            double t34481 = 1.0/(t34214*t34214);
            double t34482 = gamma_bb[index]*gcaa*t34216*(1.6E1/3.0);
            double t34483 = t34210*t34211*t34212*(1.6E1/3.0);
            double t34484 = t34482+t34483;
            double t34485 = 1.0/(t34219*t34219);
            double t34486 = ccaa1*gamma_bb[index]*gcaa*t34216*t34419*(8.0/3.0);
            double t34487 = ccaa2*t34210*t34211*t34212*t34420*(1.6E1/3.0);
            double t34488 = t34486+t34487-ccaa1*t34210*t34211*t34212*t34481*(8.0/3.0)-ccaa2*t34210*t34211*t34215* \
               t34484*t34485;
            v_rho_b_rho_b_[index] = t34462*t34418*-2.0+(ccab0+ccab1*gcab*t34220*t34405+ccab2*t34221*t34225*t34409) \
               *(-rho_b[index]*(-t34402+t34472-t34393+t34476+t34478+t34250*t34359*(t34402+t34470+t34393+t34475+t34477- \
               t34361*t34463*t34383*t34375*2.0-t34208*t34391*t34377*t34399-a1f*c*c0f*t34376*t34389*(8.0/9.0)-t34400* \
               t34401*t34208*t34197*t34388*(1.0/2.0)-a1p*c*t34370*t34391*t34374*t34377*(2.0/3.0)))-t34226*(t34310+ \
               t34320-t34241*t34245*t34308*t34287-t34250*t34273*t34285*t34279*(t34310+t34320-t34241*t34245*t34308* \
               t34287-t34311*t34265*t34292*1.0/(t34259*t34259*t34259)*2.0+t34265*t34292*t34293*(b2f*c*t34237*(4.0/ \
               9.0)+b4f*t34238*t34195*(1.0E1/9.0)+b1f*c*t34237*t34239*(2.0/9.0)+b3f*c*t34237*t34229*(2.0/3.0)-b1f* \
               t34302*t34238*t34195*(1.0/3.6E1)+b3f*t34238*t34239*t34195*(1.0/1.2E1))+t34311*t34251*1.0/(t34262*t34262) \
               *t34265*1.0/(t34259*t34259*t34259*t34259)*(1.0/2.0)-a1f*c*c0f*t34263*t34237*(8.0/9.0)-t34301*t34312* \
               t34241*t34313*t34197*(1.0/2.0)+a1f*c*t34246*t34292*t34293*t34298*(2.0/3.0)-a1p*c*t34245*t34246*t34247* \
               t34287*(2.0/3.0))-t34301*t34312*t34241*t34313*t34197*(1.0/2.0)+t34321*t34250*t34273*t34267*t34285* \
               2.0E1+t34250*t34273*t34354*t34284*t34285*8.0+t34250*t34340*t34267*t34285*t34279+t34250*t34283*t34284* \
               t34267*t34285*8.0+t34250*t34354*t34283*t34285*t34279*2.0+t34250*t34273*t34267*t34268*t34279*1.2E1+ \
               t34250*t34252*t34273*t34284*t34267*t34268*3.2E1+t34250*t34252*t34273*t34354*t34268*t34279*8.0+t34250* \
               t34252*t34283*t34267*t34268*t34279*8.0-a1p*c*t34245*t34246*t34247*t34287*(2.0/3.0)+Aa*t34250*t34322* \
               t34340*t34332*t34334*t34346*2.0+Aa*t34250*t34322*t34332*t34334*t34343*t34283*4.0+Aa*t34250*t34322* \
               t34332*t34334*t34273*(t34321*t34285*2.0E1+t34268*t34279*1.2E1+t34252*t34284*t34268*3.2E1)*2.0-t34250* \
               t34322*t34334*t34343*t34352*t34344*t34273*t34347*2.0-t34250*t34322*t34334*t34352*t34344*t34283*t34346* \
               t34347*2.0+t34250*t34322*t34334*t34344*t34353*t34273*1.0/(t34328*t34328*t34328)*t34346*2.0-t34250* \
               t34322*t34334*t34344*t34273*t34346*t34347*(b2a*c*t34237*(4.0/9.0)+b4a*t34238*t34195*(1.0E1/9.0)+b1a* \
               c*t34237*t34239*(2.0/9.0)+b3a*c*t34237*t34229*(2.0/3.0)-b1a*t34302*t34238*t34195*(1.0/3.6E1)+b3a*t34238* \
               t34239*t34195*(1.0/1.2E1))+Aa*a1a*c*t34250*t34322*t34332*t34343*t34246*t34273*(4.0/3.0)+Aa*a1a*c*t34250* \
               t34322*t34332*t34237*t34273*t34346*(8.0/9.0)+Aa*a1a*c*t34250*t34322*t34332*t34246*t34283*t34346*(4.0/ \
               3.0)-t34250*t34322*1.0/(t34331*t34331)*t34323*t34334*t34353*t34273*1.0/(t34328*t34328*t34328*t34328) \
               *t34346*(1.0/2.0)-a1a*c*t34250*t34322*t34352*t34344*t34246*t34273*t34346*t34347*(2.0/3.0))+t34250* \
               t34412*t34359*2.0-t34241*t34245*t34247*t34287*2.0+t34208*t34391*t34374*t34377*2.0+t34250*t34273*t34285* \
               t34279*(t34300-t34355-t34356+t34299)*2.0-a1p*c*c0p*t34206*t34370*(4.0/3.0)+a1p*c*c0p*t34246*t34266* \
               (4.0/3.0)+t34250*t34273*t34284*t34267*t34285*8.0+t34250*t34283*t34267*t34285*t34279*2.0+t34250*t34252* \
               t34273*t34267*t34268*t34279*8.0+Aa*t34250*t34322*t34332*t34334*t34343*t34273*4.0+Aa*t34250*t34322* \
               t34332*t34334*t34283*t34346*4.0-t34250*t34322*t34334*t34352*t34344*t34273*t34346*t34347*2.0+Aa*a1a* \
               c*t34250*t34322*t34332*t34246*t34273*t34346*(4.0/3.0))+t34488*(t34415+t34250*t34359*(t34414-c0p*t34206* \
               t34208*2.0))*2.0-(ccab1*gamma_bb[index]*gcab*t34216*t34405*(4.0/3.0)-ccab2*t34221*t34225*t34444*t34446- \
               ccab1*gamma_bb[index]*t34220*t34221*t34440*t34216*(4.0/3.0)+ccab2*gamma_bb[index]*t34220*t34221*t34216* \
               t34409*(8.0/3.0))*(t34415-t34275+t34439+rho_b[index]*t34418+t34226*(t34356-t34299+t34250*t34273*t34284* \
               t34267*t34285*4.0+t34250*t34273*t34354*t34285*t34279+t34250*t34283*t34267*t34285*t34279+t34250*t34252* \
               t34273*t34267*t34268*t34279*4.0+Aa*t34250*t34322*t34332*t34334*t34343*t34273*2.0+Aa*t34250*t34322* \
               t34332*t34334*t34283*t34346*2.0-t34250*t34322*t34334*t34352*t34344*t34273*t34346*t34347+Aa*a1a*c*t34250* \
               t34322*t34332*t34246*t34273*t34346*(2.0/3.0))-t34250*t34273*t34267*t34285*t34279-Aa*t34250*t34322* \
               t34332*t34334*t34273*t34346*2.0)*2.0+(rho_b[index]*t34479+rho_a[index]*(t34437-t34250*t34359*(t34437- \
               c0f*log((t34251*(1.0/2.0))/(b1f*t34423+b3f*t34424+b2f*c*t34421+b4f*t34425*t34195)+1.0)*(a1f*c*t34421+ \
               1.0)*2.0))-t34226*(t34275+t34250*t34273*t34267*t34285*t34279+Aa*t34250*t34322*t34332*t34334*t34273* \
               t34346*2.0))*(-ccab2*t34221*t34225*t34446*(gamma_bb[index]*gcab*t34445*(8.8E1/9.0)+t34210*t34221*t34441* \
               (3.2E1/9.0)+gamma_bb[index]*t34220*t34221*t34445*(8.8E1/9.0))+ccab2*t34221*t34225*1.0/(t34408*t34408* \
               t34408)*(t34444*t34444)*2.0+ccab1*gamma_bb[index]*gcab*t34405*t34445*(4.4E1/9.0)-ccab1*t34210*t34221* \
               t34440*t34441*(3.2E1/9.0)+ccab2*t34210*t34221*t34441*t34409*(3.2E1/9.0)-ccab1*gamma_bb[index]*t34220* \
               t34221*t34440*t34445*(4.4E1/9.0)+ccab2*gamma_bb[index]*t34220*t34221*t34409*t34445*(8.8E1/9.0)-ccab2* \
               gamma_bb[index]*t34220*t34221*t34216*t34444*t34446*(1.6E1/3.0)+ccab1*gcab*t34210*t34220*t34221*1.0/ \
               (t34404*t34404*t34404)*t34441*(3.2E1/9.0))+c0*t34196*(cx0+cx1*gamma_bb[index]*gx*t34209*t34457+cx2* \
               t34210*t34215*t34447*t34458)*(4.0/9.0)-rho_b[index]*t34479*(ccaa1*gamma_bb[index]*gcaa*t34445*t34419* \
               (8.8E1/9.0)+ccaa2*t34210*t34211*t34420*t34441*(3.04E2/9.0)-ccaa1*t34210*t34211*t34441*t34481*2.4E1- \
               ccaa2*t34210*t34211*t34212*t34484*t34485*(3.2E1/3.0)-ccaa2*t34210*t34211*t34215*t34485*(gamma_bb[index]* \
               gcaa*t34445*(1.76E2/9.0)+t34210*t34211*t34441*(3.04E2/9.0))+ccaa2*t34210*t34211*t34215*1.0/(t34219* \
               t34219*t34219)*(t34484*t34484)*2.0+ccaa1*gamma_bb[index]*gcaa*t34210*t34211*1.0/(t34214*t34214*t34214) \
               *t34480*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t34445*t34457*(8.8E1/9.0) \
               -cx1*t34210*t34441*t34447*t34459*2.4E1+cx2*t34210*t34441*t34447*t34458*(3.04E2/9.0)-cx2*t34210*t34212* \
               t34450*t34447*t34456*(3.2E1/3.0)-cx2*t34210*t34215*t34447*t34456*(gamma_bb[index]*gx*t34445*(1.76E2/ \
               9.0)+t34210*t34441*t34447*(3.04E2/9.0))+cx2*t34210*t34215*(t34450*t34450)*1.0/(t34453*t34453*t34453) \
               *t34447*2.0+cx1*gamma_bb[index]*gx*t34210*t34480*t34447*1.0/(t34449*t34449*t34449)*(1.28E2/9.0))-c0* \
               pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t34216*t34457*(8.0/3.0)-cx1*t34210*t34212*t34447* \
               t34459*(8.0/3.0)+cx2*t34210*t34212*t34447*t34458*(1.6E1/3.0)-cx2*t34210*t34215*t34450*t34447*t34456) \
               *(8.0/3.0)+rho_b[index]*t34462*(-t34402+t34472-t34393+t34476+t34478+t34250*t34359*(t34402+t34470-t34472+ \
               t34393+t34475-t34476+t34477-t34478-t34361*t34463*t34383*t34375*2.0-a1f*c*c0f*t34376*t34389*(8.0/9.0) \
               ))+rho_b[index]*t34418*t34488*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t35758 = 1.0/pow(rho_b[index],1.0/3.0);
            double t35759 = c*t35758;
            double t35760 = sqrt(t35759);
            double t35761 = pow(t35759,3.0/2.0);
            double t35762 = c*c;
            double t35763 = 1.0/pow(rho_b[index],2.0/3.0);
            double t35764 = 1.0/c0p;
            double t35765 = b1p*t35760;
            double t35766 = b3p*t35761;
            double t35767 = b4p*t35762*t35763;
            double t35768 = b2p*c*t35758;
            double t35769 = t35765+t35766+t35767+t35768;
            double t35770 = 1.0/t35769;
            double t35771 = t35770*t35764*(1.0/2.0);
            double t35772 = t35771+1.0;
            double t35773 = log(t35772);
            double t35774 = a1p*c*t35758;
            double t35775 = t35774+1.0;
            double t35776 = 1.0/pow(rho_b[index],8.0/3.0);
            double t35777 = gamma_bb[index]*gamma_bb[index];
            double t35778 = gcaa*gcaa;
            double t35779 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t35780 = gamma_bb[index]*gcaa*t35776;
            double t35781 = t35780+1.0;
            double t35782 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t35783 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t35784 = gamma_bb[index]*gcaa*t35776*2.0;
            double t35785 = t35782*t35777*t35778;
            double t35786 = t35784+t35785+1.0;
            double t35787 = pow(2.0,1.0/3.0);
            double t35788 = t35787*2.0;
            double t35789 = t35788-2.0;
            double t35790 = two_13*2.0;
            double t35791 = t35790-2.0;
            double t35792 = 1.0/t35791;
            double t35793 = a1f*c*t35758;
            double t35794 = t35793+1.0;
            double t35795 = 1.0/c0f;
            double t35796 = b1f*t35760;
            double t35797 = b3f*t35761;
            double t35798 = b4f*t35762*t35763;
            double t35799 = b2f*c*t35758;
            double t35800 = t35796+t35797+t35798+t35799;
            double t35801 = 1.0/t35800;
            double t35802 = t35801*t35795*(1.0/2.0);
            double t35803 = t35802+1.0;
            double t35804 = 1.0/pow(rho_b[index],4.0/3.0);
            double t35805 = 1.0/pow(rho_b[index],5.0/3.0);
            double t35806 = 1.0/sqrt(t35759);
            double t35807 = log(t35803);
            double t35808 = 1.0/t35772;
            double t35809 = 1.0/(t35769*t35769);
            double t35810 = b4p*t35805*t35762*(2.0/3.0);
            double t35811 = b2p*c*t35804*(1.0/3.0);
            double t35812 = b1p*c*t35804*t35806*(1.0/6.0);
            double t35813 = b3p*c*t35804*t35760*(1.0/2.0);
            double t35814 = t35810+t35811+t35812+t35813;
            double t35815 = t35814*t35808*t35809*t35775;
            double t35816 = 1.0/t35781;
            double t35817 = 1.0/t35786;
            double t35818 = gx*gx;
            double t35819 = gamma_bb[index]*gx*t35776;
            double t35820 = t35819+1.0;
            double t35821 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t35826 = gamma_bb[index]*gx*t35783*(1.6E1/3.0);
            double t35827 = t35818*t35777*t35779*(1.6E1/3.0);
            double t35822 = t35826+t35827;
            double t35823 = gamma_bb[index]*gx*t35776*2.0;
            double t35824 = t35782*t35818*t35777;
            double t35825 = t35823+t35824+1.0;
            double t35828 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t35829 = 1.0/(t35825*t35825);
            double t35830 = 1.0/t35820;
            double t35831 = 1.0/t35825;
            double t35832 = 1.0/(t35820*t35820);
            double t35833 = ccaa1*gamma_bb[index]*gcaa*t35816*t35776;
            double t35834 = ccaa2*t35817*t35782*t35777*t35778;
            double t35835 = ccaa0+t35833+t35834;
            double t35836 = 1.0/t35803;
            double t35837 = b4f*t35805*t35762*(2.0/3.0);
            double t35838 = b2f*c*t35804*(1.0/3.0);
            double t35839 = b1f*c*t35804*t35806*(1.0/6.0);
            double t35840 = b3f*c*t35804*t35760*(1.0/2.0);
            double t35841 = t35840+t35837+t35838+t35839;
            double t35842 = 1.0/(t35800*t35800);
            double t35843 = 1.0/pow(rho_b[index],7.0/3.0);
            double t35844 = 1.0/pow(t35759,3.0/2.0);
            double t35845 = t35841*t35841;
            double t35846 = t35814*t35814;
            double t35847 = 1.0/(t35769*t35769*t35769);
            double t35848 = t35808*t35846*t35775*t35847*2.0;
            double t35849 = b4p*t35762*t35776*(1.0E1/9.0);
            double t35850 = b2p*c*t35843*(4.0/9.0);
            double t35851 = b3p*t35806*t35762*t35776*(1.0/1.2E1);
            double t35852 = b1p*c*t35806*t35843*(2.0/9.0);
            double t35853 = b3p*c*t35760*t35843*(2.0/3.0);
            double t35854 = t35850+t35851+t35852+t35853+t35849-b1p*t35762*t35844*t35776*(1.0/3.6E1);
            double t35855 = 1.0/(t35772*t35772);
            double t35856 = 1.0/(t35769*t35769*t35769*t35769);
            double t35857 = a1p*c*c0p*t35843*t35773*(8.0/9.0);
            double t35858 = c0f*t35807*t35794*2.0;
            double t35859 = c0p*t35773*t35775*2.0;
            double t35860 = 1.0/pow(rho_b[index],1.0E1);
            double t35861 = 1.0/(t35781*t35781);
            double t35862 = gamma_bb[index]*gcaa*t35783*(1.6E1/3.0);
            double t35863 = t35777*t35778*t35779*(1.6E1/3.0);
            double t35864 = t35862+t35863;
            double t35865 = 1.0/(t35786*t35786);
            double t35866 = a1f*c*c0f*t35804*t35807*(2.0/3.0);
            double t35867 = a1p*c*c0p*t35804*t35773*(2.0/3.0);
            double t35868 = ccaa1*gamma_bb[index]*gcaa*t35816*t35783*(8.0/3.0);
            double t35869 = ccaa2*t35817*t35777*t35778*t35779*(1.6E1/3.0);
            double t35870 = t35868+t35869-ccaa1*t35861*t35777*t35778*t35779*(8.0/3.0)-ccaa2*t35782*t35864*t35865* \
               t35777*t35778;
            v_rho_b_rho_b_[index] = t35870*(t35859+t35792*t35789*(t35858-c0p*t35773*t35775*2.0))*2.0+t35835*(- \
               t35815+t35867+t35792*t35789*(t35815+t35866-t35841*t35842*t35836*t35794-a1p*c*c0p*t35804*t35773*(2.0/ \
               3.0)))*2.0+c0*t35763*(cx0+cx1*gamma_bb[index]*gx*t35830*t35776+cx2*t35831*t35782*t35818*t35777)*(4.0/ \
               9.0)-rho_b[index]*(t35859+t35792*t35789*(t35858-t35859))*(ccaa1*gamma_bb[index]*gcaa*t35816*t35828* \
               (8.8E1/9.0)-ccaa1*t35821*t35861*t35777*t35778*2.4E1+ccaa2*t35821*t35817*t35777*t35778*(3.04E2/9.0) \
               -ccaa2*t35864*t35865*t35777*t35778*t35779*(3.2E1/3.0)-ccaa2*t35782*t35865*t35777*t35778*(gamma_bb[index]* \
               gcaa*t35828*(1.76E2/9.0)+t35821*t35777*t35778*(3.04E2/9.0))+ccaa2*t35782*(t35864*t35864)*t35777*1.0/ \
               (t35786*t35786*t35786)*t35778*2.0+ccaa1*gamma_bb[index]*gcaa*t35860*1.0/(t35781*t35781*t35781)*t35777* \
               t35778*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t35830*t35828*(8.8E1/9.0) \
               -cx1*t35821*t35832*t35818*t35777*2.4E1+cx2*t35821*t35831*t35818*t35777*(3.04E2/9.0)-cx2*t35822*t35818* \
               t35829*t35777*t35779*(3.2E1/3.0)-cx2*t35782*t35818*t35829*t35777*(gamma_bb[index]*gx*t35828*(1.76E2/ \
               9.0)+t35821*t35818*t35777*(3.04E2/9.0))+cx2*(t35822*t35822)*1.0/(t35825*t35825*t35825)*t35782*t35818* \
               t35777*2.0+cx1*gamma_bb[index]*gx*1.0/(t35820*t35820*t35820)*t35860*t35818*t35777*(1.28E2/9.0))+rho_b[index]* \
               t35835*(-t35848-t35857+t35792*t35789*(t35848+t35857-t35808*t35809*t35854*t35775-1.0/(t35800*t35800* \
               t35800)*t35836*t35845*t35794*2.0+t35842*t35836*t35794*(b2f*c*t35843*(4.0/9.0)+b4f*t35762*t35776*(1.0E1/ \
               9.0)+b1f*c*t35806*t35843*(2.0/9.0)+b3f*c*t35760*t35843*(2.0/3.0)-b1f*t35762*t35844*t35776*(1.0/3.6E1) \
               +b3f*t35806*t35762*t35776*(1.0/1.2E1))+1.0/(t35800*t35800*t35800*t35800)*1.0/(t35803*t35803)*t35845* \
               t35794*t35795*(1.0/2.0)-a1f*c*c0f*t35807*t35843*(8.0/9.0)-t35764*t35846*t35855*t35775*t35856*(1.0/ \
               2.0)+a1f*c*t35804*t35841*t35842*t35836*(2.0/3.0)-a1p*c*t35804*t35814*t35808*t35809*(2.0/3.0))+t35808* \
               t35809*t35854*t35775+t35764*t35846*t35855*t35775*t35856*(1.0/2.0)+a1p*c*t35804*t35814*t35808*t35809* \
               (2.0/3.0))-rho_b[index]*t35870*(-t35815+t35867+t35792*t35789*(t35815+t35866-t35867-t35841*t35842*t35836* \
               t35794))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t35830*t35783*(8.0/3.0)-cx1*t35832* \
               t35818*t35777*t35779*(8.0/3.0)+cx2*t35831*t35818*t35777*t35779*(1.6E1/3.0)-cx2*t35822*t35782*t35818* \
               t35829*t35777)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t34490 = 1.0/pow(rho_a[index],1.0/3.0);
                double t34491 = c*t34490;
                double t34492 = sqrt(t34491);
                double t34493 = pow(t34491,3.0/2.0);
                double t34494 = c*c;
                double t34495 = 1.0/pow(rho_a[index],2.0/3.0);
                double t34496 = 1.0/c0p;
                double t34497 = b1p*t34492;
                double t34498 = b3p*t34493;
                double t34499 = b4p*t34494*t34495;
                double t34500 = b2p*c*t34490;
                double t34501 = t34500+t34497+t34498+t34499;
                double t34502 = 1.0/t34501;
                double t34503 = t34502*t34496*(1.0/2.0);
                double t34504 = t34503+1.0;
                double t34505 = log(t34504);
                double t34506 = a1p*c*t34490;
                double t34507 = t34506+1.0;
                double t34508 = pow(2.0,1.0/3.0);
                double t34509 = t34508*2.0;
                double t34510 = t34509-2.0;
                double t34511 = two_13*2.0;
                double t34512 = t34511-2.0;
                double t34513 = 1.0/t34512;
                double t34514 = 1.0/c0f;
                double t34515 = 1.0/pow(rho_b[index],1.0/3.0);
                double t34516 = c*t34515;
                double t34517 = sqrt(t34516);
                double t34518 = pow(t34516,3.0/2.0);
                double t34519 = 1.0/pow(rho_b[index],2.0/3.0);
                double t34520 = b1p*t34517;
                double t34521 = b3p*t34518;
                double t34522 = b4p*t34519*t34494;
                double t34523 = b2p*c*t34515;
                double t34524 = t34520+t34521+t34522+t34523;
                double t34525 = 1.0/t34524;
                double t34526 = t34525*t34496*(1.0/2.0);
                double t34527 = t34526+1.0;
                double t34528 = log(t34527);
                double t34529 = a1p*c*t34515;
                double t34530 = t34529+1.0;
                double t34531 = c0p*t34530*t34528*2.0;
                double t34532 = rho_a[index]+rho_b[index];
                double t34533 = 1.0/pow(t34532,1.0/3.0);
                double t34534 = c*t34533;
                double t34535 = sqrt(t34534);
                double t34536 = pow(t34534,3.0/2.0);
                double t34537 = 1.0/pow(t34532,2.0/3.0);
                double t34538 = b1p*t34535;
                double t34539 = b3p*t34536;
                double t34540 = b4p*t34537*t34494;
                double t34541 = b2p*c*t34533;
                double t34542 = t34540+t34541+t34538+t34539;
                double t34543 = 1.0/t34542;
                double t34544 = t34543*t34496*(1.0/2.0);
                double t34545 = t34544+1.0;
                double t34546 = log(t34545);
                double t34547 = a1p*c*t34533;
                double t34548 = t34547+1.0;
                double t34549 = c0p*t34546*t34548*2.0;
                double t34550 = rho_a[index]-rho_b[index];
                double t34551 = t34550*t34550;
                double t34552 = 1.0/t34532;
                double t34553 = t34550*t34552;
                double t34554 = 1.0/(t34532*t34532*t34532*t34532);
                double t34555 = t34551*t34551;
                double t34556 = t34553+1.0;
                double t34557 = pow(t34556,4.0/3.0);
                double t34558 = -t34553+1.0;
                double t34559 = pow(t34558,4.0/3.0);
                double t34560 = t34557+t34559-2.0;
                double t34561 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t34562 = 1.0/pow(rho_a[index],8.0/3.0);
                double t34563 = gamma_aa[index]*t34562*(1.0/2.0);
                double t34564 = 1.0/pow(rho_b[index],8.0/3.0);
                double t34565 = gamma_bb[index]*t34564*(1.0/2.0);
                double t34566 = t34563+t34565;
                double t34567 = gcab*t34566;
                double t34568 = t34567+1.0;
                double t34569 = gcab*gcab;
                double t34570 = t34566*t34566;
                double t34571 = t34570*t34569;
                double t34572 = gcab*t34566*2.0;
                double t34573 = t34571+t34572+1.0;
                double t34574 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t34575 = 1.0/(t34568*t34568);
                double t34576 = 1.0/t34573;
                double t34577 = 1.0/(t34573*t34573);
                double t34578 = gamma_aa[index]*gcab*t34561*(8.0/3.0);
                double t34579 = gamma_aa[index]*t34561*t34566*t34569*(8.0/3.0);
                double t34580 = t34578+t34579;
                double t34581 = gcab*t34562;
                double t34582 = t34562*t34566*t34569;
                double t34583 = t34581+t34582;
                double t34584 = b1f*t34492;
                double t34585 = b3f*t34493;
                double t34586 = b4f*t34494*t34495;
                double t34587 = b2f*c*t34490;
                double t34588 = t34584+t34585+t34586+t34587;
                double t34589 = 1.0/t34588;
                double t34590 = t34514*t34589*(1.0/2.0);
                double t34591 = t34590+1.0;
                double t34592 = log(t34591);
                double t34593 = a1f*c*t34490;
                double t34594 = t34593+1.0;
                double t34595 = c0f*t34592*t34594*2.0;
                double t34596 = c0p*t34505*t34507*2.0;
                double t34597 = gcaa*gcaa;
                double t34598 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t34599 = gamma_aa[index]*gcaa*t34562;
                double t34600 = t34599+1.0;
                double t34601 = gamma_aa[index]*gamma_aa[index];
                double t34602 = gamma_aa[index]*gcaa*t34562*2.0;
                double t34603 = t34601*t34597*t34598;
                double t34604 = t34602+t34603+1.0;
                double t34605 = 1.0/t34568;
                double t34606 = 1.0/pow(t34532,4.0/3.0);
                double t34607 = b1f*t34535;
                double t34608 = b3f*t34536;
                double t34609 = b4f*t34537*t34494;
                double t34610 = b2f*c*t34533;
                double t34611 = t34610+t34607+t34608+t34609;
                double t34612 = 1.0/t34611;
                double t34613 = t34612*t34514*(1.0/2.0);
                double t34614 = t34613+1.0;
                double t34615 = log(t34614);
                double t34616 = a1f*c*t34533;
                double t34617 = t34616+1.0;
                double t34619 = c0f*t34615*t34617*2.0;
                double t34618 = -t34619+t34549;
                double t34620 = 1.0/(t34532*t34532);
                double t34648 = t34620*t34550;
                double t34621 = t34552-t34648;
                double t34622 = t34619-t34549;
                double t34623 = 1.0/pow(t34532,5.0/3.0);
                double t34624 = 1.0/sqrt(t34534);
                double t34625 = 1.0/t34545;
                double t34626 = 1.0/(t34542*t34542);
                double t34627 = b4p*t34623*t34494*(2.0/3.0);
                double t34628 = b2p*c*t34606*(1.0/3.0);
                double t34629 = b1p*c*t34606*t34624*(1.0/6.0);
                double t34630 = b3p*c*t34606*t34535*(1.0/2.0);
                double t34631 = t34630+t34627+t34628+t34629;
                double t34632 = t34631*t34625*t34626*t34548;
                double t34633 = 1.0/d2fz0;
                double t34634 = 1.0/Aa;
                double t34635 = b1a*t34535;
                double t34636 = b3a*t34536;
                double t34637 = b4a*t34537*t34494;
                double t34638 = b2a*c*t34533;
                double t34639 = t34635+t34636+t34637+t34638;
                double t34640 = 1.0/t34639;
                double t34641 = t34640*t34634*(1.0/2.0);
                double t34642 = t34641+1.0;
                double t34643 = log(t34642);
                double t34644 = a1a*c*t34533;
                double t34645 = t34644+1.0;
                double t34646 = 1.0/(t34532*t34532*t34532*t34532*t34532);
                double t34647 = pow(t34556,1.0/3.0);
                double t34649 = t34621*t34647*(4.0/3.0);
                double t34650 = pow(t34558,1.0/3.0);
                double t34651 = t34649-t34621*t34650*(4.0/3.0);
                double t34652 = t34554*t34555;
                double t34653 = t34652-1.0;
                double t34654 = 1.0/pow(rho_a[index],4.0/3.0);
                double t34655 = 1.0/pow(rho_a[index],5.0/3.0);
                double t34656 = 1.0/sqrt(t34491);
                double t34657 = 1.0/t34504;
                double t34658 = 1.0/(t34501*t34501);
                double t34659 = b4p*t34655*t34494*(2.0/3.0);
                double t34660 = b2p*c*t34654*(1.0/3.0);
                double t34661 = b1p*c*t34654*t34656*(1.0/6.0);
                double t34662 = b3p*c*t34492*t34654*(1.0/2.0);
                double t34663 = t34660+t34661+t34662+t34659;
                double t34664 = t34507*t34663*t34657*t34658;
                double t34665 = t34595-t34596;
                double t34666 = t34510*t34513*t34665;
                double t34667 = Aa*t34513*t34560*t34633*t34643*t34653*t34645*2.0;
                double t34668 = t34666+t34596;
                double t34669 = 1.0/t34600;
                double t34670 = 1.0/t34604;
                double t34671 = 1.0/(t34600*t34600);
                double t34672 = 1.0/(t34604*t34604);
                double t34673 = gcaa*t34562*2.0;
                double t34674 = gamma_aa[index]*t34597*t34598*2.0;
                double t34675 = t34673+t34674;
                double t34676 = gamma_aa[index]*gcaa*t34561*(1.6E1/3.0);
                double t34677 = t34601*t34574*t34597*(1.6E1/3.0);
                double t34678 = t34676+t34677;
                double t34679 = gx*gx;
                double t34680 = gamma_aa[index]*gx*t34562;
                double t34681 = t34680+1.0;
                double t34682 = gamma_aa[index]*gx*t34562*2.0;
                double t34683 = t34601*t34598*t34679;
                double t34684 = t34682+t34683+1.0;
                double t34685 = 1.0/t34591;
                double t34686 = 1.0/(t34588*t34588);
                double t34687 = b4f*t34655*t34494*(2.0/3.0);
                double t34688 = b2f*c*t34654*(1.0/3.0);
                double t34689 = b1f*c*t34654*t34656*(1.0/6.0);
                double t34690 = b3f*c*t34492*t34654*(1.0/2.0);
                double t34691 = t34690+t34687+t34688+t34689;
                double t34692 = a1f*c*c0f*t34654*t34592*(2.0/3.0);
                double t34693 = a1p*c*c0p*t34505*t34654*(2.0/3.0);
                double t34694 = ccaa1*gcaa*t34562*t34669;
                double t34695 = ccaa2*gamma_aa[index]*t34670*t34597*t34598*2.0;
                double t34696 = t34694+t34695-ccaa1*gamma_aa[index]*t34671*t34597*t34598-ccaa2*t34601*t34672*t34675* \
                   t34597*t34598;
                double t34697 = 1.0/t34681;
                double t34698 = 1.0/t34684;
                double t34699 = 1.0/(t34681*t34681);
                double t34700 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t34701 = 1.0/(t34684*t34684);
                double t34702 = gx*t34562*2.0;
                double t34703 = gamma_aa[index]*t34598*t34679*2.0;
                double t34704 = t34702+t34703;
                double t34705 = gamma_aa[index]*gx*t34561*(1.6E1/3.0);
                double t34706 = t34601*t34574*t34679*(1.6E1/3.0);
                double t34707 = t34705+t34706;
                v_rho_a_gamma_aa_[index] = -t34668*t34696-(ccab1*gcab*t34605*t34562*(1.0/2.0)-ccab1*t34562*t34566* \
                   t34575*t34569*(1.0/2.0)-ccab2*t34570*t34583*t34577*t34569+ccab2*t34562*t34566*t34576*t34569)*(t34549- \
                   t34666+t34667-t34596+rho_a[index]*(-t34664+t34693+t34510*t34513*(t34664+t34692-t34691*t34594*t34685* \
                   t34686-a1p*c*c0p*t34505*t34654*(2.0/3.0)))-t34532*(-t34632+t34513*t34560*t34554*t34555*(t34632-(1.0/ \
                   (t34611*t34611)*t34617*(b2f*c*t34606*(1.0/3.0)+b4f*t34623*t34494*(2.0/3.0)+b1f*c*t34606*t34624*(1.0/ \
                   6.0)+b3f*c*t34606*t34535*(1.0/2.0)))/t34614+a1f*c*c0f*t34606*t34615*(2.0/3.0)-a1p*c*c0p*t34606*t34546* \
                   (2.0/3.0))+a1p*c*c0p*t34606*t34546*(2.0/3.0)-t34513*t34622*t34651*t34554*t34555+t34513*t34622*t34560* \
                   t34555*t34646*4.0+t34513*t34550*t34551*t34560*t34554*t34618*4.0+Aa*t34513*t34560*t34633*t34643*t34645* \
                   (t34555*t34646*4.0-t34550*t34551*t34554*4.0)*2.0-Aa*t34513*t34633*t34651*t34643*t34653*t34645*2.0- \
                   (t34513*t34560*t34633*t34653*t34645*1.0/(t34639*t34639)*(b2a*c*t34606*(1.0/3.0)+b4a*t34623*t34494* \
                   (2.0/3.0)+b1a*c*t34606*t34624*(1.0/6.0)+b3a*c*t34606*t34535*(1.0/2.0)))/t34642+Aa*a1a*c*t34513*t34560* \
                   t34606*t34633*t34643*t34653*(2.0/3.0))+t34513*t34622*t34560*t34554*t34555)-(rho_a[index]*(t34596+t34510* \
                   t34513*(t34595-c0p*t34505*t34507*2.0))+rho_b[index]*(t34531-t34510*t34513*(t34531-c0f*log((t34514* \
                   (1.0/2.0))/(b1f*t34517+b3f*t34518+b2f*c*t34515+b4f*t34519*t34494)+1.0)*(a1f*c*t34515+1.0)*2.0))-t34532* \
                   (t34549+t34667-t34513*t34560*t34554*t34555*t34618))*(ccab1*gcab*t34605*t34561*(4.0/3.0)-ccab2*t34570* \
                   t34577*t34569*(gcab*t34561*(8.0/3.0)+gamma_aa[index]*t34574*t34569*(4.0/3.0)+t34561*t34566*t34569* \
                   (8.0/3.0))-ccab1*gamma_aa[index]*t34574*t34575*t34569*(4.0/3.0)+ccab2*gamma_aa[index]*t34574*t34576* \
                   t34569*(4.0/3.0)-ccab1*t34561*t34566*t34575*t34569*(4.0/3.0)+ccab2*t34561*t34566*t34576*t34569*(8.0/ \
                   3.0)-ccab2*t34562*t34580*t34566*t34577*t34569+ccab2*t34570*t34580*1.0/(t34573*t34573*t34573)*t34583* \
                   t34569*2.0-ccab2*gamma_aa[index]*t34561*t34583*t34566*t34577*t34569*(8.0/3.0)+ccab1*gamma_aa[index]* \
                   gcab*t34574*t34566*1.0/(t34568*t34568*t34568)*t34569*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t34562*t34697-cx1*gamma_aa[index]*t34598*t34679*t34699+cx2*gamma_aa[index]*t34598*t34679*t34698* \
                   2.0-cx2*t34601*t34701*t34704*t34598*t34679)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t34561* \
                   t34697*(8.0/3.0)-cx1*gamma_aa[index]*t34574*t34679*t34699*8.0+cx2*gamma_aa[index]*t34574*t34679*t34698* \
                   (3.2E1/3.0)-cx2*t34601*t34701*t34704*t34574*t34679*(1.6E1/3.0)+cx1*gx*t34601*t34700*1.0/(t34681*t34681* \
                   t34681)*t34679*(1.6E1/3.0)-cx2*t34601*t34701*t34598*t34679*(gx*t34561*(1.6E1/3.0)+gamma_aa[index]* \
                   t34574*t34679*(3.2E1/3.0))-cx2*gamma_aa[index]*t34701*t34707*t34598*t34679*2.0+cx2*t34601*t34704*t34707* \
                   1.0/(t34684*t34684*t34684)*t34598*t34679*2.0)+rho_a[index]*t34696*(-t34664+t34693+t34510*t34513*(t34664+ \
                   t34692-t34693-t34691*t34594*t34685*t34686))+rho_a[index]*t34668*(ccaa1*gcaa*t34561*t34669*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t34671*t34574*t34597*8.0+ccaa2*gamma_aa[index]*t34670*t34574*t34597*(3.2E1/ \
                   3.0)-ccaa2*t34601*t34672*t34574*t34675*t34597*(1.6E1/3.0)+ccaa1*gcaa*1.0/(t34600*t34600*t34600)*t34601* \
                   t34700*t34597*(1.6E1/3.0)-ccaa2*t34601*t34672*t34597*t34598*(gcaa*t34561*(1.6E1/3.0)+gamma_aa[index]* \
                   t34574*t34597*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t34672*t34597*t34678*t34598*2.0+ccaa2*t34601*1.0/ \
                   (t34604*t34604*t34604)*t34675*t34597*t34678*t34598*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t36283 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36284 = c*t36283;
                double t36285 = sqrt(t36284);
                double t36286 = pow(t36284,3.0/2.0);
                double t36287 = c*c;
                double t36288 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36289 = 1.0/c0p;
                double t36290 = b1p*t36285;
                double t36291 = b3p*t36286;
                double t36292 = b4p*t36287*t36288;
                double t36293 = b2p*c*t36283;
                double t36294 = t36290+t36291+t36292+t36293;
                double t36295 = 1.0/t36294;
                double t36296 = t36295*t36289*(1.0/2.0);
                double t36297 = t36296+1.0;
                double t36298 = log(t36297);
                double t36299 = a1p*c*t36283;
                double t36300 = t36299+1.0;
                double t36301 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36302 = gcaa*gcaa;
                double t36303 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36304 = gamma_aa[index]*gcaa*t36301;
                double t36305 = t36304+1.0;
                double t36306 = gamma_aa[index]*gamma_aa[index];
                double t36307 = gamma_aa[index]*gcaa*t36301*2.0;
                double t36308 = t36302*t36303*t36306;
                double t36309 = t36307+t36308+1.0;
                double t36310 = pow(2.0,1.0/3.0);
                double t36311 = t36310*2.0;
                double t36312 = t36311-2.0;
                double t36313 = two_13*2.0;
                double t36314 = t36313-2.0;
                double t36315 = 1.0/t36314;
                double t36316 = 1.0/c0f;
                double t36317 = b1f*t36285;
                double t36318 = b3f*t36286;
                double t36319 = b4f*t36287*t36288;
                double t36320 = b2f*c*t36283;
                double t36321 = t36320+t36317+t36318+t36319;
                double t36322 = 1.0/t36321;
                double t36323 = t36322*t36316*(1.0/2.0);
                double t36324 = t36323+1.0;
                double t36325 = log(t36324);
                double t36326 = a1f*c*t36283;
                double t36327 = t36326+1.0;
                double t36328 = c0f*t36325*t36327*2.0;
                double t36329 = c0p*t36300*t36298*2.0;
                double t36330 = 1.0/t36305;
                double t36331 = 1.0/t36309;
                double t36332 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t36333 = 1.0/(t36305*t36305);
                double t36334 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t36335 = 1.0/(t36309*t36309);
                double t36336 = gcaa*t36301*2.0;
                double t36337 = gamma_aa[index]*t36302*t36303*2.0;
                double t36338 = t36336+t36337;
                double t36339 = gamma_aa[index]*gcaa*t36334*(1.6E1/3.0);
                double t36340 = t36302*t36332*t36306*(1.6E1/3.0);
                double t36341 = t36340+t36339;
                double t36342 = gx*gx;
                double t36343 = gamma_aa[index]*gx*t36301;
                double t36344 = t36343+1.0;
                double t36345 = gamma_aa[index]*gx*t36301*2.0;
                double t36346 = t36303*t36306*t36342;
                double t36347 = t36345+t36346+1.0;
                double t36348 = 1.0/pow(rho_a[index],4.0/3.0);
                double t36349 = 1.0/pow(rho_a[index],5.0/3.0);
                double t36350 = 1.0/sqrt(t36284);
                double t36351 = 1.0/t36297;
                double t36352 = 1.0/(t36294*t36294);
                double t36353 = b4p*t36349*t36287*(2.0/3.0);
                double t36354 = b2p*c*t36348*(1.0/3.0);
                double t36355 = b1p*c*t36350*t36348*(1.0/6.0);
                double t36356 = b3p*c*t36285*t36348*(1.0/2.0);
                double t36357 = t36353+t36354+t36355+t36356;
                double t36358 = t36300*t36351*t36352*t36357;
                double t36359 = ccaa1*gcaa*t36301*t36330;
                double t36360 = ccaa2*gamma_aa[index]*t36302*t36303*t36331*2.0;
                double t36361 = t36360+t36359-ccaa1*gamma_aa[index]*t36302*t36303*t36333-ccaa2*t36302*t36303*t36306* \
                   t36335*t36338;
                double t36362 = 1.0/t36344;
                double t36363 = 1.0/t36347;
                double t36364 = 1.0/(t36344*t36344);
                double t36365 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t36366 = 1.0/(t36347*t36347);
                double t36367 = gx*t36301*2.0;
                double t36368 = gamma_aa[index]*t36303*t36342*2.0;
                double t36369 = t36367+t36368;
                double t36370 = gamma_aa[index]*gx*t36334*(1.6E1/3.0);
                double t36371 = t36332*t36306*t36342*(1.6E1/3.0);
                double t36372 = t36370+t36371;
                v_rho_a_gamma_aa_[index] = -t36361*(t36329+t36312*t36315*(t36328-c0p*t36300*t36298*2.0))+rho_a[index]* \
                   t36361*(-t36358+t36312*t36315*(t36358-(1.0/(t36321*t36321)*t36327*(b2f*c*t36348*(1.0/3.0)+b4f*t36349* \
                   t36287*(2.0/3.0)+b1f*c*t36350*t36348*(1.0/6.0)+b3f*c*t36285*t36348*(1.0/2.0)))/t36324+a1f*c*c0f*t36325* \
                   t36348*(2.0/3.0)-a1p*c*c0p*t36348*t36298*(2.0/3.0))+a1p*c*c0p*t36348*t36298*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t36301*t36362-cx1*gamma_aa[index]*t36303*t36342*t36364+cx2*gamma_aa[index]*t36303*t36342* \
                   t36363*2.0-cx2*t36303*t36306*t36342*t36366*t36369)*(4.0/3.0)+rho_a[index]*(t36329+t36312*t36315*(t36328- \
                   t36329))*(ccaa1*gcaa*t36330*t36334*(8.0/3.0)+ccaa2*gamma_aa[index]*t36302*t36331*t36332*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t36302*t36332*t36333*8.0-ccaa2*t36302*t36332*t36306*t36335*t36338*(1.6E1/3.0) \
                   +ccaa1*gcaa*t36302*1.0/(t36305*t36305*t36305)*t36306*t36365*(1.6E1/3.0)-ccaa2*t36302*t36303*t36306* \
                   t36335*(gcaa*t36334*(1.6E1/3.0)+gamma_aa[index]*t36302*t36332*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t36302* \
                   t36303*t36341*t36335*2.0+ccaa2*t36302*t36303*t36341*t36306*1.0/(t36309*t36309*t36309)*t36338*2.0)- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t36334*t36362*(8.0/3.0)-cx1*gamma_aa[index]*t36332*t36342*t36364* \
                   8.0+cx2*gamma_aa[index]*t36332*t36342*t36363*(3.2E1/3.0)-cx2*t36332*t36306*t36342*t36366*t36369*(1.6E1/ \
                   3.0)+cx1*gx*t36306*t36342*1.0/(t36344*t36344*t36344)*t36365*(1.6E1/3.0)-cx2*t36303*t36306*t36342*t36366* \
                   (gx*t36334*(1.6E1/3.0)+gamma_aa[index]*t36332*t36342*(3.2E1/3.0))-cx2*gamma_aa[index]*t36303*t36342* \
                   t36372*t36366*2.0+cx2*t36303*t36306*t36342*t36372*1.0/(t36347*t36347*t36347)*t36369*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t34710 = 1.0/pow(rho_a[index],1.0/3.0);
                double t34711 = c*t34710;
                double t34712 = sqrt(t34711);
                double t34713 = pow(t34711,3.0/2.0);
                double t34714 = c*c;
                double t34715 = 1.0/pow(rho_a[index],2.0/3.0);
                double t34716 = 1.0/c0p;
                double t34717 = b1p*t34712;
                double t34718 = b3p*t34713;
                double t34719 = b4p*t34714*t34715;
                double t34720 = b2p*c*t34710;
                double t34721 = t34720+t34717+t34718+t34719;
                double t34722 = 1.0/t34721;
                double t34723 = t34722*t34716*(1.0/2.0);
                double t34724 = t34723+1.0;
                double t34725 = log(t34724);
                double t34726 = a1p*c*t34710;
                double t34727 = t34726+1.0;
                double t34728 = pow(2.0,1.0/3.0);
                double t34729 = t34728*2.0;
                double t34730 = t34729-2.0;
                double t34731 = two_13*2.0;
                double t34732 = t34731-2.0;
                double t34733 = 1.0/t34732;
                double t34734 = 1.0/c0f;
                double t34735 = 1.0/pow(rho_b[index],1.0/3.0);
                double t34736 = c*t34735;
                double t34737 = sqrt(t34736);
                double t34738 = pow(t34736,3.0/2.0);
                double t34739 = 1.0/pow(rho_b[index],2.0/3.0);
                double t34740 = b1p*t34737;
                double t34741 = b3p*t34738;
                double t34742 = b4p*t34714*t34739;
                double t34743 = b2p*c*t34735;
                double t34744 = t34740+t34741+t34742+t34743;
                double t34745 = 1.0/t34744;
                double t34746 = t34716*t34745*(1.0/2.0);
                double t34747 = t34746+1.0;
                double t34748 = log(t34747);
                double t34749 = a1p*c*t34735;
                double t34750 = t34749+1.0;
                double t34751 = c0p*t34750*t34748*2.0;
                double t34752 = rho_a[index]+rho_b[index];
                double t34753 = 1.0/pow(t34752,1.0/3.0);
                double t34754 = c*t34753;
                double t34755 = sqrt(t34754);
                double t34756 = pow(t34754,3.0/2.0);
                double t34757 = 1.0/pow(t34752,2.0/3.0);
                double t34758 = b1p*t34755;
                double t34759 = b3p*t34756;
                double t34760 = b4p*t34714*t34757;
                double t34761 = b2p*c*t34753;
                double t34762 = t34760+t34761+t34758+t34759;
                double t34763 = 1.0/t34762;
                double t34764 = t34716*t34763*(1.0/2.0);
                double t34765 = t34764+1.0;
                double t34766 = log(t34765);
                double t34767 = a1p*c*t34753;
                double t34768 = t34767+1.0;
                double t34769 = c0p*t34766*t34768*2.0;
                double t34770 = rho_a[index]-rho_b[index];
                double t34771 = t34770*t34770;
                double t34772 = 1.0/t34752;
                double t34773 = t34770*t34772;
                double t34774 = 1.0/(t34752*t34752*t34752*t34752);
                double t34775 = t34771*t34771;
                double t34776 = t34773+1.0;
                double t34777 = pow(t34776,4.0/3.0);
                double t34778 = -t34773+1.0;
                double t34779 = pow(t34778,4.0/3.0);
                double t34780 = t34777+t34779-2.0;
                double t34781 = gcab*gcab;
                double t34782 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t34783 = 1.0/pow(rho_b[index],8.0/3.0);
                double t34784 = 1.0/pow(rho_a[index],8.0/3.0);
                double t34785 = gamma_aa[index]*t34784*(1.0/2.0);
                double t34786 = gamma_bb[index]*t34783*(1.0/2.0);
                double t34787 = t34785+t34786;
                double t34788 = gamma_aa[index]*gcab*t34782*(8.0/3.0);
                double t34789 = gamma_aa[index]*t34781*t34782*t34787*(8.0/3.0);
                double t34790 = t34788+t34789;
                double t34791 = t34787*t34787;
                double t34792 = t34781*t34791;
                double t34793 = gcab*t34787*2.0;
                double t34794 = t34792+t34793+1.0;
                double t34795 = gcab*t34783;
                double t34796 = t34781*t34783*t34787;
                double t34797 = t34795+t34796;
                double t34798 = 1.0/(t34794*t34794);
                double t34799 = gcab*t34787;
                double t34800 = t34799+1.0;
                double t34801 = c0p*t34725*t34727*2.0;
                double t34802 = 1.0/(t34800*t34800);
                double t34803 = 1.0/t34794;
                double t34804 = 1.0/pow(t34752,4.0/3.0);
                double t34805 = b1f*t34755;
                double t34806 = b3f*t34756;
                double t34807 = b4f*t34714*t34757;
                double t34808 = b2f*c*t34753;
                double t34809 = t34805+t34806+t34807+t34808;
                double t34810 = 1.0/t34809;
                double t34811 = t34810*t34734*(1.0/2.0);
                double t34812 = t34811+1.0;
                double t34813 = log(t34812);
                double t34814 = a1f*c*t34753;
                double t34815 = t34814+1.0;
                double t34817 = c0f*t34813*t34815*2.0;
                double t34816 = -t34817+t34769;
                double t34818 = 1.0/(t34752*t34752);
                double t34846 = t34770*t34818;
                double t34819 = t34772-t34846;
                double t34820 = t34817-t34769;
                double t34821 = 1.0/pow(t34752,5.0/3.0);
                double t34822 = 1.0/sqrt(t34754);
                double t34823 = 1.0/t34765;
                double t34824 = 1.0/(t34762*t34762);
                double t34825 = b4p*t34821*t34714*(2.0/3.0);
                double t34826 = b2p*c*t34804*(1.0/3.0);
                double t34827 = b1p*c*t34804*t34822*(1.0/6.0);
                double t34828 = b3p*c*t34804*t34755*(1.0/2.0);
                double t34829 = t34825+t34826+t34827+t34828;
                double t34830 = t34823*t34824*t34829*t34768;
                double t34831 = 1.0/d2fz0;
                double t34832 = 1.0/Aa;
                double t34833 = b1a*t34755;
                double t34834 = b3a*t34756;
                double t34835 = b4a*t34714*t34757;
                double t34836 = b2a*c*t34753;
                double t34837 = t34833+t34834+t34835+t34836;
                double t34838 = 1.0/t34837;
                double t34839 = t34832*t34838*(1.0/2.0);
                double t34840 = t34839+1.0;
                double t34841 = log(t34840);
                double t34842 = a1a*c*t34753;
                double t34843 = t34842+1.0;
                double t34844 = 1.0/(t34752*t34752*t34752*t34752*t34752);
                double t34845 = pow(t34776,1.0/3.0);
                double t34847 = t34845*t34819*(4.0/3.0);
                double t34848 = pow(t34778,1.0/3.0);
                double t34849 = t34847-t34819*t34848*(4.0/3.0);
                double t34850 = t34774*t34775;
                double t34851 = t34850-1.0;
                double t34852 = a1f*c*t34710;
                double t34853 = t34852+1.0;
                double t34854 = b1f*t34712;
                double t34855 = b3f*t34713;
                double t34856 = b4f*t34714*t34715;
                double t34857 = b2f*c*t34710;
                double t34858 = t34854+t34855+t34856+t34857;
                double t34859 = 1.0/t34858;
                double t34860 = t34734*t34859*(1.0/2.0);
                double t34861 = t34860+1.0;
                double t34862 = 1.0/pow(rho_a[index],4.0/3.0);
                double t34863 = 1.0/pow(rho_a[index],5.0/3.0);
                double t34864 = 1.0/sqrt(t34711);
                double t34865 = log(t34861);
                double t34866 = 1.0/t34724;
                double t34867 = 1.0/(t34721*t34721);
                double t34868 = b4p*t34714*t34863*(2.0/3.0);
                double t34869 = b2p*c*t34862*(1.0/3.0);
                double t34870 = b1p*c*t34862*t34864*(1.0/6.0);
                double t34871 = b3p*c*t34712*t34862*(1.0/2.0);
                double t34872 = t34870+t34871+t34868+t34869;
                double t34873 = t34727*t34872*t34866*t34867;
                double t34874 = Aa*t34831*t34733*t34841*t34851*t34780*t34843*2.0;
                double t34875 = t34801-c0f*t34853*t34865*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t34801-t34730*t34733*t34875)+rho_b[index]*(t34751-t34730* \
                   t34733*(t34751-c0f*log((t34734*(1.0/2.0))/(b1f*t34737+b3f*t34738+b2f*c*t34735+b4f*t34714*t34739)+1.0) \
                   *(a1f*c*t34735+1.0)*2.0))-t34752*(t34874+t34769-t34733*t34780*t34816*t34774*t34775))*(ccab2*t34781* \
                   t34790*t34783*t34787*t34798-ccab2*t34781*t34790*t34791*1.0/(t34794*t34794*t34794)*t34797*2.0+ccab1* \
                   gamma_aa[index]*t34802*t34781*t34782*t34783*(4.0/3.0)-ccab2*gamma_aa[index]*t34803*t34781*t34782*t34783* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t34781*t34782*t34787*t34797*t34798*(8.0/3.0)+ccab2*gamma_aa[index]* \
                   (t34781*t34781)*t34782*t34791*t34783*t34798*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*1.0/(t34800*t34800* \
                   t34800)*t34781*t34782*t34783*t34787*(4.0/3.0))-((ccab1*gcab*t34783*(1.0/2.0))/t34800-ccab1*t34802* \
                   t34781*t34783*t34787*(1.0/2.0)+ccab2*t34803*t34781*t34783*t34787-ccab2*t34781*t34791*t34797*t34798) \
                   *(-t34801+t34874+t34769+rho_a[index]*(-t34873+t34730*t34733*(t34873-(t34853*1.0/(t34858*t34858)*(b2f* \
                   c*t34862*(1.0/3.0)+b4f*t34714*t34863*(2.0/3.0)+b1f*c*t34862*t34864*(1.0/6.0)+b3f*c*t34712*t34862*(1.0/ \
                   2.0)))/t34861+a1f*c*c0f*t34862*t34865*(2.0/3.0)-a1p*c*c0p*t34725*t34862*(2.0/3.0))+a1p*c*c0p*t34725* \
                   t34862*(2.0/3.0))-t34752*(-t34830+t34733*t34780*t34774*t34775*(t34830-(t34815*1.0/(t34809*t34809)* \
                   (b2f*c*t34804*(1.0/3.0)+b4f*t34821*t34714*(2.0/3.0)+b1f*c*t34804*t34822*(1.0/6.0)+b3f*c*t34804*t34755* \
                   (1.0/2.0)))/t34812+a1f*c*c0f*t34804*t34813*(2.0/3.0)-a1p*c*c0p*t34804*t34766*(2.0/3.0))+a1p*c*c0p* \
                   t34804*t34766*(2.0/3.0)+t34820*t34733*t34780*t34844*t34775*4.0-t34820*t34733*t34774*t34775*t34849+ \
                   t34733*t34770*t34771*t34780*t34816*t34774*4.0+Aa*t34831*t34733*t34841*t34780*t34843*(t34844*t34775* \
                   4.0-t34770*t34771*t34774*4.0)*2.0-Aa*t34831*t34733*t34841*t34851*t34843*t34849*2.0-(t34831*t34733* \
                   t34851*t34780*t34843*1.0/(t34837*t34837)*(b2a*c*t34804*(1.0/3.0)+b4a*t34821*t34714*(2.0/3.0)+b1a*c* \
                   t34804*t34822*(1.0/6.0)+b3a*c*t34804*t34755*(1.0/2.0)))/t34840+Aa*a1a*c*t34804*t34831*t34733*t34841* \
                   t34851*t34780*(2.0/3.0))+t34730*t34733*t34875+t34820*t34733*t34780*t34774*t34775);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t34877 = 1.0/pow(rho_a[index],1.0/3.0);
                double t34878 = c*t34877;
                double t34879 = sqrt(t34878);
                double t34880 = pow(t34878,3.0/2.0);
                double t34881 = c*c;
                double t34882 = 1.0/pow(rho_a[index],2.0/3.0);
                double t34883 = 1.0/c0p;
                double t34884 = b1p*t34879;
                double t34885 = b3p*t34880;
                double t34886 = b4p*t34881*t34882;
                double t34887 = b2p*c*t34877;
                double t34888 = t34884+t34885+t34886+t34887;
                double t34889 = 1.0/t34888;
                double t34890 = t34883*t34889*(1.0/2.0);
                double t34891 = t34890+1.0;
                double t34892 = log(t34891);
                double t34893 = a1p*c*t34877;
                double t34894 = t34893+1.0;
                double t34895 = pow(2.0,1.0/3.0);
                double t34896 = t34895*2.0;
                double t34897 = t34896-2.0;
                double t34898 = two_13*2.0;
                double t34899 = t34898-2.0;
                double t34900 = 1.0/t34899;
                double t34901 = 1.0/c0f;
                double t34902 = 1.0/pow(rho_b[index],1.0/3.0);
                double t34903 = c*t34902;
                double t34904 = sqrt(t34903);
                double t34905 = pow(t34903,3.0/2.0);
                double t34906 = 1.0/pow(rho_b[index],2.0/3.0);
                double t34907 = b1p*t34904;
                double t34908 = b3p*t34905;
                double t34909 = b4p*t34906*t34881;
                double t34910 = b2p*c*t34902;
                double t34911 = t34910+t34907+t34908+t34909;
                double t34912 = 1.0/t34911;
                double t34913 = t34912*t34883*(1.0/2.0);
                double t34914 = t34913+1.0;
                double t34915 = log(t34914);
                double t34916 = a1p*c*t34902;
                double t34917 = t34916+1.0;
                double t34918 = c0p*t34915*t34917*2.0;
                double t34919 = rho_a[index]+rho_b[index];
                double t34920 = 1.0/pow(t34919,1.0/3.0);
                double t34921 = c*t34920;
                double t34922 = sqrt(t34921);
                double t34923 = pow(t34921,3.0/2.0);
                double t34924 = 1.0/pow(t34919,2.0/3.0);
                double t34925 = b1p*t34922;
                double t34926 = b3p*t34923;
                double t34927 = b4p*t34924*t34881;
                double t34928 = b2p*c*t34920;
                double t34929 = t34925+t34926+t34927+t34928;
                double t34930 = 1.0/t34929;
                double t34931 = t34930*t34883*(1.0/2.0);
                double t34932 = t34931+1.0;
                double t34933 = log(t34932);
                double t34934 = a1p*c*t34920;
                double t34935 = t34934+1.0;
                double t34936 = c0p*t34933*t34935*2.0;
                double t34937 = rho_a[index]-rho_b[index];
                double t34938 = t34937*t34937;
                double t34939 = 1.0/t34919;
                double t34940 = t34937*t34939;
                double t34941 = 1.0/(t34919*t34919*t34919*t34919);
                double t34942 = t34938*t34938;
                double t34943 = t34940+1.0;
                double t34944 = pow(t34943,4.0/3.0);
                double t34945 = -t34940+1.0;
                double t34946 = pow(t34945,4.0/3.0);
                double t34947 = t34944+t34946-2.0;
                double t34948 = gcab*gcab;
                double t34949 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t34950 = 1.0/pow(rho_a[index],8.0/3.0);
                double t34951 = gamma_aa[index]*t34950*(1.0/2.0);
                double t34952 = 1.0/pow(rho_b[index],8.0/3.0);
                double t34953 = gamma_bb[index]*t34952*(1.0/2.0);
                double t34954 = t34951+t34953;
                double t34955 = gamma_bb[index]*gcab*t34949*(8.0/3.0);
                double t34956 = gamma_bb[index]*t34954*t34948*t34949*(8.0/3.0);
                double t34957 = t34955+t34956;
                double t34958 = t34954*t34954;
                double t34959 = t34948*t34958;
                double t34960 = gcab*t34954*2.0;
                double t34961 = t34960+t34959+1.0;
                double t34962 = gcab*t34950;
                double t34963 = t34950*t34954*t34948;
                double t34964 = t34962+t34963;
                double t34965 = 1.0/(t34961*t34961);
                double t34966 = gcab*t34954;
                double t34967 = t34966+1.0;
                double t34968 = c0p*t34892*t34894*2.0;
                double t34969 = 1.0/(t34967*t34967);
                double t34970 = 1.0/t34961;
                double t34971 = 1.0/pow(t34919,4.0/3.0);
                double t34972 = b1f*t34922;
                double t34973 = b3f*t34923;
                double t34974 = b4f*t34924*t34881;
                double t34975 = b2f*c*t34920;
                double t34976 = t34972+t34973+t34974+t34975;
                double t34977 = 1.0/t34976;
                double t34978 = t34901*t34977*(1.0/2.0);
                double t34979 = t34978+1.0;
                double t34980 = log(t34979);
                double t34981 = a1f*c*t34920;
                double t34982 = t34981+1.0;
                double t34984 = c0f*t34980*t34982*2.0;
                double t34983 = t34936-t34984;
                double t34985 = 1.0/(t34919*t34919);
                double t34986 = t34937*t34985;
                double t34987 = t34939+t34986;
                double t34988 = 1.0/pow(t34919,5.0/3.0);
                double t34989 = 1.0/sqrt(t34921);
                double t34990 = 1.0/t34932;
                double t34991 = 1.0/(t34929*t34929);
                double t34992 = b4p*t34881*t34988*(2.0/3.0);
                double t34993 = b2p*c*t34971*(1.0/3.0);
                double t34994 = b1p*c*t34971*t34989*(1.0/6.0);
                double t34995 = b3p*c*t34922*t34971*(1.0/2.0);
                double t34996 = t34992+t34993+t34994+t34995;
                double t34997 = 1.0/d2fz0;
                double t34998 = 1.0/Aa;
                double t34999 = b1a*t34922;
                double t35000 = b3a*t34923;
                double t35001 = b4a*t34924*t34881;
                double t35002 = b2a*c*t34920;
                double t35003 = t34999+t35000+t35001+t35002;
                double t35004 = 1.0/t35003;
                double t35005 = t34998*t35004*(1.0/2.0);
                double t35006 = t35005+1.0;
                double t35007 = log(t35006);
                double t35008 = a1a*c*t34920;
                double t35009 = t35008+1.0;
                double t35010 = 1.0/(t34919*t34919*t34919*t34919*t34919);
                double t35011 = pow(t34943,1.0/3.0);
                double t35012 = t34987*t35011*(4.0/3.0);
                double t35013 = pow(t34945,1.0/3.0);
                double t35014 = t35012-t34987*t35013*(4.0/3.0);
                double t35015 = t34941*t34942;
                double t35016 = t35015-1.0;
                double t35017 = t34935*t34990*t34991*t34996;
                double t35018 = a1f*c*t34902;
                double t35019 = t35018+1.0;
                double t35020 = b1f*t34904;
                double t35021 = b3f*t34905;
                double t35022 = b4f*t34906*t34881;
                double t35023 = b2f*c*t34902;
                double t35024 = t35020+t35021+t35022+t35023;
                double t35025 = 1.0/t35024;
                double t35026 = t34901*t35025*(1.0/2.0);
                double t35027 = t35026+1.0;
                double t35028 = 1.0/pow(rho_b[index],4.0/3.0);
                double t35029 = 1.0/pow(rho_b[index],5.0/3.0);
                double t35030 = 1.0/sqrt(t34903);
                double t35031 = log(t35027);
                double t35032 = 1.0/t34914;
                double t35033 = 1.0/(t34911*t34911);
                double t35034 = b4p*t34881*t35029*(2.0/3.0);
                double t35035 = b2p*c*t35028*(1.0/3.0);
                double t35036 = b1p*c*t35030*t35028*(1.0/6.0);
                double t35037 = b3p*c*t34904*t35028*(1.0/2.0);
                double t35038 = t35034+t35035+t35036+t35037;
                double t35039 = t34917*t35032*t35033*t35038;
                double t35040 = t34918-c0f*t35031*t35019*2.0;
                double t35041 = Aa*t34900*t34947*t34997*t35007*t35016*t35009*2.0;
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t34950*(1.0/2.0))/t34967+ccab2*t34950*t34970*t34954*t34948- \
                   ccab1*t34950*t34954*t34948*t34969*(1.0/2.0)-ccab2*t34964*t34965*t34948*t34958)*(-t34918+t34936+t35041+ \
                   t34919*(t35017-t34900*t34941*t34942*t34947*(t35017-(t34982*1.0/(t34976*t34976)*(b2f*c*t34971*(1.0/ \
                   3.0)+b4f*t34881*t34988*(2.0/3.0)+b1f*c*t34971*t34989*(1.0/6.0)+b3f*c*t34922*t34971*(1.0/2.0)))/t34979+ \
                   a1f*c*c0f*t34971*t34980*(2.0/3.0)-a1p*c*c0p*t34933*t34971*(2.0/3.0))-a1p*c*c0p*t34933*t34971*(2.0/ \
                   3.0)+t34900*t34941*t34942*t34983*t35014+t34900*t34942*t34947*t34983*t35010*4.0+t34900*t34941*t34937* \
                   t34938*t34947*t34983*4.0-Aa*t34900*t34947*t34997*t35007*t35009*(t34942*t35010*4.0+t34941*t34937*t34938* \
                   4.0)*2.0-Aa*t34900*t34997*t35014*t35007*t35016*t35009*2.0+(t34900*t34947*t34997*1.0/(t35003*t35003) \
                   *t35016*t35009*(b2a*c*t34971*(1.0/3.0)+b4a*t34881*t34988*(2.0/3.0)+b1a*c*t34971*t34989*(1.0/6.0)+b3a* \
                   c*t34922*t34971*(1.0/2.0)))/t35006-Aa*a1a*c*t34900*t34971*t34947*t34997*t35007*t35016*(2.0/3.0))+rho_b[index]* \
                   (-t35039+t34900*t34897*(t35039-(1.0/(t35024*t35024)*t35019*(b2f*c*t35028*(1.0/3.0)+b4f*t34881*t35029* \
                   (2.0/3.0)+b1f*c*t35030*t35028*(1.0/6.0)+b3f*c*t34904*t35028*(1.0/2.0)))/t35027+a1f*c*c0f*t35031*t35028* \
                   (2.0/3.0)-a1p*c*c0p*t34915*t35028*(2.0/3.0))+a1p*c*c0p*t34915*t35028*(2.0/3.0))+t34900*t34897*t35040- \
                   t34900*t34941*t34942*t34947*t34983)+(rho_b[index]*(t34918-t34900*t34897*t35040)+rho_a[index]*(t34968- \
                   t34900*t34897*(t34968-c0f*log((t34901*(1.0/2.0))/(b1f*t34879+b3f*t34880+b2f*c*t34877+b4f*t34881*t34882) \
                   +1.0)*(a1f*c*t34877+1.0)*2.0))-t34919*(t34936+t35041-t34900*t34941*t34942*t34947*t34983))*(ccab2*t34950* \
                   t34954*t34965*t34948*t34957-ccab2*1.0/(t34961*t34961*t34961)*t34964*t34948*t34957*t34958*2.0-ccab2* \
                   gamma_bb[index]*t34950*t34970*t34948*t34949*(4.0/3.0)+ccab1*gamma_bb[index]*t34950*t34948*t34949*t34969* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t34954*t34964*t34965*t34948*t34949*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   t34950*t34965*(t34948*t34948)*t34949*t34958*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t34950*t34954*t34948* \
                   t34949*1.0/(t34967*t34967*t34967)*(4.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35044 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35045 = c*t35044;
                double t35046 = sqrt(t35045);
                double t35047 = pow(t35045,3.0/2.0);
                double t35048 = c*c;
                double t35049 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35050 = 1.0/c0p;
                double t35051 = b1p*t35046;
                double t35052 = b3p*t35047;
                double t35053 = b4p*t35048*t35049;
                double t35054 = b2p*c*t35044;
                double t35055 = t35051+t35052+t35053+t35054;
                double t35056 = 1.0/t35055;
                double t35057 = t35050*t35056*(1.0/2.0);
                double t35058 = t35057+1.0;
                double t35059 = log(t35058);
                double t35060 = a1p*c*t35044;
                double t35061 = t35060+1.0;
                double t35062 = pow(2.0,1.0/3.0);
                double t35063 = t35062*2.0;
                double t35064 = t35063-2.0;
                double t35065 = two_13*2.0;
                double t35066 = t35065-2.0;
                double t35067 = 1.0/t35066;
                double t35068 = 1.0/c0f;
                double t35069 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35070 = c*t35069;
                double t35071 = sqrt(t35070);
                double t35072 = pow(t35070,3.0/2.0);
                double t35073 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35074 = b1p*t35071;
                double t35075 = b3p*t35072;
                double t35076 = b4p*t35073*t35048;
                double t35077 = b2p*c*t35069;
                double t35078 = t35074+t35075+t35076+t35077;
                double t35079 = 1.0/t35078;
                double t35080 = t35050*t35079*(1.0/2.0);
                double t35081 = t35080+1.0;
                double t35082 = log(t35081);
                double t35083 = a1p*c*t35069;
                double t35084 = t35083+1.0;
                double t35085 = c0p*t35082*t35084*2.0;
                double t35086 = rho_a[index]+rho_b[index];
                double t35087 = 1.0/pow(t35086,1.0/3.0);
                double t35088 = c*t35087;
                double t35089 = sqrt(t35088);
                double t35090 = pow(t35088,3.0/2.0);
                double t35091 = 1.0/pow(t35086,2.0/3.0);
                double t35092 = b1p*t35089;
                double t35093 = b3p*t35090;
                double t35094 = b4p*t35091*t35048;
                double t35095 = b2p*c*t35087;
                double t35096 = t35092+t35093+t35094+t35095;
                double t35097 = 1.0/t35096;
                double t35098 = t35050*t35097*(1.0/2.0);
                double t35099 = t35098+1.0;
                double t35100 = log(t35099);
                double t35101 = a1p*c*t35087;
                double t35102 = t35101+1.0;
                double t35103 = c0p*t35100*t35102*2.0;
                double t35104 = rho_a[index]-rho_b[index];
                double t35105 = t35104*t35104;
                double t35106 = 1.0/t35086;
                double t35107 = t35104*t35106;
                double t35108 = 1.0/(t35086*t35086*t35086*t35086);
                double t35109 = t35105*t35105;
                double t35110 = t35107+1.0;
                double t35111 = pow(t35110,4.0/3.0);
                double t35112 = -t35107+1.0;
                double t35113 = pow(t35112,4.0/3.0);
                double t35114 = t35111+t35113-2.0;
                double t35115 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t35116 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35117 = gamma_aa[index]*t35116*(1.0/2.0);
                double t35118 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35119 = gamma_bb[index]*t35118*(1.0/2.0);
                double t35120 = t35117+t35119;
                double t35121 = gcab*t35120;
                double t35122 = t35121+1.0;
                double t35123 = gcab*gcab;
                double t35124 = t35120*t35120;
                double t35125 = t35123*t35124;
                double t35126 = gcab*t35120*2.0;
                double t35127 = t35125+t35126+1.0;
                double t35128 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t35129 = 1.0/(t35122*t35122);
                double t35130 = 1.0/t35127;
                double t35131 = 1.0/(t35127*t35127);
                double t35132 = gamma_bb[index]*gcab*t35115*(8.0/3.0);
                double t35133 = gamma_bb[index]*t35120*t35123*t35115*(8.0/3.0);
                double t35134 = t35132+t35133;
                double t35135 = gcab*t35118;
                double t35136 = t35120*t35123*t35118;
                double t35137 = t35135+t35136;
                double t35138 = b1f*t35071;
                double t35139 = b3f*t35072;
                double t35140 = b4f*t35073*t35048;
                double t35141 = b2f*c*t35069;
                double t35142 = t35140+t35141+t35138+t35139;
                double t35143 = 1.0/t35142;
                double t35144 = t35143*t35068*(1.0/2.0);
                double t35145 = t35144+1.0;
                double t35146 = log(t35145);
                double t35147 = a1f*c*t35069;
                double t35148 = t35147+1.0;
                double t35218 = c0f*t35146*t35148*2.0;
                double t35149 = -t35218+t35085;
                double t35150 = t35085-t35064*t35067*t35149;
                double t35151 = gcaa*gcaa;
                double t35152 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35153 = gamma_bb[index]*gcaa*t35118;
                double t35154 = t35153+1.0;
                double t35155 = gamma_bb[index]*gamma_bb[index];
                double t35156 = gamma_bb[index]*gcaa*t35118*2.0;
                double t35157 = t35151*t35152*t35155;
                double t35158 = t35156+t35157+1.0;
                double t35159 = 1.0/t35122;
                double t35160 = 1.0/pow(t35086,4.0/3.0);
                double t35161 = b1f*t35089;
                double t35162 = b3f*t35090;
                double t35163 = b4f*t35091*t35048;
                double t35164 = b2f*c*t35087;
                double t35165 = t35161+t35162+t35163+t35164;
                double t35166 = 1.0/t35165;
                double t35167 = t35166*t35068*(1.0/2.0);
                double t35168 = t35167+1.0;
                double t35169 = log(t35168);
                double t35170 = a1f*c*t35087;
                double t35171 = t35170+1.0;
                double t35173 = c0f*t35171*t35169*2.0;
                double t35172 = t35103-t35173;
                double t35174 = 1.0/(t35086*t35086);
                double t35175 = t35104*t35174;
                double t35176 = t35106+t35175;
                double t35177 = 1.0/pow(t35086,5.0/3.0);
                double t35178 = 1.0/sqrt(t35088);
                double t35179 = 1.0/t35099;
                double t35180 = 1.0/(t35096*t35096);
                double t35181 = b4p*t35048*t35177*(2.0/3.0);
                double t35182 = b2p*c*t35160*(1.0/3.0);
                double t35183 = b1p*c*t35160*t35178*(1.0/6.0);
                double t35184 = b3p*c*t35160*t35089*(1.0/2.0);
                double t35185 = t35181+t35182+t35183+t35184;
                double t35186 = 1.0/d2fz0;
                double t35187 = 1.0/Aa;
                double t35188 = b1a*t35089;
                double t35189 = b3a*t35090;
                double t35190 = b4a*t35091*t35048;
                double t35191 = b2a*c*t35087;
                double t35192 = t35190+t35191+t35188+t35189;
                double t35193 = 1.0/t35192;
                double t35194 = t35193*t35187*(1.0/2.0);
                double t35195 = t35194+1.0;
                double t35196 = log(t35195);
                double t35197 = a1a*c*t35087;
                double t35198 = t35197+1.0;
                double t35199 = 1.0/(t35086*t35086*t35086*t35086*t35086);
                double t35200 = pow(t35110,1.0/3.0);
                double t35201 = t35200*t35176*(4.0/3.0);
                double t35202 = pow(t35112,1.0/3.0);
                double t35203 = t35201-t35202*t35176*(4.0/3.0);
                double t35204 = t35108*t35109;
                double t35205 = t35204-1.0;
                double t35206 = t35102*t35180*t35185*t35179;
                double t35207 = 1.0/pow(rho_b[index],4.0/3.0);
                double t35208 = 1.0/pow(rho_b[index],5.0/3.0);
                double t35209 = 1.0/sqrt(t35070);
                double t35210 = 1.0/t35081;
                double t35211 = 1.0/(t35078*t35078);
                double t35212 = b4p*t35208*t35048*(2.0/3.0);
                double t35213 = b2p*c*t35207*(1.0/3.0);
                double t35214 = b1p*c*t35207*t35209*(1.0/6.0);
                double t35215 = b3p*c*t35071*t35207*(1.0/2.0);
                double t35216 = t35212+t35213+t35214+t35215;
                double t35217 = t35210*t35211*t35216*t35084;
                double t35219 = Aa*t35114*t35205*t35067*t35186*t35196*t35198*2.0;
                double t35220 = t35218-t35085;
                double t35221 = 1.0/t35154;
                double t35222 = 1.0/t35158;
                double t35223 = 1.0/(t35154*t35154);
                double t35224 = 1.0/(t35158*t35158);
                double t35225 = gcaa*t35118*2.0;
                double t35226 = gamma_bb[index]*t35151*t35152*2.0;
                double t35227 = t35225+t35226;
                double t35228 = gamma_bb[index]*gcaa*t35115*(1.6E1/3.0);
                double t35229 = t35151*t35128*t35155*(1.6E1/3.0);
                double t35230 = t35228+t35229;
                double t35231 = gx*gx;
                double t35232 = gamma_bb[index]*gx*t35118;
                double t35233 = t35232+1.0;
                double t35234 = gamma_bb[index]*gx*t35118*2.0;
                double t35235 = t35231*t35152*t35155;
                double t35236 = t35234+t35235+1.0;
                double t35237 = 1.0/t35145;
                double t35238 = 1.0/(t35142*t35142);
                double t35239 = b4f*t35208*t35048*(2.0/3.0);
                double t35240 = b2f*c*t35207*(1.0/3.0);
                double t35241 = b1f*c*t35207*t35209*(1.0/6.0);
                double t35242 = b3f*c*t35071*t35207*(1.0/2.0);
                double t35243 = t35240+t35241+t35242+t35239;
                double t35244 = a1f*c*c0f*t35207*t35146*(2.0/3.0);
                double t35245 = a1p*c*c0p*t35207*t35082*(2.0/3.0);
                double t35246 = ccaa1*gcaa*t35221*t35118;
                double t35247 = ccaa2*gamma_bb[index]*t35222*t35151*t35152*2.0;
                double t35248 = t35246+t35247-ccaa1*gamma_bb[index]*t35151*t35223*t35152-ccaa2*t35151*t35152*t35224* \
                   t35155*t35227;
                double t35249 = 1.0/t35233;
                double t35250 = 1.0/t35236;
                double t35251 = 1.0/(t35233*t35233);
                double t35252 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t35253 = 1.0/(t35236*t35236);
                double t35254 = gx*t35118*2.0;
                double t35255 = gamma_bb[index]*t35231*t35152*2.0;
                double t35256 = t35254+t35255;
                double t35257 = gamma_bb[index]*gx*t35115*(1.6E1/3.0);
                double t35258 = t35231*t35128*t35155*(1.6E1/3.0);
                double t35259 = t35257+t35258;
                v_rho_b_gamma_bb_[index] = -(ccab1*gcab*t35118*t35159*(1.0/2.0)+ccab2*t35120*t35130*t35123*t35118- \
                   ccab2*t35131*t35123*t35124*t35137-ccab1*t35120*t35123*t35118*t35129*(1.0/2.0))*(t35103+t35219-t35085+ \
                   t35086*(t35206-t35114*t35108*t35109*t35067*(t35206-(t35171*1.0/(t35165*t35165)*(b2f*c*t35160*(1.0/ \
                   3.0)+b4f*t35048*t35177*(2.0/3.0)+b1f*c*t35160*t35178*(1.0/6.0)+b3f*c*t35160*t35089*(1.0/2.0)))/t35168+ \
                   a1f*c*c0f*t35160*t35169*(2.0/3.0)-a1p*c*c0p*t35100*t35160*(2.0/3.0))-a1p*c*c0p*t35100*t35160*(2.0/ \
                   3.0)+t35203*t35108*t35109*t35172*t35067+t35114*t35109*t35172*t35067*t35199*4.0+t35104*t35105*t35114* \
                   t35108*t35172*t35067*4.0-Aa*t35114*t35067*t35186*t35196*t35198*(t35109*t35199*4.0+t35104*t35105*t35108* \
                   4.0)*2.0-Aa*t35203*t35205*t35067*t35186*t35196*t35198*2.0+(t35114*t35205*1.0/(t35192*t35192)*t35067* \
                   t35186*t35198*(b2a*c*t35160*(1.0/3.0)+b4a*t35048*t35177*(2.0/3.0)+b1a*c*t35160*t35178*(1.0/6.0)+b3a* \
                   c*t35160*t35089*(1.0/2.0)))/t35195-Aa*a1a*c*t35114*t35160*t35205*t35067*t35186*t35196*(2.0/3.0))+rho_b[index]* \
                   (-t35217+t35245+t35064*t35067*(t35217+t35244-t35243*t35237*t35148*t35238-a1p*c*c0p*t35207*t35082*(2.0/ \
                   3.0)))-t35220*t35064*t35067-t35114*t35108*t35109*t35172*t35067)+(-rho_b[index]*t35150+t35086*(t35103+ \
                   t35219-t35114*t35108*t35109*t35172*t35067)+rho_a[index]*(t35064*t35067*(c0p*t35061*t35059*2.0-c0f* \
                   log((t35068*(1.0/2.0))/(b1f*t35046+b3f*t35047+b2f*c*t35044+b4f*t35048*t35049)+1.0)*(a1f*c*t35044+1.0) \
                   *2.0)-c0p*t35061*t35059*2.0))*(ccab1*gcab*t35115*t35159*(4.0/3.0)-ccab2*t35131*t35123*t35124*(gcab* \
                   t35115*(8.0/3.0)+gamma_bb[index]*t35123*t35128*(4.0/3.0)+t35120*t35123*t35115*(8.0/3.0))+ccab2*gamma_bb[index]* \
                   t35130*t35123*t35128*(4.0/3.0)-ccab1*gamma_bb[index]*t35123*t35128*t35129*(4.0/3.0)+ccab2*t35120*t35130* \
                   t35123*t35115*(8.0/3.0)-ccab1*t35120*t35123*t35115*t35129*(4.0/3.0)-ccab2*t35120*t35131*t35123*t35134* \
                   t35118+ccab2*t35123*t35124*t35134*1.0/(t35127*t35127*t35127)*t35137*2.0-ccab2*gamma_bb[index]*t35120* \
                   t35131*t35123*t35115*t35137*(8.0/3.0)+ccab1*gamma_bb[index]*gcab*t35120*1.0/(t35122*t35122*t35122) \
                   *t35123*t35128*(4.0/3.0))-t35150*t35248+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t35118*t35249-cx1*gamma_bb[index]* \
                   t35231*t35152*t35251+cx2*gamma_bb[index]*t35231*t35250*t35152*2.0-cx2*t35231*t35152*t35253*t35155* \
                   t35256)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t35115*t35249*(8.0/3.0)-cx1*gamma_bb[index]* \
                   t35231*t35251*t35128*8.0+cx2*gamma_bb[index]*t35231*t35250*t35128*(3.2E1/3.0)-cx2*t35231*t35253*t35128* \
                   t35155*t35256*(1.6E1/3.0)+cx1*gx*t35231*1.0/(t35233*t35233*t35233)*t35252*t35155*(1.6E1/3.0)-cx2*t35231* \
                   t35152*t35253*t35155*(gx*t35115*(1.6E1/3.0)+gamma_bb[index]*t35231*t35128*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t35231*t35152*t35253*t35259*2.0+cx2*t35231*t35152*t35155*1.0/(t35236*t35236*t35236)*t35256*t35259* \
                   2.0)+rho_b[index]*t35248*(-t35217+t35245+t35064*t35067*(t35217+t35244-t35245-t35243*t35237*t35148* \
                   t35238))+rho_b[index]*(t35085+t35220*t35064*t35067)*(ccaa1*gcaa*t35221*t35115*(8.0/3.0)-ccaa1*gamma_bb[index]* \
                   t35151*t35223*t35128*8.0+ccaa2*gamma_bb[index]*t35222*t35151*t35128*(3.2E1/3.0)-ccaa2*t35151*t35224* \
                   t35128*t35155*t35227*(1.6E1/3.0)+ccaa1*gcaa*t35151*t35252*1.0/(t35154*t35154*t35154)*t35155*(1.6E1/ \
                   3.0)-ccaa2*t35151*t35152*t35224*t35155*(gcaa*t35115*(1.6E1/3.0)+gamma_bb[index]*t35151*t35128*(3.2E1/ \
                   3.0))-ccaa2*gamma_bb[index]*t35230*t35151*t35152*t35224*2.0+ccaa2*t35230*t35151*t35152*t35155*t35227* \
                   1.0/(t35158*t35158*t35158)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t35877 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35878 = c*t35877;
                double t35879 = sqrt(t35878);
                double t35880 = pow(t35878,3.0/2.0);
                double t35881 = c*c;
                double t35882 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35883 = 1.0/c0p;
                double t35884 = b1p*t35879;
                double t35885 = b3p*t35880;
                double t35886 = b4p*t35881*t35882;
                double t35887 = b2p*c*t35877;
                double t35888 = t35884+t35885+t35886+t35887;
                double t35889 = 1.0/t35888;
                double t35890 = t35883*t35889*(1.0/2.0);
                double t35891 = t35890+1.0;
                double t35892 = log(t35891);
                double t35893 = a1p*c*t35877;
                double t35894 = t35893+1.0;
                double t35895 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35896 = gcaa*gcaa;
                double t35897 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35898 = gamma_bb[index]*gcaa*t35895;
                double t35899 = t35898+1.0;
                double t35900 = gamma_bb[index]*gamma_bb[index];
                double t35901 = gamma_bb[index]*gcaa*t35895*2.0;
                double t35902 = t35900*t35896*t35897;
                double t35903 = t35901+t35902+1.0;
                double t35904 = pow(2.0,1.0/3.0);
                double t35905 = t35904*2.0;
                double t35906 = t35905-2.0;
                double t35907 = two_13*2.0;
                double t35908 = t35907-2.0;
                double t35909 = 1.0/t35908;
                double t35910 = 1.0/c0f;
                double t35911 = b1f*t35879;
                double t35912 = b3f*t35880;
                double t35913 = b4f*t35881*t35882;
                double t35914 = b2f*c*t35877;
                double t35915 = t35911+t35912+t35913+t35914;
                double t35916 = 1.0/t35915;
                double t35917 = t35910*t35916*(1.0/2.0);
                double t35918 = t35917+1.0;
                double t35919 = log(t35918);
                double t35920 = a1f*c*t35877;
                double t35921 = t35920+1.0;
                double t35922 = c0f*t35921*t35919*2.0;
                double t35923 = c0p*t35892*t35894*2.0;
                double t35924 = 1.0/t35899;
                double t35925 = 1.0/t35903;
                double t35926 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t35927 = 1.0/(t35899*t35899);
                double t35928 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t35929 = 1.0/(t35903*t35903);
                double t35930 = gcaa*t35895*2.0;
                double t35931 = gamma_bb[index]*t35896*t35897*2.0;
                double t35932 = t35930+t35931;
                double t35933 = gamma_bb[index]*gcaa*t35928*(1.6E1/3.0);
                double t35934 = t35900*t35926*t35896*(1.6E1/3.0);
                double t35935 = t35933+t35934;
                double t35936 = gx*gx;
                double t35937 = gamma_bb[index]*gx*t35895;
                double t35938 = t35937+1.0;
                double t35939 = gamma_bb[index]*gx*t35895*2.0;
                double t35940 = t35900*t35936*t35897;
                double t35941 = t35940+t35939+1.0;
                double t35942 = 1.0/pow(rho_b[index],4.0/3.0);
                double t35943 = 1.0/pow(rho_b[index],5.0/3.0);
                double t35944 = 1.0/sqrt(t35878);
                double t35945 = 1.0/t35891;
                double t35946 = 1.0/(t35888*t35888);
                double t35947 = b4p*t35943*t35881*(2.0/3.0);
                double t35948 = b2p*c*t35942*(1.0/3.0);
                double t35949 = b1p*c*t35942*t35944*(1.0/6.0);
                double t35950 = b3p*c*t35942*t35879*(1.0/2.0);
                double t35951 = t35950+t35947+t35948+t35949;
                double t35952 = t35951*t35945*t35946*t35894;
                double t35953 = ccaa1*gcaa*t35924*t35895;
                double t35954 = ccaa2*gamma_bb[index]*t35925*t35896*t35897*2.0;
                double t35955 = t35953+t35954-ccaa1*gamma_bb[index]*t35927*t35896*t35897-ccaa2*t35900*t35932*t35929* \
                   t35896*t35897;
                double t35956 = 1.0/t35938;
                double t35957 = 1.0/t35941;
                double t35958 = 1.0/(t35938*t35938);
                double t35959 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t35960 = 1.0/(t35941*t35941);
                double t35961 = gx*t35895*2.0;
                double t35962 = gamma_bb[index]*t35936*t35897*2.0;
                double t35963 = t35961+t35962;
                double t35964 = gamma_bb[index]*gx*t35928*(1.6E1/3.0);
                double t35965 = t35900*t35926*t35936*(1.6E1/3.0);
                double t35966 = t35964+t35965;
                v_rho_b_gamma_bb_[index] = -t35955*(t35923+t35906*t35909*(t35922-c0p*t35892*t35894*2.0))+rho_b[index]* \
                   t35955*(-t35952+t35906*t35909*(t35952-(t35921*1.0/(t35915*t35915)*(b2f*c*t35942*(1.0/3.0)+b4f*t35943* \
                   t35881*(2.0/3.0)+b1f*c*t35942*t35944*(1.0/6.0)+b3f*c*t35942*t35879*(1.0/2.0)))/t35918+a1f*c*c0f*t35942* \
                   t35919*(2.0/3.0)-a1p*c*c0p*t35942*t35892*(2.0/3.0))+a1p*c*c0p*t35942*t35892*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t35956*t35895-cx1*gamma_bb[index]*t35936*t35958*t35897+cx2*gamma_bb[index]*t35936*t35957* \
                   t35897*2.0-cx2*t35900*t35960*t35936*t35963*t35897)*(4.0/3.0)+rho_b[index]*(t35923+t35906*t35909*(t35922- \
                   t35923))*(ccaa1*gcaa*t35924*t35928*(8.0/3.0)+ccaa2*gamma_bb[index]*t35925*t35926*t35896*(3.2E1/3.0) \
                   -ccaa1*gamma_bb[index]*t35926*t35927*t35896*8.0-ccaa2*t35900*t35932*t35926*t35929*t35896*(1.6E1/3.0) \
                   +ccaa1*gcaa*t35900*t35896*t35959*1.0/(t35899*t35899*t35899)*(1.6E1/3.0)-ccaa2*t35900*t35929*t35896* \
                   t35897*(gcaa*t35928*(1.6E1/3.0)+gamma_bb[index]*t35926*t35896*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t35935* \
                   t35929*t35896*t35897*2.0+ccaa2*t35900*1.0/(t35903*t35903*t35903)*t35932*t35935*t35896*t35897*2.0)- \
                   c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t35928*t35956*(8.0/3.0)-cx1*gamma_bb[index]*t35926*t35936*t35958* \
                   8.0+cx2*gamma_bb[index]*t35926*t35936*t35957*(3.2E1/3.0)-cx2*t35900*t35960*t35926*t35936*t35963*(1.6E1/ \
                   3.0)+cx1*gx*t35900*t35936*1.0/(t35938*t35938*t35938)*t35959*(1.6E1/3.0)-cx2*t35900*t35960*t35936*t35897* \
                   (gx*t35928*(1.6E1/3.0)+gamma_bb[index]*t35926*t35936*(3.2E1/3.0))-cx2*gamma_bb[index]*t35960*t35936* \
                   t35966*t35897*2.0+cx2*t35900*1.0/(t35941*t35941*t35941)*t35936*t35963*t35966*t35897*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35261 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35262 = c*t35261;
                double t35263 = sqrt(t35262);
                double t35264 = pow(t35262,3.0/2.0);
                double t35265 = c*c;
                double t35266 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35267 = 1.0/c0p;
                double t35268 = b1p*t35263;
                double t35269 = b3p*t35264;
                double t35270 = b4p*t35265*t35266;
                double t35271 = b2p*c*t35261;
                double t35272 = t35270+t35271+t35268+t35269;
                double t35273 = 1.0/t35272;
                double t35274 = t35273*t35267*(1.0/2.0);
                double t35275 = t35274+1.0;
                double t35276 = log(t35275);
                double t35277 = a1p*c*t35261;
                double t35278 = t35277+1.0;
                double t35279 = pow(2.0,1.0/3.0);
                double t35280 = t35279*2.0;
                double t35281 = t35280-2.0;
                double t35282 = two_13*2.0;
                double t35283 = t35282-2.0;
                double t35284 = 1.0/t35283;
                double t35285 = 1.0/c0f;
                double t35286 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35287 = c*t35286;
                double t35288 = sqrt(t35287);
                double t35289 = pow(t35287,3.0/2.0);
                double t35290 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35291 = b1p*t35288;
                double t35292 = b3p*t35289;
                double t35293 = b4p*t35290*t35265;
                double t35294 = b2p*c*t35286;
                double t35295 = t35291+t35292+t35293+t35294;
                double t35296 = 1.0/t35295;
                double t35297 = t35267*t35296*(1.0/2.0);
                double t35298 = t35297+1.0;
                double t35299 = log(t35298);
                double t35300 = a1p*c*t35286;
                double t35301 = t35300+1.0;
                double t35302 = c0p*t35301*t35299*2.0;
                double t35303 = rho_a[index]+rho_b[index];
                double t35304 = 1.0/pow(t35303,1.0/3.0);
                double t35305 = c*t35304;
                double t35306 = sqrt(t35305);
                double t35307 = pow(t35305,3.0/2.0);
                double t35308 = 1.0/pow(t35303,2.0/3.0);
                double t35309 = b1p*t35306;
                double t35310 = b3p*t35307;
                double t35311 = b4p*t35308*t35265;
                double t35312 = b2p*c*t35304;
                double t35313 = t35310+t35311+t35312+t35309;
                double t35314 = 1.0/t35313;
                double t35315 = t35314*t35267*(1.0/2.0);
                double t35316 = t35315+1.0;
                double t35317 = log(t35316);
                double t35318 = a1p*c*t35304;
                double t35319 = t35318+1.0;
                double t35320 = c0p*t35317*t35319*2.0;
                double t35321 = rho_a[index]-rho_b[index];
                double t35322 = t35321*t35321;
                double t35323 = 1.0/t35303;
                double t35324 = t35321*t35323;
                double t35325 = 1.0/(t35303*t35303*t35303*t35303);
                double t35326 = t35322*t35322;
                double t35327 = t35324+1.0;
                double t35328 = pow(t35327,4.0/3.0);
                double t35329 = -t35324+1.0;
                double t35330 = pow(t35329,4.0/3.0);
                double t35331 = t35330+t35328-2.0;
                double t35332 = gcab*gcab;
                double t35333 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t35334 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35335 = gamma_aa[index]*t35334*(1.0/2.0);
                double t35336 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35337 = gamma_bb[index]*t35336*(1.0/2.0);
                double t35338 = t35335+t35337;
                double t35339 = gcab*t35338;
                double t35340 = t35339+1.0;
                double t35341 = t35338*t35338;
                double t35342 = t35332*t35341;
                double t35343 = gcab*t35338*2.0;
                double t35344 = t35342+t35343+1.0;
                double t35346 = gcab*t35334;
                double t35347 = t35332*t35334*t35338;
                double t35345 = t35346+t35347;
                double t35348 = 1.0/(t35344*t35344);
                double t35349 = b1f*t35263;
                double t35350 = b3f*t35264;
                double t35351 = b4f*t35265*t35266;
                double t35352 = b2f*c*t35261;
                double t35353 = t35350+t35351+t35352+t35349;
                double t35354 = 1.0/t35353;
                double t35355 = t35354*t35285*(1.0/2.0);
                double t35356 = t35355+1.0;
                double t35357 = log(t35356);
                double t35358 = a1f*c*t35261;
                double t35359 = t35358+1.0;
                double t35360 = c0f*t35357*t35359*2.0;
                double t35361 = c0p*t35276*t35278*2.0;
                double t35362 = gcaa*gcaa;
                double t35363 = gamma_aa[index]*gcaa*t35334;
                double t35364 = t35363+1.0;
                double t35365 = gamma_aa[index]*gamma_aa[index];
                double t35366 = gamma_aa[index]*gcaa*t35334*2.0;
                double t35367 = t35333*t35362*t35365;
                double t35368 = t35366+t35367+1.0;
                double t35370 = gcaa*t35334*2.0;
                double t35371 = gamma_aa[index]*t35333*t35362*2.0;
                double t35369 = t35370+t35371;
                double t35372 = 1.0/(t35368*t35368);
                double t35373 = gx*gx;
                double t35374 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t35375 = gamma_aa[index]*gx*t35334;
                double t35376 = t35375+1.0;
                double t35377 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t35378 = gamma_aa[index]*gx*t35334*2.0;
                double t35379 = t35333*t35373*t35365;
                double t35380 = t35378+t35379+1.0;
                double t35382 = gx*t35334*2.0;
                double t35383 = gamma_aa[index]*t35333*t35373*2.0;
                double t35381 = t35382+t35383;
                double t35384 = 1.0/(t35380*t35380);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t35361+t35281*t35284*(t35360-c0p*t35276*t35278*2.0) \
                   )+rho_b[index]*(t35302-t35281*t35284*(t35302-c0f*log((t35285*(1.0/2.0))/(b1f*t35288+b3f*t35289+b2f* \
                   c*t35286+b4f*t35290*t35265)+1.0)*(a1f*c*t35286+1.0)*2.0))-t35303*(t35320-t35331*t35325*t35326*t35284* \
                   (t35320-c0f*log((t35285*(1.0/2.0))/(b1f*t35306+b3f*t35307+b2f*c*t35304+b4f*t35308*t35265)+1.0)*(a1f* \
                   c*t35304+1.0)*2.0)+(Aa*t35331*t35284*log((1.0/2.0)/(Aa*(b1a*t35306+b3a*t35307+b2a*c*t35304+b4a*t35308* \
                   t35265))+1.0)*(t35325*t35326-1.0)*(a1a*c*t35304+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t35340*t35340)*t35332* \
                   t35333*(1.0/2.0)-(ccab2*t35332*t35333*(1.0/2.0))/t35344-ccab2*t35332*t35341*1.0/(t35344*t35344*t35344) \
                   *(t35345*t35345)*2.0+ccab2*(t35332*t35332)*t35341*t35333*t35348*(1.0/2.0)+ccab2*t35332*t35334*t35345* \
                   t35338*t35348*2.0-ccab1*gcab*1.0/(t35340*t35340*t35340)*t35332*t35333*t35338*(1.0/2.0))+rho_a[index]* \
                   (t35361+t35281*t35284*(t35360-t35361))*(ccaa1*t35333*t35362*1.0/(t35364*t35364)*2.0-(ccaa2*t35333* \
                   t35362*2.0)/t35368+ccaa2*(t35362*t35362)*t35372*t35365*t35377*2.0-ccaa1*gamma_aa[index]*gcaa*t35362* \
                   1.0/(t35364*t35364*t35364)*t35374*2.0-ccaa2*t35333*t35362*t35365*1.0/(t35368*t35368*t35368)*(t35369* \
                   t35369)*2.0+ccaa2*gamma_aa[index]*t35333*t35362*t35372*t35369*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   t35333*t35373*1.0/(t35376*t35376)*2.0-(cx2*t35333*t35373*2.0)/t35380+cx2*(t35373*t35373)*t35365*t35384* \
                   t35377*2.0-cx1*gamma_aa[index]*gx*t35373*t35374*1.0/(t35376*t35376*t35376)*2.0-cx2*t35333*1.0/(t35380* \
                   t35380*t35380)*(t35381*t35381)*t35373*t35365*2.0+cx2*gamma_aa[index]*t35333*t35381*t35373*t35384*4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t36379 = 1.0/pow(rho_a[index],1.0/3.0);
                double t36380 = c*t36379;
                double t36381 = sqrt(t36380);
                double t36382 = pow(t36380,3.0/2.0);
                double t36383 = c*c;
                double t36384 = 1.0/pow(rho_a[index],2.0/3.0);
                double t36385 = 1.0/c0p;
                double t36386 = b1p*t36381;
                double t36387 = b3p*t36382;
                double t36388 = b4p*t36383*t36384;
                double t36389 = b2p*c*t36379;
                double t36390 = t36386+t36387+t36388+t36389;
                double t36391 = 1.0/t36390;
                double t36392 = t36391*t36385*(1.0/2.0);
                double t36393 = t36392+1.0;
                double t36394 = log(t36393);
                double t36395 = a1p*c*t36379;
                double t36396 = t36395+1.0;
                double t36397 = gcaa*gcaa;
                double t36398 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t36399 = 1.0/pow(rho_a[index],8.0/3.0);
                double t36400 = gamma_aa[index]*gcaa*t36399;
                double t36401 = t36400+1.0;
                double t36402 = gamma_aa[index]*gamma_aa[index];
                double t36403 = gamma_aa[index]*gcaa*t36399*2.0;
                double t36404 = t36402*t36397*t36398;
                double t36405 = t36403+t36404+1.0;
                double t36407 = gcaa*t36399*2.0;
                double t36408 = gamma_aa[index]*t36397*t36398*2.0;
                double t36406 = t36407+t36408;
                double t36409 = 1.0/(t36405*t36405);
                double t36410 = gx*gx;
                double t36411 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t36412 = gamma_aa[index]*gx*t36399;
                double t36413 = t36412+1.0;
                double t36414 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t36415 = gamma_aa[index]*gx*t36399*2.0;
                double t36416 = t36410*t36402*t36398;
                double t36417 = t36415+t36416+1.0;
                double t36419 = gx*t36399*2.0;
                double t36420 = gamma_aa[index]*t36410*t36398*2.0;
                double t36418 = t36420+t36419;
                double t36421 = 1.0/(t36417*t36417);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t36381+b3f*t36382+b2f*c*t36379+b4f*t36383*t36384))+1.0)*(a1f*c*t36379+1.0)*2.0-c0p*t36394*t36396*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t36394*t36396*2.0)*(ccaa1*1.0/(t36401*t36401)*t36397*t36398*2.0-(ccaa2*t36397* \
                   t36398*2.0)/t36405+ccaa2*t36402*t36414*t36409*(t36397*t36397)*2.0-ccaa1*gamma_aa[index]*gcaa*1.0/(t36401* \
                   t36401*t36401)*t36411*t36397*2.0-ccaa2*t36402*1.0/(t36405*t36405*t36405)*(t36406*t36406)*t36397*t36398* \
                   2.0+ccaa2*gamma_aa[index]*t36406*t36409*t36397*t36398*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*t36410* \
                   1.0/(t36413*t36413)*t36398*2.0-(cx2*t36410*t36398*2.0)/t36417+cx2*(t36410*t36410)*t36402*t36421*t36414* \
                   2.0-cx1*gamma_aa[index]*gx*t36410*t36411*1.0/(t36413*t36413*t36413)*2.0-cx2*t36410*t36402*1.0/(t36417* \
                   t36417*t36417)*(t36418*t36418)*t36398*2.0+cx2*gamma_aa[index]*t36410*t36421*t36418*t36398*4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35387 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35388 = c*t35387;
                double t35389 = sqrt(t35388);
                double t35390 = pow(t35388,3.0/2.0);
                double t35391 = c*c;
                double t35392 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35393 = 1.0/c0p;
                double t35394 = b1p*t35389;
                double t35395 = b3p*t35390;
                double t35396 = b4p*t35391*t35392;
                double t35397 = b2p*c*t35387;
                double t35398 = t35394+t35395+t35396+t35397;
                double t35399 = 1.0/t35398;
                double t35400 = t35393*t35399*(1.0/2.0);
                double t35401 = t35400+1.0;
                double t35402 = log(t35401);
                double t35403 = a1p*c*t35387;
                double t35404 = t35403+1.0;
                double t35405 = pow(2.0,1.0/3.0);
                double t35406 = t35405*2.0;
                double t35407 = t35406-2.0;
                double t35408 = two_13*2.0;
                double t35409 = t35408-2.0;
                double t35410 = 1.0/t35409;
                double t35411 = 1.0/c0f;
                double t35412 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35413 = c*t35412;
                double t35414 = sqrt(t35413);
                double t35415 = pow(t35413,3.0/2.0);
                double t35416 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35417 = b1p*t35414;
                double t35418 = b3p*t35415;
                double t35419 = b4p*t35416*t35391;
                double t35420 = b2p*c*t35412;
                double t35421 = t35420+t35417+t35418+t35419;
                double t35422 = 1.0/t35421;
                double t35423 = t35422*t35393*(1.0/2.0);
                double t35424 = t35423+1.0;
                double t35425 = log(t35424);
                double t35426 = a1p*c*t35412;
                double t35427 = t35426+1.0;
                double t35428 = c0p*t35425*t35427*2.0;
                double t35429 = rho_a[index]+rho_b[index];
                double t35430 = 1.0/pow(t35429,1.0/3.0);
                double t35431 = c*t35430;
                double t35432 = sqrt(t35431);
                double t35433 = pow(t35431,3.0/2.0);
                double t35434 = 1.0/pow(t35429,2.0/3.0);
                double t35435 = b1p*t35432;
                double t35436 = b3p*t35433;
                double t35437 = b4p*t35434*t35391;
                double t35438 = b2p*c*t35430;
                double t35439 = t35435+t35436+t35437+t35438;
                double t35440 = 1.0/t35439;
                double t35441 = t35440*t35393*(1.0/2.0);
                double t35442 = t35441+1.0;
                double t35443 = log(t35442);
                double t35444 = a1p*c*t35430;
                double t35445 = t35444+1.0;
                double t35446 = c0p*t35443*t35445*2.0;
                double t35447 = rho_a[index]-rho_b[index];
                double t35448 = t35447*t35447;
                double t35449 = 1.0/t35429;
                double t35450 = t35447*t35449;
                double t35451 = 1.0/(t35429*t35429*t35429*t35429);
                double t35452 = t35448*t35448;
                double t35453 = t35450+1.0;
                double t35454 = pow(t35453,4.0/3.0);
                double t35455 = -t35450+1.0;
                double t35456 = pow(t35455,4.0/3.0);
                double t35457 = t35454+t35456-2.0;
                double t35458 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35459 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35460 = gcab*gcab;
                double t35461 = gamma_aa[index]*t35458*(1.0/2.0);
                double t35462 = gamma_bb[index]*t35459*(1.0/2.0);
                double t35463 = t35461+t35462;
                double t35464 = t35463*t35463;
                double t35465 = t35460*t35464;
                double t35466 = gcab*t35463*2.0;
                double t35467 = t35465+t35466+1.0;
                double t35468 = 1.0/(t35467*t35467);
                double t35469 = gcab*t35458;
                double t35470 = t35460*t35463*t35458;
                double t35471 = t35470+t35469;
                double t35472 = gcab*t35459;
                double t35473 = t35460*t35463*t35459;
                double t35474 = t35472+t35473;
                double t35475 = gcab*t35463;
                double t35476 = t35475+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t35428-t35410*t35407*(t35428-c0f*log((t35411*(1.0/2.0) \
                   )/(b1f*t35414+b3f*t35415+b2f*c*t35412+b4f*t35416*t35391)+1.0)*(a1f*c*t35412+1.0)*2.0))+t35429*(t35446- \
                   t35410*t35451*t35452*t35457*(t35446-c0f*log((t35411*(1.0/2.0))/(b1f*t35432+b3f*t35433+b2f*c*t35430+ \
                   b4f*t35434*t35391)+1.0)*(a1f*c*t35430+1.0)*2.0)+(Aa*t35410*t35457*log((1.0/2.0)/(Aa*(b1a*t35432+b3a* \
                   t35433+b2a*c*t35430+b4a*t35434*t35391))+1.0)*(t35451*t35452-1.0)*(a1a*c*t35430+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t35410*t35407*(c0p*t35402*t35404*2.0-c0f*log((t35411*(1.0/2.0))/(b1f*t35389+b3f*t35390+b2f*c*t35387+ \
                   b4f*t35391*t35392)+1.0)*(a1f*c*t35387+1.0)*2.0)-c0p*t35402*t35404*2.0))*(ccab1*t35460*t35458*1.0/(t35476* \
                   t35476)*t35459*(1.0/2.0)-(ccab2*t35460*t35458*t35459*(1.0/2.0))/t35467+ccab2*t35460*t35471*t35463* \
                   t35459*t35468+ccab2*t35460*t35463*t35474*t35458*t35468-ccab2*t35460*t35471*t35464*t35474*1.0/(t35467* \
                   t35467*t35467)*2.0+ccab2*(t35460*t35460)*t35464*t35458*t35459*t35468*(1.0/2.0)-ccab1*gcab*t35460*t35463* \
                   t35458*1.0/(t35476*t35476*t35476)*t35459*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t35480 = 1.0/pow(rho_a[index],1.0/3.0);
                double t35481 = c*t35480;
                double t35482 = sqrt(t35481);
                double t35483 = pow(t35481,3.0/2.0);
                double t35484 = c*c;
                double t35485 = 1.0/pow(rho_a[index],2.0/3.0);
                double t35486 = 1.0/c0p;
                double t35487 = b1p*t35482;
                double t35488 = b3p*t35483;
                double t35489 = b4p*t35484*t35485;
                double t35490 = b2p*c*t35480;
                double t35491 = t35490+t35487+t35488+t35489;
                double t35492 = 1.0/t35491;
                double t35493 = t35492*t35486*(1.0/2.0);
                double t35494 = t35493+1.0;
                double t35495 = log(t35494);
                double t35496 = a1p*c*t35480;
                double t35497 = t35496+1.0;
                double t35498 = pow(2.0,1.0/3.0);
                double t35499 = t35498*2.0;
                double t35500 = t35499-2.0;
                double t35501 = two_13*2.0;
                double t35502 = t35501-2.0;
                double t35503 = 1.0/t35502;
                double t35504 = 1.0/c0f;
                double t35505 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35506 = c*t35505;
                double t35507 = sqrt(t35506);
                double t35508 = pow(t35506,3.0/2.0);
                double t35509 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35510 = b1p*t35507;
                double t35511 = b3p*t35508;
                double t35512 = b4p*t35509*t35484;
                double t35513 = b2p*c*t35505;
                double t35514 = t35510+t35511+t35512+t35513;
                double t35515 = 1.0/t35514;
                double t35516 = t35515*t35486*(1.0/2.0);
                double t35517 = t35516+1.0;
                double t35518 = log(t35517);
                double t35519 = a1p*c*t35505;
                double t35520 = t35519+1.0;
                double t35521 = c0p*t35520*t35518*2.0;
                double t35522 = rho_a[index]+rho_b[index];
                double t35523 = 1.0/pow(t35522,1.0/3.0);
                double t35524 = c*t35523;
                double t35525 = sqrt(t35524);
                double t35526 = pow(t35524,3.0/2.0);
                double t35527 = 1.0/pow(t35522,2.0/3.0);
                double t35528 = b1p*t35525;
                double t35529 = b3p*t35526;
                double t35530 = b4p*t35527*t35484;
                double t35531 = b2p*c*t35523;
                double t35532 = t35530+t35531+t35528+t35529;
                double t35533 = 1.0/t35532;
                double t35534 = t35533*t35486*(1.0/2.0);
                double t35535 = t35534+1.0;
                double t35536 = log(t35535);
                double t35537 = a1p*c*t35523;
                double t35538 = t35537+1.0;
                double t35539 = c0p*t35536*t35538*2.0;
                double t35540 = rho_a[index]-rho_b[index];
                double t35541 = t35540*t35540;
                double t35542 = 1.0/t35522;
                double t35543 = t35540*t35542;
                double t35544 = 1.0/(t35522*t35522*t35522*t35522);
                double t35545 = t35541*t35541;
                double t35546 = t35543+1.0;
                double t35547 = pow(t35546,4.0/3.0);
                double t35548 = -t35543+1.0;
                double t35549 = pow(t35548,4.0/3.0);
                double t35550 = t35547+t35549-2.0;
                double t35551 = gcab*gcab;
                double t35552 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35553 = 1.0/pow(rho_a[index],8.0/3.0);
                double t35554 = gamma_aa[index]*t35553*(1.0/2.0);
                double t35555 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35556 = gamma_bb[index]*t35555*(1.0/2.0);
                double t35557 = t35554+t35556;
                double t35558 = gcab*t35557;
                double t35559 = t35558+1.0;
                double t35560 = t35557*t35557;
                double t35561 = t35551*t35560;
                double t35562 = gcab*t35557*2.0;
                double t35563 = t35561+t35562+1.0;
                double t35565 = gcab*t35555;
                double t35566 = t35551*t35555*t35557;
                double t35564 = t35565+t35566;
                double t35567 = 1.0/(t35563*t35563);
                double t35568 = c0p*t35495*t35497*2.0;
                double t35569 = b1f*t35507;
                double t35570 = b3f*t35508;
                double t35571 = b4f*t35509*t35484;
                double t35572 = b2f*c*t35505;
                double t35573 = t35570+t35571+t35572+t35569;
                double t35574 = 1.0/t35573;
                double t35575 = t35504*t35574*(1.0/2.0);
                double t35576 = t35575+1.0;
                double t35577 = log(t35576);
                double t35578 = a1f*c*t35505;
                double t35579 = t35578+1.0;
                double t35580 = t35521-c0f*t35577*t35579*2.0;
                double t35581 = t35521-t35500*t35503*t35580;
                double t35582 = gcaa*gcaa;
                double t35583 = gamma_bb[index]*gcaa*t35555;
                double t35584 = t35583+1.0;
                double t35585 = gamma_bb[index]*gamma_bb[index];
                double t35586 = gamma_bb[index]*gcaa*t35555*2.0;
                double t35587 = t35552*t35582*t35585;
                double t35588 = t35586+t35587+1.0;
                double t35590 = gcaa*t35555*2.0;
                double t35591 = gamma_bb[index]*t35552*t35582*2.0;
                double t35589 = t35590+t35591;
                double t35592 = 1.0/(t35588*t35588);
                double t35593 = gx*gx;
                double t35594 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t35595 = gamma_bb[index]*gx*t35555;
                double t35596 = t35595+1.0;
                double t35597 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t35598 = gamma_bb[index]*gx*t35555*2.0;
                double t35599 = t35552*t35593*t35585;
                double t35600 = t35598+t35599+1.0;
                double t35602 = gx*t35555*2.0;
                double t35603 = gamma_bb[index]*t35552*t35593*2.0;
                double t35601 = t35602+t35603;
                double t35604 = 1.0/(t35600*t35600);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t35581+rho_a[index]*(t35568-t35500*t35503*(t35568-c0f* \
                   log((t35504*(1.0/2.0))/(b1f*t35482+b3f*t35483+b2f*c*t35480+b4f*t35484*t35485)+1.0)*(a1f*c*t35480+1.0) \
                   *2.0))-t35522*(t35539-t35503*t35550*t35544*t35545*(t35539-c0f*log((t35504*(1.0/2.0))/(b1f*t35525+b3f* \
                   t35526+b2f*c*t35523+b4f*t35527*t35484)+1.0)*(a1f*c*t35523+1.0)*2.0)+(Aa*t35503*t35550*log((1.0/2.0) \
                   /(Aa*(b1a*t35525+b3a*t35526+b2a*c*t35523+b4a*t35527*t35484))+1.0)*(t35544*t35545-1.0)*(a1a*c*t35523+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t35551*t35552*(1.0/2.0))/t35563-ccab1*t35551*t35552*1.0/(t35559*t35559)* \
                   (1.0/2.0)+ccab2*t35551*t35560*1.0/(t35563*t35563*t35563)*(t35564*t35564)*2.0-ccab2*(t35551*t35551) \
                   *t35560*t35552*t35567*(1.0/2.0)-ccab2*t35551*t35555*t35564*t35557*t35567*2.0+ccab1*gcab*t35551*t35552* \
                   t35557*1.0/(t35559*t35559*t35559)*(1.0/2.0))+rho_b[index]*t35581*(ccaa1*t35552*t35582*1.0/(t35584* \
                   t35584)*2.0-(ccaa2*t35552*t35582*2.0)/t35588+ccaa2*(t35582*t35582)*t35592*t35585*t35597*2.0-ccaa1* \
                   gamma_bb[index]*gcaa*t35582*1.0/(t35584*t35584*t35584)*t35594*2.0-ccaa2*t35552*t35582*t35585*1.0/(t35588* \
                   t35588*t35588)*(t35589*t35589)*2.0+ccaa2*gamma_bb[index]*t35552*t35582*t35592*t35589*4.0)-c0*pow(rho_b[index],4.0/ \
                   3.0)*(cx1*t35552*t35593*1.0/(t35596*t35596)*2.0-(cx2*t35552*t35593*2.0)/t35600+cx2*t35604*(t35593* \
                   t35593)*t35585*t35597*2.0-cx1*gamma_bb[index]*gx*t35593*t35594*1.0/(t35596*t35596*t35596)*2.0-cx2* \
                   1.0/(t35600*t35600*t35600)*(t35601*t35601)*t35552*t35593*t35585*2.0+cx2*gamma_bb[index]*t35601*t35604* \
                   t35552*t35593*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t35973 = 1.0/pow(rho_b[index],1.0/3.0);
                double t35974 = c*t35973;
                double t35975 = sqrt(t35974);
                double t35976 = pow(t35974,3.0/2.0);
                double t35977 = c*c;
                double t35978 = 1.0/pow(rho_b[index],2.0/3.0);
                double t35979 = 1.0/c0p;
                double t35980 = b1p*t35975;
                double t35981 = b3p*t35976;
                double t35982 = b4p*t35977*t35978;
                double t35983 = b2p*c*t35973;
                double t35984 = t35980+t35981+t35982+t35983;
                double t35985 = 1.0/t35984;
                double t35986 = t35985*t35979*(1.0/2.0);
                double t35987 = t35986+1.0;
                double t35988 = log(t35987);
                double t35989 = a1p*c*t35973;
                double t35990 = t35989+1.0;
                double t35991 = gcaa*gcaa;
                double t35992 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t35993 = 1.0/pow(rho_b[index],8.0/3.0);
                double t35994 = gamma_bb[index]*gcaa*t35993;
                double t35995 = t35994+1.0;
                double t35996 = gamma_bb[index]*gamma_bb[index];
                double t35997 = gamma_bb[index]*gcaa*t35993*2.0;
                double t35998 = t35991*t35992*t35996;
                double t35999 = t35997+t35998+1.0;
                double t36001 = gcaa*t35993*2.0;
                double t36002 = gamma_bb[index]*t35991*t35992*2.0;
                double t36000 = t36001+t36002;
                double t36003 = 1.0/(t35999*t35999);
                double t36004 = gx*gx;
                double t36005 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t36006 = gamma_bb[index]*gx*t35993;
                double t36007 = t36006+1.0;
                double t36008 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t36009 = gamma_bb[index]*gx*t35993*2.0;
                double t36010 = t35992*t35996*t36004;
                double t36011 = t36010+t36009+1.0;
                double t36013 = gx*t35993*2.0;
                double t36014 = gamma_bb[index]*t35992*t36004*2.0;
                double t36012 = t36013+t36014;
                double t36015 = 1.0/(t36011*t36011);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t35975+b3f*t35976+b2f*c*t35973+b4f*t35977*t35978))+1.0)*(a1f*c*t35973+1.0)*2.0-c0p*t35990*t35988*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t35990*t35988*2.0)*(ccaa1*t35991*t35992*1.0/(t35995*t35995)*2.0-(ccaa2*t35991* \
                   t35992*2.0)/t35999+ccaa2*(t35991*t35991)*t35996*t36003*t36008*2.0-ccaa1*gamma_bb[index]*gcaa*t35991* \
                   1.0/(t35995*t35995*t35995)*t36005*2.0-ccaa2*t35991*t35992*t35996*1.0/(t35999*t35999*t35999)*(t36000* \
                   t36000)*2.0+ccaa2*gamma_bb[index]*t35991*t35992*t36000*t36003*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
                   t35992*t36004*1.0/(t36007*t36007)*2.0-(cx2*t35992*t36004*2.0)/t36011+cx2*t35996*(t36004*t36004)*t36015* \
                   t36008*2.0-cx1*gamma_bb[index]*gx*t36004*t36005*1.0/(t36007*t36007*t36007)*2.0-cx2*t35992*t35996*1.0/ \
                   (t36011*t36011*t36011)*(t36012*t36012)*t36004*2.0+cx2*gamma_bb[index]*t35992*t36012*t36004*t36015* \
                   4.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

