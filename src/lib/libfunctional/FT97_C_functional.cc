/**********************************************************
* FT97_C_functional.cc: definitions for FT97_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "FT97_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

FT97_C_Functional::FT97_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "FT97_C";
    description_ = "FT97 Correlation (Involves Ei functions)";
    citation_ = "M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997";
    
    double c0 = 3.1090690869654901E-02;
    params_.push_back(make_pair("c0",c0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double tspi_m13 = 2.0678349696646670E-01;
    params_.push_back(make_pair("tspi_m13",tspi_m13));
    double a1 = 1.6221187669999999E+00;
    params_.push_back(make_pair("a1",a1));
    double a2 = 4.8995807600000002E-01;
    params_.push_back(make_pair("a2",a2));
    double a3 = 1.3790219410000000E+00;
    params_.push_back(make_pair("a3",a3));
    double a4 = 4.9462813529999998E+00;
    params_.push_back(make_pair("a4",a4));
    double a5 = 3.6006120589999999E+00;
    params_.push_back(make_pair("a5",a5));
    double kaa0 = 1.2008017740000001E+00;
    params_.push_back(make_pair("kaa0",kaa0));
    double kaa1 = -8.1290434499999997E-01;
    params_.push_back(make_pair("kaa1",kaa1));
    double kaa2 = 8.5961444499999995E-01;
    params_.push_back(make_pair("kaa2",kaa2));
    double raa1 = 6.5563882299999998E-01;
    params_.push_back(make_pair("raa1",raa1));
    double raa2 = 1.0893388479999999E+00;
    params_.push_back(make_pair("raa2",raa2));
    double kab0 = 1.2915510740000000E+00;
    params_.push_back(make_pair("kab0",kab0));
    double kab1 = -3.4906417299999998E-01;
    params_.push_back(make_pair("kab1",kab1));
    double rab1 = 8.3275879999999997E-02;
    params_.push_back(make_pair("rab1",rab1));
    double k1 = 9.3901599999999996E-01;
    params_.push_back(make_pair("k1",k1));
    double k2 = 1.7331700000000001E+00;
    params_.push_back(make_pair("k2",k2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
FT97_C_Functional::~FT97_C_Functional()
{
}
void FT97_C_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensityA();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
    }

    double c0 = params_[0].second;
    double c = params_[1].second;
    double tspi_m13 = params_[2].second;
    double a1 = params_[3].second;
    double a2 = params_[4].second;
    double a3 = params_[5].second;
    double a4 = params_[6].second;
    double a5 = params_[7].second;
    double kaa0 = params_[8].second;
    double kaa1 = params_[9].second;
    double kaa2 = params_[10].second;
    double raa1 = params_[11].second;
    double raa2 = params_[12].second;
    double kab0 = params_[13].second;
    double kab1 = params_[14].second;
    double rab1 = params_[15].second;
    double k1 = params_[16].second;
    double k2 = params_[17].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t24706 = tspi_m13*tspi_m13;
            double t24707 = 1.0/pow(rho_a[index],1.0/3.0);
            double t24708 = a2*a2;
            double t24709 = gamma_aa[index]*gamma_aa[index];
            double t24710 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t24711 = t24706*t24706;
            double t24712 = c*t24707;
            double t24713 = pow(t24712,4.0/5.0);
            double t24727 = rab1*t24713;
            double t24714 = exp(-t24727);
            double t24715 = t24714-1.0;
            double t24728 = kab1*t24715;
            double t24716 = kab0-t24728;
            double t24717 = 1.0/c;
            double t24718 = 1.0/pow(rho_a[index],7.0/3.0);
            double t24719 = a3*gamma_aa[index]*t24706*t24717*t24718;
            double t24720 = t24719+1.0;
            double t24721 = t24710*t24711*t24708*t24709;
            double t24722 = 1.0/pow(rho_a[index],8.0/3.0);
            double t24723 = a1*gamma_aa[index]*t24722*t24706;
            double t24724 = t24721+t24723+1.0;
            double t24725 = t24710*t24711*t24708*t24709*2.0;
            double t24726 = exp(t24725);
            double t24729 = 1.0/(t24716*t24716);
            double t24730 = 1.0/(t24724*t24724);
            double t24731 = c*c0*t24720*t24730*t24707*t24726*t24729*(2.0/3.0);
            double t24732 = exp(t24731);
            double t24733 = Ei(-t24731);
            double t24734 = sqrt(t24731);
            double t24735 = 1.0/sqrt(t24720);
            double t24736 = a4*a4;
            double t24737 = sqrt(t24712);
            double t24738 = t24710*t24711*t24709*t24736*2.0;
            double t24739 = exp(t24738);
            double t24740 = t24710*t24711*t24709*t24736;
            double t24741 = t24740+1.0;
            double t24742 = 1.0/(t24741*t24741);
            double t24743 = a5*gamma_aa[index]*t24706*t24717*t24718;
            double t24744 = t24743+1.0;
            double t24755 = raa2*t24737;
            double t24745 = exp(-t24755);
            double t24746 = t24745-1.0;
            double t24747 = kaa2*t24746;
            double t24748 = pow(t24712,2.0/5.0);
            double t24756 = raa1*t24748;
            double t24749 = exp(-t24756);
            double t24750 = t24749-1.0;
            double t24751 = kaa1*t24750;
            double t24752 = -kaa0+t24751+t24747;
            double t24753 = 1.0/(t24752*t24752);
            double t24754 = c*c0*t24742*t24707*t24744*t24753*t24739*(2.0/3.0);
            double t24757 = exp(t24754);
            double t24758 = Ei(-t24754);
            double t24759 = 1.0/t24741;
            double t24760 = c*c0*t24707*t24744*t24753*t24739*(2.0/3.0);
            double t24761 = sqrt(t24760);
            functional_[index] = rho_a[index]*( ( (c*c0*t24707*(-2.0/3.0)+t24724*t24716*t24735*exp(-t24710*t24711* \
               t24708*t24709)*1.0E5 > 0.0) ? c0*1.0*(t24732*t24733+((c*c0*t24720*t24730*t24732*t24733*t24707*t24726* \
               t24729*(2.0/3.0)+1.0)*(t24734*4.0+c*c0*t24720*t24730*t24707*t24726*t24729*(8.0/3.0)+6.0))/(t24734* \
               6.0+c*c0*t24720*t24730*t24707*t24726*t24729*4.0+3.0))*(1.0/2.0) : 0.0 ) + ( (c*c0*t24707*(-2.0/3.0) \
               +t24724*t24716*t24735*exp(-t24721)*1.0E5 > 0.0) ? c0*1.0*exp(-(c*c)*1.0/pow(rho_a[index],2.0/3.0)* \
               1.0/pow(k1*t24737+c*k2*t24707,2.0))*(t24757*t24758+((c*c0*t24742*t24707*t24744*t24753*t24739*t24757* \
               t24758*(2.0/3.0)+1.0)*(t24761*t24759*4.0+c*c0*t24742*t24707*t24744*t24753*t24739*(8.0/3.0)+6.0))/(t24761* \
               t24759*6.0+c*c0*t24742*t24707*t24744*t24753*t24739*4.0+3.0))*(1.0/2.0) : 0.0 ) )*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t24763 = tspi_m13*tspi_m13;
            double t24764 = 1.0/pow(rho_a[index],1.0/3.0);
            double t24765 = a2*a2;
            double t24766 = gamma_aa[index]*gamma_aa[index];
            double t24767 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t24768 = t24763*t24763;
            double t24769 = c*t24764;
            double t24770 = a4*a4;
            double t24771 = t24770*t24766*t24767*t24768*2.0;
            double t24772 = exp(t24771);
            double t24773 = 1.0/c;
            double t24774 = 1.0/pow(rho_a[index],7.0/3.0);
            double t24775 = sqrt(t24769);
            double t24776 = t24770*t24766*t24767*t24768;
            double t24777 = t24776+1.0;
            double t24778 = 1.0/(t24777*t24777);
            double t24779 = a5*gamma_aa[index]*t24763*t24773*t24774;
            double t24780 = t24779+1.0;
            double t24791 = raa2*t24775;
            double t24781 = exp(-t24791);
            double t24782 = t24781-1.0;
            double t24783 = kaa2*t24782;
            double t24784 = pow(t24769,2.0/5.0);
            double t24792 = raa1*t24784;
            double t24785 = exp(-t24792);
            double t24786 = t24785-1.0;
            double t24787 = kaa1*t24786;
            double t24788 = -kaa0+t24783+t24787;
            double t24789 = 1.0/(t24788*t24788);
            double t24790 = c*c0*t24780*t24772*t24764*t24778*t24789*(2.0/3.0);
            double t24793 = 1.0/t24777;
            double t24794 = 1.0/pow(rho_a[index],4.0/3.0);
            double t24795 = c*c0*t24780*t24772*t24764*t24789*(2.0/3.0);
            double t24796 = sqrt(t24795);
            double t24797 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t24798 = 1.0/sqrt(t24769);
            double t24799 = c*kaa2*raa2*t24781*t24794*t24798*(1.0/6.0);
            double t24800 = 1.0/pow(t24769,3.0/5.0);
            double t24801 = c*kaa1*raa1*t24800*t24785*t24794*(2.0/1.5E1);
            double t24802 = t24801+t24799;
            double t24803 = 1.0/(t24788*t24788*t24788);
            double t24804 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t24805 = exp(t24790);
            double t24806 = Ei(-t24790);
            double t24807 = 1.0/(t24777*t24777*t24777);
            double t24808 = t24793*t24796*6.0;
            double t24809 = c*c0*t24780*t24772*t24764*t24778*t24789*4.0;
            double t24810 = t24808+t24809+3.0;
            double t24811 = 1.0/t24810;
            double t24812 = c*c0*t24780*t24772*t24794*t24778*t24789*(2.0/9.0);
            double t24813 = a5*c0*gamma_aa[index]*t24763*t24772*t24778*t24797*t24789*(1.4E1/9.0);
            double t24814 = c*c0*t24802*t24803*t24780*t24772*t24764*t24778*(4.0/3.0);
            double t24815 = c*c0*t24804*t24770*t24780*t24772*t24766*t24768*t24778*t24789*(6.4E1/9.0);
            double t24817 = c*c0*t24804*t24770*t24780*t24807*t24772*t24766*t24768*t24789*(6.4E1/9.0);
            double t24816 = t24812+t24813+t24814+t24815-t24817;
            double t24818 = c*c0*t24805*t24806*t24780*t24772*t24764*t24778*t24789*(2.0/3.0);
            double t24819 = t24818+1.0;
            double t24820 = t24793*t24796*4.0;
            double t24821 = c*c0*t24780*t24772*t24764*t24778*t24789*(8.0/3.0);
            double t24822 = t24820+t24821+6.0;
            double t24823 = c*c0*t24780*t24772*t24794*t24789*(2.0/9.0);
            double t24824 = a5*c0*gamma_aa[index]*t24763*t24772*t24797*t24789*(1.4E1/9.0);
            double t24825 = c*c0*t24802*t24803*t24780*t24772*t24764*(4.0/3.0);
            double t24826 = c*c0*t24804*t24770*t24780*t24772*t24766*t24768*t24789*(6.4E1/9.0);
            double t24827 = t24823+t24824+t24825+t24826;
            double t24828 = 1.0/sqrt(t24795);
            double t24829 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t24830 = t24765*t24766*t24767*t24768;
            double t24831 = pow(t24769,4.0/5.0);
            double t24849 = rab1*t24831;
            double t24832 = exp(-t24849);
            double t24833 = t24832-1.0;
            double t24850 = kab1*t24833;
            double t24834 = kab0-t24850;
            double t24835 = a3*gamma_aa[index]*t24763*t24773*t24774;
            double t24836 = t24835+1.0;
            double t24837 = 1.0/sqrt(t24836);
            double t24838 = 1.0/pow(rho_a[index],8.0/3.0);
            double t24839 = a1*gamma_aa[index]*t24763*t24838;
            double t24840 = t24830+t24839+1.0;
            double t24841 = c*c;
            double t24842 = 1.0/pow(rho_a[index],2.0/3.0);
            double t24843 = k1*t24775;
            double t24844 = c*k2*t24764;
            double t24845 = t24843+t24844;
            double t24846 = 1.0/(t24845*t24845);
            double t24852 = t24841*t24842*t24846;
            double t24847 = exp(-t24852);
            double t24848 = exp(-t24830);
            double t24851 = c*c0*t24764*(2.0/3.0);
            double t24853 = t24805*t24806;
            double t24854 = t24811*t24822*t24819;
            double t24855 = t24853+t24854;
            double t24856 = t24840*t24834*t24837*t24848*1.0E5;
            double t24857 = -t24851+t24856;
            double t24858 = ( (t24857 > 0.0) ?  1.0 : 0.0 ) ;
            double t24859 = t24765*t24766*t24767*t24768*2.0;
            double t24860 = exp(t24859);
            double t24861 = 1.0/(t24834*t24834);
            double t24862 = 1.0/(t24840*t24840);
            double t24863 = c*c0*t24860*t24861*t24862*t24764*t24836*(2.0/3.0);
            double t24864 = sqrt(t24863);
            double t24865 = t24765*t24766*t24829*t24768*(1.6E1/3.0);
            double t24866 = a1*gamma_aa[index]*t24763*t24797*(8.0/3.0);
            double t24867 = t24865+t24866;
            double t24868 = exp(t24863);
            double t24869 = Ei(-t24863);
            double t24870 = c*c0*t24860*t24861*t24862*t24836*t24794*(2.0/9.0);
            double t24871 = 1.0/(t24840*t24840*t24840);
            double t24872 = a3*c0*gamma_aa[index]*t24860*t24861*t24763*t24862*t24797*(1.4E1/9.0);
            double t24873 = 1.0/pow(rho_a[index],5.0/3.0);
            double t24874 = 1.0/pow(t24769,1.0/5.0);
            double t24875 = c*c0*t24804*t24860*t24861*t24862*t24836*t24765*t24766*t24768*(6.4E1/9.0);
            double t24876 = 1.0/(t24834*t24834*t24834);
            double t24882 = c*c0*t24860*t24861*t24871*t24764*t24836*t24867*(4.0/3.0);
            double t24883 = c0*kab1*rab1*t24832*t24841*t24860*t24862*t24836*t24873*t24874*t24876*(1.6E1/4.5E1) \
               ;
            double t24877 = t24870+t24872-t24882-t24883+t24875;
            double t24878 = t24864*6.0;
            double t24879 = c*c0*t24860*t24861*t24862*t24764*t24836*4.0;
            double t24880 = t24878+t24879+3.0;
            double t24881 = 1.0/t24880;
            double t24884 = c*c0*t24860*t24861*t24862*t24764*t24836*t24868*t24869*(2.0/3.0);
            double t24885 = t24884+1.0;
            double t24886 = t24864*4.0;
            double t24887 = c*c0*t24860*t24861*t24862*t24764*t24836*(8.0/3.0);
            double t24888 = t24886+t24887+6.0;
            double t24889 = 1.0/sqrt(t24863);
            double t24890 = 1.0/c0;
            double t24891 = pow(rho_a[index],1.0/3.0);
            double t24892 = c*c0*t24794*(2.0/9.0);
            double t24893 = t24840*t24834*t24765*t24837*t24766*t24829*t24848*t24768*(1.6E6/3.0);
            double t24894 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t24895 = 1.0/pow(t24836,3.0/2.0);
            double t24896 = a3*gamma_aa[index]*t24840*t24834*t24763*t24773*t24848*t24894*t24895*(3.5E5/3.0);
            double t24897 = t24892+t24893+t24896-t24834*t24837*t24848*t24867*1.0E5-c*kab1*rab1*t24840*t24832* \
               t24837*t24874*t24794*t24848*(8.0E4/3.0);
            double t24898 = t24868*t24869;
            double t24899 = t24881*t24885*t24888;
            double t24900 = t24898+t24899;
            v_rho_a_[index] = -rho_a[index]*(c0*t24858*(t24881*t24885*(t24877*t24889*2.0+c*c0*t24860*t24861*t24862* \
               t24836*t24794*(8.0/9.0)+a3*c0*gamma_aa[index]*t24860*t24861*t24763*t24862*t24797*(5.6E1/9.0)-c*c0* \
               t24860*t24861*t24871*t24764*t24836*t24867*(1.6E1/3.0)+c*c0*t24804*t24860*t24861*t24862*t24836*t24765* \
               t24766*t24768*(2.56E2/9.0)-c0*kab1*rab1*t24832*t24841*t24860*t24862*t24836*t24873*t24874*t24876*(6.4E1/ \
               4.5E1))+t24881*t24888*(t24870+t24872-t24882-t24883+t24875+c*c0*t24860*t24861*t24862*t24836*t24794* \
               t24868*t24869*(2.0/9.0)+a3*c0*gamma_aa[index]*t24860*t24861*t24763*t24862*t24868*t24797*t24869*(1.4E1/ \
               9.0)-c*c0*t24860*t24861*t24871*t24764*t24836*t24867*t24868*t24869*(4.0/3.0)+c*c0*t24860*t24861*t24862* \
               t24764*t24836*t24868*t24877*t24869*(2.0/3.0)+c*c0*t24804*t24860*t24861*t24862*t24836*t24765*t24766* \
               t24768*t24868*t24869*(6.4E1/9.0)-c0*kab1*rab1*t24832*t24841*t24860*t24862*t24836*t24873*t24874*t24876* \
               t24868*t24869*(1.6E1/4.5E1))+t24868*t24877*t24869-1.0/(t24880*t24880)*t24885*t24888*(t24877*t24889* \
               3.0+c*c0*t24860*t24861*t24862*t24836*t24794*(4.0/3.0)+a3*c0*gamma_aa[index]*t24860*t24861*t24763*t24862* \
               t24797*(2.8E1/3.0)-c*c0*t24860*t24861*t24871*t24764*t24836*t24867*8.0+c*c0*t24804*t24860*t24861*t24862* \
               t24836*t24765*t24766*t24768*(1.28E2/3.0)-c0*kab1*rab1*t24832*t24841*t24860*t24862*t24836*t24873*t24874* \
               t24876*(3.2E1/1.5E1))+((t24840*t24840)*(t24834*t24834)*t24773*t24890*t24891*t24877*exp(-t24859)*(3.0/ \
               2.0))/t24836)*(1.0/2.0)- 0.0 )+rho_a[index]*( ( (c*c0*t24764*(-2.0/3.0)+t24840*t24834*t24837*exp(- \
               t24765*t24766*t24767*t24768)*1.0E5 > 0.0) ? c0*t24847*1.0*(t24811*t24819*(t24827*t24828*t24793*2.0- \
               t24770*t24766*t24829*t24768*t24778*t24796*(6.4E1/3.0)+c*c0*t24780*t24772*t24794*t24778*t24789*(8.0/ \
               9.0)+a5*c0*gamma_aa[index]*t24763*t24772*t24778*t24797*t24789*(5.6E1/9.0)+c*c0*t24802*t24803*t24780* \
               t24772*t24764*t24778*(1.6E1/3.0)-c*c0*t24804*t24770*t24780*t24807*t24772*t24766*t24768*t24789*(2.56E2/ \
               9.0)+c*c0*t24804*t24770*t24780*t24772*t24766*t24768*t24778*t24789*(2.56E2/9.0))+t24811*t24822*(t24812+ \
               t24813+t24814+t24815-t24817+c*c0*t24805*t24806*t24780*t24772*t24794*t24778*t24789*(2.0/9.0)+a5*c0* \
               gamma_aa[index]*t24805*t24806*t24763*t24772*t24778*t24797*t24789*(1.4E1/9.0)+c*c0*t24802*t24803*t24805* \
               t24806*t24780*t24772*t24764*t24778*(4.0/3.0)+c*c0*t24805*t24806*t24780*t24816*t24772*t24764*t24778* \
               t24789*(2.0/3.0)-c*c0*t24804*t24805*t24770*t24806*t24780*t24807*t24772*t24766*t24768*t24789*(6.4E1/ \
               9.0)+c*c0*t24804*t24805*t24770*t24806*t24780*t24772*t24766*t24768*t24778*t24789*(6.4E1/9.0))+t24805* \
               t24806*t24816-1.0/(t24810*t24810)*t24822*t24819*(t24827*t24828*t24793*3.0-t24770*t24766*t24829*t24768* \
               t24778*t24796*3.2E1+c*c0*t24780*t24772*t24794*t24778*t24789*(4.0/3.0)+a5*c0*gamma_aa[index]*t24763* \
               t24772*t24778*t24797*t24789*(2.8E1/3.0)+c*c0*t24802*t24803*t24780*t24772*t24764*t24778*8.0-c*c0*t24804* \
               t24770*t24780*t24807*t24772*t24766*t24768*t24789*(1.28E2/3.0)+c*c0*t24804*t24770*t24780*t24772*t24766* \
               t24768*t24778*t24789*(1.28E2/3.0))+(t24816*t24773*t24890*t24891*(t24777*t24777)*(t24788*t24788)*exp(- \
               t24771)*(3.0/2.0))/t24780)*(-1.0/2.0) : 0.0 ) +c0*t24855*t24847*t24858*(t24841*t24846*t24873*(2.0/ \
               3.0)-t24841*t24842*1.0/(t24845*t24845*t24845)*(c*k2*t24794*(1.0/3.0)+c*k1*t24794*t24798*(1.0/6.0)) \
               *2.0)*(1.0/2.0)+ 0.0 )+c0*t24900*t24858*(1.0/2.0)+c0*t24855*t24847*t24858*(1.0/2.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t24902 = tspi_m13*tspi_m13;
                double t24903 = 1.0/pow(rho_a[index],1.0/3.0);
                double t24904 = a2*a2;
                double t24905 = gamma_aa[index]*gamma_aa[index];
                double t24906 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t24907 = t24902*t24902;
                double t24908 = t24904*t24905*t24906*t24907*2.0;
                double t24909 = exp(t24908);
                double t24910 = c*t24903;
                double t24911 = pow(t24910,4.0/5.0);
                double t24923 = rab1*t24911;
                double t24912 = exp(-t24923);
                double t24913 = t24912-1.0;
                double t24924 = kab1*t24913;
                double t24914 = kab0-t24924;
                double t24915 = 1.0/c;
                double t24916 = 1.0/pow(rho_a[index],7.0/3.0);
                double t24917 = a3*gamma_aa[index]*t24902*t24915*t24916;
                double t24918 = t24917+1.0;
                double t24919 = t24904*t24905*t24906*t24907;
                double t24920 = 1.0/pow(rho_a[index],8.0/3.0);
                double t24921 = a1*gamma_aa[index]*t24902*t24920;
                double t24922 = t24921+t24919+1.0;
                double t24925 = 1.0/(t24914*t24914);
                double t24926 = 1.0/(t24922*t24922);
                double t24927 = c*c0*t24903*t24925*t24926*t24909*t24918*(2.0/3.0);
                double t24928 = a1*t24902*t24920;
                double t24929 = gamma_aa[index]*t24904*t24906*t24907*2.0;
                double t24930 = t24928+t24929;
                double t24931 = 1.0/(t24922*t24922*t24922);
                double t24932 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t24933 = exp(t24927);
                double t24934 = Ei(-t24927);
                double t24935 = a3*c0*t24902*t24920*t24925*t24926*t24909*(2.0/3.0);
                double t24936 = c*c0*gamma_aa[index]*t24904*t24932*t24907*t24925*t24926*t24909*t24918*(8.0/3.0);
                double t24943 = c*c0*t24903*t24930*t24931*t24925*t24909*t24918*(4.0/3.0);
                double t24937 = -t24943+t24935+t24936;
                double t24938 = sqrt(t24927);
                double t24939 = t24938*6.0;
                double t24940 = c*c0*t24903*t24925*t24926*t24909*t24918*4.0;
                double t24941 = t24940+t24939+3.0;
                double t24942 = 1.0/t24941;
                double t24944 = c*c0*t24903*t24933*t24925*t24934*t24926*t24909*t24918*(2.0/3.0);
                double t24945 = t24944+1.0;
                double t24946 = t24938*4.0;
                double t24947 = c*c0*t24903*t24925*t24926*t24909*t24918*(8.0/3.0);
                double t24948 = t24946+t24947+6.0;
                double t24949 = 1.0/sqrt(t24927);
                double t24950 = 1.0/sqrt(t24918);
                double t24951 = exp(-t24919);
                double t24952 = c*c0*t24903*(2.0/3.0);
                double t24953 = a4*a4;
                double t24954 = sqrt(t24910);
                double t24955 = t24905*t24906*t24907*t24953*2.0;
                double t24956 = exp(t24955);
                double t24957 = t24905*t24906*t24907*t24953;
                double t24958 = t24957+1.0;
                double t24959 = 1.0/(t24958*t24958);
                double t24960 = a5*gamma_aa[index]*t24902*t24915*t24916;
                double t24961 = t24960+1.0;
                double t24972 = raa2*t24954;
                double t24962 = exp(-t24972);
                double t24963 = t24962-1.0;
                double t24964 = kaa2*t24963;
                double t24965 = pow(t24910,2.0/5.0);
                double t24973 = raa1*t24965;
                double t24966 = exp(-t24973);
                double t24967 = t24966-1.0;
                double t24968 = kaa1*t24967;
                double t24969 = -kaa0+t24964+t24968;
                double t24970 = 1.0/(t24969*t24969);
                double t24971 = c*c0*t24903*t24961*t24970*t24956*t24959*(2.0/3.0);
                double t24974 = exp(t24971);
                double t24975 = Ei(-t24971);
                double t24976 = 1.0/t24958;
                double t24977 = c*c0*t24903*t24961*t24970*t24956*(2.0/3.0);
                double t24978 = sqrt(t24977);
                double t24979 = 1.0/(t24958*t24958*t24958);
                double t24980 = t24976*t24978*6.0;
                double t24981 = c*c0*t24903*t24961*t24970*t24956*t24959*4.0;
                double t24982 = t24980+t24981+3.0;
                double t24983 = 1.0/t24982;
                double t24984 = a5*c0*t24902*t24920*t24970*t24956*t24959*(2.0/3.0);
                double t24985 = c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956*t24959*(8.0/3.0);
                double t24998 = c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956*t24979*(8.0/3.0);
                double t24986 = t24984+t24985-t24998;
                double t24987 = c*c0*t24903*t24961*t24970*t24956*t24974*t24975*t24959*(2.0/3.0);
                double t24988 = t24987+1.0;
                double t24989 = t24976*t24978*4.0;
                double t24990 = c*c0*t24903*t24961*t24970*t24956*t24959*(8.0/3.0);
                double t24991 = t24990+t24989+6.0;
                double t24992 = a5*c0*t24902*t24920*t24970*t24956*(2.0/3.0);
                double t24993 = c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956*(8.0/3.0);
                double t24994 = t24992+t24993;
                double t24995 = 1.0/sqrt(t24977);
                double t24996 = 1.0/c0;
                double t24997 = pow(rho_a[index],1.0/3.0);
                double t24999 = t24922*t24914*t24950*t24951*1.0E5;
                double t25000 = c*c;
                double t25001 = 1.0/pow(rho_a[index],2.0/3.0);
                double t25002 = k1*t24954;
                double t25003 = c*k2*t24903;
                double t25004 = t25002+t25003;
                double t25005 = 1.0/(t25004*t25004);
                double t25006 = exp(-t25000*t25001*t25005);
                double t25007 = 1.0/pow(t24918,3.0/2.0);
                double t25008 = a3*t24902*t24922*t24914*t24915*t24951*t24916*t25007*5.0E4;
                double t25009 = gamma_aa[index]*t24904*t24922*t24914*t24950*t24906*t24951*t24907*2.0E5;
                double t25010 = t25008+t25009-t24930*t24914*t24950*t24951*1.0E5;
                v_gamma_aa_[index] = rho_a[index]*( ( (c*c0*t24903*(-2.0/3.0)+t24922*t24914*t24950*exp(-t24904*t24905* \
                   t24906*t24907)*1.0E5 > 0.0) ? c0*1.0*(t24933*t24934*t24937+t24942*t24948*(-t24943+t24935+t24936+a3* \
                   c0*t24902*t24920*t24933*t24925*t24934*t24926*t24909*(2.0/3.0)-c*c0*t24903*t24930*t24931*t24933*t24925* \
                   t24934*t24909*t24918*(4.0/3.0)+c*c0*t24903*t24933*t24925*t24934*t24926*t24909*t24918*t24937*(2.0/3.0) \
                   +c*c0*gamma_aa[index]*t24904*t24932*t24933*t24907*t24925*t24934*t24926*t24909*t24918*(8.0/3.0))+t24942* \
                   t24945*(t24937*t24949*2.0+a3*c0*t24902*t24920*t24925*t24926*t24909*(8.0/3.0)-c*c0*t24903*t24930*t24931* \
                   t24925*t24909*t24918*(1.6E1/3.0)+c*c0*gamma_aa[index]*t24904*t24932*t24907*t24925*t24926*t24909*t24918* \
                   (3.2E1/3.0))-1.0/(t24941*t24941)*t24945*t24948*(t24937*t24949*3.0+a3*c0*t24902*t24920*t24925*t24926* \
                   t24909*4.0-c*c0*t24903*t24930*t24931*t24925*t24909*t24918*8.0+c*c0*gamma_aa[index]*t24904*t24932*t24907* \
                   t24925*t24926*t24909*t24918*1.6E1)+((t24922*t24922)*(t24914*t24914)*t24915*t24937*t24996*t24997*exp(- \
                   t24908)*(3.0/2.0))/t24918)*(1.0/2.0) : 0.0 ) - 0.0 )*2.0+rho_a[index]*( ( (-t24952+t24999 > 0.0) ?  \
                   c0*t25006*1.0*(t24983*t24988*(t24976*t24994*t24995*2.0-gamma_aa[index]*t24906*t24907*t24953*t24959* \
                   t24978*8.0+a5*c0*t24902*t24920*t24970*t24956*t24959*(8.0/3.0)+c*c0*gamma_aa[index]*t24932*t24907*t24961* \
                   t24970*t24953*t24956*t24959*(3.2E1/3.0)-c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956* \
                   t24979*(3.2E1/3.0))+t24991*t24983*(t24984+t24985+a5*c0*t24902*t24920*t24970*t24956*t24974*t24975*t24959* \
                   (2.0/3.0)-c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956*t24979*(8.0/3.0)+c*c0*t24903* \
                   t24961*t24970*t24956*t24974*t24975*t24959*t24986*(2.0/3.0)+c*c0*gamma_aa[index]*t24932*t24907*t24961* \
                   t24970*t24953*t24956*t24974*t24975*t24959*(8.0/3.0)-c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970* \
                   t24953*t24956*t24974*t24975*t24979*(8.0/3.0))+t24974*t24975*t24986-1.0/(t24982*t24982)*t24991*t24988* \
                   (t24976*t24994*t24995*3.0-gamma_aa[index]*t24906*t24907*t24953*t24959*t24978*1.2E1+a5*c0*t24902*t24920* \
                   t24970*t24956*t24959*4.0+c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956*t24959*1.6E1- \
                   c*c0*gamma_aa[index]*t24932*t24907*t24961*t24970*t24953*t24956*t24979*1.6E1)+(t24915*(t24958*t24958) \
                   *t24986*(t24969*t24969)*t24996*t24997*exp(-t24955)*(3.0/2.0))/t24961)*(1.0/2.0) : 0.0 ) - 0.0 )*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t25013 = tspi_m13*tspi_m13;
            double t25014 = 1.0/pow(rho_a[index],1.0/3.0);
            double t25015 = a2*a2;
            double t25016 = gamma_aa[index]*gamma_aa[index];
            double t25017 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t25018 = t25013*t25013;
            double t25019 = c*t25014;
            double t25020 = a4*a4;
            double t25021 = 1.0/c;
            double t25022 = 1.0/pow(rho_a[index],7.0/3.0);
            double t25023 = sqrt(t25019);
            double t25024 = t25020*t25016*t25017*t25018*2.0;
            double t25025 = exp(t25024);
            double t25026 = t25020*t25016*t25017*t25018;
            double t25027 = t25026+1.0;
            double t25028 = a5*gamma_aa[index]*t25021*t25013*t25022;
            double t25029 = t25028+1.0;
            double t25040 = raa2*t25023;
            double t25030 = exp(-t25040);
            double t25031 = t25030-1.0;
            double t25032 = kaa2*t25031;
            double t25033 = pow(t25019,2.0/5.0);
            double t25041 = raa1*t25033;
            double t25034 = exp(-t25041);
            double t25035 = t25034-1.0;
            double t25036 = kaa1*t25035;
            double t25037 = -kaa0+t25032+t25036;
            double t25038 = 1.0/(t25037*t25037);
            double t25039 = 1.0/t25027;
            double t25042 = 1.0/pow(rho_a[index],4.0/3.0);
            double t25043 = c*c0*t25014*t25025*t25029*t25038*(2.0/3.0);
            double t25044 = 1.0/(t25027*t25027);
            double t25045 = sqrt(t25043);
            double t25046 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t25047 = 1.0/sqrt(t25019);
            double t25048 = c*kaa2*raa2*t25030*t25042*t25047*(1.0/6.0);
            double t25049 = 1.0/pow(t25019,3.0/5.0);
            double t25050 = c*kaa1*raa1*t25042*t25034*t25049*(2.0/1.5E1);
            double t25051 = t25050+t25048;
            double t25052 = 1.0/(t25037*t25037*t25037);
            double t25053 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t25054 = c*c0*t25014*t25025*t25044*t25029*t25038*(2.0/3.0);
            double t25055 = exp(t25054);
            double t25056 = Ei(-t25054);
            double t25057 = c*c0*t25042*t25025*t25044*t25029*t25038*(2.0/9.0);
            double t25058 = a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25046*t25038*(1.4E1/9.0);
            double t25059 = c*c0*t25014*t25051*t25025*t25052*t25044*t25029*(4.0/3.0);
            double t25060 = 1.0/(t25027*t25027*t25027);
            double t25061 = c*c0*t25020*t25016*t25025*t25044*t25053*t25018*t25029*t25038*(6.4E1/9.0);
            double t25062 = t25045*t25039*6.0;
            double t25063 = c*c0*t25014*t25025*t25044*t25029*t25038*4.0;
            double t25064 = t25062+t25063+3.0;
            double t25065 = 1.0/t25064;
            double t25066 = 1.0/sqrt(t25043);
            double t25067 = c*c;
            double t25068 = 1.0/pow(rho_a[index],8.0/3.0);
            double t25069 = c*c0*t25042*t25025*t25029*t25038*(2.0/9.0);
            double t25070 = a5*c0*gamma_aa[index]*t25013*t25025*t25046*t25038*(1.4E1/9.0);
            double t25071 = c*c0*t25014*t25051*t25025*t25052*t25029*(4.0/3.0);
            double t25072 = c*c0*t25020*t25016*t25025*t25053*t25018*t25029*t25038*(6.4E1/9.0);
            double t25073 = t25070+t25071+t25072+t25069;
            double t25074 = t25020*t25020;
            double t25075 = t25016*t25016;
            double t25076 = t25018*t25018;
            double t25077 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t25078 = raa2*raa2;
            double t25079 = c*kaa2*t25030*t25022*t25078*(1.0/3.6E1);
            double t25080 = raa1*raa1;
            double t25081 = 1.0/pow(t25019,6.0/5.0);
            double t25082 = kaa1*t25034*t25080*t25081*t25067*t25068*(4.0/2.25E2);
            double t25083 = 1.0/pow(t25019,3.0/2.0);
            double t25084 = kaa2*raa2*t25030*t25083*t25067*t25068*(1.0/3.6E1);
            double t25085 = 1.0/pow(t25019,8.0/5.0);
            double t25086 = kaa1*raa1*t25034*t25067*t25085*t25068*(2.0/7.5E1);
            double t25096 = c*kaa2*raa2*t25030*t25022*t25047*(2.0/9.0);
            double t25097 = c*kaa1*raa1*t25022*t25034*t25049*(8.0/4.5E1);
            double t25087 = t25082+t25084+t25086-t25096+t25079-t25097;
            double t25088 = t25051*t25051;
            double t25089 = 1.0/(t25037*t25037*t25037*t25037);
            double t25090 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t25091 = 1.0/pow(rho_a[index],1.0E1);
            double t25092 = 1.0/pow(rho_a[index],1.3E1);
            double t25093 = 1.0/pow(rho_a[index],2.3E1/3.0);
            double t25095 = c*c0*t25020*t25060*t25016*t25025*t25053*t25018*t25029*t25038*(6.4E1/9.0);
            double t25094 = t25061+t25057+t25058+t25059-t25095;
            double t25098 = t25094*t25094;
            double t25099 = 1.0/(t25027*t25027*t25027*t25027);
            double t25100 = c*c0*t25022*t25025*t25044*t25029*t25038*(8.0/2.7E1);
            double t25101 = c*c0*t25014*t25025*t25044*t25029*t25088*t25089*4.0;
            double t25102 = a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25090*t25038*(5.6E1/9.0);
            double t25103 = c*c0*t25042*t25051*t25025*t25052*t25044*t25029*(8.0/9.0);
            double t25104 = a5*c0*gamma_aa[index]*t25013*t25051*t25025*t25052*t25044*t25046*(5.6E1/9.0);
            double t25105 = a5*c0*gamma_aa[index]*t25020*t25013*t25016*t25025*t25044*t25018*t25091*t25038*(8.96E2/ \
               2.7E1);
            double t25106 = c*c0*t25025*t25044*t25029*t25038*t25074*t25092*t25075*t25076*(2.048E3/2.7E1);
            double t25107 = c*c0*t25025*t25029*t25038*t25074*t25092*t25075*t25076*t25099*(1.024E3/9.0);
            double t25108 = c*c0*t25020*t25016*t25025*t25044*t25018*t25029*t25038*t25093*(4.48E2/9.0);
            double t25109 = c*c0*t25020*t25051*t25016*t25025*t25052*t25044*t25053*t25018*t25029*(2.56E2/9.0);
            double t25157 = c*c0*t25014*t25025*t25052*t25044*t25029*t25087*(4.0/3.0);
            double t25158 = a5*c0*gamma_aa[index]*t25020*t25013*t25060*t25016*t25025*t25018*t25091*t25038*(8.96E2/ \
               2.7E1);
            double t25159 = c*c0*t25060*t25025*t25029*t25038*t25074*t25092*t25075*t25076*(4.096E3/2.7E1);
            double t25160 = c*c0*t25020*t25060*t25016*t25025*t25018*t25029*t25038*t25093*(4.48E2/9.0);
            double t25161 = c*c0*t25020*t25051*t25060*t25016*t25025*t25052*t25053*t25018*t25029*(2.56E2/9.0);
            double t25110 = t25100+t25101+t25102+t25103+t25104+t25105+t25106-t25160+t25107-t25161+t25108+t25109- \
               t25157-t25158-t25159;
            double t25111 = c*c0*t25014*t25025*t25044*t25055*t25029*t25038*t25056*(2.0/3.0);
            double t25112 = t25111+1.0;
            double t25113 = t25073*t25039*t25066*2.0;
            double t25114 = c*c0*t25042*t25025*t25044*t25029*t25038*(8.0/9.0);
            double t25115 = a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25046*t25038*(5.6E1/9.0);
            double t25116 = c*c0*t25014*t25051*t25025*t25052*t25044*t25029*(1.6E1/3.0);
            double t25117 = c*c0*t25020*t25016*t25025*t25044*t25053*t25018*t25029*t25038*(2.56E2/9.0);
            double t25179 = t25020*t25016*t25044*t25018*t25045*t25077*(6.4E1/3.0);
            double t25180 = c*c0*t25020*t25060*t25016*t25025*t25053*t25018*t25029*t25038*(2.56E2/9.0);
            double t25118 = t25113+t25114+t25115+t25116+t25117-t25180-t25179;
            double t25119 = 1.0/(t25064*t25064);
            double t25120 = t25045*t25039*4.0;
            double t25121 = c*c0*t25014*t25025*t25044*t25029*t25038*(8.0/3.0);
            double t25122 = t25120+t25121+6.0;
            double t25123 = t25073*t25039*t25066*3.0;
            double t25124 = c*c0*t25042*t25025*t25044*t25029*t25038*(4.0/3.0);
            double t25125 = a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25046*t25038*(2.8E1/3.0);
            double t25126 = c*c0*t25014*t25051*t25025*t25052*t25044*t25029*8.0;
            double t25127 = c*c0*t25020*t25016*t25025*t25044*t25053*t25018*t25029*t25038*(1.28E2/3.0);
            double t25148 = t25020*t25016*t25044*t25018*t25045*t25077*3.2E1;
            double t25149 = c*c0*t25020*t25060*t25016*t25025*t25053*t25018*t25029*t25038*(1.28E2/3.0);
            double t25128 = t25123+t25124+t25125+t25126+t25127-t25148-t25149;
            double t25129 = c*c0*t25042*t25025*t25044*t25055*t25029*t25038*t25056*(2.0/9.0);
            double t25130 = c*c0*t25014*t25051*t25025*t25052*t25044*t25055*t25029*t25056*(4.0/3.0);
            double t25131 = c*c0*t25014*t25025*t25044*t25055*t25029*t25038*t25056*t25094*(2.0/3.0);
            double t25132 = a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25046*t25055*t25038*t25056*(1.4E1/9.0) \
               ;
            double t25133 = c*c0*t25020*t25016*t25025*t25044*t25053*t25018*t25055*t25029*t25038*t25056*(6.4E1/ \
               9.0);
            double t25134 = c*c0*t25022*t25025*t25029*t25038*(8.0/2.7E1);
            double t25135 = a5*c0*gamma_aa[index]*t25013*t25025*t25090*t25038*(5.6E1/9.0);
            double t25136 = c*c0*t25042*t25051*t25025*t25052*t25029*(8.0/9.0);
            double t25137 = c*c0*t25014*t25025*t25029*t25088*t25089*4.0;
            double t25138 = a5*c0*gamma_aa[index]*t25020*t25013*t25016*t25025*t25018*t25091*t25038*(8.96E2/2.7E1) \
               ;
            double t25139 = a5*c0*gamma_aa[index]*t25013*t25051*t25025*t25052*t25046*(5.6E1/9.0);
            double t25140 = c*c0*t25025*t25029*t25038*t25074*t25092*t25075*t25076*(2.048E3/2.7E1);
            double t25141 = c*c0*t25020*t25016*t25025*t25018*t25029*t25038*t25093*(4.48E2/9.0);
            double t25142 = c*c0*t25020*t25051*t25016*t25025*t25052*t25053*t25018*t25029*(2.56E2/9.0);
            double t25143 = t25140+t25141+t25142+t25134+t25135+t25136+t25137+t25138+t25139-c*c0*t25014*t25025* \
               t25052*t25029*t25087*(4.0/3.0);
            double t25144 = t25073*t25073;
            double t25145 = 1.0/pow(t25043,3.0/2.0);
            double t25146 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t25147 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t25150 = 1.0/pow(rho_a[index],2.0/3.0);
            double t25151 = 1.0/t25029;
            double t25152 = 1.0/c0;
            double t25153 = exp(-t25024);
            double t25154 = t25027*t25027;
            double t25155 = t25037*t25037;
            double t25156 = pow(rho_a[index],1.0/3.0);
            double t25162 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            double t25181 = c*c0*t25020*t25060*t25016*t25025*t25053*t25018*t25055*t25029*t25038*t25056*(6.4E1/ \
               9.0);
            double t25163 = t25130+t25131+t25132+t25061+t25133-t25181+t25057+t25129+t25058+t25059-t25095;
            double t25164 = t25015*t25016*t25017*t25018;
            double t25165 = pow(t25019,4.0/5.0);
            double t25183 = rab1*t25165;
            double t25166 = exp(-t25183);
            double t25167 = t25166-1.0;
            double t25184 = kab1*t25167;
            double t25168 = kab0-t25184;
            double t25169 = a3*gamma_aa[index]*t25021*t25013*t25022;
            double t25170 = t25169+1.0;
            double t25171 = 1.0/sqrt(t25170);
            double t25172 = a1*gamma_aa[index]*t25013*t25068;
            double t25173 = t25172+t25164+1.0;
            double t25174 = k1*t25023;
            double t25175 = c*k2*t25014;
            double t25176 = t25174+t25175;
            double t25177 = 1.0/(t25176*t25176);
            double t25186 = t25150*t25067*t25177;
            double t25178 = exp(-t25186);
            double t25182 = exp(-t25164);
            double t25185 = t25171*t25173*t25182*t25168*1.0E5;
            double t25187 = t25112*t25118*t25065;
            double t25188 = t25055*t25056*t25094;
            double t25189 = t25122*t25163*t25065;
            double t25190 = t25021*t25151*t25152*t25153*t25154*t25155*t25156*t25094*(3.0/2.0);
            double t25333 = t25112*t25122*t25119*t25128;
            double t25191 = -t25333+t25190+t25187+t25188+t25189;
            double t25192 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t25193 = c*c0*t25014*(2.0/3.0);
            double t25194 = 1.0/(t25176*t25176*t25176);
            double t25195 = c*k2*t25042*(1.0/3.0);
            double t25196 = c*k1*t25042*t25047*(1.0/6.0);
            double t25197 = t25195+t25196;
            double t25198 = 1.0/pow(rho_a[index],5.0/3.0);
            double t25199 = -t25193+t25185;
            double t25200 = ( (t25199 > 0.0) ?  1.0 : 0.0 ) ;
            double t25201 = t25055*t25056;
            double t25202 = t25112*t25122*t25065;
            double t25203 = t25201+t25202;
            double t25204 = t25067*t25177*t25198*(2.0/3.0);
            double t25218 = t25150*t25067*t25194*t25197*2.0;
            double t25205 = t25204-t25218;
            double t25206 = t25193-t25185;
            double t25207 = c*c0*t25042*(2.0/9.0);
            double t25208 = t25015*t25016*t25018*t25077*(1.6E1/3.0);
            double t25209 = a1*gamma_aa[index]*t25013*t25046*(8.0/3.0);
            double t25210 = t25208+t25209;
            double t25211 = t25015*t25016*t25018*t25171*t25173*t25182*t25077*t25168*(1.6E6/3.0);
            double t25212 = 1.0/pow(t25019,1.0/5.0);
            double t25213 = 1.0/pow(t25170,3.0/2.0);
            double t25214 = a3*gamma_aa[index]*t25021*t25013*t25213*t25173*t25182*t25192*t25168*(3.5E5/3.0);
            double t25219 = t25210*t25171*t25182*t25168*1.0E5;
            double t25220 = c*kab1*rab1*t25212*t25042*t25171*t25173*t25182*t25166*(8.0E4/3.0);
            double t25215 = t25211-t25220+t25214+t25207-t25219;
            double t25216 = 0.0 ;
            double t25217 = 1.0/(c*c);
            double t25221 = t25015*t25016*t25017*t25018*2.0;
            double t25222 = exp(t25221);
            double t25223 = 1.0/(t25168*t25168);
            double t25224 = 1.0/(t25173*t25173);
            double t25225 = c*c0*t25014*t25222*t25223*t25170*t25224*(2.0/3.0);
            double t25226 = sqrt(t25225);
            double t25227 = 1.0/rho_a[index];
            double t25228 = c*c0*t25042*t25222*t25223*t25170*t25224*(2.0/9.0);
            double t25229 = 1.0/(t25173*t25173*t25173);
            double t25230 = a3*c0*gamma_aa[index]*t25013*t25222*t25223*t25224*t25046*(1.4E1/9.0);
            double t25231 = c*c0*t25015*t25222*t25016*t25223*t25053*t25170*t25224*t25018*(6.4E1/9.0);
            double t25232 = 1.0/(t25168*t25168*t25168);
            double t25234 = c*c0*t25210*t25014*t25222*t25223*t25170*t25229*(4.0/3.0);
            double t25235 = c0*kab1*rab1*t25212*t25222*t25232*t25170*t25224*t25067*t25166*t25198*(1.6E1/4.5E1) \
               ;
            double t25233 = t25230+t25231-t25234-t25235+t25228;
            double t25236 = t25015*t25016*t25018*t25146*(3.04E2/9.0);
            double t25237 = a1*gamma_aa[index]*t25013*t25090*(8.8E1/9.0);
            double t25238 = t25236+t25237;
            double t25239 = exp(t25225);
            double t25240 = Ei(-t25225);
            double t25241 = c*c0*t25022*t25222*t25223*t25170*t25224*(8.0/2.7E1);
            double t25242 = t25210*t25210;
            double t25243 = 1.0/(t25173*t25173*t25173*t25173);
            double t25244 = c*c0*t25014*t25222*t25223*t25170*t25242*t25243*4.0;
            double t25245 = a3*c0*gamma_aa[index]*t25013*t25222*t25223*t25224*t25090*(5.6E1/9.0);
            double t25246 = a3*c0*gamma_aa[index]*t25013*t25015*t25222*t25016*t25223*t25224*t25018*t25091*(8.96E2/ \
               2.7E1);
            double t25247 = t25015*t25015;
            double t25248 = rab1*rab1;
            double t25249 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t25250 = 1.0/pow(t25019,2.0/5.0);
            double t25251 = t25233*t25233;
            double t25252 = c*c0*t25222*t25223*t25170*t25224*t25092*t25075*t25076*t25247*(2.048E3/2.7E1);
            double t25253 = c*c0*t25015*t25222*t25016*t25223*t25170*t25224*t25018*t25093*(4.48E2/9.0);
            double t25254 = c*c0*kab1*t25222*t25232*t25250*t25170*t25224*t25067*t25166*t25248*t25249*(6.4E1/6.75E2) \
               ;
            double t25255 = kab1*kab1;
            double t25262 = rab1*t25165*2.0;
            double t25256 = exp(-t25262);
            double t25257 = 1.0/(t25168*t25168*t25168*t25168);
            double t25258 = c*c0*t25222*t25250*t25170*t25224*t25255*t25067*t25256*t25248*t25257*t25249*(6.4E1/ \
               2.25E2);
            double t25259 = c*c0*kab1*rab1*t25222*t25232*t25170*t25224*t25081*t25067*t25166*t25249*(1.6E1/6.75E2) \
               ;
            double t25260 = c0*kab1*rab1*t25210*t25212*t25222*t25232*t25170*t25067*t25166*t25229*t25198*(6.4E1/ \
               4.5E1);
            double t25261 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t25263 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t25264 = t25226*6.0;
            double t25265 = c*c0*t25014*t25222*t25223*t25170*t25224*4.0;
            double t25266 = t25264+t25265+3.0;
            double t25267 = 1.0/t25266;
            double t25269 = c*c0*t25210*t25042*t25222*t25223*t25170*t25229*(8.0/9.0);
            double t25270 = c*c0*t25014*t25222*t25223*t25170*t25229*t25238*(4.0/3.0);
            double t25271 = a3*c0*gamma_aa[index]*t25210*t25013*t25222*t25223*t25046*t25229*(5.6E1/9.0);
            double t25272 = c*c0*t25210*t25015*t25222*t25016*t25223*t25053*t25170*t25018*t25229*(2.56E2/9.0);
            double t25273 = c0*kab1*rab1*t25212*t25222*t25232*t25170*t25224*t25067*t25166*t25068*(3.2E1/4.5E1) \
               ;
            double t25274 = a3*c*c0*gamma_aa[index]*kab1*rab1*t25013*t25212*t25222*t25232*t25224*t25261*t25166* \
               (2.24E2/1.35E2);
            double t25275 = c0*kab1*rab1*t25212*t25015*t25222*t25016*t25232*t25170*t25224*t25018*t25263*t25067* \
               t25166*(1.024E3/1.35E2);
            double t25268 = t25241+t25260+t25252-t25270+t25244+t25253-t25271+t25245+t25254-t25272+t25246-t25273- \
               t25274-t25275+t25258+t25259-t25269;
            double t25276 = 1.0/sqrt(t25225);
            double t25277 = t25226*4.0;
            double t25278 = c*c0*t25014*t25222*t25223*t25170*t25224*(8.0/3.0);
            double t25279 = t25277+t25278+6.0;
            double t25280 = c*c0*t25042*t25222*t25240*t25223*t25170*t25224*t25239*(2.0/9.0);
            double t25281 = a3*c0*gamma_aa[index]*t25013*t25222*t25240*t25223*t25224*t25046*t25239*(1.4E1/9.0) \
               ;
            double t25282 = c*c0*t25014*t25222*t25240*t25223*t25170*t25224*t25233*t25239*(2.0/3.0);
            double t25283 = c*c0*t25015*t25222*t25240*t25016*t25223*t25053*t25170*t25224*t25018*t25239*(6.4E1/ \
               9.0);
            double t25305 = c*c0*t25210*t25014*t25222*t25240*t25223*t25170*t25229*t25239*(4.0/3.0);
            double t25306 = c0*kab1*rab1*t25212*t25222*t25240*t25232*t25170*t25224*t25067*t25166*t25239*t25198* \
               (1.6E1/4.5E1);
            double t25284 = t25230+t25231-t25305-t25234-t25306-t25235+t25280+t25281+t25228+t25282+t25283;
            double t25285 = c*c0*t25014*t25222*t25240*t25223*t25170*t25224*t25239*(2.0/3.0);
            double t25286 = t25285+1.0;
            double t25287 = 1.0/(t25266*t25266);
            double t25288 = 1.0/pow(t25225,3.0/2.0);
            double t25289 = t25233*t25276*3.0;
            double t25290 = c*c0*t25042*t25222*t25223*t25170*t25224*(4.0/3.0);
            double t25291 = a3*c0*gamma_aa[index]*t25013*t25222*t25223*t25224*t25046*(2.8E1/3.0);
            double t25292 = c*c0*t25015*t25222*t25016*t25223*t25053*t25170*t25224*t25018*(1.28E2/3.0);
            double t25294 = c*c0*t25210*t25014*t25222*t25223*t25170*t25229*8.0;
            double t25295 = c0*kab1*rab1*t25212*t25222*t25232*t25170*t25224*t25067*t25166*t25198*(3.2E1/1.5E1) \
               ;
            double t25293 = t25290+t25291+t25292-t25294-t25295+t25289;
            double t25296 = t25233*t25276*2.0;
            double t25297 = c*c0*t25042*t25222*t25223*t25170*t25224*(8.0/9.0);
            double t25298 = a3*c0*gamma_aa[index]*t25013*t25222*t25223*t25224*t25046*(5.6E1/9.0);
            double t25299 = c*c0*t25015*t25222*t25016*t25223*t25053*t25170*t25224*t25018*(2.56E2/9.0);
            double t25307 = c*c0*t25210*t25014*t25222*t25223*t25170*t25229*(1.6E1/3.0);
            double t25308 = c0*kab1*rab1*t25212*t25222*t25232*t25170*t25224*t25067*t25166*t25198*(6.4E1/4.5E1) \
               ;
            double t25300 = -t25307-t25308+t25296+t25297+t25298+t25299;
            double t25301 = 1.0/t25170;
            double t25302 = exp(-t25221);
            double t25303 = t25168*t25168;
            double t25304 = t25173*t25173;
            double t25309 = 0.0 ;
            double t25310 = t25215*t25215;
            double t25311 = t25240*t25239;
            double t25312 = t25267*t25286*t25279;
            double t25313 = t25311+t25312;
            double t25314 = c*c0*t25022*(8.0/2.7E1);
            double t25315 = t25015*t25016*t25018*t25171*t25146*t25173*t25182*t25168*(3.04E7/9.0);
            double t25316 = t25210*t25015*t25016*t25018*t25171*t25182*t25077*t25168*(3.2E6/3.0);
            double t25317 = kab1*t25250*t25171*t25173*t25182*t25067*t25166*t25068*t25248*(6.4E4/9.0);
            double t25318 = a3*a3;
            double t25319 = 1.0/pow(t25170,5.0/2.0);
            double t25320 = 1.0/pow(rho_a[index],1.3E1/3.0);
            double t25321 = a3*gamma_aa[index]*t25021*t25013*t25320*t25213*t25173*t25182*t25168*(3.5E6/9.0);
            double t25322 = a3*gamma_aa[index]*t25021*t25210*t25013*t25213*t25182*t25192*t25168*(7.0E5/3.0);
            double t25323 = kab1*rab1*t25081*t25171*t25173*t25182*t25067*t25166*t25068*(1.6E4/9.0);
            double t25324 = 1.0/pow(rho_a[index],2.9E1/3.0);
            double t25325 = a3*gamma_aa[index]*kab1*rab1*t25013*t25212*t25213*t25090*t25173*t25182*t25166*(5.6E5/ \
               9.0);
            double t25326 = c*kab1*rab1*t25212*t25015*t25016*t25018*t25171*t25173*t25182*t25093*t25166*(2.56E6/ \
               9.0);
            double t25327 = t25321+t25322+t25314+t25323+t25315+t25316+t25325+t25317+t25326-t25171*t25182*t25238* \
               t25168*1.0E5-t25171*t25173*t25182*t25075*t25147*t25076*t25247*t25168*(2.56E7/9.0)-c*kab1*rab1*t25210* \
               t25212*t25042*t25171*t25182*t25166*(1.6E5/3.0)-c*kab1*rab1*t25022*t25212*t25171*t25173*t25182*t25166* \
               (3.2E5/9.0)-t25016*t25053*t25018*t25217*t25173*t25182*t25318*t25319*t25168*(1.225E6/3.0)-a3*gamma_aa[index]* \
               t25021*t25013*t25015*t25213*t25016*t25018*t25324*t25173*t25182*t25168*(1.12E7/9.0);
            double t25328 = t25284*t25267*t25279;
            double t25329 = t25240*t25233*t25239;
            double t25330 = t25300*t25267*t25286;
            double t25331 = t25021*t25301*t25302*t25303*t25304*t25152*t25233*t25156*(3.0/2.0);
            double t25332 = t25330+t25331+t25328+t25329-t25293*t25286*t25287*t25279;
            v_rho_a_rho_a_[index] = -rho_a[index]*(c0*t25200*(t25267*t25279*(t25241+t25251+t25260+t25252-t25270+ \
               t25244+t25253-t25271+t25245+t25254-t25272+t25246-t25273-t25274-t25275+t25258+t25259-t25269+t25233* \
               t25227*(1.0/3.0)-(t25210*t25233*2.0)/t25173+t25015*t25016*t25233*t25018*t25077*(3.2E1/3.0)+a3*gamma_aa[index]* \
               t25021*t25013*t25301*t25233*t25192*(7.0/3.0)-(c*kab1*rab1*t25212*t25042*t25233*t25166*(8.0/1.5E1)) \
               /t25168+c*c0*t25022*t25222*t25240*t25223*t25170*t25224*t25239*(8.0/2.7E1)+a3*c0*gamma_aa[index]*t25013* \
               t25222*t25240*t25223*t25224*t25090*t25239*(5.6E1/9.0)+c*c0*t25014*t25222*t25240*t25223*t25170*t25224* \
               t25251*t25239*(2.0/3.0)-c*c0*t25210*t25042*t25222*t25240*t25223*t25170*t25229*t25239*(8.0/9.0)+c*c0* \
               t25014*t25222*t25240*t25223*t25170*t25242*t25243*t25239*4.0+c*c0*t25042*t25222*t25240*t25223*t25170* \
               t25224*t25233*t25239*(4.0/9.0)+c*c0*t25014*t25222*t25240*t25223*t25170*t25224*t25239*t25268*(2.0/3.0) \
               -c*c0*t25014*t25222*t25240*t25223*t25170*t25229*t25238*t25239*(4.0/3.0)-a3*c0*gamma_aa[index]*t25210* \
               t25013*t25222*t25240*t25223*t25046*t25229*t25239*(5.6E1/9.0)+a3*c0*gamma_aa[index]*t25013*t25222*t25240* \
               t25223*t25224*t25233*t25046*t25239*(2.8E1/9.0)-c*c0*t25210*t25014*t25222*t25240*t25223*t25170*t25233* \
               t25229*t25239*(8.0/3.0)+c*c0*t25015*t25222*t25240*t25016*t25223*t25170*t25224*t25018*t25093*t25239* \
               (4.48E2/9.0)+c*c0*t25222*t25240*t25223*t25170*t25224*t25092*t25075*t25076*t25247*t25239*(2.048E3/2.7E1) \
               +a3*c0*gamma_aa[index]*t25013*t25015*t25222*t25240*t25016*t25223*t25224*t25018*t25091*t25239*(8.96E2/ \
               2.7E1)-c*c0*t25210*t25015*t25222*t25240*t25016*t25223*t25053*t25170*t25018*t25229*t25239*(2.56E2/9.0) \
               +c*c0*t25015*t25222*t25240*t25016*t25223*t25053*t25170*t25224*t25233*t25018*t25239*(1.28E2/9.0)-c0* \
               kab1*rab1*t25212*t25222*t25240*t25232*t25170*t25224*t25067*t25166*t25068*t25239*(3.2E1/4.5E1)+c*c0* \
               kab1*rab1*t25222*t25240*t25232*t25170*t25224*t25081*t25067*t25166*t25239*t25249*(1.6E1/6.75E2)+c*c0* \
               kab1*t25222*t25240*t25232*t25250*t25170*t25224*t25067*t25166*t25239*t25248*t25249*(6.4E1/6.75E2)+c* \
               c0*t25222*t25240*t25250*t25170*t25224*t25255*t25067*t25256*t25239*t25248*t25257*t25249*(6.4E1/2.25E2) \
               +c0*kab1*rab1*t25210*t25212*t25222*t25240*t25232*t25170*t25067*t25166*t25229*t25239*t25198*(6.4E1/ \
               4.5E1)-c0*kab1*rab1*t25212*t25222*t25240*t25232*t25170*t25224*t25233*t25067*t25166*t25239*t25198*(3.2E1/ \
               4.5E1)-a3*c*c0*gamma_aa[index]*kab1*rab1*t25013*t25212*t25222*t25240*t25232*t25224*t25261*t25166*t25239* \
               (2.24E2/1.35E2)-c0*kab1*rab1*t25212*t25015*t25222*t25240*t25016*t25232*t25170*t25224*t25018*t25263* \
               t25067*t25166*t25239*(1.024E3/1.35E2))+t25240*t25251*t25239+t25300*t25284*t25267*2.0+t25240*t25239* \
               t25268+t25267*t25286*(-t25251*t25288+t25276*t25268*2.0+c*c0*t25022*t25222*t25223*t25170*t25224*(3.2E1/ \
               2.7E1)+a3*c0*gamma_aa[index]*t25013*t25222*t25223*t25224*t25090*(2.24E2/9.0)-c*c0*t25210*t25042*t25222* \
               t25223*t25170*t25229*(3.2E1/9.0)+c*c0*t25014*t25222*t25223*t25170*t25242*t25243*1.6E1-c*c0*t25014* \
               t25222*t25223*t25170*t25229*t25238*(1.6E1/3.0)-a3*c0*gamma_aa[index]*t25210*t25013*t25222*t25223*t25046* \
               t25229*(2.24E2/9.0)+c*c0*t25015*t25222*t25016*t25223*t25170*t25224*t25018*t25093*(1.792E3/9.0)+c*c0* \
               t25222*t25223*t25170*t25224*t25092*t25075*t25076*t25247*(8.192E3/2.7E1)+a3*c0*gamma_aa[index]*t25013* \
               t25015*t25222*t25016*t25223*t25224*t25018*t25091*(3.584E3/2.7E1)-c*c0*t25210*t25015*t25222*t25016* \
               t25223*t25053*t25170*t25018*t25229*(1.024E3/9.0)-c0*kab1*rab1*t25212*t25222*t25232*t25170*t25224*t25067* \
               t25166*t25068*(1.28E2/4.5E1)+c*c0*kab1*rab1*t25222*t25232*t25170*t25224*t25081*t25067*t25166*t25249* \
               (6.4E1/6.75E2)+c*c0*kab1*t25222*t25232*t25250*t25170*t25224*t25067*t25166*t25248*t25249*(2.56E2/6.75E2) \
               +c*c0*t25222*t25250*t25170*t25224*t25255*t25067*t25256*t25248*t25257*t25249*(2.56E2/2.25E2)+c0*kab1* \
               rab1*t25210*t25212*t25222*t25232*t25170*t25067*t25166*t25229*t25198*(2.56E2/4.5E1)-a3*c*c0*gamma_aa[index]* \
               kab1*rab1*t25013*t25212*t25222*t25232*t25224*t25261*t25166*(8.96E2/1.35E2)-c0*kab1*rab1*t25212*t25015* \
               t25222*t25016*t25232*t25170*t25224*t25018*t25263*t25067*t25166*(4.096E3/1.35E2))-t25300*t25293*t25286* \
               t25287*2.0-t25284*t25293*t25287*t25279*2.0-t25286*t25287*t25279*(t25251*t25288*(-3.0/2.0)+t25276*t25268* \
               3.0+c*c0*t25022*t25222*t25223*t25170*t25224*(1.6E1/9.0)+a3*c0*gamma_aa[index]*t25013*t25222*t25223* \
               t25224*t25090*(1.12E2/3.0)-c*c0*t25210*t25042*t25222*t25223*t25170*t25229*(1.6E1/3.0)+c*c0*t25014* \
               t25222*t25223*t25170*t25242*t25243*2.4E1-c*c0*t25014*t25222*t25223*t25170*t25229*t25238*8.0-a3*c0* \
               gamma_aa[index]*t25210*t25013*t25222*t25223*t25046*t25229*(1.12E2/3.0)+c*c0*t25015*t25222*t25016*t25223* \
               t25170*t25224*t25018*t25093*(8.96E2/3.0)+c*c0*t25222*t25223*t25170*t25224*t25092*t25075*t25076*t25247* \
               (4.096E3/9.0)+a3*c0*gamma_aa[index]*t25013*t25015*t25222*t25016*t25223*t25224*t25018*t25091*(1.792E3/ \
               9.0)-c*c0*t25210*t25015*t25222*t25016*t25223*t25053*t25170*t25018*t25229*(5.12E2/3.0)-c0*kab1*rab1* \
               t25212*t25222*t25232*t25170*t25224*t25067*t25166*t25068*(6.4E1/1.5E1)+c*c0*kab1*rab1*t25222*t25232* \
               t25170*t25224*t25081*t25067*t25166*t25249*(3.2E1/2.25E2)+c*c0*kab1*t25222*t25232*t25250*t25170*t25224* \
               t25067*t25166*t25248*t25249*(1.28E2/2.25E2)+c*c0*t25222*t25250*t25170*t25224*t25255*t25067*t25256* \
               t25248*t25257*t25249*(1.28E2/7.5E1)+c0*kab1*rab1*t25210*t25212*t25222*t25232*t25170*t25067*t25166* \
               t25229*t25198*(1.28E2/1.5E1)-a3*c*c0*gamma_aa[index]*kab1*rab1*t25013*t25212*t25222*t25232*t25224* \
               t25261*t25166*(4.48E2/4.5E1)-c0*kab1*rab1*t25212*t25015*t25222*t25016*t25232*t25170*t25224*t25018* \
               t25263*t25067*t25166*(2.048E3/4.5E1))+1.0/(t25266*t25266*t25266)*(t25293*t25293)*t25286*t25279*2.0- \
               t25021*t25301*t25302*t25150*t25303*t25304*t25152*t25233*(1.0/2.0)+t25021*t25301*t25302*t25303*t25304* \
               t25152*t25251*t25156*(3.0/2.0)+t25021*t25301*t25302*t25303*t25304*t25152*t25156*t25268*(3.0/2.0)+t25021* \
               t25210*t25301*t25302*t25303*t25152*t25233*t25173*t25156*3.0+kab1*rab1*t25301*t25212*t25302*t25304* \
               t25152*t25233*t25227*t25166*t25168*(4.0/5.0)-t25021*t25301*t25302*t25015*t25303*t25016*t25304*t25152* \
               t25233*t25018*t25162*1.6E1-a3*gamma_aa[index]*t25013*t25302*t25303*t25304*t25152*1.0/(t25170*t25170) \
               *t25233*t25217*t25249*(7.0/2.0))*(-1.0/2.0)+c0*t25310*t25313*t25309*(1.0/2.0)+c0*t25215*t25332*t25216+ \
               c0*t25313*t25216*t25327*(1.0/2.0))-rho_a[index]*(c0*t25200*t25178*(t25112*t25065*(-t25144*t25145*t25039+ \
               t25143*t25039*t25066*2.0-t25020*t25016*t25044*t25018*t25045*t25146*(1.216E3/9.0)+t25060*t25045*t25074* \
               t25075*t25147*t25076*(2.048E3/9.0)+c*c0*t25022*t25025*t25044*t25029*t25038*(3.2E1/2.7E1)-t25020*t25016* \
               t25044*t25018*t25073*t25066*t25077*(6.4E1/3.0)+a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25090*t25038* \
               (2.24E2/9.0)+c*c0*t25042*t25051*t25025*t25052*t25044*t25029*(3.2E1/9.0)-c*c0*t25014*t25025*t25052* \
               t25044*t25029*t25087*(1.6E1/3.0)+c*c0*t25014*t25025*t25044*t25029*t25088*t25089*1.6E1+a5*c0*gamma_aa[index]* \
               t25013*t25051*t25025*t25052*t25044*t25046*(2.24E2/9.0)-c*c0*t25020*t25060*t25016*t25025*t25018*t25029* \
               t25038*t25093*(1.792E3/9.0)+c*c0*t25020*t25016*t25025*t25044*t25018*t25029*t25038*t25093*(1.792E3/ \
               9.0)-c*c0*t25060*t25025*t25029*t25038*t25074*t25092*t25075*t25076*(1.6384E4/2.7E1)+c*c0*t25025*t25044* \
               t25029*t25038*t25074*t25092*t25075*t25076*(8.192E3/2.7E1)+c*c0*t25025*t25029*t25038*t25074*t25092* \
               t25075*t25076*t25099*(4.096E3/9.0)-a5*c0*gamma_aa[index]*t25020*t25013*t25060*t25016*t25025*t25018* \
               t25091*t25038*(3.584E3/2.7E1)+a5*c0*gamma_aa[index]*t25020*t25013*t25016*t25025*t25044*t25018*t25091* \
               t25038*(3.584E3/2.7E1)-c*c0*t25020*t25051*t25060*t25016*t25025*t25052*t25053*t25018*t25029*(1.024E3/ \
               9.0)+c*c0*t25020*t25051*t25016*t25025*t25052*t25044*t25053*t25018*t25029*(1.024E3/9.0))+t25110*t25055* \
               t25056+t25118*t25163*t25065*2.0+t25055*t25056*t25098+t25122*t25065*(t25100+t25101+t25102+t25103+t25104+ \
               t25105+t25106-t25160+t25107-t25161+t25108+t25109-t25157-t25158-t25159+t25098+t25227*t25094*(1.0/3.0) \
               +(t25051*t25094*2.0)/t25037+t25020*t25016*t25018*t25094*t25077*(3.2E1/3.0)-t25020*t25016*t25018*t25039* \
               t25094*t25077*(3.2E1/3.0)+a5*gamma_aa[index]*t25021*t25013*t25151*t25192*t25094*(7.0/3.0)+c*c0*t25022* \
               t25025*t25044*t25055*t25029*t25038*t25056*(8.0/2.7E1)+a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25090* \
               t25055*t25038*t25056*(5.6E1/9.0)+c*c0*t25110*t25014*t25025*t25044*t25055*t25029*t25038*t25056*(2.0/ \
               3.0)+c*c0*t25042*t25051*t25025*t25052*t25044*t25055*t25029*t25056*(8.0/9.0)-c*c0*t25014*t25025*t25052* \
               t25044*t25055*t25029*t25056*t25087*(4.0/3.0)+c*c0*t25042*t25025*t25044*t25055*t25029*t25038*t25056* \
               t25094*(4.0/9.0)+c*c0*t25014*t25025*t25044*t25055*t25029*t25038*t25056*t25098*(2.0/3.0)+c*c0*t25014* \
               t25025*t25044*t25055*t25029*t25056*t25088*t25089*4.0+a5*c0*gamma_aa[index]*t25013*t25051*t25025*t25052* \
               t25044*t25046*t25055*t25056*(5.6E1/9.0)+a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25046*t25055*t25038* \
               t25056*t25094*(2.8E1/9.0)+c*c0*t25014*t25051*t25025*t25052*t25044*t25055*t25029*t25056*t25094*(8.0/ \
               3.0)-c*c0*t25020*t25060*t25016*t25025*t25018*t25055*t25029*t25038*t25056*t25093*(4.48E2/9.0)+c*c0* \
               t25020*t25016*t25025*t25044*t25018*t25055*t25029*t25038*t25056*t25093*(4.48E2/9.0)-c*c0*t25060*t25025* \
               t25055*t25029*t25038*t25056*t25074*t25092*t25075*t25076*(4.096E3/2.7E1)+c*c0*t25025*t25044*t25055* \
               t25029*t25038*t25056*t25074*t25092*t25075*t25076*(2.048E3/2.7E1)+c*c0*t25025*t25055*t25029*t25038* \
               t25056*t25074*t25092*t25075*t25076*t25099*(1.024E3/9.0)-a5*c0*gamma_aa[index]*t25020*t25013*t25060* \
               t25016*t25025*t25018*t25055*t25091*t25038*t25056*(8.96E2/2.7E1)+a5*c0*gamma_aa[index]*t25020*t25013* \
               t25016*t25025*t25044*t25018*t25055*t25091*t25038*t25056*(8.96E2/2.7E1)-c*c0*t25020*t25051*t25060*t25016* \
               t25025*t25052*t25053*t25018*t25055*t25029*t25056*(2.56E2/9.0)+c*c0*t25020*t25051*t25016*t25025*t25052* \
               t25044*t25053*t25018*t25055*t25029*t25056*(2.56E2/9.0)-c*c0*t25020*t25060*t25016*t25025*t25053*t25018* \
               t25055*t25029*t25038*t25056*t25094*(1.28E2/9.0)+c*c0*t25020*t25016*t25025*t25044*t25053*t25018*t25055* \
               t25029*t25038*t25056*t25094*(1.28E2/9.0))-t25112*t25122*t25119*(t25144*t25145*t25039*(-3.0/2.0)+t25143* \
               t25039*t25066*3.0-t25020*t25016*t25044*t25018*t25045*t25146*(6.08E2/3.0)+t25060*t25045*t25074*t25075* \
               t25147*t25076*(1.024E3/3.0)+c*c0*t25022*t25025*t25044*t25029*t25038*(1.6E1/9.0)-t25020*t25016*t25044* \
               t25018*t25073*t25066*t25077*3.2E1+a5*c0*gamma_aa[index]*t25013*t25025*t25044*t25090*t25038*(1.12E2/ \
               3.0)+c*c0*t25042*t25051*t25025*t25052*t25044*t25029*(1.6E1/3.0)-c*c0*t25014*t25025*t25052*t25044*t25029* \
               t25087*8.0+c*c0*t25014*t25025*t25044*t25029*t25088*t25089*2.4E1+a5*c0*gamma_aa[index]*t25013*t25051* \
               t25025*t25052*t25044*t25046*(1.12E2/3.0)-c*c0*t25020*t25060*t25016*t25025*t25018*t25029*t25038*t25093* \
               (8.96E2/3.0)+c*c0*t25020*t25016*t25025*t25044*t25018*t25029*t25038*t25093*(8.96E2/3.0)-c*c0*t25060* \
               t25025*t25029*t25038*t25074*t25092*t25075*t25076*(8.192E3/9.0)+c*c0*t25025*t25044*t25029*t25038*t25074* \
               t25092*t25075*t25076*(4.096E3/9.0)+c*c0*t25025*t25029*t25038*t25074*t25092*t25075*t25076*t25099*(2.048E3/ \
               3.0)-a5*c0*gamma_aa[index]*t25020*t25013*t25060*t25016*t25025*t25018*t25091*t25038*(1.792E3/9.0)+a5* \
               c0*gamma_aa[index]*t25020*t25013*t25016*t25025*t25044*t25018*t25091*t25038*(1.792E3/9.0)-c*c0*t25020* \
               t25051*t25060*t25016*t25025*t25052*t25053*t25018*t25029*(5.12E2/3.0)+c*c0*t25020*t25051*t25016*t25025* \
               t25052*t25044*t25053*t25018*t25029*(5.12E2/3.0))-t25112*t25118*t25119*t25128*2.0-t25122*t25163*t25119* \
               t25128*2.0+t25112*t25122*1.0/(t25064*t25064*t25064)*(t25128*t25128)*2.0+t25110*t25021*t25151*t25152* \
               t25153*t25154*t25155*t25156*(3.0/2.0)-t25021*t25150*t25151*t25152*t25153*t25154*t25155*t25094*(1.0/ \
               2.0)+t25021*t25151*t25152*t25153*t25154*t25155*t25156*t25098*(3.0/2.0)-t25021*t25051*t25151*t25152* \
               t25153*t25037*t25154*t25156*t25094*3.0+t25020*t25021*t25016*t25151*t25152*t25018*t25027*t25153*t25162* \
               t25155*t25094*1.6E1-t25020*t25021*t25016*t25151*t25152*t25018*t25153*t25162*t25154*t25155*t25094*1.6E1- \
               a5*gamma_aa[index]*t25013*t25152*t25153*t25154*t25217*1.0/(t25029*t25029)*t25155*t25094*t25249*(7.0/ \
               2.0))*(-1.0/2.0)+c0*t25200*t25203*t25178*(t25067*t25068*t25177*(1.0E1/9.0)-t25067*t25194*t25197*t25198* \
               (8.0/3.0)+t25150*t25067*1.0/(t25176*t25176*t25176*t25176)*(t25197*t25197)*6.0-t25150*t25067*t25194* \
               (c*k2*t25022*(4.0/9.0)+c*k1*t25022*t25047*(2.0/9.0)-k1*t25083*t25067*t25068*(1.0/3.6E1))*2.0)*(1.0/ \
               2.0)+c0*t25200*t25205*t25191*t25178+c0*t25310*t25203*t25309*t25178*(1.0/2.0)+c0*t25203*t25216*t25327* \
               t25178*(1.0/2.0)+c0*t25215*t25216*t25191*t25178-c0*t25200*t25203*(t25205*t25205)*t25178*(1.0/2.0)- \
               c0*t25203*t25205*t25215*t25216*t25178)-c0*t25200*t25332+c0*t25313*t25215*t25216-c0*t25200*t25191*t25178+ \
               c0*t25200*t25203*t25205*t25178+c0*t25203*t25215*t25216*t25178;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t25335 = tspi_m13*tspi_m13;
                double t25336 = 1.0/pow(rho_a[index],1.0/3.0);
                double t25337 = a2*a2;
                double t25338 = gamma_aa[index]*gamma_aa[index];
                double t25339 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t25340 = t25335*t25335;
                double t25341 = c*t25336;
                double t25342 = a4*a4;
                double t25343 = 1.0/c;
                double t25344 = 1.0/pow(rho_a[index],7.0/3.0);
                double t25345 = sqrt(t25341);
                double t25346 = t25340*t25342*t25338*t25339*2.0;
                double t25347 = exp(t25346);
                double t25348 = t25340*t25342*t25338*t25339;
                double t25349 = t25348+1.0;
                double t25350 = 1.0/(t25349*t25349);
                double t25351 = a5*gamma_aa[index]*t25343*t25335*t25344;
                double t25352 = t25351+1.0;
                double t25363 = raa2*t25345;
                double t25353 = exp(-t25363);
                double t25354 = t25353-1.0;
                double t25355 = kaa2*t25354;
                double t25356 = pow(t25341,2.0/5.0);
                double t25364 = raa1*t25356;
                double t25357 = exp(-t25364);
                double t25358 = t25357-1.0;
                double t25359 = kaa1*t25358;
                double t25360 = -kaa0+t25355+t25359;
                double t25361 = 1.0/(t25360*t25360);
                double t25362 = c*c0*t25350*t25352*t25361*t25336*t25347*(2.0/3.0);
                double t25365 = 1.0/pow(rho_a[index],8.0/3.0);
                double t25366 = 1.0/pow(rho_a[index],4.0/3.0);
                double t25367 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t25368 = 1.0/pow(rho_a[index],2.0E1/3.0);
                double t25369 = 1.0/(t25349*t25349*t25349);
                double t25370 = t25342*t25342;
                double t25371 = 1.0/pow(rho_a[index],1.2E1);
                double t25372 = t25340*t25340;
                double t25373 = 1.0/sqrt(t25341);
                double t25374 = c*kaa2*raa2*t25353*t25373*t25366*(1.0/6.0);
                double t25375 = 1.0/pow(t25341,3.0/5.0);
                double t25376 = c*kaa1*raa1*t25357*t25366*t25375*(2.0/1.5E1);
                double t25377 = t25374+t25376;
                double t25378 = 1.0/(t25360*t25360*t25360);
                double t25379 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t25380 = 1.0/t25349;
                double t25381 = c*c0*t25352*t25361*t25336*t25347*(2.0/3.0);
                double t25382 = sqrt(t25381);
                double t25383 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t25384 = exp(t25362);
                double t25385 = Ei(-t25362);
                double t25386 = c*c0*t25350*t25352*t25361*t25347*t25366*(2.0/9.0);
                double t25387 = a5*c0*gamma_aa[index]*t25350*t25361*t25335*t25347*t25383*(1.4E1/9.0);
                double t25388 = c*c0*t25350*t25352*t25336*t25347*t25377*t25378*(4.0/3.0);
                double t25389 = c*c0*t25340*t25350*t25342*t25352*t25361*t25338*t25347*t25368*(6.4E1/9.0);
                double t25390 = t25380*t25382*6.0;
                double t25391 = c*c0*t25350*t25352*t25361*t25336*t25347*4.0;
                double t25392 = t25390+t25391+3.0;
                double t25393 = 1.0/t25392;
                double t25394 = a5*c0*t25350*t25361*t25335*t25347*t25365*(2.0/3.0);
                double t25395 = c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25379*(8.0/3.0);
                double t25396 = 1.0/sqrt(t25381);
                double t25399 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25369*t25379*(8.0/3.0);
                double t25397 = t25394+t25395-t25399;
                double t25410 = c*c0*t25340*t25342*t25352*t25361*t25338*t25347*t25368*t25369*(6.4E1/9.0);
                double t25398 = -t25410+t25386+t25387+t25388+t25389;
                double t25400 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t25401 = a5*c0*t25350*t25361*t25335*t25347*t25383*(1.6E1/9.0);
                double t25402 = a5*c0*t25350*t25335*t25347*t25365*t25377*t25378*(4.0/3.0);
                double t25403 = a5*c0*t25340*t25350*t25342*t25361*t25335*t25338*t25347*t25367*(4.0E1/3.0);
                double t25404 = c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25368*(1.36E2/9.0) \
                   ;
                double t25405 = c*c0*gamma_aa[index]*t25350*t25352*t25361*t25370*t25371*t25372*t25338*t25347*(2.56E2/ \
                   9.0);
                double t25406 = 1.0/(t25349*t25349*t25349*t25349);
                double t25407 = c*c0*gamma_aa[index]*t25352*t25361*t25370*t25406*t25371*t25372*t25338*t25347*(1.28E2/ \
                   3.0);
                double t25408 = c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25347*t25377*t25378*t25379*(1.6E1/ \
                   3.0);
                double t25411 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25368*t25369*(1.36E2/9.0) \
                   ;
                double t25412 = c*c0*gamma_aa[index]*t25352*t25361*t25370*t25371*t25372*t25338*t25347*t25369*(5.12E2/ \
                   9.0);
                double t25413 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25347*t25377*t25369*t25378*t25379*(1.6E1/ \
                   3.0);
                double t25470 = a5*c0*t25340*t25342*t25361*t25335*t25338*t25347*t25367*t25369*(4.0E1/3.0);
                double t25409 = t25401+t25402-t25411+t25403-t25412+t25404-t25413+t25405+t25407-t25470+t25408;
                double t25414 = a5*c0*t25361*t25335*t25347*t25365*(2.0/3.0);
                double t25415 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25379*(8.0/3.0);
                double t25416 = t25414+t25415;
                double t25417 = c*c0*t25352*t25361*t25347*t25366*(2.0/9.0);
                double t25418 = a5*c0*gamma_aa[index]*t25361*t25335*t25347*t25383*(1.4E1/9.0);
                double t25419 = c*c0*t25352*t25336*t25347*t25377*t25378*(4.0/3.0);
                double t25420 = c*c0*t25340*t25342*t25352*t25361*t25338*t25347*t25368*(6.4E1/9.0);
                double t25421 = t25420+t25417+t25418+t25419;
                double t25422 = t25380*t25382*4.0;
                double t25423 = c*c0*t25350*t25352*t25361*t25336*t25347*(8.0/3.0);
                double t25424 = t25422+t25423+6.0;
                double t25425 = a5*c0*t25350*t25361*t25335*t25347*t25365*t25384*t25385*(2.0/3.0);
                double t25426 = c*c0*t25350*t25352*t25361*t25336*t25347*t25384*t25385*t25397*(2.0/3.0);
                double t25427 = c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25384*t25385*t25379* \
                   (8.0/3.0);
                double t25428 = c*c0*t25350*t25352*t25361*t25336*t25347*t25384*t25385*(2.0/3.0);
                double t25429 = t25428+1.0;
                double t25430 = 1.0/(t25392*t25392);
                double t25431 = a5*c0*t25361*t25335*t25347*t25383*(1.6E1/9.0);
                double t25432 = a5*c0*t25335*t25347*t25365*t25377*t25378*(4.0/3.0);
                double t25433 = a5*c0*t25340*t25342*t25361*t25335*t25338*t25347*t25367*(4.0E1/3.0);
                double t25434 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25368*(1.36E2/9.0);
                double t25435 = c*c0*gamma_aa[index]*t25352*t25361*t25370*t25371*t25372*t25338*t25347*(2.56E2/9.0) \
                   ;
                double t25436 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25347*t25377*t25378*t25379*(1.6E1/3.0) \
                   ;
                double t25437 = t25431+t25432+t25433+t25434+t25435+t25436;
                double t25438 = 1.0/pow(t25381,3.0/2.0);
                double t25439 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t25440 = t25380*t25416*t25396*2.0;
                double t25441 = a5*c0*t25350*t25361*t25335*t25347*t25365*(8.0/3.0);
                double t25442 = c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25379*(3.2E1/3.0) \
                   ;
                double t25504 = gamma_aa[index]*t25340*t25350*t25342*t25382*t25339*8.0;
                double t25505 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25369*t25379*(3.2E1/3.0) \
                   ;
                double t25443 = t25440+t25441-t25504+t25442-t25505;
                double t25444 = t25421*t25380*t25396*3.0;
                double t25445 = c*c0*t25350*t25352*t25361*t25347*t25366*(4.0/3.0);
                double t25446 = a5*c0*gamma_aa[index]*t25350*t25361*t25335*t25347*t25383*(2.8E1/3.0);
                double t25447 = c*c0*t25350*t25352*t25336*t25347*t25377*t25378*8.0;
                double t25448 = c*c0*t25340*t25350*t25342*t25352*t25361*t25338*t25347*t25368*(1.28E2/3.0);
                double t25467 = t25400*t25340*t25350*t25342*t25382*t25338*3.2E1;
                double t25468 = c*c0*t25340*t25342*t25352*t25361*t25338*t25347*t25368*t25369*(1.28E2/3.0);
                double t25449 = t25444+t25445+t25446+t25447+t25448-t25467-t25468;
                double t25450 = t25421*t25380*t25396*2.0;
                double t25451 = c*c0*t25350*t25352*t25361*t25347*t25366*(8.0/9.0);
                double t25452 = a5*c0*gamma_aa[index]*t25350*t25361*t25335*t25347*t25383*(5.6E1/9.0);
                double t25453 = c*c0*t25350*t25352*t25336*t25347*t25377*t25378*(1.6E1/3.0);
                double t25454 = c*c0*t25340*t25350*t25342*t25352*t25361*t25338*t25347*t25368*(2.56E2/9.0);
                double t25499 = t25400*t25340*t25350*t25342*t25382*t25338*(6.4E1/3.0);
                double t25500 = c*c0*t25340*t25342*t25352*t25361*t25338*t25347*t25368*t25369*(2.56E2/9.0);
                double t25455 = -t25500+t25450+t25451+t25452+t25453+t25454-t25499;
                double t25456 = t25380*t25416*t25396*3.0;
                double t25457 = a5*c0*t25350*t25361*t25335*t25347*t25365*4.0;
                double t25458 = c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25379*1.6E1;
                double t25465 = gamma_aa[index]*t25340*t25350*t25342*t25382*t25339*1.2E1;
                double t25466 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25369*t25379*1.6E1;
                double t25459 = t25456-t25465+t25457-t25466+t25458;
                double t25460 = c*c0*t25350*t25352*t25361*t25347*t25366*t25384*t25385*(2.0/9.0);
                double t25461 = c*c0*t25350*t25352*t25336*t25347*t25384*t25385*t25377*t25378*(4.0/3.0);
                double t25462 = c*c0*t25350*t25352*t25361*t25336*t25347*t25384*t25385*t25398*(2.0/3.0);
                double t25463 = a5*c0*gamma_aa[index]*t25350*t25361*t25335*t25347*t25383*t25384*t25385*(1.4E1/9.0) \
                   ;
                double t25464 = c*c0*t25340*t25350*t25342*t25352*t25361*t25338*t25347*t25384*t25385*t25368*(6.4E1/ \
                   9.0);
                double t25469 = 1.0/t25352;
                double t25471 = 1.0/c0;
                double t25472 = pow(rho_a[index],1.0/3.0);
                double t25473 = exp(-t25346);
                double t25474 = t25349*t25349;
                double t25475 = t25360*t25360;
                double t25476 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t25501 = c*c0*t25340*t25342*t25352*t25361*t25338*t25347*t25384*t25385*t25368*t25369*(6.4E1/ \
                   9.0);
                double t25477 = -t25410-t25501+t25460+t25461+t25462+t25463+t25464+t25386+t25387+t25388+t25389;
                double t25506 = c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25384*t25385*t25369*t25379* \
                   (8.0/3.0);
                double t25478 = t25425-t25506+t25426+t25427+t25394+t25395-t25399;
                double t25479 = t25340*t25337*t25338*t25339;
                double t25480 = pow(t25341,4.0/5.0);
                double t25497 = rab1*t25480;
                double t25481 = exp(-t25497);
                double t25482 = t25481-1.0;
                double t25498 = kab1*t25482;
                double t25483 = kab0-t25498;
                double t25484 = a3*gamma_aa[index]*t25343*t25335*t25344;
                double t25485 = t25484+1.0;
                double t25486 = 1.0/sqrt(t25485);
                double t25487 = a1*gamma_aa[index]*t25335*t25365;
                double t25488 = t25487+t25479+1.0;
                double t25489 = c*c;
                double t25490 = 1.0/pow(rho_a[index],2.0/3.0);
                double t25491 = k1*t25345;
                double t25492 = c*k2*t25336;
                double t25493 = t25491+t25492;
                double t25494 = 1.0/(t25493*t25493);
                double t25503 = t25490*t25494*t25489;
                double t25495 = exp(-t25503);
                double t25496 = exp(-t25479);
                double t25502 = c*c0*t25336*(2.0/3.0);
                double t25507 = t25483*t25486*t25496*t25488*1.0E5;
                double t25508 = 1.0/pow(rho_a[index],1.0E1/3.0);
                double t25509 = 1.0/pow(t25485,3.0/2.0);
                double t25510 = t25400*t25340*t25337*t25338*(1.6E1/3.0);
                double t25511 = a1*gamma_aa[index]*t25335*t25383*(8.0/3.0);
                double t25512 = t25510+t25511;
                double t25513 = a1*t25335*t25365;
                double t25514 = gamma_aa[index]*t25340*t25337*t25339*2.0;
                double t25515 = t25513+t25514;
                double t25516 = 1.0/(c*c);
                double t25517 = 1.0/pow(t25341,1.0/5.0);
                double t25518 = t25502-t25507;
                double t25519 = 0.0 ;
                double t25520 = t25384*t25385*t25397;
                double t25521 = t25443*t25393*t25429;
                double t25522 = t25424*t25393*t25478;
                double t25523 = t25343*t25471*t25472*t25473*t25474*t25475*t25397*t25469*(3.0/2.0);
                double t25662 = t25430*t25424*t25429*t25459;
                double t25524 = t25520+t25521+t25522+t25523-t25662;
                double t25525 = t25384*t25385;
                double t25526 = t25424*t25393*t25429;
                double t25527 = t25525+t25526;
                double t25528 = 1.0/pow(rho_a[index],5.0/3.0);
                double t25529 = t25528*t25494*t25489*(2.0/3.0);
                double t25530 = 1.0/(t25493*t25493*t25493);
                double t25531 = c*k2*t25366*(1.0/3.0);
                double t25532 = c*k1*t25373*t25366*(1.0/6.0);
                double t25533 = t25531+t25532;
                double t25534 = t25529-t25530*t25533*t25490*t25489*2.0;
                double t25535 = a3*t25343*t25335*t25344*t25509*t25483*t25496*t25488*5.0E4;
                double t25536 = gamma_aa[index]*t25340*t25337*t25339*t25483*t25486*t25496*t25488*2.0E5;
                double t25538 = t25515*t25483*t25486*t25496*1.0E5;
                double t25537 = t25535+t25536-t25538;
                double t25539 = c*c0*t25366*(2.0/9.0);
                double t25540 = t25400*t25340*t25337*t25338*t25483*t25486*t25496*t25488*(1.6E6/3.0);
                double t25541 = a3*gamma_aa[index]*t25343*t25335*t25508*t25509*t25483*t25496*t25488*(3.5E5/3.0);
                double t25651 = t25512*t25483*t25486*t25496*1.0E5;
                double t25652 = c*kab1*rab1*t25481*t25517*t25366*t25486*t25496*t25488*(8.0E4/3.0);
                double t25542 = t25540+t25541-t25651-t25652+t25539;
                double t25543 = -t25502+t25507;
                double t25544 = ( (t25543 > 0.0) ?  1.0 : 0.0 ) ;
                double t25545 = t25340*t25337*t25338*t25339*2.0;
                double t25546 = exp(t25545);
                double t25547 = 1.0/(t25483*t25483);
                double t25548 = 1.0/(t25488*t25488);
                double t25549 = c*c0*t25336*t25546*t25547*t25485*t25548*(2.0/3.0);
                double t25550 = 1.0/(t25488*t25488*t25488);
                double t25551 = exp(t25549);
                double t25552 = Ei(-t25549);
                double t25553 = c*c0*t25366*t25546*t25547*t25485*t25548*(2.0/9.0);
                double t25554 = a3*c0*gamma_aa[index]*t25335*t25383*t25546*t25547*t25548*(1.4E1/9.0);
                double t25555 = c*c0*t25340*t25337*t25338*t25546*t25547*t25368*t25485*t25548*(6.4E1/9.0);
                double t25556 = 1.0/(t25483*t25483*t25483);
                double t25557 = sqrt(t25549);
                double t25558 = t25557*6.0;
                double t25559 = c*c0*t25336*t25546*t25547*t25485*t25548*4.0;
                double t25560 = t25558+t25559+3.0;
                double t25561 = 1.0/t25560;
                double t25584 = c*c0*t25512*t25550*t25336*t25546*t25547*t25485*(4.0/3.0);
                double t25585 = c0*kab1*rab1*t25481*t25517*t25528*t25546*t25556*t25485*t25548*t25489*(1.6E1/4.5E1) \
                   ;
                double t25562 = t25553+t25554+t25555-t25584-t25585;
                double t25563 = 1.0/sqrt(t25549);
                double t25564 = a3*c0*t25335*t25365*t25546*t25547*t25548*(2.0/3.0);
                double t25565 = c*c0*gamma_aa[index]*t25340*t25337*t25546*t25547*t25485*t25548*t25379*(8.0/3.0);
                double t25567 = c*c0*t25550*t25515*t25336*t25546*t25547*t25485*(4.0/3.0);
                double t25566 = t25564+t25565-t25567;
                double t25568 = a1*t25335*t25383*(8.0/3.0);
                double t25569 = gamma_aa[index]*t25400*t25340*t25337*(3.2E1/3.0);
                double t25570 = t25568+t25569;
                double t25571 = t25337*t25337;
                double t25572 = a3*c0*t25512*t25550*t25335*t25365*t25546*t25547*(4.0/3.0);
                double t25573 = c*c0*t25550*t25515*t25366*t25546*t25547*t25485*(4.0/9.0);
                double t25574 = c*c0*t25550*t25336*t25570*t25546*t25547*t25485*(4.0/3.0);
                double t25575 = 1.0/(t25488*t25488*t25488*t25488);
                double t25576 = a3*c0*gamma_aa[index]*t25550*t25335*t25515*t25383*t25546*t25547*(2.8E1/9.0);
                double t25577 = c*c0*gamma_aa[index]*t25340*t25512*t25550*t25337*t25546*t25547*t25485*t25379*(1.6E1/ \
                   3.0);
                double t25578 = c*c0*t25340*t25550*t25515*t25337*t25338*t25546*t25547*t25368*t25485*(1.28E2/9.0);
                double t25579 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t25580 = a3*c*c0*kab1*rab1*t25335*t25481*t25517*t25546*t25556*t25548*t25579*(1.6E1/4.5E1);
                double t25581 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]);
                double t25582 = c0*gamma_aa[index]*kab1*rab1*t25340*t25337*t25481*t25517*t25581*t25546*t25556*t25485* \
                   t25548*t25489*(6.4E1/4.5E1);
                double t25587 = a3*c0*t25335*t25383*t25546*t25547*t25548*(1.6E1/9.0);
                double t25588 = c*c0*t25512*t25515*t25336*t25546*t25547*t25485*t25575*4.0;
                double t25589 = a3*c0*t25340*t25335*t25337*t25338*t25546*t25367*t25547*t25548*(4.0E1/3.0);
                double t25590 = c*c0*gamma_aa[index]*t25340*t25337*t25546*t25547*t25368*t25485*t25548*(1.36E2/9.0) \
                   ;
                double t25591 = c*c0*gamma_aa[index]*t25371*t25372*t25571*t25338*t25546*t25547*t25485*t25548*(2.56E2/ \
                   9.0);
                double t25592 = c0*kab1*rab1*t25550*t25515*t25481*t25517*t25528*t25546*t25556*t25485*t25489*(3.2E1/ \
                   4.5E1);
                double t25583 = t25580+t25572-t25590+t25573+t25582-t25591+t25574-t25592+t25576+t25577+t25578-t25587- \
                   t25588-t25589;
                double t25586 = 1.0/rho_a[index];
                double t25593 = c*c0*t25551*t25336*t25552*t25546*t25547*t25485*t25548*(2.0/3.0);
                double t25594 = t25593+1.0;
                double t25595 = t25563*t25566*2.0;
                double t25596 = a3*c0*t25335*t25365*t25546*t25547*t25548*(8.0/3.0);
                double t25597 = c*c0*gamma_aa[index]*t25340*t25337*t25546*t25547*t25485*t25548*t25379*(3.2E1/3.0) \
                   ;
                double t25649 = c*c0*t25550*t25515*t25336*t25546*t25547*t25485*(1.6E1/3.0);
                double t25598 = t25595-t25649+t25596+t25597;
                double t25599 = 1.0/(t25560*t25560);
                double t25600 = t25562*t25563*2.0;
                double t25601 = c*c0*t25366*t25546*t25547*t25485*t25548*(8.0/9.0);
                double t25602 = a3*c0*gamma_aa[index]*t25335*t25383*t25546*t25547*t25548*(5.6E1/9.0);
                double t25603 = c*c0*t25340*t25337*t25338*t25546*t25547*t25368*t25485*t25548*(2.56E2/9.0);
                double t25635 = c*c0*t25512*t25550*t25336*t25546*t25547*t25485*(1.6E1/3.0);
                double t25636 = c0*kab1*rab1*t25481*t25517*t25528*t25546*t25556*t25485*t25548*t25489*(6.4E1/4.5E1) \
                   ;
                double t25604 = t25600+t25601+t25602+t25603-t25635-t25636;
                double t25605 = t25557*4.0;
                double t25606 = c*c0*t25336*t25546*t25547*t25485*t25548*(8.0/3.0);
                double t25607 = t25605+t25606+6.0;
                double t25608 = t25563*t25566*3.0;
                double t25609 = a3*c0*t25335*t25365*t25546*t25547*t25548*4.0;
                double t25610 = c*c0*gamma_aa[index]*t25340*t25337*t25546*t25547*t25485*t25548*t25379*1.6E1;
                double t25626 = c*c0*t25550*t25515*t25336*t25546*t25547*t25485*8.0;
                double t25611 = t25610+t25608-t25626+t25609;
                double t25612 = c*c0*t25551*t25552*t25366*t25546*t25547*t25485*t25548*(2.0/9.0);
                double t25613 = a3*c0*gamma_aa[index]*t25335*t25551*t25552*t25383*t25546*t25547*t25548*(1.4E1/9.0) \
                   ;
                double t25614 = c*c0*t25551*t25336*t25552*t25562*t25546*t25547*t25485*t25548*(2.0/3.0);
                double t25615 = c*c0*t25340*t25551*t25552*t25337*t25338*t25546*t25547*t25368*t25485*t25548*(6.4E1/ \
                   9.0);
                double t25616 = t25562*t25563*3.0;
                double t25617 = c*c0*t25366*t25546*t25547*t25485*t25548*(4.0/3.0);
                double t25618 = a3*c0*gamma_aa[index]*t25335*t25383*t25546*t25547*t25548*(2.8E1/3.0);
                double t25619 = c*c0*t25340*t25337*t25338*t25546*t25547*t25368*t25485*t25548*(1.28E2/3.0);
                double t25627 = c*c0*t25512*t25550*t25336*t25546*t25547*t25485*8.0;
                double t25628 = c0*kab1*rab1*t25481*t25517*t25528*t25546*t25556*t25485*t25548*t25489*(3.2E1/1.5E1) \
                   ;
                double t25620 = t25616+t25617+t25618-t25627+t25619-t25628;
                double t25621 = a3*c0*t25335*t25551*t25552*t25365*t25546*t25547*t25548*(2.0/3.0);
                double t25622 = c*c0*t25551*t25336*t25552*t25546*t25547*t25485*t25548*t25566*(2.0/3.0);
                double t25623 = c*c0*gamma_aa[index]*t25340*t25551*t25552*t25337*t25546*t25547*t25485*t25548*t25379* \
                   (8.0/3.0);
                double t25650 = c*c0*t25550*t25515*t25551*t25336*t25552*t25546*t25547*t25485*(4.0/3.0);
                double t25624 = t25621+t25622+t25623-t25650+t25564+t25565-t25567;
                double t25625 = 1.0/pow(t25549,3.0/2.0);
                double t25629 = 1.0/t25485;
                double t25630 = exp(-t25545);
                double t25631 = t25483*t25483;
                double t25632 = t25488*t25488;
                double t25633 = 1.0/(rho_a[index]*rho_a[index]);
                double t25634 = t25612+t25613+t25614+t25615+t25553+t25554+t25555-t25584-t25585-c*c0*t25512*t25550* \
                   t25551*t25336*t25552*t25546*t25547*t25485*(4.0/3.0)-c0*kab1*rab1*t25551*t25552*t25481*t25517*t25528* \
                   t25546*t25556*t25485*t25548*t25489*(1.6E1/4.5E1);
                double t25637 = a3*t25343*t25335*t25508*t25509*t25483*t25496*t25488*(3.5E5/3.0);
                double t25638 = a3*t25512*t25343*t25335*t25344*t25509*t25483*t25496*5.0E4;
                double t25639 = gamma_aa[index]*t25400*t25340*t25337*t25483*t25486*t25496*t25488*(3.2E6/3.0);
                double t25640 = gamma_aa[index]*t25340*t25512*t25337*t25339*t25483*t25486*t25496*2.0E5;
                double t25641 = t25400*t25340*t25515*t25337*t25338*t25483*t25486*t25496*(1.6E6/3.0);
                double t25642 = a3*a3;
                double t25643 = 1.0/pow(t25485,5.0/2.0);
                double t25644 = a3*gamma_aa[index]*t25343*t25335*t25515*t25508*t25509*t25483*t25496*(3.5E5/3.0);
                double t25645 = a3*kab1*rab1*t25335*t25481*t25517*t25383*t25509*t25496*t25488*(4.0E4/3.0);
                double t25646 = 1.0/pow(rho_a[index],2.6E1/3.0);
                double t25647 = c*gamma_aa[index]*kab1*rab1*t25340*t25337*t25481*t25517*t25368*t25486*t25496*t25488* \
                   (1.6E5/3.0);
                double t25648 = t25640+t25641+t25644+t25645+t25637+t25638+t25647+t25639-t25570*t25483*t25486*t25496* \
                   1.0E5-c*kab1*rab1*t25515*t25481*t25517*t25366*t25486*t25496*(8.0E4/3.0)-gamma_aa[index]*t25340*t25516* \
                   t25642*t25643*t25483*t25379*t25496*t25488*1.75E5-gamma_aa[index]*t25372*t25571*t25338*t25483*t25439* \
                   t25486*t25496*t25488*(3.2E6/3.0)-a3*t25340*t25343*t25335*t25337*t25338*t25509*t25483*t25646*t25496* \
                   t25488*5.0E5;
                double t25653 = 0.0 ;
                double t25654 = t25551*t25552;
                double t25655 = t25561*t25607*t25594;
                double t25656 = t25654+t25655;
                double t25657 = t25561*t25594*t25598;
                double t25658 = t25551*t25552*t25566;
                double t25659 = t25561*t25624*t25607;
                double t25660 = t25630*t25343*t25631*t25632*t25471*t25472*t25566*t25629*(3.0/2.0);
                double t25661 = t25660+t25657+t25658+t25659-t25611*t25607*t25594*t25599;
                v_rho_a_gamma_aa_[index] = rho_a[index]*(c0*t25544*(t25561*t25594*(t25563*t25583*2.0+t25562*t25625* \
                   t25566-a3*c0*t25335*t25383*t25546*t25547*t25548*(6.4E1/9.0)+a3*c0*t25512*t25550*t25335*t25365*t25546* \
                   t25547*(1.6E1/3.0)+c*c0*t25550*t25336*t25570*t25546*t25547*t25485*(1.6E1/3.0)+c*c0*t25550*t25515*t25366* \
                   t25546*t25547*t25485*(1.6E1/9.0)+a3*c0*gamma_aa[index]*t25550*t25335*t25515*t25383*t25546*t25547*(1.12E2/ \
                   9.0)-c*c0*t25512*t25515*t25336*t25546*t25547*t25485*t25575*1.6E1-c*c0*gamma_aa[index]*t25340*t25337* \
                   t25546*t25547*t25368*t25485*t25548*(5.44E2/9.0)-a3*c0*t25340*t25335*t25337*t25338*t25546*t25367*t25547* \
                   t25548*(1.6E2/3.0)+c*c0*gamma_aa[index]*t25340*t25512*t25550*t25337*t25546*t25547*t25485*t25379*(6.4E1/ \
                   3.0)-c*c0*gamma_aa[index]*t25371*t25372*t25571*t25338*t25546*t25547*t25485*t25548*(1.024E3/9.0)+c* \
                   c0*t25340*t25550*t25515*t25337*t25338*t25546*t25547*t25368*t25485*(5.12E2/9.0)+a3*c*c0*kab1*rab1*t25335* \
                   t25481*t25517*t25546*t25556*t25548*t25579*(6.4E1/4.5E1)-c0*kab1*rab1*t25550*t25515*t25481*t25517*t25528* \
                   t25546*t25556*t25485*t25489*(1.28E2/4.5E1)+c0*gamma_aa[index]*kab1*rab1*t25340*t25337*t25481*t25517* \
                   t25581*t25546*t25556*t25485*t25548*t25489*(2.56E2/4.5E1))+t25561*t25607*(t25580+t25572-t25590+t25573+ \
                   t25582-t25591+t25574-t25592+t25576+t25577+t25578-t25587-t25588-t25589-t25562*t25566-t25566*t25586* \
                   (1.0/3.0)+(t25512*t25566*2.0)/t25488-t25400*t25340*t25337*t25338*t25566*(3.2E1/3.0)-a3*gamma_aa[index]* \
                   t25343*t25335*t25508*t25566*t25629*(7.0/3.0)+(c*kab1*rab1*t25481*t25517*t25366*t25566*(8.0/1.5E1)) \
                   /t25483-a3*c0*t25335*t25551*t25552*t25383*t25546*t25547*t25548*(1.6E1/9.0)+a3*c0*t25512*t25550*t25335* \
                   t25551*t25552*t25365*t25546*t25547*(4.0/3.0)-a3*c0*t25335*t25551*t25552*t25562*t25365*t25546*t25547* \
                   t25548*(2.0/3.0)+c*c0*t25550*t25551*t25336*t25552*t25570*t25546*t25547*t25485*(4.0/3.0)+c*c0*t25550* \
                   t25515*t25551*t25552*t25366*t25546*t25547*t25485*(4.0/9.0)+c*c0*t25551*t25336*t25552*t25546*t25547* \
                   t25583*t25485*t25548*(2.0/3.0)-c*c0*t25551*t25552*t25366*t25546*t25547*t25485*t25548*t25566*(2.0/9.0) \
                   +a3*c0*gamma_aa[index]*t25550*t25335*t25515*t25551*t25552*t25383*t25546*t25547*(2.8E1/9.0)-a3*c0*gamma_aa[index]* \
                   t25335*t25551*t25552*t25383*t25546*t25547*t25548*t25566*(1.4E1/9.0)+c*c0*t25550*t25515*t25551*t25336* \
                   t25552*t25562*t25546*t25547*t25485*(4.0/3.0)+c*c0*t25512*t25550*t25551*t25336*t25552*t25546*t25547* \
                   t25485*t25566*(4.0/3.0)-c*c0*t25512*t25515*t25551*t25336*t25552*t25546*t25547*t25485*t25575*4.0-c* \
                   c0*t25551*t25336*t25552*t25562*t25546*t25547*t25485*t25548*t25566*(2.0/3.0)-c*c0*gamma_aa[index]*t25340* \
                   t25551*t25552*t25337*t25546*t25547*t25368*t25485*t25548*(1.36E2/9.0)-a3*c0*t25340*t25335*t25551*t25552* \
                   t25337*t25338*t25546*t25367*t25547*t25548*(4.0E1/3.0)+c*c0*gamma_aa[index]*t25340*t25512*t25550*t25551* \
                   t25552*t25337*t25546*t25547*t25485*t25379*(1.6E1/3.0)-c*c0*gamma_aa[index]*t25371*t25551*t25372*t25552* \
                   t25571*t25338*t25546*t25547*t25485*t25548*(2.56E2/9.0)-c*c0*gamma_aa[index]*t25340*t25551*t25552*t25337* \
                   t25562*t25546*t25547*t25485*t25548*t25379*(8.0/3.0)+c*c0*t25340*t25550*t25515*t25551*t25552*t25337* \
                   t25338*t25546*t25547*t25368*t25485*(1.28E2/9.0)-c*c0*t25340*t25551*t25552*t25337*t25338*t25546*t25547* \
                   t25368*t25485*t25548*t25566*(6.4E1/9.0)+a3*c*c0*kab1*rab1*t25335*t25551*t25552*t25481*t25517*t25546* \
                   t25556*t25548*t25579*(1.6E1/4.5E1)-c0*kab1*rab1*t25550*t25515*t25551*t25552*t25481*t25517*t25528*t25546* \
                   t25556*t25485*t25489*(3.2E1/4.5E1)+c0*kab1*rab1*t25551*t25552*t25481*t25517*t25528*t25546*t25556*t25485* \
                   t25548*t25566*t25489*(1.6E1/4.5E1)+c0*gamma_aa[index]*kab1*rab1*t25340*t25551*t25552*t25337*t25481* \
                   t25517*t25581*t25546*t25556*t25485*t25548*t25489*(6.4E1/4.5E1))-t25604*t25561*t25624+t25551*t25552* \
                   t25583-t25561*t25598*(t25612+t25613+t25614+t25615+t25553+t25554+t25555-c*c0*t25512*t25550*t25336*t25546* \
                   t25547*t25485*(4.0/3.0)-c*c0*t25512*t25550*t25551*t25336*t25552*t25546*t25547*t25485*(4.0/3.0)-c0* \
                   kab1*rab1*t25481*t25517*t25528*t25546*t25556*t25485*t25548*t25489*(1.6E1/4.5E1)-c0*kab1*rab1*t25551* \
                   t25552*t25481*t25517*t25528*t25546*t25556*t25485*t25548*t25489*(1.6E1/4.5E1))-t25551*t25552*t25562* \
                   t25566+t25620*t25624*t25607*t25599+t25611*t25607*t25634*t25599+t25611*t25604*t25594*t25599+t25620* \
                   t25594*t25598*t25599-t25607*t25594*t25599*(t25563*t25583*3.0+t25562*t25625*t25566*(3.0/2.0)-a3*c0* \
                   t25335*t25383*t25546*t25547*t25548*(3.2E1/3.0)+a3*c0*t25512*t25550*t25335*t25365*t25546*t25547*8.0+ \
                   c*c0*t25550*t25336*t25570*t25546*t25547*t25485*8.0+c*c0*t25550*t25515*t25366*t25546*t25547*t25485* \
                   (8.0/3.0)+a3*c0*gamma_aa[index]*t25550*t25335*t25515*t25383*t25546*t25547*(5.6E1/3.0)-c*c0*t25512* \
                   t25515*t25336*t25546*t25547*t25485*t25575*2.4E1-c*c0*gamma_aa[index]*t25340*t25337*t25546*t25547*t25368* \
                   t25485*t25548*(2.72E2/3.0)-a3*c0*t25340*t25335*t25337*t25338*t25546*t25367*t25547*t25548*8.0E1+c*c0* \
                   gamma_aa[index]*t25340*t25512*t25550*t25337*t25546*t25547*t25485*t25379*3.2E1-c*c0*gamma_aa[index]* \
                   t25371*t25372*t25571*t25338*t25546*t25547*t25485*t25548*(5.12E2/3.0)+c*c0*t25340*t25550*t25515*t25337* \
                   t25338*t25546*t25547*t25368*t25485*(2.56E2/3.0)+a3*c*c0*kab1*rab1*t25335*t25481*t25517*t25546*t25556* \
                   t25548*t25579*(3.2E1/1.5E1)-c0*kab1*rab1*t25550*t25515*t25481*t25517*t25528*t25546*t25556*t25485*t25489* \
                   (6.4E1/1.5E1)+c0*gamma_aa[index]*kab1*rab1*t25340*t25337*t25481*t25517*t25581*t25546*t25556*t25485* \
                   t25548*t25489*(1.28E2/1.5E1))-t25611*t25620*1.0/(t25560*t25560*t25560)*t25607*t25594*2.0+t25630*t25343* \
                   t25631*t25632*t25471*t25472*t25583*t25629*(3.0/2.0)-t25630*t25343*t25631*t25632*t25471*t25472*t25562* \
                   t25566*t25629*(3.0/2.0)-t25630*t25343*t25631*t25515*t25471*t25472*t25562*t25629*t25488*3.0+a3*t25630* \
                   t25631*t25335*t25632*t25471*t25516*t25633*t25562*1.0/(t25485*t25485)*(3.0/2.0)+gamma_aa[index]*t25340* \
                   t25630*t25343*t25631*t25632*t25471*t25337*t25562*t25476*t25629*6.0)*(1.0/2.0)+c0*t25542*t25661*t25519* \
                   (1.0/2.0)+c0*t25519*t25656*t25648*(1.0/2.0)+c0*t25519*t25537*(t25551*t25552*t25562+t25561*t25607*t25634+ \
                   t25604*t25561*t25594-t25620*t25607*t25594*t25599+t25630*t25343*t25631*t25632*t25471*t25472*t25562* \
                   t25629*(3.0/2.0))*(1.0/2.0)+c0*t25542*t25653*t25537*t25656*(1.0/2.0))+rho_a[index]*( ( (c*c0*t25336* \
                   (-2.0/3.0)+t25483*t25486*t25488*exp(-t25340*t25337*t25338*t25339)*1.0E5 > 0.0) ? c0*t25495*1.0*(t25393* \
                   t25429*(t25380*t25437*t25396*2.0-t25421*t25380*t25416*t25438-gamma_aa[index]*t25400*t25340*t25350* \
                   t25342*t25382*(1.28E2/3.0)+a5*c0*t25350*t25361*t25335*t25347*t25383*(6.4E1/9.0)-gamma_aa[index]*t25340* \
                   t25421*t25350*t25342*t25339*t25396*4.0+gamma_aa[index]*t25370*t25372*t25382*t25338*t25439*t25369*(2.56E2/ \
                   3.0)-t25400*t25340*t25350*t25342*t25416*t25338*t25396*(3.2E1/3.0)+a5*c0*t25350*t25335*t25347*t25365* \
                   t25377*t25378*(1.6E1/3.0)+c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25368*(5.44E2/ \
                   9.0)-c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25368*t25369*(5.44E2/9.0)+a5*c0*t25340* \
                   t25350*t25342*t25361*t25335*t25338*t25347*t25367*(1.6E2/3.0)-a5*c0*t25340*t25342*t25361*t25335*t25338* \
                   t25347*t25367*t25369*(1.6E2/3.0)+c*c0*gamma_aa[index]*t25350*t25352*t25361*t25370*t25371*t25372*t25338* \
                   t25347*(1.024E3/9.0)+c*c0*gamma_aa[index]*t25352*t25361*t25370*t25406*t25371*t25372*t25338*t25347* \
                   (5.12E2/3.0)-c*c0*gamma_aa[index]*t25352*t25361*t25370*t25371*t25372*t25338*t25347*t25369*(2.048E3/ \
                   9.0)+c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25347*t25377*t25378*t25379*(6.4E1/3.0)-c*c0* \
                   gamma_aa[index]*t25340*t25342*t25352*t25347*t25377*t25369*t25378*t25379*(6.4E1/3.0))+t25424*t25393* \
                   (t25401+t25402-t25411+t25403-t25412+t25404-t25413+t25405+t25407-t25470+t25408+t25397*t25586*(1.0/3.0) \
                   +t25397*t25398+(t25377*t25397*2.0)/t25360+t25400*t25340*t25342*t25338*t25397*(3.2E1/3.0)-t25400*t25340* \
                   t25342*t25380*t25338*t25397*(3.2E1/3.0)+a5*gamma_aa[index]*t25343*t25335*t25508*t25397*t25469*(7.0/ \
                   3.0)+a5*c0*t25350*t25361*t25335*t25347*t25383*t25384*t25385*(1.6E1/9.0)+a5*c0*t25350*t25361*t25335* \
                   t25347*t25365*t25384*t25385*t25398*(2.0/3.0)+a5*c0*t25350*t25335*t25347*t25365*t25384*t25385*t25377* \
                   t25378*(4.0/3.0)+c*c0*t25350*t25352*t25361*t25336*t25409*t25347*t25384*t25385*(2.0/3.0)+c*c0*t25350* \
                   t25352*t25361*t25347*t25366*t25384*t25385*t25397*(2.0/9.0)+a5*c0*gamma_aa[index]*t25350*t25361*t25335* \
                   t25347*t25383*t25384*t25385*t25397*(1.4E1/9.0)+c*c0*t25350*t25352*t25361*t25336*t25347*t25384*t25385* \
                   t25397*t25398*(2.0/3.0)+c*c0*t25350*t25352*t25336*t25347*t25384*t25385*t25377*t25378*t25397*(4.0/3.0) \
                   +c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25361*t25347*t25384*t25385*t25368*(1.36E2/9.0)- \
                   c*c0*gamma_aa[index]*t25340*t25342*t25352*t25361*t25347*t25384*t25385*t25368*t25369*(1.36E2/9.0)+a5* \
                   c0*t25340*t25350*t25342*t25361*t25335*t25338*t25347*t25384*t25367*t25385*(4.0E1/3.0)-a5*c0*t25340* \
                   t25342*t25361*t25335*t25338*t25347*t25384*t25367*t25385*t25369*(4.0E1/3.0)+c*c0*gamma_aa[index]*t25350* \
                   t25352*t25361*t25370*t25371*t25372*t25338*t25347*t25384*t25385*(2.56E2/9.0)+c*c0*gamma_aa[index]*t25352* \
                   t25361*t25370*t25406*t25371*t25372*t25338*t25347*t25384*t25385*(1.28E2/3.0)+c*c0*gamma_aa[index]*t25340* \
                   t25350*t25342*t25352*t25361*t25347*t25384*t25385*t25379*t25398*(8.0/3.0)-c*c0*gamma_aa[index]*t25352* \
                   t25361*t25370*t25371*t25372*t25338*t25347*t25384*t25385*t25369*(5.12E2/9.0)+c*c0*gamma_aa[index]*t25340* \
                   t25350*t25342*t25352*t25347*t25384*t25385*t25377*t25378*t25379*(1.6E1/3.0)-c*c0*gamma_aa[index]*t25340* \
                   t25342*t25352*t25361*t25347*t25384*t25385*t25369*t25379*t25398*(8.0/3.0)-c*c0*gamma_aa[index]*t25340* \
                   t25342*t25352*t25347*t25384*t25385*t25377*t25369*t25378*t25379*(1.6E1/3.0)+c*c0*t25340*t25350*t25342* \
                   t25352*t25361*t25338*t25347*t25384*t25385*t25368*t25397*(6.4E1/9.0)-c*c0*t25340*t25342*t25352*t25361* \
                   t25338*t25347*t25384*t25385*t25368*t25369*t25397*(6.4E1/9.0))+t25443*t25393*t25477+t25409*t25384*t25385+ \
                   t25455*t25393*t25478-t25430*t25443*t25429*t25449-t25430*t25424*t25449*t25478-t25430*t25424*t25459* \
                   t25477-t25430*t25455*t25429*t25459+t25384*t25385*t25397*t25398-t25430*t25424*t25429*(t25380*t25437* \
                   t25396*3.0-t25421*t25380*t25416*t25438*(3.0/2.0)-gamma_aa[index]*t25400*t25340*t25350*t25342*t25382* \
                   6.4E1+a5*c0*t25350*t25361*t25335*t25347*t25383*(3.2E1/3.0)-gamma_aa[index]*t25340*t25421*t25350*t25342* \
                   t25339*t25396*6.0+gamma_aa[index]*t25370*t25372*t25382*t25338*t25439*t25369*1.28E2-t25400*t25340*t25350* \
                   t25342*t25416*t25338*t25396*1.6E1+a5*c0*t25350*t25335*t25347*t25365*t25377*t25378*8.0+c*c0*gamma_aa[index]* \
                   t25340*t25350*t25342*t25352*t25361*t25347*t25368*(2.72E2/3.0)-c*c0*gamma_aa[index]*t25340*t25342*t25352* \
                   t25361*t25347*t25368*t25369*(2.72E2/3.0)+a5*c0*t25340*t25350*t25342*t25361*t25335*t25338*t25347*t25367* \
                   8.0E1-a5*c0*t25340*t25342*t25361*t25335*t25338*t25347*t25367*t25369*8.0E1+c*c0*gamma_aa[index]*t25350* \
                   t25352*t25361*t25370*t25371*t25372*t25338*t25347*(5.12E2/3.0)+c*c0*gamma_aa[index]*t25352*t25361*t25370* \
                   t25406*t25371*t25372*t25338*t25347*2.56E2-c*c0*gamma_aa[index]*t25352*t25361*t25370*t25371*t25372* \
                   t25338*t25347*t25369*(1.024E3/3.0)+c*c0*gamma_aa[index]*t25340*t25350*t25342*t25352*t25347*t25377* \
                   t25378*t25379*3.2E1-c*c0*gamma_aa[index]*t25340*t25342*t25352*t25347*t25377*t25369*t25378*t25379*3.2E1) \
                   +t25424*1.0/(t25392*t25392*t25392)*t25429*t25449*t25459*2.0+t25343*t25471*t25409*t25472*t25473*t25474* \
                   t25475*t25469*(3.0/2.0)+t25343*t25471*t25472*t25473*t25474*t25475*t25397*t25469*t25398*(3.0/2.0)-a5* \
                   1.0/(t25352*t25352)*t25335*t25471*t25516*t25633*t25473*t25474*t25475*t25398*(3.0/2.0)-gamma_aa[index]* \
                   t25340*t25342*t25343*t25471*t25473*t25474*t25475*t25476*t25469*t25398*6.0+gamma_aa[index]*t25340*t25342* \
                   t25343*t25471*t25473*t25349*t25475*t25476*t25469*t25398*6.0)*(-1.0/2.0) : 0.0 ) +c0*t25524*t25534* \
                   t25544*t25495*(1.0/2.0)+c0*t25524*t25542*t25519*t25495*(1.0/2.0)+c0*t25527*t25519*t25495*t25648*(1.0/ \
                   2.0)+ 0.0 +c0*t25542*t25527*t25653*t25537*t25495*(1.0/2.0)-c0*t25534*t25527*t25519*t25537*t25495*(1.0/ \
                   2.0))+c0*t25544*t25661*(1.0/2.0)+c0*t25524*t25544*t25495*(1.0/2.0)-c0*t25519*t25537*t25656*(1.0/2.0) \
                   -c0*t25527*t25519*t25537*t25495*(1.0/2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t25664 = tspi_m13*tspi_m13;
                double t25665 = 1.0/pow(rho_a[index],1.0/3.0);
                double t25666 = a2*a2;
                double t25667 = gamma_aa[index]*gamma_aa[index];
                double t25668 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t25669 = t25664*t25664;
                double t25670 = c*t25665;
                double t25671 = pow(t25670,4.0/5.0);
                double t25685 = rab1*t25671;
                double t25672 = exp(-t25685);
                double t25673 = t25672-1.0;
                double t25686 = kab1*t25673;
                double t25674 = kab0-t25686;
                double t25675 = 1.0/c;
                double t25676 = 1.0/pow(rho_a[index],7.0/3.0);
                double t25677 = a3*gamma_aa[index]*t25664*t25675*t25676;
                double t25678 = t25677+1.0;
                double t25679 = t25666*t25667*t25668*t25669;
                double t25680 = 1.0/pow(rho_a[index],8.0/3.0);
                double t25681 = a1*gamma_aa[index]*t25680*t25664;
                double t25682 = t25681+t25679+1.0;
                double t25683 = t25666*t25667*t25668*t25669*2.0;
                double t25684 = exp(t25683);
                double t25687 = 1.0/(t25674*t25674);
                double t25688 = 1.0/(t25682*t25682);
                double t25689 = c*c0*t25665*t25684*t25678*t25687*t25688*(2.0/3.0);
                double t25690 = a1*t25680*t25664;
                double t25691 = gamma_aa[index]*t25666*t25668*t25669*2.0;
                double t25692 = t25690+t25691;
                double t25693 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t25694 = 1.0/(t25682*t25682*t25682);
                double t25695 = sqrt(t25689);
                double t25697 = a3*c0*t25680*t25664*t25684*t25687*t25688*(2.0/3.0);
                double t25698 = c*c0*t25665*t25692*t25684*t25694*t25678*t25687*(4.0/3.0);
                double t25699 = c*c0*gamma_aa[index]*t25666*t25684*t25693*t25669*t25678*t25687*t25688*(8.0/3.0);
                double t25696 = t25697-t25698+t25699;
                double t25700 = t25692*t25692;
                double t25701 = 1.0/(t25682*t25682*t25682*t25682);
                double t25702 = c*c0*t25700*t25701*t25665*t25684*t25678*t25687*4.0;
                double t25703 = c*c0*t25666*t25684*t25693*t25669*t25678*t25687*t25688*(8.0/3.0);
                double t25704 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t25705 = a3*c0*gamma_aa[index]*t25704*t25664*t25666*t25684*t25669*t25687*t25688*(1.6E1/3.0) \
                   ;
                double t25706 = exp(t25689);
                double t25707 = Ei(-t25689);
                double t25708 = t25666*t25666;
                double t25709 = 1.0/pow(rho_a[index],1.1E1);
                double t25710 = t25669*t25669;
                double t25711 = c*c0*t25710*t25708*t25709*t25684*t25667*t25678*t25687*t25688*(3.2E1/3.0);
                double t25714 = c*c0*gamma_aa[index]*t25692*t25666*t25684*t25693*t25694*t25669*t25678*t25687*(3.2E1/ \
                   3.0);
                double t25719 = a3*c0*t25680*t25664*t25692*t25684*t25694*t25687*(8.0/3.0);
                double t25720 = c*c0*t25666*t25684*t25693*t25694*t25669*t25678*t25687*(8.0/3.0);
                double t25712 = t25702+t25711-t25720+t25703+t25705-t25714-t25719;
                double t25713 = t25696*t25696;
                double t25715 = t25695*6.0;
                double t25716 = c*c0*t25665*t25684*t25678*t25687*t25688*4.0;
                double t25717 = t25715+t25716+3.0;
                double t25718 = 1.0/t25717;
                double t25721 = 1.0/sqrt(t25689);
                double t25722 = c*c0*t25706*t25707*t25665*t25684*t25678*t25687*t25688*(2.0/3.0);
                double t25723 = t25722+1.0;
                double t25724 = t25721*t25696*2.0;
                double t25725 = a3*c0*t25680*t25664*t25684*t25687*t25688*(8.0/3.0);
                double t25726 = c*c0*gamma_aa[index]*t25666*t25684*t25693*t25669*t25678*t25687*t25688*(3.2E1/3.0) \
                   ;
                double t25763 = c*c0*t25665*t25692*t25684*t25694*t25678*t25687*(1.6E1/3.0);
                double t25727 = t25724+t25725+t25726-t25763;
                double t25728 = 1.0/(t25717*t25717);
                double t25729 = t25695*4.0;
                double t25730 = c*c0*t25665*t25684*t25678*t25687*t25688*(8.0/3.0);
                double t25731 = t25730+t25729+6.0;
                double t25732 = 1.0/pow(t25689,3.0/2.0);
                double t25733 = t25721*t25696*3.0;
                double t25734 = a3*c0*t25680*t25664*t25684*t25687*t25688*4.0;
                double t25735 = c*c0*gamma_aa[index]*t25666*t25684*t25693*t25669*t25678*t25687*t25688*1.6E1;
                double t25737 = c*c0*t25665*t25692*t25684*t25694*t25678*t25687*8.0;
                double t25736 = t25733+t25734+t25735-t25737;
                double t25738 = a3*c0*t25706*t25680*t25707*t25664*t25684*t25687*t25688*(2.0/3.0);
                double t25739 = c*c0*t25706*t25707*t25665*t25684*t25678*t25687*t25696*t25688*(2.0/3.0);
                double t25740 = c*c0*gamma_aa[index]*t25706*t25707*t25666*t25684*t25693*t25669*t25678*t25687*t25688* \
                   (8.0/3.0);
                double t25764 = c*c0*t25706*t25707*t25665*t25692*t25684*t25694*t25678*t25687*(4.0/3.0);
                double t25741 = t25740-t25764+t25738+t25739+t25697-t25698+t25699;
                double t25742 = 1.0/t25678;
                double t25743 = 1.0/c0;
                double t25744 = pow(rho_a[index],1.0/3.0);
                double t25745 = exp(-t25683);
                double t25746 = t25674*t25674;
                double t25747 = t25682*t25682;
                double t25748 = 1.0/sqrt(t25678);
                double t25749 = exp(-t25679);
                double t25756 = 1.0/pow(t25678,3.0/2.0);
                double t25760 = t25674*t25692*t25748*t25749*1.0E5;
                double t25761 = a3*t25664*t25682*t25674*t25675*t25756*t25676*t25749*5.0E4;
                double t25762 = gamma_aa[index]*t25682*t25674*t25666*t25748*t25668*t25749*t25669*2.0E5;
                double t25750 = -t25760+t25761+t25762;
                double t25751 = c*c0*t25665*(2.0/3.0);
                double t25758 = t25682*t25674*t25748*t25749*1.0E5;
                double t25752 = t25751-t25758;
                double t25753 = t25706*t25707;
                double t25754 = t25731*t25723*t25718;
                double t25755 = t25753+t25754;
                double t25757 = 1.0/(c*c);
                double t25759 = 0.0 ;
                double t25765 = a4*a4;
                double t25766 = t25765*t25667*t25668*t25669*2.0;
                double t25767 = exp(t25766);
                double t25768 = sqrt(t25670);
                double t25769 = t25765*t25667*t25668*t25669;
                double t25770 = t25769+1.0;
                double t25771 = 1.0/(t25770*t25770);
                double t25772 = a5*gamma_aa[index]*t25664*t25675*t25676;
                double t25773 = t25772+1.0;
                double t25784 = raa2*t25768;
                double t25774 = exp(-t25784);
                double t25775 = t25774-1.0;
                double t25776 = kaa2*t25775;
                double t25777 = pow(t25670,2.0/5.0);
                double t25785 = raa1*t25777;
                double t25778 = exp(-t25785);
                double t25779 = t25778-1.0;
                double t25780 = kaa1*t25779;
                double t25781 = -kaa0+t25780+t25776;
                double t25782 = 1.0/(t25781*t25781);
                double t25783 = c*c0*t25771*t25665*t25773*t25782*t25767*(2.0/3.0);
                double t25786 = 1.0/t25770;
                double t25787 = c*c0*t25665*t25773*t25782*t25767*(2.0/3.0);
                double t25792 = a5*c0*t25680*t25664*t25782*t25767*(2.0/3.0);
                double t25793 = c*c0*gamma_aa[index]*t25773*t25782*t25693*t25765*t25767*t25669*(8.0/3.0);
                double t25788 = t25792+t25793;
                double t25789 = sqrt(t25787);
                double t25790 = t25765*t25765;
                double t25791 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t25794 = 1.0/sqrt(t25787);
                double t25795 = 1.0/(t25770*t25770*t25770);
                double t25796 = t25786*t25789*6.0;
                double t25797 = c*c0*t25771*t25665*t25773*t25782*t25767*4.0;
                double t25798 = t25796+t25797+3.0;
                double t25799 = 1.0/t25798;
                double t25801 = a5*c0*t25680*t25771*t25664*t25782*t25767*(2.0/3.0);
                double t25802 = c*c0*gamma_aa[index]*t25771*t25773*t25782*t25693*t25765*t25767*t25669*(8.0/3.0);
                double t25803 = c*c0*gamma_aa[index]*t25773*t25782*t25693*t25765*t25767*t25669*t25795*(8.0/3.0);
                double t25800 = t25801+t25802-t25803;
                double t25804 = exp(t25783);
                double t25805 = Ei(-t25783);
                double t25806 = t25800*t25800;
                double t25807 = 1.0/(t25770*t25770*t25770*t25770);
                double t25808 = a5*c0*gamma_aa[index]*t25704*t25771*t25664*t25782*t25765*t25767*t25669*(1.6E1/3.0) \
                   ;
                double t25809 = c*c0*t25771*t25773*t25782*t25693*t25765*t25767*t25669*(8.0/3.0);
                double t25810 = c*c0*t25710*t25771*t25709*t25790*t25773*t25782*t25667*t25767*(3.2E1/3.0);
                double t25811 = c*c0*t25710*t25807*t25709*t25790*t25773*t25782*t25667*t25767*1.6E1;
                double t25843 = a5*c0*gamma_aa[index]*t25704*t25664*t25782*t25765*t25767*t25669*t25795*(1.6E1/3.0) \
                   ;
                double t25844 = c*c0*t25773*t25782*t25693*t25765*t25767*t25669*t25795*(8.0/3.0);
                double t25845 = c*c0*t25710*t25709*t25790*t25773*t25782*t25667*t25767*t25795*(6.4E1/3.0);
                double t25812 = t25810+t25811-t25843+t25808-t25844+t25809-t25845;
                double t25813 = t25786*t25789*4.0;
                double t25814 = c*c0*t25771*t25665*t25773*t25782*t25767*(8.0/3.0);
                double t25815 = t25813+t25814+6.0;
                double t25816 = a5*c0*t25804*t25805*t25680*t25771*t25664*t25782*t25767*(2.0/3.0);
                double t25817 = c*c0*t25800*t25804*t25805*t25771*t25665*t25773*t25782*t25767*(2.0/3.0);
                double t25818 = c*c0*gamma_aa[index]*t25804*t25805*t25771*t25773*t25782*t25693*t25765*t25767*t25669* \
                   (8.0/3.0);
                double t25860 = c*c0*gamma_aa[index]*t25804*t25805*t25773*t25782*t25693*t25765*t25767*t25669*t25795* \
                   (8.0/3.0);
                double t25819 = t25801+t25802-t25803-t25860+t25816+t25817+t25818;
                double t25820 = c*c0*t25804*t25805*t25771*t25665*t25773*t25782*t25767*(2.0/3.0);
                double t25821 = t25820+1.0;
                double t25822 = t25794*t25786*t25788*3.0;
                double t25823 = a5*c0*t25680*t25771*t25664*t25782*t25767*4.0;
                double t25824 = c*c0*gamma_aa[index]*t25771*t25773*t25782*t25693*t25765*t25767*t25669*1.6E1;
                double t25827 = gamma_aa[index]*t25771*t25765*t25668*t25669*t25789*1.2E1;
                double t25828 = c*c0*gamma_aa[index]*t25773*t25782*t25693*t25765*t25767*t25669*t25795*1.6E1;
                double t25825 = t25822+t25823+t25824-t25827-t25828;
                double t25826 = 1.0/(t25798*t25798);
                double t25829 = t25794*t25786*t25788*2.0;
                double t25830 = a5*c0*t25680*t25771*t25664*t25782*t25767*(8.0/3.0);
                double t25831 = c*c0*gamma_aa[index]*t25771*t25773*t25782*t25693*t25765*t25767*t25669*(3.2E1/3.0) \
                   ;
                double t25858 = gamma_aa[index]*t25771*t25765*t25668*t25669*t25789*8.0;
                double t25859 = c*c0*gamma_aa[index]*t25773*t25782*t25693*t25765*t25767*t25669*t25795*(3.2E1/3.0) \
                   ;
                double t25832 = t25830+t25831+t25829-t25858-t25859;
                double t25833 = a5*c0*gamma_aa[index]*t25704*t25664*t25782*t25765*t25767*t25669*(1.6E1/3.0);
                double t25834 = c*c0*t25773*t25782*t25693*t25765*t25767*t25669*(8.0/3.0);
                double t25835 = c*c0*t25710*t25709*t25790*t25773*t25782*t25667*t25767*(3.2E1/3.0);
                double t25836 = t25833+t25834+t25835;
                double t25837 = t25788*t25788;
                double t25838 = 1.0/pow(t25787,3.0/2.0);
                double t25839 = 1.0/t25773;
                double t25840 = exp(-t25766);
                double t25841 = t25770*t25770;
                double t25842 = t25781*t25781;
                double t25846 = 1.0/(rho_a[index]*rho_a[index]);
                double t25847 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t25848 = c*c;
                double t25849 = 1.0/pow(rho_a[index],2.0/3.0);
                double t25850 = k1*t25768;
                double t25851 = c*k2*t25665;
                double t25852 = t25850+t25851;
                double t25853 = 1.0/(t25852*t25852);
                double t25857 = t25853*t25848*t25849;
                double t25854 = exp(-t25857);
                double t25855 = 0.0 ;
                double t25856 = t25750*t25750;
                double t25861 = t25804*t25805;
                double t25862 = t25821*t25815*t25799;
                double t25863 = t25861+t25862;
                double t25864 = t25674*t25666*t25748*t25668*t25749*t25669*2.0E5;
                double t25865 = a3*a3;
                double t25866 = 1.0/pow(rho_a[index],1.4E1/3.0);
                double t25867 = 1.0/pow(t25678,5.0/2.0);
                double t25868 = t25682*t25674*t25757*t25865*t25749*t25866*t25669*t25867*7.5E4;
                double t25869 = t25710*t25708*t25682*t25674*t25791*t25667*t25748*t25749*4.0E5;
                double t25870 = 1.0/pow(rho_a[index],2.3E1/3.0);
                double t25871 = a3*gamma_aa[index]*t25870*t25664*t25682*t25674*t25666*t25675*t25756*t25749*t25669* \
                   2.0E5;
                double t25872 = t25871+t25864+t25868+t25869-t25682*t25674*t25666*t25748*t25668*t25749*t25669*2.0E5- \
                   a3*t25664*t25674*t25692*t25675*t25756*t25676*t25749*1.0E5-gamma_aa[index]*t25674*t25692*t25666*t25748* \
                   t25668*t25749*t25669*4.0E5;
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*( ( (c*c0*t25665*(-2.0/3.0)+t25682*t25674*t25748*exp(- \
                   t25666*t25667*t25668*t25669)*1.0E5 > 0.0) ? c0*1.0*(t25723*t25718*(t25712*t25721*2.0-t25713*t25732- \
                   a3*c0*t25680*t25664*t25692*t25684*t25694*t25687*(3.2E1/3.0)+c*c0*t25700*t25701*t25665*t25684*t25678* \
                   t25687*1.6E1-c*c0*t25666*t25684*t25693*t25694*t25669*t25678*t25687*(3.2E1/3.0)+c*c0*t25666*t25684* \
                   t25693*t25669*t25678*t25687*t25688*(3.2E1/3.0)+a3*c0*gamma_aa[index]*t25704*t25664*t25666*t25684*t25669* \
                   t25687*t25688*(6.4E1/3.0)+c*c0*t25710*t25708*t25709*t25684*t25667*t25678*t25687*t25688*(1.28E2/3.0) \
                   -c*c0*gamma_aa[index]*t25692*t25666*t25684*t25693*t25694*t25669*t25678*t25687*(1.28E2/3.0))+t25731* \
                   t25718*(t25702+t25711+t25703+t25713+t25705-t25714-(t25692*t25696*2.0)/t25682+gamma_aa[index]*t25666* \
                   t25668*t25669*t25696*4.0+a3*t25742*t25664*t25675*t25676*t25696-a3*c0*t25680*t25664*t25692*t25684*t25694* \
                   t25687*(8.0/3.0)-c*c0*t25666*t25684*t25693*t25694*t25669*t25678*t25687*(8.0/3.0)-a3*c0*t25706*t25680* \
                   t25707*t25664*t25692*t25684*t25694*t25687*(8.0/3.0)+a3*c0*t25706*t25680*t25707*t25664*t25684*t25687* \
                   t25696*t25688*(4.0/3.0)+c*c0*t25700*t25701*t25706*t25707*t25665*t25684*t25678*t25687*4.0+c*c0*t25712* \
                   t25706*t25707*t25665*t25684*t25678*t25687*t25688*(2.0/3.0)+c*c0*t25713*t25706*t25707*t25665*t25684* \
                   t25678*t25687*t25688*(2.0/3.0)-c*c0*t25706*t25707*t25665*t25692*t25684*t25694*t25678*t25687*t25696* \
                   (8.0/3.0)-c*c0*t25706*t25707*t25666*t25684*t25693*t25694*t25669*t25678*t25687*(8.0/3.0)+c*c0*t25706* \
                   t25707*t25666*t25684*t25693*t25669*t25678*t25687*t25688*(8.0/3.0)+a3*c0*gamma_aa[index]*t25704*t25706* \
                   t25707*t25664*t25666*t25684*t25669*t25687*t25688*(1.6E1/3.0)+c*c0*t25710*t25706*t25707*t25708*t25709* \
                   t25684*t25667*t25678*t25687*t25688*(3.2E1/3.0)-c*c0*gamma_aa[index]*t25706*t25707*t25692*t25666*t25684* \
                   t25693*t25694*t25669*t25678*t25687*(3.2E1/3.0)+c*c0*gamma_aa[index]*t25706*t25707*t25666*t25684*t25693* \
                   t25669*t25678*t25687*t25696*t25688*(1.6E1/3.0))+t25712*t25706*t25707+t25713*t25706*t25707+t25741*t25718* \
                   t25727*2.0-t25731*t25741*t25736*t25728*2.0-t25723*t25727*t25736*t25728*2.0-t25731*t25723*t25728*(t25712* \
                   t25721*3.0-t25713*t25732*(3.0/2.0)-a3*c0*t25680*t25664*t25692*t25684*t25694*t25687*1.6E1+c*c0*t25700* \
                   t25701*t25665*t25684*t25678*t25687*2.4E1-c*c0*t25666*t25684*t25693*t25694*t25669*t25678*t25687*1.6E1+ \
                   c*c0*t25666*t25684*t25693*t25669*t25678*t25687*t25688*1.6E1+a3*c0*gamma_aa[index]*t25704*t25664*t25666* \
                   t25684*t25669*t25687*t25688*3.2E1+c*c0*t25710*t25708*t25709*t25684*t25667*t25678*t25687*t25688*6.4E1- \
                   c*c0*gamma_aa[index]*t25692*t25666*t25684*t25693*t25694*t25669*t25678*t25687*6.4E1)+t25731*t25723* \
                   1.0/(t25717*t25717*t25717)*(t25736*t25736)*2.0+t25712*t25742*t25743*t25744*t25745*t25746*t25675*t25747* \
                   (3.0/2.0)+t25713*t25742*t25743*t25744*t25745*t25746*t25675*t25747*(3.0/2.0)+t25742*t25743*t25744*t25682* \
                   t25745*t25692*t25746*t25675*t25696*3.0-a3*t25743*t25664*t25745*t25746*t25747*t25846*t25757*1.0/(t25678* \
                   t25678)*t25696*(3.0/2.0)-gamma_aa[index]*t25742*t25743*t25745*t25746*t25666*t25675*t25747*t25847*t25669* \
                   t25696*6.0)*(1.0/2.0) : 0.0 ) -c0*t25755*t25855*t25856*(1.0/2.0)+c0*t25755*t25872*t25759*(1.0/2.0) \
                   -c0*t25750*t25759*(t25731*t25741*t25718+t25723*t25718*t25727+t25706*t25707*t25696-t25731*t25723*t25736* \
                   t25728+t25742*t25743*t25744*t25745*t25746*t25675*t25747*t25696*(3.0/2.0)))*2.0+rho_a[index]*( ( (- \
                   t25751+t25758 > 0.0) ? c0*t25854*1.0*(t25815*t25799*(t25810+t25811+t25806+t25808+t25809+gamma_aa[index]* \
                   t25800*t25765*t25668*t25669*4.0+a5*t25800*t25664*t25675*t25676*t25839-gamma_aa[index]*t25800*t25765* \
                   t25668*t25669*t25786*4.0-c*c0*t25773*t25782*t25693*t25765*t25767*t25669*t25795*(8.0/3.0)-a5*c0*gamma_aa[index]* \
                   t25704*t25664*t25782*t25765*t25767*t25669*t25795*(1.6E1/3.0)+a5*c0*t25800*t25804*t25805*t25680*t25771* \
                   t25664*t25782*t25767*(4.0/3.0)+c*c0*t25812*t25804*t25805*t25771*t25665*t25773*t25782*t25767*(2.0/3.0) \
                   +c*c0*t25804*t25805*t25806*t25771*t25665*t25773*t25782*t25767*(2.0/3.0)-c*c0*t25710*t25709*t25790* \
                   t25773*t25782*t25667*t25767*t25795*(6.4E1/3.0)+c*c0*t25804*t25805*t25771*t25773*t25782*t25693*t25765* \
                   t25767*t25669*(8.0/3.0)-c*c0*t25804*t25805*t25773*t25782*t25693*t25765*t25767*t25669*t25795*(8.0/3.0) \
                   +a5*c0*gamma_aa[index]*t25704*t25804*t25805*t25771*t25664*t25782*t25765*t25767*t25669*(1.6E1/3.0)- \
                   a5*c0*gamma_aa[index]*t25704*t25804*t25805*t25664*t25782*t25765*t25767*t25669*t25795*(1.6E1/3.0)+c* \
                   c0*t25710*t25804*t25805*t25771*t25709*t25790*t25773*t25782*t25667*t25767*(3.2E1/3.0)+c*c0*t25710*t25804* \
                   t25805*t25807*t25709*t25790*t25773*t25782*t25667*t25767*1.6E1-c*c0*t25710*t25804*t25805*t25709*t25790* \
                   t25773*t25782*t25667*t25767*t25795*(6.4E1/3.0)+c*c0*gamma_aa[index]*t25800*t25804*t25805*t25771*t25773* \
                   t25782*t25693*t25765*t25767*t25669*(1.6E1/3.0)-c*c0*gamma_aa[index]*t25800*t25804*t25805*t25773*t25782* \
                   t25693*t25765*t25767*t25669*t25795*(1.6E1/3.0))+t25812*t25804*t25805+t25804*t25805*t25806+t25832*t25819* \
                   t25799*2.0+t25821*t25799*(t25836*t25794*t25786*2.0-t25837*t25838*t25786-t25771*t25765*t25668*t25669* \
                   t25789*8.0+t25710*t25790*t25791*t25667*t25795*t25789*3.2E1-gamma_aa[index]*t25771*t25765*t25668*t25794* \
                   t25669*t25788*8.0+c*c0*t25771*t25773*t25782*t25693*t25765*t25767*t25669*(3.2E1/3.0)-c*c0*t25773*t25782* \
                   t25693*t25765*t25767*t25669*t25795*(3.2E1/3.0)+a5*c0*gamma_aa[index]*t25704*t25771*t25664*t25782*t25765* \
                   t25767*t25669*(6.4E1/3.0)-a5*c0*gamma_aa[index]*t25704*t25664*t25782*t25765*t25767*t25669*t25795*(6.4E1/ \
                   3.0)+c*c0*t25710*t25771*t25709*t25790*t25773*t25782*t25667*t25767*(1.28E2/3.0)+c*c0*t25710*t25807* \
                   t25709*t25790*t25773*t25782*t25667*t25767*6.4E1-c*c0*t25710*t25709*t25790*t25773*t25782*t25667*t25767* \
                   t25795*(2.56E2/3.0))-t25821*t25832*t25825*t25826*2.0-t25815*t25825*t25826*t25819*2.0-t25821*t25815* \
                   t25826*(t25836*t25794*t25786*3.0-t25837*t25838*t25786*(3.0/2.0)-t25771*t25765*t25668*t25669*t25789* \
                   1.2E1+t25710*t25790*t25791*t25667*t25795*t25789*4.8E1-gamma_aa[index]*t25771*t25765*t25668*t25794* \
                   t25669*t25788*1.2E1+c*c0*t25771*t25773*t25782*t25693*t25765*t25767*t25669*1.6E1-c*c0*t25773*t25782* \
                   t25693*t25765*t25767*t25669*t25795*1.6E1+a5*c0*gamma_aa[index]*t25704*t25771*t25664*t25782*t25765* \
                   t25767*t25669*3.2E1-a5*c0*gamma_aa[index]*t25704*t25664*t25782*t25765*t25767*t25669*t25795*3.2E1+c* \
                   c0*t25710*t25771*t25709*t25790*t25773*t25782*t25667*t25767*6.4E1+c*c0*t25710*t25807*t25709*t25790* \
                   t25773*t25782*t25667*t25767*9.6E1-c*c0*t25710*t25709*t25790*t25773*t25782*t25667*t25767*t25795*1.28E2) \
                   +t25821*t25815*(t25825*t25825)*1.0/(t25798*t25798*t25798)*2.0+t25812*t25840*t25841*t25743*t25842*t25744* \
                   t25675*t25839*(3.0/2.0)+t25840*t25841*t25743*t25806*t25842*t25744*t25675*t25839*(3.0/2.0)-a5*t25800* \
                   t25840*t25841*t25743*t25842*t25664*1.0/(t25773*t25773)*t25846*t25757*(3.0/2.0)-gamma_aa[index]*t25800* \
                   t25840*t25841*t25743*t25842*t25675*t25765*t25847*t25839*t25669*6.0+gamma_aa[index]*t25800*t25840*t25743* \
                   t25770*t25842*t25675*t25765*t25847*t25839*t25669*6.0)*(1.0/2.0) : 0.0 ) -c0*t25854*t25863*t25855*t25856* \
                   (1.0/2.0)+c0*t25854*t25863*t25872*t25759*(1.0/2.0)-c0*t25750*t25854*t25759*(t25800*t25804*t25805+t25821* \
                   t25832*t25799+t25815*t25819*t25799-t25821*t25815*t25825*t25826+t25800*t25840*t25841*t25743*t25842* \
                   t25744*t25675*t25839*(3.0/2.0)))*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void FT97_C_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_b = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    double c0 = params_[0].second;
    double c = params_[1].second;
    double tspi_m13 = params_[2].second;
    double a1 = params_[3].second;
    double a2 = params_[4].second;
    double a3 = params_[5].second;
    double a4 = params_[6].second;
    double a5 = params_[7].second;
    double kaa0 = params_[8].second;
    double kaa1 = params_[9].second;
    double kaa2 = params_[10].second;
    double raa1 = params_[11].second;
    double raa2 = params_[12].second;
    double kab0 = params_[13].second;
    double kab1 = params_[14].second;
    double rab1 = params_[15].second;
    double k1 = params_[16].second;
    double k2 = params_[17].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t20482 = tspi_m13*tspi_m13;
            double t20483 = 1.0/pow(rho_a[index],1.0/3.0);
            double t20484 = a2*a2;
            double t20485 = gamma_aa[index]*gamma_aa[index];
            double t20486 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t20487 = t20482*t20482;
            double t20488 = c*t20483;
            double t20489 = pow(t20488,4.0/5.0);
            double t20503 = rab1*t20489;
            double t20490 = exp(-t20503);
            double t20491 = t20490-1.0;
            double t20504 = kab1*t20491;
            double t20492 = kab0-t20504;
            double t20493 = 1.0/c;
            double t20494 = 1.0/pow(rho_a[index],7.0/3.0);
            double t20495 = a3*gamma_aa[index]*t20482*t20493*t20494;
            double t20496 = t20495+1.0;
            double t20497 = t20484*t20485*t20486*t20487;
            double t20498 = 1.0/pow(rho_a[index],8.0/3.0);
            double t20499 = a1*gamma_aa[index]*t20482*t20498;
            double t20500 = t20497+t20499+1.0;
            double t20501 = t20484*t20485*t20486*t20487*2.0;
            double t20502 = exp(t20501);
            double t20505 = 1.0/(t20492*t20492);
            double t20506 = 1.0/(t20500*t20500);
            double t20507 = c*c0*t20502*t20505*t20506*t20483*t20496*(2.0/3.0);
            double t20508 = exp(t20507);
            double t20509 = Ei(-t20507);
            double t20510 = sqrt(t20507);
            double t20511 = 1.0/pow(rho_b[index],1.0/3.0);
            double t20512 = gamma_bb[index]*gamma_bb[index];
            double t20513 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t20514 = c*t20511;
            double t20515 = a4*a4;
            double t20516 = 1.0/pow(rho_b[index],7.0/3.0);
            double t20517 = sqrt(t20514);
            double t20518 = t20512*t20513*t20515*t20487*2.0;
            double t20519 = exp(t20518);
            double t20520 = t20512*t20513*t20515*t20487;
            double t20521 = t20520+1.0;
            double t20522 = 1.0/(t20521*t20521);
            double t20523 = a5*gamma_bb[index]*t20516*t20482*t20493;
            double t20524 = t20523+1.0;
            double t20535 = raa2*t20517;
            double t20525 = exp(-t20535);
            double t20526 = t20525-1.0;
            double t20527 = kaa2*t20526;
            double t20528 = pow(t20514,2.0/5.0);
            double t20536 = raa1*t20528;
            double t20529 = exp(-t20536);
            double t20530 = t20529-1.0;
            double t20531 = kaa1*t20530;
            double t20532 = -kaa0+t20531+t20527;
            double t20533 = 1.0/(t20532*t20532);
            double t20534 = c*c0*t20511*t20522*t20524*t20533*t20519*(2.0/3.0);
            double t20537 = exp(t20534);
            double t20538 = Ei(-t20534);
            double t20539 = 1.0/t20521;
            double t20540 = c*c0*t20511*t20524*t20533*t20519*(2.0/3.0);
            double t20541 = sqrt(t20540);
            double t20542 = t20512*t20513*t20484*t20487;
            double t20543 = pow(t20514,4.0/5.0);
            double t20553 = rab1*t20543;
            double t20544 = exp(-t20553);
            double t20545 = t20544-1.0;
            double t20554 = kab1*t20545;
            double t20546 = kab0-t20554;
            double t20547 = a3*gamma_bb[index]*t20516*t20482*t20493;
            double t20548 = t20547+1.0;
            double t20549 = 1.0/sqrt(t20548);
            double t20550 = 1.0/pow(rho_b[index],8.0/3.0);
            double t20551 = a1*gamma_bb[index]*t20550*t20482;
            double t20552 = t20542+t20551+1.0;
            double t20555 = t20512*t20513*t20484*t20487*2.0;
            double t20556 = exp(t20555);
            double t20557 = 1.0/(t20546*t20546);
            double t20558 = 1.0/(t20552*t20552);
            double t20559 = c*c0*t20511*t20556*t20548*t20557*t20558*(2.0/3.0);
            double t20560 = exp(t20559);
            double t20561 = Ei(-t20559);
            double t20562 = sqrt(t20559);
            double t20563 = 1.0/sqrt(t20496);
            double t20564 = c*c;
            double t20565 = sqrt(t20488);
            double t20566 = t20515*t20485*t20486*t20487*2.0;
            double t20567 = exp(t20566);
            double t20568 = t20515*t20485*t20486*t20487;
            double t20569 = t20568+1.0;
            double t20570 = 1.0/(t20569*t20569);
            double t20571 = a5*gamma_aa[index]*t20482*t20493*t20494;
            double t20572 = t20571+1.0;
            double t20583 = raa2*t20565;
            double t20573 = exp(-t20583);
            double t20574 = t20573-1.0;
            double t20575 = kaa2*t20574;
            double t20576 = pow(t20488,2.0/5.0);
            double t20584 = raa1*t20576;
            double t20577 = exp(-t20584);
            double t20578 = t20577-1.0;
            double t20579 = kaa1*t20578;
            double t20580 = -kaa0+t20575+t20579;
            double t20581 = 1.0/(t20580*t20580);
            double t20582 = c*c0*t20570*t20572*t20581*t20483*t20567*(2.0/3.0);
            double t20585 = exp(t20582);
            double t20586 = Ei(-t20582);
            double t20587 = 1.0/t20569;
            double t20588 = c*c0*t20572*t20581*t20483*t20567*(2.0/3.0);
            double t20589 = sqrt(t20588);
            functional_[index] = rho_b[index]*( ( (c*c0*t20483*(-2.0/3.0)+t20500*t20563*t20492*exp(-t20484*t20485* \
               t20486*t20487)*1.0E5 > 0.0) ? c0*1.0*(t20508*t20509+((c*c0*t20502*t20505*t20506*t20508*t20509*t20483* \
               t20496*(2.0/3.0)+1.0)*(t20510*4.0+c*c0*t20502*t20505*t20506*t20483*t20496*(8.0/3.0)+6.0))/(t20510* \
               6.0+c*c0*t20502*t20505*t20506*t20483*t20496*4.0+3.0))*(1.0/2.0) : 0.0 ) + ( (c*c0*t20511*(-2.0/3.0) \
               +t20552*t20546*t20549*exp(-t20512*t20513*t20484*t20487)*1.0E5 > 0.0) ? c0*exp(-1.0/pow(rho_b[index],2.0/ \
               3.0)*t20564*1.0/pow(k1*t20517+c*k2*t20511,2.0))*1.0*(t20537*t20538+((c*c0*t20511*t20522*t20524*t20533* \
               t20519*t20537*t20538*(2.0/3.0)+1.0)*(t20541*t20539*4.0+c*c0*t20511*t20522*t20524*t20533*t20519*(8.0/ \
               3.0)+6.0))/(t20541*t20539*6.0+c*c0*t20511*t20522*t20524*t20533*t20519*4.0+3.0))*(1.0/2.0) : 0.0 )  \
               )+rho_a[index]*( ( (c*c0*t20511*(-2.0/3.0)+t20552*t20546*t20549*exp(-t20542)*1.0E5 > 0.0) ? c0*1.0* \
               (t20560*t20561+((c*c0*t20511*t20560*t20561*t20556*t20548*t20557*t20558*(2.0/3.0)+1.0)*(t20562*4.0+ \
               c*c0*t20511*t20556*t20548*t20557*t20558*(8.0/3.0)+6.0))/(t20562*6.0+c*c0*t20511*t20556*t20548*t20557* \
               t20558*4.0+3.0))*(1.0/2.0) : 0.0 ) + ( (c*c0*t20483*(-2.0/3.0)+t20500*t20563*t20492*exp(-t20497)*1.0E5  \
               > 0.0) ? c0*1.0*exp(-1.0/pow(rho_a[index],2.0/3.0)*t20564*1.0/pow(k1*t20565+c*k2*t20483,2.0))*(t20585* \
               t20586+((c*c0*t20570*t20572*t20581*t20483*t20567*t20585*t20586*(2.0/3.0)+1.0)*(t20587*t20589*4.0+c* \
               c0*t20570*t20572*t20581*t20483*t20567*(8.0/3.0)+6.0))/(t20587*t20589*6.0+c*c0*t20570*t20572*t20581* \
               t20483*t20567*4.0+3.0))*(1.0/2.0) : 0.0 ) );
        } else if (rho_a[index] > cutoff_) {
            double t23873 = tspi_m13*tspi_m13;
            double t23874 = 1.0/pow(rho_a[index],1.0/3.0);
            double t23875 = a2*a2;
            double t23876 = gamma_aa[index]*gamma_aa[index];
            double t23877 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t23878 = t23873*t23873;
            double t23879 = c*t23874;
            double t23880 = a4*a4;
            double t23881 = 1.0/c;
            double t23882 = 1.0/pow(rho_a[index],7.0/3.0);
            double t23883 = sqrt(t23879);
            double t23884 = t23880*t23876*t23877*t23878*2.0;
            double t23885 = exp(t23884);
            double t23886 = t23880*t23876*t23877*t23878;
            double t23887 = t23886+1.0;
            double t23888 = 1.0/(t23887*t23887);
            double t23889 = a5*gamma_aa[index]*t23881*t23873*t23882;
            double t23890 = t23889+1.0;
            double t23901 = raa2*t23883;
            double t23891 = exp(-t23901);
            double t23892 = t23891-1.0;
            double t23893 = kaa2*t23892;
            double t23894 = pow(t23879,2.0/5.0);
            double t23902 = raa1*t23894;
            double t23895 = exp(-t23902);
            double t23896 = t23895-1.0;
            double t23897 = kaa1*t23896;
            double t23898 = -kaa0+t23893+t23897;
            double t23899 = 1.0/(t23898*t23898);
            double t23900 = c*c0*t23890*t23874*t23885*t23888*t23899*(2.0/3.0);
            double t23903 = exp(t23900);
            double t23904 = Ei(-t23900);
            double t23905 = 1.0/t23887;
            double t23906 = c*c0*t23890*t23874*t23885*t23899*(2.0/3.0);
            double t23907 = sqrt(t23906);
            functional_[index] = ( (c*c0*t23874*(-2.0/3.0)+exp(-t23875*t23876*t23877*t23878)*1.0/sqrt(a3*gamma_aa[index]* \
               t23881*t23873*t23882+1.0)*(kab0-kab1*(exp(-rab1*pow(t23879,4.0/5.0))-1.0))*(t23875*t23876*t23877*t23878+ \
               a1*gamma_aa[index]*1.0/pow(rho_a[index],8.0/3.0)*t23873+1.0)*1.0E5 > 0.0) ?  c0*rho_a[index]*exp(- \
               (c*c)*1.0/pow(rho_a[index],2.0/3.0)*1.0/pow(k1*t23883+c*k2*t23874,2.0))*1.0*(t23903*t23904+((c*c0* \
               t23903*t23904*t23890*t23874*t23885*t23888*t23899*(2.0/3.0)+1.0)*(t23905*t23907*4.0+c*c0*t23890*t23874* \
               t23885*t23888*t23899*(8.0/3.0)+6.0))/(t23905*t23907*6.0+c*c0*t23890*t23874*t23885*t23888*t23899*4.0+ \
               3.0))*(1.0/2.0) : 0.0 ) ;
        } else if (rho_b[index] > cutoff_) {
            double t23076 = tspi_m13*tspi_m13;
            double t23077 = 1.0/pow(rho_b[index],1.0/3.0);
            double t23078 = a2*a2;
            double t23079 = gamma_bb[index]*gamma_bb[index];
            double t23080 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t23081 = t23076*t23076;
            double t23082 = c*t23077;
            double t23083 = a4*a4;
            double t23084 = 1.0/c;
            double t23085 = 1.0/pow(rho_b[index],7.0/3.0);
            double t23086 = sqrt(t23082);
            double t23087 = t23080*t23081*t23083*t23079*2.0;
            double t23088 = exp(t23087);
            double t23089 = t23080*t23081*t23083*t23079;
            double t23090 = t23089+1.0;
            double t23091 = 1.0/(t23090*t23090);
            double t23092 = a5*gamma_bb[index]*t23084*t23076*t23085;
            double t23093 = t23092+1.0;
            double t23104 = raa2*t23086;
            double t23094 = exp(-t23104);
            double t23095 = t23094-1.0;
            double t23096 = kaa2*t23095;
            double t23097 = pow(t23082,2.0/5.0);
            double t23105 = raa1*t23097;
            double t23098 = exp(-t23105);
            double t23099 = t23098-1.0;
            double t23100 = kaa1*t23099;
            double t23101 = -kaa0+t23100+t23096;
            double t23102 = 1.0/(t23101*t23101);
            double t23103 = c*c0*t23102*t23091*t23093*t23077*t23088*(2.0/3.0);
            double t23106 = exp(t23103);
            double t23107 = Ei(-t23103);
            double t23108 = 1.0/t23090;
            double t23109 = c*c0*t23102*t23093*t23077*t23088*(2.0/3.0);
            double t23110 = sqrt(t23109);
            functional_[index] = ( (c*c0*t23077*(-2.0/3.0)+exp(-t23080*t23081*t23078*t23079)*1.0/sqrt(a3*gamma_bb[index]* \
               t23084*t23076*t23085+1.0)*(kab0-kab1*(exp(-rab1*pow(t23082,4.0/5.0))-1.0))*(t23080*t23081*t23078*t23079+ \
               a1*gamma_bb[index]*1.0/pow(rho_b[index],8.0/3.0)*t23076+1.0)*1.0E5 > 0.0) ?  c0*rho_b[index]*exp(- \
               (c*c)*1.0/pow(rho_b[index],2.0/3.0)*1.0/pow(k1*t23086+c*k2*t23077,2.0))*1.0*(t23106*t23107+((c*c0* \
               t23102*t23106*t23107*t23091*t23093*t23077*t23088*(2.0/3.0)+1.0)*(t23110*t23108*4.0+c*c0*t23102*t23091* \
               t23093*t23077*t23088*(8.0/3.0)+6.0))/(t23110*t23108*6.0+c*c0*t23102*t23091*t23093*t23077*t23088*4.0+ \
               3.0))*(1.0/2.0) : 0.0 ) ;
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t20591 = tspi_m13*tspi_m13;
            double t20592 = 1.0/pow(rho_a[index],1.0/3.0);
            double t20593 = a2*a2;
            double t20594 = gamma_aa[index]*gamma_aa[index];
            double t20595 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t20596 = t20591*t20591;
            double t20597 = c*t20592;
            double t20598 = a4*a4;
            double t20599 = t20594*t20595*t20596*t20598*2.0;
            double t20600 = exp(t20599);
            double t20601 = 1.0/c;
            double t20602 = 1.0/pow(rho_a[index],7.0/3.0);
            double t20603 = sqrt(t20597);
            double t20604 = t20594*t20595*t20596*t20598;
            double t20605 = t20604+1.0;
            double t20606 = 1.0/(t20605*t20605);
            double t20607 = a5*gamma_aa[index]*t20601*t20602*t20591;
            double t20608 = t20607+1.0;
            double t20619 = raa2*t20603;
            double t20609 = exp(-t20619);
            double t20610 = t20609-1.0;
            double t20611 = kaa2*t20610;
            double t20612 = pow(t20597,2.0/5.0);
            double t20620 = raa1*t20612;
            double t20613 = exp(-t20620);
            double t20614 = t20613-1.0;
            double t20615 = kaa1*t20614;
            double t20616 = -kaa0+t20611+t20615;
            double t20617 = 1.0/(t20616*t20616);
            double t20618 = c*c0*t20600*t20606*t20608*t20617*t20592*(2.0/3.0);
            double t20621 = 1.0/t20605;
            double t20622 = 1.0/pow(rho_a[index],4.0/3.0);
            double t20623 = c*c0*t20600*t20608*t20617*t20592*(2.0/3.0);
            double t20624 = sqrt(t20623);
            double t20625 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t20626 = 1.0/sqrt(t20597);
            double t20627 = c*kaa2*raa2*t20622*t20626*t20609*(1.0/6.0);
            double t20628 = 1.0/pow(t20597,3.0/5.0);
            double t20629 = c*kaa1*raa1*t20613*t20622*t20628*(2.0/1.5E1);
            double t20630 = t20627+t20629;
            double t20631 = 1.0/(t20616*t20616*t20616);
            double t20632 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t20633 = exp(t20618);
            double t20634 = Ei(-t20618);
            double t20635 = 1.0/(t20605*t20605*t20605);
            double t20636 = t20621*t20624*6.0;
            double t20637 = c*c0*t20600*t20606*t20608*t20617*t20592*4.0;
            double t20638 = t20636+t20637+3.0;
            double t20639 = 1.0/t20638;
            double t20640 = c*c0*t20600*t20622*t20606*t20608*t20617*(2.0/9.0);
            double t20641 = a5*c0*gamma_aa[index]*t20600*t20606*t20625*t20617*t20591*(1.4E1/9.0);
            double t20642 = c*c0*t20600*t20630*t20631*t20606*t20608*t20592*(4.0/3.0);
            double t20643 = c*c0*t20600*t20632*t20606*t20608*t20617*t20594*t20596*t20598*(6.4E1/9.0);
            double t20645 = c*c0*t20600*t20632*t20608*t20617*t20635*t20594*t20596*t20598*(6.4E1/9.0);
            double t20644 = t20640+t20641+t20642+t20643-t20645;
            double t20646 = c*c0*t20600*t20606*t20633*t20634*t20608*t20617*t20592*(2.0/3.0);
            double t20647 = t20646+1.0;
            double t20648 = t20621*t20624*4.0;
            double t20649 = c*c0*t20600*t20606*t20608*t20617*t20592*(8.0/3.0);
            double t20650 = t20648+t20649+6.0;
            double t20651 = c*c0*t20600*t20622*t20608*t20617*(2.0/9.0);
            double t20652 = a5*c0*gamma_aa[index]*t20600*t20625*t20617*t20591*(1.4E1/9.0);
            double t20653 = c*c0*t20600*t20630*t20631*t20608*t20592*(4.0/3.0);
            double t20654 = c*c0*t20600*t20632*t20608*t20617*t20594*t20596*t20598*(6.4E1/9.0);
            double t20655 = t20651+t20652+t20653+t20654;
            double t20656 = 1.0/sqrt(t20623);
            double t20657 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t20658 = t20593*t20594*t20595*t20596;
            double t20659 = pow(t20597,4.0/5.0);
            double t20677 = rab1*t20659;
            double t20660 = exp(-t20677);
            double t20661 = t20660-1.0;
            double t20678 = kab1*t20661;
            double t20662 = kab0-t20678;
            double t20663 = a3*gamma_aa[index]*t20601*t20602*t20591;
            double t20664 = t20663+1.0;
            double t20665 = 1.0/sqrt(t20664);
            double t20666 = 1.0/pow(rho_a[index],8.0/3.0);
            double t20667 = a1*gamma_aa[index]*t20591*t20666;
            double t20668 = t20658+t20667+1.0;
            double t20669 = c*c;
            double t20670 = 1.0/pow(rho_a[index],2.0/3.0);
            double t20671 = k1*t20603;
            double t20672 = c*k2*t20592;
            double t20673 = t20671+t20672;
            double t20674 = 1.0/(t20673*t20673);
            double t20680 = t20670*t20674*t20669;
            double t20675 = exp(-t20680);
            double t20676 = exp(-t20658);
            double t20679 = c*c0*t20592*(2.0/3.0);
            double t20681 = t20633*t20634;
            double t20682 = t20650*t20647*t20639;
            double t20683 = t20681+t20682;
            double t20684 = t20662*t20665*t20676*t20668*1.0E5;
            double t20685 = t20684-t20679;
            double t20686 = ( (t20685 > 0.0) ?  1.0 : 0.0 ) ;
            double t20687 = t20593*t20594*t20595*t20596*2.0;
            double t20688 = exp(t20687);
            double t20689 = 1.0/(t20662*t20662);
            double t20690 = 1.0/(t20668*t20668);
            double t20691 = c*c0*t20690*t20592*t20664*t20688*t20689*(2.0/3.0);
            double t20692 = sqrt(t20691);
            double t20693 = t20593*t20594*t20657*t20596*(1.6E1/3.0);
            double t20694 = a1*gamma_aa[index]*t20625*t20591*(8.0/3.0);
            double t20695 = t20693+t20694;
            double t20696 = exp(t20691);
            double t20697 = Ei(-t20691);
            double t20698 = c*c0*t20622*t20690*t20664*t20688*t20689*(2.0/9.0);
            double t20699 = 1.0/(t20668*t20668*t20668);
            double t20700 = a3*c0*gamma_aa[index]*t20625*t20591*t20690*t20688*t20689*(1.4E1/9.0);
            double t20701 = 1.0/pow(rho_a[index],5.0/3.0);
            double t20702 = 1.0/pow(t20597,1.0/5.0);
            double t20703 = c*c0*t20632*t20690*t20664*t20593*t20594*t20596*t20688*t20689*(6.4E1/9.0);
            double t20704 = 1.0/(t20662*t20662*t20662);
            double t20710 = c*c0*t20592*t20664*t20695*t20688*t20689*t20699*(4.0/3.0);
            double t20711 = c0*kab1*rab1*t20701*t20702*t20704*t20660*t20690*t20664*t20669*t20688*(1.6E1/4.5E1) \
               ;
            double t20705 = t20700-t20710-t20711+t20703+t20698;
            double t20706 = t20692*6.0;
            double t20707 = c*c0*t20690*t20592*t20664*t20688*t20689*4.0;
            double t20708 = t20706+t20707+3.0;
            double t20709 = 1.0/t20708;
            double t20712 = c*c0*t20690*t20592*t20664*t20696*t20688*t20697*t20689*(2.0/3.0);
            double t20713 = t20712+1.0;
            double t20714 = t20692*4.0;
            double t20715 = c*c0*t20690*t20592*t20664*t20688*t20689*(8.0/3.0);
            double t20716 = t20714+t20715+6.0;
            double t20717 = 1.0/sqrt(t20691);
            double t20718 = 1.0/c0;
            double t20719 = pow(rho_a[index],1.0/3.0);
            double t20720 = c*c0*t20622*(2.0/9.0);
            double t20721 = t20662*t20593*t20665*t20594*t20657*t20676*t20596*t20668*(1.6E6/3.0);
            double t20722 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t20723 = 1.0/pow(t20664,3.0/2.0);
            double t20724 = a3*gamma_aa[index]*t20601*t20722*t20723*t20662*t20591*t20676*t20668*(3.5E5/3.0);
            double t20725 = t20720+t20721+t20724-t20662*t20665*t20676*t20695*1.0E5-c*kab1*rab1*t20702*t20622* \
               t20660*t20665*t20676*t20668*(8.0E4/3.0);
            double t20726 = 1.0/pow(rho_b[index],1.0/3.0);
            double t20727 = gamma_bb[index]*gamma_bb[index];
            double t20728 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t20729 = c*t20726;
            double t20730 = pow(t20729,4.0/5.0);
            double t20743 = rab1*t20730;
            double t20731 = exp(-t20743);
            double t20732 = t20731-1.0;
            double t20744 = kab1*t20732;
            double t20733 = kab0-t20744;
            double t20734 = 1.0/pow(rho_b[index],7.0/3.0);
            double t20735 = a3*gamma_bb[index]*t20601*t20734*t20591;
            double t20736 = t20735+1.0;
            double t20737 = t20727*t20593*t20728*t20596;
            double t20738 = 1.0/pow(rho_b[index],8.0/3.0);
            double t20739 = a1*gamma_bb[index]*t20591*t20738;
            double t20740 = t20737+t20739+1.0;
            double t20741 = t20727*t20593*t20728*t20596*2.0;
            double t20742 = exp(t20741);
            double t20745 = 1.0/(t20733*t20733);
            double t20746 = 1.0/(t20740*t20740);
            double t20747 = c*c0*t20742*t20726*t20736*t20745*t20746*(2.0/3.0);
            double t20748 = exp(t20747);
            double t20749 = Ei(-t20747);
            double t20750 = sqrt(t20747);
            v_rho_a_[index] = -rho_b[index]*(c0*t20686*(t20713*t20709*(t20705*t20717*2.0+c*c0*t20622*t20690*t20664* \
               t20688*t20689*(8.0/9.0)+a3*c0*gamma_aa[index]*t20625*t20591*t20690*t20688*t20689*(5.6E1/9.0)-c*c0* \
               t20592*t20664*t20695*t20688*t20689*t20699*(1.6E1/3.0)+c*c0*t20632*t20690*t20664*t20593*t20594*t20596* \
               t20688*t20689*(2.56E2/9.0)-c0*kab1*rab1*t20701*t20702*t20704*t20660*t20690*t20664*t20669*t20688*(6.4E1/ \
               4.5E1))+t20716*t20709*(t20700-t20710-t20711+t20703+t20698+c*c0*t20622*t20690*t20664*t20696*t20688* \
               t20697*t20689*(2.0/9.0)+a3*c0*gamma_aa[index]*t20625*t20591*t20690*t20696*t20688*t20697*t20689*(1.4E1/ \
               9.0)+c*c0*t20705*t20690*t20592*t20664*t20696*t20688*t20697*t20689*(2.0/3.0)-c*c0*t20592*t20664*t20695* \
               t20696*t20688*t20697*t20689*t20699*(4.0/3.0)+c*c0*t20632*t20690*t20664*t20593*t20594*t20596*t20696* \
               t20688*t20697*t20689*(6.4E1/9.0)-c0*kab1*rab1*t20701*t20702*t20704*t20660*t20690*t20664*t20669*t20696* \
               t20688*t20697*(1.6E1/4.5E1))+t20705*t20696*t20697-t20713*t20716*1.0/(t20708*t20708)*(t20705*t20717* \
               3.0+c*c0*t20622*t20690*t20664*t20688*t20689*(4.0/3.0)+a3*c0*gamma_aa[index]*t20625*t20591*t20690*t20688* \
               t20689*(2.8E1/3.0)-c*c0*t20592*t20664*t20695*t20688*t20689*t20699*8.0+c*c0*t20632*t20690*t20664*t20593* \
               t20594*t20596*t20688*t20689*(1.28E2/3.0)-c0*kab1*rab1*t20701*t20702*t20704*t20660*t20690*t20664*t20669* \
               t20688*(3.2E1/1.5E1))+(t20601*t20705*(t20662*t20662)*t20718*t20719*(t20668*t20668)*exp(-t20687)*(3.0/ \
               2.0))/t20664)*(1.0/2.0)- 0.0 )+rho_a[index]*( ( (c*c0*t20592*(-2.0/3.0)+t20662*t20665*t20668*exp(- \
               t20593*t20594*t20595*t20596)*1.0E5 > 0.0) ? c0*t20675*1.0*(t20647*t20639*(t20621*t20655*t20656*2.0- \
               t20606*t20624*t20594*t20657*t20596*t20598*(6.4E1/3.0)+c*c0*t20600*t20622*t20606*t20608*t20617*(8.0/ \
               9.0)+a5*c0*gamma_aa[index]*t20600*t20606*t20625*t20617*t20591*(5.6E1/9.0)+c*c0*t20600*t20630*t20631* \
               t20606*t20608*t20592*(1.6E1/3.0)+c*c0*t20600*t20632*t20606*t20608*t20617*t20594*t20596*t20598*(2.56E2/ \
               9.0)-c*c0*t20600*t20632*t20608*t20617*t20635*t20594*t20596*t20598*(2.56E2/9.0))+t20650*t20639*(t20640+ \
               t20641+t20642+t20643-t20645+c*c0*t20600*t20622*t20606*t20633*t20634*t20608*t20617*(2.0/9.0)+a5*c0* \
               gamma_aa[index]*t20600*t20606*t20633*t20625*t20634*t20617*t20591*(1.4E1/9.0)+c*c0*t20600*t20630*t20631* \
               t20606*t20633*t20634*t20608*t20592*(4.0/3.0)+c*c0*t20600*t20606*t20633*t20634*t20608*t20617*t20644* \
               t20592*(2.0/3.0)+c*c0*t20600*t20632*t20606*t20633*t20634*t20608*t20617*t20594*t20596*t20598*(6.4E1/ \
               9.0)-c*c0*t20600*t20632*t20633*t20634*t20608*t20617*t20635*t20594*t20596*t20598*(6.4E1/9.0))+t20633* \
               t20634*t20644-t20650*1.0/(t20638*t20638)*t20647*(t20621*t20655*t20656*3.0-t20606*t20624*t20594*t20657* \
               t20596*t20598*3.2E1+c*c0*t20600*t20622*t20606*t20608*t20617*(4.0/3.0)+a5*c0*gamma_aa[index]*t20600* \
               t20606*t20625*t20617*t20591*(2.8E1/3.0)+c*c0*t20600*t20630*t20631*t20606*t20608*t20592*8.0+c*c0*t20600* \
               t20632*t20606*t20608*t20617*t20594*t20596*t20598*(1.28E2/3.0)-c*c0*t20600*t20632*t20608*t20617*t20635* \
               t20594*t20596*t20598*(1.28E2/3.0))+(t20601*(t20605*t20605)*(t20616*t20616)*t20644*t20718*t20719*exp(- \
               t20599)*(3.0/2.0))/t20608)*(-1.0/2.0) : 0.0 ) +c0*t20683*t20675*t20686*(t20701*t20674*t20669*(2.0/ \
               3.0)-t20670*1.0/(t20673*t20673*t20673)*t20669*(c*k2*t20622*(1.0/3.0)+c*k1*t20622*t20626*(1.0/6.0)) \
               *2.0)*(1.0/2.0)+ 0.0 )+ ( (c*c0*t20726*(-2.0/3.0)+t20740*t20733*1.0/sqrt(t20736)*exp(-t20727*t20593* \
               t20728*t20596)*1.0E5 > 0.0) ? c0*1.0*(t20748*t20749+((c*c0*t20742*t20726*t20736*t20745*t20746*t20748* \
               t20749*(2.0/3.0)+1.0)*(t20750*4.0+c*c0*t20742*t20726*t20736*t20745*t20746*(8.0/3.0)+6.0))/(t20750* \
               6.0+c*c0*t20742*t20726*t20736*t20745*t20746*4.0+3.0))*(1.0/2.0) : 0.0 ) +c0*t20683*t20675*t20686*(1.0/ \
               2.0);
        } else if (rho_a[index] > cutoff_) {
            double t23909 = tspi_m13*tspi_m13;
            double t23910 = 1.0/pow(rho_a[index],1.0/3.0);
            double t23911 = a2*a2;
            double t23912 = gamma_aa[index]*gamma_aa[index];
            double t23913 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t23914 = t23909*t23909;
            double t23915 = c*t23910;
            double t23916 = a4*a4;
            double t23917 = 1.0/c;
            double t23918 = 1.0/pow(rho_a[index],7.0/3.0);
            double t23919 = sqrt(t23915);
            double t23920 = t23912*t23913*t23914*t23916*2.0;
            double t23921 = exp(t23920);
            double t23922 = t23912*t23913*t23914*t23916;
            double t23923 = t23922+1.0;
            double t23924 = 1.0/(t23923*t23923);
            double t23925 = a5*gamma_aa[index]*t23917*t23909*t23918;
            double t23926 = t23925+1.0;
            double t23937 = raa2*t23919;
            double t23927 = exp(-t23937);
            double t23928 = t23927-1.0;
            double t23929 = kaa2*t23928;
            double t23930 = pow(t23915,2.0/5.0);
            double t23938 = raa1*t23930;
            double t23931 = exp(-t23938);
            double t23932 = t23931-1.0;
            double t23933 = kaa1*t23932;
            double t23934 = -kaa0+t23933+t23929;
            double t23935 = 1.0/(t23934*t23934);
            double t23936 = c*c0*t23910*t23921*t23924*t23926*t23935*(2.0/3.0);
            double t23939 = exp(t23936);
            double t23940 = Ei(-t23936);
            double t23941 = 1.0/t23923;
            double t23942 = c*c0*t23910*t23921*t23926*t23935*(2.0/3.0);
            double t23943 = sqrt(t23942);
            double t23944 = t23911*t23912*t23913*t23914;
            double t23945 = pow(t23915,4.0/5.0);
            double t23995 = rab1*t23945;
            double t23946 = exp(-t23995);
            double t23947 = t23946-1.0;
            double t23996 = kab1*t23947;
            double t23948 = kab0-t23996;
            double t23949 = a3*gamma_aa[index]*t23917*t23909*t23918;
            double t23950 = t23949+1.0;
            double t23951 = 1.0/sqrt(t23950);
            double t23952 = 1.0/pow(rho_a[index],8.0/3.0);
            double t23953 = a1*gamma_aa[index]*t23952*t23909;
            double t23954 = t23944+t23953+1.0;
            double t23955 = c*c;
            double t23956 = 1.0/pow(rho_a[index],2.0/3.0);
            double t23957 = k1*t23919;
            double t23958 = c*k2*t23910;
            double t23959 = t23957+t23958;
            double t23960 = 1.0/(t23959*t23959);
            double t24000 = t23960*t23955*t23956;
            double t23961 = exp(-t24000);
            double t23962 = c*c0*t23910*t23921*t23940*t23924*t23926*t23935*t23939*(2.0/3.0);
            double t23963 = t23962+1.0;
            double t23964 = t23941*t23943*6.0;
            double t23965 = c*c0*t23910*t23921*t23924*t23926*t23935*4.0;
            double t23966 = t23964+t23965+3.0;
            double t23967 = 1.0/t23966;
            double t23968 = 1.0/pow(rho_a[index],4.0/3.0);
            double t23969 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t23970 = 1.0/sqrt(t23915);
            double t23971 = c*kaa2*raa2*t23970*t23927*t23968*(1.0/6.0);
            double t23972 = 1.0/pow(t23915,3.0/5.0);
            double t23973 = c*kaa1*raa1*t23931*t23972*t23968*(2.0/1.5E1);
            double t23974 = t23971+t23973;
            double t23975 = 1.0/(t23934*t23934*t23934);
            double t23976 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t23977 = 1.0/(t23923*t23923*t23923);
            double t23978 = t23941*t23943*4.0;
            double t23979 = c*c0*t23910*t23921*t23924*t23926*t23935*(8.0/3.0);
            double t23980 = t23978+t23979+6.0;
            double t23981 = c*c0*t23921*t23924*t23926*t23935*t23968*(2.0/9.0);
            double t23982 = a5*c0*gamma_aa[index]*t23921*t23924*t23935*t23909*t23969*(1.4E1/9.0);
            double t23983 = c*c0*t23910*t23921*t23924*t23926*t23974*t23975*(4.0/3.0);
            double t23984 = c*c0*t23912*t23921*t23914*t23924*t23916*t23926*t23935*t23976*(6.4E1/9.0);
            double t23986 = c*c0*t23912*t23921*t23914*t23916*t23926*t23935*t23976*t23977*(6.4E1/9.0);
            double t23985 = t23981+t23982+t23983+t23984-t23986;
            double t23987 = c*c0*t23921*t23926*t23935*t23968*(2.0/9.0);
            double t23988 = a5*c0*gamma_aa[index]*t23921*t23935*t23909*t23969*(1.4E1/9.0);
            double t23989 = c*c0*t23910*t23921*t23926*t23974*t23975*(4.0/3.0);
            double t23990 = c*c0*t23912*t23921*t23914*t23916*t23926*t23935*t23976*(6.4E1/9.0);
            double t23991 = t23990+t23987+t23988+t23989;
            double t23992 = 1.0/sqrt(t23942);
            double t23993 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t23994 = exp(-t23944);
            double t23997 = t23951*t23954*t23948*t23994*1.0E5;
            double t24004 = c*c0*t23910*(2.0/3.0);
            double t23998 = t23997-t24004;
            double t23999 = ( (t23998 > 0.0) ?  1.0 : 0.0 ) ;
            double t24001 = t23940*t23939;
            double t24002 = t23980*t23963*t23967;
            double t24003 = t24001+t24002;
            v_rho_a_[index] = ( (c*c0*t23910*(-2.0/3.0)+t23951*t23954*t23948*exp(-t23911*t23912*t23913*t23914) \
               *1.0E5 > 0.0) ?  c0*t23961*t24003*1.0*(1.0/2.0) : 0.0 ) -c0*rho_a[index]*t23961*t23999*(t23963*t23967* \
               (t23941*t23991*t23992*2.0-t23912*t23914*t23924*t23916*t23943*t23993*(6.4E1/3.0)+c*c0*t23921*t23924* \
               t23926*t23935*t23968*(8.0/9.0)+a5*c0*gamma_aa[index]*t23921*t23924*t23935*t23909*t23969*(5.6E1/9.0) \
               +c*c0*t23910*t23921*t23924*t23926*t23974*t23975*(1.6E1/3.0)+c*c0*t23912*t23921*t23914*t23924*t23916* \
               t23926*t23935*t23976*(2.56E2/9.0)-c*c0*t23912*t23921*t23914*t23916*t23926*t23935*t23976*t23977*(2.56E2/ \
               9.0))+t23980*t23967*(t23981+t23982+t23983+t23984-t23986+c*c0*t23921*t23940*t23924*t23926*t23935*t23939* \
               t23968*(2.0/9.0)+a5*c0*gamma_aa[index]*t23921*t23940*t23924*t23935*t23909*t23939*t23969*(1.4E1/9.0) \
               +c*c0*t23910*t23921*t23940*t23924*t23926*t23935*t23939*t23985*(2.0/3.0)+c*c0*t23910*t23921*t23940* \
               t23924*t23926*t23974*t23939*t23975*(4.0/3.0)+c*c0*t23912*t23921*t23940*t23914*t23924*t23916*t23926* \
               t23935*t23939*t23976*(6.4E1/9.0)-c*c0*t23912*t23921*t23940*t23914*t23916*t23926*t23935*t23939*t23976* \
               t23977*(6.4E1/9.0))+t23940*t23939*t23985-t23980*t23963*1.0/(t23966*t23966)*(t23941*t23991*t23992*3.0- \
               t23912*t23914*t23924*t23916*t23943*t23993*3.2E1+c*c0*t23921*t23924*t23926*t23935*t23968*(4.0/3.0)+ \
               a5*c0*gamma_aa[index]*t23921*t23924*t23935*t23909*t23969*(2.8E1/3.0)+c*c0*t23910*t23921*t23924*t23926* \
               t23974*t23975*8.0+c*c0*t23912*t23921*t23914*t23924*t23916*t23926*t23935*t23976*(1.28E2/3.0)-c*c0*t23912* \
               t23921*t23914*t23916*t23926*t23935*t23976*t23977*(1.28E2/3.0))+(pow(rho_a[index],1.0/3.0)*(t23923* \
               t23923)*(t23934*t23934)*t23917*t23985*exp(-t23920)*(3.0/2.0))/(c0*t23926))*(1.0/2.0)+c0*rho_a[index]* \
               t23961*t23999*t24003*(1.0/pow(rho_a[index],5.0/3.0)*t23960*t23955*(2.0/3.0)-t23955*t23956*1.0/(t23959* \
               t23959*t23959)*(c*k2*t23968*(1.0/3.0)+c*k1*t23970*t23968*(1.0/6.0))*2.0)*(1.0/2.0)+ 0.0 ;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t20752 = tspi_m13*tspi_m13;
            double t20753 = 1.0/pow(rho_b[index],1.0/3.0);
            double t20754 = a2*a2;
            double t20755 = gamma_bb[index]*gamma_bb[index];
            double t20756 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t20757 = t20752*t20752;
            double t20758 = c*t20753;
            double t20759 = a4*a4;
            double t20760 = t20755*t20756*t20757*t20759*2.0;
            double t20761 = exp(t20760);
            double t20762 = 1.0/c;
            double t20763 = 1.0/pow(rho_b[index],7.0/3.0);
            double t20764 = sqrt(t20758);
            double t20765 = t20755*t20756*t20757*t20759;
            double t20766 = t20765+1.0;
            double t20767 = 1.0/(t20766*t20766);
            double t20768 = a5*gamma_bb[index]*t20752*t20762*t20763;
            double t20769 = t20768+1.0;
            double t20780 = raa2*t20764;
            double t20770 = exp(-t20780);
            double t20771 = t20770-1.0;
            double t20772 = kaa2*t20771;
            double t20773 = pow(t20758,2.0/5.0);
            double t20781 = raa1*t20773;
            double t20774 = exp(-t20781);
            double t20775 = t20774-1.0;
            double t20776 = kaa1*t20775;
            double t20777 = -kaa0+t20772+t20776;
            double t20778 = 1.0/(t20777*t20777);
            double t20779 = c*c0*t20761*t20753*t20767*t20769*t20778*(2.0/3.0);
            double t20782 = 1.0/t20766;
            double t20783 = 1.0/pow(rho_b[index],4.0/3.0);
            double t20784 = c*c0*t20761*t20753*t20769*t20778*(2.0/3.0);
            double t20785 = sqrt(t20784);
            double t20786 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t20787 = 1.0/sqrt(t20758);
            double t20788 = c*kaa2*raa2*t20770*t20783*t20787*(1.0/6.0);
            double t20789 = 1.0/pow(t20758,3.0/5.0);
            double t20790 = c*kaa1*raa1*t20774*t20783*t20789*(2.0/1.5E1);
            double t20791 = t20790+t20788;
            double t20792 = 1.0/(t20777*t20777*t20777);
            double t20793 = 1.0/pow(rho_b[index],2.0E1/3.0);
            double t20794 = exp(t20779);
            double t20795 = Ei(-t20779);
            double t20796 = 1.0/(t20766*t20766*t20766);
            double t20797 = t20782*t20785*6.0;
            double t20798 = c*c0*t20761*t20753*t20767*t20769*t20778*4.0;
            double t20799 = t20797+t20798+3.0;
            double t20800 = 1.0/t20799;
            double t20801 = c*c0*t20761*t20783*t20767*t20769*t20778*(2.0/9.0);
            double t20802 = a5*c0*gamma_bb[index]*t20752*t20761*t20767*t20786*t20778*(1.4E1/9.0);
            double t20803 = c*c0*t20761*t20753*t20791*t20792*t20767*t20769*(4.0/3.0);
            double t20804 = c*c0*t20761*t20755*t20757*t20793*t20767*t20759*t20769*t20778*(6.4E1/9.0);
            double t20806 = c*c0*t20761*t20755*t20757*t20793*t20759*t20769*t20778*t20796*(6.4E1/9.0);
            double t20805 = t20801+t20802+t20803+t20804-t20806;
            double t20807 = c*c0*t20761*t20753*t20767*t20794*t20795*t20769*t20778*(2.0/3.0);
            double t20808 = t20807+1.0;
            double t20809 = t20782*t20785*4.0;
            double t20810 = c*c0*t20761*t20753*t20767*t20769*t20778*(8.0/3.0);
            double t20811 = t20810+t20809+6.0;
            double t20812 = c*c0*t20761*t20783*t20769*t20778*(2.0/9.0);
            double t20813 = a5*c0*gamma_bb[index]*t20752*t20761*t20786*t20778*(1.4E1/9.0);
            double t20814 = c*c0*t20761*t20753*t20791*t20792*t20769*(4.0/3.0);
            double t20815 = c*c0*t20761*t20755*t20757*t20793*t20759*t20769*t20778*(6.4E1/9.0);
            double t20816 = t20812+t20813+t20814+t20815;
            double t20817 = 1.0/sqrt(t20784);
            double t20818 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t20819 = t20754*t20755*t20756*t20757;
            double t20820 = pow(t20758,4.0/5.0);
            double t20838 = rab1*t20820;
            double t20821 = exp(-t20838);
            double t20822 = t20821-1.0;
            double t20839 = kab1*t20822;
            double t20823 = kab0-t20839;
            double t20824 = a3*gamma_bb[index]*t20752*t20762*t20763;
            double t20825 = t20824+1.0;
            double t20826 = 1.0/sqrt(t20825);
            double t20827 = 1.0/pow(rho_b[index],8.0/3.0);
            double t20828 = a1*gamma_bb[index]*t20752*t20827;
            double t20829 = t20819+t20828+1.0;
            double t20830 = c*c;
            double t20831 = 1.0/pow(rho_b[index],2.0/3.0);
            double t20832 = k1*t20764;
            double t20833 = c*k2*t20753;
            double t20834 = t20832+t20833;
            double t20835 = 1.0/(t20834*t20834);
            double t20841 = t20830*t20831*t20835;
            double t20836 = exp(-t20841);
            double t20837 = exp(-t20819);
            double t20840 = c*c0*t20753*(2.0/3.0);
            double t20842 = t20794*t20795;
            double t20843 = t20800*t20811*t20808;
            double t20844 = t20842+t20843;
            double t20845 = t20823*t20826*t20837*t20829*1.0E5;
            double t20846 = -t20840+t20845;
            double t20847 = ( (t20846 > 0.0) ?  1.0 : 0.0 ) ;
            double t20848 = t20754*t20755*t20756*t20757*2.0;
            double t20849 = exp(t20848);
            double t20850 = 1.0/(t20823*t20823);
            double t20851 = 1.0/(t20829*t20829);
            double t20852 = c*c0*t20850*t20851*t20753*t20825*t20849*(2.0/3.0);
            double t20853 = sqrt(t20852);
            double t20854 = t20754*t20755*t20818*t20757*(1.6E1/3.0);
            double t20855 = a1*gamma_bb[index]*t20752*t20786*(8.0/3.0);
            double t20856 = t20854+t20855;
            double t20857 = exp(t20852);
            double t20858 = Ei(-t20852);
            double t20859 = c*c0*t20850*t20851*t20825*t20783*t20849*(2.0/9.0);
            double t20860 = 1.0/(t20829*t20829*t20829);
            double t20861 = a3*c0*gamma_bb[index]*t20850*t20752*t20851*t20786*t20849*(1.4E1/9.0);
            double t20862 = 1.0/pow(rho_b[index],5.0/3.0);
            double t20863 = 1.0/pow(t20758,1.0/5.0);
            double t20864 = c*c0*t20850*t20851*t20825*t20754*t20755*t20757*t20793*t20849*(6.4E1/9.0);
            double t20865 = 1.0/(t20823*t20823*t20823);
            double t20871 = c*c0*t20850*t20860*t20753*t20825*t20856*t20849*(4.0/3.0);
            double t20872 = c0*kab1*rab1*t20821*t20830*t20851*t20825*t20862*t20863*t20865*t20849*(1.6E1/4.5E1) \
               ;
            double t20866 = t20861-t20871-t20872+t20864+t20859;
            double t20867 = t20853*6.0;
            double t20868 = c*c0*t20850*t20851*t20753*t20825*t20849*4.0;
            double t20869 = t20867+t20868+3.0;
            double t20870 = 1.0/t20869;
            double t20873 = c*c0*t20850*t20851*t20753*t20825*t20857*t20849*t20858*(2.0/3.0);
            double t20874 = t20873+1.0;
            double t20875 = t20853*4.0;
            double t20876 = c*c0*t20850*t20851*t20753*t20825*t20849*(8.0/3.0);
            double t20877 = t20875+t20876+6.0;
            double t20878 = 1.0/sqrt(t20852);
            double t20879 = 1.0/c0;
            double t20880 = pow(rho_b[index],1.0/3.0);
            double t20881 = c*c0*t20783*(2.0/9.0);
            double t20882 = t20823*t20754*t20826*t20755*t20818*t20837*t20757*t20829*(1.6E6/3.0);
            double t20883 = 1.0/pow(rho_b[index],1.0E1/3.0);
            double t20884 = 1.0/pow(t20825,3.0/2.0);
            double t20885 = a3*gamma_bb[index]*t20823*t20752*t20762*t20837*t20829*t20883*t20884*(3.5E5/3.0);
            double t20886 = t20881+t20882+t20885-t20823*t20826*t20837*t20856*1.0E5-c*kab1*rab1*t20821*t20826* \
               t20863*t20783*t20837*t20829*(8.0E4/3.0);
            double t20887 = 1.0/pow(rho_a[index],1.0/3.0);
            double t20888 = gamma_aa[index]*gamma_aa[index];
            double t20889 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t20890 = c*t20887;
            double t20891 = pow(t20890,4.0/5.0);
            double t20904 = rab1*t20891;
            double t20892 = exp(-t20904);
            double t20893 = t20892-1.0;
            double t20905 = kab1*t20893;
            double t20894 = kab0-t20905;
            double t20895 = 1.0/pow(rho_a[index],7.0/3.0);
            double t20896 = a3*gamma_aa[index]*t20752*t20762*t20895;
            double t20897 = t20896+1.0;
            double t20898 = t20754*t20757*t20888*t20889;
            double t20899 = 1.0/pow(rho_a[index],8.0/3.0);
            double t20900 = a1*gamma_aa[index]*t20752*t20899;
            double t20901 = t20900+t20898+1.0;
            double t20902 = t20754*t20757*t20888*t20889*2.0;
            double t20903 = exp(t20902);
            double t20906 = 1.0/(t20894*t20894);
            double t20907 = 1.0/(t20901*t20901);
            double t20908 = c*c0*t20903*t20906*t20907*t20887*t20897*(2.0/3.0);
            double t20909 = exp(t20908);
            double t20910 = Ei(-t20908);
            double t20911 = sqrt(t20908);
            v_rho_b_[index] = -rho_a[index]*(c0*t20847*(t20870*t20874*(t20866*t20878*2.0+c*c0*t20850*t20851*t20825* \
               t20783*t20849*(8.0/9.0)+a3*c0*gamma_bb[index]*t20850*t20752*t20851*t20786*t20849*(5.6E1/9.0)-c*c0* \
               t20850*t20860*t20753*t20825*t20856*t20849*(1.6E1/3.0)+c*c0*t20850*t20851*t20825*t20754*t20755*t20757* \
               t20793*t20849*(2.56E2/9.0)-c0*kab1*rab1*t20821*t20830*t20851*t20825*t20862*t20863*t20865*t20849*(6.4E1/ \
               4.5E1))+t20870*t20877*(t20861-t20871-t20872+t20864+t20859+c*c0*t20850*t20851*t20825*t20783*t20857* \
               t20849*t20858*(2.0/9.0)+a3*c0*gamma_bb[index]*t20850*t20752*t20851*t20857*t20786*t20849*t20858*(1.4E1/ \
               9.0)-c*c0*t20850*t20860*t20753*t20825*t20856*t20857*t20849*t20858*(4.0/3.0)+c*c0*t20850*t20851*t20753* \
               t20825*t20857*t20866*t20849*t20858*(2.0/3.0)+c*c0*t20850*t20851*t20825*t20754*t20755*t20757*t20793* \
               t20857*t20849*t20858*(6.4E1/9.0)-c0*kab1*rab1*t20821*t20830*t20851*t20825*t20862*t20863*t20865*t20857* \
               t20849*t20858*(1.6E1/4.5E1))+t20857*t20866*t20858-t20874*t20877*1.0/(t20869*t20869)*(t20866*t20878* \
               3.0+c*c0*t20850*t20851*t20825*t20783*t20849*(4.0/3.0)+a3*c0*gamma_bb[index]*t20850*t20752*t20851*t20786* \
               t20849*(2.8E1/3.0)-c*c0*t20850*t20860*t20753*t20825*t20856*t20849*8.0+c*c0*t20850*t20851*t20825*t20754* \
               t20755*t20757*t20793*t20849*(1.28E2/3.0)-c0*kab1*rab1*t20821*t20830*t20851*t20825*t20862*t20863*t20865* \
               t20849*(3.2E1/1.5E1))+((t20823*t20823)*t20762*t20880*(t20829*t20829)*t20866*t20879*exp(-t20848)*(3.0/ \
               2.0))/t20825)*(1.0/2.0)- 0.0 )+rho_b[index]*( ( (c*c0*t20753*(-2.0/3.0)+t20823*t20826*t20829*exp(- \
               t20754*t20755*t20756*t20757)*1.0E5 > 0.0) ? c0*t20836*1.0*(t20800*t20808*(t20816*t20817*t20782*2.0- \
               t20755*t20818*t20757*t20767*t20785*t20759*(6.4E1/3.0)+c*c0*t20761*t20783*t20767*t20769*t20778*(8.0/ \
               9.0)+a5*c0*gamma_bb[index]*t20752*t20761*t20767*t20786*t20778*(5.6E1/9.0)+c*c0*t20761*t20753*t20791* \
               t20792*t20767*t20769*(1.6E1/3.0)+c*c0*t20761*t20755*t20757*t20793*t20767*t20759*t20769*t20778*(2.56E2/ \
               9.0)-c*c0*t20761*t20755*t20757*t20793*t20759*t20769*t20778*t20796*(2.56E2/9.0))+t20800*t20811*(t20801+ \
               t20802+t20803+t20804-t20806+c*c0*t20761*t20783*t20767*t20794*t20795*t20769*t20778*(2.0/9.0)+a5*c0* \
               gamma_bb[index]*t20752*t20761*t20767*t20794*t20786*t20795*t20778*(1.4E1/9.0)+c*c0*t20805*t20761*t20753* \
               t20767*t20794*t20795*t20769*t20778*(2.0/3.0)+c*c0*t20761*t20753*t20791*t20792*t20767*t20794*t20795* \
               t20769*(4.0/3.0)+c*c0*t20761*t20755*t20757*t20793*t20767*t20794*t20759*t20795*t20769*t20778*(6.4E1/ \
               9.0)-c*c0*t20761*t20755*t20757*t20793*t20794*t20759*t20795*t20769*t20778*t20796*(6.4E1/9.0))+t20805* \
               t20794*t20795-t20811*t20808*1.0/(t20799*t20799)*(t20816*t20817*t20782*3.0-t20755*t20818*t20757*t20767* \
               t20785*t20759*3.2E1+c*c0*t20761*t20783*t20767*t20769*t20778*(4.0/3.0)+a5*c0*gamma_bb[index]*t20752* \
               t20761*t20767*t20786*t20778*(2.8E1/3.0)+c*c0*t20761*t20753*t20791*t20792*t20767*t20769*8.0+c*c0*t20761* \
               t20755*t20757*t20793*t20767*t20759*t20769*t20778*(1.28E2/3.0)-c*c0*t20761*t20755*t20757*t20793*t20759* \
               t20769*t20778*t20796*(1.28E2/3.0))+(t20805*t20762*t20880*(t20766*t20766)*(t20777*t20777)*t20879*exp(- \
               t20760)*(3.0/2.0))/t20769)*(-1.0/2.0) : 0.0 ) +c0*t20844*t20836*t20847*(t20830*t20835*t20862*(2.0/ \
               3.0)-t20830*t20831*1.0/(t20834*t20834*t20834)*(c*k2*t20783*(1.0/3.0)+c*k1*t20783*t20787*(1.0/6.0)) \
               *2.0)*(1.0/2.0)+ 0.0 )+ ( (c*c0*t20887*(-2.0/3.0)+t20901*t20894*1.0/sqrt(t20897)*exp(-t20754*t20757* \
               t20888*t20889)*1.0E5 > 0.0) ? c0*1.0*(t20910*t20909+((c*c0*t20910*t20903*t20906*t20907*t20909*t20887* \
               t20897*(2.0/3.0)+1.0)*(t20911*4.0+c*c0*t20903*t20906*t20907*t20887*t20897*(8.0/3.0)+6.0))/(t20911* \
               6.0+c*c0*t20903*t20906*t20907*t20887*t20897*4.0+3.0))*(1.0/2.0) : 0.0 ) +c0*t20844*t20836*t20847*(1.0/ \
               2.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t23113 = tspi_m13*tspi_m13;
            double t23114 = 1.0/pow(rho_b[index],1.0/3.0);
            double t23115 = a2*a2;
            double t23116 = gamma_bb[index]*gamma_bb[index];
            double t23117 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t23118 = t23113*t23113;
            double t23119 = c*t23114;
            double t23120 = a4*a4;
            double t23121 = 1.0/c;
            double t23122 = 1.0/pow(rho_b[index],7.0/3.0);
            double t23123 = sqrt(t23119);
            double t23124 = t23120*t23116*t23117*t23118*2.0;
            double t23125 = exp(t23124);
            double t23126 = t23120*t23116*t23117*t23118;
            double t23127 = t23126+1.0;
            double t23128 = 1.0/(t23127*t23127);
            double t23129 = a5*gamma_bb[index]*t23121*t23113*t23122;
            double t23130 = t23129+1.0;
            double t23141 = raa2*t23123;
            double t23131 = exp(-t23141);
            double t23132 = t23131-1.0;
            double t23133 = kaa2*t23132;
            double t23134 = pow(t23119,2.0/5.0);
            double t23142 = raa1*t23134;
            double t23135 = exp(-t23142);
            double t23136 = t23135-1.0;
            double t23137 = kaa1*t23136;
            double t23138 = -kaa0+t23133+t23137;
            double t23139 = 1.0/(t23138*t23138);
            double t23140 = c*c0*t23130*t23114*t23125*t23128*t23139*(2.0/3.0);
            double t23143 = exp(t23140);
            double t23144 = Ei(-t23140);
            double t23145 = 1.0/t23127;
            double t23146 = c*c0*t23130*t23114*t23125*t23139*(2.0/3.0);
            double t23147 = sqrt(t23146);
            double t23148 = t23115*t23116*t23117*t23118;
            double t23149 = pow(t23119,4.0/5.0);
            double t23199 = rab1*t23149;
            double t23150 = exp(-t23199);
            double t23151 = t23150-1.0;
            double t23200 = kab1*t23151;
            double t23152 = kab0-t23200;
            double t23153 = a3*gamma_bb[index]*t23121*t23113*t23122;
            double t23154 = t23153+1.0;
            double t23155 = 1.0/sqrt(t23154);
            double t23156 = 1.0/pow(rho_b[index],8.0/3.0);
            double t23157 = a1*gamma_bb[index]*t23113*t23156;
            double t23158 = t23148+t23157+1.0;
            double t23159 = c*c;
            double t23160 = 1.0/pow(rho_b[index],2.0/3.0);
            double t23161 = k1*t23123;
            double t23162 = c*k2*t23114;
            double t23163 = t23161+t23162;
            double t23164 = 1.0/(t23163*t23163);
            double t23204 = t23160*t23164*t23159;
            double t23165 = exp(-t23204);
            double t23166 = c*c0*t23130*t23114*t23125*t23143*t23144*t23128*t23139*(2.0/3.0);
            double t23167 = t23166+1.0;
            double t23168 = t23145*t23147*6.0;
            double t23169 = c*c0*t23130*t23114*t23125*t23128*t23139*4.0;
            double t23170 = t23168+t23169+3.0;
            double t23171 = 1.0/t23170;
            double t23172 = 1.0/pow(rho_b[index],4.0/3.0);
            double t23173 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t23174 = 1.0/sqrt(t23119);
            double t23175 = c*kaa2*raa2*t23131*t23172*t23174*(1.0/6.0);
            double t23176 = 1.0/pow(t23119,3.0/5.0);
            double t23177 = c*kaa1*raa1*t23135*t23172*t23176*(2.0/1.5E1);
            double t23178 = t23175+t23177;
            double t23179 = 1.0/(t23138*t23138*t23138);
            double t23180 = 1.0/pow(rho_b[index],2.0E1/3.0);
            double t23181 = 1.0/(t23127*t23127*t23127);
            double t23182 = t23145*t23147*4.0;
            double t23183 = c*c0*t23130*t23114*t23125*t23128*t23139*(8.0/3.0);
            double t23184 = t23182+t23183+6.0;
            double t23185 = c*c0*t23130*t23125*t23172*t23128*t23139*(2.0/9.0);
            double t23186 = a5*c0*gamma_bb[index]*t23113*t23125*t23128*t23173*t23139*(1.4E1/9.0);
            double t23187 = c*c0*t23130*t23114*t23125*t23128*t23178*t23179*(4.0/3.0);
            double t23188 = c*c0*t23120*t23130*t23116*t23125*t23180*t23118*t23128*t23139*(6.4E1/9.0);
            double t23190 = c*c0*t23120*t23130*t23116*t23125*t23180*t23118*t23181*t23139*(6.4E1/9.0);
            double t23189 = -t23190+t23185+t23186+t23187+t23188;
            double t23191 = c*c0*t23130*t23125*t23172*t23139*(2.0/9.0);
            double t23192 = a5*c0*gamma_bb[index]*t23113*t23125*t23173*t23139*(1.4E1/9.0);
            double t23193 = c*c0*t23130*t23114*t23125*t23178*t23179*(4.0/3.0);
            double t23194 = c*c0*t23120*t23130*t23116*t23125*t23180*t23118*t23139*(6.4E1/9.0);
            double t23195 = t23191+t23192+t23193+t23194;
            double t23196 = 1.0/sqrt(t23146);
            double t23197 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t23198 = exp(-t23148);
            double t23201 = t23152*t23155*t23158*t23198*1.0E5;
            double t23208 = c*c0*t23114*(2.0/3.0);
            double t23202 = t23201-t23208;
            double t23203 = ( (t23202 > 0.0) ?  1.0 : 0.0 ) ;
            double t23205 = t23143*t23144;
            double t23206 = t23171*t23184*t23167;
            double t23207 = t23205+t23206;
            v_rho_b_[index] = ( (c*c0*t23114*(-2.0/3.0)+t23152*t23155*t23158*exp(-t23115*t23116*t23117*t23118) \
               *1.0E5 > 0.0) ?  c0*t23207*t23165*1.0*(1.0/2.0) : 0.0 ) -c0*rho_b[index]*t23203*t23165*(t23171*t23167* \
               (t23145*t23195*t23196*2.0-t23120*t23116*t23118*t23128*t23147*t23197*(6.4E1/3.0)+c*c0*t23130*t23125* \
               t23172*t23128*t23139*(8.0/9.0)+a5*c0*gamma_bb[index]*t23113*t23125*t23128*t23173*t23139*(5.6E1/9.0) \
               +c*c0*t23130*t23114*t23125*t23128*t23178*t23179*(1.6E1/3.0)-c*c0*t23120*t23130*t23116*t23125*t23180* \
               t23118*t23181*t23139*(2.56E2/9.0)+c*c0*t23120*t23130*t23116*t23125*t23180*t23118*t23128*t23139*(2.56E2/ \
               9.0))+t23171*t23184*(-t23190+t23185+t23186+t23187+t23188+c*c0*t23130*t23125*t23143*t23144*t23172*t23128* \
               t23139*(2.0/9.0)+a5*c0*gamma_bb[index]*t23113*t23125*t23143*t23144*t23128*t23173*t23139*(1.4E1/9.0) \
               +c*c0*t23130*t23114*t23125*t23143*t23144*t23128*t23139*t23189*(2.0/3.0)+c*c0*t23130*t23114*t23125* \
               t23143*t23144*t23128*t23178*t23179*(4.0/3.0)-c*c0*t23120*t23130*t23116*t23125*t23143*t23144*t23180* \
               t23118*t23181*t23139*(6.4E1/9.0)+c*c0*t23120*t23130*t23116*t23125*t23143*t23144*t23180*t23118*t23128* \
               t23139*(6.4E1/9.0))+t23143*t23144*t23189-1.0/(t23170*t23170)*t23184*t23167*(t23145*t23195*t23196*3.0- \
               t23120*t23116*t23118*t23128*t23147*t23197*3.2E1+c*c0*t23130*t23125*t23172*t23128*t23139*(4.0/3.0)+ \
               a5*c0*gamma_bb[index]*t23113*t23125*t23128*t23173*t23139*(2.8E1/3.0)+c*c0*t23130*t23114*t23125*t23128* \
               t23178*t23179*8.0-c*c0*t23120*t23130*t23116*t23125*t23180*t23118*t23181*t23139*(1.28E2/3.0)+c*c0*t23120* \
               t23130*t23116*t23125*t23180*t23118*t23128*t23139*(1.28E2/3.0))+(pow(rho_b[index],1.0/3.0)*t23121*(t23127* \
               t23127)*(t23138*t23138)*t23189*exp(-t23124)*(3.0/2.0))/(c0*t23130))*(1.0/2.0)+c0*rho_b[index]*t23203* \
               t23207*t23165*(1.0/pow(rho_b[index],5.0/3.0)*t23164*t23159*(2.0/3.0)-t23160*1.0/(t23163*t23163*t23163) \
               *t23159*(c*k2*t23172*(1.0/3.0)+c*k1*t23172*t23174*(1.0/6.0))*2.0)*(1.0/2.0)+ 0.0 ;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t20913 = tspi_m13*tspi_m13;
                double t20914 = 1.0/pow(rho_a[index],1.0/3.0);
                double t20915 = a2*a2;
                double t20916 = gamma_aa[index]*gamma_aa[index];
                double t20917 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t20918 = t20913*t20913;
                double t20919 = t20915*t20916*t20917*t20918*2.0;
                double t20920 = exp(t20919);
                double t20921 = c*t20914;
                double t20922 = pow(t20921,4.0/5.0);
                double t20934 = rab1*t20922;
                double t20923 = exp(-t20934);
                double t20924 = t20923-1.0;
                double t20935 = kab1*t20924;
                double t20925 = kab0-t20935;
                double t20926 = 1.0/c;
                double t20927 = 1.0/pow(rho_a[index],7.0/3.0);
                double t20928 = a3*gamma_aa[index]*t20913*t20926*t20927;
                double t20929 = t20928+1.0;
                double t20930 = t20915*t20916*t20917*t20918;
                double t20931 = 1.0/pow(rho_a[index],8.0/3.0);
                double t20932 = a1*gamma_aa[index]*t20913*t20931;
                double t20933 = t20930+t20932+1.0;
                double t20936 = 1.0/(t20925*t20925);
                double t20937 = 1.0/(t20933*t20933);
                double t20938 = c*c0*t20920*t20914*t20936*t20937*t20929*(2.0/3.0);
                double t20939 = a1*t20913*t20931;
                double t20940 = gamma_aa[index]*t20915*t20917*t20918*2.0;
                double t20941 = t20940+t20939;
                double t20942 = 1.0/(t20933*t20933*t20933);
                double t20943 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t20944 = exp(t20938);
                double t20945 = Ei(-t20938);
                double t20946 = a3*c0*t20920*t20913*t20931*t20936*t20937*(2.0/3.0);
                double t20947 = c*c0*gamma_aa[index]*t20920*t20915*t20943*t20918*t20936*t20937*t20929*(8.0/3.0);
                double t20954 = c*c0*t20920*t20914*t20941*t20942*t20936*t20929*(4.0/3.0);
                double t20948 = -t20954+t20946+t20947;
                double t20949 = sqrt(t20938);
                double t20950 = t20949*6.0;
                double t20951 = c*c0*t20920*t20914*t20936*t20937*t20929*4.0;
                double t20952 = t20950+t20951+3.0;
                double t20953 = 1.0/t20952;
                double t20955 = c*c0*t20920*t20914*t20944*t20936*t20945*t20937*t20929*(2.0/3.0);
                double t20956 = t20955+1.0;
                double t20957 = t20949*4.0;
                double t20958 = c*c0*t20920*t20914*t20936*t20937*t20929*(8.0/3.0);
                double t20959 = t20957+t20958+6.0;
                double t20960 = 1.0/sqrt(t20938);
                double t20961 = 1.0/sqrt(t20929);
                double t20962 = exp(-t20930);
                double t20963 = c*c0*t20914*(2.0/3.0);
                double t20964 = a4*a4;
                double t20965 = sqrt(t20921);
                double t20966 = t20916*t20917*t20918*t20964*2.0;
                double t20967 = exp(t20966);
                double t20968 = t20916*t20917*t20918*t20964;
                double t20969 = t20968+1.0;
                double t20970 = 1.0/(t20969*t20969);
                double t20971 = a5*gamma_aa[index]*t20913*t20926*t20927;
                double t20972 = t20971+1.0;
                double t20983 = raa2*t20965;
                double t20973 = exp(-t20983);
                double t20974 = t20973-1.0;
                double t20975 = kaa2*t20974;
                double t20976 = pow(t20921,2.0/5.0);
                double t20984 = raa1*t20976;
                double t20977 = exp(-t20984);
                double t20978 = t20977-1.0;
                double t20979 = kaa1*t20978;
                double t20980 = -kaa0+t20975+t20979;
                double t20981 = 1.0/(t20980*t20980);
                double t20982 = c*c0*t20914*t20970*t20972*t20981*t20967*(2.0/3.0);
                double t20985 = exp(t20982);
                double t20986 = Ei(-t20982);
                double t20987 = 1.0/t20969;
                double t20988 = c*c0*t20914*t20972*t20981*t20967*(2.0/3.0);
                double t20989 = sqrt(t20988);
                double t20990 = 1.0/(t20969*t20969*t20969);
                double t20991 = t20987*t20989*6.0;
                double t20992 = c*c0*t20914*t20970*t20972*t20981*t20967*4.0;
                double t20993 = t20991+t20992+3.0;
                double t20994 = 1.0/t20993;
                double t20995 = a5*c0*t20913*t20931*t20970*t20981*t20967*(2.0/3.0);
                double t20996 = c*c0*gamma_aa[index]*t20943*t20970*t20918*t20972*t20981*t20964*t20967*(8.0/3.0);
                double t21009 = c*c0*gamma_aa[index]*t20943*t20918*t20972*t20981*t20990*t20964*t20967*(8.0/3.0);
                double t20997 = t20995+t20996-t21009;
                double t20998 = c*c0*t20914*t20970*t20972*t20981*t20967*t20985*t20986*(2.0/3.0);
                double t20999 = t20998+1.0;
                double t21000 = t20987*t20989*4.0;
                double t21001 = c*c0*t20914*t20970*t20972*t20981*t20967*(8.0/3.0);
                double t21002 = t21000+t21001+6.0;
                double t21003 = a5*c0*t20913*t20931*t20981*t20967*(2.0/3.0);
                double t21004 = c*c0*gamma_aa[index]*t20943*t20918*t20972*t20981*t20964*t20967*(8.0/3.0);
                double t21005 = t21003+t21004;
                double t21006 = 1.0/sqrt(t20988);
                double t21007 = 1.0/c0;
                double t21008 = pow(rho_a[index],1.0/3.0);
                double t21010 = t20933*t20925*t20961*t20962*1.0E5;
                double t21011 = c*c;
                double t21012 = 1.0/pow(rho_a[index],2.0/3.0);
                double t21013 = k1*t20965;
                double t21014 = c*k2*t20914;
                double t21015 = t21013+t21014;
                double t21016 = 1.0/(t21015*t21015);
                double t21017 = exp(-t21011*t21012*t21016);
                double t21018 = 1.0/pow(t20929,3.0/2.0);
                double t21019 = a3*t20913*t20933*t20925*t20926*t20962*t20927*t21018*5.0E4;
                double t21020 = gamma_aa[index]*t20915*t20933*t20925*t20961*t20917*t20962*t20918*2.0E5;
                double t21021 = t21020+t21019-t20941*t20925*t20961*t20962*1.0E5;
                v_gamma_aa_[index] = rho_b[index]*( ( (c*c0*t20914*(-2.0/3.0)+t20933*t20925*t20961*exp(-t20915*t20916* \
                   t20917*t20918)*1.0E5 > 0.0) ? c0*1.0*(t20944*t20945*t20948+t20953*t20959*(-t20954+t20946+t20947+a3* \
                   c0*t20920*t20913*t20931*t20944*t20936*t20945*t20937*(2.0/3.0)-c*c0*t20920*t20914*t20941*t20942*t20944* \
                   t20936*t20945*t20929*(4.0/3.0)+c*c0*t20920*t20914*t20944*t20936*t20945*t20937*t20929*t20948*(2.0/3.0) \
                   +c*c0*gamma_aa[index]*t20920*t20915*t20943*t20944*t20918*t20936*t20945*t20937*t20929*(8.0/3.0))+t20953* \
                   t20956*(t20960*t20948*2.0+a3*c0*t20920*t20913*t20931*t20936*t20937*(8.0/3.0)-c*c0*t20920*t20914*t20941* \
                   t20942*t20936*t20929*(1.6E1/3.0)+c*c0*gamma_aa[index]*t20920*t20915*t20943*t20918*t20936*t20937*t20929* \
                   (3.2E1/3.0))-1.0/(t20952*t20952)*t20956*t20959*(t20960*t20948*3.0+a3*c0*t20920*t20913*t20931*t20936* \
                   t20937*4.0-c*c0*t20920*t20914*t20941*t20942*t20936*t20929*8.0+c*c0*gamma_aa[index]*t20920*t20915*t20943* \
                   t20918*t20936*t20937*t20929*1.6E1)+((t20933*t20933)*(t20925*t20925)*t20926*t20948*t21007*t21008*exp(- \
                   t20919)*(3.0/2.0))/t20929)*(1.0/2.0) : 0.0 ) - 0.0 )+rho_a[index]*( ( (-t20963+t21010 > 0.0) ? c0* \
                   t21017*1.0*(t20994*t20999*(t20987*t21005*t21006*2.0-gamma_aa[index]*t20970*t20917*t20918*t20964*t20989* \
                   8.0+a5*c0*t20913*t20931*t20970*t20981*t20967*(8.0/3.0)+c*c0*gamma_aa[index]*t20943*t20970*t20918*t20972* \
                   t20981*t20964*t20967*(3.2E1/3.0)-c*c0*gamma_aa[index]*t20943*t20918*t20972*t20981*t20990*t20964*t20967* \
                   (3.2E1/3.0))+t20994*t21002*(t20995+t20996+a5*c0*t20913*t20931*t20970*t20981*t20967*t20985*t20986*(2.0/ \
                   3.0)-c*c0*gamma_aa[index]*t20943*t20918*t20972*t20981*t20990*t20964*t20967*(8.0/3.0)+c*c0*t20914*t20970* \
                   t20972*t20981*t20967*t20985*t20986*t20997*(2.0/3.0)+c*c0*gamma_aa[index]*t20943*t20970*t20918*t20972* \
                   t20981*t20964*t20967*t20985*t20986*(8.0/3.0)-c*c0*gamma_aa[index]*t20943*t20918*t20972*t20981*t20990* \
                   t20964*t20967*t20985*t20986*(8.0/3.0))+t20985*t20986*t20997-1.0/(t20993*t20993)*t20999*t21002*(t20987* \
                   t21005*t21006*3.0-gamma_aa[index]*t20970*t20917*t20918*t20964*t20989*1.2E1+a5*c0*t20913*t20931*t20970* \
                   t20981*t20967*4.0+c*c0*gamma_aa[index]*t20943*t20970*t20918*t20972*t20981*t20964*t20967*1.6E1-c*c0* \
                   gamma_aa[index]*t20943*t20918*t20972*t20981*t20990*t20964*t20967*1.6E1)+(t20926*(t20980*t20980)*(t20969* \
                   t20969)*t20997*t21007*t21008*exp(-t20966)*(3.0/2.0))/t20972)*(1.0/2.0) : 0.0 ) - 0.0 );
            } else if (rho_a[index] > cutoff_) {
                double t24007 = tspi_m13*tspi_m13;
                double t24008 = 1.0/pow(rho_a[index],1.0/3.0);
                double t24009 = a2*a2;
                double t24010 = gamma_aa[index]*gamma_aa[index];
                double t24011 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t24012 = t24007*t24007;
                double t24013 = c*t24008;
                double t24014 = a4*a4;
                double t24015 = 1.0/c;
                double t24016 = 1.0/pow(rho_a[index],7.0/3.0);
                double t24017 = sqrt(t24013);
                double t24018 = t24010*t24011*t24012*t24014*2.0;
                double t24019 = exp(t24018);
                double t24020 = t24010*t24011*t24012*t24014;
                double t24021 = t24020+1.0;
                double t24022 = 1.0/(t24021*t24021);
                double t24023 = a5*gamma_aa[index]*t24015*t24007*t24016;
                double t24024 = t24023+1.0;
                double t24036 = raa2*t24017;
                double t24025 = exp(-t24036);
                double t24026 = t24025-1.0;
                double t24027 = kaa2*t24026;
                double t24028 = pow(t24013,2.0/5.0);
                double t24037 = raa1*t24028;
                double t24029 = exp(-t24037);
                double t24030 = t24029-1.0;
                double t24031 = kaa1*t24030;
                double t24032 = -kaa0+t24031+t24027;
                double t24033 = 1.0/(t24032*t24032);
                double t24034 = c*c0*t24022*t24024*t24033*t24008*t24019*(2.0/3.0);
                double t24035 = 1.0/pow(rho_a[index],8.0/3.0);
                double t24038 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t24039 = exp(t24034);
                double t24040 = Ei(-t24034);
                double t24041 = 1.0/t24021;
                double t24042 = c*c0*t24024*t24033*t24008*t24019*(2.0/3.0);
                double t24043 = sqrt(t24042);
                double t24044 = 1.0/(t24021*t24021*t24021);
                double t24045 = t24041*t24043*6.0;
                double t24046 = c*c0*t24022*t24024*t24033*t24008*t24019*4.0;
                double t24047 = t24045+t24046+3.0;
                double t24048 = 1.0/t24047;
                double t24049 = a5*c0*t24022*t24033*t24007*t24035*t24019*(2.0/3.0);
                double t24050 = c*c0*gamma_aa[index]*t24012*t24022*t24014*t24024*t24033*t24019*t24038*(8.0/3.0);
                double t24061 = c*c0*gamma_aa[index]*t24012*t24014*t24024*t24033*t24044*t24019*t24038*(8.0/3.0);
                double t24051 = t24050-t24061+t24049;
                double t24052 = c*c0*t24022*t24040*t24024*t24033*t24008*t24019*t24039*(2.0/3.0);
                double t24053 = t24052+1.0;
                double t24054 = t24041*t24043*4.0;
                double t24055 = c*c0*t24022*t24024*t24033*t24008*t24019*(8.0/3.0);
                double t24056 = t24054+t24055+6.0;
                double t24057 = a5*c0*t24033*t24007*t24035*t24019*(2.0/3.0);
                double t24058 = c*c0*gamma_aa[index]*t24012*t24014*t24024*t24033*t24019*t24038*(8.0/3.0);
                double t24059 = t24057+t24058;
                double t24060 = 1.0/sqrt(t24042);
                double t24062 = t24010*t24011*t24012*t24009;
                double t24063 = pow(t24013,4.0/5.0);
                double t24080 = rab1*t24063;
                double t24064 = exp(-t24080);
                double t24065 = t24064-1.0;
                double t24081 = kab1*t24065;
                double t24066 = kab0-t24081;
                double t24067 = a3*gamma_aa[index]*t24015*t24007*t24016;
                double t24068 = t24067+1.0;
                double t24069 = 1.0/sqrt(t24068);
                double t24070 = a1*gamma_aa[index]*t24007*t24035;
                double t24071 = t24070+t24062+1.0;
                double t24072 = c*c;
                double t24073 = 1.0/pow(rho_a[index],2.0/3.0);
                double t24074 = k1*t24017;
                double t24075 = c*k2*t24008;
                double t24076 = t24074+t24075;
                double t24077 = 1.0/(t24076*t24076);
                double t24078 = exp(-t24072*t24073*t24077);
                double t24079 = exp(-t24062);
                v_gamma_aa_[index] = ( (c*c0*t24008*(-2.0/3.0)+t24071*t24066*t24069*exp(-t24010*t24011*t24012*t24009) \
                   *1.0E5 > 0.0) ?  c0*rho_a[index]*t24078*1.0*(t24053*t24048*(t24041*t24060*t24059*2.0-gamma_aa[index]* \
                   t24011*t24012*t24022*t24014*t24043*8.0+a5*c0*t24022*t24033*t24007*t24035*t24019*(8.0/3.0)+c*c0*gamma_aa[index]* \
                   t24012*t24022*t24014*t24024*t24033*t24019*t24038*(3.2E1/3.0)-c*c0*gamma_aa[index]*t24012*t24014*t24024* \
                   t24033*t24044*t24019*t24038*(3.2E1/3.0))+t24056*t24048*(t24050+t24049+a5*c0*t24022*t24040*t24033*t24007* \
                   t24035*t24019*t24039*(2.0/3.0)-c*c0*gamma_aa[index]*t24012*t24014*t24024*t24033*t24044*t24019*t24038* \
                   (8.0/3.0)+c*c0*t24022*t24040*t24024*t24033*t24051*t24008*t24019*t24039*(2.0/3.0)+c*c0*gamma_aa[index]* \
                   t24012*t24022*t24040*t24014*t24024*t24033*t24019*t24038*t24039*(8.0/3.0)-c*c0*gamma_aa[index]*t24012* \
                   t24040*t24014*t24024*t24033*t24044*t24019*t24038*t24039*(8.0/3.0))+t24040*t24051*t24039-t24053*1.0/ \
                   (t24047*t24047)*t24056*(t24041*t24060*t24059*3.0-gamma_aa[index]*t24011*t24012*t24022*t24014*t24043* \
                   1.2E1+a5*c0*t24022*t24033*t24007*t24035*t24019*4.0+c*c0*gamma_aa[index]*t24012*t24022*t24014*t24024* \
                   t24033*t24019*t24038*1.6E1-c*c0*gamma_aa[index]*t24012*t24014*t24024*t24033*t24044*t24019*t24038*1.6E1) \
                   +(pow(rho_a[index],1.0/3.0)*(t24021*t24021)*(t24032*t24032)*t24015*t24051*exp(-t24018)*(3.0/2.0))/ \
                   (c0*t24024))*(1.0/2.0) : 0.0 ) - 0.0 ;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t21024 = tspi_m13*tspi_m13;
                double t21025 = 1.0/pow(rho_b[index],1.0/3.0);
                double t21026 = a2*a2;
                double t21027 = gamma_bb[index]*gamma_bb[index];
                double t21028 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t21029 = t21024*t21024;
                double t21030 = t21026*t21027*t21028*t21029*2.0;
                double t21031 = exp(t21030);
                double t21032 = c*t21025;
                double t21033 = pow(t21032,4.0/5.0);
                double t21045 = rab1*t21033;
                double t21034 = exp(-t21045);
                double t21035 = t21034-1.0;
                double t21046 = kab1*t21035;
                double t21036 = kab0-t21046;
                double t21037 = 1.0/c;
                double t21038 = 1.0/pow(rho_b[index],7.0/3.0);
                double t21039 = a3*gamma_bb[index]*t21024*t21037*t21038;
                double t21040 = t21039+1.0;
                double t21041 = t21026*t21027*t21028*t21029;
                double t21042 = 1.0/pow(rho_b[index],8.0/3.0);
                double t21043 = a1*gamma_bb[index]*t21024*t21042;
                double t21044 = t21041+t21043+1.0;
                double t21047 = 1.0/(t21036*t21036);
                double t21048 = 1.0/(t21044*t21044);
                double t21049 = c*c0*t21031*t21040*t21025*t21047*t21048*(2.0/3.0);
                double t21050 = a1*t21024*t21042;
                double t21051 = gamma_bb[index]*t21026*t21028*t21029*2.0;
                double t21052 = t21050+t21051;
                double t21053 = 1.0/(t21044*t21044*t21044);
                double t21054 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t21055 = exp(t21049);
                double t21056 = Ei(-t21049);
                double t21057 = a3*c0*t21031*t21024*t21042*t21047*t21048*(2.0/3.0);
                double t21058 = c*c0*gamma_bb[index]*t21031*t21040*t21026*t21054*t21029*t21047*t21048*(8.0/3.0);
                double t21065 = c*c0*t21031*t21040*t21025*t21052*t21053*t21047*(4.0/3.0);
                double t21059 = -t21065+t21057+t21058;
                double t21060 = sqrt(t21049);
                double t21061 = t21060*6.0;
                double t21062 = c*c0*t21031*t21040*t21025*t21047*t21048*4.0;
                double t21063 = t21061+t21062+3.0;
                double t21064 = 1.0/t21063;
                double t21066 = c*c0*t21031*t21040*t21025*t21055*t21047*t21056*t21048*(2.0/3.0);
                double t21067 = t21066+1.0;
                double t21068 = t21060*4.0;
                double t21069 = c*c0*t21031*t21040*t21025*t21047*t21048*(8.0/3.0);
                double t21070 = t21068+t21069+6.0;
                double t21071 = 1.0/sqrt(t21049);
                double t21072 = 1.0/sqrt(t21040);
                double t21073 = exp(-t21041);
                double t21074 = c*c0*t21025*(2.0/3.0);
                double t21075 = a4*a4;
                double t21076 = sqrt(t21032);
                double t21077 = t21027*t21028*t21029*t21075*2.0;
                double t21078 = exp(t21077);
                double t21079 = t21027*t21028*t21029*t21075;
                double t21080 = t21079+1.0;
                double t21081 = 1.0/(t21080*t21080);
                double t21082 = a5*gamma_bb[index]*t21024*t21037*t21038;
                double t21083 = t21082+1.0;
                double t21094 = raa2*t21076;
                double t21084 = exp(-t21094);
                double t21085 = t21084-1.0;
                double t21086 = kaa2*t21085;
                double t21087 = pow(t21032,2.0/5.0);
                double t21095 = raa1*t21087;
                double t21088 = exp(-t21095);
                double t21089 = t21088-1.0;
                double t21090 = kaa1*t21089;
                double t21091 = -kaa0+t21090+t21086;
                double t21092 = 1.0/(t21091*t21091);
                double t21093 = c*c0*t21025*t21081*t21083*t21092*t21078*(2.0/3.0);
                double t21096 = exp(t21093);
                double t21097 = Ei(-t21093);
                double t21098 = 1.0/t21080;
                double t21099 = c*c0*t21025*t21083*t21092*t21078*(2.0/3.0);
                double t21100 = sqrt(t21099);
                double t21101 = 1.0/(t21080*t21080*t21080);
                double t21102 = t21100*t21098*6.0;
                double t21103 = c*c0*t21025*t21081*t21083*t21092*t21078*4.0;
                double t21104 = t21102+t21103+3.0;
                double t21105 = 1.0/t21104;
                double t21106 = a5*c0*t21024*t21042*t21081*t21092*t21078*(2.0/3.0);
                double t21107 = c*c0*gamma_bb[index]*t21054*t21081*t21029*t21083*t21092*t21075*t21078*(8.0/3.0);
                double t21120 = c*c0*gamma_bb[index]*t21101*t21054*t21029*t21083*t21092*t21075*t21078*(8.0/3.0);
                double t21108 = -t21120+t21106+t21107;
                double t21109 = c*c0*t21025*t21081*t21083*t21092*t21078*t21096*t21097*(2.0/3.0);
                double t21110 = t21109+1.0;
                double t21111 = t21100*t21098*4.0;
                double t21112 = c*c0*t21025*t21081*t21083*t21092*t21078*(8.0/3.0);
                double t21113 = t21111+t21112+6.0;
                double t21114 = a5*c0*t21024*t21042*t21092*t21078*(2.0/3.0);
                double t21115 = c*c0*gamma_bb[index]*t21054*t21029*t21083*t21092*t21075*t21078*(8.0/3.0);
                double t21116 = t21114+t21115;
                double t21117 = 1.0/sqrt(t21099);
                double t21118 = 1.0/c0;
                double t21119 = pow(rho_b[index],1.0/3.0);
                double t21121 = t21044*t21036*t21072*t21073*1.0E5;
                double t21122 = c*c;
                double t21123 = 1.0/pow(rho_b[index],2.0/3.0);
                double t21124 = k1*t21076;
                double t21125 = c*k2*t21025;
                double t21126 = t21124+t21125;
                double t21127 = 1.0/(t21126*t21126);
                double t21128 = exp(-t21122*t21123*t21127);
                double t21129 = 1.0/pow(t21040,3.0/2.0);
                double t21130 = a3*t21024*t21044*t21036*t21037*t21073*t21038*t21129*5.0E4;
                double t21131 = gamma_bb[index]*t21026*t21044*t21036*t21072*t21028*t21073*t21029*2.0E5;
                double t21132 = t21130+t21131-t21052*t21036*t21072*t21073*1.0E5;
                v_gamma_bb_[index] = rho_a[index]*( ( (c*c0*t21025*(-2.0/3.0)+t21044*t21036*t21072*exp(-t21026*t21027* \
                   t21028*t21029)*1.0E5 > 0.0) ? c0*1.0*(t21055*t21056*t21059+t21070*t21064*(-t21065+t21057+t21058+a3* \
                   c0*t21031*t21024*t21042*t21055*t21047*t21056*t21048*(2.0/3.0)-c*c0*t21031*t21040*t21025*t21052*t21053* \
                   t21055*t21047*t21056*(4.0/3.0)+c*c0*t21031*t21040*t21025*t21055*t21047*t21056*t21048*t21059*(2.0/3.0) \
                   +c*c0*gamma_bb[index]*t21031*t21040*t21026*t21054*t21055*t21029*t21047*t21056*t21048*(8.0/3.0))+t21064* \
                   t21067*(t21071*t21059*2.0+a3*c0*t21031*t21024*t21042*t21047*t21048*(8.0/3.0)-c*c0*t21031*t21040*t21025* \
                   t21052*t21053*t21047*(1.6E1/3.0)+c*c0*gamma_bb[index]*t21031*t21040*t21026*t21054*t21029*t21047*t21048* \
                   (3.2E1/3.0))-t21070*1.0/(t21063*t21063)*t21067*(t21071*t21059*3.0+a3*c0*t21031*t21024*t21042*t21047* \
                   t21048*4.0-c*c0*t21031*t21040*t21025*t21052*t21053*t21047*8.0+c*c0*gamma_bb[index]*t21031*t21040*t21026* \
                   t21054*t21029*t21047*t21048*1.6E1)+((t21044*t21044)*(t21036*t21036)*t21037*t21118*t21119*t21059*exp(- \
                   t21030)*(3.0/2.0))/t21040)*(1.0/2.0) : 0.0 ) - 0.0 )+rho_b[index]*( ( (t21121-t21074 > 0.0) ? c0*t21128* \
                   1.0*(t21110*t21105*(t21116*t21117*t21098*2.0-gamma_bb[index]*t21100*t21081*t21028*t21029*t21075*8.0+ \
                   a5*c0*t21024*t21042*t21081*t21092*t21078*(8.0/3.0)-c*c0*gamma_bb[index]*t21101*t21054*t21029*t21083* \
                   t21092*t21075*t21078*(3.2E1/3.0)+c*c0*gamma_bb[index]*t21054*t21081*t21029*t21083*t21092*t21075*t21078* \
                   (3.2E1/3.0))+t21113*t21105*(t21106+t21107+a5*c0*t21024*t21042*t21081*t21092*t21078*t21096*t21097*(2.0/ \
                   3.0)-c*c0*gamma_bb[index]*t21101*t21054*t21029*t21083*t21092*t21075*t21078*(8.0/3.0)+c*c0*t21025*t21081* \
                   t21108*t21083*t21092*t21078*t21096*t21097*(2.0/3.0)-c*c0*gamma_bb[index]*t21101*t21054*t21029*t21083* \
                   t21092*t21075*t21078*t21096*t21097*(8.0/3.0)+c*c0*gamma_bb[index]*t21054*t21081*t21029*t21083*t21092* \
                   t21075*t21078*t21096*t21097*(8.0/3.0))+t21108*t21096*t21097-t21110*1.0/(t21104*t21104)*t21113*(t21116* \
                   t21117*t21098*3.0-gamma_bb[index]*t21100*t21081*t21028*t21029*t21075*1.2E1+a5*c0*t21024*t21042*t21081* \
                   t21092*t21078*4.0-c*c0*gamma_bb[index]*t21101*t21054*t21029*t21083*t21092*t21075*t21078*1.6E1+c*c0* \
                   gamma_bb[index]*t21054*t21081*t21029*t21083*t21092*t21075*t21078*1.6E1)+((t21080*t21080)*t21108*t21037* \
                   (t21091*t21091)*t21118*t21119*exp(-t21077)*(3.0/2.0))/t21083)*(1.0/2.0) : 0.0 ) - 0.0 );
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t23212 = tspi_m13*tspi_m13;
                double t23213 = 1.0/pow(rho_b[index],1.0/3.0);
                double t23214 = a2*a2;
                double t23215 = gamma_bb[index]*gamma_bb[index];
                double t23216 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t23217 = t23212*t23212;
                double t23218 = c*t23213;
                double t23219 = a4*a4;
                double t23220 = 1.0/c;
                double t23221 = 1.0/pow(rho_b[index],7.0/3.0);
                double t23222 = sqrt(t23218);
                double t23223 = t23215*t23216*t23217*t23219*2.0;
                double t23224 = exp(t23223);
                double t23225 = t23215*t23216*t23217*t23219;
                double t23226 = t23225+1.0;
                double t23227 = 1.0/(t23226*t23226);
                double t23228 = a5*gamma_bb[index]*t23220*t23212*t23221;
                double t23229 = t23228+1.0;
                double t23241 = raa2*t23222;
                double t23230 = exp(-t23241);
                double t23231 = t23230-1.0;
                double t23232 = kaa2*t23231;
                double t23233 = pow(t23218,2.0/5.0);
                double t23242 = raa1*t23233;
                double t23234 = exp(-t23242);
                double t23235 = t23234-1.0;
                double t23236 = kaa1*t23235;
                double t23237 = -kaa0+t23232+t23236;
                double t23238 = 1.0/(t23237*t23237);
                double t23239 = c*c0*t23213*t23224*t23227*t23229*t23238*(2.0/3.0);
                double t23240 = 1.0/pow(rho_b[index],8.0/3.0);
                double t23243 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t23244 = exp(t23239);
                double t23245 = Ei(-t23239);
                double t23246 = 1.0/t23226;
                double t23247 = c*c0*t23213*t23224*t23229*t23238*(2.0/3.0);
                double t23248 = sqrt(t23247);
                double t23249 = 1.0/(t23226*t23226*t23226);
                double t23250 = t23246*t23248*6.0;
                double t23251 = c*c0*t23213*t23224*t23227*t23229*t23238*4.0;
                double t23252 = t23250+t23251+3.0;
                double t23253 = 1.0/t23252;
                double t23254 = a5*c0*t23212*t23240*t23224*t23227*t23238*(2.0/3.0);
                double t23255 = c*c0*gamma_bb[index]*t23224*t23243*t23217*t23227*t23219*t23229*t23238*(8.0/3.0);
                double t23266 = c*c0*gamma_bb[index]*t23224*t23243*t23217*t23219*t23229*t23238*t23249*(8.0/3.0);
                double t23256 = t23254+t23255-t23266;
                double t23257 = c*c0*t23213*t23224*t23244*t23227*t23245*t23229*t23238*(2.0/3.0);
                double t23258 = t23257+1.0;
                double t23259 = t23246*t23248*4.0;
                double t23260 = c*c0*t23213*t23224*t23227*t23229*t23238*(8.0/3.0);
                double t23261 = t23260+t23259+6.0;
                double t23262 = a5*c0*t23212*t23240*t23224*t23238*(2.0/3.0);
                double t23263 = c*c0*gamma_bb[index]*t23224*t23243*t23217*t23219*t23229*t23238*(8.0/3.0);
                double t23264 = t23262+t23263;
                double t23265 = 1.0/sqrt(t23247);
                double t23267 = t23214*t23215*t23216*t23217;
                double t23268 = pow(t23218,4.0/5.0);
                double t23285 = rab1*t23268;
                double t23269 = exp(-t23285);
                double t23270 = t23269-1.0;
                double t23286 = kab1*t23270;
                double t23271 = kab0-t23286;
                double t23272 = a3*gamma_bb[index]*t23220*t23212*t23221;
                double t23273 = t23272+1.0;
                double t23274 = 1.0/sqrt(t23273);
                double t23275 = a1*gamma_bb[index]*t23212*t23240;
                double t23276 = t23275+t23267+1.0;
                double t23277 = c*c;
                double t23278 = 1.0/pow(rho_b[index],2.0/3.0);
                double t23279 = k1*t23222;
                double t23280 = c*k2*t23213;
                double t23281 = t23280+t23279;
                double t23282 = 1.0/(t23281*t23281);
                double t23283 = exp(-t23282*t23277*t23278);
                double t23284 = exp(-t23267);
                v_gamma_bb_[index] = ( (c*c0*t23213*(-2.0/3.0)+t23271*t23274*t23276*exp(-t23214*t23215*t23216*t23217) \
                   *1.0E5 > 0.0) ?  c0*rho_b[index]*t23283*1.0*(t23253*t23258*(t23246*t23264*t23265*2.0-gamma_bb[index]* \
                   t23216*t23217*t23227*t23219*t23248*8.0+a5*c0*t23212*t23240*t23224*t23227*t23238*(8.0/3.0)+c*c0*gamma_bb[index]* \
                   t23224*t23243*t23217*t23227*t23219*t23229*t23238*(3.2E1/3.0)-c*c0*gamma_bb[index]*t23224*t23243*t23217* \
                   t23219*t23229*t23238*t23249*(3.2E1/3.0))+t23261*t23253*(t23254+t23255+a5*c0*t23212*t23240*t23224*t23244* \
                   t23227*t23245*t23238*(2.0/3.0)-c*c0*gamma_bb[index]*t23224*t23243*t23217*t23219*t23229*t23238*t23249* \
                   (8.0/3.0)+c*c0*t23213*t23224*t23244*t23227*t23245*t23229*t23238*t23256*(2.0/3.0)+c*c0*gamma_bb[index]* \
                   t23224*t23243*t23217*t23244*t23227*t23245*t23219*t23229*t23238*(8.0/3.0)-c*c0*gamma_bb[index]*t23224* \
                   t23243*t23217*t23244*t23245*t23219*t23229*t23238*t23249*(8.0/3.0))+t23244*t23245*t23256-1.0/(t23252* \
                   t23252)*t23261*t23258*(t23246*t23264*t23265*3.0-gamma_bb[index]*t23216*t23217*t23227*t23219*t23248* \
                   1.2E1+a5*c0*t23212*t23240*t23224*t23227*t23238*4.0+c*c0*gamma_bb[index]*t23224*t23243*t23217*t23227* \
                   t23219*t23229*t23238*1.6E1-c*c0*gamma_bb[index]*t23224*t23243*t23217*t23219*t23229*t23238*t23249*1.6E1) \
                   +(pow(rho_b[index],1.0/3.0)*t23220*(t23226*t23226)*(t23237*t23237)*t23256*exp(-t23223)*(3.0/2.0))/ \
                   (c0*t23229))*(1.0/2.0) : 0.0 ) - 0.0 ;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t21136 = tspi_m13*tspi_m13;
            double t21137 = 1.0/pow(rho_a[index],1.0/3.0);
            double t21138 = a2*a2;
            double t21139 = gamma_aa[index]*gamma_aa[index];
            double t21140 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t21141 = t21136*t21136;
            double t21142 = c*t21137;
            double t21143 = a4*a4;
            double t21144 = 1.0/c;
            double t21145 = 1.0/pow(rho_a[index],7.0/3.0);
            double t21146 = sqrt(t21142);
            double t21147 = t21140*t21141*t21143*t21139*2.0;
            double t21148 = exp(t21147);
            double t21149 = t21140*t21141*t21143*t21139;
            double t21150 = t21149+1.0;
            double t21151 = a5*gamma_aa[index]*t21144*t21136*t21145;
            double t21152 = t21151+1.0;
            double t21163 = raa2*t21146;
            double t21153 = exp(-t21163);
            double t21154 = t21153-1.0;
            double t21155 = kaa2*t21154;
            double t21156 = pow(t21142,2.0/5.0);
            double t21164 = raa1*t21156;
            double t21157 = exp(-t21164);
            double t21158 = t21157-1.0;
            double t21159 = kaa1*t21158;
            double t21160 = -kaa0+t21155+t21159;
            double t21161 = 1.0/(t21160*t21160);
            double t21162 = 1.0/t21150;
            double t21165 = 1.0/pow(rho_a[index],4.0/3.0);
            double t21166 = c*c0*t21152*t21161*t21137*t21148*(2.0/3.0);
            double t21167 = 1.0/(t21150*t21150);
            double t21168 = sqrt(t21166);
            double t21169 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t21170 = 1.0/sqrt(t21142);
            double t21171 = c*kaa2*raa2*t21170*t21153*t21165*(1.0/6.0);
            double t21172 = 1.0/pow(t21142,3.0/5.0);
            double t21173 = c*kaa1*raa1*t21172*t21165*t21157*(2.0/1.5E1);
            double t21174 = t21171+t21173;
            double t21175 = 1.0/(t21160*t21160*t21160);
            double t21176 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t21177 = c*c0*t21152*t21161*t21137*t21148*t21167*(2.0/3.0);
            double t21178 = exp(t21177);
            double t21179 = Ei(-t21177);
            double t21180 = c*c0*t21152*t21161*t21165*t21148*t21167*(2.0/9.0);
            double t21181 = a5*c0*gamma_aa[index]*t21161*t21136*t21148*t21167*t21169*(1.4E1/9.0);
            double t21182 = c*c0*t21152*t21137*t21174*t21148*t21175*t21167*(4.0/3.0);
            double t21183 = 1.0/(t21150*t21150*t21150);
            double t21184 = c*c0*t21141*t21143*t21152*t21161*t21139*t21148*t21167*t21176*(6.4E1/9.0);
            double t21185 = t21162*t21168*6.0;
            double t21186 = c*c0*t21152*t21161*t21137*t21148*t21167*4.0;
            double t21187 = t21185+t21186+3.0;
            double t21188 = 1.0/t21187;
            double t21189 = 1.0/sqrt(t21166);
            double t21190 = c*c;
            double t21191 = 1.0/pow(rho_a[index],8.0/3.0);
            double t21192 = c*c0*t21152*t21161*t21165*t21148*(2.0/9.0);
            double t21193 = a5*c0*gamma_aa[index]*t21161*t21136*t21148*t21169*(1.4E1/9.0);
            double t21194 = c*c0*t21152*t21137*t21174*t21148*t21175*(4.0/3.0);
            double t21195 = c*c0*t21141*t21143*t21152*t21161*t21139*t21148*t21176*(6.4E1/9.0);
            double t21196 = t21192+t21193+t21194+t21195;
            double t21197 = t21143*t21143;
            double t21198 = t21139*t21139;
            double t21199 = t21141*t21141;
            double t21200 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t21201 = raa2*raa2;
            double t21202 = c*kaa2*t21201*t21153*t21145*(1.0/3.6E1);
            double t21203 = raa1*raa1;
            double t21204 = 1.0/pow(t21142,6.0/5.0);
            double t21205 = kaa1*t21203*t21204*t21190*t21191*t21157*(4.0/2.25E2);
            double t21206 = 1.0/pow(t21142,3.0/2.0);
            double t21207 = kaa2*raa2*t21206*t21153*t21190*t21191*(1.0/3.6E1);
            double t21208 = 1.0/pow(t21142,8.0/5.0);
            double t21209 = kaa1*raa1*t21190*t21208*t21191*t21157*(2.0/7.5E1);
            double t21219 = c*kaa2*raa2*t21170*t21153*t21145*(2.0/9.0);
            double t21220 = c*kaa1*raa1*t21145*t21172*t21157*(8.0/4.5E1);
            double t21210 = t21202-t21220+t21205+t21207+t21209-t21219;
            double t21211 = t21174*t21174;
            double t21212 = 1.0/(t21160*t21160*t21160*t21160);
            double t21213 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t21214 = 1.0/pow(rho_a[index],1.0E1);
            double t21215 = 1.0/pow(rho_a[index],1.3E1);
            double t21216 = 1.0/pow(rho_a[index],2.3E1/3.0);
            double t21218 = c*c0*t21141*t21143*t21152*t21161*t21183*t21139*t21148*t21176*(6.4E1/9.0);
            double t21217 = t21180+t21181+t21182-t21218+t21184;
            double t21221 = t21217*t21217;
            double t21222 = 1.0/(t21150*t21150*t21150*t21150);
            double t21223 = c*c0*t21152*t21161*t21145*t21148*t21167*(8.0/2.7E1);
            double t21224 = c*c0*t21211*t21212*t21152*t21137*t21148*t21167*4.0;
            double t21225 = a5*c0*gamma_aa[index]*t21213*t21161*t21136*t21148*t21167*(5.6E1/9.0);
            double t21226 = c*c0*t21152*t21165*t21174*t21148*t21175*t21167*(8.0/9.0);
            double t21227 = a5*c0*gamma_aa[index]*t21136*t21174*t21148*t21175*t21167*t21169*(5.6E1/9.0);
            double t21228 = a5*c0*gamma_aa[index]*t21141*t21214*t21143*t21161*t21136*t21139*t21148*t21167*(8.96E2/ \
               2.7E1);
            double t21229 = c*c0*t21152*t21161*t21215*t21148*t21167*t21197*t21198*t21199*(2.048E3/2.7E1);
            double t21230 = c*c0*t21222*t21152*t21161*t21215*t21148*t21197*t21198*t21199*(1.024E3/9.0);
            double t21231 = c*c0*t21141*t21143*t21152*t21161*t21216*t21139*t21148*t21167*(4.48E2/9.0);
            double t21232 = c*c0*t21141*t21143*t21152*t21174*t21139*t21148*t21175*t21167*t21176*(2.56E2/9.0);
            double t21280 = c*c0*t21210*t21152*t21137*t21148*t21175*t21167*(4.0/3.0);
            double t21281 = a5*c0*gamma_aa[index]*t21141*t21214*t21143*t21161*t21136*t21183*t21139*t21148*(8.96E2/ \
               2.7E1);
            double t21282 = c*c0*t21152*t21161*t21215*t21183*t21148*t21197*t21198*t21199*(4.096E3/2.7E1);
            double t21283 = c*c0*t21141*t21143*t21152*t21161*t21216*t21183*t21139*t21148*(4.48E2/9.0);
            double t21284 = c*c0*t21141*t21143*t21152*t21174*t21183*t21139*t21148*t21175*t21176*(2.56E2/9.0);
            double t21233 = t21230+t21231+t21223+t21232+t21224+t21225+t21226-t21280+t21227-t21281+t21228-t21282+ \
               t21229-t21283-t21284;
            double t21234 = c*c0*t21152*t21161*t21137*t21148*t21167*t21178*t21179*(2.0/3.0);
            double t21235 = t21234+1.0;
            double t21236 = t21162*t21196*t21189*2.0;
            double t21237 = c*c0*t21152*t21161*t21165*t21148*t21167*(8.0/9.0);
            double t21238 = a5*c0*gamma_aa[index]*t21161*t21136*t21148*t21167*t21169*(5.6E1/9.0);
            double t21239 = c*c0*t21152*t21137*t21174*t21148*t21175*t21167*(1.6E1/3.0);
            double t21240 = c*c0*t21141*t21143*t21152*t21161*t21139*t21148*t21167*t21176*(2.56E2/9.0);
            double t21302 = t21200*t21141*t21143*t21139*t21167*t21168*(6.4E1/3.0);
            double t21303 = c*c0*t21141*t21143*t21152*t21161*t21183*t21139*t21148*t21176*(2.56E2/9.0);
            double t21241 = -t21302+t21240-t21303+t21236+t21237+t21238+t21239;
            double t21242 = 1.0/(t21187*t21187);
            double t21243 = t21162*t21168*4.0;
            double t21244 = c*c0*t21152*t21161*t21137*t21148*t21167*(8.0/3.0);
            double t21245 = t21243+t21244+6.0;
            double t21246 = t21162*t21196*t21189*3.0;
            double t21247 = c*c0*t21152*t21161*t21165*t21148*t21167*(4.0/3.0);
            double t21248 = a5*c0*gamma_aa[index]*t21161*t21136*t21148*t21167*t21169*(2.8E1/3.0);
            double t21249 = c*c0*t21152*t21137*t21174*t21148*t21175*t21167*8.0;
            double t21250 = c*c0*t21141*t21143*t21152*t21161*t21139*t21148*t21167*t21176*(1.28E2/3.0);
            double t21271 = t21200*t21141*t21143*t21139*t21167*t21168*3.2E1;
            double t21272 = c*c0*t21141*t21143*t21152*t21161*t21183*t21139*t21148*t21176*(1.28E2/3.0);
            double t21251 = t21250-t21271-t21272+t21246+t21247+t21248+t21249;
            double t21252 = c*c0*t21152*t21161*t21165*t21148*t21167*t21178*t21179*(2.0/9.0);
            double t21253 = c*c0*t21152*t21137*t21174*t21148*t21175*t21167*t21178*t21179*(4.0/3.0);
            double t21254 = c*c0*t21152*t21161*t21217*t21137*t21148*t21167*t21178*t21179*(2.0/3.0);
            double t21255 = a5*c0*gamma_aa[index]*t21161*t21136*t21148*t21167*t21169*t21178*t21179*(1.4E1/9.0) \
               ;
            double t21256 = c*c0*t21141*t21143*t21152*t21161*t21139*t21148*t21167*t21176*t21178*t21179*(6.4E1/ \
               9.0);
            double t21257 = c*c0*t21152*t21161*t21145*t21148*(8.0/2.7E1);
            double t21258 = a5*c0*gamma_aa[index]*t21213*t21161*t21136*t21148*(5.6E1/9.0);
            double t21259 = c*c0*t21152*t21165*t21174*t21148*t21175*(8.0/9.0);
            double t21260 = c*c0*t21211*t21212*t21152*t21137*t21148*4.0;
            double t21261 = a5*c0*gamma_aa[index]*t21141*t21214*t21143*t21161*t21136*t21139*t21148*(8.96E2/2.7E1) \
               ;
            double t21262 = a5*c0*gamma_aa[index]*t21136*t21174*t21148*t21175*t21169*(5.6E1/9.0);
            double t21263 = c*c0*t21152*t21161*t21215*t21148*t21197*t21198*t21199*(2.048E3/2.7E1);
            double t21264 = c*c0*t21141*t21143*t21152*t21161*t21216*t21139*t21148*(4.48E2/9.0);
            double t21265 = c*c0*t21141*t21143*t21152*t21174*t21139*t21148*t21175*t21176*(2.56E2/9.0);
            double t21266 = t21260+t21261+t21262+t21263+t21264+t21265+t21257+t21258+t21259-c*c0*t21210*t21152* \
               t21137*t21148*t21175*(4.0/3.0);
            double t21267 = t21196*t21196;
            double t21268 = 1.0/pow(t21166,3.0/2.0);
            double t21269 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t21270 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t21273 = 1.0/pow(rho_a[index],2.0/3.0);
            double t21274 = 1.0/t21152;
            double t21275 = 1.0/c0;
            double t21276 = exp(-t21147);
            double t21277 = t21150*t21150;
            double t21278 = t21160*t21160;
            double t21279 = pow(rho_a[index],1.0/3.0);
            double t21285 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            double t21304 = c*c0*t21141*t21143*t21152*t21161*t21183*t21139*t21148*t21176*t21178*t21179*(6.4E1/ \
               9.0);
            double t21286 = -t21304+t21180+t21252+t21181+t21253+t21182-t21218+t21254+t21255+t21184+t21256;
            double t21287 = t21140*t21141*t21138*t21139;
            double t21288 = pow(t21142,4.0/5.0);
            double t21306 = rab1*t21288;
            double t21289 = exp(-t21306);
            double t21290 = t21289-1.0;
            double t21307 = kab1*t21290;
            double t21291 = kab0-t21307;
            double t21292 = a3*gamma_aa[index]*t21144*t21136*t21145;
            double t21293 = t21292+1.0;
            double t21294 = 1.0/sqrt(t21293);
            double t21295 = a1*gamma_aa[index]*t21136*t21191;
            double t21296 = t21295+t21287+1.0;
            double t21297 = k1*t21146;
            double t21298 = c*k2*t21137;
            double t21299 = t21297+t21298;
            double t21300 = 1.0/(t21299*t21299);
            double t21309 = t21300*t21190*t21273;
            double t21301 = exp(-t21309);
            double t21305 = exp(-t21287);
            double t21308 = t21305*t21291*t21294*t21296*1.0E5;
            double t21310 = t21241*t21235*t21188;
            double t21311 = t21217*t21178*t21179;
            double t21312 = t21245*t21286*t21188;
            double t21313 = t21144*t21217*t21274*t21275*t21276*t21277*t21278*t21279*(3.0/2.0);
            double t21451 = t21242*t21251*t21235*t21245;
            double t21314 = t21310+t21311+t21312+t21313-t21451;
            double t21315 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t21316 = c*c0*t21137*(2.0/3.0);
            double t21317 = 1.0/(t21299*t21299*t21299);
            double t21318 = c*k2*t21165*(1.0/3.0);
            double t21319 = c*k1*t21170*t21165*(1.0/6.0);
            double t21320 = t21318+t21319;
            double t21321 = 1.0/pow(rho_a[index],5.0/3.0);
            double t21322 = -t21316+t21308;
            double t21323 = ( (t21322 > 0.0) ?  1.0 : 0.0 ) ;
            double t21324 = t21178*t21179;
            double t21325 = t21235*t21245*t21188;
            double t21326 = t21324+t21325;
            double t21327 = t21300*t21321*t21190*(2.0/3.0);
            double t21341 = t21320*t21190*t21317*t21273*2.0;
            double t21328 = -t21341+t21327;
            double t21329 = t21316-t21308;
            double t21330 = c*c0*t21165*(2.0/9.0);
            double t21331 = t21200*t21141*t21138*t21139*(1.6E1/3.0);
            double t21332 = a1*gamma_aa[index]*t21136*t21169*(8.0/3.0);
            double t21333 = t21331+t21332;
            double t21334 = t21200*t21141*t21305*t21138*t21291*t21139*t21294*t21296*(1.6E6/3.0);
            double t21335 = 1.0/pow(t21142,1.0/5.0);
            double t21336 = 1.0/pow(t21293,3.0/2.0);
            double t21337 = a3*gamma_aa[index]*t21305*t21144*t21315*t21136*t21291*t21336*t21296*(3.5E5/3.0);
            double t21342 = t21305*t21333*t21291*t21294*1.0E5;
            double t21343 = c*kab1*rab1*t21305*t21335*t21165*t21294*t21296*t21289*(8.0E4/3.0);
            double t21338 = t21330-t21342+t21334-t21343+t21337;
            double t21339 = 0.0 ;
            double t21340 = 1.0/(c*c);
            double t21344 = t21140*t21141*t21138*t21139*2.0;
            double t21345 = exp(t21344);
            double t21346 = 1.0/(t21291*t21291);
            double t21347 = 1.0/(t21296*t21296);
            double t21348 = c*c0*t21137*t21345*t21346*t21293*t21347*(2.0/3.0);
            double t21349 = sqrt(t21348);
            double t21350 = 1.0/rho_a[index];
            double t21351 = c*c0*t21165*t21345*t21346*t21293*t21347*(2.0/9.0);
            double t21352 = 1.0/(t21296*t21296*t21296);
            double t21353 = a3*c0*gamma_aa[index]*t21136*t21345*t21346*t21347*t21169*(1.4E1/9.0);
            double t21354 = c*c0*t21141*t21138*t21345*t21139*t21346*t21176*t21293*t21347*(6.4E1/9.0);
            double t21355 = 1.0/(t21291*t21291*t21291);
            double t21357 = c*c0*t21333*t21352*t21137*t21345*t21346*t21293*(4.0/3.0);
            double t21358 = c0*kab1*rab1*t21321*t21190*t21335*t21345*t21355*t21293*t21347*t21289*(1.6E1/4.5E1) \
               ;
            double t21356 = t21351+t21353+t21354-t21357-t21358;
            double t21359 = t21141*t21138*t21139*t21269*(3.04E2/9.0);
            double t21360 = a1*gamma_aa[index]*t21213*t21136*(8.8E1/9.0);
            double t21361 = t21360+t21359;
            double t21362 = exp(t21348);
            double t21363 = Ei(-t21348);
            double t21364 = c*c0*t21145*t21345*t21346*t21293*t21347*(8.0/2.7E1);
            double t21365 = t21333*t21333;
            double t21366 = 1.0/(t21296*t21296*t21296*t21296);
            double t21367 = c*c0*t21137*t21345*t21346*t21293*t21365*t21366*4.0;
            double t21368 = a3*c0*gamma_aa[index]*t21213*t21136*t21345*t21346*t21347*(5.6E1/9.0);
            double t21369 = a3*c0*gamma_aa[index]*t21141*t21214*t21136*t21138*t21345*t21139*t21346*t21347*(8.96E2/ \
               2.7E1);
            double t21370 = t21138*t21138;
            double t21371 = rab1*rab1;
            double t21372 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t21373 = 1.0/pow(t21142,2.0/5.0);
            double t21374 = t21356*t21356;
            double t21375 = c*c0*t21215*t21370*t21345*t21346*t21293*t21347*t21198*t21199*(2.048E3/2.7E1);
            double t21376 = c*c0*t21141*t21216*t21138*t21345*t21139*t21346*t21293*t21347*(4.48E2/9.0);
            double t21377 = c*c0*kab1*t21190*t21371*t21345*t21372*t21355*t21373*t21293*t21347*t21289*(6.4E1/6.75E2) \
               ;
            double t21378 = kab1*kab1;
            double t21385 = rab1*t21288*2.0;
            double t21379 = exp(-t21385);
            double t21380 = 1.0/(t21291*t21291*t21291*t21291);
            double t21381 = c*c0*t21190*t21371*t21380*t21345*t21372*t21373*t21293*t21347*t21378*t21379*(6.4E1/ \
               2.25E2);
            double t21382 = c*c0*kab1*rab1*t21204*t21190*t21345*t21372*t21355*t21293*t21347*t21289*(1.6E1/6.75E2) \
               ;
            double t21383 = c0*kab1*rab1*t21321*t21333*t21190*t21352*t21335*t21345*t21355*t21293*t21289*(6.4E1/ \
               4.5E1);
            double t21384 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t21386 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t21387 = t21349*6.0;
            double t21388 = c*c0*t21137*t21345*t21346*t21293*t21347*4.0;
            double t21389 = t21387+t21388+3.0;
            double t21390 = 1.0/t21389;
            double t21392 = c*c0*t21333*t21352*t21165*t21345*t21346*t21293*(8.0/9.0);
            double t21393 = c*c0*t21352*t21361*t21137*t21345*t21346*t21293*(4.0/3.0);
            double t21394 = a3*c0*gamma_aa[index]*t21333*t21136*t21352*t21345*t21346*t21169*(5.6E1/9.0);
            double t21395 = c*c0*t21141*t21333*t21352*t21138*t21345*t21139*t21346*t21176*t21293*(2.56E2/9.0);
            double t21396 = c0*kab1*rab1*t21190*t21191*t21335*t21345*t21355*t21293*t21347*t21289*(3.2E1/4.5E1) \
               ;
            double t21397 = a3*c*c0*gamma_aa[index]*kab1*rab1*t21136*t21335*t21345*t21355*t21347*t21384*t21289* \
               (2.24E2/1.35E2);
            double t21398 = c0*kab1*rab1*t21141*t21190*t21335*t21138*t21345*t21139*t21355*t21293*t21347*t21386* \
               t21289*(1.024E3/1.35E2);
            double t21391 = t21381+t21364+t21382+t21383-t21392+t21375-t21393+t21367+t21376-t21394+t21368+t21377- \
               t21395+t21369-t21396-t21397-t21398;
            double t21399 = 1.0/sqrt(t21348);
            double t21400 = t21349*4.0;
            double t21401 = c*c0*t21137*t21345*t21346*t21293*t21347*(8.0/3.0);
            double t21402 = t21400+t21401+6.0;
            double t21403 = c*c0*t21362*t21165*t21345*t21363*t21346*t21293*t21347*(2.0/9.0);
            double t21404 = a3*c0*gamma_aa[index]*t21136*t21362*t21345*t21363*t21346*t21347*t21169*(1.4E1/9.0) \
               ;
            double t21405 = c*c0*t21137*t21362*t21345*t21363*t21346*t21293*t21347*t21356*(2.0/3.0);
            double t21406 = c*c0*t21141*t21362*t21138*t21345*t21363*t21139*t21346*t21176*t21293*t21347*(6.4E1/ \
               9.0);
            double t21428 = c*c0*t21333*t21352*t21137*t21362*t21345*t21363*t21346*t21293*(4.0/3.0);
            double t21429 = c0*kab1*rab1*t21321*t21190*t21335*t21362*t21345*t21363*t21355*t21293*t21347*t21289* \
               (1.6E1/4.5E1);
            double t21407 = t21403+t21404+t21351+t21405+t21406+t21353+t21354-t21428-t21357-t21429-t21358;
            double t21408 = c*c0*t21137*t21362*t21345*t21363*t21346*t21293*t21347*(2.0/3.0);
            double t21409 = t21408+1.0;
            double t21410 = 1.0/(t21389*t21389);
            double t21411 = 1.0/pow(t21348,3.0/2.0);
            double t21412 = t21356*t21399*3.0;
            double t21413 = c*c0*t21165*t21345*t21346*t21293*t21347*(4.0/3.0);
            double t21414 = a3*c0*gamma_aa[index]*t21136*t21345*t21346*t21347*t21169*(2.8E1/3.0);
            double t21415 = c*c0*t21141*t21138*t21345*t21139*t21346*t21176*t21293*t21347*(1.28E2/3.0);
            double t21417 = c*c0*t21333*t21352*t21137*t21345*t21346*t21293*8.0;
            double t21418 = c0*kab1*rab1*t21321*t21190*t21335*t21345*t21355*t21293*t21347*t21289*(3.2E1/1.5E1) \
               ;
            double t21416 = t21412+t21413+t21414+t21415-t21417-t21418;
            double t21419 = t21356*t21399*2.0;
            double t21420 = c*c0*t21165*t21345*t21346*t21293*t21347*(8.0/9.0);
            double t21421 = a3*c0*gamma_aa[index]*t21136*t21345*t21346*t21347*t21169*(5.6E1/9.0);
            double t21422 = c*c0*t21141*t21138*t21345*t21139*t21346*t21176*t21293*t21347*(2.56E2/9.0);
            double t21430 = c*c0*t21333*t21352*t21137*t21345*t21346*t21293*(1.6E1/3.0);
            double t21431 = c0*kab1*rab1*t21321*t21190*t21335*t21345*t21355*t21293*t21347*t21289*(6.4E1/4.5E1) \
               ;
            double t21423 = t21420+t21421-t21430+t21422-t21431+t21419;
            double t21424 = 1.0/t21293;
            double t21425 = exp(-t21344);
            double t21426 = t21291*t21291;
            double t21427 = t21296*t21296;
            double t21432 = 0.0 ;
            double t21433 = t21338*t21338;
            double t21434 = t21362*t21363;
            double t21435 = t21402*t21390*t21409;
            double t21436 = t21434+t21435;
            double t21437 = c*c0*t21145*(8.0/2.7E1);
            double t21438 = t21141*t21305*t21138*t21291*t21139*t21294*t21269*t21296*(3.04E7/9.0);
            double t21439 = t21200*t21141*t21305*t21333*t21138*t21291*t21139*t21294*(3.2E6/3.0);
            double t21440 = kab1*t21305*t21190*t21191*t21371*t21373*t21294*t21296*t21289*(6.4E4/9.0);
            double t21441 = a3*a3;
            double t21442 = 1.0/pow(t21293,5.0/2.0);
            double t21443 = 1.0/pow(rho_a[index],1.3E1/3.0);
            double t21444 = a3*gamma_aa[index]*t21305*t21144*t21136*t21443*t21291*t21336*t21296*(3.5E6/9.0);
            double t21445 = a3*gamma_aa[index]*t21305*t21144*t21315*t21333*t21136*t21291*t21336*(7.0E5/3.0);
            double t21446 = kab1*rab1*t21204*t21305*t21190*t21191*t21294*t21296*t21289*(1.6E4/9.0);
            double t21447 = 1.0/pow(rho_a[index],2.9E1/3.0);
            double t21448 = a3*gamma_aa[index]*kab1*rab1*t21213*t21305*t21136*t21335*t21336*t21296*t21289*(5.6E5/ \
               9.0);
            double t21449 = c*kab1*rab1*t21141*t21305*t21216*t21335*t21138*t21139*t21294*t21296*t21289*(2.56E6/ \
               9.0);
            double t21450 = t21440+t21444+t21445+t21437+t21446+t21438+t21439+t21448+t21449-t21305*t21361*t21291* \
               t21294*1.0E5-t21305*t21270*t21370*t21291*t21294*t21296*t21198*t21199*(2.56E7/9.0)-c*kab1*rab1*t21305* \
               t21333*t21335*t21165*t21294*t21289*(1.6E5/3.0)-c*kab1*rab1*t21305*t21145*t21335*t21294*t21296*t21289* \
               (3.2E5/9.0)-t21141*t21340*t21305*t21441*t21442*t21291*t21139*t21176*t21296*(1.225E6/3.0)-a3*gamma_aa[index]* \
               t21141*t21305*t21144*t21136*t21138*t21291*t21336*t21139*t21447*t21296*(1.12E7/9.0);
            v_rho_a_rho_a_[index] = -rho_b[index]*(c0*t21323*(t21402*t21390*(t21381+t21364+t21382+t21374+t21383- \
               t21392+t21375-t21393+t21367+t21376-t21394+t21368+t21377-t21395+t21369-t21396-t21397-t21398+t21350* \
               t21356*(1.0/3.0)-(t21333*t21356*2.0)/t21296+t21200*t21141*t21138*t21139*t21356*(3.2E1/3.0)+a3*gamma_aa[index]* \
               t21144*t21315*t21136*t21424*t21356*(7.0/3.0)-(c*kab1*rab1*t21335*t21165*t21356*t21289*(8.0/1.5E1)) \
               /t21291+c*c0*t21145*t21362*t21345*t21363*t21346*t21293*t21347*(8.0/2.7E1)+a3*c0*gamma_aa[index]*t21213* \
               t21136*t21362*t21345*t21363*t21346*t21347*(5.6E1/9.0)-c*c0*t21333*t21352*t21362*t21165*t21345*t21363* \
               t21346*t21293*(8.0/9.0)-c*c0*t21352*t21361*t21137*t21362*t21345*t21363*t21346*t21293*(4.0/3.0)+c*c0* \
               t21137*t21362*t21345*t21363*t21346*t21391*t21293*t21347*(2.0/3.0)+c*c0*t21137*t21362*t21345*t21363* \
               t21346*t21293*t21347*t21374*(2.0/3.0)+c*c0*t21137*t21362*t21345*t21363*t21346*t21293*t21365*t21366* \
               4.0+c*c0*t21362*t21165*t21345*t21363*t21346*t21293*t21347*t21356*(4.0/9.0)-a3*c0*gamma_aa[index]*t21333* \
               t21136*t21352*t21362*t21345*t21363*t21346*t21169*(5.6E1/9.0)+a3*c0*gamma_aa[index]*t21136*t21362*t21345* \
               t21363*t21346*t21347*t21356*t21169*(2.8E1/9.0)-c*c0*t21333*t21352*t21137*t21362*t21345*t21363*t21346* \
               t21293*t21356*(8.0/3.0)+c*c0*t21141*t21216*t21362*t21138*t21345*t21363*t21139*t21346*t21293*t21347* \
               (4.48E2/9.0)+c*c0*t21215*t21370*t21362*t21345*t21363*t21346*t21293*t21347*t21198*t21199*(2.048E3/2.7E1) \
               +a3*c0*gamma_aa[index]*t21141*t21214*t21136*t21362*t21138*t21345*t21363*t21139*t21346*t21347*(8.96E2/ \
               2.7E1)-c*c0*t21141*t21333*t21352*t21362*t21138*t21345*t21363*t21139*t21346*t21176*t21293*(2.56E2/9.0) \
               +c*c0*t21141*t21362*t21138*t21345*t21363*t21139*t21346*t21176*t21293*t21347*t21356*(1.28E2/9.0)-c0* \
               kab1*rab1*t21190*t21191*t21335*t21362*t21345*t21363*t21355*t21293*t21347*t21289*(3.2E1/4.5E1)+c*c0* \
               kab1*rab1*t21204*t21190*t21362*t21345*t21363*t21372*t21355*t21293*t21347*t21289*(1.6E1/6.75E2)+c*c0* \
               kab1*t21190*t21362*t21371*t21345*t21363*t21372*t21355*t21373*t21293*t21347*t21289*(6.4E1/6.75E2)+c* \
               c0*t21190*t21362*t21371*t21380*t21345*t21363*t21372*t21373*t21293*t21347*t21378*t21379*(6.4E1/2.25E2) \
               +c0*kab1*rab1*t21321*t21333*t21190*t21352*t21335*t21362*t21345*t21363*t21355*t21293*t21289*(6.4E1/ \
               4.5E1)-c0*kab1*rab1*t21321*t21190*t21335*t21362*t21345*t21363*t21355*t21293*t21347*t21356*t21289*(3.2E1/ \
               4.5E1)-a3*c*c0*gamma_aa[index]*kab1*rab1*t21136*t21335*t21362*t21345*t21363*t21355*t21347*t21384*t21289* \
               (2.24E2/1.35E2)-c0*kab1*rab1*t21141*t21190*t21335*t21362*t21138*t21345*t21363*t21139*t21355*t21293* \
               t21347*t21386*t21289*(1.024E3/1.35E2))+t21423*t21407*t21390*2.0+t21362*t21363*t21391+t21362*t21363* \
               t21374+t21390*t21409*(-t21411*t21374+t21391*t21399*2.0+c*c0*t21145*t21345*t21346*t21293*t21347*(3.2E1/ \
               2.7E1)+a3*c0*gamma_aa[index]*t21213*t21136*t21345*t21346*t21347*(2.24E2/9.0)-c*c0*t21333*t21352*t21165* \
               t21345*t21346*t21293*(3.2E1/9.0)-c*c0*t21352*t21361*t21137*t21345*t21346*t21293*(1.6E1/3.0)+c*c0*t21137* \
               t21345*t21346*t21293*t21365*t21366*1.6E1-a3*c0*gamma_aa[index]*t21333*t21136*t21352*t21345*t21346* \
               t21169*(2.24E2/9.0)+c*c0*t21141*t21216*t21138*t21345*t21139*t21346*t21293*t21347*(1.792E3/9.0)+c*c0* \
               t21215*t21370*t21345*t21346*t21293*t21347*t21198*t21199*(8.192E3/2.7E1)+a3*c0*gamma_aa[index]*t21141* \
               t21214*t21136*t21138*t21345*t21139*t21346*t21347*(3.584E3/2.7E1)-c*c0*t21141*t21333*t21352*t21138* \
               t21345*t21139*t21346*t21176*t21293*(1.024E3/9.0)-c0*kab1*rab1*t21190*t21191*t21335*t21345*t21355*t21293* \
               t21347*t21289*(1.28E2/4.5E1)+c*c0*kab1*rab1*t21204*t21190*t21345*t21372*t21355*t21293*t21347*t21289* \
               (6.4E1/6.75E2)+c*c0*kab1*t21190*t21371*t21345*t21372*t21355*t21373*t21293*t21347*t21289*(2.56E2/6.75E2) \
               +c*c0*t21190*t21371*t21380*t21345*t21372*t21373*t21293*t21347*t21378*t21379*(2.56E2/2.25E2)+c0*kab1* \
               rab1*t21321*t21333*t21190*t21352*t21335*t21345*t21355*t21293*t21289*(2.56E2/4.5E1)-a3*c*c0*gamma_aa[index]* \
               kab1*rab1*t21136*t21335*t21345*t21355*t21347*t21384*t21289*(8.96E2/1.35E2)-c0*kab1*rab1*t21141*t21190* \
               t21335*t21138*t21345*t21139*t21355*t21293*t21347*t21386*t21289*(4.096E3/1.35E2))-t21410*t21402*t21407* \
               t21416*2.0-t21410*t21423*t21416*t21409*2.0-t21410*t21402*t21409*(t21411*t21374*(-3.0/2.0)+t21391*t21399* \
               3.0+c*c0*t21145*t21345*t21346*t21293*t21347*(1.6E1/9.0)+a3*c0*gamma_aa[index]*t21213*t21136*t21345* \
               t21346*t21347*(1.12E2/3.0)-c*c0*t21333*t21352*t21165*t21345*t21346*t21293*(1.6E1/3.0)-c*c0*t21352* \
               t21361*t21137*t21345*t21346*t21293*8.0+c*c0*t21137*t21345*t21346*t21293*t21365*t21366*2.4E1-a3*c0* \
               gamma_aa[index]*t21333*t21136*t21352*t21345*t21346*t21169*(1.12E2/3.0)+c*c0*t21141*t21216*t21138*t21345* \
               t21139*t21346*t21293*t21347*(8.96E2/3.0)+c*c0*t21215*t21370*t21345*t21346*t21293*t21347*t21198*t21199* \
               (4.096E3/9.0)+a3*c0*gamma_aa[index]*t21141*t21214*t21136*t21138*t21345*t21139*t21346*t21347*(1.792E3/ \
               9.0)-c*c0*t21141*t21333*t21352*t21138*t21345*t21139*t21346*t21176*t21293*(5.12E2/3.0)-c0*kab1*rab1* \
               t21190*t21191*t21335*t21345*t21355*t21293*t21347*t21289*(6.4E1/1.5E1)+c*c0*kab1*rab1*t21204*t21190* \
               t21345*t21372*t21355*t21293*t21347*t21289*(3.2E1/2.25E2)+c*c0*kab1*t21190*t21371*t21345*t21372*t21355* \
               t21373*t21293*t21347*t21289*(1.28E2/2.25E2)+c*c0*t21190*t21371*t21380*t21345*t21372*t21373*t21293* \
               t21347*t21378*t21379*(1.28E2/7.5E1)+c0*kab1*rab1*t21321*t21333*t21190*t21352*t21335*t21345*t21355* \
               t21293*t21289*(1.28E2/1.5E1)-a3*c*c0*gamma_aa[index]*kab1*rab1*t21136*t21335*t21345*t21355*t21347* \
               t21384*t21289*(4.48E2/4.5E1)-c0*kab1*rab1*t21141*t21190*t21335*t21138*t21345*t21139*t21355*t21293* \
               t21347*t21386*t21289*(2.048E3/4.5E1))+t21402*(t21416*t21416)*t21409*1.0/(t21389*t21389*t21389)*2.0- \
               t21144*t21424*t21425*t21273*t21426*t21427*t21275*t21356*(1.0/2.0)+t21144*t21424*t21425*t21426*t21391* \
               t21427*t21275*t21279*(3.0/2.0)+t21144*t21424*t21425*t21426*t21427*t21275*t21374*t21279*(3.0/2.0)+t21144* \
               t21333*t21424*t21425*t21426*t21275*t21356*t21296*t21279*3.0+kab1*rab1*t21350*t21424*t21335*t21425* \
               t21291*t21427*t21275*t21356*t21289*(4.0/5.0)-t21141*t21144*t21424*t21425*t21138*t21426*t21139*t21427* \
               t21275*t21356*t21285*1.6E1-a3*gamma_aa[index]*t21340*t21136*t21425*t21372*t21426*t21427*t21275*1.0/ \
               (t21293*t21293)*t21356*(7.0/2.0))*(-1.0/2.0)+c0*t21432*t21433*t21436*(1.0/2.0)+c0*t21450*t21436*t21339* \
               (1.0/2.0)+c0*t21338*t21339*(t21402*t21407*t21390+t21423*t21390*t21409+t21362*t21363*t21356-t21410* \
               t21402*t21416*t21409+t21144*t21424*t21425*t21426*t21427*t21275*t21356*t21279*(3.0/2.0)))-rho_a[index]* \
               (c0*t21301*t21323*(t21235*t21188*(-t21162*t21267*t21268+t21162*t21266*t21189*2.0-t21141*t21143*t21139* \
               t21167*t21168*t21269*(1.216E3/9.0)+t21270*t21183*t21168*t21197*t21198*t21199*(2.048E3/9.0)+c*c0*t21152* \
               t21161*t21145*t21148*t21167*(3.2E1/2.7E1)-t21200*t21141*t21143*t21139*t21167*t21196*t21189*(6.4E1/ \
               3.0)+a5*c0*gamma_aa[index]*t21213*t21161*t21136*t21148*t21167*(2.24E2/9.0)+c*c0*t21211*t21212*t21152* \
               t21137*t21148*t21167*1.6E1-c*c0*t21210*t21152*t21137*t21148*t21175*t21167*(1.6E1/3.0)+c*c0*t21152* \
               t21165*t21174*t21148*t21175*t21167*(3.2E1/9.0)+a5*c0*gamma_aa[index]*t21136*t21174*t21148*t21175*t21167* \
               t21169*(2.24E2/9.0)-c*c0*t21141*t21143*t21152*t21161*t21216*t21183*t21139*t21148*(1.792E3/9.0)+c*c0* \
               t21141*t21143*t21152*t21161*t21216*t21139*t21148*t21167*(1.792E3/9.0)+c*c0*t21222*t21152*t21161*t21215* \
               t21148*t21197*t21198*t21199*(4.096E3/9.0)-c*c0*t21152*t21161*t21215*t21183*t21148*t21197*t21198*t21199* \
               (1.6384E4/2.7E1)+c*c0*t21152*t21161*t21215*t21148*t21167*t21197*t21198*t21199*(8.192E3/2.7E1)-a5*c0* \
               gamma_aa[index]*t21141*t21214*t21143*t21161*t21136*t21183*t21139*t21148*(3.584E3/2.7E1)+a5*c0*gamma_aa[index]* \
               t21141*t21214*t21143*t21161*t21136*t21139*t21148*t21167*(3.584E3/2.7E1)-c*c0*t21141*t21143*t21152* \
               t21174*t21183*t21139*t21148*t21175*t21176*(1.024E3/9.0)+c*c0*t21141*t21143*t21152*t21174*t21139*t21148* \
               t21175*t21167*t21176*(1.024E3/9.0))+t21221*t21178*t21179+t21241*t21286*t21188*2.0+t21233*t21178*t21179+ \
               t21245*t21188*(t21221+t21230+t21231+t21223+t21232+t21224+t21225+t21226-t21280+t21227-t21281+t21228- \
               t21282+t21229-t21283-t21284+t21350*t21217*(1.0/3.0)+(t21217*t21174*2.0)/t21160+t21200*t21141*t21143* \
               t21217*t21139*(3.2E1/3.0)-t21200*t21141*t21143*t21162*t21217*t21139*(3.2E1/3.0)+a5*gamma_aa[index]* \
               t21144*t21315*t21136*t21217*t21274*(7.0/3.0)+c*c0*t21152*t21161*t21145*t21148*t21167*t21178*t21179* \
               (8.0/2.7E1)+a5*c0*gamma_aa[index]*t21213*t21161*t21136*t21148*t21167*t21178*t21179*(5.6E1/9.0)+c*c0* \
               t21211*t21212*t21152*t21137*t21148*t21167*t21178*t21179*4.0+c*c0*t21221*t21152*t21161*t21137*t21148* \
               t21167*t21178*t21179*(2.0/3.0)-c*c0*t21210*t21152*t21137*t21148*t21175*t21167*t21178*t21179*(4.0/3.0) \
               +c*c0*t21152*t21161*t21233*t21137*t21148*t21167*t21178*t21179*(2.0/3.0)+c*c0*t21152*t21161*t21217* \
               t21165*t21148*t21167*t21178*t21179*(4.0/9.0)+c*c0*t21152*t21165*t21174*t21148*t21175*t21167*t21178* \
               t21179*(8.0/9.0)+a5*c0*gamma_aa[index]*t21161*t21136*t21217*t21148*t21167*t21169*t21178*t21179*(2.8E1/ \
               9.0)+a5*c0*gamma_aa[index]*t21136*t21174*t21148*t21175*t21167*t21169*t21178*t21179*(5.6E1/9.0)+c*c0* \
               t21152*t21217*t21137*t21174*t21148*t21175*t21167*t21178*t21179*(8.0/3.0)-c*c0*t21141*t21143*t21152* \
               t21161*t21216*t21183*t21139*t21148*t21178*t21179*(4.48E2/9.0)+c*c0*t21141*t21143*t21152*t21161*t21216* \
               t21139*t21148*t21167*t21178*t21179*(4.48E2/9.0)+c*c0*t21222*t21152*t21161*t21215*t21148*t21178*t21179* \
               t21197*t21198*t21199*(1.024E3/9.0)-c*c0*t21152*t21161*t21215*t21183*t21148*t21178*t21179*t21197*t21198* \
               t21199*(4.096E3/2.7E1)+c*c0*t21152*t21161*t21215*t21148*t21167*t21178*t21179*t21197*t21198*t21199* \
               (2.048E3/2.7E1)-a5*c0*gamma_aa[index]*t21141*t21214*t21143*t21161*t21136*t21183*t21139*t21148*t21178* \
               t21179*(8.96E2/2.7E1)+a5*c0*gamma_aa[index]*t21141*t21214*t21143*t21161*t21136*t21139*t21148*t21167* \
               t21178*t21179*(8.96E2/2.7E1)-c*c0*t21141*t21143*t21152*t21161*t21217*t21183*t21139*t21148*t21176*t21178* \
               t21179*(1.28E2/9.0)+c*c0*t21141*t21143*t21152*t21161*t21217*t21139*t21148*t21167*t21176*t21178*t21179* \
               (1.28E2/9.0)-c*c0*t21141*t21143*t21152*t21174*t21183*t21139*t21148*t21175*t21176*t21178*t21179*(2.56E2/ \
               9.0)+c*c0*t21141*t21143*t21152*t21174*t21139*t21148*t21175*t21167*t21176*t21178*t21179*(2.56E2/9.0) \
               )-t21242*t21235*t21245*(t21162*t21267*t21268*(-3.0/2.0)+t21162*t21266*t21189*3.0-t21141*t21143*t21139* \
               t21167*t21168*t21269*(6.08E2/3.0)+t21270*t21183*t21168*t21197*t21198*t21199*(1.024E3/3.0)+c*c0*t21152* \
               t21161*t21145*t21148*t21167*(1.6E1/9.0)-t21200*t21141*t21143*t21139*t21167*t21196*t21189*3.2E1+a5* \
               c0*gamma_aa[index]*t21213*t21161*t21136*t21148*t21167*(1.12E2/3.0)+c*c0*t21211*t21212*t21152*t21137* \
               t21148*t21167*2.4E1-c*c0*t21210*t21152*t21137*t21148*t21175*t21167*8.0+c*c0*t21152*t21165*t21174*t21148* \
               t21175*t21167*(1.6E1/3.0)+a5*c0*gamma_aa[index]*t21136*t21174*t21148*t21175*t21167*t21169*(1.12E2/ \
               3.0)-c*c0*t21141*t21143*t21152*t21161*t21216*t21183*t21139*t21148*(8.96E2/3.0)+c*c0*t21141*t21143* \
               t21152*t21161*t21216*t21139*t21148*t21167*(8.96E2/3.0)+c*c0*t21222*t21152*t21161*t21215*t21148*t21197* \
               t21198*t21199*(2.048E3/3.0)-c*c0*t21152*t21161*t21215*t21183*t21148*t21197*t21198*t21199*(8.192E3/ \
               9.0)+c*c0*t21152*t21161*t21215*t21148*t21167*t21197*t21198*t21199*(4.096E3/9.0)-a5*c0*gamma_aa[index]* \
               t21141*t21214*t21143*t21161*t21136*t21183*t21139*t21148*(1.792E3/9.0)+a5*c0*gamma_aa[index]*t21141* \
               t21214*t21143*t21161*t21136*t21139*t21148*t21167*(1.792E3/9.0)-c*c0*t21141*t21143*t21152*t21174*t21183* \
               t21139*t21148*t21175*t21176*(5.12E2/3.0)+c*c0*t21141*t21143*t21152*t21174*t21139*t21148*t21175*t21167* \
               t21176*(5.12E2/3.0))-t21241*t21242*t21251*t21235*2.0-t21242*t21251*t21245*t21286*2.0+(t21251*t21251) \
               *t21235*t21245*1.0/(t21187*t21187*t21187)*2.0-t21144*t21217*t21273*t21274*t21275*t21276*t21277*t21278* \
               (1.0/2.0)+t21221*t21144*t21274*t21275*t21276*t21277*t21278*t21279*(3.0/2.0)+t21233*t21144*t21274*t21275* \
               t21276*t21277*t21278*t21279*(3.0/2.0)-t21160*t21144*t21217*t21174*t21274*t21275*t21276*t21277*t21279* \
               3.0+t21141*t21150*t21143*t21144*t21217*t21139*t21274*t21275*t21276*t21285*t21278*1.6E1-t21141*t21143* \
               t21144*t21217*t21139*t21274*t21275*t21276*t21285*t21277*t21278*1.6E1-a5*gamma_aa[index]*t21340*1.0/ \
               (t21152*t21152)*t21136*t21217*t21372*t21275*t21276*t21277*t21278*(7.0/2.0))*(-1.0/2.0)+c0*t21301*t21323* \
               t21326*(t21300*t21190*t21191*(1.0E1/9.0)-t21320*t21321*t21190*t21317*(8.0/3.0)+(t21320*t21320)*t21190* \
               t21273*1.0/(t21299*t21299*t21299*t21299)*6.0-t21190*t21317*t21273*(c*k2*t21145*(4.0/9.0)+c*k1*t21170* \
               t21145*(2.0/9.0)-k1*t21206*t21190*t21191*(1.0/3.6E1))*2.0)*(1.0/2.0)+c0*t21301*t21314*t21323*t21328+ \
               c0*t21301*t21432*t21433*t21326*(1.0/2.0)+c0*t21301*t21450*t21326*t21339*(1.0/2.0)+c0*t21301*t21314* \
               t21338*t21339-c0*t21301*t21323*t21326*(t21328*t21328)*(1.0/2.0)-c0*t21301*t21326*t21328*t21338*t21339) \
               -c0*t21301*t21314*t21323+c0*t21301*t21323*t21326*t21328+c0*t21301*t21326*t21338*t21339;
        } else if (rho_a[index] > cutoff_) {
            double t24087 = tspi_m13*tspi_m13;
            double t24088 = 1.0/pow(rho_a[index],1.0/3.0);
            double t24089 = a2*a2;
            double t24090 = gamma_aa[index]*gamma_aa[index];
            double t24091 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t24092 = t24087*t24087;
            double t24093 = c*t24088;
            double t24094 = a4*a4;
            double t24095 = t24090*t24091*t24092*t24094*2.0;
            double t24096 = exp(t24095);
            double t24097 = 1.0/c;
            double t24098 = 1.0/pow(rho_a[index],7.0/3.0);
            double t24099 = sqrt(t24093);
            double t24100 = t24090*t24091*t24092*t24094;
            double t24101 = t24100+1.0;
            double t24102 = 1.0/(t24101*t24101);
            double t24103 = a5*gamma_aa[index]*t24087*t24097*t24098;
            double t24104 = t24103+1.0;
            double t24115 = raa2*t24099;
            double t24105 = exp(-t24115);
            double t24106 = t24105-1.0;
            double t24107 = kaa2*t24106;
            double t24108 = pow(t24093,2.0/5.0);
            double t24116 = raa1*t24108;
            double t24109 = exp(-t24116);
            double t24110 = t24109-1.0;
            double t24111 = kaa1*t24110;
            double t24112 = -kaa0+t24111+t24107;
            double t24113 = 1.0/(t24112*t24112);
            double t24114 = c*c0*t24102*t24104*t24113*t24096*t24088*(2.0/3.0);
            double t24117 = 1.0/t24101;
            double t24118 = 1.0/pow(rho_a[index],4.0/3.0);
            double t24119 = c*c0*t24104*t24113*t24096*t24088*(2.0/3.0);
            double t24120 = sqrt(t24119);
            double t24121 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t24122 = 1.0/sqrt(t24093);
            double t24123 = c*kaa2*raa2*t24122*t24105*t24118*(1.0/6.0);
            double t24124 = 1.0/pow(t24093,3.0/5.0);
            double t24125 = c*kaa1*raa1*t24124*t24109*t24118*(2.0/1.5E1);
            double t24126 = t24123+t24125;
            double t24127 = 1.0/(t24112*t24112*t24112);
            double t24128 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t24129 = exp(t24114);
            double t24130 = Ei(-t24114);
            double t24131 = 1.0/(t24101*t24101*t24101);
            double t24132 = t24120*t24117*6.0;
            double t24133 = c*c0*t24102*t24104*t24113*t24096*t24088*4.0;
            double t24134 = t24132+t24133+3.0;
            double t24135 = 1.0/t24134;
            double t24136 = c*c0*t24102*t24104*t24113*t24118*t24096*(2.0/9.0);
            double t24137 = a5*c0*gamma_aa[index]*t24102*t24121*t24113*t24087*t24096*(1.4E1/9.0);
            double t24138 = c*c0*t24102*t24104*t24126*t24127*t24096*t24088*(4.0/3.0);
            double t24139 = c*c0*t24102*t24104*t24113*t24090*t24092*t24128*t24094*t24096*(6.4E1/9.0);
            double t24141 = c*c0*t24104*t24113*t24131*t24090*t24092*t24128*t24094*t24096*(6.4E1/9.0);
            double t24140 = -t24141+t24136+t24137+t24138+t24139;
            double t24142 = c*c0*t24102*t24130*t24104*t24113*t24129*t24096*t24088*(2.0/3.0);
            double t24143 = t24142+1.0;
            double t24144 = t24120*t24117*4.0;
            double t24145 = c*c0*t24102*t24104*t24113*t24096*t24088*(8.0/3.0);
            double t24146 = t24144+t24145+6.0;
            double t24147 = c*c0*t24104*t24113*t24118*t24096*(2.0/9.0);
            double t24148 = a5*c0*gamma_aa[index]*t24121*t24113*t24087*t24096*(1.4E1/9.0);
            double t24149 = c*c0*t24104*t24126*t24127*t24096*t24088*(4.0/3.0);
            double t24150 = c*c0*t24104*t24113*t24090*t24092*t24128*t24094*t24096*(6.4E1/9.0);
            double t24151 = t24150+t24147+t24148+t24149;
            double t24152 = 1.0/sqrt(t24119);
            double t24153 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t24154 = t24090*t24091*t24092*t24089;
            double t24155 = pow(t24093,4.0/5.0);
            double t24173 = rab1*t24155;
            double t24156 = exp(-t24173);
            double t24157 = t24156-1.0;
            double t24174 = kab1*t24157;
            double t24158 = kab0-t24174;
            double t24159 = a3*gamma_aa[index]*t24087*t24097*t24098;
            double t24160 = t24159+1.0;
            double t24161 = 1.0/sqrt(t24160);
            double t24162 = 1.0/pow(rho_a[index],8.0/3.0);
            double t24163 = a1*gamma_aa[index]*t24162*t24087;
            double t24164 = t24154+t24163+1.0;
            double t24165 = c*c;
            double t24166 = 1.0/pow(rho_a[index],2.0/3.0);
            double t24167 = k1*t24099;
            double t24168 = c*k2*t24088;
            double t24169 = t24167+t24168;
            double t24170 = 1.0/(t24169*t24169);
            double t24176 = t24170*t24165*t24166;
            double t24171 = exp(-t24176);
            double t24172 = exp(-t24154);
            double t24175 = c*c0*t24088*(2.0/3.0);
            double t24177 = t24151*t24152*t24117*2.0;
            double t24178 = c*c0*t24102*t24104*t24113*t24118*t24096*(8.0/9.0);
            double t24179 = a5*c0*gamma_aa[index]*t24102*t24121*t24113*t24087*t24096*(5.6E1/9.0);
            double t24180 = c*c0*t24102*t24104*t24126*t24127*t24096*t24088*(1.6E1/3.0);
            double t24181 = c*c0*t24102*t24104*t24113*t24090*t24092*t24128*t24094*t24096*(2.56E2/9.0);
            double t24232 = t24102*t24120*t24090*t24153*t24092*t24094*(6.4E1/3.0);
            double t24233 = c*c0*t24104*t24113*t24131*t24090*t24092*t24128*t24094*t24096*(2.56E2/9.0);
            double t24182 = -t24232-t24233+t24180+t24181+t24177+t24178+t24179;
            double t24183 = c*c0*t24102*t24130*t24104*t24113*t24118*t24129*t24096*(2.0/9.0);
            double t24184 = c*c0*t24102*t24130*t24104*t24126*t24127*t24129*t24096*t24088*(4.0/3.0);
            double t24185 = c*c0*t24102*t24130*t24104*t24113*t24140*t24129*t24096*t24088*(2.0/3.0);
            double t24186 = a5*c0*gamma_aa[index]*t24102*t24121*t24130*t24113*t24129*t24087*t24096*(1.4E1/9.0) \
               ;
            double t24187 = c*c0*t24102*t24130*t24104*t24113*t24090*t24092*t24128*t24129*t24094*t24096*(6.4E1/ \
               9.0);
            double t24236 = c*c0*t24130*t24104*t24113*t24131*t24090*t24092*t24128*t24129*t24094*t24096*(6.4E1/ \
               9.0);
            double t24188 = -t24141+t24136+t24137-t24236+t24138+t24183+t24139+t24184+t24185+t24186+t24187;
            double t24189 = t24094*t24094;
            double t24190 = t24090*t24090;
            double t24191 = t24092*t24092;
            double t24192 = raa2*raa2;
            double t24193 = c*kaa2*t24105*t24192*t24098*(1.0/3.6E1);
            double t24194 = raa1*raa1;
            double t24195 = 1.0/pow(t24093,6.0/5.0);
            double t24196 = kaa1*t24162*t24109*t24165*t24194*t24195*(4.0/2.25E2);
            double t24197 = 1.0/pow(t24093,3.0/2.0);
            double t24198 = kaa2*raa2*t24105*t24162*t24165*t24197*(1.0/3.6E1);
            double t24199 = 1.0/pow(t24093,8.0/5.0);
            double t24200 = kaa1*raa1*t24162*t24109*t24165*t24199*(2.0/7.5E1);
            double t24210 = c*kaa2*raa2*t24122*t24105*t24098*(2.0/9.0);
            double t24211 = c*kaa1*raa1*t24124*t24109*t24098*(8.0/4.5E1);
            double t24201 = t24200-t24210-t24211+t24193+t24196+t24198;
            double t24202 = t24126*t24126;
            double t24203 = 1.0/(t24112*t24112*t24112*t24112);
            double t24204 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t24205 = 1.0/pow(rho_a[index],1.0E1);
            double t24206 = 1.0/pow(rho_a[index],1.3E1);
            double t24207 = 1.0/pow(rho_a[index],2.3E1/3.0);
            double t24208 = 1.0/pow(rho_a[index],1.0E1/3.0);
            double t24209 = 1.0/t24104;
            double t24212 = t24140*t24140;
            double t24213 = 1.0/(t24101*t24101*t24101*t24101);
            double t24214 = c*c0*t24102*t24104*t24113*t24096*t24098*(8.0/2.7E1);
            double t24215 = c*c0*t24102*t24202*t24104*t24203*t24096*t24088*4.0;
            double t24216 = a5*c0*gamma_aa[index]*t24102*t24113*t24204*t24087*t24096*(5.6E1/9.0);
            double t24217 = c*c0*t24102*t24104*t24126*t24118*t24127*t24096*(8.0/9.0);
            double t24218 = a5*c0*gamma_aa[index]*t24102*t24121*t24126*t24127*t24087*t24096*(5.6E1/9.0);
            double t24219 = a5*c0*gamma_aa[index]*t24102*t24113*t24205*t24090*t24092*t24094*t24087*t24096*(8.96E2/ \
               2.7E1);
            double t24220 = c*c0*t24102*t24104*t24113*t24206*t24190*t24191*t24096*t24189*(2.048E3/2.7E1);
            double t24221 = c*c0*t24104*t24113*t24213*t24206*t24190*t24191*t24096*t24189*(1.024E3/9.0);
            double t24222 = c*c0*t24102*t24104*t24113*t24090*t24207*t24092*t24094*t24096*(4.48E2/9.0);
            double t24223 = c*c0*t24102*t24104*t24090*t24126*t24127*t24092*t24128*t24094*t24096*(2.56E2/9.0);
            double t24256 = c*c0*t24102*t24201*t24104*t24127*t24096*t24088*(4.0/3.0);
            double t24257 = a5*c0*gamma_aa[index]*t24113*t24131*t24205*t24090*t24092*t24094*t24087*t24096*(8.96E2/ \
               2.7E1);
            double t24258 = c*c0*t24104*t24113*t24131*t24206*t24190*t24191*t24096*t24189*(4.096E3/2.7E1);
            double t24259 = c*c0*t24104*t24113*t24131*t24090*t24207*t24092*t24094*t24096*(4.48E2/9.0);
            double t24260 = c*c0*t24104*t24131*t24090*t24126*t24127*t24092*t24128*t24094*t24096*(2.56E2/9.0);
            double t24224 = t24220+t24221+t24222+t24214+t24223+t24215-t24260+t24216+t24217+t24218+t24219-t24256- \
               t24257-t24258-t24259;
            double t24225 = 1.0/(t24134*t24134);
            double t24226 = t24151*t24152*t24117*3.0;
            double t24227 = c*c0*t24102*t24104*t24113*t24118*t24096*(4.0/3.0);
            double t24228 = a5*c0*gamma_aa[index]*t24102*t24121*t24113*t24087*t24096*(2.8E1/3.0);
            double t24229 = c*c0*t24102*t24104*t24126*t24127*t24096*t24088*8.0;
            double t24230 = c*c0*t24102*t24104*t24113*t24090*t24092*t24128*t24094*t24096*(1.28E2/3.0);
            double t24234 = t24102*t24120*t24090*t24153*t24092*t24094*3.2E1;
            double t24235 = c*c0*t24104*t24113*t24131*t24090*t24092*t24128*t24094*t24096*(1.28E2/3.0);
            double t24231 = t24230-t24234+t24226-t24235+t24227+t24228+t24229;
            double t24237 = c*c0*t24104*t24113*t24096*t24098*(8.0/2.7E1);
            double t24238 = a5*c0*gamma_aa[index]*t24113*t24204*t24087*t24096*(5.6E1/9.0);
            double t24239 = c*c0*t24104*t24126*t24118*t24127*t24096*(8.0/9.0);
            double t24240 = c*c0*t24202*t24104*t24203*t24096*t24088*4.0;
            double t24241 = a5*c0*gamma_aa[index]*t24113*t24205*t24090*t24092*t24094*t24087*t24096*(8.96E2/2.7E1) \
               ;
            double t24242 = a5*c0*gamma_aa[index]*t24121*t24126*t24127*t24087*t24096*(5.6E1/9.0);
            double t24243 = c*c0*t24104*t24113*t24206*t24190*t24191*t24096*t24189*(2.048E3/2.7E1);
            double t24244 = c*c0*t24104*t24113*t24090*t24207*t24092*t24094*t24096*(4.48E2/9.0);
            double t24245 = c*c0*t24104*t24090*t24126*t24127*t24092*t24128*t24094*t24096*(2.56E2/9.0);
            double t24246 = t24240+t24241+t24242+t24243+t24244+t24245+t24237+t24238+t24239-c*c0*t24201*t24104* \
               t24127*t24096*t24088*(4.0/3.0);
            double t24247 = t24151*t24151;
            double t24248 = 1.0/pow(t24119,3.0/2.0);
            double t24249 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t24250 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t24251 = 1.0/c0;
            double t24252 = exp(-t24095);
            double t24253 = t24101*t24101;
            double t24254 = t24112*t24112;
            double t24255 = pow(rho_a[index],1.0/3.0);
            double t24261 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            double t24262 = t24161*t24172*t24164*t24158*1.0E5;
            double t24263 = t24262-t24175;
            double t24264 = ( (t24263 > 0.0) ?  1.0 : 0.0 ) ;
            double t24265 = t24130*t24129;
            double t24266 = t24143*t24135*t24146;
            double t24267 = t24265+t24266;
            double t24268 = t24090*t24153*t24092*t24089*(1.6E1/3.0);
            double t24269 = a1*gamma_aa[index]*t24121*t24087*(8.0/3.0);
            double t24270 = t24268+t24269;
            double t24271 = 1.0/(c*c);
            double t24272 = 1.0/pow(t24093,1.0/5.0);
            double t24273 = 1.0/pow(t24160,3.0/2.0);
            double t24274 = 1.0/pow(rho_a[index],5.0/3.0);
            double t24275 = t24170*t24165*t24274*(2.0/3.0);
            double t24276 = 1.0/(t24169*t24169*t24169);
            double t24277 = c*k2*t24118*(1.0/3.0);
            double t24278 = c*k1*t24122*t24118*(1.0/6.0);
            double t24279 = t24277+t24278;
            double t24293 = t24165*t24166*t24276*t24279*2.0;
            double t24280 = t24275-t24293;
            double t24281 = t24143*t24135*t24182;
            double t24282 = t24130*t24140*t24129;
            double t24283 = t24135*t24146*t24188;
            double t24284 = t24140*t24251*t24252*t24253*t24209*t24254*t24255*t24097*(3.0/2.0);
            double t24288 = t24231*t24143*t24225*t24146;
            double t24285 = t24281+t24282+t24283+t24284-t24288;
            double t24286 = -t24262+t24175;
            double t24287 = 0.0 ;
            double t24289 = c*c0*t24118*(2.0/9.0);
            double t24290 = t24161*t24090*t24153*t24172*t24092*t24164*t24158*t24089*(1.6E6/3.0);
            double t24291 = a3*gamma_aa[index]*t24172*t24208*t24164*t24273*t24158*t24087*t24097*(3.5E5/3.0);
            double t24294 = t24161*t24270*t24172*t24158*1.0E5;
            double t24295 = c*kab1*rab1*t24161*t24118*t24172*t24164*t24272*t24156*(8.0E4/3.0);
            double t24292 = t24290+t24291-t24294-t24295+t24289;
            v_rho_a_rho_a_[index] = - ( (c*c0*t24088*(-2.0/3.0)+t24161*t24164*t24158*exp(-t24090*t24091*t24092* \
               t24089)*1.0E5 > 0.0) ? c0*t24171*t24285*1.0 : 0.0 ) + 0.0 +c0*t24171*t24280*t24264*t24267+c0*rho_a[index]* \
               t24171*t24264*(t24143*t24135*(t24152*t24117*t24246*2.0-t24117*t24247*t24248-t24102*t24120*t24090*t24092* \
               t24094*t24249*(1.216E3/9.0)+t24120*t24131*t24250*t24190*t24191*t24189*(2.048E3/9.0)+c*c0*t24102*t24104* \
               t24113*t24096*t24098*(3.2E1/2.7E1)-t24102*t24151*t24152*t24090*t24153*t24092*t24094*(6.4E1/3.0)+a5* \
               c0*gamma_aa[index]*t24102*t24113*t24204*t24087*t24096*(2.24E2/9.0)+c*c0*t24102*t24202*t24104*t24203* \
               t24096*t24088*1.6E1-c*c0*t24102*t24201*t24104*t24127*t24096*t24088*(1.6E1/3.0)+c*c0*t24102*t24104* \
               t24126*t24118*t24127*t24096*(3.2E1/9.0)+a5*c0*gamma_aa[index]*t24102*t24121*t24126*t24127*t24087*t24096* \
               (2.24E2/9.0)+c*c0*t24102*t24104*t24113*t24090*t24207*t24092*t24094*t24096*(1.792E3/9.0)-c*c0*t24104* \
               t24113*t24131*t24090*t24207*t24092*t24094*t24096*(1.792E3/9.0)+c*c0*t24102*t24104*t24113*t24206*t24190* \
               t24191*t24096*t24189*(8.192E3/2.7E1)-c*c0*t24104*t24113*t24131*t24206*t24190*t24191*t24096*t24189* \
               (1.6384E4/2.7E1)+c*c0*t24104*t24113*t24213*t24206*t24190*t24191*t24096*t24189*(4.096E3/9.0)+a5*c0* \
               gamma_aa[index]*t24102*t24113*t24205*t24090*t24092*t24094*t24087*t24096*(3.584E3/2.7E1)-a5*c0*gamma_aa[index]* \
               t24113*t24131*t24205*t24090*t24092*t24094*t24087*t24096*(3.584E3/2.7E1)+c*c0*t24102*t24104*t24090* \
               t24126*t24127*t24092*t24128*t24094*t24096*(1.024E3/9.0)-c*c0*t24104*t24131*t24090*t24126*t24127*t24092* \
               t24128*t24094*t24096*(1.024E3/9.0))+t24130*t24212*t24129+t24130*t24224*t24129+t24135*t24182*t24188* \
               2.0+t24135*t24146*(t24220+t24212+t24221+t24222+t24214+t24223+t24215+t24216+t24217+t24218+t24219+(t24140* \
               (1.0/3.0))/rho_a[index]+(t24140*t24126*2.0)/t24112+t24140*t24090*t24153*t24092*t24094*(3.2E1/3.0)- \
               t24140*t24090*t24117*t24153*t24092*t24094*(3.2E1/3.0)+a5*gamma_aa[index]*t24140*t24208*t24209*t24087* \
               t24097*(7.0/3.0)-c*c0*t24102*t24201*t24104*t24127*t24096*t24088*(4.0/3.0)+c*c0*t24102*t24130*t24104* \
               t24113*t24129*t24096*t24098*(8.0/2.7E1)+a5*c0*gamma_aa[index]*t24102*t24130*t24113*t24204*t24129*t24087* \
               t24096*(5.6E1/9.0)+c*c0*t24102*t24130*t24104*t24113*t24140*t24118*t24129*t24096*(4.0/9.0)+c*c0*t24102* \
               t24130*t24202*t24104*t24203*t24129*t24096*t24088*4.0+c*c0*t24102*t24130*t24104*t24113*t24212*t24129* \
               t24096*t24088*(2.0/3.0)-c*c0*t24102*t24201*t24130*t24104*t24127*t24129*t24096*t24088*(4.0/3.0)+c*c0* \
               t24102*t24130*t24104*t24113*t24224*t24129*t24096*t24088*(2.0/3.0)+c*c0*t24102*t24130*t24104*t24126* \
               t24118*t24127*t24129*t24096*(8.0/9.0)-c*c0*t24104*t24113*t24131*t24090*t24207*t24092*t24094*t24096* \
               (4.48E2/9.0)-c*c0*t24104*t24113*t24131*t24206*t24190*t24191*t24096*t24189*(4.096E3/2.7E1)+a5*c0*gamma_aa[index]* \
               t24102*t24121*t24130*t24113*t24140*t24129*t24087*t24096*(2.8E1/9.0)+a5*c0*gamma_aa[index]*t24102*t24121* \
               t24130*t24126*t24127*t24129*t24087*t24096*(5.6E1/9.0)-a5*c0*gamma_aa[index]*t24113*t24131*t24205*t24090* \
               t24092*t24094*t24087*t24096*(8.96E2/2.7E1)+c*c0*t24102*t24130*t24104*t24140*t24126*t24127*t24129*t24096* \
               t24088*(8.0/3.0)-c*c0*t24104*t24131*t24090*t24126*t24127*t24092*t24128*t24094*t24096*(2.56E2/9.0)+ \
               c*c0*t24102*t24130*t24104*t24113*t24090*t24207*t24092*t24129*t24094*t24096*(4.48E2/9.0)-c*c0*t24130* \
               t24104*t24113*t24131*t24090*t24207*t24092*t24129*t24094*t24096*(4.48E2/9.0)+c*c0*t24102*t24130*t24104* \
               t24113*t24206*t24190*t24191*t24129*t24096*t24189*(2.048E3/2.7E1)-c*c0*t24130*t24104*t24113*t24131* \
               t24206*t24190*t24191*t24129*t24096*t24189*(4.096E3/2.7E1)+c*c0*t24130*t24104*t24113*t24213*t24206* \
               t24190*t24191*t24129*t24096*t24189*(1.024E3/9.0)+a5*c0*gamma_aa[index]*t24102*t24130*t24113*t24205* \
               t24090*t24092*t24129*t24094*t24087*t24096*(8.96E2/2.7E1)-a5*c0*gamma_aa[index]*t24130*t24113*t24131* \
               t24205*t24090*t24092*t24129*t24094*t24087*t24096*(8.96E2/2.7E1)+c*c0*t24102*t24130*t24104*t24113*t24140* \
               t24090*t24092*t24128*t24129*t24094*t24096*(1.28E2/9.0)-c*c0*t24130*t24104*t24113*t24131*t24140*t24090* \
               t24092*t24128*t24129*t24094*t24096*(1.28E2/9.0)+c*c0*t24102*t24130*t24104*t24090*t24126*t24127*t24092* \
               t24128*t24129*t24094*t24096*(2.56E2/9.0)-c*c0*t24130*t24104*t24131*t24090*t24126*t24127*t24092*t24128* \
               t24129*t24094*t24096*(2.56E2/9.0))-t24143*t24225*t24146*(t24152*t24117*t24246*3.0-t24117*t24247*t24248* \
               (3.0/2.0)-t24102*t24120*t24090*t24092*t24094*t24249*(6.08E2/3.0)+t24120*t24131*t24250*t24190*t24191* \
               t24189*(1.024E3/3.0)+c*c0*t24102*t24104*t24113*t24096*t24098*(1.6E1/9.0)-t24102*t24151*t24152*t24090* \
               t24153*t24092*t24094*3.2E1+a5*c0*gamma_aa[index]*t24102*t24113*t24204*t24087*t24096*(1.12E2/3.0)+c* \
               c0*t24102*t24202*t24104*t24203*t24096*t24088*2.4E1-c*c0*t24102*t24201*t24104*t24127*t24096*t24088* \
               8.0+c*c0*t24102*t24104*t24126*t24118*t24127*t24096*(1.6E1/3.0)+a5*c0*gamma_aa[index]*t24102*t24121* \
               t24126*t24127*t24087*t24096*(1.12E2/3.0)+c*c0*t24102*t24104*t24113*t24090*t24207*t24092*t24094*t24096* \
               (8.96E2/3.0)-c*c0*t24104*t24113*t24131*t24090*t24207*t24092*t24094*t24096*(8.96E2/3.0)+c*c0*t24102* \
               t24104*t24113*t24206*t24190*t24191*t24096*t24189*(4.096E3/9.0)-c*c0*t24104*t24113*t24131*t24206*t24190* \
               t24191*t24096*t24189*(8.192E3/9.0)+c*c0*t24104*t24113*t24213*t24206*t24190*t24191*t24096*t24189*(2.048E3/ \
               3.0)+a5*c0*gamma_aa[index]*t24102*t24113*t24205*t24090*t24092*t24094*t24087*t24096*(1.792E3/9.0)-a5* \
               c0*gamma_aa[index]*t24113*t24131*t24205*t24090*t24092*t24094*t24087*t24096*(1.792E3/9.0)+c*c0*t24102* \
               t24104*t24090*t24126*t24127*t24092*t24128*t24094*t24096*(5.12E2/3.0)-c*c0*t24104*t24131*t24090*t24126* \
               t24127*t24092*t24128*t24094*t24096*(5.12E2/3.0))-t24231*t24143*t24225*t24182*2.0-t24231*t24225*t24146* \
               t24188*2.0+(t24231*t24231)*1.0/(t24134*t24134*t24134)*t24143*t24146*2.0+t24212*t24251*t24252*t24253* \
               t24209*t24254*t24255*t24097*(3.0/2.0)-t24140*t24251*t24252*t24253*t24209*t24254*t24166*t24097*(1.0/ \
               2.0)+t24224*t24251*t24252*t24253*t24209*t24254*t24255*t24097*(3.0/2.0)-t24112*t24140*t24251*t24126* \
               t24252*t24253*t24209*t24255*t24097*3.0+t24101*t24140*t24251*t24090*t24252*t24261*t24092*t24209*t24254* \
               t24094*t24097*1.6E1-t24140*t24251*t24090*t24252*t24261*t24253*t24092*t24209*t24254*t24094*t24097*1.6E1- \
               a5*gamma_aa[index]*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*1.0/(t24104*t24104)*t24140*t24251* \
               t24252*t24253*t24271*t24254*t24087*(7.0/2.0))*(1.0/2.0)-c0*rho_a[index]*t24171*t24280*t24264*t24285- \
               c0*rho_a[index]*t24171*t24292*t24285*t24287+c0*rho_a[index]*t24171*(t24280*t24280)*t24264*t24267*(1.0/ \
               2.0)-c0*rho_a[index]*t24171*t24267*t24287*(c*c0*t24098*(8.0/2.7E1)-t24161*t24172*t24158*(a1*gamma_aa[index]* \
               t24204*t24087*(8.8E1/9.0)+t24090*t24092*t24249*t24089*(3.04E2/9.0))*1.0E5+t24161*t24090*t24153*t24270* \
               t24172*t24092*t24158*t24089*(3.2E6/3.0)+t24161*t24090*t24172*t24092*t24164*t24158*t24249*t24089*(3.04E7/ \
               9.0)-t24250*t24161*t24172*t24190*t24164*t24191*t24158*(t24089*t24089)*(2.56E7/9.0)-(a3*a3)*1.0/pow(t24160,5.0/ \
               2.0)*t24090*t24172*t24271*t24092*t24128*t24164*t24158*(1.225E6/3.0)+kab1*(rab1*rab1)*t24161*t24162* \
               t24172*t24164*1.0/pow(t24093,2.0/5.0)*t24156*t24165*(6.4E4/9.0)+a3*gamma_aa[index]*t24270*t24172*t24208* \
               t24273*t24158*t24087*t24097*(7.0E5/3.0)-c*kab1*rab1*t24161*t24270*t24118*t24172*t24272*t24156*(1.6E5/ \
               3.0)-c*kab1*rab1*t24161*t24172*t24164*t24272*t24156*t24098*(3.2E5/9.0)+kab1*rab1*t24161*t24162*t24172* \
               t24164*t24156*t24165*t24195*(1.6E4/9.0)+a3*gamma_aa[index]*1.0/pow(rho_a[index],1.3E1/3.0)*t24172* \
               t24164*t24273*t24158*t24087*t24097*(3.5E6/9.0)+a3*gamma_aa[index]*kab1*rab1*t24204*t24172*t24164*t24272* \
               t24156*t24273*t24087*(5.6E5/9.0)-a3*gamma_aa[index]*1.0/pow(rho_a[index],2.9E1/3.0)*t24090*t24172* \
               t24092*t24164*t24273*t24158*t24087*t24097*t24089*(1.12E7/9.0)+c*kab1*rab1*t24161*t24090*t24207*t24172* \
               t24092*t24164*t24272*t24156*t24089*(2.56E6/9.0))*(1.0/2.0)-c0*rho_a[index]*t24171*t24264*t24267*(t24170* \
               t24162*t24165*(1.0E1/9.0)-t24165*t24274*t24276*t24279*(8.0/3.0)+t24165*t24166*1.0/(t24169*t24169*t24169* \
               t24169)*(t24279*t24279)*6.0-t24165*t24166*t24276*(c*k2*t24098*(4.0/9.0)+c*k1*t24122*t24098*(2.0/9.0) \
               -k1*t24162*t24165*t24197*(1.0/3.6E1))*2.0)*(1.0/2.0)- 0.0 +c0*rho_a[index]*t24171*t24280*t24292*t24267* \
               t24287;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t21453 = tspi_m13*tspi_m13;
            double t21454 = 1.0/pow(rho_a[index],1.0/3.0);
            double t21455 = a2*a2;
            double t21456 = gamma_aa[index]*gamma_aa[index];
            double t21457 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t21458 = t21453*t21453;
            double t21459 = c*t21454;
            double t21460 = pow(t21459,4.0/5.0);
            double t21474 = rab1*t21460;
            double t21461 = exp(-t21474);
            double t21462 = t21461-1.0;
            double t21475 = kab1*t21462;
            double t21463 = kab0-t21475;
            double t21464 = 1.0/c;
            double t21465 = 1.0/pow(rho_a[index],7.0/3.0);
            double t21466 = a3*gamma_aa[index]*t21453*t21464*t21465;
            double t21467 = t21466+1.0;
            double t21468 = t21455*t21456*t21457*t21458;
            double t21469 = 1.0/pow(rho_a[index],8.0/3.0);
            double t21470 = a1*gamma_aa[index]*t21453*t21469;
            double t21471 = t21470+t21468+1.0;
            double t21472 = t21455*t21456*t21457*t21458*2.0;
            double t21473 = exp(t21472);
            double t21476 = 1.0/(t21463*t21463);
            double t21477 = 1.0/(t21471*t21471);
            double t21478 = c*c0*t21454*t21473*t21467*t21476*t21477*(2.0/3.0);
            double t21479 = sqrt(t21478);
            double t21480 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t21481 = 1.0/pow(rho_a[index],4.0/3.0);
            double t21482 = exp(t21478);
            double t21483 = Ei(-t21478);
            double t21484 = c*c0*t21481*t21473*t21467*t21476*t21477*(2.0/9.0);
            double t21485 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t21486 = t21455*t21456*t21458*t21485*(1.6E1/3.0);
            double t21487 = a1*gamma_aa[index]*t21453*t21480*(8.0/3.0);
            double t21488 = t21486+t21487;
            double t21489 = 1.0/(t21471*t21471*t21471);
            double t21490 = a3*c0*gamma_aa[index]*t21453*t21480*t21473*t21476*t21477*(1.4E1/9.0);
            double t21491 = 1.0/pow(rho_a[index],2.0E1/3.0);
            double t21492 = c*c0*t21455*t21473*t21491*t21456*t21458*t21467*t21476*t21477*(6.4E1/9.0);
            double t21493 = c*c;
            double t21494 = 1.0/pow(rho_a[index],5.0/3.0);
            double t21495 = 1.0/(t21463*t21463*t21463);
            double t21496 = 1.0/pow(t21459,1.0/5.0);
            double t21502 = c*c0*t21454*t21473*t21467*t21476*t21488*t21489*(4.0/3.0);
            double t21503 = c0*kab1*rab1*t21461*t21473*t21493*t21467*t21494*t21477*t21495*t21496*(1.6E1/4.5E1) \
               ;
            double t21497 = -t21502-t21503+t21490+t21492+t21484;
            double t21498 = t21479*6.0;
            double t21499 = c*c0*t21454*t21473*t21467*t21476*t21477*4.0;
            double t21500 = t21498+t21499+3.0;
            double t21501 = 1.0/t21500;
            double t21504 = c*c0*t21454*t21473*t21482*t21483*t21467*t21476*t21477*(2.0/3.0);
            double t21505 = t21504+1.0;
            double t21506 = t21479*4.0;
            double t21507 = c*c0*t21454*t21473*t21467*t21476*t21477*(8.0/3.0);
            double t21508 = t21506+t21507+6.0;
            double t21509 = 1.0/sqrt(t21478);
            double t21510 = 1.0/pow(rho_b[index],1.0/3.0);
            double t21511 = gamma_bb[index]*gamma_bb[index];
            double t21512 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t21513 = c*t21510;
            double t21514 = pow(t21513,4.0/5.0);
            double t21527 = rab1*t21514;
            double t21515 = exp(-t21527);
            double t21516 = t21515-1.0;
            double t21528 = kab1*t21516;
            double t21517 = kab0-t21528;
            double t21518 = 1.0/pow(rho_b[index],7.0/3.0);
            double t21519 = a3*gamma_bb[index]*t21453*t21464*t21518;
            double t21520 = t21519+1.0;
            double t21521 = t21511*t21512*t21455*t21458;
            double t21522 = 1.0/pow(rho_b[index],8.0/3.0);
            double t21523 = a1*gamma_bb[index]*t21522*t21453;
            double t21524 = t21521+t21523+1.0;
            double t21525 = t21511*t21512*t21455*t21458*2.0;
            double t21526 = exp(t21525);
            double t21529 = 1.0/(t21517*t21517);
            double t21530 = 1.0/(t21524*t21524);
            double t21531 = c*c0*t21510*t21520*t21530*t21526*t21529*(2.0/3.0);
            double t21532 = sqrt(t21531);
            double t21533 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t21534 = 1.0/pow(rho_b[index],4.0/3.0);
            double t21535 = exp(t21531);
            double t21536 = Ei(-t21531);
            double t21537 = c*c0*t21520*t21530*t21534*t21526*t21529*(2.0/9.0);
            double t21538 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t21539 = t21511*t21455*t21538*t21458*(1.6E1/3.0);
            double t21540 = a1*gamma_bb[index]*t21533*t21453*(8.0/3.0);
            double t21541 = t21540+t21539;
            double t21542 = 1.0/(t21524*t21524*t21524);
            double t21543 = a3*c0*gamma_bb[index]*t21530*t21533*t21453*t21526*t21529*(1.4E1/9.0);
            double t21544 = 1.0/pow(rho_b[index],2.0E1/3.0);
            double t21545 = c*c0*t21511*t21520*t21530*t21526*t21544*t21455*t21529*t21458*(6.4E1/9.0);
            double t21546 = 1.0/pow(rho_b[index],5.0/3.0);
            double t21547 = 1.0/(t21517*t21517*t21517);
            double t21548 = 1.0/pow(t21513,1.0/5.0);
            double t21554 = c*c0*t21510*t21520*t21541*t21542*t21526*t21529*(4.0/3.0);
            double t21555 = c0*kab1*rab1*t21520*t21530*t21515*t21526*t21546*t21493*t21547*t21548*(1.6E1/4.5E1) \
               ;
            double t21549 = t21543+t21545-t21554+t21537-t21555;
            double t21550 = t21532*6.0;
            double t21551 = c*c0*t21510*t21520*t21530*t21526*t21529*4.0;
            double t21552 = t21550+t21551+3.0;
            double t21553 = 1.0/t21552;
            double t21556 = c*c0*t21510*t21520*t21530*t21526*t21535*t21536*t21529*(2.0/3.0);
            double t21557 = t21556+1.0;
            double t21558 = t21532*4.0;
            double t21559 = c*c0*t21510*t21520*t21530*t21526*t21529*(8.0/3.0);
            double t21560 = t21558+t21559+6.0;
            double t21561 = 1.0/sqrt(t21531);
            double t21562 = 1.0/c0;
            double t21563 = exp(-t21468);
            double t21564 = 1.0/sqrt(t21467);
            double t21565 = t21471*t21463*t21563*t21564*1.0E5;
            double t21566 = exp(-t21521);
            double t21567 = 1.0/sqrt(t21520);
            double t21568 = t21524*t21517*t21566*t21567*1.0E5;
            v_rho_a_rho_b_[index] = ( (t21568-c*c0*t21510*(2.0/3.0) > 0.0) ?  c0*1.0*(t21553*t21557*(t21561*t21549* \
               2.0+c*c0*t21520*t21530*t21534*t21526*t21529*(8.0/9.0)+a3*c0*gamma_bb[index]*t21530*t21533*t21453*t21526* \
               t21529*(5.6E1/9.0)-c*c0*t21510*t21520*t21541*t21542*t21526*t21529*(1.6E1/3.0)+c*c0*t21511*t21520*t21530* \
               t21526*t21544*t21455*t21529*t21458*(2.56E2/9.0)-c0*kab1*rab1*t21520*t21530*t21515*t21526*t21546*t21493* \
               t21547*t21548*(6.4E1/4.5E1))+t21560*t21553*(t21543+t21545-t21554+t21537-t21555+c*c0*t21520*t21530* \
               t21534*t21526*t21535*t21536*t21529*(2.0/9.0)+a3*c0*gamma_bb[index]*t21530*t21533*t21453*t21526*t21535* \
               t21536*t21529*(1.4E1/9.0)-c*c0*t21510*t21520*t21541*t21542*t21526*t21535*t21536*t21529*(4.0/3.0)+c* \
               c0*t21510*t21520*t21530*t21526*t21535*t21536*t21529*t21549*(2.0/3.0)+c*c0*t21511*t21520*t21530*t21526* \
               t21535*t21544*t21455*t21536*t21529*t21458*(6.4E1/9.0)-c0*kab1*rab1*t21520*t21530*t21515*t21526*t21535* \
               t21536*t21546*t21493*t21547*t21548*(1.6E1/4.5E1))+t21535*t21536*t21549-t21560*1.0/(t21552*t21552)* \
               t21557*(t21561*t21549*3.0+c*c0*t21520*t21530*t21534*t21526*t21529*(4.0/3.0)+a3*c0*gamma_bb[index]* \
               t21530*t21533*t21453*t21526*t21529*(2.8E1/3.0)-c*c0*t21510*t21520*t21541*t21542*t21526*t21529*8.0+ \
               c*c0*t21511*t21520*t21530*t21526*t21544*t21455*t21529*t21458*(1.28E2/3.0)-c0*kab1*rab1*t21520*t21530* \
               t21515*t21526*t21546*t21493*t21547*t21548*(3.2E1/1.5E1))+(pow(rho_b[index],1.0/3.0)*(t21524*t21524) \
               *(t21517*t21517)*t21562*t21464*t21549*exp(-t21525)*(3.0/2.0))/t21520)*(-1.0/2.0) : 0.0 ) - ( (t21565- \
               c*c0*t21454*(2.0/3.0) > 0.0) ? c0*1.0*(t21501*t21505*(t21509*t21497*2.0+c*c0*t21481*t21473*t21467* \
               t21476*t21477*(8.0/9.0)+a3*c0*gamma_aa[index]*t21453*t21480*t21473*t21476*t21477*(5.6E1/9.0)-c*c0* \
               t21454*t21473*t21467*t21476*t21488*t21489*(1.6E1/3.0)+c*c0*t21455*t21473*t21491*t21456*t21458*t21467* \
               t21476*t21477*(2.56E2/9.0)-c0*kab1*rab1*t21461*t21473*t21493*t21467*t21494*t21477*t21495*t21496*(6.4E1/ \
               4.5E1))+t21501*t21508*(-t21502-t21503+t21490+t21492+t21484+c*c0*t21481*t21473*t21482*t21483*t21467* \
               t21476*t21477*(2.0/9.0)+a3*c0*gamma_aa[index]*t21453*t21480*t21473*t21482*t21483*t21476*t21477*(1.4E1/ \
               9.0)+c*c0*t21454*t21473*t21482*t21483*t21467*t21476*t21477*t21497*(2.0/3.0)-c*c0*t21454*t21473*t21482* \
               t21483*t21467*t21476*t21488*t21489*(4.0/3.0)+c*c0*t21455*t21473*t21482*t21491*t21456*t21483*t21458* \
               t21467*t21476*t21477*(6.4E1/9.0)-c0*kab1*rab1*t21461*t21473*t21482*t21483*t21493*t21467*t21494*t21477* \
               t21495*t21496*(1.6E1/4.5E1))+t21482*t21483*t21497-1.0/(t21500*t21500)*t21505*t21508*(t21509*t21497* \
               3.0+c*c0*t21481*t21473*t21467*t21476*t21477*(4.0/3.0)+a3*c0*gamma_aa[index]*t21453*t21480*t21473*t21476* \
               t21477*(2.8E1/3.0)-c*c0*t21454*t21473*t21467*t21476*t21488*t21489*8.0+c*c0*t21455*t21473*t21491*t21456* \
               t21458*t21467*t21476*t21477*(1.28E2/3.0)-c0*kab1*rab1*t21461*t21473*t21493*t21467*t21494*t21477*t21495* \
               t21496*(3.2E1/1.5E1))+(pow(rho_a[index],1.0/3.0)*(t21471*t21471)*(t21463*t21463)*t21562*t21464*t21497* \
               exp(-t21472)*(3.0/2.0))/t21467)*(1.0/2.0) : 0.0 ) + 0.0 + 0.0 ;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t21570 = tspi_m13*tspi_m13;
            double t21571 = 1.0/pow(rho_b[index],1.0/3.0);
            double t21572 = a2*a2;
            double t21573 = gamma_bb[index]*gamma_bb[index];
            double t21574 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t21575 = t21570*t21570;
            double t21576 = c*t21571;
            double t21577 = a4*a4;
            double t21578 = 1.0/c;
            double t21579 = 1.0/pow(rho_b[index],7.0/3.0);
            double t21580 = sqrt(t21576);
            double t21581 = t21573*t21574*t21575*t21577*2.0;
            double t21582 = exp(t21581);
            double t21583 = t21573*t21574*t21575*t21577;
            double t21584 = t21583+1.0;
            double t21585 = a5*gamma_bb[index]*t21570*t21578*t21579;
            double t21586 = t21585+1.0;
            double t21597 = raa2*t21580;
            double t21587 = exp(-t21597);
            double t21588 = t21587-1.0;
            double t21589 = kaa2*t21588;
            double t21590 = pow(t21576,2.0/5.0);
            double t21598 = raa1*t21590;
            double t21591 = exp(-t21598);
            double t21592 = t21591-1.0;
            double t21593 = kaa1*t21592;
            double t21594 = -kaa0+t21593+t21589;
            double t21595 = 1.0/(t21594*t21594);
            double t21596 = 1.0/t21584;
            double t21599 = 1.0/pow(rho_b[index],4.0/3.0);
            double t21600 = c*c0*t21571*t21582*t21586*t21595*(2.0/3.0);
            double t21601 = 1.0/(t21584*t21584);
            double t21602 = sqrt(t21600);
            double t21603 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t21604 = 1.0/sqrt(t21576);
            double t21605 = c*kaa2*raa2*t21604*t21587*t21599*(1.0/6.0);
            double t21606 = 1.0/pow(t21576,3.0/5.0);
            double t21607 = c*kaa1*raa1*t21606*t21591*t21599*(2.0/1.5E1);
            double t21608 = t21605+t21607;
            double t21609 = 1.0/(t21594*t21594*t21594);
            double t21610 = 1.0/pow(rho_b[index],2.0E1/3.0);
            double t21611 = c*c0*t21601*t21571*t21582*t21586*t21595*(2.0/3.0);
            double t21612 = exp(t21611);
            double t21613 = Ei(-t21611);
            double t21614 = c*c0*t21601*t21582*t21586*t21595*t21599*(2.0/9.0);
            double t21615 = a5*c0*gamma_bb[index]*t21601*t21603*t21570*t21582*t21595*(1.4E1/9.0);
            double t21616 = c*c0*t21601*t21571*t21608*t21582*t21609*t21586*(4.0/3.0);
            double t21617 = 1.0/(t21584*t21584*t21584);
            double t21618 = c*c0*t21601*t21610*t21573*t21582*t21575*t21577*t21586*t21595*(6.4E1/9.0);
            double t21619 = t21602*t21596*6.0;
            double t21620 = c*c0*t21601*t21571*t21582*t21586*t21595*4.0;
            double t21621 = t21620+t21619+3.0;
            double t21622 = 1.0/t21621;
            double t21623 = 1.0/sqrt(t21600);
            double t21624 = c*c;
            double t21625 = 1.0/pow(rho_b[index],8.0/3.0);
            double t21626 = c*c0*t21582*t21586*t21595*t21599*(2.0/9.0);
            double t21627 = a5*c0*gamma_bb[index]*t21603*t21570*t21582*t21595*(1.4E1/9.0);
            double t21628 = c*c0*t21571*t21608*t21582*t21609*t21586*(4.0/3.0);
            double t21629 = c*c0*t21610*t21573*t21582*t21575*t21577*t21586*t21595*(6.4E1/9.0);
            double t21630 = t21626+t21627+t21628+t21629;
            double t21631 = t21577*t21577;
            double t21632 = t21573*t21573;
            double t21633 = t21575*t21575;
            double t21634 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t21635 = raa2*raa2;
            double t21636 = c*kaa2*t21635*t21587*t21579*(1.0/3.6E1);
            double t21637 = raa1*raa1;
            double t21638 = 1.0/pow(t21576,6.0/5.0);
            double t21639 = kaa1*t21624*t21625*t21591*t21637*t21638*(4.0/2.25E2);
            double t21640 = 1.0/pow(t21576,3.0/2.0);
            double t21641 = kaa2*raa2*t21640*t21624*t21625*t21587*(1.0/3.6E1);
            double t21642 = 1.0/pow(t21576,8.0/5.0);
            double t21643 = kaa1*raa1*t21624*t21642*t21625*t21591*(2.0/7.5E1);
            double t21653 = c*kaa2*raa2*t21604*t21587*t21579*(2.0/9.0);
            double t21654 = c*kaa1*raa1*t21606*t21591*t21579*(8.0/4.5E1);
            double t21644 = t21641+t21643-t21653+t21636-t21654+t21639;
            double t21645 = t21608*t21608;
            double t21646 = 1.0/(t21594*t21594*t21594*t21594);
            double t21647 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t21648 = 1.0/pow(rho_b[index],1.0E1);
            double t21649 = 1.0/pow(rho_b[index],1.3E1);
            double t21650 = 1.0/pow(rho_b[index],2.3E1/3.0);
            double t21652 = c*c0*t21610*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(6.4E1/9.0);
            double t21651 = t21614+t21615+t21616-t21652+t21618;
            double t21655 = t21651*t21651;
            double t21656 = 1.0/(t21584*t21584*t21584*t21584);
            double t21657 = c*c0*t21601*t21582*t21586*t21595*t21579*(8.0/2.7E1);
            double t21658 = c*c0*t21601*t21571*t21582*t21645*t21646*t21586*4.0;
            double t21659 = a5*c0*gamma_bb[index]*t21601*t21570*t21582*t21647*t21595*(5.6E1/9.0);
            double t21660 = c*c0*t21601*t21608*t21582*t21609*t21586*t21599*(8.0/9.0);
            double t21661 = a5*c0*gamma_bb[index]*t21601*t21603*t21570*t21608*t21582*t21609*(5.6E1/9.0);
            double t21662 = a5*c0*gamma_bb[index]*t21601*t21570*t21573*t21582*t21575*t21648*t21577*t21595*(8.96E2/ \
               2.7E1);
            double t21663 = c*c0*t21601*t21631*t21632*t21633*t21582*t21586*t21595*t21649*(2.048E3/2.7E1);
            double t21664 = c*c0*t21631*t21632*t21633*t21582*t21656*t21586*t21595*t21649*(1.024E3/9.0);
            double t21665 = c*c0*t21601*t21650*t21573*t21582*t21575*t21577*t21586*t21595*(4.48E2/9.0);
            double t21666 = c*c0*t21601*t21610*t21608*t21573*t21582*t21609*t21575*t21577*t21586*(2.56E2/9.0);
            double t21714 = c*c0*t21601*t21571*t21644*t21582*t21609*t21586*(4.0/3.0);
            double t21715 = a5*c0*gamma_bb[index]*t21570*t21617*t21573*t21582*t21575*t21648*t21577*t21595*(8.96E2/ \
               2.7E1);
            double t21716 = c*c0*t21631*t21632*t21633*t21617*t21582*t21586*t21595*t21649*(4.096E3/2.7E1);
            double t21717 = c*c0*t21650*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(4.48E2/9.0);
            double t21718 = c*c0*t21610*t21608*t21617*t21573*t21582*t21609*t21575*t21577*t21586*(2.56E2/9.0);
            double t21667 = t21660-t21714+t21661-t21715+t21662-t21716+t21663-t21717+t21664-t21718+t21665+t21657+ \
               t21666+t21658+t21659;
            double t21668 = c*c0*t21601*t21612*t21613*t21571*t21582*t21586*t21595*(2.0/3.0);
            double t21669 = t21668+1.0;
            double t21670 = t21630*t21623*t21596*2.0;
            double t21671 = c*c0*t21601*t21582*t21586*t21595*t21599*(8.0/9.0);
            double t21672 = a5*c0*gamma_bb[index]*t21601*t21603*t21570*t21582*t21595*(5.6E1/9.0);
            double t21673 = c*c0*t21601*t21571*t21608*t21582*t21609*t21586*(1.6E1/3.0);
            double t21674 = c*c0*t21601*t21610*t21573*t21582*t21575*t21577*t21586*t21595*(2.56E2/9.0);
            double t21736 = t21601*t21602*t21634*t21573*t21575*t21577*(6.4E1/3.0);
            double t21737 = c*c0*t21610*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(2.56E2/9.0);
            double t21675 = t21670+t21671+t21672+t21673-t21736+t21674-t21737;
            double t21676 = 1.0/(t21621*t21621);
            double t21677 = t21602*t21596*4.0;
            double t21678 = c*c0*t21601*t21571*t21582*t21586*t21595*(8.0/3.0);
            double t21679 = t21677+t21678+6.0;
            double t21680 = t21630*t21623*t21596*3.0;
            double t21681 = c*c0*t21601*t21582*t21586*t21595*t21599*(4.0/3.0);
            double t21682 = a5*c0*gamma_bb[index]*t21601*t21603*t21570*t21582*t21595*(2.8E1/3.0);
            double t21683 = c*c0*t21601*t21571*t21608*t21582*t21609*t21586*8.0;
            double t21684 = c*c0*t21601*t21610*t21573*t21582*t21575*t21577*t21586*t21595*(1.28E2/3.0);
            double t21705 = t21601*t21602*t21634*t21573*t21575*t21577*3.2E1;
            double t21706 = c*c0*t21610*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(1.28E2/3.0);
            double t21685 = -t21705-t21706+t21680+t21681+t21682+t21683+t21684;
            double t21686 = c*c0*t21601*t21612*t21613*t21582*t21586*t21595*t21599*(2.0/9.0);
            double t21687 = c*c0*t21601*t21612*t21613*t21571*t21608*t21582*t21609*t21586*(4.0/3.0);
            double t21688 = c*c0*t21601*t21612*t21613*t21651*t21571*t21582*t21586*t21595*(2.0/3.0);
            double t21689 = a5*c0*gamma_bb[index]*t21601*t21603*t21612*t21613*t21570*t21582*t21595*(1.4E1/9.0) \
               ;
            double t21690 = c*c0*t21601*t21610*t21612*t21613*t21573*t21582*t21575*t21577*t21586*t21595*(6.4E1/ \
               9.0);
            double t21691 = c*c0*t21582*t21586*t21595*t21579*(8.0/2.7E1);
            double t21692 = a5*c0*gamma_bb[index]*t21570*t21582*t21647*t21595*(5.6E1/9.0);
            double t21693 = c*c0*t21608*t21582*t21609*t21586*t21599*(8.0/9.0);
            double t21694 = c*c0*t21571*t21582*t21645*t21646*t21586*4.0;
            double t21695 = a5*c0*gamma_bb[index]*t21570*t21573*t21582*t21575*t21648*t21577*t21595*(8.96E2/2.7E1) \
               ;
            double t21696 = a5*c0*gamma_bb[index]*t21603*t21570*t21608*t21582*t21609*(5.6E1/9.0);
            double t21697 = c*c0*t21631*t21632*t21633*t21582*t21586*t21595*t21649*(2.048E3/2.7E1);
            double t21698 = c*c0*t21650*t21573*t21582*t21575*t21577*t21586*t21595*(4.48E2/9.0);
            double t21699 = c*c0*t21610*t21608*t21573*t21582*t21609*t21575*t21577*t21586*(2.56E2/9.0);
            double t21700 = t21691+t21692+t21693+t21694+t21695+t21696+t21697+t21698+t21699-c*c0*t21571*t21644* \
               t21582*t21609*t21586*(4.0/3.0);
            double t21701 = t21630*t21630;
            double t21702 = 1.0/pow(t21600,3.0/2.0);
            double t21703 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t21704 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t21707 = 1.0/pow(rho_b[index],2.0/3.0);
            double t21708 = 1.0/t21586;
            double t21709 = 1.0/c0;
            double t21710 = exp(-t21581);
            double t21711 = t21584*t21584;
            double t21712 = t21594*t21594;
            double t21713 = pow(rho_b[index],1.0/3.0);
            double t21719 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]) \
               ;
            double t21738 = c*c0*t21610*t21612*t21613*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(6.4E1/ \
               9.0);
            double t21720 = t21614+t21615+t21616-t21652+t21618+t21690-t21738+t21686+t21687+t21688+t21689;
            double t21721 = t21572*t21573*t21574*t21575;
            double t21722 = pow(t21576,4.0/5.0);
            double t21740 = rab1*t21722;
            double t21723 = exp(-t21740);
            double t21724 = t21723-1.0;
            double t21741 = kab1*t21724;
            double t21725 = kab0-t21741;
            double t21726 = a3*gamma_bb[index]*t21570*t21578*t21579;
            double t21727 = t21726+1.0;
            double t21728 = 1.0/sqrt(t21727);
            double t21729 = a1*gamma_bb[index]*t21570*t21625;
            double t21730 = t21721+t21729+1.0;
            double t21731 = k1*t21580;
            double t21732 = c*k2*t21571;
            double t21733 = t21731+t21732;
            double t21734 = 1.0/(t21733*t21733);
            double t21743 = t21624*t21707*t21734;
            double t21735 = exp(-t21743);
            double t21739 = exp(-t21721);
            double t21742 = t21730*t21725*t21728*t21739*1.0E5;
            double t21744 = t21622*t21675*t21669;
            double t21745 = t21612*t21613*t21651;
            double t21746 = t21720*t21622*t21679;
            double t21747 = t21710*t21711*t21712*t21713*t21651*t21708*t21709*t21578*(3.0/2.0);
            double t21885 = t21676*t21685*t21669*t21679;
            double t21748 = t21744+t21745+t21746+t21747-t21885;
            double t21749 = 1.0/pow(rho_b[index],1.0E1/3.0);
            double t21750 = c*c0*t21571*(2.0/3.0);
            double t21751 = 1.0/(t21733*t21733*t21733);
            double t21752 = c*k2*t21599*(1.0/3.0);
            double t21753 = c*k1*t21604*t21599*(1.0/6.0);
            double t21754 = t21752+t21753;
            double t21755 = 1.0/pow(rho_b[index],5.0/3.0);
            double t21756 = -t21750+t21742;
            double t21757 = ( (t21756 > 0.0) ?  1.0 : 0.0 ) ;
            double t21758 = t21612*t21613;
            double t21759 = t21622*t21669*t21679;
            double t21760 = t21758+t21759;
            double t21761 = t21624*t21734*t21755*(2.0/3.0);
            double t21775 = t21624*t21751*t21707*t21754*2.0;
            double t21762 = t21761-t21775;
            double t21763 = t21750-t21742;
            double t21764 = c*c0*t21599*(2.0/9.0);
            double t21765 = t21634*t21572*t21573*t21575*(1.6E1/3.0);
            double t21766 = a1*gamma_bb[index]*t21603*t21570*(8.0/3.0);
            double t21767 = t21765+t21766;
            double t21768 = t21730*t21634*t21572*t21725*t21573*t21575*t21728*t21739*(1.6E6/3.0);
            double t21769 = 1.0/pow(t21576,1.0/5.0);
            double t21770 = 1.0/pow(t21727,3.0/2.0);
            double t21771 = a3*gamma_bb[index]*t21730*t21570*t21725*t21770*t21739*t21578*t21749*(3.5E5/3.0);
            double t21776 = t21725*t21728*t21739*t21767*1.0E5;
            double t21777 = c*kab1*rab1*t21730*t21723*t21728*t21739*t21769*t21599*(8.0E4/3.0);
            double t21772 = t21771+t21764-t21776+t21768-t21777;
            double t21773 = 0.0 ;
            double t21774 = 1.0/(c*c);
            double t21778 = t21572*t21573*t21574*t21575*2.0;
            double t21779 = exp(t21778);
            double t21780 = 1.0/(t21725*t21725);
            double t21781 = 1.0/(t21730*t21730);
            double t21782 = c*c0*t21571*t21780*t21727*t21781*t21779*(2.0/3.0);
            double t21783 = sqrt(t21782);
            double t21784 = 1.0/rho_b[index];
            double t21785 = c*c0*t21780*t21727*t21781*t21599*t21779*(2.0/9.0);
            double t21786 = 1.0/(t21730*t21730*t21730);
            double t21787 = a3*c0*gamma_bb[index]*t21603*t21570*t21780*t21781*t21779*(1.4E1/9.0);
            double t21788 = c*c0*t21610*t21572*t21573*t21780*t21727*t21781*t21575*t21779*(6.4E1/9.0);
            double t21789 = 1.0/(t21725*t21725*t21725);
            double t21791 = c*c0*t21571*t21780*t21727*t21767*t21786*t21779*(4.0/3.0);
            double t21792 = c0*kab1*rab1*t21624*t21723*t21727*t21781*t21755*t21769*t21779*t21789*(1.6E1/4.5E1) \
               ;
            double t21790 = -t21791-t21792+t21785+t21787+t21788;
            double t21793 = t21703*t21572*t21573*t21575*(3.04E2/9.0);
            double t21794 = a1*gamma_bb[index]*t21570*t21647*(8.8E1/9.0);
            double t21795 = t21793+t21794;
            double t21796 = exp(t21782);
            double t21797 = Ei(-t21782);
            double t21798 = c*c0*t21780*t21727*t21781*t21579*t21779*(8.0/2.7E1);
            double t21799 = t21767*t21767;
            double t21800 = 1.0/(t21730*t21730*t21730*t21730);
            double t21801 = c*c0*t21800*t21571*t21780*t21727*t21779*t21799*4.0;
            double t21802 = a3*c0*gamma_bb[index]*t21570*t21780*t21781*t21647*t21779*(5.6E1/9.0);
            double t21803 = a3*c0*gamma_bb[index]*t21570*t21572*t21573*t21780*t21781*t21575*t21648*t21779*(8.96E2/ \
               2.7E1);
            double t21804 = t21572*t21572;
            double t21805 = rab1*rab1;
            double t21806 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t21807 = 1.0/pow(t21576,2.0/5.0);
            double t21808 = t21790*t21790;
            double t21809 = c*c0*t21632*t21633*t21804*t21780*t21727*t21781*t21649*t21779*(2.048E3/2.7E1);
            double t21810 = c*c0*t21650*t21572*t21573*t21780*t21727*t21781*t21575*t21779*(4.48E2/9.0);
            double t21811 = c*c0*kab1*t21624*t21723*t21805*t21806*t21807*t21727*t21781*t21779*t21789*(6.4E1/6.75E2) \
               ;
            double t21812 = kab1*kab1;
            double t21819 = rab1*t21722*2.0;
            double t21813 = exp(-t21819);
            double t21814 = 1.0/(t21725*t21725*t21725*t21725);
            double t21815 = c*c0*t21812*t21624*t21813*t21805*t21814*t21806*t21807*t21727*t21781*t21779*(6.4E1/ \
               2.25E2);
            double t21816 = c*c0*kab1*rab1*t21624*t21723*t21806*t21727*t21781*t21638*t21779*t21789*(1.6E1/6.75E2) \
               ;
            double t21817 = c0*kab1*rab1*t21624*t21723*t21727*t21755*t21767*t21786*t21769*t21779*t21789*(6.4E1/ \
               4.5E1);
            double t21818 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]);
            double t21820 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t21821 = t21783*6.0;
            double t21822 = c*c0*t21571*t21780*t21727*t21781*t21779*4.0;
            double t21823 = t21821+t21822+3.0;
            double t21824 = 1.0/t21823;
            double t21826 = c*c0*t21780*t21727*t21767*t21786*t21599*t21779*(8.0/9.0);
            double t21827 = c*c0*t21571*t21780*t21727*t21786*t21795*t21779*(4.0/3.0);
            double t21828 = a3*c0*gamma_bb[index]*t21603*t21570*t21780*t21767*t21786*t21779*(5.6E1/9.0);
            double t21829 = c*c0*t21610*t21572*t21573*t21780*t21727*t21575*t21767*t21786*t21779*(2.56E2/9.0);
            double t21830 = c0*kab1*rab1*t21624*t21723*t21625*t21727*t21781*t21769*t21779*t21789*(3.2E1/4.5E1) \
               ;
            double t21831 = a3*c*c0*gamma_bb[index]*kab1*rab1*t21570*t21723*t21781*t21818*t21769*t21779*t21789* \
               (2.24E2/1.35E2);
            double t21832 = c0*kab1*rab1*t21820*t21624*t21723*t21572*t21573*t21727*t21781*t21575*t21769*t21779* \
               t21789*(1.024E3/1.35E2);
            double t21825 = t21801+t21810+t21802+t21811+t21803-t21830-t21831-t21832+t21815+t21816+t21817-t21826+ \
               t21809-t21827-t21828-t21829+t21798;
            double t21833 = 1.0/sqrt(t21782);
            double t21834 = t21783*4.0;
            double t21835 = c*c0*t21571*t21780*t21727*t21781*t21779*(8.0/3.0);
            double t21836 = t21834+t21835+6.0;
            double t21837 = c*c0*t21780*t21727*t21781*t21796*t21599*t21779*t21797*(2.0/9.0);
            double t21838 = a3*c0*gamma_bb[index]*t21603*t21570*t21780*t21781*t21796*t21779*t21797*(1.4E1/9.0) \
               ;
            double t21839 = c*c0*t21571*t21780*t21727*t21781*t21790*t21796*t21779*t21797*(2.0/3.0);
            double t21840 = c*c0*t21610*t21572*t21573*t21780*t21727*t21781*t21575*t21796*t21779*t21797*(6.4E1/ \
               9.0);
            double t21862 = c*c0*t21571*t21780*t21727*t21767*t21786*t21796*t21779*t21797*(4.0/3.0);
            double t21863 = c0*kab1*rab1*t21624*t21723*t21727*t21781*t21755*t21769*t21796*t21779*t21797*t21789* \
               (1.6E1/4.5E1);
            double t21841 = t21840-t21862-t21791-t21863-t21792+t21837+t21838+t21785+t21839+t21787+t21788;
            double t21842 = c*c0*t21571*t21780*t21727*t21781*t21796*t21779*t21797*(2.0/3.0);
            double t21843 = t21842+1.0;
            double t21844 = 1.0/(t21823*t21823);
            double t21845 = 1.0/pow(t21782,3.0/2.0);
            double t21846 = t21833*t21790*3.0;
            double t21847 = c*c0*t21780*t21727*t21781*t21599*t21779*(4.0/3.0);
            double t21848 = a3*c0*gamma_bb[index]*t21603*t21570*t21780*t21781*t21779*(2.8E1/3.0);
            double t21849 = c*c0*t21610*t21572*t21573*t21780*t21727*t21781*t21575*t21779*(1.28E2/3.0);
            double t21851 = c*c0*t21571*t21780*t21727*t21767*t21786*t21779*8.0;
            double t21852 = c0*kab1*rab1*t21624*t21723*t21727*t21781*t21755*t21769*t21779*t21789*(3.2E1/1.5E1) \
               ;
            double t21850 = -t21851-t21852+t21846+t21847+t21848+t21849;
            double t21853 = t21833*t21790*2.0;
            double t21854 = c*c0*t21780*t21727*t21781*t21599*t21779*(8.0/9.0);
            double t21855 = a3*c0*gamma_bb[index]*t21603*t21570*t21780*t21781*t21779*(5.6E1/9.0);
            double t21856 = c*c0*t21610*t21572*t21573*t21780*t21727*t21781*t21575*t21779*(2.56E2/9.0);
            double t21864 = c*c0*t21571*t21780*t21727*t21767*t21786*t21779*(1.6E1/3.0);
            double t21865 = c0*kab1*rab1*t21624*t21723*t21727*t21781*t21755*t21769*t21779*t21789*(6.4E1/4.5E1) \
               ;
            double t21857 = t21853+t21854+t21855-t21864+t21856-t21865;
            double t21858 = 1.0/t21727;
            double t21859 = exp(-t21778);
            double t21860 = t21725*t21725;
            double t21861 = t21730*t21730;
            double t21866 = 0.0 ;
            double t21867 = t21772*t21772;
            double t21868 = t21796*t21797;
            double t21869 = t21824*t21843*t21836;
            double t21870 = t21868+t21869;
            double t21871 = c*c0*t21579*(8.0/2.7E1);
            double t21872 = t21703*t21730*t21572*t21725*t21573*t21575*t21728*t21739*(3.04E7/9.0);
            double t21873 = t21634*t21572*t21725*t21573*t21575*t21728*t21739*t21767*(3.2E6/3.0);
            double t21874 = kab1*t21730*t21624*t21723*t21625*t21805*t21807*t21728*t21739*(6.4E4/9.0);
            double t21875 = a3*a3;
            double t21876 = 1.0/pow(t21727,5.0/2.0);
            double t21877 = 1.0/pow(rho_b[index],1.3E1/3.0);
            double t21878 = a3*gamma_bb[index]*t21730*t21570*t21725*t21770*t21739*t21578*t21877*(3.5E6/9.0);
            double t21879 = a3*gamma_bb[index]*t21570*t21725*t21770*t21739*t21578*t21749*t21767*(7.0E5/3.0);
            double t21880 = kab1*rab1*t21730*t21624*t21723*t21625*t21638*t21728*t21739*(1.6E4/9.0);
            double t21881 = 1.0/pow(rho_b[index],2.9E1/3.0);
            double t21882 = a3*gamma_bb[index]*kab1*rab1*t21730*t21570*t21723*t21770*t21647*t21739*t21769*(5.6E5/ \
               9.0);
            double t21883 = c*kab1*rab1*t21730*t21650*t21723*t21572*t21573*t21575*t21728*t21739*t21769*(2.56E6/ \
               9.0);
            double t21884 = t21871+t21880+t21872+t21873+t21882+t21874+t21883+t21878+t21879-t21725*t21728*t21739* \
               t21795*1.0E5-t21730*t21632*t21704*t21633*t21804*t21725*t21728*t21739*(2.56E7/9.0)-c*kab1*rab1*t21730* \
               t21723*t21728*t21739*t21579*t21769*(3.2E5/9.0)-c*kab1*rab1*t21723*t21728*t21739*t21767*t21769*t21599* \
               (1.6E5/3.0)-t21610*t21730*t21725*t21573*t21575*t21774*t21739*t21875*t21876*(1.225E6/3.0)-a3*gamma_bb[index]* \
               t21730*t21570*t21572*t21725*t21770*t21573*t21575*t21881*t21739*t21578*(1.12E7/9.0);
            v_rho_b_rho_b_[index] = -rho_a[index]*(c0*t21757*(t21824*t21836*(t21801+t21810+t21802+t21811+t21803- \
               t21830-t21831-t21832+t21815+t21816+t21808+t21817-t21826+t21809-t21827-t21828-t21829+t21798+t21790* \
               t21784*(1.0/3.0)-(t21790*t21767*2.0)/t21730+t21634*t21572*t21573*t21790*t21575*(3.2E1/3.0)+a3*gamma_bb[index]* \
               t21570*t21790*t21578*t21749*t21858*(7.0/3.0)-(c*kab1*rab1*t21723*t21790*t21769*t21599*(8.0/1.5E1)) \
               /t21725+c*c0*t21780*t21727*t21781*t21579*t21796*t21779*t21797*(8.0/2.7E1)+a3*c0*gamma_bb[index]*t21570* \
               t21780*t21781*t21647*t21796*t21779*t21797*(5.6E1/9.0)+c*c0*t21571*t21780*t21825*t21727*t21781*t21796* \
               t21779*t21797*(2.0/3.0)+c*c0*t21571*t21780*t21727*t21781*t21808*t21796*t21779*t21797*(2.0/3.0)+c*c0* \
               t21800*t21571*t21780*t21727*t21796*t21779*t21797*t21799*4.0-c*c0*t21571*t21780*t21727*t21786*t21795* \
               t21796*t21779*t21797*(4.0/3.0)+c*c0*t21780*t21727*t21781*t21790*t21796*t21599*t21779*t21797*(4.0/9.0) \
               -c*c0*t21780*t21727*t21767*t21786*t21796*t21599*t21779*t21797*(8.0/9.0)+a3*c0*gamma_bb[index]*t21603* \
               t21570*t21780*t21781*t21790*t21796*t21779*t21797*(2.8E1/9.0)-a3*c0*gamma_bb[index]*t21603*t21570*t21780* \
               t21767*t21786*t21796*t21779*t21797*(5.6E1/9.0)-c*c0*t21571*t21780*t21727*t21790*t21767*t21786*t21796* \
               t21779*t21797*(8.0/3.0)+c*c0*t21632*t21633*t21804*t21780*t21727*t21781*t21649*t21796*t21779*t21797* \
               (2.048E3/2.7E1)+c*c0*t21650*t21572*t21573*t21780*t21727*t21781*t21575*t21796*t21779*t21797*(4.48E2/ \
               9.0)+a3*c0*gamma_bb[index]*t21570*t21572*t21573*t21780*t21781*t21575*t21648*t21796*t21779*t21797*(8.96E2/ \
               2.7E1)+c*c0*t21610*t21572*t21573*t21780*t21727*t21781*t21790*t21575*t21796*t21779*t21797*(1.28E2/9.0) \
               -c*c0*t21610*t21572*t21573*t21780*t21727*t21575*t21767*t21786*t21796*t21779*t21797*(2.56E2/9.0)-c0* \
               kab1*rab1*t21624*t21723*t21625*t21727*t21781*t21769*t21796*t21779*t21797*t21789*(3.2E1/4.5E1)+c*c0* \
               kab1*rab1*t21624*t21723*t21806*t21727*t21781*t21638*t21796*t21779*t21797*t21789*(1.6E1/6.75E2)+c*c0* \
               kab1*t21624*t21723*t21805*t21806*t21807*t21727*t21781*t21796*t21779*t21797*t21789*(6.4E1/6.75E2)+c* \
               c0*t21812*t21624*t21813*t21805*t21814*t21806*t21807*t21727*t21781*t21796*t21779*t21797*(6.4E1/2.25E2) \
               -c0*kab1*rab1*t21624*t21723*t21727*t21781*t21790*t21755*t21769*t21796*t21779*t21797*t21789*(3.2E1/ \
               4.5E1)+c0*kab1*rab1*t21624*t21723*t21727*t21755*t21767*t21786*t21769*t21796*t21779*t21797*t21789*(6.4E1/ \
               4.5E1)-a3*c*c0*gamma_bb[index]*kab1*rab1*t21570*t21723*t21781*t21818*t21769*t21796*t21779*t21797*t21789* \
               (2.24E2/1.35E2)-c0*kab1*rab1*t21820*t21624*t21723*t21572*t21573*t21727*t21781*t21575*t21769*t21796* \
               t21779*t21797*t21789*(1.024E3/1.35E2))+t21841*t21824*t21857*2.0+t21825*t21796*t21797+t21808*t21796* \
               t21797+t21824*t21843*(t21833*t21825*2.0-t21808*t21845+c*c0*t21780*t21727*t21781*t21579*t21779*(3.2E1/ \
               2.7E1)+a3*c0*gamma_bb[index]*t21570*t21780*t21781*t21647*t21779*(2.24E2/9.0)+c*c0*t21800*t21571*t21780* \
               t21727*t21779*t21799*1.6E1-c*c0*t21571*t21780*t21727*t21786*t21795*t21779*(1.6E1/3.0)-c*c0*t21780* \
               t21727*t21767*t21786*t21599*t21779*(3.2E1/9.0)-a3*c0*gamma_bb[index]*t21603*t21570*t21780*t21767*t21786* \
               t21779*(2.24E2/9.0)+c*c0*t21632*t21633*t21804*t21780*t21727*t21781*t21649*t21779*(8.192E3/2.7E1)+c* \
               c0*t21650*t21572*t21573*t21780*t21727*t21781*t21575*t21779*(1.792E3/9.0)+a3*c0*gamma_bb[index]*t21570* \
               t21572*t21573*t21780*t21781*t21575*t21648*t21779*(3.584E3/2.7E1)-c*c0*t21610*t21572*t21573*t21780* \
               t21727*t21575*t21767*t21786*t21779*(1.024E3/9.0)-c0*kab1*rab1*t21624*t21723*t21625*t21727*t21781*t21769* \
               t21779*t21789*(1.28E2/4.5E1)+c*c0*kab1*rab1*t21624*t21723*t21806*t21727*t21781*t21638*t21779*t21789* \
               (6.4E1/6.75E2)+c*c0*kab1*t21624*t21723*t21805*t21806*t21807*t21727*t21781*t21779*t21789*(2.56E2/6.75E2) \
               +c*c0*t21812*t21624*t21813*t21805*t21814*t21806*t21807*t21727*t21781*t21779*(2.56E2/2.25E2)+c0*kab1* \
               rab1*t21624*t21723*t21727*t21755*t21767*t21786*t21769*t21779*t21789*(2.56E2/4.5E1)-a3*c*c0*gamma_bb[index]* \
               kab1*rab1*t21570*t21723*t21781*t21818*t21769*t21779*t21789*(8.96E2/1.35E2)-c0*kab1*rab1*t21820*t21624* \
               t21723*t21572*t21573*t21727*t21781*t21575*t21769*t21779*t21789*(4.096E3/1.35E2))-t21841*t21850*t21844* \
               t21836*2.0-t21850*t21843*t21844*t21857*2.0-t21843*t21844*t21836*(t21833*t21825*3.0-t21808*t21845*(3.0/ \
               2.0)+c*c0*t21780*t21727*t21781*t21579*t21779*(1.6E1/9.0)+a3*c0*gamma_bb[index]*t21570*t21780*t21781* \
               t21647*t21779*(1.12E2/3.0)+c*c0*t21800*t21571*t21780*t21727*t21779*t21799*2.4E1-c*c0*t21571*t21780* \
               t21727*t21786*t21795*t21779*8.0-c*c0*t21780*t21727*t21767*t21786*t21599*t21779*(1.6E1/3.0)-a3*c0*gamma_bb[index]* \
               t21603*t21570*t21780*t21767*t21786*t21779*(1.12E2/3.0)+c*c0*t21632*t21633*t21804*t21780*t21727*t21781* \
               t21649*t21779*(4.096E3/9.0)+c*c0*t21650*t21572*t21573*t21780*t21727*t21781*t21575*t21779*(8.96E2/3.0) \
               +a3*c0*gamma_bb[index]*t21570*t21572*t21573*t21780*t21781*t21575*t21648*t21779*(1.792E3/9.0)-c*c0* \
               t21610*t21572*t21573*t21780*t21727*t21575*t21767*t21786*t21779*(5.12E2/3.0)-c0*kab1*rab1*t21624*t21723* \
               t21625*t21727*t21781*t21769*t21779*t21789*(6.4E1/1.5E1)+c*c0*kab1*rab1*t21624*t21723*t21806*t21727* \
               t21781*t21638*t21779*t21789*(3.2E1/2.25E2)+c*c0*kab1*t21624*t21723*t21805*t21806*t21807*t21727*t21781* \
               t21779*t21789*(1.28E2/2.25E2)+c*c0*t21812*t21624*t21813*t21805*t21814*t21806*t21807*t21727*t21781* \
               t21779*(1.28E2/7.5E1)+c0*kab1*rab1*t21624*t21723*t21727*t21755*t21767*t21786*t21769*t21779*t21789* \
               (1.28E2/1.5E1)-a3*c*c0*gamma_bb[index]*kab1*rab1*t21570*t21723*t21781*t21818*t21769*t21779*t21789* \
               (4.48E2/4.5E1)-c0*kab1*rab1*t21820*t21624*t21723*t21572*t21573*t21727*t21781*t21575*t21769*t21779* \
               t21789*(2.048E3/4.5E1))+1.0/(t21823*t21823*t21823)*(t21850*t21850)*t21843*t21836*2.0+t21713*t21860* \
               t21825*t21861*t21709*t21578*t21858*t21859*(3.0/2.0)+t21713*t21860*t21861*t21709*t21808*t21578*t21858* \
               t21859*(3.0/2.0)-t21707*t21860*t21861*t21709*t21790*t21578*t21858*t21859*(1.0/2.0)+t21730*t21713*t21860* \
               t21709*t21790*t21578*t21767*t21858*t21859*3.0+kab1*rab1*t21723*t21725*t21861*t21709*t21790*t21784* \
               t21858*t21769*t21859*(4.0/5.0)-t21572*t21860*t21573*t21861*t21709*t21790*t21575*t21719*t21578*t21858* \
               t21859*1.6E1-a3*gamma_bb[index]*t21570*t21806*t21860*t21861*t21709*1.0/(t21727*t21727)*t21790*t21774* \
               t21859*(7.0/2.0))*(-1.0/2.0)+c0*t21870*t21773*t21884*(1.0/2.0)+c0*t21870*t21866*t21867*(1.0/2.0)+c0* \
               t21772*t21773*(t21841*t21824*t21836+t21824*t21843*t21857+t21790*t21796*t21797-t21850*t21843*t21844* \
               t21836+t21713*t21860*t21861*t21709*t21790*t21578*t21858*t21859*(3.0/2.0)))-rho_b[index]*(c0*t21735* \
               t21757*(t21622*t21669*(-t21701*t21702*t21596+t21700*t21623*t21596*2.0+t21602*t21631*t21632*t21704* \
               t21633*t21617*(2.048E3/9.0)-t21601*t21602*t21703*t21573*t21575*t21577*(1.216E3/9.0)+c*c0*t21601*t21582* \
               t21586*t21595*t21579*(3.2E1/2.7E1)-t21601*t21630*t21623*t21634*t21573*t21575*t21577*(6.4E1/3.0)+a5* \
               c0*gamma_bb[index]*t21601*t21570*t21582*t21647*t21595*(2.24E2/9.0)-c*c0*t21601*t21571*t21644*t21582* \
               t21609*t21586*(1.6E1/3.0)+c*c0*t21601*t21571*t21582*t21645*t21646*t21586*1.6E1+c*c0*t21601*t21608* \
               t21582*t21609*t21586*t21599*(3.2E1/9.0)+a5*c0*gamma_bb[index]*t21601*t21603*t21570*t21608*t21582*t21609* \
               (2.24E2/9.0)+c*c0*t21601*t21631*t21632*t21633*t21582*t21586*t21595*t21649*(8.192E3/2.7E1)-c*c0*t21631* \
               t21632*t21633*t21617*t21582*t21586*t21595*t21649*(1.6384E4/2.7E1)+c*c0*t21601*t21650*t21573*t21582* \
               t21575*t21577*t21586*t21595*(1.792E3/9.0)+c*c0*t21631*t21632*t21633*t21582*t21656*t21586*t21595*t21649* \
               (4.096E3/9.0)-c*c0*t21650*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(1.792E3/9.0)+a5*c0*gamma_bb[index]* \
               t21601*t21570*t21573*t21582*t21575*t21648*t21577*t21595*(3.584E3/2.7E1)-a5*c0*gamma_bb[index]*t21570* \
               t21617*t21573*t21582*t21575*t21648*t21577*t21595*(3.584E3/2.7E1)+c*c0*t21601*t21610*t21608*t21573* \
               t21582*t21609*t21575*t21577*t21586*(1.024E3/9.0)-c*c0*t21610*t21608*t21617*t21573*t21582*t21609*t21575* \
               t21577*t21586*(1.024E3/9.0))+t21612*t21613*t21655+t21720*t21622*t21675*2.0+t21612*t21613*t21667+t21622* \
               t21679*(t21660-t21714+t21661-t21715+t21662-t21716+t21663-t21717+t21655+t21664-t21718+t21665+t21657+ \
               t21666+t21658+t21659+t21651*t21784*(1.0/3.0)+(t21651*t21608*2.0)/t21594+t21651*t21634*t21573*t21575* \
               t21577*(3.2E1/3.0)-t21651*t21634*t21573*t21575*t21577*t21596*(3.2E1/3.0)+a5*gamma_bb[index]*t21570* \
               t21651*t21708*t21578*t21749*(7.0/3.0)+c*c0*t21601*t21612*t21613*t21582*t21586*t21595*t21579*(8.0/2.7E1) \
               +a5*c0*gamma_bb[index]*t21601*t21612*t21613*t21570*t21582*t21647*t21595*(5.6E1/9.0)-c*c0*t21601*t21612* \
               t21613*t21571*t21644*t21582*t21609*t21586*(4.0/3.0)+c*c0*t21601*t21612*t21613*t21571*t21582*t21645* \
               t21646*t21586*4.0+c*c0*t21601*t21612*t21613*t21571*t21582*t21655*t21586*t21595*(2.0/3.0)+c*c0*t21601* \
               t21612*t21613*t21571*t21582*t21586*t21595*t21667*(2.0/3.0)+c*c0*t21601*t21612*t21613*t21608*t21582* \
               t21609*t21586*t21599*(8.0/9.0)+c*c0*t21601*t21612*t21613*t21651*t21582*t21586*t21595*t21599*(4.0/9.0) \
               +a5*c0*gamma_bb[index]*t21601*t21603*t21612*t21613*t21570*t21608*t21582*t21609*(5.6E1/9.0)+a5*c0*gamma_bb[index]* \
               t21601*t21603*t21612*t21613*t21570*t21651*t21582*t21595*(2.8E1/9.0)+c*c0*t21601*t21612*t21613*t21651* \
               t21571*t21608*t21582*t21609*t21586*(8.0/3.0)+c*c0*t21601*t21612*t21613*t21631*t21632*t21633*t21582* \
               t21586*t21595*t21649*(2.048E3/2.7E1)-c*c0*t21612*t21613*t21631*t21632*t21633*t21617*t21582*t21586* \
               t21595*t21649*(4.096E3/2.7E1)+c*c0*t21601*t21612*t21613*t21650*t21573*t21582*t21575*t21577*t21586* \
               t21595*(4.48E2/9.0)+c*c0*t21612*t21613*t21631*t21632*t21633*t21582*t21656*t21586*t21595*t21649*(1.024E3/ \
               9.0)-c*c0*t21612*t21613*t21650*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(4.48E2/9.0)+a5*c0* \
               gamma_bb[index]*t21601*t21612*t21613*t21570*t21573*t21582*t21575*t21648*t21577*t21595*(8.96E2/2.7E1) \
               -a5*c0*gamma_bb[index]*t21612*t21613*t21570*t21617*t21573*t21582*t21575*t21648*t21577*t21595*(8.96E2/ \
               2.7E1)+c*c0*t21601*t21610*t21612*t21613*t21608*t21573*t21582*t21609*t21575*t21577*t21586*(2.56E2/9.0) \
               +c*c0*t21601*t21610*t21612*t21613*t21651*t21573*t21582*t21575*t21577*t21586*t21595*(1.28E2/9.0)-c* \
               c0*t21610*t21612*t21613*t21608*t21617*t21573*t21582*t21609*t21575*t21577*t21586*(2.56E2/9.0)-c*c0* \
               t21610*t21612*t21613*t21651*t21617*t21573*t21582*t21575*t21577*t21586*t21595*(1.28E2/9.0))-t21676* \
               t21669*t21679*(t21701*t21702*t21596*(-3.0/2.0)+t21700*t21623*t21596*3.0+t21602*t21631*t21632*t21704* \
               t21633*t21617*(1.024E3/3.0)-t21601*t21602*t21703*t21573*t21575*t21577*(6.08E2/3.0)+c*c0*t21601*t21582* \
               t21586*t21595*t21579*(1.6E1/9.0)-t21601*t21630*t21623*t21634*t21573*t21575*t21577*3.2E1+a5*c0*gamma_bb[index]* \
               t21601*t21570*t21582*t21647*t21595*(1.12E2/3.0)-c*c0*t21601*t21571*t21644*t21582*t21609*t21586*8.0+ \
               c*c0*t21601*t21571*t21582*t21645*t21646*t21586*2.4E1+c*c0*t21601*t21608*t21582*t21609*t21586*t21599* \
               (1.6E1/3.0)+a5*c0*gamma_bb[index]*t21601*t21603*t21570*t21608*t21582*t21609*(1.12E2/3.0)+c*c0*t21601* \
               t21631*t21632*t21633*t21582*t21586*t21595*t21649*(4.096E3/9.0)-c*c0*t21631*t21632*t21633*t21617*t21582* \
               t21586*t21595*t21649*(8.192E3/9.0)+c*c0*t21601*t21650*t21573*t21582*t21575*t21577*t21586*t21595*(8.96E2/ \
               3.0)+c*c0*t21631*t21632*t21633*t21582*t21656*t21586*t21595*t21649*(2.048E3/3.0)-c*c0*t21650*t21617* \
               t21573*t21582*t21575*t21577*t21586*t21595*(8.96E2/3.0)+a5*c0*gamma_bb[index]*t21601*t21570*t21573* \
               t21582*t21575*t21648*t21577*t21595*(1.792E3/9.0)-a5*c0*gamma_bb[index]*t21570*t21617*t21573*t21582* \
               t21575*t21648*t21577*t21595*(1.792E3/9.0)+c*c0*t21601*t21610*t21608*t21573*t21582*t21609*t21575*t21577* \
               t21586*(5.12E2/3.0)-c*c0*t21610*t21608*t21617*t21573*t21582*t21609*t21575*t21577*t21586*(5.12E2/3.0) \
               )-t21720*t21676*t21685*t21679*2.0-t21675*t21676*t21685*t21669*2.0+1.0/(t21621*t21621*t21621)*(t21685* \
               t21685)*t21669*t21679*2.0-t21710*t21711*t21712*t21651*t21707*t21708*t21709*t21578*(1.0/2.0)+t21710* \
               t21711*t21712*t21713*t21708*t21655*t21709*t21578*(3.0/2.0)+t21710*t21711*t21712*t21713*t21708*t21709* \
               t21667*t21578*(3.0/2.0)-t21710*t21711*t21713*t21651*t21608*t21708*t21709*t21594*t21578*3.0-t21710* \
               t21711*t21712*t21651*t21573*t21708*t21709*t21575*t21719*t21577*t21578*1.6E1+t21710*t21712*t21651*t21573* \
               t21708*t21709*t21575*t21584*t21719*t21577*t21578*1.6E1-a5*gamma_bb[index]*t21710*t21711*t21712*t21570* \
               t21651*t21806*t21709*t21774*1.0/(t21586*t21586)*(7.0/2.0))*(-1.0/2.0)+c0*t21760*t21735*t21757*(t21624* \
               t21625*t21734*(1.0E1/9.0)-t21624*t21751*t21754*t21755*(8.0/3.0)+t21624*1.0/(t21733*t21733*t21733*t21733) \
               *t21707*(t21754*t21754)*6.0-t21624*t21751*t21707*(c*k2*t21579*(4.0/9.0)+c*k1*t21604*t21579*(2.0/9.0) \
               -k1*t21640*t21624*t21625*(1.0/3.6E1))*2.0)*(1.0/2.0)+c0*t21760*t21735*t21773*t21884*(1.0/2.0)+c0*t21735* \
               t21772*t21773*t21748+c0*t21735*t21762*t21748*t21757+c0*t21760*t21735*t21866*t21867*(1.0/2.0)-c0*t21760* \
               t21735*(t21762*t21762)*t21757*(1.0/2.0)-c0*t21760*t21735*t21762*t21772*t21773)-c0*t21735*t21748*t21757+ \
               c0*t21760*t21735*t21772*t21773+c0*t21760*t21735*t21762*t21757;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t23292 = tspi_m13*tspi_m13;
            double t23293 = 1.0/pow(rho_b[index],1.0/3.0);
            double t23294 = a2*a2;
            double t23295 = gamma_bb[index]*gamma_bb[index];
            double t23296 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t23297 = t23292*t23292;
            double t23298 = c*t23293;
            double t23299 = a4*a4;
            double t23300 = t23295*t23296*t23297*t23299*2.0;
            double t23301 = exp(t23300);
            double t23302 = 1.0/c;
            double t23303 = 1.0/pow(rho_b[index],7.0/3.0);
            double t23304 = sqrt(t23298);
            double t23305 = t23295*t23296*t23297*t23299;
            double t23306 = t23305+1.0;
            double t23307 = 1.0/(t23306*t23306);
            double t23308 = a5*gamma_bb[index]*t23302*t23303*t23292;
            double t23309 = t23308+1.0;
            double t23320 = raa2*t23304;
            double t23310 = exp(-t23320);
            double t23311 = t23310-1.0;
            double t23312 = kaa2*t23311;
            double t23313 = pow(t23298,2.0/5.0);
            double t23321 = raa1*t23313;
            double t23314 = exp(-t23321);
            double t23315 = t23314-1.0;
            double t23316 = kaa1*t23315;
            double t23317 = -kaa0+t23312+t23316;
            double t23318 = 1.0/(t23317*t23317);
            double t23319 = c*c0*t23301*t23307*t23309*t23318*t23293*(2.0/3.0);
            double t23322 = 1.0/t23306;
            double t23323 = 1.0/pow(rho_b[index],4.0/3.0);
            double t23324 = c*c0*t23301*t23309*t23318*t23293*(2.0/3.0);
            double t23325 = sqrt(t23324);
            double t23326 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t23327 = 1.0/sqrt(t23298);
            double t23328 = c*kaa2*raa2*t23310*t23323*t23327*(1.0/6.0);
            double t23329 = 1.0/pow(t23298,3.0/5.0);
            double t23330 = c*kaa1*raa1*t23314*t23323*t23329*(2.0/1.5E1);
            double t23331 = t23330+t23328;
            double t23332 = 1.0/(t23317*t23317*t23317);
            double t23333 = 1.0/pow(rho_b[index],2.0E1/3.0);
            double t23334 = exp(t23319);
            double t23335 = Ei(-t23319);
            double t23336 = 1.0/(t23306*t23306*t23306);
            double t23337 = t23322*t23325*6.0;
            double t23338 = c*c0*t23301*t23307*t23309*t23318*t23293*4.0;
            double t23339 = t23337+t23338+3.0;
            double t23340 = 1.0/t23339;
            double t23341 = c*c0*t23301*t23323*t23307*t23309*t23318*(2.0/9.0);
            double t23342 = a5*c0*gamma_bb[index]*t23301*t23307*t23326*t23318*t23292*(1.4E1/9.0);
            double t23343 = c*c0*t23301*t23331*t23332*t23307*t23309*t23293*(4.0/3.0);
            double t23344 = c*c0*t23301*t23333*t23307*t23309*t23318*t23295*t23297*t23299*(6.4E1/9.0);
            double t23346 = c*c0*t23301*t23333*t23309*t23318*t23336*t23295*t23297*t23299*(6.4E1/9.0);
            double t23345 = t23341+t23342+t23343+t23344-t23346;
            double t23347 = c*c0*t23301*t23307*t23334*t23335*t23309*t23318*t23293*(2.0/3.0);
            double t23348 = t23347+1.0;
            double t23349 = t23322*t23325*4.0;
            double t23350 = c*c0*t23301*t23307*t23309*t23318*t23293*(8.0/3.0);
            double t23351 = t23350+t23349+6.0;
            double t23352 = c*c0*t23301*t23323*t23309*t23318*(2.0/9.0);
            double t23353 = a5*c0*gamma_bb[index]*t23301*t23326*t23318*t23292*(1.4E1/9.0);
            double t23354 = c*c0*t23301*t23331*t23332*t23309*t23293*(4.0/3.0);
            double t23355 = c*c0*t23301*t23333*t23309*t23318*t23295*t23297*t23299*(6.4E1/9.0);
            double t23356 = t23352+t23353+t23354+t23355;
            double t23357 = 1.0/sqrt(t23324);
            double t23358 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t23359 = t23294*t23295*t23296*t23297;
            double t23360 = pow(t23298,4.0/5.0);
            double t23378 = rab1*t23360;
            double t23361 = exp(-t23378);
            double t23362 = t23361-1.0;
            double t23379 = kab1*t23362;
            double t23363 = kab0-t23379;
            double t23364 = a3*gamma_bb[index]*t23302*t23303*t23292;
            double t23365 = t23364+1.0;
            double t23366 = 1.0/sqrt(t23365);
            double t23367 = 1.0/pow(rho_b[index],8.0/3.0);
            double t23368 = a1*gamma_bb[index]*t23292*t23367;
            double t23369 = t23359+t23368+1.0;
            double t23370 = c*c;
            double t23371 = 1.0/pow(rho_b[index],2.0/3.0);
            double t23372 = k1*t23304;
            double t23373 = c*k2*t23293;
            double t23374 = t23372+t23373;
            double t23375 = 1.0/(t23374*t23374);
            double t23381 = t23370*t23371*t23375;
            double t23376 = exp(-t23381);
            double t23377 = exp(-t23359);
            double t23380 = c*c0*t23293*(2.0/3.0);
            double t23382 = t23322*t23356*t23357*2.0;
            double t23383 = c*c0*t23301*t23323*t23307*t23309*t23318*(8.0/9.0);
            double t23384 = a5*c0*gamma_bb[index]*t23301*t23307*t23326*t23318*t23292*(5.6E1/9.0);
            double t23385 = c*c0*t23301*t23331*t23332*t23307*t23309*t23293*(1.6E1/3.0);
            double t23386 = c*c0*t23301*t23333*t23307*t23309*t23318*t23295*t23297*t23299*(2.56E2/9.0);
            double t23437 = t23307*t23325*t23295*t23358*t23297*t23299*(6.4E1/3.0);
            double t23438 = c*c0*t23301*t23333*t23309*t23318*t23336*t23295*t23297*t23299*(2.56E2/9.0);
            double t23387 = t23382+t23383-t23437+t23384-t23438+t23385+t23386;
            double t23388 = c*c0*t23301*t23323*t23307*t23334*t23335*t23309*t23318*(2.0/9.0);
            double t23389 = c*c0*t23301*t23331*t23332*t23307*t23334*t23335*t23309*t23293*(4.0/3.0);
            double t23390 = c*c0*t23301*t23307*t23334*t23335*t23309*t23318*t23345*t23293*(2.0/3.0);
            double t23391 = a5*c0*gamma_bb[index]*t23301*t23307*t23334*t23326*t23335*t23318*t23292*(1.4E1/9.0) \
               ;
            double t23392 = c*c0*t23301*t23333*t23307*t23334*t23335*t23309*t23318*t23295*t23297*t23299*(6.4E1/ \
               9.0);
            double t23441 = c*c0*t23301*t23333*t23334*t23335*t23309*t23318*t23336*t23295*t23297*t23299*(6.4E1/ \
               9.0);
            double t23393 = t23341+t23342-t23441+t23343+t23344+t23390-t23346+t23391+t23392+t23388+t23389;
            double t23394 = t23299*t23299;
            double t23395 = t23295*t23295;
            double t23396 = t23297*t23297;
            double t23397 = raa2*raa2;
            double t23398 = c*kaa2*t23310*t23303*t23397*(1.0/3.6E1);
            double t23399 = raa1*raa1;
            double t23400 = 1.0/pow(t23298,6.0/5.0);
            double t23401 = kaa1*t23400*t23314*t23370*t23367*t23399*(4.0/2.25E2);
            double t23402 = 1.0/pow(t23298,3.0/2.0);
            double t23403 = kaa2*raa2*t23310*t23402*t23370*t23367*(1.0/3.6E1);
            double t23404 = 1.0/pow(t23298,8.0/5.0);
            double t23405 = kaa1*raa1*t23314*t23404*t23370*t23367*(2.0/7.5E1);
            double t23415 = c*kaa2*raa2*t23310*t23303*t23327*(2.0/9.0);
            double t23416 = c*kaa1*raa1*t23303*t23314*t23329*(8.0/4.5E1);
            double t23406 = t23401+t23403+t23405-t23415-t23416+t23398;
            double t23407 = t23331*t23331;
            double t23408 = 1.0/(t23317*t23317*t23317*t23317);
            double t23409 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t23410 = 1.0/pow(rho_b[index],1.0E1);
            double t23411 = 1.0/pow(rho_b[index],1.3E1);
            double t23412 = 1.0/pow(rho_b[index],2.3E1/3.0);
            double t23413 = 1.0/pow(rho_b[index],1.0E1/3.0);
            double t23414 = 1.0/t23309;
            double t23417 = t23345*t23345;
            double t23418 = 1.0/(t23306*t23306*t23306*t23306);
            double t23419 = c*c0*t23301*t23303*t23307*t23309*t23318*(8.0/2.7E1);
            double t23420 = c*c0*t23301*t23307*t23407*t23309*t23408*t23293*4.0;
            double t23421 = a5*c0*gamma_bb[index]*t23301*t23307*t23318*t23292*t23409*(5.6E1/9.0);
            double t23422 = c*c0*t23301*t23331*t23323*t23332*t23307*t23309*(8.0/9.0);
            double t23423 = a5*c0*gamma_bb[index]*t23301*t23331*t23332*t23307*t23326*t23292*(5.6E1/9.0);
            double t23424 = a5*c0*gamma_bb[index]*t23301*t23410*t23307*t23318*t23292*t23295*t23297*t23299*(8.96E2/ \
               2.7E1);
            double t23425 = c*c0*t23301*t23411*t23307*t23309*t23318*t23394*t23395*t23396*(2.048E3/2.7E1);
            double t23426 = c*c0*t23301*t23411*t23309*t23318*t23418*t23394*t23395*t23396*(1.024E3/9.0);
            double t23427 = c*c0*t23301*t23412*t23307*t23309*t23318*t23295*t23297*t23299*(4.48E2/9.0);
            double t23428 = c*c0*t23301*t23331*t23332*t23333*t23307*t23309*t23295*t23297*t23299*(2.56E2/9.0);
            double t23461 = c*c0*t23301*t23332*t23307*t23406*t23309*t23293*(4.0/3.0);
            double t23462 = a5*c0*gamma_bb[index]*t23301*t23410*t23318*t23336*t23292*t23295*t23297*t23299*(8.96E2/ \
               2.7E1);
            double t23463 = c*c0*t23301*t23411*t23309*t23318*t23336*t23394*t23395*t23396*(4.096E3/2.7E1);
            double t23464 = c*c0*t23301*t23412*t23309*t23318*t23336*t23295*t23297*t23299*(4.48E2/9.0);
            double t23465 = c*c0*t23301*t23331*t23332*t23333*t23309*t23336*t23295*t23297*t23299*(2.56E2/9.0);
            double t23429 = t23420+t23421+t23422+t23423+t23424+t23425-t23461+t23426-t23462+t23427-t23463+t23419+ \
               t23428-t23464-t23465;
            double t23430 = 1.0/(t23339*t23339);
            double t23431 = t23322*t23356*t23357*3.0;
            double t23432 = c*c0*t23301*t23323*t23307*t23309*t23318*(4.0/3.0);
            double t23433 = a5*c0*gamma_bb[index]*t23301*t23307*t23326*t23318*t23292*(2.8E1/3.0);
            double t23434 = c*c0*t23301*t23331*t23332*t23307*t23309*t23293*8.0;
            double t23435 = c*c0*t23301*t23333*t23307*t23309*t23318*t23295*t23297*t23299*(1.28E2/3.0);
            double t23439 = t23307*t23325*t23295*t23358*t23297*t23299*3.2E1;
            double t23440 = c*c0*t23301*t23333*t23309*t23318*t23336*t23295*t23297*t23299*(1.28E2/3.0);
            double t23436 = t23431-t23440+t23432+t23433+t23434+t23435-t23439;
            double t23442 = c*c0*t23301*t23303*t23309*t23318*(8.0/2.7E1);
            double t23443 = a5*c0*gamma_bb[index]*t23301*t23318*t23292*t23409*(5.6E1/9.0);
            double t23444 = c*c0*t23301*t23331*t23323*t23332*t23309*(8.0/9.0);
            double t23445 = c*c0*t23301*t23407*t23309*t23408*t23293*4.0;
            double t23446 = a5*c0*gamma_bb[index]*t23301*t23410*t23318*t23292*t23295*t23297*t23299*(8.96E2/2.7E1) \
               ;
            double t23447 = a5*c0*gamma_bb[index]*t23301*t23331*t23332*t23326*t23292*(5.6E1/9.0);
            double t23448 = c*c0*t23301*t23411*t23309*t23318*t23394*t23395*t23396*(2.048E3/2.7E1);
            double t23449 = c*c0*t23301*t23412*t23309*t23318*t23295*t23297*t23299*(4.48E2/9.0);
            double t23450 = c*c0*t23301*t23331*t23332*t23333*t23309*t23295*t23297*t23299*(2.56E2/9.0);
            double t23451 = t23450+t23442+t23443+t23444+t23445+t23446+t23447+t23448+t23449-c*c0*t23301*t23332* \
               t23406*t23309*t23293*(4.0/3.0);
            double t23452 = t23356*t23356;
            double t23453 = 1.0/pow(t23324,3.0/2.0);
            double t23454 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t23455 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t23456 = 1.0/c0;
            double t23457 = exp(-t23300);
            double t23458 = t23306*t23306;
            double t23459 = t23317*t23317;
            double t23460 = pow(rho_b[index],1.0/3.0);
            double t23466 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]) \
               ;
            double t23467 = t23363*t23366*t23377*t23369*1.0E5;
            double t23468 = -t23380+t23467;
            double t23469 = ( (t23468 > 0.0) ?  1.0 : 0.0 ) ;
            double t23470 = t23334*t23335;
            double t23471 = t23340*t23351*t23348;
            double t23472 = t23470+t23471;
            double t23473 = t23294*t23295*t23358*t23297*(1.6E1/3.0);
            double t23474 = a1*gamma_bb[index]*t23326*t23292*(8.0/3.0);
            double t23475 = t23473+t23474;
            double t23476 = 1.0/(c*c);
            double t23477 = 1.0/pow(t23298,1.0/5.0);
            double t23478 = 1.0/pow(t23365,3.0/2.0);
            double t23479 = 1.0/pow(rho_b[index],5.0/3.0);
            double t23480 = t23370*t23375*t23479*(2.0/3.0);
            double t23481 = 1.0/(t23374*t23374*t23374);
            double t23482 = c*k2*t23323*(1.0/3.0);
            double t23483 = c*k1*t23323*t23327*(1.0/6.0);
            double t23484 = t23482+t23483;
            double t23498 = t23370*t23371*t23481*t23484*2.0;
            double t23485 = t23480-t23498;
            double t23486 = t23340*t23348*t23387;
            double t23487 = t23334*t23335*t23345;
            double t23488 = t23340*t23351*t23393;
            double t23489 = t23302*t23414*t23460*t23345*t23456*t23457*t23458*t23459*(3.0/2.0);
            double t23493 = t23430*t23351*t23436*t23348;
            double t23490 = -t23493+t23486+t23487+t23488+t23489;
            double t23491 = t23380-t23467;
            double t23492 = 0.0 ;
            double t23494 = c*c0*t23323*(2.0/9.0);
            double t23495 = t23363*t23294*t23366*t23295*t23358*t23377*t23297*t23369*(1.6E6/3.0);
            double t23496 = a3*gamma_bb[index]*t23302*t23413*t23363*t23292*t23377*t23369*t23478*(3.5E5/3.0);
            double t23499 = t23363*t23366*t23475*t23377*1.0E5;
            double t23500 = c*kab1*rab1*t23323*t23361*t23366*t23377*t23369*t23477*(8.0E4/3.0);
            double t23497 = -t23500+t23494+t23495+t23496-t23499;
            v_rho_b_rho_b_[index] = - ( (c*c0*t23293*(-2.0/3.0)+t23363*t23366*t23369*exp(-t23294*t23295*t23296* \
               t23297)*1.0E5 > 0.0) ? c0*t23490*t23376*1.0 : 0.0 ) + 0.0 +c0*t23472*t23376*t23485*t23469+c0*rho_b[index]* \
               t23376*t23469*(t23340*t23348*(-t23322*t23452*t23453+t23322*t23451*t23357*2.0-t23307*t23325*t23454* \
               t23295*t23297*t23299*(1.216E3/9.0)+t23325*t23336*t23455*t23394*t23395*t23396*(2.048E3/9.0)+c*c0*t23301* \
               t23303*t23307*t23309*t23318*(3.2E1/2.7E1)-t23307*t23356*t23357*t23295*t23358*t23297*t23299*(6.4E1/ \
               3.0)+a5*c0*gamma_bb[index]*t23301*t23307*t23318*t23292*t23409*(2.24E2/9.0)+c*c0*t23301*t23331*t23323* \
               t23332*t23307*t23309*(3.2E1/9.0)-c*c0*t23301*t23332*t23307*t23406*t23309*t23293*(1.6E1/3.0)+c*c0*t23301* \
               t23307*t23407*t23309*t23408*t23293*1.6E1+a5*c0*gamma_bb[index]*t23301*t23331*t23332*t23307*t23326* \
               t23292*(2.24E2/9.0)+c*c0*t23301*t23411*t23307*t23309*t23318*t23394*t23395*t23396*(8.192E3/2.7E1)-c* \
               c0*t23301*t23411*t23309*t23318*t23336*t23394*t23395*t23396*(1.6384E4/2.7E1)+c*c0*t23301*t23411*t23309* \
               t23318*t23418*t23394*t23395*t23396*(4.096E3/9.0)+c*c0*t23301*t23412*t23307*t23309*t23318*t23295*t23297* \
               t23299*(1.792E3/9.0)-c*c0*t23301*t23412*t23309*t23318*t23336*t23295*t23297*t23299*(1.792E3/9.0)+a5* \
               c0*gamma_bb[index]*t23301*t23410*t23307*t23318*t23292*t23295*t23297*t23299*(3.584E3/2.7E1)-a5*c0*gamma_bb[index]* \
               t23301*t23410*t23318*t23336*t23292*t23295*t23297*t23299*(3.584E3/2.7E1)+c*c0*t23301*t23331*t23332* \
               t23333*t23307*t23309*t23295*t23297*t23299*(1.024E3/9.0)-c*c0*t23301*t23331*t23332*t23333*t23309*t23336* \
               t23295*t23297*t23299*(1.024E3/9.0))+t23334*t23335*t23417+t23334*t23335*t23429+t23340*t23393*t23387* \
               2.0+t23340*t23351*(t23420+t23421+t23422+t23423+t23424+t23425+t23417+t23426+t23427+t23419+t23428+(t23345* \
               (1.0/3.0))/rho_b[index]+(t23331*t23345*2.0)/t23317+t23345*t23295*t23358*t23297*t23299*(3.2E1/3.0)- \
               t23322*t23345*t23295*t23358*t23297*t23299*(3.2E1/3.0)+a5*gamma_bb[index]*t23302*t23413*t23414*t23345* \
               t23292*(7.0/3.0)-c*c0*t23301*t23332*t23307*t23406*t23309*t23293*(4.0/3.0)+c*c0*t23301*t23303*t23307* \
               t23334*t23335*t23309*t23318*(8.0/2.7E1)+a5*c0*gamma_bb[index]*t23301*t23307*t23334*t23335*t23318*t23292* \
               t23409*(5.6E1/9.0)+c*c0*t23301*t23331*t23323*t23332*t23307*t23334*t23335*t23309*(8.0/9.0)+c*c0*t23301* \
               t23323*t23307*t23334*t23335*t23309*t23318*t23345*(4.0/9.0)-c*c0*t23301*t23332*t23307*t23334*t23406* \
               t23335*t23309*t23293*(4.0/3.0)+c*c0*t23301*t23307*t23334*t23335*t23407*t23309*t23408*t23293*4.0+c* \
               c0*t23301*t23307*t23334*t23335*t23309*t23318*t23417*t23293*(2.0/3.0)+c*c0*t23301*t23307*t23334*t23335* \
               t23309*t23318*t23293*t23429*(2.0/3.0)-c*c0*t23301*t23411*t23309*t23318*t23336*t23394*t23395*t23396* \
               (4.096E3/2.7E1)-c*c0*t23301*t23412*t23309*t23318*t23336*t23295*t23297*t23299*(4.48E2/9.0)+a5*c0*gamma_bb[index]* \
               t23301*t23331*t23332*t23307*t23334*t23326*t23335*t23292*(5.6E1/9.0)+a5*c0*gamma_bb[index]*t23301*t23307* \
               t23334*t23326*t23335*t23318*t23345*t23292*(2.8E1/9.0)-a5*c0*gamma_bb[index]*t23301*t23410*t23318*t23336* \
               t23292*t23295*t23297*t23299*(8.96E2/2.7E1)+c*c0*t23301*t23331*t23332*t23307*t23334*t23335*t23309*t23345* \
               t23293*(8.0/3.0)-c*c0*t23301*t23331*t23332*t23333*t23309*t23336*t23295*t23297*t23299*(2.56E2/9.0)+ \
               c*c0*t23301*t23411*t23307*t23334*t23335*t23309*t23318*t23394*t23395*t23396*(2.048E3/2.7E1)-c*c0*t23301* \
               t23411*t23334*t23335*t23309*t23318*t23336*t23394*t23395*t23396*(4.096E3/2.7E1)+c*c0*t23301*t23411* \
               t23334*t23335*t23309*t23318*t23418*t23394*t23395*t23396*(1.024E3/9.0)+c*c0*t23301*t23412*t23307*t23334* \
               t23335*t23309*t23318*t23295*t23297*t23299*(4.48E2/9.0)-c*c0*t23301*t23412*t23334*t23335*t23309*t23318* \
               t23336*t23295*t23297*t23299*(4.48E2/9.0)+a5*c0*gamma_bb[index]*t23301*t23410*t23307*t23334*t23335* \
               t23318*t23292*t23295*t23297*t23299*(8.96E2/2.7E1)-a5*c0*gamma_bb[index]*t23301*t23410*t23334*t23335* \
               t23318*t23336*t23292*t23295*t23297*t23299*(8.96E2/2.7E1)+c*c0*t23301*t23331*t23332*t23333*t23307*t23334* \
               t23335*t23309*t23295*t23297*t23299*(2.56E2/9.0)-c*c0*t23301*t23331*t23332*t23333*t23334*t23335*t23309* \
               t23336*t23295*t23297*t23299*(2.56E2/9.0)+c*c0*t23301*t23333*t23307*t23334*t23335*t23309*t23318*t23345* \
               t23295*t23297*t23299*(1.28E2/9.0)-c*c0*t23301*t23333*t23334*t23335*t23309*t23318*t23336*t23345*t23295* \
               t23297*t23299*(1.28E2/9.0))-t23430*t23351*t23348*(t23322*t23452*t23453*(-3.0/2.0)+t23322*t23451*t23357* \
               3.0-t23307*t23325*t23454*t23295*t23297*t23299*(6.08E2/3.0)+t23325*t23336*t23455*t23394*t23395*t23396* \
               (1.024E3/3.0)+c*c0*t23301*t23303*t23307*t23309*t23318*(1.6E1/9.0)-t23307*t23356*t23357*t23295*t23358* \
               t23297*t23299*3.2E1+a5*c0*gamma_bb[index]*t23301*t23307*t23318*t23292*t23409*(1.12E2/3.0)+c*c0*t23301* \
               t23331*t23323*t23332*t23307*t23309*(1.6E1/3.0)-c*c0*t23301*t23332*t23307*t23406*t23309*t23293*8.0+ \
               c*c0*t23301*t23307*t23407*t23309*t23408*t23293*2.4E1+a5*c0*gamma_bb[index]*t23301*t23331*t23332*t23307* \
               t23326*t23292*(1.12E2/3.0)+c*c0*t23301*t23411*t23307*t23309*t23318*t23394*t23395*t23396*(4.096E3/9.0) \
               -c*c0*t23301*t23411*t23309*t23318*t23336*t23394*t23395*t23396*(8.192E3/9.0)+c*c0*t23301*t23411*t23309* \
               t23318*t23418*t23394*t23395*t23396*(2.048E3/3.0)+c*c0*t23301*t23412*t23307*t23309*t23318*t23295*t23297* \
               t23299*(8.96E2/3.0)-c*c0*t23301*t23412*t23309*t23318*t23336*t23295*t23297*t23299*(8.96E2/3.0)+a5*c0* \
               gamma_bb[index]*t23301*t23410*t23307*t23318*t23292*t23295*t23297*t23299*(1.792E3/9.0)-a5*c0*gamma_bb[index]* \
               t23301*t23410*t23318*t23336*t23292*t23295*t23297*t23299*(1.792E3/9.0)+c*c0*t23301*t23331*t23332*t23333* \
               t23307*t23309*t23295*t23297*t23299*(5.12E2/3.0)-c*c0*t23301*t23331*t23332*t23333*t23309*t23336*t23295* \
               t23297*t23299*(5.12E2/3.0))-t23430*t23351*t23436*t23393*2.0-t23430*t23436*t23348*t23387*2.0+t23351* \
               (t23436*t23436)*1.0/(t23339*t23339*t23339)*t23348*2.0+t23302*t23414*t23460*t23417*t23456*t23457*t23458* \
               t23459*(3.0/2.0)-t23302*t23414*t23371*t23345*t23456*t23457*t23458*t23459*(1.0/2.0)+t23302*t23414*t23460* \
               t23429*t23456*t23457*t23458*t23459*(3.0/2.0)-t23302*t23331*t23414*t23460*t23317*t23345*t23456*t23457* \
               t23458*3.0+t23302*t23306*t23414*t23345*t23456*t23295*t23457*t23466*t23297*t23459*t23299*1.6E1-t23302* \
               t23414*t23345*t23456*t23295*t23457*t23466*t23458*t23297*t23459*t23299*1.6E1-a5*gamma_bb[index]*1.0/ \
               (rho_b[index]*rho_b[index]*rho_b[index])*1.0/(t23309*t23309)*t23345*t23292*t23456*t23457*t23458*t23476* \
               t23459*(7.0/2.0))*(1.0/2.0)-c0*rho_b[index]*t23490*t23492*t23376*t23497-c0*rho_b[index]*t23490*t23376* \
               t23485*t23469+c0*rho_b[index]*t23472*t23376*(t23485*t23485)*t23469*(1.0/2.0)-c0*rho_b[index]*t23472* \
               t23492*t23376*(c*c0*t23303*(8.0/2.7E1)-t23363*t23366*t23377*(a1*gamma_bb[index]*t23292*t23409*(8.8E1/ \
               9.0)+t23454*t23294*t23295*t23297*(3.04E2/9.0))*1.0E5+t23363*t23454*t23294*t23366*t23295*t23377*t23297* \
               t23369*(3.04E7/9.0)+t23363*t23294*t23366*t23295*t23358*t23475*t23377*t23297*(3.2E6/3.0)-t23363*t23455* \
               (t23294*t23294)*t23366*t23377*t23395*t23369*t23396*(2.56E7/9.0)-(a3*a3)*t23333*t23363*1.0/pow(t23365,5.0/ \
               2.0)*t23295*t23377*t23476*t23297*t23369*(1.225E6/3.0)+kab1*(rab1*rab1)*t23361*t23370*t23366*t23367* \
               t23377*t23369*1.0/pow(t23298,2.0/5.0)*(6.4E4/9.0)+a3*gamma_bb[index]*t23302*t23413*t23363*t23292*t23475* \
               t23377*t23478*(7.0E5/3.0)-c*kab1*rab1*t23303*t23361*t23366*t23377*t23369*t23477*(3.2E5/9.0)-c*kab1* \
               rab1*t23323*t23361*t23366*t23475*t23377*t23477*(1.6E5/3.0)+kab1*rab1*t23400*t23361*t23370*t23366*t23367* \
               t23377*t23369*(1.6E4/9.0)+a3*gamma_bb[index]*1.0/pow(rho_b[index],1.3E1/3.0)*t23302*t23363*t23292* \
               t23377*t23369*t23478*(3.5E6/9.0)+a3*gamma_bb[index]*kab1*rab1*t23361*t23292*t23409*t23377*t23369*t23477* \
               t23478*(5.6E5/9.0)-a3*gamma_bb[index]*1.0/pow(rho_b[index],2.9E1/3.0)*t23302*t23363*t23292*t23294* \
               t23295*t23377*t23297*t23369*t23478*(1.12E7/9.0)+c*kab1*rab1*t23412*t23361*t23294*t23366*t23295*t23377* \
               t23297*t23369*t23477*(2.56E6/9.0))*(1.0/2.0)-c0*rho_b[index]*t23472*t23376*t23469*(t23370*t23375*t23367* \
               (1.0E1/9.0)-t23370*t23481*t23484*t23479*(8.0/3.0)+t23370*t23371*1.0/(t23374*t23374*t23374*t23374)* \
               (t23484*t23484)*6.0-t23370*t23371*t23481*(c*k2*t23303*(4.0/9.0)+c*k1*t23303*t23327*(2.0/9.0)-k1*t23402* \
               t23370*t23367*(1.0/3.6E1))*2.0)*(1.0/2.0)- 0.0 +c0*rho_b[index]*t23472*t23492*t23376*t23485*t23497;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t21887 = tspi_m13*tspi_m13;
                double t21888 = 1.0/pow(rho_a[index],1.0/3.0);
                double t21889 = a2*a2;
                double t21890 = gamma_aa[index]*gamma_aa[index];
                double t21891 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t21892 = t21887*t21887;
                double t21893 = c*t21888;
                double t21894 = a4*a4;
                double t21895 = 1.0/c;
                double t21896 = 1.0/pow(rho_a[index],7.0/3.0);
                double t21897 = sqrt(t21893);
                double t21898 = t21890*t21891*t21892*t21894*2.0;
                double t21899 = exp(t21898);
                double t21900 = t21890*t21891*t21892*t21894;
                double t21901 = t21900+1.0;
                double t21902 = 1.0/(t21901*t21901);
                double t21903 = a5*gamma_aa[index]*t21895*t21887*t21896;
                double t21904 = t21903+1.0;
                double t21915 = raa2*t21897;
                double t21905 = exp(-t21915);
                double t21906 = t21905-1.0;
                double t21907 = kaa2*t21906;
                double t21908 = pow(t21893,2.0/5.0);
                double t21916 = raa1*t21908;
                double t21909 = exp(-t21916);
                double t21910 = t21909-1.0;
                double t21911 = kaa1*t21910;
                double t21912 = -kaa0+t21911+t21907;
                double t21913 = 1.0/(t21912*t21912);
                double t21914 = c*c0*t21902*t21904*t21913*t21888*t21899*(2.0/3.0);
                double t21917 = 1.0/pow(rho_a[index],8.0/3.0);
                double t21918 = 1.0/pow(rho_a[index],4.0/3.0);
                double t21919 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t21920 = 1.0/pow(rho_a[index],2.0E1/3.0);
                double t21921 = 1.0/(t21901*t21901*t21901);
                double t21922 = t21894*t21894;
                double t21923 = 1.0/pow(rho_a[index],1.2E1);
                double t21924 = t21892*t21892;
                double t21925 = 1.0/sqrt(t21893);
                double t21926 = c*kaa2*raa2*t21905*t21925*t21918*(1.0/6.0);
                double t21927 = 1.0/pow(t21893,3.0/5.0);
                double t21928 = c*kaa1*raa1*t21909*t21918*t21927*(2.0/1.5E1);
                double t21929 = t21926+t21928;
                double t21930 = 1.0/(t21912*t21912*t21912);
                double t21931 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t21932 = 1.0/t21901;
                double t21933 = c*c0*t21904*t21913*t21888*t21899*(2.0/3.0);
                double t21934 = sqrt(t21933);
                double t21935 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t21936 = exp(t21914);
                double t21937 = Ei(-t21914);
                double t21938 = c*c0*t21902*t21904*t21913*t21918*t21899*(2.0/9.0);
                double t21939 = a5*c0*gamma_aa[index]*t21902*t21913*t21935*t21887*t21899*(1.4E1/9.0);
                double t21940 = c*c0*t21902*t21930*t21904*t21929*t21888*t21899*(4.0/3.0);
                double t21941 = c*c0*t21902*t21920*t21904*t21913*t21890*t21892*t21894*t21899*(6.4E1/9.0);
                double t21942 = t21932*t21934*6.0;
                double t21943 = c*c0*t21902*t21904*t21913*t21888*t21899*4.0;
                double t21944 = t21942+t21943+3.0;
                double t21945 = 1.0/t21944;
                double t21946 = a5*c0*t21902*t21913*t21917*t21887*t21899*(2.0/3.0);
                double t21947 = c*c0*gamma_aa[index]*t21902*t21904*t21913*t21931*t21892*t21894*t21899*(8.0/3.0);
                double t21948 = 1.0/sqrt(t21933);
                double t21951 = c*c0*gamma_aa[index]*t21921*t21904*t21913*t21931*t21892*t21894*t21899*(8.0/3.0);
                double t21949 = -t21951+t21946+t21947;
                double t21962 = c*c0*t21920*t21921*t21904*t21913*t21890*t21892*t21894*t21899*(6.4E1/9.0);
                double t21950 = t21940+t21941-t21962+t21938+t21939;
                double t21952 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t21953 = a5*c0*t21902*t21913*t21935*t21887*t21899*(1.6E1/9.0);
                double t21954 = a5*c0*t21902*t21930*t21917*t21929*t21887*t21899*(4.0/3.0);
                double t21955 = a5*c0*t21902*t21913*t21890*t21892*t21919*t21894*t21887*t21899*(4.0E1/3.0);
                double t21956 = c*c0*gamma_aa[index]*t21902*t21920*t21904*t21913*t21892*t21894*t21899*(1.36E2/9.0) \
                   ;
                double t21957 = c*c0*gamma_aa[index]*t21902*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(2.56E2/ \
                   9.0);
                double t21958 = 1.0/(t21901*t21901*t21901*t21901);
                double t21959 = c*c0*gamma_aa[index]*t21904*t21913*t21922*t21923*t21924*t21890*t21958*t21899*(1.28E2/ \
                   3.0);
                double t21960 = c*c0*gamma_aa[index]*t21902*t21930*t21904*t21931*t21892*t21929*t21894*t21899*(1.6E1/ \
                   3.0);
                double t21963 = c*c0*gamma_aa[index]*t21920*t21921*t21904*t21913*t21892*t21894*t21899*(1.36E2/9.0) \
                   ;
                double t21964 = c*c0*gamma_aa[index]*t21921*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(5.12E2/ \
                   9.0);
                double t21965 = c*c0*gamma_aa[index]*t21921*t21930*t21904*t21931*t21892*t21929*t21894*t21899*(1.6E1/ \
                   3.0);
                double t22022 = a5*c0*t21921*t21913*t21890*t21892*t21919*t21894*t21887*t21899*(4.0E1/3.0);
                double t21961 = t21960+t21953+t21954-t21963+t21955-t21964+t21956-t21965+t21957+t21959-t22022;
                double t21966 = a5*c0*t21913*t21917*t21887*t21899*(2.0/3.0);
                double t21967 = c*c0*gamma_aa[index]*t21904*t21913*t21931*t21892*t21894*t21899*(8.0/3.0);
                double t21968 = t21966+t21967;
                double t21969 = c*c0*t21904*t21913*t21918*t21899*(2.0/9.0);
                double t21970 = a5*c0*gamma_aa[index]*t21913*t21935*t21887*t21899*(1.4E1/9.0);
                double t21971 = c*c0*t21930*t21904*t21929*t21888*t21899*(4.0/3.0);
                double t21972 = c*c0*t21920*t21904*t21913*t21890*t21892*t21894*t21899*(6.4E1/9.0);
                double t21973 = t21970+t21971+t21972+t21969;
                double t21974 = t21932*t21934*4.0;
                double t21975 = c*c0*t21902*t21904*t21913*t21888*t21899*(8.0/3.0);
                double t21976 = t21974+t21975+6.0;
                double t21977 = a5*c0*t21902*t21913*t21917*t21936*t21937*t21887*t21899*(2.0/3.0);
                double t21978 = c*c0*t21902*t21904*t21913*t21936*t21937*t21949*t21888*t21899*(2.0/3.0);
                double t21979 = c*c0*gamma_aa[index]*t21902*t21904*t21913*t21931*t21936*t21892*t21937*t21894*t21899* \
                   (8.0/3.0);
                double t21980 = c*c0*t21902*t21904*t21913*t21936*t21937*t21888*t21899*(2.0/3.0);
                double t21981 = t21980+1.0;
                double t21982 = 1.0/(t21944*t21944);
                double t21983 = a5*c0*t21913*t21935*t21887*t21899*(1.6E1/9.0);
                double t21984 = a5*c0*t21930*t21917*t21929*t21887*t21899*(4.0/3.0);
                double t21985 = a5*c0*t21913*t21890*t21892*t21919*t21894*t21887*t21899*(4.0E1/3.0);
                double t21986 = c*c0*gamma_aa[index]*t21920*t21904*t21913*t21892*t21894*t21899*(1.36E2/9.0);
                double t21987 = c*c0*gamma_aa[index]*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(2.56E2/9.0) \
                   ;
                double t21988 = c*c0*gamma_aa[index]*t21930*t21904*t21931*t21892*t21929*t21894*t21899*(1.6E1/3.0) \
                   ;
                double t21989 = t21983+t21984+t21985+t21986+t21987+t21988;
                double t21990 = 1.0/pow(t21933,3.0/2.0);
                double t21991 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t21992 = t21932*t21948*t21968*2.0;
                double t21993 = a5*c0*t21902*t21913*t21917*t21887*t21899*(8.0/3.0);
                double t21994 = c*c0*gamma_aa[index]*t21902*t21904*t21913*t21931*t21892*t21894*t21899*(3.2E1/3.0) \
                   ;
                double t22056 = gamma_aa[index]*t21902*t21934*t21891*t21892*t21894*8.0;
                double t22057 = c*c0*gamma_aa[index]*t21921*t21904*t21913*t21931*t21892*t21894*t21899*(3.2E1/3.0) \
                   ;
                double t21995 = t21992+t21993+t21994-t22056-t22057;
                double t21996 = t21932*t21973*t21948*3.0;
                double t21997 = c*c0*t21902*t21904*t21913*t21918*t21899*(4.0/3.0);
                double t21998 = a5*c0*gamma_aa[index]*t21902*t21913*t21935*t21887*t21899*(2.8E1/3.0);
                double t21999 = c*c0*t21902*t21930*t21904*t21929*t21888*t21899*8.0;
                double t22000 = c*c0*t21902*t21920*t21904*t21913*t21890*t21892*t21894*t21899*(1.28E2/3.0);
                double t22019 = t21902*t21934*t21952*t21890*t21892*t21894*3.2E1;
                double t22020 = c*c0*t21920*t21921*t21904*t21913*t21890*t21892*t21894*t21899*(1.28E2/3.0);
                double t22001 = t21996+t21997+t21998+t21999+t22000-t22020-t22019;
                double t22002 = t21932*t21973*t21948*2.0;
                double t22003 = c*c0*t21902*t21904*t21913*t21918*t21899*(8.0/9.0);
                double t22004 = a5*c0*gamma_aa[index]*t21902*t21913*t21935*t21887*t21899*(5.6E1/9.0);
                double t22005 = c*c0*t21902*t21930*t21904*t21929*t21888*t21899*(1.6E1/3.0);
                double t22006 = c*c0*t21902*t21920*t21904*t21913*t21890*t21892*t21894*t21899*(2.56E2/9.0);
                double t22051 = t21902*t21934*t21952*t21890*t21892*t21894*(6.4E1/3.0);
                double t22052 = c*c0*t21920*t21921*t21904*t21913*t21890*t21892*t21894*t21899*(2.56E2/9.0);
                double t22007 = t22002+t22003+t22004+t22005+t22006-t22051-t22052;
                double t22008 = t21932*t21948*t21968*3.0;
                double t22009 = a5*c0*t21902*t21913*t21917*t21887*t21899*4.0;
                double t22010 = c*c0*gamma_aa[index]*t21902*t21904*t21913*t21931*t21892*t21894*t21899*1.6E1;
                double t22017 = gamma_aa[index]*t21902*t21934*t21891*t21892*t21894*1.2E1;
                double t22018 = c*c0*gamma_aa[index]*t21921*t21904*t21913*t21931*t21892*t21894*t21899*1.6E1;
                double t22011 = t22010+t22008-t22017+t22009-t22018;
                double t22012 = c*c0*t21902*t21904*t21913*t21918*t21936*t21937*t21899*(2.0/9.0);
                double t22013 = c*c0*t21902*t21930*t21904*t21936*t21937*t21929*t21888*t21899*(4.0/3.0);
                double t22014 = c*c0*t21902*t21904*t21913*t21950*t21936*t21937*t21888*t21899*(2.0/3.0);
                double t22015 = a5*c0*gamma_aa[index]*t21902*t21913*t21935*t21936*t21937*t21887*t21899*(1.4E1/9.0) \
                   ;
                double t22016 = c*c0*t21902*t21920*t21904*t21913*t21890*t21936*t21892*t21937*t21894*t21899*(6.4E1/ \
                   9.0);
                double t22021 = 1.0/t21904;
                double t22023 = 1.0/c0;
                double t22024 = pow(rho_a[index],1.0/3.0);
                double t22025 = exp(-t21898);
                double t22026 = t21901*t21901;
                double t22027 = t21912*t21912;
                double t22028 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t22053 = c*c0*t21920*t21921*t21904*t21913*t21890*t21936*t21892*t21937*t21894*t21899*(6.4E1/ \
                   9.0);
                double t22029 = t21940+t21941-t21962+t21938+t21939+t22012+t22013+t22014+t22015+t22016-t22053;
                double t22058 = c*c0*gamma_aa[index]*t21921*t21904*t21913*t21931*t21936*t21892*t21937*t21894*t21899* \
                   (8.0/3.0);
                double t22030 = -t21951+t21946+t21947+t21977+t21978+t21979-t22058;
                double t22031 = t21890*t21891*t21892*t21889;
                double t22032 = pow(t21893,4.0/5.0);
                double t22049 = rab1*t22032;
                double t22033 = exp(-t22049);
                double t22034 = t22033-1.0;
                double t22050 = kab1*t22034;
                double t22035 = kab0-t22050;
                double t22036 = a3*gamma_aa[index]*t21895*t21887*t21896;
                double t22037 = t22036+1.0;
                double t22038 = 1.0/sqrt(t22037);
                double t22039 = a1*gamma_aa[index]*t21917*t21887;
                double t22040 = t22031+t22039+1.0;
                double t22041 = c*c;
                double t22042 = 1.0/pow(rho_a[index],2.0/3.0);
                double t22043 = k1*t21897;
                double t22044 = c*k2*t21888;
                double t22045 = t22043+t22044;
                double t22046 = 1.0/(t22045*t22045);
                double t22055 = t22041*t22042*t22046;
                double t22047 = exp(-t22055);
                double t22048 = exp(-t22031);
                double t22054 = c*c0*t21888*(2.0/3.0);
                double t22059 = t22040*t22035*t22038*t22048*1.0E5;
                double t22060 = 1.0/pow(rho_a[index],1.0E1/3.0);
                double t22061 = 1.0/pow(t22037,3.0/2.0);
                double t22062 = t21952*t21890*t21892*t21889*(1.6E1/3.0);
                double t22063 = a1*gamma_aa[index]*t21935*t21887*(8.0/3.0);
                double t22064 = t22062+t22063;
                double t22065 = a1*t21917*t21887;
                double t22066 = gamma_aa[index]*t21891*t21892*t21889*2.0;
                double t22067 = t22065+t22066;
                double t22068 = 1.0/(c*c);
                double t22069 = 1.0/pow(t21893,1.0/5.0);
                double t22070 = t22054-t22059;
                double t22071 = 0.0 ;
                double t22072 = t21936*t21937*t21949;
                double t22073 = t21945*t21981*t21995;
                double t22074 = t21945*t21976*t22030;
                double t22075 = t21895*t21949*t22021*t22023*t22024*t22025*t22026*t22027*(3.0/2.0);
                double t22209 = t21981*t21982*t21976*t22011;
                double t22076 = t22072+t22073+t22074-t22209+t22075;
                double t22077 = t21936*t21937;
                double t22078 = t21945*t21981*t21976;
                double t22079 = t22077+t22078;
                double t22080 = 1.0/pow(rho_a[index],5.0/3.0);
                double t22081 = t22041*t22080*t22046*(2.0/3.0);
                double t22082 = 1.0/(t22045*t22045*t22045);
                double t22083 = c*k2*t21918*(1.0/3.0);
                double t22084 = c*k1*t21925*t21918*(1.0/6.0);
                double t22085 = t22083+t22084;
                double t22086 = t22081-t22041*t22042*t22082*t22085*2.0;
                double t22087 = a3*t21895*t21887*t21896*t22040*t22061*t22035*t22048*5.0E4;
                double t22088 = gamma_aa[index]*t21891*t21892*t21889*t22040*t22035*t22038*t22048*2.0E5;
                double t22090 = t22035*t22038*t22048*t22067*1.0E5;
                double t22089 = -t22090+t22087+t22088;
                double t22091 = c*c0*t21918*(2.0/9.0);
                double t22092 = t21952*t21890*t21892*t21889*t22040*t22035*t22038*t22048*(1.6E6/3.0);
                double t22093 = a3*gamma_aa[index]*t21895*t21887*t22040*t22060*t22061*t22035*t22048*(3.5E5/3.0);
                double t22203 = t22035*t22064*t22038*t22048*1.0E5;
                double t22204 = c*kab1*rab1*t21918*t22040*t22033*t22038*t22048*t22069*(8.0E4/3.0);
                double t22094 = -t22203-t22204+t22091+t22092+t22093;
                double t22095 = -t22054+t22059;
                double t22096 = ( (t22095 > 0.0) ?  1.0 : 0.0 ) ;
                double t22097 = t21890*t21891*t21892*t21889*2.0;
                double t22098 = exp(t22097);
                double t22099 = 1.0/(t22035*t22035);
                double t22100 = 1.0/(t22040*t22040);
                double t22101 = c*c0*t21888*t22100*t22037*t22098*t22099*(2.0/3.0);
                double t22102 = 1.0/(t22040*t22040*t22040);
                double t22103 = exp(t22101);
                double t22104 = Ei(-t22101);
                double t22105 = c*c0*t21918*t22100*t22037*t22098*t22099*(2.0/9.0);
                double t22106 = a3*c0*gamma_aa[index]*t21935*t21887*t22100*t22098*t22099*(1.4E1/9.0);
                double t22107 = c*c0*t21920*t21890*t21892*t21889*t22100*t22037*t22098*t22099*(6.4E1/9.0);
                double t22108 = 1.0/(t22035*t22035*t22035);
                double t22109 = sqrt(t22101);
                double t22110 = t22109*6.0;
                double t22111 = c*c0*t21888*t22100*t22037*t22098*t22099*4.0;
                double t22112 = t22110+t22111+3.0;
                double t22113 = 1.0/t22112;
                double t22136 = c*c0*t21888*t22102*t22037*t22064*t22098*t22099*(4.0/3.0);
                double t22137 = c0*kab1*rab1*t22100*t22041*t22033*t22080*t22108*t22037*t22069*t22098*(1.6E1/4.5E1) \
                   ;
                double t22114 = t22105+t22106+t22107-t22136-t22137;
                double t22115 = 1.0/sqrt(t22101);
                double t22116 = a3*c0*t21917*t21887*t22100*t22098*t22099*(2.0/3.0);
                double t22117 = c*c0*gamma_aa[index]*t21931*t21892*t21889*t22100*t22037*t22098*t22099*(8.0/3.0);
                double t22119 = c*c0*t21888*t22102*t22037*t22067*t22098*t22099*(4.0/3.0);
                double t22118 = t22116+t22117-t22119;
                double t22120 = a1*t21935*t21887*(8.0/3.0);
                double t22121 = gamma_aa[index]*t21952*t21892*t21889*(3.2E1/3.0);
                double t22122 = t22120+t22121;
                double t22123 = t21889*t21889;
                double t22124 = a3*c0*t21917*t21887*t22102*t22064*t22098*t22099*(4.0/3.0);
                double t22125 = c*c0*t21918*t22102*t22037*t22067*t22098*t22099*(4.0/9.0);
                double t22126 = c*c0*t21888*t22102*t22122*t22037*t22098*t22099*(4.0/3.0);
                double t22127 = 1.0/(t22040*t22040*t22040*t22040);
                double t22128 = a3*c0*gamma_aa[index]*t21935*t21887*t22102*t22067*t22098*t22099*(2.8E1/9.0);
                double t22129 = c*c0*gamma_aa[index]*t21931*t21892*t21889*t22102*t22037*t22064*t22098*t22099*(1.6E1/ \
                   3.0);
                double t22130 = c*c0*t21920*t21890*t21892*t21889*t22102*t22037*t22067*t22098*t22099*(1.28E2/9.0);
                double t22131 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t22132 = a3*c*c0*kab1*rab1*t21887*t22100*t22131*t22033*t22108*t22069*t22098*(1.6E1/4.5E1);
                double t22133 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]);
                double t22134 = c0*gamma_aa[index]*kab1*rab1*t21892*t21889*t22100*t22041*t22033*t22133*t22108*t22037* \
                   t22069*t22098*(6.4E1/4.5E1);
                double t22139 = a3*c0*t21935*t21887*t22100*t22098*t22099*(1.6E1/9.0);
                double t22140 = c*c0*t21888*t22037*t22064*t22127*t22067*t22098*t22099*4.0;
                double t22141 = a3*c0*t21890*t21892*t21919*t21887*t21889*t22100*t22098*t22099*(4.0E1/3.0);
                double t22142 = c*c0*gamma_aa[index]*t21920*t21892*t21889*t22100*t22037*t22098*t22099*(1.36E2/9.0) \
                   ;
                double t22143 = c*c0*gamma_aa[index]*t21923*t21924*t21890*t22100*t22123*t22037*t22098*t22099*(2.56E2/ \
                   9.0);
                double t22144 = c0*kab1*rab1*t22102*t22041*t22033*t22080*t22108*t22037*t22067*t22069*t22098*(3.2E1/ \
                   4.5E1);
                double t22135 = t22130-t22140+t22132-t22141+t22124-t22142+t22125+t22134-t22143+t22126-t22144+t22128+ \
                   t22129-t22139;
                double t22138 = 1.0/rho_a[index];
                double t22145 = c*c0*t21888*t22100*t22103*t22104*t22037*t22098*t22099*(2.0/3.0);
                double t22146 = t22145+1.0;
                double t22147 = t22115*t22118*2.0;
                double t22148 = a3*c0*t21917*t21887*t22100*t22098*t22099*(8.0/3.0);
                double t22149 = c*c0*gamma_aa[index]*t21931*t21892*t21889*t22100*t22037*t22098*t22099*(3.2E1/3.0) \
                   ;
                double t22201 = c*c0*t21888*t22102*t22037*t22067*t22098*t22099*(1.6E1/3.0);
                double t22150 = -t22201+t22147+t22148+t22149;
                double t22151 = 1.0/(t22112*t22112);
                double t22152 = t22114*t22115*2.0;
                double t22153 = c*c0*t21918*t22100*t22037*t22098*t22099*(8.0/9.0);
                double t22154 = a3*c0*gamma_aa[index]*t21935*t21887*t22100*t22098*t22099*(5.6E1/9.0);
                double t22155 = c*c0*t21920*t21890*t21892*t21889*t22100*t22037*t22098*t22099*(2.56E2/9.0);
                double t22187 = c*c0*t21888*t22102*t22037*t22064*t22098*t22099*(1.6E1/3.0);
                double t22188 = c0*kab1*rab1*t22100*t22041*t22033*t22080*t22108*t22037*t22069*t22098*(6.4E1/4.5E1) \
                   ;
                double t22156 = t22152+t22153+t22154+t22155-t22187-t22188;
                double t22157 = t22109*4.0;
                double t22158 = c*c0*t21888*t22100*t22037*t22098*t22099*(8.0/3.0);
                double t22159 = t22157+t22158+6.0;
                double t22160 = t22115*t22118*3.0;
                double t22161 = a3*c0*t21917*t21887*t22100*t22098*t22099*4.0;
                double t22162 = c*c0*gamma_aa[index]*t21931*t21892*t21889*t22100*t22037*t22098*t22099*1.6E1;
                double t22178 = c*c0*t21888*t22102*t22037*t22067*t22098*t22099*8.0;
                double t22163 = t22160+t22161+t22162-t22178;
                double t22164 = c*c0*t21918*t22100*t22103*t22104*t22037*t22098*t22099*(2.0/9.0);
                double t22165 = a3*c0*gamma_aa[index]*t21935*t21887*t22100*t22103*t22104*t22098*t22099*(1.4E1/9.0) \
                   ;
                double t22166 = c*c0*t21888*t22100*t22103*t22104*t22114*t22037*t22098*t22099*(2.0/3.0);
                double t22167 = c*c0*t21920*t21890*t21892*t21889*t22100*t22103*t22104*t22037*t22098*t22099*(6.4E1/ \
                   9.0);
                double t22168 = t22114*t22115*3.0;
                double t22169 = c*c0*t21918*t22100*t22037*t22098*t22099*(4.0/3.0);
                double t22170 = a3*c0*gamma_aa[index]*t21935*t21887*t22100*t22098*t22099*(2.8E1/3.0);
                double t22171 = c*c0*t21920*t21890*t21892*t21889*t22100*t22037*t22098*t22099*(1.28E2/3.0);
                double t22179 = c*c0*t21888*t22102*t22037*t22064*t22098*t22099*8.0;
                double t22180 = c0*kab1*rab1*t22100*t22041*t22033*t22080*t22108*t22037*t22069*t22098*(3.2E1/1.5E1) \
                   ;
                double t22172 = t22170+t22171-t22180+t22168+t22169-t22179;
                double t22173 = a3*c0*t21917*t21887*t22100*t22103*t22104*t22098*t22099*(2.0/3.0);
                double t22174 = c*c0*t21888*t22100*t22103*t22104*t22037*t22118*t22098*t22099*(2.0/3.0);
                double t22175 = c*c0*gamma_aa[index]*t21931*t21892*t21889*t22100*t22103*t22104*t22037*t22098*t22099* \
                   (8.0/3.0);
                double t22202 = c*c0*t21888*t22102*t22103*t22104*t22037*t22067*t22098*t22099*(4.0/3.0);
                double t22176 = -t22202+t22116+t22117-t22119+t22173+t22174+t22175;
                double t22177 = 1.0/pow(t22101,3.0/2.0);
                double t22181 = 1.0/t22037;
                double t22182 = exp(-t22097);
                double t22183 = t22035*t22035;
                double t22184 = t22040*t22040;
                double t22185 = 1.0/(rho_a[index]*rho_a[index]);
                double t22186 = t22105+t22106+t22107-t22136-t22137+t22164+t22165+t22166+t22167-c*c0*t21888*t22102* \
                   t22103*t22104*t22037*t22064*t22098*t22099*(4.0/3.0)-c0*kab1*rab1*t22100*t22103*t22041*t22104*t22033* \
                   t22080*t22108*t22037*t22069*t22098*(1.6E1/4.5E1);
                double t22189 = a3*t21895*t21887*t22040*t22060*t22061*t22035*t22048*(3.5E5/3.0);
                double t22190 = a3*t21895*t21887*t21896*t22061*t22035*t22064*t22048*5.0E4;
                double t22191 = gamma_aa[index]*t21952*t21892*t21889*t22040*t22035*t22038*t22048*(3.2E6/3.0);
                double t22192 = gamma_aa[index]*t21891*t21892*t21889*t22035*t22064*t22038*t22048*2.0E5;
                double t22193 = t21952*t21890*t21892*t21889*t22035*t22038*t22048*t22067*(1.6E6/3.0);
                double t22194 = a3*a3;
                double t22195 = 1.0/pow(t22037,5.0/2.0);
                double t22196 = a3*gamma_aa[index]*t21895*t21887*t22060*t22061*t22035*t22048*t22067*(3.5E5/3.0);
                double t22197 = a3*kab1*rab1*t21935*t21887*t22040*t22033*t22061*t22048*t22069*(4.0E4/3.0);
                double t22198 = 1.0/pow(rho_a[index],2.6E1/3.0);
                double t22199 = c*gamma_aa[index]*kab1*rab1*t21920*t21892*t21889*t22040*t22033*t22038*t22048*t22069* \
                   (1.6E5/3.0);
                double t22200 = t22190+t22191+t22192+t22193+t22196+t22197+t22189+t22199-t22122*t22035*t22038*t22048* \
                   1.0E5-c*kab1*rab1*t21918*t22033*t22038*t22048*t22067*t22069*(8.0E4/3.0)-gamma_aa[index]*t21924*t21890* \
                   t21991*t22040*t22123*t22035*t22038*t22048*(3.2E6/3.0)-gamma_aa[index]*t21931*t21892*t22040*t22035* \
                   t22048*t22068*t22194*t22195*1.75E5-a3*t21890*t21892*t21895*t21887*t21889*t22040*t22061*t22035*t22048* \
                   t22198*5.0E5;
                double t22205 = 0.0 ;
                double t22206 = t22103*t22104;
                double t22207 = t22113*t22146*t22159;
                double t22208 = t22206+t22207;
                v_rho_a_gamma_aa_[index] = rho_a[index]*( ( (c*c0*t21888*(-2.0/3.0)+t22040*t22035*t22038*exp(-t21890* \
                   t21891*t21892*t21889)*1.0E5 > 0.0) ? c0*t22047*1.0*(t21945*t21981*(t21932*t21948*t21989*2.0-t21932* \
                   t21990*t21973*t21968-gamma_aa[index]*t21902*t21934*t21952*t21892*t21894*(1.28E2/3.0)+a5*c0*t21902* \
                   t21913*t21935*t21887*t21899*(6.4E1/9.0)+gamma_aa[index]*t21921*t21922*t21924*t21934*t21890*t21991* \
                   (2.56E2/3.0)-gamma_aa[index]*t21902*t21891*t21892*t21973*t21894*t21948*4.0-t21902*t21952*t21890*t21892* \
                   t21894*t21948*t21968*(3.2E1/3.0)+a5*c0*t21902*t21930*t21917*t21929*t21887*t21899*(1.6E1/3.0)+c*c0* \
                   gamma_aa[index]*t21902*t21920*t21904*t21913*t21892*t21894*t21899*(5.44E2/9.0)-c*c0*gamma_aa[index]* \
                   t21920*t21921*t21904*t21913*t21892*t21894*t21899*(5.44E2/9.0)+a5*c0*t21902*t21913*t21890*t21892*t21919* \
                   t21894*t21887*t21899*(1.6E2/3.0)-a5*c0*t21921*t21913*t21890*t21892*t21919*t21894*t21887*t21899*(1.6E2/ \
                   3.0)+c*c0*gamma_aa[index]*t21902*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(1.024E3/9.0)-c* \
                   c0*gamma_aa[index]*t21921*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(2.048E3/9.0)+c*c0*gamma_aa[index]* \
                   t21904*t21913*t21922*t21923*t21924*t21890*t21958*t21899*(5.12E2/3.0)+c*c0*gamma_aa[index]*t21902*t21930* \
                   t21904*t21931*t21892*t21929*t21894*t21899*(6.4E1/3.0)-c*c0*gamma_aa[index]*t21921*t21930*t21904*t21931* \
                   t21892*t21929*t21894*t21899*(6.4E1/3.0))+t21945*t21976*(t21960+t21953+t21954-t21963+t21955-t21964+ \
                   t21956-t21965+t21957+t21959-t22022+t21950*t21949+t21949*t22138*(1.0/3.0)+(t21929*t21949*2.0)/t21912+ \
                   t21952*t21890*t21892*t21894*t21949*(3.2E1/3.0)-t21932*t21952*t21890*t21892*t21894*t21949*(3.2E1/3.0) \
                   +a5*gamma_aa[index]*t21895*t21949*t21887*t22021*t22060*(7.0/3.0)+a5*c0*t21902*t21913*t21935*t21936* \
                   t21937*t21887*t21899*(1.6E1/9.0)+a5*c0*t21902*t21913*t21950*t21917*t21936*t21937*t21887*t21899*(2.0/ \
                   3.0)+a5*c0*t21902*t21930*t21917*t21936*t21937*t21929*t21887*t21899*(4.0/3.0)+c*c0*t21902*t21904*t21913* \
                   t21961*t21936*t21937*t21888*t21899*(2.0/3.0)+c*c0*t21902*t21904*t21913*t21918*t21936*t21937*t21949* \
                   t21899*(2.0/9.0)+a5*c0*gamma_aa[index]*t21902*t21913*t21935*t21936*t21937*t21949*t21887*t21899*(1.4E1/ \
                   9.0)+c*c0*t21902*t21904*t21913*t21950*t21936*t21937*t21949*t21888*t21899*(2.0/3.0)+c*c0*t21902*t21930* \
                   t21904*t21936*t21937*t21929*t21949*t21888*t21899*(4.0/3.0)+c*c0*gamma_aa[index]*t21902*t21920*t21904* \
                   t21913*t21936*t21892*t21937*t21894*t21899*(1.36E2/9.0)-c*c0*gamma_aa[index]*t21920*t21921*t21904*t21913* \
                   t21936*t21892*t21937*t21894*t21899*(1.36E2/9.0)+a5*c0*t21902*t21913*t21890*t21936*t21892*t21919*t21937* \
                   t21894*t21887*t21899*(4.0E1/3.0)-a5*c0*t21921*t21913*t21890*t21936*t21892*t21919*t21937*t21894*t21887* \
                   t21899*(4.0E1/3.0)+c*c0*gamma_aa[index]*t21902*t21904*t21913*t21922*t21923*t21924*t21890*t21936*t21937* \
                   t21899*(2.56E2/9.0)-c*c0*gamma_aa[index]*t21921*t21904*t21913*t21922*t21923*t21924*t21890*t21936*t21937* \
                   t21899*(5.12E2/9.0)+c*c0*gamma_aa[index]*t21902*t21904*t21913*t21931*t21950*t21936*t21892*t21937*t21894* \
                   t21899*(8.0/3.0)-c*c0*gamma_aa[index]*t21921*t21904*t21913*t21931*t21950*t21936*t21892*t21937*t21894* \
                   t21899*(8.0/3.0)+c*c0*gamma_aa[index]*t21904*t21913*t21922*t21923*t21924*t21890*t21936*t21937*t21958* \
                   t21899*(1.28E2/3.0)+c*c0*gamma_aa[index]*t21902*t21930*t21904*t21931*t21936*t21892*t21937*t21929*t21894* \
                   t21899*(1.6E1/3.0)-c*c0*gamma_aa[index]*t21921*t21930*t21904*t21931*t21936*t21892*t21937*t21929*t21894* \
                   t21899*(1.6E1/3.0)+c*c0*t21902*t21920*t21904*t21913*t21890*t21936*t21892*t21937*t21894*t21949*t21899* \
                   (6.4E1/9.0)-c*c0*t21920*t21921*t21904*t21913*t21890*t21936*t21892*t21937*t21894*t21949*t21899*(6.4E1/ \
                   9.0))+t21961*t21936*t21937+t21945*t21995*t22029+t21945*t22030*t22007+t21950*t21936*t21937*t21949-t21981* \
                   t21982*t21995*t22001-t21982*t21976*t22001*t22030-t21981*t21982*t22011*t22007-t21982*t21976*t22011* \
                   t22029-t21981*t21982*t21976*(t21932*t21948*t21989*3.0-t21932*t21990*t21973*t21968*(3.0/2.0)-gamma_aa[index]* \
                   t21902*t21934*t21952*t21892*t21894*6.4E1+a5*c0*t21902*t21913*t21935*t21887*t21899*(3.2E1/3.0)+gamma_aa[index]* \
                   t21921*t21922*t21924*t21934*t21890*t21991*1.28E2-gamma_aa[index]*t21902*t21891*t21892*t21973*t21894* \
                   t21948*6.0-t21902*t21952*t21890*t21892*t21894*t21948*t21968*1.6E1+a5*c0*t21902*t21930*t21917*t21929* \
                   t21887*t21899*8.0+c*c0*gamma_aa[index]*t21902*t21920*t21904*t21913*t21892*t21894*t21899*(2.72E2/3.0) \
                   -c*c0*gamma_aa[index]*t21920*t21921*t21904*t21913*t21892*t21894*t21899*(2.72E2/3.0)+a5*c0*t21902*t21913* \
                   t21890*t21892*t21919*t21894*t21887*t21899*8.0E1-a5*c0*t21921*t21913*t21890*t21892*t21919*t21894*t21887* \
                   t21899*8.0E1+c*c0*gamma_aa[index]*t21902*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(5.12E2/ \
                   3.0)-c*c0*gamma_aa[index]*t21921*t21904*t21913*t21922*t21923*t21924*t21890*t21899*(1.024E3/3.0)+c* \
                   c0*gamma_aa[index]*t21904*t21913*t21922*t21923*t21924*t21890*t21958*t21899*2.56E2+c*c0*gamma_aa[index]* \
                   t21902*t21930*t21904*t21931*t21892*t21929*t21894*t21899*3.2E1-c*c0*gamma_aa[index]*t21921*t21930*t21904* \
                   t21931*t21892*t21929*t21894*t21899*3.2E1)+1.0/(t21944*t21944*t21944)*t21981*t21976*t22001*t22011*2.0+ \
                   t21961*t21895*t22021*t22023*t22024*t22025*t22026*t22027*(3.0/2.0)+t21950*t21895*t21949*t22021*t22023* \
                   t22024*t22025*t22026*t22027*(3.0/2.0)-a5*1.0/(t21904*t21904)*t21950*t21887*t22023*t22025*t22026*t22027* \
                   t22068*t22185*(3.0/2.0)+gamma_aa[index]*t21901*t21950*t21892*t21894*t21895*t22021*t22023*t22025*t22027* \
                   t22028*6.0-gamma_aa[index]*t21950*t21892*t21894*t21895*t22021*t22023*t22025*t22026*t22027*t22028*6.0) \
                   *(-1.0/2.0) : 0.0 ) +c0*t22200*t22071*t22047*t22079*(1.0/2.0)+c0*t22071*t22047*t22076*t22094*(1.0/ \
                   2.0)+c0*t22047*t22076*t22086*t22096*(1.0/2.0)+ 0.0 +c0*t22205*t22047*t22094*t22079*t22089*(1.0/2.0) \
                   -c0*t22071*t22047*t22086*t22079*t22089*(1.0/2.0))+rho_b[index]*(c0*t22096*(t22113*t22146*(t22115*t22135* \
                   2.0+t22114*t22118*t22177-a3*c0*t21935*t21887*t22100*t22098*t22099*(6.4E1/9.0)+a3*c0*t21917*t21887* \
                   t22102*t22064*t22098*t22099*(1.6E1/3.0)+c*c0*t21888*t22102*t22122*t22037*t22098*t22099*(1.6E1/3.0) \
                   +c*c0*t21918*t22102*t22037*t22067*t22098*t22099*(1.6E1/9.0)+a3*c0*gamma_aa[index]*t21935*t21887*t22102* \
                   t22067*t22098*t22099*(1.12E2/9.0)-c*c0*t21888*t22037*t22064*t22127*t22067*t22098*t22099*1.6E1-c*c0* \
                   gamma_aa[index]*t21920*t21892*t21889*t22100*t22037*t22098*t22099*(5.44E2/9.0)-a3*c0*t21890*t21892* \
                   t21919*t21887*t21889*t22100*t22098*t22099*(1.6E2/3.0)-c*c0*gamma_aa[index]*t21923*t21924*t21890*t22100* \
                   t22123*t22037*t22098*t22099*(1.024E3/9.0)+c*c0*gamma_aa[index]*t21931*t21892*t21889*t22102*t22037* \
                   t22064*t22098*t22099*(6.4E1/3.0)+c*c0*t21920*t21890*t21892*t21889*t22102*t22037*t22067*t22098*t22099* \
                   (5.12E2/9.0)+a3*c*c0*kab1*rab1*t21887*t22100*t22131*t22033*t22108*t22069*t22098*(6.4E1/4.5E1)-c0*kab1* \
                   rab1*t22102*t22041*t22033*t22080*t22108*t22037*t22067*t22069*t22098*(1.28E2/4.5E1)+c0*gamma_aa[index]* \
                   kab1*rab1*t21892*t21889*t22100*t22041*t22033*t22133*t22108*t22037*t22069*t22098*(2.56E2/4.5E1))+t22113* \
                   t22159*(t22130-t22140+t22132-t22141+t22124-t22142+t22125+t22134-t22143+t22126-t22144+t22128+t22129- \
                   t22139-t22114*t22118-t22118*t22138*(1.0/3.0)+(t22064*t22118*2.0)/t22040-t21952*t21890*t21892*t21889* \
                   t22118*(3.2E1/3.0)-a3*gamma_aa[index]*t21895*t21887*t22060*t22118*t22181*(7.0/3.0)+(c*kab1*rab1*t21918* \
                   t22033*t22118*t22069*(8.0/1.5E1))/t22035-a3*c0*t21935*t21887*t22100*t22103*t22104*t22098*t22099*(1.6E1/ \
                   9.0)-a3*c0*t21917*t21887*t22100*t22103*t22104*t22114*t22098*t22099*(2.0/3.0)+a3*c0*t21917*t21887*t22102* \
                   t22103*t22104*t22064*t22098*t22099*(4.0/3.0)-c*c0*t21918*t22100*t22103*t22104*t22037*t22118*t22098* \
                   t22099*(2.0/9.0)+c*c0*t21888*t22102*t22103*t22104*t22122*t22037*t22098*t22099*(4.0/3.0)+c*c0*t21918* \
                   t22102*t22103*t22104*t22037*t22067*t22098*t22099*(4.0/9.0)+c*c0*t21888*t22100*t22103*t22104*t22135* \
                   t22037*t22098*t22099*(2.0/3.0)-a3*c0*gamma_aa[index]*t21935*t21887*t22100*t22103*t22104*t22118*t22098* \
                   t22099*(1.4E1/9.0)+a3*c0*gamma_aa[index]*t21935*t21887*t22102*t22103*t22104*t22067*t22098*t22099*(2.8E1/ \
                   9.0)-c*c0*t21888*t22100*t22103*t22104*t22114*t22037*t22118*t22098*t22099*(2.0/3.0)+c*c0*t21888*t22102* \
                   t22103*t22104*t22114*t22037*t22067*t22098*t22099*(4.0/3.0)+c*c0*t21888*t22102*t22103*t22104*t22037* \
                   t22064*t22118*t22098*t22099*(4.0/3.0)-c*c0*t21888*t22103*t22104*t22037*t22064*t22127*t22067*t22098* \
                   t22099*4.0-c*c0*gamma_aa[index]*t21920*t21892*t21889*t22100*t22103*t22104*t22037*t22098*t22099*(1.36E2/ \
                   9.0)-a3*c0*t21890*t21892*t21919*t21887*t21889*t22100*t22103*t22104*t22098*t22099*(4.0E1/3.0)-c*c0* \
                   gamma_aa[index]*t21923*t21924*t21890*t22100*t22103*t22104*t22123*t22037*t22098*t22099*(2.56E2/9.0) \
                   -c*c0*gamma_aa[index]*t21931*t21892*t21889*t22100*t22103*t22104*t22114*t22037*t22098*t22099*(8.0/3.0) \
                   +c*c0*gamma_aa[index]*t21931*t21892*t21889*t22102*t22103*t22104*t22037*t22064*t22098*t22099*(1.6E1/ \
                   3.0)-c*c0*t21920*t21890*t21892*t21889*t22100*t22103*t22104*t22037*t22118*t22098*t22099*(6.4E1/9.0) \
                   +c*c0*t21920*t21890*t21892*t21889*t22102*t22103*t22104*t22037*t22067*t22098*t22099*(1.28E2/9.0)+a3* \
                   c*c0*kab1*rab1*t21887*t22100*t22103*t22104*t22131*t22033*t22108*t22069*t22098*(1.6E1/4.5E1)+c0*kab1* \
                   rab1*t22100*t22103*t22041*t22104*t22033*t22080*t22108*t22037*t22118*t22069*t22098*(1.6E1/4.5E1)-c0* \
                   kab1*rab1*t22102*t22103*t22041*t22104*t22033*t22080*t22108*t22037*t22067*t22069*t22098*(3.2E1/4.5E1) \
                   +c0*gamma_aa[index]*kab1*rab1*t21892*t21889*t22100*t22103*t22041*t22104*t22033*t22133*t22108*t22037* \
                   t22069*t22098*(6.4E1/4.5E1))+t22103*t22104*t22135-t22113*t22156*t22176-t22113*t22150*(t22105+t22106+ \
                   t22107+t22164+t22165+t22166+t22167-c*c0*t21888*t22102*t22037*t22064*t22098*t22099*(4.0/3.0)-c*c0*t21888* \
                   t22102*t22103*t22104*t22037*t22064*t22098*t22099*(4.0/3.0)-c0*kab1*rab1*t22100*t22041*t22033*t22080* \
                   t22108*t22037*t22069*t22098*(1.6E1/4.5E1)-c0*kab1*rab1*t22100*t22103*t22041*t22104*t22033*t22080*t22108* \
                   t22037*t22069*t22098*(1.6E1/4.5E1))-t22103*t22104*t22114*t22118+t22150*t22151*t22172*t22146+t22151* \
                   t22163*t22146*t22156+t22151*t22172*t22176*t22159+t22151*t22163*t22159*t22186-t22151*t22146*t22159* \
                   (t22115*t22135*3.0+t22114*t22118*t22177*(3.0/2.0)-a3*c0*t21935*t21887*t22100*t22098*t22099*(3.2E1/ \
                   3.0)+a3*c0*t21917*t21887*t22102*t22064*t22098*t22099*8.0+c*c0*t21888*t22102*t22122*t22037*t22098*t22099* \
                   8.0+c*c0*t21918*t22102*t22037*t22067*t22098*t22099*(8.0/3.0)+a3*c0*gamma_aa[index]*t21935*t21887*t22102* \
                   t22067*t22098*t22099*(5.6E1/3.0)-c*c0*t21888*t22037*t22064*t22127*t22067*t22098*t22099*2.4E1-c*c0* \
                   gamma_aa[index]*t21920*t21892*t21889*t22100*t22037*t22098*t22099*(2.72E2/3.0)-a3*c0*t21890*t21892* \
                   t21919*t21887*t21889*t22100*t22098*t22099*8.0E1-c*c0*gamma_aa[index]*t21923*t21924*t21890*t22100*t22123* \
                   t22037*t22098*t22099*(5.12E2/3.0)+c*c0*gamma_aa[index]*t21931*t21892*t21889*t22102*t22037*t22064*t22098* \
                   t22099*3.2E1+c*c0*t21920*t21890*t21892*t21889*t22102*t22037*t22067*t22098*t22099*(2.56E2/3.0)+a3*c* \
                   c0*kab1*rab1*t21887*t22100*t22131*t22033*t22108*t22069*t22098*(3.2E1/1.5E1)-c0*kab1*rab1*t22102*t22041* \
                   t22033*t22080*t22108*t22037*t22067*t22069*t22098*(6.4E1/1.5E1)+c0*gamma_aa[index]*kab1*rab1*t21892* \
                   t21889*t22100*t22041*t22033*t22133*t22108*t22037*t22069*t22098*(1.28E2/1.5E1))-1.0/(t22112*t22112* \
                   t22112)*t22163*t22172*t22146*t22159*2.0+t21895*t22023*t22024*t22135*t22181*t22182*t22183*t22184*(3.0/ \
                   2.0)-t21895*t22040*t22023*t22024*t22114*t22181*t22182*t22183*t22067*3.0-t21895*t22023*t22024*t22114* \
                   t22118*t22181*t22182*t22183*t22184*(3.0/2.0)+a3*t21887*t22023*t22114*1.0/(t22037*t22037)*t22182*t22183* \
                   t22184*t22068*t22185*(3.0/2.0)+gamma_aa[index]*t21892*t21895*t21889*t22023*t22114*t22028*t22181*t22182* \
                   t22183*t22184*6.0)*(1.0/2.0)+c0*t22200*t22071*t22208*(1.0/2.0)+c0*t22071*t22094*(t22103*t22104*t22118+ \
                   t22113*t22150*t22146+t22113*t22176*t22159-t22151*t22163*t22146*t22159+t21895*t22023*t22024*t22118* \
                   t22181*t22182*t22183*t22184*(3.0/2.0))*(1.0/2.0)+c0*t22071*t22089*(t22103*t22104*t22114+t22113*t22146* \
                   t22156+t22113*t22159*t22186-t22151*t22172*t22146*t22159+t21895*t22023*t22024*t22114*t22181*t22182* \
                   t22183*t22184*(3.0/2.0))*(1.0/2.0)+c0*t22205*t22208*t22094*t22089*(1.0/2.0))+c0*t22047*t22076*t22096* \
                   (1.0/2.0)-c0*t22071*t22047*t22079*t22089*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t24299 = tspi_m13*tspi_m13;
                double t24300 = 1.0/pow(rho_a[index],1.0/3.0);
                double t24301 = a2*a2;
                double t24302 = gamma_aa[index]*gamma_aa[index];
                double t24303 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t24304 = t24299*t24299;
                double t24305 = c*t24300;
                double t24306 = a4*a4;
                double t24307 = 1.0/c;
                double t24308 = 1.0/pow(rho_a[index],7.0/3.0);
                double t24309 = sqrt(t24305);
                double t24310 = t24302*t24303*t24304*t24306*2.0;
                double t24311 = exp(t24310);
                double t24312 = t24302*t24303*t24304*t24306;
                double t24313 = t24312+1.0;
                double t24314 = 1.0/(t24313*t24313);
                double t24315 = a5*gamma_aa[index]*t24307*t24308*t24299;
                double t24316 = t24315+1.0;
                double t24328 = raa2*t24309;
                double t24317 = exp(-t24328);
                double t24318 = t24317-1.0;
                double t24319 = kaa2*t24318;
                double t24320 = pow(t24305,2.0/5.0);
                double t24329 = raa1*t24320;
                double t24321 = exp(-t24329);
                double t24322 = t24321-1.0;
                double t24323 = kaa1*t24322;
                double t24324 = -kaa0+t24323+t24319;
                double t24325 = 1.0/(t24324*t24324);
                double t24326 = c*c0*t24300*t24311*t24314*t24316*t24325*(2.0/3.0);
                double t24327 = 1.0/pow(rho_a[index],8.0/3.0);
                double t24330 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t24331 = exp(t24326);
                double t24332 = Ei(-t24326);
                double t24333 = 1.0/t24313;
                double t24334 = c*c0*t24300*t24311*t24316*t24325*(2.0/3.0);
                double t24335 = sqrt(t24334);
                double t24336 = 1.0/(t24313*t24313*t24313);
                double t24337 = t24333*t24335*6.0;
                double t24338 = c*c0*t24300*t24311*t24314*t24316*t24325*4.0;
                double t24339 = t24337+t24338+3.0;
                double t24340 = 1.0/t24339;
                double t24341 = a5*c0*t24311*t24314*t24325*t24327*t24299*(2.0/3.0);
                double t24342 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24314*t24306*t24316*t24325*(8.0/3.0);
                double t24353 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24325*t24336*(8.0/3.0);
                double t24343 = t24341+t24342-t24353;
                double t24344 = c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24325*(2.0/3.0);
                double t24345 = t24344+1.0;
                double t24346 = t24333*t24335*4.0;
                double t24347 = c*c0*t24300*t24311*t24314*t24316*t24325*(8.0/3.0);
                double t24348 = t24346+t24347+6.0;
                double t24349 = a5*c0*t24311*t24325*t24327*t24299*(2.0/3.0);
                double t24350 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24325*(8.0/3.0);
                double t24351 = t24350+t24349;
                double t24352 = 1.0/sqrt(t24334);
                double t24354 = t24301*t24302*t24303*t24304;
                double t24355 = pow(t24305,4.0/5.0);
                double t24463 = rab1*t24355;
                double t24356 = exp(-t24463);
                double t24357 = t24356-1.0;
                double t24464 = kab1*t24357;
                double t24358 = kab0-t24464;
                double t24359 = a3*gamma_aa[index]*t24307*t24308*t24299;
                double t24360 = t24359+1.0;
                double t24361 = 1.0/sqrt(t24360);
                double t24362 = a1*gamma_aa[index]*t24327*t24299;
                double t24363 = t24362+t24354+1.0;
                double t24364 = c*c;
                double t24365 = 1.0/pow(rho_a[index],2.0/3.0);
                double t24366 = k1*t24309;
                double t24367 = c*k2*t24300;
                double t24368 = t24366+t24367;
                double t24369 = 1.0/(t24368*t24368);
                double t24466 = t24364*t24365*t24369;
                double t24370 = exp(-t24466);
                double t24371 = 1.0/pow(rho_a[index],4.0/3.0);
                double t24372 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t24373 = 1.0/pow(rho_a[index],2.0E1/3.0);
                double t24374 = t24306*t24306;
                double t24375 = 1.0/pow(rho_a[index],1.2E1);
                double t24376 = t24304*t24304;
                double t24377 = 1.0/sqrt(t24305);
                double t24378 = c*kaa2*raa2*t24317*t24371*t24377*(1.0/6.0);
                double t24379 = 1.0/pow(t24305,3.0/5.0);
                double t24380 = c*kaa1*raa1*t24321*t24371*t24379*(2.0/1.5E1);
                double t24381 = t24380+t24378;
                double t24382 = 1.0/(t24324*t24324*t24324);
                double t24383 = t24333*t24351*t24352*2.0;
                double t24384 = a5*c0*t24311*t24314*t24325*t24327*t24299*(8.0/3.0);
                double t24385 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24314*t24306*t24316*t24325*(3.2E1/3.0) \
                   ;
                double t24427 = gamma_aa[index]*t24303*t24304*t24314*t24306*t24335*8.0;
                double t24428 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24325*t24336*(3.2E1/3.0) \
                   ;
                double t24386 = -t24427+t24383-t24428+t24384+t24385;
                double t24387 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t24388 = c*c0*t24311*t24314*t24316*t24325*t24371*(2.0/9.0);
                double t24389 = a5*c0*gamma_aa[index]*t24311*t24314*t24325*t24387*t24299*(1.4E1/9.0);
                double t24390 = c*c0*t24300*t24311*t24314*t24316*t24381*t24382*(4.0/3.0);
                double t24391 = c*c0*t24302*t24311*t24304*t24314*t24306*t24316*t24325*t24373*(6.4E1/9.0);
                double t24392 = a5*c0*t24311*t24331*t24314*t24332*t24325*t24327*t24299*(2.0/3.0);
                double t24393 = c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24325*t24343*(2.0/3.0);
                double t24394 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24331*t24314*t24332*t24306*t24316*t24325* \
                   (8.0/3.0);
                double t24407 = c*c0*t24302*t24311*t24304*t24306*t24316*t24325*t24336*t24373*(6.4E1/9.0);
                double t24395 = -t24407+t24390+t24391+t24388+t24389;
                double t24396 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t24397 = 1.0/t24316;
                double t24398 = a5*c0*t24311*t24314*t24325*t24387*t24299*(1.6E1/9.0);
                double t24399 = a5*c0*t24311*t24314*t24327*t24381*t24382*t24299*(4.0/3.0);
                double t24400 = a5*c0*t24302*t24311*t24304*t24314*t24306*t24325*t24372*t24299*(4.0E1/3.0);
                double t24401 = c*c0*gamma_aa[index]*t24311*t24304*t24314*t24306*t24316*t24325*t24373*(1.36E2/9.0) \
                   ;
                double t24402 = c*c0*gamma_aa[index]*t24302*t24311*t24314*t24316*t24325*t24374*t24375*t24376*(2.56E2/ \
                   9.0);
                double t24403 = 1.0/(t24313*t24313*t24313*t24313);
                double t24404 = c*c0*gamma_aa[index]*t24302*t24311*t24403*t24316*t24325*t24374*t24375*t24376*(1.28E2/ \
                   3.0);
                double t24405 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24314*t24306*t24316*t24381*t24382*(1.6E1/ \
                   3.0);
                double t24408 = c*c0*gamma_aa[index]*t24311*t24304*t24306*t24316*t24325*t24336*t24373*(1.36E2/9.0) \
                   ;
                double t24409 = c*c0*gamma_aa[index]*t24302*t24311*t24316*t24325*t24336*t24374*t24375*t24376*(5.12E2/ \
                   9.0);
                double t24410 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24336*t24381*t24382*(1.6E1/ \
                   3.0);
                double t24459 = a5*c0*t24302*t24311*t24304*t24306*t24325*t24336*t24372*t24299*(4.0E1/3.0);
                double t24406 = t24400+t24401-t24410+t24402+t24404+t24405-t24408-t24409-t24459+t24398+t24399;
                double t24411 = c*c0*t24311*t24316*t24325*t24371*(2.0/9.0);
                double t24412 = a5*c0*gamma_aa[index]*t24311*t24325*t24387*t24299*(1.4E1/9.0);
                double t24413 = c*c0*t24300*t24311*t24316*t24381*t24382*(4.0/3.0);
                double t24414 = c*c0*t24302*t24311*t24304*t24306*t24316*t24325*t24373*(6.4E1/9.0);
                double t24415 = t24411+t24412+t24413+t24414;
                double t24416 = 1.0/(t24339*t24339);
                double t24482 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24331*t24332*t24306*t24316*t24325*t24336* \
                   (8.0/3.0);
                double t24417 = t24341+t24342-t24353+t24392-t24482+t24393+t24394;
                double t24418 = a5*c0*t24311*t24325*t24387*t24299*(1.6E1/9.0);
                double t24419 = a5*c0*t24311*t24327*t24381*t24382*t24299*(4.0/3.0);
                double t24420 = a5*c0*t24302*t24311*t24304*t24306*t24325*t24372*t24299*(4.0E1/3.0);
                double t24421 = c*c0*gamma_aa[index]*t24311*t24304*t24306*t24316*t24325*t24373*(1.36E2/9.0);
                double t24422 = c*c0*gamma_aa[index]*t24302*t24311*t24316*t24325*t24374*t24375*t24376*(2.56E2/9.0) \
                   ;
                double t24423 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24381*t24382*(1.6E1/3.0) \
                   ;
                double t24424 = t24420+t24421+t24422+t24423+t24418+t24419;
                double t24425 = 1.0/pow(t24334,3.0/2.0);
                double t24426 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t24429 = t24333*t24352*t24415*3.0;
                double t24430 = c*c0*t24311*t24314*t24316*t24325*t24371*(4.0/3.0);
                double t24431 = a5*c0*gamma_aa[index]*t24311*t24314*t24325*t24387*t24299*(2.8E1/3.0);
                double t24432 = c*c0*t24300*t24311*t24314*t24316*t24381*t24382*8.0;
                double t24433 = c*c0*t24302*t24311*t24304*t24314*t24306*t24316*t24325*t24373*(1.28E2/3.0);
                double t24452 = t24302*t24304*t24314*t24306*t24335*t24396*3.2E1;
                double t24453 = c*c0*t24302*t24311*t24304*t24306*t24316*t24325*t24336*t24373*(1.28E2/3.0);
                double t24434 = t24430+t24431+t24432+t24433-t24452-t24453+t24429;
                double t24435 = t24333*t24351*t24352*3.0;
                double t24436 = a5*c0*t24311*t24314*t24325*t24327*t24299*4.0;
                double t24437 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24314*t24306*t24316*t24325*1.6E1;
                double t24445 = gamma_aa[index]*t24303*t24304*t24314*t24306*t24335*1.2E1;
                double t24446 = c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24325*t24336*1.6E1;
                double t24438 = t24435+t24436-t24445+t24437-t24446;
                double t24439 = t24333*t24352*t24415*2.0;
                double t24440 = c*c0*t24311*t24314*t24316*t24325*t24371*(8.0/9.0);
                double t24441 = a5*c0*gamma_aa[index]*t24311*t24314*t24325*t24387*t24299*(5.6E1/9.0);
                double t24442 = c*c0*t24300*t24311*t24314*t24316*t24381*t24382*(1.6E1/3.0);
                double t24443 = c*c0*t24302*t24311*t24304*t24314*t24306*t24316*t24325*t24373*(2.56E2/9.0);
                double t24477 = t24302*t24304*t24314*t24306*t24335*t24396*(6.4E1/3.0);
                double t24478 = c*c0*t24302*t24311*t24304*t24306*t24316*t24325*t24336*t24373*(2.56E2/9.0);
                double t24444 = t24440+t24441+t24442+t24443+t24439-t24477-t24478;
                double t24447 = c*c0*t24311*t24331*t24314*t24332*t24316*t24325*t24371*(2.0/9.0);
                double t24448 = c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24381*t24382*(4.0/3.0);
                double t24449 = c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24325*t24395*(2.0/3.0);
                double t24450 = a5*c0*gamma_aa[index]*t24311*t24331*t24314*t24332*t24325*t24387*t24299*(1.4E1/9.0) \
                   ;
                double t24451 = c*c0*t24302*t24311*t24304*t24331*t24314*t24332*t24306*t24316*t24325*t24373*(6.4E1/ \
                   9.0);
                double t24454 = 1.0/c0;
                double t24455 = pow(rho_a[index],1.0/3.0);
                double t24456 = exp(-t24310);
                double t24457 = t24313*t24313;
                double t24458 = t24324*t24324;
                double t24460 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t24479 = c*c0*t24302*t24311*t24304*t24331*t24332*t24306*t24316*t24325*t24336*t24373*(6.4E1/ \
                   9.0);
                double t24461 = t24450+t24451-t24407+t24390+t24391+t24447+t24448+t24449+t24388+t24389-t24479;
                double t24462 = exp(-t24354);
                double t24465 = t24361*t24363*t24462*t24358*1.0E5;
                double t24467 = c*c0*t24300*(2.0/3.0);
                double t24468 = -t24465+t24467;
                double t24469 = 0.0 ;
                double t24470 = a1*t24327*t24299;
                double t24471 = gamma_aa[index]*t24301*t24303*t24304*2.0;
                double t24472 = t24470+t24471;
                double t24473 = 1.0/pow(t24360,3.0/2.0);
                double t24474 = a3*t24307*t24308*t24363*t24462*t24473*t24358*t24299*5.0E4;
                double t24475 = gamma_aa[index]*t24301*t24303*t24304*t24361*t24363*t24462*t24358*2.0E5;
                double t24502 = t24361*t24462*t24472*t24358*1.0E5;
                double t24476 = -t24502+t24474+t24475;
                double t24480 = t24331*t24332*t24343;
                double t24481 = t24340*t24345*t24386;
                double t24483 = t24307*t24343*t24454*t24455*t24456*t24457*t24458*t24397*(3.0/2.0);
                double t24484 = t24331*t24332;
                double t24485 = t24340*t24345*t24348;
                double t24486 = t24484+t24485;
                double t24487 = 1.0/pow(rho_a[index],1.0E1/3.0);
                double t24488 = t24301*t24302*t24304*t24396*(1.6E1/3.0);
                double t24489 = a1*gamma_aa[index]*t24387*t24299*(8.0/3.0);
                double t24490 = t24488+t24489;
                double t24491 = 1.0/(c*c);
                double t24492 = 1.0/pow(t24305,1.0/5.0);
                double t24493 = t24340*t24417*t24348;
                double t24494 = t24480+t24481+t24483+t24493-t24416*t24345*t24348*t24438;
                double t24495 = 1.0/pow(rho_a[index],5.0/3.0);
                double t24496 = t24364*t24369*t24495*(2.0/3.0);
                double t24497 = 1.0/(t24368*t24368*t24368);
                double t24498 = c*k2*t24371*(1.0/3.0);
                double t24499 = c*k1*t24371*t24377*(1.0/6.0);
                double t24500 = t24498+t24499;
                double t24501 = t24496-t24500*t24364*t24365*t24497*2.0;
                double t24503 = c*c0*t24371*(2.0/9.0);
                double t24504 = t24301*t24302*t24304*t24361*t24363*t24462*t24358*t24396*(1.6E6/3.0);
                double t24505 = a3*gamma_aa[index]*t24307*t24363*t24462*t24473*t24358*t24487*t24299*(3.5E5/3.0);
                double t24506 = t24503+t24504+t24505-t24361*t24462*t24490*t24358*1.0E5-c*kab1*rab1*t24361*t24371* \
                   t24363*t24462*t24356*t24492*(8.0E4/3.0);
                v_rho_a_gamma_aa_[index] = ( (c*c0*t24300*(-2.0/3.0)+t24361*t24363*t24358*exp(-t24301*t24302*t24303* \
                   t24304)*1.0E5 > 0.0) ?  c0*t24370*1.0*(t24480+t24481+t24483+t24340*t24348*(t24341+t24342+t24392+t24393+ \
                   t24394-c*c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24325*t24336*(8.0/3.0)-c*c0*gamma_aa[index]* \
                   t24311*t24330*t24304*t24331*t24332*t24306*t24316*t24325*t24336*(8.0/3.0))-t24416*t24345*t24348*t24438) \
                   *(1.0/2.0) : 0.0 ) -c0*t24370*t24476*t24486*t24469*(1.0/2.0)- ( (t24465-c*c0*t24300*(2.0/3.0) > 0.0) \
                    ? c0*rho_a[index]*t24370*1.0*(t24340*t24345*(t24333*t24352*t24424*2.0-t24333*t24351*t24415*t24425- \
                   gamma_aa[index]*t24304*t24314*t24306*t24335*t24396*(1.28E2/3.0)+a5*c0*t24311*t24314*t24325*t24387* \
                   t24299*(6.4E1/9.0)-gamma_aa[index]*t24303*t24304*t24314*t24306*t24352*t24415*4.0+gamma_aa[index]*t24302* \
                   t24335*t24336*t24426*t24374*t24376*(2.56E2/3.0)-t24302*t24304*t24314*t24306*t24351*t24352*t24396*(3.2E1/ \
                   3.0)+a5*c0*t24311*t24314*t24327*t24381*t24382*t24299*(1.6E1/3.0)+c*c0*gamma_aa[index]*t24311*t24304* \
                   t24314*t24306*t24316*t24325*t24373*(5.44E2/9.0)-c*c0*gamma_aa[index]*t24311*t24304*t24306*t24316*t24325* \
                   t24336*t24373*(5.44E2/9.0)+a5*c0*t24302*t24311*t24304*t24314*t24306*t24325*t24372*t24299*(1.6E2/3.0) \
                   -a5*c0*t24302*t24311*t24304*t24306*t24325*t24336*t24372*t24299*(1.6E2/3.0)+c*c0*gamma_aa[index]*t24311* \
                   t24330*t24304*t24314*t24306*t24316*t24381*t24382*(6.4E1/3.0)-c*c0*gamma_aa[index]*t24311*t24330*t24304* \
                   t24306*t24316*t24336*t24381*t24382*(6.4E1/3.0)+c*c0*gamma_aa[index]*t24302*t24311*t24403*t24316*t24325* \
                   t24374*t24375*t24376*(5.12E2/3.0)+c*c0*gamma_aa[index]*t24302*t24311*t24314*t24316*t24325*t24374*t24375* \
                   t24376*(1.024E3/9.0)-c*c0*gamma_aa[index]*t24302*t24311*t24316*t24325*t24336*t24374*t24375*t24376* \
                   (2.048E3/9.0))+t24331*t24332*t24406+t24340*t24417*t24444+t24340*t24461*t24386+t24340*t24348*(t24400+ \
                   t24401-t24410+t24402+t24404+t24405-t24408-t24409-t24459+t24398+t24399+t24343*t24395+(t24343*(1.0/3.0) \
                   )/rho_a[index]+(t24343*t24381*2.0)/t24324+t24302*t24304*t24306*t24343*t24396*(3.2E1/3.0)-t24302*t24304* \
                   t24306*t24333*t24343*t24396*(3.2E1/3.0)+a5*gamma_aa[index]*t24307*t24343*t24397*t24487*t24299*(7.0/ \
                   3.0)+a5*c0*t24311*t24331*t24314*t24332*t24325*t24387*t24299*(1.6E1/9.0)+a5*c0*t24311*t24331*t24314* \
                   t24332*t24327*t24381*t24382*t24299*(4.0/3.0)+a5*c0*t24311*t24331*t24314*t24332*t24325*t24327*t24395* \
                   t24299*(2.0/3.0)+c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24325*t24406*(2.0/3.0)+c*c0*t24311* \
                   t24331*t24314*t24332*t24316*t24325*t24343*t24371*(2.0/9.0)+a5*c0*gamma_aa[index]*t24311*t24331*t24314* \
                   t24332*t24325*t24343*t24387*t24299*(1.4E1/9.0)+c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24343* \
                   t24381*t24382*(4.0/3.0)+c*c0*t24300*t24311*t24331*t24314*t24332*t24316*t24325*t24343*t24395*(2.0/3.0) \
                   +c*c0*gamma_aa[index]*t24311*t24304*t24331*t24314*t24332*t24306*t24316*t24325*t24373*(1.36E2/9.0)- \
                   c*c0*gamma_aa[index]*t24311*t24304*t24331*t24332*t24306*t24316*t24325*t24336*t24373*(1.36E2/9.0)+a5* \
                   c0*t24302*t24311*t24304*t24331*t24314*t24332*t24306*t24325*t24372*t24299*(4.0E1/3.0)-a5*c0*t24302* \
                   t24311*t24304*t24331*t24332*t24306*t24325*t24336*t24372*t24299*(4.0E1/3.0)+c*c0*gamma_aa[index]*t24311* \
                   t24330*t24304*t24331*t24314*t24332*t24306*t24316*t24381*t24382*(1.6E1/3.0)+c*c0*gamma_aa[index]*t24311* \
                   t24330*t24304*t24331*t24314*t24332*t24306*t24316*t24325*t24395*(8.0/3.0)-c*c0*gamma_aa[index]*t24311* \
                   t24330*t24304*t24331*t24332*t24306*t24316*t24336*t24381*t24382*(1.6E1/3.0)-c*c0*gamma_aa[index]*t24311* \
                   t24330*t24304*t24331*t24332*t24306*t24316*t24325*t24336*t24395*(8.0/3.0)+c*c0*gamma_aa[index]*t24302* \
                   t24311*t24331*t24403*t24332*t24316*t24325*t24374*t24375*t24376*(1.28E2/3.0)+c*c0*gamma_aa[index]*t24302* \
                   t24311*t24331*t24314*t24332*t24316*t24325*t24374*t24375*t24376*(2.56E2/9.0)-c*c0*gamma_aa[index]*t24302* \
                   t24311*t24331*t24332*t24316*t24325*t24336*t24374*t24375*t24376*(5.12E2/9.0)+c*c0*t24302*t24311*t24304* \
                   t24331*t24314*t24332*t24306*t24316*t24325*t24343*t24373*(6.4E1/9.0)-c*c0*t24302*t24311*t24304*t24331* \
                   t24332*t24306*t24316*t24325*t24343*t24336*t24373*(6.4E1/9.0))+t24331*t24332*t24343*t24395-t24416*t24434* \
                   t24417*t24348-t24416*t24345*t24444*t24438-t24416*t24434*t24345*t24386-t24416*t24461*t24348*t24438- \
                   t24416*t24345*t24348*(t24333*t24352*t24424*3.0-t24333*t24351*t24415*t24425*(3.0/2.0)-gamma_aa[index]* \
                   t24304*t24314*t24306*t24335*t24396*6.4E1+a5*c0*t24311*t24314*t24325*t24387*t24299*(3.2E1/3.0)-gamma_aa[index]* \
                   t24303*t24304*t24314*t24306*t24352*t24415*6.0+gamma_aa[index]*t24302*t24335*t24336*t24426*t24374*t24376* \
                   1.28E2-t24302*t24304*t24314*t24306*t24351*t24352*t24396*1.6E1+a5*c0*t24311*t24314*t24327*t24381*t24382* \
                   t24299*8.0+c*c0*gamma_aa[index]*t24311*t24304*t24314*t24306*t24316*t24325*t24373*(2.72E2/3.0)-c*c0* \
                   gamma_aa[index]*t24311*t24304*t24306*t24316*t24325*t24336*t24373*(2.72E2/3.0)+a5*c0*t24302*t24311* \
                   t24304*t24314*t24306*t24325*t24372*t24299*8.0E1-a5*c0*t24302*t24311*t24304*t24306*t24325*t24336*t24372* \
                   t24299*8.0E1+c*c0*gamma_aa[index]*t24311*t24330*t24304*t24314*t24306*t24316*t24381*t24382*3.2E1-c* \
                   c0*gamma_aa[index]*t24311*t24330*t24304*t24306*t24316*t24336*t24381*t24382*3.2E1+c*c0*gamma_aa[index]* \
                   t24302*t24311*t24403*t24316*t24325*t24374*t24375*t24376*2.56E2+c*c0*gamma_aa[index]*t24302*t24311* \
                   t24314*t24316*t24325*t24374*t24375*t24376*(5.12E2/3.0)-c*c0*gamma_aa[index]*t24302*t24311*t24316*t24325* \
                   t24336*t24374*t24375*t24376*(1.024E3/3.0))+t24434*t24345*1.0/(t24339*t24339*t24339)*t24348*t24438* \
                   2.0+t24307*t24406*t24454*t24455*t24456*t24457*t24458*t24397*(3.0/2.0)+t24307*t24343*t24454*t24455* \
                   t24456*t24457*t24395*t24458*t24397*(3.0/2.0)-a5*1.0/(rho_a[index]*rho_a[index])*1.0/(t24316*t24316) \
                   *t24454*t24491*t24456*t24457*t24395*t24458*t24299*(3.0/2.0)+gamma_aa[index]*t24304*t24313*t24306*t24307* \
                   t24460*t24454*t24456*t24395*t24458*t24397*6.0-gamma_aa[index]*t24304*t24306*t24307*t24460*t24454*t24456* \
                   t24457*t24395*t24458*t24397*6.0)*(1.0/2.0) : 0.0 ) +c0*rho_a[index]*t24370*t24506*t24494*t24469*(1.0/ \
                   2.0)+c0*rho_a[index]*t24370*t24486*t24469*(t24361*t24462*t24358*(a1*t24387*t24299*(8.0/3.0)+gamma_aa[index]* \
                   t24301*t24304*t24396*(3.2E1/3.0))*-1.0E5+t24301*t24302*t24304*t24361*t24462*t24472*t24358*t24396*(1.6E6/ \
                   3.0)+a3*t24307*t24308*t24462*t24490*t24473*t24358*t24299*5.0E4+a3*t24307*t24363*t24462*t24473*t24358* \
                   t24487*t24299*(3.5E5/3.0)+gamma_aa[index]*t24301*t24303*t24304*t24361*t24462*t24490*t24358*2.0E5+gamma_aa[index]* \
                   t24301*t24304*t24361*t24363*t24462*t24358*t24396*(3.2E6/3.0)-(a3*a3)*gamma_aa[index]*t24330*t24304* \
                   1.0/pow(t24360,5.0/2.0)*t24363*t24462*t24491*t24358*1.75E5+a3*gamma_aa[index]*t24307*t24462*t24472* \
                   t24473*t24358*t24487*t24299*(3.5E5/3.0)-c*kab1*rab1*t24361*t24371*t24462*t24472*t24356*t24492*(8.0E4/ \
                   3.0)-gamma_aa[index]*(t24301*t24301)*t24302*t24361*t24363*t24426*t24462*t24358*t24376*(3.2E6/3.0)+ \
                   a3*kab1*rab1*t24363*t24462*t24356*t24473*t24492*t24387*t24299*(4.0E4/3.0)-a3*1.0/pow(rho_a[index],2.6E1/ \
                   3.0)*t24301*t24302*t24304*t24307*t24363*t24462*t24473*t24358*t24299*5.0E5+c*gamma_aa[index]*kab1*rab1* \
                   t24301*t24304*t24361*t24363*t24462*t24373*t24356*t24492*(1.6E5/3.0))*(1.0/2.0)+c0*rho_a[index]*t24370* \
                   t24476*t24469*(t24340*t24345*t24444+t24331*t24332*t24395+t24340*t24461*t24348-t24416*t24434*t24345* \
                   t24348+t24307*t24454*t24455*t24456*t24457*t24395*t24458*t24397*(3.0/2.0))*(1.0/2.0)+ ( (t24465-t24467  \
                   > 0.0) ? c0*rho_a[index]*t24501*t24370*t24494*1.0*(1.0/2.0) : 0.0 ) -c0*rho_a[index]*t24501*t24370* \
                   t24476*t24486*t24469*(1.0/2.0)+ 0.0 ;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t22212 = tspi_m13*tspi_m13;
                double t22213 = 1.0/pow(rho_b[index],1.0/3.0);
                double t22214 = a2*a2;
                double t22215 = gamma_bb[index]*gamma_bb[index];
                double t22216 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t22217 = t22212*t22212;
                double t22218 = t22214*t22215*t22216*t22217*2.0;
                double t22219 = exp(t22218);
                double t22220 = c*t22213;
                double t22221 = pow(t22220,4.0/5.0);
                double t22233 = rab1*t22221;
                double t22222 = exp(-t22233);
                double t22223 = t22222-1.0;
                double t22234 = kab1*t22223;
                double t22224 = kab0-t22234;
                double t22225 = 1.0/c;
                double t22226 = 1.0/pow(rho_b[index],7.0/3.0);
                double t22227 = a3*gamma_bb[index]*t22212*t22225*t22226;
                double t22228 = t22227+1.0;
                double t22229 = t22214*t22215*t22216*t22217;
                double t22230 = 1.0/pow(rho_b[index],8.0/3.0);
                double t22231 = a1*gamma_bb[index]*t22212*t22230;
                double t22232 = t22231+t22229+1.0;
                double t22235 = 1.0/(t22224*t22224);
                double t22236 = 1.0/(t22232*t22232);
                double t22237 = c*c0*t22213*t22235*t22236*t22219*t22228*(2.0/3.0);
                double t22238 = a1*t22212*t22230;
                double t22239 = gamma_bb[index]*t22214*t22216*t22217*2.0;
                double t22240 = t22238+t22239;
                double t22241 = 1.0/(t22232*t22232*t22232);
                double t22242 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t22243 = exp(t22237);
                double t22244 = Ei(-t22237);
                double t22245 = a3*c0*t22212*t22230*t22235*t22236*t22219*(2.0/3.0);
                double t22246 = c*c0*gamma_bb[index]*t22214*t22242*t22217*t22235*t22236*t22219*t22228*(8.0/3.0);
                double t22253 = c*c0*t22213*t22240*t22241*t22235*t22219*t22228*(4.0/3.0);
                double t22247 = -t22253+t22245+t22246;
                double t22248 = sqrt(t22237);
                double t22249 = t22248*6.0;
                double t22250 = c*c0*t22213*t22235*t22236*t22219*t22228*4.0;
                double t22251 = t22250+t22249+3.0;
                double t22252 = 1.0/t22251;
                double t22254 = c*c0*t22213*t22243*t22235*t22244*t22236*t22219*t22228*(2.0/3.0);
                double t22255 = t22254+1.0;
                double t22256 = t22248*4.0;
                double t22257 = c*c0*t22213*t22235*t22236*t22219*t22228*(8.0/3.0);
                double t22258 = t22256+t22257+6.0;
                double t22259 = 1.0/sqrt(t22237);
                double t22260 = 1.0/sqrt(t22228);
                double t22261 = exp(-t22229);
                v_rho_a_gamma_bb_[index] = ( (c*c0*t22213*(-2.0/3.0)+t22232*t22224*t22260*exp(-t22214*t22215*t22216* \
                   t22217)*1.0E5 > 0.0) ?  c0*1.0*(t22243*t22244*t22247+t22252*t22258*(-t22253+t22245+t22246+a3*c0*t22212* \
                   t22230*t22243*t22235*t22244*t22236*t22219*(2.0/3.0)-c*c0*t22213*t22240*t22241*t22243*t22235*t22244* \
                   t22219*t22228*(4.0/3.0)+c*c0*t22213*t22243*t22235*t22244*t22236*t22219*t22228*t22247*(2.0/3.0)+c*c0* \
                   gamma_bb[index]*t22214*t22242*t22243*t22217*t22235*t22244*t22236*t22219*t22228*(8.0/3.0))+t22252*t22255* \
                   (t22247*t22259*2.0+a3*c0*t22212*t22230*t22235*t22236*t22219*(8.0/3.0)-c*c0*t22213*t22240*t22241*t22235* \
                   t22219*t22228*(1.6E1/3.0)+c*c0*gamma_bb[index]*t22214*t22242*t22217*t22235*t22236*t22219*t22228*(3.2E1/ \
                   3.0))-1.0/(t22251*t22251)*t22255*t22258*(t22247*t22259*3.0+a3*c0*t22212*t22230*t22235*t22236*t22219* \
                   4.0-c*c0*t22213*t22240*t22241*t22235*t22219*t22228*8.0+c*c0*gamma_bb[index]*t22214*t22242*t22217*t22235* \
                   t22236*t22219*t22228*1.6E1)+(pow(rho_b[index],1.0/3.0)*(t22232*t22232)*(t22224*t22224)*t22225*t22247* \
                   exp(-t22218)*(3.0/2.0))/(c0*t22228))*(1.0/2.0) : 0.0 ) - 0.0 ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t22263 = tspi_m13*tspi_m13;
                double t22264 = 1.0/pow(rho_a[index],1.0/3.0);
                double t22265 = a2*a2;
                double t22266 = gamma_aa[index]*gamma_aa[index];
                double t22267 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t22268 = t22263*t22263;
                double t22269 = t22265*t22266*t22267*t22268*2.0;
                double t22270 = exp(t22269);
                double t22271 = c*t22264;
                double t22272 = pow(t22271,4.0/5.0);
                double t22284 = rab1*t22272;
                double t22273 = exp(-t22284);
                double t22274 = t22273-1.0;
                double t22285 = kab1*t22274;
                double t22275 = kab0-t22285;
                double t22276 = 1.0/c;
                double t22277 = 1.0/pow(rho_a[index],7.0/3.0);
                double t22278 = a3*gamma_aa[index]*t22263*t22276*t22277;
                double t22279 = t22278+1.0;
                double t22280 = t22265*t22266*t22267*t22268;
                double t22281 = 1.0/pow(rho_a[index],8.0/3.0);
                double t22282 = a1*gamma_aa[index]*t22263*t22281;
                double t22283 = t22280+t22282+1.0;
                double t22286 = 1.0/(t22275*t22275);
                double t22287 = 1.0/(t22283*t22283);
                double t22288 = c*c0*t22270*t22264*t22286*t22287*t22279*(2.0/3.0);
                double t22289 = a1*t22263*t22281;
                double t22290 = gamma_aa[index]*t22265*t22267*t22268*2.0;
                double t22291 = t22290+t22289;
                double t22292 = 1.0/(t22283*t22283*t22283);
                double t22293 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t22294 = exp(t22288);
                double t22295 = Ei(-t22288);
                double t22296 = a3*c0*t22270*t22263*t22281*t22286*t22287*(2.0/3.0);
                double t22297 = c*c0*gamma_aa[index]*t22270*t22265*t22293*t22268*t22286*t22287*t22279*(8.0/3.0);
                double t22304 = c*c0*t22270*t22264*t22291*t22292*t22286*t22279*(4.0/3.0);
                double t22298 = -t22304+t22296+t22297;
                double t22299 = sqrt(t22288);
                double t22300 = t22299*6.0;
                double t22301 = c*c0*t22270*t22264*t22286*t22287*t22279*4.0;
                double t22302 = t22300+t22301+3.0;
                double t22303 = 1.0/t22302;
                double t22305 = c*c0*t22270*t22264*t22294*t22286*t22295*t22287*t22279*(2.0/3.0);
                double t22306 = t22305+1.0;
                double t22307 = t22299*4.0;
                double t22308 = c*c0*t22270*t22264*t22286*t22287*t22279*(8.0/3.0);
                double t22309 = t22307+t22308+6.0;
                double t22310 = 1.0/sqrt(t22288);
                double t22311 = 1.0/sqrt(t22279);
                double t22312 = exp(-t22280);
                v_rho_b_gamma_aa_[index] = ( (c*c0*t22264*(-2.0/3.0)+t22311*t22283*t22275*exp(-t22265*t22266*t22267* \
                   t22268)*1.0E5 > 0.0) ?  c0*1.0*(t22294*t22295*t22298+t22303*t22309*(-t22304+t22296+t22297+a3*c0*t22270* \
                   t22263*t22281*t22294*t22286*t22295*t22287*(2.0/3.0)-c*c0*t22270*t22264*t22291*t22292*t22294*t22286* \
                   t22295*t22279*(4.0/3.0)+c*c0*t22270*t22264*t22294*t22286*t22295*t22287*t22279*t22298*(2.0/3.0)+c*c0* \
                   gamma_aa[index]*t22270*t22265*t22293*t22294*t22268*t22286*t22295*t22287*t22279*(8.0/3.0))+t22303*t22306* \
                   (t22310*t22298*2.0+a3*c0*t22270*t22263*t22281*t22286*t22287*(8.0/3.0)-c*c0*t22270*t22264*t22291*t22292* \
                   t22286*t22279*(1.6E1/3.0)+c*c0*gamma_aa[index]*t22270*t22265*t22293*t22268*t22286*t22287*t22279*(3.2E1/ \
                   3.0))-1.0/(t22302*t22302)*t22306*t22309*(t22310*t22298*3.0+a3*c0*t22270*t22263*t22281*t22286*t22287* \
                   4.0-c*c0*t22270*t22264*t22291*t22292*t22286*t22279*8.0+c*c0*gamma_aa[index]*t22270*t22265*t22293*t22268* \
                   t22286*t22287*t22279*1.6E1)+(pow(rho_a[index],1.0/3.0)*(t22283*t22283)*(t22275*t22275)*t22276*t22298* \
                   exp(-t22269)*(3.0/2.0))/(c0*t22279))*(1.0/2.0) : 0.0 ) - 0.0 ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t22315 = tspi_m13*tspi_m13;
                double t22316 = 1.0/pow(rho_b[index],1.0/3.0);
                double t22317 = a2*a2;
                double t22318 = gamma_bb[index]*gamma_bb[index];
                double t22319 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t22320 = t22315*t22315;
                double t22321 = c*t22316;
                double t22322 = a4*a4;
                double t22323 = 1.0/c;
                double t22324 = 1.0/pow(rho_b[index],7.0/3.0);
                double t22325 = sqrt(t22321);
                double t22326 = t22320*t22322*t22318*t22319*2.0;
                double t22327 = exp(t22326);
                double t22328 = t22320*t22322*t22318*t22319;
                double t22329 = t22328+1.0;
                double t22330 = 1.0/(t22329*t22329);
                double t22331 = a5*gamma_bb[index]*t22323*t22315*t22324;
                double t22332 = t22331+1.0;
                double t22343 = raa2*t22325;
                double t22333 = exp(-t22343);
                double t22334 = t22333-1.0;
                double t22335 = kaa2*t22334;
                double t22336 = pow(t22321,2.0/5.0);
                double t22344 = raa1*t22336;
                double t22337 = exp(-t22344);
                double t22338 = t22337-1.0;
                double t22339 = kaa1*t22338;
                double t22340 = -kaa0+t22335+t22339;
                double t22341 = 1.0/(t22340*t22340);
                double t22342 = c*c0*t22330*t22332*t22341*t22316*t22327*(2.0/3.0);
                double t22345 = 1.0/pow(rho_b[index],8.0/3.0);
                double t22346 = 1.0/pow(rho_b[index],4.0/3.0);
                double t22347 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t22348 = 1.0/pow(rho_b[index],2.0E1/3.0);
                double t22349 = 1.0/(t22329*t22329*t22329);
                double t22350 = t22322*t22322;
                double t22351 = 1.0/pow(rho_b[index],1.2E1);
                double t22352 = t22320*t22320;
                double t22353 = 1.0/sqrt(t22321);
                double t22354 = c*kaa2*raa2*t22333*t22353*t22346*(1.0/6.0);
                double t22355 = 1.0/pow(t22321,3.0/5.0);
                double t22356 = c*kaa1*raa1*t22337*t22346*t22355*(2.0/1.5E1);
                double t22357 = t22354+t22356;
                double t22358 = 1.0/(t22340*t22340*t22340);
                double t22359 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t22360 = 1.0/t22329;
                double t22361 = c*c0*t22332*t22341*t22316*t22327*(2.0/3.0);
                double t22362 = sqrt(t22361);
                double t22363 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t22364 = exp(t22342);
                double t22365 = Ei(-t22342);
                double t22366 = c*c0*t22330*t22332*t22341*t22327*t22346*(2.0/9.0);
                double t22367 = a5*c0*gamma_bb[index]*t22330*t22341*t22315*t22327*t22363*(1.4E1/9.0);
                double t22368 = c*c0*t22330*t22332*t22316*t22327*t22357*t22358*(4.0/3.0);
                double t22369 = c*c0*t22320*t22330*t22322*t22332*t22341*t22318*t22327*t22348*(6.4E1/9.0);
                double t22370 = t22360*t22362*6.0;
                double t22371 = c*c0*t22330*t22332*t22341*t22316*t22327*4.0;
                double t22372 = t22370+t22371+3.0;
                double t22373 = 1.0/t22372;
                double t22374 = a5*c0*t22330*t22341*t22315*t22327*t22345*(2.0/3.0);
                double t22375 = c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22359*(8.0/3.0);
                double t22376 = 1.0/sqrt(t22361);
                double t22379 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22349*t22359*(8.0/3.0);
                double t22377 = t22374+t22375-t22379;
                double t22390 = c*c0*t22320*t22322*t22332*t22341*t22318*t22327*t22348*t22349*(6.4E1/9.0);
                double t22378 = -t22390+t22366+t22367+t22368+t22369;
                double t22380 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t22381 = a5*c0*t22330*t22341*t22315*t22327*t22363*(1.6E1/9.0);
                double t22382 = a5*c0*t22330*t22315*t22327*t22345*t22357*t22358*(4.0/3.0);
                double t22383 = a5*c0*t22320*t22330*t22322*t22341*t22315*t22318*t22327*t22347*(4.0E1/3.0);
                double t22384 = c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22348*(1.36E2/9.0) \
                   ;
                double t22385 = c*c0*gamma_bb[index]*t22330*t22332*t22341*t22350*t22351*t22352*t22318*t22327*(2.56E2/ \
                   9.0);
                double t22386 = 1.0/(t22329*t22329*t22329*t22329);
                double t22387 = c*c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22386*(1.28E2/ \
                   3.0);
                double t22388 = c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22327*t22357*t22358*t22359*(1.6E1/ \
                   3.0);
                double t22391 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22348*t22349*(1.36E2/9.0) \
                   ;
                double t22392 = c*c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22349*(5.12E2/ \
                   9.0);
                double t22393 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22327*t22357*t22349*t22358*t22359*(1.6E1/ \
                   3.0);
                double t22450 = a5*c0*t22320*t22322*t22341*t22315*t22318*t22327*t22347*t22349*(4.0E1/3.0);
                double t22389 = -t22450+t22381+t22382-t22391+t22383-t22392+t22384-t22393+t22385+t22387+t22388;
                double t22394 = a5*c0*t22341*t22315*t22327*t22345*(2.0/3.0);
                double t22395 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22359*(8.0/3.0);
                double t22396 = t22394+t22395;
                double t22397 = c*c0*t22332*t22341*t22327*t22346*(2.0/9.0);
                double t22398 = a5*c0*gamma_bb[index]*t22341*t22315*t22327*t22363*(1.4E1/9.0);
                double t22399 = c*c0*t22332*t22316*t22327*t22357*t22358*(4.0/3.0);
                double t22400 = c*c0*t22320*t22322*t22332*t22341*t22318*t22327*t22348*(6.4E1/9.0);
                double t22401 = t22400+t22397+t22398+t22399;
                double t22402 = t22360*t22362*4.0;
                double t22403 = c*c0*t22330*t22332*t22341*t22316*t22327*(8.0/3.0);
                double t22404 = t22402+t22403+6.0;
                double t22405 = a5*c0*t22330*t22341*t22315*t22327*t22345*t22364*t22365*(2.0/3.0);
                double t22406 = c*c0*t22330*t22332*t22341*t22316*t22327*t22364*t22365*t22377*(2.0/3.0);
                double t22407 = c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22364*t22365*t22359* \
                   (8.0/3.0);
                double t22408 = c*c0*t22330*t22332*t22341*t22316*t22327*t22364*t22365*(2.0/3.0);
                double t22409 = t22408+1.0;
                double t22410 = 1.0/(t22372*t22372);
                double t22411 = a5*c0*t22341*t22315*t22327*t22363*(1.6E1/9.0);
                double t22412 = a5*c0*t22315*t22327*t22345*t22357*t22358*(4.0/3.0);
                double t22413 = a5*c0*t22320*t22322*t22341*t22315*t22318*t22327*t22347*(4.0E1/3.0);
                double t22414 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22348*(1.36E2/9.0);
                double t22415 = c*c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*(2.56E2/9.0) \
                   ;
                double t22416 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22327*t22357*t22358*t22359*(1.6E1/3.0) \
                   ;
                double t22417 = t22411+t22412+t22413+t22414+t22415+t22416;
                double t22418 = 1.0/pow(t22361,3.0/2.0);
                double t22419 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t22420 = t22360*t22376*t22396*2.0;
                double t22421 = a5*c0*t22330*t22341*t22315*t22327*t22345*(8.0/3.0);
                double t22422 = c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22359*(3.2E1/3.0) \
                   ;
                double t22484 = gamma_bb[index]*t22320*t22330*t22322*t22362*t22319*8.0;
                double t22485 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22349*t22359*(3.2E1/3.0) \
                   ;
                double t22423 = t22420+t22421+t22422-t22484-t22485;
                double t22424 = t22401*t22360*t22376*3.0;
                double t22425 = c*c0*t22330*t22332*t22341*t22327*t22346*(4.0/3.0);
                double t22426 = a5*c0*gamma_bb[index]*t22330*t22341*t22315*t22327*t22363*(2.8E1/3.0);
                double t22427 = c*c0*t22330*t22332*t22316*t22327*t22357*t22358*8.0;
                double t22428 = c*c0*t22320*t22330*t22322*t22332*t22341*t22318*t22327*t22348*(1.28E2/3.0);
                double t22447 = t22320*t22330*t22322*t22362*t22380*t22318*3.2E1;
                double t22448 = c*c0*t22320*t22322*t22332*t22341*t22318*t22327*t22348*t22349*(1.28E2/3.0);
                double t22429 = t22424+t22425+t22426+t22427+t22428-t22447-t22448;
                double t22430 = t22401*t22360*t22376*2.0;
                double t22431 = c*c0*t22330*t22332*t22341*t22327*t22346*(8.0/9.0);
                double t22432 = a5*c0*gamma_bb[index]*t22330*t22341*t22315*t22327*t22363*(5.6E1/9.0);
                double t22433 = c*c0*t22330*t22332*t22316*t22327*t22357*t22358*(1.6E1/3.0);
                double t22434 = c*c0*t22320*t22330*t22322*t22332*t22341*t22318*t22327*t22348*(2.56E2/9.0);
                double t22479 = t22320*t22330*t22322*t22362*t22380*t22318*(6.4E1/3.0);
                double t22480 = c*c0*t22320*t22322*t22332*t22341*t22318*t22327*t22348*t22349*(2.56E2/9.0);
                double t22435 = t22430+t22431+t22432+t22433+t22434-t22480-t22479;
                double t22436 = t22360*t22376*t22396*3.0;
                double t22437 = a5*c0*t22330*t22341*t22315*t22327*t22345*4.0;
                double t22438 = c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22359*1.6E1;
                double t22445 = gamma_bb[index]*t22320*t22330*t22322*t22362*t22319*1.2E1;
                double t22446 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22349*t22359*1.6E1;
                double t22439 = t22436-t22445+t22437-t22446+t22438;
                double t22440 = c*c0*t22330*t22332*t22341*t22327*t22346*t22364*t22365*(2.0/9.0);
                double t22441 = c*c0*t22330*t22332*t22316*t22327*t22364*t22365*t22357*t22358*(4.0/3.0);
                double t22442 = c*c0*t22330*t22332*t22341*t22316*t22327*t22364*t22365*t22378*(2.0/3.0);
                double t22443 = a5*c0*gamma_bb[index]*t22330*t22341*t22315*t22327*t22363*t22364*t22365*(1.4E1/9.0) \
                   ;
                double t22444 = c*c0*t22320*t22330*t22322*t22332*t22341*t22318*t22327*t22364*t22365*t22348*(6.4E1/ \
                   9.0);
                double t22449 = 1.0/t22332;
                double t22451 = 1.0/c0;
                double t22452 = pow(rho_b[index],1.0/3.0);
                double t22453 = exp(-t22326);
                double t22454 = t22329*t22329;
                double t22455 = t22340*t22340;
                double t22456 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]);
                double t22481 = c*c0*t22320*t22322*t22332*t22341*t22318*t22327*t22364*t22365*t22348*t22349*(6.4E1/ \
                   9.0);
                double t22457 = t22440+t22441+t22442+t22443-t22390+t22444-t22481+t22366+t22367+t22368+t22369;
                double t22486 = c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22364*t22365*t22349*t22359* \
                   (8.0/3.0);
                double t22458 = t22405+t22406+t22407+t22374+t22375-t22486-t22379;
                double t22459 = t22320*t22317*t22318*t22319;
                double t22460 = pow(t22321,4.0/5.0);
                double t22477 = rab1*t22460;
                double t22461 = exp(-t22477);
                double t22462 = t22461-1.0;
                double t22478 = kab1*t22462;
                double t22463 = kab0-t22478;
                double t22464 = a3*gamma_bb[index]*t22323*t22315*t22324;
                double t22465 = t22464+1.0;
                double t22466 = 1.0/sqrt(t22465);
                double t22467 = a1*gamma_bb[index]*t22315*t22345;
                double t22468 = t22467+t22459+1.0;
                double t22469 = c*c;
                double t22470 = 1.0/pow(rho_b[index],2.0/3.0);
                double t22471 = k1*t22325;
                double t22472 = c*k2*t22316;
                double t22473 = t22471+t22472;
                double t22474 = 1.0/(t22473*t22473);
                double t22483 = t22470*t22474*t22469;
                double t22475 = exp(-t22483);
                double t22476 = exp(-t22459);
                double t22482 = c*c0*t22316*(2.0/3.0);
                double t22487 = t22463*t22466*t22476*t22468*1.0E5;
                double t22488 = 1.0/pow(rho_b[index],1.0E1/3.0);
                double t22489 = 1.0/pow(t22465,3.0/2.0);
                double t22490 = t22320*t22317*t22380*t22318*(1.6E1/3.0);
                double t22491 = a1*gamma_bb[index]*t22315*t22363*(8.0/3.0);
                double t22492 = t22490+t22491;
                double t22493 = a1*t22315*t22345;
                double t22494 = gamma_bb[index]*t22320*t22317*t22319*2.0;
                double t22495 = t22493+t22494;
                double t22496 = 1.0/(c*c);
                double t22497 = 1.0/pow(t22321,1.0/5.0);
                double t22498 = t22482-t22487;
                double t22499 = 0.0 ;
                double t22500 = t22364*t22365*t22377;
                double t22501 = t22423*t22373*t22409;
                double t22502 = t22404*t22373*t22458;
                double t22503 = t22323*t22451*t22452*t22453*t22454*t22455*t22377*t22449*(3.0/2.0);
                double t22637 = t22410*t22404*t22409*t22439;
                double t22504 = t22500+t22501+t22502+t22503-t22637;
                double t22505 = t22364*t22365;
                double t22506 = t22404*t22373*t22409;
                double t22507 = t22505+t22506;
                double t22508 = 1.0/pow(rho_b[index],5.0/3.0);
                double t22509 = t22508*t22474*t22469*(2.0/3.0);
                double t22510 = 1.0/(t22473*t22473*t22473);
                double t22511 = c*k2*t22346*(1.0/3.0);
                double t22512 = c*k1*t22353*t22346*(1.0/6.0);
                double t22513 = t22511+t22512;
                double t22514 = t22509-t22510*t22513*t22470*t22469*2.0;
                double t22515 = a3*t22323*t22315*t22324*t22463*t22476*t22468*t22489*5.0E4;
                double t22516 = gamma_bb[index]*t22320*t22317*t22319*t22463*t22466*t22476*t22468*2.0E5;
                double t22518 = t22463*t22466*t22476*t22495*1.0E5;
                double t22517 = t22515+t22516-t22518;
                double t22519 = c*c0*t22346*(2.0/9.0);
                double t22520 = t22320*t22317*t22380*t22318*t22463*t22466*t22476*t22468*(1.6E6/3.0);
                double t22521 = a3*gamma_bb[index]*t22323*t22315*t22463*t22476*t22468*t22488*t22489*(3.5E5/3.0);
                double t22631 = t22463*t22492*t22466*t22476*1.0E5;
                double t22632 = c*kab1*rab1*t22461*t22346*t22466*t22476*t22468*t22497*(8.0E4/3.0);
                double t22522 = t22520+t22521-t22631-t22632+t22519;
                double t22523 = -t22482+t22487;
                double t22524 = ( (t22523 > 0.0) ?  1.0 : 0.0 ) ;
                double t22525 = t22320*t22317*t22318*t22319*2.0;
                double t22526 = exp(t22525);
                double t22527 = 1.0/(t22463*t22463);
                double t22528 = 1.0/(t22468*t22468);
                double t22529 = c*c0*t22316*t22526*t22527*t22465*t22528*(2.0/3.0);
                double t22530 = 1.0/(t22468*t22468*t22468);
                double t22531 = exp(t22529);
                double t22532 = Ei(-t22529);
                double t22533 = c*c0*t22346*t22526*t22527*t22465*t22528*(2.0/9.0);
                double t22534 = a3*c0*gamma_bb[index]*t22315*t22363*t22526*t22527*t22528*(1.4E1/9.0);
                double t22535 = c*c0*t22320*t22317*t22318*t22526*t22527*t22348*t22465*t22528*(6.4E1/9.0);
                double t22536 = 1.0/(t22463*t22463*t22463);
                double t22537 = sqrt(t22529);
                double t22538 = t22537*6.0;
                double t22539 = c*c0*t22316*t22526*t22527*t22465*t22528*4.0;
                double t22540 = t22538+t22539+3.0;
                double t22541 = 1.0/t22540;
                double t22564 = c*c0*t22530*t22316*t22526*t22527*t22465*t22492*(4.0/3.0);
                double t22565 = c0*kab1*rab1*t22461*t22508*t22526*t22536*t22465*t22528*t22469*t22497*(1.6E1/4.5E1) \
                   ;
                double t22542 = t22533+t22534+t22535-t22564-t22565;
                double t22543 = 1.0/sqrt(t22529);
                double t22544 = a3*c0*t22315*t22345*t22526*t22527*t22528*(2.0/3.0);
                double t22545 = c*c0*gamma_bb[index]*t22320*t22317*t22526*t22527*t22465*t22528*t22359*(8.0/3.0);
                double t22547 = c*c0*t22530*t22316*t22526*t22527*t22465*t22495*(4.0/3.0);
                double t22546 = t22544+t22545-t22547;
                double t22548 = a1*t22315*t22363*(8.0/3.0);
                double t22549 = gamma_bb[index]*t22320*t22317*t22380*(3.2E1/3.0);
                double t22550 = t22548+t22549;
                double t22551 = t22317*t22317;
                double t22552 = a3*c0*t22530*t22315*t22345*t22526*t22527*t22492*(4.0/3.0);
                double t22553 = c*c0*t22530*t22346*t22526*t22527*t22465*t22495*(4.0/9.0);
                double t22554 = c*c0*t22530*t22316*t22550*t22526*t22527*t22465*(4.0/3.0);
                double t22555 = 1.0/(t22468*t22468*t22468*t22468);
                double t22556 = a3*c0*gamma_bb[index]*t22530*t22315*t22363*t22526*t22527*t22495*(2.8E1/9.0);
                double t22557 = c*c0*gamma_bb[index]*t22320*t22530*t22317*t22526*t22527*t22465*t22492*t22359*(1.6E1/ \
                   3.0);
                double t22558 = c*c0*t22320*t22530*t22317*t22318*t22526*t22527*t22348*t22465*t22495*(1.28E2/9.0);
                double t22559 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]);
                double t22560 = a3*c*c0*kab1*rab1*t22315*t22461*t22526*t22536*t22528*t22559*t22497*(1.6E1/4.5E1);
                double t22561 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]);
                double t22562 = c0*gamma_bb[index]*kab1*rab1*t22320*t22317*t22461*t22561*t22526*t22536*t22465*t22528* \
                   t22469*t22497*(6.4E1/4.5E1);
                double t22567 = a3*c0*t22315*t22363*t22526*t22527*t22528*(1.6E1/9.0);
                double t22568 = c*c0*t22316*t22526*t22527*t22465*t22492*t22555*t22495*4.0;
                double t22569 = a3*c0*t22320*t22315*t22317*t22318*t22526*t22347*t22527*t22528*(4.0E1/3.0);
                double t22570 = c*c0*gamma_bb[index]*t22320*t22317*t22526*t22527*t22348*t22465*t22528*(1.36E2/9.0) \
                   ;
                double t22571 = c*c0*gamma_bb[index]*t22351*t22352*t22551*t22318*t22526*t22527*t22465*t22528*(2.56E2/ \
                   9.0);
                double t22572 = c0*kab1*rab1*t22530*t22461*t22508*t22526*t22536*t22465*t22495*t22469*t22497*(3.2E1/ \
                   4.5E1);
                double t22563 = t22560+t22552-t22570+t22553+t22562-t22571+t22554-t22572+t22556+t22557+t22558-t22567- \
                   t22568-t22569;
                double t22566 = 1.0/rho_b[index];
                double t22573 = c*c0*t22531*t22316*t22532*t22526*t22527*t22465*t22528*(2.0/3.0);
                double t22574 = t22573+1.0;
                double t22575 = t22543*t22546*2.0;
                double t22576 = a3*c0*t22315*t22345*t22526*t22527*t22528*(8.0/3.0);
                double t22577 = c*c0*gamma_bb[index]*t22320*t22317*t22526*t22527*t22465*t22528*t22359*(3.2E1/3.0) \
                   ;
                double t22629 = c*c0*t22530*t22316*t22526*t22527*t22465*t22495*(1.6E1/3.0);
                double t22578 = t22575-t22629+t22576+t22577;
                double t22579 = 1.0/(t22540*t22540);
                double t22580 = t22542*t22543*2.0;
                double t22581 = c*c0*t22346*t22526*t22527*t22465*t22528*(8.0/9.0);
                double t22582 = a3*c0*gamma_bb[index]*t22315*t22363*t22526*t22527*t22528*(5.6E1/9.0);
                double t22583 = c*c0*t22320*t22317*t22318*t22526*t22527*t22348*t22465*t22528*(2.56E2/9.0);
                double t22615 = c*c0*t22530*t22316*t22526*t22527*t22465*t22492*(1.6E1/3.0);
                double t22616 = c0*kab1*rab1*t22461*t22508*t22526*t22536*t22465*t22528*t22469*t22497*(6.4E1/4.5E1) \
                   ;
                double t22584 = -t22615+t22580-t22616+t22581+t22582+t22583;
                double t22585 = t22537*4.0;
                double t22586 = c*c0*t22316*t22526*t22527*t22465*t22528*(8.0/3.0);
                double t22587 = t22585+t22586+6.0;
                double t22588 = t22543*t22546*3.0;
                double t22589 = a3*c0*t22315*t22345*t22526*t22527*t22528*4.0;
                double t22590 = c*c0*gamma_bb[index]*t22320*t22317*t22526*t22527*t22465*t22528*t22359*1.6E1;
                double t22606 = c*c0*t22530*t22316*t22526*t22527*t22465*t22495*8.0;
                double t22591 = -t22606+t22590+t22588+t22589;
                double t22592 = c*c0*t22531*t22532*t22346*t22526*t22527*t22465*t22528*(2.0/9.0);
                double t22593 = a3*c0*gamma_bb[index]*t22315*t22531*t22532*t22363*t22526*t22527*t22528*(1.4E1/9.0) \
                   ;
                double t22594 = c*c0*t22531*t22316*t22532*t22542*t22526*t22527*t22465*t22528*(2.0/3.0);
                double t22595 = c*c0*t22320*t22531*t22532*t22317*t22318*t22526*t22527*t22348*t22465*t22528*(6.4E1/ \
                   9.0);
                double t22596 = t22542*t22543*3.0;
                double t22597 = c*c0*t22346*t22526*t22527*t22465*t22528*(4.0/3.0);
                double t22598 = a3*c0*gamma_bb[index]*t22315*t22363*t22526*t22527*t22528*(2.8E1/3.0);
                double t22599 = c*c0*t22320*t22317*t22318*t22526*t22527*t22348*t22465*t22528*(1.28E2/3.0);
                double t22607 = c*c0*t22530*t22316*t22526*t22527*t22465*t22492*8.0;
                double t22608 = c0*kab1*rab1*t22461*t22508*t22526*t22536*t22465*t22528*t22469*t22497*(3.2E1/1.5E1) \
                   ;
                double t22600 = -t22607-t22608+t22596+t22597+t22598+t22599;
                double t22601 = a3*c0*t22315*t22531*t22532*t22345*t22526*t22527*t22528*(2.0/3.0);
                double t22602 = c*c0*t22531*t22316*t22532*t22526*t22527*t22465*t22528*t22546*(2.0/3.0);
                double t22603 = c*c0*gamma_bb[index]*t22320*t22531*t22532*t22317*t22526*t22527*t22465*t22528*t22359* \
                   (8.0/3.0);
                double t22630 = c*c0*t22530*t22531*t22316*t22532*t22526*t22527*t22465*t22495*(4.0/3.0);
                double t22604 = t22601+t22602+t22603-t22630+t22544+t22545-t22547;
                double t22605 = 1.0/pow(t22529,3.0/2.0);
                double t22609 = 1.0/t22465;
                double t22610 = exp(-t22525);
                double t22611 = t22463*t22463;
                double t22612 = t22468*t22468;
                double t22613 = 1.0/(rho_b[index]*rho_b[index]);
                double t22614 = t22533+t22534+t22535-t22564-t22565+t22592+t22593+t22594+t22595-c*c0*t22530*t22531* \
                   t22316*t22532*t22526*t22527*t22465*t22492*(4.0/3.0)-c0*kab1*rab1*t22531*t22532*t22461*t22508*t22526* \
                   t22536*t22465*t22528*t22469*t22497*(1.6E1/4.5E1);
                double t22617 = a3*t22323*t22315*t22463*t22476*t22468*t22488*t22489*(3.5E5/3.0);
                double t22618 = a3*t22323*t22315*t22324*t22463*t22492*t22476*t22489*5.0E4;
                double t22619 = gamma_bb[index]*t22320*t22317*t22380*t22463*t22466*t22476*t22468*(3.2E6/3.0);
                double t22620 = gamma_bb[index]*t22320*t22317*t22319*t22463*t22492*t22466*t22476*2.0E5;
                double t22621 = t22320*t22317*t22380*t22318*t22463*t22466*t22476*t22495*(1.6E6/3.0);
                double t22622 = a3*a3;
                double t22623 = 1.0/pow(t22465,5.0/2.0);
                double t22624 = a3*gamma_bb[index]*t22323*t22315*t22463*t22476*t22495*t22488*t22489*(3.5E5/3.0);
                double t22625 = a3*kab1*rab1*t22315*t22461*t22363*t22476*t22468*t22497*t22489*(4.0E4/3.0);
                double t22626 = 1.0/pow(rho_b[index],2.6E1/3.0);
                double t22627 = c*gamma_bb[index]*kab1*rab1*t22320*t22317*t22461*t22348*t22466*t22476*t22468*t22497* \
                   (1.6E5/3.0);
                double t22628 = t22620+t22621+t22624+t22625+t22617+t22618+t22627+t22619-t22550*t22463*t22466*t22476* \
                   1.0E5-c*kab1*rab1*t22461*t22346*t22466*t22476*t22495*t22497*(8.0E4/3.0)-gamma_bb[index]*t22320*t22622* \
                   t22623*t22463*t22359*t22476*t22468*t22496*1.75E5-gamma_bb[index]*t22352*t22551*t22318*t22463*t22419* \
                   t22466*t22476*t22468*(3.2E6/3.0)-a3*t22320*t22323*t22315*t22317*t22318*t22463*t22626*t22476*t22468* \
                   t22489*5.0E5;
                double t22633 = 0.0 ;
                double t22634 = t22531*t22532;
                double t22635 = t22541*t22574*t22587;
                double t22636 = t22634+t22635;
                v_rho_b_gamma_bb_[index] = rho_b[index]*( ( (c*c0*t22316*(-2.0/3.0)+t22463*t22466*t22468*exp(-t22320* \
                   t22317*t22318*t22319)*1.0E5 > 0.0) ? c0*t22475*1.0*(t22373*t22409*(t22360*t22417*t22376*2.0-t22401* \
                   t22360*t22418*t22396-gamma_bb[index]*t22320*t22330*t22322*t22362*t22380*(1.28E2/3.0)+a5*c0*t22330* \
                   t22341*t22315*t22327*t22363*(6.4E1/9.0)-gamma_bb[index]*t22320*t22401*t22330*t22322*t22319*t22376* \
                   4.0+gamma_bb[index]*t22350*t22352*t22362*t22318*t22419*t22349*(2.56E2/3.0)-t22320*t22330*t22322*t22380* \
                   t22318*t22376*t22396*(3.2E1/3.0)+a5*c0*t22330*t22315*t22327*t22345*t22357*t22358*(1.6E1/3.0)+c*c0* \
                   gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22348*(5.44E2/9.0)-c*c0*gamma_bb[index]* \
                   t22320*t22322*t22332*t22341*t22327*t22348*t22349*(5.44E2/9.0)+a5*c0*t22320*t22330*t22322*t22341*t22315* \
                   t22318*t22327*t22347*(1.6E2/3.0)-a5*c0*t22320*t22322*t22341*t22315*t22318*t22327*t22347*t22349*(1.6E2/ \
                   3.0)+c*c0*gamma_bb[index]*t22330*t22332*t22341*t22350*t22351*t22352*t22318*t22327*(1.024E3/9.0)-c* \
                   c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22349*(2.048E3/9.0)+c*c0*gamma_bb[index]* \
                   t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22386*(5.12E2/3.0)+c*c0*gamma_bb[index]*t22320*t22330* \
                   t22322*t22332*t22327*t22357*t22358*t22359*(6.4E1/3.0)-c*c0*gamma_bb[index]*t22320*t22322*t22332*t22327* \
                   t22357*t22349*t22358*t22359*(6.4E1/3.0))+t22404*t22373*(-t22450+t22381+t22382-t22391+t22383-t22392+ \
                   t22384-t22393+t22385+t22387+t22388+t22377*t22566*(1.0/3.0)+t22377*t22378+(t22357*t22377*2.0)/t22340+ \
                   t22320*t22322*t22380*t22318*t22377*(3.2E1/3.0)-t22320*t22322*t22360*t22380*t22318*t22377*(3.2E1/3.0) \
                   +a5*gamma_bb[index]*t22323*t22315*t22377*t22449*t22488*(7.0/3.0)+a5*c0*t22330*t22341*t22315*t22327* \
                   t22363*t22364*t22365*(1.6E1/9.0)+a5*c0*t22330*t22341*t22315*t22327*t22345*t22364*t22365*t22378*(2.0/ \
                   3.0)+a5*c0*t22330*t22315*t22327*t22345*t22364*t22365*t22357*t22358*(4.0/3.0)+c*c0*t22330*t22332*t22341* \
                   t22316*t22327*t22364*t22365*t22389*(2.0/3.0)+c*c0*t22330*t22332*t22341*t22327*t22346*t22364*t22365* \
                   t22377*(2.0/9.0)+a5*c0*gamma_bb[index]*t22330*t22341*t22315*t22327*t22363*t22364*t22365*t22377*(1.4E1/ \
                   9.0)+c*c0*t22330*t22332*t22341*t22316*t22327*t22364*t22365*t22377*t22378*(2.0/3.0)+c*c0*t22330*t22332* \
                   t22316*t22327*t22364*t22365*t22357*t22358*t22377*(4.0/3.0)+c*c0*gamma_bb[index]*t22320*t22330*t22322* \
                   t22332*t22341*t22327*t22364*t22365*t22348*(1.36E2/9.0)-c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341* \
                   t22327*t22364*t22365*t22348*t22349*(1.36E2/9.0)+a5*c0*t22320*t22330*t22322*t22341*t22315*t22318*t22327* \
                   t22364*t22347*t22365*(4.0E1/3.0)-a5*c0*t22320*t22322*t22341*t22315*t22318*t22327*t22364*t22347*t22365* \
                   t22349*(4.0E1/3.0)+c*c0*gamma_bb[index]*t22330*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22364* \
                   t22365*(2.56E2/9.0)+c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22364*t22365*t22359* \
                   t22378*(8.0/3.0)-c*c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22364*t22365* \
                   t22349*(5.12E2/9.0)+c*c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22364*t22365* \
                   t22386*(1.28E2/3.0)+c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22327*t22364*t22365*t22357*t22358* \
                   t22359*(1.6E1/3.0)-c*c0*gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22364*t22365*t22349*t22359* \
                   t22378*(8.0/3.0)-c*c0*gamma_bb[index]*t22320*t22322*t22332*t22327*t22364*t22365*t22357*t22349*t22358* \
                   t22359*(1.6E1/3.0)+c*c0*t22320*t22330*t22322*t22332*t22341*t22318*t22327*t22364*t22365*t22348*t22377* \
                   (6.4E1/9.0)-c*c0*t22320*t22322*t22332*t22341*t22318*t22327*t22364*t22365*t22348*t22349*t22377*(6.4E1/ \
                   9.0))+t22423*t22373*t22457+t22435*t22373*t22458+t22364*t22365*t22389-t22410*t22423*t22409*t22429-t22410* \
                   t22404*t22429*t22458-t22410*t22404*t22439*t22457-t22410*t22435*t22409*t22439+t22364*t22365*t22377* \
                   t22378-t22410*t22404*t22409*(t22360*t22417*t22376*3.0-t22401*t22360*t22418*t22396*(3.0/2.0)-gamma_bb[index]* \
                   t22320*t22330*t22322*t22362*t22380*6.4E1+a5*c0*t22330*t22341*t22315*t22327*t22363*(3.2E1/3.0)-gamma_bb[index]* \
                   t22320*t22401*t22330*t22322*t22319*t22376*6.0+gamma_bb[index]*t22350*t22352*t22362*t22318*t22419*t22349* \
                   1.28E2-t22320*t22330*t22322*t22380*t22318*t22376*t22396*1.6E1+a5*c0*t22330*t22315*t22327*t22345*t22357* \
                   t22358*8.0+c*c0*gamma_bb[index]*t22320*t22330*t22322*t22332*t22341*t22327*t22348*(2.72E2/3.0)-c*c0* \
                   gamma_bb[index]*t22320*t22322*t22332*t22341*t22327*t22348*t22349*(2.72E2/3.0)+a5*c0*t22320*t22330* \
                   t22322*t22341*t22315*t22318*t22327*t22347*8.0E1-a5*c0*t22320*t22322*t22341*t22315*t22318*t22327*t22347* \
                   t22349*8.0E1+c*c0*gamma_bb[index]*t22330*t22332*t22341*t22350*t22351*t22352*t22318*t22327*(5.12E2/ \
                   3.0)-c*c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22349*(1.024E3/3.0)+c* \
                   c0*gamma_bb[index]*t22332*t22341*t22350*t22351*t22352*t22318*t22327*t22386*2.56E2+c*c0*gamma_bb[index]* \
                   t22320*t22330*t22322*t22332*t22327*t22357*t22358*t22359*3.2E1-c*c0*gamma_bb[index]*t22320*t22322*t22332* \
                   t22327*t22357*t22349*t22358*t22359*3.2E1)+t22404*1.0/(t22372*t22372*t22372)*t22409*t22429*t22439*2.0+ \
                   t22323*t22451*t22452*t22453*t22454*t22455*t22449*t22389*(3.0/2.0)+t22323*t22451*t22452*t22453*t22454* \
                   t22455*t22377*t22449*t22378*(3.0/2.0)-a5*1.0/(t22332*t22332)*t22315*t22451*t22613*t22453*t22454*t22455* \
                   t22378*t22496*(3.0/2.0)-gamma_bb[index]*t22320*t22322*t22323*t22451*t22453*t22454*t22455*t22456*t22449* \
                   t22378*6.0+gamma_bb[index]*t22320*t22322*t22323*t22451*t22453*t22329*t22455*t22456*t22449*t22378*6.0) \
                   *(-1.0/2.0) : 0.0 ) +c0*t22504*t22514*t22524*t22475*(1.0/2.0)+c0*t22504*t22522*t22475*t22499*(1.0/ \
                   2.0)+c0*t22507*t22475*t22628*t22499*(1.0/2.0)+ 0.0 +c0*t22522*t22507*t22633*t22517*t22475*(1.0/2.0) \
                   -c0*t22514*t22507*t22517*t22475*t22499*(1.0/2.0))+rho_a[index]*(c0*t22524*(t22541*t22574*(t22543*t22563* \
                   2.0+t22542*t22605*t22546-a3*c0*t22315*t22363*t22526*t22527*t22528*(6.4E1/9.0)+a3*c0*t22530*t22315* \
                   t22345*t22526*t22527*t22492*(1.6E1/3.0)+c*c0*t22530*t22316*t22550*t22526*t22527*t22465*(1.6E1/3.0) \
                   +c*c0*t22530*t22346*t22526*t22527*t22465*t22495*(1.6E1/9.0)+a3*c0*gamma_bb[index]*t22530*t22315*t22363* \
                   t22526*t22527*t22495*(1.12E2/9.0)-c*c0*t22316*t22526*t22527*t22465*t22492*t22555*t22495*1.6E1-c*c0* \
                   gamma_bb[index]*t22320*t22317*t22526*t22527*t22348*t22465*t22528*(5.44E2/9.0)-a3*c0*t22320*t22315* \
                   t22317*t22318*t22526*t22347*t22527*t22528*(1.6E2/3.0)+c*c0*gamma_bb[index]*t22320*t22530*t22317*t22526* \
                   t22527*t22465*t22492*t22359*(6.4E1/3.0)-c*c0*gamma_bb[index]*t22351*t22352*t22551*t22318*t22526*t22527* \
                   t22465*t22528*(1.024E3/9.0)+c*c0*t22320*t22530*t22317*t22318*t22526*t22527*t22348*t22465*t22495*(5.12E2/ \
                   9.0)+a3*c*c0*kab1*rab1*t22315*t22461*t22526*t22536*t22528*t22559*t22497*(6.4E1/4.5E1)-c0*kab1*rab1* \
                   t22530*t22461*t22508*t22526*t22536*t22465*t22495*t22469*t22497*(1.28E2/4.5E1)+c0*gamma_bb[index]*kab1* \
                   rab1*t22320*t22317*t22461*t22561*t22526*t22536*t22465*t22528*t22469*t22497*(2.56E2/4.5E1))+t22541* \
                   t22587*(t22560+t22552-t22570+t22553+t22562-t22571+t22554-t22572+t22556+t22557+t22558-t22567-t22568- \
                   t22569-t22542*t22546-t22546*t22566*(1.0/3.0)+(t22492*t22546*2.0)/t22468-t22320*t22317*t22380*t22318* \
                   t22546*(3.2E1/3.0)-a3*gamma_bb[index]*t22323*t22315*t22546*t22609*t22488*(7.0/3.0)+(c*kab1*rab1*t22461* \
                   t22346*t22546*t22497*(8.0/1.5E1))/t22463-a3*c0*t22315*t22531*t22532*t22363*t22526*t22527*t22528*(1.6E1/ \
                   9.0)+a3*c0*t22530*t22315*t22531*t22532*t22345*t22526*t22527*t22492*(4.0/3.0)-a3*c0*t22315*t22531*t22532* \
                   t22542*t22345*t22526*t22527*t22528*(2.0/3.0)+c*c0*t22530*t22531*t22316*t22532*t22550*t22526*t22527* \
                   t22465*(4.0/3.0)+c*c0*t22530*t22531*t22532*t22346*t22526*t22527*t22465*t22495*(4.0/9.0)+c*c0*t22531* \
                   t22316*t22532*t22526*t22527*t22563*t22465*t22528*(2.0/3.0)-c*c0*t22531*t22532*t22346*t22526*t22527* \
                   t22465*t22528*t22546*(2.0/9.0)+a3*c0*gamma_bb[index]*t22530*t22315*t22531*t22532*t22363*t22526*t22527* \
                   t22495*(2.8E1/9.0)-a3*c0*gamma_bb[index]*t22315*t22531*t22532*t22363*t22526*t22527*t22528*t22546*(1.4E1/ \
                   9.0)+c*c0*t22530*t22531*t22316*t22532*t22542*t22526*t22527*t22465*t22495*(4.0/3.0)+c*c0*t22530*t22531* \
                   t22316*t22532*t22526*t22527*t22465*t22492*t22546*(4.0/3.0)-c*c0*t22531*t22316*t22532*t22542*t22526* \
                   t22527*t22465*t22528*t22546*(2.0/3.0)-c*c0*t22531*t22316*t22532*t22526*t22527*t22465*t22492*t22555* \
                   t22495*4.0-c*c0*gamma_bb[index]*t22320*t22531*t22532*t22317*t22526*t22527*t22348*t22465*t22528*(1.36E2/ \
                   9.0)-a3*c0*t22320*t22315*t22531*t22532*t22317*t22318*t22526*t22347*t22527*t22528*(4.0E1/3.0)+c*c0* \
                   gamma_bb[index]*t22320*t22530*t22531*t22532*t22317*t22526*t22527*t22465*t22492*t22359*(1.6E1/3.0)- \
                   c*c0*gamma_bb[index]*t22351*t22531*t22352*t22532*t22551*t22318*t22526*t22527*t22465*t22528*(2.56E2/ \
                   9.0)-c*c0*gamma_bb[index]*t22320*t22531*t22532*t22317*t22542*t22526*t22527*t22465*t22528*t22359*(8.0/ \
                   3.0)+c*c0*t22320*t22530*t22531*t22532*t22317*t22318*t22526*t22527*t22348*t22465*t22495*(1.28E2/9.0) \
                   -c*c0*t22320*t22531*t22532*t22317*t22318*t22526*t22527*t22348*t22465*t22528*t22546*(6.4E1/9.0)+a3* \
                   c*c0*kab1*rab1*t22315*t22531*t22532*t22461*t22526*t22536*t22528*t22559*t22497*(1.6E1/4.5E1)-c0*kab1* \
                   rab1*t22530*t22531*t22532*t22461*t22508*t22526*t22536*t22465*t22495*t22469*t22497*(3.2E1/4.5E1)+c0* \
                   kab1*rab1*t22531*t22532*t22461*t22508*t22526*t22536*t22465*t22528*t22546*t22469*t22497*(1.6E1/4.5E1) \
                   +c0*gamma_bb[index]*kab1*rab1*t22320*t22531*t22532*t22317*t22461*t22561*t22526*t22536*t22465*t22528* \
                   t22469*t22497*(6.4E1/4.5E1))+t22531*t22532*t22563-t22541*t22604*t22584-t22541*t22578*(t22533+t22534+ \
                   t22535+t22592+t22593+t22594+t22595-c*c0*t22530*t22316*t22526*t22527*t22465*t22492*(4.0/3.0)-c*c0*t22530* \
                   t22531*t22316*t22532*t22526*t22527*t22465*t22492*(4.0/3.0)-c0*kab1*rab1*t22461*t22508*t22526*t22536* \
                   t22465*t22528*t22469*t22497*(1.6E1/4.5E1)-c0*kab1*rab1*t22531*t22532*t22461*t22508*t22526*t22536*t22465* \
                   t22528*t22469*t22497*(1.6E1/4.5E1))-t22531*t22532*t22542*t22546+t22600*t22604*t22587*t22579+t22600* \
                   t22574*t22578*t22579+t22614*t22591*t22587*t22579+t22591*t22574*t22584*t22579-t22574*t22587*t22579* \
                   (t22543*t22563*3.0+t22542*t22605*t22546*(3.0/2.0)-a3*c0*t22315*t22363*t22526*t22527*t22528*(3.2E1/ \
                   3.0)+a3*c0*t22530*t22315*t22345*t22526*t22527*t22492*8.0+c*c0*t22530*t22316*t22550*t22526*t22527*t22465* \
                   8.0+c*c0*t22530*t22346*t22526*t22527*t22465*t22495*(8.0/3.0)+a3*c0*gamma_bb[index]*t22530*t22315*t22363* \
                   t22526*t22527*t22495*(5.6E1/3.0)-c*c0*t22316*t22526*t22527*t22465*t22492*t22555*t22495*2.4E1-c*c0* \
                   gamma_bb[index]*t22320*t22317*t22526*t22527*t22348*t22465*t22528*(2.72E2/3.0)-a3*c0*t22320*t22315* \
                   t22317*t22318*t22526*t22347*t22527*t22528*8.0E1+c*c0*gamma_bb[index]*t22320*t22530*t22317*t22526*t22527* \
                   t22465*t22492*t22359*3.2E1-c*c0*gamma_bb[index]*t22351*t22352*t22551*t22318*t22526*t22527*t22465*t22528* \
                   (5.12E2/3.0)+c*c0*t22320*t22530*t22317*t22318*t22526*t22527*t22348*t22465*t22495*(2.56E2/3.0)+a3*c* \
                   c0*kab1*rab1*t22315*t22461*t22526*t22536*t22528*t22559*t22497*(3.2E1/1.5E1)-c0*kab1*rab1*t22530*t22461* \
                   t22508*t22526*t22536*t22465*t22495*t22469*t22497*(6.4E1/1.5E1)+c0*gamma_bb[index]*kab1*rab1*t22320* \
                   t22317*t22461*t22561*t22526*t22536*t22465*t22528*t22469*t22497*(1.28E2/1.5E1))-t22600*1.0/(t22540* \
                   t22540*t22540)*t22591*t22574*t22587*2.0+t22610*t22323*t22611*t22612*t22451*t22452*t22563*t22609*(3.0/ \
                   2.0)-t22610*t22323*t22611*t22612*t22451*t22452*t22542*t22546*t22609*(3.0/2.0)-t22610*t22323*t22611* \
                   t22451*t22452*t22542*t22609*t22468*t22495*3.0+a3*t22610*t22611*t22315*t22612*t22451*t22613*t22542* \
                   1.0/(t22465*t22465)*t22496*(3.0/2.0)+gamma_bb[index]*t22320*t22610*t22323*t22611*t22612*t22451*t22317* \
                   t22542*t22456*t22609*6.0)*(1.0/2.0)+c0*t22636*t22628*t22499*(1.0/2.0)+c0*t22517*t22499*(t22531*t22532* \
                   t22542+t22541*t22614*t22587+t22541*t22574*t22584-t22600*t22574*t22587*t22579+t22610*t22323*t22611* \
                   t22612*t22451*t22452*t22542*t22609*(3.0/2.0))*(1.0/2.0)+c0*t22522*t22499*(t22531*t22532*t22546+t22541* \
                   t22604*t22587+t22541*t22574*t22578-t22591*t22574*t22587*t22579+t22610*t22323*t22611*t22612*t22451* \
                   t22452*t22546*t22609*(3.0/2.0))*(1.0/2.0)+c0*t22522*t22633*t22517*t22636*(1.0/2.0))+c0*t22504*t22524* \
                   t22475*(1.0/2.0)-c0*t22507*t22517*t22475*t22499*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t23507 = tspi_m13*tspi_m13;
                double t23508 = 1.0/pow(rho_b[index],1.0/3.0);
                double t23509 = a2*a2;
                double t23510 = gamma_bb[index]*gamma_bb[index];
                double t23511 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t23512 = t23507*t23507;
                double t23513 = c*t23508;
                double t23514 = a4*a4;
                double t23515 = 1.0/c;
                double t23516 = 1.0/pow(rho_b[index],7.0/3.0);
                double t23517 = sqrt(t23513);
                double t23518 = t23510*t23511*t23512*t23514*2.0;
                double t23519 = exp(t23518);
                double t23520 = t23510*t23511*t23512*t23514;
                double t23521 = t23520+1.0;
                double t23522 = 1.0/(t23521*t23521);
                double t23523 = a5*gamma_bb[index]*t23515*t23507*t23516;
                double t23524 = t23523+1.0;
                double t23536 = raa2*t23517;
                double t23525 = exp(-t23536);
                double t23526 = t23525-1.0;
                double t23527 = kaa2*t23526;
                double t23528 = pow(t23513,2.0/5.0);
                double t23537 = raa1*t23528;
                double t23529 = exp(-t23537);
                double t23530 = t23529-1.0;
                double t23531 = kaa1*t23530;
                double t23532 = -kaa0+t23531+t23527;
                double t23533 = 1.0/(t23532*t23532);
                double t23534 = c*c0*t23522*t23524*t23533*t23508*t23519*(2.0/3.0);
                double t23535 = 1.0/pow(rho_b[index],8.0/3.0);
                double t23538 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t23539 = exp(t23534);
                double t23540 = Ei(-t23534);
                double t23541 = 1.0/t23521;
                double t23542 = c*c0*t23524*t23533*t23508*t23519*(2.0/3.0);
                double t23543 = sqrt(t23542);
                double t23544 = 1.0/(t23521*t23521*t23521);
                double t23545 = t23541*t23543*6.0;
                double t23546 = c*c0*t23522*t23524*t23533*t23508*t23519*4.0;
                double t23547 = t23545+t23546+3.0;
                double t23548 = 1.0/t23547;
                double t23549 = a5*c0*t23522*t23533*t23507*t23535*t23519*(2.0/3.0);
                double t23550 = c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23533*t23519*t23538*(8.0/3.0);
                double t23561 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23544*t23519*t23538*(8.0/3.0);
                double t23551 = t23550-t23561+t23549;
                double t23552 = c*c0*t23522*t23540*t23524*t23533*t23508*t23519*t23539*(2.0/3.0);
                double t23553 = t23552+1.0;
                double t23554 = t23541*t23543*4.0;
                double t23555 = c*c0*t23522*t23524*t23533*t23508*t23519*(8.0/3.0);
                double t23556 = t23554+t23555+6.0;
                double t23557 = a5*c0*t23533*t23507*t23535*t23519*(2.0/3.0);
                double t23558 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23519*t23538*(8.0/3.0);
                double t23559 = t23557+t23558;
                double t23560 = 1.0/sqrt(t23542);
                double t23562 = t23510*t23511*t23512*t23509;
                double t23563 = pow(t23513,4.0/5.0);
                double t23671 = rab1*t23563;
                double t23564 = exp(-t23671);
                double t23565 = t23564-1.0;
                double t23672 = kab1*t23565;
                double t23566 = kab0-t23672;
                double t23567 = a3*gamma_bb[index]*t23515*t23507*t23516;
                double t23568 = t23567+1.0;
                double t23569 = 1.0/sqrt(t23568);
                double t23570 = a1*gamma_bb[index]*t23507*t23535;
                double t23571 = t23570+t23562+1.0;
                double t23572 = c*c;
                double t23573 = 1.0/pow(rho_b[index],2.0/3.0);
                double t23574 = k1*t23517;
                double t23575 = c*k2*t23508;
                double t23576 = t23574+t23575;
                double t23577 = 1.0/(t23576*t23576);
                double t23674 = t23572*t23573*t23577;
                double t23578 = exp(-t23674);
                double t23579 = 1.0/pow(rho_b[index],4.0/3.0);
                double t23580 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t23581 = 1.0/pow(rho_b[index],2.0E1/3.0);
                double t23582 = t23514*t23514;
                double t23583 = 1.0/pow(rho_b[index],1.2E1);
                double t23584 = t23512*t23512;
                double t23585 = 1.0/sqrt(t23513);
                double t23586 = c*kaa2*raa2*t23525*t23585*t23579*(1.0/6.0);
                double t23587 = 1.0/pow(t23513,3.0/5.0);
                double t23588 = c*kaa1*raa1*t23529*t23587*t23579*(2.0/1.5E1);
                double t23589 = t23586+t23588;
                double t23590 = 1.0/(t23532*t23532*t23532);
                double t23591 = t23541*t23560*t23559*2.0;
                double t23592 = a5*c0*t23522*t23533*t23507*t23535*t23519*(8.0/3.0);
                double t23593 = c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23533*t23519*t23538*(3.2E1/3.0) \
                   ;
                double t23635 = gamma_bb[index]*t23511*t23512*t23522*t23514*t23543*8.0;
                double t23636 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23544*t23519*t23538*(3.2E1/3.0) \
                   ;
                double t23594 = -t23635+t23591-t23636+t23592+t23593;
                double t23595 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t23596 = c*c0*t23522*t23524*t23533*t23519*t23579*(2.0/9.0);
                double t23597 = a5*c0*gamma_bb[index]*t23522*t23533*t23507*t23519*t23595*(1.4E1/9.0);
                double t23598 = c*c0*t23522*t23524*t23508*t23590*t23519*t23589*(4.0/3.0);
                double t23599 = c*c0*t23510*t23512*t23522*t23514*t23524*t23533*t23581*t23519*(6.4E1/9.0);
                double t23600 = a5*c0*t23522*t23540*t23533*t23507*t23535*t23519*t23539*(2.0/3.0);
                double t23601 = c*c0*t23522*t23540*t23524*t23533*t23551*t23508*t23519*t23539*(2.0/3.0);
                double t23602 = c*c0*gamma_bb[index]*t23512*t23522*t23540*t23514*t23524*t23533*t23519*t23538*t23539* \
                   (8.0/3.0);
                double t23615 = c*c0*t23510*t23512*t23514*t23524*t23533*t23544*t23581*t23519*(6.4E1/9.0);
                double t23603 = -t23615+t23596+t23597+t23598+t23599;
                double t23604 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t23605 = 1.0/t23524;
                double t23606 = a5*c0*t23522*t23533*t23507*t23519*t23595*(1.6E1/9.0);
                double t23607 = a5*c0*t23522*t23507*t23535*t23590*t23519*t23589*(4.0/3.0);
                double t23608 = a5*c0*t23510*t23512*t23522*t23514*t23533*t23507*t23580*t23519*(4.0E1/3.0);
                double t23609 = c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23533*t23581*t23519*(1.36E2/9.0) \
                   ;
                double t23610 = c*c0*gamma_bb[index]*t23510*t23522*t23524*t23533*t23519*t23582*t23583*t23584*(2.56E2/ \
                   9.0);
                double t23611 = 1.0/(t23521*t23521*t23521*t23521);
                double t23612 = c*c0*gamma_bb[index]*t23510*t23611*t23524*t23533*t23519*t23582*t23583*t23584*(1.28E2/ \
                   3.0);
                double t23613 = c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23590*t23519*t23538*t23589*(1.6E1/ \
                   3.0);
                double t23616 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23544*t23581*t23519*(1.36E2/9.0) \
                   ;
                double t23617 = c*c0*gamma_bb[index]*t23510*t23524*t23533*t23544*t23519*t23582*t23583*t23584*(5.12E2/ \
                   9.0);
                double t23618 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23544*t23590*t23519*t23538*t23589*(1.6E1/ \
                   3.0);
                double t23667 = a5*c0*t23510*t23512*t23514*t23533*t23507*t23544*t23580*t23519*(4.0E1/3.0);
                double t23614 = t23610+t23612+t23613+t23606+t23607-t23616+t23608-t23617+t23609-t23618-t23667;
                double t23619 = c*c0*t23524*t23533*t23519*t23579*(2.0/9.0);
                double t23620 = a5*c0*gamma_bb[index]*t23533*t23507*t23519*t23595*(1.4E1/9.0);
                double t23621 = c*c0*t23524*t23508*t23590*t23519*t23589*(4.0/3.0);
                double t23622 = c*c0*t23510*t23512*t23514*t23524*t23533*t23581*t23519*(6.4E1/9.0);
                double t23623 = t23620+t23621+t23622+t23619;
                double t23624 = 1.0/(t23547*t23547);
                double t23690 = c*c0*gamma_bb[index]*t23512*t23540*t23514*t23524*t23533*t23544*t23519*t23538*t23539* \
                   (8.0/3.0);
                double t23625 = t23600+t23601+t23602+t23550-t23561-t23690+t23549;
                double t23626 = a5*c0*t23533*t23507*t23519*t23595*(1.6E1/9.0);
                double t23627 = a5*c0*t23507*t23535*t23590*t23519*t23589*(4.0/3.0);
                double t23628 = a5*c0*t23510*t23512*t23514*t23533*t23507*t23580*t23519*(4.0E1/3.0);
                double t23629 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23581*t23519*(1.36E2/9.0);
                double t23630 = c*c0*gamma_bb[index]*t23510*t23524*t23533*t23519*t23582*t23583*t23584*(2.56E2/9.0) \
                   ;
                double t23631 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23590*t23519*t23538*t23589*(1.6E1/3.0) \
                   ;
                double t23632 = t23630+t23631+t23626+t23627+t23628+t23629;
                double t23633 = 1.0/pow(t23542,3.0/2.0);
                double t23634 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t23637 = t23541*t23560*t23623*3.0;
                double t23638 = c*c0*t23522*t23524*t23533*t23519*t23579*(4.0/3.0);
                double t23639 = a5*c0*gamma_bb[index]*t23522*t23533*t23507*t23519*t23595*(2.8E1/3.0);
                double t23640 = c*c0*t23522*t23524*t23508*t23590*t23519*t23589*8.0;
                double t23641 = c*c0*t23510*t23512*t23522*t23514*t23524*t23533*t23581*t23519*(1.28E2/3.0);
                double t23660 = t23510*t23512*t23522*t23514*t23604*t23543*3.2E1;
                double t23661 = c*c0*t23510*t23512*t23514*t23524*t23533*t23544*t23581*t23519*(1.28E2/3.0);
                double t23642 = t23640+t23641-t23660-t23661+t23637+t23638+t23639;
                double t23643 = t23541*t23560*t23559*3.0;
                double t23644 = a5*c0*t23522*t23533*t23507*t23535*t23519*4.0;
                double t23645 = c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23533*t23519*t23538*1.6E1;
                double t23653 = gamma_bb[index]*t23511*t23512*t23522*t23514*t23543*1.2E1;
                double t23654 = c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23544*t23519*t23538*1.6E1;
                double t23646 = t23643+t23644-t23653+t23645-t23654;
                double t23647 = t23541*t23560*t23623*2.0;
                double t23648 = c*c0*t23522*t23524*t23533*t23519*t23579*(8.0/9.0);
                double t23649 = a5*c0*gamma_bb[index]*t23522*t23533*t23507*t23519*t23595*(5.6E1/9.0);
                double t23650 = c*c0*t23522*t23524*t23508*t23590*t23519*t23589*(1.6E1/3.0);
                double t23651 = c*c0*t23510*t23512*t23522*t23514*t23524*t23533*t23581*t23519*(2.56E2/9.0);
                double t23685 = t23510*t23512*t23522*t23514*t23604*t23543*(6.4E1/3.0);
                double t23686 = c*c0*t23510*t23512*t23514*t23524*t23533*t23544*t23581*t23519*(2.56E2/9.0);
                double t23652 = t23650+t23651+t23647+t23648+t23649-t23685-t23686;
                double t23655 = c*c0*t23522*t23540*t23524*t23533*t23519*t23539*t23579*(2.0/9.0);
                double t23656 = c*c0*t23522*t23540*t23524*t23508*t23590*t23519*t23539*t23589*(4.0/3.0);
                double t23657 = c*c0*t23522*t23540*t23603*t23524*t23533*t23508*t23519*t23539*(2.0/3.0);
                double t23658 = a5*c0*gamma_bb[index]*t23522*t23540*t23533*t23507*t23519*t23539*t23595*(1.4E1/9.0) \
                   ;
                double t23659 = c*c0*t23510*t23512*t23522*t23540*t23514*t23524*t23533*t23581*t23519*t23539*(6.4E1/ \
                   9.0);
                double t23662 = 1.0/c0;
                double t23663 = pow(rho_b[index],1.0/3.0);
                double t23664 = exp(-t23518);
                double t23665 = t23521*t23521;
                double t23666 = t23532*t23532;
                double t23668 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]);
                double t23687 = c*c0*t23510*t23512*t23540*t23514*t23524*t23533*t23544*t23581*t23519*t23539*(6.4E1/ \
                   9.0);
                double t23669 = -t23615+t23655+t23656+t23657+t23658+t23596+t23659+t23597-t23687+t23598+t23599;
                double t23670 = exp(-t23562);
                double t23673 = t23571*t23670*t23566*t23569*1.0E5;
                double t23675 = c*c0*t23508*(2.0/3.0);
                double t23676 = -t23673+t23675;
                double t23677 = 0.0 ;
                double t23678 = a1*t23507*t23535;
                double t23679 = gamma_bb[index]*t23511*t23512*t23509*2.0;
                double t23680 = t23678+t23679;
                double t23681 = 1.0/pow(t23568,3.0/2.0);
                double t23682 = a3*t23515*t23507*t23516*t23571*t23670*t23681*t23566*5.0E4;
                double t23683 = gamma_bb[index]*t23511*t23512*t23571*t23670*t23509*t23566*t23569*2.0E5;
                double t23710 = t23670*t23680*t23566*t23569*1.0E5;
                double t23684 = -t23710+t23682+t23683;
                double t23688 = t23540*t23551*t23539;
                double t23689 = t23553*t23548*t23594;
                double t23691 = t23515*t23551*t23605*t23662*t23663*t23664*t23665*t23666*(3.0/2.0);
                double t23692 = t23540*t23539;
                double t23693 = t23553*t23556*t23548;
                double t23694 = t23692+t23693;
                double t23695 = 1.0/pow(rho_b[index],1.0E1/3.0);
                double t23696 = t23510*t23512*t23604*t23509*(1.6E1/3.0);
                double t23697 = a1*gamma_bb[index]*t23507*t23595*(8.0/3.0);
                double t23698 = t23696+t23697;
                double t23699 = 1.0/(c*c);
                double t23700 = 1.0/pow(t23513,1.0/5.0);
                double t23701 = t23625*t23556*t23548;
                double t23702 = t23701+t23691+t23688+t23689-t23624*t23553*t23556*t23646;
                double t23703 = 1.0/pow(rho_b[index],5.0/3.0);
                double t23704 = t23703*t23572*t23577*(2.0/3.0);
                double t23705 = 1.0/(t23576*t23576*t23576);
                double t23706 = c*k2*t23579*(1.0/3.0);
                double t23707 = c*k1*t23585*t23579*(1.0/6.0);
                double t23708 = t23706+t23707;
                double t23709 = t23704-t23705*t23572*t23573*t23708*2.0;
                double t23711 = c*c0*t23579*(2.0/9.0);
                double t23712 = t23510*t23512*t23604*t23571*t23670*t23509*t23566*t23569*(1.6E6/3.0);
                double t23713 = a3*gamma_bb[index]*t23515*t23507*t23571*t23670*t23681*t23566*t23695*(3.5E5/3.0);
                double t23714 = t23711+t23712+t23713-t23670*t23566*t23569*t23698*1.0E5-c*kab1*rab1*t23700*t23571* \
                   t23670*t23564*t23569*t23579*(8.0E4/3.0);
                v_rho_b_gamma_bb_[index] = ( (c*c0*t23508*(-2.0/3.0)+t23571*t23566*t23569*exp(-t23510*t23511*t23512* \
                   t23509)*1.0E5 > 0.0) ?  c0*t23578*1.0*(t23691+t23688+t23689+t23556*t23548*(t23600+t23601+t23602+t23550+ \
                   t23549-c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23544*t23519*t23538*(8.0/3.0)-c*c0*gamma_bb[index]* \
                   t23512*t23540*t23514*t23524*t23533*t23544*t23519*t23538*t23539*(8.0/3.0))-t23624*t23553*t23556*t23646) \
                   *(1.0/2.0) : 0.0 ) -c0*t23684*t23694*t23578*t23677*(1.0/2.0)- ( (t23673-c*c0*t23508*(2.0/3.0) > 0.0) \
                    ? c0*rho_b[index]*t23578*1.0*(t23553*t23548*(t23541*t23560*t23632*2.0-t23541*t23623*t23633*t23559- \
                   gamma_bb[index]*t23512*t23522*t23514*t23604*t23543*(1.28E2/3.0)+a5*c0*t23522*t23533*t23507*t23519* \
                   t23595*(6.4E1/9.0)-gamma_bb[index]*t23511*t23512*t23522*t23514*t23560*t23623*4.0+gamma_bb[index]*t23510* \
                   t23543*t23544*t23634*t23582*t23584*(2.56E2/3.0)-t23510*t23512*t23522*t23514*t23604*t23560*t23559*(3.2E1/ \
                   3.0)+a5*c0*t23522*t23507*t23535*t23590*t23519*t23589*(1.6E1/3.0)+c*c0*gamma_bb[index]*t23512*t23522* \
                   t23514*t23524*t23533*t23581*t23519*(5.44E2/9.0)-c*c0*gamma_bb[index]*t23512*t23514*t23524*t23533*t23544* \
                   t23581*t23519*(5.44E2/9.0)+a5*c0*t23510*t23512*t23522*t23514*t23533*t23507*t23580*t23519*(1.6E2/3.0) \
                   -a5*c0*t23510*t23512*t23514*t23533*t23507*t23544*t23580*t23519*(1.6E2/3.0)+c*c0*gamma_bb[index]*t23510* \
                   t23611*t23524*t23533*t23519*t23582*t23583*t23584*(5.12E2/3.0)+c*c0*gamma_bb[index]*t23510*t23522*t23524* \
                   t23533*t23519*t23582*t23583*t23584*(1.024E3/9.0)-c*c0*gamma_bb[index]*t23510*t23524*t23533*t23544* \
                   t23519*t23582*t23583*t23584*(2.048E3/9.0)+c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23590* \
                   t23519*t23538*t23589*(6.4E1/3.0)-c*c0*gamma_bb[index]*t23512*t23514*t23524*t23544*t23590*t23519*t23538* \
                   t23589*(6.4E1/3.0))+t23540*t23614*t23539+t23625*t23652*t23548+t23548*t23594*t23669+t23556*t23548*(t23610+ \
                   t23612+t23613+t23606+t23607-t23616+t23608-t23617+t23609-t23618-t23667+t23603*t23551+(t23551*(1.0/3.0) \
                   )/rho_b[index]+(t23551*t23589*2.0)/t23532+t23510*t23512*t23514*t23604*t23551*(3.2E1/3.0)-t23510*t23512* \
                   t23514*t23541*t23604*t23551*(3.2E1/3.0)+a5*gamma_bb[index]*t23515*t23551*t23605*t23507*t23695*(7.0/ \
                   3.0)+a5*c0*t23522*t23540*t23533*t23507*t23519*t23539*t23595*(1.6E1/9.0)+a5*c0*t23522*t23540*t23603* \
                   t23533*t23507*t23535*t23519*t23539*(2.0/3.0)+a5*c0*t23522*t23540*t23507*t23535*t23590*t23519*t23539* \
                   t23589*(4.0/3.0)+c*c0*t23522*t23540*t23524*t23533*t23614*t23508*t23519*t23539*(2.0/3.0)+c*c0*t23522* \
                   t23540*t23524*t23533*t23551*t23519*t23539*t23579*(2.0/9.0)+a5*c0*gamma_bb[index]*t23522*t23540*t23533* \
                   t23551*t23507*t23519*t23539*t23595*(1.4E1/9.0)+c*c0*t23522*t23540*t23603*t23524*t23533*t23551*t23508* \
                   t23519*t23539*(2.0/3.0)+c*c0*t23522*t23540*t23524*t23551*t23508*t23590*t23519*t23539*t23589*(4.0/3.0) \
                   +c*c0*gamma_bb[index]*t23512*t23522*t23540*t23514*t23524*t23533*t23581*t23519*t23539*(1.36E2/9.0)- \
                   c*c0*gamma_bb[index]*t23512*t23540*t23514*t23524*t23533*t23544*t23581*t23519*t23539*(1.36E2/9.0)+a5* \
                   c0*t23510*t23512*t23522*t23540*t23514*t23533*t23507*t23580*t23519*t23539*(4.0E1/3.0)-a5*c0*t23510* \
                   t23512*t23540*t23514*t23533*t23507*t23544*t23580*t23519*t23539*(4.0E1/3.0)+c*c0*gamma_bb[index]*t23512* \
                   t23522*t23540*t23603*t23514*t23524*t23533*t23519*t23538*t23539*(8.0/3.0)-c*c0*gamma_bb[index]*t23512* \
                   t23540*t23603*t23514*t23524*t23533*t23544*t23519*t23538*t23539*(8.0/3.0)+c*c0*gamma_bb[index]*t23510* \
                   t23611*t23540*t23524*t23533*t23519*t23582*t23583*t23539*t23584*(1.28E2/3.0)+c*c0*gamma_bb[index]*t23510* \
                   t23522*t23540*t23524*t23533*t23519*t23582*t23583*t23539*t23584*(2.56E2/9.0)-c*c0*gamma_bb[index]*t23510* \
                   t23540*t23524*t23533*t23544*t23519*t23582*t23583*t23539*t23584*(5.12E2/9.0)+c*c0*gamma_bb[index]*t23512* \
                   t23522*t23540*t23514*t23524*t23590*t23519*t23538*t23539*t23589*(1.6E1/3.0)-c*c0*gamma_bb[index]*t23512* \
                   t23540*t23514*t23524*t23544*t23590*t23519*t23538*t23539*t23589*(1.6E1/3.0)+c*c0*t23510*t23512*t23522* \
                   t23540*t23514*t23524*t23533*t23551*t23581*t23519*t23539*(6.4E1/9.0)-c*c0*t23510*t23512*t23540*t23514* \
                   t23524*t23533*t23551*t23544*t23581*t23519*t23539*(6.4E1/9.0))+t23540*t23603*t23551*t23539-t23624*t23642* \
                   t23625*t23556-t23624*t23553*t23652*t23646-t23624*t23642*t23553*t23594-t23624*t23556*t23646*t23669- \
                   t23624*t23553*t23556*(t23541*t23560*t23632*3.0-t23541*t23623*t23633*t23559*(3.0/2.0)-gamma_bb[index]* \
                   t23512*t23522*t23514*t23604*t23543*6.4E1+a5*c0*t23522*t23533*t23507*t23519*t23595*(3.2E1/3.0)-gamma_bb[index]* \
                   t23511*t23512*t23522*t23514*t23560*t23623*6.0+gamma_bb[index]*t23510*t23543*t23544*t23634*t23582*t23584* \
                   1.28E2-t23510*t23512*t23522*t23514*t23604*t23560*t23559*1.6E1+a5*c0*t23522*t23507*t23535*t23590*t23519* \
                   t23589*8.0+c*c0*gamma_bb[index]*t23512*t23522*t23514*t23524*t23533*t23581*t23519*(2.72E2/3.0)-c*c0* \
                   gamma_bb[index]*t23512*t23514*t23524*t23533*t23544*t23581*t23519*(2.72E2/3.0)+a5*c0*t23510*t23512* \
                   t23522*t23514*t23533*t23507*t23580*t23519*8.0E1-a5*c0*t23510*t23512*t23514*t23533*t23507*t23544*t23580* \
                   t23519*8.0E1+c*c0*gamma_bb[index]*t23510*t23611*t23524*t23533*t23519*t23582*t23583*t23584*2.56E2+c* \
                   c0*gamma_bb[index]*t23510*t23522*t23524*t23533*t23519*t23582*t23583*t23584*(5.12E2/3.0)-c*c0*gamma_bb[index]* \
                   t23510*t23524*t23533*t23544*t23519*t23582*t23583*t23584*(1.024E3/3.0)+c*c0*gamma_bb[index]*t23512* \
                   t23522*t23514*t23524*t23590*t23519*t23538*t23589*3.2E1-c*c0*gamma_bb[index]*t23512*t23514*t23524*t23544* \
                   t23590*t23519*t23538*t23589*3.2E1)+t23642*t23553*1.0/(t23547*t23547*t23547)*t23556*t23646*2.0+t23515* \
                   t23605*t23614*t23662*t23663*t23664*t23665*t23666*(3.0/2.0)+t23603*t23515*t23551*t23605*t23662*t23663* \
                   t23664*t23665*t23666*(3.0/2.0)-a5*1.0/(rho_b[index]*rho_b[index])*t23603*1.0/(t23524*t23524)*t23507* \
                   t23662*t23664*t23665*t23666*t23699*(3.0/2.0)+gamma_bb[index]*t23512*t23521*t23603*t23514*t23515*t23605* \
                   t23662*t23664*t23666*t23668*6.0-gamma_bb[index]*t23512*t23603*t23514*t23515*t23605*t23662*t23664*t23665* \
                   t23666*t23668*6.0)*(1.0/2.0) : 0.0 ) +c0*rho_b[index]*t23702*t23714*t23578*t23677*(1.0/2.0)+c0*rho_b[index]* \
                   t23694*t23578*t23677*(t23670*t23566*t23569*(a1*t23507*t23595*(8.0/3.0)+gamma_bb[index]*t23512*t23604* \
                   t23509*(3.2E1/3.0))*-1.0E5+t23510*t23512*t23604*t23670*t23509*t23680*t23566*t23569*(1.6E6/3.0)+a3* \
                   t23515*t23507*t23571*t23670*t23681*t23566*t23695*(3.5E5/3.0)+a3*t23515*t23507*t23516*t23670*t23681* \
                   t23566*t23698*5.0E4+gamma_bb[index]*t23512*t23604*t23571*t23670*t23509*t23566*t23569*(3.2E6/3.0)+gamma_bb[index]* \
                   t23511*t23512*t23670*t23509*t23566*t23569*t23698*2.0E5-(a3*a3)*gamma_bb[index]*t23512*t23571*t23670* \
                   t23538*t23566*1.0/pow(t23568,5.0/2.0)*t23699*1.75E5+a3*gamma_bb[index]*t23515*t23507*t23670*t23680* \
                   t23681*t23566*t23695*(3.5E5/3.0)-c*kab1*rab1*t23700*t23670*t23680*t23564*t23569*t23579*(8.0E4/3.0) \
                   -gamma_bb[index]*t23510*t23571*t23634*t23670*(t23509*t23509)*t23566*t23584*t23569*(3.2E6/3.0)+a3*kab1* \
                   rab1*t23700*t23507*t23571*t23670*t23564*t23681*t23595*(4.0E4/3.0)-a3*1.0/pow(rho_b[index],2.6E1/3.0) \
                   *t23510*t23512*t23515*t23507*t23571*t23670*t23509*t23681*t23566*5.0E5+c*gamma_bb[index]*kab1*rab1* \
                   t23700*t23512*t23571*t23670*t23509*t23581*t23564*t23569*(1.6E5/3.0))*(1.0/2.0)+c0*rho_b[index]*t23684* \
                   t23578*t23677*(t23540*t23603*t23539+t23553*t23652*t23548+t23556*t23548*t23669-t23624*t23642*t23553* \
                   t23556+t23603*t23515*t23605*t23662*t23663*t23664*t23665*t23666*(3.0/2.0))*(1.0/2.0)+ ( (t23673-t23675  \
                   > 0.0) ? c0*rho_b[index]*t23702*t23709*t23578*1.0*(1.0/2.0) : 0.0 ) -c0*rho_b[index]*t23709*t23684* \
                   t23694*t23578*t23677*(1.0/2.0)+ 0.0 ;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t22639 = tspi_m13*tspi_m13;
                double t22640 = 1.0/pow(rho_a[index],1.0/3.0);
                double t22641 = a2*a2;
                double t22642 = gamma_aa[index]*gamma_aa[index];
                double t22643 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t22644 = t22639*t22639;
                double t22645 = c*t22640;
                double t22646 = pow(t22645,4.0/5.0);
                double t22660 = rab1*t22646;
                double t22647 = exp(-t22660);
                double t22648 = t22647-1.0;
                double t22661 = kab1*t22648;
                double t22649 = kab0-t22661;
                double t22650 = 1.0/c;
                double t22651 = 1.0/pow(rho_a[index],7.0/3.0);
                double t22652 = a3*gamma_aa[index]*t22650*t22651*t22639;
                double t22653 = t22652+1.0;
                double t22654 = t22641*t22642*t22643*t22644;
                double t22655 = 1.0/pow(rho_a[index],8.0/3.0);
                double t22656 = a1*gamma_aa[index]*t22655*t22639;
                double t22657 = t22654+t22656+1.0;
                double t22658 = t22641*t22642*t22643*t22644*2.0;
                double t22659 = exp(t22658);
                double t22662 = 1.0/(t22649*t22649);
                double t22663 = 1.0/(t22657*t22657);
                double t22664 = c*c0*t22640*t22653*t22662*t22663*t22659*(2.0/3.0);
                double t22665 = a1*t22655*t22639;
                double t22666 = gamma_aa[index]*t22641*t22643*t22644*2.0;
                double t22667 = t22665+t22666;
                double t22668 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t22669 = 1.0/(t22657*t22657*t22657);
                double t22670 = sqrt(t22664);
                double t22672 = a3*c0*t22662*t22663*t22655*t22639*t22659*(2.0/3.0);
                double t22673 = c*c0*t22640*t22653*t22662*t22667*t22659*t22669*(4.0/3.0);
                double t22674 = c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22663*t22659*t22668*(8.0/3.0);
                double t22671 = t22672-t22673+t22674;
                double t22675 = t22667*t22667;
                double t22676 = 1.0/(t22657*t22657*t22657*t22657);
                double t22677 = c*c0*t22640*t22653*t22662*t22675*t22676*t22659*4.0;
                double t22678 = c*c0*t22641*t22644*t22653*t22662*t22663*t22659*t22668*(8.0/3.0);
                double t22679 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t22680 = a3*c0*gamma_aa[index]*t22641*t22644*t22662*t22663*t22639*t22659*t22679*(1.6E1/3.0) \
                   ;
                double t22681 = exp(t22664);
                double t22682 = Ei(-t22664);
                double t22683 = t22641*t22641;
                double t22684 = 1.0/pow(rho_a[index],1.1E1);
                double t22685 = t22644*t22644;
                double t22686 = c*c0*t22642*t22653*t22662*t22663*t22683*t22684*t22685*t22659*(3.2E1/3.0);
                double t22689 = c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22667*t22659*t22668*t22669*(3.2E1/ \
                   3.0);
                double t22694 = a3*c0*t22662*t22655*t22639*t22667*t22659*t22669*(8.0/3.0);
                double t22695 = c*c0*t22641*t22644*t22653*t22662*t22659*t22668*t22669*(8.0/3.0);
                double t22687 = t22680-t22694+t22677+t22686-t22695+t22678-t22689;
                double t22688 = t22671*t22671;
                double t22690 = t22670*6.0;
                double t22691 = c*c0*t22640*t22653*t22662*t22663*t22659*4.0;
                double t22692 = t22690+t22691+3.0;
                double t22693 = 1.0/t22692;
                double t22696 = 1.0/sqrt(t22664);
                double t22697 = c*c0*t22640*t22653*t22662*t22663*t22681*t22682*t22659*(2.0/3.0);
                double t22698 = t22697+1.0;
                double t22699 = t22671*t22696*2.0;
                double t22700 = a3*c0*t22662*t22663*t22655*t22639*t22659*(8.0/3.0);
                double t22701 = c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22663*t22659*t22668*(3.2E1/3.0) \
                   ;
                double t22738 = c*c0*t22640*t22653*t22662*t22667*t22659*t22669*(1.6E1/3.0);
                double t22702 = t22700+t22701-t22738+t22699;
                double t22703 = 1.0/(t22692*t22692);
                double t22704 = t22670*4.0;
                double t22705 = c*c0*t22640*t22653*t22662*t22663*t22659*(8.0/3.0);
                double t22706 = t22704+t22705+6.0;
                double t22707 = 1.0/pow(t22664,3.0/2.0);
                double t22708 = t22671*t22696*3.0;
                double t22709 = a3*c0*t22662*t22663*t22655*t22639*t22659*4.0;
                double t22710 = c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22663*t22659*t22668*1.6E1;
                double t22712 = c*c0*t22640*t22653*t22662*t22667*t22659*t22669*8.0;
                double t22711 = t22710-t22712+t22708+t22709;
                double t22713 = a3*c0*t22662*t22663*t22681*t22655*t22682*t22639*t22659*(2.0/3.0);
                double t22714 = c*c0*t22640*t22653*t22662*t22671*t22663*t22681*t22682*t22659*(2.0/3.0);
                double t22715 = c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22663*t22681*t22682*t22659*t22668* \
                   (8.0/3.0);
                double t22739 = c*c0*t22640*t22653*t22662*t22681*t22682*t22667*t22659*t22669*(4.0/3.0);
                double t22716 = t22713+t22714+t22715+t22672-t22673+t22674-t22739;
                double t22717 = 1.0/t22653;
                double t22718 = 1.0/c0;
                double t22719 = pow(rho_a[index],1.0/3.0);
                double t22720 = exp(-t22658);
                double t22721 = t22649*t22649;
                double t22722 = t22657*t22657;
                double t22723 = 1.0/sqrt(t22653);
                double t22724 = exp(-t22654);
                double t22731 = 1.0/pow(t22653,3.0/2.0);
                double t22735 = t22723*t22724*t22649*t22667*1.0E5;
                double t22736 = a3*t22650*t22731*t22651*t22724*t22639*t22657*t22649*5.0E4;
                double t22737 = gamma_aa[index]*t22641*t22723*t22643*t22724*t22644*t22657*t22649*2.0E5;
                double t22725 = -t22735+t22736+t22737;
                double t22726 = c*c0*t22640*(2.0/3.0);
                double t22733 = t22723*t22724*t22657*t22649*1.0E5;
                double t22727 = -t22733+t22726;
                double t22728 = t22681*t22682;
                double t22729 = t22706*t22693*t22698;
                double t22730 = t22728+t22729;
                double t22732 = 1.0/(c*c);
                double t22734 = 0.0 ;
                double t22740 = a4*a4;
                double t22741 = t22740*t22642*t22643*t22644*2.0;
                double t22742 = exp(t22741);
                double t22743 = sqrt(t22645);
                double t22744 = t22740*t22642*t22643*t22644;
                double t22745 = t22744+1.0;
                double t22746 = 1.0/(t22745*t22745);
                double t22747 = a5*gamma_aa[index]*t22650*t22651*t22639;
                double t22748 = t22747+1.0;
                double t22759 = raa2*t22743;
                double t22749 = exp(-t22759);
                double t22750 = t22749-1.0;
                double t22751 = kaa2*t22750;
                double t22752 = pow(t22645,2.0/5.0);
                double t22760 = raa1*t22752;
                double t22753 = exp(-t22760);
                double t22754 = t22753-1.0;
                double t22755 = kaa1*t22754;
                double t22756 = -kaa0+t22751+t22755;
                double t22757 = 1.0/(t22756*t22756);
                double t22758 = c*c0*t22640*t22742*t22746*t22748*t22757*(2.0/3.0);
                double t22761 = 1.0/t22745;
                double t22762 = c*c0*t22640*t22742*t22748*t22757*(2.0/3.0);
                double t22767 = a5*c0*t22742*t22655*t22639*t22757*(2.0/3.0);
                double t22768 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22748*t22757*t22668*(8.0/3.0);
                double t22763 = t22767+t22768;
                double t22764 = sqrt(t22762);
                double t22765 = t22740*t22740;
                double t22766 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t22769 = 1.0/sqrt(t22762);
                double t22770 = 1.0/(t22745*t22745*t22745);
                double t22771 = t22761*t22764*6.0;
                double t22772 = c*c0*t22640*t22742*t22746*t22748*t22757*4.0;
                double t22773 = t22771+t22772+3.0;
                double t22774 = 1.0/t22773;
                double t22776 = a5*c0*t22742*t22655*t22746*t22639*t22757*(2.0/3.0);
                double t22777 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22746*t22748*t22757*t22668*(8.0/3.0);
                double t22778 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22748*t22757*t22668*(8.0/3.0);
                double t22775 = t22776+t22777-t22778;
                double t22779 = exp(t22758);
                double t22780 = Ei(-t22758);
                double t22781 = t22775*t22775;
                double t22782 = 1.0/(t22745*t22745*t22745*t22745);
                double t22783 = a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22746*t22639*t22757*t22679*(1.6E1/3.0) \
                   ;
                double t22784 = c*c0*t22740*t22742*t22644*t22746*t22748*t22757*t22668*(8.0/3.0);
                double t22785 = c*c0*t22642*t22742*t22746*t22684*t22765*t22685*t22748*t22757*(3.2E1/3.0);
                double t22786 = c*c0*t22642*t22742*t22782*t22684*t22765*t22685*t22748*t22757*1.6E1;
                double t22818 = a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22639*t22757*t22679*(1.6E1/3.0) \
                   ;
                double t22819 = c*c0*t22740*t22742*t22644*t22770*t22748*t22757*t22668*(8.0/3.0);
                double t22820 = c*c0*t22642*t22742*t22770*t22684*t22765*t22685*t22748*t22757*(6.4E1/3.0);
                double t22787 = -t22820-t22818+t22783-t22819+t22784+t22785+t22786;
                double t22788 = t22761*t22764*4.0;
                double t22789 = c*c0*t22640*t22742*t22746*t22748*t22757*(8.0/3.0);
                double t22790 = t22788+t22789+6.0;
                double t22791 = a5*c0*t22742*t22780*t22655*t22746*t22639*t22757*t22779*(2.0/3.0);
                double t22792 = c*c0*t22640*t22742*t22780*t22746*t22748*t22757*t22775*t22779*(2.0/3.0);
                double t22793 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22780*t22746*t22748*t22757*t22668*t22779* \
                   (8.0/3.0);
                double t22835 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22780*t22748*t22757*t22668*t22779* \
                   (8.0/3.0);
                double t22794 = -t22835+t22791+t22792+t22793+t22776+t22777-t22778;
                double t22795 = c*c0*t22640*t22742*t22780*t22746*t22748*t22757*t22779*(2.0/3.0);
                double t22796 = t22795+1.0;
                double t22797 = t22761*t22763*t22769*3.0;
                double t22798 = a5*c0*t22742*t22655*t22746*t22639*t22757*4.0;
                double t22799 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22746*t22748*t22757*t22668*1.6E1;
                double t22802 = gamma_aa[index]*t22740*t22643*t22644*t22746*t22764*1.2E1;
                double t22803 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22748*t22757*t22668*1.6E1;
                double t22800 = -t22802-t22803+t22797+t22798+t22799;
                double t22801 = 1.0/(t22773*t22773);
                double t22804 = t22761*t22763*t22769*2.0;
                double t22805 = a5*c0*t22742*t22655*t22746*t22639*t22757*(8.0/3.0);
                double t22806 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22746*t22748*t22757*t22668*(3.2E1/3.0) \
                   ;
                double t22833 = gamma_aa[index]*t22740*t22643*t22644*t22746*t22764*8.0;
                double t22834 = c*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22748*t22757*t22668*(3.2E1/3.0) \
                   ;
                double t22807 = t22804+t22805+t22806-t22833-t22834;
                double t22808 = a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22639*t22757*t22679*(1.6E1/3.0);
                double t22809 = c*c0*t22740*t22742*t22644*t22748*t22757*t22668*(8.0/3.0);
                double t22810 = c*c0*t22642*t22742*t22684*t22765*t22685*t22748*t22757*(3.2E1/3.0);
                double t22811 = t22810+t22808+t22809;
                double t22812 = t22763*t22763;
                double t22813 = 1.0/pow(t22762,3.0/2.0);
                double t22814 = 1.0/t22748;
                double t22815 = exp(-t22741);
                double t22816 = t22745*t22745;
                double t22817 = t22756*t22756;
                double t22821 = 1.0/(rho_a[index]*rho_a[index]);
                double t22822 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t22823 = c*c;
                double t22824 = 1.0/pow(rho_a[index],2.0/3.0);
                double t22825 = k1*t22743;
                double t22826 = c*k2*t22640;
                double t22827 = t22825+t22826;
                double t22828 = 1.0/(t22827*t22827);
                double t22832 = t22823*t22824*t22828;
                double t22829 = exp(-t22832);
                double t22830 = 0.0 ;
                double t22831 = t22725*t22725;
                double t22836 = t22780*t22779;
                double t22837 = t22790*t22774*t22796;
                double t22838 = t22836+t22837;
                double t22839 = t22641*t22723*t22643*t22724*t22644*t22649*2.0E5;
                double t22840 = a3*a3;
                double t22841 = 1.0/pow(rho_a[index],1.4E1/3.0);
                double t22842 = 1.0/pow(t22653,5.0/2.0);
                double t22843 = t22732*t22840*t22724*t22841*t22644*t22842*t22657*t22649*7.5E4;
                double t22844 = t22642*t22723*t22724*t22683*t22657*t22649*t22685*t22766*4.0E5;
                double t22845 = 1.0/pow(rho_a[index],2.3E1/3.0);
                double t22846 = a3*gamma_aa[index]*t22641*t22650*t22731*t22724*t22644*t22845*t22639*t22657*t22649* \
                   2.0E5;
                double t22847 = t22843+t22844+t22846+t22839-t22641*t22723*t22643*t22724*t22644*t22657*t22649*2.0E5- \
                   a3*t22650*t22731*t22651*t22724*t22639*t22649*t22667*1.0E5-gamma_aa[index]*t22641*t22723*t22643*t22724* \
                   t22644*t22649*t22667*4.0E5;
                v_gamma_aa_gamma_aa_[index] = rho_b[index]*( ( (c*c0*t22640*(-2.0/3.0)+t22723*t22657*t22649*exp(- \
                   t22641*t22642*t22643*t22644)*1.0E5 > 0.0) ? c0*1.0*(t22693*t22698*(-t22707*t22688+t22687*t22696*2.0- \
                   a3*c0*t22662*t22655*t22639*t22667*t22659*t22669*(3.2E1/3.0)+c*c0*t22640*t22653*t22662*t22675*t22676* \
                   t22659*1.6E1+c*c0*t22641*t22644*t22653*t22662*t22663*t22659*t22668*(3.2E1/3.0)-c*c0*t22641*t22644* \
                   t22653*t22662*t22659*t22668*t22669*(3.2E1/3.0)+a3*c0*gamma_aa[index]*t22641*t22644*t22662*t22663*t22639* \
                   t22659*t22679*(6.4E1/3.0)+c*c0*t22642*t22653*t22662*t22663*t22683*t22684*t22685*t22659*(1.28E2/3.0) \
                   -c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22667*t22659*t22668*t22669*(1.28E2/3.0))+t22706* \
                   t22693*(t22680+t22677+t22686+t22678+t22688-t22689-(t22671*t22667*2.0)/t22657+gamma_aa[index]*t22641* \
                   t22643*t22644*t22671*4.0+a3*t22650*t22651*t22671*t22717*t22639-a3*c0*t22662*t22655*t22639*t22667*t22659* \
                   t22669*(8.0/3.0)-c*c0*t22641*t22644*t22653*t22662*t22659*t22668*t22669*(8.0/3.0)+a3*c0*t22662*t22671* \
                   t22663*t22681*t22655*t22682*t22639*t22659*(4.0/3.0)-a3*c0*t22662*t22681*t22655*t22682*t22639*t22667* \
                   t22659*t22669*(8.0/3.0)+c*c0*t22640*t22653*t22662*t22663*t22681*t22682*t22659*t22687*(2.0/3.0)+c*c0* \
                   t22640*t22653*t22662*t22663*t22681*t22682*t22659*t22688*(2.0/3.0)+c*c0*t22640*t22653*t22662*t22681* \
                   t22682*t22675*t22676*t22659*4.0+c*c0*t22641*t22644*t22653*t22662*t22663*t22681*t22682*t22659*t22668* \
                   (8.0/3.0)-c*c0*t22640*t22653*t22662*t22671*t22681*t22682*t22667*t22659*t22669*(8.0/3.0)-c*c0*t22641* \
                   t22644*t22653*t22662*t22681*t22682*t22659*t22668*t22669*(8.0/3.0)+a3*c0*gamma_aa[index]*t22641*t22644* \
                   t22662*t22663*t22681*t22682*t22639*t22659*t22679*(1.6E1/3.0)+c*c0*t22642*t22653*t22662*t22663*t22681* \
                   t22682*t22683*t22684*t22685*t22659*(3.2E1/3.0)+c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22671* \
                   t22663*t22681*t22682*t22659*t22668*(1.6E1/3.0)-c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22681* \
                   t22682*t22667*t22659*t22668*t22669*(3.2E1/3.0))+t22702*t22716*t22693*2.0+t22681*t22682*t22687+t22681* \
                   t22682*t22688-t22711*t22703*t22706*t22716*2.0-t22702*t22711*t22703*t22698*2.0-t22703*t22706*t22698* \
                   (t22707*t22688*(-3.0/2.0)+t22687*t22696*3.0-a3*c0*t22662*t22655*t22639*t22667*t22659*t22669*1.6E1+ \
                   c*c0*t22640*t22653*t22662*t22675*t22676*t22659*2.4E1+c*c0*t22641*t22644*t22653*t22662*t22663*t22659* \
                   t22668*1.6E1-c*c0*t22641*t22644*t22653*t22662*t22659*t22668*t22669*1.6E1+a3*c0*gamma_aa[index]*t22641* \
                   t22644*t22662*t22663*t22639*t22659*t22679*3.2E1+c*c0*t22642*t22653*t22662*t22663*t22683*t22684*t22685* \
                   t22659*6.4E1-c*c0*gamma_aa[index]*t22641*t22644*t22653*t22662*t22667*t22659*t22668*t22669*6.4E1)+(t22711* \
                   t22711)*t22706*1.0/(t22692*t22692*t22692)*t22698*2.0+t22720*t22721*t22650*t22722*t22717*t22718*t22719* \
                   t22687*(3.0/2.0)+t22720*t22721*t22650*t22722*t22717*t22718*t22719*t22688*(3.0/2.0)+t22720*t22721*t22650* \
                   t22671*t22717*t22718*t22719*t22657*t22667*3.0-a3*t22720*t22721*t22722*t22821*t22732*1.0/(t22653*t22653) \
                   *t22671*t22718*t22639*(3.0/2.0)-gamma_aa[index]*t22720*t22721*t22641*t22650*t22722*t22822*t22644*t22671* \
                   t22717*t22718*6.0)*(1.0/2.0) : 0.0 ) -c0*t22730*t22830*t22831*(1.0/2.0)+c0*t22730*t22734*t22847*(1.0/ \
                   2.0)-c0*t22725*t22734*(t22706*t22716*t22693+t22671*t22681*t22682+t22702*t22693*t22698-t22711*t22703* \
                   t22706*t22698+t22720*t22721*t22650*t22722*t22671*t22717*t22718*t22719*(3.0/2.0)))+rho_a[index]*( (  \
                   (t22733-t22726 > 0.0) ? c0*t22829*1.0*(t22790*t22774*(t22781+t22783+t22784+t22785+t22786+gamma_aa[index]* \
                   t22740*t22643*t22644*t22775*4.0+a5*t22650*t22651*t22814*t22639*t22775-gamma_aa[index]*t22740*t22643* \
                   t22644*t22761*t22775*4.0-c*c0*t22740*t22742*t22644*t22770*t22748*t22757*t22668*(8.0/3.0)-a5*c0*gamma_aa[index]* \
                   t22740*t22742*t22644*t22770*t22639*t22757*t22679*(1.6E1/3.0)+a5*c0*t22742*t22780*t22655*t22746*t22639* \
                   t22757*t22775*t22779*(4.0/3.0)+c*c0*t22640*t22742*t22780*t22781*t22746*t22748*t22757*t22779*(2.0/3.0) \
                   -c*c0*t22642*t22742*t22770*t22684*t22765*t22685*t22748*t22757*(6.4E1/3.0)+c*c0*t22640*t22742*t22780* \
                   t22746*t22748*t22757*t22787*t22779*(2.0/3.0)-c*c0*t22740*t22742*t22644*t22770*t22780*t22748*t22757* \
                   t22668*t22779*(8.0/3.0)+c*c0*t22740*t22742*t22644*t22780*t22746*t22748*t22757*t22668*t22779*(8.0/3.0) \
                   -a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22780*t22639*t22757*t22679*t22779*(1.6E1/3.0)+ \
                   a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22780*t22746*t22639*t22757*t22679*t22779*(1.6E1/3.0)-c* \
                   c0*t22642*t22742*t22770*t22780*t22684*t22765*t22685*t22748*t22757*t22779*(6.4E1/3.0)+c*c0*t22642*t22742* \
                   t22780*t22746*t22684*t22765*t22685*t22748*t22757*t22779*(3.2E1/3.0)+c*c0*t22642*t22742*t22780*t22782* \
                   t22684*t22765*t22685*t22748*t22757*t22779*1.6E1-c*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22780* \
                   t22748*t22757*t22775*t22668*t22779*(1.6E1/3.0)+c*c0*gamma_aa[index]*t22740*t22742*t22644*t22780*t22746* \
                   t22748*t22757*t22775*t22668*t22779*(1.6E1/3.0))+t22807*t22774*t22794*2.0+t22780*t22781*t22779+t22780* \
                   t22787*t22779-t22774*t22796*(t22812*t22813*t22761-t22811*t22761*t22769*2.0+t22740*t22643*t22644*t22746* \
                   t22764*8.0-t22642*t22770*t22764*t22765*t22685*t22766*3.2E1+gamma_aa[index]*t22740*t22643*t22644*t22763* \
                   t22746*t22769*8.0+c*c0*t22740*t22742*t22644*t22770*t22748*t22757*t22668*(3.2E1/3.0)-c*c0*t22740*t22742* \
                   t22644*t22746*t22748*t22757*t22668*(3.2E1/3.0)+a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22639* \
                   t22757*t22679*(6.4E1/3.0)-a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22746*t22639*t22757*t22679*(6.4E1/ \
                   3.0)+c*c0*t22642*t22742*t22770*t22684*t22765*t22685*t22748*t22757*(2.56E2/3.0)-c*c0*t22642*t22742* \
                   t22746*t22684*t22765*t22685*t22748*t22757*(1.28E2/3.0)-c*c0*t22642*t22742*t22782*t22684*t22765*t22685* \
                   t22748*t22757*6.4E1)-t22800*t22801*t22790*t22794*2.0-t22800*t22801*t22807*t22796*2.0+t22801*t22790* \
                   t22796*(t22812*t22813*t22761*(3.0/2.0)-t22811*t22761*t22769*3.0+t22740*t22643*t22644*t22746*t22764* \
                   1.2E1-t22642*t22770*t22764*t22765*t22685*t22766*4.8E1+gamma_aa[index]*t22740*t22643*t22644*t22763* \
                   t22746*t22769*1.2E1+c*c0*t22740*t22742*t22644*t22770*t22748*t22757*t22668*1.6E1-c*c0*t22740*t22742* \
                   t22644*t22746*t22748*t22757*t22668*1.6E1+a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22770*t22639* \
                   t22757*t22679*3.2E1-a5*c0*gamma_aa[index]*t22740*t22742*t22644*t22746*t22639*t22757*t22679*3.2E1+c* \
                   c0*t22642*t22742*t22770*t22684*t22765*t22685*t22748*t22757*1.28E2-c*c0*t22642*t22742*t22746*t22684* \
                   t22765*t22685*t22748*t22757*6.4E1-c*c0*t22642*t22742*t22782*t22684*t22765*t22685*t22748*t22757*9.6E1) \
                   +(t22800*t22800)*t22790*1.0/(t22773*t22773*t22773)*t22796*2.0+t22650*t22814*t22815*t22816*t22718*t22781* \
                   t22817*t22719*(3.0/2.0)+t22650*t22814*t22815*t22816*t22718*t22817*t22719*t22787*(3.0/2.0)-a5*t22821* \
                   t22732*t22815*t22816*t22718*t22817*t22639*1.0/(t22748*t22748)*t22775*(3.0/2.0)-gamma_aa[index]*t22650* \
                   t22740*t22822*t22814*t22644*t22815*t22816*t22718*t22817*t22775*6.0+gamma_aa[index]*t22650*t22740*t22822* \
                   t22814*t22644*t22815*t22718*t22745*t22817*t22775*6.0)*(1.0/2.0) : 0.0 ) -c0*t22830*t22831*t22829*t22838* \
                   (1.0/2.0)+c0*t22734*t22829*t22838*t22847*(1.0/2.0)-c0*t22725*t22734*t22829*(t22790*t22774*t22794+t22807* \
                   t22774*t22796+t22780*t22775*t22779-t22800*t22801*t22790*t22796+t22650*t22814*t22815*t22816*t22718* \
                   t22817*t22719*t22775*(3.0/2.0)));
            } else if (rho_a[index] > cutoff_) {
                double t24513 = tspi_m13*tspi_m13;
                double t24514 = 1.0/pow(rho_a[index],1.0/3.0);
                double t24515 = a2*a2;
                double t24516 = gamma_aa[index]*gamma_aa[index];
                double t24517 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t24518 = t24513*t24513;
                double t24519 = c*t24514;
                double t24520 = a4*a4;
                double t24521 = t24520*t24516*t24517*t24518*2.0;
                double t24522 = exp(t24521);
                double t24523 = 1.0/c;
                double t24524 = 1.0/pow(rho_a[index],7.0/3.0);
                double t24525 = sqrt(t24519);
                double t24526 = t24520*t24516*t24517*t24518;
                double t24527 = t24526+1.0;
                double t24528 = 1.0/(t24527*t24527);
                double t24529 = a5*gamma_aa[index]*t24513*t24523*t24524;
                double t24530 = t24529+1.0;
                double t24541 = raa2*t24525;
                double t24531 = exp(-t24541);
                double t24532 = t24531-1.0;
                double t24533 = kaa2*t24532;
                double t24534 = pow(t24519,2.0/5.0);
                double t24542 = raa1*t24534;
                double t24535 = exp(-t24542);
                double t24536 = t24535-1.0;
                double t24537 = kaa1*t24536;
                double t24538 = -kaa0+t24533+t24537;
                double t24539 = 1.0/(t24538*t24538);
                double t24540 = c*c0*t24530*t24522*t24514*t24528*t24539*(2.0/3.0);
                double t24543 = 1.0/t24527;
                double t24544 = c*c0*t24530*t24522*t24514*t24539*(2.0/3.0);
                double t24545 = 1.0/pow(rho_a[index],8.0/3.0);
                double t24546 = 1.0/pow(rho_a[index],1.7E1/3.0);
                double t24551 = a5*c0*t24513*t24522*t24545*t24539*(2.0/3.0);
                double t24552 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24546*t24539*(8.0/3.0);
                double t24547 = t24551+t24552;
                double t24548 = sqrt(t24544);
                double t24549 = t24520*t24520;
                double t24550 = t24518*t24518;
                double t24553 = 1.0/sqrt(t24544);
                double t24554 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t24555 = 1.0/(t24527*t24527*t24527);
                double t24556 = 1.0/pow(rho_a[index],1.1E1);
                double t24557 = t24543*t24548*6.0;
                double t24558 = c*c0*t24530*t24522*t24514*t24528*t24539*4.0;
                double t24559 = t24557+t24558+3.0;
                double t24560 = 1.0/t24559;
                double t24562 = a5*c0*t24513*t24522*t24545*t24528*t24539*(2.0/3.0);
                double t24563 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24528*t24546*t24539*(8.0/3.0);
                double t24564 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24546*t24555*t24539*(8.0/3.0);
                double t24561 = t24562+t24563-t24564;
                double t24565 = exp(t24540);
                double t24566 = Ei(-t24540);
                double t24567 = t24561*t24561;
                double t24568 = 1.0/(t24527*t24527*t24527*t24527);
                double t24569 = a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24528*t24539*(1.6E1/3.0) \
                   ;
                double t24570 = c*c0*t24520*t24530*t24522*t24518*t24528*t24546*t24539*(8.0/3.0);
                double t24571 = c*c0*t24530*t24522*t24550*t24516*t24528*t24556*t24539*t24549*(3.2E1/3.0);
                double t24572 = c*c0*t24530*t24522*t24550*t24516*t24556*t24539*t24549*t24568*1.6E1;
                double t24607 = a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24555*t24539*(1.6E1/3.0) \
                   ;
                double t24608 = c*c0*t24520*t24530*t24522*t24518*t24546*t24555*t24539*(8.0/3.0);
                double t24609 = c*c0*t24530*t24522*t24550*t24516*t24555*t24556*t24539*t24549*(6.4E1/3.0);
                double t24573 = t24570+t24571-t24607+t24572-t24608-t24609+t24569;
                double t24574 = t24543*t24548*4.0;
                double t24575 = c*c0*t24530*t24522*t24514*t24528*t24539*(8.0/3.0);
                double t24576 = t24574+t24575+6.0;
                double t24577 = a5*c0*t24513*t24522*t24545*t24528*t24565*t24539*t24566*(2.0/3.0);
                double t24578 = c*c0*t24530*t24522*t24514*t24561*t24528*t24565*t24539*t24566*(2.0/3.0);
                double t24579 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24528*t24546*t24565*t24539*t24566* \
                   (8.0/3.0);
                double t24644 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24546*t24555*t24565*t24539*t24566* \
                   (8.0/3.0);
                double t24580 = t24562+t24563-t24644-t24564+t24577+t24578+t24579;
                double t24581 = c*c0*t24530*t24522*t24514*t24528*t24565*t24539*t24566*(2.0/3.0);
                double t24582 = t24581+1.0;
                double t24583 = t24543*t24553*t24547*3.0;
                double t24584 = a5*c0*t24513*t24522*t24545*t24528*t24539*4.0;
                double t24585 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24528*t24546*t24539*1.6E1;
                double t24588 = gamma_aa[index]*t24520*t24517*t24518*t24528*t24548*1.2E1;
                double t24589 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24546*t24555*t24539*1.6E1;
                double t24586 = t24583+t24584+t24585-t24588-t24589;
                double t24587 = 1.0/(t24559*t24559);
                double t24590 = t24543*t24553*t24547*2.0;
                double t24591 = a5*c0*t24513*t24522*t24545*t24528*t24539*(8.0/3.0);
                double t24592 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24528*t24546*t24539*(3.2E1/3.0) \
                   ;
                double t24642 = gamma_aa[index]*t24520*t24517*t24518*t24528*t24548*8.0;
                double t24643 = c*c0*gamma_aa[index]*t24520*t24530*t24522*t24518*t24546*t24555*t24539*(3.2E1/3.0) \
                   ;
                double t24593 = -t24642-t24643+t24590+t24591+t24592;
                double t24594 = a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24539*(1.6E1/3.0);
                double t24595 = c*c0*t24520*t24530*t24522*t24518*t24546*t24539*(8.0/3.0);
                double t24596 = c*c0*t24530*t24522*t24550*t24516*t24556*t24539*t24549*(3.2E1/3.0);
                double t24597 = t24594+t24595+t24596;
                double t24598 = t24547*t24547;
                double t24599 = 1.0/pow(t24544,3.0/2.0);
                double t24600 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t24601 = 1.0/t24530;
                double t24602 = 1.0/c0;
                double t24603 = pow(rho_a[index],1.0/3.0);
                double t24604 = exp(-t24521);
                double t24605 = t24527*t24527;
                double t24606 = t24538*t24538;
                double t24610 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t24611 = c*c;
                double t24612 = 1.0/pow(rho_a[index],2.0/3.0);
                double t24613 = k1*t24525;
                double t24614 = c*k2*t24514;
                double t24615 = t24613+t24614;
                double t24616 = 1.0/(t24615*t24615);
                double t24634 = t24611*t24612*t24616;
                double t24617 = exp(-t24634);
                double t24618 = t24515*t24516*t24517*t24518;
                double t24619 = pow(t24519,4.0/5.0);
                double t24629 = rab1*t24619;
                double t24620 = exp(-t24629);
                double t24621 = t24620-1.0;
                double t24630 = kab1*t24621;
                double t24622 = kab0-t24630;
                double t24623 = a3*gamma_aa[index]*t24513*t24523*t24524;
                double t24624 = t24623+1.0;
                double t24625 = 1.0/sqrt(t24624);
                double t24626 = a1*gamma_aa[index]*t24513*t24545;
                double t24627 = t24626+t24618+1.0;
                double t24628 = exp(-t24618);
                double t24635 = a1*t24513*t24545;
                double t24636 = gamma_aa[index]*t24515*t24517*t24518*2.0;
                double t24637 = t24635+t24636;
                double t24638 = t24622*t24625*t24628*t24637*1.0E5;
                double t24639 = 1.0/pow(t24624,3.0/2.0);
                double t24640 = a3*t24513*t24523*t24622*t24524*t24627*t24628*t24639*5.0E4;
                double t24641 = gamma_aa[index]*t24622*t24515*t24517*t24625*t24518*t24627*t24628*2.0E5;
                double t24631 = t24640+t24641-t24638;
                double t24632 = c*c0*t24514*(2.0/3.0);
                double t24645 = t24622*t24625*t24627*t24628*1.0E5;
                double t24633 = t24632-t24645;
                double t24646 = 0.0 ;
                double t24647 = t24565*t24566;
                double t24648 = t24560*t24582*t24576;
                double t24649 = t24647+t24648;
                double t24650 = 1.0/(c*c);
                v_gamma_aa_gamma_aa_[index] = ( (c*c0*t24514*(-2.0/3.0)+t24622*t24625*t24627*exp(-t24515*t24516*t24517* \
                   t24518)*1.0E5 > 0.0) ?  c0*rho_a[index]*t24617*1.0*(t24560*t24576*(t24570+t24571+t24572+t24567+t24569+ \
                   gamma_aa[index]*t24520*t24561*t24517*t24518*4.0+a5*t24601*t24513*t24523*t24524*t24561-gamma_aa[index]* \
                   t24520*t24543*t24561*t24517*t24518*4.0-c*c0*t24520*t24530*t24522*t24518*t24546*t24555*t24539*(8.0/ \
                   3.0)-a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24555*t24539*(1.6E1/3.0)+a5*c0*t24513* \
                   t24522*t24561*t24545*t24528*t24565*t24539*t24566*(4.0/3.0)-c*c0*t24530*t24522*t24550*t24516*t24555* \
                   t24556*t24539*t24549*(6.4E1/3.0)+c*c0*t24530*t24522*t24514*t24528*t24573*t24565*t24539*t24566*(2.0/ \
                   3.0)+c*c0*t24530*t24522*t24514*t24528*t24565*t24539*t24566*t24567*(2.0/3.0)+c*c0*t24520*t24530*t24522* \
                   t24518*t24528*t24546*t24565*t24539*t24566*(8.0/3.0)-c*c0*t24520*t24530*t24522*t24518*t24546*t24555* \
                   t24565*t24539*t24566*(8.0/3.0)+a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24528*t24565* \
                   t24539*t24566*(1.6E1/3.0)-a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24555*t24565*t24539* \
                   t24566*(1.6E1/3.0)+c*c0*t24530*t24522*t24550*t24516*t24528*t24556*t24565*t24539*t24566*t24549*(3.2E1/ \
                   3.0)-c*c0*t24530*t24522*t24550*t24516*t24555*t24556*t24565*t24539*t24566*t24549*(6.4E1/3.0)+c*c0*t24530* \
                   t24522*t24550*t24516*t24556*t24565*t24539*t24566*t24549*t24568*1.6E1+c*c0*gamma_aa[index]*t24520*t24530* \
                   t24522*t24561*t24518*t24528*t24546*t24565*t24539*t24566*(1.6E1/3.0)-c*c0*gamma_aa[index]*t24520*t24530* \
                   t24522*t24561*t24518*t24546*t24555*t24565*t24539*t24566*(1.6E1/3.0))+t24560*t24580*t24593*2.0+t24573* \
                   t24565*t24566+t24565*t24566*t24567+t24560*t24582*(t24543*t24553*t24597*2.0-t24543*t24598*t24599-t24520* \
                   t24517*t24518*t24528*t24548*8.0+t24600*t24550*t24516*t24555*t24548*t24549*3.2E1-gamma_aa[index]*t24520* \
                   t24517*t24553*t24518*t24528*t24547*8.0+c*c0*t24520*t24530*t24522*t24518*t24528*t24546*t24539*(3.2E1/ \
                   3.0)-c*c0*t24520*t24530*t24522*t24518*t24546*t24555*t24539*(3.2E1/3.0)+a5*c0*gamma_aa[index]*t24520* \
                   t24513*t24522*t24518*t24554*t24528*t24539*(6.4E1/3.0)-a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518* \
                   t24554*t24555*t24539*(6.4E1/3.0)+c*c0*t24530*t24522*t24550*t24516*t24528*t24556*t24539*t24549*(1.28E2/ \
                   3.0)-c*c0*t24530*t24522*t24550*t24516*t24555*t24556*t24539*t24549*(2.56E2/3.0)+c*c0*t24530*t24522* \
                   t24550*t24516*t24556*t24539*t24549*t24568*6.4E1)-t24580*t24576*t24586*t24587*2.0-t24582*t24593*t24586* \
                   t24587*2.0-t24582*t24576*t24587*(t24543*t24553*t24597*3.0-t24543*t24598*t24599*(3.0/2.0)-t24520*t24517* \
                   t24518*t24528*t24548*1.2E1+t24600*t24550*t24516*t24555*t24548*t24549*4.8E1-gamma_aa[index]*t24520* \
                   t24517*t24553*t24518*t24528*t24547*1.2E1+c*c0*t24520*t24530*t24522*t24518*t24528*t24546*t24539*1.6E1- \
                   c*c0*t24520*t24530*t24522*t24518*t24546*t24555*t24539*1.6E1+a5*c0*gamma_aa[index]*t24520*t24513*t24522* \
                   t24518*t24554*t24528*t24539*3.2E1-a5*c0*gamma_aa[index]*t24520*t24513*t24522*t24518*t24554*t24555* \
                   t24539*3.2E1+c*c0*t24530*t24522*t24550*t24516*t24528*t24556*t24539*t24549*6.4E1-c*c0*t24530*t24522* \
                   t24550*t24516*t24555*t24556*t24539*t24549*1.28E2+c*c0*t24530*t24522*t24550*t24516*t24556*t24539*t24549* \
                   t24568*9.6E1)+t24582*t24576*1.0/(t24559*t24559*t24559)*(t24586*t24586)*2.0+t24601*t24602*t24603*t24523* \
                   t24604*t24605*t24606*t24573*(3.0/2.0)+t24601*t24602*t24603*t24523*t24604*t24605*t24606*t24567*(3.0/ \
                   2.0)-a5*1.0/(rho_a[index]*rho_a[index])*1.0/(t24530*t24530)*t24602*t24513*t24604*t24605*t24650*t24561* \
                   t24606*(3.0/2.0)-gamma_aa[index]*t24520*t24601*t24610*t24602*t24523*t24604*t24605*t24561*t24606*t24518* \
                   6.0+gamma_aa[index]*t24520*t24601*t24610*t24602*t24523*t24604*t24561*t24606*t24518*t24527*6.0)*(1.0/ \
                   2.0) : 0.0 ) -c0*rho_a[index]*t24631*t24617*t24646*(t24560*t24580*t24576+t24560*t24582*t24593+t24561* \
                   t24565*t24566-t24582*t24576*t24586*t24587+t24601*t24602*t24603*t24523*t24604*t24605*t24561*t24606* \
                   (3.0/2.0))+c0*rho_a[index]*t24617*t24646*t24649*(t24622*t24515*t24517*t24625*t24518*t24628*2.0E5-t24622* \
                   t24515*t24517*t24625*t24518*t24627*t24628*2.0E5+(a3*a3)*1.0/pow(rho_a[index],1.4E1/3.0)*t24622*t24650* \
                   1.0/pow(t24624,5.0/2.0)*t24518*t24627*t24628*7.5E4+t24600*t24550*t24622*(t24515*t24515)*t24516*t24625* \
                   t24627*t24628*4.0E5-a3*t24513*t24523*t24622*t24524*t24628*t24637*t24639*1.0E5-gamma_aa[index]*t24622* \
                   t24515*t24517*t24625*t24518*t24628*t24637*4.0E5+a3*gamma_aa[index]*1.0/pow(rho_a[index],2.3E1/3.0) \
                   *t24513*t24523*t24622*t24515*t24518*t24627*t24628*t24639*2.0E5)*(1.0/2.0)- 0.0 ;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t22853 = tspi_m13*tspi_m13;
                double t22854 = 1.0/pow(rho_b[index],1.0/3.0);
                double t22855 = a2*a2;
                double t22856 = gamma_bb[index]*gamma_bb[index];
                double t22857 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t22858 = t22853*t22853;
                double t22859 = c*t22854;
                double t22860 = pow(t22859,4.0/5.0);
                double t22874 = rab1*t22860;
                double t22861 = exp(-t22874);
                double t22862 = t22861-1.0;
                double t22875 = kab1*t22862;
                double t22863 = kab0-t22875;
                double t22864 = 1.0/c;
                double t22865 = 1.0/pow(rho_b[index],7.0/3.0);
                double t22866 = a3*gamma_bb[index]*t22853*t22864*t22865;
                double t22867 = t22866+1.0;
                double t22868 = t22855*t22856*t22857*t22858;
                double t22869 = 1.0/pow(rho_b[index],8.0/3.0);
                double t22870 = a1*gamma_bb[index]*t22853*t22869;
                double t22871 = t22870+t22868+1.0;
                double t22872 = t22855*t22856*t22857*t22858*2.0;
                double t22873 = exp(t22872);
                double t22876 = 1.0/(t22863*t22863);
                double t22877 = 1.0/(t22871*t22871);
                double t22878 = c*c0*t22854*t22873*t22867*t22876*t22877*(2.0/3.0);
                double t22879 = a1*t22853*t22869;
                double t22880 = gamma_bb[index]*t22855*t22857*t22858*2.0;
                double t22881 = t22880+t22879;
                double t22882 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t22883 = 1.0/(t22871*t22871*t22871);
                double t22884 = sqrt(t22878);
                double t22886 = a3*c0*t22853*t22873*t22876*t22877*t22869*(2.0/3.0);
                double t22887 = c*c0*t22854*t22881*t22873*t22883*t22867*t22876*(4.0/3.0);
                double t22888 = c*c0*gamma_bb[index]*t22855*t22873*t22882*t22858*t22867*t22876*t22877*(8.0/3.0);
                double t22885 = t22886-t22887+t22888;
                double t22889 = t22881*t22881;
                double t22890 = 1.0/(t22871*t22871*t22871*t22871);
                double t22891 = c*c0*t22854*t22890*t22873*t22867*t22876*t22889*4.0;
                double t22892 = c*c0*t22855*t22873*t22882*t22858*t22867*t22876*t22877*(8.0/3.0);
                double t22893 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t22894 = a3*c0*gamma_bb[index]*t22853*t22855*t22873*t22893*t22858*t22876*t22877*(1.6E1/3.0) \
                   ;
                double t22895 = exp(t22878);
                double t22896 = Ei(-t22878);
                double t22897 = t22855*t22855;
                double t22898 = 1.0/pow(rho_b[index],1.1E1);
                double t22899 = t22858*t22858;
                double t22900 = c*c0*t22873*t22856*t22867*t22876*t22877*t22897*t22898*t22899*(3.2E1/3.0);
                double t22903 = c*c0*gamma_bb[index]*t22881*t22855*t22873*t22882*t22883*t22858*t22867*t22876*(3.2E1/ \
                   3.0);
                double t22908 = a3*c0*t22853*t22881*t22873*t22883*t22876*t22869*(8.0/3.0);
                double t22909 = c*c0*t22855*t22873*t22882*t22883*t22858*t22867*t22876*(8.0/3.0);
                double t22901 = t22900-t22903-t22908+t22891-t22909+t22892+t22894;
                double t22902 = t22885*t22885;
                double t22904 = t22884*6.0;
                double t22905 = c*c0*t22854*t22873*t22867*t22876*t22877*4.0;
                double t22906 = t22904+t22905+3.0;
                double t22907 = 1.0/t22906;
                double t22910 = 1.0/sqrt(t22878);
                double t22911 = c*c0*t22854*t22873*t22867*t22876*t22877*t22895*t22896*(2.0/3.0);
                double t22912 = t22911+1.0;
                double t22913 = t22910*t22885*2.0;
                double t22914 = a3*c0*t22853*t22873*t22876*t22877*t22869*(8.0/3.0);
                double t22915 = c*c0*gamma_bb[index]*t22855*t22873*t22882*t22858*t22867*t22876*t22877*(3.2E1/3.0) \
                   ;
                double t22952 = c*c0*t22854*t22881*t22873*t22883*t22867*t22876*(1.6E1/3.0);
                double t22916 = t22913+t22914+t22915-t22952;
                double t22917 = 1.0/(t22906*t22906);
                double t22918 = t22884*4.0;
                double t22919 = c*c0*t22854*t22873*t22867*t22876*t22877*(8.0/3.0);
                double t22920 = t22918+t22919+6.0;
                double t22921 = 1.0/pow(t22878,3.0/2.0);
                double t22922 = t22910*t22885*3.0;
                double t22923 = a3*c0*t22853*t22873*t22876*t22877*t22869*4.0;
                double t22924 = c*c0*gamma_bb[index]*t22855*t22873*t22882*t22858*t22867*t22876*t22877*1.6E1;
                double t22926 = c*c0*t22854*t22881*t22873*t22883*t22867*t22876*8.0;
                double t22925 = t22922+t22923+t22924-t22926;
                double t22927 = a3*c0*t22853*t22873*t22876*t22877*t22895*t22869*t22896*(2.0/3.0);
                double t22928 = c*c0*t22854*t22873*t22867*t22876*t22885*t22877*t22895*t22896*(2.0/3.0);
                double t22929 = c*c0*gamma_bb[index]*t22855*t22873*t22882*t22858*t22867*t22876*t22877*t22895*t22896* \
                   (8.0/3.0);
                double t22953 = c*c0*t22854*t22881*t22873*t22883*t22867*t22876*t22895*t22896*(4.0/3.0);
                double t22930 = -t22953+t22927+t22928+t22929+t22886-t22887+t22888;
                double t22931 = 1.0/t22867;
                double t22932 = 1.0/c0;
                double t22933 = pow(rho_b[index],1.0/3.0);
                double t22934 = exp(-t22872);
                double t22935 = t22863*t22863;
                double t22936 = t22871*t22871;
                double t22937 = 1.0/sqrt(t22867);
                double t22938 = exp(-t22868);
                double t22945 = 1.0/pow(t22867,3.0/2.0);
                double t22949 = t22863*t22881*t22937*t22938*1.0E5;
                double t22950 = a3*t22853*t22871*t22863*t22864*t22945*t22865*t22938*5.0E4;
                double t22951 = gamma_bb[index]*t22871*t22863*t22855*t22937*t22857*t22938*t22858*2.0E5;
                double t22939 = t22950+t22951-t22949;
                double t22940 = c*c0*t22854*(2.0/3.0);
                double t22947 = t22871*t22863*t22937*t22938*1.0E5;
                double t22941 = t22940-t22947;
                double t22942 = t22895*t22896;
                double t22943 = t22920*t22912*t22907;
                double t22944 = t22942+t22943;
                double t22946 = 1.0/(c*c);
                double t22948 = 0.0 ;
                double t22954 = a4*a4;
                double t22955 = t22954*t22856*t22857*t22858*2.0;
                double t22956 = exp(t22955);
                double t22957 = sqrt(t22859);
                double t22958 = t22954*t22856*t22857*t22858;
                double t22959 = t22958+1.0;
                double t22960 = 1.0/(t22959*t22959);
                double t22961 = a5*gamma_bb[index]*t22853*t22864*t22865;
                double t22962 = t22961+1.0;
                double t22973 = raa2*t22957;
                double t22963 = exp(-t22973);
                double t22964 = t22963-1.0;
                double t22965 = kaa2*t22964;
                double t22966 = pow(t22859,2.0/5.0);
                double t22974 = raa1*t22966;
                double t22967 = exp(-t22974);
                double t22968 = t22967-1.0;
                double t22969 = kaa1*t22968;
                double t22970 = -kaa0+t22965+t22969;
                double t22971 = 1.0/(t22970*t22970);
                double t22972 = c*c0*t22960*t22854*t22962*t22971*t22956*(2.0/3.0);
                double t22975 = 1.0/t22959;
                double t22976 = c*c0*t22854*t22962*t22971*t22956*(2.0/3.0);
                double t22981 = a5*c0*t22853*t22971*t22956*t22869*(2.0/3.0);
                double t22982 = c*c0*gamma_bb[index]*t22962*t22971*t22882*t22954*t22956*t22858*(8.0/3.0);
                double t22977 = t22981+t22982;
                double t22978 = sqrt(t22976);
                double t22979 = t22954*t22954;
                double t22980 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t22983 = 1.0/sqrt(t22976);
                double t22984 = 1.0/(t22959*t22959*t22959);
                double t22985 = t22975*t22978*6.0;
                double t22986 = c*c0*t22960*t22854*t22962*t22971*t22956*4.0;
                double t22987 = t22985+t22986+3.0;
                double t22988 = 1.0/t22987;
                double t22990 = a5*c0*t22960*t22853*t22971*t22956*t22869*(2.0/3.0);
                double t22991 = c*c0*gamma_bb[index]*t22960*t22962*t22971*t22882*t22954*t22956*t22858*(8.0/3.0);
                double t22992 = c*c0*gamma_bb[index]*t22962*t22971*t22882*t22954*t22956*t22858*t22984*(8.0/3.0);
                double t22989 = t22990+t22991-t22992;
                double t22993 = exp(t22972);
                double t22994 = Ei(-t22972);
                double t22995 = t22989*t22989;
                double t22996 = 1.0/(t22959*t22959*t22959*t22959);
                double t22997 = a5*c0*gamma_bb[index]*t22960*t22853*t22971*t22954*t22893*t22956*t22858*(1.6E1/3.0) \
                   ;
                double t22998 = c*c0*t22960*t22962*t22971*t22882*t22954*t22956*t22858*(8.0/3.0);
                double t22999 = c*c0*t22960*t22962*t22971*t22856*t22956*t22898*t22979*t22899*(3.2E1/3.0);
                double t23000 = c*c0*t22962*t22971*t22856*t22956*t22996*t22898*t22979*t22899*1.6E1;
                double t23032 = a5*c0*gamma_bb[index]*t22853*t22971*t22954*t22893*t22956*t22858*t22984*(1.6E1/3.0) \
                   ;
                double t23033 = c*c0*t22962*t22971*t22882*t22954*t22956*t22858*t22984*(8.0/3.0);
                double t23034 = c*c0*t22962*t22971*t22856*t22956*t22984*t22898*t22979*t22899*(6.4E1/3.0);
                double t23001 = t22997+t22998+t22999+t23000-t23032-t23033-t23034;
                double t23002 = t22975*t22978*4.0;
                double t23003 = c*c0*t22960*t22854*t22962*t22971*t22956*(8.0/3.0);
                double t23004 = t23002+t23003+6.0;
                double t23005 = a5*c0*t22960*t22853*t22971*t22956*t22993*t22994*t22869*(2.0/3.0);
                double t23006 = c*c0*t22960*t22854*t22962*t22971*t22956*t22993*t22994*t22989*(2.0/3.0);
                double t23007 = c*c0*gamma_bb[index]*t22960*t22962*t22971*t22882*t22954*t22956*t22858*t22993*t22994* \
                   (8.0/3.0);
                double t23049 = c*c0*gamma_bb[index]*t22962*t22971*t22882*t22954*t22956*t22858*t22984*t22993*t22994* \
                   (8.0/3.0);
                double t23008 = t22990+t22991-t22992+t23005+t23006+t23007-t23049;
                double t23009 = c*c0*t22960*t22854*t22962*t22971*t22956*t22993*t22994*(2.0/3.0);
                double t23010 = t23009+1.0;
                double t23011 = t22983*t22975*t22977*3.0;
                double t23012 = a5*c0*t22960*t22853*t22971*t22956*t22869*4.0;
                double t23013 = c*c0*gamma_bb[index]*t22960*t22962*t22971*t22882*t22954*t22956*t22858*1.6E1;
                double t23016 = gamma_bb[index]*t22960*t22954*t22857*t22858*t22978*1.2E1;
                double t23017 = c*c0*gamma_bb[index]*t22962*t22971*t22882*t22954*t22956*t22858*t22984*1.6E1;
                double t23014 = t23011+t23012+t23013-t23016-t23017;
                double t23015 = 1.0/(t22987*t22987);
                double t23018 = t22983*t22975*t22977*2.0;
                double t23019 = a5*c0*t22960*t22853*t22971*t22956*t22869*(8.0/3.0);
                double t23020 = c*c0*gamma_bb[index]*t22960*t22962*t22971*t22882*t22954*t22956*t22858*(3.2E1/3.0) \
                   ;
                double t23047 = gamma_bb[index]*t22960*t22954*t22857*t22858*t22978*8.0;
                double t23048 = c*c0*gamma_bb[index]*t22962*t22971*t22882*t22954*t22956*t22858*t22984*(3.2E1/3.0) \
                   ;
                double t23021 = t23020+t23018+t23019-t23047-t23048;
                double t23022 = a5*c0*gamma_bb[index]*t22853*t22971*t22954*t22893*t22956*t22858*(1.6E1/3.0);
                double t23023 = c*c0*t22962*t22971*t22882*t22954*t22956*t22858*(8.0/3.0);
                double t23024 = c*c0*t22962*t22971*t22856*t22956*t22898*t22979*t22899*(3.2E1/3.0);
                double t23025 = t23022+t23023+t23024;
                double t23026 = t22977*t22977;
                double t23027 = 1.0/pow(t22976,3.0/2.0);
                double t23028 = 1.0/t22962;
                double t23029 = exp(-t22955);
                double t23030 = t22959*t22959;
                double t23031 = t22970*t22970;
                double t23035 = 1.0/(rho_b[index]*rho_b[index]);
                double t23036 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]);
                double t23037 = c*c;
                double t23038 = 1.0/pow(rho_b[index],2.0/3.0);
                double t23039 = k1*t22957;
                double t23040 = c*k2*t22854;
                double t23041 = t23040+t23039;
                double t23042 = 1.0/(t23041*t23041);
                double t23046 = t23042*t23037*t23038;
                double t23043 = exp(-t23046);
                double t23044 = 0.0 ;
                double t23045 = t22939*t22939;
                double t23050 = t22993*t22994;
                double t23051 = t22988*t23010*t23004;
                double t23052 = t23050+t23051;
                double t23053 = t22863*t22855*t22937*t22857*t22938*t22858*2.0E5;
                double t23054 = a3*a3;
                double t23055 = 1.0/pow(rho_b[index],1.4E1/3.0);
                double t23056 = 1.0/pow(t22867,5.0/2.0);
                double t23057 = t22871*t22863*t22946*t22938*t22858*t23054*t23055*t23056*7.5E4;
                double t23058 = t22871*t22863*t22980*t22856*t22937*t22938*t22897*t22899*4.0E5;
                double t23059 = 1.0/pow(rho_b[index],2.3E1/3.0);
                double t23060 = a3*gamma_bb[index]*t22853*t22871*t22863*t22855*t22864*t22945*t22938*t22858*t23059* \
                   2.0E5;
                double t23061 = t23060+t23053+t23057+t23058-t22871*t22863*t22855*t22937*t22857*t22938*t22858*2.0E5- \
                   a3*t22853*t22863*t22881*t22864*t22945*t22865*t22938*1.0E5-gamma_bb[index]*t22863*t22881*t22855*t22937* \
                   t22857*t22938*t22858*4.0E5;
                v_gamma_bb_gamma_bb_[index] = rho_a[index]*( ( (c*c0*t22854*(-2.0/3.0)+t22871*t22863*t22937*exp(- \
                   t22855*t22856*t22857*t22858)*1.0E5 > 0.0) ? c0*1.0*(t22912*t22907*(t22901*t22910*2.0-t22902*t22921- \
                   a3*c0*t22853*t22881*t22873*t22883*t22876*t22869*(3.2E1/3.0)+c*c0*t22854*t22890*t22873*t22867*t22876* \
                   t22889*1.6E1-c*c0*t22855*t22873*t22882*t22883*t22858*t22867*t22876*(3.2E1/3.0)+c*c0*t22855*t22873* \
                   t22882*t22858*t22867*t22876*t22877*(3.2E1/3.0)+a3*c0*gamma_bb[index]*t22853*t22855*t22873*t22893*t22858* \
                   t22876*t22877*(6.4E1/3.0)+c*c0*t22873*t22856*t22867*t22876*t22877*t22897*t22898*t22899*(1.28E2/3.0) \
                   -c*c0*gamma_bb[index]*t22881*t22855*t22873*t22882*t22883*t22858*t22867*t22876*(1.28E2/3.0))+t22920* \
                   t22907*(t22900+t22902-t22903+t22891+t22892+t22894-(t22881*t22885*2.0)/t22871+gamma_bb[index]*t22855* \
                   t22857*t22858*t22885*4.0+a3*t22931*t22853*t22864*t22865*t22885-a3*c0*t22853*t22881*t22873*t22883*t22876* \
                   t22869*(8.0/3.0)-c*c0*t22855*t22873*t22882*t22883*t22858*t22867*t22876*(8.0/3.0)-a3*c0*t22853*t22881* \
                   t22873*t22883*t22876*t22895*t22869*t22896*(8.0/3.0)+a3*c0*t22853*t22873*t22876*t22885*t22877*t22895* \
                   t22869*t22896*(4.0/3.0)+c*c0*t22901*t22854*t22873*t22867*t22876*t22877*t22895*t22896*(2.0/3.0)+c*c0* \
                   t22902*t22854*t22873*t22867*t22876*t22877*t22895*t22896*(2.0/3.0)+c*c0*t22854*t22890*t22873*t22867* \
                   t22876*t22895*t22896*t22889*4.0-c*c0*t22854*t22881*t22873*t22883*t22867*t22876*t22885*t22895*t22896* \
                   (8.0/3.0)-c*c0*t22855*t22873*t22882*t22883*t22858*t22867*t22876*t22895*t22896*(8.0/3.0)+c*c0*t22855* \
                   t22873*t22882*t22858*t22867*t22876*t22877*t22895*t22896*(8.0/3.0)+a3*c0*gamma_bb[index]*t22853*t22855* \
                   t22873*t22893*t22858*t22876*t22877*t22895*t22896*(1.6E1/3.0)+c*c0*t22873*t22856*t22867*t22876*t22877* \
                   t22895*t22896*t22897*t22898*t22899*(3.2E1/3.0)-c*c0*gamma_bb[index]*t22881*t22855*t22873*t22882*t22883* \
                   t22858*t22867*t22876*t22895*t22896*(3.2E1/3.0)+c*c0*gamma_bb[index]*t22855*t22873*t22882*t22858*t22867* \
                   t22876*t22885*t22877*t22895*t22896*(1.6E1/3.0))+t22930*t22907*t22916*2.0+t22901*t22895*t22896+t22902* \
                   t22895*t22896-t22920*t22930*t22925*t22917*2.0-t22912*t22916*t22925*t22917*2.0-t22920*t22912*t22917* \
                   (t22901*t22910*3.0-t22902*t22921*(3.0/2.0)-a3*c0*t22853*t22881*t22873*t22883*t22876*t22869*1.6E1+c* \
                   c0*t22854*t22890*t22873*t22867*t22876*t22889*2.4E1-c*c0*t22855*t22873*t22882*t22883*t22858*t22867* \
                   t22876*1.6E1+c*c0*t22855*t22873*t22882*t22858*t22867*t22876*t22877*1.6E1+a3*c0*gamma_bb[index]*t22853* \
                   t22855*t22873*t22893*t22858*t22876*t22877*3.2E1+c*c0*t22873*t22856*t22867*t22876*t22877*t22897*t22898* \
                   t22899*6.4E1-c*c0*gamma_bb[index]*t22881*t22855*t22873*t22882*t22883*t22858*t22867*t22876*6.4E1)+t22920* \
                   t22912*1.0/(t22906*t22906*t22906)*(t22925*t22925)*2.0+t22901*t22931*t22932*t22933*t22934*t22935*t22864* \
                   t22936*(3.0/2.0)+t22902*t22931*t22932*t22933*t22934*t22935*t22864*t22936*(3.0/2.0)+t22931*t22932*t22933* \
                   t22871*t22934*t22881*t22935*t22864*t22885*3.0-a3*t22932*t22853*t22934*t22935*t22936*t22946*1.0/(t22867* \
                   t22867)*t22885*t23035*(3.0/2.0)-gamma_bb[index]*t22931*t22932*t22934*t22935*t22855*t22864*t22936*t22858* \
                   t22885*t23036*6.0)*(1.0/2.0) : 0.0 ) +c0*t22944*t22948*t23061*(1.0/2.0)-c0*t22944*t23044*t23045*(1.0/ \
                   2.0)-c0*t22939*t22948*(t22920*t22930*t22907+t22912*t22907*t22916+t22885*t22895*t22896-t22920*t22912* \
                   t22925*t22917+t22931*t22932*t22933*t22934*t22935*t22864*t22936*t22885*(3.0/2.0)))+rho_b[index]*( (  \
                   (-t22940+t22947 > 0.0) ? c0*t23043*1.0*(t22988*t23004*(t22995+t22997+t22998+t22999+t23000+gamma_bb[index]* \
                   t22954*t22857*t22858*t22989*4.0+a5*t22853*t22864*t22865*t22989*t23028-gamma_bb[index]*t22954*t22857* \
                   t22858*t22975*t22989*4.0-c*c0*t22962*t22971*t22882*t22954*t22956*t22858*t22984*(8.0/3.0)-a5*c0*gamma_bb[index]* \
                   t22853*t22971*t22954*t22893*t22956*t22858*t22984*(1.6E1/3.0)+a5*c0*t22960*t22853*t22971*t22956*t22993* \
                   t22994*t22869*t22989*(4.0/3.0)+c*c0*t22960*t22854*t22962*t22971*t22956*t22993*t22994*t22995*(2.0/3.0) \
                   -c*c0*t22962*t22971*t22856*t22956*t22984*t22898*t22979*t22899*(6.4E1/3.0)+c*c0*t22960*t22854*t22962* \
                   t22971*t22956*t22993*t22994*t23001*(2.0/3.0)+c*c0*t22960*t22962*t22971*t22882*t22954*t22956*t22858* \
                   t22993*t22994*(8.0/3.0)-c*c0*t22962*t22971*t22882*t22954*t22956*t22858*t22984*t22993*t22994*(8.0/3.0) \
                   +a5*c0*gamma_bb[index]*t22960*t22853*t22971*t22954*t22893*t22956*t22858*t22993*t22994*(1.6E1/3.0)- \
                   a5*c0*gamma_bb[index]*t22853*t22971*t22954*t22893*t22956*t22858*t22984*t22993*t22994*(1.6E1/3.0)+c* \
                   c0*t22960*t22962*t22971*t22856*t22956*t22993*t22994*t22898*t22979*t22899*(3.2E1/3.0)-c*c0*t22962*t22971* \
                   t22856*t22956*t22984*t22993*t22994*t22898*t22979*t22899*(6.4E1/3.0)+c*c0*t22962*t22971*t22856*t22956* \
                   t22993*t22994*t22996*t22898*t22979*t22899*1.6E1+c*c0*gamma_bb[index]*t22960*t22962*t22971*t22882*t22954* \
                   t22956*t22858*t22993*t22994*t22989*(1.6E1/3.0)-c*c0*gamma_bb[index]*t22962*t22971*t22882*t22954*t22956* \
                   t22858*t22984*t22993*t22994*t22989*(1.6E1/3.0))+t22993*t22994*t22995+t22993*t22994*t23001+t22988*t23021* \
                   t23008*2.0+t22988*t23010*(t22983*t22975*t23025*2.0-t22975*t23026*t23027-t22960*t22954*t22857*t22858* \
                   t22978*8.0+t22980*t22856*t22984*t22978*t22979*t22899*3.2E1-gamma_bb[index]*t22960*t22954*t22857*t22983* \
                   t22858*t22977*8.0+c*c0*t22960*t22962*t22971*t22882*t22954*t22956*t22858*(3.2E1/3.0)-c*c0*t22962*t22971* \
                   t22882*t22954*t22956*t22858*t22984*(3.2E1/3.0)+a5*c0*gamma_bb[index]*t22960*t22853*t22971*t22954*t22893* \
                   t22956*t22858*(6.4E1/3.0)-a5*c0*gamma_bb[index]*t22853*t22971*t22954*t22893*t22956*t22858*t22984*(6.4E1/ \
                   3.0)+c*c0*t22960*t22962*t22971*t22856*t22956*t22898*t22979*t22899*(1.28E2/3.0)-c*c0*t22962*t22971* \
                   t22856*t22956*t22984*t22898*t22979*t22899*(2.56E2/3.0)+c*c0*t22962*t22971*t22856*t22956*t22996*t22898* \
                   t22979*t22899*6.4E1)-t23010*t23021*t23014*t23015*2.0-t23004*t23014*t23015*t23008*2.0-t23010*t23004* \
                   t23015*(t22983*t22975*t23025*3.0-t22975*t23026*t23027*(3.0/2.0)-t22960*t22954*t22857*t22858*t22978* \
                   1.2E1+t22980*t22856*t22984*t22978*t22979*t22899*4.8E1-gamma_bb[index]*t22960*t22954*t22857*t22983* \
                   t22858*t22977*1.2E1+c*c0*t22960*t22962*t22971*t22882*t22954*t22956*t22858*1.6E1-c*c0*t22962*t22971* \
                   t22882*t22954*t22956*t22858*t22984*1.6E1+a5*c0*gamma_bb[index]*t22960*t22853*t22971*t22954*t22893* \
                   t22956*t22858*3.2E1-a5*c0*gamma_bb[index]*t22853*t22971*t22954*t22893*t22956*t22858*t22984*3.2E1+c* \
                   c0*t22960*t22962*t22971*t22856*t22956*t22898*t22979*t22899*6.4E1-c*c0*t22962*t22971*t22856*t22956* \
                   t22984*t22898*t22979*t22899*1.28E2+c*c0*t22962*t22971*t22856*t22956*t22996*t22898*t22979*t22899*9.6E1) \
                   +1.0/(t22987*t22987*t22987)*t23010*t23004*(t23014*t23014)*2.0+t22932*t22933*t22864*t22995*t23030*t23031* \
                   t23028*t23029*(3.0/2.0)+t22932*t22933*t22864*t23001*t23030*t23031*t23028*t23029*(3.0/2.0)-a5*t22932* \
                   t22853*1.0/(t22962*t22962)*t22946*t22989*t23030*t23031*t23035*t23029*(3.0/2.0)+gamma_bb[index]*t22932* \
                   t22864*t22954*t22858*t22959*t22989*t23031*t23036*t23028*t23029*6.0-gamma_bb[index]*t22932*t22864*t22954* \
                   t22858*t22989*t23030*t23031*t23036*t23028*t23029*6.0)*(1.0/2.0) : 0.0 ) +c0*t22948*t23043*t23052*t23061* \
                   (1.0/2.0)-c0*t23043*t23052*t23044*t23045*(1.0/2.0)-c0*t22939*t22948*t23043*(t22993*t22994*t22989+t22988* \
                   t23010*t23021+t22988*t23004*t23008-t23010*t23004*t23014*t23015+t22932*t22933*t22864*t22989*t23030* \
                   t23031*t23028*t23029*(3.0/2.0)));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t23721 = tspi_m13*tspi_m13;
                double t23722 = 1.0/pow(rho_b[index],1.0/3.0);
                double t23723 = a2*a2;
                double t23724 = gamma_bb[index]*gamma_bb[index];
                double t23725 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t23726 = t23721*t23721;
                double t23727 = c*t23722;
                double t23728 = a4*a4;
                double t23729 = t23724*t23725*t23726*t23728*2.0;
                double t23730 = exp(t23729);
                double t23731 = 1.0/c;
                double t23732 = 1.0/pow(rho_b[index],7.0/3.0);
                double t23733 = sqrt(t23727);
                double t23734 = t23724*t23725*t23726*t23728;
                double t23735 = t23734+1.0;
                double t23736 = 1.0/(t23735*t23735);
                double t23737 = a5*gamma_bb[index]*t23721*t23731*t23732;
                double t23738 = t23737+1.0;
                double t23749 = raa2*t23733;
                double t23739 = exp(-t23749);
                double t23740 = t23739-1.0;
                double t23741 = kaa2*t23740;
                double t23742 = pow(t23727,2.0/5.0);
                double t23750 = raa1*t23742;
                double t23743 = exp(-t23750);
                double t23744 = t23743-1.0;
                double t23745 = kaa1*t23744;
                double t23746 = -kaa0+t23741+t23745;
                double t23747 = 1.0/(t23746*t23746);
                double t23748 = c*c0*t23730*t23722*t23736*t23738*t23747*(2.0/3.0);
                double t23751 = 1.0/t23735;
                double t23752 = c*c0*t23730*t23722*t23738*t23747*(2.0/3.0);
                double t23753 = 1.0/pow(rho_b[index],8.0/3.0);
                double t23754 = 1.0/pow(rho_b[index],1.7E1/3.0);
                double t23759 = a5*c0*t23721*t23730*t23753*t23747*(2.0/3.0);
                double t23760 = c*c0*gamma_bb[index]*t23730*t23726*t23754*t23728*t23738*t23747*(8.0/3.0);
                double t23755 = t23760+t23759;
                double t23756 = sqrt(t23752);
                double t23757 = t23728*t23728;
                double t23758 = t23726*t23726;
                double t23761 = 1.0/sqrt(t23752);
                double t23762 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t23763 = 1.0/(t23735*t23735*t23735);
                double t23764 = 1.0/pow(rho_b[index],1.1E1);
                double t23765 = t23751*t23756*6.0;
                double t23766 = c*c0*t23730*t23722*t23736*t23738*t23747*4.0;
                double t23767 = t23765+t23766+3.0;
                double t23768 = 1.0/t23767;
                double t23770 = a5*c0*t23721*t23730*t23753*t23736*t23747*(2.0/3.0);
                double t23771 = c*c0*gamma_bb[index]*t23730*t23726*t23736*t23754*t23728*t23738*t23747*(8.0/3.0);
                double t23772 = c*c0*gamma_bb[index]*t23730*t23726*t23754*t23763*t23728*t23738*t23747*(8.0/3.0);
                double t23769 = t23770+t23771-t23772;
                double t23773 = exp(t23748);
                double t23774 = Ei(-t23748);
                double t23775 = t23769*t23769;
                double t23776 = 1.0/(t23735*t23735*t23735*t23735);
                double t23777 = a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23736*t23728*t23747*(1.6E1/3.0) \
                   ;
                double t23778 = c*c0*t23730*t23726*t23736*t23754*t23728*t23738*t23747*(8.0/3.0);
                double t23779 = c*c0*t23730*t23724*t23736*t23764*t23738*t23747*t23757*t23758*(3.2E1/3.0);
                double t23780 = c*c0*t23730*t23724*t23764*t23738*t23747*t23757*t23758*t23776*1.6E1;
                double t23815 = a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23763*t23728*t23747*(1.6E1/3.0) \
                   ;
                double t23816 = c*c0*t23730*t23726*t23754*t23763*t23728*t23738*t23747*(8.0/3.0);
                double t23817 = c*c0*t23730*t23724*t23763*t23764*t23738*t23747*t23757*t23758*(6.4E1/3.0);
                double t23781 = -t23815+t23780-t23816-t23817+t23777+t23778+t23779;
                double t23782 = t23751*t23756*4.0;
                double t23783 = c*c0*t23730*t23722*t23736*t23738*t23747*(8.0/3.0);
                double t23784 = t23782+t23783+6.0;
                double t23785 = a5*c0*t23721*t23730*t23753*t23736*t23773*t23747*t23774*(2.0/3.0);
                double t23786 = c*c0*t23730*t23722*t23736*t23773*t23738*t23747*t23774*t23769*(2.0/3.0);
                double t23787 = c*c0*gamma_bb[index]*t23730*t23726*t23736*t23754*t23728*t23773*t23738*t23747*t23774* \
                   (8.0/3.0);
                double t23852 = c*c0*gamma_bb[index]*t23730*t23726*t23754*t23763*t23728*t23773*t23738*t23747*t23774* \
                   (8.0/3.0);
                double t23788 = t23770+t23771-t23852-t23772+t23785+t23786+t23787;
                double t23789 = c*c0*t23730*t23722*t23736*t23773*t23738*t23747*t23774*(2.0/3.0);
                double t23790 = t23789+1.0;
                double t23791 = t23751*t23761*t23755*3.0;
                double t23792 = a5*c0*t23721*t23730*t23753*t23736*t23747*4.0;
                double t23793 = c*c0*gamma_bb[index]*t23730*t23726*t23736*t23754*t23728*t23738*t23747*1.6E1;
                double t23796 = gamma_bb[index]*t23725*t23726*t23736*t23728*t23756*1.2E1;
                double t23797 = c*c0*gamma_bb[index]*t23730*t23726*t23754*t23763*t23728*t23738*t23747*1.6E1;
                double t23794 = t23791+t23792+t23793-t23796-t23797;
                double t23795 = 1.0/(t23767*t23767);
                double t23798 = t23751*t23761*t23755*2.0;
                double t23799 = a5*c0*t23721*t23730*t23753*t23736*t23747*(8.0/3.0);
                double t23800 = c*c0*gamma_bb[index]*t23730*t23726*t23736*t23754*t23728*t23738*t23747*(3.2E1/3.0) \
                   ;
                double t23850 = gamma_bb[index]*t23725*t23726*t23736*t23728*t23756*8.0;
                double t23851 = c*c0*gamma_bb[index]*t23730*t23726*t23754*t23763*t23728*t23738*t23747*(3.2E1/3.0) \
                   ;
                double t23801 = t23800-t23850-t23851+t23798+t23799;
                double t23802 = a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23728*t23747*(1.6E1/3.0);
                double t23803 = c*c0*t23730*t23726*t23754*t23728*t23738*t23747*(8.0/3.0);
                double t23804 = c*c0*t23730*t23724*t23764*t23738*t23747*t23757*t23758*(3.2E1/3.0);
                double t23805 = t23802+t23803+t23804;
                double t23806 = t23755*t23755;
                double t23807 = 1.0/pow(t23752,3.0/2.0);
                double t23808 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t23809 = 1.0/t23738;
                double t23810 = 1.0/c0;
                double t23811 = pow(rho_b[index],1.0/3.0);
                double t23812 = exp(-t23729);
                double t23813 = t23735*t23735;
                double t23814 = t23746*t23746;
                double t23818 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]);
                double t23819 = c*c;
                double t23820 = 1.0/pow(rho_b[index],2.0/3.0);
                double t23821 = k1*t23733;
                double t23822 = c*k2*t23722;
                double t23823 = t23821+t23822;
                double t23824 = 1.0/(t23823*t23823);
                double t23842 = t23820*t23824*t23819;
                double t23825 = exp(-t23842);
                double t23826 = t23723*t23724*t23725*t23726;
                double t23827 = pow(t23727,4.0/5.0);
                double t23837 = rab1*t23827;
                double t23828 = exp(-t23837);
                double t23829 = t23828-1.0;
                double t23838 = kab1*t23829;
                double t23830 = kab0-t23838;
                double t23831 = a3*gamma_bb[index]*t23721*t23731*t23732;
                double t23832 = t23831+1.0;
                double t23833 = 1.0/sqrt(t23832);
                double t23834 = a1*gamma_bb[index]*t23721*t23753;
                double t23835 = t23834+t23826+1.0;
                double t23836 = exp(-t23826);
                double t23843 = a1*t23721*t23753;
                double t23844 = gamma_bb[index]*t23723*t23725*t23726*2.0;
                double t23845 = t23843+t23844;
                double t23846 = t23830*t23833*t23836*t23845*1.0E5;
                double t23847 = 1.0/pow(t23832,3.0/2.0);
                double t23848 = a3*t23721*t23731*t23830*t23732*t23835*t23836*t23847*5.0E4;
                double t23849 = gamma_bb[index]*t23830*t23723*t23725*t23833*t23726*t23835*t23836*2.0E5;
                double t23839 = -t23846+t23848+t23849;
                double t23840 = c*c0*t23722*(2.0/3.0);
                double t23853 = t23830*t23833*t23835*t23836*1.0E5;
                double t23841 = t23840-t23853;
                double t23854 = 0.0 ;
                double t23855 = t23773*t23774;
                double t23856 = t23790*t23784*t23768;
                double t23857 = t23855+t23856;
                double t23858 = 1.0/(c*c);
                v_gamma_bb_gamma_bb_[index] = ( (c*c0*t23722*(-2.0/3.0)+t23830*t23833*t23835*exp(-t23723*t23724*t23725* \
                   t23726)*1.0E5 > 0.0) ?  c0*rho_b[index]*t23825*1.0*(t23784*t23768*(t23780+t23775+t23777+t23778+t23779+ \
                   gamma_bb[index]*t23725*t23726*t23728*t23769*4.0+a5*t23721*t23731*t23732*t23809*t23769-gamma_bb[index]* \
                   t23751*t23725*t23726*t23728*t23769*4.0-c*c0*t23730*t23726*t23754*t23763*t23728*t23738*t23747*(8.0/ \
                   3.0)-a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23763*t23728*t23747*(1.6E1/3.0)+a5*c0*t23721* \
                   t23730*t23753*t23736*t23773*t23747*t23774*t23769*(4.0/3.0)+c*c0*t23730*t23722*t23736*t23781*t23773* \
                   t23738*t23747*t23774*(2.0/3.0)+c*c0*t23730*t23722*t23736*t23773*t23738*t23747*t23774*t23775*(2.0/3.0) \
                   -c*c0*t23730*t23724*t23763*t23764*t23738*t23747*t23757*t23758*(6.4E1/3.0)+c*c0*t23730*t23726*t23736* \
                   t23754*t23728*t23773*t23738*t23747*t23774*(8.0/3.0)-c*c0*t23730*t23726*t23754*t23763*t23728*t23773* \
                   t23738*t23747*t23774*(8.0/3.0)+a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23736*t23728*t23773* \
                   t23747*t23774*(1.6E1/3.0)-a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23763*t23728*t23773*t23747* \
                   t23774*(1.6E1/3.0)+c*c0*t23730*t23724*t23736*t23764*t23773*t23738*t23747*t23774*t23757*t23758*(3.2E1/ \
                   3.0)-c*c0*t23730*t23724*t23763*t23764*t23773*t23738*t23747*t23774*t23757*t23758*(6.4E1/3.0)+c*c0*t23730* \
                   t23724*t23764*t23773*t23738*t23747*t23774*t23757*t23758*t23776*1.6E1+c*c0*gamma_bb[index]*t23730*t23726* \
                   t23736*t23754*t23728*t23773*t23738*t23747*t23774*t23769*(1.6E1/3.0)-c*c0*gamma_bb[index]*t23730*t23726* \
                   t23754*t23763*t23728*t23773*t23738*t23747*t23774*t23769*(1.6E1/3.0))+t23781*t23773*t23774+t23801*t23768* \
                   t23788*2.0+t23773*t23774*t23775+t23790*t23768*(t23751*t23805*t23761*2.0-t23751*t23806*t23807-t23725* \
                   t23726*t23736*t23728*t23756*8.0+t23724*t23763*t23808*t23756*t23757*t23758*3.2E1-gamma_bb[index]*t23725* \
                   t23761*t23726*t23736*t23728*t23755*8.0+c*c0*t23730*t23726*t23736*t23754*t23728*t23738*t23747*(3.2E1/ \
                   3.0)-c*c0*t23730*t23726*t23754*t23763*t23728*t23738*t23747*(3.2E1/3.0)+a5*c0*gamma_bb[index]*t23721* \
                   t23730*t23726*t23762*t23736*t23728*t23747*(6.4E1/3.0)-a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762* \
                   t23763*t23728*t23747*(6.4E1/3.0)+c*c0*t23730*t23724*t23736*t23764*t23738*t23747*t23757*t23758*(1.28E2/ \
                   3.0)-c*c0*t23730*t23724*t23763*t23764*t23738*t23747*t23757*t23758*(2.56E2/3.0)+c*c0*t23730*t23724* \
                   t23764*t23738*t23747*t23757*t23758*t23776*6.4E1)-t23801*t23790*t23794*t23795*2.0-t23784*t23794*t23795* \
                   t23788*2.0-t23790*t23784*t23795*(t23751*t23805*t23761*3.0-t23751*t23806*t23807*(3.0/2.0)-t23725*t23726* \
                   t23736*t23728*t23756*1.2E1+t23724*t23763*t23808*t23756*t23757*t23758*4.8E1-gamma_bb[index]*t23725* \
                   t23761*t23726*t23736*t23728*t23755*1.2E1+c*c0*t23730*t23726*t23736*t23754*t23728*t23738*t23747*1.6E1- \
                   c*c0*t23730*t23726*t23754*t23763*t23728*t23738*t23747*1.6E1+a5*c0*gamma_bb[index]*t23721*t23730*t23726* \
                   t23762*t23736*t23728*t23747*3.2E1-a5*c0*gamma_bb[index]*t23721*t23730*t23726*t23762*t23763*t23728* \
                   t23747*3.2E1+c*c0*t23730*t23724*t23736*t23764*t23738*t23747*t23757*t23758*6.4E1-c*c0*t23730*t23724* \
                   t23763*t23764*t23738*t23747*t23757*t23758*1.28E2+c*c0*t23730*t23724*t23764*t23738*t23747*t23757*t23758* \
                   t23776*9.6E1)+t23790*t23784*1.0/(t23767*t23767*t23767)*(t23794*t23794)*2.0+t23810*t23811*t23731*t23812* \
                   t23813*t23814*t23781*t23809*(3.0/2.0)+t23810*t23811*t23731*t23812*t23813*t23814*t23809*t23775*(3.0/ \
                   2.0)-a5*1.0/(rho_b[index]*rho_b[index])*t23810*t23721*t23812*t23813*t23814*1.0/(t23738*t23738)*t23858* \
                   t23769*(3.0/2.0)-gamma_bb[index]*t23810*t23731*t23812*t23813*t23814*t23726*t23728*t23809*t23818*t23769* \
                   6.0+gamma_bb[index]*t23810*t23731*t23812*t23814*t23726*t23735*t23728*t23809*t23818*t23769*6.0)*(1.0/ \
                   2.0) : 0.0 ) -c0*rho_b[index]*t23825*t23854*t23839*(t23801*t23790*t23768+t23773*t23774*t23769+t23784* \
                   t23768*t23788-t23790*t23784*t23794*t23795+t23810*t23811*t23731*t23812*t23813*t23814*t23809*t23769* \
                   (3.0/2.0))+c0*rho_b[index]*t23825*t23854*t23857*(t23830*t23723*t23725*t23833*t23726*t23836*2.0E5-t23830* \
                   t23723*t23725*t23833*t23726*t23835*t23836*2.0E5+(a3*a3)*1.0/pow(rho_b[index],1.4E1/3.0)*t23830*1.0/ \
                   pow(t23832,5.0/2.0)*t23726*t23835*t23836*t23858*7.5E4+t23830*(t23723*t23723)*t23724*t23833*t23808* \
                   t23835*t23836*t23758*4.0E5-a3*t23721*t23731*t23830*t23732*t23836*t23845*t23847*1.0E5-gamma_bb[index]* \
                   t23830*t23723*t23725*t23833*t23726*t23836*t23845*4.0E5+a3*gamma_bb[index]*1.0/pow(rho_b[index],2.3E1/ \
                   3.0)*t23721*t23731*t23830*t23723*t23726*t23835*t23836*t23847*2.0E5)*(1.0/2.0)- 0.0 ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

