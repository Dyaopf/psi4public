/**********************************************************
* PW91_X_functional.cc: definitions for PW91_X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "PW91_X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PW91_X_Functional::PW91_X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "PW91_X";
    description_ = "Perdew 91 Exchange Functional";
    citation_ = "J.P. Perdew et. al., Phys. Rev. B., 46(11), 6671-6687, (1992)";

    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double C1 = 1.9645000000000001E-01;
    params_.push_back(make_pair("C1",C1));
    double C2 = 7.7956000000000003E+00;
    params_.push_back(make_pair("C2",C2));
    double C3 = 2.7429999999999999E-01;
    params_.push_back(make_pair("C3",C3));
    double C4 = 1.5079999999999999E-01;
    params_.push_back(make_pair("C4",C4));
    double C5 = 4.0000000000000001E-03;
    params_.push_back(make_pair("C5",C5));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PW91_X_Functional::~PW91_X_Functional()
{
}
void PW91_X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double k = params_[0].second;
    double e = params_[1].second;
    double C1 = params_[2].second;
    double C2 = params_[3].second;
    double C3 = params_[4].second;
    double C4 = params_[5].second;
    double C5 = params_[6].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t2416 = 1.0/(k*k);
            double t2417 = rho_a[index]*2.0;
            double t2418 = 1.0/pow(t2417,8.0/3.0);
            double t2419 = 1.0/k;
            double t2420 = gamma_aa[index]*4.0;
            double t2421 = sqrt(t2420);
            double t2422 = 1.0/pow(t2417,4.0/3.0);
            double t2423 = C2*t2421*t2422*t2419*(1.0/2.0);
            double t2424 = log(t2423+sqrt(t2423*t2423+1.0));
            double t2425 = C1*t2421*t2422*t2424*t2419*(1.0/2.0);
            functional_[index] = (e*k*rho_a[index]*pow(t2417,1.0/3.0)*(t2425+gamma_aa[index]*t2416*t2418*(C3- \
               C4*exp(gamma_aa[index]*t2416*t2418*-1.0E2))+1.0)*2.0)/(t2425+C5*(gamma_aa[index]*gamma_aa[index])* \
               1.0/(k*k*k*k)*1.0/pow(t2417,1.6E1/3.0)+1.0);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t2427 = 1.0/(k*k);
            double t2428 = rho_a[index]*2.0;
            double t2429 = 1.0/pow(t2428,8.0/3.0);
            double t2430 = 1.0/k;
            double t2431 = gamma_aa[index]*4.0;
            double t2432 = sqrt(t2431);
            double t2433 = 1.0/pow(t2428,4.0/3.0);
            double t2434 = C2*t2430*t2432*t2433*(1.0/2.0);
            double t2435 = log(t2434+sqrt(t2434*t2434+1.0));
            double t2436 = C1*t2430*t2432*t2433*t2435*(1.0/2.0);
            double t2437 = pow(t2428,1.0/3.0);
            double t2438 = gamma_aa[index]*gamma_aa[index];
            double t2439 = 1.0/(k*k*k*k);
            double t2440 = 1.0/pow(t2428,1.6E1/3.0);
            double t2441 = C5*t2440*t2438*t2439;
            double t2442 = t2441+t2436+1.0;
            double t2443 = 1.0/t2442;
            double t2446 = gamma_aa[index]*t2427*t2429*1.0E2;
            double t2444 = exp(-t2446);
            double t2448 = C4*t2444;
            double t2445 = C3-t2448;
            double t2447 = 1.0/pow(t2428,1.1E1/3.0);
            double t2449 = gamma_aa[index]*t2427*t2445*t2429;
            double t2450 = t2436+t2449+1.0;
            double t2451 = 1.0/pow(t2428,1.9E1/3.0);
            double t2452 = 1.0/pow(t2428,7.0/3.0);
            double t2453 = C1*t2430*t2432*t2452*t2435*(4.0/3.0);
            double t2454 = C2*C2;
            double t2455 = gamma_aa[index]*t2427*t2454*t2429;
            double t2456 = t2455+1.0;
            double t2457 = 1.0/sqrt(t2456);
            double t2458 = C1*C2*gamma_aa[index]*t2427*t2447*t2457*(8.0/3.0);
            v_rho_a_[index] = e*k*t2450*t2443*t2437+e*k*rho_a[index]*t2450*t2443*1.0/pow(t2428,2.0/3.0)*(2.0/ \
               3.0)-e*k*rho_a[index]*t2443*t2437*(t2453+t2458+gamma_aa[index]*t2427*t2445*t2447*(1.6E1/3.0)+C4*t2451* \
               t2444*t2438*t2439*(1.6E3/3.0))+e*k*rho_a[index]*t2450*1.0/(t2442*t2442)*t2437*(t2453+t2458+C5*t2451* \
               t2438*t2439*(3.2E1/3.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t2460 = rho_a[index]*2.0;
                double t2461 = 1.0/k;
                double t2462 = gamma_aa[index]*4.0;
                double t2463 = sqrt(t2462);
                double t2464 = 1.0/pow(t2460,4.0/3.0);
                double t2465 = 1.0/(k*k);
                double t2466 = 1.0/pow(t2460,8.0/3.0);
                double t2467 = 1.0/(k*k*k*k);
                double t2480 = gamma_aa[index]*t2465*t2466*1.0E2;
                double t2468 = exp(-t2480);
                double t2469 = 1.0/pow(t2460,1.6E1/3.0);
                double t2470 = C2*t2461*t2463*t2464*(1.0/2.0);
                double t2471 = log(t2470+sqrt(t2470*t2470+1.0));
                double t2472 = pow(t2460,1.0/3.0);
                double t2473 = C2*C2;
                double t2474 = gamma_aa[index]*t2473*t2465*t2466;
                double t2475 = t2474+1.0;
                double t2476 = 1.0/sqrt(t2475);
                double t2477 = C1*C2*t2465*t2466*t2476*(1.0/2.0);
                double t2478 = 1.0/sqrt(t2462);
                double t2479 = C1*t2461*t2471*t2464*t2478;
                double t2481 = C3-C4*t2468;
                double t2482 = C1*t2461*t2471*t2463*t2464*(1.0/2.0);
                double t2483 = gamma_aa[index]*gamma_aa[index];
                double t2484 = C5*t2483*t2467*t2469;
                double t2485 = t2482+t2484+1.0;
                v_gamma_aa_[index] = (e*k*rho_a[index]*t2472*(t2477+t2479+t2481*t2465*t2466+C4*gamma_aa[index]*t2467* \
                   t2468*t2469*1.0E2)*2.0)/t2485-e*k*rho_a[index]*t2472*1.0/(t2485*t2485)*(t2477+t2479+C5*gamma_aa[index]* \
                   t2467*t2469*2.0)*(t2482+gamma_aa[index]*t2481*t2465*t2466+1.0)*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t2488 = rho_a[index]*2.0;
            double t2489 = 1.0/k;
            double t2490 = gamma_aa[index]*4.0;
            double t2491 = sqrt(t2490);
            double t2492 = 1.0/pow(t2488,4.0/3.0);
            double t2493 = 1.0/(k*k);
            double t2494 = gamma_aa[index]*gamma_aa[index];
            double t2495 = 1.0/(k*k*k*k);
            double t2496 = 1.0/pow(t2488,8.0/3.0);
            double t2501 = gamma_aa[index]*t2493*t2496*1.0E2;
            double t2497 = exp(-t2501);
            double t2498 = C2*t2491*t2492*t2489*(1.0/2.0);
            double t2499 = log(t2498+sqrt(t2498*t2498+1.0));
            double t2500 = 1.0/pow(t2488,1.1E1/3.0);
            double t2517 = C4*t2497;
            double t2502 = C3-t2517;
            double t2503 = C1*t2491*t2492*t2489*t2499*(1.0/2.0);
            double t2504 = 1.0/pow(t2488,1.6E1/3.0);
            double t2505 = C5*t2494*t2495*t2504;
            double t2506 = t2503+t2505+1.0;
            double t2507 = 1.0/t2506;
            double t2508 = pow(t2488,1.0/3.0);
            double t2509 = 1.0/pow(t2488,1.9E1/3.0);
            double t2510 = 1.0/pow(t2488,7.0/3.0);
            double t2511 = C1*t2491*t2489*t2499*t2510*(4.0/3.0);
            double t2512 = C2*C2;
            double t2513 = gamma_aa[index]*t2493*t2496*t2512;
            double t2514 = t2513+1.0;
            double t2515 = 1.0/sqrt(t2514);
            double t2516 = C1*C2*gamma_aa[index]*t2493*t2500*t2515*(8.0/3.0);
            double t2518 = gamma_aa[index]*t2493*t2496*t2502;
            double t2519 = t2503+t2518+1.0;
            double t2520 = 1.0/pow(t2488,2.0/3.0);
            double t2521 = gamma_aa[index]*t2493*t2500*t2502*(1.6E1/3.0);
            double t2522 = C4*t2494*t2495*t2497*t2509*(1.6E3/3.0);
            double t2523 = t2511+t2521+t2522+t2516;
            double t2524 = 1.0/pow(t2488,2.2E1/3.0);
            double t2525 = 1.0/pow(t2488,1.4E1/3.0);
            double t2526 = C5*t2494*t2495*t2509*(3.2E1/3.0);
            double t2527 = t2511+t2516+t2526;
            double t2528 = 1.0/(t2506*t2506);
            double t2529 = 1.0/pow(t2488,1.0E1/3.0);
            double t2530 = C1*t2491*t2489*t2499*t2529*(5.6E1/9.0);
            double t2531 = 1.0/pow(t2514,3.0/2.0);
            double t2532 = C1*C2*gamma_aa[index]*t2493*t2515*t2525*(8.0E1/3.0);
            v_rho_a_rho_a_[index] = e*k*t2520*t2507*t2519*(4.0/3.0)-e*k*t2523*t2507*t2508*2.0+e*k*t2508*t2527* \
               t2519*t2528*2.0+e*k*rho_a[index]*t2507*t2508*(t2530+t2532+gamma_aa[index]*t2493*t2502*t2525*(3.52E2/ \
               9.0)+C4*t2494*t2495*t2497*t2524*9.6E3-C4*gamma_aa[index]*1.0/(k*k*k*k*k*k)*1.0/pow(rho_a[index],1.0E1) \
               *t2494*t2497*(2.5E3/9.0)-C1*C2*t2494*t2495*t2512*t2531*t2524*(6.4E1/9.0))-e*k*rho_a[index]*1.0/pow(t2488,5.0/ \
               3.0)*t2507*t2519*(8.0/9.0)-e*k*rho_a[index]*t2520*t2523*t2507*(4.0/3.0)+e*k*rho_a[index]*1.0/(t2506* \
               t2506*t2506)*t2508*(t2527*t2527)*t2519*2.0-e*k*rho_a[index]*t2508*t2519*t2528*(t2530+t2532+C5*t2494* \
               t2495*t2524*(1.216E3/9.0)-C1*C2*t2494*t2495*t2512*t2531*t2524*(6.4E1/9.0))+e*k*rho_a[index]*t2520* \
               t2527*t2519*t2528*(4.0/3.0)-e*k*rho_a[index]*t2523*t2508*t2527*t2528*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t2534 = rho_a[index]*2.0;
                double t2535 = 1.0/k;
                double t2536 = gamma_aa[index]*4.0;
                double t2537 = sqrt(t2536);
                double t2538 = 1.0/pow(t2534,4.0/3.0);
                double t2539 = 1.0/(k*k);
                double t2540 = 1.0/pow(t2534,8.0/3.0);
                double t2541 = 1.0/(k*k*k*k);
                double t2552 = gamma_aa[index]*t2540*t2539*1.0E2;
                double t2542 = exp(-t2552);
                double t2543 = 1.0/pow(t2534,1.6E1/3.0);
                double t2544 = C2*t2535*t2537*t2538*(1.0/2.0);
                double t2545 = log(t2544+sqrt(t2544*t2544+1.0));
                double t2546 = pow(t2534,1.0/3.0);
                double t2547 = gamma_aa[index]*gamma_aa[index];
                double t2548 = C5*t2541*t2543*t2547;
                double t2549 = C1*t2535*t2545*t2537*t2538*(1.0/2.0);
                double t2550 = t2548+t2549+1.0;
                double t2551 = 1.0/t2550;
                double t2561 = C4*t2542;
                double t2553 = C3-t2561;
                double t2554 = C2*C2;
                double t2555 = gamma_aa[index]*t2540*t2554*t2539;
                double t2556 = t2555+1.0;
                double t2557 = 1.0/sqrt(t2556);
                double t2558 = 1.0/pow(t2534,1.1E1/3.0);
                double t2559 = 1.0/sqrt(t2536);
                double t2560 = 1.0/pow(t2534,1.9E1/3.0);
                double t2562 = t2540*t2553*t2539;
                double t2563 = C1*C2*t2540*t2539*t2557*(1.0/2.0);
                double t2564 = C4*gamma_aa[index]*t2541*t2542*t2543*1.0E2;
                double t2565 = C1*t2535*t2545*t2538*t2559;
                double t2566 = t2562+t2563+t2564+t2565;
                double t2567 = 1.0/pow(t2534,7.0/3.0);
                double t2568 = 1.0/(t2550*t2550);
                double t2569 = gamma_aa[index]*t2540*t2553*t2539;
                double t2570 = t2549+t2569+1.0;
                double t2571 = C1*C2*t2539*t2557*t2558*4.0;
                double t2572 = C1*t2535*t2545*t2567*t2559*(8.0/3.0);
                double t2573 = 1.0/pow(t2556,3.0/2.0);
                double t2574 = C5*gamma_aa[index]*t2541*t2543*2.0;
                double t2575 = t2563+t2565+t2574;
                double t2576 = C1*t2535*t2545*t2537*t2567*(4.0/3.0);
                double t2577 = C1*C2*gamma_aa[index]*t2539*t2557*t2558*(8.0/3.0);
                double t2578 = 1.0/pow(t2534,2.0/3.0);
                double t2579 = C5*t2541*t2560*t2547*(3.2E1/3.0);
                double t2580 = t2576+t2577+t2579;
                v_rho_a_gamma_aa_[index] = e*k*t2551*t2546*t2566-e*k*t2570*t2546*t2575*t2568-e*k*rho_a[index]*t2551* \
                   t2546*(t2571+t2572+t2553*t2539*t2558*(1.6E1/3.0)-C4*1.0/(k*k*k*k*k*k)*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t2542* \
                   t2547*(6.25E2/6.0)+C4*gamma_aa[index]*t2541*t2542*t2560*1.6E3-C1*C2*gamma_aa[index]*t2541*t2560*t2554* \
                   t2573*(4.0/3.0))+e*k*rho_a[index]*t2551*t2566*t2578*(2.0/3.0)+e*k*rho_a[index]*t2570*t2546*t2568*(t2571+ \
                   t2572+C5*gamma_aa[index]*t2541*t2560*(6.4E1/3.0)-C1*C2*gamma_aa[index]*t2541*t2560*t2554*t2573*(4.0/ \
                   3.0))+e*k*rho_a[index]*t2580*t2546*t2566*t2568-e*k*rho_a[index]*t2570*t2575*t2568*t2578*(2.0/3.0)+ \
                   e*k*rho_a[index]*t2546*t2575*t2568*(t2576+t2577+gamma_aa[index]*t2553*t2539*t2558*(1.6E1/3.0)+C4*t2541* \
                   t2542*t2560*t2547*(1.6E3/3.0))-e*k*rho_a[index]*1.0/(t2550*t2550*t2550)*t2570*t2580*t2546*t2575*2.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t2582 = rho_a[index]*2.0;
                double t2583 = 1.0/k;
                double t2584 = gamma_aa[index]*4.0;
                double t2585 = sqrt(t2584);
                double t2586 = 1.0/pow(t2582,4.0/3.0);
                double t2587 = 1.0/(k*k*k*k);
                double t2588 = 1.0/pow(t2582,1.6E1/3.0);
                double t2589 = C2*C2;
                double t2590 = 1.0/(k*k);
                double t2591 = 1.0/pow(t2582,8.0/3.0);
                double t2600 = gamma_aa[index]*t2590*t2591*1.0E2;
                double t2592 = exp(-t2600);
                double t2593 = C2*t2583*t2585*t2586*(1.0/2.0);
                double t2594 = log(t2593+sqrt(t2593*t2593+1.0));
                double t2595 = gamma_aa[index]*t2590*t2591*t2589;
                double t2596 = t2595+1.0;
                double t2597 = pow(t2582,1.0/3.0);
                double t2598 = 1.0/sqrt(t2596);
                double t2613 = C5*gamma_aa[index]*t2587*t2588*2.0;
                double t2614 = C1*C2*t2590*t2591*t2598*(1.0/2.0);
                double t2615 = 1.0/sqrt(t2584);
                double t2616 = C1*t2583*t2594*t2586*t2615;
                double t2599 = t2613+t2614+t2616;
                double t2601 = C1*t2583*t2585*t2594*t2586*(1.0/2.0);
                double t2602 = gamma_aa[index]*gamma_aa[index];
                double t2603 = C5*t2587*t2588*t2602;
                double t2604 = t2601+t2603+1.0;
                double t2618 = C4*t2592;
                double t2605 = C3-t2618;
                double t2606 = gamma_aa[index]*t2590*t2591*t2605;
                double t2607 = t2601+t2606+1.0;
                double t2608 = 1.0/pow(t2596,3.0/2.0);
                double t2609 = C1*C2*t2587*t2588*t2589*t2608*(1.0/4.0);
                double t2610 = 1.0/pow(t2584,3.0/2.0);
                double t2611 = C1*t2583*t2594*t2586*t2610*2.0;
                double t2612 = 1.0/gamma_aa[index];
                double t2617 = 1.0/(t2604*t2604);
                v_gamma_aa_gamma_aa_[index] = (e*k*rho_a[index]*t2597*(t2611+t2609-C4*t2592*t2587*t2588*2.0E2+C4* \
                   gamma_aa[index]*1.0/(k*k*k*k*k*k)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index])*t2592*(6.25E2/1.6E1)-C1*C2*t2590*t2591*t2598*t2612*(1.0/4.0) \
                   )*-2.0)/t2604+e*k*rho_a[index]*t2597*(t2599*t2599)*1.0/(t2604*t2604*t2604)*t2607*4.0-e*k*rho_a[index]* \
                   t2597*t2599*t2617*(t2614+t2616+t2590*t2591*t2605+C4*gamma_aa[index]*t2592*t2587*t2588*1.0E2)*4.0+e* \
                   k*rho_a[index]*t2597*t2607*t2617*(t2611+t2609-C5*t2587*t2588*2.0-C1*C2*t2590*t2591*t2598*t2612*(1.0/ \
                   4.0))*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void PW91_X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double k = params_[0].second;
    double e = params_[1].second;
    double C1 = params_[2].second;
    double C2 = params_[3].second;
    double C3 = params_[4].second;
    double C4 = params_[5].second;
    double C5 = params_[6].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t1485 = 1.0/(k*k);
            double t1486 = rho_a[index]*2.0;
            double t1487 = 1.0/pow(t1486,8.0/3.0);
            double t1488 = 1.0/k;
            double t1489 = gamma_aa[index]*4.0;
            double t1490 = sqrt(t1489);
            double t1491 = 1.0/pow(t1486,4.0/3.0);
            double t1492 = C2*t1490*t1491*t1488*(1.0/2.0);
            double t1493 = log(t1492+sqrt(t1492*t1492+1.0));
            double t1494 = C1*t1490*t1491*t1493*t1488*(1.0/2.0);
            double t1495 = rho_b[index]*2.0;
            double t1496 = 1.0/pow(t1495,8.0/3.0);
            double t1497 = gamma_bb[index]*4.0;
            double t1498 = sqrt(t1497);
            double t1499 = 1.0/pow(t1495,4.0/3.0);
            double t1500 = 1.0/(k*k*k*k);
            double t1501 = C2*t1488*t1498*t1499*(1.0/2.0);
            double t1502 = log(t1501+sqrt(t1501*t1501+1.0));
            double t1503 = C1*t1488*t1498*t1499*t1502*(1.0/2.0);
            functional_[index] = (e*k*rho_a[index]*pow(t1486,1.0/3.0)*(t1494+gamma_aa[index]*t1485*t1487*(C3- \
               C4*exp(gamma_aa[index]*t1485*t1487*-1.0E2))+1.0))/(t1494+C5*(gamma_aa[index]*gamma_aa[index])*1.0/ \
               pow(t1486,1.6E1/3.0)*t1500+1.0)+(e*k*rho_b[index]*pow(t1495,1.0/3.0)*(t1503+gamma_bb[index]*t1485* \
               t1496*(C3-C4*exp(gamma_bb[index]*t1485*t1496*-1.0E2))+1.0))/(t1503+C5*(gamma_bb[index]*gamma_bb[index]) \
               *1.0/pow(t1495,1.6E1/3.0)*t1500+1.0);
        } else if (rho_a[index] > cutoff_) {
            double t2147 = 1.0/(k*k);
            double t2148 = rho_a[index]*2.0;
            double t2149 = 1.0/pow(t2148,8.0/3.0);
            double t2150 = 1.0/k;
            double t2151 = gamma_aa[index]*4.0;
            double t2152 = sqrt(t2151);
            double t2153 = 1.0/pow(t2148,4.0/3.0);
            double t2154 = C2*t2150*t2152*t2153*(1.0/2.0);
            double t2155 = log(t2154+sqrt(t2154*t2154+1.0));
            double t2156 = C1*t2150*t2152*t2153*t2155*(1.0/2.0);
            functional_[index] = (e*k*rho_a[index]*pow(t2148,1.0/3.0)*(t2156+gamma_aa[index]*t2147*t2149*(C3- \
               C4*exp(gamma_aa[index]*t2147*t2149*-1.0E2))+1.0))/(t2156+C5*(gamma_aa[index]*gamma_aa[index])*1.0/ \
               (k*k*k*k)*1.0/pow(t2148,1.6E1/3.0)+1.0);
        } else if (rho_b[index] > cutoff_) {
            double t1914 = 1.0/(k*k);
            double t1915 = rho_b[index]*2.0;
            double t1916 = 1.0/pow(t1915,8.0/3.0);
            double t1917 = 1.0/k;
            double t1918 = gamma_bb[index]*4.0;
            double t1919 = sqrt(t1918);
            double t1920 = 1.0/pow(t1915,4.0/3.0);
            double t1921 = C2*t1920*t1917*t1919*(1.0/2.0);
            double t1922 = log(t1921+sqrt(t1921*t1921+1.0));
            double t1923 = C1*t1920*t1922*t1917*t1919*(1.0/2.0);
            functional_[index] = (e*k*rho_b[index]*pow(t1915,1.0/3.0)*(t1923+gamma_bb[index]*t1914*t1916*(C3- \
               C4*exp(gamma_bb[index]*t1914*t1916*-1.0E2))+1.0))/(t1923+C5*(gamma_bb[index]*gamma_bb[index])*1.0/ \
               (k*k*k*k)*1.0/pow(t1915,1.6E1/3.0)+1.0);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t1505 = 1.0/(k*k);
            double t1506 = rho_a[index]*2.0;
            double t1507 = 1.0/pow(t1506,8.0/3.0);
            double t1508 = 1.0/k;
            double t1509 = gamma_aa[index]*4.0;
            double t1510 = sqrt(t1509);
            double t1511 = 1.0/pow(t1506,4.0/3.0);
            double t1512 = C2*t1510*t1511*t1508*(1.0/2.0);
            double t1513 = log(t1512+sqrt(t1512*t1512+1.0));
            double t1514 = C1*t1510*t1511*t1513*t1508*(1.0/2.0);
            double t1515 = pow(t1506,1.0/3.0);
            double t1516 = gamma_aa[index]*gamma_aa[index];
            double t1517 = 1.0/(k*k*k*k);
            double t1518 = 1.0/pow(t1506,1.6E1/3.0);
            double t1519 = C5*t1516*t1517*t1518;
            double t1520 = t1514+t1519+1.0;
            double t1521 = 1.0/t1520;
            double t1524 = gamma_aa[index]*t1505*t1507*1.0E2;
            double t1522 = exp(-t1524);
            double t1526 = C4*t1522;
            double t1523 = C3-t1526;
            double t1525 = 1.0/pow(t1506,1.1E1/3.0);
            double t1527 = gamma_aa[index]*t1505*t1523*t1507;
            double t1528 = t1514+t1527+1.0;
            double t1529 = 1.0/pow(t1506,1.9E1/3.0);
            double t1530 = 1.0/pow(t1506,7.0/3.0);
            double t1531 = C1*t1510*t1530*t1513*t1508*(4.0/3.0);
            double t1532 = C2*C2;
            double t1533 = gamma_aa[index]*t1505*t1532*t1507;
            double t1534 = t1533+1.0;
            double t1535 = 1.0/sqrt(t1534);
            double t1536 = C1*C2*gamma_aa[index]*t1505*t1525*t1535*(8.0/3.0);
            v_rho_a_[index] = e*k*t1521*t1515*t1528+e*k*rho_a[index]*t1521*1.0/pow(t1506,2.0/3.0)*t1528*(2.0/ \
               3.0)-e*k*rho_a[index]*t1521*t1515*(t1531+t1536+gamma_aa[index]*t1505*t1523*t1525*(1.6E1/3.0)+C4*t1522* \
               t1516*t1517*t1529*(1.6E3/3.0))+e*k*rho_a[index]*1.0/(t1520*t1520)*t1515*t1528*(t1531+t1536+C5*t1516* \
               t1517*t1529*(3.2E1/3.0));
        } else if (rho_a[index] > cutoff_) {
            double t2158 = 1.0/(k*k);
            double t2159 = rho_a[index]*2.0;
            double t2160 = 1.0/pow(t2159,8.0/3.0);
            double t2161 = 1.0/k;
            double t2162 = gamma_aa[index]*4.0;
            double t2163 = sqrt(t2162);
            double t2164 = 1.0/pow(t2159,4.0/3.0);
            double t2165 = C2*t2161*t2163*t2164*(1.0/2.0);
            double t2166 = log(t2165+sqrt(t2165*t2165+1.0));
            double t2167 = C1*t2161*t2163*t2164*t2166*(1.0/2.0);
            double t2168 = pow(t2159,1.0/3.0);
            double t2169 = gamma_aa[index]*gamma_aa[index];
            double t2170 = 1.0/(k*k*k*k);
            double t2171 = 1.0/pow(t2159,1.6E1/3.0);
            double t2172 = C5*t2170*t2171*t2169;
            double t2173 = t2172+t2167+1.0;
            double t2174 = 1.0/t2173;
            double t2177 = gamma_aa[index]*t2160*t2158*1.0E2;
            double t2175 = exp(-t2177);
            double t2179 = C4*t2175;
            double t2176 = C3-t2179;
            double t2178 = 1.0/pow(t2159,1.1E1/3.0);
            double t2180 = gamma_aa[index]*t2160*t2158*t2176;
            double t2181 = t2180+t2167+1.0;
            double t2182 = 1.0/pow(t2159,1.9E1/3.0);
            double t2183 = 1.0/pow(t2159,7.0/3.0);
            double t2184 = C1*t2161*t2163*t2183*t2166*(4.0/3.0);
            double t2185 = C2*C2;
            double t2186 = gamma_aa[index]*t2160*t2158*t2185;
            double t2187 = t2186+1.0;
            double t2188 = 1.0/sqrt(t2187);
            double t2189 = C1*C2*gamma_aa[index]*t2158*t2178*t2188*(8.0/3.0);
            v_rho_a_[index] = e*k*t2181*t2174*t2168+e*k*rho_a[index]*t2181*t2174*1.0/pow(t2159,2.0/3.0)*(2.0/ \
               3.0)-e*k*rho_a[index]*t2174*t2168*(t2184+t2189+gamma_aa[index]*t2158*t2176*t2178*(1.6E1/3.0)+C4*t2170* \
               t2182*t2175*t2169*(1.6E3/3.0))+e*k*rho_a[index]*t2181*1.0/(t2173*t2173)*t2168*(t2184+t2189+C5*t2170* \
               t2182*t2169*(3.2E1/3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t1538 = 1.0/(k*k);
            double t1539 = rho_b[index]*2.0;
            double t1540 = 1.0/pow(t1539,8.0/3.0);
            double t1541 = 1.0/k;
            double t1542 = gamma_bb[index]*4.0;
            double t1543 = sqrt(t1542);
            double t1544 = 1.0/pow(t1539,4.0/3.0);
            double t1545 = C2*t1541*t1543*t1544*(1.0/2.0);
            double t1546 = log(t1545+sqrt(t1545*t1545+1.0));
            double t1547 = C1*t1541*t1543*t1544*t1546*(1.0/2.0);
            double t1548 = pow(t1539,1.0/3.0);
            double t1549 = gamma_bb[index]*gamma_bb[index];
            double t1550 = 1.0/(k*k*k*k);
            double t1551 = 1.0/pow(t1539,1.6E1/3.0);
            double t1552 = C5*t1550*t1551*t1549;
            double t1553 = t1552+t1547+1.0;
            double t1554 = 1.0/t1553;
            double t1557 = gamma_bb[index]*t1540*t1538*1.0E2;
            double t1555 = exp(-t1557);
            double t1559 = C4*t1555;
            double t1556 = C3-t1559;
            double t1558 = 1.0/pow(t1539,1.1E1/3.0);
            double t1560 = gamma_bb[index]*t1540*t1538*t1556;
            double t1561 = t1560+t1547+1.0;
            double t1562 = 1.0/pow(t1539,1.9E1/3.0);
            double t1563 = 1.0/pow(t1539,7.0/3.0);
            double t1564 = C1*t1541*t1543*t1563*t1546*(4.0/3.0);
            double t1565 = C2*C2;
            double t1566 = gamma_bb[index]*t1540*t1538*t1565;
            double t1567 = t1566+1.0;
            double t1568 = 1.0/sqrt(t1567);
            double t1569 = C1*C2*gamma_bb[index]*t1538*t1558*t1568*(8.0/3.0);
            v_rho_b_[index] = e*k*t1561*t1554*t1548+e*k*rho_b[index]*t1561*t1554*1.0/pow(t1539,2.0/3.0)*(2.0/ \
               3.0)-e*k*rho_b[index]*t1554*t1548*(t1564+t1569+gamma_bb[index]*t1538*t1556*t1558*(1.6E1/3.0)+C4*t1550* \
               t1562*t1555*t1549*(1.6E3/3.0))+e*k*rho_b[index]*t1561*1.0/(t1553*t1553)*t1548*(t1564+t1569+C5*t1550* \
               t1562*t1549*(3.2E1/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t1926 = 1.0/(k*k);
            double t1927 = rho_b[index]*2.0;
            double t1928 = 1.0/pow(t1927,8.0/3.0);
            double t1929 = 1.0/k;
            double t1930 = gamma_bb[index]*4.0;
            double t1931 = sqrt(t1930);
            double t1932 = 1.0/pow(t1927,4.0/3.0);
            double t1933 = C2*t1931*t1932*t1929*(1.0/2.0);
            double t1934 = log(t1933+sqrt(t1933*t1933+1.0));
            double t1935 = C1*t1931*t1932*t1934*t1929*(1.0/2.0);
            double t1936 = pow(t1927,1.0/3.0);
            double t1937 = gamma_bb[index]*gamma_bb[index];
            double t1938 = 1.0/(k*k*k*k);
            double t1939 = 1.0/pow(t1927,1.6E1/3.0);
            double t1940 = C5*t1937*t1938*t1939;
            double t1941 = t1940+t1935+1.0;
            double t1942 = 1.0/t1941;
            double t1945 = gamma_bb[index]*t1926*t1928*1.0E2;
            double t1943 = exp(-t1945);
            double t1947 = C4*t1943;
            double t1944 = C3-t1947;
            double t1946 = 1.0/pow(t1927,1.1E1/3.0);
            double t1948 = gamma_bb[index]*t1926*t1944*t1928;
            double t1949 = t1935+t1948+1.0;
            double t1950 = 1.0/pow(t1927,1.9E1/3.0);
            double t1951 = 1.0/pow(t1927,7.0/3.0);
            double t1952 = C1*t1931*t1951*t1934*t1929*(4.0/3.0);
            double t1953 = C2*C2;
            double t1954 = gamma_bb[index]*t1926*t1953*t1928;
            double t1955 = t1954+1.0;
            double t1956 = 1.0/sqrt(t1955);
            double t1957 = C1*C2*gamma_bb[index]*t1926*t1946*t1956*(8.0/3.0);
            v_rho_b_[index] = e*k*t1942*t1936*t1949+e*k*rho_b[index]*t1942*1.0/pow(t1927,2.0/3.0)*t1949*(2.0/ \
               3.0)-e*k*rho_b[index]*t1942*t1936*(t1952+t1957+gamma_bb[index]*t1926*t1944*t1946*(1.6E1/3.0)+C4*t1950* \
               t1943*t1937*t1938*(1.6E3/3.0))+e*k*rho_b[index]*1.0/(t1941*t1941)*t1936*t1949*(t1952+t1957+C5*t1950* \
               t1937*t1938*(3.2E1/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t1571 = rho_a[index]*2.0;
                double t1572 = 1.0/k;
                double t1573 = gamma_aa[index]*4.0;
                double t1574 = sqrt(t1573);
                double t1575 = 1.0/pow(t1571,4.0/3.0);
                double t1576 = 1.0/(k*k);
                double t1577 = 1.0/pow(t1571,8.0/3.0);
                double t1578 = 1.0/(k*k*k*k);
                double t1591 = gamma_aa[index]*t1576*t1577*1.0E2;
                double t1579 = exp(-t1591);
                double t1580 = 1.0/pow(t1571,1.6E1/3.0);
                double t1581 = C2*t1572*t1574*t1575*(1.0/2.0);
                double t1582 = log(t1581+sqrt(t1581*t1581+1.0));
                double t1583 = pow(t1571,1.0/3.0);
                double t1584 = C2*C2;
                double t1585 = gamma_aa[index]*t1584*t1576*t1577;
                double t1586 = t1585+1.0;
                double t1587 = 1.0/sqrt(t1586);
                double t1588 = C1*C2*t1576*t1577*t1587*(1.0/2.0);
                double t1589 = 1.0/sqrt(t1573);
                double t1590 = C1*t1572*t1582*t1575*t1589;
                double t1592 = C3-C4*t1579;
                double t1593 = C1*t1572*t1582*t1574*t1575*(1.0/2.0);
                double t1594 = gamma_aa[index]*gamma_aa[index];
                double t1595 = C5*t1580*t1594*t1578;
                double t1596 = t1593+t1595+1.0;
                v_gamma_aa_[index] = (e*k*rho_a[index]*t1583*(t1590+t1588+t1592*t1576*t1577+C4*gamma_aa[index]*t1580* \
                   t1578*t1579*1.0E2))/t1596-e*k*rho_a[index]*t1583*1.0/(t1596*t1596)*(t1590+t1588+C5*gamma_aa[index]* \
                   t1580*t1578*2.0)*(t1593+gamma_aa[index]*t1592*t1576*t1577+1.0);
            } else if (rho_a[index] > cutoff_) {
                double t2192 = rho_a[index]*2.0;
                double t2193 = 1.0/k;
                double t2194 = gamma_aa[index]*4.0;
                double t2195 = sqrt(t2194);
                double t2196 = 1.0/pow(t2192,4.0/3.0);
                double t2197 = 1.0/(k*k);
                double t2198 = 1.0/pow(t2192,8.0/3.0);
                double t2199 = 1.0/(k*k*k*k);
                double t2212 = gamma_aa[index]*t2197*t2198*1.0E2;
                double t2200 = exp(-t2212);
                double t2201 = 1.0/pow(t2192,1.6E1/3.0);
                double t2202 = C2*t2193*t2195*t2196*(1.0/2.0);
                double t2203 = log(t2202+sqrt(t2202*t2202+1.0));
                double t2204 = pow(t2192,1.0/3.0);
                double t2205 = C2*C2;
                double t2206 = gamma_aa[index]*t2197*t2198*t2205;
                double t2207 = t2206+1.0;
                double t2208 = 1.0/sqrt(t2207);
                double t2209 = C1*C2*t2197*t2198*t2208*(1.0/2.0);
                double t2210 = 1.0/sqrt(t2194);
                double t2211 = C1*t2193*t2196*t2210*t2203;
                double t2213 = C3-C4*t2200;
                double t2214 = C1*t2193*t2195*t2196*t2203*(1.0/2.0);
                double t2215 = gamma_aa[index]*gamma_aa[index];
                double t2216 = C5*t2199*t2201*t2215;
                double t2217 = t2214+t2216+1.0;
                v_gamma_aa_[index] = (e*k*rho_a[index]*t2204*(t2211+t2209+t2197*t2198*t2213+C4*gamma_aa[index]*t2199* \
                   t2200*t2201*1.0E2))/t2217-e*k*rho_a[index]*t2204*1.0/(t2217*t2217)*(t2211+t2209+C5*gamma_aa[index]* \
                   t2199*t2201*2.0)*(t2214+gamma_aa[index]*t2197*t2198*t2213+1.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t1599 = rho_b[index]*2.0;
                double t1600 = 1.0/k;
                double t1601 = gamma_bb[index]*4.0;
                double t1602 = sqrt(t1601);
                double t1603 = 1.0/pow(t1599,4.0/3.0);
                double t1604 = 1.0/(k*k);
                double t1605 = 1.0/pow(t1599,8.0/3.0);
                double t1606 = 1.0/(k*k*k*k);
                double t1619 = gamma_bb[index]*t1604*t1605*1.0E2;
                double t1607 = exp(-t1619);
                double t1608 = 1.0/pow(t1599,1.6E1/3.0);
                double t1609 = C2*t1600*t1602*t1603*(1.0/2.0);
                double t1610 = log(t1609+sqrt(t1609*t1609+1.0));
                double t1611 = pow(t1599,1.0/3.0);
                double t1612 = C2*C2;
                double t1613 = gamma_bb[index]*t1612*t1604*t1605;
                double t1614 = t1613+1.0;
                double t1615 = 1.0/sqrt(t1614);
                double t1616 = C1*C2*t1604*t1605*t1615*(1.0/2.0);
                double t1617 = 1.0/sqrt(t1601);
                double t1618 = C1*t1600*t1610*t1603*t1617;
                double t1620 = C3-C4*t1607;
                double t1621 = C1*t1600*t1610*t1602*t1603*(1.0/2.0);
                double t1622 = gamma_bb[index]*gamma_bb[index];
                double t1623 = C5*t1622*t1606*t1608;
                double t1624 = t1621+t1623+1.0;
                v_gamma_bb_[index] = (e*k*rho_b[index]*t1611*(t1616+t1618+t1620*t1604*t1605+C4*gamma_bb[index]*t1606* \
                   t1607*t1608*1.0E2))/t1624-e*k*rho_b[index]*t1611*1.0/(t1624*t1624)*(t1616+t1618+C5*gamma_bb[index]* \
                   t1606*t1608*2.0)*(t1621+gamma_bb[index]*t1620*t1604*t1605+1.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t1961 = rho_b[index]*2.0;
                double t1962 = 1.0/k;
                double t1963 = gamma_bb[index]*4.0;
                double t1964 = sqrt(t1963);
                double t1965 = 1.0/pow(t1961,4.0/3.0);
                double t1966 = 1.0/(k*k);
                double t1967 = 1.0/pow(t1961,8.0/3.0);
                double t1968 = 1.0/(k*k*k*k);
                double t1981 = gamma_bb[index]*t1966*t1967*1.0E2;
                double t1969 = exp(-t1981);
                double t1970 = 1.0/pow(t1961,1.6E1/3.0);
                double t1971 = C2*t1962*t1964*t1965*(1.0/2.0);
                double t1972 = log(t1971+sqrt(t1971*t1971+1.0));
                double t1973 = pow(t1961,1.0/3.0);
                double t1974 = C2*C2;
                double t1975 = gamma_bb[index]*t1974*t1966*t1967;
                double t1976 = t1975+1.0;
                double t1977 = 1.0/sqrt(t1976);
                double t1978 = C1*C2*t1966*t1967*t1977*(1.0/2.0);
                double t1979 = 1.0/sqrt(t1963);
                double t1980 = C1*t1962*t1972*t1965*t1979;
                double t1982 = C3-C4*t1969;
                double t1983 = C1*t1962*t1972*t1964*t1965*(1.0/2.0);
                double t1984 = gamma_bb[index]*gamma_bb[index];
                double t1985 = C5*t1970*t1984*t1968;
                double t1986 = t1983+t1985+1.0;
                v_gamma_bb_[index] = (e*k*rho_b[index]*t1973*(t1980+t1978+t1982*t1966*t1967+C4*gamma_bb[index]*t1970* \
                   t1968*t1969*1.0E2))/t1986-e*k*rho_b[index]*t1973*1.0/(t1986*t1986)*(t1980+t1978+C5*gamma_bb[index]* \
                   t1970*t1968*2.0)*(t1983+gamma_bb[index]*t1982*t1966*t1967+1.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t1628 = rho_a[index]*2.0;
            double t1629 = 1.0/k;
            double t1630 = gamma_aa[index]*4.0;
            double t1631 = sqrt(t1630);
            double t1632 = 1.0/pow(t1628,4.0/3.0);
            double t1633 = 1.0/(k*k);
            double t1634 = gamma_aa[index]*gamma_aa[index];
            double t1635 = 1.0/(k*k*k*k);
            double t1636 = 1.0/pow(t1628,8.0/3.0);
            double t1641 = gamma_aa[index]*t1633*t1636*1.0E2;
            double t1637 = exp(-t1641);
            double t1638 = C2*t1631*t1632*t1629*(1.0/2.0);
            double t1639 = log(t1638+sqrt(t1638*t1638+1.0));
            double t1640 = 1.0/pow(t1628,1.1E1/3.0);
            double t1657 = C4*t1637;
            double t1642 = C3-t1657;
            double t1643 = C1*t1631*t1632*t1629*t1639*(1.0/2.0);
            double t1644 = 1.0/pow(t1628,1.6E1/3.0);
            double t1645 = C5*t1634*t1635*t1644;
            double t1646 = t1643+t1645+1.0;
            double t1647 = 1.0/t1646;
            double t1648 = pow(t1628,1.0/3.0);
            double t1649 = 1.0/pow(t1628,1.9E1/3.0);
            double t1650 = 1.0/pow(t1628,7.0/3.0);
            double t1651 = C1*t1631*t1650*t1629*t1639*(4.0/3.0);
            double t1652 = C2*C2;
            double t1653 = gamma_aa[index]*t1633*t1652*t1636;
            double t1654 = t1653+1.0;
            double t1655 = 1.0/sqrt(t1654);
            double t1656 = C1*C2*gamma_aa[index]*t1640*t1633*t1655*(8.0/3.0);
            double t1658 = gamma_aa[index]*t1633*t1642*t1636;
            double t1659 = t1643+t1658+1.0;
            double t1660 = 1.0/pow(t1628,2.0/3.0);
            double t1661 = gamma_aa[index]*t1640*t1633*t1642*(1.6E1/3.0);
            double t1662 = C4*t1634*t1635*t1637*t1649*(1.6E3/3.0);
            double t1663 = t1651+t1661+t1662+t1656;
            double t1664 = 1.0/pow(t1628,2.2E1/3.0);
            double t1665 = 1.0/pow(t1628,1.4E1/3.0);
            double t1666 = C5*t1634*t1635*t1649*(3.2E1/3.0);
            double t1667 = t1651+t1656+t1666;
            double t1668 = 1.0/(t1646*t1646);
            double t1669 = 1.0/pow(t1628,1.0E1/3.0);
            double t1670 = C1*t1631*t1629*t1639*t1669*(5.6E1/9.0);
            double t1671 = 1.0/pow(t1654,3.0/2.0);
            double t1672 = C1*C2*gamma_aa[index]*t1633*t1655*t1665*(8.0E1/3.0);
            v_rho_a_rho_a_[index] = e*k*t1660*t1647*t1659*(4.0/3.0)-e*k*t1663*t1647*t1648*2.0+e*k*t1648*t1667* \
               t1659*t1668*2.0+e*k*rho_a[index]*t1647*t1648*(t1670+t1672+gamma_aa[index]*t1633*t1642*t1665*(3.52E2/ \
               9.0)+C4*t1634*t1635*t1637*t1664*9.6E3-C4*gamma_aa[index]*1.0/(k*k*k*k*k*k)*1.0/pow(rho_a[index],1.0E1) \
               *t1634*t1637*(2.5E3/9.0)-C1*C2*t1634*t1652*t1635*t1671*t1664*(6.4E1/9.0))-e*k*rho_a[index]*1.0/pow(t1628,5.0/ \
               3.0)*t1647*t1659*(8.0/9.0)-e*k*rho_a[index]*t1660*t1663*t1647*(4.0/3.0)+e*k*rho_a[index]*1.0/(t1646* \
               t1646*t1646)*t1648*(t1667*t1667)*t1659*2.0-e*k*rho_a[index]*t1648*t1659*t1668*(t1670+t1672+C5*t1634* \
               t1635*t1664*(1.216E3/9.0)-C1*C2*t1634*t1652*t1635*t1671*t1664*(6.4E1/9.0))+e*k*rho_a[index]*t1660* \
               t1667*t1659*t1668*(4.0/3.0)-e*k*rho_a[index]*t1663*t1648*t1667*t1668*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t2223 = rho_a[index]*2.0;
            double t2224 = 1.0/k;
            double t2225 = gamma_aa[index]*4.0;
            double t2226 = sqrt(t2225);
            double t2227 = 1.0/pow(t2223,4.0/3.0);
            double t2228 = 1.0/(k*k);
            double t2229 = gamma_aa[index]*gamma_aa[index];
            double t2230 = 1.0/(k*k*k*k);
            double t2231 = 1.0/pow(t2223,8.0/3.0);
            double t2236 = gamma_aa[index]*t2231*t2228*1.0E2;
            double t2232 = exp(-t2236);
            double t2233 = C2*t2224*t2226*t2227*(1.0/2.0);
            double t2234 = log(t2233+sqrt(t2233*t2233+1.0));
            double t2235 = 1.0/pow(t2223,1.1E1/3.0);
            double t2252 = C4*t2232;
            double t2237 = C3-t2252;
            double t2238 = C1*t2224*t2234*t2226*t2227*(1.0/2.0);
            double t2239 = 1.0/pow(t2223,1.6E1/3.0);
            double t2240 = C5*t2230*t2229*t2239;
            double t2241 = t2240+t2238+1.0;
            double t2242 = 1.0/t2241;
            double t2243 = pow(t2223,1.0/3.0);
            double t2244 = 1.0/pow(t2223,1.9E1/3.0);
            double t2245 = 1.0/pow(t2223,7.0/3.0);
            double t2246 = C1*t2224*t2234*t2226*t2245*(4.0/3.0);
            double t2247 = C2*C2;
            double t2248 = gamma_aa[index]*t2231*t2228*t2247;
            double t2249 = t2248+1.0;
            double t2250 = 1.0/sqrt(t2249);
            double t2251 = C1*C2*gamma_aa[index]*t2250*t2235*t2228*(8.0/3.0);
            double t2253 = gamma_aa[index]*t2231*t2228*t2237;
            double t2254 = t2253+t2238+1.0;
            double t2255 = 1.0/pow(t2223,2.0/3.0);
            double t2256 = gamma_aa[index]*t2235*t2228*t2237*(1.6E1/3.0);
            double t2257 = C4*t2230*t2232*t2244*t2229*(1.6E3/3.0);
            double t2258 = t2251+t2246+t2256+t2257;
            double t2259 = 1.0/pow(t2223,2.2E1/3.0);
            double t2260 = 1.0/pow(t2223,1.4E1/3.0);
            double t2261 = C5*t2230*t2244*t2229*(3.2E1/3.0);
            double t2262 = t2251+t2261+t2246;
            double t2263 = 1.0/(t2241*t2241);
            double t2264 = 1.0/pow(t2223,1.0E1/3.0);
            double t2265 = C1*t2224*t2234*t2226*t2264*(5.6E1/9.0);
            double t2266 = 1.0/pow(t2249,3.0/2.0);
            double t2267 = C1*C2*gamma_aa[index]*t2250*t2260*t2228*(8.0E1/3.0);
            v_rho_a_rho_a_[index] = e*k*t2242*t2254*t2255*(4.0/3.0)-e*k*t2242*t2243*t2258*2.0+e*k*t2243*t2262* \
               t2254*t2263*2.0+e*k*rho_a[index]*t2242*t2243*(t2265+t2267+gamma_aa[index]*t2260*t2228*t2237*(3.52E2/ \
               9.0)+C4*t2230*t2232*t2229*t2259*9.6E3-C4*gamma_aa[index]*1.0/(k*k*k*k*k*k)*1.0/pow(rho_a[index],1.0E1) \
               *t2232*t2229*(2.5E3/9.0)-C1*C2*t2230*t2229*t2247*t2266*t2259*(6.4E1/9.0))-e*k*rho_a[index]*1.0/pow(t2223,5.0/ \
               3.0)*t2242*t2254*(8.0/9.0)-e*k*rho_a[index]*t2242*t2255*t2258*(4.0/3.0)+e*k*rho_a[index]*1.0/(t2241* \
               t2241*t2241)*t2243*(t2262*t2262)*t2254*2.0-e*k*rho_a[index]*t2243*t2254*t2263*(t2265+t2267+C5*t2230* \
               t2229*t2259*(1.216E3/9.0)-C1*C2*t2230*t2229*t2247*t2266*t2259*(6.4E1/9.0))+e*k*rho_a[index]*t2262* \
               t2254*t2263*t2255*(4.0/3.0)-e*k*rho_a[index]*t2243*t2262*t2263*t2258*2.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t1675 = rho_b[index]*2.0;
            double t1676 = 1.0/k;
            double t1677 = gamma_bb[index]*4.0;
            double t1678 = sqrt(t1677);
            double t1679 = 1.0/pow(t1675,4.0/3.0);
            double t1680 = 1.0/(k*k);
            double t1681 = gamma_bb[index]*gamma_bb[index];
            double t1682 = 1.0/(k*k*k*k);
            double t1683 = 1.0/pow(t1675,8.0/3.0);
            double t1688 = gamma_bb[index]*t1680*t1683*1.0E2;
            double t1684 = exp(-t1688);
            double t1685 = C2*t1676*t1678*t1679*(1.0/2.0);
            double t1686 = log(t1685+sqrt(t1685*t1685+1.0));
            double t1687 = 1.0/pow(t1675,1.1E1/3.0);
            double t1704 = C4*t1684;
            double t1689 = C3-t1704;
            double t1690 = C1*t1676*t1686*t1678*t1679*(1.0/2.0);
            double t1691 = 1.0/pow(t1675,1.6E1/3.0);
            double t1692 = C5*t1681*t1682*t1691;
            double t1693 = t1690+t1692+1.0;
            double t1694 = 1.0/t1693;
            double t1695 = pow(t1675,1.0/3.0);
            double t1696 = 1.0/pow(t1675,1.9E1/3.0);
            double t1697 = 1.0/pow(t1675,7.0/3.0);
            double t1698 = C1*t1676*t1686*t1678*t1697*(4.0/3.0);
            double t1699 = C2*C2;
            double t1700 = gamma_bb[index]*t1680*t1683*t1699;
            double t1701 = t1700+1.0;
            double t1702 = 1.0/sqrt(t1701);
            double t1703 = C1*C2*gamma_bb[index]*t1680*t1687*t1702*(8.0/3.0);
            double t1705 = gamma_bb[index]*t1680*t1683*t1689;
            double t1706 = t1690+t1705+1.0;
            double t1707 = 1.0/pow(t1675,2.0/3.0);
            double t1708 = gamma_bb[index]*t1680*t1687*t1689*(1.6E1/3.0);
            double t1709 = C4*t1681*t1682*t1684*t1696*(1.6E3/3.0);
            double t1710 = t1698+t1703+t1708+t1709;
            double t1711 = 1.0/pow(t1675,2.2E1/3.0);
            double t1712 = 1.0/pow(t1675,1.4E1/3.0);
            double t1713 = C5*t1681*t1682*t1696*(3.2E1/3.0);
            double t1714 = t1698+t1703+t1713;
            double t1715 = 1.0/(t1693*t1693);
            double t1716 = 1.0/pow(t1675,1.0E1/3.0);
            double t1717 = C1*t1676*t1686*t1678*t1716*(5.6E1/9.0);
            double t1718 = 1.0/pow(t1701,3.0/2.0);
            double t1719 = C1*C2*gamma_bb[index]*t1680*t1702*t1712*(8.0E1/3.0);
            v_rho_b_rho_b_[index] = e*k*t1694*t1695*t1710*-2.0+e*k*t1694*t1706*t1707*(4.0/3.0)+e*k*t1695*t1714* \
               t1706*t1715*2.0+e*k*rho_b[index]*t1694*t1695*(t1717+t1719+gamma_bb[index]*t1680*t1689*t1712*(3.52E2/ \
               9.0)+C4*t1681*t1682*t1684*t1711*9.6E3-C4*gamma_bb[index]*1.0/(k*k*k*k*k*k)*1.0/pow(rho_b[index],1.0E1) \
               *t1681*t1684*(2.5E3/9.0)-C1*C2*t1681*t1682*t1699*t1711*t1718*(6.4E1/9.0))-e*k*rho_b[index]*1.0/pow(t1675,5.0/ \
               3.0)*t1694*t1706*(8.0/9.0)-e*k*rho_b[index]*t1694*t1710*t1707*(4.0/3.0)+e*k*rho_b[index]*1.0/(t1693* \
               t1693*t1693)*t1695*(t1714*t1714)*t1706*2.0-e*k*rho_b[index]*t1695*t1706*t1715*(t1717+t1719+C5*t1681* \
               t1682*t1711*(1.216E3/9.0)-C1*C2*t1681*t1682*t1699*t1711*t1718*(6.4E1/9.0))-e*k*rho_b[index]*t1695* \
               t1710*t1714*t1715*2.0+e*k*rho_b[index]*t1714*t1706*t1715*t1707*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t1992 = rho_b[index]*2.0;
            double t1993 = 1.0/k;
            double t1994 = gamma_bb[index]*4.0;
            double t1995 = sqrt(t1994);
            double t1996 = 1.0/pow(t1992,4.0/3.0);
            double t1997 = 1.0/(k*k);
            double t1998 = gamma_bb[index]*gamma_bb[index];
            double t1999 = 1.0/(k*k*k*k);
            double t2000 = 1.0/pow(t1992,8.0/3.0);
            double t2005 = gamma_bb[index]*t1997*t2000*1.0E2;
            double t2001 = exp(-t2005);
            double t2002 = C2*t1993*t1995*t1996*(1.0/2.0);
            double t2003 = log(t2002+sqrt(t2002*t2002+1.0));
            double t2004 = 1.0/pow(t1992,1.1E1/3.0);
            double t2021 = C4*t2001;
            double t2006 = C3-t2021;
            double t2007 = C1*t1993*t1995*t1996*t2003*(1.0/2.0);
            double t2008 = 1.0/pow(t1992,1.6E1/3.0);
            double t2009 = C5*t1998*t1999*t2008;
            double t2010 = t2007+t2009+1.0;
            double t2011 = 1.0/t2010;
            double t2012 = pow(t1992,1.0/3.0);
            double t2013 = 1.0/pow(t1992,1.9E1/3.0);
            double t2014 = 1.0/pow(t1992,7.0/3.0);
            double t2015 = C1*t1993*t1995*t2003*t2014*(4.0/3.0);
            double t2016 = C2*C2;
            double t2017 = gamma_bb[index]*t1997*t2000*t2016;
            double t2018 = t2017+1.0;
            double t2019 = 1.0/sqrt(t2018);
            double t2020 = C1*C2*gamma_bb[index]*t1997*t2004*t2019*(8.0/3.0);
            double t2022 = gamma_bb[index]*t1997*t2000*t2006;
            double t2023 = t2022+t2007+1.0;
            double t2024 = 1.0/pow(t1992,2.0/3.0);
            double t2025 = gamma_bb[index]*t1997*t2004*t2006*(1.6E1/3.0);
            double t2026 = C4*t1998*t1999*t2001*t2013*(1.6E3/3.0);
            double t2027 = t2020+t2015+t2025+t2026;
            double t2028 = 1.0/pow(t1992,2.2E1/3.0);
            double t2029 = 1.0/pow(t1992,1.4E1/3.0);
            double t2030 = C5*t1998*t1999*t2013*(3.2E1/3.0);
            double t2031 = t2020+t2030+t2015;
            double t2032 = 1.0/(t2010*t2010);
            double t2033 = 1.0/pow(t1992,1.0E1/3.0);
            double t2034 = C1*t1993*t1995*t2003*t2033*(5.6E1/9.0);
            double t2035 = 1.0/pow(t2018,3.0/2.0);
            double t2036 = C1*C2*gamma_bb[index]*t1997*t2019*t2029*(8.0E1/3.0);
            v_rho_b_rho_b_[index] = e*k*t2011*t2023*t2024*(4.0/3.0)-e*k*t2011*t2012*t2027*2.0+e*k*t2012*t2031* \
               t2023*t2032*2.0+e*k*rho_b[index]*t2011*t2012*(t2034+t2036+gamma_bb[index]*t1997*t2006*t2029*(3.52E2/ \
               9.0)+C4*t1998*t1999*t2001*t2028*9.6E3-C4*gamma_bb[index]*1.0/(k*k*k*k*k*k)*1.0/pow(rho_b[index],1.0E1) \
               *t1998*t2001*(2.5E3/9.0)-C1*C2*t1998*t1999*t2016*t2035*t2028*(6.4E1/9.0))-e*k*rho_b[index]*1.0/pow(t1992,5.0/ \
               3.0)*t2011*t2023*(8.0/9.0)-e*k*rho_b[index]*t2011*t2024*t2027*(4.0/3.0)+e*k*rho_b[index]*1.0/(t2010* \
               t2010*t2010)*t2012*(t2031*t2031)*t2023*2.0-e*k*rho_b[index]*t2012*t2023*t2032*(t2034+t2036+C5*t1998* \
               t1999*t2028*(1.216E3/9.0)-C1*C2*t1998*t1999*t2016*t2035*t2028*(6.4E1/9.0))+e*k*rho_b[index]*t2031* \
               t2023*t2032*t2024*(4.0/3.0)-e*k*rho_b[index]*t2012*t2031*t2032*t2027*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t1721 = rho_a[index]*2.0;
                double t1722 = 1.0/k;
                double t1723 = gamma_aa[index]*4.0;
                double t1724 = sqrt(t1723);
                double t1725 = 1.0/pow(t1721,4.0/3.0);
                double t1726 = 1.0/(k*k);
                double t1727 = 1.0/pow(t1721,8.0/3.0);
                double t1728 = 1.0/(k*k*k*k);
                double t1739 = gamma_aa[index]*t1726*t1727*1.0E2;
                double t1729 = exp(-t1739);
                double t1730 = 1.0/pow(t1721,1.6E1/3.0);
                double t1731 = C2*t1722*t1724*t1725*(1.0/2.0);
                double t1732 = log(t1731+sqrt(t1731*t1731+1.0));
                double t1733 = pow(t1721,1.0/3.0);
                double t1734 = gamma_aa[index]*gamma_aa[index];
                double t1735 = C5*t1730*t1734*t1728;
                double t1736 = C1*t1722*t1732*t1724*t1725*(1.0/2.0);
                double t1737 = t1735+t1736+1.0;
                double t1738 = 1.0/t1737;
                double t1748 = C4*t1729;
                double t1740 = C3-t1748;
                double t1741 = C2*C2;
                double t1742 = gamma_aa[index]*t1741*t1726*t1727;
                double t1743 = t1742+1.0;
                double t1744 = 1.0/sqrt(t1743);
                double t1745 = 1.0/pow(t1721,1.1E1/3.0);
                double t1746 = 1.0/sqrt(t1723);
                double t1747 = 1.0/pow(t1721,1.9E1/3.0);
                double t1749 = t1740*t1726*t1727;
                double t1750 = C1*C2*t1726*t1744*t1727*(1.0/2.0);
                double t1751 = C4*gamma_aa[index]*t1730*t1728*t1729*1.0E2;
                double t1752 = C1*t1722*t1732*t1725*t1746;
                double t1753 = t1750+t1751+t1752+t1749;
                double t1754 = 1.0/pow(t1721,7.0/3.0);
                double t1755 = 1.0/(t1737*t1737);
                double t1756 = gamma_aa[index]*t1740*t1726*t1727;
                double t1757 = t1736+t1756+1.0;
                double t1758 = C1*C2*t1726*t1744*t1745*4.0;
                double t1759 = C1*t1722*t1732*t1754*t1746*(8.0/3.0);
                double t1760 = 1.0/pow(t1743,3.0/2.0);
                double t1761 = C5*gamma_aa[index]*t1730*t1728*2.0;
                double t1762 = t1750+t1752+t1761;
                double t1763 = C1*t1722*t1732*t1724*t1754*(4.0/3.0);
                double t1764 = C1*C2*gamma_aa[index]*t1726*t1744*t1745*(8.0/3.0);
                double t1765 = 1.0/pow(t1721,2.0/3.0);
                double t1766 = C5*t1734*t1728*t1747*(3.2E1/3.0);
                double t1767 = t1763+t1764+t1766;
                v_rho_a_gamma_aa_[index] = e*k*t1733*t1753*t1738-e*k*t1733*t1762*t1755*t1757-e*k*rho_a[index]*t1733* \
                   t1738*(t1758+t1759+t1740*t1726*t1745*(1.6E1/3.0)-C4*1.0/(k*k*k*k*k*k)*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t1734* \
                   t1729*(6.25E2/6.0)+C4*gamma_aa[index]*t1728*t1729*t1747*1.6E3-C1*C2*gamma_aa[index]*t1741*t1760*t1728* \
                   t1747*(4.0/3.0))+e*k*rho_a[index]*t1753*t1738*t1765*(2.0/3.0)+e*k*rho_a[index]*t1733*t1755*t1757*(t1758+ \
                   t1759+C5*gamma_aa[index]*t1728*t1747*(6.4E1/3.0)-C1*C2*gamma_aa[index]*t1741*t1760*t1728*t1747*(4.0/ \
                   3.0))+e*k*rho_a[index]*t1733*t1753*t1755*t1767-e*k*rho_a[index]*t1762*t1755*t1765*t1757*(2.0/3.0)+ \
                   e*k*rho_a[index]*t1733*t1762*t1755*(t1763+t1764+gamma_aa[index]*t1740*t1726*t1745*(1.6E1/3.0)+C4*t1734* \
                   t1728*t1729*t1747*(1.6E3/3.0))-e*k*rho_a[index]*t1733*t1762*1.0/(t1737*t1737*t1737)*t1757*t1767*2.0;
            } else if (rho_a[index] > cutoff_) {
                double t2271 = rho_a[index]*2.0;
                double t2272 = 1.0/k;
                double t2273 = gamma_aa[index]*4.0;
                double t2274 = sqrt(t2273);
                double t2275 = 1.0/pow(t2271,4.0/3.0);
                double t2276 = 1.0/(k*k);
                double t2277 = 1.0/pow(t2271,8.0/3.0);
                double t2278 = 1.0/(k*k*k*k);
                double t2289 = gamma_aa[index]*t2276*t2277*1.0E2;
                double t2279 = exp(-t2289);
                double t2280 = 1.0/pow(t2271,1.6E1/3.0);
                double t2281 = C2*t2272*t2274*t2275*(1.0/2.0);
                double t2282 = log(t2281+sqrt(t2281*t2281+1.0));
                double t2283 = pow(t2271,1.0/3.0);
                double t2284 = gamma_aa[index]*gamma_aa[index];
                double t2285 = C5*t2280*t2284*t2278;
                double t2286 = C1*t2272*t2282*t2274*t2275*(1.0/2.0);
                double t2287 = t2285+t2286+1.0;
                double t2288 = 1.0/t2287;
                double t2298 = C4*t2279;
                double t2290 = C3-t2298;
                double t2291 = C2*C2;
                double t2292 = gamma_aa[index]*t2291*t2276*t2277;
                double t2293 = t2292+1.0;
                double t2294 = 1.0/sqrt(t2293);
                double t2295 = 1.0/pow(t2271,1.1E1/3.0);
                double t2296 = 1.0/sqrt(t2273);
                double t2297 = 1.0/pow(t2271,1.9E1/3.0);
                double t2299 = t2290*t2276*t2277;
                double t2300 = C1*C2*t2276*t2294*t2277*(1.0/2.0);
                double t2301 = C4*gamma_aa[index]*t2280*t2278*t2279*1.0E2;
                double t2302 = C1*t2272*t2282*t2275*t2296;
                double t2303 = t2299+t2300+t2301+t2302;
                double t2304 = 1.0/pow(t2271,7.0/3.0);
                double t2305 = 1.0/(t2287*t2287);
                double t2306 = gamma_aa[index]*t2290*t2276*t2277;
                double t2307 = t2286+t2306+1.0;
                double t2308 = C1*C2*t2276*t2294*t2295*4.0;
                double t2309 = C1*t2272*t2282*t2296*t2304*(8.0/3.0);
                double t2310 = 1.0/pow(t2293,3.0/2.0);
                double t2311 = C5*gamma_aa[index]*t2280*t2278*2.0;
                double t2312 = t2300+t2302+t2311;
                double t2313 = C1*t2272*t2282*t2274*t2304*(4.0/3.0);
                double t2314 = C1*C2*gamma_aa[index]*t2276*t2294*t2295*(8.0/3.0);
                double t2315 = 1.0/pow(t2271,2.0/3.0);
                double t2316 = C5*t2284*t2278*t2297*(3.2E1/3.0);
                double t2317 = t2313+t2314+t2316;
                v_rho_a_gamma_aa_[index] = e*k*t2283*t2288*t2303-e*k*t2283*t2312*t2305*t2307-e*k*rho_a[index]*t2283* \
                   t2288*(t2308+t2309+t2290*t2276*t2295*(1.6E1/3.0)-C4*1.0/(k*k*k*k*k*k)*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t2284* \
                   t2279*(6.25E2/6.0)+C4*gamma_aa[index]*t2278*t2279*t2297*1.6E3-C1*C2*gamma_aa[index]*t2291*t2278*t2297* \
                   t2310*(4.0/3.0))+e*k*rho_a[index]*t2288*t2303*t2315*(2.0/3.0)+e*k*rho_a[index]*t2283*t2305*t2307*(t2308+ \
                   t2309+C5*gamma_aa[index]*t2278*t2297*(6.4E1/3.0)-C1*C2*gamma_aa[index]*t2291*t2278*t2297*t2310*(4.0/ \
                   3.0))+e*k*rho_a[index]*t2283*t2303*t2305*t2317-e*k*rho_a[index]*t2312*t2305*t2315*t2307*(2.0/3.0)+ \
                   e*k*rho_a[index]*t2283*t2312*t2305*(t2313+t2314+gamma_aa[index]*t2290*t2276*t2295*(1.6E1/3.0)+C4*t2284* \
                   t2278*t2279*t2297*(1.6E3/3.0))-e*k*rho_a[index]*t2283*1.0/(t2287*t2287*t2287)*t2312*t2307*t2317*2.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t1773 = rho_b[index]*2.0;
                double t1774 = 1.0/k;
                double t1775 = gamma_bb[index]*4.0;
                double t1776 = sqrt(t1775);
                double t1777 = 1.0/pow(t1773,4.0/3.0);
                double t1778 = 1.0/(k*k);
                double t1779 = 1.0/pow(t1773,8.0/3.0);
                double t1780 = 1.0/(k*k*k*k);
                double t1791 = gamma_bb[index]*t1778*t1779*1.0E2;
                double t1781 = exp(-t1791);
                double t1782 = 1.0/pow(t1773,1.6E1/3.0);
                double t1783 = C2*t1774*t1776*t1777*(1.0/2.0);
                double t1784 = log(t1783+sqrt(t1783*t1783+1.0));
                double t1785 = pow(t1773,1.0/3.0);
                double t1786 = gamma_bb[index]*gamma_bb[index];
                double t1787 = C5*t1780*t1782*t1786;
                double t1788 = C1*t1774*t1784*t1776*t1777*(1.0/2.0);
                double t1789 = t1787+t1788+1.0;
                double t1790 = 1.0/t1789;
                double t1800 = C4*t1781;
                double t1792 = C3-t1800;
                double t1793 = C2*C2;
                double t1794 = gamma_bb[index]*t1793*t1778*t1779;
                double t1795 = t1794+1.0;
                double t1796 = 1.0/sqrt(t1795);
                double t1797 = 1.0/pow(t1773,1.1E1/3.0);
                double t1798 = 1.0/sqrt(t1775);
                double t1799 = 1.0/pow(t1773,1.9E1/3.0);
                double t1801 = t1792*t1778*t1779;
                double t1802 = C1*C2*t1778*t1796*t1779*(1.0/2.0);
                double t1803 = C4*gamma_bb[index]*t1780*t1781*t1782*1.0E2;
                double t1804 = C1*t1774*t1784*t1777*t1798;
                double t1805 = t1801+t1802+t1803+t1804;
                double t1806 = 1.0/pow(t1773,7.0/3.0);
                double t1807 = 1.0/(t1789*t1789);
                double t1808 = gamma_bb[index]*t1792*t1778*t1779;
                double t1809 = t1788+t1808+1.0;
                double t1810 = C1*C2*t1778*t1796*t1797*4.0;
                double t1811 = C1*t1774*t1784*t1798*t1806*(8.0/3.0);
                double t1812 = 1.0/pow(t1795,3.0/2.0);
                double t1813 = C5*gamma_bb[index]*t1780*t1782*2.0;
                double t1814 = t1802+t1804+t1813;
                double t1815 = C1*t1774*t1784*t1776*t1806*(4.0/3.0);
                double t1816 = C1*C2*gamma_bb[index]*t1778*t1796*t1797*(8.0/3.0);
                double t1817 = 1.0/pow(t1773,2.0/3.0);
                double t1818 = C5*t1780*t1786*t1799*(3.2E1/3.0);
                double t1819 = t1815+t1816+t1818;
                v_rho_b_gamma_bb_[index] = e*k*t1790*t1785*t1805-e*k*t1785*t1814*t1807*t1809-e*k*rho_b[index]*t1790* \
                   t1785*(t1810+t1811+t1792*t1778*t1797*(1.6E1/3.0)-C4*1.0/(k*k*k*k*k*k)*1.0/(rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t1781* \
                   t1786*(6.25E2/6.0)+C4*gamma_bb[index]*t1780*t1781*t1799*1.6E3-C1*C2*gamma_bb[index]*t1780*t1793*t1799* \
                   t1812*(4.0/3.0))+e*k*rho_b[index]*t1790*t1805*t1817*(2.0/3.0)+e*k*rho_b[index]*t1785*t1807*t1809*(t1810+ \
                   t1811+C5*gamma_bb[index]*t1780*t1799*(6.4E1/3.0)-C1*C2*gamma_bb[index]*t1780*t1793*t1799*t1812*(4.0/ \
                   3.0))+e*k*rho_b[index]*t1785*t1805*t1807*t1819-e*k*rho_b[index]*t1814*t1807*t1817*t1809*(2.0/3.0)+ \
                   e*k*rho_b[index]*t1785*t1814*t1807*(t1815+t1816+gamma_bb[index]*t1792*t1778*t1797*(1.6E1/3.0)+C4*t1780* \
                   t1781*t1786*t1799*(1.6E3/3.0))-e*k*rho_b[index]*t1785*1.0/(t1789*t1789*t1789)*t1814*t1809*t1819*2.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t2043 = rho_b[index]*2.0;
                double t2044 = 1.0/k;
                double t2045 = gamma_bb[index]*4.0;
                double t2046 = sqrt(t2045);
                double t2047 = 1.0/pow(t2043,4.0/3.0);
                double t2048 = 1.0/(k*k);
                double t2049 = 1.0/pow(t2043,8.0/3.0);
                double t2050 = 1.0/(k*k*k*k);
                double t2061 = gamma_bb[index]*t2048*t2049*1.0E2;
                double t2051 = exp(-t2061);
                double t2052 = 1.0/pow(t2043,1.6E1/3.0);
                double t2053 = C2*t2044*t2046*t2047*(1.0/2.0);
                double t2054 = log(t2053+sqrt(t2053*t2053+1.0));
                double t2055 = pow(t2043,1.0/3.0);
                double t2056 = gamma_bb[index]*gamma_bb[index];
                double t2057 = C5*t2050*t2052*t2056;
                double t2058 = C1*t2044*t2054*t2046*t2047*(1.0/2.0);
                double t2059 = t2057+t2058+1.0;
                double t2060 = 1.0/t2059;
                double t2070 = C4*t2051;
                double t2062 = C3-t2070;
                double t2063 = C2*C2;
                double t2064 = gamma_bb[index]*t2063*t2048*t2049;
                double t2065 = t2064+1.0;
                double t2066 = 1.0/sqrt(t2065);
                double t2067 = 1.0/pow(t2043,1.1E1/3.0);
                double t2068 = 1.0/sqrt(t2045);
                double t2069 = 1.0/pow(t2043,1.9E1/3.0);
                double t2071 = t2062*t2048*t2049;
                double t2072 = C1*C2*t2048*t2066*t2049*(1.0/2.0);
                double t2073 = C4*gamma_bb[index]*t2050*t2051*t2052*1.0E2;
                double t2074 = C1*t2044*t2054*t2047*t2068;
                double t2075 = t2071+t2072+t2073+t2074;
                double t2076 = 1.0/pow(t2043,7.0/3.0);
                double t2077 = 1.0/(t2059*t2059);
                double t2078 = gamma_bb[index]*t2062*t2048*t2049;
                double t2079 = t2058+t2078+1.0;
                double t2080 = C1*C2*t2048*t2066*t2067*4.0;
                double t2081 = C1*t2044*t2054*t2076*t2068*(8.0/3.0);
                double t2082 = 1.0/pow(t2065,3.0/2.0);
                double t2083 = C5*gamma_bb[index]*t2050*t2052*2.0;
                double t2084 = t2072+t2074+t2083;
                double t2085 = C1*t2044*t2054*t2046*t2076*(4.0/3.0);
                double t2086 = C1*C2*gamma_bb[index]*t2048*t2066*t2067*(8.0/3.0);
                double t2087 = 1.0/pow(t2043,2.0/3.0);
                double t2088 = C5*t2050*t2056*t2069*(3.2E1/3.0);
                double t2089 = t2085+t2086+t2088;
                v_rho_b_gamma_bb_[index] = e*k*t2060*t2055*t2075-e*k*t2055*t2084*t2077*t2079-e*k*rho_b[index]*t2060* \
                   t2055*(t2080+t2081+t2062*t2048*t2067*(1.6E1/3.0)-C4*1.0/(k*k*k*k*k*k)*1.0/(rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t2051* \
                   t2056*(6.25E2/6.0)+C4*gamma_bb[index]*t2050*t2051*t2069*1.6E3-C1*C2*gamma_bb[index]*t2050*t2063*t2082* \
                   t2069*(4.0/3.0))+e*k*rho_b[index]*t2060*t2075*t2087*(2.0/3.0)+e*k*rho_b[index]*t2055*t2077*t2079*(t2080+ \
                   t2081+C5*gamma_bb[index]*t2050*t2069*(6.4E1/3.0)-C1*C2*gamma_bb[index]*t2050*t2063*t2082*t2069*(4.0/ \
                   3.0))+e*k*rho_b[index]*t2055*t2075*t2077*t2089-e*k*rho_b[index]*t2084*t2077*t2087*t2079*(2.0/3.0)+ \
                   e*k*rho_b[index]*t2055*t2084*t2077*(t2085+t2086+gamma_bb[index]*t2062*t2048*t2067*(1.6E1/3.0)+C4*t2050* \
                   t2051*t2056*t2069*(1.6E3/3.0))-e*k*rho_b[index]*t2055*t2084*1.0/(t2059*t2059*t2059)*t2079*t2089*2.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t1821 = rho_a[index]*2.0;
                double t1822 = 1.0/k;
                double t1823 = gamma_aa[index]*4.0;
                double t1824 = sqrt(t1823);
                double t1825 = 1.0/pow(t1821,4.0/3.0);
                double t1826 = 1.0/(k*k*k*k);
                double t1827 = 1.0/pow(t1821,1.6E1/3.0);
                double t1828 = C2*C2;
                double t1829 = 1.0/(k*k);
                double t1830 = 1.0/pow(t1821,8.0/3.0);
                double t1839 = gamma_aa[index]*t1830*t1829*1.0E2;
                double t1831 = exp(-t1839);
                double t1832 = C2*t1822*t1824*t1825*(1.0/2.0);
                double t1833 = log(t1832+sqrt(t1832*t1832+1.0));
                double t1834 = gamma_aa[index]*t1830*t1828*t1829;
                double t1835 = t1834+1.0;
                double t1836 = pow(t1821,1.0/3.0);
                double t1837 = 1.0/sqrt(t1835);
                double t1852 = C5*gamma_aa[index]*t1826*t1827*2.0;
                double t1853 = C1*C2*t1830*t1837*t1829*(1.0/2.0);
                double t1854 = 1.0/sqrt(t1823);
                double t1855 = C1*t1822*t1833*t1825*t1854;
                double t1838 = t1852+t1853+t1855;
                double t1840 = C1*t1822*t1824*t1833*t1825*(1.0/2.0);
                double t1841 = gamma_aa[index]*gamma_aa[index];
                double t1842 = C5*t1841*t1826*t1827;
                double t1843 = t1840+t1842+1.0;
                double t1857 = C4*t1831;
                double t1844 = C3-t1857;
                double t1845 = gamma_aa[index]*t1830*t1844*t1829;
                double t1846 = t1840+t1845+1.0;
                double t1847 = 1.0/pow(t1835,3.0/2.0);
                double t1848 = C1*C2*t1826*t1827*t1828*t1847*(1.0/4.0);
                double t1849 = 1.0/pow(t1823,3.0/2.0);
                double t1850 = C1*t1822*t1833*t1825*t1849*2.0;
                double t1851 = 1.0/gamma_aa[index];
                double t1856 = 1.0/(t1843*t1843);
                v_gamma_aa_gamma_aa_[index] = -(e*k*rho_a[index]*t1836*(t1850+t1848-C4*t1831*t1826*t1827*2.0E2+C4* \
                   gamma_aa[index]*1.0/(k*k*k*k*k*k)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index])*t1831*(6.25E2/1.6E1)-C1*C2*t1830*t1851*t1837*t1829*(1.0/4.0) \
                   ))/t1843+e*k*rho_a[index]*1.0/(t1843*t1843*t1843)*t1836*t1846*(t1838*t1838)*2.0-e*k*rho_a[index]*t1836* \
                   t1838*t1856*(t1853+t1855+t1830*t1844*t1829+C4*gamma_aa[index]*t1831*t1826*t1827*1.0E2)*2.0+e*k*rho_a[index]* \
                   t1836*t1846*t1856*(t1850+t1848-C5*t1826*t1827*2.0-C1*C2*t1830*t1851*t1837*t1829*(1.0/4.0));
            } else if (rho_a[index] > cutoff_) {
                double t2324 = rho_a[index]*2.0;
                double t2325 = 1.0/k;
                double t2326 = gamma_aa[index]*4.0;
                double t2327 = sqrt(t2326);
                double t2328 = 1.0/pow(t2324,4.0/3.0);
                double t2329 = 1.0/(k*k*k*k);
                double t2330 = 1.0/pow(t2324,1.6E1/3.0);
                double t2331 = C2*C2;
                double t2332 = 1.0/(k*k);
                double t2333 = 1.0/pow(t2324,8.0/3.0);
                double t2342 = gamma_aa[index]*t2332*t2333*1.0E2;
                double t2334 = exp(-t2342);
                double t2335 = C2*t2325*t2327*t2328*(1.0/2.0);
                double t2336 = log(t2335+sqrt(t2335*t2335+1.0));
                double t2337 = gamma_aa[index]*t2331*t2332*t2333;
                double t2338 = t2337+1.0;
                double t2339 = pow(t2324,1.0/3.0);
                double t2340 = 1.0/sqrt(t2338);
                double t2355 = C5*gamma_aa[index]*t2330*t2329*2.0;
                double t2356 = C1*C2*t2340*t2332*t2333*(1.0/2.0);
                double t2357 = 1.0/sqrt(t2326);
                double t2358 = C1*t2325*t2336*t2328*t2357;
                double t2341 = t2355+t2356+t2358;
                double t2343 = C1*t2325*t2327*t2336*t2328*(1.0/2.0);
                double t2344 = gamma_aa[index]*gamma_aa[index];
                double t2345 = C5*t2330*t2344*t2329;
                double t2346 = t2343+t2345+1.0;
                double t2360 = C4*t2334;
                double t2347 = C3-t2360;
                double t2348 = gamma_aa[index]*t2332*t2333*t2347;
                double t2349 = t2343+t2348+1.0;
                double t2350 = 1.0/pow(t2338,3.0/2.0);
                double t2351 = C1*C2*t2330*t2331*t2350*t2329*(1.0/4.0);
                double t2352 = 1.0/pow(t2326,3.0/2.0);
                double t2353 = C1*t2325*t2352*t2336*t2328*2.0;
                double t2354 = 1.0/gamma_aa[index];
                double t2359 = 1.0/(t2346*t2346);
                v_gamma_aa_gamma_aa_[index] = -(e*k*rho_a[index]*t2339*(t2351+t2353-C4*t2330*t2334*t2329*2.0E2+C4* \
                   gamma_aa[index]*1.0/(k*k*k*k*k*k)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index])*t2334*(6.25E2/1.6E1)-C1*C2*t2340*t2332*t2333*t2354*(1.0/4.0) \
                   ))/t2346+e*k*rho_a[index]*(t2341*t2341)*1.0/(t2346*t2346*t2346)*t2339*t2349*2.0-e*k*rho_a[index]*t2341* \
                   t2339*t2359*(t2356+t2358+t2332*t2333*t2347+C4*gamma_aa[index]*t2330*t2334*t2329*1.0E2)*2.0+e*k*rho_a[index]* \
                   t2339*t2349*t2359*(t2351+t2353-C5*t2330*t2329*2.0-C1*C2*t2340*t2332*t2333*t2354*(1.0/4.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t1863 = rho_b[index]*2.0;
                double t1864 = 1.0/k;
                double t1865 = gamma_bb[index]*4.0;
                double t1866 = sqrt(t1865);
                double t1867 = 1.0/pow(t1863,4.0/3.0);
                double t1868 = 1.0/(k*k*k*k);
                double t1869 = 1.0/pow(t1863,1.6E1/3.0);
                double t1870 = C2*C2;
                double t1871 = 1.0/(k*k);
                double t1872 = 1.0/pow(t1863,8.0/3.0);
                double t1881 = gamma_bb[index]*t1871*t1872*1.0E2;
                double t1873 = exp(-t1881);
                double t1874 = C2*t1864*t1866*t1867*(1.0/2.0);
                double t1875 = log(t1874+sqrt(t1874*t1874+1.0));
                double t1876 = gamma_bb[index]*t1870*t1871*t1872;
                double t1877 = t1876+1.0;
                double t1878 = pow(t1863,1.0/3.0);
                double t1879 = 1.0/sqrt(t1877);
                double t1894 = C5*gamma_bb[index]*t1868*t1869*2.0;
                double t1895 = C1*C2*t1871*t1872*t1879*(1.0/2.0);
                double t1896 = 1.0/sqrt(t1865);
                double t1897 = C1*t1864*t1875*t1867*t1896;
                double t1880 = t1894+t1895+t1897;
                double t1882 = C1*t1864*t1866*t1875*t1867*(1.0/2.0);
                double t1883 = gamma_bb[index]*gamma_bb[index];
                double t1884 = C5*t1883*t1868*t1869;
                double t1885 = t1882+t1884+1.0;
                double t1899 = C4*t1873;
                double t1886 = C3-t1899;
                double t1887 = gamma_bb[index]*t1871*t1872*t1886;
                double t1888 = t1882+t1887+1.0;
                double t1889 = 1.0/pow(t1877,3.0/2.0);
                double t1890 = C1*C2*t1870*t1868*t1869*t1889*(1.0/4.0);
                double t1891 = 1.0/pow(t1865,3.0/2.0);
                double t1892 = C1*t1864*t1891*t1875*t1867*2.0;
                double t1893 = 1.0/gamma_bb[index];
                double t1898 = 1.0/(t1885*t1885);
                v_gamma_bb_gamma_bb_[index] = -(e*k*rho_b[index]*t1878*(t1890+t1892-C4*t1873*t1868*t1869*2.0E2+C4* \
                   gamma_bb[index]*1.0/(k*k*k*k*k*k)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index])*t1873*(6.25E2/1.6E1)-C1*C2*t1871*t1872*t1893*t1879*(1.0/4.0) \
                   ))/t1885+e*k*rho_b[index]*(t1880*t1880)*1.0/(t1885*t1885*t1885)*t1878*t1888*2.0-e*k*rho_b[index]*t1880* \
                   t1878*t1898*(t1895+t1897+t1871*t1872*t1886+C4*gamma_bb[index]*t1873*t1868*t1869*1.0E2)*2.0+e*k*rho_b[index]* \
                   t1878*t1888*t1898*(t1890+t1892-C5*t1868*t1869*2.0-C1*C2*t1871*t1872*t1893*t1879*(1.0/4.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t2096 = rho_b[index]*2.0;
                double t2097 = 1.0/k;
                double t2098 = gamma_bb[index]*4.0;
                double t2099 = sqrt(t2098);
                double t2100 = 1.0/pow(t2096,4.0/3.0);
                double t2101 = 1.0/(k*k*k*k);
                double t2102 = 1.0/pow(t2096,1.6E1/3.0);
                double t2103 = C2*C2;
                double t2104 = 1.0/(k*k);
                double t2105 = 1.0/pow(t2096,8.0/3.0);
                double t2114 = gamma_bb[index]*t2104*t2105*1.0E2;
                double t2106 = exp(-t2114);
                double t2107 = C2*t2097*t2099*t2100*(1.0/2.0);
                double t2108 = log(t2107+sqrt(t2107*t2107+1.0));
                double t2109 = gamma_bb[index]*t2103*t2104*t2105;
                double t2110 = t2109+1.0;
                double t2111 = pow(t2096,1.0/3.0);
                double t2112 = 1.0/sqrt(t2110);
                double t2127 = C5*gamma_bb[index]*t2101*t2102*2.0;
                double t2128 = C1*C2*t2112*t2104*t2105*(1.0/2.0);
                double t2129 = 1.0/sqrt(t2098);
                double t2130 = C1*t2097*t2100*t2108*t2129;
                double t2113 = t2130+t2127+t2128;
                double t2115 = C1*t2097*t2099*t2100*t2108*(1.0/2.0);
                double t2116 = gamma_bb[index]*gamma_bb[index];
                double t2117 = C5*t2101*t2102*t2116;
                double t2118 = t2115+t2117+1.0;
                double t2132 = C4*t2106;
                double t2119 = C3-t2132;
                double t2120 = gamma_bb[index]*t2104*t2105*t2119;
                double t2121 = t2120+t2115+1.0;
                double t2122 = 1.0/pow(t2110,3.0/2.0);
                double t2123 = C1*C2*t2101*t2102*t2103*t2122*(1.0/4.0);
                double t2124 = 1.0/pow(t2098,3.0/2.0);
                double t2125 = C1*t2097*t2100*t2124*t2108*2.0;
                double t2126 = 1.0/gamma_bb[index];
                double t2131 = 1.0/(t2118*t2118);
                v_gamma_bb_gamma_bb_[index] = -(e*k*rho_b[index]*t2111*(t2123+t2125-C4*t2101*t2102*t2106*2.0E2+C4* \
                   gamma_bb[index]*1.0/(k*k*k*k*k*k)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index])*t2106*(6.25E2/1.6E1)-C1*C2*t2112*t2104*t2105*t2126*(1.0/4.0) \
                   ))/t2118+e*k*rho_b[index]*t2111*t2121*(t2113*t2113)*1.0/(t2118*t2118*t2118)*2.0-e*k*rho_b[index]*t2111* \
                   t2113*t2131*(t2130+t2128+t2104*t2105*t2119+C4*gamma_bb[index]*t2101*t2102*t2106*1.0E2)*2.0+e*k*rho_b[index]* \
                   t2111*t2121*t2131*(t2123+t2125-C5*t2101*t2102*2.0-C1*C2*t2112*t2104*t2105*t2126*(1.0/4.0));
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

