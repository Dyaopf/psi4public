/**********************************************************
* PW91_C_functional.cc: definitions for PW91_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "PW91_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PW91_C_Functional::PW91_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "PW91_C";
    description_ = "PW91 Correlation";
    citation_ = "J.P. Perdew, et. al., Phys. Rev. B., 46(11), 6671-6687, 1992";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double pi_m12 = 5.6418958354775628E-01;
    params_.push_back(make_pair("pi_m12",pi_m12));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double alph = 8.9999999999999997E-02;
    params_.push_back(make_pair("alph",alph));
    double bet = 6.6726322680061109E-02;
    params_.push_back(make_pair("bet",bet));
    double nu = 1.5755920349483143E+01;
    params_.push_back(make_pair("nu",nu));
    double Cc0 = 4.2350000000000000E-03;
    params_.push_back(make_pair("Cc0",Cc0));
    double Cx = -1.6670000000000001E-03;
    params_.push_back(make_pair("Cx",Cx));
    double Cc1 = 2.5680000000000001E+00;
    params_.push_back(make_pair("Cc1",Cc1));
    double Cc2 = 2.3265999999999998E+01;
    params_.push_back(make_pair("Cc2",Cc2));
    double Cc3 = 7.3889999999999997E-03;
    params_.push_back(make_pair("Cc3",Cc3));
    double Cc4 = 8.7230000000000008E+00;
    params_.push_back(make_pair("Cc4",Cc4));
    double Cc5 = 4.7199999999999998E-01;
    params_.push_back(make_pair("Cc5",Cc5));
    double Cc6 = 7.3889999999999997E-02;
    params_.push_back(make_pair("Cc6",Cc6));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PW91_C_Functional::~PW91_C_Functional()
{
}
void PW91_C_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double k = params_[2].second;
    double pi_m12 = params_[3].second;
    double d2fz0 = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double alph = params_[23].second;
    double bet = params_[24].second;
    double nu = params_[25].second;
    double Cc0 = params_[26].second;
    double Cx = params_[27].second;
    double Cc1 = params_[28].second;
    double Cc2 = params_[29].second;
    double Cc3 = params_[30].second;
    double Cc4 = params_[31].second;
    double Cc5 = params_[32].second;
    double Cc6 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t17267 = 1.0/bet;
            double t17268 = rho_a[index]*2.0;
            double t17269 = 1.0/pow(t17268,1.0/3.0);
            double t17270 = c*t17269;
            double t17271 = 1.0/(bet*bet);
            double t17272 = gamma_aa[index]*gamma_aa[index];
            double t17273 = 1.0/(k*k);
            double t17274 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t17275 = 1.0/c0p;
            double t17276 = sqrt(t17270);
            double t17277 = b1p*t17276;
            double t17278 = pow(t17270,3.0/2.0);
            double t17279 = b3p*t17278;
            double t17280 = b2p*c*t17269;
            double t17281 = c*c;
            double t17282 = 1.0/pow(t17268,2.0/3.0);
            double t17283 = b4p*t17281*t17282;
            double t17284 = t17280+t17283+t17277+t17279;
            double t17285 = 1.0/t17284;
            double t17286 = t17275*t17285*(1.0/2.0);
            double t17287 = t17286+1.0;
            double t17288 = log(t17287);
            double t17289 = a1p*c*t17269;
            double t17290 = t17289+1.0;
            double t17291 = alph*c0p*t17271*t17290*t17288*4.0;
            double t17292 = exp(t17291);
            double t17293 = t17292-1.0;
            double t17294 = 1.0/pow(t17268,1.4E1/3.0);
            double t17295 = 1.0/k;
            double t17296 = 1.0/(pi_m12*pi_m12);
            double t17297 = 1.0/t17293;
            double t17298 = 1.0/pow(t17268,7.0/3.0);
            functional_[index] = rho_a[index]*(((bet*bet)*log((alph*t17267*(gamma_aa[index]*t17295*t17296*t17298* \
               (1.0/4.0)+alph*t17272*t17273*t17274*t17267*t17294*t17297*(1.0/8.0))*2.0)/((alph*alph)*t17271*t17272* \
               t17273*t17274*1.0/(t17293*t17293)*t17294*(1.0/4.0)+alph*gamma_aa[index]*t17267*t17295*t17296*t17297* \
               t17298*(1.0/2.0)+1.0)+1.0)*(-1.0/2.0))/alph+c0p*t17290*t17288*2.0+gamma_aa[index]*nu*t17295*t17296* \
               t17298*exp(gamma_aa[index]*t17273*1.0/pow(t17268,8.0/3.0)*-1.0E2)*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3) \
               +Cc2*c*t17269*(1.0/1.0E3)+Cc3*t17281*t17282*(1.0/1.0E3))/(Cc4*c*t17269+Cc5*t17281*t17282+(Cc6*c*t17281* \
               (1.0/2.0))/rho_a[index]+1.0))*(1.0/4.0))*-2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t17300 = rho_a[index]*2.0;
            double t17301 = 1.0/pow(t17300,1.0/3.0);
            double t17302 = c*t17301;
            double t17303 = sqrt(t17302);
            double t17304 = b1p*t17303;
            double t17305 = pow(t17302,3.0/2.0);
            double t17306 = b3p*t17305;
            double t17307 = b2p*c*t17301;
            double t17308 = c*c;
            double t17309 = 1.0/pow(t17300,2.0/3.0);
            double t17310 = b4p*t17308*t17309;
            double t17311 = t17310+t17304+t17306+t17307;
            double t17312 = 1.0/pow(t17300,4.0/3.0);
            double t17313 = 1.0/bet;
            double t17314 = 1.0/c0p;
            double t17315 = 1.0/t17311;
            double t17316 = t17314*t17315*(1.0/2.0);
            double t17317 = t17316+1.0;
            double t17318 = a1p*c*t17301;
            double t17319 = t17318+1.0;
            double t17320 = gamma_aa[index]*gamma_aa[index];
            double t17321 = 1.0/(k*k);
            double t17322 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t17323 = 1.0/(bet*bet);
            double t17324 = log(t17317);
            double t17325 = alph*c0p*t17323*t17324*t17319*4.0;
            double t17326 = exp(t17325);
            double t17327 = t17326-1.0;
            double t17328 = 1.0/t17317;
            double t17329 = 1.0/(t17311*t17311);
            double t17330 = b2p*c*t17312*(1.0/3.0);
            double t17331 = 1.0/pow(t17300,5.0/3.0);
            double t17332 = b4p*t17331*t17308*(2.0/3.0);
            double t17333 = 1.0/sqrt(t17302);
            double t17334 = b1p*c*t17312*t17333*(1.0/6.0);
            double t17335 = b3p*c*t17303*t17312*(1.0/2.0);
            double t17336 = t17330+t17332+t17334+t17335;
            double t17337 = t17336*t17319*t17328*t17329;
            double t17338 = alph*alph;
            double t17339 = 1.0/(t17327*t17327);
            double t17340 = 1.0/pow(t17300,1.4E1/3.0);
            double t17341 = 1.0/k;
            double t17342 = 1.0/(pi_m12*pi_m12);
            double t17343 = 1.0/t17327;
            double t17344 = 1.0/pow(t17300,7.0/3.0);
            double t17345 = t17320*t17321*t17322*t17340*t17323*t17338*t17339*(1.0/4.0);
            double t17346 = alph*gamma_aa[index]*t17313*t17341*t17342*t17343*t17344*(1.0/2.0);
            double t17347 = t17345+t17346+1.0;
            double t17348 = 1.0/pow(t17300,1.7E1/3.0);
            double t17349 = 1.0/pow(t17300,1.0E1/3.0);
            double t17350 = 1.0/(bet*bet*bet);
            double t17352 = a1p*c*c0p*t17312*t17324*(2.0/3.0);
            double t17351 = -t17352+t17337;
            double t17353 = gamma_aa[index]*t17341*t17342*t17344*(1.0/4.0);
            double t17354 = alph*t17320*t17321*t17313*t17322*t17340*t17343*(1.0/8.0);
            double t17355 = t17353+t17354;
            double t17356 = 1.0/t17347;
            double t17357 = Cc4*c*t17301;
            double t17358 = 1.0/rho_a[index];
            double t17359 = Cc6*c*t17308*t17358*(1.0/2.0);
            double t17360 = Cc5*t17308*t17309;
            double t17361 = t17360+t17357+t17359+1.0;
            double t17362 = 1.0/pow(t17300,8.0/3.0);
            double t17369 = gamma_aa[index]*t17321*t17362*1.0E2;
            double t17363 = exp(-t17369);
            double t17364 = Cc1*(1.0/1.0E3);
            double t17365 = Cc2*c*t17301*(1.0/1.0E3);
            double t17366 = Cc3*t17308*t17309*(1.0/1.0E3);
            double t17367 = t17364+t17365+t17366;
            double t17368 = 1.0/t17361;
            double t17370 = Cx*(1.0E1/7.0);
            double t17376 = t17367*t17368;
            double t17371 = Cc0+t17370-t17376;
            double t17372 = 1.0/alph;
            double t17373 = bet*bet;
            double t17374 = alph*t17313*t17355*t17356*2.0;
            double t17375 = t17374+1.0;
            v_rho_a_[index] = rho_a[index]*(-t17352+t17337+(t17372*t17373*(alph*t17313*t17356*(gamma_aa[index]* \
               t17341*t17342*t17349*(7.0/1.2E1)+alph*t17320*t17321*t17313*t17322*t17343*t17348*(7.0/1.2E1)+t17320* \
               t17321*t17322*t17340*t17350*t17351*t17326*t17338*t17339*(1.0/4.0))*2.0-alph*t17313*t17355*1.0/(t17347* \
               t17347)*(alph*gamma_aa[index]*t17313*t17341*t17342*t17343*t17349*(7.0/6.0)+t17320*t17321*t17322*t17323* \
               t17338*t17339*t17348*(7.0/6.0)+gamma_aa[index]*t17341*t17350*t17342*t17351*t17326*t17344*t17338*t17339+ \
               alph*1.0/(bet*bet*bet*bet)*t17320*t17321*t17322*t17340*t17351*t17326*1.0/(t17327*t17327*t17327)*t17338) \
               *2.0)*(1.0/2.0))/t17375+1.0/(k*k*k)*nu*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index])*t17320*t17342*t17371*t17363*(2.5E1/2.4E1)-gamma_aa[index]*nu*t17341*t17342*t17371*t17363* \
               t17349*(7.0/1.2E1)+gamma_aa[index]*nu*t17341*t17342*t17344*t17363*(t17368*(Cc2*c*t17312*(1.0/3.0E3) \
               +Cc3*t17331*t17308*(1.0/1.5E3))-1.0/(t17361*t17361)*t17367*(Cc4*c*t17312*(1.0/3.0)+Cc5*t17331*t17308* \
               (2.0/3.0)+Cc6*c*1.0/(rho_a[index]*rho_a[index])*t17308*(1.0/4.0)))*(1.0/4.0))*-2.0+t17372*t17373*log(t17375) \
               *(1.0/2.0)-c0p*t17324*t17319*2.0-gamma_aa[index]*nu*t17341*t17342*t17344*t17371*t17363*(1.0/4.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t17378 = 1.0/bet;
                double t17379 = rho_a[index]*2.0;
                double t17380 = 1.0/pow(t17379,1.0/3.0);
                double t17381 = c*t17380;
                double t17382 = 1.0/(bet*bet);
                double t17383 = 1.0/(k*k);
                double t17384 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t17385 = 1.0/c0p;
                double t17386 = sqrt(t17381);
                double t17387 = b1p*t17386;
                double t17388 = pow(t17381,3.0/2.0);
                double t17389 = b3p*t17388;
                double t17390 = b2p*c*t17380;
                double t17391 = c*c;
                double t17392 = 1.0/pow(t17379,2.0/3.0);
                double t17393 = b4p*t17391*t17392;
                double t17394 = t17390+t17393+t17387+t17389;
                double t17395 = 1.0/t17394;
                double t17396 = t17385*t17395*(1.0/2.0);
                double t17397 = t17396+1.0;
                double t17398 = log(t17397);
                double t17399 = a1p*c*t17380;
                double t17400 = t17399+1.0;
                double t17401 = alph*c0p*t17400*t17382*t17398*4.0;
                double t17402 = exp(t17401);
                double t17403 = t17402-1.0;
                double t17404 = 1.0/pow(t17379,1.4E1/3.0);
                double t17405 = 1.0/k;
                double t17406 = 1.0/(pi_m12*pi_m12);
                double t17407 = 1.0/t17403;
                double t17408 = 1.0/pow(t17379,7.0/3.0);
                double t17409 = alph*alph;
                double t17410 = 1.0/(t17403*t17403);
                double t17411 = gamma_aa[index]*gamma_aa[index];
                double t17412 = t17410*t17411*t17404*t17382*t17409*t17383*t17384*(1.0/4.0);
                double t17413 = alph*gamma_aa[index]*t17405*t17406*t17407*t17408*t17378*(1.0/2.0);
                double t17414 = t17412+t17413+1.0;
                double t17415 = gamma_aa[index]*t17405*t17406*t17408*(1.0/4.0);
                double t17416 = alph*t17411*t17404*t17407*t17383*t17384*t17378*(1.0/8.0);
                double t17417 = t17415+t17416;
                double t17418 = 1.0/t17414;
                double t17419 = 1.0/pow(t17379,8.0/3.0);
                double t17439 = gamma_aa[index]*t17383*t17419*1.0E2;
                double t17420 = exp(-t17439);
                double t17421 = Cx*(1.0E1/7.0);
                double t17422 = Cc1*(1.0/1.0E3);
                double t17423 = Cc2*c*t17380*(1.0/1.0E3);
                double t17424 = Cc3*t17391*t17392*(1.0/1.0E3);
                double t17425 = t17422+t17423+t17424;
                double t17426 = Cc4*c*t17380;
                double t17427 = 1.0/rho_a[index];
                double t17428 = Cc6*c*t17391*t17427*(1.0/2.0);
                double t17429 = Cc5*t17391*t17392;
                double t17430 = t17426+t17428+t17429+1.0;
                double t17431 = 1.0/t17430;
                double t17440 = t17431*t17425;
                double t17432 = Cc0+t17421-t17440;
                double t17433 = 1.0/alph;
                double t17434 = bet*bet;
                double t17435 = 1.0/(t17414*t17414);
                double t17436 = alph*t17417*t17418*t17378*2.0;
                double t17437 = t17436+1.0;
                double t17438 = 1.0/t17437;
                double t17441 = 1.0/(k*k*k);
                double t17442 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                v_gamma_aa_[index] = rho_a[index]*(t17433*t17434*t17438*(alph*t17418*t17378*(t17405*t17406*t17408* \
                   (1.0/8.0)+alph*gamma_aa[index]*t17404*t17407*t17383*t17384*t17378*(1.0/8.0))*2.0-alph*t17417*t17435* \
                   t17378*(alph*t17405*t17406*t17407*t17408*t17378*(1.0/4.0)+gamma_aa[index]*t17410*t17404*t17382*t17409* \
                   t17383*t17384*(1.0/4.0))*2.0)*(1.0/2.0)-nu*t17420*t17405*t17432*t17406*t17408*(1.0/8.0)+gamma_aa[index]* \
                   nu*t17420*t17432*t17441*t17406*t17442*(2.5E1/6.4E1))*2.0+rho_a[index]*(t17433*t17434*t17438*(alph* \
                   t17418*t17378*(t17405*t17406*t17408*(1.0/1.6E1)+alph*gamma_aa[index]*t17404*t17407*t17383*t17384*t17378* \
                   (1.0/1.6E1))*2.0-alph*t17417*t17435*t17378*(alph*t17405*t17406*t17407*t17408*t17378*(1.0/8.0)+gamma_aa[index]* \
                   t17410*t17404*t17382*t17409*t17383*t17384*(1.0/8.0))*2.0)*(1.0/2.0)-nu*t17420*t17405*t17432*t17406* \
                   t17408*(1.0/1.6E1)+gamma_aa[index]*nu*t17420*t17432*t17441*t17406*t17442*(2.5E1/1.28E2))*4.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
                
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
                    
            //V_gamma_aa_gamma_aa
                    
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
                    
            //V_tau_a_tau_a
                   
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                       
            }
        }
    }
}
void PW91_C_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double k = params_[2].second;
    double pi_m12 = params_[3].second;
    double d2fz0 = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double alph = params_[23].second;
    double bet = params_[24].second;
    double nu = params_[25].second;
    double Cc0 = params_[26].second;
    double Cx = params_[27].second;
    double Cc1 = params_[28].second;
    double Cc2 = params_[29].second;
    double Cc3 = params_[30].second;
    double Cc4 = params_[31].second;
    double Cc5 = params_[32].second;
    double Cc6 = params_[33].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t15340 = rho_a[index]+rho_b[index];
            double t15341 = 1.0/pow(t15340,1.0/3.0);
            double t15342 = c*t15341;
            double t15343 = 1.0/t15340;
            double t15344 = rho_a[index]-rho_b[index];
            double t15345 = t15343*t15344;
            double t15346 = 1.0/bet;
            double t15347 = t15345+1.0;
            double t15348 = pow(t15347,2.0/3.0);
            double t15349 = t15348*(1.0/2.0);
            double t15350 = -t15345+1.0;
            double t15351 = pow(t15350,2.0/3.0);
            double t15352 = t15351*(1.0/2.0);
            double t15353 = t15352+t15349;
            double t15354 = 1.0/c0p;
            double t15355 = sqrt(t15342);
            double t15356 = b1p*t15355;
            double t15357 = pow(t15342,3.0/2.0);
            double t15358 = b3p*t15357;
            double t15359 = c*c;
            double t15360 = 1.0/pow(t15340,2.0/3.0);
            double t15361 = b4p*t15360*t15359;
            double t15362 = b2p*c*t15341;
            double t15363 = t15361+t15362+t15356+t15358;
            double t15364 = 1.0/t15363;
            double t15365 = t15354*t15364*(1.0/2.0);
            double t15366 = t15365+1.0;
            double t15367 = log(t15366);
            double t15368 = a1p*c*t15341;
            double t15369 = t15368+1.0;
            double t15370 = c0p*t15367*t15369*2.0;
            double t15371 = t15344*t15344;
            double t15372 = two_13*2.0;
            double t15373 = t15372-2.0;
            double t15374 = 1.0/t15373;
            double t15375 = 1.0/(t15340*t15340*t15340*t15340);
            double t15376 = t15371*t15371;
            double t15377 = pow(t15347,4.0/3.0);
            double t15378 = pow(t15350,4.0/3.0);
            double t15379 = t15377+t15378-2.0;
            double t15380 = gamma_ab[index]*2.0;
            double t15381 = gamma_aa[index]+gamma_bb[index]+t15380;
            double t15382 = 1.0/(bet*bet);
            double t15383 = 1.0/(k*k);
            double t15384 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t15385 = 1.0/(t15353*t15353*t15353);
            double t15386 = 1.0/c0f;
            double t15387 = b1f*t15355;
            double t15388 = b3f*t15357;
            double t15389 = b4f*t15360*t15359;
            double t15390 = b2f*c*t15341;
            double t15391 = t15390+t15387+t15388+t15389;
            double t15392 = 1.0/t15391;
            double t15393 = t15392*t15386*(1.0/2.0);
            double t15394 = t15393+1.0;
            double t15395 = log(t15394);
            double t15396 = a1f*c*t15341;
            double t15397 = t15396+1.0;
            double t15424 = c0f*t15395*t15397*2.0;
            double t15398 = t15370-t15424;
            double t15399 = 1.0/d2fz0;
            double t15400 = 1.0/Aa;
            double t15401 = b1a*t15355;
            double t15402 = b3a*t15357;
            double t15403 = b4a*t15360*t15359;
            double t15404 = b2a*c*t15341;
            double t15405 = t15401+t15402+t15403+t15404;
            double t15406 = 1.0/t15405;
            double t15407 = t15400*t15406*(1.0/2.0);
            double t15408 = t15407+1.0;
            double t15409 = log(t15408);
            double t15410 = a1a*c*t15341;
            double t15411 = t15410+1.0;
            double t15412 = t15375*t15376;
            double t15413 = t15412-1.0;
            double t15414 = Aa*t15411*t15413*t15409*t15374*t15379*t15399*2.0;
            double t15425 = t15374*t15375*t15376*t15379*t15398;
            double t15415 = t15414+t15370-t15425;
            double t15416 = alph*t15415*t15382*t15385*2.0;
            double t15417 = exp(t15416);
            double t15418 = t15417-1.0;
            double t15419 = 1.0/pow(t15340,1.4E1/3.0);
            double t15420 = 1.0/(t15353*t15353*t15353*t15353);
            double t15421 = t15381*t15381;
            double t15422 = 1.0/k;
            double t15423 = 1.0/(pi_m12*pi_m12);
            double t15426 = 1.0/t15418;
            double t15427 = 1.0/pow(t15340,7.0/3.0);
            double t15428 = 1.0/(t15353*t15353);
            double t15429 = t15353*t15353;
            functional_[index] = -t15340*(t15414+t15370-t15425-((bet*bet)*t15353*t15429*log((alph*t15346*(t15422* \
               t15423*t15381*t15427*t15428*(1.0/1.6E1)+alph*t15420*t15421*t15426*t15346*t15383*t15419*t15384*(1.0/ \
               1.28E2))*2.0)/((alph*alph)*t15420*t15421*t15382*1.0/(t15418*t15418)*t15383*t15419*t15384*(1.0/6.4E1) \
               +alph*t15422*t15423*t15381*t15426*t15346*t15427*t15428*(1.0/8.0)+1.0)+1.0)*(1.0/2.0))/alph+nu*t15422* \
               t15423*t15353*t15381*t15427*exp(1.0/pow(t15340,8.0/3.0)*t15381*t15383*t15429*-2.5E1)*(Cc0+Cx*(1.0E1/ \
               7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t15341*(1.0/1.0E3)+Cc3*t15360*t15359*(1.0/1.0E3))/(Cc4*c*t15341+Cc5*t15360* \
               t15359+Cc6*c*t15343*t15359+1.0))*(1.0/1.6E1));
        } else if (rho_a[index] > cutoff_) {
            double t16703 = rho_a[index]+rho_b[index];
            double t16704 = 1.0/bet;
            double t16705 = 1.0/pow(t16703,1.0/3.0);
            double t16706 = c*t16705;
            double t16707 = pow(2.0,1.0/3.0);
            double t16708 = sqrt(t16706);
            double t16709 = pow(t16706,3.0/2.0);
            double t16710 = c*c;
            double t16711 = 1.0/pow(t16703,2.0/3.0);
            double t16712 = 1.0/c0p;
            double t16713 = b1p*t16708;
            double t16714 = b3p*t16709;
            double t16715 = b4p*t16710*t16711;
            double t16716 = b2p*c*t16705;
            double t16717 = t16713+t16714+t16715+t16716;
            double t16718 = 1.0/t16717;
            double t16719 = t16712*t16718*(1.0/2.0);
            double t16720 = t16719+1.0;
            double t16721 = log(t16720);
            double t16722 = a1p*c*t16705;
            double t16723 = t16722+1.0;
            double t16724 = c0p*t16721*t16723*2.0;
            double t16725 = gamma_ab[index]*2.0;
            double t16726 = gamma_aa[index]+gamma_bb[index]+t16725;
            double t16727 = 1.0/(bet*bet);
            double t16728 = 1.0/(k*k);
            double t16729 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t16730 = 1.0/pow(t16703,1.4E1/3.0);
            double t16731 = t16707*2.0;
            double t16732 = t16731-2.0;
            double t16733 = two_13*2.0;
            double t16734 = t16733-2.0;
            double t16735 = 1.0/t16734;
            double t16736 = 1.0/c0f;
            double t16737 = b1f*t16708;
            double t16738 = b3f*t16709;
            double t16739 = b4f*t16710*t16711;
            double t16740 = b2f*c*t16705;
            double t16741 = t16740+t16737+t16738+t16739;
            double t16742 = 1.0/t16741;
            double t16743 = t16742*t16736*(1.0/2.0);
            double t16744 = t16743+1.0;
            double t16745 = log(t16744);
            double t16746 = a1f*c*t16705;
            double t16747 = t16746+1.0;
            double t16758 = c0f*t16745*t16747*2.0;
            double t16748 = t16724-t16758;
            double t16759 = t16732*t16735*t16748;
            double t16749 = t16724-t16759;
            double t16750 = alph*t16727*t16749*4.0;
            double t16751 = exp(t16750);
            double t16752 = t16751-1.0;
            double t16753 = t16726*t16726;
            double t16754 = pow(2.0,2.0/3.0);
            double t16755 = 1.0/k;
            double t16756 = 1.0/(pi_m12*pi_m12);
            double t16757 = 1.0/pow(t16703,7.0/3.0);
            double t16760 = 1.0/t16752;
            functional_[index] = -t16703*(t16724-t16759-((bet*bet)*log((alph*t16704*(t16726*t16754*t16755*t16756* \
               t16757*(1.0/1.6E1)+alph*t16730*t16704*t16760*t16707*t16753*t16728*t16729*(1.0/6.4E1))*2.0)/((alph* \
               alph)*t16730*t16707*1.0/(t16752*t16752)*t16753*t16727*t16728*t16729*(1.0/3.2E1)+alph*t16704*t16760* \
               t16726*t16754*t16755*t16756*t16757*(1.0/8.0)+1.0)+1.0)*(1.0/4.0))/alph+nu*t16726*t16754*t16755*t16756* \
               t16757*exp(1.0/pow(t16703,8.0/3.0)*t16707*t16726*t16728*(-2.5E1/2.0))*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/ \
               1.0E3)+Cc2*c*t16705*(1.0/1.0E3)+Cc3*t16710*t16711*(1.0/1.0E3))/(Cc4*c*t16705+Cc5*t16710*t16711+(Cc6* \
               c*t16710)/t16703+1.0))*(1.0/3.2E1));
        } else if (rho_b[index] > cutoff_) {
            double t16148 = rho_a[index]+rho_b[index];
            double t16149 = 1.0/bet;
            double t16150 = 1.0/pow(t16148,1.0/3.0);
            double t16151 = c*t16150;
            double t16152 = pow(2.0,1.0/3.0);
            double t16153 = sqrt(t16151);
            double t16154 = pow(t16151,3.0/2.0);
            double t16155 = c*c;
            double t16156 = 1.0/pow(t16148,2.0/3.0);
            double t16157 = 1.0/c0p;
            double t16158 = b1p*t16153;
            double t16159 = b3p*t16154;
            double t16160 = b4p*t16155*t16156;
            double t16161 = b2p*c*t16150;
            double t16162 = t16160+t16161+t16158+t16159;
            double t16163 = 1.0/t16162;
            double t16164 = t16163*t16157*(1.0/2.0);
            double t16165 = t16164+1.0;
            double t16166 = log(t16165);
            double t16167 = a1p*c*t16150;
            double t16168 = t16167+1.0;
            double t16169 = c0p*t16166*t16168*2.0;
            double t16170 = gamma_ab[index]*2.0;
            double t16171 = gamma_aa[index]+gamma_bb[index]+t16170;
            double t16172 = 1.0/(bet*bet);
            double t16173 = 1.0/(k*k);
            double t16174 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t16175 = 1.0/pow(t16148,1.4E1/3.0);
            double t16176 = t16152*2.0;
            double t16177 = t16176-2.0;
            double t16178 = two_13*2.0;
            double t16179 = t16178-2.0;
            double t16180 = 1.0/t16179;
            double t16181 = 1.0/c0f;
            double t16182 = b1f*t16153;
            double t16183 = b3f*t16154;
            double t16184 = b4f*t16155*t16156;
            double t16185 = b2f*c*t16150;
            double t16186 = t16182+t16183+t16184+t16185;
            double t16187 = 1.0/t16186;
            double t16188 = t16181*t16187*(1.0/2.0);
            double t16189 = t16188+1.0;
            double t16190 = log(t16189);
            double t16191 = a1f*c*t16150;
            double t16192 = t16191+1.0;
            double t16203 = c0f*t16190*t16192*2.0;
            double t16193 = -t16203+t16169;
            double t16194 = t16169-t16180*t16193*t16177;
            double t16195 = alph*t16172*t16194*4.0;
            double t16196 = exp(t16195);
            double t16197 = t16196-1.0;
            double t16198 = t16171*t16171;
            double t16199 = pow(2.0,2.0/3.0);
            double t16200 = 1.0/k;
            double t16201 = 1.0/(pi_m12*pi_m12);
            double t16202 = 1.0/pow(t16148,7.0/3.0);
            double t16204 = t16203-t16169;
            double t16205 = t16204*t16180*t16177;
            functional_[index] = -t16148*(t16205+t16169-((bet*bet)*log((alph*t16149*(t16200*t16201*t16202*t16171* \
               t16199*(1.0/1.6E1)+(alph*t16152*t16173*t16174*t16175*t16149*t16198*(1.0/6.4E1))/t16197)*2.0)/((alph* \
               t16200*t16201*t16202*t16171*t16149*t16199*(1.0/8.0))/(exp(alph*t16172*(t16205+t16169)*4.0)-1.0)+(alph* \
               alph)*t16152*t16172*t16173*t16174*t16175*1.0/(t16197*t16197)*t16198*(1.0/3.2E1)+1.0)+1.0)*(1.0/4.0) \
               )/alph+nu*t16200*t16201*t16202*t16171*t16199*exp(t16152*t16171*t16173*1.0/pow(t16148,8.0/3.0)*(-2.5E1/ \
               2.0))*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t16150*(1.0/1.0E3)+Cc3*t16155*t16156*(1.0/1.0E3)) \
               /(Cc4*c*t16150+Cc5*t16155*t16156+(Cc6*c*t16155)/t16148+1.0))*(1.0/3.2E1));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t15431 = rho_a[index]+rho_b[index];
            double t15432 = 1.0/pow(t15431,1.0/3.0);
            double t15433 = c*t15432;
            double t15434 = sqrt(t15433);
            double t15435 = b1p*t15434;
            double t15436 = pow(t15433,3.0/2.0);
            double t15437 = b3p*t15436;
            double t15438 = c*c;
            double t15439 = 1.0/pow(t15431,2.0/3.0);
            double t15440 = b4p*t15438*t15439;
            double t15441 = b2p*c*t15432;
            double t15442 = t15440+t15441+t15435+t15437;
            double t15443 = 1.0/pow(t15431,4.0/3.0);
            double t15444 = 1.0/t15431;
            double t15445 = rho_a[index]-rho_b[index];
            double t15446 = t15444*t15445;
            double t15447 = 1.0/bet;
            double t15448 = t15446+1.0;
            double t15449 = pow(t15448,2.0/3.0);
            double t15450 = t15449*(1.0/2.0);
            double t15451 = -t15446+1.0;
            double t15452 = pow(t15451,2.0/3.0);
            double t15453 = t15452*(1.0/2.0);
            double t15454 = t15450+t15453;
            double t15455 = 1.0/c0p;
            double t15456 = 1.0/t15442;
            double t15457 = t15455*t15456*(1.0/2.0);
            double t15458 = t15457+1.0;
            double t15459 = a1p*c*t15432;
            double t15460 = t15459+1.0;
            double t15461 = log(t15458);
            double t15462 = c0p*t15460*t15461*2.0;
            double t15463 = t15445*t15445;
            double t15464 = two_13*2.0;
            double t15465 = t15464-2.0;
            double t15466 = 1.0/t15465;
            double t15467 = 1.0/(t15431*t15431*t15431*t15431);
            double t15468 = t15463*t15463;
            double t15469 = pow(t15448,4.0/3.0);
            double t15470 = pow(t15451,4.0/3.0);
            double t15471 = t15470+t15469-2.0;
            double t15472 = gamma_ab[index]*2.0;
            double t15473 = gamma_aa[index]+gamma_bb[index]+t15472;
            double t15474 = 1.0/(bet*bet);
            double t15475 = 1.0/(k*k);
            double t15476 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t15477 = 1.0/(t15454*t15454*t15454);
            double t15478 = 1.0/c0f;
            double t15479 = b1f*t15434;
            double t15480 = b3f*t15436;
            double t15481 = b4f*t15438*t15439;
            double t15482 = b2f*c*t15432;
            double t15483 = t15480+t15481+t15482+t15479;
            double t15484 = 1.0/t15483;
            double t15485 = t15484*t15478*(1.0/2.0);
            double t15486 = t15485+1.0;
            double t15487 = log(t15486);
            double t15488 = a1f*c*t15432;
            double t15489 = t15488+1.0;
            double t15516 = c0f*t15487*t15489*2.0;
            double t15490 = t15462-t15516;
            double t15491 = 1.0/d2fz0;
            double t15492 = 1.0/Aa;
            double t15493 = b1a*t15434;
            double t15494 = b3a*t15436;
            double t15495 = b4a*t15438*t15439;
            double t15496 = b2a*c*t15432;
            double t15497 = t15493+t15494+t15495+t15496;
            double t15498 = 1.0/t15497;
            double t15499 = t15492*t15498*(1.0/2.0);
            double t15500 = t15499+1.0;
            double t15501 = log(t15500);
            double t15502 = a1a*c*t15432;
            double t15503 = t15502+1.0;
            double t15504 = t15467*t15468;
            double t15505 = t15504-1.0;
            double t15506 = Aa*t15501*t15503*t15505*t15471*t15491*t15466*2.0;
            double t15517 = t15471*t15490*t15466*t15467*t15468;
            double t15507 = t15506+t15462-t15517;
            double t15508 = alph*t15507*t15474*t15477*2.0;
            double t15509 = exp(t15508);
            double t15510 = t15509-1.0;
            double t15511 = 1.0/pow(t15431,1.4E1/3.0);
            double t15512 = 1.0/(t15454*t15454*t15454*t15454);
            double t15513 = t15473*t15473;
            double t15514 = 1.0/k;
            double t15515 = 1.0/(pi_m12*pi_m12);
            double t15518 = 1.0/t15510;
            double t15519 = 1.0/pow(t15431,7.0/3.0);
            double t15520 = 1.0/(t15454*t15454);
            double t15521 = 1.0/(t15431*t15431);
            double t15537 = t15521*t15445;
            double t15522 = t15444-t15537;
            double t15523 = 1.0/alph;
            double t15524 = bet*bet;
            double t15525 = t15520*t15514*t15515*t15473*t15519*(1.0/1.6E1);
            double t15526 = alph*t15511*t15512*t15513*t15518*t15447*t15475*t15476*(1.0/1.28E2);
            double t15527 = t15525+t15526;
            double t15528 = alph*alph;
            double t15529 = 1.0/(t15510*t15510);
            double t15530 = t15511*t15512*t15513*t15474*t15528*t15475*t15529*t15476*(1.0/6.4E1);
            double t15531 = alph*t15520*t15514*t15515*t15473*t15518*t15447*t15519*(1.0/8.0);
            double t15532 = t15530+t15531+1.0;
            double t15533 = 1.0/t15532;
            double t15534 = alph*t15533*t15527*t15447*2.0;
            double t15535 = t15534+1.0;
            double t15536 = 1.0/pow(t15448,1.0/3.0);
            double t15538 = t15522*t15536*(1.0/3.0);
            double t15539 = 1.0/pow(t15451,1.0/3.0);
            double t15541 = t15522*t15539*(1.0/3.0);
            double t15540 = -t15541+t15538;
            double t15542 = 1.0/t15458;
            double t15543 = 1.0/(t15442*t15442);
            double t15544 = 1.0/pow(t15431,5.0/3.0);
            double t15545 = b4p*t15544*t15438*(2.0/3.0);
            double t15546 = b2p*c*t15443*(1.0/3.0);
            double t15547 = 1.0/sqrt(t15433);
            double t15548 = b1p*c*t15443*t15547*(1.0/6.0);
            double t15549 = b3p*c*t15434*t15443*(1.0/2.0);
            double t15550 = t15545+t15546+t15548+t15549;
            double t15551 = t15460*t15550*t15542*t15543;
            double t15552 = 1.0/(t15431*t15431*t15431*t15431*t15431);
            double t15553 = pow(t15448,1.0/3.0);
            double t15554 = t15522*t15553*(4.0/3.0);
            double t15555 = pow(t15451,1.0/3.0);
            double t15561 = t15522*t15555*(4.0/3.0);
            double t15556 = -t15561+t15554;
            double t15557 = 1.0/pow(t15431,1.7E1/3.0);
            double t15558 = 1.0/pow(t15431,1.0E1/3.0);
            double t15559 = 1.0/(t15454*t15454*t15454*t15454*t15454);
            double t15560 = t15471*t15445*t15463*t15490*t15466*t15467*4.0;
            double t15562 = t15490*t15466*t15556*t15467*t15468;
            double t15563 = 1.0/t15486;
            double t15564 = 1.0/(t15483*t15483);
            double t15565 = b4f*t15544*t15438*(2.0/3.0);
            double t15566 = b2f*c*t15443*(1.0/3.0);
            double t15567 = b1f*c*t15443*t15547*(1.0/6.0);
            double t15568 = b3f*c*t15434*t15443*(1.0/2.0);
            double t15569 = t15565+t15566+t15567+t15568;
            double t15570 = a1f*c*c0f*t15443*t15487*(2.0/3.0);
            double t15571 = a1p*c*c0p*t15443*t15461*(2.0/3.0);
            double t15572 = t15552*t15468*4.0;
            double t15586 = t15445*t15463*t15467*4.0;
            double t15573 = t15572-t15586;
            double t15574 = Aa*t15501*t15503*t15471*t15491*t15573*t15466*2.0;
            double t15575 = 1.0/t15500;
            double t15576 = 1.0/(t15497*t15497);
            double t15577 = b4a*t15544*t15438*(2.0/3.0);
            double t15578 = b2a*c*t15443*(1.0/3.0);
            double t15579 = b1a*c*t15443*t15547*(1.0/6.0);
            double t15580 = b3a*c*t15434*t15443*(1.0/2.0);
            double t15581 = t15580+t15577+t15578+t15579;
            double t15582 = Aa*a1a*c*t15501*t15505*t15443*t15471*t15491*t15466*(2.0/3.0);
            double t15583 = alph*t15512*t15540*t15507*t15474*6.0;
            double t15591 = t15563*t15564*t15569*t15489;
            double t15584 = t15551+t15570-t15571-t15591;
            double t15585 = t15471*t15466*t15467*t15584*t15468;
            double t15592 = Aa*t15501*t15503*t15505*t15491*t15466*t15556*2.0;
            double t15593 = t15503*t15505*t15471*t15491*t15581*t15466*t15575*t15576;
            double t15609 = t15471*t15552*t15490*t15466*t15468*4.0;
            double t15587 = -t15551+t15560+t15562+t15571+t15582-t15609+t15574-t15592-t15593+t15585;
            double t15588 = alph*t15474*t15477*t15587*2.0;
            double t15589 = t15583+t15588;
            double t15590 = t15454*t15454;
            double t15594 = 1.0/pow(t15431,8.0/3.0);
            double t15605 = t15473*t15590*t15475*t15594*2.5E1;
            double t15595 = exp(-t15605);
            double t15596 = Cc5*t15438*t15439;
            double t15597 = Cc6*c*t15444*t15438;
            double t15598 = Cc4*c*t15432;
            double t15599 = t15596+t15597+t15598+1.0;
            double t15600 = 1.0/t15599;
            double t15601 = Cc1*(1.0/1.0E3);
            double t15602 = Cc3*t15438*t15439*(1.0/1.0E3);
            double t15603 = Cc2*c*t15432*(1.0/1.0E3);
            double t15604 = t15601+t15602+t15603;
            double t15606 = Cx*(1.0E1/7.0);
            double t15608 = t15600*t15604;
            double t15607 = Cc0+t15606-t15608;
            double t15610 = log(t15535);
            v_rho_a_[index] = -t15506-t15462-t15431*(t15551-t15560-t15562-t15571-t15582+t15609-t15574+t15592+ \
               t15593-t15585-t15610*t15540*t15523*t15524*t15590*(3.0/2.0)+(t15523*t15524*t15454*t15590*(alph*t15533* \
               t15447*(t15520*t15514*t15515*t15473*t15558*(7.0/4.8E1)+t15540*t15514*t15515*t15473*t15519*t15477*(1.0/ \
               8.0)+alph*t15512*t15513*t15518*t15447*t15475*t15476*t15557*(7.0/1.92E2)+alph*t15511*t15513*t15540* \
               t15518*t15447*t15475*t15476*t15559*(1.0/3.2E1)-alph*t15511*t15512*t15513*t15509*t15447*t15475*t15529* \
               t15476*t15589*(1.0/1.28E2))*2.0-alph*1.0/(t15532*t15532)*t15527*t15447*(t15512*t15513*t15474*t15528* \
               t15475*t15529*t15476*t15557*(7.0/9.6E1)+alph*t15520*t15514*t15515*t15473*t15518*t15447*t15558*(7.0/ \
               2.4E1)+alph*t15540*t15514*t15515*t15473*t15518*t15447*t15519*t15477*(1.0/4.0)+t15511*t15513*t15540* \
               t15474*t15528*t15475*t15529*t15476*t15559*(1.0/1.6E1)-1.0/(t15510*t15510*t15510)*t15511*t15512*t15513* \
               t15509*t15474*t15528*t15475*t15476*t15589*(1.0/3.2E1)-alph*t15520*t15514*t15515*t15473*t15509*t15447* \
               t15519*t15529*t15589*(1.0/8.0))*2.0)*(1.0/2.0))/t15535+nu*t15514*t15515*t15454*t15473*t15519*t15595* \
               (t15600*(Cc2*c*t15443*(1.0/3.0E3)+Cc3*t15544*t15438*(1.0/1.5E3))-t15604*1.0/(t15599*t15599)*(Cc4*c* \
               t15443*(1.0/3.0)+Cc5*t15544*t15438*(2.0/3.0)+Cc6*c*t15521*t15438))*(1.0/1.6E1)+nu*t15540*t15514*t15515* \
               t15607*t15473*t15519*t15595*(1.0/1.6E1)-nu*t15514*t15515*t15454*t15607*t15473*t15558*t15595*(7.0/4.8E1) \
               +nu*t15514*t15515*t15454*t15607*t15473*t15519*t15595*(1.0/pow(t15431,1.1E1/3.0)*t15473*t15590*t15475* \
               (2.0E2/3.0)-t15540*t15454*t15473*t15475*t15594*5.0E1)*(1.0/1.6E1))+t15610*t15523*t15524*t15454*t15590* \
               (1.0/2.0)+t15471*t15466*t15467*t15468*(t15462-t15516)-nu*t15514*t15515*t15454*t15607*t15473*t15519* \
               t15595*(1.0/1.6E1);
        } else if (rho_a[index] > cutoff_) {
            double t16762 = rho_a[index]+rho_b[index];
            double t16763 = 1.0/pow(t16762,1.0/3.0);
            double t16764 = c*t16763;
            double t16765 = sqrt(t16764);
            double t16766 = b1f*t16765;
            double t16767 = pow(t16764,3.0/2.0);
            double t16768 = b3f*t16767;
            double t16769 = c*c;
            double t16770 = 1.0/pow(t16762,2.0/3.0);
            double t16771 = b4f*t16770*t16769;
            double t16772 = b2f*c*t16763;
            double t16773 = t16771+t16772+t16766+t16768;
            double t16774 = 1.0/pow(t16762,4.0/3.0);
            double t16775 = b1p*t16765;
            double t16776 = b3p*t16767;
            double t16777 = b4p*t16770*t16769;
            double t16778 = b2p*c*t16763;
            double t16779 = t16775+t16776+t16777+t16778;
            double t16780 = 1.0/pow(t16762,5.0/3.0);
            double t16781 = 1.0/sqrt(t16764);
            double t16782 = 1.0/c0f;
            double t16783 = 1.0/t16773;
            double t16784 = t16782*t16783*(1.0/2.0);
            double t16785 = t16784+1.0;
            double t16786 = 1.0/c0p;
            double t16787 = 1.0/t16779;
            double t16788 = t16786*t16787*(1.0/2.0);
            double t16789 = t16788+1.0;
            double t16790 = pow(2.0,1.0/3.0);
            double t16791 = 1.0/bet;
            double t16792 = log(t16789);
            double t16793 = a1p*c*t16763;
            double t16794 = t16793+1.0;
            double t16795 = t16790*2.0;
            double t16796 = t16795-2.0;
            double t16797 = two_13*2.0;
            double t16798 = t16797-2.0;
            double t16799 = 1.0/t16798;
            double t16800 = log(t16785);
            double t16801 = a1f*c*t16763;
            double t16802 = t16801+1.0;
            double t16803 = c0p*t16792*t16794*2.0;
            double t16804 = gamma_ab[index]*2.0;
            double t16805 = gamma_aa[index]+gamma_bb[index]+t16804;
            double t16806 = 1.0/(bet*bet);
            double t16807 = 1.0/(k*k);
            double t16808 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t16809 = 1.0/pow(t16762,1.4E1/3.0);
            double t16820 = c0f*t16800*t16802*2.0;
            double t16810 = -t16820+t16803;
            double t16811 = t16803-t16810*t16796*t16799;
            double t16812 = alph*t16811*t16806*4.0;
            double t16813 = exp(t16812);
            double t16814 = t16813-1.0;
            double t16815 = t16805*t16805;
            double t16816 = pow(2.0,2.0/3.0);
            double t16817 = 1.0/k;
            double t16818 = 1.0/(pi_m12*pi_m12);
            double t16819 = 1.0/pow(t16762,7.0/3.0);
            double t16821 = t16820-t16803;
            double t16822 = t16821*t16796*t16799;
            double t16823 = t16803+t16822;
            double t16824 = alph*t16823*t16806*4.0;
            double t16825 = exp(t16824);
            double t16826 = t16825-1.0;
            double t16827 = 1.0/t16826;
            double t16828 = alph*alph;
            double t16829 = 1.0/t16785;
            double t16830 = 1.0/(t16773*t16773);
            double t16831 = b4f*t16780*t16769*(2.0/3.0);
            double t16832 = b2f*c*t16774*(1.0/3.0);
            double t16833 = b1f*c*t16781*t16774*(1.0/6.0);
            double t16834 = b3f*c*t16765*t16774*(1.0/2.0);
            double t16835 = t16831+t16832+t16833+t16834;
            double t16836 = t16802*t16830*t16835*t16829;
            double t16837 = 1.0/t16789;
            double t16838 = 1.0/(t16779*t16779);
            double t16839 = b4p*t16780*t16769*(2.0/3.0);
            double t16840 = b2p*c*t16774*(1.0/3.0);
            double t16841 = b1p*c*t16781*t16774*(1.0/6.0);
            double t16842 = b3p*c*t16765*t16774*(1.0/2.0);
            double t16843 = t16840+t16841+t16842+t16839;
            double t16844 = a1p*c*c0p*t16774*t16792*(2.0/3.0);
            double t16847 = t16843*t16837*t16838*t16794;
            double t16856 = a1f*c*c0f*t16800*t16774*(2.0/3.0);
            double t16845 = t16844+t16836-t16847-t16856;
            double t16846 = t16845*t16796*t16799;
            double t16848 = 1.0/(t16826*t16826);
            double t16849 = alph*t16805*t16816*t16817*t16791*t16818*t16827*t16819*(1.0/8.0);
            double t16850 = t16805*t16816*t16817*t16818*t16819*(1.0/1.6E1);
            double t16851 = t16806*t16815*t16807*t16790*t16808*t16809*t16828*t16848*(1.0/3.2E1);
            double t16852 = t16851+t16849+1.0;
            double t16853 = 1.0/pow(t16762,1.7E1/3.0);
            double t16854 = 1.0/pow(t16762,1.0E1/3.0);
            double t16855 = 1.0/(bet*bet*bet);
            double t16857 = -t16844+t16846+t16847;
            double t16858 = 1.0/pow(t16762,8.0/3.0);
            double t16872 = t16805*t16807*t16790*t16858*(2.5E1/2.0);
            double t16859 = exp(-t16872);
            double t16860 = Cx*(1.0E1/7.0);
            double t16861 = Cc1*(1.0/1.0E3);
            double t16862 = Cc3*t16770*t16769*(1.0/1.0E3);
            double t16863 = Cc2*c*t16763*(1.0/1.0E3);
            double t16864 = t16861+t16862+t16863;
            double t16865 = Cc5*t16770*t16769;
            double t16866 = 1.0/t16762;
            double t16867 = Cc6*c*t16866*t16769;
            double t16868 = Cc4*c*t16763;
            double t16869 = t16865+t16867+t16868+1.0;
            double t16870 = 1.0/t16869;
            double t16878 = t16870*t16864;
            double t16871 = Cc0+t16860-t16878;
            double t16873 = 1.0/alph;
            double t16874 = bet*bet;
            double t16875 = alph*t16815*t16807*t16790*t16808*t16791*t16809*t16827*(1.0/6.4E1);
            double t16876 = t16850+t16875;
            double t16877 = 1.0/t16852;
            v_rho_a_[index] = -t16803-t16822-t16762*(-t16844+t16846+t16847+(t16873*t16874*(alph*t16791*t16877* \
               (t16805*t16816*t16817*t16818*t16854*(7.0/4.8E1)+alph*t16815*t16807*t16790*t16808*t16853*t16791*t16827* \
               (7.0/9.6E1)+t16815*t16807*t16825*t16790*t16808*t16809*t16828*t16855*t16848*t16857*(1.0/1.6E1))*2.0- \
               alph*1.0/(t16852*t16852)*t16791*t16876*(t16806*t16815*t16807*t16790*t16808*t16853*t16828*t16848*(7.0/ \
               4.8E1)+alph*t16805*t16816*t16817*t16791*t16818*t16827*t16854*(7.0/2.4E1)+t16805*t16816*t16825*t16817* \
               t16818*t16819*t16828*t16855*t16848*t16857*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t16815*t16807*t16825* \
               t16790*t16808*1.0/(t16826*t16826*t16826)*t16809*t16828*t16857*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t16791* \
               (t16850+(alph*t16815*t16807*t16790*t16808*t16791*t16809*(1.0/6.4E1))/t16814)*2.0)/(t16849+1.0/(t16814* \
               t16814)*t16806*t16815*t16807*t16790*t16808*t16809*t16828*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t16815* \
               1.0/(t16762*t16762*t16762*t16762*t16762*t16762)*t16871*t16818*t16859*(2.5E1/1.2E1)+nu*t16805*t16816* \
               t16817*t16818*t16819*t16859*(t16870*(Cc2*c*t16774*(1.0/3.0E3)+Cc3*t16780*t16769*(1.0/1.5E3))-t16864* \
               1.0/(t16869*t16869)*(Cc4*c*t16774*(1.0/3.0)+Cc5*t16780*t16769*(2.0/3.0)+Cc6*c*1.0/(t16762*t16762)* \
               t16769))*(1.0/3.2E1)-nu*t16805*t16816*t16817*t16871*t16818*t16854*t16859*(7.0/9.6E1))+t16873*t16874* \
               log(alph*t16791*t16876*t16877*2.0+1.0)*(1.0/4.0)-nu*t16805*t16816*t16817*t16871*t16818*t16819*t16859* \
               (1.0/3.2E1);
        } else if (rho_b[index] > cutoff_) {
            double t16207 = rho_a[index]+rho_b[index];
            double t16208 = 1.0/pow(t16207,1.0/3.0);
            double t16209 = c*t16208;
            double t16210 = sqrt(t16209);
            double t16211 = b1f*t16210;
            double t16212 = pow(t16209,3.0/2.0);
            double t16213 = b3f*t16212;
            double t16214 = c*c;
            double t16215 = 1.0/pow(t16207,2.0/3.0);
            double t16216 = b4f*t16214*t16215;
            double t16217 = b2f*c*t16208;
            double t16218 = t16211+t16213+t16216+t16217;
            double t16219 = 1.0/pow(t16207,4.0/3.0);
            double t16220 = b1p*t16210;
            double t16221 = b3p*t16212;
            double t16222 = b4p*t16214*t16215;
            double t16223 = b2p*c*t16208;
            double t16224 = t16220+t16221+t16222+t16223;
            double t16225 = 1.0/pow(t16207,5.0/3.0);
            double t16226 = 1.0/sqrt(t16209);
            double t16227 = 1.0/c0f;
            double t16228 = 1.0/t16218;
            double t16229 = t16227*t16228*(1.0/2.0);
            double t16230 = t16229+1.0;
            double t16231 = 1.0/c0p;
            double t16232 = 1.0/t16224;
            double t16233 = t16231*t16232*(1.0/2.0);
            double t16234 = t16233+1.0;
            double t16235 = pow(2.0,1.0/3.0);
            double t16236 = 1.0/bet;
            double t16237 = log(t16234);
            double t16238 = a1p*c*t16208;
            double t16239 = t16238+1.0;
            double t16240 = t16235*2.0;
            double t16241 = t16240-2.0;
            double t16242 = two_13*2.0;
            double t16243 = t16242-2.0;
            double t16244 = 1.0/t16243;
            double t16245 = log(t16230);
            double t16246 = a1f*c*t16208;
            double t16247 = t16246+1.0;
            double t16248 = c0p*t16237*t16239*2.0;
            double t16249 = gamma_ab[index]*2.0;
            double t16250 = gamma_aa[index]+gamma_bb[index]+t16249;
            double t16251 = 1.0/(bet*bet);
            double t16252 = 1.0/(k*k);
            double t16253 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t16254 = 1.0/pow(t16207,1.4E1/3.0);
            double t16265 = c0f*t16245*t16247*2.0;
            double t16255 = -t16265+t16248;
            double t16256 = t16248-t16241*t16244*t16255;
            double t16257 = alph*t16251*t16256*4.0;
            double t16258 = exp(t16257);
            double t16259 = t16258-1.0;
            double t16260 = t16250*t16250;
            double t16261 = pow(2.0,2.0/3.0);
            double t16262 = 1.0/k;
            double t16263 = 1.0/(pi_m12*pi_m12);
            double t16264 = 1.0/pow(t16207,7.0/3.0);
            double t16266 = t16265-t16248;
            double t16267 = t16241*t16244*t16266;
            double t16268 = t16248+t16267;
            double t16269 = alph*t16251*t16268*4.0;
            double t16270 = exp(t16269);
            double t16271 = t16270-1.0;
            double t16272 = 1.0/t16271;
            double t16273 = alph*alph;
            double t16274 = 1.0/t16230;
            double t16275 = 1.0/(t16218*t16218);
            double t16276 = b4f*t16214*t16225*(2.0/3.0);
            double t16277 = b2f*c*t16219*(1.0/3.0);
            double t16278 = b1f*c*t16226*t16219*(1.0/6.0);
            double t16279 = b3f*c*t16210*t16219*(1.0/2.0);
            double t16280 = t16276+t16277+t16278+t16279;
            double t16281 = t16280*t16247*t16274*t16275;
            double t16282 = 1.0/t16234;
            double t16283 = 1.0/(t16224*t16224);
            double t16284 = b4p*t16214*t16225*(2.0/3.0);
            double t16285 = b2p*c*t16219*(1.0/3.0);
            double t16286 = b1p*c*t16226*t16219*(1.0/6.0);
            double t16287 = b3p*c*t16210*t16219*(1.0/2.0);
            double t16288 = t16284+t16285+t16286+t16287;
            double t16289 = a1p*c*c0p*t16219*t16237*(2.0/3.0);
            double t16292 = t16282*t16283*t16239*t16288;
            double t16301 = a1f*c*c0f*t16245*t16219*(2.0/3.0);
            double t16290 = -t16301+t16281-t16292+t16289;
            double t16291 = t16241*t16244*t16290;
            double t16293 = 1.0/(t16271*t16271);
            double t16294 = alph*t16250*t16261*t16262*t16236*t16263*t16272*t16264*(1.0/8.0);
            double t16295 = t16250*t16261*t16262*t16263*t16264*(1.0/1.6E1);
            double t16296 = t16251*t16260*t16252*t16235*t16253*t16254*t16273*t16293*(1.0/3.2E1);
            double t16297 = t16294+t16296+1.0;
            double t16298 = 1.0/pow(t16207,1.7E1/3.0);
            double t16299 = 1.0/pow(t16207,1.0E1/3.0);
            double t16300 = 1.0/(bet*bet*bet);
            double t16302 = t16291+t16292-t16289;
            double t16303 = 1.0/pow(t16207,8.0/3.0);
            double t16317 = t16303*t16250*t16252*t16235*(2.5E1/2.0);
            double t16304 = exp(-t16317);
            double t16305 = Cx*(1.0E1/7.0);
            double t16306 = Cc1*(1.0/1.0E3);
            double t16307 = Cc3*t16214*t16215*(1.0/1.0E3);
            double t16308 = Cc2*c*t16208*(1.0/1.0E3);
            double t16309 = t16306+t16307+t16308;
            double t16310 = Cc5*t16214*t16215;
            double t16311 = 1.0/t16207;
            double t16312 = Cc6*c*t16311*t16214;
            double t16313 = Cc4*c*t16208;
            double t16314 = t16310+t16312+t16313+1.0;
            double t16315 = 1.0/t16314;
            double t16323 = t16315*t16309;
            double t16316 = Cc0+t16305-t16323;
            double t16318 = 1.0/alph;
            double t16319 = bet*bet;
            double t16320 = alph*t16260*t16252*t16235*t16253*t16236*t16254*t16272*(1.0/6.4E1);
            double t16321 = t16320+t16295;
            double t16322 = 1.0/t16297;
            v_rho_a_[index] = -t16248-t16267-t16207*(t16291+t16292-t16289+(t16318*t16319*(alph*t16322*t16236* \
               (t16250*t16261*t16262*t16263*t16299*(7.0/4.8E1)+alph*t16260*t16252*t16235*t16253*t16236*t16272*t16298* \
               (7.0/9.6E1)+t16300*t16302*t16260*t16252*t16270*t16235*t16253*t16254*t16273*t16293*(1.0/1.6E1))*2.0- \
               alph*t16321*t16236*1.0/(t16297*t16297)*(t16251*t16260*t16252*t16235*t16253*t16273*t16293*t16298*(7.0/ \
               4.8E1)+alph*t16250*t16261*t16262*t16236*t16263*t16272*t16299*(7.0/2.4E1)+t16300*t16302*t16250*t16261* \
               t16270*t16262*t16263*t16264*t16273*t16293*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t16302*t16260*t16252* \
               t16270*t16235*t16253*1.0/(t16271*t16271*t16271)*t16254*t16273*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t16236* \
               (t16295+(alph*t16260*t16252*t16235*t16253*t16236*t16254*(1.0/6.4E1))/t16259)*2.0)/(t16294+t16251*t16260* \
               t16252*t16235*t16253*t16254*t16273*1.0/(t16259*t16259)*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t16304* \
               t16260*1.0/(t16207*t16207*t16207*t16207*t16207*t16207)*t16316*t16263*(2.5E1/1.2E1)+nu*t16250*t16304* \
               t16261*t16262*t16263*t16264*(t16315*(Cc2*c*t16219*(1.0/3.0E3)+Cc3*t16214*t16225*(1.0/1.5E3))-1.0/(t16314* \
               t16314)*t16309*(Cc4*c*t16219*(1.0/3.0)+Cc5*t16214*t16225*(2.0/3.0)+Cc6*c*t16214*1.0/(t16207*t16207) \
               ))*(1.0/3.2E1)-nu*t16250*t16304*t16261*t16262*t16316*t16263*t16299*(7.0/9.6E1))+t16318*t16319*log(alph* \
               t16321*t16322*t16236*2.0+1.0)*(1.0/4.0)-nu*t16250*t16304*t16261*t16262*t16316*t16263*t16264*(1.0/3.2E1) \
               ;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t15612 = rho_a[index]+rho_b[index];
            double t15613 = 1.0/pow(t15612,1.0/3.0);
            double t15614 = c*t15613;
            double t15615 = sqrt(t15614);
            double t15616 = b1p*t15615;
            double t15617 = pow(t15614,3.0/2.0);
            double t15618 = b3p*t15617;
            double t15619 = c*c;
            double t15620 = 1.0/pow(t15612,2.0/3.0);
            double t15621 = b4p*t15620*t15619;
            double t15622 = b2p*c*t15613;
            double t15623 = t15621+t15622+t15616+t15618;
            double t15624 = 1.0/pow(t15612,4.0/3.0);
            double t15625 = 1.0/t15612;
            double t15626 = rho_a[index]-rho_b[index];
            double t15627 = t15625*t15626;
            double t15628 = 1.0/bet;
            double t15629 = t15627+1.0;
            double t15630 = pow(t15629,2.0/3.0);
            double t15631 = t15630*(1.0/2.0);
            double t15632 = -t15627+1.0;
            double t15633 = pow(t15632,2.0/3.0);
            double t15634 = t15633*(1.0/2.0);
            double t15635 = t15631+t15634;
            double t15636 = 1.0/c0p;
            double t15637 = 1.0/t15623;
            double t15638 = t15636*t15637*(1.0/2.0);
            double t15639 = t15638+1.0;
            double t15640 = a1p*c*t15613;
            double t15641 = t15640+1.0;
            double t15642 = log(t15639);
            double t15643 = c0p*t15641*t15642*2.0;
            double t15644 = t15626*t15626;
            double t15645 = two_13*2.0;
            double t15646 = t15645-2.0;
            double t15647 = 1.0/t15646;
            double t15648 = 1.0/(t15612*t15612*t15612*t15612);
            double t15649 = t15644*t15644;
            double t15650 = pow(t15629,4.0/3.0);
            double t15651 = pow(t15632,4.0/3.0);
            double t15652 = t15650+t15651-2.0;
            double t15653 = gamma_ab[index]*2.0;
            double t15654 = gamma_aa[index]+gamma_bb[index]+t15653;
            double t15655 = 1.0/(bet*bet);
            double t15656 = 1.0/(k*k);
            double t15657 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t15658 = 1.0/(t15635*t15635*t15635);
            double t15659 = 1.0/c0f;
            double t15660 = b1f*t15615;
            double t15661 = b3f*t15617;
            double t15662 = b4f*t15620*t15619;
            double t15663 = b2f*c*t15613;
            double t15664 = t15660+t15661+t15662+t15663;
            double t15665 = 1.0/t15664;
            double t15666 = t15665*t15659*(1.0/2.0);
            double t15667 = t15666+1.0;
            double t15668 = log(t15667);
            double t15669 = a1f*c*t15613;
            double t15670 = t15669+1.0;
            double t15697 = c0f*t15670*t15668*2.0;
            double t15671 = t15643-t15697;
            double t15672 = 1.0/d2fz0;
            double t15673 = 1.0/Aa;
            double t15674 = b1a*t15615;
            double t15675 = b3a*t15617;
            double t15676 = b4a*t15620*t15619;
            double t15677 = b2a*c*t15613;
            double t15678 = t15674+t15675+t15676+t15677;
            double t15679 = 1.0/t15678;
            double t15680 = t15673*t15679*(1.0/2.0);
            double t15681 = t15680+1.0;
            double t15682 = log(t15681);
            double t15683 = a1a*c*t15613;
            double t15684 = t15683+1.0;
            double t15685 = t15648*t15649;
            double t15686 = t15685-1.0;
            double t15687 = Aa*t15652*t15672*t15682*t15647*t15684*t15686*2.0;
            double t15698 = t15652*t15671*t15647*t15648*t15649;
            double t15688 = t15643+t15687-t15698;
            double t15689 = alph*t15655*t15658*t15688*2.0;
            double t15690 = exp(t15689);
            double t15691 = t15690-1.0;
            double t15692 = 1.0/pow(t15612,1.4E1/3.0);
            double t15693 = 1.0/(t15635*t15635*t15635*t15635);
            double t15694 = t15654*t15654;
            double t15695 = 1.0/k;
            double t15696 = 1.0/(pi_m12*pi_m12);
            double t15699 = 1.0/t15691;
            double t15700 = 1.0/pow(t15612,7.0/3.0);
            double t15701 = 1.0/(t15635*t15635);
            double t15702 = 1.0/(t15612*t15612);
            double t15703 = t15702*t15626;
            double t15704 = t15703+t15625;
            double t15705 = 1.0/alph;
            double t15706 = bet*bet;
            double t15707 = t15700*t15701*t15654*t15695*t15696*(1.0/1.6E1);
            double t15708 = alph*t15628*t15656*t15692*t15657*t15693*t15694*t15699*(1.0/1.28E2);
            double t15709 = t15707+t15708;
            double t15710 = alph*alph;
            double t15711 = 1.0/(t15691*t15691);
            double t15712 = t15710*t15711*t15655*t15656*t15692*t15657*t15693*t15694*(1.0/6.4E1);
            double t15713 = alph*t15700*t15701*t15654*t15628*t15695*t15696*t15699*(1.0/8.0);
            double t15714 = t15712+t15713+1.0;
            double t15715 = 1.0/t15714;
            double t15716 = alph*t15715*t15628*t15709*2.0;
            double t15717 = t15716+1.0;
            double t15718 = 1.0/pow(t15629,1.0/3.0);
            double t15719 = t15704*t15718*(1.0/3.0);
            double t15720 = 1.0/pow(t15632,1.0/3.0);
            double t15722 = t15720*t15704*(1.0/3.0);
            double t15721 = -t15722+t15719;
            double t15723 = 1.0/t15639;
            double t15724 = 1.0/(t15623*t15623);
            double t15725 = 1.0/pow(t15612,5.0/3.0);
            double t15726 = b4p*t15725*t15619*(2.0/3.0);
            double t15727 = b2p*c*t15624*(1.0/3.0);
            double t15728 = 1.0/sqrt(t15614);
            double t15729 = b1p*c*t15624*t15728*(1.0/6.0);
            double t15730 = b3p*c*t15615*t15624*(1.0/2.0);
            double t15731 = t15730+t15726+t15727+t15729;
            double t15732 = 1.0/(t15612*t15612*t15612*t15612*t15612);
            double t15733 = pow(t15629,1.0/3.0);
            double t15734 = t15704*t15733*(4.0/3.0);
            double t15735 = pow(t15632,1.0/3.0);
            double t15743 = t15704*t15735*(4.0/3.0);
            double t15736 = t15734-t15743;
            double t15737 = t15641*t15731*t15723*t15724;
            double t15738 = 1.0/pow(t15612,1.7E1/3.0);
            double t15739 = 1.0/pow(t15612,1.0E1/3.0);
            double t15740 = 1.0/(t15635*t15635*t15635*t15635*t15635);
            double t15741 = t15652*t15626*t15644*t15671*t15647*t15648*4.0;
            double t15742 = t15732*t15652*t15671*t15647*t15649*4.0;
            double t15744 = t15671*t15736*t15647*t15648*t15649;
            double t15745 = 1.0/t15667;
            double t15746 = 1.0/(t15664*t15664);
            double t15747 = b4f*t15725*t15619*(2.0/3.0);
            double t15748 = b2f*c*t15624*(1.0/3.0);
            double t15749 = b1f*c*t15624*t15728*(1.0/6.0);
            double t15750 = b3f*c*t15615*t15624*(1.0/2.0);
            double t15751 = t15750+t15747+t15748+t15749;
            double t15752 = a1f*c*c0f*t15624*t15668*(2.0/3.0);
            double t15753 = t15626*t15644*t15648*4.0;
            double t15754 = t15732*t15649*4.0;
            double t15755 = t15753+t15754;
            double t15756 = 1.0/t15681;
            double t15757 = 1.0/(t15678*t15678);
            double t15758 = b4a*t15725*t15619*(2.0/3.0);
            double t15759 = b2a*c*t15624*(1.0/3.0);
            double t15760 = b1a*c*t15624*t15728*(1.0/6.0);
            double t15761 = b3a*c*t15615*t15624*(1.0/2.0);
            double t15762 = t15760+t15761+t15758+t15759;
            double t15763 = t15652*t15672*t15762*t15647*t15684*t15756*t15757*t15686;
            double t15765 = a1p*c*c0p*t15624*t15642*(2.0/3.0);
            double t15767 = t15670*t15751*t15745*t15746;
            double t15764 = t15752+t15737-t15765-t15767;
            double t15766 = alph*t15721*t15655*t15693*t15688*6.0;
            double t15772 = t15652*t15647*t15764*t15648*t15649;
            double t15773 = Aa*t15652*t15672*t15682*t15647*t15755*t15684*2.0;
            double t15774 = Aa*t15672*t15682*t15736*t15647*t15684*t15686*2.0;
            double t15775 = Aa*a1a*c*t15624*t15652*t15672*t15682*t15647*t15686*(2.0/3.0);
            double t15768 = t15741+t15742+t15744+t15763-t15772+t15737-t15773-t15765-t15774-t15775;
            double t15769 = alph*t15655*t15658*t15768*2.0;
            double t15770 = t15766+t15769;
            double t15771 = t15635*t15635;
            double t15776 = 1.0/pow(t15612,8.0/3.0);
            double t15787 = t15654*t15771*t15656*t15776*2.5E1;
            double t15777 = exp(-t15787);
            double t15778 = Cc5*t15620*t15619;
            double t15779 = Cc6*c*t15625*t15619;
            double t15780 = Cc4*c*t15613;
            double t15781 = t15780+t15778+t15779+1.0;
            double t15782 = 1.0/t15781;
            double t15783 = Cc1*(1.0/1.0E3);
            double t15784 = Cc3*t15620*t15619*(1.0/1.0E3);
            double t15785 = Cc2*c*t15613*(1.0/1.0E3);
            double t15786 = t15783+t15784+t15785;
            double t15788 = Cx*(1.0E1/7.0);
            double t15790 = t15782*t15786;
            double t15789 = Cc0-t15790+t15788;
            double t15791 = log(t15717);
            v_rho_b_[index] = -t15643-t15687-t15612*(t15741+t15742+t15744+t15763-t15772+t15737-t15773-t15765- \
               t15774-t15775+t15721*t15705*t15706*t15771*t15791*(3.0/2.0)+(t15705*t15706*t15635*t15771*(alph*t15715* \
               t15628*(t15701*t15654*t15739*t15695*t15696*(7.0/4.8E1)-t15700*t15721*t15654*t15658*t15695*t15696*(1.0/ \
               8.0)+alph*t15628*t15656*t15657*t15693*t15738*t15694*t15699*(7.0/1.92E2)-alph*t15721*t15740*t15628* \
               t15656*t15692*t15657*t15694*t15699*(1.0/3.2E1)+alph*t15711*t15770*t15690*t15628*t15656*t15692*t15657* \
               t15693*t15694*(1.0/1.28E2))*2.0-alph*1.0/(t15714*t15714)*t15628*t15709*(t15710*t15711*t15655*t15656* \
               t15657*t15693*t15738*t15694*(7.0/9.6E1)+alph*t15701*t15654*t15628*t15739*t15695*t15696*t15699*(7.0/ \
               2.4E1)-alph*t15700*t15721*t15654*t15628*t15658*t15695*t15696*t15699*(1.0/4.0)-t15710*t15711*t15721* \
               t15740*t15655*t15656*t15692*t15657*t15694*(1.0/1.6E1)+t15710*t15770*t15690*t15655*1.0/(t15691*t15691* \
               t15691)*t15656*t15692*t15657*t15693*t15694*(1.0/3.2E1)+alph*t15700*t15701*t15711*t15770*t15654*t15690* \
               t15628*t15695*t15696*(1.0/8.0))*2.0)*(1.0/2.0))/t15717+nu*t15700*t15635*t15654*t15695*t15696*t15777* \
               (t15782*(Cc2*c*t15624*(1.0/3.0E3)+Cc3*t15725*t15619*(1.0/1.5E3))-1.0/(t15781*t15781)*t15786*(Cc4*c* \
               t15624*(1.0/3.0)+Cc5*t15725*t15619*(2.0/3.0)+Cc6*c*t15702*t15619))*(1.0/1.6E1)-nu*t15700*t15721*t15654* \
               t15695*t15696*t15777*t15789*(1.0/1.6E1)-nu*t15635*t15654*t15739*t15695*t15696*t15777*t15789*(7.0/4.8E1) \
               +nu*t15700*t15635*t15654*t15695*t15696*t15777*t15789*(1.0/pow(t15612,1.1E1/3.0)*t15654*t15771*t15656* \
               (2.0E2/3.0)+t15721*t15635*t15654*t15656*t15776*5.0E1)*(1.0/1.6E1))+t15705*t15706*t15635*t15771*t15791* \
               (1.0/2.0)+t15652*t15647*t15648*t15649*(t15643-t15697)-nu*t15700*t15635*t15654*t15695*t15696*t15777* \
               t15789*(1.0/1.6E1);
        } else if (rho_a[index] > cutoff_) {
            double t16880 = rho_a[index]+rho_b[index];
            double t16881 = 1.0/pow(t16880,1.0/3.0);
            double t16882 = c*t16881;
            double t16883 = sqrt(t16882);
            double t16884 = b1f*t16883;
            double t16885 = pow(t16882,3.0/2.0);
            double t16886 = b3f*t16885;
            double t16887 = c*c;
            double t16888 = 1.0/pow(t16880,2.0/3.0);
            double t16889 = b4f*t16887*t16888;
            double t16890 = b2f*c*t16881;
            double t16891 = t16890+t16884+t16886+t16889;
            double t16892 = 1.0/pow(t16880,4.0/3.0);
            double t16893 = b1p*t16883;
            double t16894 = b3p*t16885;
            double t16895 = b4p*t16887*t16888;
            double t16896 = b2p*c*t16881;
            double t16897 = t16893+t16894+t16895+t16896;
            double t16898 = 1.0/pow(t16880,5.0/3.0);
            double t16899 = 1.0/sqrt(t16882);
            double t16900 = 1.0/c0f;
            double t16901 = 1.0/t16891;
            double t16902 = t16900*t16901*(1.0/2.0);
            double t16903 = t16902+1.0;
            double t16904 = 1.0/c0p;
            double t16905 = 1.0/t16897;
            double t16906 = t16904*t16905*(1.0/2.0);
            double t16907 = t16906+1.0;
            double t16908 = pow(2.0,1.0/3.0);
            double t16909 = 1.0/bet;
            double t16910 = log(t16907);
            double t16911 = a1p*c*t16881;
            double t16912 = t16911+1.0;
            double t16913 = t16908*2.0;
            double t16914 = t16913-2.0;
            double t16915 = two_13*2.0;
            double t16916 = t16915-2.0;
            double t16917 = 1.0/t16916;
            double t16918 = log(t16903);
            double t16919 = a1f*c*t16881;
            double t16920 = t16919+1.0;
            double t16921 = c0p*t16910*t16912*2.0;
            double t16922 = gamma_ab[index]*2.0;
            double t16923 = gamma_aa[index]+gamma_bb[index]+t16922;
            double t16924 = 1.0/(bet*bet);
            double t16925 = 1.0/(k*k);
            double t16926 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t16927 = 1.0/pow(t16880,1.4E1/3.0);
            double t16938 = c0f*t16920*t16918*2.0;
            double t16928 = t16921-t16938;
            double t16939 = t16914*t16917*t16928;
            double t16929 = t16921-t16939;
            double t16930 = alph*t16924*t16929*4.0;
            double t16931 = exp(t16930);
            double t16932 = t16931-1.0;
            double t16933 = t16923*t16923;
            double t16934 = pow(2.0,2.0/3.0);
            double t16935 = 1.0/k;
            double t16936 = 1.0/(pi_m12*pi_m12);
            double t16937 = 1.0/pow(t16880,7.0/3.0);
            double t16940 = 1.0/t16932;
            double t16941 = alph*alph;
            double t16942 = 1.0/(t16932*t16932);
            double t16943 = 1.0/t16903;
            double t16944 = 1.0/(t16891*t16891);
            double t16945 = b4f*t16887*t16898*(2.0/3.0);
            double t16946 = b2f*c*t16892*(1.0/3.0);
            double t16947 = b1f*c*t16892*t16899*(1.0/6.0);
            double t16948 = b3f*c*t16883*t16892*(1.0/2.0);
            double t16949 = t16945+t16946+t16947+t16948;
            double t16950 = t16920*t16943*t16944*t16949;
            double t16951 = 1.0/t16907;
            double t16952 = 1.0/(t16897*t16897);
            double t16953 = b4p*t16887*t16898*(2.0/3.0);
            double t16954 = b2p*c*t16892*(1.0/3.0);
            double t16955 = b1p*c*t16892*t16899*(1.0/6.0);
            double t16956 = b3p*c*t16883*t16892*(1.0/2.0);
            double t16957 = t16953+t16954+t16955+t16956;
            double t16958 = a1p*c*c0p*t16910*t16892*(2.0/3.0);
            double t16961 = t16912*t16951*t16952*t16957;
            double t16972 = a1f*c*c0f*t16918*t16892*(2.0/3.0);
            double t16959 = t16950-t16961-t16972+t16958;
            double t16960 = t16914*t16917*t16959;
            double t16962 = t16941*t16924*t16933*t16942*t16925*t16908*t16926*t16927*(1.0/3.2E1);
            double t16963 = alph*t16940*t16923*t16934*t16935*t16909*t16936*t16937*(1.0/8.0);
            double t16964 = t16962+t16963+1.0;
            double t16965 = 1.0/t16964;
            double t16966 = t16923*t16934*t16935*t16936*t16937*(1.0/1.6E1);
            double t16967 = alph*t16940*t16933*t16925*t16908*t16926*t16909*t16927*(1.0/6.4E1);
            double t16968 = t16966+t16967;
            double t16969 = 1.0/pow(t16880,1.7E1/3.0);
            double t16970 = 1.0/pow(t16880,1.0E1/3.0);
            double t16971 = 1.0/(bet*bet*bet);
            double t16973 = t16960+t16961-t16958;
            double t16974 = 1.0/pow(t16880,8.0/3.0);
            double t16988 = t16923*t16925*t16908*t16974*(2.5E1/2.0);
            double t16975 = exp(-t16988);
            double t16976 = Cx*(1.0E1/7.0);
            double t16977 = Cc1*(1.0/1.0E3);
            double t16978 = Cc3*t16887*t16888*(1.0/1.0E3);
            double t16979 = Cc2*c*t16881*(1.0/1.0E3);
            double t16980 = t16977+t16978+t16979;
            double t16981 = Cc5*t16887*t16888;
            double t16982 = 1.0/t16880;
            double t16983 = Cc6*c*t16982*t16887;
            double t16984 = Cc4*c*t16881;
            double t16985 = t16981+t16983+t16984+1.0;
            double t16986 = 1.0/t16985;
            double t16993 = t16980*t16986;
            double t16987 = Cc0-t16993+t16976;
            double t16989 = 1.0/alph;
            double t16990 = bet*bet;
            double t16991 = alph*t16909*t16965*t16968*2.0;
            double t16992 = t16991+1.0;
            v_rho_b_[index] = -t16921-t16880*(t16960+t16961-t16958+(t16990*t16989*(alph*t16909*t16965*(t16923* \
               t16934*t16970*t16935*t16936*(7.0/4.8E1)+alph*t16940*t16933*t16925*t16908*t16926*t16909*t16969*(7.0/ \
               9.6E1)+t16931*t16941*t16933*t16942*t16925*t16908*t16926*t16971*t16927*t16973*(1.0/1.6E1))*2.0-alph* \
               t16909*1.0/(t16964*t16964)*t16968*(t16941*t16924*t16933*t16942*t16925*t16908*t16926*t16969*(7.0/4.8E1) \
               +alph*t16940*t16923*t16934*t16970*t16935*t16909*t16936*(7.0/2.4E1)+t16931*t16923*t16941*t16942*t16934* \
               t16935*t16971*t16936*t16937*t16973*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t16931*1.0/(t16932*t16932* \
               t16932)*t16941*t16933*t16925*t16908*t16926*t16927*t16973*(1.0/4.0))*2.0)*(1.0/4.0))/t16992+1.0/(k* \
               k*k)*nu*t16933*1.0/(t16880*t16880*t16880*t16880*t16880*t16880)*t16936*t16975*t16987*(2.5E1/1.2E1)+ \
               nu*t16923*t16934*t16935*t16936*t16937*t16975*(t16986*(Cc2*c*t16892*(1.0/3.0E3)+Cc3*t16887*t16898*(1.0/ \
               1.5E3))-t16980*1.0/(t16985*t16985)*(Cc4*c*t16892*(1.0/3.0)+Cc5*t16887*t16898*(2.0/3.0)+Cc6*c*1.0/(t16880* \
               t16880)*t16887))*(1.0/3.2E1)-nu*t16923*t16934*t16970*t16935*t16936*t16975*t16987*(7.0/9.6E1))+t16990* \
               t16989*log(t16992)*(1.0/4.0)+t16914*t16917*(t16921-t16938)-nu*t16923*t16934*t16935*t16936*t16937*t16975* \
               t16987*(1.0/3.2E1);
        } else if (rho_b[index] > cutoff_) {
            double t16325 = rho_a[index]+rho_b[index];
            double t16326 = 1.0/pow(t16325,1.0/3.0);
            double t16327 = c*t16326;
            double t16328 = sqrt(t16327);
            double t16329 = b1f*t16328;
            double t16330 = pow(t16327,3.0/2.0);
            double t16331 = b3f*t16330;
            double t16332 = c*c;
            double t16333 = 1.0/pow(t16325,2.0/3.0);
            double t16334 = b4f*t16332*t16333;
            double t16335 = b2f*c*t16326;
            double t16336 = t16331+t16334+t16335+t16329;
            double t16337 = 1.0/pow(t16325,4.0/3.0);
            double t16338 = b1p*t16328;
            double t16339 = b3p*t16330;
            double t16340 = b4p*t16332*t16333;
            double t16341 = b2p*c*t16326;
            double t16342 = t16340+t16341+t16338+t16339;
            double t16343 = 1.0/pow(t16325,5.0/3.0);
            double t16344 = 1.0/sqrt(t16327);
            double t16345 = 1.0/c0f;
            double t16346 = 1.0/t16336;
            double t16347 = t16345*t16346*(1.0/2.0);
            double t16348 = t16347+1.0;
            double t16349 = 1.0/c0p;
            double t16350 = 1.0/t16342;
            double t16351 = t16350*t16349*(1.0/2.0);
            double t16352 = t16351+1.0;
            double t16353 = pow(2.0,1.0/3.0);
            double t16354 = 1.0/bet;
            double t16355 = log(t16352);
            double t16356 = a1p*c*t16326;
            double t16357 = t16356+1.0;
            double t16358 = t16353*2.0;
            double t16359 = t16358-2.0;
            double t16360 = two_13*2.0;
            double t16361 = t16360-2.0;
            double t16362 = 1.0/t16361;
            double t16363 = log(t16348);
            double t16364 = a1f*c*t16326;
            double t16365 = t16364+1.0;
            double t16366 = c0p*t16355*t16357*2.0;
            double t16367 = gamma_ab[index]*2.0;
            double t16368 = gamma_aa[index]+gamma_bb[index]+t16367;
            double t16369 = 1.0/(bet*bet);
            double t16370 = 1.0/(k*k);
            double t16371 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
            double t16372 = 1.0/pow(t16325,1.4E1/3.0);
            double t16383 = c0f*t16363*t16365*2.0;
            double t16373 = -t16383+t16366;
            double t16374 = t16366-t16362*t16373*t16359;
            double t16375 = alph*t16374*t16369*4.0;
            double t16376 = exp(t16375);
            double t16377 = t16376-1.0;
            double t16378 = t16368*t16368;
            double t16379 = pow(2.0,2.0/3.0);
            double t16380 = 1.0/k;
            double t16381 = 1.0/(pi_m12*pi_m12);
            double t16382 = 1.0/pow(t16325,7.0/3.0);
            double t16384 = t16383-t16366;
            double t16385 = t16362*t16384*t16359;
            double t16386 = t16366+t16385;
            double t16387 = alph*t16386*t16369*4.0;
            double t16388 = exp(t16387);
            double t16389 = t16388-1.0;
            double t16390 = 1.0/t16389;
            double t16391 = alph*alph;
            double t16392 = 1.0/t16348;
            double t16393 = 1.0/(t16336*t16336);
            double t16394 = b4f*t16332*t16343*(2.0/3.0);
            double t16395 = b2f*c*t16337*(1.0/3.0);
            double t16396 = b1f*c*t16344*t16337*(1.0/6.0);
            double t16397 = b3f*c*t16328*t16337*(1.0/2.0);
            double t16398 = t16394+t16395+t16396+t16397;
            double t16399 = t16365*t16392*t16393*t16398;
            double t16400 = 1.0/t16352;
            double t16401 = 1.0/(t16342*t16342);
            double t16402 = b4p*t16332*t16343*(2.0/3.0);
            double t16403 = b2p*c*t16337*(1.0/3.0);
            double t16404 = b1p*c*t16344*t16337*(1.0/6.0);
            double t16405 = b3p*c*t16328*t16337*(1.0/2.0);
            double t16406 = t16402+t16403+t16404+t16405;
            double t16407 = a1p*c*c0p*t16337*t16355*(2.0/3.0);
            double t16410 = t16400*t16401*t16406*t16357;
            double t16419 = a1f*c*c0f*t16363*t16337*(2.0/3.0);
            double t16408 = -t16410+t16407-t16419+t16399;
            double t16409 = t16362*t16408*t16359;
            double t16411 = 1.0/(t16389*t16389);
            double t16412 = alph*t16380*t16354*t16381*t16390*t16382*t16368*t16379*(1.0/8.0);
            double t16413 = t16380*t16381*t16382*t16368*t16379*(1.0/1.6E1);
            double t16414 = t16411*t16370*t16353*t16371*t16372*t16391*t16369*t16378*(1.0/3.2E1);
            double t16415 = t16412+t16414+1.0;
            double t16416 = 1.0/pow(t16325,1.7E1/3.0);
            double t16417 = 1.0/pow(t16325,1.0E1/3.0);
            double t16418 = 1.0/(bet*bet*bet);
            double t16420 = t16410-t16407+t16409;
            double t16421 = 1.0/pow(t16325,8.0/3.0);
            double t16435 = t16421*t16370*t16353*t16368*(2.5E1/2.0);
            double t16422 = exp(-t16435);
            double t16423 = Cx*(1.0E1/7.0);
            double t16424 = Cc1*(1.0/1.0E3);
            double t16425 = Cc3*t16332*t16333*(1.0/1.0E3);
            double t16426 = Cc2*c*t16326*(1.0/1.0E3);
            double t16427 = t16424+t16425+t16426;
            double t16428 = Cc5*t16332*t16333;
            double t16429 = 1.0/t16325;
            double t16430 = Cc6*c*t16332*t16429;
            double t16431 = Cc4*c*t16326;
            double t16432 = t16430+t16431+t16428+1.0;
            double t16433 = 1.0/t16432;
            double t16441 = t16433*t16427;
            double t16434 = Cc0+t16423-t16441;
            double t16436 = 1.0/alph;
            double t16437 = bet*bet;
            double t16438 = alph*t16370*t16353*t16371*t16354*t16372*t16390*t16378*(1.0/6.4E1);
            double t16439 = t16413+t16438;
            double t16440 = 1.0/t16415;
            v_rho_b_[index] = -t16366-t16385-t16325*(t16410-t16407+t16409+(t16436*t16437*(alph*t16440*t16354* \
               (t16380*t16381*t16417*t16368*t16379*(7.0/4.8E1)+alph*t16370*t16353*t16371*t16416*t16354*t16390*t16378* \
               (7.0/9.6E1)+t16411*t16420*t16370*t16353*t16371*t16372*t16391*t16418*t16378*t16388*(1.0/1.6E1))*2.0- \
               alph*1.0/(t16415*t16415)*t16354*t16439*(t16411*t16370*t16353*t16371*t16416*t16391*t16369*t16378*(7.0/ \
               4.8E1)+alph*t16380*t16354*t16381*t16390*t16417*t16368*t16379*(7.0/2.4E1)+t16411*t16420*t16380*t16381* \
               t16382*t16391*t16418*t16368*t16379*t16388*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t16420*t16370*t16353* \
               t16371*t16372*t16391*t16378*t16388*1.0/(t16389*t16389*t16389)*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t16354* \
               (t16413+(alph*t16370*t16353*t16371*t16354*t16372*t16378*(1.0/6.4E1))/t16377)*2.0)/(t16412+t16370*t16353* \
               t16371*t16372*t16391*1.0/(t16377*t16377)*t16369*t16378*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t16422* \
               1.0/(t16325*t16325*t16325*t16325*t16325*t16325)*t16434*t16381*t16378*(2.5E1/1.2E1)+nu*t16422*t16380* \
               t16381*t16382*t16368*t16379*(t16433*(Cc2*c*t16337*(1.0/3.0E3)+Cc3*t16332*t16343*(1.0/1.5E3))-1.0/(t16432* \
               t16432)*t16427*(Cc4*c*t16337*(1.0/3.0)+Cc5*t16332*t16343*(2.0/3.0)+Cc6*c*t16332*1.0/(t16325*t16325) \
               ))*(1.0/3.2E1)-nu*t16422*t16380*t16434*t16381*t16417*t16368*t16379*(7.0/9.6E1))+t16436*t16437*log(alph* \
               t16440*t16354*t16439*2.0+1.0)*(1.0/4.0)-nu*t16422*t16380*t16434*t16381*t16382*t16368*t16379*(1.0/3.2E1) \
               ;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t15793 = rho_a[index]+rho_b[index];
                double t15794 = 1.0/t15793;
                double t15795 = rho_a[index]-rho_b[index];
                double t15796 = t15794*t15795;
                double t15797 = 1.0/bet;
                double t15798 = t15796+1.0;
                double t15799 = pow(t15798,2.0/3.0);
                double t15800 = t15799*(1.0/2.0);
                double t15801 = -t15796+1.0;
                double t15802 = pow(t15801,2.0/3.0);
                double t15803 = t15802*(1.0/2.0);
                double t15804 = t15800+t15803;
                double t15805 = 1.0/pow(t15793,1.0/3.0);
                double t15806 = c*t15805;
                double t15807 = sqrt(t15806);
                double t15808 = pow(t15806,3.0/2.0);
                double t15809 = c*c;
                double t15810 = 1.0/pow(t15793,2.0/3.0);
                double t15811 = 1.0/c0p;
                double t15812 = b1p*t15807;
                double t15813 = b3p*t15808;
                double t15814 = b4p*t15810*t15809;
                double t15815 = b2p*c*t15805;
                double t15816 = t15812+t15813+t15814+t15815;
                double t15817 = 1.0/t15816;
                double t15818 = t15811*t15817*(1.0/2.0);
                double t15819 = t15818+1.0;
                double t15820 = log(t15819);
                double t15821 = a1p*c*t15805;
                double t15822 = t15821+1.0;
                double t15823 = c0p*t15820*t15822*2.0;
                double t15824 = t15795*t15795;
                double t15825 = two_13*2.0;
                double t15826 = t15825-2.0;
                double t15827 = 1.0/t15826;
                double t15828 = 1.0/(t15793*t15793*t15793*t15793);
                double t15829 = t15824*t15824;
                double t15830 = pow(t15798,4.0/3.0);
                double t15831 = pow(t15801,4.0/3.0);
                double t15832 = t15830+t15831-2.0;
                double t15833 = gamma_ab[index]*2.0;
                double t15834 = gamma_aa[index]+gamma_bb[index]+t15833;
                double t15835 = 1.0/(bet*bet);
                double t15836 = 1.0/(k*k);
                double t15837 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t15838 = 1.0/(t15804*t15804*t15804);
                double t15839 = 1.0/c0f;
                double t15840 = b1f*t15807;
                double t15841 = b3f*t15808;
                double t15842 = b4f*t15810*t15809;
                double t15843 = b2f*c*t15805;
                double t15844 = t15840+t15841+t15842+t15843;
                double t15845 = 1.0/t15844;
                double t15846 = t15845*t15839*(1.0/2.0);
                double t15847 = t15846+1.0;
                double t15848 = log(t15847);
                double t15849 = a1f*c*t15805;
                double t15850 = t15849+1.0;
                double t15877 = c0f*t15850*t15848*2.0;
                double t15851 = t15823-t15877;
                double t15852 = 1.0/d2fz0;
                double t15853 = 1.0/Aa;
                double t15854 = b1a*t15807;
                double t15855 = b3a*t15808;
                double t15856 = b4a*t15810*t15809;
                double t15857 = b2a*c*t15805;
                double t15858 = t15854+t15855+t15856+t15857;
                double t15859 = 1.0/t15858;
                double t15860 = t15853*t15859*(1.0/2.0);
                double t15861 = t15860+1.0;
                double t15862 = log(t15861);
                double t15863 = a1a*c*t15805;
                double t15864 = t15863+1.0;
                double t15865 = t15828*t15829;
                double t15866 = t15865-1.0;
                double t15867 = Aa*t15832*t15852*t15862*t15827*t15864*t15866*2.0;
                double t15878 = t15832*t15851*t15827*t15828*t15829;
                double t15868 = t15823+t15867-t15878;
                double t15869 = alph*t15835*t15838*t15868*2.0;
                double t15870 = exp(t15869);
                double t15871 = t15870-1.0;
                double t15872 = 1.0/pow(t15793,1.4E1/3.0);
                double t15873 = 1.0/(t15804*t15804*t15804*t15804);
                double t15874 = t15834*t15834;
                double t15875 = 1.0/k;
                double t15876 = 1.0/(pi_m12*pi_m12);
                double t15879 = 1.0/t15871;
                double t15880 = 1.0/pow(t15793,7.0/3.0);
                double t15881 = 1.0/(t15804*t15804);
                double t15882 = alph*alph;
                double t15883 = 1.0/(t15871*t15871);
                double t15884 = t15835*t15836*t15872*t15837*t15873*t15882*t15874*t15883*(1.0/6.4E1);
                double t15885 = alph*t15834*t15880*t15881*t15875*t15876*t15797*t15879*(1.0/8.0);
                double t15886 = t15884+t15885+1.0;
                double t15887 = 1.0/t15886;
                double t15888 = t15834*t15880*t15881*t15875*t15876*(1.0/1.6E1);
                double t15889 = alph*t15836*t15872*t15837*t15873*t15874*t15797*t15879*(1.0/1.28E2);
                double t15890 = t15888+t15889;
                double t15891 = gamma_aa[index]*2.0;
                double t15892 = gamma_ab[index]*4.0;
                double t15893 = gamma_bb[index]*2.0;
                double t15894 = t15891+t15892+t15893;
                double t15895 = t15804*t15804;
                double t15896 = 1.0/pow(t15793,8.0/3.0);
                double t15897 = exp(t15834*t15836*t15895*t15896*-2.5E1);
                double t15898 = Cx*(1.0E1/7.0);
                double t15899 = Cc1*(1.0/1.0E3);
                double t15900 = Cc3*t15810*t15809*(1.0/1.0E3);
                double t15901 = Cc2*c*t15805*(1.0/1.0E3);
                double t15902 = t15900+t15901+t15899;
                double t15903 = Cc5*t15810*t15809;
                double t15904 = Cc6*c*t15809*t15794;
                double t15905 = Cc4*c*t15805;
                double t15906 = t15903+t15904+t15905+1.0;
                double t15907 = 1.0/t15906;
                double t15908 = Cc0+t15898-t15902*t15907;
                v_gamma_aa_[index] = t15793*(((bet*bet)*t15804*t15895*(alph*t15797*t15887*(t15880*t15881*t15875*t15876* \
                   (1.0/1.6E1)+alph*t15836*t15872*t15837*t15873*t15894*t15797*t15879*(1.0/1.28E2))*2.0-alph*t15890*1.0/ \
                   (t15886*t15886)*t15797*(alph*t15880*t15881*t15875*t15876*t15797*t15879*(1.0/8.0)+t15835*t15836*t15872* \
                   t15837*t15873*t15882*t15883*t15894*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*(alph*t15890*t15797*t15887*2.0+ \
                   1.0))-nu*t15804*t15880*t15908*t15875*t15876*t15897*(1.0/1.6E1)+1.0/(k*k*k)*nu*t15804*t15834*t15908* \
                   1.0/(t15793*t15793*t15793*t15793*t15793)*t15876*t15895*t15897*(2.5E1/1.6E1));
            } else if (rho_a[index] > cutoff_) {
                double t16995 = rho_a[index]+rho_b[index];
                double t16996 = 1.0/bet;
                double t16997 = 1.0/pow(t16995,1.0/3.0);
                double t16998 = c*t16997;
                double t16999 = pow(2.0,1.0/3.0);
                double t17000 = sqrt(t16998);
                double t17001 = pow(t16998,3.0/2.0);
                double t17002 = c*c;
                double t17003 = 1.0/pow(t16995,2.0/3.0);
                double t17004 = 1.0/c0p;
                double t17005 = b1p*t17000;
                double t17006 = b3p*t17001;
                double t17007 = b4p*t17002*t17003;
                double t17008 = b2p*c*t16997;
                double t17009 = t17005+t17006+t17007+t17008;
                double t17010 = 1.0/t17009;
                double t17011 = t17010*t17004*(1.0/2.0);
                double t17012 = t17011+1.0;
                double t17013 = log(t17012);
                double t17014 = a1p*c*t16997;
                double t17015 = t17014+1.0;
                double t17016 = c0p*t17013*t17015*2.0;
                double t17017 = 1.0/(bet*bet);
                double t17018 = 1.0/(k*k);
                double t17019 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t17020 = 1.0/pow(t16995,1.4E1/3.0);
                double t17021 = t16999*2.0;
                double t17022 = t17021-2.0;
                double t17023 = two_13*2.0;
                double t17024 = t17023-2.0;
                double t17025 = 1.0/t17024;
                double t17026 = 1.0/c0f;
                double t17027 = b1f*t17000;
                double t17028 = b3f*t17001;
                double t17029 = b4f*t17002*t17003;
                double t17030 = b2f*c*t16997;
                double t17031 = t17030+t17027+t17028+t17029;
                double t17032 = 1.0/t17031;
                double t17033 = t17032*t17026*(1.0/2.0);
                double t17034 = t17033+1.0;
                double t17035 = log(t17034);
                double t17036 = a1f*c*t16997;
                double t17037 = t17036+1.0;
                double t17048 = c0f*t17035*t17037*2.0;
                double t17038 = t17016-t17048;
                double t17049 = t17022*t17025*t17038;
                double t17039 = t17016-t17049;
                double t17040 = alph*t17017*t17039*4.0;
                double t17041 = exp(t17040);
                double t17042 = t17041-1.0;
                double t17051 = gamma_ab[index]*2.0;
                double t17043 = gamma_aa[index]+gamma_bb[index]+t17051;
                double t17044 = pow(2.0,2.0/3.0);
                double t17045 = 1.0/k;
                double t17046 = 1.0/(pi_m12*pi_m12);
                double t17047 = 1.0/pow(t16995,7.0/3.0);
                double t17050 = 1.0/t17042;
                double t17052 = alph*alph;
                double t17053 = 1.0/(t17042*t17042);
                double t17054 = gamma_aa[index]*2.0;
                double t17055 = gamma_ab[index]*4.0;
                double t17056 = gamma_bb[index]*2.0;
                double t17057 = t17054+t17055+t17056;
                double t17058 = t17043*t17043;
                double t17059 = t16999*t17020*t17052*t17017*t17053*t17018*t17019*t17058*(1.0/3.2E1);
                double t17060 = alph*t16996*t17050*t17043*t17044*t17045*t17046*t17047*(1.0/8.0);
                double t17061 = t17060+t17059+1.0;
                double t17062 = t17043*t17044*t17045*t17046*t17047*(1.0/1.6E1);
                double t17063 = alph*t16996*t16999*t17020*t17050*t17018*t17019*t17058*(1.0/6.4E1);
                double t17064 = t17062+t17063;
                double t17065 = 1.0/t17061;
                double t17066 = 1.0/pow(t16995,8.0/3.0);
                double t17067 = exp(t16999*t17043*t17018*t17066*(-2.5E1/2.0));
                double t17068 = Cx*(1.0E1/7.0);
                double t17069 = Cc1*(1.0/1.0E3);
                double t17070 = Cc3*t17002*t17003*(1.0/1.0E3);
                double t17071 = Cc2*c*t16997*(1.0/1.0E3);
                double t17072 = t17070+t17071+t17069;
                double t17073 = Cc5*t17002*t17003;
                double t17074 = 1.0/t16995;
                double t17075 = Cc6*c*t17002*t17074;
                double t17076 = Cc4*c*t16997;
                double t17077 = t17073+t17075+t17076+1.0;
                double t17078 = 1.0/t17077;
                double t17079 = Cc0+t17068-t17072*t17078;
                v_gamma_aa_[index] = t16995*(((bet*bet)*(alph*t16996*t17065*(t17044*t17045*t17046*t17047*(1.0/1.6E1) \
                   +alph*t16996*t16999*t17020*t17050*t17018*t17019*t17057*(1.0/6.4E1))*2.0-alph*t16996*1.0/(t17061*t17061) \
                   *t17064*(alph*t16996*t17050*t17044*t17045*t17046*t17047*(1.0/8.0)+t16999*t17020*t17052*t17017*t17053* \
                   t17018*t17019*t17057*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t16996*t17064*t17065*2.0+1.0))+1.0/(k* \
                   k*k)*nu*1.0/(t16995*t16995*t16995*t16995*t16995)*t17043*t17046*t17067*t17079*(2.5E1/3.2E1)-nu*t17044* \
                   t17045*t17046*t17047*t17067*t17079*(1.0/3.2E1));
            } else if (rho_b[index] > cutoff_) {
                double t16443 = rho_a[index]+rho_b[index];
                double t16444 = 1.0/bet;
                double t16445 = 1.0/pow(t16443,1.0/3.0);
                double t16446 = c*t16445;
                double t16447 = pow(2.0,1.0/3.0);
                double t16448 = sqrt(t16446);
                double t16449 = pow(t16446,3.0/2.0);
                double t16450 = c*c;
                double t16451 = 1.0/pow(t16443,2.0/3.0);
                double t16452 = 1.0/c0p;
                double t16453 = b1p*t16448;
                double t16454 = b3p*t16449;
                double t16455 = b4p*t16450*t16451;
                double t16456 = b2p*c*t16445;
                double t16457 = t16453+t16454+t16455+t16456;
                double t16458 = 1.0/t16457;
                double t16459 = t16452*t16458*(1.0/2.0);
                double t16460 = t16459+1.0;
                double t16461 = log(t16460);
                double t16462 = a1p*c*t16445;
                double t16463 = t16462+1.0;
                double t16464 = c0p*t16461*t16463*2.0;
                double t16465 = 1.0/(bet*bet);
                double t16466 = 1.0/(k*k);
                double t16467 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t16468 = 1.0/pow(t16443,1.4E1/3.0);
                double t16469 = t16447*2.0;
                double t16470 = t16469-2.0;
                double t16471 = two_13*2.0;
                double t16472 = t16471-2.0;
                double t16473 = 1.0/t16472;
                double t16474 = 1.0/c0f;
                double t16475 = b1f*t16448;
                double t16476 = b3f*t16449;
                double t16477 = b4f*t16450*t16451;
                double t16478 = b2f*c*t16445;
                double t16479 = t16475+t16476+t16477+t16478;
                double t16480 = 1.0/t16479;
                double t16481 = t16480*t16474*(1.0/2.0);
                double t16482 = t16481+1.0;
                double t16483 = log(t16482);
                double t16484 = a1f*c*t16445;
                double t16485 = t16484+1.0;
                double t16496 = c0f*t16483*t16485*2.0;
                double t16486 = t16464-t16496;
                double t16497 = t16470*t16473*t16486;
                double t16487 = t16464-t16497;
                double t16488 = alph*t16465*t16487*4.0;
                double t16489 = exp(t16488);
                double t16490 = t16489-1.0;
                double t16499 = gamma_ab[index]*2.0;
                double t16491 = gamma_aa[index]+gamma_bb[index]+t16499;
                double t16492 = pow(2.0,2.0/3.0);
                double t16493 = 1.0/k;
                double t16494 = 1.0/(pi_m12*pi_m12);
                double t16495 = 1.0/pow(t16443,7.0/3.0);
                double t16498 = 1.0/t16490;
                double t16500 = alph*alph;
                double t16501 = 1.0/(t16490*t16490);
                double t16502 = gamma_aa[index]*2.0;
                double t16503 = gamma_ab[index]*4.0;
                double t16504 = gamma_bb[index]*2.0;
                double t16505 = t16502+t16503+t16504;
                double t16506 = t16491*t16491;
                double t16507 = t16500*t16501*t16506*t16447*t16465*t16466*t16467*t16468*(1.0/3.2E1);
                double t16508 = alph*t16444*t16491*t16492*t16493*t16494*t16495*t16498*(1.0/8.0);
                double t16509 = t16507+t16508+1.0;
                double t16510 = t16491*t16492*t16493*t16494*t16495*(1.0/1.6E1);
                double t16511 = alph*t16506*t16444*t16447*t16466*t16467*t16468*t16498*(1.0/6.4E1);
                double t16512 = t16510+t16511;
                double t16513 = 1.0/t16509;
                double t16514 = 1.0/pow(t16443,8.0/3.0);
                double t16515 = exp(t16514*t16491*t16447*t16466*(-2.5E1/2.0));
                double t16516 = Cx*(1.0E1/7.0);
                double t16517 = Cc1*(1.0/1.0E3);
                double t16518 = Cc3*t16450*t16451*(1.0/1.0E3);
                double t16519 = Cc2*c*t16445*(1.0/1.0E3);
                double t16520 = t16517+t16518+t16519;
                double t16521 = Cc5*t16450*t16451;
                double t16522 = 1.0/t16443;
                double t16523 = Cc6*c*t16450*t16522;
                double t16524 = Cc4*c*t16445;
                double t16525 = t16521+t16523+t16524+1.0;
                double t16526 = 1.0/t16525;
                double t16527 = Cc0+t16516-t16520*t16526;
                v_gamma_aa_[index] = t16443*(((bet*bet)*(alph*t16513*t16444*(t16492*t16493*t16494*t16495*(1.0/1.6E1) \
                   +alph*t16505*t16444*t16447*t16466*t16467*t16468*t16498*(1.0/6.4E1))*2.0-alph*t16512*t16444*1.0/(t16509* \
                   t16509)*(alph*t16444*t16492*t16493*t16494*t16495*t16498*(1.0/8.0)+t16500*t16501*t16505*t16447*t16465* \
                   t16466*t16467*t16468*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t16512*t16513*t16444*2.0+1.0))+1.0/(k* \
                   k*k)*nu*1.0/(t16443*t16443*t16443*t16443*t16443)*t16515*t16491*t16527*t16494*(2.5E1/3.2E1)-nu*t16515* \
                   t16527*t16492*t16493*t16494*t16495*(1.0/3.2E1));
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t15910 = rho_a[index]+rho_b[index];
                double t15911 = 1.0/t15910;
                double t15912 = rho_a[index]-rho_b[index];
                double t15913 = t15911*t15912;
                double t15914 = 1.0/bet;
                double t15915 = t15913+1.0;
                double t15916 = pow(t15915,2.0/3.0);
                double t15917 = t15916*(1.0/2.0);
                double t15918 = -t15913+1.0;
                double t15919 = pow(t15918,2.0/3.0);
                double t15920 = t15919*(1.0/2.0);
                double t15921 = t15920+t15917;
                double t15922 = 1.0/pow(t15910,1.0/3.0);
                double t15923 = c*t15922;
                double t15924 = sqrt(t15923);
                double t15925 = pow(t15923,3.0/2.0);
                double t15926 = c*c;
                double t15927 = 1.0/pow(t15910,2.0/3.0);
                double t15928 = 1.0/c0p;
                double t15929 = b1p*t15924;
                double t15930 = b3p*t15925;
                double t15931 = b4p*t15926*t15927;
                double t15932 = b2p*c*t15922;
                double t15933 = t15930+t15931+t15932+t15929;
                double t15934 = 1.0/t15933;
                double t15935 = t15934*t15928*(1.0/2.0);
                double t15936 = t15935+1.0;
                double t15937 = log(t15936);
                double t15938 = a1p*c*t15922;
                double t15939 = t15938+1.0;
                double t15940 = c0p*t15937*t15939*2.0;
                double t15941 = t15912*t15912;
                double t15942 = two_13*2.0;
                double t15943 = t15942-2.0;
                double t15944 = 1.0/t15943;
                double t15945 = 1.0/(t15910*t15910*t15910*t15910);
                double t15946 = t15941*t15941;
                double t15947 = pow(t15915,4.0/3.0);
                double t15948 = pow(t15918,4.0/3.0);
                double t15949 = t15947+t15948-2.0;
                double t15950 = gamma_ab[index]*2.0;
                double t15951 = gamma_aa[index]+gamma_bb[index]+t15950;
                double t15952 = 1.0/(bet*bet);
                double t15953 = 1.0/(k*k);
                double t15954 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t15955 = 1.0/(t15921*t15921*t15921);
                double t15956 = 1.0/c0f;
                double t15957 = b1f*t15924;
                double t15958 = b3f*t15925;
                double t15959 = b4f*t15926*t15927;
                double t15960 = b2f*c*t15922;
                double t15961 = t15960+t15957+t15958+t15959;
                double t15962 = 1.0/t15961;
                double t15963 = t15962*t15956*(1.0/2.0);
                double t15964 = t15963+1.0;
                double t15965 = log(t15964);
                double t15966 = a1f*c*t15922;
                double t15967 = t15966+1.0;
                double t15994 = c0f*t15965*t15967*2.0;
                double t15968 = t15940-t15994;
                double t15969 = 1.0/d2fz0;
                double t15970 = 1.0/Aa;
                double t15971 = b1a*t15924;
                double t15972 = b3a*t15925;
                double t15973 = b4a*t15926*t15927;
                double t15974 = b2a*c*t15922;
                double t15975 = t15971+t15972+t15973+t15974;
                double t15976 = 1.0/t15975;
                double t15977 = t15970*t15976*(1.0/2.0);
                double t15978 = t15977+1.0;
                double t15979 = log(t15978);
                double t15980 = a1a*c*t15922;
                double t15981 = t15980+1.0;
                double t15982 = t15945*t15946;
                double t15983 = t15982-1.0;
                double t15984 = Aa*t15944*t15981*t15983*t15949*t15969*t15979*2.0;
                double t15995 = t15944*t15945*t15946*t15949*t15968;
                double t15985 = t15940+t15984-t15995;
                double t15986 = alph*t15952*t15955*t15985*2.0;
                double t15987 = exp(t15986);
                double t15988 = t15987-1.0;
                double t15989 = 1.0/pow(t15910,1.4E1/3.0);
                double t15990 = 1.0/(t15921*t15921*t15921*t15921);
                double t15991 = t15951*t15951;
                double t15992 = 1.0/k;
                double t15993 = 1.0/(pi_m12*pi_m12);
                double t15996 = 1.0/t15988;
                double t15997 = 1.0/pow(t15910,7.0/3.0);
                double t15998 = 1.0/(t15921*t15921);
                double t15999 = alph*alph;
                double t16000 = 1.0/(t15988*t15988);
                double t16001 = t15952*t15953*t15954*t15990*t15991*t15989*t15999*t16000*(1.0/6.4E1);
                double t16002 = alph*t15914*t15951*t15992*t15993*t15996*t15997*t15998*(1.0/8.0);
                double t16003 = t16001+t16002+1.0;
                double t16004 = 1.0/t16003;
                double t16005 = t15951*t15992*t15993*t15997*t15998*(1.0/1.6E1);
                double t16006 = alph*t15914*t15953*t15954*t15990*t15991*t15996*t15989*(1.0/1.28E2);
                double t16007 = t16005+t16006;
                double t16008 = gamma_aa[index]*4.0;
                double t16009 = gamma_ab[index]*8.0;
                double t16010 = gamma_bb[index]*4.0;
                double t16011 = t16010+t16008+t16009;
                double t16012 = t15921*t15921;
                double t16013 = 1.0/pow(t15910,8.0/3.0);
                double t16014 = exp(t15951*t15953*t16012*t16013*-2.5E1);
                double t16015 = Cx*(1.0E1/7.0);
                double t16016 = Cc1*(1.0/1.0E3);
                double t16017 = Cc3*t15926*t15927*(1.0/1.0E3);
                double t16018 = Cc2*c*t15922*(1.0/1.0E3);
                double t16019 = t16016+t16017+t16018;
                double t16020 = Cc5*t15926*t15927;
                double t16021 = Cc6*c*t15911*t15926;
                double t16022 = Cc4*c*t15922;
                double t16023 = t16020+t16021+t16022+1.0;
                double t16024 = 1.0/t16023;
                double t16025 = Cc0+t16015-t16024*t16019;
                v_gamma_ab_[index] = t15910*(((bet*bet)*t15921*t16012*(alph*t15914*t16004*(t15992*t15993*t15997*t15998* \
                   (1.0/8.0)+alph*t15914*t15953*t15954*t15990*t15996*t15989*t16011*(1.0/1.28E2))*2.0-alph*t15914*1.0/ \
                   (t16003*t16003)*t16007*(alph*t15914*t15992*t15993*t15996*t15997*t15998*(1.0/4.0)+t15952*t15953*t15954* \
                   t15990*t15989*t15999*t16000*t16011*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*(alph*t15914*t16004*t16007*2.0+ \
                   1.0))-nu*t15921*t15992*t15993*t15997*t16014*t16025*(1.0/8.0)+1.0/(k*k*k)*nu*1.0/(t15910*t15910*t15910* \
                   t15910*t15910)*t15921*t15951*t15993*t16012*t16014*t16025*(2.5E1/8.0));
            } else if (rho_a[index] > cutoff_) {
                double t17081 = rho_a[index]+rho_b[index];
                double t17082 = 1.0/bet;
                double t17083 = 1.0/pow(t17081,1.0/3.0);
                double t17084 = c*t17083;
                double t17085 = pow(2.0,1.0/3.0);
                double t17086 = sqrt(t17084);
                double t17087 = pow(t17084,3.0/2.0);
                double t17088 = c*c;
                double t17089 = 1.0/pow(t17081,2.0/3.0);
                double t17090 = 1.0/c0p;
                double t17091 = b1p*t17086;
                double t17092 = b3p*t17087;
                double t17093 = b4p*t17088*t17089;
                double t17094 = b2p*c*t17083;
                double t17095 = t17091+t17092+t17093+t17094;
                double t17096 = 1.0/t17095;
                double t17097 = t17090*t17096*(1.0/2.0);
                double t17098 = t17097+1.0;
                double t17099 = log(t17098);
                double t17100 = a1p*c*t17083;
                double t17101 = t17100+1.0;
                double t17102 = c0p*t17101*t17099*2.0;
                double t17103 = 1.0/(bet*bet);
                double t17104 = 1.0/(k*k);
                double t17105 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t17106 = 1.0/pow(t17081,1.4E1/3.0);
                double t17107 = t17085*2.0;
                double t17108 = t17107-2.0;
                double t17109 = two_13*2.0;
                double t17110 = t17109-2.0;
                double t17111 = 1.0/t17110;
                double t17112 = 1.0/c0f;
                double t17113 = b1f*t17086;
                double t17114 = b3f*t17087;
                double t17115 = b4f*t17088*t17089;
                double t17116 = b2f*c*t17083;
                double t17117 = t17113+t17114+t17115+t17116;
                double t17118 = 1.0/t17117;
                double t17119 = t17112*t17118*(1.0/2.0);
                double t17120 = t17119+1.0;
                double t17121 = log(t17120);
                double t17122 = a1f*c*t17083;
                double t17123 = t17122+1.0;
                double t17134 = c0f*t17121*t17123*2.0;
                double t17124 = t17102-t17134;
                double t17135 = t17111*t17124*t17108;
                double t17125 = t17102-t17135;
                double t17126 = alph*t17103*t17125*4.0;
                double t17127 = exp(t17126);
                double t17128 = t17127-1.0;
                double t17137 = gamma_ab[index]*2.0;
                double t17129 = gamma_aa[index]+gamma_bb[index]+t17137;
                double t17130 = pow(2.0,2.0/3.0);
                double t17131 = 1.0/k;
                double t17132 = 1.0/(pi_m12*pi_m12);
                double t17133 = 1.0/pow(t17081,7.0/3.0);
                double t17136 = 1.0/t17128;
                double t17138 = alph*alph;
                double t17139 = 1.0/(t17128*t17128);
                double t17140 = gamma_aa[index]*4.0;
                double t17141 = gamma_ab[index]*8.0;
                double t17142 = gamma_bb[index]*4.0;
                double t17143 = t17140+t17141+t17142;
                double t17144 = t17129*t17129;
                double t17145 = t17103*t17104*t17105*t17106*t17144*t17138*t17085*t17139*(1.0/3.2E1);
                double t17146 = alph*t17130*t17131*t17132*t17133*t17082*t17136*t17129*(1.0/8.0);
                double t17147 = t17145+t17146+1.0;
                double t17148 = t17130*t17131*t17132*t17133*t17129*(1.0/1.6E1);
                double t17149 = alph*t17104*t17105*t17106*t17144*t17082*t17136*t17085*(1.0/6.4E1);
                double t17150 = t17148+t17149;
                double t17151 = 1.0/t17147;
                double t17152 = 1.0/pow(t17081,8.0/3.0);
                double t17153 = exp(t17104*t17152*t17129*t17085*(-2.5E1/2.0));
                double t17154 = Cx*(1.0E1/7.0);
                double t17155 = Cc1*(1.0/1.0E3);
                double t17156 = Cc3*t17088*t17089*(1.0/1.0E3);
                double t17157 = Cc2*c*t17083*(1.0/1.0E3);
                double t17158 = t17155+t17156+t17157;
                double t17159 = Cc5*t17088*t17089;
                double t17160 = 1.0/t17081;
                double t17161 = Cc6*c*t17160*t17088;
                double t17162 = Cc4*c*t17083;
                double t17163 = t17161+t17162+t17159+1.0;
                double t17164 = 1.0/t17163;
                double t17165 = Cc0+t17154-t17164*t17158;
                v_gamma_ab_[index] = t17081*(((bet*bet)*(alph*t17151*t17082*(t17130*t17131*t17132*t17133*(1.0/8.0) \
                   +alph*t17104*t17105*t17106*t17143*t17082*t17136*t17085*(1.0/6.4E1))*2.0-alph*t17150*t17082*1.0/(t17147* \
                   t17147)*(alph*t17130*t17131*t17132*t17133*t17082*t17136*(1.0/4.0)+t17103*t17104*t17105*t17106*t17143* \
                   t17138*t17085*t17139*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t17150*t17151*t17082*2.0+1.0))+1.0/(k* \
                   k*k)*nu*t17132*1.0/(t17081*t17081*t17081*t17081*t17081)*t17153*t17129*t17165*(2.5E1/1.6E1)-nu*t17130* \
                   t17131*t17132*t17133*t17153*t17165*(1.0/1.6E1));
            } else if (rho_b[index] > cutoff_) {
                double t16529 = rho_a[index]+rho_b[index];
                double t16530 = 1.0/bet;
                double t16531 = 1.0/pow(t16529,1.0/3.0);
                double t16532 = c*t16531;
                double t16533 = pow(2.0,1.0/3.0);
                double t16534 = sqrt(t16532);
                double t16535 = pow(t16532,3.0/2.0);
                double t16536 = c*c;
                double t16537 = 1.0/pow(t16529,2.0/3.0);
                double t16538 = 1.0/c0p;
                double t16539 = b1p*t16534;
                double t16540 = b3p*t16535;
                double t16541 = b4p*t16536*t16537;
                double t16542 = b2p*c*t16531;
                double t16543 = t16540+t16541+t16542+t16539;
                double t16544 = 1.0/t16543;
                double t16545 = t16544*t16538*(1.0/2.0);
                double t16546 = t16545+1.0;
                double t16547 = log(t16546);
                double t16548 = a1p*c*t16531;
                double t16549 = t16548+1.0;
                double t16550 = c0p*t16547*t16549*2.0;
                double t16551 = 1.0/(bet*bet);
                double t16552 = 1.0/(k*k);
                double t16553 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t16554 = 1.0/pow(t16529,1.4E1/3.0);
                double t16555 = t16533*2.0;
                double t16556 = t16555-2.0;
                double t16557 = two_13*2.0;
                double t16558 = t16557-2.0;
                double t16559 = 1.0/t16558;
                double t16560 = 1.0/c0f;
                double t16561 = b1f*t16534;
                double t16562 = b3f*t16535;
                double t16563 = b4f*t16536*t16537;
                double t16564 = b2f*c*t16531;
                double t16565 = t16561+t16562+t16563+t16564;
                double t16566 = 1.0/t16565;
                double t16567 = t16560*t16566*(1.0/2.0);
                double t16568 = t16567+1.0;
                double t16569 = log(t16568);
                double t16570 = a1f*c*t16531;
                double t16571 = t16570+1.0;
                double t16582 = c0f*t16571*t16569*2.0;
                double t16572 = t16550-t16582;
                double t16583 = t16572*t16556*t16559;
                double t16573 = t16550-t16583;
                double t16574 = alph*t16551*t16573*4.0;
                double t16575 = exp(t16574);
                double t16576 = t16575-1.0;
                double t16585 = gamma_ab[index]*2.0;
                double t16577 = gamma_aa[index]+gamma_bb[index]+t16585;
                double t16578 = pow(2.0,2.0/3.0);
                double t16579 = 1.0/k;
                double t16580 = 1.0/(pi_m12*pi_m12);
                double t16581 = 1.0/pow(t16529,7.0/3.0);
                double t16584 = 1.0/t16576;
                double t16586 = alph*alph;
                double t16587 = 1.0/(t16576*t16576);
                double t16588 = gamma_aa[index]*4.0;
                double t16589 = gamma_ab[index]*8.0;
                double t16590 = gamma_bb[index]*4.0;
                double t16591 = t16590+t16588+t16589;
                double t16592 = t16577*t16577;
                double t16593 = t16533*t16551*t16552*t16553*t16554*t16592*t16586*t16587*(1.0/3.2E1);
                double t16594 = alph*t16530*t16580*t16581*t16584*t16577*t16578*t16579*(1.0/8.0);
                double t16595 = t16593+t16594+1.0;
                double t16596 = t16580*t16581*t16577*t16578*t16579*(1.0/1.6E1);
                double t16597 = alph*t16530*t16533*t16552*t16553*t16554*t16592*t16584*(1.0/6.4E1);
                double t16598 = t16596+t16597;
                double t16599 = 1.0/t16595;
                double t16600 = 1.0/pow(t16529,8.0/3.0);
                double t16601 = exp(t16600*t16533*t16552*t16577*(-2.5E1/2.0));
                double t16602 = Cx*(1.0E1/7.0);
                double t16603 = Cc1*(1.0/1.0E3);
                double t16604 = Cc3*t16536*t16537*(1.0/1.0E3);
                double t16605 = Cc2*c*t16531*(1.0/1.0E3);
                double t16606 = t16603+t16604+t16605;
                double t16607 = Cc5*t16536*t16537;
                double t16608 = 1.0/t16529;
                double t16609 = Cc6*c*t16536*t16608;
                double t16610 = Cc4*c*t16531;
                double t16611 = t16610+t16607+t16609+1.0;
                double t16612 = 1.0/t16611;
                double t16613 = Cc0+t16602-t16612*t16606;
                v_gamma_ab_[index] = t16529*(((bet*bet)*(alph*t16530*t16599*(t16580*t16581*t16578*t16579*(1.0/8.0) \
                   +alph*t16530*t16533*t16552*t16553*t16554*t16591*t16584*(1.0/6.4E1))*2.0-alph*t16530*1.0/(t16595*t16595) \
                   *t16598*(alph*t16530*t16580*t16581*t16584*t16578*t16579*(1.0/4.0)+t16533*t16551*t16552*t16553*t16554* \
                   t16591*t16586*t16587*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t16530*t16598*t16599*2.0+1.0))+1.0/(k* \
                   k*k)*nu*t16601*t16613*t16580*1.0/(t16529*t16529*t16529*t16529*t16529)*t16577*(2.5E1/1.6E1)-nu*t16601* \
                   t16613*t16580*t16581*t16578*t16579*(1.0/1.6E1));
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t16027 = rho_a[index]+rho_b[index];
                double t16028 = 1.0/t16027;
                double t16029 = rho_a[index]-rho_b[index];
                double t16030 = t16028*t16029;
                double t16031 = 1.0/bet;
                double t16032 = t16030+1.0;
                double t16033 = pow(t16032,2.0/3.0);
                double t16034 = t16033*(1.0/2.0);
                double t16035 = -t16030+1.0;
                double t16036 = pow(t16035,2.0/3.0);
                double t16037 = t16036*(1.0/2.0);
                double t16038 = t16034+t16037;
                double t16039 = 1.0/pow(t16027,1.0/3.0);
                double t16040 = c*t16039;
                double t16041 = sqrt(t16040);
                double t16042 = pow(t16040,3.0/2.0);
                double t16043 = c*c;
                double t16044 = 1.0/pow(t16027,2.0/3.0);
                double t16045 = 1.0/c0p;
                double t16046 = b1p*t16041;
                double t16047 = b3p*t16042;
                double t16048 = b4p*t16043*t16044;
                double t16049 = b2p*c*t16039;
                double t16050 = t16046+t16047+t16048+t16049;
                double t16051 = 1.0/t16050;
                double t16052 = t16051*t16045*(1.0/2.0);
                double t16053 = t16052+1.0;
                double t16054 = log(t16053);
                double t16055 = a1p*c*t16039;
                double t16056 = t16055+1.0;
                double t16057 = c0p*t16054*t16056*2.0;
                double t16058 = t16029*t16029;
                double t16059 = two_13*2.0;
                double t16060 = t16059-2.0;
                double t16061 = 1.0/t16060;
                double t16062 = 1.0/(t16027*t16027*t16027*t16027);
                double t16063 = t16058*t16058;
                double t16064 = pow(t16032,4.0/3.0);
                double t16065 = pow(t16035,4.0/3.0);
                double t16066 = t16064+t16065-2.0;
                double t16067 = gamma_ab[index]*2.0;
                double t16068 = gamma_aa[index]+gamma_bb[index]+t16067;
                double t16069 = 1.0/(bet*bet);
                double t16070 = 1.0/(k*k);
                double t16071 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t16072 = 1.0/(t16038*t16038*t16038);
                double t16073 = 1.0/c0f;
                double t16074 = b1f*t16041;
                double t16075 = b3f*t16042;
                double t16076 = b4f*t16043*t16044;
                double t16077 = b2f*c*t16039;
                double t16078 = t16074+t16075+t16076+t16077;
                double t16079 = 1.0/t16078;
                double t16080 = t16073*t16079*(1.0/2.0);
                double t16081 = t16080+1.0;
                double t16082 = log(t16081);
                double t16083 = a1f*c*t16039;
                double t16084 = t16083+1.0;
                double t16111 = c0f*t16082*t16084*2.0;
                double t16085 = -t16111+t16057;
                double t16086 = 1.0/d2fz0;
                double t16087 = 1.0/Aa;
                double t16088 = b1a*t16041;
                double t16089 = b3a*t16042;
                double t16090 = b4a*t16043*t16044;
                double t16091 = b2a*c*t16039;
                double t16092 = t16090+t16091+t16088+t16089;
                double t16093 = 1.0/t16092;
                double t16094 = t16093*t16087*(1.0/2.0);
                double t16095 = t16094+1.0;
                double t16096 = log(t16095);
                double t16097 = a1a*c*t16039;
                double t16098 = t16097+1.0;
                double t16099 = t16062*t16063;
                double t16100 = t16099-1.0;
                double t16101 = Aa*t16100*t16061*t16066*t16086*t16096*t16098*2.0;
                double t16102 = t16101+t16057-t16061*t16062*t16063*t16066*t16085;
                double t16103 = alph*t16102*t16072*t16069*2.0;
                double t16104 = exp(t16103);
                double t16105 = t16104-1.0;
                double t16106 = 1.0/pow(t16027,1.4E1/3.0);
                double t16107 = 1.0/(t16038*t16038*t16038*t16038);
                double t16108 = t16068*t16068;
                double t16109 = 1.0/k;
                double t16110 = 1.0/(pi_m12*pi_m12);
                double t16112 = 1.0/pow(t16027,7.0/3.0);
                double t16113 = 1.0/(t16038*t16038);
                double t16114 = t16111-t16057;
                double t16115 = t16114*t16061*t16062*t16063*t16066;
                double t16116 = t16101+t16115+t16057;
                double t16117 = alph*t16116*t16072*t16069*2.0;
                double t16118 = exp(t16117);
                double t16119 = t16118-1.0;
                double t16120 = 1.0/t16119;
                double t16121 = alph*alph;
                double t16122 = alph*t16110*t16120*t16031*t16112*t16113*t16109*t16068*(1.0/8.0);
                double t16123 = t16110*t16112*t16113*t16109*t16068*(1.0/1.6E1);
                double t16124 = 1.0/(t16119*t16119);
                double t16125 = gamma_aa[index]*2.0;
                double t16126 = gamma_ab[index]*4.0;
                double t16127 = gamma_bb[index]*2.0;
                double t16128 = t16125+t16126+t16127;
                double t16129 = t16121*t16070*t16106*t16124*t16071*t16107*t16108*t16069*(1.0/6.4E1);
                double t16130 = t16122+t16129+1.0;
                double t16131 = t16038*t16038;
                double t16132 = 1.0/pow(t16027,8.0/3.0);
                double t16133 = exp(t16131*t16132*t16070*t16068*-2.5E1);
                double t16134 = Cx*(1.0E1/7.0);
                double t16135 = Cc1*(1.0/1.0E3);
                double t16136 = Cc3*t16043*t16044*(1.0/1.0E3);
                double t16137 = Cc2*c*t16039*(1.0/1.0E3);
                double t16138 = t16135+t16136+t16137;
                double t16139 = Cc5*t16043*t16044;
                double t16140 = Cc6*c*t16043*t16028;
                double t16141 = Cc4*c*t16039;
                double t16142 = t16140+t16141+t16139+1.0;
                double t16143 = 1.0/t16142;
                double t16144 = Cc0+t16134-t16143*t16138;
                v_gamma_bb_[index] = t16027*(((bet*bet)*t16131*t16038*((alph*t16031*(t16110*t16112*t16113*t16109* \
                   (1.0/1.6E1)+alph*t16120*t16031*t16070*t16106*t16071*t16107*t16128*(1.0/1.28E2))*2.0)/t16130-alph*t16031* \
                   1.0/(t16130*t16130)*(t16123+alph*t16120*t16031*t16070*t16106*t16071*t16107*t16108*(1.0/1.28E2))*(alph* \
                   t16110*t16120*t16031*t16112*t16113*t16109*(1.0/8.0)+t16121*t16070*t16106*t16124*t16071*t16107*t16128* \
                   t16069*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*((alph*t16031*(t16123+(alph*t16031*t16070*t16106*t16071* \
                   t16107*t16108*(1.0/1.28E2))/t16105)*2.0)/(t16122+t16121*1.0/(t16105*t16105)*t16070*t16106*t16071*t16107* \
                   t16108*t16069*(1.0/6.4E1)+1.0)+1.0))-nu*t16110*t16112*t16133*t16144*t16109*t16038*(1.0/1.6E1)+1.0/ \
                   (k*k*k)*nu*t16110*t16131*t16133*1.0/(t16027*t16027*t16027*t16027*t16027)*t16144*t16038*t16068*(2.5E1/ \
                   1.6E1));
            } else if (rho_a[index] > cutoff_) {
                double t17167 = rho_a[index]+rho_b[index];
                double t17168 = 1.0/bet;
                double t17169 = 1.0/pow(t17167,1.0/3.0);
                double t17170 = c*t17169;
                double t17171 = pow(2.0,1.0/3.0);
                double t17172 = sqrt(t17170);
                double t17173 = pow(t17170,3.0/2.0);
                double t17174 = c*c;
                double t17175 = 1.0/pow(t17167,2.0/3.0);
                double t17176 = 1.0/c0p;
                double t17177 = b1p*t17172;
                double t17178 = b3p*t17173;
                double t17179 = b4p*t17174*t17175;
                double t17180 = b2p*c*t17169;
                double t17181 = t17180+t17177+t17178+t17179;
                double t17182 = 1.0/t17181;
                double t17183 = t17182*t17176*(1.0/2.0);
                double t17184 = t17183+1.0;
                double t17185 = log(t17184);
                double t17186 = a1p*c*t17169;
                double t17187 = t17186+1.0;
                double t17188 = c0p*t17185*t17187*2.0;
                double t17189 = 1.0/(bet*bet);
                double t17190 = 1.0/(k*k);
                double t17191 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t17192 = 1.0/pow(t17167,1.4E1/3.0);
                double t17193 = t17171*2.0;
                double t17194 = t17193-2.0;
                double t17195 = two_13*2.0;
                double t17196 = t17195-2.0;
                double t17197 = 1.0/t17196;
                double t17198 = 1.0/c0f;
                double t17199 = b1f*t17172;
                double t17200 = b3f*t17173;
                double t17201 = b4f*t17174*t17175;
                double t17202 = b2f*c*t17169;
                double t17203 = t17200+t17201+t17202+t17199;
                double t17204 = 1.0/t17203;
                double t17205 = t17204*t17198*(1.0/2.0);
                double t17206 = t17205+1.0;
                double t17207 = log(t17206);
                double t17208 = a1f*c*t17169;
                double t17209 = t17208+1.0;
                double t17220 = c0f*t17207*t17209*2.0;
                double t17210 = -t17220+t17188;
                double t17211 = t17188-t17210*t17194*t17197;
                double t17212 = alph*t17211*t17189*4.0;
                double t17213 = exp(t17212);
                double t17214 = t17213-1.0;
                double t17221 = gamma_ab[index]*2.0;
                double t17215 = gamma_aa[index]+gamma_bb[index]+t17221;
                double t17216 = pow(2.0,2.0/3.0);
                double t17217 = 1.0/k;
                double t17218 = 1.0/(pi_m12*pi_m12);
                double t17219 = 1.0/pow(t17167,7.0/3.0);
                double t17222 = t17220-t17188;
                double t17223 = t17222*t17194*t17197;
                double t17224 = t17223+t17188;
                double t17225 = alph*t17224*t17189*4.0;
                double t17226 = exp(t17225);
                double t17227 = t17226-1.0;
                double t17228 = 1.0/t17227;
                double t17229 = alph*alph;
                double t17230 = gamma_aa[index]*2.0;
                double t17231 = gamma_ab[index]*4.0;
                double t17232 = gamma_bb[index]*2.0;
                double t17233 = t17230+t17231+t17232;
                double t17234 = t17215*t17215;
                double t17235 = 1.0/(t17227*t17227);
                double t17236 = alph*t17215*t17216*t17217*t17218*t17219*t17228*t17168*(1.0/8.0);
                double t17237 = t17215*t17216*t17217*t17218*t17219*(1.0/1.6E1);
                double t17238 = alph*t17171*t17234*t17190*t17191*t17192*t17228*t17168*(1.0/6.4E1);
                double t17239 = t17237+t17238;
                double t17240 = t17171*t17234*t17190*t17235*t17191*t17192*t17229*t17189*(1.0/3.2E1);
                double t17241 = t17240+t17236+1.0;
                double t17242 = 1.0/pow(t17167,8.0/3.0);
                double t17243 = exp(t17215*t17242*t17171*t17190*(-2.5E1/2.0));
                double t17244 = Cx*(1.0E1/7.0);
                double t17245 = Cc1*(1.0/1.0E3);
                double t17246 = Cc3*t17174*t17175*(1.0/1.0E3);
                double t17247 = Cc2*c*t17169*(1.0/1.0E3);
                double t17248 = t17245+t17246+t17247;
                double t17249 = Cc5*t17174*t17175;
                double t17250 = 1.0/t17167;
                double t17251 = Cc6*c*t17250*t17174;
                double t17252 = Cc4*c*t17169;
                double t17253 = t17251+t17252+t17249+1.0;
                double t17254 = 1.0/t17253;
                double t17255 = Cc0+t17244-t17254*t17248;
                v_gamma_bb_[index] = t17167*(((bet*bet)*((alph*t17168*(t17216*t17217*t17218*t17219*(1.0/1.6E1)+(alph* \
                   t17233*t17171*t17190*t17191*t17192*t17168*(1.0/6.4E1))/t17214)*2.0)/(t17236+1.0/(t17214*t17214)*t17171* \
                   t17234*t17190*t17191*t17192*t17229*t17189*(1.0/3.2E1)+1.0)-alph*1.0/(t17241*t17241)*t17239*t17168* \
                   (alph*t17216*t17217*t17218*t17219*t17228*t17168*(1.0/8.0)+t17233*t17171*t17190*t17235*t17191*t17192* \
                   t17229*t17189*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*((alph*t17239*t17168*2.0)/t17241+1.0))+1.0/(k*k*k) \
                   *nu*t17215*t17243*t17218*t17255*1.0/(t17167*t17167*t17167*t17167*t17167)*(2.5E1/3.2E1)-nu*t17216*t17243* \
                   t17217*t17218*t17219*t17255*(1.0/3.2E1));
            } else if (rho_b[index] > cutoff_) {
                double t16615 = rho_a[index]+rho_b[index];
                double t16616 = 1.0/bet;
                double t16617 = 1.0/pow(t16615,1.0/3.0);
                double t16618 = c*t16617;
                double t16619 = pow(2.0,1.0/3.0);
                double t16620 = sqrt(t16618);
                double t16621 = pow(t16618,3.0/2.0);
                double t16622 = c*c;
                double t16623 = 1.0/pow(t16615,2.0/3.0);
                double t16624 = 1.0/c0p;
                double t16625 = b1p*t16620;
                double t16626 = b3p*t16621;
                double t16627 = b4p*t16622*t16623;
                double t16628 = b2p*c*t16617;
                double t16629 = t16625+t16626+t16627+t16628;
                double t16630 = 1.0/t16629;
                double t16631 = t16630*t16624*(1.0/2.0);
                double t16632 = t16631+1.0;
                double t16633 = log(t16632);
                double t16634 = a1p*c*t16617;
                double t16635 = t16634+1.0;
                double t16636 = c0p*t16633*t16635*2.0;
                double t16637 = 1.0/(bet*bet);
                double t16638 = 1.0/(k*k);
                double t16639 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t16640 = 1.0/pow(t16615,1.4E1/3.0);
                double t16641 = t16619*2.0;
                double t16642 = t16641-2.0;
                double t16643 = two_13*2.0;
                double t16644 = t16643-2.0;
                double t16645 = 1.0/t16644;
                double t16646 = 1.0/c0f;
                double t16647 = b1f*t16620;
                double t16648 = b3f*t16621;
                double t16649 = b4f*t16622*t16623;
                double t16650 = b2f*c*t16617;
                double t16651 = t16650+t16647+t16648+t16649;
                double t16652 = 1.0/t16651;
                double t16653 = t16652*t16646*(1.0/2.0);
                double t16654 = t16653+1.0;
                double t16655 = log(t16654);
                double t16656 = a1f*c*t16617;
                double t16657 = t16656+1.0;
                double t16668 = c0f*t16655*t16657*2.0;
                double t16658 = t16636-t16668;
                double t16669 = t16642*t16645*t16658;
                double t16659 = t16636-t16669;
                double t16660 = alph*t16637*t16659*4.0;
                double t16661 = exp(t16660);
                double t16662 = t16661-1.0;
                double t16671 = gamma_ab[index]*2.0;
                double t16663 = gamma_aa[index]+gamma_bb[index]+t16671;
                double t16664 = pow(2.0,2.0/3.0);
                double t16665 = 1.0/k;
                double t16666 = 1.0/(pi_m12*pi_m12);
                double t16667 = 1.0/pow(t16615,7.0/3.0);
                double t16670 = 1.0/t16662;
                double t16672 = alph*alph;
                double t16673 = 1.0/(t16662*t16662);
                double t16674 = gamma_aa[index]*2.0;
                double t16675 = gamma_ab[index]*4.0;
                double t16676 = gamma_bb[index]*2.0;
                double t16677 = t16674+t16675+t16676;
                double t16678 = t16663*t16663;
                double t16679 = t16640*t16672*t16619*t16637*t16673*t16638*t16639*t16678*(1.0/3.2E1);
                double t16680 = alph*t16616*t16670*t16663*t16664*t16665*t16666*t16667*(1.0/8.0);
                double t16681 = t16680+t16679+1.0;
                double t16682 = t16663*t16664*t16665*t16666*t16667*(1.0/1.6E1);
                double t16683 = alph*t16640*t16616*t16670*t16619*t16638*t16639*t16678*(1.0/6.4E1);
                double t16684 = t16682+t16683;
                double t16685 = 1.0/t16681;
                double t16686 = 1.0/pow(t16615,8.0/3.0);
                double t16687 = exp(t16663*t16619*t16638*t16686*(-2.5E1/2.0));
                double t16688 = Cx*(1.0E1/7.0);
                double t16689 = Cc1*(1.0/1.0E3);
                double t16690 = Cc3*t16622*t16623*(1.0/1.0E3);
                double t16691 = Cc2*c*t16617*(1.0/1.0E3);
                double t16692 = t16690+t16691+t16689;
                double t16693 = Cc5*t16622*t16623;
                double t16694 = 1.0/t16615;
                double t16695 = Cc6*c*t16622*t16694;
                double t16696 = Cc4*c*t16617;
                double t16697 = t16693+t16695+t16696+1.0;
                double t16698 = 1.0/t16697;
                double t16699 = Cc0+t16688-t16692*t16698;
                v_gamma_bb_[index] = t16615*(((bet*bet)*(alph*t16616*t16685*(t16664*t16665*t16666*t16667*(1.0/1.6E1) \
                   +alph*t16640*t16616*t16670*t16619*t16638*t16639*t16677*(1.0/6.4E1))*2.0-alph*t16616*1.0/(t16681*t16681) \
                   *t16684*(alph*t16616*t16670*t16664*t16665*t16666*t16667*(1.0/8.0)+t16640*t16672*t16619*t16637*t16673* \
                   t16638*t16639*t16677*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t16616*t16684*t16685*2.0+1.0))+1.0/(k* \
                   k*k)*nu*1.0/(t16615*t16615*t16615*t16615*t16615)*t16663*t16666*t16687*t16699*(2.5E1/3.2E1)-nu*t16664* \
                   t16665*t16666*t16667*t16687*t16699*(1.0/3.2E1));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        
        //V_rho_a_rho_b
        
        //V_rho_b_rho_b
        
        if (is_gga_) {

            //V_rho_a_gamma_aa
            
            //V_rho_a_gamma_ab
            
            //V_rho_a_gamma_bb
            
            //V_rho_b_gamma_aa
            
            //V_rho_b_gamma_ab
            
            //V_rho_b_gamma_bb
            
            //V_gamma_aa_gamma_aa
            
            //V_gamma_aa_gamma_ab
            
            //V_gamma_aa_gamma_bb
            
            //V_gamma_ab_gamma_ab
            
            //V_gamma_ab_gamma_bb
            
            //V_gamma_bb_gamma_bb
            
        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            
            //V_rho_a_tau_b
            
            //V_rho_b_tau_a
            
            //V_rho_b_tau_b
            
            //V_tau_a_tau_a
            
            //V_tau_a_tau_b
            
            //V_tau_b_tau_b
            
            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                            	
                //V_gamma_aa_tau_b
                            	
                //V_gamma_ab_tau_a
                            	
                //V_gamma_ab_tau_b
                            	
                //V_gamma_bb_tau_a
                            	
                //V_gamma_bb_tau_b
                          
            }  
        }
    }
}

}}

