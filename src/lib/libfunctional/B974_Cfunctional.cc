#include <libmints/vector.h>
#include "B974_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

B974_CFunctional::B974_CFunctional()
{
    name_ = "B974_C";
    description_ = "    4th-Order B97 Correlation Expansion\n";
    citation_ = "    A.D. Boese, et. al., J. Chem. Phys., 112(4), 1670-1678, 2000\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["d2fz0"] =   1.7099210000000000E+00;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["Aa"] =   1.6886999999999999E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1091000000000001E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545000000000000E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
    parameters_["gcab"] =   6.0000000000000001E-03;
    parameters_["gcaa"] =   2.0000000000000001E-01;
    parameters_["ccab0"] =   5.1473000000000002E-01;
    parameters_["ccab1"] =   6.9298200000000003E+00;
    parameters_["ccab2"] =  -2.4707300000000000E+01;
    parameters_["ccab3"] =   2.3109800000000000E+01;
    parameters_["ccab4"] =  -1.1323399999999999E+01;
    parameters_["ccaa0"] =   4.8950800000000000E-01;
    parameters_["ccaa1"] =  -2.6069900000000001E-01;
    parameters_["ccaa2"] =   4.3291700000000000E-01;
    parameters_["ccaa3"] =  -1.9924700000000000E+00;
    parameters_["ccaa4"] =   2.4853100000000001E+00;
}
B974_CFunctional::~B974_CFunctional()
{
}
void B974_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double two_13 = parameters_["two_13"];
    double d2fz0 = parameters_["d2fz0"];
    double c = parameters_["c"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];
    double gcab = parameters_["gcab"];
    double gcaa = parameters_["gcaa"];
    double ccab0 = parameters_["ccab0"];
    double ccab1 = parameters_["ccab1"];
    double ccab2 = parameters_["ccab2"];
    double ccab3 = parameters_["ccab3"];
    double ccab4 = parameters_["ccab4"];
    double ccaa0 = parameters_["ccaa0"];
    double ccaa1 = parameters_["ccaa1"];
    double ccaa2 = parameters_["ccaa2"];
    double ccaa3 = parameters_["ccaa3"];
    double ccaa4 = parameters_["ccaa4"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t35855 = 1.0/pow(rho_b,1.0/3.0);
                double t35856 = c*t35855;
                double t35857 = sqrt(t35856);
                double t35858 = pow(t35856,3.0/2.0);
                double t35859 = c*c;
                double t35860 = 1.0/pow(rho_b,2.0/3.0);
                double t35861 = 1.0/c0p;
                double t35862 = b1p*t35857;
                double t35863 = b3p*t35858;
                double t35864 = b4p*t35860*t35859;
                double t35865 = b2p*c*t35855;
                double t35866 = t35862+t35863+t35864+t35865;
                double t35867 = 1.0/t35866;
                double t35868 = t35861*t35867*(1.0/2.0);
                double t35869 = t35868+1.0;
                double t35870 = log(t35869);
                double t35871 = a1p*c*t35855;
                double t35872 = t35871+1.0;
                double t35873 = gamma_bb*gamma_bb;
                double t35874 = gcaa*gcaa;
                double t35875 = t35873*t35873;
                double t35876 = t35874*t35874;
                double t35877 = 1.0/pow(rho_b,3.2E1/3.0);
                double t35878 = 1.0/pow(rho_b,8.0/3.0);
                double t35879 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35880 = 1.0/pow(rho_b,1.6E1/3.0);
                v[Q] += scale * -rho_b*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t35857+b3f*t35858+b2f*c*t35855+b4f*t35860*t35859))+1.0)*(a1f*c*t35855+1.0)*2.0-c0p*t35870*t35872*2.0))/(two_13*2.0-2.0)+c0p*t35870*t35872*2.0)*(ccaa0+(ccaa2*t35880*t35873*t35874)/(gamma_bb*gcaa*t35878*2.0+t35880*t35873*t35874+1.0)+(ccaa1*gamma_bb*gcaa*t35878)/(gamma_bb*gcaa*t35878+1.0)+(ccaa4*t35875*t35876*t35877)/(gamma_bb*gcaa*t35878*4.0+t35880*t35873*t35874*6.0+t35875*t35876*t35877+gamma_bb*gcaa*t35873*t35874*t35879*4.0+1.0)+(ccaa3*gamma_bb*gcaa*t35873*t35874*t35879)/(gamma_bb*gcaa*t35878*3.0+t35880*t35873*t35874*3.0+gamma_bb*gcaa*t35873*t35874*t35879+1.0));
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t35883 = 1.0/pow(rho_b,1.0/3.0);
                double t35884 = c*t35883;
                double t35885 = sqrt(t35884);
                double t35886 = pow(t35884,3.0/2.0);
                double t35887 = c*c;
                double t35888 = 1.0/pow(rho_b,2.0/3.0);
                double t35889 = 1.0/c0p;
                double t35890 = b1p*t35885;
                double t35891 = b3p*t35886;
                double t35892 = b4p*t35887*t35888;
                double t35893 = b2p*c*t35883;
                double t35894 = t35890+t35891+t35892+t35893;
                double t35895 = 1.0/t35894;
                double t35896 = t35895*t35889*(1.0/2.0);
                double t35897 = t35896+1.0;
                double t35898 = log(t35897);
                double t35899 = a1p*c*t35883;
                double t35900 = t35899+1.0;
                double t35901 = gamma_bb*gamma_bb;
                double t35902 = gcaa*gcaa;
                double t35903 = t35901*t35901;
                double t35904 = t35902*t35902;
                double t35905 = 1.0/pow(rho_b,3.2E1/3.0);
                double t35906 = 1.0/pow(rho_b,8.0/3.0);
                double t35907 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35908 = 1.0/pow(rho_b,1.6E1/3.0);
                double t35909 = pow(2.0,1.0/3.0);
                double t35910 = t35909*2.0;
                double t35911 = t35910-2.0;
                double t35912 = two_13*2.0;
                double t35913 = t35912-2.0;
                double t35914 = 1.0/t35913;
                double t35915 = 1.0/c0f;
                double t35916 = b1f*t35885;
                double t35917 = b3f*t35886;
                double t35918 = b4f*t35887*t35888;
                double t35919 = b2f*c*t35883;
                double t35920 = t35916+t35917+t35918+t35919;
                double t35921 = 1.0/t35920;
                double t35922 = t35921*t35915*(1.0/2.0);
                double t35923 = t35922+1.0;
                double t35924 = log(t35923);
                double t35925 = a1f*c*t35883;
                double t35926 = t35925+1.0;
                double t35927 = c0f*t35924*t35926*2.0;
                double t35928 = c0p*t35900*t35898*2.0;
                double t35929 = gamma_bb*gcaa*t35906*4.0;
                double t35930 = gamma_bb*gcaa*t35901*t35902*t35907*4.0;
                double t35931 = t35901*t35902*t35908*6.0;
                double t35932 = t35903*t35904*t35905;
                double t35933 = t35930+t35931+t35932+t35929+1.0;
                double t35934 = 1.0/t35933;
                double t35935 = gamma_bb*gcaa*t35906;
                double t35936 = t35935+1.0;
                double t35937 = 1.0/t35936;
                double t35938 = gamma_bb*gcaa*t35906*3.0;
                double t35939 = gamma_bb*gcaa*t35901*t35902*t35907;
                double t35940 = t35901*t35902*t35908*3.0;
                double t35941 = t35940+t35938+t35939+1.0;
                double t35942 = 1.0/t35941;
                double t35943 = gamma_bb*gcaa*t35906*2.0;
                double t35944 = t35901*t35902*t35908;
                double t35945 = t35943+t35944+1.0;
                double t35946 = 1.0/t35945;
                double t35947 = 1.0/pow(rho_b,1.9E1/3.0);
                double t35948 = 1.0/pow(rho_b,1.1E1/3.0);
                double t35949 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35950 = 1.0/pow(rho_b,3.5E1/3.0);
                double t35951 = 1.0/pow(rho_b,4.0/3.0);
                double t35952 = 1.0/pow(rho_b,5.0/3.0);
                double t35953 = 1.0/sqrt(t35884);
                double t35954 = 1.0/t35897;
                double t35955 = 1.0/(t35894*t35894);
                double t35956 = b4p*t35952*t35887*(2.0/3.0);
                double t35957 = b2p*c*t35951*(1.0/3.0);
                double t35958 = b1p*c*t35951*t35953*(1.0/6.0);
                double t35959 = b3p*c*t35951*t35885*(1.0/2.0);
                double t35960 = t35956+t35957+t35958+t35959;
                double t35961 = t35900*t35960*t35954*t35955;
                double t35962 = ccaa4*t35903*t35904*t35905*t35934;
                double t35963 = ccaa1*gamma_bb*gcaa*t35906*t35937;
                double t35964 = ccaa3*gamma_bb*gcaa*t35901*t35902*t35942*t35907;
                double t35965 = ccaa2*t35901*t35902*t35908*t35946;
                double t35966 = ccaa0+t35962+t35963+t35964+t35965;
                v_rho_b[Q] += scale * -t35966*(t35928+t35911*t35914*(t35927-c0p*t35900*t35898*2.0))+rho_b*t35966*(-t35961+t35911*t35914*(t35961-(1.0/(t35920*t35920)*t35926*(b2f*c*t35951*(1.0/3.0)+b4f*t35952*t35887*(2.0/3.0)+b1f*c*t35951*t35953*(1.0/6.0)+b3f*c*t35951*t35885*(1.0/2.0)))/t35923+a1f*c*c0f*t35924*t35951*(2.0/3.0)-a1p*c*c0p*t35951*t35898*(2.0/3.0))+a1p*c*c0p*t35951*t35898*(2.0/3.0))+rho_b*(t35928+t35911*t35914*(t35927-t35928))*(ccaa1*gamma_bb*gcaa*t35937*t35948*(8.0/3.0)+ccaa4*t35903*t35904*t35950*t35934*(3.2E1/3.0)+ccaa2*t35901*t35902*t35946*t35947*(1.6E1/3.0)-ccaa1*t35901*t35902*1.0/(t35936*t35936)*t35947*(8.0/3.0)-ccaa2*t35901*t35902*t35908*1.0/(t35945*t35945)*(gamma_bb*gcaa*t35948*(1.6E1/3.0)+t35901*t35902*t35947*(1.6E1/3.0))-ccaa4*t35903*t35904*t35905*1.0/(t35933*t35933)*(gamma_bb*gcaa*t35948*(3.2E1/3.0)+t35903*t35904*t35950*(3.2E1/3.0)+t35901*t35902*t35947*3.2E1+gamma_bb*gcaa*t35901*t35902*t35949*3.2E1)+ccaa3*gamma_bb*gcaa*t35901*t35902*t35942*t35949*8.0-ccaa3*gamma_bb*gcaa*t35901*t35902*1.0/(t35941*t35941)*t35907*(gamma_bb*gcaa*t35948*8.0+t35901*t35902*t35947*1.6E1+gamma_bb*gcaa*t35901*t35902*t35949*8.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t35970 = 1.0/pow(rho_b,1.0/3.0);
                double t35971 = c*t35970;
                double t35972 = sqrt(t35971);
                double t35973 = pow(t35971,3.0/2.0);
                double t35974 = c*c;
                double t35975 = 1.0/pow(rho_b,2.0/3.0);
                double t35976 = 1.0/c0p;
                double t35977 = b1p*t35972;
                double t35978 = b3p*t35973;
                double t35979 = b4p*t35974*t35975;
                double t35980 = b2p*c*t35970;
                double t35981 = t35980+t35977+t35978+t35979;
                double t35982 = 1.0/t35981;
                double t35983 = t35982*t35976*(1.0/2.0);
                double t35984 = t35983+1.0;
                double t35985 = log(t35984);
                double t35986 = a1p*c*t35970;
                double t35987 = t35986+1.0;
                double t35988 = 1.0/pow(rho_b,8.0/3.0);
                double t35989 = gamma_bb*gamma_bb;
                double t35990 = gcaa*gcaa;
                double t35991 = t35990*t35990;
                double t35992 = 1.0/pow(rho_b,3.2E1/3.0);
                double t35993 = 1.0/pow(rho_b,1.6E1/3.0);
                double t35994 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35995 = gamma_bb*gcaa*t35988;
                double t35996 = t35995+1.0;
                double t35997 = gamma_bb*gcaa*t35988*3.0;
                double t35998 = gamma_bb*gcaa*t35990*t35994*t35989;
                double t35999 = t35990*t35993*t35989*3.0;
                double t36000 = t35997+t35998+t35999+1.0;
                double t36001 = t35989*t35989;
                double t36002 = gamma_bb*gcaa*t35988*4.0;
                double t36003 = gamma_bb*gcaa*t35990*t35994*t35989*4.0;
                double t36004 = t35990*t35993*t35989*6.0;
                double t36005 = t35991*t35992*t36001;
                double t36006 = t36002+t36003+t36004+t36005+1.0;
                double t36007 = gamma_bb*gcaa*t35988*2.0;
                double t36008 = t35990*t35993*t35989;
                double t36009 = t36007+t36008+1.0;
                v_gamma_bb[Q] += scale * -rho_b*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t35972+b3f*t35973+b2f*c*t35970+b4f*t35974*t35975))+1.0)*(a1f*c*t35970+1.0)*2.0-c0p*t35985*t35987*2.0))/(two_13*2.0-2.0)+c0p*t35985*t35987*2.0)*((ccaa1*gcaa*t35988)/t35996-ccaa1*gamma_bb*t35990*t35993*1.0/(t35996*t35996)+(ccaa2*gamma_bb*t35990*t35993*2.0)/t36009-ccaa2*t35990*t35993*t35989*1.0/(t36009*t36009)*(gcaa*t35988*2.0+gamma_bb*t35990*t35993*2.0)+(ccaa4*gamma_bb*t35991*t35992*t35989*4.0)/t36006+(ccaa3*gcaa*t35990*t35994*t35989*3.0)/t36000-ccaa4*t35991*t35992*t36001*1.0/(t36006*t36006)*(gcaa*t35988*4.0+gamma_bb*t35990*t35993*1.2E1+gamma_bb*t35991*t35992*t35989*4.0+gcaa*t35990*t35994*t35989*1.2E1)-ccaa3*gamma_bb*gcaa*t35990*t35994*t35989*1.0/(t36000*t36000)*(gcaa*t35988*3.0+gamma_bb*t35990*t35993*6.0+gcaa*t35990*t35994*t35989*3.0));
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t36015 = 1.0/pow(rho_b,1.0/3.0);
                double t36016 = c*t36015;
                double t36017 = sqrt(t36016);
                double t36018 = b1f*t36017;
                double t36019 = pow(t36016,3.0/2.0);
                double t36020 = b3f*t36019;
                double t36021 = c*c;
                double t36022 = 1.0/pow(rho_b,2.0/3.0);
                double t36023 = b4f*t36021*t36022;
                double t36024 = b2f*c*t36015;
                double t36025 = t36020+t36023+t36024+t36018;
                double t36026 = 1.0/pow(rho_b,4.0/3.0);
                double t36027 = b1p*t36017;
                double t36028 = b3p*t36019;
                double t36029 = b4p*t36021*t36022;
                double t36030 = b2p*c*t36015;
                double t36031 = t36030+t36027+t36028+t36029;
                double t36032 = 1.0/pow(rho_b,5.0/3.0);
                double t36033 = 1.0/sqrt(t36016);
                double t36034 = 1.0/c0f;
                double t36035 = 1.0/t36025;
                double t36036 = t36034*t36035*(1.0/2.0);
                double t36037 = t36036+1.0;
                double t36038 = 1.0/c0p;
                double t36039 = 1.0/t36031;
                double t36040 = t36038*t36039*(1.0/2.0);
                double t36041 = t36040+1.0;
                double t36042 = a1p*c*t36015;
                double t36043 = t36042+1.0;
                double t36044 = 1.0/t36041;
                double t36045 = 1.0/(t36031*t36031);
                double t36046 = b4p*t36021*t36032*(2.0/3.0);
                double t36047 = b2p*c*t36026*(1.0/3.0);
                double t36048 = b1p*c*t36033*t36026*(1.0/6.0);
                double t36049 = b3p*c*t36017*t36026*(1.0/2.0);
                double t36050 = t36046+t36047+t36048+t36049;
                double t36051 = t36050*t36043*t36044*t36045;
                double t36052 = log(t36041);
                double t36053 = gamma_bb*gamma_bb;
                double t36054 = gcaa*gcaa;
                double t36055 = t36053*t36053;
                double t36056 = t36054*t36054;
                double t36057 = 1.0/pow(rho_b,3.2E1/3.0);
                double t36058 = 1.0/pow(rho_b,8.0/3.0);
                double t36059 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t36060 = 1.0/pow(rho_b,1.6E1/3.0);
                double t36061 = pow(2.0,1.0/3.0);
                double t36062 = t36061*2.0;
                double t36063 = t36062-2.0;
                double t36064 = two_13*2.0;
                double t36065 = t36064-2.0;
                double t36066 = 1.0/t36065;
                double t36067 = log(t36037);
                double t36068 = a1f*c*t36015;
                double t36069 = t36068+1.0;
                double t36070 = gamma_bb*gcaa*t36058*4.0;
                double t36071 = gamma_bb*gcaa*t36053*t36054*t36059*4.0;
                double t36072 = t36060*t36053*t36054*6.0;
                double t36073 = t36055*t36056*t36057;
                double t36074 = t36070+t36071+t36072+t36073+1.0;
                double t36075 = 1.0/t36074;
                double t36076 = gamma_bb*gcaa*t36058;
                double t36077 = t36076+1.0;
                double t36078 = 1.0/t36077;
                double t36079 = gamma_bb*gcaa*t36058*3.0;
                double t36080 = gamma_bb*gcaa*t36053*t36054*t36059;
                double t36081 = t36060*t36053*t36054*3.0;
                double t36082 = t36080+t36081+t36079+1.0;
                double t36083 = 1.0/t36082;
                double t36084 = gamma_bb*gcaa*t36058*2.0;
                double t36085 = t36060*t36053*t36054;
                double t36086 = t36084+t36085+1.0;
                double t36087 = 1.0/t36086;
                double t36088 = 1.0/pow(rho_b,1.9E1/3.0);
                double t36089 = 1.0/pow(rho_b,1.1E1/3.0);
                double t36090 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t36091 = 1.0/pow(rho_b,3.5E1/3.0);
                double t36092 = 1.0/t36037;
                double t36093 = 1.0/(t36025*t36025);
                double t36094 = b4f*t36021*t36032*(2.0/3.0);
                double t36095 = b2f*c*t36026*(1.0/3.0);
                double t36096 = b1f*c*t36033*t36026*(1.0/6.0);
                double t36097 = b3f*c*t36017*t36026*(1.0/2.0);
                double t36098 = t36094+t36095+t36096+t36097;
                double t36099 = a1f*c*c0f*t36026*t36067*(2.0/3.0);
                double t36100 = a1p*c*c0p*t36052*t36026*(2.0/3.0);
                double t36101 = ccaa4*t36055*t36091*t36056*t36075*(3.2E1/3.0);
                double t36102 = ccaa1*gamma_bb*gcaa*t36078*t36089*(8.0/3.0);
                double t36103 = ccaa3*gamma_bb*gcaa*t36053*t36054*t36090*t36083*8.0;
                double t36104 = ccaa2*t36053*t36054*t36087*t36088*(1.6E1/3.0);
                double t36105 = 1.0/(t36077*t36077);
                double t36106 = gamma_bb*gcaa*t36089*8.0;
                double t36107 = gamma_bb*gcaa*t36053*t36054*t36090*8.0;
                double t36108 = t36053*t36054*t36088*1.6E1;
                double t36109 = t36106+t36107+t36108;
                double t36110 = 1.0/(t36082*t36082);
                double t36111 = gamma_bb*gcaa*t36089*(3.2E1/3.0);
                double t36112 = gamma_bb*gcaa*t36053*t36054*t36090*3.2E1;
                double t36113 = t36053*t36054*t36088*3.2E1;
                double t36114 = t36055*t36091*t36056*(3.2E1/3.0);
                double t36115 = t36111+t36112+t36113+t36114;
                double t36116 = 1.0/(t36074*t36074);
                double t36117 = gamma_bb*gcaa*t36089*(1.6E1/3.0);
                double t36118 = t36053*t36054*t36088*(1.6E1/3.0);
                double t36119 = t36117+t36118;
                double t36120 = 1.0/(t36086*t36086);
                double t36121 = t36101+t36102+t36103+t36104-ccaa1*t36105*t36053*t36054*t36088*(8.0/3.0)-ccaa2*t36120*t36060*t36053*t36054*t36119-ccaa4*t36115*t36116*t36055*t36056*t36057-ccaa3*gamma_bb*gcaa*t36110*t36053*t36054*t36109*t36059;
                double t36122 = c0f*t36067*t36069*2.0;
                double t36123 = c0p*t36043*t36052*2.0;
                double t36124 = 1.0/pow(rho_b,1.0E1);
                double t36125 = 1.0/pow(rho_b,2.2E1/3.0);
                double t36126 = 1.0/pow(rho_b,1.4E1/3.0);
                double t36127 = 1.0/pow(rho_b,3.8E1/3.0);
                double t36128 = ccaa4*t36055*t36056*t36057*t36075;
                double t36129 = ccaa1*gamma_bb*gcaa*t36058*t36078;
                double t36130 = ccaa3*gamma_bb*gcaa*t36053*t36054*t36083*t36059;
                double t36131 = ccaa2*t36060*t36053*t36054*t36087;
                double t36132 = ccaa0+t36130+t36131+t36128+t36129;
                double t36133 = 1.0/pow(rho_b,7.0/3.0);
                double t36134 = 1.0/pow(t36016,3.0/2.0);
                double t36135 = t36098*t36098;
                double t36136 = t36050*t36050;
                double t36137 = 1.0/(t36031*t36031*t36031);
                double t36138 = t36043*t36044*t36136*t36137*2.0;
                double t36139 = b4p*t36021*t36058*(1.0E1/9.0);
                double t36140 = b2p*c*t36133*(4.0/9.0);
                double t36141 = b3p*t36021*t36033*t36058*(1.0/1.2E1);
                double t36142 = b1p*c*t36033*t36133*(2.0/9.0);
                double t36143 = b3p*c*t36133*t36017*(2.0/3.0);
                double t36144 = t36140+t36141+t36142+t36143+t36139-b1p*t36021*t36134*t36058*(1.0/3.6E1);
                double t36145 = 1.0/(t36041*t36041);
                double t36146 = 1.0/(t36031*t36031*t36031*t36031);
                double t36147 = a1p*c*c0p*t36052*t36133*(8.0/9.0);
                v_rho_b_rho_b[Q] += scale * t36121*(t36123+t36063*t36066*(t36122-c0p*t36043*t36052*2.0))*2.0+t36132*(t36100-t36051+t36063*t36066*(t36051+t36099-t36092*t36093*t36069*t36098-a1p*c*c0p*t36052*t36026*(2.0/3.0)))*2.0+rho_b*t36132*(-t36138-t36147+t36063*t36066*(t36138+t36147-t36043*t36044*t36045*t36144-1.0/(t36025*t36025*t36025)*t36135*t36092*t36069*2.0+t36092*t36093*t36069*(b2f*c*t36133*(4.0/9.0)+b4f*t36021*t36058*(1.0E1/9.0)+b1f*c*t36033*t36133*(2.0/9.0)+b3f*c*t36133*t36017*(2.0/3.0)-b1f*t36021*t36134*t36058*(1.0/3.6E1)+b3f*t36021*t36033*t36058*(1.0/1.2E1))+1.0/(t36025*t36025*t36025*t36025)*t36034*t36135*1.0/(t36037*t36037)*t36069*(1.0/2.0)-a1f*c*c0f*t36133*t36067*(8.0/9.0)-t36043*t36136*t36145*t36038*t36146*(1.0/2.0)+a1f*c*t36026*t36092*t36093*t36098*(2.0/3.0)-a1p*c*t36050*t36026*t36044*t36045*(2.0/3.0))+t36043*t36044*t36045*t36144+t36043*t36136*t36145*t36038*t36146*(1.0/2.0)+a1p*c*t36050*t36026*t36044*t36045*(2.0/3.0))+rho_b*t36121*(-t36100+t36051+t36063*t36066*(t36100-t36051-t36099+t36092*t36093*t36069*t36098))*2.0-rho_b*(t36123+t36063*t36066*(t36122-t36123))*(ccaa1*gamma_bb*gcaa*t36126*t36078*(8.8E1/9.0)-ccaa1*t36105*t36053*t36125*t36054*2.4E1+ccaa2*t36053*t36125*t36054*t36087*(3.04E2/9.0)+ccaa4*t36055*t36127*t36056*t36075*(1.12E3/9.0)-ccaa2*t36120*t36053*t36054*t36119*t36088*(3.2E1/3.0)-ccaa4*t36115*t36116*t36055*t36091*t36056*(6.4E1/3.0)-ccaa2*t36120*t36060*t36053*t36054*(gamma_bb*gcaa*t36126*(1.76E2/9.0)+t36053*t36125*t36054*(3.04E2/9.0))-ccaa4*t36116*t36055*t36056*t36057*(gamma_bb*gcaa*t36126*(3.52E2/9.0)+t36053*t36125*t36054*(6.08E2/3.0)+t36055*t36127*t36056*(1.12E3/9.0)+gamma_bb*gcaa*t36124*t36053*t36054*2.88E2)+ccaa2*t36060*t36053*t36054*(t36119*t36119)*1.0/(t36086*t36086*t36086)*2.0+ccaa4*(t36115*t36115)*t36055*t36056*1.0/(t36074*t36074*t36074)*t36057*2.0+ccaa3*gamma_bb*gcaa*t36124*t36053*t36054*t36083*7.2E1+ccaa1*gamma_bb*gcaa*t36124*t36053*t36054*1.0/(t36077*t36077*t36077)*(1.28E2/9.0)+ccaa3*gamma_bb*gcaa*t36053*t36054*1.0/(t36082*t36082*t36082)*(t36109*t36109)*t36059*2.0-ccaa3*gamma_bb*gcaa*t36110*t36053*t36054*t36059*(gamma_bb*gcaa*t36126*(8.8E1/3.0)+t36053*t36125*t36054*(3.04E2/3.0)+gamma_bb*gcaa*t36124*t36053*t36054*7.2E1)-ccaa3*gamma_bb*gcaa*t36110*t36053*t36054*t36090*t36109*1.6E1);
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t36272 = 1.0/pow(rho_b,1.0/3.0);
                double t36273 = c*t36272;
                double t36274 = sqrt(t36273);
                double t36275 = pow(t36273,3.0/2.0);
                double t36276 = c*c;
                double t36277 = 1.0/pow(rho_b,2.0/3.0);
                double t36278 = 1.0/c0p;
                double t36279 = b1p*t36274;
                double t36280 = b3p*t36275;
                double t36281 = b4p*t36276*t36277;
                double t36282 = b2p*c*t36272;
                double t36283 = t36280+t36281+t36282+t36279;
                double t36284 = 1.0/t36283;
                double t36285 = t36284*t36278*(1.0/2.0);
                double t36286 = t36285+1.0;
                double t36287 = log(t36286);
                double t36288 = a1p*c*t36272;
                double t36289 = t36288+1.0;
                double t36290 = gcaa*gcaa;
                double t36291 = 1.0/pow(rho_b,1.6E1/3.0);
                double t36292 = 1.0/pow(rho_b,8.0/3.0);
                double t36293 = gamma_bb*gamma_bb;
                double t36294 = t36290*t36290;
                double t36295 = 1.0/pow(rho_b,3.2E1/3.0);
                double t36296 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t36297 = gamma_bb*gcaa*t36292;
                double t36298 = t36297+1.0;
                double t36299 = gamma_bb*gcaa*t36292*2.0;
                double t36300 = t36290*t36291*t36293;
                double t36301 = t36300+t36299+1.0;
                double t36302 = gamma_bb*gcaa*t36292*3.0;
                double t36303 = gamma_bb*gcaa*t36290*t36293*t36296;
                double t36304 = t36290*t36291*t36293*3.0;
                double t36305 = t36302+t36303+t36304+1.0;
                double t36306 = t36293*t36293;
                double t36322 = gcaa*t36292*4.0;
                double t36323 = gamma_bb*t36290*t36291*1.2E1;
                double t36324 = gcaa*t36290*t36293*t36296*1.2E1;
                double t36325 = gamma_bb*t36293*t36294*t36295*4.0;
                double t36307 = t36322+t36323+t36324+t36325;
                double t36308 = gamma_bb*gcaa*t36292*4.0;
                double t36309 = gamma_bb*gcaa*t36290*t36293*t36296*4.0;
                double t36310 = t36290*t36291*t36293*6.0;
                double t36311 = t36306*t36294*t36295;
                double t36312 = t36310+t36311+t36308+t36309+1.0;
                double t36315 = gcaa*t36292*2.0;
                double t36316 = gamma_bb*t36290*t36291*2.0;
                double t36313 = t36315+t36316;
                double t36314 = 1.0/(t36305*t36305);
                double t36317 = 1.0/(t36301*t36301);
                double t36318 = gcaa*t36292*3.0;
                double t36319 = gamma_bb*t36290*t36291*6.0;
                double t36320 = gcaa*t36290*t36293*t36296*3.0;
                double t36321 = t36320+t36318+t36319;
                double t36326 = 1.0/(t36312*t36312);
                v_gamma_bb_gamma_bb[Q] += scale * -rho_b*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36274+b3f*t36275+b2f*c*t36272+b4f*t36276*t36277))+1.0)*(a1f*c*t36272+1.0)*2.0-c0p*t36287*t36289*2.0))/(two_13*2.0-2.0)+c0p*t36287*t36289*2.0)*((ccaa2*t36290*t36291*2.0)/t36301-ccaa1*t36290*t36291*1.0/(t36298*t36298)*2.0-ccaa2*t36317*t36293*t36294*t36295*2.0+(ccaa4*t36293*t36294*t36295*1.2E1)/t36312-ccaa4*t36306*t36326*t36294*t36295*(t36290*t36291*1.2E1+t36293*t36294*t36295*1.2E1+gamma_bb*gcaa*t36290*t36296*2.4E1)+(ccaa3*gamma_bb*gcaa*t36290*t36296*6.0)/t36305+ccaa1*gamma_bb*gcaa*t36290*t36296*1.0/(t36298*t36298*t36298)*2.0+ccaa2*1.0/(t36301*t36301*t36301)*(t36313*t36313)*t36290*t36291*t36293*2.0+ccaa4*1.0/(t36312*t36312*t36312)*t36306*(t36307*t36307)*t36294*t36295*2.0-ccaa2*gamma_bb*t36313*t36290*t36317*t36291*4.0-ccaa4*gamma_bb*t36307*t36326*t36293*t36294*t36295*8.0-ccaa3*gcaa*t36321*t36314*t36290*t36293*t36296*6.0-ccaa3*gamma_bb*gcaa*t36314*t36290*t36293*t36296*(t36290*t36291*6.0+gamma_bb*gcaa*t36290*t36296*6.0)+ccaa3*gamma_bb*gcaa*(t36321*t36321)*1.0/(t36305*t36305*t36305)*t36290*t36293*t36296*2.0);
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t36154 = 1.0/pow(rho_b,1.0/3.0);
                double t36155 = c*t36154;
                double t36156 = sqrt(t36155);
                double t36157 = pow(t36155,3.0/2.0);
                double t36158 = c*c;
                double t36159 = 1.0/pow(rho_b,2.0/3.0);
                double t36160 = 1.0/c0p;
                double t36161 = b1p*t36156;
                double t36162 = b3p*t36157;
                double t36163 = b4p*t36158*t36159;
                double t36164 = b2p*c*t36154;
                double t36165 = t36161+t36162+t36163+t36164;
                double t36166 = 1.0/t36165;
                double t36167 = t36160*t36166*(1.0/2.0);
                double t36168 = t36167+1.0;
                double t36169 = log(t36168);
                double t36170 = a1p*c*t36154;
                double t36171 = t36170+1.0;
                double t36172 = 1.0/pow(rho_b,8.0/3.0);
                double t36173 = gamma_bb*gamma_bb;
                double t36174 = gcaa*gcaa;
                double t36175 = t36174*t36174;
                double t36176 = 1.0/pow(rho_b,3.2E1/3.0);
                double t36177 = 1.0/pow(rho_b,1.6E1/3.0);
                double t36178 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t36179 = gamma_bb*gcaa*t36172;
                double t36180 = t36179+1.0;
                double t36181 = gamma_bb*gcaa*t36172*3.0;
                double t36182 = gamma_bb*gcaa*t36173*t36174*t36178;
                double t36183 = t36173*t36174*t36177*3.0;
                double t36184 = t36181+t36182+t36183+1.0;
                double t36185 = t36173*t36173;
                double t36186 = gamma_bb*gcaa*t36172*4.0;
                double t36187 = gamma_bb*gcaa*t36173*t36174*t36178*4.0;
                double t36188 = t36173*t36174*t36177*6.0;
                double t36189 = t36175*t36176*t36185;
                double t36190 = t36186+t36187+t36188+t36189+1.0;
                double t36191 = gamma_bb*gcaa*t36172*2.0;
                double t36192 = t36173*t36174*t36177;
                double t36193 = t36191+t36192+1.0;
                double t36194 = pow(2.0,1.0/3.0);
                double t36195 = t36194*2.0;
                double t36196 = t36195-2.0;
                double t36197 = two_13*2.0;
                double t36198 = t36197-2.0;
                double t36199 = 1.0/t36198;
                double t36200 = 1.0/c0f;
                double t36201 = b1f*t36156;
                double t36202 = b3f*t36157;
                double t36203 = b4f*t36158*t36159;
                double t36204 = b2f*c*t36154;
                double t36205 = t36201+t36202+t36203+t36204;
                double t36206 = 1.0/t36205;
                double t36207 = t36200*t36206*(1.0/2.0);
                double t36208 = t36207+1.0;
                double t36209 = log(t36208);
                double t36210 = a1f*c*t36154;
                double t36211 = t36210+1.0;
                double t36212 = c0f*t36211*t36209*2.0;
                double t36213 = c0p*t36171*t36169*2.0;
                double t36214 = 1.0/t36180;
                double t36215 = 1.0/t36190;
                double t36216 = 1.0/t36193;
                double t36217 = 1.0/t36184;
                double t36218 = 1.0/pow(rho_b,1.9E1/3.0);
                double t36219 = 1.0/(t36180*t36180);
                double t36220 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t36221 = 1.0/pow(rho_b,1.1E1/3.0);
                double t36222 = 1.0/(t36184*t36184);
                double t36223 = 1.0/(t36193*t36193);
                double t36224 = gcaa*t36172*3.0;
                double t36225 = gamma_bb*t36174*t36177*6.0;
                double t36226 = gcaa*t36173*t36174*t36178*3.0;
                double t36227 = t36224+t36225+t36226;
                double t36228 = 1.0/pow(rho_b,3.5E1/3.0);
                double t36229 = 1.0/(t36190*t36190);
                double t36230 = gcaa*t36172*4.0;
                double t36231 = gamma_bb*t36174*t36177*1.2E1;
                double t36232 = gcaa*t36173*t36174*t36178*1.2E1;
                double t36233 = gamma_bb*t36173*t36175*t36176*4.0;
                double t36234 = t36230+t36231+t36232+t36233;
                double t36235 = gcaa*t36172*2.0;
                double t36236 = gamma_bb*t36174*t36177*2.0;
                double t36237 = t36235+t36236;
                double t36238 = gamma_bb*gcaa*t36221*(1.6E1/3.0);
                double t36239 = t36173*t36218*t36174*(1.6E1/3.0);
                double t36240 = t36238+t36239;
                double t36241 = gamma_bb*gcaa*t36221*8.0;
                double t36242 = gamma_bb*gcaa*t36220*t36173*t36174*8.0;
                double t36243 = t36173*t36218*t36174*1.6E1;
                double t36244 = t36241+t36242+t36243;
                double t36245 = gamma_bb*gcaa*t36221*(3.2E1/3.0);
                double t36246 = gamma_bb*gcaa*t36220*t36173*t36174*3.2E1;
                double t36247 = t36173*t36218*t36174*3.2E1;
                double t36248 = t36228*t36175*t36185*(3.2E1/3.0);
                double t36249 = t36245+t36246+t36247+t36248;
                double t36250 = 1.0/pow(rho_b,4.0/3.0);
                double t36251 = 1.0/pow(rho_b,5.0/3.0);
                double t36252 = 1.0/sqrt(t36155);
                double t36253 = 1.0/t36168;
                double t36254 = 1.0/(t36165*t36165);
                double t36255 = b4p*t36251*t36158*(2.0/3.0);
                double t36256 = b2p*c*t36250*(1.0/3.0);
                double t36257 = b1p*c*t36250*t36252*(1.0/6.0);
                double t36258 = b3p*c*t36250*t36156*(1.0/2.0);
                double t36259 = t36255+t36256+t36257+t36258;
                double t36260 = t36171*t36253*t36254*t36259;
                double t36261 = ccaa1*gcaa*t36214*t36172;
                double t36262 = ccaa4*gamma_bb*t36215*t36173*t36175*t36176*4.0;
                double t36263 = ccaa2*gamma_bb*t36216*t36174*t36177*2.0;
                double t36264 = ccaa3*gcaa*t36217*t36173*t36174*t36178*3.0;
                double t36265 = t36261+t36262+t36263+t36264-ccaa1*gamma_bb*t36174*t36219*t36177-ccaa2*t36223*t36173*t36174*t36237*t36177-ccaa4*t36234*t36175*t36229*t36176*t36185-ccaa3*gamma_bb*gcaa*t36222*t36173*t36227*t36174*t36178;
                v_rho_b_gamma_bb[Q] += scale * -t36265*(t36213+t36196*t36199*(t36212-c0p*t36171*t36169*2.0))+rho_b*t36265*(-t36260+t36196*t36199*(t36260-(t36211*1.0/(t36205*t36205)*(b2f*c*t36250*(1.0/3.0)+b4f*t36251*t36158*(2.0/3.0)+b1f*c*t36250*t36252*(1.0/6.0)+b3f*c*t36250*t36156*(1.0/2.0)))/t36208+a1f*c*c0f*t36250*t36209*(2.0/3.0)-a1p*c*c0p*t36250*t36169*(2.0/3.0))+a1p*c*c0p*t36250*t36169*(2.0/3.0))-rho_b*(t36213+t36196*t36199*(t36212-t36213))*(ccaa1*gcaa*t36221*t36214*(-8.0/3.0)-ccaa2*gamma_bb*t36216*t36218*t36174*(3.2E1/3.0)+ccaa1*gamma_bb*t36218*t36174*t36219*8.0+ccaa2*t36223*t36173*t36218*t36174*t36237*(1.6E1/3.0)+ccaa4*t36234*t36228*t36175*t36229*t36185*(3.2E1/3.0)+ccaa4*t36175*t36229*t36176*t36185*(gcaa*t36221*(3.2E1/3.0)+gamma_bb*t36218*t36174*6.4E1+gamma_bb*t36173*t36228*t36175*(1.28E2/3.0)+gcaa*t36220*t36173*t36174*9.6E1)-ccaa1*gcaa*t36220*1.0/(t36180*t36180*t36180)*t36173*t36174*(1.6E1/3.0)+ccaa2*t36223*t36173*t36174*t36177*(gcaa*t36221*(1.6E1/3.0)+gamma_bb*t36218*t36174*(3.2E1/3.0))+ccaa2*gamma_bb*t36240*t36223*t36174*t36177*2.0-ccaa4*gamma_bb*t36215*t36173*t36228*t36175*(1.28E2/3.0)-ccaa3*gcaa*t36220*t36217*t36173*t36174*2.4E1+ccaa4*gamma_bb*t36173*t36175*t36229*t36176*t36249*4.0+ccaa3*gcaa*t36222*t36244*t36173*t36174*t36178*3.0-ccaa2*t36240*t36173*t36174*t36237*1.0/(t36193*t36193*t36193)*t36177*2.0-ccaa4*t36234*1.0/(t36190*t36190*t36190)*t36175*t36176*t36185*t36249*2.0+ccaa3*gamma_bb*gcaa*t36222*t36173*t36174*t36178*(gcaa*t36221*8.0+gamma_bb*t36218*t36174*3.2E1+gcaa*t36220*t36173*t36174*2.4E1)+ccaa3*gamma_bb*gcaa*t36220*t36222*t36173*t36227*t36174*8.0-ccaa3*gamma_bb*gcaa*t36244*t36173*t36227*t36174*1.0/(t36184*t36184*t36184)*t36178*2.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t36341 = 1.0/pow(rho_a,1.0/3.0);
                double t36342 = c*t36341;
                double t36343 = sqrt(t36342);
                double t36344 = pow(t36342,3.0/2.0);
                double t36345 = c*c;
                double t36346 = 1.0/pow(rho_a,2.0/3.0);
                double t36347 = 1.0/c0p;
                double t36348 = b1p*t36343;
                double t36349 = b3p*t36344;
                double t36350 = b4p*t36345*t36346;
                double t36351 = b2p*c*t36341;
                double t36352 = t36350+t36351+t36348+t36349;
                double t36353 = 1.0/t36352;
                double t36354 = t36353*t36347*(1.0/2.0);
                double t36355 = t36354+1.0;
                double t36356 = log(t36355);
                double t36357 = a1p*c*t36341;
                double t36358 = t36357+1.0;
                double t36359 = gamma_aa*gamma_aa;
                double t36360 = gcaa*gcaa;
                double t36361 = t36359*t36359;
                double t36362 = t36360*t36360;
                double t36363 = 1.0/pow(rho_a,3.2E1/3.0);
                double t36364 = 1.0/pow(rho_a,8.0/3.0);
                double t36365 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36366 = 1.0/pow(rho_a,1.6E1/3.0);
                v[Q] += scale * -rho_a*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36343+b3f*t36344+b2f*c*t36341+b4f*t36345*t36346))+1.0)*(a1f*c*t36341+1.0)*2.0-c0p*t36356*t36358*2.0))/(two_13*2.0-2.0)+c0p*t36356*t36358*2.0)*(ccaa0+(ccaa2*t36360*t36366*t36359)/(gamma_aa*gcaa*t36364*2.0+t36360*t36366*t36359+1.0)+(ccaa1*gamma_aa*gcaa*t36364)/(gamma_aa*gcaa*t36364+1.0)+(ccaa4*t36361*t36362*t36363)/(gamma_aa*gcaa*t36364*4.0+t36361*t36362*t36363+t36360*t36366*t36359*6.0+gamma_aa*gcaa*t36360*t36365*t36359*4.0+1.0)+(ccaa3*gamma_aa*gcaa*t36360*t36365*t36359)/(gamma_aa*gcaa*t36364*3.0+t36360*t36366*t36359*3.0+gamma_aa*gcaa*t36360*t36365*t36359+1.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t36368 = 1.0/pow(rho_a,1.0/3.0);
                double t36369 = c*t36368;
                double t36370 = sqrt(t36369);
                double t36371 = pow(t36369,3.0/2.0);
                double t36372 = c*c;
                double t36373 = 1.0/pow(rho_a,2.0/3.0);
                double t36374 = 1.0/c0p;
                double t36375 = b1p*t36370;
                double t36376 = b3p*t36371;
                double t36377 = b4p*t36372*t36373;
                double t36378 = b2p*c*t36368;
                double t36379 = t36375+t36376+t36377+t36378;
                double t36380 = 1.0/t36379;
                double t36381 = t36380*t36374*(1.0/2.0);
                double t36382 = t36381+1.0;
                double t36383 = log(t36382);
                double t36384 = a1p*c*t36368;
                double t36385 = t36384+1.0;
                double t36386 = gamma_aa*gamma_aa;
                double t36387 = gcaa*gcaa;
                double t36388 = t36386*t36386;
                double t36389 = t36387*t36387;
                double t36390 = 1.0/pow(rho_a,3.2E1/3.0);
                double t36391 = 1.0/pow(rho_a,8.0/3.0);
                double t36392 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36393 = 1.0/pow(rho_a,1.6E1/3.0);
                double t36394 = pow(2.0,1.0/3.0);
                double t36395 = t36394*2.0;
                double t36396 = t36395-2.0;
                double t36397 = two_13*2.0;
                double t36398 = t36397-2.0;
                double t36399 = 1.0/t36398;
                double t36400 = 1.0/c0f;
                double t36401 = b1f*t36370;
                double t36402 = b3f*t36371;
                double t36403 = b4f*t36372*t36373;
                double t36404 = b2f*c*t36368;
                double t36405 = t36401+t36402+t36403+t36404;
                double t36406 = 1.0/t36405;
                double t36407 = t36400*t36406*(1.0/2.0);
                double t36408 = t36407+1.0;
                double t36409 = log(t36408);
                double t36410 = a1f*c*t36368;
                double t36411 = t36410+1.0;
                double t36412 = c0f*t36411*t36409*2.0;
                double t36413 = c0p*t36383*t36385*2.0;
                double t36414 = gamma_aa*gcaa*t36391*4.0;
                double t36415 = gamma_aa*gcaa*t36392*t36386*t36387*4.0;
                double t36416 = t36393*t36386*t36387*6.0;
                double t36417 = t36390*t36388*t36389;
                double t36418 = t36414+t36415+t36416+t36417+1.0;
                double t36419 = 1.0/t36418;
                double t36420 = gamma_aa*gcaa*t36391;
                double t36421 = t36420+1.0;
                double t36422 = 1.0/t36421;
                double t36423 = gamma_aa*gcaa*t36391*3.0;
                double t36424 = gamma_aa*gcaa*t36392*t36386*t36387;
                double t36425 = t36393*t36386*t36387*3.0;
                double t36426 = t36423+t36424+t36425+1.0;
                double t36427 = 1.0/t36426;
                double t36428 = gamma_aa*gcaa*t36391*2.0;
                double t36429 = t36393*t36386*t36387;
                double t36430 = t36428+t36429+1.0;
                double t36431 = 1.0/t36430;
                double t36432 = 1.0/pow(rho_a,1.9E1/3.0);
                double t36433 = 1.0/pow(rho_a,1.1E1/3.0);
                double t36434 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36435 = 1.0/pow(rho_a,3.5E1/3.0);
                double t36436 = 1.0/pow(rho_a,4.0/3.0);
                double t36437 = 1.0/pow(rho_a,5.0/3.0);
                double t36438 = 1.0/sqrt(t36369);
                double t36439 = 1.0/t36382;
                double t36440 = 1.0/(t36379*t36379);
                double t36441 = b4p*t36372*t36437*(2.0/3.0);
                double t36442 = b2p*c*t36436*(1.0/3.0);
                double t36443 = b1p*c*t36436*t36438*(1.0/6.0);
                double t36444 = b3p*c*t36370*t36436*(1.0/2.0);
                double t36445 = t36441+t36442+t36443+t36444;
                double t36446 = t36440*t36445*t36385*t36439;
                double t36447 = ccaa4*t36390*t36419*t36388*t36389;
                double t36448 = ccaa1*gamma_aa*gcaa*t36422*t36391;
                double t36449 = ccaa3*gamma_aa*gcaa*t36427*t36392*t36386*t36387;
                double t36450 = ccaa2*t36431*t36393*t36386*t36387;
                double t36451 = ccaa0+t36450+t36447+t36448+t36449;
                v_rho_a[Q] += scale * -t36451*(t36413+t36396*t36399*(t36412-c0p*t36383*t36385*2.0))+rho_a*t36451*(-t36446+t36396*t36399*(t36446-(t36411*1.0/(t36405*t36405)*(b2f*c*t36436*(1.0/3.0)+b4f*t36372*t36437*(2.0/3.0)+b1f*c*t36436*t36438*(1.0/6.0)+b3f*c*t36370*t36436*(1.0/2.0)))/t36408+a1f*c*c0f*t36409*t36436*(2.0/3.0)-a1p*c*c0p*t36436*t36383*(2.0/3.0))+a1p*c*c0p*t36436*t36383*(2.0/3.0))+rho_a*(t36413+t36396*t36399*(t36412-t36413))*(ccaa1*gamma_aa*gcaa*t36422*t36433*(8.0/3.0)+ccaa2*t36431*t36432*t36386*t36387*(1.6E1/3.0)+ccaa4*t36435*t36419*t36388*t36389*(3.2E1/3.0)-ccaa1*1.0/(t36421*t36421)*t36432*t36386*t36387*(8.0/3.0)-ccaa2*1.0/(t36430*t36430)*t36393*t36386*t36387*(gamma_aa*gcaa*t36433*(1.6E1/3.0)+t36432*t36386*t36387*(1.6E1/3.0))-ccaa4*t36390*1.0/(t36418*t36418)*t36388*t36389*(gamma_aa*gcaa*t36433*(3.2E1/3.0)+t36432*t36386*t36387*3.2E1+t36435*t36388*t36389*(3.2E1/3.0)+gamma_aa*gcaa*t36434*t36386*t36387*3.2E1)+ccaa3*gamma_aa*gcaa*t36434*t36427*t36386*t36387*8.0-ccaa3*gamma_aa*gcaa*1.0/(t36426*t36426)*t36392*t36386*t36387*(gamma_aa*gcaa*t36433*8.0+t36432*t36386*t36387*1.6E1+gamma_aa*gcaa*t36434*t36386*t36387*8.0));
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t36454 = 1.0/pow(rho_a,1.0/3.0);
                double t36455 = c*t36454;
                double t36456 = sqrt(t36455);
                double t36457 = pow(t36455,3.0/2.0);
                double t36458 = c*c;
                double t36459 = 1.0/pow(rho_a,2.0/3.0);
                double t36460 = 1.0/c0p;
                double t36461 = b1p*t36456;
                double t36462 = b3p*t36457;
                double t36463 = b4p*t36458*t36459;
                double t36464 = b2p*c*t36454;
                double t36465 = t36461+t36462+t36463+t36464;
                double t36466 = 1.0/t36465;
                double t36467 = t36460*t36466*(1.0/2.0);
                double t36468 = t36467+1.0;
                double t36469 = log(t36468);
                double t36470 = a1p*c*t36454;
                double t36471 = t36470+1.0;
                double t36472 = 1.0/pow(rho_a,8.0/3.0);
                double t36473 = gamma_aa*gamma_aa;
                double t36474 = gcaa*gcaa;
                double t36475 = t36474*t36474;
                double t36476 = 1.0/pow(rho_a,3.2E1/3.0);
                double t36477 = 1.0/pow(rho_a,1.6E1/3.0);
                double t36478 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36479 = gamma_aa*gcaa*t36472;
                double t36480 = t36479+1.0;
                double t36481 = gamma_aa*gcaa*t36472*3.0;
                double t36482 = gamma_aa*gcaa*t36473*t36474*t36478;
                double t36483 = t36473*t36474*t36477*3.0;
                double t36484 = t36481+t36482+t36483+1.0;
                double t36485 = t36473*t36473;
                double t36486 = gamma_aa*gcaa*t36472*4.0;
                double t36487 = gamma_aa*gcaa*t36473*t36474*t36478*4.0;
                double t36488 = t36473*t36474*t36477*6.0;
                double t36489 = t36475*t36476*t36485;
                double t36490 = t36486+t36487+t36488+t36489+1.0;
                double t36491 = gamma_aa*gcaa*t36472*2.0;
                double t36492 = t36473*t36474*t36477;
                double t36493 = t36491+t36492+1.0;
                v_gamma_aa[Q] += scale * -rho_a*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36456+b3f*t36457+b2f*c*t36454+b4f*t36458*t36459))+1.0)*(a1f*c*t36454+1.0)*2.0-c0p*t36471*t36469*2.0))/(two_13*2.0-2.0)+c0p*t36471*t36469*2.0)*((ccaa1*gcaa*t36472)/t36480-ccaa1*gamma_aa*1.0/(t36480*t36480)*t36474*t36477+(ccaa2*gamma_aa*t36474*t36477*2.0)/t36493-ccaa2*t36473*t36474*1.0/(t36493*t36493)*t36477*(gcaa*t36472*2.0+gamma_aa*t36474*t36477*2.0)+(ccaa4*gamma_aa*t36473*t36475*t36476*4.0)/t36490+(ccaa3*gcaa*t36473*t36474*t36478*3.0)/t36484-ccaa4*1.0/(t36490*t36490)*t36475*t36476*t36485*(gcaa*t36472*4.0+gamma_aa*t36474*t36477*1.2E1+gamma_aa*t36473*t36475*t36476*4.0+gcaa*t36473*t36474*t36478*1.2E1)-ccaa3*gamma_aa*gcaa*t36473*t36474*1.0/(t36484*t36484)*t36478*(gcaa*t36472*3.0+gamma_aa*t36474*t36477*6.0+gcaa*t36473*t36474*t36478*3.0));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t36499 = 1.0/pow(rho_a,1.0/3.0);
                double t36500 = c*t36499;
                double t36501 = sqrt(t36500);
                double t36502 = b1f*t36501;
                double t36503 = pow(t36500,3.0/2.0);
                double t36504 = b3f*t36503;
                double t36505 = c*c;
                double t36506 = 1.0/pow(rho_a,2.0/3.0);
                double t36507 = b4f*t36505*t36506;
                double t36508 = b2f*c*t36499;
                double t36509 = t36502+t36504+t36507+t36508;
                double t36510 = 1.0/pow(rho_a,4.0/3.0);
                double t36511 = b1p*t36501;
                double t36512 = b3p*t36503;
                double t36513 = b4p*t36505*t36506;
                double t36514 = b2p*c*t36499;
                double t36515 = t36511+t36512+t36513+t36514;
                double t36516 = 1.0/pow(rho_a,5.0/3.0);
                double t36517 = 1.0/sqrt(t36500);
                double t36518 = 1.0/c0f;
                double t36519 = 1.0/t36509;
                double t36520 = t36518*t36519*(1.0/2.0);
                double t36521 = t36520+1.0;
                double t36522 = 1.0/c0p;
                double t36523 = 1.0/t36515;
                double t36524 = t36522*t36523*(1.0/2.0);
                double t36525 = t36524+1.0;
                double t36526 = a1p*c*t36499;
                double t36527 = t36526+1.0;
                double t36528 = 1.0/t36525;
                double t36529 = 1.0/(t36515*t36515);
                double t36530 = b4p*t36505*t36516*(2.0/3.0);
                double t36531 = b2p*c*t36510*(1.0/3.0);
                double t36532 = b1p*c*t36510*t36517*(1.0/6.0);
                double t36533 = b3p*c*t36501*t36510*(1.0/2.0);
                double t36534 = t36530+t36531+t36532+t36533;
                double t36535 = t36534*t36527*t36528*t36529;
                double t36536 = log(t36525);
                double t36537 = gamma_aa*gamma_aa;
                double t36538 = gcaa*gcaa;
                double t36539 = t36537*t36537;
                double t36540 = t36538*t36538;
                double t36541 = 1.0/pow(rho_a,3.2E1/3.0);
                double t36542 = 1.0/pow(rho_a,8.0/3.0);
                double t36543 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36544 = 1.0/pow(rho_a,1.6E1/3.0);
                double t36545 = pow(2.0,1.0/3.0);
                double t36546 = t36545*2.0;
                double t36547 = t36546-2.0;
                double t36548 = two_13*2.0;
                double t36549 = t36548-2.0;
                double t36550 = 1.0/t36549;
                double t36551 = log(t36521);
                double t36552 = a1f*c*t36499;
                double t36553 = t36552+1.0;
                double t36554 = gamma_aa*gcaa*t36542*4.0;
                double t36555 = gamma_aa*gcaa*t36543*t36537*t36538*4.0;
                double t36556 = t36544*t36537*t36538*6.0;
                double t36557 = t36540*t36541*t36539;
                double t36558 = t36554+t36555+t36556+t36557+1.0;
                double t36559 = 1.0/t36558;
                double t36560 = gamma_aa*gcaa*t36542;
                double t36561 = t36560+1.0;
                double t36562 = 1.0/t36561;
                double t36563 = gamma_aa*gcaa*t36542*3.0;
                double t36564 = gamma_aa*gcaa*t36543*t36537*t36538;
                double t36565 = t36544*t36537*t36538*3.0;
                double t36566 = t36563+t36564+t36565+1.0;
                double t36567 = 1.0/t36566;
                double t36568 = gamma_aa*gcaa*t36542*2.0;
                double t36569 = t36544*t36537*t36538;
                double t36570 = t36568+t36569+1.0;
                double t36571 = 1.0/t36570;
                double t36572 = 1.0/pow(rho_a,1.9E1/3.0);
                double t36573 = 1.0/pow(rho_a,1.1E1/3.0);
                double t36574 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36575 = 1.0/pow(rho_a,3.5E1/3.0);
                double t36576 = 1.0/t36521;
                double t36577 = 1.0/(t36509*t36509);
                double t36578 = b4f*t36505*t36516*(2.0/3.0);
                double t36579 = b2f*c*t36510*(1.0/3.0);
                double t36580 = b1f*c*t36510*t36517*(1.0/6.0);
                double t36581 = b3f*c*t36501*t36510*(1.0/2.0);
                double t36582 = t36580+t36581+t36578+t36579;
                double t36583 = a1f*c*c0f*t36510*t36551*(2.0/3.0);
                double t36584 = a1p*c*c0p*t36510*t36536*(2.0/3.0);
                double t36585 = ccaa4*t36540*t36539*t36575*t36559*(3.2E1/3.0);
                double t36586 = ccaa1*gamma_aa*gcaa*t36562*t36573*(8.0/3.0);
                double t36587 = ccaa3*gamma_aa*gcaa*t36537*t36538*t36574*t36567*8.0;
                double t36588 = ccaa2*t36571*t36572*t36537*t36538*(1.6E1/3.0);
                double t36589 = 1.0/(t36561*t36561);
                double t36590 = gamma_aa*gcaa*t36573*8.0;
                double t36591 = gamma_aa*gcaa*t36537*t36538*t36574*8.0;
                double t36592 = t36572*t36537*t36538*1.6E1;
                double t36593 = t36590+t36591+t36592;
                double t36594 = 1.0/(t36566*t36566);
                double t36595 = gamma_aa*gcaa*t36573*(3.2E1/3.0);
                double t36596 = gamma_aa*gcaa*t36537*t36538*t36574*3.2E1;
                double t36597 = t36572*t36537*t36538*3.2E1;
                double t36598 = t36540*t36539*t36575*(3.2E1/3.0);
                double t36599 = t36595+t36596+t36597+t36598;
                double t36600 = 1.0/(t36558*t36558);
                double t36601 = gamma_aa*gcaa*t36573*(1.6E1/3.0);
                double t36602 = t36572*t36537*t36538*(1.6E1/3.0);
                double t36603 = t36601+t36602;
                double t36604 = 1.0/(t36570*t36570);
                double t36605 = t36585+t36586+t36587+t36588-ccaa1*t36572*t36537*t36538*t36589*(8.0/3.0)-ccaa2*t36603*t36604*t36544*t36537*t36538-ccaa4*t36600*t36540*t36541*t36539*t36599-ccaa3*gamma_aa*gcaa*t36543*t36537*t36538*t36593*t36594;
                double t36606 = c0f*t36551*t36553*2.0;
                double t36607 = c0p*t36527*t36536*2.0;
                double t36608 = 1.0/pow(rho_a,1.0E1);
                double t36609 = 1.0/pow(rho_a,2.2E1/3.0);
                double t36610 = 1.0/pow(rho_a,1.4E1/3.0);
                double t36611 = 1.0/pow(rho_a,3.8E1/3.0);
                double t36612 = ccaa4*t36540*t36541*t36539*t36559;
                double t36613 = ccaa1*gamma_aa*gcaa*t36542*t36562;
                double t36614 = ccaa3*gamma_aa*gcaa*t36543*t36537*t36538*t36567;
                double t36615 = ccaa2*t36544*t36571*t36537*t36538;
                double t36616 = ccaa0+t36612+t36613+t36614+t36615;
                double t36617 = 1.0/pow(rho_a,7.0/3.0);
                double t36618 = 1.0/pow(t36500,3.0/2.0);
                double t36619 = t36582*t36582;
                double t36620 = t36534*t36534;
                double t36621 = 1.0/(t36515*t36515*t36515);
                double t36622 = t36620*t36621*t36527*t36528*2.0;
                double t36623 = b4p*t36505*t36542*(1.0E1/9.0);
                double t36624 = b2p*c*t36617*(4.0/9.0);
                double t36625 = b3p*t36505*t36542*t36517*(1.0/1.2E1);
                double t36626 = b1p*c*t36517*t36617*(2.0/9.0);
                double t36627 = b3p*c*t36501*t36617*(2.0/3.0);
                double t36628 = t36623+t36624+t36625+t36626+t36627-b1p*t36505*t36542*t36618*(1.0/3.6E1);
                double t36629 = 1.0/(t36525*t36525);
                double t36630 = 1.0/(t36515*t36515*t36515*t36515);
                double t36631 = a1p*c*c0p*t36536*t36617*(8.0/9.0);
                v_rho_a_rho_a[Q] += scale * t36605*(t36607+t36550*t36547*(t36606-c0p*t36527*t36536*2.0))*2.0+t36616*(-t36535+t36584+t36550*t36547*(t36535+t36583-t36553*t36582*t36576*t36577-a1p*c*c0p*t36510*t36536*(2.0/3.0)))*2.0+rho_a*t36616*(-t36622-t36631+t36550*t36547*(t36622+t36631-t36527*t36528*t36529*t36628-t36553*1.0/(t36509*t36509*t36509)*t36619*t36576*2.0+t36553*t36576*t36577*(b2f*c*t36617*(4.0/9.0)+b4f*t36505*t36542*(1.0E1/9.0)+b1f*c*t36517*t36617*(2.0/9.0)+b3f*c*t36501*t36617*(2.0/3.0)-b1f*t36505*t36542*t36618*(1.0/3.6E1)+b3f*t36505*t36542*t36517*(1.0/1.2E1))+1.0/(t36521*t36521)*t36553*1.0/(t36509*t36509*t36509*t36509)*t36518*t36619*(1.0/2.0)-a1f*c*c0f*t36551*t36617*(8.0/9.0)-t36620*t36522*t36630*t36527*t36629*(1.0/2.0)+a1f*c*t36510*t36582*t36576*t36577*(2.0/3.0)-a1p*c*t36510*t36534*t36528*t36529*(2.0/3.0))+t36527*t36528*t36529*t36628+t36620*t36522*t36630*t36527*t36629*(1.0/2.0)+a1p*c*t36510*t36534*t36528*t36529*(2.0/3.0))-rho_a*t36605*(-t36535+t36584+t36550*t36547*(t36535+t36583-t36584-t36553*t36582*t36576*t36577))*2.0-rho_a*(t36607+t36550*t36547*(t36606-t36607))*(ccaa1*gamma_aa*gcaa*t36610*t36562*(8.8E1/9.0)+ccaa4*t36611*t36540*t36539*t36559*(1.12E3/9.0)+ccaa2*t36571*t36537*t36609*t36538*(3.04E2/9.0)-ccaa1*t36537*t36609*t36538*t36589*2.4E1-ccaa2*t36603*t36604*t36572*t36537*t36538*(3.2E1/3.0)-ccaa4*t36600*t36540*t36539*t36575*t36599*(6.4E1/3.0)-ccaa2*t36604*t36544*t36537*t36538*(gamma_aa*gcaa*t36610*(1.76E2/9.0)+t36537*t36609*t36538*(3.04E2/9.0))-ccaa4*t36600*t36540*t36541*t36539*(gamma_aa*gcaa*t36610*(3.52E2/9.0)+t36611*t36540*t36539*(1.12E3/9.0)+t36537*t36609*t36538*(6.08E2/3.0)+gamma_aa*gcaa*t36608*t36537*t36538*2.88E2)+ccaa2*(t36603*t36603)*1.0/(t36570*t36570*t36570)*t36544*t36537*t36538*2.0+ccaa4*t36540*t36541*t36539*1.0/(t36558*t36558*t36558)*(t36599*t36599)*2.0+ccaa3*gamma_aa*gcaa*t36608*t36537*t36538*t36567*7.2E1+ccaa1*gamma_aa*gcaa*1.0/(t36561*t36561*t36561)*t36608*t36537*t36538*(1.28E2/9.0)+ccaa3*gamma_aa*gcaa*t36543*t36537*t36538*1.0/(t36566*t36566*t36566)*(t36593*t36593)*2.0-ccaa3*gamma_aa*gcaa*t36543*t36537*t36538*t36594*(gamma_aa*gcaa*t36610*(8.8E1/3.0)+t36537*t36609*t36538*(3.04E2/3.0)+gamma_aa*gcaa*t36608*t36537*t36538*7.2E1)-ccaa3*gamma_aa*gcaa*t36537*t36538*t36574*t36593*t36594*1.6E1);
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t36753 = 1.0/pow(rho_a,1.0/3.0);
                double t36754 = c*t36753;
                double t36755 = sqrt(t36754);
                double t36756 = pow(t36754,3.0/2.0);
                double t36757 = c*c;
                double t36758 = 1.0/pow(rho_a,2.0/3.0);
                double t36759 = 1.0/c0p;
                double t36760 = b1p*t36755;
                double t36761 = b3p*t36756;
                double t36762 = b4p*t36757*t36758;
                double t36763 = b2p*c*t36753;
                double t36764 = t36760+t36761+t36762+t36763;
                double t36765 = 1.0/t36764;
                double t36766 = t36765*t36759*(1.0/2.0);
                double t36767 = t36766+1.0;
                double t36768 = log(t36767);
                double t36769 = a1p*c*t36753;
                double t36770 = t36769+1.0;
                double t36771 = gcaa*gcaa;
                double t36772 = 1.0/pow(rho_a,1.6E1/3.0);
                double t36773 = 1.0/pow(rho_a,8.0/3.0);
                double t36774 = gamma_aa*gamma_aa;
                double t36775 = t36771*t36771;
                double t36776 = 1.0/pow(rho_a,3.2E1/3.0);
                double t36777 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36778 = gamma_aa*gcaa*t36773;
                double t36779 = t36778+1.0;
                double t36780 = gamma_aa*gcaa*t36773*2.0;
                double t36781 = t36771*t36772*t36774;
                double t36782 = t36780+t36781+1.0;
                double t36783 = gamma_aa*gcaa*t36773*3.0;
                double t36784 = gamma_aa*gcaa*t36771*t36774*t36777;
                double t36785 = t36771*t36772*t36774*3.0;
                double t36786 = t36783+t36784+t36785+1.0;
                double t36787 = t36774*t36774;
                double t36803 = gcaa*t36773*4.0;
                double t36804 = gamma_aa*t36771*t36772*1.2E1;
                double t36805 = gcaa*t36771*t36774*t36777*1.2E1;
                double t36806 = gamma_aa*t36774*t36775*t36776*4.0;
                double t36788 = t36803+t36804+t36805+t36806;
                double t36789 = gamma_aa*gcaa*t36773*4.0;
                double t36790 = gamma_aa*gcaa*t36771*t36774*t36777*4.0;
                double t36791 = t36771*t36772*t36774*6.0;
                double t36792 = t36775*t36776*t36787;
                double t36793 = t36790+t36791+t36792+t36789+1.0;
                double t36796 = gcaa*t36773*2.0;
                double t36797 = gamma_aa*t36771*t36772*2.0;
                double t36794 = t36796+t36797;
                double t36795 = 1.0/(t36786*t36786);
                double t36798 = 1.0/(t36782*t36782);
                double t36799 = gcaa*t36773*3.0;
                double t36800 = gamma_aa*t36771*t36772*6.0;
                double t36801 = gcaa*t36771*t36774*t36777*3.0;
                double t36802 = t36800+t36801+t36799;
                double t36807 = 1.0/(t36793*t36793);
                v_gamma_aa_gamma_aa[Q] += scale * -rho_a*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t36755+b3f*t36756+b2f*c*t36753+b4f*t36757*t36758))+1.0)*(a1f*c*t36753+1.0)*2.0-c0p*t36770*t36768*2.0))/(two_13*2.0-2.0)+c0p*t36770*t36768*2.0)*((ccaa2*t36771*t36772*2.0)/t36782-ccaa1*t36771*t36772*1.0/(t36779*t36779)*2.0-ccaa2*t36774*t36775*t36776*t36798*2.0+(ccaa4*t36774*t36775*t36776*1.2E1)/t36793-ccaa4*t36807*t36775*t36776*t36787*(t36771*t36772*1.2E1+t36774*t36775*t36776*1.2E1+gamma_aa*gcaa*t36771*t36777*2.4E1)+(ccaa3*gamma_aa*gcaa*t36771*t36777*6.0)/t36786+ccaa1*gamma_aa*gcaa*t36771*t36777*1.0/(t36779*t36779*t36779)*2.0+ccaa2*t36771*t36772*1.0/(t36782*t36782*t36782)*t36774*(t36794*t36794)*2.0+ccaa4*t36775*1.0/(t36793*t36793*t36793)*t36776*t36787*(t36788*t36788)*2.0-ccaa2*gamma_aa*t36771*t36772*t36794*t36798*4.0-ccaa4*gamma_aa*t36807*t36774*t36775*t36776*t36788*8.0-ccaa3*gcaa*t36802*t36771*t36774*t36777*t36795*6.0-ccaa3*gamma_aa*gcaa*t36771*t36774*t36777*t36795*(t36771*t36772*6.0+gamma_aa*gcaa*t36771*t36777*6.0)+ccaa3*gamma_aa*gcaa*(t36802*t36802)*t36771*t36774*t36777*1.0/(t36786*t36786*t36786)*2.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t36635 = 1.0/pow(rho_a,1.0/3.0);
                double t36636 = c*t36635;
                double t36637 = sqrt(t36636);
                double t36638 = pow(t36636,3.0/2.0);
                double t36639 = c*c;
                double t36640 = 1.0/pow(rho_a,2.0/3.0);
                double t36641 = 1.0/c0p;
                double t36642 = b1p*t36637;
                double t36643 = b3p*t36638;
                double t36644 = b4p*t36640*t36639;
                double t36645 = b2p*c*t36635;
                double t36646 = t36642+t36643+t36644+t36645;
                double t36647 = 1.0/t36646;
                double t36648 = t36641*t36647*(1.0/2.0);
                double t36649 = t36648+1.0;
                double t36650 = log(t36649);
                double t36651 = a1p*c*t36635;
                double t36652 = t36651+1.0;
                double t36653 = 1.0/pow(rho_a,8.0/3.0);
                double t36654 = gamma_aa*gamma_aa;
                double t36655 = gcaa*gcaa;
                double t36656 = t36655*t36655;
                double t36657 = 1.0/pow(rho_a,3.2E1/3.0);
                double t36658 = 1.0/pow(rho_a,1.6E1/3.0);
                double t36659 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36660 = gamma_aa*gcaa*t36653;
                double t36661 = t36660+1.0;
                double t36662 = gamma_aa*gcaa*t36653*3.0;
                double t36663 = gamma_aa*gcaa*t36654*t36655*t36659;
                double t36664 = t36654*t36655*t36658*3.0;
                double t36665 = t36662+t36663+t36664+1.0;
                double t36666 = t36654*t36654;
                double t36667 = gamma_aa*gcaa*t36653*4.0;
                double t36668 = gamma_aa*gcaa*t36654*t36655*t36659*4.0;
                double t36669 = t36654*t36655*t36658*6.0;
                double t36670 = t36656*t36657*t36666;
                double t36671 = t36670+t36667+t36668+t36669+1.0;
                double t36672 = gamma_aa*gcaa*t36653*2.0;
                double t36673 = t36654*t36655*t36658;
                double t36674 = t36672+t36673+1.0;
                double t36675 = pow(2.0,1.0/3.0);
                double t36676 = t36675*2.0;
                double t36677 = t36676-2.0;
                double t36678 = two_13*2.0;
                double t36679 = t36678-2.0;
                double t36680 = 1.0/t36679;
                double t36681 = 1.0/c0f;
                double t36682 = b1f*t36637;
                double t36683 = b3f*t36638;
                double t36684 = b4f*t36640*t36639;
                double t36685 = b2f*c*t36635;
                double t36686 = t36682+t36683+t36684+t36685;
                double t36687 = 1.0/t36686;
                double t36688 = t36681*t36687*(1.0/2.0);
                double t36689 = t36688+1.0;
                double t36690 = log(t36689);
                double t36691 = a1f*c*t36635;
                double t36692 = t36691+1.0;
                double t36693 = c0f*t36690*t36692*2.0;
                double t36694 = c0p*t36650*t36652*2.0;
                double t36695 = 1.0/t36661;
                double t36696 = 1.0/t36671;
                double t36697 = 1.0/t36674;
                double t36698 = 1.0/t36665;
                double t36699 = 1.0/pow(rho_a,1.9E1/3.0);
                double t36700 = 1.0/(t36661*t36661);
                double t36701 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t36702 = 1.0/pow(rho_a,1.1E1/3.0);
                double t36703 = 1.0/(t36665*t36665);
                double t36704 = 1.0/(t36674*t36674);
                double t36705 = gcaa*t36653*3.0;
                double t36706 = gamma_aa*t36655*t36658*6.0;
                double t36707 = gcaa*t36654*t36655*t36659*3.0;
                double t36708 = t36705+t36706+t36707;
                double t36709 = 1.0/pow(rho_a,3.5E1/3.0);
                double t36710 = 1.0/(t36671*t36671);
                double t36711 = gcaa*t36653*4.0;
                double t36712 = gamma_aa*t36655*t36658*1.2E1;
                double t36713 = gcaa*t36654*t36655*t36659*1.2E1;
                double t36714 = gamma_aa*t36654*t36656*t36657*4.0;
                double t36715 = t36711+t36712+t36713+t36714;
                double t36716 = gcaa*t36653*2.0;
                double t36717 = gamma_aa*t36655*t36658*2.0;
                double t36718 = t36716+t36717;
                double t36719 = gamma_aa*gcaa*t36702*(1.6E1/3.0);
                double t36720 = t36654*t36655*t36699*(1.6E1/3.0);
                double t36721 = t36720+t36719;
                double t36722 = gamma_aa*gcaa*t36702*8.0;
                double t36723 = gamma_aa*gcaa*t36701*t36654*t36655*8.0;
                double t36724 = t36654*t36655*t36699*1.6E1;
                double t36725 = t36722+t36723+t36724;
                double t36726 = gamma_aa*gcaa*t36702*(3.2E1/3.0);
                double t36727 = gamma_aa*gcaa*t36701*t36654*t36655*3.2E1;
                double t36728 = t36654*t36655*t36699*3.2E1;
                double t36729 = t36709*t36656*t36666*(3.2E1/3.0);
                double t36730 = t36726+t36727+t36728+t36729;
                double t36731 = 1.0/pow(rho_a,4.0/3.0);
                double t36732 = 1.0/pow(rho_a,5.0/3.0);
                double t36733 = 1.0/sqrt(t36636);
                double t36734 = 1.0/t36649;
                double t36735 = 1.0/(t36646*t36646);
                double t36736 = b4p*t36732*t36639*(2.0/3.0);
                double t36737 = b2p*c*t36731*(1.0/3.0);
                double t36738 = b1p*c*t36731*t36733*(1.0/6.0);
                double t36739 = b3p*c*t36731*t36637*(1.0/2.0);
                double t36740 = t36736+t36737+t36738+t36739;
                double t36741 = t36740*t36652*t36734*t36735;
                double t36742 = ccaa1*gcaa*t36653*t36695;
                double t36743 = ccaa4*gamma_aa*t36654*t36656*t36657*t36696*4.0;
                double t36744 = ccaa2*gamma_aa*t36655*t36658*t36697*2.0;
                double t36745 = ccaa3*gcaa*t36654*t36655*t36659*t36698*3.0;
                double t36746 = t36742+t36743+t36744+t36745-ccaa1*gamma_aa*t36700*t36655*t36658-ccaa4*t36710*t36715*t36656*t36657*t36666-ccaa2*t36704*t36654*t36655*t36718*t36658-ccaa3*gamma_aa*gcaa*t36703*t36654*t36708*t36655*t36659;
                v_rho_a_gamma_aa[Q] += scale * -t36746*(t36694+t36680*t36677*(t36693-c0p*t36650*t36652*2.0))+rho_a*t36746*(-t36741+t36680*t36677*(t36741-(t36692*1.0/(t36686*t36686)*(b2f*c*t36731*(1.0/3.0)+b4f*t36732*t36639*(2.0/3.0)+b1f*c*t36731*t36733*(1.0/6.0)+b3f*c*t36731*t36637*(1.0/2.0)))/t36689+a1f*c*c0f*t36731*t36690*(2.0/3.0)-a1p*c*c0p*t36650*t36731*(2.0/3.0))+a1p*c*c0p*t36650*t36731*(2.0/3.0))-rho_a*(t36694+t36680*t36677*(t36693-t36694))*(ccaa1*gcaa*t36702*t36695*(-8.0/3.0)+ccaa1*gamma_aa*t36700*t36655*t36699*8.0-ccaa2*gamma_aa*t36655*t36697*t36699*(3.2E1/3.0)+ccaa4*t36710*t36715*t36709*t36656*t36666*(3.2E1/3.0)+ccaa2*t36704*t36654*t36655*t36718*t36699*(1.6E1/3.0)+ccaa4*t36710*t36656*t36657*t36666*(gcaa*t36702*(3.2E1/3.0)+gamma_aa*t36655*t36699*6.4E1+gamma_aa*t36654*t36709*t36656*(1.28E2/3.0)+gcaa*t36701*t36654*t36655*9.6E1)-ccaa1*gcaa*t36701*1.0/(t36661*t36661*t36661)*t36654*t36655*(1.6E1/3.0)+ccaa2*t36704*t36654*t36655*t36658*(gcaa*t36702*(1.6E1/3.0)+gamma_aa*t36655*t36699*(3.2E1/3.0))+ccaa2*gamma_aa*t36721*t36704*t36655*t36658*2.0-ccaa4*gamma_aa*t36654*t36709*t36656*t36696*(1.28E2/3.0)-ccaa3*gcaa*t36701*t36654*t36655*t36698*2.4E1+ccaa4*gamma_aa*t36710*t36730*t36654*t36656*t36657*4.0+ccaa3*gcaa*t36703*t36725*t36654*t36655*t36659*3.0-ccaa4*t36730*t36715*1.0/(t36671*t36671*t36671)*t36656*t36657*t36666*2.0-ccaa2*t36721*t36654*t36655*t36718*1.0/(t36674*t36674*t36674)*t36658*2.0+ccaa3*gamma_aa*gcaa*t36703*t36654*t36655*t36659*(gcaa*t36702*8.0+gamma_aa*t36655*t36699*3.2E1+gcaa*t36701*t36654*t36655*2.4E1)+ccaa3*gamma_aa*gcaa*t36701*t36703*t36654*t36708*t36655*8.0-ccaa3*gamma_aa*gcaa*t36725*t36654*t36708*t36655*1.0/(t36665*t36665*t36665)*t36659*2.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t32653 = 1.0/pow(rho_a,1.0/3.0);
                double t32654 = c*t32653;
                double t32655 = sqrt(t32654);
                double t32656 = pow(t32654,3.0/2.0);
                double t32657 = c*c;
                double t32658 = 1.0/pow(rho_a,2.0/3.0);
                double t32659 = 1.0/c0p;
                double t32660 = b1p*t32655;
                double t32661 = b3p*t32656;
                double t32662 = b4p*t32657*t32658;
                double t32663 = b2p*c*t32653;
                double t32664 = t32660+t32661+t32662+t32663;
                double t32665 = 1.0/t32664;
                double t32666 = t32665*t32659*(1.0/2.0);
                double t32667 = t32666+1.0;
                double t32668 = log(t32667);
                double t32669 = a1p*c*t32653;
                double t32670 = t32669+1.0;
                double t32671 = pow(2.0,1.0/3.0);
                double t32672 = t32671*2.0;
                double t32673 = t32672-2.0;
                double t32674 = two_13*2.0;
                double t32675 = t32674-2.0;
                double t32676 = 1.0/t32675;
                double t32677 = 1.0/c0f;
                double t32678 = 1.0/pow(rho_b,1.0/3.0);
                double t32679 = c*t32678;
                double t32680 = sqrt(t32679);
                double t32681 = pow(t32679,3.0/2.0);
                double t32682 = 1.0/pow(rho_b,2.0/3.0);
                double t32683 = b1p*t32680;
                double t32684 = b3p*t32681;
                double t32685 = b4p*t32682*t32657;
                double t32686 = b2p*c*t32678;
                double t32687 = t32683+t32684+t32685+t32686;
                double t32688 = 1.0/t32687;
                double t32689 = t32659*t32688*(1.0/2.0);
                double t32690 = t32689+1.0;
                double t32691 = log(t32690);
                double t32692 = a1p*c*t32678;
                double t32693 = t32692+1.0;
                double t32694 = c0p*t32691*t32693*2.0;
                double t32695 = rho_a+rho_b;
                double t32696 = 1.0/pow(t32695,1.0/3.0);
                double t32697 = c*t32696;
                double t32698 = sqrt(t32697);
                double t32699 = pow(t32697,3.0/2.0);
                double t32700 = 1.0/pow(t32695,2.0/3.0);
                double t32701 = b1p*t32698;
                double t32702 = b3p*t32699;
                double t32703 = b4p*t32700*t32657;
                double t32704 = b2p*c*t32696;
                double t32705 = t32701+t32702+t32703+t32704;
                double t32706 = 1.0/t32705;
                double t32707 = t32706*t32659*(1.0/2.0);
                double t32708 = t32707+1.0;
                double t32709 = log(t32708);
                double t32710 = a1p*c*t32696;
                double t32711 = t32710+1.0;
                double t32712 = c0p*t32711*t32709*2.0;
                double t32713 = rho_a-rho_b;
                double t32714 = t32713*t32713;
                double t32715 = 1.0/t32695;
                double t32716 = t32713*t32715;
                double t32717 = 1.0/(t32695*t32695*t32695*t32695);
                double t32718 = t32714*t32714;
                double t32719 = t32716+1.0;
                double t32720 = pow(t32719,4.0/3.0);
                double t32721 = -t32716+1.0;
                double t32722 = pow(t32721,4.0/3.0);
                double t32723 = t32720+t32722-2.0;
                double t32726 = 1.0/pow(rho_a,8.0/3.0);
                double t32727 = gamma_aa*t32726*(1.0/2.0);
                double t32728 = 1.0/pow(rho_b,8.0/3.0);
                double t32729 = gamma_bb*t32728*(1.0/2.0);
                double t32724 = t32727+t32729;
                double t32725 = gcab*gcab;
                double t32730 = t32724*t32724;
                double t32731 = t32725*t32725;
                double t32732 = t32730*t32730;
                double t32733 = c0p*t32670*t32668*2.0;
                double t32734 = b1f*t32655;
                double t32735 = b3f*t32656;
                double t32736 = b4f*t32657*t32658;
                double t32737 = b2f*c*t32653;
                double t32738 = t32734+t32735+t32736+t32737;
                double t32739 = 1.0/t32738;
                double t32740 = t32739*t32677*(1.0/2.0);
                double t32741 = t32740+1.0;
                double t32742 = log(t32741);
                double t32743 = a1f*c*t32653;
                double t32744 = t32743+1.0;
                double t32745 = t32733-c0f*t32742*t32744*2.0;
                double t32746 = t32733-t32673*t32745*t32676;
                double t32747 = gamma_aa*gamma_aa;
                double t32748 = gcaa*gcaa;
                double t32749 = t32747*t32747;
                double t32750 = t32748*t32748;
                double t32751 = 1.0/pow(rho_a,3.2E1/3.0);
                double t32752 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t32753 = 1.0/pow(rho_a,1.6E1/3.0);
                double t32754 = b1f*t32680;
                double t32755 = b3f*t32681;
                double t32756 = b4f*t32682*t32657;
                double t32757 = b2f*c*t32678;
                double t32758 = t32754+t32755+t32756+t32757;
                double t32759 = 1.0/t32758;
                double t32760 = t32677*t32759*(1.0/2.0);
                double t32761 = t32760+1.0;
                double t32762 = log(t32761);
                double t32763 = a1f*c*t32678;
                double t32764 = t32763+1.0;
                double t32765 = t32694-c0f*t32762*t32764*2.0;
                double t32766 = t32694-t32673*t32765*t32676;
                double t32767 = gamma_bb*gamma_bb;
                double t32768 = t32767*t32767;
                double t32769 = 1.0/pow(rho_b,3.2E1/3.0);
                double t32770 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t32771 = 1.0/pow(rho_b,1.6E1/3.0);
                v[Q] += scale * (rho_a*t32746+rho_b*t32766-t32695*(t32712-t32723*t32717*t32718*t32676*(t32712-c0f*log((t32677*(1.0/2.0))/(b1f*t32698+b3f*t32699+b2f*c*t32696+b4f*t32700*t32657)+1.0)*(a1f*c*t32696+1.0)*2.0)+(Aa*t32723*t32676*log((1.0/2.0)/(Aa*(b1a*t32698+b3a*t32699+b2a*c*t32696+b4a*t32700*t32657))+1.0)*(t32717*t32718-1.0)*(a1a*c*t32696+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t32731*t32732)/(gcab*t32724*4.0+t32731*t32732+t32730*t32725*6.0+gcab*t32730*t32724*t32725*4.0+1.0)+(ccab1*gcab*t32724)/(gcab*t32724+1.0)+(ccab2*t32730*t32725)/(gcab*t32724*2.0+t32730*t32725+1.0)+(ccab3*gcab*t32730*t32724*t32725)/(gcab*t32724*3.0+t32730*t32725*3.0+gcab*t32730*t32724*t32725+1.0))-rho_a*t32746*(ccaa0+(ccaa2*t32753*t32747*t32748)/(gamma_aa*gcaa*t32726*2.0+t32753*t32747*t32748+1.0)+(ccaa1*gamma_aa*gcaa*t32726)/(gamma_aa*gcaa*t32726+1.0)+(ccaa4*t32750*t32751*t32749)/(gamma_aa*gcaa*t32726*4.0+t32750*t32751*t32749+t32753*t32747*t32748*6.0+gamma_aa*gcaa*t32752*t32747*t32748*4.0+1.0)+(ccaa3*gamma_aa*gcaa*t32752*t32747*t32748)/(gamma_aa*gcaa*t32726*3.0+t32753*t32747*t32748*3.0+gamma_aa*gcaa*t32752*t32747*t32748+1.0))-rho_b*t32766*(ccaa0+(ccaa2*t32771*t32748*t32767)/(gamma_bb*gcaa*t32728*2.0+t32771*t32748*t32767+1.0)+(ccaa1*gamma_bb*gcaa*t32728)/(gamma_bb*gcaa*t32728+1.0)+(ccaa4*t32750*t32768*t32769)/(gamma_bb*gcaa*t32728*4.0+t32771*t32748*t32767*6.0+t32750*t32768*t32769+gamma_bb*gcaa*t32770*t32748*t32767*4.0+1.0)+(ccaa3*gamma_bb*gcaa*t32770*t32748*t32767)/(gamma_bb*gcaa*t32728*3.0+t32771*t32748*t32767*3.0+gamma_bb*gcaa*t32770*t32748*t32767+1.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t32773 = 1.0/pow(rho_a,1.0/3.0);
                double t32774 = c*t32773;
                double t32775 = sqrt(t32774);
                double t32776 = pow(t32774,3.0/2.0);
                double t32777 = c*c;
                double t32778 = 1.0/pow(rho_a,2.0/3.0);
                double t32779 = 1.0/c0p;
                double t32780 = b1p*t32775;
                double t32781 = b3p*t32776;
                double t32782 = b4p*t32777*t32778;
                double t32783 = b2p*c*t32773;
                double t32784 = t32780+t32781+t32782+t32783;
                double t32785 = 1.0/t32784;
                double t32786 = t32785*t32779*(1.0/2.0);
                double t32787 = t32786+1.0;
                double t32788 = log(t32787);
                double t32789 = a1p*c*t32773;
                double t32790 = t32789+1.0;
                double t32791 = gamma_aa*gamma_aa;
                double t32792 = gcaa*gcaa;
                double t32793 = t32791*t32791;
                double t32794 = t32792*t32792;
                double t32795 = 1.0/pow(rho_a,3.2E1/3.0);
                double t32796 = 1.0/pow(rho_a,8.0/3.0);
                double t32797 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t32798 = 1.0/pow(rho_a,1.6E1/3.0);
                double t32799 = pow(2.0,1.0/3.0);
                double t32800 = t32799*2.0;
                double t32801 = t32800-2.0;
                double t32802 = two_13*2.0;
                double t32803 = t32802-2.0;
                double t32804 = 1.0/t32803;
                double t32805 = 1.0/c0f;
                double t32806 = b1f*t32775;
                double t32807 = b3f*t32776;
                double t32808 = b4f*t32777*t32778;
                double t32809 = b2f*c*t32773;
                double t32810 = t32806+t32807+t32808+t32809;
                double t32811 = 1.0/t32810;
                double t32812 = t32811*t32805*(1.0/2.0);
                double t32813 = t32812+1.0;
                double t32814 = log(t32813);
                double t32815 = a1f*c*t32773;
                double t32816 = t32815+1.0;
                double t32817 = c0f*t32814*t32816*2.0;
                double t32818 = c0p*t32790*t32788*2.0;
                double t32819 = 1.0/pow(rho_b,1.0/3.0);
                double t32820 = c*t32819;
                double t32821 = sqrt(t32820);
                double t32822 = pow(t32820,3.0/2.0);
                double t32823 = 1.0/pow(rho_b,2.0/3.0);
                double t32824 = b1p*t32821;
                double t32825 = b3p*t32822;
                double t32826 = b4p*t32823*t32777;
                double t32827 = b2p*c*t32819;
                double t32828 = t32824+t32825+t32826+t32827;
                double t32829 = 1.0/t32828;
                double t32830 = t32829*t32779*(1.0/2.0);
                double t32831 = t32830+1.0;
                double t32832 = log(t32831);
                double t32833 = a1p*c*t32819;
                double t32834 = t32833+1.0;
                double t32835 = c0p*t32832*t32834*2.0;
                double t32836 = rho_a+rho_b;
                double t32837 = 1.0/pow(t32836,1.0/3.0);
                double t32838 = c*t32837;
                double t32839 = sqrt(t32838);
                double t32840 = pow(t32838,3.0/2.0);
                double t32841 = 1.0/pow(t32836,2.0/3.0);
                double t32842 = b1p*t32839;
                double t32843 = b3p*t32840;
                double t32844 = b4p*t32841*t32777;
                double t32845 = b2p*c*t32837;
                double t32846 = t32842+t32843+t32844+t32845;
                double t32847 = 1.0/t32846;
                double t32848 = t32847*t32779*(1.0/2.0);
                double t32849 = t32848+1.0;
                double t32850 = log(t32849);
                double t32851 = a1p*c*t32837;
                double t32852 = t32851+1.0;
                double t32853 = c0p*t32850*t32852*2.0;
                double t32854 = rho_a-rho_b;
                double t32855 = t32854*t32854;
                double t32856 = 1.0/t32836;
                double t32857 = t32854*t32856;
                double t32858 = 1.0/(t32836*t32836*t32836*t32836);
                double t32859 = t32855*t32855;
                double t32860 = t32857+1.0;
                double t32861 = pow(t32860,4.0/3.0);
                double t32862 = -t32857+1.0;
                double t32863 = pow(t32862,4.0/3.0);
                double t32864 = t32861+t32863-2.0;
                double t32865 = gcab*gcab;
                double t32869 = gamma_aa*t32796*(1.0/2.0);
                double t32870 = 1.0/pow(rho_b,8.0/3.0);
                double t32871 = gamma_bb*t32870*(1.0/2.0);
                double t32866 = t32871+t32869;
                double t32867 = t32866*t32866;
                double t32868 = 1.0/pow(rho_a,1.1E1/3.0);
                double t32872 = t32865*t32865;
                double t32873 = t32867*t32867;
                double t32874 = t32865*t32867*6.0;
                double t32875 = gcab*t32865*t32866*t32867*4.0;
                double t32876 = t32872*t32873;
                double t32877 = gcab*t32866*4.0;
                double t32878 = t32874+t32875+t32876+t32877+1.0;
                double t32879 = gcab*t32866;
                double t32880 = t32879+1.0;
                double t32881 = t32865*t32867;
                double t32882 = gcab*t32866*2.0;
                double t32883 = t32881+t32882+1.0;
                double t32884 = t32865*t32867*3.0;
                double t32885 = gcab*t32865*t32866*t32867;
                double t32886 = gcab*t32866*3.0;
                double t32887 = t32884+t32885+t32886+1.0;
                double t32888 = 1.0/t32883;
                double t32889 = 1.0/t32887;
                double t32890 = 1.0/t32880;
                double t32891 = 1.0/t32878;
                double t32892 = 1.0/pow(t32836,4.0/3.0);
                double t32893 = b1f*t32839;
                double t32894 = b3f*t32840;
                double t32895 = b4f*t32841*t32777;
                double t32896 = b2f*c*t32837;
                double t32897 = t32893+t32894+t32895+t32896;
                double t32898 = 1.0/t32897;
                double t32899 = t32805*t32898*(1.0/2.0);
                double t32900 = t32899+1.0;
                double t32901 = log(t32900);
                double t32902 = a1f*c*t32837;
                double t32903 = t32902+1.0;
                double t32905 = c0f*t32901*t32903*2.0;
                double t32904 = -t32905+t32853;
                double t32906 = 1.0/(t32836*t32836);
                double t32934 = t32906*t32854;
                double t32907 = -t32934+t32856;
                double t32908 = t32905-t32853;
                double t32909 = 1.0/pow(t32836,5.0/3.0);
                double t32910 = 1.0/sqrt(t32838);
                double t32911 = 1.0/t32849;
                double t32912 = 1.0/(t32846*t32846);
                double t32913 = b4p*t32909*t32777*(2.0/3.0);
                double t32914 = b2p*c*t32892*(1.0/3.0);
                double t32915 = b1p*c*t32910*t32892*(1.0/6.0);
                double t32916 = b3p*c*t32892*t32839*(1.0/2.0);
                double t32917 = t32913+t32914+t32915+t32916;
                double t32918 = t32911*t32912*t32852*t32917;
                double t32919 = 1.0/d2fz0;
                double t32920 = 1.0/Aa;
                double t32921 = b1a*t32839;
                double t32922 = b3a*t32840;
                double t32923 = b4a*t32841*t32777;
                double t32924 = b2a*c*t32837;
                double t32925 = t32921+t32922+t32923+t32924;
                double t32926 = 1.0/t32925;
                double t32927 = t32920*t32926*(1.0/2.0);
                double t32928 = t32927+1.0;
                double t32929 = log(t32928);
                double t32930 = a1a*c*t32837;
                double t32931 = t32930+1.0;
                double t32932 = 1.0/(t32836*t32836*t32836*t32836*t32836);
                double t32933 = pow(t32860,1.0/3.0);
                double t32935 = t32933*t32907*(4.0/3.0);
                double t32936 = pow(t32862,1.0/3.0);
                double t32937 = t32935-t32907*t32936*(4.0/3.0);
                double t32938 = t32858*t32859;
                double t32939 = t32938-1.0;
                double t32940 = 1.0/pow(rho_a,4.0/3.0);
                double t32941 = 1.0/pow(rho_a,5.0/3.0);
                double t32942 = 1.0/sqrt(t32774);
                double t32943 = 1.0/t32787;
                double t32944 = 1.0/(t32784*t32784);
                double t32945 = b4p*t32941*t32777*(2.0/3.0);
                double t32946 = b2p*c*t32940*(1.0/3.0);
                double t32947 = b1p*c*t32940*t32942*(1.0/6.0);
                double t32948 = b3p*c*t32940*t32775*(1.0/2.0);
                double t32949 = t32945+t32946+t32947+t32948;
                double t32950 = t32790*t32943*t32944*t32949;
                double t32951 = t32817-t32818;
                double t32952 = t32801*t32804*t32951;
                double t32953 = Aa*t32804*t32931*t32864*t32919*t32929*t32939*2.0;
                double t32954 = t32952+t32818;
                double t32955 = gamma_aa*gcaa*t32796*4.0;
                double t32956 = gamma_aa*gcaa*t32791*t32792*t32797*4.0;
                double t32957 = t32791*t32792*t32798*6.0;
                double t32958 = t32793*t32794*t32795;
                double t32959 = t32955+t32956+t32957+t32958+1.0;
                double t32960 = 1.0/t32959;
                double t32961 = gamma_aa*gcaa*t32796;
                double t32962 = t32961+1.0;
                double t32963 = 1.0/t32962;
                double t32964 = gamma_aa*gcaa*t32796*3.0;
                double t32965 = gamma_aa*gcaa*t32791*t32792*t32797;
                double t32966 = t32791*t32792*t32798*3.0;
                double t32967 = t32964+t32965+t32966+1.0;
                double t32968 = 1.0/t32967;
                double t32969 = gamma_aa*gcaa*t32796*2.0;
                double t32970 = t32791*t32792*t32798;
                double t32971 = t32970+t32969+1.0;
                double t32972 = 1.0/t32971;
                double t32973 = 1.0/pow(rho_a,1.9E1/3.0);
                double t32974 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t32975 = 1.0/pow(rho_a,3.5E1/3.0);
                double t32976 = 1.0/t32813;
                double t32977 = 1.0/(t32810*t32810);
                double t32978 = b4f*t32941*t32777*(2.0/3.0);
                double t32979 = b2f*c*t32940*(1.0/3.0);
                double t32980 = b1f*c*t32940*t32942*(1.0/6.0);
                double t32981 = b3f*c*t32940*t32775*(1.0/2.0);
                double t32982 = t32980+t32981+t32978+t32979;
                double t32983 = a1f*c*c0f*t32814*t32940*(2.0/3.0);
                double t32984 = a1p*c*c0p*t32940*t32788*(2.0/3.0);
                double t32985 = ccaa4*t32960*t32793*t32794*t32795;
                double t32986 = ccaa1*gamma_aa*gcaa*t32963*t32796;
                double t32987 = ccaa3*gamma_aa*gcaa*t32791*t32792*t32797*t32968;
                double t32988 = ccaa2*t32791*t32792*t32972*t32798;
                double t32989 = ccaa0+t32985+t32986+t32987+t32988;
                v_rho_a[Q] += scale * -(ccab0+ccab1*gcab*t32890*t32866+ccab4*t32872*t32873*t32891+ccab2*t32865*t32867*t32888+ccab3*gcab*t32865*t32866*t32867*t32889)*(t32853-t32952-t32818+t32953+rho_a*(-t32950+t32984+t32801*t32804*(t32950+t32983-t32816*t32982*t32976*t32977-a1p*c*c0p*t32940*t32788*(2.0/3.0)))-t32836*(-t32918+t32804*t32864*t32858*t32859*(t32918-(t32903*1.0/(t32897*t32897)*(b2f*c*t32892*(1.0/3.0)+b4f*t32909*t32777*(2.0/3.0)+b1f*c*t32910*t32892*(1.0/6.0)+b3f*c*t32892*t32839*(1.0/2.0)))/t32900+a1f*c*c0f*t32901*t32892*(2.0/3.0)-a1p*c*c0p*t32850*t32892*(2.0/3.0))+a1p*c*c0p*t32850*t32892*(2.0/3.0)+t32804*t32932*t32908*t32864*t32859*4.0-t32804*t32908*t32937*t32858*t32859+t32804*t32904*t32854*t32855*t32864*t32858*4.0+Aa*t32804*t32931*t32864*t32919*t32929*(t32932*t32859*4.0-t32854*t32855*t32858*4.0)*2.0-Aa*t32804*t32931*t32919*t32937*t32929*t32939*2.0-(t32804*t32931*1.0/(t32925*t32925)*t32864*t32919*t32939*(b2a*c*t32892*(1.0/3.0)+b4a*t32909*t32777*(2.0/3.0)+b1a*c*t32910*t32892*(1.0/6.0)+b3a*c*t32892*t32839*(1.0/2.0)))/t32928+Aa*a1a*c*t32804*t32864*t32892*t32919*t32929*t32939*(2.0/3.0))+t32804*t32908*t32864*t32858*t32859)-t32989*(t32818+t32801*t32804*(t32817-c0p*t32790*t32788*2.0))-(rho_a*t32954+rho_b*(t32835-t32801*t32804*(t32835-c0f*log((t32805*(1.0/2.0))/(b1f*t32821+b3f*t32822+b2f*c*t32819+b4f*t32823*t32777)+1.0)*(a1f*c*t32819+1.0)*2.0))-t32836*(t32853+t32953-t32804*t32904*t32864*t32858*t32859))*(ccab1*gamma_aa*gcab*t32890*t32868*(4.0/3.0)-ccab2*t32865*1.0/(t32883*t32883)*t32867*(gamma_aa*gcab*t32868*(8.0/3.0)+gamma_aa*t32865*t32866*t32868*(8.0/3.0))-ccab4*t32872*t32873*1.0/(t32878*t32878)*(gamma_aa*gcab*t32868*(1.6E1/3.0)+gamma_aa*t32865*t32866*t32868*1.6E1+gamma_aa*gcab*t32865*t32867*t32868*1.6E1+gamma_aa*t32872*t32866*t32867*t32868*(1.6E1/3.0))-ccab1*gamma_aa*1.0/(t32880*t32880)*t32865*t32866*t32868*(4.0/3.0)+ccab2*gamma_aa*t32865*t32866*t32868*t32888*(8.0/3.0)-ccab3*gcab*t32865*t32866*t32867*1.0/(t32887*t32887)*(gamma_aa*gcab*t32868*4.0+gamma_aa*t32865*t32866*t32868*8.0+gamma_aa*gcab*t32865*t32867*t32868*4.0)+ccab3*gamma_aa*gcab*t32865*t32867*t32868*t32889*4.0+ccab4*gamma_aa*t32872*t32891*t32866*t32867*t32868*(1.6E1/3.0))+rho_a*t32954*(ccaa1*gamma_aa*gcaa*t32963*t32868*(8.0/3.0)+ccaa2*t32791*t32792*t32972*t32973*(1.6E1/3.0)+ccaa4*t32960*t32793*t32794*t32975*(3.2E1/3.0)-ccaa1*t32791*1.0/(t32962*t32962)*t32792*t32973*(8.0/3.0)-ccaa2*t32791*1.0/(t32971*t32971)*t32792*t32798*(gamma_aa*gcaa*t32868*(1.6E1/3.0)+t32791*t32792*t32973*(1.6E1/3.0))-ccaa4*t32793*t32794*t32795*1.0/(t32959*t32959)*(gamma_aa*gcaa*t32868*(3.2E1/3.0)+t32791*t32792*t32973*3.2E1+t32793*t32794*t32975*(3.2E1/3.0)+gamma_aa*gcaa*t32791*t32792*t32974*3.2E1)+ccaa3*gamma_aa*gcaa*t32791*t32792*t32974*t32968*8.0-ccaa3*gamma_aa*gcaa*t32791*t32792*1.0/(t32967*t32967)*t32797*(gamma_aa*gcaa*t32868*8.0+t32791*t32792*t32973*1.6E1+gamma_aa*gcaa*t32791*t32792*t32974*8.0))+rho_a*t32989*(-t32950+t32984+t32801*t32804*(t32950+t32983-t32984-t32816*t32982*t32976*t32977));
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t32991 = 1.0/pow(rho_b,1.0/3.0);
                double t32992 = c*t32991;
                double t32993 = sqrt(t32992);
                double t32994 = pow(t32992,3.0/2.0);
                double t32995 = c*c;
                double t32996 = 1.0/pow(rho_b,2.0/3.0);
                double t32997 = 1.0/c0p;
                double t32998 = b1p*t32993;
                double t32999 = b3p*t32994;
                double t33000 = b4p*t32995*t32996;
                double t33001 = b2p*c*t32991;
                double t33002 = t32998+t32999+t33000+t33001;
                double t33003 = 1.0/t33002;
                double t33004 = t32997*t33003*(1.0/2.0);
                double t33005 = t33004+1.0;
                double t33006 = log(t33005);
                double t33007 = a1p*c*t32991;
                double t33008 = t33007+1.0;
                double t33009 = gamma_bb*gamma_bb;
                double t33010 = gcaa*gcaa;
                double t33011 = t33009*t33009;
                double t33012 = t33010*t33010;
                double t33013 = 1.0/pow(rho_b,3.2E1/3.0);
                double t33014 = 1.0/pow(rho_b,8.0/3.0);
                double t33015 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t33016 = 1.0/pow(rho_b,1.6E1/3.0);
                double t33017 = pow(2.0,1.0/3.0);
                double t33018 = t33017*2.0;
                double t33019 = t33018-2.0;
                double t33020 = two_13*2.0;
                double t33021 = t33020-2.0;
                double t33022 = 1.0/t33021;
                double t33023 = 1.0/c0f;
                double t33024 = 1.0/pow(rho_a,1.0/3.0);
                double t33025 = c*t33024;
                double t33026 = sqrt(t33025);
                double t33027 = pow(t33025,3.0/2.0);
                double t33028 = 1.0/pow(rho_a,2.0/3.0);
                double t33029 = b1p*t33026;
                double t33030 = b3p*t33027;
                double t33031 = b4p*t32995*t33028;
                double t33032 = b2p*c*t33024;
                double t33033 = t33030+t33031+t33032+t33029;
                double t33034 = 1.0/t33033;
                double t33035 = t32997*t33034*(1.0/2.0);
                double t33036 = t33035+1.0;
                double t33037 = log(t33036);
                double t33038 = a1p*c*t33024;
                double t33039 = t33038+1.0;
                double t33040 = c0p*t33037*t33039*2.0;
                double t33041 = b1f*t32993;
                double t33042 = b3f*t32994;
                double t33043 = b4f*t32995*t32996;
                double t33044 = b2f*c*t32991;
                double t33045 = t33041+t33042+t33043+t33044;
                double t33046 = 1.0/t33045;
                double t33047 = t33023*t33046*(1.0/2.0);
                double t33048 = t33047+1.0;
                double t33049 = log(t33048);
                double t33050 = a1f*c*t32991;
                double t33051 = t33050+1.0;
                double t33052 = c0f*t33051*t33049*2.0;
                double t33053 = c0p*t33006*t33008*2.0;
                double t33054 = rho_a+rho_b;
                double t33055 = 1.0/pow(t33054,1.0/3.0);
                double t33056 = c*t33055;
                double t33057 = sqrt(t33056);
                double t33058 = pow(t33056,3.0/2.0);
                double t33059 = 1.0/pow(t33054,2.0/3.0);
                double t33060 = b1p*t33057;
                double t33061 = b3p*t33058;
                double t33062 = b4p*t32995*t33059;
                double t33063 = b2p*c*t33055;
                double t33064 = t33060+t33061+t33062+t33063;
                double t33065 = 1.0/t33064;
                double t33066 = t32997*t33065*(1.0/2.0);
                double t33067 = t33066+1.0;
                double t33068 = log(t33067);
                double t33069 = a1p*c*t33055;
                double t33070 = t33069+1.0;
                double t33071 = c0p*t33070*t33068*2.0;
                double t33072 = rho_a-rho_b;
                double t33073 = t33072*t33072;
                double t33074 = 1.0/t33054;
                double t33075 = t33072*t33074;
                double t33076 = 1.0/(t33054*t33054*t33054*t33054);
                double t33077 = t33073*t33073;
                double t33078 = t33075+1.0;
                double t33079 = pow(t33078,4.0/3.0);
                double t33080 = -t33075+1.0;
                double t33081 = pow(t33080,4.0/3.0);
                double t33082 = t33081+t33079-2.0;
                double t33083 = gcab*gcab;
                double t33087 = 1.0/pow(rho_a,8.0/3.0);
                double t33088 = gamma_aa*t33087*(1.0/2.0);
                double t33089 = gamma_bb*t33014*(1.0/2.0);
                double t33084 = t33088+t33089;
                double t33085 = t33084*t33084;
                double t33086 = 1.0/pow(rho_b,1.1E1/3.0);
                double t33090 = t33083*t33083;
                double t33091 = t33085*t33085;
                double t33092 = t33083*t33085*6.0;
                double t33093 = gcab*t33083*t33084*t33085*4.0;
                double t33094 = t33090*t33091;
                double t33095 = gcab*t33084*4.0;
                double t33096 = t33092+t33093+t33094+t33095+1.0;
                double t33097 = gcab*t33084;
                double t33098 = t33097+1.0;
                double t33099 = t33083*t33085;
                double t33100 = gcab*t33084*2.0;
                double t33101 = t33100+t33099+1.0;
                double t33102 = t33083*t33085*3.0;
                double t33103 = gcab*t33083*t33084*t33085;
                double t33104 = gcab*t33084*3.0;
                double t33105 = t33102+t33103+t33104+1.0;
                double t33106 = 1.0/t33101;
                double t33107 = 1.0/t33105;
                double t33108 = 1.0/t33098;
                double t33109 = 1.0/t33096;
                double t33110 = 1.0/pow(t33054,4.0/3.0);
                double t33111 = b1f*t33057;
                double t33112 = b3f*t33058;
                double t33113 = b4f*t32995*t33059;
                double t33114 = b2f*c*t33055;
                double t33115 = t33111+t33112+t33113+t33114;
                double t33116 = 1.0/t33115;
                double t33117 = t33023*t33116*(1.0/2.0);
                double t33118 = t33117+1.0;
                double t33119 = log(t33118);
                double t33120 = a1f*c*t33055;
                double t33121 = t33120+1.0;
                double t33123 = c0f*t33121*t33119*2.0;
                double t33122 = -t33123+t33071;
                double t33124 = 1.0/(t33054*t33054);
                double t33125 = t33124*t33072;
                double t33126 = t33125+t33074;
                double t33127 = t33123-t33071;
                double t33128 = 1.0/pow(t33054,5.0/3.0);
                double t33129 = 1.0/sqrt(t33056);
                double t33130 = 1.0/t33067;
                double t33131 = 1.0/(t33064*t33064);
                double t33132 = b4p*t32995*t33128*(2.0/3.0);
                double t33133 = b2p*c*t33110*(1.0/3.0);
                double t33134 = b1p*c*t33110*t33129*(1.0/6.0);
                double t33135 = b3p*c*t33110*t33057*(1.0/2.0);
                double t33136 = t33132+t33133+t33134+t33135;
                double t33137 = 1.0/d2fz0;
                double t33138 = 1.0/Aa;
                double t33139 = b1a*t33057;
                double t33140 = b3a*t33058;
                double t33141 = b4a*t32995*t33059;
                double t33142 = b2a*c*t33055;
                double t33143 = t33140+t33141+t33142+t33139;
                double t33144 = 1.0/t33143;
                double t33145 = t33144*t33138*(1.0/2.0);
                double t33146 = t33145+1.0;
                double t33147 = log(t33146);
                double t33148 = a1a*c*t33055;
                double t33149 = t33148+1.0;
                double t33150 = 1.0/(t33054*t33054*t33054*t33054*t33054);
                double t33151 = pow(t33078,1.0/3.0);
                double t33152 = t33151*t33126*(4.0/3.0);
                double t33153 = pow(t33080,1.0/3.0);
                double t33154 = t33152-t33126*t33153*(4.0/3.0);
                double t33155 = t33076*t33077;
                double t33156 = t33155-1.0;
                double t33157 = 1.0/pow(rho_b,4.0/3.0);
                double t33158 = 1.0/pow(rho_b,5.0/3.0);
                double t33159 = 1.0/sqrt(t32992);
                double t33160 = 1.0/t33005;
                double t33161 = 1.0/(t33002*t33002);
                double t33162 = b4p*t32995*t33158*(2.0/3.0);
                double t33163 = b2p*c*t33157*(1.0/3.0);
                double t33164 = b1p*c*t33157*t33159*(1.0/6.0);
                double t33165 = b3p*c*t32993*t33157*(1.0/2.0);
                double t33166 = t33162+t33163+t33164+t33165;
                double t33167 = t33160*t33008*t33161*t33166;
                double t33168 = t33052-t33053;
                double t33169 = t33022*t33019*t33168;
                double t33170 = Aa*t33022*t33082*t33137*t33147*t33156*t33149*2.0;
                double t33171 = a1p*c*c0p*t33110*t33068*(2.0/3.0);
                double t33172 = t33053+t33169;
                double t33173 = gamma_bb*gcaa*t33014*4.0;
                double t33174 = gamma_bb*gcaa*t33010*t33015*t33009*4.0;
                double t33175 = t33010*t33016*t33009*6.0;
                double t33176 = t33011*t33012*t33013;
                double t33177 = t33173+t33174+t33175+t33176+1.0;
                double t33178 = 1.0/t33177;
                double t33179 = gamma_bb*gcaa*t33014;
                double t33180 = t33179+1.0;
                double t33181 = 1.0/t33180;
                double t33182 = gamma_bb*gcaa*t33014*3.0;
                double t33183 = gamma_bb*gcaa*t33010*t33015*t33009;
                double t33184 = t33010*t33016*t33009*3.0;
                double t33185 = t33182+t33183+t33184+1.0;
                double t33186 = 1.0/t33185;
                double t33187 = gamma_bb*gcaa*t33014*2.0;
                double t33188 = t33010*t33016*t33009;
                double t33189 = t33187+t33188+1.0;
                double t33190 = 1.0/t33189;
                double t33191 = 1.0/pow(rho_b,1.9E1/3.0);
                double t33192 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t33193 = 1.0/pow(rho_b,3.5E1/3.0);
                double t33194 = 1.0/t33048;
                double t33195 = 1.0/(t33045*t33045);
                double t33196 = b4f*t32995*t33158*(2.0/3.0);
                double t33197 = b2f*c*t33157*(1.0/3.0);
                double t33198 = b1f*c*t33157*t33159*(1.0/6.0);
                double t33199 = b3f*c*t32993*t33157*(1.0/2.0);
                double t33200 = t33196+t33197+t33198+t33199;
                double t33201 = a1f*c*c0f*t33049*t33157*(2.0/3.0);
                double t33202 = a1p*c*c0p*t33006*t33157*(2.0/3.0);
                double t33203 = ccaa4*t33011*t33012*t33013*t33178;
                double t33204 = ccaa1*gamma_bb*gcaa*t33014*t33181;
                double t33205 = ccaa3*gamma_bb*gcaa*t33010*t33015*t33009*t33186;
                double t33206 = ccaa2*t33010*t33016*t33009*t33190;
                double t33207 = ccaa0+t33203+t33204+t33205+t33206;
                v_rho_b[Q] += scale * -t33207*(t33053+t33022*t33019*(t33052-c0p*t33006*t33008*2.0))-(ccab0+ccab1*gcab*t33108*t33084+ccab2*t33106*t33083*t33085+ccab4*t33090*t33091*t33109+ccab3*gcab*t33107*t33083*t33084*t33085)*(-t33053+t33071+t33170-t33169+rho_b*(t33202-t33167+t33022*t33019*(t33201+t33167-t33200*t33051*t33194*t33195-a1p*c*c0p*t33006*t33157*(2.0/3.0)))-t33054*(t33171-t33130*t33131*t33070*t33136+t33022*t33150*t33082*t33127*t33077*4.0+t33022*t33127*t33154*t33076*t33077-t33022*t33082*t33076*t33077*(t33171-t33130*t33131*t33070*t33136+(t33121*1.0/(t33115*t33115)*(b2f*c*t33110*(1.0/3.0)+b4f*t32995*t33128*(2.0/3.0)+b1f*c*t33110*t33129*(1.0/6.0)+b3f*c*t33110*t33057*(1.0/2.0)))/t33118-a1f*c*c0f*t33110*t33119*(2.0/3.0))-t33022*t33122*t33072*t33073*t33082*t33076*4.0+Aa*t33022*t33082*t33137*t33147*t33149*(t33150*t33077*4.0+t33072*t33073*t33076*4.0)*2.0+Aa*t33022*t33154*t33137*t33147*t33156*t33149*2.0-(t33022*1.0/(t33143*t33143)*t33082*t33137*t33156*t33149*(b2a*c*t33110*(1.0/3.0)+b4a*t32995*t33128*(2.0/3.0)+b1a*c*t33110*t33129*(1.0/6.0)+b3a*c*t33110*t33057*(1.0/2.0)))/t33146+Aa*a1a*c*t33110*t33022*t33082*t33137*t33147*t33156*(2.0/3.0))+t33022*t33082*t33127*t33076*t33077)-(rho_b*t33172+rho_a*(t33040-t33022*t33019*(t33040-c0f*log((t33023*(1.0/2.0))/(b1f*t33026+b3f*t33027+b2f*c*t33024+b4f*t32995*t33028)+1.0)*(a1f*c*t33024+1.0)*2.0))-t33054*(t33071+t33170-t33022*t33122*t33082*t33076*t33077))*(ccab1*gamma_bb*gcab*t33108*t33086*(4.0/3.0)-ccab2*1.0/(t33101*t33101)*t33083*t33085*(gamma_bb*gcab*t33086*(8.0/3.0)+gamma_bb*t33083*t33084*t33086*(8.0/3.0))-ccab4*t33090*t33091*1.0/(t33096*t33096)*(gamma_bb*gcab*t33086*(1.6E1/3.0)+gamma_bb*t33083*t33084*t33086*1.6E1+gamma_bb*gcab*t33083*t33085*t33086*1.6E1+gamma_bb*t33090*t33084*t33085*t33086*(1.6E1/3.0))-ccab1*gamma_bb*t33083*t33084*t33086*1.0/(t33098*t33098)*(4.0/3.0)+ccab2*gamma_bb*t33106*t33083*t33084*t33086*(8.0/3.0)-ccab3*gcab*1.0/(t33105*t33105)*t33083*t33084*t33085*(gamma_bb*gcab*t33086*4.0+gamma_bb*t33083*t33084*t33086*8.0+gamma_bb*gcab*t33083*t33085*t33086*4.0)+ccab3*gamma_bb*gcab*t33107*t33083*t33085*t33086*4.0+ccab4*gamma_bb*t33090*t33109*t33084*t33085*t33086*(1.6E1/3.0))+rho_b*t33172*(ccaa1*gamma_bb*gcaa*t33181*t33086*(8.0/3.0)+ccaa2*t33010*t33009*t33190*t33191*(1.6E1/3.0)+ccaa4*t33011*t33012*t33193*t33178*(3.2E1/3.0)-ccaa1*t33010*t33009*1.0/(t33180*t33180)*t33191*(8.0/3.0)-ccaa2*t33010*t33016*t33009*1.0/(t33189*t33189)*(gamma_bb*gcaa*t33086*(1.6E1/3.0)+t33010*t33009*t33191*(1.6E1/3.0))-ccaa4*t33011*t33012*t33013*1.0/(t33177*t33177)*(gamma_bb*gcaa*t33086*(3.2E1/3.0)+t33011*t33012*t33193*(3.2E1/3.0)+t33010*t33009*t33191*3.2E1+gamma_bb*gcaa*t33010*t33009*t33192*3.2E1)+ccaa3*gamma_bb*gcaa*t33010*t33009*t33192*t33186*8.0-ccaa3*gamma_bb*gcaa*t33010*t33015*t33009*1.0/(t33185*t33185)*(gamma_bb*gcaa*t33086*8.0+t33010*t33009*t33191*1.6E1+gamma_bb*gcaa*t33010*t33009*t33192*8.0))+rho_b*t33207*(t33202-t33167+t33022*t33019*(t33201-t33202+t33167-t33200*t33051*t33194*t33195));
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t33209 = 1.0/pow(rho_a,1.0/3.0);
                double t33210 = c*t33209;
                double t33211 = sqrt(t33210);
                double t33212 = pow(t33210,3.0/2.0);
                double t33213 = c*c;
                double t33214 = 1.0/pow(rho_a,2.0/3.0);
                double t33215 = 1.0/c0p;
                double t33216 = b1p*t33211;
                double t33217 = b3p*t33212;
                double t33218 = b4p*t33213*t33214;
                double t33219 = b2p*c*t33209;
                double t33220 = t33216+t33217+t33218+t33219;
                double t33221 = 1.0/t33220;
                double t33222 = t33221*t33215*(1.0/2.0);
                double t33223 = t33222+1.0;
                double t33224 = log(t33223);
                double t33225 = a1p*c*t33209;
                double t33226 = t33225+1.0;
                double t33227 = pow(2.0,1.0/3.0);
                double t33228 = t33227*2.0;
                double t33229 = t33228-2.0;
                double t33230 = two_13*2.0;
                double t33231 = t33230-2.0;
                double t33232 = 1.0/t33231;
                double t33233 = 1.0/c0f;
                double t33234 = 1.0/pow(rho_b,1.0/3.0);
                double t33235 = c*t33234;
                double t33236 = sqrt(t33235);
                double t33237 = pow(t33235,3.0/2.0);
                double t33238 = 1.0/pow(rho_b,2.0/3.0);
                double t33239 = b1p*t33236;
                double t33240 = b3p*t33237;
                double t33241 = b4p*t33213*t33238;
                double t33242 = b2p*c*t33234;
                double t33243 = t33240+t33241+t33242+t33239;
                double t33244 = 1.0/t33243;
                double t33245 = t33215*t33244*(1.0/2.0);
                double t33246 = t33245+1.0;
                double t33247 = log(t33246);
                double t33248 = a1p*c*t33234;
                double t33249 = t33248+1.0;
                double t33250 = c0p*t33247*t33249*2.0;
                double t33251 = rho_a+rho_b;
                double t33252 = 1.0/pow(t33251,1.0/3.0);
                double t33253 = c*t33252;
                double t33254 = sqrt(t33253);
                double t33255 = pow(t33253,3.0/2.0);
                double t33256 = 1.0/pow(t33251,2.0/3.0);
                double t33257 = b1p*t33254;
                double t33258 = b3p*t33255;
                double t33259 = b4p*t33213*t33256;
                double t33260 = b2p*c*t33252;
                double t33261 = t33260+t33257+t33258+t33259;
                double t33262 = 1.0/t33261;
                double t33263 = t33215*t33262*(1.0/2.0);
                double t33264 = t33263+1.0;
                double t33265 = log(t33264);
                double t33266 = a1p*c*t33252;
                double t33267 = t33266+1.0;
                double t33268 = c0p*t33265*t33267*2.0;
                double t33269 = rho_a-rho_b;
                double t33270 = t33269*t33269;
                double t33271 = 1.0/t33251;
                double t33272 = t33271*t33269;
                double t33273 = 1.0/(t33251*t33251*t33251*t33251);
                double t33274 = t33270*t33270;
                double t33275 = t33272+1.0;
                double t33276 = pow(t33275,4.0/3.0);
                double t33277 = -t33272+1.0;
                double t33278 = pow(t33277,4.0/3.0);
                double t33279 = t33276+t33278-2.0;
                double t33280 = 1.0/pow(rho_a,8.0/3.0);
                double t33281 = gamma_aa*t33280*(1.0/2.0);
                double t33282 = 1.0/pow(rho_b,8.0/3.0);
                double t33283 = gamma_bb*t33282*(1.0/2.0);
                double t33284 = t33281+t33283;
                double t33285 = gcab*t33284;
                double t33286 = t33285+1.0;
                double t33287 = gcab*gcab;
                double t33288 = t33284*t33284;
                double t33289 = t33287*t33287;
                double t33290 = t33288*t33288;
                double t33291 = t33287*t33288;
                double t33292 = gcab*t33284*2.0;
                double t33293 = t33291+t33292+1.0;
                double t33294 = t33287*t33288*3.0;
                double t33295 = gcab*t33284*t33287*t33288;
                double t33296 = gcab*t33284*3.0;
                double t33297 = t33294+t33295+t33296+1.0;
                double t33298 = t33287*t33288*6.0;
                double t33299 = gcab*t33284*t33287*t33288*4.0;
                double t33300 = t33290*t33289;
                double t33301 = gcab*t33284*4.0;
                double t33302 = t33300+t33301+t33298+t33299+1.0;
                double t33303 = c0p*t33224*t33226*2.0;
                double t33304 = b1f*t33211;
                double t33305 = b3f*t33212;
                double t33306 = b4f*t33213*t33214;
                double t33307 = b2f*c*t33209;
                double t33308 = t33304+t33305+t33306+t33307;
                double t33309 = 1.0/t33308;
                double t33310 = t33233*t33309*(1.0/2.0);
                double t33311 = t33310+1.0;
                double t33312 = log(t33311);
                double t33313 = a1f*c*t33209;
                double t33314 = t33313+1.0;
                double t33315 = t33303-c0f*t33312*t33314*2.0;
                double t33316 = t33303-t33232*t33315*t33229;
                double t33317 = gamma_aa*gamma_aa;
                double t33318 = gcaa*gcaa;
                double t33319 = t33318*t33318;
                double t33320 = 1.0/pow(rho_a,3.2E1/3.0);
                double t33321 = 1.0/pow(rho_a,1.6E1/3.0);
                double t33322 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t33323 = gamma_aa*gcaa*t33280;
                double t33324 = t33323+1.0;
                double t33325 = gamma_aa*gcaa*t33280*3.0;
                double t33326 = gamma_aa*gcaa*t33322*t33317*t33318;
                double t33327 = t33321*t33317*t33318*3.0;
                double t33328 = t33325+t33326+t33327+1.0;
                double t33329 = t33317*t33317;
                double t33330 = gamma_aa*gcaa*t33280*4.0;
                double t33331 = gamma_aa*gcaa*t33322*t33317*t33318*4.0;
                double t33332 = t33321*t33317*t33318*6.0;
                double t33333 = t33320*t33319*t33329;
                double t33334 = t33330+t33331+t33332+t33333+1.0;
                double t33335 = gamma_aa*gcaa*t33280*2.0;
                double t33336 = t33321*t33317*t33318;
                double t33337 = t33335+t33336+1.0;
                v_gamma_aa[Q] += scale * (rho_a*t33316+rho_b*(t33250-t33232*t33229*(t33250-c0f*log((t33233*(1.0/2.0))/(b1f*t33236+b3f*t33237+b2f*c*t33234+b4f*t33213*t33238)+1.0)*(a1f*c*t33234+1.0)*2.0))-t33251*(t33268-t33232*t33273*t33274*t33279*(t33268-c0f*log((t33233*(1.0/2.0))/(b1f*t33254+b3f*t33255+b2f*c*t33252+b4f*t33213*t33256)+1.0)*(a1f*c*t33252+1.0)*2.0)+(Aa*t33232*t33279*log((1.0/2.0)/(Aa*(b1a*t33254+b3a*t33255+b2a*c*t33252+b4a*t33213*t33256))+1.0)*(t33273*t33274-1.0)*(a1a*c*t33252+1.0)*2.0)/d2fz0))*((ccab1*gcab*t33280*(1.0/2.0))/t33286-ccab4*1.0/(t33302*t33302)*t33290*t33289*(gcab*t33280*2.0+t33280*t33284*t33287*6.0+gcab*t33280*t33287*t33288*6.0+t33280*t33284*t33288*t33289*2.0)-ccab2*1.0/(t33293*t33293)*t33287*t33288*(gcab*t33280+t33280*t33284*t33287)+(ccab2*t33280*t33284*t33287)/t33293-ccab1*t33280*t33284*1.0/(t33286*t33286)*t33287*(1.0/2.0)+(ccab3*gcab*t33280*t33287*t33288*(3.0/2.0))/t33297+(ccab4*t33280*t33284*t33288*t33289*2.0)/t33302-ccab3*gcab*t33284*t33287*t33288*1.0/(t33297*t33297)*(gcab*t33280*(3.0/2.0)+t33280*t33284*t33287*3.0+gcab*t33280*t33287*t33288*(3.0/2.0)))-rho_a*t33316*((ccaa1*gcaa*t33280)/t33324-ccaa1*gamma_aa*t33321*1.0/(t33324*t33324)*t33318+(ccaa2*gamma_aa*t33321*t33318*2.0)/t33337-ccaa2*t33321*t33317*t33318*1.0/(t33337*t33337)*(gcaa*t33280*2.0+gamma_aa*t33321*t33318*2.0)+(ccaa4*gamma_aa*t33320*t33317*t33319*4.0)/t33334+(ccaa3*gcaa*t33322*t33317*t33318*3.0)/t33328-ccaa4*t33320*1.0/(t33334*t33334)*t33319*t33329*(gcaa*t33280*4.0+gamma_aa*t33321*t33318*1.2E1+gamma_aa*t33320*t33317*t33319*4.0+gcaa*t33322*t33317*t33318*1.2E1)-ccaa3*gamma_aa*gcaa*t33322*t33317*t33318*1.0/(t33328*t33328)*(gcaa*t33280*3.0+gamma_aa*t33321*t33318*6.0+gcaa*t33322*t33317*t33318*3.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t33340 = 1.0/pow(rho_a,1.0/3.0);
                double t33341 = c*t33340;
                double t33342 = sqrt(t33341);
                double t33343 = pow(t33341,3.0/2.0);
                double t33344 = c*c;
                double t33345 = 1.0/pow(rho_a,2.0/3.0);
                double t33346 = 1.0/c0p;
                double t33347 = b1p*t33342;
                double t33348 = b3p*t33343;
                double t33349 = b4p*t33344*t33345;
                double t33350 = b2p*c*t33340;
                double t33351 = t33350+t33347+t33348+t33349;
                double t33352 = 1.0/t33351;
                double t33353 = t33352*t33346*(1.0/2.0);
                double t33354 = t33353+1.0;
                double t33355 = log(t33354);
                double t33356 = a1p*c*t33340;
                double t33357 = t33356+1.0;
                double t33358 = pow(2.0,1.0/3.0);
                double t33359 = t33358*2.0;
                double t33360 = t33359-2.0;
                double t33361 = two_13*2.0;
                double t33362 = t33361-2.0;
                double t33363 = 1.0/t33362;
                double t33364 = 1.0/c0f;
                double t33365 = 1.0/pow(rho_b,1.0/3.0);
                double t33366 = c*t33365;
                double t33367 = sqrt(t33366);
                double t33368 = pow(t33366,3.0/2.0);
                double t33369 = 1.0/pow(rho_b,2.0/3.0);
                double t33370 = b1p*t33367;
                double t33371 = b3p*t33368;
                double t33372 = b4p*t33344*t33369;
                double t33373 = b2p*c*t33365;
                double t33374 = t33370+t33371+t33372+t33373;
                double t33375 = 1.0/t33374;
                double t33376 = t33346*t33375*(1.0/2.0);
                double t33377 = t33376+1.0;
                double t33378 = log(t33377);
                double t33379 = a1p*c*t33365;
                double t33380 = t33379+1.0;
                double t33381 = c0p*t33380*t33378*2.0;
                double t33382 = rho_a+rho_b;
                double t33383 = 1.0/pow(t33382,1.0/3.0);
                double t33384 = c*t33383;
                double t33385 = sqrt(t33384);
                double t33386 = pow(t33384,3.0/2.0);
                double t33387 = 1.0/pow(t33382,2.0/3.0);
                double t33388 = b1p*t33385;
                double t33389 = b3p*t33386;
                double t33390 = b4p*t33344*t33387;
                double t33391 = b2p*c*t33383;
                double t33392 = t33390+t33391+t33388+t33389;
                double t33393 = 1.0/t33392;
                double t33394 = t33346*t33393*(1.0/2.0);
                double t33395 = t33394+1.0;
                double t33396 = log(t33395);
                double t33397 = a1p*c*t33383;
                double t33398 = t33397+1.0;
                double t33399 = c0p*t33396*t33398*2.0;
                double t33400 = rho_a-rho_b;
                double t33401 = t33400*t33400;
                double t33402 = 1.0/t33382;
                double t33403 = t33400*t33402;
                double t33404 = 1.0/(t33382*t33382*t33382*t33382);
                double t33405 = t33401*t33401;
                double t33406 = t33403+1.0;
                double t33407 = pow(t33406,4.0/3.0);
                double t33408 = -t33403+1.0;
                double t33409 = pow(t33408,4.0/3.0);
                double t33410 = t33407+t33409-2.0;
                double t33411 = 1.0/pow(rho_b,8.0/3.0);
                double t33412 = 1.0/pow(rho_a,8.0/3.0);
                double t33413 = gamma_aa*t33412*(1.0/2.0);
                double t33414 = gamma_bb*t33411*(1.0/2.0);
                double t33415 = t33413+t33414;
                double t33416 = gcab*t33415;
                double t33417 = t33416+1.0;
                double t33418 = gcab*gcab;
                double t33419 = t33415*t33415;
                double t33420 = t33418*t33418;
                double t33421 = t33419*t33419;
                double t33422 = t33418*t33419;
                double t33423 = gcab*t33415*2.0;
                double t33424 = t33422+t33423+1.0;
                double t33425 = t33418*t33419*3.0;
                double t33426 = gcab*t33415*t33418*t33419;
                double t33427 = gcab*t33415*3.0;
                double t33428 = t33425+t33426+t33427+1.0;
                double t33429 = t33418*t33419*6.0;
                double t33430 = gcab*t33415*t33418*t33419*4.0;
                double t33431 = t33420*t33421;
                double t33432 = gcab*t33415*4.0;
                double t33433 = t33430+t33431+t33432+t33429+1.0;
                double t33434 = c0p*t33355*t33357*2.0;
                double t33435 = b1f*t33367;
                double t33436 = b3f*t33368;
                double t33437 = b4f*t33344*t33369;
                double t33438 = b2f*c*t33365;
                double t33439 = t33435+t33436+t33437+t33438;
                double t33440 = 1.0/t33439;
                double t33441 = t33440*t33364*(1.0/2.0);
                double t33442 = t33441+1.0;
                double t33443 = log(t33442);
                double t33444 = a1f*c*t33365;
                double t33445 = t33444+1.0;
                double t33446 = t33381-c0f*t33443*t33445*2.0;
                double t33447 = t33381-t33360*t33363*t33446;
                double t33448 = gamma_bb*gamma_bb;
                double t33449 = gcaa*gcaa;
                double t33450 = t33449*t33449;
                double t33451 = 1.0/pow(rho_b,3.2E1/3.0);
                double t33452 = 1.0/pow(rho_b,1.6E1/3.0);
                double t33453 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t33454 = gamma_bb*gcaa*t33411;
                double t33455 = t33454+1.0;
                double t33456 = gamma_bb*gcaa*t33411*3.0;
                double t33457 = gamma_bb*gcaa*t33453*t33448*t33449;
                double t33458 = t33452*t33448*t33449*3.0;
                double t33459 = t33456+t33457+t33458+1.0;
                double t33460 = t33448*t33448;
                double t33461 = gamma_bb*gcaa*t33411*4.0;
                double t33462 = gamma_bb*gcaa*t33453*t33448*t33449*4.0;
                double t33463 = t33452*t33448*t33449*6.0;
                double t33464 = t33450*t33451*t33460;
                double t33465 = t33461+t33462+t33463+t33464+1.0;
                double t33466 = gamma_bb*gcaa*t33411*2.0;
                double t33467 = t33452*t33448*t33449;
                double t33468 = t33466+t33467+1.0;
                v_gamma_bb[Q] += scale * (rho_b*t33447+rho_a*(t33434-t33360*t33363*(t33434-c0f*log((t33364*(1.0/2.0))/(b1f*t33342+b3f*t33343+b2f*c*t33340+b4f*t33344*t33345)+1.0)*(a1f*c*t33340+1.0)*2.0))-t33382*(t33399-t33410*t33404*t33405*t33363*(t33399-c0f*log((t33364*(1.0/2.0))/(b1f*t33385+b3f*t33386+b2f*c*t33383+b4f*t33344*t33387)+1.0)*(a1f*c*t33383+1.0)*2.0)+(Aa*t33410*t33363*log((1.0/2.0)/(Aa*(b1a*t33385+b3a*t33386+b2a*c*t33383+b4a*t33344*t33387))+1.0)*(t33404*t33405-1.0)*(a1a*c*t33383+1.0)*2.0)/d2fz0))*((ccab1*gcab*t33411*(1.0/2.0))/t33417-ccab4*t33420*t33421*1.0/(t33433*t33433)*(gcab*t33411*2.0+t33411*t33415*t33418*6.0+gcab*t33411*t33418*t33419*6.0+t33411*t33420*t33415*t33419*2.0)-ccab2*1.0/(t33424*t33424)*t33418*t33419*(gcab*t33411+t33411*t33415*t33418)+(ccab2*t33411*t33415*t33418)/t33424-ccab1*t33411*t33415*1.0/(t33417*t33417)*t33418*(1.0/2.0)+(ccab3*gcab*t33411*t33418*t33419*(3.0/2.0))/t33428+(ccab4*t33411*t33420*t33415*t33419*2.0)/t33433-ccab3*gcab*t33415*t33418*t33419*1.0/(t33428*t33428)*(gcab*t33411*(3.0/2.0)+t33411*t33415*t33418*3.0+gcab*t33411*t33418*t33419*(3.0/2.0)))-rho_b*t33447*((ccaa1*gcaa*t33411)/t33455-ccaa1*gamma_bb*t33452*1.0/(t33455*t33455)*t33449+(ccaa2*gamma_bb*t33452*t33449*2.0)/t33468-ccaa2*t33452*t33448*t33449*1.0/(t33468*t33468)*(gcaa*t33411*2.0+gamma_bb*t33452*t33449*2.0)+(ccaa4*gamma_bb*t33450*t33451*t33448*4.0)/t33465+(ccaa3*gcaa*t33453*t33448*t33449*3.0)/t33459-ccaa4*t33450*t33451*t33460*1.0/(t33465*t33465)*(gcaa*t33411*4.0+gamma_bb*t33452*t33449*1.2E1+gamma_bb*t33450*t33451*t33448*4.0+gcaa*t33453*t33448*t33449*1.2E1)-ccaa3*gamma_bb*gcaa*t33453*t33448*t33449*1.0/(t33459*t33459)*(gcaa*t33411*3.0+gamma_bb*t33452*t33449*6.0+gcaa*t33453*t33448*t33449*3.0));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t33472 = rho_a+rho_b;
                double t33473 = 1.0/pow(t33472,1.0/3.0);
                double t33474 = c*t33473;
                double t33475 = sqrt(t33474);
                double t33476 = b1p*t33475;
                double t33477 = pow(t33474,3.0/2.0);
                double t33478 = b3p*t33477;
                double t33479 = c*c;
                double t33480 = 1.0/pow(t33472,2.0/3.0);
                double t33481 = b4p*t33480*t33479;
                double t33482 = b2p*c*t33473;
                double t33483 = t33481+t33482+t33476+t33478;
                double t33484 = 1.0/pow(t33472,4.0/3.0);
                double t33485 = 1.0/c0p;
                double t33486 = 1.0/t33483;
                double t33487 = t33485*t33486*(1.0/2.0);
                double t33488 = t33487+1.0;
                double t33489 = a1p*c*t33473;
                double t33490 = t33489+1.0;
                double t33491 = rho_a-rho_b;
                double t33492 = t33491*t33491;
                double t33493 = 1.0/t33472;
                double t33494 = t33491*t33493;
                double t33495 = two_13*2.0;
                double t33496 = t33495-2.0;
                double t33497 = 1.0/t33496;
                double t33498 = 1.0/c0f;
                double t33499 = b1f*t33475;
                double t33500 = b3f*t33477;
                double t33501 = b4f*t33480*t33479;
                double t33502 = b2f*c*t33473;
                double t33503 = t33500+t33501+t33502+t33499;
                double t33504 = 1.0/t33503;
                double t33505 = t33504*t33498*(1.0/2.0);
                double t33506 = t33505+1.0;
                double t33507 = log(t33506);
                double t33508 = a1f*c*t33473;
                double t33509 = t33508+1.0;
                double t33510 = log(t33488);
                double t33520 = c0f*t33507*t33509*2.0;
                double t33521 = c0p*t33510*t33490*2.0;
                double t33511 = t33520-t33521;
                double t33512 = t33494+1.0;
                double t33513 = pow(t33512,4.0/3.0);
                double t33514 = -t33494+1.0;
                double t33515 = pow(t33514,4.0/3.0);
                double t33516 = t33513+t33515-2.0;
                double t33517 = 1.0/(t33472*t33472);
                double t33548 = t33517*t33491;
                double t33518 = t33493-t33548;
                double t33519 = 1.0/(t33472*t33472*t33472*t33472);
                double t33522 = t33492*t33492;
                double t33523 = 1.0/pow(t33472,5.0/3.0);
                double t33524 = 1.0/sqrt(t33474);
                double t33525 = 1.0/t33488;
                double t33526 = 1.0/(t33483*t33483);
                double t33527 = b4p*t33523*t33479*(2.0/3.0);
                double t33528 = b2p*c*t33484*(1.0/3.0);
                double t33529 = b1p*c*t33524*t33484*(1.0/6.0);
                double t33530 = b3p*c*t33475*t33484*(1.0/2.0);
                double t33531 = t33530+t33527+t33528+t33529;
                double t33532 = t33531*t33525*t33490*t33526;
                double t33533 = 1.0/(t33472*t33472*t33472*t33472*t33472);
                double t33534 = 1.0/d2fz0;
                double t33535 = 1.0/Aa;
                double t33536 = b1a*t33475;
                double t33537 = b3a*t33477;
                double t33538 = b4a*t33480*t33479;
                double t33539 = b2a*c*t33473;
                double t33540 = t33536+t33537+t33538+t33539;
                double t33541 = 1.0/t33540;
                double t33542 = t33541*t33535*(1.0/2.0);
                double t33543 = t33542+1.0;
                double t33544 = log(t33543);
                double t33545 = a1a*c*t33473;
                double t33546 = t33545+1.0;
                double t33547 = pow(t33512,1.0/3.0);
                double t33549 = t33518*t33547*(4.0/3.0);
                double t33550 = pow(t33514,1.0/3.0);
                double t33625 = t33550*t33518*(4.0/3.0);
                double t33551 = -t33625+t33549;
                double t33552 = t33522*t33519;
                double t33553 = t33552-1.0;
                double t33554 = 1.0/pow(rho_a,1.0/3.0);
                double t33555 = c*t33554;
                double t33556 = sqrt(t33555);
                double t33557 = b1f*t33556;
                double t33558 = pow(t33555,3.0/2.0);
                double t33559 = b3f*t33558;
                double t33560 = 1.0/pow(rho_a,2.0/3.0);
                double t33561 = b4f*t33560*t33479;
                double t33562 = b2f*c*t33554;
                double t33563 = t33561+t33562+t33557+t33559;
                double t33564 = 1.0/pow(rho_a,4.0/3.0);
                double t33565 = b1p*t33556;
                double t33566 = b3p*t33558;
                double t33567 = b4p*t33560*t33479;
                double t33568 = b2p*c*t33554;
                double t33569 = t33565+t33566+t33567+t33568;
                double t33570 = 1.0/pow(rho_a,5.0/3.0);
                double t33571 = 1.0/sqrt(t33555);
                double t33572 = 1.0/t33563;
                double t33573 = t33572*t33498*(1.0/2.0);
                double t33574 = t33573+1.0;
                double t33575 = 1.0/t33569;
                double t33576 = t33485*t33575*(1.0/2.0);
                double t33577 = t33576+1.0;
                double t33578 = a1p*c*t33554;
                double t33579 = t33578+1.0;
                double t33580 = 1.0/t33577;
                double t33581 = 1.0/(t33569*t33569);
                double t33582 = b4p*t33570*t33479*(2.0/3.0);
                double t33583 = b2p*c*t33564*(1.0/3.0);
                double t33584 = b1p*c*t33571*t33564*(1.0/6.0);
                double t33585 = b3p*c*t33564*t33556*(1.0/2.0);
                double t33586 = t33582+t33583+t33584+t33585;
                double t33587 = t33580*t33581*t33586*t33579;
                double t33588 = log(t33577);
                double t33589 = pow(2.0,1.0/3.0);
                double t33590 = t33589*2.0;
                double t33591 = t33590-2.0;
                double t33592 = log(t33574);
                double t33593 = a1f*c*t33554;
                double t33594 = t33593+1.0;
                double t33595 = gcab*gcab;
                double t33599 = 1.0/pow(rho_a,8.0/3.0);
                double t33600 = gamma_aa*t33599*(1.0/2.0);
                double t33601 = 1.0/pow(rho_b,8.0/3.0);
                double t33602 = gamma_bb*t33601*(1.0/2.0);
                double t33596 = t33600+t33602;
                double t33597 = t33596*t33596;
                double t33598 = 1.0/pow(rho_a,1.1E1/3.0);
                double t33603 = t33595*t33595;
                double t33604 = t33597*t33597;
                double t33605 = t33595*t33597*6.0;
                double t33606 = gcab*t33595*t33596*t33597*4.0;
                double t33607 = t33603*t33604;
                double t33608 = gcab*t33596*4.0;
                double t33609 = t33605+t33606+t33607+t33608+1.0;
                double t33610 = gcab*t33596;
                double t33611 = t33610+1.0;
                double t33612 = t33595*t33597;
                double t33613 = gcab*t33596*2.0;
                double t33614 = t33612+t33613+1.0;
                double t33615 = t33595*t33597*3.0;
                double t33616 = gcab*t33595*t33596*t33597;
                double t33617 = gcab*t33596*3.0;
                double t33618 = t33615+t33616+t33617+1.0;
                double t33619 = 1.0/t33614;
                double t33620 = 1.0/t33618;
                double t33621 = 1.0/t33611;
                double t33622 = 1.0/t33609;
                double t33623 = 1.0/pow(t33472,7.0/3.0);
                double t33624 = 1.0/pow(t33472,8.0/3.0);
                double t33626 = 1.0/t33506;
                double t33627 = 1.0/(t33503*t33503);
                double t33628 = b4f*t33523*t33479*(2.0/3.0);
                double t33629 = b2f*c*t33484*(1.0/3.0);
                double t33630 = b1f*c*t33524*t33484*(1.0/6.0);
                double t33631 = b3f*c*t33475*t33484*(1.0/2.0);
                double t33632 = t33630+t33631+t33628+t33629;
                double t33633 = a1f*c*c0f*t33507*t33484*(2.0/3.0);
                double t33635 = t33632*t33509*t33626*t33627;
                double t33636 = a1p*c*c0p*t33510*t33484*(2.0/3.0);
                double t33634 = t33532+t33633-t33635-t33636;
                double t33637 = t33531*t33531;
                double t33638 = 1.0/pow(t33474,3.0/2.0);
                double t33639 = b4p*t33624*t33479*(1.0E1/9.0);
                double t33640 = b2p*c*t33623*(4.0/9.0);
                double t33641 = b1p*c*t33524*t33623*(2.0/9.0);
                double t33642 = b3p*c*t33623*t33475*(2.0/3.0);
                double t33643 = b3p*t33524*t33624*t33479*(1.0/1.2E1);
                double t33644 = t33640+t33641+t33642+t33643+t33639-b1p*t33624*t33638*t33479*(1.0/3.6E1);
                double t33645 = 1.0/(t33483*t33483*t33483);
                double t33646 = t33525*t33490*t33645*t33637*2.0;
                double t33647 = t33632*t33632;
                double t33648 = 1.0/(t33488*t33488);
                double t33649 = 1.0/(t33483*t33483*t33483*t33483);
                double t33650 = t33517*2.0;
                double t33651 = 1.0/(t33472*t33472*t33472);
                double t33658 = t33651*t33491*2.0;
                double t33652 = t33650-t33658;
                double t33653 = t33518*t33518;
                double t33654 = a1p*c*c0p*t33510*t33623*(8.0/9.0);
                double t33655 = 1.0/(t33472*t33472*t33472*t33472*t33472*t33472);
                double t33656 = t33522*t33533*4.0;
                double t33666 = t33491*t33492*t33519*4.0;
                double t33657 = t33656-t33666;
                double t33659 = t33550*t33652*(4.0/3.0);
                double t33660 = 1.0/pow(t33512,2.0/3.0);
                double t33661 = t33660*t33653*(4.0/9.0);
                double t33662 = 1.0/pow(t33514,2.0/3.0);
                double t33663 = t33653*t33662*(4.0/9.0);
                double t33664 = t33661+t33663+t33659-t33652*t33547*(4.0/3.0);
                double t33665 = 1.0/t33543;
                double t33667 = 1.0/(t33540*t33540);
                double t33668 = b4a*t33523*t33479*(2.0/3.0);
                double t33669 = b2a*c*t33484*(1.0/3.0);
                double t33670 = b1a*c*t33524*t33484*(1.0/6.0);
                double t33671 = b3a*c*t33475*t33484*(1.0/2.0);
                double t33672 = t33670+t33671+t33668+t33669;
                double t33673 = t33672*t33672;
                double t33674 = t33525*t33490*t33526*t33644;
                double t33675 = 1.0/t33574;
                double t33676 = b4f*t33570*t33479*(2.0/3.0);
                double t33677 = b2f*c*t33564*(1.0/3.0);
                double t33678 = b1f*c*t33571*t33564*(1.0/6.0);
                double t33679 = b3f*c*t33564*t33556*(1.0/2.0);
                double t33680 = t33676+t33677+t33678+t33679;
                double t33681 = 1.0/(t33563*t33563);
                double t33682 = 1.0/pow(rho_a,7.0/3.0);
                double t33683 = 1.0/pow(t33555,3.0/2.0);
                double t33684 = t33680*t33680;
                double t33685 = t33586*t33586;
                double t33686 = 1.0/(t33569*t33569*t33569);
                double t33687 = t33580*t33685*t33686*t33579*2.0;
                double t33688 = b4p*t33479*t33599*(1.0E1/9.0);
                double t33689 = b2p*c*t33682*(4.0/9.0);
                double t33690 = b3p*t33571*t33479*t33599*(1.0/1.2E1);
                double t33691 = b1p*c*t33571*t33682*(2.0/9.0);
                double t33692 = b3p*c*t33556*t33682*(2.0/3.0);
                double t33808 = b1p*t33683*t33479*t33599*(1.0/3.6E1);
                double t33693 = t33690+t33691-t33808+t33692+t33688+t33689;
                double t33694 = 1.0/(t33577*t33577);
                double t33695 = 1.0/(t33569*t33569*t33569*t33569);
                double t33696 = a1p*c*c0p*t33682*t33588*(8.0/9.0);
                double t33697 = a1f*c*c0f*t33564*t33592*(2.0/3.0);
                double t33698 = a1p*c*c0p*t33564*t33588*(2.0/3.0);
                double t33699 = t33490*t33637*t33485*t33648*t33649*(1.0/2.0);
                double t33771 = t33680*t33681*t33594*t33675;
                double t33700 = -t33771+t33587+t33697-t33698;
                double t33701 = gamma_aa*gamma_aa;
                double t33702 = gcaa*gcaa;
                double t33703 = t33701*t33701;
                double t33704 = t33702*t33702;
                double t33705 = 1.0/pow(rho_a,3.2E1/3.0);
                double t33706 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t33707 = 1.0/pow(rho_a,1.6E1/3.0);
                double t33708 = c0f*t33592*t33594*2.0;
                double t33710 = c0p*t33579*t33588*2.0;
                double t33709 = -t33710+t33708;
                double t33711 = 1.0/pow(rho_b,1.0/3.0);
                double t33712 = c*t33711;
                double t33713 = sqrt(t33712);
                double t33714 = pow(t33712,3.0/2.0);
                double t33715 = 1.0/pow(rho_b,2.0/3.0);
                double t33716 = b1p*t33713;
                double t33717 = b3p*t33714;
                double t33718 = b4p*t33715*t33479;
                double t33719 = b2p*c*t33711;
                double t33720 = t33716+t33717+t33718+t33719;
                double t33721 = 1.0/t33720;
                double t33722 = t33721*t33485*(1.0/2.0);
                double t33723 = t33722+1.0;
                double t33724 = log(t33723);
                double t33725 = a1p*c*t33711;
                double t33726 = t33725+1.0;
                double t33727 = c0p*t33724*t33726*2.0;
                double t33728 = t33511*t33522*t33516*t33519*t33497;
                double t33729 = Aa*t33516*t33534*t33544*t33553*t33546*t33497*2.0;
                double t33730 = gamma_aa*gcab*t33598*(1.6E1/3.0);
                double t33731 = gamma_aa*gcab*t33595*t33597*t33598*1.6E1;
                double t33732 = gamma_aa*t33603*t33596*t33597*t33598*(1.6E1/3.0);
                double t33733 = gamma_aa*t33595*t33596*t33598*1.6E1;
                double t33734 = t33730+t33731+t33732+t33733;
                double t33735 = 1.0/(t33611*t33611);
                double t33736 = 1.0/pow(rho_a,2.2E1/3.0);
                double t33737 = gamma_aa*gcab*t33598*(8.0/3.0);
                double t33738 = gamma_aa*t33595*t33596*t33598*(8.0/3.0);
                double t33739 = t33737+t33738;
                double t33740 = 1.0/(t33618*t33618);
                double t33741 = 1.0/pow(rho_a,1.4E1/3.0);
                double t33742 = 1.0/(t33609*t33609);
                double t33743 = 1.0/(t33614*t33614);
                double t33744 = gamma_aa*gcab*t33598*4.0;
                double t33745 = gamma_aa*gcab*t33595*t33597*t33598*4.0;
                double t33746 = gamma_aa*t33595*t33596*t33598*8.0;
                double t33747 = t33744+t33745+t33746;
                double t33748 = t33591*t33709*t33497;
                double t33749 = t33710+t33748;
                double t33750 = gamma_aa*gcaa*t33599*4.0;
                double t33751 = gamma_aa*gcaa*t33701*t33702*t33706*4.0;
                double t33752 = t33701*t33702*t33707*6.0;
                double t33753 = t33703*t33704*t33705;
                double t33754 = t33750+t33751+t33752+t33753+1.0;
                double t33755 = 1.0/t33754;
                double t33756 = gamma_aa*gcaa*t33599;
                double t33757 = t33756+1.0;
                double t33758 = 1.0/t33757;
                double t33759 = gamma_aa*gcaa*t33599*3.0;
                double t33760 = gamma_aa*gcaa*t33701*t33702*t33706;
                double t33761 = t33701*t33702*t33707*3.0;
                double t33762 = t33760+t33761+t33759+1.0;
                double t33763 = 1.0/t33762;
                double t33764 = gamma_aa*gcaa*t33599*2.0;
                double t33765 = t33701*t33702*t33707;
                double t33766 = t33764+t33765+1.0;
                double t33767 = 1.0/t33766;
                double t33768 = 1.0/pow(rho_a,1.9E1/3.0);
                double t33769 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t33770 = 1.0/pow(rho_a,3.5E1/3.0);
                double t33772 = ccaa4*t33703*t33704*t33770*t33755*(3.2E1/3.0);
                double t33773 = ccaa1*gamma_aa*gcaa*t33758*t33598*(8.0/3.0);
                double t33774 = ccaa3*gamma_aa*gcaa*t33701*t33702*t33763*t33769*8.0;
                double t33775 = ccaa2*t33701*t33702*t33767*t33768*(1.6E1/3.0);
                double t33776 = 1.0/(t33757*t33757);
                double t33777 = gamma_aa*gcaa*t33598*8.0;
                double t33778 = gamma_aa*gcaa*t33701*t33702*t33769*8.0;
                double t33779 = t33701*t33702*t33768*1.6E1;
                double t33780 = t33777+t33778+t33779;
                double t33781 = 1.0/(t33762*t33762);
                double t33782 = gamma_aa*gcaa*t33598*(3.2E1/3.0);
                double t33783 = gamma_aa*gcaa*t33701*t33702*t33769*3.2E1;
                double t33784 = t33701*t33702*t33768*3.2E1;
                double t33785 = t33703*t33704*t33770*(3.2E1/3.0);
                double t33786 = t33782+t33783+t33784+t33785;
                double t33787 = 1.0/(t33754*t33754);
                double t33788 = gamma_aa*gcaa*t33598*(1.6E1/3.0);
                double t33789 = t33701*t33702*t33768*(1.6E1/3.0);
                double t33790 = t33788+t33789;
                double t33791 = 1.0/(t33766*t33766);
                double t33792 = t33772+t33773+t33774+t33775-ccaa1*t33701*t33702*t33776*t33768*(8.0/3.0)-ccaa2*t33701*t33702*t33707*t33790*t33791-ccaa4*t33703*t33704*t33705*t33786*t33787-ccaa3*gamma_aa*gcaa*t33701*t33702*t33706*t33780*t33781;
                double t33793 = 1.0/pow(rho_a,1.0E1);
                double t33794 = 1.0/pow(rho_a,3.8E1/3.0);
                double t33795 = ccaa4*t33703*t33704*t33705*t33755;
                double t33796 = ccaa1*gamma_aa*gcaa*t33758*t33599;
                double t33797 = ccaa3*gamma_aa*gcaa*t33701*t33702*t33706*t33763;
                double t33798 = ccaa2*t33701*t33702*t33707*t33767;
                double t33799 = ccaa0+t33795+t33796+t33797+t33798;
                double t33800 = 1.0/(t33563*t33563*t33563);
                double t33801 = b4f*t33479*t33599*(1.0E1/9.0);
                double t33802 = b2f*c*t33682*(4.0/9.0);
                double t33803 = b3f*t33571*t33479*t33599*(1.0/1.2E1);
                double t33804 = b1f*c*t33571*t33682*(2.0/9.0);
                double t33805 = b3f*c*t33556*t33682*(2.0/3.0);
                double t33806 = t33801+t33802+t33803+t33804+t33805-b1f*t33683*t33479*t33599*(1.0/3.6E1);
                double t33807 = t33806*t33681*t33594*t33675;
                double t33809 = t33580*t33581*t33693*t33579;
                double t33810 = 1.0/(t33574*t33574);
                double t33811 = 1.0/(t33563*t33563*t33563*t33563);
                double t33812 = t33810*t33811*t33594*t33684*t33498*(1.0/2.0);
                double t33813 = t33485*t33685*t33694*t33695*t33579*(1.0/2.0);
                double t33814 = a1f*c*t33680*t33564*t33681*t33675*(2.0/3.0);
                double t33815 = a1p*c*t33580*t33581*t33564*t33586*(2.0/3.0);
                v_rho_a_rho_a[Q] += scale * (rho_a*t33749+rho_b*(t33727-t33591*t33497*(t33727-c0f*log((t33498*(1.0/2.0))/(b1f*t33713+b3f*t33714+b2f*c*t33711+b4f*t33715*t33479)+1.0)*(a1f*c*t33711+1.0)*2.0))-t33472*(t33521+t33728+t33729))*(-ccab2*t33743*t33595*t33597*(gamma_aa*gcab*t33741*(8.8E1/9.0)+t33701*t33736*t33595*(3.2E1/9.0)+gamma_aa*t33741*t33595*t33596*(8.8E1/9.0))+ccab4*t33603*t33604*(t33734*t33734)*1.0/(t33609*t33609*t33609)*2.0+ccab2*1.0/(t33614*t33614*t33614)*t33595*(t33739*t33739)*t33597*2.0+ccab1*gamma_aa*gcab*t33621*t33741*(4.4E1/9.0)-ccab1*t33701*t33735*t33736*t33595*(3.2E1/9.0)+ccab2*t33701*t33619*t33736*t33595*(3.2E1/9.0)-ccab4*t33603*t33604*t33742*(gamma_aa*gcab*t33741*(1.76E2/9.0)+t33701*t33736*t33595*(6.4E1/3.0)+gamma_aa*t33741*t33595*t33596*(1.76E2/3.0)+t33701*t33603*t33736*t33597*(6.4E1/3.0)+gamma_aa*gcab*t33741*t33595*t33597*(1.76E2/3.0)+gamma_aa*t33603*t33741*t33596*t33597*(1.76E2/9.0)+gcab*t33701*t33736*t33595*t33596*(1.28E2/3.0))+ccab4*t33701*t33603*t33622*t33736*t33597*(6.4E1/3.0)-ccab1*gamma_aa*t33741*t33735*t33595*t33596*(4.4E1/9.0)+ccab2*gamma_aa*t33741*t33619*t33595*t33596*(8.8E1/9.0)+ccab3*gcab*1.0/(t33618*t33618*t33618)*(t33747*t33747)*t33595*t33596*t33597*2.0+ccab3*gamma_aa*gcab*t33620*t33741*t33595*t33597*(4.4E1/3.0)+ccab4*gamma_aa*t33603*t33622*t33741*t33596*t33597*(1.76E2/9.0)-ccab2*gamma_aa*t33743*t33595*t33739*t33596*t33598*(1.6E1/3.0)+ccab3*gcab*t33620*t33701*t33736*t33595*t33596*(3.2E1/3.0)+ccab1*gcab*1.0/(t33611*t33611*t33611)*t33701*t33736*t33595*t33596*(3.2E1/9.0)-ccab3*gcab*t33740*t33595*t33596*t33597*(gamma_aa*gcab*t33741*(4.4E1/3.0)+t33701*t33736*t33595*(3.2E1/3.0)+gamma_aa*t33741*t33595*t33596*(8.8E1/3.0)+gamma_aa*gcab*t33741*t33595*t33597*(4.4E1/3.0)+gcab*t33701*t33736*t33595*t33596*(3.2E1/3.0))-ccab3*gamma_aa*gcab*t33740*t33747*t33595*t33597*t33598*8.0-ccab4*gamma_aa*t33603*t33742*t33734*t33596*t33597*t33598*(3.2E1/3.0))+t33799*(-t33587+t33698+t33700*t33591*t33497)*2.0+t33792*t33749*2.0+(t33521+t33728+t33729+rho_a*(-t33587+t33698+t33591*t33497*(t33587+t33697-t33680*t33681*t33594*t33675-a1p*c*c0p*t33564*t33588*(2.0/3.0)))+t33472*(t33532-a1p*c*c0p*t33510*t33484*(2.0/3.0)-t33511*t33522*t33533*t33516*t33497*4.0+t33511*t33522*t33551*t33519*t33497-t33522*t33516*t33634*t33519*t33497+t33511*t33516*t33491*t33492*t33519*t33497*4.0+Aa*t33551*t33534*t33544*t33553*t33546*t33497*2.0-Aa*t33516*t33534*t33544*t33546*t33657*t33497*2.0+t33516*t33534*t33553*t33546*t33672*t33665*t33667*t33497-Aa*a1a*c*t33516*t33534*t33544*t33553*t33484*t33497*(2.0/3.0))-c0p*t33579*t33588*2.0-t33591*t33709*t33497)*(ccab1*gamma_aa*gcab*t33621*t33598*(4.0/3.0)-ccab4*t33603*t33604*t33742*t33734-ccab2*t33743*t33595*t33739*t33597-ccab1*gamma_aa*t33735*t33595*t33596*t33598*(4.0/3.0)+ccab2*gamma_aa*t33619*t33595*t33596*t33598*(8.0/3.0)+ccab3*gamma_aa*gcab*t33620*t33595*t33597*t33598*4.0+ccab4*gamma_aa*t33603*t33622*t33596*t33597*t33598*(1.6E1/3.0)-ccab3*gcab*t33740*t33747*t33595*t33596*t33597)*2.0-(ccab0+ccab1*gcab*t33621*t33596+ccab4*t33603*t33604*t33622+ccab2*t33619*t33595*t33597+ccab3*gcab*t33620*t33595*t33596*t33597)*(-t33472*(-t33654-t33646+t33674+t33699+t33522*t33516*t33519*t33497*(t33654+t33646-t33674-t33699-1.0/(t33503*t33503*t33503)*t33509*t33626*t33647*2.0+t33509*t33626*t33627*(b2f*c*t33623*(4.0/9.0)+b4f*t33624*t33479*(1.0E1/9.0)+b1f*c*t33524*t33623*(2.0/9.0)+b3f*c*t33623*t33475*(2.0/3.0)-b1f*t33624*t33638*t33479*(1.0/3.6E1)+b3f*t33524*t33624*t33479*(1.0/1.2E1))+1.0/(t33503*t33503*t33503*t33503)*1.0/(t33506*t33506)*t33509*t33647*t33498*(1.0/2.0)-a1f*c*c0f*t33623*t33507*(8.0/9.0)+a1f*c*t33632*t33626*t33627*t33484*(2.0/3.0)-a1p*c*t33531*t33525*t33526*t33484*(2.0/3.0))+t33511*t33522*t33533*t33551*t33497*8.0-t33511*t33522*t33516*t33655*t33497*2.0E1-t33522*t33533*t33516*t33634*t33497*8.0-t33511*t33522*t33519*t33664*t33497+t33522*t33551*t33634*t33519*t33497*2.0-t33511*t33516*t33492*t33519*t33497*1.2E1+t33511*t33533*t33516*t33491*t33492*t33497*3.2E1-t33511*t33551*t33491*t33492*t33519*t33497*8.0+t33516*t33634*t33491*t33492*t33519*t33497*8.0+a1p*c*t33531*t33525*t33526*t33484*(2.0/3.0)+Aa*t33551*t33534*t33544*t33546*t33657*t33497*4.0-Aa*t33534*t33544*t33553*t33546*t33664*t33497*2.0-Aa*t33516*t33534*t33544*t33546*t33497*(t33522*t33655*2.0E1+t33492*t33519*1.2E1-t33533*t33491*t33492*3.2E1)*2.0-t33551*t33534*t33553*t33546*t33672*t33665*t33667*t33497*2.0+t33516*t33534*t33546*t33672*t33665*t33657*t33667*t33497*2.0-1.0/(t33540*t33540*t33540)*t33516*t33534*t33553*t33546*t33673*t33665*t33497*2.0+t33516*t33534*t33553*t33546*t33665*t33667*t33497*(b2a*c*t33623*(4.0/9.0)+b4a*t33624*t33479*(1.0E1/9.0)+b1a*c*t33524*t33623*(2.0/9.0)+b3a*c*t33623*t33475*(2.0/3.0)-b1a*t33624*t33638*t33479*(1.0/3.6E1)+b3a*t33524*t33624*t33479*(1.0/1.2E1))-Aa*a1a*c*t33623*t33516*t33534*t33544*t33553*t33497*(8.0/9.0)+Aa*a1a*c*t33551*t33534*t33544*t33553*t33484*t33497*(4.0/3.0)-Aa*a1a*c*t33516*t33534*t33544*t33484*t33657*t33497*(4.0/3.0)+1.0/(t33540*t33540*t33540*t33540)*t33516*t33534*1.0/(t33543*t33543)*t33535*t33553*t33546*t33673*t33497*(1.0/2.0)+a1a*c*t33516*t33534*t33553*t33672*t33484*t33665*t33667*t33497*(2.0/3.0))+rho_a*(t33813+t33815+t33809-t33687-t33696+t33591*t33497*(t33812+t33814+t33807+t33687+t33696-t33800*t33594*t33675*t33684*2.0-t33580*t33581*t33693*t33579-a1f*c*c0f*t33592*t33682*(8.0/9.0)-t33485*t33685*t33694*t33695*t33579*(1.0/2.0)-a1p*c*t33580*t33581*t33564*t33586*(2.0/3.0)))+t33700*t33591*t33497*2.0+t33531*t33525*t33490*t33526*2.0-t33580*t33581*t33586*t33579*2.0-a1p*c*c0p*t33510*t33484*(4.0/3.0)+a1p*c*c0p*t33564*t33588*(4.0/3.0)-t33511*t33522*t33533*t33516*t33497*8.0+t33511*t33522*t33551*t33519*t33497*2.0-t33522*t33516*t33634*t33519*t33497*2.0+t33511*t33516*t33491*t33492*t33519*t33497*8.0+Aa*t33551*t33534*t33544*t33553*t33546*t33497*4.0-Aa*t33516*t33534*t33544*t33546*t33657*t33497*4.0+t33516*t33534*t33553*t33546*t33672*t33665*t33667*t33497*2.0-Aa*a1a*c*t33516*t33534*t33544*t33553*t33484*t33497*(4.0/3.0))+rho_a*t33792*(t33587-t33698+t33591*t33497*(t33771-t33587-t33697+t33698))*2.0-rho_a*t33749*(ccaa1*gamma_aa*gcaa*t33741*t33758*(8.8E1/9.0)-ccaa1*t33701*t33702*t33736*t33776*2.4E1+ccaa2*t33701*t33702*t33736*t33767*(3.04E2/9.0)+ccaa4*t33703*t33704*t33755*t33794*(1.12E3/9.0)-ccaa2*t33701*t33702*t33790*t33791*t33768*(3.2E1/3.0)-ccaa4*t33703*t33704*t33770*t33786*t33787*(6.4E1/3.0)-ccaa2*t33701*t33702*t33707*t33791*(gamma_aa*gcaa*t33741*(1.76E2/9.0)+t33701*t33702*t33736*(3.04E2/9.0))-ccaa4*t33703*t33704*t33705*t33787*(gamma_aa*gcaa*t33741*(3.52E2/9.0)+t33701*t33702*t33736*(6.08E2/3.0)+t33703*t33704*t33794*(1.12E3/9.0)+gamma_aa*gcaa*t33701*t33702*t33793*2.88E2)+ccaa2*t33701*t33702*t33707*(t33790*t33790)*1.0/(t33766*t33766*t33766)*2.0+ccaa4*t33703*t33704*t33705*1.0/(t33754*t33754*t33754)*(t33786*t33786)*2.0+ccaa3*gamma_aa*gcaa*t33701*t33702*t33763*t33793*7.2E1+ccaa1*gamma_aa*gcaa*t33701*t33702*1.0/(t33757*t33757*t33757)*t33793*(1.28E2/9.0)+ccaa3*gamma_aa*gcaa*t33701*t33702*t33706*1.0/(t33762*t33762*t33762)*(t33780*t33780)*2.0-ccaa3*gamma_aa*gcaa*t33701*t33702*t33706*t33781*(gamma_aa*gcaa*t33741*(8.8E1/3.0)+t33701*t33702*t33736*(3.04E2/3.0)+gamma_aa*gcaa*t33701*t33702*t33793*7.2E1)-ccaa3*gamma_aa*gcaa*t33701*t33702*t33780*t33781*t33769*1.6E1)+rho_a*t33799*(t33813+t33815+t33809-t33687-t33696+t33591*t33497*(t33812-t33813+t33814-t33815+t33807-t33809+t33687+t33696-t33800*t33594*t33675*t33684*2.0-a1f*c*c0f*t33592*t33682*(8.0/9.0)));
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t33817 = rho_a+rho_b;
                double t33818 = 1.0/pow(t33817,1.0/3.0);
                double t33819 = c*t33818;
                double t33820 = sqrt(t33819);
                double t33821 = b1p*t33820;
                double t33822 = pow(t33819,3.0/2.0);
                double t33823 = b3p*t33822;
                double t33824 = c*c;
                double t33825 = 1.0/pow(t33817,2.0/3.0);
                double t33826 = b4p*t33824*t33825;
                double t33827 = b2p*c*t33818;
                double t33828 = t33821+t33823+t33826+t33827;
                double t33829 = 1.0/pow(t33817,4.0/3.0);
                double t33830 = 1.0/c0p;
                double t33831 = 1.0/t33828;
                double t33832 = t33830*t33831*(1.0/2.0);
                double t33833 = t33832+1.0;
                double t33834 = a1p*c*t33818;
                double t33835 = t33834+1.0;
                double t33836 = rho_a-rho_b;
                double t33837 = t33836*t33836;
                double t33838 = 1.0/t33817;
                double t33839 = t33836*t33838;
                double t33840 = two_13*2.0;
                double t33841 = t33840-2.0;
                double t33842 = 1.0/t33841;
                double t33843 = 1.0/c0f;
                double t33844 = b1f*t33820;
                double t33845 = b3f*t33822;
                double t33846 = b4f*t33824*t33825;
                double t33847 = b2f*c*t33818;
                double t33848 = t33844+t33845+t33846+t33847;
                double t33849 = 1.0/t33848;
                double t33850 = t33843*t33849*(1.0/2.0);
                double t33851 = t33850+1.0;
                double t33852 = log(t33851);
                double t33853 = a1f*c*t33818;
                double t33854 = t33853+1.0;
                double t33855 = log(t33833);
                double t33865 = c0f*t33852*t33854*2.0;
                double t33866 = c0p*t33835*t33855*2.0;
                double t33856 = t33865-t33866;
                double t33857 = t33839+1.0;
                double t33858 = pow(t33857,4.0/3.0);
                double t33859 = -t33839+1.0;
                double t33860 = pow(t33859,4.0/3.0);
                double t33861 = t33860+t33858-2.0;
                double t33862 = 1.0/(t33817*t33817);
                double t33893 = t33862*t33836;
                double t33863 = t33838-t33893;
                double t33864 = 1.0/(t33817*t33817*t33817*t33817);
                double t33867 = t33837*t33837;
                double t33868 = 1.0/pow(t33817,5.0/3.0);
                double t33869 = 1.0/sqrt(t33819);
                double t33870 = 1.0/t33833;
                double t33871 = 1.0/(t33828*t33828);
                double t33872 = b4p*t33824*t33868*(2.0/3.0);
                double t33873 = b2p*c*t33829*(1.0/3.0);
                double t33874 = b1p*c*t33829*t33869*(1.0/6.0);
                double t33875 = b3p*c*t33820*t33829*(1.0/2.0);
                double t33876 = t33872+t33873+t33874+t33875;
                double t33877 = t33870*t33835*t33871*t33876;
                double t33878 = 1.0/(t33817*t33817*t33817*t33817*t33817);
                double t33879 = 1.0/d2fz0;
                double t33880 = 1.0/Aa;
                double t33881 = b1a*t33820;
                double t33882 = b3a*t33822;
                double t33883 = b4a*t33824*t33825;
                double t33884 = b2a*c*t33818;
                double t33885 = t33881+t33882+t33883+t33884;
                double t33886 = 1.0/t33885;
                double t33887 = t33880*t33886*(1.0/2.0);
                double t33888 = t33887+1.0;
                double t33889 = log(t33888);
                double t33890 = a1a*c*t33818;
                double t33891 = t33890+1.0;
                double t33892 = pow(t33857,1.0/3.0);
                double t33894 = t33863*t33892*(4.0/3.0);
                double t33895 = pow(t33859,1.0/3.0);
                double t34039 = t33863*t33895*(4.0/3.0);
                double t33896 = t33894-t34039;
                double t33897 = t33864*t33867;
                double t33898 = t33897-1.0;
                double t33899 = 1.0/pow(rho_a,1.0/3.0);
                double t33900 = c*t33899;
                double t33901 = sqrt(t33900);
                double t33902 = b1f*t33901;
                double t33903 = pow(t33900,3.0/2.0);
                double t33904 = b3f*t33903;
                double t33905 = 1.0/pow(rho_a,2.0/3.0);
                double t33906 = b4f*t33824*t33905;
                double t33907 = b2f*c*t33899;
                double t33908 = t33902+t33904+t33906+t33907;
                double t33909 = 1.0/pow(rho_a,4.0/3.0);
                double t33910 = b1p*t33901;
                double t33911 = b3p*t33903;
                double t33912 = b4p*t33824*t33905;
                double t33913 = b2p*c*t33899;
                double t33914 = t33910+t33911+t33912+t33913;
                double t33915 = 1.0/pow(rho_a,5.0/3.0);
                double t33916 = 1.0/sqrt(t33900);
                double t33917 = 1.0/t33908;
                double t33918 = t33843*t33917*(1.0/2.0);
                double t33919 = t33918+1.0;
                double t33920 = 1.0/t33914;
                double t33921 = t33830*t33920*(1.0/2.0);
                double t33922 = t33921+1.0;
                double t33923 = a1p*c*t33899;
                double t33924 = t33923+1.0;
                double t33925 = 1.0/t33922;
                double t33926 = 1.0/(t33914*t33914);
                double t33927 = b4p*t33824*t33915*(2.0/3.0);
                double t33928 = b2p*c*t33909*(1.0/3.0);
                double t33929 = b1p*c*t33916*t33909*(1.0/6.0);
                double t33930 = b3p*c*t33901*t33909*(1.0/2.0);
                double t33931 = t33930+t33927+t33928+t33929;
                double t33932 = t33931*t33924*t33925*t33926;
                double t33933 = log(t33922);
                double t33934 = pow(2.0,1.0/3.0);
                double t33935 = t33934*2.0;
                double t33936 = t33935-2.0;
                double t33937 = log(t33919);
                double t33938 = a1f*c*t33899;
                double t33939 = t33938+1.0;
                double t33940 = gcab*gcab;
                double t33944 = 1.0/pow(rho_a,8.0/3.0);
                double t33945 = gamma_aa*t33944*(1.0/2.0);
                double t33946 = 1.0/pow(rho_b,8.0/3.0);
                double t33947 = gamma_bb*t33946*(1.0/2.0);
                double t33941 = t33945+t33947;
                double t33942 = t33941*t33941;
                double t33943 = 1.0/pow(rho_b,1.1E1/3.0);
                double t33948 = t33940*t33940;
                double t33949 = t33942*t33942;
                double t33950 = t33940*t33942*6.0;
                double t33951 = gcab*t33940*t33941*t33942*4.0;
                double t33952 = t33948*t33949;
                double t33953 = gcab*t33941*4.0;
                double t33954 = t33950+t33951+t33952+t33953+1.0;
                double t33955 = gcab*t33941;
                double t33956 = t33955+1.0;
                double t33957 = t33940*t33942;
                double t33958 = gcab*t33941*2.0;
                double t33959 = t33957+t33958+1.0;
                double t33960 = t33940*t33942*3.0;
                double t33961 = gcab*t33940*t33941*t33942;
                double t33962 = gcab*t33941*3.0;
                double t33963 = t33960+t33961+t33962+1.0;
                double t33964 = t33842*t33861*t33836*t33837*t33864*t33856*4.0;
                double t33965 = t33838+t33893;
                double t33966 = 1.0/t33851;
                double t33967 = 1.0/(t33848*t33848);
                double t33968 = b4f*t33824*t33868*(2.0/3.0);
                double t33969 = b2f*c*t33829*(1.0/3.0);
                double t33970 = b1f*c*t33829*t33869*(1.0/6.0);
                double t33971 = b3f*c*t33820*t33829*(1.0/2.0);
                double t33972 = t33970+t33971+t33968+t33969;
                double t33973 = a1f*c*c0f*t33852*t33829*(2.0/3.0);
                double t33974 = t33867*t33878*4.0;
                double t33975 = t33892*t33965*(4.0/3.0);
                double t34038 = t33965*t33895*(4.0/3.0);
                double t33976 = t33975-t34038;
                double t33977 = 1.0/t33888;
                double t33978 = 1.0/(t33885*t33885);
                double t33979 = b4a*t33824*t33868*(2.0/3.0);
                double t33980 = b2a*c*t33829*(1.0/3.0);
                double t33981 = b1a*c*t33829*t33869*(1.0/6.0);
                double t33982 = b3a*c*t33820*t33829*(1.0/2.0);
                double t33983 = t33980+t33981+t33982+t33979;
                double t33984 = t33842*t33861*t33891*t33983*t33977*t33879*t33978*t33898;
                double t33985 = 1.0/pow(rho_b,1.0/3.0);
                double t33986 = c*t33985;
                double t33987 = sqrt(t33986);
                double t33988 = b1f*t33987;
                double t33989 = pow(t33986,3.0/2.0);
                double t33990 = b3f*t33989;
                double t33991 = 1.0/pow(rho_b,2.0/3.0);
                double t33992 = b4f*t33824*t33991;
                double t33993 = b2f*c*t33985;
                double t33994 = t33990+t33992+t33993+t33988;
                double t33995 = 1.0/pow(rho_b,4.0/3.0);
                double t33996 = b1p*t33987;
                double t33997 = b3p*t33989;
                double t33998 = b4p*t33824*t33991;
                double t33999 = b2p*c*t33985;
                double t34000 = t33996+t33997+t33998+t33999;
                double t34001 = 1.0/pow(rho_b,5.0/3.0);
                double t34002 = 1.0/sqrt(t33986);
                double t34003 = 1.0/t33994;
                double t34004 = t33843*t34003*(1.0/2.0);
                double t34005 = t34004+1.0;
                double t34006 = 1.0/t34000;
                double t34007 = t33830*t34006*(1.0/2.0);
                double t34008 = t34007+1.0;
                double t34009 = a1p*c*t33985;
                double t34010 = t34009+1.0;
                double t34011 = 1.0/t34008;
                double t34012 = 1.0/(t34000*t34000);
                double t34013 = b4p*t33824*t34001*(2.0/3.0);
                double t34014 = b2p*c*t33995*(1.0/3.0);
                double t34015 = b1p*c*t33995*t34002*(1.0/6.0);
                double t34016 = b3p*c*t33995*t33987*(1.0/2.0);
                double t34017 = t34013+t34014+t34015+t34016;
                double t34018 = t34010*t34011*t34012*t34017;
                double t34019 = log(t34008);
                double t34020 = log(t34005);
                double t34021 = a1f*c*t33985;
                double t34022 = t34021+1.0;
                double t34023 = t33842*t33861*t33864*t33856*t33867;
                double t34024 = Aa*t33842*t33861*t33891*t33879*t33889*t33898*2.0;
                double t34025 = 1.0/pow(rho_a,1.1E1/3.0);
                double t34026 = 1.0/(t33963*t33963);
                double t34027 = 1.0/t33956;
                double t34028 = 1.0/(t33954*t33954);
                double t34029 = 1.0/(t33959*t33959);
                double t34030 = 1.0/t33954;
                double t34031 = 1.0/(t33956*t33956);
                double t34032 = 1.0/t33959;
                double t34033 = 1.0/t33963;
                double t34035 = a1p*c*c0p*t33855*t33829*(2.0/3.0);
                double t34040 = t33854*t33972*t33966*t33967;
                double t34034 = t33973+t33877-t34040-t34035;
                double t34036 = 1.0/pow(t33817,7.0/3.0);
                double t34037 = 1.0/pow(t33817,8.0/3.0);
                double t34041 = t33876*t33876;
                double t34042 = 1.0/pow(t33819,3.0/2.0);
                double t34043 = b4p*t33824*t34037*(1.0E1/9.0);
                double t34044 = b2p*c*t34036*(4.0/9.0);
                double t34045 = b1p*c*t33869*t34036*(2.0/9.0);
                double t34046 = b3p*c*t33820*t34036*(2.0/3.0);
                double t34047 = b3p*t33824*t33869*t34037*(1.0/1.2E1);
                double t34048 = t34043+t34044+t34045+t34046+t34047-b1p*t33824*t34042*t34037*(1.0/3.6E1);
                double t34049 = t33870*t33835*t33871*t34048;
                double t34050 = 1.0/(t33828*t33828*t33828);
                double t34051 = t33972*t33972;
                double t34052 = 1.0/(t33833*t33833);
                double t34053 = 1.0/(t33828*t33828*t33828*t33828);
                double t34054 = t33830*t33835*t34041*t34052*t34053*(1.0/2.0);
                double t34055 = 1.0/(t33817*t33817*t33817);
                double t34056 = a1p*c*t33870*t33871*t33829*t33876*(2.0/3.0);
                double t34057 = 1.0/(t33817*t33817*t33817*t33817*t33817*t33817);
                double t34058 = t33836*t33837*t33864*4.0;
                double t34059 = t33974+t34058;
                double t34060 = t33836*t33895*t34055*(8.0/3.0);
                double t34061 = 1.0/pow(t33857,2.0/3.0);
                double t34062 = t33863*t33965*t34061*(4.0/9.0);
                double t34063 = 1.0/pow(t33859,2.0/3.0);
                double t34064 = t33863*t33965*t34063*(4.0/9.0);
                double t34065 = t34060+t34062+t34064-t33836*t33892*t34055*(8.0/3.0);
                double t34066 = t33983*t33983;
                double t34067 = t33974-t34058;
                double t34068 = t33842*t33864*t33856*t33867*t33976;
                double t34069 = t33842*t33864*t33856*t33867*t33896;
                double t34070 = Aa*t33842*t33861*t33891*t33879*t33889*t34059*2.0;
                double t34071 = Aa*t33842*t33891*t33976*t33879*t33889*t33898*2.0;
                double t34072 = Aa*t33842*t33891*t33896*t33879*t33889*t33898*2.0;
                double t34073 = c0f*t33937*t33939*2.0;
                double t34075 = c0p*t33924*t33933*2.0;
                double t34074 = t34073-t34075;
                double t34076 = c0f*t34020*t34022*2.0;
                double t34078 = c0p*t34010*t34019*2.0;
                double t34077 = t34076-t34078;
                double t34079 = gamma_aa*gcab*t34025*(8.0/3.0);
                double t34080 = gamma_aa*t33940*t33941*t34025*(8.0/3.0);
                double t34081 = t34080+t34079;
                double t34082 = gamma_bb*gcab*t33943*(8.0/3.0);
                double t34083 = gamma_bb*t33940*t33941*t33943*(8.0/3.0);
                double t34084 = t34082+t34083;
                double t34085 = gamma_aa*gcab*t34025*(1.6E1/3.0);
                double t34086 = gamma_aa*gcab*t33940*t33942*t34025*1.6E1;
                double t34087 = gamma_aa*t33941*t33942*t33948*t34025*(1.6E1/3.0);
                double t34088 = gamma_aa*t33940*t33941*t34025*1.6E1;
                double t34089 = t34085+t34086+t34087+t34088;
                double t34090 = gamma_bb*gcab*t33943*(1.6E1/3.0);
                double t34091 = gamma_bb*gcab*t33940*t33942*t33943*1.6E1;
                double t34092 = gamma_bb*t33941*t33942*t33943*t33948*(1.6E1/3.0);
                double t34093 = gamma_bb*t33940*t33941*t33943*1.6E1;
                double t34094 = t34090+t34091+t34092+t34093;
                double t34095 = gamma_aa*gcab*t34025*4.0;
                double t34096 = gamma_aa*gcab*t33940*t33942*t34025*4.0;
                double t34097 = gamma_aa*t33940*t33941*t34025*8.0;
                double t34098 = t34095+t34096+t34097;
                double t34099 = gamma_bb*gcab*t33943*4.0;
                double t34100 = gamma_bb*gcab*t33940*t33942*t33943*4.0;
                double t34101 = gamma_bb*t33940*t33941*t33943*8.0;
                double t34102 = t34100+t34101+t34099;
                v_rho_a_rho_b[Q] += scale * (t33866+t34023+t34024+rho_a*(-t33932+t33842*t33936*(t33932-(1.0/(t33908*t33908)*t33939*(b2f*c*t33909*(1.0/3.0)+b4f*t33824*t33915*(2.0/3.0)+b1f*c*t33916*t33909*(1.0/6.0)+b3f*c*t33901*t33909*(1.0/2.0)))/t33919+a1f*c*c0f*t33909*t33937*(2.0/3.0)-a1p*c*c0p*t33933*t33909*(2.0/3.0))+a1p*c*c0p*t33933*t33909*(2.0/3.0))+t33817*(t33964+t33984+t33877+t34072+t34069-a1p*c*c0p*t33855*t33829*(2.0/3.0)-t33842*t33861*t33856*t33867*t33878*4.0-t33842*t33861*t33864*t33867*t34034-Aa*t33842*t33861*t33891*t33879*t33889*(t33974-t33836*t33837*t33864*4.0)*2.0-Aa*a1a*c*t33842*t33861*t33829*t33879*t33889*t33898*(2.0/3.0))-c0p*t33924*t33933*2.0-t33842*t33936*t34074)*(ccab1*gamma_bb*gcab*t33943*t34027*(4.0/3.0)-ccab2*t33940*t33942*t34029*t34084-ccab4*t33948*t33949*t34028*t34094-ccab1*gamma_bb*t33940*t33941*t33943*t34031*(4.0/3.0)+ccab2*gamma_bb*t33940*t33941*t33943*t34032*(8.0/3.0)+ccab3*gamma_bb*gcab*t33940*t33942*t33943*t34033*4.0+ccab4*gamma_bb*t33941*t33942*t33943*t33948*t34030*(1.6E1/3.0)-ccab3*gcab*t33940*t33941*t33942*t34102*t34026)+(ccab0+ccab1*gcab*t33941*t34027+ccab2*t33940*t33942*t34032+ccab4*t33948*t33949*t34030+ccab3*gcab*t33940*t33941*t33942*t34033)*(t34070+t34071-t34072+t34068-t34069+t33817*(t34054+t34056+t34049-t33870*t33835*t34041*t34050*2.0+t33842*t33864*t33867*t33896*(t33973+t33877-t34040-t34035)-a1p*c*c0p*t33855*t34036*(8.0/9.0)-t33842*t33861*t33864*t33867*(t34054+t34056+t34049-t33870*t33835*t34041*t34050*2.0+t33854*1.0/(t33848*t33848*t33848)*t33966*t34051*2.0-t33854*t33966*t33967*(b2f*c*t34036*(4.0/9.0)+b4f*t33824*t34037*(1.0E1/9.0)+b1f*c*t33869*t34036*(2.0/9.0)+b3f*c*t33820*t34036*(2.0/3.0)-b1f*t33824*t34042*t34037*(1.0/3.6E1)+b3f*t33824*t33869*t34037*(1.0/1.2E1))-1.0/(t33851*t33851)*t33843*t33854*1.0/(t33848*t33848*t33848*t33848)*t34051*(1.0/2.0)+a1f*c*c0f*t33852*t34036*(8.0/9.0)-a1p*c*c0p*t33855*t34036*(8.0/9.0)-a1f*c*t33972*t33829*t33966*t33967*(2.0/3.0))+t33842*t33861*t33837*t33864*t33856*1.2E1-t33842*t33856*t33867*t33976*t33878*4.0+t33842*t33856*t33867*t33878*t33896*4.0-t33842*t33861*t33867*t33878*t34034*8.0-t33842*t33861*t33856*t33867*t34057*2.0E1-t33842*t33864*t33867*t33976*t34034+t33842*t33864*t33856*t33867*t34065+t33842*t33836*t33837*t33864*t33856*t33976*4.0+t33842*t33836*t33837*t33864*t33856*t33896*4.0-Aa*t33842*t33891*t33976*t33879*t33889*t34067*2.0+Aa*t33842*t33891*t33879*t33889*t33898*t34065*2.0+Aa*t33842*t33891*t33896*t33879*t33889*t34059*2.0+Aa*t33842*t33861*t33891*t33879*t33889*(t33837*t33864*1.2E1-t33867*t34057*2.0E1)*2.0+t33842*t33891*t33983*t33976*t33977*t33879*t33978*t33898-t33842*t33891*t33983*t33896*t33977*t33879*t33978*t33898+t33842*t33861*t33891*t33983*t33977*t33879*t33978*t34067+t33842*t33861*t33891*t33983*t33977*t33879*t33978*t34059-t33842*t33861*t33891*1.0/(t33885*t33885*t33885)*t33977*t33879*t33898*t34066*2.0+t33842*t33861*t33891*t33977*t33879*t33978*t33898*(b2a*c*t34036*(4.0/9.0)+b4a*t33824*t34037*(1.0E1/9.0)+b1a*c*t33869*t34036*(2.0/9.0)+b3a*c*t33820*t34036*(2.0/3.0)-b1a*t33824*t34042*t34037*(1.0/3.6E1)+b3a*t33824*t33869*t34037*(1.0/1.2E1))-Aa*a1a*c*t33842*t33829*t33976*t33879*t33889*t33898*(2.0/3.0)+Aa*a1a*c*t33842*t33829*t33896*t33879*t33889*t33898*(2.0/3.0)-Aa*a1a*c*t33842*t33861*t33829*t33879*t33889*t34067*(2.0/3.0)-Aa*a1a*c*t33842*t33861*t33829*t33879*t33889*t34059*(2.0/3.0)-Aa*a1a*c*t33842*t33861*t33879*t33889*t33898*t34036*(8.0/9.0)+t33842*t33861*t33880*t33891*1.0/(t33885*t33885*t33885*t33885)*t33879*1.0/(t33888*t33888)*t33898*t34066*(1.0/2.0)+a1a*c*t33842*t33861*t33829*t33983*t33977*t33879*t33978*t33898*(2.0/3.0))-t33870*t33835*t33871*t33876*2.0+t33842*t33861*t33864*t33867*(t33973+t33877-t34040-t34035)*2.0+a1p*c*c0p*t33855*t33829*(4.0/3.0)+t33842*t33861*t33856*t33867*t33878*8.0+Aa*t33842*t33861*t33891*t33879*t33889*(t33974-t34058)*2.0-t33842*t33861*t33891*t33983*t33977*t33879*t33978*t33898*2.0+Aa*a1a*c*t33842*t33861*t33829*t33879*t33889*t33898*(4.0/3.0))-(rho_a*(t34075+t33842*t33936*t34074)+rho_b*(t34078+t33842*t33936*t34077)-t33817*(t33866+t34023+t34024))*(ccab4*t33948*t33949*t34028*(gamma_aa*gamma_bb*t33940*t33943*t34025*(6.4E1/3.0)+gamma_aa*gamma_bb*t33942*t33943*t33948*t34025*(6.4E1/3.0)+gamma_aa*gamma_bb*gcab*t33940*t33941*t33943*t34025*(1.28E2/3.0))-ccab2*t33940*t33942*1.0/(t33959*t33959*t33959)*t34081*t34084*2.0-ccab4*1.0/(t33954*t33954*t33954)*t33948*t33949*t34094*t34089*2.0+ccab3*gcab*t33940*t33941*t33942*t34026*(gamma_aa*gamma_bb*t33940*t33943*t34025*(3.2E1/3.0)+gamma_aa*gamma_bb*gcab*t33940*t33941*t33943*t34025*(3.2E1/3.0))+ccab1*gamma_aa*gamma_bb*t33940*t33943*t34031*t34025*(3.2E1/9.0)-ccab2*gamma_aa*gamma_bb*t33940*t33943*t34032*t34025*(3.2E1/9.0)+ccab2*gamma_bb*t33940*t33941*t33943*t34081*t34029*(8.0/3.0)+ccab2*gamma_aa*t33940*t33941*t34025*t34029*t34084*(8.0/3.0)-ccab3*gcab*t33940*t33941*t33942*1.0/(t33963*t33963*t33963)*t34102*t34098*2.0-ccab4*gamma_aa*gamma_bb*t33942*t33943*t33948*t34030*t34025*(6.4E1/3.0)+ccab2*gamma_aa*gamma_bb*t33942*t33943*t33948*t34025*t34029*(3.2E1/9.0)+ccab3*gamma_bb*gcab*t33940*t33942*t33943*t34026*t34098*4.0+ccab3*gamma_aa*gcab*t33940*t33942*t34102*t34025*t34026*4.0+ccab4*gamma_bb*t33941*t33942*t33943*t33948*t34028*t34089*(1.6E1/3.0)+ccab4*gamma_aa*t33941*t33942*t33948*t34025*t34028*t34094*(1.6E1/3.0)-ccab3*gamma_aa*gamma_bb*gcab*t33940*t33941*t33943*t34033*t34025*(3.2E1/3.0)-ccab1*gamma_aa*gamma_bb*gcab*t33940*t33941*t33943*1.0/(t33956*t33956*t33956)*t34025*(3.2E1/9.0))+(t33866+t34023+t34024-t33817*(t33964-t33984-t33877+t34070+t34035+t34071+t34068+t33842*t33861*t33856*t33867*t33878*4.0+t33842*t33861*t33864*t33867*t34034+Aa*a1a*c*t33842*t33861*t33829*t33879*t33889*t33898*(2.0/3.0))+rho_b*(-t34018+t33842*t33936*(t34018-(1.0/(t33994*t33994)*t34022*(b2f*c*t33995*(1.0/3.0)+b4f*t33824*t34001*(2.0/3.0)+b1f*c*t33995*t34002*(1.0/6.0)+b3f*c*t33995*t33987*(1.0/2.0)))/t34005+a1f*c*c0f*t33995*t34020*(2.0/3.0)-a1p*c*c0p*t33995*t34019*(2.0/3.0))+a1p*c*c0p*t33995*t34019*(2.0/3.0))-c0p*t34010*t34019*2.0-t33842*t33936*t34077)*(ccab1*gamma_aa*gcab*t34025*t34027*(4.0/3.0)-ccab2*t33940*t33942*t34081*t34029-ccab4*t33948*t33949*t34028*t34089-ccab1*gamma_aa*t33940*t33941*t34031*t34025*(4.0/3.0)+ccab2*gamma_aa*t33940*t33941*t34032*t34025*(8.0/3.0)+ccab3*gamma_aa*gcab*t33940*t33942*t34033*t34025*4.0+ccab4*gamma_aa*t33941*t33942*t33948*t34030*t34025*(1.6E1/3.0)-ccab3*gcab*t33940*t33941*t33942*t34026*t34098);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t34104 = rho_a+rho_b;
                double t34105 = 1.0/pow(t34104,1.0/3.0);
                double t34106 = c*t34105;
                double t34107 = sqrt(t34106);
                double t34108 = b1p*t34107;
                double t34109 = pow(t34106,3.0/2.0);
                double t34110 = b3p*t34109;
                double t34111 = c*c;
                double t34112 = 1.0/pow(t34104,2.0/3.0);
                double t34113 = b4p*t34111*t34112;
                double t34114 = b2p*c*t34105;
                double t34115 = t34110+t34113+t34114+t34108;
                double t34116 = 1.0/pow(t34104,4.0/3.0);
                double t34117 = 1.0/c0p;
                double t34118 = 1.0/t34115;
                double t34119 = t34117*t34118*(1.0/2.0);
                double t34120 = t34119+1.0;
                double t34121 = a1p*c*t34105;
                double t34122 = t34121+1.0;
                double t34123 = rho_a-rho_b;
                double t34124 = t34123*t34123;
                double t34125 = 1.0/t34104;
                double t34126 = t34123*t34125;
                double t34127 = two_13*2.0;
                double t34128 = t34127-2.0;
                double t34129 = 1.0/t34128;
                double t34130 = 1.0/c0f;
                double t34131 = b1f*t34107;
                double t34132 = b3f*t34109;
                double t34133 = b4f*t34111*t34112;
                double t34134 = b2f*c*t34105;
                double t34135 = t34131+t34132+t34133+t34134;
                double t34136 = 1.0/t34135;
                double t34137 = t34130*t34136*(1.0/2.0);
                double t34138 = t34137+1.0;
                double t34139 = log(t34138);
                double t34140 = a1f*c*t34105;
                double t34141 = t34140+1.0;
                double t34142 = log(t34120);
                double t34153 = c0f*t34141*t34139*2.0;
                double t34154 = c0p*t34122*t34142*2.0;
                double t34143 = t34153-t34154;
                double t34144 = t34126+1.0;
                double t34145 = pow(t34144,4.0/3.0);
                double t34146 = -t34126+1.0;
                double t34147 = pow(t34146,4.0/3.0);
                double t34148 = t34145+t34147-2.0;
                double t34149 = 1.0/(t34104*t34104);
                double t34150 = t34123*t34149;
                double t34151 = t34150+t34125;
                double t34152 = 1.0/(t34104*t34104*t34104*t34104);
                double t34155 = t34124*t34124;
                double t34156 = 1.0/pow(t34104,5.0/3.0);
                double t34157 = 1.0/sqrt(t34106);
                double t34158 = 1.0/t34120;
                double t34159 = 1.0/(t34115*t34115);
                double t34160 = b4p*t34111*t34156*(2.0/3.0);
                double t34161 = b2p*c*t34116*(1.0/3.0);
                double t34162 = b1p*c*t34116*t34157*(1.0/6.0);
                double t34163 = b3p*c*t34107*t34116*(1.0/2.0);
                double t34164 = t34160+t34161+t34162+t34163;
                double t34165 = 1.0/(t34104*t34104*t34104*t34104*t34104);
                double t34166 = 1.0/d2fz0;
                double t34167 = 1.0/Aa;
                double t34168 = b1a*t34107;
                double t34169 = b3a*t34109;
                double t34170 = b4a*t34111*t34112;
                double t34171 = b2a*c*t34105;
                double t34172 = t34170+t34171+t34168+t34169;
                double t34173 = 1.0/t34172;
                double t34174 = t34173*t34167*(1.0/2.0);
                double t34175 = t34174+1.0;
                double t34176 = log(t34175);
                double t34177 = a1a*c*t34105;
                double t34178 = t34177+1.0;
                double t34179 = pow(t34144,1.0/3.0);
                double t34180 = t34151*t34179*(4.0/3.0);
                double t34181 = pow(t34146,1.0/3.0);
                double t34257 = t34151*t34181*(4.0/3.0);
                double t34182 = t34180-t34257;
                double t34183 = t34152*t34155;
                double t34184 = t34183-1.0;
                double t34185 = 1.0/pow(rho_b,1.0/3.0);
                double t34186 = c*t34185;
                double t34187 = sqrt(t34186);
                double t34188 = b1f*t34187;
                double t34189 = pow(t34186,3.0/2.0);
                double t34190 = b3f*t34189;
                double t34191 = 1.0/pow(rho_b,2.0/3.0);
                double t34192 = b4f*t34111*t34191;
                double t34193 = b2f*c*t34185;
                double t34194 = t34190+t34192+t34193+t34188;
                double t34195 = 1.0/pow(rho_b,4.0/3.0);
                double t34196 = b1p*t34187;
                double t34197 = b3p*t34189;
                double t34198 = b4p*t34111*t34191;
                double t34199 = b2p*c*t34185;
                double t34200 = t34196+t34197+t34198+t34199;
                double t34201 = 1.0/pow(rho_b,5.0/3.0);
                double t34202 = 1.0/sqrt(t34186);
                double t34203 = 1.0/t34194;
                double t34204 = t34130*t34203*(1.0/2.0);
                double t34205 = t34204+1.0;
                double t34206 = 1.0/t34200;
                double t34207 = t34206*t34117*(1.0/2.0);
                double t34208 = t34207+1.0;
                double t34209 = a1p*c*t34185;
                double t34210 = t34209+1.0;
                double t34211 = 1.0/t34208;
                double t34212 = 1.0/(t34200*t34200);
                double t34213 = b4p*t34111*t34201*(2.0/3.0);
                double t34214 = b2p*c*t34195*(1.0/3.0);
                double t34215 = b1p*c*t34202*t34195*(1.0/6.0);
                double t34216 = b3p*c*t34195*t34187*(1.0/2.0);
                double t34217 = t34213+t34214+t34215+t34216;
                double t34218 = t34210*t34211*t34212*t34217;
                double t34219 = log(t34208);
                double t34220 = pow(2.0,1.0/3.0);
                double t34221 = t34220*2.0;
                double t34222 = t34221-2.0;
                double t34223 = log(t34205);
                double t34224 = a1f*c*t34185;
                double t34225 = t34224+1.0;
                double t34226 = gcab*gcab;
                double t34230 = 1.0/pow(rho_a,8.0/3.0);
                double t34231 = gamma_aa*t34230*(1.0/2.0);
                double t34232 = 1.0/pow(rho_b,8.0/3.0);
                double t34233 = gamma_bb*t34232*(1.0/2.0);
                double t34227 = t34231+t34233;
                double t34228 = t34227*t34227;
                double t34229 = 1.0/pow(rho_b,1.1E1/3.0);
                double t34234 = t34226*t34226;
                double t34235 = t34228*t34228;
                double t34236 = t34226*t34228*6.0;
                double t34237 = gcab*t34226*t34227*t34228*4.0;
                double t34238 = t34234*t34235;
                double t34239 = gcab*t34227*4.0;
                double t34240 = t34236+t34237+t34238+t34239+1.0;
                double t34241 = gcab*t34227;
                double t34242 = t34241+1.0;
                double t34243 = t34226*t34228;
                double t34244 = gcab*t34227*2.0;
                double t34245 = t34243+t34244+1.0;
                double t34246 = t34226*t34228*3.0;
                double t34247 = gcab*t34226*t34227*t34228;
                double t34248 = gcab*t34227*3.0;
                double t34249 = t34246+t34247+t34248+1.0;
                double t34250 = a1p*c*c0p*t34142*t34116*(2.0/3.0);
                double t34251 = 1.0/t34245;
                double t34252 = 1.0/t34249;
                double t34253 = 1.0/t34242;
                double t34254 = 1.0/t34240;
                double t34255 = 1.0/pow(t34104,7.0/3.0);
                double t34256 = 1.0/pow(t34104,8.0/3.0);
                double t34258 = 1.0/t34138;
                double t34259 = 1.0/(t34135*t34135);
                double t34260 = b4f*t34111*t34156*(2.0/3.0);
                double t34261 = b2f*c*t34116*(1.0/3.0);
                double t34262 = b1f*c*t34116*t34157*(1.0/6.0);
                double t34263 = b3f*c*t34107*t34116*(1.0/2.0);
                double t34264 = t34260+t34261+t34262+t34263;
                double t34265 = t34141*t34264*t34258*t34259;
                double t34267 = t34122*t34164*t34158*t34159;
                double t34268 = a1f*c*c0f*t34116*t34139*(2.0/3.0);
                double t34266 = t34250+t34265-t34267-t34268;
                double t34269 = t34164*t34164;
                double t34270 = 1.0/pow(t34106,3.0/2.0);
                double t34271 = b4p*t34111*t34256*(1.0E1/9.0);
                double t34272 = b2p*c*t34255*(4.0/9.0);
                double t34273 = b1p*c*t34255*t34157*(2.0/9.0);
                double t34274 = b3p*c*t34107*t34255*(2.0/3.0);
                double t34275 = b3p*t34111*t34157*t34256*(1.0/1.2E1);
                double t34276 = t34271+t34272+t34273+t34274+t34275-b1p*t34111*t34270*t34256*(1.0/3.6E1);
                double t34277 = 1.0/(t34115*t34115*t34115);
                double t34278 = t34122*t34158*t34277*t34269*2.0;
                double t34279 = t34264*t34264;
                double t34280 = 1.0/(t34120*t34120);
                double t34281 = 1.0/(t34115*t34115*t34115*t34115);
                double t34282 = t34149*2.0;
                double t34283 = 1.0/(t34104*t34104*t34104);
                double t34284 = t34123*t34283*2.0;
                double t34285 = t34282+t34284;
                double t34286 = t34151*t34151;
                double t34287 = a1p*c*c0p*t34142*t34255*(8.0/9.0);
                double t34288 = 1.0/(t34104*t34104*t34104*t34104*t34104*t34104);
                double t34289 = t34123*t34124*t34152*4.0;
                double t34290 = t34155*t34165*4.0;
                double t34291 = t34290+t34289;
                double t34292 = t34285*t34179*(4.0/3.0);
                double t34293 = 1.0/pow(t34144,2.0/3.0);
                double t34294 = t34293*t34286*(4.0/9.0);
                double t34295 = 1.0/pow(t34146,2.0/3.0);
                double t34296 = t34286*t34295*(4.0/9.0);
                double t34297 = t34292+t34294+t34296-t34181*t34285*(4.0/3.0);
                double t34298 = 1.0/t34175;
                double t34299 = 1.0/(t34172*t34172);
                double t34300 = b4a*t34111*t34156*(2.0/3.0);
                double t34301 = b2a*c*t34116*(1.0/3.0);
                double t34302 = b1a*c*t34116*t34157*(1.0/6.0);
                double t34303 = b3a*c*t34107*t34116*(1.0/2.0);
                double t34304 = t34300+t34301+t34302+t34303;
                double t34305 = t34304*t34304;
                double t34306 = 1.0/t34205;
                double t34307 = b4f*t34111*t34201*(2.0/3.0);
                double t34308 = b2f*c*t34195*(1.0/3.0);
                double t34309 = b1f*c*t34202*t34195*(1.0/6.0);
                double t34310 = b3f*c*t34195*t34187*(1.0/2.0);
                double t34311 = t34310+t34307+t34308+t34309;
                double t34312 = 1.0/(t34194*t34194);
                double t34313 = 1.0/pow(rho_b,7.0/3.0);
                double t34314 = 1.0/pow(t34186,3.0/2.0);
                double t34315 = t34311*t34311;
                double t34316 = t34217*t34217;
                double t34317 = 1.0/(t34200*t34200*t34200);
                double t34318 = t34210*t34211*t34316*t34317*2.0;
                double t34319 = b4p*t34111*t34232*(1.0E1/9.0);
                double t34320 = b2p*c*t34313*(4.0/9.0);
                double t34321 = b3p*t34111*t34202*t34232*(1.0/1.2E1);
                double t34322 = b1p*c*t34202*t34313*(2.0/9.0);
                double t34323 = b3p*c*t34313*t34187*(2.0/3.0);
                double t34438 = b1p*t34111*t34232*t34314*(1.0/3.6E1);
                double t34324 = t34320+t34321+t34322+t34323+t34319-t34438;
                double t34325 = 1.0/(t34208*t34208);
                double t34326 = 1.0/(t34200*t34200*t34200*t34200);
                double t34327 = a1p*c*c0p*t34313*t34219*(8.0/9.0);
                double t34328 = a1f*c*c0f*t34223*t34195*(2.0/3.0);
                double t34329 = a1p*c*c0p*t34219*t34195*(2.0/3.0);
                double t34401 = t34311*t34312*t34225*t34306;
                double t34330 = -t34401+t34218+t34328-t34329;
                double t34331 = gamma_bb*gamma_bb;
                double t34332 = gcaa*gcaa;
                double t34333 = t34331*t34331;
                double t34334 = t34332*t34332;
                double t34335 = 1.0/pow(rho_b,3.2E1/3.0);
                double t34336 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t34337 = 1.0/pow(rho_b,1.6E1/3.0);
                double t34338 = 1.0/pow(rho_a,1.0/3.0);
                double t34339 = c*t34338;
                double t34340 = sqrt(t34339);
                double t34341 = pow(t34339,3.0/2.0);
                double t34342 = 1.0/pow(rho_a,2.0/3.0);
                double t34343 = b1p*t34340;
                double t34344 = b3p*t34341;
                double t34345 = b4p*t34111*t34342;
                double t34346 = b2p*c*t34338;
                double t34347 = t34343+t34344+t34345+t34346;
                double t34348 = 1.0/t34347;
                double t34349 = t34117*t34348*(1.0/2.0);
                double t34350 = t34349+1.0;
                double t34351 = log(t34350);
                double t34352 = a1p*c*t34338;
                double t34353 = t34352+1.0;
                double t34354 = c0p*t34351*t34353*2.0;
                double t34355 = c0f*t34223*t34225*2.0;
                double t34357 = c0p*t34210*t34219*2.0;
                double t34356 = t34355-t34357;
                double t34358 = t34143*t34152*t34155*t34129*t34148;
                double t34359 = Aa*t34129*t34148*t34166*t34184*t34176*t34178*2.0;
                double t34360 = gamma_bb*gcab*t34229*(1.6E1/3.0);
                double t34361 = gamma_bb*gcab*t34226*t34228*t34229*1.6E1;
                double t34362 = gamma_bb*t34234*t34227*t34228*t34229*(1.6E1/3.0);
                double t34363 = gamma_bb*t34226*t34227*t34229*1.6E1;
                double t34364 = t34360+t34361+t34362+t34363;
                double t34365 = 1.0/(t34242*t34242);
                double t34366 = 1.0/pow(rho_b,2.2E1/3.0);
                double t34367 = gamma_bb*gcab*t34229*(8.0/3.0);
                double t34368 = gamma_bb*t34226*t34227*t34229*(8.0/3.0);
                double t34369 = t34367+t34368;
                double t34370 = 1.0/(t34249*t34249);
                double t34371 = 1.0/pow(rho_b,1.4E1/3.0);
                double t34372 = 1.0/(t34240*t34240);
                double t34373 = 1.0/(t34245*t34245);
                double t34374 = gamma_bb*gcab*t34229*4.0;
                double t34375 = gamma_bb*gcab*t34226*t34228*t34229*4.0;
                double t34376 = gamma_bb*t34226*t34227*t34229*8.0;
                double t34377 = t34374+t34375+t34376;
                double t34378 = t34222*t34129*t34356;
                double t34379 = t34357+t34378;
                double t34380 = gamma_bb*gcaa*t34232*4.0;
                double t34381 = gamma_bb*gcaa*t34331*t34332*t34336*4.0;
                double t34382 = t34331*t34332*t34337*6.0;
                double t34383 = t34333*t34334*t34335;
                double t34384 = t34380+t34381+t34382+t34383+1.0;
                double t34385 = 1.0/t34384;
                double t34386 = gamma_bb*gcaa*t34232;
                double t34387 = t34386+1.0;
                double t34388 = 1.0/t34387;
                double t34389 = gamma_bb*gcaa*t34232*3.0;
                double t34390 = gamma_bb*gcaa*t34331*t34332*t34336;
                double t34391 = t34331*t34332*t34337*3.0;
                double t34392 = t34390+t34391+t34389+1.0;
                double t34393 = 1.0/t34392;
                double t34394 = gamma_bb*gcaa*t34232*2.0;
                double t34395 = t34331*t34332*t34337;
                double t34396 = t34394+t34395+1.0;
                double t34397 = 1.0/t34396;
                double t34398 = 1.0/pow(rho_b,1.9E1/3.0);
                double t34399 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t34400 = 1.0/pow(rho_b,3.5E1/3.0);
                double t34402 = ccaa4*t34400*t34333*t34334*t34385*(3.2E1/3.0);
                double t34403 = ccaa1*gamma_bb*gcaa*t34229*t34388*(8.0/3.0);
                double t34404 = ccaa3*gamma_bb*gcaa*t34331*t34332*t34393*t34399*8.0;
                double t34405 = ccaa2*t34331*t34332*t34397*t34398*(1.6E1/3.0);
                double t34406 = 1.0/(t34387*t34387);
                double t34407 = gamma_bb*gcaa*t34229*8.0;
                double t34408 = gamma_bb*gcaa*t34331*t34332*t34399*8.0;
                double t34409 = t34331*t34332*t34398*1.6E1;
                double t34410 = t34407+t34408+t34409;
                double t34411 = 1.0/(t34392*t34392);
                double t34412 = gamma_bb*gcaa*t34229*(3.2E1/3.0);
                double t34413 = gamma_bb*gcaa*t34331*t34332*t34399*3.2E1;
                double t34414 = t34331*t34332*t34398*3.2E1;
                double t34415 = t34400*t34333*t34334*(3.2E1/3.0);
                double t34416 = t34412+t34413+t34414+t34415;
                double t34417 = 1.0/(t34384*t34384);
                double t34418 = gamma_bb*gcaa*t34229*(1.6E1/3.0);
                double t34419 = t34331*t34332*t34398*(1.6E1/3.0);
                double t34420 = t34418+t34419;
                double t34421 = 1.0/(t34396*t34396);
                double t34422 = t34402+t34403+t34404+t34405-ccaa1*t34331*t34332*t34406*t34398*(8.0/3.0)-ccaa2*t34420*t34331*t34421*t34332*t34337-ccaa4*t34333*t34334*t34335*t34416*t34417-ccaa3*gamma_bb*gcaa*t34410*t34411*t34331*t34332*t34336;
                double t34423 = 1.0/pow(rho_b,1.0E1);
                double t34424 = 1.0/pow(rho_b,3.8E1/3.0);
                double t34425 = ccaa4*t34333*t34334*t34335*t34385;
                double t34426 = ccaa1*gamma_bb*gcaa*t34232*t34388;
                double t34427 = ccaa3*gamma_bb*gcaa*t34331*t34332*t34336*t34393;
                double t34428 = ccaa2*t34331*t34332*t34337*t34397;
                double t34429 = ccaa0+t34425+t34426+t34427+t34428;
                double t34430 = 1.0/(t34194*t34194*t34194);
                double t34431 = b4f*t34111*t34232*(1.0E1/9.0);
                double t34432 = b2f*c*t34313*(4.0/9.0);
                double t34433 = b3f*t34111*t34202*t34232*(1.0/1.2E1);
                double t34434 = b1f*c*t34202*t34313*(2.0/9.0);
                double t34435 = b3f*c*t34313*t34187*(2.0/3.0);
                double t34436 = t34431+t34432+t34433+t34434+t34435-b1f*t34111*t34232*t34314*(1.0/3.6E1);
                double t34437 = t34312*t34225*t34306*t34436;
                double t34439 = t34210*t34211*t34212*t34324;
                double t34440 = 1.0/(t34205*t34205);
                double t34441 = 1.0/(t34194*t34194*t34194*t34194);
                double t34442 = t34130*t34440*t34225*t34315*t34441*(1.0/2.0);
                double t34443 = t34210*t34117*t34316*t34325*t34326*(1.0/2.0);
                double t34444 = a1f*c*t34311*t34312*t34306*t34195*(2.0/3.0);
                double t34445 = a1p*c*t34211*t34212*t34217*t34195*(2.0/3.0);
                v_rho_b_rho_b[Q] += scale * (ccab0+ccab1*gcab*t34253*t34227+ccab2*t34251*t34226*t34228+ccab4*t34234*t34235*t34254+ccab3*gcab*t34252*t34226*t34227*t34228)*(-rho_b*(t34443-t34318-t34327+t34445+t34439+t34222*t34129*(t34442+t34318+t34327+t34444+t34437-t34210*t34211*t34212*t34324-t34430*t34225*t34306*t34315*2.0-a1f*c*c0f*t34223*t34313*(8.0/9.0)-t34210*t34117*t34316*t34325*t34326*(1.0/2.0)-a1p*c*t34211*t34212*t34217*t34195*(2.0/3.0)))-t34104*(t34278+t34287-t34122*t34158*t34159*t34276-t34152*t34155*t34129*t34148*(t34278+t34287-t34122*t34158*t34159*t34276-t34141*1.0/(t34135*t34135*t34135)*t34258*t34279*2.0+t34141*t34258*t34259*(b2f*c*t34255*(4.0/9.0)+b4f*t34111*t34256*(1.0E1/9.0)+b1f*c*t34255*t34157*(2.0/9.0)+b3f*c*t34107*t34255*(2.0/3.0)-b1f*t34111*t34270*t34256*(1.0/3.6E1)+b3f*t34111*t34157*t34256*(1.0/1.2E1))+t34130*t34141*1.0/(t34135*t34135*t34135*t34135)*1.0/(t34138*t34138)*t34279*(1.0/2.0)-a1f*c*c0f*t34255*t34139*(8.0/9.0)-t34122*t34117*t34280*t34281*t34269*(1.0/2.0)+a1f*c*t34116*t34264*t34258*t34259*(2.0/3.0)-a1p*c*t34116*t34164*t34158*t34159*(2.0/3.0))+t34124*t34143*t34152*t34129*t34148*1.2E1-t34122*t34117*t34280*t34281*t34269*(1.0/2.0)+t34143*t34155*t34182*t34129*t34165*8.0-t34152*t34155*t34182*t34129*t34266*2.0+t34143*t34152*t34155*t34129*t34297+t34143*t34155*t34129*t34148*t34288*2.0E1-t34155*t34129*t34165*t34148*t34266*8.0+t34123*t34124*t34143*t34152*t34182*t34129*8.0+t34123*t34124*t34143*t34129*t34165*t34148*3.2E1-t34123*t34124*t34152*t34129*t34148*t34266*8.0-a1p*c*t34116*t34164*t34158*t34159*(2.0/3.0)+Aa*t34182*t34129*t34291*t34166*t34176*t34178*4.0+Aa*t34129*t34166*t34184*t34176*t34178*t34297*2.0+Aa*t34129*t34148*t34166*t34176*t34178*(t34124*t34152*1.2E1+t34155*t34288*2.0E1+t34123*t34124*t34165*3.2E1)*2.0-t34304*t34182*t34129*t34166*t34184*t34178*t34298*t34299*2.0-t34304*t34129*t34291*t34148*t34166*t34178*t34298*t34299*2.0+t34305*1.0/(t34172*t34172*t34172)*t34129*t34148*t34166*t34184*t34178*t34298*2.0-t34129*t34148*t34166*t34184*t34178*t34298*t34299*(b2a*c*t34255*(4.0/9.0)+b4a*t34111*t34256*(1.0E1/9.0)+b1a*c*t34255*t34157*(2.0/9.0)+b3a*c*t34107*t34255*(2.0/3.0)-b1a*t34111*t34270*t34256*(1.0/3.6E1)+b3a*t34111*t34157*t34256*(1.0/1.2E1))+Aa*a1a*c*t34116*t34182*t34129*t34166*t34184*t34176*(4.0/3.0)+Aa*a1a*c*t34116*t34129*t34291*t34148*t34166*t34176*(4.0/3.0)+Aa*a1a*c*t34129*t34255*t34148*t34166*t34184*t34176*(8.0/9.0)-t34305*1.0/(t34172*t34172*t34172*t34172)*t34129*t34148*t34166*1.0/(t34175*t34175)*t34184*t34167*t34178*(1.0/2.0)-a1a*c*t34304*t34116*t34129*t34148*t34166*t34184*t34298*t34299*(2.0/3.0))-t34222*t34330*t34129*2.0+t34210*t34211*t34212*t34217*2.0-t34122*t34164*t34158*t34159*2.0+a1p*c*c0p*t34142*t34116*(4.0/3.0)-a1p*c*c0p*t34219*t34195*(4.0/3.0)+t34143*t34152*t34155*t34182*t34129*2.0+t34143*t34155*t34129*t34165*t34148*8.0-t34152*t34155*t34129*t34148*t34266*2.0+t34123*t34124*t34143*t34152*t34129*t34148*8.0+Aa*t34182*t34129*t34166*t34184*t34176*t34178*4.0+Aa*t34129*t34291*t34148*t34166*t34176*t34178*4.0-t34304*t34129*t34148*t34166*t34184*t34178*t34298*t34299*2.0+Aa*a1a*c*t34116*t34129*t34148*t34166*t34184*t34176*(4.0/3.0))+(rho_b*t34379+rho_a*(t34354-t34222*t34129*(t34354-c0f*log((t34130*(1.0/2.0))/(b1f*t34340+b3f*t34341+b2f*c*t34338+b4f*t34111*t34342)+1.0)*(a1f*c*t34338+1.0)*2.0))-t34104*(t34154+t34358+t34359))*(-ccab2*t34226*t34228*t34373*(gamma_bb*gcab*t34371*(8.8E1/9.0)+t34331*t34226*t34366*(3.2E1/9.0)+gamma_bb*t34226*t34227*t34371*(8.8E1/9.0))+ccab4*1.0/(t34240*t34240*t34240)*t34234*t34235*(t34364*t34364)*2.0+ccab2*t34226*1.0/(t34245*t34245*t34245)*t34228*(t34369*t34369)*2.0+ccab1*gamma_bb*gcab*t34253*t34371*(4.4E1/9.0)+ccab2*t34331*t34251*t34226*t34366*(3.2E1/9.0)-ccab1*t34331*t34226*t34365*t34366*(3.2E1/9.0)-ccab4*t34234*t34235*t34372*(gamma_bb*gcab*t34371*(1.76E2/9.0)+t34331*t34226*t34366*(6.4E1/3.0)+gamma_bb*t34226*t34227*t34371*(1.76E2/3.0)+t34331*t34234*t34228*t34366*(6.4E1/3.0)+gamma_bb*gcab*t34226*t34371*t34228*(1.76E2/3.0)+gamma_bb*t34234*t34227*t34371*t34228*(1.76E2/9.0)+gcab*t34331*t34226*t34227*t34366*(1.28E2/3.0))+ccab4*t34331*t34234*t34254*t34228*t34366*(6.4E1/3.0)+ccab2*gamma_bb*t34251*t34226*t34227*t34371*(8.8E1/9.0)-ccab1*gamma_bb*t34226*t34227*t34371*t34365*(4.4E1/9.0)+ccab3*gcab*t34226*t34227*t34228*1.0/(t34249*t34249*t34249)*(t34377*t34377)*2.0+ccab3*gamma_bb*gcab*t34252*t34226*t34371*t34228*(4.4E1/3.0)+ccab4*gamma_bb*t34234*t34227*t34254*t34371*t34228*(1.76E2/9.0)-ccab2*gamma_bb*t34226*t34227*t34229*t34373*t34369*(1.6E1/3.0)+ccab3*gcab*t34331*t34252*t34226*t34227*t34366*(3.2E1/3.0)+ccab1*gcab*t34331*1.0/(t34242*t34242*t34242)*t34226*t34227*t34366*(3.2E1/9.0)-ccab3*gcab*t34226*t34370*t34227*t34228*(gamma_bb*gcab*t34371*(4.4E1/3.0)+t34331*t34226*t34366*(3.2E1/3.0)+gamma_bb*t34226*t34227*t34371*(8.8E1/3.0)+gamma_bb*gcab*t34226*t34371*t34228*(4.4E1/3.0)+gcab*t34331*t34226*t34227*t34366*(3.2E1/3.0))-ccab3*gamma_bb*gcab*t34226*t34370*t34228*t34229*t34377*8.0-ccab4*gamma_bb*t34234*t34227*t34228*t34372*t34229*t34364*(3.2E1/3.0))+(t34154+t34358+t34359+rho_b*(-t34218+t34329+t34222*t34129*(t34218+t34328-t34311*t34312*t34225*t34306-a1p*c*c0p*t34219*t34195*(2.0/3.0)))-t34104*(t34250-t34122*t34164*t34158*t34159+t34143*t34152*t34155*t34182*t34129+t34143*t34155*t34129*t34165*t34148*4.0-t34152*t34155*t34129*t34148*t34266+t34123*t34124*t34143*t34152*t34129*t34148*4.0+Aa*t34182*t34129*t34166*t34184*t34176*t34178*2.0+Aa*t34129*t34291*t34148*t34166*t34176*t34178*2.0-t34304*t34129*t34148*t34166*t34184*t34178*t34298*t34299+Aa*a1a*c*t34116*t34129*t34148*t34166*t34184*t34176*(2.0/3.0))-c0p*t34210*t34219*2.0-t34222*t34129*t34356)*(ccab1*gamma_bb*gcab*t34253*t34229*(4.0/3.0)-ccab4*t34234*t34235*t34372*t34364-ccab2*t34226*t34228*t34373*t34369+ccab2*gamma_bb*t34251*t34226*t34227*t34229*(8.0/3.0)-ccab1*gamma_bb*t34226*t34227*t34229*t34365*(4.0/3.0)+ccab3*gamma_bb*gcab*t34252*t34226*t34228*t34229*4.0+ccab4*gamma_bb*t34234*t34227*t34254*t34228*t34229*(1.6E1/3.0)-ccab3*gcab*t34226*t34370*t34227*t34228*t34377)*2.0+t34429*(-t34218+t34329+t34222*t34330*t34129)*2.0+t34422*t34379*2.0+rho_b*t34422*(t34218-t34329+t34222*t34129*(t34401-t34218-t34328+t34329))*2.0-rho_b*t34379*(ccaa1*gamma_bb*gcaa*t34371*t34388*(8.8E1/9.0)-ccaa1*t34331*t34332*t34406*t34366*2.4E1+ccaa4*t34333*t34334*t34424*t34385*(1.12E3/9.0)+ccaa2*t34331*t34332*t34366*t34397*(3.04E2/9.0)-ccaa2*t34420*t34331*t34421*t34332*t34398*(3.2E1/3.0)-ccaa4*t34400*t34333*t34334*t34416*t34417*(6.4E1/3.0)-ccaa2*t34331*t34421*t34332*t34337*(gamma_bb*gcaa*t34371*(1.76E2/9.0)+t34331*t34332*t34366*(3.04E2/9.0))-ccaa4*t34333*t34334*t34335*t34417*(gamma_bb*gcaa*t34371*(3.52E2/9.0)+t34333*t34334*t34424*(1.12E3/9.0)+t34331*t34332*t34366*(6.08E2/3.0)+gamma_bb*gcaa*t34331*t34332*t34423*2.88E2)+ccaa2*(t34420*t34420)*t34331*t34332*t34337*1.0/(t34396*t34396*t34396)*2.0+ccaa4*t34333*t34334*t34335*(t34416*t34416)*1.0/(t34384*t34384*t34384)*2.0+ccaa3*gamma_bb*gcaa*t34331*t34332*t34423*t34393*7.2E1+ccaa1*gamma_bb*gcaa*t34331*t34332*t34423*1.0/(t34387*t34387*t34387)*(1.28E2/9.0)+ccaa3*gamma_bb*gcaa*(t34410*t34410)*t34331*t34332*t34336*1.0/(t34392*t34392*t34392)*2.0-ccaa3*gamma_bb*gcaa*t34411*t34331*t34332*t34336*(gamma_bb*gcaa*t34371*(8.8E1/3.0)+t34331*t34332*t34366*(3.04E2/3.0)+gamma_bb*gcaa*t34331*t34332*t34423*7.2E1)-ccaa3*gamma_bb*gcaa*t34410*t34411*t34331*t34332*t34399*1.6E1)+rho_b*t34429*(t34443-t34318-t34327+t34445+t34439+t34222*t34129*(t34442-t34443+t34318+t34327+t34444-t34445+t34437-t34439-t34430*t34225*t34306*t34315*2.0-a1f*c*c0f*t34223*t34313*(8.0/9.0)));
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t35398 = 1.0/pow(rho_a,1.0/3.0);
                double t35399 = c*t35398;
                double t35400 = sqrt(t35399);
                double t35401 = pow(t35399,3.0/2.0);
                double t35402 = c*c;
                double t35403 = 1.0/pow(rho_a,2.0/3.0);
                double t35404 = 1.0/c0p;
                double t35405 = b1p*t35400;
                double t35406 = b3p*t35401;
                double t35407 = b4p*t35402*t35403;
                double t35408 = b2p*c*t35398;
                double t35409 = t35405+t35406+t35407+t35408;
                double t35410 = 1.0/t35409;
                double t35411 = t35410*t35404*(1.0/2.0);
                double t35412 = t35411+1.0;
                double t35413 = log(t35412);
                double t35414 = a1p*c*t35398;
                double t35415 = t35414+1.0;
                double t35416 = pow(2.0,1.0/3.0);
                double t35417 = t35416*2.0;
                double t35418 = t35417-2.0;
                double t35419 = two_13*2.0;
                double t35420 = t35419-2.0;
                double t35421 = 1.0/t35420;
                double t35422 = 1.0/c0f;
                double t35423 = 1.0/pow(rho_b,1.0/3.0);
                double t35424 = c*t35423;
                double t35425 = sqrt(t35424);
                double t35426 = pow(t35424,3.0/2.0);
                double t35427 = 1.0/pow(rho_b,2.0/3.0);
                double t35428 = b1p*t35425;
                double t35429 = b3p*t35426;
                double t35430 = b4p*t35402*t35427;
                double t35431 = b2p*c*t35423;
                double t35432 = t35430+t35431+t35428+t35429;
                double t35433 = 1.0/t35432;
                double t35434 = t35404*t35433*(1.0/2.0);
                double t35435 = t35434+1.0;
                double t35436 = log(t35435);
                double t35437 = a1p*c*t35423;
                double t35438 = t35437+1.0;
                double t35439 = c0p*t35436*t35438*2.0;
                double t35440 = rho_a+rho_b;
                double t35441 = 1.0/pow(t35440,1.0/3.0);
                double t35442 = c*t35441;
                double t35443 = sqrt(t35442);
                double t35444 = pow(t35442,3.0/2.0);
                double t35445 = 1.0/pow(t35440,2.0/3.0);
                double t35446 = b1p*t35443;
                double t35447 = b3p*t35444;
                double t35448 = b4p*t35402*t35445;
                double t35449 = b2p*c*t35441;
                double t35450 = t35446+t35447+t35448+t35449;
                double t35451 = 1.0/t35450;
                double t35452 = t35404*t35451*(1.0/2.0);
                double t35453 = t35452+1.0;
                double t35454 = log(t35453);
                double t35455 = a1p*c*t35441;
                double t35456 = t35455+1.0;
                double t35457 = c0p*t35454*t35456*2.0;
                double t35458 = rho_a-rho_b;
                double t35459 = t35458*t35458;
                double t35460 = 1.0/t35440;
                double t35461 = t35460*t35458;
                double t35462 = 1.0/(t35440*t35440*t35440*t35440);
                double t35463 = t35459*t35459;
                double t35464 = t35461+1.0;
                double t35465 = pow(t35464,4.0/3.0);
                double t35466 = -t35461+1.0;
                double t35467 = pow(t35466,4.0/3.0);
                double t35468 = t35465+t35467-2.0;
                double t35469 = gcab*gcab;
                double t35470 = 1.0/pow(rho_a,1.6E1/3.0);
                double t35471 = 1.0/pow(rho_a,8.0/3.0);
                double t35472 = gamma_aa*t35471*(1.0/2.0);
                double t35473 = 1.0/pow(rho_b,8.0/3.0);
                double t35474 = gamma_bb*t35473*(1.0/2.0);
                double t35475 = t35472+t35474;
                double t35476 = gcab*t35475;
                double t35477 = t35476+1.0;
                double t35478 = t35475*t35475;
                double t35479 = t35469*t35478;
                double t35480 = gcab*t35475*2.0;
                double t35481 = t35480+t35479+1.0;
                double t35482 = t35469*t35469;
                double t35499 = gcab*t35471*2.0;
                double t35500 = t35471*t35475*t35469*6.0;
                double t35501 = gcab*t35471*t35469*t35478*6.0;
                double t35502 = t35471*t35482*t35475*t35478*2.0;
                double t35483 = t35500+t35501+t35502+t35499;
                double t35484 = t35478*t35478;
                double t35504 = gcab*t35471*(3.0/2.0);
                double t35505 = t35471*t35475*t35469*3.0;
                double t35506 = gcab*t35471*t35469*t35478*(3.0/2.0);
                double t35485 = t35504+t35505+t35506;
                double t35486 = t35469*t35478*3.0;
                double t35487 = gcab*t35475*t35469*t35478;
                double t35488 = gcab*t35475*3.0;
                double t35489 = t35486+t35487+t35488+1.0;
                double t35496 = gcab*t35471;
                double t35497 = t35471*t35475*t35469;
                double t35490 = t35496+t35497;
                double t35491 = t35469*t35478*6.0;
                double t35492 = gcab*t35475*t35469*t35478*4.0;
                double t35493 = t35482*t35484;
                double t35494 = gcab*t35475*4.0;
                double t35495 = t35491+t35492+t35493+t35494+1.0;
                double t35498 = 1.0/(t35481*t35481);
                double t35503 = 1.0/(t35495*t35495);
                double t35507 = 1.0/(t35489*t35489);
                double t35508 = c0p*t35413*t35415*2.0;
                double t35509 = b1f*t35400;
                double t35510 = b3f*t35401;
                double t35511 = b4f*t35402*t35403;
                double t35512 = b2f*c*t35398;
                double t35513 = t35510+t35511+t35512+t35509;
                double t35514 = 1.0/t35513;
                double t35515 = t35422*t35514*(1.0/2.0);
                double t35516 = t35515+1.0;
                double t35517 = log(t35516);
                double t35518 = a1f*c*t35398;
                double t35519 = t35518+1.0;
                double t35520 = t35508-c0f*t35517*t35519*2.0;
                double t35521 = t35508-t35421*t35520*t35418;
                double t35522 = gcaa*gcaa;
                double t35523 = gamma_aa*gamma_aa;
                double t35524 = t35522*t35522;
                double t35525 = 1.0/pow(rho_a,3.2E1/3.0);
                double t35526 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t35527 = gamma_aa*gcaa*t35471;
                double t35528 = t35527+1.0;
                double t35529 = gamma_aa*gcaa*t35471*2.0;
                double t35530 = t35522*t35523*t35470;
                double t35531 = t35530+t35529+1.0;
                double t35532 = gamma_aa*gcaa*t35471*3.0;
                double t35533 = gamma_aa*gcaa*t35522*t35523*t35526;
                double t35534 = t35522*t35523*t35470*3.0;
                double t35535 = t35532+t35533+t35534+1.0;
                double t35536 = t35523*t35523;
                double t35552 = gcaa*t35471*4.0;
                double t35553 = gamma_aa*t35522*t35470*1.2E1;
                double t35554 = gcaa*t35522*t35523*t35526*1.2E1;
                double t35555 = gamma_aa*t35523*t35524*t35525*4.0;
                double t35537 = t35552+t35553+t35554+t35555;
                double t35538 = gamma_aa*gcaa*t35471*4.0;
                double t35539 = gamma_aa*gcaa*t35522*t35523*t35526*4.0;
                double t35540 = t35522*t35523*t35470*6.0;
                double t35541 = t35524*t35525*t35536;
                double t35542 = t35540+t35541+t35538+t35539+1.0;
                double t35545 = gcaa*t35471*2.0;
                double t35546 = gamma_aa*t35522*t35470*2.0;
                double t35543 = t35545+t35546;
                double t35544 = 1.0/(t35535*t35535);
                double t35547 = 1.0/(t35531*t35531);
                double t35548 = gcaa*t35471*3.0;
                double t35549 = gamma_aa*t35522*t35470*6.0;
                double t35550 = gcaa*t35522*t35523*t35526*3.0;
                double t35551 = t35550+t35548+t35549;
                double t35556 = 1.0/(t35542*t35542);
                v_gamma_aa_gamma_aa[Q] += scale * (rho_a*t35521+rho_b*(t35439-t35421*t35418*(t35439-c0f*log((t35422*(1.0/2.0))/(b1f*t35425+b3f*t35426+b2f*c*t35423+b4f*t35402*t35427)+1.0)*(a1f*c*t35423+1.0)*2.0))-t35440*(t35457-t35421*t35462*t35463*t35468*(t35457-c0f*log((t35422*(1.0/2.0))/(b1f*t35443+b3f*t35444+b2f*c*t35441+b4f*t35402*t35445)+1.0)*(a1f*c*t35441+1.0)*2.0)+(Aa*t35421*t35468*log((1.0/2.0)/(Aa*(b1a*t35443+b3a*t35444+b2a*c*t35441+b4a*t35402*t35445))+1.0)*(t35462*t35463-1.0)*(a1a*c*t35441+1.0)*2.0)/d2fz0))*((ccab2*t35470*t35469*(1.0/2.0))/t35481-ccab1*t35470*1.0/(t35477*t35477)*t35469*(1.0/2.0)+ccab2*1.0/(t35481*t35481*t35481)*(t35490*t35490)*t35469*t35478*2.0+ccab4*t35482*(t35483*t35483)*t35484*1.0/(t35495*t35495*t35495)*2.0-ccab2*t35470*t35482*t35478*t35498*(1.0/2.0)-ccab4*t35503*t35482*t35484*(t35470*t35469*3.0+t35470*t35482*t35478*3.0+gcab*t35470*t35475*t35469*6.0)+(ccab4*t35470*t35482*t35478*3.0)/t35495-ccab2*t35471*t35490*t35475*t35469*t35498*2.0+ccab1*gcab*t35470*t35475*1.0/(t35477*t35477*t35477)*t35469*(1.0/2.0)+(ccab3*gcab*t35470*t35475*t35469*(3.0/2.0))/t35489+ccab3*gcab*t35475*(t35485*t35485)*t35469*t35478*1.0/(t35489*t35489*t35489)*2.0-ccab3*gcab*t35471*t35507*t35485*t35469*t35478*3.0-ccab4*t35503*t35471*t35482*t35483*t35475*t35478*4.0-ccab3*gcab*t35507*t35475*t35469*t35478*(t35470*t35469*(3.0/2.0)+gcab*t35470*t35475*t35469*(3.0/2.0)))-rho_a*t35521*((ccaa2*t35522*t35470*2.0)/t35531-ccaa1*t35522*t35470*1.0/(t35528*t35528)*2.0-ccaa2*t35523*t35524*t35525*t35547*2.0+(ccaa4*t35523*t35524*t35525*1.2E1)/t35542-ccaa4*t35524*t35525*t35536*t35556*(t35522*t35470*1.2E1+t35523*t35524*t35525*1.2E1+gamma_aa*gcaa*t35522*t35526*2.4E1)+(ccaa3*gamma_aa*gcaa*t35522*t35526*6.0)/t35535+ccaa1*gamma_aa*gcaa*t35522*t35526*1.0/(t35528*t35528*t35528)*2.0+ccaa2*t35522*1.0/(t35531*t35531*t35531)*t35523*t35470*(t35543*t35543)*2.0+ccaa4*t35524*1.0/(t35542*t35542*t35542)*t35525*t35536*(t35537*t35537)*2.0-ccaa2*gamma_aa*t35522*t35470*t35543*t35547*4.0-ccaa4*gamma_aa*t35523*t35524*t35525*t35537*t35556*8.0-ccaa3*gcaa*t35522*t35523*t35551*t35526*t35544*6.0-ccaa3*gamma_aa*gcaa*t35522*t35523*t35526*t35544*(t35522*t35470*6.0+gamma_aa*gcaa*t35522*t35526*6.0)+ccaa3*gamma_aa*gcaa*t35522*t35523*(t35551*t35551)*t35526*1.0/(t35535*t35535*t35535)*2.0);
            }
            
            // v_gamma_aa_gamma_bb
            if (deriv >= 2) {
                double t35559 = 1.0/pow(rho_a,1.0/3.0);
                double t35560 = c*t35559;
                double t35561 = sqrt(t35560);
                double t35562 = pow(t35560,3.0/2.0);
                double t35563 = c*c;
                double t35564 = 1.0/pow(rho_a,2.0/3.0);
                double t35565 = 1.0/c0p;
                double t35566 = b1p*t35561;
                double t35567 = b3p*t35562;
                double t35568 = b4p*t35563*t35564;
                double t35569 = b2p*c*t35559;
                double t35570 = t35566+t35567+t35568+t35569;
                double t35571 = 1.0/t35570;
                double t35572 = t35571*t35565*(1.0/2.0);
                double t35573 = t35572+1.0;
                double t35574 = log(t35573);
                double t35575 = a1p*c*t35559;
                double t35576 = t35575+1.0;
                double t35577 = pow(2.0,1.0/3.0);
                double t35578 = t35577*2.0;
                double t35579 = t35578-2.0;
                double t35580 = two_13*2.0;
                double t35581 = t35580-2.0;
                double t35582 = 1.0/t35581;
                double t35583 = 1.0/c0f;
                double t35584 = 1.0/pow(rho_b,1.0/3.0);
                double t35585 = c*t35584;
                double t35586 = sqrt(t35585);
                double t35587 = pow(t35585,3.0/2.0);
                double t35588 = 1.0/pow(rho_b,2.0/3.0);
                double t35589 = b1p*t35586;
                double t35590 = b3p*t35587;
                double t35591 = b4p*t35563*t35588;
                double t35592 = b2p*c*t35584;
                double t35593 = t35590+t35591+t35592+t35589;
                double t35594 = 1.0/t35593;
                double t35595 = t35565*t35594*(1.0/2.0);
                double t35596 = t35595+1.0;
                double t35597 = log(t35596);
                double t35598 = a1p*c*t35584;
                double t35599 = t35598+1.0;
                double t35600 = c0p*t35597*t35599*2.0;
                double t35601 = rho_a+rho_b;
                double t35602 = 1.0/pow(t35601,1.0/3.0);
                double t35603 = c*t35602;
                double t35604 = sqrt(t35603);
                double t35605 = pow(t35603,3.0/2.0);
                double t35606 = 1.0/pow(t35601,2.0/3.0);
                double t35607 = b1p*t35604;
                double t35608 = b3p*t35605;
                double t35609 = b4p*t35606*t35563;
                double t35610 = b2p*c*t35602;
                double t35611 = t35610+t35607+t35608+t35609;
                double t35612 = 1.0/t35611;
                double t35613 = t35612*t35565*(1.0/2.0);
                double t35614 = t35613+1.0;
                double t35615 = log(t35614);
                double t35616 = a1p*c*t35602;
                double t35617 = t35616+1.0;
                double t35618 = c0p*t35615*t35617*2.0;
                double t35619 = rho_a-rho_b;
                double t35620 = t35619*t35619;
                double t35621 = 1.0/t35601;
                double t35622 = t35621*t35619;
                double t35623 = 1.0/(t35601*t35601*t35601*t35601);
                double t35624 = t35620*t35620;
                double t35625 = t35622+1.0;
                double t35626 = pow(t35625,4.0/3.0);
                double t35627 = -t35622+1.0;
                double t35628 = pow(t35627,4.0/3.0);
                double t35629 = t35626+t35628-2.0;
                double t35630 = gcab*gcab;
                double t35633 = 1.0/pow(rho_a,8.0/3.0);
                double t35634 = 1.0/pow(rho_b,8.0/3.0);
                double t35635 = gamma_aa*t35633*(1.0/2.0);
                double t35636 = gamma_bb*t35634*(1.0/2.0);
                double t35631 = t35635+t35636;
                double t35632 = t35631*t35631;
                double t35637 = t35630*t35630;
                double t35638 = t35632*t35632;
                double t35639 = t35630*t35632*3.0;
                double t35640 = gcab*t35630*t35631*t35632;
                double t35641 = gcab*t35631*3.0;
                double t35642 = t35640+t35641+t35639+1.0;
                double t35643 = t35630*t35632;
                double t35644 = gcab*t35631*2.0;
                double t35645 = t35643+t35644+1.0;
                double t35646 = t35630*t35632*6.0;
                double t35647 = gcab*t35630*t35631*t35632*4.0;
                double t35648 = t35637*t35638;
                double t35649 = gcab*t35631*4.0;
                double t35650 = t35646+t35647+t35648+t35649+1.0;
                double t35651 = 1.0/(t35645*t35645);
                double t35652 = gcab*t35633;
                double t35653 = t35630*t35631*t35633;
                double t35654 = t35652+t35653;
                double t35655 = gcab*t35634;
                double t35656 = t35630*t35631*t35634;
                double t35657 = t35655+t35656;
                double t35658 = gcab*t35631;
                double t35659 = t35658+1.0;
                double t35660 = gcab*t35633*2.0;
                double t35661 = t35630*t35631*t35633*6.0;
                double t35662 = gcab*t35630*t35632*t35633*6.0;
                double t35663 = t35631*t35632*t35633*t35637*2.0;
                double t35664 = t35660+t35661+t35662+t35663;
                double t35665 = 1.0/(t35650*t35650);
                double t35666 = gcab*t35634*2.0;
                double t35667 = t35630*t35631*t35634*6.0;
                double t35668 = gcab*t35630*t35632*t35634*6.0;
                double t35669 = t35631*t35632*t35634*t35637*2.0;
                double t35670 = t35666+t35667+t35668+t35669;
                double t35671 = gcab*t35633*(3.0/2.0);
                double t35672 = t35630*t35631*t35633*3.0;
                double t35673 = gcab*t35630*t35632*t35633*(3.0/2.0);
                double t35674 = t35671+t35672+t35673;
                double t35675 = 1.0/(t35642*t35642);
                double t35676 = gcab*t35634*(3.0/2.0);
                double t35677 = t35630*t35631*t35634*3.0;
                double t35678 = gcab*t35630*t35632*t35634*(3.0/2.0);
                double t35679 = t35676+t35677+t35678;
                v_gamma_aa_gamma_bb[Q] += scale * (-rho_b*(t35600-t35582*t35579*(t35600-c0f*log((t35583*(1.0/2.0))/(b1f*t35586+b3f*t35587+b2f*c*t35584+b4f*t35563*t35588)+1.0)*(a1f*c*t35584+1.0)*2.0))+t35601*(t35618-t35623*t35624*t35582*t35629*(t35618-c0f*log((t35583*(1.0/2.0))/(b1f*t35604+b3f*t35605+b2f*c*t35602+b4f*t35606*t35563)+1.0)*(a1f*c*t35602+1.0)*2.0)+(Aa*t35582*t35629*log((1.0/2.0)/(Aa*(b1a*t35604+b3a*t35605+b2a*c*t35602+b4a*t35606*t35563))+1.0)*(t35623*t35624-1.0)*(a1a*c*t35602+1.0)*2.0)/d2fz0)+rho_a*(t35582*t35579*(c0p*t35574*t35576*2.0-c0f*log((t35583*(1.0/2.0))/(b1f*t35561+b3f*t35562+b2f*c*t35559+b4f*t35563*t35564)+1.0)*(a1f*c*t35559+1.0)*2.0)-c0p*t35574*t35576*2.0))*(ccab4*t35637*t35638*t35665*(t35630*t35633*t35634*3.0+t35632*t35633*t35634*t35637*3.0+gcab*t35630*t35631*t35633*t35634*6.0)-(ccab2*t35630*t35633*t35634*(1.0/2.0))/t35645+ccab1*t35630*t35633*t35634*1.0/(t35659*t35659)*(1.0/2.0)+ccab2*t35630*t35631*t35651*t35634*t35654+ccab2*t35630*t35631*t35633*t35651*t35657+ccab2*t35632*t35633*t35651*t35634*t35637*(1.0/2.0)-(ccab4*t35632*t35633*t35634*t35637*3.0)/t35650-ccab2*t35630*t35632*1.0/(t35645*t35645*t35645)*t35654*t35657*2.0-ccab4*1.0/(t35650*t35650*t35650)*t35670*t35637*t35664*t35638*2.0+ccab3*gcab*t35630*t35632*t35634*t35674*t35675*(3.0/2.0)+ccab3*gcab*t35630*t35632*t35633*t35675*t35679*(3.0/2.0)+ccab4*t35631*t35632*t35633*t35670*t35637*t35665*2.0+ccab4*t35631*t35632*t35634*t35637*t35664*t35665*2.0+ccab3*gcab*t35630*t35631*t35632*t35675*(t35630*t35633*t35634*(3.0/2.0)+gcab*t35630*t35631*t35633*t35634*(3.0/2.0))-(ccab3*gcab*t35630*t35631*t35633*t35634*(3.0/2.0))/t35642-ccab1*gcab*t35630*t35631*t35633*t35634*1.0/(t35659*t35659*t35659)*(1.0/2.0)-ccab3*gcab*t35630*t35631*t35632*1.0/(t35642*t35642*t35642)*t35674*t35679*2.0);
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t35683 = 1.0/pow(rho_a,1.0/3.0);
                double t35684 = c*t35683;
                double t35685 = sqrt(t35684);
                double t35686 = pow(t35684,3.0/2.0);
                double t35687 = c*c;
                double t35688 = 1.0/pow(rho_a,2.0/3.0);
                double t35689 = 1.0/c0p;
                double t35690 = b1p*t35685;
                double t35691 = b3p*t35686;
                double t35692 = b4p*t35687*t35688;
                double t35693 = b2p*c*t35683;
                double t35694 = t35690+t35691+t35692+t35693;
                double t35695 = 1.0/t35694;
                double t35696 = t35695*t35689*(1.0/2.0);
                double t35697 = t35696+1.0;
                double t35698 = log(t35697);
                double t35699 = a1p*c*t35683;
                double t35700 = t35699+1.0;
                double t35701 = pow(2.0,1.0/3.0);
                double t35702 = t35701*2.0;
                double t35703 = t35702-2.0;
                double t35704 = two_13*2.0;
                double t35705 = t35704-2.0;
                double t35706 = 1.0/t35705;
                double t35707 = 1.0/c0f;
                double t35708 = 1.0/pow(rho_b,1.0/3.0);
                double t35709 = c*t35708;
                double t35710 = sqrt(t35709);
                double t35711 = pow(t35709,3.0/2.0);
                double t35712 = 1.0/pow(rho_b,2.0/3.0);
                double t35713 = b1p*t35710;
                double t35714 = b3p*t35711;
                double t35715 = b4p*t35712*t35687;
                double t35716 = b2p*c*t35708;
                double t35717 = t35713+t35714+t35715+t35716;
                double t35718 = 1.0/t35717;
                double t35719 = t35718*t35689*(1.0/2.0);
                double t35720 = t35719+1.0;
                double t35721 = log(t35720);
                double t35722 = a1p*c*t35708;
                double t35723 = t35722+1.0;
                double t35724 = c0p*t35721*t35723*2.0;
                double t35725 = rho_a+rho_b;
                double t35726 = 1.0/pow(t35725,1.0/3.0);
                double t35727 = c*t35726;
                double t35728 = sqrt(t35727);
                double t35729 = pow(t35727,3.0/2.0);
                double t35730 = 1.0/pow(t35725,2.0/3.0);
                double t35731 = b1p*t35728;
                double t35732 = b3p*t35729;
                double t35733 = b4p*t35730*t35687;
                double t35734 = b2p*c*t35726;
                double t35735 = t35731+t35732+t35733+t35734;
                double t35736 = 1.0/t35735;
                double t35737 = t35736*t35689*(1.0/2.0);
                double t35738 = t35737+1.0;
                double t35739 = log(t35738);
                double t35740 = a1p*c*t35726;
                double t35741 = t35740+1.0;
                double t35742 = c0p*t35741*t35739*2.0;
                double t35743 = rho_a-rho_b;
                double t35744 = t35743*t35743;
                double t35745 = 1.0/t35725;
                double t35746 = t35743*t35745;
                double t35747 = 1.0/(t35725*t35725*t35725*t35725);
                double t35748 = t35744*t35744;
                double t35749 = t35746+1.0;
                double t35750 = pow(t35749,4.0/3.0);
                double t35751 = -t35746+1.0;
                double t35752 = pow(t35751,4.0/3.0);
                double t35753 = t35750+t35752-2.0;
                double t35754 = gcab*gcab;
                double t35755 = 1.0/pow(rho_b,1.6E1/3.0);
                double t35756 = 1.0/pow(rho_a,8.0/3.0);
                double t35757 = gamma_aa*t35756*(1.0/2.0);
                double t35758 = 1.0/pow(rho_b,8.0/3.0);
                double t35759 = gamma_bb*t35758*(1.0/2.0);
                double t35760 = t35757+t35759;
                double t35761 = gcab*t35760;
                double t35762 = t35761+1.0;
                double t35763 = t35760*t35760;
                double t35764 = t35754*t35763;
                double t35765 = gcab*t35760*2.0;
                double t35766 = t35764+t35765+1.0;
                double t35767 = t35754*t35754;
                double t35784 = gcab*t35758*2.0;
                double t35785 = t35760*t35754*t35758*6.0;
                double t35786 = gcab*t35754*t35763*t35758*6.0;
                double t35787 = t35760*t35763*t35758*t35767*2.0;
                double t35768 = t35784+t35785+t35786+t35787;
                double t35769 = t35763*t35763;
                double t35789 = gcab*t35758*(3.0/2.0);
                double t35790 = t35760*t35754*t35758*3.0;
                double t35791 = gcab*t35754*t35763*t35758*(3.0/2.0);
                double t35770 = t35790+t35791+t35789;
                double t35771 = t35754*t35763*3.0;
                double t35772 = gcab*t35760*t35754*t35763;
                double t35773 = gcab*t35760*3.0;
                double t35774 = t35771+t35772+t35773+1.0;
                double t35781 = gcab*t35758;
                double t35782 = t35760*t35754*t35758;
                double t35775 = t35781+t35782;
                double t35776 = t35754*t35763*6.0;
                double t35777 = gcab*t35760*t35754*t35763*4.0;
                double t35778 = t35767*t35769;
                double t35779 = gcab*t35760*4.0;
                double t35780 = t35776+t35777+t35778+t35779+1.0;
                double t35783 = 1.0/(t35766*t35766);
                double t35788 = 1.0/(t35780*t35780);
                double t35792 = 1.0/(t35774*t35774);
                double t35793 = b1f*t35710;
                double t35794 = b3f*t35711;
                double t35795 = b4f*t35712*t35687;
                double t35796 = b2f*c*t35708;
                double t35797 = t35793+t35794+t35795+t35796;
                double t35798 = 1.0/t35797;
                double t35799 = t35707*t35798*(1.0/2.0);
                double t35800 = t35799+1.0;
                double t35801 = log(t35800);
                double t35802 = a1f*c*t35708;
                double t35803 = t35802+1.0;
                double t35804 = t35724-c0f*t35801*t35803*2.0;
                double t35805 = t35724-t35703*t35804*t35706;
                double t35806 = gcaa*gcaa;
                double t35807 = gamma_bb*gamma_bb;
                double t35808 = t35806*t35806;
                double t35809 = 1.0/pow(rho_b,3.2E1/3.0);
                double t35810 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35811 = gamma_bb*gcaa*t35758;
                double t35812 = t35811+1.0;
                double t35813 = gamma_bb*gcaa*t35758*2.0;
                double t35814 = t35806*t35807*t35755;
                double t35815 = t35813+t35814+1.0;
                double t35816 = gamma_bb*gcaa*t35758*3.0;
                double t35817 = gamma_bb*gcaa*t35810*t35806*t35807;
                double t35818 = t35806*t35807*t35755*3.0;
                double t35819 = t35816+t35817+t35818+1.0;
                double t35820 = t35807*t35807;
                double t35836 = gcaa*t35758*4.0;
                double t35837 = gamma_bb*t35806*t35755*1.2E1;
                double t35838 = gcaa*t35810*t35806*t35807*1.2E1;
                double t35839 = gamma_bb*t35807*t35808*t35809*4.0;
                double t35821 = t35836+t35837+t35838+t35839;
                double t35822 = gamma_bb*gcaa*t35758*4.0;
                double t35823 = gamma_bb*gcaa*t35810*t35806*t35807*4.0;
                double t35824 = t35806*t35807*t35755*6.0;
                double t35825 = t35820*t35808*t35809;
                double t35826 = t35822+t35823+t35824+t35825+1.0;
                double t35829 = gcaa*t35758*2.0;
                double t35830 = gamma_bb*t35806*t35755*2.0;
                double t35827 = t35830+t35829;
                double t35828 = 1.0/(t35819*t35819);
                double t35831 = 1.0/(t35815*t35815);
                double t35832 = gcaa*t35758*3.0;
                double t35833 = gamma_bb*t35806*t35755*6.0;
                double t35834 = gcaa*t35810*t35806*t35807*3.0;
                double t35835 = t35832+t35833+t35834;
                double t35840 = 1.0/(t35826*t35826);
                v_gamma_bb_gamma_bb[Q] += scale * (-rho_b*t35805+t35725*(t35742-t35706*t35753*t35747*t35748*(t35742-c0f*log((t35707*(1.0/2.0))/(b1f*t35728+b3f*t35729+b2f*c*t35726+b4f*t35730*t35687)+1.0)*(a1f*c*t35726+1.0)*2.0)+(Aa*t35706*t35753*log((1.0/2.0)/(Aa*(b1a*t35728+b3a*t35729+b2a*c*t35726+b4a*t35730*t35687))+1.0)*(t35747*t35748-1.0)*(a1a*c*t35726+1.0)*2.0)/d2fz0)+rho_a*(t35703*t35706*(c0p*t35700*t35698*2.0-c0f*log((t35707*(1.0/2.0))/(b1f*t35685+b3f*t35686+b2f*c*t35683+b4f*t35687*t35688)+1.0)*(a1f*c*t35683+1.0)*2.0)-c0p*t35700*t35698*2.0))*(ccab1*1.0/(t35762*t35762)*t35754*t35755*(1.0/2.0)-(ccab2*t35754*t35755*(1.0/2.0))/t35766-ccab2*t35754*t35763*1.0/(t35766*t35766*t35766)*(t35775*t35775)*2.0-ccab4*1.0/(t35780*t35780*t35780)*t35767*(t35768*t35768)*t35769*2.0+ccab2*t35763*t35755*t35783*t35767*(1.0/2.0)+ccab4*t35767*t35769*t35788*(t35754*t35755*3.0+t35763*t35755*t35767*3.0+gcab*t35760*t35754*t35755*6.0)-(ccab4*t35763*t35755*t35767*3.0)/t35780+ccab2*t35760*t35754*t35783*t35775*t35758*2.0-ccab1*gcab*t35760*1.0/(t35762*t35762*t35762)*t35754*t35755*(1.0/2.0)-(ccab3*gcab*t35760*t35754*t35755*(3.0/2.0))/t35774-ccab3*gcab*t35760*(t35770*t35770)*t35754*t35763*1.0/(t35774*t35774*t35774)*2.0+ccab3*gcab*t35770*t35754*t35763*t35792*t35758*3.0+ccab4*t35760*t35763*t35758*t35767*t35768*t35788*4.0+ccab3*gcab*t35760*t35754*t35763*t35792*(t35754*t35755*(3.0/2.0)+gcab*t35760*t35754*t35755*(3.0/2.0)))+rho_b*t35805*(ccaa1*1.0/(t35812*t35812)*t35806*t35755*2.0-(ccaa2*t35806*t35755*2.0)/t35815+ccaa2*t35831*t35807*t35808*t35809*2.0-(ccaa4*t35807*t35808*t35809*1.2E1)/t35826+ccaa4*t35820*t35840*t35808*t35809*(t35806*t35755*1.2E1+t35807*t35808*t35809*1.2E1+gamma_bb*gcaa*t35810*t35806*2.4E1)-ccaa1*gamma_bb*gcaa*t35810*1.0/(t35812*t35812*t35812)*t35806*2.0-(ccaa3*gamma_bb*gcaa*t35810*t35806*6.0)/t35819-ccaa4*t35820*(t35821*t35821)*t35808*1.0/(t35826*t35826*t35826)*t35809*2.0-ccaa2*t35806*1.0/(t35815*t35815*t35815)*t35807*t35755*(t35827*t35827)*2.0+ccaa2*gamma_bb*t35831*t35806*t35755*t35827*4.0+ccaa4*gamma_bb*t35821*t35840*t35807*t35808*t35809*8.0+ccaa3*gcaa*t35810*t35806*t35807*t35835*t35828*6.0+ccaa3*gamma_bb*gcaa*t35810*t35806*t35807*t35828*(t35806*t35755*6.0+gamma_bb*gcaa*t35810*t35806*6.0)-ccaa3*gamma_bb*gcaa*t35810*t35806*t35807*(t35835*t35835)*1.0/(t35819*t35819*t35819)*2.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t34447 = 1.0/pow(rho_a,1.0/3.0);
                double t34448 = c*t34447;
                double t34449 = sqrt(t34448);
                double t34450 = pow(t34448,3.0/2.0);
                double t34451 = c*c;
                double t34452 = 1.0/pow(rho_a,2.0/3.0);
                double t34453 = 1.0/c0p;
                double t34454 = b1p*t34449;
                double t34455 = b3p*t34450;
                double t34456 = b4p*t34451*t34452;
                double t34457 = b2p*c*t34447;
                double t34458 = t34454+t34455+t34456+t34457;
                double t34459 = 1.0/t34458;
                double t34460 = t34453*t34459*(1.0/2.0);
                double t34461 = t34460+1.0;
                double t34462 = log(t34461);
                double t34463 = a1p*c*t34447;
                double t34464 = t34463+1.0;
                double t34465 = 1.0/pow(rho_a,8.0/3.0);
                double t34466 = gamma_aa*gamma_aa;
                double t34467 = gcaa*gcaa;
                double t34468 = t34467*t34467;
                double t34469 = 1.0/pow(rho_a,3.2E1/3.0);
                double t34470 = 1.0/pow(rho_a,1.6E1/3.0);
                double t34471 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t34472 = gamma_aa*gcaa*t34465;
                double t34473 = t34472+1.0;
                double t34474 = gamma_aa*gcaa*t34465*3.0;
                double t34475 = gamma_aa*gcaa*t34471*t34466*t34467;
                double t34476 = t34470*t34466*t34467*3.0;
                double t34477 = t34474+t34475+t34476+1.0;
                double t34478 = t34466*t34466;
                double t34479 = gamma_aa*gcaa*t34465*4.0;
                double t34480 = gamma_aa*gcaa*t34471*t34466*t34467*4.0;
                double t34481 = t34470*t34466*t34467*6.0;
                double t34482 = t34468*t34469*t34478;
                double t34483 = t34480+t34481+t34482+t34479+1.0;
                double t34484 = gamma_aa*gcaa*t34465*2.0;
                double t34485 = t34470*t34466*t34467;
                double t34486 = t34484+t34485+1.0;
                double t34487 = rho_a+rho_b;
                double t34488 = 1.0/pow(t34487,1.0/3.0);
                double t34489 = c*t34488;
                double t34490 = sqrt(t34489);
                double t34491 = b1p*t34490;
                double t34492 = pow(t34489,3.0/2.0);
                double t34493 = b3p*t34492;
                double t34494 = 1.0/pow(t34487,2.0/3.0);
                double t34495 = b4p*t34451*t34494;
                double t34496 = b2p*c*t34488;
                double t34497 = t34491+t34493+t34495+t34496;
                double t34498 = 1.0/pow(t34487,4.0/3.0);
                double t34499 = two_13*2.0;
                double t34500 = t34499-2.0;
                double t34501 = 1.0/t34500;
                double t34502 = 1.0/c0f;
                double t34503 = 1.0/t34497;
                double t34504 = t34503*t34453*(1.0/2.0);
                double t34505 = t34504+1.0;
                double t34506 = a1p*c*t34488;
                double t34507 = t34506+1.0;
                double t34508 = rho_a-rho_b;
                double t34509 = t34508*t34508;
                double t34510 = 1.0/t34487;
                double t34511 = t34510*t34508;
                double t34512 = b1f*t34490;
                double t34513 = b3f*t34492;
                double t34514 = b4f*t34451*t34494;
                double t34515 = b2f*c*t34488;
                double t34516 = t34512+t34513+t34514+t34515;
                double t34517 = 1.0/t34516;
                double t34518 = t34502*t34517*(1.0/2.0);
                double t34519 = t34518+1.0;
                double t34520 = log(t34519);
                double t34521 = a1f*c*t34488;
                double t34522 = t34521+1.0;
                double t34523 = log(t34505);
                double t34533 = c0f*t34520*t34522*2.0;
                double t34534 = c0p*t34523*t34507*2.0;
                double t34524 = t34533-t34534;
                double t34525 = t34511+1.0;
                double t34526 = pow(t34525,4.0/3.0);
                double t34527 = -t34511+1.0;
                double t34528 = pow(t34527,4.0/3.0);
                double t34529 = t34526+t34528-2.0;
                double t34530 = 1.0/(t34487*t34487);
                double t34561 = t34530*t34508;
                double t34531 = t34510-t34561;
                double t34532 = 1.0/(t34487*t34487*t34487*t34487);
                double t34535 = t34509*t34509;
                double t34536 = 1.0/pow(t34487,5.0/3.0);
                double t34537 = 1.0/sqrt(t34489);
                double t34538 = 1.0/t34505;
                double t34539 = 1.0/(t34497*t34497);
                double t34540 = b4p*t34451*t34536*(2.0/3.0);
                double t34541 = b2p*c*t34498*(1.0/3.0);
                double t34542 = b1p*c*t34537*t34498*(1.0/6.0);
                double t34543 = b3p*c*t34490*t34498*(1.0/2.0);
                double t34544 = t34540+t34541+t34542+t34543;
                double t34545 = t34507*t34544*t34538*t34539;
                double t34546 = 1.0/(t34487*t34487*t34487*t34487*t34487);
                double t34547 = 1.0/d2fz0;
                double t34548 = 1.0/Aa;
                double t34549 = b1a*t34490;
                double t34550 = b3a*t34492;
                double t34551 = b4a*t34451*t34494;
                double t34552 = b2a*c*t34488;
                double t34553 = t34550+t34551+t34552+t34549;
                double t34554 = 1.0/t34553;
                double t34555 = t34554*t34548*(1.0/2.0);
                double t34556 = t34555+1.0;
                double t34557 = log(t34556);
                double t34558 = a1a*c*t34488;
                double t34559 = t34558+1.0;
                double t34560 = pow(t34525,1.0/3.0);
                double t34562 = t34531*t34560*(4.0/3.0);
                double t34563 = pow(t34527,1.0/3.0);
                double t34564 = t34562-t34531*t34563*(4.0/3.0);
                double t34565 = t34532*t34535;
                double t34566 = t34565-1.0;
                double t34567 = pow(2.0,1.0/3.0);
                double t34568 = t34567*2.0;
                double t34569 = t34568-2.0;
                double t34570 = a1f*c*t34447;
                double t34571 = t34570+1.0;
                double t34572 = b1f*t34449;
                double t34573 = b3f*t34450;
                double t34574 = b4f*t34451*t34452;
                double t34575 = b2f*c*t34447;
                double t34576 = t34572+t34573+t34574+t34575;
                double t34577 = 1.0/t34576;
                double t34578 = t34502*t34577*(1.0/2.0);
                double t34579 = t34578+1.0;
                double t34580 = 1.0/pow(rho_a,4.0/3.0);
                double t34581 = 1.0/pow(rho_a,5.0/3.0);
                double t34582 = 1.0/sqrt(t34448);
                double t34583 = log(t34579);
                double t34584 = 1.0/t34461;
                double t34585 = 1.0/(t34458*t34458);
                double t34586 = b4p*t34451*t34581*(2.0/3.0);
                double t34587 = b2p*c*t34580*(1.0/3.0);
                double t34588 = b1p*c*t34580*t34582*(1.0/6.0);
                double t34589 = b3p*c*t34580*t34449*(1.0/2.0);
                double t34590 = t34586+t34587+t34588+t34589;
                double t34591 = t34464*t34590*t34584*t34585;
                double t34592 = c0f*t34571*t34583*2.0;
                double t34593 = c0p*t34462*t34464*2.0;
                double t34594 = gamma_aa*t34465*(1.0/2.0);
                double t34595 = 1.0/pow(rho_b,8.0/3.0);
                double t34596 = gamma_bb*t34595*(1.0/2.0);
                double t34597 = t34594+t34596;
                double t34598 = gcab*t34597;
                double t34599 = t34598+1.0;
                double t34600 = gcab*gcab;
                double t34601 = t34597*t34597;
                double t34602 = t34600*t34600;
                double t34603 = t34601*t34601;
                double t34604 = t34600*t34601;
                double t34605 = gcab*t34597*2.0;
                double t34606 = t34604+t34605+1.0;
                double t34607 = t34600*t34601*3.0;
                double t34608 = gcab*t34600*t34601*t34597;
                double t34609 = gcab*t34597*3.0;
                double t34610 = t34607+t34608+t34609+1.0;
                double t34611 = t34600*t34601*6.0;
                double t34612 = gcab*t34600*t34601*t34597*4.0;
                double t34613 = t34602*t34603;
                double t34614 = gcab*t34597*4.0;
                double t34615 = t34611+t34612+t34613+t34614+1.0;
                double t34616 = t34592-t34593;
                double t34617 = 1.0/pow(rho_b,1.0/3.0);
                double t34618 = c*t34617;
                double t34619 = sqrt(t34618);
                double t34620 = pow(t34618,3.0/2.0);
                double t34621 = 1.0/pow(rho_b,2.0/3.0);
                double t34622 = b1p*t34619;
                double t34623 = b3p*t34620;
                double t34624 = b4p*t34621*t34451;
                double t34625 = b2p*c*t34617;
                double t34626 = t34622+t34623+t34624+t34625;
                double t34627 = 1.0/t34626;
                double t34628 = t34453*t34627*(1.0/2.0);
                double t34629 = t34628+1.0;
                double t34630 = log(t34629);
                double t34631 = a1p*c*t34617;
                double t34632 = t34631+1.0;
                double t34633 = c0p*t34630*t34632*2.0;
                double t34634 = t34501*t34532*t34524*t34535*t34529;
                double t34635 = Aa*t34501*t34529*t34547*t34557*t34566*t34559*2.0;
                double t34636 = 1.0/t34599;
                double t34637 = 1.0/pow(rho_a,1.1E1/3.0);
                double t34638 = 1.0/(t34599*t34599);
                double t34639 = 1.0/t34606;
                double t34640 = 1.0/(t34610*t34610);
                double t34641 = 1.0/pow(rho_a,1.9E1/3.0);
                double t34642 = 1.0/(t34606*t34606);
                double t34643 = 1.0/t34610;
                double t34644 = 1.0/t34615;
                double t34645 = 1.0/(t34615*t34615);
                double t34646 = gcab*t34465*2.0;
                double t34647 = t34600*t34465*t34597*6.0;
                double t34648 = gcab*t34600*t34601*t34465*6.0;
                double t34649 = t34601*t34602*t34465*t34597*2.0;
                double t34650 = t34646+t34647+t34648+t34649;
                double t34651 = gamma_aa*gcab*t34637*(8.0/3.0);
                double t34652 = gamma_aa*t34600*t34637*t34597*(8.0/3.0);
                double t34653 = t34651+t34652;
                double t34654 = gcab*t34465;
                double t34655 = t34600*t34465*t34597;
                double t34656 = t34654+t34655;
                double t34657 = gamma_aa*gcab*t34637*(1.6E1/3.0);
                double t34658 = gamma_aa*gcab*t34600*t34601*t34637*1.6E1;
                double t34659 = gamma_aa*t34601*t34602*t34637*t34597*(1.6E1/3.0);
                double t34660 = gamma_aa*t34600*t34637*t34597*1.6E1;
                double t34661 = t34660+t34657+t34658+t34659;
                double t34662 = gcab*t34465*(3.0/2.0);
                double t34663 = t34600*t34465*t34597*3.0;
                double t34664 = gcab*t34600*t34601*t34465*(3.0/2.0);
                double t34665 = t34662+t34663+t34664;
                double t34666 = gamma_aa*gcab*t34637*4.0;
                double t34667 = gamma_aa*gcab*t34600*t34601*t34637*4.0;
                double t34668 = gamma_aa*t34600*t34637*t34597*8.0;
                double t34669 = t34666+t34667+t34668;
                double t34670 = t34501*t34616*t34569;
                double t34671 = t34670+t34593;
                double t34672 = 1.0/t34473;
                double t34673 = 1.0/t34483;
                double t34674 = 1.0/t34486;
                double t34675 = 1.0/t34477;
                double t34676 = 1.0/(t34473*t34473);
                double t34677 = 1.0/(rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a*rho_a);
                double t34678 = 1.0/(t34477*t34477);
                double t34679 = 1.0/(t34486*t34486);
                double t34680 = gcaa*t34465*3.0;
                double t34681 = gamma_aa*t34470*t34467*6.0;
                double t34682 = gcaa*t34471*t34466*t34467*3.0;
                double t34683 = t34680+t34681+t34682;
                double t34684 = 1.0/pow(rho_a,3.5E1/3.0);
                double t34685 = 1.0/(t34483*t34483);
                double t34686 = gcaa*t34465*4.0;
                double t34687 = gamma_aa*t34470*t34467*1.2E1;
                double t34688 = gcaa*t34471*t34466*t34467*1.2E1;
                double t34689 = gamma_aa*t34466*t34468*t34469*4.0;
                double t34690 = t34686+t34687+t34688+t34689;
                double t34691 = gcaa*t34465*2.0;
                double t34692 = gamma_aa*t34470*t34467*2.0;
                double t34693 = t34691+t34692;
                double t34694 = gamma_aa*gcaa*t34637*(1.6E1/3.0);
                double t34695 = t34641*t34466*t34467*(1.6E1/3.0);
                double t34696 = t34694+t34695;
                double t34697 = gamma_aa*gcaa*t34637*8.0;
                double t34698 = gamma_aa*gcaa*t34466*t34467*t34677*8.0;
                double t34699 = t34641*t34466*t34467*1.6E1;
                double t34700 = t34697+t34698+t34699;
                double t34701 = gamma_aa*gcaa*t34637*(3.2E1/3.0);
                double t34702 = gamma_aa*gcaa*t34466*t34467*t34677*3.2E1;
                double t34703 = t34641*t34466*t34467*3.2E1;
                double t34704 = t34468*t34684*t34478*(3.2E1/3.0);
                double t34705 = t34701+t34702+t34703+t34704;
                double t34706 = 1.0/t34579;
                double t34707 = 1.0/(t34576*t34576);
                double t34708 = b4f*t34451*t34581*(2.0/3.0);
                double t34709 = b2f*c*t34580*(1.0/3.0);
                double t34710 = b1f*c*t34580*t34582*(1.0/6.0);
                double t34711 = b3f*c*t34580*t34449*(1.0/2.0);
                double t34712 = t34710+t34711+t34708+t34709;
                double t34713 = a1f*c*c0f*t34580*t34583*(2.0/3.0);
                double t34714 = a1p*c*c0p*t34462*t34580*(2.0/3.0);
                double t34715 = ccaa1*gcaa*t34465*t34672;
                double t34716 = ccaa4*gamma_aa*t34466*t34673*t34468*t34469*4.0;
                double t34717 = ccaa2*gamma_aa*t34470*t34467*t34674*2.0;
                double t34718 = ccaa3*gcaa*t34471*t34466*t34467*t34675*3.0;
                double t34719 = t34715+t34716+t34717+t34718-ccaa1*gamma_aa*t34470*t34467*t34676-ccaa2*t34470*t34466*t34467*t34693*t34679-ccaa4*t34690*t34468*t34469*t34478*t34685-ccaa3*gamma_aa*gcaa*t34471*t34466*t34467*t34683*t34678;
                v_rho_a_gamma_aa[Q] += scale * -(rho_a*t34671+rho_b*(t34633-t34501*t34569*(t34633-c0f*log((t34502*(1.0/2.0))/(b1f*t34619+b3f*t34620+b2f*c*t34617+b4f*t34621*t34451)+1.0)*(a1f*c*t34617+1.0)*2.0))-t34487*(t34534+t34634+t34635))*(ccab1*gcab*t34636*t34637*(4.0/3.0)-ccab2*t34600*t34601*t34642*(gcab*t34637*(8.0/3.0)+gamma_aa*t34600*t34641*(4.0/3.0)+t34600*t34637*t34597*(8.0/3.0))-ccab4*t34602*t34603*t34645*(gcab*t34637*(1.6E1/3.0)+gamma_aa*t34600*t34641*8.0+t34600*t34637*t34597*1.6E1+gamma_aa*t34601*t34602*t34641*8.0+gcab*t34600*t34601*t34637*1.6E1+t34601*t34602*t34637*t34597*(1.6E1/3.0)+gamma_aa*gcab*t34600*t34641*t34597*1.6E1)-ccab1*gamma_aa*t34600*t34641*t34638*(4.0/3.0)+ccab2*gamma_aa*t34600*t34641*t34639*(4.0/3.0)-ccab1*t34600*t34637*t34638*t34597*(4.0/3.0)+ccab2*t34600*t34637*t34639*t34597*(8.0/3.0)-ccab2*t34600*t34642*t34653*t34465*t34597+ccab4*t34601*t34602*t34644*t34637*t34597*(1.6E1/3.0)+ccab4*t34602*t34603*t34650*1.0/(t34615*t34615*t34615)*t34661*2.0+ccab2*t34600*t34601*1.0/(t34606*t34606*t34606)*t34653*t34656*2.0+ccab4*gamma_aa*t34601*t34602*t34641*t34644*8.0+ccab3*gcab*t34600*t34601*t34643*t34637*4.0+ccab3*gamma_aa*gcab*t34600*t34641*t34643*t34597*4.0-ccab2*gamma_aa*t34600*t34642*t34637*t34656*t34597*(8.0/3.0)-ccab3*gcab*t34600*t34601*t34640*t34465*t34669*(3.0/2.0)-ccab4*t34601*t34602*t34661*t34465*t34645*t34597*2.0-ccab3*gcab*t34600*t34601*t34640*t34597*(gcab*t34637*4.0+gamma_aa*t34600*t34641*4.0+t34600*t34637*t34597*8.0+gcab*t34600*t34601*t34637*4.0+gamma_aa*gcab*t34600*t34641*t34597*4.0)+ccab1*gamma_aa*gcab*t34600*t34641*t34597*1.0/(t34599*t34599*t34599)*(4.0/3.0)+ccab3*gcab*t34600*t34601*1.0/(t34610*t34610*t34610)*t34665*t34597*t34669*2.0-ccab3*gamma_aa*gcab*t34600*t34601*t34640*t34637*t34665*4.0-ccab4*gamma_aa*t34601*t34602*t34650*t34645*t34637*t34597*(1.6E1/3.0))-t34719*(t34593+t34501*t34569*(t34592-c0p*t34462*t34464*2.0))-(t34534+t34634+t34635-t34593+t34487*(t34545-t34501*t34532*t34535*t34529*(t34545-(t34522*1.0/(t34516*t34516)*(b2f*c*t34498*(1.0/3.0)+b4f*t34451*t34536*(2.0/3.0)+b1f*c*t34537*t34498*(1.0/6.0)+b3f*c*t34490*t34498*(1.0/2.0)))/t34519+a1f*c*c0f*t34520*t34498*(2.0/3.0)-a1p*c*c0p*t34523*t34498*(2.0/3.0))-a1p*c*c0p*t34523*t34498*(2.0/3.0)+t34501*t34532*t34524*t34535*t34564-t34501*t34524*t34535*t34546*t34529*4.0+t34501*t34532*t34524*t34508*t34509*t34529*4.0-Aa*t34501*t34529*t34547*t34557*t34559*(t34535*t34546*4.0-t34532*t34508*t34509*4.0)*2.0+Aa*t34501*t34564*t34547*t34557*t34566*t34559*2.0+(t34501*1.0/(t34553*t34553)*t34529*t34547*t34566*t34559*(b2a*c*t34498*(1.0/3.0)+b4a*t34451*t34536*(2.0/3.0)+b1a*c*t34537*t34498*(1.0/6.0)+b3a*c*t34490*t34498*(1.0/2.0)))/t34556-Aa*a1a*c*t34501*t34529*t34547*t34557*t34566*t34498*(2.0/3.0))+rho_a*(t34714-t34591+t34501*t34569*(t34713+t34591-t34712*t34571*t34706*t34707-a1p*c*c0p*t34462*t34580*(2.0/3.0)))-t34501*t34616*t34569)*(ccab1*gcab*t34465*t34636*(1.0/2.0)-ccab2*t34600*t34601*t34642*t34656-ccab4*t34602*t34603*t34650*t34645-ccab1*t34600*t34465*t34638*t34597*(1.0/2.0)+ccab2*t34600*t34465*t34639*t34597+ccab4*t34601*t34602*t34644*t34465*t34597*2.0+ccab3*gcab*t34600*t34601*t34643*t34465*(3.0/2.0)-ccab3*gcab*t34600*t34601*t34640*t34665*t34597)-rho_a*t34671*(ccaa1*gcaa*t34672*t34637*(-8.0/3.0)-ccaa2*gamma_aa*t34641*t34467*t34674*(3.2E1/3.0)+ccaa1*gamma_aa*t34641*t34467*t34676*8.0+ccaa2*t34641*t34466*t34467*t34693*t34679*(1.6E1/3.0)+ccaa4*t34690*t34468*t34684*t34478*t34685*(3.2E1/3.0)+ccaa4*t34468*t34469*t34478*t34685*(gcaa*t34637*(3.2E1/3.0)+gamma_aa*t34641*t34467*6.4E1+gamma_aa*t34466*t34468*t34684*(1.28E2/3.0)+gcaa*t34466*t34467*t34677*9.6E1)-ccaa1*gcaa*1.0/(t34473*t34473*t34473)*t34466*t34467*t34677*(1.6E1/3.0)+ccaa2*t34470*t34466*t34467*t34679*(gcaa*t34637*(1.6E1/3.0)+gamma_aa*t34641*t34467*(3.2E1/3.0))-ccaa4*gamma_aa*t34466*t34673*t34468*t34684*(1.28E2/3.0)+ccaa2*gamma_aa*t34470*t34467*t34696*t34679*2.0-ccaa3*gcaa*t34466*t34467*t34675*t34677*2.4E1+ccaa4*gamma_aa*t34705*t34466*t34468*t34469*t34685*4.0+ccaa3*gcaa*t34700*t34471*t34466*t34467*t34678*3.0-ccaa4*t34705*1.0/(t34483*t34483*t34483)*t34690*t34468*t34469*t34478*2.0-ccaa2*t34470*t34466*t34467*1.0/(t34486*t34486*t34486)*t34693*t34696*2.0+ccaa3*gamma_aa*gcaa*t34471*t34466*t34467*t34678*(gcaa*t34637*8.0+gamma_aa*t34641*t34467*3.2E1+gcaa*t34466*t34467*t34677*2.4E1)+ccaa3*gamma_aa*gcaa*t34466*t34467*t34683*t34677*t34678*8.0-ccaa3*gamma_aa*gcaa*t34700*t34471*t34466*t34467*t34683*1.0/(t34477*t34477*t34477)*2.0)+rho_a*t34719*(t34714-t34591+t34501*t34569*(t34713-t34714+t34591-t34712*t34571*t34706*t34707));
            }
            
            // v_rho_a_gamma_bb
            if (deriv >= 2) {
                double t34722 = rho_a+rho_b;
                double t34723 = 1.0/pow(t34722,1.0/3.0);
                double t34724 = c*t34723;
                double t34725 = sqrt(t34724);
                double t34726 = b1p*t34725;
                double t34727 = pow(t34724,3.0/2.0);
                double t34728 = b3p*t34727;
                double t34729 = c*c;
                double t34730 = 1.0/pow(t34722,2.0/3.0);
                double t34731 = b4p*t34730*t34729;
                double t34732 = b2p*c*t34723;
                double t34733 = t34731+t34732+t34726+t34728;
                double t34734 = 1.0/pow(t34722,4.0/3.0);
                double t34735 = 1.0/c0p;
                double t34736 = 1.0/t34733;
                double t34737 = t34735*t34736*(1.0/2.0);
                double t34738 = t34737+1.0;
                double t34739 = a1p*c*t34723;
                double t34740 = t34739+1.0;
                double t34741 = rho_a-rho_b;
                double t34742 = t34741*t34741;
                double t34743 = 1.0/t34722;
                double t34744 = t34741*t34743;
                double t34745 = two_13*2.0;
                double t34746 = t34745-2.0;
                double t34747 = 1.0/t34746;
                double t34748 = 1.0/c0f;
                double t34749 = b1f*t34725;
                double t34750 = b3f*t34727;
                double t34751 = b4f*t34730*t34729;
                double t34752 = b2f*c*t34723;
                double t34753 = t34750+t34751+t34752+t34749;
                double t34754 = 1.0/t34753;
                double t34755 = t34754*t34748*(1.0/2.0);
                double t34756 = t34755+1.0;
                double t34757 = log(t34756);
                double t34758 = a1f*c*t34723;
                double t34759 = t34758+1.0;
                double t34760 = log(t34738);
                double t34770 = c0f*t34757*t34759*2.0;
                double t34771 = c0p*t34740*t34760*2.0;
                double t34761 = t34770-t34771;
                double t34762 = t34744+1.0;
                double t34763 = pow(t34762,4.0/3.0);
                double t34764 = -t34744+1.0;
                double t34765 = pow(t34764,4.0/3.0);
                double t34766 = t34763+t34765-2.0;
                double t34767 = 1.0/(t34722*t34722);
                double t34798 = t34741*t34767;
                double t34768 = t34743-t34798;
                double t34769 = 1.0/(t34722*t34722*t34722*t34722);
                double t34772 = t34742*t34742;
                double t34773 = 1.0/pow(t34722,5.0/3.0);
                double t34774 = 1.0/sqrt(t34724);
                double t34775 = 1.0/t34738;
                double t34776 = 1.0/(t34733*t34733);
                double t34777 = b4p*t34773*t34729*(2.0/3.0);
                double t34778 = b2p*c*t34734*(1.0/3.0);
                double t34779 = b1p*c*t34734*t34774*(1.0/6.0);
                double t34780 = b3p*c*t34725*t34734*(1.0/2.0);
                double t34781 = t34780+t34777+t34778+t34779;
                double t34782 = t34740*t34781*t34775*t34776;
                double t34783 = 1.0/(t34722*t34722*t34722*t34722*t34722);
                double t34784 = 1.0/d2fz0;
                double t34785 = 1.0/Aa;
                double t34786 = b1a*t34725;
                double t34787 = b3a*t34727;
                double t34788 = b4a*t34730*t34729;
                double t34789 = b2a*c*t34723;
                double t34790 = t34786+t34787+t34788+t34789;
                double t34791 = 1.0/t34790;
                double t34792 = t34791*t34785*(1.0/2.0);
                double t34793 = t34792+1.0;
                double t34794 = log(t34793);
                double t34795 = a1a*c*t34723;
                double t34796 = t34795+1.0;
                double t34797 = pow(t34762,1.0/3.0);
                double t34799 = t34768*t34797*(4.0/3.0);
                double t34800 = pow(t34764,1.0/3.0);
                double t34801 = t34799-t34800*t34768*(4.0/3.0);
                double t34802 = t34772*t34769;
                double t34803 = t34802-1.0;
                double t34804 = 1.0/pow(rho_a,1.0/3.0);
                double t34805 = c*t34804;
                double t34806 = sqrt(t34805);
                double t34807 = b1f*t34806;
                double t34808 = pow(t34805,3.0/2.0);
                double t34809 = b3f*t34808;
                double t34810 = 1.0/pow(rho_a,2.0/3.0);
                double t34811 = b4f*t34810*t34729;
                double t34812 = b2f*c*t34804;
                double t34813 = t34811+t34812+t34807+t34809;
                double t34814 = 1.0/pow(rho_a,4.0/3.0);
                double t34815 = b1p*t34806;
                double t34816 = b3p*t34808;
                double t34817 = b4p*t34810*t34729;
                double t34818 = b2p*c*t34804;
                double t34819 = t34815+t34816+t34817+t34818;
                double t34820 = 1.0/pow(rho_a,5.0/3.0);
                double t34821 = 1.0/sqrt(t34805);
                double t34822 = 1.0/t34813;
                double t34823 = t34822*t34748*(1.0/2.0);
                double t34824 = t34823+1.0;
                double t34825 = 1.0/t34819;
                double t34826 = t34735*t34825*(1.0/2.0);
                double t34827 = t34826+1.0;
                double t34828 = a1p*c*t34804;
                double t34829 = t34828+1.0;
                double t34830 = 1.0/t34827;
                double t34831 = 1.0/(t34819*t34819);
                double t34832 = b4p*t34820*t34729*(2.0/3.0);
                double t34833 = b2p*c*t34814*(1.0/3.0);
                double t34834 = b1p*c*t34821*t34814*(1.0/6.0);
                double t34835 = b3p*c*t34814*t34806*(1.0/2.0);
                double t34836 = t34832+t34833+t34834+t34835;
                double t34837 = t34830*t34831*t34836*t34829;
                double t34838 = log(t34827);
                double t34839 = pow(2.0,1.0/3.0);
                double t34840 = t34839*2.0;
                double t34841 = t34840-2.0;
                double t34842 = log(t34824);
                double t34843 = a1f*c*t34804;
                double t34844 = t34843+1.0;
                double t34845 = 1.0/pow(rho_b,8.0/3.0);
                double t34846 = 1.0/pow(rho_a,8.0/3.0);
                double t34847 = gamma_aa*t34846*(1.0/2.0);
                double t34848 = gamma_bb*t34845*(1.0/2.0);
                double t34849 = t34847+t34848;
                double t34850 = gcab*t34849;
                double t34851 = t34850+1.0;
                double t34852 = gcab*gcab;
                double t34853 = t34849*t34849;
                double t34854 = t34852*t34852;
                double t34855 = t34853*t34853;
                double t34856 = t34852*t34853;
                double t34857 = gcab*t34849*2.0;
                double t34858 = t34856+t34857+1.0;
                double t34859 = t34852*t34853*3.0;
                double t34860 = gcab*t34852*t34853*t34849;
                double t34861 = gcab*t34849*3.0;
                double t34862 = t34860+t34861+t34859+1.0;
                double t34863 = t34852*t34853*6.0;
                double t34864 = gcab*t34852*t34853*t34849*4.0;
                double t34865 = t34854*t34855;
                double t34866 = gcab*t34849*4.0;
                double t34867 = t34863+t34864+t34865+t34866+1.0;
                double t34868 = c0f*t34842*t34844*2.0;
                double t34870 = c0p*t34829*t34838*2.0;
                double t34869 = -t34870+t34868;
                double t34871 = 1.0/pow(rho_b,1.0/3.0);
                double t34872 = c*t34871;
                double t34873 = sqrt(t34872);
                double t34874 = pow(t34872,3.0/2.0);
                double t34875 = 1.0/pow(rho_b,2.0/3.0);
                double t34876 = b1p*t34873;
                double t34877 = b3p*t34874;
                double t34878 = b4p*t34729*t34875;
                double t34879 = b2p*c*t34871;
                double t34880 = t34876+t34877+t34878+t34879;
                double t34881 = 1.0/t34880;
                double t34882 = t34735*t34881*(1.0/2.0);
                double t34883 = t34882+1.0;
                double t34884 = log(t34883);
                double t34885 = a1p*c*t34871;
                double t34886 = t34885+1.0;
                double t34887 = c0p*t34884*t34886*2.0;
                double t34888 = t34761*t34772*t34747*t34766*t34769;
                double t34889 = Aa*t34803*t34747*t34766*t34784*t34794*t34796*2.0;
                double t34890 = 1.0/pow(rho_a,1.1E1/3.0);
                double t34891 = 1.0/(t34862*t34862);
                double t34892 = 1.0/(t34867*t34867);
                double t34893 = gcab*t34845*2.0;
                double t34894 = t34852*t34845*t34849*6.0;
                double t34895 = gcab*t34852*t34853*t34845*6.0;
                double t34896 = t34853*t34845*t34854*t34849*2.0;
                double t34897 = t34893+t34894+t34895+t34896;
                double t34898 = 1.0/(t34858*t34858);
                double t34899 = gamma_aa*gcab*t34890*(8.0/3.0);
                double t34900 = gamma_aa*t34852*t34890*t34849*(8.0/3.0);
                double t34901 = t34900+t34899;
                double t34902 = gcab*t34845;
                double t34903 = t34852*t34845*t34849;
                double t34904 = t34902+t34903;
                double t34905 = gamma_aa*gcab*t34890*(1.6E1/3.0);
                double t34906 = gamma_aa*gcab*t34852*t34853*t34890*1.6E1;
                double t34907 = gamma_aa*t34853*t34854*t34890*t34849*(1.6E1/3.0);
                double t34908 = gamma_aa*t34852*t34890*t34849*1.6E1;
                double t34909 = t34905+t34906+t34907+t34908;
                double t34910 = 1.0/(t34851*t34851);
                double t34911 = 1.0/t34858;
                double t34912 = gcab*t34845*(3.0/2.0);
                double t34913 = t34852*t34845*t34849*3.0;
                double t34914 = gcab*t34852*t34853*t34845*(3.0/2.0);
                double t34915 = t34912+t34913+t34914;
                double t34916 = gamma_aa*gcab*t34890*4.0;
                double t34917 = gamma_aa*gcab*t34852*t34853*t34890*4.0;
                double t34918 = gamma_aa*t34852*t34890*t34849*8.0;
                double t34919 = t34916+t34917+t34918;
                double t34920 = 1.0/t34862;
                double t34921 = 1.0/t34867;
                v_rho_a_gamma_bb[Q] += scale * -(t34771+t34888+t34889+t34722*(t34782-t34772*t34747*t34766*t34769*(t34782-(1.0/(t34753*t34753)*t34759*(b2f*c*t34734*(1.0/3.0)+b4f*t34773*t34729*(2.0/3.0)+b1f*c*t34734*t34774*(1.0/6.0)+b3f*c*t34725*t34734*(1.0/2.0)))/t34756+a1f*c*c0f*t34734*t34757*(2.0/3.0)-a1p*c*c0p*t34760*t34734*(2.0/3.0))-a1p*c*c0p*t34760*t34734*(2.0/3.0)+t34801*t34761*t34772*t34747*t34769-t34761*t34772*t34747*t34783*t34766*4.0+t34741*t34742*t34761*t34747*t34766*t34769*4.0-Aa*t34747*t34766*t34784*t34794*t34796*(t34772*t34783*4.0-t34741*t34742*t34769*4.0)*2.0+Aa*t34801*t34803*t34747*t34784*t34794*t34796*2.0+(t34803*1.0/(t34790*t34790)*t34747*t34766*t34784*t34796*(b2a*c*t34734*(1.0/3.0)+b4a*t34773*t34729*(2.0/3.0)+b1a*c*t34734*t34774*(1.0/6.0)+b3a*c*t34725*t34734*(1.0/2.0)))/t34793-Aa*a1a*c*t34803*t34734*t34747*t34766*t34784*t34794*(2.0/3.0))+rho_a*(-t34837+t34841*t34747*(t34837-(1.0/(t34813*t34813)*t34844*(b2f*c*t34814*(1.0/3.0)+b4f*t34820*t34729*(2.0/3.0)+b1f*c*t34821*t34814*(1.0/6.0)+b3f*c*t34814*t34806*(1.0/2.0)))/t34824+a1f*c*c0f*t34814*t34842*(2.0/3.0)-a1p*c*c0p*t34814*t34838*(2.0/3.0))+a1p*c*c0p*t34814*t34838*(2.0/3.0))-c0p*t34829*t34838*2.0-t34841*t34747*t34869)*((ccab1*gcab*t34845*(1.0/2.0))/t34851-ccab1*t34910*t34852*t34845*t34849*(1.0/2.0)+ccab2*t34911*t34852*t34845*t34849-ccab2*t34904*t34852*t34853*t34898-ccab4*t34854*t34855*t34892*t34897+ccab4*t34921*t34853*t34845*t34854*t34849*2.0+ccab3*gcab*t34920*t34852*t34853*t34845*(3.0/2.0)-ccab3*gcab*t34852*t34915*t34853*t34891*t34849)+(rho_a*(t34870+t34841*t34747*t34869)+rho_b*(t34887-t34841*t34747*(t34887-c0f*log((t34748*(1.0/2.0))/(b1f*t34873+b3f*t34874+b2f*c*t34871+b4f*t34729*t34875)+1.0)*(a1f*c*t34871+1.0)*2.0))-t34722*(t34771+t34888+t34889))*(ccab4*t34854*t34855*t34892*(gamma_aa*t34852*t34845*t34890*8.0+gamma_aa*t34853*t34845*t34854*t34890*8.0+gamma_aa*gcab*t34852*t34845*t34890*t34849*1.6E1)+ccab2*t34901*t34852*t34845*t34849*t34898-ccab2*t34901*t34904*t34852*t34853*1.0/(t34858*t34858*t34858)*2.0-ccab4*t34854*t34855*t34909*1.0/(t34867*t34867*t34867)*t34897*2.0+ccab1*gamma_aa*t34910*t34852*t34845*t34890*(4.0/3.0)-ccab2*gamma_aa*t34911*t34852*t34845*t34890*(4.0/3.0)-ccab4*gamma_aa*t34921*t34853*t34845*t34854*t34890*8.0+ccab2*gamma_aa*t34904*t34852*t34890*t34849*t34898*(8.0/3.0)+ccab2*gamma_aa*t34853*t34845*t34854*t34890*t34898*(4.0/3.0)+ccab3*gcab*t34852*t34853*t34845*t34891*t34919*(3.0/2.0)+ccab4*t34853*t34845*t34854*t34909*t34892*t34849*2.0+ccab3*gcab*t34852*t34853*t34891*t34849*(gamma_aa*t34852*t34845*t34890*4.0+gamma_aa*gcab*t34852*t34845*t34890*t34849*4.0)-ccab1*gamma_aa*gcab*1.0/(t34851*t34851*t34851)*t34852*t34845*t34890*t34849*(4.0/3.0)-ccab3*gcab*t34852*t34915*t34853*1.0/(t34862*t34862*t34862)*t34919*t34849*2.0-ccab3*gamma_aa*gcab*t34920*t34852*t34845*t34890*t34849*4.0+ccab3*gamma_aa*gcab*t34852*t34915*t34853*t34890*t34891*4.0+ccab4*gamma_aa*t34853*t34854*t34890*t34892*t34849*t34897*(1.6E1/3.0));
            }
            
            // v_rho_b_gamma_aa
            if (deriv >= 2) {
                double t34923 = rho_a+rho_b;
                double t34924 = 1.0/pow(t34923,1.0/3.0);
                double t34925 = c*t34924;
                double t34926 = sqrt(t34925);
                double t34927 = b1p*t34926;
                double t34928 = pow(t34925,3.0/2.0);
                double t34929 = b3p*t34928;
                double t34930 = c*c;
                double t34931 = 1.0/pow(t34923,2.0/3.0);
                double t34932 = b4p*t34930*t34931;
                double t34933 = b2p*c*t34924;
                double t34934 = t34932+t34933+t34927+t34929;
                double t34935 = 1.0/pow(t34923,4.0/3.0);
                double t34936 = 1.0/c0p;
                double t34937 = 1.0/t34934;
                double t34938 = t34936*t34937*(1.0/2.0);
                double t34939 = t34938+1.0;
                double t34940 = a1p*c*t34924;
                double t34941 = t34940+1.0;
                double t34942 = rho_a-rho_b;
                double t34943 = t34942*t34942;
                double t34944 = 1.0/t34923;
                double t34945 = t34942*t34944;
                double t34946 = two_13*2.0;
                double t34947 = t34946-2.0;
                double t34948 = 1.0/t34947;
                double t34949 = 1.0/c0f;
                double t34950 = b1f*t34926;
                double t34951 = b3f*t34928;
                double t34952 = b4f*t34930*t34931;
                double t34953 = b2f*c*t34924;
                double t34954 = t34950+t34951+t34952+t34953;
                double t34955 = 1.0/t34954;
                double t34956 = t34955*t34949*(1.0/2.0);
                double t34957 = t34956+1.0;
                double t34958 = log(t34957);
                double t34959 = a1f*c*t34924;
                double t34960 = t34959+1.0;
                double t34961 = log(t34939);
                double t34972 = c0f*t34960*t34958*2.0;
                double t34973 = c0p*t34941*t34961*2.0;
                double t34962 = t34972-t34973;
                double t34963 = t34945+1.0;
                double t34964 = pow(t34963,4.0/3.0);
                double t34965 = -t34945+1.0;
                double t34966 = pow(t34965,4.0/3.0);
                double t34967 = t34964+t34966-2.0;
                double t34968 = 1.0/(t34923*t34923);
                double t34969 = t34942*t34968;
                double t34970 = t34944+t34969;
                double t34971 = 1.0/(t34923*t34923*t34923*t34923);
                double t34974 = t34943*t34943;
                double t34975 = 1.0/pow(t34923,5.0/3.0);
                double t34976 = 1.0/sqrt(t34925);
                double t34977 = 1.0/t34939;
                double t34978 = 1.0/(t34934*t34934);
                double t34979 = b4p*t34930*t34975*(2.0/3.0);
                double t34980 = b2p*c*t34935*(1.0/3.0);
                double t34981 = b1p*c*t34935*t34976*(1.0/6.0);
                double t34982 = b3p*c*t34926*t34935*(1.0/2.0);
                double t34983 = t34980+t34981+t34982+t34979;
                double t34984 = 1.0/(t34923*t34923*t34923*t34923*t34923);
                double t34985 = 1.0/d2fz0;
                double t34986 = 1.0/Aa;
                double t34987 = b1a*t34926;
                double t34988 = b3a*t34928;
                double t34989 = b4a*t34930*t34931;
                double t34990 = b2a*c*t34924;
                double t34991 = t34990+t34987+t34988+t34989;
                double t34992 = 1.0/t34991;
                double t34993 = t34992*t34986*(1.0/2.0);
                double t34994 = t34993+1.0;
                double t34995 = log(t34994);
                double t34996 = a1a*c*t34924;
                double t34997 = t34996+1.0;
                double t34998 = pow(t34963,1.0/3.0);
                double t34999 = t34970*t34998*(4.0/3.0);
                double t35000 = pow(t34965,1.0/3.0);
                double t35001 = t34999-t34970*t35000*(4.0/3.0);
                double t35002 = t34971*t34974;
                double t35003 = t35002-1.0;
                double t35004 = 1.0/pow(rho_b,1.0/3.0);
                double t35005 = c*t35004;
                double t35006 = sqrt(t35005);
                double t35007 = b1f*t35006;
                double t35008 = pow(t35005,3.0/2.0);
                double t35009 = b3f*t35008;
                double t35010 = 1.0/pow(rho_b,2.0/3.0);
                double t35011 = b4f*t34930*t35010;
                double t35012 = b2f*c*t35004;
                double t35013 = t35011+t35012+t35007+t35009;
                double t35014 = 1.0/pow(rho_b,4.0/3.0);
                double t35015 = b1p*t35006;
                double t35016 = b3p*t35008;
                double t35017 = b4p*t34930*t35010;
                double t35018 = b2p*c*t35004;
                double t35019 = t35015+t35016+t35017+t35018;
                double t35020 = 1.0/pow(rho_b,5.0/3.0);
                double t35021 = 1.0/sqrt(t35005);
                double t35022 = 1.0/t35013;
                double t35023 = t34949*t35022*(1.0/2.0);
                double t35024 = t35023+1.0;
                double t35025 = 1.0/t35019;
                double t35026 = t34936*t35025*(1.0/2.0);
                double t35027 = t35026+1.0;
                double t35028 = a1p*c*t35004;
                double t35029 = t35028+1.0;
                double t35030 = 1.0/t35027;
                double t35031 = 1.0/(t35019*t35019);
                double t35032 = b4p*t34930*t35020*(2.0/3.0);
                double t35033 = b2p*c*t35014*(1.0/3.0);
                double t35034 = b1p*c*t35021*t35014*(1.0/6.0);
                double t35035 = b3p*c*t35014*t35006*(1.0/2.0);
                double t35036 = t35032+t35033+t35034+t35035;
                double t35037 = t35030*t35031*t35036*t35029;
                double t35038 = log(t35027);
                double t35039 = pow(2.0,1.0/3.0);
                double t35040 = t35039*2.0;
                double t35041 = t35040-2.0;
                double t35042 = log(t35024);
                double t35043 = a1f*c*t35004;
                double t35044 = t35043+1.0;
                double t35045 = 1.0/pow(rho_a,8.0/3.0);
                double t35046 = gamma_aa*t35045*(1.0/2.0);
                double t35047 = 1.0/pow(rho_b,8.0/3.0);
                double t35048 = gamma_bb*t35047*(1.0/2.0);
                double t35049 = t35046+t35048;
                double t35050 = gcab*t35049;
                double t35051 = t35050+1.0;
                double t35052 = gcab*gcab;
                double t35053 = t35049*t35049;
                double t35054 = t35052*t35052;
                double t35055 = t35053*t35053;
                double t35056 = t35052*t35053;
                double t35057 = gcab*t35049*2.0;
                double t35058 = t35056+t35057+1.0;
                double t35059 = t35052*t35053*3.0;
                double t35060 = gcab*t35052*t35053*t35049;
                double t35061 = gcab*t35049*3.0;
                double t35062 = t35060+t35061+t35059+1.0;
                double t35063 = t35052*t35053*6.0;
                double t35064 = gcab*t35052*t35053*t35049*4.0;
                double t35065 = t35054*t35055;
                double t35066 = gcab*t35049*4.0;
                double t35067 = t35063+t35064+t35065+t35066+1.0;
                double t35068 = a1p*c*c0p*t34961*t34935*(2.0/3.0);
                double t35069 = 1.0/pow(rho_a,1.0/3.0);
                double t35070 = c*t35069;
                double t35071 = sqrt(t35070);
                double t35072 = pow(t35070,3.0/2.0);
                double t35073 = 1.0/pow(rho_a,2.0/3.0);
                double t35074 = b1p*t35071;
                double t35075 = b3p*t35072;
                double t35076 = b4p*t34930*t35073;
                double t35077 = b2p*c*t35069;
                double t35078 = t35074+t35075+t35076+t35077;
                double t35079 = 1.0/t35078;
                double t35080 = t34936*t35079*(1.0/2.0);
                double t35081 = t35080+1.0;
                double t35082 = log(t35081);
                double t35083 = a1p*c*t35069;
                double t35084 = t35083+1.0;
                double t35085 = c0p*t35082*t35084*2.0;
                double t35086 = c0f*t35042*t35044*2.0;
                double t35088 = c0p*t35029*t35038*2.0;
                double t35087 = t35086-t35088;
                double t35089 = t34962*t34971*t34974*t34948*t34967;
                double t35090 = Aa*t34948*t34967*t34985*t34995*t34997*t35003*2.0;
                double t35091 = 1.0/pow(rho_b,1.1E1/3.0);
                double t35092 = 1.0/(t35062*t35062);
                double t35093 = 1.0/(t35067*t35067);
                double t35094 = gcab*t35045*2.0;
                double t35095 = t35052*t35045*t35049*6.0;
                double t35096 = gcab*t35052*t35053*t35045*6.0;
                double t35097 = t35053*t35045*t35054*t35049*2.0;
                double t35098 = t35094+t35095+t35096+t35097;
                double t35099 = 1.0/(t35058*t35058);
                double t35100 = gamma_bb*gcab*t35091*(8.0/3.0);
                double t35101 = gamma_bb*t35052*t35091*t35049*(8.0/3.0);
                double t35102 = t35100+t35101;
                double t35103 = gcab*t35045;
                double t35104 = t35052*t35045*t35049;
                double t35105 = t35103+t35104;
                double t35106 = gamma_bb*gcab*t35091*(1.6E1/3.0);
                double t35107 = gamma_bb*gcab*t35052*t35053*t35091*1.6E1;
                double t35108 = gamma_bb*t35053*t35054*t35091*t35049*(1.6E1/3.0);
                double t35109 = gamma_bb*t35052*t35091*t35049*1.6E1;
                double t35110 = t35106+t35107+t35108+t35109;
                double t35111 = 1.0/(t35051*t35051);
                double t35112 = 1.0/t35058;
                double t35113 = gcab*t35045*(3.0/2.0);
                double t35114 = t35052*t35045*t35049*3.0;
                double t35115 = gcab*t35052*t35053*t35045*(3.0/2.0);
                double t35116 = t35113+t35114+t35115;
                double t35117 = gamma_bb*gcab*t35091*4.0;
                double t35118 = gamma_bb*gcab*t35052*t35053*t35091*4.0;
                double t35119 = gamma_bb*t35052*t35091*t35049*8.0;
                double t35120 = t35117+t35118+t35119;
                double t35121 = 1.0/t35062;
                double t35122 = 1.0/t35067;
                v_rho_b_gamma_aa[Q] += scale * (rho_b*(t35088+t34948*t35041*t35087)+rho_a*(t35085-t34948*t35041*(t35085-c0f*log((t34949*(1.0/2.0))/(b1f*t35071+b3f*t35072+b2f*c*t35069+b4f*t34930*t35073)+1.0)*(a1f*c*t35069+1.0)*2.0))-t34923*(t34973+t35090+t35089))*(ccab4*t35054*t35055*t35093*(gamma_bb*t35052*t35045*t35091*8.0+gamma_bb*t35053*t35045*t35054*t35091*8.0+gamma_bb*gcab*t35052*t35045*t35091*t35049*1.6E1)+ccab2*t35102*t35052*t35045*t35049*t35099-ccab2*t35102*t35105*t35052*t35053*1.0/(t35058*t35058*t35058)*2.0-ccab4*t35110*t35054*t35055*1.0/(t35067*t35067*t35067)*t35098*2.0+ccab1*gamma_bb*t35111*t35052*t35045*t35091*(4.0/3.0)-ccab2*gamma_bb*t35112*t35052*t35045*t35091*(4.0/3.0)-ccab4*gamma_bb*t35122*t35053*t35045*t35054*t35091*8.0+ccab2*gamma_bb*t35105*t35052*t35091*t35049*t35099*(8.0/3.0)+ccab2*gamma_bb*t35053*t35045*t35054*t35091*t35099*(4.0/3.0)+ccab3*gcab*t35120*t35052*t35053*t35045*t35092*(3.0/2.0)+ccab4*t35110*t35053*t35045*t35054*t35093*t35049*2.0+ccab3*gcab*t35052*t35053*t35092*t35049*(gamma_bb*t35052*t35045*t35091*4.0+gamma_bb*gcab*t35052*t35045*t35091*t35049*4.0)-ccab1*gamma_bb*gcab*1.0/(t35051*t35051*t35051)*t35052*t35045*t35091*t35049*(4.0/3.0)-ccab3*gcab*t35120*t35052*t35053*1.0/(t35062*t35062*t35062)*t35116*t35049*2.0-ccab3*gamma_bb*gcab*t35121*t35052*t35045*t35091*t35049*4.0+ccab3*gamma_bb*gcab*t35052*t35053*t35116*t35091*t35092*4.0+ccab4*gamma_bb*t35053*t35054*t35091*t35093*t35049*t35098*(1.6E1/3.0))-(t34973+t35090+t35089+rho_b*(-t35037+t34948*t35041*(t35037-(1.0/(t35013*t35013)*t35044*(b2f*c*t35014*(1.0/3.0)+b4f*t34930*t35020*(2.0/3.0)+b1f*c*t35021*t35014*(1.0/6.0)+b3f*c*t35014*t35006*(1.0/2.0)))/t35024+a1f*c*c0f*t35014*t35042*(2.0/3.0)-a1p*c*c0p*t35014*t35038*(2.0/3.0))+a1p*c*c0p*t35014*t35038*(2.0/3.0))-t34923*(t35068-t34941*t34983*t34977*t34978+t34962*t34974*t34948*t34984*t34967*4.0+t34962*t34971*t34974*t34948*t35001-t34971*t34974*t34948*t34967*(t35068-t34941*t34983*t34977*t34978+(t34960*1.0/(t34954*t34954)*(b2f*c*t34935*(1.0/3.0)+b4f*t34930*t34975*(2.0/3.0)+b1f*c*t34935*t34976*(1.0/6.0)+b3f*c*t34926*t34935*(1.0/2.0)))/t34957-a1f*c*c0f*t34935*t34958*(2.0/3.0))+t34942*t34943*t34962*t34971*t34948*t34967*4.0+Aa*t34948*t34967*t34985*t34995*t34997*(t34974*t34984*4.0+t34942*t34943*t34971*4.0)*2.0+Aa*t34948*t34985*t34995*t34997*t35001*t35003*2.0-(1.0/(t34991*t34991)*t34948*t34967*t34985*t34997*t35003*(b2a*c*t34935*(1.0/3.0)+b4a*t34930*t34975*(2.0/3.0)+b1a*c*t34935*t34976*(1.0/6.0)+b3a*c*t34926*t34935*(1.0/2.0)))/t34994+Aa*a1a*c*t34935*t34948*t34967*t34985*t34995*t35003*(2.0/3.0))-c0p*t35029*t35038*2.0-t34948*t35041*t35087)*((ccab1*gcab*t35045*(1.0/2.0))/t35051-ccab1*t35111*t35052*t35045*t35049*(1.0/2.0)+ccab2*t35112*t35052*t35045*t35049-ccab2*t35105*t35052*t35053*t35099-ccab4*t35054*t35055*t35093*t35098+ccab4*t35122*t35053*t35045*t35054*t35049*2.0+ccab3*gcab*t35121*t35052*t35053*t35045*(3.0/2.0)-ccab3*gcab*t35052*t35053*t35116*t35092*t35049);
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t35125 = 1.0/pow(rho_b,1.0/3.0);
                double t35126 = c*t35125;
                double t35127 = sqrt(t35126);
                double t35128 = pow(t35126,3.0/2.0);
                double t35129 = c*c;
                double t35130 = 1.0/pow(rho_b,2.0/3.0);
                double t35131 = 1.0/c0p;
                double t35132 = b1p*t35127;
                double t35133 = b3p*t35128;
                double t35134 = b4p*t35130*t35129;
                double t35135 = b2p*c*t35125;
                double t35136 = t35132+t35133+t35134+t35135;
                double t35137 = 1.0/t35136;
                double t35138 = t35131*t35137*(1.0/2.0);
                double t35139 = t35138+1.0;
                double t35140 = log(t35139);
                double t35141 = a1p*c*t35125;
                double t35142 = t35141+1.0;
                double t35143 = 1.0/pow(rho_b,8.0/3.0);
                double t35144 = gamma_bb*gamma_bb;
                double t35145 = gcaa*gcaa;
                double t35146 = t35145*t35145;
                double t35147 = 1.0/pow(rho_b,3.2E1/3.0);
                double t35148 = 1.0/pow(rho_b,1.6E1/3.0);
                double t35149 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35150 = gamma_bb*gcaa*t35143;
                double t35151 = t35150+1.0;
                double t35152 = gamma_bb*gcaa*t35143*3.0;
                double t35153 = gamma_bb*gcaa*t35144*t35145*t35149;
                double t35154 = t35144*t35145*t35148*3.0;
                double t35155 = t35152+t35153+t35154+1.0;
                double t35156 = t35144*t35144;
                double t35157 = gamma_bb*gcaa*t35143*4.0;
                double t35158 = gamma_bb*gcaa*t35144*t35145*t35149*4.0;
                double t35159 = t35144*t35145*t35148*6.0;
                double t35160 = t35146*t35147*t35156;
                double t35161 = t35160+t35157+t35158+t35159+1.0;
                double t35162 = gamma_bb*gcaa*t35143*2.0;
                double t35163 = t35144*t35145*t35148;
                double t35164 = t35162+t35163+1.0;
                double t35165 = rho_a+rho_b;
                double t35166 = 1.0/pow(t35165,1.0/3.0);
                double t35167 = c*t35166;
                double t35168 = sqrt(t35167);
                double t35169 = b1p*t35168;
                double t35170 = pow(t35167,3.0/2.0);
                double t35171 = b3p*t35170;
                double t35172 = 1.0/pow(t35165,2.0/3.0);
                double t35173 = b4p*t35172*t35129;
                double t35174 = b2p*c*t35166;
                double t35175 = t35171+t35173+t35174+t35169;
                double t35176 = 1.0/pow(t35165,4.0/3.0);
                double t35177 = two_13*2.0;
                double t35178 = t35177-2.0;
                double t35179 = 1.0/t35178;
                double t35180 = 1.0/c0f;
                double t35181 = 1.0/t35175;
                double t35182 = t35131*t35181*(1.0/2.0);
                double t35183 = t35182+1.0;
                double t35184 = a1p*c*t35166;
                double t35185 = t35184+1.0;
                double t35186 = rho_a-rho_b;
                double t35187 = t35186*t35186;
                double t35188 = 1.0/t35165;
                double t35189 = t35186*t35188;
                double t35190 = b1f*t35168;
                double t35191 = b3f*t35170;
                double t35192 = b4f*t35172*t35129;
                double t35193 = b2f*c*t35166;
                double t35194 = t35190+t35191+t35192+t35193;
                double t35195 = 1.0/t35194;
                double t35196 = t35180*t35195*(1.0/2.0);
                double t35197 = t35196+1.0;
                double t35198 = log(t35197);
                double t35199 = a1f*c*t35166;
                double t35200 = t35199+1.0;
                double t35201 = log(t35183);
                double t35212 = c0f*t35200*t35198*2.0;
                double t35213 = c0p*t35201*t35185*2.0;
                double t35202 = t35212-t35213;
                double t35203 = t35189+1.0;
                double t35204 = pow(t35203,4.0/3.0);
                double t35205 = -t35189+1.0;
                double t35206 = pow(t35205,4.0/3.0);
                double t35207 = t35204+t35206-2.0;
                double t35208 = 1.0/(t35165*t35165);
                double t35209 = t35208*t35186;
                double t35210 = t35209+t35188;
                double t35211 = 1.0/(t35165*t35165*t35165*t35165);
                double t35214 = t35187*t35187;
                double t35215 = 1.0/pow(t35165,5.0/3.0);
                double t35216 = 1.0/sqrt(t35167);
                double t35217 = 1.0/t35183;
                double t35218 = 1.0/(t35175*t35175);
                double t35219 = b4p*t35215*t35129*(2.0/3.0);
                double t35220 = b2p*c*t35176*(1.0/3.0);
                double t35221 = b1p*c*t35216*t35176*(1.0/6.0);
                double t35222 = b3p*c*t35176*t35168*(1.0/2.0);
                double t35223 = t35220+t35221+t35222+t35219;
                double t35224 = 1.0/(t35165*t35165*t35165*t35165*t35165);
                double t35225 = 1.0/d2fz0;
                double t35226 = 1.0/Aa;
                double t35227 = b1a*t35168;
                double t35228 = b3a*t35170;
                double t35229 = b4a*t35172*t35129;
                double t35230 = b2a*c*t35166;
                double t35231 = t35230+t35227+t35228+t35229;
                double t35232 = 1.0/t35231;
                double t35233 = t35232*t35226*(1.0/2.0);
                double t35234 = t35233+1.0;
                double t35235 = log(t35234);
                double t35236 = a1a*c*t35166;
                double t35237 = t35236+1.0;
                double t35238 = pow(t35203,1.0/3.0);
                double t35239 = t35210*t35238*(4.0/3.0);
                double t35240 = pow(t35205,1.0/3.0);
                double t35241 = t35239-t35210*t35240*(4.0/3.0);
                double t35242 = t35211*t35214;
                double t35243 = t35242-1.0;
                double t35244 = pow(2.0,1.0/3.0);
                double t35245 = t35244*2.0;
                double t35246 = t35245-2.0;
                double t35247 = a1f*c*t35125;
                double t35248 = t35247+1.0;
                double t35249 = b1f*t35127;
                double t35250 = b3f*t35128;
                double t35251 = b4f*t35130*t35129;
                double t35252 = b2f*c*t35125;
                double t35253 = t35250+t35251+t35252+t35249;
                double t35254 = 1.0/t35253;
                double t35255 = t35180*t35254*(1.0/2.0);
                double t35256 = t35255+1.0;
                double t35257 = 1.0/pow(rho_b,4.0/3.0);
                double t35258 = 1.0/pow(rho_b,5.0/3.0);
                double t35259 = 1.0/sqrt(t35126);
                double t35260 = log(t35256);
                double t35261 = 1.0/t35139;
                double t35262 = 1.0/(t35136*t35136);
                double t35263 = b4p*t35129*t35258*(2.0/3.0);
                double t35264 = b2p*c*t35257*(1.0/3.0);
                double t35265 = b1p*c*t35257*t35259*(1.0/6.0);
                double t35266 = b3p*c*t35127*t35257*(1.0/2.0);
                double t35267 = t35263+t35264+t35265+t35266;
                double t35268 = t35142*t35261*t35262*t35267;
                double t35269 = c0f*t35260*t35248*2.0;
                double t35270 = c0p*t35140*t35142*2.0;
                double t35271 = 1.0/pow(rho_a,8.0/3.0);
                double t35272 = gamma_aa*t35271*(1.0/2.0);
                double t35273 = gamma_bb*t35143*(1.0/2.0);
                double t35274 = t35272+t35273;
                double t35275 = gcab*t35274;
                double t35276 = t35275+1.0;
                double t35277 = gcab*gcab;
                double t35278 = t35274*t35274;
                double t35279 = t35277*t35277;
                double t35280 = t35278*t35278;
                double t35281 = t35277*t35278;
                double t35282 = gcab*t35274*2.0;
                double t35283 = t35281+t35282+1.0;
                double t35284 = t35277*t35278*3.0;
                double t35285 = gcab*t35274*t35277*t35278;
                double t35286 = gcab*t35274*3.0;
                double t35287 = t35284+t35285+t35286+1.0;
                double t35288 = t35277*t35278*6.0;
                double t35289 = gcab*t35274*t35277*t35278*4.0;
                double t35290 = t35280*t35279;
                double t35291 = gcab*t35274*4.0;
                double t35292 = t35290+t35291+t35288+t35289+1.0;
                double t35293 = a1p*c*c0p*t35201*t35176*(2.0/3.0);
                double t35294 = 1.0/pow(rho_a,1.0/3.0);
                double t35295 = c*t35294;
                double t35296 = sqrt(t35295);
                double t35297 = pow(t35295,3.0/2.0);
                double t35298 = 1.0/pow(rho_a,2.0/3.0);
                double t35299 = b1p*t35296;
                double t35300 = b3p*t35297;
                double t35301 = b4p*t35129*t35298;
                double t35302 = b2p*c*t35294;
                double t35303 = t35300+t35301+t35302+t35299;
                double t35304 = 1.0/t35303;
                double t35305 = t35131*t35304*(1.0/2.0);
                double t35306 = t35305+1.0;
                double t35307 = log(t35306);
                double t35308 = a1p*c*t35294;
                double t35309 = t35308+1.0;
                double t35310 = c0p*t35307*t35309*2.0;
                double t35311 = t35270-t35269;
                double t35312 = t35311*t35246*t35179;
                double t35313 = t35202*t35211*t35214*t35207*t35179;
                double t35314 = Aa*t35207*t35225*t35243*t35235*t35237*t35179*2.0;
                double t35315 = 1.0/t35276;
                double t35316 = 1.0/pow(rho_b,1.1E1/3.0);
                double t35317 = 1.0/(t35276*t35276);
                double t35318 = 1.0/t35283;
                double t35319 = 1.0/(t35287*t35287);
                double t35320 = 1.0/pow(rho_b,1.9E1/3.0);
                double t35321 = 1.0/(t35283*t35283);
                double t35322 = 1.0/t35287;
                double t35323 = 1.0/t35292;
                double t35324 = 1.0/(t35292*t35292);
                double t35325 = gcab*t35143*2.0;
                double t35326 = t35143*t35274*t35277*6.0;
                double t35327 = gcab*t35143*t35277*t35278*6.0;
                double t35328 = t35143*t35274*t35278*t35279*2.0;
                double t35329 = t35325+t35326+t35327+t35328;
                double t35330 = gamma_bb*gcab*t35316*(8.0/3.0);
                double t35331 = gamma_bb*t35316*t35274*t35277*(8.0/3.0);
                double t35332 = t35330+t35331;
                double t35333 = gcab*t35143;
                double t35334 = t35143*t35274*t35277;
                double t35335 = t35333+t35334;
                double t35336 = gamma_bb*gcab*t35316*(1.6E1/3.0);
                double t35337 = gamma_bb*gcab*t35316*t35277*t35278*1.6E1;
                double t35338 = gamma_bb*t35316*t35274*t35278*t35279*(1.6E1/3.0);
                double t35339 = gamma_bb*t35316*t35274*t35277*1.6E1;
                double t35340 = t35336+t35337+t35338+t35339;
                double t35341 = gcab*t35143*(3.0/2.0);
                double t35342 = t35143*t35274*t35277*3.0;
                double t35343 = gcab*t35143*t35277*t35278*(3.0/2.0);
                double t35344 = t35341+t35342+t35343;
                double t35345 = gamma_bb*gcab*t35316*4.0;
                double t35346 = gamma_bb*gcab*t35316*t35277*t35278*4.0;
                double t35347 = gamma_bb*t35316*t35274*t35277*8.0;
                double t35348 = t35345+t35346+t35347;
                double t35349 = 1.0/t35151;
                double t35350 = 1.0/t35161;
                double t35351 = 1.0/t35164;
                double t35352 = 1.0/t35155;
                double t35353 = 1.0/(t35151*t35151);
                double t35354 = 1.0/(rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b*rho_b);
                double t35355 = 1.0/(t35155*t35155);
                double t35356 = 1.0/(t35164*t35164);
                double t35357 = gcaa*t35143*3.0;
                double t35358 = gamma_bb*t35145*t35148*6.0;
                double t35359 = gcaa*t35144*t35145*t35149*3.0;
                double t35360 = t35357+t35358+t35359;
                double t35361 = 1.0/pow(rho_b,3.5E1/3.0);
                double t35362 = 1.0/(t35161*t35161);
                double t35363 = gcaa*t35143*4.0;
                double t35364 = gamma_bb*t35145*t35148*1.2E1;
                double t35365 = gcaa*t35144*t35145*t35149*1.2E1;
                double t35366 = gamma_bb*t35144*t35146*t35147*4.0;
                double t35367 = t35363+t35364+t35365+t35366;
                double t35368 = gcaa*t35143*2.0;
                double t35369 = gamma_bb*t35145*t35148*2.0;
                double t35370 = t35368+t35369;
                double t35371 = gamma_bb*gcaa*t35316*(1.6E1/3.0);
                double t35372 = t35320*t35144*t35145*(1.6E1/3.0);
                double t35373 = t35371+t35372;
                double t35374 = gamma_bb*gcaa*t35316*8.0;
                double t35375 = gamma_bb*gcaa*t35144*t35145*t35354*8.0;
                double t35376 = t35320*t35144*t35145*1.6E1;
                double t35377 = t35374+t35375+t35376;
                double t35378 = gamma_bb*gcaa*t35316*(3.2E1/3.0);
                double t35379 = gamma_bb*gcaa*t35144*t35145*t35354*3.2E1;
                double t35380 = t35320*t35144*t35145*3.2E1;
                double t35381 = t35361*t35146*t35156*(3.2E1/3.0);
                double t35382 = t35380+t35381+t35378+t35379;
                double t35383 = 1.0/t35256;
                double t35384 = 1.0/(t35253*t35253);
                double t35385 = b4f*t35129*t35258*(2.0/3.0);
                double t35386 = b2f*c*t35257*(1.0/3.0);
                double t35387 = b1f*c*t35257*t35259*(1.0/6.0);
                double t35388 = b3f*c*t35127*t35257*(1.0/2.0);
                double t35389 = t35385+t35386+t35387+t35388;
                double t35390 = a1f*c*c0f*t35260*t35257*(2.0/3.0);
                double t35391 = a1p*c*c0p*t35140*t35257*(2.0/3.0);
                double t35392 = ccaa1*gcaa*t35143*t35349;
                double t35393 = ccaa4*gamma_bb*t35350*t35144*t35146*t35147*4.0;
                double t35394 = ccaa2*gamma_bb*t35351*t35145*t35148*2.0;
                double t35395 = ccaa3*gcaa*t35144*t35145*t35352*t35149*3.0;
                double t35396 = t35392+t35393+t35394+t35395-ccaa1*gamma_bb*t35145*t35353*t35148-ccaa2*t35144*t35145*t35370*t35148*t35356-ccaa4*t35146*t35362*t35147*t35156*t35367-ccaa3*gamma_bb*gcaa*t35144*t35360*t35145*t35355*t35149;
                v_rho_b_gamma_bb[Q] += scale * -(t35213+t35312+t35313+t35314-t35270+rho_b*(t35391-t35268+t35246*t35179*(t35390+t35268-t35248*t35383*t35384*t35389-a1p*c*c0p*t35140*t35257*(2.0/3.0)))-t35165*(t35293-t35223*t35217*t35218*t35185+t35202*t35211*t35214*t35241*t35179+t35202*t35214*t35224*t35207*t35179*4.0-t35211*t35214*t35207*t35179*(t35293-t35223*t35217*t35218*t35185+(t35200*1.0/(t35194*t35194)*(b2f*c*t35176*(1.0/3.0)+b4f*t35215*t35129*(2.0/3.0)+b1f*c*t35216*t35176*(1.0/6.0)+b3f*c*t35176*t35168*(1.0/2.0)))/t35197-a1f*c*c0f*t35176*t35198*(2.0/3.0))+t35202*t35211*t35207*t35186*t35187*t35179*4.0+Aa*t35207*t35225*t35235*t35237*t35179*(t35214*t35224*4.0+t35211*t35186*t35187*4.0)*2.0+Aa*t35241*t35225*t35243*t35235*t35237*t35179*2.0-(1.0/(t35231*t35231)*t35207*t35225*t35243*t35237*t35179*(b2a*c*t35176*(1.0/3.0)+b4a*t35215*t35129*(2.0/3.0)+b1a*c*t35216*t35176*(1.0/6.0)+b3a*c*t35176*t35168*(1.0/2.0)))/t35234+Aa*a1a*c*t35207*t35225*t35243*t35235*t35176*t35179*(2.0/3.0)))*(ccab1*gcab*t35143*t35315*(1.0/2.0)-ccab1*t35143*t35317*t35274*t35277*(1.0/2.0)+ccab2*t35143*t35318*t35274*t35277-ccab2*t35321*t35335*t35277*t35278-ccab4*t35324*t35280*t35329*t35279+ccab4*t35143*t35323*t35274*t35278*t35279*2.0+ccab3*gcab*t35322*t35143*t35277*t35278*(3.0/2.0)-ccab3*gcab*t35344*t35274*t35319*t35277*t35278)+(rho_b*(t35312-t35270)-rho_a*(t35310-t35246*t35179*(t35310-c0f*log((t35180*(1.0/2.0))/(b1f*t35296+b3f*t35297+b2f*c*t35294+b4f*t35129*t35298)+1.0)*(a1f*c*t35294+1.0)*2.0))+t35165*(t35213+t35313+t35314))*(ccab1*gcab*t35315*t35316*(4.0/3.0)-ccab2*t35321*t35277*t35278*(gcab*t35316*(8.0/3.0)+gamma_bb*t35320*t35277*(4.0/3.0)+t35316*t35274*t35277*(8.0/3.0))-ccab4*t35324*t35280*t35279*(gcab*t35316*(1.6E1/3.0)+gamma_bb*t35320*t35277*8.0+t35316*t35274*t35277*1.6E1+gamma_bb*t35320*t35278*t35279*8.0+gcab*t35316*t35277*t35278*1.6E1+t35316*t35274*t35278*t35279*(1.6E1/3.0)+gamma_bb*gcab*t35320*t35274*t35277*1.6E1)-ccab1*gamma_bb*t35320*t35317*t35277*(4.0/3.0)+ccab2*gamma_bb*t35320*t35318*t35277*(4.0/3.0)-ccab1*t35316*t35317*t35274*t35277*(4.0/3.0)+ccab2*t35316*t35318*t35274*t35277*(8.0/3.0)-ccab2*t35321*t35143*t35332*t35274*t35277+ccab4*t35323*t35316*t35274*t35278*t35279*(1.6E1/3.0)+ccab4*t35340*t35280*1.0/(t35292*t35292*t35292)*t35329*t35279*2.0+ccab2*t35332*t35335*1.0/(t35283*t35283*t35283)*t35277*t35278*2.0+ccab4*gamma_bb*t35320*t35323*t35278*t35279*8.0+ccab3*gcab*t35322*t35316*t35277*t35278*4.0+ccab3*gamma_bb*gcab*t35320*t35322*t35274*t35277*4.0-ccab2*gamma_bb*t35321*t35316*t35335*t35274*t35277*(8.0/3.0)-ccab3*gcab*t35143*t35319*t35348*t35277*t35278*(3.0/2.0)-ccab4*t35340*t35143*t35324*t35274*t35278*t35279*2.0-ccab3*gcab*t35274*t35319*t35277*t35278*(gcab*t35316*4.0+gamma_bb*t35320*t35277*4.0+t35316*t35274*t35277*8.0+gcab*t35316*t35277*t35278*4.0+gamma_bb*gcab*t35320*t35274*t35277*4.0)+ccab1*gamma_bb*gcab*t35320*t35274*1.0/(t35276*t35276*t35276)*t35277*(4.0/3.0)+ccab3*gcab*t35344*t35274*t35348*t35277*t35278*1.0/(t35287*t35287*t35287)*2.0-ccab3*gamma_bb*gcab*t35316*t35344*t35319*t35277*t35278*4.0-ccab4*gamma_bb*t35324*t35316*t35274*t35329*t35278*t35279*(1.6E1/3.0))-t35396*(t35270+t35246*t35179*(t35269-c0p*t35140*t35142*2.0))+rho_b*(t35312-t35270)*(ccaa1*gcaa*t35316*t35349*(-8.0/3.0)-ccaa2*gamma_bb*t35320*t35351*t35145*(3.2E1/3.0)+ccaa1*gamma_bb*t35320*t35145*t35353*8.0+ccaa2*t35320*t35144*t35145*t35370*t35356*(1.6E1/3.0)+ccaa4*t35361*t35146*t35362*t35156*t35367*(3.2E1/3.0)+ccaa4*t35146*t35362*t35147*t35156*(gcaa*t35316*(3.2E1/3.0)+gamma_bb*t35320*t35145*6.4E1+gamma_bb*t35144*t35361*t35146*(1.28E2/3.0)+gcaa*t35144*t35145*t35354*9.6E1)-ccaa1*gcaa*1.0/(t35151*t35151*t35151)*t35144*t35145*t35354*(1.6E1/3.0)+ccaa2*t35144*t35145*t35148*t35356*(gcaa*t35316*(1.6E1/3.0)+gamma_bb*t35320*t35145*(3.2E1/3.0))-ccaa4*gamma_bb*t35350*t35144*t35361*t35146*(1.28E2/3.0)+ccaa2*gamma_bb*t35145*t35148*t35373*t35356*2.0-ccaa3*gcaa*t35144*t35145*t35352*t35354*2.4E1+ccaa4*gamma_bb*t35144*t35146*t35362*t35147*t35382*4.0+ccaa3*gcaa*t35144*t35145*t35355*t35149*t35377*3.0-ccaa2*t35144*t35145*t35370*1.0/(t35164*t35164*t35164)*t35148*t35373*2.0-ccaa4*1.0/(t35161*t35161*t35161)*t35146*t35147*t35156*t35382*t35367*2.0+ccaa3*gamma_bb*gcaa*t35144*t35145*t35355*t35149*(gcaa*t35316*8.0+gamma_bb*t35320*t35145*3.2E1+gcaa*t35144*t35145*t35354*2.4E1)+ccaa3*gamma_bb*gcaa*t35144*t35360*t35145*t35354*t35355*8.0-ccaa3*gamma_bb*gcaa*t35144*t35360*t35145*1.0/(t35155*t35155*t35155)*t35149*t35377*2.0)+rho_b*t35396*(t35391-t35268+t35246*t35179*(t35390-t35391+t35268-t35248*t35383*t35384*t35389));
            }
            
        }
    }
}

}
