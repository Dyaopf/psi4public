/**********************************************************
* HCTH407_functional.cc: definitions for HCTH407_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "HCTH407_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

HCTH407_Functional::HCTH407_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "HCTH407";
    description_ = "HCTH 407 Power Series GGA";
    citation_ = "A.D. Boese and N.C. Handy, J. Chem. Phys., 114(13), 5497-5503";

    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 5.8907600000000004E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 4.4237399999999996E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.9221800000000002E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 4.2572099999999999E+01;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -4.2005200000000002E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.1877700000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -2.4029199999999999E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 5.6174099999999996E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -9.1792300000000004E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 6.2479800000000001E+00;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 1.0818399999999999E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -5.1833899999999999E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 3.4256199999999999E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -2.6290100000000001E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 2.2885499999999999E+00;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
HCTH407_Functional::~HCTH407_Functional()
{
}
void HCTH407_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t56563 = 1.0/pow(rho_a[index],1.0/3.0);
            double t56564 = c*t56563;
            double t56565 = sqrt(t56564);
            double t56566 = pow(t56564,3.0/2.0);
            double t56567 = c*c;
            double t56568 = 1.0/pow(rho_a[index],2.0/3.0);
            double t56569 = 1.0/c0p;
            double t56570 = b1p*t56565;
            double t56571 = b3p*t56566;
            double t56572 = b4p*t56567*t56568;
            double t56573 = b2p*c*t56563;
            double t56574 = t56570+t56571+t56572+t56573;
            double t56575 = 1.0/t56574;
            double t56576 = t56575*t56569*(1.0/2.0);
            double t56577 = t56576+1.0;
            double t56578 = log(t56577);
            double t56579 = a1p*c*t56563;
            double t56580 = t56579+1.0;
            double t56581 = rho_a[index]*2.0;
            double t56582 = 1.0/pow(t56581,1.0/3.0);
            double t56583 = c*t56582;
            double t56584 = gamma_aa[index]*gamma_aa[index];
            double t56585 = gcab*gcab;
            double t56586 = t56584*t56584;
            double t56587 = t56585*t56585;
            double t56588 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t56589 = 1.0/pow(rho_a[index],8.0/3.0);
            double t56590 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t56591 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t56592 = pow(2.0,1.0/3.0);
            double t56593 = t56592*2.0;
            double t56594 = t56593-2.0;
            double t56595 = two_13*2.0;
            double t56596 = t56595-2.0;
            double t56597 = 1.0/t56596;
            double t56598 = 1.0/c0f;
            double t56599 = b1f*t56565;
            double t56600 = b3f*t56566;
            double t56601 = b4f*t56567*t56568;
            double t56602 = b2f*c*t56563;
            double t56603 = t56600+t56601+t56602+t56599;
            double t56604 = 1.0/t56603;
            double t56605 = t56604*t56598*(1.0/2.0);
            double t56606 = t56605+1.0;
            double t56607 = log(t56606);
            double t56608 = a1f*c*t56563;
            double t56609 = t56608+1.0;
            double t56610 = c0f*t56607*t56609*2.0;
            double t56611 = c0p*t56580*t56578*2.0;
            double t56612 = gcaa*gcaa;
            double t56613 = t56612*t56612;
            double t56614 = gx*gx;
            double t56615 = t56614*t56614;
            functional_[index] = (rho_a[index]*(t56611+t56594*t56597*(t56610-c0p*t56580*t56578*2.0))*2.0-c0p* \
               rho_a[index]*log((t56569*(1.0/2.0))/(b1p*sqrt(t56583)+b3p*pow(t56583,3.0/2.0)+b4p*1.0/pow(t56581,2.0/ \
               3.0)*t56567+b2p*c*t56582)+1.0)*(a1p*c*t56582+1.0)*4.0)*(ccab0+(ccab2*t56591*t56584*t56585)/(gamma_aa[index]* \
               gcab*t56589*2.0+t56591*t56584*t56585+1.0)+(ccab1*gamma_aa[index]*gcab*t56589)/(gamma_aa[index]*gcab* \
               t56589+1.0)+(ccab4*t56586*t56587*t56588)/(gamma_aa[index]*gcab*t56589*4.0+t56591*t56584*t56585*6.0+ \
               t56586*t56587*t56588+gamma_aa[index]*gcab*t56590*t56584*t56585*4.0+1.0)+(ccab3*gamma_aa[index]*gcab* \
               t56590*t56584*t56585)/(gamma_aa[index]*gcab*t56589*3.0+t56591*t56584*t56585*3.0+gamma_aa[index]*gcab* \
               t56590*t56584*t56585+1.0))-rho_a[index]*(t56611+t56594*t56597*(t56610-t56611))*(ccaa0+(ccaa2*t56612* \
               t56591*t56584)/(gamma_aa[index]*gcaa*t56589*2.0+t56612*t56591*t56584+1.0)+(ccaa1*gamma_aa[index]*gcaa* \
               t56589)/(gamma_aa[index]*gcaa*t56589+1.0)+(ccaa4*t56613*t56586*t56588)/(gamma_aa[index]*gcaa*t56589* \
               4.0+t56612*t56591*t56584*6.0+t56613*t56586*t56588+gamma_aa[index]*gcaa*t56612*t56590*t56584*4.0+1.0) \
               +(ccaa3*gamma_aa[index]*gcaa*t56612*t56590*t56584)/(gamma_aa[index]*gcaa*t56589*3.0+t56612*t56591* \
               t56584*3.0+gamma_aa[index]*gcaa*t56612*t56590*t56584+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2* \
               t56614*t56591*t56584)/(gamma_aa[index]*gx*t56589*2.0+t56614*t56591*t56584+1.0)+(cx1*gamma_aa[index]* \
               gx*t56589)/(gamma_aa[index]*gx*t56589+1.0)+(cx4*t56615*t56586*t56588)/(gamma_aa[index]*gx*t56589*4.0+ \
               t56614*t56591*t56584*6.0+t56615*t56586*t56588+gamma_aa[index]*gx*t56614*t56590*t56584*4.0+1.0)+(cx3* \
               gamma_aa[index]*gx*t56614*t56590*t56584)/(gamma_aa[index]*gx*t56589*3.0+t56614*t56591*t56584*3.0+gamma_aa[index]* \
               gx*t56614*t56590*t56584+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t56617 = gamma_aa[index]*gamma_aa[index];
            double t56618 = gcab*gcab;
            double t56619 = t56617*t56617;
            double t56620 = t56618*t56618;
            double t56621 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t56622 = 1.0/pow(rho_a[index],8.0/3.0);
            double t56623 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t56624 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t56625 = rho_a[index]*2.0;
            double t56626 = 1.0/pow(t56625,1.0/3.0);
            double t56627 = c*t56626;
            double t56628 = sqrt(t56627);
            double t56629 = b1p*t56628;
            double t56630 = pow(t56627,3.0/2.0);
            double t56631 = b3p*t56630;
            double t56632 = b2p*c*t56626;
            double t56633 = c*c;
            double t56634 = 1.0/pow(t56625,2.0/3.0);
            double t56635 = b4p*t56633*t56634;
            double t56636 = t56631+t56632+t56635+t56629;
            double t56637 = 1.0/pow(t56625,4.0/3.0);
            double t56638 = 1.0/c0p;
            double t56639 = 1.0/t56636;
            double t56640 = t56638*t56639*(1.0/2.0);
            double t56641 = t56640+1.0;
            double t56642 = 1.0/pow(rho_a[index],1.0/3.0);
            double t56643 = c*t56642;
            double t56644 = sqrt(t56643);
            double t56645 = b1f*t56644;
            double t56646 = pow(t56643,3.0/2.0);
            double t56647 = b3f*t56646;
            double t56648 = 1.0/pow(rho_a[index],2.0/3.0);
            double t56649 = b4f*t56633*t56648;
            double t56650 = b2f*c*t56642;
            double t56651 = t56650+t56645+t56647+t56649;
            double t56652 = 1.0/pow(rho_a[index],4.0/3.0);
            double t56653 = b1p*t56644;
            double t56654 = b3p*t56646;
            double t56655 = b4p*t56633*t56648;
            double t56656 = b2p*c*t56642;
            double t56657 = t56653+t56654+t56655+t56656;
            double t56658 = 1.0/pow(rho_a[index],5.0/3.0);
            double t56659 = 1.0/sqrt(t56643);
            double t56660 = 1.0/c0f;
            double t56661 = 1.0/t56651;
            double t56662 = t56660*t56661*(1.0/2.0);
            double t56663 = t56662+1.0;
            double t56664 = 1.0/t56657;
            double t56665 = t56664*t56638*(1.0/2.0);
            double t56666 = t56665+1.0;
            double t56667 = a1p*c*t56642;
            double t56668 = t56667+1.0;
            double t56669 = 1.0/t56666;
            double t56670 = 1.0/(t56657*t56657);
            double t56671 = b4p*t56633*t56658*(2.0/3.0);
            double t56672 = b2p*c*t56652*(1.0/3.0);
            double t56673 = b1p*c*t56652*t56659*(1.0/6.0);
            double t56674 = b3p*c*t56652*t56644*(1.0/2.0);
            double t56675 = t56671+t56672+t56673+t56674;
            double t56676 = t56670*t56675*t56668*t56669;
            double t56677 = log(t56666);
            double t56678 = log(t56641);
            double t56679 = a1p*c*t56626;
            double t56680 = t56679+1.0;
            double t56681 = pow(2.0,1.0/3.0);
            double t56682 = t56681*2.0;
            double t56683 = t56682-2.0;
            double t56684 = two_13*2.0;
            double t56685 = t56684-2.0;
            double t56686 = 1.0/t56685;
            double t56687 = log(t56663);
            double t56688 = a1f*c*t56642;
            double t56689 = t56688+1.0;
            double t56690 = c0f*t56687*t56689*2.0;
            double t56692 = c0p*t56668*t56677*2.0;
            double t56691 = t56690-t56692;
            double t56693 = gcaa*gcaa;
            double t56694 = t56693*t56693;
            double t56695 = t56691*t56683*t56686;
            double t56696 = t56692+t56695;
            double t56697 = gamma_aa[index]*gcab*t56622*4.0;
            double t56698 = gamma_aa[index]*gcab*t56623*t56617*t56618*4.0;
            double t56699 = t56624*t56617*t56618*6.0;
            double t56700 = t56620*t56621*t56619;
            double t56701 = t56700+t56697+t56698+t56699+1.0;
            double t56702 = 1.0/t56701;
            double t56703 = gamma_aa[index]*gcab*t56622;
            double t56704 = t56703+1.0;
            double t56705 = 1.0/t56704;
            double t56706 = gamma_aa[index]*gcab*t56622*3.0;
            double t56707 = gamma_aa[index]*gcab*t56623*t56617*t56618;
            double t56708 = t56624*t56617*t56618*3.0;
            double t56709 = t56706+t56707+t56708+1.0;
            double t56710 = 1.0/t56709;
            double t56711 = gamma_aa[index]*gcab*t56622*2.0;
            double t56712 = t56624*t56617*t56618;
            double t56713 = t56711+t56712+1.0;
            double t56714 = 1.0/t56713;
            double t56715 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t56716 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t56717 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t56718 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t56719 = gamma_aa[index]*gcaa*t56622*4.0;
            double t56720 = gamma_aa[index]*gcaa*t56623*t56617*t56693*4.0;
            double t56721 = t56624*t56617*t56693*6.0;
            double t56722 = t56621*t56619*t56694;
            double t56723 = t56720+t56721+t56722+t56719+1.0;
            double t56724 = 1.0/t56723;
            double t56725 = gamma_aa[index]*gcaa*t56622;
            double t56726 = t56725+1.0;
            double t56727 = 1.0/t56726;
            double t56728 = gamma_aa[index]*gcaa*t56622*3.0;
            double t56729 = gamma_aa[index]*gcaa*t56623*t56617*t56693;
            double t56730 = t56624*t56617*t56693*3.0;
            double t56731 = t56730+t56728+t56729+1.0;
            double t56732 = 1.0/t56731;
            double t56733 = gamma_aa[index]*gcaa*t56622*2.0;
            double t56734 = t56624*t56617*t56693;
            double t56735 = t56733+t56734+1.0;
            double t56736 = 1.0/t56735;
            double t56737 = gx*gx;
            double t56738 = t56737*t56737;
            double t56739 = gamma_aa[index]*gx*t56622*4.0;
            double t56740 = gamma_aa[index]*gx*t56623*t56617*t56737*4.0;
            double t56741 = t56624*t56617*t56737*6.0;
            double t56742 = t56621*t56619*t56738;
            double t56743 = t56740+t56741+t56742+t56739+1.0;
            double t56744 = 1.0/t56743;
            double t56745 = gamma_aa[index]*gx*t56622;
            double t56746 = t56745+1.0;
            double t56747 = 1.0/t56746;
            double t56748 = gamma_aa[index]*gx*t56622*3.0;
            double t56749 = gamma_aa[index]*gx*t56623*t56617*t56737;
            double t56750 = t56624*t56617*t56737*3.0;
            double t56751 = t56750+t56748+t56749+1.0;
            double t56752 = 1.0/t56751;
            double t56753 = gamma_aa[index]*gx*t56622*2.0;
            double t56754 = t56624*t56617*t56737;
            double t56755 = t56753+t56754+1.0;
            double t56756 = 1.0/t56755;
            double t56757 = 1.0/t56663;
            double t56758 = 1.0/(t56651*t56651);
            double t56759 = b4f*t56633*t56658*(2.0/3.0);
            double t56760 = b2f*c*t56652*(1.0/3.0);
            double t56761 = b1f*c*t56652*t56659*(1.0/6.0);
            double t56762 = b3f*c*t56652*t56644*(1.0/2.0);
            double t56763 = t56760+t56761+t56762+t56759;
            double t56764 = a1f*c*c0f*t56652*t56687*(2.0/3.0);
            double t56765 = a1p*c*c0p*t56652*t56677*(2.0/3.0);
            double t56766 = ccaa4*t56621*t56724*t56619*t56694;
            double t56767 = ccaa1*gamma_aa[index]*gcaa*t56622*t56727;
            double t56768 = ccaa3*gamma_aa[index]*gcaa*t56623*t56732*t56617*t56693;
            double t56769 = ccaa2*t56624*t56617*t56736*t56693;
            double t56770 = ccaa0+t56766+t56767+t56768+t56769;
            v_rho_a_[index] = -(rho_a[index]*t56696*2.0-c0p*rho_a[index]*t56680*t56678*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t56705*t56716*(4.0/3.0)+ccab4*t56620*t56702*t56619*t56718*(1.6E1/3.0)+ccab2*t56714*t56715*t56617* \
               t56618*(8.0/3.0)-ccab1*1.0/(t56704*t56704)*t56715*t56617*t56618*(4.0/3.0)-ccab2*1.0/(t56713*t56713) \
               *t56624*t56617*t56618*(gamma_aa[index]*gcab*t56716*(8.0/3.0)+t56715*t56617*t56618*(8.0/3.0))-ccab4* \
               t56620*1.0/(t56701*t56701)*t56621*t56619*(gamma_aa[index]*gcab*t56716*(1.6E1/3.0)+t56620*t56619*t56718* \
               (1.6E1/3.0)+t56715*t56617*t56618*1.6E1+gamma_aa[index]*gcab*t56617*t56618*t56717*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t56710*t56617*t56618*t56717*4.0-ccab3*gamma_aa[index]*gcab*t56623*t56617*t56618*1.0/(t56709*t56709) \
               *(gamma_aa[index]*gcab*t56716*4.0+t56715*t56617*t56618*8.0+gamma_aa[index]*gcab*t56617*t56618*t56717* \
               4.0))-t56770*t56696-(rho_a[index]*((t56680*1.0/(t56636*t56636)*(b4p*t56633*1.0/pow(t56625,5.0/3.0) \
               *(2.0/3.0)+b2p*c*t56637*(1.0/3.0)+b3p*c*t56628*t56637*(1.0/2.0)+b1p*c*1.0/sqrt(t56627)*t56637*(1.0/ \
               6.0)))/t56641-a1p*c*c0p*t56637*t56678*(2.0/3.0))*2.0+rho_a[index]*(t56765-t56676+t56683*t56686*(t56764+ \
               t56676-t56763*t56757*t56758*t56689-a1p*c*c0p*t56652*t56677*(2.0/3.0)))+c0p*t56680*t56678*2.0-c0p*t56668* \
               t56677*2.0-t56691*t56683*t56686)*(ccab0+ccab1*gamma_aa[index]*gcab*t56622*t56705+ccab4*t56620*t56621* \
               t56702*t56619+ccab2*t56624*t56714*t56617*t56618+ccab3*gamma_aa[index]*gcab*t56710*t56623*t56617*t56618) \
               +rho_a[index]*t56696*(ccaa1*gamma_aa[index]*gcaa*t56716*t56727*(8.0/3.0)+ccaa2*t56715*t56617*t56736* \
               t56693*(1.6E1/3.0)+ccaa4*t56724*t56619*t56718*t56694*(3.2E1/3.0)-ccaa1*t56715*t56617*1.0/(t56726*t56726) \
               *t56693*(8.0/3.0)-ccaa2*t56624*t56617*1.0/(t56735*t56735)*t56693*(gamma_aa[index]*gcaa*t56716*(1.6E1/ \
               3.0)+t56715*t56617*t56693*(1.6E1/3.0))-ccaa4*t56621*1.0/(t56723*t56723)*t56619*t56694*(gamma_aa[index]* \
               gcaa*t56716*(3.2E1/3.0)+t56715*t56617*t56693*3.2E1+t56619*t56718*t56694*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t56617*t56717*t56693*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t56732*t56617*t56717*t56693*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t56623*1.0/(t56731*t56731)*t56617*t56693*(gamma_aa[index]*gcaa*t56716*8.0+t56715* \
               t56617*t56693*1.6E1+gamma_aa[index]*gcaa*t56617*t56717*t56693*8.0))+c0*pow(rho_a[index],1.0/3.0)*(cx0+ \
               cx1*gamma_aa[index]*gx*t56622*t56747+cx2*t56624*t56617*t56737*t56756+cx4*t56621*t56744*t56619*t56738+ \
               cx3*gamma_aa[index]*gx*t56623*t56617*t56752*t56737)*(4.0/3.0)+rho_a[index]*t56770*(t56765-t56676+t56683* \
               t56686*(t56764-t56765+t56676-t56763*t56757*t56758*t56689))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t56716*t56747*(8.0/3.0)+cx2*t56715*t56617*t56737*t56756*(1.6E1/3.0)+cx4*t56744*t56619*t56718*t56738* \
               (3.2E1/3.0)-cx1*t56715*t56617*t56737*1.0/(t56746*t56746)*(8.0/3.0)-cx2*t56624*t56617*t56737*1.0/(t56755* \
               t56755)*(gamma_aa[index]*gx*t56716*(1.6E1/3.0)+t56715*t56617*t56737*(1.6E1/3.0))-cx4*t56621*1.0/(t56743* \
               t56743)*t56619*t56738*(gamma_aa[index]*gx*t56716*(3.2E1/3.0)+t56715*t56617*t56737*3.2E1+t56619*t56718* \
               t56738*(3.2E1/3.0)+gamma_aa[index]*gx*t56617*t56717*t56737*3.2E1)+cx3*gamma_aa[index]*gx*t56617*t56752* \
               t56717*t56737*8.0-cx3*gamma_aa[index]*gx*t56623*1.0/(t56751*t56751)*t56617*t56737*(gamma_aa[index]* \
               gx*t56716*8.0+t56715*t56617*t56737*1.6E1+gamma_aa[index]*gx*t56617*t56717*t56737*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t56772 = 1.0/pow(rho_a[index],1.0/3.0);
                double t56773 = c*t56772;
                double t56774 = sqrt(t56773);
                double t56775 = pow(t56773,3.0/2.0);
                double t56776 = c*c;
                double t56777 = 1.0/pow(rho_a[index],2.0/3.0);
                double t56778 = 1.0/c0p;
                double t56779 = b1p*t56774;
                double t56780 = b3p*t56775;
                double t56781 = b4p*t56776*t56777;
                double t56782 = b2p*c*t56772;
                double t56783 = t56780+t56781+t56782+t56779;
                double t56784 = 1.0/t56783;
                double t56785 = t56784*t56778*(1.0/2.0);
                double t56786 = t56785+1.0;
                double t56787 = log(t56786);
                double t56788 = a1p*c*t56772;
                double t56789 = t56788+1.0;
                double t56790 = rho_a[index]*2.0;
                double t56791 = 1.0/pow(t56790,1.0/3.0);
                double t56792 = c*t56791;
                double t56793 = 1.0/pow(rho_a[index],8.0/3.0);
                double t56794 = gamma_aa[index]*gamma_aa[index];
                double t56795 = gcab*gcab;
                double t56796 = t56795*t56795;
                double t56797 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t56798 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t56799 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t56800 = gamma_aa[index]*gcab*t56793;
                double t56801 = t56800+1.0;
                double t56802 = gamma_aa[index]*gcab*t56793*3.0;
                double t56803 = gamma_aa[index]*gcab*t56794*t56795*t56799;
                double t56804 = t56794*t56795*t56798*3.0;
                double t56805 = t56802+t56803+t56804+1.0;
                double t56806 = t56794*t56794;
                double t56807 = gamma_aa[index]*gcab*t56793*4.0;
                double t56808 = gamma_aa[index]*gcab*t56794*t56795*t56799*4.0;
                double t56809 = t56794*t56795*t56798*6.0;
                double t56810 = t56806*t56796*t56797;
                double t56811 = t56810+t56807+t56808+t56809+1.0;
                double t56812 = gamma_aa[index]*gcab*t56793*2.0;
                double t56813 = t56794*t56795*t56798;
                double t56814 = t56812+t56813+1.0;
                double t56815 = gx*gx;
                double t56816 = t56815*t56815;
                double t56817 = gamma_aa[index]*gx*t56793;
                double t56818 = t56817+1.0;
                double t56819 = gamma_aa[index]*gx*t56793*3.0;
                double t56820 = gamma_aa[index]*gx*t56815*t56794*t56799;
                double t56821 = t56815*t56794*t56798*3.0;
                double t56822 = t56820+t56821+t56819+1.0;
                double t56823 = gamma_aa[index]*gx*t56793*4.0;
                double t56824 = gamma_aa[index]*gx*t56815*t56794*t56799*4.0;
                double t56825 = t56815*t56794*t56798*6.0;
                double t56826 = t56806*t56816*t56797;
                double t56827 = t56823+t56824+t56825+t56826+1.0;
                double t56828 = gamma_aa[index]*gx*t56793*2.0;
                double t56829 = t56815*t56794*t56798;
                double t56830 = t56828+t56829+1.0;
                double t56831 = pow(2.0,1.0/3.0);
                double t56832 = t56831*2.0;
                double t56833 = t56832-2.0;
                double t56834 = two_13*2.0;
                double t56835 = t56834-2.0;
                double t56836 = 1.0/t56835;
                double t56837 = 1.0/c0f;
                double t56838 = b1f*t56774;
                double t56839 = b3f*t56775;
                double t56840 = b4f*t56776*t56777;
                double t56841 = b2f*c*t56772;
                double t56842 = t56840+t56841+t56838+t56839;
                double t56843 = 1.0/t56842;
                double t56844 = t56843*t56837*(1.0/2.0);
                double t56845 = t56844+1.0;
                double t56846 = log(t56845);
                double t56847 = a1f*c*t56772;
                double t56848 = t56847+1.0;
                double t56849 = c0f*t56846*t56848*2.0;
                double t56850 = c0p*t56787*t56789*2.0;
                double t56851 = gcaa*gcaa;
                double t56852 = t56851*t56851;
                double t56853 = gamma_aa[index]*gcaa*t56793;
                double t56854 = t56853+1.0;
                double t56855 = gamma_aa[index]*gcaa*t56793*3.0;
                double t56856 = gamma_aa[index]*gcaa*t56851*t56794*t56799;
                double t56857 = t56851*t56794*t56798*3.0;
                double t56858 = t56855+t56856+t56857+1.0;
                double t56859 = gamma_aa[index]*gcaa*t56793*4.0;
                double t56860 = gamma_aa[index]*gcaa*t56851*t56794*t56799*4.0;
                double t56861 = t56851*t56794*t56798*6.0;
                double t56862 = t56806*t56852*t56797;
                double t56863 = t56860+t56861+t56862+t56859+1.0;
                double t56864 = gamma_aa[index]*gcaa*t56793*2.0;
                double t56865 = t56851*t56794*t56798;
                double t56866 = t56864+t56865+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t56850+t56833*t56836*(t56849-c0p*t56787*t56789*2.0))*2.0-c0p* \
                   rho_a[index]*log((t56778*(1.0/2.0))/(b1p*sqrt(t56792)+b3p*pow(t56792,3.0/2.0)+b4p*1.0/pow(t56790,2.0/ \
                   3.0)*t56776+b2p*c*t56791)+1.0)*(a1p*c*t56791+1.0)*4.0)*((ccab1*gcab*t56793*(1.0/2.0))/t56801-ccab1* \
                   gamma_aa[index]*1.0/(t56801*t56801)*t56795*t56798*(1.0/2.0)+(ccab2*gamma_aa[index]*t56795*t56798)/ \
                   t56814-ccab2*1.0/(t56814*t56814)*t56794*t56795*t56798*(gcab*t56793+gamma_aa[index]*t56795*t56798)+ \
                   (ccab4*gamma_aa[index]*t56794*t56796*t56797*2.0)/t56811+(ccab3*gcab*t56794*t56795*t56799*(3.0/2.0) \
                   )/t56805-ccab4*1.0/(t56811*t56811)*t56806*t56796*t56797*(gcab*t56793*2.0+gamma_aa[index]*t56795*t56798* \
                   6.0+gamma_aa[index]*t56794*t56796*t56797*2.0+gcab*t56794*t56795*t56799*6.0)-ccab3*gamma_aa[index]* \
                   gcab*1.0/(t56805*t56805)*t56794*t56795*t56799*(gcab*t56793*(3.0/2.0)+gamma_aa[index]*t56795*t56798* \
                   3.0+gcab*t56794*t56795*t56799*(3.0/2.0)))*2.0-rho_a[index]*(t56850-t56833*t56836*(t56850-t56849))* \
                   ((ccaa1*gcaa*t56793)/t56854-ccaa1*gamma_aa[index]*t56851*1.0/(t56854*t56854)*t56798+(ccaa2*gamma_aa[index]* \
                   t56851*t56798*2.0)/t56866-ccaa2*t56851*t56794*1.0/(t56866*t56866)*t56798*(gcaa*t56793*2.0+gamma_aa[index]* \
                   t56851*t56798*2.0)+(ccaa4*gamma_aa[index]*t56852*t56794*t56797*4.0)/t56863+(ccaa3*gcaa*t56851*t56794* \
                   t56799*3.0)/t56858-ccaa4*t56806*t56852*1.0/(t56863*t56863)*t56797*(gcaa*t56793*4.0+gamma_aa[index]* \
                   t56851*t56798*1.2E1+gamma_aa[index]*t56852*t56794*t56797*4.0+gcaa*t56851*t56794*t56799*1.2E1)-ccaa3* \
                   gamma_aa[index]*gcaa*t56851*t56794*1.0/(t56858*t56858)*t56799*(gcaa*t56793*3.0+gamma_aa[index]*t56851* \
                   t56798*6.0+gcaa*t56851*t56794*t56799*3.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t56793)/t56818- \
                   cx1*gamma_aa[index]*t56815*1.0/(t56818*t56818)*t56798+(cx2*gamma_aa[index]*t56815*t56798*2.0)/t56830- \
                   cx2*1.0/(t56830*t56830)*t56815*t56794*t56798*(gx*t56793*2.0+gamma_aa[index]*t56815*t56798*2.0)+(cx4* \
                   gamma_aa[index]*t56816*t56794*t56797*4.0)/t56827+(cx3*gx*t56815*t56794*t56799*3.0)/t56822-cx4*t56806* \
                   t56816*1.0/(t56827*t56827)*t56797*(gx*t56793*4.0+gamma_aa[index]*t56815*t56798*1.2E1+gamma_aa[index]* \
                   t56816*t56794*t56797*4.0+gx*t56815*t56794*t56799*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t56822*t56822) \
                   *t56815*t56794*t56799*(gx*t56793*3.0+gamma_aa[index]*t56815*t56798*6.0+gx*t56815*t56794*t56799*3.0) \
                   )*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t56869 = rho_a[index]*2.0;
            double t56870 = 1.0/pow(t56869,1.0/3.0);
            double t56871 = c*t56870;
            double t56872 = sqrt(t56871);
            double t56873 = b1p*t56872;
            double t56874 = pow(t56871,3.0/2.0);
            double t56875 = b3p*t56874;
            double t56876 = b2p*c*t56870;
            double t56877 = c*c;
            double t56878 = 1.0/pow(t56869,2.0/3.0);
            double t56879 = b4p*t56877*t56878;
            double t56880 = t56873+t56875+t56876+t56879;
            double t56881 = 1.0/pow(t56869,8.0/3.0);
            double t56882 = 1.0/pow(t56869,7.0/3.0);
            double t56883 = 1.0/sqrt(t56871);
            double t56884 = 1.0/c0p;
            double t56885 = 1.0/t56880;
            double t56886 = t56884*t56885*(1.0/2.0);
            double t56887 = t56886+1.0;
            double t56888 = 1.0/t56887;
            double t56889 = a1p*c*t56870;
            double t56890 = t56889+1.0;
            double t56891 = 1.0/pow(t56869,4.0/3.0);
            double t56893 = b2p*c*t56891*(1.0/3.0);
            double t56894 = 1.0/pow(t56869,5.0/3.0);
            double t56895 = b4p*t56894*t56877*(2.0/3.0);
            double t56896 = b1p*c*t56891*t56883*(1.0/6.0);
            double t56897 = b3p*c*t56872*t56891*(1.0/2.0);
            double t56892 = t56893+t56895+t56896+t56897;
            double t56898 = t56892*t56892;
            double t56899 = 1.0/(t56880*t56880);
            double t56900 = log(t56887);
            double t56901 = gamma_aa[index]*gamma_aa[index];
            double t56902 = gcab*gcab;
            double t56903 = t56901*t56901;
            double t56904 = t56902*t56902;
            double t56905 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t56906 = 1.0/pow(rho_a[index],8.0/3.0);
            double t56907 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t56908 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t56909 = two_13*2.0;
            double t56910 = t56909-2.0;
            double t56911 = 1.0/t56910;
            double t56912 = 1.0/pow(rho_a[index],1.0/3.0);
            double t56913 = c*t56912;
            double t56914 = sqrt(t56913);
            double t56915 = pow(t56913,3.0/2.0);
            double t56916 = 1.0/pow(rho_a[index],2.0/3.0);
            double t56917 = b1p*t56914;
            double t56918 = b3p*t56915;
            double t56919 = b4p*t56916*t56877;
            double t56920 = b2p*c*t56912;
            double t56921 = t56920+t56917+t56918+t56919;
            double t56922 = 1.0/t56921;
            double t56923 = t56922*t56884*(1.0/2.0);
            double t56924 = t56923+1.0;
            double t56925 = log(t56924);
            double t56926 = a1p*c*t56912;
            double t56927 = t56926+1.0;
            double t56928 = gamma_aa[index]*gcab*t56906*4.0;
            double t56929 = gamma_aa[index]*gcab*t56901*t56902*t56907*4.0;
            double t56930 = t56901*t56902*t56908*6.0;
            double t56931 = t56903*t56904*t56905;
            double t56932 = t56930+t56931+t56928+t56929+1.0;
            double t56933 = 1.0/t56932;
            double t56934 = gamma_aa[index]*gcab*t56906;
            double t56935 = t56934+1.0;
            double t56936 = 1.0/t56935;
            double t56937 = gamma_aa[index]*gcab*t56906*3.0;
            double t56938 = gamma_aa[index]*gcab*t56901*t56902*t56907;
            double t56939 = t56901*t56902*t56908*3.0;
            double t56940 = t56937+t56938+t56939+1.0;
            double t56941 = 1.0/t56940;
            double t56942 = gamma_aa[index]*gcab*t56906*2.0;
            double t56943 = t56901*t56902*t56908;
            double t56944 = t56942+t56943+1.0;
            double t56945 = 1.0/t56944;
            double t56946 = 1.0/pow(rho_a[index],1.0E1);
            double t56947 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t56949 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t56950 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t56952 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t56959 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t56960 = gamma_aa[index]*gcab*t56949*(1.6E1/3.0);
            double t56961 = gamma_aa[index]*gcab*t56901*t56902*t56952*1.6E1;
            double t56962 = t56901*t56902*t56950*1.6E1;
            double t56963 = t56903*t56904*t56959*(1.6E1/3.0);
            double t56948 = t56960+t56961+t56962+t56963;
            double t56966 = gamma_aa[index]*gcab*t56949*(8.0/3.0);
            double t56967 = t56901*t56902*t56950*(8.0/3.0);
            double t56951 = t56966+t56967;
            double t56953 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t56954 = 1.0/(t56940*t56940);
            double t56955 = gamma_aa[index]*gcab*t56949*4.0;
            double t56956 = gamma_aa[index]*gcab*t56901*t56902*t56952*4.0;
            double t56957 = t56901*t56902*t56950*8.0;
            double t56958 = t56955+t56956+t56957;
            double t56964 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t56965 = 1.0/(t56932*t56932);
            double t56968 = 1.0/(t56944*t56944);
            double t56969 = pow(2.0,1.0/3.0);
            double t56970 = t56969*2.0;
            double t56971 = t56970-2.0;
            double t56972 = a1f*c*t56912;
            double t56973 = t56972+1.0;
            double t56974 = 1.0/c0f;
            double t56975 = b1f*t56914;
            double t56976 = b3f*t56915;
            double t56977 = b4f*t56916*t56877;
            double t56978 = b2f*c*t56912;
            double t56979 = t56975+t56976+t56977+t56978;
            double t56980 = 1.0/t56979;
            double t56981 = t56980*t56974*(1.0/2.0);
            double t56982 = t56981+1.0;
            double t56983 = 1.0/pow(rho_a[index],4.0/3.0);
            double t56984 = 1.0/pow(rho_a[index],5.0/3.0);
            double t56985 = 1.0/sqrt(t56913);
            double t56986 = log(t56982);
            double t56987 = 1.0/t56924;
            double t56988 = 1.0/(t56921*t56921);
            double t56989 = b4p*t56984*t56877*(2.0/3.0);
            double t56990 = b2p*c*t56983*(1.0/3.0);
            double t56991 = b1p*c*t56983*t56985*(1.0/6.0);
            double t56992 = b3p*c*t56914*t56983*(1.0/2.0);
            double t56993 = t56990+t56991+t56992+t56989;
            double t56994 = t56927*t56993*t56987*t56988;
            double t56995 = gcaa*gcaa;
            double t56996 = t56995*t56995;
            double t56997 = 1.0/t56982;
            double t56998 = 1.0/(t56979*t56979);
            double t56999 = b4f*t56984*t56877*(2.0/3.0);
            double t57000 = b2f*c*t56983*(1.0/3.0);
            double t57001 = b1f*c*t56983*t56985*(1.0/6.0);
            double t57002 = b3f*c*t56914*t56983*(1.0/2.0);
            double t57003 = t56999+t57000+t57001+t57002;
            double t57004 = a1f*c*c0f*t56983*t56986*(2.0/3.0);
            double t57005 = a1p*c*c0p*t56925*t56983*(2.0/3.0);
            double t57006 = c0f*t56973*t56986*2.0;
            double t57007 = c0p*t56925*t56927*2.0;
            double t57008 = 1.0/(t56935*t56935);
            double t57009 = ccab4*t56903*t56904*t56905*t56933;
            double t57010 = ccab1*gamma_aa[index]*gcab*t56906*t56936;
            double t57011 = ccab3*gamma_aa[index]*gcab*t56901*t56902*t56941*t56907;
            double t57012 = ccab2*t56901*t56902*t56908*t56945;
            double t57013 = ccab0+t57010+t57011+t57012+t57009;
            double t57014 = b2p*c*t56882*(4.0/9.0);
            double t57015 = b4p*t56881*t56877*(1.0E1/9.0);
            double t57016 = 1.0/pow(t56871,3.0/2.0);
            double t57017 = b3p*t56881*t56883*t56877*(1.0/1.2E1);
            double t57018 = b1p*c*t56882*t56883*(2.0/9.0);
            double t57019 = b3p*c*t56872*t56882*(2.0/3.0);
            double t57020 = t57014+t57015+t57017+t57018+t57019-b1p*t56881*t56877*t57016*(1.0/3.6E1);
            double t57021 = t56890*t56888*t56899*t57020;
            double t57022 = 1.0/(t56880*t56880*t56880);
            double t57023 = 1.0/(t56887*t56887);
            double t57024 = 1.0/(t56880*t56880*t56880*t56880);
            double t57025 = t56890*t56884*t56898*t57023*t57024*(1.0/2.0);
            double t57026 = 1.0/d2fz0;
            double t57027 = 1.0/(rho_a[index]*rho_a[index]);
            double t57028 = 1.0/Aa;
            double t57029 = b1a*t56872;
            double t57030 = b3a*t56874;
            double t57031 = b2a*c*t56870;
            double t57032 = b4a*t56877*t56878;
            double t57033 = t57030+t57031+t57032+t57029;
            double t57034 = 1.0/t57033;
            double t57035 = t57034*t57028*(1.0/2.0);
            double t57036 = t57035+1.0;
            double t57037 = log(t57036);
            double t57038 = a1a*c*t56870;
            double t57039 = t57038+1.0;
            double t57040 = a1p*c*t56891*t56892*t56888*t56899*(2.0/3.0);
            double t57041 = 1.0/pow(rho_a[index],7.0/3.0);
            double t57042 = 1.0/pow(t56913,3.0/2.0);
            double t57043 = t57003*t57003;
            double t57044 = t56993*t56993;
            double t57045 = 1.0/(t56921*t56921*t56921);
            double t57046 = t56927*t56987*t57044*t57045*2.0;
            double t57047 = b4p*t56906*t56877*(1.0E1/9.0);
            double t57048 = b2p*c*t57041*(4.0/9.0);
            double t57049 = b3p*t56906*t56877*t56985*(1.0/1.2E1);
            double t57050 = b1p*c*t56985*t57041*(2.0/9.0);
            double t57051 = b3p*c*t56914*t57041*(2.0/3.0);
            double t57163 = b1p*t56906*t56877*t57042*(1.0/3.6E1);
            double t57052 = t57050+t57051-t57163+t57047+t57048+t57049;
            double t57053 = 1.0/(t56924*t56924);
            double t57054 = 1.0/(t56921*t56921*t56921*t56921);
            double t57055 = a1p*c*c0p*t56925*t57041*(8.0/9.0);
            double t57090 = t56973*t56997*t56998*t57003;
            double t57056 = t56994+t57004-t57005-t57090;
            double t57057 = a1p*c*c0p*t56900*t56891*(4.0/3.0);
            double t57058 = t57006-t57007;
            double t57059 = gamma_aa[index]*gcaa*t56906*4.0;
            double t57060 = gamma_aa[index]*gcaa*t56901*t56907*t56995*4.0;
            double t57061 = t56901*t56908*t56995*6.0;
            double t57062 = t56903*t56905*t56996;
            double t57063 = t57060+t57061+t57062+t57059+1.0;
            double t57064 = 1.0/t57063;
            double t57065 = gamma_aa[index]*gcaa*t56906;
            double t57066 = t57065+1.0;
            double t57067 = 1.0/t57066;
            double t57068 = gamma_aa[index]*gcaa*t56906*3.0;
            double t57069 = gamma_aa[index]*gcaa*t56901*t56907*t56995;
            double t57070 = t56901*t56908*t56995*3.0;
            double t57071 = t57070+t57068+t57069+1.0;
            double t57072 = 1.0/t57071;
            double t57073 = gamma_aa[index]*gcaa*t56906*2.0;
            double t57074 = t56901*t56908*t56995;
            double t57075 = t57073+t57074+1.0;
            double t57076 = 1.0/t57075;
            double t57077 = t56911*t56971*t57058;
            double t57078 = t57007+t57077;
            double t57079 = 1.0/(t56935*t56935*t56935);
            double t57080 = ccab1*gamma_aa[index]*gcab*t56901*t56902*t56946*t57079*(3.2E1/9.0);
            double t57081 = t56948*t56948;
            double t57082 = 1.0/(t56932*t56932*t56932);
            double t57083 = ccab4*t56903*t56904*t56905*t57081*t57082*2.0;
            double t57084 = t56951*t56951;
            double t57085 = 1.0/(t56944*t56944*t56944);
            double t57086 = ccab2*t56901*t56902*t56908*t57084*t57085*2.0;
            double t57087 = t56958*t56958;
            double t57088 = 1.0/(t56940*t56940*t56940);
            double t57089 = ccab3*gamma_aa[index]*gcab*t56901*t56902*t56907*t57087*t57088*2.0;
            double t57091 = t56911*t56971*t57056;
            double t57092 = ccaa4*t56903*t56959*t56996*t57064*(3.2E1/3.0);
            double t57093 = ccaa1*gamma_aa[index]*gcaa*t56949*t57067*(8.0/3.0);
            double t57094 = ccaa3*gamma_aa[index]*gcaa*t56901*t56952*t56995*t57072*8.0;
            double t57095 = ccaa2*t56901*t56950*t56995*t57076*(1.6E1/3.0);
            double t57096 = 1.0/(t57066*t57066);
            double t57097 = gamma_aa[index]*gcaa*t56949*8.0;
            double t57098 = gamma_aa[index]*gcaa*t56901*t56952*t56995*8.0;
            double t57099 = t56901*t56950*t56995*1.6E1;
            double t57100 = t57097+t57098+t57099;
            double t57101 = 1.0/(t57071*t57071);
            double t57102 = gamma_aa[index]*gcaa*t56949*(3.2E1/3.0);
            double t57103 = gamma_aa[index]*gcaa*t56901*t56952*t56995*3.2E1;
            double t57104 = t56901*t56950*t56995*3.2E1;
            double t57105 = t56903*t56959*t56996*(3.2E1/3.0);
            double t57106 = t57102+t57103+t57104+t57105;
            double t57107 = 1.0/(t57063*t57063);
            double t57108 = gamma_aa[index]*gcaa*t56949*(1.6E1/3.0);
            double t57109 = t56901*t56950*t56995*(1.6E1/3.0);
            double t57110 = t57108+t57109;
            double t57111 = 1.0/(t57075*t57075);
            double t57112 = t57092+t57093+t57094+t57095-ccaa1*t56901*t56950*t56995*t57096*(8.0/3.0)-ccaa2*t56901* \
               t56908*t56995*t57110*t57111-ccaa4*t56903*t56905*t56996*t57106*t57107-ccaa3*gamma_aa[index]*gcaa*t56901* \
               t56907*t56995*t57100*t57101;
            double t57113 = -t56994+t57005+t57091;
            double t57114 = gx*gx;
            double t57115 = t57114*t57114;
            double t57116 = gamma_aa[index]*gx*t56906;
            double t57117 = t57116+1.0;
            double t57137 = gamma_aa[index]*gx*t56949*(3.2E1/3.0);
            double t57138 = gamma_aa[index]*gx*t56901*t56952*t57114*3.2E1;
            double t57139 = t56901*t56950*t57114*3.2E1;
            double t57140 = t56903*t56959*t57115*(3.2E1/3.0);
            double t57118 = t57140+t57137+t57138+t57139;
            double t57119 = gamma_aa[index]*gx*t56906*4.0;
            double t57120 = gamma_aa[index]*gx*t56901*t56907*t57114*4.0;
            double t57121 = t56901*t56908*t57114*6.0;
            double t57122 = t56903*t56905*t57115;
            double t57123 = t57120+t57121+t57122+t57119+1.0;
            double t57142 = gamma_aa[index]*gx*t56949*(1.6E1/3.0);
            double t57143 = t56901*t56950*t57114*(1.6E1/3.0);
            double t57124 = t57142+t57143;
            double t57125 = gamma_aa[index]*gx*t56906*2.0;
            double t57126 = t56901*t56908*t57114;
            double t57127 = t57125+t57126+1.0;
            double t57128 = gamma_aa[index]*gx*t56906*3.0;
            double t57129 = gamma_aa[index]*gx*t56901*t56907*t57114;
            double t57130 = t56901*t56908*t57114*3.0;
            double t57131 = t57130+t57128+t57129+1.0;
            double t57132 = 1.0/(t57131*t57131);
            double t57133 = gamma_aa[index]*gx*t56949*8.0;
            double t57134 = gamma_aa[index]*gx*t56901*t56952*t57114*8.0;
            double t57135 = t56901*t56950*t57114*1.6E1;
            double t57136 = t57133+t57134+t57135;
            double t57141 = 1.0/(t57123*t57123);
            double t57144 = 1.0/(t57127*t57127);
            double t57145 = 1.0/t57123;
            double t57146 = 1.0/t57117;
            double t57147 = 1.0/t57131;
            double t57148 = 1.0/t57127;
            double t57149 = 1.0/(t57117*t57117);
            double t57150 = ccaa4*t56903*t56905*t56996*t57064;
            double t57151 = ccaa1*gamma_aa[index]*gcaa*t56906*t57067;
            double t57152 = ccaa3*gamma_aa[index]*gcaa*t56901*t56907*t56995*t57072;
            double t57153 = ccaa2*t56901*t56908*t56995*t57076;
            double t57154 = ccaa0+t57150+t57151+t57152+t57153;
            double t57155 = 1.0/(t56979*t56979*t56979);
            double t57156 = b4f*t56906*t56877*(1.0E1/9.0);
            double t57157 = b2f*c*t57041*(4.0/9.0);
            double t57158 = b3f*t56906*t56877*t56985*(1.0/1.2E1);
            double t57159 = b1f*c*t56985*t57041*(2.0/9.0);
            double t57160 = b3f*c*t56914*t57041*(2.0/3.0);
            double t57161 = t57160+t57156+t57157+t57158+t57159-b1f*t56906*t56877*t57042*(1.0/3.6E1);
            double t57162 = t56973*t56997*t56998*t57161;
            double t57164 = t56927*t56987*t56988*t57052;
            double t57165 = 1.0/(t56982*t56982);
            double t57166 = 1.0/(t56979*t56979*t56979*t56979);
            double t57167 = t56973*t56974*t57043*t57165*t57166*(1.0/2.0);
            double t57168 = t56927*t56884*t57044*t57053*t57054*(1.0/2.0);
            double t57169 = a1f*c*t56983*t56997*t56998*t57003*(2.0/3.0);
            double t57170 = a1p*c*t56983*t56993*t56987*t56988*(2.0/3.0);
            v_rho_a_rho_a_[index] = -t57013*(-t57057-rho_a[index]*(t57021+t57040+t57025-t56890*t56888*t56898* \
               t57022*2.0-a1p*c*c0p*t56900*t56882*(8.0/9.0)+Aa*t56911*t57026*t57027*t57037*t57039*(4.0/9.0))*2.0+ \
               rho_a[index]*(t57170-t57046-t57055+t57164+t57168+t56911*t56971*(t57162+t57046+t57055+t57167+t57169- \
               t56927*t56987*t56988*t57052-t56973*t56997*t57043*t57155*2.0-a1f*c*c0f*t56986*t57041*(8.0/9.0)-t56927* \
               t56884*t57044*t57053*t57054*(1.0/2.0)-a1p*c*t56983*t56993*t56987*t56988*(2.0/3.0)))+t56911*t56971* \
               t57056*2.0+t56890*t56892*t56888*t56899*2.0-t56927*t56993*t56987*t56988*2.0+a1p*c*c0p*t56925*t56983* \
               (4.0/3.0))+t57112*t57078*2.0+(rho_a[index]*(t57007+t56911*t56971*(t57006-c0p*t56925*t56927*2.0))*2.0- \
               c0p*rho_a[index]*t56900*t56890*4.0)*(t57080+t57083+t57086+t57089+ccab1*gamma_aa[index]*gcab*t56953* \
               t56936*(4.4E1/9.0)+ccab2*t56901*t56902*t56945*t56947*(4.0E1/3.0)+ccab4*t56903*t56904*t56933*t56964* \
               (3.68E2/9.0)-ccab1*t56901*t56902*t56947*t57008*(7.6E1/9.0)-ccab2*t56901*t56902*t56950*t56951*t56968* \
               (1.6E1/3.0)-ccab4*t56903*t56904*t56965*t56948*t56959*(3.2E1/3.0)-ccab2*t56901*t56902*t56908*t56968* \
               (gamma_aa[index]*gcab*t56953*(8.8E1/9.0)+t56901*t56902*t56947*(4.0E1/3.0))-ccab4*t56903*t56904*t56905* \
               t56965*(gamma_aa[index]*gcab*t56953*(1.76E2/9.0)+t56901*t56902*t56947*8.0E1+t56903*t56904*t56964*(3.68E2/ \
               9.0)+gamma_aa[index]*gcab*t56901*t56902*t56946*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t56901*t56902* \
               t56941*t56946*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t56901*t56902*t56907*t56954*(gamma_aa[index]* \
               gcab*t56953*(4.4E1/3.0)+t56901*t56902*t56947*4.0E1+gamma_aa[index]*gcab*t56901*t56902*t56946*(7.6E1/ \
               3.0))-ccab3*gamma_aa[index]*gcab*t56901*t56902*t56952*t56954*t56958*8.0)+t57154*(-t56994+t57005+t56911* \
               t56971*(t56994+t57004-t56973*t56997*t56998*t57003-a1p*c*c0p*t56925*t56983*(2.0/3.0)))*2.0+(rho_a[index]* \
               t57078*2.0-c0p*rho_a[index]*t56900*t56890*4.0)*(t57080+t57083+t57086+t57089+ccab2*t56901*t56902*t56945* \
               t56947*(3.2E1/9.0)+ccab4*t56903*t56904*t56933*t56964*(6.4E1/3.0)-ccab2*t56903*t56904*t56964*t56968* \
               (3.2E1/9.0)-ccab1*t56901*t56902*t56947*t57008*(3.2E1/9.0)-ccab2*t56901*t56902*t56950*t56951*t56968* \
               (1.6E1/3.0)-ccab4*t56903*t56904*t56965*t56948*t56959*(3.2E1/3.0)-ccab4*t56903*t56904*t56905*t56965* \
               (t56901*t56902*t56947*(6.4E1/3.0)+t56903*t56904*t56964*(6.4E1/3.0)+gamma_aa[index]*gcab*t56901*t56902* \
               t56946*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t56901*t56902*t56941*t56946*(3.2E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t56901*t56902*t56907*t56954*(t56901*t56902*t56947*(3.2E1/3.0)+gamma_aa[index]*gcab*t56901*t56902* \
               t56946*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t56901*t56902*t56952*t56954*t56958*8.0)+t57013*(t57057+ \
               rho_a[index]*(t57021+t57040+t57025-t56890*t56888*t56898*t57022*2.0-a1p*c*c0p*t56900*t56882*(8.0/9.0) \
               -Aa*t56911*t57026*t57027*t57037*t57039*(4.0/9.0))*2.0-t56890*t56892*t56888*t56899*2.0)+(-t57007+rho_a[index]* \
               t57113+rho_a[index]*(t56890*t56892*t56888*t56899-a1p*c*c0p*t56900*t56891*(2.0/3.0))*2.0+c0p*t56900* \
               t56890*2.0-t56911*t56971*t57058)*(ccab1*gamma_aa[index]*gcab*t56936*t56949*(4.0/3.0)+ccab2*t56901* \
               t56902*t56950*t56945*(8.0/3.0)+ccab4*t56903*t56904*t56933*t56959*(1.6E1/3.0)-ccab1*t56901*t56902*t56950* \
               t57008*(4.0/3.0)-ccab2*t56901*t56902*t56951*t56908*t56968-ccab4*t56903*t56904*t56905*t56965*t56948+ \
               ccab3*gamma_aa[index]*gcab*t56901*t56902*t56941*t56952*4.0-ccab3*gamma_aa[index]*gcab*t56901*t56902* \
               t56907*t56954*t56958)*4.0+rho_a[index]*t57154*(t57170-t57046-t57055+t57164+t57168-t56911*t56971*(t57170- \
               t57162-t57046-t57055+t57164-t57167+t57168-t57169+t56973*t56997*t57043*t57155*2.0+a1f*c*c0f*t56986* \
               t57041*(8.0/9.0)))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t56949*t57146*(8.0/3.0)-cx1* \
               t56901*t56950*t57114*t57149*(8.0/3.0)+cx2*t56901*t56950*t57114*t57148*(1.6E1/3.0)+cx4*t56903*t56959* \
               t57115*t57145*(3.2E1/3.0)-cx2*t56901*t56908*t57114*t57124*t57144-cx4*t56903*t56905*t57141*t57115*t57118+ \
               cx3*gamma_aa[index]*gx*t56901*t56952*t57114*t57147*8.0-cx3*gamma_aa[index]*gx*t56901*t56907*t57114* \
               t57132*t57136)*(8.0/3.0)-rho_a[index]*t57078*(ccaa1*gamma_aa[index]*gcaa*t56953*t57067*(8.8E1/9.0) \
               +ccaa2*t56901*t56947*t56995*t57076*(3.04E2/9.0)-ccaa1*t56901*t56947*t56995*t57096*2.4E1+ccaa4*t56903* \
               t56964*t56996*t57064*(1.12E3/9.0)-ccaa2*t56901*t56950*t56995*t57110*t57111*(3.2E1/3.0)-ccaa4*t56903* \
               t56959*t56996*t57106*t57107*(6.4E1/3.0)-ccaa2*t56901*t56908*t56995*t57111*(gamma_aa[index]*gcaa*t56953* \
               (1.76E2/9.0)+t56901*t56947*t56995*(3.04E2/9.0))-ccaa4*t56903*t56905*t56996*t57107*(gamma_aa[index]* \
               gcaa*t56953*(3.52E2/9.0)+t56901*t56947*t56995*(6.08E2/3.0)+t56903*t56964*t56996*(1.12E3/9.0)+gamma_aa[index]* \
               gcaa*t56901*t56946*t56995*2.88E2)+ccaa2*t56901*t56908*t56995*(t57110*t57110)*1.0/(t57075*t57075*t57075) \
               *2.0+ccaa4*t56903*t56905*t56996*(t57106*t57106)*1.0/(t57063*t57063*t57063)*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t56901*t56946*t56995*t57072*7.2E1+ccaa1*gamma_aa[index]*gcaa*t56901*t56946*t56995*1.0/(t57066* \
               t57066*t57066)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t56901*t56907*t56995*(t57100*t57100)*1.0/(t57071* \
               t57071*t57071)*2.0-ccaa3*gamma_aa[index]*gcaa*t56901*t56907*t56995*t57101*(gamma_aa[index]*gcaa*t56953* \
               (8.8E1/3.0)+t56901*t56947*t56995*(3.04E2/3.0)+gamma_aa[index]*gcaa*t56901*t56946*t56995*7.2E1)-ccaa3* \
               gamma_aa[index]*gcaa*t56901*t56952*t56995*t57100*t57101*1.6E1)-rho_a[index]*t57112*t57113*2.0+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t56953*t57146*(8.8E1/9.0)-cx1*t56901*t56947*t57114*t57149*2.4E1+cx2*t56901* \
               t56947*t57114*t57148*(3.04E2/9.0)+cx4*t56903*t56964*t57115*t57145*(1.12E3/9.0)-cx2*t56901*t56950*t57114* \
               t57124*t57144*(3.2E1/3.0)-cx4*t56903*t56959*t57141*t57115*t57118*(6.4E1/3.0)-cx2*t56901*t56908*t57114* \
               t57144*(gamma_aa[index]*gx*t56953*(1.76E2/9.0)+t56901*t56947*t57114*(3.04E2/9.0))-cx4*t56903*t56905* \
               t57141*t57115*(gamma_aa[index]*gx*t56953*(3.52E2/9.0)+t56901*t56947*t57114*(6.08E2/3.0)+t56903*t56964* \
               t57115*(1.12E3/9.0)+gamma_aa[index]*gx*t56901*t56946*t57114*2.88E2)+cx2*t56901*t56908*t57114*(t57124* \
               t57124)*1.0/(t57127*t57127*t57127)*2.0+cx4*t56903*t56905*1.0/(t57123*t57123*t57123)*t57115*(t57118* \
               t57118)*2.0+cx3*gamma_aa[index]*gx*t56901*t56946*t57114*t57147*7.2E1+cx1*gamma_aa[index]*gx*t56901* \
               t56946*t57114*1.0/(t57117*t57117*t57117)*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t56901*t56907*1.0/(t57131* \
               t57131*t57131)*t57114*(t57136*t57136)*2.0-cx3*gamma_aa[index]*gx*t56901*t56907*t57114*t57132*(gamma_aa[index]* \
               gx*t56953*(8.8E1/3.0)+t56901*t56947*t57114*(3.04E2/3.0)+gamma_aa[index]*gx*t56901*t56946*t57114*7.2E1) \
               -cx3*gamma_aa[index]*gx*t56901*t56952*t57114*t57132*t57136*1.6E1)+c0*t56916*(cx0+cx1*gamma_aa[index]* \
               gx*t56906*t57146+cx2*t56901*t56908*t57114*t57148+cx4*t56903*t56905*t57115*t57145+cx3*gamma_aa[index]* \
               gx*t56901*t56907*t57114*t57147)*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t57172 = 1.0/pow(rho_a[index],1.0/3.0);
                double t57173 = c*t57172;
                double t57174 = sqrt(t57173);
                double t57175 = pow(t57173,3.0/2.0);
                double t57176 = c*c;
                double t57177 = 1.0/pow(rho_a[index],2.0/3.0);
                double t57178 = 1.0/c0p;
                double t57179 = b1p*t57174;
                double t57180 = b3p*t57175;
                double t57181 = b4p*t57176*t57177;
                double t57182 = b2p*c*t57172;
                double t57183 = t57180+t57181+t57182+t57179;
                double t57184 = 1.0/t57183;
                double t57185 = t57184*t57178*(1.0/2.0);
                double t57186 = t57185+1.0;
                double t57187 = log(t57186);
                double t57188 = a1p*c*t57172;
                double t57189 = t57188+1.0;
                double t57190 = 1.0/pow(rho_a[index],8.0/3.0);
                double t57191 = gamma_aa[index]*gamma_aa[index];
                double t57192 = gcaa*gcaa;
                double t57193 = t57192*t57192;
                double t57194 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t57195 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t57196 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t57197 = gamma_aa[index]*gcaa*t57190;
                double t57198 = t57197+1.0;
                double t57199 = gamma_aa[index]*gcaa*t57190*3.0;
                double t57200 = gamma_aa[index]*gcaa*t57191*t57192*t57196;
                double t57201 = t57191*t57192*t57195*3.0;
                double t57202 = t57200+t57201+t57199+1.0;
                double t57203 = t57191*t57191;
                double t57204 = gamma_aa[index]*gcaa*t57190*4.0;
                double t57205 = gamma_aa[index]*gcaa*t57191*t57192*t57196*4.0;
                double t57206 = t57191*t57192*t57195*6.0;
                double t57207 = t57203*t57193*t57194;
                double t57208 = t57204+t57205+t57206+t57207+1.0;
                double t57209 = gamma_aa[index]*gcaa*t57190*2.0;
                double t57210 = t57191*t57192*t57195;
                double t57211 = t57210+t57209+1.0;
                double t57212 = pow(2.0,1.0/3.0);
                double t57213 = t57212*2.0;
                double t57214 = t57213-2.0;
                double t57215 = two_13*2.0;
                double t57216 = t57215-2.0;
                double t57217 = 1.0/t57216;
                double t57218 = 1.0/c0f;
                double t57219 = b1f*t57174;
                double t57220 = b3f*t57175;
                double t57221 = b4f*t57176*t57177;
                double t57222 = b2f*c*t57172;
                double t57223 = t57220+t57221+t57222+t57219;
                double t57224 = 1.0/t57223;
                double t57225 = t57224*t57218*(1.0/2.0);
                double t57226 = t57225+1.0;
                double t57227 = log(t57226);
                double t57228 = a1f*c*t57172;
                double t57229 = t57228+1.0;
                double t57230 = c0f*t57227*t57229*2.0;
                double t57231 = c0p*t57187*t57189*2.0;
                double t57232 = rho_a[index]*2.0;
                double t57233 = 1.0/pow(t57232,1.0/3.0);
                double t57234 = c*t57233;
                double t57235 = gcab*gcab;
                double t57236 = t57235*t57235;
                double t57237 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t57238 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t57239 = gamma_aa[index]*gcab*t57190*2.0;
                double t57240 = t57235*t57191*t57195;
                double t57241 = t57240+t57239+1.0;
                double t57242 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t57243 = gamma_aa[index]*gcab*t57190;
                double t57244 = t57243+1.0;
                double t57245 = gamma_aa[index]*gcab*t57190*3.0;
                double t57246 = gamma_aa[index]*gcab*t57235*t57191*t57196;
                double t57247 = t57235*t57191*t57195*3.0;
                double t57248 = t57245+t57246+t57247+1.0;
                double t57249 = gamma_aa[index]*gcab*t57190*4.0;
                double t57250 = gamma_aa[index]*gcab*t57235*t57191*t57196*4.0;
                double t57251 = t57235*t57191*t57195*6.0;
                double t57252 = t57203*t57236*t57194;
                double t57253 = t57250+t57251+t57252+t57249+1.0;
                double t57254 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t57255 = 1.0/(t57241*t57241);
                double t57256 = 1.0/(t57248*t57248);
                double t57257 = 1.0/(t57253*t57253);
                double t57258 = gamma_aa[index]*gcab*t57254*(8.0/3.0);
                double t57259 = t57235*t57191*t57237*(8.0/3.0);
                double t57260 = t57258+t57259;
                double t57261 = gcab*t57190;
                double t57262 = gamma_aa[index]*t57235*t57195;
                double t57263 = t57261+t57262;
                double t57264 = gcab*t57190*(3.0/2.0);
                double t57265 = gamma_aa[index]*t57235*t57195*3.0;
                double t57266 = gcab*t57235*t57191*t57196*(3.0/2.0);
                double t57267 = t57264+t57265+t57266;
                double t57268 = gamma_aa[index]*gcab*t57254*4.0;
                double t57269 = gamma_aa[index]*gcab*t57242*t57235*t57191*4.0;
                double t57270 = t57235*t57191*t57237*8.0;
                double t57271 = t57270+t57268+t57269;
                double t57272 = gamma_aa[index]*gcab*t57254*(1.6E1/3.0);
                double t57273 = gamma_aa[index]*gcab*t57242*t57235*t57191*1.6E1;
                double t57274 = t57235*t57191*t57237*1.6E1;
                double t57275 = t57203*t57236*t57238*(1.6E1/3.0);
                double t57276 = t57272+t57273+t57274+t57275;
                double t57277 = gcab*t57190*2.0;
                double t57278 = gamma_aa[index]*t57235*t57195*6.0;
                double t57279 = gcab*t57235*t57191*t57196*6.0;
                double t57280 = gamma_aa[index]*t57191*t57236*t57194*2.0;
                double t57281 = t57280+t57277+t57278+t57279;
                double t57282 = t57230-t57231;
                double t57283 = t57214*t57217*t57282;
                double t57284 = t57231+t57283;
                double t57285 = rho_a[index]*t57284*2.0;
                double t57286 = sqrt(t57234);
                double t57287 = b1p*t57286;
                double t57288 = pow(t57234,3.0/2.0);
                double t57289 = b3p*t57288;
                double t57290 = b2p*c*t57233;
                double t57291 = 1.0/pow(t57232,2.0/3.0);
                double t57292 = b4p*t57291*t57176;
                double t57293 = t57290+t57292+t57287+t57289;
                double t57294 = 1.0/t57293;
                double t57295 = t57294*t57178*(1.0/2.0);
                double t57296 = t57295+1.0;
                double t57297 = log(t57296);
                double t57298 = a1p*c*t57233;
                double t57299 = t57298+1.0;
                double t57300 = t57285-c0p*rho_a[index]*t57297*t57299*4.0;
                double t57301 = 1.0/t57253;
                double t57302 = 1.0/t57241;
                double t57303 = 1.0/t57248;
                double t57304 = 1.0/(t57244*t57244);
                double t57305 = 1.0/(t57244*t57244*t57244);
                double t57306 = ccab3*gcab*t57235*t57271*t57191*t57256*t57196*(3.0/2.0);
                double t57307 = ccab2*gamma_aa[index]*t57260*t57235*t57255*t57195;
                double t57308 = ccab3*gamma_aa[index]*gcab*t57242*t57235*t57191*t57256*t57267*4.0;
                double t57309 = ccab4*gamma_aa[index]*t57191*t57236*t57194*t57257*t57276*2.0;
                double t57310 = ccab4*t57203*t57236*t57281*t57238*t57257*(1.6E1/3.0);
                double t57311 = ccab2*t57235*t57191*t57263*t57237*t57255*(8.0/3.0);
                double t57312 = gamma_aa[index]*t57235*t57237*4.0;
                double t57313 = 1.0/(t57241*t57241*t57241);
                double t57314 = 1.0/(t57248*t57248*t57248);
                double t57315 = 1.0/(t57253*t57253*t57253);
                double t57316 = 1.0/pow(t57232,4.0/3.0);
                double t57317 = 1.0/pow(rho_a[index],4.0/3.0);
                double t57318 = 1.0/pow(rho_a[index],5.0/3.0);
                double t57319 = 1.0/sqrt(t57173);
                double t57320 = 1.0/t57186;
                double t57321 = 1.0/(t57183*t57183);
                double t57322 = b4p*t57318*t57176*(2.0/3.0);
                double t57323 = b2p*c*t57317*(1.0/3.0);
                double t57324 = b1p*c*t57317*t57319*(1.0/6.0);
                double t57325 = b3p*c*t57317*t57174*(1.0/2.0);
                double t57326 = t57322+t57323+t57324+t57325;
                double t57327 = t57320*t57321*t57326*t57189;
                double t57328 = 1.0/t57244;
                double t57329 = gx*gx;
                double t57330 = t57329*t57329;
                double t57331 = gamma_aa[index]*gx*t57190;
                double t57332 = t57331+1.0;
                double t57333 = gamma_aa[index]*gx*t57190*3.0;
                double t57334 = gamma_aa[index]*gx*t57191*t57329*t57196;
                double t57335 = t57191*t57329*t57195*3.0;
                double t57336 = t57333+t57334+t57335+1.0;
                double t57337 = gamma_aa[index]*gx*t57190*4.0;
                double t57338 = gamma_aa[index]*gx*t57191*t57329*t57196*4.0;
                double t57339 = t57191*t57329*t57195*6.0;
                double t57340 = t57203*t57330*t57194;
                double t57341 = t57340+t57337+t57338+t57339+1.0;
                double t57342 = gamma_aa[index]*gx*t57190*2.0;
                double t57343 = t57191*t57329*t57195;
                double t57344 = t57342+t57343+1.0;
                double t57345 = 1.0/t57198;
                double t57346 = 1.0/t57208;
                double t57347 = 1.0/t57211;
                double t57348 = 1.0/t57202;
                double t57349 = 1.0/(t57198*t57198);
                double t57350 = 1.0/(t57202*t57202);
                double t57351 = 1.0/(t57211*t57211);
                double t57352 = gcaa*t57190*3.0;
                double t57353 = gamma_aa[index]*t57192*t57195*6.0;
                double t57354 = gcaa*t57191*t57192*t57196*3.0;
                double t57355 = t57352+t57353+t57354;
                double t57356 = 1.0/(t57208*t57208);
                double t57357 = gcaa*t57190*4.0;
                double t57358 = gamma_aa[index]*t57192*t57195*1.2E1;
                double t57359 = gcaa*t57191*t57192*t57196*1.2E1;
                double t57360 = gamma_aa[index]*t57191*t57193*t57194*4.0;
                double t57361 = t57360+t57357+t57358+t57359;
                double t57362 = gcaa*t57190*2.0;
                double t57363 = gamma_aa[index]*t57192*t57195*2.0;
                double t57364 = t57362+t57363;
                double t57365 = gamma_aa[index]*gcaa*t57254*(1.6E1/3.0);
                double t57366 = t57191*t57192*t57237*(1.6E1/3.0);
                double t57367 = t57365+t57366;
                double t57368 = gamma_aa[index]*gcaa*t57254*8.0;
                double t57369 = gamma_aa[index]*gcaa*t57242*t57191*t57192*8.0;
                double t57370 = t57191*t57192*t57237*1.6E1;
                double t57371 = t57370+t57368+t57369;
                double t57372 = gamma_aa[index]*gcaa*t57254*(3.2E1/3.0);
                double t57373 = gamma_aa[index]*gcaa*t57242*t57191*t57192*3.2E1;
                double t57374 = t57191*t57192*t57237*3.2E1;
                double t57375 = t57203*t57193*t57238*(3.2E1/3.0);
                double t57376 = t57372+t57373+t57374+t57375;
                double t57377 = 1.0/t57226;
                double t57378 = 1.0/(t57223*t57223);
                double t57379 = b4f*t57318*t57176*(2.0/3.0);
                double t57380 = b2f*c*t57317*(1.0/3.0);
                double t57381 = b1f*c*t57317*t57319*(1.0/6.0);
                double t57382 = b3f*c*t57317*t57174*(1.0/2.0);
                double t57383 = t57380+t57381+t57382+t57379;
                double t57384 = a1f*c*c0f*t57227*t57317*(2.0/3.0);
                double t57385 = a1p*c*c0p*t57317*t57187*(2.0/3.0);
                double t57386 = ccaa1*gcaa*t57190*t57345;
                double t57387 = ccaa4*gamma_aa[index]*t57191*t57193*t57346*t57194*4.0;
                double t57388 = ccaa2*gamma_aa[index]*t57192*t57347*t57195*2.0;
                double t57389 = ccaa3*gcaa*t57191*t57192*t57348*t57196*3.0;
                double t57390 = t57386+t57387+t57388+t57389-ccaa1*gamma_aa[index]*t57192*t57195*t57349-ccaa4*t57203* \
                   t57361*t57193*t57194*t57356-ccaa2*t57351*t57191*t57192*t57364*t57195-ccaa3*gamma_aa[index]*gcaa*t57350* \
                   t57191*t57192*t57355*t57196;
                double t57391 = 1.0/t57332;
                double t57392 = 1.0/t57341;
                double t57393 = 1.0/t57344;
                double t57394 = 1.0/t57336;
                double t57395 = 1.0/(t57332*t57332);
                double t57396 = 1.0/(t57336*t57336);
                double t57397 = 1.0/(t57344*t57344);
                double t57398 = gx*t57190*3.0;
                double t57399 = gamma_aa[index]*t57329*t57195*6.0;
                double t57400 = gx*t57191*t57329*t57196*3.0;
                double t57401 = t57400+t57398+t57399;
                double t57402 = 1.0/(t57341*t57341);
                double t57403 = gx*t57190*4.0;
                double t57404 = gamma_aa[index]*t57329*t57195*1.2E1;
                double t57405 = gx*t57191*t57329*t57196*1.2E1;
                double t57406 = gamma_aa[index]*t57330*t57191*t57194*4.0;
                double t57407 = t57403+t57404+t57405+t57406;
                double t57408 = gx*t57190*2.0;
                double t57409 = gamma_aa[index]*t57329*t57195*2.0;
                double t57410 = t57408+t57409;
                double t57411 = gamma_aa[index]*gx*t57254*(1.6E1/3.0);
                double t57412 = t57191*t57237*t57329*(1.6E1/3.0);
                double t57413 = t57411+t57412;
                double t57414 = gamma_aa[index]*gx*t57254*8.0;
                double t57415 = gamma_aa[index]*gx*t57242*t57191*t57329*8.0;
                double t57416 = t57191*t57237*t57329*1.6E1;
                double t57417 = t57414+t57415+t57416;
                double t57418 = gamma_aa[index]*gx*t57254*(3.2E1/3.0);
                double t57419 = gamma_aa[index]*gx*t57242*t57191*t57329*3.2E1;
                double t57420 = t57191*t57237*t57329*3.2E1;
                double t57421 = t57203*t57330*t57238*(3.2E1/3.0);
                double t57422 = t57420+t57421+t57418+t57419;
                v_rho_a_gamma_aa_[index] = t57300*(t57310+t57311+t57306+t57307+t57308+t57309-ccab2*gamma_aa[index]* \
                   t57302*t57235*t57237*(4.0/3.0)+ccab1*gamma_aa[index]*t57304*t57235*t57237*(4.0/3.0)+ccab4*t57203*t57236* \
                   t57194*t57257*(gamma_aa[index]*t57235*t57237*8.0+gamma_aa[index]*t57191*t57236*t57238*8.0+gcab*t57242* \
                   t57235*t57191*1.6E1)-ccab4*gamma_aa[index]*t57301*t57191*t57236*t57238*8.0+ccab2*gamma_aa[index]*t57191* \
                   t57236*t57255*t57238*(4.0/3.0)-ccab1*gcab*t57242*t57305*t57235*t57191*(4.0/3.0)-ccab3*gcab*t57303* \
                   t57242*t57235*t57191*4.0-ccab2*t57313*t57260*t57235*t57191*t57263*t57195*2.0-ccab4*t57203*t57315*t57236* \
                   t57281*t57194*t57276*2.0+ccab3*gamma_aa[index]*gcab*t57235*t57191*t57256*t57196*(t57312+gcab*t57242* \
                   t57235*t57191*4.0)-ccab3*gamma_aa[index]*gcab*t57314*t57235*t57271*t57191*t57267*t57196*2.0)-t57390* \
                   (t57231+t57214*t57217*(t57230-c0p*t57187*t57189*2.0))-(-t57231-t57283+rho_a[index]*((1.0/(t57293*t57293) \
                   *t57299*(b4p*1.0/pow(t57232,5.0/3.0)*t57176*(2.0/3.0)+b2p*c*t57316*(1.0/3.0)+b3p*c*t57316*t57286*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t57234)*t57316*(1.0/6.0)))/t57296-a1p*c*c0p*t57316*t57297*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t57327+t57385+t57214*t57217*(t57327+t57384-t57229*t57383*t57377*t57378-a1p*c*c0p*t57317*t57187*(2.0/ \
                   3.0)))+c0p*t57297*t57299*2.0)*(ccab1*gcab*t57190*t57328*(1.0/2.0)+ccab2*gamma_aa[index]*t57302*t57235* \
                   t57195-ccab1*gamma_aa[index]*t57304*t57235*t57195*(1.0/2.0)-ccab4*t57203*t57236*t57281*t57194*t57257- \
                   ccab2*t57235*t57191*t57263*t57255*t57195+ccab4*gamma_aa[index]*t57301*t57191*t57236*t57194*2.0+ccab3* \
                   gcab*t57303*t57235*t57191*t57196*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t57235*t57191*t57256*t57267* \
                   t57196)*2.0+t57300*(t57310+t57311+t57306+t57307+t57308+t57309-ccab1*gcab*t57254*t57328*(4.0/3.0)-ccab2* \
                   gamma_aa[index]*t57302*t57235*t57237*4.0+ccab1*gamma_aa[index]*t57304*t57235*t57237*(8.0/3.0)+ccab4* \
                   t57203*t57236*t57194*t57257*(gcab*t57254*(1.6E1/3.0)+gamma_aa[index]*t57235*t57237*2.4E1+gamma_aa[index]* \
                   t57191*t57236*t57238*(4.0E1/3.0)+gcab*t57242*t57235*t57191*3.2E1)+ccab2*t57235*t57191*t57255*t57195* \
                   (t57312+gcab*t57254*(8.0/3.0))-ccab4*gamma_aa[index]*t57301*t57191*t57236*t57238*(4.0E1/3.0)-ccab1* \
                   gcab*t57242*t57305*t57235*t57191*(4.0/3.0)-ccab3*gcab*t57303*t57242*t57235*t57191*8.0-ccab2*t57313* \
                   t57260*t57235*t57191*t57263*t57195*2.0-ccab4*t57203*t57315*t57236*t57281*t57194*t57276*2.0+ccab3*gamma_aa[index]* \
                   gcab*t57235*t57191*t57256*t57196*(gcab*t57254*4.0+gamma_aa[index]*t57235*t57237*1.2E1+gcab*t57242* \
                   t57235*t57191*8.0)-ccab3*gamma_aa[index]*gcab*t57314*t57235*t57271*t57191*t57267*t57196*2.0)-rho_a[index]* \
                   t57284*(ccaa1*gcaa*t57254*t57345*(-8.0/3.0)-ccaa2*gamma_aa[index]*t57192*t57237*t57347*(3.2E1/3.0) \
                   +ccaa1*gamma_aa[index]*t57192*t57237*t57349*8.0+ccaa2*t57351*t57191*t57192*t57237*t57364*(1.6E1/3.0) \
                   +ccaa4*t57203*t57361*t57193*t57238*t57356*(3.2E1/3.0)+ccaa4*t57203*t57193*t57194*t57356*(gcaa*t57254* \
                   (3.2E1/3.0)+gamma_aa[index]*t57192*t57237*6.4E1+gamma_aa[index]*t57191*t57193*t57238*(1.28E2/3.0)+ \
                   gcaa*t57242*t57191*t57192*9.6E1)-ccaa1*gcaa*t57242*t57191*t57192*1.0/(t57198*t57198*t57198)*(1.6E1/ \
                   3.0)+ccaa2*t57351*t57191*t57192*t57195*(gcaa*t57254*(1.6E1/3.0)+gamma_aa[index]*t57192*t57237*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t57351*t57192*t57195*t57367*2.0-ccaa4*gamma_aa[index]*t57191*t57193*t57238* \
                   t57346*(1.28E2/3.0)-ccaa3*gcaa*t57242*t57191*t57192*t57348*2.4E1+ccaa4*gamma_aa[index]*t57191*t57193* \
                   t57194*t57356*t57376*4.0+ccaa3*gcaa*t57350*t57191*t57371*t57192*t57196*3.0-ccaa4*t57203*1.0/(t57208* \
                   t57208*t57208)*t57361*t57193*t57194*t57376*2.0-ccaa2*1.0/(t57211*t57211*t57211)*t57191*t57192*t57364* \
                   t57195*t57367*2.0+ccaa3*gamma_aa[index]*gcaa*t57350*t57191*t57192*t57196*(gcaa*t57254*8.0+gamma_aa[index]* \
                   t57192*t57237*3.2E1+gcaa*t57242*t57191*t57192*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t57242*t57350*t57191* \
                   t57192*t57355*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t57202*t57202*t57202)*t57191*t57371*t57192*t57355* \
                   t57196*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t57254*t57391*(-8.0/3.0)+cx1*gamma_aa[index]*t57237* \
                   t57329*t57395*8.0-cx2*gamma_aa[index]*t57237*t57329*t57393*(3.2E1/3.0)+cx2*t57410*t57191*t57237*t57329* \
                   t57397*(1.6E1/3.0)+cx4*t57203*t57330*t57402*t57407*t57238*(3.2E1/3.0)+cx4*t57203*t57330*t57402*t57194* \
                   (gx*t57254*(3.2E1/3.0)+gamma_aa[index]*t57237*t57329*6.4E1+gamma_aa[index]*t57330*t57191*t57238*(1.28E2/ \
                   3.0)+gx*t57242*t57191*t57329*9.6E1)-cx1*gx*t57242*1.0/(t57332*t57332*t57332)*t57191*t57329*(1.6E1/ \
                   3.0)+cx2*t57191*t57329*t57195*t57397*(gx*t57254*(1.6E1/3.0)+gamma_aa[index]*t57237*t57329*(3.2E1/3.0) \
                   )+cx2*gamma_aa[index]*t57413*t57329*t57195*t57397*2.0-cx4*gamma_aa[index]*t57330*t57191*t57238*t57392* \
                   (1.28E2/3.0)-cx3*gx*t57242*t57191*t57329*t57394*2.4E1+cx4*gamma_aa[index]*t57330*t57402*t57422*t57191* \
                   t57194*4.0+cx3*gx*t57191*t57417*t57329*t57196*t57396*3.0-cx2*t57410*t57413*t57191*1.0/(t57344*t57344* \
                   t57344)*t57329*t57195*2.0-cx4*t57203*t57330*1.0/(t57341*t57341*t57341)*t57422*t57407*t57194*2.0+cx3* \
                   gamma_aa[index]*gx*t57191*t57329*t57196*t57396*(gx*t57254*8.0+gamma_aa[index]*t57237*t57329*3.2E1+ \
                   gx*t57242*t57191*t57329*2.4E1)+cx3*gamma_aa[index]*gx*t57401*t57242*t57191*t57329*t57396*8.0-cx3*gamma_aa[index]* \
                   gx*t57401*t57191*1.0/(t57336*t57336*t57336)*t57417*t57329*t57196*2.0)+rho_a[index]*t57390*(-t57327+ \
                   t57385+t57214*t57217*(t57327+t57384-t57385-t57229*t57383*t57377*t57378))+c0*pow(rho_a[index],1.0/3.0) \
                   *(cx1*gx*t57190*t57391-cx1*gamma_aa[index]*t57329*t57195*t57395+cx2*gamma_aa[index]*t57329*t57195* \
                   t57393*2.0-cx2*t57410*t57191*t57329*t57195*t57397-cx4*t57203*t57330*t57402*t57407*t57194+cx4*gamma_aa[index]* \
                   t57330*t57191*t57194*t57392*4.0+cx3*gx*t57191*t57329*t57196*t57394*3.0-cx3*gamma_aa[index]*gx*t57401* \
                   t57191*t57329*t57196*t57396)*(4.0/3.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t57424 = 1.0/pow(rho_a[index],1.0/3.0);
                double t57425 = c*t57424;
                double t57426 = sqrt(t57425);
                double t57427 = pow(t57425,3.0/2.0);
                double t57428 = c*c;
                double t57429 = 1.0/pow(rho_a[index],2.0/3.0);
                double t57430 = 1.0/c0p;
                double t57431 = b1p*t57426;
                double t57432 = b3p*t57427;
                double t57433 = b4p*t57428*t57429;
                double t57434 = b2p*c*t57424;
                double t57435 = t57431+t57432+t57433+t57434;
                double t57436 = 1.0/t57435;
                double t57437 = t57430*t57436*(1.0/2.0);
                double t57438 = t57437+1.0;
                double t57439 = log(t57438);
                double t57440 = a1p*c*t57424;
                double t57441 = t57440+1.0;
                double t57442 = rho_a[index]*2.0;
                double t57443 = 1.0/pow(t57442,1.0/3.0);
                double t57444 = c*t57443;
                double t57445 = gcab*gcab;
                double t57446 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t57447 = 1.0/pow(rho_a[index],8.0/3.0);
                double t57448 = gamma_aa[index]*gamma_aa[index];
                double t57449 = t57445*t57445;
                double t57450 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t57451 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t57452 = gamma_aa[index]*gcab*t57447;
                double t57453 = t57452+1.0;
                double t57454 = gamma_aa[index]*gcab*t57447*2.0;
                double t57455 = t57445*t57446*t57448;
                double t57456 = t57454+t57455+1.0;
                double t57457 = gamma_aa[index]*gcab*t57447*3.0;
                double t57458 = gamma_aa[index]*gcab*t57451*t57445*t57448;
                double t57459 = t57445*t57446*t57448*3.0;
                double t57460 = t57457+t57458+t57459+1.0;
                double t57461 = t57448*t57448;
                double t57477 = gcab*t57447*2.0;
                double t57478 = gamma_aa[index]*t57445*t57446*6.0;
                double t57479 = gcab*t57451*t57445*t57448*6.0;
                double t57480 = gamma_aa[index]*t57450*t57448*t57449*2.0;
                double t57462 = t57480+t57477+t57478+t57479;
                double t57463 = gamma_aa[index]*gcab*t57447*4.0;
                double t57464 = gamma_aa[index]*gcab*t57451*t57445*t57448*4.0;
                double t57465 = t57445*t57446*t57448*6.0;
                double t57466 = t57450*t57461*t57449;
                double t57467 = t57463+t57464+t57465+t57466+1.0;
                double t57470 = gcab*t57447;
                double t57471 = gamma_aa[index]*t57445*t57446;
                double t57468 = t57470+t57471;
                double t57469 = 1.0/(t57460*t57460);
                double t57472 = 1.0/(t57456*t57456);
                double t57473 = gcab*t57447*(3.0/2.0);
                double t57474 = gamma_aa[index]*t57445*t57446*3.0;
                double t57475 = gcab*t57451*t57445*t57448*(3.0/2.0);
                double t57476 = t57473+t57474+t57475;
                double t57481 = 1.0/(t57467*t57467);
                double t57482 = gx*gx;
                double t57483 = t57482*t57482;
                double t57484 = gamma_aa[index]*gx*t57447;
                double t57485 = t57484+1.0;
                double t57486 = gamma_aa[index]*gx*t57447*2.0;
                double t57487 = t57446*t57482*t57448;
                double t57488 = t57486+t57487+1.0;
                double t57489 = gamma_aa[index]*gx*t57447*3.0;
                double t57490 = gamma_aa[index]*gx*t57451*t57482*t57448;
                double t57491 = t57446*t57482*t57448*3.0;
                double t57492 = t57490+t57491+t57489+1.0;
                double t57508 = gx*t57447*4.0;
                double t57509 = gamma_aa[index]*t57446*t57482*1.2E1;
                double t57510 = gx*t57451*t57482*t57448*1.2E1;
                double t57511 = gamma_aa[index]*t57450*t57483*t57448*4.0;
                double t57493 = t57510+t57511+t57508+t57509;
                double t57494 = gamma_aa[index]*gx*t57447*4.0;
                double t57495 = gamma_aa[index]*gx*t57451*t57482*t57448*4.0;
                double t57496 = t57446*t57482*t57448*6.0;
                double t57497 = t57450*t57461*t57483;
                double t57498 = t57494+t57495+t57496+t57497+1.0;
                double t57501 = gx*t57447*2.0;
                double t57502 = gamma_aa[index]*t57446*t57482*2.0;
                double t57499 = t57501+t57502;
                double t57500 = 1.0/(t57492*t57492);
                double t57503 = 1.0/(t57488*t57488);
                double t57504 = gx*t57447*3.0;
                double t57505 = gamma_aa[index]*t57446*t57482*6.0;
                double t57506 = gx*t57451*t57482*t57448*3.0;
                double t57507 = t57504+t57505+t57506;
                double t57512 = 1.0/(t57498*t57498);
                double t57513 = pow(2.0,1.0/3.0);
                double t57514 = t57513*2.0;
                double t57515 = t57514-2.0;
                double t57516 = two_13*2.0;
                double t57517 = t57516-2.0;
                double t57518 = 1.0/t57517;
                double t57519 = 1.0/c0f;
                double t57520 = b1f*t57426;
                double t57521 = b3f*t57427;
                double t57522 = b4f*t57428*t57429;
                double t57523 = b2f*c*t57424;
                double t57524 = t57520+t57521+t57522+t57523;
                double t57525 = 1.0/t57524;
                double t57526 = t57525*t57519*(1.0/2.0);
                double t57527 = t57526+1.0;
                double t57528 = log(t57527);
                double t57529 = a1f*c*t57424;
                double t57530 = t57529+1.0;
                double t57531 = c0f*t57530*t57528*2.0;
                double t57532 = c0p*t57441*t57439*2.0;
                double t57533 = gcaa*gcaa;
                double t57534 = t57533*t57533;
                double t57535 = gamma_aa[index]*gcaa*t57447;
                double t57536 = t57535+1.0;
                double t57537 = gamma_aa[index]*gcaa*t57447*2.0;
                double t57538 = t57533*t57446*t57448;
                double t57539 = t57537+t57538+1.0;
                double t57540 = gamma_aa[index]*gcaa*t57447*3.0;
                double t57541 = gamma_aa[index]*gcaa*t57451*t57533*t57448;
                double t57542 = t57533*t57446*t57448*3.0;
                double t57543 = t57540+t57541+t57542+1.0;
                double t57559 = gcaa*t57447*4.0;
                double t57560 = gamma_aa[index]*t57533*t57446*1.2E1;
                double t57561 = gcaa*t57451*t57533*t57448*1.2E1;
                double t57562 = gamma_aa[index]*t57450*t57534*t57448*4.0;
                double t57544 = t57560+t57561+t57562+t57559;
                double t57545 = gamma_aa[index]*gcaa*t57447*4.0;
                double t57546 = gamma_aa[index]*gcaa*t57451*t57533*t57448*4.0;
                double t57547 = t57533*t57446*t57448*6.0;
                double t57548 = t57450*t57461*t57534;
                double t57549 = t57545+t57546+t57547+t57548+1.0;
                double t57552 = gcaa*t57447*2.0;
                double t57553 = gamma_aa[index]*t57533*t57446*2.0;
                double t57550 = t57552+t57553;
                double t57551 = 1.0/(t57543*t57543);
                double t57554 = 1.0/(t57539*t57539);
                double t57555 = gcaa*t57447*3.0;
                double t57556 = gamma_aa[index]*t57533*t57446*6.0;
                double t57557 = gcaa*t57451*t57533*t57448*3.0;
                double t57558 = t57555+t57556+t57557;
                double t57563 = 1.0/(t57549*t57549);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t57532+t57515*t57518*(t57531-c0p*t57441*t57439*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t57430*(1.0/2.0))/(b1p*sqrt(t57444)+b3p*pow(t57444,3.0/2.0)+b4p*1.0/pow(t57442,2.0/ \
                   3.0)*t57428+b2p*c*t57443)+1.0)*(a1p*c*t57443+1.0)*4.0)*(ccab1*1.0/(t57453*t57453)*t57445*t57446*(1.0/ \
                   2.0)-(ccab2*t57445*t57446*(1.0/2.0))/t57456+ccab2*t57450*t57472*t57448*t57449*(1.0/2.0)-(ccab4*t57450* \
                   t57448*t57449*3.0)/t57467+ccab4*t57450*t57461*t57481*t57449*(t57445*t57446*3.0+t57450*t57448*t57449* \
                   3.0+gamma_aa[index]*gcab*t57451*t57445*6.0)-(ccab3*gamma_aa[index]*gcab*t57451*t57445*(3.0/2.0))/t57460- \
                   ccab1*gamma_aa[index]*gcab*t57451*1.0/(t57453*t57453*t57453)*t57445*(1.0/2.0)-ccab4*t57450*t57461* \
                   (t57462*t57462)*t57449*1.0/(t57467*t57467*t57467)*2.0-ccab2*t57445*t57446*1.0/(t57456*t57456*t57456) \
                   *t57448*(t57468*t57468)*2.0+ccab2*gamma_aa[index]*t57445*t57472*t57446*t57468*2.0+ccab4*gamma_aa[index]* \
                   t57450*t57462*t57481*t57448*t57449*4.0+ccab3*gcab*t57451*t57445*t57448*t57476*t57469*3.0+ccab3*gamma_aa[index]* \
                   gcab*t57451*t57445*t57448*t57469*(t57445*t57446*(3.0/2.0)+gamma_aa[index]*gcab*t57451*t57445*(3.0/ \
                   2.0))-ccab3*gamma_aa[index]*gcab*t57451*1.0/(t57460*t57460*t57460)*t57445*t57448*(t57476*t57476)*2.0) \
                   *-4.0+rho_a[index]*(t57532+t57515*t57518*(t57531-t57532))*(ccaa1*t57533*t57446*1.0/(t57536*t57536) \
                   *2.0-(ccaa2*t57533*t57446*2.0)/t57539+ccaa2*t57450*t57534*t57554*t57448*2.0-(ccaa4*t57450*t57534*t57448* \
                   1.2E1)/t57549+ccaa4*t57450*t57461*t57534*t57563*(t57533*t57446*1.2E1+t57450*t57534*t57448*1.2E1+gamma_aa[index]* \
                   gcaa*t57451*t57533*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t57451*t57533*6.0)/t57543-ccaa1*gamma_aa[index]* \
                   gcaa*t57451*t57533*1.0/(t57536*t57536*t57536)*2.0-ccaa4*t57450*t57461*t57534*(t57544*t57544)*1.0/(t57549* \
                   t57549*t57549)*2.0-ccaa2*(t57550*t57550)*t57533*t57446*t57448*1.0/(t57539*t57539*t57539)*2.0+ccaa2* \
                   gamma_aa[index]*t57550*t57533*t57446*t57554*4.0+ccaa4*gamma_aa[index]*t57450*t57534*t57544*t57563* \
                   t57448*8.0+ccaa3*gcaa*t57451*t57533*t57551*t57448*t57558*6.0+ccaa3*gamma_aa[index]*gcaa*t57451*t57533* \
                   t57551*t57448*(t57533*t57446*6.0+gamma_aa[index]*gcaa*t57451*t57533*6.0)-ccaa3*gamma_aa[index]*gcaa* \
                   t57451*t57533*1.0/(t57543*t57543*t57543)*t57448*(t57558*t57558)*2.0)*2.0-c0*pow(rho_a[index],4.0/3.0) \
                   *(cx1*t57446*t57482*1.0/(t57485*t57485)*2.0-(cx2*t57446*t57482*2.0)/t57488+cx2*t57503*t57450*t57483* \
                   t57448*2.0-(cx4*t57450*t57483*t57448*1.2E1)/t57498+cx4*t57512*t57450*t57461*t57483*(t57446*t57482* \
                   1.2E1+t57450*t57483*t57448*1.2E1+gamma_aa[index]*gx*t57451*t57482*2.4E1)-cx1*gamma_aa[index]*gx*t57451* \
                   t57482*1.0/(t57485*t57485*t57485)*2.0-(cx3*gamma_aa[index]*gx*t57451*t57482*6.0)/t57492-cx2*t57446* \
                   t57482*t57448*1.0/(t57488*t57488*t57488)*(t57499*t57499)*2.0-cx4*t57450*t57461*t57483*(t57493*t57493) \
                   *1.0/(t57498*t57498*t57498)*2.0+cx2*gamma_aa[index]*t57503*t57446*t57482*t57499*4.0+cx4*gamma_aa[index]* \
                   t57512*t57450*t57483*t57448*t57493*8.0+cx3*gx*t57500*t57451*t57507*t57482*t57448*6.0+cx3*gamma_aa[index]* \
                   gx*t57500*t57451*t57482*t57448*(t57446*t57482*6.0+gamma_aa[index]*gx*t57451*t57482*6.0)-cx3*gamma_aa[index]* \
                   gx*t57451*(t57507*t57507)*t57482*1.0/(t57492*t57492*t57492)*t57448*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void HCTH407_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t51743 = 1.0/pow(rho_a[index],1.0/3.0);
            double t51744 = c*t51743;
            double t51745 = sqrt(t51744);
            double t51746 = pow(t51744,3.0/2.0);
            double t51747 = c*c;
            double t51748 = 1.0/pow(rho_a[index],2.0/3.0);
            double t51749 = 1.0/c0p;
            double t51750 = b1p*t51745;
            double t51751 = b3p*t51746;
            double t51752 = b4p*t51747*t51748;
            double t51753 = b2p*c*t51743;
            double t51754 = t51750+t51751+t51752+t51753;
            double t51755 = 1.0/t51754;
            double t51756 = t51755*t51749*(1.0/2.0);
            double t51757 = t51756+1.0;
            double t51758 = log(t51757);
            double t51759 = a1p*c*t51743;
            double t51760 = t51759+1.0;
            double t51761 = pow(2.0,1.0/3.0);
            double t51762 = t51761*2.0;
            double t51763 = t51762-2.0;
            double t51764 = two_13*2.0;
            double t51765 = t51764-2.0;
            double t51766 = 1.0/t51765;
            double t51767 = 1.0/c0f;
            double t51768 = 1.0/pow(rho_b[index],1.0/3.0);
            double t51769 = c*t51768;
            double t51770 = sqrt(t51769);
            double t51771 = pow(t51769,3.0/2.0);
            double t51772 = 1.0/pow(rho_b[index],2.0/3.0);
            double t51773 = b1p*t51770;
            double t51774 = b3p*t51771;
            double t51775 = b4p*t51772*t51747;
            double t51776 = b2p*c*t51768;
            double t51777 = t51773+t51774+t51775+t51776;
            double t51778 = 1.0/t51777;
            double t51779 = t51749*t51778*(1.0/2.0);
            double t51780 = t51779+1.0;
            double t51781 = log(t51780);
            double t51782 = a1p*c*t51768;
            double t51783 = t51782+1.0;
            double t51784 = c0p*t51781*t51783*2.0;
            double t51785 = rho_a[index]+rho_b[index];
            double t51786 = 1.0/pow(t51785,1.0/3.0);
            double t51787 = c*t51786;
            double t51788 = sqrt(t51787);
            double t51789 = pow(t51787,3.0/2.0);
            double t51790 = 1.0/pow(t51785,2.0/3.0);
            double t51791 = b1p*t51788;
            double t51792 = b3p*t51789;
            double t51793 = b4p*t51790*t51747;
            double t51794 = b2p*c*t51786;
            double t51795 = t51791+t51792+t51793+t51794;
            double t51796 = 1.0/t51795;
            double t51797 = t51749*t51796*(1.0/2.0);
            double t51798 = t51797+1.0;
            double t51799 = log(t51798);
            double t51800 = a1p*c*t51786;
            double t51801 = t51800+1.0;
            double t51802 = c0p*t51801*t51799*2.0;
            double t51803 = rho_a[index]-rho_b[index];
            double t51804 = t51803*t51803;
            double t51805 = 1.0/t51785;
            double t51806 = t51803*t51805;
            double t51807 = 1.0/(t51785*t51785*t51785*t51785);
            double t51808 = t51804*t51804;
            double t51809 = t51806+1.0;
            double t51810 = pow(t51809,4.0/3.0);
            double t51811 = -t51806+1.0;
            double t51812 = pow(t51811,4.0/3.0);
            double t51813 = t51810+t51812-2.0;
            double t51816 = 1.0/pow(rho_a[index],8.0/3.0);
            double t51817 = gamma_aa[index]*t51816*(1.0/2.0);
            double t51818 = 1.0/pow(rho_b[index],8.0/3.0);
            double t51819 = gamma_bb[index]*t51818*(1.0/2.0);
            double t51814 = t51817+t51819;
            double t51815 = gcab*gcab;
            double t51820 = t51814*t51814;
            double t51821 = t51815*t51815;
            double t51822 = t51820*t51820;
            double t51823 = c0p*t51760*t51758*2.0;
            double t51824 = b1f*t51745;
            double t51825 = b3f*t51746;
            double t51826 = b4f*t51747*t51748;
            double t51827 = b2f*c*t51743;
            double t51828 = t51824+t51825+t51826+t51827;
            double t51829 = 1.0/t51828;
            double t51830 = t51829*t51767*(1.0/2.0);
            double t51831 = t51830+1.0;
            double t51832 = log(t51831);
            double t51833 = a1f*c*t51743;
            double t51834 = t51833+1.0;
            double t51835 = t51823-c0f*t51832*t51834*2.0;
            double t51836 = t51823-t51763*t51835*t51766;
            double t51837 = gamma_aa[index]*gamma_aa[index];
            double t51838 = gcaa*gcaa;
            double t51839 = t51837*t51837;
            double t51840 = t51838*t51838;
            double t51841 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t51842 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t51843 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t51844 = b1f*t51770;
            double t51845 = b3f*t51771;
            double t51846 = b4f*t51772*t51747;
            double t51847 = b2f*c*t51768;
            double t51848 = t51844+t51845+t51846+t51847;
            double t51849 = 1.0/t51848;
            double t51850 = t51767*t51849*(1.0/2.0);
            double t51851 = t51850+1.0;
            double t51852 = log(t51851);
            double t51853 = a1f*c*t51768;
            double t51854 = t51853+1.0;
            double t51855 = t51784-c0f*t51852*t51854*2.0;
            double t51856 = t51784-t51763*t51855*t51766;
            double t51857 = gamma_bb[index]*gamma_bb[index];
            double t51858 = t51857*t51857;
            double t51859 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t51860 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t51861 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t51862 = gx*gx;
            double t51863 = t51862*t51862;
            functional_[index] = (rho_a[index]*t51836+rho_b[index]*t51856-t51785*(t51802-t51813*t51807*t51808* \
               t51766*(t51802-c0f*log((t51767*(1.0/2.0))/(b1f*t51788+b3f*t51789+b2f*c*t51786+b4f*t51790*t51747)+1.0) \
               *(a1f*c*t51786+1.0)*2.0)+(Aa*t51813*t51766*log((1.0/2.0)/(Aa*(b1a*t51788+b3a*t51789+b2a*c*t51786+b4a* \
               t51790*t51747))+1.0)*(t51807*t51808-1.0)*(a1a*c*t51786+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t51821*t51822) \
               /(gcab*t51814*4.0+t51821*t51822+t51820*t51815*6.0+gcab*t51820*t51814*t51815*4.0+1.0)+(ccab1*gcab*t51814) \
               /(gcab*t51814+1.0)+(ccab2*t51820*t51815)/(gcab*t51814*2.0+t51820*t51815+1.0)+(ccab3*gcab*t51820*t51814* \
               t51815)/(gcab*t51814*3.0+t51820*t51815*3.0+gcab*t51820*t51814*t51815+1.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx0+(cx2*t51843*t51862*t51837)/(gamma_aa[index]*gx*t51816*2.0+t51843*t51862*t51837+1.0)+(cx1* \
               gamma_aa[index]*gx*t51816)/(gamma_aa[index]*gx*t51816+1.0)+(cx4*t51841*t51863*t51839)/(gamma_aa[index]* \
               gx*t51816*4.0+t51843*t51862*t51837*6.0+t51841*t51863*t51839+gamma_aa[index]*gx*t51842*t51862*t51837* \
               4.0+1.0)+(cx3*gamma_aa[index]*gx*t51842*t51862*t51837)/(gamma_aa[index]*gx*t51816*3.0+t51843*t51862* \
               t51837*3.0+gamma_aa[index]*gx*t51842*t51862*t51837+1.0))+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t51861* \
               t51862*t51857)/(gamma_bb[index]*gx*t51818*2.0+t51861*t51862*t51857+1.0)+(cx1*gamma_bb[index]*gx*t51818) \
               /(gamma_bb[index]*gx*t51818+1.0)+(cx4*t51863*t51858*t51859)/(gamma_bb[index]*gx*t51818*4.0+t51861* \
               t51862*t51857*6.0+t51863*t51858*t51859+gamma_bb[index]*gx*t51860*t51862*t51857*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t51860*t51862*t51857)/(gamma_bb[index]*gx*t51818*3.0+t51861*t51862*t51857*3.0+gamma_bb[index]*gx* \
               t51860*t51862*t51857+1.0))-rho_a[index]*t51836*(ccaa0+(ccaa2*t51843*t51837*t51838)/(gamma_aa[index]* \
               gcaa*t51816*2.0+t51843*t51837*t51838+1.0)+(ccaa1*gamma_aa[index]*gcaa*t51816)/(gamma_aa[index]*gcaa* \
               t51816+1.0)+(ccaa4*t51840*t51841*t51839)/(gamma_aa[index]*gcaa*t51816*4.0+t51840*t51841*t51839+t51843* \
               t51837*t51838*6.0+gamma_aa[index]*gcaa*t51842*t51837*t51838*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t51842* \
               t51837*t51838)/(gamma_aa[index]*gcaa*t51816*3.0+t51843*t51837*t51838*3.0+gamma_aa[index]*gcaa*t51842* \
               t51837*t51838+1.0))-rho_b[index]*t51856*(ccaa0+(ccaa2*t51861*t51838*t51857)/(gamma_bb[index]*gcaa* \
               t51818*2.0+t51861*t51838*t51857+1.0)+(ccaa1*gamma_bb[index]*gcaa*t51818)/(gamma_bb[index]*gcaa*t51818+ \
               1.0)+(ccaa4*t51840*t51858*t51859)/(gamma_bb[index]*gcaa*t51818*4.0+t51861*t51838*t51857*6.0+t51840* \
               t51858*t51859+gamma_bb[index]*gcaa*t51860*t51838*t51857*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t51860* \
               t51838*t51857)/(gamma_bb[index]*gcaa*t51818*3.0+t51861*t51838*t51857*3.0+gamma_bb[index]*gcaa*t51860* \
               t51838*t51857+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t55888 = 1.0/pow(rho_a[index],1.0/3.0);
            double t55889 = c*t55888;
            double t55890 = sqrt(t55889);
            double t55891 = pow(t55889,3.0/2.0);
            double t55892 = c*c;
            double t55893 = 1.0/pow(rho_a[index],2.0/3.0);
            double t55894 = 1.0/c0p;
            double t55895 = b1p*t55890;
            double t55896 = b3p*t55891;
            double t55897 = b4p*t55892*t55893;
            double t55898 = b2p*c*t55888;
            double t55899 = t55895+t55896+t55897+t55898;
            double t55900 = 1.0/t55899;
            double t55901 = t55900*t55894*(1.0/2.0);
            double t55902 = t55901+1.0;
            double t55903 = log(t55902);
            double t55904 = a1p*c*t55888;
            double t55905 = t55904+1.0;
            double t55906 = gamma_aa[index]*gamma_aa[index];
            double t55907 = gcaa*gcaa;
            double t55908 = t55906*t55906;
            double t55909 = t55907*t55907;
            double t55910 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t55911 = 1.0/pow(rho_a[index],8.0/3.0);
            double t55912 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t55913 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t55914 = gx*gx;
            double t55915 = t55914*t55914;
            functional_[index] = c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t55913*t55914*t55906)/(gamma_aa[index]* \
               gx*t55911*2.0+t55913*t55914*t55906+1.0)+(cx1*gamma_aa[index]*gx*t55911)/(gamma_aa[index]*gx*t55911+ \
               1.0)+(cx4*t55910*t55915*t55908)/(gamma_aa[index]*gx*t55911*4.0+t55910*t55915*t55908+t55913*t55914* \
               t55906*6.0+gamma_aa[index]*gx*t55912*t55914*t55906*4.0+1.0)+(cx3*gamma_aa[index]*gx*t55912*t55914* \
               t55906)/(gamma_aa[index]*gx*t55911*3.0+t55913*t55914*t55906*3.0+gamma_aa[index]*gx*t55912*t55914*t55906+ \
               1.0))-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t55890+b3f*t55891+b2f* \
               c*t55888+b4f*t55892*t55893))+1.0)*(a1f*c*t55888+1.0)*2.0-c0p*t55903*t55905*2.0))/(two_13*2.0-2.0)+ \
               c0p*t55903*t55905*2.0)*(ccaa0+(ccaa2*t55913*t55906*t55907)/(gamma_aa[index]*gcaa*t55911*2.0+t55913* \
               t55906*t55907+1.0)+(ccaa1*gamma_aa[index]*gcaa*t55911)/(gamma_aa[index]*gcaa*t55911+1.0)+(ccaa4*t55910* \
               t55908*t55909)/(gamma_aa[index]*gcaa*t55911*4.0+t55913*t55906*t55907*6.0+t55910*t55908*t55909+gamma_aa[index]* \
               gcaa*t55912*t55906*t55907*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t55912*t55906*t55907)/(gamma_aa[index]* \
               gcaa*t55911*3.0+t55913*t55906*t55907*3.0+gamma_aa[index]*gcaa*t55912*t55906*t55907+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t55249 = 1.0/pow(rho_b[index],1.0/3.0);
            double t55250 = c*t55249;
            double t55251 = sqrt(t55250);
            double t55252 = pow(t55250,3.0/2.0);
            double t55253 = c*c;
            double t55254 = 1.0/pow(rho_b[index],2.0/3.0);
            double t55255 = 1.0/c0p;
            double t55256 = b1p*t55251;
            double t55257 = b3p*t55252;
            double t55258 = b4p*t55253*t55254;
            double t55259 = b2p*c*t55249;
            double t55260 = t55256+t55257+t55258+t55259;
            double t55261 = 1.0/t55260;
            double t55262 = t55261*t55255*(1.0/2.0);
            double t55263 = t55262+1.0;
            double t55264 = log(t55263);
            double t55265 = a1p*c*t55249;
            double t55266 = t55265+1.0;
            double t55267 = gamma_bb[index]*gamma_bb[index];
            double t55268 = gcaa*gcaa;
            double t55269 = t55267*t55267;
            double t55270 = t55268*t55268;
            double t55271 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t55272 = 1.0/pow(rho_b[index],8.0/3.0);
            double t55273 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t55274 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t55275 = gx*gx;
            double t55276 = t55275*t55275;
            functional_[index] = c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t55274*t55275*t55267)/(gamma_bb[index]* \
               gx*t55272*2.0+t55274*t55275*t55267+1.0)+(cx1*gamma_bb[index]*gx*t55272)/(gamma_bb[index]*gx*t55272+ \
               1.0)+(cx4*t55271*t55276*t55269)/(gamma_bb[index]*gx*t55272*4.0+t55271*t55276*t55269+t55274*t55275* \
               t55267*6.0+gamma_bb[index]*gx*t55273*t55275*t55267*4.0+1.0)+(cx3*gamma_bb[index]*gx*t55273*t55275* \
               t55267)/(gamma_bb[index]*gx*t55272*3.0+t55274*t55275*t55267*3.0+gamma_bb[index]*gx*t55273*t55275*t55267+ \
               1.0))-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t55251+b3f*t55252+b2f* \
               c*t55249+b4f*t55253*t55254))+1.0)*(a1f*c*t55249+1.0)*2.0-c0p*t55264*t55266*2.0))/(two_13*2.0-2.0)+ \
               c0p*t55264*t55266*2.0)*(ccaa0+(ccaa2*t55274*t55267*t55268)/(gamma_bb[index]*gcaa*t55272*2.0+t55274* \
               t55267*t55268+1.0)+(ccaa1*gamma_bb[index]*gcaa*t55272)/(gamma_bb[index]*gcaa*t55272+1.0)+(ccaa4*t55270* \
               t55271*t55269)/(gamma_bb[index]*gcaa*t55272*4.0+t55270*t55271*t55269+t55274*t55267*t55268*6.0+gamma_bb[index]* \
               gcaa*t55273*t55267*t55268*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t55273*t55267*t55268)/(gamma_bb[index]* \
               gcaa*t55272*3.0+t55274*t55267*t55268*3.0+gamma_bb[index]*gcaa*t55273*t55267*t55268+1.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t51865 = 1.0/pow(rho_a[index],1.0/3.0);
            double t51866 = c*t51865;
            double t51867 = sqrt(t51866);
            double t51868 = pow(t51866,3.0/2.0);
            double t51869 = c*c;
            double t51870 = 1.0/pow(rho_a[index],2.0/3.0);
            double t51871 = 1.0/c0p;
            double t51872 = b1p*t51867;
            double t51873 = b3p*t51868;
            double t51874 = b4p*t51870*t51869;
            double t51875 = b2p*c*t51865;
            double t51876 = t51872+t51873+t51874+t51875;
            double t51877 = 1.0/t51876;
            double t51878 = t51871*t51877*(1.0/2.0);
            double t51879 = t51878+1.0;
            double t51880 = log(t51879);
            double t51881 = a1p*c*t51865;
            double t51882 = t51881+1.0;
            double t51883 = gamma_aa[index]*gamma_aa[index];
            double t51884 = gcaa*gcaa;
            double t51885 = t51883*t51883;
            double t51886 = t51884*t51884;
            double t51887 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t51888 = 1.0/pow(rho_a[index],8.0/3.0);
            double t51889 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t51890 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t51891 = pow(2.0,1.0/3.0);
            double t51892 = t51891*2.0;
            double t51893 = t51892-2.0;
            double t51894 = two_13*2.0;
            double t51895 = t51894-2.0;
            double t51896 = 1.0/t51895;
            double t51897 = 1.0/c0f;
            double t51898 = b1f*t51867;
            double t51899 = b3f*t51868;
            double t51900 = b4f*t51870*t51869;
            double t51901 = b2f*c*t51865;
            double t51902 = t51900+t51901+t51898+t51899;
            double t51903 = 1.0/t51902;
            double t51904 = t51903*t51897*(1.0/2.0);
            double t51905 = t51904+1.0;
            double t51906 = log(t51905);
            double t51907 = a1f*c*t51865;
            double t51908 = t51907+1.0;
            double t51909 = c0f*t51906*t51908*2.0;
            double t51910 = c0p*t51880*t51882*2.0;
            double t51911 = 1.0/pow(rho_b[index],1.0/3.0);
            double t51912 = c*t51911;
            double t51913 = sqrt(t51912);
            double t51914 = pow(t51912,3.0/2.0);
            double t51915 = 1.0/pow(rho_b[index],2.0/3.0);
            double t51916 = b1p*t51913;
            double t51917 = b3p*t51914;
            double t51918 = b4p*t51915*t51869;
            double t51919 = b2p*c*t51911;
            double t51920 = t51916+t51917+t51918+t51919;
            double t51921 = 1.0/t51920;
            double t51922 = t51921*t51871*(1.0/2.0);
            double t51923 = t51922+1.0;
            double t51924 = log(t51923);
            double t51925 = a1p*c*t51911;
            double t51926 = t51925+1.0;
            double t51927 = c0p*t51924*t51926*2.0;
            double t51928 = rho_a[index]+rho_b[index];
            double t51929 = 1.0/pow(t51928,1.0/3.0);
            double t51930 = c*t51929;
            double t51931 = sqrt(t51930);
            double t51932 = pow(t51930,3.0/2.0);
            double t51933 = 1.0/pow(t51928,2.0/3.0);
            double t51934 = b1p*t51931;
            double t51935 = b3p*t51932;
            double t51936 = b4p*t51933*t51869;
            double t51937 = b2p*c*t51929;
            double t51938 = t51934+t51935+t51936+t51937;
            double t51939 = 1.0/t51938;
            double t51940 = t51871*t51939*(1.0/2.0);
            double t51941 = t51940+1.0;
            double t51942 = log(t51941);
            double t51943 = a1p*c*t51929;
            double t51944 = t51943+1.0;
            double t51945 = c0p*t51942*t51944*2.0;
            double t51946 = rho_a[index]-rho_b[index];
            double t51947 = t51946*t51946;
            double t51948 = 1.0/t51928;
            double t51949 = t51946*t51948;
            double t51950 = 1.0/(t51928*t51928*t51928*t51928);
            double t51951 = t51947*t51947;
            double t51952 = t51949+1.0;
            double t51953 = pow(t51952,4.0/3.0);
            double t51954 = -t51949+1.0;
            double t51955 = pow(t51954,4.0/3.0);
            double t51956 = t51953+t51955-2.0;
            double t51957 = gcab*gcab;
            double t51961 = gamma_aa[index]*t51888*(1.0/2.0);
            double t51962 = 1.0/pow(rho_b[index],8.0/3.0);
            double t51963 = gamma_bb[index]*t51962*(1.0/2.0);
            double t51958 = t51961+t51963;
            double t51959 = t51958*t51958;
            double t51960 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t51964 = t51957*t51957;
            double t51965 = t51959*t51959;
            double t51966 = t51957*t51959*6.0;
            double t51967 = gcab*t51957*t51958*t51959*4.0;
            double t51968 = t51964*t51965;
            double t51969 = gcab*t51958*4.0;
            double t51970 = t51966+t51967+t51968+t51969+1.0;
            double t51971 = gcab*t51958;
            double t51972 = t51971+1.0;
            double t51973 = t51957*t51959;
            double t51974 = gcab*t51958*2.0;
            double t51975 = t51973+t51974+1.0;
            double t51976 = t51957*t51959*3.0;
            double t51977 = gcab*t51957*t51958*t51959;
            double t51978 = gcab*t51958*3.0;
            double t51979 = t51976+t51977+t51978+1.0;
            double t51980 = 1.0/t51975;
            double t51981 = 1.0/t51979;
            double t51982 = 1.0/t51972;
            double t51983 = 1.0/t51970;
            double t51984 = 1.0/pow(t51928,4.0/3.0);
            double t51985 = b1f*t51931;
            double t51986 = b3f*t51932;
            double t51987 = b4f*t51933*t51869;
            double t51988 = b2f*c*t51929;
            double t51989 = t51985+t51986+t51987+t51988;
            double t51990 = 1.0/t51989;
            double t51991 = t51990*t51897*(1.0/2.0);
            double t51992 = t51991+1.0;
            double t51993 = log(t51992);
            double t51994 = a1f*c*t51929;
            double t51995 = t51994+1.0;
            double t51997 = c0f*t51993*t51995*2.0;
            double t51996 = t51945-t51997;
            double t51998 = 1.0/(t51928*t51928);
            double t52025 = t51946*t51998;
            double t51999 = t51948-t52025;
            double t52000 = 1.0/pow(t51928,5.0/3.0);
            double t52001 = 1.0/sqrt(t51930);
            double t52002 = 1.0/t51941;
            double t52003 = 1.0/(t51938*t51938);
            double t52004 = b4p*t51869*t52000*(2.0/3.0);
            double t52005 = b2p*c*t51984*(1.0/3.0);
            double t52006 = b1p*c*t51984*t52001*(1.0/6.0);
            double t52007 = b3p*c*t51931*t51984*(1.0/2.0);
            double t52008 = t52004+t52005+t52006+t52007;
            double t52009 = t51944*t52002*t52003*t52008;
            double t52010 = 1.0/d2fz0;
            double t52011 = 1.0/Aa;
            double t52012 = b1a*t51931;
            double t52013 = b3a*t51932;
            double t52014 = b4a*t51933*t51869;
            double t52015 = b2a*c*t51929;
            double t52016 = t52012+t52013+t52014+t52015;
            double t52017 = 1.0/t52016;
            double t52018 = t52011*t52017*(1.0/2.0);
            double t52019 = t52018+1.0;
            double t52020 = log(t52019);
            double t52021 = a1a*c*t51929;
            double t52022 = t52021+1.0;
            double t52023 = 1.0/(t51928*t51928*t51928*t51928*t51928);
            double t52024 = pow(t51952,1.0/3.0);
            double t52026 = t51999*t52024*(4.0/3.0);
            double t52027 = pow(t51954,1.0/3.0);
            double t52028 = t52026-t51999*t52027*(4.0/3.0);
            double t52029 = t51950*t51951;
            double t52030 = t52029-1.0;
            double t52031 = 1.0/pow(rho_a[index],4.0/3.0);
            double t52032 = 1.0/pow(rho_a[index],5.0/3.0);
            double t52033 = 1.0/sqrt(t51866);
            double t52034 = 1.0/t51879;
            double t52035 = 1.0/(t51876*t51876);
            double t52036 = b4p*t51869*t52032*(2.0/3.0);
            double t52037 = b2p*c*t52031*(1.0/3.0);
            double t52038 = b1p*c*t52031*t52033*(1.0/6.0);
            double t52039 = b3p*c*t51867*t52031*(1.0/2.0);
            double t52040 = t52036+t52037+t52038+t52039;
            double t52041 = t51882*t52040*t52034*t52035;
            double t52042 = Aa*t51956*t51896*t52010*t52020*t52030*t52022*2.0;
            double t52043 = t51910-t51909;
            double t52044 = t51893*t51896*t52043;
            double t52045 = gamma_aa[index]*gcaa*t51888*4.0;
            double t52046 = gamma_aa[index]*gcaa*t51883*t51884*t51889*4.0;
            double t52047 = t51890*t51883*t51884*6.0;
            double t52048 = t51885*t51886*t51887;
            double t52049 = t52045+t52046+t52047+t52048+1.0;
            double t52050 = 1.0/t52049;
            double t52051 = gamma_aa[index]*gcaa*t51888;
            double t52052 = t52051+1.0;
            double t52053 = 1.0/t52052;
            double t52054 = gamma_aa[index]*gcaa*t51888*3.0;
            double t52055 = gamma_aa[index]*gcaa*t51883*t51884*t51889;
            double t52056 = t51890*t51883*t51884*3.0;
            double t52057 = t52054+t52055+t52056+1.0;
            double t52058 = 1.0/t52057;
            double t52059 = gamma_aa[index]*gcaa*t51888*2.0;
            double t52060 = t51890*t51883*t51884;
            double t52061 = t52060+t52059+1.0;
            double t52062 = 1.0/t52061;
            double t52063 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t52064 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t52065 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t52066 = gx*gx;
            double t52067 = t52066*t52066;
            double t52068 = gamma_aa[index]*gx*t51888*4.0;
            double t52069 = gamma_aa[index]*gx*t51883*t51889*t52066*4.0;
            double t52070 = t51890*t51883*t52066*6.0;
            double t52071 = t51885*t51887*t52067;
            double t52072 = t52070+t52071+t52068+t52069+1.0;
            double t52073 = 1.0/t52072;
            double t52074 = gamma_aa[index]*gx*t51888;
            double t52075 = t52074+1.0;
            double t52076 = 1.0/t52075;
            double t52077 = gamma_aa[index]*gx*t51888*3.0;
            double t52078 = gamma_aa[index]*gx*t51883*t51889*t52066;
            double t52079 = t51890*t51883*t52066*3.0;
            double t52080 = t52077+t52078+t52079+1.0;
            double t52081 = 1.0/t52080;
            double t52082 = gamma_aa[index]*gx*t51888*2.0;
            double t52083 = t51890*t51883*t52066;
            double t52084 = t52082+t52083+1.0;
            double t52085 = 1.0/t52084;
            double t52086 = 1.0/t51905;
            double t52087 = 1.0/(t51902*t51902);
            double t52088 = b4f*t51869*t52032*(2.0/3.0);
            double t52089 = b2f*c*t52031*(1.0/3.0);
            double t52090 = b1f*c*t52031*t52033*(1.0/6.0);
            double t52091 = b3f*c*t51867*t52031*(1.0/2.0);
            double t52092 = t52090+t52091+t52088+t52089;
            double t52093 = a1f*c*c0f*t51906*t52031*(2.0/3.0);
            double t52094 = a1p*c*c0p*t51880*t52031*(2.0/3.0);
            double t52095 = ccaa4*t51885*t51886*t51887*t52050;
            double t52096 = ccaa1*gamma_aa[index]*gcaa*t51888*t52053;
            double t52097 = ccaa3*gamma_aa[index]*gcaa*t51883*t51884*t51889*t52058;
            double t52098 = ccaa2*t51890*t51883*t51884*t52062;
            double t52099 = ccaa0+t52095+t52096+t52097+t52098;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t51982*t51958+ccab2*t51980*t51957*t51959+ccab4*t51964*t51965* \
               t51983+ccab3*gcab*t51981*t51957*t51958*t51959)*(-t51910+t51945+t52042+t52044+rho_a[index]*(-t52041+ \
               t52094+t51893*t51896*(t52041+t52093-t51908*t52092*t52086*t52087-a1p*c*c0p*t51880*t52031*(2.0/3.0)) \
               )-t51928*(-t52009+t51950*t51951*t51956*t51896*(t52009-(t51995*1.0/(t51989*t51989)*(b2f*c*t51984*(1.0/ \
               3.0)+b4f*t51869*t52000*(2.0/3.0)+b1f*c*t51984*t52001*(1.0/6.0)+b3f*c*t51931*t51984*(1.0/2.0)))/t51992+ \
               a1f*c*c0f*t51984*t51993*(2.0/3.0)-a1p*c*c0p*t51942*t51984*(2.0/3.0))+a1p*c*c0p*t51942*t51984*(2.0/ \
               3.0)+t51950*t51951*t51896*t51996*t52028-t51951*t51956*t51896*t51996*t52023*4.0+t51950*t51946*t51947* \
               t51956*t51896*t51996*4.0+Aa*t51956*t51896*t52010*t52020*t52022*(t51951*t52023*4.0-t51950*t51946*t51947* \
               4.0)*2.0-Aa*t51896*t52010*t52020*t52030*t52022*t52028*2.0-(t51956*t51896*t52010*t52030*t52022*1.0/ \
               (t52016*t52016)*(b2a*c*t51984*(1.0/3.0)+b4a*t51869*t52000*(2.0/3.0)+b1a*c*t51984*t52001*(1.0/6.0)+ \
               b3a*c*t51931*t51984*(1.0/2.0)))/t52019+Aa*a1a*c*t51956*t51984*t51896*t52010*t52020*t52030*(2.0/3.0) \
               )-t51950*t51951*t51956*t51896*t51996)-t52099*(t51910+t51893*t51896*(t51909-c0p*t51880*t51882*2.0)) \
               -(rho_a[index]*(t51910-t51893*t51896*t52043)+rho_b[index]*(t51927-t51893*t51896*(t51927-c0f*log((t51897* \
               (1.0/2.0))/(b1f*t51913+b3f*t51914+b2f*c*t51911+b4f*t51915*t51869)+1.0)*(a1f*c*t51911+1.0)*2.0))-t51928* \
               (t51945+t52042-t51950*t51951*t51956*t51896*t51996))*(ccab1*gamma_aa[index]*gcab*t51960*t51982*(4.0/ \
               3.0)-ccab2*t51957*1.0/(t51975*t51975)*t51959*(gamma_aa[index]*gcab*t51960*(8.0/3.0)+gamma_aa[index]* \
               t51960*t51957*t51958*(8.0/3.0))-ccab4*1.0/(t51970*t51970)*t51964*t51965*(gamma_aa[index]*gcab*t51960* \
               (1.6E1/3.0)+gamma_aa[index]*t51960*t51957*t51958*1.6E1+gamma_aa[index]*gcab*t51960*t51957*t51959*1.6E1+ \
               gamma_aa[index]*t51960*t51964*t51958*t51959*(1.6E1/3.0))-ccab1*gamma_aa[index]*t51960*1.0/(t51972* \
               t51972)*t51957*t51958*(4.0/3.0)+ccab2*gamma_aa[index]*t51960*t51980*t51957*t51958*(8.0/3.0)-ccab3* \
               gcab*t51957*t51958*t51959*1.0/(t51979*t51979)*(gamma_aa[index]*gcab*t51960*4.0+gamma_aa[index]*t51960* \
               t51957*t51958*8.0+gamma_aa[index]*gcab*t51960*t51957*t51959*4.0)+ccab3*gamma_aa[index]*gcab*t51960* \
               t51981*t51957*t51959*4.0+ccab4*gamma_aa[index]*t51960*t51964*t51983*t51958*t51959*(1.6E1/3.0))+c0* \
               pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t51888*t52076+cx2*t51890*t51883*t52066*t52085+ \
               cx4*t51885*t51887*t52073*t52067+cx3*gamma_aa[index]*gx*t51883*t51889*t52081*t52066)*(4.0/3.0)+rho_a[index]* \
               t52099*(-t52041+t52094+t51893*t51896*(t52041+t52093-t52094-t51908*t52092*t52086*t52087))+rho_a[index]* \
               (t51910-t52044)*(ccaa1*gamma_aa[index]*gcaa*t51960*t52053*(8.0/3.0)+ccaa2*t51883*t51884*t52062*t52063* \
               (1.6E1/3.0)+ccaa4*t51885*t51886*t52050*t52065*(3.2E1/3.0)-ccaa1*t51883*t51884*1.0/(t52052*t52052)* \
               t52063*(8.0/3.0)-ccaa2*t51890*t51883*t51884*1.0/(t52061*t52061)*(gamma_aa[index]*gcaa*t51960*(1.6E1/ \
               3.0)+t51883*t51884*t52063*(1.6E1/3.0))-ccaa4*t51885*t51886*t51887*1.0/(t52049*t52049)*(gamma_aa[index]* \
               gcaa*t51960*(3.2E1/3.0)+t51883*t51884*t52063*3.2E1+t51885*t51886*t52065*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t51883*t51884*t52064*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t51883*t51884*t52064*t52058*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t51883*t51884*t51889*1.0/(t52057*t52057)*(gamma_aa[index]*gcaa*t51960*8.0+t51883* \
               t51884*t52063*1.6E1+gamma_aa[index]*gcaa*t51883*t51884*t52064*8.0))-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t51960*t52076*(8.0/3.0)+cx2*t51883*t52063*t52066*t52085*(1.6E1/3.0)+cx4*t51885* \
               t52073*t52065*t52067*(3.2E1/3.0)-cx1*t51883*t52063*t52066*1.0/(t52075*t52075)*(8.0/3.0)-cx2*t51890* \
               t51883*t52066*1.0/(t52084*t52084)*(gamma_aa[index]*gx*t51960*(1.6E1/3.0)+t51883*t52063*t52066*(1.6E1/ \
               3.0))-cx4*t51885*t51887*1.0/(t52072*t52072)*t52067*(gamma_aa[index]*gx*t51960*(3.2E1/3.0)+t51883*t52063* \
               t52066*3.2E1+t51885*t52065*t52067*(3.2E1/3.0)+gamma_aa[index]*gx*t51883*t52064*t52066*3.2E1)+cx3*gamma_aa[index]* \
               gx*t51883*t52081*t52064*t52066*8.0-cx3*gamma_aa[index]*gx*t51883*t51889*1.0/(t52080*t52080)*t52066* \
               (gamma_aa[index]*gx*t51960*8.0+t51883*t52063*t52066*1.6E1+gamma_aa[index]*gx*t51883*t52064*t52066* \
               8.0));
        } else if (rho_a[index] > cutoff_) {
            double t55917 = 1.0/pow(rho_a[index],1.0/3.0);
            double t55918 = c*t55917;
            double t55919 = sqrt(t55918);
            double t55920 = pow(t55918,3.0/2.0);
            double t55921 = c*c;
            double t55922 = 1.0/pow(rho_a[index],2.0/3.0);
            double t55923 = 1.0/c0p;
            double t55924 = b1p*t55919;
            double t55925 = b3p*t55920;
            double t55926 = b4p*t55921*t55922;
            double t55927 = b2p*c*t55917;
            double t55928 = t55924+t55925+t55926+t55927;
            double t55929 = 1.0/t55928;
            double t55930 = t55923*t55929*(1.0/2.0);
            double t55931 = t55930+1.0;
            double t55932 = log(t55931);
            double t55933 = a1p*c*t55917;
            double t55934 = t55933+1.0;
            double t55935 = gamma_aa[index]*gamma_aa[index];
            double t55936 = gcaa*gcaa;
            double t55937 = t55935*t55935;
            double t55938 = t55936*t55936;
            double t55939 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t55940 = 1.0/pow(rho_a[index],8.0/3.0);
            double t55941 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t55942 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t55943 = pow(2.0,1.0/3.0);
            double t55944 = t55943*2.0;
            double t55945 = t55944-2.0;
            double t55946 = two_13*2.0;
            double t55947 = t55946-2.0;
            double t55948 = 1.0/t55947;
            double t55949 = 1.0/c0f;
            double t55950 = b1f*t55919;
            double t55951 = b3f*t55920;
            double t55952 = b4f*t55921*t55922;
            double t55953 = b2f*c*t55917;
            double t55954 = t55950+t55951+t55952+t55953;
            double t55955 = 1.0/t55954;
            double t55956 = t55955*t55949*(1.0/2.0);
            double t55957 = t55956+1.0;
            double t55958 = log(t55957);
            double t55959 = a1f*c*t55917;
            double t55960 = t55959+1.0;
            double t55961 = c0f*t55960*t55958*2.0;
            double t55962 = c0p*t55932*t55934*2.0;
            double t55963 = gamma_aa[index]*gcaa*t55940*4.0;
            double t55964 = gamma_aa[index]*gcaa*t55941*t55935*t55936*4.0;
            double t55965 = t55942*t55935*t55936*6.0;
            double t55966 = t55937*t55938*t55939;
            double t55967 = t55963+t55964+t55965+t55966+1.0;
            double t55968 = 1.0/t55967;
            double t55969 = gamma_aa[index]*gcaa*t55940;
            double t55970 = t55969+1.0;
            double t55971 = 1.0/t55970;
            double t55972 = gamma_aa[index]*gcaa*t55940*3.0;
            double t55973 = gamma_aa[index]*gcaa*t55941*t55935*t55936;
            double t55974 = t55942*t55935*t55936*3.0;
            double t55975 = t55972+t55973+t55974+1.0;
            double t55976 = 1.0/t55975;
            double t55977 = gamma_aa[index]*gcaa*t55940*2.0;
            double t55978 = t55942*t55935*t55936;
            double t55979 = t55977+t55978+1.0;
            double t55980 = 1.0/t55979;
            double t55981 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t55982 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t55983 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t55984 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t55985 = gx*gx;
            double t55986 = t55985*t55985;
            double t55987 = gamma_aa[index]*gx*t55940*4.0;
            double t55988 = gamma_aa[index]*gx*t55941*t55935*t55985*4.0;
            double t55989 = t55942*t55935*t55985*6.0;
            double t55990 = t55937*t55939*t55986;
            double t55991 = t55990+t55987+t55988+t55989+1.0;
            double t55992 = 1.0/t55991;
            double t55993 = gamma_aa[index]*gx*t55940;
            double t55994 = t55993+1.0;
            double t55995 = 1.0/t55994;
            double t55996 = gamma_aa[index]*gx*t55940*3.0;
            double t55997 = gamma_aa[index]*gx*t55941*t55935*t55985;
            double t55998 = t55942*t55935*t55985*3.0;
            double t55999 = t55996+t55997+t55998+1.0;
            double t56000 = 1.0/t55999;
            double t56001 = gamma_aa[index]*gx*t55940*2.0;
            double t56002 = t55942*t55935*t55985;
            double t56003 = t56001+t56002+1.0;
            double t56004 = 1.0/t56003;
            double t56005 = 1.0/pow(rho_a[index],4.0/3.0);
            double t56006 = 1.0/pow(rho_a[index],5.0/3.0);
            double t56007 = 1.0/sqrt(t55918);
            double t56008 = 1.0/t55931;
            double t56009 = 1.0/(t55928*t55928);
            double t56010 = b4p*t55921*t56006*(2.0/3.0);
            double t56011 = b2p*c*t56005*(1.0/3.0);
            double t56012 = b1p*c*t56005*t56007*(1.0/6.0);
            double t56013 = b3p*c*t55919*t56005*(1.0/2.0);
            double t56014 = t56010+t56011+t56012+t56013;
            double t56015 = t55934*t56014*t56008*t56009;
            double t56016 = ccaa4*t55937*t55938*t55939*t55968;
            double t56017 = ccaa1*gamma_aa[index]*gcaa*t55940*t55971;
            double t56018 = ccaa3*gamma_aa[index]*gcaa*t55941*t55935*t55936*t55976;
            double t56019 = ccaa2*t55942*t55935*t55980*t55936;
            double t56020 = ccaa0+t56016+t56017+t56018+t56019;
            v_rho_a_[index] = -t56020*(t55962+t55945*t55948*(t55961-c0p*t55932*t55934*2.0))+rho_a[index]*t56020* \
               (-t56015+t55945*t55948*(t56015-(t55960*1.0/(t55954*t55954)*(b2f*c*t56005*(1.0/3.0)+b4f*t55921*t56006* \
               (2.0/3.0)+b1f*c*t56005*t56007*(1.0/6.0)+b3f*c*t55919*t56005*(1.0/2.0)))/t55957+a1f*c*c0f*t55958*t56005* \
               (2.0/3.0)-a1p*c*c0p*t55932*t56005*(2.0/3.0))+a1p*c*c0p*t55932*t56005*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t55940*t55995+cx2*t55942*t55935*t55985*t56004+cx4*t55937*t55992*t55939* \
               t55986+cx3*gamma_aa[index]*gx*t55941*t55935*t55985*t56000)*(4.0/3.0)+rho_a[index]*(t55962+t55945*t55948* \
               (t55961-t55962))*(ccaa1*gamma_aa[index]*gcaa*t55971*t55982*(8.0/3.0)+ccaa2*t55935*t55980*t55936*t55981* \
               (1.6E1/3.0)+ccaa4*t55937*t55938*t55984*t55968*(3.2E1/3.0)-ccaa1*1.0/(t55970*t55970)*t55935*t55936* \
               t55981*(8.0/3.0)-ccaa2*t55942*t55935*t55936*1.0/(t55979*t55979)*(gamma_aa[index]*gcaa*t55982*(1.6E1/ \
               3.0)+t55935*t55936*t55981*(1.6E1/3.0))-ccaa4*t55937*t55938*t55939*1.0/(t55967*t55967)*(gamma_aa[index]* \
               gcaa*t55982*(3.2E1/3.0)+t55935*t55936*t55981*3.2E1+t55937*t55938*t55984*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t55935*t55936*t55983*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t55935*t55936*t55983*t55976*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t55941*t55935*t55936*1.0/(t55975*t55975)*(gamma_aa[index]*gcaa*t55982*8.0+t55935* \
               t55936*t55981*1.6E1+gamma_aa[index]*gcaa*t55935*t55936*t55983*8.0))-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t55982*t55995*(8.0/3.0)+cx2*t55935*t55981*t55985*t56004*(1.6E1/3.0)+cx4*t55937* \
               t55992*t55984*t55986*(3.2E1/3.0)-cx1*t55935*t55981*t55985*1.0/(t55994*t55994)*(8.0/3.0)-cx2*t55942* \
               t55935*t55985*1.0/(t56003*t56003)*(gamma_aa[index]*gx*t55982*(1.6E1/3.0)+t55935*t55981*t55985*(1.6E1/ \
               3.0))-cx4*t55937*1.0/(t55991*t55991)*t55939*t55986*(gamma_aa[index]*gx*t55982*(3.2E1/3.0)+t55935*t55981* \
               t55985*3.2E1+t55937*t55984*t55986*(3.2E1/3.0)+gamma_aa[index]*gx*t55935*t55983*t55985*3.2E1)+cx3*gamma_aa[index]* \
               gx*t55935*t55983*t55985*t56000*8.0-cx3*gamma_aa[index]*gx*t55941*t55935*t55985*1.0/(t55999*t55999) \
               *(gamma_aa[index]*gx*t55982*8.0+t55935*t55981*t55985*1.6E1+gamma_aa[index]*gx*t55935*t55983*t55985* \
               8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t52101 = 1.0/pow(rho_b[index],1.0/3.0);
            double t52102 = c*t52101;
            double t52103 = sqrt(t52102);
            double t52104 = pow(t52102,3.0/2.0);
            double t52105 = c*c;
            double t52106 = 1.0/pow(rho_b[index],2.0/3.0);
            double t52107 = 1.0/c0p;
            double t52108 = b1p*t52103;
            double t52109 = b3p*t52104;
            double t52110 = b4p*t52105*t52106;
            double t52111 = b2p*c*t52101;
            double t52112 = t52110+t52111+t52108+t52109;
            double t52113 = 1.0/t52112;
            double t52114 = t52113*t52107*(1.0/2.0);
            double t52115 = t52114+1.0;
            double t52116 = log(t52115);
            double t52117 = a1p*c*t52101;
            double t52118 = t52117+1.0;
            double t52119 = gamma_bb[index]*gamma_bb[index];
            double t52120 = gcaa*gcaa;
            double t52121 = t52119*t52119;
            double t52122 = t52120*t52120;
            double t52123 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t52124 = 1.0/pow(rho_b[index],8.0/3.0);
            double t52125 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t52126 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t52127 = pow(2.0,1.0/3.0);
            double t52128 = t52127*2.0;
            double t52129 = t52128-2.0;
            double t52130 = two_13*2.0;
            double t52131 = t52130-2.0;
            double t52132 = 1.0/t52131;
            double t52133 = 1.0/c0f;
            double t52134 = 1.0/pow(rho_a[index],1.0/3.0);
            double t52135 = c*t52134;
            double t52136 = sqrt(t52135);
            double t52137 = pow(t52135,3.0/2.0);
            double t52138 = 1.0/pow(rho_a[index],2.0/3.0);
            double t52139 = b1p*t52136;
            double t52140 = b3p*t52137;
            double t52141 = b4p*t52105*t52138;
            double t52142 = b2p*c*t52134;
            double t52143 = t52140+t52141+t52142+t52139;
            double t52144 = 1.0/t52143;
            double t52145 = t52107*t52144*(1.0/2.0);
            double t52146 = t52145+1.0;
            double t52147 = log(t52146);
            double t52148 = a1p*c*t52134;
            double t52149 = t52148+1.0;
            double t52150 = c0p*t52147*t52149*2.0;
            double t52151 = b1f*t52103;
            double t52152 = b3f*t52104;
            double t52153 = b4f*t52105*t52106;
            double t52154 = b2f*c*t52101;
            double t52155 = t52151+t52152+t52153+t52154;
            double t52156 = 1.0/t52155;
            double t52157 = t52133*t52156*(1.0/2.0);
            double t52158 = t52157+1.0;
            double t52159 = log(t52158);
            double t52160 = a1f*c*t52101;
            double t52161 = t52160+1.0;
            double t52162 = c0f*t52161*t52159*2.0;
            double t52163 = c0p*t52116*t52118*2.0;
            double t52164 = rho_a[index]+rho_b[index];
            double t52165 = 1.0/pow(t52164,1.0/3.0);
            double t52166 = c*t52165;
            double t52167 = sqrt(t52166);
            double t52168 = pow(t52166,3.0/2.0);
            double t52169 = 1.0/pow(t52164,2.0/3.0);
            double t52170 = b1p*t52167;
            double t52171 = b3p*t52168;
            double t52172 = b4p*t52105*t52169;
            double t52173 = b2p*c*t52165;
            double t52174 = t52170+t52171+t52172+t52173;
            double t52175 = 1.0/t52174;
            double t52176 = t52107*t52175*(1.0/2.0);
            double t52177 = t52176+1.0;
            double t52178 = log(t52177);
            double t52179 = a1p*c*t52165;
            double t52180 = t52179+1.0;
            double t52181 = c0p*t52180*t52178*2.0;
            double t52182 = rho_a[index]-rho_b[index];
            double t52183 = t52182*t52182;
            double t52184 = 1.0/t52164;
            double t52185 = t52182*t52184;
            double t52186 = 1.0/(t52164*t52164*t52164*t52164);
            double t52187 = t52183*t52183;
            double t52188 = t52185+1.0;
            double t52189 = pow(t52188,4.0/3.0);
            double t52190 = -t52185+1.0;
            double t52191 = pow(t52190,4.0/3.0);
            double t52192 = t52191+t52189-2.0;
            double t52193 = gcab*gcab;
            double t52197 = 1.0/pow(rho_a[index],8.0/3.0);
            double t52198 = gamma_aa[index]*t52197*(1.0/2.0);
            double t52199 = gamma_bb[index]*t52124*(1.0/2.0);
            double t52194 = t52198+t52199;
            double t52195 = t52194*t52194;
            double t52196 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t52200 = t52193*t52193;
            double t52201 = t52195*t52195;
            double t52202 = t52193*t52195*6.0;
            double t52203 = gcab*t52193*t52194*t52195*4.0;
            double t52204 = t52200*t52201;
            double t52205 = gcab*t52194*4.0;
            double t52206 = t52202+t52203+t52204+t52205+1.0;
            double t52207 = gcab*t52194;
            double t52208 = t52207+1.0;
            double t52209 = t52193*t52195;
            double t52210 = gcab*t52194*2.0;
            double t52211 = t52210+t52209+1.0;
            double t52212 = t52193*t52195*3.0;
            double t52213 = gcab*t52193*t52194*t52195;
            double t52214 = gcab*t52194*3.0;
            double t52215 = t52212+t52213+t52214+1.0;
            double t52216 = 1.0/t52211;
            double t52217 = 1.0/t52215;
            double t52218 = 1.0/t52208;
            double t52219 = 1.0/t52206;
            double t52220 = 1.0/pow(t52164,4.0/3.0);
            double t52221 = b1f*t52167;
            double t52222 = b3f*t52168;
            double t52223 = b4f*t52105*t52169;
            double t52224 = b2f*c*t52165;
            double t52225 = t52221+t52222+t52223+t52224;
            double t52226 = 1.0/t52225;
            double t52227 = t52133*t52226*(1.0/2.0);
            double t52228 = t52227+1.0;
            double t52229 = log(t52228);
            double t52230 = a1f*c*t52165;
            double t52231 = t52230+1.0;
            double t52233 = c0f*t52231*t52229*2.0;
            double t52232 = -t52233+t52181;
            double t52234 = 1.0/(t52164*t52164);
            double t52235 = t52234*t52182;
            double t52236 = t52235+t52184;
            double t52237 = t52233-t52181;
            double t52238 = 1.0/pow(t52164,5.0/3.0);
            double t52239 = 1.0/sqrt(t52166);
            double t52240 = 1.0/t52177;
            double t52241 = 1.0/(t52174*t52174);
            double t52242 = b4p*t52105*t52238*(2.0/3.0);
            double t52243 = b2p*c*t52220*(1.0/3.0);
            double t52244 = b1p*c*t52220*t52239*(1.0/6.0);
            double t52245 = b3p*c*t52220*t52167*(1.0/2.0);
            double t52246 = t52242+t52243+t52244+t52245;
            double t52247 = 1.0/d2fz0;
            double t52248 = 1.0/Aa;
            double t52249 = b1a*t52167;
            double t52250 = b3a*t52168;
            double t52251 = b4a*t52105*t52169;
            double t52252 = b2a*c*t52165;
            double t52253 = t52250+t52251+t52252+t52249;
            double t52254 = 1.0/t52253;
            double t52255 = t52254*t52248*(1.0/2.0);
            double t52256 = t52255+1.0;
            double t52257 = log(t52256);
            double t52258 = a1a*c*t52165;
            double t52259 = t52258+1.0;
            double t52260 = 1.0/(t52164*t52164*t52164*t52164*t52164);
            double t52261 = pow(t52188,1.0/3.0);
            double t52262 = t52261*t52236*(4.0/3.0);
            double t52263 = pow(t52190,1.0/3.0);
            double t52264 = t52262-t52236*t52263*(4.0/3.0);
            double t52265 = t52186*t52187;
            double t52266 = t52265-1.0;
            double t52267 = 1.0/pow(rho_b[index],4.0/3.0);
            double t52268 = 1.0/pow(rho_b[index],5.0/3.0);
            double t52269 = 1.0/sqrt(t52102);
            double t52270 = 1.0/t52115;
            double t52271 = 1.0/(t52112*t52112);
            double t52272 = b4p*t52105*t52268*(2.0/3.0);
            double t52273 = b2p*c*t52267*(1.0/3.0);
            double t52274 = b1p*c*t52267*t52269*(1.0/6.0);
            double t52275 = b3p*c*t52103*t52267*(1.0/2.0);
            double t52276 = t52272+t52273+t52274+t52275;
            double t52277 = t52270*t52118*t52271*t52276;
            double t52278 = t52162-t52163;
            double t52279 = t52132*t52129*t52278;
            double t52280 = Aa*t52132*t52192*t52247*t52257*t52266*t52259*2.0;
            double t52281 = a1p*c*c0p*t52220*t52178*(2.0/3.0);
            double t52282 = t52163+t52279;
            double t52283 = gamma_bb[index]*gcaa*t52124*4.0;
            double t52284 = gamma_bb[index]*gcaa*t52120*t52125*t52119*4.0;
            double t52285 = t52120*t52126*t52119*6.0;
            double t52286 = t52121*t52122*t52123;
            double t52287 = t52283+t52284+t52285+t52286+1.0;
            double t52288 = 1.0/t52287;
            double t52289 = gamma_bb[index]*gcaa*t52124;
            double t52290 = t52289+1.0;
            double t52291 = 1.0/t52290;
            double t52292 = gamma_bb[index]*gcaa*t52124*3.0;
            double t52293 = gamma_bb[index]*gcaa*t52120*t52125*t52119;
            double t52294 = t52120*t52126*t52119*3.0;
            double t52295 = t52292+t52293+t52294+1.0;
            double t52296 = 1.0/t52295;
            double t52297 = gamma_bb[index]*gcaa*t52124*2.0;
            double t52298 = t52120*t52126*t52119;
            double t52299 = t52297+t52298+1.0;
            double t52300 = 1.0/t52299;
            double t52301 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t52302 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t52303 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t52304 = gx*gx;
            double t52305 = t52304*t52304;
            double t52306 = gamma_bb[index]*gx*t52124*4.0;
            double t52307 = gamma_bb[index]*gx*t52304*t52125*t52119*4.0;
            double t52308 = t52304*t52126*t52119*6.0;
            double t52309 = t52121*t52123*t52305;
            double t52310 = t52306+t52307+t52308+t52309+1.0;
            double t52311 = 1.0/t52310;
            double t52312 = gamma_bb[index]*gx*t52124;
            double t52313 = t52312+1.0;
            double t52314 = 1.0/t52313;
            double t52315 = gamma_bb[index]*gx*t52124*3.0;
            double t52316 = gamma_bb[index]*gx*t52304*t52125*t52119;
            double t52317 = t52304*t52126*t52119*3.0;
            double t52318 = t52315+t52316+t52317+1.0;
            double t52319 = 1.0/t52318;
            double t52320 = gamma_bb[index]*gx*t52124*2.0;
            double t52321 = t52304*t52126*t52119;
            double t52322 = t52320+t52321+1.0;
            double t52323 = 1.0/t52322;
            double t52324 = 1.0/t52158;
            double t52325 = 1.0/(t52155*t52155);
            double t52326 = b4f*t52105*t52268*(2.0/3.0);
            double t52327 = b2f*c*t52267*(1.0/3.0);
            double t52328 = b1f*c*t52267*t52269*(1.0/6.0);
            double t52329 = b3f*c*t52103*t52267*(1.0/2.0);
            double t52330 = t52326+t52327+t52328+t52329;
            double t52331 = a1f*c*c0f*t52159*t52267*(2.0/3.0);
            double t52332 = a1p*c*c0p*t52116*t52267*(2.0/3.0);
            double t52333 = ccaa4*t52121*t52122*t52123*t52288;
            double t52334 = ccaa1*gamma_bb[index]*gcaa*t52124*t52291;
            double t52335 = ccaa3*gamma_bb[index]*gcaa*t52120*t52125*t52119*t52296;
            double t52336 = ccaa2*t52120*t52300*t52126*t52119;
            double t52337 = ccaa0+t52333+t52334+t52335+t52336;
            v_rho_b_[index] = -t52337*(t52163+t52132*t52129*(t52162-c0p*t52116*t52118*2.0))-(ccab0+ccab1*gcab* \
               t52218*t52194+ccab4*t52200*t52201*t52219+ccab2*t52216*t52193*t52195+ccab3*gcab*t52217*t52193*t52194* \
               t52195)*(-t52163+t52181+t52280-t52279+rho_b[index]*(t52332-t52277+t52132*t52129*(t52331+t52277-t52330* \
               t52161*t52324*t52325-a1p*c*c0p*t52116*t52267*(2.0/3.0)))-t52164*(t52281-t52240*t52241*t52180*t52246+ \
               t52132*t52260*t52192*t52237*t52187*4.0+t52132*t52237*t52264*t52186*t52187-t52132*t52192*t52186*t52187* \
               (t52281-t52240*t52241*t52180*t52246+(t52231*1.0/(t52225*t52225)*(b2f*c*t52220*(1.0/3.0)+b4f*t52105* \
               t52238*(2.0/3.0)+b1f*c*t52220*t52239*(1.0/6.0)+b3f*c*t52220*t52167*(1.0/2.0)))/t52228-a1f*c*c0f*t52220* \
               t52229*(2.0/3.0))-t52132*t52232*t52182*t52183*t52192*t52186*4.0+Aa*t52132*t52192*t52247*t52257*t52259* \
               (t52260*t52187*4.0+t52182*t52183*t52186*4.0)*2.0+Aa*t52132*t52264*t52247*t52257*t52266*t52259*2.0- \
               (t52132*1.0/(t52253*t52253)*t52192*t52247*t52266*t52259*(b2a*c*t52220*(1.0/3.0)+b4a*t52105*t52238* \
               (2.0/3.0)+b1a*c*t52220*t52239*(1.0/6.0)+b3a*c*t52220*t52167*(1.0/2.0)))/t52256+Aa*a1a*c*t52220*t52132* \
               t52192*t52247*t52257*t52266*(2.0/3.0))+t52132*t52192*t52237*t52186*t52187)-(rho_b[index]*t52282+rho_a[index]* \
               (t52150-t52132*t52129*(t52150-c0f*log((t52133*(1.0/2.0))/(b1f*t52136+b3f*t52137+b2f*c*t52134+b4f*t52105* \
               t52138)+1.0)*(a1f*c*t52134+1.0)*2.0))-t52164*(t52181+t52280-t52132*t52232*t52192*t52186*t52187))*(ccab1* \
               gamma_bb[index]*gcab*t52218*t52196*(4.0/3.0)-ccab2*1.0/(t52211*t52211)*t52193*t52195*(gamma_bb[index]* \
               gcab*t52196*(8.0/3.0)+gamma_bb[index]*t52193*t52194*t52196*(8.0/3.0))-ccab4*t52200*t52201*1.0/(t52206* \
               t52206)*(gamma_bb[index]*gcab*t52196*(1.6E1/3.0)+gamma_bb[index]*t52193*t52194*t52196*1.6E1+gamma_bb[index]* \
               gcab*t52193*t52195*t52196*1.6E1+gamma_bb[index]*t52200*t52194*t52195*t52196*(1.6E1/3.0))-ccab1*gamma_bb[index]* \
               1.0/(t52208*t52208)*t52193*t52194*t52196*(4.0/3.0)+ccab2*gamma_bb[index]*t52216*t52193*t52194*t52196* \
               (8.0/3.0)-ccab3*gcab*1.0/(t52215*t52215)*t52193*t52194*t52195*(gamma_bb[index]*gcab*t52196*4.0+gamma_bb[index]* \
               t52193*t52194*t52196*8.0+gamma_bb[index]*gcab*t52193*t52195*t52196*4.0)+ccab3*gamma_bb[index]*gcab* \
               t52217*t52193*t52195*t52196*4.0+ccab4*gamma_bb[index]*t52200*t52219*t52194*t52195*t52196*(1.6E1/3.0) \
               )+rho_b[index]*t52282*(ccaa1*gamma_bb[index]*gcaa*t52291*t52196*(8.0/3.0)+ccaa2*t52120*t52300*t52301* \
               t52119*(1.6E1/3.0)+ccaa4*t52121*t52122*t52303*t52288*(3.2E1/3.0)-ccaa1*t52120*t52301*t52119*1.0/(t52290* \
               t52290)*(8.0/3.0)-ccaa2*t52120*t52126*t52119*1.0/(t52299*t52299)*(gamma_bb[index]*gcaa*t52196*(1.6E1/ \
               3.0)+t52120*t52301*t52119*(1.6E1/3.0))-ccaa4*t52121*t52122*t52123*1.0/(t52287*t52287)*(gamma_bb[index]* \
               gcaa*t52196*(3.2E1/3.0)+t52121*t52122*t52303*(3.2E1/3.0)+t52120*t52301*t52119*3.2E1+gamma_bb[index]* \
               gcaa*t52120*t52302*t52119*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t52120*t52302*t52119*t52296*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t52120*t52125*t52119*1.0/(t52295*t52295)*(gamma_bb[index]*gcaa*t52196*8.0+t52120* \
               t52301*t52119*1.6E1+gamma_bb[index]*gcaa*t52120*t52302*t52119*8.0))+c0*pow(rho_b[index],1.0/3.0)*(cx0+ \
               cx1*gamma_bb[index]*gx*t52124*t52314+cx2*t52304*t52323*t52126*t52119+cx4*t52121*t52311*t52123*t52305+ \
               cx3*gamma_bb[index]*gx*t52304*t52125*t52119*t52319)*(4.0/3.0)+rho_b[index]*t52337*(t52332-t52277+t52132* \
               t52129*(t52331-t52332+t52277-t52330*t52161*t52324*t52325))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t52314*t52196*(8.0/3.0)+cx2*t52301*t52304*t52323*t52119*(1.6E1/3.0)+cx4*t52121*t52311*t52303*t52305* \
               (3.2E1/3.0)-cx1*t52301*t52304*1.0/(t52313*t52313)*t52119*(8.0/3.0)-cx2*t52304*1.0/(t52322*t52322)* \
               t52126*t52119*(gamma_bb[index]*gx*t52196*(1.6E1/3.0)+t52301*t52304*t52119*(1.6E1/3.0))-cx4*t52121* \
               1.0/(t52310*t52310)*t52123*t52305*(gamma_bb[index]*gx*t52196*(3.2E1/3.0)+t52121*t52303*t52305*(3.2E1/ \
               3.0)+t52301*t52304*t52119*3.2E1+gamma_bb[index]*gx*t52302*t52304*t52119*3.2E1)+cx3*gamma_bb[index]* \
               gx*t52302*t52304*t52119*t52319*8.0-cx3*gamma_bb[index]*gx*t52304*t52125*t52119*1.0/(t52318*t52318) \
               *(gamma_bb[index]*gx*t52196*8.0+t52301*t52304*t52119*1.6E1+gamma_bb[index]*gx*t52302*t52304*t52119* \
               8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t55279 = 1.0/pow(rho_b[index],1.0/3.0);
            double t55280 = c*t55279;
            double t55281 = sqrt(t55280);
            double t55282 = pow(t55280,3.0/2.0);
            double t55283 = c*c;
            double t55284 = 1.0/pow(rho_b[index],2.0/3.0);
            double t55285 = 1.0/c0p;
            double t55286 = b1p*t55281;
            double t55287 = b3p*t55282;
            double t55288 = b4p*t55283*t55284;
            double t55289 = b2p*c*t55279;
            double t55290 = t55286+t55287+t55288+t55289;
            double t55291 = 1.0/t55290;
            double t55292 = t55291*t55285*(1.0/2.0);
            double t55293 = t55292+1.0;
            double t55294 = log(t55293);
            double t55295 = a1p*c*t55279;
            double t55296 = t55295+1.0;
            double t55297 = gamma_bb[index]*gamma_bb[index];
            double t55298 = gcaa*gcaa;
            double t55299 = t55297*t55297;
            double t55300 = t55298*t55298;
            double t55301 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t55302 = 1.0/pow(rho_b[index],8.0/3.0);
            double t55303 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t55304 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t55305 = pow(2.0,1.0/3.0);
            double t55306 = t55305*2.0;
            double t55307 = t55306-2.0;
            double t55308 = two_13*2.0;
            double t55309 = t55308-2.0;
            double t55310 = 1.0/t55309;
            double t55311 = 1.0/c0f;
            double t55312 = b1f*t55281;
            double t55313 = b3f*t55282;
            double t55314 = b4f*t55283*t55284;
            double t55315 = b2f*c*t55279;
            double t55316 = t55312+t55313+t55314+t55315;
            double t55317 = 1.0/t55316;
            double t55318 = t55311*t55317*(1.0/2.0);
            double t55319 = t55318+1.0;
            double t55320 = log(t55319);
            double t55321 = a1f*c*t55279;
            double t55322 = t55321+1.0;
            double t55323 = c0f*t55320*t55322*2.0;
            double t55324 = c0p*t55294*t55296*2.0;
            double t55325 = gamma_bb[index]*gcaa*t55302*4.0;
            double t55326 = gamma_bb[index]*gcaa*t55303*t55297*t55298*4.0;
            double t55327 = t55304*t55297*t55298*6.0;
            double t55328 = t55300*t55301*t55299;
            double t55329 = t55325+t55326+t55327+t55328+1.0;
            double t55330 = 1.0/t55329;
            double t55331 = gamma_bb[index]*gcaa*t55302;
            double t55332 = t55331+1.0;
            double t55333 = 1.0/t55332;
            double t55334 = gamma_bb[index]*gcaa*t55302*3.0;
            double t55335 = gamma_bb[index]*gcaa*t55303*t55297*t55298;
            double t55336 = t55304*t55297*t55298*3.0;
            double t55337 = t55334+t55335+t55336+1.0;
            double t55338 = 1.0/t55337;
            double t55339 = gamma_bb[index]*gcaa*t55302*2.0;
            double t55340 = t55304*t55297*t55298;
            double t55341 = t55340+t55339+1.0;
            double t55342 = 1.0/t55341;
            double t55343 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t55344 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t55345 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t55346 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t55347 = gx*gx;
            double t55348 = t55347*t55347;
            double t55349 = gamma_bb[index]*gx*t55302*4.0;
            double t55350 = gamma_bb[index]*gx*t55303*t55347*t55297*4.0;
            double t55351 = t55304*t55347*t55297*6.0;
            double t55352 = t55301*t55348*t55299;
            double t55353 = t55350+t55351+t55352+t55349+1.0;
            double t55354 = 1.0/t55353;
            double t55355 = gamma_bb[index]*gx*t55302;
            double t55356 = t55355+1.0;
            double t55357 = 1.0/t55356;
            double t55358 = gamma_bb[index]*gx*t55302*3.0;
            double t55359 = gamma_bb[index]*gx*t55303*t55347*t55297;
            double t55360 = t55304*t55347*t55297*3.0;
            double t55361 = t55360+t55358+t55359+1.0;
            double t55362 = 1.0/t55361;
            double t55363 = gamma_bb[index]*gx*t55302*2.0;
            double t55364 = t55304*t55347*t55297;
            double t55365 = t55363+t55364+1.0;
            double t55366 = 1.0/t55365;
            double t55367 = 1.0/pow(rho_b[index],4.0/3.0);
            double t55368 = 1.0/pow(rho_b[index],5.0/3.0);
            double t55369 = 1.0/sqrt(t55280);
            double t55370 = 1.0/t55293;
            double t55371 = 1.0/(t55290*t55290);
            double t55372 = b4p*t55283*t55368*(2.0/3.0);
            double t55373 = b2p*c*t55367*(1.0/3.0);
            double t55374 = b1p*c*t55367*t55369*(1.0/6.0);
            double t55375 = b3p*c*t55281*t55367*(1.0/2.0);
            double t55376 = t55372+t55373+t55374+t55375;
            double t55377 = t55370*t55371*t55376*t55296;
            double t55378 = ccaa4*t55300*t55301*t55330*t55299;
            double t55379 = ccaa1*gamma_bb[index]*gcaa*t55302*t55333;
            double t55380 = ccaa3*gamma_bb[index]*gcaa*t55303*t55338*t55297*t55298;
            double t55381 = ccaa2*t55304*t55342*t55297*t55298;
            double t55382 = ccaa0+t55380+t55381+t55378+t55379;
            v_rho_b_[index] = -t55382*(t55324+t55310*t55307*(t55323-c0p*t55294*t55296*2.0))+rho_b[index]*t55382* \
               (-t55377+t55310*t55307*(t55377-(t55322*1.0/(t55316*t55316)*(b2f*c*t55367*(1.0/3.0)+b4f*t55283*t55368* \
               (2.0/3.0)+b1f*c*t55367*t55369*(1.0/6.0)+b3f*c*t55281*t55367*(1.0/2.0)))/t55319+a1f*c*c0f*t55320*t55367* \
               (2.0/3.0)-a1p*c*c0p*t55294*t55367*(2.0/3.0))+a1p*c*c0p*t55294*t55367*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t55302*t55357+cx2*t55304*t55347*t55366*t55297+cx4*t55301*t55354*t55348* \
               t55299+cx3*gamma_bb[index]*gx*t55303*t55362*t55347*t55297)*(4.0/3.0)+rho_b[index]*(t55324+t55310*t55307* \
               (t55323-t55324))*(ccaa1*gamma_bb[index]*gcaa*t55333*t55344*(8.0/3.0)+ccaa4*t55300*t55330*t55346*t55299* \
               (3.2E1/3.0)+ccaa2*t55342*t55343*t55297*t55298*(1.6E1/3.0)-ccaa1*1.0/(t55332*t55332)*t55343*t55297* \
               t55298*(8.0/3.0)-ccaa2*t55304*1.0/(t55341*t55341)*t55297*t55298*(gamma_bb[index]*gcaa*t55344*(1.6E1/ \
               3.0)+t55343*t55297*t55298*(1.6E1/3.0))-ccaa4*t55300*t55301*1.0/(t55329*t55329)*t55299*(gamma_bb[index]* \
               gcaa*t55344*(3.2E1/3.0)+t55300*t55346*t55299*(3.2E1/3.0)+t55343*t55297*t55298*3.2E1+gamma_bb[index]* \
               gcaa*t55345*t55297*t55298*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t55345*t55338*t55297*t55298*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t55303*1.0/(t55337*t55337)*t55297*t55298*(gamma_bb[index]*gcaa*t55344*8.0+t55343* \
               t55297*t55298*1.6E1+gamma_bb[index]*gcaa*t55345*t55297*t55298*8.0))-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
               gamma_bb[index]*gx*t55344*t55357*(8.0/3.0)+cx2*t55343*t55347*t55366*t55297*(1.6E1/3.0)+cx4*t55354* \
               t55346*t55348*t55299*(3.2E1/3.0)-cx1*t55343*t55347*1.0/(t55356*t55356)*t55297*(8.0/3.0)-cx2*t55304* \
               t55347*1.0/(t55365*t55365)*t55297*(gamma_bb[index]*gx*t55344*(1.6E1/3.0)+t55343*t55347*t55297*(1.6E1/ \
               3.0))-cx4*t55301*1.0/(t55353*t55353)*t55348*t55299*(gamma_bb[index]*gx*t55344*(3.2E1/3.0)+t55343*t55347* \
               t55297*3.2E1+t55346*t55348*t55299*(3.2E1/3.0)+gamma_bb[index]*gx*t55345*t55347*t55297*3.2E1)+cx3*gamma_bb[index]* \
               gx*t55362*t55345*t55347*t55297*8.0-cx3*gamma_bb[index]*gx*t55303*1.0/(t55361*t55361)*t55347*t55297* \
               (gamma_bb[index]*gx*t55344*8.0+t55343*t55347*t55297*1.6E1+gamma_bb[index]*gx*t55345*t55347*t55297* \
               8.0));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t52339 = 1.0/pow(rho_a[index],1.0/3.0);
                double t52340 = c*t52339;
                double t52341 = sqrt(t52340);
                double t52342 = pow(t52340,3.0/2.0);
                double t52343 = c*c;
                double t52344 = 1.0/pow(rho_a[index],2.0/3.0);
                double t52345 = 1.0/c0p;
                double t52346 = b1p*t52341;
                double t52347 = b3p*t52342;
                double t52348 = b4p*t52343*t52344;
                double t52349 = b2p*c*t52339;
                double t52350 = t52346+t52347+t52348+t52349;
                double t52351 = 1.0/t52350;
                double t52352 = t52351*t52345*(1.0/2.0);
                double t52353 = t52352+1.0;
                double t52354 = log(t52353);
                double t52355 = a1p*c*t52339;
                double t52356 = t52355+1.0;
                double t52357 = pow(2.0,1.0/3.0);
                double t52358 = t52357*2.0;
                double t52359 = t52358-2.0;
                double t52360 = two_13*2.0;
                double t52361 = t52360-2.0;
                double t52362 = 1.0/t52361;
                double t52363 = 1.0/c0f;
                double t52364 = 1.0/pow(rho_b[index],1.0/3.0);
                double t52365 = c*t52364;
                double t52366 = sqrt(t52365);
                double t52367 = pow(t52365,3.0/2.0);
                double t52368 = 1.0/pow(rho_b[index],2.0/3.0);
                double t52369 = b1p*t52366;
                double t52370 = b3p*t52367;
                double t52371 = b4p*t52343*t52368;
                double t52372 = b2p*c*t52364;
                double t52373 = t52370+t52371+t52372+t52369;
                double t52374 = 1.0/t52373;
                double t52375 = t52345*t52374*(1.0/2.0);
                double t52376 = t52375+1.0;
                double t52377 = log(t52376);
                double t52378 = a1p*c*t52364;
                double t52379 = t52378+1.0;
                double t52380 = c0p*t52377*t52379*2.0;
                double t52381 = rho_a[index]+rho_b[index];
                double t52382 = 1.0/pow(t52381,1.0/3.0);
                double t52383 = c*t52382;
                double t52384 = sqrt(t52383);
                double t52385 = pow(t52383,3.0/2.0);
                double t52386 = 1.0/pow(t52381,2.0/3.0);
                double t52387 = b1p*t52384;
                double t52388 = b3p*t52385;
                double t52389 = b4p*t52343*t52386;
                double t52390 = b2p*c*t52382;
                double t52391 = t52390+t52387+t52388+t52389;
                double t52392 = 1.0/t52391;
                double t52393 = t52345*t52392*(1.0/2.0);
                double t52394 = t52393+1.0;
                double t52395 = log(t52394);
                double t52396 = a1p*c*t52382;
                double t52397 = t52396+1.0;
                double t52398 = c0p*t52395*t52397*2.0;
                double t52399 = rho_a[index]-rho_b[index];
                double t52400 = t52399*t52399;
                double t52401 = 1.0/t52381;
                double t52402 = t52401*t52399;
                double t52403 = 1.0/(t52381*t52381*t52381*t52381);
                double t52404 = t52400*t52400;
                double t52405 = t52402+1.0;
                double t52406 = pow(t52405,4.0/3.0);
                double t52407 = -t52402+1.0;
                double t52408 = pow(t52407,4.0/3.0);
                double t52409 = t52406+t52408-2.0;
                double t52410 = 1.0/pow(rho_a[index],8.0/3.0);
                double t52411 = gamma_aa[index]*t52410*(1.0/2.0);
                double t52412 = 1.0/pow(rho_b[index],8.0/3.0);
                double t52413 = gamma_bb[index]*t52412*(1.0/2.0);
                double t52414 = t52411+t52413;
                double t52415 = gcab*t52414;
                double t52416 = t52415+1.0;
                double t52417 = gcab*gcab;
                double t52418 = t52414*t52414;
                double t52419 = t52417*t52417;
                double t52420 = t52418*t52418;
                double t52421 = t52417*t52418;
                double t52422 = gcab*t52414*2.0;
                double t52423 = t52421+t52422+1.0;
                double t52424 = t52417*t52418*3.0;
                double t52425 = gcab*t52414*t52417*t52418;
                double t52426 = gcab*t52414*3.0;
                double t52427 = t52424+t52425+t52426+1.0;
                double t52428 = t52417*t52418*6.0;
                double t52429 = gcab*t52414*t52417*t52418*4.0;
                double t52430 = t52420*t52419;
                double t52431 = gcab*t52414*4.0;
                double t52432 = t52430+t52431+t52428+t52429+1.0;
                double t52433 = c0p*t52354*t52356*2.0;
                double t52434 = gamma_aa[index]*gamma_aa[index];
                double t52435 = gx*gx;
                double t52436 = t52435*t52435;
                double t52437 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t52438 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t52439 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t52440 = gamma_aa[index]*gx*t52410;
                double t52441 = t52440+1.0;
                double t52442 = gamma_aa[index]*gx*t52410*3.0;
                double t52443 = gamma_aa[index]*gx*t52434*t52435*t52439;
                double t52444 = t52434*t52435*t52438*3.0;
                double t52445 = t52442+t52443+t52444+1.0;
                double t52446 = t52434*t52434;
                double t52447 = gamma_aa[index]*gx*t52410*4.0;
                double t52448 = gamma_aa[index]*gx*t52434*t52435*t52439*4.0;
                double t52449 = t52434*t52435*t52438*6.0;
                double t52450 = t52436*t52437*t52446;
                double t52451 = t52450+t52447+t52448+t52449+1.0;
                double t52452 = gamma_aa[index]*gx*t52410*2.0;
                double t52453 = t52434*t52435*t52438;
                double t52454 = t52452+t52453+1.0;
                double t52455 = b1f*t52341;
                double t52456 = b3f*t52342;
                double t52457 = b4f*t52343*t52344;
                double t52458 = b2f*c*t52339;
                double t52459 = t52455+t52456+t52457+t52458;
                double t52460 = 1.0/t52459;
                double t52461 = t52460*t52363*(1.0/2.0);
                double t52462 = t52461+1.0;
                double t52463 = log(t52462);
                double t52464 = a1f*c*t52339;
                double t52465 = t52464+1.0;
                double t52466 = t52433-c0f*t52463*t52465*2.0;
                double t52467 = t52433-t52362*t52466*t52359;
                double t52468 = gcaa*gcaa;
                double t52469 = t52468*t52468;
                double t52470 = gamma_aa[index]*gcaa*t52410;
                double t52471 = t52470+1.0;
                double t52472 = gamma_aa[index]*gcaa*t52410*3.0;
                double t52473 = gamma_aa[index]*gcaa*t52434*t52439*t52468;
                double t52474 = t52434*t52438*t52468*3.0;
                double t52475 = t52472+t52473+t52474+1.0;
                double t52476 = gamma_aa[index]*gcaa*t52410*4.0;
                double t52477 = gamma_aa[index]*gcaa*t52434*t52439*t52468*4.0;
                double t52478 = t52434*t52438*t52468*6.0;
                double t52479 = t52437*t52446*t52469;
                double t52480 = t52476+t52477+t52478+t52479+1.0;
                double t52481 = gamma_aa[index]*gcaa*t52410*2.0;
                double t52482 = t52434*t52438*t52468;
                double t52483 = t52481+t52482+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t52467+rho_b[index]*(t52380-t52362*t52359*(t52380-c0f*log((t52363* \
                   (1.0/2.0))/(b1f*t52366+b3f*t52367+b2f*c*t52364+b4f*t52343*t52368)+1.0)*(a1f*c*t52364+1.0)*2.0))-t52381* \
                   (t52398-t52403*t52404*t52362*t52409*(t52398-c0f*log((t52363*(1.0/2.0))/(b1f*t52384+b3f*t52385+b2f* \
                   c*t52382+b4f*t52343*t52386)+1.0)*(a1f*c*t52382+1.0)*2.0)+(Aa*t52362*t52409*log((1.0/2.0)/(Aa*(b1a* \
                   t52384+b3a*t52385+b2a*c*t52382+b4a*t52343*t52386))+1.0)*(t52403*t52404-1.0)*(a1a*c*t52382+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t52410*(1.0/2.0))/t52416-ccab4*t52420*1.0/(t52432*t52432)*t52419*(gcab*t52410* \
                   2.0+t52410*t52414*t52417*6.0+gcab*t52410*t52417*t52418*6.0+t52410*t52414*t52418*t52419*2.0)-ccab2* \
                   1.0/(t52423*t52423)*t52417*t52418*(gcab*t52410+t52410*t52414*t52417)+(ccab2*t52410*t52414*t52417)/ \
                   t52423-ccab1*t52410*t52414*1.0/(t52416*t52416)*t52417*(1.0/2.0)+(ccab3*gcab*t52410*t52417*t52418*(3.0/ \
                   2.0))/t52427+(ccab4*t52410*t52414*t52418*t52419*2.0)/t52432-ccab3*gcab*t52414*t52417*t52418*1.0/(t52427* \
                   t52427)*(gcab*t52410*(3.0/2.0)+t52410*t52414*t52417*3.0+gcab*t52410*t52417*t52418*(3.0/2.0)))-rho_a[index]* \
                   t52467*((ccaa1*gcaa*t52410)/t52471-ccaa1*gamma_aa[index]*1.0/(t52471*t52471)*t52438*t52468+(ccaa2* \
                   gamma_aa[index]*t52438*t52468*2.0)/t52483-ccaa2*t52434*t52438*1.0/(t52483*t52483)*t52468*(gcaa*t52410* \
                   2.0+gamma_aa[index]*t52438*t52468*2.0)+(ccaa4*gamma_aa[index]*t52434*t52437*t52469*4.0)/t52480+(ccaa3* \
                   gcaa*t52434*t52439*t52468*3.0)/t52475-ccaa4*1.0/(t52480*t52480)*t52437*t52446*t52469*(gcaa*t52410* \
                   4.0+gamma_aa[index]*t52438*t52468*1.2E1+gamma_aa[index]*t52434*t52437*t52469*4.0+gcaa*t52434*t52439* \
                   t52468*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t52434*t52439*1.0/(t52475*t52475)*t52468*(gcaa*t52410*3.0+ \
                   gamma_aa[index]*t52438*t52468*6.0+gcaa*t52434*t52439*t52468*3.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t52410)/t52441-cx1*gamma_aa[index]*1.0/(t52441*t52441)*t52435*t52438+(cx2*gamma_aa[index]*t52435* \
                   t52438*2.0)/t52454-cx2*t52434*t52435*1.0/(t52454*t52454)*t52438*(gx*t52410*2.0+gamma_aa[index]*t52435* \
                   t52438*2.0)+(cx4*gamma_aa[index]*t52434*t52436*t52437*4.0)/t52451+(cx3*gx*t52434*t52435*t52439*3.0) \
                   /t52445-cx4*1.0/(t52451*t52451)*t52436*t52437*t52446*(gx*t52410*4.0+gamma_aa[index]*t52435*t52438* \
                   1.2E1+gamma_aa[index]*t52434*t52436*t52437*4.0+gx*t52434*t52435*t52439*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t52434*t52435*1.0/(t52445*t52445)*t52439*(gx*t52410*3.0+gamma_aa[index]*t52435*t52438*6.0+gx*t52434* \
                   t52435*t52439*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t56023 = 1.0/pow(rho_a[index],8.0/3.0);
                double t56024 = gamma_aa[index]*gamma_aa[index];
                double t56025 = gx*gx;
                double t56026 = t56025*t56025;
                double t56027 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t56028 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t56029 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t56030 = gamma_aa[index]*gx*t56023;
                double t56031 = t56030+1.0;
                double t56032 = gamma_aa[index]*gx*t56023*3.0;
                double t56033 = gamma_aa[index]*gx*t56024*t56025*t56029;
                double t56034 = t56024*t56025*t56028*3.0;
                double t56035 = t56032+t56033+t56034+1.0;
                double t56036 = t56024*t56024;
                double t56037 = gamma_aa[index]*gx*t56023*4.0;
                double t56038 = gamma_aa[index]*gx*t56024*t56025*t56029*4.0;
                double t56039 = t56024*t56025*t56028*6.0;
                double t56040 = t56026*t56027*t56036;
                double t56041 = t56040+t56037+t56038+t56039+1.0;
                double t56042 = gamma_aa[index]*gx*t56023*2.0;
                double t56043 = t56024*t56025*t56028;
                double t56044 = t56042+t56043+1.0;
                double t56045 = 1.0/pow(rho_a[index],1.0/3.0);
                double t56046 = c*t56045;
                double t56047 = sqrt(t56046);
                double t56048 = pow(t56046,3.0/2.0);
                double t56049 = c*c;
                double t56050 = 1.0/pow(rho_a[index],2.0/3.0);
                double t56051 = 1.0/c0p;
                double t56052 = b1p*t56047;
                double t56053 = b3p*t56048;
                double t56054 = b4p*t56050*t56049;
                double t56055 = b2p*c*t56045;
                double t56056 = t56052+t56053+t56054+t56055;
                double t56057 = 1.0/t56056;
                double t56058 = t56051*t56057*(1.0/2.0);
                double t56059 = t56058+1.0;
                double t56060 = log(t56059);
                double t56061 = a1p*c*t56045;
                double t56062 = t56061+1.0;
                double t56063 = gcaa*gcaa;
                double t56064 = t56063*t56063;
                double t56065 = gamma_aa[index]*gcaa*t56023;
                double t56066 = t56065+1.0;
                double t56067 = gamma_aa[index]*gcaa*t56023*3.0;
                double t56068 = gamma_aa[index]*gcaa*t56024*t56063*t56029;
                double t56069 = t56024*t56063*t56028*3.0;
                double t56070 = t56067+t56068+t56069+1.0;
                double t56071 = gamma_aa[index]*gcaa*t56023*4.0;
                double t56072 = gamma_aa[index]*gcaa*t56024*t56063*t56029*4.0;
                double t56073 = t56024*t56063*t56028*6.0;
                double t56074 = t56027*t56036*t56064;
                double t56075 = t56071+t56072+t56073+t56074+1.0;
                double t56076 = gamma_aa[index]*gcaa*t56023*2.0;
                double t56077 = t56024*t56063*t56028;
                double t56078 = t56076+t56077+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t56047+ \
                   b3f*t56048+b2f*c*t56045+b4f*t56050*t56049))+1.0)*(a1f*c*t56045+1.0)*2.0-c0p*t56060*t56062*2.0))/(two_13* \
                   2.0-2.0)+c0p*t56060*t56062*2.0)*((ccaa1*gcaa*t56023)/t56066-ccaa1*gamma_aa[index]*t56063*t56028*1.0/ \
                   (t56066*t56066)+(ccaa2*gamma_aa[index]*t56063*t56028*2.0)/t56078-ccaa2*t56024*t56063*t56028*1.0/(t56078* \
                   t56078)*(gcaa*t56023*2.0+gamma_aa[index]*t56063*t56028*2.0)+(ccaa4*gamma_aa[index]*t56024*t56027*t56064* \
                   4.0)/t56075+(ccaa3*gcaa*t56024*t56063*t56029*3.0)/t56070-ccaa4*t56027*t56036*t56064*1.0/(t56075*t56075) \
                   *(gcaa*t56023*4.0+gamma_aa[index]*t56063*t56028*1.2E1+gamma_aa[index]*t56024*t56027*t56064*4.0+gcaa* \
                   t56024*t56063*t56029*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t56024*1.0/(t56070*t56070)*t56063*t56029*(gcaa* \
                   t56023*3.0+gamma_aa[index]*t56063*t56028*6.0+gcaa*t56024*t56063*t56029*3.0))+c0*pow(rho_a[index],4.0/ \
                   3.0)*((cx1*gx*t56023)/t56031-cx1*gamma_aa[index]*1.0/(t56031*t56031)*t56025*t56028+(cx2*gamma_aa[index]* \
                   t56025*t56028*2.0)/t56044-cx2*t56024*t56025*1.0/(t56044*t56044)*t56028*(gx*t56023*2.0+gamma_aa[index]* \
                   t56025*t56028*2.0)+(cx4*gamma_aa[index]*t56024*t56026*t56027*4.0)/t56041+(cx3*gx*t56024*t56025*t56029* \
                   3.0)/t56035-cx4*1.0/(t56041*t56041)*t56026*t56027*t56036*(gx*t56023*4.0+gamma_aa[index]*t56025*t56028* \
                   1.2E1+gamma_aa[index]*t56024*t56026*t56027*4.0+gx*t56024*t56025*t56029*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t56024*t56025*1.0/(t56035*t56035)*t56029*(gx*t56023*3.0+gamma_aa[index]*t56025*t56028*6.0+gx*t56024* \
                   t56025*t56029*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t52486 = 1.0/pow(rho_a[index],1.0/3.0);
                double t52487 = c*t52486;
                double t52488 = sqrt(t52487);
                double t52489 = pow(t52487,3.0/2.0);
                double t52490 = c*c;
                double t52491 = 1.0/pow(rho_a[index],2.0/3.0);
                double t52492 = 1.0/c0p;
                double t52493 = b1p*t52488;
                double t52494 = b3p*t52489;
                double t52495 = b4p*t52490*t52491;
                double t52496 = b2p*c*t52486;
                double t52497 = t52493+t52494+t52495+t52496;
                double t52498 = 1.0/t52497;
                double t52499 = t52492*t52498*(1.0/2.0);
                double t52500 = t52499+1.0;
                double t52501 = log(t52500);
                double t52502 = a1p*c*t52486;
                double t52503 = t52502+1.0;
                double t52504 = pow(2.0,1.0/3.0);
                double t52505 = t52504*2.0;
                double t52506 = t52505-2.0;
                double t52507 = two_13*2.0;
                double t52508 = t52507-2.0;
                double t52509 = 1.0/t52508;
                double t52510 = 1.0/c0f;
                double t52511 = 1.0/pow(rho_b[index],1.0/3.0);
                double t52512 = c*t52511;
                double t52513 = sqrt(t52512);
                double t52514 = pow(t52512,3.0/2.0);
                double t52515 = 1.0/pow(rho_b[index],2.0/3.0);
                double t52516 = b1p*t52513;
                double t52517 = b3p*t52514;
                double t52518 = b4p*t52515*t52490;
                double t52519 = b2p*c*t52511;
                double t52520 = t52516+t52517+t52518+t52519;
                double t52521 = 1.0/t52520;
                double t52522 = t52521*t52492*(1.0/2.0);
                double t52523 = t52522+1.0;
                double t52524 = log(t52523);
                double t52525 = a1p*c*t52511;
                double t52526 = t52525+1.0;
                double t52527 = c0p*t52524*t52526*2.0;
                double t52528 = rho_a[index]+rho_b[index];
                double t52529 = 1.0/pow(t52528,1.0/3.0);
                double t52530 = c*t52529;
                double t52531 = sqrt(t52530);
                double t52532 = pow(t52530,3.0/2.0);
                double t52533 = 1.0/pow(t52528,2.0/3.0);
                double t52534 = b1p*t52531;
                double t52535 = b3p*t52532;
                double t52536 = b4p*t52533*t52490;
                double t52537 = b2p*c*t52529;
                double t52538 = t52534+t52535+t52536+t52537;
                double t52539 = 1.0/t52538;
                double t52540 = t52492*t52539*(1.0/2.0);
                double t52541 = t52540+1.0;
                double t52542 = log(t52541);
                double t52543 = a1p*c*t52529;
                double t52544 = t52543+1.0;
                double t52545 = c0p*t52542*t52544*2.0;
                double t52546 = rho_a[index]-rho_b[index];
                double t52547 = t52546*t52546;
                double t52548 = 1.0/t52528;
                double t52549 = t52546*t52548;
                double t52550 = 1.0/(t52528*t52528*t52528*t52528);
                double t52551 = t52547*t52547;
                double t52552 = t52549+1.0;
                double t52553 = pow(t52552,4.0/3.0);
                double t52554 = -t52549+1.0;
                double t52555 = pow(t52554,4.0/3.0);
                double t52556 = t52553+t52555-2.0;
                double t52557 = 1.0/pow(rho_b[index],8.0/3.0);
                double t52558 = 1.0/pow(rho_a[index],8.0/3.0);
                double t52559 = gamma_aa[index]*t52558*(1.0/2.0);
                double t52560 = gamma_bb[index]*t52557*(1.0/2.0);
                double t52561 = t52560+t52559;
                double t52562 = gcab*t52561;
                double t52563 = t52562+1.0;
                double t52564 = gcab*gcab;
                double t52565 = t52561*t52561;
                double t52566 = t52564*t52564;
                double t52567 = t52565*t52565;
                double t52568 = t52564*t52565;
                double t52569 = gcab*t52561*2.0;
                double t52570 = t52568+t52569+1.0;
                double t52571 = t52564*t52565*3.0;
                double t52572 = gcab*t52561*t52564*t52565;
                double t52573 = gcab*t52561*3.0;
                double t52574 = t52571+t52572+t52573+1.0;
                double t52575 = t52564*t52565*6.0;
                double t52576 = gcab*t52561*t52564*t52565*4.0;
                double t52577 = t52566*t52567;
                double t52578 = gcab*t52561*4.0;
                double t52579 = t52575+t52576+t52577+t52578+1.0;
                double t52580 = c0p*t52501*t52503*2.0;
                double t52581 = gamma_bb[index]*gamma_bb[index];
                double t52582 = gx*gx;
                double t52583 = t52582*t52582;
                double t52584 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t52585 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t52586 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t52587 = gamma_bb[index]*gx*t52557;
                double t52588 = t52587+1.0;
                double t52589 = gamma_bb[index]*gx*t52557*3.0;
                double t52590 = gamma_bb[index]*gx*t52581*t52582*t52586;
                double t52591 = t52581*t52582*t52585*3.0;
                double t52592 = t52590+t52591+t52589+1.0;
                double t52593 = t52581*t52581;
                double t52594 = gamma_bb[index]*gx*t52557*4.0;
                double t52595 = gamma_bb[index]*gx*t52581*t52582*t52586*4.0;
                double t52596 = t52581*t52582*t52585*6.0;
                double t52597 = t52583*t52584*t52593;
                double t52598 = t52594+t52595+t52596+t52597+1.0;
                double t52599 = gamma_bb[index]*gx*t52557*2.0;
                double t52600 = t52581*t52582*t52585;
                double t52601 = t52600+t52599+1.0;
                double t52602 = b1f*t52513;
                double t52603 = b3f*t52514;
                double t52604 = b4f*t52515*t52490;
                double t52605 = b2f*c*t52511;
                double t52606 = t52602+t52603+t52604+t52605;
                double t52607 = 1.0/t52606;
                double t52608 = t52510*t52607*(1.0/2.0);
                double t52609 = t52608+1.0;
                double t52610 = log(t52609);
                double t52611 = a1f*c*t52511;
                double t52612 = t52611+1.0;
                double t52613 = t52527-c0f*t52610*t52612*2.0;
                double t52614 = t52527-t52613*t52506*t52509;
                double t52615 = gcaa*gcaa;
                double t52616 = t52615*t52615;
                double t52617 = gamma_bb[index]*gcaa*t52557;
                double t52618 = t52617+1.0;
                double t52619 = gamma_bb[index]*gcaa*t52557*3.0;
                double t52620 = gamma_bb[index]*gcaa*t52615*t52581*t52586;
                double t52621 = t52615*t52581*t52585*3.0;
                double t52622 = t52620+t52621+t52619+1.0;
                double t52623 = gamma_bb[index]*gcaa*t52557*4.0;
                double t52624 = gamma_bb[index]*gcaa*t52615*t52581*t52586*4.0;
                double t52625 = t52615*t52581*t52585*6.0;
                double t52626 = t52616*t52584*t52593;
                double t52627 = t52623+t52624+t52625+t52626+1.0;
                double t52628 = gamma_bb[index]*gcaa*t52557*2.0;
                double t52629 = t52615*t52581*t52585;
                double t52630 = t52628+t52629+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t52614+rho_a[index]*(t52580-t52506*t52509*(t52580-c0f*log((t52510* \
                   (1.0/2.0))/(b1f*t52488+b3f*t52489+b2f*c*t52486+b4f*t52490*t52491)+1.0)*(a1f*c*t52486+1.0)*2.0))-t52528* \
                   (t52545-t52550*t52551*t52509*t52556*(t52545-c0f*log((t52510*(1.0/2.0))/(b1f*t52531+b3f*t52532+b2f* \
                   c*t52529+b4f*t52533*t52490)+1.0)*(a1f*c*t52529+1.0)*2.0)+(Aa*t52509*t52556*log((1.0/2.0)/(Aa*(b1a* \
                   t52531+b3a*t52532+b2a*c*t52529+b4a*t52533*t52490))+1.0)*(t52550*t52551-1.0)*(a1a*c*t52529+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t52557*(1.0/2.0))/t52563-ccab4*t52566*t52567*1.0/(t52579*t52579)*(gcab*t52557* \
                   2.0+t52561*t52564*t52557*6.0+gcab*t52564*t52565*t52557*6.0+t52561*t52565*t52557*t52566*2.0)-ccab2* \
                   1.0/(t52570*t52570)*t52564*t52565*(gcab*t52557+t52561*t52564*t52557)+(ccab2*t52561*t52564*t52557)/ \
                   t52570-ccab1*t52561*1.0/(t52563*t52563)*t52564*t52557*(1.0/2.0)+(ccab3*gcab*t52564*t52565*t52557*(3.0/ \
                   2.0))/t52574+(ccab4*t52561*t52565*t52557*t52566*2.0)/t52579-ccab3*gcab*t52561*t52564*t52565*1.0/(t52574* \
                   t52574)*(gcab*t52557*(3.0/2.0)+t52561*t52564*t52557*3.0+gcab*t52564*t52565*t52557*(3.0/2.0)))-rho_b[index]* \
                   t52614*((ccaa1*gcaa*t52557)/t52618+(ccaa2*gamma_bb[index]*t52615*t52585*2.0)/t52630-ccaa1*gamma_bb[index]* \
                   t52615*1.0/(t52618*t52618)*t52585-ccaa2*1.0/(t52630*t52630)*t52615*t52581*t52585*(gcaa*t52557*2.0+ \
                   gamma_bb[index]*t52615*t52585*2.0)+(ccaa4*gamma_bb[index]*t52616*t52581*t52584*4.0)/t52627+(ccaa3* \
                   gcaa*t52615*t52581*t52586*3.0)/t52622-ccaa4*t52616*1.0/(t52627*t52627)*t52584*t52593*(gcaa*t52557* \
                   4.0+gamma_bb[index]*t52615*t52585*1.2E1+gamma_bb[index]*t52616*t52581*t52584*4.0+gcaa*t52615*t52581* \
                   t52586*1.2E1)-ccaa3*gamma_bb[index]*gcaa*1.0/(t52622*t52622)*t52615*t52581*t52586*(gcaa*t52557*3.0+ \
                   gamma_bb[index]*t52615*t52585*6.0+gcaa*t52615*t52581*t52586*3.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1* \
                   gx*t52557)/t52588-cx1*gamma_bb[index]*t52582*t52585*1.0/(t52588*t52588)+(cx2*gamma_bb[index]*t52582* \
                   t52585*2.0)/t52601-cx2*1.0/(t52601*t52601)*t52581*t52582*t52585*(gx*t52557*2.0+gamma_bb[index]*t52582* \
                   t52585*2.0)+(cx4*gamma_bb[index]*t52581*t52583*t52584*4.0)/t52598+(cx3*gx*t52581*t52582*t52586*3.0) \
                   /t52592-cx4*t52583*t52584*t52593*1.0/(t52598*t52598)*(gx*t52557*4.0+gamma_bb[index]*t52582*t52585* \
                   1.2E1+gamma_bb[index]*t52581*t52583*t52584*4.0+gx*t52581*t52582*t52586*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t52581*t52582*1.0/(t52592*t52592)*t52586*(gx*t52557*3.0+gamma_bb[index]*t52582*t52585*6.0+gx*t52581* \
                   t52582*t52586*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t55386 = 1.0/pow(rho_b[index],8.0/3.0);
                double t55387 = gamma_bb[index]*gamma_bb[index];
                double t55388 = gx*gx;
                double t55389 = t55388*t55388;
                double t55390 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t55391 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t55392 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t55393 = gamma_bb[index]*gx*t55386;
                double t55394 = t55393+1.0;
                double t55395 = gamma_bb[index]*gx*t55386*3.0;
                double t55396 = gamma_bb[index]*gx*t55392*t55387*t55388;
                double t55397 = t55391*t55387*t55388*3.0;
                double t55398 = t55395+t55396+t55397+1.0;
                double t55399 = t55387*t55387;
                double t55400 = gamma_bb[index]*gx*t55386*4.0;
                double t55401 = gamma_bb[index]*gx*t55392*t55387*t55388*4.0;
                double t55402 = t55391*t55387*t55388*6.0;
                double t55403 = t55390*t55389*t55399;
                double t55404 = t55400+t55401+t55402+t55403+1.0;
                double t55405 = gamma_bb[index]*gx*t55386*2.0;
                double t55406 = t55391*t55387*t55388;
                double t55407 = t55405+t55406+1.0;
                double t55408 = 1.0/pow(rho_b[index],1.0/3.0);
                double t55409 = c*t55408;
                double t55410 = sqrt(t55409);
                double t55411 = pow(t55409,3.0/2.0);
                double t55412 = c*c;
                double t55413 = 1.0/pow(rho_b[index],2.0/3.0);
                double t55414 = 1.0/c0p;
                double t55415 = b1p*t55410;
                double t55416 = b3p*t55411;
                double t55417 = b4p*t55412*t55413;
                double t55418 = b2p*c*t55408;
                double t55419 = t55415+t55416+t55417+t55418;
                double t55420 = 1.0/t55419;
                double t55421 = t55420*t55414*(1.0/2.0);
                double t55422 = t55421+1.0;
                double t55423 = log(t55422);
                double t55424 = a1p*c*t55408;
                double t55425 = t55424+1.0;
                double t55426 = gcaa*gcaa;
                double t55427 = t55426*t55426;
                double t55428 = gamma_bb[index]*gcaa*t55386;
                double t55429 = t55428+1.0;
                double t55430 = gamma_bb[index]*gcaa*t55386*3.0;
                double t55431 = gamma_bb[index]*gcaa*t55426*t55392*t55387;
                double t55432 = t55426*t55391*t55387*3.0;
                double t55433 = t55430+t55431+t55432+1.0;
                double t55434 = gamma_bb[index]*gcaa*t55386*4.0;
                double t55435 = gamma_bb[index]*gcaa*t55426*t55392*t55387*4.0;
                double t55436 = t55426*t55391*t55387*6.0;
                double t55437 = t55390*t55427*t55399;
                double t55438 = t55434+t55435+t55436+t55437+1.0;
                double t55439 = gamma_bb[index]*gcaa*t55386*2.0;
                double t55440 = t55426*t55391*t55387;
                double t55441 = t55440+t55439+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t55410+ \
                   b3f*t55411+b2f*c*t55408+b4f*t55412*t55413))+1.0)*(a1f*c*t55408+1.0)*2.0-c0p*t55423*t55425*2.0))/(two_13* \
                   2.0-2.0)+c0p*t55423*t55425*2.0)*((ccaa1*gcaa*t55386)/t55429+(ccaa2*gamma_bb[index]*t55426*t55391*2.0) \
                   /t55441-ccaa1*gamma_bb[index]*t55426*t55391*1.0/(t55429*t55429)-ccaa2*1.0/(t55441*t55441)*t55426*t55391* \
                   t55387*(gcaa*t55386*2.0+gamma_bb[index]*t55426*t55391*2.0)+(ccaa4*gamma_bb[index]*t55390*t55427*t55387* \
                   4.0)/t55438+(ccaa3*gcaa*t55426*t55392*t55387*3.0)/t55433-ccaa4*t55390*t55427*1.0/(t55438*t55438)*t55399* \
                   (gcaa*t55386*4.0+gamma_bb[index]*t55426*t55391*1.2E1+gamma_bb[index]*t55390*t55427*t55387*4.0+gcaa* \
                   t55426*t55392*t55387*1.2E1)-ccaa3*gamma_bb[index]*gcaa*1.0/(t55433*t55433)*t55426*t55392*t55387*(gcaa* \
                   t55386*3.0+gamma_bb[index]*t55426*t55391*6.0+gcaa*t55426*t55392*t55387*3.0))+c0*pow(rho_b[index],4.0/ \
                   3.0)*((cx1*gx*t55386)/t55394-cx1*gamma_bb[index]*t55391*1.0/(t55394*t55394)*t55388+(cx2*gamma_bb[index]* \
                   t55391*t55388*2.0)/t55407-cx2*1.0/(t55407*t55407)*t55391*t55387*t55388*(gx*t55386*2.0+gamma_bb[index]* \
                   t55391*t55388*2.0)+(cx4*gamma_bb[index]*t55390*t55387*t55389*4.0)/t55404+(cx3*gx*t55392*t55387*t55388* \
                   3.0)/t55398-cx4*1.0/(t55404*t55404)*t55390*t55389*t55399*(gx*t55386*4.0+gamma_bb[index]*t55391*t55388* \
                   1.2E1+gamma_bb[index]*t55390*t55387*t55389*4.0+gx*t55392*t55387*t55388*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t55392*t55387*t55388*1.0/(t55398*t55398)*(gx*t55386*3.0+gamma_bb[index]*t55391*t55388*6.0+gx*t55392* \
                   t55387*t55388*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t52634 = rho_a[index]+rho_b[index];
            double t52635 = 1.0/pow(t52634,1.0/3.0);
            double t52636 = c*t52635;
            double t52637 = sqrt(t52636);
            double t52638 = b1p*t52637;
            double t52639 = pow(t52636,3.0/2.0);
            double t52640 = b3p*t52639;
            double t52641 = c*c;
            double t52642 = 1.0/pow(t52634,2.0/3.0);
            double t52643 = b4p*t52641*t52642;
            double t52644 = b2p*c*t52635;
            double t52645 = t52640+t52643+t52644+t52638;
            double t52646 = 1.0/pow(t52634,4.0/3.0);
            double t52647 = 1.0/c0p;
            double t52648 = 1.0/t52645;
            double t52649 = t52647*t52648*(1.0/2.0);
            double t52650 = t52649+1.0;
            double t52651 = a1p*c*t52635;
            double t52652 = t52651+1.0;
            double t52653 = rho_a[index]-rho_b[index];
            double t52654 = t52653*t52653;
            double t52655 = 1.0/t52634;
            double t52656 = t52653*t52655;
            double t52657 = two_13*2.0;
            double t52658 = t52657-2.0;
            double t52659 = 1.0/t52658;
            double t52660 = 1.0/c0f;
            double t52661 = b1f*t52637;
            double t52662 = b3f*t52639;
            double t52663 = b4f*t52641*t52642;
            double t52664 = b2f*c*t52635;
            double t52665 = t52661+t52662+t52663+t52664;
            double t52666 = 1.0/t52665;
            double t52667 = t52660*t52666*(1.0/2.0);
            double t52668 = t52667+1.0;
            double t52669 = log(t52668);
            double t52670 = a1f*c*t52635;
            double t52671 = t52670+1.0;
            double t52672 = log(t52650);
            double t52682 = c0f*t52671*t52669*2.0;
            double t52683 = c0p*t52652*t52672*2.0;
            double t52673 = t52682-t52683;
            double t52674 = t52656+1.0;
            double t52675 = pow(t52674,4.0/3.0);
            double t52676 = -t52656+1.0;
            double t52677 = pow(t52676,4.0/3.0);
            double t52678 = t52675+t52677-2.0;
            double t52679 = 1.0/(t52634*t52634);
            double t52710 = t52653*t52679;
            double t52680 = -t52710+t52655;
            double t52681 = 1.0/(t52634*t52634*t52634*t52634);
            double t52684 = t52654*t52654;
            double t52685 = 1.0/pow(t52634,5.0/3.0);
            double t52686 = 1.0/sqrt(t52636);
            double t52687 = 1.0/t52650;
            double t52688 = 1.0/(t52645*t52645);
            double t52689 = b4p*t52641*t52685*(2.0/3.0);
            double t52690 = b2p*c*t52646*(1.0/3.0);
            double t52691 = b1p*c*t52646*t52686*(1.0/6.0);
            double t52692 = b3p*c*t52637*t52646*(1.0/2.0);
            double t52693 = t52690+t52691+t52692+t52689;
            double t52694 = t52652*t52693*t52687*t52688;
            double t52695 = 1.0/(t52634*t52634*t52634*t52634*t52634);
            double t52696 = 1.0/d2fz0;
            double t52697 = 1.0/Aa;
            double t52698 = b1a*t52637;
            double t52699 = b3a*t52639;
            double t52700 = b4a*t52641*t52642;
            double t52701 = b2a*c*t52635;
            double t52702 = t52700+t52701+t52698+t52699;
            double t52703 = 1.0/t52702;
            double t52704 = t52703*t52697*(1.0/2.0);
            double t52705 = t52704+1.0;
            double t52706 = log(t52705);
            double t52707 = a1a*c*t52635;
            double t52708 = t52707+1.0;
            double t52709 = pow(t52674,1.0/3.0);
            double t52711 = t52680*t52709*(4.0/3.0);
            double t52712 = pow(t52676,1.0/3.0);
            double t52787 = t52712*t52680*(4.0/3.0);
            double t52713 = t52711-t52787;
            double t52714 = t52681*t52684;
            double t52715 = t52714-1.0;
            double t52716 = 1.0/pow(rho_a[index],1.0/3.0);
            double t52717 = c*t52716;
            double t52718 = sqrt(t52717);
            double t52719 = b1f*t52718;
            double t52720 = pow(t52717,3.0/2.0);
            double t52721 = b3f*t52720;
            double t52722 = 1.0/pow(rho_a[index],2.0/3.0);
            double t52723 = b4f*t52641*t52722;
            double t52724 = b2f*c*t52716;
            double t52725 = t52721+t52723+t52724+t52719;
            double t52726 = 1.0/pow(rho_a[index],4.0/3.0);
            double t52727 = b1p*t52718;
            double t52728 = b3p*t52720;
            double t52729 = b4p*t52641*t52722;
            double t52730 = b2p*c*t52716;
            double t52731 = t52730+t52727+t52728+t52729;
            double t52732 = 1.0/pow(rho_a[index],5.0/3.0);
            double t52733 = 1.0/sqrt(t52717);
            double t52734 = 1.0/t52725;
            double t52735 = t52660*t52734*(1.0/2.0);
            double t52736 = t52735+1.0;
            double t52737 = 1.0/t52731;
            double t52738 = t52647*t52737*(1.0/2.0);
            double t52739 = t52738+1.0;
            double t52740 = a1p*c*t52716;
            double t52741 = t52740+1.0;
            double t52742 = 1.0/t52739;
            double t52743 = 1.0/(t52731*t52731);
            double t52744 = b4p*t52641*t52732*(2.0/3.0);
            double t52745 = b2p*c*t52726*(1.0/3.0);
            double t52746 = b1p*c*t52733*t52726*(1.0/6.0);
            double t52747 = b3p*c*t52726*t52718*(1.0/2.0);
            double t52748 = t52744+t52745+t52746+t52747;
            double t52749 = t52741*t52742*t52743*t52748;
            double t52750 = log(t52739);
            double t52751 = pow(2.0,1.0/3.0);
            double t52752 = t52751*2.0;
            double t52753 = t52752-2.0;
            double t52754 = log(t52736);
            double t52755 = a1f*c*t52716;
            double t52756 = t52755+1.0;
            double t52757 = gcab*gcab;
            double t52761 = 1.0/pow(rho_a[index],8.0/3.0);
            double t52762 = gamma_aa[index]*t52761*(1.0/2.0);
            double t52763 = 1.0/pow(rho_b[index],8.0/3.0);
            double t52764 = gamma_bb[index]*t52763*(1.0/2.0);
            double t52758 = t52762+t52764;
            double t52759 = t52758*t52758;
            double t52760 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t52765 = t52757*t52757;
            double t52766 = t52759*t52759;
            double t52767 = t52757*t52759*6.0;
            double t52768 = gcab*t52757*t52758*t52759*4.0;
            double t52769 = t52765*t52766;
            double t52770 = gcab*t52758*4.0;
            double t52771 = t52770+t52767+t52768+t52769+1.0;
            double t52772 = gcab*t52758;
            double t52773 = t52772+1.0;
            double t52774 = t52757*t52759;
            double t52775 = gcab*t52758*2.0;
            double t52776 = t52774+t52775+1.0;
            double t52777 = t52757*t52759*3.0;
            double t52778 = gcab*t52757*t52758*t52759;
            double t52779 = gcab*t52758*3.0;
            double t52780 = t52777+t52778+t52779+1.0;
            double t52781 = 1.0/t52776;
            double t52782 = 1.0/t52780;
            double t52783 = 1.0/t52773;
            double t52784 = 1.0/t52771;
            double t52785 = 1.0/pow(t52634,7.0/3.0);
            double t52786 = 1.0/pow(t52634,8.0/3.0);
            double t52788 = 1.0/t52668;
            double t52789 = 1.0/(t52665*t52665);
            double t52790 = b4f*t52641*t52685*(2.0/3.0);
            double t52791 = b2f*c*t52646*(1.0/3.0);
            double t52792 = b1f*c*t52646*t52686*(1.0/6.0);
            double t52793 = b3f*c*t52637*t52646*(1.0/2.0);
            double t52794 = t52790+t52791+t52792+t52793;
            double t52795 = a1f*c*c0f*t52646*t52669*(2.0/3.0);
            double t52797 = t52671*t52794*t52788*t52789;
            double t52798 = a1p*c*c0p*t52672*t52646*(2.0/3.0);
            double t52796 = t52694+t52795-t52797-t52798;
            double t52799 = t52693*t52693;
            double t52800 = 1.0/pow(t52636,3.0/2.0);
            double t52801 = b4p*t52641*t52786*(1.0E1/9.0);
            double t52802 = b2p*c*t52785*(4.0/9.0);
            double t52803 = b1p*c*t52686*t52785*(2.0/9.0);
            double t52804 = b3p*c*t52637*t52785*(2.0/3.0);
            double t52805 = b3p*t52641*t52686*t52786*(1.0/1.2E1);
            double t52806 = t52801+t52802+t52803+t52804+t52805-b1p*t52800*t52641*t52786*(1.0/3.6E1);
            double t52807 = 1.0/(t52645*t52645*t52645);
            double t52808 = t52652*t52807*t52687*t52799*2.0;
            double t52809 = t52794*t52794;
            double t52810 = 1.0/(t52650*t52650);
            double t52811 = 1.0/(t52645*t52645*t52645*t52645);
            double t52812 = t52679*2.0;
            double t52813 = 1.0/(t52634*t52634*t52634);
            double t52820 = t52813*t52653*2.0;
            double t52814 = -t52820+t52812;
            double t52815 = t52680*t52680;
            double t52816 = a1p*c*c0p*t52672*t52785*(8.0/9.0);
            double t52817 = 1.0/(t52634*t52634*t52634*t52634*t52634*t52634);
            double t52818 = t52684*t52695*4.0;
            double t52828 = t52653*t52654*t52681*4.0;
            double t52819 = t52818-t52828;
            double t52821 = t52712*t52814*(4.0/3.0);
            double t52822 = 1.0/pow(t52674,2.0/3.0);
            double t52823 = t52822*t52815*(4.0/9.0);
            double t52824 = 1.0/pow(t52676,2.0/3.0);
            double t52825 = t52815*t52824*(4.0/9.0);
            double t52826 = t52821+t52823+t52825-t52814*t52709*(4.0/3.0);
            double t52827 = 1.0/t52705;
            double t52829 = 1.0/(t52702*t52702);
            double t52830 = b4a*t52641*t52685*(2.0/3.0);
            double t52831 = b2a*c*t52646*(1.0/3.0);
            double t52832 = b1a*c*t52646*t52686*(1.0/6.0);
            double t52833 = b3a*c*t52637*t52646*(1.0/2.0);
            double t52834 = t52830+t52831+t52832+t52833;
            double t52835 = t52834*t52834;
            double t52836 = t52652*t52806*t52687*t52688;
            double t52837 = 1.0/t52736;
            double t52838 = b4f*t52641*t52732*(2.0/3.0);
            double t52839 = b2f*c*t52726*(1.0/3.0);
            double t52840 = b1f*c*t52733*t52726*(1.0/6.0);
            double t52841 = b3f*c*t52726*t52718*(1.0/2.0);
            double t52842 = t52840+t52841+t52838+t52839;
            double t52843 = 1.0/(t52725*t52725);
            double t52844 = 1.0/pow(rho_a[index],7.0/3.0);
            double t52845 = 1.0/pow(t52717,3.0/2.0);
            double t52846 = t52842*t52842;
            double t52847 = t52748*t52748;
            double t52848 = 1.0/(t52731*t52731*t52731);
            double t52849 = t52741*t52742*t52847*t52848*2.0;
            double t52850 = b4p*t52641*t52761*(1.0E1/9.0);
            double t52851 = b2p*c*t52844*(4.0/9.0);
            double t52852 = b3p*t52641*t52733*t52761*(1.0/1.2E1);
            double t52853 = b1p*c*t52733*t52844*(2.0/9.0);
            double t52854 = b3p*c*t52718*t52844*(2.0/3.0);
            double t53007 = b1p*t52641*t52761*t52845*(1.0/3.6E1);
            double t52855 = t52850+t52851+t52852+t52853+t52854-t53007;
            double t52856 = 1.0/(t52739*t52739);
            double t52857 = 1.0/(t52731*t52731*t52731*t52731);
            double t52858 = a1p*c*c0p*t52750*t52844*(8.0/9.0);
            double t52859 = a1f*c*c0f*t52726*t52754*(2.0/3.0);
            double t52860 = a1p*c*c0p*t52750*t52726*(2.0/3.0);
            double t52861 = t52842*t52843*t52756*t52837;
            double t52862 = t52860+t52861-t52749-t52859;
            double t52863 = gamma_aa[index]*gamma_aa[index];
            double t52864 = gcaa*gcaa;
            double t52865 = t52863*t52863;
            double t52866 = t52864*t52864;
            double t52867 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t52868 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t52869 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t52870 = c0f*t52754*t52756*2.0;
            double t52872 = c0p*t52741*t52750*2.0;
            double t52871 = t52870-t52872;
            double t52873 = 1.0/pow(rho_b[index],1.0/3.0);
            double t52874 = c*t52873;
            double t52875 = sqrt(t52874);
            double t52876 = pow(t52874,3.0/2.0);
            double t52877 = 1.0/pow(rho_b[index],2.0/3.0);
            double t52878 = b1p*t52875;
            double t52879 = b3p*t52876;
            double t52880 = b4p*t52641*t52877;
            double t52881 = b2p*c*t52873;
            double t52882 = t52880+t52881+t52878+t52879;
            double t52883 = 1.0/t52882;
            double t52884 = t52647*t52883*(1.0/2.0);
            double t52885 = t52884+1.0;
            double t52886 = log(t52885);
            double t52887 = a1p*c*t52873;
            double t52888 = t52887+1.0;
            double t52889 = c0p*t52886*t52888*2.0;
            double t52890 = t52681*t52673*t52684*t52659*t52678;
            double t52891 = Aa*t52706*t52715*t52708*t52659*t52678*t52696*2.0;
            double t52892 = gamma_aa[index]*gcab*t52760*(1.6E1/3.0);
            double t52893 = gamma_aa[index]*gcab*t52760*t52757*t52759*1.6E1;
            double t52894 = gamma_aa[index]*t52760*t52765*t52758*t52759*(1.6E1/3.0);
            double t52895 = gamma_aa[index]*t52760*t52757*t52758*1.6E1;
            double t52896 = t52892+t52893+t52894+t52895;
            double t52897 = 1.0/(t52773*t52773);
            double t52898 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t52899 = gamma_aa[index]*gcab*t52760*(8.0/3.0);
            double t52900 = gamma_aa[index]*t52760*t52757*t52758*(8.0/3.0);
            double t52901 = t52900+t52899;
            double t52902 = 1.0/(t52780*t52780);
            double t52903 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t52904 = 1.0/(t52771*t52771);
            double t52905 = 1.0/(t52776*t52776);
            double t52906 = gamma_aa[index]*gcab*t52760*4.0;
            double t52907 = gamma_aa[index]*gcab*t52760*t52757*t52759*4.0;
            double t52908 = gamma_aa[index]*t52760*t52757*t52758*8.0;
            double t52909 = t52906+t52907+t52908;
            double t52910 = t52753*t52871*t52659;
            double t52911 = t52910+t52872;
            double t52912 = gamma_aa[index]*gcaa*t52761*4.0;
            double t52913 = gamma_aa[index]*gcaa*t52863*t52864*t52868*4.0;
            double t52914 = t52863*t52864*t52869*6.0;
            double t52915 = t52865*t52866*t52867;
            double t52916 = t52912+t52913+t52914+t52915+1.0;
            double t52917 = 1.0/t52916;
            double t52918 = gamma_aa[index]*gcaa*t52761;
            double t52919 = t52918+1.0;
            double t52920 = 1.0/t52919;
            double t52921 = gamma_aa[index]*gcaa*t52761*3.0;
            double t52922 = gamma_aa[index]*gcaa*t52863*t52864*t52868;
            double t52923 = t52863*t52864*t52869*3.0;
            double t52924 = t52921+t52922+t52923+1.0;
            double t52925 = 1.0/t52924;
            double t52926 = gamma_aa[index]*gcaa*t52761*2.0;
            double t52927 = t52863*t52864*t52869;
            double t52928 = t52926+t52927+1.0;
            double t52929 = 1.0/t52928;
            double t52930 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t52931 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t52932 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t52933 = t52753*t52862*t52659;
            double t52934 = -t52860+t52933+t52749;
            double t52935 = ccaa4*t52932*t52917*t52865*t52866*(3.2E1/3.0);
            double t52936 = ccaa1*gamma_aa[index]*gcaa*t52920*t52760*(8.0/3.0);
            double t52937 = ccaa3*gamma_aa[index]*gcaa*t52931*t52925*t52863*t52864*8.0;
            double t52938 = ccaa2*t52930*t52863*t52864*t52929*(1.6E1/3.0);
            double t52939 = 1.0/(t52919*t52919);
            double t52940 = gamma_aa[index]*gcaa*t52760*8.0;
            double t52941 = gamma_aa[index]*gcaa*t52931*t52863*t52864*8.0;
            double t52942 = t52930*t52863*t52864*1.6E1;
            double t52943 = t52940+t52941+t52942;
            double t52944 = 1.0/(t52924*t52924);
            double t52945 = gamma_aa[index]*gcaa*t52760*(3.2E1/3.0);
            double t52946 = gamma_aa[index]*gcaa*t52931*t52863*t52864*3.2E1;
            double t52947 = t52930*t52863*t52864*3.2E1;
            double t52948 = t52932*t52865*t52866*(3.2E1/3.0);
            double t52949 = t52945+t52946+t52947+t52948;
            double t52950 = 1.0/(t52916*t52916);
            double t52951 = gamma_aa[index]*gcaa*t52760*(1.6E1/3.0);
            double t52952 = t52930*t52863*t52864*(1.6E1/3.0);
            double t52953 = t52951+t52952;
            double t52954 = 1.0/(t52928*t52928);
            double t52955 = t52935+t52936+t52937+t52938-ccaa1*t52930*t52863*t52864*t52939*(8.0/3.0)-ccaa2*t52863* \
               t52953*t52864*t52954*t52869-ccaa4*t52950*t52865*t52866*t52867*t52949-ccaa3*gamma_aa[index]*gcaa*t52943* \
               t52863*t52944*t52864*t52868;
            double t52956 = gx*gx;
            double t52957 = t52956*t52956;
            double t52958 = 1.0/pow(rho_a[index],1.0E1);
            double t52959 = gamma_aa[index]*gx*t52761;
            double t52960 = t52959+1.0;
            double t52980 = gamma_aa[index]*gx*t52760*(3.2E1/3.0);
            double t52981 = gamma_aa[index]*gx*t52931*t52863*t52956*3.2E1;
            double t52982 = t52930*t52863*t52956*3.2E1;
            double t52983 = t52932*t52865*t52957*(3.2E1/3.0);
            double t52961 = t52980+t52981+t52982+t52983;
            double t52962 = gamma_aa[index]*gx*t52761*4.0;
            double t52963 = gamma_aa[index]*gx*t52863*t52956*t52868*4.0;
            double t52964 = t52863*t52956*t52869*6.0;
            double t52965 = t52865*t52867*t52957;
            double t52966 = t52962+t52963+t52964+t52965+1.0;
            double t52986 = gamma_aa[index]*gx*t52760*(1.6E1/3.0);
            double t52987 = t52930*t52863*t52956*(1.6E1/3.0);
            double t52967 = t52986+t52987;
            double t52968 = gamma_aa[index]*gx*t52761*2.0;
            double t52969 = t52863*t52956*t52869;
            double t52970 = t52968+t52969+1.0;
            double t52971 = gamma_aa[index]*gx*t52761*3.0;
            double t52972 = gamma_aa[index]*gx*t52863*t52956*t52868;
            double t52973 = t52863*t52956*t52869*3.0;
            double t52974 = t52971+t52972+t52973+1.0;
            double t52975 = 1.0/(t52974*t52974);
            double t52976 = gamma_aa[index]*gx*t52760*8.0;
            double t52977 = gamma_aa[index]*gx*t52931*t52863*t52956*8.0;
            double t52978 = t52930*t52863*t52956*1.6E1;
            double t52979 = t52976+t52977+t52978;
            double t52984 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t52985 = 1.0/(t52966*t52966);
            double t52988 = 1.0/(t52970*t52970);
            double t52989 = 1.0/t52966;
            double t52990 = 1.0/t52960;
            double t52991 = 1.0/t52974;
            double t52992 = 1.0/t52970;
            double t52993 = 1.0/(t52960*t52960);
            double t52994 = ccaa4*t52917*t52865*t52866*t52867;
            double t52995 = ccaa1*gamma_aa[index]*gcaa*t52920*t52761;
            double t52996 = ccaa3*gamma_aa[index]*gcaa*t52925*t52863*t52864*t52868;
            double t52997 = ccaa2*t52863*t52864*t52929*t52869;
            double t52998 = ccaa0+t52994+t52995+t52996+t52997;
            double t52999 = 1.0/(t52725*t52725*t52725);
            double t53000 = b4f*t52641*t52761*(1.0E1/9.0);
            double t53001 = b2f*c*t52844*(4.0/9.0);
            double t53002 = b3f*t52641*t52733*t52761*(1.0/1.2E1);
            double t53003 = b1f*c*t52733*t52844*(2.0/9.0);
            double t53004 = b3f*c*t52718*t52844*(2.0/3.0);
            double t53005 = t53000+t53001+t53002+t53003+t53004-b1f*t52641*t52761*t52845*(1.0/3.6E1);
            double t53006 = t52843*t52756*t52837*t53005;
            double t53008 = t52741*t52742*t52743*t52855;
            double t53009 = 1.0/(t52736*t52736);
            double t53010 = 1.0/(t52725*t52725*t52725*t52725);
            double t53011 = t52660*t52756*t52846*t53010*t53009*(1.0/2.0);
            double t53012 = t52741*t52647*t52847*t52856*t52857*(1.0/2.0);
            double t53013 = a1f*c*t52842*t52726*t52843*t52837*(2.0/3.0);
            double t53014 = a1p*c*t52742*t52743*t52726*t52748*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*t52911+rho_b[index]*(t52889-t52753*t52659*(t52889-c0f*log((t52660* \
               (1.0/2.0))/(b1f*t52875+b3f*t52876+b2f*c*t52873+b4f*t52641*t52877)+1.0)*(a1f*c*t52873+1.0)*2.0))-t52634* \
               (t52683+t52890+t52891))*(-ccab2*t52905*t52757*t52759*(gamma_aa[index]*gcab*t52903*(8.8E1/9.0)+t52863* \
               t52757*t52898*(3.2E1/9.0)+gamma_aa[index]*t52903*t52757*t52758*(8.8E1/9.0))+ccab2*(t52901*t52901)* \
               t52757*1.0/(t52776*t52776*t52776)*t52759*2.0+ccab4*1.0/(t52771*t52771*t52771)*t52765*t52766*(t52896* \
               t52896)*2.0+ccab1*gamma_aa[index]*gcab*t52903*t52783*(4.4E1/9.0)+ccab2*t52781*t52863*t52757*t52898* \
               (3.2E1/9.0)-ccab1*t52863*t52757*t52897*t52898*(3.2E1/9.0)-ccab4*t52904*t52765*t52766*(gamma_aa[index]* \
               gcab*t52903*(1.76E2/9.0)+t52863*t52757*t52898*(6.4E1/3.0)+gamma_aa[index]*t52903*t52757*t52758*(1.76E2/ \
               3.0)+t52863*t52765*t52759*t52898*(6.4E1/3.0)+gamma_aa[index]*gcab*t52903*t52757*t52759*(1.76E2/3.0) \
               +gamma_aa[index]*t52903*t52765*t52758*t52759*(1.76E2/9.0)+gcab*t52863*t52757*t52758*t52898*(1.28E2/ \
               3.0))+ccab4*t52863*t52765*t52784*t52759*t52898*(6.4E1/3.0)+ccab2*gamma_aa[index]*t52903*t52781*t52757* \
               t52758*(8.8E1/9.0)-ccab1*gamma_aa[index]*t52903*t52757*t52758*t52897*(4.4E1/9.0)+ccab3*gcab*1.0/(t52780* \
               t52780*t52780)*(t52909*t52909)*t52757*t52758*t52759*2.0+ccab3*gamma_aa[index]*gcab*t52903*t52782*t52757* \
               t52759*(4.4E1/3.0)-ccab2*gamma_aa[index]*t52901*t52760*t52905*t52757*t52758*(1.6E1/3.0)+ccab4*gamma_aa[index]* \
               t52903*t52765*t52784*t52758*t52759*(1.76E2/9.0)+ccab3*gcab*t52782*t52863*t52757*t52758*t52898*(3.2E1/ \
               3.0)+ccab1*gcab*1.0/(t52773*t52773*t52773)*t52863*t52757*t52758*t52898*(3.2E1/9.0)-ccab3*gcab*t52902* \
               t52757*t52758*t52759*(gamma_aa[index]*gcab*t52903*(4.4E1/3.0)+t52863*t52757*t52898*(3.2E1/3.0)+gamma_aa[index]* \
               t52903*t52757*t52758*(8.8E1/3.0)+gamma_aa[index]*gcab*t52903*t52757*t52759*(4.4E1/3.0)+gcab*t52863* \
               t52757*t52758*t52898*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t52902*t52760*t52909*t52757*t52759*8.0- \
               ccab4*gamma_aa[index]*t52760*t52904*t52765*t52758*t52759*t52896*(3.2E1/3.0))+t52911*t52955*2.0-t52934* \
               t52998*2.0+(t52683+t52890+t52891+rho_a[index]*(t52860-t52749+t52753*t52659*(t52749+t52859-t52842*t52843* \
               t52756*t52837-a1p*c*c0p*t52750*t52726*(2.0/3.0)))+t52634*(t52694-a1p*c*c0p*t52672*t52646*(2.0/3.0) \
               +t52713*t52681*t52673*t52684*t52659-t52673*t52684*t52659*t52695*t52678*4.0-t52681*t52684*t52659*t52678* \
               t52796+t52653*t52654*t52681*t52673*t52659*t52678*4.0+Aa*t52713*t52706*t52715*t52708*t52659*t52696* \
               2.0-Aa*t52706*t52708*t52819*t52659*t52678*t52696*2.0+t52715*t52708*t52834*t52827*t52829*t52659*t52678* \
               t52696-Aa*a1a*c*t52706*t52715*t52646*t52659*t52678*t52696*(2.0/3.0))-c0p*t52741*t52750*2.0-t52753* \
               t52871*t52659)*(ccab1*gamma_aa[index]*gcab*t52760*t52783*(4.0/3.0)-ccab2*t52901*t52905*t52757*t52759- \
               ccab4*t52904*t52765*t52766*t52896+ccab2*gamma_aa[index]*t52760*t52781*t52757*t52758*(8.0/3.0)-ccab1* \
               gamma_aa[index]*t52760*t52757*t52758*t52897*(4.0/3.0)+ccab3*gamma_aa[index]*gcab*t52760*t52782*t52757* \
               t52759*4.0+ccab4*gamma_aa[index]*t52760*t52765*t52784*t52758*t52759*(1.6E1/3.0)-ccab3*gcab*t52902* \
               t52909*t52757*t52758*t52759)*2.0+(ccab0+ccab1*gcab*t52783*t52758+ccab2*t52781*t52757*t52759+ccab4* \
               t52765*t52766*t52784+ccab3*gcab*t52782*t52757*t52758*t52759)*(t52634*(-t52816-t52808+t52836+t52810* \
               t52811*t52652*t52647*t52799*(1.0/2.0)+t52713*t52673*t52684*t52659*t52695*8.0-t52681*t52673*t52826* \
               t52684*t52659+t52713*t52681*t52684*t52659*t52796*2.0-t52654*t52681*t52673*t52659*t52678*1.2E1-t52673* \
               t52817*t52684*t52659*t52678*2.0E1-t52684*t52659*t52695*t52678*t52796*8.0+t52681*t52684*t52659*t52678* \
               (t52816+t52808-t52836-t52671*1.0/(t52665*t52665*t52665)*t52809*t52788*2.0+t52671*t52788*t52789*(b2f* \
               c*t52785*(4.0/9.0)+b4f*t52641*t52786*(1.0E1/9.0)+b1f*c*t52686*t52785*(2.0/9.0)+b3f*c*t52637*t52785* \
               (2.0/3.0)-b1f*t52800*t52641*t52786*(1.0/3.6E1)+b3f*t52641*t52686*t52786*(1.0/1.2E1))+t52660*t52671* \
               1.0/(t52665*t52665*t52665*t52665)*t52809*1.0/(t52668*t52668)*(1.0/2.0)-a1f*c*c0f*t52785*t52669*(8.0/ \
               9.0)-t52810*t52811*t52652*t52647*t52799*(1.0/2.0)+a1f*c*t52646*t52794*t52788*t52789*(2.0/3.0)-a1p* \
               c*t52646*t52693*t52687*t52688*(2.0/3.0))-t52713*t52653*t52654*t52681*t52673*t52659*8.0+t52653*t52654* \
               t52673*t52659*t52695*t52678*3.2E1+t52653*t52654*t52681*t52659*t52678*t52796*8.0+a1p*c*t52646*t52693* \
               t52687*t52688*(2.0/3.0)+Aa*t52713*t52706*t52708*t52819*t52659*t52696*4.0-Aa*t52706*t52715*t52708*t52826* \
               t52659*t52696*2.0-Aa*t52706*t52708*t52659*t52678*t52696*(t52654*t52681*1.2E1+t52817*t52684*2.0E1-t52653* \
               t52654*t52695*3.2E1)*2.0-t52713*t52715*t52708*t52834*t52827*t52829*t52659*t52696*2.0+t52708*t52834* \
               t52827*t52819*t52829*t52659*t52678*t52696*2.0-1.0/(t52702*t52702*t52702)*t52715*t52708*t52835*t52827* \
               t52659*t52678*t52696*2.0+t52715*t52708*t52827*t52829*t52659*t52678*t52696*(b2a*c*t52785*(4.0/9.0)+ \
               b4a*t52641*t52786*(1.0E1/9.0)+b1a*c*t52686*t52785*(2.0/9.0)+b3a*c*t52637*t52785*(2.0/3.0)-b1a*t52800* \
               t52641*t52786*(1.0/3.6E1)+b3a*t52641*t52686*t52786*(1.0/1.2E1))+Aa*a1a*c*t52713*t52706*t52715*t52646* \
               t52659*t52696*(4.0/3.0)-Aa*a1a*c*t52706*t52715*t52659*t52785*t52678*t52696*(8.0/9.0)-Aa*a1a*c*t52706* \
               t52646*t52819*t52659*t52678*t52696*(4.0/3.0)+1.0/(t52702*t52702*t52702*t52702)*1.0/(t52705*t52705) \
               *t52715*t52708*t52835*t52659*t52678*t52696*t52697*(1.0/2.0)+a1a*c*t52715*t52834*t52646*t52827*t52829* \
               t52659*t52678*t52696*(2.0/3.0))-rho_a[index]*(-t52849-t52858+t53012+t53014+t53008+t52753*t52659*(t52849+ \
               t52858+t53011+t53013+t53006-t52741*t52742*t52743*t52855-t52756*t52837*t52846*t52999*2.0-a1f*c*c0f* \
               t52754*t52844*(8.0/9.0)-t52741*t52647*t52847*t52856*t52857*(1.0/2.0)-a1p*c*t52742*t52743*t52726*t52748* \
               (2.0/3.0)))+t52753*t52862*t52659*2.0+t52741*t52742*t52743*t52748*2.0-t52652*t52693*t52687*t52688*2.0- \
               a1p*c*c0p*t52750*t52726*(4.0/3.0)+a1p*c*c0p*t52672*t52646*(4.0/3.0)-t52713*t52681*t52673*t52684*t52659* \
               2.0+t52673*t52684*t52659*t52695*t52678*8.0+t52681*t52684*t52659*t52678*t52796*2.0-t52653*t52654*t52681* \
               t52673*t52659*t52678*8.0-Aa*t52713*t52706*t52715*t52708*t52659*t52696*4.0+Aa*t52706*t52708*t52819* \
               t52659*t52678*t52696*4.0-t52715*t52708*t52834*t52827*t52829*t52659*t52678*t52696*2.0+Aa*a1a*c*t52706* \
               t52715*t52646*t52659*t52678*t52696*(4.0/3.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx* \
               t52760*t52990*(8.0/3.0)-cx1*t52930*t52863*t52956*t52993*(8.0/3.0)+cx2*t52930*t52863*t52956*t52992* \
               (1.6E1/3.0)+cx4*t52932*t52865*t52957*t52989*(3.2E1/3.0)-cx2*t52863*t52956*t52967*t52869*t52988-cx4* \
               t52961*t52865*t52867*t52957*t52985+cx3*gamma_aa[index]*gx*t52931*t52863*t52991*t52956*8.0-cx3*gamma_aa[index]* \
               gx*t52863*t52956*t52975*t52868*t52979)*(8.0/3.0)-rho_a[index]*t52911*(ccaa1*gamma_aa[index]*gcaa*t52920* \
               t52903*(8.8E1/9.0)+ccaa4*t52917*t52865*t52866*t52984*(1.12E3/9.0)-ccaa1*t52863*t52864*t52939*t52898* \
               2.4E1+ccaa2*t52863*t52864*t52929*t52898*(3.04E2/9.0)-ccaa2*t52930*t52863*t52953*t52864*t52954*(3.2E1/ \
               3.0)-ccaa4*t52932*t52950*t52865*t52866*t52949*(6.4E1/3.0)-ccaa2*t52863*t52864*t52954*t52869*(gamma_aa[index]* \
               gcaa*t52903*(1.76E2/9.0)+t52863*t52864*t52898*(3.04E2/9.0))-ccaa4*t52950*t52865*t52866*t52867*(gamma_aa[index]* \
               gcaa*t52903*(3.52E2/9.0)+t52863*t52864*t52898*(6.08E2/3.0)+t52865*t52866*t52984*(1.12E3/9.0)+gamma_aa[index]* \
               gcaa*t52863*t52864*t52958*2.88E2)+ccaa2*t52863*(t52953*t52953)*t52864*1.0/(t52928*t52928*t52928)*t52869* \
               2.0+ccaa4*1.0/(t52916*t52916*t52916)*t52865*t52866*t52867*(t52949*t52949)*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t52925*t52863*t52864*t52958*7.2E1+ccaa1*gamma_aa[index]*gcaa*t52863*t52864*1.0/(t52919*t52919* \
               t52919)*t52958*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t52924*t52924*t52924)*(t52943*t52943)* \
               t52863*t52864*t52868*2.0-ccaa3*gamma_aa[index]*gcaa*t52863*t52944*t52864*t52868*(gamma_aa[index]*gcaa* \
               t52903*(8.8E1/3.0)+t52863*t52864*t52898*(3.04E2/3.0)+gamma_aa[index]*gcaa*t52863*t52864*t52958*7.2E1) \
               -ccaa3*gamma_aa[index]*gcaa*t52931*t52943*t52863*t52944*t52864*1.6E1)+rho_a[index]*t52998*(-t52849- \
               t52858+t53012+t53014+t53008+t52753*t52659*(t52849+t52858+t53011-t53012+t53013-t53014+t53006-t53008- \
               t52756*t52837*t52846*t52999*2.0-a1f*c*c0f*t52754*t52844*(8.0/9.0)))+rho_a[index]*t52934*t52955*2.0+ \
               c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t52903*t52990*(8.8E1/9.0)-cx1*t52863*t52956*t52993* \
               t52898*2.4E1+cx2*t52863*t52956*t52992*t52898*(3.04E2/9.0)+cx4*t52865*t52957*t52984*t52989*(1.12E3/ \
               9.0)-cx2*t52930*t52863*t52956*t52967*t52988*(3.2E1/3.0)-cx4*t52932*t52961*t52865*t52957*t52985*(6.4E1/ \
               3.0)-cx2*t52863*t52956*t52869*t52988*(gamma_aa[index]*gx*t52903*(1.76E2/9.0)+t52863*t52956*t52898* \
               (3.04E2/9.0))-cx4*t52865*t52867*t52957*t52985*(gamma_aa[index]*gx*t52903*(3.52E2/9.0)+t52865*t52957* \
               t52984*(1.12E3/9.0)+t52863*t52956*t52898*(6.08E2/3.0)+gamma_aa[index]*gx*t52863*t52956*t52958*2.88E2) \
               +cx2*1.0/(t52970*t52970*t52970)*t52863*t52956*(t52967*t52967)*t52869*2.0+cx4*(t52961*t52961)*t52865* \
               t52867*t52957*1.0/(t52966*t52966*t52966)*2.0+cx3*gamma_aa[index]*gx*t52863*t52991*t52956*t52958*7.2E1+ \
               cx1*gamma_aa[index]*gx*1.0/(t52960*t52960*t52960)*t52863*t52956*t52958*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*t52863*t52956*1.0/(t52974*t52974*t52974)*t52868*(t52979*t52979)*2.0-cx3*gamma_aa[index]*gx*t52863* \
               t52956*t52975*t52868*(gamma_aa[index]*gx*t52903*(8.8E1/3.0)+t52863*t52956*t52898*(3.04E2/3.0)+gamma_aa[index]* \
               gx*t52863*t52956*t52958*7.2E1)-cx3*gamma_aa[index]*gx*t52931*t52863*t52956*t52975*t52979*1.6E1)+c0* \
               t52722*(cx0+cx1*gamma_aa[index]*gx*t52761*t52990+cx2*t52863*t52956*t52992*t52869+cx4*t52865*t52867* \
               t52957*t52989+cx3*gamma_aa[index]*gx*t52863*t52991*t52956*t52868)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            double t56084 = 1.0/pow(rho_a[index],1.0/3.0);
            double t56085 = c*t56084;
            double t56086 = sqrt(t56085);
            double t56087 = b1f*t56086;
            double t56088 = pow(t56085,3.0/2.0);
            double t56089 = b3f*t56088;
            double t56090 = c*c;
            double t56091 = 1.0/pow(rho_a[index],2.0/3.0);
            double t56092 = b4f*t56090*t56091;
            double t56093 = b2f*c*t56084;
            double t56094 = t56092+t56093+t56087+t56089;
            double t56095 = 1.0/pow(rho_a[index],4.0/3.0);
            double t56096 = b1p*t56086;
            double t56097 = b3p*t56088;
            double t56098 = b4p*t56090*t56091;
            double t56099 = b2p*c*t56084;
            double t56100 = t56096+t56097+t56098+t56099;
            double t56101 = 1.0/pow(rho_a[index],5.0/3.0);
            double t56102 = 1.0/sqrt(t56085);
            double t56103 = 1.0/c0f;
            double t56104 = 1.0/t56094;
            double t56105 = t56103*t56104*(1.0/2.0);
            double t56106 = t56105+1.0;
            double t56107 = 1.0/c0p;
            double t56108 = 1.0/t56100;
            double t56109 = t56107*t56108*(1.0/2.0);
            double t56110 = t56109+1.0;
            double t56111 = a1p*c*t56084;
            double t56112 = t56111+1.0;
            double t56113 = 1.0/t56110;
            double t56114 = 1.0/(t56100*t56100);
            double t56115 = b4p*t56101*t56090*(2.0/3.0);
            double t56116 = b2p*c*t56095*(1.0/3.0);
            double t56117 = b1p*c*t56102*t56095*(1.0/6.0);
            double t56118 = b3p*c*t56086*t56095*(1.0/2.0);
            double t56119 = t56115+t56116+t56117+t56118;
            double t56120 = t56112*t56113*t56114*t56119;
            double t56121 = log(t56110);
            double t56122 = gamma_aa[index]*gamma_aa[index];
            double t56123 = gcaa*gcaa;
            double t56124 = t56122*t56122;
            double t56125 = t56123*t56123;
            double t56126 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t56127 = 1.0/pow(rho_a[index],8.0/3.0);
            double t56128 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t56129 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t56130 = pow(2.0,1.0/3.0);
            double t56131 = t56130*2.0;
            double t56132 = t56131-2.0;
            double t56133 = two_13*2.0;
            double t56134 = t56133-2.0;
            double t56135 = 1.0/t56134;
            double t56136 = log(t56106);
            double t56137 = a1f*c*t56084;
            double t56138 = t56137+1.0;
            double t56139 = gamma_aa[index]*gcaa*t56127*4.0;
            double t56140 = gamma_aa[index]*gcaa*t56122*t56123*t56128*4.0;
            double t56141 = t56122*t56123*t56129*6.0;
            double t56142 = t56124*t56125*t56126;
            double t56143 = t56140+t56141+t56142+t56139+1.0;
            double t56144 = 1.0/t56143;
            double t56145 = gamma_aa[index]*gcaa*t56127;
            double t56146 = t56145+1.0;
            double t56147 = 1.0/t56146;
            double t56148 = gamma_aa[index]*gcaa*t56127*3.0;
            double t56149 = gamma_aa[index]*gcaa*t56122*t56123*t56128;
            double t56150 = t56122*t56123*t56129*3.0;
            double t56151 = t56150+t56148+t56149+1.0;
            double t56152 = 1.0/t56151;
            double t56153 = gamma_aa[index]*gcaa*t56127*2.0;
            double t56154 = t56122*t56123*t56129;
            double t56155 = t56153+t56154+1.0;
            double t56156 = 1.0/t56155;
            double t56157 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t56158 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t56159 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t56160 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t56161 = 1.0/t56106;
            double t56162 = 1.0/(t56094*t56094);
            double t56163 = b4f*t56101*t56090*(2.0/3.0);
            double t56164 = b2f*c*t56095*(1.0/3.0);
            double t56165 = b1f*c*t56102*t56095*(1.0/6.0);
            double t56166 = b3f*c*t56086*t56095*(1.0/2.0);
            double t56167 = t56163+t56164+t56165+t56166;
            double t56168 = a1f*c*c0f*t56136*t56095*(2.0/3.0);
            double t56169 = a1p*c*c0p*t56121*t56095*(2.0/3.0);
            double t56170 = ccaa4*t56124*t56160*t56125*t56144*(3.2E1/3.0);
            double t56171 = ccaa1*gamma_aa[index]*gcaa*t56147*t56158*(8.0/3.0);
            double t56172 = ccaa3*gamma_aa[index]*gcaa*t56122*t56123*t56152*t56159*8.0;
            double t56173 = ccaa2*t56122*t56123*t56156*t56157*(1.6E1/3.0);
            double t56174 = 1.0/(t56146*t56146);
            double t56175 = gamma_aa[index]*gcaa*t56158*8.0;
            double t56176 = gamma_aa[index]*gcaa*t56122*t56123*t56159*8.0;
            double t56177 = t56122*t56123*t56157*1.6E1;
            double t56178 = t56175+t56176+t56177;
            double t56179 = 1.0/(t56151*t56151);
            double t56180 = gamma_aa[index]*gcaa*t56158*(3.2E1/3.0);
            double t56181 = gamma_aa[index]*gcaa*t56122*t56123*t56159*3.2E1;
            double t56182 = t56122*t56123*t56157*3.2E1;
            double t56183 = t56124*t56160*t56125*(3.2E1/3.0);
            double t56184 = t56180+t56181+t56182+t56183;
            double t56185 = 1.0/(t56143*t56143);
            double t56186 = gamma_aa[index]*gcaa*t56158*(1.6E1/3.0);
            double t56187 = t56122*t56123*t56157*(1.6E1/3.0);
            double t56188 = t56186+t56187;
            double t56189 = 1.0/(t56155*t56155);
            double t56190 = t56170+t56171+t56172+t56173-ccaa1*t56122*t56123*t56174*t56157*(8.0/3.0)-ccaa4*t56124* \
               t56125*t56126*t56184*t56185-ccaa2*t56122*t56123*t56129*t56188*t56189-ccaa3*gamma_aa[index]*gcaa*t56122* \
               t56123*t56128*t56178*t56179;
            double t56191 = gx*gx;
            double t56192 = t56191*t56191;
            double t56193 = 1.0/pow(rho_a[index],1.0E1);
            double t56194 = gamma_aa[index]*gx*t56127;
            double t56195 = t56194+1.0;
            double t56196 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t56217 = gamma_aa[index]*gx*t56158*(3.2E1/3.0);
            double t56218 = gamma_aa[index]*gx*t56122*t56191*t56159*3.2E1;
            double t56219 = t56122*t56191*t56157*3.2E1;
            double t56220 = t56124*t56160*t56192*(3.2E1/3.0);
            double t56197 = t56220+t56217+t56218+t56219;
            double t56198 = gamma_aa[index]*gx*t56127*4.0;
            double t56199 = gamma_aa[index]*gx*t56122*t56128*t56191*4.0;
            double t56200 = t56122*t56191*t56129*6.0;
            double t56201 = t56124*t56126*t56192;
            double t56202 = t56200+t56201+t56198+t56199+1.0;
            double t56223 = gamma_aa[index]*gx*t56158*(1.6E1/3.0);
            double t56224 = t56122*t56191*t56157*(1.6E1/3.0);
            double t56203 = t56223+t56224;
            double t56204 = gamma_aa[index]*gx*t56127*2.0;
            double t56205 = t56122*t56191*t56129;
            double t56206 = t56204+t56205+1.0;
            double t56207 = gamma_aa[index]*gx*t56127*3.0;
            double t56208 = gamma_aa[index]*gx*t56122*t56128*t56191;
            double t56209 = t56122*t56191*t56129*3.0;
            double t56210 = t56207+t56208+t56209+1.0;
            double t56211 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t56212 = 1.0/(t56210*t56210);
            double t56213 = gamma_aa[index]*gx*t56158*8.0;
            double t56214 = gamma_aa[index]*gx*t56122*t56191*t56159*8.0;
            double t56215 = t56122*t56191*t56157*1.6E1;
            double t56216 = t56213+t56214+t56215;
            double t56221 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t56222 = 1.0/(t56202*t56202);
            double t56225 = 1.0/(t56206*t56206);
            double t56226 = 1.0/t56202;
            double t56227 = 1.0/t56195;
            double t56228 = 1.0/t56210;
            double t56229 = 1.0/t56206;
            double t56230 = c0f*t56136*t56138*2.0;
            double t56231 = c0p*t56112*t56121*2.0;
            double t56232 = 1.0/(t56195*t56195);
            double t56233 = ccaa4*t56124*t56125*t56126*t56144;
            double t56234 = ccaa1*gamma_aa[index]*gcaa*t56127*t56147;
            double t56235 = ccaa3*gamma_aa[index]*gcaa*t56122*t56123*t56152*t56128;
            double t56236 = ccaa2*t56122*t56123*t56129*t56156;
            double t56237 = ccaa0+t56233+t56234+t56235+t56236;
            double t56238 = 1.0/pow(rho_a[index],7.0/3.0);
            double t56239 = 1.0/pow(t56085,3.0/2.0);
            double t56240 = t56167*t56167;
            double t56241 = t56119*t56119;
            double t56242 = 1.0/(t56100*t56100*t56100);
            double t56243 = t56112*t56113*t56241*t56242*2.0;
            double t56244 = b4p*t56090*t56127*(1.0E1/9.0);
            double t56245 = b2p*c*t56238*(4.0/9.0);
            double t56246 = b3p*t56102*t56090*t56127*(1.0/1.2E1);
            double t56247 = b1p*c*t56102*t56238*(2.0/9.0);
            double t56248 = b3p*c*t56238*t56086*(2.0/3.0);
            double t56249 = t56244+t56245+t56246+t56247+t56248-b1p*t56090*t56127*t56239*(1.0/3.6E1);
            double t56250 = 1.0/(t56110*t56110);
            double t56251 = 1.0/(t56100*t56100*t56100*t56100);
            double t56252 = a1p*c*c0p*t56121*t56238*(8.0/9.0);
            v_rho_a_rho_a_[index] = t56190*(t56231+t56132*t56135*(t56230-c0p*t56112*t56121*2.0))*2.0+t56237*(- \
               t56120+t56169+t56132*t56135*(t56120+t56168-t56161*t56162*t56138*t56167-a1p*c*c0p*t56121*t56095*(2.0/ \
               3.0)))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t56227*t56158*(8.0/3.0)-cx1*t56122* \
               t56232*t56191*t56157*(8.0/3.0)+cx2*t56122*t56191*t56157*t56229*(1.6E1/3.0)+cx4*t56124*t56160*t56226* \
               t56192*(3.2E1/3.0)-cx2*t56122*t56203*t56225*t56191*t56129-cx4*t56222*t56124*t56126*t56192*t56197+cx3* \
               gamma_aa[index]*gx*t56122*t56191*t56228*t56159*8.0-cx3*gamma_aa[index]*gx*t56122*t56212*t56216*t56128* \
               t56191)*(8.0/3.0)+rho_a[index]*t56237*(-t56243-t56252+t56132*t56135*(t56243+t56252-t56112*t56113*t56114* \
               t56249-t56240*t56161*t56138*1.0/(t56094*t56094*t56094)*2.0+t56161*t56162*t56138*(b2f*c*t56238*(4.0/ \
               9.0)+b4f*t56090*t56127*(1.0E1/9.0)+b1f*c*t56102*t56238*(2.0/9.0)+b3f*c*t56238*t56086*(2.0/3.0)-b1f* \
               t56090*t56127*t56239*(1.0/3.6E1)+b3f*t56102*t56090*t56127*(1.0/1.2E1))+t56103*t56240*1.0/(t56106*t56106) \
               *t56138*1.0/(t56094*t56094*t56094*t56094)*(1.0/2.0)-a1f*c*c0f*t56136*t56238*(8.0/9.0)-t56112*t56241* \
               t56250*t56107*t56251*(1.0/2.0)+a1f*c*t56161*t56162*t56095*t56167*(2.0/3.0)-a1p*c*t56113*t56114*t56119* \
               t56095*(2.0/3.0))+t56112*t56113*t56114*t56249+t56112*t56241*t56250*t56107*t56251*(1.0/2.0)+a1p*c*t56113* \
               t56114*t56119*t56095*(2.0/3.0))-rho_a[index]*t56190*(-t56120+t56169+t56132*t56135*(t56120+t56168-t56169- \
               t56161*t56162*t56138*t56167))*2.0-rho_a[index]*(t56231+t56132*t56135*(t56230-t56231))*(ccaa1*gamma_aa[index]* \
               gcaa*t56211*t56147*(8.8E1/9.0)+ccaa4*t56221*t56124*t56125*t56144*(1.12E3/9.0)-ccaa1*t56122*t56123* \
               t56174*t56196*2.4E1+ccaa2*t56122*t56123*t56156*t56196*(3.04E2/9.0)-ccaa4*t56124*t56160*t56125*t56184* \
               t56185*(6.4E1/3.0)-ccaa2*t56122*t56123*t56157*t56188*t56189*(3.2E1/3.0)-ccaa2*t56122*t56123*t56129* \
               t56189*(gamma_aa[index]*gcaa*t56211*(1.76E2/9.0)+t56122*t56123*t56196*(3.04E2/9.0))-ccaa4*t56124*t56125* \
               t56126*t56185*(gamma_aa[index]*gcaa*t56211*(3.52E2/9.0)+t56221*t56124*t56125*(1.12E3/9.0)+t56122*t56123* \
               t56196*(6.08E2/3.0)+gamma_aa[index]*gcaa*t56122*t56123*t56193*2.88E2)+ccaa4*t56124*t56125*1.0/(t56143* \
               t56143*t56143)*t56126*(t56184*t56184)*2.0+ccaa2*t56122*t56123*1.0/(t56155*t56155*t56155)*t56129*(t56188* \
               t56188)*2.0+ccaa3*gamma_aa[index]*gcaa*t56122*t56123*t56152*t56193*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t56122*t56123*1.0/(t56146*t56146*t56146)*t56193*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t56122*t56123* \
               1.0/(t56151*t56151*t56151)*t56128*(t56178*t56178)*2.0-ccaa3*gamma_aa[index]*gcaa*t56122*t56123*t56128* \
               t56179*(gamma_aa[index]*gcaa*t56211*(8.8E1/3.0)+t56122*t56123*t56196*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t56122*t56123*t56193*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t56122*t56123*t56159*t56178*t56179*1.6E1) \
               +c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t56211*t56227*(8.8E1/9.0)-cx1*t56122*t56232* \
               t56191*t56196*2.4E1+cx2*t56122*t56191*t56229*t56196*(3.04E2/9.0)+cx4*t56221*t56124*t56226*t56192*(1.12E3/ \
               9.0)-cx2*t56122*t56203*t56225*t56191*t56157*(3.2E1/3.0)-cx4*t56222*t56124*t56160*t56192*t56197*(6.4E1/ \
               3.0)-cx2*t56122*t56225*t56191*t56129*(gamma_aa[index]*gx*t56211*(1.76E2/9.0)+t56122*t56191*t56196* \
               (3.04E2/9.0))-cx4*t56222*t56124*t56126*t56192*(gamma_aa[index]*gx*t56211*(3.52E2/9.0)+t56221*t56124* \
               t56192*(1.12E3/9.0)+t56122*t56191*t56196*(6.08E2/3.0)+gamma_aa[index]*gx*t56122*t56191*t56193*2.88E2) \
               +cx2*t56122*(t56203*t56203)*1.0/(t56206*t56206*t56206)*t56191*t56129*2.0+cx4*1.0/(t56202*t56202*t56202) \
               *t56124*t56126*t56192*(t56197*t56197)*2.0+cx3*gamma_aa[index]*gx*t56122*t56191*t56228*t56193*7.2E1+ \
               cx1*gamma_aa[index]*gx*t56122*t56191*t56193*1.0/(t56195*t56195*t56195)*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*1.0/(t56210*t56210*t56210)*t56122*(t56216*t56216)*t56128*t56191*2.0-cx3*gamma_aa[index]*gx*t56122* \
               t56212*t56128*t56191*(gamma_aa[index]*gx*t56211*(8.8E1/3.0)+t56122*t56191*t56196*(3.04E2/3.0)+gamma_aa[index]* \
               gx*t56122*t56191*t56193*7.2E1)-cx3*gamma_aa[index]*gx*t56122*t56212*t56216*t56191*t56159*1.6E1)+c0* \
               t56091*(cx0+cx1*gamma_aa[index]*gx*t56127*t56227+cx2*t56122*t56191*t56129*t56229+cx4*t56124*t56126* \
               t56226*t56192+cx3*gamma_aa[index]*gx*t56122*t56128*t56191*t56228)*(4.0/9.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t53016 = rho_a[index]+rho_b[index];
            double t53017 = 1.0/pow(t53016,1.0/3.0);
            double t53018 = c*t53017;
            double t53019 = sqrt(t53018);
            double t53020 = b1p*t53019;
            double t53021 = pow(t53018,3.0/2.0);
            double t53022 = b3p*t53021;
            double t53023 = c*c;
            double t53024 = 1.0/pow(t53016,2.0/3.0);
            double t53025 = b4p*t53023*t53024;
            double t53026 = b2p*c*t53017;
            double t53027 = t53020+t53022+t53025+t53026;
            double t53028 = 1.0/pow(t53016,4.0/3.0);
            double t53029 = 1.0/c0p;
            double t53030 = 1.0/t53027;
            double t53031 = t53030*t53029*(1.0/2.0);
            double t53032 = t53031+1.0;
            double t53033 = a1p*c*t53017;
            double t53034 = t53033+1.0;
            double t53035 = rho_a[index]-rho_b[index];
            double t53036 = t53035*t53035;
            double t53037 = 1.0/t53016;
            double t53038 = t53035*t53037;
            double t53039 = two_13*2.0;
            double t53040 = t53039-2.0;
            double t53041 = 1.0/t53040;
            double t53042 = 1.0/c0f;
            double t53043 = b1f*t53019;
            double t53044 = b3f*t53021;
            double t53045 = b4f*t53023*t53024;
            double t53046 = b2f*c*t53017;
            double t53047 = t53043+t53044+t53045+t53046;
            double t53048 = 1.0/t53047;
            double t53049 = t53042*t53048*(1.0/2.0);
            double t53050 = t53049+1.0;
            double t53051 = log(t53050);
            double t53052 = a1f*c*t53017;
            double t53053 = t53052+1.0;
            double t53054 = log(t53032);
            double t53064 = c0f*t53051*t53053*2.0;
            double t53065 = c0p*t53034*t53054*2.0;
            double t53055 = t53064-t53065;
            double t53056 = t53038+1.0;
            double t53057 = pow(t53056,4.0/3.0);
            double t53058 = -t53038+1.0;
            double t53059 = pow(t53058,4.0/3.0);
            double t53060 = t53057+t53059-2.0;
            double t53061 = 1.0/(t53016*t53016);
            double t53092 = t53061*t53035;
            double t53062 = t53037-t53092;
            double t53063 = 1.0/(t53016*t53016*t53016*t53016);
            double t53066 = t53036*t53036;
            double t53067 = 1.0/pow(t53016,5.0/3.0);
            double t53068 = 1.0/sqrt(t53018);
            double t53069 = 1.0/t53032;
            double t53070 = 1.0/(t53027*t53027);
            double t53071 = b4p*t53023*t53067*(2.0/3.0);
            double t53072 = b2p*c*t53028*(1.0/3.0);
            double t53073 = b1p*c*t53028*t53068*(1.0/6.0);
            double t53074 = b3p*c*t53019*t53028*(1.0/2.0);
            double t53075 = t53071+t53072+t53073+t53074;
            double t53076 = t53034*t53070*t53075*t53069;
            double t53077 = 1.0/(t53016*t53016*t53016*t53016*t53016);
            double t53078 = 1.0/d2fz0;
            double t53079 = 1.0/Aa;
            double t53080 = b1a*t53019;
            double t53081 = b3a*t53021;
            double t53082 = b4a*t53023*t53024;
            double t53083 = b2a*c*t53017;
            double t53084 = t53080+t53081+t53082+t53083;
            double t53085 = 1.0/t53084;
            double t53086 = t53085*t53079*(1.0/2.0);
            double t53087 = t53086+1.0;
            double t53088 = log(t53087);
            double t53089 = a1a*c*t53017;
            double t53090 = t53089+1.0;
            double t53091 = pow(t53056,1.0/3.0);
            double t53093 = t53062*t53091*(4.0/3.0);
            double t53094 = pow(t53058,1.0/3.0);
            double t53238 = t53062*t53094*(4.0/3.0);
            double t53095 = t53093-t53238;
            double t53096 = t53063*t53066;
            double t53097 = t53096-1.0;
            double t53098 = 1.0/pow(rho_a[index],1.0/3.0);
            double t53099 = c*t53098;
            double t53100 = sqrt(t53099);
            double t53101 = b1f*t53100;
            double t53102 = pow(t53099,3.0/2.0);
            double t53103 = b3f*t53102;
            double t53104 = 1.0/pow(rho_a[index],2.0/3.0);
            double t53105 = b4f*t53023*t53104;
            double t53106 = b2f*c*t53098;
            double t53107 = t53101+t53103+t53105+t53106;
            double t53108 = 1.0/pow(rho_a[index],4.0/3.0);
            double t53109 = b1p*t53100;
            double t53110 = b3p*t53102;
            double t53111 = b4p*t53023*t53104;
            double t53112 = b2p*c*t53098;
            double t53113 = t53110+t53111+t53112+t53109;
            double t53114 = 1.0/pow(rho_a[index],5.0/3.0);
            double t53115 = 1.0/sqrt(t53099);
            double t53116 = 1.0/t53107;
            double t53117 = t53042*t53116*(1.0/2.0);
            double t53118 = t53117+1.0;
            double t53119 = 1.0/t53113;
            double t53120 = t53029*t53119*(1.0/2.0);
            double t53121 = t53120+1.0;
            double t53122 = a1p*c*t53098;
            double t53123 = t53122+1.0;
            double t53124 = 1.0/t53121;
            double t53125 = 1.0/(t53113*t53113);
            double t53126 = b4p*t53023*t53114*(2.0/3.0);
            double t53127 = b2p*c*t53108*(1.0/3.0);
            double t53128 = b1p*c*t53115*t53108*(1.0/6.0);
            double t53129 = b3p*c*t53100*t53108*(1.0/2.0);
            double t53130 = t53126+t53127+t53128+t53129;
            double t53131 = t53130*t53123*t53124*t53125;
            double t53132 = log(t53121);
            double t53133 = pow(2.0,1.0/3.0);
            double t53134 = t53133*2.0;
            double t53135 = t53134-2.0;
            double t53136 = log(t53118);
            double t53137 = a1f*c*t53098;
            double t53138 = t53137+1.0;
            double t53139 = gcab*gcab;
            double t53143 = 1.0/pow(rho_a[index],8.0/3.0);
            double t53144 = gamma_aa[index]*t53143*(1.0/2.0);
            double t53145 = 1.0/pow(rho_b[index],8.0/3.0);
            double t53146 = gamma_bb[index]*t53145*(1.0/2.0);
            double t53140 = t53144+t53146;
            double t53141 = t53140*t53140;
            double t53142 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t53147 = t53139*t53139;
            double t53148 = t53141*t53141;
            double t53149 = t53141*t53139*6.0;
            double t53150 = gcab*t53140*t53141*t53139*4.0;
            double t53151 = t53147*t53148;
            double t53152 = gcab*t53140*4.0;
            double t53153 = t53150+t53151+t53152+t53149+1.0;
            double t53154 = gcab*t53140;
            double t53155 = t53154+1.0;
            double t53156 = t53141*t53139;
            double t53157 = gcab*t53140*2.0;
            double t53158 = t53156+t53157+1.0;
            double t53159 = t53141*t53139*3.0;
            double t53160 = gcab*t53140*t53141*t53139;
            double t53161 = gcab*t53140*3.0;
            double t53162 = t53160+t53161+t53159+1.0;
            double t53163 = t53041*t53060*t53035*t53036*t53063*t53055*4.0;
            double t53164 = t53037+t53092;
            double t53165 = 1.0/t53050;
            double t53166 = 1.0/(t53047*t53047);
            double t53167 = b4f*t53023*t53067*(2.0/3.0);
            double t53168 = b2f*c*t53028*(1.0/3.0);
            double t53169 = b1f*c*t53028*t53068*(1.0/6.0);
            double t53170 = b3f*c*t53019*t53028*(1.0/2.0);
            double t53171 = t53170+t53167+t53168+t53169;
            double t53172 = a1f*c*c0f*t53051*t53028*(2.0/3.0);
            double t53173 = t53066*t53077*4.0;
            double t53174 = t53091*t53164*(4.0/3.0);
            double t53237 = t53164*t53094*(4.0/3.0);
            double t53175 = t53174-t53237;
            double t53176 = 1.0/t53087;
            double t53177 = 1.0/(t53084*t53084);
            double t53178 = b4a*t53023*t53067*(2.0/3.0);
            double t53179 = b2a*c*t53028*(1.0/3.0);
            double t53180 = b1a*c*t53028*t53068*(1.0/6.0);
            double t53181 = b3a*c*t53019*t53028*(1.0/2.0);
            double t53182 = t53180+t53181+t53178+t53179;
            double t53183 = t53041*t53060*t53090*t53182*t53176*t53078*t53177*t53097;
            double t53184 = 1.0/pow(rho_b[index],1.0/3.0);
            double t53185 = c*t53184;
            double t53186 = sqrt(t53185);
            double t53187 = b1f*t53186;
            double t53188 = pow(t53185,3.0/2.0);
            double t53189 = b3f*t53188;
            double t53190 = 1.0/pow(rho_b[index],2.0/3.0);
            double t53191 = b4f*t53023*t53190;
            double t53192 = b2f*c*t53184;
            double t53193 = t53191+t53192+t53187+t53189;
            double t53194 = 1.0/pow(rho_b[index],4.0/3.0);
            double t53195 = b1p*t53186;
            double t53196 = b3p*t53188;
            double t53197 = b4p*t53023*t53190;
            double t53198 = b2p*c*t53184;
            double t53199 = t53195+t53196+t53197+t53198;
            double t53200 = 1.0/pow(rho_b[index],5.0/3.0);
            double t53201 = 1.0/sqrt(t53185);
            double t53202 = 1.0/t53193;
            double t53203 = t53202*t53042*(1.0/2.0);
            double t53204 = t53203+1.0;
            double t53205 = 1.0/t53199;
            double t53206 = t53205*t53029*(1.0/2.0);
            double t53207 = t53206+1.0;
            double t53208 = a1p*c*t53184;
            double t53209 = t53208+1.0;
            double t53210 = 1.0/t53207;
            double t53211 = 1.0/(t53199*t53199);
            double t53212 = b4p*t53200*t53023*(2.0/3.0);
            double t53213 = b2p*c*t53194*(1.0/3.0);
            double t53214 = b1p*c*t53201*t53194*(1.0/6.0);
            double t53215 = b3p*c*t53194*t53186*(1.0/2.0);
            double t53216 = t53212+t53213+t53214+t53215;
            double t53217 = t53210*t53211*t53216*t53209;
            double t53218 = log(t53207);
            double t53219 = log(t53204);
            double t53220 = a1f*c*t53184;
            double t53221 = t53220+1.0;
            double t53222 = t53041*t53060*t53063*t53055*t53066;
            double t53223 = Aa*t53041*t53060*t53090*t53078*t53088*t53097*2.0;
            double t53224 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t53225 = 1.0/(t53162*t53162);
            double t53226 = 1.0/t53155;
            double t53227 = 1.0/(t53153*t53153);
            double t53228 = 1.0/(t53158*t53158);
            double t53229 = 1.0/t53153;
            double t53230 = 1.0/(t53155*t53155);
            double t53231 = 1.0/t53158;
            double t53232 = 1.0/t53162;
            double t53234 = a1p*c*c0p*t53054*t53028*(2.0/3.0);
            double t53239 = t53053*t53171*t53165*t53166;
            double t53233 = -t53234+t53172+t53076-t53239;
            double t53235 = 1.0/pow(t53016,7.0/3.0);
            double t53236 = 1.0/pow(t53016,8.0/3.0);
            double t53240 = t53075*t53075;
            double t53241 = 1.0/pow(t53018,3.0/2.0);
            double t53242 = b4p*t53023*t53236*(1.0E1/9.0);
            double t53243 = b2p*c*t53235*(4.0/9.0);
            double t53244 = b1p*c*t53235*t53068*(2.0/9.0);
            double t53245 = b3p*c*t53019*t53235*(2.0/3.0);
            double t53246 = b3p*t53023*t53236*t53068*(1.0/1.2E1);
            double t53247 = t53242+t53243+t53244+t53245+t53246-b1p*t53023*t53241*t53236*(1.0/3.6E1);
            double t53248 = t53034*t53070*t53247*t53069;
            double t53249 = 1.0/(t53027*t53027*t53027);
            double t53250 = t53171*t53171;
            double t53251 = 1.0/(t53032*t53032);
            double t53252 = 1.0/(t53027*t53027*t53027*t53027);
            double t53253 = t53240*t53034*t53251*t53252*t53029*(1.0/2.0);
            double t53254 = t53234-t53172-t53076+t53239;
            double t53255 = 1.0/(t53016*t53016*t53016);
            double t53256 = a1p*c*t53070*t53028*t53075*t53069*(2.0/3.0);
            double t53257 = 1.0/(t53016*t53016*t53016*t53016*t53016*t53016);
            double t53258 = t53035*t53036*t53063*4.0;
            double t53259 = t53173+t53258;
            double t53260 = t53035*t53255*t53094*(8.0/3.0);
            double t53261 = 1.0/pow(t53056,2.0/3.0);
            double t53262 = t53062*t53261*t53164*(4.0/9.0);
            double t53263 = 1.0/pow(t53058,2.0/3.0);
            double t53264 = t53062*t53164*t53263*(4.0/9.0);
            double t53265 = t53260+t53262+t53264-t53035*t53091*t53255*(8.0/3.0);
            double t53266 = t53182*t53182;
            double t53267 = t53173-t53258;
            double t53268 = t53041*t53063*t53055*t53066*t53175;
            double t53269 = t53041*t53063*t53055*t53066*t53095;
            double t53270 = Aa*t53041*t53060*t53090*t53078*t53088*t53259*2.0;
            double t53271 = Aa*t53041*t53090*t53175*t53078*t53088*t53097*2.0;
            double t53272 = Aa*t53041*t53090*t53095*t53078*t53088*t53097*2.0;
            double t53273 = c0f*t53136*t53138*2.0;
            double t53275 = c0p*t53123*t53132*2.0;
            double t53274 = t53273-t53275;
            double t53276 = c0f*t53221*t53219*2.0;
            double t53278 = c0p*t53209*t53218*2.0;
            double t53277 = t53276-t53278;
            double t53279 = gamma_aa[index]*gcab*t53224*(8.0/3.0);
            double t53280 = gamma_aa[index]*t53140*t53224*t53139*(8.0/3.0);
            double t53281 = t53280+t53279;
            double t53282 = gamma_bb[index]*gcab*t53142*(8.0/3.0);
            double t53283 = gamma_bb[index]*t53140*t53142*t53139*(8.0/3.0);
            double t53284 = t53282+t53283;
            double t53285 = gamma_aa[index]*gcab*t53224*(1.6E1/3.0);
            double t53286 = gamma_aa[index]*gcab*t53141*t53224*t53139*1.6E1;
            double t53287 = gamma_aa[index]*t53140*t53141*t53224*t53147*(1.6E1/3.0);
            double t53288 = gamma_aa[index]*t53140*t53224*t53139*1.6E1;
            double t53289 = t53285+t53286+t53287+t53288;
            double t53290 = gamma_bb[index]*gcab*t53142*(1.6E1/3.0);
            double t53291 = gamma_bb[index]*gcab*t53141*t53142*t53139*1.6E1;
            double t53292 = gamma_bb[index]*t53140*t53141*t53142*t53147*(1.6E1/3.0);
            double t53293 = gamma_bb[index]*t53140*t53142*t53139*1.6E1;
            double t53294 = t53290+t53291+t53292+t53293;
            double t53295 = gamma_aa[index]*gcab*t53224*4.0;
            double t53296 = gamma_aa[index]*gcab*t53141*t53224*t53139*4.0;
            double t53297 = gamma_aa[index]*t53140*t53224*t53139*8.0;
            double t53298 = t53295+t53296+t53297;
            double t53299 = gamma_bb[index]*gcab*t53142*4.0;
            double t53300 = gamma_bb[index]*gcab*t53141*t53142*t53139*4.0;
            double t53301 = gamma_bb[index]*t53140*t53142*t53139*8.0;
            double t53302 = t53300+t53301+t53299;
            v_rho_a_rho_b_[index] = (t53222+t53223+t53065+rho_a[index]*(-t53131+t53041*t53135*(t53131-(1.0/(t53107* \
               t53107)*t53138*(b2f*c*t53108*(1.0/3.0)+b4f*t53023*t53114*(2.0/3.0)+b1f*c*t53115*t53108*(1.0/6.0)+b3f* \
               c*t53100*t53108*(1.0/2.0)))/t53118+a1f*c*c0f*t53108*t53136*(2.0/3.0)-a1p*c*c0p*t53132*t53108*(2.0/ \
               3.0))+a1p*c*c0p*t53132*t53108*(2.0/3.0))+t53016*(t53163+t53272+t53183+t53076+t53269-a1p*c*c0p*t53054* \
               t53028*(2.0/3.0)-t53041*t53060*t53233*t53063*t53066-t53041*t53060*t53055*t53066*t53077*4.0-Aa*t53041* \
               t53060*t53090*t53078*t53088*(t53173-t53035*t53036*t53063*4.0)*2.0-Aa*a1a*c*t53041*t53060*t53028*t53078* \
               t53088*t53097*(2.0/3.0))-c0p*t53123*t53132*2.0-t53041*t53135*t53274)*(ccab1*gamma_bb[index]*gcab*t53142* \
               t53226*(4.0/3.0)-ccab2*t53141*t53228*t53139*t53284-ccab4*t53227*t53147*t53148*t53294-ccab1*gamma_bb[index]* \
               t53140*t53230*t53142*t53139*(4.0/3.0)+ccab2*gamma_bb[index]*t53140*t53231*t53142*t53139*(8.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t53141*t53142*t53232*t53139*4.0+ccab4*gamma_bb[index]*t53140*t53141*t53142* \
               t53147*t53229*(1.6E1/3.0)-ccab3*gcab*t53140*t53302*t53141*t53225*t53139)-(rho_a[index]*(t53275+t53041* \
               t53135*t53274)+rho_b[index]*(t53278+t53041*t53135*t53277)-t53016*(t53222+t53223+t53065))*(ccab4*t53227* \
               t53147*t53148*(gamma_aa[index]*gamma_bb[index]*t53142*t53224*t53139*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]* \
               t53141*t53142*t53224*t53147*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t53140*t53142*t53224* \
               t53139*(1.28E2/3.0))-ccab2*t53141*t53281*t53139*1.0/(t53158*t53158*t53158)*t53284*2.0-ccab4*1.0/(t53153* \
               t53153*t53153)*t53147*t53148*t53294*t53289*2.0+ccab3*gcab*t53140*t53141*t53225*t53139*(gamma_aa[index]* \
               gamma_bb[index]*t53142*t53224*t53139*(3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t53140*t53142* \
               t53224*t53139*(3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]*t53230*t53142*t53224*t53139*(3.2E1/ \
               9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t53231*t53142*t53224*t53139*(3.2E1/9.0)+ccab2*gamma_bb[index]* \
               t53140*t53142*t53281*t53228*t53139*(8.0/3.0)+ccab2*gamma_aa[index]*t53140*t53224*t53228*t53139*t53284* \
               (8.0/3.0)-ccab3*gcab*t53140*t53302*t53141*1.0/(t53162*t53162*t53162)*t53139*t53298*2.0+ccab2*gamma_aa[index]* \
               gamma_bb[index]*t53141*t53142*t53224*t53147*t53228*(3.2E1/9.0)-ccab4*gamma_aa[index]*gamma_bb[index]* \
               t53141*t53142*t53224*t53147*t53229*(6.4E1/3.0)+ccab3*gamma_aa[index]*gcab*t53302*t53141*t53224*t53225* \
               t53139*4.0+ccab3*gamma_bb[index]*gcab*t53141*t53142*t53225*t53139*t53298*4.0+ccab4*gamma_aa[index]* \
               t53140*t53141*t53224*t53227*t53147*t53294*(1.6E1/3.0)+ccab4*gamma_bb[index]*t53140*t53141*t53142*t53227* \
               t53147*t53289*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t53140*t53142*t53232*t53224*t53139* \
               (3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t53140*t53142*t53224*1.0/(t53155*t53155*t53155) \
               *t53139*(3.2E1/9.0))+(ccab0+ccab1*gcab*t53140*t53226+ccab2*t53141*t53231*t53139+ccab4*t53147*t53148* \
               t53229+ccab3*gcab*t53140*t53141*t53232*t53139)*(t53270+t53271-t53272+t53268-t53269+t53016*(t53253+ \
               t53256+t53248-t53240*t53034*t53069*t53249*2.0-a1p*c*c0p*t53054*t53235*(8.0/9.0)-t53041*t53060*t53063* \
               t53066*(t53253+t53256+t53248-t53240*t53034*t53069*t53249*2.0+t53250*t53053*1.0/(t53047*t53047*t53047) \
               *t53165*2.0-t53053*t53165*t53166*(b2f*c*t53235*(4.0/9.0)+b4f*t53023*t53236*(1.0E1/9.0)+b1f*c*t53235* \
               t53068*(2.0/9.0)+b3f*c*t53019*t53235*(2.0/3.0)-b1f*t53023*t53241*t53236*(1.0/3.6E1)+b3f*t53023*t53236* \
               t53068*(1.0/1.2E1))-1.0/(t53050*t53050)*t53042*t53250*t53053*1.0/(t53047*t53047*t53047*t53047)*(1.0/ \
               2.0)+a1f*c*c0f*t53051*t53235*(8.0/9.0)-a1p*c*c0p*t53054*t53235*(8.0/9.0)-a1f*c*t53171*t53028*t53165* \
               t53166*(2.0/3.0))+t53041*t53060*t53036*t53063*t53055*1.2E1-t53041*t53060*t53055*t53066*t53257*2.0E1+ \
               t53041*t53060*t53254*t53066*t53077*8.0+t53041*t53063*t53055*t53066*t53265+t53041*t53063*t53254*t53066* \
               t53175-t53041*t53063*t53254*t53066*t53095-t53041*t53055*t53066*t53175*t53077*4.0+t53041*t53055*t53066* \
               t53077*t53095*4.0+t53041*t53035*t53036*t53063*t53055*t53175*4.0+t53041*t53035*t53036*t53063*t53055* \
               t53095*4.0-Aa*t53041*t53090*t53175*t53078*t53267*t53088*2.0+Aa*t53041*t53090*t53265*t53078*t53088* \
               t53097*2.0+Aa*t53041*t53090*t53095*t53078*t53088*t53259*2.0+Aa*t53041*t53060*t53090*t53078*t53088* \
               (t53036*t53063*1.2E1-t53066*t53257*2.0E1)*2.0+t53041*t53060*t53090*t53182*t53176*t53078*t53177*t53267+ \
               t53041*t53060*t53090*t53182*t53176*t53078*t53177*t53259+t53041*t53090*t53182*t53175*t53176*t53078* \
               t53177*t53097-t53041*t53090*t53182*t53095*t53176*t53078*t53177*t53097-t53041*t53060*t53090*1.0/(t53084* \
               t53084*t53084)*t53176*t53266*t53078*t53097*2.0+t53041*t53060*t53090*t53176*t53078*t53177*t53097*(b2a* \
               c*t53235*(4.0/9.0)+b4a*t53023*t53236*(1.0E1/9.0)+b1a*c*t53235*t53068*(2.0/9.0)+b3a*c*t53019*t53235* \
               (2.0/3.0)-b1a*t53023*t53241*t53236*(1.0/3.6E1)+b3a*t53023*t53236*t53068*(1.0/1.2E1))-Aa*a1a*c*t53041* \
               t53060*t53028*t53078*t53267*t53088*(2.0/3.0)-Aa*a1a*c*t53041*t53060*t53028*t53078*t53088*t53259*(2.0/ \
               3.0)-Aa*a1a*c*t53041*t53060*t53235*t53078*t53088*t53097*(8.0/9.0)-Aa*a1a*c*t53041*t53028*t53175*t53078* \
               t53088*t53097*(2.0/3.0)+Aa*a1a*c*t53041*t53028*t53095*t53078*t53088*t53097*(2.0/3.0)+t53041*t53060* \
               t53090*1.0/(t53084*t53084*t53084*t53084)*t53266*t53078*1.0/(t53087*t53087)*t53079*t53097*(1.0/2.0) \
               +a1a*c*t53041*t53060*t53028*t53182*t53176*t53078*t53177*t53097*(2.0/3.0))-t53034*t53070*t53075*t53069* \
               2.0+a1p*c*c0p*t53054*t53028*(4.0/3.0)-t53041*t53060*t53063*t53254*t53066*2.0+t53041*t53060*t53055* \
               t53066*t53077*8.0+Aa*t53041*t53060*t53090*t53078*t53088*(t53173-t53258)*2.0-t53041*t53060*t53090*t53182* \
               t53176*t53078*t53177*t53097*2.0+Aa*a1a*c*t53041*t53060*t53028*t53078*t53088*t53097*(4.0/3.0))+(t53222+ \
               t53223+t53065-t53016*(t53234+t53270+t53163+t53271-t53183-t53076+t53268+t53041*t53060*t53233*t53063* \
               t53066+t53041*t53060*t53055*t53066*t53077*4.0+Aa*a1a*c*t53041*t53060*t53028*t53078*t53088*t53097*(2.0/ \
               3.0))+rho_b[index]*(-t53217+t53041*t53135*(t53217-(t53221*1.0/(t53193*t53193)*(b2f*c*t53194*(1.0/3.0) \
               +b4f*t53200*t53023*(2.0/3.0)+b1f*c*t53201*t53194*(1.0/6.0)+b3f*c*t53194*t53186*(1.0/2.0)))/t53204+ \
               a1f*c*c0f*t53219*t53194*(2.0/3.0)-a1p*c*c0p*t53218*t53194*(2.0/3.0))+a1p*c*c0p*t53218*t53194*(2.0/ \
               3.0))-c0p*t53209*t53218*2.0-t53041*t53135*t53277)*(ccab1*gamma_aa[index]*gcab*t53224*t53226*(4.0/3.0) \
               -ccab2*t53141*t53281*t53228*t53139-ccab4*t53227*t53147*t53148*t53289-ccab1*gamma_aa[index]*t53140* \
               t53230*t53224*t53139*(4.0/3.0)+ccab2*gamma_aa[index]*t53140*t53231*t53224*t53139*(8.0/3.0)+ccab3*gamma_aa[index]* \
               gcab*t53141*t53232*t53224*t53139*4.0+ccab4*gamma_aa[index]*t53140*t53141*t53224*t53147*t53229*(1.6E1/ \
               3.0)-ccab3*gcab*t53140*t53141*t53225*t53139*t53298);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t53304 = rho_a[index]+rho_b[index];
            double t53305 = 1.0/pow(t53304,1.0/3.0);
            double t53306 = c*t53305;
            double t53307 = sqrt(t53306);
            double t53308 = b1p*t53307;
            double t53309 = pow(t53306,3.0/2.0);
            double t53310 = b3p*t53309;
            double t53311 = c*c;
            double t53312 = 1.0/pow(t53304,2.0/3.0);
            double t53313 = b4p*t53311*t53312;
            double t53314 = b2p*c*t53305;
            double t53315 = t53310+t53313+t53314+t53308;
            double t53316 = 1.0/pow(t53304,4.0/3.0);
            double t53317 = 1.0/c0p;
            double t53318 = 1.0/t53315;
            double t53319 = t53317*t53318*(1.0/2.0);
            double t53320 = t53319+1.0;
            double t53321 = a1p*c*t53305;
            double t53322 = t53321+1.0;
            double t53323 = rho_a[index]-rho_b[index];
            double t53324 = t53323*t53323;
            double t53325 = 1.0/t53304;
            double t53326 = t53323*t53325;
            double t53327 = two_13*2.0;
            double t53328 = t53327-2.0;
            double t53329 = 1.0/t53328;
            double t53330 = 1.0/c0f;
            double t53331 = b1f*t53307;
            double t53332 = b3f*t53309;
            double t53333 = b4f*t53311*t53312;
            double t53334 = b2f*c*t53305;
            double t53335 = t53331+t53332+t53333+t53334;
            double t53336 = 1.0/t53335;
            double t53337 = t53330*t53336*(1.0/2.0);
            double t53338 = t53337+1.0;
            double t53339 = log(t53338);
            double t53340 = a1f*c*t53305;
            double t53341 = t53340+1.0;
            double t53342 = log(t53320);
            double t53353 = c0f*t53341*t53339*2.0;
            double t53354 = c0p*t53322*t53342*2.0;
            double t53343 = t53353-t53354;
            double t53344 = t53326+1.0;
            double t53345 = pow(t53344,4.0/3.0);
            double t53346 = -t53326+1.0;
            double t53347 = pow(t53346,4.0/3.0);
            double t53348 = t53345+t53347-2.0;
            double t53349 = 1.0/(t53304*t53304);
            double t53350 = t53323*t53349;
            double t53351 = t53350+t53325;
            double t53352 = 1.0/(t53304*t53304*t53304*t53304);
            double t53355 = t53324*t53324;
            double t53356 = 1.0/pow(t53304,5.0/3.0);
            double t53357 = 1.0/sqrt(t53306);
            double t53358 = 1.0/t53320;
            double t53359 = 1.0/(t53315*t53315);
            double t53360 = b4p*t53311*t53356*(2.0/3.0);
            double t53361 = b2p*c*t53316*(1.0/3.0);
            double t53362 = b1p*c*t53316*t53357*(1.0/6.0);
            double t53363 = b3p*c*t53307*t53316*(1.0/2.0);
            double t53364 = t53360+t53361+t53362+t53363;
            double t53365 = 1.0/(t53304*t53304*t53304*t53304*t53304);
            double t53366 = 1.0/d2fz0;
            double t53367 = 1.0/Aa;
            double t53368 = b1a*t53307;
            double t53369 = b3a*t53309;
            double t53370 = b4a*t53311*t53312;
            double t53371 = b2a*c*t53305;
            double t53372 = t53370+t53371+t53368+t53369;
            double t53373 = 1.0/t53372;
            double t53374 = t53373*t53367*(1.0/2.0);
            double t53375 = t53374+1.0;
            double t53376 = log(t53375);
            double t53377 = a1a*c*t53305;
            double t53378 = t53377+1.0;
            double t53379 = pow(t53344,1.0/3.0);
            double t53380 = t53351*t53379*(4.0/3.0);
            double t53381 = pow(t53346,1.0/3.0);
            double t53457 = t53351*t53381*(4.0/3.0);
            double t53382 = t53380-t53457;
            double t53383 = t53352*t53355;
            double t53384 = t53383-1.0;
            double t53385 = 1.0/pow(rho_b[index],1.0/3.0);
            double t53386 = c*t53385;
            double t53387 = sqrt(t53386);
            double t53388 = b1f*t53387;
            double t53389 = pow(t53386,3.0/2.0);
            double t53390 = b3f*t53389;
            double t53391 = 1.0/pow(rho_b[index],2.0/3.0);
            double t53392 = b4f*t53311*t53391;
            double t53393 = b2f*c*t53385;
            double t53394 = t53390+t53392+t53393+t53388;
            double t53395 = 1.0/pow(rho_b[index],4.0/3.0);
            double t53396 = b1p*t53387;
            double t53397 = b3p*t53389;
            double t53398 = b4p*t53311*t53391;
            double t53399 = b2p*c*t53385;
            double t53400 = t53396+t53397+t53398+t53399;
            double t53401 = 1.0/pow(rho_b[index],5.0/3.0);
            double t53402 = 1.0/sqrt(t53386);
            double t53403 = 1.0/t53394;
            double t53404 = t53330*t53403*(1.0/2.0);
            double t53405 = t53404+1.0;
            double t53406 = 1.0/t53400;
            double t53407 = t53406*t53317*(1.0/2.0);
            double t53408 = t53407+1.0;
            double t53409 = a1p*c*t53385;
            double t53410 = t53409+1.0;
            double t53411 = 1.0/t53408;
            double t53412 = 1.0/(t53400*t53400);
            double t53413 = b4p*t53311*t53401*(2.0/3.0);
            double t53414 = b2p*c*t53395*(1.0/3.0);
            double t53415 = b1p*c*t53402*t53395*(1.0/6.0);
            double t53416 = b3p*c*t53395*t53387*(1.0/2.0);
            double t53417 = t53413+t53414+t53415+t53416;
            double t53418 = t53410*t53411*t53412*t53417;
            double t53419 = log(t53408);
            double t53420 = pow(2.0,1.0/3.0);
            double t53421 = t53420*2.0;
            double t53422 = t53421-2.0;
            double t53423 = log(t53405);
            double t53424 = a1f*c*t53385;
            double t53425 = t53424+1.0;
            double t53426 = gcab*gcab;
            double t53430 = 1.0/pow(rho_a[index],8.0/3.0);
            double t53431 = gamma_aa[index]*t53430*(1.0/2.0);
            double t53432 = 1.0/pow(rho_b[index],8.0/3.0);
            double t53433 = gamma_bb[index]*t53432*(1.0/2.0);
            double t53427 = t53431+t53433;
            double t53428 = t53427*t53427;
            double t53429 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t53434 = t53426*t53426;
            double t53435 = t53428*t53428;
            double t53436 = t53426*t53428*6.0;
            double t53437 = gcab*t53426*t53427*t53428*4.0;
            double t53438 = t53434*t53435;
            double t53439 = gcab*t53427*4.0;
            double t53440 = t53436+t53437+t53438+t53439+1.0;
            double t53441 = gcab*t53427;
            double t53442 = t53441+1.0;
            double t53443 = t53426*t53428;
            double t53444 = gcab*t53427*2.0;
            double t53445 = t53443+t53444+1.0;
            double t53446 = t53426*t53428*3.0;
            double t53447 = gcab*t53426*t53427*t53428;
            double t53448 = gcab*t53427*3.0;
            double t53449 = t53446+t53447+t53448+1.0;
            double t53450 = a1p*c*c0p*t53342*t53316*(2.0/3.0);
            double t53451 = 1.0/t53445;
            double t53452 = 1.0/t53449;
            double t53453 = 1.0/t53442;
            double t53454 = 1.0/t53440;
            double t53455 = 1.0/pow(t53304,7.0/3.0);
            double t53456 = 1.0/pow(t53304,8.0/3.0);
            double t53458 = 1.0/t53338;
            double t53459 = 1.0/(t53335*t53335);
            double t53460 = b4f*t53311*t53356*(2.0/3.0);
            double t53461 = b2f*c*t53316*(1.0/3.0);
            double t53462 = b1f*c*t53316*t53357*(1.0/6.0);
            double t53463 = b3f*c*t53307*t53316*(1.0/2.0);
            double t53464 = t53460+t53461+t53462+t53463;
            double t53465 = t53341*t53464*t53458*t53459;
            double t53467 = t53322*t53364*t53358*t53359;
            double t53468 = a1f*c*c0f*t53316*t53339*(2.0/3.0);
            double t53466 = t53450+t53465-t53467-t53468;
            double t53469 = t53364*t53364;
            double t53470 = 1.0/pow(t53306,3.0/2.0);
            double t53471 = b4p*t53311*t53456*(1.0E1/9.0);
            double t53472 = b2p*c*t53455*(4.0/9.0);
            double t53473 = b1p*c*t53455*t53357*(2.0/9.0);
            double t53474 = b3p*c*t53307*t53455*(2.0/3.0);
            double t53475 = b3p*t53311*t53357*t53456*(1.0/1.2E1);
            double t53476 = t53471+t53472+t53473+t53474+t53475-b1p*t53311*t53470*t53456*(1.0/3.6E1);
            double t53477 = 1.0/(t53315*t53315*t53315);
            double t53478 = t53322*t53358*t53477*t53469*2.0;
            double t53479 = t53464*t53464;
            double t53480 = 1.0/(t53320*t53320);
            double t53481 = 1.0/(t53315*t53315*t53315*t53315);
            double t53482 = t53349*2.0;
            double t53483 = 1.0/(t53304*t53304*t53304);
            double t53484 = t53323*t53483*2.0;
            double t53485 = t53482+t53484;
            double t53486 = t53351*t53351;
            double t53487 = a1p*c*c0p*t53342*t53455*(8.0/9.0);
            double t53488 = 1.0/(t53304*t53304*t53304*t53304*t53304*t53304);
            double t53489 = t53323*t53324*t53352*4.0;
            double t53490 = t53355*t53365*4.0;
            double t53491 = t53490+t53489;
            double t53492 = t53485*t53379*(4.0/3.0);
            double t53493 = 1.0/pow(t53344,2.0/3.0);
            double t53494 = t53493*t53486*(4.0/9.0);
            double t53495 = 1.0/pow(t53346,2.0/3.0);
            double t53496 = t53486*t53495*(4.0/9.0);
            double t53497 = t53492+t53494+t53496-t53381*t53485*(4.0/3.0);
            double t53498 = 1.0/t53375;
            double t53499 = 1.0/(t53372*t53372);
            double t53500 = b4a*t53311*t53356*(2.0/3.0);
            double t53501 = b2a*c*t53316*(1.0/3.0);
            double t53502 = b1a*c*t53316*t53357*(1.0/6.0);
            double t53503 = b3a*c*t53307*t53316*(1.0/2.0);
            double t53504 = t53500+t53501+t53502+t53503;
            double t53505 = t53504*t53504;
            double t53506 = 1.0/t53405;
            double t53507 = b4f*t53311*t53401*(2.0/3.0);
            double t53508 = b2f*c*t53395*(1.0/3.0);
            double t53509 = b1f*c*t53402*t53395*(1.0/6.0);
            double t53510 = b3f*c*t53395*t53387*(1.0/2.0);
            double t53511 = t53510+t53507+t53508+t53509;
            double t53512 = 1.0/(t53394*t53394);
            double t53513 = 1.0/pow(rho_b[index],7.0/3.0);
            double t53514 = 1.0/pow(t53386,3.0/2.0);
            double t53515 = t53511*t53511;
            double t53516 = t53417*t53417;
            double t53517 = 1.0/(t53400*t53400*t53400);
            double t53518 = t53410*t53411*t53516*t53517*2.0;
            double t53519 = b4p*t53311*t53432*(1.0E1/9.0);
            double t53520 = b2p*c*t53513*(4.0/9.0);
            double t53521 = b3p*t53311*t53402*t53432*(1.0/1.2E1);
            double t53522 = b1p*c*t53402*t53513*(2.0/9.0);
            double t53523 = b3p*c*t53513*t53387*(2.0/3.0);
            double t53674 = b1p*t53311*t53432*t53514*(1.0/3.6E1);
            double t53524 = t53520+t53521+t53522+t53523+t53519-t53674;
            double t53525 = 1.0/(t53408*t53408);
            double t53526 = 1.0/(t53400*t53400*t53400*t53400);
            double t53527 = a1p*c*c0p*t53513*t53419*(8.0/9.0);
            double t53528 = a1f*c*c0f*t53423*t53395*(2.0/3.0);
            double t53529 = a1p*c*c0p*t53419*t53395*(2.0/3.0);
            double t53601 = t53511*t53512*t53425*t53506;
            double t53530 = -t53601+t53418+t53528-t53529;
            double t53531 = gamma_bb[index]*gamma_bb[index];
            double t53532 = gcaa*gcaa;
            double t53533 = t53531*t53531;
            double t53534 = t53532*t53532;
            double t53535 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t53536 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t53537 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t53538 = 1.0/pow(rho_a[index],1.0/3.0);
            double t53539 = c*t53538;
            double t53540 = sqrt(t53539);
            double t53541 = pow(t53539,3.0/2.0);
            double t53542 = 1.0/pow(rho_a[index],2.0/3.0);
            double t53543 = b1p*t53540;
            double t53544 = b3p*t53541;
            double t53545 = b4p*t53311*t53542;
            double t53546 = b2p*c*t53538;
            double t53547 = t53543+t53544+t53545+t53546;
            double t53548 = 1.0/t53547;
            double t53549 = t53317*t53548*(1.0/2.0);
            double t53550 = t53549+1.0;
            double t53551 = log(t53550);
            double t53552 = a1p*c*t53538;
            double t53553 = t53552+1.0;
            double t53554 = c0p*t53551*t53553*2.0;
            double t53555 = c0f*t53423*t53425*2.0;
            double t53557 = c0p*t53410*t53419*2.0;
            double t53556 = t53555-t53557;
            double t53558 = t53343*t53352*t53355*t53329*t53348;
            double t53559 = Aa*t53329*t53348*t53366*t53384*t53376*t53378*2.0;
            double t53560 = gamma_bb[index]*gcab*t53429*(1.6E1/3.0);
            double t53561 = gamma_bb[index]*gcab*t53426*t53428*t53429*1.6E1;
            double t53562 = gamma_bb[index]*t53434*t53427*t53428*t53429*(1.6E1/3.0);
            double t53563 = gamma_bb[index]*t53426*t53427*t53429*1.6E1;
            double t53564 = t53560+t53561+t53562+t53563;
            double t53565 = 1.0/(t53442*t53442);
            double t53566 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t53567 = gamma_bb[index]*gcab*t53429*(8.0/3.0);
            double t53568 = gamma_bb[index]*t53426*t53427*t53429*(8.0/3.0);
            double t53569 = t53567+t53568;
            double t53570 = 1.0/(t53449*t53449);
            double t53571 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t53572 = 1.0/(t53440*t53440);
            double t53573 = 1.0/(t53445*t53445);
            double t53574 = gamma_bb[index]*gcab*t53429*4.0;
            double t53575 = gamma_bb[index]*gcab*t53426*t53428*t53429*4.0;
            double t53576 = gamma_bb[index]*t53426*t53427*t53429*8.0;
            double t53577 = t53574+t53575+t53576;
            double t53578 = t53422*t53329*t53556;
            double t53579 = t53557+t53578;
            double t53580 = gamma_bb[index]*gcaa*t53432*4.0;
            double t53581 = gamma_bb[index]*gcaa*t53531*t53532*t53536*4.0;
            double t53582 = t53531*t53532*t53537*6.0;
            double t53583 = t53533*t53534*t53535;
            double t53584 = t53580+t53581+t53582+t53583+1.0;
            double t53585 = 1.0/t53584;
            double t53586 = gamma_bb[index]*gcaa*t53432;
            double t53587 = t53586+1.0;
            double t53588 = 1.0/t53587;
            double t53589 = gamma_bb[index]*gcaa*t53432*3.0;
            double t53590 = gamma_bb[index]*gcaa*t53531*t53532*t53536;
            double t53591 = t53531*t53532*t53537*3.0;
            double t53592 = t53590+t53591+t53589+1.0;
            double t53593 = 1.0/t53592;
            double t53594 = gamma_bb[index]*gcaa*t53432*2.0;
            double t53595 = t53531*t53532*t53537;
            double t53596 = t53594+t53595+1.0;
            double t53597 = 1.0/t53596;
            double t53598 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t53599 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t53600 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t53602 = ccaa4*t53600*t53533*t53534*t53585*(3.2E1/3.0);
            double t53603 = ccaa1*gamma_bb[index]*gcaa*t53429*t53588*(8.0/3.0);
            double t53604 = ccaa3*gamma_bb[index]*gcaa*t53531*t53532*t53593*t53599*8.0;
            double t53605 = ccaa2*t53531*t53532*t53597*t53598*(1.6E1/3.0);
            double t53606 = 1.0/(t53587*t53587);
            double t53607 = gamma_bb[index]*gcaa*t53429*8.0;
            double t53608 = gamma_bb[index]*gcaa*t53531*t53532*t53599*8.0;
            double t53609 = t53531*t53532*t53598*1.6E1;
            double t53610 = t53607+t53608+t53609;
            double t53611 = 1.0/(t53592*t53592);
            double t53612 = gamma_bb[index]*gcaa*t53429*(3.2E1/3.0);
            double t53613 = gamma_bb[index]*gcaa*t53531*t53532*t53599*3.2E1;
            double t53614 = t53531*t53532*t53598*3.2E1;
            double t53615 = t53600*t53533*t53534*(3.2E1/3.0);
            double t53616 = t53612+t53613+t53614+t53615;
            double t53617 = 1.0/(t53584*t53584);
            double t53618 = gamma_bb[index]*gcaa*t53429*(1.6E1/3.0);
            double t53619 = t53531*t53532*t53598*(1.6E1/3.0);
            double t53620 = t53618+t53619;
            double t53621 = 1.0/(t53596*t53596);
            double t53622 = t53602+t53603+t53604+t53605-ccaa1*t53531*t53532*t53606*t53598*(8.0/3.0)-ccaa2*t53620* \
               t53531*t53621*t53532*t53537-ccaa4*t53533*t53534*t53535*t53616*t53617-ccaa3*gamma_bb[index]*gcaa*t53610* \
               t53611*t53531*t53532*t53536;
            double t53623 = gx*gx;
            double t53624 = t53623*t53623;
            double t53625 = 1.0/pow(rho_b[index],1.0E1);
            double t53626 = gamma_bb[index]*gx*t53432;
            double t53627 = t53626+1.0;
            double t53647 = gamma_bb[index]*gx*t53429*(3.2E1/3.0);
            double t53648 = gamma_bb[index]*gx*t53531*t53623*t53599*3.2E1;
            double t53649 = t53531*t53623*t53598*3.2E1;
            double t53650 = t53600*t53533*t53624*(3.2E1/3.0);
            double t53628 = t53650+t53647+t53648+t53649;
            double t53629 = gamma_bb[index]*gx*t53432*4.0;
            double t53630 = gamma_bb[index]*gx*t53531*t53623*t53536*4.0;
            double t53631 = t53531*t53623*t53537*6.0;
            double t53632 = t53533*t53624*t53535;
            double t53633 = t53630+t53631+t53632+t53629+1.0;
            double t53653 = gamma_bb[index]*gx*t53429*(1.6E1/3.0);
            double t53654 = t53531*t53623*t53598*(1.6E1/3.0);
            double t53634 = t53653+t53654;
            double t53635 = gamma_bb[index]*gx*t53432*2.0;
            double t53636 = t53531*t53623*t53537;
            double t53637 = t53635+t53636+1.0;
            double t53638 = gamma_bb[index]*gx*t53432*3.0;
            double t53639 = gamma_bb[index]*gx*t53531*t53623*t53536;
            double t53640 = t53531*t53623*t53537*3.0;
            double t53641 = t53640+t53638+t53639+1.0;
            double t53642 = 1.0/(t53641*t53641);
            double t53643 = gamma_bb[index]*gx*t53429*8.0;
            double t53644 = gamma_bb[index]*gx*t53531*t53623*t53599*8.0;
            double t53645 = t53531*t53623*t53598*1.6E1;
            double t53646 = t53643+t53644+t53645;
            double t53651 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t53652 = 1.0/(t53633*t53633);
            double t53655 = 1.0/(t53637*t53637);
            double t53656 = 1.0/t53633;
            double t53657 = 1.0/t53627;
            double t53658 = 1.0/t53641;
            double t53659 = 1.0/t53637;
            double t53660 = 1.0/(t53627*t53627);
            double t53661 = ccaa4*t53533*t53534*t53535*t53585;
            double t53662 = ccaa1*gamma_bb[index]*gcaa*t53432*t53588;
            double t53663 = ccaa3*gamma_bb[index]*gcaa*t53531*t53532*t53536*t53593;
            double t53664 = ccaa2*t53531*t53532*t53537*t53597;
            double t53665 = ccaa0+t53661+t53662+t53663+t53664;
            double t53666 = 1.0/(t53394*t53394*t53394);
            double t53667 = b4f*t53311*t53432*(1.0E1/9.0);
            double t53668 = b2f*c*t53513*(4.0/9.0);
            double t53669 = b3f*t53311*t53402*t53432*(1.0/1.2E1);
            double t53670 = b1f*c*t53402*t53513*(2.0/9.0);
            double t53671 = b3f*c*t53513*t53387*(2.0/3.0);
            double t53672 = t53670+t53671+t53667+t53668+t53669-b1f*t53311*t53432*t53514*(1.0/3.6E1);
            double t53673 = t53512*t53425*t53506*t53672;
            double t53675 = t53410*t53411*t53412*t53524;
            double t53676 = 1.0/(t53405*t53405);
            double t53677 = 1.0/(t53394*t53394*t53394*t53394);
            double t53678 = t53330*t53425*t53515*t53676*t53677*(1.0/2.0);
            double t53679 = t53410*t53317*t53516*t53525*t53526*(1.0/2.0);
            double t53680 = a1f*c*t53511*t53512*t53506*t53395*(2.0/3.0);
            double t53681 = a1p*c*t53411*t53412*t53417*t53395*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t53453*t53427+ccab2*t53451*t53426*t53428+ccab4*t53434*t53435* \
               t53454+ccab3*gcab*t53452*t53426*t53427*t53428)*(-rho_b[index]*(-t53518-t53527+t53681+t53675+t53679+ \
               t53422*t53329*(t53518+t53527+t53680+t53673+t53678-t53410*t53411*t53412*t53524-t53425*t53506*t53515* \
               t53666*2.0-a1f*c*c0f*t53423*t53513*(8.0/9.0)-t53410*t53317*t53516*t53525*t53526*(1.0/2.0)-a1p*c*t53411* \
               t53412*t53417*t53395*(2.0/3.0)))-t53304*(t53478+t53487-t53322*t53358*t53359*t53476-t53352*t53355*t53329* \
               t53348*(t53478+t53487-t53322*t53358*t53359*t53476-t53341*1.0/(t53335*t53335*t53335)*t53458*t53479* \
               2.0+t53341*t53458*t53459*(b2f*c*t53455*(4.0/9.0)+b4f*t53311*t53456*(1.0E1/9.0)+b1f*c*t53455*t53357* \
               (2.0/9.0)+b3f*c*t53307*t53455*(2.0/3.0)-b1f*t53311*t53470*t53456*(1.0/3.6E1)+b3f*t53311*t53357*t53456* \
               (1.0/1.2E1))+t53330*t53341*1.0/(t53335*t53335*t53335*t53335)*1.0/(t53338*t53338)*t53479*(1.0/2.0)- \
               a1f*c*c0f*t53455*t53339*(8.0/9.0)-t53322*t53317*t53480*t53481*t53469*(1.0/2.0)+a1f*c*t53316*t53464* \
               t53458*t53459*(2.0/3.0)-a1p*c*t53316*t53364*t53358*t53359*(2.0/3.0))+t53324*t53343*t53352*t53329*t53348* \
               1.2E1-t53322*t53317*t53480*t53481*t53469*(1.0/2.0)+t53343*t53355*t53382*t53329*t53365*8.0-t53352*t53355* \
               t53382*t53329*t53466*2.0+t53343*t53352*t53355*t53329*t53497+t53343*t53355*t53329*t53348*t53488*2.0E1- \
               t53355*t53329*t53365*t53348*t53466*8.0+t53323*t53324*t53343*t53352*t53382*t53329*8.0+t53323*t53324* \
               t53343*t53329*t53365*t53348*3.2E1-t53323*t53324*t53352*t53329*t53348*t53466*8.0-a1p*c*t53316*t53364* \
               t53358*t53359*(2.0/3.0)+Aa*t53382*t53329*t53491*t53366*t53376*t53378*4.0+Aa*t53329*t53366*t53384*t53376* \
               t53378*t53497*2.0+Aa*t53329*t53348*t53366*t53376*t53378*(t53324*t53352*1.2E1+t53355*t53488*2.0E1+t53323* \
               t53324*t53365*3.2E1)*2.0-t53504*t53382*t53329*t53366*t53384*t53378*t53498*t53499*2.0-t53504*t53329* \
               t53491*t53348*t53366*t53378*t53498*t53499*2.0+t53505*1.0/(t53372*t53372*t53372)*t53329*t53348*t53366* \
               t53384*t53378*t53498*2.0-t53329*t53348*t53366*t53384*t53378*t53498*t53499*(b2a*c*t53455*(4.0/9.0)+ \
               b4a*t53311*t53456*(1.0E1/9.0)+b1a*c*t53455*t53357*(2.0/9.0)+b3a*c*t53307*t53455*(2.0/3.0)-b1a*t53311* \
               t53470*t53456*(1.0/3.6E1)+b3a*t53311*t53357*t53456*(1.0/1.2E1))+Aa*a1a*c*t53316*t53382*t53329*t53366* \
               t53384*t53376*(4.0/3.0)+Aa*a1a*c*t53316*t53329*t53491*t53348*t53366*t53376*(4.0/3.0)+Aa*a1a*c*t53329* \
               t53455*t53348*t53366*t53384*t53376*(8.0/9.0)-t53505*1.0/(t53372*t53372*t53372*t53372)*t53329*t53348* \
               t53366*1.0/(t53375*t53375)*t53384*t53367*t53378*(1.0/2.0)-a1a*c*t53504*t53316*t53329*t53348*t53366* \
               t53384*t53498*t53499*(2.0/3.0))-t53422*t53530*t53329*2.0+t53410*t53411*t53412*t53417*2.0-t53322*t53364* \
               t53358*t53359*2.0+a1p*c*c0p*t53342*t53316*(4.0/3.0)-a1p*c*c0p*t53419*t53395*(4.0/3.0)+t53343*t53352* \
               t53355*t53382*t53329*2.0+t53343*t53355*t53329*t53365*t53348*8.0-t53352*t53355*t53329*t53348*t53466* \
               2.0+t53323*t53324*t53343*t53352*t53329*t53348*8.0+Aa*t53382*t53329*t53366*t53384*t53376*t53378*4.0+ \
               Aa*t53329*t53491*t53348*t53366*t53376*t53378*4.0-t53504*t53329*t53348*t53366*t53384*t53378*t53498* \
               t53499*2.0+Aa*a1a*c*t53316*t53329*t53348*t53366*t53384*t53376*(4.0/3.0))+(rho_b[index]*t53579+rho_a[index]* \
               (t53554-t53422*t53329*(t53554-c0f*log((t53330*(1.0/2.0))/(b1f*t53540+b3f*t53541+b2f*c*t53538+b4f*t53311* \
               t53542)+1.0)*(a1f*c*t53538+1.0)*2.0))-t53304*(t53354+t53558+t53559))*(-ccab2*t53426*t53428*t53573* \
               (gamma_bb[index]*gcab*t53571*(8.8E1/9.0)+t53531*t53426*t53566*(3.2E1/9.0)+gamma_bb[index]*t53426*t53427* \
               t53571*(8.8E1/9.0))+ccab4*1.0/(t53440*t53440*t53440)*t53434*t53435*(t53564*t53564)*2.0+ccab2*t53426* \
               1.0/(t53445*t53445*t53445)*t53428*(t53569*t53569)*2.0+ccab1*gamma_bb[index]*gcab*t53453*t53571*(4.4E1/ \
               9.0)+ccab2*t53531*t53451*t53426*t53566*(3.2E1/9.0)-ccab1*t53531*t53426*t53565*t53566*(3.2E1/9.0)-ccab4* \
               t53434*t53435*t53572*(gamma_bb[index]*gcab*t53571*(1.76E2/9.0)+t53531*t53426*t53566*(6.4E1/3.0)+gamma_bb[index]* \
               t53426*t53427*t53571*(1.76E2/3.0)+t53531*t53434*t53428*t53566*(6.4E1/3.0)+gamma_bb[index]*gcab*t53426* \
               t53571*t53428*(1.76E2/3.0)+gamma_bb[index]*t53434*t53427*t53571*t53428*(1.76E2/9.0)+gcab*t53531*t53426* \
               t53427*t53566*(1.28E2/3.0))+ccab4*t53531*t53434*t53454*t53428*t53566*(6.4E1/3.0)+ccab2*gamma_bb[index]* \
               t53451*t53426*t53427*t53571*(8.8E1/9.0)-ccab1*gamma_bb[index]*t53426*t53427*t53571*t53565*(4.4E1/9.0) \
               +ccab3*gcab*t53426*t53427*t53428*1.0/(t53449*t53449*t53449)*(t53577*t53577)*2.0+ccab3*gamma_bb[index]* \
               gcab*t53452*t53426*t53571*t53428*(4.4E1/3.0)+ccab4*gamma_bb[index]*t53434*t53427*t53454*t53571*t53428* \
               (1.76E2/9.0)-ccab2*gamma_bb[index]*t53426*t53427*t53429*t53573*t53569*(1.6E1/3.0)+ccab3*gcab*t53531* \
               t53452*t53426*t53427*t53566*(3.2E1/3.0)+ccab1*gcab*t53531*1.0/(t53442*t53442*t53442)*t53426*t53427* \
               t53566*(3.2E1/9.0)-ccab3*gcab*t53426*t53570*t53427*t53428*(gamma_bb[index]*gcab*t53571*(4.4E1/3.0) \
               +t53531*t53426*t53566*(3.2E1/3.0)+gamma_bb[index]*t53426*t53427*t53571*(8.8E1/3.0)+gamma_bb[index]* \
               gcab*t53426*t53571*t53428*(4.4E1/3.0)+gcab*t53531*t53426*t53427*t53566*(3.2E1/3.0))-ccab3*gamma_bb[index]* \
               gcab*t53426*t53570*t53428*t53429*t53577*8.0-ccab4*gamma_bb[index]*t53434*t53427*t53428*t53572*t53429* \
               t53564*(3.2E1/3.0))+(t53354+t53558+t53559+rho_b[index]*(-t53418+t53529+t53422*t53329*(t53418+t53528- \
               t53511*t53512*t53425*t53506-a1p*c*c0p*t53419*t53395*(2.0/3.0)))-t53304*(t53450-t53322*t53364*t53358* \
               t53359+t53343*t53352*t53355*t53382*t53329+t53343*t53355*t53329*t53365*t53348*4.0-t53352*t53355*t53329* \
               t53348*t53466+t53323*t53324*t53343*t53352*t53329*t53348*4.0+Aa*t53382*t53329*t53366*t53384*t53376* \
               t53378*2.0+Aa*t53329*t53491*t53348*t53366*t53376*t53378*2.0-t53504*t53329*t53348*t53366*t53384*t53378* \
               t53498*t53499+Aa*a1a*c*t53316*t53329*t53348*t53366*t53384*t53376*(2.0/3.0))-c0p*t53410*t53419*2.0- \
               t53422*t53329*t53556)*(ccab1*gamma_bb[index]*gcab*t53453*t53429*(4.0/3.0)-ccab4*t53434*t53435*t53572* \
               t53564-ccab2*t53426*t53428*t53573*t53569+ccab2*gamma_bb[index]*t53451*t53426*t53427*t53429*(8.0/3.0) \
               -ccab1*gamma_bb[index]*t53426*t53427*t53429*t53565*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t53452*t53426* \
               t53428*t53429*4.0+ccab4*gamma_bb[index]*t53434*t53427*t53454*t53428*t53429*(1.6E1/3.0)-ccab3*gcab* \
               t53426*t53570*t53427*t53428*t53577)*2.0+t53665*(-t53418+t53529+t53422*t53530*t53329)*2.0+t53622*t53579* \
               2.0+rho_b[index]*t53622*(t53418-t53529+t53422*t53329*(t53601-t53418-t53528+t53529))*2.0-c0*pow(rho_b[index],1.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t53429*t53657*(8.0/3.0)-cx1*t53531*t53623*t53660*t53598*(8.0/3.0)+cx2* \
               t53531*t53623*t53659*t53598*(1.6E1/3.0)+cx4*t53600*t53533*t53624*t53656*(3.2E1/3.0)-cx2*t53531*t53623* \
               t53634*t53537*t53655-cx4*t53533*t53624*t53535*t53652*t53628+cx3*gamma_bb[index]*gx*t53531*t53623*t53658* \
               t53599*8.0-cx3*gamma_bb[index]*gx*t53531*t53623*t53642*t53536*t53646)*(8.0/3.0)-rho_b[index]*t53579* \
               (ccaa1*gamma_bb[index]*gcaa*t53571*t53588*(8.8E1/9.0)-ccaa1*t53531*t53532*t53606*t53566*2.4E1+ccaa4* \
               t53533*t53534*t53651*t53585*(1.12E3/9.0)+ccaa2*t53531*t53532*t53566*t53597*(3.04E2/9.0)-ccaa2*t53620* \
               t53531*t53621*t53532*t53598*(3.2E1/3.0)-ccaa4*t53600*t53533*t53534*t53616*t53617*(6.4E1/3.0)-ccaa2* \
               t53531*t53621*t53532*t53537*(gamma_bb[index]*gcaa*t53571*(1.76E2/9.0)+t53531*t53532*t53566*(3.04E2/ \
               9.0))-ccaa4*t53533*t53534*t53535*t53617*(gamma_bb[index]*gcaa*t53571*(3.52E2/9.0)+t53533*t53534*t53651* \
               (1.12E3/9.0)+t53531*t53532*t53566*(6.08E2/3.0)+gamma_bb[index]*gcaa*t53531*t53532*t53625*2.88E2)+ccaa2* \
               (t53620*t53620)*t53531*t53532*t53537*1.0/(t53596*t53596*t53596)*2.0+ccaa4*t53533*t53534*t53535*(t53616* \
               t53616)*1.0/(t53584*t53584*t53584)*2.0+ccaa3*gamma_bb[index]*gcaa*t53531*t53532*t53625*t53593*7.2E1+ \
               ccaa1*gamma_bb[index]*gcaa*t53531*t53532*t53625*1.0/(t53587*t53587*t53587)*(1.28E2/9.0)+ccaa3*gamma_bb[index]* \
               gcaa*(t53610*t53610)*t53531*t53532*t53536*1.0/(t53592*t53592*t53592)*2.0-ccaa3*gamma_bb[index]*gcaa* \
               t53611*t53531*t53532*t53536*(gamma_bb[index]*gcaa*t53571*(8.8E1/3.0)+t53531*t53532*t53566*(3.04E2/ \
               3.0)+gamma_bb[index]*gcaa*t53531*t53532*t53625*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t53610*t53611*t53531* \
               t53532*t53599*1.6E1)+rho_b[index]*t53665*(-t53518-t53527+t53681+t53675+t53679+t53422*t53329*(t53518+ \
               t53527+t53680-t53681+t53673-t53675+t53678-t53679-t53425*t53506*t53515*t53666*2.0-a1f*c*c0f*t53423* \
               t53513*(8.0/9.0)))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t53571*t53657*(8.8E1/9.0)- \
               cx1*t53531*t53623*t53660*t53566*2.4E1+cx2*t53531*t53623*t53566*t53659*(3.04E2/9.0)+cx4*t53533*t53624* \
               t53651*t53656*(1.12E3/9.0)-cx2*t53531*t53623*t53634*t53655*t53598*(3.2E1/3.0)-cx4*t53600*t53533*t53624* \
               t53652*t53628*(6.4E1/3.0)-cx2*t53531*t53623*t53537*t53655*(gamma_bb[index]*gx*t53571*(1.76E2/9.0)+ \
               t53531*t53623*t53566*(3.04E2/9.0))-cx4*t53533*t53624*t53535*t53652*(gamma_bb[index]*gx*t53571*(3.52E2/ \
               9.0)+t53533*t53624*t53651*(1.12E3/9.0)+t53531*t53623*t53566*(6.08E2/3.0)+gamma_bb[index]*gx*t53531* \
               t53623*t53625*2.88E2)+cx2*t53531*t53623*(t53634*t53634)*t53537*1.0/(t53637*t53637*t53637)*2.0+cx4* \
               t53533*t53624*1.0/(t53633*t53633*t53633)*t53535*(t53628*t53628)*2.0+cx3*gamma_bb[index]*gx*t53531* \
               t53623*t53625*t53658*7.2E1+cx1*gamma_bb[index]*gx*t53531*t53623*t53625*1.0/(t53627*t53627*t53627)* \
               (1.28E2/9.0)+cx3*gamma_bb[index]*gx*t53531*t53623*1.0/(t53641*t53641*t53641)*t53536*(t53646*t53646) \
               *2.0-cx3*gamma_bb[index]*gx*t53531*t53623*t53642*t53536*(gamma_bb[index]*gx*t53571*(8.8E1/3.0)+t53531* \
               t53623*t53566*(3.04E2/3.0)+gamma_bb[index]*gx*t53531*t53623*t53625*7.2E1)-cx3*gamma_bb[index]*gx*t53531* \
               t53623*t53642*t53646*t53599*1.6E1)+c0*t53391*(cx0+cx1*gamma_bb[index]*gx*t53432*t53657+cx2*t53531* \
               t53623*t53537*t53659+cx4*t53533*t53624*t53535*t53656+cx3*gamma_bb[index]*gx*t53531*t53623*t53536*t53658) \
               *(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t55447 = 1.0/pow(rho_b[index],1.0/3.0);
            double t55448 = c*t55447;
            double t55449 = sqrt(t55448);
            double t55450 = b1f*t55449;
            double t55451 = pow(t55448,3.0/2.0);
            double t55452 = b3f*t55451;
            double t55453 = c*c;
            double t55454 = 1.0/pow(rho_b[index],2.0/3.0);
            double t55455 = b4f*t55453*t55454;
            double t55456 = b2f*c*t55447;
            double t55457 = t55450+t55452+t55455+t55456;
            double t55458 = 1.0/pow(rho_b[index],4.0/3.0);
            double t55459 = b1p*t55449;
            double t55460 = b3p*t55451;
            double t55461 = b4p*t55453*t55454;
            double t55462 = b2p*c*t55447;
            double t55463 = t55460+t55461+t55462+t55459;
            double t55464 = 1.0/pow(rho_b[index],5.0/3.0);
            double t55465 = 1.0/sqrt(t55448);
            double t55466 = 1.0/c0f;
            double t55467 = 1.0/t55457;
            double t55468 = t55466*t55467*(1.0/2.0);
            double t55469 = t55468+1.0;
            double t55470 = 1.0/c0p;
            double t55471 = 1.0/t55463;
            double t55472 = t55470*t55471*(1.0/2.0);
            double t55473 = t55472+1.0;
            double t55474 = a1p*c*t55447;
            double t55475 = t55474+1.0;
            double t55476 = 1.0/t55473;
            double t55477 = 1.0/(t55463*t55463);
            double t55478 = b4p*t55453*t55464*(2.0/3.0);
            double t55479 = b2p*c*t55458*(1.0/3.0);
            double t55480 = b1p*c*t55465*t55458*(1.0/6.0);
            double t55481 = b3p*c*t55449*t55458*(1.0/2.0);
            double t55482 = t55480+t55481+t55478+t55479;
            double t55483 = t55482*t55475*t55476*t55477;
            double t55484 = log(t55473);
            double t55485 = gamma_bb[index]*gamma_bb[index];
            double t55486 = gcaa*gcaa;
            double t55487 = t55485*t55485;
            double t55488 = t55486*t55486;
            double t55489 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t55490 = 1.0/pow(rho_b[index],8.0/3.0);
            double t55491 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t55492 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t55493 = pow(2.0,1.0/3.0);
            double t55494 = t55493*2.0;
            double t55495 = t55494-2.0;
            double t55496 = two_13*2.0;
            double t55497 = t55496-2.0;
            double t55498 = 1.0/t55497;
            double t55499 = log(t55469);
            double t55500 = a1f*c*t55447;
            double t55501 = t55500+1.0;
            double t55502 = gamma_bb[index]*gcaa*t55490*4.0;
            double t55503 = gamma_bb[index]*gcaa*t55491*t55485*t55486*4.0;
            double t55504 = t55492*t55485*t55486*6.0;
            double t55505 = t55487*t55488*t55489;
            double t55506 = t55502+t55503+t55504+t55505+1.0;
            double t55507 = 1.0/t55506;
            double t55508 = gamma_bb[index]*gcaa*t55490;
            double t55509 = t55508+1.0;
            double t55510 = 1.0/t55509;
            double t55511 = gamma_bb[index]*gcaa*t55490*3.0;
            double t55512 = gamma_bb[index]*gcaa*t55491*t55485*t55486;
            double t55513 = t55492*t55485*t55486*3.0;
            double t55514 = t55511+t55512+t55513+1.0;
            double t55515 = 1.0/t55514;
            double t55516 = gamma_bb[index]*gcaa*t55490*2.0;
            double t55517 = t55492*t55485*t55486;
            double t55518 = t55516+t55517+1.0;
            double t55519 = 1.0/t55518;
            double t55520 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t55521 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t55522 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t55523 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t55524 = 1.0/t55469;
            double t55525 = 1.0/(t55457*t55457);
            double t55526 = b4f*t55453*t55464*(2.0/3.0);
            double t55527 = b2f*c*t55458*(1.0/3.0);
            double t55528 = b1f*c*t55465*t55458*(1.0/6.0);
            double t55529 = b3f*c*t55449*t55458*(1.0/2.0);
            double t55530 = t55526+t55527+t55528+t55529;
            double t55531 = a1f*c*c0f*t55458*t55499*(2.0/3.0);
            double t55532 = a1p*c*c0p*t55484*t55458*(2.0/3.0);
            double t55533 = ccaa4*t55523*t55507*t55487*t55488*(3.2E1/3.0);
            double t55534 = ccaa1*gamma_bb[index]*gcaa*t55510*t55521*(8.0/3.0);
            double t55535 = ccaa3*gamma_bb[index]*gcaa*t55522*t55515*t55485*t55486*8.0;
            double t55536 = ccaa2*t55520*t55519*t55485*t55486*(1.6E1/3.0);
            double t55537 = 1.0/(t55509*t55509);
            double t55538 = gamma_bb[index]*gcaa*t55521*8.0;
            double t55539 = gamma_bb[index]*gcaa*t55522*t55485*t55486*8.0;
            double t55540 = t55520*t55485*t55486*1.6E1;
            double t55541 = t55540+t55538+t55539;
            double t55542 = 1.0/(t55514*t55514);
            double t55543 = gamma_bb[index]*gcaa*t55521*(3.2E1/3.0);
            double t55544 = gamma_bb[index]*gcaa*t55522*t55485*t55486*3.2E1;
            double t55545 = t55520*t55485*t55486*3.2E1;
            double t55546 = t55523*t55487*t55488*(3.2E1/3.0);
            double t55547 = t55543+t55544+t55545+t55546;
            double t55548 = 1.0/(t55506*t55506);
            double t55549 = gamma_bb[index]*gcaa*t55521*(1.6E1/3.0);
            double t55550 = t55520*t55485*t55486*(1.6E1/3.0);
            double t55551 = t55550+t55549;
            double t55552 = 1.0/(t55518*t55518);
            double t55553 = t55533+t55534+t55535+t55536-ccaa1*t55520*t55537*t55485*t55486*(8.0/3.0)-ccaa2*t55551* \
               t55552*t55492*t55485*t55486-ccaa4*t55547*t55548*t55487*t55488*t55489-ccaa3*gamma_bb[index]*gcaa*t55541* \
               t55542*t55491*t55485*t55486;
            double t55554 = gx*gx;
            double t55555 = t55554*t55554;
            double t55556 = 1.0/pow(rho_b[index],1.0E1);
            double t55557 = gamma_bb[index]*gx*t55490;
            double t55558 = t55557+1.0;
            double t55559 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t55580 = gamma_bb[index]*gx*t55521*(3.2E1/3.0);
            double t55581 = gamma_bb[index]*gx*t55522*t55554*t55485*3.2E1;
            double t55582 = t55520*t55554*t55485*3.2E1;
            double t55583 = t55523*t55555*t55487*(3.2E1/3.0);
            double t55560 = t55580+t55581+t55582+t55583;
            double t55561 = gamma_bb[index]*gx*t55490*4.0;
            double t55562 = gamma_bb[index]*gx*t55491*t55554*t55485*4.0;
            double t55563 = t55554*t55492*t55485*6.0;
            double t55564 = t55555*t55487*t55489;
            double t55565 = t55561+t55562+t55563+t55564+1.0;
            double t55586 = gamma_bb[index]*gx*t55521*(1.6E1/3.0);
            double t55587 = t55520*t55554*t55485*(1.6E1/3.0);
            double t55566 = t55586+t55587;
            double t55567 = gamma_bb[index]*gx*t55490*2.0;
            double t55568 = t55554*t55492*t55485;
            double t55569 = t55567+t55568+1.0;
            double t55570 = gamma_bb[index]*gx*t55490*3.0;
            double t55571 = gamma_bb[index]*gx*t55491*t55554*t55485;
            double t55572 = t55554*t55492*t55485*3.0;
            double t55573 = t55570+t55571+t55572+1.0;
            double t55574 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t55575 = 1.0/(t55573*t55573);
            double t55576 = gamma_bb[index]*gx*t55521*8.0;
            double t55577 = gamma_bb[index]*gx*t55522*t55554*t55485*8.0;
            double t55578 = t55520*t55554*t55485*1.6E1;
            double t55579 = t55576+t55577+t55578;
            double t55584 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t55585 = 1.0/(t55565*t55565);
            double t55588 = 1.0/(t55569*t55569);
            double t55589 = 1.0/t55565;
            double t55590 = 1.0/t55558;
            double t55591 = 1.0/t55573;
            double t55592 = 1.0/t55569;
            double t55593 = c0f*t55501*t55499*2.0;
            double t55594 = c0p*t55475*t55484*2.0;
            double t55595 = 1.0/(t55558*t55558);
            double t55596 = ccaa4*t55507*t55487*t55488*t55489;
            double t55597 = ccaa1*gamma_bb[index]*gcaa*t55510*t55490;
            double t55598 = ccaa3*gamma_bb[index]*gcaa*t55515*t55491*t55485*t55486;
            double t55599 = ccaa2*t55492*t55519*t55485*t55486;
            double t55600 = ccaa0+t55596+t55597+t55598+t55599;
            double t55601 = 1.0/pow(rho_b[index],7.0/3.0);
            double t55602 = 1.0/pow(t55448,3.0/2.0);
            double t55603 = t55530*t55530;
            double t55604 = t55482*t55482;
            double t55605 = 1.0/(t55463*t55463*t55463);
            double t55606 = t55604*t55605*t55475*t55476*2.0;
            double t55607 = b4p*t55453*t55490*(1.0E1/9.0);
            double t55608 = b2p*c*t55601*(4.0/9.0);
            double t55609 = b3p*t55453*t55490*t55465*(1.0/1.2E1);
            double t55610 = b1p*c*t55601*t55465*(2.0/9.0);
            double t55611 = b3p*c*t55601*t55449*(2.0/3.0);
            double t55612 = t55610+t55611+t55607+t55608+t55609-b1p*t55602*t55453*t55490*(1.0/3.6E1);
            double t55613 = 1.0/(t55473*t55473);
            double t55614 = 1.0/(t55463*t55463*t55463*t55463);
            double t55615 = a1p*c*c0p*t55601*t55484*(8.0/9.0);
            v_rho_b_rho_b_[index] = t55553*(t55594+t55495*t55498*(t55593-c0p*t55475*t55484*2.0))*2.0+t55600*(t55532- \
               t55483+t55495*t55498*(t55531+t55483-t55501*t55530*t55524*t55525-a1p*c*c0p*t55484*t55458*(2.0/3.0)) \
               )*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t55521*t55590*(8.0/3.0)-cx1*t55520*t55554* \
               t55485*t55595*(8.0/3.0)+cx2*t55520*t55554*t55592*t55485*(1.6E1/3.0)+cx4*t55523*t55555*t55487*t55589* \
               (3.2E1/3.0)-cx2*t55554*t55492*t55485*t55566*t55588-cx4*t55560*t55555*t55585*t55487*t55489+cx3*gamma_bb[index]* \
               gx*t55522*t55554*t55591*t55485*8.0-cx3*gamma_bb[index]*gx*t55491*t55554*t55485*t55575*t55579)*(8.0/ \
               3.0)+rho_b[index]*t55600*(-t55606-t55615+t55495*t55498*(t55606+t55615-t55612*t55475*t55476*t55477- \
               t55501*t55603*t55524*1.0/(t55457*t55457*t55457)*2.0+t55501*t55524*t55525*(b2f*c*t55601*(4.0/9.0)+b4f* \
               t55453*t55490*(1.0E1/9.0)+b1f*c*t55601*t55465*(2.0/9.0)+b3f*c*t55601*t55449*(2.0/3.0)-b1f*t55602*t55453* \
               t55490*(1.0/3.6E1)+b3f*t55453*t55490*t55465*(1.0/1.2E1))+t55501*t55603*1.0/(t55457*t55457*t55457*t55457) \
               *t55466*1.0/(t55469*t55469)*(1.0/2.0)-a1f*c*c0f*t55601*t55499*(8.0/9.0)-t55604*t55613*t55470*t55614* \
               t55475*(1.0/2.0)+a1f*c*t55530*t55524*t55525*t55458*(2.0/3.0)-a1p*c*t55482*t55458*t55476*t55477*(2.0/ \
               3.0))+t55612*t55475*t55476*t55477+t55604*t55613*t55470*t55614*t55475*(1.0/2.0)+a1p*c*t55482*t55458* \
               t55476*t55477*(2.0/3.0))-rho_b[index]*t55553*(t55532-t55483+t55495*t55498*(t55531-t55532+t55483-t55501* \
               t55530*t55524*t55525))*2.0-rho_b[index]*(t55594+t55495*t55498*(t55593-t55594))*(ccaa1*gamma_bb[index]* \
               gcaa*t55510*t55574*(8.8E1/9.0)-ccaa1*t55537*t55485*t55486*t55559*2.4E1+ccaa2*t55519*t55485*t55486* \
               t55559*(3.04E2/9.0)+ccaa4*t55507*t55584*t55487*t55488*(1.12E3/9.0)-ccaa2*t55520*t55551*t55552*t55485* \
               t55486*(3.2E1/3.0)-ccaa4*t55523*t55547*t55548*t55487*t55488*(6.4E1/3.0)-ccaa2*t55552*t55492*t55485* \
               t55486*(gamma_bb[index]*gcaa*t55574*(1.76E2/9.0)+t55485*t55486*t55559*(3.04E2/9.0))-ccaa4*t55548*t55487* \
               t55488*t55489*(gamma_bb[index]*gcaa*t55574*(3.52E2/9.0)+t55485*t55486*t55559*(6.08E2/3.0)+t55584*t55487* \
               t55488*(1.12E3/9.0)+gamma_bb[index]*gcaa*t55556*t55485*t55486*2.88E2)+ccaa2*(t55551*t55551)*1.0/(t55518* \
               t55518*t55518)*t55492*t55485*t55486*2.0+ccaa4*1.0/(t55506*t55506*t55506)*(t55547*t55547)*t55487*t55488* \
               t55489*2.0+ccaa3*gamma_bb[index]*gcaa*t55515*t55556*t55485*t55486*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               1.0/(t55509*t55509*t55509)*t55556*t55485*t55486*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t55514* \
               t55514*t55514)*(t55541*t55541)*t55491*t55485*t55486*2.0-ccaa3*gamma_bb[index]*gcaa*t55542*t55491*t55485* \
               t55486*(gamma_bb[index]*gcaa*t55574*(8.8E1/3.0)+t55485*t55486*t55559*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t55556*t55485*t55486*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t55522*t55541*t55542*t55485*t55486*1.6E1) \
               +c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t55590*t55574*(8.8E1/9.0)-cx1*t55554*t55485* \
               t55559*t55595*2.4E1+cx2*t55554*t55592*t55485*t55559*(3.04E2/9.0)+cx4*t55555*t55584*t55487*t55589*(1.12E3/ \
               9.0)-cx2*t55520*t55554*t55485*t55566*t55588*(3.2E1/3.0)-cx4*t55523*t55560*t55555*t55585*t55487*(6.4E1/ \
               3.0)-cx2*t55554*t55492*t55485*t55588*(gamma_bb[index]*gx*t55574*(1.76E2/9.0)+t55554*t55485*t55559* \
               (3.04E2/9.0))-cx4*t55555*t55585*t55487*t55489*(gamma_bb[index]*gx*t55574*(3.52E2/9.0)+t55554*t55485* \
               t55559*(6.08E2/3.0)+t55555*t55584*t55487*(1.12E3/9.0)+gamma_bb[index]*gx*t55554*t55556*t55485*2.88E2) \
               +cx2*t55554*t55492*t55485*(t55566*t55566)*1.0/(t55569*t55569*t55569)*2.0+cx4*(t55560*t55560)*t55555* \
               1.0/(t55565*t55565*t55565)*t55487*t55489*2.0+cx3*gamma_bb[index]*gx*t55554*t55591*t55556*t55485*7.2E1+ \
               cx1*gamma_bb[index]*gx*t55554*t55556*t55485*1.0/(t55558*t55558*t55558)*(1.28E2/9.0)+cx3*gamma_bb[index]* \
               gx*t55491*t55554*1.0/(t55573*t55573*t55573)*t55485*(t55579*t55579)*2.0-cx3*gamma_bb[index]*gx*t55491* \
               t55554*t55485*t55575*(gamma_bb[index]*gx*t55574*(8.8E1/3.0)+t55554*t55485*t55559*(3.04E2/3.0)+gamma_bb[index]* \
               gx*t55554*t55556*t55485*7.2E1)-cx3*gamma_bb[index]*gx*t55522*t55554*t55485*t55575*t55579*1.6E1)+c0* \
               t55454*(cx0+cx1*gamma_bb[index]*gx*t55490*t55590+cx2*t55554*t55492*t55592*t55485+cx4*t55555*t55487* \
               t55489*t55589+cx3*gamma_bb[index]*gx*t55491*t55554*t55591*t55485)*(4.0/9.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t53683 = 1.0/pow(rho_a[index],1.0/3.0);
                double t53684 = c*t53683;
                double t53685 = sqrt(t53684);
                double t53686 = pow(t53684,3.0/2.0);
                double t53687 = c*c;
                double t53688 = 1.0/pow(rho_a[index],2.0/3.0);
                double t53689 = 1.0/c0p;
                double t53690 = b1p*t53685;
                double t53691 = b3p*t53686;
                double t53692 = b4p*t53687*t53688;
                double t53693 = b2p*c*t53683;
                double t53694 = t53690+t53691+t53692+t53693;
                double t53695 = 1.0/t53694;
                double t53696 = t53695*t53689*(1.0/2.0);
                double t53697 = t53696+1.0;
                double t53698 = log(t53697);
                double t53699 = a1p*c*t53683;
                double t53700 = t53699+1.0;
                double t53701 = 1.0/pow(rho_a[index],8.0/3.0);
                double t53702 = gamma_aa[index]*gamma_aa[index];
                double t53703 = gcaa*gcaa;
                double t53704 = t53703*t53703;
                double t53705 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t53706 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t53707 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t53708 = gamma_aa[index]*gcaa*t53701;
                double t53709 = t53708+1.0;
                double t53710 = gamma_aa[index]*gcaa*t53701*3.0;
                double t53711 = gamma_aa[index]*gcaa*t53702*t53703*t53707;
                double t53712 = t53702*t53703*t53706*3.0;
                double t53713 = t53710+t53711+t53712+1.0;
                double t53714 = t53702*t53702;
                double t53715 = gamma_aa[index]*gcaa*t53701*4.0;
                double t53716 = gamma_aa[index]*gcaa*t53702*t53703*t53707*4.0;
                double t53717 = t53702*t53703*t53706*6.0;
                double t53718 = t53704*t53705*t53714;
                double t53719 = t53715+t53716+t53717+t53718+1.0;
                double t53720 = gamma_aa[index]*gcaa*t53701*2.0;
                double t53721 = t53702*t53703*t53706;
                double t53722 = t53720+t53721+1.0;
                double t53723 = rho_a[index]+rho_b[index];
                double t53724 = 1.0/pow(t53723,1.0/3.0);
                double t53725 = c*t53724;
                double t53726 = sqrt(t53725);
                double t53727 = b1p*t53726;
                double t53728 = pow(t53725,3.0/2.0);
                double t53729 = b3p*t53728;
                double t53730 = 1.0/pow(t53723,2.0/3.0);
                double t53731 = b4p*t53730*t53687;
                double t53732 = b2p*c*t53724;
                double t53733 = t53731+t53732+t53727+t53729;
                double t53734 = 1.0/pow(t53723,4.0/3.0);
                double t53735 = two_13*2.0;
                double t53736 = t53735-2.0;
                double t53737 = 1.0/t53736;
                double t53738 = 1.0/c0f;
                double t53739 = 1.0/t53733;
                double t53740 = t53739*t53689*(1.0/2.0);
                double t53741 = t53740+1.0;
                double t53742 = a1p*c*t53724;
                double t53743 = t53742+1.0;
                double t53744 = rho_a[index]-rho_b[index];
                double t53745 = t53744*t53744;
                double t53746 = 1.0/t53723;
                double t53747 = t53744*t53746;
                double t53748 = b1f*t53726;
                double t53749 = b3f*t53728;
                double t53750 = b4f*t53730*t53687;
                double t53751 = b2f*c*t53724;
                double t53752 = t53750+t53751+t53748+t53749;
                double t53753 = 1.0/t53752;
                double t53754 = t53753*t53738*(1.0/2.0);
                double t53755 = t53754+1.0;
                double t53756 = log(t53755);
                double t53757 = a1f*c*t53724;
                double t53758 = t53757+1.0;
                double t53759 = log(t53741);
                double t53769 = c0f*t53756*t53758*2.0;
                double t53770 = c0p*t53743*t53759*2.0;
                double t53760 = -t53770+t53769;
                double t53761 = t53747+1.0;
                double t53762 = pow(t53761,4.0/3.0);
                double t53763 = -t53747+1.0;
                double t53764 = pow(t53763,4.0/3.0);
                double t53765 = t53762+t53764-2.0;
                double t53766 = 1.0/(t53723*t53723);
                double t53797 = t53744*t53766;
                double t53767 = t53746-t53797;
                double t53768 = 1.0/(t53723*t53723*t53723*t53723);
                double t53771 = t53745*t53745;
                double t53772 = 1.0/pow(t53723,5.0/3.0);
                double t53773 = 1.0/sqrt(t53725);
                double t53774 = 1.0/t53741;
                double t53775 = 1.0/(t53733*t53733);
                double t53776 = b4p*t53772*t53687*(2.0/3.0);
                double t53777 = b2p*c*t53734*(1.0/3.0);
                double t53778 = b1p*c*t53734*t53773*(1.0/6.0);
                double t53779 = b3p*c*t53734*t53726*(1.0/2.0);
                double t53780 = t53776+t53777+t53778+t53779;
                double t53781 = t53743*t53780*t53774*t53775;
                double t53782 = 1.0/(t53723*t53723*t53723*t53723*t53723);
                double t53783 = 1.0/d2fz0;
                double t53784 = 1.0/Aa;
                double t53785 = b1a*t53726;
                double t53786 = b3a*t53728;
                double t53787 = b4a*t53730*t53687;
                double t53788 = b2a*c*t53724;
                double t53789 = t53785+t53786+t53787+t53788;
                double t53790 = 1.0/t53789;
                double t53791 = t53790*t53784*(1.0/2.0);
                double t53792 = t53791+1.0;
                double t53793 = log(t53792);
                double t53794 = a1a*c*t53724;
                double t53795 = t53794+1.0;
                double t53796 = pow(t53761,1.0/3.0);
                double t53798 = t53767*t53796*(4.0/3.0);
                double t53799 = pow(t53763,1.0/3.0);
                double t53800 = t53798-t53767*t53799*(4.0/3.0);
                double t53801 = t53771*t53768;
                double t53802 = t53801-1.0;
                double t53803 = pow(2.0,1.0/3.0);
                double t53804 = t53803*2.0;
                double t53805 = t53804-2.0;
                double t53806 = a1f*c*t53683;
                double t53807 = t53806+1.0;
                double t53808 = b1f*t53685;
                double t53809 = b3f*t53686;
                double t53810 = b4f*t53687*t53688;
                double t53811 = b2f*c*t53683;
                double t53812 = t53810+t53811+t53808+t53809;
                double t53813 = 1.0/t53812;
                double t53814 = t53813*t53738*(1.0/2.0);
                double t53815 = t53814+1.0;
                double t53816 = 1.0/pow(rho_a[index],4.0/3.0);
                double t53817 = 1.0/pow(rho_a[index],5.0/3.0);
                double t53818 = 1.0/sqrt(t53684);
                double t53819 = log(t53815);
                double t53820 = 1.0/t53697;
                double t53821 = 1.0/(t53694*t53694);
                double t53822 = b4p*t53817*t53687*(2.0/3.0);
                double t53823 = b2p*c*t53816*(1.0/3.0);
                double t53824 = b1p*c*t53816*t53818*(1.0/6.0);
                double t53825 = b3p*c*t53816*t53685*(1.0/2.0);
                double t53826 = t53822+t53823+t53824+t53825;
                double t53827 = t53700*t53820*t53821*t53826;
                double t53828 = c0f*t53807*t53819*2.0;
                double t53829 = c0p*t53700*t53698*2.0;
                double t53830 = gamma_aa[index]*t53701*(1.0/2.0);
                double t53831 = 1.0/pow(rho_b[index],8.0/3.0);
                double t53832 = gamma_bb[index]*t53831*(1.0/2.0);
                double t53833 = t53830+t53832;
                double t53834 = gcab*t53833;
                double t53835 = t53834+1.0;
                double t53836 = gcab*gcab;
                double t53837 = t53833*t53833;
                double t53838 = t53836*t53836;
                double t53839 = t53837*t53837;
                double t53840 = t53836*t53837;
                double t53841 = gcab*t53833*2.0;
                double t53842 = t53840+t53841+1.0;
                double t53843 = t53836*t53837*3.0;
                double t53844 = gcab*t53833*t53836*t53837;
                double t53845 = gcab*t53833*3.0;
                double t53846 = t53843+t53844+t53845+1.0;
                double t53847 = t53836*t53837*6.0;
                double t53848 = gcab*t53833*t53836*t53837*4.0;
                double t53849 = t53838*t53839;
                double t53850 = gcab*t53833*4.0;
                double t53851 = t53850+t53847+t53848+t53849+1.0;
                double t53852 = t53828-t53829;
                double t53853 = 1.0/pow(rho_b[index],1.0/3.0);
                double t53854 = c*t53853;
                double t53855 = sqrt(t53854);
                double t53856 = pow(t53854,3.0/2.0);
                double t53857 = 1.0/pow(rho_b[index],2.0/3.0);
                double t53858 = b1p*t53855;
                double t53859 = b3p*t53856;
                double t53860 = b4p*t53857*t53687;
                double t53861 = b2p*c*t53853;
                double t53862 = t53860+t53861+t53858+t53859;
                double t53863 = 1.0/t53862;
                double t53864 = t53863*t53689*(1.0/2.0);
                double t53865 = t53864+1.0;
                double t53866 = log(t53865);
                double t53867 = a1p*c*t53853;
                double t53868 = t53867+1.0;
                double t53869 = c0p*t53866*t53868*2.0;
                double t53870 = t53760*t53771*t53737*t53765*t53768;
                double t53871 = Aa*t53802*t53737*t53765*t53783*t53793*t53795*2.0;
                double t53872 = 1.0/t53835;
                double t53873 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t53874 = 1.0/(t53835*t53835);
                double t53875 = 1.0/t53842;
                double t53876 = 1.0/(t53846*t53846);
                double t53877 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t53878 = 1.0/(t53842*t53842);
                double t53879 = 1.0/t53846;
                double t53880 = 1.0/t53851;
                double t53881 = 1.0/(t53851*t53851);
                double t53882 = gcab*t53701*2.0;
                double t53883 = t53701*t53833*t53836*6.0;
                double t53884 = gcab*t53701*t53836*t53837*6.0;
                double t53885 = t53701*t53833*t53837*t53838*2.0;
                double t53886 = t53882+t53883+t53884+t53885;
                double t53887 = gamma_aa[index]*gcab*t53873*(8.0/3.0);
                double t53888 = gamma_aa[index]*t53833*t53836*t53873*(8.0/3.0);
                double t53889 = t53887+t53888;
                double t53890 = gcab*t53701;
                double t53891 = t53701*t53833*t53836;
                double t53892 = t53890+t53891;
                double t53893 = gamma_aa[index]*gcab*t53873*(1.6E1/3.0);
                double t53894 = gamma_aa[index]*gcab*t53836*t53837*t53873*1.6E1;
                double t53895 = gamma_aa[index]*t53833*t53837*t53873*t53838*(1.6E1/3.0);
                double t53896 = gamma_aa[index]*t53833*t53836*t53873*1.6E1;
                double t53897 = t53893+t53894+t53895+t53896;
                double t53898 = gcab*t53701*(3.0/2.0);
                double t53899 = t53701*t53833*t53836*3.0;
                double t53900 = gcab*t53701*t53836*t53837*(3.0/2.0);
                double t53901 = t53900+t53898+t53899;
                double t53902 = gamma_aa[index]*gcab*t53873*4.0;
                double t53903 = gamma_aa[index]*gcab*t53836*t53837*t53873*4.0;
                double t53904 = gamma_aa[index]*t53833*t53836*t53873*8.0;
                double t53905 = t53902+t53903+t53904;
                double t53906 = gx*gx;
                double t53907 = t53906*t53906;
                double t53908 = gamma_aa[index]*gx*t53701;
                double t53909 = t53908+1.0;
                double t53910 = gamma_aa[index]*gx*t53701*3.0;
                double t53911 = gamma_aa[index]*gx*t53702*t53707*t53906;
                double t53912 = t53702*t53706*t53906*3.0;
                double t53913 = t53910+t53911+t53912+1.0;
                double t53914 = gamma_aa[index]*gx*t53701*4.0;
                double t53915 = gamma_aa[index]*gx*t53702*t53707*t53906*4.0;
                double t53916 = t53702*t53706*t53906*6.0;
                double t53917 = t53705*t53714*t53907;
                double t53918 = t53914+t53915+t53916+t53917+1.0;
                double t53919 = gamma_aa[index]*gx*t53701*2.0;
                double t53920 = t53702*t53706*t53906;
                double t53921 = t53920+t53919+1.0;
                double t53922 = t53805*t53852*t53737;
                double t53923 = t53922+t53829;
                double t53924 = 1.0/t53709;
                double t53925 = 1.0/t53719;
                double t53926 = 1.0/t53722;
                double t53927 = 1.0/t53713;
                double t53928 = 1.0/(t53709*t53709);
                double t53929 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t53930 = 1.0/(t53713*t53713);
                double t53931 = 1.0/(t53722*t53722);
                double t53932 = gcaa*t53701*3.0;
                double t53933 = gamma_aa[index]*t53703*t53706*6.0;
                double t53934 = gcaa*t53702*t53703*t53707*3.0;
                double t53935 = t53932+t53933+t53934;
                double t53936 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t53937 = 1.0/(t53719*t53719);
                double t53938 = gcaa*t53701*4.0;
                double t53939 = gamma_aa[index]*t53703*t53706*1.2E1;
                double t53940 = gcaa*t53702*t53703*t53707*1.2E1;
                double t53941 = gamma_aa[index]*t53702*t53704*t53705*4.0;
                double t53942 = t53940+t53941+t53938+t53939;
                double t53943 = gcaa*t53701*2.0;
                double t53944 = gamma_aa[index]*t53703*t53706*2.0;
                double t53945 = t53943+t53944;
                double t53946 = gamma_aa[index]*gcaa*t53873*(1.6E1/3.0);
                double t53947 = t53702*t53703*t53877*(1.6E1/3.0);
                double t53948 = t53946+t53947;
                double t53949 = gamma_aa[index]*gcaa*t53873*8.0;
                double t53950 = gamma_aa[index]*gcaa*t53702*t53703*t53929*8.0;
                double t53951 = t53702*t53703*t53877*1.6E1;
                double t53952 = t53950+t53951+t53949;
                double t53953 = gamma_aa[index]*gcaa*t53873*(3.2E1/3.0);
                double t53954 = gamma_aa[index]*gcaa*t53702*t53703*t53929*3.2E1;
                double t53955 = t53702*t53703*t53877*3.2E1;
                double t53956 = t53704*t53714*t53936*(3.2E1/3.0);
                double t53957 = t53953+t53954+t53955+t53956;
                double t53958 = 1.0/t53815;
                double t53959 = 1.0/(t53812*t53812);
                double t53960 = b4f*t53817*t53687*(2.0/3.0);
                double t53961 = b2f*c*t53816*(1.0/3.0);
                double t53962 = b1f*c*t53816*t53818*(1.0/6.0);
                double t53963 = b3f*c*t53816*t53685*(1.0/2.0);
                double t53964 = t53960+t53961+t53962+t53963;
                double t53965 = a1f*c*c0f*t53816*t53819*(2.0/3.0);
                double t53966 = a1p*c*c0p*t53816*t53698*(2.0/3.0);
                double t53967 = ccaa1*gcaa*t53701*t53924;
                double t53968 = ccaa4*gamma_aa[index]*t53702*t53704*t53705*t53925*4.0;
                double t53969 = ccaa2*gamma_aa[index]*t53703*t53706*t53926*2.0;
                double t53970 = ccaa3*gcaa*t53702*t53703*t53707*t53927*3.0;
                double t53971 = t53970+t53967+t53968+t53969-ccaa1*gamma_aa[index]*t53703*t53706*t53928-ccaa2*t53702* \
                   t53703*t53706*t53931*t53945-ccaa4*t53704*t53705*t53714*t53942*t53937-ccaa3*gamma_aa[index]*gcaa*t53702* \
                   t53703*t53930*t53707*t53935;
                double t53972 = 1.0/t53909;
                double t53973 = 1.0/t53918;
                double t53974 = 1.0/t53921;
                double t53975 = 1.0/t53913;
                double t53976 = 1.0/(t53909*t53909);
                double t53977 = 1.0/(t53913*t53913);
                double t53978 = 1.0/(t53921*t53921);
                double t53979 = gx*t53701*3.0;
                double t53980 = gamma_aa[index]*t53706*t53906*6.0;
                double t53981 = gx*t53702*t53707*t53906*3.0;
                double t53982 = t53980+t53981+t53979;
                double t53983 = 1.0/(t53918*t53918);
                double t53984 = gx*t53701*4.0;
                double t53985 = gamma_aa[index]*t53706*t53906*1.2E1;
                double t53986 = gx*t53702*t53707*t53906*1.2E1;
                double t53987 = gamma_aa[index]*t53702*t53705*t53907*4.0;
                double t53988 = t53984+t53985+t53986+t53987;
                double t53989 = gx*t53701*2.0;
                double t53990 = gamma_aa[index]*t53706*t53906*2.0;
                double t53991 = t53990+t53989;
                double t53992 = gamma_aa[index]*gx*t53873*(1.6E1/3.0);
                double t53993 = t53702*t53906*t53877*(1.6E1/3.0);
                double t53994 = t53992+t53993;
                double t53995 = gamma_aa[index]*gx*t53873*8.0;
                double t53996 = gamma_aa[index]*gx*t53702*t53906*t53929*8.0;
                double t53997 = t53702*t53906*t53877*1.6E1;
                double t53998 = t53995+t53996+t53997;
                double t53999 = gamma_aa[index]*gx*t53873*(3.2E1/3.0);
                double t54000 = gamma_aa[index]*gx*t53702*t53906*t53929*3.2E1;
                double t54001 = t53702*t53906*t53877*3.2E1;
                double t54002 = t53714*t53907*t53936*(3.2E1/3.0);
                double t54003 = t53999+t54000+t54001+t54002;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t53923+rho_b[index]*(t53869-t53805*t53737*(t53869-c0f*log((t53738* \
                   (1.0/2.0))/(b1f*t53855+b3f*t53856+b2f*c*t53853+b4f*t53857*t53687)+1.0)*(a1f*c*t53853+1.0)*2.0))-t53723* \
                   (t53770+t53870+t53871))*(ccab1*gcab*t53872*t53873*(4.0/3.0)-ccab2*t53836*t53837*t53878*(gcab*t53873* \
                   (8.0/3.0)+gamma_aa[index]*t53836*t53877*(4.0/3.0)+t53833*t53836*t53873*(8.0/3.0))-ccab4*t53881*t53838* \
                   t53839*(gcab*t53873*(1.6E1/3.0)+gamma_aa[index]*t53836*t53877*8.0+t53833*t53836*t53873*1.6E1+gamma_aa[index]* \
                   t53837*t53838*t53877*8.0+gcab*t53836*t53837*t53873*1.6E1+t53833*t53837*t53873*t53838*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t53833*t53836*t53877*1.6E1)-ccab1*gamma_aa[index]*t53836*t53874*t53877*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t53836*t53875*t53877*(4.0/3.0)-ccab1*t53833*t53836*t53873*t53874*(4.0/3.0)+ccab2*t53833*t53836*t53873* \
                   t53875*(8.0/3.0)-ccab2*t53701*t53833*t53836*t53878*t53889+ccab4*t53833*t53880*t53837*t53873*t53838* \
                   (1.6E1/3.0)+ccab2*1.0/(t53842*t53842*t53842)*t53836*t53837*t53892*t53889*2.0+ccab4*1.0/(t53851*t53851* \
                   t53851)*t53838*t53839*t53886*t53897*2.0+ccab4*gamma_aa[index]*t53880*t53837*t53838*t53877*8.0+ccab3* \
                   gcab*t53836*t53837*t53873*t53879*4.0+ccab3*gamma_aa[index]*gcab*t53833*t53836*t53877*t53879*4.0-ccab2* \
                   gamma_aa[index]*t53833*t53836*t53873*t53892*t53878*(8.0/3.0)-ccab3*gcab*t53701*t53905*t53836*t53837* \
                   t53876*(3.0/2.0)-ccab4*t53701*t53833*t53881*t53837*t53838*t53897*2.0-ccab3*gcab*t53833*t53836*t53837* \
                   t53876*(gcab*t53873*4.0+gamma_aa[index]*t53836*t53877*4.0+t53833*t53836*t53873*8.0+gcab*t53836*t53837* \
                   t53873*4.0+gamma_aa[index]*gcab*t53833*t53836*t53877*4.0)+ccab1*gamma_aa[index]*gcab*t53833*1.0/(t53835* \
                   t53835*t53835)*t53836*t53877*(4.0/3.0)+ccab3*gcab*t53901*t53833*t53905*t53836*t53837*1.0/(t53846*t53846* \
                   t53846)*2.0-ccab3*gamma_aa[index]*gcab*t53901*t53836*t53837*t53873*t53876*4.0-ccab4*gamma_aa[index]* \
                   t53833*t53881*t53837*t53873*t53838*t53886*(1.6E1/3.0))-t53971*(t53829+t53805*t53737*(t53828-c0p*t53700* \
                   t53698*2.0))-(t53770+t53870+t53871-t53829+t53723*(t53781-t53771*t53737*t53765*t53768*(t53781-(1.0/ \
                   (t53752*t53752)*t53758*(b2f*c*t53734*(1.0/3.0)+b4f*t53772*t53687*(2.0/3.0)+b1f*c*t53734*t53773*(1.0/ \
                   6.0)+b3f*c*t53734*t53726*(1.0/2.0)))/t53755+a1f*c*c0f*t53734*t53756*(2.0/3.0)-a1p*c*c0p*t53734*t53759* \
                   (2.0/3.0))-a1p*c*c0p*t53734*t53759*(2.0/3.0)+t53800*t53760*t53771*t53737*t53768-t53760*t53771*t53737* \
                   t53782*t53765*4.0+t53760*t53744*t53745*t53737*t53765*t53768*4.0-Aa*t53737*t53765*t53783*t53793*t53795* \
                   (t53771*t53782*4.0-t53744*t53745*t53768*4.0)*2.0+Aa*t53800*t53802*t53737*t53783*t53793*t53795*2.0+ \
                   (t53802*t53737*t53765*t53783*t53795*1.0/(t53789*t53789)*(b2a*c*t53734*(1.0/3.0)+b4a*t53772*t53687* \
                   (2.0/3.0)+b1a*c*t53734*t53773*(1.0/6.0)+b3a*c*t53734*t53726*(1.0/2.0)))/t53792-Aa*a1a*c*t53802*t53734* \
                   t53737*t53765*t53783*t53793*(2.0/3.0))+rho_a[index]*(-t53827+t53966+t53805*t53737*(t53827+t53965-t53807* \
                   t53964*t53958*t53959-a1p*c*c0p*t53816*t53698*(2.0/3.0)))-t53805*t53852*t53737)*(ccab1*gcab*t53701* \
                   t53872*(1.0/2.0)-ccab1*t53701*t53833*t53836*t53874*(1.0/2.0)+ccab2*t53701*t53833*t53836*t53875-ccab2* \
                   t53836*t53837*t53892*t53878-ccab4*t53881*t53838*t53839*t53886+ccab4*t53701*t53833*t53880*t53837*t53838* \
                   2.0+ccab3*gcab*t53701*t53836*t53837*t53879*(3.0/2.0)-ccab3*gcab*t53901*t53833*t53836*t53837*t53876) \
                   -rho_a[index]*t53923*(ccaa1*gcaa*t53924*t53873*(-8.0/3.0)-ccaa2*gamma_aa[index]*t53703*t53926*t53877* \
                   (3.2E1/3.0)+ccaa1*gamma_aa[index]*t53703*t53928*t53877*8.0+ccaa2*t53702*t53703*t53931*t53945*t53877* \
                   (1.6E1/3.0)+ccaa4*t53704*t53714*t53942*t53936*t53937*(3.2E1/3.0)+ccaa4*t53704*t53705*t53714*t53937* \
                   (gcaa*t53873*(3.2E1/3.0)+gamma_aa[index]*t53703*t53877*6.4E1+gamma_aa[index]*t53702*t53704*t53936* \
                   (1.28E2/3.0)+gcaa*t53702*t53703*t53929*9.6E1)-ccaa1*gcaa*t53702*t53703*1.0/(t53709*t53709*t53709)* \
                   t53929*(1.6E1/3.0)+ccaa2*t53702*t53703*t53706*t53931*(gcaa*t53873*(1.6E1/3.0)+gamma_aa[index]*t53703* \
                   t53877*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t53702*t53704*t53925*t53936*(1.28E2/3.0)+ccaa2*gamma_aa[index]* \
                   t53703*t53706*t53931*t53948*2.0-ccaa3*gcaa*t53702*t53703*t53927*t53929*2.4E1+ccaa4*gamma_aa[index]* \
                   t53702*t53704*t53705*t53937*t53957*4.0+ccaa3*gcaa*t53702*t53703*t53930*t53707*t53952*3.0-ccaa2*t53702* \
                   t53703*1.0/(t53722*t53722*t53722)*t53706*t53945*t53948*2.0-ccaa4*t53704*t53705*t53714*t53942*1.0/(t53719* \
                   t53719*t53719)*t53957*2.0+ccaa3*gamma_aa[index]*gcaa*t53702*t53703*t53930*t53707*(gcaa*t53873*8.0+ \
                   gamma_aa[index]*t53703*t53877*3.2E1+gcaa*t53702*t53703*t53929*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t53702* \
                   t53703*t53930*t53935*t53929*8.0-ccaa3*gamma_aa[index]*gcaa*t53702*t53703*1.0/(t53713*t53713*t53713) \
                   *t53707*t53952*t53935*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t53873*t53972*(-8.0/3.0)+cx1*gamma_aa[index]* \
                   t53906*t53877*t53976*8.0-cx2*gamma_aa[index]*t53906*t53974*t53877*(3.2E1/3.0)+cx2*t53702*t53906*t53991* \
                   t53877*t53978*(1.6E1/3.0)+cx4*t53714*t53907*t53936*t53983*t53988*(3.2E1/3.0)+cx4*t53705*t53714*t53907* \
                   t53983*(gx*t53873*(3.2E1/3.0)+gamma_aa[index]*t53906*t53877*6.4E1+gamma_aa[index]*t53702*t53907*t53936* \
                   (1.28E2/3.0)+gx*t53702*t53906*t53929*9.6E1)-cx1*gx*t53702*t53906*1.0/(t53909*t53909*t53909)*t53929* \
                   (1.6E1/3.0)+cx2*t53702*t53706*t53906*t53978*(gx*t53873*(1.6E1/3.0)+gamma_aa[index]*t53906*t53877*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t53706*t53906*t53994*t53978*2.0-cx4*gamma_aa[index]*t53702*t53907*t53936* \
                   t53973*(1.28E2/3.0)-cx3*gx*t53702*t53906*t53929*t53975*2.4E1+cx4*gamma_aa[index]*t53702*t53705*t53907* \
                   t53983*t54003*4.0+cx3*gx*t53702*t53707*t53906*t53977*t53998*3.0-cx2*t53702*1.0/(t53921*t53921*t53921) \
                   *t53706*t53906*t53991*t53994*2.0-cx4*t53705*t53714*t53907*1.0/(t53918*t53918*t53918)*t53988*t54003* \
                   2.0+cx3*gamma_aa[index]*gx*t53702*t53707*t53906*t53977*(gx*t53873*8.0+gamma_aa[index]*t53906*t53877* \
                   3.2E1+gx*t53702*t53906*t53929*2.4E1)+cx3*gamma_aa[index]*gx*t53702*t53906*t53982*t53929*t53977*8.0- \
                   cx3*gamma_aa[index]*gx*t53702*1.0/(t53913*t53913*t53913)*t53707*t53906*t53982*t53998*2.0)+rho_a[index]* \
                   t53971*(-t53827+t53966+t53805*t53737*(t53827+t53965-t53966-t53807*t53964*t53958*t53959))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t53701*t53972-cx1*gamma_aa[index]*t53706*t53906*t53976+cx2*gamma_aa[index]*t53706*t53906* \
                   t53974*2.0-cx2*t53702*t53706*t53906*t53991*t53978-cx4*t53705*t53714*t53907*t53983*t53988+cx4*gamma_aa[index]* \
                   t53702*t53705*t53907*t53973*4.0+cx3*gx*t53702*t53707*t53906*t53975*3.0-cx3*gamma_aa[index]*gx*t53702* \
                   t53707*t53906*t53982*t53977)*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t56256 = 1.0/pow(rho_a[index],1.0/3.0);
                double t56257 = c*t56256;
                double t56258 = sqrt(t56257);
                double t56259 = pow(t56257,3.0/2.0);
                double t56260 = c*c;
                double t56261 = 1.0/pow(rho_a[index],2.0/3.0);
                double t56262 = 1.0/c0p;
                double t56263 = b1p*t56258;
                double t56264 = b3p*t56259;
                double t56265 = b4p*t56260*t56261;
                double t56266 = b2p*c*t56256;
                double t56267 = t56263+t56264+t56265+t56266;
                double t56268 = 1.0/t56267;
                double t56269 = t56262*t56268*(1.0/2.0);
                double t56270 = t56269+1.0;
                double t56271 = log(t56270);
                double t56272 = a1p*c*t56256;
                double t56273 = t56272+1.0;
                double t56274 = 1.0/pow(rho_a[index],8.0/3.0);
                double t56275 = gamma_aa[index]*gamma_aa[index];
                double t56276 = gcaa*gcaa;
                double t56277 = t56276*t56276;
                double t56278 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t56279 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t56280 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t56281 = gamma_aa[index]*gcaa*t56274;
                double t56282 = t56281+1.0;
                double t56283 = gamma_aa[index]*gcaa*t56274*3.0;
                double t56284 = gamma_aa[index]*gcaa*t56280*t56275*t56276;
                double t56285 = t56275*t56276*t56279*3.0;
                double t56286 = t56283+t56284+t56285+1.0;
                double t56287 = t56275*t56275;
                double t56288 = gamma_aa[index]*gcaa*t56274*4.0;
                double t56289 = gamma_aa[index]*gcaa*t56280*t56275*t56276*4.0;
                double t56290 = t56275*t56276*t56279*6.0;
                double t56291 = t56277*t56278*t56287;
                double t56292 = t56290+t56291+t56288+t56289+1.0;
                double t56293 = gamma_aa[index]*gcaa*t56274*2.0;
                double t56294 = t56275*t56276*t56279;
                double t56295 = t56293+t56294+1.0;
                double t56296 = gx*gx;
                double t56297 = t56296*t56296;
                double t56298 = gamma_aa[index]*gx*t56274;
                double t56299 = t56298+1.0;
                double t56300 = gamma_aa[index]*gx*t56274*3.0;
                double t56301 = gamma_aa[index]*gx*t56280*t56275*t56296;
                double t56302 = t56275*t56296*t56279*3.0;
                double t56303 = t56300+t56301+t56302+1.0;
                double t56304 = gamma_aa[index]*gx*t56274*4.0;
                double t56305 = gamma_aa[index]*gx*t56280*t56275*t56296*4.0;
                double t56306 = t56275*t56296*t56279*6.0;
                double t56307 = t56278*t56287*t56297;
                double t56308 = t56304+t56305+t56306+t56307+1.0;
                double t56309 = gamma_aa[index]*gx*t56274*2.0;
                double t56310 = t56275*t56296*t56279;
                double t56311 = t56310+t56309+1.0;
                double t56312 = pow(2.0,1.0/3.0);
                double t56313 = t56312*2.0;
                double t56314 = t56313-2.0;
                double t56315 = two_13*2.0;
                double t56316 = t56315-2.0;
                double t56317 = 1.0/t56316;
                double t56318 = 1.0/c0f;
                double t56319 = b1f*t56258;
                double t56320 = b3f*t56259;
                double t56321 = b4f*t56260*t56261;
                double t56322 = b2f*c*t56256;
                double t56323 = t56320+t56321+t56322+t56319;
                double t56324 = 1.0/t56323;
                double t56325 = t56324*t56318*(1.0/2.0);
                double t56326 = t56325+1.0;
                double t56327 = log(t56326);
                double t56328 = a1f*c*t56256;
                double t56329 = t56328+1.0;
                double t56330 = c0f*t56327*t56329*2.0;
                double t56331 = c0p*t56271*t56273*2.0;
                double t56332 = 1.0/t56282;
                double t56333 = 1.0/t56292;
                double t56334 = 1.0/t56295;
                double t56335 = 1.0/t56286;
                double t56336 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t56337 = 1.0/(t56282*t56282);
                double t56338 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t56339 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t56340 = 1.0/(t56286*t56286);
                double t56341 = 1.0/(t56295*t56295);
                double t56342 = gcaa*t56274*3.0;
                double t56343 = gamma_aa[index]*t56276*t56279*6.0;
                double t56344 = gcaa*t56280*t56275*t56276*3.0;
                double t56345 = t56342+t56343+t56344;
                double t56346 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t56347 = 1.0/(t56292*t56292);
                double t56348 = gcaa*t56274*4.0;
                double t56349 = gamma_aa[index]*t56276*t56279*1.2E1;
                double t56350 = gcaa*t56280*t56275*t56276*1.2E1;
                double t56351 = gamma_aa[index]*t56275*t56277*t56278*4.0;
                double t56352 = t56350+t56351+t56348+t56349;
                double t56353 = gcaa*t56274*2.0;
                double t56354 = gamma_aa[index]*t56276*t56279*2.0;
                double t56355 = t56353+t56354;
                double t56356 = gamma_aa[index]*gcaa*t56339*(1.6E1/3.0);
                double t56357 = t56336*t56275*t56276*(1.6E1/3.0);
                double t56358 = t56356+t56357;
                double t56359 = gamma_aa[index]*gcaa*t56339*8.0;
                double t56360 = gamma_aa[index]*gcaa*t56275*t56338*t56276*8.0;
                double t56361 = t56336*t56275*t56276*1.6E1;
                double t56362 = t56360+t56361+t56359;
                double t56363 = gamma_aa[index]*gcaa*t56339*(3.2E1/3.0);
                double t56364 = gamma_aa[index]*gcaa*t56275*t56338*t56276*3.2E1;
                double t56365 = t56336*t56275*t56276*3.2E1;
                double t56366 = t56346*t56277*t56287*(3.2E1/3.0);
                double t56367 = t56363+t56364+t56365+t56366;
                double t56368 = 1.0/pow(rho_a[index],4.0/3.0);
                double t56369 = 1.0/pow(rho_a[index],5.0/3.0);
                double t56370 = 1.0/sqrt(t56257);
                double t56371 = 1.0/t56270;
                double t56372 = 1.0/(t56267*t56267);
                double t56373 = b4p*t56260*t56369*(2.0/3.0);
                double t56374 = b2p*c*t56368*(1.0/3.0);
                double t56375 = b1p*c*t56370*t56368*(1.0/6.0);
                double t56376 = b3p*c*t56258*t56368*(1.0/2.0);
                double t56377 = t56373+t56374+t56375+t56376;
                double t56378 = t56371*t56273*t56372*t56377;
                double t56379 = ccaa1*gcaa*t56332*t56274;
                double t56380 = ccaa4*gamma_aa[index]*t56333*t56275*t56277*t56278*4.0;
                double t56381 = ccaa2*gamma_aa[index]*t56334*t56276*t56279*2.0;
                double t56382 = ccaa3*gcaa*t56280*t56335*t56275*t56276*3.0;
                double t56383 = t56380+t56381+t56382+t56379-ccaa1*gamma_aa[index]*t56337*t56276*t56279-ccaa2*t56341* \
                   t56355*t56275*t56276*t56279-ccaa4*t56352*t56347*t56277*t56278*t56287-ccaa3*gamma_aa[index]*gcaa*t56340* \
                   t56280*t56345*t56275*t56276;
                double t56384 = 1.0/t56299;
                double t56385 = 1.0/t56308;
                double t56386 = 1.0/t56311;
                double t56387 = 1.0/t56303;
                double t56388 = 1.0/(t56299*t56299);
                double t56389 = 1.0/(t56303*t56303);
                double t56390 = 1.0/(t56311*t56311);
                double t56391 = gx*t56274*3.0;
                double t56392 = gamma_aa[index]*t56296*t56279*6.0;
                double t56393 = gx*t56280*t56275*t56296*3.0;
                double t56394 = t56391+t56392+t56393;
                double t56395 = 1.0/(t56308*t56308);
                double t56396 = gx*t56274*4.0;
                double t56397 = gamma_aa[index]*t56296*t56279*1.2E1;
                double t56398 = gx*t56280*t56275*t56296*1.2E1;
                double t56399 = gamma_aa[index]*t56275*t56278*t56297*4.0;
                double t56400 = t56396+t56397+t56398+t56399;
                double t56401 = gx*t56274*2.0;
                double t56402 = gamma_aa[index]*t56296*t56279*2.0;
                double t56403 = t56401+t56402;
                double t56404 = gamma_aa[index]*gx*t56339*(1.6E1/3.0);
                double t56405 = t56336*t56275*t56296*(1.6E1/3.0);
                double t56406 = t56404+t56405;
                double t56407 = gamma_aa[index]*gx*t56339*8.0;
                double t56408 = gamma_aa[index]*gx*t56275*t56338*t56296*8.0;
                double t56409 = t56336*t56275*t56296*1.6E1;
                double t56410 = t56407+t56408+t56409;
                double t56411 = gamma_aa[index]*gx*t56339*(3.2E1/3.0);
                double t56412 = gamma_aa[index]*gx*t56275*t56338*t56296*3.2E1;
                double t56413 = t56336*t56275*t56296*3.2E1;
                double t56414 = t56346*t56287*t56297*(3.2E1/3.0);
                double t56415 = t56411+t56412+t56413+t56414;
                v_rho_a_gamma_aa_[index] = -t56383*(t56331+t56314*t56317*(t56330-c0p*t56271*t56273*2.0))+rho_a[index]* \
                   t56383*(-t56378+t56314*t56317*(t56378-(1.0/(t56323*t56323)*t56329*(b2f*c*t56368*(1.0/3.0)+b4f*t56260* \
                   t56369*(2.0/3.0)+b1f*c*t56370*t56368*(1.0/6.0)+b3f*c*t56258*t56368*(1.0/2.0)))/t56326+a1f*c*c0f*t56327* \
                   t56368*(2.0/3.0)-a1p*c*c0p*t56271*t56368*(2.0/3.0))+a1p*c*c0p*t56271*t56368*(2.0/3.0))-rho_a[index]* \
                   (t56331+t56314*t56317*(t56330-t56331))*(ccaa1*gcaa*t56332*t56339*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t56334*t56336*t56276*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t56336*t56337*t56276*8.0+ccaa2*t56341*t56336* \
                   t56355*t56275*t56276*(1.6E1/3.0)+ccaa4*t56352*t56346*t56347*t56277*t56287*(3.2E1/3.0)+ccaa4*t56347* \
                   t56277*t56278*t56287*(gcaa*t56339*(3.2E1/3.0)+gamma_aa[index]*t56336*t56276*6.4E1+gamma_aa[index]* \
                   t56346*t56275*t56277*(1.28E2/3.0)+gcaa*t56275*t56338*t56276*9.6E1)-ccaa1*gcaa*1.0/(t56282*t56282*t56282) \
                   *t56275*t56338*t56276*(1.6E1/3.0)+ccaa2*t56341*t56275*t56276*t56279*(gcaa*t56339*(1.6E1/3.0)+gamma_aa[index]* \
                   t56336*t56276*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t56333*t56346*t56275*t56277*(1.28E2/3.0)+ccaa2*gamma_aa[index]* \
                   t56341*t56276*t56358*t56279*2.0-ccaa3*gcaa*t56335*t56275*t56338*t56276*2.4E1+ccaa4*gamma_aa[index]* \
                   t56275*t56347*t56277*t56367*t56278*4.0+ccaa3*gcaa*t56340*t56280*t56362*t56275*t56276*3.0-ccaa4*t56352* \
                   1.0/(t56292*t56292*t56292)*t56277*t56367*t56278*t56287*2.0-ccaa2*t56355*t56275*t56276*1.0/(t56295* \
                   t56295*t56295)*t56358*t56279*2.0+ccaa3*gamma_aa[index]*gcaa*t56340*t56280*t56275*t56276*(gcaa*t56339* \
                   8.0+gamma_aa[index]*t56336*t56276*3.2E1+gcaa*t56275*t56338*t56276*2.4E1)+ccaa3*gamma_aa[index]*gcaa* \
                   t56340*t56345*t56275*t56338*t56276*8.0-ccaa3*gamma_aa[index]*gcaa*t56280*t56362*t56345*t56275*t56276* \
                   1.0/(t56286*t56286*t56286)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t56339*t56384*(-8.0/3.0)+cx1* \
                   gamma_aa[index]*t56336*t56296*t56388*8.0-cx2*gamma_aa[index]*t56336*t56296*t56386*(3.2E1/3.0)+cx2* \
                   t56403*t56336*t56390*t56275*t56296*(1.6E1/3.0)+cx4*t56400*t56346*t56287*t56395*t56297*(3.2E1/3.0)+ \
                   cx4*t56278*t56287*t56395*t56297*(gx*t56339*(3.2E1/3.0)+gamma_aa[index]*t56336*t56296*6.4E1+gamma_aa[index]* \
                   t56346*t56275*t56297*(1.28E2/3.0)+gx*t56275*t56338*t56296*9.6E1)-cx1*gx*t56275*t56338*t56296*1.0/(t56299* \
                   t56299*t56299)*(1.6E1/3.0)+cx2*t56390*t56275*t56296*t56279*(gx*t56339*(1.6E1/3.0)+gamma_aa[index]* \
                   t56336*t56296*(3.2E1/3.0))+cx2*gamma_aa[index]*t56406*t56390*t56296*t56279*2.0-cx4*gamma_aa[index]* \
                   t56346*t56275*t56385*t56297*(1.28E2/3.0)-cx3*gx*t56275*t56338*t56296*t56387*2.4E1+cx4*gamma_aa[index]* \
                   t56415*t56275*t56278*t56395*t56297*4.0+cx3*gx*t56410*t56280*t56275*t56296*t56389*3.0-cx2*1.0/(t56311* \
                   t56311*t56311)*t56403*t56406*t56275*t56296*t56279*2.0-cx4*t56400*t56415*1.0/(t56308*t56308*t56308) \
                   *t56278*t56287*t56297*2.0+cx3*gamma_aa[index]*gx*t56280*t56275*t56296*t56389*(gx*t56339*8.0+gamma_aa[index]* \
                   t56336*t56296*3.2E1+gx*t56275*t56338*t56296*2.4E1)+cx3*gamma_aa[index]*gx*t56275*t56338*t56394*t56296* \
                   t56389*8.0-cx3*gamma_aa[index]*gx*t56410*1.0/(t56303*t56303*t56303)*t56280*t56275*t56394*t56296*2.0) \
                   +c0*pow(rho_a[index],1.0/3.0)*(cx1*gx*t56274*t56384-cx1*gamma_aa[index]*t56296*t56279*t56388+cx2*gamma_aa[index]* \
                   t56296*t56386*t56279*2.0-cx2*t56403*t56390*t56275*t56296*t56279-cx4*t56400*t56278*t56287*t56395*t56297+ \
                   cx4*gamma_aa[index]*t56275*t56385*t56278*t56297*4.0+cx3*gx*t56280*t56275*t56296*t56387*3.0-cx3*gamma_aa[index]* \
                   gx*t56280*t56275*t56394*t56296*t56389)*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t54006 = rho_a[index]+rho_b[index];
                double t54007 = 1.0/pow(t54006,1.0/3.0);
                double t54008 = c*t54007;
                double t54009 = sqrt(t54008);
                double t54010 = b1p*t54009;
                double t54011 = pow(t54008,3.0/2.0);
                double t54012 = b3p*t54011;
                double t54013 = c*c;
                double t54014 = 1.0/pow(t54006,2.0/3.0);
                double t54015 = b4p*t54013*t54014;
                double t54016 = b2p*c*t54007;
                double t54017 = t54010+t54012+t54015+t54016;
                double t54018 = 1.0/pow(t54006,4.0/3.0);
                double t54019 = 1.0/c0p;
                double t54020 = 1.0/t54017;
                double t54021 = t54020*t54019*(1.0/2.0);
                double t54022 = t54021+1.0;
                double t54023 = a1p*c*t54007;
                double t54024 = t54023+1.0;
                double t54025 = rho_a[index]-rho_b[index];
                double t54026 = t54025*t54025;
                double t54027 = 1.0/t54006;
                double t54028 = t54025*t54027;
                double t54029 = two_13*2.0;
                double t54030 = t54029-2.0;
                double t54031 = 1.0/t54030;
                double t54032 = 1.0/c0f;
                double t54033 = b1f*t54009;
                double t54034 = b3f*t54011;
                double t54035 = b4f*t54013*t54014;
                double t54036 = b2f*c*t54007;
                double t54037 = t54033+t54034+t54035+t54036;
                double t54038 = 1.0/t54037;
                double t54039 = t54032*t54038*(1.0/2.0);
                double t54040 = t54039+1.0;
                double t54041 = log(t54040);
                double t54042 = a1f*c*t54007;
                double t54043 = t54042+1.0;
                double t54044 = log(t54022);
                double t54054 = c0f*t54041*t54043*2.0;
                double t54055 = c0p*t54024*t54044*2.0;
                double t54045 = t54054-t54055;
                double t54046 = t54028+1.0;
                double t54047 = pow(t54046,4.0/3.0);
                double t54048 = -t54028+1.0;
                double t54049 = pow(t54048,4.0/3.0);
                double t54050 = t54047+t54049-2.0;
                double t54051 = 1.0/(t54006*t54006);
                double t54082 = t54051*t54025;
                double t54052 = t54027-t54082;
                double t54053 = 1.0/(t54006*t54006*t54006*t54006);
                double t54056 = t54026*t54026;
                double t54057 = 1.0/pow(t54006,5.0/3.0);
                double t54058 = 1.0/sqrt(t54008);
                double t54059 = 1.0/t54022;
                double t54060 = 1.0/(t54017*t54017);
                double t54061 = b4p*t54013*t54057*(2.0/3.0);
                double t54062 = b2p*c*t54018*(1.0/3.0);
                double t54063 = b1p*c*t54018*t54058*(1.0/6.0);
                double t54064 = b3p*c*t54009*t54018*(1.0/2.0);
                double t54065 = t54061+t54062+t54063+t54064;
                double t54066 = t54024*t54060*t54065*t54059;
                double t54067 = 1.0/(t54006*t54006*t54006*t54006*t54006);
                double t54068 = 1.0/d2fz0;
                double t54069 = 1.0/Aa;
                double t54070 = b1a*t54009;
                double t54071 = b3a*t54011;
                double t54072 = b4a*t54013*t54014;
                double t54073 = b2a*c*t54007;
                double t54074 = t54070+t54071+t54072+t54073;
                double t54075 = 1.0/t54074;
                double t54076 = t54075*t54069*(1.0/2.0);
                double t54077 = t54076+1.0;
                double t54078 = log(t54077);
                double t54079 = a1a*c*t54007;
                double t54080 = t54079+1.0;
                double t54081 = pow(t54046,1.0/3.0);
                double t54083 = t54052*t54081*(4.0/3.0);
                double t54084 = pow(t54048,1.0/3.0);
                double t54085 = t54083-t54052*t54084*(4.0/3.0);
                double t54086 = t54053*t54056;
                double t54087 = t54086-1.0;
                double t54088 = 1.0/pow(rho_a[index],1.0/3.0);
                double t54089 = c*t54088;
                double t54090 = sqrt(t54089);
                double t54091 = b1f*t54090;
                double t54092 = pow(t54089,3.0/2.0);
                double t54093 = b3f*t54092;
                double t54094 = 1.0/pow(rho_a[index],2.0/3.0);
                double t54095 = b4f*t54013*t54094;
                double t54096 = b2f*c*t54088;
                double t54097 = t54091+t54093+t54095+t54096;
                double t54098 = 1.0/pow(rho_a[index],4.0/3.0);
                double t54099 = b1p*t54090;
                double t54100 = b3p*t54092;
                double t54101 = b4p*t54013*t54094;
                double t54102 = b2p*c*t54088;
                double t54103 = t54100+t54101+t54102+t54099;
                double t54104 = 1.0/pow(rho_a[index],5.0/3.0);
                double t54105 = 1.0/sqrt(t54089);
                double t54106 = 1.0/t54097;
                double t54107 = t54032*t54106*(1.0/2.0);
                double t54108 = t54107+1.0;
                double t54109 = 1.0/t54103;
                double t54110 = t54019*t54109*(1.0/2.0);
                double t54111 = t54110+1.0;
                double t54112 = a1p*c*t54088;
                double t54113 = t54112+1.0;
                double t54114 = 1.0/t54111;
                double t54115 = 1.0/(t54103*t54103);
                double t54116 = b4p*t54013*t54104*(2.0/3.0);
                double t54117 = b2p*c*t54098*(1.0/3.0);
                double t54118 = b1p*c*t54105*t54098*(1.0/6.0);
                double t54119 = b3p*c*t54090*t54098*(1.0/2.0);
                double t54120 = t54116+t54117+t54118+t54119;
                double t54121 = t54120*t54113*t54114*t54115;
                double t54122 = log(t54111);
                double t54123 = pow(2.0,1.0/3.0);
                double t54124 = t54123*2.0;
                double t54125 = t54124-2.0;
                double t54126 = log(t54108);
                double t54127 = a1f*c*t54088;
                double t54128 = t54127+1.0;
                double t54129 = 1.0/pow(rho_b[index],8.0/3.0);
                double t54130 = 1.0/pow(rho_a[index],8.0/3.0);
                double t54131 = gamma_aa[index]*t54130*(1.0/2.0);
                double t54132 = gamma_bb[index]*t54129*(1.0/2.0);
                double t54133 = t54131+t54132;
                double t54134 = gcab*t54133;
                double t54135 = t54134+1.0;
                double t54136 = gcab*gcab;
                double t54137 = t54133*t54133;
                double t54138 = t54136*t54136;
                double t54139 = t54137*t54137;
                double t54140 = t54136*t54137;
                double t54141 = gcab*t54133*2.0;
                double t54142 = t54140+t54141+1.0;
                double t54143 = t54136*t54137*3.0;
                double t54144 = gcab*t54133*t54136*t54137;
                double t54145 = gcab*t54133*3.0;
                double t54146 = t54143+t54144+t54145+1.0;
                double t54147 = t54136*t54137*6.0;
                double t54148 = gcab*t54133*t54136*t54137*4.0;
                double t54149 = t54138*t54139;
                double t54150 = gcab*t54133*4.0;
                double t54151 = t54150+t54147+t54148+t54149+1.0;
                double t54152 = c0f*t54126*t54128*2.0;
                double t54154 = c0p*t54113*t54122*2.0;
                double t54153 = t54152-t54154;
                double t54155 = 1.0/pow(rho_b[index],1.0/3.0);
                double t54156 = c*t54155;
                double t54157 = sqrt(t54156);
                double t54158 = pow(t54156,3.0/2.0);
                double t54159 = 1.0/pow(rho_b[index],2.0/3.0);
                double t54160 = b1p*t54157;
                double t54161 = b3p*t54158;
                double t54162 = b4p*t54013*t54159;
                double t54163 = b2p*c*t54155;
                double t54164 = t54160+t54161+t54162+t54163;
                double t54165 = 1.0/t54164;
                double t54166 = t54019*t54165*(1.0/2.0);
                double t54167 = t54166+1.0;
                double t54168 = log(t54167);
                double t54169 = a1p*c*t54155;
                double t54170 = t54169+1.0;
                double t54171 = c0p*t54170*t54168*2.0;
                double t54172 = t54031*t54050*t54053*t54045*t54056;
                double t54173 = Aa*t54031*t54050*t54080*t54068*t54078*t54087*2.0;
                double t54174 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t54175 = 1.0/(t54146*t54146);
                double t54176 = 1.0/(t54151*t54151);
                double t54177 = gcab*t54129*2.0;
                double t54178 = t54133*t54136*t54129*6.0;
                double t54179 = gcab*t54136*t54137*t54129*6.0;
                double t54180 = t54133*t54137*t54129*t54138*2.0;
                double t54181 = t54180+t54177+t54178+t54179;
                double t54182 = 1.0/(t54142*t54142);
                double t54183 = gamma_aa[index]*gcab*t54174*(8.0/3.0);
                double t54184 = gamma_aa[index]*t54133*t54136*t54174*(8.0/3.0);
                double t54185 = t54183+t54184;
                double t54186 = gcab*t54129;
                double t54187 = t54133*t54136*t54129;
                double t54188 = t54186+t54187;
                double t54189 = gamma_aa[index]*gcab*t54174*(1.6E1/3.0);
                double t54190 = gamma_aa[index]*gcab*t54136*t54137*t54174*1.6E1;
                double t54191 = gamma_aa[index]*t54133*t54137*t54138*t54174*(1.6E1/3.0);
                double t54192 = gamma_aa[index]*t54133*t54136*t54174*1.6E1;
                double t54193 = t54190+t54191+t54192+t54189;
                double t54194 = 1.0/(t54135*t54135);
                double t54195 = 1.0/t54142;
                double t54196 = gcab*t54129*(3.0/2.0);
                double t54197 = t54133*t54136*t54129*3.0;
                double t54198 = gcab*t54136*t54137*t54129*(3.0/2.0);
                double t54199 = t54196+t54197+t54198;
                double t54200 = gamma_aa[index]*gcab*t54174*4.0;
                double t54201 = gamma_aa[index]*gcab*t54136*t54137*t54174*4.0;
                double t54202 = gamma_aa[index]*t54133*t54136*t54174*8.0;
                double t54203 = t54200+t54201+t54202;
                double t54204 = 1.0/t54146;
                double t54205 = 1.0/t54151;
                v_rho_a_gamma_bb_[index] = -(t54055+t54172+t54173+t54006*(t54066-t54031*t54050*t54053*t54056*(t54066- \
                   (t54043*1.0/(t54037*t54037)*(b2f*c*t54018*(1.0/3.0)+b4f*t54013*t54057*(2.0/3.0)+b1f*c*t54018*t54058* \
                   (1.0/6.0)+b3f*c*t54009*t54018*(1.0/2.0)))/t54040+a1f*c*c0f*t54041*t54018*(2.0/3.0)-a1p*c*c0p*t54044* \
                   t54018*(2.0/3.0))-a1p*c*c0p*t54044*t54018*(2.0/3.0)-t54031*t54050*t54045*t54056*t54067*4.0+t54031* \
                   t54053*t54045*t54056*t54085+t54031*t54050*t54025*t54026*t54053*t54045*4.0-Aa*t54031*t54050*t54080* \
                   t54068*t54078*(t54056*t54067*4.0-t54025*t54026*t54053*4.0)*2.0+Aa*t54031*t54080*t54085*t54068*t54078* \
                   t54087*2.0+(t54031*t54050*t54080*1.0/(t54074*t54074)*t54068*t54087*(b2a*c*t54018*(1.0/3.0)+b4a*t54013* \
                   t54057*(2.0/3.0)+b1a*c*t54018*t54058*(1.0/6.0)+b3a*c*t54009*t54018*(1.0/2.0)))/t54077-Aa*a1a*c*t54031* \
                   t54050*t54018*t54068*t54078*t54087*(2.0/3.0))+rho_a[index]*(-t54121+t54031*t54125*(t54121-(t54128* \
                   1.0/(t54097*t54097)*(b2f*c*t54098*(1.0/3.0)+b4f*t54013*t54104*(2.0/3.0)+b1f*c*t54105*t54098*(1.0/6.0) \
                   +b3f*c*t54090*t54098*(1.0/2.0)))/t54108+a1f*c*c0f*t54126*t54098*(2.0/3.0)-a1p*c*c0p*t54122*t54098* \
                   (2.0/3.0))+a1p*c*c0p*t54122*t54098*(2.0/3.0))-c0p*t54113*t54122*2.0-t54031*t54125*t54153)*((ccab1* \
                   gcab*t54129*(1.0/2.0))/t54135-ccab1*t54133*t54136*t54129*t54194*(1.0/2.0)+ccab2*t54133*t54136*t54129* \
                   t54195-ccab2*t54136*t54137*t54182*t54188-ccab4*t54181*t54138*t54139*t54176+ccab4*t54133*t54205*t54137* \
                   t54129*t54138*2.0+ccab3*gcab*t54204*t54136*t54137*t54129*(3.0/2.0)-ccab3*gcab*t54133*t54136*t54137* \
                   t54175*t54199)+(rho_a[index]*(t54154+t54031*t54125*t54153)+rho_b[index]*(t54171-t54031*t54125*(t54171- \
                   c0f*log((t54032*(1.0/2.0))/(b1f*t54157+b3f*t54158+b2f*c*t54155+b4f*t54013*t54159)+1.0)*(a1f*c*t54155+ \
                   1.0)*2.0))-t54006*(t54055+t54172+t54173))*(ccab4*t54138*t54139*t54176*(gamma_aa[index]*t54136*t54129* \
                   t54174*8.0+gamma_aa[index]*t54137*t54129*t54138*t54174*8.0+gamma_aa[index]*gcab*t54133*t54136*t54129* \
                   t54174*1.6E1)+ccab2*t54133*t54136*t54182*t54129*t54185-ccab4*1.0/(t54151*t54151*t54151)*t54181*t54138* \
                   t54139*t54193*2.0-ccab2*1.0/(t54142*t54142*t54142)*t54136*t54137*t54185*t54188*2.0+ccab1*gamma_aa[index]* \
                   t54136*t54129*t54174*t54194*(4.0/3.0)-ccab2*gamma_aa[index]*t54136*t54129*t54174*t54195*(4.0/3.0)- \
                   ccab4*gamma_aa[index]*t54205*t54137*t54129*t54138*t54174*8.0+ccab2*gamma_aa[index]*t54133*t54136*t54182* \
                   t54174*t54188*(8.0/3.0)+ccab2*gamma_aa[index]*t54137*t54182*t54129*t54138*t54174*(4.0/3.0)+ccab3*gcab* \
                   t54203*t54136*t54137*t54129*t54175*(3.0/2.0)+ccab4*t54133*t54137*t54129*t54138*t54193*t54176*2.0+ccab3* \
                   gcab*t54133*t54136*t54137*t54175*(gamma_aa[index]*t54136*t54129*t54174*4.0+gamma_aa[index]*gcab*t54133* \
                   t54136*t54129*t54174*4.0)-ccab1*gamma_aa[index]*gcab*t54133*1.0/(t54135*t54135*t54135)*t54136*t54129* \
                   t54174*(4.0/3.0)-ccab3*gcab*t54203*t54133*t54136*t54137*1.0/(t54146*t54146*t54146)*t54199*2.0-ccab3* \
                   gamma_aa[index]*gcab*t54204*t54133*t54136*t54129*t54174*4.0+ccab3*gamma_aa[index]*gcab*t54136*t54137* \
                   t54174*t54175*t54199*4.0+ccab4*gamma_aa[index]*t54133*t54181*t54137*t54138*t54174*t54176*(1.6E1/3.0) \
                   );
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t54207 = rho_a[index]+rho_b[index];
                double t54208 = 1.0/pow(t54207,1.0/3.0);
                double t54209 = c*t54208;
                double t54210 = sqrt(t54209);
                double t54211 = b1p*t54210;
                double t54212 = pow(t54209,3.0/2.0);
                double t54213 = b3p*t54212;
                double t54214 = c*c;
                double t54215 = 1.0/pow(t54207,2.0/3.0);
                double t54216 = b4p*t54214*t54215;
                double t54217 = b2p*c*t54208;
                double t54218 = t54211+t54213+t54216+t54217;
                double t54219 = 1.0/pow(t54207,4.0/3.0);
                double t54220 = 1.0/c0p;
                double t54221 = 1.0/t54218;
                double t54222 = t54220*t54221*(1.0/2.0);
                double t54223 = t54222+1.0;
                double t54224 = a1p*c*t54208;
                double t54225 = t54224+1.0;
                double t54226 = rho_a[index]-rho_b[index];
                double t54227 = t54226*t54226;
                double t54228 = 1.0/t54207;
                double t54229 = t54226*t54228;
                double t54230 = two_13*2.0;
                double t54231 = t54230-2.0;
                double t54232 = 1.0/t54231;
                double t54233 = 1.0/c0f;
                double t54234 = b1f*t54210;
                double t54235 = b3f*t54212;
                double t54236 = b4f*t54214*t54215;
                double t54237 = b2f*c*t54208;
                double t54238 = t54234+t54235+t54236+t54237;
                double t54239 = 1.0/t54238;
                double t54240 = t54233*t54239*(1.0/2.0);
                double t54241 = t54240+1.0;
                double t54242 = log(t54241);
                double t54243 = a1f*c*t54208;
                double t54244 = t54243+1.0;
                double t54245 = log(t54223);
                double t54256 = c0f*t54242*t54244*2.0;
                double t54257 = c0p*t54225*t54245*2.0;
                double t54246 = t54256-t54257;
                double t54247 = t54229+1.0;
                double t54248 = pow(t54247,4.0/3.0);
                double t54249 = -t54229+1.0;
                double t54250 = pow(t54249,4.0/3.0);
                double t54251 = t54250+t54248-2.0;
                double t54252 = 1.0/(t54207*t54207);
                double t54253 = t54252*t54226;
                double t54254 = t54253+t54228;
                double t54255 = 1.0/(t54207*t54207*t54207*t54207);
                double t54258 = t54227*t54227;
                double t54259 = 1.0/pow(t54207,5.0/3.0);
                double t54260 = 1.0/sqrt(t54209);
                double t54261 = 1.0/t54223;
                double t54262 = 1.0/(t54218*t54218);
                double t54263 = b4p*t54214*t54259*(2.0/3.0);
                double t54264 = b2p*c*t54219*(1.0/3.0);
                double t54265 = b1p*c*t54260*t54219*(1.0/6.0);
                double t54266 = b3p*c*t54210*t54219*(1.0/2.0);
                double t54267 = t54263+t54264+t54265+t54266;
                double t54268 = 1.0/(t54207*t54207*t54207*t54207*t54207);
                double t54269 = 1.0/d2fz0;
                double t54270 = 1.0/Aa;
                double t54271 = b1a*t54210;
                double t54272 = b3a*t54212;
                double t54273 = b4a*t54214*t54215;
                double t54274 = b2a*c*t54208;
                double t54275 = t54271+t54272+t54273+t54274;
                double t54276 = 1.0/t54275;
                double t54277 = t54270*t54276*(1.0/2.0);
                double t54278 = t54277+1.0;
                double t54279 = log(t54278);
                double t54280 = a1a*c*t54208;
                double t54281 = t54280+1.0;
                double t54282 = pow(t54247,1.0/3.0);
                double t54283 = t54254*t54282*(4.0/3.0);
                double t54284 = pow(t54249,1.0/3.0);
                double t54285 = t54283-t54254*t54284*(4.0/3.0);
                double t54286 = t54255*t54258;
                double t54287 = t54286-1.0;
                double t54288 = 1.0/pow(rho_b[index],1.0/3.0);
                double t54289 = c*t54288;
                double t54290 = sqrt(t54289);
                double t54291 = b1f*t54290;
                double t54292 = pow(t54289,3.0/2.0);
                double t54293 = b3f*t54292;
                double t54294 = 1.0/pow(rho_b[index],2.0/3.0);
                double t54295 = b4f*t54214*t54294;
                double t54296 = b2f*c*t54288;
                double t54297 = t54291+t54293+t54295+t54296;
                double t54298 = 1.0/pow(rho_b[index],4.0/3.0);
                double t54299 = b1p*t54290;
                double t54300 = b3p*t54292;
                double t54301 = b4p*t54214*t54294;
                double t54302 = b2p*c*t54288;
                double t54303 = t54300+t54301+t54302+t54299;
                double t54304 = 1.0/pow(rho_b[index],5.0/3.0);
                double t54305 = 1.0/sqrt(t54289);
                double t54306 = 1.0/t54297;
                double t54307 = t54233*t54306*(1.0/2.0);
                double t54308 = t54307+1.0;
                double t54309 = 1.0/t54303;
                double t54310 = t54220*t54309*(1.0/2.0);
                double t54311 = t54310+1.0;
                double t54312 = a1p*c*t54288;
                double t54313 = t54312+1.0;
                double t54314 = 1.0/t54311;
                double t54315 = 1.0/(t54303*t54303);
                double t54316 = b4p*t54214*t54304*(2.0/3.0);
                double t54317 = b2p*c*t54298*(1.0/3.0);
                double t54318 = b1p*c*t54305*t54298*(1.0/6.0);
                double t54319 = b3p*c*t54290*t54298*(1.0/2.0);
                double t54320 = t54316+t54317+t54318+t54319;
                double t54321 = t54320*t54313*t54314*t54315;
                double t54322 = log(t54311);
                double t54323 = pow(2.0,1.0/3.0);
                double t54324 = t54323*2.0;
                double t54325 = t54324-2.0;
                double t54326 = log(t54308);
                double t54327 = a1f*c*t54288;
                double t54328 = t54327+1.0;
                double t54329 = 1.0/pow(rho_a[index],8.0/3.0);
                double t54330 = gamma_aa[index]*t54329*(1.0/2.0);
                double t54331 = 1.0/pow(rho_b[index],8.0/3.0);
                double t54332 = gamma_bb[index]*t54331*(1.0/2.0);
                double t54333 = t54330+t54332;
                double t54334 = gcab*t54333;
                double t54335 = t54334+1.0;
                double t54336 = gcab*gcab;
                double t54337 = t54333*t54333;
                double t54338 = t54336*t54336;
                double t54339 = t54337*t54337;
                double t54340 = t54336*t54337;
                double t54341 = gcab*t54333*2.0;
                double t54342 = t54340+t54341+1.0;
                double t54343 = t54336*t54337*3.0;
                double t54344 = gcab*t54333*t54336*t54337;
                double t54345 = gcab*t54333*3.0;
                double t54346 = t54343+t54344+t54345+1.0;
                double t54347 = t54336*t54337*6.0;
                double t54348 = gcab*t54333*t54336*t54337*4.0;
                double t54349 = t54338*t54339;
                double t54350 = gcab*t54333*4.0;
                double t54351 = t54350+t54347+t54348+t54349+1.0;
                double t54352 = a1p*c*c0p*t54245*t54219*(2.0/3.0);
                double t54353 = 1.0/pow(rho_a[index],1.0/3.0);
                double t54354 = c*t54353;
                double t54355 = sqrt(t54354);
                double t54356 = pow(t54354,3.0/2.0);
                double t54357 = 1.0/pow(rho_a[index],2.0/3.0);
                double t54358 = b1p*t54355;
                double t54359 = b3p*t54356;
                double t54360 = b4p*t54214*t54357;
                double t54361 = b2p*c*t54353;
                double t54362 = t54360+t54361+t54358+t54359;
                double t54363 = 1.0/t54362;
                double t54364 = t54220*t54363*(1.0/2.0);
                double t54365 = t54364+1.0;
                double t54366 = log(t54365);
                double t54367 = a1p*c*t54353;
                double t54368 = t54367+1.0;
                double t54369 = c0p*t54366*t54368*2.0;
                double t54370 = c0f*t54326*t54328*2.0;
                double t54372 = c0p*t54313*t54322*2.0;
                double t54371 = t54370-t54372;
                double t54373 = t54232*t54251*t54246*t54255*t54258;
                double t54374 = Aa*t54232*t54251*t54281*t54269*t54287*t54279*2.0;
                double t54375 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t54376 = 1.0/(t54346*t54346);
                double t54377 = 1.0/(t54351*t54351);
                double t54378 = gcab*t54329*2.0;
                double t54379 = t54333*t54336*t54329*6.0;
                double t54380 = gcab*t54336*t54337*t54329*6.0;
                double t54381 = t54333*t54337*t54329*t54338*2.0;
                double t54382 = t54380+t54381+t54378+t54379;
                double t54383 = 1.0/(t54342*t54342);
                double t54384 = gamma_bb[index]*gcab*t54375*(8.0/3.0);
                double t54385 = gamma_bb[index]*t54333*t54336*t54375*(8.0/3.0);
                double t54386 = t54384+t54385;
                double t54387 = gcab*t54329;
                double t54388 = t54333*t54336*t54329;
                double t54389 = t54387+t54388;
                double t54390 = gamma_bb[index]*gcab*t54375*(1.6E1/3.0);
                double t54391 = gamma_bb[index]*gcab*t54336*t54337*t54375*1.6E1;
                double t54392 = gamma_bb[index]*t54333*t54337*t54338*t54375*(1.6E1/3.0);
                double t54393 = gamma_bb[index]*t54333*t54336*t54375*1.6E1;
                double t54394 = t54390+t54391+t54392+t54393;
                double t54395 = 1.0/(t54335*t54335);
                double t54396 = 1.0/t54342;
                double t54397 = gcab*t54329*(3.0/2.0);
                double t54398 = t54333*t54336*t54329*3.0;
                double t54399 = gcab*t54336*t54337*t54329*(3.0/2.0);
                double t54400 = t54397+t54398+t54399;
                double t54401 = gamma_bb[index]*gcab*t54375*4.0;
                double t54402 = gamma_bb[index]*gcab*t54336*t54337*t54375*4.0;
                double t54403 = gamma_bb[index]*t54333*t54336*t54375*8.0;
                double t54404 = t54401+t54402+t54403;
                double t54405 = 1.0/t54346;
                double t54406 = 1.0/t54351;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t54372+t54232*t54325*t54371)+rho_a[index]*(t54369-t54232* \
                   t54325*(t54369-c0f*log((t54233*(1.0/2.0))/(b1f*t54355+b3f*t54356+b2f*c*t54353+b4f*t54214*t54357)+1.0) \
                   *(a1f*c*t54353+1.0)*2.0))-t54207*(t54373+t54257+t54374))*(ccab4*t54338*t54339*t54377*(gamma_bb[index]* \
                   t54336*t54329*t54375*8.0+gamma_bb[index]*t54337*t54329*t54338*t54375*8.0+gamma_bb[index]*gcab*t54333* \
                   t54336*t54329*t54375*1.6E1)+ccab2*t54333*t54336*t54329*t54383*t54386-ccab4*1.0/(t54351*t54351*t54351) \
                   *t54382*t54338*t54339*t54394*2.0-ccab2*1.0/(t54342*t54342*t54342)*t54336*t54337*t54386*t54389*2.0+ \
                   ccab1*gamma_bb[index]*t54336*t54329*t54375*t54395*(4.0/3.0)-ccab2*gamma_bb[index]*t54336*t54329*t54375* \
                   t54396*(4.0/3.0)-ccab4*gamma_bb[index]*t54406*t54337*t54329*t54338*t54375*8.0+ccab2*gamma_bb[index]* \
                   t54333*t54336*t54383*t54375*t54389*(8.0/3.0)+ccab2*gamma_bb[index]*t54337*t54329*t54338*t54383*t54375* \
                   (4.0/3.0)+ccab3*gcab*t54404*t54336*t54337*t54329*t54376*(3.0/2.0)+ccab4*t54333*t54337*t54329*t54338* \
                   t54394*t54377*2.0+ccab3*gcab*t54333*t54336*t54337*t54376*(gamma_bb[index]*t54336*t54329*t54375*4.0+ \
                   gamma_bb[index]*gcab*t54333*t54336*t54329*t54375*4.0)-ccab1*gamma_bb[index]*gcab*t54333*1.0/(t54335* \
                   t54335*t54335)*t54336*t54329*t54375*(4.0/3.0)-ccab3*gcab*t54400*t54404*t54333*t54336*t54337*1.0/(t54346* \
                   t54346*t54346)*2.0-ccab3*gamma_bb[index]*gcab*t54333*t54405*t54336*t54329*t54375*4.0+ccab3*gamma_bb[index]* \
                   gcab*t54400*t54336*t54337*t54375*t54376*4.0+ccab4*gamma_bb[index]*t54333*t54337*t54382*t54338*t54375* \
                   t54377*(1.6E1/3.0))-(t54373+t54257+t54374+rho_b[index]*(-t54321+t54232*t54325*(t54321-(t54328*1.0/ \
                   (t54297*t54297)*(b2f*c*t54298*(1.0/3.0)+b4f*t54214*t54304*(2.0/3.0)+b1f*c*t54305*t54298*(1.0/6.0)+ \
                   b3f*c*t54290*t54298*(1.0/2.0)))/t54308+a1f*c*c0f*t54326*t54298*(2.0/3.0)-a1p*c*c0p*t54322*t54298*(2.0/ \
                   3.0))+a1p*c*c0p*t54322*t54298*(2.0/3.0))-t54207*(t54352-t54225*t54261*t54262*t54267+t54232*t54251* \
                   t54246*t54258*t54268*4.0+t54232*t54246*t54255*t54258*t54285-t54232*t54251*t54255*t54258*(t54352-t54225* \
                   t54261*t54262*t54267+(t54244*1.0/(t54238*t54238)*(b2f*c*t54219*(1.0/3.0)+b4f*t54214*t54259*(2.0/3.0) \
                   +b1f*c*t54260*t54219*(1.0/6.0)+b3f*c*t54210*t54219*(1.0/2.0)))/t54241-a1f*c*c0f*t54242*t54219*(2.0/ \
                   3.0))+t54232*t54251*t54226*t54227*t54246*t54255*4.0+Aa*t54232*t54251*t54281*t54269*t54279*(t54258* \
                   t54268*4.0+t54226*t54227*t54255*4.0)*2.0+Aa*t54232*t54281*t54285*t54269*t54287*t54279*2.0-(t54232* \
                   t54251*t54281*1.0/(t54275*t54275)*t54269*t54287*(b2a*c*t54219*(1.0/3.0)+b4a*t54214*t54259*(2.0/3.0) \
                   +b1a*c*t54260*t54219*(1.0/6.0)+b3a*c*t54210*t54219*(1.0/2.0)))/t54278+Aa*a1a*c*t54232*t54251*t54219* \
                   t54269*t54287*t54279*(2.0/3.0))-c0p*t54313*t54322*2.0-t54232*t54325*t54371)*((ccab1*gcab*t54329*(1.0/ \
                   2.0))/t54335-ccab1*t54333*t54336*t54329*t54395*(1.0/2.0)+ccab2*t54333*t54336*t54329*t54396-ccab2*t54336* \
                   t54337*t54383*t54389-ccab4*t54382*t54338*t54339*t54377+ccab4*t54333*t54406*t54337*t54329*t54338*2.0+ \
                   ccab3*gcab*t54405*t54336*t54337*t54329*(3.0/2.0)-ccab3*gcab*t54400*t54333*t54336*t54337*t54376);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t54409 = 1.0/pow(rho_b[index],1.0/3.0);
                double t54410 = c*t54409;
                double t54411 = sqrt(t54410);
                double t54412 = pow(t54410,3.0/2.0);
                double t54413 = c*c;
                double t54414 = 1.0/pow(rho_b[index],2.0/3.0);
                double t54415 = 1.0/c0p;
                double t54416 = b1p*t54411;
                double t54417 = b3p*t54412;
                double t54418 = b4p*t54413*t54414;
                double t54419 = b2p*c*t54409;
                double t54420 = t54416+t54417+t54418+t54419;
                double t54421 = 1.0/t54420;
                double t54422 = t54421*t54415*(1.0/2.0);
                double t54423 = t54422+1.0;
                double t54424 = log(t54423);
                double t54425 = a1p*c*t54409;
                double t54426 = t54425+1.0;
                double t54427 = 1.0/pow(rho_b[index],8.0/3.0);
                double t54428 = gamma_bb[index]*gamma_bb[index];
                double t54429 = gcaa*gcaa;
                double t54430 = t54429*t54429;
                double t54431 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t54432 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t54433 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t54434 = gamma_bb[index]*gcaa*t54427;
                double t54435 = t54434+1.0;
                double t54436 = gamma_bb[index]*gcaa*t54427*3.0;
                double t54437 = gamma_bb[index]*gcaa*t54433*t54428*t54429;
                double t54438 = t54432*t54428*t54429*3.0;
                double t54439 = t54436+t54437+t54438+1.0;
                double t54440 = t54428*t54428;
                double t54441 = gamma_bb[index]*gcaa*t54427*4.0;
                double t54442 = gamma_bb[index]*gcaa*t54433*t54428*t54429*4.0;
                double t54443 = t54432*t54428*t54429*6.0;
                double t54444 = t54430*t54431*t54440;
                double t54445 = t54441+t54442+t54443+t54444+1.0;
                double t54446 = gamma_bb[index]*gcaa*t54427*2.0;
                double t54447 = t54432*t54428*t54429;
                double t54448 = t54446+t54447+1.0;
                double t54449 = rho_a[index]+rho_b[index];
                double t54450 = 1.0/pow(t54449,1.0/3.0);
                double t54451 = c*t54450;
                double t54452 = sqrt(t54451);
                double t54453 = b1p*t54452;
                double t54454 = pow(t54451,3.0/2.0);
                double t54455 = b3p*t54454;
                double t54456 = 1.0/pow(t54449,2.0/3.0);
                double t54457 = b4p*t54413*t54456;
                double t54458 = b2p*c*t54450;
                double t54459 = t54453+t54455+t54457+t54458;
                double t54460 = 1.0/pow(t54449,4.0/3.0);
                double t54461 = two_13*2.0;
                double t54462 = t54461-2.0;
                double t54463 = 1.0/t54462;
                double t54464 = 1.0/c0f;
                double t54465 = 1.0/t54459;
                double t54466 = t54415*t54465*(1.0/2.0);
                double t54467 = t54466+1.0;
                double t54468 = a1p*c*t54450;
                double t54469 = t54468+1.0;
                double t54470 = rho_a[index]-rho_b[index];
                double t54471 = t54470*t54470;
                double t54472 = 1.0/t54449;
                double t54473 = t54470*t54472;
                double t54474 = b1f*t54452;
                double t54475 = b3f*t54454;
                double t54476 = b4f*t54413*t54456;
                double t54477 = b2f*c*t54450;
                double t54478 = t54474+t54475+t54476+t54477;
                double t54479 = 1.0/t54478;
                double t54480 = t54464*t54479*(1.0/2.0);
                double t54481 = t54480+1.0;
                double t54482 = log(t54481);
                double t54483 = a1f*c*t54450;
                double t54484 = t54483+1.0;
                double t54485 = log(t54467);
                double t54496 = c0f*t54482*t54484*2.0;
                double t54497 = c0p*t54485*t54469*2.0;
                double t54486 = t54496-t54497;
                double t54487 = t54473+1.0;
                double t54488 = pow(t54487,4.0/3.0);
                double t54489 = -t54473+1.0;
                double t54490 = pow(t54489,4.0/3.0);
                double t54491 = t54490+t54488-2.0;
                double t54492 = 1.0/(t54449*t54449);
                double t54493 = t54470*t54492;
                double t54494 = t54472+t54493;
                double t54495 = 1.0/(t54449*t54449*t54449*t54449);
                double t54498 = t54471*t54471;
                double t54499 = 1.0/pow(t54449,5.0/3.0);
                double t54500 = 1.0/sqrt(t54451);
                double t54501 = 1.0/t54467;
                double t54502 = 1.0/(t54459*t54459);
                double t54503 = b4p*t54413*t54499*(2.0/3.0);
                double t54504 = b2p*c*t54460*(1.0/3.0);
                double t54505 = b1p*c*t54500*t54460*(1.0/6.0);
                double t54506 = b3p*c*t54460*t54452*(1.0/2.0);
                double t54507 = t54503+t54504+t54505+t54506;
                double t54508 = 1.0/(t54449*t54449*t54449*t54449*t54449);
                double t54509 = 1.0/d2fz0;
                double t54510 = 1.0/Aa;
                double t54511 = b1a*t54452;
                double t54512 = b3a*t54454;
                double t54513 = b4a*t54413*t54456;
                double t54514 = b2a*c*t54450;
                double t54515 = t54511+t54512+t54513+t54514;
                double t54516 = 1.0/t54515;
                double t54517 = t54510*t54516*(1.0/2.0);
                double t54518 = t54517+1.0;
                double t54519 = log(t54518);
                double t54520 = a1a*c*t54450;
                double t54521 = t54520+1.0;
                double t54522 = pow(t54487,1.0/3.0);
                double t54523 = t54522*t54494*(4.0/3.0);
                double t54524 = pow(t54489,1.0/3.0);
                double t54525 = t54523-t54524*t54494*(4.0/3.0);
                double t54526 = t54495*t54498;
                double t54527 = t54526-1.0;
                double t54528 = pow(2.0,1.0/3.0);
                double t54529 = t54528*2.0;
                double t54530 = t54529-2.0;
                double t54531 = a1f*c*t54409;
                double t54532 = t54531+1.0;
                double t54533 = b1f*t54411;
                double t54534 = b3f*t54412;
                double t54535 = b4f*t54413*t54414;
                double t54536 = b2f*c*t54409;
                double t54537 = t54533+t54534+t54535+t54536;
                double t54538 = 1.0/t54537;
                double t54539 = t54464*t54538*(1.0/2.0);
                double t54540 = t54539+1.0;
                double t54541 = 1.0/pow(rho_b[index],4.0/3.0);
                double t54542 = 1.0/pow(rho_b[index],5.0/3.0);
                double t54543 = 1.0/sqrt(t54410);
                double t54544 = log(t54540);
                double t54545 = 1.0/t54423;
                double t54546 = 1.0/(t54420*t54420);
                double t54547 = b4p*t54413*t54542*(2.0/3.0);
                double t54548 = b2p*c*t54541*(1.0/3.0);
                double t54549 = b1p*c*t54541*t54543*(1.0/6.0);
                double t54550 = b3p*c*t54411*t54541*(1.0/2.0);
                double t54551 = t54550+t54547+t54548+t54549;
                double t54552 = t54551*t54426*t54545*t54546;
                double t54553 = c0f*t54532*t54544*2.0;
                double t54554 = c0p*t54424*t54426*2.0;
                double t54555 = 1.0/pow(rho_a[index],8.0/3.0);
                double t54556 = gamma_aa[index]*t54555*(1.0/2.0);
                double t54557 = gamma_bb[index]*t54427*(1.0/2.0);
                double t54558 = t54556+t54557;
                double t54559 = gcab*t54558;
                double t54560 = t54559+1.0;
                double t54561 = gcab*gcab;
                double t54562 = t54558*t54558;
                double t54563 = t54561*t54561;
                double t54564 = t54562*t54562;
                double t54565 = t54561*t54562;
                double t54566 = gcab*t54558*2.0;
                double t54567 = t54565+t54566+1.0;
                double t54568 = t54561*t54562*3.0;
                double t54569 = gcab*t54561*t54562*t54558;
                double t54570 = gcab*t54558*3.0;
                double t54571 = t54570+t54568+t54569+1.0;
                double t54572 = t54561*t54562*6.0;
                double t54573 = gcab*t54561*t54562*t54558*4.0;
                double t54574 = t54563*t54564;
                double t54575 = gcab*t54558*4.0;
                double t54576 = t54572+t54573+t54574+t54575+1.0;
                double t54577 = a1p*c*c0p*t54460*t54485*(2.0/3.0);
                double t54578 = 1.0/pow(rho_a[index],1.0/3.0);
                double t54579 = c*t54578;
                double t54580 = sqrt(t54579);
                double t54581 = pow(t54579,3.0/2.0);
                double t54582 = 1.0/pow(rho_a[index],2.0/3.0);
                double t54583 = b1p*t54580;
                double t54584 = b3p*t54581;
                double t54585 = b4p*t54413*t54582;
                double t54586 = b2p*c*t54578;
                double t54587 = t54583+t54584+t54585+t54586;
                double t54588 = 1.0/t54587;
                double t54589 = t54415*t54588*(1.0/2.0);
                double t54590 = t54589+1.0;
                double t54591 = log(t54590);
                double t54592 = a1p*c*t54578;
                double t54593 = t54592+1.0;
                double t54594 = c0p*t54591*t54593*2.0;
                double t54595 = t54553-t54554;
                double t54596 = t54463*t54491*t54486*t54495*t54498;
                double t54597 = Aa*t54521*t54463*t54491*t54509*t54527*t54519*2.0;
                double t54598 = 1.0/t54560;
                double t54599 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t54600 = 1.0/(t54560*t54560);
                double t54601 = 1.0/t54567;
                double t54602 = 1.0/(t54571*t54571);
                double t54603 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t54604 = 1.0/(t54567*t54567);
                double t54605 = 1.0/t54571;
                double t54606 = 1.0/t54576;
                double t54607 = 1.0/(t54576*t54576);
                double t54608 = gcab*t54427*2.0;
                double t54609 = t54561*t54427*t54558*6.0;
                double t54610 = gcab*t54561*t54427*t54562*6.0;
                double t54611 = t54427*t54562*t54563*t54558*2.0;
                double t54612 = t54610+t54611+t54608+t54609;
                double t54613 = gamma_bb[index]*gcab*t54599*(8.0/3.0);
                double t54614 = gamma_bb[index]*t54561*t54558*t54599*(8.0/3.0);
                double t54615 = t54613+t54614;
                double t54616 = gcab*t54427;
                double t54617 = t54561*t54427*t54558;
                double t54618 = t54616+t54617;
                double t54619 = gamma_bb[index]*gcab*t54599*(1.6E1/3.0);
                double t54620 = gamma_bb[index]*gcab*t54561*t54562*t54599*1.6E1;
                double t54621 = gamma_bb[index]*t54562*t54563*t54558*t54599*(1.6E1/3.0);
                double t54622 = gamma_bb[index]*t54561*t54558*t54599*1.6E1;
                double t54623 = t54620+t54621+t54622+t54619;
                double t54624 = gcab*t54427*(3.0/2.0);
                double t54625 = t54561*t54427*t54558*3.0;
                double t54626 = gcab*t54561*t54427*t54562*(3.0/2.0);
                double t54627 = t54624+t54625+t54626;
                double t54628 = gamma_bb[index]*gcab*t54599*4.0;
                double t54629 = gamma_bb[index]*gcab*t54561*t54562*t54599*4.0;
                double t54630 = gamma_bb[index]*t54561*t54558*t54599*8.0;
                double t54631 = t54630+t54628+t54629;
                double t54632 = gx*gx;
                double t54633 = t54632*t54632;
                double t54634 = gamma_bb[index]*gx*t54427;
                double t54635 = t54634+1.0;
                double t54636 = gamma_bb[index]*gx*t54427*3.0;
                double t54637 = gamma_bb[index]*gx*t54433*t54632*t54428;
                double t54638 = t54432*t54632*t54428*3.0;
                double t54639 = t54636+t54637+t54638+1.0;
                double t54640 = gamma_bb[index]*gx*t54427*4.0;
                double t54641 = gamma_bb[index]*gx*t54433*t54632*t54428*4.0;
                double t54642 = t54432*t54632*t54428*6.0;
                double t54643 = t54431*t54440*t54633;
                double t54644 = t54640+t54641+t54642+t54643+1.0;
                double t54645 = gamma_bb[index]*gx*t54427*2.0;
                double t54646 = t54432*t54632*t54428;
                double t54647 = t54645+t54646+1.0;
                double t54648 = t54530*t54463*t54595;
                double t54649 = t54554+t54648;
                double t54650 = 1.0/t54435;
                double t54651 = 1.0/t54445;
                double t54652 = 1.0/t54448;
                double t54653 = 1.0/t54439;
                double t54654 = 1.0/(t54435*t54435);
                double t54655 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t54656 = 1.0/(t54439*t54439);
                double t54657 = 1.0/(t54448*t54448);
                double t54658 = gcaa*t54427*3.0;
                double t54659 = gamma_bb[index]*t54432*t54429*6.0;
                double t54660 = gcaa*t54433*t54428*t54429*3.0;
                double t54661 = t54660+t54658+t54659;
                double t54662 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t54663 = 1.0/(t54445*t54445);
                double t54664 = gcaa*t54427*4.0;
                double t54665 = gamma_bb[index]*t54432*t54429*1.2E1;
                double t54666 = gcaa*t54433*t54428*t54429*1.2E1;
                double t54667 = gamma_bb[index]*t54430*t54431*t54428*4.0;
                double t54668 = t54664+t54665+t54666+t54667;
                double t54669 = gcaa*t54427*2.0;
                double t54670 = gamma_bb[index]*t54432*t54429*2.0;
                double t54671 = t54670+t54669;
                double t54672 = gamma_bb[index]*gcaa*t54599*(1.6E1/3.0);
                double t54673 = t54603*t54428*t54429*(1.6E1/3.0);
                double t54674 = t54672+t54673;
                double t54675 = gamma_bb[index]*gcaa*t54599*8.0;
                double t54676 = gamma_bb[index]*gcaa*t54428*t54429*t54655*8.0;
                double t54677 = t54603*t54428*t54429*1.6E1;
                double t54678 = t54675+t54676+t54677;
                double t54679 = gamma_bb[index]*gcaa*t54599*(3.2E1/3.0);
                double t54680 = gamma_bb[index]*gcaa*t54428*t54429*t54655*3.2E1;
                double t54681 = t54603*t54428*t54429*3.2E1;
                double t54682 = t54430*t54440*t54662*(3.2E1/3.0);
                double t54683 = t54680+t54681+t54682+t54679;
                double t54684 = 1.0/t54540;
                double t54685 = 1.0/(t54537*t54537);
                double t54686 = b4f*t54413*t54542*(2.0/3.0);
                double t54687 = b2f*c*t54541*(1.0/3.0);
                double t54688 = b1f*c*t54541*t54543*(1.0/6.0);
                double t54689 = b3f*c*t54411*t54541*(1.0/2.0);
                double t54690 = t54686+t54687+t54688+t54689;
                double t54691 = a1f*c*c0f*t54541*t54544*(2.0/3.0);
                double t54692 = a1p*c*c0p*t54424*t54541*(2.0/3.0);
                double t54693 = ccaa1*gcaa*t54650*t54427;
                double t54694 = ccaa4*gamma_bb[index]*t54430*t54431*t54651*t54428*4.0;
                double t54695 = ccaa2*gamma_bb[index]*t54432*t54652*t54429*2.0;
                double t54696 = ccaa3*gcaa*t54433*t54428*t54653*t54429*3.0;
                double t54697 = t54693+t54694+t54695+t54696-ccaa1*gamma_bb[index]*t54432*t54429*t54654-ccaa4*t54430* \
                   t54431*t54440*t54663*t54668-ccaa2*t54432*t54428*t54671*t54429*t54657-ccaa3*gamma_bb[index]*gcaa*t54433* \
                   t54661*t54428*t54429*t54656;
                double t54698 = 1.0/t54635;
                double t54699 = 1.0/t54644;
                double t54700 = 1.0/t54647;
                double t54701 = 1.0/t54639;
                double t54702 = 1.0/(t54635*t54635);
                double t54703 = 1.0/(t54639*t54639);
                double t54704 = 1.0/(t54647*t54647);
                double t54705 = gx*t54427*3.0;
                double t54706 = gamma_bb[index]*t54432*t54632*6.0;
                double t54707 = gx*t54433*t54632*t54428*3.0;
                double t54708 = t54705+t54706+t54707;
                double t54709 = 1.0/(t54644*t54644);
                double t54710 = gx*t54427*4.0;
                double t54711 = gamma_bb[index]*t54432*t54632*1.2E1;
                double t54712 = gx*t54433*t54632*t54428*1.2E1;
                double t54713 = gamma_bb[index]*t54431*t54633*t54428*4.0;
                double t54714 = t54710+t54711+t54712+t54713;
                double t54715 = gx*t54427*2.0;
                double t54716 = gamma_bb[index]*t54432*t54632*2.0;
                double t54717 = t54715+t54716;
                double t54718 = gamma_bb[index]*gx*t54599*(1.6E1/3.0);
                double t54719 = t54603*t54632*t54428*(1.6E1/3.0);
                double t54720 = t54718+t54719;
                double t54721 = gamma_bb[index]*gx*t54599*8.0;
                double t54722 = gamma_bb[index]*gx*t54632*t54428*t54655*8.0;
                double t54723 = t54603*t54632*t54428*1.6E1;
                double t54724 = t54721+t54722+t54723;
                double t54725 = gamma_bb[index]*gx*t54599*(3.2E1/3.0);
                double t54726 = gamma_bb[index]*gx*t54632*t54428*t54655*3.2E1;
                double t54727 = t54603*t54632*t54428*3.2E1;
                double t54728 = t54440*t54633*t54662*(3.2E1/3.0);
                double t54729 = t54725+t54726+t54727+t54728;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t54649+rho_a[index]*(t54594-t54530*t54463*(t54594-c0f*log((t54464* \
                   (1.0/2.0))/(b1f*t54580+b3f*t54581+b2f*c*t54578+b4f*t54413*t54582)+1.0)*(a1f*c*t54578+1.0)*2.0))-t54449* \
                   (t54497+t54596+t54597))*(ccab1*gcab*t54598*t54599*(4.0/3.0)-ccab2*t54604*t54561*t54562*(gcab*t54599* \
                   (8.0/3.0)+gamma_bb[index]*t54603*t54561*(4.0/3.0)+t54561*t54558*t54599*(8.0/3.0))-ccab4*t54607*t54563* \
                   t54564*(gcab*t54599*(1.6E1/3.0)+gamma_bb[index]*t54603*t54561*8.0+t54561*t54558*t54599*1.6E1+gamma_bb[index]* \
                   t54603*t54562*t54563*8.0+gcab*t54561*t54562*t54599*1.6E1+t54562*t54563*t54558*t54599*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t54603*t54561*t54558*1.6E1)-ccab1*gamma_bb[index]*t54600*t54603*t54561*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t54601*t54603*t54561*(4.0/3.0)-ccab1*t54600*t54561*t54558*t54599*(4.0/3.0)+ccab2*t54601*t54561*t54558* \
                   t54599*(8.0/3.0)-ccab2*t54604*t54561*t54615*t54427*t54558+ccab4*t54606*t54562*t54563*t54558*t54599* \
                   (1.6E1/3.0)+ccab4*t54612*t54623*t54563*t54564*1.0/(t54576*t54576*t54576)*2.0+ccab2*t54561*t54615*t54562* \
                   t54618*1.0/(t54567*t54567*t54567)*2.0+ccab4*gamma_bb[index]*t54603*t54606*t54562*t54563*8.0+ccab3* \
                   gcab*t54605*t54561*t54562*t54599*4.0+ccab3*gamma_bb[index]*gcab*t54603*t54605*t54561*t54558*4.0-ccab2* \
                   gamma_bb[index]*t54604*t54561*t54618*t54558*t54599*(8.0/3.0)-ccab3*gcab*t54602*t54631*t54561*t54427* \
                   t54562*(3.0/2.0)-ccab4*t54623*t54427*t54562*t54607*t54563*t54558*2.0-ccab3*gcab*t54602*t54561*t54562* \
                   t54558*(gcab*t54599*4.0+gamma_bb[index]*t54603*t54561*4.0+t54561*t54558*t54599*8.0+gcab*t54561*t54562* \
                   t54599*4.0+gamma_bb[index]*gcab*t54603*t54561*t54558*4.0)+ccab1*gamma_bb[index]*gcab*t54603*1.0/(t54560* \
                   t54560*t54560)*t54561*t54558*(4.0/3.0)+ccab3*gcab*t54631*t54561*t54562*1.0/(t54571*t54571*t54571)* \
                   t54627*t54558*2.0-ccab3*gamma_bb[index]*gcab*t54602*t54561*t54562*t54627*t54599*4.0-ccab4*gamma_bb[index]* \
                   t54612*t54562*t54607*t54563*t54558*t54599*(1.6E1/3.0))-(-t54554+t54497+t54596+t54597+rho_b[index]* \
                   (-t54552+t54692+t54530*t54463*(t54552+t54691-t54532*t54690*t54684*t54685-a1p*c*c0p*t54424*t54541*(2.0/ \
                   3.0)))-t54449*(t54577-t54501*t54502*t54507*t54469+t54463*t54508*t54491*t54486*t54498*4.0+t54525*t54463* \
                   t54486*t54495*t54498-t54463*t54491*t54495*t54498*(t54577-t54501*t54502*t54507*t54469+(t54484*1.0/(t54478* \
                   t54478)*(b2f*c*t54460*(1.0/3.0)+b4f*t54413*t54499*(2.0/3.0)+b1f*c*t54500*t54460*(1.0/6.0)+b3f*c*t54460* \
                   t54452*(1.0/2.0)))/t54481-a1f*c*c0f*t54460*t54482*(2.0/3.0))+t54470*t54471*t54463*t54491*t54486*t54495* \
                   4.0+Aa*t54521*t54463*t54491*t54509*t54519*(t54508*t54498*4.0+t54470*t54471*t54495*4.0)*2.0+Aa*t54521* \
                   t54525*t54463*t54509*t54527*t54519*2.0-(t54521*1.0/(t54515*t54515)*t54463*t54491*t54509*t54527*(b2a* \
                   c*t54460*(1.0/3.0)+b4a*t54413*t54499*(2.0/3.0)+b1a*c*t54500*t54460*(1.0/6.0)+b3a*c*t54460*t54452*(1.0/ \
                   2.0)))/t54518+Aa*a1a*c*t54460*t54463*t54491*t54509*t54527*t54519*(2.0/3.0))-t54530*t54463*t54595)* \
                   (ccab1*gcab*t54427*t54598*(1.0/2.0)-ccab1*t54600*t54561*t54427*t54558*(1.0/2.0)+ccab2*t54601*t54561* \
                   t54427*t54558-ccab2*t54604*t54561*t54562*t54618-ccab4*t54612*t54607*t54563*t54564+ccab4*t54606*t54427* \
                   t54562*t54563*t54558*2.0+ccab3*gcab*t54605*t54561*t54427*t54562*(3.0/2.0)-ccab3*gcab*t54602*t54561* \
                   t54562*t54627*t54558)-t54697*(t54554+t54530*t54463*(t54553-c0p*t54424*t54426*2.0))-rho_b[index]*t54649* \
                   (ccaa1*gcaa*t54650*t54599*(-8.0/3.0)-ccaa2*gamma_bb[index]*t54603*t54652*t54429*(3.2E1/3.0)+ccaa1* \
                   gamma_bb[index]*t54603*t54429*t54654*8.0+ccaa4*t54430*t54440*t54662*t54663*t54668*(3.2E1/3.0)+ccaa2* \
                   t54603*t54428*t54671*t54429*t54657*(1.6E1/3.0)+ccaa4*t54430*t54431*t54440*t54663*(gcaa*t54599*(3.2E1/ \
                   3.0)+gamma_bb[index]*t54603*t54429*6.4E1+gamma_bb[index]*t54430*t54428*t54662*(1.28E2/3.0)+gcaa*t54428* \
                   t54429*t54655*9.6E1)-ccaa1*gcaa*1.0/(t54435*t54435*t54435)*t54428*t54429*t54655*(1.6E1/3.0)+ccaa2* \
                   t54432*t54428*t54429*t54657*(gcaa*t54599*(1.6E1/3.0)+gamma_bb[index]*t54603*t54429*(3.2E1/3.0))-ccaa4* \
                   gamma_bb[index]*t54430*t54651*t54428*t54662*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t54432*t54429*t54674* \
                   t54657*2.0-ccaa3*gcaa*t54428*t54653*t54429*t54655*2.4E1+ccaa4*gamma_bb[index]*t54430*t54431*t54428* \
                   t54663*t54683*4.0+ccaa3*gcaa*t54433*t54428*t54429*t54656*t54678*3.0-ccaa4*t54430*t54431*t54440*1.0/ \
                   (t54445*t54445*t54445)*t54683*t54668*2.0-ccaa2*t54432*t54428*t54671*t54429*1.0/(t54448*t54448*t54448) \
                   *t54674*2.0+ccaa3*gamma_bb[index]*gcaa*t54433*t54428*t54429*t54656*(gcaa*t54599*8.0+gamma_bb[index]* \
                   t54603*t54429*3.2E1+gcaa*t54428*t54429*t54655*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t54661*t54428*t54429* \
                   t54655*t54656*8.0-ccaa3*gamma_bb[index]*gcaa*t54433*t54661*t54428*t54429*1.0/(t54439*t54439*t54439) \
                   *t54678*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t54599*t54698*(-8.0/3.0)+cx1*gamma_bb[index]*t54603* \
                   t54702*t54632*8.0-cx2*gamma_bb[index]*t54700*t54603*t54632*(3.2E1/3.0)+cx2*t54603*t54632*t54704*t54428* \
                   t54717*(1.6E1/3.0)+cx4*t54440*t54633*t54714*t54662*t54709*(3.2E1/3.0)+cx4*t54431*t54440*t54633*t54709* \
                   (gx*t54599*(3.2E1/3.0)+gamma_bb[index]*t54603*t54632*6.4E1+gamma_bb[index]*t54633*t54428*t54662*(1.28E2/ \
                   3.0)+gx*t54632*t54428*t54655*9.6E1)-cx1*gx*t54632*t54428*1.0/(t54635*t54635*t54635)*t54655*(1.6E1/ \
                   3.0)+cx2*t54432*t54632*t54704*t54428*(gx*t54599*(1.6E1/3.0)+gamma_bb[index]*t54603*t54632*(3.2E1/3.0) \
                   )+cx2*gamma_bb[index]*t54432*t54720*t54632*t54704*2.0-cx4*gamma_bb[index]*t54633*t54428*t54662*t54699* \
                   (1.28E2/3.0)-cx3*gx*t54701*t54632*t54428*t54655*2.4E1+cx4*gamma_bb[index]*t54431*t54633*t54428*t54709* \
                   t54729*4.0+cx3*gx*t54433*t54703*t54632*t54724*t54428*3.0-cx2*t54432*t54720*t54632*t54428*t54717*1.0/ \
                   (t54647*t54647*t54647)*2.0-cx4*t54431*t54440*t54633*t54714*1.0/(t54644*t54644*t54644)*t54729*2.0+cx3* \
                   gamma_bb[index]*gx*t54433*t54703*t54632*t54428*(gx*t54599*8.0+gamma_bb[index]*t54603*t54632*3.2E1+ \
                   gx*t54632*t54428*t54655*2.4E1)+cx3*gamma_bb[index]*gx*t54703*t54632*t54428*t54708*t54655*8.0-cx3*gamma_bb[index]* \
                   gx*t54433*t54632*t54724*t54428*t54708*1.0/(t54639*t54639*t54639)*2.0)+rho_b[index]*t54697*(-t54552+ \
                   t54692+t54530*t54463*(t54552+t54691-t54692-t54532*t54690*t54684*t54685))+c0*pow(rho_b[index],1.0/3.0) \
                   *(cx1*gx*t54427*t54698-cx1*gamma_bb[index]*t54432*t54702*t54632+cx2*gamma_bb[index]*t54700*t54432* \
                   t54632*2.0-cx2*t54432*t54632*t54704*t54428*t54717-cx4*t54431*t54440*t54633*t54714*t54709+cx4*gamma_bb[index]* \
                   t54431*t54633*t54428*t54699*4.0+cx3*gx*t54701*t54433*t54632*t54428*3.0-cx3*gamma_bb[index]*gx*t54433* \
                   t54703*t54632*t54428*t54708)*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t55622 = 1.0/pow(rho_b[index],1.0/3.0);
                double t55623 = c*t55622;
                double t55624 = sqrt(t55623);
                double t55625 = pow(t55623,3.0/2.0);
                double t55626 = c*c;
                double t55627 = 1.0/pow(rho_b[index],2.0/3.0);
                double t55628 = 1.0/c0p;
                double t55629 = b1p*t55624;
                double t55630 = b3p*t55625;
                double t55631 = b4p*t55626*t55627;
                double t55632 = b2p*c*t55622;
                double t55633 = t55630+t55631+t55632+t55629;
                double t55634 = 1.0/t55633;
                double t55635 = t55634*t55628*(1.0/2.0);
                double t55636 = t55635+1.0;
                double t55637 = log(t55636);
                double t55638 = a1p*c*t55622;
                double t55639 = t55638+1.0;
                double t55640 = 1.0/pow(rho_b[index],8.0/3.0);
                double t55641 = gamma_bb[index]*gamma_bb[index];
                double t55642 = gcaa*gcaa;
                double t55643 = t55642*t55642;
                double t55644 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t55645 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t55646 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t55647 = gamma_bb[index]*gcaa*t55640;
                double t55648 = t55647+1.0;
                double t55649 = gamma_bb[index]*gcaa*t55640*3.0;
                double t55650 = gamma_bb[index]*gcaa*t55641*t55642*t55646;
                double t55651 = t55641*t55642*t55645*3.0;
                double t55652 = t55650+t55651+t55649+1.0;
                double t55653 = t55641*t55641;
                double t55654 = gamma_bb[index]*gcaa*t55640*4.0;
                double t55655 = gamma_bb[index]*gcaa*t55641*t55642*t55646*4.0;
                double t55656 = t55641*t55642*t55645*6.0;
                double t55657 = t55643*t55644*t55653;
                double t55658 = t55654+t55655+t55656+t55657+1.0;
                double t55659 = gamma_bb[index]*gcaa*t55640*2.0;
                double t55660 = t55641*t55642*t55645;
                double t55661 = t55660+t55659+1.0;
                double t55662 = gx*gx;
                double t55663 = t55662*t55662;
                double t55664 = gamma_bb[index]*gx*t55640;
                double t55665 = t55664+1.0;
                double t55666 = gamma_bb[index]*gx*t55640*3.0;
                double t55667 = gamma_bb[index]*gx*t55641*t55662*t55646;
                double t55668 = t55641*t55662*t55645*3.0;
                double t55669 = t55666+t55667+t55668+1.0;
                double t55670 = gamma_bb[index]*gx*t55640*4.0;
                double t55671 = gamma_bb[index]*gx*t55641*t55662*t55646*4.0;
                double t55672 = t55641*t55662*t55645*6.0;
                double t55673 = t55644*t55653*t55663;
                double t55674 = t55670+t55671+t55672+t55673+1.0;
                double t55675 = gamma_bb[index]*gx*t55640*2.0;
                double t55676 = t55641*t55662*t55645;
                double t55677 = t55675+t55676+1.0;
                double t55678 = pow(2.0,1.0/3.0);
                double t55679 = t55678*2.0;
                double t55680 = t55679-2.0;
                double t55681 = two_13*2.0;
                double t55682 = t55681-2.0;
                double t55683 = 1.0/t55682;
                double t55684 = 1.0/c0f;
                double t55685 = b1f*t55624;
                double t55686 = b3f*t55625;
                double t55687 = b4f*t55626*t55627;
                double t55688 = b2f*c*t55622;
                double t55689 = t55685+t55686+t55687+t55688;
                double t55690 = 1.0/t55689;
                double t55691 = t55690*t55684*(1.0/2.0);
                double t55692 = t55691+1.0;
                double t55693 = log(t55692);
                double t55694 = a1f*c*t55622;
                double t55695 = t55694+1.0;
                double t55696 = c0f*t55693*t55695*2.0;
                double t55697 = c0p*t55637*t55639*2.0;
                double t55698 = 1.0/t55648;
                double t55699 = 1.0/t55658;
                double t55700 = 1.0/t55661;
                double t55701 = 1.0/t55652;
                double t55702 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t55703 = 1.0/(t55648*t55648);
                double t55704 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t55705 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t55706 = 1.0/(t55652*t55652);
                double t55707 = 1.0/(t55661*t55661);
                double t55708 = gcaa*t55640*3.0;
                double t55709 = gamma_bb[index]*t55642*t55645*6.0;
                double t55710 = gcaa*t55641*t55642*t55646*3.0;
                double t55711 = t55710+t55708+t55709;
                double t55712 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t55713 = 1.0/(t55658*t55658);
                double t55714 = gcaa*t55640*4.0;
                double t55715 = gamma_bb[index]*t55642*t55645*1.2E1;
                double t55716 = gcaa*t55641*t55642*t55646*1.2E1;
                double t55717 = gamma_bb[index]*t55641*t55643*t55644*4.0;
                double t55718 = t55714+t55715+t55716+t55717;
                double t55719 = gcaa*t55640*2.0;
                double t55720 = gamma_bb[index]*t55642*t55645*2.0;
                double t55721 = t55720+t55719;
                double t55722 = gamma_bb[index]*gcaa*t55705*(1.6E1/3.0);
                double t55723 = t55702*t55641*t55642*(1.6E1/3.0);
                double t55724 = t55722+t55723;
                double t55725 = gamma_bb[index]*gcaa*t55705*8.0;
                double t55726 = gamma_bb[index]*gcaa*t55641*t55704*t55642*8.0;
                double t55727 = t55702*t55641*t55642*1.6E1;
                double t55728 = t55725+t55726+t55727;
                double t55729 = gamma_bb[index]*gcaa*t55705*(3.2E1/3.0);
                double t55730 = gamma_bb[index]*gcaa*t55641*t55704*t55642*3.2E1;
                double t55731 = t55702*t55641*t55642*3.2E1;
                double t55732 = t55712*t55643*t55653*(3.2E1/3.0);
                double t55733 = t55730+t55731+t55732+t55729;
                double t55734 = 1.0/pow(rho_b[index],4.0/3.0);
                double t55735 = 1.0/pow(rho_b[index],5.0/3.0);
                double t55736 = 1.0/sqrt(t55623);
                double t55737 = 1.0/t55636;
                double t55738 = 1.0/(t55633*t55633);
                double t55739 = b4p*t55626*t55735*(2.0/3.0);
                double t55740 = b2p*c*t55734*(1.0/3.0);
                double t55741 = b1p*c*t55734*t55736*(1.0/6.0);
                double t55742 = b3p*c*t55624*t55734*(1.0/2.0);
                double t55743 = t55740+t55741+t55742+t55739;
                double t55744 = t55743*t55737*t55639*t55738;
                double t55745 = ccaa1*gcaa*t55640*t55698;
                double t55746 = ccaa4*gamma_bb[index]*t55641*t55643*t55644*t55699*4.0;
                double t55747 = ccaa2*gamma_bb[index]*t55700*t55642*t55645*2.0;
                double t55748 = ccaa3*gcaa*t55701*t55641*t55642*t55646*3.0;
                double t55749 = t55745+t55746+t55747+t55748-ccaa1*gamma_bb[index]*t55703*t55642*t55645-ccaa2*t55721* \
                   t55641*t55642*t55707*t55645-ccaa4*t55713*t55643*t55644*t55653*t55718-ccaa3*gamma_bb[index]*gcaa*t55711* \
                   t55641*t55642*t55706*t55646;
                double t55750 = 1.0/t55665;
                double t55751 = 1.0/t55674;
                double t55752 = 1.0/t55677;
                double t55753 = 1.0/t55669;
                double t55754 = 1.0/(t55665*t55665);
                double t55755 = 1.0/(t55669*t55669);
                double t55756 = 1.0/(t55677*t55677);
                double t55757 = gx*t55640*3.0;
                double t55758 = gamma_bb[index]*t55662*t55645*6.0;
                double t55759 = gx*t55641*t55662*t55646*3.0;
                double t55760 = t55757+t55758+t55759;
                double t55761 = 1.0/(t55674*t55674);
                double t55762 = gx*t55640*4.0;
                double t55763 = gamma_bb[index]*t55662*t55645*1.2E1;
                double t55764 = gx*t55641*t55662*t55646*1.2E1;
                double t55765 = gamma_bb[index]*t55641*t55644*t55663*4.0;
                double t55766 = t55762+t55763+t55764+t55765;
                double t55767 = gx*t55640*2.0;
                double t55768 = gamma_bb[index]*t55662*t55645*2.0;
                double t55769 = t55767+t55768;
                double t55770 = gamma_bb[index]*gx*t55705*(1.6E1/3.0);
                double t55771 = t55702*t55641*t55662*(1.6E1/3.0);
                double t55772 = t55770+t55771;
                double t55773 = gamma_bb[index]*gx*t55705*8.0;
                double t55774 = gamma_bb[index]*gx*t55641*t55704*t55662*8.0;
                double t55775 = t55702*t55641*t55662*1.6E1;
                double t55776 = t55773+t55774+t55775;
                double t55777 = gamma_bb[index]*gx*t55705*(3.2E1/3.0);
                double t55778 = gamma_bb[index]*gx*t55641*t55704*t55662*3.2E1;
                double t55779 = t55702*t55641*t55662*3.2E1;
                double t55780 = t55712*t55653*t55663*(3.2E1/3.0);
                double t55781 = t55780+t55777+t55778+t55779;
                v_rho_b_gamma_bb_[index] = -t55749*(t55697+t55680*t55683*(t55696-c0p*t55637*t55639*2.0))+rho_b[index]* \
                   t55749*(-t55744+t55680*t55683*(t55744-(t55695*1.0/(t55689*t55689)*(b2f*c*t55734*(1.0/3.0)+b4f*t55626* \
                   t55735*(2.0/3.0)+b1f*c*t55734*t55736*(1.0/6.0)+b3f*c*t55624*t55734*(1.0/2.0)))/t55692+a1f*c*c0f*t55734* \
                   t55693*(2.0/3.0)-a1p*c*c0p*t55734*t55637*(2.0/3.0))+a1p*c*c0p*t55734*t55637*(2.0/3.0))-rho_b[index]* \
                   (t55697+t55680*t55683*(t55696-t55697))*(ccaa1*gcaa*t55705*t55698*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t55700*t55702*t55642*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t55702*t55703*t55642*8.0+ccaa2*t55702*t55721* \
                   t55641*t55642*t55707*(1.6E1/3.0)+ccaa4*t55712*t55713*t55643*t55653*t55718*(3.2E1/3.0)+ccaa4*t55713* \
                   t55643*t55644*t55653*(gcaa*t55705*(3.2E1/3.0)+gamma_bb[index]*t55702*t55642*6.4E1+gamma_bb[index]* \
                   t55712*t55641*t55643*(1.28E2/3.0)+gcaa*t55641*t55704*t55642*9.6E1)-ccaa1*gcaa*t55641*t55704*t55642* \
                   1.0/(t55648*t55648*t55648)*(1.6E1/3.0)+ccaa2*t55641*t55642*t55707*t55645*(gcaa*t55705*(1.6E1/3.0)+ \
                   gamma_bb[index]*t55702*t55642*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t55642*t55724*t55707*t55645*2.0-ccaa4* \
                   gamma_bb[index]*t55712*t55641*t55643*t55699*(1.28E2/3.0)-ccaa3*gcaa*t55701*t55641*t55704*t55642*2.4E1+ \
                   ccaa4*gamma_bb[index]*t55641*t55713*t55643*t55733*t55644*4.0+ccaa3*gcaa*t55641*t55642*t55706*t55646* \
                   t55728*3.0-ccaa2*t55721*t55641*t55642*1.0/(t55661*t55661*t55661)*t55724*t55645*2.0-ccaa4*t55643*t55733* \
                   t55644*t55653*t55718*1.0/(t55658*t55658*t55658)*2.0+ccaa3*gamma_bb[index]*gcaa*t55641*t55642*t55706* \
                   t55646*(gcaa*t55705*8.0+gamma_bb[index]*t55702*t55642*3.2E1+gcaa*t55641*t55704*t55642*2.4E1)+ccaa3* \
                   gamma_bb[index]*gcaa*t55711*t55641*t55704*t55642*t55706*8.0-ccaa3*gamma_bb[index]*gcaa*t55711*t55641* \
                   t55642*1.0/(t55652*t55652*t55652)*t55646*t55728*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t55705*t55750* \
                   (-8.0/3.0)+cx1*gamma_bb[index]*t55702*t55662*t55754*8.0-cx2*gamma_bb[index]*t55702*t55662*t55752*(3.2E1/ \
                   3.0)+cx2*t55702*t55641*t55662*t55756*t55769*(1.6E1/3.0)+cx4*t55712*t55653*t55761*t55663*t55766*(3.2E1/ \
                   3.0)+cx4*t55644*t55653*t55761*t55663*(gx*t55705*(3.2E1/3.0)+gamma_bb[index]*t55702*t55662*6.4E1+gamma_bb[index]* \
                   t55712*t55641*t55663*(1.28E2/3.0)+gx*t55641*t55704*t55662*9.6E1)-cx1*gx*t55641*t55704*t55662*1.0/(t55665* \
                   t55665*t55665)*(1.6E1/3.0)+cx2*t55641*t55662*t55645*t55756*(gx*t55705*(1.6E1/3.0)+gamma_bb[index]* \
                   t55702*t55662*(3.2E1/3.0))+cx2*gamma_bb[index]*t55662*t55645*t55772*t55756*2.0-cx4*gamma_bb[index]* \
                   t55712*t55641*t55751*t55663*(1.28E2/3.0)-cx3*gx*t55641*t55704*t55662*t55753*2.4E1+cx4*gamma_bb[index]* \
                   t55641*t55644*t55761*t55663*t55781*4.0+cx3*gx*t55641*t55662*t55646*t55755*t55776*3.0-cx2*t55641*t55662* \
                   t55645*t55772*1.0/(t55677*t55677*t55677)*t55769*2.0-cx4*t55644*t55653*t55663*t55781*1.0/(t55674*t55674* \
                   t55674)*t55766*2.0+cx3*gamma_bb[index]*gx*t55641*t55662*t55646*t55755*(gx*t55705*8.0+gamma_bb[index]* \
                   t55702*t55662*3.2E1+gx*t55641*t55704*t55662*2.4E1)+cx3*gamma_bb[index]*gx*t55641*t55704*t55760*t55662* \
                   t55755*8.0-cx3*gamma_bb[index]*gx*t55641*t55760*t55662*t55646*t55776*1.0/(t55669*t55669*t55669)*2.0) \
                   +c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t55640*t55750-cx1*gamma_bb[index]*t55662*t55645*t55754+cx2*gamma_bb[index]* \
                   t55662*t55752*t55645*2.0-cx2*t55641*t55662*t55645*t55756*t55769-cx4*t55644*t55653*t55761*t55663*t55766+ \
                   cx4*gamma_bb[index]*t55641*t55751*t55644*t55663*4.0+cx3*gx*t55641*t55662*t55753*t55646*3.0-cx3*gamma_bb[index]* \
                   gx*t55641*t55760*t55662*t55646*t55755)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t54731 = 1.0/pow(rho_a[index],1.0/3.0);
                double t54732 = c*t54731;
                double t54733 = sqrt(t54732);
                double t54734 = pow(t54732,3.0/2.0);
                double t54735 = c*c;
                double t54736 = 1.0/pow(rho_a[index],2.0/3.0);
                double t54737 = 1.0/c0p;
                double t54738 = b1p*t54733;
                double t54739 = b3p*t54734;
                double t54740 = b4p*t54735*t54736;
                double t54741 = b2p*c*t54731;
                double t54742 = t54740+t54741+t54738+t54739;
                double t54743 = 1.0/t54742;
                double t54744 = t54743*t54737*(1.0/2.0);
                double t54745 = t54744+1.0;
                double t54746 = log(t54745);
                double t54747 = a1p*c*t54731;
                double t54748 = t54747+1.0;
                double t54749 = pow(2.0,1.0/3.0);
                double t54750 = t54749*2.0;
                double t54751 = t54750-2.0;
                double t54752 = two_13*2.0;
                double t54753 = t54752-2.0;
                double t54754 = 1.0/t54753;
                double t54755 = 1.0/c0f;
                double t54756 = 1.0/pow(rho_b[index],1.0/3.0);
                double t54757 = c*t54756;
                double t54758 = sqrt(t54757);
                double t54759 = pow(t54757,3.0/2.0);
                double t54760 = 1.0/pow(rho_b[index],2.0/3.0);
                double t54761 = b1p*t54758;
                double t54762 = b3p*t54759;
                double t54763 = b4p*t54760*t54735;
                double t54764 = b2p*c*t54756;
                double t54765 = t54761+t54762+t54763+t54764;
                double t54766 = 1.0/t54765;
                double t54767 = t54737*t54766*(1.0/2.0);
                double t54768 = t54767+1.0;
                double t54769 = log(t54768);
                double t54770 = a1p*c*t54756;
                double t54771 = t54770+1.0;
                double t54772 = c0p*t54771*t54769*2.0;
                double t54773 = rho_a[index]+rho_b[index];
                double t54774 = 1.0/pow(t54773,1.0/3.0);
                double t54775 = c*t54774;
                double t54776 = sqrt(t54775);
                double t54777 = pow(t54775,3.0/2.0);
                double t54778 = 1.0/pow(t54773,2.0/3.0);
                double t54779 = b1p*t54776;
                double t54780 = b3p*t54777;
                double t54781 = b4p*t54735*t54778;
                double t54782 = b2p*c*t54774;
                double t54783 = t54780+t54781+t54782+t54779;
                double t54784 = 1.0/t54783;
                double t54785 = t54737*t54784*(1.0/2.0);
                double t54786 = t54785+1.0;
                double t54787 = log(t54786);
                double t54788 = a1p*c*t54774;
                double t54789 = t54788+1.0;
                double t54790 = c0p*t54787*t54789*2.0;
                double t54791 = rho_a[index]-rho_b[index];
                double t54792 = t54791*t54791;
                double t54793 = 1.0/t54773;
                double t54794 = t54791*t54793;
                double t54795 = 1.0/(t54773*t54773*t54773*t54773);
                double t54796 = t54792*t54792;
                double t54797 = t54794+1.0;
                double t54798 = pow(t54797,4.0/3.0);
                double t54799 = -t54794+1.0;
                double t54800 = pow(t54799,4.0/3.0);
                double t54801 = t54800+t54798-2.0;
                double t54802 = gcab*gcab;
                double t54803 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t54804 = 1.0/pow(rho_a[index],8.0/3.0);
                double t54805 = gamma_aa[index]*t54804*(1.0/2.0);
                double t54806 = 1.0/pow(rho_b[index],8.0/3.0);
                double t54807 = gamma_bb[index]*t54806*(1.0/2.0);
                double t54808 = t54805+t54807;
                double t54809 = gcab*t54808;
                double t54810 = t54809+1.0;
                double t54811 = t54808*t54808;
                double t54812 = t54802*t54811;
                double t54813 = gcab*t54808*2.0;
                double t54814 = t54812+t54813+1.0;
                double t54815 = t54802*t54802;
                double t54832 = gcab*t54804*2.0;
                double t54833 = t54802*t54804*t54808*6.0;
                double t54834 = gcab*t54802*t54811*t54804*6.0;
                double t54835 = t54811*t54804*t54815*t54808*2.0;
                double t54816 = t54832+t54833+t54834+t54835;
                double t54817 = t54811*t54811;
                double t54837 = gcab*t54804*(3.0/2.0);
                double t54838 = t54802*t54804*t54808*3.0;
                double t54839 = gcab*t54802*t54811*t54804*(3.0/2.0);
                double t54818 = t54837+t54838+t54839;
                double t54819 = t54802*t54811*3.0;
                double t54820 = gcab*t54802*t54811*t54808;
                double t54821 = gcab*t54808*3.0;
                double t54822 = t54820+t54821+t54819+1.0;
                double t54829 = gcab*t54804;
                double t54830 = t54802*t54804*t54808;
                double t54823 = t54830+t54829;
                double t54824 = t54802*t54811*6.0;
                double t54825 = gcab*t54802*t54811*t54808*4.0;
                double t54826 = t54815*t54817;
                double t54827 = gcab*t54808*4.0;
                double t54828 = t54824+t54825+t54826+t54827+1.0;
                double t54831 = 1.0/(t54814*t54814);
                double t54836 = 1.0/(t54828*t54828);
                double t54840 = 1.0/(t54822*t54822);
                double t54841 = gx*gx;
                double t54842 = gamma_aa[index]*gamma_aa[index];
                double t54843 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t54844 = t54841*t54841;
                double t54845 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t54846 = gamma_aa[index]*gx*t54804;
                double t54847 = t54846+1.0;
                double t54848 = gamma_aa[index]*gx*t54804*2.0;
                double t54849 = t54803*t54841*t54842;
                double t54850 = t54848+t54849+1.0;
                double t54851 = gamma_aa[index]*gx*t54804*3.0;
                double t54852 = gamma_aa[index]*gx*t54841*t54842*t54843;
                double t54853 = t54803*t54841*t54842*3.0;
                double t54854 = t54851+t54852+t54853+1.0;
                double t54855 = t54842*t54842;
                double t54871 = gx*t54804*4.0;
                double t54872 = gamma_aa[index]*t54803*t54841*1.2E1;
                double t54873 = gx*t54841*t54842*t54843*1.2E1;
                double t54874 = gamma_aa[index]*t54842*t54844*t54845*4.0;
                double t54856 = t54871+t54872+t54873+t54874;
                double t54857 = gamma_aa[index]*gx*t54804*4.0;
                double t54858 = gamma_aa[index]*gx*t54841*t54842*t54843*4.0;
                double t54859 = t54803*t54841*t54842*6.0;
                double t54860 = t54844*t54845*t54855;
                double t54861 = t54860+t54857+t54858+t54859+1.0;
                double t54864 = gx*t54804*2.0;
                double t54865 = gamma_aa[index]*t54803*t54841*2.0;
                double t54862 = t54864+t54865;
                double t54863 = 1.0/(t54854*t54854);
                double t54866 = 1.0/(t54850*t54850);
                double t54867 = gx*t54804*3.0;
                double t54868 = gamma_aa[index]*t54803*t54841*6.0;
                double t54869 = gx*t54841*t54842*t54843*3.0;
                double t54870 = t54867+t54868+t54869;
                double t54875 = 1.0/(t54861*t54861);
                double t54876 = b1f*t54733;
                double t54877 = b3f*t54734;
                double t54878 = b4f*t54735*t54736;
                double t54879 = b2f*c*t54731;
                double t54880 = t54876+t54877+t54878+t54879;
                double t54881 = 1.0/t54880;
                double t54882 = t54755*t54881*(1.0/2.0);
                double t54883 = t54882+1.0;
                double t54884 = log(t54883);
                double t54885 = a1f*c*t54731;
                double t54886 = t54885+1.0;
                double t54887 = c0f*t54884*t54886*2.0;
                double t54888 = c0p*t54746*t54748*2.0;
                double t54889 = gcaa*gcaa;
                double t54890 = t54889*t54889;
                double t54891 = gamma_aa[index]*gcaa*t54804;
                double t54892 = t54891+1.0;
                double t54893 = gamma_aa[index]*gcaa*t54804*2.0;
                double t54894 = t54803*t54842*t54889;
                double t54895 = t54893+t54894+1.0;
                double t54896 = gamma_aa[index]*gcaa*t54804*3.0;
                double t54897 = gamma_aa[index]*gcaa*t54842*t54843*t54889;
                double t54898 = t54803*t54842*t54889*3.0;
                double t54899 = t54896+t54897+t54898+1.0;
                double t54915 = gcaa*t54804*4.0;
                double t54916 = gamma_aa[index]*t54803*t54889*1.2E1;
                double t54917 = gcaa*t54842*t54843*t54889*1.2E1;
                double t54918 = gamma_aa[index]*t54842*t54845*t54890*4.0;
                double t54900 = t54915+t54916+t54917+t54918;
                double t54901 = gamma_aa[index]*gcaa*t54804*4.0;
                double t54902 = gamma_aa[index]*gcaa*t54842*t54843*t54889*4.0;
                double t54903 = t54803*t54842*t54889*6.0;
                double t54904 = t54845*t54890*t54855;
                double t54905 = t54901+t54902+t54903+t54904+1.0;
                double t54908 = gcaa*t54804*2.0;
                double t54909 = gamma_aa[index]*t54803*t54889*2.0;
                double t54906 = t54908+t54909;
                double t54907 = 1.0/(t54899*t54899);
                double t54910 = 1.0/(t54895*t54895);
                double t54911 = gcaa*t54804*3.0;
                double t54912 = gamma_aa[index]*t54803*t54889*6.0;
                double t54913 = gcaa*t54842*t54843*t54889*3.0;
                double t54914 = t54911+t54912+t54913;
                double t54919 = 1.0/(t54905*t54905);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t54888+t54751*t54754*(t54887-c0p*t54746*t54748*2.0) \
                   )+rho_b[index]*(t54772-t54751*t54754*(t54772-c0f*log((t54755*(1.0/2.0))/(b1f*t54758+b3f*t54759+b2f* \
                   c*t54756+b4f*t54760*t54735)+1.0)*(a1f*c*t54756+1.0)*2.0))-t54773*(t54790-t54801*t54754*t54795*t54796* \
                   (t54790-c0f*log((t54755*(1.0/2.0))/(b1f*t54776+b3f*t54777+b2f*c*t54774+b4f*t54735*t54778)+1.0)*(a1f* \
                   c*t54774+1.0)*2.0)+(Aa*t54801*t54754*log((1.0/2.0)/(Aa*(b1a*t54776+b3a*t54777+b2a*c*t54774+b4a*t54735* \
                   t54778))+1.0)*(t54795*t54796-1.0)*(a1a*c*t54774+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t54810*t54810)*t54802* \
                   t54803*(1.0/2.0)-(ccab2*t54802*t54803*(1.0/2.0))/t54814-ccab2*t54802*t54811*1.0/(t54814*t54814*t54814) \
                   *(t54823*t54823)*2.0-ccab4*t54815*(t54816*t54816)*t54817*1.0/(t54828*t54828*t54828)*2.0+ccab2*t54811* \
                   t54803*t54831*t54815*(1.0/2.0)+ccab4*t54815*t54817*t54836*(t54802*t54803*3.0+t54811*t54803*t54815* \
                   3.0+gcab*t54802*t54803*t54808*6.0)-(ccab4*t54811*t54803*t54815*3.0)/t54828+ccab2*t54802*t54804*t54831* \
                   t54823*t54808*2.0-ccab1*gcab*1.0/(t54810*t54810*t54810)*t54802*t54803*t54808*(1.0/2.0)-(ccab3*gcab* \
                   t54802*t54803*t54808*(3.0/2.0))/t54822-ccab3*gcab*t54802*t54811*1.0/(t54822*t54822*t54822)*t54808* \
                   (t54818*t54818)*2.0+ccab3*gcab*t54802*t54811*t54804*t54840*t54818*3.0+ccab4*t54811*t54804*t54815*t54816* \
                   t54808*t54836*4.0+ccab3*gcab*t54802*t54811*t54840*t54808*(t54802*t54803*(3.0/2.0)+gcab*t54802*t54803* \
                   t54808*(3.0/2.0)))+rho_a[index]*(t54888+t54751*t54754*(t54887-t54888))*(ccaa1*t54803*1.0/(t54892*t54892) \
                   *t54889*2.0-(ccaa2*t54803*t54889*2.0)/t54895+ccaa2*t54910*t54842*t54845*t54890*2.0-(ccaa4*t54842*t54845* \
                   t54890*1.2E1)/t54905+ccaa4*t54845*t54890*t54855*t54919*(t54803*t54889*1.2E1+t54842*t54845*t54890*1.2E1+ \
                   gamma_aa[index]*gcaa*t54843*t54889*2.4E1)-ccaa1*gamma_aa[index]*gcaa*t54843*1.0/(t54892*t54892*t54892) \
                   *t54889*2.0-(ccaa3*gamma_aa[index]*gcaa*t54843*t54889*6.0)/t54899-ccaa4*(t54900*t54900)*1.0/(t54905* \
                   t54905*t54905)*t54845*t54890*t54855*2.0-ccaa2*t54803*t54842*(t54906*t54906)*1.0/(t54895*t54895*t54895) \
                   *t54889*2.0+ccaa2*gamma_aa[index]*t54910*t54803*t54906*t54889*4.0+ccaa4*gamma_aa[index]*t54900*t54842* \
                   t54845*t54890*t54919*8.0+ccaa3*gcaa*t54842*t54914*t54843*t54907*t54889*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t54842*t54843*t54907*t54889*(t54803*t54889*6.0+gamma_aa[index]*gcaa*t54843*t54889*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t54842*(t54914*t54914)*t54843*t54889*1.0/(t54899*t54899*t54899)*2.0)-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*t54803*t54841*1.0/(t54847*t54847)*2.0-(cx2*t54803*t54841*2.0)/t54850+cx2*t54842*t54844*t54845* \
                   t54866*2.0-(cx4*t54842*t54844*t54845*1.2E1)/t54861+cx4*t54844*t54845*t54855*t54875*(t54803*t54841* \
                   1.2E1+t54842*t54844*t54845*1.2E1+gamma_aa[index]*gx*t54841*t54843*2.4E1)-cx1*gamma_aa[index]*gx*t54841* \
                   t54843*1.0/(t54847*t54847*t54847)*2.0-(cx3*gamma_aa[index]*gx*t54841*t54843*6.0)/t54854-cx2*t54803* \
                   t54841*1.0/(t54850*t54850*t54850)*t54842*(t54862*t54862)*2.0-cx4*1.0/(t54861*t54861*t54861)*t54844* \
                   t54845*t54855*(t54856*t54856)*2.0+cx2*gamma_aa[index]*t54803*t54841*t54862*t54866*4.0+cx4*gamma_aa[index]* \
                   t54842*t54844*t54845*t54856*t54875*8.0+cx3*gx*t54841*t54842*t54843*t54870*t54863*6.0+cx3*gamma_aa[index]* \
                   gx*t54841*t54842*t54843*t54863*(t54803*t54841*6.0+gamma_aa[index]*gx*t54841*t54843*6.0)-cx3*gamma_aa[index]* \
                   gx*t54841*t54842*t54843*(t54870*t54870)*1.0/(t54854*t54854*t54854)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t56422 = gx*gx;
                double t56423 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t56424 = 1.0/pow(rho_a[index],8.0/3.0);
                double t56425 = gamma_aa[index]*gamma_aa[index];
                double t56426 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t56427 = t56422*t56422;
                double t56428 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t56429 = gamma_aa[index]*gx*t56424;
                double t56430 = t56429+1.0;
                double t56431 = gamma_aa[index]*gx*t56424*2.0;
                double t56432 = t56422*t56423*t56425;
                double t56433 = t56431+t56432+1.0;
                double t56434 = gamma_aa[index]*gx*t56424*3.0;
                double t56435 = gamma_aa[index]*gx*t56422*t56425*t56426;
                double t56436 = t56422*t56423*t56425*3.0;
                double t56437 = t56434+t56435+t56436+1.0;
                double t56438 = t56425*t56425;
                double t56454 = gx*t56424*4.0;
                double t56455 = gamma_aa[index]*t56422*t56423*1.2E1;
                double t56456 = gx*t56422*t56425*t56426*1.2E1;
                double t56457 = gamma_aa[index]*t56425*t56427*t56428*4.0;
                double t56439 = t56454+t56455+t56456+t56457;
                double t56440 = gamma_aa[index]*gx*t56424*4.0;
                double t56441 = gamma_aa[index]*gx*t56422*t56425*t56426*4.0;
                double t56442 = t56422*t56423*t56425*6.0;
                double t56443 = t56427*t56428*t56438;
                double t56444 = t56440+t56441+t56442+t56443+1.0;
                double t56447 = gx*t56424*2.0;
                double t56448 = gamma_aa[index]*t56422*t56423*2.0;
                double t56445 = t56447+t56448;
                double t56446 = 1.0/(t56437*t56437);
                double t56449 = 1.0/(t56433*t56433);
                double t56450 = gx*t56424*3.0;
                double t56451 = gamma_aa[index]*t56422*t56423*6.0;
                double t56452 = gx*t56422*t56425*t56426*3.0;
                double t56453 = t56450+t56451+t56452;
                double t56458 = 1.0/(t56444*t56444);
                double t56459 = 1.0/pow(rho_a[index],1.0/3.0);
                double t56460 = c*t56459;
                double t56461 = sqrt(t56460);
                double t56462 = pow(t56460,3.0/2.0);
                double t56463 = c*c;
                double t56464 = 1.0/pow(rho_a[index],2.0/3.0);
                double t56465 = 1.0/c0p;
                double t56466 = b1p*t56461;
                double t56467 = b3p*t56462;
                double t56468 = b4p*t56463*t56464;
                double t56469 = b2p*c*t56459;
                double t56470 = t56466+t56467+t56468+t56469;
                double t56471 = 1.0/t56470;
                double t56472 = t56471*t56465*(1.0/2.0);
                double t56473 = t56472+1.0;
                double t56474 = log(t56473);
                double t56475 = a1p*c*t56459;
                double t56476 = t56475+1.0;
                double t56477 = gcaa*gcaa;
                double t56478 = t56477*t56477;
                double t56479 = gamma_aa[index]*gcaa*t56424;
                double t56480 = t56479+1.0;
                double t56481 = gamma_aa[index]*gcaa*t56424*2.0;
                double t56482 = t56423*t56425*t56477;
                double t56483 = t56481+t56482+1.0;
                double t56484 = gamma_aa[index]*gcaa*t56424*3.0;
                double t56485 = gamma_aa[index]*gcaa*t56425*t56426*t56477;
                double t56486 = t56423*t56425*t56477*3.0;
                double t56487 = t56484+t56485+t56486+1.0;
                double t56503 = gcaa*t56424*4.0;
                double t56504 = gamma_aa[index]*t56423*t56477*1.2E1;
                double t56505 = gcaa*t56425*t56426*t56477*1.2E1;
                double t56506 = gamma_aa[index]*t56425*t56428*t56478*4.0;
                double t56488 = t56503+t56504+t56505+t56506;
                double t56489 = gamma_aa[index]*gcaa*t56424*4.0;
                double t56490 = gamma_aa[index]*gcaa*t56425*t56426*t56477*4.0;
                double t56491 = t56423*t56425*t56477*6.0;
                double t56492 = t56428*t56438*t56478;
                double t56493 = t56490+t56491+t56492+t56489+1.0;
                double t56496 = gcaa*t56424*2.0;
                double t56497 = gamma_aa[index]*t56423*t56477*2.0;
                double t56494 = t56496+t56497;
                double t56495 = 1.0/(t56487*t56487);
                double t56498 = 1.0/(t56483*t56483);
                double t56499 = gcaa*t56424*3.0;
                double t56500 = gamma_aa[index]*t56423*t56477*6.0;
                double t56501 = gcaa*t56425*t56426*t56477*3.0;
                double t56502 = t56500+t56501+t56499;
                double t56507 = 1.0/(t56493*t56493);
                v_gamma_aa_gamma_aa_[index] = -c0*pow(rho_a[index],4.0/3.0)*(cx1*1.0/(t56430*t56430)*t56422*t56423* \
                   2.0-(cx2*t56422*t56423*2.0)/t56433+cx2*t56425*t56427*t56428*t56449*2.0-(cx4*t56425*t56427*t56428*1.2E1) \
                   /t56444+cx4*t56427*t56428*t56438*t56458*(t56422*t56423*1.2E1+t56425*t56427*t56428*1.2E1+gamma_aa[index]* \
                   gx*t56422*t56426*2.4E1)-cx1*gamma_aa[index]*gx*1.0/(t56430*t56430*t56430)*t56422*t56426*2.0-(cx3*gamma_aa[index]* \
                   gx*t56422*t56426*6.0)/t56437-cx2*t56422*t56423*1.0/(t56433*t56433*t56433)*t56425*(t56445*t56445)*2.0- \
                   cx4*1.0/(t56444*t56444*t56444)*t56427*t56428*t56438*(t56439*t56439)*2.0+cx2*gamma_aa[index]*t56422* \
                   t56423*t56445*t56449*4.0+cx4*gamma_aa[index]*t56425*t56427*t56428*t56439*t56458*8.0+cx3*gx*t56422* \
                   t56425*t56426*t56453*t56446*6.0+cx3*gamma_aa[index]*gx*t56422*t56425*t56426*t56446*(t56422*t56423* \
                   6.0+gamma_aa[index]*gx*t56422*t56426*6.0)-cx3*gamma_aa[index]*gx*t56422*t56425*t56426*(t56453*t56453) \
                   *1.0/(t56437*t56437*t56437)*2.0)+rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t56461+b3f*t56462+b2f*c*t56459+b4f*t56463*t56464))+1.0)*(a1f*c*t56459+1.0)*2.0-c0p*t56474*t56476* \
                   2.0))/(two_13*2.0-2.0)+c0p*t56474*t56476*2.0)*(ccaa1*t56423*1.0/(t56480*t56480)*t56477*2.0-(ccaa2* \
                   t56423*t56477*2.0)/t56483+ccaa2*t56425*t56428*t56478*t56498*2.0-(ccaa4*t56425*t56428*t56478*1.2E1) \
                   /t56493+ccaa4*t56507*t56428*t56438*t56478*(t56423*t56477*1.2E1+t56425*t56428*t56478*1.2E1+gamma_aa[index]* \
                   gcaa*t56426*t56477*2.4E1)-ccaa1*gamma_aa[index]*gcaa*t56426*1.0/(t56480*t56480*t56480)*t56477*2.0- \
                   (ccaa3*gamma_aa[index]*gcaa*t56426*t56477*6.0)/t56487-ccaa2*t56423*t56425*1.0/(t56483*t56483*t56483) \
                   *(t56494*t56494)*t56477*2.0-ccaa4*t56428*t56438*1.0/(t56493*t56493*t56493)*t56478*(t56488*t56488)* \
                   2.0+ccaa2*gamma_aa[index]*t56423*t56494*t56477*t56498*4.0+ccaa4*gamma_aa[index]*t56425*t56507*t56428* \
                   t56478*t56488*8.0+ccaa3*gcaa*t56502*t56425*t56426*t56477*t56495*6.0+ccaa3*gamma_aa[index]*gcaa*t56425* \
                   t56426*t56477*t56495*(t56423*t56477*6.0+gamma_aa[index]*gcaa*t56426*t56477*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*(t56502*t56502)*t56425*t56426*t56477*1.0/(t56487*t56487*t56487)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t54922 = 1.0/pow(rho_a[index],1.0/3.0);
                double t54923 = c*t54922;
                double t54924 = sqrt(t54923);
                double t54925 = pow(t54923,3.0/2.0);
                double t54926 = c*c;
                double t54927 = 1.0/pow(rho_a[index],2.0/3.0);
                double t54928 = 1.0/c0p;
                double t54929 = b1p*t54924;
                double t54930 = b3p*t54925;
                double t54931 = b4p*t54926*t54927;
                double t54932 = b2p*c*t54922;
                double t54933 = t54930+t54931+t54932+t54929;
                double t54934 = 1.0/t54933;
                double t54935 = t54934*t54928*(1.0/2.0);
                double t54936 = t54935+1.0;
                double t54937 = log(t54936);
                double t54938 = a1p*c*t54922;
                double t54939 = t54938+1.0;
                double t54940 = pow(2.0,1.0/3.0);
                double t54941 = t54940*2.0;
                double t54942 = t54941-2.0;
                double t54943 = two_13*2.0;
                double t54944 = t54943-2.0;
                double t54945 = 1.0/t54944;
                double t54946 = 1.0/c0f;
                double t54947 = 1.0/pow(rho_b[index],1.0/3.0);
                double t54948 = c*t54947;
                double t54949 = sqrt(t54948);
                double t54950 = pow(t54948,3.0/2.0);
                double t54951 = 1.0/pow(rho_b[index],2.0/3.0);
                double t54952 = b1p*t54949;
                double t54953 = b3p*t54950;
                double t54954 = b4p*t54951*t54926;
                double t54955 = b2p*c*t54947;
                double t54956 = t54952+t54953+t54954+t54955;
                double t54957 = 1.0/t54956;
                double t54958 = t54928*t54957*(1.0/2.0);
                double t54959 = t54958+1.0;
                double t54960 = log(t54959);
                double t54961 = a1p*c*t54947;
                double t54962 = t54961+1.0;
                double t54963 = c0p*t54960*t54962*2.0;
                double t54964 = rho_a[index]+rho_b[index];
                double t54965 = 1.0/pow(t54964,1.0/3.0);
                double t54966 = c*t54965;
                double t54967 = sqrt(t54966);
                double t54968 = pow(t54966,3.0/2.0);
                double t54969 = 1.0/pow(t54964,2.0/3.0);
                double t54970 = b1p*t54967;
                double t54971 = b3p*t54968;
                double t54972 = b4p*t54926*t54969;
                double t54973 = b2p*c*t54965;
                double t54974 = t54970+t54971+t54972+t54973;
                double t54975 = 1.0/t54974;
                double t54976 = t54928*t54975*(1.0/2.0);
                double t54977 = t54976+1.0;
                double t54978 = log(t54977);
                double t54979 = a1p*c*t54965;
                double t54980 = t54979+1.0;
                double t54981 = c0p*t54980*t54978*2.0;
                double t54982 = rho_a[index]-rho_b[index];
                double t54983 = t54982*t54982;
                double t54984 = 1.0/t54964;
                double t54985 = t54982*t54984;
                double t54986 = 1.0/(t54964*t54964*t54964*t54964);
                double t54987 = t54983*t54983;
                double t54988 = t54985+1.0;
                double t54989 = pow(t54988,4.0/3.0);
                double t54990 = -t54985+1.0;
                double t54991 = pow(t54990,4.0/3.0);
                double t54992 = t54991+t54989-2.0;
                double t54993 = gcab*gcab;
                double t54996 = 1.0/pow(rho_a[index],8.0/3.0);
                double t54997 = 1.0/pow(rho_b[index],8.0/3.0);
                double t54998 = gamma_aa[index]*t54996*(1.0/2.0);
                double t54999 = gamma_bb[index]*t54997*(1.0/2.0);
                double t54994 = t54998+t54999;
                double t54995 = t54994*t54994;
                double t55000 = t54993*t54993;
                double t55001 = t54995*t54995;
                double t55002 = t54993*t54995*3.0;
                double t55003 = gcab*t54993*t54994*t54995;
                double t55004 = gcab*t54994*3.0;
                double t55005 = t55002+t55003+t55004+1.0;
                double t55006 = t54993*t54995;
                double t55007 = gcab*t54994*2.0;
                double t55008 = t55006+t55007+1.0;
                double t55009 = t54993*t54995*6.0;
                double t55010 = gcab*t54993*t54994*t54995*4.0;
                double t55011 = t55000*t55001;
                double t55012 = gcab*t54994*4.0;
                double t55013 = t55010+t55011+t55012+t55009+1.0;
                double t55014 = 1.0/(t55008*t55008);
                double t55015 = gcab*t54996;
                double t55016 = t54993*t54994*t54996;
                double t55017 = t55015+t55016;
                double t55018 = gcab*t54997;
                double t55019 = t54993*t54994*t54997;
                double t55020 = t55018+t55019;
                double t55021 = gcab*t54994;
                double t55022 = t55021+1.0;
                double t55023 = gcab*t54996*2.0;
                double t55024 = t54993*t54994*t54996*6.0;
                double t55025 = gcab*t54993*t54995*t54996*6.0;
                double t55026 = t54994*t54995*t54996*t55000*2.0;
                double t55027 = t55023+t55024+t55025+t55026;
                double t55028 = 1.0/(t55013*t55013);
                double t55029 = gcab*t54997*2.0;
                double t55030 = t54993*t54994*t54997*6.0;
                double t55031 = gcab*t54993*t54995*t54997*6.0;
                double t55032 = t54994*t54995*t54997*t55000*2.0;
                double t55033 = t55030+t55031+t55032+t55029;
                double t55034 = gcab*t54996*(3.0/2.0);
                double t55035 = t54993*t54994*t54996*3.0;
                double t55036 = gcab*t54993*t54995*t54996*(3.0/2.0);
                double t55037 = t55034+t55035+t55036;
                double t55038 = 1.0/(t55005*t55005);
                double t55039 = gcab*t54997*(3.0/2.0);
                double t55040 = t54993*t54994*t54997*3.0;
                double t55041 = gcab*t54993*t54995*t54997*(3.0/2.0);
                double t55042 = t55040+t55041+t55039;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t54963-t54942*t54945*(t54963-c0f*log((t54946*(1.0/2.0) \
                   )/(b1f*t54949+b3f*t54950+b2f*c*t54947+b4f*t54951*t54926)+1.0)*(a1f*c*t54947+1.0)*2.0))+t54964*(t54981- \
                   t54945*t54992*t54986*t54987*(t54981-c0f*log((t54946*(1.0/2.0))/(b1f*t54967+b3f*t54968+b2f*c*t54965+ \
                   b4f*t54926*t54969)+1.0)*(a1f*c*t54965+1.0)*2.0)+(Aa*t54945*t54992*log((1.0/2.0)/(Aa*(b1a*t54967+b3a* \
                   t54968+b2a*c*t54965+b4a*t54926*t54969))+1.0)*(t54986*t54987-1.0)*(a1a*c*t54965+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t54942*t54945*(c0p*t54937*t54939*2.0-c0f*log((t54946*(1.0/2.0))/(b1f*t54924+b3f*t54925+b2f*c*t54922+ \
                   b4f*t54926*t54927)+1.0)*(a1f*c*t54922+1.0)*2.0)-c0p*t54937*t54939*2.0))*(ccab4*t55000*t55001*t55028* \
                   (t54993*t54996*t54997*3.0+t54995*t54996*t54997*t55000*3.0+gcab*t54993*t54994*t54996*t54997*6.0)+ccab1* \
                   t54993*t54996*t54997*1.0/(t55022*t55022)*(1.0/2.0)-(ccab2*t54993*t54996*t54997*(1.0/2.0))/t55008+ccab2* \
                   t54993*t54994*t54996*t55020*t55014+ccab2*t54995*t54996*t54997*t55000*t55014*(1.0/2.0)+ccab2*t54993* \
                   t54994*t54997*t55014*t55017-(ccab4*t54995*t54996*t54997*t55000*3.0)/t55013-ccab2*t54993*t54995*t55020* \
                   1.0/(t55008*t55008*t55008)*t55017*2.0-ccab4*t55000*t55001*1.0/(t55013*t55013*t55013)*t55033*t55027* \
                   2.0+ccab3*gcab*t54993*t54995*t54996*t55042*t55038*(3.0/2.0)+ccab3*gcab*t54993*t54995*t54997*t55037* \
                   t55038*(3.0/2.0)+ccab4*t54994*t54995*t54996*t55000*t55033*t55028*2.0+ccab4*t54994*t54995*t54997*t55000* \
                   t55027*t55028*2.0+ccab3*gcab*t54993*t54994*t54995*t55038*(t54993*t54996*t54997*(3.0/2.0)+gcab*t54993* \
                   t54994*t54996*t54997*(3.0/2.0))-ccab1*gcab*t54993*t54994*t54996*t54997*1.0/(t55022*t55022*t55022)* \
                   (1.0/2.0)-(ccab3*gcab*t54993*t54994*t54996*t54997*(3.0/2.0))/t55005-ccab3*gcab*t54993*t54994*t54995* \
                   1.0/(t55005*t55005*t55005)*t55042*t55037*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t55046 = 1.0/pow(rho_a[index],1.0/3.0);
                double t55047 = c*t55046;
                double t55048 = sqrt(t55047);
                double t55049 = pow(t55047,3.0/2.0);
                double t55050 = c*c;
                double t55051 = 1.0/pow(rho_a[index],2.0/3.0);
                double t55052 = 1.0/c0p;
                double t55053 = b1p*t55048;
                double t55054 = b3p*t55049;
                double t55055 = b4p*t55050*t55051;
                double t55056 = b2p*c*t55046;
                double t55057 = t55053+t55054+t55055+t55056;
                double t55058 = 1.0/t55057;
                double t55059 = t55052*t55058*(1.0/2.0);
                double t55060 = t55059+1.0;
                double t55061 = log(t55060);
                double t55062 = a1p*c*t55046;
                double t55063 = t55062+1.0;
                double t55064 = pow(2.0,1.0/3.0);
                double t55065 = t55064*2.0;
                double t55066 = t55065-2.0;
                double t55067 = two_13*2.0;
                double t55068 = t55067-2.0;
                double t55069 = 1.0/t55068;
                double t55070 = 1.0/c0f;
                double t55071 = 1.0/pow(rho_b[index],1.0/3.0);
                double t55072 = c*t55071;
                double t55073 = sqrt(t55072);
                double t55074 = pow(t55072,3.0/2.0);
                double t55075 = 1.0/pow(rho_b[index],2.0/3.0);
                double t55076 = b1p*t55073;
                double t55077 = b3p*t55074;
                double t55078 = b4p*t55050*t55075;
                double t55079 = b2p*c*t55071;
                double t55080 = t55076+t55077+t55078+t55079;
                double t55081 = 1.0/t55080;
                double t55082 = t55052*t55081*(1.0/2.0);
                double t55083 = t55082+1.0;
                double t55084 = log(t55083);
                double t55085 = a1p*c*t55071;
                double t55086 = t55085+1.0;
                double t55087 = c0p*t55084*t55086*2.0;
                double t55088 = rho_a[index]+rho_b[index];
                double t55089 = 1.0/pow(t55088,1.0/3.0);
                double t55090 = c*t55089;
                double t55091 = sqrt(t55090);
                double t55092 = pow(t55090,3.0/2.0);
                double t55093 = 1.0/pow(t55088,2.0/3.0);
                double t55094 = b1p*t55091;
                double t55095 = b3p*t55092;
                double t55096 = b4p*t55050*t55093;
                double t55097 = b2p*c*t55089;
                double t55098 = t55094+t55095+t55096+t55097;
                double t55099 = 1.0/t55098;
                double t55100 = t55052*t55099*(1.0/2.0);
                double t55101 = t55100+1.0;
                double t55102 = log(t55101);
                double t55103 = a1p*c*t55089;
                double t55104 = t55103+1.0;
                double t55105 = c0p*t55102*t55104*2.0;
                double t55106 = rho_a[index]-rho_b[index];
                double t55107 = t55106*t55106;
                double t55108 = 1.0/t55088;
                double t55109 = t55106*t55108;
                double t55110 = 1.0/(t55088*t55088*t55088*t55088);
                double t55111 = t55107*t55107;
                double t55112 = t55109+1.0;
                double t55113 = pow(t55112,4.0/3.0);
                double t55114 = -t55109+1.0;
                double t55115 = pow(t55114,4.0/3.0);
                double t55116 = t55113+t55115-2.0;
                double t55117 = gcab*gcab;
                double t55118 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t55119 = 1.0/pow(rho_a[index],8.0/3.0);
                double t55120 = gamma_aa[index]*t55119*(1.0/2.0);
                double t55121 = 1.0/pow(rho_b[index],8.0/3.0);
                double t55122 = gamma_bb[index]*t55121*(1.0/2.0);
                double t55123 = t55120+t55122;
                double t55124 = gcab*t55123;
                double t55125 = t55124+1.0;
                double t55126 = t55123*t55123;
                double t55127 = t55117*t55126;
                double t55128 = gcab*t55123*2.0;
                double t55129 = t55127+t55128+1.0;
                double t55130 = t55117*t55117;
                double t55147 = gcab*t55121*2.0;
                double t55148 = t55121*t55123*t55117*6.0;
                double t55149 = gcab*t55121*t55117*t55126*6.0;
                double t55150 = t55121*t55130*t55123*t55126*2.0;
                double t55131 = t55150+t55147+t55148+t55149;
                double t55132 = t55126*t55126;
                double t55152 = gcab*t55121*(3.0/2.0);
                double t55153 = t55121*t55123*t55117*3.0;
                double t55154 = gcab*t55121*t55117*t55126*(3.0/2.0);
                double t55133 = t55152+t55153+t55154;
                double t55134 = t55117*t55126*3.0;
                double t55135 = gcab*t55123*t55117*t55126;
                double t55136 = gcab*t55123*3.0;
                double t55137 = t55134+t55135+t55136+1.0;
                double t55144 = gcab*t55121;
                double t55145 = t55121*t55123*t55117;
                double t55138 = t55144+t55145;
                double t55139 = t55117*t55126*6.0;
                double t55140 = gcab*t55123*t55117*t55126*4.0;
                double t55141 = t55130*t55132;
                double t55142 = gcab*t55123*4.0;
                double t55143 = t55140+t55141+t55142+t55139+1.0;
                double t55146 = 1.0/(t55129*t55129);
                double t55151 = 1.0/(t55143*t55143);
                double t55155 = 1.0/(t55137*t55137);
                double t55156 = gx*gx;
                double t55157 = gamma_bb[index]*gamma_bb[index];
                double t55158 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t55159 = t55156*t55156;
                double t55160 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t55161 = gamma_bb[index]*gx*t55121;
                double t55162 = t55161+1.0;
                double t55163 = gamma_bb[index]*gx*t55121*2.0;
                double t55164 = t55118*t55156*t55157;
                double t55165 = t55163+t55164+1.0;
                double t55166 = gamma_bb[index]*gx*t55121*3.0;
                double t55167 = gamma_bb[index]*gx*t55156*t55157*t55158;
                double t55168 = t55118*t55156*t55157*3.0;
                double t55169 = t55166+t55167+t55168+1.0;
                double t55170 = t55157*t55157;
                double t55186 = gx*t55121*4.0;
                double t55187 = gamma_bb[index]*t55118*t55156*1.2E1;
                double t55188 = gx*t55156*t55157*t55158*1.2E1;
                double t55189 = gamma_bb[index]*t55160*t55157*t55159*4.0;
                double t55171 = t55186+t55187+t55188+t55189;
                double t55172 = gamma_bb[index]*gx*t55121*4.0;
                double t55173 = gamma_bb[index]*gx*t55156*t55157*t55158*4.0;
                double t55174 = t55118*t55156*t55157*6.0;
                double t55175 = t55160*t55170*t55159;
                double t55176 = t55172+t55173+t55174+t55175+1.0;
                double t55179 = gx*t55121*2.0;
                double t55180 = gamma_bb[index]*t55118*t55156*2.0;
                double t55177 = t55180+t55179;
                double t55178 = 1.0/(t55169*t55169);
                double t55181 = 1.0/(t55165*t55165);
                double t55182 = gx*t55121*3.0;
                double t55183 = gamma_bb[index]*t55118*t55156*6.0;
                double t55184 = gx*t55156*t55157*t55158*3.0;
                double t55185 = t55182+t55183+t55184;
                double t55190 = 1.0/(t55176*t55176);
                double t55191 = b1f*t55073;
                double t55192 = b3f*t55074;
                double t55193 = b4f*t55050*t55075;
                double t55194 = b2f*c*t55071;
                double t55195 = t55191+t55192+t55193+t55194;
                double t55196 = 1.0/t55195;
                double t55197 = t55070*t55196*(1.0/2.0);
                double t55198 = t55197+1.0;
                double t55199 = log(t55198);
                double t55200 = a1f*c*t55071;
                double t55201 = t55200+1.0;
                double t55202 = t55087-c0f*t55201*t55199*2.0;
                double t55203 = t55087-t55202*t55066*t55069;
                double t55204 = gcaa*gcaa;
                double t55205 = t55204*t55204;
                double t55206 = gamma_bb[index]*gcaa*t55121;
                double t55207 = t55206+1.0;
                double t55208 = gamma_bb[index]*gcaa*t55121*2.0;
                double t55209 = t55204*t55118*t55157;
                double t55210 = t55208+t55209+1.0;
                double t55211 = gamma_bb[index]*gcaa*t55121*3.0;
                double t55212 = gamma_bb[index]*gcaa*t55204*t55157*t55158;
                double t55213 = t55204*t55118*t55157*3.0;
                double t55214 = t55211+t55212+t55213+1.0;
                double t55230 = gcaa*t55121*4.0;
                double t55231 = gamma_bb[index]*t55204*t55118*1.2E1;
                double t55232 = gcaa*t55204*t55157*t55158*1.2E1;
                double t55233 = gamma_bb[index]*t55160*t55205*t55157*4.0;
                double t55215 = t55230+t55231+t55232+t55233;
                double t55216 = gamma_bb[index]*gcaa*t55121*4.0;
                double t55217 = gamma_bb[index]*gcaa*t55204*t55157*t55158*4.0;
                double t55218 = t55204*t55118*t55157*6.0;
                double t55219 = t55160*t55205*t55170;
                double t55220 = t55216+t55217+t55218+t55219+1.0;
                double t55223 = gcaa*t55121*2.0;
                double t55224 = gamma_bb[index]*t55204*t55118*2.0;
                double t55221 = t55223+t55224;
                double t55222 = 1.0/(t55214*t55214);
                double t55225 = 1.0/(t55210*t55210);
                double t55226 = gcaa*t55121*3.0;
                double t55227 = gamma_bb[index]*t55204*t55118*6.0;
                double t55228 = gcaa*t55204*t55157*t55158*3.0;
                double t55229 = t55226+t55227+t55228;
                double t55234 = 1.0/(t55220*t55220);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t55203+t55088*(t55105-t55110*t55111*t55116*t55069*(t55105- \
                   c0f*log((t55070*(1.0/2.0))/(b1f*t55091+b3f*t55092+b2f*c*t55089+b4f*t55050*t55093)+1.0)*(a1f*c*t55089+ \
                   1.0)*2.0)+(Aa*t55116*t55069*log((1.0/2.0)/(Aa*(b1a*t55091+b3a*t55092+b2a*c*t55089+b4a*t55050*t55093) \
                   )+1.0)*(t55110*t55111-1.0)*(a1a*c*t55089+1.0)*2.0)/d2fz0)+rho_a[index]*(t55066*t55069*(c0p*t55061* \
                   t55063*2.0-c0f*log((t55070*(1.0/2.0))/(b1f*t55048+b3f*t55049+b2f*c*t55046+b4f*t55050*t55051)+1.0)* \
                   (a1f*c*t55046+1.0)*2.0)-c0p*t55061*t55063*2.0))*(ccab1*1.0/(t55125*t55125)*t55117*t55118*(1.0/2.0) \
                   -(ccab2*t55117*t55118*(1.0/2.0))/t55129-ccab4*t55130*(t55131*t55131)*t55132*1.0/(t55143*t55143*t55143) \
                   *2.0-ccab2*t55117*t55126*1.0/(t55129*t55129*t55129)*(t55138*t55138)*2.0+ccab2*t55130*t55126*t55118* \
                   t55146*(1.0/2.0)+ccab4*t55130*t55132*t55151*(t55117*t55118*3.0+t55130*t55126*t55118*3.0+gcab*t55123* \
                   t55117*t55118*6.0)-(ccab4*t55130*t55126*t55118*3.0)/t55143+ccab2*t55121*t55123*t55117*t55146*t55138* \
                   2.0-ccab1*gcab*t55123*1.0/(t55125*t55125*t55125)*t55117*t55118*(1.0/2.0)-(ccab3*gcab*t55123*t55117* \
                   t55118*(3.0/2.0))/t55137-ccab3*gcab*t55123*(t55133*t55133)*t55117*t55126*1.0/(t55137*t55137*t55137) \
                   *2.0+ccab3*gcab*t55121*t55133*t55117*t55126*t55155*3.0+ccab4*t55121*t55130*t55131*t55123*t55151*t55126* \
                   4.0+ccab3*gcab*t55123*t55117*t55126*t55155*(t55117*t55118*(3.0/2.0)+gcab*t55123*t55117*t55118*(3.0/ \
                   2.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*1.0/(t55162*t55162)*t55118*t55156*2.0-(cx2*t55118*t55156* \
                   2.0)/t55165+cx2*t55160*t55181*t55157*t55159*2.0-(cx4*t55160*t55157*t55159*1.2E1)/t55176+cx4*t55160* \
                   t55170*t55190*t55159*(t55118*t55156*1.2E1+t55160*t55157*t55159*1.2E1+gamma_bb[index]*gx*t55156*t55158* \
                   2.4E1)-cx1*gamma_bb[index]*gx*1.0/(t55162*t55162*t55162)*t55156*t55158*2.0-(cx3*gamma_bb[index]*gx* \
                   t55156*t55158*6.0)/t55169-cx2*t55118*t55156*1.0/(t55165*t55165*t55165)*t55157*(t55177*t55177)*2.0- \
                   cx4*t55160*t55170*(t55171*t55171)*1.0/(t55176*t55176*t55176)*t55159*2.0+cx2*gamma_bb[index]*t55118* \
                   t55181*t55156*t55177*4.0+cx4*gamma_bb[index]*t55160*t55171*t55190*t55157*t55159*8.0+cx3*gx*t55156* \
                   t55157*t55158*t55185*t55178*6.0+cx3*gamma_bb[index]*gx*t55156*t55157*t55158*t55178*(t55118*t55156* \
                   6.0+gamma_bb[index]*gx*t55156*t55158*6.0)-cx3*gamma_bb[index]*gx*t55156*t55157*t55158*(t55185*t55185) \
                   *1.0/(t55169*t55169*t55169)*2.0)-rho_b[index]*t55203*((ccaa2*t55204*t55118*2.0)/t55210-ccaa1*t55204* \
                   1.0/(t55207*t55207)*t55118*2.0-ccaa2*t55160*t55205*t55225*t55157*2.0+(ccaa4*t55160*t55205*t55157*1.2E1) \
                   /t55220-ccaa4*t55160*t55205*t55170*t55234*(t55204*t55118*1.2E1+t55160*t55205*t55157*1.2E1+gamma_bb[index]* \
                   gcaa*t55204*t55158*2.4E1)+(ccaa3*gamma_bb[index]*gcaa*t55204*t55158*6.0)/t55214+ccaa1*gamma_bb[index]* \
                   gcaa*t55204*1.0/(t55207*t55207*t55207)*t55158*2.0+ccaa4*1.0/(t55220*t55220*t55220)*t55160*t55205*t55170* \
                   (t55215*t55215)*2.0+ccaa2*1.0/(t55210*t55210*t55210)*(t55221*t55221)*t55204*t55118*t55157*2.0-ccaa2* \
                   gamma_bb[index]*t55221*t55204*t55225*t55118*4.0-ccaa4*gamma_bb[index]*t55160*t55205*t55215*t55234* \
                   t55157*8.0-ccaa3*gcaa*t55204*t55222*t55157*t55229*t55158*6.0-ccaa3*gamma_bb[index]*gcaa*t55204*t55222* \
                   t55157*t55158*(t55204*t55118*6.0+gamma_bb[index]*gcaa*t55204*t55158*6.0)+ccaa3*gamma_bb[index]*gcaa* \
                   t55204*1.0/(t55214*t55214*t55214)*t55157*(t55229*t55229)*t55158*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t55788 = gx*gx;
                double t55789 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t55790 = 1.0/pow(rho_b[index],8.0/3.0);
                double t55791 = gamma_bb[index]*gamma_bb[index];
                double t55792 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t55793 = t55788*t55788;
                double t55794 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t55795 = gamma_bb[index]*gx*t55790;
                double t55796 = t55795+1.0;
                double t55797 = gamma_bb[index]*gx*t55790*2.0;
                double t55798 = t55791*t55788*t55789;
                double t55799 = t55797+t55798+1.0;
                double t55800 = gamma_bb[index]*gx*t55790*3.0;
                double t55801 = gamma_bb[index]*gx*t55791*t55792*t55788;
                double t55802 = t55791*t55788*t55789*3.0;
                double t55803 = t55800+t55801+t55802+1.0;
                double t55804 = t55791*t55791;
                double t55820 = gx*t55790*4.0;
                double t55821 = gamma_bb[index]*t55788*t55789*1.2E1;
                double t55822 = gx*t55791*t55792*t55788*1.2E1;
                double t55823 = gamma_bb[index]*t55791*t55793*t55794*4.0;
                double t55805 = t55820+t55821+t55822+t55823;
                double t55806 = gamma_bb[index]*gx*t55790*4.0;
                double t55807 = gamma_bb[index]*gx*t55791*t55792*t55788*4.0;
                double t55808 = t55791*t55788*t55789*6.0;
                double t55809 = t55804*t55793*t55794;
                double t55810 = t55806+t55807+t55808+t55809+1.0;
                double t55813 = gx*t55790*2.0;
                double t55814 = gamma_bb[index]*t55788*t55789*2.0;
                double t55811 = t55813+t55814;
                double t55812 = 1.0/(t55803*t55803);
                double t55815 = 1.0/(t55799*t55799);
                double t55816 = gx*t55790*3.0;
                double t55817 = gamma_bb[index]*t55788*t55789*6.0;
                double t55818 = gx*t55791*t55792*t55788*3.0;
                double t55819 = t55816+t55817+t55818;
                double t55824 = 1.0/(t55810*t55810);
                double t55825 = 1.0/pow(rho_b[index],1.0/3.0);
                double t55826 = c*t55825;
                double t55827 = sqrt(t55826);
                double t55828 = pow(t55826,3.0/2.0);
                double t55829 = c*c;
                double t55830 = 1.0/pow(rho_b[index],2.0/3.0);
                double t55831 = 1.0/c0p;
                double t55832 = b1p*t55827;
                double t55833 = b3p*t55828;
                double t55834 = b4p*t55830*t55829;
                double t55835 = b2p*c*t55825;
                double t55836 = t55832+t55833+t55834+t55835;
                double t55837 = 1.0/t55836;
                double t55838 = t55831*t55837*(1.0/2.0);
                double t55839 = t55838+1.0;
                double t55840 = log(t55839);
                double t55841 = a1p*c*t55825;
                double t55842 = t55841+1.0;
                double t55843 = gcaa*gcaa;
                double t55844 = t55843*t55843;
                double t55845 = gamma_bb[index]*gcaa*t55790;
                double t55846 = t55845+1.0;
                double t55847 = gamma_bb[index]*gcaa*t55790*2.0;
                double t55848 = t55843*t55791*t55789;
                double t55849 = t55847+t55848+1.0;
                double t55850 = gamma_bb[index]*gcaa*t55790*3.0;
                double t55851 = gamma_bb[index]*gcaa*t55843*t55791*t55792;
                double t55852 = t55843*t55791*t55789*3.0;
                double t55853 = t55850+t55851+t55852+1.0;
                double t55869 = gcaa*t55790*4.0;
                double t55870 = gamma_bb[index]*t55843*t55789*1.2E1;
                double t55871 = gcaa*t55843*t55791*t55792*1.2E1;
                double t55872 = gamma_bb[index]*t55844*t55791*t55794*4.0;
                double t55854 = t55870+t55871+t55872+t55869;
                double t55855 = gamma_bb[index]*gcaa*t55790*4.0;
                double t55856 = gamma_bb[index]*gcaa*t55843*t55791*t55792*4.0;
                double t55857 = t55843*t55791*t55789*6.0;
                double t55858 = t55804*t55844*t55794;
                double t55859 = t55855+t55856+t55857+t55858+1.0;
                double t55862 = gcaa*t55790*2.0;
                double t55863 = gamma_bb[index]*t55843*t55789*2.0;
                double t55860 = t55862+t55863;
                double t55861 = 1.0/(t55853*t55853);
                double t55864 = 1.0/(t55849*t55849);
                double t55865 = gcaa*t55790*3.0;
                double t55866 = gamma_bb[index]*t55843*t55789*6.0;
                double t55867 = gcaa*t55843*t55791*t55792*3.0;
                double t55868 = t55865+t55866+t55867;
                double t55873 = 1.0/(t55859*t55859);
                v_gamma_bb_gamma_bb_[index] = -c0*pow(rho_b[index],4.0/3.0)*(cx1*1.0/(t55796*t55796)*t55788*t55789* \
                   2.0-(cx2*t55788*t55789*2.0)/t55799+cx2*t55815*t55791*t55793*t55794*2.0-(cx4*t55791*t55793*t55794*1.2E1) \
                   /t55810+cx4*t55804*t55824*t55793*t55794*(t55788*t55789*1.2E1+t55791*t55793*t55794*1.2E1+gamma_bb[index]* \
                   gx*t55792*t55788*2.4E1)-cx1*gamma_bb[index]*gx*t55792*1.0/(t55796*t55796*t55796)*t55788*2.0-(cx3*gamma_bb[index]* \
                   gx*t55792*t55788*6.0)/t55803-cx2*(t55811*t55811)*t55791*t55788*t55789*1.0/(t55799*t55799*t55799)*2.0- \
                   cx4*1.0/(t55810*t55810*t55810)*t55804*(t55805*t55805)*t55793*t55794*2.0+cx2*gamma_bb[index]*t55811* \
                   t55815*t55788*t55789*4.0+cx4*gamma_bb[index]*t55805*t55824*t55791*t55793*t55794*8.0+cx3*gx*t55812* \
                   t55791*t55792*t55819*t55788*6.0+cx3*gamma_bb[index]*gx*t55812*t55791*t55792*t55788*(t55788*t55789* \
                   6.0+gamma_bb[index]*gx*t55792*t55788*6.0)-cx3*gamma_bb[index]*gx*1.0/(t55803*t55803*t55803)*t55791* \
                   t55792*(t55819*t55819)*t55788*2.0)+rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t55827+b3f*t55828+b2f*c*t55825+b4f*t55830*t55829))+1.0)*(a1f*c*t55825+1.0)*2.0-c0p*t55840*t55842* \
                   2.0))/(two_13*2.0-2.0)+c0p*t55840*t55842*2.0)*(ccaa1*t55843*1.0/(t55846*t55846)*t55789*2.0-(ccaa2* \
                   t55843*t55789*2.0)/t55849+ccaa2*t55844*t55791*t55864*t55794*2.0-(ccaa4*t55844*t55791*t55794*1.2E1) \
                   /t55859+ccaa4*t55804*t55844*t55873*t55794*(t55843*t55789*1.2E1+t55844*t55791*t55794*1.2E1+gamma_bb[index]* \
                   gcaa*t55843*t55792*2.4E1)-(ccaa3*gamma_bb[index]*gcaa*t55843*t55792*6.0)/t55853-ccaa1*gamma_bb[index]* \
                   gcaa*t55843*t55792*1.0/(t55846*t55846*t55846)*2.0-ccaa4*t55804*t55844*(t55854*t55854)*t55794*1.0/(t55859* \
                   t55859*t55859)*2.0-ccaa2*(t55860*t55860)*t55843*t55791*1.0/(t55849*t55849*t55849)*t55789*2.0+ccaa2* \
                   gamma_bb[index]*t55860*t55843*t55864*t55789*4.0+ccaa4*gamma_bb[index]*t55844*t55791*t55854*t55873* \
                   t55794*8.0+ccaa3*gcaa*t55843*t55861*t55791*t55792*t55868*6.0+ccaa3*gamma_bb[index]*gcaa*t55843*t55861* \
                   t55791*t55792*(t55843*t55789*6.0+gamma_bb[index]*gcaa*t55843*t55792*6.0)-ccaa3*gamma_bb[index]*gcaa* \
                   t55843*1.0/(t55853*t55853*t55853)*t55791*t55792*(t55868*t55868)*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

