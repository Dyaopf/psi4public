/**********************************************************
* B97_2_functional.cc: definitions for B97_2_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "B97_2_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_2_Functional::B97_2_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "B97_2";
    description_ = "B97-2 Power Series GGA";
    citation_ = "P.J. Wilson et. al., J. Chem. Phys., 115(20), 9233-9242, 2001";

    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 9.9984899999999999E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 1.4062600000000001E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -7.4405999999999999E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 5.8580800000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -6.9168200000000002E-01;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 3.9479599999999998E-01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 8.2764199999999999E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 4.7840000000000001E-02;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.7612500000000000E+00;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_2_Functional::~B97_2_Functional()
{
}
void B97_2_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t40717 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40718 = c*t40717;
            double t40719 = sqrt(t40718);
            double t40720 = pow(t40718,3.0/2.0);
            double t40721 = c*c;
            double t40722 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40723 = 1.0/c0p;
            double t40724 = b1p*t40719;
            double t40725 = b3p*t40720;
            double t40726 = b4p*t40721*t40722;
            double t40727 = b2p*c*t40717;
            double t40728 = t40724+t40725+t40726+t40727;
            double t40729 = 1.0/t40728;
            double t40730 = t40723*t40729*(1.0/2.0);
            double t40731 = t40730+1.0;
            double t40732 = log(t40731);
            double t40733 = a1p*c*t40717;
            double t40734 = t40733+1.0;
            double t40735 = rho_a[index]*2.0;
            double t40736 = 1.0/pow(t40735,1.0/3.0);
            double t40737 = c*t40736;
            double t40738 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40739 = gamma_aa[index]*gamma_aa[index];
            double t40740 = gcab*gcab;
            double t40741 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40742 = gx*gx;
            double t40743 = pow(2.0,1.0/3.0);
            double t40744 = t40743*2.0;
            double t40745 = t40744-2.0;
            double t40746 = two_13*2.0;
            double t40747 = t40746-2.0;
            double t40748 = 1.0/t40747;
            double t40749 = 1.0/c0f;
            double t40750 = b1f*t40719;
            double t40751 = b3f*t40720;
            double t40752 = b4f*t40721*t40722;
            double t40753 = b2f*c*t40717;
            double t40754 = t40750+t40751+t40752+t40753;
            double t40755 = 1.0/t40754;
            double t40756 = t40755*t40749*(1.0/2.0);
            double t40757 = t40756+1.0;
            double t40758 = log(t40757);
            double t40759 = a1f*c*t40717;
            double t40760 = t40759+1.0;
            double t40761 = c0f*t40760*t40758*2.0;
            double t40762 = c0p*t40732*t40734*2.0;
            double t40763 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t40762+t40745*t40748*(t40761-c0p*t40732*t40734*2.0))*2.0-c0p* \
               rho_a[index]*log((t40723*(1.0/2.0))/(b1p*sqrt(t40737)+b3p*pow(t40737,3.0/2.0)+b4p*t40721*1.0/pow(t40735,2.0/ \
               3.0)+b2p*c*t40736)+1.0)*(a1p*c*t40736+1.0)*4.0)*(ccab0+(ccab2*t40740*t40741*t40739)/(gamma_aa[index]* \
               gcab*t40738*2.0+t40740*t40741*t40739+1.0)+(ccab1*gamma_aa[index]*gcab*t40738)/(gamma_aa[index]*gcab* \
               t40738+1.0))-rho_a[index]*(t40762+t40745*t40748*(t40761-t40762))*(ccaa0+(ccaa2*t40741*t40763*t40739) \
               /(gamma_aa[index]*gcaa*t40738*2.0+t40741*t40763*t40739+1.0)+(ccaa1*gamma_aa[index]*gcaa*t40738)/(gamma_aa[index]* \
               gcaa*t40738+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t40741*t40742*t40739)/(gamma_aa[index]* \
               gx*t40738*2.0+t40741*t40742*t40739+1.0)+(cx1*gamma_aa[index]*gx*t40738)/(gamma_aa[index]*gx*t40738+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t40765 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40766 = c*t40765;
            double t40767 = sqrt(t40766);
            double t40768 = pow(t40766,3.0/2.0);
            double t40769 = c*c;
            double t40770 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40771 = 1.0/c0p;
            double t40772 = b1p*t40767;
            double t40773 = b3p*t40768;
            double t40774 = b4p*t40770*t40769;
            double t40775 = b2p*c*t40765;
            double t40776 = t40772+t40773+t40774+t40775;
            double t40777 = 1.0/t40776;
            double t40778 = t40771*t40777*(1.0/2.0);
            double t40779 = t40778+1.0;
            double t40780 = log(t40779);
            double t40781 = a1p*c*t40765;
            double t40782 = t40781+1.0;
            double t40783 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40784 = gamma_aa[index]*gamma_aa[index];
            double t40785 = gcaa*gcaa;
            double t40786 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40787 = pow(2.0,1.0/3.0);
            double t40788 = t40787*2.0;
            double t40789 = t40788-2.0;
            double t40790 = two_13*2.0;
            double t40791 = t40790-2.0;
            double t40792 = 1.0/t40791;
            double t40793 = 1.0/c0f;
            double t40794 = b1f*t40767;
            double t40795 = b3f*t40768;
            double t40796 = b4f*t40770*t40769;
            double t40797 = b2f*c*t40765;
            double t40798 = t40794+t40795+t40796+t40797;
            double t40799 = 1.0/t40798;
            double t40800 = t40793*t40799*(1.0/2.0);
            double t40801 = t40800+1.0;
            double t40802 = log(t40801);
            double t40803 = a1f*c*t40765;
            double t40804 = t40803+1.0;
            double t40805 = c0f*t40802*t40804*2.0;
            double t40806 = c0p*t40780*t40782*2.0;
            double t40807 = rho_a[index]*2.0;
            double t40808 = 1.0/pow(t40807,1.0/3.0);
            double t40809 = c*t40808;
            double t40810 = gcab*gcab;
            double t40811 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t40812 = gamma_aa[index]*gcab*t40783;
            double t40813 = t40812+1.0;
            double t40814 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t40815 = gamma_aa[index]*gcab*t40783*2.0;
            double t40816 = t40810*t40784*t40786;
            double t40817 = t40815+t40816+1.0;
            double t40818 = 1.0/t40813;
            double t40819 = 1.0/t40817;
            double t40820 = sqrt(t40809);
            double t40821 = b1p*t40820;
            double t40822 = pow(t40809,3.0/2.0);
            double t40823 = b3p*t40822;
            double t40824 = b2p*c*t40808;
            double t40825 = 1.0/pow(t40807,2.0/3.0);
            double t40826 = b4p*t40825*t40769;
            double t40827 = t40821+t40823+t40824+t40826;
            double t40828 = 1.0/t40827;
            double t40829 = t40771*t40828*(1.0/2.0);
            double t40830 = t40829+1.0;
            double t40831 = a1p*c*t40808;
            double t40832 = t40831+1.0;
            double t40833 = 1.0/pow(t40807,4.0/3.0);
            double t40834 = log(t40830);
            double t40835 = 1.0/pow(rho_a[index],4.0/3.0);
            double t40836 = 1.0/pow(rho_a[index],5.0/3.0);
            double t40837 = 1.0/sqrt(t40766);
            double t40838 = 1.0/t40779;
            double t40839 = 1.0/(t40776*t40776);
            double t40840 = b4p*t40836*t40769*(2.0/3.0);
            double t40841 = b2p*c*t40835*(1.0/3.0);
            double t40842 = b1p*c*t40835*t40837*(1.0/6.0);
            double t40843 = b3p*c*t40835*t40767*(1.0/2.0);
            double t40844 = t40840+t40841+t40842+t40843;
            double t40845 = t40844*t40782*t40838*t40839;
            double t40846 = t40805-t40806;
            double t40847 = t40792*t40846*t40789;
            double t40848 = gx*gx;
            double t40849 = gamma_aa[index]*gx*t40783;
            double t40850 = t40849+1.0;
            double t40851 = 1.0/t40850;
            double t40852 = gamma_aa[index]*gx*t40783*2.0;
            double t40853 = t40784*t40848*t40786;
            double t40854 = t40852+t40853+1.0;
            double t40855 = 1.0/t40854;
            double t40856 = 1.0/t40801;
            double t40857 = 1.0/(t40798*t40798);
            double t40858 = b4f*t40836*t40769*(2.0/3.0);
            double t40859 = b2f*c*t40835*(1.0/3.0);
            double t40860 = b1f*c*t40835*t40837*(1.0/6.0);
            double t40861 = b3f*c*t40835*t40767*(1.0/2.0);
            double t40862 = t40860+t40861+t40858+t40859;
            double t40863 = a1f*c*c0f*t40802*t40835*(2.0/3.0);
            double t40864 = a1p*c*c0p*t40780*t40835*(2.0/3.0);
            double t40865 = gamma_aa[index]*gcaa*t40783;
            double t40866 = t40865+1.0;
            double t40867 = 1.0/t40866;
            double t40868 = ccaa1*gamma_aa[index]*gcaa*t40783*t40867;
            double t40869 = gamma_aa[index]*gcaa*t40783*2.0;
            double t40870 = t40784*t40785*t40786;
            double t40871 = t40870+t40869+1.0;
            double t40872 = 1.0/t40871;
            double t40873 = ccaa2*t40872*t40784*t40785*t40786;
            double t40874 = ccaa0+t40873+t40868;
            double t40875 = t40806+t40847;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t40818*t40783+ccab2*t40810*t40819*t40784*t40786) \
               *(-t40806-t40847+rho_a[index]*((t40832*1.0/(t40827*t40827)*(b4p*1.0/pow(t40807,5.0/3.0)*t40769*(2.0/ \
               3.0)+b2p*c*t40833*(1.0/3.0)+b3p*c*t40820*t40833*(1.0/2.0)+b1p*c*t40833*1.0/sqrt(t40809)*(1.0/6.0)) \
               )/t40830-a1p*c*c0p*t40833*t40834*(2.0/3.0))*2.0+rho_a[index]*(-t40845+t40864+t40792*t40789*(t40845+ \
               t40863-t40804*t40862*t40856*t40857-a1p*c*c0p*t40780*t40835*(2.0/3.0)))+c0p*t40832*t40834*2.0)-(rho_a[index]* \
               t40875*2.0-c0p*rho_a[index]*t40832*t40834*4.0)*(ccab1*gamma_aa[index]*gcab*t40814*t40818*(4.0/3.0) \
               +ccab2*t40810*t40811*t40819*t40784*(8.0/3.0)-ccab1*t40810*t40811*1.0/(t40813*t40813)*t40784*(4.0/3.0) \
               -ccab2*t40810*1.0/(t40817*t40817)*t40784*t40786*(gamma_aa[index]*gcab*t40814*(8.0/3.0)+t40810*t40811* \
               t40784*(8.0/3.0)))-t40874*(t40806+t40792*t40789*(t40805-c0p*t40780*t40782*2.0))+rho_a[index]*t40875* \
               (ccaa1*gamma_aa[index]*gcaa*t40814*t40867*(8.0/3.0)+ccaa2*t40811*t40872*t40784*t40785*(1.6E1/3.0)- \
               ccaa1*t40811*t40784*t40785*1.0/(t40866*t40866)*(8.0/3.0)-ccaa2*1.0/(t40871*t40871)*t40784*t40785*t40786* \
               (gamma_aa[index]*gcaa*t40814*(1.6E1/3.0)+t40811*t40784*t40785*(1.6E1/3.0)))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t40851*t40783+cx2*t40855*t40784*t40848*t40786)*(4.0/3.0)+rho_a[index]* \
               t40874*(-t40845+t40864+t40792*t40789*(t40845+t40863-t40864-t40804*t40862*t40856*t40857))-c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t40814*t40851*(8.0/3.0)+cx2*t40811*t40855*t40784*t40848*(1.6E1/3.0)-cx1* \
               t40811*1.0/(t40850*t40850)*t40784*t40848*(8.0/3.0)-cx2*1.0/(t40854*t40854)*t40784*t40848*t40786*(gamma_aa[index]* \
               gx*t40814*(1.6E1/3.0)+t40811*t40784*t40848*(1.6E1/3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t40877 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40878 = c*t40877;
                double t40879 = sqrt(t40878);
                double t40880 = pow(t40878,3.0/2.0);
                double t40881 = c*c;
                double t40882 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40883 = 1.0/c0p;
                double t40884 = b1p*t40879;
                double t40885 = b3p*t40880;
                double t40886 = b4p*t40881*t40882;
                double t40887 = b2p*c*t40877;
                double t40888 = t40884+t40885+t40886+t40887;
                double t40889 = 1.0/t40888;
                double t40890 = t40883*t40889*(1.0/2.0);
                double t40891 = t40890+1.0;
                double t40892 = log(t40891);
                double t40893 = a1p*c*t40877;
                double t40894 = t40893+1.0;
                double t40895 = rho_a[index]*2.0;
                double t40896 = 1.0/pow(t40895,1.0/3.0);
                double t40897 = c*t40896;
                double t40898 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40899 = gcab*gcab;
                double t40900 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40901 = gamma_aa[index]*gcab*t40898;
                double t40902 = t40901+1.0;
                double t40903 = gamma_aa[index]*gamma_aa[index];
                double t40904 = gamma_aa[index]*gcab*t40898*2.0;
                double t40905 = t40900*t40903*t40899;
                double t40906 = t40904+t40905+1.0;
                double t40907 = gx*gx;
                double t40908 = gamma_aa[index]*gx*t40898;
                double t40909 = t40908+1.0;
                double t40910 = gamma_aa[index]*gx*t40898*2.0;
                double t40911 = t40900*t40903*t40907;
                double t40912 = t40910+t40911+1.0;
                double t40913 = pow(2.0,1.0/3.0);
                double t40914 = t40913*2.0;
                double t40915 = t40914-2.0;
                double t40916 = two_13*2.0;
                double t40917 = t40916-2.0;
                double t40918 = 1.0/t40917;
                double t40919 = 1.0/c0f;
                double t40920 = b1f*t40879;
                double t40921 = b3f*t40880;
                double t40922 = b4f*t40881*t40882;
                double t40923 = b2f*c*t40877;
                double t40924 = t40920+t40921+t40922+t40923;
                double t40925 = 1.0/t40924;
                double t40926 = t40925*t40919*(1.0/2.0);
                double t40927 = t40926+1.0;
                double t40928 = log(t40927);
                double t40929 = a1f*c*t40877;
                double t40930 = t40929+1.0;
                double t40931 = c0f*t40930*t40928*2.0;
                double t40932 = c0p*t40892*t40894*2.0;
                double t40933 = gcaa*gcaa;
                double t40934 = gamma_aa[index]*gcaa*t40898;
                double t40935 = t40934+1.0;
                double t40936 = gamma_aa[index]*gcaa*t40898*2.0;
                double t40937 = t40900*t40903*t40933;
                double t40938 = t40936+t40937+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t40932+t40915*t40918*(t40931-c0p*t40892*t40894*2.0))*2.0-c0p* \
                   rho_a[index]*log((t40883*(1.0/2.0))/(b1p*sqrt(t40897)+b3p*pow(t40897,3.0/2.0)+b4p*t40881*1.0/pow(t40895,2.0/ \
                   3.0)+b2p*c*t40896)+1.0)*(a1p*c*t40896+1.0)*4.0)*((ccab1*gcab*t40898*(1.0/2.0))/t40902-ccab1*gamma_aa[index]* \
                   t40900*1.0/(t40902*t40902)*t40899*(1.0/2.0)+(ccab2*gamma_aa[index]*t40900*t40899)/t40906-ccab2*t40900* \
                   t40903*1.0/(t40906*t40906)*t40899*(gcab*t40898+gamma_aa[index]*t40900*t40899))*2.0-rho_a[index]*(t40932+ \
                   t40915*t40918*(t40931-t40932))*((ccaa1*gcaa*t40898)/t40935-ccaa1*gamma_aa[index]*t40900*t40933*1.0/ \
                   (t40935*t40935)+(ccaa2*gamma_aa[index]*t40900*t40933*2.0)/t40938-ccaa2*t40900*t40903*t40933*1.0/(t40938* \
                   t40938)*(gcaa*t40898*2.0+gamma_aa[index]*t40900*t40933*2.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t40898)/t40909-cx1*gamma_aa[index]*t40900*t40907*1.0/(t40909*t40909)+(cx2*gamma_aa[index]*t40900* \
                   t40907*2.0)/t40912-cx2*t40900*t40903*1.0/(t40912*t40912)*t40907*(gx*t40898*2.0+gamma_aa[index]*t40900* \
                   t40907*2.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t40941 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40942 = c*t40941;
            double t40943 = sqrt(t40942);
            double t40944 = pow(t40942,3.0/2.0);
            double t40945 = c*c;
            double t40946 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40947 = 1.0/c0p;
            double t40948 = b1p*t40943;
            double t40949 = b3p*t40944;
            double t40950 = b4p*t40945*t40946;
            double t40951 = b2p*c*t40941;
            double t40952 = t40950+t40951+t40948+t40949;
            double t40953 = 1.0/t40952;
            double t40954 = t40953*t40947*(1.0/2.0);
            double t40955 = t40954+1.0;
            double t40956 = log(t40955);
            double t40957 = a1p*c*t40941;
            double t40958 = t40957+1.0;
            double t40959 = rho_a[index]*2.0;
            double t40960 = 1.0/pow(t40959,1.0/3.0);
            double t40961 = c*t40960;
            double t40962 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40963 = gamma_aa[index]*gamma_aa[index];
            double t40964 = gcab*gcab;
            double t40965 = gamma_aa[index]*gcab*t40962;
            double t40966 = t40965+1.0;
            double t40967 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t40968 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40973 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t40974 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t40975 = gamma_aa[index]*gcab*t40974*(8.0/3.0);
            double t40976 = t40963*t40964*t40973*(8.0/3.0);
            double t40969 = t40975+t40976;
            double t40970 = gamma_aa[index]*gcab*t40962*2.0;
            double t40971 = t40963*t40964*t40968;
            double t40972 = t40970+t40971+1.0;
            double t40977 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t40978 = 1.0/(t40972*t40972);
            double t40979 = 1.0/t40966;
            double t40980 = 1.0/t40972;
            double t40981 = sqrt(t40961);
            double t40982 = b1p*t40981;
            double t40983 = pow(t40961,3.0/2.0);
            double t40984 = b3p*t40983;
            double t40985 = b2p*c*t40960;
            double t40986 = 1.0/pow(t40959,2.0/3.0);
            double t40987 = b4p*t40945*t40986;
            double t40988 = t40982+t40984+t40985+t40987;
            double t40989 = 1.0/t40988;
            double t40990 = t40947*t40989*(1.0/2.0);
            double t40991 = t40990+1.0;
            double t40992 = a1p*c*t40960;
            double t40993 = t40992+1.0;
            double t40994 = 1.0/pow(t40959,8.0/3.0);
            double t40995 = 1.0/pow(t40959,7.0/3.0);
            double t40996 = 1.0/sqrt(t40961);
            double t40997 = 1.0/t40991;
            double t40998 = 1.0/pow(t40959,4.0/3.0);
            double t41001 = b2p*c*t40998*(1.0/3.0);
            double t41002 = 1.0/pow(t40959,5.0/3.0);
            double t41003 = b4p*t40945*t41002*(2.0/3.0);
            double t41004 = b1p*c*t40996*t40998*(1.0/6.0);
            double t41005 = b3p*c*t40981*t40998*(1.0/2.0);
            double t40999 = t41001+t41003+t41004+t41005;
            double t41000 = log(t40991);
            double t41006 = t40999*t40999;
            double t41007 = two_13*2.0;
            double t41008 = t41007-2.0;
            double t41009 = 1.0/t41008;
            double t41010 = 1.0/(t40988*t40988);
            double t41011 = pow(2.0,1.0/3.0);
            double t41012 = t41011*2.0;
            double t41013 = t41012-2.0;
            double t41014 = a1f*c*t40941;
            double t41015 = t41014+1.0;
            double t41016 = 1.0/c0f;
            double t41017 = b1f*t40943;
            double t41018 = b3f*t40944;
            double t41019 = b4f*t40945*t40946;
            double t41020 = b2f*c*t40941;
            double t41021 = t41020+t41017+t41018+t41019;
            double t41022 = 1.0/t41021;
            double t41023 = t41022*t41016*(1.0/2.0);
            double t41024 = t41023+1.0;
            double t41025 = 1.0/pow(rho_a[index],4.0/3.0);
            double t41027 = 1.0/pow(rho_a[index],5.0/3.0);
            double t41028 = 1.0/sqrt(t40942);
            double t41034 = b4f*t40945*t41027*(2.0/3.0);
            double t41035 = b2f*c*t41025*(1.0/3.0);
            double t41036 = b1f*c*t41025*t41028*(1.0/6.0);
            double t41037 = b3f*c*t40943*t41025*(1.0/2.0);
            double t41026 = t41034+t41035+t41036+t41037;
            double t41039 = b4p*t40945*t41027*(2.0/3.0);
            double t41040 = b2p*c*t41025*(1.0/3.0);
            double t41041 = b1p*c*t41025*t41028*(1.0/6.0);
            double t41042 = b3p*c*t40943*t41025*(1.0/2.0);
            double t41029 = t41040+t41041+t41042+t41039;
            double t41030 = 1.0/t41024;
            double t41031 = 1.0/pow(rho_a[index],7.0/3.0);
            double t41032 = 1.0/t40955;
            double t41033 = 1.0/pow(t40942,3.0/2.0);
            double t41038 = t41026*t41026;
            double t41043 = t41029*t41029;
            double t41044 = log(t41024);
            double t41045 = 1.0/(t41021*t41021);
            double t41046 = 1.0/(t40952*t40952);
            double t41047 = 1.0/(t40952*t40952*t40952);
            double t41048 = t40958*t41032*t41043*t41047*2.0;
            double t41049 = b4p*t40962*t40945*(1.0E1/9.0);
            double t41050 = b2p*c*t41031*(4.0/9.0);
            double t41051 = b3p*t40962*t40945*t41028*(1.0/1.2E1);
            double t41052 = b1p*c*t41031*t41028*(2.0/9.0);
            double t41053 = b3p*c*t40943*t41031*(2.0/3.0);
            double t41139 = b1p*t40962*t40945*t41033*(1.0/3.6E1);
            double t41054 = t41050+t41051+t41052+t41053+t41049-t41139;
            double t41055 = 1.0/(t40955*t40955);
            double t41056 = 1.0/(t40952*t40952*t40952*t40952);
            double t41057 = a1p*c*c0p*t40956*t41031*(8.0/9.0);
            double t41058 = c0f*t41015*t41044*2.0;
            double t41059 = c0p*t40956*t40958*2.0;
            double t41060 = gcaa*gcaa;
            double t41061 = gamma_aa[index]*gcaa*t40962;
            double t41062 = t41061+1.0;
            double t41063 = gamma_aa[index]*gcaa*t40962*2.0;
            double t41064 = t40963*t40968*t41060;
            double t41065 = t41063+t41064+1.0;
            double t41066 = ccab1*gamma_aa[index]*gcab*t40962*t40979;
            double t41067 = ccab2*t40980*t40963*t40964*t40968;
            double t41068 = ccab0+t41066+t41067;
            double t41069 = b2p*c*t40995*(4.0/9.0);
            double t41070 = b4p*t40945*t40994*(1.0E1/9.0);
            double t41071 = 1.0/pow(t40961,3.0/2.0);
            double t41072 = b3p*t40945*t40994*t40996*(1.0/1.2E1);
            double t41073 = b1p*c*t40995*t40996*(2.0/9.0);
            double t41074 = b3p*c*t40981*t40995*(2.0/3.0);
            double t41075 = t41070+t41072+t41073+t41074+t41069-b1p*t40945*t40994*t41071*(1.0/3.6E1);
            double t41076 = t40993*t40997*t41010*t41075;
            double t41077 = 1.0/(t40988*t40988*t40988);
            double t41078 = 1.0/(t40991*t40991);
            double t41079 = 1.0/(t40988*t40988*t40988*t40988);
            double t41080 = t40947*t40993*t41006*t41078*t41079*(1.0/2.0);
            double t41081 = 1.0/d2fz0;
            double t41082 = 1.0/(rho_a[index]*rho_a[index]);
            double t41083 = 1.0/Aa;
            double t41084 = b1a*t40981;
            double t41085 = b3a*t40983;
            double t41086 = b2a*c*t40960;
            double t41087 = b4a*t40945*t40986;
            double t41088 = t41084+t41085+t41086+t41087;
            double t41089 = 1.0/t41088;
            double t41090 = t41083*t41089*(1.0/2.0);
            double t41091 = t41090+1.0;
            double t41092 = log(t41091);
            double t41093 = a1a*c*t40960;
            double t41094 = t41093+1.0;
            double t41095 = Aa*t41009*t41081*t41082*t41092*t41094*(4.0/9.0);
            double t41096 = a1p*c*t40997*t40998*t40999*t41010*(2.0/3.0);
            double t41097 = t40993*t40997*t40999*t41010*2.0;
            double t41098 = t41058-t41059;
            double t41099 = t41013*t41009*t41098;
            double t41100 = t41059+t41099;
            double t41101 = 1.0/pow(rho_a[index],1.0E1);
            double t41102 = 1.0/(t40966*t40966*t40966);
            double t41103 = ccab1*gamma_aa[index]*gcab*t40963*t40964*t41101*t41102*(3.2E1/9.0);
            double t41104 = 1.0/(t40966*t40966);
            double t41105 = t40969*t40969;
            double t41106 = 1.0/(t40972*t40972*t40972);
            double t41107 = ccab2*t40963*t40964*t40968*t41105*t41106*2.0;
            double t41108 = t40958*t41032*t41046*t41029;
            double t41109 = a1f*c*c0f*t41025*t41044*(2.0/3.0);
            double t41111 = a1p*c*c0p*t40956*t41025*(2.0/3.0);
            double t41114 = t41030*t41015*t41026*t41045;
            double t41110 = -t41111-t41114+t41108+t41109;
            double t41112 = 1.0/t41062;
            double t41113 = 1.0/t41065;
            double t41115 = gx*gx;
            double t41116 = gamma_aa[index]*gx*t40962;
            double t41117 = t41116+1.0;
            double t41122 = gamma_aa[index]*gx*t40974*(1.6E1/3.0);
            double t41123 = t40963*t40973*t41115*(1.6E1/3.0);
            double t41118 = t41122+t41123;
            double t41119 = gamma_aa[index]*gx*t40962*2.0;
            double t41120 = t40963*t40968*t41115;
            double t41121 = t41120+t41119+1.0;
            double t41124 = 1.0/(t41121*t41121);
            double t41125 = 1.0/t41117;
            double t41126 = 1.0/t41121;
            double t41127 = 1.0/(t41117*t41117);
            double t41128 = ccaa1*gamma_aa[index]*gcaa*t40962*t41112;
            double t41129 = ccaa2*t40963*t40968*t41113*t41060;
            double t41130 = ccaa0+t41128+t41129;
            double t41131 = 1.0/(t41021*t41021*t41021);
            double t41132 = b4f*t40962*t40945*(1.0E1/9.0);
            double t41133 = b2f*c*t41031*(4.0/9.0);
            double t41134 = b3f*t40962*t40945*t41028*(1.0/1.2E1);
            double t41135 = b1f*c*t41031*t41028*(2.0/9.0);
            double t41136 = b3f*c*t40943*t41031*(2.0/3.0);
            double t41137 = t41132+t41133+t41134+t41135+t41136-b1f*t40962*t40945*t41033*(1.0/3.6E1);
            double t41138 = t41030*t41015*t41045*t41137;
            double t41140 = t40958*t41032*t41054*t41046;
            double t41141 = 1.0/(t41024*t41024);
            double t41142 = 1.0/(t41021*t41021*t41021*t41021);
            double t41143 = t41015*t41141*t41016*t41142*t41038*(1.0/2.0);
            double t41144 = t40947*t40958*t41043*t41055*t41056*(1.0/2.0);
            double t41145 = a1f*c*t41030*t41025*t41026*t41045*(2.0/3.0);
            double t41146 = a1p*c*t41032*t41025*t41046*t41029*(2.0/3.0);
            double t41147 = 1.0/(t41062*t41062);
            double t41148 = gamma_aa[index]*gcaa*t40974*(1.6E1/3.0);
            double t41149 = t40963*t40973*t41060*(1.6E1/3.0);
            double t41150 = t41148+t41149;
            double t41151 = 1.0/(t41065*t41065);
            double t41152 = t41111+t41114-t41108-t41109;
            double t41153 = t41013*t41152*t41009;
            double t41154 = -t41111+t41108+t41153;
            double t41155 = ccaa1*gamma_aa[index]*gcaa*t40974*t41112*(8.0/3.0);
            double t41156 = ccaa2*t40963*t40973*t41113*t41060*(1.6E1/3.0);
            double t41157 = t41155+t41156-ccaa1*t40963*t40973*t41060*t41147*(8.0/3.0)-ccaa2*t40963*t40968*t41060* \
               t41150*t41151;
            v_rho_a_rho_a_[index] = t41130*(t41111-t41108+t41110*t41013*t41009)*2.0+t41100*t41157*2.0+(rho_a[index]* \
               t41100*2.0-c0p*rho_a[index]*t40993*t41000*4.0)*(t41103+t41107+ccab2*t40980*t40963*t40964*t40967*(3.2E1/ \
               9.0)-ccab1*t40963*t40964*t40967*t41104*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t40963*t40963) \
               *(t40964*t40964)*t40978*(3.2E1/9.0)-ccab2*t40963*t40964*t40973*t40969*t40978*(1.6E1/3.0))-(ccab1*gamma_aa[index]* \
               gcab*t40974*t40979*(4.0/3.0)+ccab2*t40980*t40963*t40964*t40973*(8.0/3.0)-ccab1*t40963*t40964*t40973* \
               t41104*(4.0/3.0)-ccab2*t40963*t40964*t40968*t40969*t40978)*(t41059+t41099+rho_a[index]*t41154-rho_a[index]* \
               (t40993*t40997*t40999*t41010-a1p*c*c0p*t40998*t41000*(2.0/3.0))*2.0-c0p*t40993*t41000*2.0)*4.0+t41068* \
               (-t41097+rho_a[index]*(t41080+t41076-t41095+t41096-t40993*t40997*t41006*t41077*2.0-a1p*c*c0p*t40995* \
               t41000*(8.0/9.0))*2.0+a1p*c*c0p*t40998*t41000*(4.0/3.0))+(rho_a[index]*(t41059+t41013*t41009*(t41058- \
               c0p*t40956*t40958*2.0))*2.0-c0p*rho_a[index]*t40993*t41000*4.0)*(t41103+t41107+ccab1*gamma_aa[index]* \
               gcab*t40977*t40979*(4.4E1/9.0)+ccab2*t40980*t40963*t40964*t40967*(4.0E1/3.0)-ccab1*t40963*t40964*t40967* \
               t41104*(7.6E1/9.0)-ccab2*t40963*t40964*t40973*t40969*t40978*(1.6E1/3.0)-ccab2*t40963*t40964*t40968* \
               t40978*(gamma_aa[index]*gcab*t40977*(8.8E1/9.0)+t40963*t40964*t40967*(4.0E1/3.0)))-t41068*(t41097+ \
               rho_a[index]*(t41140+t41144+t41146-t41048-t41057+t41013*t41009*(t41143+t41145+t41048+t41057+t41138- \
               t40958*t41032*t41054*t41046-t41030*t41131*t41015*t41038*2.0-a1f*c*c0f*t41031*t41044*(8.0/9.0)-t40947* \
               t40958*t41043*t41055*t41056*(1.0/2.0)-a1p*c*t41032*t41025*t41046*t41029*(2.0/3.0)))-rho_a[index]*(t41080+ \
               t41076+t41095+t41096-t40993*t40997*t41006*t41077*2.0-a1p*c*c0p*t40995*t41000*(8.0/9.0))*2.0+t41110* \
               t41013*t41009*2.0-t40958*t41032*t41046*t41029*2.0-a1p*c*c0p*t40998*t41000*(4.0/3.0)+a1p*c*c0p*t40956* \
               t41025*(4.0/3.0))+c0*t40946*(cx0+cx1*gamma_aa[index]*gx*t40962*t41125+cx2*t40963*t40968*t41115*t41126) \
               *(4.0/9.0)-rho_a[index]*t41100*(ccaa1*gamma_aa[index]*gcaa*t40977*t41112*(8.8E1/9.0)+ccaa2*t40963* \
               t40967*t41113*t41060*(3.04E2/9.0)-ccaa1*t40963*t40967*t41060*t41147*2.4E1-ccaa2*t40963*t40973*t41060* \
               t41150*t41151*(3.2E1/3.0)-ccaa2*t40963*t40968*t41060*t41151*(gamma_aa[index]*gcaa*t40977*(1.76E2/9.0) \
               +t40963*t40967*t41060*(3.04E2/9.0))+ccaa2*t40963*t40968*t41060*(t41150*t41150)*1.0/(t41065*t41065* \
               t41065)*2.0+ccaa1*gamma_aa[index]*gcaa*t40963*t41101*t41060*1.0/(t41062*t41062*t41062)*(1.28E2/9.0) \
               )+rho_a[index]*t41130*(t41140+t41144+t41146-t41048-t41057-t41013*t41009*(t41140-t41143+t41144-t41145+ \
               t41146-t41048-t41057-t41138+t41030*t41131*t41015*t41038*2.0+a1f*c*c0f*t41031*t41044*(8.0/9.0)))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t40977*t41125*(8.8E1/9.0)-cx1*t40963*t40967*t41115* \
               t41127*2.4E1+cx2*t40963*t40967*t41115*t41126*(3.04E2/9.0)-cx2*t40963*t40973*t41115*t41124*t41118*(3.2E1/ \
               3.0)-cx2*t40963*t40968*t41115*t41124*(gamma_aa[index]*gx*t40977*(1.76E2/9.0)+t40963*t40967*t41115* \
               (3.04E2/9.0))+cx2*t40963*t40968*1.0/(t41121*t41121*t41121)*t41115*(t41118*t41118)*2.0+cx1*gamma_aa[index]* \
               gx*t40963*t41101*t41115*1.0/(t41117*t41117*t41117)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t40974*t41125*(8.0/3.0)-cx1*t40963*t40973*t41115*t41127*(8.0/3.0)+cx2*t40963*t40973* \
               t41115*t41126*(1.6E1/3.0)-cx2*t40963*t40968*t41115*t41124*t41118)*(8.0/3.0)+rho_a[index]*t41154*t41157* \
               2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t41159 = 1.0/pow(rho_a[index],8.0/3.0);
                double t41160 = gcab*gcab;
                double t41161 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t41162 = gamma_aa[index]*gcab*t41159;
                double t41163 = t41162+1.0;
                double t41164 = gamma_aa[index]*gamma_aa[index];
                double t41165 = gamma_aa[index]*gcab*t41159*2.0;
                double t41166 = t41160*t41161*t41164;
                double t41167 = t41165+t41166+1.0;
                double t41168 = rho_a[index]*2.0;
                double t41169 = 1.0/pow(t41168,1.0/3.0);
                double t41170 = c*t41169;
                double t41171 = sqrt(t41170);
                double t41172 = b1p*t41171;
                double t41173 = pow(t41170,3.0/2.0);
                double t41174 = b3p*t41173;
                double t41175 = b2p*c*t41169;
                double t41176 = c*c;
                double t41177 = 1.0/pow(t41168,2.0/3.0);
                double t41178 = b4p*t41176*t41177;
                double t41179 = t41172+t41174+t41175+t41178;
                double t41180 = 1.0/pow(t41168,4.0/3.0);
                double t41181 = 1.0/c0p;
                double t41182 = 1.0/t41179;
                double t41183 = t41181*t41182*(1.0/2.0);
                double t41184 = t41183+1.0;
                double t41185 = 1.0/pow(rho_a[index],1.0/3.0);
                double t41186 = c*t41185;
                double t41187 = sqrt(t41186);
                double t41188 = b1f*t41187;
                double t41189 = pow(t41186,3.0/2.0);
                double t41190 = b3f*t41189;
                double t41191 = 1.0/pow(rho_a[index],2.0/3.0);
                double t41192 = b4f*t41191*t41176;
                double t41193 = b2f*c*t41185;
                double t41194 = t41190+t41192+t41193+t41188;
                double t41195 = 1.0/pow(rho_a[index],4.0/3.0);
                double t41196 = b1p*t41187;
                double t41197 = b3p*t41189;
                double t41198 = b4p*t41191*t41176;
                double t41199 = b2p*c*t41185;
                double t41200 = t41196+t41197+t41198+t41199;
                double t41201 = 1.0/pow(rho_a[index],5.0/3.0);
                double t41202 = 1.0/sqrt(t41186);
                double t41203 = 1.0/c0f;
                double t41204 = 1.0/t41194;
                double t41205 = t41203*t41204*(1.0/2.0);
                double t41206 = t41205+1.0;
                double t41207 = 1.0/t41200;
                double t41208 = t41207*t41181*(1.0/2.0);
                double t41209 = t41208+1.0;
                double t41210 = a1p*c*t41185;
                double t41211 = t41210+1.0;
                double t41212 = 1.0/t41209;
                double t41213 = 1.0/(t41200*t41200);
                double t41214 = b4p*t41201*t41176*(2.0/3.0);
                double t41215 = b2p*c*t41195*(1.0/3.0);
                double t41216 = b1p*c*t41202*t41195*(1.0/6.0);
                double t41217 = b3p*c*t41195*t41187*(1.0/2.0);
                double t41218 = t41214+t41215+t41216+t41217;
                double t41219 = t41211*t41212*t41213*t41218;
                double t41220 = log(t41209);
                double t41221 = log(t41184);
                double t41222 = a1p*c*t41169;
                double t41223 = t41222+1.0;
                double t41224 = pow(2.0,1.0/3.0);
                double t41225 = t41224*2.0;
                double t41226 = t41225-2.0;
                double t41227 = two_13*2.0;
                double t41228 = t41227-2.0;
                double t41229 = 1.0/t41228;
                double t41230 = log(t41206);
                double t41231 = a1f*c*t41185;
                double t41232 = t41231+1.0;
                double t41233 = c0f*t41230*t41232*2.0;
                double t41235 = c0p*t41211*t41220*2.0;
                double t41234 = t41233-t41235;
                double t41236 = gcaa*gcaa;
                double t41237 = gamma_aa[index]*gcaa*t41159;
                double t41238 = t41237+1.0;
                double t41239 = gamma_aa[index]*gcaa*t41159*2.0;
                double t41240 = t41161*t41164*t41236;
                double t41241 = t41240+t41239+1.0;
                double t41242 = t41234*t41226*t41229;
                double t41243 = t41242+t41235;
                double t41244 = 1.0/t41167;
                double t41245 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t41246 = 1.0/(t41163*t41163);
                double t41247 = 1.0/(t41167*t41167);
                double t41248 = gcab*t41159;
                double t41249 = gamma_aa[index]*t41160*t41161;
                double t41250 = t41248+t41249;
                double t41251 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t41252 = gamma_aa[index]*gcab*t41251*(8.0/3.0);
                double t41253 = t41160*t41164*t41245*(8.0/3.0);
                double t41254 = t41252+t41253;
                double t41255 = rho_a[index]*t41243*2.0;
                double t41256 = t41255-c0p*rho_a[index]*t41221*t41223*4.0;
                double t41257 = 1.0/t41163;
                double t41258 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t41259 = 1.0/(t41163*t41163*t41163);
                double t41260 = ccab2*gamma_aa[index]*t41160*t41161*t41254*t41247;
                double t41261 = ccab2*t41160*t41250*t41164*t41245*t41247*(8.0/3.0);
                double t41262 = 1.0/(t41167*t41167*t41167);
                double t41263 = 1.0/t41238;
                double t41264 = 1.0/t41241;
                double t41265 = 1.0/(t41238*t41238);
                double t41266 = 1.0/(t41241*t41241);
                double t41267 = gcaa*t41159*2.0;
                double t41268 = gamma_aa[index]*t41161*t41236*2.0;
                double t41269 = t41267+t41268;
                double t41270 = gamma_aa[index]*gcaa*t41251*(1.6E1/3.0);
                double t41271 = t41164*t41236*t41245*(1.6E1/3.0);
                double t41272 = t41270+t41271;
                double t41273 = gx*gx;
                double t41274 = gamma_aa[index]*gx*t41159;
                double t41275 = t41274+1.0;
                double t41276 = gamma_aa[index]*gx*t41159*2.0;
                double t41277 = t41161*t41164*t41273;
                double t41278 = t41276+t41277+1.0;
                double t41279 = 1.0/t41206;
                double t41280 = 1.0/(t41194*t41194);
                double t41281 = b4f*t41201*t41176*(2.0/3.0);
                double t41282 = b2f*c*t41195*(1.0/3.0);
                double t41283 = b1f*c*t41202*t41195*(1.0/6.0);
                double t41284 = b3f*c*t41195*t41187*(1.0/2.0);
                double t41285 = t41281+t41282+t41283+t41284;
                double t41286 = a1f*c*c0f*t41230*t41195*(2.0/3.0);
                double t41287 = a1p*c*c0p*t41220*t41195*(2.0/3.0);
                double t41288 = ccaa1*gcaa*t41263*t41159;
                double t41289 = ccaa2*gamma_aa[index]*t41161*t41236*t41264*2.0;
                double t41290 = t41288+t41289-ccaa1*gamma_aa[index]*t41161*t41236*t41265-ccaa2*t41161*t41164*t41236* \
                   t41266*t41269;
                double t41291 = 1.0/t41275;
                double t41292 = 1.0/t41278;
                double t41293 = 1.0/(t41275*t41275);
                double t41294 = 1.0/(t41278*t41278);
                double t41295 = gx*t41159*2.0;
                double t41296 = gamma_aa[index]*t41161*t41273*2.0;
                double t41297 = t41295+t41296;
                double t41298 = gamma_aa[index]*gx*t41251*(1.6E1/3.0);
                double t41299 = t41164*t41245*t41273*(1.6E1/3.0);
                double t41300 = t41298+t41299;
                v_rho_a_gamma_aa_[index] = -t41243*t41290+t41256*(t41260+t41261-ccab2*gamma_aa[index]*t41160*t41244* \
                   t41245*(4.0/3.0)+ccab1*gamma_aa[index]*t41160*t41245*t41246*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*(t41160*t41160)*t41164*t41247*(4.0/3.0)-ccab1*gcab*t41160*t41164*t41258*t41259*(4.0/3.0)-ccab2* \
                   t41160*t41250*t41161*t41262*t41164*t41254*2.0)+t41256*(t41260+t41261-ccab1*gcab*t41251*t41257*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t41160*t41244*t41245*4.0+ccab1*gamma_aa[index]*t41160*t41245*t41246*(8.0/ \
                   3.0)+ccab2*t41160*t41161*t41164*t41247*(gcab*t41251*(8.0/3.0)+gamma_aa[index]*t41160*t41245*4.0)-ccab1* \
                   gcab*t41160*t41164*t41258*t41259*(4.0/3.0)-ccab2*t41160*t41250*t41161*t41262*t41164*t41254*2.0)-(ccab1* \
                   gcab*t41257*t41159*(1.0/2.0)+ccab2*gamma_aa[index]*t41160*t41161*t41244-ccab1*gamma_aa[index]*t41160* \
                   t41161*t41246*(1.0/2.0)-ccab2*t41160*t41250*t41161*t41164*t41247)*(rho_a[index]*((t41223*1.0/(t41179* \
                   t41179)*(b4p*t41176*1.0/pow(t41168,5.0/3.0)*(2.0/3.0)+b2p*c*t41180*(1.0/3.0)+b3p*c*t41171*t41180*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t41170)*t41180*(1.0/6.0)))/t41184-a1p*c*c0p*t41221*t41180*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t41219+t41287+t41226*t41229*(t41219+t41286-t41232*t41280*t41285*t41279-a1p*c*c0p*t41220*t41195*(2.0/ \
                   3.0)))-c0p*t41211*t41220*2.0+c0p*t41221*t41223*2.0-t41234*t41226*t41229)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t41291*t41159-cx1*gamma_aa[index]*t41161*t41273*t41293+cx2*gamma_aa[index]*t41161*t41273* \
                   t41292*2.0-cx2*t41161*t41164*t41273*t41294*t41297)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t41251*t41291*(8.0/3.0)-cx1*gamma_aa[index]*t41245*t41273*t41293*8.0+cx2*gamma_aa[index]*t41245*t41273* \
                   t41292*(3.2E1/3.0)-cx2*t41164*t41245*t41273*t41294*t41297*(1.6E1/3.0)+cx1*gx*t41164*t41273*1.0/(t41275* \
                   t41275*t41275)*t41258*(1.6E1/3.0)-cx2*t41161*t41164*t41273*t41294*(gx*t41251*(1.6E1/3.0)+gamma_aa[index]* \
                   t41245*t41273*(3.2E1/3.0))-cx2*gamma_aa[index]*t41300*t41161*t41273*t41294*2.0+cx2*t41300*t41161*t41164* \
                   t41273*1.0/(t41278*t41278*t41278)*t41297*2.0)+rho_a[index]*t41290*(-t41219+t41287+t41226*t41229*(t41219+ \
                   t41286-t41287-t41232*t41280*t41285*t41279))+rho_a[index]*t41243*(ccaa1*gcaa*t41251*t41263*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t41236*t41245*t41265*8.0+ccaa2*gamma_aa[index]*t41236*t41245*t41264*(3.2E1/ \
                   3.0)-ccaa2*t41164*t41236*t41245*t41266*t41269*(1.6E1/3.0)+ccaa1*gcaa*t41164*t41236*1.0/(t41238*t41238* \
                   t41238)*t41258*(1.6E1/3.0)-ccaa2*t41161*t41164*t41236*t41266*(gcaa*t41251*(1.6E1/3.0)+gamma_aa[index]* \
                   t41236*t41245*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t41161*t41236*t41272*t41266*2.0+ccaa2*1.0/(t41241* \
                   t41241*t41241)*t41161*t41164*t41236*t41272*t41269*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t41302 = 1.0/pow(rho_a[index],1.0/3.0);
                double t41303 = c*t41302;
                double t41304 = sqrt(t41303);
                double t41305 = pow(t41303,3.0/2.0);
                double t41306 = c*c;
                double t41307 = 1.0/pow(rho_a[index],2.0/3.0);
                double t41308 = 1.0/c0p;
                double t41309 = b1p*t41304;
                double t41310 = b3p*t41305;
                double t41311 = b4p*t41306*t41307;
                double t41312 = b2p*c*t41302;
                double t41313 = t41310+t41311+t41312+t41309;
                double t41314 = 1.0/t41313;
                double t41315 = t41314*t41308*(1.0/2.0);
                double t41316 = t41315+1.0;
                double t41317 = log(t41316);
                double t41318 = a1p*c*t41302;
                double t41319 = t41318+1.0;
                double t41320 = rho_a[index]*2.0;
                double t41321 = 1.0/pow(t41320,1.0/3.0);
                double t41322 = c*t41321;
                double t41323 = gcab*gcab;
                double t41324 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t41325 = 1.0/pow(rho_a[index],8.0/3.0);
                double t41326 = gamma_aa[index]*gcab*t41325;
                double t41327 = t41326+1.0;
                double t41328 = gamma_aa[index]*gamma_aa[index];
                double t41329 = gamma_aa[index]*gcab*t41325*2.0;
                double t41330 = t41323*t41324*t41328;
                double t41331 = t41330+t41329+1.0;
                double t41333 = gcab*t41325;
                double t41334 = gamma_aa[index]*t41323*t41324;
                double t41332 = t41333+t41334;
                double t41335 = 1.0/(t41331*t41331);
                double t41336 = pow(2.0,1.0/3.0);
                double t41337 = t41336*2.0;
                double t41338 = t41337-2.0;
                double t41339 = two_13*2.0;
                double t41340 = t41339-2.0;
                double t41341 = 1.0/t41340;
                double t41342 = 1.0/c0f;
                double t41343 = b1f*t41304;
                double t41344 = b3f*t41305;
                double t41345 = b4f*t41306*t41307;
                double t41346 = b2f*c*t41302;
                double t41347 = t41343+t41344+t41345+t41346;
                double t41348 = 1.0/t41347;
                double t41349 = t41342*t41348*(1.0/2.0);
                double t41350 = t41349+1.0;
                double t41351 = log(t41350);
                double t41352 = a1f*c*t41302;
                double t41353 = t41352+1.0;
                double t41354 = c0f*t41351*t41353*2.0;
                double t41355 = c0p*t41317*t41319*2.0;
                double t41356 = gcaa*gcaa;
                double t41357 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t41358 = gamma_aa[index]*gcaa*t41325;
                double t41359 = t41358+1.0;
                double t41360 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t41361 = gamma_aa[index]*gcaa*t41325*2.0;
                double t41362 = t41324*t41328*t41356;
                double t41363 = t41361+t41362+1.0;
                double t41365 = gcaa*t41325*2.0;
                double t41366 = gamma_aa[index]*t41324*t41356*2.0;
                double t41364 = t41365+t41366;
                double t41367 = 1.0/(t41363*t41363);
                double t41368 = gx*gx;
                double t41369 = gamma_aa[index]*gx*t41325;
                double t41370 = t41369+1.0;
                double t41371 = gamma_aa[index]*gx*t41325*2.0;
                double t41372 = t41324*t41328*t41368;
                double t41373 = t41371+t41372+1.0;
                double t41375 = gx*t41325*2.0;
                double t41376 = gamma_aa[index]*t41324*t41368*2.0;
                double t41374 = t41375+t41376;
                double t41377 = 1.0/(t41373*t41373);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t41355+t41341*t41338*(t41354-c0p*t41317*t41319*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t41308*(1.0/2.0))/(b1p*sqrt(t41322)+b3p*pow(t41322,3.0/2.0)+b4p*1.0/pow(t41320,2.0/ \
                   3.0)*t41306+b2p*c*t41321)+1.0)*(a1p*c*t41321+1.0)*4.0)*((ccab2*t41323*t41324*(1.0/2.0))/t41331-ccab1* \
                   t41323*t41324*1.0/(t41327*t41327)*(1.0/2.0)-ccab2*(t41323*t41323)*t41360*t41335*t41328*(1.0/2.0)+ccab1* \
                   gamma_aa[index]*gcab*t41323*1.0/(t41327*t41327*t41327)*t41357*(1.0/2.0)+ccab2*1.0/(t41331*t41331*t41331) \
                   *t41323*(t41332*t41332)*t41324*t41328*2.0-ccab2*gamma_aa[index]*t41323*t41332*t41324*t41335*2.0)*4.0- \
                   rho_a[index]*(t41355+t41341*t41338*(t41354-t41355))*((ccaa2*t41324*t41356*2.0)/t41363-ccaa1*t41324* \
                   t41356*1.0/(t41359*t41359)*2.0-ccaa2*t41360*t41328*(t41356*t41356)*t41367*2.0+ccaa1*gamma_aa[index]* \
                   gcaa*t41356*t41357*1.0/(t41359*t41359*t41359)*2.0+ccaa2*t41324*1.0/(t41363*t41363*t41363)*t41328*(t41364* \
                   t41364)*t41356*2.0-ccaa2*gamma_aa[index]*t41324*t41364*t41356*t41367*4.0)*2.0-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*t41324*1.0/(t41370*t41370)*t41368*2.0-(cx2*t41324*t41368*2.0)/t41373+cx2*t41360*t41328*(t41368* \
                   t41368)*t41377*2.0-cx1*gamma_aa[index]*gx*1.0/(t41370*t41370*t41370)*t41357*t41368*2.0-cx2*t41324* \
                   t41328*1.0/(t41373*t41373*t41373)*(t41374*t41374)*t41368*2.0+cx2*gamma_aa[index]*t41324*t41374*t41368* \
                   t41377*4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void B97_2_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37153 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37154 = gamma_aa[index]*t37153*(1.0/2.0);
            double t37155 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37156 = gamma_bb[index]*t37155*(1.0/2.0);
            double t37151 = t37154+t37156;
            double t37152 = gcab*gcab;
            double t37157 = t37151*t37151;
            double t37158 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37159 = c*t37158;
            double t37160 = sqrt(t37159);
            double t37161 = pow(t37159,3.0/2.0);
            double t37162 = c*c;
            double t37163 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37164 = 1.0/c0p;
            double t37165 = b1p*t37160;
            double t37166 = b3p*t37161;
            double t37167 = b4p*t37162*t37163;
            double t37168 = b2p*c*t37158;
            double t37169 = t37165+t37166+t37167+t37168;
            double t37170 = 1.0/t37169;
            double t37171 = t37170*t37164*(1.0/2.0);
            double t37172 = t37171+1.0;
            double t37173 = log(t37172);
            double t37174 = a1p*c*t37158;
            double t37175 = t37174+1.0;
            double t37176 = pow(2.0,1.0/3.0);
            double t37177 = t37176*2.0;
            double t37178 = t37177-2.0;
            double t37179 = two_13*2.0;
            double t37180 = t37179-2.0;
            double t37181 = 1.0/t37180;
            double t37182 = 1.0/c0f;
            double t37183 = 1.0/pow(rho_b[index],1.0/3.0);
            double t37184 = c*t37183;
            double t37185 = sqrt(t37184);
            double t37186 = pow(t37184,3.0/2.0);
            double t37187 = 1.0/pow(rho_b[index],2.0/3.0);
            double t37188 = b1p*t37185;
            double t37189 = b3p*t37186;
            double t37190 = b4p*t37162*t37187;
            double t37191 = b2p*c*t37183;
            double t37192 = t37190+t37191+t37188+t37189;
            double t37193 = 1.0/t37192;
            double t37194 = t37164*t37193*(1.0/2.0);
            double t37195 = t37194+1.0;
            double t37196 = log(t37195);
            double t37197 = a1p*c*t37183;
            double t37198 = t37197+1.0;
            double t37199 = c0p*t37196*t37198*2.0;
            double t37200 = rho_a[index]+rho_b[index];
            double t37201 = 1.0/pow(t37200,1.0/3.0);
            double t37202 = c*t37201;
            double t37203 = sqrt(t37202);
            double t37204 = pow(t37202,3.0/2.0);
            double t37205 = 1.0/pow(t37200,2.0/3.0);
            double t37206 = b1p*t37203;
            double t37207 = b3p*t37204;
            double t37208 = b4p*t37205*t37162;
            double t37209 = b2p*c*t37201;
            double t37210 = t37206+t37207+t37208+t37209;
            double t37211 = 1.0/t37210;
            double t37212 = t37211*t37164*(1.0/2.0);
            double t37213 = t37212+1.0;
            double t37214 = log(t37213);
            double t37215 = a1p*c*t37201;
            double t37216 = t37215+1.0;
            double t37217 = c0p*t37214*t37216*2.0;
            double t37218 = rho_a[index]-rho_b[index];
            double t37219 = t37218*t37218;
            double t37220 = 1.0/t37200;
            double t37221 = t37220*t37218;
            double t37222 = 1.0/(t37200*t37200*t37200*t37200);
            double t37223 = t37219*t37219;
            double t37224 = t37221+1.0;
            double t37225 = pow(t37224,4.0/3.0);
            double t37226 = -t37221+1.0;
            double t37227 = pow(t37226,4.0/3.0);
            double t37228 = t37225+t37227-2.0;
            double t37229 = c0p*t37173*t37175*2.0;
            double t37230 = gamma_aa[index]*gamma_aa[index];
            double t37231 = gx*gx;
            double t37232 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t37233 = gamma_bb[index]*gamma_bb[index];
            double t37234 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t37235 = b1f*t37160;
            double t37236 = b3f*t37161;
            double t37237 = b4f*t37162*t37163;
            double t37238 = b2f*c*t37158;
            double t37239 = t37235+t37236+t37237+t37238;
            double t37240 = 1.0/t37239;
            double t37241 = t37240*t37182*(1.0/2.0);
            double t37242 = t37241+1.0;
            double t37243 = log(t37242);
            double t37244 = a1f*c*t37158;
            double t37245 = t37244+1.0;
            double t37246 = t37229-c0f*t37243*t37245*2.0;
            double t37247 = t37229-t37181*t37246*t37178;
            double t37248 = gcaa*gcaa;
            double t37249 = b1f*t37185;
            double t37250 = b3f*t37186;
            double t37251 = b4f*t37162*t37187;
            double t37252 = b2f*c*t37183;
            double t37253 = t37250+t37251+t37252+t37249;
            double t37254 = 1.0/t37253;
            double t37255 = t37182*t37254*(1.0/2.0);
            double t37256 = t37255+1.0;
            double t37257 = log(t37256);
            double t37258 = a1f*c*t37183;
            double t37259 = t37258+1.0;
            double t37260 = t37199-c0f*t37257*t37259*2.0;
            double t37261 = t37199-t37260*t37181*t37178;
            functional_[index] = (ccab0+(ccab1*gcab*t37151)/(gcab*t37151+1.0)+(ccab2*t37152*t37157)/(gcab*t37151* \
               2.0+t37152*t37157+1.0))*(rho_b[index]*t37261+rho_a[index]*t37247-t37200*(t37217-t37222*t37223*t37181* \
               t37228*(t37217-c0f*log((t37182*(1.0/2.0))/(b1f*t37203+b3f*t37204+b2f*c*t37201+b4f*t37205*t37162)+1.0) \
               *(a1f*c*t37201+1.0)*2.0)+(Aa*t37181*t37228*log((1.0/2.0)/(Aa*(b1a*t37203+b3a*t37204+b2a*c*t37201+b4a* \
               t37205*t37162))+1.0)*(t37222*t37223-1.0)*(a1a*c*t37201+1.0)*2.0)/d2fz0))-rho_a[index]*t37247*(ccaa0+ \
               (ccaa2*t37230*t37232*t37248)/(gamma_aa[index]*gcaa*t37153*2.0+t37230*t37232*t37248+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t37153)/(gamma_aa[index]*gcaa*t37153+1.0))-rho_b[index]*t37261*(ccaa0+(ccaa2*t37233*t37234*t37248) \
               /(gamma_bb[index]*gcaa*t37155*2.0+t37233*t37234*t37248+1.0)+(ccaa1*gamma_bb[index]*gcaa*t37155)/(gamma_bb[index]* \
               gcaa*t37155+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t37230*t37231*t37232)/(gamma_aa[index]*gx* \
               t37153*2.0+t37230*t37231*t37232+1.0)+(cx1*gamma_aa[index]*gx*t37153)/(gamma_aa[index]*gx*t37153+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t37231*t37233*t37234)/(gamma_bb[index]*gx*t37155*2.0+t37231* \
               t37233*t37234+1.0)+(cx1*gamma_bb[index]*gx*t37155)/(gamma_bb[index]*gx*t37155+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t40270 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40271 = gamma_aa[index]*gamma_aa[index];
            double t40272 = gx*gx;
            double t40273 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40274 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40275 = c*t40274;
            double t40276 = sqrt(t40275);
            double t40277 = pow(t40275,3.0/2.0);
            double t40278 = c*c;
            double t40279 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40280 = 1.0/c0p;
            double t40281 = b1p*t40276;
            double t40282 = b3p*t40277;
            double t40283 = b4p*t40278*t40279;
            double t40284 = b2p*c*t40274;
            double t40285 = t40281+t40282+t40283+t40284;
            double t40286 = 1.0/t40285;
            double t40287 = t40280*t40286*(1.0/2.0);
            double t40288 = t40287+1.0;
            double t40289 = log(t40288);
            double t40290 = a1p*c*t40274;
            double t40291 = t40290+1.0;
            double t40292 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t40276+ \
               b3f*t40277+b2f*c*t40274+b4f*t40278*t40279))+1.0)*(a1f*c*t40274+1.0)*2.0-c0p*t40291*t40289*2.0))/(two_13* \
               2.0-2.0)+c0p*t40291*t40289*2.0)*(ccaa0+(ccaa2*t40271*t40273*t40292)/(gamma_aa[index]*gcaa*t40270*2.0+ \
               t40271*t40273*t40292+1.0)+(ccaa1*gamma_aa[index]*gcaa*t40270)/(gamma_aa[index]*gcaa*t40270+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t40271*t40272*t40273)/(gamma_aa[index]*gx*t40270*2.0+t40271*t40272* \
               t40273+1.0)+(cx1*gamma_aa[index]*gx*t40270)/(gamma_aa[index]*gx*t40270+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t39859 = 1.0/pow(rho_b[index],8.0/3.0);
            double t39860 = gamma_bb[index]*gamma_bb[index];
            double t39861 = gx*gx;
            double t39862 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t39863 = 1.0/pow(rho_b[index],1.0/3.0);
            double t39864 = c*t39863;
            double t39865 = sqrt(t39864);
            double t39866 = pow(t39864,3.0/2.0);
            double t39867 = c*c;
            double t39868 = 1.0/pow(rho_b[index],2.0/3.0);
            double t39869 = 1.0/c0p;
            double t39870 = b1p*t39865;
            double t39871 = b3p*t39866;
            double t39872 = b4p*t39867*t39868;
            double t39873 = b2p*c*t39863;
            double t39874 = t39870+t39871+t39872+t39873;
            double t39875 = 1.0/t39874;
            double t39876 = t39875*t39869*(1.0/2.0);
            double t39877 = t39876+1.0;
            double t39878 = log(t39877);
            double t39879 = a1p*c*t39863;
            double t39880 = t39879+1.0;
            double t39881 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t39865+ \
               b3f*t39866+b2f*c*t39863+b4f*t39867*t39868))+1.0)*(a1f*c*t39863+1.0)*2.0-c0p*t39880*t39878*2.0))/(two_13* \
               2.0-2.0)+c0p*t39880*t39878*2.0)*(ccaa0+(ccaa2*t39860*t39862*t39881)/(gamma_bb[index]*gcaa*t39859*2.0+ \
               t39860*t39862*t39881+1.0)+(ccaa1*gamma_bb[index]*gcaa*t39859)/(gamma_bb[index]*gcaa*t39859+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t39860*t39861*t39862)/(gamma_bb[index]*gx*t39859*2.0+t39860*t39861* \
               t39862+1.0)+(cx1*gamma_bb[index]*gx*t39859)/(gamma_bb[index]*gx*t39859+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37263 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37264 = c*t37263;
            double t37265 = sqrt(t37264);
            double t37266 = pow(t37264,3.0/2.0);
            double t37267 = c*c;
            double t37268 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37269 = 1.0/c0p;
            double t37270 = b1p*t37265;
            double t37271 = b3p*t37266;
            double t37272 = b4p*t37267*t37268;
            double t37273 = b2p*c*t37263;
            double t37274 = t37270+t37271+t37272+t37273;
            double t37275 = 1.0/t37274;
            double t37276 = t37275*t37269*(1.0/2.0);
            double t37277 = t37276+1.0;
            double t37278 = log(t37277);
            double t37279 = a1p*c*t37263;
            double t37280 = t37279+1.0;
            double t37281 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37282 = gamma_aa[index]*gamma_aa[index];
            double t37283 = gcaa*gcaa;
            double t37284 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t37287 = gamma_aa[index]*t37281*(1.0/2.0);
            double t37288 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37289 = gamma_bb[index]*t37288*(1.0/2.0);
            double t37285 = t37287+t37289;
            double t37286 = gcab*gcab;
            double t37290 = t37285*t37285;
            double t37291 = rho_a[index]+rho_b[index];
            double t37292 = 1.0/pow(t37291,1.0/3.0);
            double t37293 = c*t37292;
            double t37294 = sqrt(t37293);
            double t37295 = b1p*t37294;
            double t37296 = pow(t37293,3.0/2.0);
            double t37297 = b3p*t37296;
            double t37298 = 1.0/pow(t37291,2.0/3.0);
            double t37299 = b4p*t37267*t37298;
            double t37300 = b2p*c*t37292;
            double t37301 = t37300+t37295+t37297+t37299;
            double t37302 = 1.0/pow(t37291,4.0/3.0);
            double t37303 = two_13*2.0;
            double t37304 = t37303-2.0;
            double t37305 = 1.0/t37304;
            double t37306 = 1.0/c0f;
            double t37307 = 1.0/t37301;
            double t37308 = t37307*t37269*(1.0/2.0);
            double t37309 = t37308+1.0;
            double t37310 = a1p*c*t37292;
            double t37311 = t37310+1.0;
            double t37312 = rho_a[index]-rho_b[index];
            double t37313 = t37312*t37312;
            double t37314 = 1.0/t37291;
            double t37315 = t37312*t37314;
            double t37316 = b1f*t37294;
            double t37317 = b3f*t37296;
            double t37318 = b4f*t37267*t37298;
            double t37319 = b2f*c*t37292;
            double t37320 = t37316+t37317+t37318+t37319;
            double t37321 = 1.0/t37320;
            double t37322 = t37321*t37306*(1.0/2.0);
            double t37323 = t37322+1.0;
            double t37324 = log(t37323);
            double t37325 = a1f*c*t37292;
            double t37326 = t37325+1.0;
            double t37327 = log(t37309);
            double t37337 = c0f*t37324*t37326*2.0;
            double t37338 = c0p*t37311*t37327*2.0;
            double t37328 = t37337-t37338;
            double t37329 = t37315+1.0;
            double t37330 = pow(t37329,4.0/3.0);
            double t37331 = -t37315+1.0;
            double t37332 = pow(t37331,4.0/3.0);
            double t37333 = t37330+t37332-2.0;
            double t37334 = 1.0/(t37291*t37291);
            double t37365 = t37312*t37334;
            double t37335 = t37314-t37365;
            double t37336 = 1.0/(t37291*t37291*t37291*t37291);
            double t37339 = t37313*t37313;
            double t37340 = 1.0/pow(t37291,5.0/3.0);
            double t37341 = 1.0/sqrt(t37293);
            double t37342 = 1.0/t37309;
            double t37343 = 1.0/(t37301*t37301);
            double t37344 = b4p*t37340*t37267*(2.0/3.0);
            double t37345 = b2p*c*t37302*(1.0/3.0);
            double t37346 = b1p*c*t37302*t37341*(1.0/6.0);
            double t37347 = b3p*c*t37302*t37294*(1.0/2.0);
            double t37348 = t37344+t37345+t37346+t37347;
            double t37349 = t37311*t37342*t37343*t37348;
            double t37350 = 1.0/(t37291*t37291*t37291*t37291*t37291);
            double t37351 = 1.0/d2fz0;
            double t37352 = 1.0/Aa;
            double t37353 = b1a*t37294;
            double t37354 = b3a*t37296;
            double t37355 = b4a*t37267*t37298;
            double t37356 = b2a*c*t37292;
            double t37357 = t37353+t37354+t37355+t37356;
            double t37358 = 1.0/t37357;
            double t37359 = t37352*t37358*(1.0/2.0);
            double t37360 = t37359+1.0;
            double t37361 = log(t37360);
            double t37362 = a1a*c*t37292;
            double t37363 = t37362+1.0;
            double t37364 = pow(t37329,1.0/3.0);
            double t37366 = t37335*t37364*(4.0/3.0);
            double t37367 = pow(t37331,1.0/3.0);
            double t37368 = t37366-t37335*t37367*(4.0/3.0);
            double t37369 = t37336*t37339;
            double t37370 = t37369-1.0;
            double t37371 = pow(2.0,1.0/3.0);
            double t37372 = t37371*2.0;
            double t37373 = t37372-2.0;
            double t37374 = a1f*c*t37263;
            double t37375 = t37374+1.0;
            double t37376 = b1f*t37265;
            double t37377 = b3f*t37266;
            double t37378 = b4f*t37267*t37268;
            double t37379 = b2f*c*t37263;
            double t37380 = t37376+t37377+t37378+t37379;
            double t37381 = 1.0/t37380;
            double t37382 = t37306*t37381*(1.0/2.0);
            double t37383 = t37382+1.0;
            double t37384 = 1.0/pow(rho_a[index],4.0/3.0);
            double t37385 = 1.0/pow(rho_a[index],5.0/3.0);
            double t37386 = 1.0/sqrt(t37264);
            double t37387 = log(t37383);
            double t37388 = 1.0/t37277;
            double t37389 = 1.0/(t37274*t37274);
            double t37390 = b4p*t37267*t37385*(2.0/3.0);
            double t37391 = b2p*c*t37384*(1.0/3.0);
            double t37392 = b1p*c*t37384*t37386*(1.0/6.0);
            double t37393 = b3p*c*t37265*t37384*(1.0/2.0);
            double t37394 = t37390+t37391+t37392+t37393;
            double t37395 = t37280*t37394*t37388*t37389;
            double t37396 = c0f*t37375*t37387*2.0;
            double t37397 = c0p*t37280*t37278*2.0;
            double t37398 = t37396-t37397;
            double t37399 = 1.0/pow(rho_b[index],1.0/3.0);
            double t37400 = c*t37399;
            double t37401 = sqrt(t37400);
            double t37402 = pow(t37400,3.0/2.0);
            double t37403 = 1.0/pow(rho_b[index],2.0/3.0);
            double t37404 = b1p*t37401;
            double t37405 = b3p*t37402;
            double t37406 = b4p*t37403*t37267;
            double t37407 = b2p*c*t37399;
            double t37408 = t37404+t37405+t37406+t37407;
            double t37409 = 1.0/t37408;
            double t37410 = t37409*t37269*(1.0/2.0);
            double t37411 = t37410+1.0;
            double t37412 = log(t37411);
            double t37413 = a1p*c*t37399;
            double t37414 = t37413+1.0;
            double t37415 = c0p*t37412*t37414*2.0;
            double t37416 = t37305*t37333*t37336*t37328*t37339;
            double t37417 = Aa*t37305*t37333*t37351*t37361*t37370*t37363*2.0;
            double t37418 = gcab*t37285;
            double t37419 = t37418+1.0;
            double t37420 = 1.0/t37419;
            double t37421 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t37422 = t37290*t37286;
            double t37423 = gcab*t37285*2.0;
            double t37424 = t37422+t37423+1.0;
            double t37425 = 1.0/t37424;
            double t37426 = gx*gx;
            double t37427 = gamma_aa[index]*gx*t37281;
            double t37428 = t37427+1.0;
            double t37429 = 1.0/t37428;
            double t37430 = gamma_aa[index]*gx*t37281*2.0;
            double t37431 = t37282*t37426*t37284;
            double t37432 = t37430+t37431+1.0;
            double t37433 = 1.0/t37432;
            double t37434 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t37435 = 1.0/t37383;
            double t37436 = 1.0/(t37380*t37380);
            double t37437 = b4f*t37267*t37385*(2.0/3.0);
            double t37438 = b2f*c*t37384*(1.0/3.0);
            double t37439 = b1f*c*t37384*t37386*(1.0/6.0);
            double t37440 = b3f*c*t37265*t37384*(1.0/2.0);
            double t37441 = t37440+t37437+t37438+t37439;
            double t37442 = a1f*c*c0f*t37384*t37387*(2.0/3.0);
            double t37443 = a1p*c*c0p*t37384*t37278*(2.0/3.0);
            double t37444 = gamma_aa[index]*gcaa*t37281;
            double t37445 = t37444+1.0;
            double t37446 = 1.0/t37445;
            double t37447 = ccaa1*gamma_aa[index]*gcaa*t37281*t37446;
            double t37448 = gamma_aa[index]*gcaa*t37281*2.0;
            double t37449 = t37282*t37283*t37284;
            double t37450 = t37448+t37449+1.0;
            double t37451 = 1.0/t37450;
            double t37452 = ccaa2*t37451*t37282*t37283*t37284;
            double t37453 = ccaa0+t37452+t37447;
            double t37454 = t37305*t37373*t37398;
            double t37455 = t37454+t37397;
            v_rho_a_[index] = -t37453*(t37397+t37305*t37373*(t37396-c0p*t37280*t37278*2.0))-(ccab0+ccab1*gcab* \
               t37420*t37285+ccab2*t37290*t37425*t37286)*(t37416+t37417+t37338-t37397+t37291*(t37349-t37305*t37333* \
               t37336*t37339*(t37349-(1.0/(t37320*t37320)*t37326*(b2f*c*t37302*(1.0/3.0)+b4f*t37340*t37267*(2.0/3.0) \
               +b1f*c*t37302*t37341*(1.0/6.0)+b3f*c*t37302*t37294*(1.0/2.0)))/t37323+a1f*c*c0f*t37302*t37324*(2.0/ \
               3.0)-a1p*c*c0p*t37302*t37327*(2.0/3.0))-a1p*c*c0p*t37302*t37327*(2.0/3.0)-t37305*t37350*t37333*t37328* \
               t37339*4.0+t37305*t37336*t37328*t37339*t37368+t37312*t37313*t37305*t37333*t37336*t37328*4.0-Aa*t37305* \
               t37333*t37351*t37361*t37363*(t37350*t37339*4.0-t37312*t37313*t37336*4.0)*2.0+Aa*t37305*t37351*t37361* \
               t37370*t37363*t37368*2.0+(t37305*t37333*t37351*t37370*t37363*1.0/(t37357*t37357)*(b2a*c*t37302*(1.0/ \
               3.0)+b4a*t37340*t37267*(2.0/3.0)+b1a*c*t37302*t37341*(1.0/6.0)+b3a*c*t37302*t37294*(1.0/2.0)))/t37360- \
               Aa*a1a*c*t37302*t37305*t37333*t37351*t37361*t37370*(2.0/3.0))+rho_a[index]*(t37443-t37395+t37305*t37373* \
               (t37442+t37395-t37441*t37435*t37436*t37375-a1p*c*c0p*t37384*t37278*(2.0/3.0)))-t37305*t37373*t37398) \
               -(rho_a[index]*t37455+rho_b[index]*(t37415-t37305*t37373*(t37415-c0f*log((t37306*(1.0/2.0))/(b1f*t37401+ \
               b3f*t37402+b2f*c*t37399+b4f*t37403*t37267)+1.0)*(a1f*c*t37399+1.0)*2.0))-t37291*(t37416+t37417+t37338) \
               )*(ccab1*gamma_aa[index]*gcab*t37420*t37421*(4.0/3.0)-ccab2*1.0/(t37424*t37424)*t37290*t37286*(gamma_aa[index]* \
               gcab*t37421*(8.0/3.0)+gamma_aa[index]*t37421*t37285*t37286*(8.0/3.0))-ccab1*gamma_aa[index]*t37421* \
               1.0/(t37419*t37419)*t37285*t37286*(4.0/3.0)+ccab2*gamma_aa[index]*t37421*t37425*t37285*t37286*(8.0/ \
               3.0))+rho_a[index]*t37455*(ccaa1*gamma_aa[index]*gcaa*t37421*t37446*(8.0/3.0)+ccaa2*t37451*t37434* \
               t37282*t37283*(1.6E1/3.0)-ccaa1*t37434*t37282*t37283*1.0/(t37445*t37445)*(8.0/3.0)-ccaa2*1.0/(t37450* \
               t37450)*t37282*t37283*t37284*(gamma_aa[index]*gcaa*t37421*(1.6E1/3.0)+t37434*t37282*t37283*(1.6E1/ \
               3.0)))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t37281*t37429+cx2*t37433*t37282*t37426* \
               t37284)*(4.0/3.0)+rho_a[index]*t37453*(t37443-t37395+t37305*t37373*(t37442-t37443+t37395-t37441*t37435* \
               t37436*t37375))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t37421*t37429*(8.0/3.0)+cx2*t37433* \
               t37434*t37282*t37426*(1.6E1/3.0)-cx1*t37434*t37282*t37426*1.0/(t37428*t37428)*(8.0/3.0)-cx2*1.0/(t37432* \
               t37432)*t37282*t37426*t37284*(gamma_aa[index]*gx*t37421*(1.6E1/3.0)+t37434*t37282*t37426*(1.6E1/3.0) \
               ));
        } else if (rho_a[index] > cutoff_) {
            double t40294 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40295 = c*t40294;
            double t40296 = sqrt(t40295);
            double t40297 = pow(t40295,3.0/2.0);
            double t40298 = c*c;
            double t40299 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40300 = 1.0/c0p;
            double t40301 = b1p*t40296;
            double t40302 = b3p*t40297;
            double t40303 = b4p*t40298*t40299;
            double t40304 = b2p*c*t40294;
            double t40305 = t40301+t40302+t40303+t40304;
            double t40306 = 1.0/t40305;
            double t40307 = t40300*t40306*(1.0/2.0);
            double t40308 = t40307+1.0;
            double t40309 = log(t40308);
            double t40310 = a1p*c*t40294;
            double t40311 = t40310+1.0;
            double t40312 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40313 = gamma_aa[index]*gamma_aa[index];
            double t40314 = gcaa*gcaa;
            double t40315 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40316 = gx*gx;
            double t40317 = gamma_aa[index]*gx*t40312;
            double t40318 = t40317+1.0;
            double t40319 = 1.0/t40318;
            double t40320 = gamma_aa[index]*gx*t40312*2.0;
            double t40321 = t40313*t40315*t40316;
            double t40322 = t40320+t40321+1.0;
            double t40323 = 1.0/t40322;
            double t40324 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t40325 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t40326 = pow(2.0,1.0/3.0);
            double t40327 = t40326*2.0;
            double t40328 = t40327-2.0;
            double t40329 = two_13*2.0;
            double t40330 = t40329-2.0;
            double t40331 = 1.0/t40330;
            double t40332 = a1f*c*t40294;
            double t40333 = t40332+1.0;
            double t40334 = 1.0/c0f;
            double t40335 = b1f*t40296;
            double t40336 = b3f*t40297;
            double t40337 = b4f*t40298*t40299;
            double t40338 = b2f*c*t40294;
            double t40339 = t40335+t40336+t40337+t40338;
            double t40340 = 1.0/t40339;
            double t40341 = t40340*t40334*(1.0/2.0);
            double t40342 = t40341+1.0;
            double t40343 = 1.0/pow(rho_a[index],4.0/3.0);
            double t40344 = 1.0/pow(rho_a[index],5.0/3.0);
            double t40345 = 1.0/sqrt(t40295);
            double t40346 = log(t40342);
            double t40347 = 1.0/t40308;
            double t40348 = 1.0/(t40305*t40305);
            double t40349 = b4p*t40344*t40298*(2.0/3.0);
            double t40350 = b2p*c*t40343*(1.0/3.0);
            double t40351 = b1p*c*t40343*t40345*(1.0/6.0);
            double t40352 = b3p*c*t40343*t40296*(1.0/2.0);
            double t40353 = t40350+t40351+t40352+t40349;
            double t40354 = t40311*t40353*t40347*t40348;
            double t40355 = gamma_aa[index]*gcaa*t40312;
            double t40356 = t40355+1.0;
            double t40357 = 1.0/t40356;
            double t40358 = ccaa1*gamma_aa[index]*gcaa*t40312*t40357;
            double t40359 = gamma_aa[index]*gcaa*t40312*2.0;
            double t40360 = t40313*t40314*t40315;
            double t40361 = t40360+t40359+1.0;
            double t40362 = 1.0/t40361;
            double t40363 = ccaa2*t40313*t40314*t40315*t40362;
            double t40364 = ccaa0+t40363+t40358;
            double t40365 = c0f*t40333*t40346*2.0;
            double t40366 = c0p*t40311*t40309*2.0;
            v_rho_a_[index] = -t40364*(t40366+t40331*t40328*(t40365-c0p*t40311*t40309*2.0))+rho_a[index]*t40364* \
               (-t40354+t40331*t40328*(t40354-(t40333*1.0/(t40339*t40339)*(b2f*c*t40343*(1.0/3.0)+b4f*t40344*t40298* \
               (2.0/3.0)+b1f*c*t40343*t40345*(1.0/6.0)+b3f*c*t40343*t40296*(1.0/2.0)))/t40342+a1f*c*c0f*t40343*t40346* \
               (2.0/3.0)-a1p*c*c0p*t40343*t40309*(2.0/3.0))+a1p*c*c0p*t40343*t40309*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t40312*t40319+cx2*t40313*t40323*t40315*t40316)*(4.0/3.0)+rho_a[index]* \
               (t40366+t40331*t40328*(t40365-t40366))*(ccaa1*gamma_aa[index]*gcaa*t40325*t40357*(8.0/3.0)+ccaa2*t40313* \
               t40314*t40324*t40362*(1.6E1/3.0)-ccaa1*t40313*t40314*t40324*1.0/(t40356*t40356)*(8.0/3.0)-ccaa2*t40313* \
               t40314*t40315*1.0/(t40361*t40361)*(gamma_aa[index]*gcaa*t40325*(1.6E1/3.0)+t40313*t40314*t40324*(1.6E1/ \
               3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t40325*t40319*(8.0/3.0)+cx2*t40313*t40323* \
               t40324*t40316*(1.6E1/3.0)-cx1*t40313*t40324*t40316*1.0/(t40318*t40318)*(8.0/3.0)-cx2*t40313*1.0/(t40322* \
               t40322)*t40315*t40316*(gamma_aa[index]*gx*t40325*(1.6E1/3.0)+t40313*t40324*t40316*(1.6E1/3.0)));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37457 = 1.0/pow(rho_b[index],1.0/3.0);
            double t37458 = c*t37457;
            double t37459 = sqrt(t37458);
            double t37460 = pow(t37458,3.0/2.0);
            double t37461 = c*c;
            double t37462 = 1.0/pow(rho_b[index],2.0/3.0);
            double t37463 = 1.0/c0p;
            double t37464 = b1p*t37459;
            double t37465 = b3p*t37460;
            double t37466 = b4p*t37461*t37462;
            double t37467 = b2p*c*t37457;
            double t37468 = t37464+t37465+t37466+t37467;
            double t37469 = 1.0/t37468;
            double t37470 = t37463*t37469*(1.0/2.0);
            double t37471 = t37470+1.0;
            double t37472 = log(t37471);
            double t37473 = a1p*c*t37457;
            double t37474 = t37473+1.0;
            double t37475 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37476 = gamma_bb[index]*gamma_bb[index];
            double t37477 = gcaa*gcaa;
            double t37478 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t37481 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37482 = gamma_aa[index]*t37481*(1.0/2.0);
            double t37483 = gamma_bb[index]*t37475*(1.0/2.0);
            double t37479 = t37482+t37483;
            double t37480 = gcab*gcab;
            double t37484 = t37479*t37479;
            double t37485 = rho_a[index]+rho_b[index];
            double t37486 = 1.0/pow(t37485,1.0/3.0);
            double t37487 = c*t37486;
            double t37488 = sqrt(t37487);
            double t37489 = b1p*t37488;
            double t37490 = pow(t37487,3.0/2.0);
            double t37491 = b3p*t37490;
            double t37492 = 1.0/pow(t37485,2.0/3.0);
            double t37493 = b4p*t37461*t37492;
            double t37494 = b2p*c*t37486;
            double t37495 = t37491+t37493+t37494+t37489;
            double t37496 = 1.0/pow(t37485,4.0/3.0);
            double t37497 = two_13*2.0;
            double t37498 = t37497-2.0;
            double t37499 = 1.0/t37498;
            double t37500 = 1.0/c0f;
            double t37501 = 1.0/t37495;
            double t37502 = t37501*t37463*(1.0/2.0);
            double t37503 = t37502+1.0;
            double t37504 = a1p*c*t37486;
            double t37505 = t37504+1.0;
            double t37506 = rho_a[index]-rho_b[index];
            double t37507 = t37506*t37506;
            double t37508 = 1.0/t37485;
            double t37509 = t37506*t37508;
            double t37510 = b1f*t37488;
            double t37511 = b3f*t37490;
            double t37512 = b4f*t37461*t37492;
            double t37513 = b2f*c*t37486;
            double t37514 = t37510+t37511+t37512+t37513;
            double t37515 = 1.0/t37514;
            double t37516 = t37500*t37515*(1.0/2.0);
            double t37517 = t37516+1.0;
            double t37518 = log(t37517);
            double t37519 = a1f*c*t37486;
            double t37520 = t37519+1.0;
            double t37521 = log(t37503);
            double t37532 = c0f*t37520*t37518*2.0;
            double t37533 = c0p*t37521*t37505*2.0;
            double t37522 = t37532-t37533;
            double t37523 = t37509+1.0;
            double t37524 = pow(t37523,4.0/3.0);
            double t37525 = -t37509+1.0;
            double t37526 = pow(t37525,4.0/3.0);
            double t37527 = t37524+t37526-2.0;
            double t37528 = 1.0/(t37485*t37485);
            double t37529 = t37506*t37528;
            double t37530 = t37508+t37529;
            double t37531 = 1.0/(t37485*t37485*t37485*t37485);
            double t37534 = t37507*t37507;
            double t37535 = 1.0/pow(t37485,5.0/3.0);
            double t37536 = 1.0/sqrt(t37487);
            double t37537 = 1.0/t37503;
            double t37538 = 1.0/(t37495*t37495);
            double t37539 = b4p*t37461*t37535*(2.0/3.0);
            double t37540 = b2p*c*t37496*(1.0/3.0);
            double t37541 = b1p*c*t37536*t37496*(1.0/6.0);
            double t37542 = b3p*c*t37496*t37488*(1.0/2.0);
            double t37543 = t37540+t37541+t37542+t37539;
            double t37544 = 1.0/(t37485*t37485*t37485*t37485*t37485);
            double t37545 = 1.0/d2fz0;
            double t37546 = 1.0/Aa;
            double t37547 = b1a*t37488;
            double t37548 = b3a*t37490;
            double t37549 = b4a*t37461*t37492;
            double t37550 = b2a*c*t37486;
            double t37551 = t37550+t37547+t37548+t37549;
            double t37552 = 1.0/t37551;
            double t37553 = t37552*t37546*(1.0/2.0);
            double t37554 = t37553+1.0;
            double t37555 = log(t37554);
            double t37556 = a1a*c*t37486;
            double t37557 = t37556+1.0;
            double t37558 = pow(t37523,1.0/3.0);
            double t37559 = t37530*t37558*(4.0/3.0);
            double t37560 = pow(t37525,1.0/3.0);
            double t37561 = t37559-t37530*t37560*(4.0/3.0);
            double t37562 = t37531*t37534;
            double t37563 = t37562-1.0;
            double t37564 = pow(2.0,1.0/3.0);
            double t37565 = t37564*2.0;
            double t37566 = t37565-2.0;
            double t37567 = a1f*c*t37457;
            double t37568 = t37567+1.0;
            double t37569 = b1f*t37459;
            double t37570 = b3f*t37460;
            double t37571 = b4f*t37461*t37462;
            double t37572 = b2f*c*t37457;
            double t37573 = t37570+t37571+t37572+t37569;
            double t37574 = 1.0/t37573;
            double t37575 = t37500*t37574*(1.0/2.0);
            double t37576 = t37575+1.0;
            double t37577 = 1.0/pow(rho_b[index],4.0/3.0);
            double t37578 = 1.0/pow(rho_b[index],5.0/3.0);
            double t37579 = 1.0/sqrt(t37458);
            double t37580 = log(t37576);
            double t37581 = 1.0/t37471;
            double t37582 = 1.0/(t37468*t37468);
            double t37583 = b4p*t37461*t37578*(2.0/3.0);
            double t37584 = b2p*c*t37577*(1.0/3.0);
            double t37585 = b1p*c*t37577*t37579*(1.0/6.0);
            double t37586 = b3p*c*t37459*t37577*(1.0/2.0);
            double t37587 = t37583+t37584+t37585+t37586;
            double t37588 = t37581*t37474*t37582*t37587;
            double t37589 = c0f*t37580*t37568*2.0;
            double t37590 = c0p*t37472*t37474*2.0;
            double t37591 = a1p*c*c0p*t37521*t37496*(2.0/3.0);
            double t37592 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37593 = c*t37592;
            double t37594 = sqrt(t37593);
            double t37595 = pow(t37593,3.0/2.0);
            double t37596 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37597 = b1p*t37594;
            double t37598 = b3p*t37595;
            double t37599 = b4p*t37461*t37596;
            double t37600 = b2p*c*t37592;
            double t37601 = t37600+t37597+t37598+t37599;
            double t37602 = 1.0/t37601;
            double t37603 = t37602*t37463*(1.0/2.0);
            double t37604 = t37603+1.0;
            double t37605 = log(t37604);
            double t37606 = a1p*c*t37592;
            double t37607 = t37606+1.0;
            double t37608 = c0p*t37605*t37607*2.0;
            double t37609 = t37590-t37589;
            double t37610 = t37609*t37566*t37499;
            double t37611 = t37522*t37531*t37534*t37527*t37499;
            double t37612 = Aa*t37527*t37545*t37563*t37555*t37557*t37499*2.0;
            double t37613 = gcab*t37479;
            double t37614 = t37613+1.0;
            double t37615 = 1.0/t37614;
            double t37616 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t37617 = t37480*t37484;
            double t37618 = gcab*t37479*2.0;
            double t37619 = t37617+t37618+1.0;
            double t37620 = 1.0/t37619;
            double t37621 = gx*gx;
            double t37622 = gamma_bb[index]*gx*t37475;
            double t37623 = t37622+1.0;
            double t37624 = 1.0/t37623;
            double t37625 = gamma_bb[index]*gx*t37475*2.0;
            double t37626 = t37621*t37476*t37478;
            double t37627 = t37625+t37626+1.0;
            double t37628 = 1.0/t37627;
            double t37629 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t37630 = 1.0/t37576;
            double t37631 = 1.0/(t37573*t37573);
            double t37632 = b4f*t37461*t37578*(2.0/3.0);
            double t37633 = b2f*c*t37577*(1.0/3.0);
            double t37634 = b1f*c*t37577*t37579*(1.0/6.0);
            double t37635 = b3f*c*t37459*t37577*(1.0/2.0);
            double t37636 = t37632+t37633+t37634+t37635;
            double t37637 = a1f*c*c0f*t37580*t37577*(2.0/3.0);
            double t37638 = a1p*c*c0p*t37472*t37577*(2.0/3.0);
            double t37639 = gamma_bb[index]*gcaa*t37475;
            double t37640 = t37639+1.0;
            double t37641 = 1.0/t37640;
            double t37642 = ccaa1*gamma_bb[index]*gcaa*t37641*t37475;
            double t37643 = gamma_bb[index]*gcaa*t37475*2.0;
            double t37644 = t37476*t37477*t37478;
            double t37645 = t37643+t37644+1.0;
            double t37646 = 1.0/t37645;
            double t37647 = ccaa2*t37646*t37476*t37477*t37478;
            double t37648 = ccaa0+t37642+t37647;
            double t37649 = t37610-t37590;
            v_rho_b_[index] = -t37648*(t37590+t37566*t37499*(t37589-c0p*t37472*t37474*2.0))-(ccab0+ccab1*gcab* \
               t37615*t37479+ccab2*t37620*t37480*t37484)*(t37610+t37611+t37612+t37533-t37590+rho_b[index]*(t37638- \
               t37588+t37566*t37499*(t37637+t37588-t37630*t37631*t37636*t37568-a1p*c*c0p*t37472*t37577*(2.0/3.0)) \
               )-t37485*(t37591-t37505*t37543*t37537*t37538+t37522*t37531*t37534*t37561*t37499+t37522*t37534*t37544* \
               t37527*t37499*4.0-t37531*t37534*t37527*t37499*(t37591-t37505*t37543*t37537*t37538+(t37520*1.0/(t37514* \
               t37514)*(b2f*c*t37496*(1.0/3.0)+b4f*t37461*t37535*(2.0/3.0)+b1f*c*t37536*t37496*(1.0/6.0)+b3f*c*t37496* \
               t37488*(1.0/2.0)))/t37517-a1f*c*c0f*t37518*t37496*(2.0/3.0))+t37522*t37531*t37506*t37507*t37527*t37499* \
               4.0+Aa*t37527*t37545*t37555*t37557*t37499*(t37534*t37544*4.0+t37531*t37506*t37507*4.0)*2.0+Aa*t37561* \
               t37545*t37563*t37555*t37557*t37499*2.0-(1.0/(t37551*t37551)*t37527*t37545*t37563*t37557*t37499*(b2a* \
               c*t37496*(1.0/3.0)+b4a*t37461*t37535*(2.0/3.0)+b1a*c*t37536*t37496*(1.0/6.0)+b3a*c*t37496*t37488*(1.0/ \
               2.0)))/t37554+Aa*a1a*c*t37527*t37545*t37563*t37555*t37496*t37499*(2.0/3.0)))+(rho_b[index]*t37649- \
               rho_a[index]*(t37608-t37566*t37499*(t37608-c0f*log((t37500*(1.0/2.0))/(b1f*t37594+b3f*t37595+b2f*c* \
               t37592+b4f*t37461*t37596)+1.0)*(a1f*c*t37592+1.0)*2.0))+t37485*(t37611+t37612+t37533))*(ccab1*gamma_bb[index]* \
               gcab*t37615*t37616*(4.0/3.0)-ccab2*t37480*t37484*1.0/(t37619*t37619)*(gamma_bb[index]*gcab*t37616* \
               (8.0/3.0)+gamma_bb[index]*t37480*t37616*t37479*(8.0/3.0))-ccab1*gamma_bb[index]*1.0/(t37614*t37614) \
               *t37480*t37616*t37479*(4.0/3.0)+ccab2*gamma_bb[index]*t37620*t37480*t37616*t37479*(8.0/3.0))-rho_b[index]* \
               t37649*(ccaa1*gamma_bb[index]*gcaa*t37641*t37616*(8.0/3.0)+ccaa2*t37646*t37476*t37629*t37477*(1.6E1/ \
               3.0)-ccaa1*1.0/(t37640*t37640)*t37476*t37629*t37477*(8.0/3.0)-ccaa2*1.0/(t37645*t37645)*t37476*t37477* \
               t37478*(gamma_bb[index]*gcaa*t37616*(1.6E1/3.0)+t37476*t37629*t37477*(1.6E1/3.0)))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t37624*t37475+cx2*t37621*t37628*t37476*t37478)*(4.0/3.0)+rho_b[index]* \
               t37648*(t37638-t37588+t37566*t37499*(t37637-t37638+t37588-t37630*t37631*t37636*t37568))-c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t37624*t37616*(8.0/3.0)+cx2*t37621*t37628*t37476*t37629*(1.6E1/3.0)-cx1* \
               t37621*1.0/(t37623*t37623)*t37476*t37629*(8.0/3.0)-cx2*t37621*1.0/(t37627*t37627)*t37476*t37478*(gamma_bb[index]* \
               gx*t37616*(1.6E1/3.0)+t37621*t37476*t37629*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t39884 = 1.0/pow(rho_b[index],1.0/3.0);
            double t39885 = c*t39884;
            double t39886 = sqrt(t39885);
            double t39887 = pow(t39885,3.0/2.0);
            double t39888 = c*c;
            double t39889 = 1.0/pow(rho_b[index],2.0/3.0);
            double t39890 = 1.0/c0p;
            double t39891 = b1p*t39886;
            double t39892 = b3p*t39887;
            double t39893 = b4p*t39888*t39889;
            double t39894 = b2p*c*t39884;
            double t39895 = t39891+t39892+t39893+t39894;
            double t39896 = 1.0/t39895;
            double t39897 = t39890*t39896*(1.0/2.0);
            double t39898 = t39897+1.0;
            double t39899 = log(t39898);
            double t39900 = a1p*c*t39884;
            double t39901 = t39900+1.0;
            double t39902 = 1.0/pow(rho_b[index],8.0/3.0);
            double t39903 = gamma_bb[index]*gamma_bb[index];
            double t39904 = gcaa*gcaa;
            double t39905 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t39906 = gx*gx;
            double t39907 = gamma_bb[index]*gx*t39902;
            double t39908 = t39907+1.0;
            double t39909 = 1.0/t39908;
            double t39910 = gamma_bb[index]*gx*t39902*2.0;
            double t39911 = t39903*t39905*t39906;
            double t39912 = t39910+t39911+1.0;
            double t39913 = 1.0/t39912;
            double t39914 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t39915 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t39916 = pow(2.0,1.0/3.0);
            double t39917 = t39916*2.0;
            double t39918 = t39917-2.0;
            double t39919 = two_13*2.0;
            double t39920 = t39919-2.0;
            double t39921 = 1.0/t39920;
            double t39922 = a1f*c*t39884;
            double t39923 = t39922+1.0;
            double t39924 = 1.0/c0f;
            double t39925 = b1f*t39886;
            double t39926 = b3f*t39887;
            double t39927 = b4f*t39888*t39889;
            double t39928 = b2f*c*t39884;
            double t39929 = t39925+t39926+t39927+t39928;
            double t39930 = 1.0/t39929;
            double t39931 = t39930*t39924*(1.0/2.0);
            double t39932 = t39931+1.0;
            double t39933 = 1.0/pow(rho_b[index],4.0/3.0);
            double t39934 = 1.0/pow(rho_b[index],5.0/3.0);
            double t39935 = 1.0/sqrt(t39885);
            double t39936 = log(t39932);
            double t39937 = 1.0/t39898;
            double t39938 = 1.0/(t39895*t39895);
            double t39939 = b4p*t39934*t39888*(2.0/3.0);
            double t39940 = b2p*c*t39933*(1.0/3.0);
            double t39941 = b1p*c*t39933*t39935*(1.0/6.0);
            double t39942 = b3p*c*t39933*t39886*(1.0/2.0);
            double t39943 = t39940+t39941+t39942+t39939;
            double t39944 = t39901*t39943*t39937*t39938;
            double t39945 = gamma_bb[index]*gcaa*t39902;
            double t39946 = t39945+1.0;
            double t39947 = 1.0/t39946;
            double t39948 = ccaa1*gamma_bb[index]*gcaa*t39902*t39947;
            double t39949 = gamma_bb[index]*gcaa*t39902*2.0;
            double t39950 = t39903*t39904*t39905;
            double t39951 = t39950+t39949+1.0;
            double t39952 = 1.0/t39951;
            double t39953 = ccaa2*t39903*t39904*t39905*t39952;
            double t39954 = ccaa0+t39953+t39948;
            double t39955 = c0f*t39923*t39936*2.0;
            double t39956 = c0p*t39901*t39899*2.0;
            v_rho_b_[index] = -t39954*(t39956+t39921*t39918*(t39955-c0p*t39901*t39899*2.0))+rho_b[index]*t39954* \
               (-t39944+t39921*t39918*(t39944-(t39923*1.0/(t39929*t39929)*(b2f*c*t39933*(1.0/3.0)+b4f*t39934*t39888* \
               (2.0/3.0)+b1f*c*t39933*t39935*(1.0/6.0)+b3f*c*t39933*t39886*(1.0/2.0)))/t39932+a1f*c*c0f*t39933*t39936* \
               (2.0/3.0)-a1p*c*c0p*t39933*t39899*(2.0/3.0))+a1p*c*c0p*t39933*t39899*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t39902*t39909+cx2*t39903*t39913*t39905*t39906)*(4.0/3.0)+rho_b[index]* \
               (t39956+t39921*t39918*(t39955-t39956))*(ccaa1*gamma_bb[index]*gcaa*t39915*t39947*(8.0/3.0)+ccaa2*t39903* \
               t39904*t39914*t39952*(1.6E1/3.0)-ccaa1*t39903*t39904*t39914*1.0/(t39946*t39946)*(8.0/3.0)-ccaa2*t39903* \
               t39904*t39905*1.0/(t39951*t39951)*(gamma_bb[index]*gcaa*t39915*(1.6E1/3.0)+t39903*t39904*t39914*(1.6E1/ \
               3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t39915*t39909*(8.0/3.0)+cx2*t39903*t39913* \
               t39914*t39906*(1.6E1/3.0)-cx1*t39903*t39914*t39906*1.0/(t39908*t39908)*(8.0/3.0)-cx2*t39903*1.0/(t39912* \
               t39912)*t39905*t39906*(gamma_bb[index]*gx*t39915*(1.6E1/3.0)+t39903*t39914*t39906*(1.6E1/3.0)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t37651 = 1.0/pow(rho_a[index],1.0/3.0);
                double t37652 = c*t37651;
                double t37653 = sqrt(t37652);
                double t37654 = pow(t37652,3.0/2.0);
                double t37655 = c*c;
                double t37656 = 1.0/pow(rho_a[index],2.0/3.0);
                double t37657 = 1.0/c0p;
                double t37658 = b1p*t37653;
                double t37659 = b3p*t37654;
                double t37660 = b4p*t37655*t37656;
                double t37661 = b2p*c*t37651;
                double t37662 = t37660+t37661+t37658+t37659;
                double t37663 = 1.0/t37662;
                double t37664 = t37663*t37657*(1.0/2.0);
                double t37665 = t37664+1.0;
                double t37666 = log(t37665);
                double t37667 = a1p*c*t37651;
                double t37668 = t37667+1.0;
                double t37669 = pow(2.0,1.0/3.0);
                double t37670 = t37669*2.0;
                double t37671 = t37670-2.0;
                double t37672 = two_13*2.0;
                double t37673 = t37672-2.0;
                double t37674 = 1.0/t37673;
                double t37675 = 1.0/c0f;
                double t37676 = 1.0/pow(rho_b[index],1.0/3.0);
                double t37677 = c*t37676;
                double t37678 = sqrt(t37677);
                double t37679 = pow(t37677,3.0/2.0);
                double t37680 = 1.0/pow(rho_b[index],2.0/3.0);
                double t37681 = b1p*t37678;
                double t37682 = b3p*t37679;
                double t37683 = b4p*t37680*t37655;
                double t37684 = b2p*c*t37676;
                double t37685 = t37681+t37682+t37683+t37684;
                double t37686 = 1.0/t37685;
                double t37687 = t37657*t37686*(1.0/2.0);
                double t37688 = t37687+1.0;
                double t37689 = log(t37688);
                double t37690 = a1p*c*t37676;
                double t37691 = t37690+1.0;
                double t37692 = c0p*t37691*t37689*2.0;
                double t37693 = rho_a[index]+rho_b[index];
                double t37694 = 1.0/pow(t37693,1.0/3.0);
                double t37695 = c*t37694;
                double t37696 = sqrt(t37695);
                double t37697 = pow(t37695,3.0/2.0);
                double t37698 = 1.0/pow(t37693,2.0/3.0);
                double t37699 = b1p*t37696;
                double t37700 = b3p*t37697;
                double t37701 = b4p*t37655*t37698;
                double t37702 = b2p*c*t37694;
                double t37703 = t37700+t37701+t37702+t37699;
                double t37704 = 1.0/t37703;
                double t37705 = t37704*t37657*(1.0/2.0);
                double t37706 = t37705+1.0;
                double t37707 = log(t37706);
                double t37708 = a1p*c*t37694;
                double t37709 = t37708+1.0;
                double t37710 = c0p*t37707*t37709*2.0;
                double t37711 = rho_a[index]-rho_b[index];
                double t37712 = t37711*t37711;
                double t37713 = 1.0/t37693;
                double t37714 = t37711*t37713;
                double t37715 = 1.0/(t37693*t37693*t37693*t37693);
                double t37716 = t37712*t37712;
                double t37717 = t37714+1.0;
                double t37718 = pow(t37717,4.0/3.0);
                double t37719 = -t37714+1.0;
                double t37720 = pow(t37719,4.0/3.0);
                double t37721 = t37720+t37718-2.0;
                double t37722 = 1.0/pow(rho_a[index],8.0/3.0);
                double t37723 = gamma_aa[index]*t37722*(1.0/2.0);
                double t37724 = 1.0/pow(rho_b[index],8.0/3.0);
                double t37725 = gamma_bb[index]*t37724*(1.0/2.0);
                double t37726 = t37723+t37725;
                double t37727 = gcab*t37726;
                double t37728 = t37727+1.0;
                double t37729 = gcab*gcab;
                double t37730 = t37726*t37726;
                double t37731 = t37730*t37729;
                double t37732 = gcab*t37726*2.0;
                double t37733 = t37731+t37732+1.0;
                double t37734 = c0p*t37666*t37668*2.0;
                double t37735 = gx*gx;
                double t37736 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t37737 = gamma_aa[index]*gx*t37722;
                double t37738 = t37737+1.0;
                double t37739 = gamma_aa[index]*gamma_aa[index];
                double t37740 = gamma_aa[index]*gx*t37722*2.0;
                double t37741 = t37735*t37736*t37739;
                double t37742 = t37740+t37741+1.0;
                double t37743 = b1f*t37653;
                double t37744 = b3f*t37654;
                double t37745 = b4f*t37655*t37656;
                double t37746 = b2f*c*t37651;
                double t37747 = t37743+t37744+t37745+t37746;
                double t37748 = 1.0/t37747;
                double t37749 = t37675*t37748*(1.0/2.0);
                double t37750 = t37749+1.0;
                double t37751 = log(t37750);
                double t37752 = a1f*c*t37651;
                double t37753 = t37752+1.0;
                double t37754 = t37734-c0f*t37751*t37753*2.0;
                double t37755 = t37734-t37671*t37754*t37674;
                double t37756 = gcaa*gcaa;
                double t37757 = gamma_aa[index]*gcaa*t37722;
                double t37758 = t37757+1.0;
                double t37759 = gamma_aa[index]*gcaa*t37722*2.0;
                double t37760 = t37736*t37756*t37739;
                double t37761 = t37760+t37759+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t37755+rho_b[index]*(t37692-t37671*t37674*(t37692-c0f*log((t37675* \
                   (1.0/2.0))/(b1f*t37678+b3f*t37679+b2f*c*t37676+b4f*t37680*t37655)+1.0)*(a1f*c*t37676+1.0)*2.0))-t37693* \
                   (t37710-t37721*t37715*t37716*t37674*(t37710-c0f*log((t37675*(1.0/2.0))/(b1f*t37696+b3f*t37697+b2f* \
                   c*t37694+b4f*t37655*t37698)+1.0)*(a1f*c*t37694+1.0)*2.0)+(Aa*t37721*t37674*log((1.0/2.0)/(Aa*(b1a* \
                   t37696+b3a*t37697+b2a*c*t37694+b4a*t37655*t37698))+1.0)*(t37715*t37716-1.0)*(a1a*c*t37694+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t37722*(1.0/2.0))/t37728-ccab2*t37730*1.0/(t37733*t37733)*t37729*(gcab*t37722+ \
                   t37722*t37726*t37729)+(ccab2*t37722*t37726*t37729)/t37733-ccab1*t37722*t37726*1.0/(t37728*t37728)* \
                   t37729*(1.0/2.0))-rho_a[index]*t37755*((ccaa1*gcaa*t37722)/t37758+(ccaa2*gamma_aa[index]*t37736*t37756* \
                   2.0)/t37761-ccaa1*gamma_aa[index]*t37736*t37756*1.0/(t37758*t37758)-ccaa2*1.0/(t37761*t37761)*t37736* \
                   t37756*t37739*(gcaa*t37722*2.0+gamma_aa[index]*t37736*t37756*2.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t37722)/t37738-cx1*gamma_aa[index]*t37735*t37736*1.0/(t37738*t37738)+(cx2*gamma_aa[index]*t37735* \
                   t37736*2.0)/t37742-cx2*1.0/(t37742*t37742)*t37735*t37736*t37739*(gx*t37722*2.0+gamma_aa[index]*t37735* \
                   t37736*2.0));
            } else if (rho_a[index] > cutoff_) {
                double t40369 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40370 = gx*gx;
                double t40371 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40372 = gamma_aa[index]*gx*t40369;
                double t40373 = t40372+1.0;
                double t40374 = gamma_aa[index]*gamma_aa[index];
                double t40375 = gamma_aa[index]*gx*t40369*2.0;
                double t40376 = t40370*t40371*t40374;
                double t40377 = t40375+t40376+1.0;
                double t40378 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40379 = c*t40378;
                double t40380 = sqrt(t40379);
                double t40381 = pow(t40379,3.0/2.0);
                double t40382 = c*c;
                double t40383 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40384 = 1.0/c0p;
                double t40385 = b1p*t40380;
                double t40386 = b3p*t40381;
                double t40387 = b4p*t40382*t40383;
                double t40388 = b2p*c*t40378;
                double t40389 = t40385+t40386+t40387+t40388;
                double t40390 = 1.0/t40389;
                double t40391 = t40390*t40384*(1.0/2.0);
                double t40392 = t40391+1.0;
                double t40393 = log(t40392);
                double t40394 = a1p*c*t40378;
                double t40395 = t40394+1.0;
                double t40396 = gcaa*gcaa;
                double t40397 = gamma_aa[index]*gcaa*t40369;
                double t40398 = t40397+1.0;
                double t40399 = gamma_aa[index]*gcaa*t40369*2.0;
                double t40400 = t40371*t40374*t40396;
                double t40401 = t40400+t40399+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t40369)/t40373-cx1*gamma_aa[index]*t40370* \
                   t40371*1.0/(t40373*t40373)+(cx2*gamma_aa[index]*t40370*t40371*2.0)/t40377-cx2*t40370*t40371*t40374* \
                   1.0/(t40377*t40377)*(gx*t40369*2.0+gamma_aa[index]*t40370*t40371*2.0))-rho_a[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t40380+b3f*t40381+b2f*c*t40378+b4f*t40382*t40383))+1.0) \
                   *(a1f*c*t40378+1.0)*2.0-c0p*t40393*t40395*2.0))/(two_13*2.0-2.0)+c0p*t40393*t40395*2.0)*((ccaa1*gcaa* \
                   t40369)/t40398+(ccaa2*gamma_aa[index]*t40371*t40396*2.0)/t40401-ccaa1*gamma_aa[index]*t40371*t40396* \
                   1.0/(t40398*t40398)-ccaa2*1.0/(t40401*t40401)*t40371*t40374*t40396*(gcaa*t40369*2.0+gamma_aa[index]* \
                   t40371*t40396*2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t37764 = 1.0/pow(rho_a[index],1.0/3.0);
                double t37765 = c*t37764;
                double t37766 = sqrt(t37765);
                double t37767 = pow(t37765,3.0/2.0);
                double t37768 = c*c;
                double t37769 = 1.0/pow(rho_a[index],2.0/3.0);
                double t37770 = 1.0/c0p;
                double t37771 = b1p*t37766;
                double t37772 = b3p*t37767;
                double t37773 = b4p*t37768*t37769;
                double t37774 = b2p*c*t37764;
                double t37775 = t37771+t37772+t37773+t37774;
                double t37776 = 1.0/t37775;
                double t37777 = t37770*t37776*(1.0/2.0);
                double t37778 = t37777+1.0;
                double t37779 = log(t37778);
                double t37780 = a1p*c*t37764;
                double t37781 = t37780+1.0;
                double t37782 = pow(2.0,1.0/3.0);
                double t37783 = t37782*2.0;
                double t37784 = t37783-2.0;
                double t37785 = two_13*2.0;
                double t37786 = t37785-2.0;
                double t37787 = 1.0/t37786;
                double t37788 = 1.0/c0f;
                double t37789 = 1.0/pow(rho_b[index],1.0/3.0);
                double t37790 = c*t37789;
                double t37791 = sqrt(t37790);
                double t37792 = pow(t37790,3.0/2.0);
                double t37793 = 1.0/pow(rho_b[index],2.0/3.0);
                double t37794 = b1p*t37791;
                double t37795 = b3p*t37792;
                double t37796 = b4p*t37793*t37768;
                double t37797 = b2p*c*t37789;
                double t37798 = t37794+t37795+t37796+t37797;
                double t37799 = 1.0/t37798;
                double t37800 = t37770*t37799*(1.0/2.0);
                double t37801 = t37800+1.0;
                double t37802 = log(t37801);
                double t37803 = a1p*c*t37789;
                double t37804 = t37803+1.0;
                double t37805 = c0p*t37802*t37804*2.0;
                double t37806 = rho_a[index]+rho_b[index];
                double t37807 = 1.0/pow(t37806,1.0/3.0);
                double t37808 = c*t37807;
                double t37809 = sqrt(t37808);
                double t37810 = pow(t37808,3.0/2.0);
                double t37811 = 1.0/pow(t37806,2.0/3.0);
                double t37812 = b1p*t37809;
                double t37813 = b3p*t37810;
                double t37814 = b4p*t37811*t37768;
                double t37815 = b2p*c*t37807;
                double t37816 = t37812+t37813+t37814+t37815;
                double t37817 = 1.0/t37816;
                double t37818 = t37770*t37817*(1.0/2.0);
                double t37819 = t37818+1.0;
                double t37820 = log(t37819);
                double t37821 = a1p*c*t37807;
                double t37822 = t37821+1.0;
                double t37823 = c0p*t37820*t37822*2.0;
                double t37824 = rho_a[index]-rho_b[index];
                double t37825 = t37824*t37824;
                double t37826 = 1.0/t37806;
                double t37827 = t37824*t37826;
                double t37828 = 1.0/(t37806*t37806*t37806*t37806);
                double t37829 = t37825*t37825;
                double t37830 = t37827+1.0;
                double t37831 = pow(t37830,4.0/3.0);
                double t37832 = -t37827+1.0;
                double t37833 = pow(t37832,4.0/3.0);
                double t37834 = t37831+t37833-2.0;
                double t37835 = 1.0/pow(rho_b[index],8.0/3.0);
                double t37836 = 1.0/pow(rho_a[index],8.0/3.0);
                double t37837 = gamma_aa[index]*t37836*(1.0/2.0);
                double t37838 = gamma_bb[index]*t37835*(1.0/2.0);
                double t37839 = t37837+t37838;
                double t37840 = gcab*t37839;
                double t37841 = t37840+1.0;
                double t37842 = gcab*gcab;
                double t37843 = t37839*t37839;
                double t37844 = t37842*t37843;
                double t37845 = gcab*t37839*2.0;
                double t37846 = t37844+t37845+1.0;
                double t37847 = c0p*t37781*t37779*2.0;
                double t37848 = gx*gx;
                double t37849 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t37850 = gamma_bb[index]*gx*t37835;
                double t37851 = t37850+1.0;
                double t37852 = gamma_bb[index]*gamma_bb[index];
                double t37853 = gamma_bb[index]*gx*t37835*2.0;
                double t37854 = t37852*t37848*t37849;
                double t37855 = t37853+t37854+1.0;
                double t37856 = b1f*t37791;
                double t37857 = b3f*t37792;
                double t37858 = b4f*t37793*t37768;
                double t37859 = b2f*c*t37789;
                double t37860 = t37856+t37857+t37858+t37859;
                double t37861 = 1.0/t37860;
                double t37862 = t37861*t37788*(1.0/2.0);
                double t37863 = t37862+1.0;
                double t37864 = log(t37863);
                double t37865 = a1f*c*t37789;
                double t37866 = t37865+1.0;
                double t37867 = t37805-c0f*t37864*t37866*2.0;
                double t37868 = t37805-t37784*t37867*t37787;
                double t37869 = gcaa*gcaa;
                double t37870 = gamma_bb[index]*gcaa*t37835;
                double t37871 = t37870+1.0;
                double t37872 = gamma_bb[index]*gcaa*t37835*2.0;
                double t37873 = t37852*t37849*t37869;
                double t37874 = t37872+t37873+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t37868+rho_a[index]*(t37847-t37784*t37787*(t37847-c0f*log((t37788* \
                   (1.0/2.0))/(b1f*t37766+b3f*t37767+b2f*c*t37764+b4f*t37768*t37769)+1.0)*(a1f*c*t37764+1.0)*2.0))-t37806* \
                   (t37823-t37834*t37828*t37829*t37787*(t37823-c0f*log((t37788*(1.0/2.0))/(b1f*t37809+b3f*t37810+b2f* \
                   c*t37807+b4f*t37811*t37768)+1.0)*(a1f*c*t37807+1.0)*2.0)+(Aa*t37834*t37787*log((1.0/2.0)/(Aa*(b1a* \
                   t37809+b3a*t37810+b2a*c*t37807+b4a*t37811*t37768))+1.0)*(t37828*t37829-1.0)*(a1a*c*t37807+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t37835*(1.0/2.0))/t37841-ccab2*t37842*t37843*1.0/(t37846*t37846)*(gcab*t37835+ \
                   t37842*t37835*t37839)-ccab1*1.0/(t37841*t37841)*t37842*t37835*t37839*(1.0/2.0)+(ccab2*t37842*t37835* \
                   t37839)/t37846)-rho_b[index]*t37868*((ccaa1*gcaa*t37835)/t37871-ccaa1*gamma_bb[index]*1.0/(t37871* \
                   t37871)*t37849*t37869+(ccaa2*gamma_bb[index]*t37849*t37869*2.0)/t37874-ccaa2*t37852*1.0/(t37874*t37874) \
                   *t37849*t37869*(gcaa*t37835*2.0+gamma_bb[index]*t37849*t37869*2.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1* \
                   gx*t37835)/t37851-cx1*gamma_bb[index]*1.0/(t37851*t37851)*t37848*t37849+(cx2*gamma_bb[index]*t37848* \
                   t37849*2.0)/t37855-cx2*t37852*1.0/(t37855*t37855)*t37848*t37849*(gx*t37835*2.0+gamma_bb[index]*t37848* \
                   t37849*2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t39960 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39961 = gx*gx;
                double t39962 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t39963 = gamma_bb[index]*gx*t39960;
                double t39964 = t39963+1.0;
                double t39965 = gamma_bb[index]*gamma_bb[index];
                double t39966 = gamma_bb[index]*gx*t39960*2.0;
                double t39967 = t39961*t39962*t39965;
                double t39968 = t39966+t39967+1.0;
                double t39969 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39970 = c*t39969;
                double t39971 = sqrt(t39970);
                double t39972 = pow(t39970,3.0/2.0);
                double t39973 = c*c;
                double t39974 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39975 = 1.0/c0p;
                double t39976 = b1p*t39971;
                double t39977 = b3p*t39972;
                double t39978 = b4p*t39973*t39974;
                double t39979 = b2p*c*t39969;
                double t39980 = t39976+t39977+t39978+t39979;
                double t39981 = 1.0/t39980;
                double t39982 = t39981*t39975*(1.0/2.0);
                double t39983 = t39982+1.0;
                double t39984 = log(t39983);
                double t39985 = a1p*c*t39969;
                double t39986 = t39985+1.0;
                double t39987 = gcaa*gcaa;
                double t39988 = gamma_bb[index]*gcaa*t39960;
                double t39989 = t39988+1.0;
                double t39990 = gamma_bb[index]*gcaa*t39960*2.0;
                double t39991 = t39962*t39965*t39987;
                double t39992 = t39990+t39991+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t39960)/t39964-cx1*gamma_bb[index]*t39961* \
                   t39962*1.0/(t39964*t39964)+(cx2*gamma_bb[index]*t39961*t39962*2.0)/t39968-cx2*t39961*t39962*t39965* \
                   1.0/(t39968*t39968)*(gx*t39960*2.0+gamma_bb[index]*t39961*t39962*2.0))-rho_b[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t39971+b3f*t39972+b2f*c*t39969+b4f*t39973*t39974))+1.0) \
                   *(a1f*c*t39969+1.0)*2.0-c0p*t39984*t39986*2.0))/(two_13*2.0-2.0)+c0p*t39984*t39986*2.0)*((ccaa1*gcaa* \
                   t39960)/t39989+(ccaa2*gamma_bb[index]*t39962*t39987*2.0)/t39992-ccaa1*gamma_bb[index]*t39962*t39987* \
                   1.0/(t39989*t39989)-ccaa2*t39962*t39965*1.0/(t39992*t39992)*t39987*(gcaa*t39960*2.0+gamma_bb[index]* \
                   t39962*t39987*2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37878 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37879 = c*t37878;
            double t37880 = sqrt(t37879);
            double t37881 = pow(t37879,3.0/2.0);
            double t37882 = c*c;
            double t37883 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37884 = 1.0/c0p;
            double t37885 = b1p*t37880;
            double t37886 = b3p*t37881;
            double t37887 = b4p*t37882*t37883;
            double t37888 = b2p*c*t37878;
            double t37889 = t37885+t37886+t37887+t37888;
            double t37890 = 1.0/t37889;
            double t37891 = t37890*t37884*(1.0/2.0);
            double t37892 = t37891+1.0;
            double t37893 = log(t37892);
            double t37894 = a1p*c*t37878;
            double t37895 = t37894+1.0;
            double t37896 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37897 = gamma_aa[index]*gamma_aa[index];
            double t37898 = gcaa*gcaa;
            double t37899 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t37900 = gamma_aa[index]*gcaa*t37896;
            double t37901 = t37900+1.0;
            double t37902 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t37903 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t37904 = gamma_aa[index]*gcaa*t37896*2.0;
            double t37905 = t37902*t37897*t37898;
            double t37906 = t37904+t37905+1.0;
            double t37909 = gamma_aa[index]*t37896*(1.0/2.0);
            double t37910 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37911 = gamma_bb[index]*t37910*(1.0/2.0);
            double t37907 = t37911+t37909;
            double t37908 = gcab*gcab;
            double t37912 = t37907*t37907;
            double t37913 = rho_a[index]+rho_b[index];
            double t37914 = 1.0/pow(t37913,1.0/3.0);
            double t37915 = c*t37914;
            double t37916 = sqrt(t37915);
            double t37917 = b1p*t37916;
            double t37918 = pow(t37915,3.0/2.0);
            double t37919 = b3p*t37918;
            double t37920 = 1.0/pow(t37913,2.0/3.0);
            double t37921 = b4p*t37920*t37882;
            double t37922 = b2p*c*t37914;
            double t37923 = t37921+t37922+t37917+t37919;
            double t37924 = 1.0/pow(t37913,7.0/3.0);
            double t37925 = 1.0/pow(t37913,8.0/3.0);
            double t37926 = 1.0/sqrt(t37915);
            double t37927 = a1p*c*t37914;
            double t37928 = t37927+1.0;
            double t37929 = 1.0/t37923;
            double t37930 = t37884*t37929*(1.0/2.0);
            double t37931 = t37930+1.0;
            double t37932 = 1.0/t37931;
            double t37933 = 1.0/pow(t37913,4.0/3.0);
            double t37973 = 1.0/pow(t37913,5.0/3.0);
            double t37975 = b4p*t37882*t37973*(2.0/3.0);
            double t37976 = b2p*c*t37933*(1.0/3.0);
            double t37977 = b1p*c*t37933*t37926*(1.0/6.0);
            double t37978 = b3p*c*t37933*t37916*(1.0/2.0);
            double t37934 = t37975+t37976+t37977+t37978;
            double t37935 = two_13*2.0;
            double t37936 = t37935-2.0;
            double t37937 = 1.0/t37936;
            double t37938 = 1.0/c0f;
            double t37939 = rho_a[index]-rho_b[index];
            double t37940 = 1.0/t37913;
            double t37941 = t37940*t37939;
            double t37942 = b1f*t37916;
            double t37943 = b3f*t37918;
            double t37944 = b4f*t37920*t37882;
            double t37945 = b2f*c*t37914;
            double t37946 = t37942+t37943+t37944+t37945;
            double t37947 = 1.0/t37946;
            double t37948 = t37938*t37947*(1.0/2.0);
            double t37949 = t37948+1.0;
            double t37950 = log(t37949);
            double t37951 = a1f*c*t37914;
            double t37952 = t37951+1.0;
            double t37953 = log(t37931);
            double t37961 = c0f*t37950*t37952*2.0;
            double t37962 = c0p*t37953*t37928*2.0;
            double t37954 = t37961-t37962;
            double t37955 = t37939*t37939;
            double t37956 = t37941+1.0;
            double t37957 = pow(t37956,4.0/3.0);
            double t37958 = -t37941+1.0;
            double t37959 = pow(t37958,4.0/3.0);
            double t37960 = t37957+t37959-2.0;
            double t37963 = 1.0/(t37913*t37913);
            double t37967 = t37963*t37939;
            double t37964 = t37940-t37967;
            double t37965 = 1.0/(t37913*t37913*t37913*t37913);
            double t37966 = pow(t37956,1.0/3.0);
            double t37968 = t37964*t37966*(4.0/3.0);
            double t37969 = pow(t37958,1.0/3.0);
            double t38001 = t37964*t37969*(4.0/3.0);
            double t37970 = t37968-t38001;
            double t37971 = 1.0/(t37913*t37913*t37913*t37913*t37913);
            double t37972 = t37955*t37955;
            double t37974 = 1.0/(t37923*t37923);
            double t37979 = 1.0/t37949;
            double t37980 = 1.0/(t37946*t37946);
            double t37981 = b4f*t37882*t37973*(2.0/3.0);
            double t37982 = b2f*c*t37933*(1.0/3.0);
            double t37983 = b1f*c*t37933*t37926*(1.0/6.0);
            double t37984 = b3f*c*t37933*t37916*(1.0/2.0);
            double t37985 = t37981+t37982+t37983+t37984;
            double t37986 = t37932*t37934*t37928*t37974;
            double t37987 = a1f*c*c0f*t37950*t37933*(2.0/3.0);
            double t37988 = t37934*t37934;
            double t37989 = 1.0/pow(t37915,3.0/2.0);
            double t37990 = b4p*t37925*t37882*(1.0E1/9.0);
            double t37991 = b2p*c*t37924*(4.0/9.0);
            double t37992 = b1p*c*t37924*t37926*(2.0/9.0);
            double t37993 = b3p*c*t37924*t37916*(2.0/3.0);
            double t37994 = b3p*t37925*t37926*t37882*(1.0/1.2E1);
            double t37995 = t37990+t37991+t37992+t37993+t37994-b1p*t37925*t37882*t37989*(1.0/3.6E1);
            double t37996 = 1.0/(t37923*t37923*t37923);
            double t37997 = t37932*t37928*t37996*t37988*2.0;
            double t37998 = t37985*t37985;
            double t37999 = 1.0/(t37931*t37931);
            double t38000 = 1.0/(t37923*t37923*t37923*t37923);
            double t38089 = t37952*t37980*t37985*t37979;
            double t38090 = a1p*c*c0p*t37933*t37953*(2.0/3.0);
            double t38002 = t37986+t37987-t38090-t38089;
            double t38003 = t37963*2.0;
            double t38004 = 1.0/(t37913*t37913*t37913);
            double t38022 = t37939*t38004*2.0;
            double t38005 = t38003-t38022;
            double t38006 = t37964*t37964;
            double t38007 = a1p*c*c0p*t37924*t37953*(8.0/9.0);
            double t38008 = 1.0/(t37913*t37913*t37913*t37913*t37913*t37913);
            double t38009 = 1.0/d2fz0;
            double t38010 = 1.0/Aa;
            double t38011 = b1a*t37916;
            double t38012 = b3a*t37918;
            double t38013 = b4a*t37920*t37882;
            double t38014 = b2a*c*t37914;
            double t38015 = t38011+t38012+t38013+t38014;
            double t38016 = 1.0/t38015;
            double t38017 = t38010*t38016*(1.0/2.0);
            double t38018 = t38017+1.0;
            double t38019 = log(t38018);
            double t38020 = a1a*c*t37914;
            double t38021 = t38020+1.0;
            double t38023 = t37969*t38005*(4.0/3.0);
            double t38024 = 1.0/pow(t37956,2.0/3.0);
            double t38025 = t38006*t38024*(4.0/9.0);
            double t38026 = 1.0/pow(t37958,2.0/3.0);
            double t38027 = t38006*t38026*(4.0/9.0);
            double t38028 = t38023+t38025+t38027-t37966*t38005*(4.0/3.0);
            double t38029 = t37971*t37972*4.0;
            double t38041 = t37955*t37965*t37939*4.0;
            double t38030 = -t38041+t38029;
            double t38031 = 1.0/t38018;
            double t38032 = t37972*t37965;
            double t38033 = t38032-1.0;
            double t38034 = 1.0/(t38015*t38015);
            double t38035 = b4a*t37882*t37973*(2.0/3.0);
            double t38036 = b2a*c*t37933*(1.0/3.0);
            double t38037 = b1a*c*t37933*t37926*(1.0/6.0);
            double t38038 = b3a*c*t37933*t37916*(1.0/2.0);
            double t38039 = t38035+t38036+t38037+t38038;
            double t38040 = t38039*t38039;
            double t38042 = t37932*t37928*t37974*t37995;
            double t38043 = pow(2.0,1.0/3.0);
            double t38044 = t38043*2.0;
            double t38045 = t38044-2.0;
            double t38046 = a1f*c*t37878;
            double t38047 = t38046+1.0;
            double t38048 = b1f*t37880;
            double t38049 = b3f*t37881;
            double t38050 = b4f*t37882*t37883;
            double t38051 = b2f*c*t37878;
            double t38052 = t38050+t38051+t38048+t38049;
            double t38053 = 1.0/t38052;
            double t38054 = t37938*t38053*(1.0/2.0);
            double t38055 = t38054+1.0;
            double t38056 = 1.0/pow(rho_a[index],4.0/3.0);
            double t38058 = 1.0/pow(rho_a[index],5.0/3.0);
            double t38059 = 1.0/sqrt(t37879);
            double t38065 = b4f*t37882*t38058*(2.0/3.0);
            double t38066 = b2f*c*t38056*(1.0/3.0);
            double t38067 = b1f*c*t38056*t38059*(1.0/6.0);
            double t38068 = b3f*c*t37880*t38056*(1.0/2.0);
            double t38057 = t38065+t38066+t38067+t38068;
            double t38070 = b4p*t37882*t38058*(2.0/3.0);
            double t38071 = b2p*c*t38056*(1.0/3.0);
            double t38072 = b1p*c*t38056*t38059*(1.0/6.0);
            double t38073 = b3p*c*t37880*t38056*(1.0/2.0);
            double t38060 = t38070+t38071+t38072+t38073;
            double t38061 = 1.0/t38055;
            double t38062 = 1.0/pow(rho_a[index],7.0/3.0);
            double t38063 = 1.0/t37892;
            double t38064 = 1.0/pow(t37879,3.0/2.0);
            double t38069 = t38057*t38057;
            double t38074 = t38060*t38060;
            double t38075 = log(t38055);
            double t38076 = 1.0/(t38052*t38052);
            double t38077 = 1.0/(t37889*t37889);
            double t38078 = 1.0/(t37889*t37889*t37889);
            double t38079 = t37895*t38063*t38074*t38078*2.0;
            double t38080 = b4p*t37882*t37896*(1.0E1/9.0);
            double t38081 = b2p*c*t38062*(4.0/9.0);
            double t38082 = b3p*t37882*t37896*t38059*(1.0/1.2E1);
            double t38083 = b1p*c*t38062*t38059*(2.0/9.0);
            double t38084 = b3p*c*t37880*t38062*(2.0/3.0);
            double t38161 = b1p*t37882*t37896*t38064*(1.0/3.6E1);
            double t38085 = t38080-t38161+t38081+t38082+t38083+t38084;
            double t38086 = 1.0/(t37892*t37892);
            double t38087 = 1.0/(t37889*t37889*t37889*t37889);
            double t38088 = a1p*c*c0p*t37893*t38062*(8.0/9.0);
            double t38091 = t38041-t38029;
            double t38092 = t37928*t37884*t37988*t37999*t38000*(1.0/2.0);
            double t38093 = gcab*t37907;
            double t38094 = t38093+1.0;
            double t38095 = 1.0/t38094;
            double t38096 = t37912*t37908;
            double t38097 = gcab*t37907*2.0;
            double t38098 = t38096+t38097+1.0;
            double t38099 = 1.0/t38098;
            double t38100 = t37895*t38060*t38063*t38077;
            double t38101 = a1f*c*c0f*t38056*t38075*(2.0/3.0);
            double t38103 = a1p*c*c0p*t37893*t38056*(2.0/3.0);
            double t38106 = t38061*t38047*t38057*t38076;
            double t38102 = t38100+t38101-t38103-t38106;
            double t38104 = c0f*t38047*t38075*2.0;
            double t38105 = c0p*t37893*t37895*2.0;
            double t38107 = t37937*t38102*t38045;
            double t38108 = 1.0/t37901;
            double t38109 = 1.0/t37906;
            double t38110 = t38104-t38105;
            double t38111 = 1.0/pow(rho_b[index],1.0/3.0);
            double t38112 = c*t38111;
            double t38113 = sqrt(t38112);
            double t38114 = pow(t38112,3.0/2.0);
            double t38115 = 1.0/pow(rho_b[index],2.0/3.0);
            double t38116 = b1p*t38113;
            double t38117 = b3p*t38114;
            double t38118 = b4p*t37882*t38115;
            double t38119 = b2p*c*t38111;
            double t38120 = t38116+t38117+t38118+t38119;
            double t38121 = 1.0/t38120;
            double t38122 = t37884*t38121*(1.0/2.0);
            double t38123 = t38122+1.0;
            double t38124 = log(t38123);
            double t38125 = a1p*c*t38111;
            double t38126 = t38125+1.0;
            double t38127 = c0p*t38124*t38126*2.0;
            double t38128 = t37960*t37954*t37972*t37937*t37965;
            double t38129 = Aa*t37960*t37937*t38021*t38033*t38009*t38019*2.0;
            double t38130 = 1.0/(t38094*t38094);
            double t38131 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t38132 = gamma_aa[index]*gcab*t37903*(8.0/3.0);
            double t38133 = gamma_aa[index]*t37903*t37907*t37908*(8.0/3.0);
            double t38134 = t38132+t38133;
            double t38135 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t38136 = 1.0/(t38098*t38098);
            double t38137 = gx*gx;
            double t38138 = gamma_aa[index]*gx*t37896;
            double t38139 = t38138+1.0;
            double t38144 = gamma_aa[index]*gx*t37903*(1.6E1/3.0);
            double t38145 = t37897*t37899*t38137*(1.6E1/3.0);
            double t38140 = t38144+t38145;
            double t38141 = gamma_aa[index]*gx*t37896*2.0;
            double t38142 = t37902*t37897*t38137;
            double t38143 = t38141+t38142+1.0;
            double t38146 = 1.0/(t38143*t38143);
            double t38147 = 1.0/t38139;
            double t38148 = 1.0/t38143;
            double t38149 = 1.0/(t38139*t38139);
            double t38150 = ccaa1*gamma_aa[index]*gcaa*t37896*t38108;
            double t38151 = ccaa2*t37902*t37897*t37898*t38109;
            double t38152 = ccaa0+t38150+t38151;
            double t38153 = 1.0/(t38052*t38052*t38052);
            double t38154 = b4f*t37882*t37896*(1.0E1/9.0);
            double t38155 = b2f*c*t38062*(4.0/9.0);
            double t38156 = b3f*t37882*t37896*t38059*(1.0/1.2E1);
            double t38157 = b1f*c*t38062*t38059*(2.0/9.0);
            double t38158 = b3f*c*t37880*t38062*(2.0/3.0);
            double t38159 = t38154+t38155+t38156+t38157+t38158-b1f*t37882*t37896*t38064*(1.0/3.6E1);
            double t38160 = t38061*t38047*t38076*t38159;
            double t38162 = t37895*t38063*t38085*t38077;
            double t38163 = 1.0/(t38055*t38055);
            double t38164 = 1.0/(t38052*t38052*t38052*t38052);
            double t38165 = t37938*t38163*t38047*t38164*t38069*(1.0/2.0);
            double t38166 = t37884*t37895*t38074*t38086*t38087*(1.0/2.0);
            double t38167 = a1f*c*t38061*t38056*t38057*t38076*(2.0/3.0);
            double t38168 = a1p*c*t38060*t38063*t38056*t38077*(2.0/3.0);
            double t38169 = t37937*t38110*t38045;
            double t38170 = t38105+t38169;
            double t38171 = 1.0/pow(rho_a[index],1.0E1);
            double t38172 = 1.0/(t37901*t37901);
            double t38173 = gamma_aa[index]*gcaa*t37903*(1.6E1/3.0);
            double t38174 = t37897*t37898*t37899*(1.6E1/3.0);
            double t38175 = t38173+t38174;
            double t38176 = 1.0/(t37906*t37906);
            double t38177 = ccaa1*gamma_aa[index]*gcaa*t37903*t38108*(8.0/3.0);
            double t38178 = ccaa2*t37897*t37898*t37899*t38109*(1.6E1/3.0);
            double t38179 = t38177+t38178-ccaa1*t37897*t37898*t37899*t38172*(8.0/3.0)-ccaa2*t37902*t37897*t37898* \
               t38175*t38176;
            double t38180 = -t38100+t38103+t38107;
            v_rho_a_rho_a_[index] = t38152*t38180*2.0+t38179*(t38105+t37937*t38045*(t38104-c0p*t37893*t37895* \
               2.0))*2.0-(ccab0+ccab1*gcab*t37907*t38095+ccab2*t37912*t37908*t38099)*(-t37913*(-t37997+t38042-t38007+ \
               t38092+t37960*t37972*t37937*t37965*(t37997-t38042+t38007-t38092-t37952*1.0/(t37946*t37946*t37946)* \
               t37979*t37998*2.0+t37952*t37980*t37979*(b2f*c*t37924*(4.0/9.0)+b4f*t37925*t37882*(1.0E1/9.0)+b1f*c* \
               t37924*t37926*(2.0/9.0)+b3f*c*t37924*t37916*(2.0/3.0)-b1f*t37925*t37882*t37989*(1.0/3.6E1)+b3f*t37925* \
               t37926*t37882*(1.0/1.2E1))+t37952*1.0/(t37946*t37946*t37946*t37946)*t37938*1.0/(t37949*t37949)*t37998* \
               (1.0/2.0)-a1f*c*c0f*t37950*t37924*(8.0/9.0)+a1f*c*t37933*t37980*t37985*t37979*(2.0/3.0)-a1p*c*t37932* \
               t37933*t37934*t37974*(2.0/3.0))+t37970*t37971*t37954*t37972*t37937*8.0-t37960*t37954*t37937*t37955* \
               t37965*1.2E1-t37960*t37971*t37972*t37937*t38002*8.0+t37970*t37972*t37937*t37965*t38002*2.0-t37960* \
               t37954*t37972*t37937*t38008*2.0E1-t37954*t37972*t37937*t37965*t38028+t37960*t37971*t37954*t37937*t37955* \
               t37939*3.2E1-t37970*t37954*t37937*t37955*t37965*t37939*8.0+t37960*t37937*t37955*t37965*t37939*t38002* \
               8.0+a1p*c*t37932*t37933*t37934*t37974*(2.0/3.0)+Aa*t37970*t37937*t38021*t38030*t38009*t38019*4.0-Aa* \
               t37937*t38021*t38033*t38009*t38019*t38028*2.0-Aa*t37960*t37937*t38021*t38009*t38019*(t37955*t37965* \
               1.2E1+t37972*t38008*2.0E1-t37971*t37955*t37939*3.2E1)*2.0+t37960*t37937*t38021*t38030*t38031*t38034* \
               t38009*t38039*2.0-t37970*t37937*t38021*t38031*t38033*t38034*t38009*t38039*2.0-t37960*t37937*t38021* \
               t38031*t38040*1.0/(t38015*t38015*t38015)*t38033*t38009*2.0+t37960*t37937*t38021*t38031*t38033*t38034* \
               t38009*(b2a*c*t37924*(4.0/9.0)+b4a*t37925*t37882*(1.0E1/9.0)+b1a*c*t37924*t37926*(2.0/9.0)+b3a*c*t37924* \
               t37916*(2.0/3.0)-b1a*t37925*t37882*t37989*(1.0/3.6E1)+b3a*t37925*t37926*t37882*(1.0/1.2E1))-Aa*a1a* \
               c*t37924*t37960*t37937*t38033*t38009*t38019*(8.0/9.0)+Aa*a1a*c*t37933*t37970*t37937*t38033*t38009* \
               t38019*(4.0/3.0)+Aa*a1a*c*t37933*t37960*t37937*t38009*t38019*t38091*(4.0/3.0)+t37960*t37937*t38010* \
               t38021*t38040*1.0/(t38015*t38015*t38015*t38015)*t38033*t38009*1.0/(t38018*t38018)*(1.0/2.0)+a1a*c* \
               t37933*t37960*t37937*t38031*t38033*t38034*t38009*t38039*(2.0/3.0))+rho_a[index]*(t38162+t38166+t38168- \
               t38079-t38088+t37937*t38045*(t38160+t38165+t38167+t38079+t38088-t37895*t38063*t38085*t38077-t38061* \
               t38153*t38047*t38069*2.0-a1f*c*c0f*t38062*t38075*(8.0/9.0)-t37884*t37895*t38074*t38086*t38087*(1.0/ \
               2.0)-a1p*c*t38060*t38063*t38056*t38077*(2.0/3.0)))+t37937*t38102*t38045*2.0+t37932*t37934*t37928*t37974* \
               2.0-t37895*t38060*t38063*t38077*2.0-a1p*c*c0p*t37933*t37953*(4.0/3.0)+a1p*c*c0p*t37893*t38056*(4.0/ \
               3.0)-t37960*t37971*t37954*t37972*t37937*8.0+t37970*t37954*t37972*t37937*t37965*2.0-t37960*t37972*t37937* \
               t37965*t38002*2.0+t37960*t37954*t37937*t37955*t37965*t37939*8.0+Aa*t37970*t37937*t38021*t38033*t38009* \
               t38019*4.0+Aa*t37960*t37937*t38021*t38009*t38019*t38091*4.0+t37960*t37937*t38021*t38031*t38033*t38034* \
               t38009*t38039*2.0-Aa*a1a*c*t37933*t37960*t37937*t38033*t38009*t38019*(4.0/3.0))+(rho_a[index]*t38170+ \
               rho_b[index]*(t38127-t37937*t38045*(t38127-c0f*log((t37938*(1.0/2.0))/(b1f*t38113+b3f*t38114+b2f*c* \
               t38111+b4f*t37882*t38115)+1.0)*(a1f*c*t38111+1.0)*2.0))-t37913*(t37962+t38128+t38129))*(-ccab2*t37912* \
               t37908*t38136*(gamma_aa[index]*gcab*t38135*(8.8E1/9.0)+t37908*t37897*t38131*(3.2E1/9.0)+gamma_aa[index]* \
               t37907*t37908*t38135*(8.8E1/9.0))+ccab2*t37912*t37908*(t38134*t38134)*1.0/(t38098*t38098*t38098)*2.0+ \
               ccab1*gamma_aa[index]*gcab*t38135*t38095*(4.4E1/9.0)-ccab1*t37908*t37897*t38130*t38131*(3.2E1/9.0) \
               +ccab2*t37908*t37897*t38131*t38099*(3.2E1/9.0)-ccab1*gamma_aa[index]*t37907*t37908*t38130*t38135*(4.4E1/ \
               9.0)+ccab2*gamma_aa[index]*t37907*t37908*t38135*t38099*(8.8E1/9.0)-ccab2*gamma_aa[index]*t37903*t37907* \
               t37908*t38134*t38136*(1.6E1/3.0)+ccab1*gcab*t37907*t37908*t37897*t38131*1.0/(t38094*t38094*t38094) \
               *(3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t37903*t38095*(4.0/3.0)-ccab2*t37912*t37908*t38134*t38136- \
               ccab1*gamma_aa[index]*t37903*t37907*t37908*t38130*(4.0/3.0)+ccab2*gamma_aa[index]*t37903*t37907*t37908* \
               t38099*(8.0/3.0))*(t37962-t38105+t38128+t38129+rho_a[index]*t38180+t37913*(t37986-t38090-t37960*t37971* \
               t37954*t37972*t37937*4.0+t37970*t37954*t37972*t37937*t37965-t37960*t37972*t37937*t37965*t38002+t37960* \
               t37954*t37937*t37955*t37965*t37939*4.0+Aa*t37970*t37937*t38021*t38033*t38009*t38019*2.0+Aa*t37960* \
               t37937*t38021*t38009*t38019*t38091*2.0+t37960*t37937*t38021*t38031*t38033*t38034*t38009*t38039-Aa* \
               a1a*c*t37933*t37960*t37937*t38033*t38009*t38019*(2.0/3.0))-t37937*t38110*t38045)*2.0+c0*t37883*(cx0+ \
               cx1*gamma_aa[index]*gx*t37896*t38147+cx2*t37902*t37897*t38137*t38148)*(4.0/9.0)-rho_a[index]*t38170* \
               (ccaa1*gamma_aa[index]*gcaa*t38108*t38135*(8.8E1/9.0)-ccaa1*t37897*t37898*t38131*t38172*2.4E1+ccaa2* \
               t37897*t37898*t38131*t38109*(3.04E2/9.0)-ccaa2*t37897*t37898*t37899*t38175*t38176*(3.2E1/3.0)-ccaa2* \
               t37902*t37897*t37898*t38176*(gamma_aa[index]*gcaa*t38135*(1.76E2/9.0)+t37897*t37898*t38131*(3.04E2/ \
               9.0))+ccaa2*t37902*1.0/(t37906*t37906*t37906)*t37897*t37898*(t38175*t38175)*2.0+ccaa1*gamma_aa[index]* \
               gcaa*1.0/(t37901*t37901*t37901)*t37897*t37898*t38171*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t38135*t38147*(8.8E1/9.0)-cx1*t37897*t38131*t38137*t38149*2.4E1+cx2*t37897*t38131* \
               t38137*t38148*(3.04E2/9.0)-cx2*t37897*t37899*t38140*t38137*t38146*(3.2E1/3.0)-cx2*t37902*t37897*t38137* \
               t38146*(gamma_aa[index]*gx*t38135*(1.76E2/9.0)+t37897*t38131*t38137*(3.04E2/9.0))+cx2*t37902*t37897* \
               (t38140*t38140)*1.0/(t38143*t38143*t38143)*t38137*2.0+cx1*gamma_aa[index]*gx*t37897*t38171*t38137* \
               1.0/(t38139*t38139*t38139)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t37903* \
               t38147*(8.0/3.0)-cx1*t37897*t37899*t38137*t38149*(8.0/3.0)+cx2*t37897*t37899*t38137*t38148*(1.6E1/ \
               3.0)-cx2*t37902*t37897*t38140*t38137*t38146)*(8.0/3.0)+rho_a[index]*t38152*(t38162+t38166+t38168-t38079- \
               t38088+t37937*t38045*(t38160-t38162+t38165-t38166+t38167-t38168+t38079+t38088-t38061*t38153*t38047* \
               t38069*2.0-a1f*c*c0f*t38062*t38075*(8.0/9.0)))-rho_a[index]*t38180*t38179*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t40407 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40408 = c*t40407;
            double t40409 = sqrt(t40408);
            double t40410 = pow(t40408,3.0/2.0);
            double t40411 = c*c;
            double t40412 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40413 = 1.0/c0p;
            double t40414 = b1p*t40409;
            double t40415 = b3p*t40410;
            double t40416 = b4p*t40411*t40412;
            double t40417 = b2p*c*t40407;
            double t40418 = t40414+t40415+t40416+t40417;
            double t40419 = 1.0/t40418;
            double t40420 = t40413*t40419*(1.0/2.0);
            double t40421 = t40420+1.0;
            double t40422 = log(t40421);
            double t40423 = a1p*c*t40407;
            double t40424 = t40423+1.0;
            double t40425 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40426 = gamma_aa[index]*gamma_aa[index];
            double t40427 = gcaa*gcaa;
            double t40428 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t40429 = gamma_aa[index]*gcaa*t40425;
            double t40430 = t40429+1.0;
            double t40431 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40432 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t40433 = gamma_aa[index]*gcaa*t40425*2.0;
            double t40434 = t40431*t40426*t40427;
            double t40435 = t40433+t40434+1.0;
            double t40436 = pow(2.0,1.0/3.0);
            double t40437 = t40436*2.0;
            double t40438 = t40437-2.0;
            double t40439 = two_13*2.0;
            double t40440 = t40439-2.0;
            double t40441 = 1.0/t40440;
            double t40442 = a1f*c*t40407;
            double t40443 = t40442+1.0;
            double t40444 = 1.0/c0f;
            double t40445 = b1f*t40409;
            double t40446 = b3f*t40410;
            double t40447 = b4f*t40411*t40412;
            double t40448 = b2f*c*t40407;
            double t40449 = t40445+t40446+t40447+t40448;
            double t40450 = 1.0/t40449;
            double t40451 = t40450*t40444*(1.0/2.0);
            double t40452 = t40451+1.0;
            double t40453 = 1.0/pow(rho_a[index],4.0/3.0);
            double t40454 = 1.0/pow(rho_a[index],5.0/3.0);
            double t40455 = 1.0/sqrt(t40408);
            double t40456 = log(t40452);
            double t40457 = 1.0/t40421;
            double t40458 = 1.0/(t40418*t40418);
            double t40459 = b4p*t40411*t40454*(2.0/3.0);
            double t40460 = b2p*c*t40453*(1.0/3.0);
            double t40461 = b1p*c*t40453*t40455*(1.0/6.0);
            double t40462 = b3p*c*t40453*t40409*(1.0/2.0);
            double t40463 = t40460+t40461+t40462+t40459;
            double t40464 = t40424*t40463*t40457*t40458;
            double t40465 = 1.0/t40430;
            double t40466 = 1.0/t40435;
            double t40467 = gx*gx;
            double t40468 = gamma_aa[index]*gx*t40425;
            double t40469 = t40468+1.0;
            double t40470 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t40475 = gamma_aa[index]*gx*t40432*(1.6E1/3.0);
            double t40476 = t40426*t40428*t40467*(1.6E1/3.0);
            double t40471 = t40475+t40476;
            double t40472 = gamma_aa[index]*gx*t40425*2.0;
            double t40473 = t40431*t40426*t40467;
            double t40474 = t40472+t40473+1.0;
            double t40477 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t40478 = 1.0/(t40474*t40474);
            double t40479 = 1.0/t40469;
            double t40480 = 1.0/t40474;
            double t40481 = 1.0/(t40469*t40469);
            double t40482 = ccaa1*gamma_aa[index]*gcaa*t40425*t40465;
            double t40483 = ccaa2*t40431*t40426*t40427*t40466;
            double t40484 = ccaa0+t40482+t40483;
            double t40485 = 1.0/t40452;
            double t40486 = b4f*t40411*t40454*(2.0/3.0);
            double t40487 = b2f*c*t40453*(1.0/3.0);
            double t40488 = b1f*c*t40453*t40455*(1.0/6.0);
            double t40489 = b3f*c*t40453*t40409*(1.0/2.0);
            double t40490 = t40486+t40487+t40488+t40489;
            double t40491 = 1.0/(t40449*t40449);
            double t40492 = 1.0/pow(rho_a[index],7.0/3.0);
            double t40493 = 1.0/pow(t40408,3.0/2.0);
            double t40494 = t40490*t40490;
            double t40495 = t40463*t40463;
            double t40496 = 1.0/(t40418*t40418*t40418);
            double t40497 = t40424*t40457*t40495*t40496*2.0;
            double t40498 = b4p*t40411*t40425*(1.0E1/9.0);
            double t40499 = b2p*c*t40492*(4.0/9.0);
            double t40500 = b3p*t40411*t40425*t40455*(1.0/1.2E1);
            double t40501 = b1p*c*t40455*t40492*(2.0/9.0);
            double t40502 = b3p*c*t40409*t40492*(2.0/3.0);
            double t40503 = t40500+t40501+t40502+t40498+t40499-b1p*t40411*t40425*t40493*(1.0/3.6E1);
            double t40504 = 1.0/(t40421*t40421);
            double t40505 = 1.0/(t40418*t40418*t40418*t40418);
            double t40506 = a1p*c*c0p*t40422*t40492*(8.0/9.0);
            double t40507 = c0f*t40443*t40456*2.0;
            double t40508 = c0p*t40422*t40424*2.0;
            double t40509 = 1.0/pow(rho_a[index],1.0E1);
            double t40510 = 1.0/(t40430*t40430);
            double t40511 = gamma_aa[index]*gcaa*t40432*(1.6E1/3.0);
            double t40512 = t40426*t40427*t40428*(1.6E1/3.0);
            double t40513 = t40511+t40512;
            double t40514 = 1.0/(t40435*t40435);
            double t40515 = a1f*c*c0f*t40453*t40456*(2.0/3.0);
            double t40516 = a1p*c*c0p*t40422*t40453*(2.0/3.0);
            double t40517 = ccaa1*gamma_aa[index]*gcaa*t40432*t40465*(8.0/3.0);
            double t40518 = ccaa2*t40426*t40427*t40428*t40466*(1.6E1/3.0);
            double t40519 = t40517+t40518-ccaa1*t40510*t40426*t40427*t40428*(8.0/3.0)-ccaa2*t40431*t40513*t40514* \
               t40426*t40427;
            v_rho_a_rho_a_[index] = t40519*(t40508+t40441*t40438*(t40507-c0p*t40422*t40424*2.0))*2.0+t40484*(t40516- \
               t40464+t40441*t40438*(t40515+t40464-t40443*t40490*t40491*t40485-a1p*c*c0p*t40422*t40453*(2.0/3.0)) \
               )*2.0+c0*t40412*(cx0+cx1*gamma_aa[index]*gx*t40425*t40479+cx2*t40431*t40426*t40480*t40467)*(4.0/9.0) \
               -rho_a[index]*(t40508+t40441*t40438*(t40507-t40508))*(ccaa1*gamma_aa[index]*gcaa*t40465*t40477*(8.8E1/ \
               9.0)-ccaa1*t40510*t40470*t40426*t40427*2.4E1+ccaa2*t40470*t40426*t40427*t40466*(3.04E2/9.0)-ccaa2* \
               t40513*t40514*t40426*t40427*t40428*(3.2E1/3.0)-ccaa2*t40431*t40514*t40426*t40427*(gamma_aa[index]* \
               gcaa*t40477*(1.76E2/9.0)+t40470*t40426*t40427*(3.04E2/9.0))+ccaa2*t40431*(t40513*t40513)*t40426*1.0/ \
               (t40435*t40435*t40435)*t40427*2.0+ccaa1*gamma_aa[index]*gcaa*1.0/(t40430*t40430*t40430)*t40426*t40427* \
               t40509*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t40477*t40479*(8.8E1/9.0) \
               -cx1*t40470*t40426*t40481*t40467*2.4E1+cx2*t40470*t40426*t40480*t40467*(3.04E2/9.0)-cx2*t40426*t40471* \
               t40428*t40467*t40478*(3.2E1/3.0)-cx2*t40431*t40426*t40467*t40478*(gamma_aa[index]*gx*t40477*(1.76E2/ \
               9.0)+t40470*t40426*t40467*(3.04E2/9.0))+cx2*t40431*t40426*(t40471*t40471)*1.0/(t40474*t40474*t40474) \
               *t40467*2.0+cx1*gamma_aa[index]*gx*t40426*t40509*t40467*1.0/(t40469*t40469*t40469)*(1.28E2/9.0))+rho_a[index]* \
               t40484*(-t40506-t40497+t40441*t40438*(t40506+t40497-t40503*t40424*t40457*t40458-t40443*1.0/(t40449* \
               t40449*t40449)*t40485*t40494*2.0+t40443*t40491*t40485*(b2f*c*t40492*(4.0/9.0)+b4f*t40411*t40425*(1.0E1/ \
               9.0)+b1f*c*t40455*t40492*(2.0/9.0)+b3f*c*t40409*t40492*(2.0/3.0)-b1f*t40411*t40425*t40493*(1.0/3.6E1) \
               +b3f*t40411*t40425*t40455*(1.0/1.2E1))+t40443*1.0/(t40452*t40452)*t40444*1.0/(t40449*t40449*t40449* \
               t40449)*t40494*(1.0/2.0)-a1f*c*c0f*t40456*t40492*(8.0/9.0)-t40413*t40504*t40424*t40505*t40495*(1.0/ \
               2.0)+a1f*c*t40453*t40490*t40491*t40485*(2.0/3.0)-a1p*c*t40453*t40463*t40457*t40458*(2.0/3.0))+t40503* \
               t40424*t40457*t40458+t40413*t40504*t40424*t40505*t40495*(1.0/2.0)+a1p*c*t40453*t40463*t40457*t40458* \
               (2.0/3.0))-rho_a[index]*t40519*(t40516-t40464+t40441*t40438*(t40515-t40516+t40464-t40443*t40490*t40491* \
               t40485))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t40432*t40479*(8.0/3.0)-cx1*t40426* \
               t40481*t40428*t40467*(8.0/3.0)+cx2*t40426*t40480*t40428*t40467*(1.6E1/3.0)-cx2*t40431*t40426*t40471* \
               t40467*t40478)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t38182 = 1.0/pow(rho_a[index],1.0/3.0);
            double t38183 = c*t38182;
            double t38184 = sqrt(t38183);
            double t38185 = pow(t38183,3.0/2.0);
            double t38186 = c*c;
            double t38187 = 1.0/pow(rho_a[index],2.0/3.0);
            double t38188 = 1.0/c0p;
            double t38189 = b1p*t38184;
            double t38190 = b3p*t38185;
            double t38191 = b4p*t38186*t38187;
            double t38192 = b2p*c*t38182;
            double t38193 = t38190+t38191+t38192+t38189;
            double t38194 = 1.0/t38193;
            double t38195 = t38194*t38188*(1.0/2.0);
            double t38196 = t38195+1.0;
            double t38197 = log(t38196);
            double t38198 = a1p*c*t38182;
            double t38199 = t38198+1.0;
            double t38200 = pow(2.0,1.0/3.0);
            double t38201 = t38200*2.0;
            double t38202 = t38201-2.0;
            double t38203 = two_13*2.0;
            double t38204 = t38203-2.0;
            double t38205 = 1.0/t38204;
            double t38206 = 1.0/c0f;
            double t38207 = 1.0/pow(rho_b[index],1.0/3.0);
            double t38208 = c*t38207;
            double t38209 = sqrt(t38208);
            double t38210 = pow(t38208,3.0/2.0);
            double t38211 = 1.0/pow(rho_b[index],2.0/3.0);
            double t38212 = b1p*t38209;
            double t38213 = b3p*t38210;
            double t38214 = b4p*t38211*t38186;
            double t38215 = b2p*c*t38207;
            double t38216 = t38212+t38213+t38214+t38215;
            double t38217 = 1.0/t38216;
            double t38218 = t38217*t38188*(1.0/2.0);
            double t38219 = t38218+1.0;
            double t38220 = log(t38219);
            double t38221 = a1p*c*t38207;
            double t38222 = t38221+1.0;
            double t38223 = c0p*t38220*t38222*2.0;
            double t38224 = rho_a[index]+rho_b[index];
            double t38225 = 1.0/pow(t38224,1.0/3.0);
            double t38226 = c*t38225;
            double t38227 = sqrt(t38226);
            double t38228 = pow(t38226,3.0/2.0);
            double t38229 = 1.0/pow(t38224,2.0/3.0);
            double t38230 = b1p*t38227;
            double t38231 = b3p*t38228;
            double t38232 = b4p*t38229*t38186;
            double t38233 = b2p*c*t38225;
            double t38234 = t38230+t38231+t38232+t38233;
            double t38235 = 1.0/t38234;
            double t38236 = t38235*t38188*(1.0/2.0);
            double t38237 = t38236+1.0;
            double t38238 = log(t38237);
            double t38239 = a1p*c*t38225;
            double t38240 = t38239+1.0;
            double t38241 = c0p*t38240*t38238*2.0;
            double t38242 = rho_a[index]-rho_b[index];
            double t38243 = t38242*t38242;
            double t38244 = 1.0/t38224;
            double t38245 = t38242*t38244;
            double t38246 = 1.0/(t38224*t38224*t38224*t38224);
            double t38247 = t38243*t38243;
            double t38248 = t38245+1.0;
            double t38249 = pow(t38248,4.0/3.0);
            double t38250 = -t38245+1.0;
            double t38251 = pow(t38250,4.0/3.0);
            double t38252 = t38251+t38249-2.0;
            double t38253 = gcab*gcab;
            double t38254 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t38255 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t38256 = 1.0/pow(rho_a[index],8.0/3.0);
            double t38257 = gamma_aa[index]*t38256*(1.0/2.0);
            double t38258 = 1.0/pow(rho_b[index],8.0/3.0);
            double t38259 = gamma_bb[index]*t38258*(1.0/2.0);
            double t38260 = t38257+t38259;
            double t38261 = t38260*t38260;
            double t38262 = t38261*t38253;
            double t38263 = gcab*t38260*2.0;
            double t38264 = t38262+t38263+1.0;
            double t38265 = gamma_aa[index]*gcab*t38254*(8.0/3.0);
            double t38266 = gamma_aa[index]*t38260*t38253*t38254*(8.0/3.0);
            double t38267 = t38265+t38266;
            double t38268 = gamma_bb[index]*gcab*t38255*(8.0/3.0);
            double t38269 = gamma_bb[index]*t38260*t38253*t38255*(8.0/3.0);
            double t38270 = t38268+t38269;
            double t38271 = 1.0/(t38264*t38264);
            double t38272 = gcab*t38260;
            double t38273 = t38272+1.0;
            double t38274 = 1.0/(t38273*t38273);
            double t38275 = 1.0/t38264;
            double t38276 = 1.0/pow(t38224,4.0/3.0);
            double t38277 = b1f*t38227;
            double t38278 = b3f*t38228;
            double t38279 = b4f*t38229*t38186;
            double t38280 = b2f*c*t38225;
            double t38281 = t38280+t38277+t38278+t38279;
            double t38282 = 1.0/t38281;
            double t38283 = t38206*t38282*(1.0/2.0);
            double t38284 = t38283+1.0;
            double t38285 = log(t38284);
            double t38286 = a1f*c*t38225;
            double t38287 = t38286+1.0;
            double t38289 = c0f*t38285*t38287*2.0;
            double t38288 = t38241-t38289;
            double t38290 = 1.0/(t38224*t38224);
            double t38317 = t38242*t38290;
            double t38291 = t38244-t38317;
            double t38292 = 1.0/pow(t38224,5.0/3.0);
            double t38293 = 1.0/sqrt(t38226);
            double t38294 = 1.0/t38237;
            double t38295 = 1.0/(t38234*t38234);
            double t38296 = b4p*t38292*t38186*(2.0/3.0);
            double t38297 = b2p*c*t38276*(1.0/3.0);
            double t38298 = b1p*c*t38293*t38276*(1.0/6.0);
            double t38299 = b3p*c*t38227*t38276*(1.0/2.0);
            double t38300 = t38296+t38297+t38298+t38299;
            double t38301 = t38300*t38240*t38294*t38295;
            double t38302 = 1.0/d2fz0;
            double t38303 = 1.0/Aa;
            double t38304 = b1a*t38227;
            double t38305 = b3a*t38228;
            double t38306 = b4a*t38229*t38186;
            double t38307 = b2a*c*t38225;
            double t38308 = t38304+t38305+t38306+t38307;
            double t38309 = 1.0/t38308;
            double t38310 = t38303*t38309*(1.0/2.0);
            double t38311 = t38310+1.0;
            double t38312 = log(t38311);
            double t38313 = a1a*c*t38225;
            double t38314 = t38313+1.0;
            double t38315 = 1.0/(t38224*t38224*t38224*t38224*t38224);
            double t38316 = pow(t38248,1.0/3.0);
            double t38318 = t38316*t38291*(4.0/3.0);
            double t38319 = pow(t38250,1.0/3.0);
            double t38397 = t38291*t38319*(4.0/3.0);
            double t38320 = t38318-t38397;
            double t38321 = t38246*t38247;
            double t38322 = t38321-1.0;
            double t38323 = a1f*c*t38182;
            double t38324 = t38323+1.0;
            double t38325 = b1f*t38184;
            double t38326 = b3f*t38185;
            double t38327 = b4f*t38186*t38187;
            double t38328 = b2f*c*t38182;
            double t38329 = t38325+t38326+t38327+t38328;
            double t38330 = 1.0/t38329;
            double t38331 = t38330*t38206*(1.0/2.0);
            double t38332 = t38331+1.0;
            double t38333 = 1.0/pow(rho_a[index],4.0/3.0);
            double t38334 = 1.0/pow(rho_a[index],5.0/3.0);
            double t38335 = 1.0/sqrt(t38183);
            double t38336 = log(t38332);
            double t38337 = 1.0/t38196;
            double t38338 = 1.0/(t38193*t38193);
            double t38339 = b4p*t38334*t38186*(2.0/3.0);
            double t38340 = b2p*c*t38333*(1.0/3.0);
            double t38341 = b1p*c*t38333*t38335*(1.0/6.0);
            double t38342 = b3p*c*t38333*t38184*(1.0/2.0);
            double t38343 = t38340+t38341+t38342+t38339;
            double t38344 = t38343*t38337*t38338*t38199;
            double t38345 = c0f*t38324*t38336*2.0;
            double t38346 = c0p*t38197*t38199*2.0;
            double t38347 = Aa*t38302*t38312*t38205*t38322*t38314*t38252*2.0;
            double t38348 = 1.0/t38273;
            double t38349 = t38205*t38242*t38243*t38252*t38246*t38288*4.0;
            double t38350 = t38244+t38317;
            double t38351 = 1.0/t38284;
            double t38352 = 1.0/(t38281*t38281);
            double t38353 = b4f*t38292*t38186*(2.0/3.0);
            double t38354 = b2f*c*t38276*(1.0/3.0);
            double t38355 = b1f*c*t38293*t38276*(1.0/6.0);
            double t38356 = b3f*c*t38227*t38276*(1.0/2.0);
            double t38357 = t38353+t38354+t38355+t38356;
            double t38358 = a1f*c*c0f*t38276*t38285*(2.0/3.0);
            double t38359 = a1p*c*c0p*t38238*t38276*(2.0/3.0);
            double t38360 = t38315*t38247*4.0;
            double t38361 = t38350*t38316*(4.0/3.0);
            double t38396 = t38350*t38319*(4.0/3.0);
            double t38362 = t38361-t38396;
            double t38363 = 1.0/t38311;
            double t38364 = 1.0/(t38308*t38308);
            double t38365 = b4a*t38292*t38186*(2.0/3.0);
            double t38366 = b2a*c*t38276*(1.0/3.0);
            double t38367 = b1a*c*t38293*t38276*(1.0/6.0);
            double t38368 = b3a*c*t38227*t38276*(1.0/2.0);
            double t38369 = t38365+t38366+t38367+t38368;
            double t38370 = Aa*a1a*c*t38302*t38312*t38205*t38322*t38252*t38276*(2.0/3.0);
            double t38371 = a1f*c*t38207;
            double t38372 = t38371+1.0;
            double t38373 = b1f*t38209;
            double t38374 = b3f*t38210;
            double t38375 = b4f*t38211*t38186;
            double t38376 = b2f*c*t38207;
            double t38377 = t38373+t38374+t38375+t38376;
            double t38378 = 1.0/t38377;
            double t38379 = t38206*t38378*(1.0/2.0);
            double t38380 = t38379+1.0;
            double t38381 = 1.0/pow(rho_b[index],4.0/3.0);
            double t38382 = 1.0/pow(rho_b[index],5.0/3.0);
            double t38383 = 1.0/sqrt(t38208);
            double t38384 = log(t38380);
            double t38385 = 1.0/t38219;
            double t38386 = 1.0/(t38216*t38216);
            double t38387 = b4p*t38382*t38186*(2.0/3.0);
            double t38388 = b2p*c*t38381*(1.0/3.0);
            double t38389 = b1p*c*t38381*t38383*(1.0/6.0);
            double t38390 = b3p*c*t38209*t38381*(1.0/2.0);
            double t38391 = t38390+t38387+t38388+t38389;
            double t38392 = t38222*t38391*t38385*t38386;
            double t38393 = t38223-c0f*t38372*t38384*2.0;
            double t38394 = 1.0/pow(t38224,7.0/3.0);
            double t38395 = 1.0/pow(t38224,8.0/3.0);
            double t38413 = t38351*t38352*t38357*t38287;
            double t38398 = t38301-t38413+t38358-t38359;
            double t38399 = t38300*t38300;
            double t38400 = 1.0/pow(t38226,3.0/2.0);
            double t38401 = b4p*t38186*t38395*(1.0E1/9.0);
            double t38402 = b2p*c*t38394*(4.0/9.0);
            double t38403 = b1p*c*t38293*t38394*(2.0/9.0);
            double t38404 = b3p*c*t38227*t38394*(2.0/3.0);
            double t38405 = b3p*t38293*t38186*t38395*(1.0/1.2E1);
            double t38406 = t38401+t38402+t38403+t38404+t38405-b1p*t38400*t38186*t38395*(1.0/3.6E1);
            double t38407 = t38240*t38406*t38294*t38295;
            double t38408 = 1.0/(t38234*t38234*t38234);
            double t38409 = t38357*t38357;
            double t38410 = 1.0/(t38237*t38237);
            double t38411 = 1.0/(t38234*t38234*t38234*t38234);
            double t38412 = t38410*t38240*t38411*t38188*t38399*(1.0/2.0);
            double t38414 = 1.0/(t38224*t38224*t38224);
            double t38415 = a1p*c*t38300*t38276*t38294*t38295*(2.0/3.0);
            double t38416 = 1.0/(t38224*t38224*t38224*t38224*t38224*t38224);
            double t38417 = t38242*t38243*t38246*4.0;
            double t38418 = t38360+t38417;
            double t38419 = t38242*t38414*t38319*(8.0/3.0);
            double t38420 = 1.0/pow(t38248,2.0/3.0);
            double t38421 = t38420*t38350*t38291*(4.0/9.0);
            double t38422 = 1.0/pow(t38250,2.0/3.0);
            double t38423 = t38350*t38422*t38291*(4.0/9.0);
            double t38424 = t38421+t38423+t38419-t38242*t38414*t38316*(8.0/3.0);
            double t38425 = t38369*t38369;
            double t38426 = t38360-t38417;
            double t38427 = t38240*t38408*t38294*t38399*2.0;
            double t38428 = a1p*c*c0p*t38238*t38394*(8.0/9.0);
            double t38429 = t38205*t38362*t38246*t38247*t38288;
            v_rho_a_rho_b_[index] = -(ccab1*gamma_bb[index]*gcab*t38255*t38348*(4.0/3.0)-ccab2*t38261*t38270* \
               t38253*t38271-ccab1*gamma_bb[index]*t38260*t38253*t38255*t38274*(4.0/3.0)+ccab2*gamma_bb[index]*t38260* \
               t38253*t38255*t38275*(8.0/3.0))*(-t38241+t38346-t38347+t38224*(-t38301+t38370+t38349+t38359+t38205* \
               t38252*t38246*t38247*(t38301+t38358-t38351*t38352*t38357*t38287-a1p*c*c0p*t38238*t38276*(2.0/3.0)) \
               +t38320*t38205*t38246*t38247*t38288-t38205*t38252*t38315*t38247*t38288*4.0-Aa*t38302*t38320*t38312* \
               t38205*t38322*t38314*2.0+Aa*t38302*t38312*t38205*t38314*t38252*(t38360-t38242*t38243*t38246*4.0)*2.0- \
               t38302*t38205*t38322*t38314*t38252*t38363*t38364*t38369)-rho_a[index]*(-t38344+t38202*t38205*(t38344- \
               (t38324*1.0/(t38329*t38329)*(b2f*c*t38333*(1.0/3.0)+b4f*t38334*t38186*(2.0/3.0)+b1f*c*t38333*t38335* \
               (1.0/6.0)+b3f*c*t38333*t38184*(1.0/2.0)))/t38332+a1f*c*c0f*t38333*t38336*(2.0/3.0)-a1p*c*c0p*t38333* \
               t38197*(2.0/3.0))+a1p*c*c0p*t38333*t38197*(2.0/3.0))+t38202*t38205*(t38345-t38346)+t38205*t38252*t38246* \
               t38247*t38288)+(ccab1*gamma_aa[index]*gcab*t38254*t38348*(4.0/3.0)-ccab2*t38261*t38253*t38271*t38267- \
               ccab1*gamma_aa[index]*t38260*t38253*t38254*t38274*(4.0/3.0)+ccab2*gamma_aa[index]*t38260*t38253*t38254* \
               t38275*(8.0/3.0))*(-t38223+t38241+t38347+t38224*(t38301-t38370+t38429+t38349-t38359+t38205*t38252* \
               t38315*t38247*t38288*4.0-t38205*t38252*t38246*t38247*t38398-Aa*t38302*t38312*t38205*t38322*t38314* \
               t38362*2.0-Aa*t38302*t38312*t38205*t38314*t38252*t38418*2.0+t38302*t38205*t38322*t38314*t38252*t38363* \
               t38364*t38369)+rho_b[index]*(-t38392+t38202*t38205*(t38392-(t38372*1.0/(t38377*t38377)*(b2f*c*t38381* \
               (1.0/3.0)+b4f*t38382*t38186*(2.0/3.0)+b1f*c*t38381*t38383*(1.0/6.0)+b3f*c*t38209*t38381*(1.0/2.0)) \
               )/t38380+a1f*c*c0f*t38381*t38384*(2.0/3.0)-a1p*c*c0p*t38220*t38381*(2.0/3.0))+a1p*c*c0p*t38220*t38381* \
               (2.0/3.0))+t38202*t38205*t38393-t38205*t38252*t38246*t38247*(t38241-t38289))+(ccab0+ccab1*gcab*t38260* \
               t38348+ccab2*t38261*t38253*t38275)*(-t38429-t38224*(-t38412-t38415-t38407+t38427+t38428+t38205*t38252* \
               t38246*t38247*(t38412+t38415+t38407-t38427-t38428+t38351*1.0/(t38281*t38281*t38281)*t38409*t38287* \
               2.0-t38351*t38352*t38287*(b2f*c*t38394*(4.0/9.0)+b4f*t38186*t38395*(1.0E1/9.0)+b1f*c*t38293*t38394* \
               (2.0/9.0)+b3f*c*t38227*t38394*(2.0/3.0)-b1f*t38400*t38186*t38395*(1.0/3.6E1)+b3f*t38293*t38186*t38395* \
               (1.0/1.2E1))-t38206*1.0/(t38281*t38281*t38281*t38281)*t38409*1.0/(t38284*t38284)*t38287*(1.0/2.0)+ \
               a1f*c*c0f*t38285*t38394*(8.0/9.0)-a1f*c*t38351*t38352*t38276*t38357*(2.0/3.0))+t38320*t38205*t38315* \
               t38247*t38288*4.0+t38205*t38243*t38252*t38246*t38288*1.2E1-t38320*t38205*t38246*t38247*t38398+t38205* \
               t38252*t38315*t38247*t38398*8.0-t38205*t38252*t38416*t38247*t38288*2.0E1-t38205*t38315*t38362*t38247* \
               t38288*4.0+t38205*t38424*t38246*t38247*t38288+t38205*t38362*t38246*t38247*t38398+t38320*t38205*t38242* \
               t38243*t38246*t38288*4.0+t38205*t38242*t38243*t38362*t38246*t38288*4.0-Aa*t38302*t38312*t38205*t38322* \
               t38314*t38424*2.0-Aa*t38302*t38320*t38312*t38205*t38314*t38418*2.0+Aa*t38302*t38312*t38205*t38314* \
               t38362*t38426*2.0-Aa*t38302*t38312*t38205*t38314*t38252*(t38243*t38246*1.2E1-t38416*t38247*2.0E1)* \
               2.0+t38302*t38320*t38205*t38322*t38314*t38363*t38364*t38369-t38302*t38205*t38322*t38314*t38362*t38363* \
               t38364*t38369-t38302*t38205*t38314*t38252*t38363*t38426*t38364*t38369-t38302*t38205*t38314*t38252* \
               t38363*t38364*t38418*t38369+t38302*t38205*t38322*t38314*t38252*1.0/(t38308*t38308*t38308)*t38425*t38363* \
               2.0-t38302*t38205*t38322*t38314*t38252*t38363*t38364*(b2a*c*t38394*(4.0/9.0)+b4a*t38186*t38395*(1.0E1/ \
               9.0)+b1a*c*t38293*t38394*(2.0/9.0)+b3a*c*t38227*t38394*(2.0/3.0)-b1a*t38400*t38186*t38395*(1.0/3.6E1) \
               +b3a*t38293*t38186*t38395*(1.0/1.2E1))-Aa*a1a*c*t38302*t38320*t38312*t38205*t38322*t38276*(2.0/3.0) \
               +Aa*a1a*c*t38302*t38312*t38205*t38322*t38252*t38394*(8.0/9.0)+Aa*a1a*c*t38302*t38312*t38205*t38322* \
               t38362*t38276*(2.0/3.0)+Aa*a1a*c*t38302*t38312*t38205*t38252*t38426*t38276*(2.0/3.0)+Aa*a1a*c*t38302* \
               t38312*t38205*t38252*t38418*t38276*(2.0/3.0)-t38302*1.0/(t38311*t38311)*t38303*t38205*t38322*t38314* \
               t38252*1.0/(t38308*t38308*t38308*t38308)*t38425*(1.0/2.0)-a1a*c*t38302*t38205*t38322*t38252*t38363* \
               t38364*t38276*t38369*(2.0/3.0))-t38300*t38240*t38294*t38295*2.0+t38205*t38252*t38246*t38247*(t38301- \
               t38413+t38358-t38359)*2.0+a1p*c*c0p*t38238*t38276*(4.0/3.0)-t38205*t38252*t38315*t38247*t38288*8.0+ \
               t38320*t38205*t38246*t38247*(t38241-t38289)-Aa*t38302*t38320*t38312*t38205*t38322*t38314*2.0+Aa*t38302* \
               t38312*t38205*t38322*t38314*t38362*2.0+Aa*t38302*t38312*t38205*t38314*t38252*t38418*2.0+Aa*t38302* \
               t38312*t38205*t38314*t38252*(t38360-t38417)*2.0-t38302*t38205*t38322*t38314*t38252*t38363*t38364*t38369* \
               2.0+Aa*a1a*c*t38302*t38312*t38205*t38322*t38252*t38276*(4.0/3.0))-(rho_b[index]*(t38223-t38202*t38205* \
               t38393)+rho_a[index]*(t38346+t38202*t38205*(t38345-c0p*t38197*t38199*2.0))-t38224*(t38241+t38347-t38205* \
               t38252*t38246*t38247*t38288))*(ccab2*t38261*t38270*t38253*1.0/(t38264*t38264*t38264)*t38267*-2.0+ccab1* \
               gamma_aa[index]*gamma_bb[index]*t38253*t38254*t38255*t38274*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]* \
               t38253*t38254*t38255*t38275*(3.2E1/9.0)+ccab2*gamma_aa[index]*t38260*t38270*t38253*t38271*t38254*(8.0/ \
               3.0)+ccab2*gamma_bb[index]*t38260*t38253*t38271*t38255*t38267*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t38261*(t38253*t38253)*t38271*t38254*t38255*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab* \
               t38260*t38253*t38254*t38255*1.0/(t38273*t38273*t38273)*(3.2E1/9.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t38431 = 1.0/pow(rho_b[index],1.0/3.0);
            double t38432 = c*t38431;
            double t38433 = sqrt(t38432);
            double t38434 = pow(t38432,3.0/2.0);
            double t38435 = c*c;
            double t38436 = 1.0/pow(rho_b[index],2.0/3.0);
            double t38437 = 1.0/c0p;
            double t38438 = b1p*t38433;
            double t38439 = b3p*t38434;
            double t38440 = b4p*t38435*t38436;
            double t38441 = b2p*c*t38431;
            double t38442 = t38440+t38441+t38438+t38439;
            double t38443 = 1.0/t38442;
            double t38444 = t38443*t38437*(1.0/2.0);
            double t38445 = t38444+1.0;
            double t38446 = log(t38445);
            double t38447 = a1p*c*t38431;
            double t38448 = t38447+1.0;
            double t38449 = 1.0/pow(rho_b[index],8.0/3.0);
            double t38450 = gamma_bb[index]*gamma_bb[index];
            double t38451 = gcaa*gcaa;
            double t38452 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t38453 = gamma_bb[index]*gcaa*t38449;
            double t38454 = t38453+1.0;
            double t38455 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t38456 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t38457 = gamma_bb[index]*gcaa*t38449*2.0;
            double t38458 = t38450*t38451*t38455;
            double t38459 = t38457+t38458+1.0;
            double t38462 = 1.0/pow(rho_a[index],8.0/3.0);
            double t38463 = gamma_aa[index]*t38462*(1.0/2.0);
            double t38464 = gamma_bb[index]*t38449*(1.0/2.0);
            double t38460 = t38463+t38464;
            double t38461 = gcab*gcab;
            double t38465 = t38460*t38460;
            double t38466 = rho_a[index]+rho_b[index];
            double t38467 = 1.0/pow(t38466,1.0/3.0);
            double t38468 = c*t38467;
            double t38469 = sqrt(t38468);
            double t38470 = b1p*t38469;
            double t38471 = pow(t38468,3.0/2.0);
            double t38472 = b3p*t38471;
            double t38473 = 1.0/pow(t38466,2.0/3.0);
            double t38474 = b4p*t38435*t38473;
            double t38475 = b2p*c*t38467;
            double t38476 = t38470+t38472+t38474+t38475;
            double t38477 = 1.0/pow(t38466,7.0/3.0);
            double t38478 = 1.0/pow(t38466,8.0/3.0);
            double t38479 = 1.0/sqrt(t38468);
            double t38480 = a1p*c*t38467;
            double t38481 = t38480+1.0;
            double t38482 = 1.0/t38476;
            double t38483 = t38437*t38482*(1.0/2.0);
            double t38484 = t38483+1.0;
            double t38485 = 1.0/t38484;
            double t38486 = 1.0/pow(t38466,4.0/3.0);
            double t38526 = 1.0/pow(t38466,5.0/3.0);
            double t38528 = b4p*t38435*t38526*(2.0/3.0);
            double t38529 = b2p*c*t38486*(1.0/3.0);
            double t38530 = b1p*c*t38486*t38479*(1.0/6.0);
            double t38531 = b3p*c*t38486*t38469*(1.0/2.0);
            double t38487 = t38530+t38531+t38528+t38529;
            double t38488 = two_13*2.0;
            double t38489 = t38488-2.0;
            double t38490 = 1.0/t38489;
            double t38491 = 1.0/c0f;
            double t38492 = rho_a[index]-rho_b[index];
            double t38493 = 1.0/t38466;
            double t38494 = t38492*t38493;
            double t38495 = b1f*t38469;
            double t38496 = b3f*t38471;
            double t38497 = b4f*t38435*t38473;
            double t38498 = b2f*c*t38467;
            double t38499 = t38495+t38496+t38497+t38498;
            double t38500 = 1.0/t38499;
            double t38501 = t38500*t38491*(1.0/2.0);
            double t38502 = t38501+1.0;
            double t38503 = log(t38502);
            double t38504 = a1f*c*t38467;
            double t38505 = t38504+1.0;
            double t38506 = log(t38484);
            double t38514 = c0f*t38503*t38505*2.0;
            double t38515 = c0p*t38506*t38481*2.0;
            double t38507 = t38514-t38515;
            double t38508 = t38492*t38492;
            double t38509 = t38494+1.0;
            double t38510 = pow(t38509,4.0/3.0);
            double t38511 = -t38494+1.0;
            double t38512 = pow(t38511,4.0/3.0);
            double t38513 = t38510+t38512-2.0;
            double t38516 = 1.0/(t38466*t38466);
            double t38517 = t38516*t38492;
            double t38518 = t38517+t38493;
            double t38519 = 1.0/(t38466*t38466*t38466*t38466);
            double t38520 = pow(t38509,1.0/3.0);
            double t38521 = t38520*t38518*(4.0/3.0);
            double t38522 = pow(t38511,1.0/3.0);
            double t38555 = t38522*t38518*(4.0/3.0);
            double t38523 = t38521-t38555;
            double t38524 = 1.0/(t38466*t38466*t38466*t38466*t38466);
            double t38525 = t38508*t38508;
            double t38527 = 1.0/(t38476*t38476);
            double t38532 = 1.0/t38502;
            double t38533 = 1.0/(t38499*t38499);
            double t38534 = b4f*t38435*t38526*(2.0/3.0);
            double t38535 = b2f*c*t38486*(1.0/3.0);
            double t38536 = b1f*c*t38486*t38479*(1.0/6.0);
            double t38537 = b3f*c*t38486*t38469*(1.0/2.0);
            double t38538 = t38534+t38535+t38536+t38537;
            double t38539 = t38505*t38532*t38533*t38538;
            double t38540 = a1p*c*c0p*t38506*t38486*(2.0/3.0);
            double t38556 = t38481*t38527*t38485*t38487;
            double t38557 = a1f*c*c0f*t38503*t38486*(2.0/3.0);
            double t38541 = t38540-t38556+t38539-t38557;
            double t38542 = t38487*t38487;
            double t38543 = 1.0/pow(t38468,3.0/2.0);
            double t38544 = b4p*t38435*t38478*(1.0E1/9.0);
            double t38545 = b2p*c*t38477*(4.0/9.0);
            double t38546 = b1p*c*t38477*t38479*(2.0/9.0);
            double t38547 = b3p*c*t38477*t38469*(2.0/3.0);
            double t38548 = b3p*t38435*t38478*t38479*(1.0/1.2E1);
            double t38549 = t38544+t38545+t38546+t38547+t38548-b1p*t38435*t38543*t38478*(1.0/3.6E1);
            double t38550 = 1.0/(t38476*t38476*t38476);
            double t38551 = t38550*t38542*t38481*t38485*2.0;
            double t38552 = t38538*t38538;
            double t38553 = 1.0/(t38484*t38484);
            double t38554 = 1.0/(t38476*t38476*t38476*t38476);
            double t38558 = t38516*2.0;
            double t38559 = 1.0/(t38466*t38466*t38466);
            double t38560 = t38492*t38559*2.0;
            double t38561 = t38560+t38558;
            double t38562 = t38518*t38518;
            double t38563 = a1p*c*c0p*t38506*t38477*(8.0/9.0);
            double t38564 = 1.0/(t38466*t38466*t38466*t38466*t38466*t38466);
            double t38565 = 1.0/d2fz0;
            double t38566 = 1.0/Aa;
            double t38567 = b1a*t38469;
            double t38568 = b3a*t38471;
            double t38569 = b4a*t38435*t38473;
            double t38570 = b2a*c*t38467;
            double t38571 = t38570+t38567+t38568+t38569;
            double t38572 = 1.0/t38571;
            double t38573 = t38572*t38566*(1.0/2.0);
            double t38574 = t38573+1.0;
            double t38575 = log(t38574);
            double t38576 = a1a*c*t38467;
            double t38577 = t38576+1.0;
            double t38578 = t38520*t38561*(4.0/3.0);
            double t38579 = 1.0/pow(t38509,2.0/3.0);
            double t38580 = t38562*t38579*(4.0/9.0);
            double t38581 = 1.0/pow(t38511,2.0/3.0);
            double t38582 = t38562*t38581*(4.0/9.0);
            double t38583 = t38580+t38582+t38578-t38522*t38561*(4.0/3.0);
            double t38584 = t38508*t38492*t38519*4.0;
            double t38585 = t38524*t38525*4.0;
            double t38586 = t38584+t38585;
            double t38587 = 1.0/t38574;
            double t38588 = t38525*t38519;
            double t38589 = t38588-1.0;
            double t38590 = 1.0/(t38571*t38571);
            double t38591 = b4a*t38435*t38526*(2.0/3.0);
            double t38592 = b2a*c*t38486*(1.0/3.0);
            double t38593 = b1a*c*t38486*t38479*(1.0/6.0);
            double t38594 = b3a*c*t38486*t38469*(1.0/2.0);
            double t38595 = t38591+t38592+t38593+t38594;
            double t38596 = t38595*t38595;
            double t38597 = pow(2.0,1.0/3.0);
            double t38598 = t38597*2.0;
            double t38599 = t38598-2.0;
            double t38600 = a1f*c*t38431;
            double t38601 = t38600+1.0;
            double t38602 = b1f*t38433;
            double t38603 = b3f*t38434;
            double t38604 = b4f*t38435*t38436;
            double t38605 = b2f*c*t38431;
            double t38606 = t38602+t38603+t38604+t38605;
            double t38607 = 1.0/t38606;
            double t38608 = t38607*t38491*(1.0/2.0);
            double t38609 = t38608+1.0;
            double t38610 = 1.0/pow(rho_b[index],4.0/3.0);
            double t38612 = 1.0/pow(rho_b[index],5.0/3.0);
            double t38613 = 1.0/sqrt(t38432);
            double t38619 = b4f*t38612*t38435*(2.0/3.0);
            double t38620 = b2f*c*t38610*(1.0/3.0);
            double t38621 = b1f*c*t38610*t38613*(1.0/6.0);
            double t38622 = b3f*c*t38610*t38433*(1.0/2.0);
            double t38611 = t38620+t38621+t38622+t38619;
            double t38624 = b4p*t38612*t38435*(2.0/3.0);
            double t38625 = b2p*c*t38610*(1.0/3.0);
            double t38626 = b1p*c*t38610*t38613*(1.0/6.0);
            double t38627 = b3p*c*t38610*t38433*(1.0/2.0);
            double t38614 = t38624+t38625+t38626+t38627;
            double t38615 = 1.0/t38609;
            double t38616 = 1.0/pow(rho_b[index],7.0/3.0);
            double t38617 = 1.0/t38445;
            double t38618 = 1.0/pow(t38432,3.0/2.0);
            double t38623 = t38611*t38611;
            double t38628 = t38614*t38614;
            double t38629 = log(t38609);
            double t38630 = 1.0/(t38606*t38606);
            double t38631 = 1.0/(t38442*t38442);
            double t38632 = 1.0/(t38442*t38442*t38442);
            double t38633 = t38632*t38617*t38448*t38628*2.0;
            double t38634 = b4p*t38435*t38449*(1.0E1/9.0);
            double t38635 = b2p*c*t38616*(4.0/9.0);
            double t38636 = b3p*t38613*t38435*t38449*(1.0/1.2E1);
            double t38637 = b1p*c*t38613*t38616*(2.0/9.0);
            double t38638 = b3p*c*t38433*t38616*(2.0/3.0);
            double t38711 = b1p*t38435*t38618*t38449*(1.0/3.6E1);
            double t38639 = -t38711+t38634+t38635+t38636+t38637+t38638;
            double t38640 = 1.0/(t38445*t38445);
            double t38641 = 1.0/(t38442*t38442*t38442*t38442);
            double t38642 = a1p*c*c0p*t38616*t38446*(8.0/9.0);
            double t38643 = gcab*t38460;
            double t38644 = t38643+1.0;
            double t38645 = 1.0/t38644;
            double t38646 = t38461*t38465;
            double t38647 = gcab*t38460*2.0;
            double t38648 = t38646+t38647+1.0;
            double t38649 = 1.0/t38648;
            double t38650 = t38601*t38611*t38630*t38615;
            double t38651 = a1p*c*c0p*t38610*t38446*(2.0/3.0);
            double t38653 = t38631*t38614*t38617*t38448;
            double t38656 = a1f*c*c0f*t38610*t38629*(2.0/3.0);
            double t38652 = t38650+t38651-t38653-t38656;
            double t38654 = c0f*t38601*t38629*2.0;
            double t38655 = c0p*t38446*t38448*2.0;
            double t38657 = t38490*t38652*t38599;
            double t38658 = -t38651+t38653+t38657;
            double t38659 = 1.0/t38454;
            double t38660 = 1.0/t38459;
            double t38661 = 1.0/pow(rho_a[index],1.0/3.0);
            double t38662 = c*t38661;
            double t38663 = sqrt(t38662);
            double t38664 = pow(t38662,3.0/2.0);
            double t38665 = 1.0/pow(rho_a[index],2.0/3.0);
            double t38666 = b1p*t38663;
            double t38667 = b3p*t38664;
            double t38668 = b4p*t38435*t38665;
            double t38669 = b2p*c*t38661;
            double t38670 = t38666+t38667+t38668+t38669;
            double t38671 = 1.0/t38670;
            double t38672 = t38437*t38671*(1.0/2.0);
            double t38673 = t38672+1.0;
            double t38674 = log(t38673);
            double t38675 = a1p*c*t38661;
            double t38676 = t38675+1.0;
            double t38677 = c0p*t38674*t38676*2.0;
            double t38678 = t38654-t38655;
            double t38679 = t38490*t38678*t38599;
            double t38680 = 1.0/(t38644*t38644);
            double t38681 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t38682 = gamma_bb[index]*gcab*t38456*(8.0/3.0);
            double t38683 = gamma_bb[index]*t38460*t38461*t38456*(8.0/3.0);
            double t38684 = t38682+t38683;
            double t38685 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t38686 = 1.0/(t38648*t38648);
            double t38687 = gx*gx;
            double t38688 = gamma_bb[index]*gx*t38449;
            double t38689 = t38688+1.0;
            double t38694 = gamma_bb[index]*gx*t38456*(1.6E1/3.0);
            double t38695 = t38450*t38452*t38687*(1.6E1/3.0);
            double t38690 = t38694+t38695;
            double t38691 = gamma_bb[index]*gx*t38449*2.0;
            double t38692 = t38450*t38455*t38687;
            double t38693 = t38691+t38692+1.0;
            double t38696 = 1.0/(t38693*t38693);
            double t38697 = 1.0/t38689;
            double t38698 = 1.0/t38693;
            double t38699 = 1.0/(t38689*t38689);
            double t38700 = ccaa1*gamma_bb[index]*gcaa*t38449*t38659;
            double t38701 = ccaa2*t38450*t38451*t38660*t38455;
            double t38702 = ccaa0+t38700+t38701;
            double t38703 = 1.0/(t38606*t38606*t38606);
            double t38704 = b4f*t38435*t38449*(1.0E1/9.0);
            double t38705 = b2f*c*t38616*(4.0/9.0);
            double t38706 = b3f*t38613*t38435*t38449*(1.0/1.2E1);
            double t38707 = b1f*c*t38613*t38616*(2.0/9.0);
            double t38708 = b3f*c*t38433*t38616*(2.0/3.0);
            double t38709 = t38704+t38705+t38706+t38707+t38708-b1f*t38435*t38618*t38449*(1.0/3.6E1);
            double t38710 = t38601*t38630*t38615*t38709;
            double t38712 = t38631*t38617*t38448*t38639;
            double t38713 = 1.0/(t38609*t38609);
            double t38714 = 1.0/(t38606*t38606*t38606*t38606);
            double t38715 = t38601*t38623*t38713*t38714*t38491*(1.0/2.0);
            double t38716 = t38640*t38641*t38437*t38448*t38628*(1.0/2.0);
            double t38717 = a1f*c*t38610*t38611*t38630*t38615*(2.0/3.0);
            double t38718 = a1p*c*t38610*t38631*t38614*t38617*(2.0/3.0);
            double t38719 = t38655+t38679;
            double t38720 = 1.0/pow(rho_b[index],1.0E1);
            double t38721 = 1.0/(t38454*t38454);
            double t38722 = gamma_bb[index]*gcaa*t38456*(1.6E1/3.0);
            double t38723 = t38450*t38451*t38452*(1.6E1/3.0);
            double t38724 = t38722+t38723;
            double t38725 = 1.0/(t38459*t38459);
            double t38726 = ccaa1*gamma_bb[index]*gcaa*t38456*t38659*(8.0/3.0);
            double t38727 = ccaa2*t38450*t38451*t38452*t38660*(1.6E1/3.0);
            double t38728 = t38726+t38727-ccaa1*t38450*t38451*t38721*t38452*(8.0/3.0)-ccaa2*t38450*t38451*t38724* \
               t38455*t38725;
            v_rho_b_rho_b_[index] = t38702*t38658*-2.0+t38728*(t38655+t38490*t38599*(t38654-c0p*t38446*t38448* \
               2.0))*2.0-(ccab1*gamma_bb[index]*gcab*t38456*t38645*(4.0/3.0)-ccab2*t38461*t38465*t38684*t38686-ccab1* \
               gamma_bb[index]*t38460*t38461*t38680*t38456*(4.0/3.0)+ccab2*gamma_bb[index]*t38460*t38461*t38456*t38649* \
               (8.0/3.0))*(-t38515+t38655+t38679+rho_b[index]*t38658+t38466*(t38540-t38556+t38513*t38524*t38507*t38525* \
               t38490*4.0-t38513*t38541*t38525*t38490*t38519+t38523*t38507*t38525*t38490*t38519+t38513*t38507*t38490* \
               t38508*t38492*t38519*4.0+Aa*t38513*t38490*t38565*t38575*t38577*t38586*2.0+Aa*t38523*t38490*t38565* \
               t38575*t38577*t38589*2.0-t38513*t38490*t38590*t38565*t38577*t38595*t38587*t38589+Aa*a1a*c*t38513*t38490* \
               t38565*t38575*t38486*t38589*(2.0/3.0))-t38513*t38507*t38525*t38490*t38519-Aa*t38513*t38490*t38565* \
               t38575*t38577*t38589*2.0)*2.0+(rho_b[index]*t38719+rho_a[index]*(t38677-t38490*t38599*(t38677-c0f* \
               log((t38491*(1.0/2.0))/(b1f*t38663+b3f*t38664+b2f*c*t38661+b4f*t38435*t38665)+1.0)*(a1f*c*t38661+1.0) \
               *2.0))-t38466*(t38515+t38513*t38507*t38525*t38490*t38519+Aa*t38513*t38490*t38565*t38575*t38577*t38589* \
               2.0))*(-ccab2*t38461*t38465*t38686*(gamma_bb[index]*gcab*t38685*(8.8E1/9.0)+t38450*t38461*t38681*(3.2E1/ \
               9.0)+gamma_bb[index]*t38460*t38461*t38685*(8.8E1/9.0))+ccab2*t38461*t38465*1.0/(t38648*t38648*t38648) \
               *(t38684*t38684)*2.0+ccab1*gamma_bb[index]*gcab*t38645*t38685*(4.4E1/9.0)-ccab1*t38450*t38461*t38680* \
               t38681*(3.2E1/9.0)+ccab2*t38450*t38461*t38681*t38649*(3.2E1/9.0)-ccab1*gamma_bb[index]*t38460*t38461* \
               t38680*t38685*(4.4E1/9.0)+ccab2*gamma_bb[index]*t38460*t38461*t38649*t38685*(8.8E1/9.0)-ccab2*gamma_bb[index]* \
               t38460*t38461*t38456*t38684*t38686*(1.6E1/3.0)+ccab1*gcab*t38450*t38460*t38461*1.0/(t38644*t38644* \
               t38644)*t38681*(3.2E1/9.0))+(ccab0+ccab1*gcab*t38460*t38645+ccab2*t38461*t38465*t38649)*(-rho_b[index]* \
               (t38712-t38633-t38642+t38716+t38718+t38490*t38599*(t38710+t38633+t38642+t38715+t38717-t38601*t38703* \
               t38623*t38615*2.0-t38631*t38617*t38448*t38639-a1f*c*c0f*t38616*t38629*(8.0/9.0)-t38640*t38641*t38437* \
               t38448*t38628*(1.0/2.0)-a1p*c*t38610*t38631*t38614*t38617*(2.0/3.0)))-t38466*(t38551+t38563-t38481* \
               t38527*t38485*t38549-t38513*t38525*t38490*t38519*(t38551+t38563-t38481*t38527*t38485*t38549-t38505* \
               t38532*t38552*1.0/(t38499*t38499*t38499)*2.0+t38505*t38532*t38533*(b2f*c*t38477*(4.0/9.0)+b4f*t38435* \
               t38478*(1.0E1/9.0)+b1f*c*t38477*t38479*(2.0/9.0)+b3f*c*t38477*t38469*(2.0/3.0)-b1f*t38435*t38543*t38478* \
               (1.0/3.6E1)+b3f*t38435*t38478*t38479*(1.0/1.2E1))+1.0/(t38502*t38502)*t38505*t38552*t38491*1.0/(t38499* \
               t38499*t38499*t38499)*(1.0/2.0)-a1f*c*c0f*t38503*t38477*(8.0/9.0)-t38542*t38481*t38553*t38437*t38554* \
               (1.0/2.0)+a1f*c*t38532*t38533*t38538*t38486*(2.0/3.0)-a1p*c*t38527*t38485*t38486*t38487*(2.0/3.0)) \
               -t38513*t38541*t38524*t38525*t38490*8.0+t38523*t38524*t38507*t38525*t38490*8.0-t38523*t38541*t38525* \
               t38490*t38519*2.0+t38513*t38507*t38525*t38490*t38564*2.0E1+t38513*t38507*t38490*t38508*t38519*1.2E1- \
               t38542*t38481*t38553*t38437*t38554*(1.0/2.0)+t38507*t38525*t38490*t38519*t38583+t38513*t38524*t38507* \
               t38490*t38508*t38492*3.2E1-t38513*t38541*t38490*t38508*t38492*t38519*8.0+t38523*t38507*t38490*t38508* \
               t38492*t38519*8.0-a1p*c*t38527*t38485*t38486*t38487*(2.0/3.0)+Aa*t38523*t38490*t38565*t38575*t38577* \
               t38586*4.0+Aa*t38490*t38565*t38583*t38575*t38577*t38589*2.0+Aa*t38513*t38490*t38565*t38575*t38577* \
               (t38525*t38564*2.0E1+t38508*t38519*1.2E1+t38524*t38508*t38492*3.2E1)*2.0-t38513*t38490*t38590*t38565* \
               t38577*t38586*t38595*t38587*2.0-t38523*t38490*t38590*t38565*t38577*t38595*t38587*t38589*2.0+t38513* \
               t38490*1.0/(t38571*t38571*t38571)*t38565*t38577*t38587*t38596*t38589*2.0-t38513*t38490*t38590*t38565* \
               t38577*t38587*t38589*(b2a*c*t38477*(4.0/9.0)+b4a*t38435*t38478*(1.0E1/9.0)+b1a*c*t38477*t38479*(2.0/ \
               9.0)+b3a*c*t38477*t38469*(2.0/3.0)-b1a*t38435*t38543*t38478*(1.0/3.6E1)+b3a*t38435*t38478*t38479*(1.0/ \
               1.2E1))+Aa*a1a*c*t38513*t38490*t38565*t38575*t38486*t38586*(4.0/3.0)+Aa*a1a*c*t38513*t38490*t38565* \
               t38575*t38477*t38589*(8.0/9.0)+Aa*a1a*c*t38523*t38490*t38565*t38575*t38486*t38589*(4.0/3.0)-t38513* \
               t38490*1.0/(t38571*t38571*t38571*t38571)*t38565*1.0/(t38574*t38574)*t38566*t38577*t38596*t38589*(1.0/ \
               2.0)-a1a*c*t38513*t38490*t38590*t38565*t38486*t38595*t38587*t38589*(2.0/3.0))+t38490*t38652*t38599* \
               2.0+t38631*t38614*t38617*t38448*2.0-t38481*t38527*t38485*t38487*2.0-a1p*c*c0p*t38610*t38446*(4.0/3.0) \
               +a1p*c*c0p*t38506*t38486*(4.0/3.0)+t38513*t38524*t38507*t38525*t38490*8.0-t38513*t38541*t38525*t38490* \
               t38519*2.0+t38523*t38507*t38525*t38490*t38519*2.0+t38513*t38507*t38490*t38508*t38492*t38519*8.0+Aa* \
               t38513*t38490*t38565*t38575*t38577*t38586*4.0+Aa*t38523*t38490*t38565*t38575*t38577*t38589*4.0-t38513* \
               t38490*t38590*t38565*t38577*t38595*t38587*t38589*2.0+Aa*a1a*c*t38513*t38490*t38565*t38575*t38486*t38589* \
               (4.0/3.0))+c0*t38436*(cx0+cx1*gamma_bb[index]*gx*t38449*t38697+cx2*t38450*t38455*t38687*t38698)*(4.0/ \
               9.0)-rho_b[index]*t38719*(ccaa1*gamma_bb[index]*gcaa*t38685*t38659*(8.8E1/9.0)-ccaa1*t38450*t38451* \
               t38721*t38681*2.4E1+ccaa2*t38450*t38451*t38660*t38681*(3.04E2/9.0)-ccaa2*t38450*t38451*t38452*t38724* \
               t38725*(3.2E1/3.0)-ccaa2*t38450*t38451*t38455*t38725*(gamma_bb[index]*gcaa*t38685*(1.76E2/9.0)+t38450* \
               t38451*t38681*(3.04E2/9.0))+ccaa2*t38450*t38451*(t38724*t38724)*t38455*1.0/(t38459*t38459*t38459)* \
               2.0+ccaa1*gamma_bb[index]*gcaa*t38450*t38720*t38451*1.0/(t38454*t38454*t38454)*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t38685*t38697*(8.8E1/9.0)-cx1*t38450*t38681*t38687*t38699*2.4E1+cx2*t38450* \
               t38681*t38687*t38698*(3.04E2/9.0)-cx2*t38450*t38452*t38690*t38687*t38696*(3.2E1/3.0)-cx2*t38450*t38455* \
               t38687*t38696*(gamma_bb[index]*gx*t38685*(1.76E2/9.0)+t38450*t38681*t38687*(3.04E2/9.0))+cx2*t38450* \
               t38455*(t38690*t38690)*1.0/(t38693*t38693*t38693)*t38687*2.0+cx1*gamma_bb[index]*gx*t38450*t38720* \
               t38687*1.0/(t38689*t38689*t38689)*(1.28E2/9.0))-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t38456*t38697*(8.0/3.0)-cx1*t38450*t38452*t38687*t38699*(8.0/3.0)+cx2*t38450*t38452*t38687*t38698* \
               (1.6E1/3.0)-cx2*t38450*t38455*t38690*t38687*t38696)*(8.0/3.0)+rho_b[index]*t38702*(t38712-t38633-t38642+ \
               t38716+t38718+t38490*t38599*(t38710-t38712+t38633+t38642+t38715-t38716+t38717-t38718-t38601*t38703* \
               t38623*t38615*2.0-a1f*c*c0f*t38616*t38629*(8.0/9.0)))+rho_b[index]*t38728*t38658*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t39998 = 1.0/pow(rho_b[index],1.0/3.0);
            double t39999 = c*t39998;
            double t40000 = sqrt(t39999);
            double t40001 = pow(t39999,3.0/2.0);
            double t40002 = c*c;
            double t40003 = 1.0/pow(rho_b[index],2.0/3.0);
            double t40004 = 1.0/c0p;
            double t40005 = b1p*t40000;
            double t40006 = b3p*t40001;
            double t40007 = b4p*t40002*t40003;
            double t40008 = b2p*c*t39998;
            double t40009 = t40005+t40006+t40007+t40008;
            double t40010 = 1.0/t40009;
            double t40011 = t40010*t40004*(1.0/2.0);
            double t40012 = t40011+1.0;
            double t40013 = log(t40012);
            double t40014 = a1p*c*t39998;
            double t40015 = t40014+1.0;
            double t40016 = 1.0/pow(rho_b[index],8.0/3.0);
            double t40017 = gamma_bb[index]*gamma_bb[index];
            double t40018 = gcaa*gcaa;
            double t40019 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t40020 = gamma_bb[index]*gcaa*t40016;
            double t40021 = t40020+1.0;
            double t40022 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t40023 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t40024 = gamma_bb[index]*gcaa*t40016*2.0;
            double t40025 = t40022*t40017*t40018;
            double t40026 = t40024+t40025+1.0;
            double t40027 = pow(2.0,1.0/3.0);
            double t40028 = t40027*2.0;
            double t40029 = t40028-2.0;
            double t40030 = two_13*2.0;
            double t40031 = t40030-2.0;
            double t40032 = 1.0/t40031;
            double t40033 = a1f*c*t39998;
            double t40034 = t40033+1.0;
            double t40035 = 1.0/c0f;
            double t40036 = b1f*t40000;
            double t40037 = b3f*t40001;
            double t40038 = b4f*t40002*t40003;
            double t40039 = b2f*c*t39998;
            double t40040 = t40036+t40037+t40038+t40039;
            double t40041 = 1.0/t40040;
            double t40042 = t40041*t40035*(1.0/2.0);
            double t40043 = t40042+1.0;
            double t40044 = 1.0/pow(rho_b[index],4.0/3.0);
            double t40045 = 1.0/pow(rho_b[index],5.0/3.0);
            double t40046 = 1.0/sqrt(t39999);
            double t40047 = log(t40043);
            double t40048 = 1.0/t40012;
            double t40049 = 1.0/(t40009*t40009);
            double t40050 = b4p*t40002*t40045*(2.0/3.0);
            double t40051 = b2p*c*t40044*(1.0/3.0);
            double t40052 = b1p*c*t40044*t40046*(1.0/6.0);
            double t40053 = b3p*c*t40000*t40044*(1.0/2.0);
            double t40054 = t40050+t40051+t40052+t40053;
            double t40055 = t40015*t40054*t40048*t40049;
            double t40056 = 1.0/t40021;
            double t40057 = 1.0/t40026;
            double t40058 = gx*gx;
            double t40059 = gamma_bb[index]*gx*t40016;
            double t40060 = t40059+1.0;
            double t40061 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t40066 = gamma_bb[index]*gx*t40023*(1.6E1/3.0);
            double t40067 = t40017*t40019*t40058*(1.6E1/3.0);
            double t40062 = t40066+t40067;
            double t40063 = gamma_bb[index]*gx*t40016*2.0;
            double t40064 = t40022*t40017*t40058;
            double t40065 = t40063+t40064+1.0;
            double t40068 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t40069 = 1.0/(t40065*t40065);
            double t40070 = 1.0/t40060;
            double t40071 = 1.0/t40065;
            double t40072 = 1.0/(t40060*t40060);
            double t40073 = ccaa1*gamma_bb[index]*gcaa*t40016*t40056;
            double t40074 = ccaa2*t40022*t40017*t40018*t40057;
            double t40075 = ccaa0+t40073+t40074;
            double t40076 = 1.0/t40043;
            double t40077 = b4f*t40002*t40045*(2.0/3.0);
            double t40078 = b2f*c*t40044*(1.0/3.0);
            double t40079 = b1f*c*t40044*t40046*(1.0/6.0);
            double t40080 = b3f*c*t40000*t40044*(1.0/2.0);
            double t40081 = t40080+t40077+t40078+t40079;
            double t40082 = 1.0/(t40040*t40040);
            double t40083 = 1.0/pow(rho_b[index],7.0/3.0);
            double t40084 = 1.0/pow(t39999,3.0/2.0);
            double t40085 = t40081*t40081;
            double t40086 = t40054*t40054;
            double t40087 = 1.0/(t40009*t40009*t40009);
            double t40088 = t40015*t40048*t40086*t40087*2.0;
            double t40089 = b4p*t40002*t40016*(1.0E1/9.0);
            double t40090 = b2p*c*t40083*(4.0/9.0);
            double t40091 = b3p*t40002*t40016*t40046*(1.0/1.2E1);
            double t40092 = b1p*c*t40046*t40083*(2.0/9.0);
            double t40093 = b3p*c*t40000*t40083*(2.0/3.0);
            double t40094 = t40090+t40091+t40092+t40093+t40089-b1p*t40002*t40016*t40084*(1.0/3.6E1);
            double t40095 = 1.0/(t40012*t40012);
            double t40096 = 1.0/(t40009*t40009*t40009*t40009);
            double t40097 = a1p*c*c0p*t40013*t40083*(8.0/9.0);
            double t40098 = c0f*t40034*t40047*2.0;
            double t40099 = c0p*t40013*t40015*2.0;
            double t40100 = 1.0/pow(rho_b[index],1.0E1);
            double t40101 = 1.0/(t40021*t40021);
            double t40102 = gamma_bb[index]*gcaa*t40023*(1.6E1/3.0);
            double t40103 = t40017*t40018*t40019*(1.6E1/3.0);
            double t40104 = t40102+t40103;
            double t40105 = 1.0/(t40026*t40026);
            double t40106 = a1f*c*c0f*t40044*t40047*(2.0/3.0);
            double t40107 = a1p*c*c0p*t40013*t40044*(2.0/3.0);
            double t40108 = ccaa1*gamma_bb[index]*gcaa*t40023*t40056*(8.0/3.0);
            double t40109 = ccaa2*t40017*t40018*t40019*t40057*(1.6E1/3.0);
            double t40110 = t40108+t40109-ccaa1*t40101*t40017*t40018*t40019*(8.0/3.0)-ccaa2*t40022*t40104*t40105* \
               t40017*t40018;
            v_rho_b_rho_b_[index] = t40110*(t40099+t40032*t40029*(t40098-c0p*t40013*t40015*2.0))*2.0+t40075*(t40107- \
               t40055+t40032*t40029*(t40106+t40055-t40034*t40081*t40082*t40076-a1p*c*c0p*t40013*t40044*(2.0/3.0)) \
               )*2.0+c0*t40003*(cx0+cx1*gamma_bb[index]*gx*t40016*t40070+cx2*t40022*t40017*t40071*t40058)*(4.0/9.0) \
               -rho_b[index]*(t40099+t40032*t40029*(t40098-t40099))*(ccaa1*gamma_bb[index]*gcaa*t40056*t40068*(8.8E1/ \
               9.0)-ccaa1*t40101*t40061*t40017*t40018*2.4E1+ccaa2*t40061*t40017*t40018*t40057*(3.04E2/9.0)-ccaa2* \
               t40104*t40105*t40017*t40018*t40019*(3.2E1/3.0)-ccaa2*t40022*t40105*t40017*t40018*(gamma_bb[index]* \
               gcaa*t40068*(1.76E2/9.0)+t40061*t40017*t40018*(3.04E2/9.0))+ccaa2*t40022*(t40104*t40104)*t40017*1.0/ \
               (t40026*t40026*t40026)*t40018*2.0+ccaa1*gamma_bb[index]*gcaa*t40100*1.0/(t40021*t40021*t40021)*t40017* \
               t40018*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t40070*t40068*(8.8E1/9.0) \
               -cx1*t40061*t40017*t40072*t40058*2.4E1+cx2*t40061*t40017*t40071*t40058*(3.04E2/9.0)-cx2*t40017*t40062* \
               t40019*t40058*t40069*(3.2E1/3.0)-cx2*t40022*t40017*t40058*t40069*(gamma_bb[index]*gx*t40068*(1.76E2/ \
               9.0)+t40061*t40017*t40058*(3.04E2/9.0))+cx2*t40022*t40017*(t40062*t40062)*1.0/(t40065*t40065*t40065) \
               *t40058*2.0+cx1*gamma_bb[index]*gx*t40100*1.0/(t40060*t40060*t40060)*t40017*t40058*(1.28E2/9.0))+rho_b[index]* \
               t40075*(-t40088-t40097+t40032*t40029*(t40088+t40097-t40015*t40048*t40049*t40094-1.0/(t40040*t40040* \
               t40040)*t40034*t40076*t40085*2.0+t40034*t40082*t40076*(b2f*c*t40083*(4.0/9.0)+b4f*t40002*t40016*(1.0E1/ \
               9.0)+b1f*c*t40046*t40083*(2.0/9.0)+b3f*c*t40000*t40083*(2.0/3.0)-b1f*t40002*t40016*t40084*(1.0/3.6E1) \
               +b3f*t40002*t40016*t40046*(1.0/1.2E1))+1.0/(t40040*t40040*t40040*t40040)*t40034*1.0/(t40043*t40043) \
               *t40035*t40085*(1.0/2.0)-a1f*c*c0f*t40047*t40083*(8.0/9.0)-t40004*t40015*t40086*t40095*t40096*(1.0/ \
               2.0)+a1f*c*t40044*t40081*t40082*t40076*(2.0/3.0)-a1p*c*t40044*t40054*t40048*t40049*(2.0/3.0))+t40015* \
               t40048*t40049*t40094+t40004*t40015*t40086*t40095*t40096*(1.0/2.0)+a1p*c*t40044*t40054*t40048*t40049* \
               (2.0/3.0))-rho_b[index]*t40110*(t40107-t40055+t40032*t40029*(t40106-t40107+t40055-t40034*t40081*t40082* \
               t40076))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t40023*t40070*(8.0/3.0)-cx1*t40017* \
               t40072*t40019*t40058*(8.0/3.0)+cx2*t40017*t40071*t40019*t40058*(1.6E1/3.0)-cx2*t40022*t40017*t40062* \
               t40058*t40069)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t38730 = 1.0/pow(rho_a[index],1.0/3.0);
                double t38731 = c*t38730;
                double t38732 = sqrt(t38731);
                double t38733 = pow(t38731,3.0/2.0);
                double t38734 = c*c;
                double t38735 = 1.0/pow(rho_a[index],2.0/3.0);
                double t38736 = 1.0/c0p;
                double t38737 = b1p*t38732;
                double t38738 = b3p*t38733;
                double t38739 = b4p*t38734*t38735;
                double t38740 = b2p*c*t38730;
                double t38741 = t38740+t38737+t38738+t38739;
                double t38742 = 1.0/t38741;
                double t38743 = t38742*t38736*(1.0/2.0);
                double t38744 = t38743+1.0;
                double t38745 = log(t38744);
                double t38746 = a1p*c*t38730;
                double t38747 = t38746+1.0;
                double t38748 = pow(2.0,1.0/3.0);
                double t38749 = t38748*2.0;
                double t38750 = t38749-2.0;
                double t38751 = two_13*2.0;
                double t38752 = t38751-2.0;
                double t38753 = 1.0/t38752;
                double t38754 = 1.0/c0f;
                double t38755 = 1.0/pow(rho_b[index],1.0/3.0);
                double t38756 = c*t38755;
                double t38757 = sqrt(t38756);
                double t38758 = pow(t38756,3.0/2.0);
                double t38759 = 1.0/pow(rho_b[index],2.0/3.0);
                double t38760 = b1p*t38757;
                double t38761 = b3p*t38758;
                double t38762 = b4p*t38734*t38759;
                double t38763 = b2p*c*t38755;
                double t38764 = t38760+t38761+t38762+t38763;
                double t38765 = 1.0/t38764;
                double t38766 = t38736*t38765*(1.0/2.0);
                double t38767 = t38766+1.0;
                double t38768 = log(t38767);
                double t38769 = a1p*c*t38755;
                double t38770 = t38769+1.0;
                double t38771 = c0p*t38770*t38768*2.0;
                double t38772 = rho_a[index]+rho_b[index];
                double t38773 = 1.0/pow(t38772,1.0/3.0);
                double t38774 = c*t38773;
                double t38775 = sqrt(t38774);
                double t38776 = pow(t38774,3.0/2.0);
                double t38777 = 1.0/pow(t38772,2.0/3.0);
                double t38778 = b1p*t38775;
                double t38779 = b3p*t38776;
                double t38780 = b4p*t38734*t38777;
                double t38781 = b2p*c*t38773;
                double t38782 = t38780+t38781+t38778+t38779;
                double t38783 = 1.0/t38782;
                double t38784 = t38736*t38783*(1.0/2.0);
                double t38785 = t38784+1.0;
                double t38786 = log(t38785);
                double t38787 = a1p*c*t38773;
                double t38788 = t38787+1.0;
                double t38789 = c0p*t38786*t38788*2.0;
                double t38790 = rho_a[index]-rho_b[index];
                double t38791 = t38790*t38790;
                double t38792 = 1.0/t38772;
                double t38793 = t38790*t38792;
                double t38794 = 1.0/(t38772*t38772*t38772*t38772);
                double t38795 = t38791*t38791;
                double t38796 = t38793+1.0;
                double t38797 = pow(t38796,4.0/3.0);
                double t38798 = -t38793+1.0;
                double t38799 = pow(t38798,4.0/3.0);
                double t38800 = t38797+t38799-2.0;
                double t38801 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t38802 = 1.0/pow(rho_a[index],8.0/3.0);
                double t38803 = gamma_aa[index]*t38802*(1.0/2.0);
                double t38804 = 1.0/pow(rho_b[index],8.0/3.0);
                double t38805 = gamma_bb[index]*t38804*(1.0/2.0);
                double t38806 = t38803+t38805;
                double t38807 = gcab*t38806;
                double t38808 = t38807+1.0;
                double t38809 = gcab*gcab;
                double t38810 = t38806*t38806;
                double t38811 = t38810*t38809;
                double t38812 = gcab*t38806*2.0;
                double t38813 = t38811+t38812+1.0;
                double t38814 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t38815 = 1.0/(t38808*t38808);
                double t38816 = 1.0/t38813;
                double t38817 = 1.0/(t38813*t38813);
                double t38818 = gamma_aa[index]*gcab*t38801*(8.0/3.0);
                double t38819 = gamma_aa[index]*t38801*t38806*t38809*(8.0/3.0);
                double t38820 = t38818+t38819;
                double t38821 = gcab*t38802;
                double t38822 = t38802*t38806*t38809;
                double t38823 = t38821+t38822;
                double t38824 = b1f*t38732;
                double t38825 = b3f*t38733;
                double t38826 = b4f*t38734*t38735;
                double t38827 = b2f*c*t38730;
                double t38828 = t38824+t38825+t38826+t38827;
                double t38829 = 1.0/t38828;
                double t38830 = t38754*t38829*(1.0/2.0);
                double t38831 = t38830+1.0;
                double t38832 = log(t38831);
                double t38833 = a1f*c*t38730;
                double t38834 = t38833+1.0;
                double t38835 = c0f*t38832*t38834*2.0;
                double t38836 = c0p*t38745*t38747*2.0;
                double t38837 = gcaa*gcaa;
                double t38838 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t38839 = gamma_aa[index]*gcaa*t38802;
                double t38840 = t38839+1.0;
                double t38841 = gamma_aa[index]*gamma_aa[index];
                double t38842 = gamma_aa[index]*gcaa*t38802*2.0;
                double t38843 = t38841*t38837*t38838;
                double t38844 = t38842+t38843+1.0;
                double t38845 = 1.0/t38808;
                double t38846 = 1.0/pow(t38772,4.0/3.0);
                double t38847 = b1f*t38775;
                double t38848 = b3f*t38776;
                double t38849 = b4f*t38734*t38777;
                double t38850 = b2f*c*t38773;
                double t38851 = t38850+t38847+t38848+t38849;
                double t38852 = 1.0/t38851;
                double t38853 = t38852*t38754*(1.0/2.0);
                double t38854 = t38853+1.0;
                double t38855 = log(t38854);
                double t38856 = a1f*c*t38773;
                double t38857 = t38856+1.0;
                double t38859 = c0f*t38855*t38857*2.0;
                double t38858 = -t38859+t38789;
                double t38860 = 1.0/(t38772*t38772);
                double t38888 = t38860*t38790;
                double t38861 = t38792-t38888;
                double t38862 = t38859-t38789;
                double t38863 = 1.0/pow(t38772,5.0/3.0);
                double t38864 = 1.0/sqrt(t38774);
                double t38865 = 1.0/t38785;
                double t38866 = 1.0/(t38782*t38782);
                double t38867 = b4p*t38734*t38863*(2.0/3.0);
                double t38868 = b2p*c*t38846*(1.0/3.0);
                double t38869 = b1p*c*t38846*t38864*(1.0/6.0);
                double t38870 = b3p*c*t38846*t38775*(1.0/2.0);
                double t38871 = t38870+t38867+t38868+t38869;
                double t38872 = t38871*t38865*t38866*t38788;
                double t38873 = 1.0/d2fz0;
                double t38874 = 1.0/Aa;
                double t38875 = b1a*t38775;
                double t38876 = b3a*t38776;
                double t38877 = b4a*t38734*t38777;
                double t38878 = b2a*c*t38773;
                double t38879 = t38875+t38876+t38877+t38878;
                double t38880 = 1.0/t38879;
                double t38881 = t38880*t38874*(1.0/2.0);
                double t38882 = t38881+1.0;
                double t38883 = log(t38882);
                double t38884 = a1a*c*t38773;
                double t38885 = t38884+1.0;
                double t38886 = 1.0/(t38772*t38772*t38772*t38772*t38772);
                double t38887 = pow(t38796,1.0/3.0);
                double t38889 = t38861*t38887*(4.0/3.0);
                double t38890 = pow(t38798,1.0/3.0);
                double t38891 = t38889-t38861*t38890*(4.0/3.0);
                double t38892 = t38794*t38795;
                double t38893 = t38892-1.0;
                double t38894 = 1.0/pow(rho_a[index],4.0/3.0);
                double t38895 = 1.0/pow(rho_a[index],5.0/3.0);
                double t38896 = 1.0/sqrt(t38731);
                double t38897 = 1.0/t38744;
                double t38898 = 1.0/(t38741*t38741);
                double t38899 = b4p*t38734*t38895*(2.0/3.0);
                double t38900 = b2p*c*t38894*(1.0/3.0);
                double t38901 = b1p*c*t38894*t38896*(1.0/6.0);
                double t38902 = b3p*c*t38732*t38894*(1.0/2.0);
                double t38903 = t38900+t38901+t38902+t38899;
                double t38904 = t38903*t38747*t38897*t38898;
                double t38905 = t38835-t38836;
                double t38906 = t38750*t38905*t38753;
                double t38907 = Aa*t38800*t38753*t38873*t38883*t38893*t38885*2.0;
                double t38908 = t38906+t38836;
                double t38909 = 1.0/t38840;
                double t38910 = 1.0/t38844;
                double t38911 = 1.0/(t38840*t38840);
                double t38912 = 1.0/(t38844*t38844);
                double t38913 = gcaa*t38802*2.0;
                double t38914 = gamma_aa[index]*t38837*t38838*2.0;
                double t38915 = t38913+t38914;
                double t38916 = gamma_aa[index]*gcaa*t38801*(1.6E1/3.0);
                double t38917 = t38814*t38841*t38837*(1.6E1/3.0);
                double t38918 = t38916+t38917;
                double t38919 = gx*gx;
                double t38920 = gamma_aa[index]*gx*t38802;
                double t38921 = t38920+1.0;
                double t38922 = gamma_aa[index]*gx*t38802*2.0;
                double t38923 = t38841*t38838*t38919;
                double t38924 = t38922+t38923+1.0;
                double t38925 = 1.0/t38831;
                double t38926 = 1.0/(t38828*t38828);
                double t38927 = b4f*t38734*t38895*(2.0/3.0);
                double t38928 = b2f*c*t38894*(1.0/3.0);
                double t38929 = b1f*c*t38894*t38896*(1.0/6.0);
                double t38930 = b3f*c*t38732*t38894*(1.0/2.0);
                double t38931 = t38930+t38927+t38928+t38929;
                double t38932 = a1f*c*c0f*t38832*t38894*(2.0/3.0);
                double t38933 = a1p*c*c0p*t38745*t38894*(2.0/3.0);
                double t38934 = ccaa1*gcaa*t38802*t38909;
                double t38935 = ccaa2*gamma_aa[index]*t38910*t38837*t38838*2.0;
                double t38936 = t38934+t38935-ccaa1*gamma_aa[index]*t38911*t38837*t38838-ccaa2*t38912*t38841*t38915* \
                   t38837*t38838;
                double t38937 = 1.0/t38921;
                double t38938 = 1.0/t38924;
                double t38939 = 1.0/(t38921*t38921);
                double t38940 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t38941 = 1.0/(t38924*t38924);
                double t38942 = gx*t38802*2.0;
                double t38943 = gamma_aa[index]*t38838*t38919*2.0;
                double t38944 = t38942+t38943;
                double t38945 = gamma_aa[index]*gx*t38801*(1.6E1/3.0);
                double t38946 = t38814*t38841*t38919*(1.6E1/3.0);
                double t38947 = t38945+t38946;
                v_rho_a_gamma_aa_[index] = -t38908*t38936-(ccab1*gcab*t38802*t38845*(1.0/2.0)-ccab1*t38802*t38806* \
                   t38815*t38809*(1.0/2.0)-ccab2*t38810*t38823*t38817*t38809+ccab2*t38802*t38806*t38816*t38809)*(-t38906+ \
                   t38907-t38836+t38789+rho_a[index]*(-t38904+t38933+t38750*t38753*(t38904+t38932-t38931*t38834*t38925* \
                   t38926-a1p*c*c0p*t38745*t38894*(2.0/3.0)))-t38772*(-t38872+t38800*t38753*t38794*t38795*(t38872-(1.0/ \
                   (t38851*t38851)*t38857*(b2f*c*t38846*(1.0/3.0)+b4f*t38734*t38863*(2.0/3.0)+b1f*c*t38846*t38864*(1.0/ \
                   6.0)+b3f*c*t38846*t38775*(1.0/2.0)))/t38854+a1f*c*c0f*t38846*t38855*(2.0/3.0)-a1p*c*c0p*t38846*t38786* \
                   (2.0/3.0))+a1p*c*c0p*t38846*t38786*(2.0/3.0)+t38800*t38753*t38862*t38795*t38886*4.0-t38753*t38862* \
                   t38891*t38794*t38795+t38800*t38753*t38790*t38791*t38794*t38858*4.0+Aa*t38800*t38753*t38873*t38883* \
                   t38885*(t38795*t38886*4.0-t38790*t38791*t38794*4.0)*2.0-Aa*t38753*t38873*t38891*t38883*t38893*t38885* \
                   2.0-(t38800*t38753*t38873*t38893*t38885*1.0/(t38879*t38879)*(b2a*c*t38846*(1.0/3.0)+b4a*t38734*t38863* \
                   (2.0/3.0)+b1a*c*t38846*t38864*(1.0/6.0)+b3a*c*t38846*t38775*(1.0/2.0)))/t38882+Aa*a1a*c*t38800*t38753* \
                   t38846*t38873*t38883*t38893*(2.0/3.0))+t38800*t38753*t38862*t38794*t38795)-(rho_a[index]*(t38836+t38750* \
                   t38753*(t38835-c0p*t38745*t38747*2.0))+rho_b[index]*(t38771-t38750*t38753*(t38771-c0f*log((t38754* \
                   (1.0/2.0))/(b1f*t38757+b3f*t38758+b2f*c*t38755+b4f*t38734*t38759)+1.0)*(a1f*c*t38755+1.0)*2.0))-t38772* \
                   (t38907+t38789-t38800*t38753*t38794*t38795*t38858))*(ccab1*gcab*t38801*t38845*(4.0/3.0)-ccab2*t38810* \
                   t38817*t38809*(gcab*t38801*(8.0/3.0)+gamma_aa[index]*t38814*t38809*(4.0/3.0)+t38801*t38806*t38809* \
                   (8.0/3.0))-ccab1*gamma_aa[index]*t38814*t38815*t38809*(4.0/3.0)+ccab2*gamma_aa[index]*t38814*t38816* \
                   t38809*(4.0/3.0)-ccab1*t38801*t38806*t38815*t38809*(4.0/3.0)+ccab2*t38801*t38806*t38816*t38809*(8.0/ \
                   3.0)-ccab2*t38802*t38820*t38806*t38817*t38809+ccab2*t38810*t38820*1.0/(t38813*t38813*t38813)*t38823* \
                   t38809*2.0-ccab2*gamma_aa[index]*t38801*t38823*t38806*t38817*t38809*(8.0/3.0)+ccab1*gamma_aa[index]* \
                   gcab*t38814*t38806*1.0/(t38808*t38808*t38808)*t38809*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t38802*t38937-cx1*gamma_aa[index]*t38838*t38919*t38939+cx2*gamma_aa[index]*t38838*t38919*t38938* \
                   2.0-cx2*t38841*t38941*t38944*t38838*t38919)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t38801* \
                   t38937*(8.0/3.0)-cx1*gamma_aa[index]*t38814*t38919*t38939*8.0+cx2*gamma_aa[index]*t38814*t38919*t38938* \
                   (3.2E1/3.0)-cx2*t38814*t38841*t38941*t38944*t38919*(1.6E1/3.0)+cx1*gx*1.0/(t38921*t38921*t38921)*t38841* \
                   t38940*t38919*(1.6E1/3.0)-cx2*t38841*t38941*t38838*t38919*(gx*t38801*(1.6E1/3.0)+gamma_aa[index]*t38814* \
                   t38919*(3.2E1/3.0))-cx2*gamma_aa[index]*t38941*t38838*t38919*t38947*2.0+cx2*t38841*1.0/(t38924*t38924* \
                   t38924)*t38944*t38838*t38919*t38947*2.0)+rho_a[index]*t38936*(-t38904+t38933+t38750*t38753*(t38904+ \
                   t38932-t38933-t38931*t38834*t38925*t38926))+rho_a[index]*t38908*(ccaa1*gcaa*t38801*t38909*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t38911*t38814*t38837*8.0+ccaa2*gamma_aa[index]*t38910*t38814*t38837*(3.2E1/ \
                   3.0)-ccaa2*t38912*t38814*t38841*t38915*t38837*(1.6E1/3.0)+ccaa1*gcaa*1.0/(t38840*t38840*t38840)*t38841* \
                   t38940*t38837*(1.6E1/3.0)-ccaa2*t38912*t38841*t38837*t38838*(gcaa*t38801*(1.6E1/3.0)+gamma_aa[index]* \
                   t38814*t38837*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t38912*t38837*t38918*t38838*2.0+ccaa2*t38841*t38915* \
                   1.0/(t38844*t38844*t38844)*t38837*t38918*t38838*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t40523 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40524 = c*t40523;
                double t40525 = sqrt(t40524);
                double t40526 = pow(t40524,3.0/2.0);
                double t40527 = c*c;
                double t40528 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40529 = 1.0/c0p;
                double t40530 = b1p*t40525;
                double t40531 = b3p*t40526;
                double t40532 = b4p*t40527*t40528;
                double t40533 = b2p*c*t40523;
                double t40534 = t40530+t40531+t40532+t40533;
                double t40535 = 1.0/t40534;
                double t40536 = t40535*t40529*(1.0/2.0);
                double t40537 = t40536+1.0;
                double t40538 = log(t40537);
                double t40539 = a1p*c*t40523;
                double t40540 = t40539+1.0;
                double t40541 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40542 = gcaa*gcaa;
                double t40543 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40544 = gamma_aa[index]*gcaa*t40541;
                double t40545 = t40544+1.0;
                double t40546 = gamma_aa[index]*gamma_aa[index];
                double t40547 = gamma_aa[index]*gcaa*t40541*2.0;
                double t40548 = t40542*t40543*t40546;
                double t40549 = t40547+t40548+1.0;
                double t40550 = pow(2.0,1.0/3.0);
                double t40551 = t40550*2.0;
                double t40552 = t40551-2.0;
                double t40553 = two_13*2.0;
                double t40554 = t40553-2.0;
                double t40555 = 1.0/t40554;
                double t40556 = 1.0/c0f;
                double t40557 = b1f*t40525;
                double t40558 = b3f*t40526;
                double t40559 = b4f*t40527*t40528;
                double t40560 = b2f*c*t40523;
                double t40561 = t40560+t40557+t40558+t40559;
                double t40562 = 1.0/t40561;
                double t40563 = t40562*t40556*(1.0/2.0);
                double t40564 = t40563+1.0;
                double t40565 = log(t40564);
                double t40566 = a1f*c*t40523;
                double t40567 = t40566+1.0;
                double t40568 = c0f*t40565*t40567*2.0;
                double t40569 = c0p*t40540*t40538*2.0;
                double t40570 = 1.0/t40545;
                double t40571 = 1.0/t40549;
                double t40572 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t40573 = 1.0/(t40545*t40545);
                double t40574 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t40575 = 1.0/(t40549*t40549);
                double t40576 = gcaa*t40541*2.0;
                double t40577 = gamma_aa[index]*t40542*t40543*2.0;
                double t40578 = t40576+t40577;
                double t40579 = gamma_aa[index]*gcaa*t40574*(1.6E1/3.0);
                double t40580 = t40542*t40572*t40546*(1.6E1/3.0);
                double t40581 = t40580+t40579;
                double t40582 = gx*gx;
                double t40583 = gamma_aa[index]*gx*t40541;
                double t40584 = t40583+1.0;
                double t40585 = gamma_aa[index]*gx*t40541*2.0;
                double t40586 = t40543*t40546*t40582;
                double t40587 = t40585+t40586+1.0;
                double t40588 = 1.0/pow(rho_a[index],4.0/3.0);
                double t40589 = 1.0/pow(rho_a[index],5.0/3.0);
                double t40590 = 1.0/sqrt(t40524);
                double t40591 = 1.0/t40537;
                double t40592 = 1.0/(t40534*t40534);
                double t40593 = b4p*t40527*t40589*(2.0/3.0);
                double t40594 = b2p*c*t40588*(1.0/3.0);
                double t40595 = b1p*c*t40590*t40588*(1.0/6.0);
                double t40596 = b3p*c*t40525*t40588*(1.0/2.0);
                double t40597 = t40593+t40594+t40595+t40596;
                double t40598 = t40540*t40591*t40592*t40597;
                double t40599 = ccaa1*gcaa*t40541*t40570;
                double t40600 = ccaa2*gamma_aa[index]*t40542*t40543*t40571*2.0;
                double t40601 = t40600+t40599-ccaa1*gamma_aa[index]*t40542*t40543*t40573-ccaa2*t40542*t40543*t40546* \
                   t40575*t40578;
                double t40602 = 1.0/t40584;
                double t40603 = 1.0/t40587;
                double t40604 = 1.0/(t40584*t40584);
                double t40605 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t40606 = 1.0/(t40587*t40587);
                double t40607 = gx*t40541*2.0;
                double t40608 = gamma_aa[index]*t40543*t40582*2.0;
                double t40609 = t40607+t40608;
                double t40610 = gamma_aa[index]*gx*t40574*(1.6E1/3.0);
                double t40611 = t40572*t40546*t40582*(1.6E1/3.0);
                double t40612 = t40610+t40611;
                v_rho_a_gamma_aa_[index] = -t40601*(t40569+t40552*t40555*(t40568-c0p*t40540*t40538*2.0))+rho_a[index]* \
                   t40601*(-t40598+t40552*t40555*(t40598-(1.0/(t40561*t40561)*t40567*(b2f*c*t40588*(1.0/3.0)+b4f*t40527* \
                   t40589*(2.0/3.0)+b1f*c*t40590*t40588*(1.0/6.0)+b3f*c*t40525*t40588*(1.0/2.0)))/t40564+a1f*c*c0f*t40565* \
                   t40588*(2.0/3.0)-a1p*c*c0p*t40538*t40588*(2.0/3.0))+a1p*c*c0p*t40538*t40588*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t40602*t40541-cx1*gamma_aa[index]*t40604*t40543*t40582+cx2*gamma_aa[index]*t40603*t40543* \
                   t40582*2.0-cx2*t40543*t40606*t40546*t40582*t40609)*(4.0/3.0)+rho_a[index]*(t40569+t40552*t40555*(t40568- \
                   t40569))*(ccaa1*gcaa*t40570*t40574*(8.0/3.0)+ccaa2*gamma_aa[index]*t40542*t40571*t40572*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t40542*t40572*t40573*8.0-ccaa2*t40542*t40572*t40546*t40575*t40578*(1.6E1/3.0) \
                   +ccaa1*gcaa*t40542*t40605*1.0/(t40545*t40545*t40545)*t40546*(1.6E1/3.0)-ccaa2*t40542*t40543*t40546* \
                   t40575*(gcaa*t40574*(1.6E1/3.0)+gamma_aa[index]*t40542*t40572*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t40542* \
                   t40543*t40581*t40575*2.0+ccaa2*t40542*t40543*t40581*t40546*1.0/(t40549*t40549*t40549)*t40578*2.0)- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t40602*t40574*(8.0/3.0)-cx1*gamma_aa[index]*t40604*t40572*t40582* \
                   8.0+cx2*gamma_aa[index]*t40603*t40572*t40582*(3.2E1/3.0)-cx2*t40606*t40572*t40546*t40582*t40609*(1.6E1/ \
                   3.0)+cx1*gx*t40605*t40546*t40582*1.0/(t40584*t40584*t40584)*(1.6E1/3.0)-cx2*t40543*t40606*t40546*t40582* \
                   (gx*t40574*(1.6E1/3.0)+gamma_aa[index]*t40572*t40582*(3.2E1/3.0))-cx2*gamma_aa[index]*t40612*t40543* \
                   t40606*t40582*2.0+cx2*t40612*t40543*t40546*t40582*t40609*1.0/(t40587*t40587*t40587)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t38950 = 1.0/pow(rho_a[index],1.0/3.0);
                double t38951 = c*t38950;
                double t38952 = sqrt(t38951);
                double t38953 = pow(t38951,3.0/2.0);
                double t38954 = c*c;
                double t38955 = 1.0/pow(rho_a[index],2.0/3.0);
                double t38956 = 1.0/c0p;
                double t38957 = b1p*t38952;
                double t38958 = b3p*t38953;
                double t38959 = b4p*t38954*t38955;
                double t38960 = b2p*c*t38950;
                double t38961 = t38960+t38957+t38958+t38959;
                double t38962 = 1.0/t38961;
                double t38963 = t38962*t38956*(1.0/2.0);
                double t38964 = t38963+1.0;
                double t38965 = log(t38964);
                double t38966 = a1p*c*t38950;
                double t38967 = t38966+1.0;
                double t38968 = pow(2.0,1.0/3.0);
                double t38969 = t38968*2.0;
                double t38970 = t38969-2.0;
                double t38971 = two_13*2.0;
                double t38972 = t38971-2.0;
                double t38973 = 1.0/t38972;
                double t38974 = 1.0/c0f;
                double t38975 = 1.0/pow(rho_b[index],1.0/3.0);
                double t38976 = c*t38975;
                double t38977 = sqrt(t38976);
                double t38978 = pow(t38976,3.0/2.0);
                double t38979 = 1.0/pow(rho_b[index],2.0/3.0);
                double t38980 = b1p*t38977;
                double t38981 = b3p*t38978;
                double t38982 = b4p*t38954*t38979;
                double t38983 = b2p*c*t38975;
                double t38984 = t38980+t38981+t38982+t38983;
                double t38985 = 1.0/t38984;
                double t38986 = t38956*t38985*(1.0/2.0);
                double t38987 = t38986+1.0;
                double t38988 = log(t38987);
                double t38989 = a1p*c*t38975;
                double t38990 = t38989+1.0;
                double t38991 = c0p*t38990*t38988*2.0;
                double t38992 = rho_a[index]+rho_b[index];
                double t38993 = 1.0/pow(t38992,1.0/3.0);
                double t38994 = c*t38993;
                double t38995 = sqrt(t38994);
                double t38996 = pow(t38994,3.0/2.0);
                double t38997 = 1.0/pow(t38992,2.0/3.0);
                double t38998 = b1p*t38995;
                double t38999 = b3p*t38996;
                double t39000 = b4p*t38954*t38997;
                double t39001 = b2p*c*t38993;
                double t39002 = t38998+t38999+t39000+t39001;
                double t39003 = 1.0/t39002;
                double t39004 = t38956*t39003*(1.0/2.0);
                double t39005 = t39004+1.0;
                double t39006 = log(t39005);
                double t39007 = a1p*c*t38993;
                double t39008 = t39007+1.0;
                double t39009 = c0p*t39006*t39008*2.0;
                double t39010 = rho_a[index]-rho_b[index];
                double t39011 = t39010*t39010;
                double t39012 = 1.0/t38992;
                double t39013 = t39010*t39012;
                double t39014 = 1.0/(t38992*t38992*t38992*t38992);
                double t39015 = t39011*t39011;
                double t39016 = t39013+1.0;
                double t39017 = pow(t39016,4.0/3.0);
                double t39018 = -t39013+1.0;
                double t39019 = pow(t39018,4.0/3.0);
                double t39020 = t39017+t39019-2.0;
                double t39021 = gcab*gcab;
                double t39022 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t39023 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39024 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39025 = gamma_aa[index]*t39024*(1.0/2.0);
                double t39026 = gamma_bb[index]*t39023*(1.0/2.0);
                double t39027 = t39025+t39026;
                double t39028 = gamma_aa[index]*gcab*t39022*(8.0/3.0);
                double t39029 = gamma_aa[index]*t39021*t39022*t39027*(8.0/3.0);
                double t39030 = t39028+t39029;
                double t39031 = t39027*t39027;
                double t39032 = t39021*t39031;
                double t39033 = gcab*t39027*2.0;
                double t39034 = t39032+t39033+1.0;
                double t39035 = gcab*t39023;
                double t39036 = t39021*t39023*t39027;
                double t39037 = t39035+t39036;
                double t39038 = 1.0/(t39034*t39034);
                double t39039 = gcab*t39027;
                double t39040 = t39039+1.0;
                double t39041 = c0p*t38965*t38967*2.0;
                double t39042 = 1.0/(t39040*t39040);
                double t39043 = 1.0/t39034;
                double t39044 = 1.0/pow(t38992,4.0/3.0);
                double t39045 = b1f*t38995;
                double t39046 = b3f*t38996;
                double t39047 = b4f*t38954*t38997;
                double t39048 = b2f*c*t38993;
                double t39049 = t39045+t39046+t39047+t39048;
                double t39050 = 1.0/t39049;
                double t39051 = t38974*t39050*(1.0/2.0);
                double t39052 = t39051+1.0;
                double t39053 = log(t39052);
                double t39054 = a1f*c*t38993;
                double t39055 = t39054+1.0;
                double t39057 = c0f*t39053*t39055*2.0;
                double t39056 = t39009-t39057;
                double t39058 = 1.0/(t38992*t38992);
                double t39085 = t39010*t39058;
                double t39059 = t39012-t39085;
                double t39060 = 1.0/pow(t38992,5.0/3.0);
                double t39061 = 1.0/sqrt(t38994);
                double t39062 = 1.0/t39005;
                double t39063 = 1.0/(t39002*t39002);
                double t39064 = b4p*t38954*t39060*(2.0/3.0);
                double t39065 = b2p*c*t39044*(1.0/3.0);
                double t39066 = b1p*c*t39061*t39044*(1.0/6.0);
                double t39067 = b3p*c*t38995*t39044*(1.0/2.0);
                double t39068 = t39064+t39065+t39066+t39067;
                double t39069 = t39008*t39062*t39063*t39068;
                double t39070 = 1.0/d2fz0;
                double t39071 = 1.0/Aa;
                double t39072 = b1a*t38995;
                double t39073 = b3a*t38996;
                double t39074 = b4a*t38954*t38997;
                double t39075 = b2a*c*t38993;
                double t39076 = t39072+t39073+t39074+t39075;
                double t39077 = 1.0/t39076;
                double t39078 = t39071*t39077*(1.0/2.0);
                double t39079 = t39078+1.0;
                double t39080 = log(t39079);
                double t39081 = a1a*c*t38993;
                double t39082 = t39081+1.0;
                double t39083 = 1.0/(t38992*t38992*t38992*t38992*t38992);
                double t39084 = pow(t39016,1.0/3.0);
                double t39086 = t39084*t39059*(4.0/3.0);
                double t39087 = pow(t39018,1.0/3.0);
                double t39088 = t39086-t39059*t39087*(4.0/3.0);
                double t39089 = t39014*t39015;
                double t39090 = t39089-1.0;
                double t39091 = a1f*c*t38950;
                double t39092 = t39091+1.0;
                double t39093 = b1f*t38952;
                double t39094 = b3f*t38953;
                double t39095 = b4f*t38954*t38955;
                double t39096 = b2f*c*t38950;
                double t39097 = t39093+t39094+t39095+t39096;
                double t39098 = 1.0/t39097;
                double t39099 = t38974*t39098*(1.0/2.0);
                double t39100 = t39099+1.0;
                double t39101 = 1.0/pow(rho_a[index],4.0/3.0);
                double t39102 = 1.0/pow(rho_a[index],5.0/3.0);
                double t39103 = 1.0/sqrt(t38951);
                double t39104 = log(t39100);
                double t39105 = 1.0/t38964;
                double t39106 = 1.0/(t38961*t38961);
                double t39107 = b4p*t38954*t39102*(2.0/3.0);
                double t39108 = b2p*c*t39101*(1.0/3.0);
                double t39109 = b1p*c*t39101*t39103*(1.0/6.0);
                double t39110 = b3p*c*t38952*t39101*(1.0/2.0);
                double t39111 = t39110+t39107+t39108+t39109;
                double t39112 = t38967*t39111*t39105*t39106;
                double t39113 = Aa*t38973*t39020*t39070*t39080*t39090*t39082*2.0;
                double t39114 = t39041-c0f*t39104*t39092*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t39041-t38970*t38973*t39114)+rho_b[index]*(t38991-t38970* \
                   t38973*(t38991-c0f*log((t38974*(1.0/2.0))/(b1f*t38977+b3f*t38978+b2f*c*t38975+b4f*t38954*t38979)+1.0) \
                   *(a1f*c*t38975+1.0)*2.0))-t38992*(t39113+t39009-t38973*t39020*t39014*t39015*t39056))*(ccab2*t39021* \
                   t39030*t39023*t39027*t39038-ccab2*t39021*t39030*t39031*1.0/(t39034*t39034*t39034)*t39037*2.0+ccab1* \
                   gamma_aa[index]*t39021*t39022*t39023*t39042*(4.0/3.0)-ccab2*gamma_aa[index]*t39021*t39022*t39023*t39043* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t39021*t39022*t39027*t39037*t39038*(8.0/3.0)+ccab2*gamma_aa[index]* \
                   (t39021*t39021)*t39022*t39031*t39023*t39038*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t39021*t39022*1.0/ \
                   (t39040*t39040*t39040)*t39023*t39027*(4.0/3.0))-((ccab1*gcab*t39023*(1.0/2.0))/t39040-ccab1*t39021* \
                   t39023*t39042*t39027*(1.0/2.0)+ccab2*t39021*t39023*t39043*t39027-ccab2*t39021*t39031*t39037*t39038) \
                   *(-t39041+t39113+t39009+rho_a[index]*(-t39112+t38970*t38973*(t39112-(t39092*1.0/(t39097*t39097)*(b2f* \
                   c*t39101*(1.0/3.0)+b4f*t38954*t39102*(2.0/3.0)+b1f*c*t39101*t39103*(1.0/6.0)+b3f*c*t38952*t39101*(1.0/ \
                   2.0)))/t39100+a1f*c*c0f*t39101*t39104*(2.0/3.0)-a1p*c*c0p*t38965*t39101*(2.0/3.0))+a1p*c*c0p*t38965* \
                   t39101*(2.0/3.0))-t38992*(-t39069+t38973*t39020*t39014*t39015*(t39069-(t39055*1.0/(t39049*t39049)* \
                   (b2f*c*t39044*(1.0/3.0)+b4f*t38954*t39060*(2.0/3.0)+b1f*c*t39061*t39044*(1.0/6.0)+b3f*c*t38995*t39044* \
                   (1.0/2.0)))/t39052+a1f*c*c0f*t39044*t39053*(2.0/3.0)-a1p*c*c0p*t39006*t39044*(2.0/3.0))+a1p*c*c0p* \
                   t39006*t39044*(2.0/3.0)-t38973*t39020*t39015*t39056*t39083*4.0+t38973*t39014*t39015*t39056*t39088+ \
                   t38973*t39010*t39011*t39020*t39014*t39056*4.0+Aa*t38973*t39020*t39070*t39080*t39082*(t39015*t39083* \
                   4.0-t39010*t39011*t39014*4.0)*2.0-Aa*t38973*t39070*t39080*t39090*t39082*t39088*2.0-(t38973*t39020* \
                   t39070*t39090*t39082*1.0/(t39076*t39076)*(b2a*c*t39044*(1.0/3.0)+b4a*t38954*t39060*(2.0/3.0)+b1a*c* \
                   t39061*t39044*(1.0/6.0)+b3a*c*t38995*t39044*(1.0/2.0)))/t39079+Aa*a1a*c*t38973*t39020*t39070*t39044* \
                   t39080*t39090*(2.0/3.0))+t38970*t38973*t39114-t38973*t39020*t39014*t39015*t39056);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39116 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39117 = c*t39116;
                double t39118 = sqrt(t39117);
                double t39119 = pow(t39117,3.0/2.0);
                double t39120 = c*c;
                double t39121 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39122 = 1.0/c0p;
                double t39123 = b1p*t39118;
                double t39124 = b3p*t39119;
                double t39125 = b4p*t39120*t39121;
                double t39126 = b2p*c*t39116;
                double t39127 = t39123+t39124+t39125+t39126;
                double t39128 = 1.0/t39127;
                double t39129 = t39122*t39128*(1.0/2.0);
                double t39130 = t39129+1.0;
                double t39131 = log(t39130);
                double t39132 = a1p*c*t39116;
                double t39133 = t39132+1.0;
                double t39134 = pow(2.0,1.0/3.0);
                double t39135 = t39134*2.0;
                double t39136 = t39135-2.0;
                double t39137 = two_13*2.0;
                double t39138 = t39137-2.0;
                double t39139 = 1.0/t39138;
                double t39140 = 1.0/c0f;
                double t39141 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39142 = c*t39141;
                double t39143 = sqrt(t39142);
                double t39144 = pow(t39142,3.0/2.0);
                double t39145 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39146 = b1p*t39143;
                double t39147 = b3p*t39144;
                double t39148 = b4p*t39120*t39145;
                double t39149 = b2p*c*t39141;
                double t39150 = t39146+t39147+t39148+t39149;
                double t39151 = 1.0/t39150;
                double t39152 = t39122*t39151*(1.0/2.0);
                double t39153 = t39152+1.0;
                double t39154 = log(t39153);
                double t39155 = a1p*c*t39141;
                double t39156 = t39155+1.0;
                double t39157 = c0p*t39154*t39156*2.0;
                double t39158 = rho_a[index]+rho_b[index];
                double t39159 = 1.0/pow(t39158,1.0/3.0);
                double t39160 = c*t39159;
                double t39161 = sqrt(t39160);
                double t39162 = pow(t39160,3.0/2.0);
                double t39163 = 1.0/pow(t39158,2.0/3.0);
                double t39164 = b1p*t39161;
                double t39165 = b3p*t39162;
                double t39166 = b4p*t39120*t39163;
                double t39167 = b2p*c*t39159;
                double t39168 = t39164+t39165+t39166+t39167;
                double t39169 = 1.0/t39168;
                double t39170 = t39122*t39169*(1.0/2.0);
                double t39171 = t39170+1.0;
                double t39172 = log(t39171);
                double t39173 = a1p*c*t39159;
                double t39174 = t39173+1.0;
                double t39175 = c0p*t39172*t39174*2.0;
                double t39176 = rho_a[index]-rho_b[index];
                double t39177 = t39176*t39176;
                double t39178 = 1.0/t39158;
                double t39179 = t39176*t39178;
                double t39180 = 1.0/(t39158*t39158*t39158*t39158);
                double t39181 = t39177*t39177;
                double t39182 = t39179+1.0;
                double t39183 = pow(t39182,4.0/3.0);
                double t39184 = -t39179+1.0;
                double t39185 = pow(t39184,4.0/3.0);
                double t39186 = t39183+t39185-2.0;
                double t39187 = gcab*gcab;
                double t39188 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t39189 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39190 = gamma_aa[index]*t39189*(1.0/2.0);
                double t39191 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39192 = gamma_bb[index]*t39191*(1.0/2.0);
                double t39193 = t39190+t39192;
                double t39194 = gamma_bb[index]*gcab*t39188*(8.0/3.0);
                double t39195 = gamma_bb[index]*t39193*t39187*t39188*(8.0/3.0);
                double t39196 = t39194+t39195;
                double t39197 = t39193*t39193;
                double t39198 = t39187*t39197;
                double t39199 = gcab*t39193*2.0;
                double t39200 = t39198+t39199+1.0;
                double t39201 = gcab*t39189;
                double t39202 = t39193*t39187*t39189;
                double t39203 = t39201+t39202;
                double t39204 = 1.0/(t39200*t39200);
                double t39205 = gcab*t39193;
                double t39206 = t39205+1.0;
                double t39207 = c0p*t39131*t39133*2.0;
                double t39208 = 1.0/(t39206*t39206);
                double t39209 = 1.0/t39200;
                double t39210 = 1.0/pow(t39158,4.0/3.0);
                double t39211 = b1f*t39161;
                double t39212 = b3f*t39162;
                double t39213 = b4f*t39120*t39163;
                double t39214 = b2f*c*t39159;
                double t39215 = t39211+t39212+t39213+t39214;
                double t39216 = 1.0/t39215;
                double t39217 = t39140*t39216*(1.0/2.0);
                double t39218 = t39217+1.0;
                double t39219 = log(t39218);
                double t39220 = a1f*c*t39159;
                double t39221 = t39220+1.0;
                double t39223 = c0f*t39221*t39219*2.0;
                double t39222 = -t39223+t39175;
                double t39224 = 1.0/(t39158*t39158);
                double t39225 = t39224*t39176;
                double t39226 = t39225+t39178;
                double t39227 = t39223-t39175;
                double t39228 = 1.0/pow(t39158,5.0/3.0);
                double t39229 = 1.0/sqrt(t39160);
                double t39230 = 1.0/t39171;
                double t39231 = 1.0/(t39168*t39168);
                double t39232 = b4p*t39120*t39228*(2.0/3.0);
                double t39233 = b2p*c*t39210*(1.0/3.0);
                double t39234 = b1p*c*t39210*t39229*(1.0/6.0);
                double t39235 = b3p*c*t39210*t39161*(1.0/2.0);
                double t39236 = t39232+t39233+t39234+t39235;
                double t39237 = 1.0/d2fz0;
                double t39238 = 1.0/Aa;
                double t39239 = b1a*t39161;
                double t39240 = b3a*t39162;
                double t39241 = b4a*t39120*t39163;
                double t39242 = b2a*c*t39159;
                double t39243 = t39240+t39241+t39242+t39239;
                double t39244 = 1.0/t39243;
                double t39245 = t39244*t39238*(1.0/2.0);
                double t39246 = t39245+1.0;
                double t39247 = log(t39246);
                double t39248 = a1a*c*t39159;
                double t39249 = t39248+1.0;
                double t39250 = 1.0/(t39158*t39158*t39158*t39158*t39158);
                double t39251 = pow(t39182,1.0/3.0);
                double t39252 = t39251*t39226*(4.0/3.0);
                double t39253 = pow(t39184,1.0/3.0);
                double t39254 = t39252-t39226*t39253*(4.0/3.0);
                double t39255 = t39180*t39181;
                double t39256 = t39255-1.0;
                double t39257 = a1f*c*t39141;
                double t39258 = t39257+1.0;
                double t39259 = b1f*t39143;
                double t39260 = b3f*t39144;
                double t39261 = b4f*t39120*t39145;
                double t39262 = b2f*c*t39141;
                double t39263 = t39260+t39261+t39262+t39259;
                double t39264 = 1.0/t39263;
                double t39265 = t39140*t39264*(1.0/2.0);
                double t39266 = t39265+1.0;
                double t39267 = 1.0/pow(rho_b[index],4.0/3.0);
                double t39268 = 1.0/pow(rho_b[index],5.0/3.0);
                double t39269 = 1.0/sqrt(t39142);
                double t39270 = log(t39266);
                double t39271 = 1.0/t39153;
                double t39272 = 1.0/(t39150*t39150);
                double t39273 = b4p*t39120*t39268*(2.0/3.0);
                double t39274 = b2p*c*t39267*(1.0/3.0);
                double t39275 = b1p*c*t39267*t39269*(1.0/6.0);
                double t39276 = b3p*c*t39143*t39267*(1.0/2.0);
                double t39277 = t39273+t39274+t39275+t39276;
                double t39278 = t39271*t39272*t39156*t39277;
                double t39279 = t39157-c0f*t39270*t39258*2.0;
                double t39280 = Aa*t39237*t39139*t39247*t39256*t39186*t39249*2.0;
                double t39281 = a1p*c*c0p*t39210*t39172*(2.0/3.0);
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t39157-t39136*t39139*t39279)+rho_a[index]*(t39207-t39136* \
                   t39139*(t39207-c0f*log((t39140*(1.0/2.0))/(b1f*t39118+b3f*t39119+b2f*c*t39116+b4f*t39120*t39121)+1.0) \
                   *(a1f*c*t39116+1.0)*2.0))-t39158*(t39280+t39175-t39222*t39180*t39181*t39139*t39186))*(ccab2*t39204* \
                   t39193*t39187*t39196*t39189-ccab2*1.0/(t39200*t39200*t39200)*t39203*t39187*t39196*t39197*2.0+ccab1* \
                   gamma_bb[index]*t39208*t39187*t39188*t39189*(4.0/3.0)-ccab2*gamma_bb[index]*t39209*t39187*t39188*t39189* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t39203*t39204*t39193*t39187*t39188*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   t39204*(t39187*t39187)*t39188*t39197*t39189*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*1.0/(t39206*t39206* \
                   t39206)*t39193*t39187*t39188*t39189*(4.0/3.0))-((ccab1*gcab*t39189*(1.0/2.0))/t39206-ccab2*t39203* \
                   t39204*t39187*t39197-ccab1*t39208*t39193*t39187*t39189*(1.0/2.0)+ccab2*t39209*t39193*t39187*t39189) \
                   *(t39280-t39157+t39175+rho_b[index]*(-t39278+t39136*t39139*(t39278-(1.0/(t39263*t39263)*t39258*(b2f* \
                   c*t39267*(1.0/3.0)+b4f*t39120*t39268*(2.0/3.0)+b1f*c*t39267*t39269*(1.0/6.0)+b3f*c*t39143*t39267*(1.0/ \
                   2.0)))/t39266+a1f*c*c0f*t39270*t39267*(2.0/3.0)-a1p*c*c0p*t39154*t39267*(2.0/3.0))+a1p*c*c0p*t39154* \
                   t39267*(2.0/3.0))-t39158*(t39281-t39230*t39231*t39236*t39174+t39180*t39181*t39227*t39254*t39139+t39250* \
                   t39181*t39227*t39139*t39186*4.0-t39180*t39181*t39139*t39186*(t39281-t39230*t39231*t39236*t39174+(t39221* \
                   1.0/(t39215*t39215)*(b2f*c*t39210*(1.0/3.0)+b4f*t39120*t39228*(2.0/3.0)+b1f*c*t39210*t39229*(1.0/6.0) \
                   +b3f*c*t39210*t39161*(1.0/2.0)))/t39218-a1f*c*c0f*t39210*t39219*(2.0/3.0))-t39222*t39180*t39139*t39176* \
                   t39177*t39186*4.0+Aa*t39237*t39139*t39247*t39186*t39249*(t39250*t39181*4.0+t39180*t39176*t39177*4.0) \
                   *2.0+Aa*t39254*t39237*t39139*t39247*t39256*t39249*2.0-(1.0/(t39243*t39243)*t39237*t39139*t39256*t39186* \
                   t39249*(b2a*c*t39210*(1.0/3.0)+b4a*t39120*t39228*(2.0/3.0)+b1a*c*t39210*t39229*(1.0/6.0)+b3a*c*t39210* \
                   t39161*(1.0/2.0)))/t39246+Aa*a1a*c*t39210*t39237*t39139*t39247*t39256*t39186*(2.0/3.0))+t39136*t39139* \
                   t39279+t39180*t39181*t39227*t39139*t39186);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39284 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39285 = c*t39284;
                double t39286 = sqrt(t39285);
                double t39287 = pow(t39285,3.0/2.0);
                double t39288 = c*c;
                double t39289 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39290 = 1.0/c0p;
                double t39291 = b1p*t39286;
                double t39292 = b3p*t39287;
                double t39293 = b4p*t39288*t39289;
                double t39294 = b2p*c*t39284;
                double t39295 = t39291+t39292+t39293+t39294;
                double t39296 = 1.0/t39295;
                double t39297 = t39290*t39296*(1.0/2.0);
                double t39298 = t39297+1.0;
                double t39299 = log(t39298);
                double t39300 = a1p*c*t39284;
                double t39301 = t39300+1.0;
                double t39302 = pow(2.0,1.0/3.0);
                double t39303 = t39302*2.0;
                double t39304 = t39303-2.0;
                double t39305 = two_13*2.0;
                double t39306 = t39305-2.0;
                double t39307 = 1.0/t39306;
                double t39308 = 1.0/c0f;
                double t39309 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39310 = c*t39309;
                double t39311 = sqrt(t39310);
                double t39312 = pow(t39310,3.0/2.0);
                double t39313 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39314 = b1p*t39311;
                double t39315 = b3p*t39312;
                double t39316 = b4p*t39313*t39288;
                double t39317 = b2p*c*t39309;
                double t39318 = t39314+t39315+t39316+t39317;
                double t39319 = 1.0/t39318;
                double t39320 = t39290*t39319*(1.0/2.0);
                double t39321 = t39320+1.0;
                double t39322 = log(t39321);
                double t39323 = a1p*c*t39309;
                double t39324 = t39323+1.0;
                double t39325 = c0p*t39322*t39324*2.0;
                double t39326 = rho_a[index]+rho_b[index];
                double t39327 = 1.0/pow(t39326,1.0/3.0);
                double t39328 = c*t39327;
                double t39329 = sqrt(t39328);
                double t39330 = pow(t39328,3.0/2.0);
                double t39331 = 1.0/pow(t39326,2.0/3.0);
                double t39332 = b1p*t39329;
                double t39333 = b3p*t39330;
                double t39334 = b4p*t39331*t39288;
                double t39335 = b2p*c*t39327;
                double t39336 = t39332+t39333+t39334+t39335;
                double t39337 = 1.0/t39336;
                double t39338 = t39290*t39337*(1.0/2.0);
                double t39339 = t39338+1.0;
                double t39340 = log(t39339);
                double t39341 = a1p*c*t39327;
                double t39342 = t39341+1.0;
                double t39343 = c0p*t39340*t39342*2.0;
                double t39344 = rho_a[index]-rho_b[index];
                double t39345 = t39344*t39344;
                double t39346 = 1.0/t39326;
                double t39347 = t39344*t39346;
                double t39348 = 1.0/(t39326*t39326*t39326*t39326);
                double t39349 = t39345*t39345;
                double t39350 = t39347+1.0;
                double t39351 = pow(t39350,4.0/3.0);
                double t39352 = -t39347+1.0;
                double t39353 = pow(t39352,4.0/3.0);
                double t39354 = t39351+t39353-2.0;
                double t39355 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t39356 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39357 = gamma_aa[index]*t39356*(1.0/2.0);
                double t39358 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39359 = gamma_bb[index]*t39358*(1.0/2.0);
                double t39360 = t39357+t39359;
                double t39361 = gcab*t39360;
                double t39362 = t39361+1.0;
                double t39363 = gcab*gcab;
                double t39364 = t39360*t39360;
                double t39365 = t39363*t39364;
                double t39366 = gcab*t39360*2.0;
                double t39367 = t39365+t39366+1.0;
                double t39368 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t39369 = 1.0/(t39362*t39362);
                double t39370 = 1.0/t39367;
                double t39371 = 1.0/(t39367*t39367);
                double t39372 = gamma_bb[index]*gcab*t39355*(8.0/3.0);
                double t39373 = gamma_bb[index]*t39360*t39363*t39355*(8.0/3.0);
                double t39374 = t39372+t39373;
                double t39375 = gcab*t39358;
                double t39376 = t39360*t39363*t39358;
                double t39377 = t39375+t39376;
                double t39378 = b1f*t39311;
                double t39379 = b3f*t39312;
                double t39380 = b4f*t39313*t39288;
                double t39381 = b2f*c*t39309;
                double t39382 = t39380+t39381+t39378+t39379;
                double t39383 = 1.0/t39382;
                double t39384 = t39308*t39383*(1.0/2.0);
                double t39385 = t39384+1.0;
                double t39386 = log(t39385);
                double t39387 = a1f*c*t39309;
                double t39388 = t39387+1.0;
                double t39458 = c0f*t39386*t39388*2.0;
                double t39389 = t39325-t39458;
                double t39459 = t39304*t39307*t39389;
                double t39390 = t39325-t39459;
                double t39391 = gcaa*gcaa;
                double t39392 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t39393 = gamma_bb[index]*gcaa*t39358;
                double t39394 = t39393+1.0;
                double t39395 = gamma_bb[index]*gamma_bb[index];
                double t39396 = gamma_bb[index]*gcaa*t39358*2.0;
                double t39397 = t39391*t39392*t39395;
                double t39398 = t39396+t39397+1.0;
                double t39399 = 1.0/t39362;
                double t39400 = 1.0/pow(t39326,4.0/3.0);
                double t39401 = b1f*t39329;
                double t39402 = b3f*t39330;
                double t39403 = b4f*t39331*t39288;
                double t39404 = b2f*c*t39327;
                double t39405 = t39401+t39402+t39403+t39404;
                double t39406 = 1.0/t39405;
                double t39407 = t39406*t39308*(1.0/2.0);
                double t39408 = t39407+1.0;
                double t39409 = log(t39408);
                double t39410 = a1f*c*t39327;
                double t39411 = t39410+1.0;
                double t39413 = c0f*t39411*t39409*2.0;
                double t39412 = -t39413+t39343;
                double t39414 = 1.0/(t39326*t39326);
                double t39415 = t39414*t39344;
                double t39416 = t39415+t39346;
                double t39417 = t39413-t39343;
                double t39418 = 1.0/pow(t39326,5.0/3.0);
                double t39419 = 1.0/sqrt(t39328);
                double t39420 = 1.0/t39339;
                double t39421 = 1.0/(t39336*t39336);
                double t39422 = b4p*t39418*t39288*(2.0/3.0);
                double t39423 = b2p*c*t39400*(1.0/3.0);
                double t39424 = b1p*c*t39400*t39419*(1.0/6.0);
                double t39425 = b3p*c*t39400*t39329*(1.0/2.0);
                double t39426 = t39422+t39423+t39424+t39425;
                double t39427 = 1.0/d2fz0;
                double t39428 = 1.0/Aa;
                double t39429 = b1a*t39329;
                double t39430 = b3a*t39330;
                double t39431 = b4a*t39331*t39288;
                double t39432 = b2a*c*t39327;
                double t39433 = t39430+t39431+t39432+t39429;
                double t39434 = 1.0/t39433;
                double t39435 = t39434*t39428*(1.0/2.0);
                double t39436 = t39435+1.0;
                double t39437 = log(t39436);
                double t39438 = a1a*c*t39327;
                double t39439 = t39438+1.0;
                double t39440 = 1.0/(t39326*t39326*t39326*t39326*t39326);
                double t39441 = pow(t39350,1.0/3.0);
                double t39442 = t39441*t39416*(4.0/3.0);
                double t39443 = pow(t39352,1.0/3.0);
                double t39444 = t39442-t39416*t39443*(4.0/3.0);
                double t39445 = t39348*t39349;
                double t39446 = t39445-1.0;
                double t39447 = 1.0/pow(rho_b[index],4.0/3.0);
                double t39448 = 1.0/pow(rho_b[index],5.0/3.0);
                double t39449 = 1.0/sqrt(t39310);
                double t39450 = 1.0/t39321;
                double t39451 = 1.0/(t39318*t39318);
                double t39452 = b4p*t39448*t39288*(2.0/3.0);
                double t39453 = b2p*c*t39447*(1.0/3.0);
                double t39454 = b1p*c*t39447*t39449*(1.0/6.0);
                double t39455 = b3p*c*t39311*t39447*(1.0/2.0);
                double t39456 = t39452+t39453+t39454+t39455;
                double t39457 = t39324*t39450*t39451*t39456;
                double t39460 = Aa*t39307*t39354*t39427*t39437*t39446*t39439*2.0;
                double t39461 = a1p*c*c0p*t39400*t39340*(2.0/3.0);
                double t39462 = 1.0/t39394;
                double t39463 = 1.0/t39398;
                double t39464 = 1.0/(t39394*t39394);
                double t39465 = 1.0/(t39398*t39398);
                double t39466 = gcaa*t39358*2.0;
                double t39467 = gamma_bb[index]*t39391*t39392*2.0;
                double t39468 = t39466+t39467;
                double t39469 = gamma_bb[index]*gcaa*t39355*(1.6E1/3.0);
                double t39470 = t39391*t39368*t39395*(1.6E1/3.0);
                double t39471 = t39470+t39469;
                double t39472 = gx*gx;
                double t39473 = gamma_bb[index]*gx*t39358;
                double t39474 = t39473+1.0;
                double t39475 = gamma_bb[index]*gx*t39358*2.0;
                double t39476 = t39472*t39392*t39395;
                double t39477 = t39475+t39476+1.0;
                double t39478 = 1.0/t39385;
                double t39479 = 1.0/(t39382*t39382);
                double t39480 = b4f*t39448*t39288*(2.0/3.0);
                double t39481 = b2f*c*t39447*(1.0/3.0);
                double t39482 = b1f*c*t39447*t39449*(1.0/6.0);
                double t39483 = b3f*c*t39311*t39447*(1.0/2.0);
                double t39484 = t39480+t39481+t39482+t39483;
                double t39485 = a1f*c*c0f*t39447*t39386*(2.0/3.0);
                double t39486 = a1p*c*c0p*t39322*t39447*(2.0/3.0);
                double t39487 = ccaa1*gcaa*t39462*t39358;
                double t39488 = ccaa2*gamma_bb[index]*t39391*t39463*t39392*2.0;
                double t39489 = t39487+t39488-ccaa1*gamma_bb[index]*t39391*t39392*t39464-ccaa2*t39391*t39392*t39465* \
                   t39395*t39468;
                double t39490 = 1.0/t39474;
                double t39491 = 1.0/t39477;
                double t39492 = 1.0/(t39474*t39474);
                double t39493 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t39494 = 1.0/(t39477*t39477);
                double t39495 = gx*t39358*2.0;
                double t39496 = gamma_bb[index]*t39472*t39392*2.0;
                double t39497 = t39495+t39496;
                double t39498 = gamma_bb[index]*gx*t39355*(1.6E1/3.0);
                double t39499 = t39472*t39368*t39395*(1.6E1/3.0);
                double t39500 = t39498+t39499;
                v_rho_b_gamma_bb_[index] = (-rho_b[index]*t39390+t39326*(t39343+t39460-t39412*t39307*t39354*t39348* \
                   t39349)+rho_a[index]*(t39304*t39307*(c0p*t39301*t39299*2.0-c0f*log((t39308*(1.0/2.0))/(b1f*t39286+ \
                   b3f*t39287+b2f*c*t39284+b4f*t39288*t39289)+1.0)*(a1f*c*t39284+1.0)*2.0)-c0p*t39301*t39299*2.0))*(ccab1* \
                   gcab*t39355*t39399*(4.0/3.0)-ccab2*t39371*t39363*t39364*(gcab*t39355*(8.0/3.0)+gamma_bb[index]*t39363* \
                   t39368*(4.0/3.0)+t39360*t39363*t39355*(8.0/3.0))+ccab2*gamma_bb[index]*t39370*t39363*t39368*(4.0/3.0) \
                   -ccab1*gamma_bb[index]*t39363*t39368*t39369*(4.0/3.0)+ccab2*t39360*t39370*t39363*t39355*(8.0/3.0)- \
                   ccab1*t39360*t39363*t39355*t39369*(4.0/3.0)-ccab2*t39360*t39371*t39363*t39374*t39358+ccab2*t39363* \
                   t39364*t39374*1.0/(t39367*t39367*t39367)*t39377*2.0-ccab2*gamma_bb[index]*t39360*t39371*t39363*t39355* \
                   t39377*(8.0/3.0)+ccab1*gamma_bb[index]*gcab*t39360*1.0/(t39362*t39362*t39362)*t39363*t39368*(4.0/3.0) \
                   )-(ccab1*gcab*t39358*t39399*(1.0/2.0)+ccab2*t39360*t39370*t39363*t39358-ccab2*t39371*t39363*t39364* \
                   t39377-ccab1*t39360*t39363*t39358*t39369*(1.0/2.0))*(-t39325+t39343+t39460+t39459+rho_b[index]*(-t39457+ \
                   t39486+t39304*t39307*(t39457+t39485-t39484*t39388*t39478*t39479-a1p*c*c0p*t39322*t39447*(2.0/3.0)) \
                   )-t39326*(t39461-t39420*t39421*t39342*t39426+t39440*t39307*t39354*t39417*t39349*4.0+t39307*t39417* \
                   t39444*t39348*t39349-t39307*t39354*t39348*t39349*(t39461-t39420*t39421*t39342*t39426+(t39411*1.0/(t39405* \
                   t39405)*(b2f*c*t39400*(1.0/3.0)+b4f*t39418*t39288*(2.0/3.0)+b1f*c*t39400*t39419*(1.0/6.0)+b3f*c*t39400* \
                   t39329*(1.0/2.0)))/t39408-a1f*c*c0f*t39400*t39409*(2.0/3.0))-t39412*t39307*t39344*t39345*t39354*t39348* \
                   4.0+Aa*t39307*t39354*t39427*t39437*t39439*(t39440*t39349*4.0+t39344*t39345*t39348*4.0)*2.0+Aa*t39307* \
                   t39444*t39427*t39437*t39446*t39439*2.0-(t39307*1.0/(t39433*t39433)*t39354*t39427*t39446*t39439*(b2a* \
                   c*t39400*(1.0/3.0)+b4a*t39418*t39288*(2.0/3.0)+b1a*c*t39400*t39419*(1.0/6.0)+b3a*c*t39400*t39329*(1.0/ \
                   2.0)))/t39436+Aa*a1a*c*t39400*t39307*t39354*t39427*t39437*t39446*(2.0/3.0))+t39307*t39354*t39417*t39348* \
                   t39349)-t39390*t39489+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t39490*t39358-cx1*gamma_bb[index]*t39472* \
                   t39392*t39492+cx2*gamma_bb[index]*t39472*t39392*t39491*2.0-cx2*t39472*t39392*t39395*t39494*t39497) \
                   *(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t39355*t39490*(8.0/3.0)-cx1*gamma_bb[index]*t39472* \
                   t39492*t39368*8.0+cx2*gamma_bb[index]*t39472*t39491*t39368*(3.2E1/3.0)-cx2*t39472*t39368*t39395*t39494* \
                   t39497*(1.6E1/3.0)+cx1*gx*t39472*1.0/(t39474*t39474*t39474)*t39493*t39395*(1.6E1/3.0)-cx2*t39472*t39392* \
                   t39395*t39494*(gx*t39355*(1.6E1/3.0)+gamma_bb[index]*t39472*t39368*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t39500*t39472*t39392*t39494*2.0+cx2*t39500*t39472*t39392*t39395*1.0/(t39477*t39477*t39477)*t39497* \
                   2.0)+rho_b[index]*t39489*(-t39457+t39486+t39304*t39307*(t39457+t39485-t39486-t39484*t39388*t39478* \
                   t39479))+rho_b[index]*t39390*(ccaa1*gcaa*t39462*t39355*(8.0/3.0)-ccaa1*gamma_bb[index]*t39391*t39464* \
                   t39368*8.0+ccaa2*gamma_bb[index]*t39391*t39463*t39368*(3.2E1/3.0)-ccaa2*t39391*t39465*t39368*t39395* \
                   t39468*(1.6E1/3.0)+ccaa1*gcaa*t39391*1.0/(t39394*t39394*t39394)*t39493*t39395*(1.6E1/3.0)-ccaa2*t39391* \
                   t39392*t39465*t39395*(gcaa*t39355*(1.6E1/3.0)+gamma_bb[index]*t39391*t39368*(3.2E1/3.0))-ccaa2*gamma_bb[index]* \
                   t39471*t39391*t39392*t39465*2.0+ccaa2*t39471*t39391*t39392*t39395*t39468*1.0/(t39398*t39398*t39398) \
                   *2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t40117 = 1.0/pow(rho_b[index],1.0/3.0);
                double t40118 = c*t40117;
                double t40119 = sqrt(t40118);
                double t40120 = pow(t40118,3.0/2.0);
                double t40121 = c*c;
                double t40122 = 1.0/pow(rho_b[index],2.0/3.0);
                double t40123 = 1.0/c0p;
                double t40124 = b1p*t40119;
                double t40125 = b3p*t40120;
                double t40126 = b4p*t40121*t40122;
                double t40127 = b2p*c*t40117;
                double t40128 = t40124+t40125+t40126+t40127;
                double t40129 = 1.0/t40128;
                double t40130 = t40123*t40129*(1.0/2.0);
                double t40131 = t40130+1.0;
                double t40132 = log(t40131);
                double t40133 = a1p*c*t40117;
                double t40134 = t40133+1.0;
                double t40135 = 1.0/pow(rho_b[index],8.0/3.0);
                double t40136 = gcaa*gcaa;
                double t40137 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t40138 = gamma_bb[index]*gcaa*t40135;
                double t40139 = t40138+1.0;
                double t40140 = gamma_bb[index]*gamma_bb[index];
                double t40141 = gamma_bb[index]*gcaa*t40135*2.0;
                double t40142 = t40140*t40136*t40137;
                double t40143 = t40141+t40142+1.0;
                double t40144 = pow(2.0,1.0/3.0);
                double t40145 = t40144*2.0;
                double t40146 = t40145-2.0;
                double t40147 = two_13*2.0;
                double t40148 = t40147-2.0;
                double t40149 = 1.0/t40148;
                double t40150 = 1.0/c0f;
                double t40151 = b1f*t40119;
                double t40152 = b3f*t40120;
                double t40153 = b4f*t40121*t40122;
                double t40154 = b2f*c*t40117;
                double t40155 = t40151+t40152+t40153+t40154;
                double t40156 = 1.0/t40155;
                double t40157 = t40150*t40156*(1.0/2.0);
                double t40158 = t40157+1.0;
                double t40159 = log(t40158);
                double t40160 = a1f*c*t40117;
                double t40161 = t40160+1.0;
                double t40162 = c0f*t40161*t40159*2.0;
                double t40163 = c0p*t40132*t40134*2.0;
                double t40164 = 1.0/t40139;
                double t40165 = 1.0/t40143;
                double t40166 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t40167 = 1.0/(t40139*t40139);
                double t40168 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t40169 = 1.0/(t40143*t40143);
                double t40170 = gcaa*t40135*2.0;
                double t40171 = gamma_bb[index]*t40136*t40137*2.0;
                double t40172 = t40170+t40171;
                double t40173 = gamma_bb[index]*gcaa*t40168*(1.6E1/3.0);
                double t40174 = t40140*t40136*t40166*(1.6E1/3.0);
                double t40175 = t40173+t40174;
                double t40176 = gx*gx;
                double t40177 = gamma_bb[index]*gx*t40135;
                double t40178 = t40177+1.0;
                double t40179 = gamma_bb[index]*gx*t40135*2.0;
                double t40180 = t40140*t40137*t40176;
                double t40181 = t40180+t40179+1.0;
                double t40182 = 1.0/pow(rho_b[index],4.0/3.0);
                double t40183 = 1.0/pow(rho_b[index],5.0/3.0);
                double t40184 = 1.0/sqrt(t40118);
                double t40185 = 1.0/t40131;
                double t40186 = 1.0/(t40128*t40128);
                double t40187 = b4p*t40121*t40183*(2.0/3.0);
                double t40188 = b2p*c*t40182*(1.0/3.0);
                double t40189 = b1p*c*t40182*t40184*(1.0/6.0);
                double t40190 = b3p*c*t40119*t40182*(1.0/2.0);
                double t40191 = t40190+t40187+t40188+t40189;
                double t40192 = t40134*t40191*t40185*t40186;
                double t40193 = ccaa1*gcaa*t40135*t40164;
                double t40194 = ccaa2*gamma_bb[index]*t40136*t40137*t40165*2.0;
                double t40195 = t40193+t40194-ccaa1*gamma_bb[index]*t40136*t40137*t40167-ccaa2*t40140*t40136*t40172* \
                   t40137*t40169;
                double t40196 = 1.0/t40178;
                double t40197 = 1.0/t40181;
                double t40198 = 1.0/(t40178*t40178);
                double t40199 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t40200 = 1.0/(t40181*t40181);
                double t40201 = gx*t40135*2.0;
                double t40202 = gamma_bb[index]*t40137*t40176*2.0;
                double t40203 = t40201+t40202;
                double t40204 = gamma_bb[index]*gx*t40168*(1.6E1/3.0);
                double t40205 = t40140*t40166*t40176*(1.6E1/3.0);
                double t40206 = t40204+t40205;
                v_rho_b_gamma_bb_[index] = -t40195*(t40163+t40146*t40149*(t40162-c0p*t40132*t40134*2.0))+rho_b[index]* \
                   t40195*(-t40192+t40146*t40149*(t40192-(t40161*1.0/(t40155*t40155)*(b2f*c*t40182*(1.0/3.0)+b4f*t40121* \
                   t40183*(2.0/3.0)+b1f*c*t40182*t40184*(1.0/6.0)+b3f*c*t40119*t40182*(1.0/2.0)))/t40158+a1f*c*c0f*t40182* \
                   t40159*(2.0/3.0)-a1p*c*c0p*t40132*t40182*(2.0/3.0))+a1p*c*c0p*t40132*t40182*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t40135*t40196-cx1*gamma_bb[index]*t40137*t40176*t40198+cx2*gamma_bb[index]*t40137*t40176* \
                   t40197*2.0-cx2*t40200*t40140*t40203*t40137*t40176)*(4.0/3.0)+rho_b[index]*(t40163+t40146*t40149*(t40162- \
                   t40163))*(ccaa1*gcaa*t40164*t40168*(8.0/3.0)+ccaa2*gamma_bb[index]*t40136*t40165*t40166*(3.2E1/3.0) \
                   -ccaa1*gamma_bb[index]*t40136*t40166*t40167*8.0-ccaa2*t40140*t40136*t40172*t40166*t40169*(1.6E1/3.0) \
                   +ccaa1*gcaa*t40140*t40136*1.0/(t40139*t40139*t40139)*t40199*(1.6E1/3.0)-ccaa2*t40140*t40136*t40137* \
                   t40169*(gcaa*t40168*(1.6E1/3.0)+gamma_bb[index]*t40136*t40166*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t40136* \
                   t40137*t40175*t40169*2.0+ccaa2*t40140*1.0/(t40143*t40143*t40143)*t40136*t40172*t40137*t40175*2.0)- \
                   c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t40168*t40196*(8.0/3.0)-cx1*gamma_bb[index]*t40166*t40176*t40198* \
                   8.0+cx2*gamma_bb[index]*t40166*t40176*t40197*(3.2E1/3.0)-cx2*t40200*t40140*t40203*t40166*t40176*(1.6E1/ \
                   3.0)+cx1*gx*t40140*t40176*1.0/(t40178*t40178*t40178)*t40199*(1.6E1/3.0)-cx2*t40200*t40140*t40137*t40176* \
                   (gx*t40168*(1.6E1/3.0)+gamma_bb[index]*t40166*t40176*(3.2E1/3.0))-cx2*gamma_bb[index]*t40200*t40206* \
                   t40137*t40176*2.0+cx2*t40140*t40203*t40206*1.0/(t40181*t40181*t40181)*t40137*t40176*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39502 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39503 = c*t39502;
                double t39504 = sqrt(t39503);
                double t39505 = pow(t39503,3.0/2.0);
                double t39506 = c*c;
                double t39507 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39508 = 1.0/c0p;
                double t39509 = b1p*t39504;
                double t39510 = b3p*t39505;
                double t39511 = b4p*t39506*t39507;
                double t39512 = b2p*c*t39502;
                double t39513 = t39510+t39511+t39512+t39509;
                double t39514 = 1.0/t39513;
                double t39515 = t39514*t39508*(1.0/2.0);
                double t39516 = t39515+1.0;
                double t39517 = log(t39516);
                double t39518 = a1p*c*t39502;
                double t39519 = t39518+1.0;
                double t39520 = pow(2.0,1.0/3.0);
                double t39521 = t39520*2.0;
                double t39522 = t39521-2.0;
                double t39523 = two_13*2.0;
                double t39524 = t39523-2.0;
                double t39525 = 1.0/t39524;
                double t39526 = 1.0/c0f;
                double t39527 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39528 = c*t39527;
                double t39529 = sqrt(t39528);
                double t39530 = pow(t39528,3.0/2.0);
                double t39531 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39532 = b1p*t39529;
                double t39533 = b3p*t39530;
                double t39534 = b4p*t39531*t39506;
                double t39535 = b2p*c*t39527;
                double t39536 = t39532+t39533+t39534+t39535;
                double t39537 = 1.0/t39536;
                double t39538 = t39508*t39537*(1.0/2.0);
                double t39539 = t39538+1.0;
                double t39540 = log(t39539);
                double t39541 = a1p*c*t39527;
                double t39542 = t39541+1.0;
                double t39543 = c0p*t39540*t39542*2.0;
                double t39544 = rho_a[index]+rho_b[index];
                double t39545 = 1.0/pow(t39544,1.0/3.0);
                double t39546 = c*t39545;
                double t39547 = sqrt(t39546);
                double t39548 = pow(t39546,3.0/2.0);
                double t39549 = 1.0/pow(t39544,2.0/3.0);
                double t39550 = b1p*t39547;
                double t39551 = b3p*t39548;
                double t39552 = b4p*t39506*t39549;
                double t39553 = b2p*c*t39545;
                double t39554 = t39550+t39551+t39552+t39553;
                double t39555 = 1.0/t39554;
                double t39556 = t39508*t39555*(1.0/2.0);
                double t39557 = t39556+1.0;
                double t39558 = log(t39557);
                double t39559 = a1p*c*t39545;
                double t39560 = t39559+1.0;
                double t39561 = c0p*t39560*t39558*2.0;
                double t39562 = rho_a[index]-rho_b[index];
                double t39563 = t39562*t39562;
                double t39564 = 1.0/t39544;
                double t39565 = t39562*t39564;
                double t39566 = 1.0/(t39544*t39544*t39544*t39544);
                double t39567 = t39563*t39563;
                double t39568 = t39565+1.0;
                double t39569 = pow(t39568,4.0/3.0);
                double t39570 = -t39565+1.0;
                double t39571 = pow(t39570,4.0/3.0);
                double t39572 = t39571+t39569-2.0;
                double t39573 = gcab*gcab;
                double t39574 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t39575 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39576 = gamma_aa[index]*t39575*(1.0/2.0);
                double t39577 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39578 = gamma_bb[index]*t39577*(1.0/2.0);
                double t39579 = t39576+t39578;
                double t39580 = gcab*t39579;
                double t39581 = t39580+1.0;
                double t39582 = t39579*t39579;
                double t39583 = t39573*t39582;
                double t39584 = gcab*t39579*2.0;
                double t39585 = t39583+t39584+1.0;
                double t39587 = gcab*t39575;
                double t39588 = t39573*t39575*t39579;
                double t39586 = t39587+t39588;
                double t39589 = 1.0/(t39585*t39585);
                double t39590 = b1f*t39504;
                double t39591 = b3f*t39505;
                double t39592 = b4f*t39506*t39507;
                double t39593 = b2f*c*t39502;
                double t39594 = t39590+t39591+t39592+t39593;
                double t39595 = 1.0/t39594;
                double t39596 = t39526*t39595*(1.0/2.0);
                double t39597 = t39596+1.0;
                double t39598 = log(t39597);
                double t39599 = a1f*c*t39502;
                double t39600 = t39599+1.0;
                double t39601 = c0f*t39600*t39598*2.0;
                double t39602 = c0p*t39517*t39519*2.0;
                double t39603 = gcaa*gcaa;
                double t39604 = gamma_aa[index]*gcaa*t39575;
                double t39605 = t39604+1.0;
                double t39606 = gamma_aa[index]*gamma_aa[index];
                double t39607 = gamma_aa[index]*gcaa*t39575*2.0;
                double t39608 = t39603*t39606*t39574;
                double t39609 = t39607+t39608+1.0;
                double t39611 = gcaa*t39575*2.0;
                double t39612 = gamma_aa[index]*t39603*t39574*2.0;
                double t39610 = t39611+t39612;
                double t39613 = 1.0/(t39609*t39609);
                double t39614 = gx*gx;
                double t39615 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t39616 = gamma_aa[index]*gx*t39575;
                double t39617 = t39616+1.0;
                double t39618 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t39619 = gamma_aa[index]*gx*t39575*2.0;
                double t39620 = t39614*t39606*t39574;
                double t39621 = t39620+t39619+1.0;
                double t39623 = gx*t39575*2.0;
                double t39624 = gamma_aa[index]*t39614*t39574*2.0;
                double t39622 = t39623+t39624;
                double t39625 = 1.0/(t39621*t39621);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t39602+t39522*t39525*(t39601-c0p*t39517*t39519*2.0) \
                   )+rho_b[index]*(t39543-t39522*t39525*(t39543-c0f*log((t39526*(1.0/2.0))/(b1f*t39529+b3f*t39530+b2f* \
                   c*t39527+b4f*t39531*t39506)+1.0)*(a1f*c*t39527+1.0)*2.0))-t39544*(t39561-t39525*t39572*t39566*t39567* \
                   (t39561-c0f*log((t39526*(1.0/2.0))/(b1f*t39547+b3f*t39548+b2f*c*t39545+b4f*t39506*t39549)+1.0)*(a1f* \
                   c*t39545+1.0)*2.0)+(Aa*t39525*t39572*log((1.0/2.0)/(Aa*(b1a*t39547+b3a*t39548+b2a*c*t39545+b4a*t39506* \
                   t39549))+1.0)*(t39566*t39567-1.0)*(a1a*c*t39545+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t39581*t39581)*t39573* \
                   t39574*(1.0/2.0)-(ccab2*t39573*t39574*(1.0/2.0))/t39585-ccab2*t39573*t39582*1.0/(t39585*t39585*t39585) \
                   *(t39586*t39586)*2.0+ccab2*(t39573*t39573)*t39582*t39574*t39589*(1.0/2.0)+ccab2*t39573*t39575*t39586* \
                   t39579*t39589*2.0-ccab1*gcab*1.0/(t39581*t39581*t39581)*t39573*t39574*t39579*(1.0/2.0))+rho_a[index]* \
                   (t39602+t39522*t39525*(t39601-t39602))*(ccaa1*t39603*1.0/(t39605*t39605)*t39574*2.0-(ccaa2*t39603* \
                   t39574*2.0)/t39609+ccaa2*(t39603*t39603)*t39613*t39606*t39618*2.0-ccaa1*gamma_aa[index]*gcaa*t39603* \
                   1.0/(t39605*t39605*t39605)*t39615*2.0-ccaa2*(t39610*t39610)*t39603*t39606*1.0/(t39609*t39609*t39609) \
                   *t39574*2.0+ccaa2*gamma_aa[index]*t39610*t39603*t39613*t39574*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   t39614*1.0/(t39617*t39617)*t39574*2.0-(cx2*t39614*t39574*2.0)/t39621+cx2*(t39614*t39614)*t39606*t39625* \
                   t39618*2.0-cx1*gamma_aa[index]*gx*t39614*t39615*1.0/(t39617*t39617*t39617)*2.0-cx2*1.0/(t39621*t39621* \
                   t39621)*(t39622*t39622)*t39614*t39606*t39574*2.0+cx2*gamma_aa[index]*t39622*t39614*t39625*t39574*4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t40619 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40620 = c*t40619;
                double t40621 = sqrt(t40620);
                double t40622 = pow(t40620,3.0/2.0);
                double t40623 = c*c;
                double t40624 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40625 = 1.0/c0p;
                double t40626 = b1p*t40621;
                double t40627 = b3p*t40622;
                double t40628 = b4p*t40623*t40624;
                double t40629 = b2p*c*t40619;
                double t40630 = t40626+t40627+t40628+t40629;
                double t40631 = 1.0/t40630;
                double t40632 = t40631*t40625*(1.0/2.0);
                double t40633 = t40632+1.0;
                double t40634 = log(t40633);
                double t40635 = a1p*c*t40619;
                double t40636 = t40635+1.0;
                double t40637 = gcaa*gcaa;
                double t40638 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40639 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40640 = gamma_aa[index]*gcaa*t40639;
                double t40641 = t40640+1.0;
                double t40642 = gamma_aa[index]*gamma_aa[index];
                double t40643 = gamma_aa[index]*gcaa*t40639*2.0;
                double t40644 = t40642*t40637*t40638;
                double t40645 = t40643+t40644+1.0;
                double t40647 = gcaa*t40639*2.0;
                double t40648 = gamma_aa[index]*t40637*t40638*2.0;
                double t40646 = t40647+t40648;
                double t40649 = 1.0/(t40645*t40645);
                double t40650 = gx*gx;
                double t40651 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t40652 = gamma_aa[index]*gx*t40639;
                double t40653 = t40652+1.0;
                double t40654 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t40655 = gamma_aa[index]*gx*t40639*2.0;
                double t40656 = t40650*t40642*t40638;
                double t40657 = t40655+t40656+1.0;
                double t40659 = gx*t40639*2.0;
                double t40660 = gamma_aa[index]*t40650*t40638*2.0;
                double t40658 = t40660+t40659;
                double t40661 = 1.0/(t40657*t40657);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t40621+b3f*t40622+b2f*c*t40619+b4f*t40623*t40624))+1.0)*(a1f*c*t40619+1.0)*2.0-c0p*t40634*t40636*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t40634*t40636*2.0)*(ccaa1*1.0/(t40641*t40641)*t40637*t40638*2.0-(ccaa2*t40637* \
                   t40638*2.0)/t40645+ccaa2*t40642*t40654*(t40637*t40637)*t40649*2.0-ccaa1*gamma_aa[index]*gcaa*1.0/(t40641* \
                   t40641*t40641)*t40651*t40637*2.0-ccaa2*t40642*1.0/(t40645*t40645*t40645)*t40637*(t40646*t40646)*t40638* \
                   2.0+ccaa2*gamma_aa[index]*t40637*t40646*t40638*t40649*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*t40650* \
                   1.0/(t40653*t40653)*t40638*2.0-(cx2*t40650*t40638*2.0)/t40657+cx2*(t40650*t40650)*t40642*t40661*t40654* \
                   2.0-cx1*gamma_aa[index]*gx*t40650*t40651*1.0/(t40653*t40653*t40653)*2.0-cx2*t40650*t40642*t40638*1.0/ \
                   (t40657*t40657*t40657)*(t40658*t40658)*2.0+cx2*gamma_aa[index]*t40650*t40661*t40638*t40658*4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39628 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39629 = c*t39628;
                double t39630 = sqrt(t39629);
                double t39631 = pow(t39629,3.0/2.0);
                double t39632 = c*c;
                double t39633 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39634 = 1.0/c0p;
                double t39635 = b1p*t39630;
                double t39636 = b3p*t39631;
                double t39637 = b4p*t39632*t39633;
                double t39638 = b2p*c*t39628;
                double t39639 = t39635+t39636+t39637+t39638;
                double t39640 = 1.0/t39639;
                double t39641 = t39640*t39634*(1.0/2.0);
                double t39642 = t39641+1.0;
                double t39643 = log(t39642);
                double t39644 = a1p*c*t39628;
                double t39645 = t39644+1.0;
                double t39646 = pow(2.0,1.0/3.0);
                double t39647 = t39646*2.0;
                double t39648 = t39647-2.0;
                double t39649 = two_13*2.0;
                double t39650 = t39649-2.0;
                double t39651 = 1.0/t39650;
                double t39652 = 1.0/c0f;
                double t39653 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39654 = c*t39653;
                double t39655 = sqrt(t39654);
                double t39656 = pow(t39654,3.0/2.0);
                double t39657 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39658 = b1p*t39655;
                double t39659 = b3p*t39656;
                double t39660 = b4p*t39632*t39657;
                double t39661 = b2p*c*t39653;
                double t39662 = t39660+t39661+t39658+t39659;
                double t39663 = 1.0/t39662;
                double t39664 = t39634*t39663*(1.0/2.0);
                double t39665 = t39664+1.0;
                double t39666 = log(t39665);
                double t39667 = a1p*c*t39653;
                double t39668 = t39667+1.0;
                double t39669 = c0p*t39666*t39668*2.0;
                double t39670 = rho_a[index]+rho_b[index];
                double t39671 = 1.0/pow(t39670,1.0/3.0);
                double t39672 = c*t39671;
                double t39673 = sqrt(t39672);
                double t39674 = pow(t39672,3.0/2.0);
                double t39675 = 1.0/pow(t39670,2.0/3.0);
                double t39676 = b1p*t39673;
                double t39677 = b3p*t39674;
                double t39678 = b4p*t39632*t39675;
                double t39679 = b2p*c*t39671;
                double t39680 = t39676+t39677+t39678+t39679;
                double t39681 = 1.0/t39680;
                double t39682 = t39634*t39681*(1.0/2.0);
                double t39683 = t39682+1.0;
                double t39684 = log(t39683);
                double t39685 = a1p*c*t39671;
                double t39686 = t39685+1.0;
                double t39687 = c0p*t39684*t39686*2.0;
                double t39688 = rho_a[index]-rho_b[index];
                double t39689 = t39688*t39688;
                double t39690 = 1.0/t39670;
                double t39691 = t39690*t39688;
                double t39692 = 1.0/(t39670*t39670*t39670*t39670);
                double t39693 = t39689*t39689;
                double t39694 = t39691+1.0;
                double t39695 = pow(t39694,4.0/3.0);
                double t39696 = -t39691+1.0;
                double t39697 = pow(t39696,4.0/3.0);
                double t39698 = t39695+t39697-2.0;
                double t39699 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39700 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39701 = gcab*gcab;
                double t39702 = gamma_aa[index]*t39699*(1.0/2.0);
                double t39703 = gamma_bb[index]*t39700*(1.0/2.0);
                double t39704 = t39702+t39703;
                double t39705 = t39704*t39704;
                double t39706 = t39701*t39705;
                double t39707 = gcab*t39704*2.0;
                double t39708 = t39706+t39707+1.0;
                double t39709 = 1.0/(t39708*t39708);
                double t39710 = gcab*t39699;
                double t39711 = t39701*t39704*t39699;
                double t39712 = t39710+t39711;
                double t39713 = gcab*t39700;
                double t39714 = t39700*t39701*t39704;
                double t39715 = t39713+t39714;
                double t39716 = gcab*t39704;
                double t39717 = t39716+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t39669-t39651*t39648*(t39669-c0f*log((t39652*(1.0/2.0) \
                   )/(b1f*t39655+b3f*t39656+b2f*c*t39653+b4f*t39632*t39657)+1.0)*(a1f*c*t39653+1.0)*2.0))+t39670*(t39687- \
                   t39651*t39692*t39693*t39698*(t39687-c0f*log((t39652*(1.0/2.0))/(b1f*t39673+b3f*t39674+b2f*c*t39671+ \
                   b4f*t39632*t39675)+1.0)*(a1f*c*t39671+1.0)*2.0)+(Aa*t39651*t39698*log((1.0/2.0)/(Aa*(b1a*t39673+b3a* \
                   t39674+b2a*c*t39671+b4a*t39632*t39675))+1.0)*(t39692*t39693-1.0)*(a1a*c*t39671+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t39651*t39648*(c0p*t39643*t39645*2.0-c0f*log((t39652*(1.0/2.0))/(b1f*t39630+b3f*t39631+b2f*c*t39628+ \
                   b4f*t39632*t39633)+1.0)*(a1f*c*t39628+1.0)*2.0)-c0p*t39643*t39645*2.0))*(ccab1*t39700*t39701*1.0/(t39717* \
                   t39717)*t39699*(1.0/2.0)-(ccab2*t39700*t39701*t39699*(1.0/2.0))/t39708+ccab2*t39700*t39701*t39712* \
                   t39704*t39709+ccab2*t39701*t39704*t39715*t39709*t39699-ccab2*t39701*t39712*t39705*t39715*1.0/(t39708* \
                   t39708*t39708)*2.0+ccab2*t39700*(t39701*t39701)*t39705*t39709*t39699*(1.0/2.0)-ccab1*gcab*t39700*t39701* \
                   t39704*1.0/(t39717*t39717*t39717)*t39699*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39721 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39722 = c*t39721;
                double t39723 = sqrt(t39722);
                double t39724 = pow(t39722,3.0/2.0);
                double t39725 = c*c;
                double t39726 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39727 = 1.0/c0p;
                double t39728 = b1p*t39723;
                double t39729 = b3p*t39724;
                double t39730 = b4p*t39725*t39726;
                double t39731 = b2p*c*t39721;
                double t39732 = t39730+t39731+t39728+t39729;
                double t39733 = 1.0/t39732;
                double t39734 = t39733*t39727*(1.0/2.0);
                double t39735 = t39734+1.0;
                double t39736 = log(t39735);
                double t39737 = a1p*c*t39721;
                double t39738 = t39737+1.0;
                double t39739 = pow(2.0,1.0/3.0);
                double t39740 = t39739*2.0;
                double t39741 = t39740-2.0;
                double t39742 = two_13*2.0;
                double t39743 = t39742-2.0;
                double t39744 = 1.0/t39743;
                double t39745 = 1.0/c0f;
                double t39746 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39747 = c*t39746;
                double t39748 = sqrt(t39747);
                double t39749 = pow(t39747,3.0/2.0);
                double t39750 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39751 = b1p*t39748;
                double t39752 = b3p*t39749;
                double t39753 = b4p*t39750*t39725;
                double t39754 = b2p*c*t39746;
                double t39755 = t39751+t39752+t39753+t39754;
                double t39756 = 1.0/t39755;
                double t39757 = t39727*t39756*(1.0/2.0);
                double t39758 = t39757+1.0;
                double t39759 = log(t39758);
                double t39760 = a1p*c*t39746;
                double t39761 = t39760+1.0;
                double t39762 = c0p*t39761*t39759*2.0;
                double t39763 = rho_a[index]+rho_b[index];
                double t39764 = 1.0/pow(t39763,1.0/3.0);
                double t39765 = c*t39764;
                double t39766 = sqrt(t39765);
                double t39767 = pow(t39765,3.0/2.0);
                double t39768 = 1.0/pow(t39763,2.0/3.0);
                double t39769 = b1p*t39766;
                double t39770 = b3p*t39767;
                double t39771 = b4p*t39725*t39768;
                double t39772 = b2p*c*t39764;
                double t39773 = t39770+t39771+t39772+t39769;
                double t39774 = 1.0/t39773;
                double t39775 = t39727*t39774*(1.0/2.0);
                double t39776 = t39775+1.0;
                double t39777 = log(t39776);
                double t39778 = a1p*c*t39764;
                double t39779 = t39778+1.0;
                double t39780 = c0p*t39777*t39779*2.0;
                double t39781 = rho_a[index]-rho_b[index];
                double t39782 = t39781*t39781;
                double t39783 = 1.0/t39763;
                double t39784 = t39781*t39783;
                double t39785 = 1.0/(t39763*t39763*t39763*t39763);
                double t39786 = t39782*t39782;
                double t39787 = t39784+1.0;
                double t39788 = pow(t39787,4.0/3.0);
                double t39789 = -t39784+1.0;
                double t39790 = pow(t39789,4.0/3.0);
                double t39791 = t39790+t39788-2.0;
                double t39792 = gcab*gcab;
                double t39793 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t39794 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39795 = gamma_aa[index]*t39794*(1.0/2.0);
                double t39796 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39797 = gamma_bb[index]*t39796*(1.0/2.0);
                double t39798 = t39795+t39797;
                double t39799 = gcab*t39798;
                double t39800 = t39799+1.0;
                double t39801 = t39798*t39798;
                double t39802 = t39801*t39792;
                double t39803 = gcab*t39798*2.0;
                double t39804 = t39802+t39803+1.0;
                double t39806 = gcab*t39796;
                double t39807 = t39792*t39796*t39798;
                double t39805 = t39806+t39807;
                double t39808 = 1.0/(t39804*t39804);
                double t39809 = b1f*t39748;
                double t39810 = b3f*t39749;
                double t39811 = b4f*t39750*t39725;
                double t39812 = b2f*c*t39746;
                double t39813 = t39810+t39811+t39812+t39809;
                double t39814 = 1.0/t39813;
                double t39815 = t39814*t39745*(1.0/2.0);
                double t39816 = t39815+1.0;
                double t39817 = log(t39816);
                double t39818 = a1f*c*t39746;
                double t39819 = t39818+1.0;
                double t39820 = t39762-c0f*t39817*t39819*2.0;
                double t39821 = t39762-t39820*t39741*t39744;
                double t39822 = gcaa*gcaa;
                double t39823 = gamma_bb[index]*gcaa*t39796;
                double t39824 = t39823+1.0;
                double t39825 = gamma_bb[index]*gamma_bb[index];
                double t39826 = gamma_bb[index]*gcaa*t39796*2.0;
                double t39827 = t39822*t39825*t39793;
                double t39828 = t39826+t39827+1.0;
                double t39830 = gcaa*t39796*2.0;
                double t39831 = gamma_bb[index]*t39822*t39793*2.0;
                double t39829 = t39830+t39831;
                double t39832 = 1.0/(t39828*t39828);
                double t39833 = gx*gx;
                double t39834 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t39835 = gamma_bb[index]*gx*t39796;
                double t39836 = t39835+1.0;
                double t39837 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t39838 = gamma_bb[index]*gx*t39796*2.0;
                double t39839 = t39833*t39825*t39793;
                double t39840 = t39838+t39839+1.0;
                double t39842 = gx*t39796*2.0;
                double t39843 = gamma_bb[index]*t39833*t39793*2.0;
                double t39841 = t39842+t39843;
                double t39844 = 1.0/(t39840*t39840);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t39821+t39763*(t39780-t39744*t39791*t39785*t39786*(t39780- \
                   c0f*log((t39745*(1.0/2.0))/(b1f*t39766+b3f*t39767+b2f*c*t39764+b4f*t39725*t39768)+1.0)*(a1f*c*t39764+ \
                   1.0)*2.0)+(Aa*t39744*t39791*log((1.0/2.0)/(Aa*(b1a*t39766+b3a*t39767+b2a*c*t39764+b4a*t39725*t39768) \
                   )+1.0)*(t39785*t39786-1.0)*(a1a*c*t39764+1.0)*2.0)/d2fz0)+rho_a[index]*(t39741*t39744*(c0p*t39736* \
                   t39738*2.0-c0f*log((t39745*(1.0/2.0))/(b1f*t39723+b3f*t39724+b2f*c*t39721+b4f*t39725*t39726)+1.0)* \
                   (a1f*c*t39721+1.0)*2.0)-c0p*t39736*t39738*2.0))*(ccab1*1.0/(t39800*t39800)*t39792*t39793*(1.0/2.0) \
                   -(ccab2*t39792*t39793*(1.0/2.0))/t39804-ccab2*t39801*1.0/(t39804*t39804*t39804)*(t39805*t39805)*t39792* \
                   2.0+ccab2*t39801*t39808*(t39792*t39792)*t39793*(1.0/2.0)+ccab2*t39805*t39808*t39792*t39796*t39798* \
                   2.0-ccab1*gcab*1.0/(t39800*t39800*t39800)*t39792*t39793*t39798*(1.0/2.0))+rho_b[index]*t39821*(ccaa1* \
                   t39822*1.0/(t39824*t39824)*t39793*2.0-(ccaa2*t39822*t39793*2.0)/t39828+ccaa2*(t39822*t39822)*t39832* \
                   t39825*t39837*2.0-ccaa1*gamma_bb[index]*gcaa*t39822*1.0/(t39824*t39824*t39824)*t39834*2.0-ccaa2*t39822* \
                   t39825*1.0/(t39828*t39828*t39828)*t39793*(t39829*t39829)*2.0+ccaa2*gamma_bb[index]*t39822*t39832*t39793* \
                   t39829*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*t39833*1.0/(t39836*t39836)*t39793*2.0-(cx2*t39833*t39793* \
                   2.0)/t39840+cx2*(t39833*t39833)*t39825*t39844*t39837*2.0-cx1*gamma_bb[index]*gx*t39833*t39834*1.0/ \
                   (t39836*t39836*t39836)*2.0-cx2*1.0/(t39840*t39840*t39840)*(t39841*t39841)*t39833*t39825*t39793*2.0+ \
                   cx2*gamma_bb[index]*t39841*t39833*t39844*t39793*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t40213 = 1.0/pow(rho_b[index],1.0/3.0);
                double t40214 = c*t40213;
                double t40215 = sqrt(t40214);
                double t40216 = pow(t40214,3.0/2.0);
                double t40217 = c*c;
                double t40218 = 1.0/pow(rho_b[index],2.0/3.0);
                double t40219 = 1.0/c0p;
                double t40220 = b1p*t40215;
                double t40221 = b3p*t40216;
                double t40222 = b4p*t40217*t40218;
                double t40223 = b2p*c*t40213;
                double t40224 = t40220+t40221+t40222+t40223;
                double t40225 = 1.0/t40224;
                double t40226 = t40225*t40219*(1.0/2.0);
                double t40227 = t40226+1.0;
                double t40228 = log(t40227);
                double t40229 = a1p*c*t40213;
                double t40230 = t40229+1.0;
                double t40231 = gcaa*gcaa;
                double t40232 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t40233 = 1.0/pow(rho_b[index],8.0/3.0);
                double t40234 = gamma_bb[index]*gcaa*t40233;
                double t40235 = t40234+1.0;
                double t40236 = gamma_bb[index]*gamma_bb[index];
                double t40237 = gamma_bb[index]*gcaa*t40233*2.0;
                double t40238 = t40231*t40232*t40236;
                double t40239 = t40237+t40238+1.0;
                double t40241 = gcaa*t40233*2.0;
                double t40242 = gamma_bb[index]*t40231*t40232*2.0;
                double t40240 = t40241+t40242;
                double t40243 = 1.0/(t40239*t40239);
                double t40244 = gx*gx;
                double t40245 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t40246 = gamma_bb[index]*gx*t40233;
                double t40247 = t40246+1.0;
                double t40248 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t40249 = gamma_bb[index]*gx*t40233*2.0;
                double t40250 = t40232*t40244*t40236;
                double t40251 = t40250+t40249+1.0;
                double t40253 = gx*t40233*2.0;
                double t40254 = gamma_bb[index]*t40232*t40244*2.0;
                double t40252 = t40253+t40254;
                double t40255 = 1.0/(t40251*t40251);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t40215+b3f*t40216+b2f*c*t40213+b4f*t40217*t40218))+1.0)*(a1f*c*t40213+1.0)*2.0-c0p*t40230*t40228*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t40230*t40228*2.0)*(ccaa1*t40231*t40232*1.0/(t40235*t40235)*2.0-(ccaa2*t40231* \
                   t40232*2.0)/t40239+ccaa2*(t40231*t40231)*t40243*t40236*t40248*2.0-ccaa1*gamma_bb[index]*gcaa*t40231* \
                   1.0/(t40235*t40235*t40235)*t40245*2.0-ccaa2*t40231*(t40240*t40240)*t40232*t40236*1.0/(t40239*t40239* \
                   t40239)*2.0+ccaa2*gamma_bb[index]*t40231*t40240*t40232*t40243*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
                   t40232*t40244*1.0/(t40247*t40247)*2.0-(cx2*t40232*t40244*2.0)/t40251+cx2*(t40244*t40244)*t40236*t40255* \
                   t40248*2.0-cx1*gamma_bb[index]*gx*t40244*t40245*1.0/(t40247*t40247*t40247)*2.0-cx2*t40232*1.0/(t40251* \
                   t40251*t40251)*(t40252*t40252)*t40244*t40236*2.0+cx2*gamma_bb[index]*t40232*t40252*t40244*t40255*4.0) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

