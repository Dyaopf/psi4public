/**********************************************************
* B97_2_functional.cc: definitions for B97_2_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "B97_2_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_2_Functional::B97_2_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B97_2";
    description_ = "B97-2 Power Series GGA";
    citation_ = "P.J. Wilson et. al., J. Chem. Phys., 115(20), 9233-9242, 2001";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 9.9984899999999999E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 1.4062600000000001E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -7.4405999999999999E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 5.8580800000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -6.9168200000000002E-01;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 3.9479599999999998E-01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 8.2764199999999999E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 4.7840000000000001E-02;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.7612500000000000E+00;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_2_Functional::~B97_2_Functional()
{
}
void B97_2_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t40987 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40988 = c*t40987;
            double t40989 = sqrt(t40988);
            double t40990 = pow(t40988,3.0/2.0);
            double t40991 = c*c;
            double t40992 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40993 = 1.0/c0p;
            double t40994 = b1p*t40989;
            double t40995 = b3p*t40990;
            double t40996 = b4p*t40991*t40992;
            double t40997 = b2p*c*t40987;
            double t40998 = t40994+t40995+t40996+t40997;
            double t40999 = 1.0/t40998;
            double t41000 = t40993*t40999*(1.0/2.0);
            double t41001 = t41000+1.0;
            double t41002 = log(t41001);
            double t41003 = a1p*c*t40987;
            double t41004 = t41003+1.0;
            double t41005 = rho_a[index]*2.0;
            double t41006 = 1.0/pow(t41005,1.0/3.0);
            double t41007 = c*t41006;
            double t41008 = 1.0/pow(rho_a[index],8.0/3.0);
            double t41009 = gamma_aa[index]*gamma_aa[index];
            double t41010 = gcab*gcab;
            double t41011 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t41012 = gx*gx;
            double t41013 = pow(2.0,1.0/3.0);
            double t41014 = t41013*2.0;
            double t41015 = t41014-2.0;
            double t41016 = two_13*2.0;
            double t41017 = t41016-2.0;
            double t41018 = 1.0/t41017;
            double t41019 = 1.0/c0f;
            double t41020 = b1f*t40989;
            double t41021 = b3f*t40990;
            double t41022 = b4f*t40991*t40992;
            double t41023 = b2f*c*t40987;
            double t41024 = t41020+t41021+t41022+t41023;
            double t41025 = 1.0/t41024;
            double t41026 = t41025*t41019*(1.0/2.0);
            double t41027 = t41026+1.0;
            double t41028 = log(t41027);
            double t41029 = a1f*c*t40987;
            double t41030 = t41029+1.0;
            double t41031 = c0f*t41030*t41028*2.0;
            double t41032 = c0p*t41002*t41004*2.0;
            double t41033 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t41032+t41015*t41018*(t41031-c0p*t41002*t41004*2.0))*2.0-c0p* \
               rho_a[index]*log((t40993*(1.0/2.0))/(b1p*sqrt(t41007)+b3p*pow(t41007,3.0/2.0)+b4p*t40991*1.0/pow(t41005,2.0/ \
               3.0)+b2p*c*t41006)+1.0)*(a1p*c*t41006+1.0)*4.0)*(ccab0+(ccab2*t41010*t41011*t41009)/(gamma_aa[index]* \
               gcab*t41008*2.0+t41010*t41011*t41009+1.0)+(ccab1*gamma_aa[index]*gcab*t41008)/(gamma_aa[index]*gcab* \
               t41008+1.0))-rho_a[index]*(t41032+t41015*t41018*(t41031-t41032))*(ccaa0+(ccaa2*t41011*t41033*t41009) \
               /(gamma_aa[index]*gcaa*t41008*2.0+t41011*t41033*t41009+1.0)+(ccaa1*gamma_aa[index]*gcaa*t41008)/(gamma_aa[index]* \
               gcaa*t41008+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t41011*t41012*t41009)/(gamma_aa[index]* \
               gx*t41008*2.0+t41011*t41012*t41009+1.0)+(cx1*gamma_aa[index]*gx*t41008)/(gamma_aa[index]*gx*t41008+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t41035 = 1.0/pow(rho_a[index],1.0/3.0);
            double t41036 = c*t41035;
            double t41037 = sqrt(t41036);
            double t41038 = pow(t41036,3.0/2.0);
            double t41039 = c*c;
            double t41040 = 1.0/pow(rho_a[index],2.0/3.0);
            double t41041 = 1.0/c0p;
            double t41042 = b1p*t41037;
            double t41043 = b3p*t41038;
            double t41044 = b4p*t41040*t41039;
            double t41045 = b2p*c*t41035;
            double t41046 = t41042+t41043+t41044+t41045;
            double t41047 = 1.0/t41046;
            double t41048 = t41041*t41047*(1.0/2.0);
            double t41049 = t41048+1.0;
            double t41050 = log(t41049);
            double t41051 = a1p*c*t41035;
            double t41052 = t41051+1.0;
            double t41053 = 1.0/pow(rho_a[index],8.0/3.0);
            double t41054 = gamma_aa[index]*gamma_aa[index];
            double t41055 = gcaa*gcaa;
            double t41056 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t41057 = pow(2.0,1.0/3.0);
            double t41058 = t41057*2.0;
            double t41059 = t41058-2.0;
            double t41060 = two_13*2.0;
            double t41061 = t41060-2.0;
            double t41062 = 1.0/t41061;
            double t41063 = 1.0/c0f;
            double t41064 = b1f*t41037;
            double t41065 = b3f*t41038;
            double t41066 = b4f*t41040*t41039;
            double t41067 = b2f*c*t41035;
            double t41068 = t41064+t41065+t41066+t41067;
            double t41069 = 1.0/t41068;
            double t41070 = t41063*t41069*(1.0/2.0);
            double t41071 = t41070+1.0;
            double t41072 = log(t41071);
            double t41073 = a1f*c*t41035;
            double t41074 = t41073+1.0;
            double t41075 = c0f*t41072*t41074*2.0;
            double t41076 = c0p*t41050*t41052*2.0;
            double t41077 = rho_a[index]*2.0;
            double t41078 = 1.0/pow(t41077,1.0/3.0);
            double t41079 = c*t41078;
            double t41080 = gcab*gcab;
            double t41081 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t41082 = gamma_aa[index]*gcab*t41053;
            double t41083 = t41082+1.0;
            double t41084 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t41085 = gamma_aa[index]*gcab*t41053*2.0;
            double t41086 = t41080*t41054*t41056;
            double t41087 = t41085+t41086+1.0;
            double t41088 = 1.0/t41083;
            double t41089 = 1.0/t41087;
            double t41090 = sqrt(t41079);
            double t41091 = b1p*t41090;
            double t41092 = pow(t41079,3.0/2.0);
            double t41093 = b3p*t41092;
            double t41094 = b2p*c*t41078;
            double t41095 = 1.0/pow(t41077,2.0/3.0);
            double t41096 = b4p*t41039*t41095;
            double t41097 = t41091+t41093+t41094+t41096;
            double t41098 = 1.0/t41097;
            double t41099 = t41041*t41098*(1.0/2.0);
            double t41100 = t41099+1.0;
            double t41101 = a1p*c*t41078;
            double t41102 = t41101+1.0;
            double t41103 = 1.0/pow(t41077,4.0/3.0);
            double t41104 = log(t41100);
            double t41105 = 1.0/pow(rho_a[index],4.0/3.0);
            double t41106 = 1.0/pow(rho_a[index],5.0/3.0);
            double t41107 = 1.0/sqrt(t41036);
            double t41108 = 1.0/t41049;
            double t41109 = 1.0/(t41046*t41046);
            double t41110 = b4p*t41106*t41039*(2.0/3.0);
            double t41111 = b2p*c*t41105*(1.0/3.0);
            double t41112 = b1p*c*t41105*t41107*(1.0/6.0);
            double t41113 = b3p*c*t41105*t41037*(1.0/2.0);
            double t41114 = t41110+t41111+t41112+t41113;
            double t41115 = t41114*t41052*t41108*t41109;
            double t41116 = t41075-t41076;
            double t41117 = t41062*t41116*t41059;
            double t41118 = gx*gx;
            double t41119 = gamma_aa[index]*gx*t41053;
            double t41120 = t41119+1.0;
            double t41121 = 1.0/t41120;
            double t41122 = gamma_aa[index]*gx*t41053*2.0;
            double t41123 = t41054*t41118*t41056;
            double t41124 = t41122+t41123+1.0;
            double t41125 = 1.0/t41124;
            double t41126 = 1.0/t41071;
            double t41127 = 1.0/(t41068*t41068);
            double t41128 = b4f*t41106*t41039*(2.0/3.0);
            double t41129 = b2f*c*t41105*(1.0/3.0);
            double t41130 = b1f*c*t41105*t41107*(1.0/6.0);
            double t41131 = b3f*c*t41105*t41037*(1.0/2.0);
            double t41132 = t41130+t41131+t41128+t41129;
            double t41133 = a1f*c*c0f*t41105*t41072*(2.0/3.0);
            double t41134 = a1p*c*c0p*t41050*t41105*(2.0/3.0);
            double t41135 = gamma_aa[index]*gcaa*t41053;
            double t41136 = t41135+1.0;
            double t41137 = 1.0/t41136;
            double t41138 = ccaa1*gamma_aa[index]*gcaa*t41053*t41137;
            double t41139 = gamma_aa[index]*gcaa*t41053*2.0;
            double t41140 = t41054*t41055*t41056;
            double t41141 = t41140+t41139+1.0;
            double t41142 = 1.0/t41141;
            double t41143 = ccaa2*t41142*t41054*t41055*t41056;
            double t41144 = ccaa0+t41143+t41138;
            double t41145 = t41117+t41076;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t41053*t41088+ccab2*t41080*t41054*t41056*t41089) \
               *(-t41117-t41076+rho_a[index]*((t41102*1.0/(t41097*t41097)*(b4p*t41039*1.0/pow(t41077,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t41103*(1.0/3.0)+b3p*c*t41103*t41090*(1.0/2.0)+b1p*c*t41103*1.0/sqrt(t41079)*(1.0/6.0)) \
               )/t41100-a1p*c*c0p*t41103*t41104*(2.0/3.0))*2.0+rho_a[index]*(-t41115+t41134+t41062*t41059*(t41115+ \
               t41133-t41132*t41126*t41127*t41074-a1p*c*c0p*t41050*t41105*(2.0/3.0)))+c0p*t41102*t41104*2.0)-(rho_a[index]* \
               t41145*2.0-c0p*rho_a[index]*t41102*t41104*4.0)*(ccab1*gamma_aa[index]*gcab*t41084*t41088*(4.0/3.0) \
               +ccab2*t41080*t41054*t41081*t41089*(8.0/3.0)-ccab1*t41080*t41054*t41081*1.0/(t41083*t41083)*(4.0/3.0) \
               -ccab2*t41080*t41054*t41056*1.0/(t41087*t41087)*(gamma_aa[index]*gcab*t41084*(8.0/3.0)+t41080*t41054* \
               t41081*(8.0/3.0)))-t41144*(t41076+t41062*t41059*(t41075-c0p*t41050*t41052*2.0))+rho_a[index]*t41145* \
               (ccaa1*gamma_aa[index]*gcaa*t41137*t41084*(8.0/3.0)+ccaa2*t41142*t41054*t41081*t41055*(1.6E1/3.0)- \
               ccaa1*t41054*t41081*t41055*1.0/(t41136*t41136)*(8.0/3.0)-ccaa2*1.0/(t41141*t41141)*t41054*t41055*t41056* \
               (gamma_aa[index]*gcaa*t41084*(1.6E1/3.0)+t41054*t41081*t41055*(1.6E1/3.0)))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t41121*t41053+cx2*t41125*t41054*t41118*t41056)*(4.0/3.0)+rho_a[index]* \
               t41144*(-t41115+t41134+t41062*t41059*(t41115+t41133-t41134-t41132*t41126*t41127*t41074))-c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t41121*t41084*(8.0/3.0)+cx2*t41125*t41054*t41081*t41118*(1.6E1/3.0)-cx1* \
               1.0/(t41120*t41120)*t41054*t41081*t41118*(8.0/3.0)-cx2*1.0/(t41124*t41124)*t41054*t41118*t41056*(gamma_aa[index]* \
               gx*t41084*(1.6E1/3.0)+t41054*t41081*t41118*(1.6E1/3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t41147 = 1.0/pow(rho_a[index],1.0/3.0);
                double t41148 = c*t41147;
                double t41149 = sqrt(t41148);
                double t41150 = pow(t41148,3.0/2.0);
                double t41151 = c*c;
                double t41152 = 1.0/pow(rho_a[index],2.0/3.0);
                double t41153 = 1.0/c0p;
                double t41154 = b1p*t41149;
                double t41155 = b3p*t41150;
                double t41156 = b4p*t41151*t41152;
                double t41157 = b2p*c*t41147;
                double t41158 = t41154+t41155+t41156+t41157;
                double t41159 = 1.0/t41158;
                double t41160 = t41153*t41159*(1.0/2.0);
                double t41161 = t41160+1.0;
                double t41162 = log(t41161);
                double t41163 = a1p*c*t41147;
                double t41164 = t41163+1.0;
                double t41165 = rho_a[index]*2.0;
                double t41166 = 1.0/pow(t41165,1.0/3.0);
                double t41167 = c*t41166;
                double t41168 = 1.0/pow(rho_a[index],8.0/3.0);
                double t41169 = gcab*gcab;
                double t41170 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t41171 = gamma_aa[index]*gcab*t41168;
                double t41172 = t41171+1.0;
                double t41173 = gamma_aa[index]*gamma_aa[index];
                double t41174 = gamma_aa[index]*gcab*t41168*2.0;
                double t41175 = t41170*t41173*t41169;
                double t41176 = t41174+t41175+1.0;
                double t41177 = gx*gx;
                double t41178 = gamma_aa[index]*gx*t41168;
                double t41179 = t41178+1.0;
                double t41180 = gamma_aa[index]*gx*t41168*2.0;
                double t41181 = t41170*t41173*t41177;
                double t41182 = t41180+t41181+1.0;
                double t41183 = pow(2.0,1.0/3.0);
                double t41184 = t41183*2.0;
                double t41185 = t41184-2.0;
                double t41186 = two_13*2.0;
                double t41187 = t41186-2.0;
                double t41188 = 1.0/t41187;
                double t41189 = 1.0/c0f;
                double t41190 = b1f*t41149;
                double t41191 = b3f*t41150;
                double t41192 = b4f*t41151*t41152;
                double t41193 = b2f*c*t41147;
                double t41194 = t41190+t41191+t41192+t41193;
                double t41195 = 1.0/t41194;
                double t41196 = t41195*t41189*(1.0/2.0);
                double t41197 = t41196+1.0;
                double t41198 = log(t41197);
                double t41199 = a1f*c*t41147;
                double t41200 = t41199+1.0;
                double t41201 = c0f*t41200*t41198*2.0;
                double t41202 = c0p*t41162*t41164*2.0;
                double t41203 = gcaa*gcaa;
                double t41204 = gamma_aa[index]*gcaa*t41168;
                double t41205 = t41204+1.0;
                double t41206 = gamma_aa[index]*gcaa*t41168*2.0;
                double t41207 = t41203*t41170*t41173;
                double t41208 = t41206+t41207+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t41202+t41185*t41188*(t41201-c0p*t41162*t41164*2.0))*2.0-c0p* \
                   rho_a[index]*log((t41153*(1.0/2.0))/(b1p*sqrt(t41167)+b3p*pow(t41167,3.0/2.0)+b4p*t41151*1.0/pow(t41165,2.0/ \
                   3.0)+b2p*c*t41166)+1.0)*(a1p*c*t41166+1.0)*4.0)*((ccab1*gcab*t41168*(1.0/2.0))/t41172-ccab1*gamma_aa[index]* \
                   t41170*1.0/(t41172*t41172)*t41169*(1.0/2.0)+(ccab2*gamma_aa[index]*t41170*t41169)/t41176-ccab2*t41170* \
                   t41173*1.0/(t41176*t41176)*t41169*(gcab*t41168+gamma_aa[index]*t41170*t41169))*2.0-rho_a[index]*(t41202+ \
                   t41185*t41188*(t41201-t41202))*((ccaa1*gcaa*t41168)/t41205-ccaa1*gamma_aa[index]*t41203*1.0/(t41205* \
                   t41205)*t41170+(ccaa2*gamma_aa[index]*t41203*t41170*2.0)/t41208-ccaa2*t41203*t41170*1.0/(t41208*t41208) \
                   *t41173*(gcaa*t41168*2.0+gamma_aa[index]*t41203*t41170*2.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t41168)/t41179-cx1*gamma_aa[index]*t41170*t41177*1.0/(t41179*t41179)+(cx2*gamma_aa[index]*t41170* \
                   t41177*2.0)/t41182-cx2*t41170*t41173*1.0/(t41182*t41182)*t41177*(gx*t41168*2.0+gamma_aa[index]*t41170* \
                   t41177*2.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t41211 = 1.0/pow(rho_a[index],1.0/3.0);
            double t41212 = c*t41211;
            double t41213 = sqrt(t41212);
            double t41214 = pow(t41212,3.0/2.0);
            double t41215 = c*c;
            double t41216 = 1.0/pow(rho_a[index],2.0/3.0);
            double t41217 = 1.0/c0p;
            double t41218 = b1p*t41213;
            double t41219 = b3p*t41214;
            double t41220 = b4p*t41215*t41216;
            double t41221 = b2p*c*t41211;
            double t41222 = t41220+t41221+t41218+t41219;
            double t41223 = 1.0/t41222;
            double t41224 = t41223*t41217*(1.0/2.0);
            double t41225 = t41224+1.0;
            double t41226 = log(t41225);
            double t41227 = a1p*c*t41211;
            double t41228 = t41227+1.0;
            double t41229 = rho_a[index]*2.0;
            double t41230 = 1.0/pow(t41229,1.0/3.0);
            double t41231 = c*t41230;
            double t41232 = 1.0/pow(rho_a[index],8.0/3.0);
            double t41233 = gamma_aa[index]*gamma_aa[index];
            double t41234 = gcab*gcab;
            double t41235 = gamma_aa[index]*gcab*t41232;
            double t41236 = t41235+1.0;
            double t41237 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t41238 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t41243 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t41244 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t41245 = gamma_aa[index]*gcab*t41244*(8.0/3.0);
            double t41246 = t41233*t41234*t41243*(8.0/3.0);
            double t41239 = t41245+t41246;
            double t41240 = gamma_aa[index]*gcab*t41232*2.0;
            double t41241 = t41233*t41234*t41238;
            double t41242 = t41240+t41241+1.0;
            double t41247 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t41248 = 1.0/(t41242*t41242);
            double t41249 = 1.0/t41236;
            double t41250 = 1.0/t41242;
            double t41251 = sqrt(t41231);
            double t41252 = b1p*t41251;
            double t41253 = pow(t41231,3.0/2.0);
            double t41254 = b3p*t41253;
            double t41255 = b2p*c*t41230;
            double t41256 = 1.0/pow(t41229,2.0/3.0);
            double t41257 = b4p*t41215*t41256;
            double t41258 = t41252+t41254+t41255+t41257;
            double t41259 = 1.0/t41258;
            double t41260 = t41217*t41259*(1.0/2.0);
            double t41261 = t41260+1.0;
            double t41262 = a1p*c*t41230;
            double t41263 = t41262+1.0;
            double t41264 = 1.0/pow(t41229,8.0/3.0);
            double t41265 = 1.0/pow(t41229,7.0/3.0);
            double t41266 = 1.0/sqrt(t41231);
            double t41267 = 1.0/t41261;
            double t41268 = 1.0/pow(t41229,4.0/3.0);
            double t41271 = b2p*c*t41268*(1.0/3.0);
            double t41272 = 1.0/pow(t41229,5.0/3.0);
            double t41273 = b4p*t41215*t41272*(2.0/3.0);
            double t41274 = b1p*c*t41266*t41268*(1.0/6.0);
            double t41275 = b3p*c*t41251*t41268*(1.0/2.0);
            double t41269 = t41271+t41273+t41274+t41275;
            double t41270 = log(t41261);
            double t41276 = t41269*t41269;
            double t41277 = two_13*2.0;
            double t41278 = t41277-2.0;
            double t41279 = 1.0/t41278;
            double t41280 = 1.0/(t41258*t41258);
            double t41281 = pow(2.0,1.0/3.0);
            double t41282 = t41281*2.0;
            double t41283 = t41282-2.0;
            double t41284 = a1f*c*t41211;
            double t41285 = t41284+1.0;
            double t41286 = 1.0/c0f;
            double t41287 = b1f*t41213;
            double t41288 = b3f*t41214;
            double t41289 = b4f*t41215*t41216;
            double t41290 = b2f*c*t41211;
            double t41291 = t41290+t41287+t41288+t41289;
            double t41292 = 1.0/t41291;
            double t41293 = t41292*t41286*(1.0/2.0);
            double t41294 = t41293+1.0;
            double t41295 = 1.0/pow(rho_a[index],4.0/3.0);
            double t41297 = 1.0/pow(rho_a[index],5.0/3.0);
            double t41298 = 1.0/sqrt(t41212);
            double t41304 = b4f*t41215*t41297*(2.0/3.0);
            double t41305 = b2f*c*t41295*(1.0/3.0);
            double t41306 = b1f*c*t41295*t41298*(1.0/6.0);
            double t41307 = b3f*c*t41213*t41295*(1.0/2.0);
            double t41296 = t41304+t41305+t41306+t41307;
            double t41309 = b4p*t41215*t41297*(2.0/3.0);
            double t41310 = b2p*c*t41295*(1.0/3.0);
            double t41311 = b1p*c*t41295*t41298*(1.0/6.0);
            double t41312 = b3p*c*t41213*t41295*(1.0/2.0);
            double t41299 = t41310+t41311+t41312+t41309;
            double t41300 = 1.0/t41294;
            double t41301 = 1.0/pow(rho_a[index],7.0/3.0);
            double t41302 = 1.0/t41225;
            double t41303 = 1.0/pow(t41212,3.0/2.0);
            double t41308 = t41296*t41296;
            double t41313 = t41299*t41299;
            double t41314 = log(t41294);
            double t41315 = 1.0/(t41291*t41291);
            double t41316 = 1.0/(t41222*t41222);
            double t41317 = 1.0/(t41222*t41222*t41222);
            double t41318 = t41302*t41313*t41317*t41228*2.0;
            double t41319 = b4p*t41232*t41215*(1.0E1/9.0);
            double t41320 = b2p*c*t41301*(4.0/9.0);
            double t41321 = b3p*t41232*t41215*t41298*(1.0/1.2E1);
            double t41322 = b1p*c*t41301*t41298*(2.0/9.0);
            double t41323 = b3p*c*t41301*t41213*(2.0/3.0);
            double t41411 = b1p*t41303*t41232*t41215*(1.0/3.6E1);
            double t41324 = t41320+t41321-t41411+t41322+t41323+t41319;
            double t41325 = 1.0/(t41225*t41225);
            double t41326 = 1.0/(t41222*t41222*t41222*t41222);
            double t41327 = a1p*c*c0p*t41301*t41226*(8.0/9.0);
            double t41328 = c0f*t41314*t41285*2.0;
            double t41329 = c0p*t41226*t41228*2.0;
            double t41330 = gcaa*gcaa;
            double t41331 = gamma_aa[index]*gcaa*t41232;
            double t41332 = t41331+1.0;
            double t41333 = gamma_aa[index]*gcaa*t41232*2.0;
            double t41334 = t41330*t41233*t41238;
            double t41335 = t41333+t41334+1.0;
            double t41336 = ccab1*gamma_aa[index]*gcab*t41232*t41249;
            double t41337 = ccab2*t41250*t41233*t41234*t41238;
            double t41338 = ccab0+t41336+t41337;
            double t41339 = b2p*c*t41265*(4.0/9.0);
            double t41340 = b4p*t41215*t41264*(1.0E1/9.0);
            double t41341 = 1.0/pow(t41231,3.0/2.0);
            double t41342 = b3p*t41215*t41264*t41266*(1.0/1.2E1);
            double t41343 = b1p*c*t41265*t41266*(2.0/9.0);
            double t41344 = b3p*c*t41251*t41265*(2.0/3.0);
            double t41345 = t41340+t41342+t41343+t41344+t41339-b1p*t41215*t41341*t41264*(1.0/3.6E1);
            double t41346 = t41280*t41263*t41345*t41267;
            double t41347 = 1.0/(t41258*t41258*t41258);
            double t41348 = 1.0/(t41261*t41261);
            double t41349 = 1.0/(t41258*t41258*t41258*t41258);
            double t41350 = t41217*t41263*t41276*t41348*t41349*(1.0/2.0);
            double t41351 = 1.0/d2fz0;
            double t41352 = 1.0/(rho_a[index]*rho_a[index]);
            double t41353 = 1.0/Aa;
            double t41354 = b1a*t41251;
            double t41355 = b3a*t41253;
            double t41356 = b2a*c*t41230;
            double t41357 = b4a*t41215*t41256;
            double t41358 = t41354+t41355+t41356+t41357;
            double t41359 = 1.0/t41358;
            double t41360 = t41353*t41359*(1.0/2.0);
            double t41361 = t41360+1.0;
            double t41362 = log(t41361);
            double t41363 = a1a*c*t41230;
            double t41364 = t41363+1.0;
            double t41365 = Aa*t41351*t41352*t41362*t41364*t41279*(4.0/9.0);
            double t41366 = a1p*c*t41280*t41267*t41268*t41269*(2.0/3.0);
            double t41367 = a1p*c*c0p*t41270*t41268*(4.0/3.0);
            double t41368 = t41328-t41329;
            double t41369 = t41283*t41368*t41279;
            double t41370 = t41329+t41369;
            double t41371 = 1.0/pow(rho_a[index],1.0E1);
            double t41372 = 1.0/(t41236*t41236*t41236);
            double t41373 = ccab1*gamma_aa[index]*gcab*t41233*t41234*t41371*t41372*(3.2E1/9.0);
            double t41374 = 1.0/(t41236*t41236);
            double t41375 = t41239*t41239;
            double t41376 = 1.0/(t41242*t41242*t41242);
            double t41377 = ccab2*t41233*t41234*t41238*t41375*t41376*2.0;
            double t41378 = t41300*t41315*t41285*t41296;
            double t41379 = a1p*c*c0p*t41226*t41295*(2.0/3.0);
            double t41381 = t41302*t41316*t41228*t41299;
            double t41384 = a1f*c*c0f*t41314*t41295*(2.0/3.0);
            double t41380 = -t41381-t41384+t41378+t41379;
            double t41382 = 1.0/t41332;
            double t41383 = 1.0/t41335;
            double t41385 = t41380*t41283*t41279;
            double t41386 = t41381+t41385-t41379;
            double t41387 = gx*gx;
            double t41388 = gamma_aa[index]*gx*t41232;
            double t41389 = t41388+1.0;
            double t41394 = gamma_aa[index]*gx*t41244*(1.6E1/3.0);
            double t41395 = t41233*t41243*t41387*(1.6E1/3.0);
            double t41390 = t41394+t41395;
            double t41391 = gamma_aa[index]*gx*t41232*2.0;
            double t41392 = t41233*t41238*t41387;
            double t41393 = t41391+t41392+1.0;
            double t41396 = 1.0/(t41393*t41393);
            double t41397 = 1.0/t41389;
            double t41398 = 1.0/t41393;
            double t41399 = 1.0/(t41389*t41389);
            double t41400 = ccaa1*gamma_aa[index]*gcaa*t41232*t41382;
            double t41401 = ccaa2*t41330*t41233*t41238*t41383;
            double t41402 = ccaa0+t41400+t41401;
            double t41403 = 1.0/(t41291*t41291*t41291);
            double t41404 = b4f*t41232*t41215*(1.0E1/9.0);
            double t41405 = b2f*c*t41301*(4.0/9.0);
            double t41406 = b3f*t41232*t41215*t41298*(1.0/1.2E1);
            double t41407 = b1f*c*t41301*t41298*(2.0/9.0);
            double t41408 = b3f*c*t41301*t41213*(2.0/3.0);
            double t41409 = t41404+t41405+t41406+t41407+t41408-b1f*t41303*t41232*t41215*(1.0/3.6E1);
            double t41410 = t41300*t41315*t41409*t41285;
            double t41412 = t41302*t41324*t41316*t41228;
            double t41413 = 1.0/(t41294*t41294);
            double t41414 = 1.0/(t41291*t41291*t41291*t41291);
            double t41415 = t41413*t41414*t41308*t41285*t41286*(1.0/2.0);
            double t41416 = t41313*t41217*t41325*t41326*t41228*(1.0/2.0);
            double t41417 = a1f*c*t41300*t41315*t41295*t41296*(2.0/3.0);
            double t41418 = a1p*c*t41302*t41316*t41295*t41299*(2.0/3.0);
            double t41419 = 1.0/(t41332*t41332);
            double t41420 = gamma_aa[index]*gcaa*t41244*(1.6E1/3.0);
            double t41421 = t41330*t41233*t41243*(1.6E1/3.0);
            double t41422 = t41420+t41421;
            double t41423 = 1.0/(t41335*t41335);
            double t41424 = ccaa1*gamma_aa[index]*gcaa*t41244*t41382*(8.0/3.0);
            double t41425 = ccaa2*t41330*t41233*t41243*t41383*(1.6E1/3.0);
            double t41426 = t41424+t41425-ccaa1*t41330*t41233*t41243*t41419*(8.0/3.0)-ccaa2*t41330*t41233*t41422* \
               t41423*t41238;
            v_rho_a_rho_a_[index] = t41370*t41426*2.0-t41402*t41386*2.0+(rho_a[index]*t41370*2.0-c0p*rho_a[index]* \
               t41270*t41263*4.0)*(t41373+t41377+ccab2*t41250*t41233*t41234*t41237*(3.2E1/9.0)-ccab1*t41233*t41234* \
               t41237*t41374*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t41233*t41233)*(t41234*t41234)*t41248* \
               (3.2E1/9.0)-ccab2*t41233*t41234*t41243*t41239*t41248*(1.6E1/3.0))+t41338*(t41367-rho_a[index]*(t41412+ \
               t41416-t41318-t41327+t41418+t41283*t41279*(t41410+t41415+t41318+t41327+t41417-t41300*t41403*t41308* \
               t41285*2.0-t41302*t41324*t41316*t41228-a1f*c*c0f*t41301*t41314*(8.0/9.0)-t41313*t41217*t41325*t41326* \
               t41228*(1.0/2.0)-a1p*c*t41302*t41316*t41295*t41299*(2.0/3.0)))+rho_a[index]*(t41350+t41346+t41365+ \
               t41366-t41263*t41347*t41267*t41276*2.0-a1p*c*c0p*t41270*t41265*(8.0/9.0))*2.0+t41380*t41283*t41279* \
               2.0+t41302*t41316*t41228*t41299*2.0-t41280*t41263*t41267*t41269*2.0-a1p*c*c0p*t41226*t41295*(4.0/3.0) \
               )-(ccab1*gamma_aa[index]*gcab*t41244*t41249*(4.0/3.0)+ccab2*t41250*t41233*t41234*t41243*(8.0/3.0)- \
               ccab1*t41233*t41234*t41243*t41374*(4.0/3.0)-ccab2*t41233*t41234*t41238*t41239*t41248)*(t41329+t41369+ \
               rho_a[index]*t41386-rho_a[index]*(t41280*t41263*t41267*t41269-a1p*c*c0p*t41270*t41268*(2.0/3.0))*2.0- \
               c0p*t41270*t41263*2.0)*4.0+(rho_a[index]*(t41329+t41283*t41279*(t41328-c0p*t41226*t41228*2.0))*2.0- \
               c0p*rho_a[index]*t41270*t41263*4.0)*(t41373+t41377+ccab1*gamma_aa[index]*gcab*t41247*t41249*(4.4E1/ \
               9.0)+ccab2*t41250*t41233*t41234*t41237*(4.0E1/3.0)-ccab1*t41233*t41234*t41237*t41374*(7.6E1/9.0)-ccab2* \
               t41233*t41234*t41243*t41239*t41248*(1.6E1/3.0)-ccab2*t41233*t41234*t41238*t41248*(gamma_aa[index]* \
               gcab*t41247*(8.8E1/9.0)+t41233*t41234*t41237*(4.0E1/3.0)))+t41338*(t41367+rho_a[index]*(t41350+t41346- \
               t41365+t41366-t41263*t41347*t41267*t41276*2.0-a1p*c*c0p*t41270*t41265*(8.0/9.0))*2.0-t41280*t41263* \
               t41267*t41269*2.0)+c0*t41216*(cx0+cx1*gamma_aa[index]*gx*t41232*t41397+cx2*t41233*t41238*t41387*t41398) \
               *(4.0/9.0)-rho_a[index]*t41370*(ccaa1*gamma_aa[index]*gcaa*t41247*t41382*(8.8E1/9.0)-ccaa1*t41330* \
               t41233*t41237*t41419*2.4E1+ccaa2*t41330*t41233*t41237*t41383*(3.04E2/9.0)-ccaa2*t41330*t41233*t41422* \
               t41243*t41423*(3.2E1/3.0)-ccaa2*t41330*t41233*t41423*t41238*(gamma_aa[index]*gcaa*t41247*(1.76E2/9.0) \
               +t41330*t41233*t41237*(3.04E2/9.0))+ccaa2*t41330*t41233*(t41422*t41422)*1.0/(t41335*t41335*t41335) \
               *t41238*2.0+ccaa1*gamma_aa[index]*gcaa*t41330*t41233*1.0/(t41332*t41332*t41332)*t41371*(1.28E2/9.0) \
               )+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t41247*t41397*(8.8E1/9.0)-cx1*t41233*t41237* \
               t41387*t41399*2.4E1+cx2*t41233*t41237*t41387*t41398*(3.04E2/9.0)-cx2*t41233*t41243*t41390*t41387*t41396* \
               (3.2E1/3.0)-cx2*t41233*t41238*t41387*t41396*(gamma_aa[index]*gx*t41247*(1.76E2/9.0)+t41233*t41237* \
               t41387*(3.04E2/9.0))+cx2*t41233*(t41390*t41390)*t41238*1.0/(t41393*t41393*t41393)*t41387*2.0+cx1*gamma_aa[index]* \
               gx*t41233*t41371*t41387*1.0/(t41389*t41389*t41389)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t41244*t41397*(8.0/3.0)-cx1*t41233*t41243*t41387*t41399*(8.0/3.0)+cx2*t41233*t41243* \
               t41387*t41398*(1.6E1/3.0)-cx2*t41233*t41390*t41238*t41387*t41396)*(8.0/3.0)+rho_a[index]*t41402*(t41412+ \
               t41416-t41318-t41327+t41418+t41283*t41279*(t41410-t41412+t41415-t41416+t41318+t41327+t41417-t41418- \
               t41300*t41403*t41308*t41285*2.0-a1f*c*c0f*t41301*t41314*(8.0/9.0)))+rho_a[index]*t41426*t41386*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t41428 = 1.0/pow(rho_a[index],8.0/3.0);
                double t41429 = gcab*gcab;
                double t41430 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t41431 = gamma_aa[index]*gcab*t41428;
                double t41432 = t41431+1.0;
                double t41433 = gamma_aa[index]*gamma_aa[index];
                double t41434 = gamma_aa[index]*gcab*t41428*2.0;
                double t41435 = t41430*t41433*t41429;
                double t41436 = t41434+t41435+1.0;
                double t41437 = rho_a[index]*2.0;
                double t41438 = 1.0/pow(t41437,1.0/3.0);
                double t41439 = c*t41438;
                double t41440 = sqrt(t41439);
                double t41441 = b1p*t41440;
                double t41442 = pow(t41439,3.0/2.0);
                double t41443 = b3p*t41442;
                double t41444 = b2p*c*t41438;
                double t41445 = c*c;
                double t41446 = 1.0/pow(t41437,2.0/3.0);
                double t41447 = b4p*t41445*t41446;
                double t41448 = t41441+t41443+t41444+t41447;
                double t41449 = 1.0/pow(t41437,4.0/3.0);
                double t41450 = 1.0/c0p;
                double t41451 = 1.0/t41448;
                double t41452 = t41450*t41451*(1.0/2.0);
                double t41453 = t41452+1.0;
                double t41454 = 1.0/pow(rho_a[index],1.0/3.0);
                double t41455 = c*t41454;
                double t41456 = sqrt(t41455);
                double t41457 = b1f*t41456;
                double t41458 = pow(t41455,3.0/2.0);
                double t41459 = b3f*t41458;
                double t41460 = 1.0/pow(rho_a[index],2.0/3.0);
                double t41461 = b4f*t41460*t41445;
                double t41462 = b2f*c*t41454;
                double t41463 = t41461+t41462+t41457+t41459;
                double t41464 = 1.0/pow(rho_a[index],4.0/3.0);
                double t41465 = b1p*t41456;
                double t41466 = b3p*t41458;
                double t41467 = b4p*t41460*t41445;
                double t41468 = b2p*c*t41454;
                double t41469 = t41465+t41466+t41467+t41468;
                double t41470 = 1.0/pow(rho_a[index],5.0/3.0);
                double t41471 = 1.0/sqrt(t41455);
                double t41472 = 1.0/c0f;
                double t41473 = 1.0/t41463;
                double t41474 = t41472*t41473*(1.0/2.0);
                double t41475 = t41474+1.0;
                double t41476 = 1.0/t41469;
                double t41477 = t41450*t41476*(1.0/2.0);
                double t41478 = t41477+1.0;
                double t41479 = a1p*c*t41454;
                double t41480 = t41479+1.0;
                double t41481 = 1.0/t41478;
                double t41482 = 1.0/(t41469*t41469);
                double t41483 = b4p*t41470*t41445*(2.0/3.0);
                double t41484 = b2p*c*t41464*(1.0/3.0);
                double t41485 = b1p*c*t41471*t41464*(1.0/6.0);
                double t41486 = b3p*c*t41464*t41456*(1.0/2.0);
                double t41487 = t41483+t41484+t41485+t41486;
                double t41488 = t41480*t41481*t41482*t41487;
                double t41489 = log(t41478);
                double t41490 = log(t41453);
                double t41491 = a1p*c*t41438;
                double t41492 = t41491+1.0;
                double t41493 = pow(2.0,1.0/3.0);
                double t41494 = t41493*2.0;
                double t41495 = t41494-2.0;
                double t41496 = two_13*2.0;
                double t41497 = t41496-2.0;
                double t41498 = 1.0/t41497;
                double t41499 = log(t41475);
                double t41500 = a1f*c*t41454;
                double t41501 = t41500+1.0;
                double t41502 = c0f*t41501*t41499*2.0;
                double t41504 = c0p*t41480*t41489*2.0;
                double t41503 = t41502-t41504;
                double t41505 = gcaa*gcaa;
                double t41506 = gamma_aa[index]*gcaa*t41428;
                double t41507 = t41506+1.0;
                double t41508 = gamma_aa[index]*gcaa*t41428*2.0;
                double t41509 = t41430*t41433*t41505;
                double t41510 = t41508+t41509+1.0;
                double t41511 = t41503*t41495*t41498;
                double t41512 = t41511+t41504;
                double t41513 = 1.0/t41436;
                double t41514 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t41515 = 1.0/(t41432*t41432);
                double t41516 = 1.0/(t41436*t41436);
                double t41517 = gcab*t41428;
                double t41518 = gamma_aa[index]*t41430*t41429;
                double t41519 = t41517+t41518;
                double t41520 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t41521 = gamma_aa[index]*gcab*t41520*(8.0/3.0);
                double t41522 = t41433*t41514*t41429*(8.0/3.0);
                double t41523 = t41521+t41522;
                double t41524 = rho_a[index]*t41512*2.0;
                double t41525 = t41524-c0p*rho_a[index]*t41490*t41492*4.0;
                double t41526 = 1.0/t41432;
                double t41527 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t41528 = 1.0/(t41432*t41432*t41432);
                double t41529 = ccab2*gamma_aa[index]*t41430*t41523*t41516*t41429;
                double t41530 = ccab2*t41433*t41514*t41516*t41429*t41519*(8.0/3.0);
                double t41531 = 1.0/(t41436*t41436*t41436);
                double t41532 = 1.0/t41507;
                double t41533 = 1.0/t41510;
                double t41534 = 1.0/(t41507*t41507);
                double t41535 = 1.0/(t41510*t41510);
                double t41536 = gcaa*t41428*2.0;
                double t41537 = gamma_aa[index]*t41430*t41505*2.0;
                double t41538 = t41536+t41537;
                double t41539 = gamma_aa[index]*gcaa*t41520*(1.6E1/3.0);
                double t41540 = t41433*t41505*t41514*(1.6E1/3.0);
                double t41541 = t41540+t41539;
                double t41542 = gx*gx;
                double t41543 = gamma_aa[index]*gx*t41428;
                double t41544 = t41543+1.0;
                double t41545 = gamma_aa[index]*gx*t41428*2.0;
                double t41546 = t41430*t41433*t41542;
                double t41547 = t41545+t41546+1.0;
                double t41548 = 1.0/t41475;
                double t41549 = 1.0/(t41463*t41463);
                double t41550 = b4f*t41470*t41445*(2.0/3.0);
                double t41551 = b2f*c*t41464*(1.0/3.0);
                double t41552 = b1f*c*t41471*t41464*(1.0/6.0);
                double t41553 = b3f*c*t41464*t41456*(1.0/2.0);
                double t41554 = t41550+t41551+t41552+t41553;
                double t41555 = a1f*c*c0f*t41464*t41499*(2.0/3.0);
                double t41556 = a1p*c*c0p*t41464*t41489*(2.0/3.0);
                double t41557 = ccaa1*gcaa*t41532*t41428;
                double t41558 = ccaa2*gamma_aa[index]*t41430*t41505*t41533*2.0;
                double t41559 = t41557+t41558-ccaa1*gamma_aa[index]*t41430*t41505*t41534-ccaa2*t41430*t41433*t41505* \
                   t41535*t41538;
                double t41560 = 1.0/t41544;
                double t41561 = 1.0/t41547;
                double t41562 = 1.0/(t41544*t41544);
                double t41563 = 1.0/(t41547*t41547);
                double t41564 = gx*t41428*2.0;
                double t41565 = gamma_aa[index]*t41430*t41542*2.0;
                double t41566 = t41564+t41565;
                double t41567 = gamma_aa[index]*gx*t41520*(1.6E1/3.0);
                double t41568 = t41433*t41514*t41542*(1.6E1/3.0);
                double t41569 = t41567+t41568;
                v_rho_a_gamma_aa_[index] = -t41512*t41559+t41525*(t41530+t41529-ccab2*gamma_aa[index]*t41513*t41514* \
                   t41429*(4.0/3.0)+ccab1*gamma_aa[index]*t41514*t41515*t41429*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t41433*t41516*(t41429*t41429)*(4.0/3.0)-ccab1*gcab*t41433*t41527*t41429*t41528*(4.0/3.0)-ccab2* \
                   t41430*t41531*t41433*t41523*t41429*t41519*2.0)+t41525*(t41530+t41529-ccab1*gcab*t41520*t41526*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t41513*t41514*t41429*4.0+ccab1*gamma_aa[index]*t41514*t41515*t41429*(8.0/ \
                   3.0)+ccab2*t41430*t41433*t41516*t41429*(gcab*t41520*(8.0/3.0)+gamma_aa[index]*t41514*t41429*4.0)-ccab1* \
                   gcab*t41433*t41527*t41429*t41528*(4.0/3.0)-ccab2*t41430*t41531*t41433*t41523*t41429*t41519*2.0)-(ccab1* \
                   gcab*t41526*t41428*(1.0/2.0)+ccab2*gamma_aa[index]*t41430*t41513*t41429-ccab1*gamma_aa[index]*t41430* \
                   t41515*t41429*(1.0/2.0)-ccab2*t41430*t41433*t41516*t41429*t41519)*(rho_a[index]*((t41492*1.0/(t41448* \
                   t41448)*(b4p*t41445*1.0/pow(t41437,5.0/3.0)*(2.0/3.0)+b2p*c*t41449*(1.0/3.0)+b3p*c*t41440*t41449*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t41439)*t41449*(1.0/6.0)))/t41453-a1p*c*c0p*t41490*t41449*(2.0/3.0))*2.0+rho_a[index]* \
                   (t41556-t41488+t41495*t41498*(t41555+t41488-t41501*t41554*t41548*t41549-a1p*c*c0p*t41464*t41489*(2.0/ \
                   3.0)))+c0p*t41490*t41492*2.0-c0p*t41480*t41489*2.0-t41503*t41495*t41498)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t41560*t41428-cx1*gamma_aa[index]*t41430*t41542*t41562+cx2*gamma_aa[index]*t41430*t41542* \
                   t41561*2.0-cx2*t41430*t41433*t41542*t41563*t41566)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t41520*t41560*(8.0/3.0)-cx1*gamma_aa[index]*t41514*t41542*t41562*8.0+cx2*gamma_aa[index]*t41514*t41542* \
                   t41561*(3.2E1/3.0)-cx2*t41433*t41514*t41542*t41563*t41566*(1.6E1/3.0)+cx1*gx*t41433*t41542*1.0/(t41544* \
                   t41544*t41544)*t41527*(1.6E1/3.0)-cx2*t41430*t41433*t41542*t41563*(gx*t41520*(1.6E1/3.0)+gamma_aa[index]* \
                   t41514*t41542*(3.2E1/3.0))-cx2*gamma_aa[index]*t41430*t41542*t41563*t41569*2.0+cx2*t41430*t41433*t41542* \
                   1.0/(t41547*t41547*t41547)*t41566*t41569*2.0)+rho_a[index]*t41559*(t41556-t41488+t41495*t41498*(t41555- \
                   t41556+t41488-t41501*t41554*t41548*t41549))+rho_a[index]*t41512*(ccaa1*gcaa*t41520*t41532*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t41505*t41514*t41534*8.0+ccaa2*gamma_aa[index]*t41505*t41514*t41533*(3.2E1/ \
                   3.0)-ccaa2*t41433*t41505*t41514*t41535*t41538*(1.6E1/3.0)+ccaa1*gcaa*t41433*t41505*1.0/(t41507*t41507* \
                   t41507)*t41527*(1.6E1/3.0)-ccaa2*t41430*t41433*t41505*t41535*(gcaa*t41520*(1.6E1/3.0)+gamma_aa[index]* \
                   t41505*t41514*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t41430*t41505*t41541*t41535*2.0+ccaa2*1.0/(t41510* \
                   t41510*t41510)*t41430*t41433*t41505*t41541*t41538*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t41571 = 1.0/pow(rho_a[index],1.0/3.0);
                double t41572 = c*t41571;
                double t41573 = sqrt(t41572);
                double t41574 = pow(t41572,3.0/2.0);
                double t41575 = c*c;
                double t41576 = 1.0/pow(rho_a[index],2.0/3.0);
                double t41577 = 1.0/c0p;
                double t41578 = b1p*t41573;
                double t41579 = b3p*t41574;
                double t41580 = b4p*t41575*t41576;
                double t41581 = b2p*c*t41571;
                double t41582 = t41580+t41581+t41578+t41579;
                double t41583 = 1.0/t41582;
                double t41584 = t41583*t41577*(1.0/2.0);
                double t41585 = t41584+1.0;
                double t41586 = log(t41585);
                double t41587 = a1p*c*t41571;
                double t41588 = t41587+1.0;
                double t41589 = rho_a[index]*2.0;
                double t41590 = 1.0/pow(t41589,1.0/3.0);
                double t41591 = c*t41590;
                double t41592 = gcab*gcab;
                double t41593 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t41594 = 1.0/pow(rho_a[index],8.0/3.0);
                double t41595 = gamma_aa[index]*gcab*t41594;
                double t41596 = t41595+1.0;
                double t41597 = gamma_aa[index]*gamma_aa[index];
                double t41598 = gamma_aa[index]*gcab*t41594*2.0;
                double t41599 = t41592*t41593*t41597;
                double t41600 = t41598+t41599+1.0;
                double t41602 = gcab*t41594;
                double t41603 = gamma_aa[index]*t41592*t41593;
                double t41601 = t41602+t41603;
                double t41604 = 1.0/(t41600*t41600);
                double t41605 = pow(2.0,1.0/3.0);
                double t41606 = t41605*2.0;
                double t41607 = t41606-2.0;
                double t41608 = two_13*2.0;
                double t41609 = t41608-2.0;
                double t41610 = 1.0/t41609;
                double t41611 = 1.0/c0f;
                double t41612 = b1f*t41573;
                double t41613 = b3f*t41574;
                double t41614 = b4f*t41575*t41576;
                double t41615 = b2f*c*t41571;
                double t41616 = t41612+t41613+t41614+t41615;
                double t41617 = 1.0/t41616;
                double t41618 = t41611*t41617*(1.0/2.0);
                double t41619 = t41618+1.0;
                double t41620 = log(t41619);
                double t41621 = a1f*c*t41571;
                double t41622 = t41621+1.0;
                double t41623 = c0f*t41620*t41622*2.0;
                double t41624 = c0p*t41586*t41588*2.0;
                double t41625 = gcaa*gcaa;
                double t41626 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t41627 = gamma_aa[index]*gcaa*t41594;
                double t41628 = t41627+1.0;
                double t41629 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t41630 = gamma_aa[index]*gcaa*t41594*2.0;
                double t41631 = t41625*t41593*t41597;
                double t41632 = t41630+t41631+1.0;
                double t41634 = gcaa*t41594*2.0;
                double t41635 = gamma_aa[index]*t41625*t41593*2.0;
                double t41633 = t41634+t41635;
                double t41636 = 1.0/(t41632*t41632);
                double t41637 = gx*gx;
                double t41638 = gamma_aa[index]*gx*t41594;
                double t41639 = t41638+1.0;
                double t41640 = gamma_aa[index]*gx*t41594*2.0;
                double t41641 = t41637*t41593*t41597;
                double t41642 = t41640+t41641+1.0;
                double t41644 = gx*t41594*2.0;
                double t41645 = gamma_aa[index]*t41637*t41593*2.0;
                double t41643 = t41644+t41645;
                double t41646 = 1.0/(t41642*t41642);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t41624+t41610*t41607*(t41623-c0p*t41586*t41588*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t41577*(1.0/2.0))/(b1p*sqrt(t41591)+b3p*pow(t41591,3.0/2.0)+b4p*t41575* \
                   1.0/pow(t41589,2.0/3.0)+b2p*c*t41590)+1.0)*(a1p*c*t41590+1.0)*4.0)*((ccab2*t41592*t41593*(1.0/2.0) \
                   )/t41600-ccab1*t41592*t41593*1.0/(t41596*t41596)*(1.0/2.0)-ccab2*t41604*(t41592*t41592)*t41629*t41597* \
                   (1.0/2.0)+ccab1*gamma_aa[index]*gcab*t41626*t41592*1.0/(t41596*t41596*t41596)*(1.0/2.0)+ccab2*1.0/ \
                   (t41600*t41600*t41600)*(t41601*t41601)*t41592*t41593*t41597*2.0-ccab2*gamma_aa[index]*t41601*t41604* \
                   t41592*t41593*2.0)*4.0-rho_a[index]*(t41624+t41610*t41607*(t41623-t41624))*((ccaa2*t41625*t41593*2.0) \
                   /t41632-ccaa1*t41625*1.0/(t41628*t41628)*t41593*2.0-ccaa2*(t41625*t41625)*t41636*t41629*t41597*2.0+ \
                   ccaa1*gamma_aa[index]*gcaa*t41625*t41626*1.0/(t41628*t41628*t41628)*2.0+ccaa2*1.0/(t41632*t41632*t41632) \
                   *(t41633*t41633)*t41625*t41593*t41597*2.0-ccaa2*gamma_aa[index]*t41633*t41625*t41636*t41593*4.0)*2.0- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*t41637*t41593*1.0/(t41639*t41639)*2.0-(cx2*t41637*t41593*2.0)/t41642+ \
                   cx2*(t41637*t41637)*t41646*t41629*t41597*2.0-cx1*gamma_aa[index]*gx*t41626*t41637*1.0/(t41639*t41639* \
                   t41639)*2.0-cx2*1.0/(t41642*t41642*t41642)*(t41643*t41643)*t41637*t41593*t41597*2.0+cx2*gamma_aa[index]* \
                   t41643*t41637*t41646*t41593*4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void B97_2_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37426 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37427 = gamma_aa[index]*t37426*(1.0/2.0);
            double t37428 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37429 = gamma_bb[index]*t37428*(1.0/2.0);
            double t37424 = t37427+t37429;
            double t37425 = gcab*gcab;
            double t37430 = t37424*t37424;
            double t37431 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37432 = c*t37431;
            double t37433 = sqrt(t37432);
            double t37434 = pow(t37432,3.0/2.0);
            double t37435 = c*c;
            double t37436 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37437 = 1.0/c0p;
            double t37438 = b1p*t37433;
            double t37439 = b3p*t37434;
            double t37440 = b4p*t37435*t37436;
            double t37441 = b2p*c*t37431;
            double t37442 = t37440+t37441+t37438+t37439;
            double t37443 = 1.0/t37442;
            double t37444 = t37443*t37437*(1.0/2.0);
            double t37445 = t37444+1.0;
            double t37446 = log(t37445);
            double t37447 = a1p*c*t37431;
            double t37448 = t37447+1.0;
            double t37449 = pow(2.0,1.0/3.0);
            double t37450 = t37449*2.0;
            double t37451 = t37450-2.0;
            double t37452 = two_13*2.0;
            double t37453 = t37452-2.0;
            double t37454 = 1.0/t37453;
            double t37455 = 1.0/c0f;
            double t37456 = 1.0/pow(rho_b[index],1.0/3.0);
            double t37457 = c*t37456;
            double t37458 = sqrt(t37457);
            double t37459 = pow(t37457,3.0/2.0);
            double t37460 = 1.0/pow(rho_b[index],2.0/3.0);
            double t37461 = b1p*t37458;
            double t37462 = b3p*t37459;
            double t37463 = b4p*t37460*t37435;
            double t37464 = b2p*c*t37456;
            double t37465 = t37461+t37462+t37463+t37464;
            double t37466 = 1.0/t37465;
            double t37467 = t37437*t37466*(1.0/2.0);
            double t37468 = t37467+1.0;
            double t37469 = log(t37468);
            double t37470 = a1p*c*t37456;
            double t37471 = t37470+1.0;
            double t37472 = c0p*t37471*t37469*2.0;
            double t37473 = rho_a[index]+rho_b[index];
            double t37474 = 1.0/pow(t37473,1.0/3.0);
            double t37475 = c*t37474;
            double t37476 = sqrt(t37475);
            double t37477 = pow(t37475,3.0/2.0);
            double t37478 = 1.0/pow(t37473,2.0/3.0);
            double t37479 = b1p*t37476;
            double t37480 = b3p*t37477;
            double t37481 = b4p*t37435*t37478;
            double t37482 = b2p*c*t37474;
            double t37483 = t37480+t37481+t37482+t37479;
            double t37484 = 1.0/t37483;
            double t37485 = t37437*t37484*(1.0/2.0);
            double t37486 = t37485+1.0;
            double t37487 = log(t37486);
            double t37488 = a1p*c*t37474;
            double t37489 = t37488+1.0;
            double t37490 = c0p*t37487*t37489*2.0;
            double t37491 = rho_a[index]-rho_b[index];
            double t37492 = t37491*t37491;
            double t37493 = 1.0/t37473;
            double t37494 = t37491*t37493;
            double t37495 = 1.0/(t37473*t37473*t37473*t37473);
            double t37496 = t37492*t37492;
            double t37497 = t37494+1.0;
            double t37498 = pow(t37497,4.0/3.0);
            double t37499 = -t37494+1.0;
            double t37500 = pow(t37499,4.0/3.0);
            double t37501 = t37500+t37498-2.0;
            double t37502 = c0p*t37446*t37448*2.0;
            double t37503 = gamma_aa[index]*gamma_aa[index];
            double t37504 = gx*gx;
            double t37505 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t37506 = gamma_bb[index]*gamma_bb[index];
            double t37507 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t37508 = b1f*t37433;
            double t37509 = b3f*t37434;
            double t37510 = b4f*t37435*t37436;
            double t37511 = b2f*c*t37431;
            double t37512 = t37510+t37511+t37508+t37509;
            double t37513 = 1.0/t37512;
            double t37514 = t37513*t37455*(1.0/2.0);
            double t37515 = t37514+1.0;
            double t37516 = log(t37515);
            double t37517 = a1f*c*t37431;
            double t37518 = t37517+1.0;
            double t37519 = t37502-c0f*t37516*t37518*2.0;
            double t37520 = t37502-t37451*t37454*t37519;
            double t37521 = gcaa*gcaa;
            double t37522 = b1f*t37458;
            double t37523 = b3f*t37459;
            double t37524 = b4f*t37460*t37435;
            double t37525 = b2f*c*t37456;
            double t37526 = t37522+t37523+t37524+t37525;
            double t37527 = 1.0/t37526;
            double t37528 = t37455*t37527*(1.0/2.0);
            double t37529 = t37528+1.0;
            double t37530 = log(t37529);
            double t37531 = a1f*c*t37456;
            double t37532 = t37531+1.0;
            double t37533 = t37472-c0f*t37530*t37532*2.0;
            double t37534 = t37472-t37451*t37533*t37454;
            functional_[index] = (ccab0+(ccab1*gcab*t37424)/(gcab*t37424+1.0)+(ccab2*t37430*t37425)/(gcab*t37424* \
               2.0+t37430*t37425+1.0))*(rho_a[index]*t37520+rho_b[index]*t37534-t37473*(t37490-t37501*t37454*t37495* \
               t37496*(t37490-c0f*log((t37455*(1.0/2.0))/(b1f*t37476+b3f*t37477+b2f*c*t37474+b4f*t37435*t37478)+1.0) \
               *(a1f*c*t37474+1.0)*2.0)+(Aa*t37501*t37454*log((1.0/2.0)/(Aa*(b1a*t37476+b3a*t37477+b2a*c*t37474+b4a* \
               t37435*t37478))+1.0)*(t37495*t37496-1.0)*(a1a*c*t37474+1.0)*2.0)/d2fz0))-rho_a[index]*t37520*(ccaa0+ \
               (ccaa2*t37503*t37521*t37505)/(gamma_aa[index]*gcaa*t37426*2.0+t37503*t37521*t37505+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t37426)/(gamma_aa[index]*gcaa*t37426+1.0))-rho_b[index]*t37534*(ccaa0+(ccaa2*t37521*t37506*t37507) \
               /(gamma_bb[index]*gcaa*t37428*2.0+t37521*t37506*t37507+1.0)+(ccaa1*gamma_bb[index]*gcaa*t37428)/(gamma_bb[index]* \
               gcaa*t37428+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t37503*t37504*t37505)/(gamma_aa[index]*gx* \
               t37426*2.0+t37503*t37504*t37505+1.0)+(cx1*gamma_aa[index]*gx*t37426)/(gamma_aa[index]*gx*t37426+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t37504*t37506*t37507)/(gamma_bb[index]*gx*t37428*2.0+t37504* \
               t37506*t37507+1.0)+(cx1*gamma_bb[index]*gx*t37428)/(gamma_bb[index]*gx*t37428+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t40540 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40541 = gamma_aa[index]*gamma_aa[index];
            double t40542 = gx*gx;
            double t40543 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40544 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40545 = c*t40544;
            double t40546 = sqrt(t40545);
            double t40547 = pow(t40545,3.0/2.0);
            double t40548 = c*c;
            double t40549 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40550 = 1.0/c0p;
            double t40551 = b1p*t40546;
            double t40552 = b3p*t40547;
            double t40553 = b4p*t40548*t40549;
            double t40554 = b2p*c*t40544;
            double t40555 = t40551+t40552+t40553+t40554;
            double t40556 = 1.0/t40555;
            double t40557 = t40550*t40556*(1.0/2.0);
            double t40558 = t40557+1.0;
            double t40559 = log(t40558);
            double t40560 = a1p*c*t40544;
            double t40561 = t40560+1.0;
            double t40562 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t40546+ \
               b3f*t40547+b2f*c*t40544+b4f*t40548*t40549))+1.0)*(a1f*c*t40544+1.0)*2.0-c0p*t40561*t40559*2.0))/(two_13* \
               2.0-2.0)+c0p*t40561*t40559*2.0)*(ccaa0+(ccaa2*t40541*t40543*t40562)/(gamma_aa[index]*gcaa*t40540*2.0+ \
               t40541*t40543*t40562+1.0)+(ccaa1*gamma_aa[index]*gcaa*t40540)/(gamma_aa[index]*gcaa*t40540+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t40541*t40542*t40543)/(gamma_aa[index]*gx*t40540*2.0+t40541*t40542* \
               t40543+1.0)+(cx1*gamma_aa[index]*gx*t40540)/(gamma_aa[index]*gx*t40540+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t40129 = 1.0/pow(rho_b[index],8.0/3.0);
            double t40130 = gamma_bb[index]*gamma_bb[index];
            double t40131 = gx*gx;
            double t40132 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t40133 = 1.0/pow(rho_b[index],1.0/3.0);
            double t40134 = c*t40133;
            double t40135 = sqrt(t40134);
            double t40136 = pow(t40134,3.0/2.0);
            double t40137 = c*c;
            double t40138 = 1.0/pow(rho_b[index],2.0/3.0);
            double t40139 = 1.0/c0p;
            double t40140 = b1p*t40135;
            double t40141 = b3p*t40136;
            double t40142 = b4p*t40137*t40138;
            double t40143 = b2p*c*t40133;
            double t40144 = t40140+t40141+t40142+t40143;
            double t40145 = 1.0/t40144;
            double t40146 = t40145*t40139*(1.0/2.0);
            double t40147 = t40146+1.0;
            double t40148 = log(t40147);
            double t40149 = a1p*c*t40133;
            double t40150 = t40149+1.0;
            double t40151 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t40135+ \
               b3f*t40136+b2f*c*t40133+b4f*t40137*t40138))+1.0)*(a1f*c*t40133+1.0)*2.0-c0p*t40150*t40148*2.0))/(two_13* \
               2.0-2.0)+c0p*t40150*t40148*2.0)*(ccaa0+(ccaa2*t40130*t40132*t40151)/(gamma_bb[index]*gcaa*t40129*2.0+ \
               t40130*t40132*t40151+1.0)+(ccaa1*gamma_bb[index]*gcaa*t40129)/(gamma_bb[index]*gcaa*t40129+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t40130*t40131*t40132)/(gamma_bb[index]*gx*t40129*2.0+t40130*t40131* \
               t40132+1.0)+(cx1*gamma_bb[index]*gx*t40129)/(gamma_bb[index]*gx*t40129+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37536 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37537 = c*t37536;
            double t37538 = sqrt(t37537);
            double t37539 = pow(t37537,3.0/2.0);
            double t37540 = c*c;
            double t37541 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37542 = 1.0/c0p;
            double t37543 = b1p*t37538;
            double t37544 = b3p*t37539;
            double t37545 = b4p*t37540*t37541;
            double t37546 = b2p*c*t37536;
            double t37547 = t37543+t37544+t37545+t37546;
            double t37548 = 1.0/t37547;
            double t37549 = t37542*t37548*(1.0/2.0);
            double t37550 = t37549+1.0;
            double t37551 = log(t37550);
            double t37552 = a1p*c*t37536;
            double t37553 = t37552+1.0;
            double t37554 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37555 = gamma_aa[index]*gamma_aa[index];
            double t37556 = gcaa*gcaa;
            double t37557 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t37560 = gamma_aa[index]*t37554*(1.0/2.0);
            double t37561 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37562 = gamma_bb[index]*t37561*(1.0/2.0);
            double t37558 = t37560+t37562;
            double t37559 = gcab*gcab;
            double t37563 = t37558*t37558;
            double t37564 = rho_a[index]+rho_b[index];
            double t37565 = 1.0/pow(t37564,1.0/3.0);
            double t37566 = c*t37565;
            double t37567 = sqrt(t37566);
            double t37568 = b1p*t37567;
            double t37569 = pow(t37566,3.0/2.0);
            double t37570 = b3p*t37569;
            double t37571 = 1.0/pow(t37564,2.0/3.0);
            double t37572 = b4p*t37540*t37571;
            double t37573 = b2p*c*t37565;
            double t37574 = t37570+t37572+t37573+t37568;
            double t37575 = 1.0/pow(t37564,4.0/3.0);
            double t37576 = two_13*2.0;
            double t37577 = t37576-2.0;
            double t37578 = 1.0/t37577;
            double t37579 = 1.0/c0f;
            double t37580 = 1.0/t37574;
            double t37581 = t37542*t37580*(1.0/2.0);
            double t37582 = t37581+1.0;
            double t37583 = a1p*c*t37565;
            double t37584 = t37583+1.0;
            double t37585 = rho_a[index]-rho_b[index];
            double t37586 = t37585*t37585;
            double t37587 = 1.0/t37564;
            double t37588 = t37585*t37587;
            double t37589 = b1f*t37567;
            double t37590 = b3f*t37569;
            double t37591 = b4f*t37540*t37571;
            double t37592 = b2f*c*t37565;
            double t37593 = t37590+t37591+t37592+t37589;
            double t37594 = 1.0/t37593;
            double t37595 = t37594*t37579*(1.0/2.0);
            double t37596 = t37595+1.0;
            double t37597 = log(t37596);
            double t37598 = a1f*c*t37565;
            double t37599 = t37598+1.0;
            double t37600 = log(t37582);
            double t37610 = c0f*t37597*t37599*2.0;
            double t37611 = c0p*t37600*t37584*2.0;
            double t37601 = t37610-t37611;
            double t37602 = t37588+1.0;
            double t37603 = pow(t37602,4.0/3.0);
            double t37604 = -t37588+1.0;
            double t37605 = pow(t37604,4.0/3.0);
            double t37606 = t37603+t37605-2.0;
            double t37607 = 1.0/(t37564*t37564);
            double t37638 = t37607*t37585;
            double t37608 = -t37638+t37587;
            double t37609 = 1.0/(t37564*t37564*t37564*t37564);
            double t37612 = t37586*t37586;
            double t37613 = 1.0/pow(t37564,5.0/3.0);
            double t37614 = 1.0/sqrt(t37566);
            double t37615 = 1.0/t37582;
            double t37616 = 1.0/(t37574*t37574);
            double t37617 = b4p*t37540*t37613*(2.0/3.0);
            double t37618 = b2p*c*t37575*(1.0/3.0);
            double t37619 = b1p*c*t37614*t37575*(1.0/6.0);
            double t37620 = b3p*c*t37575*t37567*(1.0/2.0);
            double t37621 = t37620+t37617+t37618+t37619;
            double t37622 = t37621*t37615*t37616*t37584;
            double t37623 = 1.0/(t37564*t37564*t37564*t37564*t37564);
            double t37624 = 1.0/d2fz0;
            double t37625 = 1.0/Aa;
            double t37626 = b1a*t37567;
            double t37627 = b3a*t37569;
            double t37628 = b4a*t37540*t37571;
            double t37629 = b2a*c*t37565;
            double t37630 = t37626+t37627+t37628+t37629;
            double t37631 = 1.0/t37630;
            double t37632 = t37631*t37625*(1.0/2.0);
            double t37633 = t37632+1.0;
            double t37634 = log(t37633);
            double t37635 = a1a*c*t37565;
            double t37636 = t37635+1.0;
            double t37637 = pow(t37602,1.0/3.0);
            double t37639 = t37608*t37637*(4.0/3.0);
            double t37640 = pow(t37604,1.0/3.0);
            double t37641 = t37639-t37640*t37608*(4.0/3.0);
            double t37642 = t37612*t37609;
            double t37643 = t37642-1.0;
            double t37644 = pow(2.0,1.0/3.0);
            double t37645 = t37644*2.0;
            double t37646 = t37645-2.0;
            double t37647 = a1f*c*t37536;
            double t37648 = t37647+1.0;
            double t37649 = b1f*t37538;
            double t37650 = b3f*t37539;
            double t37651 = b4f*t37540*t37541;
            double t37652 = b2f*c*t37536;
            double t37653 = t37650+t37651+t37652+t37649;
            double t37654 = 1.0/t37653;
            double t37655 = t37654*t37579*(1.0/2.0);
            double t37656 = t37655+1.0;
            double t37657 = 1.0/pow(rho_a[index],4.0/3.0);
            double t37658 = 1.0/pow(rho_a[index],5.0/3.0);
            double t37659 = 1.0/sqrt(t37537);
            double t37660 = log(t37656);
            double t37661 = 1.0/t37550;
            double t37662 = 1.0/(t37547*t37547);
            double t37663 = b4p*t37540*t37658*(2.0/3.0);
            double t37664 = b2p*c*t37657*(1.0/3.0);
            double t37665 = b1p*c*t37657*t37659*(1.0/6.0);
            double t37666 = b3p*c*t37538*t37657*(1.0/2.0);
            double t37667 = t37663+t37664+t37665+t37666;
            double t37668 = t37553*t37661*t37662*t37667;
            double t37669 = c0f*t37660*t37648*2.0;
            double t37670 = c0p*t37551*t37553*2.0;
            double t37671 = t37670-t37669;
            double t37672 = t37671*t37646*t37578;
            double t37673 = 1.0/pow(rho_b[index],1.0/3.0);
            double t37674 = c*t37673;
            double t37675 = sqrt(t37674);
            double t37676 = pow(t37674,3.0/2.0);
            double t37677 = 1.0/pow(rho_b[index],2.0/3.0);
            double t37678 = b1p*t37675;
            double t37679 = b3p*t37676;
            double t37680 = b4p*t37540*t37677;
            double t37681 = b2p*c*t37673;
            double t37682 = t37680+t37681+t37678+t37679;
            double t37683 = 1.0/t37682;
            double t37684 = t37542*t37683*(1.0/2.0);
            double t37685 = t37684+1.0;
            double t37686 = log(t37685);
            double t37687 = a1p*c*t37673;
            double t37688 = t37687+1.0;
            double t37689 = c0p*t37686*t37688*2.0;
            double t37690 = t37601*t37612*t37606*t37609*t37578;
            double t37691 = Aa*t37606*t37624*t37634*t37643*t37636*t37578*2.0;
            double t37692 = gcab*t37558;
            double t37693 = t37692+1.0;
            double t37694 = 1.0/t37693;
            double t37695 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t37696 = t37563*t37559;
            double t37697 = gcab*t37558*2.0;
            double t37698 = t37696+t37697+1.0;
            double t37699 = 1.0/t37698;
            double t37700 = gx*gx;
            double t37701 = gamma_aa[index]*gx*t37554;
            double t37702 = t37701+1.0;
            double t37703 = 1.0/t37702;
            double t37704 = gamma_aa[index]*gx*t37554*2.0;
            double t37705 = t37700*t37555*t37557;
            double t37706 = t37704+t37705+1.0;
            double t37707 = 1.0/t37706;
            double t37708 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t37709 = 1.0/t37656;
            double t37710 = 1.0/(t37653*t37653);
            double t37711 = b4f*t37540*t37658*(2.0/3.0);
            double t37712 = b2f*c*t37657*(1.0/3.0);
            double t37713 = b1f*c*t37657*t37659*(1.0/6.0);
            double t37714 = b3f*c*t37538*t37657*(1.0/2.0);
            double t37715 = t37711+t37712+t37713+t37714;
            double t37716 = a1f*c*c0f*t37660*t37657*(2.0/3.0);
            double t37717 = a1p*c*c0p*t37551*t37657*(2.0/3.0);
            double t37718 = gamma_aa[index]*gcaa*t37554;
            double t37719 = t37718+1.0;
            double t37720 = 1.0/t37719;
            double t37721 = ccaa1*gamma_aa[index]*gcaa*t37720*t37554;
            double t37722 = gamma_aa[index]*gcaa*t37554*2.0;
            double t37723 = t37555*t37556*t37557;
            double t37724 = t37722+t37723+1.0;
            double t37725 = 1.0/t37724;
            double t37726 = ccaa2*t37725*t37555*t37556*t37557;
            double t37727 = ccaa0+t37721+t37726;
            double t37728 = t37670-t37672;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t37558*t37694+ccab2*t37563*t37559*t37699)*(t37611-t37670+t37672+ \
               t37690+t37691+t37564*(t37622-t37612*t37606*t37609*t37578*(t37622-(1.0/(t37593*t37593)*t37599*(b2f* \
               c*t37575*(1.0/3.0)+b4f*t37540*t37613*(2.0/3.0)+b1f*c*t37614*t37575*(1.0/6.0)+b3f*c*t37575*t37567*(1.0/ \
               2.0)))/t37596+a1f*c*c0f*t37575*t37597*(2.0/3.0)-a1p*c*c0p*t37600*t37575*(2.0/3.0))-a1p*c*c0p*t37600* \
               t37575*(2.0/3.0)-t37601*t37612*t37623*t37606*t37578*4.0+t37601*t37612*t37641*t37609*t37578+t37601* \
               t37606*t37609*t37585*t37586*t37578*4.0-Aa*t37606*t37624*t37634*t37636*t37578*(t37612*t37623*4.0-t37609* \
               t37585*t37586*4.0)*2.0+Aa*t37641*t37624*t37634*t37643*t37636*t37578*2.0+(1.0/(t37630*t37630)*t37606* \
               t37624*t37643*t37636*t37578*(b2a*c*t37575*(1.0/3.0)+b4a*t37540*t37613*(2.0/3.0)+b1a*c*t37614*t37575* \
               (1.0/6.0)+b3a*c*t37575*t37567*(1.0/2.0)))/t37633-Aa*a1a*c*t37606*t37624*t37634*t37643*t37575*t37578* \
               (2.0/3.0))+rho_a[index]*(t37717-t37668+t37646*t37578*(t37716+t37668-t37710*t37715*t37709*t37648-a1p* \
               c*c0p*t37551*t37657*(2.0/3.0))))-t37727*(t37670+t37646*t37578*(t37669-c0p*t37551*t37553*2.0))-(rho_a[index]* \
               t37728+rho_b[index]*(t37689-t37646*t37578*(t37689-c0f*log((t37579*(1.0/2.0))/(b1f*t37675+b3f*t37676+ \
               b2f*c*t37673+b4f*t37540*t37677)+1.0)*(a1f*c*t37673+1.0)*2.0))-t37564*(t37611+t37690+t37691))*(ccab1* \
               gamma_aa[index]*gcab*t37694*t37695*(4.0/3.0)-ccab2*t37563*t37559*1.0/(t37698*t37698)*(gamma_aa[index]* \
               gcab*t37695*(8.0/3.0)+gamma_aa[index]*t37558*t37559*t37695*(8.0/3.0))-ccab1*gamma_aa[index]*t37558* \
               1.0/(t37693*t37693)*t37559*t37695*(4.0/3.0)+ccab2*gamma_aa[index]*t37558*t37559*t37695*t37699*(8.0/ \
               3.0))+rho_a[index]*t37728*(ccaa1*gamma_aa[index]*gcaa*t37720*t37695*(8.0/3.0)+ccaa2*t37725*t37555* \
               t37708*t37556*(1.6E1/3.0)-ccaa1*t37555*t37708*t37556*1.0/(t37719*t37719)*(8.0/3.0)-ccaa2*1.0/(t37724* \
               t37724)*t37555*t37556*t37557*(gamma_aa[index]*gcaa*t37695*(1.6E1/3.0)+t37555*t37708*t37556*(1.6E1/ \
               3.0)))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t37703*t37554+cx2*t37700*t37707*t37555* \
               t37557)*(4.0/3.0)+rho_a[index]*t37727*(t37717-t37668+t37646*t37578*(t37716-t37717+t37668-t37710*t37715* \
               t37709*t37648))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t37703*t37695*(8.0/3.0)+cx2*t37700* \
               t37707*t37555*t37708*(1.6E1/3.0)-cx1*t37700*1.0/(t37702*t37702)*t37555*t37708*(8.0/3.0)-cx2*t37700* \
               1.0/(t37706*t37706)*t37555*t37557*(gamma_aa[index]*gx*t37695*(1.6E1/3.0)+t37700*t37555*t37708*(1.6E1/ \
               3.0)));
        } else if (rho_a[index] > cutoff_) {
            double t40564 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40565 = c*t40564;
            double t40566 = sqrt(t40565);
            double t40567 = pow(t40565,3.0/2.0);
            double t40568 = c*c;
            double t40569 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40570 = 1.0/c0p;
            double t40571 = b1p*t40566;
            double t40572 = b3p*t40567;
            double t40573 = b4p*t40568*t40569;
            double t40574 = b2p*c*t40564;
            double t40575 = t40571+t40572+t40573+t40574;
            double t40576 = 1.0/t40575;
            double t40577 = t40570*t40576*(1.0/2.0);
            double t40578 = t40577+1.0;
            double t40579 = log(t40578);
            double t40580 = a1p*c*t40564;
            double t40581 = t40580+1.0;
            double t40582 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40583 = gamma_aa[index]*gamma_aa[index];
            double t40584 = gcaa*gcaa;
            double t40585 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40586 = gx*gx;
            double t40587 = gamma_aa[index]*gx*t40582;
            double t40588 = t40587+1.0;
            double t40589 = 1.0/t40588;
            double t40590 = gamma_aa[index]*gx*t40582*2.0;
            double t40591 = t40583*t40585*t40586;
            double t40592 = t40590+t40591+1.0;
            double t40593 = 1.0/t40592;
            double t40594 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t40595 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t40596 = pow(2.0,1.0/3.0);
            double t40597 = t40596*2.0;
            double t40598 = t40597-2.0;
            double t40599 = two_13*2.0;
            double t40600 = t40599-2.0;
            double t40601 = 1.0/t40600;
            double t40602 = a1f*c*t40564;
            double t40603 = t40602+1.0;
            double t40604 = 1.0/c0f;
            double t40605 = b1f*t40566;
            double t40606 = b3f*t40567;
            double t40607 = b4f*t40568*t40569;
            double t40608 = b2f*c*t40564;
            double t40609 = t40605+t40606+t40607+t40608;
            double t40610 = 1.0/t40609;
            double t40611 = t40610*t40604*(1.0/2.0);
            double t40612 = t40611+1.0;
            double t40613 = 1.0/pow(rho_a[index],4.0/3.0);
            double t40614 = 1.0/pow(rho_a[index],5.0/3.0);
            double t40615 = 1.0/sqrt(t40565);
            double t40616 = log(t40612);
            double t40617 = 1.0/t40578;
            double t40618 = 1.0/(t40575*t40575);
            double t40619 = b4p*t40614*t40568*(2.0/3.0);
            double t40620 = b2p*c*t40613*(1.0/3.0);
            double t40621 = b1p*c*t40613*t40615*(1.0/6.0);
            double t40622 = b3p*c*t40613*t40566*(1.0/2.0);
            double t40623 = t40620+t40621+t40622+t40619;
            double t40624 = t40623*t40581*t40617*t40618;
            double t40625 = gamma_aa[index]*gcaa*t40582;
            double t40626 = t40625+1.0;
            double t40627 = 1.0/t40626;
            double t40628 = ccaa1*gamma_aa[index]*gcaa*t40582*t40627;
            double t40629 = gamma_aa[index]*gcaa*t40582*2.0;
            double t40630 = t40583*t40584*t40585;
            double t40631 = t40630+t40629+1.0;
            double t40632 = 1.0/t40631;
            double t40633 = ccaa2*t40632*t40583*t40584*t40585;
            double t40634 = ccaa0+t40633+t40628;
            double t40635 = c0f*t40603*t40616*2.0;
            double t40636 = c0p*t40581*t40579*2.0;
            v_rho_a_[index] = -t40634*(t40636+t40601*t40598*(t40635-c0p*t40581*t40579*2.0))+rho_a[index]*t40634* \
               (-t40624+t40601*t40598*(t40624-(t40603*1.0/(t40609*t40609)*(b2f*c*t40613*(1.0/3.0)+b4f*t40614*t40568* \
               (2.0/3.0)+b1f*c*t40613*t40615*(1.0/6.0)+b3f*c*t40613*t40566*(1.0/2.0)))/t40612+a1f*c*c0f*t40613*t40616* \
               (2.0/3.0)-a1p*c*c0p*t40613*t40579*(2.0/3.0))+a1p*c*c0p*t40613*t40579*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t40582*t40589+cx2*t40583*t40593*t40585*t40586)*(4.0/3.0)+rho_a[index]* \
               (t40636+t40601*t40598*(t40635-t40636))*(ccaa1*gamma_aa[index]*gcaa*t40627*t40595*(8.0/3.0)+ccaa2*t40632* \
               t40583*t40584*t40594*(1.6E1/3.0)-ccaa1*1.0/(t40626*t40626)*t40583*t40584*t40594*(8.0/3.0)-ccaa2*1.0/ \
               (t40631*t40631)*t40583*t40584*t40585*(gamma_aa[index]*gcaa*t40595*(1.6E1/3.0)+t40583*t40584*t40594* \
               (1.6E1/3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t40595*t40589*(8.0/3.0)+cx2*t40583* \
               t40593*t40594*t40586*(1.6E1/3.0)-cx1*t40583*t40594*t40586*1.0/(t40588*t40588)*(8.0/3.0)-cx2*t40583* \
               1.0/(t40592*t40592)*t40585*t40586*(gamma_aa[index]*gx*t40595*(1.6E1/3.0)+t40583*t40594*t40586*(1.6E1/ \
               3.0)));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t37730 = 1.0/pow(rho_b[index],1.0/3.0);
            double t37731 = c*t37730;
            double t37732 = sqrt(t37731);
            double t37733 = pow(t37731,3.0/2.0);
            double t37734 = c*c;
            double t37735 = 1.0/pow(rho_b[index],2.0/3.0);
            double t37736 = 1.0/c0p;
            double t37737 = b1p*t37732;
            double t37738 = b3p*t37733;
            double t37739 = b4p*t37734*t37735;
            double t37740 = b2p*c*t37730;
            double t37741 = t37740+t37737+t37738+t37739;
            double t37742 = 1.0/t37741;
            double t37743 = t37742*t37736*(1.0/2.0);
            double t37744 = t37743+1.0;
            double t37745 = log(t37744);
            double t37746 = a1p*c*t37730;
            double t37747 = t37746+1.0;
            double t37748 = 1.0/pow(rho_b[index],8.0/3.0);
            double t37749 = gamma_bb[index]*gamma_bb[index];
            double t37750 = gcaa*gcaa;
            double t37751 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t37754 = 1.0/pow(rho_a[index],8.0/3.0);
            double t37755 = gamma_aa[index]*t37754*(1.0/2.0);
            double t37756 = gamma_bb[index]*t37748*(1.0/2.0);
            double t37752 = t37755+t37756;
            double t37753 = gcab*gcab;
            double t37757 = t37752*t37752;
            double t37758 = rho_a[index]+rho_b[index];
            double t37759 = 1.0/pow(t37758,1.0/3.0);
            double t37760 = c*t37759;
            double t37761 = sqrt(t37760);
            double t37762 = b1p*t37761;
            double t37763 = pow(t37760,3.0/2.0);
            double t37764 = b3p*t37763;
            double t37765 = 1.0/pow(t37758,2.0/3.0);
            double t37766 = b4p*t37734*t37765;
            double t37767 = b2p*c*t37759;
            double t37768 = t37762+t37764+t37766+t37767;
            double t37769 = 1.0/pow(t37758,4.0/3.0);
            double t37770 = two_13*2.0;
            double t37771 = t37770-2.0;
            double t37772 = 1.0/t37771;
            double t37773 = 1.0/c0f;
            double t37774 = 1.0/t37768;
            double t37775 = t37736*t37774*(1.0/2.0);
            double t37776 = t37775+1.0;
            double t37777 = a1p*c*t37759;
            double t37778 = t37777+1.0;
            double t37779 = rho_a[index]-rho_b[index];
            double t37780 = t37779*t37779;
            double t37781 = 1.0/t37758;
            double t37782 = t37781*t37779;
            double t37783 = b1f*t37761;
            double t37784 = b3f*t37763;
            double t37785 = b4f*t37734*t37765;
            double t37786 = b2f*c*t37759;
            double t37787 = t37783+t37784+t37785+t37786;
            double t37788 = 1.0/t37787;
            double t37789 = t37773*t37788*(1.0/2.0);
            double t37790 = t37789+1.0;
            double t37791 = log(t37790);
            double t37792 = a1f*c*t37759;
            double t37793 = t37792+1.0;
            double t37794 = log(t37776);
            double t37805 = c0f*t37791*t37793*2.0;
            double t37806 = c0p*t37794*t37778*2.0;
            double t37795 = t37805-t37806;
            double t37796 = t37782+1.0;
            double t37797 = pow(t37796,4.0/3.0);
            double t37798 = -t37782+1.0;
            double t37799 = pow(t37798,4.0/3.0);
            double t37800 = t37797+t37799-2.0;
            double t37801 = 1.0/(t37758*t37758);
            double t37802 = t37801*t37779;
            double t37803 = t37802+t37781;
            double t37804 = 1.0/(t37758*t37758*t37758*t37758);
            double t37807 = t37780*t37780;
            double t37808 = 1.0/pow(t37758,5.0/3.0);
            double t37809 = 1.0/sqrt(t37760);
            double t37810 = 1.0/t37776;
            double t37811 = 1.0/(t37768*t37768);
            double t37812 = b4p*t37734*t37808*(2.0/3.0);
            double t37813 = b2p*c*t37769*(1.0/3.0);
            double t37814 = b1p*c*t37809*t37769*(1.0/6.0);
            double t37815 = b3p*c*t37761*t37769*(1.0/2.0);
            double t37816 = t37812+t37813+t37814+t37815;
            double t37817 = 1.0/(t37758*t37758*t37758*t37758*t37758);
            double t37818 = 1.0/d2fz0;
            double t37819 = 1.0/Aa;
            double t37820 = b1a*t37761;
            double t37821 = b3a*t37763;
            double t37822 = b4a*t37734*t37765;
            double t37823 = b2a*c*t37759;
            double t37824 = t37820+t37821+t37822+t37823;
            double t37825 = 1.0/t37824;
            double t37826 = t37825*t37819*(1.0/2.0);
            double t37827 = t37826+1.0;
            double t37828 = log(t37827);
            double t37829 = a1a*c*t37759;
            double t37830 = t37829+1.0;
            double t37831 = pow(t37796,1.0/3.0);
            double t37832 = t37803*t37831*(4.0/3.0);
            double t37833 = pow(t37798,1.0/3.0);
            double t37834 = t37832-t37803*t37833*(4.0/3.0);
            double t37835 = t37804*t37807;
            double t37836 = t37835-1.0;
            double t37837 = pow(2.0,1.0/3.0);
            double t37838 = t37837*2.0;
            double t37839 = t37838-2.0;
            double t37840 = a1f*c*t37730;
            double t37841 = t37840+1.0;
            double t37842 = b1f*t37732;
            double t37843 = b3f*t37733;
            double t37844 = b4f*t37734*t37735;
            double t37845 = b2f*c*t37730;
            double t37846 = t37842+t37843+t37844+t37845;
            double t37847 = 1.0/t37846;
            double t37848 = t37773*t37847*(1.0/2.0);
            double t37849 = t37848+1.0;
            double t37850 = 1.0/pow(rho_b[index],4.0/3.0);
            double t37851 = 1.0/pow(rho_b[index],5.0/3.0);
            double t37852 = 1.0/sqrt(t37731);
            double t37853 = log(t37849);
            double t37854 = 1.0/t37744;
            double t37855 = 1.0/(t37741*t37741);
            double t37856 = b4p*t37734*t37851*(2.0/3.0);
            double t37857 = b2p*c*t37850*(1.0/3.0);
            double t37858 = b1p*c*t37850*t37852*(1.0/6.0);
            double t37859 = b3p*c*t37732*t37850*(1.0/2.0);
            double t37860 = t37856+t37857+t37858+t37859;
            double t37861 = t37860*t37854*t37747*t37855;
            double t37862 = c0f*t37841*t37853*2.0;
            double t37863 = c0p*t37745*t37747*2.0;
            double t37864 = a1p*c*c0p*t37794*t37769*(2.0/3.0);
            double t37865 = 1.0/pow(rho_a[index],1.0/3.0);
            double t37866 = c*t37865;
            double t37867 = sqrt(t37866);
            double t37868 = pow(t37866,3.0/2.0);
            double t37869 = 1.0/pow(rho_a[index],2.0/3.0);
            double t37870 = b1p*t37867;
            double t37871 = b3p*t37868;
            double t37872 = b4p*t37734*t37869;
            double t37873 = b2p*c*t37865;
            double t37874 = t37870+t37871+t37872+t37873;
            double t37875 = 1.0/t37874;
            double t37876 = t37736*t37875*(1.0/2.0);
            double t37877 = t37876+1.0;
            double t37878 = log(t37877);
            double t37879 = a1p*c*t37865;
            double t37880 = t37879+1.0;
            double t37881 = c0p*t37880*t37878*2.0;
            double t37882 = t37862-t37863;
            double t37883 = t37800*t37804*t37807*t37772*t37795;
            double t37884 = Aa*t37800*t37830*t37772*t37818*t37836*t37828*2.0;
            double t37885 = gcab*t37752;
            double t37886 = t37885+1.0;
            double t37887 = 1.0/t37886;
            double t37888 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t37889 = t37753*t37757;
            double t37890 = gcab*t37752*2.0;
            double t37891 = t37890+t37889+1.0;
            double t37892 = 1.0/t37891;
            double t37893 = gx*gx;
            double t37894 = gamma_bb[index]*gx*t37748;
            double t37895 = t37894+1.0;
            double t37896 = 1.0/t37895;
            double t37897 = gamma_bb[index]*gx*t37748*2.0;
            double t37898 = t37751*t37749*t37893;
            double t37899 = t37897+t37898+1.0;
            double t37900 = 1.0/t37899;
            double t37901 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t37902 = 1.0/t37849;
            double t37903 = 1.0/(t37846*t37846);
            double t37904 = b4f*t37734*t37851*(2.0/3.0);
            double t37905 = b2f*c*t37850*(1.0/3.0);
            double t37906 = b1f*c*t37850*t37852*(1.0/6.0);
            double t37907 = b3f*c*t37732*t37850*(1.0/2.0);
            double t37908 = t37904+t37905+t37906+t37907;
            double t37909 = a1f*c*c0f*t37850*t37853*(2.0/3.0);
            double t37910 = a1p*c*c0p*t37850*t37745*(2.0/3.0);
            double t37911 = gamma_bb[index]*gcaa*t37748;
            double t37912 = t37911+1.0;
            double t37913 = 1.0/t37912;
            double t37914 = ccaa1*gamma_bb[index]*gcaa*t37913*t37748;
            double t37915 = gamma_bb[index]*gcaa*t37748*2.0;
            double t37916 = t37750*t37751*t37749;
            double t37917 = t37915+t37916+1.0;
            double t37918 = 1.0/t37917;
            double t37919 = ccaa2*t37750*t37751*t37918*t37749;
            double t37920 = ccaa0+t37914+t37919;
            double t37921 = t37772*t37882*t37839;
            double t37922 = t37921+t37863;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t37752*t37887+ccab2*t37753*t37757*t37892)*(t37806-t37863+t37883+ \
               t37884+rho_b[index]*(t37910-t37861+t37772*t37839*(t37861+t37909-t37902*t37903*t37841*t37908-a1p*c* \
               c0p*t37850*t37745*(2.0/3.0)))-t37758*(t37864-t37810*t37811*t37816*t37778+t37800*t37807*t37772*t37817* \
               t37795*4.0+t37804*t37807*t37834*t37772*t37795-t37800*t37804*t37807*t37772*(t37864-t37810*t37811*t37816* \
               t37778+(t37793*1.0/(t37787*t37787)*(b2f*c*t37769*(1.0/3.0)+b4f*t37734*t37808*(2.0/3.0)+b1f*c*t37809* \
               t37769*(1.0/6.0)+b3f*c*t37761*t37769*(1.0/2.0)))/t37790-a1f*c*c0f*t37791*t37769*(2.0/3.0))+t37800* \
               t37804*t37780*t37772*t37795*t37779*4.0+Aa*t37800*t37830*t37772*t37818*t37828*(t37807*t37817*4.0+t37804* \
               t37780*t37779*4.0)*2.0+Aa*t37830*t37834*t37772*t37818*t37836*t37828*2.0-(t37800*t37830*1.0/(t37824* \
               t37824)*t37772*t37818*t37836*(b2a*c*t37769*(1.0/3.0)+b4a*t37734*t37808*(2.0/3.0)+b1a*c*t37809*t37769* \
               (1.0/6.0)+b3a*c*t37761*t37769*(1.0/2.0)))/t37827+Aa*a1a*c*t37800*t37772*t37818*t37836*t37828*t37769* \
               (2.0/3.0))-t37772*t37882*t37839)-t37920*(t37863+t37772*t37839*(t37862-c0p*t37745*t37747*2.0))-(rho_b[index]* \
               t37922+rho_a[index]*(t37881-t37772*t37839*(t37881-c0f*log((t37773*(1.0/2.0))/(b1f*t37867+b3f*t37868+ \
               b2f*c*t37865+b4f*t37734*t37869)+1.0)*(a1f*c*t37865+1.0)*2.0))-t37758*(t37806+t37883+t37884))*(ccab1* \
               gamma_bb[index]*gcab*t37887*t37888*(4.0/3.0)-ccab2*t37753*1.0/(t37891*t37891)*t37757*(gamma_bb[index]* \
               gcab*t37888*(8.0/3.0)+gamma_bb[index]*t37752*t37753*t37888*(8.0/3.0))-ccab1*gamma_bb[index]*t37752* \
               t37753*1.0/(t37886*t37886)*t37888*(4.0/3.0)+ccab2*gamma_bb[index]*t37752*t37753*t37892*t37888*(8.0/ \
               3.0))+rho_b[index]*t37922*(ccaa1*gamma_bb[index]*gcaa*t37913*t37888*(8.0/3.0)+ccaa2*t37901*t37750* \
               t37918*t37749*(1.6E1/3.0)-ccaa1*t37901*t37750*1.0/(t37912*t37912)*t37749*(8.0/3.0)-ccaa2*t37750*t37751* \
               1.0/(t37917*t37917)*t37749*(gamma_bb[index]*gcaa*t37888*(1.6E1/3.0)+t37901*t37750*t37749*(1.6E1/3.0) \
               ))+c0*pow(rho_b[index],1.0/3.0)*(cx0+cx1*gamma_bb[index]*gx*t37748*t37896+cx2*t37900*t37751*t37749* \
               t37893)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t37896*t37888*(8.0/3.0)+cx2* \
               t37900*t37901*t37749*t37893*(1.6E1/3.0)-cx1*t37901*t37749*t37893*1.0/(t37895*t37895)*(8.0/3.0)-cx2* \
               t37751*t37749*t37893*1.0/(t37899*t37899)*(gamma_bb[index]*gx*t37888*(1.6E1/3.0)+t37901*t37749*t37893* \
               (1.6E1/3.0)))-rho_b[index]*t37920*(-t37910+t37861+t37772*t37839*(t37910-t37861-t37909+t37902*t37903* \
               t37841*t37908));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t40154 = 1.0/pow(rho_b[index],1.0/3.0);
            double t40155 = c*t40154;
            double t40156 = sqrt(t40155);
            double t40157 = pow(t40155,3.0/2.0);
            double t40158 = c*c;
            double t40159 = 1.0/pow(rho_b[index],2.0/3.0);
            double t40160 = 1.0/c0p;
            double t40161 = b1p*t40156;
            double t40162 = b3p*t40157;
            double t40163 = b4p*t40158*t40159;
            double t40164 = b2p*c*t40154;
            double t40165 = t40161+t40162+t40163+t40164;
            double t40166 = 1.0/t40165;
            double t40167 = t40160*t40166*(1.0/2.0);
            double t40168 = t40167+1.0;
            double t40169 = log(t40168);
            double t40170 = a1p*c*t40154;
            double t40171 = t40170+1.0;
            double t40172 = 1.0/pow(rho_b[index],8.0/3.0);
            double t40173 = gamma_bb[index]*gamma_bb[index];
            double t40174 = gcaa*gcaa;
            double t40175 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t40176 = gx*gx;
            double t40177 = gamma_bb[index]*gx*t40172;
            double t40178 = t40177+1.0;
            double t40179 = 1.0/t40178;
            double t40180 = gamma_bb[index]*gx*t40172*2.0;
            double t40181 = t40173*t40175*t40176;
            double t40182 = t40180+t40181+1.0;
            double t40183 = 1.0/t40182;
            double t40184 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t40185 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t40186 = pow(2.0,1.0/3.0);
            double t40187 = t40186*2.0;
            double t40188 = t40187-2.0;
            double t40189 = two_13*2.0;
            double t40190 = t40189-2.0;
            double t40191 = 1.0/t40190;
            double t40192 = a1f*c*t40154;
            double t40193 = t40192+1.0;
            double t40194 = 1.0/c0f;
            double t40195 = b1f*t40156;
            double t40196 = b3f*t40157;
            double t40197 = b4f*t40158*t40159;
            double t40198 = b2f*c*t40154;
            double t40199 = t40195+t40196+t40197+t40198;
            double t40200 = 1.0/t40199;
            double t40201 = t40200*t40194*(1.0/2.0);
            double t40202 = t40201+1.0;
            double t40203 = 1.0/pow(rho_b[index],4.0/3.0);
            double t40204 = 1.0/pow(rho_b[index],5.0/3.0);
            double t40205 = 1.0/sqrt(t40155);
            double t40206 = log(t40202);
            double t40207 = 1.0/t40168;
            double t40208 = 1.0/(t40165*t40165);
            double t40209 = b4p*t40204*t40158*(2.0/3.0);
            double t40210 = b2p*c*t40203*(1.0/3.0);
            double t40211 = b1p*c*t40203*t40205*(1.0/6.0);
            double t40212 = b3p*c*t40203*t40156*(1.0/2.0);
            double t40213 = t40210+t40211+t40212+t40209;
            double t40214 = t40213*t40171*t40207*t40208;
            double t40215 = gamma_bb[index]*gcaa*t40172;
            double t40216 = t40215+1.0;
            double t40217 = 1.0/t40216;
            double t40218 = ccaa1*gamma_bb[index]*gcaa*t40172*t40217;
            double t40219 = gamma_bb[index]*gcaa*t40172*2.0;
            double t40220 = t40173*t40174*t40175;
            double t40221 = t40220+t40219+1.0;
            double t40222 = 1.0/t40221;
            double t40223 = ccaa2*t40222*t40173*t40174*t40175;
            double t40224 = ccaa0+t40223+t40218;
            double t40225 = c0f*t40206*t40193*2.0;
            double t40226 = c0p*t40171*t40169*2.0;
            v_rho_b_[index] = -t40224*(t40226+t40191*t40188*(t40225-c0p*t40171*t40169*2.0))+rho_b[index]*t40224* \
               (-t40214+t40191*t40188*(t40214-(t40193*1.0/(t40199*t40199)*(b2f*c*t40203*(1.0/3.0)+b4f*t40204*t40158* \
               (2.0/3.0)+b1f*c*t40203*t40205*(1.0/6.0)+b3f*c*t40203*t40156*(1.0/2.0)))/t40202+a1f*c*c0f*t40203*t40206* \
               (2.0/3.0)-a1p*c*c0p*t40203*t40169*(2.0/3.0))+a1p*c*c0p*t40203*t40169*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t40172*t40179+cx2*t40173*t40183*t40175*t40176)*(4.0/3.0)+rho_b[index]* \
               (t40226+t40191*t40188*(t40225-t40226))*(ccaa1*gamma_bb[index]*gcaa*t40217*t40185*(8.0/3.0)+ccaa2*t40222* \
               t40173*t40174*t40184*(1.6E1/3.0)-ccaa1*1.0/(t40216*t40216)*t40173*t40174*t40184*(8.0/3.0)-ccaa2*1.0/ \
               (t40221*t40221)*t40173*t40174*t40175*(gamma_bb[index]*gcaa*t40185*(1.6E1/3.0)+t40173*t40174*t40184* \
               (1.6E1/3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t40185*t40179*(8.0/3.0)+cx2*t40173* \
               t40183*t40184*t40176*(1.6E1/3.0)-cx1*t40173*t40184*t40176*1.0/(t40178*t40178)*(8.0/3.0)-cx2*t40173* \
               1.0/(t40182*t40182)*t40175*t40176*(gamma_bb[index]*gx*t40185*(1.6E1/3.0)+t40173*t40184*t40176*(1.6E1/ \
               3.0)));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t37924 = 1.0/pow(rho_a[index],1.0/3.0);
                double t37925 = c*t37924;
                double t37926 = sqrt(t37925);
                double t37927 = pow(t37925,3.0/2.0);
                double t37928 = c*c;
                double t37929 = 1.0/pow(rho_a[index],2.0/3.0);
                double t37930 = 1.0/c0p;
                double t37931 = b1p*t37926;
                double t37932 = b3p*t37927;
                double t37933 = b4p*t37928*t37929;
                double t37934 = b2p*c*t37924;
                double t37935 = t37931+t37932+t37933+t37934;
                double t37936 = 1.0/t37935;
                double t37937 = t37930*t37936*(1.0/2.0);
                double t37938 = t37937+1.0;
                double t37939 = log(t37938);
                double t37940 = a1p*c*t37924;
                double t37941 = t37940+1.0;
                double t37942 = pow(2.0,1.0/3.0);
                double t37943 = t37942*2.0;
                double t37944 = t37943-2.0;
                double t37945 = two_13*2.0;
                double t37946 = t37945-2.0;
                double t37947 = 1.0/t37946;
                double t37948 = 1.0/c0f;
                double t37949 = 1.0/pow(rho_b[index],1.0/3.0);
                double t37950 = c*t37949;
                double t37951 = sqrt(t37950);
                double t37952 = pow(t37950,3.0/2.0);
                double t37953 = 1.0/pow(rho_b[index],2.0/3.0);
                double t37954 = b1p*t37951;
                double t37955 = b3p*t37952;
                double t37956 = b4p*t37953*t37928;
                double t37957 = b2p*c*t37949;
                double t37958 = t37954+t37955+t37956+t37957;
                double t37959 = 1.0/t37958;
                double t37960 = t37930*t37959*(1.0/2.0);
                double t37961 = t37960+1.0;
                double t37962 = log(t37961);
                double t37963 = a1p*c*t37949;
                double t37964 = t37963+1.0;
                double t37965 = c0p*t37962*t37964*2.0;
                double t37966 = rho_a[index]+rho_b[index];
                double t37967 = 1.0/pow(t37966,1.0/3.0);
                double t37968 = c*t37967;
                double t37969 = sqrt(t37968);
                double t37970 = pow(t37968,3.0/2.0);
                double t37971 = 1.0/pow(t37966,2.0/3.0);
                double t37972 = b1p*t37969;
                double t37973 = b3p*t37970;
                double t37974 = b4p*t37971*t37928;
                double t37975 = b2p*c*t37967;
                double t37976 = t37972+t37973+t37974+t37975;
                double t37977 = 1.0/t37976;
                double t37978 = t37930*t37977*(1.0/2.0);
                double t37979 = t37978+1.0;
                double t37980 = log(t37979);
                double t37981 = a1p*c*t37967;
                double t37982 = t37981+1.0;
                double t37983 = c0p*t37980*t37982*2.0;
                double t37984 = rho_a[index]-rho_b[index];
                double t37985 = t37984*t37984;
                double t37986 = 1.0/t37966;
                double t37987 = t37984*t37986;
                double t37988 = 1.0/(t37966*t37966*t37966*t37966);
                double t37989 = t37985*t37985;
                double t37990 = t37987+1.0;
                double t37991 = pow(t37990,4.0/3.0);
                double t37992 = -t37987+1.0;
                double t37993 = pow(t37992,4.0/3.0);
                double t37994 = t37991+t37993-2.0;
                double t37995 = 1.0/pow(rho_a[index],8.0/3.0);
                double t37996 = gamma_aa[index]*t37995*(1.0/2.0);
                double t37997 = 1.0/pow(rho_b[index],8.0/3.0);
                double t37998 = gamma_bb[index]*t37997*(1.0/2.0);
                double t37999 = t37996+t37998;
                double t38000 = gcab*t37999;
                double t38001 = t38000+1.0;
                double t38002 = gcab*gcab;
                double t38003 = t37999*t37999;
                double t38004 = t38002*t38003;
                double t38005 = gcab*t37999*2.0;
                double t38006 = t38004+t38005+1.0;
                double t38007 = c0p*t37941*t37939*2.0;
                double t38008 = gx*gx;
                double t38009 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t38010 = gamma_aa[index]*gx*t37995;
                double t38011 = t38010+1.0;
                double t38012 = gamma_aa[index]*gamma_aa[index];
                double t38013 = gamma_aa[index]*gx*t37995*2.0;
                double t38014 = t38012*t38008*t38009;
                double t38015 = t38013+t38014+1.0;
                double t38016 = b1f*t37926;
                double t38017 = b3f*t37927;
                double t38018 = b4f*t37928*t37929;
                double t38019 = b2f*c*t37924;
                double t38020 = t38016+t38017+t38018+t38019;
                double t38021 = 1.0/t38020;
                double t38022 = t37948*t38021*(1.0/2.0);
                double t38023 = t38022+1.0;
                double t38024 = log(t38023);
                double t38025 = a1f*c*t37924;
                double t38026 = t38025+1.0;
                double t38027 = t38007-c0f*t38024*t38026*2.0;
                double t38028 = t38007-t37944*t37947*t38027;
                double t38029 = gcaa*gcaa;
                double t38030 = gamma_aa[index]*gcaa*t37995;
                double t38031 = t38030+1.0;
                double t38032 = gamma_aa[index]*gcaa*t37995*2.0;
                double t38033 = t38012*t38009*t38029;
                double t38034 = t38032+t38033+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t38028+rho_b[index]*(t37965-t37944*t37947*(t37965-c0f*log((t37948* \
                   (1.0/2.0))/(b1f*t37951+b3f*t37952+b2f*c*t37949+b4f*t37953*t37928)+1.0)*(a1f*c*t37949+1.0)*2.0))-t37966* \
                   (t37983-t37947*t37994*t37988*t37989*(t37983-c0f*log((t37948*(1.0/2.0))/(b1f*t37969+b3f*t37970+b2f* \
                   c*t37967+b4f*t37971*t37928)+1.0)*(a1f*c*t37967+1.0)*2.0)+(Aa*t37947*t37994*log((1.0/2.0)/(Aa*(b1a* \
                   t37969+b3a*t37970+b2a*c*t37967+b4a*t37971*t37928))+1.0)*(t37988*t37989-1.0)*(a1a*c*t37967+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t37995*(1.0/2.0))/t38001-ccab2*t38002*t38003*1.0/(t38006*t38006)*(gcab*t37995+ \
                   t37995*t37999*t38002)-ccab1*t37995*t37999*1.0/(t38001*t38001)*t38002*(1.0/2.0)+(ccab2*t37995*t37999* \
                   t38002)/t38006)-rho_a[index]*t38028*((ccaa1*gcaa*t37995)/t38031-ccaa1*gamma_aa[index]*1.0/(t38031* \
                   t38031)*t38009*t38029+(ccaa2*gamma_aa[index]*t38009*t38029*2.0)/t38034-ccaa2*t38012*1.0/(t38034*t38034) \
                   *t38009*t38029*(gcaa*t37995*2.0+gamma_aa[index]*t38009*t38029*2.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t37995)/t38011-cx1*gamma_aa[index]*1.0/(t38011*t38011)*t38008*t38009+(cx2*gamma_aa[index]*t38008* \
                   t38009*2.0)/t38015-cx2*t38012*1.0/(t38015*t38015)*t38008*t38009*(gx*t37995*2.0+gamma_aa[index]*t38008* \
                   t38009*2.0));
            } else if (rho_a[index] > cutoff_) {
                double t40639 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40640 = gx*gx;
                double t40641 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40642 = gamma_aa[index]*gx*t40639;
                double t40643 = t40642+1.0;
                double t40644 = gamma_aa[index]*gamma_aa[index];
                double t40645 = gamma_aa[index]*gx*t40639*2.0;
                double t40646 = t40640*t40641*t40644;
                double t40647 = t40645+t40646+1.0;
                double t40648 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40649 = c*t40648;
                double t40650 = sqrt(t40649);
                double t40651 = pow(t40649,3.0/2.0);
                double t40652 = c*c;
                double t40653 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40654 = 1.0/c0p;
                double t40655 = b1p*t40650;
                double t40656 = b3p*t40651;
                double t40657 = b4p*t40652*t40653;
                double t40658 = b2p*c*t40648;
                double t40659 = t40655+t40656+t40657+t40658;
                double t40660 = 1.0/t40659;
                double t40661 = t40660*t40654*(1.0/2.0);
                double t40662 = t40661+1.0;
                double t40663 = log(t40662);
                double t40664 = a1p*c*t40648;
                double t40665 = t40664+1.0;
                double t40666 = gcaa*gcaa;
                double t40667 = gamma_aa[index]*gcaa*t40639;
                double t40668 = t40667+1.0;
                double t40669 = gamma_aa[index]*gcaa*t40639*2.0;
                double t40670 = t40641*t40644*t40666;
                double t40671 = t40670+t40669+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t40639)/t40643-cx1*gamma_aa[index]*t40640* \
                   t40641*1.0/(t40643*t40643)+(cx2*gamma_aa[index]*t40640*t40641*2.0)/t40647-cx2*t40640*t40641*t40644* \
                   1.0/(t40647*t40647)*(gx*t40639*2.0+gamma_aa[index]*t40640*t40641*2.0))-rho_a[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t40650+b3f*t40651+b2f*c*t40648+b4f*t40652*t40653))+1.0) \
                   *(a1f*c*t40648+1.0)*2.0-c0p*t40663*t40665*2.0))/(two_13*2.0-2.0)+c0p*t40663*t40665*2.0)*((ccaa1*gcaa* \
                   t40639)/t40668+(ccaa2*gamma_aa[index]*t40641*t40666*2.0)/t40671-ccaa1*gamma_aa[index]*t40641*t40666* \
                   1.0/(t40668*t40668)-ccaa2*t40641*t40644*1.0/(t40671*t40671)*t40666*(gcaa*t40639*2.0+gamma_aa[index]* \
                   t40641*t40666*2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t38037 = 1.0/pow(rho_a[index],1.0/3.0);
                double t38038 = c*t38037;
                double t38039 = sqrt(t38038);
                double t38040 = pow(t38038,3.0/2.0);
                double t38041 = c*c;
                double t38042 = 1.0/pow(rho_a[index],2.0/3.0);
                double t38043 = 1.0/c0p;
                double t38044 = b1p*t38039;
                double t38045 = b3p*t38040;
                double t38046 = b4p*t38041*t38042;
                double t38047 = b2p*c*t38037;
                double t38048 = t38044+t38045+t38046+t38047;
                double t38049 = 1.0/t38048;
                double t38050 = t38043*t38049*(1.0/2.0);
                double t38051 = t38050+1.0;
                double t38052 = log(t38051);
                double t38053 = a1p*c*t38037;
                double t38054 = t38053+1.0;
                double t38055 = pow(2.0,1.0/3.0);
                double t38056 = t38055*2.0;
                double t38057 = t38056-2.0;
                double t38058 = two_13*2.0;
                double t38059 = t38058-2.0;
                double t38060 = 1.0/t38059;
                double t38061 = 1.0/c0f;
                double t38062 = 1.0/pow(rho_b[index],1.0/3.0);
                double t38063 = c*t38062;
                double t38064 = sqrt(t38063);
                double t38065 = pow(t38063,3.0/2.0);
                double t38066 = 1.0/pow(rho_b[index],2.0/3.0);
                double t38067 = b1p*t38064;
                double t38068 = b3p*t38065;
                double t38069 = b4p*t38041*t38066;
                double t38070 = b2p*c*t38062;
                double t38071 = t38070+t38067+t38068+t38069;
                double t38072 = 1.0/t38071;
                double t38073 = t38043*t38072*(1.0/2.0);
                double t38074 = t38073+1.0;
                double t38075 = log(t38074);
                double t38076 = a1p*c*t38062;
                double t38077 = t38076+1.0;
                double t38078 = c0p*t38075*t38077*2.0;
                double t38079 = rho_a[index]+rho_b[index];
                double t38080 = 1.0/pow(t38079,1.0/3.0);
                double t38081 = c*t38080;
                double t38082 = sqrt(t38081);
                double t38083 = pow(t38081,3.0/2.0);
                double t38084 = 1.0/pow(t38079,2.0/3.0);
                double t38085 = b1p*t38082;
                double t38086 = b3p*t38083;
                double t38087 = b4p*t38041*t38084;
                double t38088 = b2p*c*t38080;
                double t38089 = t38085+t38086+t38087+t38088;
                double t38090 = 1.0/t38089;
                double t38091 = t38043*t38090*(1.0/2.0);
                double t38092 = t38091+1.0;
                double t38093 = log(t38092);
                double t38094 = a1p*c*t38080;
                double t38095 = t38094+1.0;
                double t38096 = c0p*t38093*t38095*2.0;
                double t38097 = rho_a[index]-rho_b[index];
                double t38098 = t38097*t38097;
                double t38099 = 1.0/t38079;
                double t38100 = t38097*t38099;
                double t38101 = 1.0/(t38079*t38079*t38079*t38079);
                double t38102 = t38098*t38098;
                double t38103 = t38100+1.0;
                double t38104 = pow(t38103,4.0/3.0);
                double t38105 = -t38100+1.0;
                double t38106 = pow(t38105,4.0/3.0);
                double t38107 = t38104+t38106-2.0;
                double t38108 = 1.0/pow(rho_b[index],8.0/3.0);
                double t38109 = 1.0/pow(rho_a[index],8.0/3.0);
                double t38110 = gamma_aa[index]*t38109*(1.0/2.0);
                double t38111 = gamma_bb[index]*t38108*(1.0/2.0);
                double t38112 = t38110+t38111;
                double t38113 = gcab*t38112;
                double t38114 = t38113+1.0;
                double t38115 = gcab*gcab;
                double t38116 = t38112*t38112;
                double t38117 = t38115*t38116;
                double t38118 = gcab*t38112*2.0;
                double t38119 = t38117+t38118+1.0;
                double t38120 = c0p*t38052*t38054*2.0;
                double t38121 = gx*gx;
                double t38122 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t38123 = gamma_bb[index]*gx*t38108;
                double t38124 = t38123+1.0;
                double t38125 = gamma_bb[index]*gamma_bb[index];
                double t38126 = gamma_bb[index]*gx*t38108*2.0;
                double t38127 = t38121*t38122*t38125;
                double t38128 = t38126+t38127+1.0;
                double t38129 = b1f*t38064;
                double t38130 = b3f*t38065;
                double t38131 = b4f*t38041*t38066;
                double t38132 = b2f*c*t38062;
                double t38133 = t38130+t38131+t38132+t38129;
                double t38134 = 1.0/t38133;
                double t38135 = t38061*t38134*(1.0/2.0);
                double t38136 = t38135+1.0;
                double t38137 = log(t38136);
                double t38138 = a1f*c*t38062;
                double t38139 = t38138+1.0;
                double t38140 = t38078-c0f*t38137*t38139*2.0;
                double t38141 = t38078-t38140*t38060*t38057;
                double t38142 = gcaa*gcaa;
                double t38143 = gamma_bb[index]*gcaa*t38108;
                double t38144 = t38143+1.0;
                double t38145 = gamma_bb[index]*gcaa*t38108*2.0;
                double t38146 = t38122*t38142*t38125;
                double t38147 = t38145+t38146+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t38141+rho_a[index]*(t38120-t38060*t38057*(t38120-c0f*log((t38061* \
                   (1.0/2.0))/(b1f*t38039+b3f*t38040+b2f*c*t38037+b4f*t38041*t38042)+1.0)*(a1f*c*t38037+1.0)*2.0))-t38079* \
                   (t38096-t38101*t38102*t38060*t38107*(t38096-c0f*log((t38061*(1.0/2.0))/(b1f*t38082+b3f*t38083+b2f* \
                   c*t38080+b4f*t38041*t38084)+1.0)*(a1f*c*t38080+1.0)*2.0)+(Aa*t38060*t38107*log((1.0/2.0)/(Aa*(b1a* \
                   t38082+b3a*t38083+b2a*c*t38080+b4a*t38041*t38084))+1.0)*(t38101*t38102-1.0)*(a1a*c*t38080+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t38108*(1.0/2.0))/t38114-ccab2*t38115*t38116*1.0/(t38119*t38119)*(gcab*t38108+ \
                   t38112*t38115*t38108)-ccab1*t38112*1.0/(t38114*t38114)*t38115*t38108*(1.0/2.0)+(ccab2*t38112*t38115* \
                   t38108)/t38119)-rho_b[index]*t38141*((ccaa1*gcaa*t38108)/t38144-ccaa1*gamma_bb[index]*t38122*t38142* \
                   1.0/(t38144*t38144)+(ccaa2*gamma_bb[index]*t38122*t38142*2.0)/t38147-ccaa2*t38122*t38142*t38125*1.0/ \
                   (t38147*t38147)*(gcaa*t38108*2.0+gamma_bb[index]*t38122*t38142*2.0))+c0*pow(rho_b[index],4.0/3.0)* \
                   ((cx1*gx*t38108)/t38124-cx1*gamma_bb[index]*t38121*t38122*1.0/(t38124*t38124)+(cx2*gamma_bb[index]* \
                   t38121*t38122*2.0)/t38128-cx2*t38121*t38122*t38125*1.0/(t38128*t38128)*(gx*t38108*2.0+gamma_bb[index]* \
                   t38121*t38122*2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t40230 = 1.0/pow(rho_b[index],8.0/3.0);
                double t40231 = gx*gx;
                double t40232 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t40233 = gamma_bb[index]*gx*t40230;
                double t40234 = t40233+1.0;
                double t40235 = gamma_bb[index]*gamma_bb[index];
                double t40236 = gamma_bb[index]*gx*t40230*2.0;
                double t40237 = t40231*t40232*t40235;
                double t40238 = t40236+t40237+1.0;
                double t40239 = 1.0/pow(rho_b[index],1.0/3.0);
                double t40240 = c*t40239;
                double t40241 = sqrt(t40240);
                double t40242 = pow(t40240,3.0/2.0);
                double t40243 = c*c;
                double t40244 = 1.0/pow(rho_b[index],2.0/3.0);
                double t40245 = 1.0/c0p;
                double t40246 = b1p*t40241;
                double t40247 = b3p*t40242;
                double t40248 = b4p*t40243*t40244;
                double t40249 = b2p*c*t40239;
                double t40250 = t40246+t40247+t40248+t40249;
                double t40251 = 1.0/t40250;
                double t40252 = t40251*t40245*(1.0/2.0);
                double t40253 = t40252+1.0;
                double t40254 = log(t40253);
                double t40255 = a1p*c*t40239;
                double t40256 = t40255+1.0;
                double t40257 = gcaa*gcaa;
                double t40258 = gamma_bb[index]*gcaa*t40230;
                double t40259 = t40258+1.0;
                double t40260 = gamma_bb[index]*gcaa*t40230*2.0;
                double t40261 = t40232*t40235*t40257;
                double t40262 = t40260+t40261+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t40230)/t40234-cx1*gamma_bb[index]*t40231* \
                   t40232*1.0/(t40234*t40234)+(cx2*gamma_bb[index]*t40231*t40232*2.0)/t40238-cx2*t40231*t40232*t40235* \
                   1.0/(t40238*t40238)*(gx*t40230*2.0+gamma_bb[index]*t40231*t40232*2.0))-rho_b[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t40241+b3f*t40242+b2f*c*t40239+b4f*t40243*t40244))+1.0) \
                   *(a1f*c*t40239+1.0)*2.0-c0p*t40254*t40256*2.0))/(two_13*2.0-2.0)+c0p*t40254*t40256*2.0)*((ccaa1*gcaa* \
                   t40230)/t40259+(ccaa2*gamma_bb[index]*t40232*t40257*2.0)/t40262-ccaa1*gamma_bb[index]*t40232*t40257* \
                   1.0/(t40259*t40259)-ccaa2*t40232*t40235*1.0/(t40262*t40262)*t40257*(gcaa*t40230*2.0+gamma_bb[index]* \
                   t40232*t40257*2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t38151 = 1.0/pow(rho_a[index],1.0/3.0);
            double t38152 = c*t38151;
            double t38153 = sqrt(t38152);
            double t38154 = pow(t38152,3.0/2.0);
            double t38155 = c*c;
            double t38156 = 1.0/pow(rho_a[index],2.0/3.0);
            double t38157 = 1.0/c0p;
            double t38158 = b1p*t38153;
            double t38159 = b3p*t38154;
            double t38160 = b4p*t38155*t38156;
            double t38161 = b2p*c*t38151;
            double t38162 = t38160+t38161+t38158+t38159;
            double t38163 = 1.0/t38162;
            double t38164 = t38163*t38157*(1.0/2.0);
            double t38165 = t38164+1.0;
            double t38166 = log(t38165);
            double t38167 = a1p*c*t38151;
            double t38168 = t38167+1.0;
            double t38169 = 1.0/pow(rho_a[index],8.0/3.0);
            double t38170 = gamma_aa[index]*gamma_aa[index];
            double t38171 = gcaa*gcaa;
            double t38172 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t38173 = gamma_aa[index]*gcaa*t38169;
            double t38174 = t38173+1.0;
            double t38175 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t38176 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t38177 = gamma_aa[index]*gcaa*t38169*2.0;
            double t38178 = t38170*t38171*t38175;
            double t38179 = t38177+t38178+1.0;
            double t38182 = gamma_aa[index]*t38169*(1.0/2.0);
            double t38183 = 1.0/pow(rho_b[index],8.0/3.0);
            double t38184 = gamma_bb[index]*t38183*(1.0/2.0);
            double t38180 = t38182+t38184;
            double t38181 = gcab*gcab;
            double t38185 = t38180*t38180;
            double t38186 = rho_a[index]+rho_b[index];
            double t38187 = 1.0/pow(t38186,1.0/3.0);
            double t38188 = c*t38187;
            double t38189 = sqrt(t38188);
            double t38190 = b1p*t38189;
            double t38191 = pow(t38188,3.0/2.0);
            double t38192 = b3p*t38191;
            double t38193 = 1.0/pow(t38186,2.0/3.0);
            double t38194 = b4p*t38155*t38193;
            double t38195 = b2p*c*t38187;
            double t38196 = t38190+t38192+t38194+t38195;
            double t38197 = 1.0/pow(t38186,7.0/3.0);
            double t38198 = 1.0/pow(t38186,8.0/3.0);
            double t38199 = 1.0/sqrt(t38188);
            double t38200 = a1p*c*t38187;
            double t38201 = t38200+1.0;
            double t38202 = 1.0/t38196;
            double t38203 = t38202*t38157*(1.0/2.0);
            double t38204 = t38203+1.0;
            double t38205 = 1.0/t38204;
            double t38206 = 1.0/pow(t38186,4.0/3.0);
            double t38246 = 1.0/pow(t38186,5.0/3.0);
            double t38248 = b4p*t38155*t38246*(2.0/3.0);
            double t38249 = b2p*c*t38206*(1.0/3.0);
            double t38250 = b1p*c*t38206*t38199*(1.0/6.0);
            double t38251 = b3p*c*t38206*t38189*(1.0/2.0);
            double t38207 = t38250+t38251+t38248+t38249;
            double t38208 = two_13*2.0;
            double t38209 = t38208-2.0;
            double t38210 = 1.0/t38209;
            double t38211 = 1.0/c0f;
            double t38212 = rho_a[index]-rho_b[index];
            double t38213 = 1.0/t38186;
            double t38214 = t38212*t38213;
            double t38215 = b1f*t38189;
            double t38216 = b3f*t38191;
            double t38217 = b4f*t38155*t38193;
            double t38218 = b2f*c*t38187;
            double t38219 = t38215+t38216+t38217+t38218;
            double t38220 = 1.0/t38219;
            double t38221 = t38211*t38220*(1.0/2.0);
            double t38222 = t38221+1.0;
            double t38223 = log(t38222);
            double t38224 = a1f*c*t38187;
            double t38225 = t38224+1.0;
            double t38226 = log(t38204);
            double t38234 = c0f*t38223*t38225*2.0;
            double t38235 = c0p*t38201*t38226*2.0;
            double t38227 = t38234-t38235;
            double t38228 = t38212*t38212;
            double t38229 = t38214+1.0;
            double t38230 = pow(t38229,4.0/3.0);
            double t38231 = -t38214+1.0;
            double t38232 = pow(t38231,4.0/3.0);
            double t38233 = t38230+t38232-2.0;
            double t38236 = 1.0/(t38186*t38186);
            double t38240 = t38212*t38236;
            double t38237 = t38213-t38240;
            double t38238 = 1.0/(t38186*t38186*t38186*t38186);
            double t38239 = pow(t38229,1.0/3.0);
            double t38241 = t38237*t38239*(4.0/3.0);
            double t38242 = pow(t38231,1.0/3.0);
            double t38274 = t38242*t38237*(4.0/3.0);
            double t38243 = t38241-t38274;
            double t38244 = 1.0/(t38186*t38186*t38186*t38186*t38186);
            double t38245 = t38228*t38228;
            double t38247 = 1.0/(t38196*t38196);
            double t38252 = 1.0/t38222;
            double t38253 = 1.0/(t38219*t38219);
            double t38254 = b4f*t38155*t38246*(2.0/3.0);
            double t38255 = b2f*c*t38206*(1.0/3.0);
            double t38256 = b1f*c*t38206*t38199*(1.0/6.0);
            double t38257 = b3f*c*t38206*t38189*(1.0/2.0);
            double t38258 = t38254+t38255+t38256+t38257;
            double t38259 = t38201*t38205*t38207*t38247;
            double t38260 = a1f*c*c0f*t38223*t38206*(2.0/3.0);
            double t38261 = t38207*t38207;
            double t38262 = 1.0/pow(t38188,3.0/2.0);
            double t38263 = b4p*t38155*t38198*(1.0E1/9.0);
            double t38264 = b2p*c*t38197*(4.0/9.0);
            double t38265 = b1p*c*t38197*t38199*(2.0/9.0);
            double t38266 = b3p*c*t38197*t38189*(2.0/3.0);
            double t38267 = b3p*t38155*t38198*t38199*(1.0/1.2E1);
            double t38268 = t38263+t38264+t38265+t38266+t38267-b1p*t38262*t38155*t38198*(1.0/3.6E1);
            double t38269 = 1.0/(t38196*t38196*t38196);
            double t38270 = t38201*t38205*t38261*t38269*2.0;
            double t38271 = t38258*t38258;
            double t38272 = 1.0/(t38204*t38204);
            double t38273 = 1.0/(t38196*t38196*t38196*t38196);
            double t38362 = t38225*t38252*t38253*t38258;
            double t38363 = a1p*c*c0p*t38206*t38226*(2.0/3.0);
            double t38275 = t38260-t38362-t38363+t38259;
            double t38276 = t38236*2.0;
            double t38277 = 1.0/(t38186*t38186*t38186);
            double t38295 = t38212*t38277*2.0;
            double t38278 = t38276-t38295;
            double t38279 = t38237*t38237;
            double t38280 = a1p*c*c0p*t38226*t38197*(8.0/9.0);
            double t38281 = 1.0/(t38186*t38186*t38186*t38186*t38186*t38186);
            double t38282 = 1.0/d2fz0;
            double t38283 = 1.0/Aa;
            double t38284 = b1a*t38189;
            double t38285 = b3a*t38191;
            double t38286 = b4a*t38155*t38193;
            double t38287 = b2a*c*t38187;
            double t38288 = t38284+t38285+t38286+t38287;
            double t38289 = 1.0/t38288;
            double t38290 = t38283*t38289*(1.0/2.0);
            double t38291 = t38290+1.0;
            double t38292 = log(t38291);
            double t38293 = a1a*c*t38187;
            double t38294 = t38293+1.0;
            double t38296 = t38242*t38278*(4.0/3.0);
            double t38297 = 1.0/pow(t38229,2.0/3.0);
            double t38298 = t38279*t38297*(4.0/9.0);
            double t38299 = 1.0/pow(t38231,2.0/3.0);
            double t38300 = t38279*t38299*(4.0/9.0);
            double t38301 = t38300+t38296+t38298-t38239*t38278*(4.0/3.0);
            double t38302 = t38244*t38245*4.0;
            double t38314 = t38212*t38228*t38238*4.0;
            double t38303 = t38302-t38314;
            double t38304 = 1.0/t38291;
            double t38305 = t38245*t38238;
            double t38306 = t38305-1.0;
            double t38307 = 1.0/(t38288*t38288);
            double t38308 = b4a*t38155*t38246*(2.0/3.0);
            double t38309 = b2a*c*t38206*(1.0/3.0);
            double t38310 = b1a*c*t38206*t38199*(1.0/6.0);
            double t38311 = b3a*c*t38206*t38189*(1.0/2.0);
            double t38312 = t38310+t38311+t38308+t38309;
            double t38313 = t38312*t38312;
            double t38315 = t38201*t38205*t38247*t38268;
            double t38316 = pow(2.0,1.0/3.0);
            double t38317 = t38316*2.0;
            double t38318 = t38317-2.0;
            double t38319 = a1f*c*t38151;
            double t38320 = t38319+1.0;
            double t38321 = b1f*t38153;
            double t38322 = b3f*t38154;
            double t38323 = b4f*t38155*t38156;
            double t38324 = b2f*c*t38151;
            double t38325 = t38321+t38322+t38323+t38324;
            double t38326 = 1.0/t38325;
            double t38327 = t38211*t38326*(1.0/2.0);
            double t38328 = t38327+1.0;
            double t38329 = 1.0/pow(rho_a[index],4.0/3.0);
            double t38331 = 1.0/pow(rho_a[index],5.0/3.0);
            double t38332 = 1.0/sqrt(t38152);
            double t38338 = b4f*t38331*t38155*(2.0/3.0);
            double t38339 = b2f*c*t38329*(1.0/3.0);
            double t38340 = b1f*c*t38332*t38329*(1.0/6.0);
            double t38341 = b3f*c*t38153*t38329*(1.0/2.0);
            double t38330 = t38340+t38341+t38338+t38339;
            double t38343 = b4p*t38331*t38155*(2.0/3.0);
            double t38344 = b2p*c*t38329*(1.0/3.0);
            double t38345 = b1p*c*t38332*t38329*(1.0/6.0);
            double t38346 = b3p*c*t38153*t38329*(1.0/2.0);
            double t38333 = t38343+t38344+t38345+t38346;
            double t38334 = 1.0/t38328;
            double t38335 = 1.0/pow(rho_a[index],7.0/3.0);
            double t38336 = 1.0/t38165;
            double t38337 = 1.0/pow(t38152,3.0/2.0);
            double t38342 = t38330*t38330;
            double t38347 = t38333*t38333;
            double t38348 = log(t38328);
            double t38349 = 1.0/(t38325*t38325);
            double t38350 = 1.0/(t38162*t38162);
            double t38351 = 1.0/(t38162*t38162*t38162);
            double t38352 = t38351*t38336*t38347*t38168*2.0;
            double t38353 = b4p*t38155*t38169*(1.0E1/9.0);
            double t38354 = b2p*c*t38335*(4.0/9.0);
            double t38355 = b3p*t38332*t38155*t38169*(1.0/1.2E1);
            double t38356 = b1p*c*t38332*t38335*(2.0/9.0);
            double t38357 = b3p*c*t38153*t38335*(2.0/3.0);
            double t38432 = b1p*t38155*t38337*t38169*(1.0/3.6E1);
            double t38358 = -t38432+t38353+t38354+t38355+t38356+t38357;
            double t38359 = 1.0/(t38165*t38165);
            double t38360 = 1.0/(t38162*t38162*t38162*t38162);
            double t38361 = a1p*c*c0p*t38335*t38166*(8.0/9.0);
            double t38364 = gcab*t38180;
            double t38365 = t38364+1.0;
            double t38366 = 1.0/t38365;
            double t38367 = t38181*t38185;
            double t38368 = gcab*t38180*2.0;
            double t38369 = t38367+t38368+1.0;
            double t38370 = 1.0/t38369;
            double t38371 = t38320*t38330*t38334*t38349;
            double t38372 = a1p*c*c0p*t38166*t38329*(2.0/3.0);
            double t38374 = t38350*t38333*t38336*t38168;
            double t38377 = a1f*c*c0f*t38329*t38348*(2.0/3.0);
            double t38373 = t38371+t38372-t38374-t38377;
            double t38375 = c0f*t38320*t38348*2.0;
            double t38376 = c0p*t38166*t38168*2.0;
            double t38378 = t38210*t38318*t38373;
            double t38379 = -t38372+t38374+t38378;
            double t38380 = 1.0/t38174;
            double t38381 = 1.0/t38179;
            double t38382 = t38375-t38376;
            double t38383 = t38210*t38318*t38382;
            double t38384 = 1.0/pow(rho_b[index],1.0/3.0);
            double t38385 = c*t38384;
            double t38386 = sqrt(t38385);
            double t38387 = pow(t38385,3.0/2.0);
            double t38388 = 1.0/pow(rho_b[index],2.0/3.0);
            double t38389 = b1p*t38386;
            double t38390 = b3p*t38387;
            double t38391 = b4p*t38155*t38388;
            double t38392 = b2p*c*t38384;
            double t38393 = t38390+t38391+t38392+t38389;
            double t38394 = 1.0/t38393;
            double t38395 = t38157*t38394*(1.0/2.0);
            double t38396 = t38395+1.0;
            double t38397 = log(t38396);
            double t38398 = a1p*c*t38384;
            double t38399 = t38398+1.0;
            double t38400 = c0p*t38397*t38399*2.0;
            double t38401 = 1.0/(t38365*t38365);
            double t38402 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t38403 = gamma_aa[index]*gcab*t38176*(8.0/3.0);
            double t38404 = gamma_aa[index]*t38180*t38181*t38176*(8.0/3.0);
            double t38405 = t38403+t38404;
            double t38406 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t38407 = 1.0/(t38369*t38369);
            double t38408 = gx*gx;
            double t38409 = gamma_aa[index]*gx*t38169;
            double t38410 = t38409+1.0;
            double t38415 = gamma_aa[index]*gx*t38176*(1.6E1/3.0);
            double t38416 = t38170*t38172*t38408*(1.6E1/3.0);
            double t38411 = t38415+t38416;
            double t38412 = gamma_aa[index]*gx*t38169*2.0;
            double t38413 = t38170*t38408*t38175;
            double t38414 = t38412+t38413+1.0;
            double t38417 = 1.0/(t38414*t38414);
            double t38418 = 1.0/t38410;
            double t38419 = 1.0/t38414;
            double t38420 = 1.0/(t38410*t38410);
            double t38421 = ccaa1*gamma_aa[index]*gcaa*t38380*t38169;
            double t38422 = ccaa2*t38170*t38171*t38381*t38175;
            double t38423 = ccaa0+t38421+t38422;
            double t38424 = 1.0/(t38325*t38325*t38325);
            double t38425 = b4f*t38155*t38169*(1.0E1/9.0);
            double t38426 = b2f*c*t38335*(4.0/9.0);
            double t38427 = b3f*t38332*t38155*t38169*(1.0/1.2E1);
            double t38428 = b1f*c*t38332*t38335*(2.0/9.0);
            double t38429 = b3f*c*t38153*t38335*(2.0/3.0);
            double t38430 = t38425+t38426+t38427+t38428+t38429-b1f*t38155*t38337*t38169*(1.0/3.6E1);
            double t38431 = t38320*t38430*t38334*t38349;
            double t38433 = t38350*t38336*t38168*t38358;
            double t38434 = 1.0/(t38328*t38328);
            double t38435 = 1.0/(t38325*t38325*t38325*t38325);
            double t38436 = t38211*t38320*t38342*t38434*t38435*(1.0/2.0);
            double t38437 = t38360*t38157*t38347*t38168*t38359*(1.0/2.0);
            double t38438 = a1f*c*t38330*t38334*t38329*t38349*(2.0/3.0);
            double t38439 = a1p*c*t38350*t38333*t38336*t38329*(2.0/3.0);
            double t38440 = t38383+t38376;
            double t38441 = 1.0/pow(rho_a[index],1.0E1);
            double t38442 = 1.0/(t38174*t38174);
            double t38443 = gamma_aa[index]*gcaa*t38176*(1.6E1/3.0);
            double t38444 = t38170*t38171*t38172*(1.6E1/3.0);
            double t38445 = t38443+t38444;
            double t38446 = 1.0/(t38179*t38179);
            double t38447 = ccaa1*gamma_aa[index]*gcaa*t38380*t38176*(8.0/3.0);
            double t38448 = ccaa2*t38170*t38171*t38172*t38381*(1.6E1/3.0);
            double t38449 = t38447+t38448-ccaa1*t38170*t38171*t38172*t38442*(8.0/3.0)-ccaa2*t38170*t38171*t38175* \
               t38445*t38446;
            v_rho_a_rho_a_[index] = t38423*t38379*-2.0+t38449*(t38376+t38210*t38318*(t38375-c0p*t38166*t38168* \
               2.0))*2.0-(ccab1*gamma_aa[index]*gcab*t38176*t38366*(4.0/3.0)-ccab2*t38405*t38181*t38407*t38185-ccab1* \
               gamma_aa[index]*t38401*t38180*t38181*t38176*(4.0/3.0)+ccab2*gamma_aa[index]*t38180*t38181*t38370*t38176* \
               (8.0/3.0))*(-t38235+t38383+t38376+rho_a[index]*t38379+t38186*(t38363-t38259+t38210*t38233*t38244*t38227* \
               t38245*4.0-t38210*t38243*t38227*t38245*t38238+t38210*t38233*t38245*t38238*t38275-t38210*t38212*t38233* \
               t38227*t38228*t38238*4.0+Aa*t38210*t38303*t38233*t38282*t38292*t38294*2.0-Aa*t38210*t38243*t38306* \
               t38282*t38292*t38294*2.0-t38210*t38312*t38304*t38233*t38306*t38307*t38282*t38294+Aa*a1a*c*t38210*t38206* \
               t38233*t38306*t38282*t38292*(2.0/3.0))-t38210*t38233*t38227*t38245*t38238-Aa*t38210*t38233*t38306* \
               t38282*t38292*t38294*2.0)*2.0+(ccab0+ccab1*gcab*t38180*t38366+ccab2*t38181*t38370*t38185)*(t38186* \
               (-t38270+t38315-t38280-t38210*t38301*t38227*t38245*t38238-t38210*t38233*t38227*t38245*t38281*2.0E1+ \
               t38210*t38243*t38244*t38227*t38245*8.0-t38210*t38233*t38244*t38245*t38275*8.0-t38210*t38233*t38227* \
               t38228*t38238*1.2E1+t38201*t38261*t38272*t38273*t38157*(1.0/2.0)+t38210*t38243*t38245*t38238*t38275* \
               2.0+t38210*t38233*t38245*t38238*(t38270-t38315+t38280-t38225*t38252*t38271*1.0/(t38219*t38219*t38219) \
               *2.0+t38225*t38252*t38253*(b2f*c*t38197*(4.0/9.0)+b4f*t38155*t38198*(1.0E1/9.0)+b1f*c*t38197*t38199* \
               (2.0/9.0)+b3f*c*t38197*t38189*(2.0/3.0)-b1f*t38262*t38155*t38198*(1.0/3.6E1)+b3f*t38155*t38198*t38199* \
               (1.0/1.2E1))+t38211*1.0/(t38222*t38222)*t38225*t38271*1.0/(t38219*t38219*t38219*t38219)*(1.0/2.0)- \
               a1f*c*c0f*t38223*t38197*(8.0/9.0)-t38201*t38261*t38272*t38273*t38157*(1.0/2.0)+a1f*c*t38206*t38252* \
               t38253*t38258*(2.0/3.0)-a1p*c*t38205*t38206*t38207*t38247*(2.0/3.0))+t38210*t38212*t38233*t38244*t38227* \
               t38228*3.2E1-t38210*t38212*t38243*t38227*t38228*t38238*8.0+t38210*t38212*t38233*t38228*t38238*t38275* \
               8.0+a1p*c*t38205*t38206*t38207*t38247*(2.0/3.0)-Aa*t38210*t38301*t38306*t38282*t38292*t38294*2.0+Aa* \
               t38210*t38303*t38243*t38282*t38292*t38294*4.0-Aa*t38210*t38233*t38282*t38292*t38294*(t38245*t38281* \
               2.0E1+t38228*t38238*1.2E1-t38212*t38244*t38228*3.2E1)*2.0+t38210*t38303*t38312*t38304*t38233*t38307* \
               t38282*t38294*2.0-t38210*t38312*t38304*t38243*t38306*t38307*t38282*t38294*2.0-t38210*t38304*t38313* \
               t38233*t38306*t38282*t38294*1.0/(t38288*t38288*t38288)*2.0+t38210*t38304*t38233*t38306*t38307*t38282* \
               t38294*(b2a*c*t38197*(4.0/9.0)+b4a*t38155*t38198*(1.0E1/9.0)+b1a*c*t38197*t38199*(2.0/9.0)+b3a*c*t38197* \
               t38189*(2.0/3.0)-b1a*t38262*t38155*t38198*(1.0/3.6E1)+b3a*t38155*t38198*t38199*(1.0/1.2E1))-Aa*a1a* \
               c*t38210*t38303*t38206*t38233*t38282*t38292*(4.0/3.0)+Aa*a1a*c*t38210*t38206*t38243*t38306*t38282* \
               t38292*(4.0/3.0)-Aa*a1a*c*t38210*t38233*t38306*t38282*t38292*t38197*(8.0/9.0)+t38210*t38313*t38233* \
               t38306*t38282*1.0/(t38291*t38291)*t38283*t38294*1.0/(t38288*t38288*t38288*t38288)*(1.0/2.0)+a1a*c* \
               t38210*t38312*t38304*t38206*t38233*t38306*t38307*t38282*(2.0/3.0))-rho_a[index]*(-t38352-t38361+t38433+ \
               t38437+t38439+t38210*t38318*(t38431+t38352+t38361+t38436+t38438-t38320*t38342*t38334*t38424*2.0-t38350* \
               t38336*t38168*t38358-a1f*c*c0f*t38335*t38348*(8.0/9.0)-t38360*t38157*t38347*t38168*t38359*(1.0/2.0) \
               -a1p*c*t38350*t38333*t38336*t38329*(2.0/3.0)))+t38210*t38318*t38373*2.0-t38201*t38205*t38207*t38247* \
               2.0+t38350*t38333*t38336*t38168*2.0+a1p*c*c0p*t38206*t38226*(4.0/3.0)-a1p*c*c0p*t38166*t38329*(4.0/ \
               3.0)+t38210*t38233*t38244*t38227*t38245*8.0-t38210*t38243*t38227*t38245*t38238*2.0+t38210*t38233*t38245* \
               t38238*t38275*2.0-t38210*t38212*t38233*t38227*t38228*t38238*8.0+Aa*t38210*t38303*t38233*t38282*t38292* \
               t38294*4.0-Aa*t38210*t38243*t38306*t38282*t38292*t38294*4.0-t38210*t38312*t38304*t38233*t38306*t38307* \
               t38282*t38294*2.0+Aa*a1a*c*t38210*t38206*t38233*t38306*t38282*t38292*(4.0/3.0))+(rho_a[index]*t38440+ \
               rho_b[index]*(t38400-t38210*t38318*(t38400-c0f*log((t38211*(1.0/2.0))/(b1f*t38386+b3f*t38387+b2f*c* \
               t38384+b4f*t38155*t38388)+1.0)*(a1f*c*t38384+1.0)*2.0))-t38186*(t38235+t38210*t38233*t38227*t38245* \
               t38238+Aa*t38210*t38233*t38306*t38282*t38292*t38294*2.0))*(-ccab2*t38181*t38407*t38185*(gamma_aa[index]* \
               gcab*t38406*(8.8E1/9.0)+t38402*t38170*t38181*(3.2E1/9.0)+gamma_aa[index]*t38180*t38181*t38406*(8.8E1/ \
               9.0))+ccab2*(t38405*t38405)*t38181*t38185*1.0/(t38369*t38369*t38369)*2.0+ccab1*gamma_aa[index]*gcab* \
               t38406*t38366*(4.4E1/9.0)-ccab1*t38401*t38402*t38170*t38181*(3.2E1/9.0)+ccab2*t38402*t38170*t38181* \
               t38370*(3.2E1/9.0)-ccab1*gamma_aa[index]*t38401*t38180*t38181*t38406*(4.4E1/9.0)+ccab2*gamma_aa[index]* \
               t38180*t38181*t38370*t38406*(8.8E1/9.0)-ccab2*gamma_aa[index]*t38180*t38405*t38181*t38407*t38176*(1.6E1/ \
               3.0)+ccab1*gcab*t38402*t38170*t38180*t38181*1.0/(t38365*t38365*t38365)*(3.2E1/9.0))+c0*t38156*(cx0+ \
               cx1*gamma_aa[index]*gx*t38418*t38169+cx2*t38170*t38408*t38175*t38419)*(4.0/9.0)-rho_a[index]*t38440* \
               (ccaa1*gamma_aa[index]*gcaa*t38406*t38380*(8.8E1/9.0)-ccaa1*t38402*t38170*t38171*t38442*2.4E1+ccaa2* \
               t38402*t38170*t38171*t38381*(3.04E2/9.0)-ccaa2*t38170*t38171*t38172*t38445*t38446*(3.2E1/3.0)-ccaa2* \
               t38170*t38171*t38175*t38446*(gamma_aa[index]*gcaa*t38406*(1.76E2/9.0)+t38402*t38170*t38171*(3.04E2/ \
               9.0))+ccaa2*t38170*t38171*t38175*(t38445*t38445)*1.0/(t38179*t38179*t38179)*2.0+ccaa1*gamma_aa[index]* \
               gcaa*t38170*t38171*t38441*1.0/(t38174*t38174*t38174)*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t38406*t38418*(8.8E1/9.0)-cx1*t38402*t38420*t38170*t38408*2.4E1+cx2*t38402*t38170* \
               t38408*t38419*(3.04E2/9.0)-cx2*t38411*t38170*t38172*t38408*t38417*(3.2E1/3.0)-cx2*t38170*t38408*t38417* \
               t38175*(gamma_aa[index]*gx*t38406*(1.76E2/9.0)+t38402*t38170*t38408*(3.04E2/9.0))+cx2*(t38411*t38411) \
               *t38170*1.0/(t38414*t38414*t38414)*t38408*t38175*2.0+cx1*gamma_aa[index]*gx*1.0/(t38410*t38410*t38410) \
               *t38170*t38441*t38408*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t38418*t38176* \
               (8.0/3.0)-cx1*t38420*t38170*t38172*t38408*(8.0/3.0)+cx2*t38170*t38172*t38408*t38419*(1.6E1/3.0)-cx2* \
               t38411*t38170*t38408*t38417*t38175)*(8.0/3.0)+rho_a[index]*t38423*(-t38352-t38361+t38433+t38437+t38439+ \
               t38210*t38318*(t38431+t38352+t38361-t38433+t38436-t38437+t38438-t38439-t38320*t38342*t38334*t38424* \
               2.0-a1f*c*c0f*t38335*t38348*(8.0/9.0)))+rho_a[index]*t38449*t38379*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t40677 = 1.0/pow(rho_a[index],1.0/3.0);
            double t40678 = c*t40677;
            double t40679 = sqrt(t40678);
            double t40680 = pow(t40678,3.0/2.0);
            double t40681 = c*c;
            double t40682 = 1.0/pow(rho_a[index],2.0/3.0);
            double t40683 = 1.0/c0p;
            double t40684 = b1p*t40679;
            double t40685 = b3p*t40680;
            double t40686 = b4p*t40681*t40682;
            double t40687 = b2p*c*t40677;
            double t40688 = t40684+t40685+t40686+t40687;
            double t40689 = 1.0/t40688;
            double t40690 = t40683*t40689*(1.0/2.0);
            double t40691 = t40690+1.0;
            double t40692 = log(t40691);
            double t40693 = a1p*c*t40677;
            double t40694 = t40693+1.0;
            double t40695 = 1.0/pow(rho_a[index],8.0/3.0);
            double t40696 = gamma_aa[index]*gamma_aa[index];
            double t40697 = gcaa*gcaa;
            double t40698 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t40699 = gamma_aa[index]*gcaa*t40695;
            double t40700 = t40699+1.0;
            double t40701 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t40702 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t40703 = gamma_aa[index]*gcaa*t40695*2.0;
            double t40704 = t40701*t40696*t40697;
            double t40705 = t40703+t40704+1.0;
            double t40706 = pow(2.0,1.0/3.0);
            double t40707 = t40706*2.0;
            double t40708 = t40707-2.0;
            double t40709 = two_13*2.0;
            double t40710 = t40709-2.0;
            double t40711 = 1.0/t40710;
            double t40712 = a1f*c*t40677;
            double t40713 = t40712+1.0;
            double t40714 = 1.0/c0f;
            double t40715 = b1f*t40679;
            double t40716 = b3f*t40680;
            double t40717 = b4f*t40681*t40682;
            double t40718 = b2f*c*t40677;
            double t40719 = t40715+t40716+t40717+t40718;
            double t40720 = 1.0/t40719;
            double t40721 = t40720*t40714*(1.0/2.0);
            double t40722 = t40721+1.0;
            double t40723 = 1.0/pow(rho_a[index],4.0/3.0);
            double t40724 = 1.0/pow(rho_a[index],5.0/3.0);
            double t40725 = 1.0/sqrt(t40678);
            double t40726 = log(t40722);
            double t40727 = 1.0/t40691;
            double t40728 = 1.0/(t40688*t40688);
            double t40729 = b4p*t40724*t40681*(2.0/3.0);
            double t40730 = b2p*c*t40723*(1.0/3.0);
            double t40731 = b1p*c*t40723*t40725*(1.0/6.0);
            double t40732 = b3p*c*t40723*t40679*(1.0/2.0);
            double t40733 = t40730+t40731+t40732+t40729;
            double t40734 = t40733*t40727*t40728*t40694;
            double t40735 = 1.0/t40700;
            double t40736 = 1.0/t40705;
            double t40737 = gx*gx;
            double t40738 = gamma_aa[index]*gx*t40695;
            double t40739 = t40738+1.0;
            double t40740 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t40745 = gamma_aa[index]*gx*t40702*(1.6E1/3.0);
            double t40746 = t40737*t40696*t40698*(1.6E1/3.0);
            double t40741 = t40745+t40746;
            double t40742 = gamma_aa[index]*gx*t40695*2.0;
            double t40743 = t40701*t40737*t40696;
            double t40744 = t40742+t40743+1.0;
            double t40747 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t40748 = 1.0/(t40744*t40744);
            double t40749 = 1.0/t40739;
            double t40750 = 1.0/t40744;
            double t40751 = 1.0/(t40739*t40739);
            double t40752 = ccaa1*gamma_aa[index]*gcaa*t40735*t40695;
            double t40753 = ccaa2*t40701*t40736*t40696*t40697;
            double t40754 = ccaa0+t40752+t40753;
            double t40755 = 1.0/t40722;
            double t40756 = b4f*t40724*t40681*(2.0/3.0);
            double t40757 = b2f*c*t40723*(1.0/3.0);
            double t40758 = b1f*c*t40723*t40725*(1.0/6.0);
            double t40759 = b3f*c*t40723*t40679*(1.0/2.0);
            double t40760 = t40756+t40757+t40758+t40759;
            double t40761 = 1.0/(t40719*t40719);
            double t40762 = 1.0/pow(rho_a[index],7.0/3.0);
            double t40763 = 1.0/pow(t40678,3.0/2.0);
            double t40764 = t40760*t40760;
            double t40765 = t40733*t40733;
            double t40766 = 1.0/(t40688*t40688*t40688);
            double t40767 = t40727*t40765*t40694*t40766*2.0;
            double t40768 = b4p*t40681*t40695*(1.0E1/9.0);
            double t40769 = b2p*c*t40762*(4.0/9.0);
            double t40770 = b3p*t40725*t40681*t40695*(1.0/1.2E1);
            double t40771 = b1p*c*t40725*t40762*(2.0/9.0);
            double t40772 = b3p*c*t40762*t40679*(2.0/3.0);
            double t40773 = t40770+t40771+t40772+t40768+t40769-b1p*t40681*t40763*t40695*(1.0/3.6E1);
            double t40774 = 1.0/(t40691*t40691);
            double t40775 = 1.0/(t40688*t40688*t40688*t40688);
            double t40776 = a1p*c*c0p*t40762*t40692*(8.0/9.0);
            double t40777 = c0f*t40713*t40726*2.0;
            double t40778 = c0p*t40692*t40694*2.0;
            double t40779 = 1.0/pow(rho_a[index],1.0E1);
            double t40780 = 1.0/(t40700*t40700);
            double t40781 = gamma_aa[index]*gcaa*t40702*(1.6E1/3.0);
            double t40782 = t40696*t40697*t40698*(1.6E1/3.0);
            double t40783 = t40781+t40782;
            double t40784 = 1.0/(t40705*t40705);
            double t40785 = a1f*c*c0f*t40723*t40726*(2.0/3.0);
            double t40786 = a1p*c*c0p*t40723*t40692*(2.0/3.0);
            double t40787 = ccaa1*gamma_aa[index]*gcaa*t40702*t40735*(8.0/3.0);
            double t40788 = ccaa2*t40736*t40696*t40697*t40698*(1.6E1/3.0);
            double t40789 = t40787+t40788-ccaa1*t40780*t40696*t40697*t40698*(8.0/3.0)-ccaa2*t40701*t40783*t40784* \
               t40696*t40697;
            v_rho_a_rho_a_[index] = t40789*(t40778+t40711*t40708*(t40777-c0p*t40692*t40694*2.0))*2.0+t40754*(- \
               t40734+t40786+t40711*t40708*(t40734+t40785-t40713*t40760*t40761*t40755-a1p*c*c0p*t40723*t40692*(2.0/ \
               3.0)))*2.0+c0*t40682*(cx0+cx1*gamma_aa[index]*gx*t40695*t40749+cx2*t40701*t40750*t40737*t40696)*(4.0/ \
               9.0)-rho_a[index]*(t40778+t40711*t40708*(t40777-t40778))*(ccaa1*gamma_aa[index]*gcaa*t40735*t40747* \
               (8.8E1/9.0)-ccaa1*t40740*t40780*t40696*t40697*2.4E1+ccaa2*t40740*t40736*t40696*t40697*(3.04E2/9.0) \
               -ccaa2*t40783*t40784*t40696*t40697*t40698*(3.2E1/3.0)-ccaa2*t40701*t40784*t40696*t40697*(gamma_aa[index]* \
               gcaa*t40747*(1.76E2/9.0)+t40740*t40696*t40697*(3.04E2/9.0))+ccaa2*t40701*1.0/(t40705*t40705*t40705) \
               *(t40783*t40783)*t40696*t40697*2.0+ccaa1*gamma_aa[index]*gcaa*1.0/(t40700*t40700*t40700)*t40696*t40697* \
               t40779*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t40747*t40749*(8.8E1/9.0) \
               -cx1*t40740*t40751*t40737*t40696*2.4E1+cx2*t40740*t40750*t40737*t40696*(3.04E2/9.0)-cx2*t40741*t40737* \
               t40748*t40696*t40698*(3.2E1/3.0)-cx2*t40701*t40737*t40748*t40696*(gamma_aa[index]*gx*t40747*(1.76E2/ \
               9.0)+t40740*t40737*t40696*(3.04E2/9.0))+cx2*t40701*(t40741*t40741)*1.0/(t40744*t40744*t40744)*t40737* \
               t40696*2.0+cx1*gamma_aa[index]*gx*t40737*1.0/(t40739*t40739*t40739)*t40696*t40779*(1.28E2/9.0))+rho_a[index]* \
               t40754*(-t40767-t40776+t40711*t40708*(t40767+t40776-t40727*t40728*t40773*t40694-t40713*1.0/(t40719* \
               t40719*t40719)*t40755*t40764*2.0+t40713*t40761*t40755*(b2f*c*t40762*(4.0/9.0)+b4f*t40681*t40695*(1.0E1/ \
               9.0)+b1f*c*t40725*t40762*(2.0/9.0)+b3f*c*t40762*t40679*(2.0/3.0)-b1f*t40681*t40763*t40695*(1.0/3.6E1) \
               +b3f*t40725*t40681*t40695*(1.0/1.2E1))+t40713*1.0/(t40722*t40722)*t40714*1.0/(t40719*t40719*t40719* \
               t40719)*t40764*(1.0/2.0)-a1f*c*c0f*t40726*t40762*(8.0/9.0)-t40683*t40765*t40774*t40694*t40775*(1.0/ \
               2.0)+a1f*c*t40723*t40760*t40761*t40755*(2.0/3.0)-a1p*c*t40723*t40733*t40727*t40728*(2.0/3.0))+t40727* \
               t40728*t40773*t40694+t40683*t40765*t40774*t40694*t40775*(1.0/2.0)+a1p*c*t40723*t40733*t40727*t40728* \
               (2.0/3.0))-rho_a[index]*t40789*(-t40734+t40786+t40711*t40708*(t40734+t40785-t40786-t40713*t40760*t40761* \
               t40755))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t40702*t40749*(8.0/3.0)-cx1*t40751* \
               t40737*t40696*t40698*(8.0/3.0)+cx2*t40750*t40737*t40696*t40698*(1.6E1/3.0)-cx2*t40701*t40741*t40737* \
               t40748*t40696)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t38451 = 1.0/pow(rho_a[index],1.0/3.0);
            double t38452 = c*t38451;
            double t38453 = sqrt(t38452);
            double t38454 = pow(t38452,3.0/2.0);
            double t38455 = c*c;
            double t38456 = 1.0/pow(rho_a[index],2.0/3.0);
            double t38457 = 1.0/c0p;
            double t38458 = b1p*t38453;
            double t38459 = b3p*t38454;
            double t38460 = b4p*t38455*t38456;
            double t38461 = b2p*c*t38451;
            double t38462 = t38460+t38461+t38458+t38459;
            double t38463 = 1.0/t38462;
            double t38464 = t38463*t38457*(1.0/2.0);
            double t38465 = t38464+1.0;
            double t38466 = log(t38465);
            double t38467 = a1p*c*t38451;
            double t38468 = t38467+1.0;
            double t38469 = pow(2.0,1.0/3.0);
            double t38470 = t38469*2.0;
            double t38471 = t38470-2.0;
            double t38472 = two_13*2.0;
            double t38473 = t38472-2.0;
            double t38474 = 1.0/t38473;
            double t38475 = 1.0/c0f;
            double t38476 = 1.0/pow(rho_b[index],1.0/3.0);
            double t38477 = c*t38476;
            double t38478 = sqrt(t38477);
            double t38479 = pow(t38477,3.0/2.0);
            double t38480 = 1.0/pow(rho_b[index],2.0/3.0);
            double t38481 = b1p*t38478;
            double t38482 = b3p*t38479;
            double t38483 = b4p*t38480*t38455;
            double t38484 = b2p*c*t38476;
            double t38485 = t38481+t38482+t38483+t38484;
            double t38486 = 1.0/t38485;
            double t38487 = t38457*t38486*(1.0/2.0);
            double t38488 = t38487+1.0;
            double t38489 = log(t38488);
            double t38490 = a1p*c*t38476;
            double t38491 = t38490+1.0;
            double t38492 = c0p*t38491*t38489*2.0;
            double t38493 = rho_a[index]+rho_b[index];
            double t38494 = 1.0/pow(t38493,1.0/3.0);
            double t38495 = c*t38494;
            double t38496 = sqrt(t38495);
            double t38497 = pow(t38495,3.0/2.0);
            double t38498 = 1.0/pow(t38493,2.0/3.0);
            double t38499 = b1p*t38496;
            double t38500 = b3p*t38497;
            double t38501 = b4p*t38455*t38498;
            double t38502 = b2p*c*t38494;
            double t38503 = t38500+t38501+t38502+t38499;
            double t38504 = 1.0/t38503;
            double t38505 = t38504*t38457*(1.0/2.0);
            double t38506 = t38505+1.0;
            double t38507 = log(t38506);
            double t38508 = a1p*c*t38494;
            double t38509 = t38508+1.0;
            double t38510 = c0p*t38507*t38509*2.0;
            double t38511 = rho_a[index]-rho_b[index];
            double t38512 = t38511*t38511;
            double t38513 = 1.0/t38493;
            double t38514 = t38511*t38513;
            double t38515 = 1.0/(t38493*t38493*t38493*t38493);
            double t38516 = t38512*t38512;
            double t38517 = t38514+1.0;
            double t38518 = pow(t38517,4.0/3.0);
            double t38519 = -t38514+1.0;
            double t38520 = pow(t38519,4.0/3.0);
            double t38521 = t38520+t38518-2.0;
            double t38522 = gcab*gcab;
            double t38523 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t38524 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t38525 = 1.0/pow(rho_a[index],8.0/3.0);
            double t38526 = gamma_aa[index]*t38525*(1.0/2.0);
            double t38527 = 1.0/pow(rho_b[index],8.0/3.0);
            double t38528 = gamma_bb[index]*t38527*(1.0/2.0);
            double t38529 = t38526+t38528;
            double t38530 = t38529*t38529;
            double t38531 = t38530*t38522;
            double t38532 = gcab*t38529*2.0;
            double t38533 = t38531+t38532+1.0;
            double t38534 = gamma_aa[index]*gcab*t38523*(8.0/3.0);
            double t38535 = gamma_aa[index]*t38522*t38523*t38529*(8.0/3.0);
            double t38536 = t38534+t38535;
            double t38537 = gamma_bb[index]*gcab*t38524*(8.0/3.0);
            double t38538 = gamma_bb[index]*t38522*t38524*t38529*(8.0/3.0);
            double t38539 = t38537+t38538;
            double t38540 = 1.0/(t38533*t38533);
            double t38541 = gcab*t38529;
            double t38542 = t38541+1.0;
            double t38543 = 1.0/(t38542*t38542);
            double t38544 = 1.0/t38533;
            double t38545 = 1.0/pow(t38493,4.0/3.0);
            double t38546 = b1f*t38496;
            double t38547 = b3f*t38497;
            double t38548 = b4f*t38455*t38498;
            double t38549 = b2f*c*t38494;
            double t38550 = t38546+t38547+t38548+t38549;
            double t38551 = 1.0/t38550;
            double t38552 = t38551*t38475*(1.0/2.0);
            double t38553 = t38552+1.0;
            double t38554 = log(t38553);
            double t38555 = a1f*c*t38494;
            double t38556 = t38555+1.0;
            double t38558 = c0f*t38554*t38556*2.0;
            double t38557 = t38510-t38558;
            double t38559 = 1.0/(t38493*t38493);
            double t38586 = t38511*t38559;
            double t38560 = t38513-t38586;
            double t38561 = 1.0/pow(t38493,5.0/3.0);
            double t38562 = 1.0/sqrt(t38495);
            double t38563 = 1.0/t38506;
            double t38564 = 1.0/(t38503*t38503);
            double t38565 = b4p*t38561*t38455*(2.0/3.0);
            double t38566 = b2p*c*t38545*(1.0/3.0);
            double t38567 = b1p*c*t38562*t38545*(1.0/6.0);
            double t38568 = b3p*c*t38545*t38496*(1.0/2.0);
            double t38569 = t38565+t38566+t38567+t38568;
            double t38570 = t38509*t38563*t38564*t38569;
            double t38571 = 1.0/d2fz0;
            double t38572 = 1.0/Aa;
            double t38573 = b1a*t38496;
            double t38574 = b3a*t38497;
            double t38575 = b4a*t38455*t38498;
            double t38576 = b2a*c*t38494;
            double t38577 = t38573+t38574+t38575+t38576;
            double t38578 = 1.0/t38577;
            double t38579 = t38572*t38578*(1.0/2.0);
            double t38580 = t38579+1.0;
            double t38581 = log(t38580);
            double t38582 = a1a*c*t38494;
            double t38583 = t38582+1.0;
            double t38584 = 1.0/(t38493*t38493*t38493*t38493*t38493);
            double t38585 = pow(t38517,1.0/3.0);
            double t38587 = t38560*t38585*(4.0/3.0);
            double t38588 = pow(t38519,1.0/3.0);
            double t38666 = t38560*t38588*(4.0/3.0);
            double t38589 = -t38666+t38587;
            double t38590 = t38515*t38516;
            double t38591 = t38590-1.0;
            double t38592 = a1f*c*t38451;
            double t38593 = t38592+1.0;
            double t38594 = b1f*t38453;
            double t38595 = b3f*t38454;
            double t38596 = b4f*t38455*t38456;
            double t38597 = b2f*c*t38451;
            double t38598 = t38594+t38595+t38596+t38597;
            double t38599 = 1.0/t38598;
            double t38600 = t38475*t38599*(1.0/2.0);
            double t38601 = t38600+1.0;
            double t38602 = 1.0/pow(rho_a[index],4.0/3.0);
            double t38603 = 1.0/pow(rho_a[index],5.0/3.0);
            double t38604 = 1.0/sqrt(t38452);
            double t38605 = log(t38601);
            double t38606 = 1.0/t38465;
            double t38607 = 1.0/(t38462*t38462);
            double t38608 = b4p*t38603*t38455*(2.0/3.0);
            double t38609 = b2p*c*t38602*(1.0/3.0);
            double t38610 = b1p*c*t38602*t38604*(1.0/6.0);
            double t38611 = b3p*c*t38602*t38453*(1.0/2.0);
            double t38612 = t38610+t38611+t38608+t38609;
            double t38613 = t38612*t38606*t38607*t38468;
            double t38614 = c0f*t38605*t38593*2.0;
            double t38615 = c0p*t38466*t38468*2.0;
            double t38616 = Aa*t38521*t38571*t38581*t38474*t38591*t38583*2.0;
            double t38617 = 1.0/t38542;
            double t38618 = t38511*t38512*t38521*t38515*t38474*t38557*4.0;
            double t38619 = t38513+t38586;
            double t38620 = 1.0/t38553;
            double t38621 = 1.0/(t38550*t38550);
            double t38622 = b4f*t38561*t38455*(2.0/3.0);
            double t38623 = b2f*c*t38545*(1.0/3.0);
            double t38624 = b1f*c*t38562*t38545*(1.0/6.0);
            double t38625 = b3f*c*t38545*t38496*(1.0/2.0);
            double t38626 = t38622+t38623+t38624+t38625;
            double t38627 = a1f*c*c0f*t38545*t38554*(2.0/3.0);
            double t38628 = a1p*c*c0p*t38507*t38545*(2.0/3.0);
            double t38629 = t38516*t38584*4.0;
            double t38630 = t38619*t38585*(4.0/3.0);
            double t38665 = t38619*t38588*(4.0/3.0);
            double t38631 = t38630-t38665;
            double t38632 = 1.0/t38580;
            double t38633 = 1.0/(t38577*t38577);
            double t38634 = b4a*t38561*t38455*(2.0/3.0);
            double t38635 = b2a*c*t38545*(1.0/3.0);
            double t38636 = b1a*c*t38562*t38545*(1.0/6.0);
            double t38637 = b3a*c*t38545*t38496*(1.0/2.0);
            double t38638 = t38634+t38635+t38636+t38637;
            double t38639 = Aa*a1a*c*t38521*t38571*t38545*t38581*t38474*t38591*(2.0/3.0);
            double t38640 = a1f*c*t38476;
            double t38641 = t38640+1.0;
            double t38642 = b1f*t38478;
            double t38643 = b3f*t38479;
            double t38644 = b4f*t38480*t38455;
            double t38645 = b2f*c*t38476;
            double t38646 = t38642+t38643+t38644+t38645;
            double t38647 = 1.0/t38646;
            double t38648 = t38475*t38647*(1.0/2.0);
            double t38649 = t38648+1.0;
            double t38650 = 1.0/pow(rho_b[index],4.0/3.0);
            double t38651 = 1.0/pow(rho_b[index],5.0/3.0);
            double t38652 = 1.0/sqrt(t38477);
            double t38653 = log(t38649);
            double t38654 = 1.0/t38488;
            double t38655 = 1.0/(t38485*t38485);
            double t38656 = b4p*t38651*t38455*(2.0/3.0);
            double t38657 = b2p*c*t38650*(1.0/3.0);
            double t38658 = b1p*c*t38650*t38652*(1.0/6.0);
            double t38659 = b3p*c*t38650*t38478*(1.0/2.0);
            double t38660 = t38656+t38657+t38658+t38659;
            double t38661 = t38660*t38491*t38654*t38655;
            double t38662 = t38492-c0f*t38641*t38653*2.0;
            double t38663 = 1.0/pow(t38493,7.0/3.0);
            double t38664 = 1.0/pow(t38493,8.0/3.0);
            double t38682 = t38620*t38621*t38626*t38556;
            double t38667 = t38570+t38627-t38628-t38682;
            double t38668 = t38569*t38569;
            double t38669 = 1.0/pow(t38495,3.0/2.0);
            double t38670 = b4p*t38455*t38664*(1.0E1/9.0);
            double t38671 = b2p*c*t38663*(4.0/9.0);
            double t38672 = b1p*c*t38562*t38663*(2.0/9.0);
            double t38673 = b3p*c*t38663*t38496*(2.0/3.0);
            double t38674 = b3p*t38562*t38455*t38664*(1.0/1.2E1);
            double t38675 = t38670+t38671+t38672+t38673+t38674-b1p*t38455*t38664*t38669*(1.0/3.6E1);
            double t38676 = t38509*t38563*t38564*t38675;
            double t38677 = 1.0/(t38503*t38503*t38503);
            double t38678 = t38626*t38626;
            double t38679 = 1.0/(t38506*t38506);
            double t38680 = 1.0/(t38503*t38503*t38503*t38503);
            double t38681 = t38509*t38680*t38457*t38668*t38679*(1.0/2.0);
            double t38683 = 1.0/(t38493*t38493*t38493);
            double t38684 = a1p*c*t38545*t38563*t38564*t38569*(2.0/3.0);
            double t38685 = 1.0/(t38493*t38493*t38493*t38493*t38493*t38493);
            double t38686 = t38511*t38512*t38515*4.0;
            double t38687 = t38629+t38686;
            double t38688 = t38511*t38683*t38588*(8.0/3.0);
            double t38689 = 1.0/pow(t38517,2.0/3.0);
            double t38690 = t38560*t38619*t38689*(4.0/9.0);
            double t38691 = 1.0/pow(t38519,2.0/3.0);
            double t38692 = t38560*t38619*t38691*(4.0/9.0);
            double t38693 = t38690+t38692+t38688-t38511*t38683*t38585*(8.0/3.0);
            double t38694 = t38638*t38638;
            double t38695 = t38629-t38686;
            double t38696 = t38509*t38563*t38668*t38677*2.0;
            double t38697 = a1p*c*c0p*t38507*t38663*(8.0/9.0);
            double t38698 = t38631*t38515*t38516*t38474*t38557;
            v_rho_a_rho_b_[index] = -(ccab1*gamma_bb[index]*gcab*t38524*t38617*(4.0/3.0)-ccab2*t38530*t38522* \
               t38540*t38539-ccab1*gamma_bb[index]*t38522*t38524*t38543*t38529*(4.0/3.0)+ccab2*gamma_bb[index]*t38522* \
               t38524*t38544*t38529*(8.0/3.0))*(-t38510+t38615-t38616+t38493*(-t38570+t38618+t38628+t38639+t38521* \
               t38515*t38516*t38474*(t38570+t38627-t38620*t38621*t38626*t38556-a1p*c*c0p*t38507*t38545*(2.0/3.0)) \
               -t38521*t38516*t38474*t38557*t38584*4.0+t38515*t38516*t38474*t38557*t38589-Aa*t38571*t38581*t38474* \
               t38591*t38583*t38589*2.0+Aa*t38521*t38571*t38581*t38474*t38583*(t38629-t38511*t38512*t38515*4.0)*2.0- \
               t38521*t38632*t38633*t38571*t38474*t38591*t38583*t38638)-rho_a[index]*(-t38613+t38471*t38474*(t38613- \
               (t38593*1.0/(t38598*t38598)*(b2f*c*t38602*(1.0/3.0)+b4f*t38603*t38455*(2.0/3.0)+b1f*c*t38602*t38604* \
               (1.0/6.0)+b3f*c*t38602*t38453*(1.0/2.0)))/t38601+a1f*c*c0f*t38602*t38605*(2.0/3.0)-a1p*c*c0p*t38602* \
               t38466*(2.0/3.0))+a1p*c*c0p*t38602*t38466*(2.0/3.0))+t38471*t38474*(t38614-t38615)+t38521*t38515*t38516* \
               t38474*t38557)+(ccab1*gamma_aa[index]*gcab*t38523*t38617*(4.0/3.0)-ccab2*t38530*t38522*t38540*t38536- \
               ccab1*gamma_aa[index]*t38522*t38523*t38543*t38529*(4.0/3.0)+ccab2*gamma_aa[index]*t38522*t38523*t38544* \
               t38529*(8.0/3.0))*(t38510+t38616-t38492+t38493*(t38570+t38618-t38628-t38639+t38698-t38521*t38515*t38516* \
               t38474*t38667+t38521*t38516*t38474*t38557*t38584*4.0-Aa*t38631*t38571*t38581*t38474*t38591*t38583* \
               2.0-Aa*t38521*t38571*t38581*t38474*t38583*t38687*2.0+t38521*t38632*t38633*t38571*t38474*t38591*t38583* \
               t38638)+rho_b[index]*(-t38661+t38471*t38474*(t38661-(t38641*1.0/(t38646*t38646)*(b2f*c*t38650*(1.0/ \
               3.0)+b4f*t38651*t38455*(2.0/3.0)+b1f*c*t38650*t38652*(1.0/6.0)+b3f*c*t38650*t38478*(1.0/2.0)))/t38649+ \
               a1f*c*c0f*t38650*t38653*(2.0/3.0)-a1p*c*c0p*t38650*t38489*(2.0/3.0))+a1p*c*c0p*t38650*t38489*(2.0/ \
               3.0))+t38471*t38662*t38474-t38521*t38515*t38516*t38474*(t38510-t38558))+(ccab0+ccab1*gcab*t38617*t38529+ \
               ccab2*t38530*t38522*t38544)*(-t38698-t38493*(-t38681-t38684-t38676+t38696+t38697+t38521*t38515*t38516* \
               t38474*(t38681+t38684+t38676-t38696-t38697+t38620*1.0/(t38550*t38550*t38550)*t38556*t38678*2.0-t38620* \
               t38621*t38556*(b2f*c*t38663*(4.0/9.0)+b4f*t38455*t38664*(1.0E1/9.0)+b1f*c*t38562*t38663*(2.0/9.0)+ \
               b3f*c*t38663*t38496*(2.0/3.0)-b1f*t38455*t38664*t38669*(1.0/3.6E1)+b3f*t38562*t38455*t38664*(1.0/1.2E1) \
               )-1.0/(t38550*t38550*t38550*t38550)*1.0/(t38553*t38553)*t38475*t38556*t38678*(1.0/2.0)+a1f*c*c0f*t38554* \
               t38663*(8.0/9.0)-a1f*c*t38620*t38621*t38545*t38626*(2.0/3.0))+t38512*t38521*t38515*t38474*t38557*1.2E1+ \
               t38631*t38515*t38516*t38474*t38667-t38521*t38516*t38474*t38557*t38685*2.0E1+t38521*t38516*t38474*t38584* \
               t38667*8.0-t38631*t38516*t38474*t38557*t38584*4.0+t38515*t38516*t38474*t38557*t38693-t38515*t38516* \
               t38474*t38667*t38589+t38516*t38474*t38557*t38584*t38589*4.0+t38511*t38512*t38631*t38515*t38474*t38557* \
               4.0+t38511*t38512*t38515*t38474*t38557*t38589*4.0+Aa*t38631*t38571*t38581*t38474*t38583*t38695*2.0- \
               Aa*t38571*t38581*t38474*t38591*t38583*t38693*2.0-Aa*t38571*t38581*t38474*t38583*t38687*t38589*2.0- \
               Aa*t38521*t38571*t38581*t38474*t38583*(t38512*t38515*1.2E1-t38516*t38685*2.0E1)*2.0-t38631*t38632* \
               t38633*t38571*t38474*t38591*t38583*t38638-t38521*t38632*t38633*t38571*t38474*t38583*t38638*t38695- \
               t38521*t38632*t38633*t38571*t38474*t38583*t38638*t38687+t38632*t38633*t38571*t38474*t38591*t38583* \
               t38638*t38589+t38521*t38632*t38571*t38474*t38591*t38583*1.0/(t38577*t38577*t38577)*t38694*2.0-t38521* \
               t38632*t38633*t38571*t38474*t38591*t38583*(b2a*c*t38663*(4.0/9.0)+b4a*t38455*t38664*(1.0E1/9.0)+b1a* \
               c*t38562*t38663*(2.0/9.0)+b3a*c*t38663*t38496*(2.0/3.0)-b1a*t38455*t38664*t38669*(1.0/3.6E1)+b3a*t38562* \
               t38455*t38664*(1.0/1.2E1))+Aa*a1a*c*t38521*t38571*t38581*t38474*t38591*t38663*(8.0/9.0)+Aa*a1a*c*t38631* \
               t38571*t38545*t38581*t38474*t38591*(2.0/3.0)+Aa*a1a*c*t38521*t38571*t38545*t38581*t38474*t38695*(2.0/ \
               3.0)+Aa*a1a*c*t38521*t38571*t38545*t38581*t38474*t38687*(2.0/3.0)-Aa*a1a*c*t38571*t38545*t38581*t38474* \
               t38591*t38589*(2.0/3.0)-t38521*t38571*1.0/(t38580*t38580)*t38572*t38474*t38591*t38583*1.0/(t38577* \
               t38577*t38577*t38577)*t38694*(1.0/2.0)-a1a*c*t38521*t38632*t38633*t38571*t38545*t38474*t38591*t38638* \
               (2.0/3.0))-t38509*t38563*t38564*t38569*2.0+t38521*t38515*t38516*t38474*(t38570+t38627-t38628-t38682) \
               *2.0+a1p*c*c0p*t38507*t38545*(4.0/3.0)-t38521*t38516*t38474*t38557*t38584*8.0+t38515*t38516*t38474* \
               t38589*(t38510-t38558)+Aa*t38631*t38571*t38581*t38474*t38591*t38583*2.0+Aa*t38521*t38571*t38581*t38474* \
               t38583*t38687*2.0-Aa*t38571*t38581*t38474*t38591*t38583*t38589*2.0+Aa*t38521*t38571*t38581*t38474* \
               t38583*(t38629-t38686)*2.0-t38521*t38632*t38633*t38571*t38474*t38591*t38583*t38638*2.0+Aa*a1a*c*t38521* \
               t38571*t38545*t38581*t38474*t38591*(4.0/3.0))-(rho_b[index]*(t38492-t38471*t38662*t38474)+rho_a[index]* \
               (t38615+t38471*t38474*(t38614-c0p*t38466*t38468*2.0))-t38493*(t38510+t38616-t38521*t38515*t38516*t38474* \
               t38557))*(ccab2*t38530*t38522*1.0/(t38533*t38533*t38533)*t38536*t38539*-2.0+ccab1*gamma_aa[index]* \
               gamma_bb[index]*t38522*t38523*t38524*t38543*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t38522* \
               t38523*t38524*t38544*(3.2E1/9.0)+ccab2*gamma_aa[index]*t38522*t38540*t38523*t38529*t38539*(8.0/3.0) \
               +ccab2*gamma_bb[index]*t38522*t38540*t38524*t38536*t38529*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t38530*(t38522*t38522)*t38540*t38523*t38524*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab* \
               t38522*t38523*t38524*1.0/(t38542*t38542*t38542)*t38529*(3.2E1/9.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t38700 = 1.0/pow(rho_b[index],1.0/3.0);
            double t38701 = c*t38700;
            double t38702 = sqrt(t38701);
            double t38703 = pow(t38701,3.0/2.0);
            double t38704 = c*c;
            double t38705 = 1.0/pow(rho_b[index],2.0/3.0);
            double t38706 = 1.0/c0p;
            double t38707 = b1p*t38702;
            double t38708 = b3p*t38703;
            double t38709 = b4p*t38704*t38705;
            double t38710 = b2p*c*t38700;
            double t38711 = t38710+t38707+t38708+t38709;
            double t38712 = 1.0/t38711;
            double t38713 = t38712*t38706*(1.0/2.0);
            double t38714 = t38713+1.0;
            double t38715 = log(t38714);
            double t38716 = a1p*c*t38700;
            double t38717 = t38716+1.0;
            double t38718 = 1.0/pow(rho_b[index],8.0/3.0);
            double t38719 = gamma_bb[index]*gamma_bb[index];
            double t38720 = gcaa*gcaa;
            double t38721 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t38722 = gamma_bb[index]*gcaa*t38718;
            double t38723 = t38722+1.0;
            double t38724 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t38725 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t38726 = gamma_bb[index]*gcaa*t38718*2.0;
            double t38727 = t38720*t38724*t38719;
            double t38728 = t38726+t38727+1.0;
            double t38731 = 1.0/pow(rho_a[index],8.0/3.0);
            double t38732 = gamma_aa[index]*t38731*(1.0/2.0);
            double t38733 = gamma_bb[index]*t38718*(1.0/2.0);
            double t38729 = t38732+t38733;
            double t38730 = gcab*gcab;
            double t38734 = t38729*t38729;
            double t38735 = rho_a[index]+rho_b[index];
            double t38736 = 1.0/pow(t38735,1.0/3.0);
            double t38737 = c*t38736;
            double t38738 = sqrt(t38737);
            double t38739 = b1p*t38738;
            double t38740 = pow(t38737,3.0/2.0);
            double t38741 = b3p*t38740;
            double t38742 = 1.0/pow(t38735,2.0/3.0);
            double t38743 = b4p*t38704*t38742;
            double t38744 = b2p*c*t38736;
            double t38745 = t38741+t38743+t38744+t38739;
            double t38746 = 1.0/pow(t38735,7.0/3.0);
            double t38747 = 1.0/pow(t38735,8.0/3.0);
            double t38748 = 1.0/sqrt(t38737);
            double t38749 = a1p*c*t38736;
            double t38750 = t38749+1.0;
            double t38751 = 1.0/t38745;
            double t38752 = t38706*t38751*(1.0/2.0);
            double t38753 = t38752+1.0;
            double t38754 = 1.0/t38753;
            double t38755 = 1.0/pow(t38735,4.0/3.0);
            double t38795 = 1.0/pow(t38735,5.0/3.0);
            double t38797 = b4p*t38704*t38795*(2.0/3.0);
            double t38798 = b2p*c*t38755*(1.0/3.0);
            double t38799 = b1p*c*t38755*t38748*(1.0/6.0);
            double t38800 = b3p*c*t38755*t38738*(1.0/2.0);
            double t38756 = t38800+t38797+t38798+t38799;
            double t38757 = two_13*2.0;
            double t38758 = t38757-2.0;
            double t38759 = 1.0/t38758;
            double t38760 = 1.0/c0f;
            double t38761 = rho_a[index]-rho_b[index];
            double t38762 = 1.0/t38735;
            double t38763 = t38761*t38762;
            double t38764 = b1f*t38738;
            double t38765 = b3f*t38740;
            double t38766 = b4f*t38704*t38742;
            double t38767 = b2f*c*t38736;
            double t38768 = t38764+t38765+t38766+t38767;
            double t38769 = 1.0/t38768;
            double t38770 = t38760*t38769*(1.0/2.0);
            double t38771 = t38770+1.0;
            double t38772 = log(t38771);
            double t38773 = a1f*c*t38736;
            double t38774 = t38773+1.0;
            double t38775 = log(t38753);
            double t38783 = c0f*t38772*t38774*2.0;
            double t38784 = c0p*t38750*t38775*2.0;
            double t38776 = t38783-t38784;
            double t38777 = t38761*t38761;
            double t38778 = t38763+1.0;
            double t38779 = pow(t38778,4.0/3.0);
            double t38780 = -t38763+1.0;
            double t38781 = pow(t38780,4.0/3.0);
            double t38782 = t38781+t38779-2.0;
            double t38785 = 1.0/(t38735*t38735);
            double t38786 = t38761*t38785;
            double t38787 = t38762+t38786;
            double t38788 = 1.0/(t38735*t38735*t38735*t38735);
            double t38789 = pow(t38778,1.0/3.0);
            double t38790 = t38787*t38789*(4.0/3.0);
            double t38791 = pow(t38780,1.0/3.0);
            double t38824 = t38791*t38787*(4.0/3.0);
            double t38792 = -t38824+t38790;
            double t38793 = 1.0/(t38735*t38735*t38735*t38735*t38735);
            double t38794 = t38777*t38777;
            double t38796 = 1.0/(t38745*t38745);
            double t38801 = 1.0/t38771;
            double t38802 = 1.0/(t38768*t38768);
            double t38803 = b4f*t38704*t38795*(2.0/3.0);
            double t38804 = b2f*c*t38755*(1.0/3.0);
            double t38805 = b1f*c*t38755*t38748*(1.0/6.0);
            double t38806 = b3f*c*t38755*t38738*(1.0/2.0);
            double t38807 = t38803+t38804+t38805+t38806;
            double t38808 = t38801*t38802*t38807*t38774;
            double t38809 = a1p*c*c0p*t38755*t38775*(2.0/3.0);
            double t38825 = t38750*t38754*t38756*t38796;
            double t38826 = a1f*c*c0f*t38772*t38755*(2.0/3.0);
            double t38810 = -t38825+t38808-t38826+t38809;
            double t38811 = t38756*t38756;
            double t38812 = 1.0/pow(t38737,3.0/2.0);
            double t38813 = b4p*t38704*t38747*(1.0E1/9.0);
            double t38814 = b2p*c*t38746*(4.0/9.0);
            double t38815 = b1p*c*t38746*t38748*(2.0/9.0);
            double t38816 = b3p*c*t38746*t38738*(2.0/3.0);
            double t38817 = b3p*t38704*t38747*t38748*(1.0/1.2E1);
            double t38818 = t38813+t38814+t38815+t38816+t38817-b1p*t38704*t38812*t38747*(1.0/3.6E1);
            double t38819 = 1.0/(t38745*t38745*t38745);
            double t38820 = t38811*t38750*t38754*t38819*2.0;
            double t38821 = t38807*t38807;
            double t38822 = 1.0/(t38753*t38753);
            double t38823 = 1.0/(t38745*t38745*t38745*t38745);
            double t38827 = t38785*2.0;
            double t38828 = 1.0/(t38735*t38735*t38735);
            double t38829 = t38761*t38828*2.0;
            double t38830 = t38827+t38829;
            double t38831 = t38787*t38787;
            double t38832 = a1p*c*c0p*t38746*t38775*(8.0/9.0);
            double t38833 = 1.0/(t38735*t38735*t38735*t38735*t38735*t38735);
            double t38834 = 1.0/d2fz0;
            double t38835 = 1.0/Aa;
            double t38836 = b1a*t38738;
            double t38837 = b3a*t38740;
            double t38838 = b4a*t38704*t38742;
            double t38839 = b2a*c*t38736;
            double t38840 = t38836+t38837+t38838+t38839;
            double t38841 = 1.0/t38840;
            double t38842 = t38841*t38835*(1.0/2.0);
            double t38843 = t38842+1.0;
            double t38844 = log(t38843);
            double t38845 = a1a*c*t38736;
            double t38846 = t38845+1.0;
            double t38847 = t38830*t38789*(4.0/3.0);
            double t38848 = 1.0/pow(t38778,2.0/3.0);
            double t38849 = t38831*t38848*(4.0/9.0);
            double t38850 = 1.0/pow(t38780,2.0/3.0);
            double t38851 = t38831*t38850*(4.0/9.0);
            double t38852 = t38851+t38847+t38849-t38830*t38791*(4.0/3.0);
            double t38853 = t38761*t38777*t38788*4.0;
            double t38854 = t38793*t38794*4.0;
            double t38855 = t38853+t38854;
            double t38856 = 1.0/t38843;
            double t38857 = t38794*t38788;
            double t38858 = t38857-1.0;
            double t38859 = 1.0/(t38840*t38840);
            double t38860 = b4a*t38704*t38795*(2.0/3.0);
            double t38861 = b2a*c*t38755*(1.0/3.0);
            double t38862 = b1a*c*t38755*t38748*(1.0/6.0);
            double t38863 = b3a*c*t38755*t38738*(1.0/2.0);
            double t38864 = t38860+t38861+t38862+t38863;
            double t38865 = t38864*t38864;
            double t38866 = pow(2.0,1.0/3.0);
            double t38867 = t38866*2.0;
            double t38868 = t38867-2.0;
            double t38869 = a1f*c*t38700;
            double t38870 = t38869+1.0;
            double t38871 = b1f*t38702;
            double t38872 = b3f*t38703;
            double t38873 = b4f*t38704*t38705;
            double t38874 = b2f*c*t38700;
            double t38875 = t38871+t38872+t38873+t38874;
            double t38876 = 1.0/t38875;
            double t38877 = t38760*t38876*(1.0/2.0);
            double t38878 = t38877+1.0;
            double t38879 = 1.0/pow(rho_b[index],4.0/3.0);
            double t38881 = 1.0/pow(rho_b[index],5.0/3.0);
            double t38882 = 1.0/sqrt(t38701);
            double t38888 = b4f*t38704*t38881*(2.0/3.0);
            double t38889 = b2f*c*t38879*(1.0/3.0);
            double t38890 = b1f*c*t38882*t38879*(1.0/6.0);
            double t38891 = b3f*c*t38702*t38879*(1.0/2.0);
            double t38880 = t38890+t38891+t38888+t38889;
            double t38893 = b4p*t38704*t38881*(2.0/3.0);
            double t38894 = b2p*c*t38879*(1.0/3.0);
            double t38895 = b1p*c*t38882*t38879*(1.0/6.0);
            double t38896 = b3p*c*t38702*t38879*(1.0/2.0);
            double t38883 = t38893+t38894+t38895+t38896;
            double t38884 = 1.0/t38878;
            double t38885 = 1.0/pow(rho_b[index],7.0/3.0);
            double t38886 = 1.0/t38714;
            double t38887 = 1.0/pow(t38701,3.0/2.0);
            double t38892 = t38880*t38880;
            double t38897 = t38883*t38883;
            double t38898 = log(t38878);
            double t38899 = 1.0/(t38875*t38875);
            double t38900 = 1.0/(t38711*t38711);
            double t38901 = 1.0/(t38711*t38711*t38711);
            double t38902 = t38901*t38717*t38886*t38897*2.0;
            double t38903 = b4p*t38704*t38718*(1.0E1/9.0);
            double t38904 = b2p*c*t38885*(4.0/9.0);
            double t38905 = b3p*t38704*t38718*t38882*(1.0/1.2E1);
            double t38906 = b1p*c*t38882*t38885*(2.0/9.0);
            double t38907 = b3p*c*t38702*t38885*(2.0/3.0);
            double t38980 = b1p*t38704*t38718*t38887*(1.0/3.6E1);
            double t38908 = t38903+t38904+t38905+t38906+t38907-t38980;
            double t38909 = 1.0/(t38714*t38714);
            double t38910 = 1.0/(t38711*t38711*t38711*t38711);
            double t38911 = a1p*c*c0p*t38715*t38885*(8.0/9.0);
            double t38912 = gcab*t38729;
            double t38913 = t38912+1.0;
            double t38914 = 1.0/t38913;
            double t38915 = t38730*t38734;
            double t38916 = gcab*t38729*2.0;
            double t38917 = t38915+t38916+1.0;
            double t38918 = 1.0/t38917;
            double t38919 = t38900*t38717*t38883*t38886;
            double t38920 = a1f*c*c0f*t38879*t38898*(2.0/3.0);
            double t38922 = a1p*c*c0p*t38715*t38879*(2.0/3.0);
            double t38925 = t38870*t38880*t38884*t38899;
            double t38921 = t38920-t38922-t38925+t38919;
            double t38923 = c0f*t38870*t38898*2.0;
            double t38924 = c0p*t38715*t38717*2.0;
            double t38926 = t38921*t38759*t38868;
            double t38927 = 1.0/t38723;
            double t38928 = 1.0/t38728;
            double t38929 = 1.0/pow(rho_a[index],1.0/3.0);
            double t38930 = c*t38929;
            double t38931 = sqrt(t38930);
            double t38932 = pow(t38930,3.0/2.0);
            double t38933 = 1.0/pow(rho_a[index],2.0/3.0);
            double t38934 = b1p*t38931;
            double t38935 = b3p*t38932;
            double t38936 = b4p*t38704*t38933;
            double t38937 = b2p*c*t38929;
            double t38938 = t38934+t38935+t38936+t38937;
            double t38939 = 1.0/t38938;
            double t38940 = t38706*t38939*(1.0/2.0);
            double t38941 = t38940+1.0;
            double t38942 = log(t38941);
            double t38943 = a1p*c*t38929;
            double t38944 = t38943+1.0;
            double t38945 = c0p*t38942*t38944*2.0;
            double t38946 = t38923-t38924;
            double t38947 = t38782*t38776*t38794*t38759*t38788;
            double t38948 = Aa*t38834*t38844*t38782*t38846*t38759*t38858*2.0;
            double t38949 = 1.0/(t38913*t38913);
            double t38950 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t38951 = gamma_bb[index]*gcab*t38725*(8.0/3.0);
            double t38952 = gamma_bb[index]*t38730*t38725*t38729*(8.0/3.0);
            double t38953 = t38951+t38952;
            double t38954 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t38955 = 1.0/(t38917*t38917);
            double t38956 = gx*gx;
            double t38957 = gamma_bb[index]*gx*t38718;
            double t38958 = t38957+1.0;
            double t38963 = gamma_bb[index]*gx*t38725*(1.6E1/3.0);
            double t38964 = t38721*t38719*t38956*(1.6E1/3.0);
            double t38959 = t38963+t38964;
            double t38960 = gamma_bb[index]*gx*t38718*2.0;
            double t38961 = t38724*t38719*t38956;
            double t38962 = t38960+t38961+1.0;
            double t38965 = 1.0/(t38962*t38962);
            double t38966 = 1.0/t38958;
            double t38967 = 1.0/t38962;
            double t38968 = 1.0/(t38958*t38958);
            double t38969 = ccaa1*gamma_bb[index]*gcaa*t38718*t38927;
            double t38970 = ccaa2*t38720*t38724*t38719*t38928;
            double t38971 = ccaa0+t38970+t38969;
            double t38972 = 1.0/(t38875*t38875*t38875);
            double t38973 = b4f*t38704*t38718*(1.0E1/9.0);
            double t38974 = b2f*c*t38885*(4.0/9.0);
            double t38975 = b3f*t38704*t38718*t38882*(1.0/1.2E1);
            double t38976 = b1f*c*t38882*t38885*(2.0/9.0);
            double t38977 = b3f*c*t38702*t38885*(2.0/3.0);
            double t38978 = t38973+t38974+t38975+t38976+t38977-b1f*t38704*t38718*t38887*(1.0/3.6E1);
            double t38979 = t38870*t38884*t38978*t38899;
            double t38981 = t38900*t38717*t38908*t38886;
            double t38982 = 1.0/(t38878*t38878);
            double t38983 = 1.0/(t38875*t38875*t38875*t38875);
            double t38984 = t38760*t38870*t38892*t38982*t38983*(1.0/2.0);
            double t38985 = t38910*t38706*t38717*t38909*t38897*(1.0/2.0);
            double t38986 = a1f*c*t38880*t38884*t38879*t38899*(2.0/3.0);
            double t38987 = a1p*c*t38900*t38883*t38886*t38879*(2.0/3.0);
            double t38988 = t38946*t38759*t38868;
            double t38989 = t38924+t38988;
            double t38990 = 1.0/pow(rho_b[index],1.0E1);
            double t38991 = 1.0/(t38723*t38723);
            double t38992 = gamma_bb[index]*gcaa*t38725*(1.6E1/3.0);
            double t38993 = t38720*t38721*t38719*(1.6E1/3.0);
            double t38994 = t38992+t38993;
            double t38995 = 1.0/(t38728*t38728);
            double t38996 = ccaa1*gamma_bb[index]*gcaa*t38725*t38927*(8.0/3.0);
            double t38997 = ccaa2*t38720*t38721*t38719*t38928*(1.6E1/3.0);
            double t38998 = t38996+t38997-ccaa1*t38720*t38721*t38719*t38991*(8.0/3.0)-ccaa2*t38720*t38724*t38719* \
               t38994*t38995;
            double t38999 = t38922+t38926-t38919;
            v_rho_b_rho_b_[index] = t38971*t38999*2.0+t38998*(t38924+t38759*t38868*(t38923-c0p*t38715*t38717* \
               2.0))*2.0+(rho_b[index]*t38989+rho_a[index]*(t38945-t38759*t38868*(t38945-c0f*log((t38760*(1.0/2.0) \
               )/(b1f*t38931+b3f*t38932+b2f*c*t38929+b4f*t38704*t38933)+1.0)*(a1f*c*t38929+1.0)*2.0))-t38735*(t38784+ \
               t38947+t38948))*(-ccab2*t38730*t38734*t38955*(gamma_bb[index]*gcab*t38954*(8.8E1/9.0)+t38730*t38950* \
               t38719*(3.2E1/9.0)+gamma_bb[index]*t38730*t38729*t38954*(8.8E1/9.0))+ccab2*t38730*t38734*1.0/(t38917* \
               t38917*t38917)*(t38953*t38953)*2.0+ccab1*gamma_bb[index]*gcab*t38914*t38954*(4.4E1/9.0)+ccab2*t38730* \
               t38950*t38719*t38918*(3.2E1/9.0)-ccab1*t38730*t38950*t38719*t38949*(3.2E1/9.0)+ccab2*gamma_bb[index]* \
               t38730*t38729*t38918*t38954*(8.8E1/9.0)-ccab1*gamma_bb[index]*t38730*t38729*t38954*t38949*(4.4E1/9.0) \
               -ccab2*gamma_bb[index]*t38730*t38725*t38953*t38729*t38955*(1.6E1/3.0)+ccab1*gcab*t38730*1.0/(t38913* \
               t38913*t38913)*t38950*t38719*t38729*(3.2E1/9.0))+(ccab1*gamma_bb[index]*gcab*t38725*t38914*(4.0/3.0) \
               -ccab2*t38730*t38734*t38953*t38955+ccab2*gamma_bb[index]*t38730*t38725*t38729*t38918*(8.0/3.0)-ccab1* \
               gamma_bb[index]*t38730*t38725*t38729*t38949*(4.0/3.0))*(-t38924+t38784+t38947+t38948+rho_b[index]* \
               t38999-t38735*(-t38825+t38809-t38810*t38782*t38794*t38759*t38788+t38782*t38793*t38776*t38794*t38759* \
               4.0+t38792*t38776*t38794*t38759*t38788+t38761*t38782*t38776*t38759*t38777*t38788*4.0+Aa*t38834*t38844* \
               t38782*t38846*t38855*t38759*2.0+Aa*t38834*t38844*t38792*t38846*t38759*t38858*2.0-t38834*t38782*t38846* \
               t38864*t38856*t38759*t38858*t38859+Aa*a1a*c*t38834*t38844*t38755*t38782*t38759*t38858*(2.0/3.0))-t38946* \
               t38759*t38868)*2.0+(ccab0+ccab1*gcab*t38914*t38729+ccab2*t38730*t38734*t38918)*(-rho_b[index]*(-t38902- \
               t38911+t38981+t38985+t38987+t38759*t38868*(t38902+t38911+t38984+t38986+t38979-t38900*t38717*t38908* \
               t38886-t38870*t38972*t38892*t38884*2.0-a1f*c*c0f*t38885*t38898*(8.0/9.0)-t38910*t38706*t38717*t38909* \
               t38897*(1.0/2.0)-a1p*c*t38900*t38883*t38886*t38879*(2.0/3.0)))-t38735*(t38820+t38832-t38750*t38754* \
               t38818*t38796-t38782*t38794*t38759*t38788*(t38820+t38832-t38750*t38754*t38818*t38796-t38801*t38821* \
               t38774*1.0/(t38768*t38768*t38768)*2.0+t38801*t38802*t38774*(b2f*c*t38746*(4.0/9.0)+b4f*t38704*t38747* \
               (1.0E1/9.0)+b1f*c*t38746*t38748*(2.0/9.0)+b3f*c*t38746*t38738*(2.0/3.0)-b1f*t38704*t38812*t38747*(1.0/ \
               3.6E1)+b3f*t38704*t38747*t38748*(1.0/1.2E1))+t38821*t38760*1.0/(t38771*t38771)*t38774*1.0/(t38768* \
               t38768*t38768*t38768)*(1.0/2.0)-a1f*c*c0f*t38772*t38746*(8.0/9.0)-t38811*t38750*t38822*t38706*t38823* \
               (1.0/2.0)+a1f*c*t38801*t38802*t38807*t38755*(2.0/3.0)-a1p*c*t38754*t38755*t38756*t38796*(2.0/3.0)) \
               -t38811*t38750*t38822*t38706*t38823*(1.0/2.0)-t38810*t38782*t38793*t38794*t38759*8.0-t38810*t38792* \
               t38794*t38759*t38788*2.0+t38833*t38782*t38776*t38794*t38759*2.0E1+t38792*t38793*t38776*t38794*t38759* \
               8.0+t38852*t38776*t38794*t38759*t38788+t38782*t38776*t38759*t38777*t38788*1.2E1-t38810*t38761*t38782* \
               t38759*t38777*t38788*8.0+t38761*t38782*t38793*t38776*t38759*t38777*3.2E1+t38761*t38792*t38776*t38759* \
               t38777*t38788*8.0-a1p*c*t38754*t38755*t38756*t38796*(2.0/3.0)+Aa*t38834*t38852*t38844*t38846*t38759* \
               t38858*2.0+Aa*t38834*t38844*t38792*t38846*t38855*t38759*4.0+Aa*t38834*t38844*t38782*t38846*t38759* \
               (t38833*t38794*2.0E1+t38777*t38788*1.2E1+t38761*t38793*t38777*3.2E1)*2.0-t38834*t38782*t38846*t38855* \
               t38864*t38856*t38759*t38859*2.0-t38834*t38792*t38846*t38864*t38856*t38759*t38858*t38859*2.0+1.0/(t38840* \
               t38840*t38840)*t38834*t38782*t38846*t38856*t38865*t38759*t38858*2.0-t38834*t38782*t38846*t38856*t38759* \
               t38858*t38859*(b2a*c*t38746*(4.0/9.0)+b4a*t38704*t38747*(1.0E1/9.0)+b1a*c*t38746*t38748*(2.0/9.0)+ \
               b3a*c*t38746*t38738*(2.0/3.0)-b1a*t38704*t38812*t38747*(1.0/3.6E1)+b3a*t38704*t38747*t38748*(1.0/1.2E1) \
               )+Aa*a1a*c*t38834*t38844*t38755*t38782*t38855*t38759*(4.0/3.0)+Aa*a1a*c*t38834*t38844*t38746*t38782* \
               t38759*t38858*(8.0/9.0)+Aa*a1a*c*t38834*t38844*t38755*t38792*t38759*t38858*(4.0/3.0)-1.0/(t38840*t38840* \
               t38840*t38840)*t38834*1.0/(t38843*t38843)*t38835*t38782*t38846*t38865*t38759*t38858*(1.0/2.0)-a1a* \
               c*t38834*t38755*t38782*t38864*t38856*t38759*t38858*t38859*(2.0/3.0))-t38921*t38759*t38868*2.0+t38900* \
               t38717*t38883*t38886*2.0-t38750*t38754*t38756*t38796*2.0+a1p*c*c0p*t38755*t38775*(4.0/3.0)-a1p*c*c0p* \
               t38715*t38879*(4.0/3.0)-t38810*t38782*t38794*t38759*t38788*2.0+t38782*t38793*t38776*t38794*t38759* \
               8.0+t38792*t38776*t38794*t38759*t38788*2.0+t38761*t38782*t38776*t38759*t38777*t38788*8.0+Aa*t38834* \
               t38844*t38782*t38846*t38855*t38759*4.0+Aa*t38834*t38844*t38792*t38846*t38759*t38858*4.0-t38834*t38782* \
               t38846*t38864*t38856*t38759*t38858*t38859*2.0+Aa*a1a*c*t38834*t38844*t38755*t38782*t38759*t38858*(4.0/ \
               3.0))+c0*t38705*(cx0+cx1*gamma_bb[index]*gx*t38718*t38966+cx2*t38724*t38719*t38956*t38967)*(4.0/9.0) \
               -rho_b[index]*t38989*(ccaa1*gamma_bb[index]*gcaa*t38927*t38954*(8.8E1/9.0)-ccaa1*t38720*t38950*t38719* \
               t38991*2.4E1+ccaa2*t38720*t38950*t38719*t38928*(3.04E2/9.0)-ccaa2*t38720*t38721*t38719*t38994*t38995* \
               (3.2E1/3.0)-ccaa2*t38720*t38724*t38719*t38995*(gamma_bb[index]*gcaa*t38954*(1.76E2/9.0)+t38720*t38950* \
               t38719*(3.04E2/9.0))+ccaa2*t38720*t38724*t38719*1.0/(t38728*t38728*t38728)*(t38994*t38994)*2.0+ccaa1* \
               gamma_bb[index]*gcaa*t38720*1.0/(t38723*t38723*t38723)*t38719*t38990*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t38954*t38966*(8.8E1/9.0)-cx1*t38950*t38719*t38956*t38968*2.4E1+cx2*t38950* \
               t38719*t38956*t38967*(3.04E2/9.0)-cx2*t38721*t38719*t38956*t38965*t38959*(3.2E1/3.0)-cx2*t38724*t38719* \
               t38956*t38965*(gamma_bb[index]*gx*t38954*(1.76E2/9.0)+t38950*t38719*t38956*(3.04E2/9.0))+cx2*t38724* \
               t38719*1.0/(t38962*t38962*t38962)*t38956*(t38959*t38959)*2.0+cx1*gamma_bb[index]*gx*t38719*t38990* \
               t38956*1.0/(t38958*t38958*t38958)*(1.28E2/9.0))-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t38725*t38966*(8.0/3.0)-cx1*t38721*t38719*t38956*t38968*(8.0/3.0)+cx2*t38721*t38719*t38956*t38967* \
               (1.6E1/3.0)-cx2*t38724*t38719*t38956*t38965*t38959)*(8.0/3.0)+rho_b[index]*t38971*(-t38902-t38911+ \
               t38981+t38985+t38987+t38759*t38868*(t38902+t38911-t38981+t38984-t38985+t38986-t38987+t38979-t38870* \
               t38972*t38892*t38884*2.0-a1f*c*c0f*t38885*t38898*(8.0/9.0)))-rho_b[index]*t38998*t38999*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t40268 = 1.0/pow(rho_b[index],1.0/3.0);
            double t40269 = c*t40268;
            double t40270 = sqrt(t40269);
            double t40271 = pow(t40269,3.0/2.0);
            double t40272 = c*c;
            double t40273 = 1.0/pow(rho_b[index],2.0/3.0);
            double t40274 = 1.0/c0p;
            double t40275 = b1p*t40270;
            double t40276 = b3p*t40271;
            double t40277 = b4p*t40272*t40273;
            double t40278 = b2p*c*t40268;
            double t40279 = t40275+t40276+t40277+t40278;
            double t40280 = 1.0/t40279;
            double t40281 = t40280*t40274*(1.0/2.0);
            double t40282 = t40281+1.0;
            double t40283 = log(t40282);
            double t40284 = a1p*c*t40268;
            double t40285 = t40284+1.0;
            double t40286 = 1.0/pow(rho_b[index],8.0/3.0);
            double t40287 = gamma_bb[index]*gamma_bb[index];
            double t40288 = gcaa*gcaa;
            double t40289 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t40290 = gamma_bb[index]*gcaa*t40286;
            double t40291 = t40290+1.0;
            double t40292 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t40293 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t40294 = gamma_bb[index]*gcaa*t40286*2.0;
            double t40295 = t40292*t40287*t40288;
            double t40296 = t40294+t40295+1.0;
            double t40297 = pow(2.0,1.0/3.0);
            double t40298 = t40297*2.0;
            double t40299 = t40298-2.0;
            double t40300 = two_13*2.0;
            double t40301 = t40300-2.0;
            double t40302 = 1.0/t40301;
            double t40303 = a1f*c*t40268;
            double t40304 = t40303+1.0;
            double t40305 = 1.0/c0f;
            double t40306 = b1f*t40270;
            double t40307 = b3f*t40271;
            double t40308 = b4f*t40272*t40273;
            double t40309 = b2f*c*t40268;
            double t40310 = t40306+t40307+t40308+t40309;
            double t40311 = 1.0/t40310;
            double t40312 = t40311*t40305*(1.0/2.0);
            double t40313 = t40312+1.0;
            double t40314 = 1.0/pow(rho_b[index],4.0/3.0);
            double t40315 = 1.0/pow(rho_b[index],5.0/3.0);
            double t40316 = 1.0/sqrt(t40269);
            double t40317 = log(t40313);
            double t40318 = 1.0/t40282;
            double t40319 = 1.0/(t40279*t40279);
            double t40320 = b4p*t40315*t40272*(2.0/3.0);
            double t40321 = b2p*c*t40314*(1.0/3.0);
            double t40322 = b1p*c*t40314*t40316*(1.0/6.0);
            double t40323 = b3p*c*t40314*t40270*(1.0/2.0);
            double t40324 = t40320+t40321+t40322+t40323;
            double t40325 = t40324*t40318*t40319*t40285;
            double t40326 = 1.0/t40291;
            double t40327 = 1.0/t40296;
            double t40328 = gx*gx;
            double t40329 = gamma_bb[index]*gx*t40286;
            double t40330 = t40329+1.0;
            double t40331 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t40336 = gamma_bb[index]*gx*t40293*(1.6E1/3.0);
            double t40337 = t40328*t40287*t40289*(1.6E1/3.0);
            double t40332 = t40336+t40337;
            double t40333 = gamma_bb[index]*gx*t40286*2.0;
            double t40334 = t40292*t40328*t40287;
            double t40335 = t40333+t40334+1.0;
            double t40338 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t40339 = 1.0/(t40335*t40335);
            double t40340 = 1.0/t40330;
            double t40341 = 1.0/t40335;
            double t40342 = 1.0/(t40330*t40330);
            double t40343 = ccaa1*gamma_bb[index]*gcaa*t40326*t40286;
            double t40344 = ccaa2*t40327*t40292*t40287*t40288;
            double t40345 = ccaa0+t40343+t40344;
            double t40346 = 1.0/t40313;
            double t40347 = b4f*t40315*t40272*(2.0/3.0);
            double t40348 = b2f*c*t40314*(1.0/3.0);
            double t40349 = b1f*c*t40314*t40316*(1.0/6.0);
            double t40350 = b3f*c*t40314*t40270*(1.0/2.0);
            double t40351 = t40350+t40347+t40348+t40349;
            double t40352 = 1.0/(t40310*t40310);
            double t40353 = 1.0/pow(rho_b[index],7.0/3.0);
            double t40354 = 1.0/pow(t40269,3.0/2.0);
            double t40355 = t40351*t40351;
            double t40356 = t40324*t40324;
            double t40357 = 1.0/(t40279*t40279*t40279);
            double t40358 = t40318*t40356*t40285*t40357*2.0;
            double t40359 = b4p*t40272*t40286*(1.0E1/9.0);
            double t40360 = b2p*c*t40353*(4.0/9.0);
            double t40361 = b3p*t40316*t40272*t40286*(1.0/1.2E1);
            double t40362 = b1p*c*t40316*t40353*(2.0/9.0);
            double t40363 = b3p*c*t40270*t40353*(2.0/3.0);
            double t40364 = t40360+t40361+t40362+t40363+t40359-b1p*t40272*t40354*t40286*(1.0/3.6E1);
            double t40365 = 1.0/(t40282*t40282);
            double t40366 = 1.0/(t40279*t40279*t40279*t40279);
            double t40367 = a1p*c*c0p*t40353*t40283*(8.0/9.0);
            double t40368 = c0f*t40304*t40317*2.0;
            double t40369 = c0p*t40283*t40285*2.0;
            double t40370 = 1.0/pow(rho_b[index],1.0E1);
            double t40371 = 1.0/(t40291*t40291);
            double t40372 = gamma_bb[index]*gcaa*t40293*(1.6E1/3.0);
            double t40373 = t40287*t40288*t40289*(1.6E1/3.0);
            double t40374 = t40372+t40373;
            double t40375 = 1.0/(t40296*t40296);
            double t40376 = a1f*c*c0f*t40314*t40317*(2.0/3.0);
            double t40377 = a1p*c*c0p*t40314*t40283*(2.0/3.0);
            double t40378 = ccaa1*gamma_bb[index]*gcaa*t40326*t40293*(8.0/3.0);
            double t40379 = ccaa2*t40327*t40287*t40288*t40289*(1.6E1/3.0);
            double t40380 = t40378+t40379-ccaa1*t40371*t40287*t40288*t40289*(8.0/3.0)-ccaa2*t40292*t40374*t40375* \
               t40287*t40288;
            v_rho_b_rho_b_[index] = t40380*(t40369+t40302*t40299*(t40368-c0p*t40283*t40285*2.0))*2.0+t40345*(- \
               t40325+t40377+t40302*t40299*(t40325+t40376-t40304*t40351*t40352*t40346-a1p*c*c0p*t40314*t40283*(2.0/ \
               3.0)))*2.0+c0*t40273*(cx0+cx1*gamma_bb[index]*gx*t40340*t40286+cx2*t40341*t40292*t40328*t40287)*(4.0/ \
               9.0)-rho_b[index]*(t40369+t40302*t40299*(t40368-t40369))*(ccaa1*gamma_bb[index]*gcaa*t40326*t40338* \
               (8.8E1/9.0)-ccaa1*t40331*t40371*t40287*t40288*2.4E1+ccaa2*t40331*t40327*t40287*t40288*(3.04E2/9.0) \
               -ccaa2*t40374*t40375*t40287*t40288*t40289*(3.2E1/3.0)-ccaa2*t40292*t40375*t40287*t40288*(gamma_bb[index]* \
               gcaa*t40338*(1.76E2/9.0)+t40331*t40287*t40288*(3.04E2/9.0))+ccaa2*t40292*(t40374*t40374)*t40287*1.0/ \
               (t40296*t40296*t40296)*t40288*2.0+ccaa1*gamma_bb[index]*gcaa*t40370*1.0/(t40291*t40291*t40291)*t40287* \
               t40288*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t40340*t40338*(8.8E1/9.0) \
               -cx1*t40331*t40342*t40328*t40287*2.4E1+cx2*t40331*t40341*t40328*t40287*(3.04E2/9.0)-cx2*t40332*t40328* \
               t40339*t40287*t40289*(3.2E1/3.0)-cx2*t40292*t40328*t40339*t40287*(gamma_bb[index]*gx*t40338*(1.76E2/ \
               9.0)+t40331*t40328*t40287*(3.04E2/9.0))+cx2*(t40332*t40332)*1.0/(t40335*t40335*t40335)*t40292*t40328* \
               t40287*2.0+cx1*gamma_bb[index]*gx*1.0/(t40330*t40330*t40330)*t40370*t40328*t40287*(1.28E2/9.0))+rho_b[index]* \
               t40345*(-t40358-t40367+t40302*t40299*(t40358+t40367-t40318*t40319*t40364*t40285-1.0/(t40310*t40310* \
               t40310)*t40304*t40346*t40355*2.0+t40304*t40352*t40346*(b2f*c*t40353*(4.0/9.0)+b4f*t40272*t40286*(1.0E1/ \
               9.0)+b1f*c*t40316*t40353*(2.0/9.0)+b3f*c*t40270*t40353*(2.0/3.0)-b1f*t40272*t40354*t40286*(1.0/3.6E1) \
               +b3f*t40316*t40272*t40286*(1.0/1.2E1))+1.0/(t40310*t40310*t40310*t40310)*t40304*1.0/(t40313*t40313) \
               *t40305*t40355*(1.0/2.0)-a1f*c*c0f*t40317*t40353*(8.0/9.0)-t40274*t40356*t40365*t40285*t40366*(1.0/ \
               2.0)+a1f*c*t40314*t40351*t40352*t40346*(2.0/3.0)-a1p*c*t40314*t40324*t40318*t40319*(2.0/3.0))+t40318* \
               t40319*t40364*t40285+t40274*t40356*t40365*t40285*t40366*(1.0/2.0)+a1p*c*t40314*t40324*t40318*t40319* \
               (2.0/3.0))-rho_b[index]*t40380*(-t40325+t40377+t40302*t40299*(t40325+t40376-t40377-t40304*t40351*t40352* \
               t40346))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t40340*t40293*(8.0/3.0)-cx1*t40342* \
               t40328*t40287*t40289*(8.0/3.0)+cx2*t40341*t40328*t40287*t40289*(1.6E1/3.0)-cx2*t40332*t40292*t40328* \
               t40339*t40287)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39001 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39002 = c*t39001;
                double t39003 = sqrt(t39002);
                double t39004 = pow(t39002,3.0/2.0);
                double t39005 = c*c;
                double t39006 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39007 = 1.0/c0p;
                double t39008 = b1p*t39003;
                double t39009 = b3p*t39004;
                double t39010 = b4p*t39005*t39006;
                double t39011 = b2p*c*t39001;
                double t39012 = t39010+t39011+t39008+t39009;
                double t39013 = 1.0/t39012;
                double t39014 = t39013*t39007*(1.0/2.0);
                double t39015 = t39014+1.0;
                double t39016 = log(t39015);
                double t39017 = a1p*c*t39001;
                double t39018 = t39017+1.0;
                double t39019 = pow(2.0,1.0/3.0);
                double t39020 = t39019*2.0;
                double t39021 = t39020-2.0;
                double t39022 = two_13*2.0;
                double t39023 = t39022-2.0;
                double t39024 = 1.0/t39023;
                double t39025 = 1.0/c0f;
                double t39026 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39027 = c*t39026;
                double t39028 = sqrt(t39027);
                double t39029 = pow(t39027,3.0/2.0);
                double t39030 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39031 = b1p*t39028;
                double t39032 = b3p*t39029;
                double t39033 = b4p*t39030*t39005;
                double t39034 = b2p*c*t39026;
                double t39035 = t39031+t39032+t39033+t39034;
                double t39036 = 1.0/t39035;
                double t39037 = t39007*t39036*(1.0/2.0);
                double t39038 = t39037+1.0;
                double t39039 = log(t39038);
                double t39040 = a1p*c*t39026;
                double t39041 = t39040+1.0;
                double t39042 = c0p*t39041*t39039*2.0;
                double t39043 = rho_a[index]+rho_b[index];
                double t39044 = 1.0/pow(t39043,1.0/3.0);
                double t39045 = c*t39044;
                double t39046 = sqrt(t39045);
                double t39047 = pow(t39045,3.0/2.0);
                double t39048 = 1.0/pow(t39043,2.0/3.0);
                double t39049 = b1p*t39046;
                double t39050 = b3p*t39047;
                double t39051 = b4p*t39005*t39048;
                double t39052 = b2p*c*t39044;
                double t39053 = t39050+t39051+t39052+t39049;
                double t39054 = 1.0/t39053;
                double t39055 = t39007*t39054*(1.0/2.0);
                double t39056 = t39055+1.0;
                double t39057 = log(t39056);
                double t39058 = a1p*c*t39044;
                double t39059 = t39058+1.0;
                double t39060 = c0p*t39057*t39059*2.0;
                double t39061 = rho_a[index]-rho_b[index];
                double t39062 = t39061*t39061;
                double t39063 = 1.0/t39043;
                double t39064 = t39061*t39063;
                double t39065 = 1.0/(t39043*t39043*t39043*t39043);
                double t39066 = t39062*t39062;
                double t39067 = t39064+1.0;
                double t39068 = pow(t39067,4.0/3.0);
                double t39069 = -t39064+1.0;
                double t39070 = pow(t39069,4.0/3.0);
                double t39071 = t39070+t39068-2.0;
                double t39072 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t39073 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39074 = gamma_aa[index]*t39073*(1.0/2.0);
                double t39075 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39076 = gamma_bb[index]*t39075*(1.0/2.0);
                double t39077 = t39074+t39076;
                double t39078 = gcab*t39077;
                double t39079 = t39078+1.0;
                double t39080 = gcab*gcab;
                double t39081 = t39077*t39077;
                double t39082 = t39080*t39081;
                double t39083 = gcab*t39077*2.0;
                double t39084 = t39082+t39083+1.0;
                double t39085 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t39086 = 1.0/(t39079*t39079);
                double t39087 = 1.0/t39084;
                double t39088 = 1.0/(t39084*t39084);
                double t39089 = gamma_aa[index]*gcab*t39072*(8.0/3.0);
                double t39090 = gamma_aa[index]*t39080*t39072*t39077*(8.0/3.0);
                double t39091 = t39090+t39089;
                double t39092 = gcab*t39073;
                double t39093 = t39080*t39073*t39077;
                double t39094 = t39092+t39093;
                double t39095 = b1f*t39003;
                double t39096 = b3f*t39004;
                double t39097 = b4f*t39005*t39006;
                double t39098 = b2f*c*t39001;
                double t39099 = t39095+t39096+t39097+t39098;
                double t39100 = 1.0/t39099;
                double t39101 = t39100*t39025*(1.0/2.0);
                double t39102 = t39101+1.0;
                double t39103 = log(t39102);
                double t39104 = a1f*c*t39001;
                double t39105 = t39104+1.0;
                double t39106 = c0f*t39103*t39105*2.0;
                double t39107 = c0p*t39016*t39018*2.0;
                double t39108 = gcaa*gcaa;
                double t39109 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t39110 = gamma_aa[index]*gcaa*t39073;
                double t39111 = t39110+1.0;
                double t39112 = gamma_aa[index]*gamma_aa[index];
                double t39113 = gamma_aa[index]*gcaa*t39073*2.0;
                double t39114 = t39112*t39108*t39109;
                double t39115 = t39113+t39114+1.0;
                double t39116 = 1.0/t39079;
                double t39117 = 1.0/pow(t39043,4.0/3.0);
                double t39118 = b1f*t39046;
                double t39119 = b3f*t39047;
                double t39120 = b4f*t39005*t39048;
                double t39121 = b2f*c*t39044;
                double t39122 = t39120+t39121+t39118+t39119;
                double t39123 = 1.0/t39122;
                double t39124 = t39123*t39025*(1.0/2.0);
                double t39125 = t39124+1.0;
                double t39126 = log(t39125);
                double t39127 = a1f*c*t39044;
                double t39128 = t39127+1.0;
                double t39130 = c0f*t39126*t39128*2.0;
                double t39129 = -t39130+t39060;
                double t39131 = 1.0/(t39043*t39043);
                double t39159 = t39131*t39061;
                double t39132 = t39063-t39159;
                double t39133 = t39130-t39060;
                double t39134 = 1.0/pow(t39043,5.0/3.0);
                double t39135 = 1.0/sqrt(t39045);
                double t39136 = 1.0/t39056;
                double t39137 = 1.0/(t39053*t39053);
                double t39138 = b4p*t39005*t39134*(2.0/3.0);
                double t39139 = b2p*c*t39117*(1.0/3.0);
                double t39140 = b1p*c*t39117*t39135*(1.0/6.0);
                double t39141 = b3p*c*t39117*t39046*(1.0/2.0);
                double t39142 = t39140+t39141+t39138+t39139;
                double t39143 = t39142*t39136*t39137*t39059;
                double t39144 = 1.0/d2fz0;
                double t39145 = 1.0/Aa;
                double t39146 = b1a*t39046;
                double t39147 = b3a*t39047;
                double t39148 = b4a*t39005*t39048;
                double t39149 = b2a*c*t39044;
                double t39150 = t39146+t39147+t39148+t39149;
                double t39151 = 1.0/t39150;
                double t39152 = t39151*t39145*(1.0/2.0);
                double t39153 = t39152+1.0;
                double t39154 = log(t39153);
                double t39155 = a1a*c*t39044;
                double t39156 = t39155+1.0;
                double t39157 = 1.0/(t39043*t39043*t39043*t39043*t39043);
                double t39158 = pow(t39067,1.0/3.0);
                double t39160 = t39132*t39158*(4.0/3.0);
                double t39161 = pow(t39069,1.0/3.0);
                double t39162 = t39160-t39132*t39161*(4.0/3.0);
                double t39163 = t39065*t39066;
                double t39164 = t39163-1.0;
                double t39165 = 1.0/pow(rho_a[index],4.0/3.0);
                double t39166 = 1.0/pow(rho_a[index],5.0/3.0);
                double t39167 = 1.0/sqrt(t39002);
                double t39168 = 1.0/t39015;
                double t39169 = 1.0/(t39012*t39012);
                double t39170 = b4p*t39005*t39166*(2.0/3.0);
                double t39171 = b2p*c*t39165*(1.0/3.0);
                double t39172 = b1p*c*t39165*t39167*(1.0/6.0);
                double t39173 = b3p*c*t39003*t39165*(1.0/2.0);
                double t39174 = t39170+t39171+t39172+t39173;
                double t39175 = t39018*t39174*t39168*t39169;
                double t39176 = t39106-t39107;
                double t39177 = t39021*t39024*t39176;
                double t39178 = Aa*t39024*t39071*t39144*t39154*t39164*t39156*2.0;
                double t39179 = t39107+t39177;
                double t39180 = 1.0/t39111;
                double t39181 = 1.0/t39115;
                double t39182 = 1.0/(t39111*t39111);
                double t39183 = 1.0/(t39115*t39115);
                double t39184 = gcaa*t39073*2.0;
                double t39185 = gamma_aa[index]*t39108*t39109*2.0;
                double t39186 = t39184+t39185;
                double t39187 = gamma_aa[index]*gcaa*t39072*(1.6E1/3.0);
                double t39188 = t39112*t39108*t39085*(1.6E1/3.0);
                double t39189 = t39187+t39188;
                double t39190 = gx*gx;
                double t39191 = gamma_aa[index]*gx*t39073;
                double t39192 = t39191+1.0;
                double t39193 = gamma_aa[index]*gx*t39073*2.0;
                double t39194 = t39112*t39109*t39190;
                double t39195 = t39193+t39194+1.0;
                double t39196 = 1.0/t39102;
                double t39197 = 1.0/(t39099*t39099);
                double t39198 = b4f*t39005*t39166*(2.0/3.0);
                double t39199 = b2f*c*t39165*(1.0/3.0);
                double t39200 = b1f*c*t39165*t39167*(1.0/6.0);
                double t39201 = b3f*c*t39003*t39165*(1.0/2.0);
                double t39202 = t39200+t39201+t39198+t39199;
                double t39203 = a1f*c*c0f*t39103*t39165*(2.0/3.0);
                double t39204 = a1p*c*c0p*t39016*t39165*(2.0/3.0);
                double t39205 = ccaa1*gcaa*t39180*t39073;
                double t39206 = ccaa2*gamma_aa[index]*t39108*t39109*t39181*2.0;
                double t39207 = t39205+t39206-ccaa1*gamma_aa[index]*t39108*t39109*t39182-ccaa2*t39112*t39108*t39109* \
                   t39183*t39186;
                double t39208 = 1.0/t39192;
                double t39209 = 1.0/t39195;
                double t39210 = 1.0/(t39192*t39192);
                double t39211 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t39212 = 1.0/(t39195*t39195);
                double t39213 = gx*t39073*2.0;
                double t39214 = gamma_aa[index]*t39109*t39190*2.0;
                double t39215 = t39213+t39214;
                double t39216 = gamma_aa[index]*gx*t39072*(1.6E1/3.0);
                double t39217 = t39112*t39190*t39085*(1.6E1/3.0);
                double t39218 = t39216+t39217;
                v_rho_a_gamma_aa_[index] = -t39207*t39179-(ccab1*gcab*t39116*t39073*(1.0/2.0)-ccab1*t39080*t39073* \
                   t39077*t39086*(1.0/2.0)-ccab2*t39080*t39081*t39094*t39088+ccab2*t39080*t39073*t39077*t39087)*(t39060- \
                   t39107-t39177+t39178+rho_a[index]*(t39204-t39175+t39021*t39024*(t39203+t39175-t39202*t39105*t39196* \
                   t39197-a1p*c*c0p*t39016*t39165*(2.0/3.0)))-t39043*(-t39143+t39024*t39071*t39065*t39066*(t39143-(1.0/ \
                   (t39122*t39122)*t39128*(b2f*c*t39117*(1.0/3.0)+b4f*t39005*t39134*(2.0/3.0)+b1f*c*t39117*t39135*(1.0/ \
                   6.0)+b3f*c*t39117*t39046*(1.0/2.0)))/t39125+a1f*c*c0f*t39117*t39126*(2.0/3.0)-a1p*c*c0p*t39117*t39057* \
                   (2.0/3.0))+a1p*c*c0p*t39117*t39057*(2.0/3.0)-t39024*t39133*t39162*t39065*t39066+t39024*t39133*t39071* \
                   t39066*t39157*4.0+t39024*t39061*t39062*t39071*t39065*t39129*4.0+Aa*t39024*t39071*t39144*t39154*t39156* \
                   (t39066*t39157*4.0-t39061*t39062*t39065*4.0)*2.0-Aa*t39024*t39144*t39162*t39154*t39164*t39156*2.0- \
                   (t39024*1.0/(t39150*t39150)*t39071*t39144*t39164*t39156*(b2a*c*t39117*(1.0/3.0)+b4a*t39005*t39134* \
                   (2.0/3.0)+b1a*c*t39117*t39135*(1.0/6.0)+b3a*c*t39117*t39046*(1.0/2.0)))/t39153+Aa*a1a*c*t39024*t39071* \
                   t39117*t39144*t39154*t39164*(2.0/3.0))+t39024*t39133*t39071*t39065*t39066)-(rho_a[index]*(t39107+t39021* \
                   t39024*(t39106-c0p*t39016*t39018*2.0))+rho_b[index]*(t39042-t39021*t39024*(t39042-c0f*log((t39025* \
                   (1.0/2.0))/(b1f*t39028+b3f*t39029+b2f*c*t39026+b4f*t39030*t39005)+1.0)*(a1f*c*t39026+1.0)*2.0))-t39043* \
                   (t39060+t39178-t39024*t39071*t39065*t39066*t39129))*(ccab1*gcab*t39116*t39072*(4.0/3.0)-ccab2*t39080* \
                   t39081*t39088*(gcab*t39072*(8.0/3.0)+gamma_aa[index]*t39080*t39085*(4.0/3.0)+t39080*t39072*t39077* \
                   (8.0/3.0))-ccab1*gamma_aa[index]*t39080*t39085*t39086*(4.0/3.0)+ccab2*gamma_aa[index]*t39080*t39085* \
                   t39087*(4.0/3.0)-ccab1*t39080*t39072*t39077*t39086*(4.0/3.0)+ccab2*t39080*t39072*t39077*t39087*(8.0/ \
                   3.0)-ccab2*t39080*t39073*t39091*t39077*t39088+ccab2*t39080*t39081*t39091*1.0/(t39084*t39084*t39084) \
                   *t39094*2.0-ccab2*gamma_aa[index]*t39080*t39072*t39094*t39077*t39088*(8.0/3.0)+ccab1*gamma_aa[index]* \
                   gcab*t39080*t39085*t39077*1.0/(t39079*t39079*t39079)*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t39073*t39208-cx1*gamma_aa[index]*t39210*t39109*t39190+cx2*gamma_aa[index]*t39109*t39190*t39209* \
                   2.0-cx2*t39112*t39212*t39215*t39109*t39190)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t39072* \
                   t39208*(8.0/3.0)-cx1*gamma_aa[index]*t39210*t39190*t39085*8.0+cx2*gamma_aa[index]*t39190*t39209*t39085* \
                   (3.2E1/3.0)-cx2*t39112*t39212*t39215*t39190*t39085*(1.6E1/3.0)+cx1*gx*t39112*t39211*t39190*1.0/(t39192* \
                   t39192*t39192)*(1.6E1/3.0)-cx2*t39112*t39212*t39109*t39190*(gx*t39072*(1.6E1/3.0)+gamma_aa[index]* \
                   t39190*t39085*(3.2E1/3.0))-cx2*gamma_aa[index]*t39212*t39109*t39190*t39218*2.0+cx2*t39112*t39215*t39109* \
                   t39190*t39218*1.0/(t39195*t39195*t39195)*2.0)+rho_a[index]*t39207*(t39204-t39175+t39021*t39024*(t39203- \
                   t39204+t39175-t39202*t39105*t39196*t39197))+rho_a[index]*t39179*(ccaa1*gcaa*t39072*t39180*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t39108*t39182*t39085*8.0+ccaa2*gamma_aa[index]*t39108*t39181*t39085*(3.2E1/ \
                   3.0)-ccaa2*t39112*t39108*t39183*t39085*t39186*(1.6E1/3.0)+ccaa1*gcaa*1.0/(t39111*t39111*t39111)*t39112* \
                   t39211*t39108*(1.6E1/3.0)-ccaa2*t39112*t39108*t39109*t39183*(gcaa*t39072*(1.6E1/3.0)+gamma_aa[index]* \
                   t39108*t39085*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t39108*t39109*t39183*t39189*2.0+ccaa2*t39112*1.0/ \
                   (t39115*t39115*t39115)*t39108*t39109*t39186*t39189*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t40793 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40794 = c*t40793;
                double t40795 = sqrt(t40794);
                double t40796 = pow(t40794,3.0/2.0);
                double t40797 = c*c;
                double t40798 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40799 = 1.0/c0p;
                double t40800 = b1p*t40795;
                double t40801 = b3p*t40796;
                double t40802 = b4p*t40797*t40798;
                double t40803 = b2p*c*t40793;
                double t40804 = t40800+t40801+t40802+t40803;
                double t40805 = 1.0/t40804;
                double t40806 = t40805*t40799*(1.0/2.0);
                double t40807 = t40806+1.0;
                double t40808 = log(t40807);
                double t40809 = a1p*c*t40793;
                double t40810 = t40809+1.0;
                double t40811 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40812 = gcaa*gcaa;
                double t40813 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40814 = gamma_aa[index]*gcaa*t40811;
                double t40815 = t40814+1.0;
                double t40816 = gamma_aa[index]*gamma_aa[index];
                double t40817 = gamma_aa[index]*gcaa*t40811*2.0;
                double t40818 = t40812*t40813*t40816;
                double t40819 = t40817+t40818+1.0;
                double t40820 = pow(2.0,1.0/3.0);
                double t40821 = t40820*2.0;
                double t40822 = t40821-2.0;
                double t40823 = two_13*2.0;
                double t40824 = t40823-2.0;
                double t40825 = 1.0/t40824;
                double t40826 = 1.0/c0f;
                double t40827 = b1f*t40795;
                double t40828 = b3f*t40796;
                double t40829 = b4f*t40797*t40798;
                double t40830 = b2f*c*t40793;
                double t40831 = t40830+t40827+t40828+t40829;
                double t40832 = 1.0/t40831;
                double t40833 = t40832*t40826*(1.0/2.0);
                double t40834 = t40833+1.0;
                double t40835 = log(t40834);
                double t40836 = a1f*c*t40793;
                double t40837 = t40836+1.0;
                double t40838 = c0f*t40835*t40837*2.0;
                double t40839 = c0p*t40810*t40808*2.0;
                double t40840 = 1.0/t40815;
                double t40841 = 1.0/t40819;
                double t40842 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t40843 = 1.0/(t40815*t40815);
                double t40844 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t40845 = 1.0/(t40819*t40819);
                double t40846 = gcaa*t40811*2.0;
                double t40847 = gamma_aa[index]*t40812*t40813*2.0;
                double t40848 = t40846+t40847;
                double t40849 = gamma_aa[index]*gcaa*t40844*(1.6E1/3.0);
                double t40850 = t40812*t40842*t40816*(1.6E1/3.0);
                double t40851 = t40850+t40849;
                double t40852 = gx*gx;
                double t40853 = gamma_aa[index]*gx*t40811;
                double t40854 = t40853+1.0;
                double t40855 = gamma_aa[index]*gx*t40811*2.0;
                double t40856 = t40813*t40816*t40852;
                double t40857 = t40855+t40856+1.0;
                double t40858 = 1.0/pow(rho_a[index],4.0/3.0);
                double t40859 = 1.0/pow(rho_a[index],5.0/3.0);
                double t40860 = 1.0/sqrt(t40794);
                double t40861 = 1.0/t40807;
                double t40862 = 1.0/(t40804*t40804);
                double t40863 = b4p*t40859*t40797*(2.0/3.0);
                double t40864 = b2p*c*t40858*(1.0/3.0);
                double t40865 = b1p*c*t40860*t40858*(1.0/6.0);
                double t40866 = b3p*c*t40795*t40858*(1.0/2.0);
                double t40867 = t40863+t40864+t40865+t40866;
                double t40868 = t40810*t40861*t40862*t40867;
                double t40869 = ccaa1*gcaa*t40811*t40840;
                double t40870 = ccaa2*gamma_aa[index]*t40812*t40813*t40841*2.0;
                double t40871 = t40870+t40869-ccaa1*gamma_aa[index]*t40812*t40813*t40843-ccaa2*t40812*t40813*t40816* \
                   t40845*t40848;
                double t40872 = 1.0/t40854;
                double t40873 = 1.0/t40857;
                double t40874 = 1.0/(t40854*t40854);
                double t40875 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t40876 = 1.0/(t40857*t40857);
                double t40877 = gx*t40811*2.0;
                double t40878 = gamma_aa[index]*t40813*t40852*2.0;
                double t40879 = t40877+t40878;
                double t40880 = gamma_aa[index]*gx*t40844*(1.6E1/3.0);
                double t40881 = t40842*t40816*t40852*(1.6E1/3.0);
                double t40882 = t40880+t40881;
                v_rho_a_gamma_aa_[index] = -t40871*(t40839+t40822*t40825*(t40838-c0p*t40810*t40808*2.0))+rho_a[index]* \
                   t40871*(-t40868+t40822*t40825*(t40868-(1.0/(t40831*t40831)*t40837*(b2f*c*t40858*(1.0/3.0)+b4f*t40859* \
                   t40797*(2.0/3.0)+b1f*c*t40860*t40858*(1.0/6.0)+b3f*c*t40795*t40858*(1.0/2.0)))/t40834+a1f*c*c0f*t40835* \
                   t40858*(2.0/3.0)-a1p*c*c0p*t40808*t40858*(2.0/3.0))+a1p*c*c0p*t40808*t40858*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t40811*t40872-cx1*gamma_aa[index]*t40813*t40852*t40874+cx2*gamma_aa[index]*t40813*t40852* \
                   t40873*2.0-cx2*t40813*t40816*t40852*t40876*t40879)*(4.0/3.0)+rho_a[index]*(t40839+t40822*t40825*(t40838- \
                   t40839))*(ccaa1*gcaa*t40840*t40844*(8.0/3.0)+ccaa2*gamma_aa[index]*t40812*t40841*t40842*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t40812*t40842*t40843*8.0-ccaa2*t40812*t40842*t40816*t40845*t40848*(1.6E1/3.0) \
                   +ccaa1*gcaa*t40812*1.0/(t40815*t40815*t40815)*t40816*t40875*(1.6E1/3.0)-ccaa2*t40812*t40813*t40816* \
                   t40845*(gcaa*t40844*(1.6E1/3.0)+gamma_aa[index]*t40812*t40842*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t40812* \
                   t40813*t40851*t40845*2.0+ccaa2*t40812*t40813*t40851*t40816*1.0/(t40819*t40819*t40819)*t40848*2.0)- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t40844*t40872*(8.0/3.0)-cx1*gamma_aa[index]*t40842*t40852*t40874* \
                   8.0+cx2*gamma_aa[index]*t40842*t40852*t40873*(3.2E1/3.0)-cx2*t40842*t40816*t40852*t40876*t40879*(1.6E1/ \
                   3.0)+cx1*gx*t40816*t40852*1.0/(t40854*t40854*t40854)*t40875*(1.6E1/3.0)-cx2*t40813*t40816*t40852*t40876* \
                   (gx*t40844*(1.6E1/3.0)+gamma_aa[index]*t40842*t40852*(3.2E1/3.0))-cx2*gamma_aa[index]*t40813*t40852* \
                   t40882*t40876*2.0+cx2*t40813*t40816*t40852*t40882*1.0/(t40857*t40857*t40857)*t40879*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39221 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39222 = c*t39221;
                double t39223 = sqrt(t39222);
                double t39224 = pow(t39222,3.0/2.0);
                double t39225 = c*c;
                double t39226 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39227 = 1.0/c0p;
                double t39228 = b1p*t39223;
                double t39229 = b3p*t39224;
                double t39230 = b4p*t39225*t39226;
                double t39231 = b2p*c*t39221;
                double t39232 = t39230+t39231+t39228+t39229;
                double t39233 = 1.0/t39232;
                double t39234 = t39233*t39227*(1.0/2.0);
                double t39235 = t39234+1.0;
                double t39236 = log(t39235);
                double t39237 = a1p*c*t39221;
                double t39238 = t39237+1.0;
                double t39239 = pow(2.0,1.0/3.0);
                double t39240 = t39239*2.0;
                double t39241 = t39240-2.0;
                double t39242 = two_13*2.0;
                double t39243 = t39242-2.0;
                double t39244 = 1.0/t39243;
                double t39245 = 1.0/c0f;
                double t39246 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39247 = c*t39246;
                double t39248 = sqrt(t39247);
                double t39249 = pow(t39247,3.0/2.0);
                double t39250 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39251 = b1p*t39248;
                double t39252 = b3p*t39249;
                double t39253 = b4p*t39250*t39225;
                double t39254 = b2p*c*t39246;
                double t39255 = t39251+t39252+t39253+t39254;
                double t39256 = 1.0/t39255;
                double t39257 = t39227*t39256*(1.0/2.0);
                double t39258 = t39257+1.0;
                double t39259 = log(t39258);
                double t39260 = a1p*c*t39246;
                double t39261 = t39260+1.0;
                double t39262 = c0p*t39261*t39259*2.0;
                double t39263 = rho_a[index]+rho_b[index];
                double t39264 = 1.0/pow(t39263,1.0/3.0);
                double t39265 = c*t39264;
                double t39266 = sqrt(t39265);
                double t39267 = pow(t39265,3.0/2.0);
                double t39268 = 1.0/pow(t39263,2.0/3.0);
                double t39269 = b1p*t39266;
                double t39270 = b3p*t39267;
                double t39271 = b4p*t39225*t39268;
                double t39272 = b2p*c*t39264;
                double t39273 = t39270+t39271+t39272+t39269;
                double t39274 = 1.0/t39273;
                double t39275 = t39227*t39274*(1.0/2.0);
                double t39276 = t39275+1.0;
                double t39277 = log(t39276);
                double t39278 = a1p*c*t39264;
                double t39279 = t39278+1.0;
                double t39280 = c0p*t39277*t39279*2.0;
                double t39281 = rho_a[index]-rho_b[index];
                double t39282 = t39281*t39281;
                double t39283 = 1.0/t39263;
                double t39284 = t39281*t39283;
                double t39285 = 1.0/(t39263*t39263*t39263*t39263);
                double t39286 = t39282*t39282;
                double t39287 = t39284+1.0;
                double t39288 = pow(t39287,4.0/3.0);
                double t39289 = -t39284+1.0;
                double t39290 = pow(t39289,4.0/3.0);
                double t39291 = t39290+t39288-2.0;
                double t39292 = gcab*gcab;
                double t39293 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t39294 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39295 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39296 = gamma_aa[index]*t39295*(1.0/2.0);
                double t39297 = gamma_bb[index]*t39294*(1.0/2.0);
                double t39298 = t39296+t39297;
                double t39299 = gamma_aa[index]*gcab*t39293*(8.0/3.0);
                double t39300 = gamma_aa[index]*t39292*t39293*t39298*(8.0/3.0);
                double t39301 = t39300+t39299;
                double t39302 = t39298*t39298;
                double t39303 = t39302*t39292;
                double t39304 = gcab*t39298*2.0;
                double t39305 = t39303+t39304+1.0;
                double t39306 = gcab*t39294;
                double t39307 = t39292*t39294*t39298;
                double t39308 = t39306+t39307;
                double t39309 = 1.0/(t39305*t39305);
                double t39310 = gcab*t39298;
                double t39311 = t39310+1.0;
                double t39312 = c0p*t39236*t39238*2.0;
                double t39313 = 1.0/(t39311*t39311);
                double t39314 = 1.0/t39305;
                double t39315 = 1.0/pow(t39263,4.0/3.0);
                double t39316 = b1f*t39266;
                double t39317 = b3f*t39267;
                double t39318 = b4f*t39225*t39268;
                double t39319 = b2f*c*t39264;
                double t39320 = t39316+t39317+t39318+t39319;
                double t39321 = 1.0/t39320;
                double t39322 = t39321*t39245*(1.0/2.0);
                double t39323 = t39322+1.0;
                double t39324 = log(t39323);
                double t39325 = a1f*c*t39264;
                double t39326 = t39325+1.0;
                double t39328 = c0f*t39324*t39326*2.0;
                double t39327 = t39280-t39328;
                double t39329 = 1.0/(t39263*t39263);
                double t39356 = t39281*t39329;
                double t39330 = t39283-t39356;
                double t39331 = 1.0/pow(t39263,5.0/3.0);
                double t39332 = 1.0/sqrt(t39265);
                double t39333 = 1.0/t39276;
                double t39334 = 1.0/(t39273*t39273);
                double t39335 = b4p*t39331*t39225*(2.0/3.0);
                double t39336 = b2p*c*t39315*(1.0/3.0);
                double t39337 = b1p*c*t39332*t39315*(1.0/6.0);
                double t39338 = b3p*c*t39315*t39266*(1.0/2.0);
                double t39339 = t39335+t39336+t39337+t39338;
                double t39340 = t39333*t39334*t39339*t39279;
                double t39341 = 1.0/d2fz0;
                double t39342 = 1.0/Aa;
                double t39343 = b1a*t39266;
                double t39344 = b3a*t39267;
                double t39345 = b4a*t39225*t39268;
                double t39346 = b2a*c*t39264;
                double t39347 = t39343+t39344+t39345+t39346;
                double t39348 = 1.0/t39347;
                double t39349 = t39342*t39348*(1.0/2.0);
                double t39350 = t39349+1.0;
                double t39351 = log(t39350);
                double t39352 = a1a*c*t39264;
                double t39353 = t39352+1.0;
                double t39354 = 1.0/(t39263*t39263*t39263*t39263*t39263);
                double t39355 = pow(t39287,1.0/3.0);
                double t39357 = t39330*t39355*(4.0/3.0);
                double t39358 = pow(t39289,1.0/3.0);
                double t39359 = t39357-t39330*t39358*(4.0/3.0);
                double t39360 = t39285*t39286;
                double t39361 = t39360-1.0;
                double t39362 = a1f*c*t39221;
                double t39363 = t39362+1.0;
                double t39364 = b1f*t39223;
                double t39365 = b3f*t39224;
                double t39366 = b4f*t39225*t39226;
                double t39367 = b2f*c*t39221;
                double t39368 = t39364+t39365+t39366+t39367;
                double t39369 = 1.0/t39368;
                double t39370 = t39245*t39369*(1.0/2.0);
                double t39371 = t39370+1.0;
                double t39372 = 1.0/pow(rho_a[index],4.0/3.0);
                double t39373 = 1.0/pow(rho_a[index],5.0/3.0);
                double t39374 = 1.0/sqrt(t39222);
                double t39375 = log(t39371);
                double t39376 = 1.0/t39235;
                double t39377 = 1.0/(t39232*t39232);
                double t39378 = b4p*t39225*t39373*(2.0/3.0);
                double t39379 = b2p*c*t39372*(1.0/3.0);
                double t39380 = b1p*c*t39372*t39374*(1.0/6.0);
                double t39381 = b3p*c*t39223*t39372*(1.0/2.0);
                double t39382 = t39380+t39381+t39378+t39379;
                double t39383 = t39238*t39382*t39376*t39377;
                double t39384 = Aa*t39341*t39351*t39244*t39361*t39353*t39291*2.0;
                double t39385 = t39312-c0f*t39363*t39375*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t39312-t39241*t39244*t39385)+rho_b[index]*(t39262-t39241* \
                   t39244*(t39262-c0f*log((t39245*(1.0/2.0))/(b1f*t39248+b3f*t39249+b2f*c*t39246+b4f*t39250*t39225)+1.0) \
                   *(a1f*c*t39246+1.0)*2.0))-t39263*(t39280+t39384-t39244*t39291*t39327*t39285*t39286))*(ccab2*t39301* \
                   t39309*t39292*t39294*t39298-ccab2*t39301*t39302*1.0/(t39305*t39305*t39305)*t39308*t39292*2.0+ccab1* \
                   gamma_aa[index]*t39313*t39292*t39293*t39294*(4.0/3.0)-ccab2*gamma_aa[index]*t39314*t39292*t39293*t39294* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t39308*t39309*t39292*t39293*t39298*(8.0/3.0)+ccab2*gamma_aa[index]* \
                   t39302*t39309*(t39292*t39292)*t39293*t39294*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*1.0/(t39311*t39311* \
                   t39311)*t39292*t39293*t39294*t39298*(4.0/3.0))-((ccab1*gcab*t39294*(1.0/2.0))/t39311-ccab2*t39302* \
                   t39308*t39309*t39292-ccab1*t39313*t39292*t39294*t39298*(1.0/2.0)+ccab2*t39314*t39292*t39294*t39298) \
                   *(-t39312+t39280+t39384+rho_a[index]*(-t39383+t39241*t39244*(t39383-(t39363*1.0/(t39368*t39368)*(b2f* \
                   c*t39372*(1.0/3.0)+b4f*t39225*t39373*(2.0/3.0)+b1f*c*t39372*t39374*(1.0/6.0)+b3f*c*t39223*t39372*(1.0/ \
                   2.0)))/t39371+a1f*c*c0f*t39372*t39375*(2.0/3.0)-a1p*c*c0p*t39236*t39372*(2.0/3.0))+a1p*c*c0p*t39236* \
                   t39372*(2.0/3.0))-t39263*(-t39340+t39244*t39291*t39285*t39286*(t39340-(1.0/(t39320*t39320)*t39326* \
                   (b2f*c*t39315*(1.0/3.0)+b4f*t39331*t39225*(2.0/3.0)+b1f*c*t39332*t39315*(1.0/6.0)+b3f*c*t39315*t39266* \
                   (1.0/2.0)))/t39323+a1f*c*c0f*t39315*t39324*(2.0/3.0)-a1p*c*c0p*t39315*t39277*(2.0/3.0))+a1p*c*c0p* \
                   t39315*t39277*(2.0/3.0)-t39244*t39291*t39327*t39354*t39286*4.0+t39244*t39327*t39285*t39286*t39359+ \
                   t39244*t39281*t39282*t39291*t39327*t39285*4.0+Aa*t39341*t39351*t39244*t39353*t39291*(t39354*t39286* \
                   4.0-t39281*t39282*t39285*4.0)*2.0-Aa*t39341*t39351*t39244*t39361*t39353*t39359*2.0-(t39341*t39244* \
                   t39361*t39353*t39291*1.0/(t39347*t39347)*(b2a*c*t39315*(1.0/3.0)+b4a*t39331*t39225*(2.0/3.0)+b1a*c* \
                   t39332*t39315*(1.0/6.0)+b3a*c*t39315*t39266*(1.0/2.0)))/t39350+Aa*a1a*c*t39341*t39315*t39351*t39244* \
                   t39361*t39291*(2.0/3.0))+t39241*t39244*t39385-t39244*t39291*t39327*t39285*t39286);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39387 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39388 = c*t39387;
                double t39389 = sqrt(t39388);
                double t39390 = pow(t39388,3.0/2.0);
                double t39391 = c*c;
                double t39392 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39393 = 1.0/c0p;
                double t39394 = b1p*t39389;
                double t39395 = b3p*t39390;
                double t39396 = b4p*t39391*t39392;
                double t39397 = b2p*c*t39387;
                double t39398 = t39394+t39395+t39396+t39397;
                double t39399 = 1.0/t39398;
                double t39400 = t39393*t39399*(1.0/2.0);
                double t39401 = t39400+1.0;
                double t39402 = log(t39401);
                double t39403 = a1p*c*t39387;
                double t39404 = t39403+1.0;
                double t39405 = pow(2.0,1.0/3.0);
                double t39406 = t39405*2.0;
                double t39407 = t39406-2.0;
                double t39408 = two_13*2.0;
                double t39409 = t39408-2.0;
                double t39410 = 1.0/t39409;
                double t39411 = 1.0/c0f;
                double t39412 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39413 = c*t39412;
                double t39414 = sqrt(t39413);
                double t39415 = pow(t39413,3.0/2.0);
                double t39416 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39417 = b1p*t39414;
                double t39418 = b3p*t39415;
                double t39419 = b4p*t39416*t39391;
                double t39420 = b2p*c*t39412;
                double t39421 = t39420+t39417+t39418+t39419;
                double t39422 = 1.0/t39421;
                double t39423 = t39422*t39393*(1.0/2.0);
                double t39424 = t39423+1.0;
                double t39425 = log(t39424);
                double t39426 = a1p*c*t39412;
                double t39427 = t39426+1.0;
                double t39428 = c0p*t39425*t39427*2.0;
                double t39429 = rho_a[index]+rho_b[index];
                double t39430 = 1.0/pow(t39429,1.0/3.0);
                double t39431 = c*t39430;
                double t39432 = sqrt(t39431);
                double t39433 = pow(t39431,3.0/2.0);
                double t39434 = 1.0/pow(t39429,2.0/3.0);
                double t39435 = b1p*t39432;
                double t39436 = b3p*t39433;
                double t39437 = b4p*t39434*t39391;
                double t39438 = b2p*c*t39430;
                double t39439 = t39435+t39436+t39437+t39438;
                double t39440 = 1.0/t39439;
                double t39441 = t39440*t39393*(1.0/2.0);
                double t39442 = t39441+1.0;
                double t39443 = log(t39442);
                double t39444 = a1p*c*t39430;
                double t39445 = t39444+1.0;
                double t39446 = c0p*t39443*t39445*2.0;
                double t39447 = rho_a[index]-rho_b[index];
                double t39448 = t39447*t39447;
                double t39449 = 1.0/t39429;
                double t39450 = t39447*t39449;
                double t39451 = 1.0/(t39429*t39429*t39429*t39429);
                double t39452 = t39448*t39448;
                double t39453 = t39450+1.0;
                double t39454 = pow(t39453,4.0/3.0);
                double t39455 = -t39450+1.0;
                double t39456 = pow(t39455,4.0/3.0);
                double t39457 = t39454+t39456-2.0;
                double t39458 = gcab*gcab;
                double t39459 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t39460 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39461 = gamma_aa[index]*t39460*(1.0/2.0);
                double t39462 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39463 = gamma_bb[index]*t39462*(1.0/2.0);
                double t39464 = t39461+t39463;
                double t39465 = gamma_bb[index]*gcab*t39459*(8.0/3.0);
                double t39466 = gamma_bb[index]*t39464*t39458*t39459*(8.0/3.0);
                double t39467 = t39465+t39466;
                double t39468 = t39464*t39464;
                double t39469 = t39458*t39468;
                double t39470 = gcab*t39464*2.0;
                double t39471 = t39470+t39469+1.0;
                double t39472 = gcab*t39460;
                double t39473 = t39460*t39464*t39458;
                double t39474 = t39472+t39473;
                double t39475 = 1.0/(t39471*t39471);
                double t39476 = gcab*t39464;
                double t39477 = t39476+1.0;
                double t39478 = c0p*t39402*t39404*2.0;
                double t39479 = 1.0/(t39477*t39477);
                double t39480 = 1.0/t39471;
                double t39481 = 1.0/pow(t39429,4.0/3.0);
                double t39482 = b1f*t39432;
                double t39483 = b3f*t39433;
                double t39484 = b4f*t39434*t39391;
                double t39485 = b2f*c*t39430;
                double t39486 = t39482+t39483+t39484+t39485;
                double t39487 = 1.0/t39486;
                double t39488 = t39411*t39487*(1.0/2.0);
                double t39489 = t39488+1.0;
                double t39490 = log(t39489);
                double t39491 = a1f*c*t39430;
                double t39492 = t39491+1.0;
                double t39494 = c0f*t39490*t39492*2.0;
                double t39493 = t39446-t39494;
                double t39495 = 1.0/(t39429*t39429);
                double t39496 = t39447*t39495;
                double t39497 = t39449+t39496;
                double t39498 = 1.0/pow(t39429,5.0/3.0);
                double t39499 = 1.0/sqrt(t39431);
                double t39500 = 1.0/t39442;
                double t39501 = 1.0/(t39439*t39439);
                double t39502 = b4p*t39391*t39498*(2.0/3.0);
                double t39503 = b2p*c*t39481*(1.0/3.0);
                double t39504 = b1p*c*t39481*t39499*(1.0/6.0);
                double t39505 = b3p*c*t39432*t39481*(1.0/2.0);
                double t39506 = t39502+t39503+t39504+t39505;
                double t39507 = 1.0/d2fz0;
                double t39508 = 1.0/Aa;
                double t39509 = b1a*t39432;
                double t39510 = b3a*t39433;
                double t39511 = b4a*t39434*t39391;
                double t39512 = b2a*c*t39430;
                double t39513 = t39510+t39511+t39512+t39509;
                double t39514 = 1.0/t39513;
                double t39515 = t39514*t39508*(1.0/2.0);
                double t39516 = t39515+1.0;
                double t39517 = log(t39516);
                double t39518 = a1a*c*t39430;
                double t39519 = t39518+1.0;
                double t39520 = 1.0/(t39429*t39429*t39429*t39429*t39429);
                double t39521 = pow(t39453,1.0/3.0);
                double t39522 = t39521*t39497*(4.0/3.0);
                double t39523 = pow(t39455,1.0/3.0);
                double t39524 = t39522-t39523*t39497*(4.0/3.0);
                double t39525 = t39451*t39452;
                double t39526 = t39525-1.0;
                double t39527 = t39500*t39501*t39506*t39445;
                double t39528 = a1f*c*t39412;
                double t39529 = t39528+1.0;
                double t39530 = b1f*t39414;
                double t39531 = b3f*t39415;
                double t39532 = b4f*t39416*t39391;
                double t39533 = b2f*c*t39412;
                double t39534 = t39530+t39531+t39532+t39533;
                double t39535 = 1.0/t39534;
                double t39536 = t39411*t39535*(1.0/2.0);
                double t39537 = t39536+1.0;
                double t39538 = 1.0/pow(rho_b[index],4.0/3.0);
                double t39539 = 1.0/pow(rho_b[index],5.0/3.0);
                double t39540 = 1.0/sqrt(t39413);
                double t39541 = log(t39537);
                double t39542 = 1.0/t39424;
                double t39543 = 1.0/(t39421*t39421);
                double t39544 = b4p*t39391*t39539*(2.0/3.0);
                double t39545 = b2p*c*t39538*(1.0/3.0);
                double t39546 = b1p*c*t39540*t39538*(1.0/6.0);
                double t39547 = b3p*c*t39414*t39538*(1.0/2.0);
                double t39548 = t39544+t39545+t39546+t39547;
                double t39549 = t39542*t39543*t39427*t39548;
                double t39550 = t39428-c0f*t39541*t39529*2.0;
                double t39551 = Aa*t39410*t39507*t39517*t39526*t39519*t39457*2.0;
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t39460*(1.0/2.0))/t39477+ccab2*t39460*t39480*t39464*t39458- \
                   ccab1*t39460*t39464*t39458*t39479*(1.0/2.0)-ccab2*t39474*t39475*t39458*t39468)*(t39551-t39428+t39446+ \
                   t39429*(t39527-t39410*t39451*t39452*t39457*(t39527-(t39492*1.0/(t39486*t39486)*(b2f*c*t39481*(1.0/ \
                   3.0)+b4f*t39391*t39498*(2.0/3.0)+b1f*c*t39481*t39499*(1.0/6.0)+b3f*c*t39432*t39481*(1.0/2.0)))/t39489+ \
                   a1f*c*c0f*t39481*t39490*(2.0/3.0)-a1p*c*c0p*t39443*t39481*(2.0/3.0))-a1p*c*c0p*t39443*t39481*(2.0/ \
                   3.0)+t39410*t39451*t39452*t39524*t39493+t39410*t39520*t39452*t39457*t39493*4.0+t39410*t39451*t39447* \
                   t39448*t39457*t39493*4.0-Aa*t39410*t39507*t39517*t39519*t39457*(t39520*t39452*4.0+t39451*t39447*t39448* \
                   4.0)*2.0-Aa*t39410*t39524*t39507*t39517*t39526*t39519*2.0+(t39410*1.0/(t39513*t39513)*t39507*t39526* \
                   t39519*t39457*(b2a*c*t39481*(1.0/3.0)+b4a*t39391*t39498*(2.0/3.0)+b1a*c*t39481*t39499*(1.0/6.0)+b3a* \
                   c*t39432*t39481*(1.0/2.0)))/t39516-Aa*a1a*c*t39410*t39507*t39481*t39517*t39526*t39457*(2.0/3.0))+rho_b[index]* \
                   (-t39549+t39410*t39407*(t39549-(1.0/(t39534*t39534)*t39529*(b2f*c*t39538*(1.0/3.0)+b4f*t39391*t39539* \
                   (2.0/3.0)+b1f*c*t39540*t39538*(1.0/6.0)+b3f*c*t39414*t39538*(1.0/2.0)))/t39537+a1f*c*c0f*t39541*t39538* \
                   (2.0/3.0)-a1p*c*c0p*t39425*t39538*(2.0/3.0))+a1p*c*c0p*t39425*t39538*(2.0/3.0))+t39410*t39550*t39407- \
                   t39410*t39451*t39452*t39457*t39493)+(rho_b[index]*(t39428-t39410*t39550*t39407)+rho_a[index]*(t39478- \
                   t39410*t39407*(t39478-c0f*log((t39411*(1.0/2.0))/(b1f*t39389+b3f*t39390+b2f*c*t39387+b4f*t39391*t39392) \
                   +1.0)*(a1f*c*t39387+1.0)*2.0))-t39429*(t39551+t39446-t39410*t39451*t39452*t39457*t39493))*(ccab2*t39460* \
                   t39464*t39475*t39458*t39467-ccab2*1.0/(t39471*t39471*t39471)*t39474*t39458*t39467*t39468*2.0-ccab2* \
                   gamma_bb[index]*t39460*t39480*t39458*t39459*(4.0/3.0)+ccab1*gamma_bb[index]*t39460*t39458*t39459*t39479* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t39464*t39474*t39475*t39458*t39459*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   t39460*t39475*(t39458*t39458)*t39459*t39468*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t39460*t39464*t39458* \
                   t39459*1.0/(t39477*t39477*t39477)*(4.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39554 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39555 = c*t39554;
                double t39556 = sqrt(t39555);
                double t39557 = pow(t39555,3.0/2.0);
                double t39558 = c*c;
                double t39559 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39560 = 1.0/c0p;
                double t39561 = b1p*t39556;
                double t39562 = b3p*t39557;
                double t39563 = b4p*t39558*t39559;
                double t39564 = b2p*c*t39554;
                double t39565 = t39561+t39562+t39563+t39564;
                double t39566 = 1.0/t39565;
                double t39567 = t39560*t39566*(1.0/2.0);
                double t39568 = t39567+1.0;
                double t39569 = log(t39568);
                double t39570 = a1p*c*t39554;
                double t39571 = t39570+1.0;
                double t39572 = pow(2.0,1.0/3.0);
                double t39573 = t39572*2.0;
                double t39574 = t39573-2.0;
                double t39575 = two_13*2.0;
                double t39576 = t39575-2.0;
                double t39577 = 1.0/t39576;
                double t39578 = 1.0/c0f;
                double t39579 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39580 = c*t39579;
                double t39581 = sqrt(t39580);
                double t39582 = pow(t39580,3.0/2.0);
                double t39583 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39584 = b1p*t39581;
                double t39585 = b3p*t39582;
                double t39586 = b4p*t39583*t39558;
                double t39587 = b2p*c*t39579;
                double t39588 = t39584+t39585+t39586+t39587;
                double t39589 = 1.0/t39588;
                double t39590 = t39560*t39589*(1.0/2.0);
                double t39591 = t39590+1.0;
                double t39592 = log(t39591);
                double t39593 = a1p*c*t39579;
                double t39594 = t39593+1.0;
                double t39595 = c0p*t39592*t39594*2.0;
                double t39596 = rho_a[index]+rho_b[index];
                double t39597 = 1.0/pow(t39596,1.0/3.0);
                double t39598 = c*t39597;
                double t39599 = sqrt(t39598);
                double t39600 = pow(t39598,3.0/2.0);
                double t39601 = 1.0/pow(t39596,2.0/3.0);
                double t39602 = b1p*t39599;
                double t39603 = b3p*t39600;
                double t39604 = b4p*t39601*t39558;
                double t39605 = b2p*c*t39597;
                double t39606 = t39602+t39603+t39604+t39605;
                double t39607 = 1.0/t39606;
                double t39608 = t39560*t39607*(1.0/2.0);
                double t39609 = t39608+1.0;
                double t39610 = log(t39609);
                double t39611 = a1p*c*t39597;
                double t39612 = t39611+1.0;
                double t39613 = c0p*t39610*t39612*2.0;
                double t39614 = rho_a[index]-rho_b[index];
                double t39615 = t39614*t39614;
                double t39616 = 1.0/t39596;
                double t39617 = t39614*t39616;
                double t39618 = 1.0/(t39596*t39596*t39596*t39596);
                double t39619 = t39615*t39615;
                double t39620 = t39617+1.0;
                double t39621 = pow(t39620,4.0/3.0);
                double t39622 = -t39617+1.0;
                double t39623 = pow(t39622,4.0/3.0);
                double t39624 = t39621+t39623-2.0;
                double t39625 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t39626 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39627 = gamma_aa[index]*t39626*(1.0/2.0);
                double t39628 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39629 = gamma_bb[index]*t39628*(1.0/2.0);
                double t39630 = t39627+t39629;
                double t39631 = gcab*t39630;
                double t39632 = t39631+1.0;
                double t39633 = gcab*gcab;
                double t39634 = t39630*t39630;
                double t39635 = t39633*t39634;
                double t39636 = gcab*t39630*2.0;
                double t39637 = t39635+t39636+1.0;
                double t39638 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t39639 = 1.0/(t39632*t39632);
                double t39640 = 1.0/t39637;
                double t39641 = 1.0/(t39637*t39637);
                double t39642 = gamma_bb[index]*gcab*t39625*(8.0/3.0);
                double t39643 = gamma_bb[index]*t39630*t39633*t39625*(8.0/3.0);
                double t39644 = t39642+t39643;
                double t39645 = gcab*t39628;
                double t39646 = t39630*t39633*t39628;
                double t39647 = t39645+t39646;
                double t39648 = b1f*t39581;
                double t39649 = b3f*t39582;
                double t39650 = b4f*t39583*t39558;
                double t39651 = b2f*c*t39579;
                double t39652 = t39650+t39651+t39648+t39649;
                double t39653 = 1.0/t39652;
                double t39654 = t39653*t39578*(1.0/2.0);
                double t39655 = t39654+1.0;
                double t39656 = log(t39655);
                double t39657 = a1f*c*t39579;
                double t39658 = t39657+1.0;
                double t39728 = c0f*t39656*t39658*2.0;
                double t39659 = -t39728+t39595;
                double t39660 = t39595-t39574*t39577*t39659;
                double t39661 = gcaa*gcaa;
                double t39662 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t39663 = gamma_bb[index]*gcaa*t39628;
                double t39664 = t39663+1.0;
                double t39665 = gamma_bb[index]*gamma_bb[index];
                double t39666 = gamma_bb[index]*gcaa*t39628*2.0;
                double t39667 = t39661*t39662*t39665;
                double t39668 = t39666+t39667+1.0;
                double t39669 = 1.0/t39632;
                double t39670 = 1.0/pow(t39596,4.0/3.0);
                double t39671 = b1f*t39599;
                double t39672 = b3f*t39600;
                double t39673 = b4f*t39601*t39558;
                double t39674 = b2f*c*t39597;
                double t39675 = t39671+t39672+t39673+t39674;
                double t39676 = 1.0/t39675;
                double t39677 = t39676*t39578*(1.0/2.0);
                double t39678 = t39677+1.0;
                double t39679 = log(t39678);
                double t39680 = a1f*c*t39597;
                double t39681 = t39680+1.0;
                double t39683 = c0f*t39681*t39679*2.0;
                double t39682 = t39613-t39683;
                double t39684 = 1.0/(t39596*t39596);
                double t39685 = t39614*t39684;
                double t39686 = t39616+t39685;
                double t39687 = 1.0/pow(t39596,5.0/3.0);
                double t39688 = 1.0/sqrt(t39598);
                double t39689 = 1.0/t39609;
                double t39690 = 1.0/(t39606*t39606);
                double t39691 = b4p*t39558*t39687*(2.0/3.0);
                double t39692 = b2p*c*t39670*(1.0/3.0);
                double t39693 = b1p*c*t39670*t39688*(1.0/6.0);
                double t39694 = b3p*c*t39670*t39599*(1.0/2.0);
                double t39695 = t39691+t39692+t39693+t39694;
                double t39696 = 1.0/d2fz0;
                double t39697 = 1.0/Aa;
                double t39698 = b1a*t39599;
                double t39699 = b3a*t39600;
                double t39700 = b4a*t39601*t39558;
                double t39701 = b2a*c*t39597;
                double t39702 = t39700+t39701+t39698+t39699;
                double t39703 = 1.0/t39702;
                double t39704 = t39703*t39697*(1.0/2.0);
                double t39705 = t39704+1.0;
                double t39706 = log(t39705);
                double t39707 = a1a*c*t39597;
                double t39708 = t39707+1.0;
                double t39709 = 1.0/(t39596*t39596*t39596*t39596*t39596);
                double t39710 = pow(t39620,1.0/3.0);
                double t39711 = t39710*t39686*(4.0/3.0);
                double t39712 = pow(t39622,1.0/3.0);
                double t39713 = t39711-t39712*t39686*(4.0/3.0);
                double t39714 = t39618*t39619;
                double t39715 = t39714-1.0;
                double t39716 = t39612*t39690*t39695*t39689;
                double t39717 = 1.0/pow(rho_b[index],4.0/3.0);
                double t39718 = 1.0/pow(rho_b[index],5.0/3.0);
                double t39719 = 1.0/sqrt(t39580);
                double t39720 = 1.0/t39591;
                double t39721 = 1.0/(t39588*t39588);
                double t39722 = b4p*t39718*t39558*(2.0/3.0);
                double t39723 = b2p*c*t39717*(1.0/3.0);
                double t39724 = b1p*c*t39717*t39719*(1.0/6.0);
                double t39725 = b3p*c*t39581*t39717*(1.0/2.0);
                double t39726 = t39722+t39723+t39724+t39725;
                double t39727 = t39720*t39721*t39726*t39594;
                double t39729 = Aa*t39624*t39706*t39715*t39708*t39577*t39696*2.0;
                double t39730 = t39728-t39595;
                double t39731 = 1.0/t39664;
                double t39732 = 1.0/t39668;
                double t39733 = 1.0/(t39664*t39664);
                double t39734 = 1.0/(t39668*t39668);
                double t39735 = gcaa*t39628*2.0;
                double t39736 = gamma_bb[index]*t39661*t39662*2.0;
                double t39737 = t39735+t39736;
                double t39738 = gamma_bb[index]*gcaa*t39625*(1.6E1/3.0);
                double t39739 = t39661*t39638*t39665*(1.6E1/3.0);
                double t39740 = t39738+t39739;
                double t39741 = gx*gx;
                double t39742 = gamma_bb[index]*gx*t39628;
                double t39743 = t39742+1.0;
                double t39744 = gamma_bb[index]*gx*t39628*2.0;
                double t39745 = t39741*t39662*t39665;
                double t39746 = t39744+t39745+1.0;
                double t39747 = 1.0/t39655;
                double t39748 = 1.0/(t39652*t39652);
                double t39749 = b4f*t39718*t39558*(2.0/3.0);
                double t39750 = b2f*c*t39717*(1.0/3.0);
                double t39751 = b1f*c*t39717*t39719*(1.0/6.0);
                double t39752 = b3f*c*t39581*t39717*(1.0/2.0);
                double t39753 = t39750+t39751+t39752+t39749;
                double t39754 = a1f*c*c0f*t39717*t39656*(2.0/3.0);
                double t39755 = a1p*c*c0p*t39717*t39592*(2.0/3.0);
                double t39756 = ccaa1*gcaa*t39731*t39628;
                double t39757 = ccaa2*gamma_bb[index]*t39732*t39661*t39662*2.0;
                double t39758 = t39756+t39757-ccaa1*gamma_bb[index]*t39661*t39733*t39662-ccaa2*t39661*t39662*t39734* \
                   t39665*t39737;
                double t39759 = 1.0/t39743;
                double t39760 = 1.0/t39746;
                double t39761 = 1.0/(t39743*t39743);
                double t39762 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t39763 = 1.0/(t39746*t39746);
                double t39764 = gx*t39628*2.0;
                double t39765 = gamma_bb[index]*t39741*t39662*2.0;
                double t39766 = t39764+t39765;
                double t39767 = gamma_bb[index]*gx*t39625*(1.6E1/3.0);
                double t39768 = t39741*t39638*t39665*(1.6E1/3.0);
                double t39769 = t39767+t39768;
                v_rho_b_gamma_bb_[index] = -(ccab1*gcab*t39628*t39669*(1.0/2.0)+ccab2*t39630*t39640*t39633*t39628- \
                   ccab2*t39641*t39633*t39634*t39647-ccab1*t39630*t39633*t39628*t39639*(1.0/2.0))*(t39613+t39729-t39595+ \
                   t39596*(t39716-t39624*t39618*t39619*t39577*(t39716-(t39681*1.0/(t39675*t39675)*(b2f*c*t39670*(1.0/ \
                   3.0)+b4f*t39558*t39687*(2.0/3.0)+b1f*c*t39670*t39688*(1.0/6.0)+b3f*c*t39670*t39599*(1.0/2.0)))/t39678+ \
                   a1f*c*c0f*t39670*t39679*(2.0/3.0)-a1p*c*c0p*t39610*t39670*(2.0/3.0))-a1p*c*c0p*t39610*t39670*(2.0/ \
                   3.0)+t39713*t39618*t39619*t39682*t39577+t39624*t39619*t39682*t39709*t39577*4.0+t39614*t39615*t39624* \
                   t39618*t39682*t39577*4.0-Aa*t39624*t39706*t39708*t39577*t39696*(t39619*t39709*4.0+t39614*t39615*t39618* \
                   4.0)*2.0-Aa*t39713*t39706*t39715*t39708*t39577*t39696*2.0+(1.0/(t39702*t39702)*t39624*t39715*t39708* \
                   t39577*t39696*(b2a*c*t39670*(1.0/3.0)+b4a*t39558*t39687*(2.0/3.0)+b1a*c*t39670*t39688*(1.0/6.0)+b3a* \
                   c*t39670*t39599*(1.0/2.0)))/t39705-Aa*a1a*c*t39624*t39670*t39706*t39715*t39577*t39696*(2.0/3.0))+rho_b[index]* \
                   (-t39727+t39755+t39574*t39577*(t39727+t39754-t39753*t39747*t39658*t39748-a1p*c*c0p*t39717*t39592*(2.0/ \
                   3.0)))-t39730*t39574*t39577-t39624*t39618*t39619*t39682*t39577)+(-rho_b[index]*t39660+t39596*(t39613+ \
                   t39729-t39624*t39618*t39619*t39682*t39577)+rho_a[index]*(t39574*t39577*(c0p*t39571*t39569*2.0-c0f* \
                   log((t39578*(1.0/2.0))/(b1f*t39556+b3f*t39557+b2f*c*t39554+b4f*t39558*t39559)+1.0)*(a1f*c*t39554+1.0) \
                   *2.0)-c0p*t39571*t39569*2.0))*(ccab1*gcab*t39625*t39669*(4.0/3.0)-ccab2*t39641*t39633*t39634*(gcab* \
                   t39625*(8.0/3.0)+gamma_bb[index]*t39633*t39638*(4.0/3.0)+t39630*t39633*t39625*(8.0/3.0))+ccab2*gamma_bb[index]* \
                   t39640*t39633*t39638*(4.0/3.0)-ccab1*gamma_bb[index]*t39633*t39638*t39639*(4.0/3.0)+ccab2*t39630*t39640* \
                   t39633*t39625*(8.0/3.0)-ccab1*t39630*t39633*t39625*t39639*(4.0/3.0)-ccab2*t39630*t39641*t39633*t39644* \
                   t39628+ccab2*t39633*t39634*t39644*1.0/(t39637*t39637*t39637)*t39647*2.0-ccab2*gamma_bb[index]*t39630* \
                   t39641*t39633*t39625*t39647*(8.0/3.0)+ccab1*gamma_bb[index]*gcab*t39630*1.0/(t39632*t39632*t39632) \
                   *t39633*t39638*(4.0/3.0))-t39660*t39758+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t39628*t39759-cx1*gamma_bb[index]* \
                   t39741*t39662*t39761+cx2*gamma_bb[index]*t39741*t39760*t39662*2.0-cx2*t39741*t39662*t39763*t39665* \
                   t39766)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t39625*t39759*(8.0/3.0)-cx1*gamma_bb[index]* \
                   t39741*t39761*t39638*8.0+cx2*gamma_bb[index]*t39741*t39760*t39638*(3.2E1/3.0)-cx2*t39741*t39763*t39638* \
                   t39665*t39766*(1.6E1/3.0)+cx1*gx*t39741*1.0/(t39743*t39743*t39743)*t39762*t39665*(1.6E1/3.0)-cx2*t39741* \
                   t39662*t39763*t39665*(gx*t39625*(1.6E1/3.0)+gamma_bb[index]*t39741*t39638*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t39741*t39662*t39763*t39769*2.0+cx2*t39741*t39662*t39665*1.0/(t39746*t39746*t39746)*t39766*t39769* \
                   2.0)+rho_b[index]*t39758*(-t39727+t39755+t39574*t39577*(t39727+t39754-t39755-t39753*t39747*t39658* \
                   t39748))+rho_b[index]*(t39595+t39730*t39574*t39577)*(ccaa1*gcaa*t39731*t39625*(8.0/3.0)-ccaa1*gamma_bb[index]* \
                   t39661*t39733*t39638*8.0+ccaa2*gamma_bb[index]*t39732*t39661*t39638*(3.2E1/3.0)-ccaa2*t39661*t39734* \
                   t39638*t39665*t39737*(1.6E1/3.0)+ccaa1*gcaa*t39661*t39762*1.0/(t39664*t39664*t39664)*t39665*(1.6E1/ \
                   3.0)-ccaa2*t39661*t39662*t39734*t39665*(gcaa*t39625*(1.6E1/3.0)+gamma_bb[index]*t39661*t39638*(3.2E1/ \
                   3.0))-ccaa2*gamma_bb[index]*t39740*t39661*t39662*t39734*2.0+ccaa2*t39740*t39661*t39662*t39665*t39737* \
                   1.0/(t39668*t39668*t39668)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t40387 = 1.0/pow(rho_b[index],1.0/3.0);
                double t40388 = c*t40387;
                double t40389 = sqrt(t40388);
                double t40390 = pow(t40388,3.0/2.0);
                double t40391 = c*c;
                double t40392 = 1.0/pow(rho_b[index],2.0/3.0);
                double t40393 = 1.0/c0p;
                double t40394 = b1p*t40389;
                double t40395 = b3p*t40390;
                double t40396 = b4p*t40391*t40392;
                double t40397 = b2p*c*t40387;
                double t40398 = t40394+t40395+t40396+t40397;
                double t40399 = 1.0/t40398;
                double t40400 = t40393*t40399*(1.0/2.0);
                double t40401 = t40400+1.0;
                double t40402 = log(t40401);
                double t40403 = a1p*c*t40387;
                double t40404 = t40403+1.0;
                double t40405 = 1.0/pow(rho_b[index],8.0/3.0);
                double t40406 = gcaa*gcaa;
                double t40407 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t40408 = gamma_bb[index]*gcaa*t40405;
                double t40409 = t40408+1.0;
                double t40410 = gamma_bb[index]*gamma_bb[index];
                double t40411 = gamma_bb[index]*gcaa*t40405*2.0;
                double t40412 = t40410*t40406*t40407;
                double t40413 = t40411+t40412+1.0;
                double t40414 = pow(2.0,1.0/3.0);
                double t40415 = t40414*2.0;
                double t40416 = t40415-2.0;
                double t40417 = two_13*2.0;
                double t40418 = t40417-2.0;
                double t40419 = 1.0/t40418;
                double t40420 = 1.0/c0f;
                double t40421 = b1f*t40389;
                double t40422 = b3f*t40390;
                double t40423 = b4f*t40391*t40392;
                double t40424 = b2f*c*t40387;
                double t40425 = t40421+t40422+t40423+t40424;
                double t40426 = 1.0/t40425;
                double t40427 = t40420*t40426*(1.0/2.0);
                double t40428 = t40427+1.0;
                double t40429 = log(t40428);
                double t40430 = a1f*c*t40387;
                double t40431 = t40430+1.0;
                double t40432 = c0f*t40431*t40429*2.0;
                double t40433 = c0p*t40402*t40404*2.0;
                double t40434 = 1.0/t40409;
                double t40435 = 1.0/t40413;
                double t40436 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t40437 = 1.0/(t40409*t40409);
                double t40438 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t40439 = 1.0/(t40413*t40413);
                double t40440 = gcaa*t40405*2.0;
                double t40441 = gamma_bb[index]*t40406*t40407*2.0;
                double t40442 = t40440+t40441;
                double t40443 = gamma_bb[index]*gcaa*t40438*(1.6E1/3.0);
                double t40444 = t40410*t40406*t40436*(1.6E1/3.0);
                double t40445 = t40443+t40444;
                double t40446 = gx*gx;
                double t40447 = gamma_bb[index]*gx*t40405;
                double t40448 = t40447+1.0;
                double t40449 = gamma_bb[index]*gx*t40405*2.0;
                double t40450 = t40410*t40407*t40446;
                double t40451 = t40450+t40449+1.0;
                double t40452 = 1.0/pow(rho_b[index],4.0/3.0);
                double t40453 = 1.0/pow(rho_b[index],5.0/3.0);
                double t40454 = 1.0/sqrt(t40388);
                double t40455 = 1.0/t40401;
                double t40456 = 1.0/(t40398*t40398);
                double t40457 = b4p*t40453*t40391*(2.0/3.0);
                double t40458 = b2p*c*t40452*(1.0/3.0);
                double t40459 = b1p*c*t40452*t40454*(1.0/6.0);
                double t40460 = b3p*c*t40452*t40389*(1.0/2.0);
                double t40461 = t40460+t40457+t40458+t40459;
                double t40462 = t40404*t40461*t40455*t40456;
                double t40463 = ccaa1*gcaa*t40405*t40434;
                double t40464 = ccaa2*gamma_bb[index]*t40406*t40407*t40435*2.0;
                double t40465 = t40463+t40464-ccaa1*gamma_bb[index]*t40406*t40407*t40437-ccaa2*t40410*t40406*t40442* \
                   t40407*t40439;
                double t40466 = 1.0/t40448;
                double t40467 = 1.0/t40451;
                double t40468 = 1.0/(t40448*t40448);
                double t40469 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t40470 = 1.0/(t40451*t40451);
                double t40471 = gx*t40405*2.0;
                double t40472 = gamma_bb[index]*t40407*t40446*2.0;
                double t40473 = t40471+t40472;
                double t40474 = gamma_bb[index]*gx*t40438*(1.6E1/3.0);
                double t40475 = t40410*t40436*t40446*(1.6E1/3.0);
                double t40476 = t40474+t40475;
                v_rho_b_gamma_bb_[index] = -t40465*(t40433+t40416*t40419*(t40432-c0p*t40402*t40404*2.0))+rho_b[index]* \
                   t40465*(-t40462+t40416*t40419*(t40462-(t40431*1.0/(t40425*t40425)*(b2f*c*t40452*(1.0/3.0)+b4f*t40453* \
                   t40391*(2.0/3.0)+b1f*c*t40452*t40454*(1.0/6.0)+b3f*c*t40452*t40389*(1.0/2.0)))/t40428+a1f*c*c0f*t40452* \
                   t40429*(2.0/3.0)-a1p*c*c0p*t40402*t40452*(2.0/3.0))+a1p*c*c0p*t40402*t40452*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t40405*t40466-cx1*gamma_bb[index]*t40407*t40446*t40468+cx2*gamma_bb[index]*t40407*t40446* \
                   t40467*2.0-cx2*t40410*t40407*t40470*t40446*t40473)*(4.0/3.0)+rho_b[index]*(t40433+t40416*t40419*(t40432- \
                   t40433))*(ccaa1*gcaa*t40434*t40438*(8.0/3.0)+ccaa2*gamma_bb[index]*t40406*t40435*t40436*(3.2E1/3.0) \
                   -ccaa1*gamma_bb[index]*t40406*t40436*t40437*8.0-ccaa2*t40410*t40406*t40442*t40436*t40439*(1.6E1/3.0) \
                   +ccaa1*gcaa*t40410*t40406*1.0/(t40409*t40409*t40409)*t40469*(1.6E1/3.0)-ccaa2*t40410*t40406*t40407* \
                   t40439*(gcaa*t40438*(1.6E1/3.0)+gamma_bb[index]*t40406*t40436*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t40406* \
                   t40407*t40445*t40439*2.0+ccaa2*t40410*1.0/(t40413*t40413*t40413)*t40406*t40442*t40407*t40445*2.0)- \
                   c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t40438*t40466*(8.0/3.0)-cx1*gamma_bb[index]*t40436*t40446*t40468* \
                   8.0+cx2*gamma_bb[index]*t40436*t40446*t40467*(3.2E1/3.0)-cx2*t40410*t40470*t40436*t40446*t40473*(1.6E1/ \
                   3.0)+cx1*gx*t40410*t40446*1.0/(t40448*t40448*t40448)*t40469*(1.6E1/3.0)-cx2*t40410*t40407*t40470*t40446* \
                   (gx*t40438*(1.6E1/3.0)+gamma_bb[index]*t40436*t40446*(3.2E1/3.0))-cx2*gamma_bb[index]*t40407*t40470* \
                   t40446*t40476*2.0+cx2*t40410*1.0/(t40451*t40451*t40451)*t40407*t40446*t40473*t40476*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39771 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39772 = c*t39771;
                double t39773 = sqrt(t39772);
                double t39774 = pow(t39772,3.0/2.0);
                double t39775 = c*c;
                double t39776 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39777 = 1.0/c0p;
                double t39778 = b1p*t39773;
                double t39779 = b3p*t39774;
                double t39780 = b4p*t39775*t39776;
                double t39781 = b2p*c*t39771;
                double t39782 = t39780+t39781+t39778+t39779;
                double t39783 = 1.0/t39782;
                double t39784 = t39783*t39777*(1.0/2.0);
                double t39785 = t39784+1.0;
                double t39786 = log(t39785);
                double t39787 = a1p*c*t39771;
                double t39788 = t39787+1.0;
                double t39789 = pow(2.0,1.0/3.0);
                double t39790 = t39789*2.0;
                double t39791 = t39790-2.0;
                double t39792 = two_13*2.0;
                double t39793 = t39792-2.0;
                double t39794 = 1.0/t39793;
                double t39795 = 1.0/c0f;
                double t39796 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39797 = c*t39796;
                double t39798 = sqrt(t39797);
                double t39799 = pow(t39797,3.0/2.0);
                double t39800 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39801 = b1p*t39798;
                double t39802 = b3p*t39799;
                double t39803 = b4p*t39800*t39775;
                double t39804 = b2p*c*t39796;
                double t39805 = t39801+t39802+t39803+t39804;
                double t39806 = 1.0/t39805;
                double t39807 = t39806*t39777*(1.0/2.0);
                double t39808 = t39807+1.0;
                double t39809 = log(t39808);
                double t39810 = a1p*c*t39796;
                double t39811 = t39810+1.0;
                double t39812 = c0p*t39811*t39809*2.0;
                double t39813 = rho_a[index]+rho_b[index];
                double t39814 = 1.0/pow(t39813,1.0/3.0);
                double t39815 = c*t39814;
                double t39816 = sqrt(t39815);
                double t39817 = pow(t39815,3.0/2.0);
                double t39818 = 1.0/pow(t39813,2.0/3.0);
                double t39819 = b1p*t39816;
                double t39820 = b3p*t39817;
                double t39821 = b4p*t39818*t39775;
                double t39822 = b2p*c*t39814;
                double t39823 = t39820+t39821+t39822+t39819;
                double t39824 = 1.0/t39823;
                double t39825 = t39824*t39777*(1.0/2.0);
                double t39826 = t39825+1.0;
                double t39827 = log(t39826);
                double t39828 = a1p*c*t39814;
                double t39829 = t39828+1.0;
                double t39830 = c0p*t39827*t39829*2.0;
                double t39831 = rho_a[index]-rho_b[index];
                double t39832 = t39831*t39831;
                double t39833 = 1.0/t39813;
                double t39834 = t39831*t39833;
                double t39835 = 1.0/(t39813*t39813*t39813*t39813);
                double t39836 = t39832*t39832;
                double t39837 = t39834+1.0;
                double t39838 = pow(t39837,4.0/3.0);
                double t39839 = -t39834+1.0;
                double t39840 = pow(t39839,4.0/3.0);
                double t39841 = t39840+t39838-2.0;
                double t39842 = gcab*gcab;
                double t39843 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t39844 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39845 = gamma_aa[index]*t39844*(1.0/2.0);
                double t39846 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39847 = gamma_bb[index]*t39846*(1.0/2.0);
                double t39848 = t39845+t39847;
                double t39849 = gcab*t39848;
                double t39850 = t39849+1.0;
                double t39851 = t39848*t39848;
                double t39852 = t39842*t39851;
                double t39853 = gcab*t39848*2.0;
                double t39854 = t39852+t39853+1.0;
                double t39856 = gcab*t39844;
                double t39857 = t39842*t39844*t39848;
                double t39855 = t39856+t39857;
                double t39858 = 1.0/(t39854*t39854);
                double t39859 = b1f*t39773;
                double t39860 = b3f*t39774;
                double t39861 = b4f*t39775*t39776;
                double t39862 = b2f*c*t39771;
                double t39863 = t39860+t39861+t39862+t39859;
                double t39864 = 1.0/t39863;
                double t39865 = t39864*t39795*(1.0/2.0);
                double t39866 = t39865+1.0;
                double t39867 = log(t39866);
                double t39868 = a1f*c*t39771;
                double t39869 = t39868+1.0;
                double t39870 = c0f*t39867*t39869*2.0;
                double t39871 = c0p*t39786*t39788*2.0;
                double t39872 = gcaa*gcaa;
                double t39873 = gamma_aa[index]*gcaa*t39844;
                double t39874 = t39873+1.0;
                double t39875 = gamma_aa[index]*gamma_aa[index];
                double t39876 = gamma_aa[index]*gcaa*t39844*2.0;
                double t39877 = t39843*t39872*t39875;
                double t39878 = t39876+t39877+1.0;
                double t39880 = gcaa*t39844*2.0;
                double t39881 = gamma_aa[index]*t39843*t39872*2.0;
                double t39879 = t39880+t39881;
                double t39882 = 1.0/(t39878*t39878);
                double t39883 = gx*gx;
                double t39884 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t39885 = gamma_aa[index]*gx*t39844;
                double t39886 = t39885+1.0;
                double t39887 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t39888 = gamma_aa[index]*gx*t39844*2.0;
                double t39889 = t39843*t39883*t39875;
                double t39890 = t39888+t39889+1.0;
                double t39892 = gx*t39844*2.0;
                double t39893 = gamma_aa[index]*t39843*t39883*2.0;
                double t39891 = t39892+t39893;
                double t39894 = 1.0/(t39890*t39890);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t39871+t39791*t39794*(t39870-c0p*t39786*t39788*2.0) \
                   )+rho_b[index]*(t39812-t39791*t39794*(t39812-c0f*log((t39795*(1.0/2.0))/(b1f*t39798+b3f*t39799+b2f* \
                   c*t39796+b4f*t39800*t39775)+1.0)*(a1f*c*t39796+1.0)*2.0))-t39813*(t39830-t39841*t39835*t39836*t39794* \
                   (t39830-c0f*log((t39795*(1.0/2.0))/(b1f*t39816+b3f*t39817+b2f*c*t39814+b4f*t39818*t39775)+1.0)*(a1f* \
                   c*t39814+1.0)*2.0)+(Aa*t39841*t39794*log((1.0/2.0)/(Aa*(b1a*t39816+b3a*t39817+b2a*c*t39814+b4a*t39818* \
                   t39775))+1.0)*(t39835*t39836-1.0)*(a1a*c*t39814+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t39850*t39850)*t39842* \
                   t39843*(1.0/2.0)-(ccab2*t39842*t39843*(1.0/2.0))/t39854-ccab2*t39842*t39851*1.0/(t39854*t39854*t39854) \
                   *(t39855*t39855)*2.0+ccab2*(t39842*t39842)*t39851*t39843*t39858*(1.0/2.0)+ccab2*t39842*t39844*t39855* \
                   t39848*t39858*2.0-ccab1*gcab*1.0/(t39850*t39850*t39850)*t39842*t39843*t39848*(1.0/2.0))+rho_a[index]* \
                   (t39871+t39791*t39794*(t39870-t39871))*(ccaa1*t39843*t39872*1.0/(t39874*t39874)*2.0-(ccaa2*t39843* \
                   t39872*2.0)/t39878+ccaa2*(t39872*t39872)*t39882*t39875*t39887*2.0-ccaa1*gamma_aa[index]*gcaa*t39872* \
                   1.0/(t39874*t39874*t39874)*t39884*2.0-ccaa2*t39843*t39872*t39875*1.0/(t39878*t39878*t39878)*(t39879* \
                   t39879)*2.0+ccaa2*gamma_aa[index]*t39843*t39872*t39882*t39879*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   t39843*t39883*1.0/(t39886*t39886)*2.0-(cx2*t39843*t39883*2.0)/t39890+cx2*(t39883*t39883)*t39875*t39894* \
                   t39887*2.0-cx1*gamma_aa[index]*gx*t39883*t39884*1.0/(t39886*t39886*t39886)*2.0-cx2*t39843*1.0/(t39890* \
                   t39890*t39890)*(t39891*t39891)*t39883*t39875*2.0+cx2*gamma_aa[index]*t39843*t39891*t39883*t39894*4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t40889 = 1.0/pow(rho_a[index],1.0/3.0);
                double t40890 = c*t40889;
                double t40891 = sqrt(t40890);
                double t40892 = pow(t40890,3.0/2.0);
                double t40893 = c*c;
                double t40894 = 1.0/pow(rho_a[index],2.0/3.0);
                double t40895 = 1.0/c0p;
                double t40896 = b1p*t40891;
                double t40897 = b3p*t40892;
                double t40898 = b4p*t40893*t40894;
                double t40899 = b2p*c*t40889;
                double t40900 = t40896+t40897+t40898+t40899;
                double t40901 = 1.0/t40900;
                double t40902 = t40901*t40895*(1.0/2.0);
                double t40903 = t40902+1.0;
                double t40904 = log(t40903);
                double t40905 = a1p*c*t40889;
                double t40906 = t40905+1.0;
                double t40907 = gcaa*gcaa;
                double t40908 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t40909 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40910 = gamma_aa[index]*gcaa*t40909;
                double t40911 = t40910+1.0;
                double t40912 = gamma_aa[index]*gamma_aa[index];
                double t40913 = gamma_aa[index]*gcaa*t40909*2.0;
                double t40914 = t40912*t40907*t40908;
                double t40915 = t40913+t40914+1.0;
                double t40917 = gcaa*t40909*2.0;
                double t40918 = gamma_aa[index]*t40907*t40908*2.0;
                double t40916 = t40917+t40918;
                double t40919 = 1.0/(t40915*t40915);
                double t40920 = gx*gx;
                double t40921 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t40922 = gamma_aa[index]*gx*t40909;
                double t40923 = t40922+1.0;
                double t40924 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t40925 = gamma_aa[index]*gx*t40909*2.0;
                double t40926 = t40920*t40912*t40908;
                double t40927 = t40925+t40926+1.0;
                double t40929 = gx*t40909*2.0;
                double t40930 = gamma_aa[index]*t40920*t40908*2.0;
                double t40928 = t40930+t40929;
                double t40931 = 1.0/(t40927*t40927);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t40891+b3f*t40892+b2f*c*t40889+b4f*t40893*t40894))+1.0)*(a1f*c*t40889+1.0)*2.0-c0p*t40904*t40906*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t40904*t40906*2.0)*(ccaa1*1.0/(t40911*t40911)*t40907*t40908*2.0-(ccaa2*t40907* \
                   t40908*2.0)/t40915+ccaa2*t40912*t40924*(t40907*t40907)*t40919*2.0-ccaa1*gamma_aa[index]*gcaa*1.0/(t40911* \
                   t40911*t40911)*t40921*t40907*2.0-ccaa2*t40912*1.0/(t40915*t40915*t40915)*t40907*(t40916*t40916)*t40908* \
                   2.0+ccaa2*gamma_aa[index]*t40907*t40916*t40908*t40919*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*t40920* \
                   1.0/(t40923*t40923)*t40908*2.0-(cx2*t40920*t40908*2.0)/t40927+cx2*(t40920*t40920)*t40912*t40931*t40924* \
                   2.0-cx1*gamma_aa[index]*gx*t40920*t40921*1.0/(t40923*t40923*t40923)*2.0-cx2*t40920*t40912*t40908*1.0/ \
                   (t40927*t40927*t40927)*(t40928*t40928)*2.0+cx2*gamma_aa[index]*t40920*t40931*t40908*t40928*4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39897 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39898 = c*t39897;
                double t39899 = sqrt(t39898);
                double t39900 = pow(t39898,3.0/2.0);
                double t39901 = c*c;
                double t39902 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39903 = 1.0/c0p;
                double t39904 = b1p*t39899;
                double t39905 = b3p*t39900;
                double t39906 = b4p*t39901*t39902;
                double t39907 = b2p*c*t39897;
                double t39908 = t39904+t39905+t39906+t39907;
                double t39909 = 1.0/t39908;
                double t39910 = t39903*t39909*(1.0/2.0);
                double t39911 = t39910+1.0;
                double t39912 = log(t39911);
                double t39913 = a1p*c*t39897;
                double t39914 = t39913+1.0;
                double t39915 = pow(2.0,1.0/3.0);
                double t39916 = t39915*2.0;
                double t39917 = t39916-2.0;
                double t39918 = two_13*2.0;
                double t39919 = t39918-2.0;
                double t39920 = 1.0/t39919;
                double t39921 = 1.0/c0f;
                double t39922 = 1.0/pow(rho_b[index],1.0/3.0);
                double t39923 = c*t39922;
                double t39924 = sqrt(t39923);
                double t39925 = pow(t39923,3.0/2.0);
                double t39926 = 1.0/pow(rho_b[index],2.0/3.0);
                double t39927 = b1p*t39924;
                double t39928 = b3p*t39925;
                double t39929 = b4p*t39901*t39926;
                double t39930 = b2p*c*t39922;
                double t39931 = t39930+t39927+t39928+t39929;
                double t39932 = 1.0/t39931;
                double t39933 = t39903*t39932*(1.0/2.0);
                double t39934 = t39933+1.0;
                double t39935 = log(t39934);
                double t39936 = a1p*c*t39922;
                double t39937 = t39936+1.0;
                double t39938 = c0p*t39935*t39937*2.0;
                double t39939 = rho_a[index]+rho_b[index];
                double t39940 = 1.0/pow(t39939,1.0/3.0);
                double t39941 = c*t39940;
                double t39942 = sqrt(t39941);
                double t39943 = pow(t39941,3.0/2.0);
                double t39944 = 1.0/pow(t39939,2.0/3.0);
                double t39945 = b1p*t39942;
                double t39946 = b3p*t39943;
                double t39947 = b4p*t39901*t39944;
                double t39948 = b2p*c*t39940;
                double t39949 = t39945+t39946+t39947+t39948;
                double t39950 = 1.0/t39949;
                double t39951 = t39903*t39950*(1.0/2.0);
                double t39952 = t39951+1.0;
                double t39953 = log(t39952);
                double t39954 = a1p*c*t39940;
                double t39955 = t39954+1.0;
                double t39956 = c0p*t39953*t39955*2.0;
                double t39957 = rho_a[index]-rho_b[index];
                double t39958 = t39957*t39957;
                double t39959 = 1.0/t39939;
                double t39960 = t39957*t39959;
                double t39961 = 1.0/(t39939*t39939*t39939*t39939);
                double t39962 = t39958*t39958;
                double t39963 = t39960+1.0;
                double t39964 = pow(t39963,4.0/3.0);
                double t39965 = -t39960+1.0;
                double t39966 = pow(t39965,4.0/3.0);
                double t39967 = t39964+t39966-2.0;
                double t39968 = 1.0/pow(rho_a[index],8.0/3.0);
                double t39969 = 1.0/pow(rho_b[index],8.0/3.0);
                double t39970 = gcab*gcab;
                double t39971 = gamma_aa[index]*t39968*(1.0/2.0);
                double t39972 = gamma_bb[index]*t39969*(1.0/2.0);
                double t39973 = t39971+t39972;
                double t39974 = t39973*t39973;
                double t39975 = t39970*t39974;
                double t39976 = gcab*t39973*2.0;
                double t39977 = t39975+t39976+1.0;
                double t39978 = 1.0/(t39977*t39977);
                double t39979 = gcab*t39968;
                double t39980 = t39970*t39973*t39968;
                double t39981 = t39980+t39979;
                double t39982 = gcab*t39969;
                double t39983 = t39970*t39973*t39969;
                double t39984 = t39982+t39983;
                double t39985 = gcab*t39973;
                double t39986 = t39985+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t39938-t39920*t39917*(t39938-c0f*log((t39921*(1.0/2.0) \
                   )/(b1f*t39924+b3f*t39925+b2f*c*t39922+b4f*t39901*t39926)+1.0)*(a1f*c*t39922+1.0)*2.0))+t39939*(t39956- \
                   t39920*t39961*t39962*t39967*(t39956-c0f*log((t39921*(1.0/2.0))/(b1f*t39942+b3f*t39943+b2f*c*t39940+ \
                   b4f*t39901*t39944)+1.0)*(a1f*c*t39940+1.0)*2.0)+(Aa*t39920*t39967*log((1.0/2.0)/(Aa*(b1a*t39942+b3a* \
                   t39943+b2a*c*t39940+b4a*t39901*t39944))+1.0)*(t39961*t39962-1.0)*(a1a*c*t39940+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t39920*t39917*(c0p*t39912*t39914*2.0-c0f*log((t39921*(1.0/2.0))/(b1f*t39899+b3f*t39900+b2f*c*t39897+ \
                   b4f*t39901*t39902)+1.0)*(a1f*c*t39897+1.0)*2.0)-c0p*t39912*t39914*2.0))*(ccab1*t39970*t39968*1.0/(t39986* \
                   t39986)*t39969*(1.0/2.0)-(ccab2*t39970*t39968*t39969*(1.0/2.0))/t39977+ccab2*t39970*t39981*t39973* \
                   t39969*t39978+ccab2*t39970*t39973*t39984*t39968*t39978-ccab2*t39970*t39981*t39974*t39984*1.0/(t39977* \
                   t39977*t39977)*2.0+ccab2*(t39970*t39970)*t39974*t39968*t39969*t39978*(1.0/2.0)-ccab1*gcab*t39970*t39973* \
                   t39968*1.0/(t39986*t39986*t39986)*t39969*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t39990 = 1.0/pow(rho_a[index],1.0/3.0);
                double t39991 = c*t39990;
                double t39992 = sqrt(t39991);
                double t39993 = pow(t39991,3.0/2.0);
                double t39994 = c*c;
                double t39995 = 1.0/pow(rho_a[index],2.0/3.0);
                double t39996 = 1.0/c0p;
                double t39997 = b1p*t39992;
                double t39998 = b3p*t39993;
                double t39999 = b4p*t39994*t39995;
                double t40000 = b2p*c*t39990;
                double t40001 = t39997+t39998+t39999+t40000;
                double t40002 = 1.0/t40001;
                double t40003 = t39996*t40002*(1.0/2.0);
                double t40004 = t40003+1.0;
                double t40005 = log(t40004);
                double t40006 = a1p*c*t39990;
                double t40007 = t40006+1.0;
                double t40008 = pow(2.0,1.0/3.0);
                double t40009 = t40008*2.0;
                double t40010 = t40009-2.0;
                double t40011 = two_13*2.0;
                double t40012 = t40011-2.0;
                double t40013 = 1.0/t40012;
                double t40014 = 1.0/c0f;
                double t40015 = 1.0/pow(rho_b[index],1.0/3.0);
                double t40016 = c*t40015;
                double t40017 = sqrt(t40016);
                double t40018 = pow(t40016,3.0/2.0);
                double t40019 = 1.0/pow(rho_b[index],2.0/3.0);
                double t40020 = b1p*t40017;
                double t40021 = b3p*t40018;
                double t40022 = b4p*t39994*t40019;
                double t40023 = b2p*c*t40015;
                double t40024 = t40020+t40021+t40022+t40023;
                double t40025 = 1.0/t40024;
                double t40026 = t39996*t40025*(1.0/2.0);
                double t40027 = t40026+1.0;
                double t40028 = log(t40027);
                double t40029 = a1p*c*t40015;
                double t40030 = t40029+1.0;
                double t40031 = c0p*t40030*t40028*2.0;
                double t40032 = rho_a[index]+rho_b[index];
                double t40033 = 1.0/pow(t40032,1.0/3.0);
                double t40034 = c*t40033;
                double t40035 = sqrt(t40034);
                double t40036 = pow(t40034,3.0/2.0);
                double t40037 = 1.0/pow(t40032,2.0/3.0);
                double t40038 = b1p*t40035;
                double t40039 = b3p*t40036;
                double t40040 = b4p*t39994*t40037;
                double t40041 = b2p*c*t40033;
                double t40042 = t40040+t40041+t40038+t40039;
                double t40043 = 1.0/t40042;
                double t40044 = t39996*t40043*(1.0/2.0);
                double t40045 = t40044+1.0;
                double t40046 = log(t40045);
                double t40047 = a1p*c*t40033;
                double t40048 = t40047+1.0;
                double t40049 = c0p*t40046*t40048*2.0;
                double t40050 = rho_a[index]-rho_b[index];
                double t40051 = t40050*t40050;
                double t40052 = 1.0/t40032;
                double t40053 = t40050*t40052;
                double t40054 = 1.0/(t40032*t40032*t40032*t40032);
                double t40055 = t40051*t40051;
                double t40056 = t40053+1.0;
                double t40057 = pow(t40056,4.0/3.0);
                double t40058 = -t40053+1.0;
                double t40059 = pow(t40058,4.0/3.0);
                double t40060 = t40057+t40059-2.0;
                double t40061 = gcab*gcab;
                double t40062 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t40063 = 1.0/pow(rho_a[index],8.0/3.0);
                double t40064 = gamma_aa[index]*t40063*(1.0/2.0);
                double t40065 = 1.0/pow(rho_b[index],8.0/3.0);
                double t40066 = gamma_bb[index]*t40065*(1.0/2.0);
                double t40067 = t40064+t40066;
                double t40068 = gcab*t40067;
                double t40069 = t40068+1.0;
                double t40070 = t40067*t40067;
                double t40071 = t40061*t40070;
                double t40072 = gcab*t40067*2.0;
                double t40073 = t40071+t40072+1.0;
                double t40075 = gcab*t40065;
                double t40076 = t40061*t40065*t40067;
                double t40074 = t40075+t40076;
                double t40077 = 1.0/(t40073*t40073);
                double t40078 = c0p*t40005*t40007*2.0;
                double t40079 = b1f*t40017;
                double t40080 = b3f*t40018;
                double t40081 = b4f*t39994*t40019;
                double t40082 = b2f*c*t40015;
                double t40083 = t40080+t40081+t40082+t40079;
                double t40084 = 1.0/t40083;
                double t40085 = t40014*t40084*(1.0/2.0);
                double t40086 = t40085+1.0;
                double t40087 = log(t40086);
                double t40088 = a1f*c*t40015;
                double t40089 = t40088+1.0;
                double t40090 = t40031-c0f*t40087*t40089*2.0;
                double t40091 = t40031-t40010*t40013*t40090;
                double t40092 = gcaa*gcaa;
                double t40093 = gamma_bb[index]*gcaa*t40065;
                double t40094 = t40093+1.0;
                double t40095 = gamma_bb[index]*gamma_bb[index];
                double t40096 = gamma_bb[index]*gcaa*t40065*2.0;
                double t40097 = t40062*t40092*t40095;
                double t40098 = t40096+t40097+1.0;
                double t40100 = gcaa*t40065*2.0;
                double t40101 = gamma_bb[index]*t40062*t40092*2.0;
                double t40099 = t40100+t40101;
                double t40102 = 1.0/(t40098*t40098);
                double t40103 = gx*gx;
                double t40104 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t40105 = gamma_bb[index]*gx*t40065;
                double t40106 = t40105+1.0;
                double t40107 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t40108 = gamma_bb[index]*gx*t40065*2.0;
                double t40109 = t40103*t40062*t40095;
                double t40110 = t40108+t40109+1.0;
                double t40112 = gx*t40065*2.0;
                double t40113 = gamma_bb[index]*t40103*t40062*2.0;
                double t40111 = t40112+t40113;
                double t40114 = 1.0/(t40110*t40110);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t40091+rho_a[index]*(t40078-t40010*t40013*(t40078-c0f* \
                   log((t40014*(1.0/2.0))/(b1f*t39992+b3f*t39993+b2f*c*t39990+b4f*t39994*t39995)+1.0)*(a1f*c*t39990+1.0) \
                   *2.0))-t40032*(t40049-t40013*t40060*t40054*t40055*(t40049-c0f*log((t40014*(1.0/2.0))/(b1f*t40035+b3f* \
                   t40036+b2f*c*t40033+b4f*t39994*t40037)+1.0)*(a1f*c*t40033+1.0)*2.0)+(Aa*t40013*t40060*log((1.0/2.0) \
                   /(Aa*(b1a*t40035+b3a*t40036+b2a*c*t40033+b4a*t39994*t40037))+1.0)*(t40054*t40055-1.0)*(a1a*c*t40033+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t40061*t40062*(1.0/2.0))/t40073-ccab1*t40061*t40062*1.0/(t40069*t40069)* \
                   (1.0/2.0)+ccab2*t40061*t40070*1.0/(t40073*t40073*t40073)*(t40074*t40074)*2.0-ccab2*(t40061*t40061) \
                   *t40070*t40062*t40077*(1.0/2.0)-ccab2*t40061*t40065*t40074*t40067*t40077*2.0+ccab1*gcab*t40061*t40062* \
                   t40067*1.0/(t40069*t40069*t40069)*(1.0/2.0))+rho_b[index]*t40091*(ccaa1*t40062*t40092*1.0/(t40094* \
                   t40094)*2.0-(ccaa2*t40062*t40092*2.0)/t40098+ccaa2*t40102*t40107*(t40092*t40092)*t40095*2.0-ccaa1* \
                   gamma_bb[index]*gcaa*t40104*t40092*1.0/(t40094*t40094*t40094)*2.0-ccaa2*t40062*t40092*t40095*1.0/(t40098* \
                   t40098*t40098)*(t40099*t40099)*2.0+ccaa2*gamma_bb[index]*t40102*t40062*t40092*t40099*4.0)-c0*pow(rho_b[index],4.0/ \
                   3.0)*(cx1*t40103*1.0/(t40106*t40106)*t40062*2.0-(cx2*t40103*t40062*2.0)/t40110+cx2*(t40103*t40103) \
                   *t40114*t40107*t40095*2.0-cx1*gamma_bb[index]*gx*t40103*t40104*1.0/(t40106*t40106*t40106)*2.0-cx2* \
                   1.0/(t40110*t40110*t40110)*(t40111*t40111)*t40103*t40062*t40095*2.0+cx2*gamma_bb[index]*t40111*t40103* \
                   t40114*t40062*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t40483 = 1.0/pow(rho_b[index],1.0/3.0);
                double t40484 = c*t40483;
                double t40485 = sqrt(t40484);
                double t40486 = pow(t40484,3.0/2.0);
                double t40487 = c*c;
                double t40488 = 1.0/pow(rho_b[index],2.0/3.0);
                double t40489 = 1.0/c0p;
                double t40490 = b1p*t40485;
                double t40491 = b3p*t40486;
                double t40492 = b4p*t40487*t40488;
                double t40493 = b2p*c*t40483;
                double t40494 = t40490+t40491+t40492+t40493;
                double t40495 = 1.0/t40494;
                double t40496 = t40495*t40489*(1.0/2.0);
                double t40497 = t40496+1.0;
                double t40498 = log(t40497);
                double t40499 = a1p*c*t40483;
                double t40500 = t40499+1.0;
                double t40501 = gcaa*gcaa;
                double t40502 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t40503 = 1.0/pow(rho_b[index],8.0/3.0);
                double t40504 = gamma_bb[index]*gcaa*t40503;
                double t40505 = t40504+1.0;
                double t40506 = gamma_bb[index]*gamma_bb[index];
                double t40507 = gamma_bb[index]*gcaa*t40503*2.0;
                double t40508 = t40501*t40502*t40506;
                double t40509 = t40507+t40508+1.0;
                double t40511 = gcaa*t40503*2.0;
                double t40512 = gamma_bb[index]*t40501*t40502*2.0;
                double t40510 = t40511+t40512;
                double t40513 = 1.0/(t40509*t40509);
                double t40514 = gx*gx;
                double t40515 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t40516 = gamma_bb[index]*gx*t40503;
                double t40517 = t40516+1.0;
                double t40518 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t40519 = gamma_bb[index]*gx*t40503*2.0;
                double t40520 = t40502*t40514*t40506;
                double t40521 = t40520+t40519+1.0;
                double t40523 = gx*t40503*2.0;
                double t40524 = gamma_bb[index]*t40502*t40514*2.0;
                double t40522 = t40523+t40524;
                double t40525 = 1.0/(t40521*t40521);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t40485+b3f*t40486+b2f*c*t40483+b4f*t40487*t40488))+1.0)*(a1f*c*t40483+1.0)*2.0-c0p*t40500*t40498*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t40500*t40498*2.0)*(ccaa1*t40501*t40502*1.0/(t40505*t40505)*2.0-(ccaa2*t40501* \
                   t40502*2.0)/t40509+ccaa2*(t40501*t40501)*t40513*t40506*t40518*2.0-ccaa1*gamma_bb[index]*gcaa*t40501* \
                   1.0/(t40505*t40505*t40505)*t40515*2.0-ccaa2*t40501*(t40510*t40510)*t40502*t40506*1.0/(t40509*t40509* \
                   t40509)*2.0+ccaa2*gamma_bb[index]*t40501*t40510*t40502*t40513*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
                   t40502*t40514*1.0/(t40517*t40517)*2.0-(cx2*t40502*t40514*2.0)/t40521+cx2*(t40514*t40514)*t40506*t40525* \
                   t40518*2.0-cx1*gamma_bb[index]*gx*t40514*t40515*1.0/(t40517*t40517*t40517)*2.0-cx2*t40502*1.0/(t40521* \
                   t40521*t40521)*(t40522*t40522)*t40514*t40506*2.0+cx2*gamma_bb[index]*t40502*t40522*t40514*t40525*4.0) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

