#ifndef _psi_src_lib_libmints_localize_h_
#define _psi_src_lib_libmints_localize_h_

#include <cstdio>
#include <psi4-dec.h>
#include <vector>

namespace psi {

class Matrix;
class BasisSet;

class OrbitalCoefs {

protected:
    
    bool restricted_;   
 
    boost::shared_ptr<BasisSet> primary_;

    boost::shared_ptr<Matrix> Ca_;
    boost::shared_ptr<Matrix> Cb_;
   
    boost::shared_ptr<Vector> eps_a_;
    boost::shared_ptr<Vector> eps_b_;

    boost::shared_ptr<Vector> occ_a_;
    boost::shared_ptr<Vector> occ_b_; 

    boost::shared_ptr<Dimension> nmopi_;
    boost::shared_ptr<Dimension> nsopi_;
    boost::shared_ptr<Dimension> napi_;
    boost::shared_ptr<Dimension> nbpi_; 
    boost::shared_ptr<Dimension> frzoapi_;
    boost::shared_ptr<Dimension> frzobpi_;
    boost::shared_ptr<Dimension> frzvapi_;
    boost::shared_ptr<Dimension> frzvbpi_;

    int nfzo_;
    int nfzv_;

public:

    OrbitalCoefs(boost::shared_ptr<BasisSet> basis,
                 boost::shared_ptr<Matrix> Ca, boost::shared_ptr<Matrix> Cb, 
                 boost::shared_ptr<Vector> eps_a, boost::shared_ptr<Vector> eps_b, 
                 boost::shared_ptr<Dimension> napi, boost::shared_ptr<Dimension> nbpi);
    OrbitalCoefs(boost::shared_ptr<BasisSet> basis,
                 boost::shared_ptr<Matrix> Ca,
                 boost::shared_ptr<Vector> eps_a,
                 boost::shared_ptr<Dimension> napi);
    ~OrbitalCoefs();

    bool restricted() const { return restricted_; }
    boost::shared_ptr<Dimension> nmopi() const { return nmopi_; }
    boost::shared_ptr<Dimension> nsopi() const { return nsopi_; }
    boost::shared_ptr<Dimension> napi() const { return napi_; }
    boost::shared_ptr<Dimension> nbpi() const { return nbpi_; }
    boost::shared_ptr<Dimension> frzoapi() const { return frzoapi_; }
    boost::shared_ptr<Dimension> frzobpi() const { return frzobpi_; }
    boost::shared_ptr<Dimension> frzvapi() const { return frzvapi_; }
    boost::shared_ptr<Dimension> frzvbpi() const { return frzvbpi_; }
   
    boost::shared_ptr<Matrix> Coa_act_so();
    boost::shared_ptr<Matrix> Cob_act_so();
    boost::shared_ptr<Matrix> Cva_act_so();
    boost::shared_ptr<Matrix> Cvb_act_so();
    boost::shared_ptr<Matrix> Coa_act_ao();
    boost::shared_ptr<Matrix> Cob_act_ao();
    boost::shared_ptr<Matrix> Cva_act_ao();
    boost::shared_ptr<Matrix> Cvb_act_ao();
    boost::shared_ptr<Vector> epsoa_act();
    boost::shared_ptr<Vector> epsob_act();
    boost::shared_ptr<Vector> epsva_act();
    boost::shared_ptr<Vector> epsvb_act();

    boost::shared_ptr<OrbitalCoefs> pipek_mizey_LOs();
    boost::shared_ptr<OrbitalCoefs> boys_LOs();
    boost::shared_ptr<OrbitalCoefs> cholesky_LOs();

    void set_inactive_o(int n);
    void set_inactive_v(int n);

    void set_inactive_oa(int n);
    void set_inactive_ob(int n);
    void set_inactive_va(int n);
    void set_inactive_vb(int n);

    void print(FILE* out);
    void print_nos(FILE* out);

};

class OPDM {

protected:
    
    bool restricted_;   
    bool relaxed_; 

    boost::shared_ptr<BasisSet> primary_;

    boost::shared_ptr<Matrix> Da_;
    boost::shared_ptr<Matrix> Db_;
    
    boost::shared_ptr<OrbitalCoefs> orbs_;
    boost::shared_ptr<Matrix> 
       
 
public:

    

};



/*! \ingroup MINTS */

//! MO Localization Helper Class 
class Localizer 
{
    protected:
        bool localized_;
        shared_ptr<Matrix> L_;
        shared_ptr<Matrix> Lref_;
        shared_ptr<Matrix> C_;
        int print_;
    public:
        Localizer(shared_ptr<Matrix> C);
        static shared_ptr<Matrix> extract_occupieds(shared_ptr<Matrix> C, int* nocc, int* nfzc = NULL);
        static shared_ptr<Matrix> extract_virtuals(shared_ptr<Matrix> C, int* nvirt, int* nfzv = NULL);
        static void place_occupieds_C_to_L(shared_ptr<Matrix> C, shared_ptr<Matrix> L, int* nfzc = NULL);
        static void place_virtuals_C_to_L(shared_ptr<Matrix> C, shared_ptr<Matrix> L, int* nfzv = NULL);
        static void place_occupieds_L_to_C(shared_ptr<Matrix> C, shared_ptr<Matrix> L, int* nfzc = NULL);
        static void place_virtuals_L_to_C(shared_ptr<Matrix> C, shared_ptr<Matrix> L, int* nfzv = NULL);
        virtual ~Localizer();
        shared_ptr<Matrix> get_L() const {return L_;}
        shared_ptr<Matrix> get_Lref() const {return Lref_;}
        virtual shared_ptr<Matrix> localize() = 0; 
        virtual shared_ptr<Matrix> update_localize(shared_ptr<Matrix> S);
        void set_print(int p) { print_ = p; }
};
//! Pipek Mezey Localizer
class PipekMezeyLocalizer : public Localizer
{
    protected:
        shared_ptr<Matrix> S_;
        shared_ptr<BasisSet> basis_;
        double convergence_;
        bool converged_;
        int iteration_;
        int maxiter_;
        std::vector<int> atom_starts_;
        std::vector<int> atom_sizes_;
    public:
        PipekMezeyLocalizer(shared_ptr<Matrix> C, shared_ptr<Matrix> S, shared_ptr<BasisSet> b);
        void set_convergence(double c) { convergence_ = c; }
        void set_maxiter(int c) { maxiter_ = c; }
        bool is_converged() const { return converged_; }
        int iterations_needed() const { return iteration_; }
        virtual ~PipekMezeyLocalizer();
        virtual shared_ptr<Matrix> localize();
};
//! Boys Localizer
class BoysLocalizer : public Localizer
{
    protected:
        shared_ptr<Matrix> dip_x_;
        shared_ptr<Matrix> dip_y_;
        shared_ptr<Matrix> dip_z_;
        double convergence_;
        bool converged_;
        int iteration_;
        int maxiter_;
    public:
        BoysLocalizer(shared_ptr<Matrix> C, shared_ptr<Matrix> dip_x,
            shared_ptr<Matrix> dip_y, shared_ptr<Matrix> dip_z);
        void set_convergence(double c) { convergence_ = c; }
        void set_maxiter(int c) { maxiter_ = c; }
        bool is_converged() const { return converged_; }
        int iterations_needed() const { return iteration_; }
        virtual ~BoysLocalizer();
        virtual shared_ptr<Matrix> localize();
};
//! Cholesky Localizer
class CholeskyLocalizer : public Localizer
{
    protected:
        shared_ptr<Matrix> D_;
    public:
        CholeskyLocalizer(shared_ptr<Matrix> C, shared_ptr<Matrix> D);
        virtual ~CholeskyLocalizer();
        virtual shared_ptr<Matrix> localize();
};
//! Domain Holder Class
class LocalDomain 
{
    protected:
        int print_;

        int nocc_;
        shared_ptr<BasisSet> primary_;
        shared_ptr<BasisSet> auxiliary_;
        shared_ptr<BasisSet> poisson_;

        bool pois_;

        double** I_;
        int** domain_;

        int*  primary_nfuns_;
        int*  primary_nshells_;
        int*  auxiliary_nfuns_;
        int*  auxiliary_nshells_;
        int*  poisson_nfuns_;
        int*  poisson_nshells_;

        int** primary_funs_forward_; 
        int** primary_funs_reverse_; 
        int** primary_shells_forward_; 
        int** primary_shells_reverse_; 
        int** auxiliary_funs_forward_; 
        int** auxiliary_funs_reverse_; 
        int** auxiliary_shells_forward_; 
        int** auxiliary_shells_reverse_; 
        int** poisson_funs_forward_; 
        int** poisson_funs_reverse_; 
        int** poisson_shells_forward_; 
        int** poisson_shells_reverse_; 

        std::vector<int> atom_prim_fun_starts_;
        std::vector<int> atom_prim_fun_sizes_;
        std::vector<int> atom_prim_shell_starts_;
        std::vector<int> atom_prim_shell_sizes_;
        std::vector<int> atom_aux_fun_starts_;
        std::vector<int> atom_aux_fun_sizes_;
        std::vector<int> atom_aux_shell_starts_;
        std::vector<int> atom_aux_shell_sizes_;
        std::vector<int> atom_pois_fun_starts_;
        std::vector<int> atom_pois_fun_sizes_;
        std::vector<int> atom_pois_shell_starts_;
        std::vector<int> atom_pois_shell_sizes_;
    
        void form_indexing();
        void common_init();

    public:
        LocalDomain(int nocc, shared_ptr<BasisSet> basis, shared_ptr<BasisSet> aux, shared_ptr<BasisSet> poisson);
        LocalDomain(int nocc, shared_ptr<BasisSet> basis, shared_ptr<BasisSet> aux);
        virtual ~LocalDomain();
        void form_domains_Lowdin(shared_ptr<Matrix> L, shared_ptr<Matrix> Sp12, double charge_cutoff, double R_cutoff);

        double** get_Lowdin_charges() const {return I_; }
        int** get_domain_truths() const {return domain_;}

        int* get_primary_nfuns() const { return primary_nfuns_; }
        int* get_primary_nshells() const { return primary_nshells_; }
        int* get_auxiliary_nfuns() const { return auxiliary_nfuns_; }
        int* get_auxiliary_nshells() const { return auxiliary_nshells_; }
        int* get_poisson_nfuns() const { return poisson_nfuns_; }
        int* get_poisson_nshells() const { return poisson_nshells_; }

        int** get_primary_funs_forward() const   { return primary_funs_forward_; }
        int** get_primary_funs_reverse() const   { return primary_funs_reverse_; }
        int** get_primary_shells_forward() const { return primary_shells_forward_; }
        int** get_primary_shells_reverse() const { return primary_shells_reverse_; }
        int** get_auxiliary_funs_forward() const   { return auxiliary_funs_forward_; }
        int** get_auxiliary_funs_reverse() const   { return auxiliary_funs_reverse_; }
        int** get_auxiliary_shells_forward() const { return auxiliary_shells_forward_; }
        int** get_auxiliary_shells_reverse() const { return auxiliary_shells_reverse_; }
        int** get_poisson_funs_forward() const   { return poisson_funs_forward_; }
        int** get_poisson_funs_reverse() const   { return poisson_funs_reverse_; }
        int** get_poisson_shells_forward() const { return poisson_shells_forward_; }
        int** get_poisson_shells_reverse() const { return poisson_shells_reverse_; }

        bool is_poisson() const { return pois_; }
        void set_print(int p) { print_ = p; }

};


}
#endif
