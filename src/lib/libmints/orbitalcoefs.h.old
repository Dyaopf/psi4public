#ifndef _psi_src_lib_libmints_orbitalcoefs_h_
#define _psi_src_lib_libmints_orbitalcoefs_h_

#include <cstdio>
#include <psi4-dec.h>
#include <vector>

namespace psi {

class Matrix;
class Vector;
class IntVector;
class Dimension; 
class BasisSet;

class OrbitalCoefs {

protected:
    
    bool restricted_;   
 
    boost::shared_ptr<BasisSet> primary_;

    boost::shared_ptr<Matrix> AO2USO_;

    boost::shared_ptr<Matrix> Ca_;
    boost::shared_ptr<Matrix> Cb_;
   
    boost::shared_ptr<Vector> eps_a_;
    boost::shared_ptr<Vector> eps_b_;

    boost::shared_ptr<Vector> occ_a_;
    boost::shared_ptr<Vector> occ_b_; 

    std::vector<std::pair<int, int> > order_a_;
    std::vector<std::pair<int, int> > order_b_;

    boost::shared_ptr<Dimension> nmopi_;
    boost::shared_ptr<Dimension> nsopi_;
    boost::shared_ptr<Dimension> napi_;
    boost::shared_ptr<Dimension> nbpi_; 
    boost::shared_ptr<Dimension> frzoapi_;
    boost::shared_ptr<Dimension> frzobpi_;
    boost::shared_ptr<Dimension> frzvapi_;
    boost::shared_ptr<Dimension> frzvbpi_;

    void common_init();
    void determine_order();

public:

    /// Standard SO-basis unrestricted constructor
    OrbitalCoefs(boost::shared_ptr<BasisSet> basis,
                 boost::shared_ptr<Matrix> Ca, boost::shared_ptr<Matrix> Cb, 
                 boost::shared_ptr<Vector> eps_a, boost::shared_ptr<Vector> eps_b, 
                 boost::shared_ptr<Dimension> napi, boost::shared_ptr<Dimension> nbpi);
    /// Standard SO-basis restricted constructor
    OrbitalCoefs(boost::shared_ptr<BasisSet> basis,
                 boost::shared_ptr<Matrix> Ca,
                 boost::shared_ptr<Vector> eps_a,
                 boost::shared_ptr<Dimension> napi);
    ~OrbitalCoefs();

    bool restricted() const { return restricted_; }
    boost::shared_ptr<Dimension> nmopi() const { return nmopi_; }
    boost::shared_ptr<Dimension> nsopi() const { return nsopi_; }
    boost::shared_ptr<Dimension> napi() const { return napi_; }
    boost::shared_ptr<Dimension> nbpi() const { return nbpi_; }
    boost::shared_ptr<Dimension> frzoapi() const { return frzoapi_; }
    boost::shared_ptr<Dimension> frzobpi() const { return frzobpi_; }
    boost::shared_ptr<Dimension> frzvapi() const { return frzvapi_; }
    boost::shared_ptr<Dimension> frzvbpi() const { return frzvbpi_; }
    int nmo() const { return nmopi_->total_dimension(); }   
    int nso() const { return nsopi_->total_dimension(); }   
    int na() const { return napi_->total_dimension(); }   
    int nb() const { return nbpi_->total_dimension(); }   
    int frzoa() const { return frzoapi_->total_dimension(); }   
    int frzob() const { return frzobpi_->total_dimension(); }   
    int frzva() const { return frzvapi_->total_dimension(); }   
    int frzvb() const { return frzvbpi_->total_dimension(); }   
 
    boost::shared_ptr<Matrix> Coa_act_so();
    boost::shared_ptr<Matrix> Cob_act_so();
    boost::shared_ptr<Matrix> Cva_act_so();
    boost::shared_ptr<Matrix> Cvb_act_so();
    boost::shared_ptr<Matrix> Coa_act_ao();
    boost::shared_ptr<Matrix> Cob_act_ao();
    boost::shared_ptr<Matrix> Cva_act_ao();
    boost::shared_ptr<Matrix> Cvb_act_ao();
    boost::shared_ptr<Vector> epsoa_act();
    boost::shared_ptr<Vector> epsob_act();
    boost::shared_ptr<Vector> epsva_act();
    boost::shared_ptr<Vector> epsvb_act();

    boost::shared_ptr<OrbitalCoefs> pipek_mizey_LOs();
    boost::shared_ptr<OrbitalCoefs> boys_LOs();
    boost::shared_ptr<OrbitalCoefs> cholesky_LOs();

    void set_inactive_oa(int n);
    void set_inactive_ob(int n);
    void set_inactive_va(int n);
    void set_inactive_vb(int n);

};

} 
#endif
