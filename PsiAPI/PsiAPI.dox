/** \mainpage Introduction to the PsiAPI Library
 
  This page is meant to introduce you to the PsiAPI library.
  
  \tableofcontents
  
  \section Goal Goal
  
  The overall goal of this library is to be the liaison between the
  driver and the individual electronic structure methods (for simplicity
  method is defined as something that can produce an energy).  Working closely
  with both the driver and the methods, this layer primarily intends to 
  provide communication between different packages, massively parallel
  implementations of finite difference and fragment based methods 
  (i.e. many-body expansion), and automatic checkpointing.  A series of
  useful, related high-level routines are also provided such as standard
  molecular manipulations (e.g. unit and super cell routines), and generic
  basis set handling.
  
 \section Ideology Ideology
 
 In designing this library we have been guided by a series of design principles.
 At the forefront is simplicity.  Classes are designed to have minimal
 member functions, each of which works with the most primitive data types
 possible.  Hence many quantities are of type double*.  This has the advantage
 that it doesn't limit us to a particular matrix/tensor class or force the
 user to use C++ objects like std::vector.  In fact, this design decision
 allows a C (and hence Fortran) interface with minimal work (I dislike both
 of those languages so I haven't written such interfaces yet, but I did try to
 keep the option open).
 
 Another design principal is efficiency and low overhead.  No part of this
 API should ever be the limiting step (other than maybe for an MM
 calculation).  Objects are designed so that many replicas can be formed
 quickly and at low memory overhead (useful for farming off calculations in
 a parallel fashion).  Part of efficiency is use of the DRY (don't repeat
 yourself) principle which we have tried to observe throughout the code. In
 particular, a serious attempt has been made to never copy/paste code, but
 instead implement generic routines or base classes to perform common tasks.
 This leads to overall easier to maintain code on account of its more terse
 nature and the fewer moving parts.  Extensive comments are provided to 
 help the user understand how each of the code elements works as well as
 to serve as a developer's manual.
 
 The final design decision is that this library is first and foremost
 concerned with C++ support, but strides to provide equal support for Python and
 eventually C/Fortran as well.  In particular, this means the entire
 library is written in C++ and wrapped in Python, or C.  C++ in particular
 provides easier access to memory semantics, useful API constructs like
 (private, protected, public), and most importantly known, demonstrated 
 massively parallel paradigms.  Ultimately, this decision should be
 invisible as far as usage is concerned in that the Python and C interfaces
 provide all the same functionality as the C++ interface.  That is not
 to say there are no consequences resulting from choosing one interface
 over the other. In particular library designers should probably consult
 statistics such as these: 
 <a href=
 "http://benchmarksgame.alioth.debian.org/u32q/benchmark.php?test=all&lang=python3&lang2=gpp&data=u32q">
 "C++ vs. Python Times"</a>
  , which give the estimated overhead costs/savings in time, memory, and
  lines of code when considering which language to use.  Statistics like
  this show it is hard to beat C++ which is why we opted to use it as our
  primary language.
  
  \section PrePsiAPI Life Prior to PsiAPI
  
  The original Psi4 code structure was complicated at best.  Calling Psi4
  from say a terminal called an executable, which then launched a Python
  interpreter that read the input, assembled options, and determined the
  path through the code.  This often led to a language traversal pattern
  of at least C++, Python, C++.  In many cases the interleaving was much
  worse.  The repeated traversal of languages dramatically complicates things particularly
  in that much care needs to be taken when managing the lifetime of objects
  because C++ and Python have very different memory semantics.  I've also
  run into stack problems within recursive calls owing to the large stack
  presence of Python.
  
  The relatively recent decisions to move towards a massively parallel 
  implementation of Psi4 as well as to start using C++11 further 
  complicates things.  In particular wherever these coding elements arise,
  all subordinate code must be aware and capable of dealing with them.  C++11
  is probably the easier of the two to deal with.  As will be seen below
  PsiAPI intends to move to a paradigm where each method is a seperate library
  written in Python, C++, C, or Fortran.  Within these libraries the developer
  is free to use whatever coding paradigms they want so long as they conform
  to the relatively simple interface proposed by PsiAPI.  In particular they
  are free to use C++11 and users who don't have C++11 simply don't compile
  those libraries.
  
  MPI is by far harder to deal with.  Once MPI has started it can't be stopped
  until all parallel work has concluded (MPI routines can't be called after
  MPI finalize).  Furthermore, once MPI starts everything runs in parallel.
  This means things will get printed many times, files will be opened and closed 
  many times, etc.  In the old Psi4 this was handled with a series of objects
  meant to abstract away MPI.  However, this meant that developers using
  plugins or only parts of Psi4 were forced to adopt all such objects or face
  compatability problems.  Again our solution is to move MPI down into the
  methods.  This means when I, a developer, want to make a new method, I
  choose whether or not it runs in MPI and if I decide it runs in MPI it
  is my responsibility to manage parallel resources.
  
  \section NewPsi Life With PsiAPI
  
  Like a cake, the new Psi4 is layered.  These layers are designed so that
  they only communicate with the layer(s) above and/or below it.  At the
  top level resides the driver.  Written entirely in Python, the driver allows
  a flexible user interface accessible to anyone who knows Python.  Under
  the driver is PsiAPI, which is the liason between method developers and
  the driver.  PsiAPI handles basic problem setup and provides some
  utilities to make manipulating the problem easier.  In particular it
  provides option, basis set, and molecule manipulations.  Under PsiAPI
  sits each method.  These methods represent the cores of an electronic
  structure package.
  
  Of course many of the methods will need to perform common tasks like
  build integrals, etc.  This will be handled by a sort of core library,
  or series of such libraries, providing an electronic structure
  equivalent of the C++ std library. Think of it as a slimmed down libmints.
  Again because each method that plugs into PsiAPI is a basically autonomous
  library you are free to use whatever libraries you want.
  
  The freedom of each method is both a blessing and a curse.  The blessing
  comes from allowing developers to do what they want, how they want. The
  curse is that in the end all of these different packages need to be compiled
  and unified.  So long as the packages are maintained on publicly accessible
  sites (e.g. Github) and the installation has been relatively automated (e.g
  ./configure, make, make install or better yet CMake) the driver can do
  this for you.
  
 */
 